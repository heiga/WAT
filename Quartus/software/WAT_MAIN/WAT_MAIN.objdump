
WAT_MAIN.elf:     file format elf32-littlenios2
WAT_MAIN.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0001317c memsz 0x0001cdc0 flags rwx
    LOAD off    0x00015020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00016000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011110  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001bc  00811110  00811110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eb0  008112cc  008112cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009c44  0081317c  0081317c  0001417c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0081cdc0  0081cdc0  00016000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  00016000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  00016000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000d28  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002596f  00000000  00000000  00016d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000905d  00000000  00000000  0003c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000abd5  00000000  00000000  0004571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fdc  00000000  00000000  000502f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000456d  00000000  00000000  000532d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004ada  00000000  00000000  0005783d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0005c318  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000660  00000000  00000000  0005c328  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  000617a9  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000617af  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000617bb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000617bc  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000617bd  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000617c1  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000617c5  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  000617c9  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  000617d4  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  000617df  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  000617ea  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  000617f8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009e287  00000000  00000000  00061806  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
00811110 l    d  .rodata	00000000 .rodata
008112cc l    d  .rwdata	00000000 .rwdata
0081317c l    d  .bss	00000000 .bss
0081cdc0 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00812fa0 l     O .rwdata	00000006 CAM_SYNC
00812fa6 l     O .rwdata	00000006 CAM_INIT
00812fac l     O .rwdata	00000006 CAM_SIZE
00812fb2 l     O .rwdata	00000006 CAM_SNAP
00812fb8 l     O .rwdata	00000006 CAM_GRAB
00812fbe l     O .rwdata	00000006 CAM_DATA
00812fc4 l     O .rwdata	00000006 CAM_ACK_SYNC
00812fca l     O .rwdata	00000006 CAM_ACK_INIT
00812fd0 l     O .rwdata	00000006 CAM_ACK_SIZE
00812fd6 l     O .rwdata	00000006 CAM_ACK_SNAP
00812fdc l     O .rwdata	00000006 CAM_ACK_GRAB
00812fe2 l     O .rwdata	00000006 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 interrupt_peripherals.c
00812fe8 l     O .rwdata	00000006 CAM_SYNC
00812fee l     O .rwdata	00000006 CAM_INIT
00812ff4 l     O .rwdata	00000006 CAM_SIZE
00812ffa l     O .rwdata	00000006 CAM_SNAP
00813000 l     O .rwdata	00000006 CAM_GRAB
00813006 l     O .rwdata	00000006 CAM_DATA
0081300c l     O .rwdata	00000006 CAM_ACK_SYNC
00813012 l     O .rwdata	00000006 CAM_ACK_INIT
00813018 l     O .rwdata	00000006 CAM_ACK_SIZE
0081301e l     O .rwdata	00000006 CAM_ACK_SNAP
00813024 l     O .rwdata	00000006 CAM_ACK_GRAB
0081302a l     O .rwdata	00000006 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 motor.c
00000000 l    df *ABS*	00000000 wat_main.c
00813030 l     O .rwdata	00000006 CAM_SYNC
00813036 l     O .rwdata	00000006 CAM_INIT
0081303c l     O .rwdata	00000006 CAM_SIZE
00813042 l     O .rwdata	00000006 CAM_SNAP
00813048 l     O .rwdata	00000006 CAM_GRAB
0081304e l     O .rwdata	00000006 CAM_DATA
00813054 l     O .rwdata	00000006 CAM_ACK_SYNC
0081305a l     O .rwdata	00000006 CAM_ACK_INIT
00813060 l     O .rwdata	00000006 CAM_ACK_SIZE
00813066 l     O .rwdata	00000006 CAM_ACK_SNAP
0081306c l     O .rwdata	00000006 CAM_ACK_GRAB
00813072 l     O .rwdata	00000006 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 wifi.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00800dc8 l     F .text	00000008 __fp_unlock
00800ddc l     F .text	0000019c __sinit.part.1
00800f78 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008112cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
008038b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008039c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008039f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00803d88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00803e70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00804044 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008130a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
008042b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
008130a8 l     O .rwdata	00000004 lockid
008131d8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
008130ac l     O .rwdata	00000004 lockid
008131e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00805cf0 l     F .text	00000048 OS_InitMisc
00805d38 l     F .text	0000006c OS_InitRdyList
00805ea4 l     F .text	000000e4 OS_InitTCBList
00805c10 l     F .text	000000e0 OS_InitEventList
00805da4 l     F .text	00000080 OS_InitTaskIdle
00805e24 l     F .text	00000080 OS_InitTaskStat
00806114 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00807e24 l     F .text	000000f4 OS_FlagTaskRdy
00807be4 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080befc l     F .text	00000034 alt_dev_reg
00811ca0 l     O .rwdata	000000cc epcs_flash_controller_0
00811d6c l     O .rwdata	0000106c jtag_uart_0
00812dd8 l     O .rwdata	000000d0 wifi_uart
00812ea8 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0080c024 l     F .text	00000034 alt_flash_device_register
0080c0ac l     F .text	000003f8 alt_epcs_flash_query
0080c4a4 l     F .text	000000ec alt_epcs_flash_memcmp
0080c87c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080cdcc l     F .text	000002a4 altera_avalon_jtag_uart_irq
0080d070 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d84c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080dbb0 l     F .text	0000009c altera_avalon_uart_irq
0080dc4c l     F .text	00000138 altera_avalon_uart_rxirq
0080dd84 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080df7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080e220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_hostfs.c
00813124 l     O .rwdata	00000009 hcinfo.2538
00813130 l     O .rwdata	0000000a hcinfo.2551
0081313c l     O .rwdata	00000009 hcinfo.2560
00813148 l     O .rwdata	0000000a hcinfo.2573
00813154 l     O .rwdata	0000000a hcinfo.2586
00813160 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 epcs_commands.c
0080e974 l     F .text	00000038 epcs_test_wip
0080e9ac l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 fifoed_avalon_uart.c
0080ef54 l     F .text	0000003c alt_get_errno
0080f424 l     F .text	00000154 fifoed_avalon_uart_rxirq
0080f578 l     F .text	000001d4 fifoed_avalon_uart_txirq
0080f74c l     F .text	00000090 fifoed_avalon_uart_irq
00000000 l    df *ABS*	00000000 fifoed_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080fc78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080fff0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00810150 l     F .text	0000003c alt_get_errno
0081018c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00813238 g     O .bss	00000004 alt_instruction_exception_handler
008130fa g     O .rwdata	00000002 OSTaskNameSize
0080c7f0 g     F .text	0000008c alt_epcs_flash_get_info
00803838 g     F .text	00000054 _isatty_r
00803f88 g     F .text	000000bc alt_main
00800c5c g     F .text	000000c0 _puts_r
00819a9c g     O .bss	00000100 alt_irq
00803560 g     F .text	00000060 _lseek_r
00808644 g     F .text	000000d8 OS_MemInit
0080be9c g     F .text	00000060 OSTimeSet
00804964 g     F .text	00000610 OSEventPendMulti
0081cdc0 g       *ABS*	00000000 __alt_heap_start
008107c8 g     F .text	00000024 OSTaskCreateHook
008130d2 g     O .rwdata	00000002 OSMboxEn
00804fcc g     F .text	0000004c OSIntEnter
0081317c g     O .bss	00000004 wifiPackageBuffer
00802b14 g     F .text	0000005c __sseek
00801128 g     F .text	00000010 __sinit
008130e2 g     O .rwdata	00000002 OSQEn
00800f80 g     F .text	00000078 __sfmoreglue
00804638 g     F .text	000000cc __malloc_unlock
00810830 g     F .text	00000020 OSTaskStatHook
0080e494 g     F .text	0000011c alt_hostfs_open
008131e8 g     O .bss	00000001 OSLockNesting
00813120 g     O .rwdata	00000002 OSDataSize
008131e9 g     O .bss	00000001 OSRunning
00802200 g     F .text	0000015c memmove
00810870 g     F .text	00000020 OSInitHookBegin
00813118 g     O .rwdata	00000002 OSTmrSize
00801110 g     F .text	00000018 _cleanup
00812ed0 g     O .rwdata	000000d0 cam_uart
008131ec g     O .bss	00000004 OSIdleCtr
0081326c g     O .bss	00000800 camPackageBuffer
00810578 g     F .text	00000024 altera_nios2_gen2_irq_init
00810648 g       .text	00000000 OSStartTsk
00806444 g     F .text	000002d4 OS_TCBInit
0080e9e8 g     F .text	000000fc epcs_sector_erase
0080faec g     F .text	00000060 fifoed_avalon_uart_classic_write_fd
01009000 g     F .entry	00000000 __reset
0081311e g     O .rwdata	00000002 OSTmrWheelTblSize
008130be g     O .rwdata	00000002 OSEventSize
008131f0 g     O .bss	00000001 OSPrioHighRdy
008037dc g     F .text	0000005c _fstat_r
00813a6c g     O .bss	00000030 camCommandBuffer
008107ec g     F .text	00000024 OSTaskDelHook
008131c0 g     O .bss	00000004 errno
00802a90 g     F .text	00000008 __seofread
00810628 g       .text	00000000 OSStartHighRdy
0080a91c g     F .text	000001e4 OSTaskCreateExt
0080772c g     F .text	00000060 OSFlagPendGetFlagsRdy
008130fe g     O .rwdata	00000002 OSTaskStatStkSize
008068a8 g     F .text	00000308 OSFlagAccept
00808c88 g     F .text	000000b8 OSQFlush
0080871c g     F .text	00000140 OSQAccept
008131d0 g     O .bss	00000004 alt_argv
0081afa0 g       *ABS*	00000000 _gp
00813180 g     O .bss	00000004 wifiPackageQueue
0080a770 g     F .text	000001ac OSTaskCreate
0080f9cc g     F .text	00000060 fifoed_avalon_uart_read_fd
0080a280 g     F .text	000004f0 OSTaskChangePrio
008131e4 g     O .bss	00000004 alt_heapsem
00806718 g     F .text	00000190 OSDebugInit
0080ab00 g     F .text	00000344 OSTaskDel
00811b20 g     O .rwdata	00000180 alt_fd_list
00819b9c g     O .bss	00000370 OSFlagTbl
00800a3c g     F .text	0000006c wifi_uart_interrupt
0080e6cc g     F .text	00000068 alt_hostfs_seek
008059f0 g     F .text	000000b8 OS_EventTaskRemove
0080ec2c g     F .text	0000006c epcs_write_status_register
00810af0 g     F .text	00000090 alt_find_dev
008020b8 g     F .text	00000148 memcpy
008130e8 g     O .rwdata	00000002 OSRdyTblSize
00800dd0 g     F .text	0000000c _cleanup_r
0080fed4 g     F .text	00000080 alt_fs_reg
008100d4 g     F .text	0000007c alt_io_redirect
0080fa8c g     F .text	00000060 fifoed_avalon_uart_classic_read_fd
00811110 g       *ABS*	00000000 __DTOR_END__
00800d1c g     F .text	00000014 puts
0080ff54 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00804704 g     F .text	00000120 OSEventNameGet
008130cc g     O .rwdata	00000002 OSFlagMax
0080c988 g     F .text	00000100 alt_epcs_flash_write_block
00805018 g     F .text	000000f8 OSIntExit
00813106 g     O .rwdata	00000002 OSTCBSize
008131f1 g     O .bss	00000001 OSPrioCur
0080d2cc g     F .text	000002bc altera_avalon_jtag_uart_read
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00800ba0 g     F .text	00000064 .hidden __udivsi3
00803dc4 g     F .text	000000ac isatty
008130ec g     O .rwdata	00000002 OSStkWidth
008130e0 g     O .rwdata	00000002 OSPtrSize
008130c0 g     O .rwdata	00000002 OSEventTblSize
0081059c g       .text	00000000 OSCtxSw
008131bc g     O .bss	00000004 __malloc_top_pad
008131f4 g     O .bss	00000004 OSTCBList
00813a9c g     O .bss	00002000 camera_stk
008131c4 g     O .bss	00000004 alt_fd_list_lock
00813184 g     O .bss	00000004 findCommandBuffer
00801178 g     F .text	000004c8 __sfvwrite_r
00819f0c g     O .bss	00000c30 OSMemTbl
008131f8 g     O .bss	00000001 OSTickStepState
008029e8 g     F .text	00000054 _sbrk_r
0080e5f4 g     F .text	0000006c alt_hostfs_read
00800a08 g     F .text	00000034 wifi_task
008130e4 g     O .rwdata	00000002 OSQMax
0081ab3c g     O .bss	00000800 OSTaskStatStk
00808280 g     F .text	000000f0 OSMemNameGet
008130c4 g     O .rwdata	00000002 OSFlagEn
0080377c g     F .text	00000060 _read_r
0081310a g     O .rwdata	00000002 OSTimeTickHookEn
00807f18 g     F .text	000000a4 OS_FlagUnlink
00809138 g     F .text	00000168 OSQPost
00813098 g     O .rwdata	00000004 alt_max_fd
00805fdc g     F .text	00000068 OS_MemCopy
00806044 g     F .text	000000d0 OS_Sched
00802d80 g     F .text	000000f0 _fclose_r
00808190 g     F .text	000000f0 OSMemGet
0080b12c g     F .text	000001b4 OSTaskNameSet
008030fc g     F .text	00000030 fflush
008131b8 g     O .bss	00000004 __malloc_max_sbrked_mem
008131fc g     O .bss	00000004 OSCtxSwCtr
00810850 g     F .text	00000020 OSTimeTickHook
008130ce g     O .rwdata	00000002 OSFlagNameSize
00805aa8 g     F .text	00000100 OS_EventTaskRemoveMulti
008058a0 g     F .text	00000150 OS_EventTaskWaitMulti
0080c910 g     F .text	00000078 alt_epcs_flash_erase_block
008130e6 g     O .rwdata	00000002 OSQSize
00803eac g     F .text	000000dc lseek
00809be8 g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
00813078 g     O .rwdata	00000004 _global_impure_ptr
0080eef8 g     F .text	0000005c epcs_exit_4_bytes_mode
00802484 g     F .text	00000564 _realloc_r
008130d0 g     O .rwdata	00000002 OSLowestPrio
0081cdc0 g       *ABS*	00000000 __bss_end
00803c98 g     F .text	000000f0 alt_iic_isr_register
008108d0 g     F .text	00000024 OSTCBInitHook
00813116 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00810470 g     F .text	00000108 alt_tick
008130b8 g     O .rwdata	00000002 OSEventEn
00813112 g     O .rwdata	00000002 OSTmrCfgNameSize
0080f984 g     F .text	00000048 fifoed_avalon_uart_classic_write
0080da50 g     F .text	00000160 altera_avalon_uart_init
00801148 g     F .text	00000018 __fp_lock_all
00803c4c g     F .text	0000004c alt_ic_irq_enabled
00813188 g     O .bss	00000001 useData
00807d44 g     F .text	000000e0 OS_FlagInit
008103d4 g     F .text	0000009c alt_alarm_stop
008130f4 g     O .rwdata	00000002 OSTaskIdleStkSize
008131c8 g     O .bss	00000004 alt_irq_active
00809820 g     F .text	000000b0 OSSemAccept
00808484 g     F .text	000000d8 OSMemPut
00807fbc g     F .text	000001d4 OSMemCreate
00813200 g     O .bss	00000004 OSIdleCtrMax
0080e5b0 g     F .text	00000044 alt_hostfs_close
010040fc g     F .exceptions	000000d4 alt_irq_handler
00811af8 g     O .rwdata	00000028 alt_dev_null
00813108 g     O .rwdata	00000002 OSTicksPerSec
0081059c g       .text	00000000 OSIntCtxSw
00813204 g     O .bss	00000004 OSTCBFreeList
00809df4 g     F .text	0000016c OSSemPendAbort
00813090 g     O .rwdata	00000008 alt_dev_list
008042f4 g     F .text	00000100 write
0081310c g     O .rwdata	00000002 OSVersionNbr
00803a30 g     F .text	000000b8 fstat
008130b4 g     O .rwdata	00000004 OSEndiannessTest
00800c04 g     F .text	00000058 .hidden __umodsi3
0080edb4 g     F .text	00000068 epcs_read_electronic_signature
008130c6 g     O .rwdata	00000002 OSFlagGrpSize
0081318c g     O .bss	00000004 initCommandBuffer
0081cdc0 g       *ABS*	00000000 end
00813190 g     O .bss	00000004 camQueueStatus
0080e25c g     F .text	00000238 altera_avalon_uart_write
0080cc84 g     F .text	00000148 altera_avalon_jtag_uart_init
008062ac g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00811110 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080d8c4 g     F .text	0000007c alt_avalon_timer_sc_init
0080d9a0 g     F .text	00000060 altera_avalon_uart_write_fd
0080da00 g     F .text	00000050 altera_avalon_uart_close_fd
0080d588 g     F .text	000002c4 altera_avalon_jtag_uart_write
00800038 g     F .text	000003ac camera_task
00801138 g     F .text	00000004 __sfp_lock_acquire
00801fd4 g     F .text	000000e4 memchr
00805f88 g     F .text	00000054 OS_MemClr
0081066c g     F .text	0000015c OSTaskStkInit
00813194 g     O .bss	00000004 initCommandQueue
00803250 g     F .text	00000310 _free_r
008055f8 g     F .text	00000198 OS_EventTaskRdy
00810f5c g     F .text	00000180 __call_exitprocs
00813208 g     O .bss	00000001 OSCPUUsage
00813080 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
0081323c g     O .bss	00000004 _alt_tick_rate
00808d40 g     F .text	0000028c OSQPend
0080b9ec g     F .text	00000104 OSTimeDly
008108f4 g     F .text	000001fc alt_avalon_spi_command
00813240 g     O .bss	00000004 _alt_nticks
00804080 g     F .text	00000104 read
0080bf68 g     F .text	000000bc alt_sys_init
00810e44 g     F .text	00000118 __register_exitproc
00813209 g     O .bss	00000001 OSTaskCtr
0080baf0 g     F .text	0000017c OSTimeDlyHMSM
0080d174 g     F .text	00000068 altera_avalon_jtag_uart_close
0080388c g     F .text	00000028 .hidden __mulsi3
00813244 g     O .bss	00000028 __malloc_current_mallinfo
008130ba g     O .rwdata	00000002 OSEventMax
00809f60 g     F .text	00000110 OSSemPost
0080e918 g     F .text	0000005c epcs_read_status_register
0080519c g     F .text	000000dc OSSchedUnlock
00813198 g     O .bss	00000004 camCommandQueue
0080f93c g     F .text	00000048 fifoed_avalon_uart_classic_read
0080cb20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00810c88 g     F .text	000000f4 alt_get_fd
0081320c g     O .bss	00000004 OSMemFreeList
008052e8 g     F .text	000000b0 OSStatInit
00807b20 g     F .text	000000c4 OSFlagQuery
0080ef90 g     F .text	0000025c fifoed_avalon_uart_read
008130f0 g     O .rwdata	00000002 OSTaskCreateExtEn
00802d2c g     F .text	00000054 _close_r
0080ee1c g     F .text	00000080 epcs_read_device_id
00810dc8 g     F .text	0000007c memcmp
008055d8 g     F .text	00000020 OS_Dummy
0080cbe0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081cdc0 g       *ABS*	00000000 __alt_stack_base
0080cc30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00802bd8 g     F .text	00000154 __swsetup_r
0081b33c g     O .bss	000001e0 OSQTbl
00800ff8 g     F .text	00000118 __sfp
008116f0 g     O .rwdata	00000408 __malloc_av_
00801144 g     F .text	00000004 __sinit_lock_release
00813210 g     O .bss	00000004 OSTCBHighRdy
00802a3c g     F .text	00000054 __sread
00813214 g     O .bss	00000004 OSQFreeList
00810b80 g     F .text	00000108 alt_find_file
0080fcb4 g     F .text	000000a4 alt_dev_llist_insert
0081319c g     O .bss	00000004 findCommandQueue
00804518 g     F .text	00000120 __malloc_lock
00804208 g     F .text	000000b0 sbrk
00804824 g     F .text	00000140 OSEventNameSet
008030a0 g     F .text	0000005c _fflush_r
00813218 g     O .bss	00000001 OSRdyGrp
0081316c g     O .rwdata	00000008 alt_flash_dev_list
0081317c g       *ABS*	00000000 __bss_start
0080235c g     F .text	00000128 memset
008007f4 g     F .text	00000214 main
008131d4 g     O .bss	00000004 alt_envp
008131b4 g     O .bss	00000004 __malloc_max_total_mem
0080cb80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00811148 g     O .rodata	00000100 OSUnMapTbl
008130ea g     O .rwdata	00000002 OSSemEn
0080778c g     F .text	00000394 OSFlagPost
00802b70 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802e70 g     F .text	00000014 fclose
00805790 g     F .text	00000110 OS_EventTaskWait
0080f1ec g     F .text	00000238 fifoed_avalon_uart_write
00806378 g     F .text	000000cc OS_TaskStatStkChk
0080ae44 g     F .text	00000150 OSTaskDelReq
008017c8 g     F .text	0000080c _malloc_r
0081309c g     O .rwdata	00000004 alt_errno
00805278 g     F .text	00000070 OSStart
00800680 g     F .text	00000174 motor_task
008044b8 g     F .text	00000060 __env_unlock
00801640 g     F .text	000000c4 _fwalk
0080b2e0 g     F .text	000001d4 OSTaskResume
0080855c g     F .text	000000e8 OSMemQuery
008130fc g     O .rwdata	00000002 OSTaskStatEn
008130d6 g     O .rwdata	00000002 OSMemMax
008092a0 g     F .text	00000170 OSQPostFront
00800aa8 g     F .text	00000084 .hidden __divsi3
00813219 g     O .bss	00000003 OSRdyTbl
008130b0 g     O .rwdata	00000002 OSDebugEn
0080312c g     F .text	00000124 _malloc_trim_r
00811110 g       *ABS*	00000000 __CTOR_END__
008130c8 g     O .rwdata	00000002 OSFlagNodeSize
00813110 g     O .rwdata	00000002 OSTmrCfgMax
0080c590 g     F .text	00000260 alt_epcs_flash_write
0080885c g     F .text	000001ac OSQCreate
0080af94 g     F .text	00000198 OSTaskNameGet
00809410 g     F .text	0000020c OSQPostOpt
00805398 g     F .text	00000220 OSTimeTick
008131a0 g     O .bss	00000004 camPackageQueue
008130f8 g     O .rwdata	00000002 OSTaskMax
00811110 g       *ABS*	00000000 __DTOR_LIST__
008098d0 g     F .text	000000d8 OSSemCreate
0081311c g     O .rwdata	00000002 OSTmrWheelSize
0080fa2c g     F .text	00000060 fifoed_avalon_uart_write_fd
008130f2 g     O .rwdata	00000002 OSTaskDelEn
0080a070 g     F .text	00000110 OSSemQuery
00808a08 g     F .text	00000280 OSQDel
00808fcc g     F .text	0000016c OSQPendAbort
0080bf30 g     F .text	00000038 alt_irq_init
00804184 g     F .text	00000084 alt_release_fd
008131a4 g     O .bss	00000004 foundCommandBuffer
00810d7c g     F .text	00000014 atexit
00802b78 g     F .text	00000060 _write_r
00805110 g     F .text	0000008c OSSchedLock
008005bc g     F .text	00000058 sensor_interrupt
00806bb0 g     F .text	00000108 OSFlagCreate
0081307c g     O .rwdata	00000004 _impure_ptr
008131cc g     O .bss	00000004 alt_argc
00802e84 g     F .text	0000021c __sflush_r
0080fdb8 g     F .text	00000060 _do_dtors
008130c2 g     O .rwdata	00000002 OSEventMultiEn
00806cb8 g     F .text	00000248 OSFlagDel
0081321c g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
00807174 g     F .text	000005b8 OSFlagPend
0081310e g     O .rwdata	00000002 OSTmrEn
00801160 g     F .text	00000018 __fp_unlock_all
00813088 g     O .rwdata	00000008 alt_fs_list
00806188 g     F .text	00000074 OS_StrCopy
0080e660 g     F .text	0000006c alt_hostfs_write
008130d8 g     O .rwdata	00000002 OSMemNameSize
00810890 g     F .text	00000020 OSInitHookEnd
00813104 g     O .rwdata	00000002 OSTCBPrioTblMax
0080eae4 g     F .text	000000f4 epcs_read_buffer
00813100 g     O .rwdata	00000002 OSTaskStatStkChkEn
0080c058 g     F .text	00000054 alt_epcs_flash_init
00803ae8 g     F .text	00000050 alt_ic_isr_register
008130d4 g     O .rwdata	00000002 OSMemEn
008130de g     O .rwdata	00000002 OSMutexEn
0081317c g       *ABS*	00000000 _edata
0080d940 g     F .text	00000060 altera_avalon_uart_read_fd
00800614 g     F .text	0000006c button_interrupt
0081cdc0 g       *ABS*	00000000 _end
0080fe18 g     F .text	00000068 alt_flash_open_dev
00813220 g     O .bss	00000001 OSIntNesting
0080d1dc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080bc6c g     F .text	000001d4 OSTimeDlyResume
00807028 g     F .text	0000014c OSFlagNameSet
0080b4b4 g     F .text	000001c0 OSTaskStkChk
00803bc0 g     F .text	0000008c alt_ic_irq_disable
0080ee9c g     F .text	0000005c epcs_enter_4_bytes_mode
008130da g     O .rwdata	00000002 OSMemSize
00802a98 g     F .text	0000007c __swrite
00813084 g     O .rwdata	00000004 __malloc_trim_threshold
00813224 g     O .bss	00000004 OSTCBCur
00810d90 g     F .text	00000038 exit
008130dc g     O .rwdata	00000002 OSMemTblSize
00801704 g     F .text	000000c4 _fwalk_reent
0080fe80 g     F .text	00000054 alt_flash_close_dev
00800b2c g     F .text	00000074 .hidden __modsi3
008131a8 g     O .bss	00000004 moveCommandBuffer
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
0080113c g     F .text	00000004 __sfp_lock_release
00804f74 g     F .text	00000058 OSInit
0080b858 g     F .text	00000124 OSTaskQuery
00809778 g     F .text	000000a8 OS_QInit
008061fc g     F .text	00000054 OS_StrLen
00808370 g     F .text	00000114 OSMemNameSet
008130f6 g     O .rwdata	00000002 OSTaskProfileEn
00813228 g     O .bss	00000004 OSTime
0080df28 g     F .text	00000054 altera_avalon_uart_close
0081b51c g     O .bss	00000800 OSTaskIdleStk
008110dc g     F .text	00000034 _exit
00815a9c g     O .bss	00002000 motor_stk
0080fb4c g     F .text	0000012c alt_alarm_start
00806f00 g     F .text	00000128 OSFlagNameGet
0080be40 g     F .text	0000005c OSTimeGet
008035c0 g     F .text	000001bc __smakebuf_r
00800d30 g     F .text	00000098 strlen
0080ebd8 g     F .text	00000054 epcs_write_enable
00810810 g     F .text	00000020 OSTaskSwHook
00810278 g     F .text	0000015c open
008003e4 g     F .text	00000148 cam_send_command
0081bd1c g     O .bss	00000b40 OSEventTbl
0081c85c g     O .bss	00000510 OSTCBTbl
0080a180 g     F .text	00000100 OSSemSet
008130a0 g     O .rwdata	00000004 alt_priority_mask
008099a8 g     F .text	00000240 OSSemDel
0081322c g     O .bss	00000004 OSFlagFreeList
00803b38 g     F .text	00000088 alt_ic_irq_enable
008130bc g     O .rwdata	00000002 OSEventNameSize
00813230 g     O .bss	00000001 OSStatRdy
0081cd6c g     O .bss	00000054 OSTCBPrioTbl
0080dfb8 g     F .text	00000268 altera_avalon_uart_read
008043f4 g     F .text	000000c4 __env_lock
00813102 g     O .rwdata	00000002 OSTaskSwHookEn
008131ac g     O .bss	00000004 moveCommandQueue
0080ca88 g     F .text	00000098 alt_epcs_flash_read
00817a9c g     O .bss	00002000 wifi_stk
008131b0 g     O .bss	00000004 foundCommandQueue
00813174 g     O .rwdata	00000008 alt_alarm_list
008130ca g     O .rwdata	00000002 OSFlagWidth
0080fd58 g     F .text	00000060 _do_ctors
008038f0 g     F .text	000000d8 close
0080052c g     F .text	00000090 cam_uart_interrupt
008131dc g     O .bss	00000004 alt_envsem
00813234 g     O .bss	00000004 OSIdleCtrRun
008055b8 g     F .text	00000020 OSVersion
00813114 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080b97c g     F .text	00000070 OS_TaskStkClr
008130ee g     O .rwdata	00000002 OSTaskCreateEn
0080f7dc g     F .text	00000160 fifoed_avalon_uart_init
00805ba8 g     F .text	00000068 OS_EventWaitListInit
008108b0 g     F .text	00000020 OSTaskIdleHook
00801140 g     F .text	00000004 __sinit_lock_acquire
0080ec98 g     F .text	0000011c epcs_write_buffer
0080b674 g     F .text	000001e4 OSTaskSuspend
0080e734 g     F .text	000001e4 alt_hostfs_fstat
00806250 g     F .text	0000005c OS_TaskIdle
0081311a g     O .rwdata	00000002 OSTmrTblSize
0080961c g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	0804fcc0 	call	804fcc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	008020b4 	movhi	r2,130
 1004140:	10a6a704 	addi	r2,r2,-25956
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	008020b4 	movhi	r2,130
 1004158:	10a6a704 	addi	r2,r2,-25956
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	08050180 	call	805018 <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a0a617 	ldw	r2,-32104(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a0a617 	ldw	r2,-32104(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80000c:	d6abe814 	ori	gp,gp,44960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	108c5f14 	ori	r2,r2,12668

    movhi r3, %hi(__bss_end)
  800018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80001c:	18f37014 	ori	r3,r3,52672

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	0803f880 	call	803f88 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <camera_task>:
 * camera will take a picture and output the average color
 * value to the terminal. Operator will switch the image and
 * press the button again. A different average color should
 * appear in the terminal. Repeat as needed.
 */
void camera_task(void* pdata){
  800038:	defff604 	addi	sp,sp,-40
  80003c:	dfc00915 	stw	ra,36(sp)
  800040:	df000815 	stw	fp,32(sp)
  800044:	df000804 	addi	fp,sp,32
  800048:	e13fff15 	stw	r4,-4(fp)

	uint32_t *leds = GREEN_LEDS_BASE;
  80004c:	00804074 	movhi	r2,257
  800050:	10a83004 	addi	r2,r2,-24384
  800054:	e0bff915 	stw	r2,-28(fp)

	uint8_t q = 0;
  800058:	e03ff805 	stb	zero,-32(fp)
	uint8_t z = 0;
  80005c:	e03ff845 	stb	zero,-31(fp)

	uint8_t err;
	uint8_t findCommand;
	uint32_t moveCommand;

	uint8_t cam_reply = 0;
  800060:	e03ffa05 	stb	zero,-24(fp)
	uint16_t bit_count = 0;
  800064:	e03ffa8d 	sth	zero,-22(fp)
	uint16_t packet_count = 0;
  800068:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t last_packet_bit_count = 0;
  80006c:	e03ffb8d 	sth	zero,-18(fp)

	uint8_t sync_delay = CAM_INIT_SYNC_DELAY;
  800070:	00800144 	movi	r2,5
  800074:	e0bff885 	stb	r2,-30(fp)
	bool synced = FALSE;
  800078:	e03ff8c5 	stb	zero,-29(fp)

	while (1){

		findCommand = (uint8_t) OSQPend(findCommandQueue, 0, &err);
  80007c:	d0a07f17 	ldw	r2,-32260(gp)
  800080:	e0fffe04 	addi	r3,fp,-8
  800084:	180d883a 	mov	r6,r3
  800088:	000b883a 	mov	r5,zero
  80008c:	1009883a 	mov	r4,r2
  800090:	0808d400 	call	808d40 <OSQPend>
  800094:	e0bffc05 	stb	r2,-16(fp)
		* Documentation mentions this will take 25-60 attempts
		* Recommends an increasing delay between attempts
		* with an initial time of 5ms
		*/

		useData = FALSE;
  800098:	d0207a05 	stb	zero,-32280(gp)
		for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  80009c:	e03ff805 	stb	zero,-32(fp)
  8000a0:	00004d06 	br	8001d8 <camera_task+0x1a0>
			//Assume false until proven otherwise
			synced = FALSE;
  8000a4:	e03ff8c5 	stb	zero,-29(fp)

			//Send the sync command
			for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8000a8:	e03ff845 	stb	zero,-31(fp)
  8000ac:	00001106 	br	8000f4 <camera_task+0xbc>
				while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  8000b0:	0001883a 	nop
  8000b4:	00804074 	movhi	r2,257
  8000b8:	10a80204 	addi	r2,r2,-24568
  8000bc:	10800037 	ldwio	r2,0(r2)
  8000c0:	1080100c 	andi	r2,r2,64
  8000c4:	103ffb26 	beq	r2,zero,8000b4 <__alt_mem_epcs_flash_controller_0+0xff7f70b4>
				IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
  8000c8:	e0fff843 	ldbu	r3,-31(fp)
  8000cc:	d0a00004 	addi	r2,gp,-32768
  8000d0:	1885883a 	add	r2,r3,r2
  8000d4:	10800003 	ldbu	r2,0(r2)
  8000d8:	10c03fcc 	andi	r3,r2,255
  8000dc:	00804074 	movhi	r2,257
  8000e0:	10a80104 	addi	r2,r2,-24572
  8000e4:	10c00035 	stwio	r3,0(r2)
		for (q=0; q < CAM_MAX_ATTEMPTS; q++){
			//Assume false until proven otherwise
			synced = FALSE;

			//Send the sync command
			for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8000e8:	e0bff843 	ldbu	r2,-31(fp)
  8000ec:	10800044 	addi	r2,r2,1
  8000f0:	e0bff845 	stb	r2,-31(fp)
  8000f4:	e0bff843 	ldbu	r2,-31(fp)
  8000f8:	108001b0 	cmpltui	r2,r2,6
  8000fc:	103fec1e 	bne	r2,zero,8000b0 <__alt_mem_epcs_flash_controller_0+0xff7f70b0>
				while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
				IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
			}

			//Wait the recommended sync time as per doc
			OSTimeDlyHMSM(0, 0, 0, sync_delay);
  800100:	e0bff883 	ldbu	r2,-30(fp)
  800104:	100f883a 	mov	r7,r2
  800108:	000d883a 	mov	r6,zero
  80010c:	000b883a 	mov	r5,zero
  800110:	0009883a 	mov	r4,zero
  800114:	080baf00 	call	80baf0 <OSTimeDlyHMSM>

			cam_reply = (uint8_t)OSQAccept(camCommandQueue, &err);
  800118:	d0a07e17 	ldw	r2,-32264(gp)
  80011c:	e0fffe04 	addi	r3,fp,-8
  800120:	180b883a 	mov	r5,r3
  800124:	1009883a 	mov	r4,r2
  800128:	080871c0 	call	80871c <OSQAccept>
  80012c:	e0bffa05 	stb	r2,-24(fp)
			if (cam_reply == CAM_ACK_SYNC[0]){
  800130:	00bfea84 	movi	r2,-86
  800134:	10c03fcc 	andi	r3,r2,255
  800138:	e0bffa03 	ldbu	r2,-24(fp)
  80013c:	18801e1e 	bne	r3,r2,8001b8 <camera_task+0x180>
				synced = TRUE;
  800140:	00800044 	movi	r2,1
  800144:	e0bff8c5 	stb	r2,-29(fp)
				////printf("Receiving %x", cam_reply);
				for (z=1; z < CAM_COMMAND_LENGTH; z++){
  800148:	00800044 	movi	r2,1
  80014c:	e0bff845 	stb	r2,-31(fp)
  800150:	00001606 	br	8001ac <camera_task+0x174>
					cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800154:	d0a07e17 	ldw	r2,-32264(gp)
  800158:	e0fffe04 	addi	r3,fp,-8
  80015c:	180d883a 	mov	r6,r3
  800160:	000b883a 	mov	r5,zero
  800164:	1009883a 	mov	r4,r2
  800168:	0808d400 	call	808d40 <OSQPend>
  80016c:	e0bffa05 	stb	r2,-24(fp)
					if ((cam_reply != CAM_ACK_SYNC[z]) && (z != CAM_ACK_IGNORE)){
  800170:	e0fff843 	ldbu	r3,-31(fp)
  800174:	d0a00904 	addi	r2,gp,-32732
  800178:	1885883a 	add	r2,r3,r2
  80017c:	10800003 	ldbu	r2,0(r2)
  800180:	10c03fcc 	andi	r3,r2,255
  800184:	e0bffa03 	ldbu	r2,-24(fp)
  800188:	18800526 	beq	r3,r2,8001a0 <camera_task+0x168>
  80018c:	e0bff843 	ldbu	r2,-31(fp)
  800190:	108000e0 	cmpeqi	r2,r2,3
  800194:	1000021e 	bne	r2,zero,8001a0 <camera_task+0x168>
						//printf("Got %x expected %x\n", cam_reply, CAM_ACK_SYNC[z]);
						synced = FALSE;
  800198:	e03ff8c5 	stb	zero,-29(fp)
						break;
  80019c:	00000606 	br	8001b8 <camera_task+0x180>

			cam_reply = (uint8_t)OSQAccept(camCommandQueue, &err);
			if (cam_reply == CAM_ACK_SYNC[0]){
				synced = TRUE;
				////printf("Receiving %x", cam_reply);
				for (z=1; z < CAM_COMMAND_LENGTH; z++){
  8001a0:	e0bff843 	ldbu	r2,-31(fp)
  8001a4:	10800044 	addi	r2,r2,1
  8001a8:	e0bff845 	stb	r2,-31(fp)
  8001ac:	e0bff843 	ldbu	r2,-31(fp)
  8001b0:	108001b0 	cmpltui	r2,r2,6
  8001b4:	103fe71e 	bne	r2,zero,800154 <__alt_mem_epcs_flash_controller_0+0xff7f7154>
					}
				}
				//printf("\n");
			}

			if (synced){
  8001b8:	e0bff8c3 	ldbu	r2,-29(fp)
  8001bc:	10000a1e 	bne	r2,zero,8001e8 <camera_task+0x1b0>
				break;
			}else{
				sync_delay++;
  8001c0:	e0bff883 	ldbu	r2,-30(fp)
  8001c4:	10800044 	addi	r2,r2,1
  8001c8:	e0bff885 	stb	r2,-30(fp)
		* Recommends an increasing delay between attempts
		* with an initial time of 5ms
		*/

		useData = FALSE;
		for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  8001cc:	e0bff803 	ldbu	r2,-32(fp)
  8001d0:	10800044 	addi	r2,r2,1
  8001d4:	e0bff805 	stb	r2,-32(fp)
  8001d8:	e0bff803 	ldbu	r2,-32(fp)
  8001dc:	10800f30 	cmpltui	r2,r2,60
  8001e0:	103fb01e 	bne	r2,zero,8000a4 <__alt_mem_epcs_flash_controller_0+0xff7f70a4>
  8001e4:	00000106 	br	8001ec <camera_task+0x1b4>
				}
				//printf("\n");
			}

			if (synced){
				break;
  8001e8:	0001883a 	nop
			}else{
				sync_delay++;
			}
		}

		if (synced){
  8001ec:	e0bff8c3 	ldbu	r2,-29(fp)
  8001f0:	10000526 	beq	r2,zero,800208 <camera_task+0x1d0>
			//printf("Cam synced after %i attempts\n", sync_delay);
			*leds = *leds ^ 0xFF;
  8001f4:	e0bff917 	ldw	r2,-28(fp)
  8001f8:	10800017 	ldw	r2,0(r2)
  8001fc:	10c03fdc 	xori	r3,r2,255
  800200:	e0bff917 	ldw	r2,-28(fp)
  800204:	10c00015 	stw	r3,0(r2)
			//printf("Cam sync failure after %i attempts\n", sync_delay);
			//return;
		}

		//Send ACK to camera to ACK its SYNC
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800208:	e03ff845 	stb	zero,-31(fp)
  80020c:	00001106 	br	800254 <camera_task+0x21c>
			while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  800210:	0001883a 	nop
  800214:	00804074 	movhi	r2,257
  800218:	10a80204 	addi	r2,r2,-24568
  80021c:	10800037 	ldwio	r2,0(r2)
  800220:	1080100c 	andi	r2,r2,64
  800224:	103ffb26 	beq	r2,zero,800214 <__alt_mem_epcs_flash_controller_0+0xff7f7214>
			IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
  800228:	e0fff843 	ldbu	r3,-31(fp)
  80022c:	d0a00904 	addi	r2,gp,-32732
  800230:	1885883a 	add	r2,r3,r2
  800234:	10800003 	ldbu	r2,0(r2)
  800238:	10c03fcc 	andi	r3,r2,255
  80023c:	00804074 	movhi	r2,257
  800240:	10a80104 	addi	r2,r2,-24572
  800244:	10c00035 	stwio	r3,0(r2)
			//printf("Cam sync failure after %i attempts\n", sync_delay);
			//return;
		}

		//Send ACK to camera to ACK its SYNC
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800248:	e0bff843 	ldbu	r2,-31(fp)
  80024c:	10800044 	addi	r2,r2,1
  800250:	e0bff845 	stb	r2,-31(fp)
  800254:	e0bff843 	ldbu	r2,-31(fp)
  800258:	108001b0 	cmpltui	r2,r2,6
  80025c:	103fec1e 	bne	r2,zero,800210 <__alt_mem_epcs_flash_controller_0+0xff7f7210>
			IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
		}

		//Turn on camera
		//printf("INIT ");
		if(!cam_send_command(CAM_INIT, CAM_ACK_INIT, CAM_COMMAND_LENGTH, camCommandQueue)){
  800260:	d0a07e17 	ldw	r2,-32264(gp)
  800264:	100f883a 	mov	r7,r2
  800268:	01800184 	movi	r6,6
  80026c:	d1600a84 	addi	r5,gp,-32726
  800270:	d1200184 	addi	r4,gp,-32762
  800274:	08003e40 	call	8003e4 <cam_send_command>
			//printf("Error at grab\n");
		}

		//Send package size into to camera
		//printf("SIZE ");
		if(!cam_send_command(CAM_SIZE, CAM_ACK_SIZE, CAM_COMMAND_LENGTH, camCommandQueue)){
  800278:	d0a07e17 	ldw	r2,-32264(gp)
  80027c:	100f883a 	mov	r7,r2
  800280:	01800184 	movi	r6,6
  800284:	d1600c04 	addi	r5,gp,-32720
  800288:	d1200304 	addi	r4,gp,-32756
  80028c:	08003e40 	call	8003e4 <cam_send_command>
			//printf("Error at grab\n");
		}

		//Tell camera to take picture
		//printf("SNAP ");
		if(!cam_send_command(CAM_SNAP, CAM_ACK_SNAP, CAM_COMMAND_LENGTH, camCommandQueue)){
  800290:	d0a07e17 	ldw	r2,-32264(gp)
  800294:	100f883a 	mov	r7,r2
  800298:	01800184 	movi	r6,6
  80029c:	d1600d84 	addi	r5,gp,-32714
  8002a0:	d1200484 	addi	r4,gp,-32750
  8002a4:	08003e40 	call	8003e4 <cam_send_command>
			//printf("Error at grab\n");
		}

		//Tell camera to start sending the picture
		//printf("GRAB ");
		if(!cam_send_command(CAM_GRAB, CAM_ACK_GRAB, CAM_COMMAND_LENGTH, camCommandQueue)){
  8002a8:	d0a07e17 	ldw	r2,-32264(gp)
  8002ac:	100f883a 	mov	r7,r2
  8002b0:	01800184 	movi	r6,6
  8002b4:	d1600f04 	addi	r5,gp,-32708
  8002b8:	d1200604 	addi	r4,gp,-32744
  8002bc:	08003e40 	call	8003e4 <cam_send_command>
			//printf("Error at grab\n");
		}

		//Receive the package count, not an ACK and needs special parsing
		//printf ("DATA ");
		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  8002c0:	d0a07e17 	ldw	r2,-32264(gp)
  8002c4:	e0fffe04 	addi	r3,fp,-8
  8002c8:	180d883a 	mov	r6,r3
  8002cc:	000b883a 	mov	r5,zero
  8002d0:	1009883a 	mov	r4,r2
  8002d4:	0808d400 	call	808d40 <OSQPend>
  8002d8:	e0bffa05 	stb	r2,-24(fp)
		if (cam_reply == CAM_DATA[0]){
  8002dc:	00bfea84 	movi	r2,-86
  8002e0:	10c03fcc 	andi	r3,r2,255
  8002e4:	e0bffa03 	ldbu	r2,-24(fp)
  8002e8:	1880381e 	bne	r3,r2,8003cc <camera_task+0x394>
			//printf("receiving %x", cam_reply);
			for (z = 1; z < CAM_DATA_START; z++){
  8002ec:	00800044 	movi	r2,1
  8002f0:	e0bff845 	stb	r2,-31(fp)
  8002f4:	00000a06 	br	800320 <camera_task+0x2e8>
				cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  8002f8:	d0a07e17 	ldw	r2,-32264(gp)
  8002fc:	e0fffe04 	addi	r3,fp,-8
  800300:	180d883a 	mov	r6,r3
  800304:	000b883a 	mov	r5,zero
  800308:	1009883a 	mov	r4,r2
  80030c:	0808d400 	call	808d40 <OSQPend>
  800310:	e0bffa05 	stb	r2,-24(fp)
		//Receive the package count, not an ACK and needs special parsing
		//printf ("DATA ");
		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
		if (cam_reply == CAM_DATA[0]){
			//printf("receiving %x", cam_reply);
			for (z = 1; z < CAM_DATA_START; z++){
  800314:	e0bff843 	ldbu	r2,-31(fp)
  800318:	10800044 	addi	r2,r2,1
  80031c:	e0bff845 	stb	r2,-31(fp)
  800320:	e0bff843 	ldbu	r2,-31(fp)
  800324:	108000f0 	cmpltui	r2,r2,3
  800328:	103ff31e 	bne	r2,zero,8002f8 <__alt_mem_epcs_flash_controller_0+0xff7f72f8>
			//The last three packages will contain the packet count
			//Need to account for the byte offsets and get a single
			//integer value that contains the total number of bits
			//that will be sent by the camera

			bit_count = 0;
  80032c:	e03ffa8d 	sth	zero,-22(fp)
			cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800330:	d0a07e17 	ldw	r2,-32264(gp)
  800334:	e0fffe04 	addi	r3,fp,-8
  800338:	180d883a 	mov	r6,r3
  80033c:	000b883a 	mov	r5,zero
  800340:	1009883a 	mov	r4,r2
  800344:	0808d400 	call	808d40 <OSQPend>
  800348:	e0bffa05 	stb	r2,-24(fp)
			//printf(" %x", cam_reply);
			bit_count = cam_reply;
  80034c:	e0bffa03 	ldbu	r2,-24(fp)
  800350:	e0bffa8d 	sth	r2,-22(fp)

			cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800354:	d0a07e17 	ldw	r2,-32264(gp)
  800358:	e0fffe04 	addi	r3,fp,-8
  80035c:	180d883a 	mov	r6,r3
  800360:	000b883a 	mov	r5,zero
  800364:	1009883a 	mov	r4,r2
  800368:	0808d400 	call	808d40 <OSQPend>
  80036c:	e0bffa05 	stb	r2,-24(fp)
			//printf(" %x", cam_reply);
			bit_count = bit_count + (0x100 * cam_reply);
  800370:	e0bffa03 	ldbu	r2,-24(fp)
  800374:	1004923a 	slli	r2,r2,8
  800378:	1007883a 	mov	r3,r2
  80037c:	e0bffa8b 	ldhu	r2,-22(fp)
  800380:	1885883a 	add	r2,r3,r2
  800384:	e0bffa8d 	sth	r2,-22(fp)

			cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800388:	d0a07e17 	ldw	r2,-32264(gp)
  80038c:	e0fffe04 	addi	r3,fp,-8
  800390:	180d883a 	mov	r6,r3
  800394:	000b883a 	mov	r5,zero
  800398:	1009883a 	mov	r4,r2
  80039c:	0808d400 	call	808d40 <OSQPend>
  8003a0:	e0bffa05 	stb	r2,-24(fp)
			//printf(" %x", cam_reply);
			bit_count = bit_count + (0x10000 * cam_reply);
			//printf("\nBit count of %i\n", bit_count);

			//Determine the number of packets based on the given bit values
			packet_count = bit_count / CAM_BITS_PER_PACKAGE;
  8003a4:	e0bffa8b 	ldhu	r2,-22(fp)
  8003a8:	01407e84 	movi	r5,506
  8003ac:	1009883a 	mov	r4,r2
  8003b0:	0800ba00 	call	800ba0 <__udivsi3>
  8003b4:	e0bffb0d 	sth	r2,-20(fp)
			last_packet_bit_count = bit_count % CAM_BITS_PER_PACKAGE;
  8003b8:	e0bffa8b 	ldhu	r2,-22(fp)
  8003bc:	01407e84 	movi	r5,506
  8003c0:	1009883a 	mov	r4,r2
  8003c4:	0800c040 	call	800c04 <__umodsi3>
  8003c8:	e0bffb8d 	sth	r2,-18(fp)
		//NOTE this is currently located in localtest
		//as the library it depends on has not been added
		//the result will be parsed into the 32 bit moveCommand

		//Give instructions to motor
		OSQPost(moveCommandQueue, (void*) moveCommand);
  8003cc:	d0a08317 	ldw	r2,-32244(gp)
  8003d0:	e0fffd17 	ldw	r3,-12(fp)
  8003d4:	180b883a 	mov	r5,r3
  8003d8:	1009883a 	mov	r4,r2
  8003dc:	08091380 	call	809138 <OSQPost>
	}
  8003e0:	003f2606 	br	80007c <__alt_mem_epcs_flash_controller_0+0xff7f707c>

008003e4 <cam_send_command>:
}

bool cam_send_command(uint8_t* to_send, uint8_t* to_recieve, uint16_t size, OS_EVENT* used_queue){
  8003e4:	defff904 	addi	sp,sp,-28
  8003e8:	dfc00615 	stw	ra,24(sp)
  8003ec:	df000515 	stw	fp,20(sp)
  8003f0:	df000504 	addi	fp,sp,20
  8003f4:	e13ffc15 	stw	r4,-16(fp)
  8003f8:	e17ffd15 	stw	r5,-12(fp)
  8003fc:	3005883a 	mov	r2,r6
  800400:	e1ffff15 	stw	r7,-4(fp)
  800404:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t z;
	uint8_t err;
	uint8_t cam_reply;

	//Flush queue so we know we have an empty one
	OSQFlush(used_queue);
  800408:	e13fff17 	ldw	r4,-4(fp)
  80040c:	0808c880 	call	808c88 <OSQFlush>
	for (z = 0; z < size; z++){
  800410:	e03ffb05 	stb	zero,-20(fp)
  800414:	00001106 	br	80045c <cam_send_command+0x78>
		while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  800418:	0001883a 	nop
  80041c:	00804074 	movhi	r2,257
  800420:	10a80204 	addi	r2,r2,-24568
  800424:	10800037 	ldwio	r2,0(r2)
  800428:	1080100c 	andi	r2,r2,64
  80042c:	103ffb26 	beq	r2,zero,80041c <__alt_mem_epcs_flash_controller_0+0xff7f741c>
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, to_send[z]);
  800430:	e0bffb03 	ldbu	r2,-20(fp)
  800434:	e0fffc17 	ldw	r3,-16(fp)
  800438:	1885883a 	add	r2,r3,r2
  80043c:	10800003 	ldbu	r2,0(r2)
  800440:	10c03fcc 	andi	r3,r2,255
  800444:	00804074 	movhi	r2,257
  800448:	10a80104 	addi	r2,r2,-24572
  80044c:	10c00035 	stwio	r3,0(r2)
	uint8_t err;
	uint8_t cam_reply;

	//Flush queue so we know we have an empty one
	OSQFlush(used_queue);
	for (z = 0; z < size; z++){
  800450:	e0bffb03 	ldbu	r2,-20(fp)
  800454:	10800044 	addi	r2,r2,1
  800458:	e0bffb05 	stb	r2,-20(fp)
  80045c:	e0bffb03 	ldbu	r2,-20(fp)
  800460:	10ffffcc 	andi	r3,r2,65535
  800464:	e0bffe0b 	ldhu	r2,-8(fp)
  800468:	18bfeb36 	bltu	r3,r2,800418 <__alt_mem_epcs_flash_controller_0+0xff7f7418>
		while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, to_send[z]);
	}

	cam_reply = (uint8_t)OSQPend(used_queue, 0, &err);
  80046c:	e0bffb84 	addi	r2,fp,-18
  800470:	100d883a 	mov	r6,r2
  800474:	000b883a 	mov	r5,zero
  800478:	e13fff17 	ldw	r4,-4(fp)
  80047c:	0808d400 	call	808d40 <OSQPend>
  800480:	e0bffb45 	stb	r2,-19(fp)
	if (cam_reply == to_recieve[0]){
  800484:	e0bffd17 	ldw	r2,-12(fp)
  800488:	10800003 	ldbu	r2,0(r2)
  80048c:	10c03fcc 	andi	r3,r2,255
  800490:	e0bffb43 	ldbu	r2,-19(fp)
  800494:	18801d1e 	bne	r3,r2,80050c <cam_send_command+0x128>
		//printf("receiving %x", cam_reply);
		for (z = 1; z < size; z++){
  800498:	00800044 	movi	r2,1
  80049c:	e0bffb05 	stb	r2,-20(fp)
  8004a0:	00001506 	br	8004f8 <cam_send_command+0x114>
			cam_reply = (uint8_t)OSQPend(used_queue, 0, &err);
  8004a4:	e0bffb84 	addi	r2,fp,-18
  8004a8:	100d883a 	mov	r6,r2
  8004ac:	000b883a 	mov	r5,zero
  8004b0:	e13fff17 	ldw	r4,-4(fp)
  8004b4:	0808d400 	call	808d40 <OSQPend>
  8004b8:	e0bffb45 	stb	r2,-19(fp)
			if ((cam_reply != to_recieve[z]) && (z != CAM_ACK_IGNORE)){
  8004bc:	e0bffb03 	ldbu	r2,-20(fp)
  8004c0:	e0fffd17 	ldw	r3,-12(fp)
  8004c4:	1885883a 	add	r2,r3,r2
  8004c8:	10800003 	ldbu	r2,0(r2)
  8004cc:	10c03fcc 	andi	r3,r2,255
  8004d0:	e0bffb43 	ldbu	r2,-19(fp)
  8004d4:	18800526 	beq	r3,r2,8004ec <cam_send_command+0x108>
  8004d8:	e0bffb03 	ldbu	r2,-20(fp)
  8004dc:	108000e0 	cmpeqi	r2,r2,3
  8004e0:	1000021e 	bne	r2,zero,8004ec <cam_send_command+0x108>
				//printf("got %x expected %x\n", cam_reply, to_recieve[z]);
				return FALSE;
  8004e4:	0005883a 	mov	r2,zero
  8004e8:	00000b06 	br	800518 <cam_send_command+0x134>
	}

	cam_reply = (uint8_t)OSQPend(used_queue, 0, &err);
	if (cam_reply == to_recieve[0]){
		//printf("receiving %x", cam_reply);
		for (z = 1; z < size; z++){
  8004ec:	e0bffb03 	ldbu	r2,-20(fp)
  8004f0:	10800044 	addi	r2,r2,1
  8004f4:	e0bffb05 	stb	r2,-20(fp)
  8004f8:	e0bffb03 	ldbu	r2,-20(fp)
  8004fc:	10ffffcc 	andi	r3,r2,65535
  800500:	e0bffe0b 	ldhu	r2,-8(fp)
  800504:	18bfe736 	bltu	r3,r2,8004a4 <__alt_mem_epcs_flash_controller_0+0xff7f74a4>
  800508:	00000206 	br	800514 <cam_send_command+0x130>
			}
		}
		//printf("\n");
	}else{
		//printf("got %x expected %x\n", cam_reply, to_recieve[0]);
		return FALSE;
  80050c:	0005883a 	mov	r2,zero
  800510:	00000106 	br	800518 <cam_send_command+0x134>
	}

	return TRUE;
  800514:	00800044 	movi	r2,1
}
  800518:	e037883a 	mov	sp,fp
  80051c:	dfc00117 	ldw	ra,4(sp)
  800520:	df000017 	ldw	fp,0(sp)
  800524:	dec00204 	addi	sp,sp,8
  800528:	f800283a 	ret

0080052c <cam_uart_interrupt>:

void cam_uart_interrupt(void * context){
  80052c:	defffc04 	addi	sp,sp,-16
  800530:	dfc00315 	stw	ra,12(sp)
  800534:	df000215 	stw	fp,8(sp)
  800538:	df000204 	addi	fp,sp,8
  80053c:	e13fff15 	stw	r4,-4(fp)
	uint8_t read = 0;
  800540:	e03ffe05 	stb	zero,-8(fp)

	while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
  800544:	0001883a 	nop
  800548:	00804074 	movhi	r2,257
  80054c:	10a80204 	addi	r2,r2,-24568
  800550:	10800037 	ldwio	r2,0(r2)
  800554:	1080200c 	andi	r2,r2,128
  800558:	103ffb26 	beq	r2,zero,800548 <__alt_mem_epcs_flash_controller_0+0xff7f7548>
	read = IORD_ALTERA_AVALON_UART_RXDATA(CAM_UART_BASE);
  80055c:	00804074 	movhi	r2,257
  800560:	10a80004 	addi	r2,r2,-24576
  800564:	10800037 	ldwio	r2,0(r2)
  800568:	e0bffe05 	stb	r2,-8(fp)

	if (useData){
  80056c:	d0a07a03 	ldbu	r2,-32280(gp)
  800570:	10803fcc 	andi	r2,r2,255
  800574:	10000626 	beq	r2,zero,800590 <cam_uart_interrupt+0x64>
		OSQPost(camPackageQueue, (void*) read);
  800578:	d0a08017 	ldw	r2,-32256(gp)
  80057c:	e0fffe03 	ldbu	r3,-8(fp)
  800580:	180b883a 	mov	r5,r3
  800584:	1009883a 	mov	r4,r2
  800588:	08091380 	call	809138 <OSQPost>
	}else{
		OSQPost(camCommandQueue, (void*) read);
	}
}
  80058c:	00000506 	br	8005a4 <cam_uart_interrupt+0x78>
	read = IORD_ALTERA_AVALON_UART_RXDATA(CAM_UART_BASE);

	if (useData){
		OSQPost(camPackageQueue, (void*) read);
	}else{
		OSQPost(camCommandQueue, (void*) read);
  800590:	d0a07e17 	ldw	r2,-32264(gp)
  800594:	e0fffe03 	ldbu	r3,-8(fp)
  800598:	180b883a 	mov	r5,r3
  80059c:	1009883a 	mov	r4,r2
  8005a0:	08091380 	call	809138 <OSQPost>
	}
}
  8005a4:	0001883a 	nop
  8005a8:	e037883a 	mov	sp,fp
  8005ac:	dfc00117 	ldw	ra,4(sp)
  8005b0:	df000017 	ldw	fp,0(sp)
  8005b4:	dec00204 	addi	sp,sp,8
  8005b8:	f800283a 	ret

008005bc <sensor_interrupt>:
#include "camera.h"
#include "motor.h"
#include "wifi.h"
#include "interrupt_peripherals.h"

void sensor_interrupt(void * context){
  8005bc:	defffd04 	addi	sp,sp,-12
  8005c0:	dfc00215 	stw	ra,8(sp)
  8005c4:	df000115 	stw	fp,4(sp)
  8005c8:	df000104 	addi	fp,sp,4
  8005cc:	e13fff15 	stw	r4,-4(fp)
	printf("sensor\n");
  8005d0:	01002074 	movhi	r4,129
  8005d4:	21044404 	addi	r4,r4,4368
  8005d8:	0800d1c0 	call	800d1c <puts>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 1);
  8005dc:	00c00044 	movi	r3,1
  8005e0:	00804074 	movhi	r2,257
  8005e4:	10a83f04 	addi	r2,r2,-24324
  8005e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  8005ec:	00c003c4 	movi	r3,15
  8005f0:	00804074 	movhi	r2,257
  8005f4:	10a83e04 	addi	r2,r2,-24328
  8005f8:	10c00035 	stwio	r3,0(r2)
}
  8005fc:	0001883a 	nop
  800600:	e037883a 	mov	sp,fp
  800604:	dfc00117 	ldw	ra,4(sp)
  800608:	df000017 	ldw	fp,0(sp)
  80060c:	dec00204 	addi	sp,sp,8
  800610:	f800283a 	ret

00800614 <button_interrupt>:

void button_interrupt(void * context){
  800614:	defffd04 	addi	sp,sp,-12
  800618:	dfc00215 	stw	ra,8(sp)
  80061c:	df000115 	stw	fp,4(sp)
  800620:	df000104 	addi	fp,sp,4
  800624:	e13fff15 	stw	r4,-4(fp)
	printf("button\n");
  800628:	01002074 	movhi	r4,129
  80062c:	21044604 	addi	r4,r4,4376
  800630:	0800d1c0 	call	800d1c <puts>
	OSTimeDlyHMSM(0, 0, 0, 400);
  800634:	01c06404 	movi	r7,400
  800638:	000d883a 	mov	r6,zero
  80063c:	000b883a 	mov	r5,zero
  800640:	0009883a 	mov	r4,zero
  800644:	080baf00 	call	80baf0 <OSTimeDlyHMSM>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 1);
  800648:	00c00044 	movi	r3,1
  80064c:	00804074 	movhi	r2,257
  800650:	10a82f04 	addi	r2,r2,-24388
  800654:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  800658:	00c003c4 	movi	r3,15
  80065c:	00804074 	movhi	r2,257
  800660:	10a82e04 	addi	r2,r2,-24392
  800664:	10c00035 	stwio	r3,0(r2)
}
  800668:	0001883a 	nop
  80066c:	e037883a 	mov	sp,fp
  800670:	dfc00117 	ldw	ra,4(sp)
  800674:	df000017 	ldw	fp,0(sp)
  800678:	dec00204 	addi	sp,sp,8
  80067c:	f800283a 	ret

00800680 <motor_task>:

/*
 * Drives FORWARD initially but when the INFRARED SENSOR
 * detects something and it will REVERSE the direction
 */
void motor_task(void* pdata){
  800680:	defff904 	addi	sp,sp,-28
  800684:	dfc00615 	stw	ra,24(sp)
  800688:	df000515 	stw	fp,20(sp)
  80068c:	df000504 	addi	fp,sp,20
  800690:	e13fff15 	stw	r4,-4(fp)

	bool notFound;

	while (1){

		notFound = TRUE;
  800694:	00800044 	movi	r2,1
  800698:	e0bffbc5 	stb	r2,-17(fp)
		initCommand = (uint8_t) OSQPend(initCommandQueue, 0, &err);
  80069c:	d0a07d17 	ldw	r2,-32268(gp)
  8006a0:	e0fffe84 	addi	r3,fp,-6
  8006a4:	180d883a 	mov	r6,r3
  8006a8:	000b883a 	mov	r5,zero
  8006ac:	1009883a 	mov	r4,r2
  8006b0:	0808d400 	call	808d40 <OSQPend>
  8006b4:	e0bffc05 	stb	r2,-16(fp)

		switch(initCommand){
  8006b8:	e0bffc03 	ldbu	r2,-16(fp)
  8006bc:	10c000a0 	cmpeqi	r3,r2,2
  8006c0:	1800071e 	bne	r3,zero,8006e0 <motor_task+0x60>
  8006c4:	10c000e0 	cmpeqi	r3,r2,3
  8006c8:	1800081e 	bne	r3,zero,8006ec <motor_task+0x6c>
  8006cc:	10800060 	cmpeqi	r2,r2,1
  8006d0:	10000926 	beq	r2,zero,8006f8 <motor_task+0x78>
		case INIT_RED:
			findCommand = FIND_RED;
  8006d4:	00800044 	movi	r2,1
  8006d8:	e0bffb05 	stb	r2,-20(fp)
			break;
  8006dc:	00000606 	br	8006f8 <motor_task+0x78>

		case INIT_BLUE:
			findCommand = FIND_BLUE;
  8006e0:	00800084 	movi	r2,2
  8006e4:	e0bffb05 	stb	r2,-20(fp)
			break;
  8006e8:	00000306 	br	8006f8 <motor_task+0x78>

		case INIT_GREEN:
			findCommand = FIND_GREEN;
  8006ec:	008000c4 	movi	r2,3
  8006f0:	e0bffb05 	stb	r2,-20(fp)
			break;
  8006f4:	0001883a 	nop
		}

		while(notFound){
  8006f8:	00003b06 	br	8007e8 <motor_task+0x168>
			//Pass command to camera and await further instructions
			OSQPost(findCommandQueue, (void*) findCommand);
  8006fc:	d0a07f17 	ldw	r2,-32260(gp)
  800700:	e0fffb03 	ldbu	r3,-20(fp)
  800704:	180b883a 	mov	r5,r3
  800708:	1009883a 	mov	r4,r2
  80070c:	08091380 	call	809138 <OSQPost>
			moveCommand = (uint8_t) OSQPend(moveCommandQueue, 0, &err);
  800710:	d0a08317 	ldw	r2,-32244(gp)
  800714:	e0fffe84 	addi	r3,fp,-6
  800718:	180d883a 	mov	r6,r3
  80071c:	000b883a 	mov	r5,zero
  800720:	1009883a 	mov	r4,r2
  800724:	0808d400 	call	808d40 <OSQPend>
  800728:	10803fcc 	andi	r2,r2,255
  80072c:	e0bffd15 	stw	r2,-12(fp)

			if (moveCommand == MOVE_STOP){
  800730:	e0bffd17 	ldw	r2,-12(fp)
  800734:	10803fd8 	cmpnei	r2,r2,255
  800738:	1000021e 	bne	r2,zero,800744 <motor_task+0xc4>
				notFound = FALSE;
  80073c:	e03ffbc5 	stb	zero,-17(fp)
  800740:	00001406 	br	800794 <motor_task+0x114>
				 * four separate 8 bit instructions in a single
				 * 32 bit integer. Currently time is not used
				 * but that may change as the design is refined
				 * so they are being put in as place holders
				 */
				leftDirection = moveCommand & 0xFF;
  800744:	e0bffd17 	ldw	r2,-12(fp)
  800748:	e0bffb45 	stb	r2,-19(fp)
				moveCommand = moveCommand >> 8;
  80074c:	e0bffd17 	ldw	r2,-12(fp)
  800750:	1004d23a 	srli	r2,r2,8
  800754:	e0bffd15 	stw	r2,-12(fp)
				leftTime = moveCommand & 0xFF;
  800758:	e0bffd17 	ldw	r2,-12(fp)
  80075c:	e0bffe05 	stb	r2,-8(fp)
				moveCommand = moveCommand >> 8;
  800760:	e0bffd17 	ldw	r2,-12(fp)
  800764:	1004d23a 	srli	r2,r2,8
  800768:	e0bffd15 	stw	r2,-12(fp)
				rightDirection = moveCommand & 0xFF;
  80076c:	e0bffd17 	ldw	r2,-12(fp)
  800770:	e0bffb85 	stb	r2,-18(fp)
				moveCommand = moveCommand >> 8;
  800774:	e0bffd17 	ldw	r2,-12(fp)
  800778:	1004d23a 	srli	r2,r2,8
  80077c:	e0bffd15 	stw	r2,-12(fp)
				rightTime = moveCommand & 0xFF;
  800780:	e0bffd17 	ldw	r2,-12(fp)
  800784:	e0bffe45 	stb	r2,-7(fp)
				moveCommand = moveCommand >> 8;
  800788:	e0bffd17 	ldw	r2,-12(fp)
  80078c:	1004d23a 	srli	r2,r2,8
  800790:	e0bffd15 	stw	r2,-12(fp)
			}

			IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, leftDirection);
  800794:	e0fffb43 	ldbu	r3,-19(fp)
  800798:	00804074 	movhi	r2,257
  80079c:	10a83404 	addi	r2,r2,-24368
  8007a0:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, rightDirection);
  8007a4:	e0fffb83 	ldbu	r3,-18(fp)
  8007a8:	00804074 	movhi	r2,257
  8007ac:	10a83804 	addi	r2,r2,-24352
  8007b0:	10c00035 	stwio	r3,0(r2)
			OSTimeDlyHMSM(0, 0, 1, 0);
  8007b4:	000f883a 	mov	r7,zero
  8007b8:	01800044 	movi	r6,1
  8007bc:	000b883a 	mov	r5,zero
  8007c0:	0009883a 	mov	r4,zero
  8007c4:	080baf00 	call	80baf0 <OSTimeDlyHMSM>
			IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
  8007c8:	00c001c4 	movi	r3,7
  8007cc:	00804074 	movhi	r2,257
  8007d0:	10a83404 	addi	r2,r2,-24368
  8007d4:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);
  8007d8:	00c001c4 	movi	r3,7
  8007dc:	00804074 	movhi	r2,257
  8007e0:	10a83804 	addi	r2,r2,-24352
  8007e4:	10c00035 	stwio	r3,0(r2)
		case INIT_GREEN:
			findCommand = FIND_GREEN;
			break;
		}

		while(notFound){
  8007e8:	e0bffbc3 	ldbu	r2,-17(fp)
  8007ec:	103fc31e 	bne	r2,zero,8006fc <__alt_mem_epcs_flash_controller_0+0xff7f76fc>
			OSTimeDlyHMSM(0, 0, 1, 0);
			IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
			IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);
		}

	}
  8007f0:	003fa806 	br	800694 <__alt_mem_epcs_flash_controller_0+0xff7f7694>

008007f4 <main>:

#define MOTOR_PRIORITY     3
#define CAMERA_PRIORITY    2
#define WIFI_PRIORITY	   1

int main(void){
  8007f4:	defff904 	addi	sp,sp,-28
  8007f8:	dfc00615 	stw	ra,24(sp)
  8007fc:	df000515 	stw	fp,20(sp)
  800800:	df000504 	addi	fp,sp,20

	if(OSTaskCreateExt(motor_task,
  800804:	d8000415 	stw	zero,16(sp)
  800808:	d8000315 	stw	zero,12(sp)
  80080c:	00820004 	movi	r2,2048
  800810:	d8800215 	stw	r2,8(sp)
  800814:	00802074 	movhi	r2,129
  800818:	1096a704 	addi	r2,r2,23196
  80081c:	d8800115 	stw	r2,4(sp)
  800820:	008000c4 	movi	r2,3
  800824:	d8800015 	stw	r2,0(sp)
  800828:	01c000c4 	movi	r7,3
  80082c:	01802074 	movhi	r6,129
  800830:	319ea604 	addi	r6,r6,31384
  800834:	000b883a 	mov	r5,zero
  800838:	01002034 	movhi	r4,128
  80083c:	2101a004 	addi	r4,r4,1664
  800840:	080a91c0 	call	80a91c <OSTaskCreateExt>
                  		0))
	{
		//printf("Motor task creation failure\n");
	}

	if(OSTaskCreateExt(camera_task,
  800844:	d8000415 	stw	zero,16(sp)
  800848:	d8000315 	stw	zero,12(sp)
  80084c:	00820004 	movi	r2,2048
  800850:	d8800215 	stw	r2,8(sp)
  800854:	00802074 	movhi	r2,129
  800858:	108ea704 	addi	r2,r2,15004
  80085c:	d8800115 	stw	r2,4(sp)
  800860:	00800084 	movi	r2,2
  800864:	d8800015 	stw	r2,0(sp)
  800868:	01c00084 	movi	r7,2
  80086c:	01802074 	movhi	r6,129
  800870:	3196a604 	addi	r6,r6,23192
  800874:	000b883a 	mov	r5,zero
  800878:	01002034 	movhi	r4,128
  80087c:	21000e04 	addi	r4,r4,56
  800880:	080a91c0 	call	80a91c <OSTaskCreateExt>
                  		0))
	{
		//printf("Camera task creation failure\n");
	}

	if(OSTaskCreateExt(wifi_task,
  800884:	d8000415 	stw	zero,16(sp)
  800888:	d8000315 	stw	zero,12(sp)
  80088c:	00820004 	movi	r2,2048
  800890:	d8800215 	stw	r2,8(sp)
  800894:	00802074 	movhi	r2,129
  800898:	109ea704 	addi	r2,r2,31388
  80089c:	d8800115 	stw	r2,4(sp)
  8008a0:	00800044 	movi	r2,1
  8008a4:	d8800015 	stw	r2,0(sp)
  8008a8:	01c00044 	movi	r7,1
  8008ac:	018020b4 	movhi	r6,130
  8008b0:	31a6a604 	addi	r6,r6,-25960
  8008b4:	000b883a 	mov	r5,zero
  8008b8:	01002034 	movhi	r4,128
  8008bc:	21028204 	addi	r4,r4,2568
  8008c0:	080a91c0 	call	80a91c <OSTaskCreateExt>
	{
		//printf("Wifi task creation failure\n");
	}

	//Interrupt masks
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  8008c4:	00c003c4 	movi	r3,15
  8008c8:	00804074 	movhi	r2,257
  8008cc:	10a82e04 	addi	r2,r2,-24392
  8008d0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 0x0);
  8008d4:	0007883a 	mov	r3,zero
  8008d8:	00804074 	movhi	r2,257
  8008dc:	10a82f04 	addi	r2,r2,-24388
  8008e0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  8008e4:	00c003c4 	movi	r3,15
  8008e8:	00804074 	movhi	r2,257
  8008ec:	10a83e04 	addi	r2,r2,-24328
  8008f0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 0x0);
  8008f4:	0007883a 	mov	r3,zero
  8008f8:	00804074 	movhi	r2,257
  8008fc:	10a83f04 	addi	r2,r2,-24324
  800900:	10c00035 	stwio	r3,0(r2)

	//Initialize the interrupt controllers
	if(alt_ic_isr_register(BUTTON_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
  800904:	d8000015 	stw	zero,0(sp)
  800908:	000f883a 	mov	r7,zero
  80090c:	01802034 	movhi	r6,128
  800910:	31818504 	addi	r6,r6,1556
  800914:	014000c4 	movi	r5,3
  800918:	0009883a 	mov	r4,zero
  80091c:	0803ae80 	call	803ae8 <alt_ic_isr_register>
					    	NULL))
	{
		//printf("button interrupt failed\n");
	}

	if(alt_ic_isr_register(PROX_SENSOR_IRQ_INTERRUPT_CONTROLLER_ID,
  800920:	d8000015 	stw	zero,0(sp)
  800924:	000f883a 	mov	r7,zero
  800928:	01802034 	movhi	r6,128
  80092c:	31816f04 	addi	r6,r6,1468
  800930:	01400084 	movi	r5,2
  800934:	0009883a 	mov	r4,zero
  800938:	0803ae80 	call	803ae8 <alt_ic_isr_register>
					    	NULL))
	{
		//printf("proximity sensor interrupt failed\n");
	}

	if(alt_ic_isr_register(CAM_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  80093c:	d8000015 	stw	zero,0(sp)
  800940:	000f883a 	mov	r7,zero
  800944:	01802034 	movhi	r6,128
  800948:	31814b04 	addi	r6,r6,1324
  80094c:	014001c4 	movi	r5,7
  800950:	0009883a 	mov	r4,zero
  800954:	0803ae80 	call	803ae8 <alt_ic_isr_register>
	{
		//printf("cam interrupt failed\n");
	}

    //OSTimeDlyHMSM(0, 0, 1, 0);
    if(alt_ic_isr_register(WIFI_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  800958:	d8000015 	stw	zero,0(sp)
  80095c:	000f883a 	mov	r7,zero
  800960:	01802034 	movhi	r6,128
  800964:	31828f04 	addi	r6,r6,2620
  800968:	01400044 	movi	r5,1
  80096c:	0009883a 	mov	r4,zero
  800970:	0803ae80 	call	803ae8 <alt_ic_isr_register>
	{
    	//printf("wifi interrupt failed\n");
	}

    //Initialize internal queues
	camCommandQueue = OSQCreate(camCommandBuffer, CAM_COMMAND_BUFFER_LENGTH);
  800974:	01400304 	movi	r5,12
  800978:	01002074 	movhi	r4,129
  80097c:	210e9b04 	addi	r4,r4,14956
  800980:	080885c0 	call	80885c <OSQCreate>
  800984:	d0a07e15 	stw	r2,-32264(gp)
	camPackageQueue = OSQCreate(camPackageBuffer, CAM_PACKAGE_BUFFER_LENGTH);
  800988:	01408004 	movi	r5,512
  80098c:	01002074 	movhi	r4,129
  800990:	210c9b04 	addi	r4,r4,12908
  800994:	080885c0 	call	80885c <OSQCreate>
  800998:	d0a08015 	stw	r2,-32256(gp)
    wifiPackageQueue = OSQCreate(wifiPackageBuffer, WIFI_PACKAGE_BUFFER_LENGTH);
  80099c:	01400044 	movi	r5,1
  8009a0:	d1207704 	addi	r4,gp,-32292
  8009a4:	080885c0 	call	80885c <OSQCreate>
  8009a8:	d0a07815 	stw	r2,-32288(gp)

    //Initialize intertask queues
    initCommandQueue = OSQCreate(initCommandBuffer, INIT_COMMAND_BUFFER_LENGTH);
  8009ac:	01400044 	movi	r5,1
  8009b0:	d1207b04 	addi	r4,gp,-32276
  8009b4:	080885c0 	call	80885c <OSQCreate>
  8009b8:	d0a07d15 	stw	r2,-32268(gp)
    findCommandQueue = OSQCreate(findCommandBuffer, FIND_COMMAND_BUFFER_LENGTH);
  8009bc:	01400044 	movi	r5,1
  8009c0:	d1207904 	addi	r4,gp,-32284
  8009c4:	080885c0 	call	80885c <OSQCreate>
  8009c8:	d0a07f15 	stw	r2,-32260(gp)
    moveCommandQueue = OSQCreate(moveCommandBuffer, MOVE_COMMAND_BUFFER_LENGTH);
  8009cc:	01400044 	movi	r5,1
  8009d0:	d1208204 	addi	r4,gp,-32248
  8009d4:	080885c0 	call	80885c <OSQCreate>
  8009d8:	d0a08315 	stw	r2,-32244(gp)
    foundCommandQueue = OSQCreate(foundCommandBuffer, FOUND_COMMAND_BUFFER_LENGTH);
  8009dc:	01400044 	movi	r5,1
  8009e0:	d1208104 	addi	r4,gp,-32252
  8009e4:	080885c0 	call	80885c <OSQCreate>
  8009e8:	d0a08415 	stw	r2,-32240(gp)

	OSStart();
  8009ec:	08052780 	call	805278 <OSStart>
	return 0;
  8009f0:	0005883a 	mov	r2,zero
}
  8009f4:	e037883a 	mov	sp,fp
  8009f8:	dfc00117 	ldw	ra,4(sp)
  8009fc:	df000017 	ldw	fp,0(sp)
  800a00:	dec00204 	addi	sp,sp,8
  800a04:	f800283a 	ret

00800a08 <wifi_task>:
 *      Author: Randy Baron
 */

#include "wifi.h"

void wifi_task(void* pdata){
  800a08:	defffc04 	addi	sp,sp,-16
  800a0c:	dfc00315 	stw	ra,12(sp)
  800a10:	df000215 	stw	fp,8(sp)
  800a14:	df000204 	addi	fp,sp,8
  800a18:	e13fff15 	stw	r4,-4(fp)
	uint8_t err;
    uint8_t wifiReceive;

	while (1){

        wifiReceive = (uint8_t) OSQPend(wifiPackageQueue, 0, &err);
  800a1c:	d0a07817 	ldw	r2,-32288(gp)
  800a20:	e0fffe44 	addi	r3,fp,-7
  800a24:	180d883a 	mov	r6,r3
  800a28:	000b883a 	mov	r5,zero
  800a2c:	1009883a 	mov	r4,r2
  800a30:	0808d400 	call	808d40 <OSQPend>
  800a34:	e0bffe05 	stb	r2,-8(fp)
	}
  800a38:	003ff806 	br	800a1c <__alt_mem_epcs_flash_controller_0+0xff7f7a1c>

00800a3c <wifi_uart_interrupt>:
}

void wifi_uart_interrupt(void * context){
  800a3c:	defffc04 	addi	sp,sp,-16
  800a40:	dfc00315 	stw	ra,12(sp)
  800a44:	df000215 	stw	fp,8(sp)
  800a48:	df000204 	addi	fp,sp,8
  800a4c:	e13fff15 	stw	r4,-4(fp)
    uint8_t read = 0;
  800a50:	e03ffe05 	stb	zero,-8(fp)

    while(!(IORD_ALTERA_AVALON_UART_STATUS(WIFI_UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
  800a54:	0001883a 	nop
  800a58:	00804074 	movhi	r2,257
  800a5c:	10a81a04 	addi	r2,r2,-24472
  800a60:	10800037 	ldwio	r2,0(r2)
  800a64:	1080200c 	andi	r2,r2,128
  800a68:	103ffb26 	beq	r2,zero,800a58 <__alt_mem_epcs_flash_controller_0+0xff7f7a58>
    read = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_UART_BASE);
  800a6c:	00804074 	movhi	r2,257
  800a70:	10a81804 	addi	r2,r2,-24480
  800a74:	10800037 	ldwio	r2,0(r2)
  800a78:	e0bffe05 	stb	r2,-8(fp)
    
    OSQPost(wifiPackageQueue, (void*) read);
  800a7c:	d0a07817 	ldw	r2,-32288(gp)
  800a80:	e0fffe03 	ldbu	r3,-8(fp)
  800a84:	180b883a 	mov	r5,r3
  800a88:	1009883a 	mov	r4,r2
  800a8c:	08091380 	call	809138 <OSQPost>
}
  800a90:	0001883a 	nop
  800a94:	e037883a 	mov	sp,fp
  800a98:	dfc00117 	ldw	ra,4(sp)
  800a9c:	df000017 	ldw	fp,0(sp)
  800aa0:	dec00204 	addi	sp,sp,8
  800aa4:	f800283a 	ret

00800aa8 <__divsi3>:
  800aa8:	20001b16 	blt	r4,zero,800b18 <__divsi3+0x70>
  800aac:	000f883a 	mov	r7,zero
  800ab0:	28001616 	blt	r5,zero,800b0c <__divsi3+0x64>
  800ab4:	200d883a 	mov	r6,r4
  800ab8:	29001a2e 	bgeu	r5,r4,800b24 <__divsi3+0x7c>
  800abc:	00800804 	movi	r2,32
  800ac0:	00c00044 	movi	r3,1
  800ac4:	00000106 	br	800acc <__divsi3+0x24>
  800ac8:	10000d26 	beq	r2,zero,800b00 <__divsi3+0x58>
  800acc:	294b883a 	add	r5,r5,r5
  800ad0:	10bfffc4 	addi	r2,r2,-1
  800ad4:	18c7883a 	add	r3,r3,r3
  800ad8:	293ffb36 	bltu	r5,r4,800ac8 <__alt_mem_epcs_flash_controller_0+0xff7f7ac8>
  800adc:	0005883a 	mov	r2,zero
  800ae0:	18000726 	beq	r3,zero,800b00 <__divsi3+0x58>
  800ae4:	0005883a 	mov	r2,zero
  800ae8:	31400236 	bltu	r6,r5,800af4 <__divsi3+0x4c>
  800aec:	314dc83a 	sub	r6,r6,r5
  800af0:	10c4b03a 	or	r2,r2,r3
  800af4:	1806d07a 	srli	r3,r3,1
  800af8:	280ad07a 	srli	r5,r5,1
  800afc:	183ffa1e 	bne	r3,zero,800ae8 <__alt_mem_epcs_flash_controller_0+0xff7f7ae8>
  800b00:	38000126 	beq	r7,zero,800b08 <__divsi3+0x60>
  800b04:	0085c83a 	sub	r2,zero,r2
  800b08:	f800283a 	ret
  800b0c:	014bc83a 	sub	r5,zero,r5
  800b10:	39c0005c 	xori	r7,r7,1
  800b14:	003fe706 	br	800ab4 <__alt_mem_epcs_flash_controller_0+0xff7f7ab4>
  800b18:	0109c83a 	sub	r4,zero,r4
  800b1c:	01c00044 	movi	r7,1
  800b20:	003fe306 	br	800ab0 <__alt_mem_epcs_flash_controller_0+0xff7f7ab0>
  800b24:	00c00044 	movi	r3,1
  800b28:	003fee06 	br	800ae4 <__alt_mem_epcs_flash_controller_0+0xff7f7ae4>

00800b2c <__modsi3>:
  800b2c:	20001716 	blt	r4,zero,800b8c <__modsi3+0x60>
  800b30:	000f883a 	mov	r7,zero
  800b34:	2005883a 	mov	r2,r4
  800b38:	28001216 	blt	r5,zero,800b84 <__modsi3+0x58>
  800b3c:	2900162e 	bgeu	r5,r4,800b98 <__modsi3+0x6c>
  800b40:	01800804 	movi	r6,32
  800b44:	00c00044 	movi	r3,1
  800b48:	00000106 	br	800b50 <__modsi3+0x24>
  800b4c:	30000a26 	beq	r6,zero,800b78 <__modsi3+0x4c>
  800b50:	294b883a 	add	r5,r5,r5
  800b54:	31bfffc4 	addi	r6,r6,-1
  800b58:	18c7883a 	add	r3,r3,r3
  800b5c:	293ffb36 	bltu	r5,r4,800b4c <__alt_mem_epcs_flash_controller_0+0xff7f7b4c>
  800b60:	18000526 	beq	r3,zero,800b78 <__modsi3+0x4c>
  800b64:	1806d07a 	srli	r3,r3,1
  800b68:	11400136 	bltu	r2,r5,800b70 <__modsi3+0x44>
  800b6c:	1145c83a 	sub	r2,r2,r5
  800b70:	280ad07a 	srli	r5,r5,1
  800b74:	183ffb1e 	bne	r3,zero,800b64 <__alt_mem_epcs_flash_controller_0+0xff7f7b64>
  800b78:	38000126 	beq	r7,zero,800b80 <__modsi3+0x54>
  800b7c:	0085c83a 	sub	r2,zero,r2
  800b80:	f800283a 	ret
  800b84:	014bc83a 	sub	r5,zero,r5
  800b88:	003fec06 	br	800b3c <__alt_mem_epcs_flash_controller_0+0xff7f7b3c>
  800b8c:	0109c83a 	sub	r4,zero,r4
  800b90:	01c00044 	movi	r7,1
  800b94:	003fe706 	br	800b34 <__alt_mem_epcs_flash_controller_0+0xff7f7b34>
  800b98:	00c00044 	movi	r3,1
  800b9c:	003ff106 	br	800b64 <__alt_mem_epcs_flash_controller_0+0xff7f7b64>

00800ba0 <__udivsi3>:
  800ba0:	200d883a 	mov	r6,r4
  800ba4:	2900152e 	bgeu	r5,r4,800bfc <__udivsi3+0x5c>
  800ba8:	28001416 	blt	r5,zero,800bfc <__udivsi3+0x5c>
  800bac:	00800804 	movi	r2,32
  800bb0:	00c00044 	movi	r3,1
  800bb4:	00000206 	br	800bc0 <__udivsi3+0x20>
  800bb8:	10000e26 	beq	r2,zero,800bf4 <__udivsi3+0x54>
  800bbc:	28000516 	blt	r5,zero,800bd4 <__udivsi3+0x34>
  800bc0:	294b883a 	add	r5,r5,r5
  800bc4:	10bfffc4 	addi	r2,r2,-1
  800bc8:	18c7883a 	add	r3,r3,r3
  800bcc:	293ffa36 	bltu	r5,r4,800bb8 <__alt_mem_epcs_flash_controller_0+0xff7f7bb8>
  800bd0:	18000826 	beq	r3,zero,800bf4 <__udivsi3+0x54>
  800bd4:	0005883a 	mov	r2,zero
  800bd8:	31400236 	bltu	r6,r5,800be4 <__udivsi3+0x44>
  800bdc:	314dc83a 	sub	r6,r6,r5
  800be0:	10c4b03a 	or	r2,r2,r3
  800be4:	1806d07a 	srli	r3,r3,1
  800be8:	280ad07a 	srli	r5,r5,1
  800bec:	183ffa1e 	bne	r3,zero,800bd8 <__alt_mem_epcs_flash_controller_0+0xff7f7bd8>
  800bf0:	f800283a 	ret
  800bf4:	0005883a 	mov	r2,zero
  800bf8:	f800283a 	ret
  800bfc:	00c00044 	movi	r3,1
  800c00:	003ff406 	br	800bd4 <__alt_mem_epcs_flash_controller_0+0xff7f7bd4>

00800c04 <__umodsi3>:
  800c04:	2005883a 	mov	r2,r4
  800c08:	2900122e 	bgeu	r5,r4,800c54 <__umodsi3+0x50>
  800c0c:	28001116 	blt	r5,zero,800c54 <__umodsi3+0x50>
  800c10:	01800804 	movi	r6,32
  800c14:	00c00044 	movi	r3,1
  800c18:	00000206 	br	800c24 <__umodsi3+0x20>
  800c1c:	30000c26 	beq	r6,zero,800c50 <__umodsi3+0x4c>
  800c20:	28000516 	blt	r5,zero,800c38 <__umodsi3+0x34>
  800c24:	294b883a 	add	r5,r5,r5
  800c28:	31bfffc4 	addi	r6,r6,-1
  800c2c:	18c7883a 	add	r3,r3,r3
  800c30:	293ffa36 	bltu	r5,r4,800c1c <__alt_mem_epcs_flash_controller_0+0xff7f7c1c>
  800c34:	18000626 	beq	r3,zero,800c50 <__umodsi3+0x4c>
  800c38:	1806d07a 	srli	r3,r3,1
  800c3c:	11400136 	bltu	r2,r5,800c44 <__umodsi3+0x40>
  800c40:	1145c83a 	sub	r2,r2,r5
  800c44:	280ad07a 	srli	r5,r5,1
  800c48:	183ffb1e 	bne	r3,zero,800c38 <__alt_mem_epcs_flash_controller_0+0xff7f7c38>
  800c4c:	f800283a 	ret
  800c50:	f800283a 	ret
  800c54:	00c00044 	movi	r3,1
  800c58:	003ff706 	br	800c38 <__alt_mem_epcs_flash_controller_0+0xff7f7c38>

00800c5c <_puts_r>:
  800c5c:	defff604 	addi	sp,sp,-40
  800c60:	dc000715 	stw	r16,28(sp)
  800c64:	2021883a 	mov	r16,r4
  800c68:	2809883a 	mov	r4,r5
  800c6c:	dc400815 	stw	r17,32(sp)
  800c70:	dfc00915 	stw	ra,36(sp)
  800c74:	2823883a 	mov	r17,r5
  800c78:	0800d300 	call	800d30 <strlen>
  800c7c:	10c00044 	addi	r3,r2,1
  800c80:	d8800115 	stw	r2,4(sp)
  800c84:	00802074 	movhi	r2,129
  800c88:	10844804 	addi	r2,r2,4384
  800c8c:	d8800215 	stw	r2,8(sp)
  800c90:	00800044 	movi	r2,1
  800c94:	d8800315 	stw	r2,12(sp)
  800c98:	00800084 	movi	r2,2
  800c9c:	dc400015 	stw	r17,0(sp)
  800ca0:	d8c00615 	stw	r3,24(sp)
  800ca4:	dec00415 	stw	sp,16(sp)
  800ca8:	d8800515 	stw	r2,20(sp)
  800cac:	80000226 	beq	r16,zero,800cb8 <_puts_r+0x5c>
  800cb0:	80800e17 	ldw	r2,56(r16)
  800cb4:	10001426 	beq	r2,zero,800d08 <_puts_r+0xac>
  800cb8:	81400217 	ldw	r5,8(r16)
  800cbc:	2880030b 	ldhu	r2,12(r5)
  800cc0:	10c8000c 	andi	r3,r2,8192
  800cc4:	1800061e 	bne	r3,zero,800ce0 <_puts_r+0x84>
  800cc8:	29001917 	ldw	r4,100(r5)
  800ccc:	00f7ffc4 	movi	r3,-8193
  800cd0:	10880014 	ori	r2,r2,8192
  800cd4:	20c6703a 	and	r3,r4,r3
  800cd8:	2880030d 	sth	r2,12(r5)
  800cdc:	28c01915 	stw	r3,100(r5)
  800ce0:	d9800404 	addi	r6,sp,16
  800ce4:	8009883a 	mov	r4,r16
  800ce8:	08011780 	call	801178 <__sfvwrite_r>
  800cec:	1000091e 	bne	r2,zero,800d14 <_puts_r+0xb8>
  800cf0:	00800284 	movi	r2,10
  800cf4:	dfc00917 	ldw	ra,36(sp)
  800cf8:	dc400817 	ldw	r17,32(sp)
  800cfc:	dc000717 	ldw	r16,28(sp)
  800d00:	dec00a04 	addi	sp,sp,40
  800d04:	f800283a 	ret
  800d08:	8009883a 	mov	r4,r16
  800d0c:	08011280 	call	801128 <__sinit>
  800d10:	003fe906 	br	800cb8 <__alt_mem_epcs_flash_controller_0+0xff7f7cb8>
  800d14:	00bfffc4 	movi	r2,-1
  800d18:	003ff606 	br	800cf4 <__alt_mem_epcs_flash_controller_0+0xff7f7cf4>

00800d1c <puts>:
  800d1c:	00802074 	movhi	r2,129
  800d20:	108c1f04 	addi	r2,r2,12412
  800d24:	200b883a 	mov	r5,r4
  800d28:	11000017 	ldw	r4,0(r2)
  800d2c:	0800c5c1 	jmpi	800c5c <_puts_r>

00800d30 <strlen>:
  800d30:	208000cc 	andi	r2,r4,3
  800d34:	10002026 	beq	r2,zero,800db8 <strlen+0x88>
  800d38:	20800007 	ldb	r2,0(r4)
  800d3c:	10002026 	beq	r2,zero,800dc0 <strlen+0x90>
  800d40:	2005883a 	mov	r2,r4
  800d44:	00000206 	br	800d50 <strlen+0x20>
  800d48:	10c00007 	ldb	r3,0(r2)
  800d4c:	18001826 	beq	r3,zero,800db0 <strlen+0x80>
  800d50:	10800044 	addi	r2,r2,1
  800d54:	10c000cc 	andi	r3,r2,3
  800d58:	183ffb1e 	bne	r3,zero,800d48 <__alt_mem_epcs_flash_controller_0+0xff7f7d48>
  800d5c:	10c00017 	ldw	r3,0(r2)
  800d60:	01ffbff4 	movhi	r7,65279
  800d64:	39ffbfc4 	addi	r7,r7,-257
  800d68:	00ca303a 	nor	r5,zero,r3
  800d6c:	01a02074 	movhi	r6,32897
  800d70:	19c7883a 	add	r3,r3,r7
  800d74:	31a02004 	addi	r6,r6,-32640
  800d78:	1946703a 	and	r3,r3,r5
  800d7c:	1986703a 	and	r3,r3,r6
  800d80:	1800091e 	bne	r3,zero,800da8 <strlen+0x78>
  800d84:	10800104 	addi	r2,r2,4
  800d88:	10c00017 	ldw	r3,0(r2)
  800d8c:	19cb883a 	add	r5,r3,r7
  800d90:	00c6303a 	nor	r3,zero,r3
  800d94:	28c6703a 	and	r3,r5,r3
  800d98:	1986703a 	and	r3,r3,r6
  800d9c:	183ff926 	beq	r3,zero,800d84 <__alt_mem_epcs_flash_controller_0+0xff7f7d84>
  800da0:	00000106 	br	800da8 <strlen+0x78>
  800da4:	10800044 	addi	r2,r2,1
  800da8:	10c00007 	ldb	r3,0(r2)
  800dac:	183ffd1e 	bne	r3,zero,800da4 <__alt_mem_epcs_flash_controller_0+0xff7f7da4>
  800db0:	1105c83a 	sub	r2,r2,r4
  800db4:	f800283a 	ret
  800db8:	2005883a 	mov	r2,r4
  800dbc:	003fe706 	br	800d5c <__alt_mem_epcs_flash_controller_0+0xff7f7d5c>
  800dc0:	0005883a 	mov	r2,zero
  800dc4:	f800283a 	ret

00800dc8 <__fp_unlock>:
  800dc8:	0005883a 	mov	r2,zero
  800dcc:	f800283a 	ret

00800dd0 <_cleanup_r>:
  800dd0:	01402034 	movhi	r5,128
  800dd4:	294b6004 	addi	r5,r5,11648
  800dd8:	08017041 	jmpi	801704 <_fwalk_reent>

00800ddc <__sinit.part.1>:
  800ddc:	defff704 	addi	sp,sp,-36
  800de0:	00c02034 	movhi	r3,128
  800de4:	dfc00815 	stw	ra,32(sp)
  800de8:	ddc00715 	stw	r23,28(sp)
  800dec:	dd800615 	stw	r22,24(sp)
  800df0:	dd400515 	stw	r21,20(sp)
  800df4:	dd000415 	stw	r20,16(sp)
  800df8:	dcc00315 	stw	r19,12(sp)
  800dfc:	dc800215 	stw	r18,8(sp)
  800e00:	dc400115 	stw	r17,4(sp)
  800e04:	dc000015 	stw	r16,0(sp)
  800e08:	18c37404 	addi	r3,r3,3536
  800e0c:	24000117 	ldw	r16,4(r4)
  800e10:	20c00f15 	stw	r3,60(r4)
  800e14:	2080bb04 	addi	r2,r4,748
  800e18:	00c000c4 	movi	r3,3
  800e1c:	20c0b915 	stw	r3,740(r4)
  800e20:	2080ba15 	stw	r2,744(r4)
  800e24:	2000b815 	stw	zero,736(r4)
  800e28:	05c00204 	movi	r23,8
  800e2c:	00800104 	movi	r2,4
  800e30:	2025883a 	mov	r18,r4
  800e34:	b80d883a 	mov	r6,r23
  800e38:	81001704 	addi	r4,r16,92
  800e3c:	000b883a 	mov	r5,zero
  800e40:	80000015 	stw	zero,0(r16)
  800e44:	80000115 	stw	zero,4(r16)
  800e48:	80000215 	stw	zero,8(r16)
  800e4c:	8080030d 	sth	r2,12(r16)
  800e50:	80001915 	stw	zero,100(r16)
  800e54:	8000038d 	sth	zero,14(r16)
  800e58:	80000415 	stw	zero,16(r16)
  800e5c:	80000515 	stw	zero,20(r16)
  800e60:	80000615 	stw	zero,24(r16)
  800e64:	080235c0 	call	80235c <memset>
  800e68:	05802034 	movhi	r22,128
  800e6c:	94400217 	ldw	r17,8(r18)
  800e70:	05402034 	movhi	r21,128
  800e74:	05002034 	movhi	r20,128
  800e78:	04c02034 	movhi	r19,128
  800e7c:	b58a8f04 	addi	r22,r22,10812
  800e80:	ad4aa604 	addi	r21,r21,10904
  800e84:	a50ac504 	addi	r20,r20,11028
  800e88:	9ccadc04 	addi	r19,r19,11120
  800e8c:	85800815 	stw	r22,32(r16)
  800e90:	85400915 	stw	r21,36(r16)
  800e94:	85000a15 	stw	r20,40(r16)
  800e98:	84c00b15 	stw	r19,44(r16)
  800e9c:	84000715 	stw	r16,28(r16)
  800ea0:	00800284 	movi	r2,10
  800ea4:	8880030d 	sth	r2,12(r17)
  800ea8:	00800044 	movi	r2,1
  800eac:	b80d883a 	mov	r6,r23
  800eb0:	89001704 	addi	r4,r17,92
  800eb4:	000b883a 	mov	r5,zero
  800eb8:	88000015 	stw	zero,0(r17)
  800ebc:	88000115 	stw	zero,4(r17)
  800ec0:	88000215 	stw	zero,8(r17)
  800ec4:	88001915 	stw	zero,100(r17)
  800ec8:	8880038d 	sth	r2,14(r17)
  800ecc:	88000415 	stw	zero,16(r17)
  800ed0:	88000515 	stw	zero,20(r17)
  800ed4:	88000615 	stw	zero,24(r17)
  800ed8:	080235c0 	call	80235c <memset>
  800edc:	94000317 	ldw	r16,12(r18)
  800ee0:	00800484 	movi	r2,18
  800ee4:	8c400715 	stw	r17,28(r17)
  800ee8:	8d800815 	stw	r22,32(r17)
  800eec:	8d400915 	stw	r21,36(r17)
  800ef0:	8d000a15 	stw	r20,40(r17)
  800ef4:	8cc00b15 	stw	r19,44(r17)
  800ef8:	8080030d 	sth	r2,12(r16)
  800efc:	00800084 	movi	r2,2
  800f00:	80000015 	stw	zero,0(r16)
  800f04:	80000115 	stw	zero,4(r16)
  800f08:	80000215 	stw	zero,8(r16)
  800f0c:	80001915 	stw	zero,100(r16)
  800f10:	8080038d 	sth	r2,14(r16)
  800f14:	80000415 	stw	zero,16(r16)
  800f18:	80000515 	stw	zero,20(r16)
  800f1c:	80000615 	stw	zero,24(r16)
  800f20:	b80d883a 	mov	r6,r23
  800f24:	000b883a 	mov	r5,zero
  800f28:	81001704 	addi	r4,r16,92
  800f2c:	080235c0 	call	80235c <memset>
  800f30:	00800044 	movi	r2,1
  800f34:	84000715 	stw	r16,28(r16)
  800f38:	85800815 	stw	r22,32(r16)
  800f3c:	85400915 	stw	r21,36(r16)
  800f40:	85000a15 	stw	r20,40(r16)
  800f44:	84c00b15 	stw	r19,44(r16)
  800f48:	90800e15 	stw	r2,56(r18)
  800f4c:	dfc00817 	ldw	ra,32(sp)
  800f50:	ddc00717 	ldw	r23,28(sp)
  800f54:	dd800617 	ldw	r22,24(sp)
  800f58:	dd400517 	ldw	r21,20(sp)
  800f5c:	dd000417 	ldw	r20,16(sp)
  800f60:	dcc00317 	ldw	r19,12(sp)
  800f64:	dc800217 	ldw	r18,8(sp)
  800f68:	dc400117 	ldw	r17,4(sp)
  800f6c:	dc000017 	ldw	r16,0(sp)
  800f70:	dec00904 	addi	sp,sp,36
  800f74:	f800283a 	ret

00800f78 <__fp_lock>:
  800f78:	0005883a 	mov	r2,zero
  800f7c:	f800283a 	ret

00800f80 <__sfmoreglue>:
  800f80:	defffc04 	addi	sp,sp,-16
  800f84:	dc800215 	stw	r18,8(sp)
  800f88:	2825883a 	mov	r18,r5
  800f8c:	dc000015 	stw	r16,0(sp)
  800f90:	01401a04 	movi	r5,104
  800f94:	2021883a 	mov	r16,r4
  800f98:	913fffc4 	addi	r4,r18,-1
  800f9c:	dfc00315 	stw	ra,12(sp)
  800fa0:	dc400115 	stw	r17,4(sp)
  800fa4:	080388c0 	call	80388c <__mulsi3>
  800fa8:	8009883a 	mov	r4,r16
  800fac:	11401d04 	addi	r5,r2,116
  800fb0:	1023883a 	mov	r17,r2
  800fb4:	08017c80 	call	8017c8 <_malloc_r>
  800fb8:	1021883a 	mov	r16,r2
  800fbc:	10000726 	beq	r2,zero,800fdc <__sfmoreglue+0x5c>
  800fc0:	11000304 	addi	r4,r2,12
  800fc4:	10000015 	stw	zero,0(r2)
  800fc8:	14800115 	stw	r18,4(r2)
  800fcc:	11000215 	stw	r4,8(r2)
  800fd0:	89801a04 	addi	r6,r17,104
  800fd4:	000b883a 	mov	r5,zero
  800fd8:	080235c0 	call	80235c <memset>
  800fdc:	8005883a 	mov	r2,r16
  800fe0:	dfc00317 	ldw	ra,12(sp)
  800fe4:	dc800217 	ldw	r18,8(sp)
  800fe8:	dc400117 	ldw	r17,4(sp)
  800fec:	dc000017 	ldw	r16,0(sp)
  800ff0:	dec00404 	addi	sp,sp,16
  800ff4:	f800283a 	ret

00800ff8 <__sfp>:
  800ff8:	defffb04 	addi	sp,sp,-20
  800ffc:	dc000015 	stw	r16,0(sp)
  801000:	04002074 	movhi	r16,129
  801004:	840c1e04 	addi	r16,r16,12408
  801008:	dcc00315 	stw	r19,12(sp)
  80100c:	2027883a 	mov	r19,r4
  801010:	81000017 	ldw	r4,0(r16)
  801014:	dfc00415 	stw	ra,16(sp)
  801018:	dc800215 	stw	r18,8(sp)
  80101c:	20800e17 	ldw	r2,56(r4)
  801020:	dc400115 	stw	r17,4(sp)
  801024:	1000021e 	bne	r2,zero,801030 <__sfp+0x38>
  801028:	0800ddc0 	call	800ddc <__sinit.part.1>
  80102c:	81000017 	ldw	r4,0(r16)
  801030:	2480b804 	addi	r18,r4,736
  801034:	047fffc4 	movi	r17,-1
  801038:	91000117 	ldw	r4,4(r18)
  80103c:	94000217 	ldw	r16,8(r18)
  801040:	213fffc4 	addi	r4,r4,-1
  801044:	20000a16 	blt	r4,zero,801070 <__sfp+0x78>
  801048:	8080030f 	ldh	r2,12(r16)
  80104c:	10000c26 	beq	r2,zero,801080 <__sfp+0x88>
  801050:	80c01d04 	addi	r3,r16,116
  801054:	00000206 	br	801060 <__sfp+0x68>
  801058:	18bfe60f 	ldh	r2,-104(r3)
  80105c:	10000826 	beq	r2,zero,801080 <__sfp+0x88>
  801060:	213fffc4 	addi	r4,r4,-1
  801064:	1c3ffd04 	addi	r16,r3,-12
  801068:	18c01a04 	addi	r3,r3,104
  80106c:	247ffa1e 	bne	r4,r17,801058 <__alt_mem_epcs_flash_controller_0+0xff7f8058>
  801070:	90800017 	ldw	r2,0(r18)
  801074:	10001d26 	beq	r2,zero,8010ec <__sfp+0xf4>
  801078:	1025883a 	mov	r18,r2
  80107c:	003fee06 	br	801038 <__alt_mem_epcs_flash_controller_0+0xff7f8038>
  801080:	00bfffc4 	movi	r2,-1
  801084:	8080038d 	sth	r2,14(r16)
  801088:	00800044 	movi	r2,1
  80108c:	8080030d 	sth	r2,12(r16)
  801090:	80001915 	stw	zero,100(r16)
  801094:	80000015 	stw	zero,0(r16)
  801098:	80000215 	stw	zero,8(r16)
  80109c:	80000115 	stw	zero,4(r16)
  8010a0:	80000415 	stw	zero,16(r16)
  8010a4:	80000515 	stw	zero,20(r16)
  8010a8:	80000615 	stw	zero,24(r16)
  8010ac:	01800204 	movi	r6,8
  8010b0:	000b883a 	mov	r5,zero
  8010b4:	81001704 	addi	r4,r16,92
  8010b8:	080235c0 	call	80235c <memset>
  8010bc:	8005883a 	mov	r2,r16
  8010c0:	80000c15 	stw	zero,48(r16)
  8010c4:	80000d15 	stw	zero,52(r16)
  8010c8:	80001115 	stw	zero,68(r16)
  8010cc:	80001215 	stw	zero,72(r16)
  8010d0:	dfc00417 	ldw	ra,16(sp)
  8010d4:	dcc00317 	ldw	r19,12(sp)
  8010d8:	dc800217 	ldw	r18,8(sp)
  8010dc:	dc400117 	ldw	r17,4(sp)
  8010e0:	dc000017 	ldw	r16,0(sp)
  8010e4:	dec00504 	addi	sp,sp,20
  8010e8:	f800283a 	ret
  8010ec:	01400104 	movi	r5,4
  8010f0:	9809883a 	mov	r4,r19
  8010f4:	0800f800 	call	800f80 <__sfmoreglue>
  8010f8:	90800015 	stw	r2,0(r18)
  8010fc:	103fde1e 	bne	r2,zero,801078 <__alt_mem_epcs_flash_controller_0+0xff7f8078>
  801100:	00800304 	movi	r2,12
  801104:	98800015 	stw	r2,0(r19)
  801108:	0005883a 	mov	r2,zero
  80110c:	003ff006 	br	8010d0 <__alt_mem_epcs_flash_controller_0+0xff7f80d0>

00801110 <_cleanup>:
  801110:	00802074 	movhi	r2,129
  801114:	108c1e04 	addi	r2,r2,12408
  801118:	11000017 	ldw	r4,0(r2)
  80111c:	01402034 	movhi	r5,128
  801120:	294b6004 	addi	r5,r5,11648
  801124:	08017041 	jmpi	801704 <_fwalk_reent>

00801128 <__sinit>:
  801128:	20800e17 	ldw	r2,56(r4)
  80112c:	10000126 	beq	r2,zero,801134 <__sinit+0xc>
  801130:	f800283a 	ret
  801134:	0800ddc1 	jmpi	800ddc <__sinit.part.1>

00801138 <__sfp_lock_acquire>:
  801138:	f800283a 	ret

0080113c <__sfp_lock_release>:
  80113c:	f800283a 	ret

00801140 <__sinit_lock_acquire>:
  801140:	f800283a 	ret

00801144 <__sinit_lock_release>:
  801144:	f800283a 	ret

00801148 <__fp_lock_all>:
  801148:	00802074 	movhi	r2,129
  80114c:	108c1f04 	addi	r2,r2,12412
  801150:	11000017 	ldw	r4,0(r2)
  801154:	01402034 	movhi	r5,128
  801158:	2943de04 	addi	r5,r5,3960
  80115c:	08016401 	jmpi	801640 <_fwalk>

00801160 <__fp_unlock_all>:
  801160:	00802074 	movhi	r2,129
  801164:	108c1f04 	addi	r2,r2,12412
  801168:	11000017 	ldw	r4,0(r2)
  80116c:	01402034 	movhi	r5,128
  801170:	29437204 	addi	r5,r5,3528
  801174:	08016401 	jmpi	801640 <_fwalk>

00801178 <__sfvwrite_r>:
  801178:	30800217 	ldw	r2,8(r6)
  80117c:	10006726 	beq	r2,zero,80131c <__sfvwrite_r+0x1a4>
  801180:	28c0030b 	ldhu	r3,12(r5)
  801184:	defff404 	addi	sp,sp,-48
  801188:	dd400715 	stw	r21,28(sp)
  80118c:	dd000615 	stw	r20,24(sp)
  801190:	dc000215 	stw	r16,8(sp)
  801194:	dfc00b15 	stw	ra,44(sp)
  801198:	df000a15 	stw	fp,40(sp)
  80119c:	ddc00915 	stw	r23,36(sp)
  8011a0:	dd800815 	stw	r22,32(sp)
  8011a4:	dcc00515 	stw	r19,20(sp)
  8011a8:	dc800415 	stw	r18,16(sp)
  8011ac:	dc400315 	stw	r17,12(sp)
  8011b0:	1880020c 	andi	r2,r3,8
  8011b4:	2821883a 	mov	r16,r5
  8011b8:	202b883a 	mov	r21,r4
  8011bc:	3029883a 	mov	r20,r6
  8011c0:	10002726 	beq	r2,zero,801260 <__sfvwrite_r+0xe8>
  8011c4:	28800417 	ldw	r2,16(r5)
  8011c8:	10002526 	beq	r2,zero,801260 <__sfvwrite_r+0xe8>
  8011cc:	1880008c 	andi	r2,r3,2
  8011d0:	a4400017 	ldw	r17,0(r20)
  8011d4:	10002a26 	beq	r2,zero,801280 <__sfvwrite_r+0x108>
  8011d8:	05a00034 	movhi	r22,32768
  8011dc:	0027883a 	mov	r19,zero
  8011e0:	0025883a 	mov	r18,zero
  8011e4:	b5bf0004 	addi	r22,r22,-1024
  8011e8:	980d883a 	mov	r6,r19
  8011ec:	a809883a 	mov	r4,r21
  8011f0:	90004626 	beq	r18,zero,80130c <__sfvwrite_r+0x194>
  8011f4:	900f883a 	mov	r7,r18
  8011f8:	b480022e 	bgeu	r22,r18,801204 <__sfvwrite_r+0x8c>
  8011fc:	01e00034 	movhi	r7,32768
  801200:	39ff0004 	addi	r7,r7,-1024
  801204:	80800917 	ldw	r2,36(r16)
  801208:	81400717 	ldw	r5,28(r16)
  80120c:	103ee83a 	callr	r2
  801210:	00805a0e 	bge	zero,r2,80137c <__sfvwrite_r+0x204>
  801214:	a0c00217 	ldw	r3,8(r20)
  801218:	98a7883a 	add	r19,r19,r2
  80121c:	90a5c83a 	sub	r18,r18,r2
  801220:	1885c83a 	sub	r2,r3,r2
  801224:	a0800215 	stw	r2,8(r20)
  801228:	103fef1e 	bne	r2,zero,8011e8 <__alt_mem_epcs_flash_controller_0+0xff7f81e8>
  80122c:	0005883a 	mov	r2,zero
  801230:	dfc00b17 	ldw	ra,44(sp)
  801234:	df000a17 	ldw	fp,40(sp)
  801238:	ddc00917 	ldw	r23,36(sp)
  80123c:	dd800817 	ldw	r22,32(sp)
  801240:	dd400717 	ldw	r21,28(sp)
  801244:	dd000617 	ldw	r20,24(sp)
  801248:	dcc00517 	ldw	r19,20(sp)
  80124c:	dc800417 	ldw	r18,16(sp)
  801250:	dc400317 	ldw	r17,12(sp)
  801254:	dc000217 	ldw	r16,8(sp)
  801258:	dec00c04 	addi	sp,sp,48
  80125c:	f800283a 	ret
  801260:	800b883a 	mov	r5,r16
  801264:	a809883a 	mov	r4,r21
  801268:	0802bd80 	call	802bd8 <__swsetup_r>
  80126c:	1000ee1e 	bne	r2,zero,801628 <__sfvwrite_r+0x4b0>
  801270:	80c0030b 	ldhu	r3,12(r16)
  801274:	a4400017 	ldw	r17,0(r20)
  801278:	1880008c 	andi	r2,r3,2
  80127c:	103fd61e 	bne	r2,zero,8011d8 <__alt_mem_epcs_flash_controller_0+0xff7f81d8>
  801280:	1880004c 	andi	r2,r3,1
  801284:	1000421e 	bne	r2,zero,801390 <__sfvwrite_r+0x218>
  801288:	0039883a 	mov	fp,zero
  80128c:	0025883a 	mov	r18,zero
  801290:	90001a26 	beq	r18,zero,8012fc <__sfvwrite_r+0x184>
  801294:	1880800c 	andi	r2,r3,512
  801298:	84c00217 	ldw	r19,8(r16)
  80129c:	10002126 	beq	r2,zero,801324 <__sfvwrite_r+0x1ac>
  8012a0:	982f883a 	mov	r23,r19
  8012a4:	94c09636 	bltu	r18,r19,801500 <__sfvwrite_r+0x388>
  8012a8:	1881200c 	andi	r2,r3,1152
  8012ac:	1000a11e 	bne	r2,zero,801534 <__sfvwrite_r+0x3bc>
  8012b0:	81000017 	ldw	r4,0(r16)
  8012b4:	b80d883a 	mov	r6,r23
  8012b8:	e00b883a 	mov	r5,fp
  8012bc:	08022000 	call	802200 <memmove>
  8012c0:	80c00217 	ldw	r3,8(r16)
  8012c4:	81000017 	ldw	r4,0(r16)
  8012c8:	9005883a 	mov	r2,r18
  8012cc:	1ce7c83a 	sub	r19,r3,r19
  8012d0:	25cf883a 	add	r7,r4,r23
  8012d4:	84c00215 	stw	r19,8(r16)
  8012d8:	81c00015 	stw	r7,0(r16)
  8012dc:	a0c00217 	ldw	r3,8(r20)
  8012e0:	e0b9883a 	add	fp,fp,r2
  8012e4:	90a5c83a 	sub	r18,r18,r2
  8012e8:	18a7c83a 	sub	r19,r3,r2
  8012ec:	a4c00215 	stw	r19,8(r20)
  8012f0:	983fce26 	beq	r19,zero,80122c <__alt_mem_epcs_flash_controller_0+0xff7f822c>
  8012f4:	80c0030b 	ldhu	r3,12(r16)
  8012f8:	903fe61e 	bne	r18,zero,801294 <__alt_mem_epcs_flash_controller_0+0xff7f8294>
  8012fc:	8f000017 	ldw	fp,0(r17)
  801300:	8c800117 	ldw	r18,4(r17)
  801304:	8c400204 	addi	r17,r17,8
  801308:	003fe106 	br	801290 <__alt_mem_epcs_flash_controller_0+0xff7f8290>
  80130c:	8cc00017 	ldw	r19,0(r17)
  801310:	8c800117 	ldw	r18,4(r17)
  801314:	8c400204 	addi	r17,r17,8
  801318:	003fb306 	br	8011e8 <__alt_mem_epcs_flash_controller_0+0xff7f81e8>
  80131c:	0005883a 	mov	r2,zero
  801320:	f800283a 	ret
  801324:	81000017 	ldw	r4,0(r16)
  801328:	80800417 	ldw	r2,16(r16)
  80132c:	11005a36 	bltu	r2,r4,801498 <__sfvwrite_r+0x320>
  801330:	85c00517 	ldw	r23,20(r16)
  801334:	95c05836 	bltu	r18,r23,801498 <__sfvwrite_r+0x320>
  801338:	00a00034 	movhi	r2,32768
  80133c:	10bfffc4 	addi	r2,r2,-1
  801340:	9009883a 	mov	r4,r18
  801344:	1480012e 	bgeu	r2,r18,80134c <__sfvwrite_r+0x1d4>
  801348:	1009883a 	mov	r4,r2
  80134c:	b80b883a 	mov	r5,r23
  801350:	0800aa80 	call	800aa8 <__divsi3>
  801354:	b80b883a 	mov	r5,r23
  801358:	1009883a 	mov	r4,r2
  80135c:	080388c0 	call	80388c <__mulsi3>
  801360:	81400717 	ldw	r5,28(r16)
  801364:	80c00917 	ldw	r3,36(r16)
  801368:	100f883a 	mov	r7,r2
  80136c:	e00d883a 	mov	r6,fp
  801370:	a809883a 	mov	r4,r21
  801374:	183ee83a 	callr	r3
  801378:	00bfd816 	blt	zero,r2,8012dc <__alt_mem_epcs_flash_controller_0+0xff7f82dc>
  80137c:	8080030b 	ldhu	r2,12(r16)
  801380:	10801014 	ori	r2,r2,64
  801384:	8080030d 	sth	r2,12(r16)
  801388:	00bfffc4 	movi	r2,-1
  80138c:	003fa806 	br	801230 <__alt_mem_epcs_flash_controller_0+0xff7f8230>
  801390:	0027883a 	mov	r19,zero
  801394:	0011883a 	mov	r8,zero
  801398:	0039883a 	mov	fp,zero
  80139c:	0025883a 	mov	r18,zero
  8013a0:	90001f26 	beq	r18,zero,801420 <__sfvwrite_r+0x2a8>
  8013a4:	40005a26 	beq	r8,zero,801510 <__sfvwrite_r+0x398>
  8013a8:	982d883a 	mov	r22,r19
  8013ac:	94c0012e 	bgeu	r18,r19,8013b4 <__sfvwrite_r+0x23c>
  8013b0:	902d883a 	mov	r22,r18
  8013b4:	81000017 	ldw	r4,0(r16)
  8013b8:	80800417 	ldw	r2,16(r16)
  8013bc:	b02f883a 	mov	r23,r22
  8013c0:	81c00517 	ldw	r7,20(r16)
  8013c4:	1100032e 	bgeu	r2,r4,8013d4 <__sfvwrite_r+0x25c>
  8013c8:	80c00217 	ldw	r3,8(r16)
  8013cc:	38c7883a 	add	r3,r7,r3
  8013d0:	1d801816 	blt	r3,r22,801434 <__sfvwrite_r+0x2bc>
  8013d4:	b1c03e16 	blt	r22,r7,8014d0 <__sfvwrite_r+0x358>
  8013d8:	80800917 	ldw	r2,36(r16)
  8013dc:	81400717 	ldw	r5,28(r16)
  8013e0:	e00d883a 	mov	r6,fp
  8013e4:	da000115 	stw	r8,4(sp)
  8013e8:	a809883a 	mov	r4,r21
  8013ec:	103ee83a 	callr	r2
  8013f0:	102f883a 	mov	r23,r2
  8013f4:	da000117 	ldw	r8,4(sp)
  8013f8:	00bfe00e 	bge	zero,r2,80137c <__alt_mem_epcs_flash_controller_0+0xff7f837c>
  8013fc:	9de7c83a 	sub	r19,r19,r23
  801400:	98001f26 	beq	r19,zero,801480 <__sfvwrite_r+0x308>
  801404:	a0800217 	ldw	r2,8(r20)
  801408:	e5f9883a 	add	fp,fp,r23
  80140c:	95e5c83a 	sub	r18,r18,r23
  801410:	15efc83a 	sub	r23,r2,r23
  801414:	a5c00215 	stw	r23,8(r20)
  801418:	b83f8426 	beq	r23,zero,80122c <__alt_mem_epcs_flash_controller_0+0xff7f822c>
  80141c:	903fe11e 	bne	r18,zero,8013a4 <__alt_mem_epcs_flash_controller_0+0xff7f83a4>
  801420:	8f000017 	ldw	fp,0(r17)
  801424:	8c800117 	ldw	r18,4(r17)
  801428:	0011883a 	mov	r8,zero
  80142c:	8c400204 	addi	r17,r17,8
  801430:	003fdb06 	br	8013a0 <__alt_mem_epcs_flash_controller_0+0xff7f83a0>
  801434:	180d883a 	mov	r6,r3
  801438:	e00b883a 	mov	r5,fp
  80143c:	da000115 	stw	r8,4(sp)
  801440:	d8c00015 	stw	r3,0(sp)
  801444:	08022000 	call	802200 <memmove>
  801448:	d8c00017 	ldw	r3,0(sp)
  80144c:	80800017 	ldw	r2,0(r16)
  801450:	800b883a 	mov	r5,r16
  801454:	a809883a 	mov	r4,r21
  801458:	10c5883a 	add	r2,r2,r3
  80145c:	80800015 	stw	r2,0(r16)
  801460:	d8c00015 	stw	r3,0(sp)
  801464:	08030a00 	call	8030a0 <_fflush_r>
  801468:	d8c00017 	ldw	r3,0(sp)
  80146c:	da000117 	ldw	r8,4(sp)
  801470:	103fc21e 	bne	r2,zero,80137c <__alt_mem_epcs_flash_controller_0+0xff7f837c>
  801474:	182f883a 	mov	r23,r3
  801478:	9de7c83a 	sub	r19,r19,r23
  80147c:	983fe11e 	bne	r19,zero,801404 <__alt_mem_epcs_flash_controller_0+0xff7f8404>
  801480:	800b883a 	mov	r5,r16
  801484:	a809883a 	mov	r4,r21
  801488:	08030a00 	call	8030a0 <_fflush_r>
  80148c:	103fbb1e 	bne	r2,zero,80137c <__alt_mem_epcs_flash_controller_0+0xff7f837c>
  801490:	0011883a 	mov	r8,zero
  801494:	003fdb06 	br	801404 <__alt_mem_epcs_flash_controller_0+0xff7f8404>
  801498:	94c0012e 	bgeu	r18,r19,8014a0 <__sfvwrite_r+0x328>
  80149c:	9027883a 	mov	r19,r18
  8014a0:	980d883a 	mov	r6,r19
  8014a4:	e00b883a 	mov	r5,fp
  8014a8:	08022000 	call	802200 <memmove>
  8014ac:	80800217 	ldw	r2,8(r16)
  8014b0:	80c00017 	ldw	r3,0(r16)
  8014b4:	14c5c83a 	sub	r2,r2,r19
  8014b8:	1cc7883a 	add	r3,r3,r19
  8014bc:	80800215 	stw	r2,8(r16)
  8014c0:	80c00015 	stw	r3,0(r16)
  8014c4:	10004326 	beq	r2,zero,8015d4 <__sfvwrite_r+0x45c>
  8014c8:	9805883a 	mov	r2,r19
  8014cc:	003f8306 	br	8012dc <__alt_mem_epcs_flash_controller_0+0xff7f82dc>
  8014d0:	b00d883a 	mov	r6,r22
  8014d4:	e00b883a 	mov	r5,fp
  8014d8:	da000115 	stw	r8,4(sp)
  8014dc:	08022000 	call	802200 <memmove>
  8014e0:	80800217 	ldw	r2,8(r16)
  8014e4:	80c00017 	ldw	r3,0(r16)
  8014e8:	da000117 	ldw	r8,4(sp)
  8014ec:	1585c83a 	sub	r2,r2,r22
  8014f0:	1dad883a 	add	r22,r3,r22
  8014f4:	80800215 	stw	r2,8(r16)
  8014f8:	85800015 	stw	r22,0(r16)
  8014fc:	003fbf06 	br	8013fc <__alt_mem_epcs_flash_controller_0+0xff7f83fc>
  801500:	81000017 	ldw	r4,0(r16)
  801504:	9027883a 	mov	r19,r18
  801508:	902f883a 	mov	r23,r18
  80150c:	003f6906 	br	8012b4 <__alt_mem_epcs_flash_controller_0+0xff7f82b4>
  801510:	900d883a 	mov	r6,r18
  801514:	01400284 	movi	r5,10
  801518:	e009883a 	mov	r4,fp
  80151c:	0801fd40 	call	801fd4 <memchr>
  801520:	10003e26 	beq	r2,zero,80161c <__sfvwrite_r+0x4a4>
  801524:	10800044 	addi	r2,r2,1
  801528:	1727c83a 	sub	r19,r2,fp
  80152c:	02000044 	movi	r8,1
  801530:	003f9d06 	br	8013a8 <__alt_mem_epcs_flash_controller_0+0xff7f83a8>
  801534:	80800517 	ldw	r2,20(r16)
  801538:	81400417 	ldw	r5,16(r16)
  80153c:	81c00017 	ldw	r7,0(r16)
  801540:	10a7883a 	add	r19,r2,r2
  801544:	9885883a 	add	r2,r19,r2
  801548:	1026d7fa 	srli	r19,r2,31
  80154c:	396dc83a 	sub	r22,r7,r5
  801550:	b1000044 	addi	r4,r22,1
  801554:	9885883a 	add	r2,r19,r2
  801558:	1027d07a 	srai	r19,r2,1
  80155c:	2485883a 	add	r2,r4,r18
  801560:	980d883a 	mov	r6,r19
  801564:	9880022e 	bgeu	r19,r2,801570 <__sfvwrite_r+0x3f8>
  801568:	1027883a 	mov	r19,r2
  80156c:	100d883a 	mov	r6,r2
  801570:	18c1000c 	andi	r3,r3,1024
  801574:	18001c26 	beq	r3,zero,8015e8 <__sfvwrite_r+0x470>
  801578:	300b883a 	mov	r5,r6
  80157c:	a809883a 	mov	r4,r21
  801580:	08017c80 	call	8017c8 <_malloc_r>
  801584:	102f883a 	mov	r23,r2
  801588:	10002926 	beq	r2,zero,801630 <__sfvwrite_r+0x4b8>
  80158c:	81400417 	ldw	r5,16(r16)
  801590:	b00d883a 	mov	r6,r22
  801594:	1009883a 	mov	r4,r2
  801598:	08020b80 	call	8020b8 <memcpy>
  80159c:	8080030b 	ldhu	r2,12(r16)
  8015a0:	00fedfc4 	movi	r3,-1153
  8015a4:	10c4703a 	and	r2,r2,r3
  8015a8:	10802014 	ori	r2,r2,128
  8015ac:	8080030d 	sth	r2,12(r16)
  8015b0:	bd89883a 	add	r4,r23,r22
  8015b4:	9d8fc83a 	sub	r7,r19,r22
  8015b8:	85c00415 	stw	r23,16(r16)
  8015bc:	84c00515 	stw	r19,20(r16)
  8015c0:	81000015 	stw	r4,0(r16)
  8015c4:	9027883a 	mov	r19,r18
  8015c8:	81c00215 	stw	r7,8(r16)
  8015cc:	902f883a 	mov	r23,r18
  8015d0:	003f3806 	br	8012b4 <__alt_mem_epcs_flash_controller_0+0xff7f82b4>
  8015d4:	800b883a 	mov	r5,r16
  8015d8:	a809883a 	mov	r4,r21
  8015dc:	08030a00 	call	8030a0 <_fflush_r>
  8015e0:	103fb926 	beq	r2,zero,8014c8 <__alt_mem_epcs_flash_controller_0+0xff7f84c8>
  8015e4:	003f6506 	br	80137c <__alt_mem_epcs_flash_controller_0+0xff7f837c>
  8015e8:	a809883a 	mov	r4,r21
  8015ec:	08024840 	call	802484 <_realloc_r>
  8015f0:	102f883a 	mov	r23,r2
  8015f4:	103fee1e 	bne	r2,zero,8015b0 <__alt_mem_epcs_flash_controller_0+0xff7f85b0>
  8015f8:	81400417 	ldw	r5,16(r16)
  8015fc:	a809883a 	mov	r4,r21
  801600:	08032500 	call	803250 <_free_r>
  801604:	8080030b 	ldhu	r2,12(r16)
  801608:	00ffdfc4 	movi	r3,-129
  80160c:	1884703a 	and	r2,r3,r2
  801610:	00c00304 	movi	r3,12
  801614:	a8c00015 	stw	r3,0(r21)
  801618:	003f5906 	br	801380 <__alt_mem_epcs_flash_controller_0+0xff7f8380>
  80161c:	94c00044 	addi	r19,r18,1
  801620:	02000044 	movi	r8,1
  801624:	003f6006 	br	8013a8 <__alt_mem_epcs_flash_controller_0+0xff7f83a8>
  801628:	00bfffc4 	movi	r2,-1
  80162c:	003f0006 	br	801230 <__alt_mem_epcs_flash_controller_0+0xff7f8230>
  801630:	00800304 	movi	r2,12
  801634:	a8800015 	stw	r2,0(r21)
  801638:	8080030b 	ldhu	r2,12(r16)
  80163c:	003f5006 	br	801380 <__alt_mem_epcs_flash_controller_0+0xff7f8380>

00801640 <_fwalk>:
  801640:	defff704 	addi	sp,sp,-36
  801644:	dd000415 	stw	r20,16(sp)
  801648:	dfc00815 	stw	ra,32(sp)
  80164c:	ddc00715 	stw	r23,28(sp)
  801650:	dd800615 	stw	r22,24(sp)
  801654:	dd400515 	stw	r21,20(sp)
  801658:	dcc00315 	stw	r19,12(sp)
  80165c:	dc800215 	stw	r18,8(sp)
  801660:	dc400115 	stw	r17,4(sp)
  801664:	dc000015 	stw	r16,0(sp)
  801668:	2500b804 	addi	r20,r4,736
  80166c:	a0002326 	beq	r20,zero,8016fc <_fwalk+0xbc>
  801670:	282b883a 	mov	r21,r5
  801674:	002f883a 	mov	r23,zero
  801678:	05800044 	movi	r22,1
  80167c:	04ffffc4 	movi	r19,-1
  801680:	a4400117 	ldw	r17,4(r20)
  801684:	a4800217 	ldw	r18,8(r20)
  801688:	8c7fffc4 	addi	r17,r17,-1
  80168c:	88000d16 	blt	r17,zero,8016c4 <_fwalk+0x84>
  801690:	94000304 	addi	r16,r18,12
  801694:	94800384 	addi	r18,r18,14
  801698:	8080000b 	ldhu	r2,0(r16)
  80169c:	8c7fffc4 	addi	r17,r17,-1
  8016a0:	813ffd04 	addi	r4,r16,-12
  8016a4:	b080042e 	bgeu	r22,r2,8016b8 <_fwalk+0x78>
  8016a8:	9080000f 	ldh	r2,0(r18)
  8016ac:	14c00226 	beq	r2,r19,8016b8 <_fwalk+0x78>
  8016b0:	a83ee83a 	callr	r21
  8016b4:	b8aeb03a 	or	r23,r23,r2
  8016b8:	84001a04 	addi	r16,r16,104
  8016bc:	94801a04 	addi	r18,r18,104
  8016c0:	8cfff51e 	bne	r17,r19,801698 <__alt_mem_epcs_flash_controller_0+0xff7f8698>
  8016c4:	a5000017 	ldw	r20,0(r20)
  8016c8:	a03fed1e 	bne	r20,zero,801680 <__alt_mem_epcs_flash_controller_0+0xff7f8680>
  8016cc:	b805883a 	mov	r2,r23
  8016d0:	dfc00817 	ldw	ra,32(sp)
  8016d4:	ddc00717 	ldw	r23,28(sp)
  8016d8:	dd800617 	ldw	r22,24(sp)
  8016dc:	dd400517 	ldw	r21,20(sp)
  8016e0:	dd000417 	ldw	r20,16(sp)
  8016e4:	dcc00317 	ldw	r19,12(sp)
  8016e8:	dc800217 	ldw	r18,8(sp)
  8016ec:	dc400117 	ldw	r17,4(sp)
  8016f0:	dc000017 	ldw	r16,0(sp)
  8016f4:	dec00904 	addi	sp,sp,36
  8016f8:	f800283a 	ret
  8016fc:	002f883a 	mov	r23,zero
  801700:	003ff206 	br	8016cc <__alt_mem_epcs_flash_controller_0+0xff7f86cc>

00801704 <_fwalk_reent>:
  801704:	defff704 	addi	sp,sp,-36
  801708:	dd000415 	stw	r20,16(sp)
  80170c:	dfc00815 	stw	ra,32(sp)
  801710:	ddc00715 	stw	r23,28(sp)
  801714:	dd800615 	stw	r22,24(sp)
  801718:	dd400515 	stw	r21,20(sp)
  80171c:	dcc00315 	stw	r19,12(sp)
  801720:	dc800215 	stw	r18,8(sp)
  801724:	dc400115 	stw	r17,4(sp)
  801728:	dc000015 	stw	r16,0(sp)
  80172c:	2500b804 	addi	r20,r4,736
  801730:	a0002326 	beq	r20,zero,8017c0 <_fwalk_reent+0xbc>
  801734:	282b883a 	mov	r21,r5
  801738:	2027883a 	mov	r19,r4
  80173c:	002f883a 	mov	r23,zero
  801740:	05800044 	movi	r22,1
  801744:	04bfffc4 	movi	r18,-1
  801748:	a4400117 	ldw	r17,4(r20)
  80174c:	a4000217 	ldw	r16,8(r20)
  801750:	8c7fffc4 	addi	r17,r17,-1
  801754:	88000c16 	blt	r17,zero,801788 <_fwalk_reent+0x84>
  801758:	84000304 	addi	r16,r16,12
  80175c:	8080000b 	ldhu	r2,0(r16)
  801760:	8c7fffc4 	addi	r17,r17,-1
  801764:	817ffd04 	addi	r5,r16,-12
  801768:	b080052e 	bgeu	r22,r2,801780 <_fwalk_reent+0x7c>
  80176c:	8080008f 	ldh	r2,2(r16)
  801770:	9809883a 	mov	r4,r19
  801774:	14800226 	beq	r2,r18,801780 <_fwalk_reent+0x7c>
  801778:	a83ee83a 	callr	r21
  80177c:	b8aeb03a 	or	r23,r23,r2
  801780:	84001a04 	addi	r16,r16,104
  801784:	8cbff51e 	bne	r17,r18,80175c <__alt_mem_epcs_flash_controller_0+0xff7f875c>
  801788:	a5000017 	ldw	r20,0(r20)
  80178c:	a03fee1e 	bne	r20,zero,801748 <__alt_mem_epcs_flash_controller_0+0xff7f8748>
  801790:	b805883a 	mov	r2,r23
  801794:	dfc00817 	ldw	ra,32(sp)
  801798:	ddc00717 	ldw	r23,28(sp)
  80179c:	dd800617 	ldw	r22,24(sp)
  8017a0:	dd400517 	ldw	r21,20(sp)
  8017a4:	dd000417 	ldw	r20,16(sp)
  8017a8:	dcc00317 	ldw	r19,12(sp)
  8017ac:	dc800217 	ldw	r18,8(sp)
  8017b0:	dc400117 	ldw	r17,4(sp)
  8017b4:	dc000017 	ldw	r16,0(sp)
  8017b8:	dec00904 	addi	sp,sp,36
  8017bc:	f800283a 	ret
  8017c0:	002f883a 	mov	r23,zero
  8017c4:	003ff206 	br	801790 <__alt_mem_epcs_flash_controller_0+0xff7f8790>

008017c8 <_malloc_r>:
  8017c8:	defff504 	addi	sp,sp,-44
  8017cc:	dc800315 	stw	r18,12(sp)
  8017d0:	dfc00a15 	stw	ra,40(sp)
  8017d4:	df000915 	stw	fp,36(sp)
  8017d8:	ddc00815 	stw	r23,32(sp)
  8017dc:	dd800715 	stw	r22,28(sp)
  8017e0:	dd400615 	stw	r21,24(sp)
  8017e4:	dd000515 	stw	r20,20(sp)
  8017e8:	dcc00415 	stw	r19,16(sp)
  8017ec:	dc400215 	stw	r17,8(sp)
  8017f0:	dc000115 	stw	r16,4(sp)
  8017f4:	288002c4 	addi	r2,r5,11
  8017f8:	00c00584 	movi	r3,22
  8017fc:	2025883a 	mov	r18,r4
  801800:	18807f2e 	bgeu	r3,r2,801a00 <_malloc_r+0x238>
  801804:	047ffe04 	movi	r17,-8
  801808:	1462703a 	and	r17,r2,r17
  80180c:	8800a316 	blt	r17,zero,801a9c <_malloc_r+0x2d4>
  801810:	8940a236 	bltu	r17,r5,801a9c <_malloc_r+0x2d4>
  801814:	08045180 	call	804518 <__malloc_lock>
  801818:	00807dc4 	movi	r2,503
  80181c:	1441e92e 	bgeu	r2,r17,801fc4 <_malloc_r+0x7fc>
  801820:	8804d27a 	srli	r2,r17,9
  801824:	1000a126 	beq	r2,zero,801aac <_malloc_r+0x2e4>
  801828:	00c00104 	movi	r3,4
  80182c:	18811e36 	bltu	r3,r2,801ca8 <_malloc_r+0x4e0>
  801830:	8804d1ba 	srli	r2,r17,6
  801834:	12000e44 	addi	r8,r2,57
  801838:	11c00e04 	addi	r7,r2,56
  80183c:	4209883a 	add	r4,r8,r8
  801840:	04c02074 	movhi	r19,129
  801844:	2109883a 	add	r4,r4,r4
  801848:	9cc5bc04 	addi	r19,r19,5872
  80184c:	2109883a 	add	r4,r4,r4
  801850:	9909883a 	add	r4,r19,r4
  801854:	24000117 	ldw	r16,4(r4)
  801858:	213ffe04 	addi	r4,r4,-8
  80185c:	24009726 	beq	r4,r16,801abc <_malloc_r+0x2f4>
  801860:	80800117 	ldw	r2,4(r16)
  801864:	01bfff04 	movi	r6,-4
  801868:	014003c4 	movi	r5,15
  80186c:	1184703a 	and	r2,r2,r6
  801870:	1447c83a 	sub	r3,r2,r17
  801874:	28c00716 	blt	r5,r3,801894 <_malloc_r+0xcc>
  801878:	1800920e 	bge	r3,zero,801ac4 <_malloc_r+0x2fc>
  80187c:	84000317 	ldw	r16,12(r16)
  801880:	24008e26 	beq	r4,r16,801abc <_malloc_r+0x2f4>
  801884:	80800117 	ldw	r2,4(r16)
  801888:	1184703a 	and	r2,r2,r6
  80188c:	1447c83a 	sub	r3,r2,r17
  801890:	28fff90e 	bge	r5,r3,801878 <__alt_mem_epcs_flash_controller_0+0xff7f8878>
  801894:	3809883a 	mov	r4,r7
  801898:	01802074 	movhi	r6,129
  80189c:	9c000417 	ldw	r16,16(r19)
  8018a0:	3185bc04 	addi	r6,r6,5872
  8018a4:	32000204 	addi	r8,r6,8
  8018a8:	82013426 	beq	r16,r8,801d7c <_malloc_r+0x5b4>
  8018ac:	80c00117 	ldw	r3,4(r16)
  8018b0:	00bfff04 	movi	r2,-4
  8018b4:	188e703a 	and	r7,r3,r2
  8018b8:	3c45c83a 	sub	r2,r7,r17
  8018bc:	00c003c4 	movi	r3,15
  8018c0:	18811f16 	blt	r3,r2,801d40 <_malloc_r+0x578>
  8018c4:	32000515 	stw	r8,20(r6)
  8018c8:	32000415 	stw	r8,16(r6)
  8018cc:	10007f0e 	bge	r2,zero,801acc <_malloc_r+0x304>
  8018d0:	00807fc4 	movi	r2,511
  8018d4:	11c0fd36 	bltu	r2,r7,801ccc <_malloc_r+0x504>
  8018d8:	3806d0fa 	srli	r3,r7,3
  8018dc:	01c00044 	movi	r7,1
  8018e0:	30800117 	ldw	r2,4(r6)
  8018e4:	19400044 	addi	r5,r3,1
  8018e8:	294b883a 	add	r5,r5,r5
  8018ec:	1807d0ba 	srai	r3,r3,2
  8018f0:	294b883a 	add	r5,r5,r5
  8018f4:	294b883a 	add	r5,r5,r5
  8018f8:	298b883a 	add	r5,r5,r6
  8018fc:	38c6983a 	sll	r3,r7,r3
  801900:	29c00017 	ldw	r7,0(r5)
  801904:	2a7ffe04 	addi	r9,r5,-8
  801908:	1886b03a 	or	r3,r3,r2
  80190c:	82400315 	stw	r9,12(r16)
  801910:	81c00215 	stw	r7,8(r16)
  801914:	30c00115 	stw	r3,4(r6)
  801918:	2c000015 	stw	r16,0(r5)
  80191c:	3c000315 	stw	r16,12(r7)
  801920:	2005d0ba 	srai	r2,r4,2
  801924:	01400044 	movi	r5,1
  801928:	288a983a 	sll	r5,r5,r2
  80192c:	19406f36 	bltu	r3,r5,801aec <_malloc_r+0x324>
  801930:	28c4703a 	and	r2,r5,r3
  801934:	10000a1e 	bne	r2,zero,801960 <_malloc_r+0x198>
  801938:	00bfff04 	movi	r2,-4
  80193c:	294b883a 	add	r5,r5,r5
  801940:	2088703a 	and	r4,r4,r2
  801944:	28c4703a 	and	r2,r5,r3
  801948:	21000104 	addi	r4,r4,4
  80194c:	1000041e 	bne	r2,zero,801960 <_malloc_r+0x198>
  801950:	294b883a 	add	r5,r5,r5
  801954:	28c4703a 	and	r2,r5,r3
  801958:	21000104 	addi	r4,r4,4
  80195c:	103ffc26 	beq	r2,zero,801950 <__alt_mem_epcs_flash_controller_0+0xff7f8950>
  801960:	02bfff04 	movi	r10,-4
  801964:	024003c4 	movi	r9,15
  801968:	21800044 	addi	r6,r4,1
  80196c:	318d883a 	add	r6,r6,r6
  801970:	318d883a 	add	r6,r6,r6
  801974:	318d883a 	add	r6,r6,r6
  801978:	998d883a 	add	r6,r19,r6
  80197c:	333ffe04 	addi	r12,r6,-8
  801980:	2017883a 	mov	r11,r4
  801984:	31800104 	addi	r6,r6,4
  801988:	34000017 	ldw	r16,0(r6)
  80198c:	31fffd04 	addi	r7,r6,-12
  801990:	81c0041e 	bne	r16,r7,8019a4 <_malloc_r+0x1dc>
  801994:	0000fb06 	br	801d84 <_malloc_r+0x5bc>
  801998:	1801030e 	bge	r3,zero,801da8 <_malloc_r+0x5e0>
  80199c:	84000317 	ldw	r16,12(r16)
  8019a0:	81c0f826 	beq	r16,r7,801d84 <_malloc_r+0x5bc>
  8019a4:	80800117 	ldw	r2,4(r16)
  8019a8:	1284703a 	and	r2,r2,r10
  8019ac:	1447c83a 	sub	r3,r2,r17
  8019b0:	48fff90e 	bge	r9,r3,801998 <__alt_mem_epcs_flash_controller_0+0xff7f8998>
  8019b4:	80800317 	ldw	r2,12(r16)
  8019b8:	81000217 	ldw	r4,8(r16)
  8019bc:	89400054 	ori	r5,r17,1
  8019c0:	81400115 	stw	r5,4(r16)
  8019c4:	20800315 	stw	r2,12(r4)
  8019c8:	11000215 	stw	r4,8(r2)
  8019cc:	8463883a 	add	r17,r16,r17
  8019d0:	9c400515 	stw	r17,20(r19)
  8019d4:	9c400415 	stw	r17,16(r19)
  8019d8:	18800054 	ori	r2,r3,1
  8019dc:	88800115 	stw	r2,4(r17)
  8019e0:	8a000315 	stw	r8,12(r17)
  8019e4:	8a000215 	stw	r8,8(r17)
  8019e8:	88e3883a 	add	r17,r17,r3
  8019ec:	88c00015 	stw	r3,0(r17)
  8019f0:	9009883a 	mov	r4,r18
  8019f4:	08046380 	call	804638 <__malloc_unlock>
  8019f8:	80800204 	addi	r2,r16,8
  8019fc:	00001b06 	br	801a6c <_malloc_r+0x2a4>
  801a00:	04400404 	movi	r17,16
  801a04:	89402536 	bltu	r17,r5,801a9c <_malloc_r+0x2d4>
  801a08:	08045180 	call	804518 <__malloc_lock>
  801a0c:	00800184 	movi	r2,6
  801a10:	01000084 	movi	r4,2
  801a14:	04c02074 	movhi	r19,129
  801a18:	1085883a 	add	r2,r2,r2
  801a1c:	9cc5bc04 	addi	r19,r19,5872
  801a20:	1085883a 	add	r2,r2,r2
  801a24:	9885883a 	add	r2,r19,r2
  801a28:	14000117 	ldw	r16,4(r2)
  801a2c:	10fffe04 	addi	r3,r2,-8
  801a30:	80c0d926 	beq	r16,r3,801d98 <_malloc_r+0x5d0>
  801a34:	80c00117 	ldw	r3,4(r16)
  801a38:	81000317 	ldw	r4,12(r16)
  801a3c:	00bfff04 	movi	r2,-4
  801a40:	1884703a 	and	r2,r3,r2
  801a44:	81400217 	ldw	r5,8(r16)
  801a48:	8085883a 	add	r2,r16,r2
  801a4c:	10c00117 	ldw	r3,4(r2)
  801a50:	29000315 	stw	r4,12(r5)
  801a54:	21400215 	stw	r5,8(r4)
  801a58:	18c00054 	ori	r3,r3,1
  801a5c:	10c00115 	stw	r3,4(r2)
  801a60:	9009883a 	mov	r4,r18
  801a64:	08046380 	call	804638 <__malloc_unlock>
  801a68:	80800204 	addi	r2,r16,8
  801a6c:	dfc00a17 	ldw	ra,40(sp)
  801a70:	df000917 	ldw	fp,36(sp)
  801a74:	ddc00817 	ldw	r23,32(sp)
  801a78:	dd800717 	ldw	r22,28(sp)
  801a7c:	dd400617 	ldw	r21,24(sp)
  801a80:	dd000517 	ldw	r20,20(sp)
  801a84:	dcc00417 	ldw	r19,16(sp)
  801a88:	dc800317 	ldw	r18,12(sp)
  801a8c:	dc400217 	ldw	r17,8(sp)
  801a90:	dc000117 	ldw	r16,4(sp)
  801a94:	dec00b04 	addi	sp,sp,44
  801a98:	f800283a 	ret
  801a9c:	00800304 	movi	r2,12
  801aa0:	90800015 	stw	r2,0(r18)
  801aa4:	0005883a 	mov	r2,zero
  801aa8:	003ff006 	br	801a6c <__alt_mem_epcs_flash_controller_0+0xff7f8a6c>
  801aac:	01002004 	movi	r4,128
  801ab0:	02001004 	movi	r8,64
  801ab4:	01c00fc4 	movi	r7,63
  801ab8:	003f6106 	br	801840 <__alt_mem_epcs_flash_controller_0+0xff7f8840>
  801abc:	4009883a 	mov	r4,r8
  801ac0:	003f7506 	br	801898 <__alt_mem_epcs_flash_controller_0+0xff7f8898>
  801ac4:	81000317 	ldw	r4,12(r16)
  801ac8:	003fde06 	br	801a44 <__alt_mem_epcs_flash_controller_0+0xff7f8a44>
  801acc:	81c5883a 	add	r2,r16,r7
  801ad0:	11400117 	ldw	r5,4(r2)
  801ad4:	9009883a 	mov	r4,r18
  801ad8:	29400054 	ori	r5,r5,1
  801adc:	11400115 	stw	r5,4(r2)
  801ae0:	08046380 	call	804638 <__malloc_unlock>
  801ae4:	80800204 	addi	r2,r16,8
  801ae8:	003fe006 	br	801a6c <__alt_mem_epcs_flash_controller_0+0xff7f8a6c>
  801aec:	9c000217 	ldw	r16,8(r19)
  801af0:	00bfff04 	movi	r2,-4
  801af4:	85800117 	ldw	r22,4(r16)
  801af8:	b0ac703a 	and	r22,r22,r2
  801afc:	b4400336 	bltu	r22,r17,801b0c <_malloc_r+0x344>
  801b00:	b445c83a 	sub	r2,r22,r17
  801b04:	00c003c4 	movi	r3,15
  801b08:	18805d16 	blt	r3,r2,801c80 <_malloc_r+0x4b8>
  801b0c:	05c02074 	movhi	r23,129
  801b10:	00802074 	movhi	r2,129
  801b14:	108c6f04 	addi	r2,r2,12732
  801b18:	bdcc2004 	addi	r23,r23,12416
  801b1c:	15400017 	ldw	r21,0(r2)
  801b20:	b8c00017 	ldw	r3,0(r23)
  801b24:	00bfffc4 	movi	r2,-1
  801b28:	858d883a 	add	r6,r16,r22
  801b2c:	8d6b883a 	add	r21,r17,r21
  801b30:	1880ea26 	beq	r3,r2,801edc <_malloc_r+0x714>
  801b34:	ad4403c4 	addi	r21,r21,4111
  801b38:	00bc0004 	movi	r2,-4096
  801b3c:	a8aa703a 	and	r21,r21,r2
  801b40:	a80b883a 	mov	r5,r21
  801b44:	9009883a 	mov	r4,r18
  801b48:	d9800015 	stw	r6,0(sp)
  801b4c:	08029e80 	call	8029e8 <_sbrk_r>
  801b50:	1029883a 	mov	r20,r2
  801b54:	00bfffc4 	movi	r2,-1
  801b58:	d9800017 	ldw	r6,0(sp)
  801b5c:	a080e826 	beq	r20,r2,801f00 <_malloc_r+0x738>
  801b60:	a180a636 	bltu	r20,r6,801dfc <_malloc_r+0x634>
  801b64:	07002074 	movhi	fp,129
  801b68:	e70c9104 	addi	fp,fp,12868
  801b6c:	e0800017 	ldw	r2,0(fp)
  801b70:	a887883a 	add	r3,r21,r2
  801b74:	e0c00015 	stw	r3,0(fp)
  801b78:	3500e626 	beq	r6,r20,801f14 <_malloc_r+0x74c>
  801b7c:	b9000017 	ldw	r4,0(r23)
  801b80:	00bfffc4 	movi	r2,-1
  801b84:	2080ee26 	beq	r4,r2,801f40 <_malloc_r+0x778>
  801b88:	a185c83a 	sub	r2,r20,r6
  801b8c:	10c5883a 	add	r2,r2,r3
  801b90:	e0800015 	stw	r2,0(fp)
  801b94:	a0c001cc 	andi	r3,r20,7
  801b98:	1800bc26 	beq	r3,zero,801e8c <_malloc_r+0x6c4>
  801b9c:	a0e9c83a 	sub	r20,r20,r3
  801ba0:	00840204 	movi	r2,4104
  801ba4:	a5000204 	addi	r20,r20,8
  801ba8:	10c7c83a 	sub	r3,r2,r3
  801bac:	a545883a 	add	r2,r20,r21
  801bb0:	1083ffcc 	andi	r2,r2,4095
  801bb4:	18abc83a 	sub	r21,r3,r2
  801bb8:	a80b883a 	mov	r5,r21
  801bbc:	9009883a 	mov	r4,r18
  801bc0:	08029e80 	call	8029e8 <_sbrk_r>
  801bc4:	00ffffc4 	movi	r3,-1
  801bc8:	10c0e126 	beq	r2,r3,801f50 <_malloc_r+0x788>
  801bcc:	1505c83a 	sub	r2,r2,r20
  801bd0:	1545883a 	add	r2,r2,r21
  801bd4:	10800054 	ori	r2,r2,1
  801bd8:	e0c00017 	ldw	r3,0(fp)
  801bdc:	9d000215 	stw	r20,8(r19)
  801be0:	a0800115 	stw	r2,4(r20)
  801be4:	a8c7883a 	add	r3,r21,r3
  801be8:	e0c00015 	stw	r3,0(fp)
  801bec:	84c00e26 	beq	r16,r19,801c28 <_malloc_r+0x460>
  801bf0:	018003c4 	movi	r6,15
  801bf4:	3580a72e 	bgeu	r6,r22,801e94 <_malloc_r+0x6cc>
  801bf8:	81400117 	ldw	r5,4(r16)
  801bfc:	013ffe04 	movi	r4,-8
  801c00:	b0bffd04 	addi	r2,r22,-12
  801c04:	1104703a 	and	r2,r2,r4
  801c08:	2900004c 	andi	r4,r5,1
  801c0c:	2088b03a 	or	r4,r4,r2
  801c10:	81000115 	stw	r4,4(r16)
  801c14:	01400144 	movi	r5,5
  801c18:	8089883a 	add	r4,r16,r2
  801c1c:	21400115 	stw	r5,4(r4)
  801c20:	21400215 	stw	r5,8(r4)
  801c24:	3080cd36 	bltu	r6,r2,801f5c <_malloc_r+0x794>
  801c28:	00802074 	movhi	r2,129
  801c2c:	108c6e04 	addi	r2,r2,12728
  801c30:	11000017 	ldw	r4,0(r2)
  801c34:	20c0012e 	bgeu	r4,r3,801c3c <_malloc_r+0x474>
  801c38:	10c00015 	stw	r3,0(r2)
  801c3c:	00802074 	movhi	r2,129
  801c40:	108c6d04 	addi	r2,r2,12724
  801c44:	11000017 	ldw	r4,0(r2)
  801c48:	9c000217 	ldw	r16,8(r19)
  801c4c:	20c0012e 	bgeu	r4,r3,801c54 <_malloc_r+0x48c>
  801c50:	10c00015 	stw	r3,0(r2)
  801c54:	80c00117 	ldw	r3,4(r16)
  801c58:	00bfff04 	movi	r2,-4
  801c5c:	1886703a 	and	r3,r3,r2
  801c60:	1c45c83a 	sub	r2,r3,r17
  801c64:	1c400236 	bltu	r3,r17,801c70 <_malloc_r+0x4a8>
  801c68:	00c003c4 	movi	r3,15
  801c6c:	18800416 	blt	r3,r2,801c80 <_malloc_r+0x4b8>
  801c70:	9009883a 	mov	r4,r18
  801c74:	08046380 	call	804638 <__malloc_unlock>
  801c78:	0005883a 	mov	r2,zero
  801c7c:	003f7b06 	br	801a6c <__alt_mem_epcs_flash_controller_0+0xff7f8a6c>
  801c80:	88c00054 	ori	r3,r17,1
  801c84:	80c00115 	stw	r3,4(r16)
  801c88:	8463883a 	add	r17,r16,r17
  801c8c:	10800054 	ori	r2,r2,1
  801c90:	9c400215 	stw	r17,8(r19)
  801c94:	88800115 	stw	r2,4(r17)
  801c98:	9009883a 	mov	r4,r18
  801c9c:	08046380 	call	804638 <__malloc_unlock>
  801ca0:	80800204 	addi	r2,r16,8
  801ca4:	003f7106 	br	801a6c <__alt_mem_epcs_flash_controller_0+0xff7f8a6c>
  801ca8:	00c00504 	movi	r3,20
  801cac:	18804a2e 	bgeu	r3,r2,801dd8 <_malloc_r+0x610>
  801cb0:	00c01504 	movi	r3,84
  801cb4:	18806e36 	bltu	r3,r2,801e70 <_malloc_r+0x6a8>
  801cb8:	8804d33a 	srli	r2,r17,12
  801cbc:	12001bc4 	addi	r8,r2,111
  801cc0:	11c01b84 	addi	r7,r2,110
  801cc4:	4209883a 	add	r4,r8,r8
  801cc8:	003edd06 	br	801840 <__alt_mem_epcs_flash_controller_0+0xff7f8840>
  801ccc:	3804d27a 	srli	r2,r7,9
  801cd0:	00c00104 	movi	r3,4
  801cd4:	1880442e 	bgeu	r3,r2,801de8 <_malloc_r+0x620>
  801cd8:	00c00504 	movi	r3,20
  801cdc:	18808136 	bltu	r3,r2,801ee4 <_malloc_r+0x71c>
  801ce0:	11401704 	addi	r5,r2,92
  801ce4:	10c016c4 	addi	r3,r2,91
  801ce8:	294b883a 	add	r5,r5,r5
  801cec:	294b883a 	add	r5,r5,r5
  801cf0:	294b883a 	add	r5,r5,r5
  801cf4:	994b883a 	add	r5,r19,r5
  801cf8:	28800017 	ldw	r2,0(r5)
  801cfc:	01802074 	movhi	r6,129
  801d00:	297ffe04 	addi	r5,r5,-8
  801d04:	3185bc04 	addi	r6,r6,5872
  801d08:	28806526 	beq	r5,r2,801ea0 <_malloc_r+0x6d8>
  801d0c:	01bfff04 	movi	r6,-4
  801d10:	10c00117 	ldw	r3,4(r2)
  801d14:	1986703a 	and	r3,r3,r6
  801d18:	38c0022e 	bgeu	r7,r3,801d24 <_malloc_r+0x55c>
  801d1c:	10800217 	ldw	r2,8(r2)
  801d20:	28bffb1e 	bne	r5,r2,801d10 <__alt_mem_epcs_flash_controller_0+0xff7f8d10>
  801d24:	11400317 	ldw	r5,12(r2)
  801d28:	98c00117 	ldw	r3,4(r19)
  801d2c:	81400315 	stw	r5,12(r16)
  801d30:	80800215 	stw	r2,8(r16)
  801d34:	2c000215 	stw	r16,8(r5)
  801d38:	14000315 	stw	r16,12(r2)
  801d3c:	003ef806 	br	801920 <__alt_mem_epcs_flash_controller_0+0xff7f8920>
  801d40:	88c00054 	ori	r3,r17,1
  801d44:	80c00115 	stw	r3,4(r16)
  801d48:	8463883a 	add	r17,r16,r17
  801d4c:	34400515 	stw	r17,20(r6)
  801d50:	34400415 	stw	r17,16(r6)
  801d54:	10c00054 	ori	r3,r2,1
  801d58:	8a000315 	stw	r8,12(r17)
  801d5c:	8a000215 	stw	r8,8(r17)
  801d60:	88c00115 	stw	r3,4(r17)
  801d64:	88a3883a 	add	r17,r17,r2
  801d68:	88800015 	stw	r2,0(r17)
  801d6c:	9009883a 	mov	r4,r18
  801d70:	08046380 	call	804638 <__malloc_unlock>
  801d74:	80800204 	addi	r2,r16,8
  801d78:	003f3c06 	br	801a6c <__alt_mem_epcs_flash_controller_0+0xff7f8a6c>
  801d7c:	30c00117 	ldw	r3,4(r6)
  801d80:	003ee706 	br	801920 <__alt_mem_epcs_flash_controller_0+0xff7f8920>
  801d84:	5ac00044 	addi	r11,r11,1
  801d88:	588000cc 	andi	r2,r11,3
  801d8c:	31800204 	addi	r6,r6,8
  801d90:	103efd1e 	bne	r2,zero,801988 <__alt_mem_epcs_flash_controller_0+0xff7f8988>
  801d94:	00002406 	br	801e28 <_malloc_r+0x660>
  801d98:	14000317 	ldw	r16,12(r2)
  801d9c:	143f251e 	bne	r2,r16,801a34 <__alt_mem_epcs_flash_controller_0+0xff7f8a34>
  801da0:	21000084 	addi	r4,r4,2
  801da4:	003ebc06 	br	801898 <__alt_mem_epcs_flash_controller_0+0xff7f8898>
  801da8:	8085883a 	add	r2,r16,r2
  801dac:	10c00117 	ldw	r3,4(r2)
  801db0:	81000317 	ldw	r4,12(r16)
  801db4:	81400217 	ldw	r5,8(r16)
  801db8:	18c00054 	ori	r3,r3,1
  801dbc:	10c00115 	stw	r3,4(r2)
  801dc0:	29000315 	stw	r4,12(r5)
  801dc4:	21400215 	stw	r5,8(r4)
  801dc8:	9009883a 	mov	r4,r18
  801dcc:	08046380 	call	804638 <__malloc_unlock>
  801dd0:	80800204 	addi	r2,r16,8
  801dd4:	003f2506 	br	801a6c <__alt_mem_epcs_flash_controller_0+0xff7f8a6c>
  801dd8:	12001704 	addi	r8,r2,92
  801ddc:	11c016c4 	addi	r7,r2,91
  801de0:	4209883a 	add	r4,r8,r8
  801de4:	003e9606 	br	801840 <__alt_mem_epcs_flash_controller_0+0xff7f8840>
  801de8:	3804d1ba 	srli	r2,r7,6
  801dec:	11400e44 	addi	r5,r2,57
  801df0:	10c00e04 	addi	r3,r2,56
  801df4:	294b883a 	add	r5,r5,r5
  801df8:	003fbc06 	br	801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  801dfc:	84ff5926 	beq	r16,r19,801b64 <__alt_mem_epcs_flash_controller_0+0xff7f8b64>
  801e00:	00802074 	movhi	r2,129
  801e04:	1085bc04 	addi	r2,r2,5872
  801e08:	14000217 	ldw	r16,8(r2)
  801e0c:	00bfff04 	movi	r2,-4
  801e10:	80c00117 	ldw	r3,4(r16)
  801e14:	1886703a 	and	r3,r3,r2
  801e18:	003f9106 	br	801c60 <__alt_mem_epcs_flash_controller_0+0xff7f8c60>
  801e1c:	60800217 	ldw	r2,8(r12)
  801e20:	213fffc4 	addi	r4,r4,-1
  801e24:	1300651e 	bne	r2,r12,801fbc <_malloc_r+0x7f4>
  801e28:	208000cc 	andi	r2,r4,3
  801e2c:	633ffe04 	addi	r12,r12,-8
  801e30:	103ffa1e 	bne	r2,zero,801e1c <__alt_mem_epcs_flash_controller_0+0xff7f8e1c>
  801e34:	98800117 	ldw	r2,4(r19)
  801e38:	0146303a 	nor	r3,zero,r5
  801e3c:	1884703a 	and	r2,r3,r2
  801e40:	98800115 	stw	r2,4(r19)
  801e44:	294b883a 	add	r5,r5,r5
  801e48:	117f2836 	bltu	r2,r5,801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  801e4c:	283f2726 	beq	r5,zero,801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  801e50:	2886703a 	and	r3,r5,r2
  801e54:	5809883a 	mov	r4,r11
  801e58:	183ec31e 	bne	r3,zero,801968 <__alt_mem_epcs_flash_controller_0+0xff7f8968>
  801e5c:	294b883a 	add	r5,r5,r5
  801e60:	2886703a 	and	r3,r5,r2
  801e64:	21000104 	addi	r4,r4,4
  801e68:	183ffc26 	beq	r3,zero,801e5c <__alt_mem_epcs_flash_controller_0+0xff7f8e5c>
  801e6c:	003ebe06 	br	801968 <__alt_mem_epcs_flash_controller_0+0xff7f8968>
  801e70:	00c05504 	movi	r3,340
  801e74:	18801236 	bltu	r3,r2,801ec0 <_malloc_r+0x6f8>
  801e78:	8804d3fa 	srli	r2,r17,15
  801e7c:	12001e04 	addi	r8,r2,120
  801e80:	11c01dc4 	addi	r7,r2,119
  801e84:	4209883a 	add	r4,r8,r8
  801e88:	003e6d06 	br	801840 <__alt_mem_epcs_flash_controller_0+0xff7f8840>
  801e8c:	00c40004 	movi	r3,4096
  801e90:	003f4606 	br	801bac <__alt_mem_epcs_flash_controller_0+0xff7f8bac>
  801e94:	00800044 	movi	r2,1
  801e98:	a0800115 	stw	r2,4(r20)
  801e9c:	003f7406 	br	801c70 <__alt_mem_epcs_flash_controller_0+0xff7f8c70>
  801ea0:	1805d0ba 	srai	r2,r3,2
  801ea4:	01c00044 	movi	r7,1
  801ea8:	30c00117 	ldw	r3,4(r6)
  801eac:	388e983a 	sll	r7,r7,r2
  801eb0:	2805883a 	mov	r2,r5
  801eb4:	38c6b03a 	or	r3,r7,r3
  801eb8:	30c00115 	stw	r3,4(r6)
  801ebc:	003f9b06 	br	801d2c <__alt_mem_epcs_flash_controller_0+0xff7f8d2c>
  801ec0:	00c15504 	movi	r3,1364
  801ec4:	18801a36 	bltu	r3,r2,801f30 <_malloc_r+0x768>
  801ec8:	8804d4ba 	srli	r2,r17,18
  801ecc:	12001f44 	addi	r8,r2,125
  801ed0:	11c01f04 	addi	r7,r2,124
  801ed4:	4209883a 	add	r4,r8,r8
  801ed8:	003e5906 	br	801840 <__alt_mem_epcs_flash_controller_0+0xff7f8840>
  801edc:	ad400404 	addi	r21,r21,16
  801ee0:	003f1706 	br	801b40 <__alt_mem_epcs_flash_controller_0+0xff7f8b40>
  801ee4:	00c01504 	movi	r3,84
  801ee8:	18802336 	bltu	r3,r2,801f78 <_malloc_r+0x7b0>
  801eec:	3804d33a 	srli	r2,r7,12
  801ef0:	11401bc4 	addi	r5,r2,111
  801ef4:	10c01b84 	addi	r3,r2,110
  801ef8:	294b883a 	add	r5,r5,r5
  801efc:	003f7b06 	br	801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  801f00:	9c000217 	ldw	r16,8(r19)
  801f04:	00bfff04 	movi	r2,-4
  801f08:	80c00117 	ldw	r3,4(r16)
  801f0c:	1886703a 	and	r3,r3,r2
  801f10:	003f5306 	br	801c60 <__alt_mem_epcs_flash_controller_0+0xff7f8c60>
  801f14:	3083ffcc 	andi	r2,r6,4095
  801f18:	103f181e 	bne	r2,zero,801b7c <__alt_mem_epcs_flash_controller_0+0xff7f8b7c>
  801f1c:	99000217 	ldw	r4,8(r19)
  801f20:	b545883a 	add	r2,r22,r21
  801f24:	10800054 	ori	r2,r2,1
  801f28:	20800115 	stw	r2,4(r4)
  801f2c:	003f3e06 	br	801c28 <__alt_mem_epcs_flash_controller_0+0xff7f8c28>
  801f30:	01003f84 	movi	r4,254
  801f34:	02001fc4 	movi	r8,127
  801f38:	01c01f84 	movi	r7,126
  801f3c:	003e4006 	br	801840 <__alt_mem_epcs_flash_controller_0+0xff7f8840>
  801f40:	00802074 	movhi	r2,129
  801f44:	108c2004 	addi	r2,r2,12416
  801f48:	15000015 	stw	r20,0(r2)
  801f4c:	003f1106 	br	801b94 <__alt_mem_epcs_flash_controller_0+0xff7f8b94>
  801f50:	00800044 	movi	r2,1
  801f54:	002b883a 	mov	r21,zero
  801f58:	003f1f06 	br	801bd8 <__alt_mem_epcs_flash_controller_0+0xff7f8bd8>
  801f5c:	81400204 	addi	r5,r16,8
  801f60:	9009883a 	mov	r4,r18
  801f64:	08032500 	call	803250 <_free_r>
  801f68:	00802074 	movhi	r2,129
  801f6c:	108c9104 	addi	r2,r2,12868
  801f70:	10c00017 	ldw	r3,0(r2)
  801f74:	003f2c06 	br	801c28 <__alt_mem_epcs_flash_controller_0+0xff7f8c28>
  801f78:	00c05504 	movi	r3,340
  801f7c:	18800536 	bltu	r3,r2,801f94 <_malloc_r+0x7cc>
  801f80:	3804d3fa 	srli	r2,r7,15
  801f84:	11401e04 	addi	r5,r2,120
  801f88:	10c01dc4 	addi	r3,r2,119
  801f8c:	294b883a 	add	r5,r5,r5
  801f90:	003f5606 	br	801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  801f94:	00c15504 	movi	r3,1364
  801f98:	18800536 	bltu	r3,r2,801fb0 <_malloc_r+0x7e8>
  801f9c:	3804d4ba 	srli	r2,r7,18
  801fa0:	11401f44 	addi	r5,r2,125
  801fa4:	10c01f04 	addi	r3,r2,124
  801fa8:	294b883a 	add	r5,r5,r5
  801fac:	003f4f06 	br	801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  801fb0:	01403f84 	movi	r5,254
  801fb4:	00c01f84 	movi	r3,126
  801fb8:	003f4c06 	br	801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  801fbc:	98800117 	ldw	r2,4(r19)
  801fc0:	003fa006 	br	801e44 <__alt_mem_epcs_flash_controller_0+0xff7f8e44>
  801fc4:	8808d0fa 	srli	r4,r17,3
  801fc8:	20800044 	addi	r2,r4,1
  801fcc:	1085883a 	add	r2,r2,r2
  801fd0:	003e9006 	br	801a14 <__alt_mem_epcs_flash_controller_0+0xff7f8a14>

00801fd4 <memchr>:
  801fd4:	208000cc 	andi	r2,r4,3
  801fd8:	280f883a 	mov	r7,r5
  801fdc:	10003426 	beq	r2,zero,8020b0 <memchr+0xdc>
  801fe0:	30bfffc4 	addi	r2,r6,-1
  801fe4:	30001a26 	beq	r6,zero,802050 <memchr+0x7c>
  801fe8:	20c00003 	ldbu	r3,0(r4)
  801fec:	29803fcc 	andi	r6,r5,255
  801ff0:	30c0051e 	bne	r6,r3,802008 <memchr+0x34>
  801ff4:	00001806 	br	802058 <memchr+0x84>
  801ff8:	10001526 	beq	r2,zero,802050 <memchr+0x7c>
  801ffc:	20c00003 	ldbu	r3,0(r4)
  802000:	10bfffc4 	addi	r2,r2,-1
  802004:	30c01426 	beq	r6,r3,802058 <memchr+0x84>
  802008:	21000044 	addi	r4,r4,1
  80200c:	20c000cc 	andi	r3,r4,3
  802010:	183ff91e 	bne	r3,zero,801ff8 <__alt_mem_epcs_flash_controller_0+0xff7f8ff8>
  802014:	020000c4 	movi	r8,3
  802018:	40801136 	bltu	r8,r2,802060 <memchr+0x8c>
  80201c:	10000c26 	beq	r2,zero,802050 <memchr+0x7c>
  802020:	20c00003 	ldbu	r3,0(r4)
  802024:	29403fcc 	andi	r5,r5,255
  802028:	28c00b26 	beq	r5,r3,802058 <memchr+0x84>
  80202c:	20c00044 	addi	r3,r4,1
  802030:	39803fcc 	andi	r6,r7,255
  802034:	2089883a 	add	r4,r4,r2
  802038:	00000306 	br	802048 <memchr+0x74>
  80203c:	18c00044 	addi	r3,r3,1
  802040:	197fffc3 	ldbu	r5,-1(r3)
  802044:	31400526 	beq	r6,r5,80205c <memchr+0x88>
  802048:	1805883a 	mov	r2,r3
  80204c:	20fffb1e 	bne	r4,r3,80203c <__alt_mem_epcs_flash_controller_0+0xff7f903c>
  802050:	0005883a 	mov	r2,zero
  802054:	f800283a 	ret
  802058:	2005883a 	mov	r2,r4
  80205c:	f800283a 	ret
  802060:	28c03fcc 	andi	r3,r5,255
  802064:	1812923a 	slli	r9,r3,8
  802068:	02ffbff4 	movhi	r11,65279
  80206c:	02a02074 	movhi	r10,32897
  802070:	48d2b03a 	or	r9,r9,r3
  802074:	4806943a 	slli	r3,r9,16
  802078:	5affbfc4 	addi	r11,r11,-257
  80207c:	52a02004 	addi	r10,r10,-32640
  802080:	48d2b03a 	or	r9,r9,r3
  802084:	20c00017 	ldw	r3,0(r4)
  802088:	48c6f03a 	xor	r3,r9,r3
  80208c:	1acd883a 	add	r6,r3,r11
  802090:	00c6303a 	nor	r3,zero,r3
  802094:	30c6703a 	and	r3,r6,r3
  802098:	1a86703a 	and	r3,r3,r10
  80209c:	183fe01e 	bne	r3,zero,802020 <__alt_mem_epcs_flash_controller_0+0xff7f9020>
  8020a0:	10bfff04 	addi	r2,r2,-4
  8020a4:	21000104 	addi	r4,r4,4
  8020a8:	40bff636 	bltu	r8,r2,802084 <__alt_mem_epcs_flash_controller_0+0xff7f9084>
  8020ac:	003fdb06 	br	80201c <__alt_mem_epcs_flash_controller_0+0xff7f901c>
  8020b0:	3005883a 	mov	r2,r6
  8020b4:	003fd706 	br	802014 <__alt_mem_epcs_flash_controller_0+0xff7f9014>

008020b8 <memcpy>:
  8020b8:	defffd04 	addi	sp,sp,-12
  8020bc:	dfc00215 	stw	ra,8(sp)
  8020c0:	dc400115 	stw	r17,4(sp)
  8020c4:	dc000015 	stw	r16,0(sp)
  8020c8:	00c003c4 	movi	r3,15
  8020cc:	2005883a 	mov	r2,r4
  8020d0:	1980452e 	bgeu	r3,r6,8021e8 <memcpy+0x130>
  8020d4:	2906b03a 	or	r3,r5,r4
  8020d8:	18c000cc 	andi	r3,r3,3
  8020dc:	1800441e 	bne	r3,zero,8021f0 <memcpy+0x138>
  8020e0:	347ffc04 	addi	r17,r6,-16
  8020e4:	8822d13a 	srli	r17,r17,4
  8020e8:	28c00104 	addi	r3,r5,4
  8020ec:	23400104 	addi	r13,r4,4
  8020f0:	8820913a 	slli	r16,r17,4
  8020f4:	2b000204 	addi	r12,r5,8
  8020f8:	22c00204 	addi	r11,r4,8
  8020fc:	84000504 	addi	r16,r16,20
  802100:	2a800304 	addi	r10,r5,12
  802104:	22400304 	addi	r9,r4,12
  802108:	2c21883a 	add	r16,r5,r16
  80210c:	2811883a 	mov	r8,r5
  802110:	200f883a 	mov	r7,r4
  802114:	41000017 	ldw	r4,0(r8)
  802118:	1fc00017 	ldw	ra,0(r3)
  80211c:	63c00017 	ldw	r15,0(r12)
  802120:	39000015 	stw	r4,0(r7)
  802124:	53800017 	ldw	r14,0(r10)
  802128:	6fc00015 	stw	ra,0(r13)
  80212c:	5bc00015 	stw	r15,0(r11)
  802130:	4b800015 	stw	r14,0(r9)
  802134:	18c00404 	addi	r3,r3,16
  802138:	39c00404 	addi	r7,r7,16
  80213c:	42000404 	addi	r8,r8,16
  802140:	6b400404 	addi	r13,r13,16
  802144:	63000404 	addi	r12,r12,16
  802148:	5ac00404 	addi	r11,r11,16
  80214c:	52800404 	addi	r10,r10,16
  802150:	4a400404 	addi	r9,r9,16
  802154:	1c3fef1e 	bne	r3,r16,802114 <__alt_mem_epcs_flash_controller_0+0xff7f9114>
  802158:	89c00044 	addi	r7,r17,1
  80215c:	380e913a 	slli	r7,r7,4
  802160:	310003cc 	andi	r4,r6,15
  802164:	02c000c4 	movi	r11,3
  802168:	11c7883a 	add	r3,r2,r7
  80216c:	29cb883a 	add	r5,r5,r7
  802170:	5900212e 	bgeu	r11,r4,8021f8 <memcpy+0x140>
  802174:	1813883a 	mov	r9,r3
  802178:	2811883a 	mov	r8,r5
  80217c:	200f883a 	mov	r7,r4
  802180:	42800017 	ldw	r10,0(r8)
  802184:	4a400104 	addi	r9,r9,4
  802188:	39ffff04 	addi	r7,r7,-4
  80218c:	4abfff15 	stw	r10,-4(r9)
  802190:	42000104 	addi	r8,r8,4
  802194:	59fffa36 	bltu	r11,r7,802180 <__alt_mem_epcs_flash_controller_0+0xff7f9180>
  802198:	213fff04 	addi	r4,r4,-4
  80219c:	2008d0ba 	srli	r4,r4,2
  8021a0:	318000cc 	andi	r6,r6,3
  8021a4:	21000044 	addi	r4,r4,1
  8021a8:	2109883a 	add	r4,r4,r4
  8021ac:	2109883a 	add	r4,r4,r4
  8021b0:	1907883a 	add	r3,r3,r4
  8021b4:	290b883a 	add	r5,r5,r4
  8021b8:	30000626 	beq	r6,zero,8021d4 <memcpy+0x11c>
  8021bc:	198d883a 	add	r6,r3,r6
  8021c0:	29c00003 	ldbu	r7,0(r5)
  8021c4:	18c00044 	addi	r3,r3,1
  8021c8:	29400044 	addi	r5,r5,1
  8021cc:	19ffffc5 	stb	r7,-1(r3)
  8021d0:	19bffb1e 	bne	r3,r6,8021c0 <__alt_mem_epcs_flash_controller_0+0xff7f91c0>
  8021d4:	dfc00217 	ldw	ra,8(sp)
  8021d8:	dc400117 	ldw	r17,4(sp)
  8021dc:	dc000017 	ldw	r16,0(sp)
  8021e0:	dec00304 	addi	sp,sp,12
  8021e4:	f800283a 	ret
  8021e8:	2007883a 	mov	r3,r4
  8021ec:	003ff206 	br	8021b8 <__alt_mem_epcs_flash_controller_0+0xff7f91b8>
  8021f0:	2007883a 	mov	r3,r4
  8021f4:	003ff106 	br	8021bc <__alt_mem_epcs_flash_controller_0+0xff7f91bc>
  8021f8:	200d883a 	mov	r6,r4
  8021fc:	003fee06 	br	8021b8 <__alt_mem_epcs_flash_controller_0+0xff7f91b8>

00802200 <memmove>:
  802200:	2005883a 	mov	r2,r4
  802204:	29000b2e 	bgeu	r5,r4,802234 <memmove+0x34>
  802208:	298f883a 	add	r7,r5,r6
  80220c:	21c0092e 	bgeu	r4,r7,802234 <memmove+0x34>
  802210:	2187883a 	add	r3,r4,r6
  802214:	198bc83a 	sub	r5,r3,r6
  802218:	30004826 	beq	r6,zero,80233c <memmove+0x13c>
  80221c:	39ffffc4 	addi	r7,r7,-1
  802220:	39000003 	ldbu	r4,0(r7)
  802224:	18ffffc4 	addi	r3,r3,-1
  802228:	19000005 	stb	r4,0(r3)
  80222c:	28fffb1e 	bne	r5,r3,80221c <__alt_mem_epcs_flash_controller_0+0xff7f921c>
  802230:	f800283a 	ret
  802234:	00c003c4 	movi	r3,15
  802238:	1980412e 	bgeu	r3,r6,802340 <memmove+0x140>
  80223c:	2886b03a 	or	r3,r5,r2
  802240:	18c000cc 	andi	r3,r3,3
  802244:	1800401e 	bne	r3,zero,802348 <memmove+0x148>
  802248:	33fffc04 	addi	r15,r6,-16
  80224c:	781ed13a 	srli	r15,r15,4
  802250:	28c00104 	addi	r3,r5,4
  802254:	13400104 	addi	r13,r2,4
  802258:	781c913a 	slli	r14,r15,4
  80225c:	2b000204 	addi	r12,r5,8
  802260:	12c00204 	addi	r11,r2,8
  802264:	73800504 	addi	r14,r14,20
  802268:	2a800304 	addi	r10,r5,12
  80226c:	12400304 	addi	r9,r2,12
  802270:	2b9d883a 	add	r14,r5,r14
  802274:	2811883a 	mov	r8,r5
  802278:	100f883a 	mov	r7,r2
  80227c:	41000017 	ldw	r4,0(r8)
  802280:	39c00404 	addi	r7,r7,16
  802284:	18c00404 	addi	r3,r3,16
  802288:	393ffc15 	stw	r4,-16(r7)
  80228c:	193ffc17 	ldw	r4,-16(r3)
  802290:	6b400404 	addi	r13,r13,16
  802294:	5ac00404 	addi	r11,r11,16
  802298:	693ffc15 	stw	r4,-16(r13)
  80229c:	61000017 	ldw	r4,0(r12)
  8022a0:	4a400404 	addi	r9,r9,16
  8022a4:	42000404 	addi	r8,r8,16
  8022a8:	593ffc15 	stw	r4,-16(r11)
  8022ac:	51000017 	ldw	r4,0(r10)
  8022b0:	63000404 	addi	r12,r12,16
  8022b4:	52800404 	addi	r10,r10,16
  8022b8:	493ffc15 	stw	r4,-16(r9)
  8022bc:	1bbfef1e 	bne	r3,r14,80227c <__alt_mem_epcs_flash_controller_0+0xff7f927c>
  8022c0:	79000044 	addi	r4,r15,1
  8022c4:	2008913a 	slli	r4,r4,4
  8022c8:	328003cc 	andi	r10,r6,15
  8022cc:	02c000c4 	movi	r11,3
  8022d0:	1107883a 	add	r3,r2,r4
  8022d4:	290b883a 	add	r5,r5,r4
  8022d8:	5a801e2e 	bgeu	r11,r10,802354 <memmove+0x154>
  8022dc:	1813883a 	mov	r9,r3
  8022e0:	2811883a 	mov	r8,r5
  8022e4:	500f883a 	mov	r7,r10
  8022e8:	41000017 	ldw	r4,0(r8)
  8022ec:	4a400104 	addi	r9,r9,4
  8022f0:	39ffff04 	addi	r7,r7,-4
  8022f4:	493fff15 	stw	r4,-4(r9)
  8022f8:	42000104 	addi	r8,r8,4
  8022fc:	59fffa36 	bltu	r11,r7,8022e8 <__alt_mem_epcs_flash_controller_0+0xff7f92e8>
  802300:	513fff04 	addi	r4,r10,-4
  802304:	2008d0ba 	srli	r4,r4,2
  802308:	318000cc 	andi	r6,r6,3
  80230c:	21000044 	addi	r4,r4,1
  802310:	2109883a 	add	r4,r4,r4
  802314:	2109883a 	add	r4,r4,r4
  802318:	1907883a 	add	r3,r3,r4
  80231c:	290b883a 	add	r5,r5,r4
  802320:	30000b26 	beq	r6,zero,802350 <memmove+0x150>
  802324:	198d883a 	add	r6,r3,r6
  802328:	29c00003 	ldbu	r7,0(r5)
  80232c:	18c00044 	addi	r3,r3,1
  802330:	29400044 	addi	r5,r5,1
  802334:	19ffffc5 	stb	r7,-1(r3)
  802338:	19bffb1e 	bne	r3,r6,802328 <__alt_mem_epcs_flash_controller_0+0xff7f9328>
  80233c:	f800283a 	ret
  802340:	1007883a 	mov	r3,r2
  802344:	003ff606 	br	802320 <__alt_mem_epcs_flash_controller_0+0xff7f9320>
  802348:	1007883a 	mov	r3,r2
  80234c:	003ff506 	br	802324 <__alt_mem_epcs_flash_controller_0+0xff7f9324>
  802350:	f800283a 	ret
  802354:	500d883a 	mov	r6,r10
  802358:	003ff106 	br	802320 <__alt_mem_epcs_flash_controller_0+0xff7f9320>

0080235c <memset>:
  80235c:	20c000cc 	andi	r3,r4,3
  802360:	2005883a 	mov	r2,r4
  802364:	18004426 	beq	r3,zero,802478 <memset+0x11c>
  802368:	31ffffc4 	addi	r7,r6,-1
  80236c:	30004026 	beq	r6,zero,802470 <memset+0x114>
  802370:	2813883a 	mov	r9,r5
  802374:	200d883a 	mov	r6,r4
  802378:	2007883a 	mov	r3,r4
  80237c:	00000406 	br	802390 <memset+0x34>
  802380:	3a3fffc4 	addi	r8,r7,-1
  802384:	31800044 	addi	r6,r6,1
  802388:	38003926 	beq	r7,zero,802470 <memset+0x114>
  80238c:	400f883a 	mov	r7,r8
  802390:	18c00044 	addi	r3,r3,1
  802394:	32400005 	stb	r9,0(r6)
  802398:	1a0000cc 	andi	r8,r3,3
  80239c:	403ff81e 	bne	r8,zero,802380 <__alt_mem_epcs_flash_controller_0+0xff7f9380>
  8023a0:	010000c4 	movi	r4,3
  8023a4:	21c02d2e 	bgeu	r4,r7,80245c <memset+0x100>
  8023a8:	29003fcc 	andi	r4,r5,255
  8023ac:	200c923a 	slli	r6,r4,8
  8023b0:	3108b03a 	or	r4,r6,r4
  8023b4:	200c943a 	slli	r6,r4,16
  8023b8:	218cb03a 	or	r6,r4,r6
  8023bc:	010003c4 	movi	r4,15
  8023c0:	21c0182e 	bgeu	r4,r7,802424 <memset+0xc8>
  8023c4:	3b3ffc04 	addi	r12,r7,-16
  8023c8:	6018d13a 	srli	r12,r12,4
  8023cc:	1a000104 	addi	r8,r3,4
  8023d0:	1ac00204 	addi	r11,r3,8
  8023d4:	6008913a 	slli	r4,r12,4
  8023d8:	1a800304 	addi	r10,r3,12
  8023dc:	1813883a 	mov	r9,r3
  8023e0:	21000504 	addi	r4,r4,20
  8023e4:	1909883a 	add	r4,r3,r4
  8023e8:	49800015 	stw	r6,0(r9)
  8023ec:	41800015 	stw	r6,0(r8)
  8023f0:	59800015 	stw	r6,0(r11)
  8023f4:	51800015 	stw	r6,0(r10)
  8023f8:	42000404 	addi	r8,r8,16
  8023fc:	4a400404 	addi	r9,r9,16
  802400:	5ac00404 	addi	r11,r11,16
  802404:	52800404 	addi	r10,r10,16
  802408:	413ff71e 	bne	r8,r4,8023e8 <__alt_mem_epcs_flash_controller_0+0xff7f93e8>
  80240c:	63000044 	addi	r12,r12,1
  802410:	6018913a 	slli	r12,r12,4
  802414:	39c003cc 	andi	r7,r7,15
  802418:	010000c4 	movi	r4,3
  80241c:	1b07883a 	add	r3,r3,r12
  802420:	21c00e2e 	bgeu	r4,r7,80245c <memset+0x100>
  802424:	1813883a 	mov	r9,r3
  802428:	3811883a 	mov	r8,r7
  80242c:	010000c4 	movi	r4,3
  802430:	49800015 	stw	r6,0(r9)
  802434:	423fff04 	addi	r8,r8,-4
  802438:	4a400104 	addi	r9,r9,4
  80243c:	223ffc36 	bltu	r4,r8,802430 <__alt_mem_epcs_flash_controller_0+0xff7f9430>
  802440:	393fff04 	addi	r4,r7,-4
  802444:	2008d0ba 	srli	r4,r4,2
  802448:	39c000cc 	andi	r7,r7,3
  80244c:	21000044 	addi	r4,r4,1
  802450:	2109883a 	add	r4,r4,r4
  802454:	2109883a 	add	r4,r4,r4
  802458:	1907883a 	add	r3,r3,r4
  80245c:	38000526 	beq	r7,zero,802474 <memset+0x118>
  802460:	19cf883a 	add	r7,r3,r7
  802464:	19400005 	stb	r5,0(r3)
  802468:	18c00044 	addi	r3,r3,1
  80246c:	38fffd1e 	bne	r7,r3,802464 <__alt_mem_epcs_flash_controller_0+0xff7f9464>
  802470:	f800283a 	ret
  802474:	f800283a 	ret
  802478:	2007883a 	mov	r3,r4
  80247c:	300f883a 	mov	r7,r6
  802480:	003fc706 	br	8023a0 <__alt_mem_epcs_flash_controller_0+0xff7f93a0>

00802484 <_realloc_r>:
  802484:	defff604 	addi	sp,sp,-40
  802488:	dc800215 	stw	r18,8(sp)
  80248c:	dfc00915 	stw	ra,36(sp)
  802490:	df000815 	stw	fp,32(sp)
  802494:	ddc00715 	stw	r23,28(sp)
  802498:	dd800615 	stw	r22,24(sp)
  80249c:	dd400515 	stw	r21,20(sp)
  8024a0:	dd000415 	stw	r20,16(sp)
  8024a4:	dcc00315 	stw	r19,12(sp)
  8024a8:	dc400115 	stw	r17,4(sp)
  8024ac:	dc000015 	stw	r16,0(sp)
  8024b0:	3025883a 	mov	r18,r6
  8024b4:	2800b726 	beq	r5,zero,802794 <_realloc_r+0x310>
  8024b8:	282b883a 	mov	r21,r5
  8024bc:	2029883a 	mov	r20,r4
  8024c0:	08045180 	call	804518 <__malloc_lock>
  8024c4:	a8bfff17 	ldw	r2,-4(r21)
  8024c8:	043fff04 	movi	r16,-4
  8024cc:	90c002c4 	addi	r3,r18,11
  8024d0:	01000584 	movi	r4,22
  8024d4:	acfffe04 	addi	r19,r21,-8
  8024d8:	1420703a 	and	r16,r2,r16
  8024dc:	20c0332e 	bgeu	r4,r3,8025ac <_realloc_r+0x128>
  8024e0:	047ffe04 	movi	r17,-8
  8024e4:	1c62703a 	and	r17,r3,r17
  8024e8:	8807883a 	mov	r3,r17
  8024ec:	88005816 	blt	r17,zero,802650 <_realloc_r+0x1cc>
  8024f0:	8c805736 	bltu	r17,r18,802650 <_realloc_r+0x1cc>
  8024f4:	80c0300e 	bge	r16,r3,8025b8 <_realloc_r+0x134>
  8024f8:	07002074 	movhi	fp,129
  8024fc:	e705bc04 	addi	fp,fp,5872
  802500:	e1c00217 	ldw	r7,8(fp)
  802504:	9c09883a 	add	r4,r19,r16
  802508:	22000117 	ldw	r8,4(r4)
  80250c:	21c06326 	beq	r4,r7,80269c <_realloc_r+0x218>
  802510:	017fff84 	movi	r5,-2
  802514:	414a703a 	and	r5,r8,r5
  802518:	214b883a 	add	r5,r4,r5
  80251c:	29800117 	ldw	r6,4(r5)
  802520:	3180004c 	andi	r6,r6,1
  802524:	30003f26 	beq	r6,zero,802624 <_realloc_r+0x1a0>
  802528:	1080004c 	andi	r2,r2,1
  80252c:	10008326 	beq	r2,zero,80273c <_realloc_r+0x2b8>
  802530:	900b883a 	mov	r5,r18
  802534:	a009883a 	mov	r4,r20
  802538:	08017c80 	call	8017c8 <_malloc_r>
  80253c:	1025883a 	mov	r18,r2
  802540:	10011e26 	beq	r2,zero,8029bc <_realloc_r+0x538>
  802544:	a93fff17 	ldw	r4,-4(r21)
  802548:	10fffe04 	addi	r3,r2,-8
  80254c:	00bfff84 	movi	r2,-2
  802550:	2084703a 	and	r2,r4,r2
  802554:	9885883a 	add	r2,r19,r2
  802558:	1880ee26 	beq	r3,r2,802914 <_realloc_r+0x490>
  80255c:	81bfff04 	addi	r6,r16,-4
  802560:	00800904 	movi	r2,36
  802564:	1180b836 	bltu	r2,r6,802848 <_realloc_r+0x3c4>
  802568:	00c004c4 	movi	r3,19
  80256c:	19809636 	bltu	r3,r6,8027c8 <_realloc_r+0x344>
  802570:	9005883a 	mov	r2,r18
  802574:	a807883a 	mov	r3,r21
  802578:	19000017 	ldw	r4,0(r3)
  80257c:	11000015 	stw	r4,0(r2)
  802580:	19000117 	ldw	r4,4(r3)
  802584:	11000115 	stw	r4,4(r2)
  802588:	18c00217 	ldw	r3,8(r3)
  80258c:	10c00215 	stw	r3,8(r2)
  802590:	a80b883a 	mov	r5,r21
  802594:	a009883a 	mov	r4,r20
  802598:	08032500 	call	803250 <_free_r>
  80259c:	a009883a 	mov	r4,r20
  8025a0:	08046380 	call	804638 <__malloc_unlock>
  8025a4:	9005883a 	mov	r2,r18
  8025a8:	00001206 	br	8025f4 <_realloc_r+0x170>
  8025ac:	00c00404 	movi	r3,16
  8025b0:	1823883a 	mov	r17,r3
  8025b4:	003fce06 	br	8024f0 <__alt_mem_epcs_flash_controller_0+0xff7f94f0>
  8025b8:	a825883a 	mov	r18,r21
  8025bc:	8445c83a 	sub	r2,r16,r17
  8025c0:	00c003c4 	movi	r3,15
  8025c4:	18802636 	bltu	r3,r2,802660 <_realloc_r+0x1dc>
  8025c8:	99800117 	ldw	r6,4(r19)
  8025cc:	9c07883a 	add	r3,r19,r16
  8025d0:	3180004c 	andi	r6,r6,1
  8025d4:	3420b03a 	or	r16,r6,r16
  8025d8:	9c000115 	stw	r16,4(r19)
  8025dc:	18800117 	ldw	r2,4(r3)
  8025e0:	10800054 	ori	r2,r2,1
  8025e4:	18800115 	stw	r2,4(r3)
  8025e8:	a009883a 	mov	r4,r20
  8025ec:	08046380 	call	804638 <__malloc_unlock>
  8025f0:	9005883a 	mov	r2,r18
  8025f4:	dfc00917 	ldw	ra,36(sp)
  8025f8:	df000817 	ldw	fp,32(sp)
  8025fc:	ddc00717 	ldw	r23,28(sp)
  802600:	dd800617 	ldw	r22,24(sp)
  802604:	dd400517 	ldw	r21,20(sp)
  802608:	dd000417 	ldw	r20,16(sp)
  80260c:	dcc00317 	ldw	r19,12(sp)
  802610:	dc800217 	ldw	r18,8(sp)
  802614:	dc400117 	ldw	r17,4(sp)
  802618:	dc000017 	ldw	r16,0(sp)
  80261c:	dec00a04 	addi	sp,sp,40
  802620:	f800283a 	ret
  802624:	017fff04 	movi	r5,-4
  802628:	414a703a 	and	r5,r8,r5
  80262c:	814d883a 	add	r6,r16,r5
  802630:	30c01f16 	blt	r6,r3,8026b0 <_realloc_r+0x22c>
  802634:	20800317 	ldw	r2,12(r4)
  802638:	20c00217 	ldw	r3,8(r4)
  80263c:	a825883a 	mov	r18,r21
  802640:	3021883a 	mov	r16,r6
  802644:	18800315 	stw	r2,12(r3)
  802648:	10c00215 	stw	r3,8(r2)
  80264c:	003fdb06 	br	8025bc <__alt_mem_epcs_flash_controller_0+0xff7f95bc>
  802650:	00800304 	movi	r2,12
  802654:	a0800015 	stw	r2,0(r20)
  802658:	0005883a 	mov	r2,zero
  80265c:	003fe506 	br	8025f4 <__alt_mem_epcs_flash_controller_0+0xff7f95f4>
  802660:	98c00117 	ldw	r3,4(r19)
  802664:	9c4b883a 	add	r5,r19,r17
  802668:	11000054 	ori	r4,r2,1
  80266c:	18c0004c 	andi	r3,r3,1
  802670:	1c62b03a 	or	r17,r3,r17
  802674:	9c400115 	stw	r17,4(r19)
  802678:	29000115 	stw	r4,4(r5)
  80267c:	2885883a 	add	r2,r5,r2
  802680:	10c00117 	ldw	r3,4(r2)
  802684:	29400204 	addi	r5,r5,8
  802688:	a009883a 	mov	r4,r20
  80268c:	18c00054 	ori	r3,r3,1
  802690:	10c00115 	stw	r3,4(r2)
  802694:	08032500 	call	803250 <_free_r>
  802698:	003fd306 	br	8025e8 <__alt_mem_epcs_flash_controller_0+0xff7f95e8>
  80269c:	017fff04 	movi	r5,-4
  8026a0:	414a703a 	and	r5,r8,r5
  8026a4:	89800404 	addi	r6,r17,16
  8026a8:	8151883a 	add	r8,r16,r5
  8026ac:	4180590e 	bge	r8,r6,802814 <_realloc_r+0x390>
  8026b0:	1080004c 	andi	r2,r2,1
  8026b4:	103f9e1e 	bne	r2,zero,802530 <__alt_mem_epcs_flash_controller_0+0xff7f9530>
  8026b8:	adbffe17 	ldw	r22,-8(r21)
  8026bc:	00bfff04 	movi	r2,-4
  8026c0:	9dadc83a 	sub	r22,r19,r22
  8026c4:	b1800117 	ldw	r6,4(r22)
  8026c8:	3084703a 	and	r2,r6,r2
  8026cc:	20002026 	beq	r4,zero,802750 <_realloc_r+0x2cc>
  8026d0:	80af883a 	add	r23,r16,r2
  8026d4:	b96f883a 	add	r23,r23,r5
  8026d8:	21c05f26 	beq	r4,r7,802858 <_realloc_r+0x3d4>
  8026dc:	b8c01c16 	blt	r23,r3,802750 <_realloc_r+0x2cc>
  8026e0:	20800317 	ldw	r2,12(r4)
  8026e4:	20c00217 	ldw	r3,8(r4)
  8026e8:	81bfff04 	addi	r6,r16,-4
  8026ec:	01000904 	movi	r4,36
  8026f0:	18800315 	stw	r2,12(r3)
  8026f4:	10c00215 	stw	r3,8(r2)
  8026f8:	b0c00217 	ldw	r3,8(r22)
  8026fc:	b0800317 	ldw	r2,12(r22)
  802700:	b4800204 	addi	r18,r22,8
  802704:	18800315 	stw	r2,12(r3)
  802708:	10c00215 	stw	r3,8(r2)
  80270c:	21801b36 	bltu	r4,r6,80277c <_realloc_r+0x2f8>
  802710:	008004c4 	movi	r2,19
  802714:	1180352e 	bgeu	r2,r6,8027ec <_realloc_r+0x368>
  802718:	a8800017 	ldw	r2,0(r21)
  80271c:	b0800215 	stw	r2,8(r22)
  802720:	a8800117 	ldw	r2,4(r21)
  802724:	b0800315 	stw	r2,12(r22)
  802728:	008006c4 	movi	r2,27
  80272c:	11807f36 	bltu	r2,r6,80292c <_realloc_r+0x4a8>
  802730:	b0800404 	addi	r2,r22,16
  802734:	ad400204 	addi	r21,r21,8
  802738:	00002d06 	br	8027f0 <_realloc_r+0x36c>
  80273c:	adbffe17 	ldw	r22,-8(r21)
  802740:	00bfff04 	movi	r2,-4
  802744:	9dadc83a 	sub	r22,r19,r22
  802748:	b1000117 	ldw	r4,4(r22)
  80274c:	2084703a 	and	r2,r4,r2
  802750:	b03f7726 	beq	r22,zero,802530 <__alt_mem_epcs_flash_controller_0+0xff7f9530>
  802754:	80af883a 	add	r23,r16,r2
  802758:	b8ff7516 	blt	r23,r3,802530 <__alt_mem_epcs_flash_controller_0+0xff7f9530>
  80275c:	b0800317 	ldw	r2,12(r22)
  802760:	b0c00217 	ldw	r3,8(r22)
  802764:	81bfff04 	addi	r6,r16,-4
  802768:	01000904 	movi	r4,36
  80276c:	18800315 	stw	r2,12(r3)
  802770:	10c00215 	stw	r3,8(r2)
  802774:	b4800204 	addi	r18,r22,8
  802778:	21bfe52e 	bgeu	r4,r6,802710 <__alt_mem_epcs_flash_controller_0+0xff7f9710>
  80277c:	a80b883a 	mov	r5,r21
  802780:	9009883a 	mov	r4,r18
  802784:	08022000 	call	802200 <memmove>
  802788:	b821883a 	mov	r16,r23
  80278c:	b027883a 	mov	r19,r22
  802790:	003f8a06 	br	8025bc <__alt_mem_epcs_flash_controller_0+0xff7f95bc>
  802794:	300b883a 	mov	r5,r6
  802798:	dfc00917 	ldw	ra,36(sp)
  80279c:	df000817 	ldw	fp,32(sp)
  8027a0:	ddc00717 	ldw	r23,28(sp)
  8027a4:	dd800617 	ldw	r22,24(sp)
  8027a8:	dd400517 	ldw	r21,20(sp)
  8027ac:	dd000417 	ldw	r20,16(sp)
  8027b0:	dcc00317 	ldw	r19,12(sp)
  8027b4:	dc800217 	ldw	r18,8(sp)
  8027b8:	dc400117 	ldw	r17,4(sp)
  8027bc:	dc000017 	ldw	r16,0(sp)
  8027c0:	dec00a04 	addi	sp,sp,40
  8027c4:	08017c81 	jmpi	8017c8 <_malloc_r>
  8027c8:	a8c00017 	ldw	r3,0(r21)
  8027cc:	90c00015 	stw	r3,0(r18)
  8027d0:	a8c00117 	ldw	r3,4(r21)
  8027d4:	90c00115 	stw	r3,4(r18)
  8027d8:	00c006c4 	movi	r3,27
  8027dc:	19804536 	bltu	r3,r6,8028f4 <_realloc_r+0x470>
  8027e0:	90800204 	addi	r2,r18,8
  8027e4:	a8c00204 	addi	r3,r21,8
  8027e8:	003f6306 	br	802578 <__alt_mem_epcs_flash_controller_0+0xff7f9578>
  8027ec:	9005883a 	mov	r2,r18
  8027f0:	a8c00017 	ldw	r3,0(r21)
  8027f4:	b821883a 	mov	r16,r23
  8027f8:	b027883a 	mov	r19,r22
  8027fc:	10c00015 	stw	r3,0(r2)
  802800:	a8c00117 	ldw	r3,4(r21)
  802804:	10c00115 	stw	r3,4(r2)
  802808:	a8c00217 	ldw	r3,8(r21)
  80280c:	10c00215 	stw	r3,8(r2)
  802810:	003f6a06 	br	8025bc <__alt_mem_epcs_flash_controller_0+0xff7f95bc>
  802814:	9c67883a 	add	r19,r19,r17
  802818:	4445c83a 	sub	r2,r8,r17
  80281c:	e4c00215 	stw	r19,8(fp)
  802820:	10800054 	ori	r2,r2,1
  802824:	98800115 	stw	r2,4(r19)
  802828:	a8bfff17 	ldw	r2,-4(r21)
  80282c:	a009883a 	mov	r4,r20
  802830:	1080004c 	andi	r2,r2,1
  802834:	1462b03a 	or	r17,r2,r17
  802838:	ac7fff15 	stw	r17,-4(r21)
  80283c:	08046380 	call	804638 <__malloc_unlock>
  802840:	a805883a 	mov	r2,r21
  802844:	003f6b06 	br	8025f4 <__alt_mem_epcs_flash_controller_0+0xff7f95f4>
  802848:	a80b883a 	mov	r5,r21
  80284c:	9009883a 	mov	r4,r18
  802850:	08022000 	call	802200 <memmove>
  802854:	003f4e06 	br	802590 <__alt_mem_epcs_flash_controller_0+0xff7f9590>
  802858:	89000404 	addi	r4,r17,16
  80285c:	b93fbc16 	blt	r23,r4,802750 <__alt_mem_epcs_flash_controller_0+0xff7f9750>
  802860:	b0800317 	ldw	r2,12(r22)
  802864:	b0c00217 	ldw	r3,8(r22)
  802868:	81bfff04 	addi	r6,r16,-4
  80286c:	01000904 	movi	r4,36
  802870:	18800315 	stw	r2,12(r3)
  802874:	10c00215 	stw	r3,8(r2)
  802878:	b4800204 	addi	r18,r22,8
  80287c:	21804336 	bltu	r4,r6,80298c <_realloc_r+0x508>
  802880:	008004c4 	movi	r2,19
  802884:	11803f2e 	bgeu	r2,r6,802984 <_realloc_r+0x500>
  802888:	a8800017 	ldw	r2,0(r21)
  80288c:	b0800215 	stw	r2,8(r22)
  802890:	a8800117 	ldw	r2,4(r21)
  802894:	b0800315 	stw	r2,12(r22)
  802898:	008006c4 	movi	r2,27
  80289c:	11803f36 	bltu	r2,r6,80299c <_realloc_r+0x518>
  8028a0:	b0800404 	addi	r2,r22,16
  8028a4:	ad400204 	addi	r21,r21,8
  8028a8:	a8c00017 	ldw	r3,0(r21)
  8028ac:	10c00015 	stw	r3,0(r2)
  8028b0:	a8c00117 	ldw	r3,4(r21)
  8028b4:	10c00115 	stw	r3,4(r2)
  8028b8:	a8c00217 	ldw	r3,8(r21)
  8028bc:	10c00215 	stw	r3,8(r2)
  8028c0:	b447883a 	add	r3,r22,r17
  8028c4:	bc45c83a 	sub	r2,r23,r17
  8028c8:	e0c00215 	stw	r3,8(fp)
  8028cc:	10800054 	ori	r2,r2,1
  8028d0:	18800115 	stw	r2,4(r3)
  8028d4:	b0800117 	ldw	r2,4(r22)
  8028d8:	a009883a 	mov	r4,r20
  8028dc:	1080004c 	andi	r2,r2,1
  8028e0:	1462b03a 	or	r17,r2,r17
  8028e4:	b4400115 	stw	r17,4(r22)
  8028e8:	08046380 	call	804638 <__malloc_unlock>
  8028ec:	9005883a 	mov	r2,r18
  8028f0:	003f4006 	br	8025f4 <__alt_mem_epcs_flash_controller_0+0xff7f95f4>
  8028f4:	a8c00217 	ldw	r3,8(r21)
  8028f8:	90c00215 	stw	r3,8(r18)
  8028fc:	a8c00317 	ldw	r3,12(r21)
  802900:	90c00315 	stw	r3,12(r18)
  802904:	30801126 	beq	r6,r2,80294c <_realloc_r+0x4c8>
  802908:	90800404 	addi	r2,r18,16
  80290c:	a8c00404 	addi	r3,r21,16
  802910:	003f1906 	br	802578 <__alt_mem_epcs_flash_controller_0+0xff7f9578>
  802914:	90ffff17 	ldw	r3,-4(r18)
  802918:	00bfff04 	movi	r2,-4
  80291c:	a825883a 	mov	r18,r21
  802920:	1884703a 	and	r2,r3,r2
  802924:	80a1883a 	add	r16,r16,r2
  802928:	003f2406 	br	8025bc <__alt_mem_epcs_flash_controller_0+0xff7f95bc>
  80292c:	a8800217 	ldw	r2,8(r21)
  802930:	b0800415 	stw	r2,16(r22)
  802934:	a8800317 	ldw	r2,12(r21)
  802938:	b0800515 	stw	r2,20(r22)
  80293c:	31000a26 	beq	r6,r4,802968 <_realloc_r+0x4e4>
  802940:	b0800604 	addi	r2,r22,24
  802944:	ad400404 	addi	r21,r21,16
  802948:	003fa906 	br	8027f0 <__alt_mem_epcs_flash_controller_0+0xff7f97f0>
  80294c:	a9000417 	ldw	r4,16(r21)
  802950:	90800604 	addi	r2,r18,24
  802954:	a8c00604 	addi	r3,r21,24
  802958:	91000415 	stw	r4,16(r18)
  80295c:	a9000517 	ldw	r4,20(r21)
  802960:	91000515 	stw	r4,20(r18)
  802964:	003f0406 	br	802578 <__alt_mem_epcs_flash_controller_0+0xff7f9578>
  802968:	a8c00417 	ldw	r3,16(r21)
  80296c:	ad400604 	addi	r21,r21,24
  802970:	b0800804 	addi	r2,r22,32
  802974:	b0c00615 	stw	r3,24(r22)
  802978:	a8ffff17 	ldw	r3,-4(r21)
  80297c:	b0c00715 	stw	r3,28(r22)
  802980:	003f9b06 	br	8027f0 <__alt_mem_epcs_flash_controller_0+0xff7f97f0>
  802984:	9005883a 	mov	r2,r18
  802988:	003fc706 	br	8028a8 <__alt_mem_epcs_flash_controller_0+0xff7f98a8>
  80298c:	a80b883a 	mov	r5,r21
  802990:	9009883a 	mov	r4,r18
  802994:	08022000 	call	802200 <memmove>
  802998:	003fc906 	br	8028c0 <__alt_mem_epcs_flash_controller_0+0xff7f98c0>
  80299c:	a8800217 	ldw	r2,8(r21)
  8029a0:	b0800415 	stw	r2,16(r22)
  8029a4:	a8800317 	ldw	r2,12(r21)
  8029a8:	b0800515 	stw	r2,20(r22)
  8029ac:	31000726 	beq	r6,r4,8029cc <_realloc_r+0x548>
  8029b0:	b0800604 	addi	r2,r22,24
  8029b4:	ad400404 	addi	r21,r21,16
  8029b8:	003fbb06 	br	8028a8 <__alt_mem_epcs_flash_controller_0+0xff7f98a8>
  8029bc:	a009883a 	mov	r4,r20
  8029c0:	08046380 	call	804638 <__malloc_unlock>
  8029c4:	0005883a 	mov	r2,zero
  8029c8:	003f0a06 	br	8025f4 <__alt_mem_epcs_flash_controller_0+0xff7f95f4>
  8029cc:	a8c00417 	ldw	r3,16(r21)
  8029d0:	ad400604 	addi	r21,r21,24
  8029d4:	b0800804 	addi	r2,r22,32
  8029d8:	b0c00615 	stw	r3,24(r22)
  8029dc:	a8ffff17 	ldw	r3,-4(r21)
  8029e0:	b0c00715 	stw	r3,28(r22)
  8029e4:	003fb006 	br	8028a8 <__alt_mem_epcs_flash_controller_0+0xff7f98a8>

008029e8 <_sbrk_r>:
  8029e8:	defffd04 	addi	sp,sp,-12
  8029ec:	dc000015 	stw	r16,0(sp)
  8029f0:	04002074 	movhi	r16,129
  8029f4:	dc400115 	stw	r17,4(sp)
  8029f8:	840c7004 	addi	r16,r16,12736
  8029fc:	2023883a 	mov	r17,r4
  802a00:	2809883a 	mov	r4,r5
  802a04:	dfc00215 	stw	ra,8(sp)
  802a08:	80000015 	stw	zero,0(r16)
  802a0c:	08042080 	call	804208 <sbrk>
  802a10:	00ffffc4 	movi	r3,-1
  802a14:	10c00526 	beq	r2,r3,802a2c <_sbrk_r+0x44>
  802a18:	dfc00217 	ldw	ra,8(sp)
  802a1c:	dc400117 	ldw	r17,4(sp)
  802a20:	dc000017 	ldw	r16,0(sp)
  802a24:	dec00304 	addi	sp,sp,12
  802a28:	f800283a 	ret
  802a2c:	80c00017 	ldw	r3,0(r16)
  802a30:	183ff926 	beq	r3,zero,802a18 <__alt_mem_epcs_flash_controller_0+0xff7f9a18>
  802a34:	88c00015 	stw	r3,0(r17)
  802a38:	003ff706 	br	802a18 <__alt_mem_epcs_flash_controller_0+0xff7f9a18>

00802a3c <__sread>:
  802a3c:	defffe04 	addi	sp,sp,-8
  802a40:	dc000015 	stw	r16,0(sp)
  802a44:	2821883a 	mov	r16,r5
  802a48:	2940038f 	ldh	r5,14(r5)
  802a4c:	dfc00115 	stw	ra,4(sp)
  802a50:	080377c0 	call	80377c <_read_r>
  802a54:	10000716 	blt	r2,zero,802a74 <__sread+0x38>
  802a58:	80c01417 	ldw	r3,80(r16)
  802a5c:	1887883a 	add	r3,r3,r2
  802a60:	80c01415 	stw	r3,80(r16)
  802a64:	dfc00117 	ldw	ra,4(sp)
  802a68:	dc000017 	ldw	r16,0(sp)
  802a6c:	dec00204 	addi	sp,sp,8
  802a70:	f800283a 	ret
  802a74:	80c0030b 	ldhu	r3,12(r16)
  802a78:	18fbffcc 	andi	r3,r3,61439
  802a7c:	80c0030d 	sth	r3,12(r16)
  802a80:	dfc00117 	ldw	ra,4(sp)
  802a84:	dc000017 	ldw	r16,0(sp)
  802a88:	dec00204 	addi	sp,sp,8
  802a8c:	f800283a 	ret

00802a90 <__seofread>:
  802a90:	0005883a 	mov	r2,zero
  802a94:	f800283a 	ret

00802a98 <__swrite>:
  802a98:	2880030b 	ldhu	r2,12(r5)
  802a9c:	defffb04 	addi	sp,sp,-20
  802aa0:	dcc00315 	stw	r19,12(sp)
  802aa4:	dc800215 	stw	r18,8(sp)
  802aa8:	dc400115 	stw	r17,4(sp)
  802aac:	dc000015 	stw	r16,0(sp)
  802ab0:	dfc00415 	stw	ra,16(sp)
  802ab4:	10c0400c 	andi	r3,r2,256
  802ab8:	2821883a 	mov	r16,r5
  802abc:	2023883a 	mov	r17,r4
  802ac0:	3025883a 	mov	r18,r6
  802ac4:	3827883a 	mov	r19,r7
  802ac8:	18000526 	beq	r3,zero,802ae0 <__swrite+0x48>
  802acc:	2940038f 	ldh	r5,14(r5)
  802ad0:	01c00084 	movi	r7,2
  802ad4:	000d883a 	mov	r6,zero
  802ad8:	08035600 	call	803560 <_lseek_r>
  802adc:	8080030b 	ldhu	r2,12(r16)
  802ae0:	8140038f 	ldh	r5,14(r16)
  802ae4:	10bbffcc 	andi	r2,r2,61439
  802ae8:	980f883a 	mov	r7,r19
  802aec:	900d883a 	mov	r6,r18
  802af0:	8809883a 	mov	r4,r17
  802af4:	8080030d 	sth	r2,12(r16)
  802af8:	dfc00417 	ldw	ra,16(sp)
  802afc:	dcc00317 	ldw	r19,12(sp)
  802b00:	dc800217 	ldw	r18,8(sp)
  802b04:	dc400117 	ldw	r17,4(sp)
  802b08:	dc000017 	ldw	r16,0(sp)
  802b0c:	dec00504 	addi	sp,sp,20
  802b10:	0802b781 	jmpi	802b78 <_write_r>

00802b14 <__sseek>:
  802b14:	defffe04 	addi	sp,sp,-8
  802b18:	dc000015 	stw	r16,0(sp)
  802b1c:	2821883a 	mov	r16,r5
  802b20:	2940038f 	ldh	r5,14(r5)
  802b24:	dfc00115 	stw	ra,4(sp)
  802b28:	08035600 	call	803560 <_lseek_r>
  802b2c:	00ffffc4 	movi	r3,-1
  802b30:	10c00826 	beq	r2,r3,802b54 <__sseek+0x40>
  802b34:	80c0030b 	ldhu	r3,12(r16)
  802b38:	80801415 	stw	r2,80(r16)
  802b3c:	18c40014 	ori	r3,r3,4096
  802b40:	80c0030d 	sth	r3,12(r16)
  802b44:	dfc00117 	ldw	ra,4(sp)
  802b48:	dc000017 	ldw	r16,0(sp)
  802b4c:	dec00204 	addi	sp,sp,8
  802b50:	f800283a 	ret
  802b54:	80c0030b 	ldhu	r3,12(r16)
  802b58:	18fbffcc 	andi	r3,r3,61439
  802b5c:	80c0030d 	sth	r3,12(r16)
  802b60:	dfc00117 	ldw	ra,4(sp)
  802b64:	dc000017 	ldw	r16,0(sp)
  802b68:	dec00204 	addi	sp,sp,8
  802b6c:	f800283a 	ret

00802b70 <__sclose>:
  802b70:	2940038f 	ldh	r5,14(r5)
  802b74:	0802d2c1 	jmpi	802d2c <_close_r>

00802b78 <_write_r>:
  802b78:	defffd04 	addi	sp,sp,-12
  802b7c:	2805883a 	mov	r2,r5
  802b80:	dc000015 	stw	r16,0(sp)
  802b84:	04002074 	movhi	r16,129
  802b88:	dc400115 	stw	r17,4(sp)
  802b8c:	300b883a 	mov	r5,r6
  802b90:	840c7004 	addi	r16,r16,12736
  802b94:	2023883a 	mov	r17,r4
  802b98:	380d883a 	mov	r6,r7
  802b9c:	1009883a 	mov	r4,r2
  802ba0:	dfc00215 	stw	ra,8(sp)
  802ba4:	80000015 	stw	zero,0(r16)
  802ba8:	08042f40 	call	8042f4 <write>
  802bac:	00ffffc4 	movi	r3,-1
  802bb0:	10c00526 	beq	r2,r3,802bc8 <_write_r+0x50>
  802bb4:	dfc00217 	ldw	ra,8(sp)
  802bb8:	dc400117 	ldw	r17,4(sp)
  802bbc:	dc000017 	ldw	r16,0(sp)
  802bc0:	dec00304 	addi	sp,sp,12
  802bc4:	f800283a 	ret
  802bc8:	80c00017 	ldw	r3,0(r16)
  802bcc:	183ff926 	beq	r3,zero,802bb4 <__alt_mem_epcs_flash_controller_0+0xff7f9bb4>
  802bd0:	88c00015 	stw	r3,0(r17)
  802bd4:	003ff706 	br	802bb4 <__alt_mem_epcs_flash_controller_0+0xff7f9bb4>

00802bd8 <__swsetup_r>:
  802bd8:	00802074 	movhi	r2,129
  802bdc:	defffd04 	addi	sp,sp,-12
  802be0:	108c1f04 	addi	r2,r2,12412
  802be4:	dc400115 	stw	r17,4(sp)
  802be8:	2023883a 	mov	r17,r4
  802bec:	11000017 	ldw	r4,0(r2)
  802bf0:	dc000015 	stw	r16,0(sp)
  802bf4:	dfc00215 	stw	ra,8(sp)
  802bf8:	2821883a 	mov	r16,r5
  802bfc:	20000226 	beq	r4,zero,802c08 <__swsetup_r+0x30>
  802c00:	20800e17 	ldw	r2,56(r4)
  802c04:	10003126 	beq	r2,zero,802ccc <__swsetup_r+0xf4>
  802c08:	8080030b 	ldhu	r2,12(r16)
  802c0c:	10c0020c 	andi	r3,r2,8
  802c10:	1009883a 	mov	r4,r2
  802c14:	18000f26 	beq	r3,zero,802c54 <__swsetup_r+0x7c>
  802c18:	80c00417 	ldw	r3,16(r16)
  802c1c:	18001526 	beq	r3,zero,802c74 <__swsetup_r+0x9c>
  802c20:	1100004c 	andi	r4,r2,1
  802c24:	20001c1e 	bne	r4,zero,802c98 <__swsetup_r+0xc0>
  802c28:	1080008c 	andi	r2,r2,2
  802c2c:	1000291e 	bne	r2,zero,802cd4 <__swsetup_r+0xfc>
  802c30:	80800517 	ldw	r2,20(r16)
  802c34:	80800215 	stw	r2,8(r16)
  802c38:	18001c26 	beq	r3,zero,802cac <__swsetup_r+0xd4>
  802c3c:	0005883a 	mov	r2,zero
  802c40:	dfc00217 	ldw	ra,8(sp)
  802c44:	dc400117 	ldw	r17,4(sp)
  802c48:	dc000017 	ldw	r16,0(sp)
  802c4c:	dec00304 	addi	sp,sp,12
  802c50:	f800283a 	ret
  802c54:	2080040c 	andi	r2,r4,16
  802c58:	10002e26 	beq	r2,zero,802d14 <__swsetup_r+0x13c>
  802c5c:	2080010c 	andi	r2,r4,4
  802c60:	10001e1e 	bne	r2,zero,802cdc <__swsetup_r+0x104>
  802c64:	80c00417 	ldw	r3,16(r16)
  802c68:	20800214 	ori	r2,r4,8
  802c6c:	8080030d 	sth	r2,12(r16)
  802c70:	183feb1e 	bne	r3,zero,802c20 <__alt_mem_epcs_flash_controller_0+0xff7f9c20>
  802c74:	1100a00c 	andi	r4,r2,640
  802c78:	01408004 	movi	r5,512
  802c7c:	217fe826 	beq	r4,r5,802c20 <__alt_mem_epcs_flash_controller_0+0xff7f9c20>
  802c80:	800b883a 	mov	r5,r16
  802c84:	8809883a 	mov	r4,r17
  802c88:	08035c00 	call	8035c0 <__smakebuf_r>
  802c8c:	8080030b 	ldhu	r2,12(r16)
  802c90:	80c00417 	ldw	r3,16(r16)
  802c94:	003fe206 	br	802c20 <__alt_mem_epcs_flash_controller_0+0xff7f9c20>
  802c98:	80800517 	ldw	r2,20(r16)
  802c9c:	80000215 	stw	zero,8(r16)
  802ca0:	0085c83a 	sub	r2,zero,r2
  802ca4:	80800615 	stw	r2,24(r16)
  802ca8:	183fe41e 	bne	r3,zero,802c3c <__alt_mem_epcs_flash_controller_0+0xff7f9c3c>
  802cac:	80c0030b 	ldhu	r3,12(r16)
  802cb0:	0005883a 	mov	r2,zero
  802cb4:	1900200c 	andi	r4,r3,128
  802cb8:	203fe126 	beq	r4,zero,802c40 <__alt_mem_epcs_flash_controller_0+0xff7f9c40>
  802cbc:	18c01014 	ori	r3,r3,64
  802cc0:	80c0030d 	sth	r3,12(r16)
  802cc4:	00bfffc4 	movi	r2,-1
  802cc8:	003fdd06 	br	802c40 <__alt_mem_epcs_flash_controller_0+0xff7f9c40>
  802ccc:	08011280 	call	801128 <__sinit>
  802cd0:	003fcd06 	br	802c08 <__alt_mem_epcs_flash_controller_0+0xff7f9c08>
  802cd4:	0005883a 	mov	r2,zero
  802cd8:	003fd606 	br	802c34 <__alt_mem_epcs_flash_controller_0+0xff7f9c34>
  802cdc:	81400c17 	ldw	r5,48(r16)
  802ce0:	28000626 	beq	r5,zero,802cfc <__swsetup_r+0x124>
  802ce4:	80801004 	addi	r2,r16,64
  802ce8:	28800326 	beq	r5,r2,802cf8 <__swsetup_r+0x120>
  802cec:	8809883a 	mov	r4,r17
  802cf0:	08032500 	call	803250 <_free_r>
  802cf4:	8100030b 	ldhu	r4,12(r16)
  802cf8:	80000c15 	stw	zero,48(r16)
  802cfc:	80c00417 	ldw	r3,16(r16)
  802d00:	00bff6c4 	movi	r2,-37
  802d04:	1108703a 	and	r4,r2,r4
  802d08:	80000115 	stw	zero,4(r16)
  802d0c:	80c00015 	stw	r3,0(r16)
  802d10:	003fd506 	br	802c68 <__alt_mem_epcs_flash_controller_0+0xff7f9c68>
  802d14:	00800244 	movi	r2,9
  802d18:	88800015 	stw	r2,0(r17)
  802d1c:	20801014 	ori	r2,r4,64
  802d20:	8080030d 	sth	r2,12(r16)
  802d24:	00bfffc4 	movi	r2,-1
  802d28:	003fc506 	br	802c40 <__alt_mem_epcs_flash_controller_0+0xff7f9c40>

00802d2c <_close_r>:
  802d2c:	defffd04 	addi	sp,sp,-12
  802d30:	dc000015 	stw	r16,0(sp)
  802d34:	04002074 	movhi	r16,129
  802d38:	dc400115 	stw	r17,4(sp)
  802d3c:	840c7004 	addi	r16,r16,12736
  802d40:	2023883a 	mov	r17,r4
  802d44:	2809883a 	mov	r4,r5
  802d48:	dfc00215 	stw	ra,8(sp)
  802d4c:	80000015 	stw	zero,0(r16)
  802d50:	08038f00 	call	8038f0 <close>
  802d54:	00ffffc4 	movi	r3,-1
  802d58:	10c00526 	beq	r2,r3,802d70 <_close_r+0x44>
  802d5c:	dfc00217 	ldw	ra,8(sp)
  802d60:	dc400117 	ldw	r17,4(sp)
  802d64:	dc000017 	ldw	r16,0(sp)
  802d68:	dec00304 	addi	sp,sp,12
  802d6c:	f800283a 	ret
  802d70:	80c00017 	ldw	r3,0(r16)
  802d74:	183ff926 	beq	r3,zero,802d5c <__alt_mem_epcs_flash_controller_0+0xff7f9d5c>
  802d78:	88c00015 	stw	r3,0(r17)
  802d7c:	003ff706 	br	802d5c <__alt_mem_epcs_flash_controller_0+0xff7f9d5c>

00802d80 <_fclose_r>:
  802d80:	28003926 	beq	r5,zero,802e68 <_fclose_r+0xe8>
  802d84:	defffc04 	addi	sp,sp,-16
  802d88:	dc400115 	stw	r17,4(sp)
  802d8c:	dc000015 	stw	r16,0(sp)
  802d90:	dfc00315 	stw	ra,12(sp)
  802d94:	dc800215 	stw	r18,8(sp)
  802d98:	2023883a 	mov	r17,r4
  802d9c:	2821883a 	mov	r16,r5
  802da0:	20000226 	beq	r4,zero,802dac <_fclose_r+0x2c>
  802da4:	20800e17 	ldw	r2,56(r4)
  802da8:	10002726 	beq	r2,zero,802e48 <_fclose_r+0xc8>
  802dac:	8080030f 	ldh	r2,12(r16)
  802db0:	1000071e 	bne	r2,zero,802dd0 <_fclose_r+0x50>
  802db4:	0005883a 	mov	r2,zero
  802db8:	dfc00317 	ldw	ra,12(sp)
  802dbc:	dc800217 	ldw	r18,8(sp)
  802dc0:	dc400117 	ldw	r17,4(sp)
  802dc4:	dc000017 	ldw	r16,0(sp)
  802dc8:	dec00404 	addi	sp,sp,16
  802dcc:	f800283a 	ret
  802dd0:	800b883a 	mov	r5,r16
  802dd4:	8809883a 	mov	r4,r17
  802dd8:	0802e840 	call	802e84 <__sflush_r>
  802ddc:	1025883a 	mov	r18,r2
  802de0:	80800b17 	ldw	r2,44(r16)
  802de4:	10000426 	beq	r2,zero,802df8 <_fclose_r+0x78>
  802de8:	81400717 	ldw	r5,28(r16)
  802dec:	8809883a 	mov	r4,r17
  802df0:	103ee83a 	callr	r2
  802df4:	10001616 	blt	r2,zero,802e50 <_fclose_r+0xd0>
  802df8:	8080030b 	ldhu	r2,12(r16)
  802dfc:	1080200c 	andi	r2,r2,128
  802e00:	1000151e 	bne	r2,zero,802e58 <_fclose_r+0xd8>
  802e04:	81400c17 	ldw	r5,48(r16)
  802e08:	28000526 	beq	r5,zero,802e20 <_fclose_r+0xa0>
  802e0c:	80801004 	addi	r2,r16,64
  802e10:	28800226 	beq	r5,r2,802e1c <_fclose_r+0x9c>
  802e14:	8809883a 	mov	r4,r17
  802e18:	08032500 	call	803250 <_free_r>
  802e1c:	80000c15 	stw	zero,48(r16)
  802e20:	81401117 	ldw	r5,68(r16)
  802e24:	28000326 	beq	r5,zero,802e34 <_fclose_r+0xb4>
  802e28:	8809883a 	mov	r4,r17
  802e2c:	08032500 	call	803250 <_free_r>
  802e30:	80001115 	stw	zero,68(r16)
  802e34:	08011380 	call	801138 <__sfp_lock_acquire>
  802e38:	8000030d 	sth	zero,12(r16)
  802e3c:	080113c0 	call	80113c <__sfp_lock_release>
  802e40:	9005883a 	mov	r2,r18
  802e44:	003fdc06 	br	802db8 <__alt_mem_epcs_flash_controller_0+0xff7f9db8>
  802e48:	08011280 	call	801128 <__sinit>
  802e4c:	003fd706 	br	802dac <__alt_mem_epcs_flash_controller_0+0xff7f9dac>
  802e50:	04bfffc4 	movi	r18,-1
  802e54:	003fe806 	br	802df8 <__alt_mem_epcs_flash_controller_0+0xff7f9df8>
  802e58:	81400417 	ldw	r5,16(r16)
  802e5c:	8809883a 	mov	r4,r17
  802e60:	08032500 	call	803250 <_free_r>
  802e64:	003fe706 	br	802e04 <__alt_mem_epcs_flash_controller_0+0xff7f9e04>
  802e68:	0005883a 	mov	r2,zero
  802e6c:	f800283a 	ret

00802e70 <fclose>:
  802e70:	00802074 	movhi	r2,129
  802e74:	108c1f04 	addi	r2,r2,12412
  802e78:	200b883a 	mov	r5,r4
  802e7c:	11000017 	ldw	r4,0(r2)
  802e80:	0802d801 	jmpi	802d80 <_fclose_r>

00802e84 <__sflush_r>:
  802e84:	2880030b 	ldhu	r2,12(r5)
  802e88:	defffb04 	addi	sp,sp,-20
  802e8c:	dcc00315 	stw	r19,12(sp)
  802e90:	dc400115 	stw	r17,4(sp)
  802e94:	dfc00415 	stw	ra,16(sp)
  802e98:	dc800215 	stw	r18,8(sp)
  802e9c:	dc000015 	stw	r16,0(sp)
  802ea0:	10c0020c 	andi	r3,r2,8
  802ea4:	2823883a 	mov	r17,r5
  802ea8:	2027883a 	mov	r19,r4
  802eac:	1800311e 	bne	r3,zero,802f74 <__sflush_r+0xf0>
  802eb0:	28c00117 	ldw	r3,4(r5)
  802eb4:	10820014 	ori	r2,r2,2048
  802eb8:	2880030d 	sth	r2,12(r5)
  802ebc:	00c04b0e 	bge	zero,r3,802fec <__sflush_r+0x168>
  802ec0:	8a000a17 	ldw	r8,40(r17)
  802ec4:	40002326 	beq	r8,zero,802f54 <__sflush_r+0xd0>
  802ec8:	9c000017 	ldw	r16,0(r19)
  802ecc:	10c4000c 	andi	r3,r2,4096
  802ed0:	98000015 	stw	zero,0(r19)
  802ed4:	18004826 	beq	r3,zero,802ff8 <__sflush_r+0x174>
  802ed8:	89801417 	ldw	r6,80(r17)
  802edc:	10c0010c 	andi	r3,r2,4
  802ee0:	18000626 	beq	r3,zero,802efc <__sflush_r+0x78>
  802ee4:	88c00117 	ldw	r3,4(r17)
  802ee8:	88800c17 	ldw	r2,48(r17)
  802eec:	30cdc83a 	sub	r6,r6,r3
  802ef0:	10000226 	beq	r2,zero,802efc <__sflush_r+0x78>
  802ef4:	88800f17 	ldw	r2,60(r17)
  802ef8:	308dc83a 	sub	r6,r6,r2
  802efc:	89400717 	ldw	r5,28(r17)
  802f00:	000f883a 	mov	r7,zero
  802f04:	9809883a 	mov	r4,r19
  802f08:	403ee83a 	callr	r8
  802f0c:	00ffffc4 	movi	r3,-1
  802f10:	10c04426 	beq	r2,r3,803024 <__sflush_r+0x1a0>
  802f14:	88c0030b 	ldhu	r3,12(r17)
  802f18:	89000417 	ldw	r4,16(r17)
  802f1c:	88000115 	stw	zero,4(r17)
  802f20:	197dffcc 	andi	r5,r3,63487
  802f24:	8940030d 	sth	r5,12(r17)
  802f28:	89000015 	stw	r4,0(r17)
  802f2c:	18c4000c 	andi	r3,r3,4096
  802f30:	18002c1e 	bne	r3,zero,802fe4 <__sflush_r+0x160>
  802f34:	89400c17 	ldw	r5,48(r17)
  802f38:	9c000015 	stw	r16,0(r19)
  802f3c:	28000526 	beq	r5,zero,802f54 <__sflush_r+0xd0>
  802f40:	88801004 	addi	r2,r17,64
  802f44:	28800226 	beq	r5,r2,802f50 <__sflush_r+0xcc>
  802f48:	9809883a 	mov	r4,r19
  802f4c:	08032500 	call	803250 <_free_r>
  802f50:	88000c15 	stw	zero,48(r17)
  802f54:	0005883a 	mov	r2,zero
  802f58:	dfc00417 	ldw	ra,16(sp)
  802f5c:	dcc00317 	ldw	r19,12(sp)
  802f60:	dc800217 	ldw	r18,8(sp)
  802f64:	dc400117 	ldw	r17,4(sp)
  802f68:	dc000017 	ldw	r16,0(sp)
  802f6c:	dec00504 	addi	sp,sp,20
  802f70:	f800283a 	ret
  802f74:	2c800417 	ldw	r18,16(r5)
  802f78:	903ff626 	beq	r18,zero,802f54 <__alt_mem_epcs_flash_controller_0+0xff7f9f54>
  802f7c:	2c000017 	ldw	r16,0(r5)
  802f80:	108000cc 	andi	r2,r2,3
  802f84:	2c800015 	stw	r18,0(r5)
  802f88:	84a1c83a 	sub	r16,r16,r18
  802f8c:	1000131e 	bne	r2,zero,802fdc <__sflush_r+0x158>
  802f90:	28800517 	ldw	r2,20(r5)
  802f94:	88800215 	stw	r2,8(r17)
  802f98:	04000316 	blt	zero,r16,802fa8 <__sflush_r+0x124>
  802f9c:	003fed06 	br	802f54 <__alt_mem_epcs_flash_controller_0+0xff7f9f54>
  802fa0:	90a5883a 	add	r18,r18,r2
  802fa4:	043feb0e 	bge	zero,r16,802f54 <__alt_mem_epcs_flash_controller_0+0xff7f9f54>
  802fa8:	88800917 	ldw	r2,36(r17)
  802fac:	89400717 	ldw	r5,28(r17)
  802fb0:	800f883a 	mov	r7,r16
  802fb4:	900d883a 	mov	r6,r18
  802fb8:	9809883a 	mov	r4,r19
  802fbc:	103ee83a 	callr	r2
  802fc0:	80a1c83a 	sub	r16,r16,r2
  802fc4:	00bff616 	blt	zero,r2,802fa0 <__alt_mem_epcs_flash_controller_0+0xff7f9fa0>
  802fc8:	88c0030b 	ldhu	r3,12(r17)
  802fcc:	00bfffc4 	movi	r2,-1
  802fd0:	18c01014 	ori	r3,r3,64
  802fd4:	88c0030d 	sth	r3,12(r17)
  802fd8:	003fdf06 	br	802f58 <__alt_mem_epcs_flash_controller_0+0xff7f9f58>
  802fdc:	0005883a 	mov	r2,zero
  802fe0:	003fec06 	br	802f94 <__alt_mem_epcs_flash_controller_0+0xff7f9f94>
  802fe4:	88801415 	stw	r2,80(r17)
  802fe8:	003fd206 	br	802f34 <__alt_mem_epcs_flash_controller_0+0xff7f9f34>
  802fec:	28c00f17 	ldw	r3,60(r5)
  802ff0:	00ffb316 	blt	zero,r3,802ec0 <__alt_mem_epcs_flash_controller_0+0xff7f9ec0>
  802ff4:	003fd706 	br	802f54 <__alt_mem_epcs_flash_controller_0+0xff7f9f54>
  802ff8:	89400717 	ldw	r5,28(r17)
  802ffc:	000d883a 	mov	r6,zero
  803000:	01c00044 	movi	r7,1
  803004:	9809883a 	mov	r4,r19
  803008:	403ee83a 	callr	r8
  80300c:	100d883a 	mov	r6,r2
  803010:	00bfffc4 	movi	r2,-1
  803014:	30801426 	beq	r6,r2,803068 <__sflush_r+0x1e4>
  803018:	8880030b 	ldhu	r2,12(r17)
  80301c:	8a000a17 	ldw	r8,40(r17)
  803020:	003fae06 	br	802edc <__alt_mem_epcs_flash_controller_0+0xff7f9edc>
  803024:	98c00017 	ldw	r3,0(r19)
  803028:	183fba26 	beq	r3,zero,802f14 <__alt_mem_epcs_flash_controller_0+0xff7f9f14>
  80302c:	01000744 	movi	r4,29
  803030:	19000626 	beq	r3,r4,80304c <__sflush_r+0x1c8>
  803034:	01000584 	movi	r4,22
  803038:	19000426 	beq	r3,r4,80304c <__sflush_r+0x1c8>
  80303c:	88c0030b 	ldhu	r3,12(r17)
  803040:	18c01014 	ori	r3,r3,64
  803044:	88c0030d 	sth	r3,12(r17)
  803048:	003fc306 	br	802f58 <__alt_mem_epcs_flash_controller_0+0xff7f9f58>
  80304c:	8880030b 	ldhu	r2,12(r17)
  803050:	88c00417 	ldw	r3,16(r17)
  803054:	88000115 	stw	zero,4(r17)
  803058:	10bdffcc 	andi	r2,r2,63487
  80305c:	8880030d 	sth	r2,12(r17)
  803060:	88c00015 	stw	r3,0(r17)
  803064:	003fb306 	br	802f34 <__alt_mem_epcs_flash_controller_0+0xff7f9f34>
  803068:	98800017 	ldw	r2,0(r19)
  80306c:	103fea26 	beq	r2,zero,803018 <__alt_mem_epcs_flash_controller_0+0xff7fa018>
  803070:	00c00744 	movi	r3,29
  803074:	10c00226 	beq	r2,r3,803080 <__sflush_r+0x1fc>
  803078:	00c00584 	movi	r3,22
  80307c:	10c0031e 	bne	r2,r3,80308c <__sflush_r+0x208>
  803080:	9c000015 	stw	r16,0(r19)
  803084:	0005883a 	mov	r2,zero
  803088:	003fb306 	br	802f58 <__alt_mem_epcs_flash_controller_0+0xff7f9f58>
  80308c:	88c0030b 	ldhu	r3,12(r17)
  803090:	3005883a 	mov	r2,r6
  803094:	18c01014 	ori	r3,r3,64
  803098:	88c0030d 	sth	r3,12(r17)
  80309c:	003fae06 	br	802f58 <__alt_mem_epcs_flash_controller_0+0xff7f9f58>

008030a0 <_fflush_r>:
  8030a0:	defffd04 	addi	sp,sp,-12
  8030a4:	dc000115 	stw	r16,4(sp)
  8030a8:	dfc00215 	stw	ra,8(sp)
  8030ac:	2021883a 	mov	r16,r4
  8030b0:	20000226 	beq	r4,zero,8030bc <_fflush_r+0x1c>
  8030b4:	20800e17 	ldw	r2,56(r4)
  8030b8:	10000c26 	beq	r2,zero,8030ec <_fflush_r+0x4c>
  8030bc:	2880030f 	ldh	r2,12(r5)
  8030c0:	1000051e 	bne	r2,zero,8030d8 <_fflush_r+0x38>
  8030c4:	0005883a 	mov	r2,zero
  8030c8:	dfc00217 	ldw	ra,8(sp)
  8030cc:	dc000117 	ldw	r16,4(sp)
  8030d0:	dec00304 	addi	sp,sp,12
  8030d4:	f800283a 	ret
  8030d8:	8009883a 	mov	r4,r16
  8030dc:	dfc00217 	ldw	ra,8(sp)
  8030e0:	dc000117 	ldw	r16,4(sp)
  8030e4:	dec00304 	addi	sp,sp,12
  8030e8:	0802e841 	jmpi	802e84 <__sflush_r>
  8030ec:	d9400015 	stw	r5,0(sp)
  8030f0:	08011280 	call	801128 <__sinit>
  8030f4:	d9400017 	ldw	r5,0(sp)
  8030f8:	003ff006 	br	8030bc <__alt_mem_epcs_flash_controller_0+0xff7fa0bc>

008030fc <fflush>:
  8030fc:	20000526 	beq	r4,zero,803114 <fflush+0x18>
  803100:	00802074 	movhi	r2,129
  803104:	108c1f04 	addi	r2,r2,12412
  803108:	200b883a 	mov	r5,r4
  80310c:	11000017 	ldw	r4,0(r2)
  803110:	08030a01 	jmpi	8030a0 <_fflush_r>
  803114:	00802074 	movhi	r2,129
  803118:	108c1e04 	addi	r2,r2,12408
  80311c:	11000017 	ldw	r4,0(r2)
  803120:	01402034 	movhi	r5,128
  803124:	294c2804 	addi	r5,r5,12448
  803128:	08017041 	jmpi	801704 <_fwalk_reent>

0080312c <_malloc_trim_r>:
  80312c:	defffb04 	addi	sp,sp,-20
  803130:	dcc00315 	stw	r19,12(sp)
  803134:	04c02074 	movhi	r19,129
  803138:	dc800215 	stw	r18,8(sp)
  80313c:	dc400115 	stw	r17,4(sp)
  803140:	dc000015 	stw	r16,0(sp)
  803144:	dfc00415 	stw	ra,16(sp)
  803148:	2821883a 	mov	r16,r5
  80314c:	9cc5bc04 	addi	r19,r19,5872
  803150:	2025883a 	mov	r18,r4
  803154:	08045180 	call	804518 <__malloc_lock>
  803158:	98800217 	ldw	r2,8(r19)
  80315c:	14400117 	ldw	r17,4(r2)
  803160:	00bfff04 	movi	r2,-4
  803164:	88a2703a 	and	r17,r17,r2
  803168:	8c21c83a 	sub	r16,r17,r16
  80316c:	8403fbc4 	addi	r16,r16,4079
  803170:	8020d33a 	srli	r16,r16,12
  803174:	0083ffc4 	movi	r2,4095
  803178:	843fffc4 	addi	r16,r16,-1
  80317c:	8020933a 	slli	r16,r16,12
  803180:	1400060e 	bge	r2,r16,80319c <_malloc_trim_r+0x70>
  803184:	000b883a 	mov	r5,zero
  803188:	9009883a 	mov	r4,r18
  80318c:	08029e80 	call	8029e8 <_sbrk_r>
  803190:	98c00217 	ldw	r3,8(r19)
  803194:	1c47883a 	add	r3,r3,r17
  803198:	10c00a26 	beq	r2,r3,8031c4 <_malloc_trim_r+0x98>
  80319c:	9009883a 	mov	r4,r18
  8031a0:	08046380 	call	804638 <__malloc_unlock>
  8031a4:	0005883a 	mov	r2,zero
  8031a8:	dfc00417 	ldw	ra,16(sp)
  8031ac:	dcc00317 	ldw	r19,12(sp)
  8031b0:	dc800217 	ldw	r18,8(sp)
  8031b4:	dc400117 	ldw	r17,4(sp)
  8031b8:	dc000017 	ldw	r16,0(sp)
  8031bc:	dec00504 	addi	sp,sp,20
  8031c0:	f800283a 	ret
  8031c4:	040bc83a 	sub	r5,zero,r16
  8031c8:	9009883a 	mov	r4,r18
  8031cc:	08029e80 	call	8029e8 <_sbrk_r>
  8031d0:	00ffffc4 	movi	r3,-1
  8031d4:	10c00d26 	beq	r2,r3,80320c <_malloc_trim_r+0xe0>
  8031d8:	00c02074 	movhi	r3,129
  8031dc:	18cc9104 	addi	r3,r3,12868
  8031e0:	18800017 	ldw	r2,0(r3)
  8031e4:	99000217 	ldw	r4,8(r19)
  8031e8:	8c23c83a 	sub	r17,r17,r16
  8031ec:	8c400054 	ori	r17,r17,1
  8031f0:	1421c83a 	sub	r16,r2,r16
  8031f4:	24400115 	stw	r17,4(r4)
  8031f8:	9009883a 	mov	r4,r18
  8031fc:	1c000015 	stw	r16,0(r3)
  803200:	08046380 	call	804638 <__malloc_unlock>
  803204:	00800044 	movi	r2,1
  803208:	003fe706 	br	8031a8 <__alt_mem_epcs_flash_controller_0+0xff7fa1a8>
  80320c:	000b883a 	mov	r5,zero
  803210:	9009883a 	mov	r4,r18
  803214:	08029e80 	call	8029e8 <_sbrk_r>
  803218:	99000217 	ldw	r4,8(r19)
  80321c:	014003c4 	movi	r5,15
  803220:	1107c83a 	sub	r3,r2,r4
  803224:	28ffdd0e 	bge	r5,r3,80319c <__alt_mem_epcs_flash_controller_0+0xff7fa19c>
  803228:	01402074 	movhi	r5,129
  80322c:	294c2004 	addi	r5,r5,12416
  803230:	29400017 	ldw	r5,0(r5)
  803234:	18c00054 	ori	r3,r3,1
  803238:	20c00115 	stw	r3,4(r4)
  80323c:	00c02074 	movhi	r3,129
  803240:	1145c83a 	sub	r2,r2,r5
  803244:	18cc9104 	addi	r3,r3,12868
  803248:	18800015 	stw	r2,0(r3)
  80324c:	003fd306 	br	80319c <__alt_mem_epcs_flash_controller_0+0xff7fa19c>

00803250 <_free_r>:
  803250:	28004126 	beq	r5,zero,803358 <_free_r+0x108>
  803254:	defffd04 	addi	sp,sp,-12
  803258:	dc400115 	stw	r17,4(sp)
  80325c:	dc000015 	stw	r16,0(sp)
  803260:	2023883a 	mov	r17,r4
  803264:	2821883a 	mov	r16,r5
  803268:	dfc00215 	stw	ra,8(sp)
  80326c:	08045180 	call	804518 <__malloc_lock>
  803270:	81ffff17 	ldw	r7,-4(r16)
  803274:	00bfff84 	movi	r2,-2
  803278:	01002074 	movhi	r4,129
  80327c:	81bffe04 	addi	r6,r16,-8
  803280:	3884703a 	and	r2,r7,r2
  803284:	2105bc04 	addi	r4,r4,5872
  803288:	308b883a 	add	r5,r6,r2
  80328c:	2a400117 	ldw	r9,4(r5)
  803290:	22000217 	ldw	r8,8(r4)
  803294:	00ffff04 	movi	r3,-4
  803298:	48c6703a 	and	r3,r9,r3
  80329c:	2a005726 	beq	r5,r8,8033fc <_free_r+0x1ac>
  8032a0:	28c00115 	stw	r3,4(r5)
  8032a4:	39c0004c 	andi	r7,r7,1
  8032a8:	3800091e 	bne	r7,zero,8032d0 <_free_r+0x80>
  8032ac:	823ffe17 	ldw	r8,-8(r16)
  8032b0:	22400204 	addi	r9,r4,8
  8032b4:	320dc83a 	sub	r6,r6,r8
  8032b8:	31c00217 	ldw	r7,8(r6)
  8032bc:	1205883a 	add	r2,r2,r8
  8032c0:	3a406526 	beq	r7,r9,803458 <_free_r+0x208>
  8032c4:	32000317 	ldw	r8,12(r6)
  8032c8:	3a000315 	stw	r8,12(r7)
  8032cc:	41c00215 	stw	r7,8(r8)
  8032d0:	28cf883a 	add	r7,r5,r3
  8032d4:	39c00117 	ldw	r7,4(r7)
  8032d8:	39c0004c 	andi	r7,r7,1
  8032dc:	38003a26 	beq	r7,zero,8033c8 <_free_r+0x178>
  8032e0:	10c00054 	ori	r3,r2,1
  8032e4:	30c00115 	stw	r3,4(r6)
  8032e8:	3087883a 	add	r3,r6,r2
  8032ec:	18800015 	stw	r2,0(r3)
  8032f0:	00c07fc4 	movi	r3,511
  8032f4:	18801936 	bltu	r3,r2,80335c <_free_r+0x10c>
  8032f8:	1004d0fa 	srli	r2,r2,3
  8032fc:	01c00044 	movi	r7,1
  803300:	21400117 	ldw	r5,4(r4)
  803304:	10c00044 	addi	r3,r2,1
  803308:	18c7883a 	add	r3,r3,r3
  80330c:	1005d0ba 	srai	r2,r2,2
  803310:	18c7883a 	add	r3,r3,r3
  803314:	18c7883a 	add	r3,r3,r3
  803318:	1907883a 	add	r3,r3,r4
  80331c:	3884983a 	sll	r2,r7,r2
  803320:	19c00017 	ldw	r7,0(r3)
  803324:	1a3ffe04 	addi	r8,r3,-8
  803328:	1144b03a 	or	r2,r2,r5
  80332c:	32000315 	stw	r8,12(r6)
  803330:	31c00215 	stw	r7,8(r6)
  803334:	20800115 	stw	r2,4(r4)
  803338:	19800015 	stw	r6,0(r3)
  80333c:	39800315 	stw	r6,12(r7)
  803340:	8809883a 	mov	r4,r17
  803344:	dfc00217 	ldw	ra,8(sp)
  803348:	dc400117 	ldw	r17,4(sp)
  80334c:	dc000017 	ldw	r16,0(sp)
  803350:	dec00304 	addi	sp,sp,12
  803354:	08046381 	jmpi	804638 <__malloc_unlock>
  803358:	f800283a 	ret
  80335c:	100ad27a 	srli	r5,r2,9
  803360:	00c00104 	movi	r3,4
  803364:	19404a36 	bltu	r3,r5,803490 <_free_r+0x240>
  803368:	100ad1ba 	srli	r5,r2,6
  80336c:	28c00e44 	addi	r3,r5,57
  803370:	18c7883a 	add	r3,r3,r3
  803374:	29400e04 	addi	r5,r5,56
  803378:	18c7883a 	add	r3,r3,r3
  80337c:	18c7883a 	add	r3,r3,r3
  803380:	1909883a 	add	r4,r3,r4
  803384:	20c00017 	ldw	r3,0(r4)
  803388:	01c02074 	movhi	r7,129
  80338c:	213ffe04 	addi	r4,r4,-8
  803390:	39c5bc04 	addi	r7,r7,5872
  803394:	20c04426 	beq	r4,r3,8034a8 <_free_r+0x258>
  803398:	01ffff04 	movi	r7,-4
  80339c:	19400117 	ldw	r5,4(r3)
  8033a0:	29ca703a 	and	r5,r5,r7
  8033a4:	1140022e 	bgeu	r2,r5,8033b0 <_free_r+0x160>
  8033a8:	18c00217 	ldw	r3,8(r3)
  8033ac:	20fffb1e 	bne	r4,r3,80339c <__alt_mem_epcs_flash_controller_0+0xff7fa39c>
  8033b0:	19000317 	ldw	r4,12(r3)
  8033b4:	31000315 	stw	r4,12(r6)
  8033b8:	30c00215 	stw	r3,8(r6)
  8033bc:	21800215 	stw	r6,8(r4)
  8033c0:	19800315 	stw	r6,12(r3)
  8033c4:	003fde06 	br	803340 <__alt_mem_epcs_flash_controller_0+0xff7fa340>
  8033c8:	29c00217 	ldw	r7,8(r5)
  8033cc:	10c5883a 	add	r2,r2,r3
  8033d0:	00c02074 	movhi	r3,129
  8033d4:	18c5be04 	addi	r3,r3,5880
  8033d8:	38c03b26 	beq	r7,r3,8034c8 <_free_r+0x278>
  8033dc:	2a000317 	ldw	r8,12(r5)
  8033e0:	11400054 	ori	r5,r2,1
  8033e4:	3087883a 	add	r3,r6,r2
  8033e8:	3a000315 	stw	r8,12(r7)
  8033ec:	41c00215 	stw	r7,8(r8)
  8033f0:	31400115 	stw	r5,4(r6)
  8033f4:	18800015 	stw	r2,0(r3)
  8033f8:	003fbd06 	br	8032f0 <__alt_mem_epcs_flash_controller_0+0xff7fa2f0>
  8033fc:	39c0004c 	andi	r7,r7,1
  803400:	10c5883a 	add	r2,r2,r3
  803404:	3800071e 	bne	r7,zero,803424 <_free_r+0x1d4>
  803408:	81fffe17 	ldw	r7,-8(r16)
  80340c:	31cdc83a 	sub	r6,r6,r7
  803410:	30c00317 	ldw	r3,12(r6)
  803414:	31400217 	ldw	r5,8(r6)
  803418:	11c5883a 	add	r2,r2,r7
  80341c:	28c00315 	stw	r3,12(r5)
  803420:	19400215 	stw	r5,8(r3)
  803424:	10c00054 	ori	r3,r2,1
  803428:	30c00115 	stw	r3,4(r6)
  80342c:	00c02074 	movhi	r3,129
  803430:	18cc2104 	addi	r3,r3,12420
  803434:	18c00017 	ldw	r3,0(r3)
  803438:	21800215 	stw	r6,8(r4)
  80343c:	10ffc036 	bltu	r2,r3,803340 <__alt_mem_epcs_flash_controller_0+0xff7fa340>
  803440:	00802074 	movhi	r2,129
  803444:	108c6f04 	addi	r2,r2,12732
  803448:	11400017 	ldw	r5,0(r2)
  80344c:	8809883a 	mov	r4,r17
  803450:	080312c0 	call	80312c <_malloc_trim_r>
  803454:	003fba06 	br	803340 <__alt_mem_epcs_flash_controller_0+0xff7fa340>
  803458:	28c9883a 	add	r4,r5,r3
  80345c:	21000117 	ldw	r4,4(r4)
  803460:	2100004c 	andi	r4,r4,1
  803464:	2000391e 	bne	r4,zero,80354c <_free_r+0x2fc>
  803468:	29c00217 	ldw	r7,8(r5)
  80346c:	29000317 	ldw	r4,12(r5)
  803470:	1885883a 	add	r2,r3,r2
  803474:	10c00054 	ori	r3,r2,1
  803478:	39000315 	stw	r4,12(r7)
  80347c:	21c00215 	stw	r7,8(r4)
  803480:	30c00115 	stw	r3,4(r6)
  803484:	308d883a 	add	r6,r6,r2
  803488:	30800015 	stw	r2,0(r6)
  80348c:	003fac06 	br	803340 <__alt_mem_epcs_flash_controller_0+0xff7fa340>
  803490:	00c00504 	movi	r3,20
  803494:	19401536 	bltu	r3,r5,8034ec <_free_r+0x29c>
  803498:	28c01704 	addi	r3,r5,92
  80349c:	18c7883a 	add	r3,r3,r3
  8034a0:	294016c4 	addi	r5,r5,91
  8034a4:	003fb406 	br	803378 <__alt_mem_epcs_flash_controller_0+0xff7fa378>
  8034a8:	280bd0ba 	srai	r5,r5,2
  8034ac:	00c00044 	movi	r3,1
  8034b0:	38800117 	ldw	r2,4(r7)
  8034b4:	194a983a 	sll	r5,r3,r5
  8034b8:	2007883a 	mov	r3,r4
  8034bc:	2884b03a 	or	r2,r5,r2
  8034c0:	38800115 	stw	r2,4(r7)
  8034c4:	003fbb06 	br	8033b4 <__alt_mem_epcs_flash_controller_0+0xff7fa3b4>
  8034c8:	21800515 	stw	r6,20(r4)
  8034cc:	21800415 	stw	r6,16(r4)
  8034d0:	10c00054 	ori	r3,r2,1
  8034d4:	31c00315 	stw	r7,12(r6)
  8034d8:	31c00215 	stw	r7,8(r6)
  8034dc:	30c00115 	stw	r3,4(r6)
  8034e0:	308d883a 	add	r6,r6,r2
  8034e4:	30800015 	stw	r2,0(r6)
  8034e8:	003f9506 	br	803340 <__alt_mem_epcs_flash_controller_0+0xff7fa340>
  8034ec:	00c01504 	movi	r3,84
  8034f0:	19400536 	bltu	r3,r5,803508 <_free_r+0x2b8>
  8034f4:	100ad33a 	srli	r5,r2,12
  8034f8:	28c01bc4 	addi	r3,r5,111
  8034fc:	18c7883a 	add	r3,r3,r3
  803500:	29401b84 	addi	r5,r5,110
  803504:	003f9c06 	br	803378 <__alt_mem_epcs_flash_controller_0+0xff7fa378>
  803508:	00c05504 	movi	r3,340
  80350c:	19400536 	bltu	r3,r5,803524 <_free_r+0x2d4>
  803510:	100ad3fa 	srli	r5,r2,15
  803514:	28c01e04 	addi	r3,r5,120
  803518:	18c7883a 	add	r3,r3,r3
  80351c:	29401dc4 	addi	r5,r5,119
  803520:	003f9506 	br	803378 <__alt_mem_epcs_flash_controller_0+0xff7fa378>
  803524:	00c15504 	movi	r3,1364
  803528:	19400536 	bltu	r3,r5,803540 <_free_r+0x2f0>
  80352c:	100ad4ba 	srli	r5,r2,18
  803530:	28c01f44 	addi	r3,r5,125
  803534:	18c7883a 	add	r3,r3,r3
  803538:	29401f04 	addi	r5,r5,124
  80353c:	003f8e06 	br	803378 <__alt_mem_epcs_flash_controller_0+0xff7fa378>
  803540:	00c03f84 	movi	r3,254
  803544:	01401f84 	movi	r5,126
  803548:	003f8b06 	br	803378 <__alt_mem_epcs_flash_controller_0+0xff7fa378>
  80354c:	10c00054 	ori	r3,r2,1
  803550:	30c00115 	stw	r3,4(r6)
  803554:	308d883a 	add	r6,r6,r2
  803558:	30800015 	stw	r2,0(r6)
  80355c:	003f7806 	br	803340 <__alt_mem_epcs_flash_controller_0+0xff7fa340>

00803560 <_lseek_r>:
  803560:	defffd04 	addi	sp,sp,-12
  803564:	2805883a 	mov	r2,r5
  803568:	dc000015 	stw	r16,0(sp)
  80356c:	04002074 	movhi	r16,129
  803570:	dc400115 	stw	r17,4(sp)
  803574:	300b883a 	mov	r5,r6
  803578:	840c7004 	addi	r16,r16,12736
  80357c:	2023883a 	mov	r17,r4
  803580:	380d883a 	mov	r6,r7
  803584:	1009883a 	mov	r4,r2
  803588:	dfc00215 	stw	ra,8(sp)
  80358c:	80000015 	stw	zero,0(r16)
  803590:	0803eac0 	call	803eac <lseek>
  803594:	00ffffc4 	movi	r3,-1
  803598:	10c00526 	beq	r2,r3,8035b0 <_lseek_r+0x50>
  80359c:	dfc00217 	ldw	ra,8(sp)
  8035a0:	dc400117 	ldw	r17,4(sp)
  8035a4:	dc000017 	ldw	r16,0(sp)
  8035a8:	dec00304 	addi	sp,sp,12
  8035ac:	f800283a 	ret
  8035b0:	80c00017 	ldw	r3,0(r16)
  8035b4:	183ff926 	beq	r3,zero,80359c <__alt_mem_epcs_flash_controller_0+0xff7fa59c>
  8035b8:	88c00015 	stw	r3,0(r17)
  8035bc:	003ff706 	br	80359c <__alt_mem_epcs_flash_controller_0+0xff7fa59c>

008035c0 <__smakebuf_r>:
  8035c0:	2880030b 	ldhu	r2,12(r5)
  8035c4:	10c0008c 	andi	r3,r2,2
  8035c8:	1800411e 	bne	r3,zero,8036d0 <__smakebuf_r+0x110>
  8035cc:	deffec04 	addi	sp,sp,-80
  8035d0:	dc000f15 	stw	r16,60(sp)
  8035d4:	2821883a 	mov	r16,r5
  8035d8:	2940038f 	ldh	r5,14(r5)
  8035dc:	dc401015 	stw	r17,64(sp)
  8035e0:	dfc01315 	stw	ra,76(sp)
  8035e4:	dcc01215 	stw	r19,72(sp)
  8035e8:	dc801115 	stw	r18,68(sp)
  8035ec:	2023883a 	mov	r17,r4
  8035f0:	28001c16 	blt	r5,zero,803664 <__smakebuf_r+0xa4>
  8035f4:	d80d883a 	mov	r6,sp
  8035f8:	08037dc0 	call	8037dc <_fstat_r>
  8035fc:	10001816 	blt	r2,zero,803660 <__smakebuf_r+0xa0>
  803600:	d8800117 	ldw	r2,4(sp)
  803604:	00e00014 	movui	r3,32768
  803608:	10bc000c 	andi	r2,r2,61440
  80360c:	14c80020 	cmpeqi	r19,r2,8192
  803610:	10c03726 	beq	r2,r3,8036f0 <__smakebuf_r+0x130>
  803614:	80c0030b 	ldhu	r3,12(r16)
  803618:	18c20014 	ori	r3,r3,2048
  80361c:	80c0030d 	sth	r3,12(r16)
  803620:	00c80004 	movi	r3,8192
  803624:	10c0521e 	bne	r2,r3,803770 <__smakebuf_r+0x1b0>
  803628:	8140038f 	ldh	r5,14(r16)
  80362c:	8809883a 	mov	r4,r17
  803630:	08038380 	call	803838 <_isatty_r>
  803634:	10004c26 	beq	r2,zero,803768 <__smakebuf_r+0x1a8>
  803638:	8080030b 	ldhu	r2,12(r16)
  80363c:	80c010c4 	addi	r3,r16,67
  803640:	80c00015 	stw	r3,0(r16)
  803644:	10800054 	ori	r2,r2,1
  803648:	8080030d 	sth	r2,12(r16)
  80364c:	00800044 	movi	r2,1
  803650:	80c00415 	stw	r3,16(r16)
  803654:	80800515 	stw	r2,20(r16)
  803658:	04810004 	movi	r18,1024
  80365c:	00000706 	br	80367c <__smakebuf_r+0xbc>
  803660:	8080030b 	ldhu	r2,12(r16)
  803664:	10c0200c 	andi	r3,r2,128
  803668:	18001f1e 	bne	r3,zero,8036e8 <__smakebuf_r+0x128>
  80366c:	04810004 	movi	r18,1024
  803670:	10820014 	ori	r2,r2,2048
  803674:	8080030d 	sth	r2,12(r16)
  803678:	0027883a 	mov	r19,zero
  80367c:	900b883a 	mov	r5,r18
  803680:	8809883a 	mov	r4,r17
  803684:	08017c80 	call	8017c8 <_malloc_r>
  803688:	10002c26 	beq	r2,zero,80373c <__smakebuf_r+0x17c>
  80368c:	80c0030b 	ldhu	r3,12(r16)
  803690:	01002034 	movhi	r4,128
  803694:	21037404 	addi	r4,r4,3536
  803698:	89000f15 	stw	r4,60(r17)
  80369c:	18c02014 	ori	r3,r3,128
  8036a0:	80c0030d 	sth	r3,12(r16)
  8036a4:	80800015 	stw	r2,0(r16)
  8036a8:	80800415 	stw	r2,16(r16)
  8036ac:	84800515 	stw	r18,20(r16)
  8036b0:	98001a1e 	bne	r19,zero,80371c <__smakebuf_r+0x15c>
  8036b4:	dfc01317 	ldw	ra,76(sp)
  8036b8:	dcc01217 	ldw	r19,72(sp)
  8036bc:	dc801117 	ldw	r18,68(sp)
  8036c0:	dc401017 	ldw	r17,64(sp)
  8036c4:	dc000f17 	ldw	r16,60(sp)
  8036c8:	dec01404 	addi	sp,sp,80
  8036cc:	f800283a 	ret
  8036d0:	288010c4 	addi	r2,r5,67
  8036d4:	28800015 	stw	r2,0(r5)
  8036d8:	28800415 	stw	r2,16(r5)
  8036dc:	00800044 	movi	r2,1
  8036e0:	28800515 	stw	r2,20(r5)
  8036e4:	f800283a 	ret
  8036e8:	04801004 	movi	r18,64
  8036ec:	003fe006 	br	803670 <__alt_mem_epcs_flash_controller_0+0xff7fa670>
  8036f0:	81000a17 	ldw	r4,40(r16)
  8036f4:	00c02034 	movhi	r3,128
  8036f8:	18cac504 	addi	r3,r3,11028
  8036fc:	20ffc51e 	bne	r4,r3,803614 <__alt_mem_epcs_flash_controller_0+0xff7fa614>
  803700:	8080030b 	ldhu	r2,12(r16)
  803704:	04810004 	movi	r18,1024
  803708:	84801315 	stw	r18,76(r16)
  80370c:	1484b03a 	or	r2,r2,r18
  803710:	8080030d 	sth	r2,12(r16)
  803714:	0027883a 	mov	r19,zero
  803718:	003fd806 	br	80367c <__alt_mem_epcs_flash_controller_0+0xff7fa67c>
  80371c:	8140038f 	ldh	r5,14(r16)
  803720:	8809883a 	mov	r4,r17
  803724:	08038380 	call	803838 <_isatty_r>
  803728:	103fe226 	beq	r2,zero,8036b4 <__alt_mem_epcs_flash_controller_0+0xff7fa6b4>
  80372c:	8080030b 	ldhu	r2,12(r16)
  803730:	10800054 	ori	r2,r2,1
  803734:	8080030d 	sth	r2,12(r16)
  803738:	003fde06 	br	8036b4 <__alt_mem_epcs_flash_controller_0+0xff7fa6b4>
  80373c:	8080030b 	ldhu	r2,12(r16)
  803740:	10c0800c 	andi	r3,r2,512
  803744:	183fdb1e 	bne	r3,zero,8036b4 <__alt_mem_epcs_flash_controller_0+0xff7fa6b4>
  803748:	10800094 	ori	r2,r2,2
  80374c:	80c010c4 	addi	r3,r16,67
  803750:	8080030d 	sth	r2,12(r16)
  803754:	00800044 	movi	r2,1
  803758:	80c00015 	stw	r3,0(r16)
  80375c:	80c00415 	stw	r3,16(r16)
  803760:	80800515 	stw	r2,20(r16)
  803764:	003fd306 	br	8036b4 <__alt_mem_epcs_flash_controller_0+0xff7fa6b4>
  803768:	04810004 	movi	r18,1024
  80376c:	003fc306 	br	80367c <__alt_mem_epcs_flash_controller_0+0xff7fa67c>
  803770:	0027883a 	mov	r19,zero
  803774:	04810004 	movi	r18,1024
  803778:	003fc006 	br	80367c <__alt_mem_epcs_flash_controller_0+0xff7fa67c>

0080377c <_read_r>:
  80377c:	defffd04 	addi	sp,sp,-12
  803780:	2805883a 	mov	r2,r5
  803784:	dc000015 	stw	r16,0(sp)
  803788:	04002074 	movhi	r16,129
  80378c:	dc400115 	stw	r17,4(sp)
  803790:	300b883a 	mov	r5,r6
  803794:	840c7004 	addi	r16,r16,12736
  803798:	2023883a 	mov	r17,r4
  80379c:	380d883a 	mov	r6,r7
  8037a0:	1009883a 	mov	r4,r2
  8037a4:	dfc00215 	stw	ra,8(sp)
  8037a8:	80000015 	stw	zero,0(r16)
  8037ac:	08040800 	call	804080 <read>
  8037b0:	00ffffc4 	movi	r3,-1
  8037b4:	10c00526 	beq	r2,r3,8037cc <_read_r+0x50>
  8037b8:	dfc00217 	ldw	ra,8(sp)
  8037bc:	dc400117 	ldw	r17,4(sp)
  8037c0:	dc000017 	ldw	r16,0(sp)
  8037c4:	dec00304 	addi	sp,sp,12
  8037c8:	f800283a 	ret
  8037cc:	80c00017 	ldw	r3,0(r16)
  8037d0:	183ff926 	beq	r3,zero,8037b8 <__alt_mem_epcs_flash_controller_0+0xff7fa7b8>
  8037d4:	88c00015 	stw	r3,0(r17)
  8037d8:	003ff706 	br	8037b8 <__alt_mem_epcs_flash_controller_0+0xff7fa7b8>

008037dc <_fstat_r>:
  8037dc:	defffd04 	addi	sp,sp,-12
  8037e0:	2805883a 	mov	r2,r5
  8037e4:	dc000015 	stw	r16,0(sp)
  8037e8:	04002074 	movhi	r16,129
  8037ec:	dc400115 	stw	r17,4(sp)
  8037f0:	840c7004 	addi	r16,r16,12736
  8037f4:	2023883a 	mov	r17,r4
  8037f8:	300b883a 	mov	r5,r6
  8037fc:	1009883a 	mov	r4,r2
  803800:	dfc00215 	stw	ra,8(sp)
  803804:	80000015 	stw	zero,0(r16)
  803808:	0803a300 	call	803a30 <fstat>
  80380c:	00ffffc4 	movi	r3,-1
  803810:	10c00526 	beq	r2,r3,803828 <_fstat_r+0x4c>
  803814:	dfc00217 	ldw	ra,8(sp)
  803818:	dc400117 	ldw	r17,4(sp)
  80381c:	dc000017 	ldw	r16,0(sp)
  803820:	dec00304 	addi	sp,sp,12
  803824:	f800283a 	ret
  803828:	80c00017 	ldw	r3,0(r16)
  80382c:	183ff926 	beq	r3,zero,803814 <__alt_mem_epcs_flash_controller_0+0xff7fa814>
  803830:	88c00015 	stw	r3,0(r17)
  803834:	003ff706 	br	803814 <__alt_mem_epcs_flash_controller_0+0xff7fa814>

00803838 <_isatty_r>:
  803838:	defffd04 	addi	sp,sp,-12
  80383c:	dc000015 	stw	r16,0(sp)
  803840:	04002074 	movhi	r16,129
  803844:	dc400115 	stw	r17,4(sp)
  803848:	840c7004 	addi	r16,r16,12736
  80384c:	2023883a 	mov	r17,r4
  803850:	2809883a 	mov	r4,r5
  803854:	dfc00215 	stw	ra,8(sp)
  803858:	80000015 	stw	zero,0(r16)
  80385c:	0803dc40 	call	803dc4 <isatty>
  803860:	00ffffc4 	movi	r3,-1
  803864:	10c00526 	beq	r2,r3,80387c <_isatty_r+0x44>
  803868:	dfc00217 	ldw	ra,8(sp)
  80386c:	dc400117 	ldw	r17,4(sp)
  803870:	dc000017 	ldw	r16,0(sp)
  803874:	dec00304 	addi	sp,sp,12
  803878:	f800283a 	ret
  80387c:	80c00017 	ldw	r3,0(r16)
  803880:	183ff926 	beq	r3,zero,803868 <__alt_mem_epcs_flash_controller_0+0xff7fa868>
  803884:	88c00015 	stw	r3,0(r17)
  803888:	003ff706 	br	803868 <__alt_mem_epcs_flash_controller_0+0xff7fa868>

0080388c <__mulsi3>:
  80388c:	0005883a 	mov	r2,zero
  803890:	20000726 	beq	r4,zero,8038b0 <__mulsi3+0x24>
  803894:	20c0004c 	andi	r3,r4,1
  803898:	2008d07a 	srli	r4,r4,1
  80389c:	18000126 	beq	r3,zero,8038a4 <__mulsi3+0x18>
  8038a0:	1145883a 	add	r2,r2,r5
  8038a4:	294b883a 	add	r5,r5,r5
  8038a8:	203ffa1e 	bne	r4,zero,803894 <__alt_mem_epcs_flash_controller_0+0xff7fa894>
  8038ac:	f800283a 	ret
  8038b0:	f800283a 	ret

008038b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8038b4:	defffe04 	addi	sp,sp,-8
  8038b8:	dfc00115 	stw	ra,4(sp)
  8038bc:	df000015 	stw	fp,0(sp)
  8038c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8038c4:	d0a03f17 	ldw	r2,-32516(gp)
  8038c8:	10000326 	beq	r2,zero,8038d8 <alt_get_errno+0x24>
  8038cc:	d0a03f17 	ldw	r2,-32516(gp)
  8038d0:	103ee83a 	callr	r2
  8038d4:	00000106 	br	8038dc <alt_get_errno+0x28>
  8038d8:	d0a08804 	addi	r2,gp,-32224
}
  8038dc:	e037883a 	mov	sp,fp
  8038e0:	dfc00117 	ldw	ra,4(sp)
  8038e4:	df000017 	ldw	fp,0(sp)
  8038e8:	dec00204 	addi	sp,sp,8
  8038ec:	f800283a 	ret

008038f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8038f0:	defffb04 	addi	sp,sp,-20
  8038f4:	dfc00415 	stw	ra,16(sp)
  8038f8:	df000315 	stw	fp,12(sp)
  8038fc:	df000304 	addi	fp,sp,12
  803900:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803904:	e0bfff17 	ldw	r2,-4(fp)
  803908:	10000816 	blt	r2,zero,80392c <close+0x3c>
  80390c:	01400304 	movi	r5,12
  803910:	e13fff17 	ldw	r4,-4(fp)
  803914:	080388c0 	call	80388c <__mulsi3>
  803918:	1007883a 	mov	r3,r2
  80391c:	00802074 	movhi	r2,129
  803920:	1086c804 	addi	r2,r2,6944
  803924:	1885883a 	add	r2,r3,r2
  803928:	00000106 	br	803930 <close+0x40>
  80392c:	0005883a 	mov	r2,zero
  803930:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  803934:	e0bffd17 	ldw	r2,-12(fp)
  803938:	10001926 	beq	r2,zero,8039a0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80393c:	e0bffd17 	ldw	r2,-12(fp)
  803940:	10800017 	ldw	r2,0(r2)
  803944:	10800417 	ldw	r2,16(r2)
  803948:	10000626 	beq	r2,zero,803964 <close+0x74>
  80394c:	e0bffd17 	ldw	r2,-12(fp)
  803950:	10800017 	ldw	r2,0(r2)
  803954:	10800417 	ldw	r2,16(r2)
  803958:	e13ffd17 	ldw	r4,-12(fp)
  80395c:	103ee83a 	callr	r2
  803960:	00000106 	br	803968 <close+0x78>
  803964:	0005883a 	mov	r2,zero
  803968:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80396c:	e13fff17 	ldw	r4,-4(fp)
  803970:	08041840 	call	804184 <alt_release_fd>
    if (rval < 0)
  803974:	e0bffe17 	ldw	r2,-8(fp)
  803978:	1000070e 	bge	r2,zero,803998 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80397c:	08038b40 	call	8038b4 <alt_get_errno>
  803980:	1007883a 	mov	r3,r2
  803984:	e0bffe17 	ldw	r2,-8(fp)
  803988:	0085c83a 	sub	r2,zero,r2
  80398c:	18800015 	stw	r2,0(r3)
      return -1;
  803990:	00bfffc4 	movi	r2,-1
  803994:	00000706 	br	8039b4 <close+0xc4>
    }
    return 0;
  803998:	0005883a 	mov	r2,zero
  80399c:	00000506 	br	8039b4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8039a0:	08038b40 	call	8038b4 <alt_get_errno>
  8039a4:	1007883a 	mov	r3,r2
  8039a8:	00801444 	movi	r2,81
  8039ac:	18800015 	stw	r2,0(r3)
    return -1;
  8039b0:	00bfffc4 	movi	r2,-1
  }
}
  8039b4:	e037883a 	mov	sp,fp
  8039b8:	dfc00117 	ldw	ra,4(sp)
  8039bc:	df000017 	ldw	fp,0(sp)
  8039c0:	dec00204 	addi	sp,sp,8
  8039c4:	f800283a 	ret

008039c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8039c8:	defffc04 	addi	sp,sp,-16
  8039cc:	df000315 	stw	fp,12(sp)
  8039d0:	df000304 	addi	fp,sp,12
  8039d4:	e13ffd15 	stw	r4,-12(fp)
  8039d8:	e17ffe15 	stw	r5,-8(fp)
  8039dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8039e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8039e4:	e037883a 	mov	sp,fp
  8039e8:	df000017 	ldw	fp,0(sp)
  8039ec:	dec00104 	addi	sp,sp,4
  8039f0:	f800283a 	ret

008039f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8039f4:	defffe04 	addi	sp,sp,-8
  8039f8:	dfc00115 	stw	ra,4(sp)
  8039fc:	df000015 	stw	fp,0(sp)
  803a00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803a04:	d0a03f17 	ldw	r2,-32516(gp)
  803a08:	10000326 	beq	r2,zero,803a18 <alt_get_errno+0x24>
  803a0c:	d0a03f17 	ldw	r2,-32516(gp)
  803a10:	103ee83a 	callr	r2
  803a14:	00000106 	br	803a1c <alt_get_errno+0x28>
  803a18:	d0a08804 	addi	r2,gp,-32224
}
  803a1c:	e037883a 	mov	sp,fp
  803a20:	dfc00117 	ldw	ra,4(sp)
  803a24:	df000017 	ldw	fp,0(sp)
  803a28:	dec00204 	addi	sp,sp,8
  803a2c:	f800283a 	ret

00803a30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803a30:	defffb04 	addi	sp,sp,-20
  803a34:	dfc00415 	stw	ra,16(sp)
  803a38:	df000315 	stw	fp,12(sp)
  803a3c:	df000304 	addi	fp,sp,12
  803a40:	e13ffe15 	stw	r4,-8(fp)
  803a44:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803a48:	e0bffe17 	ldw	r2,-8(fp)
  803a4c:	10000816 	blt	r2,zero,803a70 <fstat+0x40>
  803a50:	01400304 	movi	r5,12
  803a54:	e13ffe17 	ldw	r4,-8(fp)
  803a58:	080388c0 	call	80388c <__mulsi3>
  803a5c:	1007883a 	mov	r3,r2
  803a60:	00802074 	movhi	r2,129
  803a64:	1086c804 	addi	r2,r2,6944
  803a68:	1885883a 	add	r2,r3,r2
  803a6c:	00000106 	br	803a74 <fstat+0x44>
  803a70:	0005883a 	mov	r2,zero
  803a74:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  803a78:	e0bffd17 	ldw	r2,-12(fp)
  803a7c:	10001026 	beq	r2,zero,803ac0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803a80:	e0bffd17 	ldw	r2,-12(fp)
  803a84:	10800017 	ldw	r2,0(r2)
  803a88:	10800817 	ldw	r2,32(r2)
  803a8c:	10000726 	beq	r2,zero,803aac <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  803a90:	e0bffd17 	ldw	r2,-12(fp)
  803a94:	10800017 	ldw	r2,0(r2)
  803a98:	10800817 	ldw	r2,32(r2)
  803a9c:	e17fff17 	ldw	r5,-4(fp)
  803aa0:	e13ffd17 	ldw	r4,-12(fp)
  803aa4:	103ee83a 	callr	r2
  803aa8:	00000a06 	br	803ad4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  803aac:	e0bfff17 	ldw	r2,-4(fp)
  803ab0:	00c80004 	movi	r3,8192
  803ab4:	10c00115 	stw	r3,4(r2)
      return 0;
  803ab8:	0005883a 	mov	r2,zero
  803abc:	00000506 	br	803ad4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803ac0:	08039f40 	call	8039f4 <alt_get_errno>
  803ac4:	1007883a 	mov	r3,r2
  803ac8:	00801444 	movi	r2,81
  803acc:	18800015 	stw	r2,0(r3)
    return -1;
  803ad0:	00bfffc4 	movi	r2,-1
  }
}
  803ad4:	e037883a 	mov	sp,fp
  803ad8:	dfc00117 	ldw	ra,4(sp)
  803adc:	df000017 	ldw	fp,0(sp)
  803ae0:	dec00204 	addi	sp,sp,8
  803ae4:	f800283a 	ret

00803ae8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803ae8:	defff904 	addi	sp,sp,-28
  803aec:	dfc00615 	stw	ra,24(sp)
  803af0:	df000515 	stw	fp,20(sp)
  803af4:	df000504 	addi	fp,sp,20
  803af8:	e13ffc15 	stw	r4,-16(fp)
  803afc:	e17ffd15 	stw	r5,-12(fp)
  803b00:	e1bffe15 	stw	r6,-8(fp)
  803b04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  803b08:	e0800217 	ldw	r2,8(fp)
  803b0c:	d8800015 	stw	r2,0(sp)
  803b10:	e1ffff17 	ldw	r7,-4(fp)
  803b14:	e1bffe17 	ldw	r6,-8(fp)
  803b18:	e17ffd17 	ldw	r5,-12(fp)
  803b1c:	e13ffc17 	ldw	r4,-16(fp)
  803b20:	0803c980 	call	803c98 <alt_iic_isr_register>
}  
  803b24:	e037883a 	mov	sp,fp
  803b28:	dfc00117 	ldw	ra,4(sp)
  803b2c:	df000017 	ldw	fp,0(sp)
  803b30:	dec00204 	addi	sp,sp,8
  803b34:	f800283a 	ret

00803b38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  803b38:	defff904 	addi	sp,sp,-28
  803b3c:	df000615 	stw	fp,24(sp)
  803b40:	df000604 	addi	fp,sp,24
  803b44:	e13ffe15 	stw	r4,-8(fp)
  803b48:	e17fff15 	stw	r5,-4(fp)
  803b4c:	e0bfff17 	ldw	r2,-4(fp)
  803b50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803b54:	0005303a 	rdctl	r2,status
  803b58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803b5c:	e0fffb17 	ldw	r3,-20(fp)
  803b60:	00bfff84 	movi	r2,-2
  803b64:	1884703a 	and	r2,r3,r2
  803b68:	1001703a 	wrctl	status,r2
  
  return context;
  803b6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803b70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  803b74:	00c00044 	movi	r3,1
  803b78:	e0bffa17 	ldw	r2,-24(fp)
  803b7c:	1884983a 	sll	r2,r3,r2
  803b80:	1007883a 	mov	r3,r2
  803b84:	d0a08a17 	ldw	r2,-32216(gp)
  803b88:	1884b03a 	or	r2,r3,r2
  803b8c:	d0a08a15 	stw	r2,-32216(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803b90:	d0a08a17 	ldw	r2,-32216(gp)
  803b94:	100170fa 	wrctl	ienable,r2
  803b98:	e0bffc17 	ldw	r2,-16(fp)
  803b9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803ba0:	e0bffd17 	ldw	r2,-12(fp)
  803ba4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803ba8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  803bac:	0001883a 	nop
}
  803bb0:	e037883a 	mov	sp,fp
  803bb4:	df000017 	ldw	fp,0(sp)
  803bb8:	dec00104 	addi	sp,sp,4
  803bbc:	f800283a 	ret

00803bc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  803bc0:	defff904 	addi	sp,sp,-28
  803bc4:	df000615 	stw	fp,24(sp)
  803bc8:	df000604 	addi	fp,sp,24
  803bcc:	e13ffe15 	stw	r4,-8(fp)
  803bd0:	e17fff15 	stw	r5,-4(fp)
  803bd4:	e0bfff17 	ldw	r2,-4(fp)
  803bd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803bdc:	0005303a 	rdctl	r2,status
  803be0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803be4:	e0fffb17 	ldw	r3,-20(fp)
  803be8:	00bfff84 	movi	r2,-2
  803bec:	1884703a 	and	r2,r3,r2
  803bf0:	1001703a 	wrctl	status,r2
  
  return context;
  803bf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803bf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  803bfc:	00c00044 	movi	r3,1
  803c00:	e0bffa17 	ldw	r2,-24(fp)
  803c04:	1884983a 	sll	r2,r3,r2
  803c08:	0084303a 	nor	r2,zero,r2
  803c0c:	1007883a 	mov	r3,r2
  803c10:	d0a08a17 	ldw	r2,-32216(gp)
  803c14:	1884703a 	and	r2,r3,r2
  803c18:	d0a08a15 	stw	r2,-32216(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803c1c:	d0a08a17 	ldw	r2,-32216(gp)
  803c20:	100170fa 	wrctl	ienable,r2
  803c24:	e0bffc17 	ldw	r2,-16(fp)
  803c28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803c2c:	e0bffd17 	ldw	r2,-12(fp)
  803c30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803c34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  803c38:	0001883a 	nop
}
  803c3c:	e037883a 	mov	sp,fp
  803c40:	df000017 	ldw	fp,0(sp)
  803c44:	dec00104 	addi	sp,sp,4
  803c48:	f800283a 	ret

00803c4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  803c4c:	defffc04 	addi	sp,sp,-16
  803c50:	df000315 	stw	fp,12(sp)
  803c54:	df000304 	addi	fp,sp,12
  803c58:	e13ffe15 	stw	r4,-8(fp)
  803c5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  803c60:	000530fa 	rdctl	r2,ienable
  803c64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  803c68:	00c00044 	movi	r3,1
  803c6c:	e0bfff17 	ldw	r2,-4(fp)
  803c70:	1884983a 	sll	r2,r3,r2
  803c74:	1007883a 	mov	r3,r2
  803c78:	e0bffd17 	ldw	r2,-12(fp)
  803c7c:	1884703a 	and	r2,r3,r2
  803c80:	1004c03a 	cmpne	r2,r2,zero
  803c84:	10803fcc 	andi	r2,r2,255
}
  803c88:	e037883a 	mov	sp,fp
  803c8c:	df000017 	ldw	fp,0(sp)
  803c90:	dec00104 	addi	sp,sp,4
  803c94:	f800283a 	ret

00803c98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803c98:	defff504 	addi	sp,sp,-44
  803c9c:	dfc00a15 	stw	ra,40(sp)
  803ca0:	df000915 	stw	fp,36(sp)
  803ca4:	df000904 	addi	fp,sp,36
  803ca8:	e13ffc15 	stw	r4,-16(fp)
  803cac:	e17ffd15 	stw	r5,-12(fp)
  803cb0:	e1bffe15 	stw	r6,-8(fp)
  803cb4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  803cb8:	00bffa84 	movi	r2,-22
  803cbc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  803cc0:	e0bffd17 	ldw	r2,-12(fp)
  803cc4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803cc8:	e0bff817 	ldw	r2,-32(fp)
  803ccc:	10800808 	cmpgei	r2,r2,32
  803cd0:	1000271e 	bne	r2,zero,803d70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803cd4:	0005303a 	rdctl	r2,status
  803cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803cdc:	e0fffb17 	ldw	r3,-20(fp)
  803ce0:	00bfff84 	movi	r2,-2
  803ce4:	1884703a 	and	r2,r3,r2
  803ce8:	1001703a 	wrctl	status,r2
  
  return context;
  803cec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  803cf0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  803cf4:	008020b4 	movhi	r2,130
  803cf8:	10a6a704 	addi	r2,r2,-25956
  803cfc:	e0fff817 	ldw	r3,-32(fp)
  803d00:	180690fa 	slli	r3,r3,3
  803d04:	10c5883a 	add	r2,r2,r3
  803d08:	e0fffe17 	ldw	r3,-8(fp)
  803d0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  803d10:	008020b4 	movhi	r2,130
  803d14:	10a6a704 	addi	r2,r2,-25956
  803d18:	e0fff817 	ldw	r3,-32(fp)
  803d1c:	180690fa 	slli	r3,r3,3
  803d20:	10c5883a 	add	r2,r2,r3
  803d24:	10800104 	addi	r2,r2,4
  803d28:	e0ffff17 	ldw	r3,-4(fp)
  803d2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  803d30:	e0bffe17 	ldw	r2,-8(fp)
  803d34:	10000526 	beq	r2,zero,803d4c <alt_iic_isr_register+0xb4>
  803d38:	e0bff817 	ldw	r2,-32(fp)
  803d3c:	100b883a 	mov	r5,r2
  803d40:	e13ffc17 	ldw	r4,-16(fp)
  803d44:	0803b380 	call	803b38 <alt_ic_irq_enable>
  803d48:	00000406 	br	803d5c <alt_iic_isr_register+0xc4>
  803d4c:	e0bff817 	ldw	r2,-32(fp)
  803d50:	100b883a 	mov	r5,r2
  803d54:	e13ffc17 	ldw	r4,-16(fp)
  803d58:	0803bc00 	call	803bc0 <alt_ic_irq_disable>
  803d5c:	e0bff715 	stw	r2,-36(fp)
  803d60:	e0bffa17 	ldw	r2,-24(fp)
  803d64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803d68:	e0bff917 	ldw	r2,-28(fp)
  803d6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  803d70:	e0bff717 	ldw	r2,-36(fp)
}
  803d74:	e037883a 	mov	sp,fp
  803d78:	dfc00117 	ldw	ra,4(sp)
  803d7c:	df000017 	ldw	fp,0(sp)
  803d80:	dec00204 	addi	sp,sp,8
  803d84:	f800283a 	ret

00803d88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803d88:	defffe04 	addi	sp,sp,-8
  803d8c:	dfc00115 	stw	ra,4(sp)
  803d90:	df000015 	stw	fp,0(sp)
  803d94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803d98:	d0a03f17 	ldw	r2,-32516(gp)
  803d9c:	10000326 	beq	r2,zero,803dac <alt_get_errno+0x24>
  803da0:	d0a03f17 	ldw	r2,-32516(gp)
  803da4:	103ee83a 	callr	r2
  803da8:	00000106 	br	803db0 <alt_get_errno+0x28>
  803dac:	d0a08804 	addi	r2,gp,-32224
}
  803db0:	e037883a 	mov	sp,fp
  803db4:	dfc00117 	ldw	ra,4(sp)
  803db8:	df000017 	ldw	fp,0(sp)
  803dbc:	dec00204 	addi	sp,sp,8
  803dc0:	f800283a 	ret

00803dc4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803dc4:	deffed04 	addi	sp,sp,-76
  803dc8:	dfc01215 	stw	ra,72(sp)
  803dcc:	df001115 	stw	fp,68(sp)
  803dd0:	df001104 	addi	fp,sp,68
  803dd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803dd8:	e0bfff17 	ldw	r2,-4(fp)
  803ddc:	10000816 	blt	r2,zero,803e00 <isatty+0x3c>
  803de0:	01400304 	movi	r5,12
  803de4:	e13fff17 	ldw	r4,-4(fp)
  803de8:	080388c0 	call	80388c <__mulsi3>
  803dec:	1007883a 	mov	r3,r2
  803df0:	00802074 	movhi	r2,129
  803df4:	1086c804 	addi	r2,r2,6944
  803df8:	1885883a 	add	r2,r3,r2
  803dfc:	00000106 	br	803e04 <isatty+0x40>
  803e00:	0005883a 	mov	r2,zero
  803e04:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803e08:	e0bfef17 	ldw	r2,-68(fp)
  803e0c:	10000e26 	beq	r2,zero,803e48 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  803e10:	e0bfef17 	ldw	r2,-68(fp)
  803e14:	10800017 	ldw	r2,0(r2)
  803e18:	10800817 	ldw	r2,32(r2)
  803e1c:	1000021e 	bne	r2,zero,803e28 <isatty+0x64>
    {
      return 1;
  803e20:	00800044 	movi	r2,1
  803e24:	00000d06 	br	803e5c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803e28:	e0bff004 	addi	r2,fp,-64
  803e2c:	100b883a 	mov	r5,r2
  803e30:	e13fff17 	ldw	r4,-4(fp)
  803e34:	0803a300 	call	803a30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803e38:	e0bff117 	ldw	r2,-60(fp)
  803e3c:	10880020 	cmpeqi	r2,r2,8192
  803e40:	10803fcc 	andi	r2,r2,255
  803e44:	00000506 	br	803e5c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803e48:	0803d880 	call	803d88 <alt_get_errno>
  803e4c:	1007883a 	mov	r3,r2
  803e50:	00801444 	movi	r2,81
  803e54:	18800015 	stw	r2,0(r3)
    return 0;
  803e58:	0005883a 	mov	r2,zero
  }
}
  803e5c:	e037883a 	mov	sp,fp
  803e60:	dfc00117 	ldw	ra,4(sp)
  803e64:	df000017 	ldw	fp,0(sp)
  803e68:	dec00204 	addi	sp,sp,8
  803e6c:	f800283a 	ret

00803e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803e70:	defffe04 	addi	sp,sp,-8
  803e74:	dfc00115 	stw	ra,4(sp)
  803e78:	df000015 	stw	fp,0(sp)
  803e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803e80:	d0a03f17 	ldw	r2,-32516(gp)
  803e84:	10000326 	beq	r2,zero,803e94 <alt_get_errno+0x24>
  803e88:	d0a03f17 	ldw	r2,-32516(gp)
  803e8c:	103ee83a 	callr	r2
  803e90:	00000106 	br	803e98 <alt_get_errno+0x28>
  803e94:	d0a08804 	addi	r2,gp,-32224
}
  803e98:	e037883a 	mov	sp,fp
  803e9c:	dfc00117 	ldw	ra,4(sp)
  803ea0:	df000017 	ldw	fp,0(sp)
  803ea4:	dec00204 	addi	sp,sp,8
  803ea8:	f800283a 	ret

00803eac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803eac:	defff904 	addi	sp,sp,-28
  803eb0:	dfc00615 	stw	ra,24(sp)
  803eb4:	df000515 	stw	fp,20(sp)
  803eb8:	df000504 	addi	fp,sp,20
  803ebc:	e13ffd15 	stw	r4,-12(fp)
  803ec0:	e17ffe15 	stw	r5,-8(fp)
  803ec4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803ec8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803ecc:	e0bffd17 	ldw	r2,-12(fp)
  803ed0:	10000816 	blt	r2,zero,803ef4 <lseek+0x48>
  803ed4:	01400304 	movi	r5,12
  803ed8:	e13ffd17 	ldw	r4,-12(fp)
  803edc:	080388c0 	call	80388c <__mulsi3>
  803ee0:	1007883a 	mov	r3,r2
  803ee4:	00802074 	movhi	r2,129
  803ee8:	1086c804 	addi	r2,r2,6944
  803eec:	1885883a 	add	r2,r3,r2
  803ef0:	00000106 	br	803ef8 <lseek+0x4c>
  803ef4:	0005883a 	mov	r2,zero
  803ef8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803efc:	e0bffc17 	ldw	r2,-16(fp)
  803f00:	10001026 	beq	r2,zero,803f44 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803f04:	e0bffc17 	ldw	r2,-16(fp)
  803f08:	10800017 	ldw	r2,0(r2)
  803f0c:	10800717 	ldw	r2,28(r2)
  803f10:	10000926 	beq	r2,zero,803f38 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803f14:	e0bffc17 	ldw	r2,-16(fp)
  803f18:	10800017 	ldw	r2,0(r2)
  803f1c:	10800717 	ldw	r2,28(r2)
  803f20:	e1bfff17 	ldw	r6,-4(fp)
  803f24:	e17ffe17 	ldw	r5,-8(fp)
  803f28:	e13ffc17 	ldw	r4,-16(fp)
  803f2c:	103ee83a 	callr	r2
  803f30:	e0bffb15 	stw	r2,-20(fp)
  803f34:	00000506 	br	803f4c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803f38:	00bfde84 	movi	r2,-134
  803f3c:	e0bffb15 	stw	r2,-20(fp)
  803f40:	00000206 	br	803f4c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  803f44:	00bfebc4 	movi	r2,-81
  803f48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  803f4c:	e0bffb17 	ldw	r2,-20(fp)
  803f50:	1000070e 	bge	r2,zero,803f70 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  803f54:	0803e700 	call	803e70 <alt_get_errno>
  803f58:	1007883a 	mov	r3,r2
  803f5c:	e0bffb17 	ldw	r2,-20(fp)
  803f60:	0085c83a 	sub	r2,zero,r2
  803f64:	18800015 	stw	r2,0(r3)
    rc = -1;
  803f68:	00bfffc4 	movi	r2,-1
  803f6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  803f70:	e0bffb17 	ldw	r2,-20(fp)
}
  803f74:	e037883a 	mov	sp,fp
  803f78:	dfc00117 	ldw	ra,4(sp)
  803f7c:	df000017 	ldw	fp,0(sp)
  803f80:	dec00204 	addi	sp,sp,8
  803f84:	f800283a 	ret

00803f88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803f88:	defff904 	addi	sp,sp,-28
  803f8c:	dfc00615 	stw	ra,24(sp)
  803f90:	df000515 	stw	fp,20(sp)
  803f94:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803f98:	0009883a 	mov	r4,zero
  803f9c:	080bf300 	call	80bf30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803fa0:	0804f740 	call	804f74 <OSInit>
  803fa4:	01000044 	movi	r4,1
  803fa8:	08098d00 	call	8098d0 <OSSemCreate>
  803fac:	d0a08f15 	stw	r2,-32196(gp)
  803fb0:	01000044 	movi	r4,1
  803fb4:	08098d00 	call	8098d0 <OSSemCreate>
  803fb8:	d0a09115 	stw	r2,-32188(gp)
  803fbc:	d0a08904 	addi	r2,gp,-32220
  803fc0:	e0bffc15 	stw	r2,-16(fp)
  803fc4:	00800044 	movi	r2,1
  803fc8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  803fcc:	e0bffd0b 	ldhu	r2,-12(fp)
  803fd0:	1009883a 	mov	r4,r2
  803fd4:	08098d00 	call	8098d0 <OSSemCreate>
  803fd8:	1007883a 	mov	r3,r2
  803fdc:	e0bffc17 	ldw	r2,-16(fp)
  803fe0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803fe4:	080bf680 	call	80bf68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803fe8:	01802074 	movhi	r6,129
  803fec:	31844d04 	addi	r6,r6,4404
  803ff0:	01402074 	movhi	r5,129
  803ff4:	29444d04 	addi	r5,r5,4404
  803ff8:	01002074 	movhi	r4,129
  803ffc:	21044d04 	addi	r4,r4,4404
  804000:	08100d40 	call	8100d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  804004:	080fd580 	call	80fd58 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  804008:	01002074 	movhi	r4,129
  80400c:	213f6e04 	addi	r4,r4,-584
  804010:	0810d7c0 	call	810d7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  804014:	d0a08b17 	ldw	r2,-32212(gp)
  804018:	d0e08c17 	ldw	r3,-32208(gp)
  80401c:	d1208d17 	ldw	r4,-32204(gp)
  804020:	200d883a 	mov	r6,r4
  804024:	180b883a 	mov	r5,r3
  804028:	1009883a 	mov	r4,r2
  80402c:	08007f40 	call	8007f4 <main>
  804030:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  804034:	01000044 	movi	r4,1
  804038:	08038f00 	call	8038f0 <close>
  exit (result);
  80403c:	e13ffb17 	ldw	r4,-20(fp)
  804040:	0810d900 	call	810d90 <exit>

00804044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804044:	defffe04 	addi	sp,sp,-8
  804048:	dfc00115 	stw	ra,4(sp)
  80404c:	df000015 	stw	fp,0(sp)
  804050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804054:	d0a03f17 	ldw	r2,-32516(gp)
  804058:	10000326 	beq	r2,zero,804068 <alt_get_errno+0x24>
  80405c:	d0a03f17 	ldw	r2,-32516(gp)
  804060:	103ee83a 	callr	r2
  804064:	00000106 	br	80406c <alt_get_errno+0x28>
  804068:	d0a08804 	addi	r2,gp,-32224
}
  80406c:	e037883a 	mov	sp,fp
  804070:	dfc00117 	ldw	ra,4(sp)
  804074:	df000017 	ldw	fp,0(sp)
  804078:	dec00204 	addi	sp,sp,8
  80407c:	f800283a 	ret

00804080 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  804080:	defff904 	addi	sp,sp,-28
  804084:	dfc00615 	stw	ra,24(sp)
  804088:	df000515 	stw	fp,20(sp)
  80408c:	df000504 	addi	fp,sp,20
  804090:	e13ffd15 	stw	r4,-12(fp)
  804094:	e17ffe15 	stw	r5,-8(fp)
  804098:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80409c:	e0bffd17 	ldw	r2,-12(fp)
  8040a0:	10000816 	blt	r2,zero,8040c4 <read+0x44>
  8040a4:	01400304 	movi	r5,12
  8040a8:	e13ffd17 	ldw	r4,-12(fp)
  8040ac:	080388c0 	call	80388c <__mulsi3>
  8040b0:	1007883a 	mov	r3,r2
  8040b4:	00802074 	movhi	r2,129
  8040b8:	1086c804 	addi	r2,r2,6944
  8040bc:	1885883a 	add	r2,r3,r2
  8040c0:	00000106 	br	8040c8 <read+0x48>
  8040c4:	0005883a 	mov	r2,zero
  8040c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8040cc:	e0bffb17 	ldw	r2,-20(fp)
  8040d0:	10002226 	beq	r2,zero,80415c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8040d4:	e0bffb17 	ldw	r2,-20(fp)
  8040d8:	10800217 	ldw	r2,8(r2)
  8040dc:	108000cc 	andi	r2,r2,3
  8040e0:	10800060 	cmpeqi	r2,r2,1
  8040e4:	1000181e 	bne	r2,zero,804148 <read+0xc8>
        (fd->dev->read))
  8040e8:	e0bffb17 	ldw	r2,-20(fp)
  8040ec:	10800017 	ldw	r2,0(r2)
  8040f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8040f4:	10001426 	beq	r2,zero,804148 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8040f8:	e0bffb17 	ldw	r2,-20(fp)
  8040fc:	10800017 	ldw	r2,0(r2)
  804100:	10800517 	ldw	r2,20(r2)
  804104:	e0ffff17 	ldw	r3,-4(fp)
  804108:	180d883a 	mov	r6,r3
  80410c:	e17ffe17 	ldw	r5,-8(fp)
  804110:	e13ffb17 	ldw	r4,-20(fp)
  804114:	103ee83a 	callr	r2
  804118:	e0bffc15 	stw	r2,-16(fp)
  80411c:	e0bffc17 	ldw	r2,-16(fp)
  804120:	1000070e 	bge	r2,zero,804140 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  804124:	08040440 	call	804044 <alt_get_errno>
  804128:	1007883a 	mov	r3,r2
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	0085c83a 	sub	r2,zero,r2
  804134:	18800015 	stw	r2,0(r3)
          return -1;
  804138:	00bfffc4 	movi	r2,-1
  80413c:	00000c06 	br	804170 <read+0xf0>
        }
        return rval;
  804140:	e0bffc17 	ldw	r2,-16(fp)
  804144:	00000a06 	br	804170 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  804148:	08040440 	call	804044 <alt_get_errno>
  80414c:	1007883a 	mov	r3,r2
  804150:	00800344 	movi	r2,13
  804154:	18800015 	stw	r2,0(r3)
  804158:	00000406 	br	80416c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80415c:	08040440 	call	804044 <alt_get_errno>
  804160:	1007883a 	mov	r3,r2
  804164:	00801444 	movi	r2,81
  804168:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80416c:	00bfffc4 	movi	r2,-1
}
  804170:	e037883a 	mov	sp,fp
  804174:	dfc00117 	ldw	ra,4(sp)
  804178:	df000017 	ldw	fp,0(sp)
  80417c:	dec00204 	addi	sp,sp,8
  804180:	f800283a 	ret

00804184 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  804184:	defffc04 	addi	sp,sp,-16
  804188:	dfc00315 	stw	ra,12(sp)
  80418c:	df000215 	stw	fp,8(sp)
  804190:	dc000115 	stw	r16,4(sp)
  804194:	df000204 	addi	fp,sp,8
  804198:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80419c:	e0bffe17 	ldw	r2,-8(fp)
  8041a0:	108000d0 	cmplti	r2,r2,3
  8041a4:	1000111e 	bne	r2,zero,8041ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  8041a8:	04002074 	movhi	r16,129
  8041ac:	8406c804 	addi	r16,r16,6944
  8041b0:	e0bffe17 	ldw	r2,-8(fp)
  8041b4:	01400304 	movi	r5,12
  8041b8:	1009883a 	mov	r4,r2
  8041bc:	080388c0 	call	80388c <__mulsi3>
  8041c0:	8085883a 	add	r2,r16,r2
  8041c4:	10800204 	addi	r2,r2,8
  8041c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8041cc:	04002074 	movhi	r16,129
  8041d0:	8406c804 	addi	r16,r16,6944
  8041d4:	e0bffe17 	ldw	r2,-8(fp)
  8041d8:	01400304 	movi	r5,12
  8041dc:	1009883a 	mov	r4,r2
  8041e0:	080388c0 	call	80388c <__mulsi3>
  8041e4:	8085883a 	add	r2,r16,r2
  8041e8:	10000015 	stw	zero,0(r2)
  }
}
  8041ec:	0001883a 	nop
  8041f0:	e6ffff04 	addi	sp,fp,-4
  8041f4:	dfc00217 	ldw	ra,8(sp)
  8041f8:	df000117 	ldw	fp,4(sp)
  8041fc:	dc000017 	ldw	r16,0(sp)
  804200:	dec00304 	addi	sp,sp,12
  804204:	f800283a 	ret

00804208 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  804208:	defff904 	addi	sp,sp,-28
  80420c:	df000615 	stw	fp,24(sp)
  804210:	df000604 	addi	fp,sp,24
  804214:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804218:	0005303a 	rdctl	r2,status
  80421c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804220:	e0fffe17 	ldw	r3,-8(fp)
  804224:	00bfff84 	movi	r2,-2
  804228:	1884703a 	and	r2,r3,r2
  80422c:	1001703a 	wrctl	status,r2
  
  return context;
  804230:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  804234:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804238:	d0a04117 	ldw	r2,-32508(gp)
  80423c:	10c000c4 	addi	r3,r2,3
  804240:	00bfff04 	movi	r2,-4
  804244:	1884703a 	and	r2,r3,r2
  804248:	d0a04115 	stw	r2,-32508(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80424c:	d0e04117 	ldw	r3,-32508(gp)
  804250:	e0bfff17 	ldw	r2,-4(fp)
  804254:	1887883a 	add	r3,r3,r2
  804258:	00804034 	movhi	r2,256
  80425c:	10800004 	addi	r2,r2,0
  804260:	10c0062e 	bgeu	r2,r3,80427c <sbrk+0x74>
  804264:	e0bffb17 	ldw	r2,-20(fp)
  804268:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80426c:	e0bffa17 	ldw	r2,-24(fp)
  804270:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804274:	00bfffc4 	movi	r2,-1
  804278:	00000b06 	br	8042a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80427c:	d0a04117 	ldw	r2,-32508(gp)
  804280:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  804284:	d0e04117 	ldw	r3,-32508(gp)
  804288:	e0bfff17 	ldw	r2,-4(fp)
  80428c:	1885883a 	add	r2,r3,r2
  804290:	d0a04115 	stw	r2,-32508(gp)
  804294:	e0bffb17 	ldw	r2,-20(fp)
  804298:	e0bffc15 	stw	r2,-16(fp)
  80429c:	e0bffc17 	ldw	r2,-16(fp)
  8042a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8042a4:	e0bffd17 	ldw	r2,-12(fp)
} 
  8042a8:	e037883a 	mov	sp,fp
  8042ac:	df000017 	ldw	fp,0(sp)
  8042b0:	dec00104 	addi	sp,sp,4
  8042b4:	f800283a 	ret

008042b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8042b8:	defffe04 	addi	sp,sp,-8
  8042bc:	dfc00115 	stw	ra,4(sp)
  8042c0:	df000015 	stw	fp,0(sp)
  8042c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8042c8:	d0a03f17 	ldw	r2,-32516(gp)
  8042cc:	10000326 	beq	r2,zero,8042dc <alt_get_errno+0x24>
  8042d0:	d0a03f17 	ldw	r2,-32516(gp)
  8042d4:	103ee83a 	callr	r2
  8042d8:	00000106 	br	8042e0 <alt_get_errno+0x28>
  8042dc:	d0a08804 	addi	r2,gp,-32224
}
  8042e0:	e037883a 	mov	sp,fp
  8042e4:	dfc00117 	ldw	ra,4(sp)
  8042e8:	df000017 	ldw	fp,0(sp)
  8042ec:	dec00204 	addi	sp,sp,8
  8042f0:	f800283a 	ret

008042f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8042f4:	defff904 	addi	sp,sp,-28
  8042f8:	dfc00615 	stw	ra,24(sp)
  8042fc:	df000515 	stw	fp,20(sp)
  804300:	df000504 	addi	fp,sp,20
  804304:	e13ffd15 	stw	r4,-12(fp)
  804308:	e17ffe15 	stw	r5,-8(fp)
  80430c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804310:	e0bffd17 	ldw	r2,-12(fp)
  804314:	10000816 	blt	r2,zero,804338 <write+0x44>
  804318:	01400304 	movi	r5,12
  80431c:	e13ffd17 	ldw	r4,-12(fp)
  804320:	080388c0 	call	80388c <__mulsi3>
  804324:	1007883a 	mov	r3,r2
  804328:	00802074 	movhi	r2,129
  80432c:	1086c804 	addi	r2,r2,6944
  804330:	1885883a 	add	r2,r3,r2
  804334:	00000106 	br	80433c <write+0x48>
  804338:	0005883a 	mov	r2,zero
  80433c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804340:	e0bffb17 	ldw	r2,-20(fp)
  804344:	10002126 	beq	r2,zero,8043cc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  804348:	e0bffb17 	ldw	r2,-20(fp)
  80434c:	10800217 	ldw	r2,8(r2)
  804350:	108000cc 	andi	r2,r2,3
  804354:	10001826 	beq	r2,zero,8043b8 <write+0xc4>
  804358:	e0bffb17 	ldw	r2,-20(fp)
  80435c:	10800017 	ldw	r2,0(r2)
  804360:	10800617 	ldw	r2,24(r2)
  804364:	10001426 	beq	r2,zero,8043b8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  804368:	e0bffb17 	ldw	r2,-20(fp)
  80436c:	10800017 	ldw	r2,0(r2)
  804370:	10800617 	ldw	r2,24(r2)
  804374:	e0ffff17 	ldw	r3,-4(fp)
  804378:	180d883a 	mov	r6,r3
  80437c:	e17ffe17 	ldw	r5,-8(fp)
  804380:	e13ffb17 	ldw	r4,-20(fp)
  804384:	103ee83a 	callr	r2
  804388:	e0bffc15 	stw	r2,-16(fp)
  80438c:	e0bffc17 	ldw	r2,-16(fp)
  804390:	1000070e 	bge	r2,zero,8043b0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  804394:	08042b80 	call	8042b8 <alt_get_errno>
  804398:	1007883a 	mov	r3,r2
  80439c:	e0bffc17 	ldw	r2,-16(fp)
  8043a0:	0085c83a 	sub	r2,zero,r2
  8043a4:	18800015 	stw	r2,0(r3)
        return -1;
  8043a8:	00bfffc4 	movi	r2,-1
  8043ac:	00000c06 	br	8043e0 <write+0xec>
      }
      return rval;
  8043b0:	e0bffc17 	ldw	r2,-16(fp)
  8043b4:	00000a06 	br	8043e0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8043b8:	08042b80 	call	8042b8 <alt_get_errno>
  8043bc:	1007883a 	mov	r3,r2
  8043c0:	00800344 	movi	r2,13
  8043c4:	18800015 	stw	r2,0(r3)
  8043c8:	00000406 	br	8043dc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8043cc:	08042b80 	call	8042b8 <alt_get_errno>
  8043d0:	1007883a 	mov	r3,r2
  8043d4:	00801444 	movi	r2,81
  8043d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8043dc:	00bfffc4 	movi	r2,-1
}
  8043e0:	e037883a 	mov	sp,fp
  8043e4:	dfc00117 	ldw	ra,4(sp)
  8043e8:	df000017 	ldw	fp,0(sp)
  8043ec:	dec00204 	addi	sp,sp,8
  8043f0:	f800283a 	ret

008043f4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  8043f4:	deffdf04 	addi	sp,sp,-132
  8043f8:	dfc02015 	stw	ra,128(sp)
  8043fc:	df001f15 	stw	fp,124(sp)
  804400:	df001f04 	addi	fp,sp,124
  804404:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  804408:	e0bfe204 	addi	r2,fp,-120
  80440c:	100b883a 	mov	r5,r2
  804410:	01003fc4 	movi	r4,255
  804414:	080b8580 	call	80b858 <OSTaskQuery>
  804418:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80441c:	e0bffe83 	ldbu	r2,-6(fp)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	10001e1e 	bne	r2,zero,8044a0 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  804428:	e0bfee83 	ldbu	r2,-70(fp)
  80442c:	10803fcc 	andi	r2,r2,255
  804430:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  804434:	d0a08f17 	ldw	r2,-32196(gp)
  804438:	e0fffd04 	addi	r3,fp,-12
  80443c:	180b883a 	mov	r5,r3
  804440:	1009883a 	mov	r4,r2
  804444:	080a0700 	call	80a070 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  804448:	e0bffe43 	ldbu	r2,-7(fp)
  80444c:	10803fcc 	andi	r2,r2,255
  804450:	10000726 	beq	r2,zero,804470 <__env_lock+0x7c>
  804454:	d0a04217 	ldw	r2,-32504(gp)
  804458:	e0ffe117 	ldw	r3,-124(fp)
  80445c:	1880041e 	bne	r3,r2,804470 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  804460:	d0a08e17 	ldw	r2,-32200(gp)
  804464:	10800044 	addi	r2,r2,1
  804468:	d0a08e15 	stw	r2,-32200(gp)
  80446c:	00000a06 	br	804498 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  804470:	d0a08f17 	ldw	r2,-32196(gp)
  804474:	e0fffe84 	addi	r3,fp,-6
  804478:	180d883a 	mov	r6,r3
  80447c:	000b883a 	mov	r5,zero
  804480:	1009883a 	mov	r4,r2
  804484:	0809be80 	call	809be8 <OSSemPend>
    locks  = 1;
  804488:	00800044 	movi	r2,1
  80448c:	d0a08e15 	stw	r2,-32200(gp)
    lockid = id;
  804490:	e0bfe117 	ldw	r2,-124(fp)
  804494:	d0a04215 	stw	r2,-32504(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  804498:	0001883a 	nop
  80449c:	00000106 	br	8044a4 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  8044a0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8044a4:	e037883a 	mov	sp,fp
  8044a8:	dfc00117 	ldw	ra,4(sp)
  8044ac:	df000017 	ldw	fp,0(sp)
  8044b0:	dec00204 	addi	sp,sp,8
  8044b4:	f800283a 	ret

008044b8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  8044b8:	defffd04 	addi	sp,sp,-12
  8044bc:	dfc00215 	stw	ra,8(sp)
  8044c0:	df000115 	stw	fp,4(sp)
  8044c4:	df000104 	addi	fp,sp,4
  8044c8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8044cc:	d0a08e17 	ldw	r2,-32200(gp)
  8044d0:	10000b26 	beq	r2,zero,804500 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8044d4:	d0a08e17 	ldw	r2,-32200(gp)
  8044d8:	10bfffc4 	addi	r2,r2,-1
  8044dc:	d0a08e15 	stw	r2,-32200(gp)
  8044e0:	d0a08e17 	ldw	r2,-32200(gp)
  8044e4:	1000071e 	bne	r2,zero,804504 <__env_unlock+0x4c>
  {
    lockid = -1;
  8044e8:	00bfffc4 	movi	r2,-1
  8044ec:	d0a04215 	stw	r2,-32504(gp)
    OSSemPost( alt_envsem );
  8044f0:	d0a08f17 	ldw	r2,-32196(gp)
  8044f4:	1009883a 	mov	r4,r2
  8044f8:	0809f600 	call	809f60 <OSSemPost>
  8044fc:	00000106 	br	804504 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  804500:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  804504:	e037883a 	mov	sp,fp
  804508:	dfc00117 	ldw	ra,4(sp)
  80450c:	df000017 	ldw	fp,0(sp)
  804510:	dec00204 	addi	sp,sp,8
  804514:	f800283a 	ret

00804518 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  804518:	deffdb04 	addi	sp,sp,-148
  80451c:	dfc02415 	stw	ra,144(sp)
  804520:	df002315 	stw	fp,140(sp)
  804524:	df002304 	addi	fp,sp,140
  804528:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80452c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  804530:	d0a09243 	ldbu	r2,-32183(gp)
  804534:	10803fcc 	andi	r2,r2,255
  804538:	10800060 	cmpeqi	r2,r2,1
  80453c:	10003626 	beq	r2,zero,804618 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  804540:	e0bfe204 	addi	r2,fp,-120
  804544:	100b883a 	mov	r5,r2
  804548:	01003fc4 	movi	r4,255
  80454c:	080b8580 	call	80b858 <OSTaskQuery>
  804550:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  804554:	e0bffe83 	ldbu	r2,-6(fp)
  804558:	10803fcc 	andi	r2,r2,255
  80455c:	1000301e 	bne	r2,zero,804620 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  804560:	e0bfee83 	ldbu	r2,-70(fp)
  804564:	10803fcc 	andi	r2,r2,255
  804568:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80456c:	d0a09117 	ldw	r2,-32188(gp)
  804570:	e0fffd04 	addi	r3,fp,-12
  804574:	180b883a 	mov	r5,r3
  804578:	1009883a 	mov	r4,r2
  80457c:	080a0700 	call	80a070 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804580:	0005303a 	rdctl	r2,status
  804584:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804588:	e0ffe117 	ldw	r3,-124(fp)
  80458c:	00bfff84 	movi	r2,-2
  804590:	1884703a 	and	r2,r3,r2
  804594:	1001703a 	wrctl	status,r2
  
  return context;
  804598:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  80459c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  8045a0:	e0bffd0b 	ldhu	r2,-12(fp)
  8045a4:	10bfffcc 	andi	r2,r2,65535
  8045a8:	10000b1e 	bne	r2,zero,8045d8 <__malloc_lock+0xc0>
  8045ac:	d0a04317 	ldw	r2,-32500(gp)
  8045b0:	e0ffde17 	ldw	r3,-136(fp)
  8045b4:	1880081e 	bne	r3,r2,8045d8 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  8045b8:	d0a09017 	ldw	r2,-32192(gp)
  8045bc:	10800044 	addi	r2,r2,1
  8045c0:	d0a09015 	stw	r2,-32192(gp)
  8045c4:	e0bfdd17 	ldw	r2,-140(fp)
  8045c8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8045cc:	e0bfdf17 	ldw	r2,-132(fp)
  8045d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  8045d4:	00000e06 	br	804610 <__malloc_lock+0xf8>
  8045d8:	e0bfdd17 	ldw	r2,-140(fp)
  8045dc:	e0bfe015 	stw	r2,-128(fp)
  8045e0:	e0bfe017 	ldw	r2,-128(fp)
  8045e4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8045e8:	d0a09117 	ldw	r2,-32188(gp)
  8045ec:	e0fffe84 	addi	r3,fp,-6
  8045f0:	180d883a 	mov	r6,r3
  8045f4:	000b883a 	mov	r5,zero
  8045f8:	1009883a 	mov	r4,r2
  8045fc:	0809be80 	call	809be8 <OSSemPend>
    locks  = 1;
  804600:	00800044 	movi	r2,1
  804604:	d0a09015 	stw	r2,-32192(gp)
    lockid = id;
  804608:	e0bfde17 	ldw	r2,-136(fp)
  80460c:	d0a04315 	stw	r2,-32500(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  804610:	0001883a 	nop
  804614:	00000306 	br	804624 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  804618:	0001883a 	nop
  80461c:	00000106 	br	804624 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  804620:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  804624:	e037883a 	mov	sp,fp
  804628:	dfc00117 	ldw	ra,4(sp)
  80462c:	df000017 	ldw	fp,0(sp)
  804630:	dec00204 	addi	sp,sp,8
  804634:	f800283a 	ret

00804638 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  804638:	defff804 	addi	sp,sp,-32
  80463c:	dfc00715 	stw	ra,28(sp)
  804640:	df000615 	stw	fp,24(sp)
  804644:	df000604 	addi	fp,sp,24
  804648:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80464c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  804650:	d0a09243 	ldbu	r2,-32183(gp)
  804654:	10803fcc 	andi	r2,r2,255
  804658:	10800060 	cmpeqi	r2,r2,1
  80465c:	10002326 	beq	r2,zero,8046ec <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804660:	0005303a 	rdctl	r2,status
  804664:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804668:	e0fffe17 	ldw	r3,-8(fp)
  80466c:	00bfff84 	movi	r2,-2
  804670:	1884703a 	and	r2,r3,r2
  804674:	1001703a 	wrctl	status,r2
  
  return context;
  804678:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  80467c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  804680:	d0a09017 	ldw	r2,-32192(gp)
  804684:	1000051e 	bne	r2,zero,80469c <__malloc_unlock+0x64>
  804688:	e0bffa17 	ldw	r2,-24(fp)
  80468c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804690:	e0bffb17 	ldw	r2,-20(fp)
  804694:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  804698:	00001506 	br	8046f0 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80469c:	d0a09017 	ldw	r2,-32192(gp)
  8046a0:	10bfffc4 	addi	r2,r2,-1
  8046a4:	d0a09015 	stw	r2,-32192(gp)
  8046a8:	d0a09017 	ldw	r2,-32192(gp)
  8046ac:	10000a1e 	bne	r2,zero,8046d8 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  8046b0:	00bfffc4 	movi	r2,-1
  8046b4:	d0a04315 	stw	r2,-32500(gp)
  8046b8:	e0bffa17 	ldw	r2,-24(fp)
  8046bc:	e0bffc15 	stw	r2,-16(fp)
  8046c0:	e0bffc17 	ldw	r2,-16(fp)
  8046c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  8046c8:	d0a09117 	ldw	r2,-32188(gp)
  8046cc:	1009883a 	mov	r4,r2
  8046d0:	0809f600 	call	809f60 <OSSemPost>
  8046d4:	00000606 	br	8046f0 <__malloc_unlock+0xb8>
  8046d8:	e0bffa17 	ldw	r2,-24(fp)
  8046dc:	e0bffd15 	stw	r2,-12(fp)
  8046e0:	e0bffd17 	ldw	r2,-12(fp)
  8046e4:	1001703a 	wrctl	status,r2
  8046e8:	00000106 	br	8046f0 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  8046ec:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8046f0:	e037883a 	mov	sp,fp
  8046f4:	dfc00117 	ldw	ra,4(sp)
  8046f8:	df000017 	ldw	fp,0(sp)
  8046fc:	dec00204 	addi	sp,sp,8
  804700:	f800283a 	ret

00804704 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  804704:	defff704 	addi	sp,sp,-36
  804708:	dfc00815 	stw	ra,32(sp)
  80470c:	df000715 	stw	fp,28(sp)
  804710:	df000704 	addi	fp,sp,28
  804714:	e13ffd15 	stw	r4,-12(fp)
  804718:	e17ffe15 	stw	r5,-8(fp)
  80471c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804720:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804724:	e0bfff17 	ldw	r2,-4(fp)
  804728:	1000021e 	bne	r2,zero,804734 <OSEventNameGet+0x30>
        return (0);
  80472c:	0005883a 	mov	r2,zero
  804730:	00003706 	br	804810 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  804734:	e0bffd17 	ldw	r2,-12(fp)
  804738:	1000051e 	bne	r2,zero,804750 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80473c:	e0bfff17 	ldw	r2,-4(fp)
  804740:	00c00104 	movi	r3,4
  804744:	10c00005 	stb	r3,0(r2)
        return (0);
  804748:	0005883a 	mov	r2,zero
  80474c:	00003006 	br	804810 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  804750:	e0bffe17 	ldw	r2,-8(fp)
  804754:	1000051e 	bne	r2,zero,80476c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  804758:	e0bfff17 	ldw	r2,-4(fp)
  80475c:	00c00304 	movi	r3,12
  804760:	10c00005 	stb	r3,0(r2)
        return (0);
  804764:	0005883a 	mov	r2,zero
  804768:	00002906 	br	804810 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80476c:	d0a0a003 	ldbu	r2,-32128(gp)
  804770:	10803fcc 	andi	r2,r2,255
  804774:	10000526 	beq	r2,zero,80478c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  804778:	e0bfff17 	ldw	r2,-4(fp)
  80477c:	00c00444 	movi	r3,17
  804780:	10c00005 	stb	r3,0(r2)
        return (0);
  804784:	0005883a 	mov	r2,zero
  804788:	00002106 	br	804810 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  80478c:	e0bffd17 	ldw	r2,-12(fp)
  804790:	10800003 	ldbu	r2,0(r2)
  804794:	10803fcc 	andi	r2,r2,255
  804798:	10bfffc4 	addi	r2,r2,-1
  80479c:	10800128 	cmpgeui	r2,r2,4
  8047a0:	10000526 	beq	r2,zero,8047b8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8047a4:	e0bfff17 	ldw	r2,-4(fp)
  8047a8:	00c00044 	movi	r3,1
  8047ac:	10c00005 	stb	r3,0(r2)
             return (0);
  8047b0:	0005883a 	mov	r2,zero
  8047b4:	00001606 	br	804810 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  8047b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8047bc:	0005303a 	rdctl	r2,status
  8047c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8047c4:	e0fffb17 	ldw	r3,-20(fp)
  8047c8:	00bfff84 	movi	r2,-2
  8047cc:	1884703a 	and	r2,r3,r2
  8047d0:	1001703a 	wrctl	status,r2
  
  return context;
  8047d4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  8047d8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  8047dc:	e0bffd17 	ldw	r2,-12(fp)
  8047e0:	10800384 	addi	r2,r2,14
  8047e4:	100b883a 	mov	r5,r2
  8047e8:	e13ffe17 	ldw	r4,-8(fp)
  8047ec:	08061880 	call	806188 <OS_StrCopy>
  8047f0:	e0bffa05 	stb	r2,-24(fp)
  8047f4:	e0bff917 	ldw	r2,-28(fp)
  8047f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8047fc:	e0bffc17 	ldw	r2,-16(fp)
  804800:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804804:	e0bfff17 	ldw	r2,-4(fp)
  804808:	10000005 	stb	zero,0(r2)
    return (len);
  80480c:	e0bffa03 	ldbu	r2,-24(fp)
}
  804810:	e037883a 	mov	sp,fp
  804814:	dfc00117 	ldw	ra,4(sp)
  804818:	df000017 	ldw	fp,0(sp)
  80481c:	dec00204 	addi	sp,sp,8
  804820:	f800283a 	ret

00804824 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  804824:	defff604 	addi	sp,sp,-40
  804828:	dfc00915 	stw	ra,36(sp)
  80482c:	df000815 	stw	fp,32(sp)
  804830:	df000804 	addi	fp,sp,32
  804834:	e13ffd15 	stw	r4,-12(fp)
  804838:	e17ffe15 	stw	r5,-8(fp)
  80483c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804840:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804844:	e0bfff17 	ldw	r2,-4(fp)
  804848:	10004026 	beq	r2,zero,80494c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80484c:	e0bffd17 	ldw	r2,-12(fp)
  804850:	1000041e 	bne	r2,zero,804864 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  804854:	e0bfff17 	ldw	r2,-4(fp)
  804858:	00c00104 	movi	r3,4
  80485c:	10c00005 	stb	r3,0(r2)
        return;
  804860:	00003b06 	br	804950 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  804864:	e0bffe17 	ldw	r2,-8(fp)
  804868:	1000041e 	bne	r2,zero,80487c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  80486c:	e0bfff17 	ldw	r2,-4(fp)
  804870:	00c00304 	movi	r3,12
  804874:	10c00005 	stb	r3,0(r2)
        return;
  804878:	00003506 	br	804950 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80487c:	d0a0a003 	ldbu	r2,-32128(gp)
  804880:	10803fcc 	andi	r2,r2,255
  804884:	10000426 	beq	r2,zero,804898 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  804888:	e0bfff17 	ldw	r2,-4(fp)
  80488c:	00c00484 	movi	r3,18
  804890:	10c00005 	stb	r3,0(r2)
        return;
  804894:	00002e06 	br	804950 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  804898:	e0bffd17 	ldw	r2,-12(fp)
  80489c:	10800003 	ldbu	r2,0(r2)
  8048a0:	10803fcc 	andi	r2,r2,255
  8048a4:	10bfffc4 	addi	r2,r2,-1
  8048a8:	10800128 	cmpgeui	r2,r2,4
  8048ac:	10000426 	beq	r2,zero,8048c0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8048b0:	e0bfff17 	ldw	r2,-4(fp)
  8048b4:	00c00044 	movi	r3,1
  8048b8:	10c00005 	stb	r3,0(r2)
             return;
  8048bc:	00002406 	br	804950 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  8048c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8048c4:	0005303a 	rdctl	r2,status
  8048c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8048cc:	e0fffc17 	ldw	r3,-16(fp)
  8048d0:	00bfff84 	movi	r2,-2
  8048d4:	1884703a 	and	r2,r3,r2
  8048d8:	1001703a 	wrctl	status,r2
  
  return context;
  8048dc:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  8048e0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  8048e4:	e13ffe17 	ldw	r4,-8(fp)
  8048e8:	08061fc0 	call	8061fc <OS_StrLen>
  8048ec:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  8048f0:	e0bffa03 	ldbu	r2,-24(fp)
  8048f4:	10800830 	cmpltui	r2,r2,32
  8048f8:	1000081e 	bne	r2,zero,80491c <OSEventNameSet+0xf8>
  8048fc:	e0bff817 	ldw	r2,-32(fp)
  804900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804904:	e0bff917 	ldw	r2,-28(fp)
  804908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80490c:	e0bfff17 	ldw	r2,-4(fp)
  804910:	00c002c4 	movi	r3,11
  804914:	10c00005 	stb	r3,0(r2)
        return;
  804918:	00000d06 	br	804950 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80491c:	e0bffd17 	ldw	r2,-12(fp)
  804920:	10800384 	addi	r2,r2,14
  804924:	e17ffe17 	ldw	r5,-8(fp)
  804928:	1009883a 	mov	r4,r2
  80492c:	08061880 	call	806188 <OS_StrCopy>
  804930:	e0bff817 	ldw	r2,-32(fp)
  804934:	e0bffb15 	stw	r2,-20(fp)
  804938:	e0bffb17 	ldw	r2,-20(fp)
  80493c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804940:	e0bfff17 	ldw	r2,-4(fp)
  804944:	10000005 	stb	zero,0(r2)
  804948:	00000106 	br	804950 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  80494c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  804950:	e037883a 	mov	sp,fp
  804954:	dfc00117 	ldw	ra,4(sp)
  804958:	df000017 	ldw	fp,0(sp)
  80495c:	dec00204 	addi	sp,sp,8
  804960:	f800283a 	ret

00804964 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  804964:	deffed04 	addi	sp,sp,-76
  804968:	dfc01215 	stw	ra,72(sp)
  80496c:	df001115 	stw	fp,68(sp)
  804970:	df001104 	addi	fp,sp,68
  804974:	e13ffc15 	stw	r4,-16(fp)
  804978:	e17ffd15 	stw	r5,-12(fp)
  80497c:	e1bffe15 	stw	r6,-8(fp)
  804980:	3805883a 	mov	r2,r7
  804984:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  804988:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80498c:	e0800217 	ldw	r2,8(fp)
  804990:	1000021e 	bne	r2,zero,80499c <OSEventPendMulti+0x38>
        return (0);
  804994:	0005883a 	mov	r2,zero
  804998:	00017106 	br	804f60 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80499c:	e0bffc17 	ldw	r2,-16(fp)
  8049a0:	1000051e 	bne	r2,zero,8049b8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  8049a4:	e0800217 	ldw	r2,8(fp)
  8049a8:	00c00104 	movi	r3,4
  8049ac:	10c00005 	stb	r3,0(r2)
        return (0);
  8049b0:	0005883a 	mov	r2,zero
  8049b4:	00016a06 	br	804f60 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  8049b8:	e0bffd17 	ldw	r2,-12(fp)
  8049bc:	1000051e 	bne	r2,zero,8049d4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  8049c0:	e0800217 	ldw	r2,8(fp)
  8049c4:	00c00104 	movi	r3,4
  8049c8:	10c00005 	stb	r3,0(r2)
        return (0);
  8049cc:	0005883a 	mov	r2,zero
  8049d0:	00016306 	br	804f60 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  8049d4:	e0bffe17 	ldw	r2,-8(fp)
  8049d8:	1000051e 	bne	r2,zero,8049f0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  8049dc:	e0800217 	ldw	r2,8(fp)
  8049e0:	00c00104 	movi	r3,4
  8049e4:	10c00005 	stb	r3,0(r2)
        return (0);
  8049e8:	0005883a 	mov	r2,zero
  8049ec:	00015c06 	br	804f60 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8049f0:	e0bffd17 	ldw	r2,-12(fp)
  8049f4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  8049f8:	e0bffc17 	ldw	r2,-16(fp)
  8049fc:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  804a00:	e0bfef17 	ldw	r2,-68(fp)
  804a04:	10800017 	ldw	r2,0(r2)
  804a08:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  804a0c:	00001906 	br	804a74 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  804a10:	e0bff017 	ldw	r2,-64(fp)
  804a14:	10800003 	ldbu	r2,0(r2)
  804a18:	10803fcc 	andi	r2,r2,255
  804a1c:	10c000a0 	cmpeqi	r3,r2,2
  804a20:	1800091e 	bne	r3,zero,804a48 <OSEventPendMulti+0xe4>
  804a24:	10c000e0 	cmpeqi	r3,r2,3
  804a28:	1800091e 	bne	r3,zero,804a50 <OSEventPendMulti+0xec>
  804a2c:	10800060 	cmpeqi	r2,r2,1
  804a30:	1000091e 	bne	r2,zero,804a58 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  804a34:	e0800217 	ldw	r2,8(fp)
  804a38:	00c00044 	movi	r3,1
  804a3c:	10c00005 	stb	r3,0(r2)
                 return (0);
  804a40:	0005883a 	mov	r2,zero
  804a44:	00014606 	br	804f60 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  804a48:	0001883a 	nop
  804a4c:	00000306 	br	804a5c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  804a50:	0001883a 	nop
  804a54:	00000106 	br	804a5c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  804a58:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  804a5c:	e0bfef17 	ldw	r2,-68(fp)
  804a60:	10800104 	addi	r2,r2,4
  804a64:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  804a68:	e0bfef17 	ldw	r2,-68(fp)
  804a6c:	10800017 	ldw	r2,0(r2)
  804a70:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  804a74:	e0bff017 	ldw	r2,-64(fp)
  804a78:	103fe51e 	bne	r2,zero,804a10 <__alt_mem_epcs_flash_controller_0+0xff7fba10>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  804a7c:	d0a0a003 	ldbu	r2,-32128(gp)
  804a80:	10803fcc 	andi	r2,r2,255
  804a84:	10000526 	beq	r2,zero,804a9c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  804a88:	e0800217 	ldw	r2,8(fp)
  804a8c:	00c00084 	movi	r3,2
  804a90:	10c00005 	stb	r3,0(r2)
        return (0);
  804a94:	0005883a 	mov	r2,zero
  804a98:	00013106 	br	804f60 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  804a9c:	d0a09203 	ldbu	r2,-32184(gp)
  804aa0:	10803fcc 	andi	r2,r2,255
  804aa4:	10000526 	beq	r2,zero,804abc <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  804aa8:	e0800217 	ldw	r2,8(fp)
  804aac:	00c00344 	movi	r3,13
  804ab0:	10c00005 	stb	r3,0(r2)
        return (0);
  804ab4:	0005883a 	mov	r2,zero
  804ab8:	00012906 	br	804f60 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804abc:	0005303a 	rdctl	r2,status
  804ac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ac4:	e0fffb17 	ldw	r3,-20(fp)
  804ac8:	00bfff84 	movi	r2,-2
  804acc:	1884703a 	and	r2,r3,r2
  804ad0:	1001703a 	wrctl	status,r2
  
  return context;
  804ad4:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  804ad8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  804adc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  804ae0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  804ae4:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  804ae8:	e0bffc17 	ldw	r2,-16(fp)
  804aec:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  804af0:	e0bfef17 	ldw	r2,-68(fp)
  804af4:	10800017 	ldw	r2,0(r2)
  804af8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  804afc:	00008106 	br	804d04 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  804b00:	e0bff017 	ldw	r2,-64(fp)
  804b04:	10800003 	ldbu	r2,0(r2)
  804b08:	10803fcc 	andi	r2,r2,255
  804b0c:	10c000a0 	cmpeqi	r3,r2,2
  804b10:	18003c1e 	bne	r3,zero,804c04 <OSEventPendMulti+0x2a0>
  804b14:	10c000e0 	cmpeqi	r3,r2,3
  804b18:	1800031e 	bne	r3,zero,804b28 <OSEventPendMulti+0x1c4>
  804b1c:	10800060 	cmpeqi	r2,r2,1
  804b20:	10001e1e 	bne	r2,zero,804b9c <OSEventPendMulti+0x238>
  804b24:	00006606 	br	804cc0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  804b28:	e0bff017 	ldw	r2,-64(fp)
  804b2c:	1080020b 	ldhu	r2,8(r2)
  804b30:	10bfffcc 	andi	r2,r2,65535
  804b34:	10001526 	beq	r2,zero,804b8c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  804b38:	e0bff017 	ldw	r2,-64(fp)
  804b3c:	1080020b 	ldhu	r2,8(r2)
  804b40:	10bfffc4 	addi	r2,r2,-1
  804b44:	1007883a 	mov	r3,r2
  804b48:	e0bff017 	ldw	r2,-64(fp)
  804b4c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  804b50:	e0bffd17 	ldw	r2,-12(fp)
  804b54:	10c00104 	addi	r3,r2,4
  804b58:	e0fffd15 	stw	r3,-12(fp)
  804b5c:	e0fff017 	ldw	r3,-64(fp)
  804b60:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  804b64:	00800044 	movi	r2,1
  804b68:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  804b6c:	e0bffe17 	ldw	r2,-8(fp)
  804b70:	10c00104 	addi	r3,r2,4
  804b74:	e0fffe15 	stw	r3,-8(fp)
  804b78:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  804b7c:	e0bff18b 	ldhu	r2,-58(fp)
  804b80:	10800044 	addi	r2,r2,1
  804b84:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  804b88:	00005806 	br	804cec <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  804b8c:	e0bff203 	ldbu	r2,-56(fp)
  804b90:	10800054 	ori	r2,r2,1
  804b94:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  804b98:	00005406 	br	804cec <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  804b9c:	e0bff017 	ldw	r2,-64(fp)
  804ba0:	10800117 	ldw	r2,4(r2)
  804ba4:	10001326 	beq	r2,zero,804bf4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  804ba8:	e0bffe17 	ldw	r2,-8(fp)
  804bac:	10c00104 	addi	r3,r2,4
  804bb0:	e0fffe15 	stw	r3,-8(fp)
  804bb4:	e0fff017 	ldw	r3,-64(fp)
  804bb8:	18c00117 	ldw	r3,4(r3)
  804bbc:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  804bc0:	e0bff017 	ldw	r2,-64(fp)
  804bc4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  804bc8:	e0bffd17 	ldw	r2,-12(fp)
  804bcc:	10c00104 	addi	r3,r2,4
  804bd0:	e0fffd15 	stw	r3,-12(fp)
  804bd4:	e0fff017 	ldw	r3,-64(fp)
  804bd8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  804bdc:	00800044 	movi	r2,1
  804be0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  804be4:	e0bff18b 	ldhu	r2,-58(fp)
  804be8:	10800044 	addi	r2,r2,1
  804bec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  804bf0:	00003e06 	br	804cec <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  804bf4:	e0bff203 	ldbu	r2,-56(fp)
  804bf8:	10800094 	ori	r2,r2,2
  804bfc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  804c00:	00003a06 	br	804cec <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  804c04:	e0bff017 	ldw	r2,-64(fp)
  804c08:	10800117 	ldw	r2,4(r2)
  804c0c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  804c10:	e0bff517 	ldw	r2,-44(fp)
  804c14:	1080058b 	ldhu	r2,22(r2)
  804c18:	10bfffcc 	andi	r2,r2,65535
  804c1c:	10002426 	beq	r2,zero,804cb0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  804c20:	e0bffe17 	ldw	r2,-8(fp)
  804c24:	10c00104 	addi	r3,r2,4
  804c28:	e0fffe15 	stw	r3,-8(fp)
  804c2c:	e0fff517 	ldw	r3,-44(fp)
  804c30:	18c00417 	ldw	r3,16(r3)
  804c34:	19400104 	addi	r5,r3,4
  804c38:	e13ff517 	ldw	r4,-44(fp)
  804c3c:	21400415 	stw	r5,16(r4)
  804c40:	18c00017 	ldw	r3,0(r3)
  804c44:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  804c48:	e0bff517 	ldw	r2,-44(fp)
  804c4c:	10c00417 	ldw	r3,16(r2)
  804c50:	e0bff517 	ldw	r2,-44(fp)
  804c54:	10800217 	ldw	r2,8(r2)
  804c58:	1880041e 	bne	r3,r2,804c6c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  804c5c:	e0bff517 	ldw	r2,-44(fp)
  804c60:	10c00117 	ldw	r3,4(r2)
  804c64:	e0bff517 	ldw	r2,-44(fp)
  804c68:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  804c6c:	e0bff517 	ldw	r2,-44(fp)
  804c70:	1080058b 	ldhu	r2,22(r2)
  804c74:	10bfffc4 	addi	r2,r2,-1
  804c78:	1007883a 	mov	r3,r2
  804c7c:	e0bff517 	ldw	r2,-44(fp)
  804c80:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  804c84:	e0bffd17 	ldw	r2,-12(fp)
  804c88:	10c00104 	addi	r3,r2,4
  804c8c:	e0fffd15 	stw	r3,-12(fp)
  804c90:	e0fff017 	ldw	r3,-64(fp)
  804c94:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  804c98:	00800044 	movi	r2,1
  804c9c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  804ca0:	e0bff18b 	ldhu	r2,-58(fp)
  804ca4:	10800044 	addi	r2,r2,1
  804ca8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  804cac:	00000f06 	br	804cec <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  804cb0:	e0bff203 	ldbu	r2,-56(fp)
  804cb4:	10800114 	ori	r2,r2,4
  804cb8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  804cbc:	00000b06 	br	804cec <OSEventPendMulti+0x388>
  804cc0:	e0bff317 	ldw	r2,-52(fp)
  804cc4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804cc8:	e0bff417 	ldw	r2,-48(fp)
  804ccc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  804cd0:	e0bffd17 	ldw	r2,-12(fp)
  804cd4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  804cd8:	e0800217 	ldw	r2,8(fp)
  804cdc:	00c00044 	movi	r3,1
  804ce0:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  804ce4:	e0bff18b 	ldhu	r2,-58(fp)
  804ce8:	00009d06 	br	804f60 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  804cec:	e0bfef17 	ldw	r2,-68(fp)
  804cf0:	10800104 	addi	r2,r2,4
  804cf4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  804cf8:	e0bfef17 	ldw	r2,-68(fp)
  804cfc:	10800017 	ldw	r2,0(r2)
  804d00:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  804d04:	e0bff017 	ldw	r2,-64(fp)
  804d08:	103f7d1e 	bne	r2,zero,804b00 <__alt_mem_epcs_flash_controller_0+0xff7fbb00>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  804d0c:	e0bff103 	ldbu	r2,-60(fp)
  804d10:	10800058 	cmpnei	r2,r2,1
  804d14:	10000a1e 	bne	r2,zero,804d40 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  804d18:	e0bffd17 	ldw	r2,-12(fp)
  804d1c:	10000015 	stw	zero,0(r2)
  804d20:	e0bff317 	ldw	r2,-52(fp)
  804d24:	e0bff615 	stw	r2,-40(fp)
  804d28:	e0bff617 	ldw	r2,-40(fp)
  804d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  804d30:	e0800217 	ldw	r2,8(fp)
  804d34:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  804d38:	e0bff18b 	ldhu	r2,-58(fp)
  804d3c:	00008806 	br	804f60 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  804d40:	d0a0a117 	ldw	r2,-32124(gp)
  804d44:	d0e0a117 	ldw	r3,-32124(gp)
  804d48:	19000c03 	ldbu	r4,48(r3)
  804d4c:	e0fff203 	ldbu	r3,-56(fp)
  804d50:	20c6b03a 	or	r3,r4,r3
  804d54:	1809883a 	mov	r4,r3
  804d58:	00ffe004 	movi	r3,-128
  804d5c:	20c6b03a 	or	r3,r4,r3
  804d60:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  804d64:	d0a0a117 	ldw	r2,-32124(gp)
  804d68:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  804d6c:	d0a0a117 	ldw	r2,-32124(gp)
  804d70:	e0ffff0b 	ldhu	r3,-4(fp)
  804d74:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  804d78:	e13ffc17 	ldw	r4,-16(fp)
  804d7c:	08058a00 	call	8058a0 <OS_EventTaskWaitMulti>
  804d80:	e0bff317 	ldw	r2,-52(fp)
  804d84:	e0bff915 	stw	r2,-28(fp)
  804d88:	e0bff917 	ldw	r2,-28(fp)
  804d8c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  804d90:	08060440 	call	806044 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804d94:	0005303a 	rdctl	r2,status
  804d98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804d9c:	e0fff717 	ldw	r3,-36(fp)
  804da0:	00bfff84 	movi	r2,-2
  804da4:	1884703a 	and	r2,r3,r2
  804da8:	1001703a 	wrctl	status,r2
  
  return context;
  804dac:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  804db0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  804db4:	d0a0a117 	ldw	r2,-32124(gp)
  804db8:	10800c43 	ldbu	r2,49(r2)
  804dbc:	10803fcc 	andi	r2,r2,255
  804dc0:	10000226 	beq	r2,zero,804dcc <OSEventPendMulti+0x468>
  804dc4:	108000a0 	cmpeqi	r2,r2,2
  804dc8:	10001826 	beq	r2,zero,804e2c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  804dcc:	d0a0a117 	ldw	r2,-32124(gp)
  804dd0:	10800717 	ldw	r2,28(r2)
  804dd4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  804dd8:	e0bff017 	ldw	r2,-64(fp)
  804ddc:	10000b26 	beq	r2,zero,804e0c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  804de0:	e0bffd17 	ldw	r2,-12(fp)
  804de4:	10c00104 	addi	r3,r2,4
  804de8:	e0fffd15 	stw	r3,-12(fp)
  804dec:	e0fff017 	ldw	r3,-64(fp)
  804df0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  804df4:	e0bffd17 	ldw	r2,-12(fp)
  804df8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  804dfc:	e0bff18b 	ldhu	r2,-58(fp)
  804e00:	10800044 	addi	r2,r2,1
  804e04:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  804e08:	00000d06 	br	804e40 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  804e0c:	d0a0a117 	ldw	r2,-32124(gp)
  804e10:	00c00044 	movi	r3,1
  804e14:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  804e18:	d0a0a117 	ldw	r2,-32124(gp)
  804e1c:	e17ffc17 	ldw	r5,-16(fp)
  804e20:	1009883a 	mov	r4,r2
  804e24:	0805aa80 	call	805aa8 <OS_EventTaskRemoveMulti>
             }
			 break;
  804e28:	00000506 	br	804e40 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  804e2c:	d0a0a117 	ldw	r2,-32124(gp)
  804e30:	e17ffc17 	ldw	r5,-16(fp)
  804e34:	1009883a 	mov	r4,r2
  804e38:	0805aa80 	call	805aa8 <OS_EventTaskRemoveMulti>
             break;
  804e3c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  804e40:	d0a0a117 	ldw	r2,-32124(gp)
  804e44:	10800c43 	ldbu	r2,49(r2)
  804e48:	10803fcc 	andi	r2,r2,255
  804e4c:	10000326 	beq	r2,zero,804e5c <OSEventPendMulti+0x4f8>
  804e50:	108000a0 	cmpeqi	r2,r2,2
  804e54:	1000231e 	bne	r2,zero,804ee4 <OSEventPendMulti+0x580>
  804e58:	00002a06 	br	804f04 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  804e5c:	e0bff017 	ldw	r2,-64(fp)
  804e60:	10800003 	ldbu	r2,0(r2)
  804e64:	10803fcc 	andi	r2,r2,255
  804e68:	0080100e 	bge	zero,r2,804eac <OSEventPendMulti+0x548>
  804e6c:	10c000d0 	cmplti	r3,r2,3
  804e70:	1800071e 	bne	r3,zero,804e90 <OSEventPendMulti+0x52c>
  804e74:	108000e0 	cmpeqi	r2,r2,3
  804e78:	10000c26 	beq	r2,zero,804eac <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  804e7c:	e0bffe17 	ldw	r2,-8(fp)
  804e80:	10c00104 	addi	r3,r2,4
  804e84:	e0fffe15 	stw	r3,-8(fp)
  804e88:	10000015 	stw	zero,0(r2)
                      break;
  804e8c:	00001206 	br	804ed8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  804e90:	e0bffe17 	ldw	r2,-8(fp)
  804e94:	10c00104 	addi	r3,r2,4
  804e98:	e0fffe15 	stw	r3,-8(fp)
  804e9c:	d0e0a117 	ldw	r3,-32124(gp)
  804ea0:	18c00917 	ldw	r3,36(r3)
  804ea4:	10c00015 	stw	r3,0(r2)
                      break;
  804ea8:	00000b06 	br	804ed8 <OSEventPendMulti+0x574>
  804eac:	e0bff317 	ldw	r2,-52(fp)
  804eb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804eb4:	e0bff817 	ldw	r2,-32(fp)
  804eb8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  804ebc:	e0bffd17 	ldw	r2,-12(fp)
  804ec0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  804ec4:	e0800217 	ldw	r2,8(fp)
  804ec8:	00c00044 	movi	r3,1
  804ecc:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  804ed0:	e0bff18b 	ldhu	r2,-58(fp)
  804ed4:	00002206 	br	804f60 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  804ed8:	e0800217 	ldw	r2,8(fp)
  804edc:	10000005 	stb	zero,0(r2)
             break;
  804ee0:	00001006 	br	804f24 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  804ee4:	e0bffe17 	ldw	r2,-8(fp)
  804ee8:	10c00104 	addi	r3,r2,4
  804eec:	e0fffe15 	stw	r3,-8(fp)
  804ef0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  804ef4:	e0800217 	ldw	r2,8(fp)
  804ef8:	00c00384 	movi	r3,14
  804efc:	10c00005 	stb	r3,0(r2)
             break;
  804f00:	00000806 	br	804f24 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  804f04:	e0bffe17 	ldw	r2,-8(fp)
  804f08:	10c00104 	addi	r3,r2,4
  804f0c:	e0fffe15 	stw	r3,-8(fp)
  804f10:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  804f14:	e0800217 	ldw	r2,8(fp)
  804f18:	00c00284 	movi	r3,10
  804f1c:	10c00005 	stb	r3,0(r2)
             break;
  804f20:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  804f24:	d0a0a117 	ldw	r2,-32124(gp)
  804f28:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  804f2c:	d0a0a117 	ldw	r2,-32124(gp)
  804f30:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  804f34:	d0a0a117 	ldw	r2,-32124(gp)
  804f38:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  804f3c:	d0a0a117 	ldw	r2,-32124(gp)
  804f40:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  804f44:	d0a0a117 	ldw	r2,-32124(gp)
  804f48:	10000915 	stw	zero,36(r2)
  804f4c:	e0bff317 	ldw	r2,-52(fp)
  804f50:	e0bffa15 	stw	r2,-24(fp)
  804f54:	e0bffa17 	ldw	r2,-24(fp)
  804f58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  804f5c:	e0bff18b 	ldhu	r2,-58(fp)
}
  804f60:	e037883a 	mov	sp,fp
  804f64:	dfc00117 	ldw	ra,4(sp)
  804f68:	df000017 	ldw	fp,0(sp)
  804f6c:	dec00204 	addi	sp,sp,8
  804f70:	f800283a 	ret

00804f74 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  804f74:	defffe04 	addi	sp,sp,-8
  804f78:	dfc00115 	stw	ra,4(sp)
  804f7c:	df000015 	stw	fp,0(sp)
  804f80:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  804f84:	08108700 	call	810870 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  804f88:	0805cf00 	call	805cf0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  804f8c:	0805d380 	call	805d38 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  804f90:	0805ea40 	call	805ea4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  804f94:	0805c100 	call	805c10 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  804f98:	0807d440 	call	807d44 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  804f9c:	08086440 	call	808644 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  804fa0:	08097780 	call	809778 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  804fa4:	0805da40 	call	805da4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  804fa8:	0805e240 	call	805e24 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  804fac:	08108900 	call	810890 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  804fb0:	08067180 	call	806718 <OSDebugInit>
#endif
}
  804fb4:	0001883a 	nop
  804fb8:	e037883a 	mov	sp,fp
  804fbc:	dfc00117 	ldw	ra,4(sp)
  804fc0:	df000017 	ldw	fp,0(sp)
  804fc4:	dec00204 	addi	sp,sp,8
  804fc8:	f800283a 	ret

00804fcc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  804fcc:	deffff04 	addi	sp,sp,-4
  804fd0:	df000015 	stw	fp,0(sp)
  804fd4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  804fd8:	d0a09243 	ldbu	r2,-32183(gp)
  804fdc:	10803fcc 	andi	r2,r2,255
  804fe0:	10800058 	cmpnei	r2,r2,1
  804fe4:	1000071e 	bne	r2,zero,805004 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  804fe8:	d0a0a003 	ldbu	r2,-32128(gp)
  804fec:	10803fcc 	andi	r2,r2,255
  804ff0:	10803fe0 	cmpeqi	r2,r2,255
  804ff4:	1000031e 	bne	r2,zero,805004 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  804ff8:	d0a0a003 	ldbu	r2,-32128(gp)
  804ffc:	10800044 	addi	r2,r2,1
  805000:	d0a0a005 	stb	r2,-32128(gp)
        }
    }
}
  805004:	0001883a 	nop
  805008:	e037883a 	mov	sp,fp
  80500c:	df000017 	ldw	fp,0(sp)
  805010:	dec00104 	addi	sp,sp,4
  805014:	f800283a 	ret

00805018 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  805018:	defffb04 	addi	sp,sp,-20
  80501c:	dfc00415 	stw	ra,16(sp)
  805020:	df000315 	stw	fp,12(sp)
  805024:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805028:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80502c:	d0a09243 	ldbu	r2,-32183(gp)
  805030:	10803fcc 	andi	r2,r2,255
  805034:	10800058 	cmpnei	r2,r2,1
  805038:	10002f1e 	bne	r2,zero,8050f8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80503c:	0005303a 	rdctl	r2,status
  805040:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805044:	e0ffff17 	ldw	r3,-4(fp)
  805048:	00bfff84 	movi	r2,-2
  80504c:	1884703a 	and	r2,r3,r2
  805050:	1001703a 	wrctl	status,r2
  
  return context;
  805054:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  805058:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80505c:	d0a0a003 	ldbu	r2,-32128(gp)
  805060:	10803fcc 	andi	r2,r2,255
  805064:	10000326 	beq	r2,zero,805074 <OSIntExit+0x5c>
            OSIntNesting--;
  805068:	d0a0a003 	ldbu	r2,-32128(gp)
  80506c:	10bfffc4 	addi	r2,r2,-1
  805070:	d0a0a005 	stb	r2,-32128(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  805074:	d0a0a003 	ldbu	r2,-32128(gp)
  805078:	10803fcc 	andi	r2,r2,255
  80507c:	10001a1e 	bne	r2,zero,8050e8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  805080:	d0a09203 	ldbu	r2,-32184(gp)
  805084:	10803fcc 	andi	r2,r2,255
  805088:	1000171e 	bne	r2,zero,8050e8 <OSIntExit+0xd0>
                OS_SchedNew();
  80508c:	08061140 	call	806114 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  805090:	d0e09403 	ldbu	r3,-32176(gp)
  805094:	d0a09443 	ldbu	r2,-32175(gp)
  805098:	18c03fcc 	andi	r3,r3,255
  80509c:	10803fcc 	andi	r2,r2,255
  8050a0:	18801126 	beq	r3,r2,8050e8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  8050a4:	d0a09403 	ldbu	r2,-32176(gp)
  8050a8:	10c03fcc 	andi	r3,r2,255
  8050ac:	008020b4 	movhi	r2,130
  8050b0:	10b35b04 	addi	r2,r2,-12948
  8050b4:	18c7883a 	add	r3,r3,r3
  8050b8:	18c7883a 	add	r3,r3,r3
  8050bc:	10c5883a 	add	r2,r2,r3
  8050c0:	10800017 	ldw	r2,0(r2)
  8050c4:	d0a09c15 	stw	r2,-32144(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  8050c8:	d0a09c17 	ldw	r2,-32144(gp)
  8050cc:	10c00e17 	ldw	r3,56(r2)
  8050d0:	18c00044 	addi	r3,r3,1
  8050d4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  8050d8:	d0a09717 	ldw	r2,-32164(gp)
  8050dc:	10800044 	addi	r2,r2,1
  8050e0:	d0a09715 	stw	r2,-32164(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  8050e4:	081059c0 	call	81059c <OSCtxSw>
  8050e8:	e0bffd17 	ldw	r2,-12(fp)
  8050ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8050f0:	e0bffe17 	ldw	r2,-8(fp)
  8050f4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  8050f8:	0001883a 	nop
  8050fc:	e037883a 	mov	sp,fp
  805100:	dfc00117 	ldw	ra,4(sp)
  805104:	df000017 	ldw	fp,0(sp)
  805108:	dec00204 	addi	sp,sp,8
  80510c:	f800283a 	ret

00805110 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  805110:	defffc04 	addi	sp,sp,-16
  805114:	df000315 	stw	fp,12(sp)
  805118:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80511c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  805120:	d0a09243 	ldbu	r2,-32183(gp)
  805124:	10803fcc 	andi	r2,r2,255
  805128:	10800058 	cmpnei	r2,r2,1
  80512c:	1000161e 	bne	r2,zero,805188 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805130:	0005303a 	rdctl	r2,status
  805134:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805138:	e0ffff17 	ldw	r3,-4(fp)
  80513c:	00bfff84 	movi	r2,-2
  805140:	1884703a 	and	r2,r3,r2
  805144:	1001703a 	wrctl	status,r2
  
  return context;
  805148:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80514c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  805150:	d0a0a003 	ldbu	r2,-32128(gp)
  805154:	10803fcc 	andi	r2,r2,255
  805158:	1000071e 	bne	r2,zero,805178 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80515c:	d0a09203 	ldbu	r2,-32184(gp)
  805160:	10803fcc 	andi	r2,r2,255
  805164:	10803fe0 	cmpeqi	r2,r2,255
  805168:	1000031e 	bne	r2,zero,805178 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80516c:	d0a09203 	ldbu	r2,-32184(gp)
  805170:	10800044 	addi	r2,r2,1
  805174:	d0a09205 	stb	r2,-32184(gp)
  805178:	e0bffd17 	ldw	r2,-12(fp)
  80517c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805180:	e0bffe17 	ldw	r2,-8(fp)
  805184:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  805188:	0001883a 	nop
  80518c:	e037883a 	mov	sp,fp
  805190:	df000017 	ldw	fp,0(sp)
  805194:	dec00104 	addi	sp,sp,4
  805198:	f800283a 	ret

0080519c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80519c:	defff804 	addi	sp,sp,-32
  8051a0:	dfc00715 	stw	ra,28(sp)
  8051a4:	df000615 	stw	fp,24(sp)
  8051a8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8051ac:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  8051b0:	d0a09243 	ldbu	r2,-32183(gp)
  8051b4:	10803fcc 	andi	r2,r2,255
  8051b8:	10800058 	cmpnei	r2,r2,1
  8051bc:	1000281e 	bne	r2,zero,805260 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8051c0:	0005303a 	rdctl	r2,status
  8051c4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8051c8:	e0ffff17 	ldw	r3,-4(fp)
  8051cc:	00bfff84 	movi	r2,-2
  8051d0:	1884703a 	and	r2,r3,r2
  8051d4:	1001703a 	wrctl	status,r2
  
  return context;
  8051d8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  8051dc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  8051e0:	d0a09203 	ldbu	r2,-32184(gp)
  8051e4:	10803fcc 	andi	r2,r2,255
  8051e8:	10001926 	beq	r2,zero,805250 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  8051ec:	d0a09203 	ldbu	r2,-32184(gp)
  8051f0:	10bfffc4 	addi	r2,r2,-1
  8051f4:	d0a09205 	stb	r2,-32184(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  8051f8:	d0a09203 	ldbu	r2,-32184(gp)
  8051fc:	10803fcc 	andi	r2,r2,255
  805200:	10000e1e 	bne	r2,zero,80523c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  805204:	d0a0a003 	ldbu	r2,-32128(gp)
  805208:	10803fcc 	andi	r2,r2,255
  80520c:	1000061e 	bne	r2,zero,805228 <OSSchedUnlock+0x8c>
  805210:	e0bffa17 	ldw	r2,-24(fp)
  805214:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805218:	e0bffb17 	ldw	r2,-20(fp)
  80521c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  805220:	08060440 	call	806044 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  805224:	00000e06 	br	805260 <OSSchedUnlock+0xc4>
  805228:	e0bffa17 	ldw	r2,-24(fp)
  80522c:	e0bffc15 	stw	r2,-16(fp)
  805230:	e0bffc17 	ldw	r2,-16(fp)
  805234:	1001703a 	wrctl	status,r2
  805238:	00000906 	br	805260 <OSSchedUnlock+0xc4>
  80523c:	e0bffa17 	ldw	r2,-24(fp)
  805240:	e0bffd15 	stw	r2,-12(fp)
  805244:	e0bffd17 	ldw	r2,-12(fp)
  805248:	1001703a 	wrctl	status,r2
  80524c:	00000406 	br	805260 <OSSchedUnlock+0xc4>
  805250:	e0bffa17 	ldw	r2,-24(fp)
  805254:	e0bffe15 	stw	r2,-8(fp)
  805258:	e0bffe17 	ldw	r2,-8(fp)
  80525c:	1001703a 	wrctl	status,r2
  805260:	0001883a 	nop
  805264:	e037883a 	mov	sp,fp
  805268:	dfc00117 	ldw	ra,4(sp)
  80526c:	df000017 	ldw	fp,0(sp)
  805270:	dec00204 	addi	sp,sp,8
  805274:	f800283a 	ret

00805278 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  805278:	defffe04 	addi	sp,sp,-8
  80527c:	dfc00115 	stw	ra,4(sp)
  805280:	df000015 	stw	fp,0(sp)
  805284:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  805288:	d0a09243 	ldbu	r2,-32183(gp)
  80528c:	10803fcc 	andi	r2,r2,255
  805290:	10000f1e 	bne	r2,zero,8052d0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  805294:	08061140 	call	806114 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  805298:	d0a09403 	ldbu	r2,-32176(gp)
  80529c:	d0a09445 	stb	r2,-32175(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  8052a0:	d0a09403 	ldbu	r2,-32176(gp)
  8052a4:	10c03fcc 	andi	r3,r2,255
  8052a8:	008020b4 	movhi	r2,130
  8052ac:	10b35b04 	addi	r2,r2,-12948
  8052b0:	18c7883a 	add	r3,r3,r3
  8052b4:	18c7883a 	add	r3,r3,r3
  8052b8:	10c5883a 	add	r2,r2,r3
  8052bc:	10800017 	ldw	r2,0(r2)
  8052c0:	d0a09c15 	stw	r2,-32144(gp)
        OSTCBCur      = OSTCBHighRdy;
  8052c4:	d0a09c17 	ldw	r2,-32144(gp)
  8052c8:	d0a0a115 	stw	r2,-32124(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  8052cc:	08106280 	call	810628 <OSStartHighRdy>
    }
}
  8052d0:	0001883a 	nop
  8052d4:	e037883a 	mov	sp,fp
  8052d8:	dfc00117 	ldw	ra,4(sp)
  8052dc:	df000017 	ldw	fp,0(sp)
  8052e0:	dec00204 	addi	sp,sp,8
  8052e4:	f800283a 	ret

008052e8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  8052e8:	defff904 	addi	sp,sp,-28
  8052ec:	dfc00615 	stw	ra,24(sp)
  8052f0:	df000515 	stw	fp,20(sp)
  8052f4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8052f8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  8052fc:	01000084 	movi	r4,2
  805300:	080b9ec0 	call	80b9ec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805304:	0005303a 	rdctl	r2,status
  805308:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80530c:	e0fffc17 	ldw	r3,-16(fp)
  805310:	00bfff84 	movi	r2,-2
  805314:	1884703a 	and	r2,r3,r2
  805318:	1001703a 	wrctl	status,r2
  
  return context;
  80531c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  805320:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  805324:	d0209315 	stw	zero,-32180(gp)
  805328:	e0bffb17 	ldw	r2,-20(fp)
  80532c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805330:	e0bffd17 	ldw	r2,-12(fp)
  805334:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  805338:	01001904 	movi	r4,100
  80533c:	080b9ec0 	call	80b9ec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805340:	0005303a 	rdctl	r2,status
  805344:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805348:	e0fffe17 	ldw	r3,-8(fp)
  80534c:	00bfff84 	movi	r2,-2
  805350:	1884703a 	and	r2,r3,r2
  805354:	1001703a 	wrctl	status,r2
  
  return context;
  805358:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80535c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  805360:	d0a09317 	ldw	r2,-32180(gp)
  805364:	d0a09815 	stw	r2,-32160(gp)
    OSStatRdy    = OS_TRUE;
  805368:	00800044 	movi	r2,1
  80536c:	d0a0a405 	stb	r2,-32112(gp)
  805370:	e0bffb17 	ldw	r2,-20(fp)
  805374:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805378:	e0bfff17 	ldw	r2,-4(fp)
  80537c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  805380:	0001883a 	nop
  805384:	e037883a 	mov	sp,fp
  805388:	dfc00117 	ldw	ra,4(sp)
  80538c:	df000017 	ldw	fp,0(sp)
  805390:	dec00204 	addi	sp,sp,8
  805394:	f800283a 	ret

00805398 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  805398:	defff704 	addi	sp,sp,-36
  80539c:	dfc00815 	stw	ra,32(sp)
  8053a0:	df000715 	stw	fp,28(sp)
  8053a4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8053a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  8053ac:	08108500 	call	810850 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8053b0:	0005303a 	rdctl	r2,status
  8053b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8053b8:	e0fffd17 	ldw	r3,-12(fp)
  8053bc:	00bfff84 	movi	r2,-2
  8053c0:	1884703a 	and	r2,r3,r2
  8053c4:	1001703a 	wrctl	status,r2
  
  return context;
  8053c8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  8053cc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  8053d0:	d0a0a217 	ldw	r2,-32120(gp)
  8053d4:	10800044 	addi	r2,r2,1
  8053d8:	d0a0a215 	stw	r2,-32120(gp)
  8053dc:	e0bffb17 	ldw	r2,-20(fp)
  8053e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8053e4:	e0bfff17 	ldw	r2,-4(fp)
  8053e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  8053ec:	d0a09243 	ldbu	r2,-32183(gp)
  8053f0:	10803fcc 	andi	r2,r2,255
  8053f4:	10800058 	cmpnei	r2,r2,1
  8053f8:	10006a1e 	bne	r2,zero,8055a4 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  8053fc:	d0a09603 	ldbu	r2,-32168(gp)
  805400:	10803fcc 	andi	r2,r2,255
  805404:	10c00060 	cmpeqi	r3,r2,1
  805408:	1800061e 	bne	r3,zero,805424 <OSTimeTick+0x8c>
  80540c:	10c000a0 	cmpeqi	r3,r2,2
  805410:	1800061e 	bne	r3,zero,80542c <OSTimeTick+0x94>
  805414:	10000a1e 	bne	r2,zero,805440 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  805418:	00800044 	movi	r2,1
  80541c:	e0bffa05 	stb	r2,-24(fp)
                 break;
  805420:	00000b06 	br	805450 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  805424:	e03ffa05 	stb	zero,-24(fp)
                 break;
  805428:	00000906 	br	805450 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80542c:	00800044 	movi	r2,1
  805430:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  805434:	00800044 	movi	r2,1
  805438:	d0a09605 	stb	r2,-32168(gp)
                 break;
  80543c:	00000406 	br	805450 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  805440:	00800044 	movi	r2,1
  805444:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  805448:	d0209605 	stb	zero,-32168(gp)
                 break;
  80544c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  805450:	e0bffa03 	ldbu	r2,-24(fp)
  805454:	10005226 	beq	r2,zero,8055a0 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  805458:	d0a09517 	ldw	r2,-32172(gp)
  80545c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  805460:	00004906 	br	805588 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805464:	0005303a 	rdctl	r2,status
  805468:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80546c:	e0fffc17 	ldw	r3,-16(fp)
  805470:	00bfff84 	movi	r2,-2
  805474:	1884703a 	and	r2,r3,r2
  805478:	1001703a 	wrctl	status,r2
  
  return context;
  80547c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  805480:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  805484:	e0bff917 	ldw	r2,-28(fp)
  805488:	10800b8b 	ldhu	r2,46(r2)
  80548c:	10bfffcc 	andi	r2,r2,65535
  805490:	10003626 	beq	r2,zero,80556c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  805494:	e0bff917 	ldw	r2,-28(fp)
  805498:	10800b8b 	ldhu	r2,46(r2)
  80549c:	10bfffc4 	addi	r2,r2,-1
  8054a0:	1007883a 	mov	r3,r2
  8054a4:	e0bff917 	ldw	r2,-28(fp)
  8054a8:	10c00b8d 	sth	r3,46(r2)
  8054ac:	e0bff917 	ldw	r2,-28(fp)
  8054b0:	10800b8b 	ldhu	r2,46(r2)
  8054b4:	10bfffcc 	andi	r2,r2,65535
  8054b8:	10002c1e 	bne	r2,zero,80556c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8054bc:	e0bff917 	ldw	r2,-28(fp)
  8054c0:	10800c03 	ldbu	r2,48(r2)
  8054c4:	10803fcc 	andi	r2,r2,255
  8054c8:	10800dcc 	andi	r2,r2,55
  8054cc:	10000b26 	beq	r2,zero,8054fc <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8054d0:	e0bff917 	ldw	r2,-28(fp)
  8054d4:	10c00c03 	ldbu	r3,48(r2)
  8054d8:	00bff204 	movi	r2,-56
  8054dc:	1884703a 	and	r2,r3,r2
  8054e0:	1007883a 	mov	r3,r2
  8054e4:	e0bff917 	ldw	r2,-28(fp)
  8054e8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8054ec:	e0bff917 	ldw	r2,-28(fp)
  8054f0:	00c00044 	movi	r3,1
  8054f4:	10c00c45 	stb	r3,49(r2)
  8054f8:	00000206 	br	805504 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8054fc:	e0bff917 	ldw	r2,-28(fp)
  805500:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  805504:	e0bff917 	ldw	r2,-28(fp)
  805508:	10800c03 	ldbu	r2,48(r2)
  80550c:	10803fcc 	andi	r2,r2,255
  805510:	1080020c 	andi	r2,r2,8
  805514:	1000151e 	bne	r2,zero,80556c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  805518:	e0bff917 	ldw	r2,-28(fp)
  80551c:	10c00d83 	ldbu	r3,54(r2)
  805520:	d0a09e03 	ldbu	r2,-32136(gp)
  805524:	1884b03a 	or	r2,r3,r2
  805528:	d0a09e05 	stb	r2,-32136(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80552c:	e0bff917 	ldw	r2,-28(fp)
  805530:	10800d03 	ldbu	r2,52(r2)
  805534:	10c03fcc 	andi	r3,r2,255
  805538:	e0bff917 	ldw	r2,-28(fp)
  80553c:	10800d03 	ldbu	r2,52(r2)
  805540:	11003fcc 	andi	r4,r2,255
  805544:	d0a09e44 	addi	r2,gp,-32135
  805548:	2085883a 	add	r2,r4,r2
  80554c:	11000003 	ldbu	r4,0(r2)
  805550:	e0bff917 	ldw	r2,-28(fp)
  805554:	10800d43 	ldbu	r2,53(r2)
  805558:	2084b03a 	or	r2,r4,r2
  80555c:	1009883a 	mov	r4,r2
  805560:	d0a09e44 	addi	r2,gp,-32135
  805564:	1885883a 	add	r2,r3,r2
  805568:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80556c:	e0bff917 	ldw	r2,-28(fp)
  805570:	10800517 	ldw	r2,20(r2)
  805574:	e0bff915 	stw	r2,-28(fp)
  805578:	e0bffb17 	ldw	r2,-20(fp)
  80557c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805580:	e0bffe17 	ldw	r2,-8(fp)
  805584:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  805588:	e0bff917 	ldw	r2,-28(fp)
  80558c:	10800c83 	ldbu	r2,50(r2)
  805590:	10803fcc 	andi	r2,r2,255
  805594:	10800518 	cmpnei	r2,r2,20
  805598:	103fb21e 	bne	r2,zero,805464 <__alt_mem_epcs_flash_controller_0+0xff7fc464>
  80559c:	00000106 	br	8055a4 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  8055a0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  8055a4:	e037883a 	mov	sp,fp
  8055a8:	dfc00117 	ldw	ra,4(sp)
  8055ac:	df000017 	ldw	fp,0(sp)
  8055b0:	dec00204 	addi	sp,sp,8
  8055b4:	f800283a 	ret

008055b8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  8055b8:	deffff04 	addi	sp,sp,-4
  8055bc:	df000015 	stw	fp,0(sp)
  8055c0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  8055c4:	00804784 	movi	r2,286
}
  8055c8:	e037883a 	mov	sp,fp
  8055cc:	df000017 	ldw	fp,0(sp)
  8055d0:	dec00104 	addi	sp,sp,4
  8055d4:	f800283a 	ret

008055d8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  8055d8:	deffff04 	addi	sp,sp,-4
  8055dc:	df000015 	stw	fp,0(sp)
  8055e0:	d839883a 	mov	fp,sp
}
  8055e4:	0001883a 	nop
  8055e8:	e037883a 	mov	sp,fp
  8055ec:	df000017 	ldw	fp,0(sp)
  8055f0:	dec00104 	addi	sp,sp,4
  8055f4:	f800283a 	ret

008055f8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  8055f8:	defff804 	addi	sp,sp,-32
  8055fc:	dfc00715 	stw	ra,28(sp)
  805600:	df000615 	stw	fp,24(sp)
  805604:	df000604 	addi	fp,sp,24
  805608:	e13ffc15 	stw	r4,-16(fp)
  80560c:	e17ffd15 	stw	r5,-12(fp)
  805610:	3007883a 	mov	r3,r6
  805614:	3805883a 	mov	r2,r7
  805618:	e0fffe05 	stb	r3,-8(fp)
  80561c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  805620:	e0bffc17 	ldw	r2,-16(fp)
  805624:	10800283 	ldbu	r2,10(r2)
  805628:	10c03fcc 	andi	r3,r2,255
  80562c:	00802074 	movhi	r2,129
  805630:	10845204 	addi	r2,r2,4424
  805634:	10c5883a 	add	r2,r2,r3
  805638:	10800003 	ldbu	r2,0(r2)
  80563c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  805640:	e0bffa03 	ldbu	r2,-24(fp)
  805644:	e0fffc17 	ldw	r3,-16(fp)
  805648:	1885883a 	add	r2,r3,r2
  80564c:	108002c4 	addi	r2,r2,11
  805650:	10800003 	ldbu	r2,0(r2)
  805654:	10c03fcc 	andi	r3,r2,255
  805658:	00802074 	movhi	r2,129
  80565c:	10845204 	addi	r2,r2,4424
  805660:	10c5883a 	add	r2,r2,r3
  805664:	10800003 	ldbu	r2,0(r2)
  805668:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80566c:	e0bffa03 	ldbu	r2,-24(fp)
  805670:	100490fa 	slli	r2,r2,3
  805674:	1007883a 	mov	r3,r2
  805678:	e0bffa43 	ldbu	r2,-23(fp)
  80567c:	1885883a 	add	r2,r3,r2
  805680:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  805684:	e0fffa83 	ldbu	r3,-22(fp)
  805688:	008020b4 	movhi	r2,130
  80568c:	10b35b04 	addi	r2,r2,-12948
  805690:	18c7883a 	add	r3,r3,r3
  805694:	18c7883a 	add	r3,r3,r3
  805698:	10c5883a 	add	r2,r2,r3
  80569c:	10800017 	ldw	r2,0(r2)
  8056a0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  8056a4:	e0bffb17 	ldw	r2,-20(fp)
  8056a8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  8056ac:	e0bffb17 	ldw	r2,-20(fp)
  8056b0:	e0fffd17 	ldw	r3,-12(fp)
  8056b4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  8056b8:	e0bffb17 	ldw	r2,-20(fp)
  8056bc:	10800c03 	ldbu	r2,48(r2)
  8056c0:	1007883a 	mov	r3,r2
  8056c4:	e0bffe03 	ldbu	r2,-8(fp)
  8056c8:	0084303a 	nor	r2,zero,r2
  8056cc:	1884703a 	and	r2,r3,r2
  8056d0:	1007883a 	mov	r3,r2
  8056d4:	e0bffb17 	ldw	r2,-20(fp)
  8056d8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  8056dc:	e0bffb17 	ldw	r2,-20(fp)
  8056e0:	e0ffff03 	ldbu	r3,-4(fp)
  8056e4:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  8056e8:	e0bffb17 	ldw	r2,-20(fp)
  8056ec:	10800c03 	ldbu	r2,48(r2)
  8056f0:	10803fcc 	andi	r2,r2,255
  8056f4:	1080020c 	andi	r2,r2,8
  8056f8:	1000111e 	bne	r2,zero,805740 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8056fc:	e0bffb17 	ldw	r2,-20(fp)
  805700:	10c00d83 	ldbu	r3,54(r2)
  805704:	d0a09e03 	ldbu	r2,-32136(gp)
  805708:	1884b03a 	or	r2,r3,r2
  80570c:	d0a09e05 	stb	r2,-32136(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  805710:	e0fffa03 	ldbu	r3,-24(fp)
  805714:	e13ffa03 	ldbu	r4,-24(fp)
  805718:	d0a09e44 	addi	r2,gp,-32135
  80571c:	2085883a 	add	r2,r4,r2
  805720:	11000003 	ldbu	r4,0(r2)
  805724:	e0bffb17 	ldw	r2,-20(fp)
  805728:	10800d43 	ldbu	r2,53(r2)
  80572c:	2084b03a 	or	r2,r4,r2
  805730:	1009883a 	mov	r4,r2
  805734:	d0a09e44 	addi	r2,gp,-32135
  805738:	1885883a 	add	r2,r3,r2
  80573c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  805740:	e17ffc17 	ldw	r5,-16(fp)
  805744:	e13ffb17 	ldw	r4,-20(fp)
  805748:	08059f00 	call	8059f0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80574c:	e0bffb17 	ldw	r2,-20(fp)
  805750:	10800817 	ldw	r2,32(r2)
  805754:	10000826 	beq	r2,zero,805778 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  805758:	e0bffb17 	ldw	r2,-20(fp)
  80575c:	10800817 	ldw	r2,32(r2)
  805760:	100b883a 	mov	r5,r2
  805764:	e13ffb17 	ldw	r4,-20(fp)
  805768:	0805aa80 	call	805aa8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80576c:	e0bffb17 	ldw	r2,-20(fp)
  805770:	e0fffc17 	ldw	r3,-16(fp)
  805774:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  805778:	e0bffa83 	ldbu	r2,-22(fp)
}
  80577c:	e037883a 	mov	sp,fp
  805780:	dfc00117 	ldw	ra,4(sp)
  805784:	df000017 	ldw	fp,0(sp)
  805788:	dec00204 	addi	sp,sp,8
  80578c:	f800283a 	ret

00805790 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  805790:	defffd04 	addi	sp,sp,-12
  805794:	df000215 	stw	fp,8(sp)
  805798:	df000204 	addi	fp,sp,8
  80579c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  8057a0:	d0a0a117 	ldw	r2,-32124(gp)
  8057a4:	e0ffff17 	ldw	r3,-4(fp)
  8057a8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  8057ac:	d0a0a117 	ldw	r2,-32124(gp)
  8057b0:	10800d03 	ldbu	r2,52(r2)
  8057b4:	10803fcc 	andi	r2,r2,255
  8057b8:	d0e0a117 	ldw	r3,-32124(gp)
  8057bc:	18c00d03 	ldbu	r3,52(r3)
  8057c0:	18c03fcc 	andi	r3,r3,255
  8057c4:	e13fff17 	ldw	r4,-4(fp)
  8057c8:	20c7883a 	add	r3,r4,r3
  8057cc:	18c002c4 	addi	r3,r3,11
  8057d0:	19000003 	ldbu	r4,0(r3)
  8057d4:	d0e0a117 	ldw	r3,-32124(gp)
  8057d8:	18c00d43 	ldbu	r3,53(r3)
  8057dc:	20c6b03a 	or	r3,r4,r3
  8057e0:	1809883a 	mov	r4,r3
  8057e4:	e0ffff17 	ldw	r3,-4(fp)
  8057e8:	1885883a 	add	r2,r3,r2
  8057ec:	108002c4 	addi	r2,r2,11
  8057f0:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	10c00283 	ldbu	r3,10(r2)
  8057fc:	d0a0a117 	ldw	r2,-32124(gp)
  805800:	10800d83 	ldbu	r2,54(r2)
  805804:	1884b03a 	or	r2,r3,r2
  805808:	1007883a 	mov	r3,r2
  80580c:	e0bfff17 	ldw	r2,-4(fp)
  805810:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  805814:	d0a0a117 	ldw	r2,-32124(gp)
  805818:	10800d03 	ldbu	r2,52(r2)
  80581c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  805820:	e0fffe03 	ldbu	r3,-8(fp)
  805824:	e13ffe03 	ldbu	r4,-8(fp)
  805828:	d0a09e44 	addi	r2,gp,-32135
  80582c:	2085883a 	add	r2,r4,r2
  805830:	10800003 	ldbu	r2,0(r2)
  805834:	1009883a 	mov	r4,r2
  805838:	d0a0a117 	ldw	r2,-32124(gp)
  80583c:	10800d43 	ldbu	r2,53(r2)
  805840:	0084303a 	nor	r2,zero,r2
  805844:	2084703a 	and	r2,r4,r2
  805848:	1009883a 	mov	r4,r2
  80584c:	d0a09e44 	addi	r2,gp,-32135
  805850:	1885883a 	add	r2,r3,r2
  805854:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  805858:	e0fffe03 	ldbu	r3,-8(fp)
  80585c:	d0a09e44 	addi	r2,gp,-32135
  805860:	1885883a 	add	r2,r3,r2
  805864:	10800003 	ldbu	r2,0(r2)
  805868:	10803fcc 	andi	r2,r2,255
  80586c:	1000071e 	bne	r2,zero,80588c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  805870:	d0a0a117 	ldw	r2,-32124(gp)
  805874:	10800d83 	ldbu	r2,54(r2)
  805878:	0084303a 	nor	r2,zero,r2
  80587c:	1007883a 	mov	r3,r2
  805880:	d0a09e03 	ldbu	r2,-32136(gp)
  805884:	1884703a 	and	r2,r3,r2
  805888:	d0a09e05 	stb	r2,-32136(gp)
    }
}
  80588c:	0001883a 	nop
  805890:	e037883a 	mov	sp,fp
  805894:	df000017 	ldw	fp,0(sp)
  805898:	dec00104 	addi	sp,sp,4
  80589c:	f800283a 	ret

008058a0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  8058a0:	defffb04 	addi	sp,sp,-20
  8058a4:	df000415 	stw	fp,16(sp)
  8058a8:	df000404 	addi	fp,sp,16
  8058ac:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  8058b0:	d0a0a117 	ldw	r2,-32124(gp)
  8058b4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  8058b8:	d0a0a117 	ldw	r2,-32124(gp)
  8058bc:	e0ffff17 	ldw	r3,-4(fp)
  8058c0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  8058c4:	e0bfff17 	ldw	r2,-4(fp)
  8058c8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  8058cc:	e0bffc17 	ldw	r2,-16(fp)
  8058d0:	10800017 	ldw	r2,0(r2)
  8058d4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8058d8:	00002006 	br	80595c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  8058dc:	d0a0a117 	ldw	r2,-32124(gp)
  8058e0:	10800d03 	ldbu	r2,52(r2)
  8058e4:	10803fcc 	andi	r2,r2,255
  8058e8:	d0e0a117 	ldw	r3,-32124(gp)
  8058ec:	18c00d03 	ldbu	r3,52(r3)
  8058f0:	18c03fcc 	andi	r3,r3,255
  8058f4:	e13ffd17 	ldw	r4,-12(fp)
  8058f8:	20c7883a 	add	r3,r4,r3
  8058fc:	18c002c4 	addi	r3,r3,11
  805900:	19000003 	ldbu	r4,0(r3)
  805904:	d0e0a117 	ldw	r3,-32124(gp)
  805908:	18c00d43 	ldbu	r3,53(r3)
  80590c:	20c6b03a 	or	r3,r4,r3
  805910:	1809883a 	mov	r4,r3
  805914:	e0fffd17 	ldw	r3,-12(fp)
  805918:	1885883a 	add	r2,r3,r2
  80591c:	108002c4 	addi	r2,r2,11
  805920:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  805924:	e0bffd17 	ldw	r2,-12(fp)
  805928:	10c00283 	ldbu	r3,10(r2)
  80592c:	d0a0a117 	ldw	r2,-32124(gp)
  805930:	10800d83 	ldbu	r2,54(r2)
  805934:	1884b03a 	or	r2,r3,r2
  805938:	1007883a 	mov	r3,r2
  80593c:	e0bffd17 	ldw	r2,-12(fp)
  805940:	10c00285 	stb	r3,10(r2)
        pevents++;
  805944:	e0bffc17 	ldw	r2,-16(fp)
  805948:	10800104 	addi	r2,r2,4
  80594c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  805950:	e0bffc17 	ldw	r2,-16(fp)
  805954:	10800017 	ldw	r2,0(r2)
  805958:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80595c:	e0bffd17 	ldw	r2,-12(fp)
  805960:	103fde1e 	bne	r2,zero,8058dc <__alt_mem_epcs_flash_controller_0+0xff7fc8dc>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  805964:	d0a0a117 	ldw	r2,-32124(gp)
  805968:	10800d03 	ldbu	r2,52(r2)
  80596c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  805970:	e0fffe03 	ldbu	r3,-8(fp)
  805974:	e13ffe03 	ldbu	r4,-8(fp)
  805978:	d0a09e44 	addi	r2,gp,-32135
  80597c:	2085883a 	add	r2,r4,r2
  805980:	10800003 	ldbu	r2,0(r2)
  805984:	1009883a 	mov	r4,r2
  805988:	d0a0a117 	ldw	r2,-32124(gp)
  80598c:	10800d43 	ldbu	r2,53(r2)
  805990:	0084303a 	nor	r2,zero,r2
  805994:	2084703a 	and	r2,r4,r2
  805998:	1009883a 	mov	r4,r2
  80599c:	d0a09e44 	addi	r2,gp,-32135
  8059a0:	1885883a 	add	r2,r3,r2
  8059a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  8059a8:	e0fffe03 	ldbu	r3,-8(fp)
  8059ac:	d0a09e44 	addi	r2,gp,-32135
  8059b0:	1885883a 	add	r2,r3,r2
  8059b4:	10800003 	ldbu	r2,0(r2)
  8059b8:	10803fcc 	andi	r2,r2,255
  8059bc:	1000071e 	bne	r2,zero,8059dc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  8059c0:	d0a0a117 	ldw	r2,-32124(gp)
  8059c4:	10800d83 	ldbu	r2,54(r2)
  8059c8:	0084303a 	nor	r2,zero,r2
  8059cc:	1007883a 	mov	r3,r2
  8059d0:	d0a09e03 	ldbu	r2,-32136(gp)
  8059d4:	1884703a 	and	r2,r3,r2
  8059d8:	d0a09e05 	stb	r2,-32136(gp)
    }
}
  8059dc:	0001883a 	nop
  8059e0:	e037883a 	mov	sp,fp
  8059e4:	df000017 	ldw	fp,0(sp)
  8059e8:	dec00104 	addi	sp,sp,4
  8059ec:	f800283a 	ret

008059f0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  8059f0:	defffc04 	addi	sp,sp,-16
  8059f4:	df000315 	stw	fp,12(sp)
  8059f8:	df000304 	addi	fp,sp,12
  8059fc:	e13ffe15 	stw	r4,-8(fp)
  805a00:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  805a04:	e0bffe17 	ldw	r2,-8(fp)
  805a08:	10800d03 	ldbu	r2,52(r2)
  805a0c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  805a10:	e0bffd03 	ldbu	r2,-12(fp)
  805a14:	e0fffd03 	ldbu	r3,-12(fp)
  805a18:	e13fff17 	ldw	r4,-4(fp)
  805a1c:	20c7883a 	add	r3,r4,r3
  805a20:	18c002c4 	addi	r3,r3,11
  805a24:	18c00003 	ldbu	r3,0(r3)
  805a28:	1809883a 	mov	r4,r3
  805a2c:	e0fffe17 	ldw	r3,-8(fp)
  805a30:	18c00d43 	ldbu	r3,53(r3)
  805a34:	00c6303a 	nor	r3,zero,r3
  805a38:	20c6703a 	and	r3,r4,r3
  805a3c:	1809883a 	mov	r4,r3
  805a40:	e0ffff17 	ldw	r3,-4(fp)
  805a44:	1885883a 	add	r2,r3,r2
  805a48:	108002c4 	addi	r2,r2,11
  805a4c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  805a50:	e0bffd03 	ldbu	r2,-12(fp)
  805a54:	e0ffff17 	ldw	r3,-4(fp)
  805a58:	1885883a 	add	r2,r3,r2
  805a5c:	108002c4 	addi	r2,r2,11
  805a60:	10800003 	ldbu	r2,0(r2)
  805a64:	10803fcc 	andi	r2,r2,255
  805a68:	10000a1e 	bne	r2,zero,805a94 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  805a6c:	e0bfff17 	ldw	r2,-4(fp)
  805a70:	10800283 	ldbu	r2,10(r2)
  805a74:	1007883a 	mov	r3,r2
  805a78:	e0bffe17 	ldw	r2,-8(fp)
  805a7c:	10800d83 	ldbu	r2,54(r2)
  805a80:	0084303a 	nor	r2,zero,r2
  805a84:	1884703a 	and	r2,r3,r2
  805a88:	1007883a 	mov	r3,r2
  805a8c:	e0bfff17 	ldw	r2,-4(fp)
  805a90:	10c00285 	stb	r3,10(r2)
    }
}
  805a94:	0001883a 	nop
  805a98:	e037883a 	mov	sp,fp
  805a9c:	df000017 	ldw	fp,0(sp)
  805aa0:	dec00104 	addi	sp,sp,4
  805aa4:	f800283a 	ret

00805aa8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  805aa8:	defffa04 	addi	sp,sp,-24
  805aac:	df000515 	stw	fp,20(sp)
  805ab0:	df000504 	addi	fp,sp,20
  805ab4:	e13ffe15 	stw	r4,-8(fp)
  805ab8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  805abc:	e0bffe17 	ldw	r2,-8(fp)
  805ac0:	10800d03 	ldbu	r2,52(r2)
  805ac4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  805ac8:	e0bffe17 	ldw	r2,-8(fp)
  805acc:	10800d83 	ldbu	r2,54(r2)
  805ad0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  805ad4:	e0bffe17 	ldw	r2,-8(fp)
  805ad8:	10800d43 	ldbu	r2,53(r2)
  805adc:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  805ae0:	e0bfff17 	ldw	r2,-4(fp)
  805ae4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  805ae8:	e0bffb17 	ldw	r2,-20(fp)
  805aec:	10800017 	ldw	r2,0(r2)
  805af0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  805af4:	00002506 	br	805b8c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  805af8:	e0bffd03 	ldbu	r2,-12(fp)
  805afc:	e0fffd03 	ldbu	r3,-12(fp)
  805b00:	e13ffc17 	ldw	r4,-16(fp)
  805b04:	20c7883a 	add	r3,r4,r3
  805b08:	18c002c4 	addi	r3,r3,11
  805b0c:	18c00003 	ldbu	r3,0(r3)
  805b10:	1809883a 	mov	r4,r3
  805b14:	e0fffd83 	ldbu	r3,-10(fp)
  805b18:	00c6303a 	nor	r3,zero,r3
  805b1c:	20c6703a 	and	r3,r4,r3
  805b20:	1809883a 	mov	r4,r3
  805b24:	e0fffc17 	ldw	r3,-16(fp)
  805b28:	1885883a 	add	r2,r3,r2
  805b2c:	108002c4 	addi	r2,r2,11
  805b30:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  805b34:	e0bffd03 	ldbu	r2,-12(fp)
  805b38:	e0fffc17 	ldw	r3,-16(fp)
  805b3c:	1885883a 	add	r2,r3,r2
  805b40:	108002c4 	addi	r2,r2,11
  805b44:	10800003 	ldbu	r2,0(r2)
  805b48:	10803fcc 	andi	r2,r2,255
  805b4c:	1000091e 	bne	r2,zero,805b74 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  805b50:	e0bffc17 	ldw	r2,-16(fp)
  805b54:	10800283 	ldbu	r2,10(r2)
  805b58:	1007883a 	mov	r3,r2
  805b5c:	e0bffd43 	ldbu	r2,-11(fp)
  805b60:	0084303a 	nor	r2,zero,r2
  805b64:	1884703a 	and	r2,r3,r2
  805b68:	1007883a 	mov	r3,r2
  805b6c:	e0bffc17 	ldw	r2,-16(fp)
  805b70:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  805b74:	e0bffb17 	ldw	r2,-20(fp)
  805b78:	10800104 	addi	r2,r2,4
  805b7c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  805b80:	e0bffb17 	ldw	r2,-20(fp)
  805b84:	10800017 	ldw	r2,0(r2)
  805b88:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  805b8c:	e0bffc17 	ldw	r2,-16(fp)
  805b90:	103fd91e 	bne	r2,zero,805af8 <__alt_mem_epcs_flash_controller_0+0xff7fcaf8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  805b94:	0001883a 	nop
  805b98:	e037883a 	mov	sp,fp
  805b9c:	df000017 	ldw	fp,0(sp)
  805ba0:	dec00104 	addi	sp,sp,4
  805ba4:	f800283a 	ret

00805ba8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  805ba8:	defffc04 	addi	sp,sp,-16
  805bac:	df000315 	stw	fp,12(sp)
  805bb0:	df000304 	addi	fp,sp,12
  805bb4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  805bb8:	e0bfff17 	ldw	r2,-4(fp)
  805bbc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  805bc0:	e0bfff17 	ldw	r2,-4(fp)
  805bc4:	108002c4 	addi	r2,r2,11
  805bc8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805bcc:	e03ffe05 	stb	zero,-8(fp)
  805bd0:	00000706 	br	805bf0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  805bd4:	e0bffd17 	ldw	r2,-12(fp)
  805bd8:	10c00044 	addi	r3,r2,1
  805bdc:	e0fffd15 	stw	r3,-12(fp)
  805be0:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805be4:	e0bffe03 	ldbu	r2,-8(fp)
  805be8:	10800044 	addi	r2,r2,1
  805bec:	e0bffe05 	stb	r2,-8(fp)
  805bf0:	e0bffe03 	ldbu	r2,-8(fp)
  805bf4:	108000f0 	cmpltui	r2,r2,3
  805bf8:	103ff61e 	bne	r2,zero,805bd4 <__alt_mem_epcs_flash_controller_0+0xff7fcbd4>
        *ptbl++ = 0;
    }
}
  805bfc:	0001883a 	nop
  805c00:	e037883a 	mov	sp,fp
  805c04:	df000017 	ldw	fp,0(sp)
  805c08:	dec00104 	addi	sp,sp,4
  805c0c:	f800283a 	ret

00805c10 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  805c10:	defffb04 	addi	sp,sp,-20
  805c14:	dfc00415 	stw	ra,16(sp)
  805c18:	df000315 	stw	fp,12(sp)
  805c1c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  805c20:	0142d004 	movi	r5,2880
  805c24:	010020b4 	movhi	r4,130
  805c28:	212f4704 	addi	r4,r4,-17124
  805c2c:	0805f880 	call	805f88 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  805c30:	008020b4 	movhi	r2,130
  805c34:	10af4704 	addi	r2,r2,-17124
  805c38:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  805c3c:	008020b4 	movhi	r2,130
  805c40:	10af5304 	addi	r2,r2,-17076
  805c44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  805c48:	e03ffd0d 	sth	zero,-12(fp)
  805c4c:	00001306 	br	805c9c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  805c50:	e0bffe17 	ldw	r2,-8(fp)
  805c54:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  805c58:	e0bffe17 	ldw	r2,-8(fp)
  805c5c:	e0ffff17 	ldw	r3,-4(fp)
  805c60:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  805c64:	e0bffe17 	ldw	r2,-8(fp)
  805c68:	00c00fc4 	movi	r3,63
  805c6c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  805c70:	e0bffe17 	ldw	r2,-8(fp)
  805c74:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  805c78:	e0bffe17 	ldw	r2,-8(fp)
  805c7c:	10800c04 	addi	r2,r2,48
  805c80:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  805c84:	e0bfff17 	ldw	r2,-4(fp)
  805c88:	10800c04 	addi	r2,r2,48
  805c8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  805c90:	e0bffd0b 	ldhu	r2,-12(fp)
  805c94:	10800044 	addi	r2,r2,1
  805c98:	e0bffd0d 	sth	r2,-12(fp)
  805c9c:	e0bffd0b 	ldhu	r2,-12(fp)
  805ca0:	10800ef0 	cmpltui	r2,r2,59
  805ca4:	103fea1e 	bne	r2,zero,805c50 <__alt_mem_epcs_flash_controller_0+0xff7fcc50>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  805ca8:	e0bffe17 	ldw	r2,-8(fp)
  805cac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  805cb0:	e0bffe17 	ldw	r2,-8(fp)
  805cb4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  805cb8:	e0bffe17 	ldw	r2,-8(fp)
  805cbc:	00c00fc4 	movi	r3,63
  805cc0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  805cc4:	e0bffe17 	ldw	r2,-8(fp)
  805cc8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  805ccc:	008020b4 	movhi	r2,130
  805cd0:	10af4704 	addi	r2,r2,-17124
  805cd4:	d0a09f15 	stw	r2,-32132(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  805cd8:	0001883a 	nop
  805cdc:	e037883a 	mov	sp,fp
  805ce0:	dfc00117 	ldw	ra,4(sp)
  805ce4:	df000017 	ldw	fp,0(sp)
  805ce8:	dec00204 	addi	sp,sp,8
  805cec:	f800283a 	ret

00805cf0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  805cf0:	deffff04 	addi	sp,sp,-4
  805cf4:	df000015 	stw	fp,0(sp)
  805cf8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  805cfc:	d020a215 	stw	zero,-32120(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  805d00:	d020a005 	stb	zero,-32128(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  805d04:	d0209205 	stb	zero,-32184(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  805d08:	d0209a45 	stb	zero,-32151(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  805d0c:	d0209245 	stb	zero,-32183(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  805d10:	d0209715 	stw	zero,-32164(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  805d14:	d0209315 	stw	zero,-32180(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  805d18:	d020a515 	stw	zero,-32108(gp)
    OSIdleCtrMax  = 0L;
  805d1c:	d0209815 	stw	zero,-32160(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  805d20:	d020a405 	stb	zero,-32112(gp)
#endif
}
  805d24:	0001883a 	nop
  805d28:	e037883a 	mov	sp,fp
  805d2c:	df000017 	ldw	fp,0(sp)
  805d30:	dec00104 	addi	sp,sp,4
  805d34:	f800283a 	ret

00805d38 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  805d38:	defffd04 	addi	sp,sp,-12
  805d3c:	df000215 	stw	fp,8(sp)
  805d40:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  805d44:	d0209e05 	stb	zero,-32136(gp)
    prdytbl       = &OSRdyTbl[0];
  805d48:	d0a09e44 	addi	r2,gp,-32135
  805d4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  805d50:	e03ffe05 	stb	zero,-8(fp)
  805d54:	00000706 	br	805d74 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  805d58:	e0bfff17 	ldw	r2,-4(fp)
  805d5c:	10c00044 	addi	r3,r2,1
  805d60:	e0ffff15 	stw	r3,-4(fp)
  805d64:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  805d68:	e0bffe03 	ldbu	r2,-8(fp)
  805d6c:	10800044 	addi	r2,r2,1
  805d70:	e0bffe05 	stb	r2,-8(fp)
  805d74:	e0bffe03 	ldbu	r2,-8(fp)
  805d78:	108000f0 	cmpltui	r2,r2,3
  805d7c:	103ff61e 	bne	r2,zero,805d58 <__alt_mem_epcs_flash_controller_0+0xff7fcd58>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  805d80:	d0209445 	stb	zero,-32175(gp)
    OSPrioHighRdy = 0;
  805d84:	d0209405 	stb	zero,-32176(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  805d88:	d0209c15 	stw	zero,-32144(gp)
    OSTCBCur      = (OS_TCB *)0;
  805d8c:	d020a115 	stw	zero,-32124(gp)
}
  805d90:	0001883a 	nop
  805d94:	e037883a 	mov	sp,fp
  805d98:	df000017 	ldw	fp,0(sp)
  805d9c:	dec00104 	addi	sp,sp,4
  805da0:	f800283a 	ret

00805da4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  805da4:	defff804 	addi	sp,sp,-32
  805da8:	dfc00715 	stw	ra,28(sp)
  805dac:	df000615 	stw	fp,24(sp)
  805db0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  805db4:	008000c4 	movi	r2,3
  805db8:	d8800415 	stw	r2,16(sp)
  805dbc:	d8000315 	stw	zero,12(sp)
  805dc0:	00808004 	movi	r2,512
  805dc4:	d8800215 	stw	r2,8(sp)
  805dc8:	008020b4 	movhi	r2,130
  805dcc:	10ad4704 	addi	r2,r2,-19172
  805dd0:	d8800115 	stw	r2,4(sp)
  805dd4:	00bfffd4 	movui	r2,65535
  805dd8:	d8800015 	stw	r2,0(sp)
  805ddc:	01c00504 	movi	r7,20
  805de0:	018020b4 	movhi	r6,130
  805de4:	31af4604 	addi	r6,r6,-17128
  805de8:	000b883a 	mov	r5,zero
  805dec:	01002034 	movhi	r4,128
  805df0:	21189404 	addi	r4,r4,25168
  805df4:	080a91c0 	call	80a91c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  805df8:	e1bfff04 	addi	r6,fp,-4
  805dfc:	01402074 	movhi	r5,129
  805e00:	29449204 	addi	r5,r5,4680
  805e04:	01000504 	movi	r4,20
  805e08:	080b12c0 	call	80b12c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  805e0c:	0001883a 	nop
  805e10:	e037883a 	mov	sp,fp
  805e14:	dfc00117 	ldw	ra,4(sp)
  805e18:	df000017 	ldw	fp,0(sp)
  805e1c:	dec00204 	addi	sp,sp,8
  805e20:	f800283a 	ret

00805e24 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  805e24:	defff804 	addi	sp,sp,-32
  805e28:	dfc00715 	stw	ra,28(sp)
  805e2c:	df000615 	stw	fp,24(sp)
  805e30:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  805e34:	008000c4 	movi	r2,3
  805e38:	d8800415 	stw	r2,16(sp)
  805e3c:	d8000315 	stw	zero,12(sp)
  805e40:	00808004 	movi	r2,512
  805e44:	d8800215 	stw	r2,8(sp)
  805e48:	008020b4 	movhi	r2,130
  805e4c:	10aacf04 	addi	r2,r2,-21700
  805e50:	d8800115 	stw	r2,4(sp)
  805e54:	00bfff94 	movui	r2,65534
  805e58:	d8800015 	stw	r2,0(sp)
  805e5c:	01c004c4 	movi	r7,19
  805e60:	018020b4 	movhi	r6,130
  805e64:	31acce04 	addi	r6,r6,-19656
  805e68:	000b883a 	mov	r5,zero
  805e6c:	01002034 	movhi	r4,128
  805e70:	2118ab04 	addi	r4,r4,25260
  805e74:	080a91c0 	call	80a91c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  805e78:	e1bfff04 	addi	r6,fp,-4
  805e7c:	01402074 	movhi	r5,129
  805e80:	29449604 	addi	r5,r5,4696
  805e84:	010004c4 	movi	r4,19
  805e88:	080b12c0 	call	80b12c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  805e8c:	0001883a 	nop
  805e90:	e037883a 	mov	sp,fp
  805e94:	dfc00117 	ldw	ra,4(sp)
  805e98:	df000017 	ldw	fp,0(sp)
  805e9c:	dec00204 	addi	sp,sp,8
  805ea0:	f800283a 	ret

00805ea4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  805ea4:	defffb04 	addi	sp,sp,-20
  805ea8:	dfc00415 	stw	ra,16(sp)
  805eac:	df000315 	stw	fp,12(sp)
  805eb0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  805eb4:	01414404 	movi	r5,1296
  805eb8:	010020b4 	movhi	r4,130
  805ebc:	21321704 	addi	r4,r4,-14244
  805ec0:	0805f880 	call	805f88 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  805ec4:	01401504 	movi	r5,84
  805ec8:	010020b4 	movhi	r4,130
  805ecc:	21335b04 	addi	r4,r4,-12948
  805ed0:	0805f880 	call	805f88 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  805ed4:	008020b4 	movhi	r2,130
  805ed8:	10b21704 	addi	r2,r2,-14244
  805edc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  805ee0:	008020b4 	movhi	r2,130
  805ee4:	10b23204 	addi	r2,r2,-14136
  805ee8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  805eec:	e03ffd05 	stb	zero,-12(fp)
  805ef0:	00001106 	br	805f38 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  805ef4:	e0bffe17 	ldw	r2,-8(fp)
  805ef8:	e0ffff17 	ldw	r3,-4(fp)
  805efc:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  805f00:	e0bffe17 	ldw	r2,-8(fp)
  805f04:	00c00fc4 	movi	r3,63
  805f08:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  805f0c:	e0bffe17 	ldw	r2,-8(fp)
  805f10:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  805f14:	e0bffe17 	ldw	r2,-8(fp)
  805f18:	10801b04 	addi	r2,r2,108
  805f1c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  805f20:	e0bfff17 	ldw	r2,-4(fp)
  805f24:	10801b04 	addi	r2,r2,108
  805f28:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  805f2c:	e0bffd03 	ldbu	r2,-12(fp)
  805f30:	10800044 	addi	r2,r2,1
  805f34:	e0bffd05 	stb	r2,-12(fp)
  805f38:	e0bffd03 	ldbu	r2,-12(fp)
  805f3c:	108002f0 	cmpltui	r2,r2,11
  805f40:	103fec1e 	bne	r2,zero,805ef4 <__alt_mem_epcs_flash_controller_0+0xff7fcef4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  805f44:	e0bffe17 	ldw	r2,-8(fp)
  805f48:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  805f4c:	e0bffe17 	ldw	r2,-8(fp)
  805f50:	00c00fc4 	movi	r3,63
  805f54:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  805f58:	e0bffe17 	ldw	r2,-8(fp)
  805f5c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  805f60:	d0209515 	stw	zero,-32172(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  805f64:	008020b4 	movhi	r2,130
  805f68:	10b21704 	addi	r2,r2,-14244
  805f6c:	d0a09915 	stw	r2,-32156(gp)
}
  805f70:	0001883a 	nop
  805f74:	e037883a 	mov	sp,fp
  805f78:	dfc00117 	ldw	ra,4(sp)
  805f7c:	df000017 	ldw	fp,0(sp)
  805f80:	dec00204 	addi	sp,sp,8
  805f84:	f800283a 	ret

00805f88 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  805f88:	defffd04 	addi	sp,sp,-12
  805f8c:	df000215 	stw	fp,8(sp)
  805f90:	df000204 	addi	fp,sp,8
  805f94:	e13ffe15 	stw	r4,-8(fp)
  805f98:	2805883a 	mov	r2,r5
  805f9c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  805fa0:	00000706 	br	805fc0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  805fa4:	e0bffe17 	ldw	r2,-8(fp)
  805fa8:	10c00044 	addi	r3,r2,1
  805fac:	e0fffe15 	stw	r3,-8(fp)
  805fb0:	10000005 	stb	zero,0(r2)
        size--;
  805fb4:	e0bfff0b 	ldhu	r2,-4(fp)
  805fb8:	10bfffc4 	addi	r2,r2,-1
  805fbc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  805fc0:	e0bfff0b 	ldhu	r2,-4(fp)
  805fc4:	103ff71e 	bne	r2,zero,805fa4 <__alt_mem_epcs_flash_controller_0+0xff7fcfa4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  805fc8:	0001883a 	nop
  805fcc:	e037883a 	mov	sp,fp
  805fd0:	df000017 	ldw	fp,0(sp)
  805fd4:	dec00104 	addi	sp,sp,4
  805fd8:	f800283a 	ret

00805fdc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  805fdc:	defffc04 	addi	sp,sp,-16
  805fe0:	df000315 	stw	fp,12(sp)
  805fe4:	df000304 	addi	fp,sp,12
  805fe8:	e13ffd15 	stw	r4,-12(fp)
  805fec:	e17ffe15 	stw	r5,-8(fp)
  805ff0:	3005883a 	mov	r2,r6
  805ff4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  805ff8:	00000b06 	br	806028 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  805ffc:	e0bffd17 	ldw	r2,-12(fp)
  806000:	10c00044 	addi	r3,r2,1
  806004:	e0fffd15 	stw	r3,-12(fp)
  806008:	e0fffe17 	ldw	r3,-8(fp)
  80600c:	19000044 	addi	r4,r3,1
  806010:	e13ffe15 	stw	r4,-8(fp)
  806014:	18c00003 	ldbu	r3,0(r3)
  806018:	10c00005 	stb	r3,0(r2)
        size--;
  80601c:	e0bfff0b 	ldhu	r2,-4(fp)
  806020:	10bfffc4 	addi	r2,r2,-1
  806024:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  806028:	e0bfff0b 	ldhu	r2,-4(fp)
  80602c:	103ff31e 	bne	r2,zero,805ffc <__alt_mem_epcs_flash_controller_0+0xff7fcffc>
        *pdest++ = *psrc++;
        size--;
    }
}
  806030:	0001883a 	nop
  806034:	e037883a 	mov	sp,fp
  806038:	df000017 	ldw	fp,0(sp)
  80603c:	dec00104 	addi	sp,sp,4
  806040:	f800283a 	ret

00806044 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  806044:	defffb04 	addi	sp,sp,-20
  806048:	dfc00415 	stw	ra,16(sp)
  80604c:	df000315 	stw	fp,12(sp)
  806050:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  806054:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806058:	0005303a 	rdctl	r2,status
  80605c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806060:	e0ffff17 	ldw	r3,-4(fp)
  806064:	00bfff84 	movi	r2,-2
  806068:	1884703a 	and	r2,r3,r2
  80606c:	1001703a 	wrctl	status,r2
  
  return context;
  806070:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  806074:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  806078:	d0a0a003 	ldbu	r2,-32128(gp)
  80607c:	10803fcc 	andi	r2,r2,255
  806080:	10001a1e 	bne	r2,zero,8060ec <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  806084:	d0a09203 	ldbu	r2,-32184(gp)
  806088:	10803fcc 	andi	r2,r2,255
  80608c:	1000171e 	bne	r2,zero,8060ec <OS_Sched+0xa8>
            OS_SchedNew();
  806090:	08061140 	call	806114 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  806094:	d0e09403 	ldbu	r3,-32176(gp)
  806098:	d0a09443 	ldbu	r2,-32175(gp)
  80609c:	18c03fcc 	andi	r3,r3,255
  8060a0:	10803fcc 	andi	r2,r2,255
  8060a4:	18801126 	beq	r3,r2,8060ec <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8060a8:	d0a09403 	ldbu	r2,-32176(gp)
  8060ac:	10c03fcc 	andi	r3,r2,255
  8060b0:	008020b4 	movhi	r2,130
  8060b4:	10b35b04 	addi	r2,r2,-12948
  8060b8:	18c7883a 	add	r3,r3,r3
  8060bc:	18c7883a 	add	r3,r3,r3
  8060c0:	10c5883a 	add	r2,r2,r3
  8060c4:	10800017 	ldw	r2,0(r2)
  8060c8:	d0a09c15 	stw	r2,-32144(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  8060cc:	d0a09c17 	ldw	r2,-32144(gp)
  8060d0:	10c00e17 	ldw	r3,56(r2)
  8060d4:	18c00044 	addi	r3,r3,1
  8060d8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  8060dc:	d0a09717 	ldw	r2,-32164(gp)
  8060e0:	10800044 	addi	r2,r2,1
  8060e4:	d0a09715 	stw	r2,-32164(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  8060e8:	081059c0 	call	81059c <OSCtxSw>
  8060ec:	e0bffd17 	ldw	r2,-12(fp)
  8060f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8060f4:	e0bffe17 	ldw	r2,-8(fp)
  8060f8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  8060fc:	0001883a 	nop
  806100:	e037883a 	mov	sp,fp
  806104:	dfc00117 	ldw	ra,4(sp)
  806108:	df000017 	ldw	fp,0(sp)
  80610c:	dec00204 	addi	sp,sp,8
  806110:	f800283a 	ret

00806114 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  806114:	defffe04 	addi	sp,sp,-8
  806118:	df000115 	stw	fp,4(sp)
  80611c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  806120:	d0a09e03 	ldbu	r2,-32136(gp)
  806124:	10c03fcc 	andi	r3,r2,255
  806128:	00802074 	movhi	r2,129
  80612c:	10845204 	addi	r2,r2,4424
  806130:	10c5883a 	add	r2,r2,r3
  806134:	10800003 	ldbu	r2,0(r2)
  806138:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80613c:	e0bfff03 	ldbu	r2,-4(fp)
  806140:	100490fa 	slli	r2,r2,3
  806144:	1009883a 	mov	r4,r2
  806148:	e0ffff03 	ldbu	r3,-4(fp)
  80614c:	d0a09e44 	addi	r2,gp,-32135
  806150:	1885883a 	add	r2,r3,r2
  806154:	10800003 	ldbu	r2,0(r2)
  806158:	10c03fcc 	andi	r3,r2,255
  80615c:	00802074 	movhi	r2,129
  806160:	10845204 	addi	r2,r2,4424
  806164:	10c5883a 	add	r2,r2,r3
  806168:	10800003 	ldbu	r2,0(r2)
  80616c:	2085883a 	add	r2,r4,r2
  806170:	d0a09405 	stb	r2,-32176(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  806174:	0001883a 	nop
  806178:	e037883a 	mov	sp,fp
  80617c:	df000017 	ldw	fp,0(sp)
  806180:	dec00104 	addi	sp,sp,4
  806184:	f800283a 	ret

00806188 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  806188:	defffc04 	addi	sp,sp,-16
  80618c:	df000315 	stw	fp,12(sp)
  806190:	df000304 	addi	fp,sp,12
  806194:	e13ffe15 	stw	r4,-8(fp)
  806198:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80619c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  8061a0:	00000b06 	br	8061d0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  8061a4:	e0bffe17 	ldw	r2,-8(fp)
  8061a8:	10c00044 	addi	r3,r2,1
  8061ac:	e0fffe15 	stw	r3,-8(fp)
  8061b0:	e0ffff17 	ldw	r3,-4(fp)
  8061b4:	19000044 	addi	r4,r3,1
  8061b8:	e13fff15 	stw	r4,-4(fp)
  8061bc:	18c00003 	ldbu	r3,0(r3)
  8061c0:	10c00005 	stb	r3,0(r2)
        len++;
  8061c4:	e0bffd03 	ldbu	r2,-12(fp)
  8061c8:	10800044 	addi	r2,r2,1
  8061cc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8061d0:	e0bfff17 	ldw	r2,-4(fp)
  8061d4:	10800003 	ldbu	r2,0(r2)
  8061d8:	10803fcc 	andi	r2,r2,255
  8061dc:	103ff11e 	bne	r2,zero,8061a4 <__alt_mem_epcs_flash_controller_0+0xff7fd1a4>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  8061e0:	e0bffe17 	ldw	r2,-8(fp)
  8061e4:	10000005 	stb	zero,0(r2)
    return (len);
  8061e8:	e0bffd03 	ldbu	r2,-12(fp)
}
  8061ec:	e037883a 	mov	sp,fp
  8061f0:	df000017 	ldw	fp,0(sp)
  8061f4:	dec00104 	addi	sp,sp,4
  8061f8:	f800283a 	ret

008061fc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  8061fc:	defffd04 	addi	sp,sp,-12
  806200:	df000215 	stw	fp,8(sp)
  806204:	df000204 	addi	fp,sp,8
  806208:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80620c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  806210:	00000606 	br	80622c <OS_StrLen+0x30>
        psrc++;
  806214:	e0bfff17 	ldw	r2,-4(fp)
  806218:	10800044 	addi	r2,r2,1
  80621c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  806220:	e0bffe03 	ldbu	r2,-8(fp)
  806224:	10800044 	addi	r2,r2,1
  806228:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80622c:	e0bfff17 	ldw	r2,-4(fp)
  806230:	10800003 	ldbu	r2,0(r2)
  806234:	10803fcc 	andi	r2,r2,255
  806238:	103ff61e 	bne	r2,zero,806214 <__alt_mem_epcs_flash_controller_0+0xff7fd214>
        psrc++;
        len++;
    }
    return (len);
  80623c:	e0bffe03 	ldbu	r2,-8(fp)
}
  806240:	e037883a 	mov	sp,fp
  806244:	df000017 	ldw	fp,0(sp)
  806248:	dec00104 	addi	sp,sp,4
  80624c:	f800283a 	ret

00806250 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  806250:	defffa04 	addi	sp,sp,-24
  806254:	dfc00515 	stw	ra,20(sp)
  806258:	df000415 	stw	fp,16(sp)
  80625c:	df000404 	addi	fp,sp,16
  806260:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806264:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806268:	0005303a 	rdctl	r2,status
  80626c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806270:	e0fffd17 	ldw	r3,-12(fp)
  806274:	00bfff84 	movi	r2,-2
  806278:	1884703a 	and	r2,r3,r2
  80627c:	1001703a 	wrctl	status,r2
  
  return context;
  806280:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  806284:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  806288:	d0a09317 	ldw	r2,-32180(gp)
  80628c:	10800044 	addi	r2,r2,1
  806290:	d0a09315 	stw	r2,-32180(gp)
  806294:	e0bffc17 	ldw	r2,-16(fp)
  806298:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80629c:	e0bffe17 	ldw	r2,-8(fp)
  8062a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  8062a4:	08108b00 	call	8108b0 <OSTaskIdleHook>
    }
  8062a8:	003fef06 	br	806268 <__alt_mem_epcs_flash_controller_0+0xff7fd268>

008062ac <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  8062ac:	defffa04 	addi	sp,sp,-24
  8062b0:	dfc00515 	stw	ra,20(sp)
  8062b4:	df000415 	stw	fp,16(sp)
  8062b8:	df000404 	addi	fp,sp,16
  8062bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8062c0:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8062c4:	00000206 	br	8062d0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  8062c8:	01003204 	movi	r4,200
  8062cc:	080b9ec0 	call	80b9ec <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8062d0:	d0a0a403 	ldbu	r2,-32112(gp)
  8062d4:	10803fcc 	andi	r2,r2,255
  8062d8:	103ffb26 	beq	r2,zero,8062c8 <__alt_mem_epcs_flash_controller_0+0xff7fd2c8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  8062dc:	d0a09817 	ldw	r2,-32160(gp)
  8062e0:	01401904 	movi	r5,100
  8062e4:	1009883a 	mov	r4,r2
  8062e8:	0800ba00 	call	800ba0 <__udivsi3>
  8062ec:	d0a09815 	stw	r2,-32160(gp)
    if (OSIdleCtrMax == 0L) {
  8062f0:	d0a09817 	ldw	r2,-32160(gp)
  8062f4:	1000031e 	bne	r2,zero,806304 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  8062f8:	d0209a05 	stb	zero,-32152(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  8062fc:	01003fc4 	movi	r4,255
  806300:	080b6740 	call	80b674 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806304:	0005303a 	rdctl	r2,status
  806308:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80630c:	e0fffd17 	ldw	r3,-12(fp)
  806310:	00bfff84 	movi	r2,-2
  806314:	1884703a 	and	r2,r3,r2
  806318:	1001703a 	wrctl	status,r2
  
  return context;
  80631c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  806320:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  806324:	d0a09317 	ldw	r2,-32180(gp)
  806328:	d0a0a515 	stw	r2,-32108(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80632c:	d0209315 	stw	zero,-32180(gp)
  806330:	e0bffc17 	ldw	r2,-16(fp)
  806334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806338:	e0bffe17 	ldw	r2,-8(fp)
  80633c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  806340:	d0a0a517 	ldw	r2,-32108(gp)
  806344:	d0e09817 	ldw	r3,-32160(gp)
  806348:	180b883a 	mov	r5,r3
  80634c:	1009883a 	mov	r4,r2
  806350:	0800ba00 	call	800ba0 <__udivsi3>
  806354:	1007883a 	mov	r3,r2
  806358:	00801904 	movi	r2,100
  80635c:	10c5c83a 	sub	r2,r2,r3
  806360:	d0a09a05 	stb	r2,-32152(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  806364:	08108300 	call	810830 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  806368:	08063780 	call	806378 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80636c:	01001904 	movi	r4,100
  806370:	080b9ec0 	call	80b9ec <OSTimeDly>
    }
  806374:	003fe306 	br	806304 <__alt_mem_epcs_flash_controller_0+0xff7fd304>

00806378 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  806378:	defffa04 	addi	sp,sp,-24
  80637c:	dfc00515 	stw	ra,20(sp)
  806380:	df000415 	stw	fp,16(sp)
  806384:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  806388:	e03ffc05 	stb	zero,-16(fp)
  80638c:	00002406 	br	806420 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  806390:	e0bffc03 	ldbu	r2,-16(fp)
  806394:	e0fffe04 	addi	r3,fp,-8
  806398:	180b883a 	mov	r5,r3
  80639c:	1009883a 	mov	r4,r2
  8063a0:	080b4b40 	call	80b4b4 <OSTaskStkChk>
  8063a4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  8063a8:	e0bffc43 	ldbu	r2,-15(fp)
  8063ac:	1000191e 	bne	r2,zero,806414 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  8063b0:	e0fffc03 	ldbu	r3,-16(fp)
  8063b4:	008020b4 	movhi	r2,130
  8063b8:	10b35b04 	addi	r2,r2,-12948
  8063bc:	18c7883a 	add	r3,r3,r3
  8063c0:	18c7883a 	add	r3,r3,r3
  8063c4:	10c5883a 	add	r2,r2,r3
  8063c8:	10800017 	ldw	r2,0(r2)
  8063cc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  8063d0:	e0bffd17 	ldw	r2,-12(fp)
  8063d4:	10000f26 	beq	r2,zero,806414 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  8063d8:	e0bffd17 	ldw	r2,-12(fp)
  8063dc:	10800060 	cmpeqi	r2,r2,1
  8063e0:	10000c1e 	bne	r2,zero,806414 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  8063e4:	e0bffd17 	ldw	r2,-12(fp)
  8063e8:	10c00217 	ldw	r3,8(r2)
  8063ec:	e0bffd17 	ldw	r2,-12(fp)
  8063f0:	10800317 	ldw	r2,12(r2)
  8063f4:	1085883a 	add	r2,r2,r2
  8063f8:	1085883a 	add	r2,r2,r2
  8063fc:	1887883a 	add	r3,r3,r2
  806400:	e0bffd17 	ldw	r2,-12(fp)
  806404:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  806408:	e0ffff17 	ldw	r3,-4(fp)
  80640c:	e0bffd17 	ldw	r2,-12(fp)
  806410:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  806414:	e0bffc03 	ldbu	r2,-16(fp)
  806418:	10800044 	addi	r2,r2,1
  80641c:	e0bffc05 	stb	r2,-16(fp)
  806420:	e0bffc03 	ldbu	r2,-16(fp)
  806424:	10800570 	cmpltui	r2,r2,21
  806428:	103fd91e 	bne	r2,zero,806390 <__alt_mem_epcs_flash_controller_0+0xff7fd390>
#endif
                }
            }
        }
    }
}
  80642c:	0001883a 	nop
  806430:	e037883a 	mov	sp,fp
  806434:	dfc00117 	ldw	ra,4(sp)
  806438:	df000017 	ldw	fp,0(sp)
  80643c:	dec00204 	addi	sp,sp,8
  806440:	f800283a 	ret

00806444 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  806444:	defff204 	addi	sp,sp,-56
  806448:	dfc00d15 	stw	ra,52(sp)
  80644c:	df000c15 	stw	fp,48(sp)
  806450:	df000c04 	addi	fp,sp,48
  806454:	e17ffc15 	stw	r5,-16(fp)
  806458:	e1bffd15 	stw	r6,-12(fp)
  80645c:	3807883a 	mov	r3,r7
  806460:	e0800417 	ldw	r2,16(fp)
  806464:	e13ffb05 	stb	r4,-20(fp)
  806468:	e0fffe0d 	sth	r3,-8(fp)
  80646c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  806470:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806474:	0005303a 	rdctl	r2,status
  806478:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80647c:	e0fffa17 	ldw	r3,-24(fp)
  806480:	00bfff84 	movi	r2,-2
  806484:	1884703a 	and	r2,r3,r2
  806488:	1001703a 	wrctl	status,r2
  
  return context;
  80648c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  806490:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  806494:	d0a09917 	ldw	r2,-32156(gp)
  806498:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  80649c:	e0bff617 	ldw	r2,-40(fp)
  8064a0:	10009326 	beq	r2,zero,8066f0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  8064a4:	e0bff617 	ldw	r2,-40(fp)
  8064a8:	10800517 	ldw	r2,20(r2)
  8064ac:	d0a09915 	stw	r2,-32156(gp)
  8064b0:	e0bff417 	ldw	r2,-48(fp)
  8064b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8064b8:	e0bff817 	ldw	r2,-32(fp)
  8064bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  8064c0:	e0bff617 	ldw	r2,-40(fp)
  8064c4:	e0fffc17 	ldw	r3,-16(fp)
  8064c8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  8064cc:	e0bff617 	ldw	r2,-40(fp)
  8064d0:	e0fffb03 	ldbu	r3,-20(fp)
  8064d4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  8064d8:	e0bff617 	ldw	r2,-40(fp)
  8064dc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  8064e0:	e0bff617 	ldw	r2,-40(fp)
  8064e4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8064e8:	e0bff617 	ldw	r2,-40(fp)
  8064ec:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8064f0:	e0bff617 	ldw	r2,-40(fp)
  8064f4:	e0c00317 	ldw	r3,12(fp)
  8064f8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  8064fc:	e0bff617 	ldw	r2,-40(fp)
  806500:	e0c00217 	ldw	r3,8(fp)
  806504:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  806508:	e0bff617 	ldw	r2,-40(fp)
  80650c:	e0fffd17 	ldw	r3,-12(fp)
  806510:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  806514:	e0bff617 	ldw	r2,-40(fp)
  806518:	e0ffff0b 	ldhu	r3,-4(fp)
  80651c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  806520:	e0bff617 	ldw	r2,-40(fp)
  806524:	e0fffe0b 	ldhu	r3,-8(fp)
  806528:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80652c:	e0bff617 	ldw	r2,-40(fp)
  806530:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  806534:	e0bffb03 	ldbu	r2,-20(fp)
  806538:	1004d0fa 	srli	r2,r2,3
  80653c:	1007883a 	mov	r3,r2
  806540:	e0bff617 	ldw	r2,-40(fp)
  806544:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  806548:	e0bffb03 	ldbu	r2,-20(fp)
  80654c:	108001cc 	andi	r2,r2,7
  806550:	1007883a 	mov	r3,r2
  806554:	e0bff617 	ldw	r2,-40(fp)
  806558:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80655c:	e0bff617 	ldw	r2,-40(fp)
  806560:	10800d03 	ldbu	r2,52(r2)
  806564:	10803fcc 	andi	r2,r2,255
  806568:	00c00044 	movi	r3,1
  80656c:	1884983a 	sll	r2,r3,r2
  806570:	1007883a 	mov	r3,r2
  806574:	e0bff617 	ldw	r2,-40(fp)
  806578:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80657c:	e0bff617 	ldw	r2,-40(fp)
  806580:	10800cc3 	ldbu	r2,51(r2)
  806584:	10803fcc 	andi	r2,r2,255
  806588:	00c00044 	movi	r3,1
  80658c:	1884983a 	sll	r2,r3,r2
  806590:	1007883a 	mov	r3,r2
  806594:	e0bff617 	ldw	r2,-40(fp)
  806598:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80659c:	e0bff617 	ldw	r2,-40(fp)
  8065a0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  8065a4:	e0bff617 	ldw	r2,-40(fp)
  8065a8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  8065ac:	e0bff617 	ldw	r2,-40(fp)
  8065b0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  8065b4:	e0bff617 	ldw	r2,-40(fp)
  8065b8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  8065bc:	e0bff617 	ldw	r2,-40(fp)
  8065c0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  8065c4:	e0bff617 	ldw	r2,-40(fp)
  8065c8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  8065cc:	e0bff617 	ldw	r2,-40(fp)
  8065d0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  8065d4:	e0bff617 	ldw	r2,-40(fp)
  8065d8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  8065dc:	e0bff617 	ldw	r2,-40(fp)
  8065e0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  8065e4:	e0bff617 	ldw	r2,-40(fp)
  8065e8:	00c00fc4 	movi	r3,63
  8065ec:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8065f0:	e0bff617 	ldw	r2,-40(fp)
  8065f4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  8065f8:	e13ff617 	ldw	r4,-40(fp)
  8065fc:	08108d00 	call	8108d0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  806600:	e13ff617 	ldw	r4,-40(fp)
  806604:	08107c80 	call	8107c8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806608:	0005303a 	rdctl	r2,status
  80660c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806610:	e0fff517 	ldw	r3,-44(fp)
  806614:	00bfff84 	movi	r2,-2
  806618:	1884703a 	and	r2,r3,r2
  80661c:	1001703a 	wrctl	status,r2
  
  return context;
  806620:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  806624:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  806628:	e0fffb03 	ldbu	r3,-20(fp)
  80662c:	008020b4 	movhi	r2,130
  806630:	10b35b04 	addi	r2,r2,-12948
  806634:	18c7883a 	add	r3,r3,r3
  806638:	18c7883a 	add	r3,r3,r3
  80663c:	10c5883a 	add	r2,r2,r3
  806640:	e0fff617 	ldw	r3,-40(fp)
  806644:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  806648:	d0e09517 	ldw	r3,-32172(gp)
  80664c:	e0bff617 	ldw	r2,-40(fp)
  806650:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  806654:	e0bff617 	ldw	r2,-40(fp)
  806658:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80665c:	d0a09517 	ldw	r2,-32172(gp)
  806660:	10000326 	beq	r2,zero,806670 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  806664:	d0a09517 	ldw	r2,-32172(gp)
  806668:	e0fff617 	ldw	r3,-40(fp)
  80666c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  806670:	e0bff617 	ldw	r2,-40(fp)
  806674:	d0a09515 	stw	r2,-32172(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  806678:	e0bff617 	ldw	r2,-40(fp)
  80667c:	10c00d83 	ldbu	r3,54(r2)
  806680:	d0a09e03 	ldbu	r2,-32136(gp)
  806684:	1884b03a 	or	r2,r3,r2
  806688:	d0a09e05 	stb	r2,-32136(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80668c:	e0bff617 	ldw	r2,-40(fp)
  806690:	10800d03 	ldbu	r2,52(r2)
  806694:	10c03fcc 	andi	r3,r2,255
  806698:	e0bff617 	ldw	r2,-40(fp)
  80669c:	10800d03 	ldbu	r2,52(r2)
  8066a0:	11003fcc 	andi	r4,r2,255
  8066a4:	d0a09e44 	addi	r2,gp,-32135
  8066a8:	2085883a 	add	r2,r4,r2
  8066ac:	11000003 	ldbu	r4,0(r2)
  8066b0:	e0bff617 	ldw	r2,-40(fp)
  8066b4:	10800d43 	ldbu	r2,53(r2)
  8066b8:	2084b03a 	or	r2,r4,r2
  8066bc:	1009883a 	mov	r4,r2
  8066c0:	d0a09e44 	addi	r2,gp,-32135
  8066c4:	1885883a 	add	r2,r3,r2
  8066c8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  8066cc:	d0a09a43 	ldbu	r2,-32151(gp)
  8066d0:	10800044 	addi	r2,r2,1
  8066d4:	d0a09a45 	stb	r2,-32151(gp)
  8066d8:	e0bff417 	ldw	r2,-48(fp)
  8066dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8066e0:	e0bff717 	ldw	r2,-36(fp)
  8066e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8066e8:	0005883a 	mov	r2,zero
  8066ec:	00000506 	br	806704 <OS_TCBInit+0x2c0>
  8066f0:	e0bff417 	ldw	r2,-48(fp)
  8066f4:	e0bff915 	stw	r2,-28(fp)
  8066f8:	e0bff917 	ldw	r2,-28(fp)
  8066fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  806700:	00801084 	movi	r2,66
}
  806704:	e037883a 	mov	sp,fp
  806708:	dfc00117 	ldw	ra,4(sp)
  80670c:	df000017 	ldw	fp,0(sp)
  806710:	dec00204 	addi	sp,sp,8
  806714:	f800283a 	ret

00806718 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  806718:	defffe04 	addi	sp,sp,-8
  80671c:	df000115 	stw	fp,4(sp)
  806720:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  806724:	d0a04404 	addi	r2,gp,-32496
  806728:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80672c:	d0a04504 	addi	r2,gp,-32492
  806730:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  806734:	d0a04684 	addi	r2,gp,-32486
  806738:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80673c:	d0a04704 	addi	r2,gp,-32484
  806740:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  806744:	d0a04604 	addi	r2,gp,-32488
  806748:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80674c:	d0a04784 	addi	r2,gp,-32482
  806750:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  806754:	d0a04804 	addi	r2,gp,-32480
  806758:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80675c:	d0a04884 	addi	r2,gp,-32478
  806760:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  806764:	d0a04904 	addi	r2,gp,-32476
  806768:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80676c:	d0a04984 	addi	r2,gp,-32474
  806770:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  806774:	d0a04a04 	addi	r2,gp,-32472
  806778:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80677c:	d0a04a84 	addi	r2,gp,-32470
  806780:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  806784:	d0a04b04 	addi	r2,gp,-32468
  806788:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80678c:	d0a04b84 	addi	r2,gp,-32466
  806790:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  806794:	d0a04c04 	addi	r2,gp,-32464
  806798:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80679c:	d0a04c84 	addi	r2,gp,-32462
  8067a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  8067a4:	d0a04d04 	addi	r2,gp,-32460
  8067a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  8067ac:	d0a04d84 	addi	r2,gp,-32458
  8067b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  8067b4:	d0a04e04 	addi	r2,gp,-32456
  8067b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  8067bc:	d0a04e84 	addi	r2,gp,-32454
  8067c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  8067c4:	d0a04f04 	addi	r2,gp,-32452
  8067c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  8067cc:	d0a04f84 	addi	r2,gp,-32450
  8067d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  8067d4:	d0a05004 	addi	r2,gp,-32448
  8067d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  8067dc:	d0a05084 	addi	r2,gp,-32446
  8067e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  8067e4:	d0a05104 	addi	r2,gp,-32444
  8067e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  8067ec:	d0a05184 	addi	r2,gp,-32442
  8067f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  8067f4:	d0a05204 	addi	r2,gp,-32440
  8067f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  8067fc:	d0a05284 	addi	r2,gp,-32438
  806800:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  806804:	d0a05304 	addi	r2,gp,-32436
  806808:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80680c:	d0a05384 	addi	r2,gp,-32434
  806810:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  806814:	d0a05404 	addi	r2,gp,-32432
  806818:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80681c:	d0a05484 	addi	r2,gp,-32430
  806820:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  806824:	d0a05504 	addi	r2,gp,-32428
  806828:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80682c:	d0a05584 	addi	r2,gp,-32426
  806830:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  806834:	d0a05604 	addi	r2,gp,-32424
  806838:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80683c:	d0a05684 	addi	r2,gp,-32422
  806840:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  806844:	d0a05704 	addi	r2,gp,-32420
  806848:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80684c:	d0a05784 	addi	r2,gp,-32418
  806850:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  806854:	d0a05804 	addi	r2,gp,-32416
  806858:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80685c:	d0a05884 	addi	r2,gp,-32414
  806860:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  806864:	d0a05904 	addi	r2,gp,-32412
  806868:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80686c:	d0a05984 	addi	r2,gp,-32410
  806870:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  806874:	d0a05a04 	addi	r2,gp,-32408
  806878:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80687c:	d0a05a84 	addi	r2,gp,-32406
  806880:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  806884:	d0a05b04 	addi	r2,gp,-32404
  806888:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80688c:	d0a06004 	addi	r2,gp,-32384
  806890:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  806894:	0001883a 	nop
  806898:	e037883a 	mov	sp,fp
  80689c:	df000017 	ldw	fp,0(sp)
  8068a0:	dec00104 	addi	sp,sp,4
  8068a4:	f800283a 	ret

008068a8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  8068a8:	defff204 	addi	sp,sp,-56
  8068ac:	df000d15 	stw	fp,52(sp)
  8068b0:	df000d04 	addi	fp,sp,52
  8068b4:	e13ffc15 	stw	r4,-16(fp)
  8068b8:	2807883a 	mov	r3,r5
  8068bc:	3005883a 	mov	r2,r6
  8068c0:	e1ffff15 	stw	r7,-4(fp)
  8068c4:	e0fffd0d 	sth	r3,-12(fp)
  8068c8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8068cc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8068d0:	e0bfff17 	ldw	r2,-4(fp)
  8068d4:	1000021e 	bne	r2,zero,8068e0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  8068d8:	0005883a 	mov	r2,zero
  8068dc:	0000b006 	br	806ba0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8068e0:	e0bffc17 	ldw	r2,-16(fp)
  8068e4:	1000051e 	bne	r2,zero,8068fc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8068e8:	e0bfff17 	ldw	r2,-4(fp)
  8068ec:	00c01b84 	movi	r3,110
  8068f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8068f4:	0005883a 	mov	r2,zero
  8068f8:	0000a906 	br	806ba0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8068fc:	e0bffc17 	ldw	r2,-16(fp)
  806900:	10800003 	ldbu	r2,0(r2)
  806904:	10803fcc 	andi	r2,r2,255
  806908:	10800160 	cmpeqi	r2,r2,5
  80690c:	1000051e 	bne	r2,zero,806924 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  806910:	e0bfff17 	ldw	r2,-4(fp)
  806914:	00c00044 	movi	r3,1
  806918:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  80691c:	0005883a 	mov	r2,zero
  806920:	00009f06 	br	806ba0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  806924:	e0fffe03 	ldbu	r3,-8(fp)
  806928:	00bfe004 	movi	r2,-128
  80692c:	1884703a 	and	r2,r3,r2
  806930:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  806934:	e0bff503 	ldbu	r2,-44(fp)
  806938:	10000626 	beq	r2,zero,806954 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  80693c:	e0bffe03 	ldbu	r2,-8(fp)
  806940:	10801fcc 	andi	r2,r2,127
  806944:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  806948:	00800044 	movi	r2,1
  80694c:	e0bff385 	stb	r2,-50(fp)
  806950:	00000106 	br	806958 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  806954:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  806958:	e0bfff17 	ldw	r2,-4(fp)
  80695c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806960:	0005303a 	rdctl	r2,status
  806964:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806968:	e0fffb17 	ldw	r3,-20(fp)
  80696c:	00bfff84 	movi	r2,-2
  806970:	1884703a 	and	r2,r3,r2
  806974:	1001703a 	wrctl	status,r2
  
  return context;
  806978:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  80697c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  806980:	e0bffe03 	ldbu	r2,-8(fp)
  806984:	10c00060 	cmpeqi	r3,r2,1
  806988:	18005f1e 	bne	r3,zero,806b08 <OSFlagAccept+0x260>
  80698c:	10c00088 	cmpgei	r3,r2,2
  806990:	1800021e 	bne	r3,zero,80699c <OSFlagAccept+0xf4>
  806994:	10003f26 	beq	r2,zero,806a94 <OSFlagAccept+0x1ec>
  806998:	00007706 	br	806b78 <OSFlagAccept+0x2d0>
  80699c:	10c000a0 	cmpeqi	r3,r2,2
  8069a0:	1800031e 	bne	r3,zero,8069b0 <OSFlagAccept+0x108>
  8069a4:	108000e0 	cmpeqi	r2,r2,3
  8069a8:	10001e1e 	bne	r2,zero,806a24 <OSFlagAccept+0x17c>
  8069ac:	00007206 	br	806b78 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8069b0:	e0bffc17 	ldw	r2,-16(fp)
  8069b4:	10c0020b 	ldhu	r3,8(r2)
  8069b8:	e0bffd0b 	ldhu	r2,-12(fp)
  8069bc:	1884703a 	and	r2,r3,r2
  8069c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8069c4:	e0fff30b 	ldhu	r3,-52(fp)
  8069c8:	e0bffd0b 	ldhu	r2,-12(fp)
  8069cc:	18800d1e 	bne	r3,r2,806a04 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8069d0:	e0bff383 	ldbu	r2,-50(fp)
  8069d4:	10800058 	cmpnei	r2,r2,1
  8069d8:	10000d1e 	bne	r2,zero,806a10 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8069dc:	e0bffc17 	ldw	r2,-16(fp)
  8069e0:	1080020b 	ldhu	r2,8(r2)
  8069e4:	1007883a 	mov	r3,r2
  8069e8:	e0bff30b 	ldhu	r2,-52(fp)
  8069ec:	0084303a 	nor	r2,zero,r2
  8069f0:	1884703a 	and	r2,r3,r2
  8069f4:	1007883a 	mov	r3,r2
  8069f8:	e0bffc17 	ldw	r2,-16(fp)
  8069fc:	10c0020d 	sth	r3,8(r2)
  806a00:	00000306 	br	806a10 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806a04:	e0bfff17 	ldw	r2,-4(fp)
  806a08:	00c01c04 	movi	r3,112
  806a0c:	10c00005 	stb	r3,0(r2)
  806a10:	e0bff417 	ldw	r2,-48(fp)
  806a14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806a18:	e0bff617 	ldw	r2,-40(fp)
  806a1c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  806a20:	00005e06 	br	806b9c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  806a24:	e0bffc17 	ldw	r2,-16(fp)
  806a28:	10c0020b 	ldhu	r3,8(r2)
  806a2c:	e0bffd0b 	ldhu	r2,-12(fp)
  806a30:	1884703a 	and	r2,r3,r2
  806a34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  806a38:	e0bff30b 	ldhu	r2,-52(fp)
  806a3c:	10000d26 	beq	r2,zero,806a74 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806a40:	e0bff383 	ldbu	r2,-50(fp)
  806a44:	10800058 	cmpnei	r2,r2,1
  806a48:	10000d1e 	bne	r2,zero,806a80 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  806a4c:	e0bffc17 	ldw	r2,-16(fp)
  806a50:	1080020b 	ldhu	r2,8(r2)
  806a54:	1007883a 	mov	r3,r2
  806a58:	e0bff30b 	ldhu	r2,-52(fp)
  806a5c:	0084303a 	nor	r2,zero,r2
  806a60:	1884703a 	and	r2,r3,r2
  806a64:	1007883a 	mov	r3,r2
  806a68:	e0bffc17 	ldw	r2,-16(fp)
  806a6c:	10c0020d 	sth	r3,8(r2)
  806a70:	00000306 	br	806a80 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806a74:	e0bfff17 	ldw	r2,-4(fp)
  806a78:	00c01c04 	movi	r3,112
  806a7c:	10c00005 	stb	r3,0(r2)
  806a80:	e0bff417 	ldw	r2,-48(fp)
  806a84:	e0bff715 	stw	r2,-36(fp)
  806a88:	e0bff717 	ldw	r2,-36(fp)
  806a8c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  806a90:	00004206 	br	806b9c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  806a94:	e0bffc17 	ldw	r2,-16(fp)
  806a98:	1080020b 	ldhu	r2,8(r2)
  806a9c:	0084303a 	nor	r2,zero,r2
  806aa0:	1007883a 	mov	r3,r2
  806aa4:	e0bffd0b 	ldhu	r2,-12(fp)
  806aa8:	1884703a 	and	r2,r3,r2
  806aac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  806ab0:	e0fff30b 	ldhu	r3,-52(fp)
  806ab4:	e0bffd0b 	ldhu	r2,-12(fp)
  806ab8:	18800b1e 	bne	r3,r2,806ae8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806abc:	e0bff383 	ldbu	r2,-50(fp)
  806ac0:	10800058 	cmpnei	r2,r2,1
  806ac4:	10000b1e 	bne	r2,zero,806af4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  806ac8:	e0bffc17 	ldw	r2,-16(fp)
  806acc:	10c0020b 	ldhu	r3,8(r2)
  806ad0:	e0bff30b 	ldhu	r2,-52(fp)
  806ad4:	1884b03a 	or	r2,r3,r2
  806ad8:	1007883a 	mov	r3,r2
  806adc:	e0bffc17 	ldw	r2,-16(fp)
  806ae0:	10c0020d 	sth	r3,8(r2)
  806ae4:	00000306 	br	806af4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806ae8:	e0bfff17 	ldw	r2,-4(fp)
  806aec:	00c01c04 	movi	r3,112
  806af0:	10c00005 	stb	r3,0(r2)
  806af4:	e0bff417 	ldw	r2,-48(fp)
  806af8:	e0bff815 	stw	r2,-32(fp)
  806afc:	e0bff817 	ldw	r2,-32(fp)
  806b00:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  806b04:	00002506 	br	806b9c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  806b08:	e0bffc17 	ldw	r2,-16(fp)
  806b0c:	1080020b 	ldhu	r2,8(r2)
  806b10:	0084303a 	nor	r2,zero,r2
  806b14:	1007883a 	mov	r3,r2
  806b18:	e0bffd0b 	ldhu	r2,-12(fp)
  806b1c:	1884703a 	and	r2,r3,r2
  806b20:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  806b24:	e0bff30b 	ldhu	r2,-52(fp)
  806b28:	10000b26 	beq	r2,zero,806b58 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806b2c:	e0bff383 	ldbu	r2,-50(fp)
  806b30:	10800058 	cmpnei	r2,r2,1
  806b34:	10000b1e 	bne	r2,zero,806b64 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  806b38:	e0bffc17 	ldw	r2,-16(fp)
  806b3c:	10c0020b 	ldhu	r3,8(r2)
  806b40:	e0bff30b 	ldhu	r2,-52(fp)
  806b44:	1884b03a 	or	r2,r3,r2
  806b48:	1007883a 	mov	r3,r2
  806b4c:	e0bffc17 	ldw	r2,-16(fp)
  806b50:	10c0020d 	sth	r3,8(r2)
  806b54:	00000306 	br	806b64 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806b58:	e0bfff17 	ldw	r2,-4(fp)
  806b5c:	00c01c04 	movi	r3,112
  806b60:	10c00005 	stb	r3,0(r2)
  806b64:	e0bff417 	ldw	r2,-48(fp)
  806b68:	e0bff915 	stw	r2,-28(fp)
  806b6c:	e0bff917 	ldw	r2,-28(fp)
  806b70:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  806b74:	00000906 	br	806b9c <OSFlagAccept+0x2f4>
  806b78:	e0bff417 	ldw	r2,-48(fp)
  806b7c:	e0bffa15 	stw	r2,-24(fp)
  806b80:	e0bffa17 	ldw	r2,-24(fp)
  806b84:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  806b88:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  806b8c:	e0bfff17 	ldw	r2,-4(fp)
  806b90:	00c01bc4 	movi	r3,111
  806b94:	10c00005 	stb	r3,0(r2)
             break;
  806b98:	0001883a 	nop
    }
    return (flags_rdy);
  806b9c:	e0bff30b 	ldhu	r2,-52(fp)
}
  806ba0:	e037883a 	mov	sp,fp
  806ba4:	df000017 	ldw	fp,0(sp)
  806ba8:	dec00104 	addi	sp,sp,4
  806bac:	f800283a 	ret

00806bb0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  806bb0:	defff804 	addi	sp,sp,-32
  806bb4:	df000715 	stw	fp,28(sp)
  806bb8:	df000704 	addi	fp,sp,28
  806bbc:	2005883a 	mov	r2,r4
  806bc0:	e17fff15 	stw	r5,-4(fp)
  806bc4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  806bc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  806bcc:	e0bfff17 	ldw	r2,-4(fp)
  806bd0:	1000021e 	bne	r2,zero,806bdc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  806bd4:	0005883a 	mov	r2,zero
  806bd8:	00003306 	br	806ca8 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  806bdc:	d0a0a003 	ldbu	r2,-32128(gp)
  806be0:	10803fcc 	andi	r2,r2,255
  806be4:	10000526 	beq	r2,zero,806bfc <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  806be8:	e0bfff17 	ldw	r2,-4(fp)
  806bec:	00c00404 	movi	r3,16
  806bf0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  806bf4:	0005883a 	mov	r2,zero
  806bf8:	00002b06 	br	806ca8 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806bfc:	0005303a 	rdctl	r2,status
  806c00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806c04:	e0fffd17 	ldw	r3,-12(fp)
  806c08:	00bfff84 	movi	r2,-2
  806c0c:	1884703a 	and	r2,r3,r2
  806c10:	1001703a 	wrctl	status,r2
  
  return context;
  806c14:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  806c18:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  806c1c:	d0a0a317 	ldw	r2,-32116(gp)
  806c20:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  806c24:	e0bffb17 	ldw	r2,-20(fp)
  806c28:	10001726 	beq	r2,zero,806c88 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  806c2c:	d0a0a317 	ldw	r2,-32116(gp)
  806c30:	10800117 	ldw	r2,4(r2)
  806c34:	d0a0a315 	stw	r2,-32116(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  806c38:	e0bffb17 	ldw	r2,-20(fp)
  806c3c:	00c00144 	movi	r3,5
  806c40:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  806c44:	e0bffb17 	ldw	r2,-20(fp)
  806c48:	e0fffe0b 	ldhu	r3,-8(fp)
  806c4c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  806c50:	e0bffb17 	ldw	r2,-20(fp)
  806c54:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  806c58:	e0bffb17 	ldw	r2,-20(fp)
  806c5c:	00c00fc4 	movi	r3,63
  806c60:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806c64:	e0bffb17 	ldw	r2,-20(fp)
  806c68:	100002c5 	stb	zero,11(r2)
  806c6c:	e0bff917 	ldw	r2,-28(fp)
  806c70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c74:	e0bffa17 	ldw	r2,-24(fp)
  806c78:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  806c7c:	e0bfff17 	ldw	r2,-4(fp)
  806c80:	10000005 	stb	zero,0(r2)
  806c84:	00000706 	br	806ca4 <OSFlagCreate+0xf4>
  806c88:	e0bff917 	ldw	r2,-28(fp)
  806c8c:	e0bffc15 	stw	r2,-16(fp)
  806c90:	e0bffc17 	ldw	r2,-16(fp)
  806c94:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  806c98:	e0bfff17 	ldw	r2,-4(fp)
  806c9c:	00c01c84 	movi	r3,114
  806ca0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  806ca4:	e0bffb17 	ldw	r2,-20(fp)
}
  806ca8:	e037883a 	mov	sp,fp
  806cac:	df000017 	ldw	fp,0(sp)
  806cb0:	dec00104 	addi	sp,sp,4
  806cb4:	f800283a 	ret

00806cb8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  806cb8:	defff204 	addi	sp,sp,-56
  806cbc:	dfc00d15 	stw	ra,52(sp)
  806cc0:	df000c15 	stw	fp,48(sp)
  806cc4:	df000c04 	addi	fp,sp,48
  806cc8:	e13ffd15 	stw	r4,-12(fp)
  806ccc:	2805883a 	mov	r2,r5
  806cd0:	e1bfff15 	stw	r6,-4(fp)
  806cd4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806cd8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  806cdc:	e0bfff17 	ldw	r2,-4(fp)
  806ce0:	1000021e 	bne	r2,zero,806cec <OSFlagDel+0x34>
        return (pgrp);
  806ce4:	e0bffd17 	ldw	r2,-12(fp)
  806ce8:	00008006 	br	806eec <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  806cec:	e0bffd17 	ldw	r2,-12(fp)
  806cf0:	1000051e 	bne	r2,zero,806d08 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806cf4:	e0bfff17 	ldw	r2,-4(fp)
  806cf8:	00c01b84 	movi	r3,110
  806cfc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  806d00:	e0bffd17 	ldw	r2,-12(fp)
  806d04:	00007906 	br	806eec <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  806d08:	d0a0a003 	ldbu	r2,-32128(gp)
  806d0c:	10803fcc 	andi	r2,r2,255
  806d10:	10000526 	beq	r2,zero,806d28 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  806d14:	e0bfff17 	ldw	r2,-4(fp)
  806d18:	00c003c4 	movi	r3,15
  806d1c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  806d20:	e0bffd17 	ldw	r2,-12(fp)
  806d24:	00007106 	br	806eec <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  806d28:	e0bffd17 	ldw	r2,-12(fp)
  806d2c:	10800003 	ldbu	r2,0(r2)
  806d30:	10803fcc 	andi	r2,r2,255
  806d34:	10800160 	cmpeqi	r2,r2,5
  806d38:	1000051e 	bne	r2,zero,806d50 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  806d3c:	e0bfff17 	ldw	r2,-4(fp)
  806d40:	00c00044 	movi	r3,1
  806d44:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  806d48:	e0bffd17 	ldw	r2,-12(fp)
  806d4c:	00006706 	br	806eec <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d50:	0005303a 	rdctl	r2,status
  806d54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806d58:	e0fffc17 	ldw	r3,-16(fp)
  806d5c:	00bfff84 	movi	r2,-2
  806d60:	1884703a 	and	r2,r3,r2
  806d64:	1001703a 	wrctl	status,r2
  
  return context;
  806d68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806d6c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  806d70:	e0bffd17 	ldw	r2,-12(fp)
  806d74:	10800117 	ldw	r2,4(r2)
  806d78:	10000326 	beq	r2,zero,806d88 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  806d7c:	00800044 	movi	r2,1
  806d80:	e0bff405 	stb	r2,-48(fp)
  806d84:	00000106 	br	806d8c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  806d88:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  806d8c:	e0bffe03 	ldbu	r2,-8(fp)
  806d90:	10000326 	beq	r2,zero,806da0 <OSFlagDel+0xe8>
  806d94:	10800060 	cmpeqi	r2,r2,1
  806d98:	1000231e 	bne	r2,zero,806e28 <OSFlagDel+0x170>
  806d9c:	00004806 	br	806ec0 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  806da0:	e0bff403 	ldbu	r2,-48(fp)
  806da4:	1000161e 	bne	r2,zero,806e00 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  806da8:	e0bffd17 	ldw	r2,-12(fp)
  806dac:	00c00fc4 	movi	r3,63
  806db0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806db4:	e0bffd17 	ldw	r2,-12(fp)
  806db8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  806dbc:	e0bffd17 	ldw	r2,-12(fp)
  806dc0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  806dc4:	d0e0a317 	ldw	r3,-32116(gp)
  806dc8:	e0bffd17 	ldw	r2,-12(fp)
  806dcc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  806dd0:	e0bffd17 	ldw	r2,-12(fp)
  806dd4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  806dd8:	e0bffd17 	ldw	r2,-12(fp)
  806ddc:	d0a0a315 	stw	r2,-32116(gp)
  806de0:	e0bff717 	ldw	r2,-36(fp)
  806de4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806de8:	e0bff817 	ldw	r2,-32(fp)
  806dec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  806df0:	e0bfff17 	ldw	r2,-4(fp)
  806df4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  806df8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  806dfc:	00003a06 	br	806ee8 <OSFlagDel+0x230>
  806e00:	e0bff717 	ldw	r2,-36(fp)
  806e04:	e0bff915 	stw	r2,-28(fp)
  806e08:	e0bff917 	ldw	r2,-28(fp)
  806e0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  806e10:	e0bfff17 	ldw	r2,-4(fp)
  806e14:	00c01244 	movi	r3,73
  806e18:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  806e1c:	e0bffd17 	ldw	r2,-12(fp)
  806e20:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  806e24:	00003006 	br	806ee8 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  806e28:	e0bffd17 	ldw	r2,-12(fp)
  806e2c:	10800117 	ldw	r2,4(r2)
  806e30:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  806e34:	00000606 	br	806e50 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  806e38:	000b883a 	mov	r5,zero
  806e3c:	e13ff517 	ldw	r4,-44(fp)
  806e40:	0807e240 	call	807e24 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  806e44:	e0bff517 	ldw	r2,-44(fp)
  806e48:	10800017 	ldw	r2,0(r2)
  806e4c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  806e50:	e0bff517 	ldw	r2,-44(fp)
  806e54:	103ff81e 	bne	r2,zero,806e38 <__alt_mem_epcs_flash_controller_0+0xff7fde38>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  806e58:	e0bffd17 	ldw	r2,-12(fp)
  806e5c:	00c00fc4 	movi	r3,63
  806e60:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806e64:	e0bffd17 	ldw	r2,-12(fp)
  806e68:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  806e6c:	e0bffd17 	ldw	r2,-12(fp)
  806e70:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  806e74:	d0e0a317 	ldw	r3,-32116(gp)
  806e78:	e0bffd17 	ldw	r2,-12(fp)
  806e7c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  806e80:	e0bffd17 	ldw	r2,-12(fp)
  806e84:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  806e88:	e0bffd17 	ldw	r2,-12(fp)
  806e8c:	d0a0a315 	stw	r2,-32116(gp)
  806e90:	e0bff717 	ldw	r2,-36(fp)
  806e94:	e0bffa15 	stw	r2,-24(fp)
  806e98:	e0bffa17 	ldw	r2,-24(fp)
  806e9c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  806ea0:	e0bff403 	ldbu	r2,-48(fp)
  806ea4:	10800058 	cmpnei	r2,r2,1
  806ea8:	1000011e 	bne	r2,zero,806eb0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  806eac:	08060440 	call	806044 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  806eb0:	e0bfff17 	ldw	r2,-4(fp)
  806eb4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  806eb8:	e03ff615 	stw	zero,-40(fp)
             break;
  806ebc:	00000a06 	br	806ee8 <OSFlagDel+0x230>
  806ec0:	e0bff717 	ldw	r2,-36(fp)
  806ec4:	e0bffb15 	stw	r2,-20(fp)
  806ec8:	e0bffb17 	ldw	r2,-20(fp)
  806ecc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  806ed0:	e0bfff17 	ldw	r2,-4(fp)
  806ed4:	00c001c4 	movi	r3,7
  806ed8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  806edc:	e0bffd17 	ldw	r2,-12(fp)
  806ee0:	e0bff615 	stw	r2,-40(fp)
             break;
  806ee4:	0001883a 	nop
    }
    return (pgrp_return);
  806ee8:	e0bff617 	ldw	r2,-40(fp)
}
  806eec:	e037883a 	mov	sp,fp
  806ef0:	dfc00117 	ldw	ra,4(sp)
  806ef4:	df000017 	ldw	fp,0(sp)
  806ef8:	dec00204 	addi	sp,sp,8
  806efc:	f800283a 	ret

00806f00 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  806f00:	defff604 	addi	sp,sp,-40
  806f04:	dfc00915 	stw	ra,36(sp)
  806f08:	df000815 	stw	fp,32(sp)
  806f0c:	df000804 	addi	fp,sp,32
  806f10:	e13ffd15 	stw	r4,-12(fp)
  806f14:	e17ffe15 	stw	r5,-8(fp)
  806f18:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806f1c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  806f20:	e0bfff17 	ldw	r2,-4(fp)
  806f24:	1000021e 	bne	r2,zero,806f30 <OSFlagNameGet+0x30>
        return (0);
  806f28:	0005883a 	mov	r2,zero
  806f2c:	00003906 	br	807014 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  806f30:	e0bffd17 	ldw	r2,-12(fp)
  806f34:	1000051e 	bne	r2,zero,806f4c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806f38:	e0bfff17 	ldw	r2,-4(fp)
  806f3c:	00c01b84 	movi	r3,110
  806f40:	10c00005 	stb	r3,0(r2)
        return (0);
  806f44:	0005883a 	mov	r2,zero
  806f48:	00003206 	br	807014 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  806f4c:	e0bffe17 	ldw	r2,-8(fp)
  806f50:	1000051e 	bne	r2,zero,806f68 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  806f54:	e0bfff17 	ldw	r2,-4(fp)
  806f58:	00c00304 	movi	r3,12
  806f5c:	10c00005 	stb	r3,0(r2)
        return (0);
  806f60:	0005883a 	mov	r2,zero
  806f64:	00002b06 	br	807014 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  806f68:	d0a0a003 	ldbu	r2,-32128(gp)
  806f6c:	10803fcc 	andi	r2,r2,255
  806f70:	10000526 	beq	r2,zero,806f88 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  806f74:	e0bfff17 	ldw	r2,-4(fp)
  806f78:	00c00444 	movi	r3,17
  806f7c:	10c00005 	stb	r3,0(r2)
        return (0);
  806f80:	0005883a 	mov	r2,zero
  806f84:	00002306 	br	807014 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806f88:	0005303a 	rdctl	r2,status
  806f8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806f90:	e0fffc17 	ldw	r3,-16(fp)
  806f94:	00bfff84 	movi	r2,-2
  806f98:	1884703a 	and	r2,r3,r2
  806f9c:	1001703a 	wrctl	status,r2
  
  return context;
  806fa0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806fa4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  806fa8:	e0bffd17 	ldw	r2,-12(fp)
  806fac:	10800003 	ldbu	r2,0(r2)
  806fb0:	10803fcc 	andi	r2,r2,255
  806fb4:	10800160 	cmpeqi	r2,r2,5
  806fb8:	1000091e 	bne	r2,zero,806fe0 <OSFlagNameGet+0xe0>
  806fbc:	e0bff817 	ldw	r2,-32(fp)
  806fc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806fc4:	e0bff917 	ldw	r2,-28(fp)
  806fc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  806fcc:	e0bfff17 	ldw	r2,-4(fp)
  806fd0:	00c00044 	movi	r3,1
  806fd4:	10c00005 	stb	r3,0(r2)
        return (0);
  806fd8:	0005883a 	mov	r2,zero
  806fdc:	00000d06 	br	807014 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  806fe0:	e0bffd17 	ldw	r2,-12(fp)
  806fe4:	10800284 	addi	r2,r2,10
  806fe8:	100b883a 	mov	r5,r2
  806fec:	e13ffe17 	ldw	r4,-8(fp)
  806ff0:	08061880 	call	806188 <OS_StrCopy>
  806ff4:	e0bffb05 	stb	r2,-20(fp)
  806ff8:	e0bff817 	ldw	r2,-32(fp)
  806ffc:	e0bffa15 	stw	r2,-24(fp)
  807000:	e0bffa17 	ldw	r2,-24(fp)
  807004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807008:	e0bfff17 	ldw	r2,-4(fp)
  80700c:	10000005 	stb	zero,0(r2)
    return (len);
  807010:	e0bffb03 	ldbu	r2,-20(fp)
}
  807014:	e037883a 	mov	sp,fp
  807018:	dfc00117 	ldw	ra,4(sp)
  80701c:	df000017 	ldw	fp,0(sp)
  807020:	dec00204 	addi	sp,sp,8
  807024:	f800283a 	ret

00807028 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  807028:	defff504 	addi	sp,sp,-44
  80702c:	dfc00a15 	stw	ra,40(sp)
  807030:	df000915 	stw	fp,36(sp)
  807034:	df000904 	addi	fp,sp,36
  807038:	e13ffd15 	stw	r4,-12(fp)
  80703c:	e17ffe15 	stw	r5,-8(fp)
  807040:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807044:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807048:	e0bfff17 	ldw	r2,-4(fp)
  80704c:	10004326 	beq	r2,zero,80715c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  807050:	e0bffd17 	ldw	r2,-12(fp)
  807054:	1000041e 	bne	r2,zero,807068 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  807058:	e0bfff17 	ldw	r2,-4(fp)
  80705c:	00c01b84 	movi	r3,110
  807060:	10c00005 	stb	r3,0(r2)
        return;
  807064:	00003e06 	br	807160 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807068:	e0bffe17 	ldw	r2,-8(fp)
  80706c:	1000041e 	bne	r2,zero,807080 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  807070:	e0bfff17 	ldw	r2,-4(fp)
  807074:	00c00304 	movi	r3,12
  807078:	10c00005 	stb	r3,0(r2)
        return;
  80707c:	00003806 	br	807160 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807080:	d0a0a003 	ldbu	r2,-32128(gp)
  807084:	10803fcc 	andi	r2,r2,255
  807088:	10000426 	beq	r2,zero,80709c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  80708c:	e0bfff17 	ldw	r2,-4(fp)
  807090:	00c00484 	movi	r3,18
  807094:	10c00005 	stb	r3,0(r2)
        return;
  807098:	00003106 	br	807160 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80709c:	0005303a 	rdctl	r2,status
  8070a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8070a4:	e0fffc17 	ldw	r3,-16(fp)
  8070a8:	00bfff84 	movi	r2,-2
  8070ac:	1884703a 	and	r2,r3,r2
  8070b0:	1001703a 	wrctl	status,r2
  
  return context;
  8070b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8070b8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  8070bc:	e0bffd17 	ldw	r2,-12(fp)
  8070c0:	10800003 	ldbu	r2,0(r2)
  8070c4:	10803fcc 	andi	r2,r2,255
  8070c8:	10800160 	cmpeqi	r2,r2,5
  8070cc:	1000081e 	bne	r2,zero,8070f0 <OSFlagNameSet+0xc8>
  8070d0:	e0bff717 	ldw	r2,-36(fp)
  8070d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8070d8:	e0bff817 	ldw	r2,-32(fp)
  8070dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  8070e0:	e0bfff17 	ldw	r2,-4(fp)
  8070e4:	00c00044 	movi	r3,1
  8070e8:	10c00005 	stb	r3,0(r2)
        return;
  8070ec:	00001c06 	br	807160 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8070f0:	e13ffe17 	ldw	r4,-8(fp)
  8070f4:	08061fc0 	call	8061fc <OS_StrLen>
  8070f8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  8070fc:	e0bffa03 	ldbu	r2,-24(fp)
  807100:	10800830 	cmpltui	r2,r2,32
  807104:	1000081e 	bne	r2,zero,807128 <OSFlagNameSet+0x100>
  807108:	e0bff717 	ldw	r2,-36(fp)
  80710c:	e0bff915 	stw	r2,-28(fp)
  807110:	e0bff917 	ldw	r2,-28(fp)
  807114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  807118:	e0bfff17 	ldw	r2,-4(fp)
  80711c:	00c01cc4 	movi	r3,115
  807120:	10c00005 	stb	r3,0(r2)
        return;
  807124:	00000e06 	br	807160 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  807128:	e0bffd17 	ldw	r2,-12(fp)
  80712c:	10800284 	addi	r2,r2,10
  807130:	e17ffe17 	ldw	r5,-8(fp)
  807134:	1009883a 	mov	r4,r2
  807138:	08061880 	call	806188 <OS_StrCopy>
  80713c:	e0bff717 	ldw	r2,-36(fp)
  807140:	e0bffb15 	stw	r2,-20(fp)
  807144:	e0bffb17 	ldw	r2,-20(fp)
  807148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80714c:	e0bfff17 	ldw	r2,-4(fp)
  807150:	10000005 	stb	zero,0(r2)
    return;
  807154:	0001883a 	nop
  807158:	00000106 	br	807160 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  80715c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  807160:	e037883a 	mov	sp,fp
  807164:	dfc00117 	ldw	ra,4(sp)
  807168:	df000017 	ldw	fp,0(sp)
  80716c:	dec00204 	addi	sp,sp,8
  807170:	f800283a 	ret

00807174 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  807174:	deffe104 	addi	sp,sp,-124
  807178:	dfc01e15 	stw	ra,120(sp)
  80717c:	df001d15 	stw	fp,116(sp)
  807180:	df001d04 	addi	fp,sp,116
  807184:	e13ffc15 	stw	r4,-16(fp)
  807188:	2809883a 	mov	r4,r5
  80718c:	3007883a 	mov	r3,r6
  807190:	3805883a 	mov	r2,r7
  807194:	e13ffd0d 	sth	r4,-12(fp)
  807198:	e0fffe05 	stb	r3,-8(fp)
  80719c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8071a0:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8071a4:	e0800217 	ldw	r2,8(fp)
  8071a8:	1000021e 	bne	r2,zero,8071b4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  8071ac:	0005883a 	mov	r2,zero
  8071b0:	00015906 	br	807718 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8071b4:	e0bffc17 	ldw	r2,-16(fp)
  8071b8:	1000051e 	bne	r2,zero,8071d0 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8071bc:	e0800217 	ldw	r2,8(fp)
  8071c0:	00c01b84 	movi	r3,110
  8071c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8071c8:	0005883a 	mov	r2,zero
  8071cc:	00015206 	br	807718 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8071d0:	d0a0a003 	ldbu	r2,-32128(gp)
  8071d4:	10803fcc 	andi	r2,r2,255
  8071d8:	10000526 	beq	r2,zero,8071f0 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8071dc:	e0800217 	ldw	r2,8(fp)
  8071e0:	00c00084 	movi	r3,2
  8071e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8071e8:	0005883a 	mov	r2,zero
  8071ec:	00014a06 	br	807718 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8071f0:	d0a09203 	ldbu	r2,-32184(gp)
  8071f4:	10803fcc 	andi	r2,r2,255
  8071f8:	10000526 	beq	r2,zero,807210 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8071fc:	e0800217 	ldw	r2,8(fp)
  807200:	00c00344 	movi	r3,13
  807204:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807208:	0005883a 	mov	r2,zero
  80720c:	00014206 	br	807718 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  807210:	e0bffc17 	ldw	r2,-16(fp)
  807214:	10800003 	ldbu	r2,0(r2)
  807218:	10803fcc 	andi	r2,r2,255
  80721c:	10800160 	cmpeqi	r2,r2,5
  807220:	1000051e 	bne	r2,zero,807238 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  807224:	e0800217 	ldw	r2,8(fp)
  807228:	00c00044 	movi	r3,1
  80722c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807230:	0005883a 	mov	r2,zero
  807234:	00013806 	br	807718 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  807238:	e0fffe03 	ldbu	r3,-8(fp)
  80723c:	00bfe004 	movi	r2,-128
  807240:	1884703a 	and	r2,r3,r2
  807244:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  807248:	e0bfe603 	ldbu	r2,-104(fp)
  80724c:	10000626 	beq	r2,zero,807268 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  807250:	e0bffe03 	ldbu	r2,-8(fp)
  807254:	10801fcc 	andi	r2,r2,127
  807258:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  80725c:	00800044 	movi	r2,1
  807260:	e0bfe405 	stb	r2,-112(fp)
  807264:	00000106 	br	80726c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  807268:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80726c:	0005303a 	rdctl	r2,status
  807270:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807274:	e0fff617 	ldw	r3,-40(fp)
  807278:	00bfff84 	movi	r2,-2
  80727c:	1884703a 	and	r2,r3,r2
  807280:	1001703a 	wrctl	status,r2
  
  return context;
  807284:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  807288:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  80728c:	e0bffe03 	ldbu	r2,-8(fp)
  807290:	10c00060 	cmpeqi	r3,r2,1
  807294:	1800921e 	bne	r3,zero,8074e0 <OSFlagPend+0x36c>
  807298:	10c00088 	cmpgei	r3,r2,2
  80729c:	1800021e 	bne	r3,zero,8072a8 <OSFlagPend+0x134>
  8072a0:	10006126 	beq	r2,zero,807428 <OSFlagPend+0x2b4>
  8072a4:	0000bb06 	br	807594 <OSFlagPend+0x420>
  8072a8:	10c000a0 	cmpeqi	r3,r2,2
  8072ac:	1800031e 	bne	r3,zero,8072bc <OSFlagPend+0x148>
  8072b0:	108000e0 	cmpeqi	r2,r2,3
  8072b4:	10002f1e 	bne	r2,zero,807374 <OSFlagPend+0x200>
  8072b8:	0000b606 	br	807594 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8072bc:	e0bffc17 	ldw	r2,-16(fp)
  8072c0:	10c0020b 	ldhu	r3,8(r2)
  8072c4:	e0bffd0b 	ldhu	r2,-12(fp)
  8072c8:	1884703a 	and	r2,r3,r2
  8072cc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8072d0:	e0ffe80b 	ldhu	r3,-96(fp)
  8072d4:	e0bffd0b 	ldhu	r2,-12(fp)
  8072d8:	1880171e 	bne	r3,r2,807338 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8072dc:	e0bfe403 	ldbu	r2,-112(fp)
  8072e0:	10800058 	cmpnei	r2,r2,1
  8072e4:	1000091e 	bne	r2,zero,80730c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8072e8:	e0bffc17 	ldw	r2,-16(fp)
  8072ec:	1080020b 	ldhu	r2,8(r2)
  8072f0:	1007883a 	mov	r3,r2
  8072f4:	e0bfe80b 	ldhu	r2,-96(fp)
  8072f8:	0084303a 	nor	r2,zero,r2
  8072fc:	1884703a 	and	r2,r3,r2
  807300:	1007883a 	mov	r3,r2
  807304:	e0bffc17 	ldw	r2,-16(fp)
  807308:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80730c:	d0a0a117 	ldw	r2,-32124(gp)
  807310:	e0ffe80b 	ldhu	r3,-96(fp)
  807314:	10c00b0d 	sth	r3,44(r2)
  807318:	e0bfe517 	ldw	r2,-108(fp)
  80731c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807320:	e0bfe717 	ldw	r2,-100(fp)
  807324:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  807328:	e0800217 	ldw	r2,8(fp)
  80732c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  807330:	e0bfe80b 	ldhu	r2,-96(fp)
  807334:	0000f806 	br	807718 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  807338:	e13ffd0b 	ldhu	r4,-12(fp)
  80733c:	e17ffe03 	ldbu	r5,-8(fp)
  807340:	e0bfff0b 	ldhu	r2,-4(fp)
  807344:	e0fff704 	addi	r3,fp,-36
  807348:	d8800015 	stw	r2,0(sp)
  80734c:	280f883a 	mov	r7,r5
  807350:	200d883a 	mov	r6,r4
  807354:	180b883a 	mov	r5,r3
  807358:	e13ffc17 	ldw	r4,-16(fp)
  80735c:	0807be40 	call	807be4 <OS_FlagBlock>
  807360:	e0bfe517 	ldw	r2,-108(fp)
  807364:	e0bfe915 	stw	r2,-92(fp)
  807368:	e0bfe917 	ldw	r2,-92(fp)
  80736c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  807370:	00009206 	br	8075bc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  807374:	e0bffc17 	ldw	r2,-16(fp)
  807378:	10c0020b 	ldhu	r3,8(r2)
  80737c:	e0bffd0b 	ldhu	r2,-12(fp)
  807380:	1884703a 	and	r2,r3,r2
  807384:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  807388:	e0bfe80b 	ldhu	r2,-96(fp)
  80738c:	10001726 	beq	r2,zero,8073ec <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  807390:	e0bfe403 	ldbu	r2,-112(fp)
  807394:	10800058 	cmpnei	r2,r2,1
  807398:	1000091e 	bne	r2,zero,8073c0 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80739c:	e0bffc17 	ldw	r2,-16(fp)
  8073a0:	1080020b 	ldhu	r2,8(r2)
  8073a4:	1007883a 	mov	r3,r2
  8073a8:	e0bfe80b 	ldhu	r2,-96(fp)
  8073ac:	0084303a 	nor	r2,zero,r2
  8073b0:	1884703a 	and	r2,r3,r2
  8073b4:	1007883a 	mov	r3,r2
  8073b8:	e0bffc17 	ldw	r2,-16(fp)
  8073bc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8073c0:	d0a0a117 	ldw	r2,-32124(gp)
  8073c4:	e0ffe80b 	ldhu	r3,-96(fp)
  8073c8:	10c00b0d 	sth	r3,44(r2)
  8073cc:	e0bfe517 	ldw	r2,-108(fp)
  8073d0:	e0bfea15 	stw	r2,-88(fp)
  8073d4:	e0bfea17 	ldw	r2,-88(fp)
  8073d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8073dc:	e0800217 	ldw	r2,8(fp)
  8073e0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8073e4:	e0bfe80b 	ldhu	r2,-96(fp)
  8073e8:	0000cb06 	br	807718 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8073ec:	e13ffd0b 	ldhu	r4,-12(fp)
  8073f0:	e17ffe03 	ldbu	r5,-8(fp)
  8073f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8073f8:	e0fff704 	addi	r3,fp,-36
  8073fc:	d8800015 	stw	r2,0(sp)
  807400:	280f883a 	mov	r7,r5
  807404:	200d883a 	mov	r6,r4
  807408:	180b883a 	mov	r5,r3
  80740c:	e13ffc17 	ldw	r4,-16(fp)
  807410:	0807be40 	call	807be4 <OS_FlagBlock>
  807414:	e0bfe517 	ldw	r2,-108(fp)
  807418:	e0bfeb15 	stw	r2,-84(fp)
  80741c:	e0bfeb17 	ldw	r2,-84(fp)
  807420:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  807424:	00006506 	br	8075bc <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  807428:	e0bffc17 	ldw	r2,-16(fp)
  80742c:	1080020b 	ldhu	r2,8(r2)
  807430:	0084303a 	nor	r2,zero,r2
  807434:	1007883a 	mov	r3,r2
  807438:	e0bffd0b 	ldhu	r2,-12(fp)
  80743c:	1884703a 	and	r2,r3,r2
  807440:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  807444:	e0ffe80b 	ldhu	r3,-96(fp)
  807448:	e0bffd0b 	ldhu	r2,-12(fp)
  80744c:	1880151e 	bne	r3,r2,8074a4 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  807450:	e0bfe403 	ldbu	r2,-112(fp)
  807454:	10800058 	cmpnei	r2,r2,1
  807458:	1000071e 	bne	r2,zero,807478 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80745c:	e0bffc17 	ldw	r2,-16(fp)
  807460:	10c0020b 	ldhu	r3,8(r2)
  807464:	e0bfe80b 	ldhu	r2,-96(fp)
  807468:	1884b03a 	or	r2,r3,r2
  80746c:	1007883a 	mov	r3,r2
  807470:	e0bffc17 	ldw	r2,-16(fp)
  807474:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  807478:	d0a0a117 	ldw	r2,-32124(gp)
  80747c:	e0ffe80b 	ldhu	r3,-96(fp)
  807480:	10c00b0d 	sth	r3,44(r2)
  807484:	e0bfe517 	ldw	r2,-108(fp)
  807488:	e0bfec15 	stw	r2,-80(fp)
  80748c:	e0bfec17 	ldw	r2,-80(fp)
  807490:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  807494:	e0800217 	ldw	r2,8(fp)
  807498:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80749c:	e0bfe80b 	ldhu	r2,-96(fp)
  8074a0:	00009d06 	br	807718 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8074a4:	e13ffd0b 	ldhu	r4,-12(fp)
  8074a8:	e17ffe03 	ldbu	r5,-8(fp)
  8074ac:	e0bfff0b 	ldhu	r2,-4(fp)
  8074b0:	e0fff704 	addi	r3,fp,-36
  8074b4:	d8800015 	stw	r2,0(sp)
  8074b8:	280f883a 	mov	r7,r5
  8074bc:	200d883a 	mov	r6,r4
  8074c0:	180b883a 	mov	r5,r3
  8074c4:	e13ffc17 	ldw	r4,-16(fp)
  8074c8:	0807be40 	call	807be4 <OS_FlagBlock>
  8074cc:	e0bfe517 	ldw	r2,-108(fp)
  8074d0:	e0bfed15 	stw	r2,-76(fp)
  8074d4:	e0bfed17 	ldw	r2,-76(fp)
  8074d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8074dc:	00003706 	br	8075bc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8074e0:	e0bffc17 	ldw	r2,-16(fp)
  8074e4:	1080020b 	ldhu	r2,8(r2)
  8074e8:	0084303a 	nor	r2,zero,r2
  8074ec:	1007883a 	mov	r3,r2
  8074f0:	e0bffd0b 	ldhu	r2,-12(fp)
  8074f4:	1884703a 	and	r2,r3,r2
  8074f8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8074fc:	e0bfe80b 	ldhu	r2,-96(fp)
  807500:	10001526 	beq	r2,zero,807558 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  807504:	e0bfe403 	ldbu	r2,-112(fp)
  807508:	10800058 	cmpnei	r2,r2,1
  80750c:	1000071e 	bne	r2,zero,80752c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  807510:	e0bffc17 	ldw	r2,-16(fp)
  807514:	10c0020b 	ldhu	r3,8(r2)
  807518:	e0bfe80b 	ldhu	r2,-96(fp)
  80751c:	1884b03a 	or	r2,r3,r2
  807520:	1007883a 	mov	r3,r2
  807524:	e0bffc17 	ldw	r2,-16(fp)
  807528:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80752c:	d0a0a117 	ldw	r2,-32124(gp)
  807530:	e0ffe80b 	ldhu	r3,-96(fp)
  807534:	10c00b0d 	sth	r3,44(r2)
  807538:	e0bfe517 	ldw	r2,-108(fp)
  80753c:	e0bfee15 	stw	r2,-72(fp)
  807540:	e0bfee17 	ldw	r2,-72(fp)
  807544:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  807548:	e0800217 	ldw	r2,8(fp)
  80754c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  807550:	e0bfe80b 	ldhu	r2,-96(fp)
  807554:	00007006 	br	807718 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  807558:	e13ffd0b 	ldhu	r4,-12(fp)
  80755c:	e17ffe03 	ldbu	r5,-8(fp)
  807560:	e0bfff0b 	ldhu	r2,-4(fp)
  807564:	e0fff704 	addi	r3,fp,-36
  807568:	d8800015 	stw	r2,0(sp)
  80756c:	280f883a 	mov	r7,r5
  807570:	200d883a 	mov	r6,r4
  807574:	180b883a 	mov	r5,r3
  807578:	e13ffc17 	ldw	r4,-16(fp)
  80757c:	0807be40 	call	807be4 <OS_FlagBlock>
  807580:	e0bfe517 	ldw	r2,-108(fp)
  807584:	e0bfef15 	stw	r2,-68(fp)
  807588:	e0bfef17 	ldw	r2,-68(fp)
  80758c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  807590:	00000a06 	br	8075bc <OSFlagPend+0x448>
  807594:	e0bfe517 	ldw	r2,-108(fp)
  807598:	e0bff015 	stw	r2,-64(fp)
  80759c:	e0bff017 	ldw	r2,-64(fp)
  8075a0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8075a4:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8075a8:	e0800217 	ldw	r2,8(fp)
  8075ac:	00c01bc4 	movi	r3,111
  8075b0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  8075b4:	e0bfe80b 	ldhu	r2,-96(fp)
  8075b8:	00005706 	br	807718 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8075bc:	08060440 	call	806044 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8075c0:	0005303a 	rdctl	r2,status
  8075c4:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8075c8:	e0fff117 	ldw	r3,-60(fp)
  8075cc:	00bfff84 	movi	r2,-2
  8075d0:	1884703a 	and	r2,r3,r2
  8075d4:	1001703a 	wrctl	status,r2
  
  return context;
  8075d8:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  8075dc:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  8075e0:	d0a0a117 	ldw	r2,-32124(gp)
  8075e4:	10800c43 	ldbu	r2,49(r2)
  8075e8:	10803fcc 	andi	r2,r2,255
  8075ec:	10001c26 	beq	r2,zero,807660 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8075f0:	d0a0a117 	ldw	r2,-32124(gp)
  8075f4:	10800c43 	ldbu	r2,49(r2)
  8075f8:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8075fc:	d0a0a117 	ldw	r2,-32124(gp)
  807600:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  807604:	e0bff704 	addi	r2,fp,-36
  807608:	1009883a 	mov	r4,r2
  80760c:	0807f180 	call	807f18 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  807610:	d0a0a117 	ldw	r2,-32124(gp)
  807614:	10000c05 	stb	zero,48(r2)
  807618:	e0bfe517 	ldw	r2,-108(fp)
  80761c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807620:	e0bff217 	ldw	r2,-56(fp)
  807624:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  807628:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  80762c:	e0bff303 	ldbu	r2,-52(fp)
  807630:	108000a0 	cmpeqi	r2,r2,2
  807634:	10000426 	beq	r2,zero,807648 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  807638:	e0800217 	ldw	r2,8(fp)
  80763c:	00c00384 	movi	r3,14
  807640:	10c00005 	stb	r3,0(r2)
                 break;
  807644:	00000406 	br	807658 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  807648:	e0800217 	ldw	r2,8(fp)
  80764c:	00c00284 	movi	r3,10
  807650:	10c00005 	stb	r3,0(r2)
                 break;
  807654:	0001883a 	nop
        }
        return (flags_rdy);
  807658:	e0bfe80b 	ldhu	r2,-96(fp)
  80765c:	00002e06 	br	807718 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  807660:	d0a0a117 	ldw	r2,-32124(gp)
  807664:	10800b0b 	ldhu	r2,44(r2)
  807668:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80766c:	e0bfe403 	ldbu	r2,-112(fp)
  807670:	10800058 	cmpnei	r2,r2,1
  807674:	1000211e 	bne	r2,zero,8076fc <OSFlagPend+0x588>
        switch (wait_type) {
  807678:	e0bffe03 	ldbu	r2,-8(fp)
  80767c:	10001616 	blt	r2,zero,8076d8 <OSFlagPend+0x564>
  807680:	10c00090 	cmplti	r3,r2,2
  807684:	18000c1e 	bne	r3,zero,8076b8 <OSFlagPend+0x544>
  807688:	10800108 	cmpgei	r2,r2,4
  80768c:	1000121e 	bne	r2,zero,8076d8 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  807690:	e0bffc17 	ldw	r2,-16(fp)
  807694:	1080020b 	ldhu	r2,8(r2)
  807698:	1007883a 	mov	r3,r2
  80769c:	e0bfe80b 	ldhu	r2,-96(fp)
  8076a0:	0084303a 	nor	r2,zero,r2
  8076a4:	1884703a 	and	r2,r3,r2
  8076a8:	1007883a 	mov	r3,r2
  8076ac:	e0bffc17 	ldw	r2,-16(fp)
  8076b0:	10c0020d 	sth	r3,8(r2)
                 break;
  8076b4:	00001106 	br	8076fc <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  8076b8:	e0bffc17 	ldw	r2,-16(fp)
  8076bc:	10c0020b 	ldhu	r3,8(r2)
  8076c0:	e0bfe80b 	ldhu	r2,-96(fp)
  8076c4:	1884b03a 	or	r2,r3,r2
  8076c8:	1007883a 	mov	r3,r2
  8076cc:	e0bffc17 	ldw	r2,-16(fp)
  8076d0:	10c0020d 	sth	r3,8(r2)
                 break;
  8076d4:	00000906 	br	8076fc <OSFlagPend+0x588>
  8076d8:	e0bfe517 	ldw	r2,-108(fp)
  8076dc:	e0bff415 	stw	r2,-48(fp)
  8076e0:	e0bff417 	ldw	r2,-48(fp)
  8076e4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8076e8:	e0800217 	ldw	r2,8(fp)
  8076ec:	00c01bc4 	movi	r3,111
  8076f0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  8076f4:	0005883a 	mov	r2,zero
  8076f8:	00000706 	br	807718 <OSFlagPend+0x5a4>
  8076fc:	e0bfe517 	ldw	r2,-108(fp)
  807700:	e0bff515 	stw	r2,-44(fp)
  807704:	e0bff517 	ldw	r2,-44(fp)
  807708:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80770c:	e0800217 	ldw	r2,8(fp)
  807710:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  807714:	e0bfe80b 	ldhu	r2,-96(fp)
}
  807718:	e037883a 	mov	sp,fp
  80771c:	dfc00117 	ldw	ra,4(sp)
  807720:	df000017 	ldw	fp,0(sp)
  807724:	dec00204 	addi	sp,sp,8
  807728:	f800283a 	ret

0080772c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80772c:	defffb04 	addi	sp,sp,-20
  807730:	df000415 	stw	fp,16(sp)
  807734:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  807738:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80773c:	0005303a 	rdctl	r2,status
  807740:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807744:	e0fffe17 	ldw	r3,-8(fp)
  807748:	00bfff84 	movi	r2,-2
  80774c:	1884703a 	and	r2,r3,r2
  807750:	1001703a 	wrctl	status,r2
  
  return context;
  807754:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  807758:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80775c:	d0a0a117 	ldw	r2,-32124(gp)
  807760:	10800b0b 	ldhu	r2,44(r2)
  807764:	e0bffd0d 	sth	r2,-12(fp)
  807768:	e0bffc17 	ldw	r2,-16(fp)
  80776c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807770:	e0bfff17 	ldw	r2,-4(fp)
  807774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  807778:	e0bffd0b 	ldhu	r2,-12(fp)
}
  80777c:	e037883a 	mov	sp,fp
  807780:	df000017 	ldw	fp,0(sp)
  807784:	dec00104 	addi	sp,sp,4
  807788:	f800283a 	ret

0080778c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80778c:	deffef04 	addi	sp,sp,-68
  807790:	dfc01015 	stw	ra,64(sp)
  807794:	df000f15 	stw	fp,60(sp)
  807798:	df000f04 	addi	fp,sp,60
  80779c:	e13ffc15 	stw	r4,-16(fp)
  8077a0:	2807883a 	mov	r3,r5
  8077a4:	3005883a 	mov	r2,r6
  8077a8:	e1ffff15 	stw	r7,-4(fp)
  8077ac:	e0fffd0d 	sth	r3,-12(fp)
  8077b0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  8077b4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8077b8:	e0bfff17 	ldw	r2,-4(fp)
  8077bc:	1000021e 	bne	r2,zero,8077c8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  8077c0:	0005883a 	mov	r2,zero
  8077c4:	0000d106 	br	807b0c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  8077c8:	e0bffc17 	ldw	r2,-16(fp)
  8077cc:	1000051e 	bne	r2,zero,8077e4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8077d0:	e0bfff17 	ldw	r2,-4(fp)
  8077d4:	00c01b84 	movi	r3,110
  8077d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8077dc:	0005883a 	mov	r2,zero
  8077e0:	0000ca06 	br	807b0c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  8077e4:	e0bffc17 	ldw	r2,-16(fp)
  8077e8:	10800003 	ldbu	r2,0(r2)
  8077ec:	10803fcc 	andi	r2,r2,255
  8077f0:	10800160 	cmpeqi	r2,r2,5
  8077f4:	1000051e 	bne	r2,zero,80780c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  8077f8:	e0bfff17 	ldw	r2,-4(fp)
  8077fc:	00c00044 	movi	r3,1
  807800:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807804:	0005883a 	mov	r2,zero
  807808:	0000c006 	br	807b0c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80780c:	0005303a 	rdctl	r2,status
  807810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807814:	e0fffb17 	ldw	r3,-20(fp)
  807818:	00bfff84 	movi	r2,-2
  80781c:	1884703a 	and	r2,r3,r2
  807820:	1001703a 	wrctl	status,r2
  
  return context;
  807824:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  807828:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  80782c:	e0bffe03 	ldbu	r2,-8(fp)
  807830:	10000326 	beq	r2,zero,807840 <OSFlagPost+0xb4>
  807834:	10800060 	cmpeqi	r2,r2,1
  807838:	10000b1e 	bne	r2,zero,807868 <OSFlagPost+0xdc>
  80783c:	00001206 	br	807888 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  807840:	e0bffc17 	ldw	r2,-16(fp)
  807844:	1080020b 	ldhu	r2,8(r2)
  807848:	1007883a 	mov	r3,r2
  80784c:	e0bffd0b 	ldhu	r2,-12(fp)
  807850:	0084303a 	nor	r2,zero,r2
  807854:	1884703a 	and	r2,r3,r2
  807858:	1007883a 	mov	r3,r2
  80785c:	e0bffc17 	ldw	r2,-16(fp)
  807860:	10c0020d 	sth	r3,8(r2)
             break;
  807864:	00001106 	br	8078ac <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  807868:	e0bffc17 	ldw	r2,-16(fp)
  80786c:	10c0020b 	ldhu	r3,8(r2)
  807870:	e0bffd0b 	ldhu	r2,-12(fp)
  807874:	1884b03a 	or	r2,r3,r2
  807878:	1007883a 	mov	r3,r2
  80787c:	e0bffc17 	ldw	r2,-16(fp)
  807880:	10c0020d 	sth	r3,8(r2)
             break;
  807884:	00000906 	br	8078ac <OSFlagPost+0x120>
  807888:	e0bff317 	ldw	r2,-52(fp)
  80788c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807890:	e0bff417 	ldw	r2,-48(fp)
  807894:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  807898:	e0bfff17 	ldw	r2,-4(fp)
  80789c:	00c01c44 	movi	r3,113
  8078a0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  8078a4:	0005883a 	mov	r2,zero
  8078a8:	00009806 	br	807b0c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  8078ac:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8078b0:	e0bffc17 	ldw	r2,-16(fp)
  8078b4:	10800117 	ldw	r2,4(r2)
  8078b8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8078bc:	00007706 	br	807a9c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  8078c0:	e0bff117 	ldw	r2,-60(fp)
  8078c4:	10800483 	ldbu	r2,18(r2)
  8078c8:	10803fcc 	andi	r2,r2,255
  8078cc:	10c00060 	cmpeqi	r3,r2,1
  8078d0:	18004a1e 	bne	r3,zero,8079fc <OSFlagPost+0x270>
  8078d4:	10c00088 	cmpgei	r3,r2,2
  8078d8:	1800021e 	bne	r3,zero,8078e4 <OSFlagPost+0x158>
  8078dc:	10002f26 	beq	r2,zero,80799c <OSFlagPost+0x210>
  8078e0:	00005b06 	br	807a50 <OSFlagPost+0x2c4>
  8078e4:	10c000a0 	cmpeqi	r3,r2,2
  8078e8:	1800031e 	bne	r3,zero,8078f8 <OSFlagPost+0x16c>
  8078ec:	108000e0 	cmpeqi	r2,r2,3
  8078f0:	1000171e 	bne	r2,zero,807950 <OSFlagPost+0x1c4>
  8078f4:	00005606 	br	807a50 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8078f8:	e0bffc17 	ldw	r2,-16(fp)
  8078fc:	10c0020b 	ldhu	r3,8(r2)
  807900:	e0bff117 	ldw	r2,-60(fp)
  807904:	1080040b 	ldhu	r2,16(r2)
  807908:	1884703a 	and	r2,r3,r2
  80790c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  807910:	e0bff117 	ldw	r2,-60(fp)
  807914:	1080040b 	ldhu	r2,16(r2)
  807918:	10ffffcc 	andi	r3,r2,65535
  80791c:	e0bff60b 	ldhu	r2,-40(fp)
  807920:	1880541e 	bne	r3,r2,807a74 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  807924:	e0bff60b 	ldhu	r2,-40(fp)
  807928:	100b883a 	mov	r5,r2
  80792c:	e13ff117 	ldw	r4,-60(fp)
  807930:	0807e240 	call	807e24 <OS_FlagTaskRdy>
  807934:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  807938:	e0bff683 	ldbu	r2,-38(fp)
  80793c:	10800058 	cmpnei	r2,r2,1
  807940:	10004c1e 	bne	r2,zero,807a74 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  807944:	00800044 	movi	r2,1
  807948:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  80794c:	00004906 	br	807a74 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  807950:	e0bffc17 	ldw	r2,-16(fp)
  807954:	10c0020b 	ldhu	r3,8(r2)
  807958:	e0bff117 	ldw	r2,-60(fp)
  80795c:	1080040b 	ldhu	r2,16(r2)
  807960:	1884703a 	and	r2,r3,r2
  807964:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  807968:	e0bff60b 	ldhu	r2,-40(fp)
  80796c:	10004326 	beq	r2,zero,807a7c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  807970:	e0bff60b 	ldhu	r2,-40(fp)
  807974:	100b883a 	mov	r5,r2
  807978:	e13ff117 	ldw	r4,-60(fp)
  80797c:	0807e240 	call	807e24 <OS_FlagTaskRdy>
  807980:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  807984:	e0bff683 	ldbu	r2,-38(fp)
  807988:	10800058 	cmpnei	r2,r2,1
  80798c:	10003b1e 	bne	r2,zero,807a7c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  807990:	00800044 	movi	r2,1
  807994:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  807998:	00003806 	br	807a7c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80799c:	e0bffc17 	ldw	r2,-16(fp)
  8079a0:	1080020b 	ldhu	r2,8(r2)
  8079a4:	0084303a 	nor	r2,zero,r2
  8079a8:	1007883a 	mov	r3,r2
  8079ac:	e0bff117 	ldw	r2,-60(fp)
  8079b0:	1080040b 	ldhu	r2,16(r2)
  8079b4:	1884703a 	and	r2,r3,r2
  8079b8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8079bc:	e0bff117 	ldw	r2,-60(fp)
  8079c0:	1080040b 	ldhu	r2,16(r2)
  8079c4:	10ffffcc 	andi	r3,r2,65535
  8079c8:	e0bff60b 	ldhu	r2,-40(fp)
  8079cc:	18802d1e 	bne	r3,r2,807a84 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8079d0:	e0bff60b 	ldhu	r2,-40(fp)
  8079d4:	100b883a 	mov	r5,r2
  8079d8:	e13ff117 	ldw	r4,-60(fp)
  8079dc:	0807e240 	call	807e24 <OS_FlagTaskRdy>
  8079e0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8079e4:	e0bff683 	ldbu	r2,-38(fp)
  8079e8:	10800058 	cmpnei	r2,r2,1
  8079ec:	1000251e 	bne	r2,zero,807a84 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8079f0:	00800044 	movi	r2,1
  8079f4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8079f8:	00002206 	br	807a84 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8079fc:	e0bffc17 	ldw	r2,-16(fp)
  807a00:	1080020b 	ldhu	r2,8(r2)
  807a04:	0084303a 	nor	r2,zero,r2
  807a08:	1007883a 	mov	r3,r2
  807a0c:	e0bff117 	ldw	r2,-60(fp)
  807a10:	1080040b 	ldhu	r2,16(r2)
  807a14:	1884703a 	and	r2,r3,r2
  807a18:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  807a1c:	e0bff60b 	ldhu	r2,-40(fp)
  807a20:	10001a26 	beq	r2,zero,807a8c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  807a24:	e0bff60b 	ldhu	r2,-40(fp)
  807a28:	100b883a 	mov	r5,r2
  807a2c:	e13ff117 	ldw	r4,-60(fp)
  807a30:	0807e240 	call	807e24 <OS_FlagTaskRdy>
  807a34:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  807a38:	e0bff683 	ldbu	r2,-38(fp)
  807a3c:	10800058 	cmpnei	r2,r2,1
  807a40:	1000121e 	bne	r2,zero,807a8c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  807a44:	00800044 	movi	r2,1
  807a48:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  807a4c:	00000f06 	br	807a8c <OSFlagPost+0x300>
  807a50:	e0bff317 	ldw	r2,-52(fp)
  807a54:	e0bff515 	stw	r2,-44(fp)
  807a58:	e0bff517 	ldw	r2,-44(fp)
  807a5c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  807a60:	e0bfff17 	ldw	r2,-4(fp)
  807a64:	00c01bc4 	movi	r3,111
  807a68:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  807a6c:	0005883a 	mov	r2,zero
  807a70:	00002606 	br	807b0c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807a74:	0001883a 	nop
  807a78:	00000506 	br	807a90 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807a7c:	0001883a 	nop
  807a80:	00000306 	br	807a90 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807a84:	0001883a 	nop
  807a88:	00000106 	br	807a90 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807a8c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  807a90:	e0bff117 	ldw	r2,-60(fp)
  807a94:	10800017 	ldw	r2,0(r2)
  807a98:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  807a9c:	e0bff117 	ldw	r2,-60(fp)
  807aa0:	103f871e 	bne	r2,zero,8078c0 <__alt_mem_epcs_flash_controller_0+0xff7fe8c0>
  807aa4:	e0bff317 	ldw	r2,-52(fp)
  807aa8:	e0bff715 	stw	r2,-36(fp)
  807aac:	e0bff717 	ldw	r2,-36(fp)
  807ab0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  807ab4:	e0bff203 	ldbu	r2,-56(fp)
  807ab8:	10800058 	cmpnei	r2,r2,1
  807abc:	1000011e 	bne	r2,zero,807ac4 <OSFlagPost+0x338>
        OS_Sched();
  807ac0:	08060440 	call	806044 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807ac4:	0005303a 	rdctl	r2,status
  807ac8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807acc:	e0fffa17 	ldw	r3,-24(fp)
  807ad0:	00bfff84 	movi	r2,-2
  807ad4:	1884703a 	and	r2,r3,r2
  807ad8:	1001703a 	wrctl	status,r2
  
  return context;
  807adc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  807ae0:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  807ae4:	e0bffc17 	ldw	r2,-16(fp)
  807ae8:	1080020b 	ldhu	r2,8(r2)
  807aec:	e0bff90d 	sth	r2,-28(fp)
  807af0:	e0bff317 	ldw	r2,-52(fp)
  807af4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807af8:	e0bff817 	ldw	r2,-32(fp)
  807afc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  807b00:	e0bfff17 	ldw	r2,-4(fp)
  807b04:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  807b08:	e0bff90b 	ldhu	r2,-28(fp)
}
  807b0c:	e037883a 	mov	sp,fp
  807b10:	dfc00117 	ldw	ra,4(sp)
  807b14:	df000017 	ldw	fp,0(sp)
  807b18:	dec00204 	addi	sp,sp,8
  807b1c:	f800283a 	ret

00807b20 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  807b20:	defff904 	addi	sp,sp,-28
  807b24:	df000615 	stw	fp,24(sp)
  807b28:	df000604 	addi	fp,sp,24
  807b2c:	e13ffe15 	stw	r4,-8(fp)
  807b30:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  807b34:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  807b38:	e0bfff17 	ldw	r2,-4(fp)
  807b3c:	1000021e 	bne	r2,zero,807b48 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  807b40:	0005883a 	mov	r2,zero
  807b44:	00002306 	br	807bd4 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  807b48:	e0bffe17 	ldw	r2,-8(fp)
  807b4c:	1000051e 	bne	r2,zero,807b64 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  807b50:	e0bfff17 	ldw	r2,-4(fp)
  807b54:	00c01b84 	movi	r3,110
  807b58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807b5c:	0005883a 	mov	r2,zero
  807b60:	00001c06 	br	807bd4 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  807b64:	e0bffe17 	ldw	r2,-8(fp)
  807b68:	10800003 	ldbu	r2,0(r2)
  807b6c:	10803fcc 	andi	r2,r2,255
  807b70:	10800160 	cmpeqi	r2,r2,5
  807b74:	1000051e 	bne	r2,zero,807b8c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  807b78:	e0bfff17 	ldw	r2,-4(fp)
  807b7c:	00c00044 	movi	r3,1
  807b80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807b84:	0005883a 	mov	r2,zero
  807b88:	00001206 	br	807bd4 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807b8c:	0005303a 	rdctl	r2,status
  807b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807b94:	e0fffc17 	ldw	r3,-16(fp)
  807b98:	00bfff84 	movi	r2,-2
  807b9c:	1884703a 	and	r2,r3,r2
  807ba0:	1001703a 	wrctl	status,r2
  
  return context;
  807ba4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  807ba8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  807bac:	e0bffe17 	ldw	r2,-8(fp)
  807bb0:	1080020b 	ldhu	r2,8(r2)
  807bb4:	e0bffb0d 	sth	r2,-20(fp)
  807bb8:	e0bffa17 	ldw	r2,-24(fp)
  807bbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807bc0:	e0bffd17 	ldw	r2,-12(fp)
  807bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807bc8:	e0bfff17 	ldw	r2,-4(fp)
  807bcc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  807bd0:	e0bffb0b 	ldhu	r2,-20(fp)
}
  807bd4:	e037883a 	mov	sp,fp
  807bd8:	df000017 	ldw	fp,0(sp)
  807bdc:	dec00104 	addi	sp,sp,4
  807be0:	f800283a 	ret

00807be4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  807be4:	defff804 	addi	sp,sp,-32
  807be8:	df000715 	stw	fp,28(sp)
  807bec:	df000704 	addi	fp,sp,28
  807bf0:	e13ffb15 	stw	r4,-20(fp)
  807bf4:	e17ffc15 	stw	r5,-16(fp)
  807bf8:	3009883a 	mov	r4,r6
  807bfc:	3807883a 	mov	r3,r7
  807c00:	e0800117 	ldw	r2,4(fp)
  807c04:	e13ffd0d 	sth	r4,-12(fp)
  807c08:	e0fffe05 	stb	r3,-8(fp)
  807c0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  807c10:	d0a0a117 	ldw	r2,-32124(gp)
  807c14:	d0e0a117 	ldw	r3,-32124(gp)
  807c18:	18c00c03 	ldbu	r3,48(r3)
  807c1c:	18c00814 	ori	r3,r3,32
  807c20:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  807c24:	d0a0a117 	ldw	r2,-32124(gp)
  807c28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  807c2c:	d0a0a117 	ldw	r2,-32124(gp)
  807c30:	e0ffff0b 	ldhu	r3,-4(fp)
  807c34:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  807c38:	d0a0a117 	ldw	r2,-32124(gp)
  807c3c:	e0fffc17 	ldw	r3,-16(fp)
  807c40:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  807c44:	e0bffc17 	ldw	r2,-16(fp)
  807c48:	e0fffd0b 	ldhu	r3,-12(fp)
  807c4c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  807c50:	e0bffc17 	ldw	r2,-16(fp)
  807c54:	e0fffe03 	ldbu	r3,-8(fp)
  807c58:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  807c5c:	d0e0a117 	ldw	r3,-32124(gp)
  807c60:	e0bffc17 	ldw	r2,-16(fp)
  807c64:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  807c68:	e0bffb17 	ldw	r2,-20(fp)
  807c6c:	10c00117 	ldw	r3,4(r2)
  807c70:	e0bffc17 	ldw	r2,-16(fp)
  807c74:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  807c78:	e0bffc17 	ldw	r2,-16(fp)
  807c7c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  807c80:	e0bffc17 	ldw	r2,-16(fp)
  807c84:	e0fffb17 	ldw	r3,-20(fp)
  807c88:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  807c8c:	e0bffb17 	ldw	r2,-20(fp)
  807c90:	10800117 	ldw	r2,4(r2)
  807c94:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  807c98:	e0bff917 	ldw	r2,-28(fp)
  807c9c:	10000326 	beq	r2,zero,807cac <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  807ca0:	e0bff917 	ldw	r2,-28(fp)
  807ca4:	e0fffc17 	ldw	r3,-16(fp)
  807ca8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  807cac:	e0bffb17 	ldw	r2,-20(fp)
  807cb0:	e0fffc17 	ldw	r3,-16(fp)
  807cb4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  807cb8:	d0a0a117 	ldw	r2,-32124(gp)
  807cbc:	10800d03 	ldbu	r2,52(r2)
  807cc0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  807cc4:	e0fffa03 	ldbu	r3,-24(fp)
  807cc8:	e13ffa03 	ldbu	r4,-24(fp)
  807ccc:	d0a09e44 	addi	r2,gp,-32135
  807cd0:	2085883a 	add	r2,r4,r2
  807cd4:	10800003 	ldbu	r2,0(r2)
  807cd8:	1009883a 	mov	r4,r2
  807cdc:	d0a0a117 	ldw	r2,-32124(gp)
  807ce0:	10800d43 	ldbu	r2,53(r2)
  807ce4:	0084303a 	nor	r2,zero,r2
  807ce8:	2084703a 	and	r2,r4,r2
  807cec:	1009883a 	mov	r4,r2
  807cf0:	d0a09e44 	addi	r2,gp,-32135
  807cf4:	1885883a 	add	r2,r3,r2
  807cf8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  807cfc:	e0fffa03 	ldbu	r3,-24(fp)
  807d00:	d0a09e44 	addi	r2,gp,-32135
  807d04:	1885883a 	add	r2,r3,r2
  807d08:	10800003 	ldbu	r2,0(r2)
  807d0c:	10803fcc 	andi	r2,r2,255
  807d10:	1000071e 	bne	r2,zero,807d30 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  807d14:	d0a0a117 	ldw	r2,-32124(gp)
  807d18:	10800d83 	ldbu	r2,54(r2)
  807d1c:	0084303a 	nor	r2,zero,r2
  807d20:	1007883a 	mov	r3,r2
  807d24:	d0a09e03 	ldbu	r2,-32136(gp)
  807d28:	1884703a 	and	r2,r3,r2
  807d2c:	d0a09e05 	stb	r2,-32136(gp)
    }
}
  807d30:	0001883a 	nop
  807d34:	e037883a 	mov	sp,fp
  807d38:	df000017 	ldw	fp,0(sp)
  807d3c:	dec00104 	addi	sp,sp,4
  807d40:	f800283a 	ret

00807d44 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  807d44:	defffb04 	addi	sp,sp,-20
  807d48:	dfc00415 	stw	ra,16(sp)
  807d4c:	df000315 	stw	fp,12(sp)
  807d50:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  807d54:	0140dc04 	movi	r5,880
  807d58:	010020b4 	movhi	r4,130
  807d5c:	2126e704 	addi	r4,r4,-25700
  807d60:	0805f880 	call	805f88 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  807d64:	008020b4 	movhi	r2,130
  807d68:	10a6e704 	addi	r2,r2,-25700
  807d6c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  807d70:	008020b4 	movhi	r2,130
  807d74:	10a6f204 	addi	r2,r2,-25656
  807d78:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  807d7c:	e03ffd0d 	sth	zero,-12(fp)
  807d80:	00001306 	br	807dd0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  807d84:	e0bffe17 	ldw	r2,-8(fp)
  807d88:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  807d8c:	e0bffe17 	ldw	r2,-8(fp)
  807d90:	e0ffff17 	ldw	r3,-4(fp)
  807d94:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  807d98:	e0bffe17 	ldw	r2,-8(fp)
  807d9c:	00c00fc4 	movi	r3,63
  807da0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  807da4:	e0bffe17 	ldw	r2,-8(fp)
  807da8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  807dac:	e0bffe17 	ldw	r2,-8(fp)
  807db0:	10800b04 	addi	r2,r2,44
  807db4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  807db8:	e0bfff17 	ldw	r2,-4(fp)
  807dbc:	10800b04 	addi	r2,r2,44
  807dc0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  807dc4:	e0bffd0b 	ldhu	r2,-12(fp)
  807dc8:	10800044 	addi	r2,r2,1
  807dcc:	e0bffd0d 	sth	r2,-12(fp)
  807dd0:	e0bffd0b 	ldhu	r2,-12(fp)
  807dd4:	108004f0 	cmpltui	r2,r2,19
  807dd8:	103fea1e 	bne	r2,zero,807d84 <__alt_mem_epcs_flash_controller_0+0xff7fed84>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  807ddc:	e0bffe17 	ldw	r2,-8(fp)
  807de0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  807de4:	e0bffe17 	ldw	r2,-8(fp)
  807de8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  807dec:	e0bffe17 	ldw	r2,-8(fp)
  807df0:	00c00fc4 	movi	r3,63
  807df4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  807df8:	e0bffe17 	ldw	r2,-8(fp)
  807dfc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  807e00:	008020b4 	movhi	r2,130
  807e04:	10a6e704 	addi	r2,r2,-25700
  807e08:	d0a0a315 	stw	r2,-32116(gp)
#endif
}
  807e0c:	0001883a 	nop
  807e10:	e037883a 	mov	sp,fp
  807e14:	dfc00117 	ldw	ra,4(sp)
  807e18:	df000017 	ldw	fp,0(sp)
  807e1c:	dec00204 	addi	sp,sp,8
  807e20:	f800283a 	ret

00807e24 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  807e24:	defffa04 	addi	sp,sp,-24
  807e28:	dfc00515 	stw	ra,20(sp)
  807e2c:	df000415 	stw	fp,16(sp)
  807e30:	df000404 	addi	fp,sp,16
  807e34:	e13ffe15 	stw	r4,-8(fp)
  807e38:	2805883a 	mov	r2,r5
  807e3c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  807e40:	e0bffe17 	ldw	r2,-8(fp)
  807e44:	10800217 	ldw	r2,8(r2)
  807e48:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  807e4c:	e0bffd17 	ldw	r2,-12(fp)
  807e50:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  807e54:	e0bffd17 	ldw	r2,-12(fp)
  807e58:	e0ffff0b 	ldhu	r3,-4(fp)
  807e5c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  807e60:	e0bffd17 	ldw	r2,-12(fp)
  807e64:	10c00c03 	ldbu	r3,48(r2)
  807e68:	00bff7c4 	movi	r2,-33
  807e6c:	1884703a 	and	r2,r3,r2
  807e70:	1007883a 	mov	r3,r2
  807e74:	e0bffd17 	ldw	r2,-12(fp)
  807e78:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  807e7c:	e0bffd17 	ldw	r2,-12(fp)
  807e80:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  807e84:	e0bffd17 	ldw	r2,-12(fp)
  807e88:	10800c03 	ldbu	r2,48(r2)
  807e8c:	10803fcc 	andi	r2,r2,255
  807e90:	1000181e 	bne	r2,zero,807ef4 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  807e94:	e0bffd17 	ldw	r2,-12(fp)
  807e98:	10c00d83 	ldbu	r3,54(r2)
  807e9c:	d0a09e03 	ldbu	r2,-32136(gp)
  807ea0:	1884b03a 	or	r2,r3,r2
  807ea4:	d0a09e05 	stb	r2,-32136(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  807ea8:	e0bffd17 	ldw	r2,-12(fp)
  807eac:	10800d03 	ldbu	r2,52(r2)
  807eb0:	10c03fcc 	andi	r3,r2,255
  807eb4:	e0bffd17 	ldw	r2,-12(fp)
  807eb8:	10800d03 	ldbu	r2,52(r2)
  807ebc:	11003fcc 	andi	r4,r2,255
  807ec0:	d0a09e44 	addi	r2,gp,-32135
  807ec4:	2085883a 	add	r2,r4,r2
  807ec8:	11000003 	ldbu	r4,0(r2)
  807ecc:	e0bffd17 	ldw	r2,-12(fp)
  807ed0:	10800d43 	ldbu	r2,53(r2)
  807ed4:	2084b03a 	or	r2,r4,r2
  807ed8:	1009883a 	mov	r4,r2
  807edc:	d0a09e44 	addi	r2,gp,-32135
  807ee0:	1885883a 	add	r2,r3,r2
  807ee4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  807ee8:	00800044 	movi	r2,1
  807eec:	e0bffc05 	stb	r2,-16(fp)
  807ef0:	00000106 	br	807ef8 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  807ef4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  807ef8:	e13ffe17 	ldw	r4,-8(fp)
  807efc:	0807f180 	call	807f18 <OS_FlagUnlink>
    return (sched);
  807f00:	e0bffc03 	ldbu	r2,-16(fp)
}
  807f04:	e037883a 	mov	sp,fp
  807f08:	dfc00117 	ldw	ra,4(sp)
  807f0c:	df000017 	ldw	fp,0(sp)
  807f10:	dec00204 	addi	sp,sp,8
  807f14:	f800283a 	ret

00807f18 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  807f18:	defffa04 	addi	sp,sp,-24
  807f1c:	df000515 	stw	fp,20(sp)
  807f20:	df000504 	addi	fp,sp,20
  807f24:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  807f28:	e0bfff17 	ldw	r2,-4(fp)
  807f2c:	10800117 	ldw	r2,4(r2)
  807f30:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  807f34:	e0bfff17 	ldw	r2,-4(fp)
  807f38:	10800017 	ldw	r2,0(r2)
  807f3c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  807f40:	e0bffb17 	ldw	r2,-20(fp)
  807f44:	10000b1e 	bne	r2,zero,807f74 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  807f48:	e0bfff17 	ldw	r2,-4(fp)
  807f4c:	10800317 	ldw	r2,12(r2)
  807f50:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  807f54:	e0bffd17 	ldw	r2,-12(fp)
  807f58:	e0fffc17 	ldw	r3,-16(fp)
  807f5c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  807f60:	e0bffc17 	ldw	r2,-16(fp)
  807f64:	10000b26 	beq	r2,zero,807f94 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  807f68:	e0bffc17 	ldw	r2,-16(fp)
  807f6c:	10000115 	stw	zero,4(r2)
  807f70:	00000806 	br	807f94 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  807f74:	e0bffb17 	ldw	r2,-20(fp)
  807f78:	e0fffc17 	ldw	r3,-16(fp)
  807f7c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  807f80:	e0bffc17 	ldw	r2,-16(fp)
  807f84:	10000326 	beq	r2,zero,807f94 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  807f88:	e0bffc17 	ldw	r2,-16(fp)
  807f8c:	e0fffb17 	ldw	r3,-20(fp)
  807f90:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  807f94:	e0bfff17 	ldw	r2,-4(fp)
  807f98:	10800217 	ldw	r2,8(r2)
  807f9c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  807fa0:	e0bffe17 	ldw	r2,-8(fp)
  807fa4:	10000a15 	stw	zero,40(r2)
#endif
}
  807fa8:	0001883a 	nop
  807fac:	e037883a 	mov	sp,fp
  807fb0:	df000017 	ldw	fp,0(sp)
  807fb4:	dec00104 	addi	sp,sp,4
  807fb8:	f800283a 	ret

00807fbc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  807fbc:	defff404 	addi	sp,sp,-48
  807fc0:	df000b15 	stw	fp,44(sp)
  807fc4:	df000b04 	addi	fp,sp,44
  807fc8:	e13ffc15 	stw	r4,-16(fp)
  807fcc:	e17ffd15 	stw	r5,-12(fp)
  807fd0:	e1bffe15 	stw	r6,-8(fp)
  807fd4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  807fd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  807fdc:	e0bfff17 	ldw	r2,-4(fp)
  807fe0:	1000021e 	bne	r2,zero,807fec <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  807fe4:	0005883a 	mov	r2,zero
  807fe8:	00006506 	br	808180 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  807fec:	e0bffc17 	ldw	r2,-16(fp)
  807ff0:	1000051e 	bne	r2,zero,808008 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  807ff4:	e0bfff17 	ldw	r2,-4(fp)
  807ff8:	00c01884 	movi	r3,98
  807ffc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  808000:	0005883a 	mov	r2,zero
  808004:	00005e06 	br	808180 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  808008:	e0bffc17 	ldw	r2,-16(fp)
  80800c:	108000cc 	andi	r2,r2,3
  808010:	10000526 	beq	r2,zero,808028 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  808014:	e0bfff17 	ldw	r2,-4(fp)
  808018:	00c01884 	movi	r3,98
  80801c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  808020:	0005883a 	mov	r2,zero
  808024:	00005606 	br	808180 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  808028:	e0bffd17 	ldw	r2,-12(fp)
  80802c:	108000a8 	cmpgeui	r2,r2,2
  808030:	1000051e 	bne	r2,zero,808048 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  808034:	e0bfff17 	ldw	r2,-4(fp)
  808038:	00c016c4 	movi	r3,91
  80803c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  808040:	0005883a 	mov	r2,zero
  808044:	00004e06 	br	808180 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  808048:	e0bffe17 	ldw	r2,-8(fp)
  80804c:	10800128 	cmpgeui	r2,r2,4
  808050:	1000051e 	bne	r2,zero,808068 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  808054:	e0bfff17 	ldw	r2,-4(fp)
  808058:	00c01704 	movi	r3,92
  80805c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  808060:	0005883a 	mov	r2,zero
  808064:	00004606 	br	808180 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808068:	0005303a 	rdctl	r2,status
  80806c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808070:	e0fffb17 	ldw	r3,-20(fp)
  808074:	00bfff84 	movi	r2,-2
  808078:	1884703a 	and	r2,r3,r2
  80807c:	1001703a 	wrctl	status,r2
  
  return context;
  808080:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  808084:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  808088:	d0a09b17 	ldw	r2,-32148(gp)
  80808c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  808090:	d0a09b17 	ldw	r2,-32148(gp)
  808094:	10000326 	beq	r2,zero,8080a4 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  808098:	d0a09b17 	ldw	r2,-32148(gp)
  80809c:	10800117 	ldw	r2,4(r2)
  8080a0:	d0a09b15 	stw	r2,-32148(gp)
  8080a4:	e0bff817 	ldw	r2,-32(fp)
  8080a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8080ac:	e0bff917 	ldw	r2,-28(fp)
  8080b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  8080b4:	e0bffa17 	ldw	r2,-24(fp)
  8080b8:	1000051e 	bne	r2,zero,8080d0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  8080bc:	e0bfff17 	ldw	r2,-4(fp)
  8080c0:	00c01684 	movi	r3,90
  8080c4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8080c8:	0005883a 	mov	r2,zero
  8080cc:	00002c06 	br	808180 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  8080d0:	e0bffc17 	ldw	r2,-16(fp)
  8080d4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  8080d8:	e0fffc17 	ldw	r3,-16(fp)
  8080dc:	e0bffe17 	ldw	r2,-8(fp)
  8080e0:	1885883a 	add	r2,r3,r2
  8080e4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  8080e8:	e03ff715 	stw	zero,-36(fp)
  8080ec:	00000c06 	br	808120 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  8080f0:	e0bff617 	ldw	r2,-40(fp)
  8080f4:	e0fff517 	ldw	r3,-44(fp)
  8080f8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  8080fc:	e0bff517 	ldw	r2,-44(fp)
  808100:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  808104:	e0fff517 	ldw	r3,-44(fp)
  808108:	e0bffe17 	ldw	r2,-8(fp)
  80810c:	1885883a 	add	r2,r3,r2
  808110:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  808114:	e0bff717 	ldw	r2,-36(fp)
  808118:	10800044 	addi	r2,r2,1
  80811c:	e0bff715 	stw	r2,-36(fp)
  808120:	e0bffd17 	ldw	r2,-12(fp)
  808124:	10bfffc4 	addi	r2,r2,-1
  808128:	e0fff717 	ldw	r3,-36(fp)
  80812c:	18bff036 	bltu	r3,r2,8080f0 <__alt_mem_epcs_flash_controller_0+0xff7ff0f0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  808130:	e0bff617 	ldw	r2,-40(fp)
  808134:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  808138:	e0bffa17 	ldw	r2,-24(fp)
  80813c:	e0fffc17 	ldw	r3,-16(fp)
  808140:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  808144:	e0bffa17 	ldw	r2,-24(fp)
  808148:	e0fffc17 	ldw	r3,-16(fp)
  80814c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  808150:	e0bffa17 	ldw	r2,-24(fp)
  808154:	e0fffd17 	ldw	r3,-12(fp)
  808158:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  80815c:	e0bffa17 	ldw	r2,-24(fp)
  808160:	e0fffd17 	ldw	r3,-12(fp)
  808164:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  808168:	e0bffa17 	ldw	r2,-24(fp)
  80816c:	e0fffe17 	ldw	r3,-8(fp)
  808170:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  808174:	e0bfff17 	ldw	r2,-4(fp)
  808178:	10000005 	stb	zero,0(r2)
    return (pmem);
  80817c:	e0bffa17 	ldw	r2,-24(fp)
}
  808180:	e037883a 	mov	sp,fp
  808184:	df000017 	ldw	fp,0(sp)
  808188:	dec00104 	addi	sp,sp,4
  80818c:	f800283a 	ret

00808190 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  808190:	defff804 	addi	sp,sp,-32
  808194:	df000715 	stw	fp,28(sp)
  808198:	df000704 	addi	fp,sp,28
  80819c:	e13ffe15 	stw	r4,-8(fp)
  8081a0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8081a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8081a8:	e0bfff17 	ldw	r2,-4(fp)
  8081ac:	1000021e 	bne	r2,zero,8081b8 <OSMemGet+0x28>
        return ((void *)0);
  8081b0:	0005883a 	mov	r2,zero
  8081b4:	00002e06 	br	808270 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  8081b8:	e0bffe17 	ldw	r2,-8(fp)
  8081bc:	1000051e 	bne	r2,zero,8081d4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8081c0:	e0bfff17 	ldw	r2,-4(fp)
  8081c4:	00c01804 	movi	r3,96
  8081c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8081cc:	0005883a 	mov	r2,zero
  8081d0:	00002706 	br	808270 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8081d4:	0005303a 	rdctl	r2,status
  8081d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8081dc:	e0fffd17 	ldw	r3,-12(fp)
  8081e0:	00bfff84 	movi	r2,-2
  8081e4:	1884703a 	and	r2,r3,r2
  8081e8:	1001703a 	wrctl	status,r2
  
  return context;
  8081ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8081f0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  8081f4:	e0bffe17 	ldw	r2,-8(fp)
  8081f8:	10800417 	ldw	r2,16(r2)
  8081fc:	10001426 	beq	r2,zero,808250 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  808200:	e0bffe17 	ldw	r2,-8(fp)
  808204:	10800117 	ldw	r2,4(r2)
  808208:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80820c:	e0bffb17 	ldw	r2,-20(fp)
  808210:	10c00017 	ldw	r3,0(r2)
  808214:	e0bffe17 	ldw	r2,-8(fp)
  808218:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80821c:	e0bffe17 	ldw	r2,-8(fp)
  808220:	10800417 	ldw	r2,16(r2)
  808224:	10ffffc4 	addi	r3,r2,-1
  808228:	e0bffe17 	ldw	r2,-8(fp)
  80822c:	10c00415 	stw	r3,16(r2)
  808230:	e0bff917 	ldw	r2,-28(fp)
  808234:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808238:	e0bffa17 	ldw	r2,-24(fp)
  80823c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  808240:	e0bfff17 	ldw	r2,-4(fp)
  808244:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  808248:	e0bffb17 	ldw	r2,-20(fp)
  80824c:	00000806 	br	808270 <OSMemGet+0xe0>
  808250:	e0bff917 	ldw	r2,-28(fp)
  808254:	e0bffc15 	stw	r2,-16(fp)
  808258:	e0bffc17 	ldw	r2,-16(fp)
  80825c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  808260:	e0bfff17 	ldw	r2,-4(fp)
  808264:	00c01744 	movi	r3,93
  808268:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80826c:	0005883a 	mov	r2,zero
}
  808270:	e037883a 	mov	sp,fp
  808274:	df000017 	ldw	fp,0(sp)
  808278:	dec00104 	addi	sp,sp,4
  80827c:	f800283a 	ret

00808280 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  808280:	defff704 	addi	sp,sp,-36
  808284:	dfc00815 	stw	ra,32(sp)
  808288:	df000715 	stw	fp,28(sp)
  80828c:	df000704 	addi	fp,sp,28
  808290:	e13ffd15 	stw	r4,-12(fp)
  808294:	e17ffe15 	stw	r5,-8(fp)
  808298:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80829c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8082a0:	e0bfff17 	ldw	r2,-4(fp)
  8082a4:	1000021e 	bne	r2,zero,8082b0 <OSMemNameGet+0x30>
        return (0);
  8082a8:	0005883a 	mov	r2,zero
  8082ac:	00002b06 	br	80835c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8082b0:	e0bffd17 	ldw	r2,-12(fp)
  8082b4:	1000051e 	bne	r2,zero,8082cc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8082b8:	e0bfff17 	ldw	r2,-4(fp)
  8082bc:	00c01804 	movi	r3,96
  8082c0:	10c00005 	stb	r3,0(r2)
        return (0);
  8082c4:	0005883a 	mov	r2,zero
  8082c8:	00002406 	br	80835c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8082cc:	e0bffe17 	ldw	r2,-8(fp)
  8082d0:	1000051e 	bne	r2,zero,8082e8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  8082d4:	e0bfff17 	ldw	r2,-4(fp)
  8082d8:	00c00304 	movi	r3,12
  8082dc:	10c00005 	stb	r3,0(r2)
        return (0);
  8082e0:	0005883a 	mov	r2,zero
  8082e4:	00001d06 	br	80835c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8082e8:	d0a0a003 	ldbu	r2,-32128(gp)
  8082ec:	10803fcc 	andi	r2,r2,255
  8082f0:	10000526 	beq	r2,zero,808308 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  8082f4:	e0bfff17 	ldw	r2,-4(fp)
  8082f8:	00c00444 	movi	r3,17
  8082fc:	10c00005 	stb	r3,0(r2)
        return (0);
  808300:	0005883a 	mov	r2,zero
  808304:	00001506 	br	80835c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808308:	0005303a 	rdctl	r2,status
  80830c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808310:	e0fffb17 	ldw	r3,-20(fp)
  808314:	00bfff84 	movi	r2,-2
  808318:	1884703a 	and	r2,r3,r2
  80831c:	1001703a 	wrctl	status,r2
  
  return context;
  808320:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  808324:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  808328:	e0bffd17 	ldw	r2,-12(fp)
  80832c:	10800504 	addi	r2,r2,20
  808330:	100b883a 	mov	r5,r2
  808334:	e13ffe17 	ldw	r4,-8(fp)
  808338:	08061880 	call	806188 <OS_StrCopy>
  80833c:	e0bffa05 	stb	r2,-24(fp)
  808340:	e0bff917 	ldw	r2,-28(fp)
  808344:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808348:	e0bffc17 	ldw	r2,-16(fp)
  80834c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808350:	e0bfff17 	ldw	r2,-4(fp)
  808354:	10000005 	stb	zero,0(r2)
    return (len);
  808358:	e0bffa03 	ldbu	r2,-24(fp)
}
  80835c:	e037883a 	mov	sp,fp
  808360:	dfc00117 	ldw	ra,4(sp)
  808364:	df000017 	ldw	fp,0(sp)
  808368:	dec00204 	addi	sp,sp,8
  80836c:	f800283a 	ret

00808370 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  808370:	defff604 	addi	sp,sp,-40
  808374:	dfc00915 	stw	ra,36(sp)
  808378:	df000815 	stw	fp,32(sp)
  80837c:	df000804 	addi	fp,sp,32
  808380:	e13ffd15 	stw	r4,-12(fp)
  808384:	e17ffe15 	stw	r5,-8(fp)
  808388:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80838c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808390:	e0bfff17 	ldw	r2,-4(fp)
  808394:	10003526 	beq	r2,zero,80846c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  808398:	e0bffd17 	ldw	r2,-12(fp)
  80839c:	1000041e 	bne	r2,zero,8083b0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8083a0:	e0bfff17 	ldw	r2,-4(fp)
  8083a4:	00c01804 	movi	r3,96
  8083a8:	10c00005 	stb	r3,0(r2)
        return;
  8083ac:	00003006 	br	808470 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8083b0:	e0bffe17 	ldw	r2,-8(fp)
  8083b4:	1000041e 	bne	r2,zero,8083c8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  8083b8:	e0bfff17 	ldw	r2,-4(fp)
  8083bc:	00c00304 	movi	r3,12
  8083c0:	10c00005 	stb	r3,0(r2)
        return;
  8083c4:	00002a06 	br	808470 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8083c8:	d0a0a003 	ldbu	r2,-32128(gp)
  8083cc:	10803fcc 	andi	r2,r2,255
  8083d0:	10000426 	beq	r2,zero,8083e4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8083d4:	e0bfff17 	ldw	r2,-4(fp)
  8083d8:	00c00484 	movi	r3,18
  8083dc:	10c00005 	stb	r3,0(r2)
        return;
  8083e0:	00002306 	br	808470 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8083e4:	0005303a 	rdctl	r2,status
  8083e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8083ec:	e0fffc17 	ldw	r3,-16(fp)
  8083f0:	00bfff84 	movi	r2,-2
  8083f4:	1884703a 	and	r2,r3,r2
  8083f8:	1001703a 	wrctl	status,r2
  
  return context;
  8083fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808400:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  808404:	e13ffe17 	ldw	r4,-8(fp)
  808408:	08061fc0 	call	8061fc <OS_StrLen>
  80840c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  808410:	e0bffa03 	ldbu	r2,-24(fp)
  808414:	10800830 	cmpltui	r2,r2,32
  808418:	1000081e 	bne	r2,zero,80843c <OSMemNameSet+0xcc>
  80841c:	e0bff817 	ldw	r2,-32(fp)
  808420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808424:	e0bff917 	ldw	r2,-28(fp)
  808428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80842c:	e0bfff17 	ldw	r2,-4(fp)
  808430:	00c018c4 	movi	r3,99
  808434:	10c00005 	stb	r3,0(r2)
        return;
  808438:	00000d06 	br	808470 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80843c:	e0bffd17 	ldw	r2,-12(fp)
  808440:	10800504 	addi	r2,r2,20
  808444:	e17ffe17 	ldw	r5,-8(fp)
  808448:	1009883a 	mov	r4,r2
  80844c:	08061880 	call	806188 <OS_StrCopy>
  808450:	e0bff817 	ldw	r2,-32(fp)
  808454:	e0bffb15 	stw	r2,-20(fp)
  808458:	e0bffb17 	ldw	r2,-20(fp)
  80845c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808460:	e0bfff17 	ldw	r2,-4(fp)
  808464:	10000005 	stb	zero,0(r2)
  808468:	00000106 	br	808470 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  80846c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  808470:	e037883a 	mov	sp,fp
  808474:	dfc00117 	ldw	ra,4(sp)
  808478:	df000017 	ldw	fp,0(sp)
  80847c:	dec00204 	addi	sp,sp,8
  808480:	f800283a 	ret

00808484 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  808484:	defff904 	addi	sp,sp,-28
  808488:	df000615 	stw	fp,24(sp)
  80848c:	df000604 	addi	fp,sp,24
  808490:	e13ffe15 	stw	r4,-8(fp)
  808494:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808498:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80849c:	e0bffe17 	ldw	r2,-8(fp)
  8084a0:	1000021e 	bne	r2,zero,8084ac <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8084a4:	00801804 	movi	r2,96
  8084a8:	00002806 	br	80854c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  8084ac:	e0bfff17 	ldw	r2,-4(fp)
  8084b0:	1000021e 	bne	r2,zero,8084bc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  8084b4:	008017c4 	movi	r2,95
  8084b8:	00002406 	br	80854c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8084bc:	0005303a 	rdctl	r2,status
  8084c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8084c4:	e0fffd17 	ldw	r3,-12(fp)
  8084c8:	00bfff84 	movi	r2,-2
  8084cc:	1884703a 	and	r2,r3,r2
  8084d0:	1001703a 	wrctl	status,r2
  
  return context;
  8084d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8084d8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  8084dc:	e0bffe17 	ldw	r2,-8(fp)
  8084e0:	10c00417 	ldw	r3,16(r2)
  8084e4:	e0bffe17 	ldw	r2,-8(fp)
  8084e8:	10800317 	ldw	r2,12(r2)
  8084ec:	18800636 	bltu	r3,r2,808508 <OSMemPut+0x84>
  8084f0:	e0bffa17 	ldw	r2,-24(fp)
  8084f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8084f8:	e0bffb17 	ldw	r2,-20(fp)
  8084fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  808500:	00801784 	movi	r2,94
  808504:	00001106 	br	80854c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  808508:	e0bffe17 	ldw	r2,-8(fp)
  80850c:	10c00117 	ldw	r3,4(r2)
  808510:	e0bfff17 	ldw	r2,-4(fp)
  808514:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  808518:	e0bffe17 	ldw	r2,-8(fp)
  80851c:	e0ffff17 	ldw	r3,-4(fp)
  808520:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  808524:	e0bffe17 	ldw	r2,-8(fp)
  808528:	10800417 	ldw	r2,16(r2)
  80852c:	10c00044 	addi	r3,r2,1
  808530:	e0bffe17 	ldw	r2,-8(fp)
  808534:	10c00415 	stw	r3,16(r2)
  808538:	e0bffa17 	ldw	r2,-24(fp)
  80853c:	e0bffc15 	stw	r2,-16(fp)
  808540:	e0bffc17 	ldw	r2,-16(fp)
  808544:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  808548:	0005883a 	mov	r2,zero
}
  80854c:	e037883a 	mov	sp,fp
  808550:	df000017 	ldw	fp,0(sp)
  808554:	dec00104 	addi	sp,sp,4
  808558:	f800283a 	ret

0080855c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80855c:	defffa04 	addi	sp,sp,-24
  808560:	df000515 	stw	fp,20(sp)
  808564:	df000504 	addi	fp,sp,20
  808568:	e13ffe15 	stw	r4,-8(fp)
  80856c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808570:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  808574:	e0bffe17 	ldw	r2,-8(fp)
  808578:	1000021e 	bne	r2,zero,808584 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  80857c:	00801804 	movi	r2,96
  808580:	00002c06 	br	808634 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  808584:	e0bfff17 	ldw	r2,-4(fp)
  808588:	1000021e 	bne	r2,zero,808594 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  80858c:	00801844 	movi	r2,97
  808590:	00002806 	br	808634 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808594:	0005303a 	rdctl	r2,status
  808598:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80859c:	e0fffc17 	ldw	r3,-16(fp)
  8085a0:	00bfff84 	movi	r2,-2
  8085a4:	1884703a 	and	r2,r3,r2
  8085a8:	1001703a 	wrctl	status,r2
  
  return context;
  8085ac:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8085b0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  8085b4:	e0bffe17 	ldw	r2,-8(fp)
  8085b8:	10c00017 	ldw	r3,0(r2)
  8085bc:	e0bfff17 	ldw	r2,-4(fp)
  8085c0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  8085c4:	e0bffe17 	ldw	r2,-8(fp)
  8085c8:	10c00117 	ldw	r3,4(r2)
  8085cc:	e0bfff17 	ldw	r2,-4(fp)
  8085d0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  8085d4:	e0bffe17 	ldw	r2,-8(fp)
  8085d8:	10c00217 	ldw	r3,8(r2)
  8085dc:	e0bfff17 	ldw	r2,-4(fp)
  8085e0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  8085e4:	e0bffe17 	ldw	r2,-8(fp)
  8085e8:	10c00317 	ldw	r3,12(r2)
  8085ec:	e0bfff17 	ldw	r2,-4(fp)
  8085f0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  8085f4:	e0bffe17 	ldw	r2,-8(fp)
  8085f8:	10c00417 	ldw	r3,16(r2)
  8085fc:	e0bfff17 	ldw	r2,-4(fp)
  808600:	10c00415 	stw	r3,16(r2)
  808604:	e0bffb17 	ldw	r2,-20(fp)
  808608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80860c:	e0bffd17 	ldw	r2,-12(fp)
  808610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  808614:	e0bfff17 	ldw	r2,-4(fp)
  808618:	10c00317 	ldw	r3,12(r2)
  80861c:	e0bfff17 	ldw	r2,-4(fp)
  808620:	10800417 	ldw	r2,16(r2)
  808624:	1887c83a 	sub	r3,r3,r2
  808628:	e0bfff17 	ldw	r2,-4(fp)
  80862c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  808630:	0005883a 	mov	r2,zero
}
  808634:	e037883a 	mov	sp,fp
  808638:	df000017 	ldw	fp,0(sp)
  80863c:	dec00104 	addi	sp,sp,4
  808640:	f800283a 	ret

00808644 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  808644:	defffc04 	addi	sp,sp,-16
  808648:	dfc00315 	stw	ra,12(sp)
  80864c:	df000215 	stw	fp,8(sp)
  808650:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  808654:	01430c04 	movi	r5,3120
  808658:	010020b4 	movhi	r4,130
  80865c:	2127c304 	addi	r4,r4,-24820
  808660:	0805f880 	call	805f88 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  808664:	008020b4 	movhi	r2,130
  808668:	10a7c304 	addi	r2,r2,-24820
  80866c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  808670:	e03fff0d 	sth	zero,-4(fp)
  808674:	00001606 	br	8086d0 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  808678:	e0bfff0b 	ldhu	r2,-4(fp)
  80867c:	10800044 	addi	r2,r2,1
  808680:	01400d04 	movi	r5,52
  808684:	1009883a 	mov	r4,r2
  808688:	080388c0 	call	80388c <__mulsi3>
  80868c:	1007883a 	mov	r3,r2
  808690:	008020b4 	movhi	r2,130
  808694:	10a7c304 	addi	r2,r2,-24820
  808698:	1887883a 	add	r3,r3,r2
  80869c:	e0bffe17 	ldw	r2,-8(fp)
  8086a0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  8086a4:	e0bffe17 	ldw	r2,-8(fp)
  8086a8:	00c00fc4 	movi	r3,63
  8086ac:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  8086b0:	e0bffe17 	ldw	r2,-8(fp)
  8086b4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  8086b8:	e0bffe17 	ldw	r2,-8(fp)
  8086bc:	10800d04 	addi	r2,r2,52
  8086c0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  8086c4:	e0bfff0b 	ldhu	r2,-4(fp)
  8086c8:	10800044 	addi	r2,r2,1
  8086cc:	e0bfff0d 	sth	r2,-4(fp)
  8086d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8086d4:	10800ef0 	cmpltui	r2,r2,59
  8086d8:	103fe71e 	bne	r2,zero,808678 <__alt_mem_epcs_flash_controller_0+0xff7ff678>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  8086dc:	e0bffe17 	ldw	r2,-8(fp)
  8086e0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  8086e4:	e0bffe17 	ldw	r2,-8(fp)
  8086e8:	00c00fc4 	movi	r3,63
  8086ec:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  8086f0:	e0bffe17 	ldw	r2,-8(fp)
  8086f4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  8086f8:	008020b4 	movhi	r2,130
  8086fc:	10a7c304 	addi	r2,r2,-24820
  808700:	d0a09b15 	stw	r2,-32148(gp)
#endif
}
  808704:	0001883a 	nop
  808708:	e037883a 	mov	sp,fp
  80870c:	dfc00117 	ldw	ra,4(sp)
  808710:	df000017 	ldw	fp,0(sp)
  808714:	dec00204 	addi	sp,sp,8
  808718:	f800283a 	ret

0080871c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80871c:	defff804 	addi	sp,sp,-32
  808720:	df000715 	stw	fp,28(sp)
  808724:	df000704 	addi	fp,sp,28
  808728:	e13ffe15 	stw	r4,-8(fp)
  80872c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808730:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808734:	e0bfff17 	ldw	r2,-4(fp)
  808738:	1000021e 	bne	r2,zero,808744 <OSQAccept+0x28>
        return ((void *)0);
  80873c:	0005883a 	mov	r2,zero
  808740:	00004206 	br	80884c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  808744:	e0bffe17 	ldw	r2,-8(fp)
  808748:	1000051e 	bne	r2,zero,808760 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  80874c:	e0bfff17 	ldw	r2,-4(fp)
  808750:	00c00104 	movi	r3,4
  808754:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808758:	0005883a 	mov	r2,zero
  80875c:	00003b06 	br	80884c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  808760:	e0bffe17 	ldw	r2,-8(fp)
  808764:	10800003 	ldbu	r2,0(r2)
  808768:	10803fcc 	andi	r2,r2,255
  80876c:	108000a0 	cmpeqi	r2,r2,2
  808770:	1000051e 	bne	r2,zero,808788 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  808774:	e0bfff17 	ldw	r2,-4(fp)
  808778:	00c00044 	movi	r3,1
  80877c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808780:	0005883a 	mov	r2,zero
  808784:	00003106 	br	80884c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808788:	0005303a 	rdctl	r2,status
  80878c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808790:	e0fffd17 	ldw	r3,-12(fp)
  808794:	00bfff84 	movi	r2,-2
  808798:	1884703a 	and	r2,r3,r2
  80879c:	1001703a 	wrctl	status,r2
  
  return context;
  8087a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8087a4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8087a8:	e0bffe17 	ldw	r2,-8(fp)
  8087ac:	10800117 	ldw	r2,4(r2)
  8087b0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  8087b4:	e0bffc17 	ldw	r2,-16(fp)
  8087b8:	1080058b 	ldhu	r2,22(r2)
  8087bc:	10bfffcc 	andi	r2,r2,65535
  8087c0:	10001926 	beq	r2,zero,808828 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  8087c4:	e0bffc17 	ldw	r2,-16(fp)
  8087c8:	10800417 	ldw	r2,16(r2)
  8087cc:	11000104 	addi	r4,r2,4
  8087d0:	e0fffc17 	ldw	r3,-16(fp)
  8087d4:	19000415 	stw	r4,16(r3)
  8087d8:	10800017 	ldw	r2,0(r2)
  8087dc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8087e0:	e0bffc17 	ldw	r2,-16(fp)
  8087e4:	1080058b 	ldhu	r2,22(r2)
  8087e8:	10bfffc4 	addi	r2,r2,-1
  8087ec:	1007883a 	mov	r3,r2
  8087f0:	e0bffc17 	ldw	r2,-16(fp)
  8087f4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8087f8:	e0bffc17 	ldw	r2,-16(fp)
  8087fc:	10c00417 	ldw	r3,16(r2)
  808800:	e0bffc17 	ldw	r2,-16(fp)
  808804:	10800217 	ldw	r2,8(r2)
  808808:	1880041e 	bne	r3,r2,80881c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  80880c:	e0bffc17 	ldw	r2,-16(fp)
  808810:	10c00117 	ldw	r3,4(r2)
  808814:	e0bffc17 	ldw	r2,-16(fp)
  808818:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80881c:	e0bfff17 	ldw	r2,-4(fp)
  808820:	10000005 	stb	zero,0(r2)
  808824:	00000406 	br	808838 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  808828:	e0bfff17 	ldw	r2,-4(fp)
  80882c:	00c007c4 	movi	r3,31
  808830:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  808834:	e03ff915 	stw	zero,-28(fp)
  808838:	e0bffa17 	ldw	r2,-24(fp)
  80883c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808840:	e0bffb17 	ldw	r2,-20(fp)
  808844:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  808848:	e0bff917 	ldw	r2,-28(fp)
}
  80884c:	e037883a 	mov	sp,fp
  808850:	df000017 	ldw	fp,0(sp)
  808854:	dec00104 	addi	sp,sp,4
  808858:	f800283a 	ret

0080885c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80885c:	defff404 	addi	sp,sp,-48
  808860:	dfc00b15 	stw	ra,44(sp)
  808864:	df000a15 	stw	fp,40(sp)
  808868:	df000a04 	addi	fp,sp,40
  80886c:	e13ffe15 	stw	r4,-8(fp)
  808870:	2805883a 	mov	r2,r5
  808874:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808878:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80887c:	d0a0a003 	ldbu	r2,-32128(gp)
  808880:	10803fcc 	andi	r2,r2,255
  808884:	10000226 	beq	r2,zero,808890 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  808888:	0005883a 	mov	r2,zero
  80888c:	00005906 	br	8089f4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808890:	0005303a 	rdctl	r2,status
  808894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808898:	e0fffd17 	ldw	r3,-12(fp)
  80889c:	00bfff84 	movi	r2,-2
  8088a0:	1884703a 	and	r2,r3,r2
  8088a4:	1001703a 	wrctl	status,r2
  
  return context;
  8088a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8088ac:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  8088b0:	d0a09f17 	ldw	r2,-32132(gp)
  8088b4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  8088b8:	d0a09f17 	ldw	r2,-32132(gp)
  8088bc:	10000326 	beq	r2,zero,8088cc <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8088c0:	d0a09f17 	ldw	r2,-32132(gp)
  8088c4:	10800117 	ldw	r2,4(r2)
  8088c8:	d0a09f15 	stw	r2,-32132(gp)
  8088cc:	e0bff717 	ldw	r2,-36(fp)
  8088d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088d4:	e0bff817 	ldw	r2,-32(fp)
  8088d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  8088dc:	e0bff617 	ldw	r2,-40(fp)
  8088e0:	10004326 	beq	r2,zero,8089f0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8088e4:	0005303a 	rdctl	r2,status
  8088e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8088ec:	e0fff917 	ldw	r3,-28(fp)
  8088f0:	00bfff84 	movi	r2,-2
  8088f4:	1884703a 	and	r2,r3,r2
  8088f8:	1001703a 	wrctl	status,r2
  
  return context;
  8088fc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  808900:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  808904:	d0a09d17 	ldw	r2,-32140(gp)
  808908:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80890c:	e0bffb17 	ldw	r2,-20(fp)
  808910:	10002d26 	beq	r2,zero,8089c8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  808914:	d0a09d17 	ldw	r2,-32140(gp)
  808918:	10800017 	ldw	r2,0(r2)
  80891c:	d0a09d15 	stw	r2,-32140(gp)
  808920:	e0bff717 	ldw	r2,-36(fp)
  808924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808928:	e0bffa17 	ldw	r2,-24(fp)
  80892c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  808930:	e0bffb17 	ldw	r2,-20(fp)
  808934:	e0fffe17 	ldw	r3,-8(fp)
  808938:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  80893c:	e0bfff0b 	ldhu	r2,-4(fp)
  808940:	1085883a 	add	r2,r2,r2
  808944:	1085883a 	add	r2,r2,r2
  808948:	1007883a 	mov	r3,r2
  80894c:	e0bffe17 	ldw	r2,-8(fp)
  808950:	10c7883a 	add	r3,r2,r3
  808954:	e0bffb17 	ldw	r2,-20(fp)
  808958:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80895c:	e0bffb17 	ldw	r2,-20(fp)
  808960:	e0fffe17 	ldw	r3,-8(fp)
  808964:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  808968:	e0bffb17 	ldw	r2,-20(fp)
  80896c:	e0fffe17 	ldw	r3,-8(fp)
  808970:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  808974:	e0bffb17 	ldw	r2,-20(fp)
  808978:	e0ffff0b 	ldhu	r3,-4(fp)
  80897c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  808980:	e0bffb17 	ldw	r2,-20(fp)
  808984:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  808988:	e0bff617 	ldw	r2,-40(fp)
  80898c:	00c00084 	movi	r3,2
  808990:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  808994:	e0bff617 	ldw	r2,-40(fp)
  808998:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80899c:	e0bff617 	ldw	r2,-40(fp)
  8089a0:	e0fffb17 	ldw	r3,-20(fp)
  8089a4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  8089a8:	e0bff617 	ldw	r2,-40(fp)
  8089ac:	00c00fc4 	movi	r3,63
  8089b0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  8089b4:	e0bff617 	ldw	r2,-40(fp)
  8089b8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  8089bc:	e13ff617 	ldw	r4,-40(fp)
  8089c0:	0805ba80 	call	805ba8 <OS_EventWaitListInit>
  8089c4:	00000a06 	br	8089f0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  8089c8:	d0e09f17 	ldw	r3,-32132(gp)
  8089cc:	e0bff617 	ldw	r2,-40(fp)
  8089d0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  8089d4:	e0bff617 	ldw	r2,-40(fp)
  8089d8:	d0a09f15 	stw	r2,-32132(gp)
  8089dc:	e0bff717 	ldw	r2,-36(fp)
  8089e0:	e0bffc15 	stw	r2,-16(fp)
  8089e4:	e0bffc17 	ldw	r2,-16(fp)
  8089e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  8089ec:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  8089f0:	e0bff617 	ldw	r2,-40(fp)
}
  8089f4:	e037883a 	mov	sp,fp
  8089f8:	dfc00117 	ldw	ra,4(sp)
  8089fc:	df000017 	ldw	fp,0(sp)
  808a00:	dec00204 	addi	sp,sp,8
  808a04:	f800283a 	ret

00808a08 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  808a08:	defff204 	addi	sp,sp,-56
  808a0c:	dfc00d15 	stw	ra,52(sp)
  808a10:	df000c15 	stw	fp,48(sp)
  808a14:	df000c04 	addi	fp,sp,48
  808a18:	e13ffd15 	stw	r4,-12(fp)
  808a1c:	2805883a 	mov	r2,r5
  808a20:	e1bfff15 	stw	r6,-4(fp)
  808a24:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808a28:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  808a2c:	e0bfff17 	ldw	r2,-4(fp)
  808a30:	1000021e 	bne	r2,zero,808a3c <OSQDel+0x34>
        return (pevent);
  808a34:	e0bffd17 	ldw	r2,-12(fp)
  808a38:	00008e06 	br	808c74 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  808a3c:	e0bffd17 	ldw	r2,-12(fp)
  808a40:	1000051e 	bne	r2,zero,808a58 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808a44:	e0bfff17 	ldw	r2,-4(fp)
  808a48:	00c00104 	movi	r3,4
  808a4c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808a50:	e0bffd17 	ldw	r2,-12(fp)
  808a54:	00008706 	br	808c74 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  808a58:	e0bffd17 	ldw	r2,-12(fp)
  808a5c:	10800003 	ldbu	r2,0(r2)
  808a60:	10803fcc 	andi	r2,r2,255
  808a64:	108000a0 	cmpeqi	r2,r2,2
  808a68:	1000051e 	bne	r2,zero,808a80 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  808a6c:	e0bfff17 	ldw	r2,-4(fp)
  808a70:	00c00044 	movi	r3,1
  808a74:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808a78:	e0bffd17 	ldw	r2,-12(fp)
  808a7c:	00007d06 	br	808c74 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  808a80:	d0a0a003 	ldbu	r2,-32128(gp)
  808a84:	10803fcc 	andi	r2,r2,255
  808a88:	10000526 	beq	r2,zero,808aa0 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  808a8c:	e0bfff17 	ldw	r2,-4(fp)
  808a90:	00c003c4 	movi	r3,15
  808a94:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808a98:	e0bffd17 	ldw	r2,-12(fp)
  808a9c:	00007506 	br	808c74 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808aa0:	0005303a 	rdctl	r2,status
  808aa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808aa8:	e0fffc17 	ldw	r3,-16(fp)
  808aac:	00bfff84 	movi	r2,-2
  808ab0:	1884703a 	and	r2,r3,r2
  808ab4:	1001703a 	wrctl	status,r2
  
  return context;
  808ab8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808abc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  808ac0:	e0bffd17 	ldw	r2,-12(fp)
  808ac4:	10800283 	ldbu	r2,10(r2)
  808ac8:	10803fcc 	andi	r2,r2,255
  808acc:	10000326 	beq	r2,zero,808adc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  808ad0:	00800044 	movi	r2,1
  808ad4:	e0bff405 	stb	r2,-48(fp)
  808ad8:	00000106 	br	808ae0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  808adc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  808ae0:	e0bffe03 	ldbu	r2,-8(fp)
  808ae4:	10000326 	beq	r2,zero,808af4 <OSQDel+0xec>
  808ae8:	10800060 	cmpeqi	r2,r2,1
  808aec:	1000301e 	bne	r2,zero,808bb0 <OSQDel+0x1a8>
  808af0:	00005506 	br	808c48 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  808af4:	e0bff403 	ldbu	r2,-48(fp)
  808af8:	10001e1e 	bne	r2,zero,808b74 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  808afc:	e0bffd17 	ldw	r2,-12(fp)
  808b00:	00c00fc4 	movi	r3,63
  808b04:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  808b08:	e0bffd17 	ldw	r2,-12(fp)
  808b0c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  808b10:	e0bffd17 	ldw	r2,-12(fp)
  808b14:	10800117 	ldw	r2,4(r2)
  808b18:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  808b1c:	d0e09d17 	ldw	r3,-32140(gp)
  808b20:	e0bff817 	ldw	r2,-32(fp)
  808b24:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  808b28:	e0bff817 	ldw	r2,-32(fp)
  808b2c:	d0a09d15 	stw	r2,-32140(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  808b30:	e0bffd17 	ldw	r2,-12(fp)
  808b34:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  808b38:	d0e09f17 	ldw	r3,-32132(gp)
  808b3c:	e0bffd17 	ldw	r2,-12(fp)
  808b40:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  808b44:	e0bffd17 	ldw	r2,-12(fp)
  808b48:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  808b4c:	e0bffd17 	ldw	r2,-12(fp)
  808b50:	d0a09f15 	stw	r2,-32132(gp)
  808b54:	e0bff617 	ldw	r2,-40(fp)
  808b58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b5c:	e0bff717 	ldw	r2,-36(fp)
  808b60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  808b64:	e0bfff17 	ldw	r2,-4(fp)
  808b68:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  808b6c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  808b70:	00003f06 	br	808c70 <OSQDel+0x268>
  808b74:	e0bff617 	ldw	r2,-40(fp)
  808b78:	e0bff915 	stw	r2,-28(fp)
  808b7c:	e0bff917 	ldw	r2,-28(fp)
  808b80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  808b84:	e0bfff17 	ldw	r2,-4(fp)
  808b88:	00c01244 	movi	r3,73
  808b8c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  808b90:	e0bffd17 	ldw	r2,-12(fp)
  808b94:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  808b98:	00003506 	br	808c70 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  808b9c:	000f883a 	mov	r7,zero
  808ba0:	01800104 	movi	r6,4
  808ba4:	000b883a 	mov	r5,zero
  808ba8:	e13ffd17 	ldw	r4,-12(fp)
  808bac:	08055f80 	call	8055f8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  808bb0:	e0bffd17 	ldw	r2,-12(fp)
  808bb4:	10800283 	ldbu	r2,10(r2)
  808bb8:	10803fcc 	andi	r2,r2,255
  808bbc:	103ff71e 	bne	r2,zero,808b9c <__alt_mem_epcs_flash_controller_0+0xff7ffb9c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  808bc0:	e0bffd17 	ldw	r2,-12(fp)
  808bc4:	00c00fc4 	movi	r3,63
  808bc8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  808bcc:	e0bffd17 	ldw	r2,-12(fp)
  808bd0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  808bd4:	e0bffd17 	ldw	r2,-12(fp)
  808bd8:	10800117 	ldw	r2,4(r2)
  808bdc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  808be0:	d0e09d17 	ldw	r3,-32140(gp)
  808be4:	e0bff817 	ldw	r2,-32(fp)
  808be8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  808bec:	e0bff817 	ldw	r2,-32(fp)
  808bf0:	d0a09d15 	stw	r2,-32140(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  808bf4:	e0bffd17 	ldw	r2,-12(fp)
  808bf8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  808bfc:	d0e09f17 	ldw	r3,-32132(gp)
  808c00:	e0bffd17 	ldw	r2,-12(fp)
  808c04:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  808c08:	e0bffd17 	ldw	r2,-12(fp)
  808c0c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  808c10:	e0bffd17 	ldw	r2,-12(fp)
  808c14:	d0a09f15 	stw	r2,-32132(gp)
  808c18:	e0bff617 	ldw	r2,-40(fp)
  808c1c:	e0bffa15 	stw	r2,-24(fp)
  808c20:	e0bffa17 	ldw	r2,-24(fp)
  808c24:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  808c28:	e0bff403 	ldbu	r2,-48(fp)
  808c2c:	10800058 	cmpnei	r2,r2,1
  808c30:	1000011e 	bne	r2,zero,808c38 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  808c34:	08060440 	call	806044 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  808c38:	e0bfff17 	ldw	r2,-4(fp)
  808c3c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  808c40:	e03ff515 	stw	zero,-44(fp)
             break;
  808c44:	00000a06 	br	808c70 <OSQDel+0x268>
  808c48:	e0bff617 	ldw	r2,-40(fp)
  808c4c:	e0bffb15 	stw	r2,-20(fp)
  808c50:	e0bffb17 	ldw	r2,-20(fp)
  808c54:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  808c58:	e0bfff17 	ldw	r2,-4(fp)
  808c5c:	00c001c4 	movi	r3,7
  808c60:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  808c64:	e0bffd17 	ldw	r2,-12(fp)
  808c68:	e0bff515 	stw	r2,-44(fp)
             break;
  808c6c:	0001883a 	nop
    }
    return (pevent_return);
  808c70:	e0bff517 	ldw	r2,-44(fp)
}
  808c74:	e037883a 	mov	sp,fp
  808c78:	dfc00117 	ldw	ra,4(sp)
  808c7c:	df000017 	ldw	fp,0(sp)
  808c80:	dec00204 	addi	sp,sp,8
  808c84:	f800283a 	ret

00808c88 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  808c88:	defffa04 	addi	sp,sp,-24
  808c8c:	df000515 	stw	fp,20(sp)
  808c90:	df000504 	addi	fp,sp,20
  808c94:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808c98:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808c9c:	e0bfff17 	ldw	r2,-4(fp)
  808ca0:	1000021e 	bne	r2,zero,808cac <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  808ca4:	00800104 	movi	r2,4
  808ca8:	00002106 	br	808d30 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808cac:	e0bfff17 	ldw	r2,-4(fp)
  808cb0:	10800003 	ldbu	r2,0(r2)
  808cb4:	10803fcc 	andi	r2,r2,255
  808cb8:	108000a0 	cmpeqi	r2,r2,2
  808cbc:	1000021e 	bne	r2,zero,808cc8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  808cc0:	00800044 	movi	r2,1
  808cc4:	00001a06 	br	808d30 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808cc8:	0005303a 	rdctl	r2,status
  808ccc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808cd0:	e0fffd17 	ldw	r3,-12(fp)
  808cd4:	00bfff84 	movi	r2,-2
  808cd8:	1884703a 	and	r2,r3,r2
  808cdc:	1001703a 	wrctl	status,r2
  
  return context;
  808ce0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  808ce4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  808ce8:	e0bfff17 	ldw	r2,-4(fp)
  808cec:	10800117 	ldw	r2,4(r2)
  808cf0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  808cf4:	e0bffc17 	ldw	r2,-16(fp)
  808cf8:	10c00117 	ldw	r3,4(r2)
  808cfc:	e0bffc17 	ldw	r2,-16(fp)
  808d00:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  808d04:	e0bffc17 	ldw	r2,-16(fp)
  808d08:	10c00117 	ldw	r3,4(r2)
  808d0c:	e0bffc17 	ldw	r2,-16(fp)
  808d10:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  808d14:	e0bffc17 	ldw	r2,-16(fp)
  808d18:	1000058d 	sth	zero,22(r2)
  808d1c:	e0bffb17 	ldw	r2,-20(fp)
  808d20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808d24:	e0bffe17 	ldw	r2,-8(fp)
  808d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808d2c:	0005883a 	mov	r2,zero
}
  808d30:	e037883a 	mov	sp,fp
  808d34:	df000017 	ldw	fp,0(sp)
  808d38:	dec00104 	addi	sp,sp,4
  808d3c:	f800283a 	ret

00808d40 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  808d40:	defff304 	addi	sp,sp,-52
  808d44:	dfc00c15 	stw	ra,48(sp)
  808d48:	df000b15 	stw	fp,44(sp)
  808d4c:	df000b04 	addi	fp,sp,44
  808d50:	e13ffd15 	stw	r4,-12(fp)
  808d54:	2805883a 	mov	r2,r5
  808d58:	e1bfff15 	stw	r6,-4(fp)
  808d5c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808d60:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808d64:	e0bfff17 	ldw	r2,-4(fp)
  808d68:	1000021e 	bne	r2,zero,808d74 <OSQPend+0x34>
        return ((void *)0);
  808d6c:	0005883a 	mov	r2,zero
  808d70:	00009106 	br	808fb8 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  808d74:	e0bffd17 	ldw	r2,-12(fp)
  808d78:	1000051e 	bne	r2,zero,808d90 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808d7c:	e0bfff17 	ldw	r2,-4(fp)
  808d80:	00c00104 	movi	r3,4
  808d84:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808d88:	0005883a 	mov	r2,zero
  808d8c:	00008a06 	br	808fb8 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  808d90:	e0bffd17 	ldw	r2,-12(fp)
  808d94:	10800003 	ldbu	r2,0(r2)
  808d98:	10803fcc 	andi	r2,r2,255
  808d9c:	108000a0 	cmpeqi	r2,r2,2
  808da0:	1000051e 	bne	r2,zero,808db8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  808da4:	e0bfff17 	ldw	r2,-4(fp)
  808da8:	00c00044 	movi	r3,1
  808dac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808db0:	0005883a 	mov	r2,zero
  808db4:	00008006 	br	808fb8 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  808db8:	d0a0a003 	ldbu	r2,-32128(gp)
  808dbc:	10803fcc 	andi	r2,r2,255
  808dc0:	10000526 	beq	r2,zero,808dd8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  808dc4:	e0bfff17 	ldw	r2,-4(fp)
  808dc8:	00c00084 	movi	r3,2
  808dcc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808dd0:	0005883a 	mov	r2,zero
  808dd4:	00007806 	br	808fb8 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  808dd8:	d0a09203 	ldbu	r2,-32184(gp)
  808ddc:	10803fcc 	andi	r2,r2,255
  808de0:	10000526 	beq	r2,zero,808df8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  808de4:	e0bfff17 	ldw	r2,-4(fp)
  808de8:	00c00344 	movi	r3,13
  808dec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808df0:	0005883a 	mov	r2,zero
  808df4:	00007006 	br	808fb8 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808df8:	0005303a 	rdctl	r2,status
  808dfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e00:	e0fffc17 	ldw	r3,-16(fp)
  808e04:	00bfff84 	movi	r2,-2
  808e08:	1884703a 	and	r2,r3,r2
  808e0c:	1001703a 	wrctl	status,r2
  
  return context;
  808e10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808e14:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  808e18:	e0bffd17 	ldw	r2,-12(fp)
  808e1c:	10800117 	ldw	r2,4(r2)
  808e20:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  808e24:	e0bff817 	ldw	r2,-32(fp)
  808e28:	1080058b 	ldhu	r2,22(r2)
  808e2c:	10bfffcc 	andi	r2,r2,65535
  808e30:	10001e26 	beq	r2,zero,808eac <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  808e34:	e0bff817 	ldw	r2,-32(fp)
  808e38:	10800417 	ldw	r2,16(r2)
  808e3c:	11000104 	addi	r4,r2,4
  808e40:	e0fff817 	ldw	r3,-32(fp)
  808e44:	19000415 	stw	r4,16(r3)
  808e48:	10800017 	ldw	r2,0(r2)
  808e4c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  808e50:	e0bff817 	ldw	r2,-32(fp)
  808e54:	1080058b 	ldhu	r2,22(r2)
  808e58:	10bfffc4 	addi	r2,r2,-1
  808e5c:	1007883a 	mov	r3,r2
  808e60:	e0bff817 	ldw	r2,-32(fp)
  808e64:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  808e68:	e0bff817 	ldw	r2,-32(fp)
  808e6c:	10c00417 	ldw	r3,16(r2)
  808e70:	e0bff817 	ldw	r2,-32(fp)
  808e74:	10800217 	ldw	r2,8(r2)
  808e78:	1880041e 	bne	r3,r2,808e8c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  808e7c:	e0bff817 	ldw	r2,-32(fp)
  808e80:	10c00117 	ldw	r3,4(r2)
  808e84:	e0bff817 	ldw	r2,-32(fp)
  808e88:	10c00415 	stw	r3,16(r2)
  808e8c:	e0bff617 	ldw	r2,-40(fp)
  808e90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808e94:	e0bff717 	ldw	r2,-36(fp)
  808e98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  808e9c:	e0bfff17 	ldw	r2,-4(fp)
  808ea0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  808ea4:	e0bff517 	ldw	r2,-44(fp)
  808ea8:	00004306 	br	808fb8 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  808eac:	d0a0a117 	ldw	r2,-32124(gp)
  808eb0:	d0e0a117 	ldw	r3,-32124(gp)
  808eb4:	18c00c03 	ldbu	r3,48(r3)
  808eb8:	18c00114 	ori	r3,r3,4
  808ebc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  808ec0:	d0a0a117 	ldw	r2,-32124(gp)
  808ec4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  808ec8:	d0a0a117 	ldw	r2,-32124(gp)
  808ecc:	e0fffe0b 	ldhu	r3,-8(fp)
  808ed0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  808ed4:	e13ffd17 	ldw	r4,-12(fp)
  808ed8:	08057900 	call	805790 <OS_EventTaskWait>
  808edc:	e0bff617 	ldw	r2,-40(fp)
  808ee0:	e0bffb15 	stw	r2,-20(fp)
  808ee4:	e0bffb17 	ldw	r2,-20(fp)
  808ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  808eec:	08060440 	call	806044 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808ef0:	0005303a 	rdctl	r2,status
  808ef4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808ef8:	e0fff917 	ldw	r3,-28(fp)
  808efc:	00bfff84 	movi	r2,-2
  808f00:	1884703a 	and	r2,r3,r2
  808f04:	1001703a 	wrctl	status,r2
  
  return context;
  808f08:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  808f0c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  808f10:	d0a0a117 	ldw	r2,-32124(gp)
  808f14:	10800c43 	ldbu	r2,49(r2)
  808f18:	10803fcc 	andi	r2,r2,255
  808f1c:	10000326 	beq	r2,zero,808f2c <OSQPend+0x1ec>
  808f20:	108000a0 	cmpeqi	r2,r2,2
  808f24:	1000071e 	bne	r2,zero,808f44 <OSQPend+0x204>
  808f28:	00000b06 	br	808f58 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  808f2c:	d0a0a117 	ldw	r2,-32124(gp)
  808f30:	10800917 	ldw	r2,36(r2)
  808f34:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  808f38:	e0bfff17 	ldw	r2,-4(fp)
  808f3c:	10000005 	stb	zero,0(r2)
             break;
  808f40:	00000e06 	br	808f7c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  808f44:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  808f48:	e0bfff17 	ldw	r2,-4(fp)
  808f4c:	00c00384 	movi	r3,14
  808f50:	10c00005 	stb	r3,0(r2)
             break;
  808f54:	00000906 	br	808f7c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  808f58:	d0a0a117 	ldw	r2,-32124(gp)
  808f5c:	e17ffd17 	ldw	r5,-12(fp)
  808f60:	1009883a 	mov	r4,r2
  808f64:	08059f00 	call	8059f0 <OS_EventTaskRemove>
             pmsg = (void *)0;
  808f68:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  808f6c:	e0bfff17 	ldw	r2,-4(fp)
  808f70:	00c00284 	movi	r3,10
  808f74:	10c00005 	stb	r3,0(r2)
             break;
  808f78:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  808f7c:	d0a0a117 	ldw	r2,-32124(gp)
  808f80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  808f84:	d0a0a117 	ldw	r2,-32124(gp)
  808f88:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  808f8c:	d0a0a117 	ldw	r2,-32124(gp)
  808f90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  808f94:	d0a0a117 	ldw	r2,-32124(gp)
  808f98:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  808f9c:	d0a0a117 	ldw	r2,-32124(gp)
  808fa0:	10000915 	stw	zero,36(r2)
  808fa4:	e0bff617 	ldw	r2,-40(fp)
  808fa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808fac:	e0bffa17 	ldw	r2,-24(fp)
  808fb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  808fb4:	e0bff517 	ldw	r2,-44(fp)
}
  808fb8:	e037883a 	mov	sp,fp
  808fbc:	dfc00117 	ldw	ra,4(sp)
  808fc0:	df000017 	ldw	fp,0(sp)
  808fc4:	dec00204 	addi	sp,sp,8
  808fc8:	f800283a 	ret

00808fcc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  808fcc:	defff604 	addi	sp,sp,-40
  808fd0:	dfc00915 	stw	ra,36(sp)
  808fd4:	df000815 	stw	fp,32(sp)
  808fd8:	df000804 	addi	fp,sp,32
  808fdc:	e13ffd15 	stw	r4,-12(fp)
  808fe0:	2805883a 	mov	r2,r5
  808fe4:	e1bfff15 	stw	r6,-4(fp)
  808fe8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808fec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  808ff0:	e0bfff17 	ldw	r2,-4(fp)
  808ff4:	1000021e 	bne	r2,zero,809000 <OSQPendAbort+0x34>
        return (0);
  808ff8:	0005883a 	mov	r2,zero
  808ffc:	00004906 	br	809124 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  809000:	e0bffd17 	ldw	r2,-12(fp)
  809004:	1000051e 	bne	r2,zero,80901c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  809008:	e0bfff17 	ldw	r2,-4(fp)
  80900c:	00c00104 	movi	r3,4
  809010:	10c00005 	stb	r3,0(r2)
        return (0);
  809014:	0005883a 	mov	r2,zero
  809018:	00004206 	br	809124 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80901c:	e0bffd17 	ldw	r2,-12(fp)
  809020:	10800003 	ldbu	r2,0(r2)
  809024:	10803fcc 	andi	r2,r2,255
  809028:	108000a0 	cmpeqi	r2,r2,2
  80902c:	1000051e 	bne	r2,zero,809044 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  809030:	e0bfff17 	ldw	r2,-4(fp)
  809034:	00c00044 	movi	r3,1
  809038:	10c00005 	stb	r3,0(r2)
        return (0);
  80903c:	0005883a 	mov	r2,zero
  809040:	00003806 	br	809124 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809044:	0005303a 	rdctl	r2,status
  809048:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80904c:	e0fffc17 	ldw	r3,-16(fp)
  809050:	00bfff84 	movi	r2,-2
  809054:	1884703a 	and	r2,r3,r2
  809058:	1001703a 	wrctl	status,r2
  
  return context;
  80905c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809060:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  809064:	e0bffd17 	ldw	r2,-12(fp)
  809068:	10800283 	ldbu	r2,10(r2)
  80906c:	10803fcc 	andi	r2,r2,255
  809070:	10002526 	beq	r2,zero,809108 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  809074:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  809078:	e0bffe03 	ldbu	r2,-8(fp)
  80907c:	10800060 	cmpeqi	r2,r2,1
  809080:	10000e26 	beq	r2,zero,8090bc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  809084:	00000806 	br	8090a8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  809088:	01c00084 	movi	r7,2
  80908c:	01800104 	movi	r6,4
  809090:	000b883a 	mov	r5,zero
  809094:	e13ffd17 	ldw	r4,-12(fp)
  809098:	08055f80 	call	8055f8 <OS_EventTaskRdy>
                     nbr_tasks++;
  80909c:	e0bff803 	ldbu	r2,-32(fp)
  8090a0:	10800044 	addi	r2,r2,1
  8090a4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8090a8:	e0bffd17 	ldw	r2,-12(fp)
  8090ac:	10800283 	ldbu	r2,10(r2)
  8090b0:	10803fcc 	andi	r2,r2,255
  8090b4:	103ff41e 	bne	r2,zero,809088 <__alt_mem_epcs_flash_controller_0+0xff800088>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8090b8:	00000906 	br	8090e0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8090bc:	01c00084 	movi	r7,2
  8090c0:	01800104 	movi	r6,4
  8090c4:	000b883a 	mov	r5,zero
  8090c8:	e13ffd17 	ldw	r4,-12(fp)
  8090cc:	08055f80 	call	8055f8 <OS_EventTaskRdy>
                 nbr_tasks++;
  8090d0:	e0bff803 	ldbu	r2,-32(fp)
  8090d4:	10800044 	addi	r2,r2,1
  8090d8:	e0bff805 	stb	r2,-32(fp)
                 break;
  8090dc:	0001883a 	nop
  8090e0:	e0bff917 	ldw	r2,-28(fp)
  8090e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8090e8:	e0bffa17 	ldw	r2,-24(fp)
  8090ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  8090f0:	08060440 	call	806044 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  8090f4:	e0bfff17 	ldw	r2,-4(fp)
  8090f8:	00c00384 	movi	r3,14
  8090fc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  809100:	e0bff803 	ldbu	r2,-32(fp)
  809104:	00000706 	br	809124 <OSQPendAbort+0x158>
  809108:	e0bff917 	ldw	r2,-28(fp)
  80910c:	e0bffb15 	stw	r2,-20(fp)
  809110:	e0bffb17 	ldw	r2,-20(fp)
  809114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  809118:	e0bfff17 	ldw	r2,-4(fp)
  80911c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  809120:	0005883a 	mov	r2,zero
}
  809124:	e037883a 	mov	sp,fp
  809128:	dfc00117 	ldw	ra,4(sp)
  80912c:	df000017 	ldw	fp,0(sp)
  809130:	dec00204 	addi	sp,sp,8
  809134:	f800283a 	ret

00809138 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  809138:	defff604 	addi	sp,sp,-40
  80913c:	dfc00915 	stw	ra,36(sp)
  809140:	df000815 	stw	fp,32(sp)
  809144:	df000804 	addi	fp,sp,32
  809148:	e13ffe15 	stw	r4,-8(fp)
  80914c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  809150:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  809154:	e0bffe17 	ldw	r2,-8(fp)
  809158:	1000021e 	bne	r2,zero,809164 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80915c:	00800104 	movi	r2,4
  809160:	00004a06 	br	80928c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  809164:	e0bffe17 	ldw	r2,-8(fp)
  809168:	10800003 	ldbu	r2,0(r2)
  80916c:	10803fcc 	andi	r2,r2,255
  809170:	108000a0 	cmpeqi	r2,r2,2
  809174:	1000021e 	bne	r2,zero,809180 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  809178:	00800044 	movi	r2,1
  80917c:	00004306 	br	80928c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809180:	0005303a 	rdctl	r2,status
  809184:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809188:	e0fffd17 	ldw	r3,-12(fp)
  80918c:	00bfff84 	movi	r2,-2
  809190:	1884703a 	and	r2,r3,r2
  809194:	1001703a 	wrctl	status,r2
  
  return context;
  809198:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  80919c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  8091a0:	e0bffe17 	ldw	r2,-8(fp)
  8091a4:	10800283 	ldbu	r2,10(r2)
  8091a8:	10803fcc 	andi	r2,r2,255
  8091ac:	10000c26 	beq	r2,zero,8091e0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8091b0:	000f883a 	mov	r7,zero
  8091b4:	01800104 	movi	r6,4
  8091b8:	e17fff17 	ldw	r5,-4(fp)
  8091bc:	e13ffe17 	ldw	r4,-8(fp)
  8091c0:	08055f80 	call	8055f8 <OS_EventTaskRdy>
  8091c4:	e0bff817 	ldw	r2,-32(fp)
  8091c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8091cc:	e0bff917 	ldw	r2,-28(fp)
  8091d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  8091d4:	08060440 	call	806044 <OS_Sched>
        return (OS_ERR_NONE);
  8091d8:	0005883a 	mov	r2,zero
  8091dc:	00002b06 	br	80928c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  8091e0:	e0bffe17 	ldw	r2,-8(fp)
  8091e4:	10800117 	ldw	r2,4(r2)
  8091e8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  8091ec:	e0bffb17 	ldw	r2,-20(fp)
  8091f0:	10c0058b 	ldhu	r3,22(r2)
  8091f4:	e0bffb17 	ldw	r2,-20(fp)
  8091f8:	1080050b 	ldhu	r2,20(r2)
  8091fc:	18ffffcc 	andi	r3,r3,65535
  809200:	10bfffcc 	andi	r2,r2,65535
  809204:	18800636 	bltu	r3,r2,809220 <OSQPost+0xe8>
  809208:	e0bff817 	ldw	r2,-32(fp)
  80920c:	e0bffa15 	stw	r2,-24(fp)
  809210:	e0bffa17 	ldw	r2,-24(fp)
  809214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  809218:	00800784 	movi	r2,30
  80921c:	00001b06 	br	80928c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  809220:	e0bffb17 	ldw	r2,-20(fp)
  809224:	10800317 	ldw	r2,12(r2)
  809228:	11000104 	addi	r4,r2,4
  80922c:	e0fffb17 	ldw	r3,-20(fp)
  809230:	19000315 	stw	r4,12(r3)
  809234:	e0ffff17 	ldw	r3,-4(fp)
  809238:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80923c:	e0bffb17 	ldw	r2,-20(fp)
  809240:	1080058b 	ldhu	r2,22(r2)
  809244:	10800044 	addi	r2,r2,1
  809248:	1007883a 	mov	r3,r2
  80924c:	e0bffb17 	ldw	r2,-20(fp)
  809250:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  809254:	e0bffb17 	ldw	r2,-20(fp)
  809258:	10c00317 	ldw	r3,12(r2)
  80925c:	e0bffb17 	ldw	r2,-20(fp)
  809260:	10800217 	ldw	r2,8(r2)
  809264:	1880041e 	bne	r3,r2,809278 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  809268:	e0bffb17 	ldw	r2,-20(fp)
  80926c:	10c00117 	ldw	r3,4(r2)
  809270:	e0bffb17 	ldw	r2,-20(fp)
  809274:	10c00315 	stw	r3,12(r2)
  809278:	e0bff817 	ldw	r2,-32(fp)
  80927c:	e0bffc15 	stw	r2,-16(fp)
  809280:	e0bffc17 	ldw	r2,-16(fp)
  809284:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809288:	0005883a 	mov	r2,zero
}
  80928c:	e037883a 	mov	sp,fp
  809290:	dfc00117 	ldw	ra,4(sp)
  809294:	df000017 	ldw	fp,0(sp)
  809298:	dec00204 	addi	sp,sp,8
  80929c:	f800283a 	ret

008092a0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8092a0:	defff604 	addi	sp,sp,-40
  8092a4:	dfc00915 	stw	ra,36(sp)
  8092a8:	df000815 	stw	fp,32(sp)
  8092ac:	df000804 	addi	fp,sp,32
  8092b0:	e13ffe15 	stw	r4,-8(fp)
  8092b4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8092b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8092bc:	e0bffe17 	ldw	r2,-8(fp)
  8092c0:	1000021e 	bne	r2,zero,8092cc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  8092c4:	00800104 	movi	r2,4
  8092c8:	00004c06 	br	8093fc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8092cc:	e0bffe17 	ldw	r2,-8(fp)
  8092d0:	10800003 	ldbu	r2,0(r2)
  8092d4:	10803fcc 	andi	r2,r2,255
  8092d8:	108000a0 	cmpeqi	r2,r2,2
  8092dc:	1000021e 	bne	r2,zero,8092e8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  8092e0:	00800044 	movi	r2,1
  8092e4:	00004506 	br	8093fc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8092e8:	0005303a 	rdctl	r2,status
  8092ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8092f0:	e0fffd17 	ldw	r3,-12(fp)
  8092f4:	00bfff84 	movi	r2,-2
  8092f8:	1884703a 	and	r2,r3,r2
  8092fc:	1001703a 	wrctl	status,r2
  
  return context;
  809300:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  809304:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  809308:	e0bffe17 	ldw	r2,-8(fp)
  80930c:	10800283 	ldbu	r2,10(r2)
  809310:	10803fcc 	andi	r2,r2,255
  809314:	10000c26 	beq	r2,zero,809348 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  809318:	000f883a 	mov	r7,zero
  80931c:	01800104 	movi	r6,4
  809320:	e17fff17 	ldw	r5,-4(fp)
  809324:	e13ffe17 	ldw	r4,-8(fp)
  809328:	08055f80 	call	8055f8 <OS_EventTaskRdy>
  80932c:	e0bff817 	ldw	r2,-32(fp)
  809330:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809334:	e0bff917 	ldw	r2,-28(fp)
  809338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  80933c:	08060440 	call	806044 <OS_Sched>
        return (OS_ERR_NONE);
  809340:	0005883a 	mov	r2,zero
  809344:	00002d06 	br	8093fc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  809348:	e0bffe17 	ldw	r2,-8(fp)
  80934c:	10800117 	ldw	r2,4(r2)
  809350:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  809354:	e0bffb17 	ldw	r2,-20(fp)
  809358:	10c0058b 	ldhu	r3,22(r2)
  80935c:	e0bffb17 	ldw	r2,-20(fp)
  809360:	1080050b 	ldhu	r2,20(r2)
  809364:	18ffffcc 	andi	r3,r3,65535
  809368:	10bfffcc 	andi	r2,r2,65535
  80936c:	18800636 	bltu	r3,r2,809388 <OSQPostFront+0xe8>
  809370:	e0bff817 	ldw	r2,-32(fp)
  809374:	e0bffa15 	stw	r2,-24(fp)
  809378:	e0bffa17 	ldw	r2,-24(fp)
  80937c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  809380:	00800784 	movi	r2,30
  809384:	00001d06 	br	8093fc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  809388:	e0bffb17 	ldw	r2,-20(fp)
  80938c:	10c00417 	ldw	r3,16(r2)
  809390:	e0bffb17 	ldw	r2,-20(fp)
  809394:	10800117 	ldw	r2,4(r2)
  809398:	1880041e 	bne	r3,r2,8093ac <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  80939c:	e0bffb17 	ldw	r2,-20(fp)
  8093a0:	10c00217 	ldw	r3,8(r2)
  8093a4:	e0bffb17 	ldw	r2,-20(fp)
  8093a8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  8093ac:	e0bffb17 	ldw	r2,-20(fp)
  8093b0:	10800417 	ldw	r2,16(r2)
  8093b4:	10ffff04 	addi	r3,r2,-4
  8093b8:	e0bffb17 	ldw	r2,-20(fp)
  8093bc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  8093c0:	e0bffb17 	ldw	r2,-20(fp)
  8093c4:	10800417 	ldw	r2,16(r2)
  8093c8:	e0ffff17 	ldw	r3,-4(fp)
  8093cc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8093d0:	e0bffb17 	ldw	r2,-20(fp)
  8093d4:	1080058b 	ldhu	r2,22(r2)
  8093d8:	10800044 	addi	r2,r2,1
  8093dc:	1007883a 	mov	r3,r2
  8093e0:	e0bffb17 	ldw	r2,-20(fp)
  8093e4:	10c0058d 	sth	r3,22(r2)
  8093e8:	e0bff817 	ldw	r2,-32(fp)
  8093ec:	e0bffc15 	stw	r2,-16(fp)
  8093f0:	e0bffc17 	ldw	r2,-16(fp)
  8093f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8093f8:	0005883a 	mov	r2,zero
}
  8093fc:	e037883a 	mov	sp,fp
  809400:	dfc00117 	ldw	ra,4(sp)
  809404:	df000017 	ldw	fp,0(sp)
  809408:	dec00204 	addi	sp,sp,8
  80940c:	f800283a 	ret

00809410 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  809410:	defff504 	addi	sp,sp,-44
  809414:	dfc00a15 	stw	ra,40(sp)
  809418:	df000915 	stw	fp,36(sp)
  80941c:	df000904 	addi	fp,sp,36
  809420:	e13ffd15 	stw	r4,-12(fp)
  809424:	e17ffe15 	stw	r5,-8(fp)
  809428:	3005883a 	mov	r2,r6
  80942c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809430:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809434:	e0bffd17 	ldw	r2,-12(fp)
  809438:	1000021e 	bne	r2,zero,809444 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  80943c:	00800104 	movi	r2,4
  809440:	00007106 	br	809608 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  809444:	e0bffd17 	ldw	r2,-12(fp)
  809448:	10800003 	ldbu	r2,0(r2)
  80944c:	10803fcc 	andi	r2,r2,255
  809450:	108000a0 	cmpeqi	r2,r2,2
  809454:	1000021e 	bne	r2,zero,809460 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  809458:	00800044 	movi	r2,1
  80945c:	00006a06 	br	809608 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809460:	0005303a 	rdctl	r2,status
  809464:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809468:	e0fffc17 	ldw	r3,-16(fp)
  80946c:	00bfff84 	movi	r2,-2
  809470:	1884703a 	and	r2,r3,r2
  809474:	1001703a 	wrctl	status,r2
  
  return context;
  809478:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80947c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  809480:	e0bffd17 	ldw	r2,-12(fp)
  809484:	10800283 	ldbu	r2,10(r2)
  809488:	10803fcc 	andi	r2,r2,255
  80948c:	10001d26 	beq	r2,zero,809504 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  809490:	e0bfff03 	ldbu	r2,-4(fp)
  809494:	1080004c 	andi	r2,r2,1
  809498:	10000b26 	beq	r2,zero,8094c8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80949c:	00000506 	br	8094b4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8094a0:	000f883a 	mov	r7,zero
  8094a4:	01800104 	movi	r6,4
  8094a8:	e17ffe17 	ldw	r5,-8(fp)
  8094ac:	e13ffd17 	ldw	r4,-12(fp)
  8094b0:	08055f80 	call	8055f8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8094b4:	e0bffd17 	ldw	r2,-12(fp)
  8094b8:	10800283 	ldbu	r2,10(r2)
  8094bc:	10803fcc 	andi	r2,r2,255
  8094c0:	103ff71e 	bne	r2,zero,8094a0 <__alt_mem_epcs_flash_controller_0+0xff8004a0>
  8094c4:	00000506 	br	8094dc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8094c8:	000f883a 	mov	r7,zero
  8094cc:	01800104 	movi	r6,4
  8094d0:	e17ffe17 	ldw	r5,-8(fp)
  8094d4:	e13ffd17 	ldw	r4,-12(fp)
  8094d8:	08055f80 	call	8055f8 <OS_EventTaskRdy>
  8094dc:	e0bff717 	ldw	r2,-36(fp)
  8094e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8094e4:	e0bff817 	ldw	r2,-32(fp)
  8094e8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8094ec:	e0bfff03 	ldbu	r2,-4(fp)
  8094f0:	1080010c 	andi	r2,r2,4
  8094f4:	1000011e 	bne	r2,zero,8094fc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  8094f8:	08060440 	call	806044 <OS_Sched>
        }
        return (OS_ERR_NONE);
  8094fc:	0005883a 	mov	r2,zero
  809500:	00004106 	br	809608 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  809504:	e0bffd17 	ldw	r2,-12(fp)
  809508:	10800117 	ldw	r2,4(r2)
  80950c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  809510:	e0bffa17 	ldw	r2,-24(fp)
  809514:	10c0058b 	ldhu	r3,22(r2)
  809518:	e0bffa17 	ldw	r2,-24(fp)
  80951c:	1080050b 	ldhu	r2,20(r2)
  809520:	18ffffcc 	andi	r3,r3,65535
  809524:	10bfffcc 	andi	r2,r2,65535
  809528:	18800636 	bltu	r3,r2,809544 <OSQPostOpt+0x134>
  80952c:	e0bff717 	ldw	r2,-36(fp)
  809530:	e0bff915 	stw	r2,-28(fp)
  809534:	e0bff917 	ldw	r2,-28(fp)
  809538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80953c:	00800784 	movi	r2,30
  809540:	00003106 	br	809608 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  809544:	e0bfff03 	ldbu	r2,-4(fp)
  809548:	1080008c 	andi	r2,r2,2
  80954c:	10001326 	beq	r2,zero,80959c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  809550:	e0bffa17 	ldw	r2,-24(fp)
  809554:	10c00417 	ldw	r3,16(r2)
  809558:	e0bffa17 	ldw	r2,-24(fp)
  80955c:	10800117 	ldw	r2,4(r2)
  809560:	1880041e 	bne	r3,r2,809574 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  809564:	e0bffa17 	ldw	r2,-24(fp)
  809568:	10c00217 	ldw	r3,8(r2)
  80956c:	e0bffa17 	ldw	r2,-24(fp)
  809570:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  809574:	e0bffa17 	ldw	r2,-24(fp)
  809578:	10800417 	ldw	r2,16(r2)
  80957c:	10ffff04 	addi	r3,r2,-4
  809580:	e0bffa17 	ldw	r2,-24(fp)
  809584:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  809588:	e0bffa17 	ldw	r2,-24(fp)
  80958c:	10800417 	ldw	r2,16(r2)
  809590:	e0fffe17 	ldw	r3,-8(fp)
  809594:	10c00015 	stw	r3,0(r2)
  809598:	00001006 	br	8095dc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  80959c:	e0bffa17 	ldw	r2,-24(fp)
  8095a0:	10800317 	ldw	r2,12(r2)
  8095a4:	11000104 	addi	r4,r2,4
  8095a8:	e0fffa17 	ldw	r3,-24(fp)
  8095ac:	19000315 	stw	r4,12(r3)
  8095b0:	e0fffe17 	ldw	r3,-8(fp)
  8095b4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  8095b8:	e0bffa17 	ldw	r2,-24(fp)
  8095bc:	10c00317 	ldw	r3,12(r2)
  8095c0:	e0bffa17 	ldw	r2,-24(fp)
  8095c4:	10800217 	ldw	r2,8(r2)
  8095c8:	1880041e 	bne	r3,r2,8095dc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  8095cc:	e0bffa17 	ldw	r2,-24(fp)
  8095d0:	10c00117 	ldw	r3,4(r2)
  8095d4:	e0bffa17 	ldw	r2,-24(fp)
  8095d8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8095dc:	e0bffa17 	ldw	r2,-24(fp)
  8095e0:	1080058b 	ldhu	r2,22(r2)
  8095e4:	10800044 	addi	r2,r2,1
  8095e8:	1007883a 	mov	r3,r2
  8095ec:	e0bffa17 	ldw	r2,-24(fp)
  8095f0:	10c0058d 	sth	r3,22(r2)
  8095f4:	e0bff717 	ldw	r2,-36(fp)
  8095f8:	e0bffb15 	stw	r2,-20(fp)
  8095fc:	e0bffb17 	ldw	r2,-20(fp)
  809600:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809604:	0005883a 	mov	r2,zero
}
  809608:	e037883a 	mov	sp,fp
  80960c:	dfc00117 	ldw	ra,4(sp)
  809610:	df000017 	ldw	fp,0(sp)
  809614:	dec00204 	addi	sp,sp,8
  809618:	f800283a 	ret

0080961c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  80961c:	defff604 	addi	sp,sp,-40
  809620:	df000915 	stw	fp,36(sp)
  809624:	df000904 	addi	fp,sp,36
  809628:	e13ffe15 	stw	r4,-8(fp)
  80962c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  809630:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  809634:	e0bffe17 	ldw	r2,-8(fp)
  809638:	1000021e 	bne	r2,zero,809644 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  80963c:	00800104 	movi	r2,4
  809640:	00004906 	br	809768 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  809644:	e0bfff17 	ldw	r2,-4(fp)
  809648:	1000021e 	bne	r2,zero,809654 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  80964c:	00800244 	movi	r2,9
  809650:	00004506 	br	809768 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  809654:	e0bffe17 	ldw	r2,-8(fp)
  809658:	10800003 	ldbu	r2,0(r2)
  80965c:	10803fcc 	andi	r2,r2,255
  809660:	108000a0 	cmpeqi	r2,r2,2
  809664:	1000021e 	bne	r2,zero,809670 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  809668:	00800044 	movi	r2,1
  80966c:	00003e06 	br	809768 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809670:	0005303a 	rdctl	r2,status
  809674:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809678:	e0fffd17 	ldw	r3,-12(fp)
  80967c:	00bfff84 	movi	r2,-2
  809680:	1884703a 	and	r2,r3,r2
  809684:	1001703a 	wrctl	status,r2
  
  return context;
  809688:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  80968c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  809690:	e0bffe17 	ldw	r2,-8(fp)
  809694:	10c00283 	ldbu	r3,10(r2)
  809698:	e0bfff17 	ldw	r2,-4(fp)
  80969c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  8096a0:	e0bffe17 	ldw	r2,-8(fp)
  8096a4:	108002c4 	addi	r2,r2,11
  8096a8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  8096ac:	e0bfff17 	ldw	r2,-4(fp)
  8096b0:	10800204 	addi	r2,r2,8
  8096b4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8096b8:	e03ff705 	stb	zero,-36(fp)
  8096bc:	00000b06 	br	8096ec <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  8096c0:	e0bff917 	ldw	r2,-28(fp)
  8096c4:	10c00044 	addi	r3,r2,1
  8096c8:	e0fff915 	stw	r3,-28(fp)
  8096cc:	e0fff817 	ldw	r3,-32(fp)
  8096d0:	19000044 	addi	r4,r3,1
  8096d4:	e13ff815 	stw	r4,-32(fp)
  8096d8:	18c00003 	ldbu	r3,0(r3)
  8096dc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8096e0:	e0bff703 	ldbu	r2,-36(fp)
  8096e4:	10800044 	addi	r2,r2,1
  8096e8:	e0bff705 	stb	r2,-36(fp)
  8096ec:	e0bff703 	ldbu	r2,-36(fp)
  8096f0:	108000f0 	cmpltui	r2,r2,3
  8096f4:	103ff21e 	bne	r2,zero,8096c0 <__alt_mem_epcs_flash_controller_0+0xff8006c0>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8096f8:	e0bffe17 	ldw	r2,-8(fp)
  8096fc:	10800117 	ldw	r2,4(r2)
  809700:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  809704:	e0bffc17 	ldw	r2,-16(fp)
  809708:	1080058b 	ldhu	r2,22(r2)
  80970c:	10bfffcc 	andi	r2,r2,65535
  809710:	10000626 	beq	r2,zero,80972c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  809714:	e0bffc17 	ldw	r2,-16(fp)
  809718:	10800417 	ldw	r2,16(r2)
  80971c:	10c00017 	ldw	r3,0(r2)
  809720:	e0bfff17 	ldw	r2,-4(fp)
  809724:	10c00015 	stw	r3,0(r2)
  809728:	00000206 	br	809734 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  80972c:	e0bfff17 	ldw	r2,-4(fp)
  809730:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  809734:	e0bffc17 	ldw	r2,-16(fp)
  809738:	10c0058b 	ldhu	r3,22(r2)
  80973c:	e0bfff17 	ldw	r2,-4(fp)
  809740:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  809744:	e0bffc17 	ldw	r2,-16(fp)
  809748:	10c0050b 	ldhu	r3,20(r2)
  80974c:	e0bfff17 	ldw	r2,-4(fp)
  809750:	10c0018d 	sth	r3,6(r2)
  809754:	e0bffa17 	ldw	r2,-24(fp)
  809758:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80975c:	e0bffb17 	ldw	r2,-20(fp)
  809760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809764:	0005883a 	mov	r2,zero
}
  809768:	e037883a 	mov	sp,fp
  80976c:	df000017 	ldw	fp,0(sp)
  809770:	dec00104 	addi	sp,sp,4
  809774:	f800283a 	ret

00809778 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  809778:	defffb04 	addi	sp,sp,-20
  80977c:	dfc00415 	stw	ra,16(sp)
  809780:	df000315 	stw	fp,12(sp)
  809784:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  809788:	01407804 	movi	r5,480
  80978c:	010020b4 	movhi	r4,130
  809790:	212ccf04 	addi	r4,r4,-19652
  809794:	0805f880 	call	805f88 <OS_MemClr>
    pq1 = &OSQTbl[0];
  809798:	008020b4 	movhi	r2,130
  80979c:	10accf04 	addi	r2,r2,-19652
  8097a0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  8097a4:	008020b4 	movhi	r2,130
  8097a8:	10acd504 	addi	r2,r2,-19628
  8097ac:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8097b0:	e03ffd0d 	sth	zero,-12(fp)
  8097b4:	00000c06 	br	8097e8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  8097b8:	e0bffe17 	ldw	r2,-8(fp)
  8097bc:	e0ffff17 	ldw	r3,-4(fp)
  8097c0:	10c00015 	stw	r3,0(r2)
        pq1++;
  8097c4:	e0bffe17 	ldw	r2,-8(fp)
  8097c8:	10800604 	addi	r2,r2,24
  8097cc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  8097d0:	e0bfff17 	ldw	r2,-4(fp)
  8097d4:	10800604 	addi	r2,r2,24
  8097d8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8097dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8097e0:	10800044 	addi	r2,r2,1
  8097e4:	e0bffd0d 	sth	r2,-12(fp)
  8097e8:	e0bffd0b 	ldhu	r2,-12(fp)
  8097ec:	108004f0 	cmpltui	r2,r2,19
  8097f0:	103ff11e 	bne	r2,zero,8097b8 <__alt_mem_epcs_flash_controller_0+0xff8007b8>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8097f4:	e0bffe17 	ldw	r2,-8(fp)
  8097f8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8097fc:	008020b4 	movhi	r2,130
  809800:	10accf04 	addi	r2,r2,-19652
  809804:	d0a09d15 	stw	r2,-32140(gp)
#endif
}
  809808:	0001883a 	nop
  80980c:	e037883a 	mov	sp,fp
  809810:	dfc00117 	ldw	ra,4(sp)
  809814:	df000017 	ldw	fp,0(sp)
  809818:	dec00204 	addi	sp,sp,8
  80981c:	f800283a 	ret

00809820 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  809820:	defffa04 	addi	sp,sp,-24
  809824:	df000515 	stw	fp,20(sp)
  809828:	df000504 	addi	fp,sp,20
  80982c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809830:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809834:	e0bfff17 	ldw	r2,-4(fp)
  809838:	1000021e 	bne	r2,zero,809844 <OSSemAccept+0x24>
        return (0);
  80983c:	0005883a 	mov	r2,zero
  809840:	00001f06 	br	8098c0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809844:	e0bfff17 	ldw	r2,-4(fp)
  809848:	10800003 	ldbu	r2,0(r2)
  80984c:	10803fcc 	andi	r2,r2,255
  809850:	108000e0 	cmpeqi	r2,r2,3
  809854:	1000021e 	bne	r2,zero,809860 <OSSemAccept+0x40>
        return (0);
  809858:	0005883a 	mov	r2,zero
  80985c:	00001806 	br	8098c0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809860:	0005303a 	rdctl	r2,status
  809864:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809868:	e0fffe17 	ldw	r3,-8(fp)
  80986c:	00bfff84 	movi	r2,-2
  809870:	1884703a 	and	r2,r3,r2
  809874:	1001703a 	wrctl	status,r2
  
  return context;
  809878:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  80987c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  809880:	e0bfff17 	ldw	r2,-4(fp)
  809884:	1080020b 	ldhu	r2,8(r2)
  809888:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  80988c:	e0bffd0b 	ldhu	r2,-12(fp)
  809890:	10000626 	beq	r2,zero,8098ac <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  809894:	e0bfff17 	ldw	r2,-4(fp)
  809898:	1080020b 	ldhu	r2,8(r2)
  80989c:	10bfffc4 	addi	r2,r2,-1
  8098a0:	1007883a 	mov	r3,r2
  8098a4:	e0bfff17 	ldw	r2,-4(fp)
  8098a8:	10c0020d 	sth	r3,8(r2)
  8098ac:	e0bffb17 	ldw	r2,-20(fp)
  8098b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8098b4:	e0bffc17 	ldw	r2,-16(fp)
  8098b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  8098bc:	e0bffd0b 	ldhu	r2,-12(fp)
}
  8098c0:	e037883a 	mov	sp,fp
  8098c4:	df000017 	ldw	fp,0(sp)
  8098c8:	dec00104 	addi	sp,sp,4
  8098cc:	f800283a 	ret

008098d0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  8098d0:	defff904 	addi	sp,sp,-28
  8098d4:	dfc00615 	stw	ra,24(sp)
  8098d8:	df000515 	stw	fp,20(sp)
  8098dc:	df000504 	addi	fp,sp,20
  8098e0:	2005883a 	mov	r2,r4
  8098e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8098e8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8098ec:	d0a0a003 	ldbu	r2,-32128(gp)
  8098f0:	10803fcc 	andi	r2,r2,255
  8098f4:	10000226 	beq	r2,zero,809900 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8098f8:	0005883a 	mov	r2,zero
  8098fc:	00002506 	br	809994 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809900:	0005303a 	rdctl	r2,status
  809904:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809908:	e0fffe17 	ldw	r3,-8(fp)
  80990c:	00bfff84 	movi	r2,-2
  809910:	1884703a 	and	r2,r3,r2
  809914:	1001703a 	wrctl	status,r2
  
  return context;
  809918:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  80991c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  809920:	d0a09f17 	ldw	r2,-32132(gp)
  809924:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  809928:	d0a09f17 	ldw	r2,-32132(gp)
  80992c:	10000326 	beq	r2,zero,80993c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  809930:	d0a09f17 	ldw	r2,-32132(gp)
  809934:	10800117 	ldw	r2,4(r2)
  809938:	d0a09f15 	stw	r2,-32132(gp)
  80993c:	e0bffb17 	ldw	r2,-20(fp)
  809940:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809944:	e0bffc17 	ldw	r2,-16(fp)
  809948:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  80994c:	e0bffd17 	ldw	r2,-12(fp)
  809950:	10000f26 	beq	r2,zero,809990 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  809954:	e0bffd17 	ldw	r2,-12(fp)
  809958:	00c000c4 	movi	r3,3
  80995c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  809960:	e0bffd17 	ldw	r2,-12(fp)
  809964:	e0ffff0b 	ldhu	r3,-4(fp)
  809968:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  80996c:	e0bffd17 	ldw	r2,-12(fp)
  809970:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  809974:	e0bffd17 	ldw	r2,-12(fp)
  809978:	00c00fc4 	movi	r3,63
  80997c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  809980:	e0bffd17 	ldw	r2,-12(fp)
  809984:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  809988:	e13ffd17 	ldw	r4,-12(fp)
  80998c:	0805ba80 	call	805ba8 <OS_EventWaitListInit>
    }
    return (pevent);
  809990:	e0bffd17 	ldw	r2,-12(fp)
}
  809994:	e037883a 	mov	sp,fp
  809998:	dfc00117 	ldw	ra,4(sp)
  80999c:	df000017 	ldw	fp,0(sp)
  8099a0:	dec00204 	addi	sp,sp,8
  8099a4:	f800283a 	ret

008099a8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8099a8:	defff304 	addi	sp,sp,-52
  8099ac:	dfc00c15 	stw	ra,48(sp)
  8099b0:	df000b15 	stw	fp,44(sp)
  8099b4:	df000b04 	addi	fp,sp,44
  8099b8:	e13ffd15 	stw	r4,-12(fp)
  8099bc:	2805883a 	mov	r2,r5
  8099c0:	e1bfff15 	stw	r6,-4(fp)
  8099c4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8099c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8099cc:	e0bfff17 	ldw	r2,-4(fp)
  8099d0:	1000021e 	bne	r2,zero,8099dc <OSSemDel+0x34>
        return (pevent);
  8099d4:	e0bffd17 	ldw	r2,-12(fp)
  8099d8:	00007e06 	br	809bd4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8099dc:	e0bffd17 	ldw	r2,-12(fp)
  8099e0:	1000051e 	bne	r2,zero,8099f8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8099e4:	e0bfff17 	ldw	r2,-4(fp)
  8099e8:	00c00104 	movi	r3,4
  8099ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8099f0:	e0bffd17 	ldw	r2,-12(fp)
  8099f4:	00007706 	br	809bd4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8099f8:	e0bffd17 	ldw	r2,-12(fp)
  8099fc:	10800003 	ldbu	r2,0(r2)
  809a00:	10803fcc 	andi	r2,r2,255
  809a04:	108000e0 	cmpeqi	r2,r2,3
  809a08:	1000051e 	bne	r2,zero,809a20 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  809a0c:	e0bfff17 	ldw	r2,-4(fp)
  809a10:	00c00044 	movi	r3,1
  809a14:	10c00005 	stb	r3,0(r2)
        return (pevent);
  809a18:	e0bffd17 	ldw	r2,-12(fp)
  809a1c:	00006d06 	br	809bd4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  809a20:	d0a0a003 	ldbu	r2,-32128(gp)
  809a24:	10803fcc 	andi	r2,r2,255
  809a28:	10000526 	beq	r2,zero,809a40 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  809a2c:	e0bfff17 	ldw	r2,-4(fp)
  809a30:	00c003c4 	movi	r3,15
  809a34:	10c00005 	stb	r3,0(r2)
        return (pevent);
  809a38:	e0bffd17 	ldw	r2,-12(fp)
  809a3c:	00006506 	br	809bd4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809a40:	0005303a 	rdctl	r2,status
  809a44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809a48:	e0fffc17 	ldw	r3,-16(fp)
  809a4c:	00bfff84 	movi	r2,-2
  809a50:	1884703a 	and	r2,r3,r2
  809a54:	1001703a 	wrctl	status,r2
  
  return context;
  809a58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809a5c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  809a60:	e0bffd17 	ldw	r2,-12(fp)
  809a64:	10800283 	ldbu	r2,10(r2)
  809a68:	10803fcc 	andi	r2,r2,255
  809a6c:	10000326 	beq	r2,zero,809a7c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  809a70:	00800044 	movi	r2,1
  809a74:	e0bff505 	stb	r2,-44(fp)
  809a78:	00000106 	br	809a80 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  809a7c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  809a80:	e0bffe03 	ldbu	r2,-8(fp)
  809a84:	10000326 	beq	r2,zero,809a94 <OSSemDel+0xec>
  809a88:	10800060 	cmpeqi	r2,r2,1
  809a8c:	1000281e 	bne	r2,zero,809b30 <OSSemDel+0x188>
  809a90:	00004506 	br	809ba8 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  809a94:	e0bff503 	ldbu	r2,-44(fp)
  809a98:	1000161e 	bne	r2,zero,809af4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  809a9c:	e0bffd17 	ldw	r2,-12(fp)
  809aa0:	00c00fc4 	movi	r3,63
  809aa4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  809aa8:	e0bffd17 	ldw	r2,-12(fp)
  809aac:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  809ab0:	e0bffd17 	ldw	r2,-12(fp)
  809ab4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  809ab8:	d0e09f17 	ldw	r3,-32132(gp)
  809abc:	e0bffd17 	ldw	r2,-12(fp)
  809ac0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  809ac4:	e0bffd17 	ldw	r2,-12(fp)
  809ac8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  809acc:	e0bffd17 	ldw	r2,-12(fp)
  809ad0:	d0a09f15 	stw	r2,-32132(gp)
  809ad4:	e0bff717 	ldw	r2,-36(fp)
  809ad8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809adc:	e0bff817 	ldw	r2,-32(fp)
  809ae0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  809ae4:	e0bfff17 	ldw	r2,-4(fp)
  809ae8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  809aec:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  809af0:	00003706 	br	809bd0 <OSSemDel+0x228>
  809af4:	e0bff717 	ldw	r2,-36(fp)
  809af8:	e0bff915 	stw	r2,-28(fp)
  809afc:	e0bff917 	ldw	r2,-28(fp)
  809b00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  809b04:	e0bfff17 	ldw	r2,-4(fp)
  809b08:	00c01244 	movi	r3,73
  809b0c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  809b10:	e0bffd17 	ldw	r2,-12(fp)
  809b14:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  809b18:	00002d06 	br	809bd0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  809b1c:	000f883a 	mov	r7,zero
  809b20:	01800044 	movi	r6,1
  809b24:	000b883a 	mov	r5,zero
  809b28:	e13ffd17 	ldw	r4,-12(fp)
  809b2c:	08055f80 	call	8055f8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  809b30:	e0bffd17 	ldw	r2,-12(fp)
  809b34:	10800283 	ldbu	r2,10(r2)
  809b38:	10803fcc 	andi	r2,r2,255
  809b3c:	103ff71e 	bne	r2,zero,809b1c <__alt_mem_epcs_flash_controller_0+0xff800b1c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  809b40:	e0bffd17 	ldw	r2,-12(fp)
  809b44:	00c00fc4 	movi	r3,63
  809b48:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  809b4c:	e0bffd17 	ldw	r2,-12(fp)
  809b50:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  809b54:	e0bffd17 	ldw	r2,-12(fp)
  809b58:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  809b5c:	d0e09f17 	ldw	r3,-32132(gp)
  809b60:	e0bffd17 	ldw	r2,-12(fp)
  809b64:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  809b68:	e0bffd17 	ldw	r2,-12(fp)
  809b6c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  809b70:	e0bffd17 	ldw	r2,-12(fp)
  809b74:	d0a09f15 	stw	r2,-32132(gp)
  809b78:	e0bff717 	ldw	r2,-36(fp)
  809b7c:	e0bffa15 	stw	r2,-24(fp)
  809b80:	e0bffa17 	ldw	r2,-24(fp)
  809b84:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  809b88:	e0bff503 	ldbu	r2,-44(fp)
  809b8c:	10800058 	cmpnei	r2,r2,1
  809b90:	1000011e 	bne	r2,zero,809b98 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  809b94:	08060440 	call	806044 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  809b98:	e0bfff17 	ldw	r2,-4(fp)
  809b9c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  809ba0:	e03ff615 	stw	zero,-40(fp)
             break;
  809ba4:	00000a06 	br	809bd0 <OSSemDel+0x228>
  809ba8:	e0bff717 	ldw	r2,-36(fp)
  809bac:	e0bffb15 	stw	r2,-20(fp)
  809bb0:	e0bffb17 	ldw	r2,-20(fp)
  809bb4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  809bb8:	e0bfff17 	ldw	r2,-4(fp)
  809bbc:	00c001c4 	movi	r3,7
  809bc0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  809bc4:	e0bffd17 	ldw	r2,-12(fp)
  809bc8:	e0bff615 	stw	r2,-40(fp)
             break;
  809bcc:	0001883a 	nop
    }
    return (pevent_return);
  809bd0:	e0bff617 	ldw	r2,-40(fp)
}
  809bd4:	e037883a 	mov	sp,fp
  809bd8:	dfc00117 	ldw	ra,4(sp)
  809bdc:	df000017 	ldw	fp,0(sp)
  809be0:	dec00204 	addi	sp,sp,8
  809be4:	f800283a 	ret

00809be8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  809be8:	defff504 	addi	sp,sp,-44
  809bec:	dfc00a15 	stw	ra,40(sp)
  809bf0:	df000915 	stw	fp,36(sp)
  809bf4:	df000904 	addi	fp,sp,36
  809bf8:	e13ffd15 	stw	r4,-12(fp)
  809bfc:	2805883a 	mov	r2,r5
  809c00:	e1bfff15 	stw	r6,-4(fp)
  809c04:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809c08:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809c0c:	e0bfff17 	ldw	r2,-4(fp)
  809c10:	10007226 	beq	r2,zero,809ddc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809c14:	e0bffd17 	ldw	r2,-12(fp)
  809c18:	1000041e 	bne	r2,zero,809c2c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  809c1c:	e0bfff17 	ldw	r2,-4(fp)
  809c20:	00c00104 	movi	r3,4
  809c24:	10c00005 	stb	r3,0(r2)
        return;
  809c28:	00006d06 	br	809de0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809c2c:	e0bffd17 	ldw	r2,-12(fp)
  809c30:	10800003 	ldbu	r2,0(r2)
  809c34:	10803fcc 	andi	r2,r2,255
  809c38:	108000e0 	cmpeqi	r2,r2,3
  809c3c:	1000041e 	bne	r2,zero,809c50 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  809c40:	e0bfff17 	ldw	r2,-4(fp)
  809c44:	00c00044 	movi	r3,1
  809c48:	10c00005 	stb	r3,0(r2)
        return;
  809c4c:	00006406 	br	809de0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  809c50:	d0a0a003 	ldbu	r2,-32128(gp)
  809c54:	10803fcc 	andi	r2,r2,255
  809c58:	10000426 	beq	r2,zero,809c6c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  809c5c:	e0bfff17 	ldw	r2,-4(fp)
  809c60:	00c00084 	movi	r3,2
  809c64:	10c00005 	stb	r3,0(r2)
        return;
  809c68:	00005d06 	br	809de0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  809c6c:	d0a09203 	ldbu	r2,-32184(gp)
  809c70:	10803fcc 	andi	r2,r2,255
  809c74:	10000426 	beq	r2,zero,809c88 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  809c78:	e0bfff17 	ldw	r2,-4(fp)
  809c7c:	00c00344 	movi	r3,13
  809c80:	10c00005 	stb	r3,0(r2)
        return;
  809c84:	00005606 	br	809de0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809c88:	0005303a 	rdctl	r2,status
  809c8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809c90:	e0fffc17 	ldw	r3,-16(fp)
  809c94:	00bfff84 	movi	r2,-2
  809c98:	1884703a 	and	r2,r3,r2
  809c9c:	1001703a 	wrctl	status,r2
  
  return context;
  809ca0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809ca4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  809ca8:	e0bffd17 	ldw	r2,-12(fp)
  809cac:	1080020b 	ldhu	r2,8(r2)
  809cb0:	10bfffcc 	andi	r2,r2,65535
  809cb4:	10000d26 	beq	r2,zero,809cec <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  809cb8:	e0bffd17 	ldw	r2,-12(fp)
  809cbc:	1080020b 	ldhu	r2,8(r2)
  809cc0:	10bfffc4 	addi	r2,r2,-1
  809cc4:	1007883a 	mov	r3,r2
  809cc8:	e0bffd17 	ldw	r2,-12(fp)
  809ccc:	10c0020d 	sth	r3,8(r2)
  809cd0:	e0bff717 	ldw	r2,-36(fp)
  809cd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809cd8:	e0bff817 	ldw	r2,-32(fp)
  809cdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  809ce0:	e0bfff17 	ldw	r2,-4(fp)
  809ce4:	10000005 	stb	zero,0(r2)
        return;
  809ce8:	00003d06 	br	809de0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  809cec:	d0a0a117 	ldw	r2,-32124(gp)
  809cf0:	d0e0a117 	ldw	r3,-32124(gp)
  809cf4:	18c00c03 	ldbu	r3,48(r3)
  809cf8:	18c00054 	ori	r3,r3,1
  809cfc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  809d00:	d0a0a117 	ldw	r2,-32124(gp)
  809d04:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  809d08:	d0a0a117 	ldw	r2,-32124(gp)
  809d0c:	e0fffe0b 	ldhu	r3,-8(fp)
  809d10:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  809d14:	e13ffd17 	ldw	r4,-12(fp)
  809d18:	08057900 	call	805790 <OS_EventTaskWait>
  809d1c:	e0bff717 	ldw	r2,-36(fp)
  809d20:	e0bffb15 	stw	r2,-20(fp)
  809d24:	e0bffb17 	ldw	r2,-20(fp)
  809d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  809d2c:	08060440 	call	806044 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809d30:	0005303a 	rdctl	r2,status
  809d34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809d38:	e0fff917 	ldw	r3,-28(fp)
  809d3c:	00bfff84 	movi	r2,-2
  809d40:	1884703a 	and	r2,r3,r2
  809d44:	1001703a 	wrctl	status,r2
  
  return context;
  809d48:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  809d4c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  809d50:	d0a0a117 	ldw	r2,-32124(gp)
  809d54:	10800c43 	ldbu	r2,49(r2)
  809d58:	10803fcc 	andi	r2,r2,255
  809d5c:	10000326 	beq	r2,zero,809d6c <OSSemPend+0x184>
  809d60:	108000a0 	cmpeqi	r2,r2,2
  809d64:	1000041e 	bne	r2,zero,809d78 <OSSemPend+0x190>
  809d68:	00000706 	br	809d88 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  809d6c:	e0bfff17 	ldw	r2,-4(fp)
  809d70:	10000005 	stb	zero,0(r2)
             break;
  809d74:	00000c06 	br	809da8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  809d78:	e0bfff17 	ldw	r2,-4(fp)
  809d7c:	00c00384 	movi	r3,14
  809d80:	10c00005 	stb	r3,0(r2)
             break;
  809d84:	00000806 	br	809da8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  809d88:	d0a0a117 	ldw	r2,-32124(gp)
  809d8c:	e17ffd17 	ldw	r5,-12(fp)
  809d90:	1009883a 	mov	r4,r2
  809d94:	08059f00 	call	8059f0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  809d98:	e0bfff17 	ldw	r2,-4(fp)
  809d9c:	00c00284 	movi	r3,10
  809da0:	10c00005 	stb	r3,0(r2)
             break;
  809da4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  809da8:	d0a0a117 	ldw	r2,-32124(gp)
  809dac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  809db0:	d0a0a117 	ldw	r2,-32124(gp)
  809db4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  809db8:	d0a0a117 	ldw	r2,-32124(gp)
  809dbc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  809dc0:	d0a0a117 	ldw	r2,-32124(gp)
  809dc4:	10000815 	stw	zero,32(r2)
  809dc8:	e0bff717 	ldw	r2,-36(fp)
  809dcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809dd0:	e0bffa17 	ldw	r2,-24(fp)
  809dd4:	1001703a 	wrctl	status,r2
  809dd8:	00000106 	br	809de0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  809ddc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  809de0:	e037883a 	mov	sp,fp
  809de4:	dfc00117 	ldw	ra,4(sp)
  809de8:	df000017 	ldw	fp,0(sp)
  809dec:	dec00204 	addi	sp,sp,8
  809df0:	f800283a 	ret

00809df4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  809df4:	defff604 	addi	sp,sp,-40
  809df8:	dfc00915 	stw	ra,36(sp)
  809dfc:	df000815 	stw	fp,32(sp)
  809e00:	df000804 	addi	fp,sp,32
  809e04:	e13ffd15 	stw	r4,-12(fp)
  809e08:	2805883a 	mov	r2,r5
  809e0c:	e1bfff15 	stw	r6,-4(fp)
  809e10:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809e14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809e18:	e0bfff17 	ldw	r2,-4(fp)
  809e1c:	1000021e 	bne	r2,zero,809e28 <OSSemPendAbort+0x34>
        return (0);
  809e20:	0005883a 	mov	r2,zero
  809e24:	00004906 	br	809f4c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809e28:	e0bffd17 	ldw	r2,-12(fp)
  809e2c:	1000051e 	bne	r2,zero,809e44 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  809e30:	e0bfff17 	ldw	r2,-4(fp)
  809e34:	00c00104 	movi	r3,4
  809e38:	10c00005 	stb	r3,0(r2)
        return (0);
  809e3c:	0005883a 	mov	r2,zero
  809e40:	00004206 	br	809f4c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809e44:	e0bffd17 	ldw	r2,-12(fp)
  809e48:	10800003 	ldbu	r2,0(r2)
  809e4c:	10803fcc 	andi	r2,r2,255
  809e50:	108000e0 	cmpeqi	r2,r2,3
  809e54:	1000051e 	bne	r2,zero,809e6c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  809e58:	e0bfff17 	ldw	r2,-4(fp)
  809e5c:	00c00044 	movi	r3,1
  809e60:	10c00005 	stb	r3,0(r2)
        return (0);
  809e64:	0005883a 	mov	r2,zero
  809e68:	00003806 	br	809f4c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809e6c:	0005303a 	rdctl	r2,status
  809e70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809e74:	e0fffc17 	ldw	r3,-16(fp)
  809e78:	00bfff84 	movi	r2,-2
  809e7c:	1884703a 	and	r2,r3,r2
  809e80:	1001703a 	wrctl	status,r2
  
  return context;
  809e84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809e88:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  809e8c:	e0bffd17 	ldw	r2,-12(fp)
  809e90:	10800283 	ldbu	r2,10(r2)
  809e94:	10803fcc 	andi	r2,r2,255
  809e98:	10002526 	beq	r2,zero,809f30 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  809e9c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  809ea0:	e0bffe03 	ldbu	r2,-8(fp)
  809ea4:	10800060 	cmpeqi	r2,r2,1
  809ea8:	10000e26 	beq	r2,zero,809ee4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  809eac:	00000806 	br	809ed0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  809eb0:	01c00084 	movi	r7,2
  809eb4:	01800044 	movi	r6,1
  809eb8:	000b883a 	mov	r5,zero
  809ebc:	e13ffd17 	ldw	r4,-12(fp)
  809ec0:	08055f80 	call	8055f8 <OS_EventTaskRdy>
                     nbr_tasks++;
  809ec4:	e0bff803 	ldbu	r2,-32(fp)
  809ec8:	10800044 	addi	r2,r2,1
  809ecc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  809ed0:	e0bffd17 	ldw	r2,-12(fp)
  809ed4:	10800283 	ldbu	r2,10(r2)
  809ed8:	10803fcc 	andi	r2,r2,255
  809edc:	103ff41e 	bne	r2,zero,809eb0 <__alt_mem_epcs_flash_controller_0+0xff800eb0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  809ee0:	00000906 	br	809f08 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  809ee4:	01c00084 	movi	r7,2
  809ee8:	01800044 	movi	r6,1
  809eec:	000b883a 	mov	r5,zero
  809ef0:	e13ffd17 	ldw	r4,-12(fp)
  809ef4:	08055f80 	call	8055f8 <OS_EventTaskRdy>
                 nbr_tasks++;
  809ef8:	e0bff803 	ldbu	r2,-32(fp)
  809efc:	10800044 	addi	r2,r2,1
  809f00:	e0bff805 	stb	r2,-32(fp)
                 break;
  809f04:	0001883a 	nop
  809f08:	e0bff917 	ldw	r2,-28(fp)
  809f0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809f10:	e0bffa17 	ldw	r2,-24(fp)
  809f14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  809f18:	08060440 	call	806044 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  809f1c:	e0bfff17 	ldw	r2,-4(fp)
  809f20:	00c00384 	movi	r3,14
  809f24:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  809f28:	e0bff803 	ldbu	r2,-32(fp)
  809f2c:	00000706 	br	809f4c <OSSemPendAbort+0x158>
  809f30:	e0bff917 	ldw	r2,-28(fp)
  809f34:	e0bffb15 	stw	r2,-20(fp)
  809f38:	e0bffb17 	ldw	r2,-20(fp)
  809f3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  809f40:	e0bfff17 	ldw	r2,-4(fp)
  809f44:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  809f48:	0005883a 	mov	r2,zero
}
  809f4c:	e037883a 	mov	sp,fp
  809f50:	dfc00117 	ldw	ra,4(sp)
  809f54:	df000017 	ldw	fp,0(sp)
  809f58:	dec00204 	addi	sp,sp,8
  809f5c:	f800283a 	ret

00809f60 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  809f60:	defff804 	addi	sp,sp,-32
  809f64:	dfc00715 	stw	ra,28(sp)
  809f68:	df000615 	stw	fp,24(sp)
  809f6c:	df000604 	addi	fp,sp,24
  809f70:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809f74:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809f78:	e0bfff17 	ldw	r2,-4(fp)
  809f7c:	1000021e 	bne	r2,zero,809f88 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  809f80:	00800104 	movi	r2,4
  809f84:	00003506 	br	80a05c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809f88:	e0bfff17 	ldw	r2,-4(fp)
  809f8c:	10800003 	ldbu	r2,0(r2)
  809f90:	10803fcc 	andi	r2,r2,255
  809f94:	108000e0 	cmpeqi	r2,r2,3
  809f98:	1000021e 	bne	r2,zero,809fa4 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  809f9c:	00800044 	movi	r2,1
  809fa0:	00002e06 	br	80a05c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809fa4:	0005303a 	rdctl	r2,status
  809fa8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809fac:	e0fffe17 	ldw	r3,-8(fp)
  809fb0:	00bfff84 	movi	r2,-2
  809fb4:	1884703a 	and	r2,r3,r2
  809fb8:	1001703a 	wrctl	status,r2
  
  return context;
  809fbc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  809fc0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  809fc4:	e0bfff17 	ldw	r2,-4(fp)
  809fc8:	10800283 	ldbu	r2,10(r2)
  809fcc:	10803fcc 	andi	r2,r2,255
  809fd0:	10000c26 	beq	r2,zero,80a004 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  809fd4:	000f883a 	mov	r7,zero
  809fd8:	01800044 	movi	r6,1
  809fdc:	000b883a 	mov	r5,zero
  809fe0:	e13fff17 	ldw	r4,-4(fp)
  809fe4:	08055f80 	call	8055f8 <OS_EventTaskRdy>
  809fe8:	e0bffa17 	ldw	r2,-24(fp)
  809fec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809ff0:	e0bffb17 	ldw	r2,-20(fp)
  809ff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  809ff8:	08060440 	call	806044 <OS_Sched>
        return (OS_ERR_NONE);
  809ffc:	0005883a 	mov	r2,zero
  80a000:	00001606 	br	80a05c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  80a004:	e0bfff17 	ldw	r2,-4(fp)
  80a008:	1080020b 	ldhu	r2,8(r2)
  80a00c:	10ffffcc 	andi	r3,r2,65535
  80a010:	00bfffd4 	movui	r2,65535
  80a014:	18800c26 	beq	r3,r2,80a048 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  80a018:	e0bfff17 	ldw	r2,-4(fp)
  80a01c:	1080020b 	ldhu	r2,8(r2)
  80a020:	10800044 	addi	r2,r2,1
  80a024:	1007883a 	mov	r3,r2
  80a028:	e0bfff17 	ldw	r2,-4(fp)
  80a02c:	10c0020d 	sth	r3,8(r2)
  80a030:	e0bffa17 	ldw	r2,-24(fp)
  80a034:	e0bffc15 	stw	r2,-16(fp)
  80a038:	e0bffc17 	ldw	r2,-16(fp)
  80a03c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80a040:	0005883a 	mov	r2,zero
  80a044:	00000506 	br	80a05c <OSSemPost+0xfc>
  80a048:	e0bffa17 	ldw	r2,-24(fp)
  80a04c:	e0bffd15 	stw	r2,-12(fp)
  80a050:	e0bffd17 	ldw	r2,-12(fp)
  80a054:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  80a058:	00800c84 	movi	r2,50
}
  80a05c:	e037883a 	mov	sp,fp
  80a060:	dfc00117 	ldw	ra,4(sp)
  80a064:	df000017 	ldw	fp,0(sp)
  80a068:	dec00204 	addi	sp,sp,8
  80a06c:	f800283a 	ret

0080a070 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  80a070:	defff704 	addi	sp,sp,-36
  80a074:	df000815 	stw	fp,32(sp)
  80a078:	df000804 	addi	fp,sp,32
  80a07c:	e13ffe15 	stw	r4,-8(fp)
  80a080:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80a084:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80a088:	e0bffe17 	ldw	r2,-8(fp)
  80a08c:	1000021e 	bne	r2,zero,80a098 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  80a090:	00800104 	movi	r2,4
  80a094:	00003606 	br	80a170 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  80a098:	e0bfff17 	ldw	r2,-4(fp)
  80a09c:	1000021e 	bne	r2,zero,80a0a8 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  80a0a0:	00800244 	movi	r2,9
  80a0a4:	00003206 	br	80a170 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80a0a8:	e0bffe17 	ldw	r2,-8(fp)
  80a0ac:	10800003 	ldbu	r2,0(r2)
  80a0b0:	10803fcc 	andi	r2,r2,255
  80a0b4:	108000e0 	cmpeqi	r2,r2,3
  80a0b8:	1000021e 	bne	r2,zero,80a0c4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  80a0bc:	00800044 	movi	r2,1
  80a0c0:	00002b06 	br	80a170 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a0c4:	0005303a 	rdctl	r2,status
  80a0c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a0cc:	e0fffd17 	ldw	r3,-12(fp)
  80a0d0:	00bfff84 	movi	r2,-2
  80a0d4:	1884703a 	and	r2,r3,r2
  80a0d8:	1001703a 	wrctl	status,r2
  
  return context;
  80a0dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  80a0e0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  80a0e4:	e0bffe17 	ldw	r2,-8(fp)
  80a0e8:	10c00283 	ldbu	r3,10(r2)
  80a0ec:	e0bfff17 	ldw	r2,-4(fp)
  80a0f0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  80a0f4:	e0bffe17 	ldw	r2,-8(fp)
  80a0f8:	108002c4 	addi	r2,r2,11
  80a0fc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  80a100:	e0bfff17 	ldw	r2,-4(fp)
  80a104:	10800084 	addi	r2,r2,2
  80a108:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80a10c:	e03ffa05 	stb	zero,-24(fp)
  80a110:	00000b06 	br	80a140 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  80a114:	e0bff917 	ldw	r2,-28(fp)
  80a118:	10c00044 	addi	r3,r2,1
  80a11c:	e0fff915 	stw	r3,-28(fp)
  80a120:	e0fff817 	ldw	r3,-32(fp)
  80a124:	19000044 	addi	r4,r3,1
  80a128:	e13ff815 	stw	r4,-32(fp)
  80a12c:	18c00003 	ldbu	r3,0(r3)
  80a130:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80a134:	e0bffa03 	ldbu	r2,-24(fp)
  80a138:	10800044 	addi	r2,r2,1
  80a13c:	e0bffa05 	stb	r2,-24(fp)
  80a140:	e0bffa03 	ldbu	r2,-24(fp)
  80a144:	108000f0 	cmpltui	r2,r2,3
  80a148:	103ff21e 	bne	r2,zero,80a114 <__alt_mem_epcs_flash_controller_0+0xff801114>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  80a14c:	e0bffe17 	ldw	r2,-8(fp)
  80a150:	10c0020b 	ldhu	r3,8(r2)
  80a154:	e0bfff17 	ldw	r2,-4(fp)
  80a158:	10c0000d 	sth	r3,0(r2)
  80a15c:	e0bffb17 	ldw	r2,-20(fp)
  80a160:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a164:	e0bffc17 	ldw	r2,-16(fp)
  80a168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80a16c:	0005883a 	mov	r2,zero
}
  80a170:	e037883a 	mov	sp,fp
  80a174:	df000017 	ldw	fp,0(sp)
  80a178:	dec00104 	addi	sp,sp,4
  80a17c:	f800283a 	ret

0080a180 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  80a180:	defff904 	addi	sp,sp,-28
  80a184:	df000615 	stw	fp,24(sp)
  80a188:	df000604 	addi	fp,sp,24
  80a18c:	e13ffd15 	stw	r4,-12(fp)
  80a190:	2805883a 	mov	r2,r5
  80a194:	e1bfff15 	stw	r6,-4(fp)
  80a198:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80a19c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80a1a0:	e0bfff17 	ldw	r2,-4(fp)
  80a1a4:	10003126 	beq	r2,zero,80a26c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80a1a8:	e0bffd17 	ldw	r2,-12(fp)
  80a1ac:	1000041e 	bne	r2,zero,80a1c0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80a1b0:	e0bfff17 	ldw	r2,-4(fp)
  80a1b4:	00c00104 	movi	r3,4
  80a1b8:	10c00005 	stb	r3,0(r2)
        return;
  80a1bc:	00002c06 	br	80a270 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80a1c0:	e0bffd17 	ldw	r2,-12(fp)
  80a1c4:	10800003 	ldbu	r2,0(r2)
  80a1c8:	10803fcc 	andi	r2,r2,255
  80a1cc:	108000e0 	cmpeqi	r2,r2,3
  80a1d0:	1000041e 	bne	r2,zero,80a1e4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  80a1d4:	e0bfff17 	ldw	r2,-4(fp)
  80a1d8:	00c00044 	movi	r3,1
  80a1dc:	10c00005 	stb	r3,0(r2)
        return;
  80a1e0:	00002306 	br	80a270 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a1e4:	0005303a 	rdctl	r2,status
  80a1e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a1ec:	e0fffc17 	ldw	r3,-16(fp)
  80a1f0:	00bfff84 	movi	r2,-2
  80a1f4:	1884703a 	and	r2,r3,r2
  80a1f8:	1001703a 	wrctl	status,r2
  
  return context;
  80a1fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80a200:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  80a204:	e0bfff17 	ldw	r2,-4(fp)
  80a208:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  80a20c:	e0bffd17 	ldw	r2,-12(fp)
  80a210:	1080020b 	ldhu	r2,8(r2)
  80a214:	10bfffcc 	andi	r2,r2,65535
  80a218:	10000426 	beq	r2,zero,80a22c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  80a21c:	e0bffd17 	ldw	r2,-12(fp)
  80a220:	e0fffe0b 	ldhu	r3,-8(fp)
  80a224:	10c0020d 	sth	r3,8(r2)
  80a228:	00000b06 	br	80a258 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  80a22c:	e0bffd17 	ldw	r2,-12(fp)
  80a230:	10800283 	ldbu	r2,10(r2)
  80a234:	10803fcc 	andi	r2,r2,255
  80a238:	1000041e 	bne	r2,zero,80a24c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  80a23c:	e0bffd17 	ldw	r2,-12(fp)
  80a240:	e0fffe0b 	ldhu	r3,-8(fp)
  80a244:	10c0020d 	sth	r3,8(r2)
  80a248:	00000306 	br	80a258 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  80a24c:	e0bfff17 	ldw	r2,-4(fp)
  80a250:	00c01244 	movi	r3,73
  80a254:	10c00005 	stb	r3,0(r2)
  80a258:	e0bffa17 	ldw	r2,-24(fp)
  80a25c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a260:	e0bffb17 	ldw	r2,-20(fp)
  80a264:	1001703a 	wrctl	status,r2
  80a268:	00000106 	br	80a270 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  80a26c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  80a270:	e037883a 	mov	sp,fp
  80a274:	df000017 	ldw	fp,0(sp)
  80a278:	dec00104 	addi	sp,sp,4
  80a27c:	f800283a 	ret

0080a280 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  80a280:	defff104 	addi	sp,sp,-60
  80a284:	dfc00e15 	stw	ra,56(sp)
  80a288:	df000d15 	stw	fp,52(sp)
  80a28c:	df000d04 	addi	fp,sp,52
  80a290:	2007883a 	mov	r3,r4
  80a294:	2805883a 	mov	r2,r5
  80a298:	e0fffe05 	stb	r3,-8(fp)
  80a29c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  80a2a0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  80a2a4:	e0bffe03 	ldbu	r2,-8(fp)
  80a2a8:	10800530 	cmpltui	r2,r2,20
  80a2ac:	1000051e 	bne	r2,zero,80a2c4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  80a2b0:	e0bffe03 	ldbu	r2,-8(fp)
  80a2b4:	10803fe0 	cmpeqi	r2,r2,255
  80a2b8:	1000021e 	bne	r2,zero,80a2c4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  80a2bc:	00800a84 	movi	r2,42
  80a2c0:	00012606 	br	80a75c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  80a2c4:	e0bfff03 	ldbu	r2,-4(fp)
  80a2c8:	10800530 	cmpltui	r2,r2,20
  80a2cc:	1000021e 	bne	r2,zero,80a2d8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  80a2d0:	00800a84 	movi	r2,42
  80a2d4:	00012106 	br	80a75c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a2d8:	0005303a 	rdctl	r2,status
  80a2dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a2e0:	e0fffd17 	ldw	r3,-12(fp)
  80a2e4:	00bfff84 	movi	r2,-2
  80a2e8:	1884703a 	and	r2,r3,r2
  80a2ec:	1001703a 	wrctl	status,r2
  
  return context;
  80a2f0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a2f4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  80a2f8:	e0ffff03 	ldbu	r3,-4(fp)
  80a2fc:	008020b4 	movhi	r2,130
  80a300:	10b35b04 	addi	r2,r2,-12948
  80a304:	18c7883a 	add	r3,r3,r3
  80a308:	18c7883a 	add	r3,r3,r3
  80a30c:	10c5883a 	add	r2,r2,r3
  80a310:	10800017 	ldw	r2,0(r2)
  80a314:	10000626 	beq	r2,zero,80a330 <OSTaskChangePrio+0xb0>
  80a318:	e0bff517 	ldw	r2,-44(fp)
  80a31c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a320:	e0bff617 	ldw	r2,-40(fp)
  80a324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  80a328:	00800a04 	movi	r2,40
  80a32c:	00010b06 	br	80a75c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  80a330:	e0bffe03 	ldbu	r2,-8(fp)
  80a334:	10803fd8 	cmpnei	r2,r2,255
  80a338:	1000031e 	bne	r2,zero,80a348 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  80a33c:	d0a0a117 	ldw	r2,-32124(gp)
  80a340:	10800c83 	ldbu	r2,50(r2)
  80a344:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  80a348:	e0fffe03 	ldbu	r3,-8(fp)
  80a34c:	008020b4 	movhi	r2,130
  80a350:	10b35b04 	addi	r2,r2,-12948
  80a354:	18c7883a 	add	r3,r3,r3
  80a358:	18c7883a 	add	r3,r3,r3
  80a35c:	10c5883a 	add	r2,r2,r3
  80a360:	10800017 	ldw	r2,0(r2)
  80a364:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  80a368:	e0bff817 	ldw	r2,-32(fp)
  80a36c:	1000061e 	bne	r2,zero,80a388 <OSTaskChangePrio+0x108>
  80a370:	e0bff517 	ldw	r2,-44(fp)
  80a374:	e0bff715 	stw	r2,-36(fp)
  80a378:	e0bff717 	ldw	r2,-36(fp)
  80a37c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  80a380:	00800a44 	movi	r2,41
  80a384:	0000f506 	br	80a75c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  80a388:	e0bff817 	ldw	r2,-32(fp)
  80a38c:	10800058 	cmpnei	r2,r2,1
  80a390:	1000061e 	bne	r2,zero,80a3ac <OSTaskChangePrio+0x12c>
  80a394:	e0bff517 	ldw	r2,-44(fp)
  80a398:	e0bff915 	stw	r2,-28(fp)
  80a39c:	e0bff917 	ldw	r2,-28(fp)
  80a3a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  80a3a4:	008010c4 	movi	r2,67
  80a3a8:	0000ec06 	br	80a75c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  80a3ac:	e0bfff03 	ldbu	r2,-4(fp)
  80a3b0:	1004d0fa 	srli	r2,r2,3
  80a3b4:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  80a3b8:	e0bfff03 	ldbu	r2,-4(fp)
  80a3bc:	108001cc 	andi	r2,r2,7
  80a3c0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  80a3c4:	e0bffb03 	ldbu	r2,-20(fp)
  80a3c8:	00c00044 	movi	r3,1
  80a3cc:	1884983a 	sll	r2,r3,r2
  80a3d0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  80a3d4:	e0bffb43 	ldbu	r2,-19(fp)
  80a3d8:	00c00044 	movi	r3,1
  80a3dc:	1884983a 	sll	r2,r3,r2
  80a3e0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80a3e4:	e0fffe03 	ldbu	r3,-8(fp)
  80a3e8:	008020b4 	movhi	r2,130
  80a3ec:	10b35b04 	addi	r2,r2,-12948
  80a3f0:	18c7883a 	add	r3,r3,r3
  80a3f4:	18c7883a 	add	r3,r3,r3
  80a3f8:	10c5883a 	add	r2,r2,r3
  80a3fc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  80a400:	e0ffff03 	ldbu	r3,-4(fp)
  80a404:	008020b4 	movhi	r2,130
  80a408:	10b35b04 	addi	r2,r2,-12948
  80a40c:	18c7883a 	add	r3,r3,r3
  80a410:	18c7883a 	add	r3,r3,r3
  80a414:	10c5883a 	add	r2,r2,r3
  80a418:	e0fff817 	ldw	r3,-32(fp)
  80a41c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  80a420:	e0bff817 	ldw	r2,-32(fp)
  80a424:	10800d03 	ldbu	r2,52(r2)
  80a428:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  80a42c:	e0bff817 	ldw	r2,-32(fp)
  80a430:	10800d83 	ldbu	r2,54(r2)
  80a434:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  80a438:	e0bff817 	ldw	r2,-32(fp)
  80a43c:	10800d43 	ldbu	r2,53(r2)
  80a440:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  80a444:	e0fffc03 	ldbu	r3,-16(fp)
  80a448:	d0a09e44 	addi	r2,gp,-32135
  80a44c:	1885883a 	add	r2,r3,r2
  80a450:	10c00003 	ldbu	r3,0(r2)
  80a454:	e0bffc83 	ldbu	r2,-14(fp)
  80a458:	1884703a 	and	r2,r3,r2
  80a45c:	10803fcc 	andi	r2,r2,255
  80a460:	10002826 	beq	r2,zero,80a504 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  80a464:	e0fffc03 	ldbu	r3,-16(fp)
  80a468:	e13ffc03 	ldbu	r4,-16(fp)
  80a46c:	d0a09e44 	addi	r2,gp,-32135
  80a470:	2085883a 	add	r2,r4,r2
  80a474:	10800003 	ldbu	r2,0(r2)
  80a478:	1009883a 	mov	r4,r2
  80a47c:	e0bffc83 	ldbu	r2,-14(fp)
  80a480:	0084303a 	nor	r2,zero,r2
  80a484:	2084703a 	and	r2,r4,r2
  80a488:	1009883a 	mov	r4,r2
  80a48c:	d0a09e44 	addi	r2,gp,-32135
  80a490:	1885883a 	add	r2,r3,r2
  80a494:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  80a498:	e0fffc03 	ldbu	r3,-16(fp)
  80a49c:	d0a09e44 	addi	r2,gp,-32135
  80a4a0:	1885883a 	add	r2,r3,r2
  80a4a4:	10800003 	ldbu	r2,0(r2)
  80a4a8:	10803fcc 	andi	r2,r2,255
  80a4ac:	1000061e 	bne	r2,zero,80a4c8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  80a4b0:	e0bffc43 	ldbu	r2,-15(fp)
  80a4b4:	0084303a 	nor	r2,zero,r2
  80a4b8:	1007883a 	mov	r3,r2
  80a4bc:	d0a09e03 	ldbu	r2,-32136(gp)
  80a4c0:	1884703a 	and	r2,r3,r2
  80a4c4:	d0a09e05 	stb	r2,-32136(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  80a4c8:	d0e09e03 	ldbu	r3,-32136(gp)
  80a4cc:	e0bffb83 	ldbu	r2,-18(fp)
  80a4d0:	1884b03a 	or	r2,r3,r2
  80a4d4:	d0a09e05 	stb	r2,-32136(gp)
         OSRdyTbl[y_new] |= bitx_new;
  80a4d8:	e0fffb03 	ldbu	r3,-20(fp)
  80a4dc:	e13ffb03 	ldbu	r4,-20(fp)
  80a4e0:	d0a09e44 	addi	r2,gp,-32135
  80a4e4:	2085883a 	add	r2,r4,r2
  80a4e8:	11000003 	ldbu	r4,0(r2)
  80a4ec:	e0bffbc3 	ldbu	r2,-17(fp)
  80a4f0:	2084b03a 	or	r2,r4,r2
  80a4f4:	1009883a 	mov	r4,r2
  80a4f8:	d0a09e44 	addi	r2,gp,-32135
  80a4fc:	1885883a 	add	r2,r3,r2
  80a500:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80a504:	e0bff817 	ldw	r2,-32(fp)
  80a508:	10800717 	ldw	r2,28(r2)
  80a50c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  80a510:	e0bff317 	ldw	r2,-52(fp)
  80a514:	10003326 	beq	r2,zero,80a5e4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  80a518:	e0bffc03 	ldbu	r2,-16(fp)
  80a51c:	e0fffc03 	ldbu	r3,-16(fp)
  80a520:	e13ff317 	ldw	r4,-52(fp)
  80a524:	20c7883a 	add	r3,r4,r3
  80a528:	18c002c4 	addi	r3,r3,11
  80a52c:	18c00003 	ldbu	r3,0(r3)
  80a530:	1809883a 	mov	r4,r3
  80a534:	e0fffc83 	ldbu	r3,-14(fp)
  80a538:	00c6303a 	nor	r3,zero,r3
  80a53c:	20c6703a 	and	r3,r4,r3
  80a540:	1809883a 	mov	r4,r3
  80a544:	e0fff317 	ldw	r3,-52(fp)
  80a548:	1885883a 	add	r2,r3,r2
  80a54c:	108002c4 	addi	r2,r2,11
  80a550:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80a554:	e0bffc03 	ldbu	r2,-16(fp)
  80a558:	e0fff317 	ldw	r3,-52(fp)
  80a55c:	1885883a 	add	r2,r3,r2
  80a560:	108002c4 	addi	r2,r2,11
  80a564:	10800003 	ldbu	r2,0(r2)
  80a568:	10803fcc 	andi	r2,r2,255
  80a56c:	1000091e 	bne	r2,zero,80a594 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  80a570:	e0bff317 	ldw	r2,-52(fp)
  80a574:	10800283 	ldbu	r2,10(r2)
  80a578:	1007883a 	mov	r3,r2
  80a57c:	e0bffc43 	ldbu	r2,-15(fp)
  80a580:	0084303a 	nor	r2,zero,r2
  80a584:	1884703a 	and	r2,r3,r2
  80a588:	1007883a 	mov	r3,r2
  80a58c:	e0bff317 	ldw	r2,-52(fp)
  80a590:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  80a594:	e0bff317 	ldw	r2,-52(fp)
  80a598:	10c00283 	ldbu	r3,10(r2)
  80a59c:	e0bffb83 	ldbu	r2,-18(fp)
  80a5a0:	1884b03a 	or	r2,r3,r2
  80a5a4:	1007883a 	mov	r3,r2
  80a5a8:	e0bff317 	ldw	r2,-52(fp)
  80a5ac:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  80a5b0:	e0bffb03 	ldbu	r2,-20(fp)
  80a5b4:	e0fffb03 	ldbu	r3,-20(fp)
  80a5b8:	e13ff317 	ldw	r4,-52(fp)
  80a5bc:	20c7883a 	add	r3,r4,r3
  80a5c0:	18c002c4 	addi	r3,r3,11
  80a5c4:	19000003 	ldbu	r4,0(r3)
  80a5c8:	e0fffbc3 	ldbu	r3,-17(fp)
  80a5cc:	20c6b03a 	or	r3,r4,r3
  80a5d0:	1809883a 	mov	r4,r3
  80a5d4:	e0fff317 	ldw	r3,-52(fp)
  80a5d8:	1885883a 	add	r2,r3,r2
  80a5dc:	108002c4 	addi	r2,r2,11
  80a5e0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80a5e4:	e0bff817 	ldw	r2,-32(fp)
  80a5e8:	10800817 	ldw	r2,32(r2)
  80a5ec:	10004226 	beq	r2,zero,80a6f8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  80a5f0:	e0bff817 	ldw	r2,-32(fp)
  80a5f4:	10800817 	ldw	r2,32(r2)
  80a5f8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  80a5fc:	e0bff417 	ldw	r2,-48(fp)
  80a600:	10800017 	ldw	r2,0(r2)
  80a604:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  80a608:	00003906 	br	80a6f0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  80a60c:	e0bffc03 	ldbu	r2,-16(fp)
  80a610:	e0fffc03 	ldbu	r3,-16(fp)
  80a614:	e13ff317 	ldw	r4,-52(fp)
  80a618:	20c7883a 	add	r3,r4,r3
  80a61c:	18c002c4 	addi	r3,r3,11
  80a620:	18c00003 	ldbu	r3,0(r3)
  80a624:	1809883a 	mov	r4,r3
  80a628:	e0fffc83 	ldbu	r3,-14(fp)
  80a62c:	00c6303a 	nor	r3,zero,r3
  80a630:	20c6703a 	and	r3,r4,r3
  80a634:	1809883a 	mov	r4,r3
  80a638:	e0fff317 	ldw	r3,-52(fp)
  80a63c:	1885883a 	add	r2,r3,r2
  80a640:	108002c4 	addi	r2,r2,11
  80a644:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  80a648:	e0bffc03 	ldbu	r2,-16(fp)
  80a64c:	e0fff317 	ldw	r3,-52(fp)
  80a650:	1885883a 	add	r2,r3,r2
  80a654:	108002c4 	addi	r2,r2,11
  80a658:	10800003 	ldbu	r2,0(r2)
  80a65c:	10803fcc 	andi	r2,r2,255
  80a660:	1000091e 	bne	r2,zero,80a688 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  80a664:	e0bff317 	ldw	r2,-52(fp)
  80a668:	10800283 	ldbu	r2,10(r2)
  80a66c:	1007883a 	mov	r3,r2
  80a670:	e0bffc43 	ldbu	r2,-15(fp)
  80a674:	0084303a 	nor	r2,zero,r2
  80a678:	1884703a 	and	r2,r3,r2
  80a67c:	1007883a 	mov	r3,r2
  80a680:	e0bff317 	ldw	r2,-52(fp)
  80a684:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  80a688:	e0bff317 	ldw	r2,-52(fp)
  80a68c:	10c00283 	ldbu	r3,10(r2)
  80a690:	e0bffb83 	ldbu	r2,-18(fp)
  80a694:	1884b03a 	or	r2,r3,r2
  80a698:	1007883a 	mov	r3,r2
  80a69c:	e0bff317 	ldw	r2,-52(fp)
  80a6a0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  80a6a4:	e0bffb03 	ldbu	r2,-20(fp)
  80a6a8:	e0fffb03 	ldbu	r3,-20(fp)
  80a6ac:	e13ff317 	ldw	r4,-52(fp)
  80a6b0:	20c7883a 	add	r3,r4,r3
  80a6b4:	18c002c4 	addi	r3,r3,11
  80a6b8:	19000003 	ldbu	r4,0(r3)
  80a6bc:	e0fffbc3 	ldbu	r3,-17(fp)
  80a6c0:	20c6b03a 	or	r3,r4,r3
  80a6c4:	1809883a 	mov	r4,r3
  80a6c8:	e0fff317 	ldw	r3,-52(fp)
  80a6cc:	1885883a 	add	r2,r3,r2
  80a6d0:	108002c4 	addi	r2,r2,11
  80a6d4:	11000005 	stb	r4,0(r2)
            pevents++;
  80a6d8:	e0bff417 	ldw	r2,-48(fp)
  80a6dc:	10800104 	addi	r2,r2,4
  80a6e0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  80a6e4:	e0bff417 	ldw	r2,-48(fp)
  80a6e8:	10800017 	ldw	r2,0(r2)
  80a6ec:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  80a6f0:	e0bff317 	ldw	r2,-52(fp)
  80a6f4:	103fc51e 	bne	r2,zero,80a60c <__alt_mem_epcs_flash_controller_0+0xff80160c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  80a6f8:	e0bff817 	ldw	r2,-32(fp)
  80a6fc:	e0ffff03 	ldbu	r3,-4(fp)
  80a700:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  80a704:	e0bff817 	ldw	r2,-32(fp)
  80a708:	e0fffb03 	ldbu	r3,-20(fp)
  80a70c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  80a710:	e0bff817 	ldw	r2,-32(fp)
  80a714:	e0fffb43 	ldbu	r3,-19(fp)
  80a718:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  80a71c:	e0bff817 	ldw	r2,-32(fp)
  80a720:	e0fffb83 	ldbu	r3,-18(fp)
  80a724:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  80a728:	e0bff817 	ldw	r2,-32(fp)
  80a72c:	e0fffbc3 	ldbu	r3,-17(fp)
  80a730:	10c00d45 	stb	r3,53(r2)
  80a734:	e0bff517 	ldw	r2,-44(fp)
  80a738:	e0bffa15 	stw	r2,-24(fp)
  80a73c:	e0bffa17 	ldw	r2,-24(fp)
  80a740:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80a744:	d0a09243 	ldbu	r2,-32183(gp)
  80a748:	10803fcc 	andi	r2,r2,255
  80a74c:	10800058 	cmpnei	r2,r2,1
  80a750:	1000011e 	bne	r2,zero,80a758 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  80a754:	08060440 	call	806044 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80a758:	0005883a 	mov	r2,zero
}
  80a75c:	e037883a 	mov	sp,fp
  80a760:	dfc00117 	ldw	ra,4(sp)
  80a764:	df000017 	ldw	fp,0(sp)
  80a768:	dec00204 	addi	sp,sp,8
  80a76c:	f800283a 	ret

0080a770 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  80a770:	deffee04 	addi	sp,sp,-72
  80a774:	dfc01115 	stw	ra,68(sp)
  80a778:	df001015 	stw	fp,64(sp)
  80a77c:	df001004 	addi	fp,sp,64
  80a780:	e13ffc15 	stw	r4,-16(fp)
  80a784:	e17ffd15 	stw	r5,-12(fp)
  80a788:	e1bffe15 	stw	r6,-8(fp)
  80a78c:	3805883a 	mov	r2,r7
  80a790:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80a794:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80a798:	e0bfff03 	ldbu	r2,-4(fp)
  80a79c:	10800570 	cmpltui	r2,r2,21
  80a7a0:	1000021e 	bne	r2,zero,80a7ac <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  80a7a4:	00800a84 	movi	r2,42
  80a7a8:	00005706 	br	80a908 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a7ac:	0005303a 	rdctl	r2,status
  80a7b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a7b4:	e0fffb17 	ldw	r3,-20(fp)
  80a7b8:	00bfff84 	movi	r2,-2
  80a7bc:	1884703a 	and	r2,r3,r2
  80a7c0:	1001703a 	wrctl	status,r2
  
  return context;
  80a7c4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a7c8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80a7cc:	d0a0a003 	ldbu	r2,-32128(gp)
  80a7d0:	10803fcc 	andi	r2,r2,255
  80a7d4:	10000626 	beq	r2,zero,80a7f0 <OSTaskCreate+0x80>
  80a7d8:	e0bff317 	ldw	r2,-52(fp)
  80a7dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a7e0:	e0bff417 	ldw	r2,-48(fp)
  80a7e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80a7e8:	00800f04 	movi	r2,60
  80a7ec:	00004606 	br	80a908 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80a7f0:	e0ffff03 	ldbu	r3,-4(fp)
  80a7f4:	008020b4 	movhi	r2,130
  80a7f8:	10b35b04 	addi	r2,r2,-12948
  80a7fc:	18c7883a 	add	r3,r3,r3
  80a800:	18c7883a 	add	r3,r3,r3
  80a804:	10c5883a 	add	r2,r2,r3
  80a808:	10800017 	ldw	r2,0(r2)
  80a80c:	1000391e 	bne	r2,zero,80a8f4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80a810:	e0ffff03 	ldbu	r3,-4(fp)
  80a814:	008020b4 	movhi	r2,130
  80a818:	10b35b04 	addi	r2,r2,-12948
  80a81c:	18c7883a 	add	r3,r3,r3
  80a820:	18c7883a 	add	r3,r3,r3
  80a824:	10c5883a 	add	r2,r2,r3
  80a828:	00c00044 	movi	r3,1
  80a82c:	10c00015 	stw	r3,0(r2)
  80a830:	e0bff317 	ldw	r2,-52(fp)
  80a834:	e0bff515 	stw	r2,-44(fp)
  80a838:	e0bff517 	ldw	r2,-44(fp)
  80a83c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  80a840:	000f883a 	mov	r7,zero
  80a844:	e1bffe17 	ldw	r6,-8(fp)
  80a848:	e17ffd17 	ldw	r5,-12(fp)
  80a84c:	e13ffc17 	ldw	r4,-16(fp)
  80a850:	081066c0 	call	81066c <OSTaskStkInit>
  80a854:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  80a858:	e0bfff03 	ldbu	r2,-4(fp)
  80a85c:	d8000215 	stw	zero,8(sp)
  80a860:	d8000115 	stw	zero,4(sp)
  80a864:	d8000015 	stw	zero,0(sp)
  80a868:	000f883a 	mov	r7,zero
  80a86c:	000d883a 	mov	r6,zero
  80a870:	e17ff717 	ldw	r5,-36(fp)
  80a874:	1009883a 	mov	r4,r2
  80a878:	08064440 	call	806444 <OS_TCBInit>
  80a87c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  80a880:	e0bff803 	ldbu	r2,-32(fp)
  80a884:	1000061e 	bne	r2,zero,80a8a0 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  80a888:	d0a09243 	ldbu	r2,-32183(gp)
  80a88c:	10803fcc 	andi	r2,r2,255
  80a890:	10800058 	cmpnei	r2,r2,1
  80a894:	1000151e 	bne	r2,zero,80a8ec <OSTaskCreate+0x17c>
                OS_Sched();
  80a898:	08060440 	call	806044 <OS_Sched>
  80a89c:	00001306 	br	80a8ec <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a8a0:	0005303a 	rdctl	r2,status
  80a8a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a8a8:	e0fffa17 	ldw	r3,-24(fp)
  80a8ac:	00bfff84 	movi	r2,-2
  80a8b0:	1884703a 	and	r2,r3,r2
  80a8b4:	1001703a 	wrctl	status,r2
  
  return context;
  80a8b8:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80a8bc:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  80a8c0:	e0ffff03 	ldbu	r3,-4(fp)
  80a8c4:	008020b4 	movhi	r2,130
  80a8c8:	10b35b04 	addi	r2,r2,-12948
  80a8cc:	18c7883a 	add	r3,r3,r3
  80a8d0:	18c7883a 	add	r3,r3,r3
  80a8d4:	10c5883a 	add	r2,r2,r3
  80a8d8:	10000015 	stw	zero,0(r2)
  80a8dc:	e0bff317 	ldw	r2,-52(fp)
  80a8e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a8e4:	e0bff617 	ldw	r2,-40(fp)
  80a8e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80a8ec:	e0bff803 	ldbu	r2,-32(fp)
  80a8f0:	00000506 	br	80a908 <OSTaskCreate+0x198>
  80a8f4:	e0bff317 	ldw	r2,-52(fp)
  80a8f8:	e0bff915 	stw	r2,-28(fp)
  80a8fc:	e0bff917 	ldw	r2,-28(fp)
  80a900:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80a904:	00800a04 	movi	r2,40
}
  80a908:	e037883a 	mov	sp,fp
  80a90c:	dfc00117 	ldw	ra,4(sp)
  80a910:	df000017 	ldw	fp,0(sp)
  80a914:	dec00204 	addi	sp,sp,8
  80a918:	f800283a 	ret

0080a91c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  80a91c:	deffec04 	addi	sp,sp,-80
  80a920:	dfc01315 	stw	ra,76(sp)
  80a924:	df001215 	stw	fp,72(sp)
  80a928:	df001204 	addi	fp,sp,72
  80a92c:	e13ffa15 	stw	r4,-24(fp)
  80a930:	e17ffb15 	stw	r5,-20(fp)
  80a934:	e1bffc15 	stw	r6,-16(fp)
  80a938:	3809883a 	mov	r4,r7
  80a93c:	e0c00217 	ldw	r3,8(fp)
  80a940:	e0800617 	ldw	r2,24(fp)
  80a944:	e13ffd05 	stb	r4,-12(fp)
  80a948:	e0fffe0d 	sth	r3,-8(fp)
  80a94c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80a950:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80a954:	e0bffd03 	ldbu	r2,-12(fp)
  80a958:	10800570 	cmpltui	r2,r2,21
  80a95c:	1000021e 	bne	r2,zero,80a968 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  80a960:	00800a84 	movi	r2,42
  80a964:	00006106 	br	80aaec <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a968:	0005303a 	rdctl	r2,status
  80a96c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a970:	e0fff917 	ldw	r3,-28(fp)
  80a974:	00bfff84 	movi	r2,-2
  80a978:	1884703a 	and	r2,r3,r2
  80a97c:	1001703a 	wrctl	status,r2
  
  return context;
  80a980:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a984:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80a988:	d0a0a003 	ldbu	r2,-32128(gp)
  80a98c:	10803fcc 	andi	r2,r2,255
  80a990:	10000626 	beq	r2,zero,80a9ac <OSTaskCreateExt+0x90>
  80a994:	e0bff117 	ldw	r2,-60(fp)
  80a998:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a99c:	e0bff217 	ldw	r2,-56(fp)
  80a9a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80a9a4:	00800f04 	movi	r2,60
  80a9a8:	00005006 	br	80aaec <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80a9ac:	e0fffd03 	ldbu	r3,-12(fp)
  80a9b0:	008020b4 	movhi	r2,130
  80a9b4:	10b35b04 	addi	r2,r2,-12948
  80a9b8:	18c7883a 	add	r3,r3,r3
  80a9bc:	18c7883a 	add	r3,r3,r3
  80a9c0:	10c5883a 	add	r2,r2,r3
  80a9c4:	10800017 	ldw	r2,0(r2)
  80a9c8:	1000431e 	bne	r2,zero,80aad8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80a9cc:	e0fffd03 	ldbu	r3,-12(fp)
  80a9d0:	008020b4 	movhi	r2,130
  80a9d4:	10b35b04 	addi	r2,r2,-12948
  80a9d8:	18c7883a 	add	r3,r3,r3
  80a9dc:	18c7883a 	add	r3,r3,r3
  80a9e0:	10c5883a 	add	r2,r2,r3
  80a9e4:	00c00044 	movi	r3,1
  80a9e8:	10c00015 	stw	r3,0(r2)
  80a9ec:	e0bff117 	ldw	r2,-60(fp)
  80a9f0:	e0bff315 	stw	r2,-52(fp)
  80a9f4:	e0bff317 	ldw	r2,-52(fp)
  80a9f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  80a9fc:	e0bfff0b 	ldhu	r2,-4(fp)
  80aa00:	100d883a 	mov	r6,r2
  80aa04:	e1400417 	ldw	r5,16(fp)
  80aa08:	e1000317 	ldw	r4,12(fp)
  80aa0c:	080b97c0 	call	80b97c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  80aa10:	e0bfff0b 	ldhu	r2,-4(fp)
  80aa14:	100f883a 	mov	r7,r2
  80aa18:	e1bffc17 	ldw	r6,-16(fp)
  80aa1c:	e17ffb17 	ldw	r5,-20(fp)
  80aa20:	e13ffa17 	ldw	r4,-24(fp)
  80aa24:	081066c0 	call	81066c <OSTaskStkInit>
  80aa28:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  80aa2c:	e0fffd03 	ldbu	r3,-12(fp)
  80aa30:	e13ffe0b 	ldhu	r4,-8(fp)
  80aa34:	e0bfff0b 	ldhu	r2,-4(fp)
  80aa38:	d8800215 	stw	r2,8(sp)
  80aa3c:	e0800517 	ldw	r2,20(fp)
  80aa40:	d8800115 	stw	r2,4(sp)
  80aa44:	e0800417 	ldw	r2,16(fp)
  80aa48:	d8800015 	stw	r2,0(sp)
  80aa4c:	200f883a 	mov	r7,r4
  80aa50:	e1800317 	ldw	r6,12(fp)
  80aa54:	e17ff517 	ldw	r5,-44(fp)
  80aa58:	1809883a 	mov	r4,r3
  80aa5c:	08064440 	call	806444 <OS_TCBInit>
  80aa60:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  80aa64:	e0bff603 	ldbu	r2,-40(fp)
  80aa68:	1000061e 	bne	r2,zero,80aa84 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  80aa6c:	d0a09243 	ldbu	r2,-32183(gp)
  80aa70:	10803fcc 	andi	r2,r2,255
  80aa74:	10800058 	cmpnei	r2,r2,1
  80aa78:	1000151e 	bne	r2,zero,80aad0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  80aa7c:	08060440 	call	806044 <OS_Sched>
  80aa80:	00001306 	br	80aad0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aa84:	0005303a 	rdctl	r2,status
  80aa88:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aa8c:	e0fff817 	ldw	r3,-32(fp)
  80aa90:	00bfff84 	movi	r2,-2
  80aa94:	1884703a 	and	r2,r3,r2
  80aa98:	1001703a 	wrctl	status,r2
  
  return context;
  80aa9c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80aaa0:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80aaa4:	e0fffd03 	ldbu	r3,-12(fp)
  80aaa8:	008020b4 	movhi	r2,130
  80aaac:	10b35b04 	addi	r2,r2,-12948
  80aab0:	18c7883a 	add	r3,r3,r3
  80aab4:	18c7883a 	add	r3,r3,r3
  80aab8:	10c5883a 	add	r2,r2,r3
  80aabc:	10000015 	stw	zero,0(r2)
  80aac0:	e0bff117 	ldw	r2,-60(fp)
  80aac4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aac8:	e0bff417 	ldw	r2,-48(fp)
  80aacc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80aad0:	e0bff603 	ldbu	r2,-40(fp)
  80aad4:	00000506 	br	80aaec <OSTaskCreateExt+0x1d0>
  80aad8:	e0bff117 	ldw	r2,-60(fp)
  80aadc:	e0bff715 	stw	r2,-36(fp)
  80aae0:	e0bff717 	ldw	r2,-36(fp)
  80aae4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80aae8:	00800a04 	movi	r2,40
}
  80aaec:	e037883a 	mov	sp,fp
  80aaf0:	dfc00117 	ldw	ra,4(sp)
  80aaf4:	df000017 	ldw	fp,0(sp)
  80aaf8:	dec00204 	addi	sp,sp,8
  80aafc:	f800283a 	ret

0080ab00 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  80ab00:	defff404 	addi	sp,sp,-48
  80ab04:	dfc00b15 	stw	ra,44(sp)
  80ab08:	df000a15 	stw	fp,40(sp)
  80ab0c:	df000a04 	addi	fp,sp,40
  80ab10:	2005883a 	mov	r2,r4
  80ab14:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  80ab18:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  80ab1c:	d0a0a003 	ldbu	r2,-32128(gp)
  80ab20:	10803fcc 	andi	r2,r2,255
  80ab24:	10000226 	beq	r2,zero,80ab30 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  80ab28:	00801004 	movi	r2,64
  80ab2c:	0000c006 	br	80ae30 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  80ab30:	e0bfff03 	ldbu	r2,-4(fp)
  80ab34:	10800518 	cmpnei	r2,r2,20
  80ab38:	1000021e 	bne	r2,zero,80ab44 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  80ab3c:	00800f84 	movi	r2,62
  80ab40:	0000bb06 	br	80ae30 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80ab44:	e0bfff03 	ldbu	r2,-4(fp)
  80ab48:	10800530 	cmpltui	r2,r2,20
  80ab4c:	1000051e 	bne	r2,zero,80ab64 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  80ab50:	e0bfff03 	ldbu	r2,-4(fp)
  80ab54:	10803fe0 	cmpeqi	r2,r2,255
  80ab58:	1000021e 	bne	r2,zero,80ab64 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  80ab5c:	00800a84 	movi	r2,42
  80ab60:	0000b306 	br	80ae30 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ab64:	0005303a 	rdctl	r2,status
  80ab68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ab6c:	e0fffe17 	ldw	r3,-8(fp)
  80ab70:	00bfff84 	movi	r2,-2
  80ab74:	1884703a 	and	r2,r3,r2
  80ab78:	1001703a 	wrctl	status,r2
  
  return context;
  80ab7c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80ab80:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80ab84:	e0bfff03 	ldbu	r2,-4(fp)
  80ab88:	10803fd8 	cmpnei	r2,r2,255
  80ab8c:	1000031e 	bne	r2,zero,80ab9c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  80ab90:	d0a0a117 	ldw	r2,-32124(gp)
  80ab94:	10800c83 	ldbu	r2,50(r2)
  80ab98:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80ab9c:	e0ffff03 	ldbu	r3,-4(fp)
  80aba0:	008020b4 	movhi	r2,130
  80aba4:	10b35b04 	addi	r2,r2,-12948
  80aba8:	18c7883a 	add	r3,r3,r3
  80abac:	18c7883a 	add	r3,r3,r3
  80abb0:	10c5883a 	add	r2,r2,r3
  80abb4:	10800017 	ldw	r2,0(r2)
  80abb8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  80abbc:	e0bff817 	ldw	r2,-32(fp)
  80abc0:	1000061e 	bne	r2,zero,80abdc <OSTaskDel+0xdc>
  80abc4:	e0bff617 	ldw	r2,-40(fp)
  80abc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80abcc:	e0bff717 	ldw	r2,-36(fp)
  80abd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80abd4:	008010c4 	movi	r2,67
  80abd8:	00009506 	br	80ae30 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  80abdc:	e0bff817 	ldw	r2,-32(fp)
  80abe0:	10800058 	cmpnei	r2,r2,1
  80abe4:	1000061e 	bne	r2,zero,80ac00 <OSTaskDel+0x100>
  80abe8:	e0bff617 	ldw	r2,-40(fp)
  80abec:	e0bff915 	stw	r2,-28(fp)
  80abf0:	e0bff917 	ldw	r2,-28(fp)
  80abf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80abf8:	00800f44 	movi	r2,61
  80abfc:	00008c06 	br	80ae30 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80ac00:	e0bff817 	ldw	r2,-32(fp)
  80ac04:	10800d03 	ldbu	r2,52(r2)
  80ac08:	10c03fcc 	andi	r3,r2,255
  80ac0c:	e0bff817 	ldw	r2,-32(fp)
  80ac10:	10800d03 	ldbu	r2,52(r2)
  80ac14:	11003fcc 	andi	r4,r2,255
  80ac18:	d0a09e44 	addi	r2,gp,-32135
  80ac1c:	2085883a 	add	r2,r4,r2
  80ac20:	10800003 	ldbu	r2,0(r2)
  80ac24:	1009883a 	mov	r4,r2
  80ac28:	e0bff817 	ldw	r2,-32(fp)
  80ac2c:	10800d43 	ldbu	r2,53(r2)
  80ac30:	0084303a 	nor	r2,zero,r2
  80ac34:	2084703a 	and	r2,r4,r2
  80ac38:	1009883a 	mov	r4,r2
  80ac3c:	d0a09e44 	addi	r2,gp,-32135
  80ac40:	1885883a 	add	r2,r3,r2
  80ac44:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80ac48:	e0bff817 	ldw	r2,-32(fp)
  80ac4c:	10800d03 	ldbu	r2,52(r2)
  80ac50:	10c03fcc 	andi	r3,r2,255
  80ac54:	d0a09e44 	addi	r2,gp,-32135
  80ac58:	1885883a 	add	r2,r3,r2
  80ac5c:	10800003 	ldbu	r2,0(r2)
  80ac60:	10803fcc 	andi	r2,r2,255
  80ac64:	1000071e 	bne	r2,zero,80ac84 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80ac68:	e0bff817 	ldw	r2,-32(fp)
  80ac6c:	10800d83 	ldbu	r2,54(r2)
  80ac70:	0084303a 	nor	r2,zero,r2
  80ac74:	1007883a 	mov	r3,r2
  80ac78:	d0a09e03 	ldbu	r2,-32136(gp)
  80ac7c:	1884703a 	and	r2,r3,r2
  80ac80:	d0a09e05 	stb	r2,-32136(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80ac84:	e0bff817 	ldw	r2,-32(fp)
  80ac88:	10800717 	ldw	r2,28(r2)
  80ac8c:	10000526 	beq	r2,zero,80aca4 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80ac90:	e0bff817 	ldw	r2,-32(fp)
  80ac94:	10800717 	ldw	r2,28(r2)
  80ac98:	100b883a 	mov	r5,r2
  80ac9c:	e13ff817 	ldw	r4,-32(fp)
  80aca0:	08059f00 	call	8059f0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80aca4:	e0bff817 	ldw	r2,-32(fp)
  80aca8:	10800817 	ldw	r2,32(r2)
  80acac:	10000526 	beq	r2,zero,80acc4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80acb0:	e0bff817 	ldw	r2,-32(fp)
  80acb4:	10800817 	ldw	r2,32(r2)
  80acb8:	100b883a 	mov	r5,r2
  80acbc:	e13ff817 	ldw	r4,-32(fp)
  80acc0:	0805aa80 	call	805aa8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80acc4:	e0bff817 	ldw	r2,-32(fp)
  80acc8:	10800a17 	ldw	r2,40(r2)
  80accc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80acd0:	e0bffb17 	ldw	r2,-20(fp)
  80acd4:	10000226 	beq	r2,zero,80ace0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80acd8:	e13ffb17 	ldw	r4,-20(fp)
  80acdc:	0807f180 	call	807f18 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80ace0:	e0bff817 	ldw	r2,-32(fp)
  80ace4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80ace8:	e0bff817 	ldw	r2,-32(fp)
  80acec:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80acf0:	e0bff817 	ldw	r2,-32(fp)
  80acf4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80acf8:	d0a09203 	ldbu	r2,-32184(gp)
  80acfc:	10803fcc 	andi	r2,r2,255
  80ad00:	10803fe0 	cmpeqi	r2,r2,255
  80ad04:	1000031e 	bne	r2,zero,80ad14 <OSTaskDel+0x214>
        OSLockNesting++;
  80ad08:	d0a09203 	ldbu	r2,-32184(gp)
  80ad0c:	10800044 	addi	r2,r2,1
  80ad10:	d0a09205 	stb	r2,-32184(gp)
  80ad14:	e0bff617 	ldw	r2,-40(fp)
  80ad18:	e0bffd15 	stw	r2,-12(fp)
  80ad1c:	e0bffd17 	ldw	r2,-12(fp)
  80ad20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80ad24:	08055d80 	call	8055d8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ad28:	0005303a 	rdctl	r2,status
  80ad2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ad30:	e0fffa17 	ldw	r3,-24(fp)
  80ad34:	00bfff84 	movi	r2,-2
  80ad38:	1884703a 	and	r2,r3,r2
  80ad3c:	1001703a 	wrctl	status,r2
  
  return context;
  80ad40:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80ad44:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80ad48:	d0a09203 	ldbu	r2,-32184(gp)
  80ad4c:	10803fcc 	andi	r2,r2,255
  80ad50:	10000326 	beq	r2,zero,80ad60 <OSTaskDel+0x260>
        OSLockNesting--;
  80ad54:	d0a09203 	ldbu	r2,-32184(gp)
  80ad58:	10bfffc4 	addi	r2,r2,-1
  80ad5c:	d0a09205 	stb	r2,-32184(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80ad60:	e13ff817 	ldw	r4,-32(fp)
  80ad64:	08107ec0 	call	8107ec <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80ad68:	d0a09a43 	ldbu	r2,-32151(gp)
  80ad6c:	10bfffc4 	addi	r2,r2,-1
  80ad70:	d0a09a45 	stb	r2,-32151(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80ad74:	e0ffff03 	ldbu	r3,-4(fp)
  80ad78:	008020b4 	movhi	r2,130
  80ad7c:	10b35b04 	addi	r2,r2,-12948
  80ad80:	18c7883a 	add	r3,r3,r3
  80ad84:	18c7883a 	add	r3,r3,r3
  80ad88:	10c5883a 	add	r2,r2,r3
  80ad8c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80ad90:	e0bff817 	ldw	r2,-32(fp)
  80ad94:	10800617 	ldw	r2,24(r2)
  80ad98:	1000071e 	bne	r2,zero,80adb8 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80ad9c:	e0bff817 	ldw	r2,-32(fp)
  80ada0:	10800517 	ldw	r2,20(r2)
  80ada4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80ada8:	e0bff817 	ldw	r2,-32(fp)
  80adac:	10800517 	ldw	r2,20(r2)
  80adb0:	d0a09515 	stw	r2,-32172(gp)
  80adb4:	00000a06 	br	80ade0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80adb8:	e0bff817 	ldw	r2,-32(fp)
  80adbc:	10800617 	ldw	r2,24(r2)
  80adc0:	e0fff817 	ldw	r3,-32(fp)
  80adc4:	18c00517 	ldw	r3,20(r3)
  80adc8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80adcc:	e0bff817 	ldw	r2,-32(fp)
  80add0:	10800517 	ldw	r2,20(r2)
  80add4:	e0fff817 	ldw	r3,-32(fp)
  80add8:	18c00617 	ldw	r3,24(r3)
  80addc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80ade0:	d0e09917 	ldw	r3,-32156(gp)
  80ade4:	e0bff817 	ldw	r2,-32(fp)
  80ade8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80adec:	e0bff817 	ldw	r2,-32(fp)
  80adf0:	d0a09915 	stw	r2,-32156(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80adf4:	e0bff817 	ldw	r2,-32(fp)
  80adf8:	00c00fc4 	movi	r3,63
  80adfc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ae00:	e0bff817 	ldw	r2,-32(fp)
  80ae04:	10001345 	stb	zero,77(r2)
  80ae08:	e0bff617 	ldw	r2,-40(fp)
  80ae0c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ae10:	e0bffc17 	ldw	r2,-16(fp)
  80ae14:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80ae18:	d0a09243 	ldbu	r2,-32183(gp)
  80ae1c:	10803fcc 	andi	r2,r2,255
  80ae20:	10800058 	cmpnei	r2,r2,1
  80ae24:	1000011e 	bne	r2,zero,80ae2c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  80ae28:	08060440 	call	806044 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80ae2c:	0005883a 	mov	r2,zero
}
  80ae30:	e037883a 	mov	sp,fp
  80ae34:	dfc00117 	ldw	ra,4(sp)
  80ae38:	df000017 	ldw	fp,0(sp)
  80ae3c:	dec00204 	addi	sp,sp,8
  80ae40:	f800283a 	ret

0080ae44 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80ae44:	defff504 	addi	sp,sp,-44
  80ae48:	df000a15 	stw	fp,40(sp)
  80ae4c:	df000a04 	addi	fp,sp,40
  80ae50:	2005883a 	mov	r2,r4
  80ae54:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ae58:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80ae5c:	e0bfff03 	ldbu	r2,-4(fp)
  80ae60:	10800518 	cmpnei	r2,r2,20
  80ae64:	1000021e 	bne	r2,zero,80ae70 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80ae68:	00800f84 	movi	r2,62
  80ae6c:	00004506 	br	80af84 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80ae70:	e0bfff03 	ldbu	r2,-4(fp)
  80ae74:	10800530 	cmpltui	r2,r2,20
  80ae78:	1000051e 	bne	r2,zero,80ae90 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  80ae7c:	e0bfff03 	ldbu	r2,-4(fp)
  80ae80:	10803fe0 	cmpeqi	r2,r2,255
  80ae84:	1000021e 	bne	r2,zero,80ae90 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  80ae88:	00800a84 	movi	r2,42
  80ae8c:	00003d06 	br	80af84 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80ae90:	e0bfff03 	ldbu	r2,-4(fp)
  80ae94:	10803fd8 	cmpnei	r2,r2,255
  80ae98:	1000111e 	bne	r2,zero,80aee0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae9c:	0005303a 	rdctl	r2,status
  80aea0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aea4:	e0fff917 	ldw	r3,-28(fp)
  80aea8:	00bfff84 	movi	r2,-2
  80aeac:	1884703a 	and	r2,r3,r2
  80aeb0:	1001703a 	wrctl	status,r2
  
  return context;
  80aeb4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80aeb8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80aebc:	d0a0a117 	ldw	r2,-32124(gp)
  80aec0:	10800dc3 	ldbu	r2,55(r2)
  80aec4:	e0bff805 	stb	r2,-32(fp)
  80aec8:	e0bff617 	ldw	r2,-40(fp)
  80aecc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aed0:	e0bffe17 	ldw	r2,-8(fp)
  80aed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80aed8:	e0bff803 	ldbu	r2,-32(fp)
  80aedc:	00002906 	br	80af84 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aee0:	0005303a 	rdctl	r2,status
  80aee4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aee8:	e0fff717 	ldw	r3,-36(fp)
  80aeec:	00bfff84 	movi	r2,-2
  80aef0:	1884703a 	and	r2,r3,r2
  80aef4:	1001703a 	wrctl	status,r2
  
  return context;
  80aef8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80aefc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  80af00:	e0ffff03 	ldbu	r3,-4(fp)
  80af04:	008020b4 	movhi	r2,130
  80af08:	10b35b04 	addi	r2,r2,-12948
  80af0c:	18c7883a 	add	r3,r3,r3
  80af10:	18c7883a 	add	r3,r3,r3
  80af14:	10c5883a 	add	r2,r2,r3
  80af18:	10800017 	ldw	r2,0(r2)
  80af1c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80af20:	e0bffb17 	ldw	r2,-20(fp)
  80af24:	1000061e 	bne	r2,zero,80af40 <OSTaskDelReq+0xfc>
  80af28:	e0bff617 	ldw	r2,-40(fp)
  80af2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80af30:	e0bffa17 	ldw	r2,-24(fp)
  80af34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80af38:	008010c4 	movi	r2,67
  80af3c:	00001106 	br	80af84 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80af40:	e0bffb17 	ldw	r2,-20(fp)
  80af44:	10800058 	cmpnei	r2,r2,1
  80af48:	1000061e 	bne	r2,zero,80af64 <OSTaskDelReq+0x120>
  80af4c:	e0bff617 	ldw	r2,-40(fp)
  80af50:	e0bffc15 	stw	r2,-16(fp)
  80af54:	e0bffc17 	ldw	r2,-16(fp)
  80af58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80af5c:	00800f44 	movi	r2,61
  80af60:	00000806 	br	80af84 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80af64:	e0bffb17 	ldw	r2,-20(fp)
  80af68:	00c00fc4 	movi	r3,63
  80af6c:	10c00dc5 	stb	r3,55(r2)
  80af70:	e0bff617 	ldw	r2,-40(fp)
  80af74:	e0bffd15 	stw	r2,-12(fp)
  80af78:	e0bffd17 	ldw	r2,-12(fp)
  80af7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80af80:	0005883a 	mov	r2,zero
}
  80af84:	e037883a 	mov	sp,fp
  80af88:	df000017 	ldw	fp,0(sp)
  80af8c:	dec00104 	addi	sp,sp,4
  80af90:	f800283a 	ret

0080af94 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80af94:	defff404 	addi	sp,sp,-48
  80af98:	dfc00b15 	stw	ra,44(sp)
  80af9c:	df000a15 	stw	fp,40(sp)
  80afa0:	df000a04 	addi	fp,sp,40
  80afa4:	2005883a 	mov	r2,r4
  80afa8:	e17ffe15 	stw	r5,-8(fp)
  80afac:	e1bfff15 	stw	r6,-4(fp)
  80afb0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80afb4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80afb8:	e0bfff17 	ldw	r2,-4(fp)
  80afbc:	1000021e 	bne	r2,zero,80afc8 <OSTaskNameGet+0x34>
        return (0);
  80afc0:	0005883a 	mov	r2,zero
  80afc4:	00005406 	br	80b118 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80afc8:	e0bffd03 	ldbu	r2,-12(fp)
  80afcc:	10800570 	cmpltui	r2,r2,21
  80afd0:	1000081e 	bne	r2,zero,80aff4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80afd4:	e0bffd03 	ldbu	r2,-12(fp)
  80afd8:	10803fe0 	cmpeqi	r2,r2,255
  80afdc:	1000051e 	bne	r2,zero,80aff4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80afe0:	e0bfff17 	ldw	r2,-4(fp)
  80afe4:	00c00a84 	movi	r3,42
  80afe8:	10c00005 	stb	r3,0(r2)
            return (0);
  80afec:	0005883a 	mov	r2,zero
  80aff0:	00004906 	br	80b118 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80aff4:	e0bffe17 	ldw	r2,-8(fp)
  80aff8:	1000051e 	bne	r2,zero,80b010 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80affc:	e0bfff17 	ldw	r2,-4(fp)
  80b000:	00c00304 	movi	r3,12
  80b004:	10c00005 	stb	r3,0(r2)
        return (0);
  80b008:	0005883a 	mov	r2,zero
  80b00c:	00004206 	br	80b118 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80b010:	d0a0a003 	ldbu	r2,-32128(gp)
  80b014:	10803fcc 	andi	r2,r2,255
  80b018:	10000526 	beq	r2,zero,80b030 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  80b01c:	e0bfff17 	ldw	r2,-4(fp)
  80b020:	00c00444 	movi	r3,17
  80b024:	10c00005 	stb	r3,0(r2)
        return (0);
  80b028:	0005883a 	mov	r2,zero
  80b02c:	00003a06 	br	80b118 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b030:	0005303a 	rdctl	r2,status
  80b034:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b038:	e0fffc17 	ldw	r3,-16(fp)
  80b03c:	00bfff84 	movi	r2,-2
  80b040:	1884703a 	and	r2,r3,r2
  80b044:	1001703a 	wrctl	status,r2
  
  return context;
  80b048:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80b04c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80b050:	e0bffd03 	ldbu	r2,-12(fp)
  80b054:	10803fd8 	cmpnei	r2,r2,255
  80b058:	1000031e 	bne	r2,zero,80b068 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  80b05c:	d0a0a117 	ldw	r2,-32124(gp)
  80b060:	10800c83 	ldbu	r2,50(r2)
  80b064:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b068:	e0fffd03 	ldbu	r3,-12(fp)
  80b06c:	008020b4 	movhi	r2,130
  80b070:	10b35b04 	addi	r2,r2,-12948
  80b074:	18c7883a 	add	r3,r3,r3
  80b078:	18c7883a 	add	r3,r3,r3
  80b07c:	10c5883a 	add	r2,r2,r3
  80b080:	10800017 	ldw	r2,0(r2)
  80b084:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  80b088:	e0bff817 	ldw	r2,-32(fp)
  80b08c:	1000091e 	bne	r2,zero,80b0b4 <OSTaskNameGet+0x120>
  80b090:	e0bff617 	ldw	r2,-40(fp)
  80b094:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b098:	e0bff717 	ldw	r2,-36(fp)
  80b09c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80b0a0:	e0bfff17 	ldw	r2,-4(fp)
  80b0a4:	00c010c4 	movi	r3,67
  80b0a8:	10c00005 	stb	r3,0(r2)
        return (0);
  80b0ac:	0005883a 	mov	r2,zero
  80b0b0:	00001906 	br	80b118 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  80b0b4:	e0bff817 	ldw	r2,-32(fp)
  80b0b8:	10800058 	cmpnei	r2,r2,1
  80b0bc:	1000091e 	bne	r2,zero,80b0e4 <OSTaskNameGet+0x150>
  80b0c0:	e0bff617 	ldw	r2,-40(fp)
  80b0c4:	e0bff915 	stw	r2,-28(fp)
  80b0c8:	e0bff917 	ldw	r2,-28(fp)
  80b0cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80b0d0:	e0bfff17 	ldw	r2,-4(fp)
  80b0d4:	00c010c4 	movi	r3,67
  80b0d8:	10c00005 	stb	r3,0(r2)
        return (0);
  80b0dc:	0005883a 	mov	r2,zero
  80b0e0:	00000d06 	br	80b118 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80b0e4:	e0bff817 	ldw	r2,-32(fp)
  80b0e8:	10801304 	addi	r2,r2,76
  80b0ec:	100b883a 	mov	r5,r2
  80b0f0:	e13ffe17 	ldw	r4,-8(fp)
  80b0f4:	08061880 	call	806188 <OS_StrCopy>
  80b0f8:	e0bffb05 	stb	r2,-20(fp)
  80b0fc:	e0bff617 	ldw	r2,-40(fp)
  80b100:	e0bffa15 	stw	r2,-24(fp)
  80b104:	e0bffa17 	ldw	r2,-24(fp)
  80b108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b10c:	e0bfff17 	ldw	r2,-4(fp)
  80b110:	10000005 	stb	zero,0(r2)
    return (len);
  80b114:	e0bffb03 	ldbu	r2,-20(fp)
}
  80b118:	e037883a 	mov	sp,fp
  80b11c:	dfc00117 	ldw	ra,4(sp)
  80b120:	df000017 	ldw	fp,0(sp)
  80b124:	dec00204 	addi	sp,sp,8
  80b128:	f800283a 	ret

0080b12c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80b12c:	defff304 	addi	sp,sp,-52
  80b130:	dfc00c15 	stw	ra,48(sp)
  80b134:	df000b15 	stw	fp,44(sp)
  80b138:	df000b04 	addi	fp,sp,44
  80b13c:	2005883a 	mov	r2,r4
  80b140:	e17ffe15 	stw	r5,-8(fp)
  80b144:	e1bfff15 	stw	r6,-4(fp)
  80b148:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80b14c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80b150:	e0bfff17 	ldw	r2,-4(fp)
  80b154:	10005c26 	beq	r2,zero,80b2c8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  80b158:	e0bffd03 	ldbu	r2,-12(fp)
  80b15c:	10800570 	cmpltui	r2,r2,21
  80b160:	1000071e 	bne	r2,zero,80b180 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80b164:	e0bffd03 	ldbu	r2,-12(fp)
  80b168:	10803fe0 	cmpeqi	r2,r2,255
  80b16c:	1000041e 	bne	r2,zero,80b180 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  80b170:	e0bfff17 	ldw	r2,-4(fp)
  80b174:	00c00a84 	movi	r3,42
  80b178:	10c00005 	stb	r3,0(r2)
            return;
  80b17c:	00005306 	br	80b2cc <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  80b180:	e0bffe17 	ldw	r2,-8(fp)
  80b184:	1000041e 	bne	r2,zero,80b198 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  80b188:	e0bfff17 	ldw	r2,-4(fp)
  80b18c:	00c00304 	movi	r3,12
  80b190:	10c00005 	stb	r3,0(r2)
        return;
  80b194:	00004d06 	br	80b2cc <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80b198:	d0a0a003 	ldbu	r2,-32128(gp)
  80b19c:	10803fcc 	andi	r2,r2,255
  80b1a0:	10000426 	beq	r2,zero,80b1b4 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  80b1a4:	e0bfff17 	ldw	r2,-4(fp)
  80b1a8:	00c00484 	movi	r3,18
  80b1ac:	10c00005 	stb	r3,0(r2)
        return;
  80b1b0:	00004606 	br	80b2cc <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1b4:	0005303a 	rdctl	r2,status
  80b1b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b1bc:	e0fffc17 	ldw	r3,-16(fp)
  80b1c0:	00bfff84 	movi	r2,-2
  80b1c4:	1884703a 	and	r2,r3,r2
  80b1c8:	1001703a 	wrctl	status,r2
  
  return context;
  80b1cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80b1d0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  80b1d4:	e0bffd03 	ldbu	r2,-12(fp)
  80b1d8:	10803fd8 	cmpnei	r2,r2,255
  80b1dc:	1000031e 	bne	r2,zero,80b1ec <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  80b1e0:	d0a0a117 	ldw	r2,-32124(gp)
  80b1e4:	10800c83 	ldbu	r2,50(r2)
  80b1e8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b1ec:	e0fffd03 	ldbu	r3,-12(fp)
  80b1f0:	008020b4 	movhi	r2,130
  80b1f4:	10b35b04 	addi	r2,r2,-12948
  80b1f8:	18c7883a 	add	r3,r3,r3
  80b1fc:	18c7883a 	add	r3,r3,r3
  80b200:	10c5883a 	add	r2,r2,r3
  80b204:	10800017 	ldw	r2,0(r2)
  80b208:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  80b20c:	e0bff717 	ldw	r2,-36(fp)
  80b210:	1000081e 	bne	r2,zero,80b234 <OSTaskNameSet+0x108>
  80b214:	e0bff517 	ldw	r2,-44(fp)
  80b218:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b21c:	e0bff617 	ldw	r2,-40(fp)
  80b220:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80b224:	e0bfff17 	ldw	r2,-4(fp)
  80b228:	00c010c4 	movi	r3,67
  80b22c:	10c00005 	stb	r3,0(r2)
        return;
  80b230:	00002606 	br	80b2cc <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80b234:	e0bff717 	ldw	r2,-36(fp)
  80b238:	10800058 	cmpnei	r2,r2,1
  80b23c:	1000081e 	bne	r2,zero,80b260 <OSTaskNameSet+0x134>
  80b240:	e0bff517 	ldw	r2,-44(fp)
  80b244:	e0bff815 	stw	r2,-32(fp)
  80b248:	e0bff817 	ldw	r2,-32(fp)
  80b24c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80b250:	e0bfff17 	ldw	r2,-4(fp)
  80b254:	00c010c4 	movi	r3,67
  80b258:	10c00005 	stb	r3,0(r2)
        return;
  80b25c:	00001b06 	br	80b2cc <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80b260:	e13ffe17 	ldw	r4,-8(fp)
  80b264:	08061fc0 	call	8061fc <OS_StrLen>
  80b268:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  80b26c:	e0bffa03 	ldbu	r2,-24(fp)
  80b270:	10800830 	cmpltui	r2,r2,32
  80b274:	1000081e 	bne	r2,zero,80b298 <OSTaskNameSet+0x16c>
  80b278:	e0bff517 	ldw	r2,-44(fp)
  80b27c:	e0bff915 	stw	r2,-28(fp)
  80b280:	e0bff917 	ldw	r2,-28(fp)
  80b284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  80b288:	e0bfff17 	ldw	r2,-4(fp)
  80b28c:	00c01044 	movi	r3,65
  80b290:	10c00005 	stb	r3,0(r2)
        return;
  80b294:	00000d06 	br	80b2cc <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  80b298:	e0bff717 	ldw	r2,-36(fp)
  80b29c:	10801304 	addi	r2,r2,76
  80b2a0:	e17ffe17 	ldw	r5,-8(fp)
  80b2a4:	1009883a 	mov	r4,r2
  80b2a8:	08061880 	call	806188 <OS_StrCopy>
  80b2ac:	e0bff517 	ldw	r2,-44(fp)
  80b2b0:	e0bffb15 	stw	r2,-20(fp)
  80b2b4:	e0bffb17 	ldw	r2,-20(fp)
  80b2b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b2bc:	e0bfff17 	ldw	r2,-4(fp)
  80b2c0:	10000005 	stb	zero,0(r2)
  80b2c4:	00000106 	br	80b2cc <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  80b2c8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80b2cc:	e037883a 	mov	sp,fp
  80b2d0:	dfc00117 	ldw	ra,4(sp)
  80b2d4:	df000017 	ldw	fp,0(sp)
  80b2d8:	dec00204 	addi	sp,sp,8
  80b2dc:	f800283a 	ret

0080b2e0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  80b2e0:	defff404 	addi	sp,sp,-48
  80b2e4:	dfc00b15 	stw	ra,44(sp)
  80b2e8:	df000a15 	stw	fp,40(sp)
  80b2ec:	df000a04 	addi	fp,sp,40
  80b2f0:	2005883a 	mov	r2,r4
  80b2f4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80b2f8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  80b2fc:	e0bfff03 	ldbu	r2,-4(fp)
  80b300:	10800530 	cmpltui	r2,r2,20
  80b304:	1000021e 	bne	r2,zero,80b310 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80b308:	00800a84 	movi	r2,42
  80b30c:	00006406 	br	80b4a0 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b310:	0005303a 	rdctl	r2,status
  80b314:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b318:	e0fffe17 	ldw	r3,-8(fp)
  80b31c:	00bfff84 	movi	r2,-2
  80b320:	1884703a 	and	r2,r3,r2
  80b324:	1001703a 	wrctl	status,r2
  
  return context;
  80b328:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80b32c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  80b330:	e0ffff03 	ldbu	r3,-4(fp)
  80b334:	008020b4 	movhi	r2,130
  80b338:	10b35b04 	addi	r2,r2,-12948
  80b33c:	18c7883a 	add	r3,r3,r3
  80b340:	18c7883a 	add	r3,r3,r3
  80b344:	10c5883a 	add	r2,r2,r3
  80b348:	10800017 	ldw	r2,0(r2)
  80b34c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  80b350:	e0bff817 	ldw	r2,-32(fp)
  80b354:	1000061e 	bne	r2,zero,80b370 <OSTaskResume+0x90>
  80b358:	e0bff617 	ldw	r2,-40(fp)
  80b35c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b360:	e0bff717 	ldw	r2,-36(fp)
  80b364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  80b368:	00801184 	movi	r2,70
  80b36c:	00004c06 	br	80b4a0 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  80b370:	e0bff817 	ldw	r2,-32(fp)
  80b374:	10800058 	cmpnei	r2,r2,1
  80b378:	1000061e 	bne	r2,zero,80b394 <OSTaskResume+0xb4>
  80b37c:	e0bff617 	ldw	r2,-40(fp)
  80b380:	e0bff915 	stw	r2,-28(fp)
  80b384:	e0bff917 	ldw	r2,-28(fp)
  80b388:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b38c:	008010c4 	movi	r2,67
  80b390:	00004306 	br	80b4a0 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80b394:	e0bff817 	ldw	r2,-32(fp)
  80b398:	10800c03 	ldbu	r2,48(r2)
  80b39c:	10803fcc 	andi	r2,r2,255
  80b3a0:	1080020c 	andi	r2,r2,8
  80b3a4:	10003926 	beq	r2,zero,80b48c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80b3a8:	e0bff817 	ldw	r2,-32(fp)
  80b3ac:	10c00c03 	ldbu	r3,48(r2)
  80b3b0:	00bffdc4 	movi	r2,-9
  80b3b4:	1884703a 	and	r2,r3,r2
  80b3b8:	1007883a 	mov	r3,r2
  80b3bc:	e0bff817 	ldw	r2,-32(fp)
  80b3c0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80b3c4:	e0bff817 	ldw	r2,-32(fp)
  80b3c8:	10800c03 	ldbu	r2,48(r2)
  80b3cc:	10803fcc 	andi	r2,r2,255
  80b3d0:	1000281e 	bne	r2,zero,80b474 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  80b3d4:	e0bff817 	ldw	r2,-32(fp)
  80b3d8:	10800b8b 	ldhu	r2,46(r2)
  80b3dc:	10bfffcc 	andi	r2,r2,65535
  80b3e0:	10001f1e 	bne	r2,zero,80b460 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80b3e4:	e0bff817 	ldw	r2,-32(fp)
  80b3e8:	10c00d83 	ldbu	r3,54(r2)
  80b3ec:	d0a09e03 	ldbu	r2,-32136(gp)
  80b3f0:	1884b03a 	or	r2,r3,r2
  80b3f4:	d0a09e05 	stb	r2,-32136(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80b3f8:	e0bff817 	ldw	r2,-32(fp)
  80b3fc:	10800d03 	ldbu	r2,52(r2)
  80b400:	10c03fcc 	andi	r3,r2,255
  80b404:	e0bff817 	ldw	r2,-32(fp)
  80b408:	10800d03 	ldbu	r2,52(r2)
  80b40c:	11003fcc 	andi	r4,r2,255
  80b410:	d0a09e44 	addi	r2,gp,-32135
  80b414:	2085883a 	add	r2,r4,r2
  80b418:	11000003 	ldbu	r4,0(r2)
  80b41c:	e0bff817 	ldw	r2,-32(fp)
  80b420:	10800d43 	ldbu	r2,53(r2)
  80b424:	2084b03a 	or	r2,r4,r2
  80b428:	1009883a 	mov	r4,r2
  80b42c:	d0a09e44 	addi	r2,gp,-32135
  80b430:	1885883a 	add	r2,r3,r2
  80b434:	11000005 	stb	r4,0(r2)
  80b438:	e0bff617 	ldw	r2,-40(fp)
  80b43c:	e0bffa15 	stw	r2,-24(fp)
  80b440:	e0bffa17 	ldw	r2,-24(fp)
  80b444:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  80b448:	d0a09243 	ldbu	r2,-32183(gp)
  80b44c:	10803fcc 	andi	r2,r2,255
  80b450:	10800058 	cmpnei	r2,r2,1
  80b454:	10000b1e 	bne	r2,zero,80b484 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  80b458:	08060440 	call	806044 <OS_Sched>
  80b45c:	00000906 	br	80b484 <OSTaskResume+0x1a4>
  80b460:	e0bff617 	ldw	r2,-40(fp)
  80b464:	e0bffb15 	stw	r2,-20(fp)
  80b468:	e0bffb17 	ldw	r2,-20(fp)
  80b46c:	1001703a 	wrctl	status,r2
  80b470:	00000406 	br	80b484 <OSTaskResume+0x1a4>
  80b474:	e0bff617 	ldw	r2,-40(fp)
  80b478:	e0bffc15 	stw	r2,-16(fp)
  80b47c:	e0bffc17 	ldw	r2,-16(fp)
  80b480:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80b484:	0005883a 	mov	r2,zero
  80b488:	00000506 	br	80b4a0 <OSTaskResume+0x1c0>
  80b48c:	e0bff617 	ldw	r2,-40(fp)
  80b490:	e0bffd15 	stw	r2,-12(fp)
  80b494:	e0bffd17 	ldw	r2,-12(fp)
  80b498:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  80b49c:	00801104 	movi	r2,68
}
  80b4a0:	e037883a 	mov	sp,fp
  80b4a4:	dfc00117 	ldw	ra,4(sp)
  80b4a8:	df000017 	ldw	fp,0(sp)
  80b4ac:	dec00204 	addi	sp,sp,8
  80b4b0:	f800283a 	ret

0080b4b4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80b4b4:	defff304 	addi	sp,sp,-52
  80b4b8:	df000c15 	stw	fp,48(sp)
  80b4bc:	df000c04 	addi	fp,sp,48
  80b4c0:	2005883a 	mov	r2,r4
  80b4c4:	e17fff15 	stw	r5,-4(fp)
  80b4c8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80b4cc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  80b4d0:	e0bffe03 	ldbu	r2,-8(fp)
  80b4d4:	10800570 	cmpltui	r2,r2,21
  80b4d8:	1000051e 	bne	r2,zero,80b4f0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  80b4dc:	e0bffe03 	ldbu	r2,-8(fp)
  80b4e0:	10803fe0 	cmpeqi	r2,r2,255
  80b4e4:	1000021e 	bne	r2,zero,80b4f0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  80b4e8:	00800a84 	movi	r2,42
  80b4ec:	00005d06 	br	80b664 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  80b4f0:	e0bfff17 	ldw	r2,-4(fp)
  80b4f4:	1000021e 	bne	r2,zero,80b500 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  80b4f8:	00800244 	movi	r2,9
  80b4fc:	00005906 	br	80b664 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  80b500:	e0bfff17 	ldw	r2,-4(fp)
  80b504:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  80b508:	e0bfff17 	ldw	r2,-4(fp)
  80b50c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b510:	0005303a 	rdctl	r2,status
  80b514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b518:	e0fffd17 	ldw	r3,-12(fp)
  80b51c:	00bfff84 	movi	r2,-2
  80b520:	1884703a 	and	r2,r3,r2
  80b524:	1001703a 	wrctl	status,r2
  
  return context;
  80b528:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  80b52c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  80b530:	e0bffe03 	ldbu	r2,-8(fp)
  80b534:	10803fd8 	cmpnei	r2,r2,255
  80b538:	1000031e 	bne	r2,zero,80b548 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  80b53c:	d0a0a117 	ldw	r2,-32124(gp)
  80b540:	10800c83 	ldbu	r2,50(r2)
  80b544:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b548:	e0fffe03 	ldbu	r3,-8(fp)
  80b54c:	008020b4 	movhi	r2,130
  80b550:	10b35b04 	addi	r2,r2,-12948
  80b554:	18c7883a 	add	r3,r3,r3
  80b558:	18c7883a 	add	r3,r3,r3
  80b55c:	10c5883a 	add	r2,r2,r3
  80b560:	10800017 	ldw	r2,0(r2)
  80b564:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  80b568:	e0bff817 	ldw	r2,-32(fp)
  80b56c:	1000061e 	bne	r2,zero,80b588 <OSTaskStkChk+0xd4>
  80b570:	e0bff617 	ldw	r2,-40(fp)
  80b574:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b578:	e0bff717 	ldw	r2,-36(fp)
  80b57c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b580:	008010c4 	movi	r2,67
  80b584:	00003706 	br	80b664 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80b588:	e0bff817 	ldw	r2,-32(fp)
  80b58c:	10800058 	cmpnei	r2,r2,1
  80b590:	1000061e 	bne	r2,zero,80b5ac <OSTaskStkChk+0xf8>
  80b594:	e0bff617 	ldw	r2,-40(fp)
  80b598:	e0bff915 	stw	r2,-28(fp)
  80b59c:	e0bff917 	ldw	r2,-28(fp)
  80b5a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b5a4:	008010c4 	movi	r2,67
  80b5a8:	00002e06 	br	80b664 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  80b5ac:	e0bff817 	ldw	r2,-32(fp)
  80b5b0:	1080040b 	ldhu	r2,16(r2)
  80b5b4:	10bfffcc 	andi	r2,r2,65535
  80b5b8:	1080004c 	andi	r2,r2,1
  80b5bc:	1000061e 	bne	r2,zero,80b5d8 <OSTaskStkChk+0x124>
  80b5c0:	e0bff617 	ldw	r2,-40(fp)
  80b5c4:	e0bffa15 	stw	r2,-24(fp)
  80b5c8:	e0bffa17 	ldw	r2,-24(fp)
  80b5cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  80b5d0:	00801144 	movi	r2,69
  80b5d4:	00002306 	br	80b664 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  80b5d8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  80b5dc:	e0bff817 	ldw	r2,-32(fp)
  80b5e0:	10800317 	ldw	r2,12(r2)
  80b5e4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  80b5e8:	e0bff817 	ldw	r2,-32(fp)
  80b5ec:	10800217 	ldw	r2,8(r2)
  80b5f0:	e0bff415 	stw	r2,-48(fp)
  80b5f4:	e0bff617 	ldw	r2,-40(fp)
  80b5f8:	e0bffb15 	stw	r2,-20(fp)
  80b5fc:	e0bffb17 	ldw	r2,-20(fp)
  80b600:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80b604:	00000306 	br	80b614 <OSTaskStkChk+0x160>
        nfree++;
  80b608:	e0bff517 	ldw	r2,-44(fp)
  80b60c:	10800044 	addi	r2,r2,1
  80b610:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80b614:	e0bff417 	ldw	r2,-48(fp)
  80b618:	10c00104 	addi	r3,r2,4
  80b61c:	e0fff415 	stw	r3,-48(fp)
  80b620:	10800017 	ldw	r2,0(r2)
  80b624:	103ff826 	beq	r2,zero,80b608 <__alt_mem_epcs_flash_controller_0+0xff802608>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  80b628:	e0bff517 	ldw	r2,-44(fp)
  80b62c:	1085883a 	add	r2,r2,r2
  80b630:	1085883a 	add	r2,r2,r2
  80b634:	1007883a 	mov	r3,r2
  80b638:	e0bfff17 	ldw	r2,-4(fp)
  80b63c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  80b640:	e0fffc17 	ldw	r3,-16(fp)
  80b644:	e0bff517 	ldw	r2,-44(fp)
  80b648:	1885c83a 	sub	r2,r3,r2
  80b64c:	1085883a 	add	r2,r2,r2
  80b650:	1085883a 	add	r2,r2,r2
  80b654:	1007883a 	mov	r3,r2
  80b658:	e0bfff17 	ldw	r2,-4(fp)
  80b65c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  80b660:	0005883a 	mov	r2,zero
}
  80b664:	e037883a 	mov	sp,fp
  80b668:	df000017 	ldw	fp,0(sp)
  80b66c:	dec00104 	addi	sp,sp,4
  80b670:	f800283a 	ret

0080b674 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80b674:	defff504 	addi	sp,sp,-44
  80b678:	dfc00a15 	stw	ra,40(sp)
  80b67c:	df000915 	stw	fp,36(sp)
  80b680:	df000904 	addi	fp,sp,36
  80b684:	2005883a 	mov	r2,r4
  80b688:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b68c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  80b690:	e0bfff03 	ldbu	r2,-4(fp)
  80b694:	10800518 	cmpnei	r2,r2,20
  80b698:	1000021e 	bne	r2,zero,80b6a4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  80b69c:	008011c4 	movi	r2,71
  80b6a0:	00006806 	br	80b844 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80b6a4:	e0bfff03 	ldbu	r2,-4(fp)
  80b6a8:	10800530 	cmpltui	r2,r2,20
  80b6ac:	1000051e 	bne	r2,zero,80b6c4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  80b6b0:	e0bfff03 	ldbu	r2,-4(fp)
  80b6b4:	10803fe0 	cmpeqi	r2,r2,255
  80b6b8:	1000021e 	bne	r2,zero,80b6c4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  80b6bc:	00800a84 	movi	r2,42
  80b6c0:	00006006 	br	80b844 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6c4:	0005303a 	rdctl	r2,status
  80b6c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b6cc:	e0fffe17 	ldw	r3,-8(fp)
  80b6d0:	00bfff84 	movi	r2,-2
  80b6d4:	1884703a 	and	r2,r3,r2
  80b6d8:	1001703a 	wrctl	status,r2
  
  return context;
  80b6dc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  80b6e0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80b6e4:	e0bfff03 	ldbu	r2,-4(fp)
  80b6e8:	10803fd8 	cmpnei	r2,r2,255
  80b6ec:	1000061e 	bne	r2,zero,80b708 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  80b6f0:	d0a0a117 	ldw	r2,-32124(gp)
  80b6f4:	10800c83 	ldbu	r2,50(r2)
  80b6f8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  80b6fc:	00800044 	movi	r2,1
  80b700:	e0bff705 	stb	r2,-36(fp)
  80b704:	00000906 	br	80b72c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80b708:	d0a0a117 	ldw	r2,-32124(gp)
  80b70c:	10800c83 	ldbu	r2,50(r2)
  80b710:	10c03fcc 	andi	r3,r2,255
  80b714:	e0bfff03 	ldbu	r2,-4(fp)
  80b718:	1880031e 	bne	r3,r2,80b728 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  80b71c:	00800044 	movi	r2,1
  80b720:	e0bff705 	stb	r2,-36(fp)
  80b724:	00000106 	br	80b72c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  80b728:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b72c:	e0ffff03 	ldbu	r3,-4(fp)
  80b730:	008020b4 	movhi	r2,130
  80b734:	10b35b04 	addi	r2,r2,-12948
  80b738:	18c7883a 	add	r3,r3,r3
  80b73c:	18c7883a 	add	r3,r3,r3
  80b740:	10c5883a 	add	r2,r2,r3
  80b744:	10800017 	ldw	r2,0(r2)
  80b748:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  80b74c:	e0bffa17 	ldw	r2,-24(fp)
  80b750:	1000061e 	bne	r2,zero,80b76c <OSTaskSuspend+0xf8>
  80b754:	e0bff817 	ldw	r2,-32(fp)
  80b758:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b75c:	e0bff917 	ldw	r2,-28(fp)
  80b760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80b764:	00801204 	movi	r2,72
  80b768:	00003606 	br	80b844 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  80b76c:	e0bffa17 	ldw	r2,-24(fp)
  80b770:	10800058 	cmpnei	r2,r2,1
  80b774:	1000061e 	bne	r2,zero,80b790 <OSTaskSuspend+0x11c>
  80b778:	e0bff817 	ldw	r2,-32(fp)
  80b77c:	e0bffb15 	stw	r2,-20(fp)
  80b780:	e0bffb17 	ldw	r2,-20(fp)
  80b784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b788:	008010c4 	movi	r2,67
  80b78c:	00002d06 	br	80b844 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  80b790:	e0bffa17 	ldw	r2,-24(fp)
  80b794:	10800d03 	ldbu	r2,52(r2)
  80b798:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80b79c:	e0fffd03 	ldbu	r3,-12(fp)
  80b7a0:	e13ffd03 	ldbu	r4,-12(fp)
  80b7a4:	d0a09e44 	addi	r2,gp,-32135
  80b7a8:	2085883a 	add	r2,r4,r2
  80b7ac:	10800003 	ldbu	r2,0(r2)
  80b7b0:	1009883a 	mov	r4,r2
  80b7b4:	e0bffa17 	ldw	r2,-24(fp)
  80b7b8:	10800d43 	ldbu	r2,53(r2)
  80b7bc:	0084303a 	nor	r2,zero,r2
  80b7c0:	2084703a 	and	r2,r4,r2
  80b7c4:	1009883a 	mov	r4,r2
  80b7c8:	d0a09e44 	addi	r2,gp,-32135
  80b7cc:	1885883a 	add	r2,r3,r2
  80b7d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80b7d4:	e0fffd03 	ldbu	r3,-12(fp)
  80b7d8:	d0a09e44 	addi	r2,gp,-32135
  80b7dc:	1885883a 	add	r2,r3,r2
  80b7e0:	10800003 	ldbu	r2,0(r2)
  80b7e4:	10803fcc 	andi	r2,r2,255
  80b7e8:	1000071e 	bne	r2,zero,80b808 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  80b7ec:	e0bffa17 	ldw	r2,-24(fp)
  80b7f0:	10800d83 	ldbu	r2,54(r2)
  80b7f4:	0084303a 	nor	r2,zero,r2
  80b7f8:	1007883a 	mov	r3,r2
  80b7fc:	d0a09e03 	ldbu	r2,-32136(gp)
  80b800:	1884703a 	and	r2,r3,r2
  80b804:	d0a09e05 	stb	r2,-32136(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  80b808:	e0bffa17 	ldw	r2,-24(fp)
  80b80c:	10800c03 	ldbu	r2,48(r2)
  80b810:	10800214 	ori	r2,r2,8
  80b814:	1007883a 	mov	r3,r2
  80b818:	e0bffa17 	ldw	r2,-24(fp)
  80b81c:	10c00c05 	stb	r3,48(r2)
  80b820:	e0bff817 	ldw	r2,-32(fp)
  80b824:	e0bffc15 	stw	r2,-16(fp)
  80b828:	e0bffc17 	ldw	r2,-16(fp)
  80b82c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  80b830:	e0bff703 	ldbu	r2,-36(fp)
  80b834:	10800058 	cmpnei	r2,r2,1
  80b838:	1000011e 	bne	r2,zero,80b840 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  80b83c:	08060440 	call	806044 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80b840:	0005883a 	mov	r2,zero
}
  80b844:	e037883a 	mov	sp,fp
  80b848:	dfc00117 	ldw	ra,4(sp)
  80b84c:	df000017 	ldw	fp,0(sp)
  80b850:	dec00204 	addi	sp,sp,8
  80b854:	f800283a 	ret

0080b858 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  80b858:	defff604 	addi	sp,sp,-40
  80b85c:	dfc00915 	stw	ra,36(sp)
  80b860:	df000815 	stw	fp,32(sp)
  80b864:	df000804 	addi	fp,sp,32
  80b868:	2005883a 	mov	r2,r4
  80b86c:	e17fff15 	stw	r5,-4(fp)
  80b870:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b874:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  80b878:	e0bffe03 	ldbu	r2,-8(fp)
  80b87c:	10800570 	cmpltui	r2,r2,21
  80b880:	1000051e 	bne	r2,zero,80b898 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80b884:	e0bffe03 	ldbu	r2,-8(fp)
  80b888:	10803fe0 	cmpeqi	r2,r2,255
  80b88c:	1000021e 	bne	r2,zero,80b898 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  80b890:	00800a84 	movi	r2,42
  80b894:	00003406 	br	80b968 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  80b898:	e0bfff17 	ldw	r2,-4(fp)
  80b89c:	1000021e 	bne	r2,zero,80b8a8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  80b8a0:	00800244 	movi	r2,9
  80b8a4:	00003006 	br	80b968 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b8a8:	0005303a 	rdctl	r2,status
  80b8ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b8b0:	e0fffd17 	ldw	r3,-12(fp)
  80b8b4:	00bfff84 	movi	r2,-2
  80b8b8:	1884703a 	and	r2,r3,r2
  80b8bc:	1001703a 	wrctl	status,r2
  
  return context;
  80b8c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80b8c4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  80b8c8:	e0bffe03 	ldbu	r2,-8(fp)
  80b8cc:	10803fd8 	cmpnei	r2,r2,255
  80b8d0:	1000031e 	bne	r2,zero,80b8e0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  80b8d4:	d0a0a117 	ldw	r2,-32124(gp)
  80b8d8:	10800c83 	ldbu	r2,50(r2)
  80b8dc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b8e0:	e0fffe03 	ldbu	r3,-8(fp)
  80b8e4:	008020b4 	movhi	r2,130
  80b8e8:	10b35b04 	addi	r2,r2,-12948
  80b8ec:	18c7883a 	add	r3,r3,r3
  80b8f0:	18c7883a 	add	r3,r3,r3
  80b8f4:	10c5883a 	add	r2,r2,r3
  80b8f8:	10800017 	ldw	r2,0(r2)
  80b8fc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  80b900:	e0bffa17 	ldw	r2,-24(fp)
  80b904:	1000061e 	bne	r2,zero,80b920 <OSTaskQuery+0xc8>
  80b908:	e0bff817 	ldw	r2,-32(fp)
  80b90c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b910:	e0bff917 	ldw	r2,-28(fp)
  80b914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  80b918:	00800a44 	movi	r2,41
  80b91c:	00001206 	br	80b968 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  80b920:	e0bffa17 	ldw	r2,-24(fp)
  80b924:	10800058 	cmpnei	r2,r2,1
  80b928:	1000061e 	bne	r2,zero,80b944 <OSTaskQuery+0xec>
  80b92c:	e0bff817 	ldw	r2,-32(fp)
  80b930:	e0bffb15 	stw	r2,-20(fp)
  80b934:	e0bffb17 	ldw	r2,-20(fp)
  80b938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b93c:	008010c4 	movi	r2,67
  80b940:	00000906 	br	80b968 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80b944:	01801b04 	movi	r6,108
  80b948:	e17ffa17 	ldw	r5,-24(fp)
  80b94c:	e13fff17 	ldw	r4,-4(fp)
  80b950:	0805fdc0 	call	805fdc <OS_MemCopy>
  80b954:	e0bff817 	ldw	r2,-32(fp)
  80b958:	e0bffc15 	stw	r2,-16(fp)
  80b95c:	e0bffc17 	ldw	r2,-16(fp)
  80b960:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80b964:	0005883a 	mov	r2,zero
}
  80b968:	e037883a 	mov	sp,fp
  80b96c:	dfc00117 	ldw	ra,4(sp)
  80b970:	df000017 	ldw	fp,0(sp)
  80b974:	dec00204 	addi	sp,sp,8
  80b978:	f800283a 	ret

0080b97c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  80b97c:	defffc04 	addi	sp,sp,-16
  80b980:	df000315 	stw	fp,12(sp)
  80b984:	df000304 	addi	fp,sp,12
  80b988:	e13ffd15 	stw	r4,-12(fp)
  80b98c:	e17ffe15 	stw	r5,-8(fp)
  80b990:	3005883a 	mov	r2,r6
  80b994:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  80b998:	e0bfff0b 	ldhu	r2,-4(fp)
  80b99c:	1080004c 	andi	r2,r2,1
  80b9a0:	10000d26 	beq	r2,zero,80b9d8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80b9a4:	e0bfff0b 	ldhu	r2,-4(fp)
  80b9a8:	1080008c 	andi	r2,r2,2
  80b9ac:	10000a26 	beq	r2,zero,80b9d8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80b9b0:	00000706 	br	80b9d0 <OS_TaskStkClr+0x54>
                size--;
  80b9b4:	e0bffe17 	ldw	r2,-8(fp)
  80b9b8:	10bfffc4 	addi	r2,r2,-1
  80b9bc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  80b9c0:	e0bffd17 	ldw	r2,-12(fp)
  80b9c4:	10c00104 	addi	r3,r2,4
  80b9c8:	e0fffd15 	stw	r3,-12(fp)
  80b9cc:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80b9d0:	e0bffe17 	ldw	r2,-8(fp)
  80b9d4:	103ff71e 	bne	r2,zero,80b9b4 <__alt_mem_epcs_flash_controller_0+0xff8029b4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  80b9d8:	0001883a 	nop
  80b9dc:	e037883a 	mov	sp,fp
  80b9e0:	df000017 	ldw	fp,0(sp)
  80b9e4:	dec00104 	addi	sp,sp,4
  80b9e8:	f800283a 	ret

0080b9ec <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  80b9ec:	defff904 	addi	sp,sp,-28
  80b9f0:	dfc00615 	stw	ra,24(sp)
  80b9f4:	df000515 	stw	fp,20(sp)
  80b9f8:	df000504 	addi	fp,sp,20
  80b9fc:	2005883a 	mov	r2,r4
  80ba00:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ba04:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ba08:	d0a0a003 	ldbu	r2,-32128(gp)
  80ba0c:	10803fcc 	andi	r2,r2,255
  80ba10:	1000311e 	bne	r2,zero,80bad8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80ba14:	e0bfff0b 	ldhu	r2,-4(fp)
  80ba18:	10003026 	beq	r2,zero,80badc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ba1c:	0005303a 	rdctl	r2,status
  80ba20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ba24:	e0fffe17 	ldw	r3,-8(fp)
  80ba28:	00bfff84 	movi	r2,-2
  80ba2c:	1884703a 	and	r2,r3,r2
  80ba30:	1001703a 	wrctl	status,r2
  
  return context;
  80ba34:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80ba38:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  80ba3c:	d0a0a117 	ldw	r2,-32124(gp)
  80ba40:	10800d03 	ldbu	r2,52(r2)
  80ba44:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80ba48:	e0fffd03 	ldbu	r3,-12(fp)
  80ba4c:	e13ffd03 	ldbu	r4,-12(fp)
  80ba50:	d0a09e44 	addi	r2,gp,-32135
  80ba54:	2085883a 	add	r2,r4,r2
  80ba58:	10800003 	ldbu	r2,0(r2)
  80ba5c:	1009883a 	mov	r4,r2
  80ba60:	d0a0a117 	ldw	r2,-32124(gp)
  80ba64:	10800d43 	ldbu	r2,53(r2)
  80ba68:	0084303a 	nor	r2,zero,r2
  80ba6c:	2084703a 	and	r2,r4,r2
  80ba70:	1009883a 	mov	r4,r2
  80ba74:	d0a09e44 	addi	r2,gp,-32135
  80ba78:	1885883a 	add	r2,r3,r2
  80ba7c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  80ba80:	e0fffd03 	ldbu	r3,-12(fp)
  80ba84:	d0a09e44 	addi	r2,gp,-32135
  80ba88:	1885883a 	add	r2,r3,r2
  80ba8c:	10800003 	ldbu	r2,0(r2)
  80ba90:	10803fcc 	andi	r2,r2,255
  80ba94:	1000071e 	bne	r2,zero,80bab4 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80ba98:	d0a0a117 	ldw	r2,-32124(gp)
  80ba9c:	10800d83 	ldbu	r2,54(r2)
  80baa0:	0084303a 	nor	r2,zero,r2
  80baa4:	1007883a 	mov	r3,r2
  80baa8:	d0a09e03 	ldbu	r2,-32136(gp)
  80baac:	1884703a 	and	r2,r3,r2
  80bab0:	d0a09e05 	stb	r2,-32136(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80bab4:	d0a0a117 	ldw	r2,-32124(gp)
  80bab8:	e0ffff0b 	ldhu	r3,-4(fp)
  80babc:	10c00b8d 	sth	r3,46(r2)
  80bac0:	e0bffb17 	ldw	r2,-20(fp)
  80bac4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bac8:	e0bffc17 	ldw	r2,-16(fp)
  80bacc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  80bad0:	08060440 	call	806044 <OS_Sched>
  80bad4:	00000106 	br	80badc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  80bad8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  80badc:	e037883a 	mov	sp,fp
  80bae0:	dfc00117 	ldw	ra,4(sp)
  80bae4:	df000017 	ldw	fp,0(sp)
  80bae8:	dec00204 	addi	sp,sp,8
  80baec:	f800283a 	ret

0080baf0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  80baf0:	defff704 	addi	sp,sp,-36
  80baf4:	dfc00815 	stw	ra,32(sp)
  80baf8:	df000715 	stw	fp,28(sp)
  80bafc:	dc000615 	stw	r16,24(sp)
  80bb00:	df000704 	addi	fp,sp,28
  80bb04:	2011883a 	mov	r8,r4
  80bb08:	2809883a 	mov	r4,r5
  80bb0c:	3007883a 	mov	r3,r6
  80bb10:	3805883a 	mov	r2,r7
  80bb14:	e23ffb05 	stb	r8,-20(fp)
  80bb18:	e13ffc05 	stb	r4,-16(fp)
  80bb1c:	e0fffd05 	stb	r3,-12(fp)
  80bb20:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80bb24:	d0a0a003 	ldbu	r2,-32128(gp)
  80bb28:	10803fcc 	andi	r2,r2,255
  80bb2c:	10000226 	beq	r2,zero,80bb38 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  80bb30:	00801544 	movi	r2,85
  80bb34:	00004706 	br	80bc54 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  80bb38:	e0bffb03 	ldbu	r2,-20(fp)
  80bb3c:	1000081e 	bne	r2,zero,80bb60 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  80bb40:	e0bffc03 	ldbu	r2,-16(fp)
  80bb44:	1000061e 	bne	r2,zero,80bb60 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  80bb48:	e0bffd03 	ldbu	r2,-12(fp)
  80bb4c:	1000041e 	bne	r2,zero,80bb60 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  80bb50:	e0bffe0b 	ldhu	r2,-8(fp)
  80bb54:	1000021e 	bne	r2,zero,80bb60 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  80bb58:	00801504 	movi	r2,84
  80bb5c:	00003d06 	br	80bc54 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  80bb60:	e0bffc03 	ldbu	r2,-16(fp)
  80bb64:	10800f30 	cmpltui	r2,r2,60
  80bb68:	1000021e 	bne	r2,zero,80bb74 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  80bb6c:	00801444 	movi	r2,81
  80bb70:	00003806 	br	80bc54 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  80bb74:	e0bffd03 	ldbu	r2,-12(fp)
  80bb78:	10800f30 	cmpltui	r2,r2,60
  80bb7c:	1000021e 	bne	r2,zero,80bb88 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  80bb80:	00801484 	movi	r2,82
  80bb84:	00003306 	br	80bc54 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  80bb88:	e0bffe0b 	ldhu	r2,-8(fp)
  80bb8c:	1080fa30 	cmpltui	r2,r2,1000
  80bb90:	1000021e 	bne	r2,zero,80bb9c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  80bb94:	008014c4 	movi	r2,83
  80bb98:	00002e06 	br	80bc54 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80bb9c:	e0bffb03 	ldbu	r2,-20(fp)
  80bba0:	01438404 	movi	r5,3600
  80bba4:	1009883a 	mov	r4,r2
  80bba8:	080388c0 	call	80388c <__mulsi3>
  80bbac:	1021883a 	mov	r16,r2
  80bbb0:	e0bffc03 	ldbu	r2,-16(fp)
  80bbb4:	01400f04 	movi	r5,60
  80bbb8:	1009883a 	mov	r4,r2
  80bbbc:	080388c0 	call	80388c <__mulsi3>
  80bbc0:	8087883a 	add	r3,r16,r2
  80bbc4:	e0bffd03 	ldbu	r2,-12(fp)
  80bbc8:	1885883a 	add	r2,r3,r2
  80bbcc:	0140fa04 	movi	r5,1000
  80bbd0:	1009883a 	mov	r4,r2
  80bbd4:	080388c0 	call	80388c <__mulsi3>
  80bbd8:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  80bbdc:	e0bffe0b 	ldhu	r2,-8(fp)
  80bbe0:	0140fa04 	movi	r5,1000
  80bbe4:	1009883a 	mov	r4,r2
  80bbe8:	080388c0 	call	80388c <__mulsi3>
  80bbec:	0140fa04 	movi	r5,1000
  80bbf0:	1009883a 	mov	r4,r2
  80bbf4:	0800ba00 	call	800ba0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80bbf8:	8085883a 	add	r2,r16,r2
  80bbfc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  80bc00:	e0bffa17 	ldw	r2,-24(fp)
  80bc04:	1004d43a 	srli	r2,r2,16
  80bc08:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  80bc0c:	e0bffa17 	ldw	r2,-24(fp)
  80bc10:	10bfffcc 	andi	r2,r2,65535
  80bc14:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  80bc18:	e0bffa17 	ldw	r2,-24(fp)
  80bc1c:	10bfffcc 	andi	r2,r2,65535
  80bc20:	1009883a 	mov	r4,r2
  80bc24:	080b9ec0 	call	80b9ec <OSTimeDly>
    while (loops > 0) {
  80bc28:	00000706 	br	80bc48 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  80bc2c:	01200014 	movui	r4,32768
  80bc30:	080b9ec0 	call	80b9ec <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  80bc34:	01200014 	movui	r4,32768
  80bc38:	080b9ec0 	call	80b9ec <OSTimeDly>
        loops--;
  80bc3c:	e0bff90b 	ldhu	r2,-28(fp)
  80bc40:	10bfffc4 	addi	r2,r2,-1
  80bc44:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  80bc48:	e0bff90b 	ldhu	r2,-28(fp)
  80bc4c:	103ff71e 	bne	r2,zero,80bc2c <__alt_mem_epcs_flash_controller_0+0xff802c2c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  80bc50:	0005883a 	mov	r2,zero
}
  80bc54:	e6ffff04 	addi	sp,fp,-4
  80bc58:	dfc00217 	ldw	ra,8(sp)
  80bc5c:	df000117 	ldw	fp,4(sp)
  80bc60:	dc000017 	ldw	r16,0(sp)
  80bc64:	dec00304 	addi	sp,sp,12
  80bc68:	f800283a 	ret

0080bc6c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  80bc6c:	defff504 	addi	sp,sp,-44
  80bc70:	dfc00a15 	stw	ra,40(sp)
  80bc74:	df000915 	stw	fp,36(sp)
  80bc78:	df000904 	addi	fp,sp,36
  80bc7c:	2005883a 	mov	r2,r4
  80bc80:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80bc84:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  80bc88:	e0bfff03 	ldbu	r2,-4(fp)
  80bc8c:	10800530 	cmpltui	r2,r2,20
  80bc90:	1000021e 	bne	r2,zero,80bc9c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80bc94:	00800a84 	movi	r2,42
  80bc98:	00006406 	br	80be2c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bc9c:	0005303a 	rdctl	r2,status
  80bca0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bca4:	e0fffe17 	ldw	r3,-8(fp)
  80bca8:	00bfff84 	movi	r2,-2
  80bcac:	1884703a 	and	r2,r3,r2
  80bcb0:	1001703a 	wrctl	status,r2
  
  return context;
  80bcb4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  80bcb8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  80bcbc:	e0ffff03 	ldbu	r3,-4(fp)
  80bcc0:	008020b4 	movhi	r2,130
  80bcc4:	10b35b04 	addi	r2,r2,-12948
  80bcc8:	18c7883a 	add	r3,r3,r3
  80bccc:	18c7883a 	add	r3,r3,r3
  80bcd0:	10c5883a 	add	r2,r2,r3
  80bcd4:	10800017 	ldw	r2,0(r2)
  80bcd8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  80bcdc:	e0bff917 	ldw	r2,-28(fp)
  80bce0:	1000061e 	bne	r2,zero,80bcfc <OSTimeDlyResume+0x90>
  80bce4:	e0bff717 	ldw	r2,-36(fp)
  80bce8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bcec:	e0bff817 	ldw	r2,-32(fp)
  80bcf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80bcf4:	008010c4 	movi	r2,67
  80bcf8:	00004c06 	br	80be2c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80bcfc:	e0bff917 	ldw	r2,-28(fp)
  80bd00:	10800058 	cmpnei	r2,r2,1
  80bd04:	1000061e 	bne	r2,zero,80bd20 <OSTimeDlyResume+0xb4>
  80bd08:	e0bff717 	ldw	r2,-36(fp)
  80bd0c:	e0bffa15 	stw	r2,-24(fp)
  80bd10:	e0bffa17 	ldw	r2,-24(fp)
  80bd14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80bd18:	008010c4 	movi	r2,67
  80bd1c:	00004306 	br	80be2c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  80bd20:	e0bff917 	ldw	r2,-28(fp)
  80bd24:	10800b8b 	ldhu	r2,46(r2)
  80bd28:	10bfffcc 	andi	r2,r2,65535
  80bd2c:	1000061e 	bne	r2,zero,80bd48 <OSTimeDlyResume+0xdc>
  80bd30:	e0bff717 	ldw	r2,-36(fp)
  80bd34:	e0bffb15 	stw	r2,-20(fp)
  80bd38:	e0bffb17 	ldw	r2,-20(fp)
  80bd3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  80bd40:	00801404 	movi	r2,80
  80bd44:	00003906 	br	80be2c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  80bd48:	e0bff917 	ldw	r2,-28(fp)
  80bd4c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80bd50:	e0bff917 	ldw	r2,-28(fp)
  80bd54:	10800c03 	ldbu	r2,48(r2)
  80bd58:	10803fcc 	andi	r2,r2,255
  80bd5c:	10800dcc 	andi	r2,r2,55
  80bd60:	10000b26 	beq	r2,zero,80bd90 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  80bd64:	e0bff917 	ldw	r2,-28(fp)
  80bd68:	10c00c03 	ldbu	r3,48(r2)
  80bd6c:	00bff204 	movi	r2,-56
  80bd70:	1884703a 	and	r2,r3,r2
  80bd74:	1007883a 	mov	r3,r2
  80bd78:	e0bff917 	ldw	r2,-28(fp)
  80bd7c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  80bd80:	e0bff917 	ldw	r2,-28(fp)
  80bd84:	00c00044 	movi	r3,1
  80bd88:	10c00c45 	stb	r3,49(r2)
  80bd8c:	00000206 	br	80bd98 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  80bd90:	e0bff917 	ldw	r2,-28(fp)
  80bd94:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  80bd98:	e0bff917 	ldw	r2,-28(fp)
  80bd9c:	10800c03 	ldbu	r2,48(r2)
  80bda0:	10803fcc 	andi	r2,r2,255
  80bda4:	1080020c 	andi	r2,r2,8
  80bda8:	10001b1e 	bne	r2,zero,80be18 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  80bdac:	e0bff917 	ldw	r2,-28(fp)
  80bdb0:	10c00d83 	ldbu	r3,54(r2)
  80bdb4:	d0a09e03 	ldbu	r2,-32136(gp)
  80bdb8:	1884b03a 	or	r2,r3,r2
  80bdbc:	d0a09e05 	stb	r2,-32136(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80bdc0:	e0bff917 	ldw	r2,-28(fp)
  80bdc4:	10800d03 	ldbu	r2,52(r2)
  80bdc8:	10c03fcc 	andi	r3,r2,255
  80bdcc:	e0bff917 	ldw	r2,-28(fp)
  80bdd0:	10800d03 	ldbu	r2,52(r2)
  80bdd4:	11003fcc 	andi	r4,r2,255
  80bdd8:	d0a09e44 	addi	r2,gp,-32135
  80bddc:	2085883a 	add	r2,r4,r2
  80bde0:	11000003 	ldbu	r4,0(r2)
  80bde4:	e0bff917 	ldw	r2,-28(fp)
  80bde8:	10800d43 	ldbu	r2,53(r2)
  80bdec:	2084b03a 	or	r2,r4,r2
  80bdf0:	1009883a 	mov	r4,r2
  80bdf4:	d0a09e44 	addi	r2,gp,-32135
  80bdf8:	1885883a 	add	r2,r3,r2
  80bdfc:	11000005 	stb	r4,0(r2)
  80be00:	e0bff717 	ldw	r2,-36(fp)
  80be04:	e0bffc15 	stw	r2,-16(fp)
  80be08:	e0bffc17 	ldw	r2,-16(fp)
  80be0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  80be10:	08060440 	call	806044 <OS_Sched>
  80be14:	00000406 	br	80be28 <OSTimeDlyResume+0x1bc>
  80be18:	e0bff717 	ldw	r2,-36(fp)
  80be1c:	e0bffd15 	stw	r2,-12(fp)
  80be20:	e0bffd17 	ldw	r2,-12(fp)
  80be24:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  80be28:	0005883a 	mov	r2,zero
}
  80be2c:	e037883a 	mov	sp,fp
  80be30:	dfc00117 	ldw	ra,4(sp)
  80be34:	df000017 	ldw	fp,0(sp)
  80be38:	dec00204 	addi	sp,sp,8
  80be3c:	f800283a 	ret

0080be40 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  80be40:	defffb04 	addi	sp,sp,-20
  80be44:	df000415 	stw	fp,16(sp)
  80be48:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80be4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80be50:	0005303a 	rdctl	r2,status
  80be54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80be58:	e0fffe17 	ldw	r3,-8(fp)
  80be5c:	00bfff84 	movi	r2,-2
  80be60:	1884703a 	and	r2,r3,r2
  80be64:	1001703a 	wrctl	status,r2
  
  return context;
  80be68:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80be6c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  80be70:	d0a0a217 	ldw	r2,-32120(gp)
  80be74:	e0bffd15 	stw	r2,-12(fp)
  80be78:	e0bffc17 	ldw	r2,-16(fp)
  80be7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be80:	e0bfff17 	ldw	r2,-4(fp)
  80be84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  80be88:	e0bffd17 	ldw	r2,-12(fp)
}
  80be8c:	e037883a 	mov	sp,fp
  80be90:	df000017 	ldw	fp,0(sp)
  80be94:	dec00104 	addi	sp,sp,4
  80be98:	f800283a 	ret

0080be9c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  80be9c:	defffb04 	addi	sp,sp,-20
  80bea0:	df000415 	stw	fp,16(sp)
  80bea4:	df000404 	addi	fp,sp,16
  80bea8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80beac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80beb0:	0005303a 	rdctl	r2,status
  80beb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80beb8:	e0fffd17 	ldw	r3,-12(fp)
  80bebc:	00bfff84 	movi	r2,-2
  80bec0:	1884703a 	and	r2,r3,r2
  80bec4:	1001703a 	wrctl	status,r2
  
  return context;
  80bec8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80becc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  80bed0:	e0bfff17 	ldw	r2,-4(fp)
  80bed4:	d0a0a215 	stw	r2,-32120(gp)
  80bed8:	e0bffc17 	ldw	r2,-16(fp)
  80bedc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bee0:	e0bffe17 	ldw	r2,-8(fp)
  80bee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80bee8:	0001883a 	nop
  80beec:	e037883a 	mov	sp,fp
  80bef0:	df000017 	ldw	fp,0(sp)
  80bef4:	dec00104 	addi	sp,sp,4
  80bef8:	f800283a 	ret

0080befc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80befc:	defffd04 	addi	sp,sp,-12
  80bf00:	dfc00215 	stw	ra,8(sp)
  80bf04:	df000115 	stw	fp,4(sp)
  80bf08:	df000104 	addi	fp,sp,4
  80bf0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80bf10:	d1603c04 	addi	r5,gp,-32528
  80bf14:	e13fff17 	ldw	r4,-4(fp)
  80bf18:	080fcb40 	call	80fcb4 <alt_dev_llist_insert>
}
  80bf1c:	e037883a 	mov	sp,fp
  80bf20:	dfc00117 	ldw	ra,4(sp)
  80bf24:	df000017 	ldw	fp,0(sp)
  80bf28:	dec00204 	addi	sp,sp,8
  80bf2c:	f800283a 	ret

0080bf30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bf30:	defffd04 	addi	sp,sp,-12
  80bf34:	dfc00215 	stw	ra,8(sp)
  80bf38:	df000115 	stw	fp,4(sp)
  80bf3c:	df000104 	addi	fp,sp,4
  80bf40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80bf44:	08105780 	call	810578 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bf48:	00800044 	movi	r2,1
  80bf4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bf50:	0001883a 	nop
  80bf54:	e037883a 	mov	sp,fp
  80bf58:	dfc00117 	ldw	ra,4(sp)
  80bf5c:	df000017 	ldw	fp,0(sp)
  80bf60:	dec00204 	addi	sp,sp,8
  80bf64:	f800283a 	ret

0080bf68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bf68:	defffe04 	addi	sp,sp,-8
  80bf6c:	dfc00115 	stw	ra,4(sp)
  80bf70:	df000015 	stw	fp,0(sp)
  80bf74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80bf78:	01c0fa04 	movi	r7,1000
  80bf7c:	01800104 	movi	r6,4
  80bf80:	000b883a 	mov	r5,zero
  80bf84:	01004074 	movhi	r4,257
  80bf88:	21281004 	addi	r4,r4,-24512
  80bf8c:	080d8c40 	call	80d8c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  80bf90:	01002074 	movhi	r4,129
  80bf94:	21072804 	addi	r4,r4,7328
  80bf98:	080c0580 	call	80c058 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80bf9c:	000d883a 	mov	r6,zero
  80bfa0:	000b883a 	mov	r5,zero
  80bfa4:	01002074 	movhi	r4,129
  80bfa8:	21076504 	addi	r4,r4,7572
  80bfac:	080cc840 	call	80cc84 <altera_avalon_jtag_uart_init>
  80bfb0:	01002074 	movhi	r4,129
  80bfb4:	21075b04 	addi	r4,r4,7532
  80bfb8:	080befc0 	call	80befc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80bfbc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  80bfc0:	01800044 	movi	r6,1
  80bfc4:	000b883a 	mov	r5,zero
  80bfc8:	01002074 	movhi	r4,129
  80bfcc:	210b8004 	addi	r4,r4,11776
  80bfd0:	080da500 	call	80da50 <altera_avalon_uart_init>
  80bfd4:	01002074 	movhi	r4,129
  80bfd8:	210b7604 	addi	r4,r4,11736
  80bfdc:	080befc0 	call	80befc <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
  80bfe0:	01002074 	movhi	r4,129
  80bfe4:	210baa04 	addi	r4,r4,11944
  80bfe8:	080fed40 	call	80fed4 <alt_fs_reg>
    FIFOED_AVALON_UART_INIT ( CAM_UART, cam_uart);
  80bfec:	018001c4 	movi	r6,7
  80bff0:	000b883a 	mov	r5,zero
  80bff4:	01002074 	movhi	r4,129
  80bff8:	210bbe04 	addi	r4,r4,12024
  80bffc:	080f7dc0 	call	80f7dc <fifoed_avalon_uart_init>
  80c000:	01002074 	movhi	r4,129
  80c004:	210bb404 	addi	r4,r4,11984
  80c008:	080befc0 	call	80befc <alt_dev_reg>
}
  80c00c:	0001883a 	nop
  80c010:	e037883a 	mov	sp,fp
  80c014:	dfc00117 	ldw	ra,4(sp)
  80c018:	df000017 	ldw	fp,0(sp)
  80c01c:	dec00204 	addi	sp,sp,8
  80c020:	f800283a 	ret

0080c024 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  80c024:	defffd04 	addi	sp,sp,-12
  80c028:	dfc00215 	stw	ra,8(sp)
  80c02c:	df000115 	stw	fp,4(sp)
  80c030:	df000104 	addi	fp,sp,4
  80c034:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  80c038:	d1607304 	addi	r5,gp,-32308
  80c03c:	e13fff17 	ldw	r4,-4(fp)
  80c040:	080fcb40 	call	80fcb4 <alt_dev_llist_insert>
}
  80c044:	e037883a 	mov	sp,fp
  80c048:	dfc00117 	ldw	ra,4(sp)
  80c04c:	df000017 	ldw	fp,0(sp)
  80c050:	dec00204 	addi	sp,sp,8
  80c054:	f800283a 	ret

0080c058 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  80c058:	defffc04 	addi	sp,sp,-16
  80c05c:	dfc00315 	stw	ra,12(sp)
  80c060:	df000215 	stw	fp,8(sp)
  80c064:	df000204 	addi	fp,sp,8
  80c068:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80c06c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  80c070:	e13fff17 	ldw	r4,-4(fp)
  80c074:	080c0ac0 	call	80c0ac <alt_epcs_flash_query>
  80c078:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  80c07c:	e0bffe17 	ldw	r2,-8(fp)
  80c080:	1000041e 	bne	r2,zero,80c094 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  80c084:	e0bfff17 	ldw	r2,-4(fp)
  80c088:	1009883a 	mov	r4,r2
  80c08c:	080c0240 	call	80c024 <alt_flash_device_register>
  80c090:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  80c094:	e0bffe17 	ldw	r2,-8(fp)
}
  80c098:	e037883a 	mov	sp,fp
  80c09c:	dfc00117 	ldw	ra,4(sp)
  80c0a0:	df000017 	ldw	fp,0(sp)
  80c0a4:	dec00204 	addi	sp,sp,8
  80c0a8:	f800283a 	ret

0080c0ac <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  80c0ac:	defffc04 	addi	sp,sp,-16
  80c0b0:	dfc00315 	stw	ra,12(sp)
  80c0b4:	df000215 	stw	fp,8(sp)
  80c0b8:	df000204 	addi	fp,sp,8
  80c0bc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80c0c0:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  80c0c4:	e0bfff17 	ldw	r2,-4(fp)
  80c0c8:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  80c0cc:	e0bfff17 	ldw	r2,-4(fp)
  80c0d0:	10802e17 	ldw	r2,184(r2)
  80c0d4:	1009883a 	mov	r4,r2
  80c0d8:	080edb40 	call	80edb4 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  80c0dc:	10c03fcc 	andi	r3,r2,255
  80c0e0:	e0bfff17 	ldw	r2,-4(fp)
  80c0e4:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  80c0e8:	e0bfff17 	ldw	r2,-4(fp)
  80c0ec:	10803017 	ldw	r2,192(r2)
  80c0f0:	10800598 	cmpnei	r2,r2,22
  80c0f4:	10000a1e 	bne	r2,zero,80c120 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  80c0f8:	e0bfff17 	ldw	r2,-4(fp)
  80c0fc:	00c02034 	movhi	r3,128
  80c100:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  80c104:	e0bfff17 	ldw	r2,-4(fp)
  80c108:	00c02004 	movi	r3,128
  80c10c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80c110:	e0bfff17 	ldw	r2,-4(fp)
  80c114:	00c00074 	movhi	r3,1
  80c118:	10c01015 	stw	r3,64(r2)
  80c11c:	0000ce06 	br	80c458 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  80c120:	e0bfff17 	ldw	r2,-4(fp)
  80c124:	10803017 	ldw	r2,192(r2)
  80c128:	10800518 	cmpnei	r2,r2,20
  80c12c:	10000a1e 	bne	r2,zero,80c158 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  80c130:	e0bfff17 	ldw	r2,-4(fp)
  80c134:	00c00834 	movhi	r3,32
  80c138:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  80c13c:	e0bfff17 	ldw	r2,-4(fp)
  80c140:	00c00804 	movi	r3,32
  80c144:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80c148:	e0bfff17 	ldw	r2,-4(fp)
  80c14c:	00c00074 	movhi	r3,1
  80c150:	10c01015 	stw	r3,64(r2)
  80c154:	0000c006 	br	80c458 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  80c158:	e0bfff17 	ldw	r2,-4(fp)
  80c15c:	10803017 	ldw	r2,192(r2)
  80c160:	108004d8 	cmpnei	r2,r2,19
  80c164:	10000a1e 	bne	r2,zero,80c190 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  80c168:	e0bfff17 	ldw	r2,-4(fp)
  80c16c:	00c00434 	movhi	r3,16
  80c170:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  80c174:	e0bfff17 	ldw	r2,-4(fp)
  80c178:	00c00404 	movi	r3,16
  80c17c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80c180:	e0bfff17 	ldw	r2,-4(fp)
  80c184:	00c00074 	movhi	r3,1
  80c188:	10c01015 	stw	r3,64(r2)
  80c18c:	0000b206 	br	80c458 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  80c190:	e0bfff17 	ldw	r2,-4(fp)
  80c194:	10803017 	ldw	r2,192(r2)
  80c198:	10800498 	cmpnei	r2,r2,18
  80c19c:	10000a1e 	bne	r2,zero,80c1c8 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  80c1a0:	e0bfff17 	ldw	r2,-4(fp)
  80c1a4:	00c00234 	movhi	r3,8
  80c1a8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  80c1ac:	e0bfff17 	ldw	r2,-4(fp)
  80c1b0:	00c00204 	movi	r3,8
  80c1b4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80c1b8:	e0bfff17 	ldw	r2,-4(fp)
  80c1bc:	00c00074 	movhi	r3,1
  80c1c0:	10c01015 	stw	r3,64(r2)
  80c1c4:	0000a406 	br	80c458 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  80c1c8:	e0bfff17 	ldw	r2,-4(fp)
  80c1cc:	10803017 	ldw	r2,192(r2)
  80c1d0:	10800418 	cmpnei	r2,r2,16
  80c1d4:	10000a1e 	bne	r2,zero,80c200 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  80c1d8:	e0bfff17 	ldw	r2,-4(fp)
  80c1dc:	00c000b4 	movhi	r3,2
  80c1e0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  80c1e4:	e0bfff17 	ldw	r2,-4(fp)
  80c1e8:	00c00104 	movi	r3,4
  80c1ec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  80c1f0:	e0bfff17 	ldw	r2,-4(fp)
  80c1f4:	00e00014 	movui	r3,32768
  80c1f8:	10c01015 	stw	r3,64(r2)
  80c1fc:	00009606 	br	80c458 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  80c200:	e0bfff17 	ldw	r2,-4(fp)
  80c204:	10802e17 	ldw	r2,184(r2)
  80c208:	1009883a 	mov	r4,r2
  80c20c:	080ee1c0 	call	80ee1c <epcs_read_device_id>
  80c210:	1007883a 	mov	r3,r2
  80c214:	e0bfff17 	ldw	r2,-4(fp)
  80c218:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  80c21c:	e0bfff17 	ldw	r2,-4(fp)
  80c220:	10c03017 	ldw	r3,192(r2)
  80c224:	00804034 	movhi	r2,256
  80c228:	10bfffc4 	addi	r2,r2,-1
  80c22c:	1886703a 	and	r3,r3,r2
  80c230:	00800874 	movhi	r2,33
  80c234:	10ae8544 	addi	r2,r2,-17899
  80c238:	18800a1e 	bne	r3,r2,80c264 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  80c23c:	e0bfff17 	ldw	r2,-4(fp)
  80c240:	00c00834 	movhi	r3,32
  80c244:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  80c248:	e0bfff17 	ldw	r2,-4(fp)
  80c24c:	00c00804 	movi	r3,32
  80c250:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c254:	e0bfff17 	ldw	r2,-4(fp)
  80c258:	00c00074 	movhi	r3,1
  80c25c:	10c01015 	stw	r3,64(r2)
  80c260:	00007d06 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  80c264:	e0bfff17 	ldw	r2,-4(fp)
  80c268:	10c03017 	ldw	r3,192(r2)
  80c26c:	00804034 	movhi	r2,256
  80c270:	10bfffc4 	addi	r2,r2,-1
  80c274:	1886703a 	and	r3,r3,r2
  80c278:	00800874 	movhi	r2,33
  80c27c:	10ae8584 	addi	r2,r2,-17898
  80c280:	18800a1e 	bne	r3,r2,80c2ac <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  80c284:	e0bfff17 	ldw	r2,-4(fp)
  80c288:	00c01034 	movhi	r3,64
  80c28c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  80c290:	e0bfff17 	ldw	r2,-4(fp)
  80c294:	00c01004 	movi	r3,64
  80c298:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c29c:	e0bfff17 	ldw	r2,-4(fp)
  80c2a0:	00c00074 	movhi	r3,1
  80c2a4:	10c01015 	stw	r3,64(r2)
  80c2a8:	00006b06 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  80c2ac:	e0bfff17 	ldw	r2,-4(fp)
  80c2b0:	10c03017 	ldw	r3,192(r2)
  80c2b4:	00804034 	movhi	r2,256
  80c2b8:	10bfffc4 	addi	r2,r2,-1
  80c2bc:	1886703a 	and	r3,r3,r2
  80c2c0:	00800874 	movhi	r2,33
  80c2c4:	10ae85c4 	addi	r2,r2,-17897
  80c2c8:	18800a1e 	bne	r3,r2,80c2f4 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  80c2cc:	e0bfff17 	ldw	r2,-4(fp)
  80c2d0:	00c02034 	movhi	r3,128
  80c2d4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  80c2d8:	e0bfff17 	ldw	r2,-4(fp)
  80c2dc:	00c02004 	movi	r3,128
  80c2e0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c2e4:	e0bfff17 	ldw	r2,-4(fp)
  80c2e8:	00c00074 	movhi	r3,1
  80c2ec:	10c01015 	stw	r3,64(r2)
  80c2f0:	00005906 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  80c2f4:	e0bfff17 	ldw	r2,-4(fp)
  80c2f8:	10c03017 	ldw	r3,192(r2)
  80c2fc:	00804034 	movhi	r2,256
  80c300:	10bfffc4 	addi	r2,r2,-1
  80c304:	1886703a 	and	r3,r3,r2
  80c308:	00800874 	movhi	r2,33
  80c30c:	10ae8604 	addi	r2,r2,-17896
  80c310:	18800a1e 	bne	r3,r2,80c33c <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  80c314:	e0bfff17 	ldw	r2,-4(fp)
  80c318:	00c04034 	movhi	r3,256
  80c31c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  80c320:	e0bfff17 	ldw	r2,-4(fp)
  80c324:	00c04004 	movi	r3,256
  80c328:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c32c:	e0bfff17 	ldw	r2,-4(fp)
  80c330:	00c00074 	movhi	r3,1
  80c334:	10c01015 	stw	r3,64(r2)
  80c338:	00004706 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  80c33c:	e0bfff17 	ldw	r2,-4(fp)
  80c340:	10803017 	ldw	r2,192(r2)
  80c344:	10803fcc 	andi	r2,r2,255
  80c348:	10800618 	cmpnei	r2,r2,24
  80c34c:	10000a1e 	bne	r2,zero,80c378 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  80c350:	e0bfff17 	ldw	r2,-4(fp)
  80c354:	00c04034 	movhi	r3,256
  80c358:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  80c35c:	e0bfff17 	ldw	r2,-4(fp)
  80c360:	00c01004 	movi	r3,64
  80c364:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  80c368:	e0bfff17 	ldw	r2,-4(fp)
  80c36c:	00c00134 	movhi	r3,4
  80c370:	10c01015 	stw	r3,64(r2)
  80c374:	00003806 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  80c378:	e0bfff17 	ldw	r2,-4(fp)
  80c37c:	10803017 	ldw	r2,192(r2)
  80c380:	10803fcc 	andi	r2,r2,255
  80c384:	10800658 	cmpnei	r2,r2,25
  80c388:	10000d1e 	bne	r2,zero,80c3c0 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  80c38c:	e0bfff17 	ldw	r2,-4(fp)
  80c390:	00c08034 	movhi	r3,512
  80c394:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  80c398:	e0bfff17 	ldw	r2,-4(fp)
  80c39c:	00c08004 	movi	r3,512
  80c3a0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c3a4:	e0bfff17 	ldw	r2,-4(fp)
  80c3a8:	00c00074 	movhi	r3,1
  80c3ac:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  80c3b0:	e0bfff17 	ldw	r2,-4(fp)
  80c3b4:	00c00044 	movi	r3,1
  80c3b8:	10c03215 	stw	r3,200(r2)
  80c3bc:	00002606 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  80c3c0:	e0bfff17 	ldw	r2,-4(fp)
  80c3c4:	10803017 	ldw	r2,192(r2)
  80c3c8:	10803fcc 	andi	r2,r2,255
  80c3cc:	10800818 	cmpnei	r2,r2,32
  80c3d0:	10000d1e 	bne	r2,zero,80c408 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  80c3d4:	e0bfff17 	ldw	r2,-4(fp)
  80c3d8:	00c10034 	movhi	r3,1024
  80c3dc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  80c3e0:	e0bfff17 	ldw	r2,-4(fp)
  80c3e4:	00c10004 	movi	r3,1024
  80c3e8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c3ec:	e0bfff17 	ldw	r2,-4(fp)
  80c3f0:	00c00074 	movhi	r3,1
  80c3f4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  80c3f8:	e0bfff17 	ldw	r2,-4(fp)
  80c3fc:	00c00044 	movi	r3,1
  80c400:	10c03215 	stw	r3,200(r2)
  80c404:	00001406 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  80c408:	e0bfff17 	ldw	r2,-4(fp)
  80c40c:	10803017 	ldw	r2,192(r2)
  80c410:	10803fcc 	andi	r2,r2,255
  80c414:	10800858 	cmpnei	r2,r2,33
  80c418:	10000d1e 	bne	r2,zero,80c450 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  80c41c:	e0bfff17 	ldw	r2,-4(fp)
  80c420:	00c20034 	movhi	r3,2048
  80c424:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  80c428:	e0bfff17 	ldw	r2,-4(fp)
  80c42c:	00c20004 	movi	r3,2048
  80c430:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80c434:	e0bfff17 	ldw	r2,-4(fp)
  80c438:	00c00074 	movhi	r3,1
  80c43c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  80c440:	e0bfff17 	ldw	r2,-4(fp)
  80c444:	00c00044 	movi	r3,1
  80c448:	10c03215 	stw	r3,200(r2)
  80c44c:	00000206 	br	80c458 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  80c450:	00bffb44 	movi	r2,-19
  80c454:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  80c458:	e0bfff17 	ldw	r2,-4(fp)
  80c45c:	10800e17 	ldw	r2,56(r2)
  80c460:	1007883a 	mov	r3,r2
  80c464:	e0bfff17 	ldw	r2,-4(fp)
  80c468:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  80c46c:	e0bfff17 	ldw	r2,-4(fp)
  80c470:	00c00044 	movi	r3,1
  80c474:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  80c478:	e0bfff17 	ldw	r2,-4(fp)
  80c47c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  80c480:	e0bfff17 	ldw	r2,-4(fp)
  80c484:	00c04004 	movi	r3,256
  80c488:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  80c48c:	e0bffe17 	ldw	r2,-8(fp)
}
  80c490:	e037883a 	mov	sp,fp
  80c494:	dfc00117 	ldw	ra,4(sp)
  80c498:	df000017 	ldw	fp,0(sp)
  80c49c:	dec00204 	addi	sp,sp,8
  80c4a0:	f800283a 	ret

0080c4a4 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  80c4a4:	deffee04 	addi	sp,sp,-72
  80c4a8:	dfc01115 	stw	ra,68(sp)
  80c4ac:	df001015 	stw	fp,64(sp)
  80c4b0:	df001004 	addi	fp,sp,64
  80c4b4:	e13ffc15 	stw	r4,-16(fp)
  80c4b8:	e17ffd15 	stw	r5,-12(fp)
  80c4bc:	e1bffe15 	stw	r6,-8(fp)
  80c4c0:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  80c4c4:	00800804 	movi	r2,32
  80c4c8:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  80c4cc:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  80c4d0:	00002706 	br	80c570 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  80c4d4:	e0fff117 	ldw	r3,-60(fp)
  80c4d8:	e0bfff17 	ldw	r2,-4(fp)
  80c4dc:	1880012e 	bgeu	r3,r2,80c4e4 <alt_epcs_flash_memcmp+0x40>
  80c4e0:	1805883a 	mov	r2,r3
  80c4e4:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  80c4e8:	e0fffe17 	ldw	r3,-8(fp)
  80c4ec:	e0bff017 	ldw	r2,-64(fp)
  80c4f0:	1885883a 	add	r2,r3,r2
  80c4f4:	e0fff404 	addi	r3,fp,-48
  80c4f8:	e1fff217 	ldw	r7,-56(fp)
  80c4fc:	180d883a 	mov	r6,r3
  80c500:	100b883a 	mov	r5,r2
  80c504:	e13ffc17 	ldw	r4,-16(fp)
  80c508:	080ca880 	call	80ca88 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  80c50c:	1000020e 	bge	r2,zero,80c518 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  80c510:	00bfffc4 	movi	r2,-1
  80c514:	00001906 	br	80c57c <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  80c518:	e0bff017 	ldw	r2,-64(fp)
  80c51c:	e0fffd17 	ldw	r3,-12(fp)
  80c520:	1885883a 	add	r2,r3,r2
  80c524:	e13ff217 	ldw	r4,-56(fp)
  80c528:	e0fff404 	addi	r3,fp,-48
  80c52c:	200d883a 	mov	r6,r4
  80c530:	180b883a 	mov	r5,r3
  80c534:	1009883a 	mov	r4,r2
  80c538:	0810dc80 	call	810dc8 <memcmp>
  80c53c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  80c540:	e0bff317 	ldw	r2,-52(fp)
  80c544:	10000226 	beq	r2,zero,80c550 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  80c548:	e0bff317 	ldw	r2,-52(fp)
  80c54c:	00000b06 	br	80c57c <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  80c550:	e0bff217 	ldw	r2,-56(fp)
  80c554:	e0ffff17 	ldw	r3,-4(fp)
  80c558:	1885c83a 	sub	r2,r3,r2
  80c55c:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  80c560:	e0fff017 	ldw	r3,-64(fp)
  80c564:	e0bff217 	ldw	r2,-56(fp)
  80c568:	1885883a 	add	r2,r3,r2
  80c56c:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  80c570:	e0bfff17 	ldw	r2,-4(fp)
  80c574:	103fd71e 	bne	r2,zero,80c4d4 <__alt_mem_epcs_flash_controller_0+0xff8034d4>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  80c578:	0005883a 	mov	r2,zero
}
  80c57c:	e037883a 	mov	sp,fp
  80c580:	dfc00117 	ldw	ra,4(sp)
  80c584:	df000017 	ldw	fp,0(sp)
  80c588:	dec00204 	addi	sp,sp,8
  80c58c:	f800283a 	ret

0080c590 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  80c590:	defff404 	addi	sp,sp,-48
  80c594:	dfc00b15 	stw	ra,44(sp)
  80c598:	df000a15 	stw	fp,40(sp)
  80c59c:	df000a04 	addi	fp,sp,40
  80c5a0:	e13ffc15 	stw	r4,-16(fp)
  80c5a4:	e17ffd15 	stw	r5,-12(fp)
  80c5a8:	e1bffe15 	stw	r6,-8(fp)
  80c5ac:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  80c5b0:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  80c5b4:	e03ff815 	stw	zero,-32(fp)
  80c5b8:	00008306 	br	80c7c8 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  80c5bc:	e0fffc17 	ldw	r3,-16(fp)
  80c5c0:	e0bff817 	ldw	r2,-32(fp)
  80c5c4:	1004913a 	slli	r2,r2,4
  80c5c8:	1885883a 	add	r2,r3,r2
  80c5cc:	10800d04 	addi	r2,r2,52
  80c5d0:	10800017 	ldw	r2,0(r2)
  80c5d4:	e0fffd17 	ldw	r3,-12(fp)
  80c5d8:	18807816 	blt	r3,r2,80c7bc <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  80c5dc:	e0fffc17 	ldw	r3,-16(fp)
  80c5e0:	e0bff817 	ldw	r2,-32(fp)
  80c5e4:	1004913a 	slli	r2,r2,4
  80c5e8:	1885883a 	add	r2,r3,r2
  80c5ec:	10800d04 	addi	r2,r2,52
  80c5f0:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  80c5f4:	e13ffc17 	ldw	r4,-16(fp)
  80c5f8:	e0bff817 	ldw	r2,-32(fp)
  80c5fc:	1004913a 	slli	r2,r2,4
  80c600:	2085883a 	add	r2,r4,r2
  80c604:	10800e04 	addi	r2,r2,56
  80c608:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  80c60c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  80c610:	e0fffd17 	ldw	r3,-12(fp)
  80c614:	1880690e 	bge	r3,r2,80c7bc <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  80c618:	e0fffc17 	ldw	r3,-16(fp)
  80c61c:	e0bff817 	ldw	r2,-32(fp)
  80c620:	1004913a 	slli	r2,r2,4
  80c624:	1885883a 	add	r2,r3,r2
  80c628:	10800d04 	addi	r2,r2,52
  80c62c:	10800017 	ldw	r2,0(r2)
  80c630:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  80c634:	e03ff915 	stw	zero,-28(fp)
  80c638:	00005806 	br	80c79c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  80c63c:	e0fffd17 	ldw	r3,-12(fp)
  80c640:	e0bffa17 	ldw	r2,-24(fp)
  80c644:	18804916 	blt	r3,r2,80c76c <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  80c648:	e0fffc17 	ldw	r3,-16(fp)
  80c64c:	e0bff817 	ldw	r2,-32(fp)
  80c650:	10800104 	addi	r2,r2,4
  80c654:	1004913a 	slli	r2,r2,4
  80c658:	1885883a 	add	r2,r3,r2
  80c65c:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  80c660:	e0bffa17 	ldw	r2,-24(fp)
  80c664:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  80c668:	e0fffd17 	ldw	r3,-12(fp)
  80c66c:	18803f0e 	bge	r3,r2,80c76c <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  80c670:	e0fffc17 	ldw	r3,-16(fp)
  80c674:	e0bff817 	ldw	r2,-32(fp)
  80c678:	10800104 	addi	r2,r2,4
  80c67c:	1004913a 	slli	r2,r2,4
  80c680:	1885883a 	add	r2,r3,r2
  80c684:	10c00017 	ldw	r3,0(r2)
  80c688:	e0bffa17 	ldw	r2,-24(fp)
  80c68c:	1887883a 	add	r3,r3,r2
  80c690:	e0bffd17 	ldw	r2,-12(fp)
  80c694:	1885c83a 	sub	r2,r3,r2
  80c698:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  80c69c:	e0fffb17 	ldw	r3,-20(fp)
  80c6a0:	e0bfff17 	ldw	r2,-4(fp)
  80c6a4:	1880010e 	bge	r3,r2,80c6ac <alt_epcs_flash_write+0x11c>
  80c6a8:	1805883a 	mov	r2,r3
  80c6ac:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  80c6b0:	e0bffb17 	ldw	r2,-20(fp)
  80c6b4:	100f883a 	mov	r7,r2
  80c6b8:	e1bffd17 	ldw	r6,-12(fp)
  80c6bc:	e17ffe17 	ldw	r5,-8(fp)
  80c6c0:	e13ffc17 	ldw	r4,-16(fp)
  80c6c4:	080c4a40 	call	80c4a4 <alt_epcs_flash_memcmp>
  80c6c8:	10001226 	beq	r2,zero,80c714 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  80c6cc:	e0bffc17 	ldw	r2,-16(fp)
  80c6d0:	10800817 	ldw	r2,32(r2)
  80c6d4:	e17ffa17 	ldw	r5,-24(fp)
  80c6d8:	e13ffc17 	ldw	r4,-16(fp)
  80c6dc:	103ee83a 	callr	r2
  80c6e0:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  80c6e4:	e0bff717 	ldw	r2,-36(fp)
  80c6e8:	10000a1e 	bne	r2,zero,80c714 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  80c6ec:	e0bffc17 	ldw	r2,-16(fp)
  80c6f0:	10800917 	ldw	r2,36(r2)
  80c6f4:	e0fffb17 	ldw	r3,-20(fp)
  80c6f8:	d8c00015 	stw	r3,0(sp)
  80c6fc:	e1fffe17 	ldw	r7,-8(fp)
  80c700:	e1bffd17 	ldw	r6,-12(fp)
  80c704:	e17ffa17 	ldw	r5,-24(fp)
  80c708:	e13ffc17 	ldw	r4,-16(fp)
  80c70c:	103ee83a 	callr	r2
  80c710:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  80c714:	e0ffff17 	ldw	r3,-4(fp)
  80c718:	e0bffb17 	ldw	r2,-20(fp)
  80c71c:	18802e26 	beq	r3,r2,80c7d8 <alt_epcs_flash_write+0x248>
  80c720:	e0bff717 	ldw	r2,-36(fp)
  80c724:	10002c1e 	bne	r2,zero,80c7d8 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  80c728:	e0ffff17 	ldw	r3,-4(fp)
  80c72c:	e0bffb17 	ldw	r2,-20(fp)
  80c730:	1885c83a 	sub	r2,r3,r2
  80c734:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  80c738:	e0fffc17 	ldw	r3,-16(fp)
  80c73c:	e0bff817 	ldw	r2,-32(fp)
  80c740:	10800104 	addi	r2,r2,4
  80c744:	1004913a 	slli	r2,r2,4
  80c748:	1885883a 	add	r2,r3,r2
  80c74c:	10c00017 	ldw	r3,0(r2)
  80c750:	e0bffa17 	ldw	r2,-24(fp)
  80c754:	1885883a 	add	r2,r3,r2
  80c758:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  80c75c:	e0bffb17 	ldw	r2,-20(fp)
  80c760:	e0fffe17 	ldw	r3,-8(fp)
  80c764:	1885883a 	add	r2,r3,r2
  80c768:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  80c76c:	e0fffc17 	ldw	r3,-16(fp)
  80c770:	e0bff817 	ldw	r2,-32(fp)
  80c774:	10800104 	addi	r2,r2,4
  80c778:	1004913a 	slli	r2,r2,4
  80c77c:	1885883a 	add	r2,r3,r2
  80c780:	10800017 	ldw	r2,0(r2)
  80c784:	e0fffa17 	ldw	r3,-24(fp)
  80c788:	1885883a 	add	r2,r3,r2
  80c78c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  80c790:	e0bff917 	ldw	r2,-28(fp)
  80c794:	10800044 	addi	r2,r2,1
  80c798:	e0bff915 	stw	r2,-28(fp)
  80c79c:	e0fffc17 	ldw	r3,-16(fp)
  80c7a0:	e0bff817 	ldw	r2,-32(fp)
  80c7a4:	1004913a 	slli	r2,r2,4
  80c7a8:	1885883a 	add	r2,r3,r2
  80c7ac:	10800f04 	addi	r2,r2,60
  80c7b0:	10800017 	ldw	r2,0(r2)
  80c7b4:	e0fff917 	ldw	r3,-28(fp)
  80c7b8:	18bfa016 	blt	r3,r2,80c63c <__alt_mem_epcs_flash_controller_0+0xff80363c>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  80c7bc:	e0bff817 	ldw	r2,-32(fp)
  80c7c0:	10800044 	addi	r2,r2,1
  80c7c4:	e0bff815 	stw	r2,-32(fp)
  80c7c8:	e0bffc17 	ldw	r2,-16(fp)
  80c7cc:	10800c17 	ldw	r2,48(r2)
  80c7d0:	e0fff817 	ldw	r3,-32(fp)
  80c7d4:	18bf7916 	blt	r3,r2,80c5bc <__alt_mem_epcs_flash_controller_0+0xff8035bc>
      }
    }
  }

finished:
  return ret_code;
  80c7d8:	e0bff717 	ldw	r2,-36(fp)
}
  80c7dc:	e037883a 	mov	sp,fp
  80c7e0:	dfc00117 	ldw	ra,4(sp)
  80c7e4:	df000017 	ldw	fp,0(sp)
  80c7e8:	dec00204 	addi	sp,sp,8
  80c7ec:	f800283a 	ret

0080c7f0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  80c7f0:	defffa04 	addi	sp,sp,-24
  80c7f4:	df000515 	stw	fp,20(sp)
  80c7f8:	df000504 	addi	fp,sp,20
  80c7fc:	e13ffd15 	stw	r4,-12(fp)
  80c800:	e17ffe15 	stw	r5,-8(fp)
  80c804:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  80c808:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  80c80c:	e0bffd17 	ldw	r2,-12(fp)
  80c810:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  80c814:	e0bffc17 	ldw	r2,-16(fp)
  80c818:	10c00c17 	ldw	r3,48(r2)
  80c81c:	e0bfff17 	ldw	r2,-4(fp)
  80c820:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  80c824:	e0bffc17 	ldw	r2,-16(fp)
  80c828:	10800c17 	ldw	r2,48(r2)
  80c82c:	1000031e 	bne	r2,zero,80c83c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  80c830:	00bffec4 	movi	r2,-5
  80c834:	e0bffb15 	stw	r2,-20(fp)
  80c838:	00000b06 	br	80c868 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  80c83c:	e0bffc17 	ldw	r2,-16(fp)
  80c840:	10800c17 	ldw	r2,48(r2)
  80c844:	10800250 	cmplti	r2,r2,9
  80c848:	1000031e 	bne	r2,zero,80c858 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  80c84c:	00bffd04 	movi	r2,-12
  80c850:	e0bffb15 	stw	r2,-20(fp)
  80c854:	00000406 	br	80c868 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  80c858:	e0bffc17 	ldw	r2,-16(fp)
  80c85c:	10c00d04 	addi	r3,r2,52
  80c860:	e0bffe17 	ldw	r2,-8(fp)
  80c864:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  80c868:	e0bffb17 	ldw	r2,-20(fp)
}
  80c86c:	e037883a 	mov	sp,fp
  80c870:	df000017 	ldw	fp,0(sp)
  80c874:	dec00104 	addi	sp,sp,4
  80c878:	f800283a 	ret

0080c87c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  80c87c:	defff904 	addi	sp,sp,-28
  80c880:	df000615 	stw	fp,24(sp)
  80c884:	df000604 	addi	fp,sp,24
  80c888:	e13ffe15 	stw	r4,-8(fp)
  80c88c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80c890:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80c894:	e0bffe17 	ldw	r2,-8(fp)
  80c898:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  80c89c:	e0bffb17 	ldw	r2,-20(fp)
  80c8a0:	10800c17 	ldw	r2,48(r2)
  80c8a4:	10bfffc4 	addi	r2,r2,-1
  80c8a8:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  80c8ac:	e0fffb17 	ldw	r3,-20(fp)
  80c8b0:	e0bffc17 	ldw	r2,-16(fp)
  80c8b4:	1004913a 	slli	r2,r2,4
  80c8b8:	1885883a 	add	r2,r3,r2
  80c8bc:	10800d04 	addi	r2,r2,52
  80c8c0:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  80c8c4:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  80c8c8:	e13ffb17 	ldw	r4,-20(fp)
  80c8cc:	e0bffc17 	ldw	r2,-16(fp)
  80c8d0:	1004913a 	slli	r2,r2,4
  80c8d4:	2085883a 	add	r2,r4,r2
  80c8d8:	10800e04 	addi	r2,r2,56
  80c8dc:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  80c8e0:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  80c8e4:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  80c8e8:	e0bfff17 	ldw	r2,-4(fp)
  80c8ec:	e0fffd17 	ldw	r3,-12(fp)
  80c8f0:	1880022e 	bgeu	r3,r2,80c8fc <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  80c8f4:	00bffec4 	movi	r2,-5
  80c8f8:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  80c8fc:	e0bffa17 	ldw	r2,-24(fp)
}
  80c900:	e037883a 	mov	sp,fp
  80c904:	df000017 	ldw	fp,0(sp)
  80c908:	dec00104 	addi	sp,sp,4
  80c90c:	f800283a 	ret

0080c910 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  80c910:	defffa04 	addi	sp,sp,-24
  80c914:	dfc00515 	stw	ra,20(sp)
  80c918:	df000415 	stw	fp,16(sp)
  80c91c:	df000404 	addi	fp,sp,16
  80c920:	e13ffe15 	stw	r4,-8(fp)
  80c924:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80c928:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80c92c:	e0bffe17 	ldw	r2,-8(fp)
  80c930:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  80c934:	e17fff17 	ldw	r5,-4(fp)
  80c938:	e13ffe17 	ldw	r4,-8(fp)
  80c93c:	080c87c0 	call	80c87c <alt_epcs_test_address>
  80c940:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  80c944:	e0bffc17 	ldw	r2,-16(fp)
  80c948:	10000916 	blt	r2,zero,80c970 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  80c94c:	e0bffd17 	ldw	r2,-12(fp)
  80c950:	10c02e17 	ldw	r3,184(r2)
  80c954:	e13fff17 	ldw	r4,-4(fp)
  80c958:	e0bffd17 	ldw	r2,-12(fp)
  80c95c:	10803217 	ldw	r2,200(r2)
  80c960:	100d883a 	mov	r6,r2
  80c964:	200b883a 	mov	r5,r4
  80c968:	1809883a 	mov	r4,r3
  80c96c:	080e9e80 	call	80e9e8 <epcs_sector_erase>
  }
  return ret_code;
  80c970:	e0bffc17 	ldw	r2,-16(fp)
}
  80c974:	e037883a 	mov	sp,fp
  80c978:	dfc00117 	ldw	ra,4(sp)
  80c97c:	df000017 	ldw	fp,0(sp)
  80c980:	dec00204 	addi	sp,sp,8
  80c984:	f800283a 	ret

0080c988 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  80c988:	defff404 	addi	sp,sp,-48
  80c98c:	dfc00b15 	stw	ra,44(sp)
  80c990:	df000a15 	stw	fp,40(sp)
  80c994:	df000a04 	addi	fp,sp,40
  80c998:	e13ffc15 	stw	r4,-16(fp)
  80c99c:	e17ffd15 	stw	r5,-12(fp)
  80c9a0:	e1bffe15 	stw	r6,-8(fp)
  80c9a4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80c9a8:	e0bffc17 	ldw	r2,-16(fp)
  80c9ac:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  80c9b0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  80c9b4:	e17ffe17 	ldw	r5,-8(fp)
  80c9b8:	e13ffc17 	ldw	r4,-16(fp)
  80c9bc:	080c87c0 	call	80c87c <alt_epcs_test_address>
  80c9c0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  80c9c4:	e0bff917 	ldw	r2,-28(fp)
  80c9c8:	10002916 	blt	r2,zero,80ca70 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  80c9cc:	00002606 	br	80ca68 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  80c9d0:	e0bff817 	ldw	r2,-32(fp)
  80c9d4:	10c03117 	ldw	r3,196(r2)
  80c9d8:	e0bffe17 	ldw	r2,-8(fp)
  80c9dc:	1887883a 	add	r3,r3,r2
  80c9e0:	e0bff817 	ldw	r2,-32(fp)
  80c9e4:	10803117 	ldw	r2,196(r2)
  80c9e8:	0085c83a 	sub	r2,zero,r2
  80c9ec:	1884703a 	and	r2,r3,r2
  80c9f0:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  80c9f4:	e0fffa17 	ldw	r3,-24(fp)
  80c9f8:	e0bffe17 	ldw	r2,-8(fp)
  80c9fc:	1885c83a 	sub	r2,r3,r2
  80ca00:	e0c00217 	ldw	r3,8(fp)
  80ca04:	1880010e 	bge	r3,r2,80ca0c <alt_epcs_flash_write_block+0x84>
  80ca08:	1805883a 	mov	r2,r3
  80ca0c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  80ca10:	e0bff817 	ldw	r2,-32(fp)
  80ca14:	11002e17 	ldw	r4,184(r2)
  80ca18:	e0bff717 	ldw	r2,-36(fp)
  80ca1c:	e0ffff17 	ldw	r3,-4(fp)
  80ca20:	1887883a 	add	r3,r3,r2
  80ca24:	e0bff817 	ldw	r2,-32(fp)
  80ca28:	10803217 	ldw	r2,200(r2)
  80ca2c:	d8800015 	stw	r2,0(sp)
  80ca30:	e1fffb17 	ldw	r7,-20(fp)
  80ca34:	180d883a 	mov	r6,r3
  80ca38:	e17ffe17 	ldw	r5,-8(fp)
  80ca3c:	080ec980 	call	80ec98 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  80ca40:	e0c00217 	ldw	r3,8(fp)
  80ca44:	e0bffb17 	ldw	r2,-20(fp)
  80ca48:	1885c83a 	sub	r2,r3,r2
  80ca4c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  80ca50:	e0fff717 	ldw	r3,-36(fp)
  80ca54:	e0bffb17 	ldw	r2,-20(fp)
  80ca58:	1885883a 	add	r2,r3,r2
  80ca5c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  80ca60:	e0bffa17 	ldw	r2,-24(fp)
  80ca64:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  80ca68:	e0800217 	ldw	r2,8(fp)
  80ca6c:	103fd81e 	bne	r2,zero,80c9d0 <__alt_mem_epcs_flash_controller_0+0xff8039d0>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  80ca70:	e0bff917 	ldw	r2,-28(fp)
}
  80ca74:	e037883a 	mov	sp,fp
  80ca78:	dfc00117 	ldw	ra,4(sp)
  80ca7c:	df000017 	ldw	fp,0(sp)
  80ca80:	dec00204 	addi	sp,sp,8
  80ca84:	f800283a 	ret

0080ca88 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  80ca88:	defff704 	addi	sp,sp,-36
  80ca8c:	dfc00815 	stw	ra,32(sp)
  80ca90:	df000715 	stw	fp,28(sp)
  80ca94:	df000704 	addi	fp,sp,28
  80ca98:	e13ffc15 	stw	r4,-16(fp)
  80ca9c:	e17ffd15 	stw	r5,-12(fp)
  80caa0:	e1bffe15 	stw	r6,-8(fp)
  80caa4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  80caa8:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80caac:	e0bffc17 	ldw	r2,-16(fp)
  80cab0:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  80cab4:	e17ffd17 	ldw	r5,-12(fp)
  80cab8:	e13ffc17 	ldw	r4,-16(fp)
  80cabc:	080c87c0 	call	80c87c <alt_epcs_test_address>
  80cac0:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  80cac4:	e0bffa17 	ldw	r2,-24(fp)
  80cac8:	10000f16 	blt	r2,zero,80cb08 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  80cacc:	e0bffb17 	ldw	r2,-20(fp)
  80cad0:	10c02e17 	ldw	r3,184(r2)
  80cad4:	e0bffb17 	ldw	r2,-20(fp)
  80cad8:	10803217 	ldw	r2,200(r2)
  80cadc:	d8800015 	stw	r2,0(sp)
  80cae0:	e1ffff17 	ldw	r7,-4(fp)
  80cae4:	e1bffe17 	ldw	r6,-8(fp)
  80cae8:	e17ffd17 	ldw	r5,-12(fp)
  80caec:	1809883a 	mov	r4,r3
  80caf0:	080eae40 	call	80eae4 <epcs_read_buffer>
  80caf4:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  80caf8:	e0fffa17 	ldw	r3,-24(fp)
  80cafc:	e0bfff17 	ldw	r2,-4(fp)
  80cb00:	1880011e 	bne	r3,r2,80cb08 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  80cb04:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  80cb08:	e0bffa17 	ldw	r2,-24(fp)
}
  80cb0c:	e037883a 	mov	sp,fp
  80cb10:	dfc00117 	ldw	ra,4(sp)
  80cb14:	df000017 	ldw	fp,0(sp)
  80cb18:	dec00204 	addi	sp,sp,8
  80cb1c:	f800283a 	ret

0080cb20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80cb20:	defffa04 	addi	sp,sp,-24
  80cb24:	dfc00515 	stw	ra,20(sp)
  80cb28:	df000415 	stw	fp,16(sp)
  80cb2c:	df000404 	addi	fp,sp,16
  80cb30:	e13ffd15 	stw	r4,-12(fp)
  80cb34:	e17ffe15 	stw	r5,-8(fp)
  80cb38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80cb3c:	e0bffd17 	ldw	r2,-12(fp)
  80cb40:	10800017 	ldw	r2,0(r2)
  80cb44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80cb48:	e0bffc17 	ldw	r2,-16(fp)
  80cb4c:	10c00a04 	addi	r3,r2,40
  80cb50:	e0bffd17 	ldw	r2,-12(fp)
  80cb54:	10800217 	ldw	r2,8(r2)
  80cb58:	100f883a 	mov	r7,r2
  80cb5c:	e1bfff17 	ldw	r6,-4(fp)
  80cb60:	e17ffe17 	ldw	r5,-8(fp)
  80cb64:	1809883a 	mov	r4,r3
  80cb68:	080d2cc0 	call	80d2cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80cb6c:	e037883a 	mov	sp,fp
  80cb70:	dfc00117 	ldw	ra,4(sp)
  80cb74:	df000017 	ldw	fp,0(sp)
  80cb78:	dec00204 	addi	sp,sp,8
  80cb7c:	f800283a 	ret

0080cb80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80cb80:	defffa04 	addi	sp,sp,-24
  80cb84:	dfc00515 	stw	ra,20(sp)
  80cb88:	df000415 	stw	fp,16(sp)
  80cb8c:	df000404 	addi	fp,sp,16
  80cb90:	e13ffd15 	stw	r4,-12(fp)
  80cb94:	e17ffe15 	stw	r5,-8(fp)
  80cb98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80cb9c:	e0bffd17 	ldw	r2,-12(fp)
  80cba0:	10800017 	ldw	r2,0(r2)
  80cba4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80cba8:	e0bffc17 	ldw	r2,-16(fp)
  80cbac:	10c00a04 	addi	r3,r2,40
  80cbb0:	e0bffd17 	ldw	r2,-12(fp)
  80cbb4:	10800217 	ldw	r2,8(r2)
  80cbb8:	100f883a 	mov	r7,r2
  80cbbc:	e1bfff17 	ldw	r6,-4(fp)
  80cbc0:	e17ffe17 	ldw	r5,-8(fp)
  80cbc4:	1809883a 	mov	r4,r3
  80cbc8:	080d5880 	call	80d588 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80cbcc:	e037883a 	mov	sp,fp
  80cbd0:	dfc00117 	ldw	ra,4(sp)
  80cbd4:	df000017 	ldw	fp,0(sp)
  80cbd8:	dec00204 	addi	sp,sp,8
  80cbdc:	f800283a 	ret

0080cbe0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80cbe0:	defffc04 	addi	sp,sp,-16
  80cbe4:	dfc00315 	stw	ra,12(sp)
  80cbe8:	df000215 	stw	fp,8(sp)
  80cbec:	df000204 	addi	fp,sp,8
  80cbf0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80cbf4:	e0bfff17 	ldw	r2,-4(fp)
  80cbf8:	10800017 	ldw	r2,0(r2)
  80cbfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80cc00:	e0bffe17 	ldw	r2,-8(fp)
  80cc04:	10c00a04 	addi	r3,r2,40
  80cc08:	e0bfff17 	ldw	r2,-4(fp)
  80cc0c:	10800217 	ldw	r2,8(r2)
  80cc10:	100b883a 	mov	r5,r2
  80cc14:	1809883a 	mov	r4,r3
  80cc18:	080d1740 	call	80d174 <altera_avalon_jtag_uart_close>
}
  80cc1c:	e037883a 	mov	sp,fp
  80cc20:	dfc00117 	ldw	ra,4(sp)
  80cc24:	df000017 	ldw	fp,0(sp)
  80cc28:	dec00204 	addi	sp,sp,8
  80cc2c:	f800283a 	ret

0080cc30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80cc30:	defffa04 	addi	sp,sp,-24
  80cc34:	dfc00515 	stw	ra,20(sp)
  80cc38:	df000415 	stw	fp,16(sp)
  80cc3c:	df000404 	addi	fp,sp,16
  80cc40:	e13ffd15 	stw	r4,-12(fp)
  80cc44:	e17ffe15 	stw	r5,-8(fp)
  80cc48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80cc4c:	e0bffd17 	ldw	r2,-12(fp)
  80cc50:	10800017 	ldw	r2,0(r2)
  80cc54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80cc58:	e0bffc17 	ldw	r2,-16(fp)
  80cc5c:	10800a04 	addi	r2,r2,40
  80cc60:	e1bfff17 	ldw	r6,-4(fp)
  80cc64:	e17ffe17 	ldw	r5,-8(fp)
  80cc68:	1009883a 	mov	r4,r2
  80cc6c:	080d1dc0 	call	80d1dc <altera_avalon_jtag_uart_ioctl>
}
  80cc70:	e037883a 	mov	sp,fp
  80cc74:	dfc00117 	ldw	ra,4(sp)
  80cc78:	df000017 	ldw	fp,0(sp)
  80cc7c:	dec00204 	addi	sp,sp,8
  80cc80:	f800283a 	ret

0080cc84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cc84:	defff104 	addi	sp,sp,-60
  80cc88:	dfc00e15 	stw	ra,56(sp)
  80cc8c:	df000d15 	stw	fp,52(sp)
  80cc90:	df000d04 	addi	fp,sp,52
  80cc94:	e13ff915 	stw	r4,-28(fp)
  80cc98:	e17ffa15 	stw	r5,-24(fp)
  80cc9c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  80cca0:	e0bff917 	ldw	r2,-28(fp)
  80cca4:	10800c04 	addi	r2,r2,48
  80cca8:	e0bff415 	stw	r2,-48(fp)
  80ccac:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80ccb0:	e0bff80b 	ldhu	r2,-32(fp)
  80ccb4:	e0fff884 	addi	r3,fp,-30
  80ccb8:	180b883a 	mov	r5,r3
  80ccbc:	1009883a 	mov	r4,r2
  80ccc0:	0806bb00 	call	806bb0 <OSFlagCreate>
  80ccc4:	1007883a 	mov	r3,r2
  80ccc8:	e0bff417 	ldw	r2,-48(fp)
  80cccc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  80ccd0:	e0bff917 	ldw	r2,-28(fp)
  80ccd4:	10800a04 	addi	r2,r2,40
  80ccd8:	e0bff515 	stw	r2,-44(fp)
  80ccdc:	00800044 	movi	r2,1
  80cce0:	e0bff78d 	sth	r2,-34(fp)
  80cce4:	e0bff78b 	ldhu	r2,-34(fp)
  80cce8:	1009883a 	mov	r4,r2
  80ccec:	08098d00 	call	8098d0 <OSSemCreate>
  80ccf0:	1007883a 	mov	r3,r2
  80ccf4:	e0bff517 	ldw	r2,-44(fp)
  80ccf8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  80ccfc:	e0bff917 	ldw	r2,-28(fp)
  80cd00:	10800b04 	addi	r2,r2,44
  80cd04:	e0bff615 	stw	r2,-40(fp)
  80cd08:	00800044 	movi	r2,1
  80cd0c:	e0bff70d 	sth	r2,-36(fp)
  80cd10:	e0bff70b 	ldhu	r2,-36(fp)
  80cd14:	1009883a 	mov	r4,r2
  80cd18:	08098d00 	call	8098d0 <OSSemCreate>
  80cd1c:	1007883a 	mov	r3,r2
  80cd20:	e0bff617 	ldw	r2,-40(fp)
  80cd24:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cd28:	e0bff917 	ldw	r2,-28(fp)
  80cd2c:	00c00044 	movi	r3,1
  80cd30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cd34:	e0bff917 	ldw	r2,-28(fp)
  80cd38:	10800017 	ldw	r2,0(r2)
  80cd3c:	10800104 	addi	r2,r2,4
  80cd40:	1007883a 	mov	r3,r2
  80cd44:	e0bff917 	ldw	r2,-28(fp)
  80cd48:	10800817 	ldw	r2,32(r2)
  80cd4c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80cd50:	e0bffa17 	ldw	r2,-24(fp)
  80cd54:	e0fffb17 	ldw	r3,-20(fp)
  80cd58:	d8000015 	stw	zero,0(sp)
  80cd5c:	e1fff917 	ldw	r7,-28(fp)
  80cd60:	01802074 	movhi	r6,129
  80cd64:	31b37304 	addi	r6,r6,-12852
  80cd68:	180b883a 	mov	r5,r3
  80cd6c:	1009883a 	mov	r4,r2
  80cd70:	0803ae80 	call	803ae8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80cd74:	e0bff917 	ldw	r2,-28(fp)
  80cd78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cd7c:	e0bff917 	ldw	r2,-28(fp)
  80cd80:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80cd84:	d0e0a717 	ldw	r3,-32100(gp)
  80cd88:	e1fff917 	ldw	r7,-28(fp)
  80cd8c:	01802074 	movhi	r6,129
  80cd90:	31b41c04 	addi	r6,r6,-12176
  80cd94:	180b883a 	mov	r5,r3
  80cd98:	1009883a 	mov	r4,r2
  80cd9c:	080fb4c0 	call	80fb4c <alt_alarm_start>
  80cda0:	1000040e 	bge	r2,zero,80cdb4 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80cda4:	e0fff917 	ldw	r3,-28(fp)
  80cda8:	00a00034 	movhi	r2,32768
  80cdac:	10bfffc4 	addi	r2,r2,-1
  80cdb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80cdb4:	0001883a 	nop
  80cdb8:	e037883a 	mov	sp,fp
  80cdbc:	dfc00117 	ldw	ra,4(sp)
  80cdc0:	df000017 	ldw	fp,0(sp)
  80cdc4:	dec00204 	addi	sp,sp,8
  80cdc8:	f800283a 	ret

0080cdcc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80cdcc:	defff204 	addi	sp,sp,-56
  80cdd0:	dfc00d15 	stw	ra,52(sp)
  80cdd4:	df000c15 	stw	fp,48(sp)
  80cdd8:	df000c04 	addi	fp,sp,48
  80cddc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80cde0:	e0bfff17 	ldw	r2,-4(fp)
  80cde4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  80cde8:	e0bff617 	ldw	r2,-40(fp)
  80cdec:	10800017 	ldw	r2,0(r2)
  80cdf0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cdf4:	e0bff717 	ldw	r2,-36(fp)
  80cdf8:	10800104 	addi	r2,r2,4
  80cdfc:	10800037 	ldwio	r2,0(r2)
  80ce00:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ce04:	e0bff817 	ldw	r2,-32(fp)
  80ce08:	1080c00c 	andi	r2,r2,768
  80ce0c:	10009126 	beq	r2,zero,80d054 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ce10:	e0bff817 	ldw	r2,-32(fp)
  80ce14:	1080400c 	andi	r2,r2,256
  80ce18:	10004726 	beq	r2,zero,80cf38 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ce1c:	00800074 	movhi	r2,1
  80ce20:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce24:	e0bff617 	ldw	r2,-40(fp)
  80ce28:	10800d17 	ldw	r2,52(r2)
  80ce2c:	10800044 	addi	r2,r2,1
  80ce30:	1081ffcc 	andi	r2,r2,2047
  80ce34:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  80ce38:	e0bff617 	ldw	r2,-40(fp)
  80ce3c:	10c00e17 	ldw	r3,56(r2)
  80ce40:	e0bff917 	ldw	r2,-28(fp)
  80ce44:	18802726 	beq	r3,r2,80cee4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ce48:	e0bff717 	ldw	r2,-36(fp)
  80ce4c:	10800037 	ldwio	r2,0(r2)
  80ce50:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ce54:	e0bff417 	ldw	r2,-48(fp)
  80ce58:	10a0000c 	andi	r2,r2,32768
  80ce5c:	10002326 	beq	r2,zero,80ceec <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ce60:	e0bff617 	ldw	r2,-40(fp)
  80ce64:	10800d17 	ldw	r2,52(r2)
  80ce68:	e0fff417 	ldw	r3,-48(fp)
  80ce6c:	1809883a 	mov	r4,r3
  80ce70:	e0fff617 	ldw	r3,-40(fp)
  80ce74:	1885883a 	add	r2,r3,r2
  80ce78:	10801104 	addi	r2,r2,68
  80ce7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce80:	e0bff617 	ldw	r2,-40(fp)
  80ce84:	10800d17 	ldw	r2,52(r2)
  80ce88:	10800044 	addi	r2,r2,1
  80ce8c:	10c1ffcc 	andi	r3,r2,2047
  80ce90:	e0bff617 	ldw	r2,-40(fp)
  80ce94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  80ce98:	e0bff617 	ldw	r2,-40(fp)
  80ce9c:	10800c17 	ldw	r2,48(r2)
  80cea0:	e0bffb15 	stw	r2,-20(fp)
  80cea4:	00800044 	movi	r2,1
  80cea8:	e0bffc0d 	sth	r2,-16(fp)
  80ceac:	00800044 	movi	r2,1
  80ceb0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80ceb4:	d0a09243 	ldbu	r2,-32183(gp)
  80ceb8:	10803fcc 	andi	r2,r2,255
  80cebc:	103fd926 	beq	r2,zero,80ce24 <__alt_mem_epcs_flash_controller_0+0xff803e24>
  {
    OSFlagPost (group, flags, opt, &err);
  80cec0:	e0bffc0b 	ldhu	r2,-16(fp)
  80cec4:	e0fffc83 	ldbu	r3,-14(fp)
  80cec8:	e13ffdc4 	addi	r4,fp,-9
  80cecc:	200f883a 	mov	r7,r4
  80ced0:	180d883a 	mov	r6,r3
  80ced4:	100b883a 	mov	r5,r2
  80ced8:	e13ffb17 	ldw	r4,-20(fp)
  80cedc:	080778c0 	call	80778c <OSFlagPost>
      }
  80cee0:	003fd006 	br	80ce24 <__alt_mem_epcs_flash_controller_0+0xff803e24>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80cee4:	0001883a 	nop
  80cee8:	00000106 	br	80cef0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80ceec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80cef0:	e0bff417 	ldw	r2,-48(fp)
  80cef4:	10bfffec 	andhi	r2,r2,65535
  80cef8:	10000f26 	beq	r2,zero,80cf38 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cefc:	e0bff617 	ldw	r2,-40(fp)
  80cf00:	10c00817 	ldw	r3,32(r2)
  80cf04:	00bfff84 	movi	r2,-2
  80cf08:	1886703a 	and	r3,r3,r2
  80cf0c:	e0bff617 	ldw	r2,-40(fp)
  80cf10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80cf14:	e0bff717 	ldw	r2,-36(fp)
  80cf18:	10800104 	addi	r2,r2,4
  80cf1c:	1007883a 	mov	r3,r2
  80cf20:	e0bff617 	ldw	r2,-40(fp)
  80cf24:	10800817 	ldw	r2,32(r2)
  80cf28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cf2c:	e0bff717 	ldw	r2,-36(fp)
  80cf30:	10800104 	addi	r2,r2,4
  80cf34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80cf38:	e0bff817 	ldw	r2,-32(fp)
  80cf3c:	1080800c 	andi	r2,r2,512
  80cf40:	103fac26 	beq	r2,zero,80cdf4 <__alt_mem_epcs_flash_controller_0+0xff803df4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80cf44:	e0bff817 	ldw	r2,-32(fp)
  80cf48:	1004d43a 	srli	r2,r2,16
  80cf4c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cf50:	00002606 	br	80cfec <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80cf54:	e0bff717 	ldw	r2,-36(fp)
  80cf58:	e0fff617 	ldw	r3,-40(fp)
  80cf5c:	18c01017 	ldw	r3,64(r3)
  80cf60:	e13ff617 	ldw	r4,-40(fp)
  80cf64:	20c7883a 	add	r3,r4,r3
  80cf68:	18c21104 	addi	r3,r3,2116
  80cf6c:	18c00003 	ldbu	r3,0(r3)
  80cf70:	18c03fcc 	andi	r3,r3,255
  80cf74:	18c0201c 	xori	r3,r3,128
  80cf78:	18ffe004 	addi	r3,r3,-128
  80cf7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cf80:	e0bff617 	ldw	r2,-40(fp)
  80cf84:	10801017 	ldw	r2,64(r2)
  80cf88:	10800044 	addi	r2,r2,1
  80cf8c:	10c1ffcc 	andi	r3,r2,2047
  80cf90:	e0bff617 	ldw	r2,-40(fp)
  80cf94:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  80cf98:	e0bff617 	ldw	r2,-40(fp)
  80cf9c:	10800c17 	ldw	r2,48(r2)
  80cfa0:	e0bffa15 	stw	r2,-24(fp)
  80cfa4:	00800084 	movi	r2,2
  80cfa8:	e0bffd0d 	sth	r2,-12(fp)
  80cfac:	00800044 	movi	r2,1
  80cfb0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80cfb4:	d0a09243 	ldbu	r2,-32183(gp)
  80cfb8:	10803fcc 	andi	r2,r2,255
  80cfbc:	10000826 	beq	r2,zero,80cfe0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  80cfc0:	e0bffd0b 	ldhu	r2,-12(fp)
  80cfc4:	e0fffd83 	ldbu	r3,-10(fp)
  80cfc8:	e13ffe04 	addi	r4,fp,-8
  80cfcc:	200f883a 	mov	r7,r4
  80cfd0:	180d883a 	mov	r6,r3
  80cfd4:	100b883a 	mov	r5,r2
  80cfd8:	e13ffa17 	ldw	r4,-24(fp)
  80cfdc:	080778c0 	call	80778c <OSFlagPost>

        space--;
  80cfe0:	e0bff517 	ldw	r2,-44(fp)
  80cfe4:	10bfffc4 	addi	r2,r2,-1
  80cfe8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cfec:	e0bff517 	ldw	r2,-44(fp)
  80cff0:	10000526 	beq	r2,zero,80d008 <altera_avalon_jtag_uart_irq+0x23c>
  80cff4:	e0bff617 	ldw	r2,-40(fp)
  80cff8:	10c01017 	ldw	r3,64(r2)
  80cffc:	e0bff617 	ldw	r2,-40(fp)
  80d000:	10800f17 	ldw	r2,60(r2)
  80d004:	18bfd31e 	bne	r3,r2,80cf54 <__alt_mem_epcs_flash_controller_0+0xff803f54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d008:	e0bff517 	ldw	r2,-44(fp)
  80d00c:	103f7926 	beq	r2,zero,80cdf4 <__alt_mem_epcs_flash_controller_0+0xff803df4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d010:	e0bff617 	ldw	r2,-40(fp)
  80d014:	10c00817 	ldw	r3,32(r2)
  80d018:	00bfff44 	movi	r2,-3
  80d01c:	1886703a 	and	r3,r3,r2
  80d020:	e0bff617 	ldw	r2,-40(fp)
  80d024:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d028:	e0bff617 	ldw	r2,-40(fp)
  80d02c:	10800017 	ldw	r2,0(r2)
  80d030:	10800104 	addi	r2,r2,4
  80d034:	1007883a 	mov	r3,r2
  80d038:	e0bff617 	ldw	r2,-40(fp)
  80d03c:	10800817 	ldw	r2,32(r2)
  80d040:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d044:	e0bff717 	ldw	r2,-36(fp)
  80d048:	10800104 	addi	r2,r2,4
  80d04c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d050:	003f6806 	br	80cdf4 <__alt_mem_epcs_flash_controller_0+0xff803df4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80d054:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80d058:	0001883a 	nop
  80d05c:	e037883a 	mov	sp,fp
  80d060:	dfc00117 	ldw	ra,4(sp)
  80d064:	df000017 	ldw	fp,0(sp)
  80d068:	dec00204 	addi	sp,sp,8
  80d06c:	f800283a 	ret

0080d070 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d070:	defff904 	addi	sp,sp,-28
  80d074:	dfc00615 	stw	ra,24(sp)
  80d078:	df000515 	stw	fp,20(sp)
  80d07c:	df000504 	addi	fp,sp,20
  80d080:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d084:	e0bfff17 	ldw	r2,-4(fp)
  80d088:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d08c:	e0bffb17 	ldw	r2,-20(fp)
  80d090:	10800017 	ldw	r2,0(r2)
  80d094:	10800104 	addi	r2,r2,4
  80d098:	10800037 	ldwio	r2,0(r2)
  80d09c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d0a0:	e0bffc17 	ldw	r2,-16(fp)
  80d0a4:	1081000c 	andi	r2,r2,1024
  80d0a8:	10000b26 	beq	r2,zero,80d0d8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d0ac:	e0bffb17 	ldw	r2,-20(fp)
  80d0b0:	10800017 	ldw	r2,0(r2)
  80d0b4:	10800104 	addi	r2,r2,4
  80d0b8:	1007883a 	mov	r3,r2
  80d0bc:	e0bffb17 	ldw	r2,-20(fp)
  80d0c0:	10800817 	ldw	r2,32(r2)
  80d0c4:	10810014 	ori	r2,r2,1024
  80d0c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80d0cc:	e0bffb17 	ldw	r2,-20(fp)
  80d0d0:	10000915 	stw	zero,36(r2)
  80d0d4:	00002106 	br	80d15c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d0d8:	e0bffb17 	ldw	r2,-20(fp)
  80d0dc:	10c00917 	ldw	r3,36(r2)
  80d0e0:	00a00034 	movhi	r2,32768
  80d0e4:	10bfff04 	addi	r2,r2,-4
  80d0e8:	10c01c36 	bltu	r2,r3,80d15c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  80d0ec:	e0bffb17 	ldw	r2,-20(fp)
  80d0f0:	10800917 	ldw	r2,36(r2)
  80d0f4:	10c00044 	addi	r3,r2,1
  80d0f8:	e0bffb17 	ldw	r2,-20(fp)
  80d0fc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  80d100:	e0bffb17 	ldw	r2,-20(fp)
  80d104:	10c00917 	ldw	r3,36(r2)
  80d108:	e0bffb17 	ldw	r2,-20(fp)
  80d10c:	10800117 	ldw	r2,4(r2)
  80d110:	18801236 	bltu	r3,r2,80d15c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  80d114:	e0bffb17 	ldw	r2,-20(fp)
  80d118:	10800c17 	ldw	r2,48(r2)
  80d11c:	e0bffd15 	stw	r2,-12(fp)
  80d120:	00800104 	movi	r2,4
  80d124:	e0bffe0d 	sth	r2,-8(fp)
  80d128:	00800044 	movi	r2,1
  80d12c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80d130:	d0a09243 	ldbu	r2,-32183(gp)
  80d134:	10803fcc 	andi	r2,r2,255
  80d138:	10000826 	beq	r2,zero,80d15c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  80d13c:	e0bffe0b 	ldhu	r2,-8(fp)
  80d140:	e0fffe83 	ldbu	r3,-6(fp)
  80d144:	e13ffec4 	addi	r4,fp,-5
  80d148:	200f883a 	mov	r7,r4
  80d14c:	180d883a 	mov	r6,r3
  80d150:	100b883a 	mov	r5,r2
  80d154:	e13ffd17 	ldw	r4,-12(fp)
  80d158:	080778c0 	call	80778c <OSFlagPost>
  80d15c:	d0a0a717 	ldw	r2,-32100(gp)
    }
  }

  return alt_ticks_per_second();
}
  80d160:	e037883a 	mov	sp,fp
  80d164:	dfc00117 	ldw	ra,4(sp)
  80d168:	df000017 	ldw	fp,0(sp)
  80d16c:	dec00204 	addi	sp,sp,8
  80d170:	f800283a 	ret

0080d174 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d174:	defffd04 	addi	sp,sp,-12
  80d178:	df000215 	stw	fp,8(sp)
  80d17c:	df000204 	addi	fp,sp,8
  80d180:	e13ffe15 	stw	r4,-8(fp)
  80d184:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d188:	00000506 	br	80d1a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80d18c:	e0bfff17 	ldw	r2,-4(fp)
  80d190:	1090000c 	andi	r2,r2,16384
  80d194:	10000226 	beq	r2,zero,80d1a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80d198:	00bffd44 	movi	r2,-11
  80d19c:	00000b06 	br	80d1cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d1a0:	e0bffe17 	ldw	r2,-8(fp)
  80d1a4:	10c01017 	ldw	r3,64(r2)
  80d1a8:	e0bffe17 	ldw	r2,-8(fp)
  80d1ac:	10800f17 	ldw	r2,60(r2)
  80d1b0:	18800526 	beq	r3,r2,80d1c8 <altera_avalon_jtag_uart_close+0x54>
  80d1b4:	e0bffe17 	ldw	r2,-8(fp)
  80d1b8:	10c00917 	ldw	r3,36(r2)
  80d1bc:	e0bffe17 	ldw	r2,-8(fp)
  80d1c0:	10800117 	ldw	r2,4(r2)
  80d1c4:	18bff136 	bltu	r3,r2,80d18c <__alt_mem_epcs_flash_controller_0+0xff80418c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d1c8:	0005883a 	mov	r2,zero
}
  80d1cc:	e037883a 	mov	sp,fp
  80d1d0:	df000017 	ldw	fp,0(sp)
  80d1d4:	dec00104 	addi	sp,sp,4
  80d1d8:	f800283a 	ret

0080d1dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d1dc:	defffa04 	addi	sp,sp,-24
  80d1e0:	df000515 	stw	fp,20(sp)
  80d1e4:	df000504 	addi	fp,sp,20
  80d1e8:	e13ffd15 	stw	r4,-12(fp)
  80d1ec:	e17ffe15 	stw	r5,-8(fp)
  80d1f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80d1f4:	00bff9c4 	movi	r2,-25
  80d1f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80d1fc:	e0bffe17 	ldw	r2,-8(fp)
  80d200:	10da8060 	cmpeqi	r3,r2,27137
  80d204:	1800031e 	bne	r3,zero,80d214 <altera_avalon_jtag_uart_ioctl+0x38>
  80d208:	109a80a0 	cmpeqi	r2,r2,27138
  80d20c:	1000181e 	bne	r2,zero,80d270 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80d210:	00002906 	br	80d2b8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80d214:	e0bffd17 	ldw	r2,-12(fp)
  80d218:	10c00117 	ldw	r3,4(r2)
  80d21c:	00a00034 	movhi	r2,32768
  80d220:	10bfffc4 	addi	r2,r2,-1
  80d224:	18802126 	beq	r3,r2,80d2ac <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80d228:	e0bfff17 	ldw	r2,-4(fp)
  80d22c:	10800017 	ldw	r2,0(r2)
  80d230:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80d234:	e0bffc17 	ldw	r2,-16(fp)
  80d238:	10800090 	cmplti	r2,r2,2
  80d23c:	1000061e 	bne	r2,zero,80d258 <altera_avalon_jtag_uart_ioctl+0x7c>
  80d240:	e0fffc17 	ldw	r3,-16(fp)
  80d244:	00a00034 	movhi	r2,32768
  80d248:	10bfffc4 	addi	r2,r2,-1
  80d24c:	18800226 	beq	r3,r2,80d258 <altera_avalon_jtag_uart_ioctl+0x7c>
  80d250:	e0bffc17 	ldw	r2,-16(fp)
  80d254:	00000206 	br	80d260 <altera_avalon_jtag_uart_ioctl+0x84>
  80d258:	00a00034 	movhi	r2,32768
  80d25c:	10bfff84 	addi	r2,r2,-2
  80d260:	e0fffd17 	ldw	r3,-12(fp)
  80d264:	18800115 	stw	r2,4(r3)
      rc = 0;
  80d268:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80d26c:	00000f06 	br	80d2ac <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80d270:	e0bffd17 	ldw	r2,-12(fp)
  80d274:	10c00117 	ldw	r3,4(r2)
  80d278:	00a00034 	movhi	r2,32768
  80d27c:	10bfffc4 	addi	r2,r2,-1
  80d280:	18800c26 	beq	r3,r2,80d2b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80d284:	e0bffd17 	ldw	r2,-12(fp)
  80d288:	10c00917 	ldw	r3,36(r2)
  80d28c:	e0bffd17 	ldw	r2,-12(fp)
  80d290:	10800117 	ldw	r2,4(r2)
  80d294:	1885803a 	cmpltu	r2,r3,r2
  80d298:	10c03fcc 	andi	r3,r2,255
  80d29c:	e0bfff17 	ldw	r2,-4(fp)
  80d2a0:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80d2a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80d2a8:	00000206 	br	80d2b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80d2ac:	0001883a 	nop
  80d2b0:	00000106 	br	80d2b8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80d2b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80d2b8:	e0bffb17 	ldw	r2,-20(fp)
}
  80d2bc:	e037883a 	mov	sp,fp
  80d2c0:	df000017 	ldw	fp,0(sp)
  80d2c4:	dec00104 	addi	sp,sp,4
  80d2c8:	f800283a 	ret

0080d2cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80d2cc:	deffed04 	addi	sp,sp,-76
  80d2d0:	dfc01215 	stw	ra,72(sp)
  80d2d4:	df001115 	stw	fp,68(sp)
  80d2d8:	df001104 	addi	fp,sp,68
  80d2dc:	e13ffc15 	stw	r4,-16(fp)
  80d2e0:	e17ffd15 	stw	r5,-12(fp)
  80d2e4:	e1bffe15 	stw	r6,-8(fp)
  80d2e8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80d2ec:	e0bffd17 	ldw	r2,-12(fp)
  80d2f0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  80d2f4:	e0bffc17 	ldw	r2,-16(fp)
  80d2f8:	10800a17 	ldw	r2,40(r2)
  80d2fc:	e0bff815 	stw	r2,-32(fp)
  80d300:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80d304:	e0bff90b 	ldhu	r2,-28(fp)
  80d308:	e0fffb04 	addi	r3,fp,-20
  80d30c:	180d883a 	mov	r6,r3
  80d310:	100b883a 	mov	r5,r2
  80d314:	e13ff817 	ldw	r4,-32(fp)
  80d318:	0809be80 	call	809be8 <OSSemPend>

  while (space > 0)
  80d31c:	00006106 	br	80d4a4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80d320:	e0bffc17 	ldw	r2,-16(fp)
  80d324:	10800d17 	ldw	r2,52(r2)
  80d328:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  80d32c:	e0bffc17 	ldw	r2,-16(fp)
  80d330:	10800e17 	ldw	r2,56(r2)
  80d334:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  80d338:	e0fff317 	ldw	r3,-52(fp)
  80d33c:	e0bff417 	ldw	r2,-48(fp)
  80d340:	18800536 	bltu	r3,r2,80d358 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  80d344:	e0fff317 	ldw	r3,-52(fp)
  80d348:	e0bff417 	ldw	r2,-48(fp)
  80d34c:	1885c83a 	sub	r2,r3,r2
  80d350:	e0bff115 	stw	r2,-60(fp)
  80d354:	00000406 	br	80d368 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80d358:	00c20004 	movi	r3,2048
  80d35c:	e0bff417 	ldw	r2,-48(fp)
  80d360:	1885c83a 	sub	r2,r3,r2
  80d364:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  80d368:	e0bff117 	ldw	r2,-60(fp)
  80d36c:	10001e26 	beq	r2,zero,80d3e8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  80d370:	e0fffe17 	ldw	r3,-8(fp)
  80d374:	e0bff117 	ldw	r2,-60(fp)
  80d378:	1880022e 	bgeu	r3,r2,80d384 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  80d37c:	e0bffe17 	ldw	r2,-8(fp)
  80d380:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80d384:	e0bffc17 	ldw	r2,-16(fp)
  80d388:	10c01104 	addi	r3,r2,68
  80d38c:	e0bff417 	ldw	r2,-48(fp)
  80d390:	1885883a 	add	r2,r3,r2
  80d394:	e1bff117 	ldw	r6,-60(fp)
  80d398:	100b883a 	mov	r5,r2
  80d39c:	e13ff017 	ldw	r4,-64(fp)
  80d3a0:	08020b80 	call	8020b8 <memcpy>
      ptr   += n;
  80d3a4:	e0fff017 	ldw	r3,-64(fp)
  80d3a8:	e0bff117 	ldw	r2,-60(fp)
  80d3ac:	1885883a 	add	r2,r3,r2
  80d3b0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  80d3b4:	e0fffe17 	ldw	r3,-8(fp)
  80d3b8:	e0bff117 	ldw	r2,-60(fp)
  80d3bc:	1885c83a 	sub	r2,r3,r2
  80d3c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d3c4:	e0fff417 	ldw	r3,-48(fp)
  80d3c8:	e0bff117 	ldw	r2,-60(fp)
  80d3cc:	1885883a 	add	r2,r3,r2
  80d3d0:	10c1ffcc 	andi	r3,r2,2047
  80d3d4:	e0bffc17 	ldw	r2,-16(fp)
  80d3d8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  80d3dc:	e0bffe17 	ldw	r2,-8(fp)
  80d3e0:	00bfcf16 	blt	zero,r2,80d320 <__alt_mem_epcs_flash_controller_0+0xff804320>
  80d3e4:	00000106 	br	80d3ec <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80d3e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80d3ec:	e0fff017 	ldw	r3,-64(fp)
  80d3f0:	e0bffd17 	ldw	r2,-12(fp)
  80d3f4:	18802e1e 	bne	r3,r2,80d4b0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80d3f8:	e0bfff17 	ldw	r2,-4(fp)
  80d3fc:	1090000c 	andi	r2,r2,16384
  80d400:	10002d1e 	bne	r2,zero,80d4b8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  80d404:	d0a09243 	ldbu	r2,-32183(gp)
  80d408:	10803fcc 	andi	r2,r2,255
  80d40c:	10800058 	cmpnei	r2,r2,1
  80d410:	1000161e 	bne	r2,zero,80d46c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  80d414:	e0bffc17 	ldw	r2,-16(fp)
  80d418:	10800c17 	ldw	r2,48(r2)
  80d41c:	e0bff215 	stw	r2,-56(fp)
  80d420:	00800144 	movi	r2,5
  80d424:	e0bff98d 	sth	r2,-26(fp)
  80d428:	00bfe0c4 	movi	r2,-125
  80d42c:	e0bffa05 	stb	r2,-24(fp)
  80d430:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80d434:	d0a09243 	ldbu	r2,-32183(gp)
  80d438:	10803fcc 	andi	r2,r2,255
  80d43c:	10001526 	beq	r2,zero,80d494 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80d440:	e0fff98b 	ldhu	r3,-26(fp)
  80d444:	e13ffa03 	ldbu	r4,-24(fp)
  80d448:	e17ffa8b 	ldhu	r5,-22(fp)
  80d44c:	e0bffb44 	addi	r2,fp,-19
  80d450:	d8800015 	stw	r2,0(sp)
  80d454:	280f883a 	mov	r7,r5
  80d458:	200d883a 	mov	r6,r4
  80d45c:	180b883a 	mov	r5,r3
  80d460:	e13ff217 	ldw	r4,-56(fp)
  80d464:	08071740 	call	807174 <OSFlagPend>
  80d468:	00000a06 	br	80d494 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80d46c:	0001883a 	nop
  80d470:	e0bffc17 	ldw	r2,-16(fp)
  80d474:	10c00d17 	ldw	r3,52(r2)
  80d478:	e0bff317 	ldw	r2,-52(fp)
  80d47c:	1880051e 	bne	r3,r2,80d494 <altera_avalon_jtag_uart_read+0x1c8>
  80d480:	e0bffc17 	ldw	r2,-16(fp)
  80d484:	10c00917 	ldw	r3,36(r2)
  80d488:	e0bffc17 	ldw	r2,-16(fp)
  80d48c:	10800117 	ldw	r2,4(r2)
  80d490:	18bff736 	bltu	r3,r2,80d470 <__alt_mem_epcs_flash_controller_0+0xff804470>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80d494:	e0bffc17 	ldw	r2,-16(fp)
  80d498:	10c00d17 	ldw	r3,52(r2)
  80d49c:	e0bff317 	ldw	r2,-52(fp)
  80d4a0:	18800726 	beq	r3,r2,80d4c0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d4a4:	e0bffe17 	ldw	r2,-8(fp)
  80d4a8:	00bf9d16 	blt	zero,r2,80d320 <__alt_mem_epcs_flash_controller_0+0xff804320>
  80d4ac:	00000506 	br	80d4c4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80d4b0:	0001883a 	nop
  80d4b4:	00000306 	br	80d4c4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80d4b8:	0001883a 	nop
  80d4bc:	00000106 	br	80d4c4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80d4c0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80d4c4:	e0bffc17 	ldw	r2,-16(fp)
  80d4c8:	10800a17 	ldw	r2,40(r2)
  80d4cc:	1009883a 	mov	r4,r2
  80d4d0:	0809f600 	call	809f60 <OSSemPost>

  if (ptr != buffer)
  80d4d4:	e0fff017 	ldw	r3,-64(fp)
  80d4d8:	e0bffd17 	ldw	r2,-12(fp)
  80d4dc:	18801826 	beq	r3,r2,80d540 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d4e0:	0005303a 	rdctl	r2,status
  80d4e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d4e8:	e0fff717 	ldw	r3,-36(fp)
  80d4ec:	00bfff84 	movi	r2,-2
  80d4f0:	1884703a 	and	r2,r3,r2
  80d4f4:	1001703a 	wrctl	status,r2
  
  return context;
  80d4f8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80d4fc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d500:	e0bffc17 	ldw	r2,-16(fp)
  80d504:	10800817 	ldw	r2,32(r2)
  80d508:	10c00054 	ori	r3,r2,1
  80d50c:	e0bffc17 	ldw	r2,-16(fp)
  80d510:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d514:	e0bffc17 	ldw	r2,-16(fp)
  80d518:	10800017 	ldw	r2,0(r2)
  80d51c:	10800104 	addi	r2,r2,4
  80d520:	1007883a 	mov	r3,r2
  80d524:	e0bffc17 	ldw	r2,-16(fp)
  80d528:	10800817 	ldw	r2,32(r2)
  80d52c:	18800035 	stwio	r2,0(r3)
  80d530:	e0bff617 	ldw	r2,-40(fp)
  80d534:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d538:	e0bff517 	ldw	r2,-44(fp)
  80d53c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80d540:	e0fff017 	ldw	r3,-64(fp)
  80d544:	e0bffd17 	ldw	r2,-12(fp)
  80d548:	18800426 	beq	r3,r2,80d55c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  80d54c:	e0fff017 	ldw	r3,-64(fp)
  80d550:	e0bffd17 	ldw	r2,-12(fp)
  80d554:	1885c83a 	sub	r2,r3,r2
  80d558:	00000606 	br	80d574 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  80d55c:	e0bfff17 	ldw	r2,-4(fp)
  80d560:	1090000c 	andi	r2,r2,16384
  80d564:	10000226 	beq	r2,zero,80d570 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  80d568:	00bffd44 	movi	r2,-11
  80d56c:	00000106 	br	80d574 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  80d570:	00bffec4 	movi	r2,-5
}
  80d574:	e037883a 	mov	sp,fp
  80d578:	dfc00117 	ldw	ra,4(sp)
  80d57c:	df000017 	ldw	fp,0(sp)
  80d580:	dec00204 	addi	sp,sp,8
  80d584:	f800283a 	ret

0080d588 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d588:	deffed04 	addi	sp,sp,-76
  80d58c:	dfc01215 	stw	ra,72(sp)
  80d590:	df001115 	stw	fp,68(sp)
  80d594:	df001104 	addi	fp,sp,68
  80d598:	e13ffc15 	stw	r4,-16(fp)
  80d59c:	e17ffd15 	stw	r5,-12(fp)
  80d5a0:	e1bffe15 	stw	r6,-8(fp)
  80d5a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80d5a8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80d5ac:	e0bffd17 	ldw	r2,-12(fp)
  80d5b0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  80d5b4:	e0bffc17 	ldw	r2,-16(fp)
  80d5b8:	10800b17 	ldw	r2,44(r2)
  80d5bc:	e0bff815 	stw	r2,-32(fp)
  80d5c0:	e03ff90d 	sth	zero,-28(fp)
  80d5c4:	e0bff90b 	ldhu	r2,-28(fp)
  80d5c8:	e0fffb44 	addi	r3,fp,-19
  80d5cc:	180d883a 	mov	r6,r3
  80d5d0:	100b883a 	mov	r5,r2
  80d5d4:	e13ff817 	ldw	r4,-32(fp)
  80d5d8:	0809be80 	call	809be8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d5dc:	00003706 	br	80d6bc <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d5e0:	e0bffc17 	ldw	r2,-16(fp)
  80d5e4:	10800f17 	ldw	r2,60(r2)
  80d5e8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  80d5ec:	e0bffc17 	ldw	r2,-16(fp)
  80d5f0:	10801017 	ldw	r2,64(r2)
  80d5f4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  80d5f8:	e0fff417 	ldw	r3,-48(fp)
  80d5fc:	e0bff017 	ldw	r2,-64(fp)
  80d600:	1880062e 	bgeu	r3,r2,80d61c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  80d604:	e0fff017 	ldw	r3,-64(fp)
  80d608:	e0bff417 	ldw	r2,-48(fp)
  80d60c:	1885c83a 	sub	r2,r3,r2
  80d610:	10bfffc4 	addi	r2,r2,-1
  80d614:	e0bff115 	stw	r2,-60(fp)
  80d618:	00000b06 	br	80d648 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  80d61c:	e0bff017 	ldw	r2,-64(fp)
  80d620:	10000526 	beq	r2,zero,80d638 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d624:	00c20004 	movi	r3,2048
  80d628:	e0bff417 	ldw	r2,-48(fp)
  80d62c:	1885c83a 	sub	r2,r3,r2
  80d630:	e0bff115 	stw	r2,-60(fp)
  80d634:	00000406 	br	80d648 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d638:	00c1ffc4 	movi	r3,2047
  80d63c:	e0bff417 	ldw	r2,-48(fp)
  80d640:	1885c83a 	sub	r2,r3,r2
  80d644:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  80d648:	e0bff117 	ldw	r2,-60(fp)
  80d64c:	10001e26 	beq	r2,zero,80d6c8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  80d650:	e0fffe17 	ldw	r3,-8(fp)
  80d654:	e0bff117 	ldw	r2,-60(fp)
  80d658:	1880022e 	bgeu	r3,r2,80d664 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  80d65c:	e0bffe17 	ldw	r2,-8(fp)
  80d660:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80d664:	e0bffc17 	ldw	r2,-16(fp)
  80d668:	10c21104 	addi	r3,r2,2116
  80d66c:	e0bff417 	ldw	r2,-48(fp)
  80d670:	1885883a 	add	r2,r3,r2
  80d674:	e1bff117 	ldw	r6,-60(fp)
  80d678:	e17ffd17 	ldw	r5,-12(fp)
  80d67c:	1009883a 	mov	r4,r2
  80d680:	08020b80 	call	8020b8 <memcpy>
      ptr   += n;
  80d684:	e0fffd17 	ldw	r3,-12(fp)
  80d688:	e0bff117 	ldw	r2,-60(fp)
  80d68c:	1885883a 	add	r2,r3,r2
  80d690:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80d694:	e0fffe17 	ldw	r3,-8(fp)
  80d698:	e0bff117 	ldw	r2,-60(fp)
  80d69c:	1885c83a 	sub	r2,r3,r2
  80d6a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d6a4:	e0fff417 	ldw	r3,-48(fp)
  80d6a8:	e0bff117 	ldw	r2,-60(fp)
  80d6ac:	1885883a 	add	r2,r3,r2
  80d6b0:	10c1ffcc 	andi	r3,r2,2047
  80d6b4:	e0bffc17 	ldw	r2,-16(fp)
  80d6b8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d6bc:	e0bffe17 	ldw	r2,-8(fp)
  80d6c0:	00bfc716 	blt	zero,r2,80d5e0 <__alt_mem_epcs_flash_controller_0+0xff8045e0>
  80d6c4:	00000106 	br	80d6cc <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80d6c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d6cc:	0005303a 	rdctl	r2,status
  80d6d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d6d4:	e0fff717 	ldw	r3,-36(fp)
  80d6d8:	00bfff84 	movi	r2,-2
  80d6dc:	1884703a 	and	r2,r3,r2
  80d6e0:	1001703a 	wrctl	status,r2
  
  return context;
  80d6e4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80d6e8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d6ec:	e0bffc17 	ldw	r2,-16(fp)
  80d6f0:	10800817 	ldw	r2,32(r2)
  80d6f4:	10c00094 	ori	r3,r2,2
  80d6f8:	e0bffc17 	ldw	r2,-16(fp)
  80d6fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d700:	e0bffc17 	ldw	r2,-16(fp)
  80d704:	10800017 	ldw	r2,0(r2)
  80d708:	10800104 	addi	r2,r2,4
  80d70c:	1007883a 	mov	r3,r2
  80d710:	e0bffc17 	ldw	r2,-16(fp)
  80d714:	10800817 	ldw	r2,32(r2)
  80d718:	18800035 	stwio	r2,0(r3)
  80d71c:	e0bff617 	ldw	r2,-40(fp)
  80d720:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d724:	e0bff317 	ldw	r2,-52(fp)
  80d728:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80d72c:	e0bffe17 	ldw	r2,-8(fp)
  80d730:	00802a0e 	bge	zero,r2,80d7dc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  80d734:	e0bfff17 	ldw	r2,-4(fp)
  80d738:	1090000c 	andi	r2,r2,16384
  80d73c:	10002a1e 	bne	r2,zero,80d7e8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  80d740:	d0a09243 	ldbu	r2,-32183(gp)
  80d744:	10803fcc 	andi	r2,r2,255
  80d748:	10800058 	cmpnei	r2,r2,1
  80d74c:	1000161e 	bne	r2,zero,80d7a8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  80d750:	e0bffc17 	ldw	r2,-16(fp)
  80d754:	10800c17 	ldw	r2,48(r2)
  80d758:	e0bff515 	stw	r2,-44(fp)
  80d75c:	00800184 	movi	r2,6
  80d760:	e0bff98d 	sth	r2,-26(fp)
  80d764:	00bfe0c4 	movi	r2,-125
  80d768:	e0bffa05 	stb	r2,-24(fp)
  80d76c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80d770:	d0a09243 	ldbu	r2,-32183(gp)
  80d774:	10803fcc 	andi	r2,r2,255
  80d778:	10001526 	beq	r2,zero,80d7d0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80d77c:	e0fff98b 	ldhu	r3,-26(fp)
  80d780:	e13ffa03 	ldbu	r4,-24(fp)
  80d784:	e17ffa8b 	ldhu	r5,-22(fp)
  80d788:	e0bffb04 	addi	r2,fp,-20
  80d78c:	d8800015 	stw	r2,0(sp)
  80d790:	280f883a 	mov	r7,r5
  80d794:	200d883a 	mov	r6,r4
  80d798:	180b883a 	mov	r5,r3
  80d79c:	e13ff517 	ldw	r4,-44(fp)
  80d7a0:	08071740 	call	807174 <OSFlagPend>
  80d7a4:	00000a06 	br	80d7d0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d7a8:	0001883a 	nop
  80d7ac:	e0bffc17 	ldw	r2,-16(fp)
  80d7b0:	10c01017 	ldw	r3,64(r2)
  80d7b4:	e0bff017 	ldw	r2,-64(fp)
  80d7b8:	1880051e 	bne	r3,r2,80d7d0 <altera_avalon_jtag_uart_write+0x248>
  80d7bc:	e0bffc17 	ldw	r2,-16(fp)
  80d7c0:	10c00917 	ldw	r3,36(r2)
  80d7c4:	e0bffc17 	ldw	r2,-16(fp)
  80d7c8:	10800117 	ldw	r2,4(r2)
  80d7cc:	18bff736 	bltu	r3,r2,80d7ac <__alt_mem_epcs_flash_controller_0+0xff8047ac>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80d7d0:	e0bffc17 	ldw	r2,-16(fp)
  80d7d4:	10800917 	ldw	r2,36(r2)
  80d7d8:	1000051e 	bne	r2,zero,80d7f0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  80d7dc:	e0bffe17 	ldw	r2,-8(fp)
  80d7e0:	00bfb616 	blt	zero,r2,80d6bc <__alt_mem_epcs_flash_controller_0+0xff8046bc>
  80d7e4:	00000306 	br	80d7f4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80d7e8:	0001883a 	nop
  80d7ec:	00000106 	br	80d7f4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80d7f0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  80d7f4:	e0bffc17 	ldw	r2,-16(fp)
  80d7f8:	10800b17 	ldw	r2,44(r2)
  80d7fc:	1009883a 	mov	r4,r2
  80d800:	0809f600 	call	809f60 <OSSemPost>

  if (ptr != start)
  80d804:	e0fffd17 	ldw	r3,-12(fp)
  80d808:	e0bff217 	ldw	r2,-56(fp)
  80d80c:	18800426 	beq	r3,r2,80d820 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  80d810:	e0fffd17 	ldw	r3,-12(fp)
  80d814:	e0bff217 	ldw	r2,-56(fp)
  80d818:	1885c83a 	sub	r2,r3,r2
  80d81c:	00000606 	br	80d838 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  80d820:	e0bfff17 	ldw	r2,-4(fp)
  80d824:	1090000c 	andi	r2,r2,16384
  80d828:	10000226 	beq	r2,zero,80d834 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  80d82c:	00bffd44 	movi	r2,-11
  80d830:	00000106 	br	80d838 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80d834:	00bffec4 	movi	r2,-5
}
  80d838:	e037883a 	mov	sp,fp
  80d83c:	dfc00117 	ldw	ra,4(sp)
  80d840:	df000017 	ldw	fp,0(sp)
  80d844:	dec00204 	addi	sp,sp,8
  80d848:	f800283a 	ret

0080d84c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d84c:	defffa04 	addi	sp,sp,-24
  80d850:	dfc00515 	stw	ra,20(sp)
  80d854:	df000415 	stw	fp,16(sp)
  80d858:	df000404 	addi	fp,sp,16
  80d85c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80d860:	0007883a 	mov	r3,zero
  80d864:	e0bfff17 	ldw	r2,-4(fp)
  80d868:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80d86c:	e0bfff17 	ldw	r2,-4(fp)
  80d870:	10800104 	addi	r2,r2,4
  80d874:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d878:	0005303a 	rdctl	r2,status
  80d87c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d880:	e0fffd17 	ldw	r3,-12(fp)
  80d884:	00bfff84 	movi	r2,-2
  80d888:	1884703a 	and	r2,r3,r2
  80d88c:	1001703a 	wrctl	status,r2
  
  return context;
  80d890:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80d894:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80d898:	08104700 	call	810470 <alt_tick>
  80d89c:	e0bffc17 	ldw	r2,-16(fp)
  80d8a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d8a4:	e0bffe17 	ldw	r2,-8(fp)
  80d8a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80d8ac:	0001883a 	nop
  80d8b0:	e037883a 	mov	sp,fp
  80d8b4:	dfc00117 	ldw	ra,4(sp)
  80d8b8:	df000017 	ldw	fp,0(sp)
  80d8bc:	dec00204 	addi	sp,sp,8
  80d8c0:	f800283a 	ret

0080d8c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80d8c4:	defff804 	addi	sp,sp,-32
  80d8c8:	dfc00715 	stw	ra,28(sp)
  80d8cc:	df000615 	stw	fp,24(sp)
  80d8d0:	df000604 	addi	fp,sp,24
  80d8d4:	e13ffc15 	stw	r4,-16(fp)
  80d8d8:	e17ffd15 	stw	r5,-12(fp)
  80d8dc:	e1bffe15 	stw	r6,-8(fp)
  80d8e0:	e1ffff15 	stw	r7,-4(fp)
  80d8e4:	e0bfff17 	ldw	r2,-4(fp)
  80d8e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80d8ec:	d0a0a717 	ldw	r2,-32100(gp)
  80d8f0:	1000021e 	bne	r2,zero,80d8fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80d8f4:	e0bffb17 	ldw	r2,-20(fp)
  80d8f8:	d0a0a715 	stw	r2,-32100(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80d8fc:	e0bffc17 	ldw	r2,-16(fp)
  80d900:	10800104 	addi	r2,r2,4
  80d904:	00c001c4 	movi	r3,7
  80d908:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80d90c:	d8000015 	stw	zero,0(sp)
  80d910:	e1fffc17 	ldw	r7,-16(fp)
  80d914:	01802074 	movhi	r6,129
  80d918:	31b61304 	addi	r6,r6,-10164
  80d91c:	e17ffe17 	ldw	r5,-8(fp)
  80d920:	e13ffd17 	ldw	r4,-12(fp)
  80d924:	0803ae80 	call	803ae8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80d928:	0001883a 	nop
  80d92c:	e037883a 	mov	sp,fp
  80d930:	dfc00117 	ldw	ra,4(sp)
  80d934:	df000017 	ldw	fp,0(sp)
  80d938:	dec00204 	addi	sp,sp,8
  80d93c:	f800283a 	ret

0080d940 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d940:	defffa04 	addi	sp,sp,-24
  80d944:	dfc00515 	stw	ra,20(sp)
  80d948:	df000415 	stw	fp,16(sp)
  80d94c:	df000404 	addi	fp,sp,16
  80d950:	e13ffd15 	stw	r4,-12(fp)
  80d954:	e17ffe15 	stw	r5,-8(fp)
  80d958:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d95c:	e0bffd17 	ldw	r2,-12(fp)
  80d960:	10800017 	ldw	r2,0(r2)
  80d964:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80d968:	e0bffc17 	ldw	r2,-16(fp)
  80d96c:	10c00a04 	addi	r3,r2,40
  80d970:	e0bffd17 	ldw	r2,-12(fp)
  80d974:	10800217 	ldw	r2,8(r2)
  80d978:	100f883a 	mov	r7,r2
  80d97c:	e1bfff17 	ldw	r6,-4(fp)
  80d980:	e17ffe17 	ldw	r5,-8(fp)
  80d984:	1809883a 	mov	r4,r3
  80d988:	080dfb80 	call	80dfb8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80d98c:	e037883a 	mov	sp,fp
  80d990:	dfc00117 	ldw	ra,4(sp)
  80d994:	df000017 	ldw	fp,0(sp)
  80d998:	dec00204 	addi	sp,sp,8
  80d99c:	f800283a 	ret

0080d9a0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d9a0:	defffa04 	addi	sp,sp,-24
  80d9a4:	dfc00515 	stw	ra,20(sp)
  80d9a8:	df000415 	stw	fp,16(sp)
  80d9ac:	df000404 	addi	fp,sp,16
  80d9b0:	e13ffd15 	stw	r4,-12(fp)
  80d9b4:	e17ffe15 	stw	r5,-8(fp)
  80d9b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d9bc:	e0bffd17 	ldw	r2,-12(fp)
  80d9c0:	10800017 	ldw	r2,0(r2)
  80d9c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80d9c8:	e0bffc17 	ldw	r2,-16(fp)
  80d9cc:	10c00a04 	addi	r3,r2,40
  80d9d0:	e0bffd17 	ldw	r2,-12(fp)
  80d9d4:	10800217 	ldw	r2,8(r2)
  80d9d8:	100f883a 	mov	r7,r2
  80d9dc:	e1bfff17 	ldw	r6,-4(fp)
  80d9e0:	e17ffe17 	ldw	r5,-8(fp)
  80d9e4:	1809883a 	mov	r4,r3
  80d9e8:	080e25c0 	call	80e25c <altera_avalon_uart_write>
      fd->fd_flags);
}
  80d9ec:	e037883a 	mov	sp,fp
  80d9f0:	dfc00117 	ldw	ra,4(sp)
  80d9f4:	df000017 	ldw	fp,0(sp)
  80d9f8:	dec00204 	addi	sp,sp,8
  80d9fc:	f800283a 	ret

0080da00 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80da00:	defffc04 	addi	sp,sp,-16
  80da04:	dfc00315 	stw	ra,12(sp)
  80da08:	df000215 	stw	fp,8(sp)
  80da0c:	df000204 	addi	fp,sp,8
  80da10:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80da14:	e0bfff17 	ldw	r2,-4(fp)
  80da18:	10800017 	ldw	r2,0(r2)
  80da1c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80da20:	e0bffe17 	ldw	r2,-8(fp)
  80da24:	10c00a04 	addi	r3,r2,40
  80da28:	e0bfff17 	ldw	r2,-4(fp)
  80da2c:	10800217 	ldw	r2,8(r2)
  80da30:	100b883a 	mov	r5,r2
  80da34:	1809883a 	mov	r4,r3
  80da38:	080df280 	call	80df28 <altera_avalon_uart_close>
}
  80da3c:	e037883a 	mov	sp,fp
  80da40:	dfc00117 	ldw	ra,4(sp)
  80da44:	df000017 	ldw	fp,0(sp)
  80da48:	dec00204 	addi	sp,sp,8
  80da4c:	f800283a 	ret

0080da50 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80da50:	defff304 	addi	sp,sp,-52
  80da54:	dfc00c15 	stw	ra,48(sp)
  80da58:	df000b15 	stw	fp,44(sp)
  80da5c:	df000b04 	addi	fp,sp,44
  80da60:	e13ffd15 	stw	r4,-12(fp)
  80da64:	e17ffe15 	stw	r5,-8(fp)
  80da68:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80da6c:	e0bffd17 	ldw	r2,-12(fp)
  80da70:	10800017 	ldw	r2,0(r2)
  80da74:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80da78:	e0bffd17 	ldw	r2,-12(fp)
  80da7c:	10800704 	addi	r2,r2,28
  80da80:	e0bffa15 	stw	r2,-24(fp)
  80da84:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80da88:	e0bffb0b 	ldhu	r2,-20(fp)
  80da8c:	e0fffc84 	addi	r3,fp,-14
  80da90:	180b883a 	mov	r5,r3
  80da94:	1009883a 	mov	r4,r2
  80da98:	0806bb00 	call	806bb0 <OSFlagCreate>
  80da9c:	1007883a 	mov	r3,r2
  80daa0:	e0bffa17 	ldw	r2,-24(fp)
  80daa4:	10c00015 	stw	r3,0(r2)
  return err;
  80daa8:	e0bffc83 	ldbu	r2,-14(fp)
  80daac:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80dab0:	1000241e 	bne	r2,zero,80db44 <altera_avalon_uart_init+0xf4>
  80dab4:	e0bffd17 	ldw	r2,-12(fp)
  80dab8:	10800804 	addi	r2,r2,32
  80dabc:	e0bff715 	stw	r2,-36(fp)
  80dac0:	00800044 	movi	r2,1
  80dac4:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80dac8:	e0bffb8b 	ldhu	r2,-18(fp)
  80dacc:	1009883a 	mov	r4,r2
  80dad0:	08098d00 	call	8098d0 <OSSemCreate>
  80dad4:	1007883a 	mov	r3,r2
  80dad8:	e0bff717 	ldw	r2,-36(fp)
  80dadc:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80dae0:	e0bff717 	ldw	r2,-36(fp)
  80dae4:	10800017 	ldw	r2,0(r2)
  80dae8:	10000226 	beq	r2,zero,80daf4 <altera_avalon_uart_init+0xa4>
  80daec:	0005883a 	mov	r2,zero
  80daf0:	00000106 	br	80daf8 <altera_avalon_uart_init+0xa8>
  80daf4:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80daf8:	1000121e 	bne	r2,zero,80db44 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  80dafc:	e0bffd17 	ldw	r2,-12(fp)
  80db00:	10800904 	addi	r2,r2,36
  80db04:	e0bff815 	stw	r2,-32(fp)
  80db08:	00800044 	movi	r2,1
  80db0c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80db10:	e0bffc0b 	ldhu	r2,-16(fp)
  80db14:	1009883a 	mov	r4,r2
  80db18:	08098d00 	call	8098d0 <OSSemCreate>
  80db1c:	1007883a 	mov	r3,r2
  80db20:	e0bff817 	ldw	r2,-32(fp)
  80db24:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80db28:	e0bff817 	ldw	r2,-32(fp)
  80db2c:	10800017 	ldw	r2,0(r2)
  80db30:	10000226 	beq	r2,zero,80db3c <altera_avalon_uart_init+0xec>
  80db34:	0005883a 	mov	r2,zero
  80db38:	00000106 	br	80db40 <altera_avalon_uart_init+0xf0>
  80db3c:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80db40:	10000226 	beq	r2,zero,80db4c <altera_avalon_uart_init+0xfc>
  80db44:	00800044 	movi	r2,1
  80db48:	00000106 	br	80db50 <altera_avalon_uart_init+0x100>
  80db4c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80db50:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80db54:	e0bff917 	ldw	r2,-28(fp)
  80db58:	10000f1e 	bne	r2,zero,80db98 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80db5c:	e0bffd17 	ldw	r2,-12(fp)
  80db60:	00c32004 	movi	r3,3200
  80db64:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80db68:	e0bff617 	ldw	r2,-40(fp)
  80db6c:	10800304 	addi	r2,r2,12
  80db70:	e0fffd17 	ldw	r3,-12(fp)
  80db74:	18c00117 	ldw	r3,4(r3)
  80db78:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80db7c:	d8000015 	stw	zero,0(sp)
  80db80:	e1fffd17 	ldw	r7,-12(fp)
  80db84:	01802074 	movhi	r6,129
  80db88:	31b6ec04 	addi	r6,r6,-9296
  80db8c:	e17fff17 	ldw	r5,-4(fp)
  80db90:	e13ffe17 	ldw	r4,-8(fp)
  80db94:	0803ae80 	call	803ae8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80db98:	0001883a 	nop
  80db9c:	e037883a 	mov	sp,fp
  80dba0:	dfc00117 	ldw	ra,4(sp)
  80dba4:	df000017 	ldw	fp,0(sp)
  80dba8:	dec00204 	addi	sp,sp,8
  80dbac:	f800283a 	ret

0080dbb0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80dbb0:	defffa04 	addi	sp,sp,-24
  80dbb4:	dfc00515 	stw	ra,20(sp)
  80dbb8:	df000415 	stw	fp,16(sp)
  80dbbc:	df000404 	addi	fp,sp,16
  80dbc0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80dbc4:	e0bfff17 	ldw	r2,-4(fp)
  80dbc8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80dbcc:	e0bffc17 	ldw	r2,-16(fp)
  80dbd0:	10800017 	ldw	r2,0(r2)
  80dbd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80dbd8:	e0bffd17 	ldw	r2,-12(fp)
  80dbdc:	10800204 	addi	r2,r2,8
  80dbe0:	10800037 	ldwio	r2,0(r2)
  80dbe4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80dbe8:	e0bffd17 	ldw	r2,-12(fp)
  80dbec:	10800204 	addi	r2,r2,8
  80dbf0:	0007883a 	mov	r3,zero
  80dbf4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80dbf8:	e0bffd17 	ldw	r2,-12(fp)
  80dbfc:	10800204 	addi	r2,r2,8
  80dc00:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80dc04:	e0bffe17 	ldw	r2,-8(fp)
  80dc08:	1080200c 	andi	r2,r2,128
  80dc0c:	10000326 	beq	r2,zero,80dc1c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80dc10:	e17ffe17 	ldw	r5,-8(fp)
  80dc14:	e13ffc17 	ldw	r4,-16(fp)
  80dc18:	080dc4c0 	call	80dc4c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80dc1c:	e0bffe17 	ldw	r2,-8(fp)
  80dc20:	1081100c 	andi	r2,r2,1088
  80dc24:	10000326 	beq	r2,zero,80dc34 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80dc28:	e17ffe17 	ldw	r5,-8(fp)
  80dc2c:	e13ffc17 	ldw	r4,-16(fp)
  80dc30:	080dd840 	call	80dd84 <altera_avalon_uart_txirq>
  }
  

}
  80dc34:	0001883a 	nop
  80dc38:	e037883a 	mov	sp,fp
  80dc3c:	dfc00117 	ldw	ra,4(sp)
  80dc40:	df000017 	ldw	fp,0(sp)
  80dc44:	dec00204 	addi	sp,sp,8
  80dc48:	f800283a 	ret

0080dc4c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80dc4c:	defff904 	addi	sp,sp,-28
  80dc50:	dfc00615 	stw	ra,24(sp)
  80dc54:	df000515 	stw	fp,20(sp)
  80dc58:	df000504 	addi	fp,sp,20
  80dc5c:	e13ffe15 	stw	r4,-8(fp)
  80dc60:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80dc64:	e0bfff17 	ldw	r2,-4(fp)
  80dc68:	108000cc 	andi	r2,r2,3
  80dc6c:	10003f1e 	bne	r2,zero,80dd6c <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80dc70:	e0bffe17 	ldw	r2,-8(fp)
  80dc74:	10c00317 	ldw	r3,12(r2)
  80dc78:	e0bffe17 	ldw	r2,-8(fp)
  80dc7c:	10800217 	ldw	r2,8(r2)
  80dc80:	1880121e 	bne	r3,r2,80dccc <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  80dc84:	e0bffe17 	ldw	r2,-8(fp)
  80dc88:	10800717 	ldw	r2,28(r2)
  80dc8c:	e0bffc15 	stw	r2,-16(fp)
  80dc90:	00800044 	movi	r2,1
  80dc94:	e0bffd0d 	sth	r2,-12(fp)
  80dc98:	00800044 	movi	r2,1
  80dc9c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80dca0:	d0a09243 	ldbu	r2,-32183(gp)
  80dca4:	10803fcc 	andi	r2,r2,255
  80dca8:	10000826 	beq	r2,zero,80dccc <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  80dcac:	e0bffd0b 	ldhu	r2,-12(fp)
  80dcb0:	e0fffd83 	ldbu	r3,-10(fp)
  80dcb4:	e13ffdc4 	addi	r4,fp,-9
  80dcb8:	200f883a 	mov	r7,r4
  80dcbc:	180d883a 	mov	r6,r3
  80dcc0:	100b883a 	mov	r5,r2
  80dcc4:	e13ffc17 	ldw	r4,-16(fp)
  80dcc8:	080778c0 	call	80778c <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80dccc:	e0bffe17 	ldw	r2,-8(fp)
  80dcd0:	10800317 	ldw	r2,12(r2)
  80dcd4:	10800044 	addi	r2,r2,1
  80dcd8:	10800fcc 	andi	r2,r2,63
  80dcdc:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80dce0:	e0bffe17 	ldw	r2,-8(fp)
  80dce4:	10800317 	ldw	r2,12(r2)
  80dce8:	e0fffe17 	ldw	r3,-8(fp)
  80dcec:	18c00017 	ldw	r3,0(r3)
  80dcf0:	18c00037 	ldwio	r3,0(r3)
  80dcf4:	1809883a 	mov	r4,r3
  80dcf8:	e0fffe17 	ldw	r3,-8(fp)
  80dcfc:	1885883a 	add	r2,r3,r2
  80dd00:	10800a04 	addi	r2,r2,40
  80dd04:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80dd08:	e0bffe17 	ldw	r2,-8(fp)
  80dd0c:	e0fffb17 	ldw	r3,-20(fp)
  80dd10:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80dd14:	e0bffe17 	ldw	r2,-8(fp)
  80dd18:	10800317 	ldw	r2,12(r2)
  80dd1c:	10800044 	addi	r2,r2,1
  80dd20:	10800fcc 	andi	r2,r2,63
  80dd24:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80dd28:	e0bffe17 	ldw	r2,-8(fp)
  80dd2c:	10c00217 	ldw	r3,8(r2)
  80dd30:	e0bffb17 	ldw	r2,-20(fp)
  80dd34:	18800e1e 	bne	r3,r2,80dd70 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80dd38:	e0bffe17 	ldw	r2,-8(fp)
  80dd3c:	10c00117 	ldw	r3,4(r2)
  80dd40:	00bfdfc4 	movi	r2,-129
  80dd44:	1886703a 	and	r3,r3,r2
  80dd48:	e0bffe17 	ldw	r2,-8(fp)
  80dd4c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80dd50:	e0bffe17 	ldw	r2,-8(fp)
  80dd54:	10800017 	ldw	r2,0(r2)
  80dd58:	10800304 	addi	r2,r2,12
  80dd5c:	e0fffe17 	ldw	r3,-8(fp)
  80dd60:	18c00117 	ldw	r3,4(r3)
  80dd64:	10c00035 	stwio	r3,0(r2)
  80dd68:	00000106 	br	80dd70 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80dd6c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80dd70:	e037883a 	mov	sp,fp
  80dd74:	dfc00117 	ldw	ra,4(sp)
  80dd78:	df000017 	ldw	fp,0(sp)
  80dd7c:	dec00204 	addi	sp,sp,8
  80dd80:	f800283a 	ret

0080dd84 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80dd84:	defffa04 	addi	sp,sp,-24
  80dd88:	dfc00515 	stw	ra,20(sp)
  80dd8c:	df000415 	stw	fp,16(sp)
  80dd90:	df000404 	addi	fp,sp,16
  80dd94:	e13ffe15 	stw	r4,-8(fp)
  80dd98:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80dd9c:	e0bffe17 	ldw	r2,-8(fp)
  80dda0:	10c00417 	ldw	r3,16(r2)
  80dda4:	e0bffe17 	ldw	r2,-8(fp)
  80dda8:	10800517 	ldw	r2,20(r2)
  80ddac:	18804726 	beq	r3,r2,80decc <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80ddb0:	e0bffe17 	ldw	r2,-8(fp)
  80ddb4:	10800617 	ldw	r2,24(r2)
  80ddb8:	1080008c 	andi	r2,r2,2
  80ddbc:	10000326 	beq	r2,zero,80ddcc <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80ddc0:	e0bfff17 	ldw	r2,-4(fp)
  80ddc4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80ddc8:	10003226 	beq	r2,zero,80de94 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80ddcc:	e0bffe17 	ldw	r2,-8(fp)
  80ddd0:	10c00417 	ldw	r3,16(r2)
  80ddd4:	e0bffe17 	ldw	r2,-8(fp)
  80ddd8:	10800517 	ldw	r2,20(r2)
  80dddc:	10800044 	addi	r2,r2,1
  80dde0:	10800fcc 	andi	r2,r2,63
  80dde4:	1880121e 	bne	r3,r2,80de30 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  80dde8:	e0bffe17 	ldw	r2,-8(fp)
  80ddec:	10800717 	ldw	r2,28(r2)
  80ddf0:	e0bffc15 	stw	r2,-16(fp)
  80ddf4:	00800084 	movi	r2,2
  80ddf8:	e0bffd0d 	sth	r2,-12(fp)
  80ddfc:	00800044 	movi	r2,1
  80de00:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80de04:	d0a09243 	ldbu	r2,-32183(gp)
  80de08:	10803fcc 	andi	r2,r2,255
  80de0c:	10000826 	beq	r2,zero,80de30 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  80de10:	e0bffd0b 	ldhu	r2,-12(fp)
  80de14:	e0fffd83 	ldbu	r3,-10(fp)
  80de18:	e13ffdc4 	addi	r4,fp,-9
  80de1c:	200f883a 	mov	r7,r4
  80de20:	180d883a 	mov	r6,r3
  80de24:	100b883a 	mov	r5,r2
  80de28:	e13ffc17 	ldw	r4,-16(fp)
  80de2c:	080778c0 	call	80778c <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80de30:	e0bffe17 	ldw	r2,-8(fp)
  80de34:	10800017 	ldw	r2,0(r2)
  80de38:	10800104 	addi	r2,r2,4
  80de3c:	e0fffe17 	ldw	r3,-8(fp)
  80de40:	18c00417 	ldw	r3,16(r3)
  80de44:	e13ffe17 	ldw	r4,-8(fp)
  80de48:	20c7883a 	add	r3,r4,r3
  80de4c:	18c01a04 	addi	r3,r3,104
  80de50:	18c00003 	ldbu	r3,0(r3)
  80de54:	18c03fcc 	andi	r3,r3,255
  80de58:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80de5c:	e0bffe17 	ldw	r2,-8(fp)
  80de60:	10800417 	ldw	r2,16(r2)
  80de64:	10800044 	addi	r2,r2,1
  80de68:	e0fffe17 	ldw	r3,-8(fp)
  80de6c:	18800415 	stw	r2,16(r3)
  80de70:	10c00fcc 	andi	r3,r2,63
  80de74:	e0bffe17 	ldw	r2,-8(fp)
  80de78:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80de7c:	e0bffe17 	ldw	r2,-8(fp)
  80de80:	10800117 	ldw	r2,4(r2)
  80de84:	10c01014 	ori	r3,r2,64
  80de88:	e0bffe17 	ldw	r2,-8(fp)
  80de8c:	10c00115 	stw	r3,4(r2)
  80de90:	00000e06 	br	80decc <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80de94:	e0bffe17 	ldw	r2,-8(fp)
  80de98:	10800017 	ldw	r2,0(r2)
  80de9c:	10800204 	addi	r2,r2,8
  80dea0:	10800037 	ldwio	r2,0(r2)
  80dea4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80dea8:	e0bfff17 	ldw	r2,-4(fp)
  80deac:	1082000c 	andi	r2,r2,2048
  80deb0:	1000061e 	bne	r2,zero,80decc <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80deb4:	e0bffe17 	ldw	r2,-8(fp)
  80deb8:	10c00117 	ldw	r3,4(r2)
  80debc:	00bfefc4 	movi	r2,-65
  80dec0:	1886703a 	and	r3,r3,r2
  80dec4:	e0bffe17 	ldw	r2,-8(fp)
  80dec8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80decc:	e0bffe17 	ldw	r2,-8(fp)
  80ded0:	10c00417 	ldw	r3,16(r2)
  80ded4:	e0bffe17 	ldw	r2,-8(fp)
  80ded8:	10800517 	ldw	r2,20(r2)
  80dedc:	1880061e 	bne	r3,r2,80def8 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80dee0:	e0bffe17 	ldw	r2,-8(fp)
  80dee4:	10c00117 	ldw	r3,4(r2)
  80dee8:	00beefc4 	movi	r2,-1089
  80deec:	1886703a 	and	r3,r3,r2
  80def0:	e0bffe17 	ldw	r2,-8(fp)
  80def4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80def8:	e0bffe17 	ldw	r2,-8(fp)
  80defc:	10800017 	ldw	r2,0(r2)
  80df00:	10800304 	addi	r2,r2,12
  80df04:	e0fffe17 	ldw	r3,-8(fp)
  80df08:	18c00117 	ldw	r3,4(r3)
  80df0c:	10c00035 	stwio	r3,0(r2)
}
  80df10:	0001883a 	nop
  80df14:	e037883a 	mov	sp,fp
  80df18:	dfc00117 	ldw	ra,4(sp)
  80df1c:	df000017 	ldw	fp,0(sp)
  80df20:	dec00204 	addi	sp,sp,8
  80df24:	f800283a 	ret

0080df28 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80df28:	defffd04 	addi	sp,sp,-12
  80df2c:	df000215 	stw	fp,8(sp)
  80df30:	df000204 	addi	fp,sp,8
  80df34:	e13ffe15 	stw	r4,-8(fp)
  80df38:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80df3c:	00000506 	br	80df54 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80df40:	e0bfff17 	ldw	r2,-4(fp)
  80df44:	1090000c 	andi	r2,r2,16384
  80df48:	10000226 	beq	r2,zero,80df54 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80df4c:	00bffd44 	movi	r2,-11
  80df50:	00000606 	br	80df6c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80df54:	e0bffe17 	ldw	r2,-8(fp)
  80df58:	10c00417 	ldw	r3,16(r2)
  80df5c:	e0bffe17 	ldw	r2,-8(fp)
  80df60:	10800517 	ldw	r2,20(r2)
  80df64:	18bff61e 	bne	r3,r2,80df40 <__alt_mem_epcs_flash_controller_0+0xff804f40>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80df68:	0005883a 	mov	r2,zero
}
  80df6c:	e037883a 	mov	sp,fp
  80df70:	df000017 	ldw	fp,0(sp)
  80df74:	dec00104 	addi	sp,sp,4
  80df78:	f800283a 	ret

0080df7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80df7c:	defffe04 	addi	sp,sp,-8
  80df80:	dfc00115 	stw	ra,4(sp)
  80df84:	df000015 	stw	fp,0(sp)
  80df88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80df8c:	d0a03f17 	ldw	r2,-32516(gp)
  80df90:	10000326 	beq	r2,zero,80dfa0 <alt_get_errno+0x24>
  80df94:	d0a03f17 	ldw	r2,-32516(gp)
  80df98:	103ee83a 	callr	r2
  80df9c:	00000106 	br	80dfa4 <alt_get_errno+0x28>
  80dfa0:	d0a08804 	addi	r2,gp,-32224
}
  80dfa4:	e037883a 	mov	sp,fp
  80dfa8:	dfc00117 	ldw	ra,4(sp)
  80dfac:	df000017 	ldw	fp,0(sp)
  80dfb0:	dec00204 	addi	sp,sp,8
  80dfb4:	f800283a 	ret

0080dfb8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80dfb8:	deffec04 	addi	sp,sp,-80
  80dfbc:	dfc01315 	stw	ra,76(sp)
  80dfc0:	df001215 	stw	fp,72(sp)
  80dfc4:	df001204 	addi	fp,sp,72
  80dfc8:	e13ffc15 	stw	r4,-16(fp)
  80dfcc:	e17ffd15 	stw	r5,-12(fp)
  80dfd0:	e1bffe15 	stw	r6,-8(fp)
  80dfd4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80dfd8:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  80dfdc:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80dfe0:	e0bfff17 	ldw	r2,-4(fp)
  80dfe4:	1090000c 	andi	r2,r2,16384
  80dfe8:	1005003a 	cmpeq	r2,r2,zero
  80dfec:	10803fcc 	andi	r2,r2,255
  80dff0:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  80dff4:	e0bffc17 	ldw	r2,-16(fp)
  80dff8:	10800817 	ldw	r2,32(r2)
  80dffc:	e0bff815 	stw	r2,-32(fp)
  80e000:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80e004:	e0bff90b 	ldhu	r2,-28(fp)
  80e008:	e0fffb44 	addi	r3,fp,-19
  80e00c:	180d883a 	mov	r6,r3
  80e010:	100b883a 	mov	r5,r2
  80e014:	e13ff817 	ldw	r4,-32(fp)
  80e018:	0809be80 	call	809be8 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80e01c:	00001306 	br	80e06c <altera_avalon_uart_read+0xb4>
    {
      count++;
  80e020:	e0bff017 	ldw	r2,-64(fp)
  80e024:	10800044 	addi	r2,r2,1
  80e028:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80e02c:	e0bffd17 	ldw	r2,-12(fp)
  80e030:	10c00044 	addi	r3,r2,1
  80e034:	e0fffd15 	stw	r3,-12(fp)
  80e038:	e0fffc17 	ldw	r3,-16(fp)
  80e03c:	18c00217 	ldw	r3,8(r3)
  80e040:	e13ffc17 	ldw	r4,-16(fp)
  80e044:	20c7883a 	add	r3,r4,r3
  80e048:	18c00a04 	addi	r3,r3,40
  80e04c:	18c00003 	ldbu	r3,0(r3)
  80e050:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80e054:	e0bffc17 	ldw	r2,-16(fp)
  80e058:	10800217 	ldw	r2,8(r2)
  80e05c:	10800044 	addi	r2,r2,1
  80e060:	10c00fcc 	andi	r3,r2,63
  80e064:	e0bffc17 	ldw	r2,-16(fp)
  80e068:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80e06c:	e0fff017 	ldw	r3,-64(fp)
  80e070:	e0bffe17 	ldw	r2,-8(fp)
  80e074:	1880050e 	bge	r3,r2,80e08c <altera_avalon_uart_read+0xd4>
  80e078:	e0bffc17 	ldw	r2,-16(fp)
  80e07c:	10c00217 	ldw	r3,8(r2)
  80e080:	e0bffc17 	ldw	r2,-16(fp)
  80e084:	10800317 	ldw	r2,12(r2)
  80e088:	18bfe51e 	bne	r3,r2,80e020 <__alt_mem_epcs_flash_controller_0+0xff805020>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80e08c:	e0bff017 	ldw	r2,-64(fp)
  80e090:	10003a1e 	bne	r2,zero,80e17c <altera_avalon_uart_read+0x1c4>
  80e094:	e0bffc17 	ldw	r2,-16(fp)
  80e098:	10c00217 	ldw	r3,8(r2)
  80e09c:	e0bffc17 	ldw	r2,-16(fp)
  80e0a0:	10800317 	ldw	r2,12(r2)
  80e0a4:	1880351e 	bne	r3,r2,80e17c <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  80e0a8:	e0bff117 	ldw	r2,-60(fp)
  80e0ac:	1000071e 	bne	r2,zero,80e0cc <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80e0b0:	080df7c0 	call	80df7c <alt_get_errno>
  80e0b4:	1007883a 	mov	r3,r2
  80e0b8:	008002c4 	movi	r2,11
  80e0bc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80e0c0:	00800044 	movi	r2,1
  80e0c4:	e0bfef05 	stb	r2,-68(fp)
        break;
  80e0c8:	00003006 	br	80e18c <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0cc:	0005303a 	rdctl	r2,status
  80e0d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0d4:	e0fff517 	ldw	r3,-44(fp)
  80e0d8:	00bfff84 	movi	r2,-2
  80e0dc:	1884703a 	and	r2,r3,r2
  80e0e0:	1001703a 	wrctl	status,r2
  
  return context;
  80e0e4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80e0e8:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e0ec:	e0bffc17 	ldw	r2,-16(fp)
  80e0f0:	10800117 	ldw	r2,4(r2)
  80e0f4:	10c02014 	ori	r3,r2,128
  80e0f8:	e0bffc17 	ldw	r2,-16(fp)
  80e0fc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e100:	e0bffc17 	ldw	r2,-16(fp)
  80e104:	10800017 	ldw	r2,0(r2)
  80e108:	10800304 	addi	r2,r2,12
  80e10c:	e0fffc17 	ldw	r3,-16(fp)
  80e110:	18c00117 	ldw	r3,4(r3)
  80e114:	10c00035 	stwio	r3,0(r2)
  80e118:	e0bff417 	ldw	r2,-48(fp)
  80e11c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e120:	e0bff617 	ldw	r2,-40(fp)
  80e124:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  80e128:	e0bffc17 	ldw	r2,-16(fp)
  80e12c:	10800717 	ldw	r2,28(r2)
  80e130:	e0bff215 	stw	r2,-56(fp)
  80e134:	00800044 	movi	r2,1
  80e138:	e0bff98d 	sth	r2,-26(fp)
  80e13c:	00bfe0c4 	movi	r2,-125
  80e140:	e0bffa05 	stb	r2,-24(fp)
  80e144:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80e148:	d0a09243 	ldbu	r2,-32183(gp)
  80e14c:	10803fcc 	andi	r2,r2,255
  80e150:	10000a26 	beq	r2,zero,80e17c <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80e154:	e0fff98b 	ldhu	r3,-26(fp)
  80e158:	e13ffa03 	ldbu	r4,-24(fp)
  80e15c:	e17ffa8b 	ldhu	r5,-22(fp)
  80e160:	e0bffb04 	addi	r2,fp,-20
  80e164:	d8800015 	stw	r2,0(sp)
  80e168:	280f883a 	mov	r7,r5
  80e16c:	200d883a 	mov	r6,r4
  80e170:	180b883a 	mov	r5,r3
  80e174:	e13ff217 	ldw	r4,-56(fp)
  80e178:	08071740 	call	807174 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80e17c:	e0bff017 	ldw	r2,-64(fp)
  80e180:	1000021e 	bne	r2,zero,80e18c <altera_avalon_uart_read+0x1d4>
  80e184:	e0bffe17 	ldw	r2,-8(fp)
  80e188:	103fb81e 	bne	r2,zero,80e06c <__alt_mem_epcs_flash_controller_0+0xff80506c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80e18c:	e0bffc17 	ldw	r2,-16(fp)
  80e190:	10800817 	ldw	r2,32(r2)
  80e194:	1009883a 	mov	r4,r2
  80e198:	0809f600 	call	809f60 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e19c:	0005303a 	rdctl	r2,status
  80e1a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e1a4:	e0fff717 	ldw	r3,-36(fp)
  80e1a8:	00bfff84 	movi	r2,-2
  80e1ac:	1884703a 	and	r2,r3,r2
  80e1b0:	1001703a 	wrctl	status,r2
  
  return context;
  80e1b4:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80e1b8:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e1bc:	e0bffc17 	ldw	r2,-16(fp)
  80e1c0:	10800117 	ldw	r2,4(r2)
  80e1c4:	10c02014 	ori	r3,r2,128
  80e1c8:	e0bffc17 	ldw	r2,-16(fp)
  80e1cc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e1d0:	e0bffc17 	ldw	r2,-16(fp)
  80e1d4:	10800017 	ldw	r2,0(r2)
  80e1d8:	10800304 	addi	r2,r2,12
  80e1dc:	e0fffc17 	ldw	r3,-16(fp)
  80e1e0:	18c00117 	ldw	r3,4(r3)
  80e1e4:	10c00035 	stwio	r3,0(r2)
  80e1e8:	e0bff417 	ldw	r2,-48(fp)
  80e1ec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e1f0:	e0bff317 	ldw	r2,-52(fp)
  80e1f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80e1f8:	e0bfef03 	ldbu	r2,-68(fp)
  80e1fc:	10000226 	beq	r2,zero,80e208 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  80e200:	00bffd44 	movi	r2,-11
  80e204:	00000106 	br	80e20c <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  80e208:	e0bff017 	ldw	r2,-64(fp)
  }
}
  80e20c:	e037883a 	mov	sp,fp
  80e210:	dfc00117 	ldw	ra,4(sp)
  80e214:	df000017 	ldw	fp,0(sp)
  80e218:	dec00204 	addi	sp,sp,8
  80e21c:	f800283a 	ret

0080e220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e220:	defffe04 	addi	sp,sp,-8
  80e224:	dfc00115 	stw	ra,4(sp)
  80e228:	df000015 	stw	fp,0(sp)
  80e22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e230:	d0a03f17 	ldw	r2,-32516(gp)
  80e234:	10000326 	beq	r2,zero,80e244 <alt_get_errno+0x24>
  80e238:	d0a03f17 	ldw	r2,-32516(gp)
  80e23c:	103ee83a 	callr	r2
  80e240:	00000106 	br	80e248 <alt_get_errno+0x28>
  80e244:	d0a08804 	addi	r2,gp,-32224
}
  80e248:	e037883a 	mov	sp,fp
  80e24c:	dfc00117 	ldw	ra,4(sp)
  80e250:	df000017 	ldw	fp,0(sp)
  80e254:	dec00204 	addi	sp,sp,8
  80e258:	f800283a 	ret

0080e25c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80e25c:	deffec04 	addi	sp,sp,-80
  80e260:	dfc01315 	stw	ra,76(sp)
  80e264:	df001215 	stw	fp,72(sp)
  80e268:	df001204 	addi	fp,sp,72
  80e26c:	e13ffc15 	stw	r4,-16(fp)
  80e270:	e17ffd15 	stw	r5,-12(fp)
  80e274:	e1bffe15 	stw	r6,-8(fp)
  80e278:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80e27c:	e0bffe17 	ldw	r2,-8(fp)
  80e280:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80e284:	e0bfff17 	ldw	r2,-4(fp)
  80e288:	1090000c 	andi	r2,r2,16384
  80e28c:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  80e290:	e0bffc17 	ldw	r2,-16(fp)
  80e294:	10800917 	ldw	r2,36(r2)
  80e298:	e0bff815 	stw	r2,-32(fp)
  80e29c:	e03ff90d 	sth	zero,-28(fp)
  80e2a0:	e0bff90b 	ldhu	r2,-28(fp)
  80e2a4:	e0fffb44 	addi	r3,fp,-19
  80e2a8:	180d883a 	mov	r6,r3
  80e2ac:	100b883a 	mov	r5,r2
  80e2b0:	e13ff817 	ldw	r4,-32(fp)
  80e2b4:	0809be80 	call	809be8 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e2b8:	00005106 	br	80e400 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e2bc:	e0bffc17 	ldw	r2,-16(fp)
  80e2c0:	10800517 	ldw	r2,20(r2)
  80e2c4:	10800044 	addi	r2,r2,1
  80e2c8:	10800fcc 	andi	r2,r2,63
  80e2cc:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80e2d0:	e0bffc17 	ldw	r2,-16(fp)
  80e2d4:	10c00417 	ldw	r3,16(r2)
  80e2d8:	e0bff217 	ldw	r2,-56(fp)
  80e2dc:	1880371e 	bne	r3,r2,80e3bc <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  80e2e0:	e0bff017 	ldw	r2,-64(fp)
  80e2e4:	10000526 	beq	r2,zero,80e2fc <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80e2e8:	080e2200 	call	80e220 <alt_get_errno>
  80e2ec:	1007883a 	mov	r3,r2
  80e2f0:	008002c4 	movi	r2,11
  80e2f4:	18800015 	stw	r2,0(r3)
        break;
  80e2f8:	00004306 	br	80e408 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e2fc:	0005303a 	rdctl	r2,status
  80e300:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e304:	e0fff517 	ldw	r3,-44(fp)
  80e308:	00bfff84 	movi	r2,-2
  80e30c:	1884703a 	and	r2,r3,r2
  80e310:	1001703a 	wrctl	status,r2
  
  return context;
  80e314:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80e318:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e31c:	e0bffc17 	ldw	r2,-16(fp)
  80e320:	10800117 	ldw	r2,4(r2)
  80e324:	10c11014 	ori	r3,r2,1088
  80e328:	e0bffc17 	ldw	r2,-16(fp)
  80e32c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e330:	e0bffc17 	ldw	r2,-16(fp)
  80e334:	10800017 	ldw	r2,0(r2)
  80e338:	10800304 	addi	r2,r2,12
  80e33c:	e0fffc17 	ldw	r3,-16(fp)
  80e340:	18c00117 	ldw	r3,4(r3)
  80e344:	10c00035 	stwio	r3,0(r2)
  80e348:	e0bff417 	ldw	r2,-48(fp)
  80e34c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e350:	e0bff117 	ldw	r2,-60(fp)
  80e354:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  80e358:	e0bffc17 	ldw	r2,-16(fp)
  80e35c:	10800717 	ldw	r2,28(r2)
  80e360:	e0bff315 	stw	r2,-52(fp)
  80e364:	00800084 	movi	r2,2
  80e368:	e0bff98d 	sth	r2,-26(fp)
  80e36c:	00bfe0c4 	movi	r2,-125
  80e370:	e0bffa05 	stb	r2,-24(fp)
  80e374:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80e378:	d0a09243 	ldbu	r2,-32183(gp)
  80e37c:	10803fcc 	andi	r2,r2,255
  80e380:	10000a26 	beq	r2,zero,80e3ac <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80e384:	e0fff98b 	ldhu	r3,-26(fp)
  80e388:	e13ffa03 	ldbu	r4,-24(fp)
  80e38c:	e17ffa8b 	ldhu	r5,-22(fp)
  80e390:	e0bffb04 	addi	r2,fp,-20
  80e394:	d8800015 	stw	r2,0(sp)
  80e398:	280f883a 	mov	r7,r5
  80e39c:	200d883a 	mov	r6,r4
  80e3a0:	180b883a 	mov	r5,r3
  80e3a4:	e13ff317 	ldw	r4,-52(fp)
  80e3a8:	08071740 	call	807174 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80e3ac:	e0bffc17 	ldw	r2,-16(fp)
  80e3b0:	10c00417 	ldw	r3,16(r2)
  80e3b4:	e0bff217 	ldw	r2,-56(fp)
  80e3b8:	18bfe726 	beq	r3,r2,80e358 <__alt_mem_epcs_flash_controller_0+0xff805358>
      }
    }

    count--;
  80e3bc:	e0bfef17 	ldw	r2,-68(fp)
  80e3c0:	10bfffc4 	addi	r2,r2,-1
  80e3c4:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80e3c8:	e0bffc17 	ldw	r2,-16(fp)
  80e3cc:	10c00517 	ldw	r3,20(r2)
  80e3d0:	e0bffd17 	ldw	r2,-12(fp)
  80e3d4:	11000044 	addi	r4,r2,1
  80e3d8:	e13ffd15 	stw	r4,-12(fp)
  80e3dc:	10800003 	ldbu	r2,0(r2)
  80e3e0:	1009883a 	mov	r4,r2
  80e3e4:	e0bffc17 	ldw	r2,-16(fp)
  80e3e8:	10c5883a 	add	r2,r2,r3
  80e3ec:	10801a04 	addi	r2,r2,104
  80e3f0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80e3f4:	e0bffc17 	ldw	r2,-16(fp)
  80e3f8:	e0fff217 	ldw	r3,-56(fp)
  80e3fc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e400:	e0bfef17 	ldw	r2,-68(fp)
  80e404:	103fad1e 	bne	r2,zero,80e2bc <__alt_mem_epcs_flash_controller_0+0xff8052bc>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  80e408:	e0bffc17 	ldw	r2,-16(fp)
  80e40c:	10800917 	ldw	r2,36(r2)
  80e410:	1009883a 	mov	r4,r2
  80e414:	0809f600 	call	809f60 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e418:	0005303a 	rdctl	r2,status
  80e41c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e420:	e0fff717 	ldw	r3,-36(fp)
  80e424:	00bfff84 	movi	r2,-2
  80e428:	1884703a 	and	r2,r3,r2
  80e42c:	1001703a 	wrctl	status,r2
  
  return context;
  80e430:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80e434:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e438:	e0bffc17 	ldw	r2,-16(fp)
  80e43c:	10800117 	ldw	r2,4(r2)
  80e440:	10c11014 	ori	r3,r2,1088
  80e444:	e0bffc17 	ldw	r2,-16(fp)
  80e448:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e44c:	e0bffc17 	ldw	r2,-16(fp)
  80e450:	10800017 	ldw	r2,0(r2)
  80e454:	10800304 	addi	r2,r2,12
  80e458:	e0fffc17 	ldw	r3,-16(fp)
  80e45c:	18c00117 	ldw	r3,4(r3)
  80e460:	10c00035 	stwio	r3,0(r2)
  80e464:	e0bff417 	ldw	r2,-48(fp)
  80e468:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e46c:	e0bff617 	ldw	r2,-40(fp)
  80e470:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80e474:	e0fffe17 	ldw	r3,-8(fp)
  80e478:	e0bfef17 	ldw	r2,-68(fp)
  80e47c:	1885c83a 	sub	r2,r3,r2
}
  80e480:	e037883a 	mov	sp,fp
  80e484:	dfc00117 	ldw	ra,4(sp)
  80e488:	df000017 	ldw	fp,0(sp)
  80e48c:	dec00204 	addi	sp,sp,8
  80e490:	f800283a 	ret

0080e494 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
  80e494:	defff404 	addi	sp,sp,-48
  80e498:	df000b15 	stw	fp,44(sp)
  80e49c:	df000b04 	addi	fp,sp,44
  80e4a0:	e13ffc15 	stw	r4,-16(fp)
  80e4a4:	e17ffd15 	stw	r5,-12(fp)
  80e4a8:	e1bffe15 	stw	r6,-8(fp)
  80e4ac:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
  80e4b0:	e0bffc17 	ldw	r2,-16(fp)
  80e4b4:	10800017 	ldw	r2,0(r2)
  80e4b8:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  80e4bc:	e0bff517 	ldw	r2,-44(fp)
  80e4c0:	10800217 	ldw	r2,8(r2)
  80e4c4:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  80e4c8:	e0bff617 	ldw	r2,-40(fp)
  80e4cc:	10bfffc4 	addi	r2,r2,-1
  80e4d0:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
  80e4d4:	e0bffb17 	ldw	r2,-20(fp)
  80e4d8:	10800044 	addi	r2,r2,1
  80e4dc:	e0bffb15 	stw	r2,-20(fp)
  80e4e0:	e0bffb17 	ldw	r2,-20(fp)
  80e4e4:	10800003 	ldbu	r2,0(r2)
  80e4e8:	10803fcc 	andi	r2,r2,255
  80e4ec:	1080201c 	xori	r2,r2,128
  80e4f0:	10bfe004 	addi	r2,r2,-128
  80e4f4:	103ff71e 	bne	r2,zero,80e4d4 <__alt_mem_epcs_flash_controller_0+0xff8054d4>
    ;

  return ptr - string;
  80e4f8:	e0fffb17 	ldw	r3,-20(fp)
  80e4fc:	e0bff617 	ldw	r2,-40(fp)
  80e500:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  80e504:	10800044 	addi	r2,r2,1
  80e508:	1007883a 	mov	r3,r2
  80e50c:	e0bffd17 	ldw	r2,-12(fp)
  80e510:	10c5883a 	add	r2,r2,r3
  80e514:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
  80e518:	d0a06104 	addi	r2,gp,-32380
  80e51c:	1007883a 	mov	r3,r2
  r4 = (int)name;
  80e520:	e0bffd17 	ldw	r2,-12(fp)
  80e524:	1009883a 	mov	r4,r2
  r5 = flags;
  80e528:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
  80e52c:	e1bfff17 	ldw	r6,-4(fp)
  80e530:	e0bffd17 	ldw	r2,-12(fp)
  80e534:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  80e538:	e0bff917 	ldw	r2,-28(fp)
  80e53c:	10bfffc4 	addi	r2,r2,-1
  80e540:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
  80e544:	e0bffa17 	ldw	r2,-24(fp)
  80e548:	10800044 	addi	r2,r2,1
  80e54c:	e0bffa15 	stw	r2,-24(fp)
  80e550:	e0bffa17 	ldw	r2,-24(fp)
  80e554:	10800003 	ldbu	r2,0(r2)
  80e558:	10803fcc 	andi	r2,r2,255
  80e55c:	1080201c 	xori	r2,r2,128
  80e560:	10bfe004 	addi	r2,r2,-128
  80e564:	103ff71e 	bne	r2,zero,80e544 <__alt_mem_epcs_flash_controller_0+0xff805544>
    ;

  return ptr - string;
  80e568:	e1fffa17 	ldw	r7,-24(fp)
  80e56c:	e0bff917 	ldw	r2,-28(fp)
  80e570:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
  80e574:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
  80e578:	003da07a 	break	1

  handle = (void *)r2;
  80e57c:	e0bff715 	stw	r2,-36(fp)
  error = r3;
  80e580:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
  80e584:	e0bff817 	ldw	r2,-32(fp)
  80e588:	1000031e 	bne	r2,zero,80e598 <alt_hostfs_open+0x104>
    fd->priv = handle;
  80e58c:	e0bffc17 	ldw	r2,-16(fp)
  80e590:	e0fff717 	ldw	r3,-36(fp)
  80e594:	10c00115 	stw	r3,4(r2)

  return -error;
  80e598:	e0bff817 	ldw	r2,-32(fp)
  80e59c:	0085c83a 	sub	r2,zero,r2
}
  80e5a0:	e037883a 	mov	sp,fp
  80e5a4:	df000017 	ldw	fp,0(sp)
  80e5a8:	dec00104 	addi	sp,sp,4
  80e5ac:	f800283a 	ret

0080e5b0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
  80e5b0:	defffd04 	addi	sp,sp,-12
  80e5b4:	df000215 	stw	fp,8(sp)
  80e5b8:	df000204 	addi	fp,sp,8
  80e5bc:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
  80e5c0:	d0a06404 	addi	r2,gp,-32368
  80e5c4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  80e5c8:	e0bfff17 	ldw	r2,-4(fp)
  80e5cc:	10800117 	ldw	r2,4(r2)
  80e5d0:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
  80e5d4:	003da07a 	break	1

  error = r3;
  80e5d8:	e0fffe15 	stw	r3,-8(fp)

  return -error;
  80e5dc:	e0bffe17 	ldw	r2,-8(fp)
  80e5e0:	0085c83a 	sub	r2,zero,r2
}
  80e5e4:	e037883a 	mov	sp,fp
  80e5e8:	df000017 	ldw	fp,0(sp)
  80e5ec:	dec00104 	addi	sp,sp,4
  80e5f0:	f800283a 	ret

0080e5f4 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
  80e5f4:	defffa04 	addi	sp,sp,-24
  80e5f8:	df000515 	stw	fp,20(sp)
  80e5fc:	df000504 	addi	fp,sp,20
  80e600:	e13ffd15 	stw	r4,-12(fp)
  80e604:	e17ffe15 	stw	r5,-8(fp)
  80e608:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
  80e60c:	d0a06704 	addi	r2,gp,-32356
  80e610:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  80e614:	e0bffd17 	ldw	r2,-12(fp)
  80e618:	10800117 	ldw	r2,4(r2)
  80e61c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
  80e620:	e0bffe17 	ldw	r2,-8(fp)
  80e624:	100b883a 	mov	r5,r2
  r6 = len;
  80e628:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
  80e62c:	003da07a 	break	1

  rc = r2;
  80e630:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
  80e634:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
  80e638:	e0bffc17 	ldw	r2,-16(fp)
  80e63c:	10000326 	beq	r2,zero,80e64c <alt_hostfs_read+0x58>
  80e640:	e0bffc17 	ldw	r2,-16(fp)
  80e644:	0085c83a 	sub	r2,zero,r2
  80e648:	00000106 	br	80e650 <alt_hostfs_read+0x5c>
  80e64c:	e0bffb17 	ldw	r2,-20(fp)
}
  80e650:	e037883a 	mov	sp,fp
  80e654:	df000017 	ldw	fp,0(sp)
  80e658:	dec00104 	addi	sp,sp,4
  80e65c:	f800283a 	ret

0080e660 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
  80e660:	defffa04 	addi	sp,sp,-24
  80e664:	df000515 	stw	fp,20(sp)
  80e668:	df000504 	addi	fp,sp,20
  80e66c:	e13ffd15 	stw	r4,-12(fp)
  80e670:	e17ffe15 	stw	r5,-8(fp)
  80e674:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
  80e678:	d0a06a04 	addi	r2,gp,-32344
  80e67c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  80e680:	e0bffd17 	ldw	r2,-12(fp)
  80e684:	10800117 	ldw	r2,4(r2)
  80e688:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
  80e68c:	e0bffe17 	ldw	r2,-8(fp)
  80e690:	100b883a 	mov	r5,r2
  r6 = len;
  80e694:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
  80e698:	003da07a 	break	1

  rc = r2;
  80e69c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
  80e6a0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
  80e6a4:	e0bffc17 	ldw	r2,-16(fp)
  80e6a8:	10000326 	beq	r2,zero,80e6b8 <alt_hostfs_write+0x58>
  80e6ac:	e0bffc17 	ldw	r2,-16(fp)
  80e6b0:	0085c83a 	sub	r2,zero,r2
  80e6b4:	00000106 	br	80e6bc <alt_hostfs_write+0x5c>
  80e6b8:	e0bffb17 	ldw	r2,-20(fp)
}
  80e6bc:	e037883a 	mov	sp,fp
  80e6c0:	df000017 	ldw	fp,0(sp)
  80e6c4:	dec00104 	addi	sp,sp,4
  80e6c8:	f800283a 	ret

0080e6cc <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
  80e6cc:	defffa04 	addi	sp,sp,-24
  80e6d0:	df000515 	stw	fp,20(sp)
  80e6d4:	df000504 	addi	fp,sp,20
  80e6d8:	e13ffd15 	stw	r4,-12(fp)
  80e6dc:	e17ffe15 	stw	r5,-8(fp)
  80e6e0:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
  80e6e4:	d0a06d04 	addi	r2,gp,-32332
  80e6e8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  80e6ec:	e0bffd17 	ldw	r2,-12(fp)
  80e6f0:	10800117 	ldw	r2,4(r2)
  80e6f4:	1009883a 	mov	r4,r2
  r5 = ptr;
  80e6f8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
  80e6fc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
  80e700:	003da07a 	break	1

  rc = r2;
  80e704:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
  80e708:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
  80e70c:	e0bffc17 	ldw	r2,-16(fp)
  80e710:	10000326 	beq	r2,zero,80e720 <alt_hostfs_seek+0x54>
  80e714:	e0bffc17 	ldw	r2,-16(fp)
  80e718:	0085c83a 	sub	r2,zero,r2
  80e71c:	00000106 	br	80e724 <alt_hostfs_seek+0x58>
  80e720:	e0bffb17 	ldw	r2,-20(fp)
}
  80e724:	e037883a 	mov	sp,fp
  80e728:	df000017 	ldw	fp,0(sp)
  80e72c:	dec00104 	addi	sp,sp,4
  80e730:	f800283a 	ret

0080e734 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
  80e734:	deffe904 	addi	sp,sp,-92
  80e738:	df001615 	stw	fp,88(sp)
  80e73c:	df001604 	addi	fp,sp,88
  80e740:	e13ffe15 	stw	r4,-8(fp)
  80e744:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
  80e748:	d0a07004 	addi	r2,gp,-32320
  80e74c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  80e750:	e0bffe17 	ldw	r2,-8(fp)
  80e754:	10800117 	ldw	r2,4(r2)
  80e758:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
  80e75c:	e0bfee04 	addi	r2,fp,-72
  80e760:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
  80e764:	003da07a 	break	1

  rc = r2;
  80e768:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
  80e76c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
  80e770:	e0bfec17 	ldw	r2,-80(fp)
  80e774:	1000621e 	bne	r2,zero,80e900 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
  80e778:	e0bfee04 	addi	r2,fp,-72
  80e77c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
  80e780:	e0bfea17 	ldw	r2,-88(fp)
  80e784:	10801004 	addi	r2,r2,64
  80e788:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
  80e78c:	00001606 	br	80e7e8 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  80e790:	e0bfea17 	ldw	r2,-88(fp)
  80e794:	10800017 	ldw	r2,0(r2)
  80e798:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
  80e79c:	e0bfea17 	ldw	r2,-88(fp)
  80e7a0:	10800017 	ldw	r2,0(r2)
  80e7a4:	10803fec 	andhi	r2,r2,255
  80e7a8:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  80e7ac:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
  80e7b0:	e0bfea17 	ldw	r2,-88(fp)
  80e7b4:	10800017 	ldw	r2,0(r2)
  80e7b8:	10bfc00c 	andi	r2,r2,65280
  80e7bc:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
  80e7c0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
  80e7c4:	e0bfea17 	ldw	r2,-88(fp)
  80e7c8:	10800017 	ldw	r2,0(r2)
  80e7cc:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
  80e7d0:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  80e7d4:	e0bfea17 	ldw	r2,-88(fp)
  80e7d8:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
  80e7dc:	e0bfea17 	ldw	r2,-88(fp)
  80e7e0:	10800104 	addi	r2,r2,4
  80e7e4:	e0bfea15 	stw	r2,-88(fp)
  80e7e8:	e0ffea17 	ldw	r3,-88(fp)
  80e7ec:	e0bfed17 	ldw	r2,-76(fp)
  80e7f0:	18bfe736 	bltu	r3,r2,80e790 <__alt_mem_epcs_flash_controller_0+0xff805790>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
  80e7f4:	e0bfff17 	ldw	r2,-4(fp)
  80e7f8:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
  80e7fc:	e0bfea17 	ldw	r2,-88(fp)
  80e800:	10800f04 	addi	r2,r2,60
  80e804:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
  80e808:	00000506 	br	80e820 <alt_hostfs_fstat+0xec>
      *ptr = 0;
  80e80c:	e0bfea17 	ldw	r2,-88(fp)
  80e810:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
  80e814:	e0bfea17 	ldw	r2,-88(fp)
  80e818:	10800104 	addi	r2,r2,4
  80e81c:	e0bfea15 	stw	r2,-88(fp)
  80e820:	e0ffea17 	ldw	r3,-88(fp)
  80e824:	e0bfed17 	ldw	r2,-76(fp)
  80e828:	18bff836 	bltu	r3,r2,80e80c <__alt_mem_epcs_flash_controller_0+0xff80580c>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
  80e82c:	e0bfee17 	ldw	r2,-72(fp)
  80e830:	1007883a 	mov	r3,r2
  80e834:	e0bfff17 	ldw	r2,-4(fp)
  80e838:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
  80e83c:	e0bfef17 	ldw	r2,-68(fp)
  80e840:	1007883a 	mov	r3,r2
  80e844:	e0bfff17 	ldw	r2,-4(fp)
  80e848:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
  80e84c:	e0fff017 	ldw	r3,-64(fp)
  80e850:	e0bfff17 	ldw	r2,-4(fp)
  80e854:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
  80e858:	e0bff117 	ldw	r2,-60(fp)
  80e85c:	1007883a 	mov	r3,r2
  80e860:	e0bfff17 	ldw	r2,-4(fp)
  80e864:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
  80e868:	e0bff217 	ldw	r2,-56(fp)
  80e86c:	1007883a 	mov	r3,r2
  80e870:	e0bfff17 	ldw	r2,-4(fp)
  80e874:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
  80e878:	e0bff317 	ldw	r2,-52(fp)
  80e87c:	1007883a 	mov	r3,r2
  80e880:	e0bfff17 	ldw	r2,-4(fp)
  80e884:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
  80e888:	e0bff417 	ldw	r2,-48(fp)
  80e88c:	1007883a 	mov	r3,r2
  80e890:	e0bfff17 	ldw	r2,-4(fp)
  80e894:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
  80e898:	e0bff617 	ldw	r2,-40(fp)
  80e89c:	1007883a 	mov	r3,r2
  80e8a0:	e0bfff17 	ldw	r2,-4(fp)
  80e8a4:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
  80e8a8:	e0bffb17 	ldw	r2,-20(fp)
  80e8ac:	1007883a 	mov	r3,r2
  80e8b0:	e0bfff17 	ldw	r2,-4(fp)
  80e8b4:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
  80e8b8:	e0bffc17 	ldw	r2,-16(fp)
  80e8bc:	1007883a 	mov	r3,r2
  80e8c0:	e0bfff17 	ldw	r2,-4(fp)
  80e8c4:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
  80e8c8:	e0bffd17 	ldw	r2,-12(fp)
  80e8cc:	1007883a 	mov	r3,r2
  80e8d0:	e0bfff17 	ldw	r2,-4(fp)
  80e8d4:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
  80e8d8:	e0bff817 	ldw	r2,-32(fp)
  80e8dc:	1007883a 	mov	r3,r2
  80e8e0:	e0bfff17 	ldw	r2,-4(fp)
  80e8e4:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
  80e8e8:	e0bffa17 	ldw	r2,-24(fp)
  80e8ec:	1007883a 	mov	r3,r2
  80e8f0:	e0bfff17 	ldw	r2,-4(fp)
  80e8f4:	10c00c15 	stw	r3,48(r2)

    return rc;
  80e8f8:	e0bfeb17 	ldw	r2,-84(fp)
  80e8fc:	00000206 	br	80e908 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
  80e900:	e0bfec17 	ldw	r2,-80(fp)
  80e904:	0085c83a 	sub	r2,zero,r2
}
  80e908:	e037883a 	mov	sp,fp
  80e90c:	df000017 	ldw	fp,0(sp)
  80e910:	dec00104 	addi	sp,sp,4
  80e914:	f800283a 	ret

0080e918 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  80e918:	defff904 	addi	sp,sp,-28
  80e91c:	dfc00615 	stw	ra,24(sp)
  80e920:	df000515 	stw	fp,20(sp)
  80e924:	df000504 	addi	fp,sp,20
  80e928:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  80e92c:	00800144 	movi	r2,5
  80e930:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  80e934:	d8000215 	stw	zero,8(sp)
  80e938:	e0bffe44 	addi	r2,fp,-7
  80e93c:	d8800115 	stw	r2,4(sp)
  80e940:	00800044 	movi	r2,1
  80e944:	d8800015 	stw	r2,0(sp)
  80e948:	e1fffe04 	addi	r7,fp,-8
  80e94c:	01800044 	movi	r6,1
  80e950:	000b883a 	mov	r5,zero
  80e954:	e13fff17 	ldw	r4,-4(fp)
  80e958:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  80e95c:	e0bffe43 	ldbu	r2,-7(fp)
}
  80e960:	e037883a 	mov	sp,fp
  80e964:	dfc00117 	ldw	ra,4(sp)
  80e968:	df000017 	ldw	fp,0(sp)
  80e96c:	dec00204 	addi	sp,sp,8
  80e970:	f800283a 	ret

0080e974 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  80e974:	defffd04 	addi	sp,sp,-12
  80e978:	dfc00215 	stw	ra,8(sp)
  80e97c:	df000115 	stw	fp,4(sp)
  80e980:	df000104 	addi	fp,sp,4
  80e984:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  80e988:	e13fff17 	ldw	r4,-4(fp)
  80e98c:	080e9180 	call	80e918 <epcs_read_status_register>
  80e990:	10803fcc 	andi	r2,r2,255
  80e994:	1080004c 	andi	r2,r2,1
}
  80e998:	e037883a 	mov	sp,fp
  80e99c:	dfc00117 	ldw	ra,4(sp)
  80e9a0:	df000017 	ldw	fp,0(sp)
  80e9a4:	dec00204 	addi	sp,sp,8
  80e9a8:	f800283a 	ret

0080e9ac <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  80e9ac:	defffd04 	addi	sp,sp,-12
  80e9b0:	dfc00215 	stw	ra,8(sp)
  80e9b4:	df000115 	stw	fp,4(sp)
  80e9b8:	df000104 	addi	fp,sp,4
  80e9bc:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  80e9c0:	0001883a 	nop
  80e9c4:	e13fff17 	ldw	r4,-4(fp)
  80e9c8:	080e9740 	call	80e974 <epcs_test_wip>
  80e9cc:	103ffd1e 	bne	r2,zero,80e9c4 <__alt_mem_epcs_flash_controller_0+0xff8059c4>
  {
  }
}
  80e9d0:	0001883a 	nop
  80e9d4:	e037883a 	mov	sp,fp
  80e9d8:	dfc00117 	ldw	ra,4(sp)
  80e9dc:	df000017 	ldw	fp,0(sp)
  80e9e0:	dec00204 	addi	sp,sp,8
  80e9e4:	f800283a 	ret

0080e9e8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  80e9e8:	defff604 	addi	sp,sp,-40
  80e9ec:	dfc00915 	stw	ra,36(sp)
  80e9f0:	df000815 	stw	fp,32(sp)
  80e9f4:	df000804 	addi	fp,sp,32
  80e9f8:	e13ffd15 	stw	r4,-12(fp)
  80e9fc:	e17ffe15 	stw	r5,-8(fp)
  80ea00:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  80ea04:	e0bfff17 	ldw	r2,-4(fp)
  80ea08:	10001226 	beq	r2,zero,80ea54 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  80ea0c:	00bff604 	movi	r2,-40
  80ea10:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  80ea14:	e0bffe17 	ldw	r2,-8(fp)
  80ea18:	1004d63a 	srli	r2,r2,24
  80ea1c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  80ea20:	e0bffe17 	ldw	r2,-8(fp)
  80ea24:	1004d43a 	srli	r2,r2,16
  80ea28:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  80ea2c:	e0bffe17 	ldw	r2,-8(fp)
  80ea30:	1004d23a 	srli	r2,r2,8
  80ea34:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  80ea38:	e0bffe17 	ldw	r2,-8(fp)
  80ea3c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  80ea40:	00800144 	movi	r2,5
  80ea44:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  80ea48:	e13ffd17 	ldw	r4,-12(fp)
  80ea4c:	080ee9c0 	call	80ee9c <epcs_enter_4_bytes_mode>
  80ea50:	00000c06 	br	80ea84 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  80ea54:	00bff604 	movi	r2,-40
  80ea58:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  80ea5c:	e0bffe17 	ldw	r2,-8(fp)
  80ea60:	1004d43a 	srli	r2,r2,16
  80ea64:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  80ea68:	e0bffe17 	ldw	r2,-8(fp)
  80ea6c:	1004d23a 	srli	r2,r2,8
  80ea70:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  80ea74:	e0bffe17 	ldw	r2,-8(fp)
  80ea78:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  80ea7c:	00800104 	movi	r2,4
  80ea80:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  80ea84:	e13ffd17 	ldw	r4,-12(fp)
  80ea88:	080ebd80 	call	80ebd8 <epcs_write_enable>

  alt_avalon_spi_command(
  80ea8c:	e0bffb03 	ldbu	r2,-20(fp)
  80ea90:	e0fffb44 	addi	r3,fp,-19
  80ea94:	d8000215 	stw	zero,8(sp)
  80ea98:	d8000115 	stw	zero,4(sp)
  80ea9c:	d8000015 	stw	zero,0(sp)
  80eaa0:	180f883a 	mov	r7,r3
  80eaa4:	100d883a 	mov	r6,r2
  80eaa8:	000b883a 	mov	r5,zero
  80eaac:	e13ffd17 	ldw	r4,-12(fp)
  80eab0:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80eab4:	e13ffd17 	ldw	r4,-12(fp)
  80eab8:	080e9ac0 	call	80e9ac <epcs_await_wip_released>

  if(four_bytes_mode)
  80eabc:	e0bfff17 	ldw	r2,-4(fp)
  80eac0:	10000226 	beq	r2,zero,80eacc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  80eac4:	e13ffd17 	ldw	r4,-12(fp)
  80eac8:	080eef80 	call	80eef8 <epcs_exit_4_bytes_mode>
  }
}
  80eacc:	0001883a 	nop
  80ead0:	e037883a 	mov	sp,fp
  80ead4:	dfc00117 	ldw	ra,4(sp)
  80ead8:	df000017 	ldw	fp,0(sp)
  80eadc:	dec00204 	addi	sp,sp,8
  80eae0:	f800283a 	ret

0080eae4 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  80eae4:	defff404 	addi	sp,sp,-48
  80eae8:	dfc00b15 	stw	ra,44(sp)
  80eaec:	df000a15 	stw	fp,40(sp)
  80eaf0:	df000a04 	addi	fp,sp,40
  80eaf4:	e13ffc15 	stw	r4,-16(fp)
  80eaf8:	e17ffd15 	stw	r5,-12(fp)
  80eafc:	e1bffe15 	stw	r6,-8(fp)
  80eb00:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  80eb04:	008000c4 	movi	r2,3
  80eb08:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80eb0c:	e0800217 	ldw	r2,8(fp)
  80eb10:	10001026 	beq	r2,zero,80eb54 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  80eb14:	e0bffd17 	ldw	r2,-12(fp)
  80eb18:	1004d63a 	srli	r2,r2,24
  80eb1c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  80eb20:	e0bffd17 	ldw	r2,-12(fp)
  80eb24:	1005d43a 	srai	r2,r2,16
  80eb28:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  80eb2c:	e0bffd17 	ldw	r2,-12(fp)
  80eb30:	1005d23a 	srai	r2,r2,8
  80eb34:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  80eb38:	e0bffd17 	ldw	r2,-12(fp)
  80eb3c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  80eb40:	00800144 	movi	r2,5
  80eb44:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  80eb48:	e13ffc17 	ldw	r4,-16(fp)
  80eb4c:	080ee9c0 	call	80ee9c <epcs_enter_4_bytes_mode>
  80eb50:	00000a06 	br	80eb7c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  80eb54:	e0bffd17 	ldw	r2,-12(fp)
  80eb58:	1005d43a 	srai	r2,r2,16
  80eb5c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  80eb60:	e0bffd17 	ldw	r2,-12(fp)
  80eb64:	1005d23a 	srai	r2,r2,8
  80eb68:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  80eb6c:	e0bffd17 	ldw	r2,-12(fp)
  80eb70:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  80eb74:	00800104 	movi	r2,4
  80eb78:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  80eb7c:	e13ffc17 	ldw	r4,-16(fp)
  80eb80:	080e9ac0 	call	80e9ac <epcs_await_wip_released>

  alt_avalon_spi_command(
  80eb84:	e0bfff17 	ldw	r2,-4(fp)
  80eb88:	e13ffa04 	addi	r4,fp,-24
  80eb8c:	d8000215 	stw	zero,8(sp)
  80eb90:	e0fffe17 	ldw	r3,-8(fp)
  80eb94:	d8c00115 	stw	r3,4(sp)
  80eb98:	d8800015 	stw	r2,0(sp)
  80eb9c:	200f883a 	mov	r7,r4
  80eba0:	e1bff917 	ldw	r6,-28(fp)
  80eba4:	000b883a 	mov	r5,zero
  80eba8:	e13ffc17 	ldw	r4,-16(fp)
  80ebac:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  80ebb0:	e0800217 	ldw	r2,8(fp)
  80ebb4:	10000226 	beq	r2,zero,80ebc0 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  80ebb8:	e13ffc17 	ldw	r4,-16(fp)
  80ebbc:	080eef80 	call	80eef8 <epcs_exit_4_bytes_mode>
  }

  return length;
  80ebc0:	e0bfff17 	ldw	r2,-4(fp)
}
  80ebc4:	e037883a 	mov	sp,fp
  80ebc8:	dfc00117 	ldw	ra,4(sp)
  80ebcc:	df000017 	ldw	fp,0(sp)
  80ebd0:	dec00204 	addi	sp,sp,8
  80ebd4:	f800283a 	ret

0080ebd8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  80ebd8:	defff904 	addi	sp,sp,-28
  80ebdc:	dfc00615 	stw	ra,24(sp)
  80ebe0:	df000515 	stw	fp,20(sp)
  80ebe4:	df000504 	addi	fp,sp,20
  80ebe8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  80ebec:	00800184 	movi	r2,6
  80ebf0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  80ebf4:	d8000215 	stw	zero,8(sp)
  80ebf8:	d8000115 	stw	zero,4(sp)
  80ebfc:	d8000015 	stw	zero,0(sp)
  80ec00:	e1fffe04 	addi	r7,fp,-8
  80ec04:	01800044 	movi	r6,1
  80ec08:	000b883a 	mov	r5,zero
  80ec0c:	e13fff17 	ldw	r4,-4(fp)
  80ec10:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  80ec14:	0001883a 	nop
  80ec18:	e037883a 	mov	sp,fp
  80ec1c:	dfc00117 	ldw	ra,4(sp)
  80ec20:	df000017 	ldw	fp,0(sp)
  80ec24:	dec00204 	addi	sp,sp,8
  80ec28:	f800283a 	ret

0080ec2c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  80ec2c:	defff804 	addi	sp,sp,-32
  80ec30:	dfc00715 	stw	ra,28(sp)
  80ec34:	df000615 	stw	fp,24(sp)
  80ec38:	df000604 	addi	fp,sp,24
  80ec3c:	e13ffe15 	stw	r4,-8(fp)
  80ec40:	2805883a 	mov	r2,r5
  80ec44:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  80ec48:	00800044 	movi	r2,1
  80ec4c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  80ec50:	e0bfff03 	ldbu	r2,-4(fp)
  80ec54:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  80ec58:	d8000215 	stw	zero,8(sp)
  80ec5c:	d8000115 	stw	zero,4(sp)
  80ec60:	d8000015 	stw	zero,0(sp)
  80ec64:	e1fffd04 	addi	r7,fp,-12
  80ec68:	01800084 	movi	r6,2
  80ec6c:	000b883a 	mov	r5,zero
  80ec70:	e13ffe17 	ldw	r4,-8(fp)
  80ec74:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80ec78:	e13ffe17 	ldw	r4,-8(fp)
  80ec7c:	080e9ac0 	call	80e9ac <epcs_await_wip_released>
}
  80ec80:	0001883a 	nop
  80ec84:	e037883a 	mov	sp,fp
  80ec88:	dfc00117 	ldw	ra,4(sp)
  80ec8c:	df000017 	ldw	fp,0(sp)
  80ec90:	dec00204 	addi	sp,sp,8
  80ec94:	f800283a 	ret

0080ec98 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  80ec98:	defff404 	addi	sp,sp,-48
  80ec9c:	dfc00b15 	stw	ra,44(sp)
  80eca0:	df000a15 	stw	fp,40(sp)
  80eca4:	df000a04 	addi	fp,sp,40
  80eca8:	e13ffc15 	stw	r4,-16(fp)
  80ecac:	e17ffd15 	stw	r5,-12(fp)
  80ecb0:	e1bffe15 	stw	r6,-8(fp)
  80ecb4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  80ecb8:	00800084 	movi	r2,2
  80ecbc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80ecc0:	e0800217 	ldw	r2,8(fp)
  80ecc4:	10001026 	beq	r2,zero,80ed08 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  80ecc8:	e0bffd17 	ldw	r2,-12(fp)
  80eccc:	1004d63a 	srli	r2,r2,24
  80ecd0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	1005d43a 	srai	r2,r2,16
  80ecdc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  80ece0:	e0bffd17 	ldw	r2,-12(fp)
  80ece4:	1005d23a 	srai	r2,r2,8
  80ece8:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  80ecec:	e0bffd17 	ldw	r2,-12(fp)
  80ecf0:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  80ecf4:	00800144 	movi	r2,5
  80ecf8:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  80ecfc:	e13ffc17 	ldw	r4,-16(fp)
  80ed00:	080ee9c0 	call	80ee9c <epcs_enter_4_bytes_mode>
  80ed04:	00000a06 	br	80ed30 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  80ed08:	e0bffd17 	ldw	r2,-12(fp)
  80ed0c:	1005d43a 	srai	r2,r2,16
  80ed10:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  80ed14:	e0bffd17 	ldw	r2,-12(fp)
  80ed18:	1005d23a 	srai	r2,r2,8
  80ed1c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  80ed20:	e0bffd17 	ldw	r2,-12(fp)
  80ed24:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  80ed28:	00800104 	movi	r2,4
  80ed2c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  80ed30:	e13ffc17 	ldw	r4,-16(fp)
  80ed34:	080ebd80 	call	80ebd8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  80ed38:	e0fffa04 	addi	r3,fp,-24
  80ed3c:	00800044 	movi	r2,1
  80ed40:	d8800215 	stw	r2,8(sp)
  80ed44:	d8000115 	stw	zero,4(sp)
  80ed48:	d8000015 	stw	zero,0(sp)
  80ed4c:	180f883a 	mov	r7,r3
  80ed50:	e1bff917 	ldw	r6,-28(fp)
  80ed54:	000b883a 	mov	r5,zero
  80ed58:	e13ffc17 	ldw	r4,-16(fp)
  80ed5c:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  80ed60:	e0bfff17 	ldw	r2,-4(fp)
  80ed64:	d8000215 	stw	zero,8(sp)
  80ed68:	d8000115 	stw	zero,4(sp)
  80ed6c:	d8000015 	stw	zero,0(sp)
  80ed70:	e1fffe17 	ldw	r7,-8(fp)
  80ed74:	100d883a 	mov	r6,r2
  80ed78:	000b883a 	mov	r5,zero
  80ed7c:	e13ffc17 	ldw	r4,-16(fp)
  80ed80:	08108f40 	call	8108f4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  80ed84:	e13ffc17 	ldw	r4,-16(fp)
  80ed88:	080e9ac0 	call	80e9ac <epcs_await_wip_released>

  if(four_bytes_mode)
  80ed8c:	e0800217 	ldw	r2,8(fp)
  80ed90:	10000226 	beq	r2,zero,80ed9c <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  80ed94:	e13ffc17 	ldw	r4,-16(fp)
  80ed98:	080eef80 	call	80eef8 <epcs_exit_4_bytes_mode>
  }

  return length;
  80ed9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80eda0:	e037883a 	mov	sp,fp
  80eda4:	dfc00117 	ldw	ra,4(sp)
  80eda8:	df000017 	ldw	fp,0(sp)
  80edac:	dec00204 	addi	sp,sp,8
  80edb0:	f800283a 	ret

0080edb4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  80edb4:	defff804 	addi	sp,sp,-32
  80edb8:	dfc00715 	stw	ra,28(sp)
  80edbc:	df000615 	stw	fp,24(sp)
  80edc0:	df000604 	addi	fp,sp,24
  80edc4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  80edc8:	00bfeac4 	movi	r2,-85
  80edcc:	e0bffd05 	stb	r2,-12(fp)
  80edd0:	e03ffd45 	stb	zero,-11(fp)
  80edd4:	e03ffd85 	stb	zero,-10(fp)
  80edd8:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  80eddc:	d8000215 	stw	zero,8(sp)
  80ede0:	e0bffe04 	addi	r2,fp,-8
  80ede4:	d8800115 	stw	r2,4(sp)
  80ede8:	00800044 	movi	r2,1
  80edec:	d8800015 	stw	r2,0(sp)
  80edf0:	e1fffd04 	addi	r7,fp,-12
  80edf4:	01800104 	movi	r6,4
  80edf8:	000b883a 	mov	r5,zero
  80edfc:	e13fff17 	ldw	r4,-4(fp)
  80ee00:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  80ee04:	e0bffe03 	ldbu	r2,-8(fp)
}
  80ee08:	e037883a 	mov	sp,fp
  80ee0c:	dfc00117 	ldw	ra,4(sp)
  80ee10:	df000017 	ldw	fp,0(sp)
  80ee14:	dec00204 	addi	sp,sp,8
  80ee18:	f800283a 	ret

0080ee1c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  80ee1c:	defff904 	addi	sp,sp,-28
  80ee20:	dfc00615 	stw	ra,24(sp)
  80ee24:	df000515 	stw	fp,20(sp)
  80ee28:	df000504 	addi	fp,sp,20
  80ee2c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  80ee30:	00bfe7c4 	movi	r2,-97
  80ee34:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  80ee38:	d8000215 	stw	zero,8(sp)
  80ee3c:	e0bffe44 	addi	r2,fp,-7
  80ee40:	d8800115 	stw	r2,4(sp)
  80ee44:	008000c4 	movi	r2,3
  80ee48:	d8800015 	stw	r2,0(sp)
  80ee4c:	e1fffe04 	addi	r7,fp,-8
  80ee50:	01800044 	movi	r6,1
  80ee54:	000b883a 	mov	r5,zero
  80ee58:	e13fff17 	ldw	r4,-4(fp)
  80ee5c:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  80ee60:	e0bffe43 	ldbu	r2,-7(fp)
  80ee64:	10803fcc 	andi	r2,r2,255
  80ee68:	1006943a 	slli	r3,r2,16
  80ee6c:	e0bffe83 	ldbu	r2,-6(fp)
  80ee70:	10803fcc 	andi	r2,r2,255
  80ee74:	1004923a 	slli	r2,r2,8
  80ee78:	1886b03a 	or	r3,r3,r2
  80ee7c:	e0bffec3 	ldbu	r2,-5(fp)
  80ee80:	10803fcc 	andi	r2,r2,255
  80ee84:	1884b03a 	or	r2,r3,r2
}
  80ee88:	e037883a 	mov	sp,fp
  80ee8c:	dfc00117 	ldw	ra,4(sp)
  80ee90:	df000017 	ldw	fp,0(sp)
  80ee94:	dec00204 	addi	sp,sp,8
  80ee98:	f800283a 	ret

0080ee9c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  80ee9c:	defff904 	addi	sp,sp,-28
  80eea0:	dfc00615 	stw	ra,24(sp)
  80eea4:	df000515 	stw	fp,20(sp)
  80eea8:	df000504 	addi	fp,sp,20
  80eeac:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  80eeb0:	00bfedc4 	movi	r2,-73
  80eeb4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80eeb8:	e13fff17 	ldw	r4,-4(fp)
  80eebc:	080ebd80 	call	80ebd8 <epcs_write_enable>

  alt_avalon_spi_command(
  80eec0:	d8000215 	stw	zero,8(sp)
  80eec4:	d8000115 	stw	zero,4(sp)
  80eec8:	d8000015 	stw	zero,0(sp)
  80eecc:	e1fffe04 	addi	r7,fp,-8
  80eed0:	01800044 	movi	r6,1
  80eed4:	000b883a 	mov	r5,zero
  80eed8:	e13fff17 	ldw	r4,-4(fp)
  80eedc:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80eee0:	0001883a 	nop
}
  80eee4:	e037883a 	mov	sp,fp
  80eee8:	dfc00117 	ldw	ra,4(sp)
  80eeec:	df000017 	ldw	fp,0(sp)
  80eef0:	dec00204 	addi	sp,sp,8
  80eef4:	f800283a 	ret

0080eef8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  80eef8:	defff904 	addi	sp,sp,-28
  80eefc:	dfc00615 	stw	ra,24(sp)
  80ef00:	df000515 	stw	fp,20(sp)
  80ef04:	df000504 	addi	fp,sp,20
  80ef08:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  80ef0c:	00bffa44 	movi	r2,-23
  80ef10:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80ef14:	e13fff17 	ldw	r4,-4(fp)
  80ef18:	080ebd80 	call	80ebd8 <epcs_write_enable>

  alt_avalon_spi_command(
  80ef1c:	d8000215 	stw	zero,8(sp)
  80ef20:	d8000115 	stw	zero,4(sp)
  80ef24:	d8000015 	stw	zero,0(sp)
  80ef28:	e1fffe04 	addi	r7,fp,-8
  80ef2c:	01800044 	movi	r6,1
  80ef30:	000b883a 	mov	r5,zero
  80ef34:	e13fff17 	ldw	r4,-4(fp)
  80ef38:	08108f40 	call	8108f4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80ef3c:	0001883a 	nop
}
  80ef40:	e037883a 	mov	sp,fp
  80ef44:	dfc00117 	ldw	ra,4(sp)
  80ef48:	df000017 	ldw	fp,0(sp)
  80ef4c:	dec00204 	addi	sp,sp,8
  80ef50:	f800283a 	ret

0080ef54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ef54:	defffe04 	addi	sp,sp,-8
  80ef58:	dfc00115 	stw	ra,4(sp)
  80ef5c:	df000015 	stw	fp,0(sp)
  80ef60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ef64:	d0a03f17 	ldw	r2,-32516(gp)
  80ef68:	10000326 	beq	r2,zero,80ef78 <alt_get_errno+0x24>
  80ef6c:	d0a03f17 	ldw	r2,-32516(gp)
  80ef70:	103ee83a 	callr	r2
  80ef74:	00000106 	br	80ef7c <alt_get_errno+0x28>
  80ef78:	d0a08804 	addi	r2,gp,-32224
}
  80ef7c:	e037883a 	mov	sp,fp
  80ef80:	dfc00117 	ldw	ra,4(sp)
  80ef84:	df000017 	ldw	fp,0(sp)
  80ef88:	dec00204 	addi	sp,sp,8
  80ef8c:	f800283a 	ret

0080ef90 <fifoed_avalon_uart_read>:
 * transfered from a circular buffer. The interrupt handler is then responsible
 * for copying data from the device into this buffer.
 */

int fifoed_avalon_uart_read (fifoed_avalon_uart_state* sp, char* ptr, int len, int flags)
{
  80ef90:	deffed04 	addi	sp,sp,-76
  80ef94:	dfc01215 	stw	ra,72(sp)
  80ef98:	df001115 	stw	fp,68(sp)
  80ef9c:	df001104 	addi	fp,sp,68
  80efa0:	e13ffc15 	stw	r4,-16(fp)
  80efa4:	e17ffd15 	stw	r5,-12(fp)
  80efa8:	e1bffe15 	stw	r6,-8(fp)
  80efac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
 // alt_u32         next; //9.3.1 patch

  int count                = 0;
  80efb0:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80efb4:	e0bfff17 	ldw	r2,-4(fp)
  80efb8:	1090000c 	andi	r2,r2,16384
  80efbc:	1005003a 	cmpeq	r2,r2,zero
  80efc0:	10803fcc 	andi	r2,r2,255
  80efc4:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  80efc8:	e0bffc17 	ldw	r2,-16(fp)
  80efcc:	10800817 	ldw	r2,32(r2)
  80efd0:	e0bff815 	stw	r2,-32(fp)
  80efd4:	e03ff90d 	sth	zero,-28(fp)
  80efd8:	e0bff90b 	ldhu	r2,-28(fp)
  80efdc:	e0fffb44 	addi	r3,fp,-19
  80efe0:	180d883a 	mov	r6,r3
  80efe4:	100b883a 	mov	r5,r2
  80efe8:	e13ff817 	ldw	r4,-32(fp)
  80efec:	0809be80 	call	809be8 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80eff0:	00001706 	br	80f050 <fifoed_avalon_uart_read+0xc0>
    {
      count++;
  80eff4:	e0bff017 	ldw	r2,-64(fp)
  80eff8:	10800044 	addi	r2,r2,1
  80effc:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80f000:	e0bffd17 	ldw	r2,-12(fp)
  80f004:	10c00044 	addi	r3,r2,1
  80f008:	e0fffd15 	stw	r3,-12(fp)
  80f00c:	e0fffc17 	ldw	r3,-16(fp)
  80f010:	18c00217 	ldw	r3,8(r3)
  80f014:	e13ffc17 	ldw	r4,-16(fp)
  80f018:	20c7883a 	add	r3,r4,r3
  80f01c:	18c00a04 	addi	r3,r3,40
  80f020:	18c00003 	ldbu	r3,0(r3)
  80f024:	10c00005 	stb	r3,0(r2)
      
  //  9.3.1 patch  sp->rx_start = (++sp->rx_start) & FIFOED_AVALON_UART_BUF_MSK;
      ++sp->rx_start;
  80f028:	e0bffc17 	ldw	r2,-16(fp)
  80f02c:	10800217 	ldw	r2,8(r2)
  80f030:	10c00044 	addi	r3,r2,1
  80f034:	e0bffc17 	ldw	r2,-16(fp)
  80f038:	10c00215 	stw	r3,8(r2)
      sp->rx_start = sp->rx_start & FIFOED_AVALON_UART_BUF_MSK; 
  80f03c:	e0bffc17 	ldw	r2,-16(fp)
  80f040:	10800217 	ldw	r2,8(r2)
  80f044:	10c00fcc 	andi	r3,r2,63
  80f048:	e0bffc17 	ldw	r2,-16(fp)
  80f04c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f050:	e0fff017 	ldw	r3,-64(fp)
  80f054:	e0bffe17 	ldw	r2,-8(fp)
  80f058:	1880050e 	bge	r3,r2,80f070 <fifoed_avalon_uart_read+0xe0>
  80f05c:	e0bffc17 	ldw	r2,-16(fp)
  80f060:	10c00217 	ldw	r3,8(r2)
  80f064:	e0bffc17 	ldw	r2,-16(fp)
  80f068:	10800317 	ldw	r2,12(r2)
  80f06c:	18bfe11e 	bne	r3,r2,80eff4 <__alt_mem_epcs_flash_controller_0+0xff805ff4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80f070:	e0bff017 	ldw	r2,-64(fp)
  80f074:	1000381e 	bne	r2,zero,80f158 <fifoed_avalon_uart_read+0x1c8>
  80f078:	e0bffc17 	ldw	r2,-16(fp)
  80f07c:	10c00217 	ldw	r3,8(r2)
  80f080:	e0bffc17 	ldw	r2,-16(fp)
  80f084:	10800317 	ldw	r2,12(r2)
  80f088:	1880331e 	bne	r3,r2,80f158 <fifoed_avalon_uart_read+0x1c8>
    {
      if (!block)
  80f08c:	e0bff117 	ldw	r2,-60(fp)
  80f090:	1000051e 	bne	r2,zero,80f0a8 <fifoed_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80f094:	080ef540 	call	80ef54 <alt_get_errno>
  80f098:	1007883a 	mov	r3,r2
  80f09c:	008002c4 	movi	r2,11
  80f0a0:	18800015 	stw	r2,0(r3)
        break;
  80f0a4:	00003006 	br	80f168 <fifoed_avalon_uart_read+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0a8:	0005303a 	rdctl	r2,status
  80f0ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0b0:	e0fff517 	ldw	r3,-44(fp)
  80f0b4:	00bfff84 	movi	r2,-2
  80f0b8:	1884703a 	and	r2,r3,r2
  80f0bc:	1001703a 	wrctl	status,r2
  
  return context;
  80f0c0:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80f0c4:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
  80f0c8:	e0bffc17 	ldw	r2,-16(fp)
  80f0cc:	10800117 	ldw	r2,4(r2)
  80f0d0:	10c02014 	ori	r3,r2,128
  80f0d4:	e0bffc17 	ldw	r2,-16(fp)
  80f0d8:	10c00115 	stw	r3,4(r2)
       IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f0dc:	e0bffc17 	ldw	r2,-16(fp)
  80f0e0:	10800017 	ldw	r2,0(r2)
  80f0e4:	10800304 	addi	r2,r2,12
  80f0e8:	e0fffc17 	ldw	r3,-16(fp)
  80f0ec:	18c00117 	ldw	r3,4(r3)
  80f0f0:	10c00035 	stwio	r3,0(r2)
  80f0f4:	e0bff417 	ldw	r2,-48(fp)
  80f0f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f0fc:	e0bff617 	ldw	r2,-40(fp)
  80f100:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events,
  80f104:	e0bffc17 	ldw	r2,-16(fp)
  80f108:	10800717 	ldw	r2,28(r2)
  80f10c:	e0bff215 	stw	r2,-56(fp)
  80f110:	00800044 	movi	r2,1
  80f114:	e0bff98d 	sth	r2,-26(fp)
  80f118:	00bfe0c4 	movi	r2,-125
  80f11c:	e0bffa05 	stb	r2,-24(fp)
  80f120:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80f124:	d0a09243 	ldbu	r2,-32183(gp)
  80f128:	10803fcc 	andi	r2,r2,255
  80f12c:	10000a26 	beq	r2,zero,80f158 <fifoed_avalon_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80f130:	e0fff98b 	ldhu	r3,-26(fp)
  80f134:	e13ffa03 	ldbu	r4,-24(fp)
  80f138:	e17ffa8b 	ldhu	r5,-22(fp)
  80f13c:	e0bffb04 	addi	r2,fp,-20
  80f140:	d8800015 	stw	r2,0(sp)
  80f144:	280f883a 	mov	r7,r5
  80f148:	200d883a 	mov	r6,r4
  80f14c:	180b883a 	mov	r5,r3
  80f150:	e13ff217 	ldw	r4,-56(fp)
  80f154:	08071740 	call	807174 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80f158:	e0bff017 	ldw	r2,-64(fp)
  80f15c:	1000021e 	bne	r2,zero,80f168 <fifoed_avalon_uart_read+0x1d8>
  80f160:	e0bffe17 	ldw	r2,-8(fp)
  80f164:	103fba1e 	bne	r2,zero,80f050 <__alt_mem_epcs_flash_controller_0+0xff806050>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80f168:	e0bffc17 	ldw	r2,-16(fp)
  80f16c:	10800817 	ldw	r2,32(r2)
  80f170:	1009883a 	mov	r4,r2
  80f174:	0809f600 	call	809f60 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f178:	0005303a 	rdctl	r2,status
  80f17c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f180:	e0fff717 	ldw	r3,-36(fp)
  80f184:	00bfff84 	movi	r2,-2
  80f188:	1884703a 	and	r2,r3,r2
  80f18c:	1001703a 	wrctl	status,r2
  
  return context;
  80f190:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80f194:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
  80f198:	e0bffc17 	ldw	r2,-16(fp)
  80f19c:	10800117 	ldw	r2,4(r2)
  80f1a0:	10c02014 	ori	r3,r2,128
  80f1a4:	e0bffc17 	ldw	r2,-16(fp)
  80f1a8:	10c00115 	stw	r3,4(r2)
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f1ac:	e0bffc17 	ldw	r2,-16(fp)
  80f1b0:	10800017 	ldw	r2,0(r2)
  80f1b4:	10800304 	addi	r2,r2,12
  80f1b8:	e0fffc17 	ldw	r3,-16(fp)
  80f1bc:	18c00117 	ldw	r3,4(r3)
  80f1c0:	10c00035 	stwio	r3,0(r2)
  80f1c4:	e0bff417 	ldw	r2,-48(fp)
  80f1c8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1cc:	e0bff317 	ldw	r2,-52(fp)
  80f1d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
  80f1d4:	e0bff017 	ldw	r2,-64(fp)
}
  80f1d8:	e037883a 	mov	sp,fp
  80f1dc:	dfc00117 	ldw	ra,4(sp)
  80f1e0:	df000017 	ldw	fp,0(sp)
  80f1e4:	dec00204 	addi	sp,sp,8
  80f1e8:	f800283a 	ret

0080f1ec <fifoed_avalon_uart_write>:
 * transfered to a circular buffer. The interrupt handler is then responsible
 * for copying data from this buffer into the device.
 */

int fifoed_avalon_uart_write (fifoed_avalon_uart_state* sp, const char* ptr, int len, int flags)
{
  80f1ec:	deffec04 	addi	sp,sp,-80
  80f1f0:	dfc01315 	stw	ra,76(sp)
  80f1f4:	df001215 	stw	fp,72(sp)
  80f1f8:	df001204 	addi	fp,sp,72
  80f1fc:	e13ffc15 	stw	r4,-16(fp)
  80f200:	e17ffd15 	stw	r5,-12(fp)
  80f204:	e1bffe15 	stw	r6,-8(fp)
  80f208:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int count                = len;
  80f20c:	e0bffe17 	ldw	r2,-8(fp)
  80f210:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80f214:	e0bfff17 	ldw	r2,-4(fp)
  80f218:	1090000c 	andi	r2,r2,16384
  80f21c:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  80f220:	e0bffc17 	ldw	r2,-16(fp)
  80f224:	10800917 	ldw	r2,36(r2)
  80f228:	e0bff815 	stw	r2,-32(fp)
  80f22c:	e03ff90d 	sth	zero,-28(fp)
  80f230:	e0bff90b 	ldhu	r2,-28(fp)
  80f234:	e0fffb44 	addi	r3,fp,-19
  80f238:	180d883a 	mov	r6,r3
  80f23c:	100b883a 	mov	r5,r2
  80f240:	e13ff817 	ldw	r4,-32(fp)
  80f244:	0809be80 	call	809be8 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f248:	00005106 	br	80f390 <fifoed_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
  80f24c:	e0bffc17 	ldw	r2,-16(fp)
  80f250:	10800517 	ldw	r2,20(r2)
  80f254:	10800044 	addi	r2,r2,1
  80f258:	10800fcc 	andi	r2,r2,63
  80f25c:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80f260:	e0bffc17 	ldw	r2,-16(fp)
  80f264:	10c00417 	ldw	r3,16(r2)
  80f268:	e0bff217 	ldw	r2,-56(fp)
  80f26c:	1880371e 	bne	r3,r2,80f34c <fifoed_avalon_uart_write+0x160>
    {
      if (no_block)
  80f270:	e0bff017 	ldw	r2,-64(fp)
  80f274:	10000526 	beq	r2,zero,80f28c <fifoed_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80f278:	080ef540 	call	80ef54 <alt_get_errno>
  80f27c:	1007883a 	mov	r3,r2
  80f280:	008002c4 	movi	r2,11
  80f284:	18800015 	stw	r2,0(r3)
        break;
  80f288:	00004306 	br	80f398 <fifoed_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f28c:	0005303a 	rdctl	r2,status
  80f290:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f294:	e0fff517 	ldw	r3,-44(fp)
  80f298:	00bfff84 	movi	r2,-2
  80f29c:	1884703a 	and	r2,r3,r2
  80f2a0:	1001703a 	wrctl	status,r2
  
  return context;
  80f2a4:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80f2a8:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
  80f2ac:	e0bffc17 	ldw	r2,-16(fp)
  80f2b0:	10800117 	ldw	r2,4(r2)
  80f2b4:	10c11014 	ori	r3,r2,1088
  80f2b8:	e0bffc17 	ldw	r2,-16(fp)
  80f2bc:	10c00115 	stw	r3,4(r2)
                        FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f2c0:	e0bffc17 	ldw	r2,-16(fp)
  80f2c4:	10800017 	ldw	r2,0(r2)
  80f2c8:	10800304 	addi	r2,r2,12
  80f2cc:	e0fffc17 	ldw	r3,-16(fp)
  80f2d0:	18c00117 	ldw	r3,4(r3)
  80f2d4:	10c00035 	stwio	r3,0(r2)
  80f2d8:	e0bff417 	ldw	r2,-48(fp)
  80f2dc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2e0:	e0bff117 	ldw	r2,-60(fp)
  80f2e4:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events,
  80f2e8:	e0bffc17 	ldw	r2,-16(fp)
  80f2ec:	10800717 	ldw	r2,28(r2)
  80f2f0:	e0bff315 	stw	r2,-52(fp)
  80f2f4:	00800084 	movi	r2,2
  80f2f8:	e0bff98d 	sth	r2,-26(fp)
  80f2fc:	00bfe0c4 	movi	r2,-125
  80f300:	e0bffa05 	stb	r2,-24(fp)
  80f304:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80f308:	d0a09243 	ldbu	r2,-32183(gp)
  80f30c:	10803fcc 	andi	r2,r2,255
  80f310:	10000a26 	beq	r2,zero,80f33c <fifoed_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80f314:	e0fff98b 	ldhu	r3,-26(fp)
  80f318:	e13ffa03 	ldbu	r4,-24(fp)
  80f31c:	e17ffa8b 	ldhu	r5,-22(fp)
  80f320:	e0bffb04 	addi	r2,fp,-20
  80f324:	d8800015 	stw	r2,0(sp)
  80f328:	280f883a 	mov	r7,r5
  80f32c:	200d883a 	mov	r6,r4
  80f330:	180b883a 	mov	r5,r3
  80f334:	e13ff317 	ldw	r4,-52(fp)
  80f338:	08071740 	call	807174 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80f33c:	e0bffc17 	ldw	r2,-16(fp)
  80f340:	10c00417 	ldw	r3,16(r2)
  80f344:	e0bff217 	ldw	r2,-56(fp)
  80f348:	18bfe726 	beq	r3,r2,80f2e8 <__alt_mem_epcs_flash_controller_0+0xff8062e8>
      }
    }

    count--;
  80f34c:	e0bfef17 	ldw	r2,-68(fp)
  80f350:	10bfffc4 	addi	r2,r2,-1
  80f354:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80f358:	e0bffc17 	ldw	r2,-16(fp)
  80f35c:	10c00517 	ldw	r3,20(r2)
  80f360:	e0bffd17 	ldw	r2,-12(fp)
  80f364:	11000044 	addi	r4,r2,1
  80f368:	e13ffd15 	stw	r4,-12(fp)
  80f36c:	10800003 	ldbu	r2,0(r2)
  80f370:	1009883a 	mov	r4,r2
  80f374:	e0bffc17 	ldw	r2,-16(fp)
  80f378:	10c5883a 	add	r2,r2,r3
  80f37c:	10801a04 	addi	r2,r2,104
  80f380:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80f384:	e0bffc17 	ldw	r2,-16(fp)
  80f388:	e0fff217 	ldw	r3,-56(fp)
  80f38c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f390:	e0bfef17 	ldw	r2,-68(fp)
  80f394:	103fad1e 	bne	r2,zero,80f24c <__alt_mem_epcs_flash_controller_0+0xff80624c>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  80f398:	e0bffc17 	ldw	r2,-16(fp)
  80f39c:	10800917 	ldw	r2,36(r2)
  80f3a0:	1009883a 	mov	r4,r2
  80f3a4:	0809f600 	call	809f60 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3a8:	0005303a 	rdctl	r2,status
  80f3ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3b0:	e0fff717 	ldw	r3,-36(fp)
  80f3b4:	00bfff84 	movi	r2,-2
  80f3b8:	1884703a 	and	r2,r3,r2
  80f3bc:	1001703a 	wrctl	status,r2
  
  return context;
  80f3c0:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80f3c4:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
  80f3c8:	e0bffc17 	ldw	r2,-16(fp)
  80f3cc:	10800117 	ldw	r2,4(r2)
  80f3d0:	10c11014 	ori	r3,r2,1088
  80f3d4:	e0bffc17 	ldw	r2,-16(fp)
  80f3d8:	10c00115 	stw	r3,4(r2)
                 FIFOED_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f3dc:	e0bffc17 	ldw	r2,-16(fp)
  80f3e0:	10800017 	ldw	r2,0(r2)
  80f3e4:	10800304 	addi	r2,r2,12
  80f3e8:	e0fffc17 	ldw	r3,-16(fp)
  80f3ec:	18c00117 	ldw	r3,4(r3)
  80f3f0:	10c00035 	stwio	r3,0(r2)
  80f3f4:	e0bff417 	ldw	r2,-48(fp)
  80f3f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3fc:	e0bff617 	ldw	r2,-40(fp)
  80f400:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80f404:	e0fffe17 	ldw	r3,-8(fp)
  80f408:	e0bfef17 	ldw	r2,-68(fp)
  80f40c:	1885c83a 	sub	r2,r3,r2
}
  80f410:	e037883a 	mov	sp,fp
  80f414:	dfc00117 	ldw	ra,4(sp)
  80f418:	df000017 	ldw	fp,0(sp)
  80f41c:	dec00204 	addi	sp,sp,8
  80f420:	f800283a 	ret

0080f424 <fifoed_avalon_uart_rxirq>:
 * dat ready to be processed.
 */

static void fifoed_avalon_uart_rxirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
  80f424:	defff904 	addi	sp,sp,-28
  80f428:	dfc00615 	stw	ra,24(sp)
  80f42c:	df000515 	stw	fp,20(sp)
  80f430:	df000504 	addi	fp,sp,20
  80f434:	e13ffe15 	stw	r4,-8(fp)
  80f438:	e17fff15 	stw	r5,-4(fp)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
  80f43c:	00004106 	br	80f544 <fifoed_avalon_uart_rxirq+0x120>
  if (sp->rx_end == sp->rx_start)
  80f440:	e0bffe17 	ldw	r2,-8(fp)
  80f444:	10c00317 	ldw	r3,12(r2)
  80f448:	e0bffe17 	ldw	r2,-8(fp)
  80f44c:	10800217 	ldw	r2,8(r2)
  80f450:	1880121e 	bne	r3,r2,80f49c <fifoed_avalon_uart_rxirq+0x78>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  80f454:	e0bffe17 	ldw	r2,-8(fp)
  80f458:	10800717 	ldw	r2,28(r2)
  80f45c:	e0bffc15 	stw	r2,-16(fp)
  80f460:	00800044 	movi	r2,1
  80f464:	e0bffd0d 	sth	r2,-12(fp)
  80f468:	00800044 	movi	r2,1
  80f46c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80f470:	d0a09243 	ldbu	r2,-32183(gp)
  80f474:	10803fcc 	andi	r2,r2,255
  80f478:	10000826 	beq	r2,zero,80f49c <fifoed_avalon_uart_rxirq+0x78>
  {
    OSFlagPost (group, flags, opt, &err);
  80f47c:	e0bffd0b 	ldhu	r2,-12(fp)
  80f480:	e0fffd83 	ldbu	r3,-10(fp)
  80f484:	e13ffdc4 	addi	r4,fp,-9
  80f488:	200f883a 	mov	r7,r4
  80f48c:	180d883a 	mov	r6,r3
  80f490:	100b883a 	mov	r5,r2
  80f494:	e13ffc17 	ldw	r4,-16(fp)
  80f498:	080778c0 	call	80778c <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
  80f49c:	e0bffe17 	ldw	r2,-8(fp)
  80f4a0:	10800317 	ldw	r2,12(r2)
  80f4a4:	10800044 	addi	r2,r2,1
  80f4a8:	10800fcc 	andi	r2,r2,63
  80f4ac:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_FIFOED_AVALON_UART_RXDATA(sp->base);
  80f4b0:	e0bffe17 	ldw	r2,-8(fp)
  80f4b4:	10800317 	ldw	r2,12(r2)
  80f4b8:	e0fffe17 	ldw	r3,-8(fp)
  80f4bc:	18c00017 	ldw	r3,0(r3)
  80f4c0:	18c00037 	ldwio	r3,0(r3)
  80f4c4:	1809883a 	mov	r4,r3
  80f4c8:	e0fffe17 	ldw	r3,-8(fp)
  80f4cc:	1885883a 	add	r2,r3,r2
  80f4d0:	10800a04 	addi	r2,r2,40
  80f4d4:	11000005 	stb	r4,0(r2)
  /* If there was an error, discard the data */

// i have left this in tack but it is not necissarily right.
// next version of the fifo will track the errors in the fifo. 

  if (status & (FIFOED_AVALON_UART_STATUS_PE_MSK | 
  80f4d8:	e0bfff17 	ldw	r2,-4(fp)
  80f4dc:	108000cc 	andi	r2,r2,3
  80f4e0:	10001f1e 	bne	r2,zero,80f560 <fifoed_avalon_uart_rxirq+0x13c>
                  FIFOED_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  }

  sp->rx_end = next;
  80f4e4:	e0bffe17 	ldw	r2,-8(fp)
  80f4e8:	e0fffb17 	ldw	r3,-20(fp)
  80f4ec:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
  80f4f0:	e0bffe17 	ldw	r2,-8(fp)
  80f4f4:	10800317 	ldw	r2,12(r2)
  80f4f8:	10800044 	addi	r2,r2,1
  80f4fc:	10800fcc 	andi	r2,r2,63
  80f500:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80f504:	e0bffe17 	ldw	r2,-8(fp)
  80f508:	10c00217 	ldw	r3,8(r2)
  80f50c:	e0bffb17 	ldw	r2,-20(fp)
  80f510:	18800c1e 	bne	r3,r2,80f544 <fifoed_avalon_uart_rxirq+0x120>
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
  80f514:	e0bffe17 	ldw	r2,-8(fp)
  80f518:	10c00117 	ldw	r3,4(r2)
  80f51c:	00bfdfc4 	movi	r2,-129
  80f520:	1886703a 	and	r3,r3,r2
  80f524:	e0bffe17 	ldw	r2,-8(fp)
  80f528:	10c00115 	stw	r3,4(r2)
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f52c:	e0bffe17 	ldw	r2,-8(fp)
  80f530:	10800017 	ldw	r2,0(r2)
  80f534:	10800304 	addi	r2,r2,12
  80f538:	e0fffe17 	ldw	r3,-8(fp)
  80f53c:	18c00117 	ldw	r3,4(r3)
  80f540:	10c00035 	stwio	r3,0(r2)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
  80f544:	e0bffe17 	ldw	r2,-8(fp)
  80f548:	10800017 	ldw	r2,0(r2)
  80f54c:	10800204 	addi	r2,r2,8
  80f550:	10800037 	ldwio	r2,0(r2)
  80f554:	1080200c 	andi	r2,r2,128
  80f558:	103fb91e 	bne	r2,zero,80f440 <__alt_mem_epcs_flash_controller_0+0xff806440>
  80f55c:	00000106 	br	80f564 <fifoed_avalon_uart_rxirq+0x140>
// next version of the fifo will track the errors in the fifo. 

  if (status & (FIFOED_AVALON_UART_STATUS_PE_MSK | 
                  FIFOED_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80f560:	0001883a 	nop
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  }   
}
}
  80f564:	e037883a 	mov	sp,fp
  80f568:	dfc00117 	ldw	ra,4(sp)
  80f56c:	df000017 	ldw	fp,0(sp)
  80f570:	dec00204 	addi	sp,sp,8
  80f574:	f800283a 	ret

0080f578 <fifoed_avalon_uart_txirq>:
 * data ready to be processed.
 */

static void fifoed_avalon_uart_txirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
  80f578:	defffa04 	addi	sp,sp,-24
  80f57c:	dfc00515 	stw	ra,20(sp)
  80f580:	df000415 	stw	fp,16(sp)
  80f584:	df000404 	addi	fp,sp,16
  80f588:	e13ffe15 	stw	r4,-8(fp)
  80f58c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80f590:	e0bffe17 	ldw	r2,-8(fp)
  80f594:	10c00417 	ldw	r3,16(r2)
  80f598:	e0bffe17 	ldw	r2,-8(fp)
  80f59c:	10800517 	ldw	r2,20(r2)
  80f5a0:	18805326 	beq	r3,r2,80f6f0 <fifoed_avalon_uart_txirq+0x178>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
  80f5a4:	e0bffe17 	ldw	r2,-8(fp)
  80f5a8:	10800617 	ldw	r2,24(r2)
  80f5ac:	1080008c 	andi	r2,r2,2
  80f5b0:	10000326 	beq	r2,zero,80f5c0 <fifoed_avalon_uart_txirq+0x48>
      (status & FIFOED_AVALON_UART_STATUS_CTS_MSK))
  80f5b4:	e0bfff17 	ldw	r2,-4(fp)
  80f5b8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
  80f5bc:	10003e26 	beq	r2,zero,80f6b8 <fifoed_avalon_uart_txirq+0x140>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK))
  80f5c0:	e0bffe17 	ldw	r2,-8(fp)
  80f5c4:	10c00417 	ldw	r3,16(r2)
  80f5c8:	e0bffe17 	ldw	r2,-8(fp)
  80f5cc:	10800517 	ldw	r2,20(r2)
  80f5d0:	10800044 	addi	r2,r2,1
  80f5d4:	10800fcc 	andi	r2,r2,63
  80f5d8:	1880261e 	bne	r3,r2,80f674 <fifoed_avalon_uart_txirq+0xfc>
      { 
        ALT_FLAG_POST (sp->events,
  80f5dc:	e0bffe17 	ldw	r2,-8(fp)
  80f5e0:	10800717 	ldw	r2,28(r2)
  80f5e4:	e0bffc15 	stw	r2,-16(fp)
  80f5e8:	00800084 	movi	r2,2
  80f5ec:	e0bffd0d 	sth	r2,-12(fp)
  80f5f0:	00800044 	movi	r2,1
  80f5f4:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80f5f8:	d0a09243 	ldbu	r2,-32183(gp)
  80f5fc:	10803fcc 	andi	r2,r2,255
  80f600:	10001c26 	beq	r2,zero,80f674 <fifoed_avalon_uart_txirq+0xfc>
  {
    OSFlagPost (group, flags, opt, &err);
  80f604:	e0bffd0b 	ldhu	r2,-12(fp)
  80f608:	e0fffd83 	ldbu	r3,-10(fp)
  80f60c:	e13ffdc4 	addi	r4,fp,-9
  80f610:	200f883a 	mov	r7,r4
  80f614:	180d883a 	mov	r6,r3
  80f618:	100b883a 	mov	r5,r2
  80f61c:	e13ffc17 	ldw	r4,-16(fp)
  80f620:	080778c0 	call	80778c <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
  80f624:	00001306 	br	80f674 <fifoed_avalon_uart_txirq+0xfc>
          (IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_TRDY_MSK))
          {
              IOWR_FIFOED_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80f628:	e0bffe17 	ldw	r2,-8(fp)
  80f62c:	10800017 	ldw	r2,0(r2)
  80f630:	10800104 	addi	r2,r2,4
  80f634:	e0fffe17 	ldw	r3,-8(fp)
  80f638:	18c00417 	ldw	r3,16(r3)
  80f63c:	e13ffe17 	ldw	r4,-8(fp)
  80f640:	20c7883a 	add	r3,r4,r3
  80f644:	18c01a04 	addi	r3,r3,104
  80f648:	18c00003 	ldbu	r3,0(r3)
  80f64c:	18c03fcc 	andi	r3,r3,255
  80f650:	10c00035 	stwio	r3,0(r2)

              sp->tx_start = (++sp->tx_start) & FIFOED_AVALON_UART_BUF_MSK;
  80f654:	e0bffe17 	ldw	r2,-8(fp)
  80f658:	10800417 	ldw	r2,16(r2)
  80f65c:	10800044 	addi	r2,r2,1
  80f660:	e0fffe17 	ldw	r3,-8(fp)
  80f664:	18800415 	stw	r2,16(r3)
  80f668:	10c00fcc 	andi	r3,r2,63
  80f66c:	e0bffe17 	ldw	r2,-8(fp)
  80f670:	10c00415 	stw	r3,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
  80f674:	e0bffe17 	ldw	r2,-8(fp)
  80f678:	10c00417 	ldw	r3,16(r2)
  80f67c:	e0bffe17 	ldw	r2,-8(fp)
  80f680:	10800517 	ldw	r2,20(r2)
  80f684:	18800626 	beq	r3,r2,80f6a0 <fifoed_avalon_uart_txirq+0x128>
          (IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_TRDY_MSK))
  80f688:	e0bffe17 	ldw	r2,-8(fp)
  80f68c:	10800017 	ldw	r2,0(r2)
  80f690:	10800204 	addi	r2,r2,8
  80f694:	10800037 	ldwio	r2,0(r2)
  80f698:	1080100c 	andi	r2,r2,64
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
  80f69c:	103fe21e 	bne	r2,zero,80f628 <__alt_mem_epcs_flash_controller_0+0xff806628>
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
  80f6a0:	e0bffe17 	ldw	r2,-8(fp)
  80f6a4:	10800117 	ldw	r2,4(r2)
  80f6a8:	10c01014 	ori	r3,r2,64
  80f6ac:	e0bffe17 	ldw	r2,-8(fp)
  80f6b0:	10c00115 	stw	r3,4(r2)
  80f6b4:	00000e06 	br	80f6f0 <fifoed_avalon_uart_txirq+0x178>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_FIFOED_AVALON_UART_STATUS(sp->base);
  80f6b8:	e0bffe17 	ldw	r2,-8(fp)
  80f6bc:	10800017 	ldw	r2,0(r2)
  80f6c0:	10800204 	addi	r2,r2,8
  80f6c4:	10800037 	ldwio	r2,0(r2)
  80f6c8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & FIFOED_AVALON_UART_STATUS_CTS_MSK))
  80f6cc:	e0bfff17 	ldw	r2,-4(fp)
  80f6d0:	1082000c 	andi	r2,r2,2048
  80f6d4:	1000061e 	bne	r2,zero,80f6f0 <fifoed_avalon_uart_txirq+0x178>
      {
        sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
  80f6d8:	e0bffe17 	ldw	r2,-8(fp)
  80f6dc:	10c00117 	ldw	r3,4(r2)
  80f6e0:	00bfefc4 	movi	r2,-65
  80f6e4:	1886703a 	and	r3,r3,r2
  80f6e8:	e0bffe17 	ldw	r2,-8(fp)
  80f6ec:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80f6f0:	e0bffe17 	ldw	r2,-8(fp)
  80f6f4:	10c00417 	ldw	r3,16(r2)
  80f6f8:	e0bffe17 	ldw	r2,-8(fp)
  80f6fc:	10800517 	ldw	r2,20(r2)
  80f700:	1880061e 	bne	r3,r2,80f71c <fifoed_avalon_uart_txirq+0x1a4>
  {
    sp->ctrl &= ~(FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
  80f704:	e0bffe17 	ldw	r2,-8(fp)
  80f708:	10c00117 	ldw	r3,4(r2)
  80f70c:	00beefc4 	movi	r2,-1089
  80f710:	1886703a 	and	r3,r3,r2
  80f714:	e0bffe17 	ldw	r2,-8(fp)
  80f718:	10c00115 	stw	r3,4(r2)
                    FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f71c:	e0bffe17 	ldw	r2,-8(fp)
  80f720:	10800017 	ldw	r2,0(r2)
  80f724:	10800304 	addi	r2,r2,12
  80f728:	e0fffe17 	ldw	r3,-8(fp)
  80f72c:	18c00117 	ldw	r3,4(r3)
  80f730:	10c00035 	stwio	r3,0(r2)
}
  80f734:	0001883a 	nop
  80f738:	e037883a 	mov	sp,fp
  80f73c:	dfc00117 	ldw	ra,4(sp)
  80f740:	df000017 	ldw	fp,0(sp)
  80f744:	dec00204 	addi	sp,sp,8
  80f748:	f800283a 	ret

0080f74c <fifoed_avalon_uart_irq>:
 #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void fifoed_avalon_uart_irq(void* context)
#else
static void fifoed_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80f74c:	defffa04 	addi	sp,sp,-24
  80f750:	dfc00515 	stw	ra,20(sp)
  80f754:	df000415 	stw	fp,16(sp)
  80f758:	df000404 	addi	fp,sp,16
  80f75c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  fifoed_avalon_uart_state* sp = (fifoed_avalon_uart_state*) context;
  80f760:	e0bfff17 	ldw	r2,-4(fp)
  80f764:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80f768:	e0bffc17 	ldw	r2,-16(fp)
  80f76c:	10800017 	ldw	r2,0(r2)
  80f770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_FIFOED_AVALON_UART_STATUS(base);
  80f774:	e0bffd17 	ldw	r2,-12(fp)
  80f778:	10800204 	addi	r2,r2,8
  80f77c:	10800037 	ldwio	r2,0(r2)
  80f780:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */

  IOWR_FIFOED_AVALON_UART_STATUS(base, 0);
  80f784:	e0bffd17 	ldw	r2,-12(fp)
  80f788:	10800204 	addi	r2,r2,8
  80f78c:	0007883a 	mov	r3,zero
  80f790:	10c00035 	stwio	r3,0(r2)

  /* process a read irq */
 
  if (status & FIFOED_AVALON_UART_STATUS_RRDY_MSK)
  80f794:	e0bffe17 	ldw	r2,-8(fp)
  80f798:	1080200c 	andi	r2,r2,128
  80f79c:	10000326 	beq	r2,zero,80f7ac <fifoed_avalon_uart_irq+0x60>
  {
    fifoed_avalon_uart_rxirq (sp, status);
  80f7a0:	e17ffe17 	ldw	r5,-8(fp)
  80f7a4:	e13ffc17 	ldw	r4,-16(fp)
  80f7a8:	080f4240 	call	80f424 <fifoed_avalon_uart_rxirq>
  }

  /* process a write irq */

  if (status & (FIFOED_AVALON_UART_STATUS_TRDY_MSK | 
  80f7ac:	e0bffe17 	ldw	r2,-8(fp)
  80f7b0:	1081100c 	andi	r2,r2,1088
  80f7b4:	10000326 	beq	r2,zero,80f7c4 <fifoed_avalon_uart_irq+0x78>
                  FIFOED_AVALON_UART_STATUS_DCTS_MSK))
  {
    fifoed_avalon_uart_txirq (sp, status);
  80f7b8:	e17ffe17 	ldw	r5,-8(fp)
  80f7bc:	e13ffc17 	ldw	r4,-16(fp)
  80f7c0:	080f5780 	call	80f578 <fifoed_avalon_uart_txirq>
  }
}
  80f7c4:	0001883a 	nop
  80f7c8:	e037883a 	mov	sp,fp
  80f7cc:	dfc00117 	ldw	ra,4(sp)
  80f7d0:	df000017 	ldw	fp,0(sp)
  80f7d4:	dec00204 	addi	sp,sp,8
  80f7d8:	f800283a 	ret

0080f7dc <fifoed_avalon_uart_init>:
 * through a call to alt_dev_reg().
 */

void fifoed_avalon_uart_init (fifoed_avalon_uart_state* sp,alt_u32 irq_controller_id,
      alt_u32 irq)
{
  80f7dc:	defff304 	addi	sp,sp,-52
  80f7e0:	dfc00c15 	stw	ra,48(sp)
  80f7e4:	df000b15 	stw	fp,44(sp)
  80f7e8:	df000b04 	addi	fp,sp,44
  80f7ec:	e13ffd15 	stw	r4,-12(fp)
  80f7f0:	e17ffe15 	stw	r5,-8(fp)
  80f7f4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80f7f8:	e0bffd17 	ldw	r2,-12(fp)
  80f7fc:	10800017 	ldw	r2,0(r2)
  80f800:	e0bff615 	stw	r2,-40(fp)
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
  80f804:	e0bffd17 	ldw	r2,-12(fp)
  80f808:	10800704 	addi	r2,r2,28
  80f80c:	e0bffa15 	stw	r2,-24(fp)
  80f810:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80f814:	e0bffb0b 	ldhu	r2,-20(fp)
  80f818:	e0fffc84 	addi	r3,fp,-14
  80f81c:	180b883a 	mov	r5,r3
  80f820:	1009883a 	mov	r4,r2
  80f824:	0806bb00 	call	806bb0 <OSFlagCreate>
  80f828:	1007883a 	mov	r3,r2
  80f82c:	e0bffa17 	ldw	r2,-24(fp)
  80f830:	10c00015 	stw	r3,0(r2)
  return err;
  80f834:	e0bffc83 	ldbu	r2,-14(fp)
  80f838:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
  80f83c:	1000241e 	bne	r2,zero,80f8d0 <fifoed_avalon_uart_init+0xf4>
  80f840:	e0bffd17 	ldw	r2,-12(fp)
  80f844:	10800804 	addi	r2,r2,32
  80f848:	e0bff715 	stw	r2,-36(fp)
  80f84c:	00800044 	movi	r2,1
  80f850:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80f854:	e0bffb8b 	ldhu	r2,-18(fp)
  80f858:	1009883a 	mov	r4,r2
  80f85c:	08098d00 	call	8098d0 <OSSemCreate>
  80f860:	1007883a 	mov	r3,r2
  80f864:	e0bff717 	ldw	r2,-36(fp)
  80f868:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80f86c:	e0bff717 	ldw	r2,-36(fp)
  80f870:	10800017 	ldw	r2,0(r2)
  80f874:	10000226 	beq	r2,zero,80f880 <fifoed_avalon_uart_init+0xa4>
  80f878:	0005883a 	mov	r2,zero
  80f87c:	00000106 	br	80f884 <fifoed_avalon_uart_init+0xa8>
  80f880:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
  80f884:	1000121e 	bne	r2,zero,80f8d0 <fifoed_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  80f888:	e0bffd17 	ldw	r2,-12(fp)
  80f88c:	10800904 	addi	r2,r2,36
  80f890:	e0bff815 	stw	r2,-32(fp)
  80f894:	00800044 	movi	r2,1
  80f898:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80f89c:	e0bffc0b 	ldhu	r2,-16(fp)
  80f8a0:	1009883a 	mov	r4,r2
  80f8a4:	08098d00 	call	8098d0 <OSSemCreate>
  80f8a8:	1007883a 	mov	r3,r2
  80f8ac:	e0bff817 	ldw	r2,-32(fp)
  80f8b0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80f8b4:	e0bff817 	ldw	r2,-32(fp)
  80f8b8:	10800017 	ldw	r2,0(r2)
  80f8bc:	10000226 	beq	r2,zero,80f8c8 <fifoed_avalon_uart_init+0xec>
  80f8c0:	0005883a 	mov	r2,zero
  80f8c4:	00000106 	br	80f8cc <fifoed_avalon_uart_init+0xf0>
  80f8c8:	00bfffc4 	movi	r2,-1
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
  80f8cc:	10000226 	beq	r2,zero,80f8d8 <fifoed_avalon_uart_init+0xfc>
  80f8d0:	00800044 	movi	r2,1
  80f8d4:	00000106 	br	80f8dc <fifoed_avalon_uart_init+0x100>
  80f8d8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
  80f8dc:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80f8e0:	e0bff917 	ldw	r2,-28(fp)
  80f8e4:	10000f1e 	bne	r2,zero,80f924 <fifoed_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */

    sp->ctrl = FIFOED_AVALON_UART_CONTROL_RTS_MSK  |
  80f8e8:	e0bffd17 	ldw	r2,-12(fp)
  80f8ec:	00c32004 	movi	r3,3200
  80f8f0:	10c00115 	stw	r3,4(r2)
                FIFOED_AVALON_UART_CONTROL_RRDY_MSK |
                FIFOED_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_FIFOED_AVALON_UART_CONTROL(base, sp->ctrl);
  80f8f4:	e0bff617 	ldw	r2,-40(fp)
  80f8f8:	10800304 	addi	r2,r2,12
  80f8fc:	e0fffd17 	ldw	r3,-12(fp)
  80f900:	18c00117 	ldw	r3,4(r3)
  80f904:	10c00035 	stwio	r3,0(r2)

    /* register the interrupt handler */

//    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, fifoed_avalon_uart_irq, sp,
  80f908:	d8000015 	stw	zero,0(sp)
  80f90c:	e1fffd17 	ldw	r7,-12(fp)
  80f910:	01802074 	movhi	r6,129
  80f914:	31bdd304 	addi	r6,r6,-2228
  80f918:	e17fff17 	ldw	r5,-4(fp)
  80f91c:	e13ffe17 	ldw	r4,-8(fp)
  80f920:	0803ae80 	call	803ae8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#endif
  }
}
  80f924:	0001883a 	nop
  80f928:	e037883a 	mov	sp,fp
  80f92c:	dfc00117 	ldw	ra,4(sp)
  80f930:	df000017 	ldw	fp,0(sp)
  80f934:	dec00204 	addi	sp,sp,8
  80f938:	f800283a 	ret

0080f93c <fifoed_avalon_uart_classic_read>:
extern int fifoed_avalon_uart_ioctl(fifoed_avalon_uart_state* sp,
  int req, void* arg);

int fifoed_avalon_uart_classic_read(fifoed_avalon_uart_state* sp,
  char* buffer, int space, int flags)
  {
  80f93c:	defffa04 	addi	sp,sp,-24
  80f940:	dfc00515 	stw	ra,20(sp)
  80f944:	df000415 	stw	fp,16(sp)
  80f948:	df000404 	addi	fp,sp,16
  80f94c:	e13ffc15 	stw	r4,-16(fp)
  80f950:	e17ffd15 	stw	r5,-12(fp)
  80f954:	e1bffe15 	stw	r6,-8(fp)
  80f958:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_read( sp,
  80f95c:	e1ffff17 	ldw	r7,-4(fp)
  80f960:	e1bffe17 	ldw	r6,-8(fp)
  80f964:	e17ffd17 	ldw	r5,-12(fp)
  80f968:	e13ffc17 	ldw	r4,-16(fp)
  80f96c:	080ef900 	call	80ef90 <fifoed_avalon_uart_read>
  buffer, space,  flags);
  }
  80f970:	e037883a 	mov	sp,fp
  80f974:	dfc00117 	ldw	ra,4(sp)
  80f978:	df000017 	ldw	fp,0(sp)
  80f97c:	dec00204 	addi	sp,sp,8
  80f980:	f800283a 	ret

0080f984 <fifoed_avalon_uart_classic_write>:

  int fifoed_avalon_uart_classic_write(fifoed_avalon_uart_state* sp,
  const char* ptr, int count, int flags)
  {
  80f984:	defffa04 	addi	sp,sp,-24
  80f988:	dfc00515 	stw	ra,20(sp)
  80f98c:	df000415 	stw	fp,16(sp)
  80f990:	df000404 	addi	fp,sp,16
  80f994:	e13ffc15 	stw	r4,-16(fp)
  80f998:	e17ffd15 	stw	r5,-12(fp)
  80f99c:	e1bffe15 	stw	r6,-8(fp)
  80f9a0:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_write( sp,
  80f9a4:	e1ffff17 	ldw	r7,-4(fp)
  80f9a8:	e1bffe17 	ldw	r6,-8(fp)
  80f9ac:	e17ffd17 	ldw	r5,-12(fp)
  80f9b0:	e13ffc17 	ldw	r4,-16(fp)
  80f9b4:	080f1ec0 	call	80f1ec <fifoed_avalon_uart_write>
  ptr, count,  flags);
  }
  80f9b8:	e037883a 	mov	sp,fp
  80f9bc:	dfc00117 	ldw	ra,4(sp)
  80f9c0:	df000017 	ldw	fp,0(sp)
  80f9c4:	dec00204 	addi	sp,sp,8
  80f9c8:	f800283a 	ret

0080f9cc <fifoed_avalon_uart_read_fd>:
 *
 */

int
fifoed_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f9cc:	defffa04 	addi	sp,sp,-24
  80f9d0:	dfc00515 	stw	ra,20(sp)
  80f9d4:	df000415 	stw	fp,16(sp)
  80f9d8:	df000404 	addi	fp,sp,16
  80f9dc:	e13ffd15 	stw	r4,-12(fp)
  80f9e0:	e17ffe15 	stw	r5,-8(fp)
  80f9e4:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  80f9e8:	e0bffd17 	ldw	r2,-12(fp)
  80f9ec:	10800017 	ldw	r2,0(r2)
  80f9f0:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
  80f9f4:	e0bffc17 	ldw	r2,-16(fp)
  80f9f8:	10c00a04 	addi	r3,r2,40
  80f9fc:	e0bffd17 	ldw	r2,-12(fp)
  80fa00:	10800217 	ldw	r2,8(r2)
  80fa04:	100f883a 	mov	r7,r2
  80fa08:	e1bfff17 	ldw	r6,-4(fp)
  80fa0c:	e17ffe17 	ldw	r5,-8(fp)
  80fa10:	1809883a 	mov	r4,r3
  80fa14:	080ef900 	call	80ef90 <fifoed_avalon_uart_read>
      fd->fd_flags);
}
  80fa18:	e037883a 	mov	sp,fp
  80fa1c:	dfc00117 	ldw	ra,4(sp)
  80fa20:	df000017 	ldw	fp,0(sp)
  80fa24:	dec00204 	addi	sp,sp,8
  80fa28:	f800283a 	ret

0080fa2c <fifoed_avalon_uart_write_fd>:

int
fifoed_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fa2c:	defffa04 	addi	sp,sp,-24
  80fa30:	dfc00515 	stw	ra,20(sp)
  80fa34:	df000415 	stw	fp,16(sp)
  80fa38:	df000404 	addi	fp,sp,16
  80fa3c:	e13ffd15 	stw	r4,-12(fp)
  80fa40:	e17ffe15 	stw	r5,-8(fp)
  80fa44:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  80fa48:	e0bffd17 	ldw	r2,-12(fp)
  80fa4c:	10800017 	ldw	r2,0(r2)
  80fa50:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
  80fa54:	e0bffc17 	ldw	r2,-16(fp)
  80fa58:	10c00a04 	addi	r3,r2,40
  80fa5c:	e0bffd17 	ldw	r2,-12(fp)
  80fa60:	10800217 	ldw	r2,8(r2)
  80fa64:	100f883a 	mov	r7,r2
  80fa68:	e1bfff17 	ldw	r6,-4(fp)
  80fa6c:	e17ffe17 	ldw	r5,-8(fp)
  80fa70:	1809883a 	mov	r4,r3
  80fa74:	080f1ec0 	call	80f1ec <fifoed_avalon_uart_write>
      fd->fd_flags);
}
  80fa78:	e037883a 	mov	sp,fp
  80fa7c:	dfc00117 	ldw	ra,4(sp)
  80fa80:	df000017 	ldw	fp,0(sp)
  80fa84:	dec00204 	addi	sp,sp,8
  80fa88:	f800283a 	ret

0080fa8c <fifoed_avalon_uart_classic_read_fd>:
int
 fifoed_avalon_uart_classic_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fa8c:	defffa04 	addi	sp,sp,-24
  80fa90:	dfc00515 	stw	ra,20(sp)
  80fa94:	df000415 	stw	fp,16(sp)
  80fa98:	df000404 	addi	fp,sp,16
  80fa9c:	e13ffd15 	stw	r4,-12(fp)
  80faa0:	e17ffe15 	stw	r5,-8(fp)
  80faa4:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  80faa8:	e0bffd17 	ldw	r2,-12(fp)
  80faac:	10800017 	ldw	r2,0(r2)
  80fab0:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
  80fab4:	e0bffc17 	ldw	r2,-16(fp)
  80fab8:	10c00a04 	addi	r3,r2,40
  80fabc:	e0bffd17 	ldw	r2,-12(fp)
  80fac0:	10800217 	ldw	r2,8(r2)
  80fac4:	100f883a 	mov	r7,r2
  80fac8:	e1bfff17 	ldw	r6,-4(fp)
  80facc:	e17ffe17 	ldw	r5,-8(fp)
  80fad0:	1809883a 	mov	r4,r3
  80fad4:	080ef900 	call	80ef90 <fifoed_avalon_uart_read>
      fd->fd_flags);
}
  80fad8:	e037883a 	mov	sp,fp
  80fadc:	dfc00117 	ldw	ra,4(sp)
  80fae0:	df000017 	ldw	fp,0(sp)
  80fae4:	dec00204 	addi	sp,sp,8
  80fae8:	f800283a 	ret

0080faec <fifoed_avalon_uart_classic_write_fd>:

int
fifoed_avalon_uart_classic_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80faec:	defffa04 	addi	sp,sp,-24
  80faf0:	dfc00515 	stw	ra,20(sp)
  80faf4:	df000415 	stw	fp,16(sp)
  80faf8:	df000404 	addi	fp,sp,16
  80fafc:	e13ffd15 	stw	r4,-12(fp)
  80fb00:	e17ffe15 	stw	r5,-8(fp)
  80fb04:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  80fb08:	e0bffd17 	ldw	r2,-12(fp)
  80fb0c:	10800017 	ldw	r2,0(r2)
  80fb10:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
  80fb14:	e0bffc17 	ldw	r2,-16(fp)
  80fb18:	10c00a04 	addi	r3,r2,40
  80fb1c:	e0bffd17 	ldw	r2,-12(fp)
  80fb20:	10800217 	ldw	r2,8(r2)
  80fb24:	100f883a 	mov	r7,r2
  80fb28:	e1bfff17 	ldw	r6,-4(fp)
  80fb2c:	e17ffe17 	ldw	r5,-8(fp)
  80fb30:	1809883a 	mov	r4,r3
  80fb34:	080f1ec0 	call	80f1ec <fifoed_avalon_uart_write>
      fd->fd_flags);
}
  80fb38:	e037883a 	mov	sp,fp
  80fb3c:	dfc00117 	ldw	ra,4(sp)
  80fb40:	df000017 	ldw	fp,0(sp)
  80fb44:	dec00204 	addi	sp,sp,8
  80fb48:	f800283a 	ret

0080fb4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80fb4c:	defff504 	addi	sp,sp,-44
  80fb50:	df000a15 	stw	fp,40(sp)
  80fb54:	df000a04 	addi	fp,sp,40
  80fb58:	e13ffc15 	stw	r4,-16(fp)
  80fb5c:	e17ffd15 	stw	r5,-12(fp)
  80fb60:	e1bffe15 	stw	r6,-8(fp)
  80fb64:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80fb68:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80fb6c:	d0a0a717 	ldw	r2,-32100(gp)
  
  if (alt_ticks_per_second ())
  80fb70:	10003c26 	beq	r2,zero,80fc64 <alt_alarm_start+0x118>
  {
    if (alarm)
  80fb74:	e0bffc17 	ldw	r2,-16(fp)
  80fb78:	10003826 	beq	r2,zero,80fc5c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80fb7c:	e0bffc17 	ldw	r2,-16(fp)
  80fb80:	e0fffe17 	ldw	r3,-8(fp)
  80fb84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80fb88:	e0bffc17 	ldw	r2,-16(fp)
  80fb8c:	e0ffff17 	ldw	r3,-4(fp)
  80fb90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb94:	0005303a 	rdctl	r2,status
  80fb98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb9c:	e0fff917 	ldw	r3,-28(fp)
  80fba0:	00bfff84 	movi	r2,-2
  80fba4:	1884703a 	and	r2,r3,r2
  80fba8:	1001703a 	wrctl	status,r2
  
  return context;
  80fbac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80fbb0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80fbb4:	d0a0a817 	ldw	r2,-32096(gp)
      
      current_nticks = alt_nticks();
  80fbb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80fbbc:	e0fffd17 	ldw	r3,-12(fp)
  80fbc0:	e0bff617 	ldw	r2,-40(fp)
  80fbc4:	1885883a 	add	r2,r3,r2
  80fbc8:	10c00044 	addi	r3,r2,1
  80fbcc:	e0bffc17 	ldw	r2,-16(fp)
  80fbd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80fbd4:	e0bffc17 	ldw	r2,-16(fp)
  80fbd8:	10c00217 	ldw	r3,8(r2)
  80fbdc:	e0bff617 	ldw	r2,-40(fp)
  80fbe0:	1880042e 	bgeu	r3,r2,80fbf4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80fbe4:	e0bffc17 	ldw	r2,-16(fp)
  80fbe8:	00c00044 	movi	r3,1
  80fbec:	10c00405 	stb	r3,16(r2)
  80fbf0:	00000206 	br	80fbfc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80fbf4:	e0bffc17 	ldw	r2,-16(fp)
  80fbf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80fbfc:	e0bffc17 	ldw	r2,-16(fp)
  80fc00:	d0e07504 	addi	r3,gp,-32300
  80fc04:	e0fffa15 	stw	r3,-24(fp)
  80fc08:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fc0c:	e0bffb17 	ldw	r2,-20(fp)
  80fc10:	e0fffa17 	ldw	r3,-24(fp)
  80fc14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fc18:	e0bffa17 	ldw	r2,-24(fp)
  80fc1c:	10c00017 	ldw	r3,0(r2)
  80fc20:	e0bffb17 	ldw	r2,-20(fp)
  80fc24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fc28:	e0bffa17 	ldw	r2,-24(fp)
  80fc2c:	10800017 	ldw	r2,0(r2)
  80fc30:	e0fffb17 	ldw	r3,-20(fp)
  80fc34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fc38:	e0bffa17 	ldw	r2,-24(fp)
  80fc3c:	e0fffb17 	ldw	r3,-20(fp)
  80fc40:	10c00015 	stw	r3,0(r2)
  80fc44:	e0bff817 	ldw	r2,-32(fp)
  80fc48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc4c:	e0bff717 	ldw	r2,-36(fp)
  80fc50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80fc54:	0005883a 	mov	r2,zero
  80fc58:	00000306 	br	80fc68 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80fc5c:	00bffa84 	movi	r2,-22
  80fc60:	00000106 	br	80fc68 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80fc64:	00bfde84 	movi	r2,-134
  }
}
  80fc68:	e037883a 	mov	sp,fp
  80fc6c:	df000017 	ldw	fp,0(sp)
  80fc70:	dec00104 	addi	sp,sp,4
  80fc74:	f800283a 	ret

0080fc78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fc78:	defffe04 	addi	sp,sp,-8
  80fc7c:	dfc00115 	stw	ra,4(sp)
  80fc80:	df000015 	stw	fp,0(sp)
  80fc84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fc88:	d0a03f17 	ldw	r2,-32516(gp)
  80fc8c:	10000326 	beq	r2,zero,80fc9c <alt_get_errno+0x24>
  80fc90:	d0a03f17 	ldw	r2,-32516(gp)
  80fc94:	103ee83a 	callr	r2
  80fc98:	00000106 	br	80fca0 <alt_get_errno+0x28>
  80fc9c:	d0a08804 	addi	r2,gp,-32224
}
  80fca0:	e037883a 	mov	sp,fp
  80fca4:	dfc00117 	ldw	ra,4(sp)
  80fca8:	df000017 	ldw	fp,0(sp)
  80fcac:	dec00204 	addi	sp,sp,8
  80fcb0:	f800283a 	ret

0080fcb4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80fcb4:	defffa04 	addi	sp,sp,-24
  80fcb8:	dfc00515 	stw	ra,20(sp)
  80fcbc:	df000415 	stw	fp,16(sp)
  80fcc0:	df000404 	addi	fp,sp,16
  80fcc4:	e13ffe15 	stw	r4,-8(fp)
  80fcc8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80fccc:	e0bffe17 	ldw	r2,-8(fp)
  80fcd0:	10000326 	beq	r2,zero,80fce0 <alt_dev_llist_insert+0x2c>
  80fcd4:	e0bffe17 	ldw	r2,-8(fp)
  80fcd8:	10800217 	ldw	r2,8(r2)
  80fcdc:	1000061e 	bne	r2,zero,80fcf8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80fce0:	080fc780 	call	80fc78 <alt_get_errno>
  80fce4:	1007883a 	mov	r3,r2
  80fce8:	00800584 	movi	r2,22
  80fcec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80fcf0:	00bffa84 	movi	r2,-22
  80fcf4:	00001306 	br	80fd44 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80fcf8:	e0bffe17 	ldw	r2,-8(fp)
  80fcfc:	e0ffff17 	ldw	r3,-4(fp)
  80fd00:	e0fffc15 	stw	r3,-16(fp)
  80fd04:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fd08:	e0bffd17 	ldw	r2,-12(fp)
  80fd0c:	e0fffc17 	ldw	r3,-16(fp)
  80fd10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fd14:	e0bffc17 	ldw	r2,-16(fp)
  80fd18:	10c00017 	ldw	r3,0(r2)
  80fd1c:	e0bffd17 	ldw	r2,-12(fp)
  80fd20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
  80fd28:	10800017 	ldw	r2,0(r2)
  80fd2c:	e0fffd17 	ldw	r3,-12(fp)
  80fd30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fd34:	e0bffc17 	ldw	r2,-16(fp)
  80fd38:	e0fffd17 	ldw	r3,-12(fp)
  80fd3c:	10c00015 	stw	r3,0(r2)

  return 0;  
  80fd40:	0005883a 	mov	r2,zero
}
  80fd44:	e037883a 	mov	sp,fp
  80fd48:	dfc00117 	ldw	ra,4(sp)
  80fd4c:	df000017 	ldw	fp,0(sp)
  80fd50:	dec00204 	addi	sp,sp,8
  80fd54:	f800283a 	ret

0080fd58 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80fd58:	defffd04 	addi	sp,sp,-12
  80fd5c:	dfc00215 	stw	ra,8(sp)
  80fd60:	df000115 	stw	fp,4(sp)
  80fd64:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80fd68:	00802074 	movhi	r2,129
  80fd6c:	10844304 	addi	r2,r2,4364
  80fd70:	e0bfff15 	stw	r2,-4(fp)
  80fd74:	00000606 	br	80fd90 <_do_ctors+0x38>
        (*ctor) (); 
  80fd78:	e0bfff17 	ldw	r2,-4(fp)
  80fd7c:	10800017 	ldw	r2,0(r2)
  80fd80:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80fd84:	e0bfff17 	ldw	r2,-4(fp)
  80fd88:	10bfff04 	addi	r2,r2,-4
  80fd8c:	e0bfff15 	stw	r2,-4(fp)
  80fd90:	e0ffff17 	ldw	r3,-4(fp)
  80fd94:	00802074 	movhi	r2,129
  80fd98:	10844404 	addi	r2,r2,4368
  80fd9c:	18bff62e 	bgeu	r3,r2,80fd78 <__alt_mem_epcs_flash_controller_0+0xff806d78>
        (*ctor) (); 
}
  80fda0:	0001883a 	nop
  80fda4:	e037883a 	mov	sp,fp
  80fda8:	dfc00117 	ldw	ra,4(sp)
  80fdac:	df000017 	ldw	fp,0(sp)
  80fdb0:	dec00204 	addi	sp,sp,8
  80fdb4:	f800283a 	ret

0080fdb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80fdb8:	defffd04 	addi	sp,sp,-12
  80fdbc:	dfc00215 	stw	ra,8(sp)
  80fdc0:	df000115 	stw	fp,4(sp)
  80fdc4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80fdc8:	00802074 	movhi	r2,129
  80fdcc:	10844304 	addi	r2,r2,4364
  80fdd0:	e0bfff15 	stw	r2,-4(fp)
  80fdd4:	00000606 	br	80fdf0 <_do_dtors+0x38>
        (*dtor) (); 
  80fdd8:	e0bfff17 	ldw	r2,-4(fp)
  80fddc:	10800017 	ldw	r2,0(r2)
  80fde0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80fde4:	e0bfff17 	ldw	r2,-4(fp)
  80fde8:	10bfff04 	addi	r2,r2,-4
  80fdec:	e0bfff15 	stw	r2,-4(fp)
  80fdf0:	e0ffff17 	ldw	r3,-4(fp)
  80fdf4:	00802074 	movhi	r2,129
  80fdf8:	10844404 	addi	r2,r2,4368
  80fdfc:	18bff62e 	bgeu	r3,r2,80fdd8 <__alt_mem_epcs_flash_controller_0+0xff806dd8>
        (*dtor) (); 
}
  80fe00:	0001883a 	nop
  80fe04:	e037883a 	mov	sp,fp
  80fe08:	dfc00117 	ldw	ra,4(sp)
  80fe0c:	df000017 	ldw	fp,0(sp)
  80fe10:	dec00204 	addi	sp,sp,8
  80fe14:	f800283a 	ret

0080fe18 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  80fe18:	defffc04 	addi	sp,sp,-16
  80fe1c:	dfc00315 	stw	ra,12(sp)
  80fe20:	df000215 	stw	fp,8(sp)
  80fe24:	df000204 	addi	fp,sp,8
  80fe28:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  80fe2c:	d1607304 	addi	r5,gp,-32308
  80fe30:	e13fff17 	ldw	r4,-4(fp)
  80fe34:	0810af00 	call	810af0 <alt_find_dev>
  80fe38:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  80fe3c:	e0bffe17 	ldw	r2,-8(fp)
  80fe40:	10000926 	beq	r2,zero,80fe68 <alt_flash_open_dev+0x50>
  80fe44:	e0bffe17 	ldw	r2,-8(fp)
  80fe48:	10800317 	ldw	r2,12(r2)
  80fe4c:	10000626 	beq	r2,zero,80fe68 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  80fe50:	e0bffe17 	ldw	r2,-8(fp)
  80fe54:	10800317 	ldw	r2,12(r2)
  80fe58:	e17fff17 	ldw	r5,-4(fp)
  80fe5c:	e13ffe17 	ldw	r4,-8(fp)
  80fe60:	103ee83a 	callr	r2
  80fe64:	00000106 	br	80fe6c <alt_flash_open_dev+0x54>
  }

  return dev;
  80fe68:	e0bffe17 	ldw	r2,-8(fp)
}
  80fe6c:	e037883a 	mov	sp,fp
  80fe70:	dfc00117 	ldw	ra,4(sp)
  80fe74:	df000017 	ldw	fp,0(sp)
  80fe78:	dec00204 	addi	sp,sp,8
  80fe7c:	f800283a 	ret

0080fe80 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  80fe80:	defffd04 	addi	sp,sp,-12
  80fe84:	dfc00215 	stw	ra,8(sp)
  80fe88:	df000115 	stw	fp,4(sp)
  80fe8c:	df000104 	addi	fp,sp,4
  80fe90:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  80fe94:	e0bfff17 	ldw	r2,-4(fp)
  80fe98:	10000826 	beq	r2,zero,80febc <alt_flash_close_dev+0x3c>
  80fe9c:	e0bfff17 	ldw	r2,-4(fp)
  80fea0:	10800417 	ldw	r2,16(r2)
  80fea4:	10000526 	beq	r2,zero,80febc <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  80fea8:	e0bfff17 	ldw	r2,-4(fp)
  80feac:	10800417 	ldw	r2,16(r2)
  80feb0:	e13fff17 	ldw	r4,-4(fp)
  80feb4:	103ee83a 	callr	r2
  }
  return;
  80feb8:	0001883a 	nop
  80febc:	0001883a 	nop
}
  80fec0:	e037883a 	mov	sp,fp
  80fec4:	dfc00117 	ldw	ra,4(sp)
  80fec8:	df000017 	ldw	fp,0(sp)
  80fecc:	dec00204 	addi	sp,sp,8
  80fed0:	f800283a 	ret

0080fed4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  80fed4:	defffc04 	addi	sp,sp,-16
  80fed8:	df000315 	stw	fp,12(sp)
  80fedc:	df000304 	addi	fp,sp,12
  80fee0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  80fee4:	e0bfff17 	ldw	r2,-4(fp)
  80fee8:	10800217 	ldw	r2,8(r2)
  80feec:	1000021e 	bne	r2,zero,80fef8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
  80fef0:	00bffb44 	movi	r2,-19
  80fef4:	00001306 	br	80ff44 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  80fef8:	e0bfff17 	ldw	r2,-4(fp)
  80fefc:	d0e03a04 	addi	r3,gp,-32536
  80ff00:	e0fffd15 	stw	r3,-12(fp)
  80ff04:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ff08:	e0bffe17 	ldw	r2,-8(fp)
  80ff0c:	e0fffd17 	ldw	r3,-12(fp)
  80ff10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80ff14:	e0bffd17 	ldw	r2,-12(fp)
  80ff18:	10c00017 	ldw	r3,0(r2)
  80ff1c:	e0bffe17 	ldw	r2,-8(fp)
  80ff20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ff24:	e0bffd17 	ldw	r2,-12(fp)
  80ff28:	10800017 	ldw	r2,0(r2)
  80ff2c:	e0fffe17 	ldw	r3,-8(fp)
  80ff30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ff34:	e0bffd17 	ldw	r2,-12(fp)
  80ff38:	e0fffe17 	ldw	r3,-8(fp)
  80ff3c:	10c00015 	stw	r3,0(r2)

  return 0;
  80ff40:	0005883a 	mov	r2,zero
} 
  80ff44:	e037883a 	mov	sp,fp
  80ff48:	df000017 	ldw	fp,0(sp)
  80ff4c:	dec00104 	addi	sp,sp,4
  80ff50:	f800283a 	ret

0080ff54 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80ff54:	defffe04 	addi	sp,sp,-8
  80ff58:	df000115 	stw	fp,4(sp)
  80ff5c:	df000104 	addi	fp,sp,4
  80ff60:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80ff64:	e0bfff17 	ldw	r2,-4(fp)
  80ff68:	10bffe84 	addi	r2,r2,-6
  80ff6c:	10c00428 	cmpgeui	r3,r2,16
  80ff70:	18001a1e 	bne	r3,zero,80ffdc <alt_exception_cause_generated_bad_addr+0x88>
  80ff74:	100690ba 	slli	r3,r2,2
  80ff78:	00802074 	movhi	r2,129
  80ff7c:	10bfe304 	addi	r2,r2,-116
  80ff80:	1885883a 	add	r2,r3,r2
  80ff84:	10800017 	ldw	r2,0(r2)
  80ff88:	1000683a 	jmp	r2
  80ff8c:	0080ffcc 	andi	r2,zero,1023
  80ff90:	0080ffcc 	andi	r2,zero,1023
  80ff94:	0080ffdc 	xori	r2,zero,1023
  80ff98:	0080ffdc 	xori	r2,zero,1023
  80ff9c:	0080ffdc 	xori	r2,zero,1023
  80ffa0:	0080ffcc 	andi	r2,zero,1023
  80ffa4:	0080ffd4 	movui	r2,1023
  80ffa8:	0080ffdc 	xori	r2,zero,1023
  80ffac:	0080ffcc 	andi	r2,zero,1023
  80ffb0:	0080ffcc 	andi	r2,zero,1023
  80ffb4:	0080ffdc 	xori	r2,zero,1023
  80ffb8:	0080ffcc 	andi	r2,zero,1023
  80ffbc:	0080ffd4 	movui	r2,1023
  80ffc0:	0080ffdc 	xori	r2,zero,1023
  80ffc4:	0080ffdc 	xori	r2,zero,1023
  80ffc8:	0080ffcc 	andi	r2,zero,1023
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80ffcc:	00800044 	movi	r2,1
  80ffd0:	00000306 	br	80ffe0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80ffd4:	0005883a 	mov	r2,zero
  80ffd8:	00000106 	br	80ffe0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80ffdc:	0005883a 	mov	r2,zero
  }
}
  80ffe0:	e037883a 	mov	sp,fp
  80ffe4:	df000017 	ldw	fp,0(sp)
  80ffe8:	dec00104 	addi	sp,sp,4
  80ffec:	f800283a 	ret

0080fff0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80fff0:	defff804 	addi	sp,sp,-32
  80fff4:	dfc00715 	stw	ra,28(sp)
  80fff8:	df000615 	stw	fp,24(sp)
  80fffc:	dc000515 	stw	r16,20(sp)
  810000:	df000604 	addi	fp,sp,24
  810004:	e13ffb15 	stw	r4,-20(fp)
  810008:	e17ffc15 	stw	r5,-16(fp)
  81000c:	e1bffd15 	stw	r6,-12(fp)
  810010:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  810014:	e1bffe17 	ldw	r6,-8(fp)
  810018:	e17ffd17 	ldw	r5,-12(fp)
  81001c:	e13ffc17 	ldw	r4,-16(fp)
  810020:	08102780 	call	810278 <open>
  810024:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  810028:	e0bffa17 	ldw	r2,-24(fp)
  81002c:	10002216 	blt	r2,zero,8100b8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  810030:	04002074 	movhi	r16,129
  810034:	8406c804 	addi	r16,r16,6944
  810038:	e0bffa17 	ldw	r2,-24(fp)
  81003c:	01400304 	movi	r5,12
  810040:	1009883a 	mov	r4,r2
  810044:	080388c0 	call	80388c <__mulsi3>
  810048:	8085883a 	add	r2,r16,r2
  81004c:	10c00017 	ldw	r3,0(r2)
  810050:	e0bffb17 	ldw	r2,-20(fp)
  810054:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810058:	04002074 	movhi	r16,129
  81005c:	8406c804 	addi	r16,r16,6944
  810060:	e0bffa17 	ldw	r2,-24(fp)
  810064:	01400304 	movi	r5,12
  810068:	1009883a 	mov	r4,r2
  81006c:	080388c0 	call	80388c <__mulsi3>
  810070:	8085883a 	add	r2,r16,r2
  810074:	10800104 	addi	r2,r2,4
  810078:	10c00017 	ldw	r3,0(r2)
  81007c:	e0bffb17 	ldw	r2,-20(fp)
  810080:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  810084:	04002074 	movhi	r16,129
  810088:	8406c804 	addi	r16,r16,6944
  81008c:	e0bffa17 	ldw	r2,-24(fp)
  810090:	01400304 	movi	r5,12
  810094:	1009883a 	mov	r4,r2
  810098:	080388c0 	call	80388c <__mulsi3>
  81009c:	8085883a 	add	r2,r16,r2
  8100a0:	10800204 	addi	r2,r2,8
  8100a4:	10c00017 	ldw	r3,0(r2)
  8100a8:	e0bffb17 	ldw	r2,-20(fp)
  8100ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8100b0:	e13ffa17 	ldw	r4,-24(fp)
  8100b4:	08041840 	call	804184 <alt_release_fd>
  }
} 
  8100b8:	0001883a 	nop
  8100bc:	e6ffff04 	addi	sp,fp,-4
  8100c0:	dfc00217 	ldw	ra,8(sp)
  8100c4:	df000117 	ldw	fp,4(sp)
  8100c8:	dc000017 	ldw	r16,0(sp)
  8100cc:	dec00304 	addi	sp,sp,12
  8100d0:	f800283a 	ret

008100d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8100d4:	defffb04 	addi	sp,sp,-20
  8100d8:	dfc00415 	stw	ra,16(sp)
  8100dc:	df000315 	stw	fp,12(sp)
  8100e0:	df000304 	addi	fp,sp,12
  8100e4:	e13ffd15 	stw	r4,-12(fp)
  8100e8:	e17ffe15 	stw	r5,-8(fp)
  8100ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8100f0:	01c07fc4 	movi	r7,511
  8100f4:	01800044 	movi	r6,1
  8100f8:	e17ffd17 	ldw	r5,-12(fp)
  8100fc:	01002074 	movhi	r4,129
  810100:	2106cb04 	addi	r4,r4,6956
  810104:	080fff00 	call	80fff0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  810108:	01c07fc4 	movi	r7,511
  81010c:	000d883a 	mov	r6,zero
  810110:	e17ffe17 	ldw	r5,-8(fp)
  810114:	01002074 	movhi	r4,129
  810118:	2106c804 	addi	r4,r4,6944
  81011c:	080fff00 	call	80fff0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  810120:	01c07fc4 	movi	r7,511
  810124:	01800044 	movi	r6,1
  810128:	e17fff17 	ldw	r5,-4(fp)
  81012c:	01002074 	movhi	r4,129
  810130:	2106ce04 	addi	r4,r4,6968
  810134:	080fff00 	call	80fff0 <alt_open_fd>
}  
  810138:	0001883a 	nop
  81013c:	e037883a 	mov	sp,fp
  810140:	dfc00117 	ldw	ra,4(sp)
  810144:	df000017 	ldw	fp,0(sp)
  810148:	dec00204 	addi	sp,sp,8
  81014c:	f800283a 	ret

00810150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810150:	defffe04 	addi	sp,sp,-8
  810154:	dfc00115 	stw	ra,4(sp)
  810158:	df000015 	stw	fp,0(sp)
  81015c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810160:	d0a03f17 	ldw	r2,-32516(gp)
  810164:	10000326 	beq	r2,zero,810174 <alt_get_errno+0x24>
  810168:	d0a03f17 	ldw	r2,-32516(gp)
  81016c:	103ee83a 	callr	r2
  810170:	00000106 	br	810178 <alt_get_errno+0x28>
  810174:	d0a08804 	addi	r2,gp,-32224
}
  810178:	e037883a 	mov	sp,fp
  81017c:	dfc00117 	ldw	ra,4(sp)
  810180:	df000017 	ldw	fp,0(sp)
  810184:	dec00204 	addi	sp,sp,8
  810188:	f800283a 	ret

0081018c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81018c:	defffb04 	addi	sp,sp,-20
  810190:	dfc00415 	stw	ra,16(sp)
  810194:	df000315 	stw	fp,12(sp)
  810198:	dc000215 	stw	r16,8(sp)
  81019c:	df000304 	addi	fp,sp,12
  8101a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8101a4:	e0bffe17 	ldw	r2,-8(fp)
  8101a8:	10800217 	ldw	r2,8(r2)
  8101ac:	10d00034 	orhi	r3,r2,16384
  8101b0:	e0bffe17 	ldw	r2,-8(fp)
  8101b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8101b8:	e03ffd15 	stw	zero,-12(fp)
  8101bc:	00002306 	br	81024c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8101c0:	04002074 	movhi	r16,129
  8101c4:	8406c804 	addi	r16,r16,6944
  8101c8:	e0bffd17 	ldw	r2,-12(fp)
  8101cc:	01400304 	movi	r5,12
  8101d0:	1009883a 	mov	r4,r2
  8101d4:	080388c0 	call	80388c <__mulsi3>
  8101d8:	8085883a 	add	r2,r16,r2
  8101dc:	10c00017 	ldw	r3,0(r2)
  8101e0:	e0bffe17 	ldw	r2,-8(fp)
  8101e4:	10800017 	ldw	r2,0(r2)
  8101e8:	1880151e 	bne	r3,r2,810240 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8101ec:	04002074 	movhi	r16,129
  8101f0:	8406c804 	addi	r16,r16,6944
  8101f4:	e0bffd17 	ldw	r2,-12(fp)
  8101f8:	01400304 	movi	r5,12
  8101fc:	1009883a 	mov	r4,r2
  810200:	080388c0 	call	80388c <__mulsi3>
  810204:	8085883a 	add	r2,r16,r2
  810208:	10800204 	addi	r2,r2,8
  81020c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810210:	10000b0e 	bge	r2,zero,810240 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  810214:	01400304 	movi	r5,12
  810218:	e13ffd17 	ldw	r4,-12(fp)
  81021c:	080388c0 	call	80388c <__mulsi3>
  810220:	1007883a 	mov	r3,r2
  810224:	00802074 	movhi	r2,129
  810228:	1086c804 	addi	r2,r2,6944
  81022c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810230:	e0bffe17 	ldw	r2,-8(fp)
  810234:	18800226 	beq	r3,r2,810240 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810238:	00bffcc4 	movi	r2,-13
  81023c:	00000806 	br	810260 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810240:	e0bffd17 	ldw	r2,-12(fp)
  810244:	10800044 	addi	r2,r2,1
  810248:	e0bffd15 	stw	r2,-12(fp)
  81024c:	d0a03e17 	ldw	r2,-32520(gp)
  810250:	1007883a 	mov	r3,r2
  810254:	e0bffd17 	ldw	r2,-12(fp)
  810258:	18bfd92e 	bgeu	r3,r2,8101c0 <__alt_mem_epcs_flash_controller_0+0xff8071c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81025c:	0005883a 	mov	r2,zero
}
  810260:	e6ffff04 	addi	sp,fp,-4
  810264:	dfc00217 	ldw	ra,8(sp)
  810268:	df000117 	ldw	fp,4(sp)
  81026c:	dc000017 	ldw	r16,0(sp)
  810270:	dec00304 	addi	sp,sp,12
  810274:	f800283a 	ret

00810278 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810278:	defff604 	addi	sp,sp,-40
  81027c:	dfc00915 	stw	ra,36(sp)
  810280:	df000815 	stw	fp,32(sp)
  810284:	df000804 	addi	fp,sp,32
  810288:	e13ffd15 	stw	r4,-12(fp)
  81028c:	e17ffe15 	stw	r5,-8(fp)
  810290:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810294:	00bfffc4 	movi	r2,-1
  810298:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  81029c:	00bffb44 	movi	r2,-19
  8102a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8102a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8102a8:	d1603c04 	addi	r5,gp,-32528
  8102ac:	e13ffd17 	ldw	r4,-12(fp)
  8102b0:	0810af00 	call	810af0 <alt_find_dev>
  8102b4:	e0bff815 	stw	r2,-32(fp)
  8102b8:	e0bff817 	ldw	r2,-32(fp)
  8102bc:	1000051e 	bne	r2,zero,8102d4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8102c0:	e13ffd17 	ldw	r4,-12(fp)
  8102c4:	0810b800 	call	810b80 <alt_find_file>
  8102c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8102cc:	00800044 	movi	r2,1
  8102d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8102d4:	e0bff817 	ldw	r2,-32(fp)
  8102d8:	10002b26 	beq	r2,zero,810388 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8102dc:	e13ff817 	ldw	r4,-32(fp)
  8102e0:	0810c880 	call	810c88 <alt_get_fd>
  8102e4:	e0bff915 	stw	r2,-28(fp)
  8102e8:	e0bff917 	ldw	r2,-28(fp)
  8102ec:	1000030e 	bge	r2,zero,8102fc <open+0x84>
    {
      status = index;
  8102f0:	e0bff917 	ldw	r2,-28(fp)
  8102f4:	e0bffa15 	stw	r2,-24(fp)
  8102f8:	00002506 	br	810390 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  8102fc:	01400304 	movi	r5,12
  810300:	e13ff917 	ldw	r4,-28(fp)
  810304:	080388c0 	call	80388c <__mulsi3>
  810308:	1007883a 	mov	r3,r2
  81030c:	00802074 	movhi	r2,129
  810310:	1086c804 	addi	r2,r2,6944
  810314:	1885883a 	add	r2,r3,r2
  810318:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81031c:	e0fffe17 	ldw	r3,-8(fp)
  810320:	00900034 	movhi	r2,16384
  810324:	10bfffc4 	addi	r2,r2,-1
  810328:	1886703a 	and	r3,r3,r2
  81032c:	e0bffc17 	ldw	r2,-16(fp)
  810330:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810334:	e0bffb17 	ldw	r2,-20(fp)
  810338:	1000051e 	bne	r2,zero,810350 <open+0xd8>
  81033c:	e13ffc17 	ldw	r4,-16(fp)
  810340:	081018c0 	call	81018c <alt_file_locked>
  810344:	e0bffa15 	stw	r2,-24(fp)
  810348:	e0bffa17 	ldw	r2,-24(fp)
  81034c:	10001016 	blt	r2,zero,810390 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810350:	e0bff817 	ldw	r2,-32(fp)
  810354:	10800317 	ldw	r2,12(r2)
  810358:	10000826 	beq	r2,zero,81037c <open+0x104>
  81035c:	e0bff817 	ldw	r2,-32(fp)
  810360:	10800317 	ldw	r2,12(r2)
  810364:	e1ffff17 	ldw	r7,-4(fp)
  810368:	e1bffe17 	ldw	r6,-8(fp)
  81036c:	e17ffd17 	ldw	r5,-12(fp)
  810370:	e13ffc17 	ldw	r4,-16(fp)
  810374:	103ee83a 	callr	r2
  810378:	00000106 	br	810380 <open+0x108>
  81037c:	0005883a 	mov	r2,zero
  810380:	e0bffa15 	stw	r2,-24(fp)
  810384:	00000206 	br	810390 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810388:	00bffb44 	movi	r2,-19
  81038c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810390:	e0bffa17 	ldw	r2,-24(fp)
  810394:	1000090e 	bge	r2,zero,8103bc <open+0x144>
  {
    alt_release_fd (index);  
  810398:	e13ff917 	ldw	r4,-28(fp)
  81039c:	08041840 	call	804184 <alt_release_fd>
    ALT_ERRNO = -status;
  8103a0:	08101500 	call	810150 <alt_get_errno>
  8103a4:	1007883a 	mov	r3,r2
  8103a8:	e0bffa17 	ldw	r2,-24(fp)
  8103ac:	0085c83a 	sub	r2,zero,r2
  8103b0:	18800015 	stw	r2,0(r3)
    return -1;
  8103b4:	00bfffc4 	movi	r2,-1
  8103b8:	00000106 	br	8103c0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  8103bc:	e0bff917 	ldw	r2,-28(fp)
}
  8103c0:	e037883a 	mov	sp,fp
  8103c4:	dfc00117 	ldw	ra,4(sp)
  8103c8:	df000017 	ldw	fp,0(sp)
  8103cc:	dec00204 	addi	sp,sp,8
  8103d0:	f800283a 	ret

008103d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8103d4:	defffa04 	addi	sp,sp,-24
  8103d8:	df000515 	stw	fp,20(sp)
  8103dc:	df000504 	addi	fp,sp,20
  8103e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8103e4:	0005303a 	rdctl	r2,status
  8103e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8103ec:	e0fffc17 	ldw	r3,-16(fp)
  8103f0:	00bfff84 	movi	r2,-2
  8103f4:	1884703a 	and	r2,r3,r2
  8103f8:	1001703a 	wrctl	status,r2
  
  return context;
  8103fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  810400:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  810404:	e0bfff17 	ldw	r2,-4(fp)
  810408:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81040c:	e0bffd17 	ldw	r2,-12(fp)
  810410:	10800017 	ldw	r2,0(r2)
  810414:	e0fffd17 	ldw	r3,-12(fp)
  810418:	18c00117 	ldw	r3,4(r3)
  81041c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810420:	e0bffd17 	ldw	r2,-12(fp)
  810424:	10800117 	ldw	r2,4(r2)
  810428:	e0fffd17 	ldw	r3,-12(fp)
  81042c:	18c00017 	ldw	r3,0(r3)
  810430:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810434:	e0bffd17 	ldw	r2,-12(fp)
  810438:	e0fffd17 	ldw	r3,-12(fp)
  81043c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810440:	e0bffd17 	ldw	r2,-12(fp)
  810444:	e0fffd17 	ldw	r3,-12(fp)
  810448:	10c00015 	stw	r3,0(r2)
  81044c:	e0bffb17 	ldw	r2,-20(fp)
  810450:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810454:	e0bffe17 	ldw	r2,-8(fp)
  810458:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81045c:	0001883a 	nop
  810460:	e037883a 	mov	sp,fp
  810464:	df000017 	ldw	fp,0(sp)
  810468:	dec00104 	addi	sp,sp,4
  81046c:	f800283a 	ret

00810470 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810470:	defffb04 	addi	sp,sp,-20
  810474:	dfc00415 	stw	ra,16(sp)
  810478:	df000315 	stw	fp,12(sp)
  81047c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810480:	d0a07517 	ldw	r2,-32300(gp)
  810484:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810488:	d0a0a817 	ldw	r2,-32096(gp)
  81048c:	10800044 	addi	r2,r2,1
  810490:	d0a0a815 	stw	r2,-32096(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810494:	00002e06 	br	810550 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  810498:	e0bffd17 	ldw	r2,-12(fp)
  81049c:	10800017 	ldw	r2,0(r2)
  8104a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8104a4:	e0bffd17 	ldw	r2,-12(fp)
  8104a8:	10800403 	ldbu	r2,16(r2)
  8104ac:	10803fcc 	andi	r2,r2,255
  8104b0:	10000426 	beq	r2,zero,8104c4 <alt_tick+0x54>
  8104b4:	d0a0a817 	ldw	r2,-32096(gp)
  8104b8:	1000021e 	bne	r2,zero,8104c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8104bc:	e0bffd17 	ldw	r2,-12(fp)
  8104c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8104c4:	e0bffd17 	ldw	r2,-12(fp)
  8104c8:	10800217 	ldw	r2,8(r2)
  8104cc:	d0e0a817 	ldw	r3,-32096(gp)
  8104d0:	18801d36 	bltu	r3,r2,810548 <alt_tick+0xd8>
  8104d4:	e0bffd17 	ldw	r2,-12(fp)
  8104d8:	10800403 	ldbu	r2,16(r2)
  8104dc:	10803fcc 	andi	r2,r2,255
  8104e0:	1000191e 	bne	r2,zero,810548 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8104e4:	e0bffd17 	ldw	r2,-12(fp)
  8104e8:	10800317 	ldw	r2,12(r2)
  8104ec:	e0fffd17 	ldw	r3,-12(fp)
  8104f0:	18c00517 	ldw	r3,20(r3)
  8104f4:	1809883a 	mov	r4,r3
  8104f8:	103ee83a 	callr	r2
  8104fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  810500:	e0bfff17 	ldw	r2,-4(fp)
  810504:	1000031e 	bne	r2,zero,810514 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  810508:	e13ffd17 	ldw	r4,-12(fp)
  81050c:	08103d40 	call	8103d4 <alt_alarm_stop>
  810510:	00000d06 	br	810548 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  810514:	e0bffd17 	ldw	r2,-12(fp)
  810518:	10c00217 	ldw	r3,8(r2)
  81051c:	e0bfff17 	ldw	r2,-4(fp)
  810520:	1887883a 	add	r3,r3,r2
  810524:	e0bffd17 	ldw	r2,-12(fp)
  810528:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81052c:	e0bffd17 	ldw	r2,-12(fp)
  810530:	10c00217 	ldw	r3,8(r2)
  810534:	d0a0a817 	ldw	r2,-32096(gp)
  810538:	1880032e 	bgeu	r3,r2,810548 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81053c:	e0bffd17 	ldw	r2,-12(fp)
  810540:	00c00044 	movi	r3,1
  810544:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810548:	e0bffe17 	ldw	r2,-8(fp)
  81054c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810550:	e0fffd17 	ldw	r3,-12(fp)
  810554:	d0a07504 	addi	r2,gp,-32300
  810558:	18bfcf1e 	bne	r3,r2,810498 <__alt_mem_epcs_flash_controller_0+0xff807498>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81055c:	08053980 	call	805398 <OSTimeTick>
}
  810560:	0001883a 	nop
  810564:	e037883a 	mov	sp,fp
  810568:	dfc00117 	ldw	ra,4(sp)
  81056c:	df000017 	ldw	fp,0(sp)
  810570:	dec00204 	addi	sp,sp,8
  810574:	f800283a 	ret

00810578 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  810578:	deffff04 	addi	sp,sp,-4
  81057c:	df000015 	stw	fp,0(sp)
  810580:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  810584:	000170fa 	wrctl	ienable,zero
}
  810588:	0001883a 	nop
  81058c:	e037883a 	mov	sp,fp
  810590:	df000017 	ldw	fp,0(sp)
  810594:	dec00104 	addi	sp,sp,4
  810598:	f800283a 	ret

0081059c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81059c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  8105a0:	d0e03717 	ldw	r3,-32548(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  8105a4:	d120a117 	ldw	r4,-32124(gp)

      stw ra,  0(sp)
  8105a8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  8105ac:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  8105b0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  8105b4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  8105b8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  8105bc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  8105c0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  8105c4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  8105c8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  8105cc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  8105d0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  8105d4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8105d8:	08108100 	call	810810 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  8105dc:	d1209c17 	ldw	r4,-32144(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  8105e0:	d1609407 	ldb	r5,-32176(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  8105e4:	d120a115 	stw	r4,-32124(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  8105e8:	d1609445 	stb	r5,-32175(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  8105ec:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  8105f0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  8105f4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  8105f8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  8105fc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  810600:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  810604:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  810608:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81060c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  810610:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  810614:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  810618:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81061c:	d0e03715 	stw	r3,-32548(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  810620:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  810624:	f800283a 	ret

00810628 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  810628:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81062c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  810630:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  810634:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  810638:	08108100 	call	810810 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81063c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  810640:	d4a09245 	stb	r18,-32183(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  810644:	003fe506 	br	8105dc <__alt_mem_epcs_flash_controller_0+0xff8075dc>

00810648 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  810648:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81064c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  810650:	10800054 	ori	r2,r2,1
      wrctl status, r2
  810654:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  810658:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81065c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  810660:	dec00204 	addi	sp,sp,8

      callr r2
  810664:	103ee83a 	callr	r2

      nop
  810668:	0001883a 	nop

0081066c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81066c:	defff704 	addi	sp,sp,-36
  810670:	dfc00815 	stw	ra,32(sp)
  810674:	df000715 	stw	fp,28(sp)
  810678:	df000704 	addi	fp,sp,28
  81067c:	e13ffc15 	stw	r4,-16(fp)
  810680:	e17ffd15 	stw	r5,-12(fp)
  810684:	e1bffe15 	stw	r6,-8(fp)
  810688:	3805883a 	mov	r2,r7
  81068c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  810690:	e0fffe17 	ldw	r3,-8(fp)
  810694:	00bfff04 	movi	r2,-4
  810698:	1884703a 	and	r2,r3,r2
  81069c:	10bef704 	addi	r2,r2,-1060
  8106a0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  8106a4:	01810904 	movi	r6,1060
  8106a8:	000b883a 	mov	r5,zero
  8106ac:	e13ff917 	ldw	r4,-28(fp)
  8106b0:	080235c0 	call	80235c <memset>
  8106b4:	e0bff917 	ldw	r2,-28(fp)
  8106b8:	10c0bb04 	addi	r3,r2,748
  8106bc:	e0bff917 	ldw	r2,-28(fp)
  8106c0:	10c00115 	stw	r3,4(r2)
  8106c4:	e0bff917 	ldw	r2,-28(fp)
  8106c8:	10c0d504 	addi	r3,r2,852
  8106cc:	e0bff917 	ldw	r2,-28(fp)
  8106d0:	10c00215 	stw	r3,8(r2)
  8106d4:	e0bff917 	ldw	r2,-28(fp)
  8106d8:	10c0ef04 	addi	r3,r2,956
  8106dc:	e0bff917 	ldw	r2,-28(fp)
  8106e0:	10c00315 	stw	r3,12(r2)
  8106e4:	e0fff917 	ldw	r3,-28(fp)
  8106e8:	00802074 	movhi	r2,129
  8106ec:	1084b204 	addi	r2,r2,4808
  8106f0:	18800d15 	stw	r2,52(r3)
  8106f4:	e0bff917 	ldw	r2,-28(fp)
  8106f8:	00c00044 	movi	r3,1
  8106fc:	10c02915 	stw	r3,164(r2)
  810700:	10002a15 	stw	zero,168(r2)
  810704:	e0bff917 	ldw	r2,-28(fp)
  810708:	00ccc384 	movi	r3,13070
  81070c:	10c02b0d 	sth	r3,172(r2)
  810710:	e0bff917 	ldw	r2,-28(fp)
  810714:	00eaf344 	movi	r3,-21555
  810718:	10c02b8d 	sth	r3,174(r2)
  81071c:	e0bff917 	ldw	r2,-28(fp)
  810720:	00c48d04 	movi	r3,4660
  810724:	10c02c0d 	sth	r3,176(r2)
  810728:	e0bff917 	ldw	r2,-28(fp)
  81072c:	00f99b44 	movi	r3,-6547
  810730:	10c02c8d 	sth	r3,178(r2)
  810734:	e0bff917 	ldw	r2,-28(fp)
  810738:	00f7bb04 	movi	r3,-8468
  81073c:	10c02d0d 	sth	r3,180(r2)
  810740:	e0bff917 	ldw	r2,-28(fp)
  810744:	00c00144 	movi	r3,5
  810748:	10c02d8d 	sth	r3,182(r2)
  81074c:	e0bff917 	ldw	r2,-28(fp)
  810750:	00c002c4 	movi	r3,11
  810754:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  810758:	e0bff917 	ldw	r2,-28(fp)
  81075c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  810760:	e0bffa17 	ldw	r2,-24(fp)
  810764:	10bff304 	addi	r2,r2,-52
  810768:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81076c:	e0bffb17 	ldw	r2,-20(fp)
  810770:	10800c04 	addi	r2,r2,48
  810774:	e0fffc17 	ldw	r3,-16(fp)
  810778:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81077c:	e0bffb17 	ldw	r2,-20(fp)
  810780:	10800b04 	addi	r2,r2,44
  810784:	e0fffd17 	ldw	r3,-12(fp)
  810788:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81078c:	e0bffb17 	ldw	r2,-20(fp)
  810790:	10800a04 	addi	r2,r2,40
  810794:	e0fff917 	ldw	r3,-28(fp)
  810798:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81079c:	00802074 	movhi	r2,129
  8107a0:	10819204 	addi	r2,r2,1608
  8107a4:	10c00104 	addi	r3,r2,4
  8107a8:	e0bffb17 	ldw	r2,-20(fp)
  8107ac:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  8107b0:	e0bffb17 	ldw	r2,-20(fp)
}
  8107b4:	e037883a 	mov	sp,fp
  8107b8:	dfc00117 	ldw	ra,4(sp)
  8107bc:	df000017 	ldw	fp,0(sp)
  8107c0:	dec00204 	addi	sp,sp,8
  8107c4:	f800283a 	ret

008107c8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  8107c8:	defffe04 	addi	sp,sp,-8
  8107cc:	df000115 	stw	fp,4(sp)
  8107d0:	df000104 	addi	fp,sp,4
  8107d4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  8107d8:	0001883a 	nop
  8107dc:	e037883a 	mov	sp,fp
  8107e0:	df000017 	ldw	fp,0(sp)
  8107e4:	dec00104 	addi	sp,sp,4
  8107e8:	f800283a 	ret

008107ec <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  8107ec:	defffe04 	addi	sp,sp,-8
  8107f0:	df000115 	stw	fp,4(sp)
  8107f4:	df000104 	addi	fp,sp,4
  8107f8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  8107fc:	0001883a 	nop
  810800:	e037883a 	mov	sp,fp
  810804:	df000017 	ldw	fp,0(sp)
  810808:	dec00104 	addi	sp,sp,4
  81080c:	f800283a 	ret

00810810 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  810810:	deffff04 	addi	sp,sp,-4
  810814:	df000015 	stw	fp,0(sp)
  810818:	d839883a 	mov	fp,sp
}
  81081c:	0001883a 	nop
  810820:	e037883a 	mov	sp,fp
  810824:	df000017 	ldw	fp,0(sp)
  810828:	dec00104 	addi	sp,sp,4
  81082c:	f800283a 	ret

00810830 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  810830:	deffff04 	addi	sp,sp,-4
  810834:	df000015 	stw	fp,0(sp)
  810838:	d839883a 	mov	fp,sp
}
  81083c:	0001883a 	nop
  810840:	e037883a 	mov	sp,fp
  810844:	df000017 	ldw	fp,0(sp)
  810848:	dec00104 	addi	sp,sp,4
  81084c:	f800283a 	ret

00810850 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  810850:	deffff04 	addi	sp,sp,-4
  810854:	df000015 	stw	fp,0(sp)
  810858:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81085c:	0001883a 	nop
  810860:	e037883a 	mov	sp,fp
  810864:	df000017 	ldw	fp,0(sp)
  810868:	dec00104 	addi	sp,sp,4
  81086c:	f800283a 	ret

00810870 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  810870:	deffff04 	addi	sp,sp,-4
  810874:	df000015 	stw	fp,0(sp)
  810878:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81087c:	0001883a 	nop
  810880:	e037883a 	mov	sp,fp
  810884:	df000017 	ldw	fp,0(sp)
  810888:	dec00104 	addi	sp,sp,4
  81088c:	f800283a 	ret

00810890 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  810890:	deffff04 	addi	sp,sp,-4
  810894:	df000015 	stw	fp,0(sp)
  810898:	d839883a 	mov	fp,sp
}
  81089c:	0001883a 	nop
  8108a0:	e037883a 	mov	sp,fp
  8108a4:	df000017 	ldw	fp,0(sp)
  8108a8:	dec00104 	addi	sp,sp,4
  8108ac:	f800283a 	ret

008108b0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  8108b0:	deffff04 	addi	sp,sp,-4
  8108b4:	df000015 	stw	fp,0(sp)
  8108b8:	d839883a 	mov	fp,sp
}
  8108bc:	0001883a 	nop
  8108c0:	e037883a 	mov	sp,fp
  8108c4:	df000017 	ldw	fp,0(sp)
  8108c8:	dec00104 	addi	sp,sp,4
  8108cc:	f800283a 	ret

008108d0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  8108d0:	defffe04 	addi	sp,sp,-8
  8108d4:	df000115 	stw	fp,4(sp)
  8108d8:	df000104 	addi	fp,sp,4
  8108dc:	e13fff15 	stw	r4,-4(fp)
}
  8108e0:	0001883a 	nop
  8108e4:	e037883a 	mov	sp,fp
  8108e8:	df000017 	ldw	fp,0(sp)
  8108ec:	dec00104 	addi	sp,sp,4
  8108f0:	f800283a 	ret

008108f4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  8108f4:	defff404 	addi	sp,sp,-48
  8108f8:	df000b15 	stw	fp,44(sp)
  8108fc:	df000b04 	addi	fp,sp,44
  810900:	e13ffc15 	stw	r4,-16(fp)
  810904:	e17ffd15 	stw	r5,-12(fp)
  810908:	e1bffe15 	stw	r6,-8(fp)
  81090c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  810910:	e0ffff17 	ldw	r3,-4(fp)
  810914:	e0bffe17 	ldw	r2,-8(fp)
  810918:	1885883a 	add	r2,r3,r2
  81091c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  810920:	e0c00217 	ldw	r3,8(fp)
  810924:	e0800117 	ldw	r2,4(fp)
  810928:	1885883a 	add	r2,r3,r2
  81092c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  810930:	e0800117 	ldw	r2,4(fp)
  810934:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  810938:	e0bffe17 	ldw	r2,-8(fp)
  81093c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  810940:	00800044 	movi	r2,1
  810944:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  810948:	e0bffc17 	ldw	r2,-16(fp)
  81094c:	10800504 	addi	r2,r2,20
  810950:	1009883a 	mov	r4,r2
  810954:	00c00044 	movi	r3,1
  810958:	e0bffd17 	ldw	r2,-12(fp)
  81095c:	1884983a 	sll	r2,r3,r2
  810960:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  810964:	e0800317 	ldw	r2,12(fp)
  810968:	1080008c 	andi	r2,r2,2
  81096c:	1000051e 	bne	r2,zero,810984 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  810970:	e0bffc17 	ldw	r2,-16(fp)
  810974:	10800304 	addi	r2,r2,12
  810978:	1007883a 	mov	r3,r2
  81097c:	00810004 	movi	r2,1024
  810980:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  810984:	e0bffc17 	ldw	r2,-16(fp)
  810988:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  81098c:	e0bffc17 	ldw	r2,-16(fp)
  810990:	10800204 	addi	r2,r2,8
  810994:	10800037 	ldwio	r2,0(r2)
  810998:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  81099c:	e0bffa17 	ldw	r2,-24(fp)
  8109a0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  8109a4:	10000226 	beq	r2,zero,8109b0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  8109a8:	e0bff717 	ldw	r2,-36(fp)
  8109ac:	1000031e 	bne	r2,zero,8109bc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  8109b0:	e0bffa17 	ldw	r2,-24(fp)
  8109b4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  8109b8:	103ff426 	beq	r2,zero,81098c <__alt_mem_epcs_flash_controller_0+0xff80798c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  8109bc:	e0bffa17 	ldw	r2,-24(fp)
  8109c0:	1080100c 	andi	r2,r2,64
  8109c4:	10001e26 	beq	r2,zero,810a40 <alt_avalon_spi_command+0x14c>
  8109c8:	e0bff717 	ldw	r2,-36(fp)
  8109cc:	00801c0e 	bge	zero,r2,810a40 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  8109d0:	e0bff717 	ldw	r2,-36(fp)
  8109d4:	10bfffc4 	addi	r2,r2,-1
  8109d8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  8109dc:	e0ffff17 	ldw	r3,-4(fp)
  8109e0:	e0bff817 	ldw	r2,-32(fp)
  8109e4:	18800a2e 	bgeu	r3,r2,810a10 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  8109e8:	e0bffc17 	ldw	r2,-16(fp)
  8109ec:	10800104 	addi	r2,r2,4
  8109f0:	1009883a 	mov	r4,r2
  8109f4:	e0bfff17 	ldw	r2,-4(fp)
  8109f8:	10c00044 	addi	r3,r2,1
  8109fc:	e0ffff15 	stw	r3,-4(fp)
  810a00:	10800003 	ldbu	r2,0(r2)
  810a04:	10803fcc 	andi	r2,r2,255
  810a08:	20800035 	stwio	r2,0(r4)
  810a0c:	00000c06 	br	810a40 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  810a10:	e0bff517 	ldw	r2,-44(fp)
  810a14:	10000826 	beq	r2,zero,810a38 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  810a18:	e0bff517 	ldw	r2,-44(fp)
  810a1c:	10bfffc4 	addi	r2,r2,-1
  810a20:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  810a24:	e0bffc17 	ldw	r2,-16(fp)
  810a28:	10800104 	addi	r2,r2,4
  810a2c:	0007883a 	mov	r3,zero
  810a30:	10c00035 	stwio	r3,0(r2)
  810a34:	00000206 	br	810a40 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  810a38:	00bf0004 	movi	r2,-1024
  810a3c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  810a40:	e0bffa17 	ldw	r2,-24(fp)
  810a44:	1080200c 	andi	r2,r2,128
  810a48:	103fd026 	beq	r2,zero,81098c <__alt_mem_epcs_flash_controller_0+0xff80798c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  810a4c:	e0bffc17 	ldw	r2,-16(fp)
  810a50:	10800037 	ldwio	r2,0(r2)
  810a54:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  810a58:	e0bff617 	ldw	r2,-40(fp)
  810a5c:	10000426 	beq	r2,zero,810a70 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  810a60:	e0bff617 	ldw	r2,-40(fp)
  810a64:	10bfffc4 	addi	r2,r2,-1
  810a68:	e0bff615 	stw	r2,-40(fp)
  810a6c:	00000506 	br	810a84 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  810a70:	e0800217 	ldw	r2,8(fp)
  810a74:	10c00044 	addi	r3,r2,1
  810a78:	e0c00215 	stw	r3,8(fp)
  810a7c:	e0fffb17 	ldw	r3,-20(fp)
  810a80:	10c00005 	stb	r3,0(r2)
      credits++;
  810a84:	e0bff717 	ldw	r2,-36(fp)
  810a88:	10800044 	addi	r2,r2,1
  810a8c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  810a90:	e0bff617 	ldw	r2,-40(fp)
  810a94:	103fbd1e 	bne	r2,zero,81098c <__alt_mem_epcs_flash_controller_0+0xff80798c>
  810a98:	e0c00217 	ldw	r3,8(fp)
  810a9c:	e0bff917 	ldw	r2,-28(fp)
  810aa0:	18bfba1e 	bne	r3,r2,81098c <__alt_mem_epcs_flash_controller_0+0xff80798c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  810aa4:	e0bffc17 	ldw	r2,-16(fp)
  810aa8:	10800204 	addi	r2,r2,8
  810aac:	10800037 	ldwio	r2,0(r2)
  810ab0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  810ab4:	e0bffa17 	ldw	r2,-24(fp)
  810ab8:	1080080c 	andi	r2,r2,32
  810abc:	103ff926 	beq	r2,zero,810aa4 <__alt_mem_epcs_flash_controller_0+0xff807aa4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  810ac0:	e0800317 	ldw	r2,12(fp)
  810ac4:	1080004c 	andi	r2,r2,1
  810ac8:	1000041e 	bne	r2,zero,810adc <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  810acc:	e0bffc17 	ldw	r2,-16(fp)
  810ad0:	10800304 	addi	r2,r2,12
  810ad4:	0007883a 	mov	r3,zero
  810ad8:	10c00035 	stwio	r3,0(r2)

  return read_length;
  810adc:	e0800117 	ldw	r2,4(fp)
}
  810ae0:	e037883a 	mov	sp,fp
  810ae4:	df000017 	ldw	fp,0(sp)
  810ae8:	dec00104 	addi	sp,sp,4
  810aec:	f800283a 	ret

00810af0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810af0:	defffa04 	addi	sp,sp,-24
  810af4:	dfc00515 	stw	ra,20(sp)
  810af8:	df000415 	stw	fp,16(sp)
  810afc:	df000404 	addi	fp,sp,16
  810b00:	e13ffe15 	stw	r4,-8(fp)
  810b04:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810b08:	e0bfff17 	ldw	r2,-4(fp)
  810b0c:	10800017 	ldw	r2,0(r2)
  810b10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810b14:	e13ffe17 	ldw	r4,-8(fp)
  810b18:	0800d300 	call	800d30 <strlen>
  810b1c:	10800044 	addi	r2,r2,1
  810b20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810b24:	00000d06 	br	810b5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810b28:	e0bffc17 	ldw	r2,-16(fp)
  810b2c:	10800217 	ldw	r2,8(r2)
  810b30:	e0fffd17 	ldw	r3,-12(fp)
  810b34:	180d883a 	mov	r6,r3
  810b38:	e17ffe17 	ldw	r5,-8(fp)
  810b3c:	1009883a 	mov	r4,r2
  810b40:	0810dc80 	call	810dc8 <memcmp>
  810b44:	1000021e 	bne	r2,zero,810b50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810b48:	e0bffc17 	ldw	r2,-16(fp)
  810b4c:	00000706 	br	810b6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  810b50:	e0bffc17 	ldw	r2,-16(fp)
  810b54:	10800017 	ldw	r2,0(r2)
  810b58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810b5c:	e0fffc17 	ldw	r3,-16(fp)
  810b60:	e0bfff17 	ldw	r2,-4(fp)
  810b64:	18bff01e 	bne	r3,r2,810b28 <__alt_mem_epcs_flash_controller_0+0xff807b28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810b68:	0005883a 	mov	r2,zero
}
  810b6c:	e037883a 	mov	sp,fp
  810b70:	dfc00117 	ldw	ra,4(sp)
  810b74:	df000017 	ldw	fp,0(sp)
  810b78:	dec00204 	addi	sp,sp,8
  810b7c:	f800283a 	ret

00810b80 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810b80:	defffb04 	addi	sp,sp,-20
  810b84:	dfc00415 	stw	ra,16(sp)
  810b88:	df000315 	stw	fp,12(sp)
  810b8c:	df000304 	addi	fp,sp,12
  810b90:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810b94:	d0a03a17 	ldw	r2,-32536(gp)
  810b98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810b9c:	00003106 	br	810c64 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  810ba0:	e0bffd17 	ldw	r2,-12(fp)
  810ba4:	10800217 	ldw	r2,8(r2)
  810ba8:	1009883a 	mov	r4,r2
  810bac:	0800d300 	call	800d30 <strlen>
  810bb0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  810bb4:	e0bffd17 	ldw	r2,-12(fp)
  810bb8:	10c00217 	ldw	r3,8(r2)
  810bbc:	e0bffe17 	ldw	r2,-8(fp)
  810bc0:	10bfffc4 	addi	r2,r2,-1
  810bc4:	1885883a 	add	r2,r3,r2
  810bc8:	10800003 	ldbu	r2,0(r2)
  810bcc:	10803fcc 	andi	r2,r2,255
  810bd0:	1080201c 	xori	r2,r2,128
  810bd4:	10bfe004 	addi	r2,r2,-128
  810bd8:	10800bd8 	cmpnei	r2,r2,47
  810bdc:	1000031e 	bne	r2,zero,810bec <alt_find_file+0x6c>
    {
      len -= 1;
  810be0:	e0bffe17 	ldw	r2,-8(fp)
  810be4:	10bfffc4 	addi	r2,r2,-1
  810be8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810bec:	e0bffe17 	ldw	r2,-8(fp)
  810bf0:	e0ffff17 	ldw	r3,-4(fp)
  810bf4:	1885883a 	add	r2,r3,r2
  810bf8:	10800003 	ldbu	r2,0(r2)
  810bfc:	10803fcc 	andi	r2,r2,255
  810c00:	1080201c 	xori	r2,r2,128
  810c04:	10bfe004 	addi	r2,r2,-128
  810c08:	10800be0 	cmpeqi	r2,r2,47
  810c0c:	1000081e 	bne	r2,zero,810c30 <alt_find_file+0xb0>
  810c10:	e0bffe17 	ldw	r2,-8(fp)
  810c14:	e0ffff17 	ldw	r3,-4(fp)
  810c18:	1885883a 	add	r2,r3,r2
  810c1c:	10800003 	ldbu	r2,0(r2)
  810c20:	10803fcc 	andi	r2,r2,255
  810c24:	1080201c 	xori	r2,r2,128
  810c28:	10bfe004 	addi	r2,r2,-128
  810c2c:	10000a1e 	bne	r2,zero,810c58 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  810c30:	e0bffd17 	ldw	r2,-12(fp)
  810c34:	10800217 	ldw	r2,8(r2)
  810c38:	e0fffe17 	ldw	r3,-8(fp)
  810c3c:	180d883a 	mov	r6,r3
  810c40:	e17fff17 	ldw	r5,-4(fp)
  810c44:	1009883a 	mov	r4,r2
  810c48:	0810dc80 	call	810dc8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810c4c:	1000021e 	bne	r2,zero,810c58 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810c50:	e0bffd17 	ldw	r2,-12(fp)
  810c54:	00000706 	br	810c74 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  810c58:	e0bffd17 	ldw	r2,-12(fp)
  810c5c:	10800017 	ldw	r2,0(r2)
  810c60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810c64:	e0fffd17 	ldw	r3,-12(fp)
  810c68:	d0a03a04 	addi	r2,gp,-32536
  810c6c:	18bfcc1e 	bne	r3,r2,810ba0 <__alt_mem_epcs_flash_controller_0+0xff807ba0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810c70:	0005883a 	mov	r2,zero
}
  810c74:	e037883a 	mov	sp,fp
  810c78:	dfc00117 	ldw	ra,4(sp)
  810c7c:	df000017 	ldw	fp,0(sp)
  810c80:	dec00204 	addi	sp,sp,8
  810c84:	f800283a 	ret

00810c88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  810c88:	defff804 	addi	sp,sp,-32
  810c8c:	dfc00715 	stw	ra,28(sp)
  810c90:	df000615 	stw	fp,24(sp)
  810c94:	dc000515 	stw	r16,20(sp)
  810c98:	df000604 	addi	fp,sp,24
  810c9c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  810ca0:	00bffa04 	movi	r2,-24
  810ca4:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  810ca8:	d0a08917 	ldw	r2,-32220(gp)
  810cac:	e0bffc15 	stw	r2,-16(fp)
  810cb0:	e03ffd0d 	sth	zero,-12(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  810cb4:	e0bffd0b 	ldhu	r2,-12(fp)
  810cb8:	e0fffd84 	addi	r3,fp,-10
  810cbc:	180d883a 	mov	r6,r3
  810cc0:	100b883a 	mov	r5,r2
  810cc4:	e13ffc17 	ldw	r4,-16(fp)
  810cc8:	0809be80 	call	809be8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810ccc:	e03ffa15 	stw	zero,-24(fp)
  810cd0:	00001d06 	br	810d48 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  810cd4:	04002074 	movhi	r16,129
  810cd8:	8406c804 	addi	r16,r16,6944
  810cdc:	e0bffa17 	ldw	r2,-24(fp)
  810ce0:	01400304 	movi	r5,12
  810ce4:	1009883a 	mov	r4,r2
  810ce8:	080388c0 	call	80388c <__mulsi3>
  810cec:	8085883a 	add	r2,r16,r2
  810cf0:	10800017 	ldw	r2,0(r2)
  810cf4:	1000111e 	bne	r2,zero,810d3c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  810cf8:	04002074 	movhi	r16,129
  810cfc:	8406c804 	addi	r16,r16,6944
  810d00:	e0bffa17 	ldw	r2,-24(fp)
  810d04:	01400304 	movi	r5,12
  810d08:	1009883a 	mov	r4,r2
  810d0c:	080388c0 	call	80388c <__mulsi3>
  810d10:	8085883a 	add	r2,r16,r2
  810d14:	e0fffe17 	ldw	r3,-8(fp)
  810d18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  810d1c:	d0e03e17 	ldw	r3,-32520(gp)
  810d20:	e0bffa17 	ldw	r2,-24(fp)
  810d24:	1880020e 	bge	r3,r2,810d30 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  810d28:	e0bffa17 	ldw	r2,-24(fp)
  810d2c:	d0a03e15 	stw	r2,-32520(gp)
      }
      rc = i;
  810d30:	e0bffa17 	ldw	r2,-24(fp)
  810d34:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  810d38:	00000606 	br	810d54 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810d3c:	e0bffa17 	ldw	r2,-24(fp)
  810d40:	10800044 	addi	r2,r2,1
  810d44:	e0bffa15 	stw	r2,-24(fp)
  810d48:	e0bffa17 	ldw	r2,-24(fp)
  810d4c:	10800810 	cmplti	r2,r2,32
  810d50:	103fe01e 	bne	r2,zero,810cd4 <__alt_mem_epcs_flash_controller_0+0xff807cd4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  810d54:	d0a08917 	ldw	r2,-32220(gp)
  810d58:	1009883a 	mov	r4,r2
  810d5c:	0809f600 	call	809f60 <OSSemPost>

  return rc;
  810d60:	e0bffb17 	ldw	r2,-20(fp)
}
  810d64:	e6ffff04 	addi	sp,fp,-4
  810d68:	dfc00217 	ldw	ra,8(sp)
  810d6c:	df000117 	ldw	fp,4(sp)
  810d70:	dc000017 	ldw	r16,0(sp)
  810d74:	dec00304 	addi	sp,sp,12
  810d78:	f800283a 	ret

00810d7c <atexit>:
  810d7c:	200b883a 	mov	r5,r4
  810d80:	000f883a 	mov	r7,zero
  810d84:	000d883a 	mov	r6,zero
  810d88:	0009883a 	mov	r4,zero
  810d8c:	0810e441 	jmpi	810e44 <__register_exitproc>

00810d90 <exit>:
  810d90:	defffe04 	addi	sp,sp,-8
  810d94:	000b883a 	mov	r5,zero
  810d98:	dc000015 	stw	r16,0(sp)
  810d9c:	dfc00115 	stw	ra,4(sp)
  810da0:	2021883a 	mov	r16,r4
  810da4:	0810f5c0 	call	810f5c <__call_exitprocs>
  810da8:	00802074 	movhi	r2,129
  810dac:	108c1e04 	addi	r2,r2,12408
  810db0:	11000017 	ldw	r4,0(r2)
  810db4:	20800f17 	ldw	r2,60(r4)
  810db8:	10000126 	beq	r2,zero,810dc0 <exit+0x30>
  810dbc:	103ee83a 	callr	r2
  810dc0:	8009883a 	mov	r4,r16
  810dc4:	08110dc0 	call	8110dc <_exit>

00810dc8 <memcmp>:
  810dc8:	01c000c4 	movi	r7,3
  810dcc:	3980192e 	bgeu	r7,r6,810e34 <memcmp+0x6c>
  810dd0:	2144b03a 	or	r2,r4,r5
  810dd4:	11c4703a 	and	r2,r2,r7
  810dd8:	10000f26 	beq	r2,zero,810e18 <memcmp+0x50>
  810ddc:	20800003 	ldbu	r2,0(r4)
  810de0:	28c00003 	ldbu	r3,0(r5)
  810de4:	10c0151e 	bne	r2,r3,810e3c <memcmp+0x74>
  810de8:	31bfff84 	addi	r6,r6,-2
  810dec:	01ffffc4 	movi	r7,-1
  810df0:	00000406 	br	810e04 <memcmp+0x3c>
  810df4:	20800003 	ldbu	r2,0(r4)
  810df8:	28c00003 	ldbu	r3,0(r5)
  810dfc:	31bfffc4 	addi	r6,r6,-1
  810e00:	10c00e1e 	bne	r2,r3,810e3c <memcmp+0x74>
  810e04:	21000044 	addi	r4,r4,1
  810e08:	29400044 	addi	r5,r5,1
  810e0c:	31fff91e 	bne	r6,r7,810df4 <__alt_mem_epcs_flash_controller_0+0xff807df4>
  810e10:	0005883a 	mov	r2,zero
  810e14:	f800283a 	ret
  810e18:	20c00017 	ldw	r3,0(r4)
  810e1c:	28800017 	ldw	r2,0(r5)
  810e20:	18bfee1e 	bne	r3,r2,810ddc <__alt_mem_epcs_flash_controller_0+0xff807ddc>
  810e24:	31bfff04 	addi	r6,r6,-4
  810e28:	21000104 	addi	r4,r4,4
  810e2c:	29400104 	addi	r5,r5,4
  810e30:	39bff936 	bltu	r7,r6,810e18 <__alt_mem_epcs_flash_controller_0+0xff807e18>
  810e34:	303fe91e 	bne	r6,zero,810ddc <__alt_mem_epcs_flash_controller_0+0xff807ddc>
  810e38:	003ff506 	br	810e10 <__alt_mem_epcs_flash_controller_0+0xff807e10>
  810e3c:	10c5c83a 	sub	r2,r2,r3
  810e40:	f800283a 	ret

00810e44 <__register_exitproc>:
  810e44:	defffa04 	addi	sp,sp,-24
  810e48:	dc000315 	stw	r16,12(sp)
  810e4c:	04002074 	movhi	r16,129
  810e50:	840c1e04 	addi	r16,r16,12408
  810e54:	80c00017 	ldw	r3,0(r16)
  810e58:	dc400415 	stw	r17,16(sp)
  810e5c:	dfc00515 	stw	ra,20(sp)
  810e60:	18805217 	ldw	r2,328(r3)
  810e64:	2023883a 	mov	r17,r4
  810e68:	10003726 	beq	r2,zero,810f48 <__register_exitproc+0x104>
  810e6c:	10c00117 	ldw	r3,4(r2)
  810e70:	010007c4 	movi	r4,31
  810e74:	20c00e16 	blt	r4,r3,810eb0 <__register_exitproc+0x6c>
  810e78:	1a000044 	addi	r8,r3,1
  810e7c:	8800221e 	bne	r17,zero,810f08 <__register_exitproc+0xc4>
  810e80:	18c00084 	addi	r3,r3,2
  810e84:	18c7883a 	add	r3,r3,r3
  810e88:	18c7883a 	add	r3,r3,r3
  810e8c:	12000115 	stw	r8,4(r2)
  810e90:	10c7883a 	add	r3,r2,r3
  810e94:	19400015 	stw	r5,0(r3)
  810e98:	0005883a 	mov	r2,zero
  810e9c:	dfc00517 	ldw	ra,20(sp)
  810ea0:	dc400417 	ldw	r17,16(sp)
  810ea4:	dc000317 	ldw	r16,12(sp)
  810ea8:	dec00604 	addi	sp,sp,24
  810eac:	f800283a 	ret
  810eb0:	00800034 	movhi	r2,0
  810eb4:	10800004 	addi	r2,r2,0
  810eb8:	10002626 	beq	r2,zero,810f54 <__register_exitproc+0x110>
  810ebc:	01006404 	movi	r4,400
  810ec0:	d9400015 	stw	r5,0(sp)
  810ec4:	d9800115 	stw	r6,4(sp)
  810ec8:	d9c00215 	stw	r7,8(sp)
  810ecc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  810ed0:	d9400017 	ldw	r5,0(sp)
  810ed4:	d9800117 	ldw	r6,4(sp)
  810ed8:	d9c00217 	ldw	r7,8(sp)
  810edc:	10001d26 	beq	r2,zero,810f54 <__register_exitproc+0x110>
  810ee0:	81000017 	ldw	r4,0(r16)
  810ee4:	10000115 	stw	zero,4(r2)
  810ee8:	02000044 	movi	r8,1
  810eec:	22405217 	ldw	r9,328(r4)
  810ef0:	0007883a 	mov	r3,zero
  810ef4:	12400015 	stw	r9,0(r2)
  810ef8:	20805215 	stw	r2,328(r4)
  810efc:	10006215 	stw	zero,392(r2)
  810f00:	10006315 	stw	zero,396(r2)
  810f04:	883fde26 	beq	r17,zero,810e80 <__alt_mem_epcs_flash_controller_0+0xff807e80>
  810f08:	18c9883a 	add	r4,r3,r3
  810f0c:	2109883a 	add	r4,r4,r4
  810f10:	1109883a 	add	r4,r2,r4
  810f14:	21802215 	stw	r6,136(r4)
  810f18:	01800044 	movi	r6,1
  810f1c:	12406217 	ldw	r9,392(r2)
  810f20:	30cc983a 	sll	r6,r6,r3
  810f24:	4992b03a 	or	r9,r9,r6
  810f28:	12406215 	stw	r9,392(r2)
  810f2c:	21c04215 	stw	r7,264(r4)
  810f30:	01000084 	movi	r4,2
  810f34:	893fd21e 	bne	r17,r4,810e80 <__alt_mem_epcs_flash_controller_0+0xff807e80>
  810f38:	11006317 	ldw	r4,396(r2)
  810f3c:	218cb03a 	or	r6,r4,r6
  810f40:	11806315 	stw	r6,396(r2)
  810f44:	003fce06 	br	810e80 <__alt_mem_epcs_flash_controller_0+0xff807e80>
  810f48:	18805304 	addi	r2,r3,332
  810f4c:	18805215 	stw	r2,328(r3)
  810f50:	003fc606 	br	810e6c <__alt_mem_epcs_flash_controller_0+0xff807e6c>
  810f54:	00bfffc4 	movi	r2,-1
  810f58:	003fd006 	br	810e9c <__alt_mem_epcs_flash_controller_0+0xff807e9c>

00810f5c <__call_exitprocs>:
  810f5c:	defff504 	addi	sp,sp,-44
  810f60:	df000915 	stw	fp,36(sp)
  810f64:	dd400615 	stw	r21,24(sp)
  810f68:	dc800315 	stw	r18,12(sp)
  810f6c:	dfc00a15 	stw	ra,40(sp)
  810f70:	ddc00815 	stw	r23,32(sp)
  810f74:	dd800715 	stw	r22,28(sp)
  810f78:	dd000515 	stw	r20,20(sp)
  810f7c:	dcc00415 	stw	r19,16(sp)
  810f80:	dc400215 	stw	r17,8(sp)
  810f84:	dc000115 	stw	r16,4(sp)
  810f88:	d9000015 	stw	r4,0(sp)
  810f8c:	2839883a 	mov	fp,r5
  810f90:	04800044 	movi	r18,1
  810f94:	057fffc4 	movi	r21,-1
  810f98:	00802074 	movhi	r2,129
  810f9c:	108c1e04 	addi	r2,r2,12408
  810fa0:	12000017 	ldw	r8,0(r2)
  810fa4:	45005217 	ldw	r20,328(r8)
  810fa8:	44c05204 	addi	r19,r8,328
  810fac:	a0001c26 	beq	r20,zero,811020 <__call_exitprocs+0xc4>
  810fb0:	a0800117 	ldw	r2,4(r20)
  810fb4:	15ffffc4 	addi	r23,r2,-1
  810fb8:	b8000d16 	blt	r23,zero,810ff0 <__call_exitprocs+0x94>
  810fbc:	14000044 	addi	r16,r2,1
  810fc0:	8421883a 	add	r16,r16,r16
  810fc4:	8421883a 	add	r16,r16,r16
  810fc8:	84402004 	addi	r17,r16,128
  810fcc:	a463883a 	add	r17,r20,r17
  810fd0:	a421883a 	add	r16,r20,r16
  810fd4:	e0001e26 	beq	fp,zero,811050 <__call_exitprocs+0xf4>
  810fd8:	80804017 	ldw	r2,256(r16)
  810fdc:	e0801c26 	beq	fp,r2,811050 <__call_exitprocs+0xf4>
  810fe0:	bdffffc4 	addi	r23,r23,-1
  810fe4:	843fff04 	addi	r16,r16,-4
  810fe8:	8c7fff04 	addi	r17,r17,-4
  810fec:	bd7ff91e 	bne	r23,r21,810fd4 <__alt_mem_epcs_flash_controller_0+0xff807fd4>
  810ff0:	00800034 	movhi	r2,0
  810ff4:	10800004 	addi	r2,r2,0
  810ff8:	10000926 	beq	r2,zero,811020 <__call_exitprocs+0xc4>
  810ffc:	a0800117 	ldw	r2,4(r20)
  811000:	1000301e 	bne	r2,zero,8110c4 <__call_exitprocs+0x168>
  811004:	a0800017 	ldw	r2,0(r20)
  811008:	10003226 	beq	r2,zero,8110d4 <__call_exitprocs+0x178>
  81100c:	a009883a 	mov	r4,r20
  811010:	98800015 	stw	r2,0(r19)
  811014:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  811018:	9d000017 	ldw	r20,0(r19)
  81101c:	a03fe41e 	bne	r20,zero,810fb0 <__alt_mem_epcs_flash_controller_0+0xff807fb0>
  811020:	dfc00a17 	ldw	ra,40(sp)
  811024:	df000917 	ldw	fp,36(sp)
  811028:	ddc00817 	ldw	r23,32(sp)
  81102c:	dd800717 	ldw	r22,28(sp)
  811030:	dd400617 	ldw	r21,24(sp)
  811034:	dd000517 	ldw	r20,20(sp)
  811038:	dcc00417 	ldw	r19,16(sp)
  81103c:	dc800317 	ldw	r18,12(sp)
  811040:	dc400217 	ldw	r17,8(sp)
  811044:	dc000117 	ldw	r16,4(sp)
  811048:	dec00b04 	addi	sp,sp,44
  81104c:	f800283a 	ret
  811050:	a0800117 	ldw	r2,4(r20)
  811054:	80c00017 	ldw	r3,0(r16)
  811058:	10bfffc4 	addi	r2,r2,-1
  81105c:	15c01426 	beq	r2,r23,8110b0 <__call_exitprocs+0x154>
  811060:	80000015 	stw	zero,0(r16)
  811064:	183fde26 	beq	r3,zero,810fe0 <__alt_mem_epcs_flash_controller_0+0xff807fe0>
  811068:	95c8983a 	sll	r4,r18,r23
  81106c:	a0806217 	ldw	r2,392(r20)
  811070:	a5800117 	ldw	r22,4(r20)
  811074:	2084703a 	and	r2,r4,r2
  811078:	10000b26 	beq	r2,zero,8110a8 <__call_exitprocs+0x14c>
  81107c:	a0806317 	ldw	r2,396(r20)
  811080:	2088703a 	and	r4,r4,r2
  811084:	20000c1e 	bne	r4,zero,8110b8 <__call_exitprocs+0x15c>
  811088:	89400017 	ldw	r5,0(r17)
  81108c:	d9000017 	ldw	r4,0(sp)
  811090:	183ee83a 	callr	r3
  811094:	a0800117 	ldw	r2,4(r20)
  811098:	15bfbf1e 	bne	r2,r22,810f98 <__alt_mem_epcs_flash_controller_0+0xff807f98>
  81109c:	98800017 	ldw	r2,0(r19)
  8110a0:	153fcf26 	beq	r2,r20,810fe0 <__alt_mem_epcs_flash_controller_0+0xff807fe0>
  8110a4:	003fbc06 	br	810f98 <__alt_mem_epcs_flash_controller_0+0xff807f98>
  8110a8:	183ee83a 	callr	r3
  8110ac:	003ff906 	br	811094 <__alt_mem_epcs_flash_controller_0+0xff808094>
  8110b0:	a5c00115 	stw	r23,4(r20)
  8110b4:	003feb06 	br	811064 <__alt_mem_epcs_flash_controller_0+0xff808064>
  8110b8:	89000017 	ldw	r4,0(r17)
  8110bc:	183ee83a 	callr	r3
  8110c0:	003ff406 	br	811094 <__alt_mem_epcs_flash_controller_0+0xff808094>
  8110c4:	a0800017 	ldw	r2,0(r20)
  8110c8:	a027883a 	mov	r19,r20
  8110cc:	1029883a 	mov	r20,r2
  8110d0:	003fb606 	br	810fac <__alt_mem_epcs_flash_controller_0+0xff807fac>
  8110d4:	0005883a 	mov	r2,zero
  8110d8:	003ffb06 	br	8110c8 <__alt_mem_epcs_flash_controller_0+0xff8080c8>

008110dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8110dc:	defffd04 	addi	sp,sp,-12
  8110e0:	df000215 	stw	fp,8(sp)
  8110e4:	df000204 	addi	fp,sp,8
  8110e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8110ec:	d0209245 	stb	zero,-32183(gp)
  8110f0:	e0bfff17 	ldw	r2,-4(fp)
  8110f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8110f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8110fc:	10000226 	beq	r2,zero,811108 <_exit+0x2c>
    ALT_SIM_FAIL();
  811100:	002af070 	cmpltui	zero,zero,43969
  811104:	00000106 	br	81110c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  811108:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81110c:	003fff06 	br	81110c <__alt_mem_epcs_flash_controller_0+0xff80810c>
