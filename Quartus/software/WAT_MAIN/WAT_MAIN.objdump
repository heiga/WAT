
WAT_MAIN.elf:     file format elf32-littlenios2
WAT_MAIN.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x000115e4 memsz 0x000189c0 flags rwx
    LOAD off    0x00013020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00014000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  00014000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f6b4  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001c8  0080f6b4  0080f6b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d68  0080f87c  0080f87c  0001087c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  008115e4  008115e4  000125e4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  008189c0  008189c0  00014000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  00014000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  00014000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00014000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000c28  00000000  00000000  00014028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000225c6  00000000  00000000  00014c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000856f  00000000  00000000  00037216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009b21  00000000  00000000  0003f785  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b74  00000000  00000000  000492a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f53  00000000  00000000  0004be1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004ada  00000000  00000000  0004fd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0005484c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000660  00000000  00000000  00054860  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  000592a2  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000592a8  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000592b4  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000592b5  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000592b6  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000592ba  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000592be  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  000592c2  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  000592cd  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  000592d8  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  000592e3  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  000592f1  2**0
                  CONTENTS, READONLY
 31 .jdi          0000448f  00000000  00000000  000592ff  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00096e7e  00000000  00000000  0005d78e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0080f6b4 l    d  .rodata	00000000 .rodata
0080f87c l    d  .rwdata	00000000 .rwdata
008115e4 l    d  .bss	00000000 .bss
008189c0 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 wat_main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
008002c0 l     F .text	00000008 __fp_unlock
008002d4 l     F .text	0000019c __sinit.part.1
00800470 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080f87c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00802f60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803074 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008030a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00803194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080327c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00803450 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811550 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
008036c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00811554 l     O .rwdata	00000004 lockid
00811604 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00811558 l     O .rwdata	00000004 lockid
0081160c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
008050fc l     F .text	00000048 OS_InitMisc
00805144 l     F .text	0000006c OS_InitRdyList
008052b0 l     F .text	000000e4 OS_InitTCBList
0080501c l     F .text	000000e0 OS_InitEventList
008051b0 l     F .text	00000080 OS_InitTaskIdle
00805230 l     F .text	00000080 OS_InitTaskStat
00805520 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00807230 l     F .text	000000f4 OS_FlagTaskRdy
00806ff0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080b308 l     F .text	00000034 alt_dev_reg
00810250 l     O .rwdata	000000cc epcs_flash_controller_0
0081031c l     O .rwdata	0000106c jtag_uart_0
00811388 l     O .rwdata	000000d0 cam_uart
00811458 l     O .rwdata	000000d0 wifi_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0080b424 l     F .text	00000034 alt_flash_device_register
0080b4ac l     F .text	000003f8 alt_epcs_flash_query
0080b8a4 l     F .text	000000ec alt_epcs_flash_memcmp
0080bc7c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080c1cc l     F .text	000002a4 altera_avalon_jtag_uart_irq
0080c470 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080cc4c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080cfb0 l     F .text	0000009c altera_avalon_uart_irq
0080d04c l     F .text	00000138 altera_avalon_uart_rxirq
0080d184 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080d37c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080d620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0080d8f0 l     F .text	00000038 epcs_test_wip
0080d928 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080dffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080e4f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080e658 l     F .text	0000003c alt_get_errno
0080e694 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00811670 g     O .bss	00000004 alt_instruction_exception_handler
008115a6 g     O .rwdata	00000002 OSTaskNameSize
0080bbf0 g     F .text	0000008c alt_epcs_flash_get_info
00802d30 g     F .text	00000054 _isatty_r
00803394 g     F .text	000000bc alt_main
00800154 g     F .text	000000c0 _puts_r
008188c0 g     O .bss	00000100 alt_irq
00802a58 g     F .text	00000060 _lseek_r
00807a50 g     F .text	000000d8 OS_MemInit
0080b2a8 g     F .text	00000060 OSTimeSet
00803d70 g     F .text	00000610 OSEventPendMulti
008189c0 g       *ABS*	00000000 __alt_heap_start
0080ecd0 g     F .text	00000024 OSTaskCreateHook
0081169c g     O .bss	00002000 task1_stk
0081157e g     O .rwdata	00000002 OSMboxEn
008043d8 g     F .text	0000004c OSIntEnter
0080200c g     F .text	0000005c __sseek
00800620 g     F .text	00000010 __sinit
0081158e g     O .rwdata	00000002 OSQEn
00800478 g     F .text	00000078 __sfmoreglue
00803a44 g     F .text	000000cc __malloc_unlock
0080ed38 g     F .text	00000020 OSTaskStatHook
00811614 g     O .bss	00000001 OSLockNesting
008115cc g     O .rwdata	00000002 OSDataSize
00811615 g     O .bss	00000001 OSRunning
008016f8 g     F .text	0000015c memmove
0080ed78 g     F .text	00000020 OSInitHookBegin
008115c4 g     O .rwdata	00000002 OSTmrSize
00800608 g     F .text	00000018 _cleanup
00811618 g     O .bss	00000004 OSIdleCtr
0080ea80 g     F .text	00000024 altera_nios2_gen2_irq_init
0080eb50 g       .text	00000000 OSStartTsk
00805850 g     F .text	000002d4 OS_TCBInit
0080d964 g     F .text	000000fc epcs_sector_erase
01009000 g     F .entry	00000000 __reset
008115ca g     O .rwdata	00000002 OSTmrWheelTblSize
0081156a g     O .rwdata	00000002 OSEventSize
0081161c g     O .bss	00000001 OSPrioHighRdy
00802cd4 g     F .text	0000005c _fstat_r
0080ecf4 g     F .text	00000024 OSTaskDelHook
008115f0 g     O .bss	00000004 errno
00801f88 g     F .text	00000008 __seofread
0080eb30 g       .text	00000000 OSStartHighRdy
00809d28 g     F .text	000001e4 OSTaskCreateExt
00806b38 g     F .text	00000060 OSFlagPendGetFlagsRdy
008115aa g     O .rwdata	00000002 OSTaskStatStkSize
00805cb4 g     F .text	00000308 OSFlagAccept
00808094 g     F .text	000000b8 OSQFlush
00807b28 g     F .text	00000140 OSQAccept
008115fc g     O .bss	00000004 alt_argv
00819528 g       *ABS*	00000000 _gp
00809b7c g     F .text	000001ac OSTaskCreate
0080968c g     F .text	000004f0 OSTaskChangePrio
00811610 g     O .bss	00000004 alt_heapsem
00805b24 g     F .text	00000190 OSDebugInit
00809f0c g     F .text	00000344 OSTaskDel
008100d0 g     O .rwdata	00000180 alt_fd_list
0081569c g     O .bss	00000370 OSFlagTbl
00804dfc g     F .text	000000b8 OS_EventTaskRemove
0080dba8 g     F .text	0000006c epcs_write_status_register
0080eff8 g     F .text	00000090 alt_find_dev
008015b0 g     F .text	00000148 memcpy
00811594 g     O .rwdata	00000002 OSRdyTblSize
008002c8 g     F .text	0000000c _cleanup_r
0080e5dc g     F .text	0000007c alt_io_redirect
0080f6b4 g       *ABS*	00000000 __DTOR_END__
00800214 g     F .text	00000014 puts
0080f284 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00803b10 g     F .text	00000120 OSEventNameGet
00811578 g     O .rwdata	00000002 OSFlagMax
0080bd88 g     F .text	00000100 alt_epcs_flash_write_block
00804424 g     F .text	000000f8 OSIntExit
008115b2 g     O .rwdata	00000002 OSTCBSize
0081161d g     O .bss	00000001 OSPrioCur
0080c6cc g     F .text	000002bc altera_avalon_jtag_uart_read
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00802e7c g     F .text	00000064 .hidden __udivsi3
008031d0 g     F .text	000000ac isatty
00811598 g     O .rwdata	00000002 OSStkWidth
0081158c g     O .rwdata	00000002 OSPtrSize
0081156c g     O .rwdata	00000002 OSEventTblSize
0080eaa4 g       .text	00000000 OSCtxSw
008115ec g     O .bss	00000004 __malloc_top_pad
00811620 g     O .bss	00000004 OSTCBList
008115f4 g     O .bss	00000004 alt_fd_list_lock
00800670 g     F .text	000004c8 __sfvwrite_r
00815a0c g     O .bss	00000c30 OSMemTbl
00811624 g     O .bss	00000001 OSTickStepState
00801ee0 g     F .text	00000054 _sbrk_r
00811590 g     O .rwdata	00000002 OSQMax
0081663c g     O .bss	00000800 OSTaskStatStk
0080768c g     F .text	000000f0 OSMemNameGet
00811570 g     O .rwdata	00000002 OSFlagEn
00802c74 g     F .text	00000060 _read_r
008115b6 g     O .rwdata	00000002 OSTimeTickHookEn
00808544 g     F .text	00000168 OSQPost
00807324 g     F .text	000000a4 OS_FlagUnlink
00811548 g     O .rwdata	00000004 alt_max_fd
008053e8 g     F .text	00000068 OS_MemCopy
00805450 g     F .text	000000d0 OS_Sched
00802278 g     F .text	000000f0 _fclose_r
0080759c g     F .text	000000f0 OSMemGet
0080a538 g     F .text	000001b4 OSTaskNameSet
008025f4 g     F .text	00000030 fflush
008115e8 g     O .bss	00000004 __malloc_max_sbrked_mem
00811628 g     O .bss	00000004 OSCtxSwCtr
0080ed58 g     F .text	00000020 OSTimeTickHook
0081157a g     O .rwdata	00000002 OSFlagNameSize
00804eb4 g     F .text	00000100 OS_EventTaskRemoveMulti
00804cac g     F .text	00000150 OS_EventTaskWaitMulti
0080bd10 g     F .text	00000078 alt_epcs_flash_erase_block
00811592 g     O .rwdata	00000002 OSQSize
008032b8 g     F .text	000000dc lseek
00808ff4 g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
00811528 g     O .rwdata	00000004 _global_impure_ptr
0080de74 g     F .text	0000005c epcs_exit_4_bytes_mode
0080197c g     F .text	00000564 _realloc_r
0081157c g     O .rwdata	00000002 OSLowestPrio
008189c0 g       *ABS*	00000000 __bss_end
0080e408 g     F .text	000000f0 alt_iic_isr_register
0080edd8 g     F .text	00000024 OSTCBInitHook
008115c2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0080e978 g     F .text	00000108 alt_tick
00811564 g     O .rwdata	00000002 OSEventEn
008115be g     O .rwdata	00000002 OSTmrCfgNameSize
0080ce50 g     F .text	00000160 altera_avalon_uart_init
00800640 g     F .text	00000018 __fp_lock_all
0080e3bc g     F .text	0000004c alt_ic_irq_enabled
00807150 g     F .text	000000e0 OS_FlagInit
0080e8dc g     F .text	0000009c alt_alarm_stop
008115a0 g     O .rwdata	00000002 OSTaskIdleStkSize
00811664 g     O .bss	00000004 alt_irq_active
00808c2c g     F .text	000000b0 OSSemAccept
00807890 g     F .text	000000d8 OSMemPut
008073c8 g     F .text	000001d4 OSMemCreate
0081162c g     O .bss	00000004 OSIdleCtrMax
010040fc g     F .exceptions	000000d4 alt_irq_handler
008100a8 g     O .rwdata	00000028 alt_dev_null
008115b4 g     O .rwdata	00000002 OSTicksPerSec
0080eaa4 g       .text	00000000 OSIntCtxSw
00811630 g     O .bss	00000004 OSTCBFreeList
00809200 g     F .text	0000016c OSSemPendAbort
00811540 g     O .rwdata	00000008 alt_dev_list
00803700 g     F .text	00000100 write
008115b8 g     O .rwdata	00000002 OSVersionNbr
008030dc g     F .text	000000b8 fstat
00811560 g     O .rwdata	00000004 OSEndiannessTest
00802ee0 g     F .text	00000058 .hidden __umodsi3
0080dd30 g     F .text	00000068 epcs_read_electronic_signature
00811572 g     O .rwdata	00000002 OSFlagGrpSize
008189c0 g       *ABS*	00000000 end
0080d65c g     F .text	00000238 altera_avalon_uart_write
0080c084 g     F .text	00000148 altera_avalon_jtag_uart_init
008056b8 g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0080f6b4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ccc4 g     F .text	0000007c alt_avalon_timer_sc_init
0080cda0 g     F .text	00000060 altera_avalon_uart_write_fd
0080ce00 g     F .text	00000050 altera_avalon_uart_close_fd
0080c988 g     F .text	000002c4 altera_avalon_jtag_uart_write
00800630 g     F .text	00000004 __sfp_lock_acquire
008014cc g     F .text	000000e4 memchr
00805394 g     F .text	00000054 OS_MemClr
0080eb74 g     F .text	0000015c OSTaskStkInit
00800038 g     F .text	00000038 task1
00802748 g     F .text	00000310 _free_r
00804a04 g     F .text	00000198 OS_EventTaskRdy
0080f500 g     F .text	00000180 __call_exitprocs
00811634 g     O .bss	00000001 OSCPUUsage
00811530 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
00800070 g     F .text	00000038 task2
00811668 g     O .bss	00000004 _alt_tick_rate
0080814c g     F .text	0000028c OSQPend
0080adf8 g     F .text	00000104 OSTimeDly
0080edfc g     F .text	000001fc alt_avalon_spi_command
0081166c g     O .bss	00000004 _alt_nticks
0080348c g     F .text	00000104 read
0080b374 g     F .text	000000b0 alt_sys_init
0080f3e8 g     F .text	00000118 __register_exitproc
00811635 g     O .bss	00000001 OSTaskCtr
0080aefc g     F .text	0000017c OSTimeDlyHMSM
0080c574 g     F .text	00000068 altera_avalon_jtag_uart_close
00802f38 g     F .text	00000028 .hidden __mulsi3
00811674 g     O .bss	00000028 __malloc_current_mallinfo
00811566 g     O .rwdata	00000002 OSEventMax
0080936c g     F .text	00000110 OSSemPost
0080d894 g     F .text	0000005c epcs_read_status_register
008045a8 g     F .text	000000dc OSSchedUnlock
0080bf20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080f190 g     F .text	000000f4 alt_get_fd
00811638 g     O .bss	00000004 OSMemFreeList
008046f4 g     F .text	000000b0 OSStatInit
00806f2c g     F .text	000000c4 OSFlagQuery
0081159c g     O .rwdata	00000002 OSTaskCreateExtEn
00802224 g     F .text	00000054 _close_r
0080dd98 g     F .text	00000080 epcs_read_device_id
0080f36c g     F .text	0000007c memcmp
008049e4 g     F .text	00000020 OS_Dummy
0080bfe0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008189c0 g       *ABS*	00000000 __alt_stack_base
0080c030 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
008020d0 g     F .text	00000154 __swsetup_r
00816e3c g     O .bss	000001e0 OSQTbl
008004f0 g     F .text	00000118 __sfp
0080fca0 g     O .rwdata	00000408 __malloc_av_
0080063c g     F .text	00000004 __sinit_lock_release
0081163c g     O .bss	00000004 OSTCBHighRdy
00801f34 g     F .text	00000054 __sread
00811640 g     O .bss	00000004 OSQFreeList
0080f088 g     F .text	00000108 alt_find_file
0080e038 g     F .text	000000a4 alt_dev_llist_insert
00803924 g     F .text	00000120 __malloc_lock
00803614 g     F .text	000000b0 sbrk
00803c30 g     F .text	00000140 OSEventNameSet
00802598 g     F .text	0000005c _fflush_r
00811644 g     O .bss	00000001 OSRdyGrp
008115d0 g     O .rwdata	00000008 alt_flash_dev_list
008115e4 g       *ABS*	00000000 __bss_start
00801854 g     F .text	00000128 memset
008000a8 g     F .text	000000ac main
00811600 g     O .bss	00000004 alt_envp
008115e4 g     O .bss	00000004 __malloc_max_total_mem
0080bf80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080f704 g     O .rodata	00000100 OSUnMapTbl
00811596 g     O .rwdata	00000002 OSSemEn
00806b98 g     F .text	00000394 OSFlagPost
00802068 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802368 g     F .text	00000014 fclose
00804b9c g     F .text	00000110 OS_EventTaskWait
0081369c g     O .bss	00002000 task2_stk
00805784 g     F .text	000000cc OS_TaskStatStkChk
0080a250 g     F .text	00000150 OSTaskDelReq
00800cc0 g     F .text	0000080c _malloc_r
0081154c g     O .rwdata	00000004 alt_errno
00804684 g     F .text	00000070 OSStart
008038c4 g     F .text	00000060 __env_unlock
00800b38 g     F .text	000000c4 _fwalk
0080a6ec g     F .text	000001d4 OSTaskResume
00807968 g     F .text	000000e8 OSMemQuery
008115a8 g     O .rwdata	00000002 OSTaskStatEn
00811582 g     O .rwdata	00000002 OSMemMax
008086ac g     F .text	00000170 OSQPostFront
00802d84 g     F .text	00000084 .hidden __divsi3
00811645 g     O .bss	00000003 OSRdyTbl
0081155c g     O .rwdata	00000002 OSDebugEn
00802624 g     F .text	00000124 _malloc_trim_r
0080f6b4 g       *ABS*	00000000 __CTOR_END__
00811574 g     O .rwdata	00000002 OSFlagNodeSize
008115bc g     O .rwdata	00000002 OSTmrCfgMax
0080b990 g     F .text	00000260 alt_epcs_flash_write
00807c68 g     F .text	000001ac OSQCreate
0080a3a0 g     F .text	00000198 OSTaskNameGet
0080881c g     F .text	0000020c OSQPostOpt
008047a4 g     F .text	00000220 OSTimeTick
008115a4 g     O .rwdata	00000002 OSTaskMax
0080f6b4 g       *ABS*	00000000 __DTOR_LIST__
00808cdc g     F .text	000000d8 OSSemCreate
008115c8 g     O .rwdata	00000002 OSTmrWheelSize
0081159e g     O .rwdata	00000002 OSTaskDelEn
0080947c g     F .text	00000110 OSSemQuery
00807e14 g     F .text	00000280 OSQDel
008083d8 g     F .text	0000016c OSQPendAbort
0080b33c g     F .text	00000038 alt_irq_init
00803590 g     F .text	00000084 alt_release_fd
0080f320 g     F .text	00000014 atexit
00802070 g     F .text	00000060 _write_r
0080451c g     F .text	0000008c OSSchedLock
00805fbc g     F .text	00000108 OSFlagCreate
0081152c g     O .rwdata	00000004 _impure_ptr
008115f8 g     O .bss	00000004 alt_argc
0080237c g     F .text	0000021c __sflush_r
0080e13c g     F .text	00000060 _do_dtors
0081156e g     O .rwdata	00000002 OSEventMultiEn
008060c4 g     F .text	00000248 OSFlagDel
00811648 g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
00806580 g     F .text	000005b8 OSFlagPend
008115ba g     O .rwdata	00000002 OSTmrEn
00800658 g     F .text	00000018 __fp_unlock_all
00811538 g     O .rwdata	00000008 alt_fs_list
00805594 g     F .text	00000074 OS_StrCopy
00811584 g     O .rwdata	00000002 OSMemNameSize
0080ed98 g     F .text	00000020 OSInitHookEnd
008115b0 g     O .rwdata	00000002 OSTCBPrioTblMax
0080da60 g     F .text	000000f4 epcs_read_buffer
008115ac g     O .rwdata	00000002 OSTaskStatStkChkEn
0080b458 g     F .text	00000054 alt_epcs_flash_init
0080e258 g     F .text	00000050 alt_ic_isr_register
00811580 g     O .rwdata	00000002 OSMemEn
0081158a g     O .rwdata	00000002 OSMutexEn
008115e4 g       *ABS*	00000000 _edata
0080cd40 g     F .text	00000060 altera_avalon_uart_read_fd
008189c0 g       *ABS*	00000000 _end
0080e19c g     F .text	00000068 alt_flash_open_dev
0081164c g     O .bss	00000001 OSIntNesting
0080c5dc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080b078 g     F .text	000001d4 OSTimeDlyResume
00806434 g     F .text	0000014c OSFlagNameSet
0080a8c0 g     F .text	000001c0 OSTaskStkChk
0080e330 g     F .text	0000008c alt_ic_irq_disable
0080de18 g     F .text	0000005c epcs_enter_4_bytes_mode
00811586 g     O .rwdata	00000002 OSMemSize
00801f90 g     F .text	0000007c __swrite
00811534 g     O .rwdata	00000004 __malloc_trim_threshold
00811650 g     O .bss	00000004 OSTCBCur
0080f334 g     F .text	00000038 exit
00811588 g     O .rwdata	00000002 OSMemTblSize
00800bfc g     F .text	000000c4 _fwalk_reent
0080e204 g     F .text	00000054 alt_flash_close_dev
00802e08 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00800634 g     F .text	00000004 __sfp_lock_release
00804380 g     F .text	00000058 OSInit
0080ac64 g     F .text	00000124 OSTaskQuery
00808b84 g     F .text	000000a8 OS_QInit
00805608 g     F .text	00000054 OS_StrLen
0080777c g     F .text	00000114 OSMemNameSet
008115a2 g     O .rwdata	00000002 OSTaskProfileEn
00811654 g     O .bss	00000004 OSTime
0080d328 g     F .text	00000054 altera_avalon_uart_close
0081701c g     O .bss	00000800 OSTaskIdleStk
0080f680 g     F .text	00000034 _exit
0080ded0 g     F .text	0000012c alt_alarm_start
0080630c g     F .text	00000128 OSFlagNameGet
0080b24c g     F .text	0000005c OSTimeGet
00802ab8 g     F .text	000001bc __smakebuf_r
00800228 g     F .text	00000098 strlen
0080db54 g     F .text	00000054 epcs_write_enable
0080ed18 g     F .text	00000020 OSTaskSwHook
0080e780 g     F .text	0000015c open
0081781c g     O .bss	00000b40 OSEventTbl
0081835c g     O .bss	00000510 OSTCBTbl
0080958c g     F .text	00000100 OSSemSet
008115d8 g     O .rwdata	00000004 alt_priority_mask
00808db4 g     F .text	00000240 OSSemDel
00811658 g     O .bss	00000004 OSFlagFreeList
0080e2a8 g     F .text	00000088 alt_ic_irq_enable
00811568 g     O .rwdata	00000002 OSEventNameSize
0081165c g     O .bss	00000001 OSStatRdy
0081886c g     O .bss	00000054 OSTCBPrioTbl
0080d3b8 g     F .text	00000268 altera_avalon_uart_read
00803800 g     F .text	000000c4 __env_lock
008115ae g     O .rwdata	00000002 OSTaskSwHookEn
0080be88 g     F .text	00000098 alt_epcs_flash_read
008115dc g     O .rwdata	00000008 alt_alarm_list
00811576 g     O .rwdata	00000002 OSFlagWidth
0080e0dc g     F .text	00000060 _do_ctors
00802f9c g     F .text	000000d8 close
00811608 g     O .bss	00000004 alt_envsem
00811660 g     O .bss	00000004 OSIdleCtrRun
008049c4 g     F .text	00000020 OSVersion
008115c0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080ad88 g     F .text	00000070 OS_TaskStkClr
0081159a g     O .rwdata	00000002 OSTaskCreateEn
00804fb4 g     F .text	00000068 OS_EventWaitListInit
0080edb8 g     F .text	00000020 OSTaskIdleHook
00800638 g     F .text	00000004 __sinit_lock_acquire
0080dc14 g     F .text	0000011c epcs_write_buffer
0080aa80 g     F .text	000001e4 OSTaskSuspend
0080565c g     F .text	0000005c OS_TaskIdle
008115c6 g     O .rwdata	00000002 OSTmrTblSize
00808a28 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	08043d80 	call	8043d8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	008020b4 	movhi	r2,130
 1004140:	10a23004 	addi	r2,r2,-30528
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	008020b4 	movhi	r2,130
 1004158:	10a23004 	addi	r2,r2,-30528
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	08044240 	call	804424 <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a05217 	ldw	r2,-32440(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a05217 	ldw	r2,-32440(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80000c:	d6a54a14 	ori	gp,gp,38184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	10857914 	ori	r2,r2,5604

    movhi r3, %hi(__bss_end)
  800018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80001c:	18e27014 	ori	r3,r3,35264

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	08033940 	call	803394 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  800038:	defffd04 	addi	sp,sp,-12
  80003c:	dfc00215 	stw	ra,8(sp)
  800040:	df000115 	stw	fp,4(sp)
  800044:	df000104 	addi	fp,sp,4
  800048:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
  80004c:	01002074 	movhi	r4,129
  800050:	213dad04 	addi	r4,r4,-2380
  800054:	08002140 	call	800214 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
  800058:	000f883a 	mov	r7,zero
  80005c:	018000c4 	movi	r6,3
  800060:	000b883a 	mov	r5,zero
  800064:	0009883a 	mov	r4,zero
  800068:	080aefc0 	call	80aefc <OSTimeDlyHMSM>
  }
  80006c:	003ff706 	br	80004c <__alt_mem_epcs_flash_controller_0+0xff7f704c>

00800070 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  800070:	defffd04 	addi	sp,sp,-12
  800074:	dfc00215 	stw	ra,8(sp)
  800078:	df000115 	stw	fp,4(sp)
  80007c:	df000104 	addi	fp,sp,4
  800080:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
  800084:	01002074 	movhi	r4,129
  800088:	213db204 	addi	r4,r4,-2360
  80008c:	08002140 	call	800214 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
  800090:	000f883a 	mov	r7,zero
  800094:	018000c4 	movi	r6,3
  800098:	000b883a 	mov	r5,zero
  80009c:	0009883a 	mov	r4,zero
  8000a0:	080aefc0 	call	80aefc <OSTimeDlyHMSM>
  }
  8000a4:	003ff706 	br	800084 <__alt_mem_epcs_flash_controller_0+0xff7f7084>

008000a8 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  8000a8:	defff904 	addi	sp,sp,-28
  8000ac:	dfc00615 	stw	ra,24(sp)
  8000b0:	df000515 	stw	fp,20(sp)
  8000b4:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
  8000b8:	d8000415 	stw	zero,16(sp)
  8000bc:	d8000315 	stw	zero,12(sp)
  8000c0:	00820004 	movi	r2,2048
  8000c4:	d8800215 	stw	r2,8(sp)
  8000c8:	00802074 	movhi	r2,129
  8000cc:	1085a704 	addi	r2,r2,5788
  8000d0:	d8800115 	stw	r2,4(sp)
  8000d4:	00800044 	movi	r2,1
  8000d8:	d8800015 	stw	r2,0(sp)
  8000dc:	01c00044 	movi	r7,1
  8000e0:	01802074 	movhi	r6,129
  8000e4:	318da604 	addi	r6,r6,13976
  8000e8:	000b883a 	mov	r5,zero
  8000ec:	01002034 	movhi	r4,128
  8000f0:	21000e04 	addi	r4,r4,56
  8000f4:	0809d280 	call	809d28 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
  8000f8:	d8000415 	stw	zero,16(sp)
  8000fc:	d8000315 	stw	zero,12(sp)
  800100:	00820004 	movi	r2,2048
  800104:	d8800215 	stw	r2,8(sp)
  800108:	00802074 	movhi	r2,129
  80010c:	108da704 	addi	r2,r2,13980
  800110:	d8800115 	stw	r2,4(sp)
  800114:	00800084 	movi	r2,2
  800118:	d8800015 	stw	r2,0(sp)
  80011c:	01c00084 	movi	r7,2
  800120:	01802074 	movhi	r6,129
  800124:	3195a604 	addi	r6,r6,22168
  800128:	000b883a 	mov	r5,zero
  80012c:	01002034 	movhi	r4,128
  800130:	21001c04 	addi	r4,r4,112
  800134:	0809d280 	call	809d28 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  800138:	08046840 	call	804684 <OSStart>
  return 0;
  80013c:	0005883a 	mov	r2,zero
}
  800140:	e037883a 	mov	sp,fp
  800144:	dfc00117 	ldw	ra,4(sp)
  800148:	df000017 	ldw	fp,0(sp)
  80014c:	dec00204 	addi	sp,sp,8
  800150:	f800283a 	ret

00800154 <_puts_r>:
  800154:	defff604 	addi	sp,sp,-40
  800158:	dc000715 	stw	r16,28(sp)
  80015c:	2021883a 	mov	r16,r4
  800160:	2809883a 	mov	r4,r5
  800164:	dc400815 	stw	r17,32(sp)
  800168:	dfc00915 	stw	ra,36(sp)
  80016c:	2823883a 	mov	r17,r5
  800170:	08002280 	call	800228 <strlen>
  800174:	10c00044 	addi	r3,r2,1
  800178:	d8800115 	stw	r2,4(sp)
  80017c:	00802074 	movhi	r2,129
  800180:	10bdb704 	addi	r2,r2,-2340
  800184:	d8800215 	stw	r2,8(sp)
  800188:	00800044 	movi	r2,1
  80018c:	d8800315 	stw	r2,12(sp)
  800190:	00800084 	movi	r2,2
  800194:	dc400015 	stw	r17,0(sp)
  800198:	d8c00615 	stw	r3,24(sp)
  80019c:	dec00415 	stw	sp,16(sp)
  8001a0:	d8800515 	stw	r2,20(sp)
  8001a4:	80000226 	beq	r16,zero,8001b0 <_puts_r+0x5c>
  8001a8:	80800e17 	ldw	r2,56(r16)
  8001ac:	10001426 	beq	r2,zero,800200 <_puts_r+0xac>
  8001b0:	81400217 	ldw	r5,8(r16)
  8001b4:	2880030b 	ldhu	r2,12(r5)
  8001b8:	10c8000c 	andi	r3,r2,8192
  8001bc:	1800061e 	bne	r3,zero,8001d8 <_puts_r+0x84>
  8001c0:	29001917 	ldw	r4,100(r5)
  8001c4:	00f7ffc4 	movi	r3,-8193
  8001c8:	10880014 	ori	r2,r2,8192
  8001cc:	20c6703a 	and	r3,r4,r3
  8001d0:	2880030d 	sth	r2,12(r5)
  8001d4:	28c01915 	stw	r3,100(r5)
  8001d8:	d9800404 	addi	r6,sp,16
  8001dc:	8009883a 	mov	r4,r16
  8001e0:	08006700 	call	800670 <__sfvwrite_r>
  8001e4:	1000091e 	bne	r2,zero,80020c <_puts_r+0xb8>
  8001e8:	00800284 	movi	r2,10
  8001ec:	dfc00917 	ldw	ra,36(sp)
  8001f0:	dc400817 	ldw	r17,32(sp)
  8001f4:	dc000717 	ldw	r16,28(sp)
  8001f8:	dec00a04 	addi	sp,sp,40
  8001fc:	f800283a 	ret
  800200:	8009883a 	mov	r4,r16
  800204:	08006200 	call	800620 <__sinit>
  800208:	003fe906 	br	8001b0 <__alt_mem_epcs_flash_controller_0+0xff7f71b0>
  80020c:	00bfffc4 	movi	r2,-1
  800210:	003ff606 	br	8001ec <__alt_mem_epcs_flash_controller_0+0xff7f71ec>

00800214 <puts>:
  800214:	00802074 	movhi	r2,129
  800218:	10854b04 	addi	r2,r2,5420
  80021c:	200b883a 	mov	r5,r4
  800220:	11000017 	ldw	r4,0(r2)
  800224:	08001541 	jmpi	800154 <_puts_r>

00800228 <strlen>:
  800228:	208000cc 	andi	r2,r4,3
  80022c:	10002026 	beq	r2,zero,8002b0 <strlen+0x88>
  800230:	20800007 	ldb	r2,0(r4)
  800234:	10002026 	beq	r2,zero,8002b8 <strlen+0x90>
  800238:	2005883a 	mov	r2,r4
  80023c:	00000206 	br	800248 <strlen+0x20>
  800240:	10c00007 	ldb	r3,0(r2)
  800244:	18001826 	beq	r3,zero,8002a8 <strlen+0x80>
  800248:	10800044 	addi	r2,r2,1
  80024c:	10c000cc 	andi	r3,r2,3
  800250:	183ffb1e 	bne	r3,zero,800240 <__alt_mem_epcs_flash_controller_0+0xff7f7240>
  800254:	10c00017 	ldw	r3,0(r2)
  800258:	01ffbff4 	movhi	r7,65279
  80025c:	39ffbfc4 	addi	r7,r7,-257
  800260:	00ca303a 	nor	r5,zero,r3
  800264:	01a02074 	movhi	r6,32897
  800268:	19c7883a 	add	r3,r3,r7
  80026c:	31a02004 	addi	r6,r6,-32640
  800270:	1946703a 	and	r3,r3,r5
  800274:	1986703a 	and	r3,r3,r6
  800278:	1800091e 	bne	r3,zero,8002a0 <strlen+0x78>
  80027c:	10800104 	addi	r2,r2,4
  800280:	10c00017 	ldw	r3,0(r2)
  800284:	19cb883a 	add	r5,r3,r7
  800288:	00c6303a 	nor	r3,zero,r3
  80028c:	28c6703a 	and	r3,r5,r3
  800290:	1986703a 	and	r3,r3,r6
  800294:	183ff926 	beq	r3,zero,80027c <__alt_mem_epcs_flash_controller_0+0xff7f727c>
  800298:	00000106 	br	8002a0 <strlen+0x78>
  80029c:	10800044 	addi	r2,r2,1
  8002a0:	10c00007 	ldb	r3,0(r2)
  8002a4:	183ffd1e 	bne	r3,zero,80029c <__alt_mem_epcs_flash_controller_0+0xff7f729c>
  8002a8:	1105c83a 	sub	r2,r2,r4
  8002ac:	f800283a 	ret
  8002b0:	2005883a 	mov	r2,r4
  8002b4:	003fe706 	br	800254 <__alt_mem_epcs_flash_controller_0+0xff7f7254>
  8002b8:	0005883a 	mov	r2,zero
  8002bc:	f800283a 	ret

008002c0 <__fp_unlock>:
  8002c0:	0005883a 	mov	r2,zero
  8002c4:	f800283a 	ret

008002c8 <_cleanup_r>:
  8002c8:	01402034 	movhi	r5,128
  8002cc:	29489e04 	addi	r5,r5,8824
  8002d0:	0800bfc1 	jmpi	800bfc <_fwalk_reent>

008002d4 <__sinit.part.1>:
  8002d4:	defff704 	addi	sp,sp,-36
  8002d8:	00c02034 	movhi	r3,128
  8002dc:	dfc00815 	stw	ra,32(sp)
  8002e0:	ddc00715 	stw	r23,28(sp)
  8002e4:	dd800615 	stw	r22,24(sp)
  8002e8:	dd400515 	stw	r21,20(sp)
  8002ec:	dd000415 	stw	r20,16(sp)
  8002f0:	dcc00315 	stw	r19,12(sp)
  8002f4:	dc800215 	stw	r18,8(sp)
  8002f8:	dc400115 	stw	r17,4(sp)
  8002fc:	dc000015 	stw	r16,0(sp)
  800300:	18c0b204 	addi	r3,r3,712
  800304:	24000117 	ldw	r16,4(r4)
  800308:	20c00f15 	stw	r3,60(r4)
  80030c:	2080bb04 	addi	r2,r4,748
  800310:	00c000c4 	movi	r3,3
  800314:	20c0b915 	stw	r3,740(r4)
  800318:	2080ba15 	stw	r2,744(r4)
  80031c:	2000b815 	stw	zero,736(r4)
  800320:	05c00204 	movi	r23,8
  800324:	00800104 	movi	r2,4
  800328:	2025883a 	mov	r18,r4
  80032c:	b80d883a 	mov	r6,r23
  800330:	81001704 	addi	r4,r16,92
  800334:	000b883a 	mov	r5,zero
  800338:	80000015 	stw	zero,0(r16)
  80033c:	80000115 	stw	zero,4(r16)
  800340:	80000215 	stw	zero,8(r16)
  800344:	8080030d 	sth	r2,12(r16)
  800348:	80001915 	stw	zero,100(r16)
  80034c:	8000038d 	sth	zero,14(r16)
  800350:	80000415 	stw	zero,16(r16)
  800354:	80000515 	stw	zero,20(r16)
  800358:	80000615 	stw	zero,24(r16)
  80035c:	08018540 	call	801854 <memset>
  800360:	05802034 	movhi	r22,128
  800364:	94400217 	ldw	r17,8(r18)
  800368:	05402034 	movhi	r21,128
  80036c:	05002034 	movhi	r20,128
  800370:	04c02034 	movhi	r19,128
  800374:	b587cd04 	addi	r22,r22,7988
  800378:	ad47e404 	addi	r21,r21,8080
  80037c:	a5080304 	addi	r20,r20,8204
  800380:	9cc81a04 	addi	r19,r19,8296
  800384:	85800815 	stw	r22,32(r16)
  800388:	85400915 	stw	r21,36(r16)
  80038c:	85000a15 	stw	r20,40(r16)
  800390:	84c00b15 	stw	r19,44(r16)
  800394:	84000715 	stw	r16,28(r16)
  800398:	00800284 	movi	r2,10
  80039c:	8880030d 	sth	r2,12(r17)
  8003a0:	00800044 	movi	r2,1
  8003a4:	b80d883a 	mov	r6,r23
  8003a8:	89001704 	addi	r4,r17,92
  8003ac:	000b883a 	mov	r5,zero
  8003b0:	88000015 	stw	zero,0(r17)
  8003b4:	88000115 	stw	zero,4(r17)
  8003b8:	88000215 	stw	zero,8(r17)
  8003bc:	88001915 	stw	zero,100(r17)
  8003c0:	8880038d 	sth	r2,14(r17)
  8003c4:	88000415 	stw	zero,16(r17)
  8003c8:	88000515 	stw	zero,20(r17)
  8003cc:	88000615 	stw	zero,24(r17)
  8003d0:	08018540 	call	801854 <memset>
  8003d4:	94000317 	ldw	r16,12(r18)
  8003d8:	00800484 	movi	r2,18
  8003dc:	8c400715 	stw	r17,28(r17)
  8003e0:	8d800815 	stw	r22,32(r17)
  8003e4:	8d400915 	stw	r21,36(r17)
  8003e8:	8d000a15 	stw	r20,40(r17)
  8003ec:	8cc00b15 	stw	r19,44(r17)
  8003f0:	8080030d 	sth	r2,12(r16)
  8003f4:	00800084 	movi	r2,2
  8003f8:	80000015 	stw	zero,0(r16)
  8003fc:	80000115 	stw	zero,4(r16)
  800400:	80000215 	stw	zero,8(r16)
  800404:	80001915 	stw	zero,100(r16)
  800408:	8080038d 	sth	r2,14(r16)
  80040c:	80000415 	stw	zero,16(r16)
  800410:	80000515 	stw	zero,20(r16)
  800414:	80000615 	stw	zero,24(r16)
  800418:	b80d883a 	mov	r6,r23
  80041c:	000b883a 	mov	r5,zero
  800420:	81001704 	addi	r4,r16,92
  800424:	08018540 	call	801854 <memset>
  800428:	00800044 	movi	r2,1
  80042c:	84000715 	stw	r16,28(r16)
  800430:	85800815 	stw	r22,32(r16)
  800434:	85400915 	stw	r21,36(r16)
  800438:	85000a15 	stw	r20,40(r16)
  80043c:	84c00b15 	stw	r19,44(r16)
  800440:	90800e15 	stw	r2,56(r18)
  800444:	dfc00817 	ldw	ra,32(sp)
  800448:	ddc00717 	ldw	r23,28(sp)
  80044c:	dd800617 	ldw	r22,24(sp)
  800450:	dd400517 	ldw	r21,20(sp)
  800454:	dd000417 	ldw	r20,16(sp)
  800458:	dcc00317 	ldw	r19,12(sp)
  80045c:	dc800217 	ldw	r18,8(sp)
  800460:	dc400117 	ldw	r17,4(sp)
  800464:	dc000017 	ldw	r16,0(sp)
  800468:	dec00904 	addi	sp,sp,36
  80046c:	f800283a 	ret

00800470 <__fp_lock>:
  800470:	0005883a 	mov	r2,zero
  800474:	f800283a 	ret

00800478 <__sfmoreglue>:
  800478:	defffc04 	addi	sp,sp,-16
  80047c:	dc800215 	stw	r18,8(sp)
  800480:	2825883a 	mov	r18,r5
  800484:	dc000015 	stw	r16,0(sp)
  800488:	01401a04 	movi	r5,104
  80048c:	2021883a 	mov	r16,r4
  800490:	913fffc4 	addi	r4,r18,-1
  800494:	dfc00315 	stw	ra,12(sp)
  800498:	dc400115 	stw	r17,4(sp)
  80049c:	0802f380 	call	802f38 <__mulsi3>
  8004a0:	8009883a 	mov	r4,r16
  8004a4:	11401d04 	addi	r5,r2,116
  8004a8:	1023883a 	mov	r17,r2
  8004ac:	0800cc00 	call	800cc0 <_malloc_r>
  8004b0:	1021883a 	mov	r16,r2
  8004b4:	10000726 	beq	r2,zero,8004d4 <__sfmoreglue+0x5c>
  8004b8:	11000304 	addi	r4,r2,12
  8004bc:	10000015 	stw	zero,0(r2)
  8004c0:	14800115 	stw	r18,4(r2)
  8004c4:	11000215 	stw	r4,8(r2)
  8004c8:	89801a04 	addi	r6,r17,104
  8004cc:	000b883a 	mov	r5,zero
  8004d0:	08018540 	call	801854 <memset>
  8004d4:	8005883a 	mov	r2,r16
  8004d8:	dfc00317 	ldw	ra,12(sp)
  8004dc:	dc800217 	ldw	r18,8(sp)
  8004e0:	dc400117 	ldw	r17,4(sp)
  8004e4:	dc000017 	ldw	r16,0(sp)
  8004e8:	dec00404 	addi	sp,sp,16
  8004ec:	f800283a 	ret

008004f0 <__sfp>:
  8004f0:	defffb04 	addi	sp,sp,-20
  8004f4:	dc000015 	stw	r16,0(sp)
  8004f8:	04002074 	movhi	r16,129
  8004fc:	84054a04 	addi	r16,r16,5416
  800500:	dcc00315 	stw	r19,12(sp)
  800504:	2027883a 	mov	r19,r4
  800508:	81000017 	ldw	r4,0(r16)
  80050c:	dfc00415 	stw	ra,16(sp)
  800510:	dc800215 	stw	r18,8(sp)
  800514:	20800e17 	ldw	r2,56(r4)
  800518:	dc400115 	stw	r17,4(sp)
  80051c:	1000021e 	bne	r2,zero,800528 <__sfp+0x38>
  800520:	08002d40 	call	8002d4 <__sinit.part.1>
  800524:	81000017 	ldw	r4,0(r16)
  800528:	2480b804 	addi	r18,r4,736
  80052c:	047fffc4 	movi	r17,-1
  800530:	91000117 	ldw	r4,4(r18)
  800534:	94000217 	ldw	r16,8(r18)
  800538:	213fffc4 	addi	r4,r4,-1
  80053c:	20000a16 	blt	r4,zero,800568 <__sfp+0x78>
  800540:	8080030f 	ldh	r2,12(r16)
  800544:	10000c26 	beq	r2,zero,800578 <__sfp+0x88>
  800548:	80c01d04 	addi	r3,r16,116
  80054c:	00000206 	br	800558 <__sfp+0x68>
  800550:	18bfe60f 	ldh	r2,-104(r3)
  800554:	10000826 	beq	r2,zero,800578 <__sfp+0x88>
  800558:	213fffc4 	addi	r4,r4,-1
  80055c:	1c3ffd04 	addi	r16,r3,-12
  800560:	18c01a04 	addi	r3,r3,104
  800564:	247ffa1e 	bne	r4,r17,800550 <__alt_mem_epcs_flash_controller_0+0xff7f7550>
  800568:	90800017 	ldw	r2,0(r18)
  80056c:	10001d26 	beq	r2,zero,8005e4 <__sfp+0xf4>
  800570:	1025883a 	mov	r18,r2
  800574:	003fee06 	br	800530 <__alt_mem_epcs_flash_controller_0+0xff7f7530>
  800578:	00bfffc4 	movi	r2,-1
  80057c:	8080038d 	sth	r2,14(r16)
  800580:	00800044 	movi	r2,1
  800584:	8080030d 	sth	r2,12(r16)
  800588:	80001915 	stw	zero,100(r16)
  80058c:	80000015 	stw	zero,0(r16)
  800590:	80000215 	stw	zero,8(r16)
  800594:	80000115 	stw	zero,4(r16)
  800598:	80000415 	stw	zero,16(r16)
  80059c:	80000515 	stw	zero,20(r16)
  8005a0:	80000615 	stw	zero,24(r16)
  8005a4:	01800204 	movi	r6,8
  8005a8:	000b883a 	mov	r5,zero
  8005ac:	81001704 	addi	r4,r16,92
  8005b0:	08018540 	call	801854 <memset>
  8005b4:	8005883a 	mov	r2,r16
  8005b8:	80000c15 	stw	zero,48(r16)
  8005bc:	80000d15 	stw	zero,52(r16)
  8005c0:	80001115 	stw	zero,68(r16)
  8005c4:	80001215 	stw	zero,72(r16)
  8005c8:	dfc00417 	ldw	ra,16(sp)
  8005cc:	dcc00317 	ldw	r19,12(sp)
  8005d0:	dc800217 	ldw	r18,8(sp)
  8005d4:	dc400117 	ldw	r17,4(sp)
  8005d8:	dc000017 	ldw	r16,0(sp)
  8005dc:	dec00504 	addi	sp,sp,20
  8005e0:	f800283a 	ret
  8005e4:	01400104 	movi	r5,4
  8005e8:	9809883a 	mov	r4,r19
  8005ec:	08004780 	call	800478 <__sfmoreglue>
  8005f0:	90800015 	stw	r2,0(r18)
  8005f4:	103fde1e 	bne	r2,zero,800570 <__alt_mem_epcs_flash_controller_0+0xff7f7570>
  8005f8:	00800304 	movi	r2,12
  8005fc:	98800015 	stw	r2,0(r19)
  800600:	0005883a 	mov	r2,zero
  800604:	003ff006 	br	8005c8 <__alt_mem_epcs_flash_controller_0+0xff7f75c8>

00800608 <_cleanup>:
  800608:	00802074 	movhi	r2,129
  80060c:	10854a04 	addi	r2,r2,5416
  800610:	11000017 	ldw	r4,0(r2)
  800614:	01402034 	movhi	r5,128
  800618:	29489e04 	addi	r5,r5,8824
  80061c:	0800bfc1 	jmpi	800bfc <_fwalk_reent>

00800620 <__sinit>:
  800620:	20800e17 	ldw	r2,56(r4)
  800624:	10000126 	beq	r2,zero,80062c <__sinit+0xc>
  800628:	f800283a 	ret
  80062c:	08002d41 	jmpi	8002d4 <__sinit.part.1>

00800630 <__sfp_lock_acquire>:
  800630:	f800283a 	ret

00800634 <__sfp_lock_release>:
  800634:	f800283a 	ret

00800638 <__sinit_lock_acquire>:
  800638:	f800283a 	ret

0080063c <__sinit_lock_release>:
  80063c:	f800283a 	ret

00800640 <__fp_lock_all>:
  800640:	00802074 	movhi	r2,129
  800644:	10854b04 	addi	r2,r2,5420
  800648:	11000017 	ldw	r4,0(r2)
  80064c:	01402034 	movhi	r5,128
  800650:	29411c04 	addi	r5,r5,1136
  800654:	0800b381 	jmpi	800b38 <_fwalk>

00800658 <__fp_unlock_all>:
  800658:	00802074 	movhi	r2,129
  80065c:	10854b04 	addi	r2,r2,5420
  800660:	11000017 	ldw	r4,0(r2)
  800664:	01402034 	movhi	r5,128
  800668:	2940b004 	addi	r5,r5,704
  80066c:	0800b381 	jmpi	800b38 <_fwalk>

00800670 <__sfvwrite_r>:
  800670:	30800217 	ldw	r2,8(r6)
  800674:	10006726 	beq	r2,zero,800814 <__sfvwrite_r+0x1a4>
  800678:	28c0030b 	ldhu	r3,12(r5)
  80067c:	defff404 	addi	sp,sp,-48
  800680:	dd400715 	stw	r21,28(sp)
  800684:	dd000615 	stw	r20,24(sp)
  800688:	dc000215 	stw	r16,8(sp)
  80068c:	dfc00b15 	stw	ra,44(sp)
  800690:	df000a15 	stw	fp,40(sp)
  800694:	ddc00915 	stw	r23,36(sp)
  800698:	dd800815 	stw	r22,32(sp)
  80069c:	dcc00515 	stw	r19,20(sp)
  8006a0:	dc800415 	stw	r18,16(sp)
  8006a4:	dc400315 	stw	r17,12(sp)
  8006a8:	1880020c 	andi	r2,r3,8
  8006ac:	2821883a 	mov	r16,r5
  8006b0:	202b883a 	mov	r21,r4
  8006b4:	3029883a 	mov	r20,r6
  8006b8:	10002726 	beq	r2,zero,800758 <__sfvwrite_r+0xe8>
  8006bc:	28800417 	ldw	r2,16(r5)
  8006c0:	10002526 	beq	r2,zero,800758 <__sfvwrite_r+0xe8>
  8006c4:	1880008c 	andi	r2,r3,2
  8006c8:	a4400017 	ldw	r17,0(r20)
  8006cc:	10002a26 	beq	r2,zero,800778 <__sfvwrite_r+0x108>
  8006d0:	05a00034 	movhi	r22,32768
  8006d4:	0027883a 	mov	r19,zero
  8006d8:	0025883a 	mov	r18,zero
  8006dc:	b5bf0004 	addi	r22,r22,-1024
  8006e0:	980d883a 	mov	r6,r19
  8006e4:	a809883a 	mov	r4,r21
  8006e8:	90004626 	beq	r18,zero,800804 <__sfvwrite_r+0x194>
  8006ec:	900f883a 	mov	r7,r18
  8006f0:	b480022e 	bgeu	r22,r18,8006fc <__sfvwrite_r+0x8c>
  8006f4:	01e00034 	movhi	r7,32768
  8006f8:	39ff0004 	addi	r7,r7,-1024
  8006fc:	80800917 	ldw	r2,36(r16)
  800700:	81400717 	ldw	r5,28(r16)
  800704:	103ee83a 	callr	r2
  800708:	00805a0e 	bge	zero,r2,800874 <__sfvwrite_r+0x204>
  80070c:	a0c00217 	ldw	r3,8(r20)
  800710:	98a7883a 	add	r19,r19,r2
  800714:	90a5c83a 	sub	r18,r18,r2
  800718:	1885c83a 	sub	r2,r3,r2
  80071c:	a0800215 	stw	r2,8(r20)
  800720:	103fef1e 	bne	r2,zero,8006e0 <__alt_mem_epcs_flash_controller_0+0xff7f76e0>
  800724:	0005883a 	mov	r2,zero
  800728:	dfc00b17 	ldw	ra,44(sp)
  80072c:	df000a17 	ldw	fp,40(sp)
  800730:	ddc00917 	ldw	r23,36(sp)
  800734:	dd800817 	ldw	r22,32(sp)
  800738:	dd400717 	ldw	r21,28(sp)
  80073c:	dd000617 	ldw	r20,24(sp)
  800740:	dcc00517 	ldw	r19,20(sp)
  800744:	dc800417 	ldw	r18,16(sp)
  800748:	dc400317 	ldw	r17,12(sp)
  80074c:	dc000217 	ldw	r16,8(sp)
  800750:	dec00c04 	addi	sp,sp,48
  800754:	f800283a 	ret
  800758:	800b883a 	mov	r5,r16
  80075c:	a809883a 	mov	r4,r21
  800760:	08020d00 	call	8020d0 <__swsetup_r>
  800764:	1000ee1e 	bne	r2,zero,800b20 <__sfvwrite_r+0x4b0>
  800768:	80c0030b 	ldhu	r3,12(r16)
  80076c:	a4400017 	ldw	r17,0(r20)
  800770:	1880008c 	andi	r2,r3,2
  800774:	103fd61e 	bne	r2,zero,8006d0 <__alt_mem_epcs_flash_controller_0+0xff7f76d0>
  800778:	1880004c 	andi	r2,r3,1
  80077c:	1000421e 	bne	r2,zero,800888 <__sfvwrite_r+0x218>
  800780:	0039883a 	mov	fp,zero
  800784:	0025883a 	mov	r18,zero
  800788:	90001a26 	beq	r18,zero,8007f4 <__sfvwrite_r+0x184>
  80078c:	1880800c 	andi	r2,r3,512
  800790:	84c00217 	ldw	r19,8(r16)
  800794:	10002126 	beq	r2,zero,80081c <__sfvwrite_r+0x1ac>
  800798:	982f883a 	mov	r23,r19
  80079c:	94c09636 	bltu	r18,r19,8009f8 <__sfvwrite_r+0x388>
  8007a0:	1881200c 	andi	r2,r3,1152
  8007a4:	1000a11e 	bne	r2,zero,800a2c <__sfvwrite_r+0x3bc>
  8007a8:	81000017 	ldw	r4,0(r16)
  8007ac:	b80d883a 	mov	r6,r23
  8007b0:	e00b883a 	mov	r5,fp
  8007b4:	08016f80 	call	8016f8 <memmove>
  8007b8:	80c00217 	ldw	r3,8(r16)
  8007bc:	81000017 	ldw	r4,0(r16)
  8007c0:	9005883a 	mov	r2,r18
  8007c4:	1ce7c83a 	sub	r19,r3,r19
  8007c8:	25cf883a 	add	r7,r4,r23
  8007cc:	84c00215 	stw	r19,8(r16)
  8007d0:	81c00015 	stw	r7,0(r16)
  8007d4:	a0c00217 	ldw	r3,8(r20)
  8007d8:	e0b9883a 	add	fp,fp,r2
  8007dc:	90a5c83a 	sub	r18,r18,r2
  8007e0:	18a7c83a 	sub	r19,r3,r2
  8007e4:	a4c00215 	stw	r19,8(r20)
  8007e8:	983fce26 	beq	r19,zero,800724 <__alt_mem_epcs_flash_controller_0+0xff7f7724>
  8007ec:	80c0030b 	ldhu	r3,12(r16)
  8007f0:	903fe61e 	bne	r18,zero,80078c <__alt_mem_epcs_flash_controller_0+0xff7f778c>
  8007f4:	8f000017 	ldw	fp,0(r17)
  8007f8:	8c800117 	ldw	r18,4(r17)
  8007fc:	8c400204 	addi	r17,r17,8
  800800:	003fe106 	br	800788 <__alt_mem_epcs_flash_controller_0+0xff7f7788>
  800804:	8cc00017 	ldw	r19,0(r17)
  800808:	8c800117 	ldw	r18,4(r17)
  80080c:	8c400204 	addi	r17,r17,8
  800810:	003fb306 	br	8006e0 <__alt_mem_epcs_flash_controller_0+0xff7f76e0>
  800814:	0005883a 	mov	r2,zero
  800818:	f800283a 	ret
  80081c:	81000017 	ldw	r4,0(r16)
  800820:	80800417 	ldw	r2,16(r16)
  800824:	11005a36 	bltu	r2,r4,800990 <__sfvwrite_r+0x320>
  800828:	85c00517 	ldw	r23,20(r16)
  80082c:	95c05836 	bltu	r18,r23,800990 <__sfvwrite_r+0x320>
  800830:	00a00034 	movhi	r2,32768
  800834:	10bfffc4 	addi	r2,r2,-1
  800838:	9009883a 	mov	r4,r18
  80083c:	1480012e 	bgeu	r2,r18,800844 <__sfvwrite_r+0x1d4>
  800840:	1009883a 	mov	r4,r2
  800844:	b80b883a 	mov	r5,r23
  800848:	0802d840 	call	802d84 <__divsi3>
  80084c:	b80b883a 	mov	r5,r23
  800850:	1009883a 	mov	r4,r2
  800854:	0802f380 	call	802f38 <__mulsi3>
  800858:	81400717 	ldw	r5,28(r16)
  80085c:	80c00917 	ldw	r3,36(r16)
  800860:	100f883a 	mov	r7,r2
  800864:	e00d883a 	mov	r6,fp
  800868:	a809883a 	mov	r4,r21
  80086c:	183ee83a 	callr	r3
  800870:	00bfd816 	blt	zero,r2,8007d4 <__alt_mem_epcs_flash_controller_0+0xff7f77d4>
  800874:	8080030b 	ldhu	r2,12(r16)
  800878:	10801014 	ori	r2,r2,64
  80087c:	8080030d 	sth	r2,12(r16)
  800880:	00bfffc4 	movi	r2,-1
  800884:	003fa806 	br	800728 <__alt_mem_epcs_flash_controller_0+0xff7f7728>
  800888:	0027883a 	mov	r19,zero
  80088c:	0011883a 	mov	r8,zero
  800890:	0039883a 	mov	fp,zero
  800894:	0025883a 	mov	r18,zero
  800898:	90001f26 	beq	r18,zero,800918 <__sfvwrite_r+0x2a8>
  80089c:	40005a26 	beq	r8,zero,800a08 <__sfvwrite_r+0x398>
  8008a0:	982d883a 	mov	r22,r19
  8008a4:	94c0012e 	bgeu	r18,r19,8008ac <__sfvwrite_r+0x23c>
  8008a8:	902d883a 	mov	r22,r18
  8008ac:	81000017 	ldw	r4,0(r16)
  8008b0:	80800417 	ldw	r2,16(r16)
  8008b4:	b02f883a 	mov	r23,r22
  8008b8:	81c00517 	ldw	r7,20(r16)
  8008bc:	1100032e 	bgeu	r2,r4,8008cc <__sfvwrite_r+0x25c>
  8008c0:	80c00217 	ldw	r3,8(r16)
  8008c4:	38c7883a 	add	r3,r7,r3
  8008c8:	1d801816 	blt	r3,r22,80092c <__sfvwrite_r+0x2bc>
  8008cc:	b1c03e16 	blt	r22,r7,8009c8 <__sfvwrite_r+0x358>
  8008d0:	80800917 	ldw	r2,36(r16)
  8008d4:	81400717 	ldw	r5,28(r16)
  8008d8:	e00d883a 	mov	r6,fp
  8008dc:	da000115 	stw	r8,4(sp)
  8008e0:	a809883a 	mov	r4,r21
  8008e4:	103ee83a 	callr	r2
  8008e8:	102f883a 	mov	r23,r2
  8008ec:	da000117 	ldw	r8,4(sp)
  8008f0:	00bfe00e 	bge	zero,r2,800874 <__alt_mem_epcs_flash_controller_0+0xff7f7874>
  8008f4:	9de7c83a 	sub	r19,r19,r23
  8008f8:	98001f26 	beq	r19,zero,800978 <__sfvwrite_r+0x308>
  8008fc:	a0800217 	ldw	r2,8(r20)
  800900:	e5f9883a 	add	fp,fp,r23
  800904:	95e5c83a 	sub	r18,r18,r23
  800908:	15efc83a 	sub	r23,r2,r23
  80090c:	a5c00215 	stw	r23,8(r20)
  800910:	b83f8426 	beq	r23,zero,800724 <__alt_mem_epcs_flash_controller_0+0xff7f7724>
  800914:	903fe11e 	bne	r18,zero,80089c <__alt_mem_epcs_flash_controller_0+0xff7f789c>
  800918:	8f000017 	ldw	fp,0(r17)
  80091c:	8c800117 	ldw	r18,4(r17)
  800920:	0011883a 	mov	r8,zero
  800924:	8c400204 	addi	r17,r17,8
  800928:	003fdb06 	br	800898 <__alt_mem_epcs_flash_controller_0+0xff7f7898>
  80092c:	180d883a 	mov	r6,r3
  800930:	e00b883a 	mov	r5,fp
  800934:	da000115 	stw	r8,4(sp)
  800938:	d8c00015 	stw	r3,0(sp)
  80093c:	08016f80 	call	8016f8 <memmove>
  800940:	d8c00017 	ldw	r3,0(sp)
  800944:	80800017 	ldw	r2,0(r16)
  800948:	800b883a 	mov	r5,r16
  80094c:	a809883a 	mov	r4,r21
  800950:	10c5883a 	add	r2,r2,r3
  800954:	80800015 	stw	r2,0(r16)
  800958:	d8c00015 	stw	r3,0(sp)
  80095c:	08025980 	call	802598 <_fflush_r>
  800960:	d8c00017 	ldw	r3,0(sp)
  800964:	da000117 	ldw	r8,4(sp)
  800968:	103fc21e 	bne	r2,zero,800874 <__alt_mem_epcs_flash_controller_0+0xff7f7874>
  80096c:	182f883a 	mov	r23,r3
  800970:	9de7c83a 	sub	r19,r19,r23
  800974:	983fe11e 	bne	r19,zero,8008fc <__alt_mem_epcs_flash_controller_0+0xff7f78fc>
  800978:	800b883a 	mov	r5,r16
  80097c:	a809883a 	mov	r4,r21
  800980:	08025980 	call	802598 <_fflush_r>
  800984:	103fbb1e 	bne	r2,zero,800874 <__alt_mem_epcs_flash_controller_0+0xff7f7874>
  800988:	0011883a 	mov	r8,zero
  80098c:	003fdb06 	br	8008fc <__alt_mem_epcs_flash_controller_0+0xff7f78fc>
  800990:	94c0012e 	bgeu	r18,r19,800998 <__sfvwrite_r+0x328>
  800994:	9027883a 	mov	r19,r18
  800998:	980d883a 	mov	r6,r19
  80099c:	e00b883a 	mov	r5,fp
  8009a0:	08016f80 	call	8016f8 <memmove>
  8009a4:	80800217 	ldw	r2,8(r16)
  8009a8:	80c00017 	ldw	r3,0(r16)
  8009ac:	14c5c83a 	sub	r2,r2,r19
  8009b0:	1cc7883a 	add	r3,r3,r19
  8009b4:	80800215 	stw	r2,8(r16)
  8009b8:	80c00015 	stw	r3,0(r16)
  8009bc:	10004326 	beq	r2,zero,800acc <__sfvwrite_r+0x45c>
  8009c0:	9805883a 	mov	r2,r19
  8009c4:	003f8306 	br	8007d4 <__alt_mem_epcs_flash_controller_0+0xff7f77d4>
  8009c8:	b00d883a 	mov	r6,r22
  8009cc:	e00b883a 	mov	r5,fp
  8009d0:	da000115 	stw	r8,4(sp)
  8009d4:	08016f80 	call	8016f8 <memmove>
  8009d8:	80800217 	ldw	r2,8(r16)
  8009dc:	80c00017 	ldw	r3,0(r16)
  8009e0:	da000117 	ldw	r8,4(sp)
  8009e4:	1585c83a 	sub	r2,r2,r22
  8009e8:	1dad883a 	add	r22,r3,r22
  8009ec:	80800215 	stw	r2,8(r16)
  8009f0:	85800015 	stw	r22,0(r16)
  8009f4:	003fbf06 	br	8008f4 <__alt_mem_epcs_flash_controller_0+0xff7f78f4>
  8009f8:	81000017 	ldw	r4,0(r16)
  8009fc:	9027883a 	mov	r19,r18
  800a00:	902f883a 	mov	r23,r18
  800a04:	003f6906 	br	8007ac <__alt_mem_epcs_flash_controller_0+0xff7f77ac>
  800a08:	900d883a 	mov	r6,r18
  800a0c:	01400284 	movi	r5,10
  800a10:	e009883a 	mov	r4,fp
  800a14:	08014cc0 	call	8014cc <memchr>
  800a18:	10003e26 	beq	r2,zero,800b14 <__sfvwrite_r+0x4a4>
  800a1c:	10800044 	addi	r2,r2,1
  800a20:	1727c83a 	sub	r19,r2,fp
  800a24:	02000044 	movi	r8,1
  800a28:	003f9d06 	br	8008a0 <__alt_mem_epcs_flash_controller_0+0xff7f78a0>
  800a2c:	80800517 	ldw	r2,20(r16)
  800a30:	81400417 	ldw	r5,16(r16)
  800a34:	81c00017 	ldw	r7,0(r16)
  800a38:	10a7883a 	add	r19,r2,r2
  800a3c:	9885883a 	add	r2,r19,r2
  800a40:	1026d7fa 	srli	r19,r2,31
  800a44:	396dc83a 	sub	r22,r7,r5
  800a48:	b1000044 	addi	r4,r22,1
  800a4c:	9885883a 	add	r2,r19,r2
  800a50:	1027d07a 	srai	r19,r2,1
  800a54:	2485883a 	add	r2,r4,r18
  800a58:	980d883a 	mov	r6,r19
  800a5c:	9880022e 	bgeu	r19,r2,800a68 <__sfvwrite_r+0x3f8>
  800a60:	1027883a 	mov	r19,r2
  800a64:	100d883a 	mov	r6,r2
  800a68:	18c1000c 	andi	r3,r3,1024
  800a6c:	18001c26 	beq	r3,zero,800ae0 <__sfvwrite_r+0x470>
  800a70:	300b883a 	mov	r5,r6
  800a74:	a809883a 	mov	r4,r21
  800a78:	0800cc00 	call	800cc0 <_malloc_r>
  800a7c:	102f883a 	mov	r23,r2
  800a80:	10002926 	beq	r2,zero,800b28 <__sfvwrite_r+0x4b8>
  800a84:	81400417 	ldw	r5,16(r16)
  800a88:	b00d883a 	mov	r6,r22
  800a8c:	1009883a 	mov	r4,r2
  800a90:	08015b00 	call	8015b0 <memcpy>
  800a94:	8080030b 	ldhu	r2,12(r16)
  800a98:	00fedfc4 	movi	r3,-1153
  800a9c:	10c4703a 	and	r2,r2,r3
  800aa0:	10802014 	ori	r2,r2,128
  800aa4:	8080030d 	sth	r2,12(r16)
  800aa8:	bd89883a 	add	r4,r23,r22
  800aac:	9d8fc83a 	sub	r7,r19,r22
  800ab0:	85c00415 	stw	r23,16(r16)
  800ab4:	84c00515 	stw	r19,20(r16)
  800ab8:	81000015 	stw	r4,0(r16)
  800abc:	9027883a 	mov	r19,r18
  800ac0:	81c00215 	stw	r7,8(r16)
  800ac4:	902f883a 	mov	r23,r18
  800ac8:	003f3806 	br	8007ac <__alt_mem_epcs_flash_controller_0+0xff7f77ac>
  800acc:	800b883a 	mov	r5,r16
  800ad0:	a809883a 	mov	r4,r21
  800ad4:	08025980 	call	802598 <_fflush_r>
  800ad8:	103fb926 	beq	r2,zero,8009c0 <__alt_mem_epcs_flash_controller_0+0xff7f79c0>
  800adc:	003f6506 	br	800874 <__alt_mem_epcs_flash_controller_0+0xff7f7874>
  800ae0:	a809883a 	mov	r4,r21
  800ae4:	080197c0 	call	80197c <_realloc_r>
  800ae8:	102f883a 	mov	r23,r2
  800aec:	103fee1e 	bne	r2,zero,800aa8 <__alt_mem_epcs_flash_controller_0+0xff7f7aa8>
  800af0:	81400417 	ldw	r5,16(r16)
  800af4:	a809883a 	mov	r4,r21
  800af8:	08027480 	call	802748 <_free_r>
  800afc:	8080030b 	ldhu	r2,12(r16)
  800b00:	00ffdfc4 	movi	r3,-129
  800b04:	1884703a 	and	r2,r3,r2
  800b08:	00c00304 	movi	r3,12
  800b0c:	a8c00015 	stw	r3,0(r21)
  800b10:	003f5906 	br	800878 <__alt_mem_epcs_flash_controller_0+0xff7f7878>
  800b14:	94c00044 	addi	r19,r18,1
  800b18:	02000044 	movi	r8,1
  800b1c:	003f6006 	br	8008a0 <__alt_mem_epcs_flash_controller_0+0xff7f78a0>
  800b20:	00bfffc4 	movi	r2,-1
  800b24:	003f0006 	br	800728 <__alt_mem_epcs_flash_controller_0+0xff7f7728>
  800b28:	00800304 	movi	r2,12
  800b2c:	a8800015 	stw	r2,0(r21)
  800b30:	8080030b 	ldhu	r2,12(r16)
  800b34:	003f5006 	br	800878 <__alt_mem_epcs_flash_controller_0+0xff7f7878>

00800b38 <_fwalk>:
  800b38:	defff704 	addi	sp,sp,-36
  800b3c:	dd000415 	stw	r20,16(sp)
  800b40:	dfc00815 	stw	ra,32(sp)
  800b44:	ddc00715 	stw	r23,28(sp)
  800b48:	dd800615 	stw	r22,24(sp)
  800b4c:	dd400515 	stw	r21,20(sp)
  800b50:	dcc00315 	stw	r19,12(sp)
  800b54:	dc800215 	stw	r18,8(sp)
  800b58:	dc400115 	stw	r17,4(sp)
  800b5c:	dc000015 	stw	r16,0(sp)
  800b60:	2500b804 	addi	r20,r4,736
  800b64:	a0002326 	beq	r20,zero,800bf4 <_fwalk+0xbc>
  800b68:	282b883a 	mov	r21,r5
  800b6c:	002f883a 	mov	r23,zero
  800b70:	05800044 	movi	r22,1
  800b74:	04ffffc4 	movi	r19,-1
  800b78:	a4400117 	ldw	r17,4(r20)
  800b7c:	a4800217 	ldw	r18,8(r20)
  800b80:	8c7fffc4 	addi	r17,r17,-1
  800b84:	88000d16 	blt	r17,zero,800bbc <_fwalk+0x84>
  800b88:	94000304 	addi	r16,r18,12
  800b8c:	94800384 	addi	r18,r18,14
  800b90:	8080000b 	ldhu	r2,0(r16)
  800b94:	8c7fffc4 	addi	r17,r17,-1
  800b98:	813ffd04 	addi	r4,r16,-12
  800b9c:	b080042e 	bgeu	r22,r2,800bb0 <_fwalk+0x78>
  800ba0:	9080000f 	ldh	r2,0(r18)
  800ba4:	14c00226 	beq	r2,r19,800bb0 <_fwalk+0x78>
  800ba8:	a83ee83a 	callr	r21
  800bac:	b8aeb03a 	or	r23,r23,r2
  800bb0:	84001a04 	addi	r16,r16,104
  800bb4:	94801a04 	addi	r18,r18,104
  800bb8:	8cfff51e 	bne	r17,r19,800b90 <__alt_mem_epcs_flash_controller_0+0xff7f7b90>
  800bbc:	a5000017 	ldw	r20,0(r20)
  800bc0:	a03fed1e 	bne	r20,zero,800b78 <__alt_mem_epcs_flash_controller_0+0xff7f7b78>
  800bc4:	b805883a 	mov	r2,r23
  800bc8:	dfc00817 	ldw	ra,32(sp)
  800bcc:	ddc00717 	ldw	r23,28(sp)
  800bd0:	dd800617 	ldw	r22,24(sp)
  800bd4:	dd400517 	ldw	r21,20(sp)
  800bd8:	dd000417 	ldw	r20,16(sp)
  800bdc:	dcc00317 	ldw	r19,12(sp)
  800be0:	dc800217 	ldw	r18,8(sp)
  800be4:	dc400117 	ldw	r17,4(sp)
  800be8:	dc000017 	ldw	r16,0(sp)
  800bec:	dec00904 	addi	sp,sp,36
  800bf0:	f800283a 	ret
  800bf4:	002f883a 	mov	r23,zero
  800bf8:	003ff206 	br	800bc4 <__alt_mem_epcs_flash_controller_0+0xff7f7bc4>

00800bfc <_fwalk_reent>:
  800bfc:	defff704 	addi	sp,sp,-36
  800c00:	dd000415 	stw	r20,16(sp)
  800c04:	dfc00815 	stw	ra,32(sp)
  800c08:	ddc00715 	stw	r23,28(sp)
  800c0c:	dd800615 	stw	r22,24(sp)
  800c10:	dd400515 	stw	r21,20(sp)
  800c14:	dcc00315 	stw	r19,12(sp)
  800c18:	dc800215 	stw	r18,8(sp)
  800c1c:	dc400115 	stw	r17,4(sp)
  800c20:	dc000015 	stw	r16,0(sp)
  800c24:	2500b804 	addi	r20,r4,736
  800c28:	a0002326 	beq	r20,zero,800cb8 <_fwalk_reent+0xbc>
  800c2c:	282b883a 	mov	r21,r5
  800c30:	2027883a 	mov	r19,r4
  800c34:	002f883a 	mov	r23,zero
  800c38:	05800044 	movi	r22,1
  800c3c:	04bfffc4 	movi	r18,-1
  800c40:	a4400117 	ldw	r17,4(r20)
  800c44:	a4000217 	ldw	r16,8(r20)
  800c48:	8c7fffc4 	addi	r17,r17,-1
  800c4c:	88000c16 	blt	r17,zero,800c80 <_fwalk_reent+0x84>
  800c50:	84000304 	addi	r16,r16,12
  800c54:	8080000b 	ldhu	r2,0(r16)
  800c58:	8c7fffc4 	addi	r17,r17,-1
  800c5c:	817ffd04 	addi	r5,r16,-12
  800c60:	b080052e 	bgeu	r22,r2,800c78 <_fwalk_reent+0x7c>
  800c64:	8080008f 	ldh	r2,2(r16)
  800c68:	9809883a 	mov	r4,r19
  800c6c:	14800226 	beq	r2,r18,800c78 <_fwalk_reent+0x7c>
  800c70:	a83ee83a 	callr	r21
  800c74:	b8aeb03a 	or	r23,r23,r2
  800c78:	84001a04 	addi	r16,r16,104
  800c7c:	8cbff51e 	bne	r17,r18,800c54 <__alt_mem_epcs_flash_controller_0+0xff7f7c54>
  800c80:	a5000017 	ldw	r20,0(r20)
  800c84:	a03fee1e 	bne	r20,zero,800c40 <__alt_mem_epcs_flash_controller_0+0xff7f7c40>
  800c88:	b805883a 	mov	r2,r23
  800c8c:	dfc00817 	ldw	ra,32(sp)
  800c90:	ddc00717 	ldw	r23,28(sp)
  800c94:	dd800617 	ldw	r22,24(sp)
  800c98:	dd400517 	ldw	r21,20(sp)
  800c9c:	dd000417 	ldw	r20,16(sp)
  800ca0:	dcc00317 	ldw	r19,12(sp)
  800ca4:	dc800217 	ldw	r18,8(sp)
  800ca8:	dc400117 	ldw	r17,4(sp)
  800cac:	dc000017 	ldw	r16,0(sp)
  800cb0:	dec00904 	addi	sp,sp,36
  800cb4:	f800283a 	ret
  800cb8:	002f883a 	mov	r23,zero
  800cbc:	003ff206 	br	800c88 <__alt_mem_epcs_flash_controller_0+0xff7f7c88>

00800cc0 <_malloc_r>:
  800cc0:	defff504 	addi	sp,sp,-44
  800cc4:	dc800315 	stw	r18,12(sp)
  800cc8:	dfc00a15 	stw	ra,40(sp)
  800ccc:	df000915 	stw	fp,36(sp)
  800cd0:	ddc00815 	stw	r23,32(sp)
  800cd4:	dd800715 	stw	r22,28(sp)
  800cd8:	dd400615 	stw	r21,24(sp)
  800cdc:	dd000515 	stw	r20,20(sp)
  800ce0:	dcc00415 	stw	r19,16(sp)
  800ce4:	dc400215 	stw	r17,8(sp)
  800ce8:	dc000115 	stw	r16,4(sp)
  800cec:	288002c4 	addi	r2,r5,11
  800cf0:	00c00584 	movi	r3,22
  800cf4:	2025883a 	mov	r18,r4
  800cf8:	18807f2e 	bgeu	r3,r2,800ef8 <_malloc_r+0x238>
  800cfc:	047ffe04 	movi	r17,-8
  800d00:	1462703a 	and	r17,r2,r17
  800d04:	8800a316 	blt	r17,zero,800f94 <_malloc_r+0x2d4>
  800d08:	8940a236 	bltu	r17,r5,800f94 <_malloc_r+0x2d4>
  800d0c:	08039240 	call	803924 <__malloc_lock>
  800d10:	00807dc4 	movi	r2,503
  800d14:	1441e92e 	bgeu	r2,r17,8014bc <_malloc_r+0x7fc>
  800d18:	8804d27a 	srli	r2,r17,9
  800d1c:	1000a126 	beq	r2,zero,800fa4 <_malloc_r+0x2e4>
  800d20:	00c00104 	movi	r3,4
  800d24:	18811e36 	bltu	r3,r2,8011a0 <_malloc_r+0x4e0>
  800d28:	8804d1ba 	srli	r2,r17,6
  800d2c:	12000e44 	addi	r8,r2,57
  800d30:	11c00e04 	addi	r7,r2,56
  800d34:	4209883a 	add	r4,r8,r8
  800d38:	04c02074 	movhi	r19,129
  800d3c:	2109883a 	add	r4,r4,r4
  800d40:	9cff2804 	addi	r19,r19,-864
  800d44:	2109883a 	add	r4,r4,r4
  800d48:	9909883a 	add	r4,r19,r4
  800d4c:	24000117 	ldw	r16,4(r4)
  800d50:	213ffe04 	addi	r4,r4,-8
  800d54:	24009726 	beq	r4,r16,800fb4 <_malloc_r+0x2f4>
  800d58:	80800117 	ldw	r2,4(r16)
  800d5c:	01bfff04 	movi	r6,-4
  800d60:	014003c4 	movi	r5,15
  800d64:	1184703a 	and	r2,r2,r6
  800d68:	1447c83a 	sub	r3,r2,r17
  800d6c:	28c00716 	blt	r5,r3,800d8c <_malloc_r+0xcc>
  800d70:	1800920e 	bge	r3,zero,800fbc <_malloc_r+0x2fc>
  800d74:	84000317 	ldw	r16,12(r16)
  800d78:	24008e26 	beq	r4,r16,800fb4 <_malloc_r+0x2f4>
  800d7c:	80800117 	ldw	r2,4(r16)
  800d80:	1184703a 	and	r2,r2,r6
  800d84:	1447c83a 	sub	r3,r2,r17
  800d88:	28fff90e 	bge	r5,r3,800d70 <__alt_mem_epcs_flash_controller_0+0xff7f7d70>
  800d8c:	3809883a 	mov	r4,r7
  800d90:	01802074 	movhi	r6,129
  800d94:	9c000417 	ldw	r16,16(r19)
  800d98:	31bf2804 	addi	r6,r6,-864
  800d9c:	32000204 	addi	r8,r6,8
  800da0:	82013426 	beq	r16,r8,801274 <_malloc_r+0x5b4>
  800da4:	80c00117 	ldw	r3,4(r16)
  800da8:	00bfff04 	movi	r2,-4
  800dac:	188e703a 	and	r7,r3,r2
  800db0:	3c45c83a 	sub	r2,r7,r17
  800db4:	00c003c4 	movi	r3,15
  800db8:	18811f16 	blt	r3,r2,801238 <_malloc_r+0x578>
  800dbc:	32000515 	stw	r8,20(r6)
  800dc0:	32000415 	stw	r8,16(r6)
  800dc4:	10007f0e 	bge	r2,zero,800fc4 <_malloc_r+0x304>
  800dc8:	00807fc4 	movi	r2,511
  800dcc:	11c0fd36 	bltu	r2,r7,8011c4 <_malloc_r+0x504>
  800dd0:	3806d0fa 	srli	r3,r7,3
  800dd4:	01c00044 	movi	r7,1
  800dd8:	30800117 	ldw	r2,4(r6)
  800ddc:	19400044 	addi	r5,r3,1
  800de0:	294b883a 	add	r5,r5,r5
  800de4:	1807d0ba 	srai	r3,r3,2
  800de8:	294b883a 	add	r5,r5,r5
  800dec:	294b883a 	add	r5,r5,r5
  800df0:	298b883a 	add	r5,r5,r6
  800df4:	38c6983a 	sll	r3,r7,r3
  800df8:	29c00017 	ldw	r7,0(r5)
  800dfc:	2a7ffe04 	addi	r9,r5,-8
  800e00:	1886b03a 	or	r3,r3,r2
  800e04:	82400315 	stw	r9,12(r16)
  800e08:	81c00215 	stw	r7,8(r16)
  800e0c:	30c00115 	stw	r3,4(r6)
  800e10:	2c000015 	stw	r16,0(r5)
  800e14:	3c000315 	stw	r16,12(r7)
  800e18:	2005d0ba 	srai	r2,r4,2
  800e1c:	01400044 	movi	r5,1
  800e20:	288a983a 	sll	r5,r5,r2
  800e24:	19406f36 	bltu	r3,r5,800fe4 <_malloc_r+0x324>
  800e28:	28c4703a 	and	r2,r5,r3
  800e2c:	10000a1e 	bne	r2,zero,800e58 <_malloc_r+0x198>
  800e30:	00bfff04 	movi	r2,-4
  800e34:	294b883a 	add	r5,r5,r5
  800e38:	2088703a 	and	r4,r4,r2
  800e3c:	28c4703a 	and	r2,r5,r3
  800e40:	21000104 	addi	r4,r4,4
  800e44:	1000041e 	bne	r2,zero,800e58 <_malloc_r+0x198>
  800e48:	294b883a 	add	r5,r5,r5
  800e4c:	28c4703a 	and	r2,r5,r3
  800e50:	21000104 	addi	r4,r4,4
  800e54:	103ffc26 	beq	r2,zero,800e48 <__alt_mem_epcs_flash_controller_0+0xff7f7e48>
  800e58:	02bfff04 	movi	r10,-4
  800e5c:	024003c4 	movi	r9,15
  800e60:	21800044 	addi	r6,r4,1
  800e64:	318d883a 	add	r6,r6,r6
  800e68:	318d883a 	add	r6,r6,r6
  800e6c:	318d883a 	add	r6,r6,r6
  800e70:	998d883a 	add	r6,r19,r6
  800e74:	333ffe04 	addi	r12,r6,-8
  800e78:	2017883a 	mov	r11,r4
  800e7c:	31800104 	addi	r6,r6,4
  800e80:	34000017 	ldw	r16,0(r6)
  800e84:	31fffd04 	addi	r7,r6,-12
  800e88:	81c0041e 	bne	r16,r7,800e9c <_malloc_r+0x1dc>
  800e8c:	0000fb06 	br	80127c <_malloc_r+0x5bc>
  800e90:	1801030e 	bge	r3,zero,8012a0 <_malloc_r+0x5e0>
  800e94:	84000317 	ldw	r16,12(r16)
  800e98:	81c0f826 	beq	r16,r7,80127c <_malloc_r+0x5bc>
  800e9c:	80800117 	ldw	r2,4(r16)
  800ea0:	1284703a 	and	r2,r2,r10
  800ea4:	1447c83a 	sub	r3,r2,r17
  800ea8:	48fff90e 	bge	r9,r3,800e90 <__alt_mem_epcs_flash_controller_0+0xff7f7e90>
  800eac:	80800317 	ldw	r2,12(r16)
  800eb0:	81000217 	ldw	r4,8(r16)
  800eb4:	89400054 	ori	r5,r17,1
  800eb8:	81400115 	stw	r5,4(r16)
  800ebc:	20800315 	stw	r2,12(r4)
  800ec0:	11000215 	stw	r4,8(r2)
  800ec4:	8463883a 	add	r17,r16,r17
  800ec8:	9c400515 	stw	r17,20(r19)
  800ecc:	9c400415 	stw	r17,16(r19)
  800ed0:	18800054 	ori	r2,r3,1
  800ed4:	88800115 	stw	r2,4(r17)
  800ed8:	8a000315 	stw	r8,12(r17)
  800edc:	8a000215 	stw	r8,8(r17)
  800ee0:	88e3883a 	add	r17,r17,r3
  800ee4:	88c00015 	stw	r3,0(r17)
  800ee8:	9009883a 	mov	r4,r18
  800eec:	0803a440 	call	803a44 <__malloc_unlock>
  800ef0:	80800204 	addi	r2,r16,8
  800ef4:	00001b06 	br	800f64 <_malloc_r+0x2a4>
  800ef8:	04400404 	movi	r17,16
  800efc:	89402536 	bltu	r17,r5,800f94 <_malloc_r+0x2d4>
  800f00:	08039240 	call	803924 <__malloc_lock>
  800f04:	00800184 	movi	r2,6
  800f08:	01000084 	movi	r4,2
  800f0c:	04c02074 	movhi	r19,129
  800f10:	1085883a 	add	r2,r2,r2
  800f14:	9cff2804 	addi	r19,r19,-864
  800f18:	1085883a 	add	r2,r2,r2
  800f1c:	9885883a 	add	r2,r19,r2
  800f20:	14000117 	ldw	r16,4(r2)
  800f24:	10fffe04 	addi	r3,r2,-8
  800f28:	80c0d926 	beq	r16,r3,801290 <_malloc_r+0x5d0>
  800f2c:	80c00117 	ldw	r3,4(r16)
  800f30:	81000317 	ldw	r4,12(r16)
  800f34:	00bfff04 	movi	r2,-4
  800f38:	1884703a 	and	r2,r3,r2
  800f3c:	81400217 	ldw	r5,8(r16)
  800f40:	8085883a 	add	r2,r16,r2
  800f44:	10c00117 	ldw	r3,4(r2)
  800f48:	29000315 	stw	r4,12(r5)
  800f4c:	21400215 	stw	r5,8(r4)
  800f50:	18c00054 	ori	r3,r3,1
  800f54:	10c00115 	stw	r3,4(r2)
  800f58:	9009883a 	mov	r4,r18
  800f5c:	0803a440 	call	803a44 <__malloc_unlock>
  800f60:	80800204 	addi	r2,r16,8
  800f64:	dfc00a17 	ldw	ra,40(sp)
  800f68:	df000917 	ldw	fp,36(sp)
  800f6c:	ddc00817 	ldw	r23,32(sp)
  800f70:	dd800717 	ldw	r22,28(sp)
  800f74:	dd400617 	ldw	r21,24(sp)
  800f78:	dd000517 	ldw	r20,20(sp)
  800f7c:	dcc00417 	ldw	r19,16(sp)
  800f80:	dc800317 	ldw	r18,12(sp)
  800f84:	dc400217 	ldw	r17,8(sp)
  800f88:	dc000117 	ldw	r16,4(sp)
  800f8c:	dec00b04 	addi	sp,sp,44
  800f90:	f800283a 	ret
  800f94:	00800304 	movi	r2,12
  800f98:	90800015 	stw	r2,0(r18)
  800f9c:	0005883a 	mov	r2,zero
  800fa0:	003ff006 	br	800f64 <__alt_mem_epcs_flash_controller_0+0xff7f7f64>
  800fa4:	01002004 	movi	r4,128
  800fa8:	02001004 	movi	r8,64
  800fac:	01c00fc4 	movi	r7,63
  800fb0:	003f6106 	br	800d38 <__alt_mem_epcs_flash_controller_0+0xff7f7d38>
  800fb4:	4009883a 	mov	r4,r8
  800fb8:	003f7506 	br	800d90 <__alt_mem_epcs_flash_controller_0+0xff7f7d90>
  800fbc:	81000317 	ldw	r4,12(r16)
  800fc0:	003fde06 	br	800f3c <__alt_mem_epcs_flash_controller_0+0xff7f7f3c>
  800fc4:	81c5883a 	add	r2,r16,r7
  800fc8:	11400117 	ldw	r5,4(r2)
  800fcc:	9009883a 	mov	r4,r18
  800fd0:	29400054 	ori	r5,r5,1
  800fd4:	11400115 	stw	r5,4(r2)
  800fd8:	0803a440 	call	803a44 <__malloc_unlock>
  800fdc:	80800204 	addi	r2,r16,8
  800fe0:	003fe006 	br	800f64 <__alt_mem_epcs_flash_controller_0+0xff7f7f64>
  800fe4:	9c000217 	ldw	r16,8(r19)
  800fe8:	00bfff04 	movi	r2,-4
  800fec:	85800117 	ldw	r22,4(r16)
  800ff0:	b0ac703a 	and	r22,r22,r2
  800ff4:	b4400336 	bltu	r22,r17,801004 <_malloc_r+0x344>
  800ff8:	b445c83a 	sub	r2,r22,r17
  800ffc:	00c003c4 	movi	r3,15
  801000:	18805d16 	blt	r3,r2,801178 <_malloc_r+0x4b8>
  801004:	05c02074 	movhi	r23,129
  801008:	00802074 	movhi	r2,129
  80100c:	10857b04 	addi	r2,r2,5612
  801010:	bdc54c04 	addi	r23,r23,5424
  801014:	15400017 	ldw	r21,0(r2)
  801018:	b8c00017 	ldw	r3,0(r23)
  80101c:	00bfffc4 	movi	r2,-1
  801020:	858d883a 	add	r6,r16,r22
  801024:	8d6b883a 	add	r21,r17,r21
  801028:	1880ea26 	beq	r3,r2,8013d4 <_malloc_r+0x714>
  80102c:	ad4403c4 	addi	r21,r21,4111
  801030:	00bc0004 	movi	r2,-4096
  801034:	a8aa703a 	and	r21,r21,r2
  801038:	a80b883a 	mov	r5,r21
  80103c:	9009883a 	mov	r4,r18
  801040:	d9800015 	stw	r6,0(sp)
  801044:	0801ee00 	call	801ee0 <_sbrk_r>
  801048:	1029883a 	mov	r20,r2
  80104c:	00bfffc4 	movi	r2,-1
  801050:	d9800017 	ldw	r6,0(sp)
  801054:	a080e826 	beq	r20,r2,8013f8 <_malloc_r+0x738>
  801058:	a180a636 	bltu	r20,r6,8012f4 <_malloc_r+0x634>
  80105c:	07002074 	movhi	fp,129
  801060:	e7059d04 	addi	fp,fp,5748
  801064:	e0800017 	ldw	r2,0(fp)
  801068:	a887883a 	add	r3,r21,r2
  80106c:	e0c00015 	stw	r3,0(fp)
  801070:	3500e626 	beq	r6,r20,80140c <_malloc_r+0x74c>
  801074:	b9000017 	ldw	r4,0(r23)
  801078:	00bfffc4 	movi	r2,-1
  80107c:	2080ee26 	beq	r4,r2,801438 <_malloc_r+0x778>
  801080:	a185c83a 	sub	r2,r20,r6
  801084:	10c5883a 	add	r2,r2,r3
  801088:	e0800015 	stw	r2,0(fp)
  80108c:	a0c001cc 	andi	r3,r20,7
  801090:	1800bc26 	beq	r3,zero,801384 <_malloc_r+0x6c4>
  801094:	a0e9c83a 	sub	r20,r20,r3
  801098:	00840204 	movi	r2,4104
  80109c:	a5000204 	addi	r20,r20,8
  8010a0:	10c7c83a 	sub	r3,r2,r3
  8010a4:	a545883a 	add	r2,r20,r21
  8010a8:	1083ffcc 	andi	r2,r2,4095
  8010ac:	18abc83a 	sub	r21,r3,r2
  8010b0:	a80b883a 	mov	r5,r21
  8010b4:	9009883a 	mov	r4,r18
  8010b8:	0801ee00 	call	801ee0 <_sbrk_r>
  8010bc:	00ffffc4 	movi	r3,-1
  8010c0:	10c0e126 	beq	r2,r3,801448 <_malloc_r+0x788>
  8010c4:	1505c83a 	sub	r2,r2,r20
  8010c8:	1545883a 	add	r2,r2,r21
  8010cc:	10800054 	ori	r2,r2,1
  8010d0:	e0c00017 	ldw	r3,0(fp)
  8010d4:	9d000215 	stw	r20,8(r19)
  8010d8:	a0800115 	stw	r2,4(r20)
  8010dc:	a8c7883a 	add	r3,r21,r3
  8010e0:	e0c00015 	stw	r3,0(fp)
  8010e4:	84c00e26 	beq	r16,r19,801120 <_malloc_r+0x460>
  8010e8:	018003c4 	movi	r6,15
  8010ec:	3580a72e 	bgeu	r6,r22,80138c <_malloc_r+0x6cc>
  8010f0:	81400117 	ldw	r5,4(r16)
  8010f4:	013ffe04 	movi	r4,-8
  8010f8:	b0bffd04 	addi	r2,r22,-12
  8010fc:	1104703a 	and	r2,r2,r4
  801100:	2900004c 	andi	r4,r5,1
  801104:	2088b03a 	or	r4,r4,r2
  801108:	81000115 	stw	r4,4(r16)
  80110c:	01400144 	movi	r5,5
  801110:	8089883a 	add	r4,r16,r2
  801114:	21400115 	stw	r5,4(r4)
  801118:	21400215 	stw	r5,8(r4)
  80111c:	3080cd36 	bltu	r6,r2,801454 <_malloc_r+0x794>
  801120:	00802074 	movhi	r2,129
  801124:	10857a04 	addi	r2,r2,5608
  801128:	11000017 	ldw	r4,0(r2)
  80112c:	20c0012e 	bgeu	r4,r3,801134 <_malloc_r+0x474>
  801130:	10c00015 	stw	r3,0(r2)
  801134:	00802074 	movhi	r2,129
  801138:	10857904 	addi	r2,r2,5604
  80113c:	11000017 	ldw	r4,0(r2)
  801140:	9c000217 	ldw	r16,8(r19)
  801144:	20c0012e 	bgeu	r4,r3,80114c <_malloc_r+0x48c>
  801148:	10c00015 	stw	r3,0(r2)
  80114c:	80c00117 	ldw	r3,4(r16)
  801150:	00bfff04 	movi	r2,-4
  801154:	1886703a 	and	r3,r3,r2
  801158:	1c45c83a 	sub	r2,r3,r17
  80115c:	1c400236 	bltu	r3,r17,801168 <_malloc_r+0x4a8>
  801160:	00c003c4 	movi	r3,15
  801164:	18800416 	blt	r3,r2,801178 <_malloc_r+0x4b8>
  801168:	9009883a 	mov	r4,r18
  80116c:	0803a440 	call	803a44 <__malloc_unlock>
  801170:	0005883a 	mov	r2,zero
  801174:	003f7b06 	br	800f64 <__alt_mem_epcs_flash_controller_0+0xff7f7f64>
  801178:	88c00054 	ori	r3,r17,1
  80117c:	80c00115 	stw	r3,4(r16)
  801180:	8463883a 	add	r17,r16,r17
  801184:	10800054 	ori	r2,r2,1
  801188:	9c400215 	stw	r17,8(r19)
  80118c:	88800115 	stw	r2,4(r17)
  801190:	9009883a 	mov	r4,r18
  801194:	0803a440 	call	803a44 <__malloc_unlock>
  801198:	80800204 	addi	r2,r16,8
  80119c:	003f7106 	br	800f64 <__alt_mem_epcs_flash_controller_0+0xff7f7f64>
  8011a0:	00c00504 	movi	r3,20
  8011a4:	18804a2e 	bgeu	r3,r2,8012d0 <_malloc_r+0x610>
  8011a8:	00c01504 	movi	r3,84
  8011ac:	18806e36 	bltu	r3,r2,801368 <_malloc_r+0x6a8>
  8011b0:	8804d33a 	srli	r2,r17,12
  8011b4:	12001bc4 	addi	r8,r2,111
  8011b8:	11c01b84 	addi	r7,r2,110
  8011bc:	4209883a 	add	r4,r8,r8
  8011c0:	003edd06 	br	800d38 <__alt_mem_epcs_flash_controller_0+0xff7f7d38>
  8011c4:	3804d27a 	srli	r2,r7,9
  8011c8:	00c00104 	movi	r3,4
  8011cc:	1880442e 	bgeu	r3,r2,8012e0 <_malloc_r+0x620>
  8011d0:	00c00504 	movi	r3,20
  8011d4:	18808136 	bltu	r3,r2,8013dc <_malloc_r+0x71c>
  8011d8:	11401704 	addi	r5,r2,92
  8011dc:	10c016c4 	addi	r3,r2,91
  8011e0:	294b883a 	add	r5,r5,r5
  8011e4:	294b883a 	add	r5,r5,r5
  8011e8:	294b883a 	add	r5,r5,r5
  8011ec:	994b883a 	add	r5,r19,r5
  8011f0:	28800017 	ldw	r2,0(r5)
  8011f4:	01802074 	movhi	r6,129
  8011f8:	297ffe04 	addi	r5,r5,-8
  8011fc:	31bf2804 	addi	r6,r6,-864
  801200:	28806526 	beq	r5,r2,801398 <_malloc_r+0x6d8>
  801204:	01bfff04 	movi	r6,-4
  801208:	10c00117 	ldw	r3,4(r2)
  80120c:	1986703a 	and	r3,r3,r6
  801210:	38c0022e 	bgeu	r7,r3,80121c <_malloc_r+0x55c>
  801214:	10800217 	ldw	r2,8(r2)
  801218:	28bffb1e 	bne	r5,r2,801208 <__alt_mem_epcs_flash_controller_0+0xff7f8208>
  80121c:	11400317 	ldw	r5,12(r2)
  801220:	98c00117 	ldw	r3,4(r19)
  801224:	81400315 	stw	r5,12(r16)
  801228:	80800215 	stw	r2,8(r16)
  80122c:	2c000215 	stw	r16,8(r5)
  801230:	14000315 	stw	r16,12(r2)
  801234:	003ef806 	br	800e18 <__alt_mem_epcs_flash_controller_0+0xff7f7e18>
  801238:	88c00054 	ori	r3,r17,1
  80123c:	80c00115 	stw	r3,4(r16)
  801240:	8463883a 	add	r17,r16,r17
  801244:	34400515 	stw	r17,20(r6)
  801248:	34400415 	stw	r17,16(r6)
  80124c:	10c00054 	ori	r3,r2,1
  801250:	8a000315 	stw	r8,12(r17)
  801254:	8a000215 	stw	r8,8(r17)
  801258:	88c00115 	stw	r3,4(r17)
  80125c:	88a3883a 	add	r17,r17,r2
  801260:	88800015 	stw	r2,0(r17)
  801264:	9009883a 	mov	r4,r18
  801268:	0803a440 	call	803a44 <__malloc_unlock>
  80126c:	80800204 	addi	r2,r16,8
  801270:	003f3c06 	br	800f64 <__alt_mem_epcs_flash_controller_0+0xff7f7f64>
  801274:	30c00117 	ldw	r3,4(r6)
  801278:	003ee706 	br	800e18 <__alt_mem_epcs_flash_controller_0+0xff7f7e18>
  80127c:	5ac00044 	addi	r11,r11,1
  801280:	588000cc 	andi	r2,r11,3
  801284:	31800204 	addi	r6,r6,8
  801288:	103efd1e 	bne	r2,zero,800e80 <__alt_mem_epcs_flash_controller_0+0xff7f7e80>
  80128c:	00002406 	br	801320 <_malloc_r+0x660>
  801290:	14000317 	ldw	r16,12(r2)
  801294:	143f251e 	bne	r2,r16,800f2c <__alt_mem_epcs_flash_controller_0+0xff7f7f2c>
  801298:	21000084 	addi	r4,r4,2
  80129c:	003ebc06 	br	800d90 <__alt_mem_epcs_flash_controller_0+0xff7f7d90>
  8012a0:	8085883a 	add	r2,r16,r2
  8012a4:	10c00117 	ldw	r3,4(r2)
  8012a8:	81000317 	ldw	r4,12(r16)
  8012ac:	81400217 	ldw	r5,8(r16)
  8012b0:	18c00054 	ori	r3,r3,1
  8012b4:	10c00115 	stw	r3,4(r2)
  8012b8:	29000315 	stw	r4,12(r5)
  8012bc:	21400215 	stw	r5,8(r4)
  8012c0:	9009883a 	mov	r4,r18
  8012c4:	0803a440 	call	803a44 <__malloc_unlock>
  8012c8:	80800204 	addi	r2,r16,8
  8012cc:	003f2506 	br	800f64 <__alt_mem_epcs_flash_controller_0+0xff7f7f64>
  8012d0:	12001704 	addi	r8,r2,92
  8012d4:	11c016c4 	addi	r7,r2,91
  8012d8:	4209883a 	add	r4,r8,r8
  8012dc:	003e9606 	br	800d38 <__alt_mem_epcs_flash_controller_0+0xff7f7d38>
  8012e0:	3804d1ba 	srli	r2,r7,6
  8012e4:	11400e44 	addi	r5,r2,57
  8012e8:	10c00e04 	addi	r3,r2,56
  8012ec:	294b883a 	add	r5,r5,r5
  8012f0:	003fbc06 	br	8011e4 <__alt_mem_epcs_flash_controller_0+0xff7f81e4>
  8012f4:	84ff5926 	beq	r16,r19,80105c <__alt_mem_epcs_flash_controller_0+0xff7f805c>
  8012f8:	00802074 	movhi	r2,129
  8012fc:	10bf2804 	addi	r2,r2,-864
  801300:	14000217 	ldw	r16,8(r2)
  801304:	00bfff04 	movi	r2,-4
  801308:	80c00117 	ldw	r3,4(r16)
  80130c:	1886703a 	and	r3,r3,r2
  801310:	003f9106 	br	801158 <__alt_mem_epcs_flash_controller_0+0xff7f8158>
  801314:	60800217 	ldw	r2,8(r12)
  801318:	213fffc4 	addi	r4,r4,-1
  80131c:	1300651e 	bne	r2,r12,8014b4 <_malloc_r+0x7f4>
  801320:	208000cc 	andi	r2,r4,3
  801324:	633ffe04 	addi	r12,r12,-8
  801328:	103ffa1e 	bne	r2,zero,801314 <__alt_mem_epcs_flash_controller_0+0xff7f8314>
  80132c:	98800117 	ldw	r2,4(r19)
  801330:	0146303a 	nor	r3,zero,r5
  801334:	1884703a 	and	r2,r3,r2
  801338:	98800115 	stw	r2,4(r19)
  80133c:	294b883a 	add	r5,r5,r5
  801340:	117f2836 	bltu	r2,r5,800fe4 <__alt_mem_epcs_flash_controller_0+0xff7f7fe4>
  801344:	283f2726 	beq	r5,zero,800fe4 <__alt_mem_epcs_flash_controller_0+0xff7f7fe4>
  801348:	2886703a 	and	r3,r5,r2
  80134c:	5809883a 	mov	r4,r11
  801350:	183ec31e 	bne	r3,zero,800e60 <__alt_mem_epcs_flash_controller_0+0xff7f7e60>
  801354:	294b883a 	add	r5,r5,r5
  801358:	2886703a 	and	r3,r5,r2
  80135c:	21000104 	addi	r4,r4,4
  801360:	183ffc26 	beq	r3,zero,801354 <__alt_mem_epcs_flash_controller_0+0xff7f8354>
  801364:	003ebe06 	br	800e60 <__alt_mem_epcs_flash_controller_0+0xff7f7e60>
  801368:	00c05504 	movi	r3,340
  80136c:	18801236 	bltu	r3,r2,8013b8 <_malloc_r+0x6f8>
  801370:	8804d3fa 	srli	r2,r17,15
  801374:	12001e04 	addi	r8,r2,120
  801378:	11c01dc4 	addi	r7,r2,119
  80137c:	4209883a 	add	r4,r8,r8
  801380:	003e6d06 	br	800d38 <__alt_mem_epcs_flash_controller_0+0xff7f7d38>
  801384:	00c40004 	movi	r3,4096
  801388:	003f4606 	br	8010a4 <__alt_mem_epcs_flash_controller_0+0xff7f80a4>
  80138c:	00800044 	movi	r2,1
  801390:	a0800115 	stw	r2,4(r20)
  801394:	003f7406 	br	801168 <__alt_mem_epcs_flash_controller_0+0xff7f8168>
  801398:	1805d0ba 	srai	r2,r3,2
  80139c:	01c00044 	movi	r7,1
  8013a0:	30c00117 	ldw	r3,4(r6)
  8013a4:	388e983a 	sll	r7,r7,r2
  8013a8:	2805883a 	mov	r2,r5
  8013ac:	38c6b03a 	or	r3,r7,r3
  8013b0:	30c00115 	stw	r3,4(r6)
  8013b4:	003f9b06 	br	801224 <__alt_mem_epcs_flash_controller_0+0xff7f8224>
  8013b8:	00c15504 	movi	r3,1364
  8013bc:	18801a36 	bltu	r3,r2,801428 <_malloc_r+0x768>
  8013c0:	8804d4ba 	srli	r2,r17,18
  8013c4:	12001f44 	addi	r8,r2,125
  8013c8:	11c01f04 	addi	r7,r2,124
  8013cc:	4209883a 	add	r4,r8,r8
  8013d0:	003e5906 	br	800d38 <__alt_mem_epcs_flash_controller_0+0xff7f7d38>
  8013d4:	ad400404 	addi	r21,r21,16
  8013d8:	003f1706 	br	801038 <__alt_mem_epcs_flash_controller_0+0xff7f8038>
  8013dc:	00c01504 	movi	r3,84
  8013e0:	18802336 	bltu	r3,r2,801470 <_malloc_r+0x7b0>
  8013e4:	3804d33a 	srli	r2,r7,12
  8013e8:	11401bc4 	addi	r5,r2,111
  8013ec:	10c01b84 	addi	r3,r2,110
  8013f0:	294b883a 	add	r5,r5,r5
  8013f4:	003f7b06 	br	8011e4 <__alt_mem_epcs_flash_controller_0+0xff7f81e4>
  8013f8:	9c000217 	ldw	r16,8(r19)
  8013fc:	00bfff04 	movi	r2,-4
  801400:	80c00117 	ldw	r3,4(r16)
  801404:	1886703a 	and	r3,r3,r2
  801408:	003f5306 	br	801158 <__alt_mem_epcs_flash_controller_0+0xff7f8158>
  80140c:	3083ffcc 	andi	r2,r6,4095
  801410:	103f181e 	bne	r2,zero,801074 <__alt_mem_epcs_flash_controller_0+0xff7f8074>
  801414:	99000217 	ldw	r4,8(r19)
  801418:	b545883a 	add	r2,r22,r21
  80141c:	10800054 	ori	r2,r2,1
  801420:	20800115 	stw	r2,4(r4)
  801424:	003f3e06 	br	801120 <__alt_mem_epcs_flash_controller_0+0xff7f8120>
  801428:	01003f84 	movi	r4,254
  80142c:	02001fc4 	movi	r8,127
  801430:	01c01f84 	movi	r7,126
  801434:	003e4006 	br	800d38 <__alt_mem_epcs_flash_controller_0+0xff7f7d38>
  801438:	00802074 	movhi	r2,129
  80143c:	10854c04 	addi	r2,r2,5424
  801440:	15000015 	stw	r20,0(r2)
  801444:	003f1106 	br	80108c <__alt_mem_epcs_flash_controller_0+0xff7f808c>
  801448:	00800044 	movi	r2,1
  80144c:	002b883a 	mov	r21,zero
  801450:	003f1f06 	br	8010d0 <__alt_mem_epcs_flash_controller_0+0xff7f80d0>
  801454:	81400204 	addi	r5,r16,8
  801458:	9009883a 	mov	r4,r18
  80145c:	08027480 	call	802748 <_free_r>
  801460:	00802074 	movhi	r2,129
  801464:	10859d04 	addi	r2,r2,5748
  801468:	10c00017 	ldw	r3,0(r2)
  80146c:	003f2c06 	br	801120 <__alt_mem_epcs_flash_controller_0+0xff7f8120>
  801470:	00c05504 	movi	r3,340
  801474:	18800536 	bltu	r3,r2,80148c <_malloc_r+0x7cc>
  801478:	3804d3fa 	srli	r2,r7,15
  80147c:	11401e04 	addi	r5,r2,120
  801480:	10c01dc4 	addi	r3,r2,119
  801484:	294b883a 	add	r5,r5,r5
  801488:	003f5606 	br	8011e4 <__alt_mem_epcs_flash_controller_0+0xff7f81e4>
  80148c:	00c15504 	movi	r3,1364
  801490:	18800536 	bltu	r3,r2,8014a8 <_malloc_r+0x7e8>
  801494:	3804d4ba 	srli	r2,r7,18
  801498:	11401f44 	addi	r5,r2,125
  80149c:	10c01f04 	addi	r3,r2,124
  8014a0:	294b883a 	add	r5,r5,r5
  8014a4:	003f4f06 	br	8011e4 <__alt_mem_epcs_flash_controller_0+0xff7f81e4>
  8014a8:	01403f84 	movi	r5,254
  8014ac:	00c01f84 	movi	r3,126
  8014b0:	003f4c06 	br	8011e4 <__alt_mem_epcs_flash_controller_0+0xff7f81e4>
  8014b4:	98800117 	ldw	r2,4(r19)
  8014b8:	003fa006 	br	80133c <__alt_mem_epcs_flash_controller_0+0xff7f833c>
  8014bc:	8808d0fa 	srli	r4,r17,3
  8014c0:	20800044 	addi	r2,r4,1
  8014c4:	1085883a 	add	r2,r2,r2
  8014c8:	003e9006 	br	800f0c <__alt_mem_epcs_flash_controller_0+0xff7f7f0c>

008014cc <memchr>:
  8014cc:	208000cc 	andi	r2,r4,3
  8014d0:	280f883a 	mov	r7,r5
  8014d4:	10003426 	beq	r2,zero,8015a8 <memchr+0xdc>
  8014d8:	30bfffc4 	addi	r2,r6,-1
  8014dc:	30001a26 	beq	r6,zero,801548 <memchr+0x7c>
  8014e0:	20c00003 	ldbu	r3,0(r4)
  8014e4:	29803fcc 	andi	r6,r5,255
  8014e8:	30c0051e 	bne	r6,r3,801500 <memchr+0x34>
  8014ec:	00001806 	br	801550 <memchr+0x84>
  8014f0:	10001526 	beq	r2,zero,801548 <memchr+0x7c>
  8014f4:	20c00003 	ldbu	r3,0(r4)
  8014f8:	10bfffc4 	addi	r2,r2,-1
  8014fc:	30c01426 	beq	r6,r3,801550 <memchr+0x84>
  801500:	21000044 	addi	r4,r4,1
  801504:	20c000cc 	andi	r3,r4,3
  801508:	183ff91e 	bne	r3,zero,8014f0 <__alt_mem_epcs_flash_controller_0+0xff7f84f0>
  80150c:	020000c4 	movi	r8,3
  801510:	40801136 	bltu	r8,r2,801558 <memchr+0x8c>
  801514:	10000c26 	beq	r2,zero,801548 <memchr+0x7c>
  801518:	20c00003 	ldbu	r3,0(r4)
  80151c:	29403fcc 	andi	r5,r5,255
  801520:	28c00b26 	beq	r5,r3,801550 <memchr+0x84>
  801524:	20c00044 	addi	r3,r4,1
  801528:	39803fcc 	andi	r6,r7,255
  80152c:	2089883a 	add	r4,r4,r2
  801530:	00000306 	br	801540 <memchr+0x74>
  801534:	18c00044 	addi	r3,r3,1
  801538:	197fffc3 	ldbu	r5,-1(r3)
  80153c:	31400526 	beq	r6,r5,801554 <memchr+0x88>
  801540:	1805883a 	mov	r2,r3
  801544:	20fffb1e 	bne	r4,r3,801534 <__alt_mem_epcs_flash_controller_0+0xff7f8534>
  801548:	0005883a 	mov	r2,zero
  80154c:	f800283a 	ret
  801550:	2005883a 	mov	r2,r4
  801554:	f800283a 	ret
  801558:	28c03fcc 	andi	r3,r5,255
  80155c:	1812923a 	slli	r9,r3,8
  801560:	02ffbff4 	movhi	r11,65279
  801564:	02a02074 	movhi	r10,32897
  801568:	48d2b03a 	or	r9,r9,r3
  80156c:	4806943a 	slli	r3,r9,16
  801570:	5affbfc4 	addi	r11,r11,-257
  801574:	52a02004 	addi	r10,r10,-32640
  801578:	48d2b03a 	or	r9,r9,r3
  80157c:	20c00017 	ldw	r3,0(r4)
  801580:	48c6f03a 	xor	r3,r9,r3
  801584:	1acd883a 	add	r6,r3,r11
  801588:	00c6303a 	nor	r3,zero,r3
  80158c:	30c6703a 	and	r3,r6,r3
  801590:	1a86703a 	and	r3,r3,r10
  801594:	183fe01e 	bne	r3,zero,801518 <__alt_mem_epcs_flash_controller_0+0xff7f8518>
  801598:	10bfff04 	addi	r2,r2,-4
  80159c:	21000104 	addi	r4,r4,4
  8015a0:	40bff636 	bltu	r8,r2,80157c <__alt_mem_epcs_flash_controller_0+0xff7f857c>
  8015a4:	003fdb06 	br	801514 <__alt_mem_epcs_flash_controller_0+0xff7f8514>
  8015a8:	3005883a 	mov	r2,r6
  8015ac:	003fd706 	br	80150c <__alt_mem_epcs_flash_controller_0+0xff7f850c>

008015b0 <memcpy>:
  8015b0:	defffd04 	addi	sp,sp,-12
  8015b4:	dfc00215 	stw	ra,8(sp)
  8015b8:	dc400115 	stw	r17,4(sp)
  8015bc:	dc000015 	stw	r16,0(sp)
  8015c0:	00c003c4 	movi	r3,15
  8015c4:	2005883a 	mov	r2,r4
  8015c8:	1980452e 	bgeu	r3,r6,8016e0 <memcpy+0x130>
  8015cc:	2906b03a 	or	r3,r5,r4
  8015d0:	18c000cc 	andi	r3,r3,3
  8015d4:	1800441e 	bne	r3,zero,8016e8 <memcpy+0x138>
  8015d8:	347ffc04 	addi	r17,r6,-16
  8015dc:	8822d13a 	srli	r17,r17,4
  8015e0:	28c00104 	addi	r3,r5,4
  8015e4:	23400104 	addi	r13,r4,4
  8015e8:	8820913a 	slli	r16,r17,4
  8015ec:	2b000204 	addi	r12,r5,8
  8015f0:	22c00204 	addi	r11,r4,8
  8015f4:	84000504 	addi	r16,r16,20
  8015f8:	2a800304 	addi	r10,r5,12
  8015fc:	22400304 	addi	r9,r4,12
  801600:	2c21883a 	add	r16,r5,r16
  801604:	2811883a 	mov	r8,r5
  801608:	200f883a 	mov	r7,r4
  80160c:	41000017 	ldw	r4,0(r8)
  801610:	1fc00017 	ldw	ra,0(r3)
  801614:	63c00017 	ldw	r15,0(r12)
  801618:	39000015 	stw	r4,0(r7)
  80161c:	53800017 	ldw	r14,0(r10)
  801620:	6fc00015 	stw	ra,0(r13)
  801624:	5bc00015 	stw	r15,0(r11)
  801628:	4b800015 	stw	r14,0(r9)
  80162c:	18c00404 	addi	r3,r3,16
  801630:	39c00404 	addi	r7,r7,16
  801634:	42000404 	addi	r8,r8,16
  801638:	6b400404 	addi	r13,r13,16
  80163c:	63000404 	addi	r12,r12,16
  801640:	5ac00404 	addi	r11,r11,16
  801644:	52800404 	addi	r10,r10,16
  801648:	4a400404 	addi	r9,r9,16
  80164c:	1c3fef1e 	bne	r3,r16,80160c <__alt_mem_epcs_flash_controller_0+0xff7f860c>
  801650:	89c00044 	addi	r7,r17,1
  801654:	380e913a 	slli	r7,r7,4
  801658:	310003cc 	andi	r4,r6,15
  80165c:	02c000c4 	movi	r11,3
  801660:	11c7883a 	add	r3,r2,r7
  801664:	29cb883a 	add	r5,r5,r7
  801668:	5900212e 	bgeu	r11,r4,8016f0 <memcpy+0x140>
  80166c:	1813883a 	mov	r9,r3
  801670:	2811883a 	mov	r8,r5
  801674:	200f883a 	mov	r7,r4
  801678:	42800017 	ldw	r10,0(r8)
  80167c:	4a400104 	addi	r9,r9,4
  801680:	39ffff04 	addi	r7,r7,-4
  801684:	4abfff15 	stw	r10,-4(r9)
  801688:	42000104 	addi	r8,r8,4
  80168c:	59fffa36 	bltu	r11,r7,801678 <__alt_mem_epcs_flash_controller_0+0xff7f8678>
  801690:	213fff04 	addi	r4,r4,-4
  801694:	2008d0ba 	srli	r4,r4,2
  801698:	318000cc 	andi	r6,r6,3
  80169c:	21000044 	addi	r4,r4,1
  8016a0:	2109883a 	add	r4,r4,r4
  8016a4:	2109883a 	add	r4,r4,r4
  8016a8:	1907883a 	add	r3,r3,r4
  8016ac:	290b883a 	add	r5,r5,r4
  8016b0:	30000626 	beq	r6,zero,8016cc <memcpy+0x11c>
  8016b4:	198d883a 	add	r6,r3,r6
  8016b8:	29c00003 	ldbu	r7,0(r5)
  8016bc:	18c00044 	addi	r3,r3,1
  8016c0:	29400044 	addi	r5,r5,1
  8016c4:	19ffffc5 	stb	r7,-1(r3)
  8016c8:	19bffb1e 	bne	r3,r6,8016b8 <__alt_mem_epcs_flash_controller_0+0xff7f86b8>
  8016cc:	dfc00217 	ldw	ra,8(sp)
  8016d0:	dc400117 	ldw	r17,4(sp)
  8016d4:	dc000017 	ldw	r16,0(sp)
  8016d8:	dec00304 	addi	sp,sp,12
  8016dc:	f800283a 	ret
  8016e0:	2007883a 	mov	r3,r4
  8016e4:	003ff206 	br	8016b0 <__alt_mem_epcs_flash_controller_0+0xff7f86b0>
  8016e8:	2007883a 	mov	r3,r4
  8016ec:	003ff106 	br	8016b4 <__alt_mem_epcs_flash_controller_0+0xff7f86b4>
  8016f0:	200d883a 	mov	r6,r4
  8016f4:	003fee06 	br	8016b0 <__alt_mem_epcs_flash_controller_0+0xff7f86b0>

008016f8 <memmove>:
  8016f8:	2005883a 	mov	r2,r4
  8016fc:	29000b2e 	bgeu	r5,r4,80172c <memmove+0x34>
  801700:	298f883a 	add	r7,r5,r6
  801704:	21c0092e 	bgeu	r4,r7,80172c <memmove+0x34>
  801708:	2187883a 	add	r3,r4,r6
  80170c:	198bc83a 	sub	r5,r3,r6
  801710:	30004826 	beq	r6,zero,801834 <memmove+0x13c>
  801714:	39ffffc4 	addi	r7,r7,-1
  801718:	39000003 	ldbu	r4,0(r7)
  80171c:	18ffffc4 	addi	r3,r3,-1
  801720:	19000005 	stb	r4,0(r3)
  801724:	28fffb1e 	bne	r5,r3,801714 <__alt_mem_epcs_flash_controller_0+0xff7f8714>
  801728:	f800283a 	ret
  80172c:	00c003c4 	movi	r3,15
  801730:	1980412e 	bgeu	r3,r6,801838 <memmove+0x140>
  801734:	2886b03a 	or	r3,r5,r2
  801738:	18c000cc 	andi	r3,r3,3
  80173c:	1800401e 	bne	r3,zero,801840 <memmove+0x148>
  801740:	33fffc04 	addi	r15,r6,-16
  801744:	781ed13a 	srli	r15,r15,4
  801748:	28c00104 	addi	r3,r5,4
  80174c:	13400104 	addi	r13,r2,4
  801750:	781c913a 	slli	r14,r15,4
  801754:	2b000204 	addi	r12,r5,8
  801758:	12c00204 	addi	r11,r2,8
  80175c:	73800504 	addi	r14,r14,20
  801760:	2a800304 	addi	r10,r5,12
  801764:	12400304 	addi	r9,r2,12
  801768:	2b9d883a 	add	r14,r5,r14
  80176c:	2811883a 	mov	r8,r5
  801770:	100f883a 	mov	r7,r2
  801774:	41000017 	ldw	r4,0(r8)
  801778:	39c00404 	addi	r7,r7,16
  80177c:	18c00404 	addi	r3,r3,16
  801780:	393ffc15 	stw	r4,-16(r7)
  801784:	193ffc17 	ldw	r4,-16(r3)
  801788:	6b400404 	addi	r13,r13,16
  80178c:	5ac00404 	addi	r11,r11,16
  801790:	693ffc15 	stw	r4,-16(r13)
  801794:	61000017 	ldw	r4,0(r12)
  801798:	4a400404 	addi	r9,r9,16
  80179c:	42000404 	addi	r8,r8,16
  8017a0:	593ffc15 	stw	r4,-16(r11)
  8017a4:	51000017 	ldw	r4,0(r10)
  8017a8:	63000404 	addi	r12,r12,16
  8017ac:	52800404 	addi	r10,r10,16
  8017b0:	493ffc15 	stw	r4,-16(r9)
  8017b4:	1bbfef1e 	bne	r3,r14,801774 <__alt_mem_epcs_flash_controller_0+0xff7f8774>
  8017b8:	79000044 	addi	r4,r15,1
  8017bc:	2008913a 	slli	r4,r4,4
  8017c0:	328003cc 	andi	r10,r6,15
  8017c4:	02c000c4 	movi	r11,3
  8017c8:	1107883a 	add	r3,r2,r4
  8017cc:	290b883a 	add	r5,r5,r4
  8017d0:	5a801e2e 	bgeu	r11,r10,80184c <memmove+0x154>
  8017d4:	1813883a 	mov	r9,r3
  8017d8:	2811883a 	mov	r8,r5
  8017dc:	500f883a 	mov	r7,r10
  8017e0:	41000017 	ldw	r4,0(r8)
  8017e4:	4a400104 	addi	r9,r9,4
  8017e8:	39ffff04 	addi	r7,r7,-4
  8017ec:	493fff15 	stw	r4,-4(r9)
  8017f0:	42000104 	addi	r8,r8,4
  8017f4:	59fffa36 	bltu	r11,r7,8017e0 <__alt_mem_epcs_flash_controller_0+0xff7f87e0>
  8017f8:	513fff04 	addi	r4,r10,-4
  8017fc:	2008d0ba 	srli	r4,r4,2
  801800:	318000cc 	andi	r6,r6,3
  801804:	21000044 	addi	r4,r4,1
  801808:	2109883a 	add	r4,r4,r4
  80180c:	2109883a 	add	r4,r4,r4
  801810:	1907883a 	add	r3,r3,r4
  801814:	290b883a 	add	r5,r5,r4
  801818:	30000b26 	beq	r6,zero,801848 <memmove+0x150>
  80181c:	198d883a 	add	r6,r3,r6
  801820:	29c00003 	ldbu	r7,0(r5)
  801824:	18c00044 	addi	r3,r3,1
  801828:	29400044 	addi	r5,r5,1
  80182c:	19ffffc5 	stb	r7,-1(r3)
  801830:	19bffb1e 	bne	r3,r6,801820 <__alt_mem_epcs_flash_controller_0+0xff7f8820>
  801834:	f800283a 	ret
  801838:	1007883a 	mov	r3,r2
  80183c:	003ff606 	br	801818 <__alt_mem_epcs_flash_controller_0+0xff7f8818>
  801840:	1007883a 	mov	r3,r2
  801844:	003ff506 	br	80181c <__alt_mem_epcs_flash_controller_0+0xff7f881c>
  801848:	f800283a 	ret
  80184c:	500d883a 	mov	r6,r10
  801850:	003ff106 	br	801818 <__alt_mem_epcs_flash_controller_0+0xff7f8818>

00801854 <memset>:
  801854:	20c000cc 	andi	r3,r4,3
  801858:	2005883a 	mov	r2,r4
  80185c:	18004426 	beq	r3,zero,801970 <memset+0x11c>
  801860:	31ffffc4 	addi	r7,r6,-1
  801864:	30004026 	beq	r6,zero,801968 <memset+0x114>
  801868:	2813883a 	mov	r9,r5
  80186c:	200d883a 	mov	r6,r4
  801870:	2007883a 	mov	r3,r4
  801874:	00000406 	br	801888 <memset+0x34>
  801878:	3a3fffc4 	addi	r8,r7,-1
  80187c:	31800044 	addi	r6,r6,1
  801880:	38003926 	beq	r7,zero,801968 <memset+0x114>
  801884:	400f883a 	mov	r7,r8
  801888:	18c00044 	addi	r3,r3,1
  80188c:	32400005 	stb	r9,0(r6)
  801890:	1a0000cc 	andi	r8,r3,3
  801894:	403ff81e 	bne	r8,zero,801878 <__alt_mem_epcs_flash_controller_0+0xff7f8878>
  801898:	010000c4 	movi	r4,3
  80189c:	21c02d2e 	bgeu	r4,r7,801954 <memset+0x100>
  8018a0:	29003fcc 	andi	r4,r5,255
  8018a4:	200c923a 	slli	r6,r4,8
  8018a8:	3108b03a 	or	r4,r6,r4
  8018ac:	200c943a 	slli	r6,r4,16
  8018b0:	218cb03a 	or	r6,r4,r6
  8018b4:	010003c4 	movi	r4,15
  8018b8:	21c0182e 	bgeu	r4,r7,80191c <memset+0xc8>
  8018bc:	3b3ffc04 	addi	r12,r7,-16
  8018c0:	6018d13a 	srli	r12,r12,4
  8018c4:	1a000104 	addi	r8,r3,4
  8018c8:	1ac00204 	addi	r11,r3,8
  8018cc:	6008913a 	slli	r4,r12,4
  8018d0:	1a800304 	addi	r10,r3,12
  8018d4:	1813883a 	mov	r9,r3
  8018d8:	21000504 	addi	r4,r4,20
  8018dc:	1909883a 	add	r4,r3,r4
  8018e0:	49800015 	stw	r6,0(r9)
  8018e4:	41800015 	stw	r6,0(r8)
  8018e8:	59800015 	stw	r6,0(r11)
  8018ec:	51800015 	stw	r6,0(r10)
  8018f0:	42000404 	addi	r8,r8,16
  8018f4:	4a400404 	addi	r9,r9,16
  8018f8:	5ac00404 	addi	r11,r11,16
  8018fc:	52800404 	addi	r10,r10,16
  801900:	413ff71e 	bne	r8,r4,8018e0 <__alt_mem_epcs_flash_controller_0+0xff7f88e0>
  801904:	63000044 	addi	r12,r12,1
  801908:	6018913a 	slli	r12,r12,4
  80190c:	39c003cc 	andi	r7,r7,15
  801910:	010000c4 	movi	r4,3
  801914:	1b07883a 	add	r3,r3,r12
  801918:	21c00e2e 	bgeu	r4,r7,801954 <memset+0x100>
  80191c:	1813883a 	mov	r9,r3
  801920:	3811883a 	mov	r8,r7
  801924:	010000c4 	movi	r4,3
  801928:	49800015 	stw	r6,0(r9)
  80192c:	423fff04 	addi	r8,r8,-4
  801930:	4a400104 	addi	r9,r9,4
  801934:	223ffc36 	bltu	r4,r8,801928 <__alt_mem_epcs_flash_controller_0+0xff7f8928>
  801938:	393fff04 	addi	r4,r7,-4
  80193c:	2008d0ba 	srli	r4,r4,2
  801940:	39c000cc 	andi	r7,r7,3
  801944:	21000044 	addi	r4,r4,1
  801948:	2109883a 	add	r4,r4,r4
  80194c:	2109883a 	add	r4,r4,r4
  801950:	1907883a 	add	r3,r3,r4
  801954:	38000526 	beq	r7,zero,80196c <memset+0x118>
  801958:	19cf883a 	add	r7,r3,r7
  80195c:	19400005 	stb	r5,0(r3)
  801960:	18c00044 	addi	r3,r3,1
  801964:	38fffd1e 	bne	r7,r3,80195c <__alt_mem_epcs_flash_controller_0+0xff7f895c>
  801968:	f800283a 	ret
  80196c:	f800283a 	ret
  801970:	2007883a 	mov	r3,r4
  801974:	300f883a 	mov	r7,r6
  801978:	003fc706 	br	801898 <__alt_mem_epcs_flash_controller_0+0xff7f8898>

0080197c <_realloc_r>:
  80197c:	defff604 	addi	sp,sp,-40
  801980:	dc800215 	stw	r18,8(sp)
  801984:	dfc00915 	stw	ra,36(sp)
  801988:	df000815 	stw	fp,32(sp)
  80198c:	ddc00715 	stw	r23,28(sp)
  801990:	dd800615 	stw	r22,24(sp)
  801994:	dd400515 	stw	r21,20(sp)
  801998:	dd000415 	stw	r20,16(sp)
  80199c:	dcc00315 	stw	r19,12(sp)
  8019a0:	dc400115 	stw	r17,4(sp)
  8019a4:	dc000015 	stw	r16,0(sp)
  8019a8:	3025883a 	mov	r18,r6
  8019ac:	2800b726 	beq	r5,zero,801c8c <_realloc_r+0x310>
  8019b0:	282b883a 	mov	r21,r5
  8019b4:	2029883a 	mov	r20,r4
  8019b8:	08039240 	call	803924 <__malloc_lock>
  8019bc:	a8bfff17 	ldw	r2,-4(r21)
  8019c0:	043fff04 	movi	r16,-4
  8019c4:	90c002c4 	addi	r3,r18,11
  8019c8:	01000584 	movi	r4,22
  8019cc:	acfffe04 	addi	r19,r21,-8
  8019d0:	1420703a 	and	r16,r2,r16
  8019d4:	20c0332e 	bgeu	r4,r3,801aa4 <_realloc_r+0x128>
  8019d8:	047ffe04 	movi	r17,-8
  8019dc:	1c62703a 	and	r17,r3,r17
  8019e0:	8807883a 	mov	r3,r17
  8019e4:	88005816 	blt	r17,zero,801b48 <_realloc_r+0x1cc>
  8019e8:	8c805736 	bltu	r17,r18,801b48 <_realloc_r+0x1cc>
  8019ec:	80c0300e 	bge	r16,r3,801ab0 <_realloc_r+0x134>
  8019f0:	07002074 	movhi	fp,129
  8019f4:	e73f2804 	addi	fp,fp,-864
  8019f8:	e1c00217 	ldw	r7,8(fp)
  8019fc:	9c09883a 	add	r4,r19,r16
  801a00:	22000117 	ldw	r8,4(r4)
  801a04:	21c06326 	beq	r4,r7,801b94 <_realloc_r+0x218>
  801a08:	017fff84 	movi	r5,-2
  801a0c:	414a703a 	and	r5,r8,r5
  801a10:	214b883a 	add	r5,r4,r5
  801a14:	29800117 	ldw	r6,4(r5)
  801a18:	3180004c 	andi	r6,r6,1
  801a1c:	30003f26 	beq	r6,zero,801b1c <_realloc_r+0x1a0>
  801a20:	1080004c 	andi	r2,r2,1
  801a24:	10008326 	beq	r2,zero,801c34 <_realloc_r+0x2b8>
  801a28:	900b883a 	mov	r5,r18
  801a2c:	a009883a 	mov	r4,r20
  801a30:	0800cc00 	call	800cc0 <_malloc_r>
  801a34:	1025883a 	mov	r18,r2
  801a38:	10011e26 	beq	r2,zero,801eb4 <_realloc_r+0x538>
  801a3c:	a93fff17 	ldw	r4,-4(r21)
  801a40:	10fffe04 	addi	r3,r2,-8
  801a44:	00bfff84 	movi	r2,-2
  801a48:	2084703a 	and	r2,r4,r2
  801a4c:	9885883a 	add	r2,r19,r2
  801a50:	1880ee26 	beq	r3,r2,801e0c <_realloc_r+0x490>
  801a54:	81bfff04 	addi	r6,r16,-4
  801a58:	00800904 	movi	r2,36
  801a5c:	1180b836 	bltu	r2,r6,801d40 <_realloc_r+0x3c4>
  801a60:	00c004c4 	movi	r3,19
  801a64:	19809636 	bltu	r3,r6,801cc0 <_realloc_r+0x344>
  801a68:	9005883a 	mov	r2,r18
  801a6c:	a807883a 	mov	r3,r21
  801a70:	19000017 	ldw	r4,0(r3)
  801a74:	11000015 	stw	r4,0(r2)
  801a78:	19000117 	ldw	r4,4(r3)
  801a7c:	11000115 	stw	r4,4(r2)
  801a80:	18c00217 	ldw	r3,8(r3)
  801a84:	10c00215 	stw	r3,8(r2)
  801a88:	a80b883a 	mov	r5,r21
  801a8c:	a009883a 	mov	r4,r20
  801a90:	08027480 	call	802748 <_free_r>
  801a94:	a009883a 	mov	r4,r20
  801a98:	0803a440 	call	803a44 <__malloc_unlock>
  801a9c:	9005883a 	mov	r2,r18
  801aa0:	00001206 	br	801aec <_realloc_r+0x170>
  801aa4:	00c00404 	movi	r3,16
  801aa8:	1823883a 	mov	r17,r3
  801aac:	003fce06 	br	8019e8 <__alt_mem_epcs_flash_controller_0+0xff7f89e8>
  801ab0:	a825883a 	mov	r18,r21
  801ab4:	8445c83a 	sub	r2,r16,r17
  801ab8:	00c003c4 	movi	r3,15
  801abc:	18802636 	bltu	r3,r2,801b58 <_realloc_r+0x1dc>
  801ac0:	99800117 	ldw	r6,4(r19)
  801ac4:	9c07883a 	add	r3,r19,r16
  801ac8:	3180004c 	andi	r6,r6,1
  801acc:	3420b03a 	or	r16,r6,r16
  801ad0:	9c000115 	stw	r16,4(r19)
  801ad4:	18800117 	ldw	r2,4(r3)
  801ad8:	10800054 	ori	r2,r2,1
  801adc:	18800115 	stw	r2,4(r3)
  801ae0:	a009883a 	mov	r4,r20
  801ae4:	0803a440 	call	803a44 <__malloc_unlock>
  801ae8:	9005883a 	mov	r2,r18
  801aec:	dfc00917 	ldw	ra,36(sp)
  801af0:	df000817 	ldw	fp,32(sp)
  801af4:	ddc00717 	ldw	r23,28(sp)
  801af8:	dd800617 	ldw	r22,24(sp)
  801afc:	dd400517 	ldw	r21,20(sp)
  801b00:	dd000417 	ldw	r20,16(sp)
  801b04:	dcc00317 	ldw	r19,12(sp)
  801b08:	dc800217 	ldw	r18,8(sp)
  801b0c:	dc400117 	ldw	r17,4(sp)
  801b10:	dc000017 	ldw	r16,0(sp)
  801b14:	dec00a04 	addi	sp,sp,40
  801b18:	f800283a 	ret
  801b1c:	017fff04 	movi	r5,-4
  801b20:	414a703a 	and	r5,r8,r5
  801b24:	814d883a 	add	r6,r16,r5
  801b28:	30c01f16 	blt	r6,r3,801ba8 <_realloc_r+0x22c>
  801b2c:	20800317 	ldw	r2,12(r4)
  801b30:	20c00217 	ldw	r3,8(r4)
  801b34:	a825883a 	mov	r18,r21
  801b38:	3021883a 	mov	r16,r6
  801b3c:	18800315 	stw	r2,12(r3)
  801b40:	10c00215 	stw	r3,8(r2)
  801b44:	003fdb06 	br	801ab4 <__alt_mem_epcs_flash_controller_0+0xff7f8ab4>
  801b48:	00800304 	movi	r2,12
  801b4c:	a0800015 	stw	r2,0(r20)
  801b50:	0005883a 	mov	r2,zero
  801b54:	003fe506 	br	801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  801b58:	98c00117 	ldw	r3,4(r19)
  801b5c:	9c4b883a 	add	r5,r19,r17
  801b60:	11000054 	ori	r4,r2,1
  801b64:	18c0004c 	andi	r3,r3,1
  801b68:	1c62b03a 	or	r17,r3,r17
  801b6c:	9c400115 	stw	r17,4(r19)
  801b70:	29000115 	stw	r4,4(r5)
  801b74:	2885883a 	add	r2,r5,r2
  801b78:	10c00117 	ldw	r3,4(r2)
  801b7c:	29400204 	addi	r5,r5,8
  801b80:	a009883a 	mov	r4,r20
  801b84:	18c00054 	ori	r3,r3,1
  801b88:	10c00115 	stw	r3,4(r2)
  801b8c:	08027480 	call	802748 <_free_r>
  801b90:	003fd306 	br	801ae0 <__alt_mem_epcs_flash_controller_0+0xff7f8ae0>
  801b94:	017fff04 	movi	r5,-4
  801b98:	414a703a 	and	r5,r8,r5
  801b9c:	89800404 	addi	r6,r17,16
  801ba0:	8151883a 	add	r8,r16,r5
  801ba4:	4180590e 	bge	r8,r6,801d0c <_realloc_r+0x390>
  801ba8:	1080004c 	andi	r2,r2,1
  801bac:	103f9e1e 	bne	r2,zero,801a28 <__alt_mem_epcs_flash_controller_0+0xff7f8a28>
  801bb0:	adbffe17 	ldw	r22,-8(r21)
  801bb4:	00bfff04 	movi	r2,-4
  801bb8:	9dadc83a 	sub	r22,r19,r22
  801bbc:	b1800117 	ldw	r6,4(r22)
  801bc0:	3084703a 	and	r2,r6,r2
  801bc4:	20002026 	beq	r4,zero,801c48 <_realloc_r+0x2cc>
  801bc8:	80af883a 	add	r23,r16,r2
  801bcc:	b96f883a 	add	r23,r23,r5
  801bd0:	21c05f26 	beq	r4,r7,801d50 <_realloc_r+0x3d4>
  801bd4:	b8c01c16 	blt	r23,r3,801c48 <_realloc_r+0x2cc>
  801bd8:	20800317 	ldw	r2,12(r4)
  801bdc:	20c00217 	ldw	r3,8(r4)
  801be0:	81bfff04 	addi	r6,r16,-4
  801be4:	01000904 	movi	r4,36
  801be8:	18800315 	stw	r2,12(r3)
  801bec:	10c00215 	stw	r3,8(r2)
  801bf0:	b0c00217 	ldw	r3,8(r22)
  801bf4:	b0800317 	ldw	r2,12(r22)
  801bf8:	b4800204 	addi	r18,r22,8
  801bfc:	18800315 	stw	r2,12(r3)
  801c00:	10c00215 	stw	r3,8(r2)
  801c04:	21801b36 	bltu	r4,r6,801c74 <_realloc_r+0x2f8>
  801c08:	008004c4 	movi	r2,19
  801c0c:	1180352e 	bgeu	r2,r6,801ce4 <_realloc_r+0x368>
  801c10:	a8800017 	ldw	r2,0(r21)
  801c14:	b0800215 	stw	r2,8(r22)
  801c18:	a8800117 	ldw	r2,4(r21)
  801c1c:	b0800315 	stw	r2,12(r22)
  801c20:	008006c4 	movi	r2,27
  801c24:	11807f36 	bltu	r2,r6,801e24 <_realloc_r+0x4a8>
  801c28:	b0800404 	addi	r2,r22,16
  801c2c:	ad400204 	addi	r21,r21,8
  801c30:	00002d06 	br	801ce8 <_realloc_r+0x36c>
  801c34:	adbffe17 	ldw	r22,-8(r21)
  801c38:	00bfff04 	movi	r2,-4
  801c3c:	9dadc83a 	sub	r22,r19,r22
  801c40:	b1000117 	ldw	r4,4(r22)
  801c44:	2084703a 	and	r2,r4,r2
  801c48:	b03f7726 	beq	r22,zero,801a28 <__alt_mem_epcs_flash_controller_0+0xff7f8a28>
  801c4c:	80af883a 	add	r23,r16,r2
  801c50:	b8ff7516 	blt	r23,r3,801a28 <__alt_mem_epcs_flash_controller_0+0xff7f8a28>
  801c54:	b0800317 	ldw	r2,12(r22)
  801c58:	b0c00217 	ldw	r3,8(r22)
  801c5c:	81bfff04 	addi	r6,r16,-4
  801c60:	01000904 	movi	r4,36
  801c64:	18800315 	stw	r2,12(r3)
  801c68:	10c00215 	stw	r3,8(r2)
  801c6c:	b4800204 	addi	r18,r22,8
  801c70:	21bfe52e 	bgeu	r4,r6,801c08 <__alt_mem_epcs_flash_controller_0+0xff7f8c08>
  801c74:	a80b883a 	mov	r5,r21
  801c78:	9009883a 	mov	r4,r18
  801c7c:	08016f80 	call	8016f8 <memmove>
  801c80:	b821883a 	mov	r16,r23
  801c84:	b027883a 	mov	r19,r22
  801c88:	003f8a06 	br	801ab4 <__alt_mem_epcs_flash_controller_0+0xff7f8ab4>
  801c8c:	300b883a 	mov	r5,r6
  801c90:	dfc00917 	ldw	ra,36(sp)
  801c94:	df000817 	ldw	fp,32(sp)
  801c98:	ddc00717 	ldw	r23,28(sp)
  801c9c:	dd800617 	ldw	r22,24(sp)
  801ca0:	dd400517 	ldw	r21,20(sp)
  801ca4:	dd000417 	ldw	r20,16(sp)
  801ca8:	dcc00317 	ldw	r19,12(sp)
  801cac:	dc800217 	ldw	r18,8(sp)
  801cb0:	dc400117 	ldw	r17,4(sp)
  801cb4:	dc000017 	ldw	r16,0(sp)
  801cb8:	dec00a04 	addi	sp,sp,40
  801cbc:	0800cc01 	jmpi	800cc0 <_malloc_r>
  801cc0:	a8c00017 	ldw	r3,0(r21)
  801cc4:	90c00015 	stw	r3,0(r18)
  801cc8:	a8c00117 	ldw	r3,4(r21)
  801ccc:	90c00115 	stw	r3,4(r18)
  801cd0:	00c006c4 	movi	r3,27
  801cd4:	19804536 	bltu	r3,r6,801dec <_realloc_r+0x470>
  801cd8:	90800204 	addi	r2,r18,8
  801cdc:	a8c00204 	addi	r3,r21,8
  801ce0:	003f6306 	br	801a70 <__alt_mem_epcs_flash_controller_0+0xff7f8a70>
  801ce4:	9005883a 	mov	r2,r18
  801ce8:	a8c00017 	ldw	r3,0(r21)
  801cec:	b821883a 	mov	r16,r23
  801cf0:	b027883a 	mov	r19,r22
  801cf4:	10c00015 	stw	r3,0(r2)
  801cf8:	a8c00117 	ldw	r3,4(r21)
  801cfc:	10c00115 	stw	r3,4(r2)
  801d00:	a8c00217 	ldw	r3,8(r21)
  801d04:	10c00215 	stw	r3,8(r2)
  801d08:	003f6a06 	br	801ab4 <__alt_mem_epcs_flash_controller_0+0xff7f8ab4>
  801d0c:	9c67883a 	add	r19,r19,r17
  801d10:	4445c83a 	sub	r2,r8,r17
  801d14:	e4c00215 	stw	r19,8(fp)
  801d18:	10800054 	ori	r2,r2,1
  801d1c:	98800115 	stw	r2,4(r19)
  801d20:	a8bfff17 	ldw	r2,-4(r21)
  801d24:	a009883a 	mov	r4,r20
  801d28:	1080004c 	andi	r2,r2,1
  801d2c:	1462b03a 	or	r17,r2,r17
  801d30:	ac7fff15 	stw	r17,-4(r21)
  801d34:	0803a440 	call	803a44 <__malloc_unlock>
  801d38:	a805883a 	mov	r2,r21
  801d3c:	003f6b06 	br	801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  801d40:	a80b883a 	mov	r5,r21
  801d44:	9009883a 	mov	r4,r18
  801d48:	08016f80 	call	8016f8 <memmove>
  801d4c:	003f4e06 	br	801a88 <__alt_mem_epcs_flash_controller_0+0xff7f8a88>
  801d50:	89000404 	addi	r4,r17,16
  801d54:	b93fbc16 	blt	r23,r4,801c48 <__alt_mem_epcs_flash_controller_0+0xff7f8c48>
  801d58:	b0800317 	ldw	r2,12(r22)
  801d5c:	b0c00217 	ldw	r3,8(r22)
  801d60:	81bfff04 	addi	r6,r16,-4
  801d64:	01000904 	movi	r4,36
  801d68:	18800315 	stw	r2,12(r3)
  801d6c:	10c00215 	stw	r3,8(r2)
  801d70:	b4800204 	addi	r18,r22,8
  801d74:	21804336 	bltu	r4,r6,801e84 <_realloc_r+0x508>
  801d78:	008004c4 	movi	r2,19
  801d7c:	11803f2e 	bgeu	r2,r6,801e7c <_realloc_r+0x500>
  801d80:	a8800017 	ldw	r2,0(r21)
  801d84:	b0800215 	stw	r2,8(r22)
  801d88:	a8800117 	ldw	r2,4(r21)
  801d8c:	b0800315 	stw	r2,12(r22)
  801d90:	008006c4 	movi	r2,27
  801d94:	11803f36 	bltu	r2,r6,801e94 <_realloc_r+0x518>
  801d98:	b0800404 	addi	r2,r22,16
  801d9c:	ad400204 	addi	r21,r21,8
  801da0:	a8c00017 	ldw	r3,0(r21)
  801da4:	10c00015 	stw	r3,0(r2)
  801da8:	a8c00117 	ldw	r3,4(r21)
  801dac:	10c00115 	stw	r3,4(r2)
  801db0:	a8c00217 	ldw	r3,8(r21)
  801db4:	10c00215 	stw	r3,8(r2)
  801db8:	b447883a 	add	r3,r22,r17
  801dbc:	bc45c83a 	sub	r2,r23,r17
  801dc0:	e0c00215 	stw	r3,8(fp)
  801dc4:	10800054 	ori	r2,r2,1
  801dc8:	18800115 	stw	r2,4(r3)
  801dcc:	b0800117 	ldw	r2,4(r22)
  801dd0:	a009883a 	mov	r4,r20
  801dd4:	1080004c 	andi	r2,r2,1
  801dd8:	1462b03a 	or	r17,r2,r17
  801ddc:	b4400115 	stw	r17,4(r22)
  801de0:	0803a440 	call	803a44 <__malloc_unlock>
  801de4:	9005883a 	mov	r2,r18
  801de8:	003f4006 	br	801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  801dec:	a8c00217 	ldw	r3,8(r21)
  801df0:	90c00215 	stw	r3,8(r18)
  801df4:	a8c00317 	ldw	r3,12(r21)
  801df8:	90c00315 	stw	r3,12(r18)
  801dfc:	30801126 	beq	r6,r2,801e44 <_realloc_r+0x4c8>
  801e00:	90800404 	addi	r2,r18,16
  801e04:	a8c00404 	addi	r3,r21,16
  801e08:	003f1906 	br	801a70 <__alt_mem_epcs_flash_controller_0+0xff7f8a70>
  801e0c:	90ffff17 	ldw	r3,-4(r18)
  801e10:	00bfff04 	movi	r2,-4
  801e14:	a825883a 	mov	r18,r21
  801e18:	1884703a 	and	r2,r3,r2
  801e1c:	80a1883a 	add	r16,r16,r2
  801e20:	003f2406 	br	801ab4 <__alt_mem_epcs_flash_controller_0+0xff7f8ab4>
  801e24:	a8800217 	ldw	r2,8(r21)
  801e28:	b0800415 	stw	r2,16(r22)
  801e2c:	a8800317 	ldw	r2,12(r21)
  801e30:	b0800515 	stw	r2,20(r22)
  801e34:	31000a26 	beq	r6,r4,801e60 <_realloc_r+0x4e4>
  801e38:	b0800604 	addi	r2,r22,24
  801e3c:	ad400404 	addi	r21,r21,16
  801e40:	003fa906 	br	801ce8 <__alt_mem_epcs_flash_controller_0+0xff7f8ce8>
  801e44:	a9000417 	ldw	r4,16(r21)
  801e48:	90800604 	addi	r2,r18,24
  801e4c:	a8c00604 	addi	r3,r21,24
  801e50:	91000415 	stw	r4,16(r18)
  801e54:	a9000517 	ldw	r4,20(r21)
  801e58:	91000515 	stw	r4,20(r18)
  801e5c:	003f0406 	br	801a70 <__alt_mem_epcs_flash_controller_0+0xff7f8a70>
  801e60:	a8c00417 	ldw	r3,16(r21)
  801e64:	ad400604 	addi	r21,r21,24
  801e68:	b0800804 	addi	r2,r22,32
  801e6c:	b0c00615 	stw	r3,24(r22)
  801e70:	a8ffff17 	ldw	r3,-4(r21)
  801e74:	b0c00715 	stw	r3,28(r22)
  801e78:	003f9b06 	br	801ce8 <__alt_mem_epcs_flash_controller_0+0xff7f8ce8>
  801e7c:	9005883a 	mov	r2,r18
  801e80:	003fc706 	br	801da0 <__alt_mem_epcs_flash_controller_0+0xff7f8da0>
  801e84:	a80b883a 	mov	r5,r21
  801e88:	9009883a 	mov	r4,r18
  801e8c:	08016f80 	call	8016f8 <memmove>
  801e90:	003fc906 	br	801db8 <__alt_mem_epcs_flash_controller_0+0xff7f8db8>
  801e94:	a8800217 	ldw	r2,8(r21)
  801e98:	b0800415 	stw	r2,16(r22)
  801e9c:	a8800317 	ldw	r2,12(r21)
  801ea0:	b0800515 	stw	r2,20(r22)
  801ea4:	31000726 	beq	r6,r4,801ec4 <_realloc_r+0x548>
  801ea8:	b0800604 	addi	r2,r22,24
  801eac:	ad400404 	addi	r21,r21,16
  801eb0:	003fbb06 	br	801da0 <__alt_mem_epcs_flash_controller_0+0xff7f8da0>
  801eb4:	a009883a 	mov	r4,r20
  801eb8:	0803a440 	call	803a44 <__malloc_unlock>
  801ebc:	0005883a 	mov	r2,zero
  801ec0:	003f0a06 	br	801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  801ec4:	a8c00417 	ldw	r3,16(r21)
  801ec8:	ad400604 	addi	r21,r21,24
  801ecc:	b0800804 	addi	r2,r22,32
  801ed0:	b0c00615 	stw	r3,24(r22)
  801ed4:	a8ffff17 	ldw	r3,-4(r21)
  801ed8:	b0c00715 	stw	r3,28(r22)
  801edc:	003fb006 	br	801da0 <__alt_mem_epcs_flash_controller_0+0xff7f8da0>

00801ee0 <_sbrk_r>:
  801ee0:	defffd04 	addi	sp,sp,-12
  801ee4:	dc000015 	stw	r16,0(sp)
  801ee8:	04002074 	movhi	r16,129
  801eec:	dc400115 	stw	r17,4(sp)
  801ef0:	84057c04 	addi	r16,r16,5616
  801ef4:	2023883a 	mov	r17,r4
  801ef8:	2809883a 	mov	r4,r5
  801efc:	dfc00215 	stw	ra,8(sp)
  801f00:	80000015 	stw	zero,0(r16)
  801f04:	08036140 	call	803614 <sbrk>
  801f08:	00ffffc4 	movi	r3,-1
  801f0c:	10c00526 	beq	r2,r3,801f24 <_sbrk_r+0x44>
  801f10:	dfc00217 	ldw	ra,8(sp)
  801f14:	dc400117 	ldw	r17,4(sp)
  801f18:	dc000017 	ldw	r16,0(sp)
  801f1c:	dec00304 	addi	sp,sp,12
  801f20:	f800283a 	ret
  801f24:	80c00017 	ldw	r3,0(r16)
  801f28:	183ff926 	beq	r3,zero,801f10 <__alt_mem_epcs_flash_controller_0+0xff7f8f10>
  801f2c:	88c00015 	stw	r3,0(r17)
  801f30:	003ff706 	br	801f10 <__alt_mem_epcs_flash_controller_0+0xff7f8f10>

00801f34 <__sread>:
  801f34:	defffe04 	addi	sp,sp,-8
  801f38:	dc000015 	stw	r16,0(sp)
  801f3c:	2821883a 	mov	r16,r5
  801f40:	2940038f 	ldh	r5,14(r5)
  801f44:	dfc00115 	stw	ra,4(sp)
  801f48:	0802c740 	call	802c74 <_read_r>
  801f4c:	10000716 	blt	r2,zero,801f6c <__sread+0x38>
  801f50:	80c01417 	ldw	r3,80(r16)
  801f54:	1887883a 	add	r3,r3,r2
  801f58:	80c01415 	stw	r3,80(r16)
  801f5c:	dfc00117 	ldw	ra,4(sp)
  801f60:	dc000017 	ldw	r16,0(sp)
  801f64:	dec00204 	addi	sp,sp,8
  801f68:	f800283a 	ret
  801f6c:	80c0030b 	ldhu	r3,12(r16)
  801f70:	18fbffcc 	andi	r3,r3,61439
  801f74:	80c0030d 	sth	r3,12(r16)
  801f78:	dfc00117 	ldw	ra,4(sp)
  801f7c:	dc000017 	ldw	r16,0(sp)
  801f80:	dec00204 	addi	sp,sp,8
  801f84:	f800283a 	ret

00801f88 <__seofread>:
  801f88:	0005883a 	mov	r2,zero
  801f8c:	f800283a 	ret

00801f90 <__swrite>:
  801f90:	2880030b 	ldhu	r2,12(r5)
  801f94:	defffb04 	addi	sp,sp,-20
  801f98:	dcc00315 	stw	r19,12(sp)
  801f9c:	dc800215 	stw	r18,8(sp)
  801fa0:	dc400115 	stw	r17,4(sp)
  801fa4:	dc000015 	stw	r16,0(sp)
  801fa8:	dfc00415 	stw	ra,16(sp)
  801fac:	10c0400c 	andi	r3,r2,256
  801fb0:	2821883a 	mov	r16,r5
  801fb4:	2023883a 	mov	r17,r4
  801fb8:	3025883a 	mov	r18,r6
  801fbc:	3827883a 	mov	r19,r7
  801fc0:	18000526 	beq	r3,zero,801fd8 <__swrite+0x48>
  801fc4:	2940038f 	ldh	r5,14(r5)
  801fc8:	01c00084 	movi	r7,2
  801fcc:	000d883a 	mov	r6,zero
  801fd0:	0802a580 	call	802a58 <_lseek_r>
  801fd4:	8080030b 	ldhu	r2,12(r16)
  801fd8:	8140038f 	ldh	r5,14(r16)
  801fdc:	10bbffcc 	andi	r2,r2,61439
  801fe0:	980f883a 	mov	r7,r19
  801fe4:	900d883a 	mov	r6,r18
  801fe8:	8809883a 	mov	r4,r17
  801fec:	8080030d 	sth	r2,12(r16)
  801ff0:	dfc00417 	ldw	ra,16(sp)
  801ff4:	dcc00317 	ldw	r19,12(sp)
  801ff8:	dc800217 	ldw	r18,8(sp)
  801ffc:	dc400117 	ldw	r17,4(sp)
  802000:	dc000017 	ldw	r16,0(sp)
  802004:	dec00504 	addi	sp,sp,20
  802008:	08020701 	jmpi	802070 <_write_r>

0080200c <__sseek>:
  80200c:	defffe04 	addi	sp,sp,-8
  802010:	dc000015 	stw	r16,0(sp)
  802014:	2821883a 	mov	r16,r5
  802018:	2940038f 	ldh	r5,14(r5)
  80201c:	dfc00115 	stw	ra,4(sp)
  802020:	0802a580 	call	802a58 <_lseek_r>
  802024:	00ffffc4 	movi	r3,-1
  802028:	10c00826 	beq	r2,r3,80204c <__sseek+0x40>
  80202c:	80c0030b 	ldhu	r3,12(r16)
  802030:	80801415 	stw	r2,80(r16)
  802034:	18c40014 	ori	r3,r3,4096
  802038:	80c0030d 	sth	r3,12(r16)
  80203c:	dfc00117 	ldw	ra,4(sp)
  802040:	dc000017 	ldw	r16,0(sp)
  802044:	dec00204 	addi	sp,sp,8
  802048:	f800283a 	ret
  80204c:	80c0030b 	ldhu	r3,12(r16)
  802050:	18fbffcc 	andi	r3,r3,61439
  802054:	80c0030d 	sth	r3,12(r16)
  802058:	dfc00117 	ldw	ra,4(sp)
  80205c:	dc000017 	ldw	r16,0(sp)
  802060:	dec00204 	addi	sp,sp,8
  802064:	f800283a 	ret

00802068 <__sclose>:
  802068:	2940038f 	ldh	r5,14(r5)
  80206c:	08022241 	jmpi	802224 <_close_r>

00802070 <_write_r>:
  802070:	defffd04 	addi	sp,sp,-12
  802074:	2805883a 	mov	r2,r5
  802078:	dc000015 	stw	r16,0(sp)
  80207c:	04002074 	movhi	r16,129
  802080:	dc400115 	stw	r17,4(sp)
  802084:	300b883a 	mov	r5,r6
  802088:	84057c04 	addi	r16,r16,5616
  80208c:	2023883a 	mov	r17,r4
  802090:	380d883a 	mov	r6,r7
  802094:	1009883a 	mov	r4,r2
  802098:	dfc00215 	stw	ra,8(sp)
  80209c:	80000015 	stw	zero,0(r16)
  8020a0:	08037000 	call	803700 <write>
  8020a4:	00ffffc4 	movi	r3,-1
  8020a8:	10c00526 	beq	r2,r3,8020c0 <_write_r+0x50>
  8020ac:	dfc00217 	ldw	ra,8(sp)
  8020b0:	dc400117 	ldw	r17,4(sp)
  8020b4:	dc000017 	ldw	r16,0(sp)
  8020b8:	dec00304 	addi	sp,sp,12
  8020bc:	f800283a 	ret
  8020c0:	80c00017 	ldw	r3,0(r16)
  8020c4:	183ff926 	beq	r3,zero,8020ac <__alt_mem_epcs_flash_controller_0+0xff7f90ac>
  8020c8:	88c00015 	stw	r3,0(r17)
  8020cc:	003ff706 	br	8020ac <__alt_mem_epcs_flash_controller_0+0xff7f90ac>

008020d0 <__swsetup_r>:
  8020d0:	00802074 	movhi	r2,129
  8020d4:	defffd04 	addi	sp,sp,-12
  8020d8:	10854b04 	addi	r2,r2,5420
  8020dc:	dc400115 	stw	r17,4(sp)
  8020e0:	2023883a 	mov	r17,r4
  8020e4:	11000017 	ldw	r4,0(r2)
  8020e8:	dc000015 	stw	r16,0(sp)
  8020ec:	dfc00215 	stw	ra,8(sp)
  8020f0:	2821883a 	mov	r16,r5
  8020f4:	20000226 	beq	r4,zero,802100 <__swsetup_r+0x30>
  8020f8:	20800e17 	ldw	r2,56(r4)
  8020fc:	10003126 	beq	r2,zero,8021c4 <__swsetup_r+0xf4>
  802100:	8080030b 	ldhu	r2,12(r16)
  802104:	10c0020c 	andi	r3,r2,8
  802108:	1009883a 	mov	r4,r2
  80210c:	18000f26 	beq	r3,zero,80214c <__swsetup_r+0x7c>
  802110:	80c00417 	ldw	r3,16(r16)
  802114:	18001526 	beq	r3,zero,80216c <__swsetup_r+0x9c>
  802118:	1100004c 	andi	r4,r2,1
  80211c:	20001c1e 	bne	r4,zero,802190 <__swsetup_r+0xc0>
  802120:	1080008c 	andi	r2,r2,2
  802124:	1000291e 	bne	r2,zero,8021cc <__swsetup_r+0xfc>
  802128:	80800517 	ldw	r2,20(r16)
  80212c:	80800215 	stw	r2,8(r16)
  802130:	18001c26 	beq	r3,zero,8021a4 <__swsetup_r+0xd4>
  802134:	0005883a 	mov	r2,zero
  802138:	dfc00217 	ldw	ra,8(sp)
  80213c:	dc400117 	ldw	r17,4(sp)
  802140:	dc000017 	ldw	r16,0(sp)
  802144:	dec00304 	addi	sp,sp,12
  802148:	f800283a 	ret
  80214c:	2080040c 	andi	r2,r4,16
  802150:	10002e26 	beq	r2,zero,80220c <__swsetup_r+0x13c>
  802154:	2080010c 	andi	r2,r4,4
  802158:	10001e1e 	bne	r2,zero,8021d4 <__swsetup_r+0x104>
  80215c:	80c00417 	ldw	r3,16(r16)
  802160:	20800214 	ori	r2,r4,8
  802164:	8080030d 	sth	r2,12(r16)
  802168:	183feb1e 	bne	r3,zero,802118 <__alt_mem_epcs_flash_controller_0+0xff7f9118>
  80216c:	1100a00c 	andi	r4,r2,640
  802170:	01408004 	movi	r5,512
  802174:	217fe826 	beq	r4,r5,802118 <__alt_mem_epcs_flash_controller_0+0xff7f9118>
  802178:	800b883a 	mov	r5,r16
  80217c:	8809883a 	mov	r4,r17
  802180:	0802ab80 	call	802ab8 <__smakebuf_r>
  802184:	8080030b 	ldhu	r2,12(r16)
  802188:	80c00417 	ldw	r3,16(r16)
  80218c:	003fe206 	br	802118 <__alt_mem_epcs_flash_controller_0+0xff7f9118>
  802190:	80800517 	ldw	r2,20(r16)
  802194:	80000215 	stw	zero,8(r16)
  802198:	0085c83a 	sub	r2,zero,r2
  80219c:	80800615 	stw	r2,24(r16)
  8021a0:	183fe41e 	bne	r3,zero,802134 <__alt_mem_epcs_flash_controller_0+0xff7f9134>
  8021a4:	80c0030b 	ldhu	r3,12(r16)
  8021a8:	0005883a 	mov	r2,zero
  8021ac:	1900200c 	andi	r4,r3,128
  8021b0:	203fe126 	beq	r4,zero,802138 <__alt_mem_epcs_flash_controller_0+0xff7f9138>
  8021b4:	18c01014 	ori	r3,r3,64
  8021b8:	80c0030d 	sth	r3,12(r16)
  8021bc:	00bfffc4 	movi	r2,-1
  8021c0:	003fdd06 	br	802138 <__alt_mem_epcs_flash_controller_0+0xff7f9138>
  8021c4:	08006200 	call	800620 <__sinit>
  8021c8:	003fcd06 	br	802100 <__alt_mem_epcs_flash_controller_0+0xff7f9100>
  8021cc:	0005883a 	mov	r2,zero
  8021d0:	003fd606 	br	80212c <__alt_mem_epcs_flash_controller_0+0xff7f912c>
  8021d4:	81400c17 	ldw	r5,48(r16)
  8021d8:	28000626 	beq	r5,zero,8021f4 <__swsetup_r+0x124>
  8021dc:	80801004 	addi	r2,r16,64
  8021e0:	28800326 	beq	r5,r2,8021f0 <__swsetup_r+0x120>
  8021e4:	8809883a 	mov	r4,r17
  8021e8:	08027480 	call	802748 <_free_r>
  8021ec:	8100030b 	ldhu	r4,12(r16)
  8021f0:	80000c15 	stw	zero,48(r16)
  8021f4:	80c00417 	ldw	r3,16(r16)
  8021f8:	00bff6c4 	movi	r2,-37
  8021fc:	1108703a 	and	r4,r2,r4
  802200:	80000115 	stw	zero,4(r16)
  802204:	80c00015 	stw	r3,0(r16)
  802208:	003fd506 	br	802160 <__alt_mem_epcs_flash_controller_0+0xff7f9160>
  80220c:	00800244 	movi	r2,9
  802210:	88800015 	stw	r2,0(r17)
  802214:	20801014 	ori	r2,r4,64
  802218:	8080030d 	sth	r2,12(r16)
  80221c:	00bfffc4 	movi	r2,-1
  802220:	003fc506 	br	802138 <__alt_mem_epcs_flash_controller_0+0xff7f9138>

00802224 <_close_r>:
  802224:	defffd04 	addi	sp,sp,-12
  802228:	dc000015 	stw	r16,0(sp)
  80222c:	04002074 	movhi	r16,129
  802230:	dc400115 	stw	r17,4(sp)
  802234:	84057c04 	addi	r16,r16,5616
  802238:	2023883a 	mov	r17,r4
  80223c:	2809883a 	mov	r4,r5
  802240:	dfc00215 	stw	ra,8(sp)
  802244:	80000015 	stw	zero,0(r16)
  802248:	0802f9c0 	call	802f9c <close>
  80224c:	00ffffc4 	movi	r3,-1
  802250:	10c00526 	beq	r2,r3,802268 <_close_r+0x44>
  802254:	dfc00217 	ldw	ra,8(sp)
  802258:	dc400117 	ldw	r17,4(sp)
  80225c:	dc000017 	ldw	r16,0(sp)
  802260:	dec00304 	addi	sp,sp,12
  802264:	f800283a 	ret
  802268:	80c00017 	ldw	r3,0(r16)
  80226c:	183ff926 	beq	r3,zero,802254 <__alt_mem_epcs_flash_controller_0+0xff7f9254>
  802270:	88c00015 	stw	r3,0(r17)
  802274:	003ff706 	br	802254 <__alt_mem_epcs_flash_controller_0+0xff7f9254>

00802278 <_fclose_r>:
  802278:	28003926 	beq	r5,zero,802360 <_fclose_r+0xe8>
  80227c:	defffc04 	addi	sp,sp,-16
  802280:	dc400115 	stw	r17,4(sp)
  802284:	dc000015 	stw	r16,0(sp)
  802288:	dfc00315 	stw	ra,12(sp)
  80228c:	dc800215 	stw	r18,8(sp)
  802290:	2023883a 	mov	r17,r4
  802294:	2821883a 	mov	r16,r5
  802298:	20000226 	beq	r4,zero,8022a4 <_fclose_r+0x2c>
  80229c:	20800e17 	ldw	r2,56(r4)
  8022a0:	10002726 	beq	r2,zero,802340 <_fclose_r+0xc8>
  8022a4:	8080030f 	ldh	r2,12(r16)
  8022a8:	1000071e 	bne	r2,zero,8022c8 <_fclose_r+0x50>
  8022ac:	0005883a 	mov	r2,zero
  8022b0:	dfc00317 	ldw	ra,12(sp)
  8022b4:	dc800217 	ldw	r18,8(sp)
  8022b8:	dc400117 	ldw	r17,4(sp)
  8022bc:	dc000017 	ldw	r16,0(sp)
  8022c0:	dec00404 	addi	sp,sp,16
  8022c4:	f800283a 	ret
  8022c8:	800b883a 	mov	r5,r16
  8022cc:	8809883a 	mov	r4,r17
  8022d0:	080237c0 	call	80237c <__sflush_r>
  8022d4:	1025883a 	mov	r18,r2
  8022d8:	80800b17 	ldw	r2,44(r16)
  8022dc:	10000426 	beq	r2,zero,8022f0 <_fclose_r+0x78>
  8022e0:	81400717 	ldw	r5,28(r16)
  8022e4:	8809883a 	mov	r4,r17
  8022e8:	103ee83a 	callr	r2
  8022ec:	10001616 	blt	r2,zero,802348 <_fclose_r+0xd0>
  8022f0:	8080030b 	ldhu	r2,12(r16)
  8022f4:	1080200c 	andi	r2,r2,128
  8022f8:	1000151e 	bne	r2,zero,802350 <_fclose_r+0xd8>
  8022fc:	81400c17 	ldw	r5,48(r16)
  802300:	28000526 	beq	r5,zero,802318 <_fclose_r+0xa0>
  802304:	80801004 	addi	r2,r16,64
  802308:	28800226 	beq	r5,r2,802314 <_fclose_r+0x9c>
  80230c:	8809883a 	mov	r4,r17
  802310:	08027480 	call	802748 <_free_r>
  802314:	80000c15 	stw	zero,48(r16)
  802318:	81401117 	ldw	r5,68(r16)
  80231c:	28000326 	beq	r5,zero,80232c <_fclose_r+0xb4>
  802320:	8809883a 	mov	r4,r17
  802324:	08027480 	call	802748 <_free_r>
  802328:	80001115 	stw	zero,68(r16)
  80232c:	08006300 	call	800630 <__sfp_lock_acquire>
  802330:	8000030d 	sth	zero,12(r16)
  802334:	08006340 	call	800634 <__sfp_lock_release>
  802338:	9005883a 	mov	r2,r18
  80233c:	003fdc06 	br	8022b0 <__alt_mem_epcs_flash_controller_0+0xff7f92b0>
  802340:	08006200 	call	800620 <__sinit>
  802344:	003fd706 	br	8022a4 <__alt_mem_epcs_flash_controller_0+0xff7f92a4>
  802348:	04bfffc4 	movi	r18,-1
  80234c:	003fe806 	br	8022f0 <__alt_mem_epcs_flash_controller_0+0xff7f92f0>
  802350:	81400417 	ldw	r5,16(r16)
  802354:	8809883a 	mov	r4,r17
  802358:	08027480 	call	802748 <_free_r>
  80235c:	003fe706 	br	8022fc <__alt_mem_epcs_flash_controller_0+0xff7f92fc>
  802360:	0005883a 	mov	r2,zero
  802364:	f800283a 	ret

00802368 <fclose>:
  802368:	00802074 	movhi	r2,129
  80236c:	10854b04 	addi	r2,r2,5420
  802370:	200b883a 	mov	r5,r4
  802374:	11000017 	ldw	r4,0(r2)
  802378:	08022781 	jmpi	802278 <_fclose_r>

0080237c <__sflush_r>:
  80237c:	2880030b 	ldhu	r2,12(r5)
  802380:	defffb04 	addi	sp,sp,-20
  802384:	dcc00315 	stw	r19,12(sp)
  802388:	dc400115 	stw	r17,4(sp)
  80238c:	dfc00415 	stw	ra,16(sp)
  802390:	dc800215 	stw	r18,8(sp)
  802394:	dc000015 	stw	r16,0(sp)
  802398:	10c0020c 	andi	r3,r2,8
  80239c:	2823883a 	mov	r17,r5
  8023a0:	2027883a 	mov	r19,r4
  8023a4:	1800311e 	bne	r3,zero,80246c <__sflush_r+0xf0>
  8023a8:	28c00117 	ldw	r3,4(r5)
  8023ac:	10820014 	ori	r2,r2,2048
  8023b0:	2880030d 	sth	r2,12(r5)
  8023b4:	00c04b0e 	bge	zero,r3,8024e4 <__sflush_r+0x168>
  8023b8:	8a000a17 	ldw	r8,40(r17)
  8023bc:	40002326 	beq	r8,zero,80244c <__sflush_r+0xd0>
  8023c0:	9c000017 	ldw	r16,0(r19)
  8023c4:	10c4000c 	andi	r3,r2,4096
  8023c8:	98000015 	stw	zero,0(r19)
  8023cc:	18004826 	beq	r3,zero,8024f0 <__sflush_r+0x174>
  8023d0:	89801417 	ldw	r6,80(r17)
  8023d4:	10c0010c 	andi	r3,r2,4
  8023d8:	18000626 	beq	r3,zero,8023f4 <__sflush_r+0x78>
  8023dc:	88c00117 	ldw	r3,4(r17)
  8023e0:	88800c17 	ldw	r2,48(r17)
  8023e4:	30cdc83a 	sub	r6,r6,r3
  8023e8:	10000226 	beq	r2,zero,8023f4 <__sflush_r+0x78>
  8023ec:	88800f17 	ldw	r2,60(r17)
  8023f0:	308dc83a 	sub	r6,r6,r2
  8023f4:	89400717 	ldw	r5,28(r17)
  8023f8:	000f883a 	mov	r7,zero
  8023fc:	9809883a 	mov	r4,r19
  802400:	403ee83a 	callr	r8
  802404:	00ffffc4 	movi	r3,-1
  802408:	10c04426 	beq	r2,r3,80251c <__sflush_r+0x1a0>
  80240c:	88c0030b 	ldhu	r3,12(r17)
  802410:	89000417 	ldw	r4,16(r17)
  802414:	88000115 	stw	zero,4(r17)
  802418:	197dffcc 	andi	r5,r3,63487
  80241c:	8940030d 	sth	r5,12(r17)
  802420:	89000015 	stw	r4,0(r17)
  802424:	18c4000c 	andi	r3,r3,4096
  802428:	18002c1e 	bne	r3,zero,8024dc <__sflush_r+0x160>
  80242c:	89400c17 	ldw	r5,48(r17)
  802430:	9c000015 	stw	r16,0(r19)
  802434:	28000526 	beq	r5,zero,80244c <__sflush_r+0xd0>
  802438:	88801004 	addi	r2,r17,64
  80243c:	28800226 	beq	r5,r2,802448 <__sflush_r+0xcc>
  802440:	9809883a 	mov	r4,r19
  802444:	08027480 	call	802748 <_free_r>
  802448:	88000c15 	stw	zero,48(r17)
  80244c:	0005883a 	mov	r2,zero
  802450:	dfc00417 	ldw	ra,16(sp)
  802454:	dcc00317 	ldw	r19,12(sp)
  802458:	dc800217 	ldw	r18,8(sp)
  80245c:	dc400117 	ldw	r17,4(sp)
  802460:	dc000017 	ldw	r16,0(sp)
  802464:	dec00504 	addi	sp,sp,20
  802468:	f800283a 	ret
  80246c:	2c800417 	ldw	r18,16(r5)
  802470:	903ff626 	beq	r18,zero,80244c <__alt_mem_epcs_flash_controller_0+0xff7f944c>
  802474:	2c000017 	ldw	r16,0(r5)
  802478:	108000cc 	andi	r2,r2,3
  80247c:	2c800015 	stw	r18,0(r5)
  802480:	84a1c83a 	sub	r16,r16,r18
  802484:	1000131e 	bne	r2,zero,8024d4 <__sflush_r+0x158>
  802488:	28800517 	ldw	r2,20(r5)
  80248c:	88800215 	stw	r2,8(r17)
  802490:	04000316 	blt	zero,r16,8024a0 <__sflush_r+0x124>
  802494:	003fed06 	br	80244c <__alt_mem_epcs_flash_controller_0+0xff7f944c>
  802498:	90a5883a 	add	r18,r18,r2
  80249c:	043feb0e 	bge	zero,r16,80244c <__alt_mem_epcs_flash_controller_0+0xff7f944c>
  8024a0:	88800917 	ldw	r2,36(r17)
  8024a4:	89400717 	ldw	r5,28(r17)
  8024a8:	800f883a 	mov	r7,r16
  8024ac:	900d883a 	mov	r6,r18
  8024b0:	9809883a 	mov	r4,r19
  8024b4:	103ee83a 	callr	r2
  8024b8:	80a1c83a 	sub	r16,r16,r2
  8024bc:	00bff616 	blt	zero,r2,802498 <__alt_mem_epcs_flash_controller_0+0xff7f9498>
  8024c0:	88c0030b 	ldhu	r3,12(r17)
  8024c4:	00bfffc4 	movi	r2,-1
  8024c8:	18c01014 	ori	r3,r3,64
  8024cc:	88c0030d 	sth	r3,12(r17)
  8024d0:	003fdf06 	br	802450 <__alt_mem_epcs_flash_controller_0+0xff7f9450>
  8024d4:	0005883a 	mov	r2,zero
  8024d8:	003fec06 	br	80248c <__alt_mem_epcs_flash_controller_0+0xff7f948c>
  8024dc:	88801415 	stw	r2,80(r17)
  8024e0:	003fd206 	br	80242c <__alt_mem_epcs_flash_controller_0+0xff7f942c>
  8024e4:	28c00f17 	ldw	r3,60(r5)
  8024e8:	00ffb316 	blt	zero,r3,8023b8 <__alt_mem_epcs_flash_controller_0+0xff7f93b8>
  8024ec:	003fd706 	br	80244c <__alt_mem_epcs_flash_controller_0+0xff7f944c>
  8024f0:	89400717 	ldw	r5,28(r17)
  8024f4:	000d883a 	mov	r6,zero
  8024f8:	01c00044 	movi	r7,1
  8024fc:	9809883a 	mov	r4,r19
  802500:	403ee83a 	callr	r8
  802504:	100d883a 	mov	r6,r2
  802508:	00bfffc4 	movi	r2,-1
  80250c:	30801426 	beq	r6,r2,802560 <__sflush_r+0x1e4>
  802510:	8880030b 	ldhu	r2,12(r17)
  802514:	8a000a17 	ldw	r8,40(r17)
  802518:	003fae06 	br	8023d4 <__alt_mem_epcs_flash_controller_0+0xff7f93d4>
  80251c:	98c00017 	ldw	r3,0(r19)
  802520:	183fba26 	beq	r3,zero,80240c <__alt_mem_epcs_flash_controller_0+0xff7f940c>
  802524:	01000744 	movi	r4,29
  802528:	19000626 	beq	r3,r4,802544 <__sflush_r+0x1c8>
  80252c:	01000584 	movi	r4,22
  802530:	19000426 	beq	r3,r4,802544 <__sflush_r+0x1c8>
  802534:	88c0030b 	ldhu	r3,12(r17)
  802538:	18c01014 	ori	r3,r3,64
  80253c:	88c0030d 	sth	r3,12(r17)
  802540:	003fc306 	br	802450 <__alt_mem_epcs_flash_controller_0+0xff7f9450>
  802544:	8880030b 	ldhu	r2,12(r17)
  802548:	88c00417 	ldw	r3,16(r17)
  80254c:	88000115 	stw	zero,4(r17)
  802550:	10bdffcc 	andi	r2,r2,63487
  802554:	8880030d 	sth	r2,12(r17)
  802558:	88c00015 	stw	r3,0(r17)
  80255c:	003fb306 	br	80242c <__alt_mem_epcs_flash_controller_0+0xff7f942c>
  802560:	98800017 	ldw	r2,0(r19)
  802564:	103fea26 	beq	r2,zero,802510 <__alt_mem_epcs_flash_controller_0+0xff7f9510>
  802568:	00c00744 	movi	r3,29
  80256c:	10c00226 	beq	r2,r3,802578 <__sflush_r+0x1fc>
  802570:	00c00584 	movi	r3,22
  802574:	10c0031e 	bne	r2,r3,802584 <__sflush_r+0x208>
  802578:	9c000015 	stw	r16,0(r19)
  80257c:	0005883a 	mov	r2,zero
  802580:	003fb306 	br	802450 <__alt_mem_epcs_flash_controller_0+0xff7f9450>
  802584:	88c0030b 	ldhu	r3,12(r17)
  802588:	3005883a 	mov	r2,r6
  80258c:	18c01014 	ori	r3,r3,64
  802590:	88c0030d 	sth	r3,12(r17)
  802594:	003fae06 	br	802450 <__alt_mem_epcs_flash_controller_0+0xff7f9450>

00802598 <_fflush_r>:
  802598:	defffd04 	addi	sp,sp,-12
  80259c:	dc000115 	stw	r16,4(sp)
  8025a0:	dfc00215 	stw	ra,8(sp)
  8025a4:	2021883a 	mov	r16,r4
  8025a8:	20000226 	beq	r4,zero,8025b4 <_fflush_r+0x1c>
  8025ac:	20800e17 	ldw	r2,56(r4)
  8025b0:	10000c26 	beq	r2,zero,8025e4 <_fflush_r+0x4c>
  8025b4:	2880030f 	ldh	r2,12(r5)
  8025b8:	1000051e 	bne	r2,zero,8025d0 <_fflush_r+0x38>
  8025bc:	0005883a 	mov	r2,zero
  8025c0:	dfc00217 	ldw	ra,8(sp)
  8025c4:	dc000117 	ldw	r16,4(sp)
  8025c8:	dec00304 	addi	sp,sp,12
  8025cc:	f800283a 	ret
  8025d0:	8009883a 	mov	r4,r16
  8025d4:	dfc00217 	ldw	ra,8(sp)
  8025d8:	dc000117 	ldw	r16,4(sp)
  8025dc:	dec00304 	addi	sp,sp,12
  8025e0:	080237c1 	jmpi	80237c <__sflush_r>
  8025e4:	d9400015 	stw	r5,0(sp)
  8025e8:	08006200 	call	800620 <__sinit>
  8025ec:	d9400017 	ldw	r5,0(sp)
  8025f0:	003ff006 	br	8025b4 <__alt_mem_epcs_flash_controller_0+0xff7f95b4>

008025f4 <fflush>:
  8025f4:	20000526 	beq	r4,zero,80260c <fflush+0x18>
  8025f8:	00802074 	movhi	r2,129
  8025fc:	10854b04 	addi	r2,r2,5420
  802600:	200b883a 	mov	r5,r4
  802604:	11000017 	ldw	r4,0(r2)
  802608:	08025981 	jmpi	802598 <_fflush_r>
  80260c:	00802074 	movhi	r2,129
  802610:	10854a04 	addi	r2,r2,5416
  802614:	11000017 	ldw	r4,0(r2)
  802618:	01402034 	movhi	r5,128
  80261c:	29496604 	addi	r5,r5,9624
  802620:	0800bfc1 	jmpi	800bfc <_fwalk_reent>

00802624 <_malloc_trim_r>:
  802624:	defffb04 	addi	sp,sp,-20
  802628:	dcc00315 	stw	r19,12(sp)
  80262c:	04c02074 	movhi	r19,129
  802630:	dc800215 	stw	r18,8(sp)
  802634:	dc400115 	stw	r17,4(sp)
  802638:	dc000015 	stw	r16,0(sp)
  80263c:	dfc00415 	stw	ra,16(sp)
  802640:	2821883a 	mov	r16,r5
  802644:	9cff2804 	addi	r19,r19,-864
  802648:	2025883a 	mov	r18,r4
  80264c:	08039240 	call	803924 <__malloc_lock>
  802650:	98800217 	ldw	r2,8(r19)
  802654:	14400117 	ldw	r17,4(r2)
  802658:	00bfff04 	movi	r2,-4
  80265c:	88a2703a 	and	r17,r17,r2
  802660:	8c21c83a 	sub	r16,r17,r16
  802664:	8403fbc4 	addi	r16,r16,4079
  802668:	8020d33a 	srli	r16,r16,12
  80266c:	0083ffc4 	movi	r2,4095
  802670:	843fffc4 	addi	r16,r16,-1
  802674:	8020933a 	slli	r16,r16,12
  802678:	1400060e 	bge	r2,r16,802694 <_malloc_trim_r+0x70>
  80267c:	000b883a 	mov	r5,zero
  802680:	9009883a 	mov	r4,r18
  802684:	0801ee00 	call	801ee0 <_sbrk_r>
  802688:	98c00217 	ldw	r3,8(r19)
  80268c:	1c47883a 	add	r3,r3,r17
  802690:	10c00a26 	beq	r2,r3,8026bc <_malloc_trim_r+0x98>
  802694:	9009883a 	mov	r4,r18
  802698:	0803a440 	call	803a44 <__malloc_unlock>
  80269c:	0005883a 	mov	r2,zero
  8026a0:	dfc00417 	ldw	ra,16(sp)
  8026a4:	dcc00317 	ldw	r19,12(sp)
  8026a8:	dc800217 	ldw	r18,8(sp)
  8026ac:	dc400117 	ldw	r17,4(sp)
  8026b0:	dc000017 	ldw	r16,0(sp)
  8026b4:	dec00504 	addi	sp,sp,20
  8026b8:	f800283a 	ret
  8026bc:	040bc83a 	sub	r5,zero,r16
  8026c0:	9009883a 	mov	r4,r18
  8026c4:	0801ee00 	call	801ee0 <_sbrk_r>
  8026c8:	00ffffc4 	movi	r3,-1
  8026cc:	10c00d26 	beq	r2,r3,802704 <_malloc_trim_r+0xe0>
  8026d0:	00c02074 	movhi	r3,129
  8026d4:	18c59d04 	addi	r3,r3,5748
  8026d8:	18800017 	ldw	r2,0(r3)
  8026dc:	99000217 	ldw	r4,8(r19)
  8026e0:	8c23c83a 	sub	r17,r17,r16
  8026e4:	8c400054 	ori	r17,r17,1
  8026e8:	1421c83a 	sub	r16,r2,r16
  8026ec:	24400115 	stw	r17,4(r4)
  8026f0:	9009883a 	mov	r4,r18
  8026f4:	1c000015 	stw	r16,0(r3)
  8026f8:	0803a440 	call	803a44 <__malloc_unlock>
  8026fc:	00800044 	movi	r2,1
  802700:	003fe706 	br	8026a0 <__alt_mem_epcs_flash_controller_0+0xff7f96a0>
  802704:	000b883a 	mov	r5,zero
  802708:	9009883a 	mov	r4,r18
  80270c:	0801ee00 	call	801ee0 <_sbrk_r>
  802710:	99000217 	ldw	r4,8(r19)
  802714:	014003c4 	movi	r5,15
  802718:	1107c83a 	sub	r3,r2,r4
  80271c:	28ffdd0e 	bge	r5,r3,802694 <__alt_mem_epcs_flash_controller_0+0xff7f9694>
  802720:	01402074 	movhi	r5,129
  802724:	29454c04 	addi	r5,r5,5424
  802728:	29400017 	ldw	r5,0(r5)
  80272c:	18c00054 	ori	r3,r3,1
  802730:	20c00115 	stw	r3,4(r4)
  802734:	00c02074 	movhi	r3,129
  802738:	1145c83a 	sub	r2,r2,r5
  80273c:	18c59d04 	addi	r3,r3,5748
  802740:	18800015 	stw	r2,0(r3)
  802744:	003fd306 	br	802694 <__alt_mem_epcs_flash_controller_0+0xff7f9694>

00802748 <_free_r>:
  802748:	28004126 	beq	r5,zero,802850 <_free_r+0x108>
  80274c:	defffd04 	addi	sp,sp,-12
  802750:	dc400115 	stw	r17,4(sp)
  802754:	dc000015 	stw	r16,0(sp)
  802758:	2023883a 	mov	r17,r4
  80275c:	2821883a 	mov	r16,r5
  802760:	dfc00215 	stw	ra,8(sp)
  802764:	08039240 	call	803924 <__malloc_lock>
  802768:	81ffff17 	ldw	r7,-4(r16)
  80276c:	00bfff84 	movi	r2,-2
  802770:	01002074 	movhi	r4,129
  802774:	81bffe04 	addi	r6,r16,-8
  802778:	3884703a 	and	r2,r7,r2
  80277c:	213f2804 	addi	r4,r4,-864
  802780:	308b883a 	add	r5,r6,r2
  802784:	2a400117 	ldw	r9,4(r5)
  802788:	22000217 	ldw	r8,8(r4)
  80278c:	00ffff04 	movi	r3,-4
  802790:	48c6703a 	and	r3,r9,r3
  802794:	2a005726 	beq	r5,r8,8028f4 <_free_r+0x1ac>
  802798:	28c00115 	stw	r3,4(r5)
  80279c:	39c0004c 	andi	r7,r7,1
  8027a0:	3800091e 	bne	r7,zero,8027c8 <_free_r+0x80>
  8027a4:	823ffe17 	ldw	r8,-8(r16)
  8027a8:	22400204 	addi	r9,r4,8
  8027ac:	320dc83a 	sub	r6,r6,r8
  8027b0:	31c00217 	ldw	r7,8(r6)
  8027b4:	1205883a 	add	r2,r2,r8
  8027b8:	3a406526 	beq	r7,r9,802950 <_free_r+0x208>
  8027bc:	32000317 	ldw	r8,12(r6)
  8027c0:	3a000315 	stw	r8,12(r7)
  8027c4:	41c00215 	stw	r7,8(r8)
  8027c8:	28cf883a 	add	r7,r5,r3
  8027cc:	39c00117 	ldw	r7,4(r7)
  8027d0:	39c0004c 	andi	r7,r7,1
  8027d4:	38003a26 	beq	r7,zero,8028c0 <_free_r+0x178>
  8027d8:	10c00054 	ori	r3,r2,1
  8027dc:	30c00115 	stw	r3,4(r6)
  8027e0:	3087883a 	add	r3,r6,r2
  8027e4:	18800015 	stw	r2,0(r3)
  8027e8:	00c07fc4 	movi	r3,511
  8027ec:	18801936 	bltu	r3,r2,802854 <_free_r+0x10c>
  8027f0:	1004d0fa 	srli	r2,r2,3
  8027f4:	01c00044 	movi	r7,1
  8027f8:	21400117 	ldw	r5,4(r4)
  8027fc:	10c00044 	addi	r3,r2,1
  802800:	18c7883a 	add	r3,r3,r3
  802804:	1005d0ba 	srai	r2,r2,2
  802808:	18c7883a 	add	r3,r3,r3
  80280c:	18c7883a 	add	r3,r3,r3
  802810:	1907883a 	add	r3,r3,r4
  802814:	3884983a 	sll	r2,r7,r2
  802818:	19c00017 	ldw	r7,0(r3)
  80281c:	1a3ffe04 	addi	r8,r3,-8
  802820:	1144b03a 	or	r2,r2,r5
  802824:	32000315 	stw	r8,12(r6)
  802828:	31c00215 	stw	r7,8(r6)
  80282c:	20800115 	stw	r2,4(r4)
  802830:	19800015 	stw	r6,0(r3)
  802834:	39800315 	stw	r6,12(r7)
  802838:	8809883a 	mov	r4,r17
  80283c:	dfc00217 	ldw	ra,8(sp)
  802840:	dc400117 	ldw	r17,4(sp)
  802844:	dc000017 	ldw	r16,0(sp)
  802848:	dec00304 	addi	sp,sp,12
  80284c:	0803a441 	jmpi	803a44 <__malloc_unlock>
  802850:	f800283a 	ret
  802854:	100ad27a 	srli	r5,r2,9
  802858:	00c00104 	movi	r3,4
  80285c:	19404a36 	bltu	r3,r5,802988 <_free_r+0x240>
  802860:	100ad1ba 	srli	r5,r2,6
  802864:	28c00e44 	addi	r3,r5,57
  802868:	18c7883a 	add	r3,r3,r3
  80286c:	29400e04 	addi	r5,r5,56
  802870:	18c7883a 	add	r3,r3,r3
  802874:	18c7883a 	add	r3,r3,r3
  802878:	1909883a 	add	r4,r3,r4
  80287c:	20c00017 	ldw	r3,0(r4)
  802880:	01c02074 	movhi	r7,129
  802884:	213ffe04 	addi	r4,r4,-8
  802888:	39ff2804 	addi	r7,r7,-864
  80288c:	20c04426 	beq	r4,r3,8029a0 <_free_r+0x258>
  802890:	01ffff04 	movi	r7,-4
  802894:	19400117 	ldw	r5,4(r3)
  802898:	29ca703a 	and	r5,r5,r7
  80289c:	1140022e 	bgeu	r2,r5,8028a8 <_free_r+0x160>
  8028a0:	18c00217 	ldw	r3,8(r3)
  8028a4:	20fffb1e 	bne	r4,r3,802894 <__alt_mem_epcs_flash_controller_0+0xff7f9894>
  8028a8:	19000317 	ldw	r4,12(r3)
  8028ac:	31000315 	stw	r4,12(r6)
  8028b0:	30c00215 	stw	r3,8(r6)
  8028b4:	21800215 	stw	r6,8(r4)
  8028b8:	19800315 	stw	r6,12(r3)
  8028bc:	003fde06 	br	802838 <__alt_mem_epcs_flash_controller_0+0xff7f9838>
  8028c0:	29c00217 	ldw	r7,8(r5)
  8028c4:	10c5883a 	add	r2,r2,r3
  8028c8:	00c02074 	movhi	r3,129
  8028cc:	18ff2a04 	addi	r3,r3,-856
  8028d0:	38c03b26 	beq	r7,r3,8029c0 <_free_r+0x278>
  8028d4:	2a000317 	ldw	r8,12(r5)
  8028d8:	11400054 	ori	r5,r2,1
  8028dc:	3087883a 	add	r3,r6,r2
  8028e0:	3a000315 	stw	r8,12(r7)
  8028e4:	41c00215 	stw	r7,8(r8)
  8028e8:	31400115 	stw	r5,4(r6)
  8028ec:	18800015 	stw	r2,0(r3)
  8028f0:	003fbd06 	br	8027e8 <__alt_mem_epcs_flash_controller_0+0xff7f97e8>
  8028f4:	39c0004c 	andi	r7,r7,1
  8028f8:	10c5883a 	add	r2,r2,r3
  8028fc:	3800071e 	bne	r7,zero,80291c <_free_r+0x1d4>
  802900:	81fffe17 	ldw	r7,-8(r16)
  802904:	31cdc83a 	sub	r6,r6,r7
  802908:	30c00317 	ldw	r3,12(r6)
  80290c:	31400217 	ldw	r5,8(r6)
  802910:	11c5883a 	add	r2,r2,r7
  802914:	28c00315 	stw	r3,12(r5)
  802918:	19400215 	stw	r5,8(r3)
  80291c:	10c00054 	ori	r3,r2,1
  802920:	30c00115 	stw	r3,4(r6)
  802924:	00c02074 	movhi	r3,129
  802928:	18c54d04 	addi	r3,r3,5428
  80292c:	18c00017 	ldw	r3,0(r3)
  802930:	21800215 	stw	r6,8(r4)
  802934:	10ffc036 	bltu	r2,r3,802838 <__alt_mem_epcs_flash_controller_0+0xff7f9838>
  802938:	00802074 	movhi	r2,129
  80293c:	10857b04 	addi	r2,r2,5612
  802940:	11400017 	ldw	r5,0(r2)
  802944:	8809883a 	mov	r4,r17
  802948:	08026240 	call	802624 <_malloc_trim_r>
  80294c:	003fba06 	br	802838 <__alt_mem_epcs_flash_controller_0+0xff7f9838>
  802950:	28c9883a 	add	r4,r5,r3
  802954:	21000117 	ldw	r4,4(r4)
  802958:	2100004c 	andi	r4,r4,1
  80295c:	2000391e 	bne	r4,zero,802a44 <_free_r+0x2fc>
  802960:	29c00217 	ldw	r7,8(r5)
  802964:	29000317 	ldw	r4,12(r5)
  802968:	1885883a 	add	r2,r3,r2
  80296c:	10c00054 	ori	r3,r2,1
  802970:	39000315 	stw	r4,12(r7)
  802974:	21c00215 	stw	r7,8(r4)
  802978:	30c00115 	stw	r3,4(r6)
  80297c:	308d883a 	add	r6,r6,r2
  802980:	30800015 	stw	r2,0(r6)
  802984:	003fac06 	br	802838 <__alt_mem_epcs_flash_controller_0+0xff7f9838>
  802988:	00c00504 	movi	r3,20
  80298c:	19401536 	bltu	r3,r5,8029e4 <_free_r+0x29c>
  802990:	28c01704 	addi	r3,r5,92
  802994:	18c7883a 	add	r3,r3,r3
  802998:	294016c4 	addi	r5,r5,91
  80299c:	003fb406 	br	802870 <__alt_mem_epcs_flash_controller_0+0xff7f9870>
  8029a0:	280bd0ba 	srai	r5,r5,2
  8029a4:	00c00044 	movi	r3,1
  8029a8:	38800117 	ldw	r2,4(r7)
  8029ac:	194a983a 	sll	r5,r3,r5
  8029b0:	2007883a 	mov	r3,r4
  8029b4:	2884b03a 	or	r2,r5,r2
  8029b8:	38800115 	stw	r2,4(r7)
  8029bc:	003fbb06 	br	8028ac <__alt_mem_epcs_flash_controller_0+0xff7f98ac>
  8029c0:	21800515 	stw	r6,20(r4)
  8029c4:	21800415 	stw	r6,16(r4)
  8029c8:	10c00054 	ori	r3,r2,1
  8029cc:	31c00315 	stw	r7,12(r6)
  8029d0:	31c00215 	stw	r7,8(r6)
  8029d4:	30c00115 	stw	r3,4(r6)
  8029d8:	308d883a 	add	r6,r6,r2
  8029dc:	30800015 	stw	r2,0(r6)
  8029e0:	003f9506 	br	802838 <__alt_mem_epcs_flash_controller_0+0xff7f9838>
  8029e4:	00c01504 	movi	r3,84
  8029e8:	19400536 	bltu	r3,r5,802a00 <_free_r+0x2b8>
  8029ec:	100ad33a 	srli	r5,r2,12
  8029f0:	28c01bc4 	addi	r3,r5,111
  8029f4:	18c7883a 	add	r3,r3,r3
  8029f8:	29401b84 	addi	r5,r5,110
  8029fc:	003f9c06 	br	802870 <__alt_mem_epcs_flash_controller_0+0xff7f9870>
  802a00:	00c05504 	movi	r3,340
  802a04:	19400536 	bltu	r3,r5,802a1c <_free_r+0x2d4>
  802a08:	100ad3fa 	srli	r5,r2,15
  802a0c:	28c01e04 	addi	r3,r5,120
  802a10:	18c7883a 	add	r3,r3,r3
  802a14:	29401dc4 	addi	r5,r5,119
  802a18:	003f9506 	br	802870 <__alt_mem_epcs_flash_controller_0+0xff7f9870>
  802a1c:	00c15504 	movi	r3,1364
  802a20:	19400536 	bltu	r3,r5,802a38 <_free_r+0x2f0>
  802a24:	100ad4ba 	srli	r5,r2,18
  802a28:	28c01f44 	addi	r3,r5,125
  802a2c:	18c7883a 	add	r3,r3,r3
  802a30:	29401f04 	addi	r5,r5,124
  802a34:	003f8e06 	br	802870 <__alt_mem_epcs_flash_controller_0+0xff7f9870>
  802a38:	00c03f84 	movi	r3,254
  802a3c:	01401f84 	movi	r5,126
  802a40:	003f8b06 	br	802870 <__alt_mem_epcs_flash_controller_0+0xff7f9870>
  802a44:	10c00054 	ori	r3,r2,1
  802a48:	30c00115 	stw	r3,4(r6)
  802a4c:	308d883a 	add	r6,r6,r2
  802a50:	30800015 	stw	r2,0(r6)
  802a54:	003f7806 	br	802838 <__alt_mem_epcs_flash_controller_0+0xff7f9838>

00802a58 <_lseek_r>:
  802a58:	defffd04 	addi	sp,sp,-12
  802a5c:	2805883a 	mov	r2,r5
  802a60:	dc000015 	stw	r16,0(sp)
  802a64:	04002074 	movhi	r16,129
  802a68:	dc400115 	stw	r17,4(sp)
  802a6c:	300b883a 	mov	r5,r6
  802a70:	84057c04 	addi	r16,r16,5616
  802a74:	2023883a 	mov	r17,r4
  802a78:	380d883a 	mov	r6,r7
  802a7c:	1009883a 	mov	r4,r2
  802a80:	dfc00215 	stw	ra,8(sp)
  802a84:	80000015 	stw	zero,0(r16)
  802a88:	08032b80 	call	8032b8 <lseek>
  802a8c:	00ffffc4 	movi	r3,-1
  802a90:	10c00526 	beq	r2,r3,802aa8 <_lseek_r+0x50>
  802a94:	dfc00217 	ldw	ra,8(sp)
  802a98:	dc400117 	ldw	r17,4(sp)
  802a9c:	dc000017 	ldw	r16,0(sp)
  802aa0:	dec00304 	addi	sp,sp,12
  802aa4:	f800283a 	ret
  802aa8:	80c00017 	ldw	r3,0(r16)
  802aac:	183ff926 	beq	r3,zero,802a94 <__alt_mem_epcs_flash_controller_0+0xff7f9a94>
  802ab0:	88c00015 	stw	r3,0(r17)
  802ab4:	003ff706 	br	802a94 <__alt_mem_epcs_flash_controller_0+0xff7f9a94>

00802ab8 <__smakebuf_r>:
  802ab8:	2880030b 	ldhu	r2,12(r5)
  802abc:	10c0008c 	andi	r3,r2,2
  802ac0:	1800411e 	bne	r3,zero,802bc8 <__smakebuf_r+0x110>
  802ac4:	deffec04 	addi	sp,sp,-80
  802ac8:	dc000f15 	stw	r16,60(sp)
  802acc:	2821883a 	mov	r16,r5
  802ad0:	2940038f 	ldh	r5,14(r5)
  802ad4:	dc401015 	stw	r17,64(sp)
  802ad8:	dfc01315 	stw	ra,76(sp)
  802adc:	dcc01215 	stw	r19,72(sp)
  802ae0:	dc801115 	stw	r18,68(sp)
  802ae4:	2023883a 	mov	r17,r4
  802ae8:	28001c16 	blt	r5,zero,802b5c <__smakebuf_r+0xa4>
  802aec:	d80d883a 	mov	r6,sp
  802af0:	0802cd40 	call	802cd4 <_fstat_r>
  802af4:	10001816 	blt	r2,zero,802b58 <__smakebuf_r+0xa0>
  802af8:	d8800117 	ldw	r2,4(sp)
  802afc:	00e00014 	movui	r3,32768
  802b00:	10bc000c 	andi	r2,r2,61440
  802b04:	14c80020 	cmpeqi	r19,r2,8192
  802b08:	10c03726 	beq	r2,r3,802be8 <__smakebuf_r+0x130>
  802b0c:	80c0030b 	ldhu	r3,12(r16)
  802b10:	18c20014 	ori	r3,r3,2048
  802b14:	80c0030d 	sth	r3,12(r16)
  802b18:	00c80004 	movi	r3,8192
  802b1c:	10c0521e 	bne	r2,r3,802c68 <__smakebuf_r+0x1b0>
  802b20:	8140038f 	ldh	r5,14(r16)
  802b24:	8809883a 	mov	r4,r17
  802b28:	0802d300 	call	802d30 <_isatty_r>
  802b2c:	10004c26 	beq	r2,zero,802c60 <__smakebuf_r+0x1a8>
  802b30:	8080030b 	ldhu	r2,12(r16)
  802b34:	80c010c4 	addi	r3,r16,67
  802b38:	80c00015 	stw	r3,0(r16)
  802b3c:	10800054 	ori	r2,r2,1
  802b40:	8080030d 	sth	r2,12(r16)
  802b44:	00800044 	movi	r2,1
  802b48:	80c00415 	stw	r3,16(r16)
  802b4c:	80800515 	stw	r2,20(r16)
  802b50:	04810004 	movi	r18,1024
  802b54:	00000706 	br	802b74 <__smakebuf_r+0xbc>
  802b58:	8080030b 	ldhu	r2,12(r16)
  802b5c:	10c0200c 	andi	r3,r2,128
  802b60:	18001f1e 	bne	r3,zero,802be0 <__smakebuf_r+0x128>
  802b64:	04810004 	movi	r18,1024
  802b68:	10820014 	ori	r2,r2,2048
  802b6c:	8080030d 	sth	r2,12(r16)
  802b70:	0027883a 	mov	r19,zero
  802b74:	900b883a 	mov	r5,r18
  802b78:	8809883a 	mov	r4,r17
  802b7c:	0800cc00 	call	800cc0 <_malloc_r>
  802b80:	10002c26 	beq	r2,zero,802c34 <__smakebuf_r+0x17c>
  802b84:	80c0030b 	ldhu	r3,12(r16)
  802b88:	01002034 	movhi	r4,128
  802b8c:	2100b204 	addi	r4,r4,712
  802b90:	89000f15 	stw	r4,60(r17)
  802b94:	18c02014 	ori	r3,r3,128
  802b98:	80c0030d 	sth	r3,12(r16)
  802b9c:	80800015 	stw	r2,0(r16)
  802ba0:	80800415 	stw	r2,16(r16)
  802ba4:	84800515 	stw	r18,20(r16)
  802ba8:	98001a1e 	bne	r19,zero,802c14 <__smakebuf_r+0x15c>
  802bac:	dfc01317 	ldw	ra,76(sp)
  802bb0:	dcc01217 	ldw	r19,72(sp)
  802bb4:	dc801117 	ldw	r18,68(sp)
  802bb8:	dc401017 	ldw	r17,64(sp)
  802bbc:	dc000f17 	ldw	r16,60(sp)
  802bc0:	dec01404 	addi	sp,sp,80
  802bc4:	f800283a 	ret
  802bc8:	288010c4 	addi	r2,r5,67
  802bcc:	28800015 	stw	r2,0(r5)
  802bd0:	28800415 	stw	r2,16(r5)
  802bd4:	00800044 	movi	r2,1
  802bd8:	28800515 	stw	r2,20(r5)
  802bdc:	f800283a 	ret
  802be0:	04801004 	movi	r18,64
  802be4:	003fe006 	br	802b68 <__alt_mem_epcs_flash_controller_0+0xff7f9b68>
  802be8:	81000a17 	ldw	r4,40(r16)
  802bec:	00c02034 	movhi	r3,128
  802bf0:	18c80304 	addi	r3,r3,8204
  802bf4:	20ffc51e 	bne	r4,r3,802b0c <__alt_mem_epcs_flash_controller_0+0xff7f9b0c>
  802bf8:	8080030b 	ldhu	r2,12(r16)
  802bfc:	04810004 	movi	r18,1024
  802c00:	84801315 	stw	r18,76(r16)
  802c04:	1484b03a 	or	r2,r2,r18
  802c08:	8080030d 	sth	r2,12(r16)
  802c0c:	0027883a 	mov	r19,zero
  802c10:	003fd806 	br	802b74 <__alt_mem_epcs_flash_controller_0+0xff7f9b74>
  802c14:	8140038f 	ldh	r5,14(r16)
  802c18:	8809883a 	mov	r4,r17
  802c1c:	0802d300 	call	802d30 <_isatty_r>
  802c20:	103fe226 	beq	r2,zero,802bac <__alt_mem_epcs_flash_controller_0+0xff7f9bac>
  802c24:	8080030b 	ldhu	r2,12(r16)
  802c28:	10800054 	ori	r2,r2,1
  802c2c:	8080030d 	sth	r2,12(r16)
  802c30:	003fde06 	br	802bac <__alt_mem_epcs_flash_controller_0+0xff7f9bac>
  802c34:	8080030b 	ldhu	r2,12(r16)
  802c38:	10c0800c 	andi	r3,r2,512
  802c3c:	183fdb1e 	bne	r3,zero,802bac <__alt_mem_epcs_flash_controller_0+0xff7f9bac>
  802c40:	10800094 	ori	r2,r2,2
  802c44:	80c010c4 	addi	r3,r16,67
  802c48:	8080030d 	sth	r2,12(r16)
  802c4c:	00800044 	movi	r2,1
  802c50:	80c00015 	stw	r3,0(r16)
  802c54:	80c00415 	stw	r3,16(r16)
  802c58:	80800515 	stw	r2,20(r16)
  802c5c:	003fd306 	br	802bac <__alt_mem_epcs_flash_controller_0+0xff7f9bac>
  802c60:	04810004 	movi	r18,1024
  802c64:	003fc306 	br	802b74 <__alt_mem_epcs_flash_controller_0+0xff7f9b74>
  802c68:	0027883a 	mov	r19,zero
  802c6c:	04810004 	movi	r18,1024
  802c70:	003fc006 	br	802b74 <__alt_mem_epcs_flash_controller_0+0xff7f9b74>

00802c74 <_read_r>:
  802c74:	defffd04 	addi	sp,sp,-12
  802c78:	2805883a 	mov	r2,r5
  802c7c:	dc000015 	stw	r16,0(sp)
  802c80:	04002074 	movhi	r16,129
  802c84:	dc400115 	stw	r17,4(sp)
  802c88:	300b883a 	mov	r5,r6
  802c8c:	84057c04 	addi	r16,r16,5616
  802c90:	2023883a 	mov	r17,r4
  802c94:	380d883a 	mov	r6,r7
  802c98:	1009883a 	mov	r4,r2
  802c9c:	dfc00215 	stw	ra,8(sp)
  802ca0:	80000015 	stw	zero,0(r16)
  802ca4:	080348c0 	call	80348c <read>
  802ca8:	00ffffc4 	movi	r3,-1
  802cac:	10c00526 	beq	r2,r3,802cc4 <_read_r+0x50>
  802cb0:	dfc00217 	ldw	ra,8(sp)
  802cb4:	dc400117 	ldw	r17,4(sp)
  802cb8:	dc000017 	ldw	r16,0(sp)
  802cbc:	dec00304 	addi	sp,sp,12
  802cc0:	f800283a 	ret
  802cc4:	80c00017 	ldw	r3,0(r16)
  802cc8:	183ff926 	beq	r3,zero,802cb0 <__alt_mem_epcs_flash_controller_0+0xff7f9cb0>
  802ccc:	88c00015 	stw	r3,0(r17)
  802cd0:	003ff706 	br	802cb0 <__alt_mem_epcs_flash_controller_0+0xff7f9cb0>

00802cd4 <_fstat_r>:
  802cd4:	defffd04 	addi	sp,sp,-12
  802cd8:	2805883a 	mov	r2,r5
  802cdc:	dc000015 	stw	r16,0(sp)
  802ce0:	04002074 	movhi	r16,129
  802ce4:	dc400115 	stw	r17,4(sp)
  802ce8:	84057c04 	addi	r16,r16,5616
  802cec:	2023883a 	mov	r17,r4
  802cf0:	300b883a 	mov	r5,r6
  802cf4:	1009883a 	mov	r4,r2
  802cf8:	dfc00215 	stw	ra,8(sp)
  802cfc:	80000015 	stw	zero,0(r16)
  802d00:	08030dc0 	call	8030dc <fstat>
  802d04:	00ffffc4 	movi	r3,-1
  802d08:	10c00526 	beq	r2,r3,802d20 <_fstat_r+0x4c>
  802d0c:	dfc00217 	ldw	ra,8(sp)
  802d10:	dc400117 	ldw	r17,4(sp)
  802d14:	dc000017 	ldw	r16,0(sp)
  802d18:	dec00304 	addi	sp,sp,12
  802d1c:	f800283a 	ret
  802d20:	80c00017 	ldw	r3,0(r16)
  802d24:	183ff926 	beq	r3,zero,802d0c <__alt_mem_epcs_flash_controller_0+0xff7f9d0c>
  802d28:	88c00015 	stw	r3,0(r17)
  802d2c:	003ff706 	br	802d0c <__alt_mem_epcs_flash_controller_0+0xff7f9d0c>

00802d30 <_isatty_r>:
  802d30:	defffd04 	addi	sp,sp,-12
  802d34:	dc000015 	stw	r16,0(sp)
  802d38:	04002074 	movhi	r16,129
  802d3c:	dc400115 	stw	r17,4(sp)
  802d40:	84057c04 	addi	r16,r16,5616
  802d44:	2023883a 	mov	r17,r4
  802d48:	2809883a 	mov	r4,r5
  802d4c:	dfc00215 	stw	ra,8(sp)
  802d50:	80000015 	stw	zero,0(r16)
  802d54:	08031d00 	call	8031d0 <isatty>
  802d58:	00ffffc4 	movi	r3,-1
  802d5c:	10c00526 	beq	r2,r3,802d74 <_isatty_r+0x44>
  802d60:	dfc00217 	ldw	ra,8(sp)
  802d64:	dc400117 	ldw	r17,4(sp)
  802d68:	dc000017 	ldw	r16,0(sp)
  802d6c:	dec00304 	addi	sp,sp,12
  802d70:	f800283a 	ret
  802d74:	80c00017 	ldw	r3,0(r16)
  802d78:	183ff926 	beq	r3,zero,802d60 <__alt_mem_epcs_flash_controller_0+0xff7f9d60>
  802d7c:	88c00015 	stw	r3,0(r17)
  802d80:	003ff706 	br	802d60 <__alt_mem_epcs_flash_controller_0+0xff7f9d60>

00802d84 <__divsi3>:
  802d84:	20001b16 	blt	r4,zero,802df4 <__divsi3+0x70>
  802d88:	000f883a 	mov	r7,zero
  802d8c:	28001616 	blt	r5,zero,802de8 <__divsi3+0x64>
  802d90:	200d883a 	mov	r6,r4
  802d94:	29001a2e 	bgeu	r5,r4,802e00 <__divsi3+0x7c>
  802d98:	00800804 	movi	r2,32
  802d9c:	00c00044 	movi	r3,1
  802da0:	00000106 	br	802da8 <__divsi3+0x24>
  802da4:	10000d26 	beq	r2,zero,802ddc <__divsi3+0x58>
  802da8:	294b883a 	add	r5,r5,r5
  802dac:	10bfffc4 	addi	r2,r2,-1
  802db0:	18c7883a 	add	r3,r3,r3
  802db4:	293ffb36 	bltu	r5,r4,802da4 <__alt_mem_epcs_flash_controller_0+0xff7f9da4>
  802db8:	0005883a 	mov	r2,zero
  802dbc:	18000726 	beq	r3,zero,802ddc <__divsi3+0x58>
  802dc0:	0005883a 	mov	r2,zero
  802dc4:	31400236 	bltu	r6,r5,802dd0 <__divsi3+0x4c>
  802dc8:	314dc83a 	sub	r6,r6,r5
  802dcc:	10c4b03a 	or	r2,r2,r3
  802dd0:	1806d07a 	srli	r3,r3,1
  802dd4:	280ad07a 	srli	r5,r5,1
  802dd8:	183ffa1e 	bne	r3,zero,802dc4 <__alt_mem_epcs_flash_controller_0+0xff7f9dc4>
  802ddc:	38000126 	beq	r7,zero,802de4 <__divsi3+0x60>
  802de0:	0085c83a 	sub	r2,zero,r2
  802de4:	f800283a 	ret
  802de8:	014bc83a 	sub	r5,zero,r5
  802dec:	39c0005c 	xori	r7,r7,1
  802df0:	003fe706 	br	802d90 <__alt_mem_epcs_flash_controller_0+0xff7f9d90>
  802df4:	0109c83a 	sub	r4,zero,r4
  802df8:	01c00044 	movi	r7,1
  802dfc:	003fe306 	br	802d8c <__alt_mem_epcs_flash_controller_0+0xff7f9d8c>
  802e00:	00c00044 	movi	r3,1
  802e04:	003fee06 	br	802dc0 <__alt_mem_epcs_flash_controller_0+0xff7f9dc0>

00802e08 <__modsi3>:
  802e08:	20001716 	blt	r4,zero,802e68 <__modsi3+0x60>
  802e0c:	000f883a 	mov	r7,zero
  802e10:	2005883a 	mov	r2,r4
  802e14:	28001216 	blt	r5,zero,802e60 <__modsi3+0x58>
  802e18:	2900162e 	bgeu	r5,r4,802e74 <__modsi3+0x6c>
  802e1c:	01800804 	movi	r6,32
  802e20:	00c00044 	movi	r3,1
  802e24:	00000106 	br	802e2c <__modsi3+0x24>
  802e28:	30000a26 	beq	r6,zero,802e54 <__modsi3+0x4c>
  802e2c:	294b883a 	add	r5,r5,r5
  802e30:	31bfffc4 	addi	r6,r6,-1
  802e34:	18c7883a 	add	r3,r3,r3
  802e38:	293ffb36 	bltu	r5,r4,802e28 <__alt_mem_epcs_flash_controller_0+0xff7f9e28>
  802e3c:	18000526 	beq	r3,zero,802e54 <__modsi3+0x4c>
  802e40:	1806d07a 	srli	r3,r3,1
  802e44:	11400136 	bltu	r2,r5,802e4c <__modsi3+0x44>
  802e48:	1145c83a 	sub	r2,r2,r5
  802e4c:	280ad07a 	srli	r5,r5,1
  802e50:	183ffb1e 	bne	r3,zero,802e40 <__alt_mem_epcs_flash_controller_0+0xff7f9e40>
  802e54:	38000126 	beq	r7,zero,802e5c <__modsi3+0x54>
  802e58:	0085c83a 	sub	r2,zero,r2
  802e5c:	f800283a 	ret
  802e60:	014bc83a 	sub	r5,zero,r5
  802e64:	003fec06 	br	802e18 <__alt_mem_epcs_flash_controller_0+0xff7f9e18>
  802e68:	0109c83a 	sub	r4,zero,r4
  802e6c:	01c00044 	movi	r7,1
  802e70:	003fe706 	br	802e10 <__alt_mem_epcs_flash_controller_0+0xff7f9e10>
  802e74:	00c00044 	movi	r3,1
  802e78:	003ff106 	br	802e40 <__alt_mem_epcs_flash_controller_0+0xff7f9e40>

00802e7c <__udivsi3>:
  802e7c:	200d883a 	mov	r6,r4
  802e80:	2900152e 	bgeu	r5,r4,802ed8 <__udivsi3+0x5c>
  802e84:	28001416 	blt	r5,zero,802ed8 <__udivsi3+0x5c>
  802e88:	00800804 	movi	r2,32
  802e8c:	00c00044 	movi	r3,1
  802e90:	00000206 	br	802e9c <__udivsi3+0x20>
  802e94:	10000e26 	beq	r2,zero,802ed0 <__udivsi3+0x54>
  802e98:	28000516 	blt	r5,zero,802eb0 <__udivsi3+0x34>
  802e9c:	294b883a 	add	r5,r5,r5
  802ea0:	10bfffc4 	addi	r2,r2,-1
  802ea4:	18c7883a 	add	r3,r3,r3
  802ea8:	293ffa36 	bltu	r5,r4,802e94 <__alt_mem_epcs_flash_controller_0+0xff7f9e94>
  802eac:	18000826 	beq	r3,zero,802ed0 <__udivsi3+0x54>
  802eb0:	0005883a 	mov	r2,zero
  802eb4:	31400236 	bltu	r6,r5,802ec0 <__udivsi3+0x44>
  802eb8:	314dc83a 	sub	r6,r6,r5
  802ebc:	10c4b03a 	or	r2,r2,r3
  802ec0:	1806d07a 	srli	r3,r3,1
  802ec4:	280ad07a 	srli	r5,r5,1
  802ec8:	183ffa1e 	bne	r3,zero,802eb4 <__alt_mem_epcs_flash_controller_0+0xff7f9eb4>
  802ecc:	f800283a 	ret
  802ed0:	0005883a 	mov	r2,zero
  802ed4:	f800283a 	ret
  802ed8:	00c00044 	movi	r3,1
  802edc:	003ff406 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>

00802ee0 <__umodsi3>:
  802ee0:	2005883a 	mov	r2,r4
  802ee4:	2900122e 	bgeu	r5,r4,802f30 <__umodsi3+0x50>
  802ee8:	28001116 	blt	r5,zero,802f30 <__umodsi3+0x50>
  802eec:	01800804 	movi	r6,32
  802ef0:	00c00044 	movi	r3,1
  802ef4:	00000206 	br	802f00 <__umodsi3+0x20>
  802ef8:	30000c26 	beq	r6,zero,802f2c <__umodsi3+0x4c>
  802efc:	28000516 	blt	r5,zero,802f14 <__umodsi3+0x34>
  802f00:	294b883a 	add	r5,r5,r5
  802f04:	31bfffc4 	addi	r6,r6,-1
  802f08:	18c7883a 	add	r3,r3,r3
  802f0c:	293ffa36 	bltu	r5,r4,802ef8 <__alt_mem_epcs_flash_controller_0+0xff7f9ef8>
  802f10:	18000626 	beq	r3,zero,802f2c <__umodsi3+0x4c>
  802f14:	1806d07a 	srli	r3,r3,1
  802f18:	11400136 	bltu	r2,r5,802f20 <__umodsi3+0x40>
  802f1c:	1145c83a 	sub	r2,r2,r5
  802f20:	280ad07a 	srli	r5,r5,1
  802f24:	183ffb1e 	bne	r3,zero,802f14 <__alt_mem_epcs_flash_controller_0+0xff7f9f14>
  802f28:	f800283a 	ret
  802f2c:	f800283a 	ret
  802f30:	00c00044 	movi	r3,1
  802f34:	003ff706 	br	802f14 <__alt_mem_epcs_flash_controller_0+0xff7f9f14>

00802f38 <__mulsi3>:
  802f38:	0005883a 	mov	r2,zero
  802f3c:	20000726 	beq	r4,zero,802f5c <__mulsi3+0x24>
  802f40:	20c0004c 	andi	r3,r4,1
  802f44:	2008d07a 	srli	r4,r4,1
  802f48:	18000126 	beq	r3,zero,802f50 <__mulsi3+0x18>
  802f4c:	1145883a 	add	r2,r2,r5
  802f50:	294b883a 	add	r5,r5,r5
  802f54:	203ffa1e 	bne	r4,zero,802f40 <__alt_mem_epcs_flash_controller_0+0xff7f9f40>
  802f58:	f800283a 	ret
  802f5c:	f800283a 	ret

00802f60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802f60:	defffe04 	addi	sp,sp,-8
  802f64:	dfc00115 	stw	ra,4(sp)
  802f68:	df000015 	stw	fp,0(sp)
  802f6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802f70:	d0a00917 	ldw	r2,-32732(gp)
  802f74:	10000326 	beq	r2,zero,802f84 <alt_get_errno+0x24>
  802f78:	d0a00917 	ldw	r2,-32732(gp)
  802f7c:	103ee83a 	callr	r2
  802f80:	00000106 	br	802f88 <alt_get_errno+0x28>
  802f84:	d0a03204 	addi	r2,gp,-32568
}
  802f88:	e037883a 	mov	sp,fp
  802f8c:	dfc00117 	ldw	ra,4(sp)
  802f90:	df000017 	ldw	fp,0(sp)
  802f94:	dec00204 	addi	sp,sp,8
  802f98:	f800283a 	ret

00802f9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802f9c:	defffb04 	addi	sp,sp,-20
  802fa0:	dfc00415 	stw	ra,16(sp)
  802fa4:	df000315 	stw	fp,12(sp)
  802fa8:	df000304 	addi	fp,sp,12
  802fac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802fb0:	e0bfff17 	ldw	r2,-4(fp)
  802fb4:	10000816 	blt	r2,zero,802fd8 <close+0x3c>
  802fb8:	01400304 	movi	r5,12
  802fbc:	e13fff17 	ldw	r4,-4(fp)
  802fc0:	0802f380 	call	802f38 <__mulsi3>
  802fc4:	1007883a 	mov	r3,r2
  802fc8:	00802074 	movhi	r2,129
  802fcc:	10803404 	addi	r2,r2,208
  802fd0:	1885883a 	add	r2,r3,r2
  802fd4:	00000106 	br	802fdc <close+0x40>
  802fd8:	0005883a 	mov	r2,zero
  802fdc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802fe0:	e0bffd17 	ldw	r2,-12(fp)
  802fe4:	10001926 	beq	r2,zero,80304c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802fe8:	e0bffd17 	ldw	r2,-12(fp)
  802fec:	10800017 	ldw	r2,0(r2)
  802ff0:	10800417 	ldw	r2,16(r2)
  802ff4:	10000626 	beq	r2,zero,803010 <close+0x74>
  802ff8:	e0bffd17 	ldw	r2,-12(fp)
  802ffc:	10800017 	ldw	r2,0(r2)
  803000:	10800417 	ldw	r2,16(r2)
  803004:	e13ffd17 	ldw	r4,-12(fp)
  803008:	103ee83a 	callr	r2
  80300c:	00000106 	br	803014 <close+0x78>
  803010:	0005883a 	mov	r2,zero
  803014:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803018:	e13fff17 	ldw	r4,-4(fp)
  80301c:	08035900 	call	803590 <alt_release_fd>
    if (rval < 0)
  803020:	e0bffe17 	ldw	r2,-8(fp)
  803024:	1000070e 	bge	r2,zero,803044 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  803028:	0802f600 	call	802f60 <alt_get_errno>
  80302c:	1007883a 	mov	r3,r2
  803030:	e0bffe17 	ldw	r2,-8(fp)
  803034:	0085c83a 	sub	r2,zero,r2
  803038:	18800015 	stw	r2,0(r3)
      return -1;
  80303c:	00bfffc4 	movi	r2,-1
  803040:	00000706 	br	803060 <close+0xc4>
    }
    return 0;
  803044:	0005883a 	mov	r2,zero
  803048:	00000506 	br	803060 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80304c:	0802f600 	call	802f60 <alt_get_errno>
  803050:	1007883a 	mov	r3,r2
  803054:	00801444 	movi	r2,81
  803058:	18800015 	stw	r2,0(r3)
    return -1;
  80305c:	00bfffc4 	movi	r2,-1
  }
}
  803060:	e037883a 	mov	sp,fp
  803064:	dfc00117 	ldw	ra,4(sp)
  803068:	df000017 	ldw	fp,0(sp)
  80306c:	dec00204 	addi	sp,sp,8
  803070:	f800283a 	ret

00803074 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803074:	defffc04 	addi	sp,sp,-16
  803078:	df000315 	stw	fp,12(sp)
  80307c:	df000304 	addi	fp,sp,12
  803080:	e13ffd15 	stw	r4,-12(fp)
  803084:	e17ffe15 	stw	r5,-8(fp)
  803088:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80308c:	e0bfff17 	ldw	r2,-4(fp)
}
  803090:	e037883a 	mov	sp,fp
  803094:	df000017 	ldw	fp,0(sp)
  803098:	dec00104 	addi	sp,sp,4
  80309c:	f800283a 	ret

008030a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030a0:	defffe04 	addi	sp,sp,-8
  8030a4:	dfc00115 	stw	ra,4(sp)
  8030a8:	df000015 	stw	fp,0(sp)
  8030ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8030b0:	d0a00917 	ldw	r2,-32732(gp)
  8030b4:	10000326 	beq	r2,zero,8030c4 <alt_get_errno+0x24>
  8030b8:	d0a00917 	ldw	r2,-32732(gp)
  8030bc:	103ee83a 	callr	r2
  8030c0:	00000106 	br	8030c8 <alt_get_errno+0x28>
  8030c4:	d0a03204 	addi	r2,gp,-32568
}
  8030c8:	e037883a 	mov	sp,fp
  8030cc:	dfc00117 	ldw	ra,4(sp)
  8030d0:	df000017 	ldw	fp,0(sp)
  8030d4:	dec00204 	addi	sp,sp,8
  8030d8:	f800283a 	ret

008030dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8030dc:	defffb04 	addi	sp,sp,-20
  8030e0:	dfc00415 	stw	ra,16(sp)
  8030e4:	df000315 	stw	fp,12(sp)
  8030e8:	df000304 	addi	fp,sp,12
  8030ec:	e13ffe15 	stw	r4,-8(fp)
  8030f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8030f4:	e0bffe17 	ldw	r2,-8(fp)
  8030f8:	10000816 	blt	r2,zero,80311c <fstat+0x40>
  8030fc:	01400304 	movi	r5,12
  803100:	e13ffe17 	ldw	r4,-8(fp)
  803104:	0802f380 	call	802f38 <__mulsi3>
  803108:	1007883a 	mov	r3,r2
  80310c:	00802074 	movhi	r2,129
  803110:	10803404 	addi	r2,r2,208
  803114:	1885883a 	add	r2,r3,r2
  803118:	00000106 	br	803120 <fstat+0x44>
  80311c:	0005883a 	mov	r2,zero
  803120:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  803124:	e0bffd17 	ldw	r2,-12(fp)
  803128:	10001026 	beq	r2,zero,80316c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80312c:	e0bffd17 	ldw	r2,-12(fp)
  803130:	10800017 	ldw	r2,0(r2)
  803134:	10800817 	ldw	r2,32(r2)
  803138:	10000726 	beq	r2,zero,803158 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80313c:	e0bffd17 	ldw	r2,-12(fp)
  803140:	10800017 	ldw	r2,0(r2)
  803144:	10800817 	ldw	r2,32(r2)
  803148:	e17fff17 	ldw	r5,-4(fp)
  80314c:	e13ffd17 	ldw	r4,-12(fp)
  803150:	103ee83a 	callr	r2
  803154:	00000a06 	br	803180 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  803158:	e0bfff17 	ldw	r2,-4(fp)
  80315c:	00c80004 	movi	r3,8192
  803160:	10c00115 	stw	r3,4(r2)
      return 0;
  803164:	0005883a 	mov	r2,zero
  803168:	00000506 	br	803180 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80316c:	08030a00 	call	8030a0 <alt_get_errno>
  803170:	1007883a 	mov	r3,r2
  803174:	00801444 	movi	r2,81
  803178:	18800015 	stw	r2,0(r3)
    return -1;
  80317c:	00bfffc4 	movi	r2,-1
  }
}
  803180:	e037883a 	mov	sp,fp
  803184:	dfc00117 	ldw	ra,4(sp)
  803188:	df000017 	ldw	fp,0(sp)
  80318c:	dec00204 	addi	sp,sp,8
  803190:	f800283a 	ret

00803194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803194:	defffe04 	addi	sp,sp,-8
  803198:	dfc00115 	stw	ra,4(sp)
  80319c:	df000015 	stw	fp,0(sp)
  8031a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8031a4:	d0a00917 	ldw	r2,-32732(gp)
  8031a8:	10000326 	beq	r2,zero,8031b8 <alt_get_errno+0x24>
  8031ac:	d0a00917 	ldw	r2,-32732(gp)
  8031b0:	103ee83a 	callr	r2
  8031b4:	00000106 	br	8031bc <alt_get_errno+0x28>
  8031b8:	d0a03204 	addi	r2,gp,-32568
}
  8031bc:	e037883a 	mov	sp,fp
  8031c0:	dfc00117 	ldw	ra,4(sp)
  8031c4:	df000017 	ldw	fp,0(sp)
  8031c8:	dec00204 	addi	sp,sp,8
  8031cc:	f800283a 	ret

008031d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8031d0:	deffed04 	addi	sp,sp,-76
  8031d4:	dfc01215 	stw	ra,72(sp)
  8031d8:	df001115 	stw	fp,68(sp)
  8031dc:	df001104 	addi	fp,sp,68
  8031e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8031e4:	e0bfff17 	ldw	r2,-4(fp)
  8031e8:	10000816 	blt	r2,zero,80320c <isatty+0x3c>
  8031ec:	01400304 	movi	r5,12
  8031f0:	e13fff17 	ldw	r4,-4(fp)
  8031f4:	0802f380 	call	802f38 <__mulsi3>
  8031f8:	1007883a 	mov	r3,r2
  8031fc:	00802074 	movhi	r2,129
  803200:	10803404 	addi	r2,r2,208
  803204:	1885883a 	add	r2,r3,r2
  803208:	00000106 	br	803210 <isatty+0x40>
  80320c:	0005883a 	mov	r2,zero
  803210:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803214:	e0bfef17 	ldw	r2,-68(fp)
  803218:	10000e26 	beq	r2,zero,803254 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80321c:	e0bfef17 	ldw	r2,-68(fp)
  803220:	10800017 	ldw	r2,0(r2)
  803224:	10800817 	ldw	r2,32(r2)
  803228:	1000021e 	bne	r2,zero,803234 <isatty+0x64>
    {
      return 1;
  80322c:	00800044 	movi	r2,1
  803230:	00000d06 	br	803268 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803234:	e0bff004 	addi	r2,fp,-64
  803238:	100b883a 	mov	r5,r2
  80323c:	e13fff17 	ldw	r4,-4(fp)
  803240:	08030dc0 	call	8030dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803244:	e0bff117 	ldw	r2,-60(fp)
  803248:	10880020 	cmpeqi	r2,r2,8192
  80324c:	10803fcc 	andi	r2,r2,255
  803250:	00000506 	br	803268 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803254:	08031940 	call	803194 <alt_get_errno>
  803258:	1007883a 	mov	r3,r2
  80325c:	00801444 	movi	r2,81
  803260:	18800015 	stw	r2,0(r3)
    return 0;
  803264:	0005883a 	mov	r2,zero
  }
}
  803268:	e037883a 	mov	sp,fp
  80326c:	dfc00117 	ldw	ra,4(sp)
  803270:	df000017 	ldw	fp,0(sp)
  803274:	dec00204 	addi	sp,sp,8
  803278:	f800283a 	ret

0080327c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80327c:	defffe04 	addi	sp,sp,-8
  803280:	dfc00115 	stw	ra,4(sp)
  803284:	df000015 	stw	fp,0(sp)
  803288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80328c:	d0a00917 	ldw	r2,-32732(gp)
  803290:	10000326 	beq	r2,zero,8032a0 <alt_get_errno+0x24>
  803294:	d0a00917 	ldw	r2,-32732(gp)
  803298:	103ee83a 	callr	r2
  80329c:	00000106 	br	8032a4 <alt_get_errno+0x28>
  8032a0:	d0a03204 	addi	r2,gp,-32568
}
  8032a4:	e037883a 	mov	sp,fp
  8032a8:	dfc00117 	ldw	ra,4(sp)
  8032ac:	df000017 	ldw	fp,0(sp)
  8032b0:	dec00204 	addi	sp,sp,8
  8032b4:	f800283a 	ret

008032b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8032b8:	defff904 	addi	sp,sp,-28
  8032bc:	dfc00615 	stw	ra,24(sp)
  8032c0:	df000515 	stw	fp,20(sp)
  8032c4:	df000504 	addi	fp,sp,20
  8032c8:	e13ffd15 	stw	r4,-12(fp)
  8032cc:	e17ffe15 	stw	r5,-8(fp)
  8032d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8032d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8032d8:	e0bffd17 	ldw	r2,-12(fp)
  8032dc:	10000816 	blt	r2,zero,803300 <lseek+0x48>
  8032e0:	01400304 	movi	r5,12
  8032e4:	e13ffd17 	ldw	r4,-12(fp)
  8032e8:	0802f380 	call	802f38 <__mulsi3>
  8032ec:	1007883a 	mov	r3,r2
  8032f0:	00802074 	movhi	r2,129
  8032f4:	10803404 	addi	r2,r2,208
  8032f8:	1885883a 	add	r2,r3,r2
  8032fc:	00000106 	br	803304 <lseek+0x4c>
  803300:	0005883a 	mov	r2,zero
  803304:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803308:	e0bffc17 	ldw	r2,-16(fp)
  80330c:	10001026 	beq	r2,zero,803350 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803310:	e0bffc17 	ldw	r2,-16(fp)
  803314:	10800017 	ldw	r2,0(r2)
  803318:	10800717 	ldw	r2,28(r2)
  80331c:	10000926 	beq	r2,zero,803344 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803320:	e0bffc17 	ldw	r2,-16(fp)
  803324:	10800017 	ldw	r2,0(r2)
  803328:	10800717 	ldw	r2,28(r2)
  80332c:	e1bfff17 	ldw	r6,-4(fp)
  803330:	e17ffe17 	ldw	r5,-8(fp)
  803334:	e13ffc17 	ldw	r4,-16(fp)
  803338:	103ee83a 	callr	r2
  80333c:	e0bffb15 	stw	r2,-20(fp)
  803340:	00000506 	br	803358 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803344:	00bfde84 	movi	r2,-134
  803348:	e0bffb15 	stw	r2,-20(fp)
  80334c:	00000206 	br	803358 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  803350:	00bfebc4 	movi	r2,-81
  803354:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  803358:	e0bffb17 	ldw	r2,-20(fp)
  80335c:	1000070e 	bge	r2,zero,80337c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  803360:	080327c0 	call	80327c <alt_get_errno>
  803364:	1007883a 	mov	r3,r2
  803368:	e0bffb17 	ldw	r2,-20(fp)
  80336c:	0085c83a 	sub	r2,zero,r2
  803370:	18800015 	stw	r2,0(r3)
    rc = -1;
  803374:	00bfffc4 	movi	r2,-1
  803378:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80337c:	e0bffb17 	ldw	r2,-20(fp)
}
  803380:	e037883a 	mov	sp,fp
  803384:	dfc00117 	ldw	ra,4(sp)
  803388:	df000017 	ldw	fp,0(sp)
  80338c:	dec00204 	addi	sp,sp,8
  803390:	f800283a 	ret

00803394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803394:	defff904 	addi	sp,sp,-28
  803398:	dfc00615 	stw	ra,24(sp)
  80339c:	df000515 	stw	fp,20(sp)
  8033a0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8033a4:	0009883a 	mov	r4,zero
  8033a8:	080b33c0 	call	80b33c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8033ac:	08043800 	call	804380 <OSInit>
  8033b0:	01000044 	movi	r4,1
  8033b4:	0808cdc0 	call	808cdc <OSSemCreate>
  8033b8:	d0a03815 	stw	r2,-32544(gp)
  8033bc:	01000044 	movi	r4,1
  8033c0:	0808cdc0 	call	808cdc <OSSemCreate>
  8033c4:	d0a03a15 	stw	r2,-32536(gp)
  8033c8:	d0a03304 	addi	r2,gp,-32564
  8033cc:	e0bffc15 	stw	r2,-16(fp)
  8033d0:	00800044 	movi	r2,1
  8033d4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8033d8:	e0bffd0b 	ldhu	r2,-12(fp)
  8033dc:	1009883a 	mov	r4,r2
  8033e0:	0808cdc0 	call	808cdc <OSSemCreate>
  8033e4:	1007883a 	mov	r3,r2
  8033e8:	e0bffc17 	ldw	r2,-16(fp)
  8033ec:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8033f0:	080b3740 	call	80b374 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8033f4:	01802074 	movhi	r6,129
  8033f8:	31bdbc04 	addi	r6,r6,-2320
  8033fc:	01402074 	movhi	r5,129
  803400:	297dbc04 	addi	r5,r5,-2320
  803404:	01002074 	movhi	r4,129
  803408:	213dbc04 	addi	r4,r4,-2320
  80340c:	080e5dc0 	call	80e5dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803410:	080e0dc0 	call	80e0dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803414:	01002074 	movhi	r4,129
  803418:	21384f04 	addi	r4,r4,-7876
  80341c:	080f3200 	call	80f320 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803420:	d0a03417 	ldw	r2,-32560(gp)
  803424:	d0e03517 	ldw	r3,-32556(gp)
  803428:	d1203617 	ldw	r4,-32552(gp)
  80342c:	200d883a 	mov	r6,r4
  803430:	180b883a 	mov	r5,r3
  803434:	1009883a 	mov	r4,r2
  803438:	08000a80 	call	8000a8 <main>
  80343c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  803440:	01000044 	movi	r4,1
  803444:	0802f9c0 	call	802f9c <close>
  exit (result);
  803448:	e13ffb17 	ldw	r4,-20(fp)
  80344c:	080f3340 	call	80f334 <exit>

00803450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803450:	defffe04 	addi	sp,sp,-8
  803454:	dfc00115 	stw	ra,4(sp)
  803458:	df000015 	stw	fp,0(sp)
  80345c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803460:	d0a00917 	ldw	r2,-32732(gp)
  803464:	10000326 	beq	r2,zero,803474 <alt_get_errno+0x24>
  803468:	d0a00917 	ldw	r2,-32732(gp)
  80346c:	103ee83a 	callr	r2
  803470:	00000106 	br	803478 <alt_get_errno+0x28>
  803474:	d0a03204 	addi	r2,gp,-32568
}
  803478:	e037883a 	mov	sp,fp
  80347c:	dfc00117 	ldw	ra,4(sp)
  803480:	df000017 	ldw	fp,0(sp)
  803484:	dec00204 	addi	sp,sp,8
  803488:	f800283a 	ret

0080348c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80348c:	defff904 	addi	sp,sp,-28
  803490:	dfc00615 	stw	ra,24(sp)
  803494:	df000515 	stw	fp,20(sp)
  803498:	df000504 	addi	fp,sp,20
  80349c:	e13ffd15 	stw	r4,-12(fp)
  8034a0:	e17ffe15 	stw	r5,-8(fp)
  8034a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8034a8:	e0bffd17 	ldw	r2,-12(fp)
  8034ac:	10000816 	blt	r2,zero,8034d0 <read+0x44>
  8034b0:	01400304 	movi	r5,12
  8034b4:	e13ffd17 	ldw	r4,-12(fp)
  8034b8:	0802f380 	call	802f38 <__mulsi3>
  8034bc:	1007883a 	mov	r3,r2
  8034c0:	00802074 	movhi	r2,129
  8034c4:	10803404 	addi	r2,r2,208
  8034c8:	1885883a 	add	r2,r3,r2
  8034cc:	00000106 	br	8034d4 <read+0x48>
  8034d0:	0005883a 	mov	r2,zero
  8034d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8034d8:	e0bffb17 	ldw	r2,-20(fp)
  8034dc:	10002226 	beq	r2,zero,803568 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8034e0:	e0bffb17 	ldw	r2,-20(fp)
  8034e4:	10800217 	ldw	r2,8(r2)
  8034e8:	108000cc 	andi	r2,r2,3
  8034ec:	10800060 	cmpeqi	r2,r2,1
  8034f0:	1000181e 	bne	r2,zero,803554 <read+0xc8>
        (fd->dev->read))
  8034f4:	e0bffb17 	ldw	r2,-20(fp)
  8034f8:	10800017 	ldw	r2,0(r2)
  8034fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803500:	10001426 	beq	r2,zero,803554 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803504:	e0bffb17 	ldw	r2,-20(fp)
  803508:	10800017 	ldw	r2,0(r2)
  80350c:	10800517 	ldw	r2,20(r2)
  803510:	e0ffff17 	ldw	r3,-4(fp)
  803514:	180d883a 	mov	r6,r3
  803518:	e17ffe17 	ldw	r5,-8(fp)
  80351c:	e13ffb17 	ldw	r4,-20(fp)
  803520:	103ee83a 	callr	r2
  803524:	e0bffc15 	stw	r2,-16(fp)
  803528:	e0bffc17 	ldw	r2,-16(fp)
  80352c:	1000070e 	bge	r2,zero,80354c <read+0xc0>
        {
          ALT_ERRNO = -rval;
  803530:	08034500 	call	803450 <alt_get_errno>
  803534:	1007883a 	mov	r3,r2
  803538:	e0bffc17 	ldw	r2,-16(fp)
  80353c:	0085c83a 	sub	r2,zero,r2
  803540:	18800015 	stw	r2,0(r3)
          return -1;
  803544:	00bfffc4 	movi	r2,-1
  803548:	00000c06 	br	80357c <read+0xf0>
        }
        return rval;
  80354c:	e0bffc17 	ldw	r2,-16(fp)
  803550:	00000a06 	br	80357c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  803554:	08034500 	call	803450 <alt_get_errno>
  803558:	1007883a 	mov	r3,r2
  80355c:	00800344 	movi	r2,13
  803560:	18800015 	stw	r2,0(r3)
  803564:	00000406 	br	803578 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803568:	08034500 	call	803450 <alt_get_errno>
  80356c:	1007883a 	mov	r3,r2
  803570:	00801444 	movi	r2,81
  803574:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803578:	00bfffc4 	movi	r2,-1
}
  80357c:	e037883a 	mov	sp,fp
  803580:	dfc00117 	ldw	ra,4(sp)
  803584:	df000017 	ldw	fp,0(sp)
  803588:	dec00204 	addi	sp,sp,8
  80358c:	f800283a 	ret

00803590 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803590:	defffc04 	addi	sp,sp,-16
  803594:	dfc00315 	stw	ra,12(sp)
  803598:	df000215 	stw	fp,8(sp)
  80359c:	dc000115 	stw	r16,4(sp)
  8035a0:	df000204 	addi	fp,sp,8
  8035a4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  8035a8:	e0bffe17 	ldw	r2,-8(fp)
  8035ac:	108000d0 	cmplti	r2,r2,3
  8035b0:	1000111e 	bne	r2,zero,8035f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  8035b4:	04002074 	movhi	r16,129
  8035b8:	84003404 	addi	r16,r16,208
  8035bc:	e0bffe17 	ldw	r2,-8(fp)
  8035c0:	01400304 	movi	r5,12
  8035c4:	1009883a 	mov	r4,r2
  8035c8:	0802f380 	call	802f38 <__mulsi3>
  8035cc:	8085883a 	add	r2,r16,r2
  8035d0:	10800204 	addi	r2,r2,8
  8035d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8035d8:	04002074 	movhi	r16,129
  8035dc:	84003404 	addi	r16,r16,208
  8035e0:	e0bffe17 	ldw	r2,-8(fp)
  8035e4:	01400304 	movi	r5,12
  8035e8:	1009883a 	mov	r4,r2
  8035ec:	0802f380 	call	802f38 <__mulsi3>
  8035f0:	8085883a 	add	r2,r16,r2
  8035f4:	10000015 	stw	zero,0(r2)
  }
}
  8035f8:	0001883a 	nop
  8035fc:	e6ffff04 	addi	sp,fp,-4
  803600:	dfc00217 	ldw	ra,8(sp)
  803604:	df000117 	ldw	fp,4(sp)
  803608:	dc000017 	ldw	r16,0(sp)
  80360c:	dec00304 	addi	sp,sp,12
  803610:	f800283a 	ret

00803614 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803614:	defff904 	addi	sp,sp,-28
  803618:	df000615 	stw	fp,24(sp)
  80361c:	df000604 	addi	fp,sp,24
  803620:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803624:	0005303a 	rdctl	r2,status
  803628:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80362c:	e0fffe17 	ldw	r3,-8(fp)
  803630:	00bfff84 	movi	r2,-2
  803634:	1884703a 	and	r2,r3,r2
  803638:	1001703a 	wrctl	status,r2
  
  return context;
  80363c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803640:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803644:	d0a00a17 	ldw	r2,-32728(gp)
  803648:	10c000c4 	addi	r3,r2,3
  80364c:	00bfff04 	movi	r2,-4
  803650:	1884703a 	and	r2,r3,r2
  803654:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803658:	d0e00a17 	ldw	r3,-32728(gp)
  80365c:	e0bfff17 	ldw	r2,-4(fp)
  803660:	1887883a 	add	r3,r3,r2
  803664:	00804034 	movhi	r2,256
  803668:	10800004 	addi	r2,r2,0
  80366c:	10c0062e 	bgeu	r2,r3,803688 <sbrk+0x74>
  803670:	e0bffb17 	ldw	r2,-20(fp)
  803674:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803678:	e0bffa17 	ldw	r2,-24(fp)
  80367c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803680:	00bfffc4 	movi	r2,-1
  803684:	00000b06 	br	8036b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  803688:	d0a00a17 	ldw	r2,-32728(gp)
  80368c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  803690:	d0e00a17 	ldw	r3,-32728(gp)
  803694:	e0bfff17 	ldw	r2,-4(fp)
  803698:	1885883a 	add	r2,r3,r2
  80369c:	d0a00a15 	stw	r2,-32728(gp)
  8036a0:	e0bffb17 	ldw	r2,-20(fp)
  8036a4:	e0bffc15 	stw	r2,-16(fp)
  8036a8:	e0bffc17 	ldw	r2,-16(fp)
  8036ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8036b0:	e0bffd17 	ldw	r2,-12(fp)
} 
  8036b4:	e037883a 	mov	sp,fp
  8036b8:	df000017 	ldw	fp,0(sp)
  8036bc:	dec00104 	addi	sp,sp,4
  8036c0:	f800283a 	ret

008036c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8036c4:	defffe04 	addi	sp,sp,-8
  8036c8:	dfc00115 	stw	ra,4(sp)
  8036cc:	df000015 	stw	fp,0(sp)
  8036d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8036d4:	d0a00917 	ldw	r2,-32732(gp)
  8036d8:	10000326 	beq	r2,zero,8036e8 <alt_get_errno+0x24>
  8036dc:	d0a00917 	ldw	r2,-32732(gp)
  8036e0:	103ee83a 	callr	r2
  8036e4:	00000106 	br	8036ec <alt_get_errno+0x28>
  8036e8:	d0a03204 	addi	r2,gp,-32568
}
  8036ec:	e037883a 	mov	sp,fp
  8036f0:	dfc00117 	ldw	ra,4(sp)
  8036f4:	df000017 	ldw	fp,0(sp)
  8036f8:	dec00204 	addi	sp,sp,8
  8036fc:	f800283a 	ret

00803700 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803700:	defff904 	addi	sp,sp,-28
  803704:	dfc00615 	stw	ra,24(sp)
  803708:	df000515 	stw	fp,20(sp)
  80370c:	df000504 	addi	fp,sp,20
  803710:	e13ffd15 	stw	r4,-12(fp)
  803714:	e17ffe15 	stw	r5,-8(fp)
  803718:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80371c:	e0bffd17 	ldw	r2,-12(fp)
  803720:	10000816 	blt	r2,zero,803744 <write+0x44>
  803724:	01400304 	movi	r5,12
  803728:	e13ffd17 	ldw	r4,-12(fp)
  80372c:	0802f380 	call	802f38 <__mulsi3>
  803730:	1007883a 	mov	r3,r2
  803734:	00802074 	movhi	r2,129
  803738:	10803404 	addi	r2,r2,208
  80373c:	1885883a 	add	r2,r3,r2
  803740:	00000106 	br	803748 <write+0x48>
  803744:	0005883a 	mov	r2,zero
  803748:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80374c:	e0bffb17 	ldw	r2,-20(fp)
  803750:	10002126 	beq	r2,zero,8037d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803754:	e0bffb17 	ldw	r2,-20(fp)
  803758:	10800217 	ldw	r2,8(r2)
  80375c:	108000cc 	andi	r2,r2,3
  803760:	10001826 	beq	r2,zero,8037c4 <write+0xc4>
  803764:	e0bffb17 	ldw	r2,-20(fp)
  803768:	10800017 	ldw	r2,0(r2)
  80376c:	10800617 	ldw	r2,24(r2)
  803770:	10001426 	beq	r2,zero,8037c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803774:	e0bffb17 	ldw	r2,-20(fp)
  803778:	10800017 	ldw	r2,0(r2)
  80377c:	10800617 	ldw	r2,24(r2)
  803780:	e0ffff17 	ldw	r3,-4(fp)
  803784:	180d883a 	mov	r6,r3
  803788:	e17ffe17 	ldw	r5,-8(fp)
  80378c:	e13ffb17 	ldw	r4,-20(fp)
  803790:	103ee83a 	callr	r2
  803794:	e0bffc15 	stw	r2,-16(fp)
  803798:	e0bffc17 	ldw	r2,-16(fp)
  80379c:	1000070e 	bge	r2,zero,8037bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
  8037a0:	08036c40 	call	8036c4 <alt_get_errno>
  8037a4:	1007883a 	mov	r3,r2
  8037a8:	e0bffc17 	ldw	r2,-16(fp)
  8037ac:	0085c83a 	sub	r2,zero,r2
  8037b0:	18800015 	stw	r2,0(r3)
        return -1;
  8037b4:	00bfffc4 	movi	r2,-1
  8037b8:	00000c06 	br	8037ec <write+0xec>
      }
      return rval;
  8037bc:	e0bffc17 	ldw	r2,-16(fp)
  8037c0:	00000a06 	br	8037ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8037c4:	08036c40 	call	8036c4 <alt_get_errno>
  8037c8:	1007883a 	mov	r3,r2
  8037cc:	00800344 	movi	r2,13
  8037d0:	18800015 	stw	r2,0(r3)
  8037d4:	00000406 	br	8037e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8037d8:	08036c40 	call	8036c4 <alt_get_errno>
  8037dc:	1007883a 	mov	r3,r2
  8037e0:	00801444 	movi	r2,81
  8037e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8037e8:	00bfffc4 	movi	r2,-1
}
  8037ec:	e037883a 	mov	sp,fp
  8037f0:	dfc00117 	ldw	ra,4(sp)
  8037f4:	df000017 	ldw	fp,0(sp)
  8037f8:	dec00204 	addi	sp,sp,8
  8037fc:	f800283a 	ret

00803800 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  803800:	deffdf04 	addi	sp,sp,-132
  803804:	dfc02015 	stw	ra,128(sp)
  803808:	df001f15 	stw	fp,124(sp)
  80380c:	df001f04 	addi	fp,sp,124
  803810:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  803814:	e0bfe204 	addi	r2,fp,-120
  803818:	100b883a 	mov	r5,r2
  80381c:	01003fc4 	movi	r4,255
  803820:	080ac640 	call	80ac64 <OSTaskQuery>
  803824:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  803828:	e0bffe83 	ldbu	r2,-6(fp)
  80382c:	10803fcc 	andi	r2,r2,255
  803830:	10001e1e 	bne	r2,zero,8038ac <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  803834:	e0bfee83 	ldbu	r2,-70(fp)
  803838:	10803fcc 	andi	r2,r2,255
  80383c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  803840:	d0a03817 	ldw	r2,-32544(gp)
  803844:	e0fffd04 	addi	r3,fp,-12
  803848:	180b883a 	mov	r5,r3
  80384c:	1009883a 	mov	r4,r2
  803850:	080947c0 	call	80947c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  803854:	e0bffe43 	ldbu	r2,-7(fp)
  803858:	10803fcc 	andi	r2,r2,255
  80385c:	10000726 	beq	r2,zero,80387c <__env_lock+0x7c>
  803860:	d0a00b17 	ldw	r2,-32724(gp)
  803864:	e0ffe117 	ldw	r3,-124(fp)
  803868:	1880041e 	bne	r3,r2,80387c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  80386c:	d0a03717 	ldw	r2,-32548(gp)
  803870:	10800044 	addi	r2,r2,1
  803874:	d0a03715 	stw	r2,-32548(gp)
  803878:	00000a06 	br	8038a4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80387c:	d0a03817 	ldw	r2,-32544(gp)
  803880:	e0fffe84 	addi	r3,fp,-6
  803884:	180d883a 	mov	r6,r3
  803888:	000b883a 	mov	r5,zero
  80388c:	1009883a 	mov	r4,r2
  803890:	0808ff40 	call	808ff4 <OSSemPend>
    locks  = 1;
  803894:	00800044 	movi	r2,1
  803898:	d0a03715 	stw	r2,-32548(gp)
    lockid = id;
  80389c:	e0bfe117 	ldw	r2,-124(fp)
  8038a0:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  8038a4:	0001883a 	nop
  8038a8:	00000106 	br	8038b0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  8038ac:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8038b0:	e037883a 	mov	sp,fp
  8038b4:	dfc00117 	ldw	ra,4(sp)
  8038b8:	df000017 	ldw	fp,0(sp)
  8038bc:	dec00204 	addi	sp,sp,8
  8038c0:	f800283a 	ret

008038c4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  8038c4:	defffd04 	addi	sp,sp,-12
  8038c8:	dfc00215 	stw	ra,8(sp)
  8038cc:	df000115 	stw	fp,4(sp)
  8038d0:	df000104 	addi	fp,sp,4
  8038d4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8038d8:	d0a03717 	ldw	r2,-32548(gp)
  8038dc:	10000b26 	beq	r2,zero,80390c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8038e0:	d0a03717 	ldw	r2,-32548(gp)
  8038e4:	10bfffc4 	addi	r2,r2,-1
  8038e8:	d0a03715 	stw	r2,-32548(gp)
  8038ec:	d0a03717 	ldw	r2,-32548(gp)
  8038f0:	1000071e 	bne	r2,zero,803910 <__env_unlock+0x4c>
  {
    lockid = -1;
  8038f4:	00bfffc4 	movi	r2,-1
  8038f8:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
  8038fc:	d0a03817 	ldw	r2,-32544(gp)
  803900:	1009883a 	mov	r4,r2
  803904:	080936c0 	call	80936c <OSSemPost>
  803908:	00000106 	br	803910 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  80390c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803910:	e037883a 	mov	sp,fp
  803914:	dfc00117 	ldw	ra,4(sp)
  803918:	df000017 	ldw	fp,0(sp)
  80391c:	dec00204 	addi	sp,sp,8
  803920:	f800283a 	ret

00803924 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  803924:	deffdb04 	addi	sp,sp,-148
  803928:	dfc02415 	stw	ra,144(sp)
  80392c:	df002315 	stw	fp,140(sp)
  803930:	df002304 	addi	fp,sp,140
  803934:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803938:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80393c:	d0a03b43 	ldbu	r2,-32531(gp)
  803940:	10803fcc 	andi	r2,r2,255
  803944:	10800060 	cmpeqi	r2,r2,1
  803948:	10003626 	beq	r2,zero,803a24 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80394c:	e0bfe204 	addi	r2,fp,-120
  803950:	100b883a 	mov	r5,r2
  803954:	01003fc4 	movi	r4,255
  803958:	080ac640 	call	80ac64 <OSTaskQuery>
  80395c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  803960:	e0bffe83 	ldbu	r2,-6(fp)
  803964:	10803fcc 	andi	r2,r2,255
  803968:	1000301e 	bne	r2,zero,803a2c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  80396c:	e0bfee83 	ldbu	r2,-70(fp)
  803970:	10803fcc 	andi	r2,r2,255
  803974:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  803978:	d0a03a17 	ldw	r2,-32536(gp)
  80397c:	e0fffd04 	addi	r3,fp,-12
  803980:	180b883a 	mov	r5,r3
  803984:	1009883a 	mov	r4,r2
  803988:	080947c0 	call	80947c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80398c:	0005303a 	rdctl	r2,status
  803990:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803994:	e0ffe117 	ldw	r3,-124(fp)
  803998:	00bfff84 	movi	r2,-2
  80399c:	1884703a 	and	r2,r3,r2
  8039a0:	1001703a 	wrctl	status,r2
  
  return context;
  8039a4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  8039a8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  8039ac:	e0bffd0b 	ldhu	r2,-12(fp)
  8039b0:	10bfffcc 	andi	r2,r2,65535
  8039b4:	10000b1e 	bne	r2,zero,8039e4 <__malloc_lock+0xc0>
  8039b8:	d0a00c17 	ldw	r2,-32720(gp)
  8039bc:	e0ffde17 	ldw	r3,-136(fp)
  8039c0:	1880081e 	bne	r3,r2,8039e4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  8039c4:	d0a03917 	ldw	r2,-32540(gp)
  8039c8:	10800044 	addi	r2,r2,1
  8039cc:	d0a03915 	stw	r2,-32540(gp)
  8039d0:	e0bfdd17 	ldw	r2,-140(fp)
  8039d4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8039d8:	e0bfdf17 	ldw	r2,-132(fp)
  8039dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  8039e0:	00000e06 	br	803a1c <__malloc_lock+0xf8>
  8039e4:	e0bfdd17 	ldw	r2,-140(fp)
  8039e8:	e0bfe015 	stw	r2,-128(fp)
  8039ec:	e0bfe017 	ldw	r2,-128(fp)
  8039f0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8039f4:	d0a03a17 	ldw	r2,-32536(gp)
  8039f8:	e0fffe84 	addi	r3,fp,-6
  8039fc:	180d883a 	mov	r6,r3
  803a00:	000b883a 	mov	r5,zero
  803a04:	1009883a 	mov	r4,r2
  803a08:	0808ff40 	call	808ff4 <OSSemPend>
    locks  = 1;
  803a0c:	00800044 	movi	r2,1
  803a10:	d0a03915 	stw	r2,-32540(gp)
    lockid = id;
  803a14:	e0bfde17 	ldw	r2,-136(fp)
  803a18:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  803a1c:	0001883a 	nop
  803a20:	00000306 	br	803a30 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  803a24:	0001883a 	nop
  803a28:	00000106 	br	803a30 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  803a2c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  803a30:	e037883a 	mov	sp,fp
  803a34:	dfc00117 	ldw	ra,4(sp)
  803a38:	df000017 	ldw	fp,0(sp)
  803a3c:	dec00204 	addi	sp,sp,8
  803a40:	f800283a 	ret

00803a44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803a44:	defff804 	addi	sp,sp,-32
  803a48:	dfc00715 	stw	ra,28(sp)
  803a4c:	df000615 	stw	fp,24(sp)
  803a50:	df000604 	addi	fp,sp,24
  803a54:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803a58:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  803a5c:	d0a03b43 	ldbu	r2,-32531(gp)
  803a60:	10803fcc 	andi	r2,r2,255
  803a64:	10800060 	cmpeqi	r2,r2,1
  803a68:	10002326 	beq	r2,zero,803af8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803a6c:	0005303a 	rdctl	r2,status
  803a70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803a74:	e0fffe17 	ldw	r3,-8(fp)
  803a78:	00bfff84 	movi	r2,-2
  803a7c:	1884703a 	and	r2,r3,r2
  803a80:	1001703a 	wrctl	status,r2
  
  return context;
  803a84:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  803a88:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  803a8c:	d0a03917 	ldw	r2,-32540(gp)
  803a90:	1000051e 	bne	r2,zero,803aa8 <__malloc_unlock+0x64>
  803a94:	e0bffa17 	ldw	r2,-24(fp)
  803a98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803a9c:	e0bffb17 	ldw	r2,-20(fp)
  803aa0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  803aa4:	00001506 	br	803afc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  803aa8:	d0a03917 	ldw	r2,-32540(gp)
  803aac:	10bfffc4 	addi	r2,r2,-1
  803ab0:	d0a03915 	stw	r2,-32540(gp)
  803ab4:	d0a03917 	ldw	r2,-32540(gp)
  803ab8:	10000a1e 	bne	r2,zero,803ae4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  803abc:	00bfffc4 	movi	r2,-1
  803ac0:	d0a00c15 	stw	r2,-32720(gp)
  803ac4:	e0bffa17 	ldw	r2,-24(fp)
  803ac8:	e0bffc15 	stw	r2,-16(fp)
  803acc:	e0bffc17 	ldw	r2,-16(fp)
  803ad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  803ad4:	d0a03a17 	ldw	r2,-32536(gp)
  803ad8:	1009883a 	mov	r4,r2
  803adc:	080936c0 	call	80936c <OSSemPost>
  803ae0:	00000606 	br	803afc <__malloc_unlock+0xb8>
  803ae4:	e0bffa17 	ldw	r2,-24(fp)
  803ae8:	e0bffd15 	stw	r2,-12(fp)
  803aec:	e0bffd17 	ldw	r2,-12(fp)
  803af0:	1001703a 	wrctl	status,r2
  803af4:	00000106 	br	803afc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  803af8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803afc:	e037883a 	mov	sp,fp
  803b00:	dfc00117 	ldw	ra,4(sp)
  803b04:	df000017 	ldw	fp,0(sp)
  803b08:	dec00204 	addi	sp,sp,8
  803b0c:	f800283a 	ret

00803b10 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  803b10:	defff704 	addi	sp,sp,-36
  803b14:	dfc00815 	stw	ra,32(sp)
  803b18:	df000715 	stw	fp,28(sp)
  803b1c:	df000704 	addi	fp,sp,28
  803b20:	e13ffd15 	stw	r4,-12(fp)
  803b24:	e17ffe15 	stw	r5,-8(fp)
  803b28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803b2c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803b30:	e0bfff17 	ldw	r2,-4(fp)
  803b34:	1000021e 	bne	r2,zero,803b40 <OSEventNameGet+0x30>
        return (0);
  803b38:	0005883a 	mov	r2,zero
  803b3c:	00003706 	br	803c1c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  803b40:	e0bffd17 	ldw	r2,-12(fp)
  803b44:	1000051e 	bne	r2,zero,803b5c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  803b48:	e0bfff17 	ldw	r2,-4(fp)
  803b4c:	00c00104 	movi	r3,4
  803b50:	10c00005 	stb	r3,0(r2)
        return (0);
  803b54:	0005883a 	mov	r2,zero
  803b58:	00003006 	br	803c1c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803b5c:	e0bffe17 	ldw	r2,-8(fp)
  803b60:	1000051e 	bne	r2,zero,803b78 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  803b64:	e0bfff17 	ldw	r2,-4(fp)
  803b68:	00c00304 	movi	r3,12
  803b6c:	10c00005 	stb	r3,0(r2)
        return (0);
  803b70:	0005883a 	mov	r2,zero
  803b74:	00002906 	br	803c1c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  803b78:	d0a04903 	ldbu	r2,-32476(gp)
  803b7c:	10803fcc 	andi	r2,r2,255
  803b80:	10000526 	beq	r2,zero,803b98 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  803b84:	e0bfff17 	ldw	r2,-4(fp)
  803b88:	00c00444 	movi	r3,17
  803b8c:	10c00005 	stb	r3,0(r2)
        return (0);
  803b90:	0005883a 	mov	r2,zero
  803b94:	00002106 	br	803c1c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  803b98:	e0bffd17 	ldw	r2,-12(fp)
  803b9c:	10800003 	ldbu	r2,0(r2)
  803ba0:	10803fcc 	andi	r2,r2,255
  803ba4:	10bfffc4 	addi	r2,r2,-1
  803ba8:	10800128 	cmpgeui	r2,r2,4
  803bac:	10000526 	beq	r2,zero,803bc4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  803bb0:	e0bfff17 	ldw	r2,-4(fp)
  803bb4:	00c00044 	movi	r3,1
  803bb8:	10c00005 	stb	r3,0(r2)
             return (0);
  803bbc:	0005883a 	mov	r2,zero
  803bc0:	00001606 	br	803c1c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  803bc4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803bc8:	0005303a 	rdctl	r2,status
  803bcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803bd0:	e0fffb17 	ldw	r3,-20(fp)
  803bd4:	00bfff84 	movi	r2,-2
  803bd8:	1884703a 	and	r2,r3,r2
  803bdc:	1001703a 	wrctl	status,r2
  
  return context;
  803be0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  803be4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  803be8:	e0bffd17 	ldw	r2,-12(fp)
  803bec:	10800384 	addi	r2,r2,14
  803bf0:	100b883a 	mov	r5,r2
  803bf4:	e13ffe17 	ldw	r4,-8(fp)
  803bf8:	08055940 	call	805594 <OS_StrCopy>
  803bfc:	e0bffa05 	stb	r2,-24(fp)
  803c00:	e0bff917 	ldw	r2,-28(fp)
  803c04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803c08:	e0bffc17 	ldw	r2,-16(fp)
  803c0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803c10:	e0bfff17 	ldw	r2,-4(fp)
  803c14:	10000005 	stb	zero,0(r2)
    return (len);
  803c18:	e0bffa03 	ldbu	r2,-24(fp)
}
  803c1c:	e037883a 	mov	sp,fp
  803c20:	dfc00117 	ldw	ra,4(sp)
  803c24:	df000017 	ldw	fp,0(sp)
  803c28:	dec00204 	addi	sp,sp,8
  803c2c:	f800283a 	ret

00803c30 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  803c30:	defff604 	addi	sp,sp,-40
  803c34:	dfc00915 	stw	ra,36(sp)
  803c38:	df000815 	stw	fp,32(sp)
  803c3c:	df000804 	addi	fp,sp,32
  803c40:	e13ffd15 	stw	r4,-12(fp)
  803c44:	e17ffe15 	stw	r5,-8(fp)
  803c48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803c4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803c50:	e0bfff17 	ldw	r2,-4(fp)
  803c54:	10004026 	beq	r2,zero,803d58 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  803c58:	e0bffd17 	ldw	r2,-12(fp)
  803c5c:	1000041e 	bne	r2,zero,803c70 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  803c60:	e0bfff17 	ldw	r2,-4(fp)
  803c64:	00c00104 	movi	r3,4
  803c68:	10c00005 	stb	r3,0(r2)
        return;
  803c6c:	00003b06 	br	803d5c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803c70:	e0bffe17 	ldw	r2,-8(fp)
  803c74:	1000041e 	bne	r2,zero,803c88 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  803c78:	e0bfff17 	ldw	r2,-4(fp)
  803c7c:	00c00304 	movi	r3,12
  803c80:	10c00005 	stb	r3,0(r2)
        return;
  803c84:	00003506 	br	803d5c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  803c88:	d0a04903 	ldbu	r2,-32476(gp)
  803c8c:	10803fcc 	andi	r2,r2,255
  803c90:	10000426 	beq	r2,zero,803ca4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  803c94:	e0bfff17 	ldw	r2,-4(fp)
  803c98:	00c00484 	movi	r3,18
  803c9c:	10c00005 	stb	r3,0(r2)
        return;
  803ca0:	00002e06 	br	803d5c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	10800003 	ldbu	r2,0(r2)
  803cac:	10803fcc 	andi	r2,r2,255
  803cb0:	10bfffc4 	addi	r2,r2,-1
  803cb4:	10800128 	cmpgeui	r2,r2,4
  803cb8:	10000426 	beq	r2,zero,803ccc <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  803cbc:	e0bfff17 	ldw	r2,-4(fp)
  803cc0:	00c00044 	movi	r3,1
  803cc4:	10c00005 	stb	r3,0(r2)
             return;
  803cc8:	00002406 	br	803d5c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  803ccc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803cd0:	0005303a 	rdctl	r2,status
  803cd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803cd8:	e0fffc17 	ldw	r3,-16(fp)
  803cdc:	00bfff84 	movi	r2,-2
  803ce0:	1884703a 	and	r2,r3,r2
  803ce4:	1001703a 	wrctl	status,r2
  
  return context;
  803ce8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  803cec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  803cf0:	e13ffe17 	ldw	r4,-8(fp)
  803cf4:	08056080 	call	805608 <OS_StrLen>
  803cf8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  803cfc:	e0bffa03 	ldbu	r2,-24(fp)
  803d00:	10800830 	cmpltui	r2,r2,32
  803d04:	1000081e 	bne	r2,zero,803d28 <OSEventNameSet+0xf8>
  803d08:	e0bff817 	ldw	r2,-32(fp)
  803d0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803d10:	e0bff917 	ldw	r2,-28(fp)
  803d14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  803d18:	e0bfff17 	ldw	r2,-4(fp)
  803d1c:	00c002c4 	movi	r3,11
  803d20:	10c00005 	stb	r3,0(r2)
        return;
  803d24:	00000d06 	br	803d5c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  803d28:	e0bffd17 	ldw	r2,-12(fp)
  803d2c:	10800384 	addi	r2,r2,14
  803d30:	e17ffe17 	ldw	r5,-8(fp)
  803d34:	1009883a 	mov	r4,r2
  803d38:	08055940 	call	805594 <OS_StrCopy>
  803d3c:	e0bff817 	ldw	r2,-32(fp)
  803d40:	e0bffb15 	stw	r2,-20(fp)
  803d44:	e0bffb17 	ldw	r2,-20(fp)
  803d48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803d4c:	e0bfff17 	ldw	r2,-4(fp)
  803d50:	10000005 	stb	zero,0(r2)
  803d54:	00000106 	br	803d5c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  803d58:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  803d5c:	e037883a 	mov	sp,fp
  803d60:	dfc00117 	ldw	ra,4(sp)
  803d64:	df000017 	ldw	fp,0(sp)
  803d68:	dec00204 	addi	sp,sp,8
  803d6c:	f800283a 	ret

00803d70 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  803d70:	deffed04 	addi	sp,sp,-76
  803d74:	dfc01215 	stw	ra,72(sp)
  803d78:	df001115 	stw	fp,68(sp)
  803d7c:	df001104 	addi	fp,sp,68
  803d80:	e13ffc15 	stw	r4,-16(fp)
  803d84:	e17ffd15 	stw	r5,-12(fp)
  803d88:	e1bffe15 	stw	r6,-8(fp)
  803d8c:	3805883a 	mov	r2,r7
  803d90:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  803d94:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  803d98:	e0800217 	ldw	r2,8(fp)
  803d9c:	1000021e 	bne	r2,zero,803da8 <OSEventPendMulti+0x38>
        return (0);
  803da0:	0005883a 	mov	r2,zero
  803da4:	00017106 	br	80436c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  803da8:	e0bffc17 	ldw	r2,-16(fp)
  803dac:	1000051e 	bne	r2,zero,803dc4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  803db0:	e0800217 	ldw	r2,8(fp)
  803db4:	00c00104 	movi	r3,4
  803db8:	10c00005 	stb	r3,0(r2)
        return (0);
  803dbc:	0005883a 	mov	r2,zero
  803dc0:	00016a06 	br	80436c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  803dc4:	e0bffd17 	ldw	r2,-12(fp)
  803dc8:	1000051e 	bne	r2,zero,803de0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  803dcc:	e0800217 	ldw	r2,8(fp)
  803dd0:	00c00104 	movi	r3,4
  803dd4:	10c00005 	stb	r3,0(r2)
        return (0);
  803dd8:	0005883a 	mov	r2,zero
  803ddc:	00016306 	br	80436c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  803de0:	e0bffe17 	ldw	r2,-8(fp)
  803de4:	1000051e 	bne	r2,zero,803dfc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  803de8:	e0800217 	ldw	r2,8(fp)
  803dec:	00c00104 	movi	r3,4
  803df0:	10c00005 	stb	r3,0(r2)
        return (0);
  803df4:	0005883a 	mov	r2,zero
  803df8:	00015c06 	br	80436c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  803dfc:	e0bffd17 	ldw	r2,-12(fp)
  803e00:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  803e04:	e0bffc17 	ldw	r2,-16(fp)
  803e08:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  803e0c:	e0bfef17 	ldw	r2,-68(fp)
  803e10:	10800017 	ldw	r2,0(r2)
  803e14:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  803e18:	00001906 	br	803e80 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  803e1c:	e0bff017 	ldw	r2,-64(fp)
  803e20:	10800003 	ldbu	r2,0(r2)
  803e24:	10803fcc 	andi	r2,r2,255
  803e28:	10c000a0 	cmpeqi	r3,r2,2
  803e2c:	1800091e 	bne	r3,zero,803e54 <OSEventPendMulti+0xe4>
  803e30:	10c000e0 	cmpeqi	r3,r2,3
  803e34:	1800091e 	bne	r3,zero,803e5c <OSEventPendMulti+0xec>
  803e38:	10800060 	cmpeqi	r2,r2,1
  803e3c:	1000091e 	bne	r2,zero,803e64 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  803e40:	e0800217 	ldw	r2,8(fp)
  803e44:	00c00044 	movi	r3,1
  803e48:	10c00005 	stb	r3,0(r2)
                 return (0);
  803e4c:	0005883a 	mov	r2,zero
  803e50:	00014606 	br	80436c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  803e54:	0001883a 	nop
  803e58:	00000306 	br	803e68 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  803e5c:	0001883a 	nop
  803e60:	00000106 	br	803e68 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  803e64:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  803e68:	e0bfef17 	ldw	r2,-68(fp)
  803e6c:	10800104 	addi	r2,r2,4
  803e70:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  803e74:	e0bfef17 	ldw	r2,-68(fp)
  803e78:	10800017 	ldw	r2,0(r2)
  803e7c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  803e80:	e0bff017 	ldw	r2,-64(fp)
  803e84:	103fe51e 	bne	r2,zero,803e1c <__alt_mem_epcs_flash_controller_0+0xff7fae1c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  803e88:	d0a04903 	ldbu	r2,-32476(gp)
  803e8c:	10803fcc 	andi	r2,r2,255
  803e90:	10000526 	beq	r2,zero,803ea8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  803e94:	e0800217 	ldw	r2,8(fp)
  803e98:	00c00084 	movi	r3,2
  803e9c:	10c00005 	stb	r3,0(r2)
        return (0);
  803ea0:	0005883a 	mov	r2,zero
  803ea4:	00013106 	br	80436c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  803ea8:	d0a03b03 	ldbu	r2,-32532(gp)
  803eac:	10803fcc 	andi	r2,r2,255
  803eb0:	10000526 	beq	r2,zero,803ec8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  803eb4:	e0800217 	ldw	r2,8(fp)
  803eb8:	00c00344 	movi	r3,13
  803ebc:	10c00005 	stb	r3,0(r2)
        return (0);
  803ec0:	0005883a 	mov	r2,zero
  803ec4:	00012906 	br	80436c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803ec8:	0005303a 	rdctl	r2,status
  803ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803ed0:	e0fffb17 	ldw	r3,-20(fp)
  803ed4:	00bfff84 	movi	r2,-2
  803ed8:	1884703a 	and	r2,r3,r2
  803edc:	1001703a 	wrctl	status,r2
  
  return context;
  803ee0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  803ee4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  803ee8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  803eec:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  803ef0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  803ef4:	e0bffc17 	ldw	r2,-16(fp)
  803ef8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  803efc:	e0bfef17 	ldw	r2,-68(fp)
  803f00:	10800017 	ldw	r2,0(r2)
  803f04:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  803f08:	00008106 	br	804110 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  803f0c:	e0bff017 	ldw	r2,-64(fp)
  803f10:	10800003 	ldbu	r2,0(r2)
  803f14:	10803fcc 	andi	r2,r2,255
  803f18:	10c000a0 	cmpeqi	r3,r2,2
  803f1c:	18003c1e 	bne	r3,zero,804010 <OSEventPendMulti+0x2a0>
  803f20:	10c000e0 	cmpeqi	r3,r2,3
  803f24:	1800031e 	bne	r3,zero,803f34 <OSEventPendMulti+0x1c4>
  803f28:	10800060 	cmpeqi	r2,r2,1
  803f2c:	10001e1e 	bne	r2,zero,803fa8 <OSEventPendMulti+0x238>
  803f30:	00006606 	br	8040cc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  803f34:	e0bff017 	ldw	r2,-64(fp)
  803f38:	1080020b 	ldhu	r2,8(r2)
  803f3c:	10bfffcc 	andi	r2,r2,65535
  803f40:	10001526 	beq	r2,zero,803f98 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  803f44:	e0bff017 	ldw	r2,-64(fp)
  803f48:	1080020b 	ldhu	r2,8(r2)
  803f4c:	10bfffc4 	addi	r2,r2,-1
  803f50:	1007883a 	mov	r3,r2
  803f54:	e0bff017 	ldw	r2,-64(fp)
  803f58:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  803f5c:	e0bffd17 	ldw	r2,-12(fp)
  803f60:	10c00104 	addi	r3,r2,4
  803f64:	e0fffd15 	stw	r3,-12(fp)
  803f68:	e0fff017 	ldw	r3,-64(fp)
  803f6c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  803f70:	00800044 	movi	r2,1
  803f74:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  803f78:	e0bffe17 	ldw	r2,-8(fp)
  803f7c:	10c00104 	addi	r3,r2,4
  803f80:	e0fffe15 	stw	r3,-8(fp)
  803f84:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  803f88:	e0bff18b 	ldhu	r2,-58(fp)
  803f8c:	10800044 	addi	r2,r2,1
  803f90:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  803f94:	00005806 	br	8040f8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  803f98:	e0bff203 	ldbu	r2,-56(fp)
  803f9c:	10800054 	ori	r2,r2,1
  803fa0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  803fa4:	00005406 	br	8040f8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  803fa8:	e0bff017 	ldw	r2,-64(fp)
  803fac:	10800117 	ldw	r2,4(r2)
  803fb0:	10001326 	beq	r2,zero,804000 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  803fb4:	e0bffe17 	ldw	r2,-8(fp)
  803fb8:	10c00104 	addi	r3,r2,4
  803fbc:	e0fffe15 	stw	r3,-8(fp)
  803fc0:	e0fff017 	ldw	r3,-64(fp)
  803fc4:	18c00117 	ldw	r3,4(r3)
  803fc8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  803fcc:	e0bff017 	ldw	r2,-64(fp)
  803fd0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  803fd4:	e0bffd17 	ldw	r2,-12(fp)
  803fd8:	10c00104 	addi	r3,r2,4
  803fdc:	e0fffd15 	stw	r3,-12(fp)
  803fe0:	e0fff017 	ldw	r3,-64(fp)
  803fe4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  803fe8:	00800044 	movi	r2,1
  803fec:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  803ff0:	e0bff18b 	ldhu	r2,-58(fp)
  803ff4:	10800044 	addi	r2,r2,1
  803ff8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  803ffc:	00003e06 	br	8040f8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  804000:	e0bff203 	ldbu	r2,-56(fp)
  804004:	10800094 	ori	r2,r2,2
  804008:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80400c:	00003a06 	br	8040f8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  804010:	e0bff017 	ldw	r2,-64(fp)
  804014:	10800117 	ldw	r2,4(r2)
  804018:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80401c:	e0bff517 	ldw	r2,-44(fp)
  804020:	1080058b 	ldhu	r2,22(r2)
  804024:	10bfffcc 	andi	r2,r2,65535
  804028:	10002426 	beq	r2,zero,8040bc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80402c:	e0bffe17 	ldw	r2,-8(fp)
  804030:	10c00104 	addi	r3,r2,4
  804034:	e0fffe15 	stw	r3,-8(fp)
  804038:	e0fff517 	ldw	r3,-44(fp)
  80403c:	18c00417 	ldw	r3,16(r3)
  804040:	19400104 	addi	r5,r3,4
  804044:	e13ff517 	ldw	r4,-44(fp)
  804048:	21400415 	stw	r5,16(r4)
  80404c:	18c00017 	ldw	r3,0(r3)
  804050:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  804054:	e0bff517 	ldw	r2,-44(fp)
  804058:	10c00417 	ldw	r3,16(r2)
  80405c:	e0bff517 	ldw	r2,-44(fp)
  804060:	10800217 	ldw	r2,8(r2)
  804064:	1880041e 	bne	r3,r2,804078 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  804068:	e0bff517 	ldw	r2,-44(fp)
  80406c:	10c00117 	ldw	r3,4(r2)
  804070:	e0bff517 	ldw	r2,-44(fp)
  804074:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  804078:	e0bff517 	ldw	r2,-44(fp)
  80407c:	1080058b 	ldhu	r2,22(r2)
  804080:	10bfffc4 	addi	r2,r2,-1
  804084:	1007883a 	mov	r3,r2
  804088:	e0bff517 	ldw	r2,-44(fp)
  80408c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  804090:	e0bffd17 	ldw	r2,-12(fp)
  804094:	10c00104 	addi	r3,r2,4
  804098:	e0fffd15 	stw	r3,-12(fp)
  80409c:	e0fff017 	ldw	r3,-64(fp)
  8040a0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  8040a4:	00800044 	movi	r2,1
  8040a8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  8040ac:	e0bff18b 	ldhu	r2,-58(fp)
  8040b0:	10800044 	addi	r2,r2,1
  8040b4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  8040b8:	00000f06 	br	8040f8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  8040bc:	e0bff203 	ldbu	r2,-56(fp)
  8040c0:	10800114 	ori	r2,r2,4
  8040c4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  8040c8:	00000b06 	br	8040f8 <OSEventPendMulti+0x388>
  8040cc:	e0bff317 	ldw	r2,-52(fp)
  8040d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8040d4:	e0bff417 	ldw	r2,-48(fp)
  8040d8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8040dc:	e0bffd17 	ldw	r2,-12(fp)
  8040e0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  8040e4:	e0800217 	ldw	r2,8(fp)
  8040e8:	00c00044 	movi	r3,1
  8040ec:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  8040f0:	e0bff18b 	ldhu	r2,-58(fp)
  8040f4:	00009d06 	br	80436c <OSEventPendMulti+0x5fc>
        }
        pevents++;
  8040f8:	e0bfef17 	ldw	r2,-68(fp)
  8040fc:	10800104 	addi	r2,r2,4
  804100:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  804104:	e0bfef17 	ldw	r2,-68(fp)
  804108:	10800017 	ldw	r2,0(r2)
  80410c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  804110:	e0bff017 	ldw	r2,-64(fp)
  804114:	103f7d1e 	bne	r2,zero,803f0c <__alt_mem_epcs_flash_controller_0+0xff7faf0c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  804118:	e0bff103 	ldbu	r2,-60(fp)
  80411c:	10800058 	cmpnei	r2,r2,1
  804120:	10000a1e 	bne	r2,zero,80414c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  804124:	e0bffd17 	ldw	r2,-12(fp)
  804128:	10000015 	stw	zero,0(r2)
  80412c:	e0bff317 	ldw	r2,-52(fp)
  804130:	e0bff615 	stw	r2,-40(fp)
  804134:	e0bff617 	ldw	r2,-40(fp)
  804138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80413c:	e0800217 	ldw	r2,8(fp)
  804140:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  804144:	e0bff18b 	ldhu	r2,-58(fp)
  804148:	00008806 	br	80436c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80414c:	d0a04a17 	ldw	r2,-32472(gp)
  804150:	d0e04a17 	ldw	r3,-32472(gp)
  804154:	19000c03 	ldbu	r4,48(r3)
  804158:	e0fff203 	ldbu	r3,-56(fp)
  80415c:	20c6b03a 	or	r3,r4,r3
  804160:	1809883a 	mov	r4,r3
  804164:	00ffe004 	movi	r3,-128
  804168:	20c6b03a 	or	r3,r4,r3
  80416c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  804170:	d0a04a17 	ldw	r2,-32472(gp)
  804174:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  804178:	d0a04a17 	ldw	r2,-32472(gp)
  80417c:	e0ffff0b 	ldhu	r3,-4(fp)
  804180:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  804184:	e13ffc17 	ldw	r4,-16(fp)
  804188:	0804cac0 	call	804cac <OS_EventTaskWaitMulti>
  80418c:	e0bff317 	ldw	r2,-52(fp)
  804190:	e0bff915 	stw	r2,-28(fp)
  804194:	e0bff917 	ldw	r2,-28(fp)
  804198:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80419c:	08054500 	call	805450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8041a0:	0005303a 	rdctl	r2,status
  8041a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8041a8:	e0fff717 	ldw	r3,-36(fp)
  8041ac:	00bfff84 	movi	r2,-2
  8041b0:	1884703a 	and	r2,r3,r2
  8041b4:	1001703a 	wrctl	status,r2
  
  return context;
  8041b8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  8041bc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8041c0:	d0a04a17 	ldw	r2,-32472(gp)
  8041c4:	10800c43 	ldbu	r2,49(r2)
  8041c8:	10803fcc 	andi	r2,r2,255
  8041cc:	10000226 	beq	r2,zero,8041d8 <OSEventPendMulti+0x468>
  8041d0:	108000a0 	cmpeqi	r2,r2,2
  8041d4:	10001826 	beq	r2,zero,804238 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  8041d8:	d0a04a17 	ldw	r2,-32472(gp)
  8041dc:	10800717 	ldw	r2,28(r2)
  8041e0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  8041e4:	e0bff017 	ldw	r2,-64(fp)
  8041e8:	10000b26 	beq	r2,zero,804218 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8041ec:	e0bffd17 	ldw	r2,-12(fp)
  8041f0:	10c00104 	addi	r3,r2,4
  8041f4:	e0fffd15 	stw	r3,-12(fp)
  8041f8:	e0fff017 	ldw	r3,-64(fp)
  8041fc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  804200:	e0bffd17 	ldw	r2,-12(fp)
  804204:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  804208:	e0bff18b 	ldhu	r2,-58(fp)
  80420c:	10800044 	addi	r2,r2,1
  804210:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  804214:	00000d06 	br	80424c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  804218:	d0a04a17 	ldw	r2,-32472(gp)
  80421c:	00c00044 	movi	r3,1
  804220:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  804224:	d0a04a17 	ldw	r2,-32472(gp)
  804228:	e17ffc17 	ldw	r5,-16(fp)
  80422c:	1009883a 	mov	r4,r2
  804230:	0804eb40 	call	804eb4 <OS_EventTaskRemoveMulti>
             }
			 break;
  804234:	00000506 	br	80424c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  804238:	d0a04a17 	ldw	r2,-32472(gp)
  80423c:	e17ffc17 	ldw	r5,-16(fp)
  804240:	1009883a 	mov	r4,r2
  804244:	0804eb40 	call	804eb4 <OS_EventTaskRemoveMulti>
             break;
  804248:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80424c:	d0a04a17 	ldw	r2,-32472(gp)
  804250:	10800c43 	ldbu	r2,49(r2)
  804254:	10803fcc 	andi	r2,r2,255
  804258:	10000326 	beq	r2,zero,804268 <OSEventPendMulti+0x4f8>
  80425c:	108000a0 	cmpeqi	r2,r2,2
  804260:	1000231e 	bne	r2,zero,8042f0 <OSEventPendMulti+0x580>
  804264:	00002a06 	br	804310 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  804268:	e0bff017 	ldw	r2,-64(fp)
  80426c:	10800003 	ldbu	r2,0(r2)
  804270:	10803fcc 	andi	r2,r2,255
  804274:	0080100e 	bge	zero,r2,8042b8 <OSEventPendMulti+0x548>
  804278:	10c000d0 	cmplti	r3,r2,3
  80427c:	1800071e 	bne	r3,zero,80429c <OSEventPendMulti+0x52c>
  804280:	108000e0 	cmpeqi	r2,r2,3
  804284:	10000c26 	beq	r2,zero,8042b8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  804288:	e0bffe17 	ldw	r2,-8(fp)
  80428c:	10c00104 	addi	r3,r2,4
  804290:	e0fffe15 	stw	r3,-8(fp)
  804294:	10000015 	stw	zero,0(r2)
                      break;
  804298:	00001206 	br	8042e4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80429c:	e0bffe17 	ldw	r2,-8(fp)
  8042a0:	10c00104 	addi	r3,r2,4
  8042a4:	e0fffe15 	stw	r3,-8(fp)
  8042a8:	d0e04a17 	ldw	r3,-32472(gp)
  8042ac:	18c00917 	ldw	r3,36(r3)
  8042b0:	10c00015 	stw	r3,0(r2)
                      break;
  8042b4:	00000b06 	br	8042e4 <OSEventPendMulti+0x574>
  8042b8:	e0bff317 	ldw	r2,-52(fp)
  8042bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8042c0:	e0bff817 	ldw	r2,-32(fp)
  8042c4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8042c8:	e0bffd17 	ldw	r2,-12(fp)
  8042cc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  8042d0:	e0800217 	ldw	r2,8(fp)
  8042d4:	00c00044 	movi	r3,1
  8042d8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  8042dc:	e0bff18b 	ldhu	r2,-58(fp)
  8042e0:	00002206 	br	80436c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  8042e4:	e0800217 	ldw	r2,8(fp)
  8042e8:	10000005 	stb	zero,0(r2)
             break;
  8042ec:	00001006 	br	804330 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  8042f0:	e0bffe17 	ldw	r2,-8(fp)
  8042f4:	10c00104 	addi	r3,r2,4
  8042f8:	e0fffe15 	stw	r3,-8(fp)
  8042fc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  804300:	e0800217 	ldw	r2,8(fp)
  804304:	00c00384 	movi	r3,14
  804308:	10c00005 	stb	r3,0(r2)
             break;
  80430c:	00000806 	br	804330 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  804310:	e0bffe17 	ldw	r2,-8(fp)
  804314:	10c00104 	addi	r3,r2,4
  804318:	e0fffe15 	stw	r3,-8(fp)
  80431c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  804320:	e0800217 	ldw	r2,8(fp)
  804324:	00c00284 	movi	r3,10
  804328:	10c00005 	stb	r3,0(r2)
             break;
  80432c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  804330:	d0a04a17 	ldw	r2,-32472(gp)
  804334:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  804338:	d0a04a17 	ldw	r2,-32472(gp)
  80433c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  804340:	d0a04a17 	ldw	r2,-32472(gp)
  804344:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  804348:	d0a04a17 	ldw	r2,-32472(gp)
  80434c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  804350:	d0a04a17 	ldw	r2,-32472(gp)
  804354:	10000915 	stw	zero,36(r2)
  804358:	e0bff317 	ldw	r2,-52(fp)
  80435c:	e0bffa15 	stw	r2,-24(fp)
  804360:	e0bffa17 	ldw	r2,-24(fp)
  804364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  804368:	e0bff18b 	ldhu	r2,-58(fp)
}
  80436c:	e037883a 	mov	sp,fp
  804370:	dfc00117 	ldw	ra,4(sp)
  804374:	df000017 	ldw	fp,0(sp)
  804378:	dec00204 	addi	sp,sp,8
  80437c:	f800283a 	ret

00804380 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  804380:	defffe04 	addi	sp,sp,-8
  804384:	dfc00115 	stw	ra,4(sp)
  804388:	df000015 	stw	fp,0(sp)
  80438c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  804390:	080ed780 	call	80ed78 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  804394:	08050fc0 	call	8050fc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  804398:	08051440 	call	805144 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80439c:	08052b00 	call	8052b0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  8043a0:	080501c0 	call	80501c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  8043a4:	08071500 	call	807150 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  8043a8:	0807a500 	call	807a50 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8043ac:	0808b840 	call	808b84 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8043b0:	08051b00 	call	8051b0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8043b4:	08052300 	call	805230 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8043b8:	080ed980 	call	80ed98 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8043bc:	0805b240 	call	805b24 <OSDebugInit>
#endif
}
  8043c0:	0001883a 	nop
  8043c4:	e037883a 	mov	sp,fp
  8043c8:	dfc00117 	ldw	ra,4(sp)
  8043cc:	df000017 	ldw	fp,0(sp)
  8043d0:	dec00204 	addi	sp,sp,8
  8043d4:	f800283a 	ret

008043d8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  8043d8:	deffff04 	addi	sp,sp,-4
  8043dc:	df000015 	stw	fp,0(sp)
  8043e0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  8043e4:	d0a03b43 	ldbu	r2,-32531(gp)
  8043e8:	10803fcc 	andi	r2,r2,255
  8043ec:	10800058 	cmpnei	r2,r2,1
  8043f0:	1000071e 	bne	r2,zero,804410 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  8043f4:	d0a04903 	ldbu	r2,-32476(gp)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	10803fe0 	cmpeqi	r2,r2,255
  804400:	1000031e 	bne	r2,zero,804410 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  804404:	d0a04903 	ldbu	r2,-32476(gp)
  804408:	10800044 	addi	r2,r2,1
  80440c:	d0a04905 	stb	r2,-32476(gp)
        }
    }
}
  804410:	0001883a 	nop
  804414:	e037883a 	mov	sp,fp
  804418:	df000017 	ldw	fp,0(sp)
  80441c:	dec00104 	addi	sp,sp,4
  804420:	f800283a 	ret

00804424 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  804424:	defffb04 	addi	sp,sp,-20
  804428:	dfc00415 	stw	ra,16(sp)
  80442c:	df000315 	stw	fp,12(sp)
  804430:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804434:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  804438:	d0a03b43 	ldbu	r2,-32531(gp)
  80443c:	10803fcc 	andi	r2,r2,255
  804440:	10800058 	cmpnei	r2,r2,1
  804444:	10002f1e 	bne	r2,zero,804504 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804448:	0005303a 	rdctl	r2,status
  80444c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804450:	e0ffff17 	ldw	r3,-4(fp)
  804454:	00bfff84 	movi	r2,-2
  804458:	1884703a 	and	r2,r3,r2
  80445c:	1001703a 	wrctl	status,r2
  
  return context;
  804460:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  804464:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  804468:	d0a04903 	ldbu	r2,-32476(gp)
  80446c:	10803fcc 	andi	r2,r2,255
  804470:	10000326 	beq	r2,zero,804480 <OSIntExit+0x5c>
            OSIntNesting--;
  804474:	d0a04903 	ldbu	r2,-32476(gp)
  804478:	10bfffc4 	addi	r2,r2,-1
  80447c:	d0a04905 	stb	r2,-32476(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  804480:	d0a04903 	ldbu	r2,-32476(gp)
  804484:	10803fcc 	andi	r2,r2,255
  804488:	10001a1e 	bne	r2,zero,8044f4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80448c:	d0a03b03 	ldbu	r2,-32532(gp)
  804490:	10803fcc 	andi	r2,r2,255
  804494:	1000171e 	bne	r2,zero,8044f4 <OSIntExit+0xd0>
                OS_SchedNew();
  804498:	08055200 	call	805520 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80449c:	d0e03d03 	ldbu	r3,-32524(gp)
  8044a0:	d0a03d43 	ldbu	r2,-32523(gp)
  8044a4:	18c03fcc 	andi	r3,r3,255
  8044a8:	10803fcc 	andi	r2,r2,255
  8044ac:	18801126 	beq	r3,r2,8044f4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  8044b0:	d0a03d03 	ldbu	r2,-32524(gp)
  8044b4:	10c03fcc 	andi	r3,r2,255
  8044b8:	008020b4 	movhi	r2,130
  8044bc:	10a21b04 	addi	r2,r2,-30612
  8044c0:	18c7883a 	add	r3,r3,r3
  8044c4:	18c7883a 	add	r3,r3,r3
  8044c8:	10c5883a 	add	r2,r2,r3
  8044cc:	10800017 	ldw	r2,0(r2)
  8044d0:	d0a04515 	stw	r2,-32492(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  8044d4:	d0a04517 	ldw	r2,-32492(gp)
  8044d8:	10c00e17 	ldw	r3,56(r2)
  8044dc:	18c00044 	addi	r3,r3,1
  8044e0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  8044e4:	d0a04017 	ldw	r2,-32512(gp)
  8044e8:	10800044 	addi	r2,r2,1
  8044ec:	d0a04015 	stw	r2,-32512(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  8044f0:	080eaa40 	call	80eaa4 <OSCtxSw>
  8044f4:	e0bffd17 	ldw	r2,-12(fp)
  8044f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8044fc:	e0bffe17 	ldw	r2,-8(fp)
  804500:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  804504:	0001883a 	nop
  804508:	e037883a 	mov	sp,fp
  80450c:	dfc00117 	ldw	ra,4(sp)
  804510:	df000017 	ldw	fp,0(sp)
  804514:	dec00204 	addi	sp,sp,8
  804518:	f800283a 	ret

0080451c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80451c:	defffc04 	addi	sp,sp,-16
  804520:	df000315 	stw	fp,12(sp)
  804524:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804528:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80452c:	d0a03b43 	ldbu	r2,-32531(gp)
  804530:	10803fcc 	andi	r2,r2,255
  804534:	10800058 	cmpnei	r2,r2,1
  804538:	1000161e 	bne	r2,zero,804594 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80453c:	0005303a 	rdctl	r2,status
  804540:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804544:	e0ffff17 	ldw	r3,-4(fp)
  804548:	00bfff84 	movi	r2,-2
  80454c:	1884703a 	and	r2,r3,r2
  804550:	1001703a 	wrctl	status,r2
  
  return context;
  804554:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  804558:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80455c:	d0a04903 	ldbu	r2,-32476(gp)
  804560:	10803fcc 	andi	r2,r2,255
  804564:	1000071e 	bne	r2,zero,804584 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  804568:	d0a03b03 	ldbu	r2,-32532(gp)
  80456c:	10803fcc 	andi	r2,r2,255
  804570:	10803fe0 	cmpeqi	r2,r2,255
  804574:	1000031e 	bne	r2,zero,804584 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  804578:	d0a03b03 	ldbu	r2,-32532(gp)
  80457c:	10800044 	addi	r2,r2,1
  804580:	d0a03b05 	stb	r2,-32532(gp)
  804584:	e0bffd17 	ldw	r2,-12(fp)
  804588:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80458c:	e0bffe17 	ldw	r2,-8(fp)
  804590:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  804594:	0001883a 	nop
  804598:	e037883a 	mov	sp,fp
  80459c:	df000017 	ldw	fp,0(sp)
  8045a0:	dec00104 	addi	sp,sp,4
  8045a4:	f800283a 	ret

008045a8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  8045a8:	defff804 	addi	sp,sp,-32
  8045ac:	dfc00715 	stw	ra,28(sp)
  8045b0:	df000615 	stw	fp,24(sp)
  8045b4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8045b8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  8045bc:	d0a03b43 	ldbu	r2,-32531(gp)
  8045c0:	10803fcc 	andi	r2,r2,255
  8045c4:	10800058 	cmpnei	r2,r2,1
  8045c8:	1000281e 	bne	r2,zero,80466c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8045cc:	0005303a 	rdctl	r2,status
  8045d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8045d4:	e0ffff17 	ldw	r3,-4(fp)
  8045d8:	00bfff84 	movi	r2,-2
  8045dc:	1884703a 	and	r2,r3,r2
  8045e0:	1001703a 	wrctl	status,r2
  
  return context;
  8045e4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  8045e8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  8045ec:	d0a03b03 	ldbu	r2,-32532(gp)
  8045f0:	10803fcc 	andi	r2,r2,255
  8045f4:	10001926 	beq	r2,zero,80465c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  8045f8:	d0a03b03 	ldbu	r2,-32532(gp)
  8045fc:	10bfffc4 	addi	r2,r2,-1
  804600:	d0a03b05 	stb	r2,-32532(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  804604:	d0a03b03 	ldbu	r2,-32532(gp)
  804608:	10803fcc 	andi	r2,r2,255
  80460c:	10000e1e 	bne	r2,zero,804648 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  804610:	d0a04903 	ldbu	r2,-32476(gp)
  804614:	10803fcc 	andi	r2,r2,255
  804618:	1000061e 	bne	r2,zero,804634 <OSSchedUnlock+0x8c>
  80461c:	e0bffa17 	ldw	r2,-24(fp)
  804620:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804624:	e0bffb17 	ldw	r2,-20(fp)
  804628:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80462c:	08054500 	call	805450 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  804630:	00000e06 	br	80466c <OSSchedUnlock+0xc4>
  804634:	e0bffa17 	ldw	r2,-24(fp)
  804638:	e0bffc15 	stw	r2,-16(fp)
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	1001703a 	wrctl	status,r2
  804644:	00000906 	br	80466c <OSSchedUnlock+0xc4>
  804648:	e0bffa17 	ldw	r2,-24(fp)
  80464c:	e0bffd15 	stw	r2,-12(fp)
  804650:	e0bffd17 	ldw	r2,-12(fp)
  804654:	1001703a 	wrctl	status,r2
  804658:	00000406 	br	80466c <OSSchedUnlock+0xc4>
  80465c:	e0bffa17 	ldw	r2,-24(fp)
  804660:	e0bffe15 	stw	r2,-8(fp)
  804664:	e0bffe17 	ldw	r2,-8(fp)
  804668:	1001703a 	wrctl	status,r2
  80466c:	0001883a 	nop
  804670:	e037883a 	mov	sp,fp
  804674:	dfc00117 	ldw	ra,4(sp)
  804678:	df000017 	ldw	fp,0(sp)
  80467c:	dec00204 	addi	sp,sp,8
  804680:	f800283a 	ret

00804684 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  804684:	defffe04 	addi	sp,sp,-8
  804688:	dfc00115 	stw	ra,4(sp)
  80468c:	df000015 	stw	fp,0(sp)
  804690:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  804694:	d0a03b43 	ldbu	r2,-32531(gp)
  804698:	10803fcc 	andi	r2,r2,255
  80469c:	10000f1e 	bne	r2,zero,8046dc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  8046a0:	08055200 	call	805520 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  8046a4:	d0a03d03 	ldbu	r2,-32524(gp)
  8046a8:	d0a03d45 	stb	r2,-32523(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  8046ac:	d0a03d03 	ldbu	r2,-32524(gp)
  8046b0:	10c03fcc 	andi	r3,r2,255
  8046b4:	008020b4 	movhi	r2,130
  8046b8:	10a21b04 	addi	r2,r2,-30612
  8046bc:	18c7883a 	add	r3,r3,r3
  8046c0:	18c7883a 	add	r3,r3,r3
  8046c4:	10c5883a 	add	r2,r2,r3
  8046c8:	10800017 	ldw	r2,0(r2)
  8046cc:	d0a04515 	stw	r2,-32492(gp)
        OSTCBCur      = OSTCBHighRdy;
  8046d0:	d0a04517 	ldw	r2,-32492(gp)
  8046d4:	d0a04a15 	stw	r2,-32472(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  8046d8:	080eb300 	call	80eb30 <OSStartHighRdy>
    }
}
  8046dc:	0001883a 	nop
  8046e0:	e037883a 	mov	sp,fp
  8046e4:	dfc00117 	ldw	ra,4(sp)
  8046e8:	df000017 	ldw	fp,0(sp)
  8046ec:	dec00204 	addi	sp,sp,8
  8046f0:	f800283a 	ret

008046f4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  8046f4:	defff904 	addi	sp,sp,-28
  8046f8:	dfc00615 	stw	ra,24(sp)
  8046fc:	df000515 	stw	fp,20(sp)
  804700:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804704:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  804708:	01000084 	movi	r4,2
  80470c:	080adf80 	call	80adf8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804710:	0005303a 	rdctl	r2,status
  804714:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804718:	e0fffc17 	ldw	r3,-16(fp)
  80471c:	00bfff84 	movi	r2,-2
  804720:	1884703a 	and	r2,r3,r2
  804724:	1001703a 	wrctl	status,r2
  
  return context;
  804728:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80472c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  804730:	d0203c15 	stw	zero,-32528(gp)
  804734:	e0bffb17 	ldw	r2,-20(fp)
  804738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80473c:	e0bffd17 	ldw	r2,-12(fp)
  804740:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  804744:	01001904 	movi	r4,100
  804748:	080adf80 	call	80adf8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80474c:	0005303a 	rdctl	r2,status
  804750:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804754:	e0fffe17 	ldw	r3,-8(fp)
  804758:	00bfff84 	movi	r2,-2
  80475c:	1884703a 	and	r2,r3,r2
  804760:	1001703a 	wrctl	status,r2
  
  return context;
  804764:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  804768:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80476c:	d0a03c17 	ldw	r2,-32528(gp)
  804770:	d0a04115 	stw	r2,-32508(gp)
    OSStatRdy    = OS_TRUE;
  804774:	00800044 	movi	r2,1
  804778:	d0a04d05 	stb	r2,-32460(gp)
  80477c:	e0bffb17 	ldw	r2,-20(fp)
  804780:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804784:	e0bfff17 	ldw	r2,-4(fp)
  804788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80478c:	0001883a 	nop
  804790:	e037883a 	mov	sp,fp
  804794:	dfc00117 	ldw	ra,4(sp)
  804798:	df000017 	ldw	fp,0(sp)
  80479c:	dec00204 	addi	sp,sp,8
  8047a0:	f800283a 	ret

008047a4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  8047a4:	defff704 	addi	sp,sp,-36
  8047a8:	dfc00815 	stw	ra,32(sp)
  8047ac:	df000715 	stw	fp,28(sp)
  8047b0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8047b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  8047b8:	080ed580 	call	80ed58 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8047bc:	0005303a 	rdctl	r2,status
  8047c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8047c4:	e0fffd17 	ldw	r3,-12(fp)
  8047c8:	00bfff84 	movi	r2,-2
  8047cc:	1884703a 	and	r2,r3,r2
  8047d0:	1001703a 	wrctl	status,r2
  
  return context;
  8047d4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  8047d8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  8047dc:	d0a04b17 	ldw	r2,-32468(gp)
  8047e0:	10800044 	addi	r2,r2,1
  8047e4:	d0a04b15 	stw	r2,-32468(gp)
  8047e8:	e0bffb17 	ldw	r2,-20(fp)
  8047ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8047f0:	e0bfff17 	ldw	r2,-4(fp)
  8047f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  8047f8:	d0a03b43 	ldbu	r2,-32531(gp)
  8047fc:	10803fcc 	andi	r2,r2,255
  804800:	10800058 	cmpnei	r2,r2,1
  804804:	10006a1e 	bne	r2,zero,8049b0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  804808:	d0a03f03 	ldbu	r2,-32516(gp)
  80480c:	10803fcc 	andi	r2,r2,255
  804810:	10c00060 	cmpeqi	r3,r2,1
  804814:	1800061e 	bne	r3,zero,804830 <OSTimeTick+0x8c>
  804818:	10c000a0 	cmpeqi	r3,r2,2
  80481c:	1800061e 	bne	r3,zero,804838 <OSTimeTick+0x94>
  804820:	10000a1e 	bne	r2,zero,80484c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  804824:	00800044 	movi	r2,1
  804828:	e0bffa05 	stb	r2,-24(fp)
                 break;
  80482c:	00000b06 	br	80485c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  804830:	e03ffa05 	stb	zero,-24(fp)
                 break;
  804834:	00000906 	br	80485c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  804838:	00800044 	movi	r2,1
  80483c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  804840:	00800044 	movi	r2,1
  804844:	d0a03f05 	stb	r2,-32516(gp)
                 break;
  804848:	00000406 	br	80485c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80484c:	00800044 	movi	r2,1
  804850:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  804854:	d0203f05 	stb	zero,-32516(gp)
                 break;
  804858:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80485c:	e0bffa03 	ldbu	r2,-24(fp)
  804860:	10005226 	beq	r2,zero,8049ac <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  804864:	d0a03e17 	ldw	r2,-32520(gp)
  804868:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80486c:	00004906 	br	804994 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804870:	0005303a 	rdctl	r2,status
  804874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804878:	e0fffc17 	ldw	r3,-16(fp)
  80487c:	00bfff84 	movi	r2,-2
  804880:	1884703a 	and	r2,r3,r2
  804884:	1001703a 	wrctl	status,r2
  
  return context;
  804888:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  80488c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  804890:	e0bff917 	ldw	r2,-28(fp)
  804894:	10800b8b 	ldhu	r2,46(r2)
  804898:	10bfffcc 	andi	r2,r2,65535
  80489c:	10003626 	beq	r2,zero,804978 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  8048a0:	e0bff917 	ldw	r2,-28(fp)
  8048a4:	10800b8b 	ldhu	r2,46(r2)
  8048a8:	10bfffc4 	addi	r2,r2,-1
  8048ac:	1007883a 	mov	r3,r2
  8048b0:	e0bff917 	ldw	r2,-28(fp)
  8048b4:	10c00b8d 	sth	r3,46(r2)
  8048b8:	e0bff917 	ldw	r2,-28(fp)
  8048bc:	10800b8b 	ldhu	r2,46(r2)
  8048c0:	10bfffcc 	andi	r2,r2,65535
  8048c4:	10002c1e 	bne	r2,zero,804978 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8048c8:	e0bff917 	ldw	r2,-28(fp)
  8048cc:	10800c03 	ldbu	r2,48(r2)
  8048d0:	10803fcc 	andi	r2,r2,255
  8048d4:	10800dcc 	andi	r2,r2,55
  8048d8:	10000b26 	beq	r2,zero,804908 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8048dc:	e0bff917 	ldw	r2,-28(fp)
  8048e0:	10c00c03 	ldbu	r3,48(r2)
  8048e4:	00bff204 	movi	r2,-56
  8048e8:	1884703a 	and	r2,r3,r2
  8048ec:	1007883a 	mov	r3,r2
  8048f0:	e0bff917 	ldw	r2,-28(fp)
  8048f4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8048f8:	e0bff917 	ldw	r2,-28(fp)
  8048fc:	00c00044 	movi	r3,1
  804900:	10c00c45 	stb	r3,49(r2)
  804904:	00000206 	br	804910 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  804908:	e0bff917 	ldw	r2,-28(fp)
  80490c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  804910:	e0bff917 	ldw	r2,-28(fp)
  804914:	10800c03 	ldbu	r2,48(r2)
  804918:	10803fcc 	andi	r2,r2,255
  80491c:	1080020c 	andi	r2,r2,8
  804920:	1000151e 	bne	r2,zero,804978 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  804924:	e0bff917 	ldw	r2,-28(fp)
  804928:	10c00d83 	ldbu	r3,54(r2)
  80492c:	d0a04703 	ldbu	r2,-32484(gp)
  804930:	1884b03a 	or	r2,r3,r2
  804934:	d0a04705 	stb	r2,-32484(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804938:	e0bff917 	ldw	r2,-28(fp)
  80493c:	10800d03 	ldbu	r2,52(r2)
  804940:	10c03fcc 	andi	r3,r2,255
  804944:	e0bff917 	ldw	r2,-28(fp)
  804948:	10800d03 	ldbu	r2,52(r2)
  80494c:	11003fcc 	andi	r4,r2,255
  804950:	d0a04744 	addi	r2,gp,-32483
  804954:	2085883a 	add	r2,r4,r2
  804958:	11000003 	ldbu	r4,0(r2)
  80495c:	e0bff917 	ldw	r2,-28(fp)
  804960:	10800d43 	ldbu	r2,53(r2)
  804964:	2084b03a 	or	r2,r4,r2
  804968:	1009883a 	mov	r4,r2
  80496c:	d0a04744 	addi	r2,gp,-32483
  804970:	1885883a 	add	r2,r3,r2
  804974:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  804978:	e0bff917 	ldw	r2,-28(fp)
  80497c:	10800517 	ldw	r2,20(r2)
  804980:	e0bff915 	stw	r2,-28(fp)
  804984:	e0bffb17 	ldw	r2,-20(fp)
  804988:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80498c:	e0bffe17 	ldw	r2,-8(fp)
  804990:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  804994:	e0bff917 	ldw	r2,-28(fp)
  804998:	10800c83 	ldbu	r2,50(r2)
  80499c:	10803fcc 	andi	r2,r2,255
  8049a0:	10800518 	cmpnei	r2,r2,20
  8049a4:	103fb21e 	bne	r2,zero,804870 <__alt_mem_epcs_flash_controller_0+0xff7fb870>
  8049a8:	00000106 	br	8049b0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  8049ac:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  8049b0:	e037883a 	mov	sp,fp
  8049b4:	dfc00117 	ldw	ra,4(sp)
  8049b8:	df000017 	ldw	fp,0(sp)
  8049bc:	dec00204 	addi	sp,sp,8
  8049c0:	f800283a 	ret

008049c4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  8049c4:	deffff04 	addi	sp,sp,-4
  8049c8:	df000015 	stw	fp,0(sp)
  8049cc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  8049d0:	00804784 	movi	r2,286
}
  8049d4:	e037883a 	mov	sp,fp
  8049d8:	df000017 	ldw	fp,0(sp)
  8049dc:	dec00104 	addi	sp,sp,4
  8049e0:	f800283a 	ret

008049e4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  8049e4:	deffff04 	addi	sp,sp,-4
  8049e8:	df000015 	stw	fp,0(sp)
  8049ec:	d839883a 	mov	fp,sp
}
  8049f0:	0001883a 	nop
  8049f4:	e037883a 	mov	sp,fp
  8049f8:	df000017 	ldw	fp,0(sp)
  8049fc:	dec00104 	addi	sp,sp,4
  804a00:	f800283a 	ret

00804a04 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  804a04:	defff804 	addi	sp,sp,-32
  804a08:	dfc00715 	stw	ra,28(sp)
  804a0c:	df000615 	stw	fp,24(sp)
  804a10:	df000604 	addi	fp,sp,24
  804a14:	e13ffc15 	stw	r4,-16(fp)
  804a18:	e17ffd15 	stw	r5,-12(fp)
  804a1c:	3007883a 	mov	r3,r6
  804a20:	3805883a 	mov	r2,r7
  804a24:	e0fffe05 	stb	r3,-8(fp)
  804a28:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10800283 	ldbu	r2,10(r2)
  804a34:	10c03fcc 	andi	r3,r2,255
  804a38:	00802074 	movhi	r2,129
  804a3c:	10bdc104 	addi	r2,r2,-2300
  804a40:	10c5883a 	add	r2,r2,r3
  804a44:	10800003 	ldbu	r2,0(r2)
  804a48:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  804a4c:	e0bffa03 	ldbu	r2,-24(fp)
  804a50:	e0fffc17 	ldw	r3,-16(fp)
  804a54:	1885883a 	add	r2,r3,r2
  804a58:	108002c4 	addi	r2,r2,11
  804a5c:	10800003 	ldbu	r2,0(r2)
  804a60:	10c03fcc 	andi	r3,r2,255
  804a64:	00802074 	movhi	r2,129
  804a68:	10bdc104 	addi	r2,r2,-2300
  804a6c:	10c5883a 	add	r2,r2,r3
  804a70:	10800003 	ldbu	r2,0(r2)
  804a74:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  804a78:	e0bffa03 	ldbu	r2,-24(fp)
  804a7c:	100490fa 	slli	r2,r2,3
  804a80:	1007883a 	mov	r3,r2
  804a84:	e0bffa43 	ldbu	r2,-23(fp)
  804a88:	1885883a 	add	r2,r3,r2
  804a8c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  804a90:	e0fffa83 	ldbu	r3,-22(fp)
  804a94:	008020b4 	movhi	r2,130
  804a98:	10a21b04 	addi	r2,r2,-30612
  804a9c:	18c7883a 	add	r3,r3,r3
  804aa0:	18c7883a 	add	r3,r3,r3
  804aa4:	10c5883a 	add	r2,r2,r3
  804aa8:	10800017 	ldw	r2,0(r2)
  804aac:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  804ab0:	e0bffb17 	ldw	r2,-20(fp)
  804ab4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  804ab8:	e0bffb17 	ldw	r2,-20(fp)
  804abc:	e0fffd17 	ldw	r3,-12(fp)
  804ac0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  804ac4:	e0bffb17 	ldw	r2,-20(fp)
  804ac8:	10800c03 	ldbu	r2,48(r2)
  804acc:	1007883a 	mov	r3,r2
  804ad0:	e0bffe03 	ldbu	r2,-8(fp)
  804ad4:	0084303a 	nor	r2,zero,r2
  804ad8:	1884703a 	and	r2,r3,r2
  804adc:	1007883a 	mov	r3,r2
  804ae0:	e0bffb17 	ldw	r2,-20(fp)
  804ae4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  804ae8:	e0bffb17 	ldw	r2,-20(fp)
  804aec:	e0ffff03 	ldbu	r3,-4(fp)
  804af0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  804af4:	e0bffb17 	ldw	r2,-20(fp)
  804af8:	10800c03 	ldbu	r2,48(r2)
  804afc:	10803fcc 	andi	r2,r2,255
  804b00:	1080020c 	andi	r2,r2,8
  804b04:	1000111e 	bne	r2,zero,804b4c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  804b08:	e0bffb17 	ldw	r2,-20(fp)
  804b0c:	10c00d83 	ldbu	r3,54(r2)
  804b10:	d0a04703 	ldbu	r2,-32484(gp)
  804b14:	1884b03a 	or	r2,r3,r2
  804b18:	d0a04705 	stb	r2,-32484(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  804b1c:	e0fffa03 	ldbu	r3,-24(fp)
  804b20:	e13ffa03 	ldbu	r4,-24(fp)
  804b24:	d0a04744 	addi	r2,gp,-32483
  804b28:	2085883a 	add	r2,r4,r2
  804b2c:	11000003 	ldbu	r4,0(r2)
  804b30:	e0bffb17 	ldw	r2,-20(fp)
  804b34:	10800d43 	ldbu	r2,53(r2)
  804b38:	2084b03a 	or	r2,r4,r2
  804b3c:	1009883a 	mov	r4,r2
  804b40:	d0a04744 	addi	r2,gp,-32483
  804b44:	1885883a 	add	r2,r3,r2
  804b48:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  804b4c:	e17ffc17 	ldw	r5,-16(fp)
  804b50:	e13ffb17 	ldw	r4,-20(fp)
  804b54:	0804dfc0 	call	804dfc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  804b58:	e0bffb17 	ldw	r2,-20(fp)
  804b5c:	10800817 	ldw	r2,32(r2)
  804b60:	10000826 	beq	r2,zero,804b84 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  804b64:	e0bffb17 	ldw	r2,-20(fp)
  804b68:	10800817 	ldw	r2,32(r2)
  804b6c:	100b883a 	mov	r5,r2
  804b70:	e13ffb17 	ldw	r4,-20(fp)
  804b74:	0804eb40 	call	804eb4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  804b78:	e0bffb17 	ldw	r2,-20(fp)
  804b7c:	e0fffc17 	ldw	r3,-16(fp)
  804b80:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  804b84:	e0bffa83 	ldbu	r2,-22(fp)
}
  804b88:	e037883a 	mov	sp,fp
  804b8c:	dfc00117 	ldw	ra,4(sp)
  804b90:	df000017 	ldw	fp,0(sp)
  804b94:	dec00204 	addi	sp,sp,8
  804b98:	f800283a 	ret

00804b9c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  804b9c:	defffd04 	addi	sp,sp,-12
  804ba0:	df000215 	stw	fp,8(sp)
  804ba4:	df000204 	addi	fp,sp,8
  804ba8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  804bac:	d0a04a17 	ldw	r2,-32472(gp)
  804bb0:	e0ffff17 	ldw	r3,-4(fp)
  804bb4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  804bb8:	d0a04a17 	ldw	r2,-32472(gp)
  804bbc:	10800d03 	ldbu	r2,52(r2)
  804bc0:	10803fcc 	andi	r2,r2,255
  804bc4:	d0e04a17 	ldw	r3,-32472(gp)
  804bc8:	18c00d03 	ldbu	r3,52(r3)
  804bcc:	18c03fcc 	andi	r3,r3,255
  804bd0:	e13fff17 	ldw	r4,-4(fp)
  804bd4:	20c7883a 	add	r3,r4,r3
  804bd8:	18c002c4 	addi	r3,r3,11
  804bdc:	19000003 	ldbu	r4,0(r3)
  804be0:	d0e04a17 	ldw	r3,-32472(gp)
  804be4:	18c00d43 	ldbu	r3,53(r3)
  804be8:	20c6b03a 	or	r3,r4,r3
  804bec:	1809883a 	mov	r4,r3
  804bf0:	e0ffff17 	ldw	r3,-4(fp)
  804bf4:	1885883a 	add	r2,r3,r2
  804bf8:	108002c4 	addi	r2,r2,11
  804bfc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  804c00:	e0bfff17 	ldw	r2,-4(fp)
  804c04:	10c00283 	ldbu	r3,10(r2)
  804c08:	d0a04a17 	ldw	r2,-32472(gp)
  804c0c:	10800d83 	ldbu	r2,54(r2)
  804c10:	1884b03a 	or	r2,r3,r2
  804c14:	1007883a 	mov	r3,r2
  804c18:	e0bfff17 	ldw	r2,-4(fp)
  804c1c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  804c20:	d0a04a17 	ldw	r2,-32472(gp)
  804c24:	10800d03 	ldbu	r2,52(r2)
  804c28:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  804c2c:	e0fffe03 	ldbu	r3,-8(fp)
  804c30:	e13ffe03 	ldbu	r4,-8(fp)
  804c34:	d0a04744 	addi	r2,gp,-32483
  804c38:	2085883a 	add	r2,r4,r2
  804c3c:	10800003 	ldbu	r2,0(r2)
  804c40:	1009883a 	mov	r4,r2
  804c44:	d0a04a17 	ldw	r2,-32472(gp)
  804c48:	10800d43 	ldbu	r2,53(r2)
  804c4c:	0084303a 	nor	r2,zero,r2
  804c50:	2084703a 	and	r2,r4,r2
  804c54:	1009883a 	mov	r4,r2
  804c58:	d0a04744 	addi	r2,gp,-32483
  804c5c:	1885883a 	add	r2,r3,r2
  804c60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  804c64:	e0fffe03 	ldbu	r3,-8(fp)
  804c68:	d0a04744 	addi	r2,gp,-32483
  804c6c:	1885883a 	add	r2,r3,r2
  804c70:	10800003 	ldbu	r2,0(r2)
  804c74:	10803fcc 	andi	r2,r2,255
  804c78:	1000071e 	bne	r2,zero,804c98 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  804c7c:	d0a04a17 	ldw	r2,-32472(gp)
  804c80:	10800d83 	ldbu	r2,54(r2)
  804c84:	0084303a 	nor	r2,zero,r2
  804c88:	1007883a 	mov	r3,r2
  804c8c:	d0a04703 	ldbu	r2,-32484(gp)
  804c90:	1884703a 	and	r2,r3,r2
  804c94:	d0a04705 	stb	r2,-32484(gp)
    }
}
  804c98:	0001883a 	nop
  804c9c:	e037883a 	mov	sp,fp
  804ca0:	df000017 	ldw	fp,0(sp)
  804ca4:	dec00104 	addi	sp,sp,4
  804ca8:	f800283a 	ret

00804cac <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  804cac:	defffb04 	addi	sp,sp,-20
  804cb0:	df000415 	stw	fp,16(sp)
  804cb4:	df000404 	addi	fp,sp,16
  804cb8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  804cbc:	d0a04a17 	ldw	r2,-32472(gp)
  804cc0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  804cc4:	d0a04a17 	ldw	r2,-32472(gp)
  804cc8:	e0ffff17 	ldw	r3,-4(fp)
  804ccc:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  804cd0:	e0bfff17 	ldw	r2,-4(fp)
  804cd4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  804cd8:	e0bffc17 	ldw	r2,-16(fp)
  804cdc:	10800017 	ldw	r2,0(r2)
  804ce0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  804ce4:	00002006 	br	804d68 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  804ce8:	d0a04a17 	ldw	r2,-32472(gp)
  804cec:	10800d03 	ldbu	r2,52(r2)
  804cf0:	10803fcc 	andi	r2,r2,255
  804cf4:	d0e04a17 	ldw	r3,-32472(gp)
  804cf8:	18c00d03 	ldbu	r3,52(r3)
  804cfc:	18c03fcc 	andi	r3,r3,255
  804d00:	e13ffd17 	ldw	r4,-12(fp)
  804d04:	20c7883a 	add	r3,r4,r3
  804d08:	18c002c4 	addi	r3,r3,11
  804d0c:	19000003 	ldbu	r4,0(r3)
  804d10:	d0e04a17 	ldw	r3,-32472(gp)
  804d14:	18c00d43 	ldbu	r3,53(r3)
  804d18:	20c6b03a 	or	r3,r4,r3
  804d1c:	1809883a 	mov	r4,r3
  804d20:	e0fffd17 	ldw	r3,-12(fp)
  804d24:	1885883a 	add	r2,r3,r2
  804d28:	108002c4 	addi	r2,r2,11
  804d2c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  804d30:	e0bffd17 	ldw	r2,-12(fp)
  804d34:	10c00283 	ldbu	r3,10(r2)
  804d38:	d0a04a17 	ldw	r2,-32472(gp)
  804d3c:	10800d83 	ldbu	r2,54(r2)
  804d40:	1884b03a 	or	r2,r3,r2
  804d44:	1007883a 	mov	r3,r2
  804d48:	e0bffd17 	ldw	r2,-12(fp)
  804d4c:	10c00285 	stb	r3,10(r2)
        pevents++;
  804d50:	e0bffc17 	ldw	r2,-16(fp)
  804d54:	10800104 	addi	r2,r2,4
  804d58:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  804d5c:	e0bffc17 	ldw	r2,-16(fp)
  804d60:	10800017 	ldw	r2,0(r2)
  804d64:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  804d68:	e0bffd17 	ldw	r2,-12(fp)
  804d6c:	103fde1e 	bne	r2,zero,804ce8 <__alt_mem_epcs_flash_controller_0+0xff7fbce8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  804d70:	d0a04a17 	ldw	r2,-32472(gp)
  804d74:	10800d03 	ldbu	r2,52(r2)
  804d78:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  804d7c:	e0fffe03 	ldbu	r3,-8(fp)
  804d80:	e13ffe03 	ldbu	r4,-8(fp)
  804d84:	d0a04744 	addi	r2,gp,-32483
  804d88:	2085883a 	add	r2,r4,r2
  804d8c:	10800003 	ldbu	r2,0(r2)
  804d90:	1009883a 	mov	r4,r2
  804d94:	d0a04a17 	ldw	r2,-32472(gp)
  804d98:	10800d43 	ldbu	r2,53(r2)
  804d9c:	0084303a 	nor	r2,zero,r2
  804da0:	2084703a 	and	r2,r4,r2
  804da4:	1009883a 	mov	r4,r2
  804da8:	d0a04744 	addi	r2,gp,-32483
  804dac:	1885883a 	add	r2,r3,r2
  804db0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  804db4:	e0fffe03 	ldbu	r3,-8(fp)
  804db8:	d0a04744 	addi	r2,gp,-32483
  804dbc:	1885883a 	add	r2,r3,r2
  804dc0:	10800003 	ldbu	r2,0(r2)
  804dc4:	10803fcc 	andi	r2,r2,255
  804dc8:	1000071e 	bne	r2,zero,804de8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  804dcc:	d0a04a17 	ldw	r2,-32472(gp)
  804dd0:	10800d83 	ldbu	r2,54(r2)
  804dd4:	0084303a 	nor	r2,zero,r2
  804dd8:	1007883a 	mov	r3,r2
  804ddc:	d0a04703 	ldbu	r2,-32484(gp)
  804de0:	1884703a 	and	r2,r3,r2
  804de4:	d0a04705 	stb	r2,-32484(gp)
    }
}
  804de8:	0001883a 	nop
  804dec:	e037883a 	mov	sp,fp
  804df0:	df000017 	ldw	fp,0(sp)
  804df4:	dec00104 	addi	sp,sp,4
  804df8:	f800283a 	ret

00804dfc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  804dfc:	defffc04 	addi	sp,sp,-16
  804e00:	df000315 	stw	fp,12(sp)
  804e04:	df000304 	addi	fp,sp,12
  804e08:	e13ffe15 	stw	r4,-8(fp)
  804e0c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  804e10:	e0bffe17 	ldw	r2,-8(fp)
  804e14:	10800d03 	ldbu	r2,52(r2)
  804e18:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  804e1c:	e0bffd03 	ldbu	r2,-12(fp)
  804e20:	e0fffd03 	ldbu	r3,-12(fp)
  804e24:	e13fff17 	ldw	r4,-4(fp)
  804e28:	20c7883a 	add	r3,r4,r3
  804e2c:	18c002c4 	addi	r3,r3,11
  804e30:	18c00003 	ldbu	r3,0(r3)
  804e34:	1809883a 	mov	r4,r3
  804e38:	e0fffe17 	ldw	r3,-8(fp)
  804e3c:	18c00d43 	ldbu	r3,53(r3)
  804e40:	00c6303a 	nor	r3,zero,r3
  804e44:	20c6703a 	and	r3,r4,r3
  804e48:	1809883a 	mov	r4,r3
  804e4c:	e0ffff17 	ldw	r3,-4(fp)
  804e50:	1885883a 	add	r2,r3,r2
  804e54:	108002c4 	addi	r2,r2,11
  804e58:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  804e5c:	e0bffd03 	ldbu	r2,-12(fp)
  804e60:	e0ffff17 	ldw	r3,-4(fp)
  804e64:	1885883a 	add	r2,r3,r2
  804e68:	108002c4 	addi	r2,r2,11
  804e6c:	10800003 	ldbu	r2,0(r2)
  804e70:	10803fcc 	andi	r2,r2,255
  804e74:	10000a1e 	bne	r2,zero,804ea0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  804e78:	e0bfff17 	ldw	r2,-4(fp)
  804e7c:	10800283 	ldbu	r2,10(r2)
  804e80:	1007883a 	mov	r3,r2
  804e84:	e0bffe17 	ldw	r2,-8(fp)
  804e88:	10800d83 	ldbu	r2,54(r2)
  804e8c:	0084303a 	nor	r2,zero,r2
  804e90:	1884703a 	and	r2,r3,r2
  804e94:	1007883a 	mov	r3,r2
  804e98:	e0bfff17 	ldw	r2,-4(fp)
  804e9c:	10c00285 	stb	r3,10(r2)
    }
}
  804ea0:	0001883a 	nop
  804ea4:	e037883a 	mov	sp,fp
  804ea8:	df000017 	ldw	fp,0(sp)
  804eac:	dec00104 	addi	sp,sp,4
  804eb0:	f800283a 	ret

00804eb4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  804eb4:	defffa04 	addi	sp,sp,-24
  804eb8:	df000515 	stw	fp,20(sp)
  804ebc:	df000504 	addi	fp,sp,20
  804ec0:	e13ffe15 	stw	r4,-8(fp)
  804ec4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  804ec8:	e0bffe17 	ldw	r2,-8(fp)
  804ecc:	10800d03 	ldbu	r2,52(r2)
  804ed0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  804ed4:	e0bffe17 	ldw	r2,-8(fp)
  804ed8:	10800d83 	ldbu	r2,54(r2)
  804edc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  804ee0:	e0bffe17 	ldw	r2,-8(fp)
  804ee4:	10800d43 	ldbu	r2,53(r2)
  804ee8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  804eec:	e0bfff17 	ldw	r2,-4(fp)
  804ef0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  804ef4:	e0bffb17 	ldw	r2,-20(fp)
  804ef8:	10800017 	ldw	r2,0(r2)
  804efc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  804f00:	00002506 	br	804f98 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  804f04:	e0bffd03 	ldbu	r2,-12(fp)
  804f08:	e0fffd03 	ldbu	r3,-12(fp)
  804f0c:	e13ffc17 	ldw	r4,-16(fp)
  804f10:	20c7883a 	add	r3,r4,r3
  804f14:	18c002c4 	addi	r3,r3,11
  804f18:	18c00003 	ldbu	r3,0(r3)
  804f1c:	1809883a 	mov	r4,r3
  804f20:	e0fffd83 	ldbu	r3,-10(fp)
  804f24:	00c6303a 	nor	r3,zero,r3
  804f28:	20c6703a 	and	r3,r4,r3
  804f2c:	1809883a 	mov	r4,r3
  804f30:	e0fffc17 	ldw	r3,-16(fp)
  804f34:	1885883a 	add	r2,r3,r2
  804f38:	108002c4 	addi	r2,r2,11
  804f3c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  804f40:	e0bffd03 	ldbu	r2,-12(fp)
  804f44:	e0fffc17 	ldw	r3,-16(fp)
  804f48:	1885883a 	add	r2,r3,r2
  804f4c:	108002c4 	addi	r2,r2,11
  804f50:	10800003 	ldbu	r2,0(r2)
  804f54:	10803fcc 	andi	r2,r2,255
  804f58:	1000091e 	bne	r2,zero,804f80 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  804f5c:	e0bffc17 	ldw	r2,-16(fp)
  804f60:	10800283 	ldbu	r2,10(r2)
  804f64:	1007883a 	mov	r3,r2
  804f68:	e0bffd43 	ldbu	r2,-11(fp)
  804f6c:	0084303a 	nor	r2,zero,r2
  804f70:	1884703a 	and	r2,r3,r2
  804f74:	1007883a 	mov	r3,r2
  804f78:	e0bffc17 	ldw	r2,-16(fp)
  804f7c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  804f80:	e0bffb17 	ldw	r2,-20(fp)
  804f84:	10800104 	addi	r2,r2,4
  804f88:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  804f8c:	e0bffb17 	ldw	r2,-20(fp)
  804f90:	10800017 	ldw	r2,0(r2)
  804f94:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  804f98:	e0bffc17 	ldw	r2,-16(fp)
  804f9c:	103fd91e 	bne	r2,zero,804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  804fa0:	0001883a 	nop
  804fa4:	e037883a 	mov	sp,fp
  804fa8:	df000017 	ldw	fp,0(sp)
  804fac:	dec00104 	addi	sp,sp,4
  804fb0:	f800283a 	ret

00804fb4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  804fb4:	defffc04 	addi	sp,sp,-16
  804fb8:	df000315 	stw	fp,12(sp)
  804fbc:	df000304 	addi	fp,sp,12
  804fc0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  804fc4:	e0bfff17 	ldw	r2,-4(fp)
  804fc8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  804fcc:	e0bfff17 	ldw	r2,-4(fp)
  804fd0:	108002c4 	addi	r2,r2,11
  804fd4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  804fd8:	e03ffe05 	stb	zero,-8(fp)
  804fdc:	00000706 	br	804ffc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  804fe0:	e0bffd17 	ldw	r2,-12(fp)
  804fe4:	10c00044 	addi	r3,r2,1
  804fe8:	e0fffd15 	stw	r3,-12(fp)
  804fec:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  804ff0:	e0bffe03 	ldbu	r2,-8(fp)
  804ff4:	10800044 	addi	r2,r2,1
  804ff8:	e0bffe05 	stb	r2,-8(fp)
  804ffc:	e0bffe03 	ldbu	r2,-8(fp)
  805000:	108000f0 	cmpltui	r2,r2,3
  805004:	103ff61e 	bne	r2,zero,804fe0 <__alt_mem_epcs_flash_controller_0+0xff7fbfe0>
        *ptbl++ = 0;
    }
}
  805008:	0001883a 	nop
  80500c:	e037883a 	mov	sp,fp
  805010:	df000017 	ldw	fp,0(sp)
  805014:	dec00104 	addi	sp,sp,4
  805018:	f800283a 	ret

0080501c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80501c:	defffb04 	addi	sp,sp,-20
  805020:	dfc00415 	stw	ra,16(sp)
  805024:	df000315 	stw	fp,12(sp)
  805028:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80502c:	0142d004 	movi	r5,2880
  805030:	01002074 	movhi	r4,129
  805034:	211e0704 	addi	r4,r4,30748
  805038:	08053940 	call	805394 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80503c:	00802074 	movhi	r2,129
  805040:	109e0704 	addi	r2,r2,30748
  805044:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  805048:	00802074 	movhi	r2,129
  80504c:	109e1304 	addi	r2,r2,30796
  805050:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  805054:	e03ffd0d 	sth	zero,-12(fp)
  805058:	00001306 	br	8050a8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80505c:	e0bffe17 	ldw	r2,-8(fp)
  805060:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  805064:	e0bffe17 	ldw	r2,-8(fp)
  805068:	e0ffff17 	ldw	r3,-4(fp)
  80506c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  805070:	e0bffe17 	ldw	r2,-8(fp)
  805074:	00c00fc4 	movi	r3,63
  805078:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80507c:	e0bffe17 	ldw	r2,-8(fp)
  805080:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  805084:	e0bffe17 	ldw	r2,-8(fp)
  805088:	10800c04 	addi	r2,r2,48
  80508c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  805090:	e0bfff17 	ldw	r2,-4(fp)
  805094:	10800c04 	addi	r2,r2,48
  805098:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80509c:	e0bffd0b 	ldhu	r2,-12(fp)
  8050a0:	10800044 	addi	r2,r2,1
  8050a4:	e0bffd0d 	sth	r2,-12(fp)
  8050a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8050ac:	10800ef0 	cmpltui	r2,r2,59
  8050b0:	103fea1e 	bne	r2,zero,80505c <__alt_mem_epcs_flash_controller_0+0xff7fc05c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  8050b4:	e0bffe17 	ldw	r2,-8(fp)
  8050b8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  8050bc:	e0bffe17 	ldw	r2,-8(fp)
  8050c0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  8050c4:	e0bffe17 	ldw	r2,-8(fp)
  8050c8:	00c00fc4 	movi	r3,63
  8050cc:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  8050d0:	e0bffe17 	ldw	r2,-8(fp)
  8050d4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  8050d8:	00802074 	movhi	r2,129
  8050dc:	109e0704 	addi	r2,r2,30748
  8050e0:	d0a04815 	stw	r2,-32480(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  8050e4:	0001883a 	nop
  8050e8:	e037883a 	mov	sp,fp
  8050ec:	dfc00117 	ldw	ra,4(sp)
  8050f0:	df000017 	ldw	fp,0(sp)
  8050f4:	dec00204 	addi	sp,sp,8
  8050f8:	f800283a 	ret

008050fc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  8050fc:	deffff04 	addi	sp,sp,-4
  805100:	df000015 	stw	fp,0(sp)
  805104:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  805108:	d0204b15 	stw	zero,-32468(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80510c:	d0204905 	stb	zero,-32476(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  805110:	d0203b05 	stb	zero,-32532(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  805114:	d0204345 	stb	zero,-32499(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  805118:	d0203b45 	stb	zero,-32531(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80511c:	d0204015 	stw	zero,-32512(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  805120:	d0203c15 	stw	zero,-32528(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  805124:	d0204e15 	stw	zero,-32456(gp)
    OSIdleCtrMax  = 0L;
  805128:	d0204115 	stw	zero,-32508(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80512c:	d0204d05 	stb	zero,-32460(gp)
#endif
}
  805130:	0001883a 	nop
  805134:	e037883a 	mov	sp,fp
  805138:	df000017 	ldw	fp,0(sp)
  80513c:	dec00104 	addi	sp,sp,4
  805140:	f800283a 	ret

00805144 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  805144:	defffd04 	addi	sp,sp,-12
  805148:	df000215 	stw	fp,8(sp)
  80514c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  805150:	d0204705 	stb	zero,-32484(gp)
    prdytbl       = &OSRdyTbl[0];
  805154:	d0a04744 	addi	r2,gp,-32483
  805158:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80515c:	e03ffe05 	stb	zero,-8(fp)
  805160:	00000706 	br	805180 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  805164:	e0bfff17 	ldw	r2,-4(fp)
  805168:	10c00044 	addi	r3,r2,1
  80516c:	e0ffff15 	stw	r3,-4(fp)
  805170:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  805174:	e0bffe03 	ldbu	r2,-8(fp)
  805178:	10800044 	addi	r2,r2,1
  80517c:	e0bffe05 	stb	r2,-8(fp)
  805180:	e0bffe03 	ldbu	r2,-8(fp)
  805184:	108000f0 	cmpltui	r2,r2,3
  805188:	103ff61e 	bne	r2,zero,805164 <__alt_mem_epcs_flash_controller_0+0xff7fc164>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80518c:	d0203d45 	stb	zero,-32523(gp)
    OSPrioHighRdy = 0;
  805190:	d0203d05 	stb	zero,-32524(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  805194:	d0204515 	stw	zero,-32492(gp)
    OSTCBCur      = (OS_TCB *)0;
  805198:	d0204a15 	stw	zero,-32472(gp)
}
  80519c:	0001883a 	nop
  8051a0:	e037883a 	mov	sp,fp
  8051a4:	df000017 	ldw	fp,0(sp)
  8051a8:	dec00104 	addi	sp,sp,4
  8051ac:	f800283a 	ret

008051b0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  8051b0:	defff804 	addi	sp,sp,-32
  8051b4:	dfc00715 	stw	ra,28(sp)
  8051b8:	df000615 	stw	fp,24(sp)
  8051bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  8051c0:	008000c4 	movi	r2,3
  8051c4:	d8800415 	stw	r2,16(sp)
  8051c8:	d8000315 	stw	zero,12(sp)
  8051cc:	00808004 	movi	r2,512
  8051d0:	d8800215 	stw	r2,8(sp)
  8051d4:	00802074 	movhi	r2,129
  8051d8:	109c0704 	addi	r2,r2,28700
  8051dc:	d8800115 	stw	r2,4(sp)
  8051e0:	00bfffd4 	movui	r2,65535
  8051e4:	d8800015 	stw	r2,0(sp)
  8051e8:	01c00504 	movi	r7,20
  8051ec:	01802074 	movhi	r6,129
  8051f0:	319e0604 	addi	r6,r6,30744
  8051f4:	000b883a 	mov	r5,zero
  8051f8:	01002034 	movhi	r4,128
  8051fc:	21159704 	addi	r4,r4,22108
  805200:	0809d280 	call	809d28 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  805204:	e1bfff04 	addi	r6,fp,-4
  805208:	01402074 	movhi	r5,129
  80520c:	297e0104 	addi	r5,r5,-2044
  805210:	01000504 	movi	r4,20
  805214:	080a5380 	call	80a538 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  805218:	0001883a 	nop
  80521c:	e037883a 	mov	sp,fp
  805220:	dfc00117 	ldw	ra,4(sp)
  805224:	df000017 	ldw	fp,0(sp)
  805228:	dec00204 	addi	sp,sp,8
  80522c:	f800283a 	ret

00805230 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  805230:	defff804 	addi	sp,sp,-32
  805234:	dfc00715 	stw	ra,28(sp)
  805238:	df000615 	stw	fp,24(sp)
  80523c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  805240:	008000c4 	movi	r2,3
  805244:	d8800415 	stw	r2,16(sp)
  805248:	d8000315 	stw	zero,12(sp)
  80524c:	00808004 	movi	r2,512
  805250:	d8800215 	stw	r2,8(sp)
  805254:	00802074 	movhi	r2,129
  805258:	10998f04 	addi	r2,r2,26172
  80525c:	d8800115 	stw	r2,4(sp)
  805260:	00bfff94 	movui	r2,65534
  805264:	d8800015 	stw	r2,0(sp)
  805268:	01c004c4 	movi	r7,19
  80526c:	01802074 	movhi	r6,129
  805270:	319b8e04 	addi	r6,r6,28216
  805274:	000b883a 	mov	r5,zero
  805278:	01002034 	movhi	r4,128
  80527c:	2115ae04 	addi	r4,r4,22200
  805280:	0809d280 	call	809d28 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  805284:	e1bfff04 	addi	r6,fp,-4
  805288:	01402074 	movhi	r5,129
  80528c:	297e0504 	addi	r5,r5,-2028
  805290:	010004c4 	movi	r4,19
  805294:	080a5380 	call	80a538 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  805298:	0001883a 	nop
  80529c:	e037883a 	mov	sp,fp
  8052a0:	dfc00117 	ldw	ra,4(sp)
  8052a4:	df000017 	ldw	fp,0(sp)
  8052a8:	dec00204 	addi	sp,sp,8
  8052ac:	f800283a 	ret

008052b0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  8052b0:	defffb04 	addi	sp,sp,-20
  8052b4:	dfc00415 	stw	ra,16(sp)
  8052b8:	df000315 	stw	fp,12(sp)
  8052bc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  8052c0:	01414404 	movi	r5,1296
  8052c4:	010020b4 	movhi	r4,130
  8052c8:	2120d704 	addi	r4,r4,-31908
  8052cc:	08053940 	call	805394 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  8052d0:	01401504 	movi	r5,84
  8052d4:	010020b4 	movhi	r4,130
  8052d8:	21221b04 	addi	r4,r4,-30612
  8052dc:	08053940 	call	805394 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  8052e0:	008020b4 	movhi	r2,130
  8052e4:	10a0d704 	addi	r2,r2,-31908
  8052e8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  8052ec:	008020b4 	movhi	r2,130
  8052f0:	10a0f204 	addi	r2,r2,-31800
  8052f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8052f8:	e03ffd05 	stb	zero,-12(fp)
  8052fc:	00001106 	br	805344 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  805300:	e0bffe17 	ldw	r2,-8(fp)
  805304:	e0ffff17 	ldw	r3,-4(fp)
  805308:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80530c:	e0bffe17 	ldw	r2,-8(fp)
  805310:	00c00fc4 	movi	r3,63
  805314:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  805318:	e0bffe17 	ldw	r2,-8(fp)
  80531c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  805320:	e0bffe17 	ldw	r2,-8(fp)
  805324:	10801b04 	addi	r2,r2,108
  805328:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80532c:	e0bfff17 	ldw	r2,-4(fp)
  805330:	10801b04 	addi	r2,r2,108
  805334:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  805338:	e0bffd03 	ldbu	r2,-12(fp)
  80533c:	10800044 	addi	r2,r2,1
  805340:	e0bffd05 	stb	r2,-12(fp)
  805344:	e0bffd03 	ldbu	r2,-12(fp)
  805348:	108002f0 	cmpltui	r2,r2,11
  80534c:	103fec1e 	bne	r2,zero,805300 <__alt_mem_epcs_flash_controller_0+0xff7fc300>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  805350:	e0bffe17 	ldw	r2,-8(fp)
  805354:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  805358:	e0bffe17 	ldw	r2,-8(fp)
  80535c:	00c00fc4 	movi	r3,63
  805360:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  805364:	e0bffe17 	ldw	r2,-8(fp)
  805368:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80536c:	d0203e15 	stw	zero,-32520(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  805370:	008020b4 	movhi	r2,130
  805374:	10a0d704 	addi	r2,r2,-31908
  805378:	d0a04215 	stw	r2,-32504(gp)
}
  80537c:	0001883a 	nop
  805380:	e037883a 	mov	sp,fp
  805384:	dfc00117 	ldw	ra,4(sp)
  805388:	df000017 	ldw	fp,0(sp)
  80538c:	dec00204 	addi	sp,sp,8
  805390:	f800283a 	ret

00805394 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  805394:	defffd04 	addi	sp,sp,-12
  805398:	df000215 	stw	fp,8(sp)
  80539c:	df000204 	addi	fp,sp,8
  8053a0:	e13ffe15 	stw	r4,-8(fp)
  8053a4:	2805883a 	mov	r2,r5
  8053a8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  8053ac:	00000706 	br	8053cc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  8053b0:	e0bffe17 	ldw	r2,-8(fp)
  8053b4:	10c00044 	addi	r3,r2,1
  8053b8:	e0fffe15 	stw	r3,-8(fp)
  8053bc:	10000005 	stb	zero,0(r2)
        size--;
  8053c0:	e0bfff0b 	ldhu	r2,-4(fp)
  8053c4:	10bfffc4 	addi	r2,r2,-1
  8053c8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  8053cc:	e0bfff0b 	ldhu	r2,-4(fp)
  8053d0:	103ff71e 	bne	r2,zero,8053b0 <__alt_mem_epcs_flash_controller_0+0xff7fc3b0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  8053d4:	0001883a 	nop
  8053d8:	e037883a 	mov	sp,fp
  8053dc:	df000017 	ldw	fp,0(sp)
  8053e0:	dec00104 	addi	sp,sp,4
  8053e4:	f800283a 	ret

008053e8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  8053e8:	defffc04 	addi	sp,sp,-16
  8053ec:	df000315 	stw	fp,12(sp)
  8053f0:	df000304 	addi	fp,sp,12
  8053f4:	e13ffd15 	stw	r4,-12(fp)
  8053f8:	e17ffe15 	stw	r5,-8(fp)
  8053fc:	3005883a 	mov	r2,r6
  805400:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  805404:	00000b06 	br	805434 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  805408:	e0bffd17 	ldw	r2,-12(fp)
  80540c:	10c00044 	addi	r3,r2,1
  805410:	e0fffd15 	stw	r3,-12(fp)
  805414:	e0fffe17 	ldw	r3,-8(fp)
  805418:	19000044 	addi	r4,r3,1
  80541c:	e13ffe15 	stw	r4,-8(fp)
  805420:	18c00003 	ldbu	r3,0(r3)
  805424:	10c00005 	stb	r3,0(r2)
        size--;
  805428:	e0bfff0b 	ldhu	r2,-4(fp)
  80542c:	10bfffc4 	addi	r2,r2,-1
  805430:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  805434:	e0bfff0b 	ldhu	r2,-4(fp)
  805438:	103ff31e 	bne	r2,zero,805408 <__alt_mem_epcs_flash_controller_0+0xff7fc408>
        *pdest++ = *psrc++;
        size--;
    }
}
  80543c:	0001883a 	nop
  805440:	e037883a 	mov	sp,fp
  805444:	df000017 	ldw	fp,0(sp)
  805448:	dec00104 	addi	sp,sp,4
  80544c:	f800283a 	ret

00805450 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  805450:	defffb04 	addi	sp,sp,-20
  805454:	dfc00415 	stw	ra,16(sp)
  805458:	df000315 	stw	fp,12(sp)
  80545c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  805460:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805464:	0005303a 	rdctl	r2,status
  805468:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80546c:	e0ffff17 	ldw	r3,-4(fp)
  805470:	00bfff84 	movi	r2,-2
  805474:	1884703a 	and	r2,r3,r2
  805478:	1001703a 	wrctl	status,r2
  
  return context;
  80547c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  805480:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  805484:	d0a04903 	ldbu	r2,-32476(gp)
  805488:	10803fcc 	andi	r2,r2,255
  80548c:	10001a1e 	bne	r2,zero,8054f8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  805490:	d0a03b03 	ldbu	r2,-32532(gp)
  805494:	10803fcc 	andi	r2,r2,255
  805498:	1000171e 	bne	r2,zero,8054f8 <OS_Sched+0xa8>
            OS_SchedNew();
  80549c:	08055200 	call	805520 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8054a0:	d0e03d03 	ldbu	r3,-32524(gp)
  8054a4:	d0a03d43 	ldbu	r2,-32523(gp)
  8054a8:	18c03fcc 	andi	r3,r3,255
  8054ac:	10803fcc 	andi	r2,r2,255
  8054b0:	18801126 	beq	r3,r2,8054f8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8054b4:	d0a03d03 	ldbu	r2,-32524(gp)
  8054b8:	10c03fcc 	andi	r3,r2,255
  8054bc:	008020b4 	movhi	r2,130
  8054c0:	10a21b04 	addi	r2,r2,-30612
  8054c4:	18c7883a 	add	r3,r3,r3
  8054c8:	18c7883a 	add	r3,r3,r3
  8054cc:	10c5883a 	add	r2,r2,r3
  8054d0:	10800017 	ldw	r2,0(r2)
  8054d4:	d0a04515 	stw	r2,-32492(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  8054d8:	d0a04517 	ldw	r2,-32492(gp)
  8054dc:	10c00e17 	ldw	r3,56(r2)
  8054e0:	18c00044 	addi	r3,r3,1
  8054e4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  8054e8:	d0a04017 	ldw	r2,-32512(gp)
  8054ec:	10800044 	addi	r2,r2,1
  8054f0:	d0a04015 	stw	r2,-32512(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  8054f4:	080eaa40 	call	80eaa4 <OSCtxSw>
  8054f8:	e0bffd17 	ldw	r2,-12(fp)
  8054fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805500:	e0bffe17 	ldw	r2,-8(fp)
  805504:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  805508:	0001883a 	nop
  80550c:	e037883a 	mov	sp,fp
  805510:	dfc00117 	ldw	ra,4(sp)
  805514:	df000017 	ldw	fp,0(sp)
  805518:	dec00204 	addi	sp,sp,8
  80551c:	f800283a 	ret

00805520 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  805520:	defffe04 	addi	sp,sp,-8
  805524:	df000115 	stw	fp,4(sp)
  805528:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80552c:	d0a04703 	ldbu	r2,-32484(gp)
  805530:	10c03fcc 	andi	r3,r2,255
  805534:	00802074 	movhi	r2,129
  805538:	10bdc104 	addi	r2,r2,-2300
  80553c:	10c5883a 	add	r2,r2,r3
  805540:	10800003 	ldbu	r2,0(r2)
  805544:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  805548:	e0bfff03 	ldbu	r2,-4(fp)
  80554c:	100490fa 	slli	r2,r2,3
  805550:	1009883a 	mov	r4,r2
  805554:	e0ffff03 	ldbu	r3,-4(fp)
  805558:	d0a04744 	addi	r2,gp,-32483
  80555c:	1885883a 	add	r2,r3,r2
  805560:	10800003 	ldbu	r2,0(r2)
  805564:	10c03fcc 	andi	r3,r2,255
  805568:	00802074 	movhi	r2,129
  80556c:	10bdc104 	addi	r2,r2,-2300
  805570:	10c5883a 	add	r2,r2,r3
  805574:	10800003 	ldbu	r2,0(r2)
  805578:	2085883a 	add	r2,r4,r2
  80557c:	d0a03d05 	stb	r2,-32524(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  805580:	0001883a 	nop
  805584:	e037883a 	mov	sp,fp
  805588:	df000017 	ldw	fp,0(sp)
  80558c:	dec00104 	addi	sp,sp,4
  805590:	f800283a 	ret

00805594 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  805594:	defffc04 	addi	sp,sp,-16
  805598:	df000315 	stw	fp,12(sp)
  80559c:	df000304 	addi	fp,sp,12
  8055a0:	e13ffe15 	stw	r4,-8(fp)
  8055a4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  8055a8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  8055ac:	00000b06 	br	8055dc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  8055b0:	e0bffe17 	ldw	r2,-8(fp)
  8055b4:	10c00044 	addi	r3,r2,1
  8055b8:	e0fffe15 	stw	r3,-8(fp)
  8055bc:	e0ffff17 	ldw	r3,-4(fp)
  8055c0:	19000044 	addi	r4,r3,1
  8055c4:	e13fff15 	stw	r4,-4(fp)
  8055c8:	18c00003 	ldbu	r3,0(r3)
  8055cc:	10c00005 	stb	r3,0(r2)
        len++;
  8055d0:	e0bffd03 	ldbu	r2,-12(fp)
  8055d4:	10800044 	addi	r2,r2,1
  8055d8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8055dc:	e0bfff17 	ldw	r2,-4(fp)
  8055e0:	10800003 	ldbu	r2,0(r2)
  8055e4:	10803fcc 	andi	r2,r2,255
  8055e8:	103ff11e 	bne	r2,zero,8055b0 <__alt_mem_epcs_flash_controller_0+0xff7fc5b0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  8055ec:	e0bffe17 	ldw	r2,-8(fp)
  8055f0:	10000005 	stb	zero,0(r2)
    return (len);
  8055f4:	e0bffd03 	ldbu	r2,-12(fp)
}
  8055f8:	e037883a 	mov	sp,fp
  8055fc:	df000017 	ldw	fp,0(sp)
  805600:	dec00104 	addi	sp,sp,4
  805604:	f800283a 	ret

00805608 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  805608:	defffd04 	addi	sp,sp,-12
  80560c:	df000215 	stw	fp,8(sp)
  805610:	df000204 	addi	fp,sp,8
  805614:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  805618:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80561c:	00000606 	br	805638 <OS_StrLen+0x30>
        psrc++;
  805620:	e0bfff17 	ldw	r2,-4(fp)
  805624:	10800044 	addi	r2,r2,1
  805628:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80562c:	e0bffe03 	ldbu	r2,-8(fp)
  805630:	10800044 	addi	r2,r2,1
  805634:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  805638:	e0bfff17 	ldw	r2,-4(fp)
  80563c:	10800003 	ldbu	r2,0(r2)
  805640:	10803fcc 	andi	r2,r2,255
  805644:	103ff61e 	bne	r2,zero,805620 <__alt_mem_epcs_flash_controller_0+0xff7fc620>
        psrc++;
        len++;
    }
    return (len);
  805648:	e0bffe03 	ldbu	r2,-8(fp)
}
  80564c:	e037883a 	mov	sp,fp
  805650:	df000017 	ldw	fp,0(sp)
  805654:	dec00104 	addi	sp,sp,4
  805658:	f800283a 	ret

0080565c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80565c:	defffa04 	addi	sp,sp,-24
  805660:	dfc00515 	stw	ra,20(sp)
  805664:	df000415 	stw	fp,16(sp)
  805668:	df000404 	addi	fp,sp,16
  80566c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  805670:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805674:	0005303a 	rdctl	r2,status
  805678:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80567c:	e0fffd17 	ldw	r3,-12(fp)
  805680:	00bfff84 	movi	r2,-2
  805684:	1884703a 	and	r2,r3,r2
  805688:	1001703a 	wrctl	status,r2
  
  return context;
  80568c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  805690:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  805694:	d0a03c17 	ldw	r2,-32528(gp)
  805698:	10800044 	addi	r2,r2,1
  80569c:	d0a03c15 	stw	r2,-32528(gp)
  8056a0:	e0bffc17 	ldw	r2,-16(fp)
  8056a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8056a8:	e0bffe17 	ldw	r2,-8(fp)
  8056ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  8056b0:	080edb80 	call	80edb8 <OSTaskIdleHook>
    }
  8056b4:	003fef06 	br	805674 <__alt_mem_epcs_flash_controller_0+0xff7fc674>

008056b8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  8056b8:	defffa04 	addi	sp,sp,-24
  8056bc:	dfc00515 	stw	ra,20(sp)
  8056c0:	df000415 	stw	fp,16(sp)
  8056c4:	df000404 	addi	fp,sp,16
  8056c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8056cc:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8056d0:	00000206 	br	8056dc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  8056d4:	01003204 	movi	r4,200
  8056d8:	080adf80 	call	80adf8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8056dc:	d0a04d03 	ldbu	r2,-32460(gp)
  8056e0:	10803fcc 	andi	r2,r2,255
  8056e4:	103ffb26 	beq	r2,zero,8056d4 <__alt_mem_epcs_flash_controller_0+0xff7fc6d4>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  8056e8:	d0a04117 	ldw	r2,-32508(gp)
  8056ec:	01401904 	movi	r5,100
  8056f0:	1009883a 	mov	r4,r2
  8056f4:	0802e7c0 	call	802e7c <__udivsi3>
  8056f8:	d0a04115 	stw	r2,-32508(gp)
    if (OSIdleCtrMax == 0L) {
  8056fc:	d0a04117 	ldw	r2,-32508(gp)
  805700:	1000031e 	bne	r2,zero,805710 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  805704:	d0204305 	stb	zero,-32500(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  805708:	01003fc4 	movi	r4,255
  80570c:	080aa800 	call	80aa80 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805710:	0005303a 	rdctl	r2,status
  805714:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805718:	e0fffd17 	ldw	r3,-12(fp)
  80571c:	00bfff84 	movi	r2,-2
  805720:	1884703a 	and	r2,r3,r2
  805724:	1001703a 	wrctl	status,r2
  
  return context;
  805728:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80572c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  805730:	d0a03c17 	ldw	r2,-32528(gp)
  805734:	d0a04e15 	stw	r2,-32456(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  805738:	d0203c15 	stw	zero,-32528(gp)
  80573c:	e0bffc17 	ldw	r2,-16(fp)
  805740:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805744:	e0bffe17 	ldw	r2,-8(fp)
  805748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80574c:	d0a04e17 	ldw	r2,-32456(gp)
  805750:	d0e04117 	ldw	r3,-32508(gp)
  805754:	180b883a 	mov	r5,r3
  805758:	1009883a 	mov	r4,r2
  80575c:	0802e7c0 	call	802e7c <__udivsi3>
  805760:	1007883a 	mov	r3,r2
  805764:	00801904 	movi	r2,100
  805768:	10c5c83a 	sub	r2,r2,r3
  80576c:	d0a04305 	stb	r2,-32500(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  805770:	080ed380 	call	80ed38 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  805774:	08057840 	call	805784 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  805778:	01001904 	movi	r4,100
  80577c:	080adf80 	call	80adf8 <OSTimeDly>
    }
  805780:	003fe306 	br	805710 <__alt_mem_epcs_flash_controller_0+0xff7fc710>

00805784 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  805784:	defffa04 	addi	sp,sp,-24
  805788:	dfc00515 	stw	ra,20(sp)
  80578c:	df000415 	stw	fp,16(sp)
  805790:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  805794:	e03ffc05 	stb	zero,-16(fp)
  805798:	00002406 	br	80582c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80579c:	e0bffc03 	ldbu	r2,-16(fp)
  8057a0:	e0fffe04 	addi	r3,fp,-8
  8057a4:	180b883a 	mov	r5,r3
  8057a8:	1009883a 	mov	r4,r2
  8057ac:	080a8c00 	call	80a8c0 <OSTaskStkChk>
  8057b0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  8057b4:	e0bffc43 	ldbu	r2,-15(fp)
  8057b8:	1000191e 	bne	r2,zero,805820 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  8057bc:	e0fffc03 	ldbu	r3,-16(fp)
  8057c0:	008020b4 	movhi	r2,130
  8057c4:	10a21b04 	addi	r2,r2,-30612
  8057c8:	18c7883a 	add	r3,r3,r3
  8057cc:	18c7883a 	add	r3,r3,r3
  8057d0:	10c5883a 	add	r2,r2,r3
  8057d4:	10800017 	ldw	r2,0(r2)
  8057d8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  8057dc:	e0bffd17 	ldw	r2,-12(fp)
  8057e0:	10000f26 	beq	r2,zero,805820 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  8057e4:	e0bffd17 	ldw	r2,-12(fp)
  8057e8:	10800060 	cmpeqi	r2,r2,1
  8057ec:	10000c1e 	bne	r2,zero,805820 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  8057f0:	e0bffd17 	ldw	r2,-12(fp)
  8057f4:	10c00217 	ldw	r3,8(r2)
  8057f8:	e0bffd17 	ldw	r2,-12(fp)
  8057fc:	10800317 	ldw	r2,12(r2)
  805800:	1085883a 	add	r2,r2,r2
  805804:	1085883a 	add	r2,r2,r2
  805808:	1887883a 	add	r3,r3,r2
  80580c:	e0bffd17 	ldw	r2,-12(fp)
  805810:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  805814:	e0ffff17 	ldw	r3,-4(fp)
  805818:	e0bffd17 	ldw	r2,-12(fp)
  80581c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  805820:	e0bffc03 	ldbu	r2,-16(fp)
  805824:	10800044 	addi	r2,r2,1
  805828:	e0bffc05 	stb	r2,-16(fp)
  80582c:	e0bffc03 	ldbu	r2,-16(fp)
  805830:	10800570 	cmpltui	r2,r2,21
  805834:	103fd91e 	bne	r2,zero,80579c <__alt_mem_epcs_flash_controller_0+0xff7fc79c>
#endif
                }
            }
        }
    }
}
  805838:	0001883a 	nop
  80583c:	e037883a 	mov	sp,fp
  805840:	dfc00117 	ldw	ra,4(sp)
  805844:	df000017 	ldw	fp,0(sp)
  805848:	dec00204 	addi	sp,sp,8
  80584c:	f800283a 	ret

00805850 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  805850:	defff204 	addi	sp,sp,-56
  805854:	dfc00d15 	stw	ra,52(sp)
  805858:	df000c15 	stw	fp,48(sp)
  80585c:	df000c04 	addi	fp,sp,48
  805860:	e17ffc15 	stw	r5,-16(fp)
  805864:	e1bffd15 	stw	r6,-12(fp)
  805868:	3807883a 	mov	r3,r7
  80586c:	e0800417 	ldw	r2,16(fp)
  805870:	e13ffb05 	stb	r4,-20(fp)
  805874:	e0fffe0d 	sth	r3,-8(fp)
  805878:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80587c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805880:	0005303a 	rdctl	r2,status
  805884:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805888:	e0fffa17 	ldw	r3,-24(fp)
  80588c:	00bfff84 	movi	r2,-2
  805890:	1884703a 	and	r2,r3,r2
  805894:	1001703a 	wrctl	status,r2
  
  return context;
  805898:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  80589c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  8058a0:	d0a04217 	ldw	r2,-32504(gp)
  8058a4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  8058a8:	e0bff617 	ldw	r2,-40(fp)
  8058ac:	10009326 	beq	r2,zero,805afc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  8058b0:	e0bff617 	ldw	r2,-40(fp)
  8058b4:	10800517 	ldw	r2,20(r2)
  8058b8:	d0a04215 	stw	r2,-32504(gp)
  8058bc:	e0bff417 	ldw	r2,-48(fp)
  8058c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8058c4:	e0bff817 	ldw	r2,-32(fp)
  8058c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  8058cc:	e0bff617 	ldw	r2,-40(fp)
  8058d0:	e0fffc17 	ldw	r3,-16(fp)
  8058d4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  8058d8:	e0bff617 	ldw	r2,-40(fp)
  8058dc:	e0fffb03 	ldbu	r3,-20(fp)
  8058e0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  8058e4:	e0bff617 	ldw	r2,-40(fp)
  8058e8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  8058ec:	e0bff617 	ldw	r2,-40(fp)
  8058f0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8058f4:	e0bff617 	ldw	r2,-40(fp)
  8058f8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8058fc:	e0bff617 	ldw	r2,-40(fp)
  805900:	e0c00317 	ldw	r3,12(fp)
  805904:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  805908:	e0bff617 	ldw	r2,-40(fp)
  80590c:	e0c00217 	ldw	r3,8(fp)
  805910:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  805914:	e0bff617 	ldw	r2,-40(fp)
  805918:	e0fffd17 	ldw	r3,-12(fp)
  80591c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  805920:	e0bff617 	ldw	r2,-40(fp)
  805924:	e0ffff0b 	ldhu	r3,-4(fp)
  805928:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80592c:	e0bff617 	ldw	r2,-40(fp)
  805930:	e0fffe0b 	ldhu	r3,-8(fp)
  805934:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  805938:	e0bff617 	ldw	r2,-40(fp)
  80593c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  805940:	e0bffb03 	ldbu	r2,-20(fp)
  805944:	1004d0fa 	srli	r2,r2,3
  805948:	1007883a 	mov	r3,r2
  80594c:	e0bff617 	ldw	r2,-40(fp)
  805950:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  805954:	e0bffb03 	ldbu	r2,-20(fp)
  805958:	108001cc 	andi	r2,r2,7
  80595c:	1007883a 	mov	r3,r2
  805960:	e0bff617 	ldw	r2,-40(fp)
  805964:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  805968:	e0bff617 	ldw	r2,-40(fp)
  80596c:	10800d03 	ldbu	r2,52(r2)
  805970:	10803fcc 	andi	r2,r2,255
  805974:	00c00044 	movi	r3,1
  805978:	1884983a 	sll	r2,r3,r2
  80597c:	1007883a 	mov	r3,r2
  805980:	e0bff617 	ldw	r2,-40(fp)
  805984:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  805988:	e0bff617 	ldw	r2,-40(fp)
  80598c:	10800cc3 	ldbu	r2,51(r2)
  805990:	10803fcc 	andi	r2,r2,255
  805994:	00c00044 	movi	r3,1
  805998:	1884983a 	sll	r2,r3,r2
  80599c:	1007883a 	mov	r3,r2
  8059a0:	e0bff617 	ldw	r2,-40(fp)
  8059a4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  8059a8:	e0bff617 	ldw	r2,-40(fp)
  8059ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  8059b0:	e0bff617 	ldw	r2,-40(fp)
  8059b4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  8059b8:	e0bff617 	ldw	r2,-40(fp)
  8059bc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  8059c0:	e0bff617 	ldw	r2,-40(fp)
  8059c4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  8059c8:	e0bff617 	ldw	r2,-40(fp)
  8059cc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  8059d0:	e0bff617 	ldw	r2,-40(fp)
  8059d4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  8059d8:	e0bff617 	ldw	r2,-40(fp)
  8059dc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  8059e0:	e0bff617 	ldw	r2,-40(fp)
  8059e4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  8059e8:	e0bff617 	ldw	r2,-40(fp)
  8059ec:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  8059f0:	e0bff617 	ldw	r2,-40(fp)
  8059f4:	00c00fc4 	movi	r3,63
  8059f8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8059fc:	e0bff617 	ldw	r2,-40(fp)
  805a00:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  805a04:	e13ff617 	ldw	r4,-40(fp)
  805a08:	080edd80 	call	80edd8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  805a0c:	e13ff617 	ldw	r4,-40(fp)
  805a10:	080ecd00 	call	80ecd0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a14:	0005303a 	rdctl	r2,status
  805a18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805a1c:	e0fff517 	ldw	r3,-44(fp)
  805a20:	00bfff84 	movi	r2,-2
  805a24:	1884703a 	and	r2,r3,r2
  805a28:	1001703a 	wrctl	status,r2
  
  return context;
  805a2c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  805a30:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  805a34:	e0fffb03 	ldbu	r3,-20(fp)
  805a38:	008020b4 	movhi	r2,130
  805a3c:	10a21b04 	addi	r2,r2,-30612
  805a40:	18c7883a 	add	r3,r3,r3
  805a44:	18c7883a 	add	r3,r3,r3
  805a48:	10c5883a 	add	r2,r2,r3
  805a4c:	e0fff617 	ldw	r3,-40(fp)
  805a50:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  805a54:	d0e03e17 	ldw	r3,-32520(gp)
  805a58:	e0bff617 	ldw	r2,-40(fp)
  805a5c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  805a60:	e0bff617 	ldw	r2,-40(fp)
  805a64:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  805a68:	d0a03e17 	ldw	r2,-32520(gp)
  805a6c:	10000326 	beq	r2,zero,805a7c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  805a70:	d0a03e17 	ldw	r2,-32520(gp)
  805a74:	e0fff617 	ldw	r3,-40(fp)
  805a78:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  805a7c:	e0bff617 	ldw	r2,-40(fp)
  805a80:	d0a03e15 	stw	r2,-32520(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  805a84:	e0bff617 	ldw	r2,-40(fp)
  805a88:	10c00d83 	ldbu	r3,54(r2)
  805a8c:	d0a04703 	ldbu	r2,-32484(gp)
  805a90:	1884b03a 	or	r2,r3,r2
  805a94:	d0a04705 	stb	r2,-32484(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  805a98:	e0bff617 	ldw	r2,-40(fp)
  805a9c:	10800d03 	ldbu	r2,52(r2)
  805aa0:	10c03fcc 	andi	r3,r2,255
  805aa4:	e0bff617 	ldw	r2,-40(fp)
  805aa8:	10800d03 	ldbu	r2,52(r2)
  805aac:	11003fcc 	andi	r4,r2,255
  805ab0:	d0a04744 	addi	r2,gp,-32483
  805ab4:	2085883a 	add	r2,r4,r2
  805ab8:	11000003 	ldbu	r4,0(r2)
  805abc:	e0bff617 	ldw	r2,-40(fp)
  805ac0:	10800d43 	ldbu	r2,53(r2)
  805ac4:	2084b03a 	or	r2,r4,r2
  805ac8:	1009883a 	mov	r4,r2
  805acc:	d0a04744 	addi	r2,gp,-32483
  805ad0:	1885883a 	add	r2,r3,r2
  805ad4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  805ad8:	d0a04343 	ldbu	r2,-32499(gp)
  805adc:	10800044 	addi	r2,r2,1
  805ae0:	d0a04345 	stb	r2,-32499(gp)
  805ae4:	e0bff417 	ldw	r2,-48(fp)
  805ae8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805aec:	e0bff717 	ldw	r2,-36(fp)
  805af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  805af4:	0005883a 	mov	r2,zero
  805af8:	00000506 	br	805b10 <OS_TCBInit+0x2c0>
  805afc:	e0bff417 	ldw	r2,-48(fp)
  805b00:	e0bff915 	stw	r2,-28(fp)
  805b04:	e0bff917 	ldw	r2,-28(fp)
  805b08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  805b0c:	00801084 	movi	r2,66
}
  805b10:	e037883a 	mov	sp,fp
  805b14:	dfc00117 	ldw	ra,4(sp)
  805b18:	df000017 	ldw	fp,0(sp)
  805b1c:	dec00204 	addi	sp,sp,8
  805b20:	f800283a 	ret

00805b24 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  805b24:	defffe04 	addi	sp,sp,-8
  805b28:	df000115 	stw	fp,4(sp)
  805b2c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  805b30:	d0a00d04 	addi	r2,gp,-32716
  805b34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  805b38:	d0a00e04 	addi	r2,gp,-32712
  805b3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  805b40:	d0a00f84 	addi	r2,gp,-32706
  805b44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  805b48:	d0a01004 	addi	r2,gp,-32704
  805b4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  805b50:	d0a00f04 	addi	r2,gp,-32708
  805b54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  805b58:	d0a01084 	addi	r2,gp,-32702
  805b5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  805b60:	d0a01104 	addi	r2,gp,-32700
  805b64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  805b68:	d0a01184 	addi	r2,gp,-32698
  805b6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  805b70:	d0a01204 	addi	r2,gp,-32696
  805b74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  805b78:	d0a01284 	addi	r2,gp,-32694
  805b7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  805b80:	d0a01304 	addi	r2,gp,-32692
  805b84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  805b88:	d0a01384 	addi	r2,gp,-32690
  805b8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  805b90:	d0a01404 	addi	r2,gp,-32688
  805b94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  805b98:	d0a01484 	addi	r2,gp,-32686
  805b9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  805ba0:	d0a01504 	addi	r2,gp,-32684
  805ba4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  805ba8:	d0a01584 	addi	r2,gp,-32682
  805bac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  805bb0:	d0a01604 	addi	r2,gp,-32680
  805bb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  805bb8:	d0a01684 	addi	r2,gp,-32678
  805bbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  805bc0:	d0a01704 	addi	r2,gp,-32676
  805bc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  805bc8:	d0a01784 	addi	r2,gp,-32674
  805bcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  805bd0:	d0a01804 	addi	r2,gp,-32672
  805bd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  805bd8:	d0a01884 	addi	r2,gp,-32670
  805bdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  805be0:	d0a01904 	addi	r2,gp,-32668
  805be4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  805be8:	d0a01984 	addi	r2,gp,-32666
  805bec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  805bf0:	d0a01a04 	addi	r2,gp,-32664
  805bf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  805bf8:	d0a01a84 	addi	r2,gp,-32662
  805bfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  805c00:	d0a01b04 	addi	r2,gp,-32660
  805c04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  805c08:	d0a01b84 	addi	r2,gp,-32658
  805c0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  805c10:	d0a01c04 	addi	r2,gp,-32656
  805c14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  805c18:	d0a01c84 	addi	r2,gp,-32654
  805c1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  805c20:	d0a01d04 	addi	r2,gp,-32652
  805c24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  805c28:	d0a01d84 	addi	r2,gp,-32650
  805c2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  805c30:	d0a01e04 	addi	r2,gp,-32648
  805c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  805c38:	d0a01e84 	addi	r2,gp,-32646
  805c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  805c40:	d0a01f04 	addi	r2,gp,-32644
  805c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  805c48:	d0a01f84 	addi	r2,gp,-32642
  805c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  805c50:	d0a02004 	addi	r2,gp,-32640
  805c54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  805c58:	d0a02084 	addi	r2,gp,-32638
  805c5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  805c60:	d0a02104 	addi	r2,gp,-32636
  805c64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  805c68:	d0a02184 	addi	r2,gp,-32634
  805c6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  805c70:	d0a02204 	addi	r2,gp,-32632
  805c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  805c78:	d0a02284 	addi	r2,gp,-32630
  805c7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  805c80:	d0a02304 	addi	r2,gp,-32628
  805c84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  805c88:	d0a02384 	addi	r2,gp,-32626
  805c8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  805c90:	d0a02404 	addi	r2,gp,-32624
  805c94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  805c98:	d0a02904 	addi	r2,gp,-32604
  805c9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  805ca0:	0001883a 	nop
  805ca4:	e037883a 	mov	sp,fp
  805ca8:	df000017 	ldw	fp,0(sp)
  805cac:	dec00104 	addi	sp,sp,4
  805cb0:	f800283a 	ret

00805cb4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  805cb4:	defff204 	addi	sp,sp,-56
  805cb8:	df000d15 	stw	fp,52(sp)
  805cbc:	df000d04 	addi	fp,sp,52
  805cc0:	e13ffc15 	stw	r4,-16(fp)
  805cc4:	2807883a 	mov	r3,r5
  805cc8:	3005883a 	mov	r2,r6
  805ccc:	e1ffff15 	stw	r7,-4(fp)
  805cd0:	e0fffd0d 	sth	r3,-12(fp)
  805cd4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  805cd8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  805cdc:	e0bfff17 	ldw	r2,-4(fp)
  805ce0:	1000021e 	bne	r2,zero,805cec <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  805ce4:	0005883a 	mov	r2,zero
  805ce8:	0000b006 	br	805fac <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  805cec:	e0bffc17 	ldw	r2,-16(fp)
  805cf0:	1000051e 	bne	r2,zero,805d08 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  805cf4:	e0bfff17 	ldw	r2,-4(fp)
  805cf8:	00c01b84 	movi	r3,110
  805cfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  805d00:	0005883a 	mov	r2,zero
  805d04:	0000a906 	br	805fac <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  805d08:	e0bffc17 	ldw	r2,-16(fp)
  805d0c:	10800003 	ldbu	r2,0(r2)
  805d10:	10803fcc 	andi	r2,r2,255
  805d14:	10800160 	cmpeqi	r2,r2,5
  805d18:	1000051e 	bne	r2,zero,805d30 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  805d1c:	e0bfff17 	ldw	r2,-4(fp)
  805d20:	00c00044 	movi	r3,1
  805d24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  805d28:	0005883a 	mov	r2,zero
  805d2c:	00009f06 	br	805fac <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  805d30:	e0fffe03 	ldbu	r3,-8(fp)
  805d34:	00bfe004 	movi	r2,-128
  805d38:	1884703a 	and	r2,r3,r2
  805d3c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  805d40:	e0bff503 	ldbu	r2,-44(fp)
  805d44:	10000626 	beq	r2,zero,805d60 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  805d48:	e0bffe03 	ldbu	r2,-8(fp)
  805d4c:	10801fcc 	andi	r2,r2,127
  805d50:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  805d54:	00800044 	movi	r2,1
  805d58:	e0bff385 	stb	r2,-50(fp)
  805d5c:	00000106 	br	805d64 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  805d60:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  805d64:	e0bfff17 	ldw	r2,-4(fp)
  805d68:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d6c:	0005303a 	rdctl	r2,status
  805d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d74:	e0fffb17 	ldw	r3,-20(fp)
  805d78:	00bfff84 	movi	r2,-2
  805d7c:	1884703a 	and	r2,r3,r2
  805d80:	1001703a 	wrctl	status,r2
  
  return context;
  805d84:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  805d88:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  805d8c:	e0bffe03 	ldbu	r2,-8(fp)
  805d90:	10c00060 	cmpeqi	r3,r2,1
  805d94:	18005f1e 	bne	r3,zero,805f14 <OSFlagAccept+0x260>
  805d98:	10c00088 	cmpgei	r3,r2,2
  805d9c:	1800021e 	bne	r3,zero,805da8 <OSFlagAccept+0xf4>
  805da0:	10003f26 	beq	r2,zero,805ea0 <OSFlagAccept+0x1ec>
  805da4:	00007706 	br	805f84 <OSFlagAccept+0x2d0>
  805da8:	10c000a0 	cmpeqi	r3,r2,2
  805dac:	1800031e 	bne	r3,zero,805dbc <OSFlagAccept+0x108>
  805db0:	108000e0 	cmpeqi	r2,r2,3
  805db4:	10001e1e 	bne	r2,zero,805e30 <OSFlagAccept+0x17c>
  805db8:	00007206 	br	805f84 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  805dbc:	e0bffc17 	ldw	r2,-16(fp)
  805dc0:	10c0020b 	ldhu	r3,8(r2)
  805dc4:	e0bffd0b 	ldhu	r2,-12(fp)
  805dc8:	1884703a 	and	r2,r3,r2
  805dcc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  805dd0:	e0fff30b 	ldhu	r3,-52(fp)
  805dd4:	e0bffd0b 	ldhu	r2,-12(fp)
  805dd8:	18800d1e 	bne	r3,r2,805e10 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805ddc:	e0bff383 	ldbu	r2,-50(fp)
  805de0:	10800058 	cmpnei	r2,r2,1
  805de4:	10000d1e 	bne	r2,zero,805e1c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  805de8:	e0bffc17 	ldw	r2,-16(fp)
  805dec:	1080020b 	ldhu	r2,8(r2)
  805df0:	1007883a 	mov	r3,r2
  805df4:	e0bff30b 	ldhu	r2,-52(fp)
  805df8:	0084303a 	nor	r2,zero,r2
  805dfc:	1884703a 	and	r2,r3,r2
  805e00:	1007883a 	mov	r3,r2
  805e04:	e0bffc17 	ldw	r2,-16(fp)
  805e08:	10c0020d 	sth	r3,8(r2)
  805e0c:	00000306 	br	805e1c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805e10:	e0bfff17 	ldw	r2,-4(fp)
  805e14:	00c01c04 	movi	r3,112
  805e18:	10c00005 	stb	r3,0(r2)
  805e1c:	e0bff417 	ldw	r2,-48(fp)
  805e20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e24:	e0bff617 	ldw	r2,-40(fp)
  805e28:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  805e2c:	00005e06 	br	805fa8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  805e30:	e0bffc17 	ldw	r2,-16(fp)
  805e34:	10c0020b 	ldhu	r3,8(r2)
  805e38:	e0bffd0b 	ldhu	r2,-12(fp)
  805e3c:	1884703a 	and	r2,r3,r2
  805e40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  805e44:	e0bff30b 	ldhu	r2,-52(fp)
  805e48:	10000d26 	beq	r2,zero,805e80 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805e4c:	e0bff383 	ldbu	r2,-50(fp)
  805e50:	10800058 	cmpnei	r2,r2,1
  805e54:	10000d1e 	bne	r2,zero,805e8c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  805e58:	e0bffc17 	ldw	r2,-16(fp)
  805e5c:	1080020b 	ldhu	r2,8(r2)
  805e60:	1007883a 	mov	r3,r2
  805e64:	e0bff30b 	ldhu	r2,-52(fp)
  805e68:	0084303a 	nor	r2,zero,r2
  805e6c:	1884703a 	and	r2,r3,r2
  805e70:	1007883a 	mov	r3,r2
  805e74:	e0bffc17 	ldw	r2,-16(fp)
  805e78:	10c0020d 	sth	r3,8(r2)
  805e7c:	00000306 	br	805e8c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805e80:	e0bfff17 	ldw	r2,-4(fp)
  805e84:	00c01c04 	movi	r3,112
  805e88:	10c00005 	stb	r3,0(r2)
  805e8c:	e0bff417 	ldw	r2,-48(fp)
  805e90:	e0bff715 	stw	r2,-36(fp)
  805e94:	e0bff717 	ldw	r2,-36(fp)
  805e98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  805e9c:	00004206 	br	805fa8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  805ea0:	e0bffc17 	ldw	r2,-16(fp)
  805ea4:	1080020b 	ldhu	r2,8(r2)
  805ea8:	0084303a 	nor	r2,zero,r2
  805eac:	1007883a 	mov	r3,r2
  805eb0:	e0bffd0b 	ldhu	r2,-12(fp)
  805eb4:	1884703a 	and	r2,r3,r2
  805eb8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  805ebc:	e0fff30b 	ldhu	r3,-52(fp)
  805ec0:	e0bffd0b 	ldhu	r2,-12(fp)
  805ec4:	18800b1e 	bne	r3,r2,805ef4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805ec8:	e0bff383 	ldbu	r2,-50(fp)
  805ecc:	10800058 	cmpnei	r2,r2,1
  805ed0:	10000b1e 	bne	r2,zero,805f00 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  805ed4:	e0bffc17 	ldw	r2,-16(fp)
  805ed8:	10c0020b 	ldhu	r3,8(r2)
  805edc:	e0bff30b 	ldhu	r2,-52(fp)
  805ee0:	1884b03a 	or	r2,r3,r2
  805ee4:	1007883a 	mov	r3,r2
  805ee8:	e0bffc17 	ldw	r2,-16(fp)
  805eec:	10c0020d 	sth	r3,8(r2)
  805ef0:	00000306 	br	805f00 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805ef4:	e0bfff17 	ldw	r2,-4(fp)
  805ef8:	00c01c04 	movi	r3,112
  805efc:	10c00005 	stb	r3,0(r2)
  805f00:	e0bff417 	ldw	r2,-48(fp)
  805f04:	e0bff815 	stw	r2,-32(fp)
  805f08:	e0bff817 	ldw	r2,-32(fp)
  805f0c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  805f10:	00002506 	br	805fa8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  805f14:	e0bffc17 	ldw	r2,-16(fp)
  805f18:	1080020b 	ldhu	r2,8(r2)
  805f1c:	0084303a 	nor	r2,zero,r2
  805f20:	1007883a 	mov	r3,r2
  805f24:	e0bffd0b 	ldhu	r2,-12(fp)
  805f28:	1884703a 	and	r2,r3,r2
  805f2c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  805f30:	e0bff30b 	ldhu	r2,-52(fp)
  805f34:	10000b26 	beq	r2,zero,805f64 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805f38:	e0bff383 	ldbu	r2,-50(fp)
  805f3c:	10800058 	cmpnei	r2,r2,1
  805f40:	10000b1e 	bne	r2,zero,805f70 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  805f44:	e0bffc17 	ldw	r2,-16(fp)
  805f48:	10c0020b 	ldhu	r3,8(r2)
  805f4c:	e0bff30b 	ldhu	r2,-52(fp)
  805f50:	1884b03a 	or	r2,r3,r2
  805f54:	1007883a 	mov	r3,r2
  805f58:	e0bffc17 	ldw	r2,-16(fp)
  805f5c:	10c0020d 	sth	r3,8(r2)
  805f60:	00000306 	br	805f70 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805f64:	e0bfff17 	ldw	r2,-4(fp)
  805f68:	00c01c04 	movi	r3,112
  805f6c:	10c00005 	stb	r3,0(r2)
  805f70:	e0bff417 	ldw	r2,-48(fp)
  805f74:	e0bff915 	stw	r2,-28(fp)
  805f78:	e0bff917 	ldw	r2,-28(fp)
  805f7c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  805f80:	00000906 	br	805fa8 <OSFlagAccept+0x2f4>
  805f84:	e0bff417 	ldw	r2,-48(fp)
  805f88:	e0bffa15 	stw	r2,-24(fp)
  805f8c:	e0bffa17 	ldw	r2,-24(fp)
  805f90:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  805f94:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  805f98:	e0bfff17 	ldw	r2,-4(fp)
  805f9c:	00c01bc4 	movi	r3,111
  805fa0:	10c00005 	stb	r3,0(r2)
             break;
  805fa4:	0001883a 	nop
    }
    return (flags_rdy);
  805fa8:	e0bff30b 	ldhu	r2,-52(fp)
}
  805fac:	e037883a 	mov	sp,fp
  805fb0:	df000017 	ldw	fp,0(sp)
  805fb4:	dec00104 	addi	sp,sp,4
  805fb8:	f800283a 	ret

00805fbc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  805fbc:	defff804 	addi	sp,sp,-32
  805fc0:	df000715 	stw	fp,28(sp)
  805fc4:	df000704 	addi	fp,sp,28
  805fc8:	2005883a 	mov	r2,r4
  805fcc:	e17fff15 	stw	r5,-4(fp)
  805fd0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  805fd4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  805fd8:	e0bfff17 	ldw	r2,-4(fp)
  805fdc:	1000021e 	bne	r2,zero,805fe8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  805fe0:	0005883a 	mov	r2,zero
  805fe4:	00003306 	br	8060b4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  805fe8:	d0a04903 	ldbu	r2,-32476(gp)
  805fec:	10803fcc 	andi	r2,r2,255
  805ff0:	10000526 	beq	r2,zero,806008 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  805ff4:	e0bfff17 	ldw	r2,-4(fp)
  805ff8:	00c00404 	movi	r3,16
  805ffc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  806000:	0005883a 	mov	r2,zero
  806004:	00002b06 	br	8060b4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806008:	0005303a 	rdctl	r2,status
  80600c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806010:	e0fffd17 	ldw	r3,-12(fp)
  806014:	00bfff84 	movi	r2,-2
  806018:	1884703a 	and	r2,r3,r2
  80601c:	1001703a 	wrctl	status,r2
  
  return context;
  806020:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  806024:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  806028:	d0a04c17 	ldw	r2,-32464(gp)
  80602c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  806030:	e0bffb17 	ldw	r2,-20(fp)
  806034:	10001726 	beq	r2,zero,806094 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  806038:	d0a04c17 	ldw	r2,-32464(gp)
  80603c:	10800117 	ldw	r2,4(r2)
  806040:	d0a04c15 	stw	r2,-32464(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  806044:	e0bffb17 	ldw	r2,-20(fp)
  806048:	00c00144 	movi	r3,5
  80604c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  806050:	e0bffb17 	ldw	r2,-20(fp)
  806054:	e0fffe0b 	ldhu	r3,-8(fp)
  806058:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80605c:	e0bffb17 	ldw	r2,-20(fp)
  806060:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  806064:	e0bffb17 	ldw	r2,-20(fp)
  806068:	00c00fc4 	movi	r3,63
  80606c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806070:	e0bffb17 	ldw	r2,-20(fp)
  806074:	100002c5 	stb	zero,11(r2)
  806078:	e0bff917 	ldw	r2,-28(fp)
  80607c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806080:	e0bffa17 	ldw	r2,-24(fp)
  806084:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  806088:	e0bfff17 	ldw	r2,-4(fp)
  80608c:	10000005 	stb	zero,0(r2)
  806090:	00000706 	br	8060b0 <OSFlagCreate+0xf4>
  806094:	e0bff917 	ldw	r2,-28(fp)
  806098:	e0bffc15 	stw	r2,-16(fp)
  80609c:	e0bffc17 	ldw	r2,-16(fp)
  8060a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  8060a4:	e0bfff17 	ldw	r2,-4(fp)
  8060a8:	00c01c84 	movi	r3,114
  8060ac:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  8060b0:	e0bffb17 	ldw	r2,-20(fp)
}
  8060b4:	e037883a 	mov	sp,fp
  8060b8:	df000017 	ldw	fp,0(sp)
  8060bc:	dec00104 	addi	sp,sp,4
  8060c0:	f800283a 	ret

008060c4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8060c4:	defff204 	addi	sp,sp,-56
  8060c8:	dfc00d15 	stw	ra,52(sp)
  8060cc:	df000c15 	stw	fp,48(sp)
  8060d0:	df000c04 	addi	fp,sp,48
  8060d4:	e13ffd15 	stw	r4,-12(fp)
  8060d8:	2805883a 	mov	r2,r5
  8060dc:	e1bfff15 	stw	r6,-4(fp)
  8060e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8060e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8060e8:	e0bfff17 	ldw	r2,-4(fp)
  8060ec:	1000021e 	bne	r2,zero,8060f8 <OSFlagDel+0x34>
        return (pgrp);
  8060f0:	e0bffd17 	ldw	r2,-12(fp)
  8060f4:	00008006 	br	8062f8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8060f8:	e0bffd17 	ldw	r2,-12(fp)
  8060fc:	1000051e 	bne	r2,zero,806114 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806100:	e0bfff17 	ldw	r2,-4(fp)
  806104:	00c01b84 	movi	r3,110
  806108:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  80610c:	e0bffd17 	ldw	r2,-12(fp)
  806110:	00007906 	br	8062f8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  806114:	d0a04903 	ldbu	r2,-32476(gp)
  806118:	10803fcc 	andi	r2,r2,255
  80611c:	10000526 	beq	r2,zero,806134 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  806120:	e0bfff17 	ldw	r2,-4(fp)
  806124:	00c003c4 	movi	r3,15
  806128:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  80612c:	e0bffd17 	ldw	r2,-12(fp)
  806130:	00007106 	br	8062f8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  806134:	e0bffd17 	ldw	r2,-12(fp)
  806138:	10800003 	ldbu	r2,0(r2)
  80613c:	10803fcc 	andi	r2,r2,255
  806140:	10800160 	cmpeqi	r2,r2,5
  806144:	1000051e 	bne	r2,zero,80615c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  806148:	e0bfff17 	ldw	r2,-4(fp)
  80614c:	00c00044 	movi	r3,1
  806150:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  806154:	e0bffd17 	ldw	r2,-12(fp)
  806158:	00006706 	br	8062f8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80615c:	0005303a 	rdctl	r2,status
  806160:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806164:	e0fffc17 	ldw	r3,-16(fp)
  806168:	00bfff84 	movi	r2,-2
  80616c:	1884703a 	and	r2,r3,r2
  806170:	1001703a 	wrctl	status,r2
  
  return context;
  806174:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806178:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80617c:	e0bffd17 	ldw	r2,-12(fp)
  806180:	10800117 	ldw	r2,4(r2)
  806184:	10000326 	beq	r2,zero,806194 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  806188:	00800044 	movi	r2,1
  80618c:	e0bff405 	stb	r2,-48(fp)
  806190:	00000106 	br	806198 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  806194:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  806198:	e0bffe03 	ldbu	r2,-8(fp)
  80619c:	10000326 	beq	r2,zero,8061ac <OSFlagDel+0xe8>
  8061a0:	10800060 	cmpeqi	r2,r2,1
  8061a4:	1000231e 	bne	r2,zero,806234 <OSFlagDel+0x170>
  8061a8:	00004806 	br	8062cc <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  8061ac:	e0bff403 	ldbu	r2,-48(fp)
  8061b0:	1000161e 	bne	r2,zero,80620c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  8061b4:	e0bffd17 	ldw	r2,-12(fp)
  8061b8:	00c00fc4 	movi	r3,63
  8061bc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8061c0:	e0bffd17 	ldw	r2,-12(fp)
  8061c4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8061c8:	e0bffd17 	ldw	r2,-12(fp)
  8061cc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  8061d0:	d0e04c17 	ldw	r3,-32464(gp)
  8061d4:	e0bffd17 	ldw	r2,-12(fp)
  8061d8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8061dc:	e0bffd17 	ldw	r2,-12(fp)
  8061e0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  8061e4:	e0bffd17 	ldw	r2,-12(fp)
  8061e8:	d0a04c15 	stw	r2,-32464(gp)
  8061ec:	e0bff717 	ldw	r2,-36(fp)
  8061f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8061f4:	e0bff817 	ldw	r2,-32(fp)
  8061f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  8061fc:	e0bfff17 	ldw	r2,-4(fp)
  806200:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  806204:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  806208:	00003a06 	br	8062f4 <OSFlagDel+0x230>
  80620c:	e0bff717 	ldw	r2,-36(fp)
  806210:	e0bff915 	stw	r2,-28(fp)
  806214:	e0bff917 	ldw	r2,-28(fp)
  806218:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80621c:	e0bfff17 	ldw	r2,-4(fp)
  806220:	00c01244 	movi	r3,73
  806224:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  806228:	e0bffd17 	ldw	r2,-12(fp)
  80622c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  806230:	00003006 	br	8062f4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  806234:	e0bffd17 	ldw	r2,-12(fp)
  806238:	10800117 	ldw	r2,4(r2)
  80623c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  806240:	00000606 	br	80625c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  806244:	000b883a 	mov	r5,zero
  806248:	e13ff517 	ldw	r4,-44(fp)
  80624c:	08072300 	call	807230 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  806250:	e0bff517 	ldw	r2,-44(fp)
  806254:	10800017 	ldw	r2,0(r2)
  806258:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80625c:	e0bff517 	ldw	r2,-44(fp)
  806260:	103ff81e 	bne	r2,zero,806244 <__alt_mem_epcs_flash_controller_0+0xff7fd244>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  806264:	e0bffd17 	ldw	r2,-12(fp)
  806268:	00c00fc4 	movi	r3,63
  80626c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806270:	e0bffd17 	ldw	r2,-12(fp)
  806274:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  806278:	e0bffd17 	ldw	r2,-12(fp)
  80627c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  806280:	d0e04c17 	ldw	r3,-32464(gp)
  806284:	e0bffd17 	ldw	r2,-12(fp)
  806288:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80628c:	e0bffd17 	ldw	r2,-12(fp)
  806290:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  806294:	e0bffd17 	ldw	r2,-12(fp)
  806298:	d0a04c15 	stw	r2,-32464(gp)
  80629c:	e0bff717 	ldw	r2,-36(fp)
  8062a0:	e0bffa15 	stw	r2,-24(fp)
  8062a4:	e0bffa17 	ldw	r2,-24(fp)
  8062a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8062ac:	e0bff403 	ldbu	r2,-48(fp)
  8062b0:	10800058 	cmpnei	r2,r2,1
  8062b4:	1000011e 	bne	r2,zero,8062bc <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8062b8:	08054500 	call	805450 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  8062bc:	e0bfff17 	ldw	r2,-4(fp)
  8062c0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  8062c4:	e03ff615 	stw	zero,-40(fp)
             break;
  8062c8:	00000a06 	br	8062f4 <OSFlagDel+0x230>
  8062cc:	e0bff717 	ldw	r2,-36(fp)
  8062d0:	e0bffb15 	stw	r2,-20(fp)
  8062d4:	e0bffb17 	ldw	r2,-20(fp)
  8062d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  8062dc:	e0bfff17 	ldw	r2,-4(fp)
  8062e0:	00c001c4 	movi	r3,7
  8062e4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  8062e8:	e0bffd17 	ldw	r2,-12(fp)
  8062ec:	e0bff615 	stw	r2,-40(fp)
             break;
  8062f0:	0001883a 	nop
    }
    return (pgrp_return);
  8062f4:	e0bff617 	ldw	r2,-40(fp)
}
  8062f8:	e037883a 	mov	sp,fp
  8062fc:	dfc00117 	ldw	ra,4(sp)
  806300:	df000017 	ldw	fp,0(sp)
  806304:	dec00204 	addi	sp,sp,8
  806308:	f800283a 	ret

0080630c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80630c:	defff604 	addi	sp,sp,-40
  806310:	dfc00915 	stw	ra,36(sp)
  806314:	df000815 	stw	fp,32(sp)
  806318:	df000804 	addi	fp,sp,32
  80631c:	e13ffd15 	stw	r4,-12(fp)
  806320:	e17ffe15 	stw	r5,-8(fp)
  806324:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806328:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80632c:	e0bfff17 	ldw	r2,-4(fp)
  806330:	1000021e 	bne	r2,zero,80633c <OSFlagNameGet+0x30>
        return (0);
  806334:	0005883a 	mov	r2,zero
  806338:	00003906 	br	806420 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80633c:	e0bffd17 	ldw	r2,-12(fp)
  806340:	1000051e 	bne	r2,zero,806358 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806344:	e0bfff17 	ldw	r2,-4(fp)
  806348:	00c01b84 	movi	r3,110
  80634c:	10c00005 	stb	r3,0(r2)
        return (0);
  806350:	0005883a 	mov	r2,zero
  806354:	00003206 	br	806420 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  806358:	e0bffe17 	ldw	r2,-8(fp)
  80635c:	1000051e 	bne	r2,zero,806374 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  806360:	e0bfff17 	ldw	r2,-4(fp)
  806364:	00c00304 	movi	r3,12
  806368:	10c00005 	stb	r3,0(r2)
        return (0);
  80636c:	0005883a 	mov	r2,zero
  806370:	00002b06 	br	806420 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  806374:	d0a04903 	ldbu	r2,-32476(gp)
  806378:	10803fcc 	andi	r2,r2,255
  80637c:	10000526 	beq	r2,zero,806394 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  806380:	e0bfff17 	ldw	r2,-4(fp)
  806384:	00c00444 	movi	r3,17
  806388:	10c00005 	stb	r3,0(r2)
        return (0);
  80638c:	0005883a 	mov	r2,zero
  806390:	00002306 	br	806420 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806394:	0005303a 	rdctl	r2,status
  806398:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80639c:	e0fffc17 	ldw	r3,-16(fp)
  8063a0:	00bfff84 	movi	r2,-2
  8063a4:	1884703a 	and	r2,r3,r2
  8063a8:	1001703a 	wrctl	status,r2
  
  return context;
  8063ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8063b0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  8063b4:	e0bffd17 	ldw	r2,-12(fp)
  8063b8:	10800003 	ldbu	r2,0(r2)
  8063bc:	10803fcc 	andi	r2,r2,255
  8063c0:	10800160 	cmpeqi	r2,r2,5
  8063c4:	1000091e 	bne	r2,zero,8063ec <OSFlagNameGet+0xe0>
  8063c8:	e0bff817 	ldw	r2,-32(fp)
  8063cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8063d0:	e0bff917 	ldw	r2,-28(fp)
  8063d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  8063d8:	e0bfff17 	ldw	r2,-4(fp)
  8063dc:	00c00044 	movi	r3,1
  8063e0:	10c00005 	stb	r3,0(r2)
        return (0);
  8063e4:	0005883a 	mov	r2,zero
  8063e8:	00000d06 	br	806420 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  8063ec:	e0bffd17 	ldw	r2,-12(fp)
  8063f0:	10800284 	addi	r2,r2,10
  8063f4:	100b883a 	mov	r5,r2
  8063f8:	e13ffe17 	ldw	r4,-8(fp)
  8063fc:	08055940 	call	805594 <OS_StrCopy>
  806400:	e0bffb05 	stb	r2,-20(fp)
  806404:	e0bff817 	ldw	r2,-32(fp)
  806408:	e0bffa15 	stw	r2,-24(fp)
  80640c:	e0bffa17 	ldw	r2,-24(fp)
  806410:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806414:	e0bfff17 	ldw	r2,-4(fp)
  806418:	10000005 	stb	zero,0(r2)
    return (len);
  80641c:	e0bffb03 	ldbu	r2,-20(fp)
}
  806420:	e037883a 	mov	sp,fp
  806424:	dfc00117 	ldw	ra,4(sp)
  806428:	df000017 	ldw	fp,0(sp)
  80642c:	dec00204 	addi	sp,sp,8
  806430:	f800283a 	ret

00806434 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  806434:	defff504 	addi	sp,sp,-44
  806438:	dfc00a15 	stw	ra,40(sp)
  80643c:	df000915 	stw	fp,36(sp)
  806440:	df000904 	addi	fp,sp,36
  806444:	e13ffd15 	stw	r4,-12(fp)
  806448:	e17ffe15 	stw	r5,-8(fp)
  80644c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806450:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  806454:	e0bfff17 	ldw	r2,-4(fp)
  806458:	10004326 	beq	r2,zero,806568 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80645c:	e0bffd17 	ldw	r2,-12(fp)
  806460:	1000041e 	bne	r2,zero,806474 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806464:	e0bfff17 	ldw	r2,-4(fp)
  806468:	00c01b84 	movi	r3,110
  80646c:	10c00005 	stb	r3,0(r2)
        return;
  806470:	00003e06 	br	80656c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  806474:	e0bffe17 	ldw	r2,-8(fp)
  806478:	1000041e 	bne	r2,zero,80648c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  80647c:	e0bfff17 	ldw	r2,-4(fp)
  806480:	00c00304 	movi	r3,12
  806484:	10c00005 	stb	r3,0(r2)
        return;
  806488:	00003806 	br	80656c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80648c:	d0a04903 	ldbu	r2,-32476(gp)
  806490:	10803fcc 	andi	r2,r2,255
  806494:	10000426 	beq	r2,zero,8064a8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  806498:	e0bfff17 	ldw	r2,-4(fp)
  80649c:	00c00484 	movi	r3,18
  8064a0:	10c00005 	stb	r3,0(r2)
        return;
  8064a4:	00003106 	br	80656c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8064a8:	0005303a 	rdctl	r2,status
  8064ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8064b0:	e0fffc17 	ldw	r3,-16(fp)
  8064b4:	00bfff84 	movi	r2,-2
  8064b8:	1884703a 	and	r2,r3,r2
  8064bc:	1001703a 	wrctl	status,r2
  
  return context;
  8064c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8064c4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  8064c8:	e0bffd17 	ldw	r2,-12(fp)
  8064cc:	10800003 	ldbu	r2,0(r2)
  8064d0:	10803fcc 	andi	r2,r2,255
  8064d4:	10800160 	cmpeqi	r2,r2,5
  8064d8:	1000081e 	bne	r2,zero,8064fc <OSFlagNameSet+0xc8>
  8064dc:	e0bff717 	ldw	r2,-36(fp)
  8064e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8064e4:	e0bff817 	ldw	r2,-32(fp)
  8064e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  8064ec:	e0bfff17 	ldw	r2,-4(fp)
  8064f0:	00c00044 	movi	r3,1
  8064f4:	10c00005 	stb	r3,0(r2)
        return;
  8064f8:	00001c06 	br	80656c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8064fc:	e13ffe17 	ldw	r4,-8(fp)
  806500:	08056080 	call	805608 <OS_StrLen>
  806504:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  806508:	e0bffa03 	ldbu	r2,-24(fp)
  80650c:	10800830 	cmpltui	r2,r2,32
  806510:	1000081e 	bne	r2,zero,806534 <OSFlagNameSet+0x100>
  806514:	e0bff717 	ldw	r2,-36(fp)
  806518:	e0bff915 	stw	r2,-28(fp)
  80651c:	e0bff917 	ldw	r2,-28(fp)
  806520:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  806524:	e0bfff17 	ldw	r2,-4(fp)
  806528:	00c01cc4 	movi	r3,115
  80652c:	10c00005 	stb	r3,0(r2)
        return;
  806530:	00000e06 	br	80656c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  806534:	e0bffd17 	ldw	r2,-12(fp)
  806538:	10800284 	addi	r2,r2,10
  80653c:	e17ffe17 	ldw	r5,-8(fp)
  806540:	1009883a 	mov	r4,r2
  806544:	08055940 	call	805594 <OS_StrCopy>
  806548:	e0bff717 	ldw	r2,-36(fp)
  80654c:	e0bffb15 	stw	r2,-20(fp)
  806550:	e0bffb17 	ldw	r2,-20(fp)
  806554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806558:	e0bfff17 	ldw	r2,-4(fp)
  80655c:	10000005 	stb	zero,0(r2)
    return;
  806560:	0001883a 	nop
  806564:	00000106 	br	80656c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  806568:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  80656c:	e037883a 	mov	sp,fp
  806570:	dfc00117 	ldw	ra,4(sp)
  806574:	df000017 	ldw	fp,0(sp)
  806578:	dec00204 	addi	sp,sp,8
  80657c:	f800283a 	ret

00806580 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  806580:	deffe104 	addi	sp,sp,-124
  806584:	dfc01e15 	stw	ra,120(sp)
  806588:	df001d15 	stw	fp,116(sp)
  80658c:	df001d04 	addi	fp,sp,116
  806590:	e13ffc15 	stw	r4,-16(fp)
  806594:	2809883a 	mov	r4,r5
  806598:	3007883a 	mov	r3,r6
  80659c:	3805883a 	mov	r2,r7
  8065a0:	e13ffd0d 	sth	r4,-12(fp)
  8065a4:	e0fffe05 	stb	r3,-8(fp)
  8065a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8065ac:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8065b0:	e0800217 	ldw	r2,8(fp)
  8065b4:	1000021e 	bne	r2,zero,8065c0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  8065b8:	0005883a 	mov	r2,zero
  8065bc:	00015906 	br	806b24 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8065c0:	e0bffc17 	ldw	r2,-16(fp)
  8065c4:	1000051e 	bne	r2,zero,8065dc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8065c8:	e0800217 	ldw	r2,8(fp)
  8065cc:	00c01b84 	movi	r3,110
  8065d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8065d4:	0005883a 	mov	r2,zero
  8065d8:	00015206 	br	806b24 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8065dc:	d0a04903 	ldbu	r2,-32476(gp)
  8065e0:	10803fcc 	andi	r2,r2,255
  8065e4:	10000526 	beq	r2,zero,8065fc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8065e8:	e0800217 	ldw	r2,8(fp)
  8065ec:	00c00084 	movi	r3,2
  8065f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8065f4:	0005883a 	mov	r2,zero
  8065f8:	00014a06 	br	806b24 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8065fc:	d0a03b03 	ldbu	r2,-32532(gp)
  806600:	10803fcc 	andi	r2,r2,255
  806604:	10000526 	beq	r2,zero,80661c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  806608:	e0800217 	ldw	r2,8(fp)
  80660c:	00c00344 	movi	r3,13
  806610:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806614:	0005883a 	mov	r2,zero
  806618:	00014206 	br	806b24 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80661c:	e0bffc17 	ldw	r2,-16(fp)
  806620:	10800003 	ldbu	r2,0(r2)
  806624:	10803fcc 	andi	r2,r2,255
  806628:	10800160 	cmpeqi	r2,r2,5
  80662c:	1000051e 	bne	r2,zero,806644 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  806630:	e0800217 	ldw	r2,8(fp)
  806634:	00c00044 	movi	r3,1
  806638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  80663c:	0005883a 	mov	r2,zero
  806640:	00013806 	br	806b24 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  806644:	e0fffe03 	ldbu	r3,-8(fp)
  806648:	00bfe004 	movi	r2,-128
  80664c:	1884703a 	and	r2,r3,r2
  806650:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  806654:	e0bfe603 	ldbu	r2,-104(fp)
  806658:	10000626 	beq	r2,zero,806674 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80665c:	e0bffe03 	ldbu	r2,-8(fp)
  806660:	10801fcc 	andi	r2,r2,127
  806664:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  806668:	00800044 	movi	r2,1
  80666c:	e0bfe405 	stb	r2,-112(fp)
  806670:	00000106 	br	806678 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  806674:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806678:	0005303a 	rdctl	r2,status
  80667c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806680:	e0fff617 	ldw	r3,-40(fp)
  806684:	00bfff84 	movi	r2,-2
  806688:	1884703a 	and	r2,r3,r2
  80668c:	1001703a 	wrctl	status,r2
  
  return context;
  806690:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  806694:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  806698:	e0bffe03 	ldbu	r2,-8(fp)
  80669c:	10c00060 	cmpeqi	r3,r2,1
  8066a0:	1800921e 	bne	r3,zero,8068ec <OSFlagPend+0x36c>
  8066a4:	10c00088 	cmpgei	r3,r2,2
  8066a8:	1800021e 	bne	r3,zero,8066b4 <OSFlagPend+0x134>
  8066ac:	10006126 	beq	r2,zero,806834 <OSFlagPend+0x2b4>
  8066b0:	0000bb06 	br	8069a0 <OSFlagPend+0x420>
  8066b4:	10c000a0 	cmpeqi	r3,r2,2
  8066b8:	1800031e 	bne	r3,zero,8066c8 <OSFlagPend+0x148>
  8066bc:	108000e0 	cmpeqi	r2,r2,3
  8066c0:	10002f1e 	bne	r2,zero,806780 <OSFlagPend+0x200>
  8066c4:	0000b606 	br	8069a0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8066c8:	e0bffc17 	ldw	r2,-16(fp)
  8066cc:	10c0020b 	ldhu	r3,8(r2)
  8066d0:	e0bffd0b 	ldhu	r2,-12(fp)
  8066d4:	1884703a 	and	r2,r3,r2
  8066d8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8066dc:	e0ffe80b 	ldhu	r3,-96(fp)
  8066e0:	e0bffd0b 	ldhu	r2,-12(fp)
  8066e4:	1880171e 	bne	r3,r2,806744 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8066e8:	e0bfe403 	ldbu	r2,-112(fp)
  8066ec:	10800058 	cmpnei	r2,r2,1
  8066f0:	1000091e 	bne	r2,zero,806718 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8066f4:	e0bffc17 	ldw	r2,-16(fp)
  8066f8:	1080020b 	ldhu	r2,8(r2)
  8066fc:	1007883a 	mov	r3,r2
  806700:	e0bfe80b 	ldhu	r2,-96(fp)
  806704:	0084303a 	nor	r2,zero,r2
  806708:	1884703a 	and	r2,r3,r2
  80670c:	1007883a 	mov	r3,r2
  806710:	e0bffc17 	ldw	r2,-16(fp)
  806714:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806718:	d0a04a17 	ldw	r2,-32472(gp)
  80671c:	e0ffe80b 	ldhu	r3,-96(fp)
  806720:	10c00b0d 	sth	r3,44(r2)
  806724:	e0bfe517 	ldw	r2,-108(fp)
  806728:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80672c:	e0bfe717 	ldw	r2,-100(fp)
  806730:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806734:	e0800217 	ldw	r2,8(fp)
  806738:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80673c:	e0bfe80b 	ldhu	r2,-96(fp)
  806740:	0000f806 	br	806b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806744:	e13ffd0b 	ldhu	r4,-12(fp)
  806748:	e17ffe03 	ldbu	r5,-8(fp)
  80674c:	e0bfff0b 	ldhu	r2,-4(fp)
  806750:	e0fff704 	addi	r3,fp,-36
  806754:	d8800015 	stw	r2,0(sp)
  806758:	280f883a 	mov	r7,r5
  80675c:	200d883a 	mov	r6,r4
  806760:	180b883a 	mov	r5,r3
  806764:	e13ffc17 	ldw	r4,-16(fp)
  806768:	0806ff00 	call	806ff0 <OS_FlagBlock>
  80676c:	e0bfe517 	ldw	r2,-108(fp)
  806770:	e0bfe915 	stw	r2,-92(fp)
  806774:	e0bfe917 	ldw	r2,-92(fp)
  806778:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80677c:	00009206 	br	8069c8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  806780:	e0bffc17 	ldw	r2,-16(fp)
  806784:	10c0020b 	ldhu	r3,8(r2)
  806788:	e0bffd0b 	ldhu	r2,-12(fp)
  80678c:	1884703a 	and	r2,r3,r2
  806790:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  806794:	e0bfe80b 	ldhu	r2,-96(fp)
  806798:	10001726 	beq	r2,zero,8067f8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80679c:	e0bfe403 	ldbu	r2,-112(fp)
  8067a0:	10800058 	cmpnei	r2,r2,1
  8067a4:	1000091e 	bne	r2,zero,8067cc <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8067a8:	e0bffc17 	ldw	r2,-16(fp)
  8067ac:	1080020b 	ldhu	r2,8(r2)
  8067b0:	1007883a 	mov	r3,r2
  8067b4:	e0bfe80b 	ldhu	r2,-96(fp)
  8067b8:	0084303a 	nor	r2,zero,r2
  8067bc:	1884703a 	and	r2,r3,r2
  8067c0:	1007883a 	mov	r3,r2
  8067c4:	e0bffc17 	ldw	r2,-16(fp)
  8067c8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8067cc:	d0a04a17 	ldw	r2,-32472(gp)
  8067d0:	e0ffe80b 	ldhu	r3,-96(fp)
  8067d4:	10c00b0d 	sth	r3,44(r2)
  8067d8:	e0bfe517 	ldw	r2,-108(fp)
  8067dc:	e0bfea15 	stw	r2,-88(fp)
  8067e0:	e0bfea17 	ldw	r2,-88(fp)
  8067e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8067e8:	e0800217 	ldw	r2,8(fp)
  8067ec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8067f0:	e0bfe80b 	ldhu	r2,-96(fp)
  8067f4:	0000cb06 	br	806b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8067f8:	e13ffd0b 	ldhu	r4,-12(fp)
  8067fc:	e17ffe03 	ldbu	r5,-8(fp)
  806800:	e0bfff0b 	ldhu	r2,-4(fp)
  806804:	e0fff704 	addi	r3,fp,-36
  806808:	d8800015 	stw	r2,0(sp)
  80680c:	280f883a 	mov	r7,r5
  806810:	200d883a 	mov	r6,r4
  806814:	180b883a 	mov	r5,r3
  806818:	e13ffc17 	ldw	r4,-16(fp)
  80681c:	0806ff00 	call	806ff0 <OS_FlagBlock>
  806820:	e0bfe517 	ldw	r2,-108(fp)
  806824:	e0bfeb15 	stw	r2,-84(fp)
  806828:	e0bfeb17 	ldw	r2,-84(fp)
  80682c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806830:	00006506 	br	8069c8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  806834:	e0bffc17 	ldw	r2,-16(fp)
  806838:	1080020b 	ldhu	r2,8(r2)
  80683c:	0084303a 	nor	r2,zero,r2
  806840:	1007883a 	mov	r3,r2
  806844:	e0bffd0b 	ldhu	r2,-12(fp)
  806848:	1884703a 	and	r2,r3,r2
  80684c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  806850:	e0ffe80b 	ldhu	r3,-96(fp)
  806854:	e0bffd0b 	ldhu	r2,-12(fp)
  806858:	1880151e 	bne	r3,r2,8068b0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80685c:	e0bfe403 	ldbu	r2,-112(fp)
  806860:	10800058 	cmpnei	r2,r2,1
  806864:	1000071e 	bne	r2,zero,806884 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  806868:	e0bffc17 	ldw	r2,-16(fp)
  80686c:	10c0020b 	ldhu	r3,8(r2)
  806870:	e0bfe80b 	ldhu	r2,-96(fp)
  806874:	1884b03a 	or	r2,r3,r2
  806878:	1007883a 	mov	r3,r2
  80687c:	e0bffc17 	ldw	r2,-16(fp)
  806880:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806884:	d0a04a17 	ldw	r2,-32472(gp)
  806888:	e0ffe80b 	ldhu	r3,-96(fp)
  80688c:	10c00b0d 	sth	r3,44(r2)
  806890:	e0bfe517 	ldw	r2,-108(fp)
  806894:	e0bfec15 	stw	r2,-80(fp)
  806898:	e0bfec17 	ldw	r2,-80(fp)
  80689c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8068a0:	e0800217 	ldw	r2,8(fp)
  8068a4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8068a8:	e0bfe80b 	ldhu	r2,-96(fp)
  8068ac:	00009d06 	br	806b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8068b0:	e13ffd0b 	ldhu	r4,-12(fp)
  8068b4:	e17ffe03 	ldbu	r5,-8(fp)
  8068b8:	e0bfff0b 	ldhu	r2,-4(fp)
  8068bc:	e0fff704 	addi	r3,fp,-36
  8068c0:	d8800015 	stw	r2,0(sp)
  8068c4:	280f883a 	mov	r7,r5
  8068c8:	200d883a 	mov	r6,r4
  8068cc:	180b883a 	mov	r5,r3
  8068d0:	e13ffc17 	ldw	r4,-16(fp)
  8068d4:	0806ff00 	call	806ff0 <OS_FlagBlock>
  8068d8:	e0bfe517 	ldw	r2,-108(fp)
  8068dc:	e0bfed15 	stw	r2,-76(fp)
  8068e0:	e0bfed17 	ldw	r2,-76(fp)
  8068e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8068e8:	00003706 	br	8069c8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8068ec:	e0bffc17 	ldw	r2,-16(fp)
  8068f0:	1080020b 	ldhu	r2,8(r2)
  8068f4:	0084303a 	nor	r2,zero,r2
  8068f8:	1007883a 	mov	r3,r2
  8068fc:	e0bffd0b 	ldhu	r2,-12(fp)
  806900:	1884703a 	and	r2,r3,r2
  806904:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  806908:	e0bfe80b 	ldhu	r2,-96(fp)
  80690c:	10001526 	beq	r2,zero,806964 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806910:	e0bfe403 	ldbu	r2,-112(fp)
  806914:	10800058 	cmpnei	r2,r2,1
  806918:	1000071e 	bne	r2,zero,806938 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80691c:	e0bffc17 	ldw	r2,-16(fp)
  806920:	10c0020b 	ldhu	r3,8(r2)
  806924:	e0bfe80b 	ldhu	r2,-96(fp)
  806928:	1884b03a 	or	r2,r3,r2
  80692c:	1007883a 	mov	r3,r2
  806930:	e0bffc17 	ldw	r2,-16(fp)
  806934:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806938:	d0a04a17 	ldw	r2,-32472(gp)
  80693c:	e0ffe80b 	ldhu	r3,-96(fp)
  806940:	10c00b0d 	sth	r3,44(r2)
  806944:	e0bfe517 	ldw	r2,-108(fp)
  806948:	e0bfee15 	stw	r2,-72(fp)
  80694c:	e0bfee17 	ldw	r2,-72(fp)
  806950:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806954:	e0800217 	ldw	r2,8(fp)
  806958:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80695c:	e0bfe80b 	ldhu	r2,-96(fp)
  806960:	00007006 	br	806b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806964:	e13ffd0b 	ldhu	r4,-12(fp)
  806968:	e17ffe03 	ldbu	r5,-8(fp)
  80696c:	e0bfff0b 	ldhu	r2,-4(fp)
  806970:	e0fff704 	addi	r3,fp,-36
  806974:	d8800015 	stw	r2,0(sp)
  806978:	280f883a 	mov	r7,r5
  80697c:	200d883a 	mov	r6,r4
  806980:	180b883a 	mov	r5,r3
  806984:	e13ffc17 	ldw	r4,-16(fp)
  806988:	0806ff00 	call	806ff0 <OS_FlagBlock>
  80698c:	e0bfe517 	ldw	r2,-108(fp)
  806990:	e0bfef15 	stw	r2,-68(fp)
  806994:	e0bfef17 	ldw	r2,-68(fp)
  806998:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80699c:	00000a06 	br	8069c8 <OSFlagPend+0x448>
  8069a0:	e0bfe517 	ldw	r2,-108(fp)
  8069a4:	e0bff015 	stw	r2,-64(fp)
  8069a8:	e0bff017 	ldw	r2,-64(fp)
  8069ac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8069b0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8069b4:	e0800217 	ldw	r2,8(fp)
  8069b8:	00c01bc4 	movi	r3,111
  8069bc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  8069c0:	e0bfe80b 	ldhu	r2,-96(fp)
  8069c4:	00005706 	br	806b24 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8069c8:	08054500 	call	805450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8069cc:	0005303a 	rdctl	r2,status
  8069d0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8069d4:	e0fff117 	ldw	r3,-60(fp)
  8069d8:	00bfff84 	movi	r2,-2
  8069dc:	1884703a 	and	r2,r3,r2
  8069e0:	1001703a 	wrctl	status,r2
  
  return context;
  8069e4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  8069e8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  8069ec:	d0a04a17 	ldw	r2,-32472(gp)
  8069f0:	10800c43 	ldbu	r2,49(r2)
  8069f4:	10803fcc 	andi	r2,r2,255
  8069f8:	10001c26 	beq	r2,zero,806a6c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8069fc:	d0a04a17 	ldw	r2,-32472(gp)
  806a00:	10800c43 	ldbu	r2,49(r2)
  806a04:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  806a08:	d0a04a17 	ldw	r2,-32472(gp)
  806a0c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  806a10:	e0bff704 	addi	r2,fp,-36
  806a14:	1009883a 	mov	r4,r2
  806a18:	08073240 	call	807324 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  806a1c:	d0a04a17 	ldw	r2,-32472(gp)
  806a20:	10000c05 	stb	zero,48(r2)
  806a24:	e0bfe517 	ldw	r2,-108(fp)
  806a28:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806a2c:	e0bff217 	ldw	r2,-56(fp)
  806a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  806a34:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  806a38:	e0bff303 	ldbu	r2,-52(fp)
  806a3c:	108000a0 	cmpeqi	r2,r2,2
  806a40:	10000426 	beq	r2,zero,806a54 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  806a44:	e0800217 	ldw	r2,8(fp)
  806a48:	00c00384 	movi	r3,14
  806a4c:	10c00005 	stb	r3,0(r2)
                 break;
  806a50:	00000406 	br	806a64 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  806a54:	e0800217 	ldw	r2,8(fp)
  806a58:	00c00284 	movi	r3,10
  806a5c:	10c00005 	stb	r3,0(r2)
                 break;
  806a60:	0001883a 	nop
        }
        return (flags_rdy);
  806a64:	e0bfe80b 	ldhu	r2,-96(fp)
  806a68:	00002e06 	br	806b24 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  806a6c:	d0a04a17 	ldw	r2,-32472(gp)
  806a70:	10800b0b 	ldhu	r2,44(r2)
  806a74:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  806a78:	e0bfe403 	ldbu	r2,-112(fp)
  806a7c:	10800058 	cmpnei	r2,r2,1
  806a80:	1000211e 	bne	r2,zero,806b08 <OSFlagPend+0x588>
        switch (wait_type) {
  806a84:	e0bffe03 	ldbu	r2,-8(fp)
  806a88:	10001616 	blt	r2,zero,806ae4 <OSFlagPend+0x564>
  806a8c:	10c00090 	cmplti	r3,r2,2
  806a90:	18000c1e 	bne	r3,zero,806ac4 <OSFlagPend+0x544>
  806a94:	10800108 	cmpgei	r2,r2,4
  806a98:	1000121e 	bne	r2,zero,806ae4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  806a9c:	e0bffc17 	ldw	r2,-16(fp)
  806aa0:	1080020b 	ldhu	r2,8(r2)
  806aa4:	1007883a 	mov	r3,r2
  806aa8:	e0bfe80b 	ldhu	r2,-96(fp)
  806aac:	0084303a 	nor	r2,zero,r2
  806ab0:	1884703a 	and	r2,r3,r2
  806ab4:	1007883a 	mov	r3,r2
  806ab8:	e0bffc17 	ldw	r2,-16(fp)
  806abc:	10c0020d 	sth	r3,8(r2)
                 break;
  806ac0:	00001106 	br	806b08 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  806ac4:	e0bffc17 	ldw	r2,-16(fp)
  806ac8:	10c0020b 	ldhu	r3,8(r2)
  806acc:	e0bfe80b 	ldhu	r2,-96(fp)
  806ad0:	1884b03a 	or	r2,r3,r2
  806ad4:	1007883a 	mov	r3,r2
  806ad8:	e0bffc17 	ldw	r2,-16(fp)
  806adc:	10c0020d 	sth	r3,8(r2)
                 break;
  806ae0:	00000906 	br	806b08 <OSFlagPend+0x588>
  806ae4:	e0bfe517 	ldw	r2,-108(fp)
  806ae8:	e0bff415 	stw	r2,-48(fp)
  806aec:	e0bff417 	ldw	r2,-48(fp)
  806af0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  806af4:	e0800217 	ldw	r2,8(fp)
  806af8:	00c01bc4 	movi	r3,111
  806afc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  806b00:	0005883a 	mov	r2,zero
  806b04:	00000706 	br	806b24 <OSFlagPend+0x5a4>
  806b08:	e0bfe517 	ldw	r2,-108(fp)
  806b0c:	e0bff515 	stw	r2,-44(fp)
  806b10:	e0bff517 	ldw	r2,-44(fp)
  806b14:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  806b18:	e0800217 	ldw	r2,8(fp)
  806b1c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  806b20:	e0bfe80b 	ldhu	r2,-96(fp)
}
  806b24:	e037883a 	mov	sp,fp
  806b28:	dfc00117 	ldw	ra,4(sp)
  806b2c:	df000017 	ldw	fp,0(sp)
  806b30:	dec00204 	addi	sp,sp,8
  806b34:	f800283a 	ret

00806b38 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  806b38:	defffb04 	addi	sp,sp,-20
  806b3c:	df000415 	stw	fp,16(sp)
  806b40:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806b44:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806b48:	0005303a 	rdctl	r2,status
  806b4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806b50:	e0fffe17 	ldw	r3,-8(fp)
  806b54:	00bfff84 	movi	r2,-2
  806b58:	1884703a 	and	r2,r3,r2
  806b5c:	1001703a 	wrctl	status,r2
  
  return context;
  806b60:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  806b64:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  806b68:	d0a04a17 	ldw	r2,-32472(gp)
  806b6c:	10800b0b 	ldhu	r2,44(r2)
  806b70:	e0bffd0d 	sth	r2,-12(fp)
  806b74:	e0bffc17 	ldw	r2,-16(fp)
  806b78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806b7c:	e0bfff17 	ldw	r2,-4(fp)
  806b80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  806b84:	e0bffd0b 	ldhu	r2,-12(fp)
}
  806b88:	e037883a 	mov	sp,fp
  806b8c:	df000017 	ldw	fp,0(sp)
  806b90:	dec00104 	addi	sp,sp,4
  806b94:	f800283a 	ret

00806b98 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  806b98:	deffef04 	addi	sp,sp,-68
  806b9c:	dfc01015 	stw	ra,64(sp)
  806ba0:	df000f15 	stw	fp,60(sp)
  806ba4:	df000f04 	addi	fp,sp,60
  806ba8:	e13ffc15 	stw	r4,-16(fp)
  806bac:	2807883a 	mov	r3,r5
  806bb0:	3005883a 	mov	r2,r6
  806bb4:	e1ffff15 	stw	r7,-4(fp)
  806bb8:	e0fffd0d 	sth	r3,-12(fp)
  806bbc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  806bc0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  806bc4:	e0bfff17 	ldw	r2,-4(fp)
  806bc8:	1000021e 	bne	r2,zero,806bd4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  806bcc:	0005883a 	mov	r2,zero
  806bd0:	0000d106 	br	806f18 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  806bd4:	e0bffc17 	ldw	r2,-16(fp)
  806bd8:	1000051e 	bne	r2,zero,806bf0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806bdc:	e0bfff17 	ldw	r2,-4(fp)
  806be0:	00c01b84 	movi	r3,110
  806be4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806be8:	0005883a 	mov	r2,zero
  806bec:	0000ca06 	br	806f18 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  806bf0:	e0bffc17 	ldw	r2,-16(fp)
  806bf4:	10800003 	ldbu	r2,0(r2)
  806bf8:	10803fcc 	andi	r2,r2,255
  806bfc:	10800160 	cmpeqi	r2,r2,5
  806c00:	1000051e 	bne	r2,zero,806c18 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  806c04:	e0bfff17 	ldw	r2,-4(fp)
  806c08:	00c00044 	movi	r3,1
  806c0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806c10:	0005883a 	mov	r2,zero
  806c14:	0000c006 	br	806f18 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806c18:	0005303a 	rdctl	r2,status
  806c1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806c20:	e0fffb17 	ldw	r3,-20(fp)
  806c24:	00bfff84 	movi	r2,-2
  806c28:	1884703a 	and	r2,r3,r2
  806c2c:	1001703a 	wrctl	status,r2
  
  return context;
  806c30:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  806c34:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  806c38:	e0bffe03 	ldbu	r2,-8(fp)
  806c3c:	10000326 	beq	r2,zero,806c4c <OSFlagPost+0xb4>
  806c40:	10800060 	cmpeqi	r2,r2,1
  806c44:	10000b1e 	bne	r2,zero,806c74 <OSFlagPost+0xdc>
  806c48:	00001206 	br	806c94 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  806c4c:	e0bffc17 	ldw	r2,-16(fp)
  806c50:	1080020b 	ldhu	r2,8(r2)
  806c54:	1007883a 	mov	r3,r2
  806c58:	e0bffd0b 	ldhu	r2,-12(fp)
  806c5c:	0084303a 	nor	r2,zero,r2
  806c60:	1884703a 	and	r2,r3,r2
  806c64:	1007883a 	mov	r3,r2
  806c68:	e0bffc17 	ldw	r2,-16(fp)
  806c6c:	10c0020d 	sth	r3,8(r2)
             break;
  806c70:	00001106 	br	806cb8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  806c74:	e0bffc17 	ldw	r2,-16(fp)
  806c78:	10c0020b 	ldhu	r3,8(r2)
  806c7c:	e0bffd0b 	ldhu	r2,-12(fp)
  806c80:	1884b03a 	or	r2,r3,r2
  806c84:	1007883a 	mov	r3,r2
  806c88:	e0bffc17 	ldw	r2,-16(fp)
  806c8c:	10c0020d 	sth	r3,8(r2)
             break;
  806c90:	00000906 	br	806cb8 <OSFlagPost+0x120>
  806c94:	e0bff317 	ldw	r2,-52(fp)
  806c98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c9c:	e0bff417 	ldw	r2,-48(fp)
  806ca0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  806ca4:	e0bfff17 	ldw	r2,-4(fp)
  806ca8:	00c01c44 	movi	r3,113
  806cac:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  806cb0:	0005883a 	mov	r2,zero
  806cb4:	00009806 	br	806f18 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  806cb8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  806cbc:	e0bffc17 	ldw	r2,-16(fp)
  806cc0:	10800117 	ldw	r2,4(r2)
  806cc4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  806cc8:	00007706 	br	806ea8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  806ccc:	e0bff117 	ldw	r2,-60(fp)
  806cd0:	10800483 	ldbu	r2,18(r2)
  806cd4:	10803fcc 	andi	r2,r2,255
  806cd8:	10c00060 	cmpeqi	r3,r2,1
  806cdc:	18004a1e 	bne	r3,zero,806e08 <OSFlagPost+0x270>
  806ce0:	10c00088 	cmpgei	r3,r2,2
  806ce4:	1800021e 	bne	r3,zero,806cf0 <OSFlagPost+0x158>
  806ce8:	10002f26 	beq	r2,zero,806da8 <OSFlagPost+0x210>
  806cec:	00005b06 	br	806e5c <OSFlagPost+0x2c4>
  806cf0:	10c000a0 	cmpeqi	r3,r2,2
  806cf4:	1800031e 	bne	r3,zero,806d04 <OSFlagPost+0x16c>
  806cf8:	108000e0 	cmpeqi	r2,r2,3
  806cfc:	1000171e 	bne	r2,zero,806d5c <OSFlagPost+0x1c4>
  806d00:	00005606 	br	806e5c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  806d04:	e0bffc17 	ldw	r2,-16(fp)
  806d08:	10c0020b 	ldhu	r3,8(r2)
  806d0c:	e0bff117 	ldw	r2,-60(fp)
  806d10:	1080040b 	ldhu	r2,16(r2)
  806d14:	1884703a 	and	r2,r3,r2
  806d18:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  806d1c:	e0bff117 	ldw	r2,-60(fp)
  806d20:	1080040b 	ldhu	r2,16(r2)
  806d24:	10ffffcc 	andi	r3,r2,65535
  806d28:	e0bff60b 	ldhu	r2,-40(fp)
  806d2c:	1880541e 	bne	r3,r2,806e80 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  806d30:	e0bff60b 	ldhu	r2,-40(fp)
  806d34:	100b883a 	mov	r5,r2
  806d38:	e13ff117 	ldw	r4,-60(fp)
  806d3c:	08072300 	call	807230 <OS_FlagTaskRdy>
  806d40:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  806d44:	e0bff683 	ldbu	r2,-38(fp)
  806d48:	10800058 	cmpnei	r2,r2,1
  806d4c:	10004c1e 	bne	r2,zero,806e80 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  806d50:	00800044 	movi	r2,1
  806d54:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  806d58:	00004906 	br	806e80 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  806d5c:	e0bffc17 	ldw	r2,-16(fp)
  806d60:	10c0020b 	ldhu	r3,8(r2)
  806d64:	e0bff117 	ldw	r2,-60(fp)
  806d68:	1080040b 	ldhu	r2,16(r2)
  806d6c:	1884703a 	and	r2,r3,r2
  806d70:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  806d74:	e0bff60b 	ldhu	r2,-40(fp)
  806d78:	10004326 	beq	r2,zero,806e88 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  806d7c:	e0bff60b 	ldhu	r2,-40(fp)
  806d80:	100b883a 	mov	r5,r2
  806d84:	e13ff117 	ldw	r4,-60(fp)
  806d88:	08072300 	call	807230 <OS_FlagTaskRdy>
  806d8c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  806d90:	e0bff683 	ldbu	r2,-38(fp)
  806d94:	10800058 	cmpnei	r2,r2,1
  806d98:	10003b1e 	bne	r2,zero,806e88 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  806d9c:	00800044 	movi	r2,1
  806da0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  806da4:	00003806 	br	806e88 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  806da8:	e0bffc17 	ldw	r2,-16(fp)
  806dac:	1080020b 	ldhu	r2,8(r2)
  806db0:	0084303a 	nor	r2,zero,r2
  806db4:	1007883a 	mov	r3,r2
  806db8:	e0bff117 	ldw	r2,-60(fp)
  806dbc:	1080040b 	ldhu	r2,16(r2)
  806dc0:	1884703a 	and	r2,r3,r2
  806dc4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  806dc8:	e0bff117 	ldw	r2,-60(fp)
  806dcc:	1080040b 	ldhu	r2,16(r2)
  806dd0:	10ffffcc 	andi	r3,r2,65535
  806dd4:	e0bff60b 	ldhu	r2,-40(fp)
  806dd8:	18802d1e 	bne	r3,r2,806e90 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  806ddc:	e0bff60b 	ldhu	r2,-40(fp)
  806de0:	100b883a 	mov	r5,r2
  806de4:	e13ff117 	ldw	r4,-60(fp)
  806de8:	08072300 	call	807230 <OS_FlagTaskRdy>
  806dec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  806df0:	e0bff683 	ldbu	r2,-38(fp)
  806df4:	10800058 	cmpnei	r2,r2,1
  806df8:	1000251e 	bne	r2,zero,806e90 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  806dfc:	00800044 	movi	r2,1
  806e00:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  806e04:	00002206 	br	806e90 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  806e08:	e0bffc17 	ldw	r2,-16(fp)
  806e0c:	1080020b 	ldhu	r2,8(r2)
  806e10:	0084303a 	nor	r2,zero,r2
  806e14:	1007883a 	mov	r3,r2
  806e18:	e0bff117 	ldw	r2,-60(fp)
  806e1c:	1080040b 	ldhu	r2,16(r2)
  806e20:	1884703a 	and	r2,r3,r2
  806e24:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  806e28:	e0bff60b 	ldhu	r2,-40(fp)
  806e2c:	10001a26 	beq	r2,zero,806e98 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  806e30:	e0bff60b 	ldhu	r2,-40(fp)
  806e34:	100b883a 	mov	r5,r2
  806e38:	e13ff117 	ldw	r4,-60(fp)
  806e3c:	08072300 	call	807230 <OS_FlagTaskRdy>
  806e40:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  806e44:	e0bff683 	ldbu	r2,-38(fp)
  806e48:	10800058 	cmpnei	r2,r2,1
  806e4c:	1000121e 	bne	r2,zero,806e98 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  806e50:	00800044 	movi	r2,1
  806e54:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  806e58:	00000f06 	br	806e98 <OSFlagPost+0x300>
  806e5c:	e0bff317 	ldw	r2,-52(fp)
  806e60:	e0bff515 	stw	r2,-44(fp)
  806e64:	e0bff517 	ldw	r2,-44(fp)
  806e68:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  806e6c:	e0bfff17 	ldw	r2,-4(fp)
  806e70:	00c01bc4 	movi	r3,111
  806e74:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  806e78:	0005883a 	mov	r2,zero
  806e7c:	00002606 	br	806f18 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  806e80:	0001883a 	nop
  806e84:	00000506 	br	806e9c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  806e88:	0001883a 	nop
  806e8c:	00000306 	br	806e9c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  806e90:	0001883a 	nop
  806e94:	00000106 	br	806e9c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  806e98:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  806e9c:	e0bff117 	ldw	r2,-60(fp)
  806ea0:	10800017 	ldw	r2,0(r2)
  806ea4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  806ea8:	e0bff117 	ldw	r2,-60(fp)
  806eac:	103f871e 	bne	r2,zero,806ccc <__alt_mem_epcs_flash_controller_0+0xff7fdccc>
  806eb0:	e0bff317 	ldw	r2,-52(fp)
  806eb4:	e0bff715 	stw	r2,-36(fp)
  806eb8:	e0bff717 	ldw	r2,-36(fp)
  806ebc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  806ec0:	e0bff203 	ldbu	r2,-56(fp)
  806ec4:	10800058 	cmpnei	r2,r2,1
  806ec8:	1000011e 	bne	r2,zero,806ed0 <OSFlagPost+0x338>
        OS_Sched();
  806ecc:	08054500 	call	805450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806ed0:	0005303a 	rdctl	r2,status
  806ed4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ed8:	e0fffa17 	ldw	r3,-24(fp)
  806edc:	00bfff84 	movi	r2,-2
  806ee0:	1884703a 	and	r2,r3,r2
  806ee4:	1001703a 	wrctl	status,r2
  
  return context;
  806ee8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  806eec:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  806ef0:	e0bffc17 	ldw	r2,-16(fp)
  806ef4:	1080020b 	ldhu	r2,8(r2)
  806ef8:	e0bff90d 	sth	r2,-28(fp)
  806efc:	e0bff317 	ldw	r2,-52(fp)
  806f00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806f04:	e0bff817 	ldw	r2,-32(fp)
  806f08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  806f0c:	e0bfff17 	ldw	r2,-4(fp)
  806f10:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  806f14:	e0bff90b 	ldhu	r2,-28(fp)
}
  806f18:	e037883a 	mov	sp,fp
  806f1c:	dfc00117 	ldw	ra,4(sp)
  806f20:	df000017 	ldw	fp,0(sp)
  806f24:	dec00204 	addi	sp,sp,8
  806f28:	f800283a 	ret

00806f2c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  806f2c:	defff904 	addi	sp,sp,-28
  806f30:	df000615 	stw	fp,24(sp)
  806f34:	df000604 	addi	fp,sp,24
  806f38:	e13ffe15 	stw	r4,-8(fp)
  806f3c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  806f40:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  806f44:	e0bfff17 	ldw	r2,-4(fp)
  806f48:	1000021e 	bne	r2,zero,806f54 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  806f4c:	0005883a 	mov	r2,zero
  806f50:	00002306 	br	806fe0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  806f54:	e0bffe17 	ldw	r2,-8(fp)
  806f58:	1000051e 	bne	r2,zero,806f70 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806f5c:	e0bfff17 	ldw	r2,-4(fp)
  806f60:	00c01b84 	movi	r3,110
  806f64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806f68:	0005883a 	mov	r2,zero
  806f6c:	00001c06 	br	806fe0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  806f70:	e0bffe17 	ldw	r2,-8(fp)
  806f74:	10800003 	ldbu	r2,0(r2)
  806f78:	10803fcc 	andi	r2,r2,255
  806f7c:	10800160 	cmpeqi	r2,r2,5
  806f80:	1000051e 	bne	r2,zero,806f98 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  806f84:	e0bfff17 	ldw	r2,-4(fp)
  806f88:	00c00044 	movi	r3,1
  806f8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806f90:	0005883a 	mov	r2,zero
  806f94:	00001206 	br	806fe0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806f98:	0005303a 	rdctl	r2,status
  806f9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806fa0:	e0fffc17 	ldw	r3,-16(fp)
  806fa4:	00bfff84 	movi	r2,-2
  806fa8:	1884703a 	and	r2,r3,r2
  806fac:	1001703a 	wrctl	status,r2
  
  return context;
  806fb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806fb4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  806fb8:	e0bffe17 	ldw	r2,-8(fp)
  806fbc:	1080020b 	ldhu	r2,8(r2)
  806fc0:	e0bffb0d 	sth	r2,-20(fp)
  806fc4:	e0bffa17 	ldw	r2,-24(fp)
  806fc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806fcc:	e0bffd17 	ldw	r2,-12(fp)
  806fd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806fd4:	e0bfff17 	ldw	r2,-4(fp)
  806fd8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  806fdc:	e0bffb0b 	ldhu	r2,-20(fp)
}
  806fe0:	e037883a 	mov	sp,fp
  806fe4:	df000017 	ldw	fp,0(sp)
  806fe8:	dec00104 	addi	sp,sp,4
  806fec:	f800283a 	ret

00806ff0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  806ff0:	defff804 	addi	sp,sp,-32
  806ff4:	df000715 	stw	fp,28(sp)
  806ff8:	df000704 	addi	fp,sp,28
  806ffc:	e13ffb15 	stw	r4,-20(fp)
  807000:	e17ffc15 	stw	r5,-16(fp)
  807004:	3009883a 	mov	r4,r6
  807008:	3807883a 	mov	r3,r7
  80700c:	e0800117 	ldw	r2,4(fp)
  807010:	e13ffd0d 	sth	r4,-12(fp)
  807014:	e0fffe05 	stb	r3,-8(fp)
  807018:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80701c:	d0a04a17 	ldw	r2,-32472(gp)
  807020:	d0e04a17 	ldw	r3,-32472(gp)
  807024:	18c00c03 	ldbu	r3,48(r3)
  807028:	18c00814 	ori	r3,r3,32
  80702c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  807030:	d0a04a17 	ldw	r2,-32472(gp)
  807034:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  807038:	d0a04a17 	ldw	r2,-32472(gp)
  80703c:	e0ffff0b 	ldhu	r3,-4(fp)
  807040:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  807044:	d0a04a17 	ldw	r2,-32472(gp)
  807048:	e0fffc17 	ldw	r3,-16(fp)
  80704c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  807050:	e0bffc17 	ldw	r2,-16(fp)
  807054:	e0fffd0b 	ldhu	r3,-12(fp)
  807058:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80705c:	e0bffc17 	ldw	r2,-16(fp)
  807060:	e0fffe03 	ldbu	r3,-8(fp)
  807064:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  807068:	d0e04a17 	ldw	r3,-32472(gp)
  80706c:	e0bffc17 	ldw	r2,-16(fp)
  807070:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  807074:	e0bffb17 	ldw	r2,-20(fp)
  807078:	10c00117 	ldw	r3,4(r2)
  80707c:	e0bffc17 	ldw	r2,-16(fp)
  807080:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  807084:	e0bffc17 	ldw	r2,-16(fp)
  807088:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80708c:	e0bffc17 	ldw	r2,-16(fp)
  807090:	e0fffb17 	ldw	r3,-20(fp)
  807094:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  807098:	e0bffb17 	ldw	r2,-20(fp)
  80709c:	10800117 	ldw	r2,4(r2)
  8070a0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  8070a4:	e0bff917 	ldw	r2,-28(fp)
  8070a8:	10000326 	beq	r2,zero,8070b8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  8070ac:	e0bff917 	ldw	r2,-28(fp)
  8070b0:	e0fffc17 	ldw	r3,-16(fp)
  8070b4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  8070b8:	e0bffb17 	ldw	r2,-20(fp)
  8070bc:	e0fffc17 	ldw	r3,-16(fp)
  8070c0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  8070c4:	d0a04a17 	ldw	r2,-32472(gp)
  8070c8:	10800d03 	ldbu	r2,52(r2)
  8070cc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8070d0:	e0fffa03 	ldbu	r3,-24(fp)
  8070d4:	e13ffa03 	ldbu	r4,-24(fp)
  8070d8:	d0a04744 	addi	r2,gp,-32483
  8070dc:	2085883a 	add	r2,r4,r2
  8070e0:	10800003 	ldbu	r2,0(r2)
  8070e4:	1009883a 	mov	r4,r2
  8070e8:	d0a04a17 	ldw	r2,-32472(gp)
  8070ec:	10800d43 	ldbu	r2,53(r2)
  8070f0:	0084303a 	nor	r2,zero,r2
  8070f4:	2084703a 	and	r2,r4,r2
  8070f8:	1009883a 	mov	r4,r2
  8070fc:	d0a04744 	addi	r2,gp,-32483
  807100:	1885883a 	add	r2,r3,r2
  807104:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  807108:	e0fffa03 	ldbu	r3,-24(fp)
  80710c:	d0a04744 	addi	r2,gp,-32483
  807110:	1885883a 	add	r2,r3,r2
  807114:	10800003 	ldbu	r2,0(r2)
  807118:	10803fcc 	andi	r2,r2,255
  80711c:	1000071e 	bne	r2,zero,80713c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  807120:	d0a04a17 	ldw	r2,-32472(gp)
  807124:	10800d83 	ldbu	r2,54(r2)
  807128:	0084303a 	nor	r2,zero,r2
  80712c:	1007883a 	mov	r3,r2
  807130:	d0a04703 	ldbu	r2,-32484(gp)
  807134:	1884703a 	and	r2,r3,r2
  807138:	d0a04705 	stb	r2,-32484(gp)
    }
}
  80713c:	0001883a 	nop
  807140:	e037883a 	mov	sp,fp
  807144:	df000017 	ldw	fp,0(sp)
  807148:	dec00104 	addi	sp,sp,4
  80714c:	f800283a 	ret

00807150 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  807150:	defffb04 	addi	sp,sp,-20
  807154:	dfc00415 	stw	ra,16(sp)
  807158:	df000315 	stw	fp,12(sp)
  80715c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  807160:	0140dc04 	movi	r5,880
  807164:	01002074 	movhi	r4,129
  807168:	2115a704 	addi	r4,r4,22172
  80716c:	08053940 	call	805394 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  807170:	00802074 	movhi	r2,129
  807174:	1095a704 	addi	r2,r2,22172
  807178:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80717c:	00802074 	movhi	r2,129
  807180:	1095b204 	addi	r2,r2,22216
  807184:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  807188:	e03ffd0d 	sth	zero,-12(fp)
  80718c:	00001306 	br	8071dc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  807190:	e0bffe17 	ldw	r2,-8(fp)
  807194:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  807198:	e0bffe17 	ldw	r2,-8(fp)
  80719c:	e0ffff17 	ldw	r3,-4(fp)
  8071a0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  8071a4:	e0bffe17 	ldw	r2,-8(fp)
  8071a8:	00c00fc4 	movi	r3,63
  8071ac:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8071b0:	e0bffe17 	ldw	r2,-8(fp)
  8071b4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  8071b8:	e0bffe17 	ldw	r2,-8(fp)
  8071bc:	10800b04 	addi	r2,r2,44
  8071c0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  8071c4:	e0bfff17 	ldw	r2,-4(fp)
  8071c8:	10800b04 	addi	r2,r2,44
  8071cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8071d0:	e0bffd0b 	ldhu	r2,-12(fp)
  8071d4:	10800044 	addi	r2,r2,1
  8071d8:	e0bffd0d 	sth	r2,-12(fp)
  8071dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8071e0:	108004f0 	cmpltui	r2,r2,19
  8071e4:	103fea1e 	bne	r2,zero,807190 <__alt_mem_epcs_flash_controller_0+0xff7fe190>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8071e8:	e0bffe17 	ldw	r2,-8(fp)
  8071ec:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  8071f0:	e0bffe17 	ldw	r2,-8(fp)
  8071f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  8071f8:	e0bffe17 	ldw	r2,-8(fp)
  8071fc:	00c00fc4 	movi	r3,63
  807200:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  807204:	e0bffe17 	ldw	r2,-8(fp)
  807208:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80720c:	00802074 	movhi	r2,129
  807210:	1095a704 	addi	r2,r2,22172
  807214:	d0a04c15 	stw	r2,-32464(gp)
#endif
}
  807218:	0001883a 	nop
  80721c:	e037883a 	mov	sp,fp
  807220:	dfc00117 	ldw	ra,4(sp)
  807224:	df000017 	ldw	fp,0(sp)
  807228:	dec00204 	addi	sp,sp,8
  80722c:	f800283a 	ret

00807230 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  807230:	defffa04 	addi	sp,sp,-24
  807234:	dfc00515 	stw	ra,20(sp)
  807238:	df000415 	stw	fp,16(sp)
  80723c:	df000404 	addi	fp,sp,16
  807240:	e13ffe15 	stw	r4,-8(fp)
  807244:	2805883a 	mov	r2,r5
  807248:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80724c:	e0bffe17 	ldw	r2,-8(fp)
  807250:	10800217 	ldw	r2,8(r2)
  807254:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  807258:	e0bffd17 	ldw	r2,-12(fp)
  80725c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  807260:	e0bffd17 	ldw	r2,-12(fp)
  807264:	e0ffff0b 	ldhu	r3,-4(fp)
  807268:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80726c:	e0bffd17 	ldw	r2,-12(fp)
  807270:	10c00c03 	ldbu	r3,48(r2)
  807274:	00bff7c4 	movi	r2,-33
  807278:	1884703a 	and	r2,r3,r2
  80727c:	1007883a 	mov	r3,r2
  807280:	e0bffd17 	ldw	r2,-12(fp)
  807284:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  807288:	e0bffd17 	ldw	r2,-12(fp)
  80728c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  807290:	e0bffd17 	ldw	r2,-12(fp)
  807294:	10800c03 	ldbu	r2,48(r2)
  807298:	10803fcc 	andi	r2,r2,255
  80729c:	1000181e 	bne	r2,zero,807300 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  8072a0:	e0bffd17 	ldw	r2,-12(fp)
  8072a4:	10c00d83 	ldbu	r3,54(r2)
  8072a8:	d0a04703 	ldbu	r2,-32484(gp)
  8072ac:	1884b03a 	or	r2,r3,r2
  8072b0:	d0a04705 	stb	r2,-32484(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8072b4:	e0bffd17 	ldw	r2,-12(fp)
  8072b8:	10800d03 	ldbu	r2,52(r2)
  8072bc:	10c03fcc 	andi	r3,r2,255
  8072c0:	e0bffd17 	ldw	r2,-12(fp)
  8072c4:	10800d03 	ldbu	r2,52(r2)
  8072c8:	11003fcc 	andi	r4,r2,255
  8072cc:	d0a04744 	addi	r2,gp,-32483
  8072d0:	2085883a 	add	r2,r4,r2
  8072d4:	11000003 	ldbu	r4,0(r2)
  8072d8:	e0bffd17 	ldw	r2,-12(fp)
  8072dc:	10800d43 	ldbu	r2,53(r2)
  8072e0:	2084b03a 	or	r2,r4,r2
  8072e4:	1009883a 	mov	r4,r2
  8072e8:	d0a04744 	addi	r2,gp,-32483
  8072ec:	1885883a 	add	r2,r3,r2
  8072f0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  8072f4:	00800044 	movi	r2,1
  8072f8:	e0bffc05 	stb	r2,-16(fp)
  8072fc:	00000106 	br	807304 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  807300:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  807304:	e13ffe17 	ldw	r4,-8(fp)
  807308:	08073240 	call	807324 <OS_FlagUnlink>
    return (sched);
  80730c:	e0bffc03 	ldbu	r2,-16(fp)
}
  807310:	e037883a 	mov	sp,fp
  807314:	dfc00117 	ldw	ra,4(sp)
  807318:	df000017 	ldw	fp,0(sp)
  80731c:	dec00204 	addi	sp,sp,8
  807320:	f800283a 	ret

00807324 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  807324:	defffa04 	addi	sp,sp,-24
  807328:	df000515 	stw	fp,20(sp)
  80732c:	df000504 	addi	fp,sp,20
  807330:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  807334:	e0bfff17 	ldw	r2,-4(fp)
  807338:	10800117 	ldw	r2,4(r2)
  80733c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  807340:	e0bfff17 	ldw	r2,-4(fp)
  807344:	10800017 	ldw	r2,0(r2)
  807348:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80734c:	e0bffb17 	ldw	r2,-20(fp)
  807350:	10000b1e 	bne	r2,zero,807380 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  807354:	e0bfff17 	ldw	r2,-4(fp)
  807358:	10800317 	ldw	r2,12(r2)
  80735c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  807360:	e0bffd17 	ldw	r2,-12(fp)
  807364:	e0fffc17 	ldw	r3,-16(fp)
  807368:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80736c:	e0bffc17 	ldw	r2,-16(fp)
  807370:	10000b26 	beq	r2,zero,8073a0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  807374:	e0bffc17 	ldw	r2,-16(fp)
  807378:	10000115 	stw	zero,4(r2)
  80737c:	00000806 	br	8073a0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  807380:	e0bffb17 	ldw	r2,-20(fp)
  807384:	e0fffc17 	ldw	r3,-16(fp)
  807388:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80738c:	e0bffc17 	ldw	r2,-16(fp)
  807390:	10000326 	beq	r2,zero,8073a0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  807394:	e0bffc17 	ldw	r2,-16(fp)
  807398:	e0fffb17 	ldw	r3,-20(fp)
  80739c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  8073a0:	e0bfff17 	ldw	r2,-4(fp)
  8073a4:	10800217 	ldw	r2,8(r2)
  8073a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  8073ac:	e0bffe17 	ldw	r2,-8(fp)
  8073b0:	10000a15 	stw	zero,40(r2)
#endif
}
  8073b4:	0001883a 	nop
  8073b8:	e037883a 	mov	sp,fp
  8073bc:	df000017 	ldw	fp,0(sp)
  8073c0:	dec00104 	addi	sp,sp,4
  8073c4:	f800283a 	ret

008073c8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  8073c8:	defff404 	addi	sp,sp,-48
  8073cc:	df000b15 	stw	fp,44(sp)
  8073d0:	df000b04 	addi	fp,sp,44
  8073d4:	e13ffc15 	stw	r4,-16(fp)
  8073d8:	e17ffd15 	stw	r5,-12(fp)
  8073dc:	e1bffe15 	stw	r6,-8(fp)
  8073e0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8073e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8073e8:	e0bfff17 	ldw	r2,-4(fp)
  8073ec:	1000021e 	bne	r2,zero,8073f8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  8073f0:	0005883a 	mov	r2,zero
  8073f4:	00006506 	br	80758c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  8073f8:	e0bffc17 	ldw	r2,-16(fp)
  8073fc:	1000051e 	bne	r2,zero,807414 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  807400:	e0bfff17 	ldw	r2,-4(fp)
  807404:	00c01884 	movi	r3,98
  807408:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  80740c:	0005883a 	mov	r2,zero
  807410:	00005e06 	br	80758c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  807414:	e0bffc17 	ldw	r2,-16(fp)
  807418:	108000cc 	andi	r2,r2,3
  80741c:	10000526 	beq	r2,zero,807434 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  807420:	e0bfff17 	ldw	r2,-4(fp)
  807424:	00c01884 	movi	r3,98
  807428:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  80742c:	0005883a 	mov	r2,zero
  807430:	00005606 	br	80758c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  807434:	e0bffd17 	ldw	r2,-12(fp)
  807438:	108000a8 	cmpgeui	r2,r2,2
  80743c:	1000051e 	bne	r2,zero,807454 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  807440:	e0bfff17 	ldw	r2,-4(fp)
  807444:	00c016c4 	movi	r3,91
  807448:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  80744c:	0005883a 	mov	r2,zero
  807450:	00004e06 	br	80758c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  807454:	e0bffe17 	ldw	r2,-8(fp)
  807458:	10800128 	cmpgeui	r2,r2,4
  80745c:	1000051e 	bne	r2,zero,807474 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  807460:	e0bfff17 	ldw	r2,-4(fp)
  807464:	00c01704 	movi	r3,92
  807468:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  80746c:	0005883a 	mov	r2,zero
  807470:	00004606 	br	80758c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807474:	0005303a 	rdctl	r2,status
  807478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80747c:	e0fffb17 	ldw	r3,-20(fp)
  807480:	00bfff84 	movi	r2,-2
  807484:	1884703a 	and	r2,r3,r2
  807488:	1001703a 	wrctl	status,r2
  
  return context;
  80748c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807490:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  807494:	d0a04417 	ldw	r2,-32496(gp)
  807498:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80749c:	d0a04417 	ldw	r2,-32496(gp)
  8074a0:	10000326 	beq	r2,zero,8074b0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  8074a4:	d0a04417 	ldw	r2,-32496(gp)
  8074a8:	10800117 	ldw	r2,4(r2)
  8074ac:	d0a04415 	stw	r2,-32496(gp)
  8074b0:	e0bff817 	ldw	r2,-32(fp)
  8074b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8074b8:	e0bff917 	ldw	r2,-28(fp)
  8074bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  8074c0:	e0bffa17 	ldw	r2,-24(fp)
  8074c4:	1000051e 	bne	r2,zero,8074dc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  8074c8:	e0bfff17 	ldw	r2,-4(fp)
  8074cc:	00c01684 	movi	r3,90
  8074d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8074d4:	0005883a 	mov	r2,zero
  8074d8:	00002c06 	br	80758c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  8074dc:	e0bffc17 	ldw	r2,-16(fp)
  8074e0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  8074e4:	e0fffc17 	ldw	r3,-16(fp)
  8074e8:	e0bffe17 	ldw	r2,-8(fp)
  8074ec:	1885883a 	add	r2,r3,r2
  8074f0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  8074f4:	e03ff715 	stw	zero,-36(fp)
  8074f8:	00000c06 	br	80752c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  8074fc:	e0bff617 	ldw	r2,-40(fp)
  807500:	e0fff517 	ldw	r3,-44(fp)
  807504:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  807508:	e0bff517 	ldw	r2,-44(fp)
  80750c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  807510:	e0fff517 	ldw	r3,-44(fp)
  807514:	e0bffe17 	ldw	r2,-8(fp)
  807518:	1885883a 	add	r2,r3,r2
  80751c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  807520:	e0bff717 	ldw	r2,-36(fp)
  807524:	10800044 	addi	r2,r2,1
  807528:	e0bff715 	stw	r2,-36(fp)
  80752c:	e0bffd17 	ldw	r2,-12(fp)
  807530:	10bfffc4 	addi	r2,r2,-1
  807534:	e0fff717 	ldw	r3,-36(fp)
  807538:	18bff036 	bltu	r3,r2,8074fc <__alt_mem_epcs_flash_controller_0+0xff7fe4fc>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80753c:	e0bff617 	ldw	r2,-40(fp)
  807540:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  807544:	e0bffa17 	ldw	r2,-24(fp)
  807548:	e0fffc17 	ldw	r3,-16(fp)
  80754c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  807550:	e0bffa17 	ldw	r2,-24(fp)
  807554:	e0fffc17 	ldw	r3,-16(fp)
  807558:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80755c:	e0bffa17 	ldw	r2,-24(fp)
  807560:	e0fffd17 	ldw	r3,-12(fp)
  807564:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  807568:	e0bffa17 	ldw	r2,-24(fp)
  80756c:	e0fffd17 	ldw	r3,-12(fp)
  807570:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  807574:	e0bffa17 	ldw	r2,-24(fp)
  807578:	e0fffe17 	ldw	r3,-8(fp)
  80757c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  807580:	e0bfff17 	ldw	r2,-4(fp)
  807584:	10000005 	stb	zero,0(r2)
    return (pmem);
  807588:	e0bffa17 	ldw	r2,-24(fp)
}
  80758c:	e037883a 	mov	sp,fp
  807590:	df000017 	ldw	fp,0(sp)
  807594:	dec00104 	addi	sp,sp,4
  807598:	f800283a 	ret

0080759c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80759c:	defff804 	addi	sp,sp,-32
  8075a0:	df000715 	stw	fp,28(sp)
  8075a4:	df000704 	addi	fp,sp,28
  8075a8:	e13ffe15 	stw	r4,-8(fp)
  8075ac:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8075b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8075b4:	e0bfff17 	ldw	r2,-4(fp)
  8075b8:	1000021e 	bne	r2,zero,8075c4 <OSMemGet+0x28>
        return ((void *)0);
  8075bc:	0005883a 	mov	r2,zero
  8075c0:	00002e06 	br	80767c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  8075c4:	e0bffe17 	ldw	r2,-8(fp)
  8075c8:	1000051e 	bne	r2,zero,8075e0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8075cc:	e0bfff17 	ldw	r2,-4(fp)
  8075d0:	00c01804 	movi	r3,96
  8075d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8075d8:	0005883a 	mov	r2,zero
  8075dc:	00002706 	br	80767c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8075e0:	0005303a 	rdctl	r2,status
  8075e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8075e8:	e0fffd17 	ldw	r3,-12(fp)
  8075ec:	00bfff84 	movi	r2,-2
  8075f0:	1884703a 	and	r2,r3,r2
  8075f4:	1001703a 	wrctl	status,r2
  
  return context;
  8075f8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8075fc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  807600:	e0bffe17 	ldw	r2,-8(fp)
  807604:	10800417 	ldw	r2,16(r2)
  807608:	10001426 	beq	r2,zero,80765c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80760c:	e0bffe17 	ldw	r2,-8(fp)
  807610:	10800117 	ldw	r2,4(r2)
  807614:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  807618:	e0bffb17 	ldw	r2,-20(fp)
  80761c:	10c00017 	ldw	r3,0(r2)
  807620:	e0bffe17 	ldw	r2,-8(fp)
  807624:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  807628:	e0bffe17 	ldw	r2,-8(fp)
  80762c:	10800417 	ldw	r2,16(r2)
  807630:	10ffffc4 	addi	r3,r2,-1
  807634:	e0bffe17 	ldw	r2,-8(fp)
  807638:	10c00415 	stw	r3,16(r2)
  80763c:	e0bff917 	ldw	r2,-28(fp)
  807640:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807644:	e0bffa17 	ldw	r2,-24(fp)
  807648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80764c:	e0bfff17 	ldw	r2,-4(fp)
  807650:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  807654:	e0bffb17 	ldw	r2,-20(fp)
  807658:	00000806 	br	80767c <OSMemGet+0xe0>
  80765c:	e0bff917 	ldw	r2,-28(fp)
  807660:	e0bffc15 	stw	r2,-16(fp)
  807664:	e0bffc17 	ldw	r2,-16(fp)
  807668:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80766c:	e0bfff17 	ldw	r2,-4(fp)
  807670:	00c01744 	movi	r3,93
  807674:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  807678:	0005883a 	mov	r2,zero
}
  80767c:	e037883a 	mov	sp,fp
  807680:	df000017 	ldw	fp,0(sp)
  807684:	dec00104 	addi	sp,sp,4
  807688:	f800283a 	ret

0080768c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80768c:	defff704 	addi	sp,sp,-36
  807690:	dfc00815 	stw	ra,32(sp)
  807694:	df000715 	stw	fp,28(sp)
  807698:	df000704 	addi	fp,sp,28
  80769c:	e13ffd15 	stw	r4,-12(fp)
  8076a0:	e17ffe15 	stw	r5,-8(fp)
  8076a4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8076a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8076ac:	e0bfff17 	ldw	r2,-4(fp)
  8076b0:	1000021e 	bne	r2,zero,8076bc <OSMemNameGet+0x30>
        return (0);
  8076b4:	0005883a 	mov	r2,zero
  8076b8:	00002b06 	br	807768 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8076bc:	e0bffd17 	ldw	r2,-12(fp)
  8076c0:	1000051e 	bne	r2,zero,8076d8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8076c4:	e0bfff17 	ldw	r2,-4(fp)
  8076c8:	00c01804 	movi	r3,96
  8076cc:	10c00005 	stb	r3,0(r2)
        return (0);
  8076d0:	0005883a 	mov	r2,zero
  8076d4:	00002406 	br	807768 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8076d8:	e0bffe17 	ldw	r2,-8(fp)
  8076dc:	1000051e 	bne	r2,zero,8076f4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  8076e0:	e0bfff17 	ldw	r2,-4(fp)
  8076e4:	00c00304 	movi	r3,12
  8076e8:	10c00005 	stb	r3,0(r2)
        return (0);
  8076ec:	0005883a 	mov	r2,zero
  8076f0:	00001d06 	br	807768 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8076f4:	d0a04903 	ldbu	r2,-32476(gp)
  8076f8:	10803fcc 	andi	r2,r2,255
  8076fc:	10000526 	beq	r2,zero,807714 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  807700:	e0bfff17 	ldw	r2,-4(fp)
  807704:	00c00444 	movi	r3,17
  807708:	10c00005 	stb	r3,0(r2)
        return (0);
  80770c:	0005883a 	mov	r2,zero
  807710:	00001506 	br	807768 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807714:	0005303a 	rdctl	r2,status
  807718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80771c:	e0fffb17 	ldw	r3,-20(fp)
  807720:	00bfff84 	movi	r2,-2
  807724:	1884703a 	and	r2,r3,r2
  807728:	1001703a 	wrctl	status,r2
  
  return context;
  80772c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  807730:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  807734:	e0bffd17 	ldw	r2,-12(fp)
  807738:	10800504 	addi	r2,r2,20
  80773c:	100b883a 	mov	r5,r2
  807740:	e13ffe17 	ldw	r4,-8(fp)
  807744:	08055940 	call	805594 <OS_StrCopy>
  807748:	e0bffa05 	stb	r2,-24(fp)
  80774c:	e0bff917 	ldw	r2,-28(fp)
  807750:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807754:	e0bffc17 	ldw	r2,-16(fp)
  807758:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80775c:	e0bfff17 	ldw	r2,-4(fp)
  807760:	10000005 	stb	zero,0(r2)
    return (len);
  807764:	e0bffa03 	ldbu	r2,-24(fp)
}
  807768:	e037883a 	mov	sp,fp
  80776c:	dfc00117 	ldw	ra,4(sp)
  807770:	df000017 	ldw	fp,0(sp)
  807774:	dec00204 	addi	sp,sp,8
  807778:	f800283a 	ret

0080777c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80777c:	defff604 	addi	sp,sp,-40
  807780:	dfc00915 	stw	ra,36(sp)
  807784:	df000815 	stw	fp,32(sp)
  807788:	df000804 	addi	fp,sp,32
  80778c:	e13ffd15 	stw	r4,-12(fp)
  807790:	e17ffe15 	stw	r5,-8(fp)
  807794:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807798:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80779c:	e0bfff17 	ldw	r2,-4(fp)
  8077a0:	10003526 	beq	r2,zero,807878 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8077a4:	e0bffd17 	ldw	r2,-12(fp)
  8077a8:	1000041e 	bne	r2,zero,8077bc <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8077ac:	e0bfff17 	ldw	r2,-4(fp)
  8077b0:	00c01804 	movi	r3,96
  8077b4:	10c00005 	stb	r3,0(r2)
        return;
  8077b8:	00003006 	br	80787c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8077bc:	e0bffe17 	ldw	r2,-8(fp)
  8077c0:	1000041e 	bne	r2,zero,8077d4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  8077c4:	e0bfff17 	ldw	r2,-4(fp)
  8077c8:	00c00304 	movi	r3,12
  8077cc:	10c00005 	stb	r3,0(r2)
        return;
  8077d0:	00002a06 	br	80787c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8077d4:	d0a04903 	ldbu	r2,-32476(gp)
  8077d8:	10803fcc 	andi	r2,r2,255
  8077dc:	10000426 	beq	r2,zero,8077f0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8077e0:	e0bfff17 	ldw	r2,-4(fp)
  8077e4:	00c00484 	movi	r3,18
  8077e8:	10c00005 	stb	r3,0(r2)
        return;
  8077ec:	00002306 	br	80787c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8077f0:	0005303a 	rdctl	r2,status
  8077f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8077f8:	e0fffc17 	ldw	r3,-16(fp)
  8077fc:	00bfff84 	movi	r2,-2
  807800:	1884703a 	and	r2,r3,r2
  807804:	1001703a 	wrctl	status,r2
  
  return context;
  807808:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80780c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  807810:	e13ffe17 	ldw	r4,-8(fp)
  807814:	08056080 	call	805608 <OS_StrLen>
  807818:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80781c:	e0bffa03 	ldbu	r2,-24(fp)
  807820:	10800830 	cmpltui	r2,r2,32
  807824:	1000081e 	bne	r2,zero,807848 <OSMemNameSet+0xcc>
  807828:	e0bff817 	ldw	r2,-32(fp)
  80782c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807830:	e0bff917 	ldw	r2,-28(fp)
  807834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  807838:	e0bfff17 	ldw	r2,-4(fp)
  80783c:	00c018c4 	movi	r3,99
  807840:	10c00005 	stb	r3,0(r2)
        return;
  807844:	00000d06 	br	80787c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  807848:	e0bffd17 	ldw	r2,-12(fp)
  80784c:	10800504 	addi	r2,r2,20
  807850:	e17ffe17 	ldw	r5,-8(fp)
  807854:	1009883a 	mov	r4,r2
  807858:	08055940 	call	805594 <OS_StrCopy>
  80785c:	e0bff817 	ldw	r2,-32(fp)
  807860:	e0bffb15 	stw	r2,-20(fp)
  807864:	e0bffb17 	ldw	r2,-20(fp)
  807868:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80786c:	e0bfff17 	ldw	r2,-4(fp)
  807870:	10000005 	stb	zero,0(r2)
  807874:	00000106 	br	80787c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  807878:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80787c:	e037883a 	mov	sp,fp
  807880:	dfc00117 	ldw	ra,4(sp)
  807884:	df000017 	ldw	fp,0(sp)
  807888:	dec00204 	addi	sp,sp,8
  80788c:	f800283a 	ret

00807890 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  807890:	defff904 	addi	sp,sp,-28
  807894:	df000615 	stw	fp,24(sp)
  807898:	df000604 	addi	fp,sp,24
  80789c:	e13ffe15 	stw	r4,-8(fp)
  8078a0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8078a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8078a8:	e0bffe17 	ldw	r2,-8(fp)
  8078ac:	1000021e 	bne	r2,zero,8078b8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8078b0:	00801804 	movi	r2,96
  8078b4:	00002806 	br	807958 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  8078b8:	e0bfff17 	ldw	r2,-4(fp)
  8078bc:	1000021e 	bne	r2,zero,8078c8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  8078c0:	008017c4 	movi	r2,95
  8078c4:	00002406 	br	807958 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8078c8:	0005303a 	rdctl	r2,status
  8078cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8078d0:	e0fffd17 	ldw	r3,-12(fp)
  8078d4:	00bfff84 	movi	r2,-2
  8078d8:	1884703a 	and	r2,r3,r2
  8078dc:	1001703a 	wrctl	status,r2
  
  return context;
  8078e0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8078e4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  8078e8:	e0bffe17 	ldw	r2,-8(fp)
  8078ec:	10c00417 	ldw	r3,16(r2)
  8078f0:	e0bffe17 	ldw	r2,-8(fp)
  8078f4:	10800317 	ldw	r2,12(r2)
  8078f8:	18800636 	bltu	r3,r2,807914 <OSMemPut+0x84>
  8078fc:	e0bffa17 	ldw	r2,-24(fp)
  807900:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807904:	e0bffb17 	ldw	r2,-20(fp)
  807908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80790c:	00801784 	movi	r2,94
  807910:	00001106 	br	807958 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  807914:	e0bffe17 	ldw	r2,-8(fp)
  807918:	10c00117 	ldw	r3,4(r2)
  80791c:	e0bfff17 	ldw	r2,-4(fp)
  807920:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  807924:	e0bffe17 	ldw	r2,-8(fp)
  807928:	e0ffff17 	ldw	r3,-4(fp)
  80792c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  807930:	e0bffe17 	ldw	r2,-8(fp)
  807934:	10800417 	ldw	r2,16(r2)
  807938:	10c00044 	addi	r3,r2,1
  80793c:	e0bffe17 	ldw	r2,-8(fp)
  807940:	10c00415 	stw	r3,16(r2)
  807944:	e0bffa17 	ldw	r2,-24(fp)
  807948:	e0bffc15 	stw	r2,-16(fp)
  80794c:	e0bffc17 	ldw	r2,-16(fp)
  807950:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  807954:	0005883a 	mov	r2,zero
}
  807958:	e037883a 	mov	sp,fp
  80795c:	df000017 	ldw	fp,0(sp)
  807960:	dec00104 	addi	sp,sp,4
  807964:	f800283a 	ret

00807968 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  807968:	defffa04 	addi	sp,sp,-24
  80796c:	df000515 	stw	fp,20(sp)
  807970:	df000504 	addi	fp,sp,20
  807974:	e13ffe15 	stw	r4,-8(fp)
  807978:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80797c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  807980:	e0bffe17 	ldw	r2,-8(fp)
  807984:	1000021e 	bne	r2,zero,807990 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  807988:	00801804 	movi	r2,96
  80798c:	00002c06 	br	807a40 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  807990:	e0bfff17 	ldw	r2,-4(fp)
  807994:	1000021e 	bne	r2,zero,8079a0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  807998:	00801844 	movi	r2,97
  80799c:	00002806 	br	807a40 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8079a0:	0005303a 	rdctl	r2,status
  8079a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8079a8:	e0fffc17 	ldw	r3,-16(fp)
  8079ac:	00bfff84 	movi	r2,-2
  8079b0:	1884703a 	and	r2,r3,r2
  8079b4:	1001703a 	wrctl	status,r2
  
  return context;
  8079b8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8079bc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  8079c0:	e0bffe17 	ldw	r2,-8(fp)
  8079c4:	10c00017 	ldw	r3,0(r2)
  8079c8:	e0bfff17 	ldw	r2,-4(fp)
  8079cc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  8079d0:	e0bffe17 	ldw	r2,-8(fp)
  8079d4:	10c00117 	ldw	r3,4(r2)
  8079d8:	e0bfff17 	ldw	r2,-4(fp)
  8079dc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  8079e0:	e0bffe17 	ldw	r2,-8(fp)
  8079e4:	10c00217 	ldw	r3,8(r2)
  8079e8:	e0bfff17 	ldw	r2,-4(fp)
  8079ec:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  8079f0:	e0bffe17 	ldw	r2,-8(fp)
  8079f4:	10c00317 	ldw	r3,12(r2)
  8079f8:	e0bfff17 	ldw	r2,-4(fp)
  8079fc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  807a00:	e0bffe17 	ldw	r2,-8(fp)
  807a04:	10c00417 	ldw	r3,16(r2)
  807a08:	e0bfff17 	ldw	r2,-4(fp)
  807a0c:	10c00415 	stw	r3,16(r2)
  807a10:	e0bffb17 	ldw	r2,-20(fp)
  807a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807a18:	e0bffd17 	ldw	r2,-12(fp)
  807a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  807a20:	e0bfff17 	ldw	r2,-4(fp)
  807a24:	10c00317 	ldw	r3,12(r2)
  807a28:	e0bfff17 	ldw	r2,-4(fp)
  807a2c:	10800417 	ldw	r2,16(r2)
  807a30:	1887c83a 	sub	r3,r3,r2
  807a34:	e0bfff17 	ldw	r2,-4(fp)
  807a38:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  807a3c:	0005883a 	mov	r2,zero
}
  807a40:	e037883a 	mov	sp,fp
  807a44:	df000017 	ldw	fp,0(sp)
  807a48:	dec00104 	addi	sp,sp,4
  807a4c:	f800283a 	ret

00807a50 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  807a50:	defffc04 	addi	sp,sp,-16
  807a54:	dfc00315 	stw	ra,12(sp)
  807a58:	df000215 	stw	fp,8(sp)
  807a5c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  807a60:	01430c04 	movi	r5,3120
  807a64:	01002074 	movhi	r4,129
  807a68:	21168304 	addi	r4,r4,23052
  807a6c:	08053940 	call	805394 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  807a70:	00802074 	movhi	r2,129
  807a74:	10968304 	addi	r2,r2,23052
  807a78:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  807a7c:	e03fff0d 	sth	zero,-4(fp)
  807a80:	00001606 	br	807adc <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  807a84:	e0bfff0b 	ldhu	r2,-4(fp)
  807a88:	10800044 	addi	r2,r2,1
  807a8c:	01400d04 	movi	r5,52
  807a90:	1009883a 	mov	r4,r2
  807a94:	0802f380 	call	802f38 <__mulsi3>
  807a98:	1007883a 	mov	r3,r2
  807a9c:	00802074 	movhi	r2,129
  807aa0:	10968304 	addi	r2,r2,23052
  807aa4:	1887883a 	add	r3,r3,r2
  807aa8:	e0bffe17 	ldw	r2,-8(fp)
  807aac:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  807ab0:	e0bffe17 	ldw	r2,-8(fp)
  807ab4:	00c00fc4 	movi	r3,63
  807ab8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  807abc:	e0bffe17 	ldw	r2,-8(fp)
  807ac0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  807ac4:	e0bffe17 	ldw	r2,-8(fp)
  807ac8:	10800d04 	addi	r2,r2,52
  807acc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  807ad0:	e0bfff0b 	ldhu	r2,-4(fp)
  807ad4:	10800044 	addi	r2,r2,1
  807ad8:	e0bfff0d 	sth	r2,-4(fp)
  807adc:	e0bfff0b 	ldhu	r2,-4(fp)
  807ae0:	10800ef0 	cmpltui	r2,r2,59
  807ae4:	103fe71e 	bne	r2,zero,807a84 <__alt_mem_epcs_flash_controller_0+0xff7fea84>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  807ae8:	e0bffe17 	ldw	r2,-8(fp)
  807aec:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  807af0:	e0bffe17 	ldw	r2,-8(fp)
  807af4:	00c00fc4 	movi	r3,63
  807af8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  807afc:	e0bffe17 	ldw	r2,-8(fp)
  807b00:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  807b04:	00802074 	movhi	r2,129
  807b08:	10968304 	addi	r2,r2,23052
  807b0c:	d0a04415 	stw	r2,-32496(gp)
#endif
}
  807b10:	0001883a 	nop
  807b14:	e037883a 	mov	sp,fp
  807b18:	dfc00117 	ldw	ra,4(sp)
  807b1c:	df000017 	ldw	fp,0(sp)
  807b20:	dec00204 	addi	sp,sp,8
  807b24:	f800283a 	ret

00807b28 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  807b28:	defff804 	addi	sp,sp,-32
  807b2c:	df000715 	stw	fp,28(sp)
  807b30:	df000704 	addi	fp,sp,28
  807b34:	e13ffe15 	stw	r4,-8(fp)
  807b38:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807b3c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807b40:	e0bfff17 	ldw	r2,-4(fp)
  807b44:	1000021e 	bne	r2,zero,807b50 <OSQAccept+0x28>
        return ((void *)0);
  807b48:	0005883a 	mov	r2,zero
  807b4c:	00004206 	br	807c58 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  807b50:	e0bffe17 	ldw	r2,-8(fp)
  807b54:	1000051e 	bne	r2,zero,807b6c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  807b58:	e0bfff17 	ldw	r2,-4(fp)
  807b5c:	00c00104 	movi	r3,4
  807b60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  807b64:	0005883a 	mov	r2,zero
  807b68:	00003b06 	br	807c58 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  807b6c:	e0bffe17 	ldw	r2,-8(fp)
  807b70:	10800003 	ldbu	r2,0(r2)
  807b74:	10803fcc 	andi	r2,r2,255
  807b78:	108000a0 	cmpeqi	r2,r2,2
  807b7c:	1000051e 	bne	r2,zero,807b94 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  807b80:	e0bfff17 	ldw	r2,-4(fp)
  807b84:	00c00044 	movi	r3,1
  807b88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  807b8c:	0005883a 	mov	r2,zero
  807b90:	00003106 	br	807c58 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807b94:	0005303a 	rdctl	r2,status
  807b98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807b9c:	e0fffd17 	ldw	r3,-12(fp)
  807ba0:	00bfff84 	movi	r2,-2
  807ba4:	1884703a 	and	r2,r3,r2
  807ba8:	1001703a 	wrctl	status,r2
  
  return context;
  807bac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  807bb0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  807bb4:	e0bffe17 	ldw	r2,-8(fp)
  807bb8:	10800117 	ldw	r2,4(r2)
  807bbc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  807bc0:	e0bffc17 	ldw	r2,-16(fp)
  807bc4:	1080058b 	ldhu	r2,22(r2)
  807bc8:	10bfffcc 	andi	r2,r2,65535
  807bcc:	10001926 	beq	r2,zero,807c34 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  807bd0:	e0bffc17 	ldw	r2,-16(fp)
  807bd4:	10800417 	ldw	r2,16(r2)
  807bd8:	11000104 	addi	r4,r2,4
  807bdc:	e0fffc17 	ldw	r3,-16(fp)
  807be0:	19000415 	stw	r4,16(r3)
  807be4:	10800017 	ldw	r2,0(r2)
  807be8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  807bec:	e0bffc17 	ldw	r2,-16(fp)
  807bf0:	1080058b 	ldhu	r2,22(r2)
  807bf4:	10bfffc4 	addi	r2,r2,-1
  807bf8:	1007883a 	mov	r3,r2
  807bfc:	e0bffc17 	ldw	r2,-16(fp)
  807c00:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  807c04:	e0bffc17 	ldw	r2,-16(fp)
  807c08:	10c00417 	ldw	r3,16(r2)
  807c0c:	e0bffc17 	ldw	r2,-16(fp)
  807c10:	10800217 	ldw	r2,8(r2)
  807c14:	1880041e 	bne	r3,r2,807c28 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  807c18:	e0bffc17 	ldw	r2,-16(fp)
  807c1c:	10c00117 	ldw	r3,4(r2)
  807c20:	e0bffc17 	ldw	r2,-16(fp)
  807c24:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  807c28:	e0bfff17 	ldw	r2,-4(fp)
  807c2c:	10000005 	stb	zero,0(r2)
  807c30:	00000406 	br	807c44 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  807c34:	e0bfff17 	ldw	r2,-4(fp)
  807c38:	00c007c4 	movi	r3,31
  807c3c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  807c40:	e03ff915 	stw	zero,-28(fp)
  807c44:	e0bffa17 	ldw	r2,-24(fp)
  807c48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c4c:	e0bffb17 	ldw	r2,-20(fp)
  807c50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  807c54:	e0bff917 	ldw	r2,-28(fp)
}
  807c58:	e037883a 	mov	sp,fp
  807c5c:	df000017 	ldw	fp,0(sp)
  807c60:	dec00104 	addi	sp,sp,4
  807c64:	f800283a 	ret

00807c68 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  807c68:	defff404 	addi	sp,sp,-48
  807c6c:	dfc00b15 	stw	ra,44(sp)
  807c70:	df000a15 	stw	fp,40(sp)
  807c74:	df000a04 	addi	fp,sp,40
  807c78:	e13ffe15 	stw	r4,-8(fp)
  807c7c:	2805883a 	mov	r2,r5
  807c80:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c84:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  807c88:	d0a04903 	ldbu	r2,-32476(gp)
  807c8c:	10803fcc 	andi	r2,r2,255
  807c90:	10000226 	beq	r2,zero,807c9c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  807c94:	0005883a 	mov	r2,zero
  807c98:	00005906 	br	807e00 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c9c:	0005303a 	rdctl	r2,status
  807ca0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ca4:	e0fffd17 	ldw	r3,-12(fp)
  807ca8:	00bfff84 	movi	r2,-2
  807cac:	1884703a 	and	r2,r3,r2
  807cb0:	1001703a 	wrctl	status,r2
  
  return context;
  807cb4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  807cb8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  807cbc:	d0a04817 	ldw	r2,-32480(gp)
  807cc0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  807cc4:	d0a04817 	ldw	r2,-32480(gp)
  807cc8:	10000326 	beq	r2,zero,807cd8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  807ccc:	d0a04817 	ldw	r2,-32480(gp)
  807cd0:	10800117 	ldw	r2,4(r2)
  807cd4:	d0a04815 	stw	r2,-32480(gp)
  807cd8:	e0bff717 	ldw	r2,-36(fp)
  807cdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ce0:	e0bff817 	ldw	r2,-32(fp)
  807ce4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  807ce8:	e0bff617 	ldw	r2,-40(fp)
  807cec:	10004326 	beq	r2,zero,807dfc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807cf0:	0005303a 	rdctl	r2,status
  807cf4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807cf8:	e0fff917 	ldw	r3,-28(fp)
  807cfc:	00bfff84 	movi	r2,-2
  807d00:	1884703a 	and	r2,r3,r2
  807d04:	1001703a 	wrctl	status,r2
  
  return context;
  807d08:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  807d0c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  807d10:	d0a04617 	ldw	r2,-32488(gp)
  807d14:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  807d18:	e0bffb17 	ldw	r2,-20(fp)
  807d1c:	10002d26 	beq	r2,zero,807dd4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  807d20:	d0a04617 	ldw	r2,-32488(gp)
  807d24:	10800017 	ldw	r2,0(r2)
  807d28:	d0a04615 	stw	r2,-32488(gp)
  807d2c:	e0bff717 	ldw	r2,-36(fp)
  807d30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807d34:	e0bffa17 	ldw	r2,-24(fp)
  807d38:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  807d3c:	e0bffb17 	ldw	r2,-20(fp)
  807d40:	e0fffe17 	ldw	r3,-8(fp)
  807d44:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  807d48:	e0bfff0b 	ldhu	r2,-4(fp)
  807d4c:	1085883a 	add	r2,r2,r2
  807d50:	1085883a 	add	r2,r2,r2
  807d54:	1007883a 	mov	r3,r2
  807d58:	e0bffe17 	ldw	r2,-8(fp)
  807d5c:	10c7883a 	add	r3,r2,r3
  807d60:	e0bffb17 	ldw	r2,-20(fp)
  807d64:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  807d68:	e0bffb17 	ldw	r2,-20(fp)
  807d6c:	e0fffe17 	ldw	r3,-8(fp)
  807d70:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  807d74:	e0bffb17 	ldw	r2,-20(fp)
  807d78:	e0fffe17 	ldw	r3,-8(fp)
  807d7c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  807d80:	e0bffb17 	ldw	r2,-20(fp)
  807d84:	e0ffff0b 	ldhu	r3,-4(fp)
  807d88:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  807d8c:	e0bffb17 	ldw	r2,-20(fp)
  807d90:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  807d94:	e0bff617 	ldw	r2,-40(fp)
  807d98:	00c00084 	movi	r3,2
  807d9c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  807da0:	e0bff617 	ldw	r2,-40(fp)
  807da4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  807da8:	e0bff617 	ldw	r2,-40(fp)
  807dac:	e0fffb17 	ldw	r3,-20(fp)
  807db0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  807db4:	e0bff617 	ldw	r2,-40(fp)
  807db8:	00c00fc4 	movi	r3,63
  807dbc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  807dc0:	e0bff617 	ldw	r2,-40(fp)
  807dc4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  807dc8:	e13ff617 	ldw	r4,-40(fp)
  807dcc:	0804fb40 	call	804fb4 <OS_EventWaitListInit>
  807dd0:	00000a06 	br	807dfc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  807dd4:	d0e04817 	ldw	r3,-32480(gp)
  807dd8:	e0bff617 	ldw	r2,-40(fp)
  807ddc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  807de0:	e0bff617 	ldw	r2,-40(fp)
  807de4:	d0a04815 	stw	r2,-32480(gp)
  807de8:	e0bff717 	ldw	r2,-36(fp)
  807dec:	e0bffc15 	stw	r2,-16(fp)
  807df0:	e0bffc17 	ldw	r2,-16(fp)
  807df4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  807df8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  807dfc:	e0bff617 	ldw	r2,-40(fp)
}
  807e00:	e037883a 	mov	sp,fp
  807e04:	dfc00117 	ldw	ra,4(sp)
  807e08:	df000017 	ldw	fp,0(sp)
  807e0c:	dec00204 	addi	sp,sp,8
  807e10:	f800283a 	ret

00807e14 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  807e14:	defff204 	addi	sp,sp,-56
  807e18:	dfc00d15 	stw	ra,52(sp)
  807e1c:	df000c15 	stw	fp,48(sp)
  807e20:	df000c04 	addi	fp,sp,48
  807e24:	e13ffd15 	stw	r4,-12(fp)
  807e28:	2805883a 	mov	r2,r5
  807e2c:	e1bfff15 	stw	r6,-4(fp)
  807e30:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  807e34:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  807e38:	e0bfff17 	ldw	r2,-4(fp)
  807e3c:	1000021e 	bne	r2,zero,807e48 <OSQDel+0x34>
        return (pevent);
  807e40:	e0bffd17 	ldw	r2,-12(fp)
  807e44:	00008e06 	br	808080 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  807e48:	e0bffd17 	ldw	r2,-12(fp)
  807e4c:	1000051e 	bne	r2,zero,807e64 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  807e50:	e0bfff17 	ldw	r2,-4(fp)
  807e54:	00c00104 	movi	r3,4
  807e58:	10c00005 	stb	r3,0(r2)
        return (pevent);
  807e5c:	e0bffd17 	ldw	r2,-12(fp)
  807e60:	00008706 	br	808080 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  807e64:	e0bffd17 	ldw	r2,-12(fp)
  807e68:	10800003 	ldbu	r2,0(r2)
  807e6c:	10803fcc 	andi	r2,r2,255
  807e70:	108000a0 	cmpeqi	r2,r2,2
  807e74:	1000051e 	bne	r2,zero,807e8c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  807e78:	e0bfff17 	ldw	r2,-4(fp)
  807e7c:	00c00044 	movi	r3,1
  807e80:	10c00005 	stb	r3,0(r2)
        return (pevent);
  807e84:	e0bffd17 	ldw	r2,-12(fp)
  807e88:	00007d06 	br	808080 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  807e8c:	d0a04903 	ldbu	r2,-32476(gp)
  807e90:	10803fcc 	andi	r2,r2,255
  807e94:	10000526 	beq	r2,zero,807eac <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  807e98:	e0bfff17 	ldw	r2,-4(fp)
  807e9c:	00c003c4 	movi	r3,15
  807ea0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  807ea4:	e0bffd17 	ldw	r2,-12(fp)
  807ea8:	00007506 	br	808080 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807eac:	0005303a 	rdctl	r2,status
  807eb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807eb4:	e0fffc17 	ldw	r3,-16(fp)
  807eb8:	00bfff84 	movi	r2,-2
  807ebc:	1884703a 	and	r2,r3,r2
  807ec0:	1001703a 	wrctl	status,r2
  
  return context;
  807ec4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  807ec8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  807ecc:	e0bffd17 	ldw	r2,-12(fp)
  807ed0:	10800283 	ldbu	r2,10(r2)
  807ed4:	10803fcc 	andi	r2,r2,255
  807ed8:	10000326 	beq	r2,zero,807ee8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  807edc:	00800044 	movi	r2,1
  807ee0:	e0bff405 	stb	r2,-48(fp)
  807ee4:	00000106 	br	807eec <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  807ee8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  807eec:	e0bffe03 	ldbu	r2,-8(fp)
  807ef0:	10000326 	beq	r2,zero,807f00 <OSQDel+0xec>
  807ef4:	10800060 	cmpeqi	r2,r2,1
  807ef8:	1000301e 	bne	r2,zero,807fbc <OSQDel+0x1a8>
  807efc:	00005506 	br	808054 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  807f00:	e0bff403 	ldbu	r2,-48(fp)
  807f04:	10001e1e 	bne	r2,zero,807f80 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  807f08:	e0bffd17 	ldw	r2,-12(fp)
  807f0c:	00c00fc4 	movi	r3,63
  807f10:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  807f14:	e0bffd17 	ldw	r2,-12(fp)
  807f18:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  807f1c:	e0bffd17 	ldw	r2,-12(fp)
  807f20:	10800117 	ldw	r2,4(r2)
  807f24:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  807f28:	d0e04617 	ldw	r3,-32488(gp)
  807f2c:	e0bff817 	ldw	r2,-32(fp)
  807f30:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  807f34:	e0bff817 	ldw	r2,-32(fp)
  807f38:	d0a04615 	stw	r2,-32488(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  807f3c:	e0bffd17 	ldw	r2,-12(fp)
  807f40:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  807f44:	d0e04817 	ldw	r3,-32480(gp)
  807f48:	e0bffd17 	ldw	r2,-12(fp)
  807f4c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  807f50:	e0bffd17 	ldw	r2,-12(fp)
  807f54:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  807f58:	e0bffd17 	ldw	r2,-12(fp)
  807f5c:	d0a04815 	stw	r2,-32480(gp)
  807f60:	e0bff617 	ldw	r2,-40(fp)
  807f64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f68:	e0bff717 	ldw	r2,-36(fp)
  807f6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  807f70:	e0bfff17 	ldw	r2,-4(fp)
  807f74:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  807f78:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  807f7c:	00003f06 	br	80807c <OSQDel+0x268>
  807f80:	e0bff617 	ldw	r2,-40(fp)
  807f84:	e0bff915 	stw	r2,-28(fp)
  807f88:	e0bff917 	ldw	r2,-28(fp)
  807f8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  807f90:	e0bfff17 	ldw	r2,-4(fp)
  807f94:	00c01244 	movi	r3,73
  807f98:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  807f9c:	e0bffd17 	ldw	r2,-12(fp)
  807fa0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  807fa4:	00003506 	br	80807c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  807fa8:	000f883a 	mov	r7,zero
  807fac:	01800104 	movi	r6,4
  807fb0:	000b883a 	mov	r5,zero
  807fb4:	e13ffd17 	ldw	r4,-12(fp)
  807fb8:	0804a040 	call	804a04 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  807fbc:	e0bffd17 	ldw	r2,-12(fp)
  807fc0:	10800283 	ldbu	r2,10(r2)
  807fc4:	10803fcc 	andi	r2,r2,255
  807fc8:	103ff71e 	bne	r2,zero,807fa8 <__alt_mem_epcs_flash_controller_0+0xff7fefa8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  807fcc:	e0bffd17 	ldw	r2,-12(fp)
  807fd0:	00c00fc4 	movi	r3,63
  807fd4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  807fd8:	e0bffd17 	ldw	r2,-12(fp)
  807fdc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  807fe0:	e0bffd17 	ldw	r2,-12(fp)
  807fe4:	10800117 	ldw	r2,4(r2)
  807fe8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  807fec:	d0e04617 	ldw	r3,-32488(gp)
  807ff0:	e0bff817 	ldw	r2,-32(fp)
  807ff4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  807ff8:	e0bff817 	ldw	r2,-32(fp)
  807ffc:	d0a04615 	stw	r2,-32488(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  808000:	e0bffd17 	ldw	r2,-12(fp)
  808004:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  808008:	d0e04817 	ldw	r3,-32480(gp)
  80800c:	e0bffd17 	ldw	r2,-12(fp)
  808010:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  808014:	e0bffd17 	ldw	r2,-12(fp)
  808018:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80801c:	e0bffd17 	ldw	r2,-12(fp)
  808020:	d0a04815 	stw	r2,-32480(gp)
  808024:	e0bff617 	ldw	r2,-40(fp)
  808028:	e0bffa15 	stw	r2,-24(fp)
  80802c:	e0bffa17 	ldw	r2,-24(fp)
  808030:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  808034:	e0bff403 	ldbu	r2,-48(fp)
  808038:	10800058 	cmpnei	r2,r2,1
  80803c:	1000011e 	bne	r2,zero,808044 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  808040:	08054500 	call	805450 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  808044:	e0bfff17 	ldw	r2,-4(fp)
  808048:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80804c:	e03ff515 	stw	zero,-44(fp)
             break;
  808050:	00000a06 	br	80807c <OSQDel+0x268>
  808054:	e0bff617 	ldw	r2,-40(fp)
  808058:	e0bffb15 	stw	r2,-20(fp)
  80805c:	e0bffb17 	ldw	r2,-20(fp)
  808060:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  808064:	e0bfff17 	ldw	r2,-4(fp)
  808068:	00c001c4 	movi	r3,7
  80806c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  808070:	e0bffd17 	ldw	r2,-12(fp)
  808074:	e0bff515 	stw	r2,-44(fp)
             break;
  808078:	0001883a 	nop
    }
    return (pevent_return);
  80807c:	e0bff517 	ldw	r2,-44(fp)
}
  808080:	e037883a 	mov	sp,fp
  808084:	dfc00117 	ldw	ra,4(sp)
  808088:	df000017 	ldw	fp,0(sp)
  80808c:	dec00204 	addi	sp,sp,8
  808090:	f800283a 	ret

00808094 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  808094:	defffa04 	addi	sp,sp,-24
  808098:	df000515 	stw	fp,20(sp)
  80809c:	df000504 	addi	fp,sp,20
  8080a0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8080a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8080a8:	e0bfff17 	ldw	r2,-4(fp)
  8080ac:	1000021e 	bne	r2,zero,8080b8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  8080b0:	00800104 	movi	r2,4
  8080b4:	00002106 	br	80813c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8080b8:	e0bfff17 	ldw	r2,-4(fp)
  8080bc:	10800003 	ldbu	r2,0(r2)
  8080c0:	10803fcc 	andi	r2,r2,255
  8080c4:	108000a0 	cmpeqi	r2,r2,2
  8080c8:	1000021e 	bne	r2,zero,8080d4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  8080cc:	00800044 	movi	r2,1
  8080d0:	00001a06 	br	80813c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8080d4:	0005303a 	rdctl	r2,status
  8080d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8080dc:	e0fffd17 	ldw	r3,-12(fp)
  8080e0:	00bfff84 	movi	r2,-2
  8080e4:	1884703a 	and	r2,r3,r2
  8080e8:	1001703a 	wrctl	status,r2
  
  return context;
  8080ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8080f0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  8080f4:	e0bfff17 	ldw	r2,-4(fp)
  8080f8:	10800117 	ldw	r2,4(r2)
  8080fc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  808100:	e0bffc17 	ldw	r2,-16(fp)
  808104:	10c00117 	ldw	r3,4(r2)
  808108:	e0bffc17 	ldw	r2,-16(fp)
  80810c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  808110:	e0bffc17 	ldw	r2,-16(fp)
  808114:	10c00117 	ldw	r3,4(r2)
  808118:	e0bffc17 	ldw	r2,-16(fp)
  80811c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  808120:	e0bffc17 	ldw	r2,-16(fp)
  808124:	1000058d 	sth	zero,22(r2)
  808128:	e0bffb17 	ldw	r2,-20(fp)
  80812c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808130:	e0bffe17 	ldw	r2,-8(fp)
  808134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808138:	0005883a 	mov	r2,zero
}
  80813c:	e037883a 	mov	sp,fp
  808140:	df000017 	ldw	fp,0(sp)
  808144:	dec00104 	addi	sp,sp,4
  808148:	f800283a 	ret

0080814c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80814c:	defff304 	addi	sp,sp,-52
  808150:	dfc00c15 	stw	ra,48(sp)
  808154:	df000b15 	stw	fp,44(sp)
  808158:	df000b04 	addi	fp,sp,44
  80815c:	e13ffd15 	stw	r4,-12(fp)
  808160:	2805883a 	mov	r2,r5
  808164:	e1bfff15 	stw	r6,-4(fp)
  808168:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80816c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808170:	e0bfff17 	ldw	r2,-4(fp)
  808174:	1000021e 	bne	r2,zero,808180 <OSQPend+0x34>
        return ((void *)0);
  808178:	0005883a 	mov	r2,zero
  80817c:	00009106 	br	8083c4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  808180:	e0bffd17 	ldw	r2,-12(fp)
  808184:	1000051e 	bne	r2,zero,80819c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808188:	e0bfff17 	ldw	r2,-4(fp)
  80818c:	00c00104 	movi	r3,4
  808190:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808194:	0005883a 	mov	r2,zero
  808198:	00008a06 	br	8083c4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80819c:	e0bffd17 	ldw	r2,-12(fp)
  8081a0:	10800003 	ldbu	r2,0(r2)
  8081a4:	10803fcc 	andi	r2,r2,255
  8081a8:	108000a0 	cmpeqi	r2,r2,2
  8081ac:	1000051e 	bne	r2,zero,8081c4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8081b0:	e0bfff17 	ldw	r2,-4(fp)
  8081b4:	00c00044 	movi	r3,1
  8081b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8081bc:	0005883a 	mov	r2,zero
  8081c0:	00008006 	br	8083c4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  8081c4:	d0a04903 	ldbu	r2,-32476(gp)
  8081c8:	10803fcc 	andi	r2,r2,255
  8081cc:	10000526 	beq	r2,zero,8081e4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  8081d0:	e0bfff17 	ldw	r2,-4(fp)
  8081d4:	00c00084 	movi	r3,2
  8081d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8081dc:	0005883a 	mov	r2,zero
  8081e0:	00007806 	br	8083c4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  8081e4:	d0a03b03 	ldbu	r2,-32532(gp)
  8081e8:	10803fcc 	andi	r2,r2,255
  8081ec:	10000526 	beq	r2,zero,808204 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  8081f0:	e0bfff17 	ldw	r2,-4(fp)
  8081f4:	00c00344 	movi	r3,13
  8081f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8081fc:	0005883a 	mov	r2,zero
  808200:	00007006 	br	8083c4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808204:	0005303a 	rdctl	r2,status
  808208:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80820c:	e0fffc17 	ldw	r3,-16(fp)
  808210:	00bfff84 	movi	r2,-2
  808214:	1884703a 	and	r2,r3,r2
  808218:	1001703a 	wrctl	status,r2
  
  return context;
  80821c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808220:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  808224:	e0bffd17 	ldw	r2,-12(fp)
  808228:	10800117 	ldw	r2,4(r2)
  80822c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  808230:	e0bff817 	ldw	r2,-32(fp)
  808234:	1080058b 	ldhu	r2,22(r2)
  808238:	10bfffcc 	andi	r2,r2,65535
  80823c:	10001e26 	beq	r2,zero,8082b8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  808240:	e0bff817 	ldw	r2,-32(fp)
  808244:	10800417 	ldw	r2,16(r2)
  808248:	11000104 	addi	r4,r2,4
  80824c:	e0fff817 	ldw	r3,-32(fp)
  808250:	19000415 	stw	r4,16(r3)
  808254:	10800017 	ldw	r2,0(r2)
  808258:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80825c:	e0bff817 	ldw	r2,-32(fp)
  808260:	1080058b 	ldhu	r2,22(r2)
  808264:	10bfffc4 	addi	r2,r2,-1
  808268:	1007883a 	mov	r3,r2
  80826c:	e0bff817 	ldw	r2,-32(fp)
  808270:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  808274:	e0bff817 	ldw	r2,-32(fp)
  808278:	10c00417 	ldw	r3,16(r2)
  80827c:	e0bff817 	ldw	r2,-32(fp)
  808280:	10800217 	ldw	r2,8(r2)
  808284:	1880041e 	bne	r3,r2,808298 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  808288:	e0bff817 	ldw	r2,-32(fp)
  80828c:	10c00117 	ldw	r3,4(r2)
  808290:	e0bff817 	ldw	r2,-32(fp)
  808294:	10c00415 	stw	r3,16(r2)
  808298:	e0bff617 	ldw	r2,-40(fp)
  80829c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8082a0:	e0bff717 	ldw	r2,-36(fp)
  8082a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8082a8:	e0bfff17 	ldw	r2,-4(fp)
  8082ac:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  8082b0:	e0bff517 	ldw	r2,-44(fp)
  8082b4:	00004306 	br	8083c4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  8082b8:	d0a04a17 	ldw	r2,-32472(gp)
  8082bc:	d0e04a17 	ldw	r3,-32472(gp)
  8082c0:	18c00c03 	ldbu	r3,48(r3)
  8082c4:	18c00114 	ori	r3,r3,4
  8082c8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8082cc:	d0a04a17 	ldw	r2,-32472(gp)
  8082d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  8082d4:	d0a04a17 	ldw	r2,-32472(gp)
  8082d8:	e0fffe0b 	ldhu	r3,-8(fp)
  8082dc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  8082e0:	e13ffd17 	ldw	r4,-12(fp)
  8082e4:	0804b9c0 	call	804b9c <OS_EventTaskWait>
  8082e8:	e0bff617 	ldw	r2,-40(fp)
  8082ec:	e0bffb15 	stw	r2,-20(fp)
  8082f0:	e0bffb17 	ldw	r2,-20(fp)
  8082f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  8082f8:	08054500 	call	805450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8082fc:	0005303a 	rdctl	r2,status
  808300:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808304:	e0fff917 	ldw	r3,-28(fp)
  808308:	00bfff84 	movi	r2,-2
  80830c:	1884703a 	and	r2,r3,r2
  808310:	1001703a 	wrctl	status,r2
  
  return context;
  808314:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  808318:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80831c:	d0a04a17 	ldw	r2,-32472(gp)
  808320:	10800c43 	ldbu	r2,49(r2)
  808324:	10803fcc 	andi	r2,r2,255
  808328:	10000326 	beq	r2,zero,808338 <OSQPend+0x1ec>
  80832c:	108000a0 	cmpeqi	r2,r2,2
  808330:	1000071e 	bne	r2,zero,808350 <OSQPend+0x204>
  808334:	00000b06 	br	808364 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  808338:	d0a04a17 	ldw	r2,-32472(gp)
  80833c:	10800917 	ldw	r2,36(r2)
  808340:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  808344:	e0bfff17 	ldw	r2,-4(fp)
  808348:	10000005 	stb	zero,0(r2)
             break;
  80834c:	00000e06 	br	808388 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  808350:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  808354:	e0bfff17 	ldw	r2,-4(fp)
  808358:	00c00384 	movi	r3,14
  80835c:	10c00005 	stb	r3,0(r2)
             break;
  808360:	00000906 	br	808388 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  808364:	d0a04a17 	ldw	r2,-32472(gp)
  808368:	e17ffd17 	ldw	r5,-12(fp)
  80836c:	1009883a 	mov	r4,r2
  808370:	0804dfc0 	call	804dfc <OS_EventTaskRemove>
             pmsg = (void *)0;
  808374:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  808378:	e0bfff17 	ldw	r2,-4(fp)
  80837c:	00c00284 	movi	r3,10
  808380:	10c00005 	stb	r3,0(r2)
             break;
  808384:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  808388:	d0a04a17 	ldw	r2,-32472(gp)
  80838c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  808390:	d0a04a17 	ldw	r2,-32472(gp)
  808394:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  808398:	d0a04a17 	ldw	r2,-32472(gp)
  80839c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8083a0:	d0a04a17 	ldw	r2,-32472(gp)
  8083a4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8083a8:	d0a04a17 	ldw	r2,-32472(gp)
  8083ac:	10000915 	stw	zero,36(r2)
  8083b0:	e0bff617 	ldw	r2,-40(fp)
  8083b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8083b8:	e0bffa17 	ldw	r2,-24(fp)
  8083bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  8083c0:	e0bff517 	ldw	r2,-44(fp)
}
  8083c4:	e037883a 	mov	sp,fp
  8083c8:	dfc00117 	ldw	ra,4(sp)
  8083cc:	df000017 	ldw	fp,0(sp)
  8083d0:	dec00204 	addi	sp,sp,8
  8083d4:	f800283a 	ret

008083d8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8083d8:	defff604 	addi	sp,sp,-40
  8083dc:	dfc00915 	stw	ra,36(sp)
  8083e0:	df000815 	stw	fp,32(sp)
  8083e4:	df000804 	addi	fp,sp,32
  8083e8:	e13ffd15 	stw	r4,-12(fp)
  8083ec:	2805883a 	mov	r2,r5
  8083f0:	e1bfff15 	stw	r6,-4(fp)
  8083f4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8083f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8083fc:	e0bfff17 	ldw	r2,-4(fp)
  808400:	1000021e 	bne	r2,zero,80840c <OSQPendAbort+0x34>
        return (0);
  808404:	0005883a 	mov	r2,zero
  808408:	00004906 	br	808530 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80840c:	e0bffd17 	ldw	r2,-12(fp)
  808410:	1000051e 	bne	r2,zero,808428 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808414:	e0bfff17 	ldw	r2,-4(fp)
  808418:	00c00104 	movi	r3,4
  80841c:	10c00005 	stb	r3,0(r2)
        return (0);
  808420:	0005883a 	mov	r2,zero
  808424:	00004206 	br	808530 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  808428:	e0bffd17 	ldw	r2,-12(fp)
  80842c:	10800003 	ldbu	r2,0(r2)
  808430:	10803fcc 	andi	r2,r2,255
  808434:	108000a0 	cmpeqi	r2,r2,2
  808438:	1000051e 	bne	r2,zero,808450 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  80843c:	e0bfff17 	ldw	r2,-4(fp)
  808440:	00c00044 	movi	r3,1
  808444:	10c00005 	stb	r3,0(r2)
        return (0);
  808448:	0005883a 	mov	r2,zero
  80844c:	00003806 	br	808530 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808450:	0005303a 	rdctl	r2,status
  808454:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808458:	e0fffc17 	ldw	r3,-16(fp)
  80845c:	00bfff84 	movi	r2,-2
  808460:	1884703a 	and	r2,r3,r2
  808464:	1001703a 	wrctl	status,r2
  
  return context;
  808468:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80846c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  808470:	e0bffd17 	ldw	r2,-12(fp)
  808474:	10800283 	ldbu	r2,10(r2)
  808478:	10803fcc 	andi	r2,r2,255
  80847c:	10002526 	beq	r2,zero,808514 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  808480:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  808484:	e0bffe03 	ldbu	r2,-8(fp)
  808488:	10800060 	cmpeqi	r2,r2,1
  80848c:	10000e26 	beq	r2,zero,8084c8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  808490:	00000806 	br	8084b4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  808494:	01c00084 	movi	r7,2
  808498:	01800104 	movi	r6,4
  80849c:	000b883a 	mov	r5,zero
  8084a0:	e13ffd17 	ldw	r4,-12(fp)
  8084a4:	0804a040 	call	804a04 <OS_EventTaskRdy>
                     nbr_tasks++;
  8084a8:	e0bff803 	ldbu	r2,-32(fp)
  8084ac:	10800044 	addi	r2,r2,1
  8084b0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8084b4:	e0bffd17 	ldw	r2,-12(fp)
  8084b8:	10800283 	ldbu	r2,10(r2)
  8084bc:	10803fcc 	andi	r2,r2,255
  8084c0:	103ff41e 	bne	r2,zero,808494 <__alt_mem_epcs_flash_controller_0+0xff7ff494>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8084c4:	00000906 	br	8084ec <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8084c8:	01c00084 	movi	r7,2
  8084cc:	01800104 	movi	r6,4
  8084d0:	000b883a 	mov	r5,zero
  8084d4:	e13ffd17 	ldw	r4,-12(fp)
  8084d8:	0804a040 	call	804a04 <OS_EventTaskRdy>
                 nbr_tasks++;
  8084dc:	e0bff803 	ldbu	r2,-32(fp)
  8084e0:	10800044 	addi	r2,r2,1
  8084e4:	e0bff805 	stb	r2,-32(fp)
                 break;
  8084e8:	0001883a 	nop
  8084ec:	e0bff917 	ldw	r2,-28(fp)
  8084f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8084f4:	e0bffa17 	ldw	r2,-24(fp)
  8084f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  8084fc:	08054500 	call	805450 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  808500:	e0bfff17 	ldw	r2,-4(fp)
  808504:	00c00384 	movi	r3,14
  808508:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  80850c:	e0bff803 	ldbu	r2,-32(fp)
  808510:	00000706 	br	808530 <OSQPendAbort+0x158>
  808514:	e0bff917 	ldw	r2,-28(fp)
  808518:	e0bffb15 	stw	r2,-20(fp)
  80851c:	e0bffb17 	ldw	r2,-20(fp)
  808520:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808524:	e0bfff17 	ldw	r2,-4(fp)
  808528:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80852c:	0005883a 	mov	r2,zero
}
  808530:	e037883a 	mov	sp,fp
  808534:	dfc00117 	ldw	ra,4(sp)
  808538:	df000017 	ldw	fp,0(sp)
  80853c:	dec00204 	addi	sp,sp,8
  808540:	f800283a 	ret

00808544 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  808544:	defff604 	addi	sp,sp,-40
  808548:	dfc00915 	stw	ra,36(sp)
  80854c:	df000815 	stw	fp,32(sp)
  808550:	df000804 	addi	fp,sp,32
  808554:	e13ffe15 	stw	r4,-8(fp)
  808558:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80855c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  808560:	e0bffe17 	ldw	r2,-8(fp)
  808564:	1000021e 	bne	r2,zero,808570 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  808568:	00800104 	movi	r2,4
  80856c:	00004a06 	br	808698 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  808570:	e0bffe17 	ldw	r2,-8(fp)
  808574:	10800003 	ldbu	r2,0(r2)
  808578:	10803fcc 	andi	r2,r2,255
  80857c:	108000a0 	cmpeqi	r2,r2,2
  808580:	1000021e 	bne	r2,zero,80858c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  808584:	00800044 	movi	r2,1
  808588:	00004306 	br	808698 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80858c:	0005303a 	rdctl	r2,status
  808590:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808594:	e0fffd17 	ldw	r3,-12(fp)
  808598:	00bfff84 	movi	r2,-2
  80859c:	1884703a 	and	r2,r3,r2
  8085a0:	1001703a 	wrctl	status,r2
  
  return context;
  8085a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8085a8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  8085ac:	e0bffe17 	ldw	r2,-8(fp)
  8085b0:	10800283 	ldbu	r2,10(r2)
  8085b4:	10803fcc 	andi	r2,r2,255
  8085b8:	10000c26 	beq	r2,zero,8085ec <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8085bc:	000f883a 	mov	r7,zero
  8085c0:	01800104 	movi	r6,4
  8085c4:	e17fff17 	ldw	r5,-4(fp)
  8085c8:	e13ffe17 	ldw	r4,-8(fp)
  8085cc:	0804a040 	call	804a04 <OS_EventTaskRdy>
  8085d0:	e0bff817 	ldw	r2,-32(fp)
  8085d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8085d8:	e0bff917 	ldw	r2,-28(fp)
  8085dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  8085e0:	08054500 	call	805450 <OS_Sched>
        return (OS_ERR_NONE);
  8085e4:	0005883a 	mov	r2,zero
  8085e8:	00002b06 	br	808698 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  8085ec:	e0bffe17 	ldw	r2,-8(fp)
  8085f0:	10800117 	ldw	r2,4(r2)
  8085f4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  8085f8:	e0bffb17 	ldw	r2,-20(fp)
  8085fc:	10c0058b 	ldhu	r3,22(r2)
  808600:	e0bffb17 	ldw	r2,-20(fp)
  808604:	1080050b 	ldhu	r2,20(r2)
  808608:	18ffffcc 	andi	r3,r3,65535
  80860c:	10bfffcc 	andi	r2,r2,65535
  808610:	18800636 	bltu	r3,r2,80862c <OSQPost+0xe8>
  808614:	e0bff817 	ldw	r2,-32(fp)
  808618:	e0bffa15 	stw	r2,-24(fp)
  80861c:	e0bffa17 	ldw	r2,-24(fp)
  808620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808624:	00800784 	movi	r2,30
  808628:	00001b06 	br	808698 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80862c:	e0bffb17 	ldw	r2,-20(fp)
  808630:	10800317 	ldw	r2,12(r2)
  808634:	11000104 	addi	r4,r2,4
  808638:	e0fffb17 	ldw	r3,-20(fp)
  80863c:	19000315 	stw	r4,12(r3)
  808640:	e0ffff17 	ldw	r3,-4(fp)
  808644:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  808648:	e0bffb17 	ldw	r2,-20(fp)
  80864c:	1080058b 	ldhu	r2,22(r2)
  808650:	10800044 	addi	r2,r2,1
  808654:	1007883a 	mov	r3,r2
  808658:	e0bffb17 	ldw	r2,-20(fp)
  80865c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  808660:	e0bffb17 	ldw	r2,-20(fp)
  808664:	10c00317 	ldw	r3,12(r2)
  808668:	e0bffb17 	ldw	r2,-20(fp)
  80866c:	10800217 	ldw	r2,8(r2)
  808670:	1880041e 	bne	r3,r2,808684 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  808674:	e0bffb17 	ldw	r2,-20(fp)
  808678:	10c00117 	ldw	r3,4(r2)
  80867c:	e0bffb17 	ldw	r2,-20(fp)
  808680:	10c00315 	stw	r3,12(r2)
  808684:	e0bff817 	ldw	r2,-32(fp)
  808688:	e0bffc15 	stw	r2,-16(fp)
  80868c:	e0bffc17 	ldw	r2,-16(fp)
  808690:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808694:	0005883a 	mov	r2,zero
}
  808698:	e037883a 	mov	sp,fp
  80869c:	dfc00117 	ldw	ra,4(sp)
  8086a0:	df000017 	ldw	fp,0(sp)
  8086a4:	dec00204 	addi	sp,sp,8
  8086a8:	f800283a 	ret

008086ac <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8086ac:	defff604 	addi	sp,sp,-40
  8086b0:	dfc00915 	stw	ra,36(sp)
  8086b4:	df000815 	stw	fp,32(sp)
  8086b8:	df000804 	addi	fp,sp,32
  8086bc:	e13ffe15 	stw	r4,-8(fp)
  8086c0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8086c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8086c8:	e0bffe17 	ldw	r2,-8(fp)
  8086cc:	1000021e 	bne	r2,zero,8086d8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  8086d0:	00800104 	movi	r2,4
  8086d4:	00004c06 	br	808808 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8086d8:	e0bffe17 	ldw	r2,-8(fp)
  8086dc:	10800003 	ldbu	r2,0(r2)
  8086e0:	10803fcc 	andi	r2,r2,255
  8086e4:	108000a0 	cmpeqi	r2,r2,2
  8086e8:	1000021e 	bne	r2,zero,8086f4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  8086ec:	00800044 	movi	r2,1
  8086f0:	00004506 	br	808808 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8086f4:	0005303a 	rdctl	r2,status
  8086f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8086fc:	e0fffd17 	ldw	r3,-12(fp)
  808700:	00bfff84 	movi	r2,-2
  808704:	1884703a 	and	r2,r3,r2
  808708:	1001703a 	wrctl	status,r2
  
  return context;
  80870c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  808710:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  808714:	e0bffe17 	ldw	r2,-8(fp)
  808718:	10800283 	ldbu	r2,10(r2)
  80871c:	10803fcc 	andi	r2,r2,255
  808720:	10000c26 	beq	r2,zero,808754 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808724:	000f883a 	mov	r7,zero
  808728:	01800104 	movi	r6,4
  80872c:	e17fff17 	ldw	r5,-4(fp)
  808730:	e13ffe17 	ldw	r4,-8(fp)
  808734:	0804a040 	call	804a04 <OS_EventTaskRdy>
  808738:	e0bff817 	ldw	r2,-32(fp)
  80873c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808740:	e0bff917 	ldw	r2,-28(fp)
  808744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  808748:	08054500 	call	805450 <OS_Sched>
        return (OS_ERR_NONE);
  80874c:	0005883a 	mov	r2,zero
  808750:	00002d06 	br	808808 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  808754:	e0bffe17 	ldw	r2,-8(fp)
  808758:	10800117 	ldw	r2,4(r2)
  80875c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  808760:	e0bffb17 	ldw	r2,-20(fp)
  808764:	10c0058b 	ldhu	r3,22(r2)
  808768:	e0bffb17 	ldw	r2,-20(fp)
  80876c:	1080050b 	ldhu	r2,20(r2)
  808770:	18ffffcc 	andi	r3,r3,65535
  808774:	10bfffcc 	andi	r2,r2,65535
  808778:	18800636 	bltu	r3,r2,808794 <OSQPostFront+0xe8>
  80877c:	e0bff817 	ldw	r2,-32(fp)
  808780:	e0bffa15 	stw	r2,-24(fp)
  808784:	e0bffa17 	ldw	r2,-24(fp)
  808788:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80878c:	00800784 	movi	r2,30
  808790:	00001d06 	br	808808 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  808794:	e0bffb17 	ldw	r2,-20(fp)
  808798:	10c00417 	ldw	r3,16(r2)
  80879c:	e0bffb17 	ldw	r2,-20(fp)
  8087a0:	10800117 	ldw	r2,4(r2)
  8087a4:	1880041e 	bne	r3,r2,8087b8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  8087a8:	e0bffb17 	ldw	r2,-20(fp)
  8087ac:	10c00217 	ldw	r3,8(r2)
  8087b0:	e0bffb17 	ldw	r2,-20(fp)
  8087b4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  8087b8:	e0bffb17 	ldw	r2,-20(fp)
  8087bc:	10800417 	ldw	r2,16(r2)
  8087c0:	10ffff04 	addi	r3,r2,-4
  8087c4:	e0bffb17 	ldw	r2,-20(fp)
  8087c8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  8087cc:	e0bffb17 	ldw	r2,-20(fp)
  8087d0:	10800417 	ldw	r2,16(r2)
  8087d4:	e0ffff17 	ldw	r3,-4(fp)
  8087d8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8087dc:	e0bffb17 	ldw	r2,-20(fp)
  8087e0:	1080058b 	ldhu	r2,22(r2)
  8087e4:	10800044 	addi	r2,r2,1
  8087e8:	1007883a 	mov	r3,r2
  8087ec:	e0bffb17 	ldw	r2,-20(fp)
  8087f0:	10c0058d 	sth	r3,22(r2)
  8087f4:	e0bff817 	ldw	r2,-32(fp)
  8087f8:	e0bffc15 	stw	r2,-16(fp)
  8087fc:	e0bffc17 	ldw	r2,-16(fp)
  808800:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808804:	0005883a 	mov	r2,zero
}
  808808:	e037883a 	mov	sp,fp
  80880c:	dfc00117 	ldw	ra,4(sp)
  808810:	df000017 	ldw	fp,0(sp)
  808814:	dec00204 	addi	sp,sp,8
  808818:	f800283a 	ret

0080881c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  80881c:	defff504 	addi	sp,sp,-44
  808820:	dfc00a15 	stw	ra,40(sp)
  808824:	df000915 	stw	fp,36(sp)
  808828:	df000904 	addi	fp,sp,36
  80882c:	e13ffd15 	stw	r4,-12(fp)
  808830:	e17ffe15 	stw	r5,-8(fp)
  808834:	3005883a 	mov	r2,r6
  808838:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80883c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808840:	e0bffd17 	ldw	r2,-12(fp)
  808844:	1000021e 	bne	r2,zero,808850 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  808848:	00800104 	movi	r2,4
  80884c:	00007106 	br	808a14 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808850:	e0bffd17 	ldw	r2,-12(fp)
  808854:	10800003 	ldbu	r2,0(r2)
  808858:	10803fcc 	andi	r2,r2,255
  80885c:	108000a0 	cmpeqi	r2,r2,2
  808860:	1000021e 	bne	r2,zero,80886c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  808864:	00800044 	movi	r2,1
  808868:	00006a06 	br	808a14 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80886c:	0005303a 	rdctl	r2,status
  808870:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808874:	e0fffc17 	ldw	r3,-16(fp)
  808878:	00bfff84 	movi	r2,-2
  80887c:	1884703a 	and	r2,r3,r2
  808880:	1001703a 	wrctl	status,r2
  
  return context;
  808884:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808888:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  80888c:	e0bffd17 	ldw	r2,-12(fp)
  808890:	10800283 	ldbu	r2,10(r2)
  808894:	10803fcc 	andi	r2,r2,255
  808898:	10001d26 	beq	r2,zero,808910 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  80889c:	e0bfff03 	ldbu	r2,-4(fp)
  8088a0:	1080004c 	andi	r2,r2,1
  8088a4:	10000b26 	beq	r2,zero,8088d4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8088a8:	00000506 	br	8088c0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8088ac:	000f883a 	mov	r7,zero
  8088b0:	01800104 	movi	r6,4
  8088b4:	e17ffe17 	ldw	r5,-8(fp)
  8088b8:	e13ffd17 	ldw	r4,-12(fp)
  8088bc:	0804a040 	call	804a04 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8088c0:	e0bffd17 	ldw	r2,-12(fp)
  8088c4:	10800283 	ldbu	r2,10(r2)
  8088c8:	10803fcc 	andi	r2,r2,255
  8088cc:	103ff71e 	bne	r2,zero,8088ac <__alt_mem_epcs_flash_controller_0+0xff7ff8ac>
  8088d0:	00000506 	br	8088e8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8088d4:	000f883a 	mov	r7,zero
  8088d8:	01800104 	movi	r6,4
  8088dc:	e17ffe17 	ldw	r5,-8(fp)
  8088e0:	e13ffd17 	ldw	r4,-12(fp)
  8088e4:	0804a040 	call	804a04 <OS_EventTaskRdy>
  8088e8:	e0bff717 	ldw	r2,-36(fp)
  8088ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088f0:	e0bff817 	ldw	r2,-32(fp)
  8088f4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8088f8:	e0bfff03 	ldbu	r2,-4(fp)
  8088fc:	1080010c 	andi	r2,r2,4
  808900:	1000011e 	bne	r2,zero,808908 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  808904:	08054500 	call	805450 <OS_Sched>
        }
        return (OS_ERR_NONE);
  808908:	0005883a 	mov	r2,zero
  80890c:	00004106 	br	808a14 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  808910:	e0bffd17 	ldw	r2,-12(fp)
  808914:	10800117 	ldw	r2,4(r2)
  808918:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80891c:	e0bffa17 	ldw	r2,-24(fp)
  808920:	10c0058b 	ldhu	r3,22(r2)
  808924:	e0bffa17 	ldw	r2,-24(fp)
  808928:	1080050b 	ldhu	r2,20(r2)
  80892c:	18ffffcc 	andi	r3,r3,65535
  808930:	10bfffcc 	andi	r2,r2,65535
  808934:	18800636 	bltu	r3,r2,808950 <OSQPostOpt+0x134>
  808938:	e0bff717 	ldw	r2,-36(fp)
  80893c:	e0bff915 	stw	r2,-28(fp)
  808940:	e0bff917 	ldw	r2,-28(fp)
  808944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808948:	00800784 	movi	r2,30
  80894c:	00003106 	br	808a14 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  808950:	e0bfff03 	ldbu	r2,-4(fp)
  808954:	1080008c 	andi	r2,r2,2
  808958:	10001326 	beq	r2,zero,8089a8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  80895c:	e0bffa17 	ldw	r2,-24(fp)
  808960:	10c00417 	ldw	r3,16(r2)
  808964:	e0bffa17 	ldw	r2,-24(fp)
  808968:	10800117 	ldw	r2,4(r2)
  80896c:	1880041e 	bne	r3,r2,808980 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  808970:	e0bffa17 	ldw	r2,-24(fp)
  808974:	10c00217 	ldw	r3,8(r2)
  808978:	e0bffa17 	ldw	r2,-24(fp)
  80897c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  808980:	e0bffa17 	ldw	r2,-24(fp)
  808984:	10800417 	ldw	r2,16(r2)
  808988:	10ffff04 	addi	r3,r2,-4
  80898c:	e0bffa17 	ldw	r2,-24(fp)
  808990:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  808994:	e0bffa17 	ldw	r2,-24(fp)
  808998:	10800417 	ldw	r2,16(r2)
  80899c:	e0fffe17 	ldw	r3,-8(fp)
  8089a0:	10c00015 	stw	r3,0(r2)
  8089a4:	00001006 	br	8089e8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  8089a8:	e0bffa17 	ldw	r2,-24(fp)
  8089ac:	10800317 	ldw	r2,12(r2)
  8089b0:	11000104 	addi	r4,r2,4
  8089b4:	e0fffa17 	ldw	r3,-24(fp)
  8089b8:	19000315 	stw	r4,12(r3)
  8089bc:	e0fffe17 	ldw	r3,-8(fp)
  8089c0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  8089c4:	e0bffa17 	ldw	r2,-24(fp)
  8089c8:	10c00317 	ldw	r3,12(r2)
  8089cc:	e0bffa17 	ldw	r2,-24(fp)
  8089d0:	10800217 	ldw	r2,8(r2)
  8089d4:	1880041e 	bne	r3,r2,8089e8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  8089d8:	e0bffa17 	ldw	r2,-24(fp)
  8089dc:	10c00117 	ldw	r3,4(r2)
  8089e0:	e0bffa17 	ldw	r2,-24(fp)
  8089e4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8089e8:	e0bffa17 	ldw	r2,-24(fp)
  8089ec:	1080058b 	ldhu	r2,22(r2)
  8089f0:	10800044 	addi	r2,r2,1
  8089f4:	1007883a 	mov	r3,r2
  8089f8:	e0bffa17 	ldw	r2,-24(fp)
  8089fc:	10c0058d 	sth	r3,22(r2)
  808a00:	e0bff717 	ldw	r2,-36(fp)
  808a04:	e0bffb15 	stw	r2,-20(fp)
  808a08:	e0bffb17 	ldw	r2,-20(fp)
  808a0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808a10:	0005883a 	mov	r2,zero
}
  808a14:	e037883a 	mov	sp,fp
  808a18:	dfc00117 	ldw	ra,4(sp)
  808a1c:	df000017 	ldw	fp,0(sp)
  808a20:	dec00204 	addi	sp,sp,8
  808a24:	f800283a 	ret

00808a28 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  808a28:	defff604 	addi	sp,sp,-40
  808a2c:	df000915 	stw	fp,36(sp)
  808a30:	df000904 	addi	fp,sp,36
  808a34:	e13ffe15 	stw	r4,-8(fp)
  808a38:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  808a3c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  808a40:	e0bffe17 	ldw	r2,-8(fp)
  808a44:	1000021e 	bne	r2,zero,808a50 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  808a48:	00800104 	movi	r2,4
  808a4c:	00004906 	br	808b74 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  808a50:	e0bfff17 	ldw	r2,-4(fp)
  808a54:	1000021e 	bne	r2,zero,808a60 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  808a58:	00800244 	movi	r2,9
  808a5c:	00004506 	br	808b74 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  808a60:	e0bffe17 	ldw	r2,-8(fp)
  808a64:	10800003 	ldbu	r2,0(r2)
  808a68:	10803fcc 	andi	r2,r2,255
  808a6c:	108000a0 	cmpeqi	r2,r2,2
  808a70:	1000021e 	bne	r2,zero,808a7c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  808a74:	00800044 	movi	r2,1
  808a78:	00003e06 	br	808b74 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a7c:	0005303a 	rdctl	r2,status
  808a80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a84:	e0fffd17 	ldw	r3,-12(fp)
  808a88:	00bfff84 	movi	r2,-2
  808a8c:	1884703a 	and	r2,r3,r2
  808a90:	1001703a 	wrctl	status,r2
  
  return context;
  808a94:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  808a98:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  808a9c:	e0bffe17 	ldw	r2,-8(fp)
  808aa0:	10c00283 	ldbu	r3,10(r2)
  808aa4:	e0bfff17 	ldw	r2,-4(fp)
  808aa8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  808aac:	e0bffe17 	ldw	r2,-8(fp)
  808ab0:	108002c4 	addi	r2,r2,11
  808ab4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  808ab8:	e0bfff17 	ldw	r2,-4(fp)
  808abc:	10800204 	addi	r2,r2,8
  808ac0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  808ac4:	e03ff705 	stb	zero,-36(fp)
  808ac8:	00000b06 	br	808af8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  808acc:	e0bff917 	ldw	r2,-28(fp)
  808ad0:	10c00044 	addi	r3,r2,1
  808ad4:	e0fff915 	stw	r3,-28(fp)
  808ad8:	e0fff817 	ldw	r3,-32(fp)
  808adc:	19000044 	addi	r4,r3,1
  808ae0:	e13ff815 	stw	r4,-32(fp)
  808ae4:	18c00003 	ldbu	r3,0(r3)
  808ae8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  808aec:	e0bff703 	ldbu	r2,-36(fp)
  808af0:	10800044 	addi	r2,r2,1
  808af4:	e0bff705 	stb	r2,-36(fp)
  808af8:	e0bff703 	ldbu	r2,-36(fp)
  808afc:	108000f0 	cmpltui	r2,r2,3
  808b00:	103ff21e 	bne	r2,zero,808acc <__alt_mem_epcs_flash_controller_0+0xff7ffacc>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  808b04:	e0bffe17 	ldw	r2,-8(fp)
  808b08:	10800117 	ldw	r2,4(r2)
  808b0c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  808b10:	e0bffc17 	ldw	r2,-16(fp)
  808b14:	1080058b 	ldhu	r2,22(r2)
  808b18:	10bfffcc 	andi	r2,r2,65535
  808b1c:	10000626 	beq	r2,zero,808b38 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  808b20:	e0bffc17 	ldw	r2,-16(fp)
  808b24:	10800417 	ldw	r2,16(r2)
  808b28:	10c00017 	ldw	r3,0(r2)
  808b2c:	e0bfff17 	ldw	r2,-4(fp)
  808b30:	10c00015 	stw	r3,0(r2)
  808b34:	00000206 	br	808b40 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  808b38:	e0bfff17 	ldw	r2,-4(fp)
  808b3c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  808b40:	e0bffc17 	ldw	r2,-16(fp)
  808b44:	10c0058b 	ldhu	r3,22(r2)
  808b48:	e0bfff17 	ldw	r2,-4(fp)
  808b4c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  808b50:	e0bffc17 	ldw	r2,-16(fp)
  808b54:	10c0050b 	ldhu	r3,20(r2)
  808b58:	e0bfff17 	ldw	r2,-4(fp)
  808b5c:	10c0018d 	sth	r3,6(r2)
  808b60:	e0bffa17 	ldw	r2,-24(fp)
  808b64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b68:	e0bffb17 	ldw	r2,-20(fp)
  808b6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808b70:	0005883a 	mov	r2,zero
}
  808b74:	e037883a 	mov	sp,fp
  808b78:	df000017 	ldw	fp,0(sp)
  808b7c:	dec00104 	addi	sp,sp,4
  808b80:	f800283a 	ret

00808b84 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  808b84:	defffb04 	addi	sp,sp,-20
  808b88:	dfc00415 	stw	ra,16(sp)
  808b8c:	df000315 	stw	fp,12(sp)
  808b90:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  808b94:	01407804 	movi	r5,480
  808b98:	01002074 	movhi	r4,129
  808b9c:	211b8f04 	addi	r4,r4,28220
  808ba0:	08053940 	call	805394 <OS_MemClr>
    pq1 = &OSQTbl[0];
  808ba4:	00802074 	movhi	r2,129
  808ba8:	109b8f04 	addi	r2,r2,28220
  808bac:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  808bb0:	00802074 	movhi	r2,129
  808bb4:	109b9504 	addi	r2,r2,28244
  808bb8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  808bbc:	e03ffd0d 	sth	zero,-12(fp)
  808bc0:	00000c06 	br	808bf4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  808bc4:	e0bffe17 	ldw	r2,-8(fp)
  808bc8:	e0ffff17 	ldw	r3,-4(fp)
  808bcc:	10c00015 	stw	r3,0(r2)
        pq1++;
  808bd0:	e0bffe17 	ldw	r2,-8(fp)
  808bd4:	10800604 	addi	r2,r2,24
  808bd8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  808bdc:	e0bfff17 	ldw	r2,-4(fp)
  808be0:	10800604 	addi	r2,r2,24
  808be4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  808be8:	e0bffd0b 	ldhu	r2,-12(fp)
  808bec:	10800044 	addi	r2,r2,1
  808bf0:	e0bffd0d 	sth	r2,-12(fp)
  808bf4:	e0bffd0b 	ldhu	r2,-12(fp)
  808bf8:	108004f0 	cmpltui	r2,r2,19
  808bfc:	103ff11e 	bne	r2,zero,808bc4 <__alt_mem_epcs_flash_controller_0+0xff7ffbc4>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  808c00:	e0bffe17 	ldw	r2,-8(fp)
  808c04:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  808c08:	00802074 	movhi	r2,129
  808c0c:	109b8f04 	addi	r2,r2,28220
  808c10:	d0a04615 	stw	r2,-32488(gp)
#endif
}
  808c14:	0001883a 	nop
  808c18:	e037883a 	mov	sp,fp
  808c1c:	dfc00117 	ldw	ra,4(sp)
  808c20:	df000017 	ldw	fp,0(sp)
  808c24:	dec00204 	addi	sp,sp,8
  808c28:	f800283a 	ret

00808c2c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  808c2c:	defffa04 	addi	sp,sp,-24
  808c30:	df000515 	stw	fp,20(sp)
  808c34:	df000504 	addi	fp,sp,20
  808c38:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808c3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808c40:	e0bfff17 	ldw	r2,-4(fp)
  808c44:	1000021e 	bne	r2,zero,808c50 <OSSemAccept+0x24>
        return (0);
  808c48:	0005883a 	mov	r2,zero
  808c4c:	00001f06 	br	808ccc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  808c50:	e0bfff17 	ldw	r2,-4(fp)
  808c54:	10800003 	ldbu	r2,0(r2)
  808c58:	10803fcc 	andi	r2,r2,255
  808c5c:	108000e0 	cmpeqi	r2,r2,3
  808c60:	1000021e 	bne	r2,zero,808c6c <OSSemAccept+0x40>
        return (0);
  808c64:	0005883a 	mov	r2,zero
  808c68:	00001806 	br	808ccc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808c6c:	0005303a 	rdctl	r2,status
  808c70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808c74:	e0fffe17 	ldw	r3,-8(fp)
  808c78:	00bfff84 	movi	r2,-2
  808c7c:	1884703a 	and	r2,r3,r2
  808c80:	1001703a 	wrctl	status,r2
  
  return context;
  808c84:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  808c88:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  808c8c:	e0bfff17 	ldw	r2,-4(fp)
  808c90:	1080020b 	ldhu	r2,8(r2)
  808c94:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  808c98:	e0bffd0b 	ldhu	r2,-12(fp)
  808c9c:	10000626 	beq	r2,zero,808cb8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  808ca0:	e0bfff17 	ldw	r2,-4(fp)
  808ca4:	1080020b 	ldhu	r2,8(r2)
  808ca8:	10bfffc4 	addi	r2,r2,-1
  808cac:	1007883a 	mov	r3,r2
  808cb0:	e0bfff17 	ldw	r2,-4(fp)
  808cb4:	10c0020d 	sth	r3,8(r2)
  808cb8:	e0bffb17 	ldw	r2,-20(fp)
  808cbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808cc0:	e0bffc17 	ldw	r2,-16(fp)
  808cc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  808cc8:	e0bffd0b 	ldhu	r2,-12(fp)
}
  808ccc:	e037883a 	mov	sp,fp
  808cd0:	df000017 	ldw	fp,0(sp)
  808cd4:	dec00104 	addi	sp,sp,4
  808cd8:	f800283a 	ret

00808cdc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  808cdc:	defff904 	addi	sp,sp,-28
  808ce0:	dfc00615 	stw	ra,24(sp)
  808ce4:	df000515 	stw	fp,20(sp)
  808ce8:	df000504 	addi	fp,sp,20
  808cec:	2005883a 	mov	r2,r4
  808cf0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808cf4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  808cf8:	d0a04903 	ldbu	r2,-32476(gp)
  808cfc:	10803fcc 	andi	r2,r2,255
  808d00:	10000226 	beq	r2,zero,808d0c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  808d04:	0005883a 	mov	r2,zero
  808d08:	00002506 	br	808da0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808d0c:	0005303a 	rdctl	r2,status
  808d10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808d14:	e0fffe17 	ldw	r3,-8(fp)
  808d18:	00bfff84 	movi	r2,-2
  808d1c:	1884703a 	and	r2,r3,r2
  808d20:	1001703a 	wrctl	status,r2
  
  return context;
  808d24:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  808d28:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  808d2c:	d0a04817 	ldw	r2,-32480(gp)
  808d30:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  808d34:	d0a04817 	ldw	r2,-32480(gp)
  808d38:	10000326 	beq	r2,zero,808d48 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  808d3c:	d0a04817 	ldw	r2,-32480(gp)
  808d40:	10800117 	ldw	r2,4(r2)
  808d44:	d0a04815 	stw	r2,-32480(gp)
  808d48:	e0bffb17 	ldw	r2,-20(fp)
  808d4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808d50:	e0bffc17 	ldw	r2,-16(fp)
  808d54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  808d58:	e0bffd17 	ldw	r2,-12(fp)
  808d5c:	10000f26 	beq	r2,zero,808d9c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  808d60:	e0bffd17 	ldw	r2,-12(fp)
  808d64:	00c000c4 	movi	r3,3
  808d68:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  808d6c:	e0bffd17 	ldw	r2,-12(fp)
  808d70:	e0ffff0b 	ldhu	r3,-4(fp)
  808d74:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  808d78:	e0bffd17 	ldw	r2,-12(fp)
  808d7c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  808d80:	e0bffd17 	ldw	r2,-12(fp)
  808d84:	00c00fc4 	movi	r3,63
  808d88:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  808d8c:	e0bffd17 	ldw	r2,-12(fp)
  808d90:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  808d94:	e13ffd17 	ldw	r4,-12(fp)
  808d98:	0804fb40 	call	804fb4 <OS_EventWaitListInit>
    }
    return (pevent);
  808d9c:	e0bffd17 	ldw	r2,-12(fp)
}
  808da0:	e037883a 	mov	sp,fp
  808da4:	dfc00117 	ldw	ra,4(sp)
  808da8:	df000017 	ldw	fp,0(sp)
  808dac:	dec00204 	addi	sp,sp,8
  808db0:	f800283a 	ret

00808db4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  808db4:	defff304 	addi	sp,sp,-52
  808db8:	dfc00c15 	stw	ra,48(sp)
  808dbc:	df000b15 	stw	fp,44(sp)
  808dc0:	df000b04 	addi	fp,sp,44
  808dc4:	e13ffd15 	stw	r4,-12(fp)
  808dc8:	2805883a 	mov	r2,r5
  808dcc:	e1bfff15 	stw	r6,-4(fp)
  808dd0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808dd4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  808dd8:	e0bfff17 	ldw	r2,-4(fp)
  808ddc:	1000021e 	bne	r2,zero,808de8 <OSSemDel+0x34>
        return (pevent);
  808de0:	e0bffd17 	ldw	r2,-12(fp)
  808de4:	00007e06 	br	808fe0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  808de8:	e0bffd17 	ldw	r2,-12(fp)
  808dec:	1000051e 	bne	r2,zero,808e04 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808df0:	e0bfff17 	ldw	r2,-4(fp)
  808df4:	00c00104 	movi	r3,4
  808df8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808dfc:	e0bffd17 	ldw	r2,-12(fp)
  808e00:	00007706 	br	808fe0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  808e04:	e0bffd17 	ldw	r2,-12(fp)
  808e08:	10800003 	ldbu	r2,0(r2)
  808e0c:	10803fcc 	andi	r2,r2,255
  808e10:	108000e0 	cmpeqi	r2,r2,3
  808e14:	1000051e 	bne	r2,zero,808e2c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  808e18:	e0bfff17 	ldw	r2,-4(fp)
  808e1c:	00c00044 	movi	r3,1
  808e20:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808e24:	e0bffd17 	ldw	r2,-12(fp)
  808e28:	00006d06 	br	808fe0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  808e2c:	d0a04903 	ldbu	r2,-32476(gp)
  808e30:	10803fcc 	andi	r2,r2,255
  808e34:	10000526 	beq	r2,zero,808e4c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  808e38:	e0bfff17 	ldw	r2,-4(fp)
  808e3c:	00c003c4 	movi	r3,15
  808e40:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808e44:	e0bffd17 	ldw	r2,-12(fp)
  808e48:	00006506 	br	808fe0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808e4c:	0005303a 	rdctl	r2,status
  808e50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e54:	e0fffc17 	ldw	r3,-16(fp)
  808e58:	00bfff84 	movi	r2,-2
  808e5c:	1884703a 	and	r2,r3,r2
  808e60:	1001703a 	wrctl	status,r2
  
  return context;
  808e64:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808e68:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  808e6c:	e0bffd17 	ldw	r2,-12(fp)
  808e70:	10800283 	ldbu	r2,10(r2)
  808e74:	10803fcc 	andi	r2,r2,255
  808e78:	10000326 	beq	r2,zero,808e88 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  808e7c:	00800044 	movi	r2,1
  808e80:	e0bff505 	stb	r2,-44(fp)
  808e84:	00000106 	br	808e8c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  808e88:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  808e8c:	e0bffe03 	ldbu	r2,-8(fp)
  808e90:	10000326 	beq	r2,zero,808ea0 <OSSemDel+0xec>
  808e94:	10800060 	cmpeqi	r2,r2,1
  808e98:	1000281e 	bne	r2,zero,808f3c <OSSemDel+0x188>
  808e9c:	00004506 	br	808fb4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  808ea0:	e0bff503 	ldbu	r2,-44(fp)
  808ea4:	1000161e 	bne	r2,zero,808f00 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  808ea8:	e0bffd17 	ldw	r2,-12(fp)
  808eac:	00c00fc4 	movi	r3,63
  808eb0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  808eb4:	e0bffd17 	ldw	r2,-12(fp)
  808eb8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  808ebc:	e0bffd17 	ldw	r2,-12(fp)
  808ec0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  808ec4:	d0e04817 	ldw	r3,-32480(gp)
  808ec8:	e0bffd17 	ldw	r2,-12(fp)
  808ecc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  808ed0:	e0bffd17 	ldw	r2,-12(fp)
  808ed4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  808ed8:	e0bffd17 	ldw	r2,-12(fp)
  808edc:	d0a04815 	stw	r2,-32480(gp)
  808ee0:	e0bff717 	ldw	r2,-36(fp)
  808ee4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808ee8:	e0bff817 	ldw	r2,-32(fp)
  808eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  808ef0:	e0bfff17 	ldw	r2,-4(fp)
  808ef4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  808ef8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  808efc:	00003706 	br	808fdc <OSSemDel+0x228>
  808f00:	e0bff717 	ldw	r2,-36(fp)
  808f04:	e0bff915 	stw	r2,-28(fp)
  808f08:	e0bff917 	ldw	r2,-28(fp)
  808f0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  808f10:	e0bfff17 	ldw	r2,-4(fp)
  808f14:	00c01244 	movi	r3,73
  808f18:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  808f1c:	e0bffd17 	ldw	r2,-12(fp)
  808f20:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  808f24:	00002d06 	br	808fdc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  808f28:	000f883a 	mov	r7,zero
  808f2c:	01800044 	movi	r6,1
  808f30:	000b883a 	mov	r5,zero
  808f34:	e13ffd17 	ldw	r4,-12(fp)
  808f38:	0804a040 	call	804a04 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  808f3c:	e0bffd17 	ldw	r2,-12(fp)
  808f40:	10800283 	ldbu	r2,10(r2)
  808f44:	10803fcc 	andi	r2,r2,255
  808f48:	103ff71e 	bne	r2,zero,808f28 <__alt_mem_epcs_flash_controller_0+0xff7fff28>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  808f4c:	e0bffd17 	ldw	r2,-12(fp)
  808f50:	00c00fc4 	movi	r3,63
  808f54:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  808f58:	e0bffd17 	ldw	r2,-12(fp)
  808f5c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  808f60:	e0bffd17 	ldw	r2,-12(fp)
  808f64:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  808f68:	d0e04817 	ldw	r3,-32480(gp)
  808f6c:	e0bffd17 	ldw	r2,-12(fp)
  808f70:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  808f74:	e0bffd17 	ldw	r2,-12(fp)
  808f78:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  808f7c:	e0bffd17 	ldw	r2,-12(fp)
  808f80:	d0a04815 	stw	r2,-32480(gp)
  808f84:	e0bff717 	ldw	r2,-36(fp)
  808f88:	e0bffa15 	stw	r2,-24(fp)
  808f8c:	e0bffa17 	ldw	r2,-24(fp)
  808f90:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  808f94:	e0bff503 	ldbu	r2,-44(fp)
  808f98:	10800058 	cmpnei	r2,r2,1
  808f9c:	1000011e 	bne	r2,zero,808fa4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  808fa0:	08054500 	call	805450 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  808fa4:	e0bfff17 	ldw	r2,-4(fp)
  808fa8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  808fac:	e03ff615 	stw	zero,-40(fp)
             break;
  808fb0:	00000a06 	br	808fdc <OSSemDel+0x228>
  808fb4:	e0bff717 	ldw	r2,-36(fp)
  808fb8:	e0bffb15 	stw	r2,-20(fp)
  808fbc:	e0bffb17 	ldw	r2,-20(fp)
  808fc0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  808fc4:	e0bfff17 	ldw	r2,-4(fp)
  808fc8:	00c001c4 	movi	r3,7
  808fcc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  808fd0:	e0bffd17 	ldw	r2,-12(fp)
  808fd4:	e0bff615 	stw	r2,-40(fp)
             break;
  808fd8:	0001883a 	nop
    }
    return (pevent_return);
  808fdc:	e0bff617 	ldw	r2,-40(fp)
}
  808fe0:	e037883a 	mov	sp,fp
  808fe4:	dfc00117 	ldw	ra,4(sp)
  808fe8:	df000017 	ldw	fp,0(sp)
  808fec:	dec00204 	addi	sp,sp,8
  808ff0:	f800283a 	ret

00808ff4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  808ff4:	defff504 	addi	sp,sp,-44
  808ff8:	dfc00a15 	stw	ra,40(sp)
  808ffc:	df000915 	stw	fp,36(sp)
  809000:	df000904 	addi	fp,sp,36
  809004:	e13ffd15 	stw	r4,-12(fp)
  809008:	2805883a 	mov	r2,r5
  80900c:	e1bfff15 	stw	r6,-4(fp)
  809010:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809014:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809018:	e0bfff17 	ldw	r2,-4(fp)
  80901c:	10007226 	beq	r2,zero,8091e8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809020:	e0bffd17 	ldw	r2,-12(fp)
  809024:	1000041e 	bne	r2,zero,809038 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  809028:	e0bfff17 	ldw	r2,-4(fp)
  80902c:	00c00104 	movi	r3,4
  809030:	10c00005 	stb	r3,0(r2)
        return;
  809034:	00006d06 	br	8091ec <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809038:	e0bffd17 	ldw	r2,-12(fp)
  80903c:	10800003 	ldbu	r2,0(r2)
  809040:	10803fcc 	andi	r2,r2,255
  809044:	108000e0 	cmpeqi	r2,r2,3
  809048:	1000041e 	bne	r2,zero,80905c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  80904c:	e0bfff17 	ldw	r2,-4(fp)
  809050:	00c00044 	movi	r3,1
  809054:	10c00005 	stb	r3,0(r2)
        return;
  809058:	00006406 	br	8091ec <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  80905c:	d0a04903 	ldbu	r2,-32476(gp)
  809060:	10803fcc 	andi	r2,r2,255
  809064:	10000426 	beq	r2,zero,809078 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  809068:	e0bfff17 	ldw	r2,-4(fp)
  80906c:	00c00084 	movi	r3,2
  809070:	10c00005 	stb	r3,0(r2)
        return;
  809074:	00005d06 	br	8091ec <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  809078:	d0a03b03 	ldbu	r2,-32532(gp)
  80907c:	10803fcc 	andi	r2,r2,255
  809080:	10000426 	beq	r2,zero,809094 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  809084:	e0bfff17 	ldw	r2,-4(fp)
  809088:	00c00344 	movi	r3,13
  80908c:	10c00005 	stb	r3,0(r2)
        return;
  809090:	00005606 	br	8091ec <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809094:	0005303a 	rdctl	r2,status
  809098:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80909c:	e0fffc17 	ldw	r3,-16(fp)
  8090a0:	00bfff84 	movi	r2,-2
  8090a4:	1884703a 	and	r2,r3,r2
  8090a8:	1001703a 	wrctl	status,r2
  
  return context;
  8090ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8090b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  8090b4:	e0bffd17 	ldw	r2,-12(fp)
  8090b8:	1080020b 	ldhu	r2,8(r2)
  8090bc:	10bfffcc 	andi	r2,r2,65535
  8090c0:	10000d26 	beq	r2,zero,8090f8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  8090c4:	e0bffd17 	ldw	r2,-12(fp)
  8090c8:	1080020b 	ldhu	r2,8(r2)
  8090cc:	10bfffc4 	addi	r2,r2,-1
  8090d0:	1007883a 	mov	r3,r2
  8090d4:	e0bffd17 	ldw	r2,-12(fp)
  8090d8:	10c0020d 	sth	r3,8(r2)
  8090dc:	e0bff717 	ldw	r2,-36(fp)
  8090e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8090e4:	e0bff817 	ldw	r2,-32(fp)
  8090e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8090ec:	e0bfff17 	ldw	r2,-4(fp)
  8090f0:	10000005 	stb	zero,0(r2)
        return;
  8090f4:	00003d06 	br	8091ec <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  8090f8:	d0a04a17 	ldw	r2,-32472(gp)
  8090fc:	d0e04a17 	ldw	r3,-32472(gp)
  809100:	18c00c03 	ldbu	r3,48(r3)
  809104:	18c00054 	ori	r3,r3,1
  809108:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80910c:	d0a04a17 	ldw	r2,-32472(gp)
  809110:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  809114:	d0a04a17 	ldw	r2,-32472(gp)
  809118:	e0fffe0b 	ldhu	r3,-8(fp)
  80911c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  809120:	e13ffd17 	ldw	r4,-12(fp)
  809124:	0804b9c0 	call	804b9c <OS_EventTaskWait>
  809128:	e0bff717 	ldw	r2,-36(fp)
  80912c:	e0bffb15 	stw	r2,-20(fp)
  809130:	e0bffb17 	ldw	r2,-20(fp)
  809134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  809138:	08054500 	call	805450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80913c:	0005303a 	rdctl	r2,status
  809140:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809144:	e0fff917 	ldw	r3,-28(fp)
  809148:	00bfff84 	movi	r2,-2
  80914c:	1884703a 	and	r2,r3,r2
  809150:	1001703a 	wrctl	status,r2
  
  return context;
  809154:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  809158:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80915c:	d0a04a17 	ldw	r2,-32472(gp)
  809160:	10800c43 	ldbu	r2,49(r2)
  809164:	10803fcc 	andi	r2,r2,255
  809168:	10000326 	beq	r2,zero,809178 <OSSemPend+0x184>
  80916c:	108000a0 	cmpeqi	r2,r2,2
  809170:	1000041e 	bne	r2,zero,809184 <OSSemPend+0x190>
  809174:	00000706 	br	809194 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  809178:	e0bfff17 	ldw	r2,-4(fp)
  80917c:	10000005 	stb	zero,0(r2)
             break;
  809180:	00000c06 	br	8091b4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  809184:	e0bfff17 	ldw	r2,-4(fp)
  809188:	00c00384 	movi	r3,14
  80918c:	10c00005 	stb	r3,0(r2)
             break;
  809190:	00000806 	br	8091b4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  809194:	d0a04a17 	ldw	r2,-32472(gp)
  809198:	e17ffd17 	ldw	r5,-12(fp)
  80919c:	1009883a 	mov	r4,r2
  8091a0:	0804dfc0 	call	804dfc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8091a4:	e0bfff17 	ldw	r2,-4(fp)
  8091a8:	00c00284 	movi	r3,10
  8091ac:	10c00005 	stb	r3,0(r2)
             break;
  8091b0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8091b4:	d0a04a17 	ldw	r2,-32472(gp)
  8091b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8091bc:	d0a04a17 	ldw	r2,-32472(gp)
  8091c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8091c4:	d0a04a17 	ldw	r2,-32472(gp)
  8091c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8091cc:	d0a04a17 	ldw	r2,-32472(gp)
  8091d0:	10000815 	stw	zero,32(r2)
  8091d4:	e0bff717 	ldw	r2,-36(fp)
  8091d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8091dc:	e0bffa17 	ldw	r2,-24(fp)
  8091e0:	1001703a 	wrctl	status,r2
  8091e4:	00000106 	br	8091ec <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  8091e8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  8091ec:	e037883a 	mov	sp,fp
  8091f0:	dfc00117 	ldw	ra,4(sp)
  8091f4:	df000017 	ldw	fp,0(sp)
  8091f8:	dec00204 	addi	sp,sp,8
  8091fc:	f800283a 	ret

00809200 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  809200:	defff604 	addi	sp,sp,-40
  809204:	dfc00915 	stw	ra,36(sp)
  809208:	df000815 	stw	fp,32(sp)
  80920c:	df000804 	addi	fp,sp,32
  809210:	e13ffd15 	stw	r4,-12(fp)
  809214:	2805883a 	mov	r2,r5
  809218:	e1bfff15 	stw	r6,-4(fp)
  80921c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809220:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809224:	e0bfff17 	ldw	r2,-4(fp)
  809228:	1000021e 	bne	r2,zero,809234 <OSSemPendAbort+0x34>
        return (0);
  80922c:	0005883a 	mov	r2,zero
  809230:	00004906 	br	809358 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809234:	e0bffd17 	ldw	r2,-12(fp)
  809238:	1000051e 	bne	r2,zero,809250 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  80923c:	e0bfff17 	ldw	r2,-4(fp)
  809240:	00c00104 	movi	r3,4
  809244:	10c00005 	stb	r3,0(r2)
        return (0);
  809248:	0005883a 	mov	r2,zero
  80924c:	00004206 	br	809358 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809250:	e0bffd17 	ldw	r2,-12(fp)
  809254:	10800003 	ldbu	r2,0(r2)
  809258:	10803fcc 	andi	r2,r2,255
  80925c:	108000e0 	cmpeqi	r2,r2,3
  809260:	1000051e 	bne	r2,zero,809278 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  809264:	e0bfff17 	ldw	r2,-4(fp)
  809268:	00c00044 	movi	r3,1
  80926c:	10c00005 	stb	r3,0(r2)
        return (0);
  809270:	0005883a 	mov	r2,zero
  809274:	00003806 	br	809358 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809278:	0005303a 	rdctl	r2,status
  80927c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809280:	e0fffc17 	ldw	r3,-16(fp)
  809284:	00bfff84 	movi	r2,-2
  809288:	1884703a 	and	r2,r3,r2
  80928c:	1001703a 	wrctl	status,r2
  
  return context;
  809290:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809294:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  809298:	e0bffd17 	ldw	r2,-12(fp)
  80929c:	10800283 	ldbu	r2,10(r2)
  8092a0:	10803fcc 	andi	r2,r2,255
  8092a4:	10002526 	beq	r2,zero,80933c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  8092a8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  8092ac:	e0bffe03 	ldbu	r2,-8(fp)
  8092b0:	10800060 	cmpeqi	r2,r2,1
  8092b4:	10000e26 	beq	r2,zero,8092f0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8092b8:	00000806 	br	8092dc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8092bc:	01c00084 	movi	r7,2
  8092c0:	01800044 	movi	r6,1
  8092c4:	000b883a 	mov	r5,zero
  8092c8:	e13ffd17 	ldw	r4,-12(fp)
  8092cc:	0804a040 	call	804a04 <OS_EventTaskRdy>
                     nbr_tasks++;
  8092d0:	e0bff803 	ldbu	r2,-32(fp)
  8092d4:	10800044 	addi	r2,r2,1
  8092d8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8092dc:	e0bffd17 	ldw	r2,-12(fp)
  8092e0:	10800283 	ldbu	r2,10(r2)
  8092e4:	10803fcc 	andi	r2,r2,255
  8092e8:	103ff41e 	bne	r2,zero,8092bc <__alt_mem_epcs_flash_controller_0+0xff8002bc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8092ec:	00000906 	br	809314 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8092f0:	01c00084 	movi	r7,2
  8092f4:	01800044 	movi	r6,1
  8092f8:	000b883a 	mov	r5,zero
  8092fc:	e13ffd17 	ldw	r4,-12(fp)
  809300:	0804a040 	call	804a04 <OS_EventTaskRdy>
                 nbr_tasks++;
  809304:	e0bff803 	ldbu	r2,-32(fp)
  809308:	10800044 	addi	r2,r2,1
  80930c:	e0bff805 	stb	r2,-32(fp)
                 break;
  809310:	0001883a 	nop
  809314:	e0bff917 	ldw	r2,-28(fp)
  809318:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80931c:	e0bffa17 	ldw	r2,-24(fp)
  809320:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  809324:	08054500 	call	805450 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  809328:	e0bfff17 	ldw	r2,-4(fp)
  80932c:	00c00384 	movi	r3,14
  809330:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  809334:	e0bff803 	ldbu	r2,-32(fp)
  809338:	00000706 	br	809358 <OSSemPendAbort+0x158>
  80933c:	e0bff917 	ldw	r2,-28(fp)
  809340:	e0bffb15 	stw	r2,-20(fp)
  809344:	e0bffb17 	ldw	r2,-20(fp)
  809348:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80934c:	e0bfff17 	ldw	r2,-4(fp)
  809350:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  809354:	0005883a 	mov	r2,zero
}
  809358:	e037883a 	mov	sp,fp
  80935c:	dfc00117 	ldw	ra,4(sp)
  809360:	df000017 	ldw	fp,0(sp)
  809364:	dec00204 	addi	sp,sp,8
  809368:	f800283a 	ret

0080936c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  80936c:	defff804 	addi	sp,sp,-32
  809370:	dfc00715 	stw	ra,28(sp)
  809374:	df000615 	stw	fp,24(sp)
  809378:	df000604 	addi	fp,sp,24
  80937c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809380:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809384:	e0bfff17 	ldw	r2,-4(fp)
  809388:	1000021e 	bne	r2,zero,809394 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  80938c:	00800104 	movi	r2,4
  809390:	00003506 	br	809468 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809394:	e0bfff17 	ldw	r2,-4(fp)
  809398:	10800003 	ldbu	r2,0(r2)
  80939c:	10803fcc 	andi	r2,r2,255
  8093a0:	108000e0 	cmpeqi	r2,r2,3
  8093a4:	1000021e 	bne	r2,zero,8093b0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  8093a8:	00800044 	movi	r2,1
  8093ac:	00002e06 	br	809468 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8093b0:	0005303a 	rdctl	r2,status
  8093b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8093b8:	e0fffe17 	ldw	r3,-8(fp)
  8093bc:	00bfff84 	movi	r2,-2
  8093c0:	1884703a 	and	r2,r3,r2
  8093c4:	1001703a 	wrctl	status,r2
  
  return context;
  8093c8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8093cc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  8093d0:	e0bfff17 	ldw	r2,-4(fp)
  8093d4:	10800283 	ldbu	r2,10(r2)
  8093d8:	10803fcc 	andi	r2,r2,255
  8093dc:	10000c26 	beq	r2,zero,809410 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8093e0:	000f883a 	mov	r7,zero
  8093e4:	01800044 	movi	r6,1
  8093e8:	000b883a 	mov	r5,zero
  8093ec:	e13fff17 	ldw	r4,-4(fp)
  8093f0:	0804a040 	call	804a04 <OS_EventTaskRdy>
  8093f4:	e0bffa17 	ldw	r2,-24(fp)
  8093f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8093fc:	e0bffb17 	ldw	r2,-20(fp)
  809400:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  809404:	08054500 	call	805450 <OS_Sched>
        return (OS_ERR_NONE);
  809408:	0005883a 	mov	r2,zero
  80940c:	00001606 	br	809468 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  809410:	e0bfff17 	ldw	r2,-4(fp)
  809414:	1080020b 	ldhu	r2,8(r2)
  809418:	10ffffcc 	andi	r3,r2,65535
  80941c:	00bfffd4 	movui	r2,65535
  809420:	18800c26 	beq	r3,r2,809454 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  809424:	e0bfff17 	ldw	r2,-4(fp)
  809428:	1080020b 	ldhu	r2,8(r2)
  80942c:	10800044 	addi	r2,r2,1
  809430:	1007883a 	mov	r3,r2
  809434:	e0bfff17 	ldw	r2,-4(fp)
  809438:	10c0020d 	sth	r3,8(r2)
  80943c:	e0bffa17 	ldw	r2,-24(fp)
  809440:	e0bffc15 	stw	r2,-16(fp)
  809444:	e0bffc17 	ldw	r2,-16(fp)
  809448:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80944c:	0005883a 	mov	r2,zero
  809450:	00000506 	br	809468 <OSSemPost+0xfc>
  809454:	e0bffa17 	ldw	r2,-24(fp)
  809458:	e0bffd15 	stw	r2,-12(fp)
  80945c:	e0bffd17 	ldw	r2,-12(fp)
  809460:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  809464:	00800c84 	movi	r2,50
}
  809468:	e037883a 	mov	sp,fp
  80946c:	dfc00117 	ldw	ra,4(sp)
  809470:	df000017 	ldw	fp,0(sp)
  809474:	dec00204 	addi	sp,sp,8
  809478:	f800283a 	ret

0080947c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  80947c:	defff704 	addi	sp,sp,-36
  809480:	df000815 	stw	fp,32(sp)
  809484:	df000804 	addi	fp,sp,32
  809488:	e13ffe15 	stw	r4,-8(fp)
  80948c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809490:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  809494:	e0bffe17 	ldw	r2,-8(fp)
  809498:	1000021e 	bne	r2,zero,8094a4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  80949c:	00800104 	movi	r2,4
  8094a0:	00003606 	br	80957c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  8094a4:	e0bfff17 	ldw	r2,-4(fp)
  8094a8:	1000021e 	bne	r2,zero,8094b4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  8094ac:	00800244 	movi	r2,9
  8094b0:	00003206 	br	80957c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8094b4:	e0bffe17 	ldw	r2,-8(fp)
  8094b8:	10800003 	ldbu	r2,0(r2)
  8094bc:	10803fcc 	andi	r2,r2,255
  8094c0:	108000e0 	cmpeqi	r2,r2,3
  8094c4:	1000021e 	bne	r2,zero,8094d0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  8094c8:	00800044 	movi	r2,1
  8094cc:	00002b06 	br	80957c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8094d0:	0005303a 	rdctl	r2,status
  8094d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8094d8:	e0fffd17 	ldw	r3,-12(fp)
  8094dc:	00bfff84 	movi	r2,-2
  8094e0:	1884703a 	and	r2,r3,r2
  8094e4:	1001703a 	wrctl	status,r2
  
  return context;
  8094e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8094ec:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  8094f0:	e0bffe17 	ldw	r2,-8(fp)
  8094f4:	10c00283 	ldbu	r3,10(r2)
  8094f8:	e0bfff17 	ldw	r2,-4(fp)
  8094fc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  809500:	e0bffe17 	ldw	r2,-8(fp)
  809504:	108002c4 	addi	r2,r2,11
  809508:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  80950c:	e0bfff17 	ldw	r2,-4(fp)
  809510:	10800084 	addi	r2,r2,2
  809514:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809518:	e03ffa05 	stb	zero,-24(fp)
  80951c:	00000b06 	br	80954c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  809520:	e0bff917 	ldw	r2,-28(fp)
  809524:	10c00044 	addi	r3,r2,1
  809528:	e0fff915 	stw	r3,-28(fp)
  80952c:	e0fff817 	ldw	r3,-32(fp)
  809530:	19000044 	addi	r4,r3,1
  809534:	e13ff815 	stw	r4,-32(fp)
  809538:	18c00003 	ldbu	r3,0(r3)
  80953c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809540:	e0bffa03 	ldbu	r2,-24(fp)
  809544:	10800044 	addi	r2,r2,1
  809548:	e0bffa05 	stb	r2,-24(fp)
  80954c:	e0bffa03 	ldbu	r2,-24(fp)
  809550:	108000f0 	cmpltui	r2,r2,3
  809554:	103ff21e 	bne	r2,zero,809520 <__alt_mem_epcs_flash_controller_0+0xff800520>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  809558:	e0bffe17 	ldw	r2,-8(fp)
  80955c:	10c0020b 	ldhu	r3,8(r2)
  809560:	e0bfff17 	ldw	r2,-4(fp)
  809564:	10c0000d 	sth	r3,0(r2)
  809568:	e0bffb17 	ldw	r2,-20(fp)
  80956c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809570:	e0bffc17 	ldw	r2,-16(fp)
  809574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809578:	0005883a 	mov	r2,zero
}
  80957c:	e037883a 	mov	sp,fp
  809580:	df000017 	ldw	fp,0(sp)
  809584:	dec00104 	addi	sp,sp,4
  809588:	f800283a 	ret

0080958c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  80958c:	defff904 	addi	sp,sp,-28
  809590:	df000615 	stw	fp,24(sp)
  809594:	df000604 	addi	fp,sp,24
  809598:	e13ffd15 	stw	r4,-12(fp)
  80959c:	2805883a 	mov	r2,r5
  8095a0:	e1bfff15 	stw	r6,-4(fp)
  8095a4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8095a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8095ac:	e0bfff17 	ldw	r2,-4(fp)
  8095b0:	10003126 	beq	r2,zero,809678 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8095b4:	e0bffd17 	ldw	r2,-12(fp)
  8095b8:	1000041e 	bne	r2,zero,8095cc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  8095bc:	e0bfff17 	ldw	r2,-4(fp)
  8095c0:	00c00104 	movi	r3,4
  8095c4:	10c00005 	stb	r3,0(r2)
        return;
  8095c8:	00002c06 	br	80967c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8095cc:	e0bffd17 	ldw	r2,-12(fp)
  8095d0:	10800003 	ldbu	r2,0(r2)
  8095d4:	10803fcc 	andi	r2,r2,255
  8095d8:	108000e0 	cmpeqi	r2,r2,3
  8095dc:	1000041e 	bne	r2,zero,8095f0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  8095e0:	e0bfff17 	ldw	r2,-4(fp)
  8095e4:	00c00044 	movi	r3,1
  8095e8:	10c00005 	stb	r3,0(r2)
        return;
  8095ec:	00002306 	br	80967c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8095f0:	0005303a 	rdctl	r2,status
  8095f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8095f8:	e0fffc17 	ldw	r3,-16(fp)
  8095fc:	00bfff84 	movi	r2,-2
  809600:	1884703a 	and	r2,r3,r2
  809604:	1001703a 	wrctl	status,r2
  
  return context;
  809608:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80960c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  809610:	e0bfff17 	ldw	r2,-4(fp)
  809614:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  809618:	e0bffd17 	ldw	r2,-12(fp)
  80961c:	1080020b 	ldhu	r2,8(r2)
  809620:	10bfffcc 	andi	r2,r2,65535
  809624:	10000426 	beq	r2,zero,809638 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  809628:	e0bffd17 	ldw	r2,-12(fp)
  80962c:	e0fffe0b 	ldhu	r3,-8(fp)
  809630:	10c0020d 	sth	r3,8(r2)
  809634:	00000b06 	br	809664 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  809638:	e0bffd17 	ldw	r2,-12(fp)
  80963c:	10800283 	ldbu	r2,10(r2)
  809640:	10803fcc 	andi	r2,r2,255
  809644:	1000041e 	bne	r2,zero,809658 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  809648:	e0bffd17 	ldw	r2,-12(fp)
  80964c:	e0fffe0b 	ldhu	r3,-8(fp)
  809650:	10c0020d 	sth	r3,8(r2)
  809654:	00000306 	br	809664 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  809658:	e0bfff17 	ldw	r2,-4(fp)
  80965c:	00c01244 	movi	r3,73
  809660:	10c00005 	stb	r3,0(r2)
  809664:	e0bffa17 	ldw	r2,-24(fp)
  809668:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80966c:	e0bffb17 	ldw	r2,-20(fp)
  809670:	1001703a 	wrctl	status,r2
  809674:	00000106 	br	80967c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  809678:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  80967c:	e037883a 	mov	sp,fp
  809680:	df000017 	ldw	fp,0(sp)
  809684:	dec00104 	addi	sp,sp,4
  809688:	f800283a 	ret

0080968c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  80968c:	defff104 	addi	sp,sp,-60
  809690:	dfc00e15 	stw	ra,56(sp)
  809694:	df000d15 	stw	fp,52(sp)
  809698:	df000d04 	addi	fp,sp,52
  80969c:	2007883a 	mov	r3,r4
  8096a0:	2805883a 	mov	r2,r5
  8096a4:	e0fffe05 	stb	r3,-8(fp)
  8096a8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8096ac:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8096b0:	e0bffe03 	ldbu	r2,-8(fp)
  8096b4:	10800530 	cmpltui	r2,r2,20
  8096b8:	1000051e 	bne	r2,zero,8096d0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  8096bc:	e0bffe03 	ldbu	r2,-8(fp)
  8096c0:	10803fe0 	cmpeqi	r2,r2,255
  8096c4:	1000021e 	bne	r2,zero,8096d0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  8096c8:	00800a84 	movi	r2,42
  8096cc:	00012606 	br	809b68 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  8096d0:	e0bfff03 	ldbu	r2,-4(fp)
  8096d4:	10800530 	cmpltui	r2,r2,20
  8096d8:	1000021e 	bne	r2,zero,8096e4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  8096dc:	00800a84 	movi	r2,42
  8096e0:	00012106 	br	809b68 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8096e4:	0005303a 	rdctl	r2,status
  8096e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8096ec:	e0fffd17 	ldw	r3,-12(fp)
  8096f0:	00bfff84 	movi	r2,-2
  8096f4:	1884703a 	and	r2,r3,r2
  8096f8:	1001703a 	wrctl	status,r2
  
  return context;
  8096fc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  809700:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  809704:	e0ffff03 	ldbu	r3,-4(fp)
  809708:	008020b4 	movhi	r2,130
  80970c:	10a21b04 	addi	r2,r2,-30612
  809710:	18c7883a 	add	r3,r3,r3
  809714:	18c7883a 	add	r3,r3,r3
  809718:	10c5883a 	add	r2,r2,r3
  80971c:	10800017 	ldw	r2,0(r2)
  809720:	10000626 	beq	r2,zero,80973c <OSTaskChangePrio+0xb0>
  809724:	e0bff517 	ldw	r2,-44(fp)
  809728:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80972c:	e0bff617 	ldw	r2,-40(fp)
  809730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  809734:	00800a04 	movi	r2,40
  809738:	00010b06 	br	809b68 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  80973c:	e0bffe03 	ldbu	r2,-8(fp)
  809740:	10803fd8 	cmpnei	r2,r2,255
  809744:	1000031e 	bne	r2,zero,809754 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  809748:	d0a04a17 	ldw	r2,-32472(gp)
  80974c:	10800c83 	ldbu	r2,50(r2)
  809750:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  809754:	e0fffe03 	ldbu	r3,-8(fp)
  809758:	008020b4 	movhi	r2,130
  80975c:	10a21b04 	addi	r2,r2,-30612
  809760:	18c7883a 	add	r3,r3,r3
  809764:	18c7883a 	add	r3,r3,r3
  809768:	10c5883a 	add	r2,r2,r3
  80976c:	10800017 	ldw	r2,0(r2)
  809770:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  809774:	e0bff817 	ldw	r2,-32(fp)
  809778:	1000061e 	bne	r2,zero,809794 <OSTaskChangePrio+0x108>
  80977c:	e0bff517 	ldw	r2,-44(fp)
  809780:	e0bff715 	stw	r2,-36(fp)
  809784:	e0bff717 	ldw	r2,-36(fp)
  809788:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  80978c:	00800a44 	movi	r2,41
  809790:	0000f506 	br	809b68 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  809794:	e0bff817 	ldw	r2,-32(fp)
  809798:	10800058 	cmpnei	r2,r2,1
  80979c:	1000061e 	bne	r2,zero,8097b8 <OSTaskChangePrio+0x12c>
  8097a0:	e0bff517 	ldw	r2,-44(fp)
  8097a4:	e0bff915 	stw	r2,-28(fp)
  8097a8:	e0bff917 	ldw	r2,-28(fp)
  8097ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8097b0:	008010c4 	movi	r2,67
  8097b4:	0000ec06 	br	809b68 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  8097b8:	e0bfff03 	ldbu	r2,-4(fp)
  8097bc:	1004d0fa 	srli	r2,r2,3
  8097c0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  8097c4:	e0bfff03 	ldbu	r2,-4(fp)
  8097c8:	108001cc 	andi	r2,r2,7
  8097cc:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  8097d0:	e0bffb03 	ldbu	r2,-20(fp)
  8097d4:	00c00044 	movi	r3,1
  8097d8:	1884983a 	sll	r2,r3,r2
  8097dc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  8097e0:	e0bffb43 	ldbu	r2,-19(fp)
  8097e4:	00c00044 	movi	r3,1
  8097e8:	1884983a 	sll	r2,r3,r2
  8097ec:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  8097f0:	e0fffe03 	ldbu	r3,-8(fp)
  8097f4:	008020b4 	movhi	r2,130
  8097f8:	10a21b04 	addi	r2,r2,-30612
  8097fc:	18c7883a 	add	r3,r3,r3
  809800:	18c7883a 	add	r3,r3,r3
  809804:	10c5883a 	add	r2,r2,r3
  809808:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  80980c:	e0ffff03 	ldbu	r3,-4(fp)
  809810:	008020b4 	movhi	r2,130
  809814:	10a21b04 	addi	r2,r2,-30612
  809818:	18c7883a 	add	r3,r3,r3
  80981c:	18c7883a 	add	r3,r3,r3
  809820:	10c5883a 	add	r2,r2,r3
  809824:	e0fff817 	ldw	r3,-32(fp)
  809828:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  80982c:	e0bff817 	ldw	r2,-32(fp)
  809830:	10800d03 	ldbu	r2,52(r2)
  809834:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  809838:	e0bff817 	ldw	r2,-32(fp)
  80983c:	10800d83 	ldbu	r2,54(r2)
  809840:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  809844:	e0bff817 	ldw	r2,-32(fp)
  809848:	10800d43 	ldbu	r2,53(r2)
  80984c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  809850:	e0fffc03 	ldbu	r3,-16(fp)
  809854:	d0a04744 	addi	r2,gp,-32483
  809858:	1885883a 	add	r2,r3,r2
  80985c:	10c00003 	ldbu	r3,0(r2)
  809860:	e0bffc83 	ldbu	r2,-14(fp)
  809864:	1884703a 	and	r2,r3,r2
  809868:	10803fcc 	andi	r2,r2,255
  80986c:	10002826 	beq	r2,zero,809910 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  809870:	e0fffc03 	ldbu	r3,-16(fp)
  809874:	e13ffc03 	ldbu	r4,-16(fp)
  809878:	d0a04744 	addi	r2,gp,-32483
  80987c:	2085883a 	add	r2,r4,r2
  809880:	10800003 	ldbu	r2,0(r2)
  809884:	1009883a 	mov	r4,r2
  809888:	e0bffc83 	ldbu	r2,-14(fp)
  80988c:	0084303a 	nor	r2,zero,r2
  809890:	2084703a 	and	r2,r4,r2
  809894:	1009883a 	mov	r4,r2
  809898:	d0a04744 	addi	r2,gp,-32483
  80989c:	1885883a 	add	r2,r3,r2
  8098a0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8098a4:	e0fffc03 	ldbu	r3,-16(fp)
  8098a8:	d0a04744 	addi	r2,gp,-32483
  8098ac:	1885883a 	add	r2,r3,r2
  8098b0:	10800003 	ldbu	r2,0(r2)
  8098b4:	10803fcc 	andi	r2,r2,255
  8098b8:	1000061e 	bne	r2,zero,8098d4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  8098bc:	e0bffc43 	ldbu	r2,-15(fp)
  8098c0:	0084303a 	nor	r2,zero,r2
  8098c4:	1007883a 	mov	r3,r2
  8098c8:	d0a04703 	ldbu	r2,-32484(gp)
  8098cc:	1884703a 	and	r2,r3,r2
  8098d0:	d0a04705 	stb	r2,-32484(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  8098d4:	d0e04703 	ldbu	r3,-32484(gp)
  8098d8:	e0bffb83 	ldbu	r2,-18(fp)
  8098dc:	1884b03a 	or	r2,r3,r2
  8098e0:	d0a04705 	stb	r2,-32484(gp)
         OSRdyTbl[y_new] |= bitx_new;
  8098e4:	e0fffb03 	ldbu	r3,-20(fp)
  8098e8:	e13ffb03 	ldbu	r4,-20(fp)
  8098ec:	d0a04744 	addi	r2,gp,-32483
  8098f0:	2085883a 	add	r2,r4,r2
  8098f4:	11000003 	ldbu	r4,0(r2)
  8098f8:	e0bffbc3 	ldbu	r2,-17(fp)
  8098fc:	2084b03a 	or	r2,r4,r2
  809900:	1009883a 	mov	r4,r2
  809904:	d0a04744 	addi	r2,gp,-32483
  809908:	1885883a 	add	r2,r3,r2
  80990c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  809910:	e0bff817 	ldw	r2,-32(fp)
  809914:	10800717 	ldw	r2,28(r2)
  809918:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  80991c:	e0bff317 	ldw	r2,-52(fp)
  809920:	10003326 	beq	r2,zero,8099f0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  809924:	e0bffc03 	ldbu	r2,-16(fp)
  809928:	e0fffc03 	ldbu	r3,-16(fp)
  80992c:	e13ff317 	ldw	r4,-52(fp)
  809930:	20c7883a 	add	r3,r4,r3
  809934:	18c002c4 	addi	r3,r3,11
  809938:	18c00003 	ldbu	r3,0(r3)
  80993c:	1809883a 	mov	r4,r3
  809940:	e0fffc83 	ldbu	r3,-14(fp)
  809944:	00c6303a 	nor	r3,zero,r3
  809948:	20c6703a 	and	r3,r4,r3
  80994c:	1809883a 	mov	r4,r3
  809950:	e0fff317 	ldw	r3,-52(fp)
  809954:	1885883a 	add	r2,r3,r2
  809958:	108002c4 	addi	r2,r2,11
  80995c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  809960:	e0bffc03 	ldbu	r2,-16(fp)
  809964:	e0fff317 	ldw	r3,-52(fp)
  809968:	1885883a 	add	r2,r3,r2
  80996c:	108002c4 	addi	r2,r2,11
  809970:	10800003 	ldbu	r2,0(r2)
  809974:	10803fcc 	andi	r2,r2,255
  809978:	1000091e 	bne	r2,zero,8099a0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  80997c:	e0bff317 	ldw	r2,-52(fp)
  809980:	10800283 	ldbu	r2,10(r2)
  809984:	1007883a 	mov	r3,r2
  809988:	e0bffc43 	ldbu	r2,-15(fp)
  80998c:	0084303a 	nor	r2,zero,r2
  809990:	1884703a 	and	r2,r3,r2
  809994:	1007883a 	mov	r3,r2
  809998:	e0bff317 	ldw	r2,-52(fp)
  80999c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  8099a0:	e0bff317 	ldw	r2,-52(fp)
  8099a4:	10c00283 	ldbu	r3,10(r2)
  8099a8:	e0bffb83 	ldbu	r2,-18(fp)
  8099ac:	1884b03a 	or	r2,r3,r2
  8099b0:	1007883a 	mov	r3,r2
  8099b4:	e0bff317 	ldw	r2,-52(fp)
  8099b8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  8099bc:	e0bffb03 	ldbu	r2,-20(fp)
  8099c0:	e0fffb03 	ldbu	r3,-20(fp)
  8099c4:	e13ff317 	ldw	r4,-52(fp)
  8099c8:	20c7883a 	add	r3,r4,r3
  8099cc:	18c002c4 	addi	r3,r3,11
  8099d0:	19000003 	ldbu	r4,0(r3)
  8099d4:	e0fffbc3 	ldbu	r3,-17(fp)
  8099d8:	20c6b03a 	or	r3,r4,r3
  8099dc:	1809883a 	mov	r4,r3
  8099e0:	e0fff317 	ldw	r3,-52(fp)
  8099e4:	1885883a 	add	r2,r3,r2
  8099e8:	108002c4 	addi	r2,r2,11
  8099ec:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  8099f0:	e0bff817 	ldw	r2,-32(fp)
  8099f4:	10800817 	ldw	r2,32(r2)
  8099f8:	10004226 	beq	r2,zero,809b04 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  8099fc:	e0bff817 	ldw	r2,-32(fp)
  809a00:	10800817 	ldw	r2,32(r2)
  809a04:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  809a08:	e0bff417 	ldw	r2,-48(fp)
  809a0c:	10800017 	ldw	r2,0(r2)
  809a10:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  809a14:	00003906 	br	809afc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  809a18:	e0bffc03 	ldbu	r2,-16(fp)
  809a1c:	e0fffc03 	ldbu	r3,-16(fp)
  809a20:	e13ff317 	ldw	r4,-52(fp)
  809a24:	20c7883a 	add	r3,r4,r3
  809a28:	18c002c4 	addi	r3,r3,11
  809a2c:	18c00003 	ldbu	r3,0(r3)
  809a30:	1809883a 	mov	r4,r3
  809a34:	e0fffc83 	ldbu	r3,-14(fp)
  809a38:	00c6303a 	nor	r3,zero,r3
  809a3c:	20c6703a 	and	r3,r4,r3
  809a40:	1809883a 	mov	r4,r3
  809a44:	e0fff317 	ldw	r3,-52(fp)
  809a48:	1885883a 	add	r2,r3,r2
  809a4c:	108002c4 	addi	r2,r2,11
  809a50:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  809a54:	e0bffc03 	ldbu	r2,-16(fp)
  809a58:	e0fff317 	ldw	r3,-52(fp)
  809a5c:	1885883a 	add	r2,r3,r2
  809a60:	108002c4 	addi	r2,r2,11
  809a64:	10800003 	ldbu	r2,0(r2)
  809a68:	10803fcc 	andi	r2,r2,255
  809a6c:	1000091e 	bne	r2,zero,809a94 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  809a70:	e0bff317 	ldw	r2,-52(fp)
  809a74:	10800283 	ldbu	r2,10(r2)
  809a78:	1007883a 	mov	r3,r2
  809a7c:	e0bffc43 	ldbu	r2,-15(fp)
  809a80:	0084303a 	nor	r2,zero,r2
  809a84:	1884703a 	and	r2,r3,r2
  809a88:	1007883a 	mov	r3,r2
  809a8c:	e0bff317 	ldw	r2,-52(fp)
  809a90:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  809a94:	e0bff317 	ldw	r2,-52(fp)
  809a98:	10c00283 	ldbu	r3,10(r2)
  809a9c:	e0bffb83 	ldbu	r2,-18(fp)
  809aa0:	1884b03a 	or	r2,r3,r2
  809aa4:	1007883a 	mov	r3,r2
  809aa8:	e0bff317 	ldw	r2,-52(fp)
  809aac:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  809ab0:	e0bffb03 	ldbu	r2,-20(fp)
  809ab4:	e0fffb03 	ldbu	r3,-20(fp)
  809ab8:	e13ff317 	ldw	r4,-52(fp)
  809abc:	20c7883a 	add	r3,r4,r3
  809ac0:	18c002c4 	addi	r3,r3,11
  809ac4:	19000003 	ldbu	r4,0(r3)
  809ac8:	e0fffbc3 	ldbu	r3,-17(fp)
  809acc:	20c6b03a 	or	r3,r4,r3
  809ad0:	1809883a 	mov	r4,r3
  809ad4:	e0fff317 	ldw	r3,-52(fp)
  809ad8:	1885883a 	add	r2,r3,r2
  809adc:	108002c4 	addi	r2,r2,11
  809ae0:	11000005 	stb	r4,0(r2)
            pevents++;
  809ae4:	e0bff417 	ldw	r2,-48(fp)
  809ae8:	10800104 	addi	r2,r2,4
  809aec:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  809af0:	e0bff417 	ldw	r2,-48(fp)
  809af4:	10800017 	ldw	r2,0(r2)
  809af8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  809afc:	e0bff317 	ldw	r2,-52(fp)
  809b00:	103fc51e 	bne	r2,zero,809a18 <__alt_mem_epcs_flash_controller_0+0xff800a18>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  809b04:	e0bff817 	ldw	r2,-32(fp)
  809b08:	e0ffff03 	ldbu	r3,-4(fp)
  809b0c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  809b10:	e0bff817 	ldw	r2,-32(fp)
  809b14:	e0fffb03 	ldbu	r3,-20(fp)
  809b18:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  809b1c:	e0bff817 	ldw	r2,-32(fp)
  809b20:	e0fffb43 	ldbu	r3,-19(fp)
  809b24:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  809b28:	e0bff817 	ldw	r2,-32(fp)
  809b2c:	e0fffb83 	ldbu	r3,-18(fp)
  809b30:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  809b34:	e0bff817 	ldw	r2,-32(fp)
  809b38:	e0fffbc3 	ldbu	r3,-17(fp)
  809b3c:	10c00d45 	stb	r3,53(r2)
  809b40:	e0bff517 	ldw	r2,-44(fp)
  809b44:	e0bffa15 	stw	r2,-24(fp)
  809b48:	e0bffa17 	ldw	r2,-24(fp)
  809b4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  809b50:	d0a03b43 	ldbu	r2,-32531(gp)
  809b54:	10803fcc 	andi	r2,r2,255
  809b58:	10800058 	cmpnei	r2,r2,1
  809b5c:	1000011e 	bne	r2,zero,809b64 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  809b60:	08054500 	call	805450 <OS_Sched>
    }
    return (OS_ERR_NONE);
  809b64:	0005883a 	mov	r2,zero
}
  809b68:	e037883a 	mov	sp,fp
  809b6c:	dfc00117 	ldw	ra,4(sp)
  809b70:	df000017 	ldw	fp,0(sp)
  809b74:	dec00204 	addi	sp,sp,8
  809b78:	f800283a 	ret

00809b7c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  809b7c:	deffee04 	addi	sp,sp,-72
  809b80:	dfc01115 	stw	ra,68(sp)
  809b84:	df001015 	stw	fp,64(sp)
  809b88:	df001004 	addi	fp,sp,64
  809b8c:	e13ffc15 	stw	r4,-16(fp)
  809b90:	e17ffd15 	stw	r5,-12(fp)
  809b94:	e1bffe15 	stw	r6,-8(fp)
  809b98:	3805883a 	mov	r2,r7
  809b9c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  809ba0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  809ba4:	e0bfff03 	ldbu	r2,-4(fp)
  809ba8:	10800570 	cmpltui	r2,r2,21
  809bac:	1000021e 	bne	r2,zero,809bb8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  809bb0:	00800a84 	movi	r2,42
  809bb4:	00005706 	br	809d14 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809bb8:	0005303a 	rdctl	r2,status
  809bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809bc0:	e0fffb17 	ldw	r3,-20(fp)
  809bc4:	00bfff84 	movi	r2,-2
  809bc8:	1884703a 	and	r2,r3,r2
  809bcc:	1001703a 	wrctl	status,r2
  
  return context;
  809bd0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  809bd4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  809bd8:	d0a04903 	ldbu	r2,-32476(gp)
  809bdc:	10803fcc 	andi	r2,r2,255
  809be0:	10000626 	beq	r2,zero,809bfc <OSTaskCreate+0x80>
  809be4:	e0bff317 	ldw	r2,-52(fp)
  809be8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809bec:	e0bff417 	ldw	r2,-48(fp)
  809bf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  809bf4:	00800f04 	movi	r2,60
  809bf8:	00004606 	br	809d14 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  809bfc:	e0ffff03 	ldbu	r3,-4(fp)
  809c00:	008020b4 	movhi	r2,130
  809c04:	10a21b04 	addi	r2,r2,-30612
  809c08:	18c7883a 	add	r3,r3,r3
  809c0c:	18c7883a 	add	r3,r3,r3
  809c10:	10c5883a 	add	r2,r2,r3
  809c14:	10800017 	ldw	r2,0(r2)
  809c18:	1000391e 	bne	r2,zero,809d00 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  809c1c:	e0ffff03 	ldbu	r3,-4(fp)
  809c20:	008020b4 	movhi	r2,130
  809c24:	10a21b04 	addi	r2,r2,-30612
  809c28:	18c7883a 	add	r3,r3,r3
  809c2c:	18c7883a 	add	r3,r3,r3
  809c30:	10c5883a 	add	r2,r2,r3
  809c34:	00c00044 	movi	r3,1
  809c38:	10c00015 	stw	r3,0(r2)
  809c3c:	e0bff317 	ldw	r2,-52(fp)
  809c40:	e0bff515 	stw	r2,-44(fp)
  809c44:	e0bff517 	ldw	r2,-44(fp)
  809c48:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  809c4c:	000f883a 	mov	r7,zero
  809c50:	e1bffe17 	ldw	r6,-8(fp)
  809c54:	e17ffd17 	ldw	r5,-12(fp)
  809c58:	e13ffc17 	ldw	r4,-16(fp)
  809c5c:	080eb740 	call	80eb74 <OSTaskStkInit>
  809c60:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  809c64:	e0bfff03 	ldbu	r2,-4(fp)
  809c68:	d8000215 	stw	zero,8(sp)
  809c6c:	d8000115 	stw	zero,4(sp)
  809c70:	d8000015 	stw	zero,0(sp)
  809c74:	000f883a 	mov	r7,zero
  809c78:	000d883a 	mov	r6,zero
  809c7c:	e17ff717 	ldw	r5,-36(fp)
  809c80:	1009883a 	mov	r4,r2
  809c84:	08058500 	call	805850 <OS_TCBInit>
  809c88:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  809c8c:	e0bff803 	ldbu	r2,-32(fp)
  809c90:	1000061e 	bne	r2,zero,809cac <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  809c94:	d0a03b43 	ldbu	r2,-32531(gp)
  809c98:	10803fcc 	andi	r2,r2,255
  809c9c:	10800058 	cmpnei	r2,r2,1
  809ca0:	1000151e 	bne	r2,zero,809cf8 <OSTaskCreate+0x17c>
                OS_Sched();
  809ca4:	08054500 	call	805450 <OS_Sched>
  809ca8:	00001306 	br	809cf8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809cac:	0005303a 	rdctl	r2,status
  809cb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809cb4:	e0fffa17 	ldw	r3,-24(fp)
  809cb8:	00bfff84 	movi	r2,-2
  809cbc:	1884703a 	and	r2,r3,r2
  809cc0:	1001703a 	wrctl	status,r2
  
  return context;
  809cc4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  809cc8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  809ccc:	e0ffff03 	ldbu	r3,-4(fp)
  809cd0:	008020b4 	movhi	r2,130
  809cd4:	10a21b04 	addi	r2,r2,-30612
  809cd8:	18c7883a 	add	r3,r3,r3
  809cdc:	18c7883a 	add	r3,r3,r3
  809ce0:	10c5883a 	add	r2,r2,r3
  809ce4:	10000015 	stw	zero,0(r2)
  809ce8:	e0bff317 	ldw	r2,-52(fp)
  809cec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809cf0:	e0bff617 	ldw	r2,-40(fp)
  809cf4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  809cf8:	e0bff803 	ldbu	r2,-32(fp)
  809cfc:	00000506 	br	809d14 <OSTaskCreate+0x198>
  809d00:	e0bff317 	ldw	r2,-52(fp)
  809d04:	e0bff915 	stw	r2,-28(fp)
  809d08:	e0bff917 	ldw	r2,-28(fp)
  809d0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  809d10:	00800a04 	movi	r2,40
}
  809d14:	e037883a 	mov	sp,fp
  809d18:	dfc00117 	ldw	ra,4(sp)
  809d1c:	df000017 	ldw	fp,0(sp)
  809d20:	dec00204 	addi	sp,sp,8
  809d24:	f800283a 	ret

00809d28 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  809d28:	deffec04 	addi	sp,sp,-80
  809d2c:	dfc01315 	stw	ra,76(sp)
  809d30:	df001215 	stw	fp,72(sp)
  809d34:	df001204 	addi	fp,sp,72
  809d38:	e13ffa15 	stw	r4,-24(fp)
  809d3c:	e17ffb15 	stw	r5,-20(fp)
  809d40:	e1bffc15 	stw	r6,-16(fp)
  809d44:	3809883a 	mov	r4,r7
  809d48:	e0c00217 	ldw	r3,8(fp)
  809d4c:	e0800617 	ldw	r2,24(fp)
  809d50:	e13ffd05 	stb	r4,-12(fp)
  809d54:	e0fffe0d 	sth	r3,-8(fp)
  809d58:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  809d5c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  809d60:	e0bffd03 	ldbu	r2,-12(fp)
  809d64:	10800570 	cmpltui	r2,r2,21
  809d68:	1000021e 	bne	r2,zero,809d74 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  809d6c:	00800a84 	movi	r2,42
  809d70:	00006106 	br	809ef8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809d74:	0005303a 	rdctl	r2,status
  809d78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809d7c:	e0fff917 	ldw	r3,-28(fp)
  809d80:	00bfff84 	movi	r2,-2
  809d84:	1884703a 	and	r2,r3,r2
  809d88:	1001703a 	wrctl	status,r2
  
  return context;
  809d8c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  809d90:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  809d94:	d0a04903 	ldbu	r2,-32476(gp)
  809d98:	10803fcc 	andi	r2,r2,255
  809d9c:	10000626 	beq	r2,zero,809db8 <OSTaskCreateExt+0x90>
  809da0:	e0bff117 	ldw	r2,-60(fp)
  809da4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809da8:	e0bff217 	ldw	r2,-56(fp)
  809dac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  809db0:	00800f04 	movi	r2,60
  809db4:	00005006 	br	809ef8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  809db8:	e0fffd03 	ldbu	r3,-12(fp)
  809dbc:	008020b4 	movhi	r2,130
  809dc0:	10a21b04 	addi	r2,r2,-30612
  809dc4:	18c7883a 	add	r3,r3,r3
  809dc8:	18c7883a 	add	r3,r3,r3
  809dcc:	10c5883a 	add	r2,r2,r3
  809dd0:	10800017 	ldw	r2,0(r2)
  809dd4:	1000431e 	bne	r2,zero,809ee4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  809dd8:	e0fffd03 	ldbu	r3,-12(fp)
  809ddc:	008020b4 	movhi	r2,130
  809de0:	10a21b04 	addi	r2,r2,-30612
  809de4:	18c7883a 	add	r3,r3,r3
  809de8:	18c7883a 	add	r3,r3,r3
  809dec:	10c5883a 	add	r2,r2,r3
  809df0:	00c00044 	movi	r3,1
  809df4:	10c00015 	stw	r3,0(r2)
  809df8:	e0bff117 	ldw	r2,-60(fp)
  809dfc:	e0bff315 	stw	r2,-52(fp)
  809e00:	e0bff317 	ldw	r2,-52(fp)
  809e04:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  809e08:	e0bfff0b 	ldhu	r2,-4(fp)
  809e0c:	100d883a 	mov	r6,r2
  809e10:	e1400417 	ldw	r5,16(fp)
  809e14:	e1000317 	ldw	r4,12(fp)
  809e18:	080ad880 	call	80ad88 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  809e1c:	e0bfff0b 	ldhu	r2,-4(fp)
  809e20:	100f883a 	mov	r7,r2
  809e24:	e1bffc17 	ldw	r6,-16(fp)
  809e28:	e17ffb17 	ldw	r5,-20(fp)
  809e2c:	e13ffa17 	ldw	r4,-24(fp)
  809e30:	080eb740 	call	80eb74 <OSTaskStkInit>
  809e34:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  809e38:	e0fffd03 	ldbu	r3,-12(fp)
  809e3c:	e13ffe0b 	ldhu	r4,-8(fp)
  809e40:	e0bfff0b 	ldhu	r2,-4(fp)
  809e44:	d8800215 	stw	r2,8(sp)
  809e48:	e0800517 	ldw	r2,20(fp)
  809e4c:	d8800115 	stw	r2,4(sp)
  809e50:	e0800417 	ldw	r2,16(fp)
  809e54:	d8800015 	stw	r2,0(sp)
  809e58:	200f883a 	mov	r7,r4
  809e5c:	e1800317 	ldw	r6,12(fp)
  809e60:	e17ff517 	ldw	r5,-44(fp)
  809e64:	1809883a 	mov	r4,r3
  809e68:	08058500 	call	805850 <OS_TCBInit>
  809e6c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  809e70:	e0bff603 	ldbu	r2,-40(fp)
  809e74:	1000061e 	bne	r2,zero,809e90 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  809e78:	d0a03b43 	ldbu	r2,-32531(gp)
  809e7c:	10803fcc 	andi	r2,r2,255
  809e80:	10800058 	cmpnei	r2,r2,1
  809e84:	1000151e 	bne	r2,zero,809edc <OSTaskCreateExt+0x1b4>
                OS_Sched();
  809e88:	08054500 	call	805450 <OS_Sched>
  809e8c:	00001306 	br	809edc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809e90:	0005303a 	rdctl	r2,status
  809e94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809e98:	e0fff817 	ldw	r3,-32(fp)
  809e9c:	00bfff84 	movi	r2,-2
  809ea0:	1884703a 	and	r2,r3,r2
  809ea4:	1001703a 	wrctl	status,r2
  
  return context;
  809ea8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  809eac:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  809eb0:	e0fffd03 	ldbu	r3,-12(fp)
  809eb4:	008020b4 	movhi	r2,130
  809eb8:	10a21b04 	addi	r2,r2,-30612
  809ebc:	18c7883a 	add	r3,r3,r3
  809ec0:	18c7883a 	add	r3,r3,r3
  809ec4:	10c5883a 	add	r2,r2,r3
  809ec8:	10000015 	stw	zero,0(r2)
  809ecc:	e0bff117 	ldw	r2,-60(fp)
  809ed0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809ed4:	e0bff417 	ldw	r2,-48(fp)
  809ed8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  809edc:	e0bff603 	ldbu	r2,-40(fp)
  809ee0:	00000506 	br	809ef8 <OSTaskCreateExt+0x1d0>
  809ee4:	e0bff117 	ldw	r2,-60(fp)
  809ee8:	e0bff715 	stw	r2,-36(fp)
  809eec:	e0bff717 	ldw	r2,-36(fp)
  809ef0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  809ef4:	00800a04 	movi	r2,40
}
  809ef8:	e037883a 	mov	sp,fp
  809efc:	dfc00117 	ldw	ra,4(sp)
  809f00:	df000017 	ldw	fp,0(sp)
  809f04:	dec00204 	addi	sp,sp,8
  809f08:	f800283a 	ret

00809f0c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  809f0c:	defff404 	addi	sp,sp,-48
  809f10:	dfc00b15 	stw	ra,44(sp)
  809f14:	df000a15 	stw	fp,40(sp)
  809f18:	df000a04 	addi	fp,sp,40
  809f1c:	2005883a 	mov	r2,r4
  809f20:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  809f24:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  809f28:	d0a04903 	ldbu	r2,-32476(gp)
  809f2c:	10803fcc 	andi	r2,r2,255
  809f30:	10000226 	beq	r2,zero,809f3c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  809f34:	00801004 	movi	r2,64
  809f38:	0000c006 	br	80a23c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  809f3c:	e0bfff03 	ldbu	r2,-4(fp)
  809f40:	10800518 	cmpnei	r2,r2,20
  809f44:	1000021e 	bne	r2,zero,809f50 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  809f48:	00800f84 	movi	r2,62
  809f4c:	0000bb06 	br	80a23c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  809f50:	e0bfff03 	ldbu	r2,-4(fp)
  809f54:	10800530 	cmpltui	r2,r2,20
  809f58:	1000051e 	bne	r2,zero,809f70 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  809f5c:	e0bfff03 	ldbu	r2,-4(fp)
  809f60:	10803fe0 	cmpeqi	r2,r2,255
  809f64:	1000021e 	bne	r2,zero,809f70 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  809f68:	00800a84 	movi	r2,42
  809f6c:	0000b306 	br	80a23c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809f70:	0005303a 	rdctl	r2,status
  809f74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809f78:	e0fffe17 	ldw	r3,-8(fp)
  809f7c:	00bfff84 	movi	r2,-2
  809f80:	1884703a 	and	r2,r3,r2
  809f84:	1001703a 	wrctl	status,r2
  
  return context;
  809f88:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  809f8c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  809f90:	e0bfff03 	ldbu	r2,-4(fp)
  809f94:	10803fd8 	cmpnei	r2,r2,255
  809f98:	1000031e 	bne	r2,zero,809fa8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  809f9c:	d0a04a17 	ldw	r2,-32472(gp)
  809fa0:	10800c83 	ldbu	r2,50(r2)
  809fa4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  809fa8:	e0ffff03 	ldbu	r3,-4(fp)
  809fac:	008020b4 	movhi	r2,130
  809fb0:	10a21b04 	addi	r2,r2,-30612
  809fb4:	18c7883a 	add	r3,r3,r3
  809fb8:	18c7883a 	add	r3,r3,r3
  809fbc:	10c5883a 	add	r2,r2,r3
  809fc0:	10800017 	ldw	r2,0(r2)
  809fc4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  809fc8:	e0bff817 	ldw	r2,-32(fp)
  809fcc:	1000061e 	bne	r2,zero,809fe8 <OSTaskDel+0xdc>
  809fd0:	e0bff617 	ldw	r2,-40(fp)
  809fd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809fd8:	e0bff717 	ldw	r2,-36(fp)
  809fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  809fe0:	008010c4 	movi	r2,67
  809fe4:	00009506 	br	80a23c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  809fe8:	e0bff817 	ldw	r2,-32(fp)
  809fec:	10800058 	cmpnei	r2,r2,1
  809ff0:	1000061e 	bne	r2,zero,80a00c <OSTaskDel+0x100>
  809ff4:	e0bff617 	ldw	r2,-40(fp)
  809ff8:	e0bff915 	stw	r2,-28(fp)
  809ffc:	e0bff917 	ldw	r2,-28(fp)
  80a000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80a004:	00800f44 	movi	r2,61
  80a008:	00008c06 	br	80a23c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80a00c:	e0bff817 	ldw	r2,-32(fp)
  80a010:	10800d03 	ldbu	r2,52(r2)
  80a014:	10c03fcc 	andi	r3,r2,255
  80a018:	e0bff817 	ldw	r2,-32(fp)
  80a01c:	10800d03 	ldbu	r2,52(r2)
  80a020:	11003fcc 	andi	r4,r2,255
  80a024:	d0a04744 	addi	r2,gp,-32483
  80a028:	2085883a 	add	r2,r4,r2
  80a02c:	10800003 	ldbu	r2,0(r2)
  80a030:	1009883a 	mov	r4,r2
  80a034:	e0bff817 	ldw	r2,-32(fp)
  80a038:	10800d43 	ldbu	r2,53(r2)
  80a03c:	0084303a 	nor	r2,zero,r2
  80a040:	2084703a 	and	r2,r4,r2
  80a044:	1009883a 	mov	r4,r2
  80a048:	d0a04744 	addi	r2,gp,-32483
  80a04c:	1885883a 	add	r2,r3,r2
  80a050:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80a054:	e0bff817 	ldw	r2,-32(fp)
  80a058:	10800d03 	ldbu	r2,52(r2)
  80a05c:	10c03fcc 	andi	r3,r2,255
  80a060:	d0a04744 	addi	r2,gp,-32483
  80a064:	1885883a 	add	r2,r3,r2
  80a068:	10800003 	ldbu	r2,0(r2)
  80a06c:	10803fcc 	andi	r2,r2,255
  80a070:	1000071e 	bne	r2,zero,80a090 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80a074:	e0bff817 	ldw	r2,-32(fp)
  80a078:	10800d83 	ldbu	r2,54(r2)
  80a07c:	0084303a 	nor	r2,zero,r2
  80a080:	1007883a 	mov	r3,r2
  80a084:	d0a04703 	ldbu	r2,-32484(gp)
  80a088:	1884703a 	and	r2,r3,r2
  80a08c:	d0a04705 	stb	r2,-32484(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80a090:	e0bff817 	ldw	r2,-32(fp)
  80a094:	10800717 	ldw	r2,28(r2)
  80a098:	10000526 	beq	r2,zero,80a0b0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80a09c:	e0bff817 	ldw	r2,-32(fp)
  80a0a0:	10800717 	ldw	r2,28(r2)
  80a0a4:	100b883a 	mov	r5,r2
  80a0a8:	e13ff817 	ldw	r4,-32(fp)
  80a0ac:	0804dfc0 	call	804dfc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80a0b0:	e0bff817 	ldw	r2,-32(fp)
  80a0b4:	10800817 	ldw	r2,32(r2)
  80a0b8:	10000526 	beq	r2,zero,80a0d0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80a0bc:	e0bff817 	ldw	r2,-32(fp)
  80a0c0:	10800817 	ldw	r2,32(r2)
  80a0c4:	100b883a 	mov	r5,r2
  80a0c8:	e13ff817 	ldw	r4,-32(fp)
  80a0cc:	0804eb40 	call	804eb4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80a0d0:	e0bff817 	ldw	r2,-32(fp)
  80a0d4:	10800a17 	ldw	r2,40(r2)
  80a0d8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80a0dc:	e0bffb17 	ldw	r2,-20(fp)
  80a0e0:	10000226 	beq	r2,zero,80a0ec <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80a0e4:	e13ffb17 	ldw	r4,-20(fp)
  80a0e8:	08073240 	call	807324 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80a0ec:	e0bff817 	ldw	r2,-32(fp)
  80a0f0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80a0f4:	e0bff817 	ldw	r2,-32(fp)
  80a0f8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80a0fc:	e0bff817 	ldw	r2,-32(fp)
  80a100:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80a104:	d0a03b03 	ldbu	r2,-32532(gp)
  80a108:	10803fcc 	andi	r2,r2,255
  80a10c:	10803fe0 	cmpeqi	r2,r2,255
  80a110:	1000031e 	bne	r2,zero,80a120 <OSTaskDel+0x214>
        OSLockNesting++;
  80a114:	d0a03b03 	ldbu	r2,-32532(gp)
  80a118:	10800044 	addi	r2,r2,1
  80a11c:	d0a03b05 	stb	r2,-32532(gp)
  80a120:	e0bff617 	ldw	r2,-40(fp)
  80a124:	e0bffd15 	stw	r2,-12(fp)
  80a128:	e0bffd17 	ldw	r2,-12(fp)
  80a12c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80a130:	08049e40 	call	8049e4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a134:	0005303a 	rdctl	r2,status
  80a138:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a13c:	e0fffa17 	ldw	r3,-24(fp)
  80a140:	00bfff84 	movi	r2,-2
  80a144:	1884703a 	and	r2,r3,r2
  80a148:	1001703a 	wrctl	status,r2
  
  return context;
  80a14c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80a150:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80a154:	d0a03b03 	ldbu	r2,-32532(gp)
  80a158:	10803fcc 	andi	r2,r2,255
  80a15c:	10000326 	beq	r2,zero,80a16c <OSTaskDel+0x260>
        OSLockNesting--;
  80a160:	d0a03b03 	ldbu	r2,-32532(gp)
  80a164:	10bfffc4 	addi	r2,r2,-1
  80a168:	d0a03b05 	stb	r2,-32532(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80a16c:	e13ff817 	ldw	r4,-32(fp)
  80a170:	080ecf40 	call	80ecf4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80a174:	d0a04343 	ldbu	r2,-32499(gp)
  80a178:	10bfffc4 	addi	r2,r2,-1
  80a17c:	d0a04345 	stb	r2,-32499(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80a180:	e0ffff03 	ldbu	r3,-4(fp)
  80a184:	008020b4 	movhi	r2,130
  80a188:	10a21b04 	addi	r2,r2,-30612
  80a18c:	18c7883a 	add	r3,r3,r3
  80a190:	18c7883a 	add	r3,r3,r3
  80a194:	10c5883a 	add	r2,r2,r3
  80a198:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80a19c:	e0bff817 	ldw	r2,-32(fp)
  80a1a0:	10800617 	ldw	r2,24(r2)
  80a1a4:	1000071e 	bne	r2,zero,80a1c4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80a1a8:	e0bff817 	ldw	r2,-32(fp)
  80a1ac:	10800517 	ldw	r2,20(r2)
  80a1b0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80a1b4:	e0bff817 	ldw	r2,-32(fp)
  80a1b8:	10800517 	ldw	r2,20(r2)
  80a1bc:	d0a03e15 	stw	r2,-32520(gp)
  80a1c0:	00000a06 	br	80a1ec <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80a1c4:	e0bff817 	ldw	r2,-32(fp)
  80a1c8:	10800617 	ldw	r2,24(r2)
  80a1cc:	e0fff817 	ldw	r3,-32(fp)
  80a1d0:	18c00517 	ldw	r3,20(r3)
  80a1d4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80a1d8:	e0bff817 	ldw	r2,-32(fp)
  80a1dc:	10800517 	ldw	r2,20(r2)
  80a1e0:	e0fff817 	ldw	r3,-32(fp)
  80a1e4:	18c00617 	ldw	r3,24(r3)
  80a1e8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80a1ec:	d0e04217 	ldw	r3,-32504(gp)
  80a1f0:	e0bff817 	ldw	r2,-32(fp)
  80a1f4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80a1f8:	e0bff817 	ldw	r2,-32(fp)
  80a1fc:	d0a04215 	stw	r2,-32504(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80a200:	e0bff817 	ldw	r2,-32(fp)
  80a204:	00c00fc4 	movi	r3,63
  80a208:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80a20c:	e0bff817 	ldw	r2,-32(fp)
  80a210:	10001345 	stb	zero,77(r2)
  80a214:	e0bff617 	ldw	r2,-40(fp)
  80a218:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a21c:	e0bffc17 	ldw	r2,-16(fp)
  80a220:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80a224:	d0a03b43 	ldbu	r2,-32531(gp)
  80a228:	10803fcc 	andi	r2,r2,255
  80a22c:	10800058 	cmpnei	r2,r2,1
  80a230:	1000011e 	bne	r2,zero,80a238 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  80a234:	08054500 	call	805450 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80a238:	0005883a 	mov	r2,zero
}
  80a23c:	e037883a 	mov	sp,fp
  80a240:	dfc00117 	ldw	ra,4(sp)
  80a244:	df000017 	ldw	fp,0(sp)
  80a248:	dec00204 	addi	sp,sp,8
  80a24c:	f800283a 	ret

0080a250 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80a250:	defff504 	addi	sp,sp,-44
  80a254:	df000a15 	stw	fp,40(sp)
  80a258:	df000a04 	addi	fp,sp,40
  80a25c:	2005883a 	mov	r2,r4
  80a260:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a264:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80a268:	e0bfff03 	ldbu	r2,-4(fp)
  80a26c:	10800518 	cmpnei	r2,r2,20
  80a270:	1000021e 	bne	r2,zero,80a27c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80a274:	00800f84 	movi	r2,62
  80a278:	00004506 	br	80a390 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80a27c:	e0bfff03 	ldbu	r2,-4(fp)
  80a280:	10800530 	cmpltui	r2,r2,20
  80a284:	1000051e 	bne	r2,zero,80a29c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  80a288:	e0bfff03 	ldbu	r2,-4(fp)
  80a28c:	10803fe0 	cmpeqi	r2,r2,255
  80a290:	1000021e 	bne	r2,zero,80a29c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  80a294:	00800a84 	movi	r2,42
  80a298:	00003d06 	br	80a390 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80a29c:	e0bfff03 	ldbu	r2,-4(fp)
  80a2a0:	10803fd8 	cmpnei	r2,r2,255
  80a2a4:	1000111e 	bne	r2,zero,80a2ec <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a2a8:	0005303a 	rdctl	r2,status
  80a2ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a2b0:	e0fff917 	ldw	r3,-28(fp)
  80a2b4:	00bfff84 	movi	r2,-2
  80a2b8:	1884703a 	and	r2,r3,r2
  80a2bc:	1001703a 	wrctl	status,r2
  
  return context;
  80a2c0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80a2c4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80a2c8:	d0a04a17 	ldw	r2,-32472(gp)
  80a2cc:	10800dc3 	ldbu	r2,55(r2)
  80a2d0:	e0bff805 	stb	r2,-32(fp)
  80a2d4:	e0bff617 	ldw	r2,-40(fp)
  80a2d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a2dc:	e0bffe17 	ldw	r2,-8(fp)
  80a2e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80a2e4:	e0bff803 	ldbu	r2,-32(fp)
  80a2e8:	00002906 	br	80a390 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a2ec:	0005303a 	rdctl	r2,status
  80a2f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a2f4:	e0fff717 	ldw	r3,-36(fp)
  80a2f8:	00bfff84 	movi	r2,-2
  80a2fc:	1884703a 	and	r2,r3,r2
  80a300:	1001703a 	wrctl	status,r2
  
  return context;
  80a304:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80a308:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  80a30c:	e0ffff03 	ldbu	r3,-4(fp)
  80a310:	008020b4 	movhi	r2,130
  80a314:	10a21b04 	addi	r2,r2,-30612
  80a318:	18c7883a 	add	r3,r3,r3
  80a31c:	18c7883a 	add	r3,r3,r3
  80a320:	10c5883a 	add	r2,r2,r3
  80a324:	10800017 	ldw	r2,0(r2)
  80a328:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80a32c:	e0bffb17 	ldw	r2,-20(fp)
  80a330:	1000061e 	bne	r2,zero,80a34c <OSTaskDelReq+0xfc>
  80a334:	e0bff617 	ldw	r2,-40(fp)
  80a338:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a33c:	e0bffa17 	ldw	r2,-24(fp)
  80a340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80a344:	008010c4 	movi	r2,67
  80a348:	00001106 	br	80a390 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80a34c:	e0bffb17 	ldw	r2,-20(fp)
  80a350:	10800058 	cmpnei	r2,r2,1
  80a354:	1000061e 	bne	r2,zero,80a370 <OSTaskDelReq+0x120>
  80a358:	e0bff617 	ldw	r2,-40(fp)
  80a35c:	e0bffc15 	stw	r2,-16(fp)
  80a360:	e0bffc17 	ldw	r2,-16(fp)
  80a364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80a368:	00800f44 	movi	r2,61
  80a36c:	00000806 	br	80a390 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80a370:	e0bffb17 	ldw	r2,-20(fp)
  80a374:	00c00fc4 	movi	r3,63
  80a378:	10c00dc5 	stb	r3,55(r2)
  80a37c:	e0bff617 	ldw	r2,-40(fp)
  80a380:	e0bffd15 	stw	r2,-12(fp)
  80a384:	e0bffd17 	ldw	r2,-12(fp)
  80a388:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80a38c:	0005883a 	mov	r2,zero
}
  80a390:	e037883a 	mov	sp,fp
  80a394:	df000017 	ldw	fp,0(sp)
  80a398:	dec00104 	addi	sp,sp,4
  80a39c:	f800283a 	ret

0080a3a0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80a3a0:	defff404 	addi	sp,sp,-48
  80a3a4:	dfc00b15 	stw	ra,44(sp)
  80a3a8:	df000a15 	stw	fp,40(sp)
  80a3ac:	df000a04 	addi	fp,sp,40
  80a3b0:	2005883a 	mov	r2,r4
  80a3b4:	e17ffe15 	stw	r5,-8(fp)
  80a3b8:	e1bfff15 	stw	r6,-4(fp)
  80a3bc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80a3c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80a3c4:	e0bfff17 	ldw	r2,-4(fp)
  80a3c8:	1000021e 	bne	r2,zero,80a3d4 <OSTaskNameGet+0x34>
        return (0);
  80a3cc:	0005883a 	mov	r2,zero
  80a3d0:	00005406 	br	80a524 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80a3d4:	e0bffd03 	ldbu	r2,-12(fp)
  80a3d8:	10800570 	cmpltui	r2,r2,21
  80a3dc:	1000081e 	bne	r2,zero,80a400 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80a3e0:	e0bffd03 	ldbu	r2,-12(fp)
  80a3e4:	10803fe0 	cmpeqi	r2,r2,255
  80a3e8:	1000051e 	bne	r2,zero,80a400 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80a3ec:	e0bfff17 	ldw	r2,-4(fp)
  80a3f0:	00c00a84 	movi	r3,42
  80a3f4:	10c00005 	stb	r3,0(r2)
            return (0);
  80a3f8:	0005883a 	mov	r2,zero
  80a3fc:	00004906 	br	80a524 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80a400:	e0bffe17 	ldw	r2,-8(fp)
  80a404:	1000051e 	bne	r2,zero,80a41c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80a408:	e0bfff17 	ldw	r2,-4(fp)
  80a40c:	00c00304 	movi	r3,12
  80a410:	10c00005 	stb	r3,0(r2)
        return (0);
  80a414:	0005883a 	mov	r2,zero
  80a418:	00004206 	br	80a524 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80a41c:	d0a04903 	ldbu	r2,-32476(gp)
  80a420:	10803fcc 	andi	r2,r2,255
  80a424:	10000526 	beq	r2,zero,80a43c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  80a428:	e0bfff17 	ldw	r2,-4(fp)
  80a42c:	00c00444 	movi	r3,17
  80a430:	10c00005 	stb	r3,0(r2)
        return (0);
  80a434:	0005883a 	mov	r2,zero
  80a438:	00003a06 	br	80a524 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a43c:	0005303a 	rdctl	r2,status
  80a440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a444:	e0fffc17 	ldw	r3,-16(fp)
  80a448:	00bfff84 	movi	r2,-2
  80a44c:	1884703a 	and	r2,r3,r2
  80a450:	1001703a 	wrctl	status,r2
  
  return context;
  80a454:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80a458:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80a45c:	e0bffd03 	ldbu	r2,-12(fp)
  80a460:	10803fd8 	cmpnei	r2,r2,255
  80a464:	1000031e 	bne	r2,zero,80a474 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  80a468:	d0a04a17 	ldw	r2,-32472(gp)
  80a46c:	10800c83 	ldbu	r2,50(r2)
  80a470:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a474:	e0fffd03 	ldbu	r3,-12(fp)
  80a478:	008020b4 	movhi	r2,130
  80a47c:	10a21b04 	addi	r2,r2,-30612
  80a480:	18c7883a 	add	r3,r3,r3
  80a484:	18c7883a 	add	r3,r3,r3
  80a488:	10c5883a 	add	r2,r2,r3
  80a48c:	10800017 	ldw	r2,0(r2)
  80a490:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  80a494:	e0bff817 	ldw	r2,-32(fp)
  80a498:	1000091e 	bne	r2,zero,80a4c0 <OSTaskNameGet+0x120>
  80a49c:	e0bff617 	ldw	r2,-40(fp)
  80a4a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a4a4:	e0bff717 	ldw	r2,-36(fp)
  80a4a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a4ac:	e0bfff17 	ldw	r2,-4(fp)
  80a4b0:	00c010c4 	movi	r3,67
  80a4b4:	10c00005 	stb	r3,0(r2)
        return (0);
  80a4b8:	0005883a 	mov	r2,zero
  80a4bc:	00001906 	br	80a524 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  80a4c0:	e0bff817 	ldw	r2,-32(fp)
  80a4c4:	10800058 	cmpnei	r2,r2,1
  80a4c8:	1000091e 	bne	r2,zero,80a4f0 <OSTaskNameGet+0x150>
  80a4cc:	e0bff617 	ldw	r2,-40(fp)
  80a4d0:	e0bff915 	stw	r2,-28(fp)
  80a4d4:	e0bff917 	ldw	r2,-28(fp)
  80a4d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a4dc:	e0bfff17 	ldw	r2,-4(fp)
  80a4e0:	00c010c4 	movi	r3,67
  80a4e4:	10c00005 	stb	r3,0(r2)
        return (0);
  80a4e8:	0005883a 	mov	r2,zero
  80a4ec:	00000d06 	br	80a524 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80a4f0:	e0bff817 	ldw	r2,-32(fp)
  80a4f4:	10801304 	addi	r2,r2,76
  80a4f8:	100b883a 	mov	r5,r2
  80a4fc:	e13ffe17 	ldw	r4,-8(fp)
  80a500:	08055940 	call	805594 <OS_StrCopy>
  80a504:	e0bffb05 	stb	r2,-20(fp)
  80a508:	e0bff617 	ldw	r2,-40(fp)
  80a50c:	e0bffa15 	stw	r2,-24(fp)
  80a510:	e0bffa17 	ldw	r2,-24(fp)
  80a514:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80a518:	e0bfff17 	ldw	r2,-4(fp)
  80a51c:	10000005 	stb	zero,0(r2)
    return (len);
  80a520:	e0bffb03 	ldbu	r2,-20(fp)
}
  80a524:	e037883a 	mov	sp,fp
  80a528:	dfc00117 	ldw	ra,4(sp)
  80a52c:	df000017 	ldw	fp,0(sp)
  80a530:	dec00204 	addi	sp,sp,8
  80a534:	f800283a 	ret

0080a538 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80a538:	defff304 	addi	sp,sp,-52
  80a53c:	dfc00c15 	stw	ra,48(sp)
  80a540:	df000b15 	stw	fp,44(sp)
  80a544:	df000b04 	addi	fp,sp,44
  80a548:	2005883a 	mov	r2,r4
  80a54c:	e17ffe15 	stw	r5,-8(fp)
  80a550:	e1bfff15 	stw	r6,-4(fp)
  80a554:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80a558:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80a55c:	e0bfff17 	ldw	r2,-4(fp)
  80a560:	10005c26 	beq	r2,zero,80a6d4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  80a564:	e0bffd03 	ldbu	r2,-12(fp)
  80a568:	10800570 	cmpltui	r2,r2,21
  80a56c:	1000071e 	bne	r2,zero,80a58c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80a570:	e0bffd03 	ldbu	r2,-12(fp)
  80a574:	10803fe0 	cmpeqi	r2,r2,255
  80a578:	1000041e 	bne	r2,zero,80a58c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  80a57c:	e0bfff17 	ldw	r2,-4(fp)
  80a580:	00c00a84 	movi	r3,42
  80a584:	10c00005 	stb	r3,0(r2)
            return;
  80a588:	00005306 	br	80a6d8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  80a58c:	e0bffe17 	ldw	r2,-8(fp)
  80a590:	1000041e 	bne	r2,zero,80a5a4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  80a594:	e0bfff17 	ldw	r2,-4(fp)
  80a598:	00c00304 	movi	r3,12
  80a59c:	10c00005 	stb	r3,0(r2)
        return;
  80a5a0:	00004d06 	br	80a6d8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80a5a4:	d0a04903 	ldbu	r2,-32476(gp)
  80a5a8:	10803fcc 	andi	r2,r2,255
  80a5ac:	10000426 	beq	r2,zero,80a5c0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  80a5b0:	e0bfff17 	ldw	r2,-4(fp)
  80a5b4:	00c00484 	movi	r3,18
  80a5b8:	10c00005 	stb	r3,0(r2)
        return;
  80a5bc:	00004606 	br	80a6d8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a5c0:	0005303a 	rdctl	r2,status
  80a5c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a5c8:	e0fffc17 	ldw	r3,-16(fp)
  80a5cc:	00bfff84 	movi	r2,-2
  80a5d0:	1884703a 	and	r2,r3,r2
  80a5d4:	1001703a 	wrctl	status,r2
  
  return context;
  80a5d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80a5dc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  80a5e0:	e0bffd03 	ldbu	r2,-12(fp)
  80a5e4:	10803fd8 	cmpnei	r2,r2,255
  80a5e8:	1000031e 	bne	r2,zero,80a5f8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  80a5ec:	d0a04a17 	ldw	r2,-32472(gp)
  80a5f0:	10800c83 	ldbu	r2,50(r2)
  80a5f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a5f8:	e0fffd03 	ldbu	r3,-12(fp)
  80a5fc:	008020b4 	movhi	r2,130
  80a600:	10a21b04 	addi	r2,r2,-30612
  80a604:	18c7883a 	add	r3,r3,r3
  80a608:	18c7883a 	add	r3,r3,r3
  80a60c:	10c5883a 	add	r2,r2,r3
  80a610:	10800017 	ldw	r2,0(r2)
  80a614:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  80a618:	e0bff717 	ldw	r2,-36(fp)
  80a61c:	1000081e 	bne	r2,zero,80a640 <OSTaskNameSet+0x108>
  80a620:	e0bff517 	ldw	r2,-44(fp)
  80a624:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a628:	e0bff617 	ldw	r2,-40(fp)
  80a62c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a630:	e0bfff17 	ldw	r2,-4(fp)
  80a634:	00c010c4 	movi	r3,67
  80a638:	10c00005 	stb	r3,0(r2)
        return;
  80a63c:	00002606 	br	80a6d8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80a640:	e0bff717 	ldw	r2,-36(fp)
  80a644:	10800058 	cmpnei	r2,r2,1
  80a648:	1000081e 	bne	r2,zero,80a66c <OSTaskNameSet+0x134>
  80a64c:	e0bff517 	ldw	r2,-44(fp)
  80a650:	e0bff815 	stw	r2,-32(fp)
  80a654:	e0bff817 	ldw	r2,-32(fp)
  80a658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a65c:	e0bfff17 	ldw	r2,-4(fp)
  80a660:	00c010c4 	movi	r3,67
  80a664:	10c00005 	stb	r3,0(r2)
        return;
  80a668:	00001b06 	br	80a6d8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80a66c:	e13ffe17 	ldw	r4,-8(fp)
  80a670:	08056080 	call	805608 <OS_StrLen>
  80a674:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  80a678:	e0bffa03 	ldbu	r2,-24(fp)
  80a67c:	10800830 	cmpltui	r2,r2,32
  80a680:	1000081e 	bne	r2,zero,80a6a4 <OSTaskNameSet+0x16c>
  80a684:	e0bff517 	ldw	r2,-44(fp)
  80a688:	e0bff915 	stw	r2,-28(fp)
  80a68c:	e0bff917 	ldw	r2,-28(fp)
  80a690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  80a694:	e0bfff17 	ldw	r2,-4(fp)
  80a698:	00c01044 	movi	r3,65
  80a69c:	10c00005 	stb	r3,0(r2)
        return;
  80a6a0:	00000d06 	br	80a6d8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  80a6a4:	e0bff717 	ldw	r2,-36(fp)
  80a6a8:	10801304 	addi	r2,r2,76
  80a6ac:	e17ffe17 	ldw	r5,-8(fp)
  80a6b0:	1009883a 	mov	r4,r2
  80a6b4:	08055940 	call	805594 <OS_StrCopy>
  80a6b8:	e0bff517 	ldw	r2,-44(fp)
  80a6bc:	e0bffb15 	stw	r2,-20(fp)
  80a6c0:	e0bffb17 	ldw	r2,-20(fp)
  80a6c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80a6c8:	e0bfff17 	ldw	r2,-4(fp)
  80a6cc:	10000005 	stb	zero,0(r2)
  80a6d0:	00000106 	br	80a6d8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  80a6d4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80a6d8:	e037883a 	mov	sp,fp
  80a6dc:	dfc00117 	ldw	ra,4(sp)
  80a6e0:	df000017 	ldw	fp,0(sp)
  80a6e4:	dec00204 	addi	sp,sp,8
  80a6e8:	f800283a 	ret

0080a6ec <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  80a6ec:	defff404 	addi	sp,sp,-48
  80a6f0:	dfc00b15 	stw	ra,44(sp)
  80a6f4:	df000a15 	stw	fp,40(sp)
  80a6f8:	df000a04 	addi	fp,sp,40
  80a6fc:	2005883a 	mov	r2,r4
  80a700:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80a704:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  80a708:	e0bfff03 	ldbu	r2,-4(fp)
  80a70c:	10800530 	cmpltui	r2,r2,20
  80a710:	1000021e 	bne	r2,zero,80a71c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80a714:	00800a84 	movi	r2,42
  80a718:	00006406 	br	80a8ac <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a71c:	0005303a 	rdctl	r2,status
  80a720:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a724:	e0fffe17 	ldw	r3,-8(fp)
  80a728:	00bfff84 	movi	r2,-2
  80a72c:	1884703a 	and	r2,r3,r2
  80a730:	1001703a 	wrctl	status,r2
  
  return context;
  80a734:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a738:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  80a73c:	e0ffff03 	ldbu	r3,-4(fp)
  80a740:	008020b4 	movhi	r2,130
  80a744:	10a21b04 	addi	r2,r2,-30612
  80a748:	18c7883a 	add	r3,r3,r3
  80a74c:	18c7883a 	add	r3,r3,r3
  80a750:	10c5883a 	add	r2,r2,r3
  80a754:	10800017 	ldw	r2,0(r2)
  80a758:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  80a75c:	e0bff817 	ldw	r2,-32(fp)
  80a760:	1000061e 	bne	r2,zero,80a77c <OSTaskResume+0x90>
  80a764:	e0bff617 	ldw	r2,-40(fp)
  80a768:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a76c:	e0bff717 	ldw	r2,-36(fp)
  80a770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  80a774:	00801184 	movi	r2,70
  80a778:	00004c06 	br	80a8ac <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  80a77c:	e0bff817 	ldw	r2,-32(fp)
  80a780:	10800058 	cmpnei	r2,r2,1
  80a784:	1000061e 	bne	r2,zero,80a7a0 <OSTaskResume+0xb4>
  80a788:	e0bff617 	ldw	r2,-40(fp)
  80a78c:	e0bff915 	stw	r2,-28(fp)
  80a790:	e0bff917 	ldw	r2,-28(fp)
  80a794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80a798:	008010c4 	movi	r2,67
  80a79c:	00004306 	br	80a8ac <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80a7a0:	e0bff817 	ldw	r2,-32(fp)
  80a7a4:	10800c03 	ldbu	r2,48(r2)
  80a7a8:	10803fcc 	andi	r2,r2,255
  80a7ac:	1080020c 	andi	r2,r2,8
  80a7b0:	10003926 	beq	r2,zero,80a898 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80a7b4:	e0bff817 	ldw	r2,-32(fp)
  80a7b8:	10c00c03 	ldbu	r3,48(r2)
  80a7bc:	00bffdc4 	movi	r2,-9
  80a7c0:	1884703a 	and	r2,r3,r2
  80a7c4:	1007883a 	mov	r3,r2
  80a7c8:	e0bff817 	ldw	r2,-32(fp)
  80a7cc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80a7d0:	e0bff817 	ldw	r2,-32(fp)
  80a7d4:	10800c03 	ldbu	r2,48(r2)
  80a7d8:	10803fcc 	andi	r2,r2,255
  80a7dc:	1000281e 	bne	r2,zero,80a880 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  80a7e0:	e0bff817 	ldw	r2,-32(fp)
  80a7e4:	10800b8b 	ldhu	r2,46(r2)
  80a7e8:	10bfffcc 	andi	r2,r2,65535
  80a7ec:	10001f1e 	bne	r2,zero,80a86c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80a7f0:	e0bff817 	ldw	r2,-32(fp)
  80a7f4:	10c00d83 	ldbu	r3,54(r2)
  80a7f8:	d0a04703 	ldbu	r2,-32484(gp)
  80a7fc:	1884b03a 	or	r2,r3,r2
  80a800:	d0a04705 	stb	r2,-32484(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80a804:	e0bff817 	ldw	r2,-32(fp)
  80a808:	10800d03 	ldbu	r2,52(r2)
  80a80c:	10c03fcc 	andi	r3,r2,255
  80a810:	e0bff817 	ldw	r2,-32(fp)
  80a814:	10800d03 	ldbu	r2,52(r2)
  80a818:	11003fcc 	andi	r4,r2,255
  80a81c:	d0a04744 	addi	r2,gp,-32483
  80a820:	2085883a 	add	r2,r4,r2
  80a824:	11000003 	ldbu	r4,0(r2)
  80a828:	e0bff817 	ldw	r2,-32(fp)
  80a82c:	10800d43 	ldbu	r2,53(r2)
  80a830:	2084b03a 	or	r2,r4,r2
  80a834:	1009883a 	mov	r4,r2
  80a838:	d0a04744 	addi	r2,gp,-32483
  80a83c:	1885883a 	add	r2,r3,r2
  80a840:	11000005 	stb	r4,0(r2)
  80a844:	e0bff617 	ldw	r2,-40(fp)
  80a848:	e0bffa15 	stw	r2,-24(fp)
  80a84c:	e0bffa17 	ldw	r2,-24(fp)
  80a850:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  80a854:	d0a03b43 	ldbu	r2,-32531(gp)
  80a858:	10803fcc 	andi	r2,r2,255
  80a85c:	10800058 	cmpnei	r2,r2,1
  80a860:	10000b1e 	bne	r2,zero,80a890 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  80a864:	08054500 	call	805450 <OS_Sched>
  80a868:	00000906 	br	80a890 <OSTaskResume+0x1a4>
  80a86c:	e0bff617 	ldw	r2,-40(fp)
  80a870:	e0bffb15 	stw	r2,-20(fp)
  80a874:	e0bffb17 	ldw	r2,-20(fp)
  80a878:	1001703a 	wrctl	status,r2
  80a87c:	00000406 	br	80a890 <OSTaskResume+0x1a4>
  80a880:	e0bff617 	ldw	r2,-40(fp)
  80a884:	e0bffc15 	stw	r2,-16(fp)
  80a888:	e0bffc17 	ldw	r2,-16(fp)
  80a88c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80a890:	0005883a 	mov	r2,zero
  80a894:	00000506 	br	80a8ac <OSTaskResume+0x1c0>
  80a898:	e0bff617 	ldw	r2,-40(fp)
  80a89c:	e0bffd15 	stw	r2,-12(fp)
  80a8a0:	e0bffd17 	ldw	r2,-12(fp)
  80a8a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  80a8a8:	00801104 	movi	r2,68
}
  80a8ac:	e037883a 	mov	sp,fp
  80a8b0:	dfc00117 	ldw	ra,4(sp)
  80a8b4:	df000017 	ldw	fp,0(sp)
  80a8b8:	dec00204 	addi	sp,sp,8
  80a8bc:	f800283a 	ret

0080a8c0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80a8c0:	defff304 	addi	sp,sp,-52
  80a8c4:	df000c15 	stw	fp,48(sp)
  80a8c8:	df000c04 	addi	fp,sp,48
  80a8cc:	2005883a 	mov	r2,r4
  80a8d0:	e17fff15 	stw	r5,-4(fp)
  80a8d4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80a8d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  80a8dc:	e0bffe03 	ldbu	r2,-8(fp)
  80a8e0:	10800570 	cmpltui	r2,r2,21
  80a8e4:	1000051e 	bne	r2,zero,80a8fc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  80a8e8:	e0bffe03 	ldbu	r2,-8(fp)
  80a8ec:	10803fe0 	cmpeqi	r2,r2,255
  80a8f0:	1000021e 	bne	r2,zero,80a8fc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  80a8f4:	00800a84 	movi	r2,42
  80a8f8:	00005d06 	br	80aa70 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  80a8fc:	e0bfff17 	ldw	r2,-4(fp)
  80a900:	1000021e 	bne	r2,zero,80a90c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  80a904:	00800244 	movi	r2,9
  80a908:	00005906 	br	80aa70 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  80a90c:	e0bfff17 	ldw	r2,-4(fp)
  80a910:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  80a914:	e0bfff17 	ldw	r2,-4(fp)
  80a918:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a91c:	0005303a 	rdctl	r2,status
  80a920:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a924:	e0fffd17 	ldw	r3,-12(fp)
  80a928:	00bfff84 	movi	r2,-2
  80a92c:	1884703a 	and	r2,r3,r2
  80a930:	1001703a 	wrctl	status,r2
  
  return context;
  80a934:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  80a938:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  80a93c:	e0bffe03 	ldbu	r2,-8(fp)
  80a940:	10803fd8 	cmpnei	r2,r2,255
  80a944:	1000031e 	bne	r2,zero,80a954 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  80a948:	d0a04a17 	ldw	r2,-32472(gp)
  80a94c:	10800c83 	ldbu	r2,50(r2)
  80a950:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a954:	e0fffe03 	ldbu	r3,-8(fp)
  80a958:	008020b4 	movhi	r2,130
  80a95c:	10a21b04 	addi	r2,r2,-30612
  80a960:	18c7883a 	add	r3,r3,r3
  80a964:	18c7883a 	add	r3,r3,r3
  80a968:	10c5883a 	add	r2,r2,r3
  80a96c:	10800017 	ldw	r2,0(r2)
  80a970:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  80a974:	e0bff817 	ldw	r2,-32(fp)
  80a978:	1000061e 	bne	r2,zero,80a994 <OSTaskStkChk+0xd4>
  80a97c:	e0bff617 	ldw	r2,-40(fp)
  80a980:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a984:	e0bff717 	ldw	r2,-36(fp)
  80a988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80a98c:	008010c4 	movi	r2,67
  80a990:	00003706 	br	80aa70 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80a994:	e0bff817 	ldw	r2,-32(fp)
  80a998:	10800058 	cmpnei	r2,r2,1
  80a99c:	1000061e 	bne	r2,zero,80a9b8 <OSTaskStkChk+0xf8>
  80a9a0:	e0bff617 	ldw	r2,-40(fp)
  80a9a4:	e0bff915 	stw	r2,-28(fp)
  80a9a8:	e0bff917 	ldw	r2,-28(fp)
  80a9ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80a9b0:	008010c4 	movi	r2,67
  80a9b4:	00002e06 	br	80aa70 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  80a9b8:	e0bff817 	ldw	r2,-32(fp)
  80a9bc:	1080040b 	ldhu	r2,16(r2)
  80a9c0:	10bfffcc 	andi	r2,r2,65535
  80a9c4:	1080004c 	andi	r2,r2,1
  80a9c8:	1000061e 	bne	r2,zero,80a9e4 <OSTaskStkChk+0x124>
  80a9cc:	e0bff617 	ldw	r2,-40(fp)
  80a9d0:	e0bffa15 	stw	r2,-24(fp)
  80a9d4:	e0bffa17 	ldw	r2,-24(fp)
  80a9d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  80a9dc:	00801144 	movi	r2,69
  80a9e0:	00002306 	br	80aa70 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  80a9e4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  80a9e8:	e0bff817 	ldw	r2,-32(fp)
  80a9ec:	10800317 	ldw	r2,12(r2)
  80a9f0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  80a9f4:	e0bff817 	ldw	r2,-32(fp)
  80a9f8:	10800217 	ldw	r2,8(r2)
  80a9fc:	e0bff415 	stw	r2,-48(fp)
  80aa00:	e0bff617 	ldw	r2,-40(fp)
  80aa04:	e0bffb15 	stw	r2,-20(fp)
  80aa08:	e0bffb17 	ldw	r2,-20(fp)
  80aa0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80aa10:	00000306 	br	80aa20 <OSTaskStkChk+0x160>
        nfree++;
  80aa14:	e0bff517 	ldw	r2,-44(fp)
  80aa18:	10800044 	addi	r2,r2,1
  80aa1c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80aa20:	e0bff417 	ldw	r2,-48(fp)
  80aa24:	10c00104 	addi	r3,r2,4
  80aa28:	e0fff415 	stw	r3,-48(fp)
  80aa2c:	10800017 	ldw	r2,0(r2)
  80aa30:	103ff826 	beq	r2,zero,80aa14 <__alt_mem_epcs_flash_controller_0+0xff801a14>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  80aa34:	e0bff517 	ldw	r2,-44(fp)
  80aa38:	1085883a 	add	r2,r2,r2
  80aa3c:	1085883a 	add	r2,r2,r2
  80aa40:	1007883a 	mov	r3,r2
  80aa44:	e0bfff17 	ldw	r2,-4(fp)
  80aa48:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  80aa4c:	e0fffc17 	ldw	r3,-16(fp)
  80aa50:	e0bff517 	ldw	r2,-44(fp)
  80aa54:	1885c83a 	sub	r2,r3,r2
  80aa58:	1085883a 	add	r2,r2,r2
  80aa5c:	1085883a 	add	r2,r2,r2
  80aa60:	1007883a 	mov	r3,r2
  80aa64:	e0bfff17 	ldw	r2,-4(fp)
  80aa68:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  80aa6c:	0005883a 	mov	r2,zero
}
  80aa70:	e037883a 	mov	sp,fp
  80aa74:	df000017 	ldw	fp,0(sp)
  80aa78:	dec00104 	addi	sp,sp,4
  80aa7c:	f800283a 	ret

0080aa80 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80aa80:	defff504 	addi	sp,sp,-44
  80aa84:	dfc00a15 	stw	ra,40(sp)
  80aa88:	df000915 	stw	fp,36(sp)
  80aa8c:	df000904 	addi	fp,sp,36
  80aa90:	2005883a 	mov	r2,r4
  80aa94:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80aa98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  80aa9c:	e0bfff03 	ldbu	r2,-4(fp)
  80aaa0:	10800518 	cmpnei	r2,r2,20
  80aaa4:	1000021e 	bne	r2,zero,80aab0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  80aaa8:	008011c4 	movi	r2,71
  80aaac:	00006806 	br	80ac50 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80aab0:	e0bfff03 	ldbu	r2,-4(fp)
  80aab4:	10800530 	cmpltui	r2,r2,20
  80aab8:	1000051e 	bne	r2,zero,80aad0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  80aabc:	e0bfff03 	ldbu	r2,-4(fp)
  80aac0:	10803fe0 	cmpeqi	r2,r2,255
  80aac4:	1000021e 	bne	r2,zero,80aad0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  80aac8:	00800a84 	movi	r2,42
  80aacc:	00006006 	br	80ac50 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aad0:	0005303a 	rdctl	r2,status
  80aad4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aad8:	e0fffe17 	ldw	r3,-8(fp)
  80aadc:	00bfff84 	movi	r2,-2
  80aae0:	1884703a 	and	r2,r3,r2
  80aae4:	1001703a 	wrctl	status,r2
  
  return context;
  80aae8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  80aaec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80aaf0:	e0bfff03 	ldbu	r2,-4(fp)
  80aaf4:	10803fd8 	cmpnei	r2,r2,255
  80aaf8:	1000061e 	bne	r2,zero,80ab14 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  80aafc:	d0a04a17 	ldw	r2,-32472(gp)
  80ab00:	10800c83 	ldbu	r2,50(r2)
  80ab04:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  80ab08:	00800044 	movi	r2,1
  80ab0c:	e0bff705 	stb	r2,-36(fp)
  80ab10:	00000906 	br	80ab38 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80ab14:	d0a04a17 	ldw	r2,-32472(gp)
  80ab18:	10800c83 	ldbu	r2,50(r2)
  80ab1c:	10c03fcc 	andi	r3,r2,255
  80ab20:	e0bfff03 	ldbu	r2,-4(fp)
  80ab24:	1880031e 	bne	r3,r2,80ab34 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  80ab28:	00800044 	movi	r2,1
  80ab2c:	e0bff705 	stb	r2,-36(fp)
  80ab30:	00000106 	br	80ab38 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  80ab34:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80ab38:	e0ffff03 	ldbu	r3,-4(fp)
  80ab3c:	008020b4 	movhi	r2,130
  80ab40:	10a21b04 	addi	r2,r2,-30612
  80ab44:	18c7883a 	add	r3,r3,r3
  80ab48:	18c7883a 	add	r3,r3,r3
  80ab4c:	10c5883a 	add	r2,r2,r3
  80ab50:	10800017 	ldw	r2,0(r2)
  80ab54:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  80ab58:	e0bffa17 	ldw	r2,-24(fp)
  80ab5c:	1000061e 	bne	r2,zero,80ab78 <OSTaskSuspend+0xf8>
  80ab60:	e0bff817 	ldw	r2,-32(fp)
  80ab64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ab68:	e0bff917 	ldw	r2,-28(fp)
  80ab6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80ab70:	00801204 	movi	r2,72
  80ab74:	00003606 	br	80ac50 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  80ab78:	e0bffa17 	ldw	r2,-24(fp)
  80ab7c:	10800058 	cmpnei	r2,r2,1
  80ab80:	1000061e 	bne	r2,zero,80ab9c <OSTaskSuspend+0x11c>
  80ab84:	e0bff817 	ldw	r2,-32(fp)
  80ab88:	e0bffb15 	stw	r2,-20(fp)
  80ab8c:	e0bffb17 	ldw	r2,-20(fp)
  80ab90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80ab94:	008010c4 	movi	r2,67
  80ab98:	00002d06 	br	80ac50 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  80ab9c:	e0bffa17 	ldw	r2,-24(fp)
  80aba0:	10800d03 	ldbu	r2,52(r2)
  80aba4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80aba8:	e0fffd03 	ldbu	r3,-12(fp)
  80abac:	e13ffd03 	ldbu	r4,-12(fp)
  80abb0:	d0a04744 	addi	r2,gp,-32483
  80abb4:	2085883a 	add	r2,r4,r2
  80abb8:	10800003 	ldbu	r2,0(r2)
  80abbc:	1009883a 	mov	r4,r2
  80abc0:	e0bffa17 	ldw	r2,-24(fp)
  80abc4:	10800d43 	ldbu	r2,53(r2)
  80abc8:	0084303a 	nor	r2,zero,r2
  80abcc:	2084703a 	and	r2,r4,r2
  80abd0:	1009883a 	mov	r4,r2
  80abd4:	d0a04744 	addi	r2,gp,-32483
  80abd8:	1885883a 	add	r2,r3,r2
  80abdc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80abe0:	e0fffd03 	ldbu	r3,-12(fp)
  80abe4:	d0a04744 	addi	r2,gp,-32483
  80abe8:	1885883a 	add	r2,r3,r2
  80abec:	10800003 	ldbu	r2,0(r2)
  80abf0:	10803fcc 	andi	r2,r2,255
  80abf4:	1000071e 	bne	r2,zero,80ac14 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  80abf8:	e0bffa17 	ldw	r2,-24(fp)
  80abfc:	10800d83 	ldbu	r2,54(r2)
  80ac00:	0084303a 	nor	r2,zero,r2
  80ac04:	1007883a 	mov	r3,r2
  80ac08:	d0a04703 	ldbu	r2,-32484(gp)
  80ac0c:	1884703a 	and	r2,r3,r2
  80ac10:	d0a04705 	stb	r2,-32484(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  80ac14:	e0bffa17 	ldw	r2,-24(fp)
  80ac18:	10800c03 	ldbu	r2,48(r2)
  80ac1c:	10800214 	ori	r2,r2,8
  80ac20:	1007883a 	mov	r3,r2
  80ac24:	e0bffa17 	ldw	r2,-24(fp)
  80ac28:	10c00c05 	stb	r3,48(r2)
  80ac2c:	e0bff817 	ldw	r2,-32(fp)
  80ac30:	e0bffc15 	stw	r2,-16(fp)
  80ac34:	e0bffc17 	ldw	r2,-16(fp)
  80ac38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  80ac3c:	e0bff703 	ldbu	r2,-36(fp)
  80ac40:	10800058 	cmpnei	r2,r2,1
  80ac44:	1000011e 	bne	r2,zero,80ac4c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  80ac48:	08054500 	call	805450 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80ac4c:	0005883a 	mov	r2,zero
}
  80ac50:	e037883a 	mov	sp,fp
  80ac54:	dfc00117 	ldw	ra,4(sp)
  80ac58:	df000017 	ldw	fp,0(sp)
  80ac5c:	dec00204 	addi	sp,sp,8
  80ac60:	f800283a 	ret

0080ac64 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  80ac64:	defff604 	addi	sp,sp,-40
  80ac68:	dfc00915 	stw	ra,36(sp)
  80ac6c:	df000815 	stw	fp,32(sp)
  80ac70:	df000804 	addi	fp,sp,32
  80ac74:	2005883a 	mov	r2,r4
  80ac78:	e17fff15 	stw	r5,-4(fp)
  80ac7c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ac80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  80ac84:	e0bffe03 	ldbu	r2,-8(fp)
  80ac88:	10800570 	cmpltui	r2,r2,21
  80ac8c:	1000051e 	bne	r2,zero,80aca4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80ac90:	e0bffe03 	ldbu	r2,-8(fp)
  80ac94:	10803fe0 	cmpeqi	r2,r2,255
  80ac98:	1000021e 	bne	r2,zero,80aca4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  80ac9c:	00800a84 	movi	r2,42
  80aca0:	00003406 	br	80ad74 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  80aca4:	e0bfff17 	ldw	r2,-4(fp)
  80aca8:	1000021e 	bne	r2,zero,80acb4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  80acac:	00800244 	movi	r2,9
  80acb0:	00003006 	br	80ad74 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80acb4:	0005303a 	rdctl	r2,status
  80acb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80acbc:	e0fffd17 	ldw	r3,-12(fp)
  80acc0:	00bfff84 	movi	r2,-2
  80acc4:	1884703a 	and	r2,r3,r2
  80acc8:	1001703a 	wrctl	status,r2
  
  return context;
  80accc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80acd0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  80acd4:	e0bffe03 	ldbu	r2,-8(fp)
  80acd8:	10803fd8 	cmpnei	r2,r2,255
  80acdc:	1000031e 	bne	r2,zero,80acec <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  80ace0:	d0a04a17 	ldw	r2,-32472(gp)
  80ace4:	10800c83 	ldbu	r2,50(r2)
  80ace8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80acec:	e0fffe03 	ldbu	r3,-8(fp)
  80acf0:	008020b4 	movhi	r2,130
  80acf4:	10a21b04 	addi	r2,r2,-30612
  80acf8:	18c7883a 	add	r3,r3,r3
  80acfc:	18c7883a 	add	r3,r3,r3
  80ad00:	10c5883a 	add	r2,r2,r3
  80ad04:	10800017 	ldw	r2,0(r2)
  80ad08:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  80ad0c:	e0bffa17 	ldw	r2,-24(fp)
  80ad10:	1000061e 	bne	r2,zero,80ad2c <OSTaskQuery+0xc8>
  80ad14:	e0bff817 	ldw	r2,-32(fp)
  80ad18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ad1c:	e0bff917 	ldw	r2,-28(fp)
  80ad20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  80ad24:	00800a44 	movi	r2,41
  80ad28:	00001206 	br	80ad74 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  80ad2c:	e0bffa17 	ldw	r2,-24(fp)
  80ad30:	10800058 	cmpnei	r2,r2,1
  80ad34:	1000061e 	bne	r2,zero,80ad50 <OSTaskQuery+0xec>
  80ad38:	e0bff817 	ldw	r2,-32(fp)
  80ad3c:	e0bffb15 	stw	r2,-20(fp)
  80ad40:	e0bffb17 	ldw	r2,-20(fp)
  80ad44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80ad48:	008010c4 	movi	r2,67
  80ad4c:	00000906 	br	80ad74 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80ad50:	01801b04 	movi	r6,108
  80ad54:	e17ffa17 	ldw	r5,-24(fp)
  80ad58:	e13fff17 	ldw	r4,-4(fp)
  80ad5c:	08053e80 	call	8053e8 <OS_MemCopy>
  80ad60:	e0bff817 	ldw	r2,-32(fp)
  80ad64:	e0bffc15 	stw	r2,-16(fp)
  80ad68:	e0bffc17 	ldw	r2,-16(fp)
  80ad6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ad70:	0005883a 	mov	r2,zero
}
  80ad74:	e037883a 	mov	sp,fp
  80ad78:	dfc00117 	ldw	ra,4(sp)
  80ad7c:	df000017 	ldw	fp,0(sp)
  80ad80:	dec00204 	addi	sp,sp,8
  80ad84:	f800283a 	ret

0080ad88 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  80ad88:	defffc04 	addi	sp,sp,-16
  80ad8c:	df000315 	stw	fp,12(sp)
  80ad90:	df000304 	addi	fp,sp,12
  80ad94:	e13ffd15 	stw	r4,-12(fp)
  80ad98:	e17ffe15 	stw	r5,-8(fp)
  80ad9c:	3005883a 	mov	r2,r6
  80ada0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  80ada4:	e0bfff0b 	ldhu	r2,-4(fp)
  80ada8:	1080004c 	andi	r2,r2,1
  80adac:	10000d26 	beq	r2,zero,80ade4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80adb0:	e0bfff0b 	ldhu	r2,-4(fp)
  80adb4:	1080008c 	andi	r2,r2,2
  80adb8:	10000a26 	beq	r2,zero,80ade4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80adbc:	00000706 	br	80addc <OS_TaskStkClr+0x54>
                size--;
  80adc0:	e0bffe17 	ldw	r2,-8(fp)
  80adc4:	10bfffc4 	addi	r2,r2,-1
  80adc8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  80adcc:	e0bffd17 	ldw	r2,-12(fp)
  80add0:	10c00104 	addi	r3,r2,4
  80add4:	e0fffd15 	stw	r3,-12(fp)
  80add8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80addc:	e0bffe17 	ldw	r2,-8(fp)
  80ade0:	103ff71e 	bne	r2,zero,80adc0 <__alt_mem_epcs_flash_controller_0+0xff801dc0>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  80ade4:	0001883a 	nop
  80ade8:	e037883a 	mov	sp,fp
  80adec:	df000017 	ldw	fp,0(sp)
  80adf0:	dec00104 	addi	sp,sp,4
  80adf4:	f800283a 	ret

0080adf8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  80adf8:	defff904 	addi	sp,sp,-28
  80adfc:	dfc00615 	stw	ra,24(sp)
  80ae00:	df000515 	stw	fp,20(sp)
  80ae04:	df000504 	addi	fp,sp,20
  80ae08:	2005883a 	mov	r2,r4
  80ae0c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ae10:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ae14:	d0a04903 	ldbu	r2,-32476(gp)
  80ae18:	10803fcc 	andi	r2,r2,255
  80ae1c:	1000311e 	bne	r2,zero,80aee4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80ae20:	e0bfff0b 	ldhu	r2,-4(fp)
  80ae24:	10003026 	beq	r2,zero,80aee8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae28:	0005303a 	rdctl	r2,status
  80ae2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae30:	e0fffe17 	ldw	r3,-8(fp)
  80ae34:	00bfff84 	movi	r2,-2
  80ae38:	1884703a 	and	r2,r3,r2
  80ae3c:	1001703a 	wrctl	status,r2
  
  return context;
  80ae40:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80ae44:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  80ae48:	d0a04a17 	ldw	r2,-32472(gp)
  80ae4c:	10800d03 	ldbu	r2,52(r2)
  80ae50:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80ae54:	e0fffd03 	ldbu	r3,-12(fp)
  80ae58:	e13ffd03 	ldbu	r4,-12(fp)
  80ae5c:	d0a04744 	addi	r2,gp,-32483
  80ae60:	2085883a 	add	r2,r4,r2
  80ae64:	10800003 	ldbu	r2,0(r2)
  80ae68:	1009883a 	mov	r4,r2
  80ae6c:	d0a04a17 	ldw	r2,-32472(gp)
  80ae70:	10800d43 	ldbu	r2,53(r2)
  80ae74:	0084303a 	nor	r2,zero,r2
  80ae78:	2084703a 	and	r2,r4,r2
  80ae7c:	1009883a 	mov	r4,r2
  80ae80:	d0a04744 	addi	r2,gp,-32483
  80ae84:	1885883a 	add	r2,r3,r2
  80ae88:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  80ae8c:	e0fffd03 	ldbu	r3,-12(fp)
  80ae90:	d0a04744 	addi	r2,gp,-32483
  80ae94:	1885883a 	add	r2,r3,r2
  80ae98:	10800003 	ldbu	r2,0(r2)
  80ae9c:	10803fcc 	andi	r2,r2,255
  80aea0:	1000071e 	bne	r2,zero,80aec0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80aea4:	d0a04a17 	ldw	r2,-32472(gp)
  80aea8:	10800d83 	ldbu	r2,54(r2)
  80aeac:	0084303a 	nor	r2,zero,r2
  80aeb0:	1007883a 	mov	r3,r2
  80aeb4:	d0a04703 	ldbu	r2,-32484(gp)
  80aeb8:	1884703a 	and	r2,r3,r2
  80aebc:	d0a04705 	stb	r2,-32484(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80aec0:	d0a04a17 	ldw	r2,-32472(gp)
  80aec4:	e0ffff0b 	ldhu	r3,-4(fp)
  80aec8:	10c00b8d 	sth	r3,46(r2)
  80aecc:	e0bffb17 	ldw	r2,-20(fp)
  80aed0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aed4:	e0bffc17 	ldw	r2,-16(fp)
  80aed8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  80aedc:	08054500 	call	805450 <OS_Sched>
  80aee0:	00000106 	br	80aee8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  80aee4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  80aee8:	e037883a 	mov	sp,fp
  80aeec:	dfc00117 	ldw	ra,4(sp)
  80aef0:	df000017 	ldw	fp,0(sp)
  80aef4:	dec00204 	addi	sp,sp,8
  80aef8:	f800283a 	ret

0080aefc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  80aefc:	defff704 	addi	sp,sp,-36
  80af00:	dfc00815 	stw	ra,32(sp)
  80af04:	df000715 	stw	fp,28(sp)
  80af08:	dc000615 	stw	r16,24(sp)
  80af0c:	df000704 	addi	fp,sp,28
  80af10:	2011883a 	mov	r8,r4
  80af14:	2809883a 	mov	r4,r5
  80af18:	3007883a 	mov	r3,r6
  80af1c:	3805883a 	mov	r2,r7
  80af20:	e23ffb05 	stb	r8,-20(fp)
  80af24:	e13ffc05 	stb	r4,-16(fp)
  80af28:	e0fffd05 	stb	r3,-12(fp)
  80af2c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80af30:	d0a04903 	ldbu	r2,-32476(gp)
  80af34:	10803fcc 	andi	r2,r2,255
  80af38:	10000226 	beq	r2,zero,80af44 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  80af3c:	00801544 	movi	r2,85
  80af40:	00004706 	br	80b060 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  80af44:	e0bffb03 	ldbu	r2,-20(fp)
  80af48:	1000081e 	bne	r2,zero,80af6c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  80af4c:	e0bffc03 	ldbu	r2,-16(fp)
  80af50:	1000061e 	bne	r2,zero,80af6c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  80af54:	e0bffd03 	ldbu	r2,-12(fp)
  80af58:	1000041e 	bne	r2,zero,80af6c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  80af5c:	e0bffe0b 	ldhu	r2,-8(fp)
  80af60:	1000021e 	bne	r2,zero,80af6c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  80af64:	00801504 	movi	r2,84
  80af68:	00003d06 	br	80b060 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  80af6c:	e0bffc03 	ldbu	r2,-16(fp)
  80af70:	10800f30 	cmpltui	r2,r2,60
  80af74:	1000021e 	bne	r2,zero,80af80 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  80af78:	00801444 	movi	r2,81
  80af7c:	00003806 	br	80b060 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  80af80:	e0bffd03 	ldbu	r2,-12(fp)
  80af84:	10800f30 	cmpltui	r2,r2,60
  80af88:	1000021e 	bne	r2,zero,80af94 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  80af8c:	00801484 	movi	r2,82
  80af90:	00003306 	br	80b060 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  80af94:	e0bffe0b 	ldhu	r2,-8(fp)
  80af98:	1080fa30 	cmpltui	r2,r2,1000
  80af9c:	1000021e 	bne	r2,zero,80afa8 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  80afa0:	008014c4 	movi	r2,83
  80afa4:	00002e06 	br	80b060 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80afa8:	e0bffb03 	ldbu	r2,-20(fp)
  80afac:	01438404 	movi	r5,3600
  80afb0:	1009883a 	mov	r4,r2
  80afb4:	0802f380 	call	802f38 <__mulsi3>
  80afb8:	1021883a 	mov	r16,r2
  80afbc:	e0bffc03 	ldbu	r2,-16(fp)
  80afc0:	01400f04 	movi	r5,60
  80afc4:	1009883a 	mov	r4,r2
  80afc8:	0802f380 	call	802f38 <__mulsi3>
  80afcc:	8087883a 	add	r3,r16,r2
  80afd0:	e0bffd03 	ldbu	r2,-12(fp)
  80afd4:	1885883a 	add	r2,r3,r2
  80afd8:	0140fa04 	movi	r5,1000
  80afdc:	1009883a 	mov	r4,r2
  80afe0:	0802f380 	call	802f38 <__mulsi3>
  80afe4:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  80afe8:	e0bffe0b 	ldhu	r2,-8(fp)
  80afec:	0140fa04 	movi	r5,1000
  80aff0:	1009883a 	mov	r4,r2
  80aff4:	0802f380 	call	802f38 <__mulsi3>
  80aff8:	0140fa04 	movi	r5,1000
  80affc:	1009883a 	mov	r4,r2
  80b000:	0802e7c0 	call	802e7c <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80b004:	8085883a 	add	r2,r16,r2
  80b008:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  80b00c:	e0bffa17 	ldw	r2,-24(fp)
  80b010:	1004d43a 	srli	r2,r2,16
  80b014:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  80b018:	e0bffa17 	ldw	r2,-24(fp)
  80b01c:	10bfffcc 	andi	r2,r2,65535
  80b020:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  80b024:	e0bffa17 	ldw	r2,-24(fp)
  80b028:	10bfffcc 	andi	r2,r2,65535
  80b02c:	1009883a 	mov	r4,r2
  80b030:	080adf80 	call	80adf8 <OSTimeDly>
    while (loops > 0) {
  80b034:	00000706 	br	80b054 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  80b038:	01200014 	movui	r4,32768
  80b03c:	080adf80 	call	80adf8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  80b040:	01200014 	movui	r4,32768
  80b044:	080adf80 	call	80adf8 <OSTimeDly>
        loops--;
  80b048:	e0bff90b 	ldhu	r2,-28(fp)
  80b04c:	10bfffc4 	addi	r2,r2,-1
  80b050:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  80b054:	e0bff90b 	ldhu	r2,-28(fp)
  80b058:	103ff71e 	bne	r2,zero,80b038 <__alt_mem_epcs_flash_controller_0+0xff802038>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  80b05c:	0005883a 	mov	r2,zero
}
  80b060:	e6ffff04 	addi	sp,fp,-4
  80b064:	dfc00217 	ldw	ra,8(sp)
  80b068:	df000117 	ldw	fp,4(sp)
  80b06c:	dc000017 	ldw	r16,0(sp)
  80b070:	dec00304 	addi	sp,sp,12
  80b074:	f800283a 	ret

0080b078 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  80b078:	defff504 	addi	sp,sp,-44
  80b07c:	dfc00a15 	stw	ra,40(sp)
  80b080:	df000915 	stw	fp,36(sp)
  80b084:	df000904 	addi	fp,sp,36
  80b088:	2005883a 	mov	r2,r4
  80b08c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80b090:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  80b094:	e0bfff03 	ldbu	r2,-4(fp)
  80b098:	10800530 	cmpltui	r2,r2,20
  80b09c:	1000021e 	bne	r2,zero,80b0a8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80b0a0:	00800a84 	movi	r2,42
  80b0a4:	00006406 	br	80b238 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b0a8:	0005303a 	rdctl	r2,status
  80b0ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b0b0:	e0fffe17 	ldw	r3,-8(fp)
  80b0b4:	00bfff84 	movi	r2,-2
  80b0b8:	1884703a 	and	r2,r3,r2
  80b0bc:	1001703a 	wrctl	status,r2
  
  return context;
  80b0c0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  80b0c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  80b0c8:	e0ffff03 	ldbu	r3,-4(fp)
  80b0cc:	008020b4 	movhi	r2,130
  80b0d0:	10a21b04 	addi	r2,r2,-30612
  80b0d4:	18c7883a 	add	r3,r3,r3
  80b0d8:	18c7883a 	add	r3,r3,r3
  80b0dc:	10c5883a 	add	r2,r2,r3
  80b0e0:	10800017 	ldw	r2,0(r2)
  80b0e4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  80b0e8:	e0bff917 	ldw	r2,-28(fp)
  80b0ec:	1000061e 	bne	r2,zero,80b108 <OSTimeDlyResume+0x90>
  80b0f0:	e0bff717 	ldw	r2,-36(fp)
  80b0f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b0f8:	e0bff817 	ldw	r2,-32(fp)
  80b0fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80b100:	008010c4 	movi	r2,67
  80b104:	00004c06 	br	80b238 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80b108:	e0bff917 	ldw	r2,-28(fp)
  80b10c:	10800058 	cmpnei	r2,r2,1
  80b110:	1000061e 	bne	r2,zero,80b12c <OSTimeDlyResume+0xb4>
  80b114:	e0bff717 	ldw	r2,-36(fp)
  80b118:	e0bffa15 	stw	r2,-24(fp)
  80b11c:	e0bffa17 	ldw	r2,-24(fp)
  80b120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80b124:	008010c4 	movi	r2,67
  80b128:	00004306 	br	80b238 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  80b12c:	e0bff917 	ldw	r2,-28(fp)
  80b130:	10800b8b 	ldhu	r2,46(r2)
  80b134:	10bfffcc 	andi	r2,r2,65535
  80b138:	1000061e 	bne	r2,zero,80b154 <OSTimeDlyResume+0xdc>
  80b13c:	e0bff717 	ldw	r2,-36(fp)
  80b140:	e0bffb15 	stw	r2,-20(fp)
  80b144:	e0bffb17 	ldw	r2,-20(fp)
  80b148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  80b14c:	00801404 	movi	r2,80
  80b150:	00003906 	br	80b238 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  80b154:	e0bff917 	ldw	r2,-28(fp)
  80b158:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80b15c:	e0bff917 	ldw	r2,-28(fp)
  80b160:	10800c03 	ldbu	r2,48(r2)
  80b164:	10803fcc 	andi	r2,r2,255
  80b168:	10800dcc 	andi	r2,r2,55
  80b16c:	10000b26 	beq	r2,zero,80b19c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  80b170:	e0bff917 	ldw	r2,-28(fp)
  80b174:	10c00c03 	ldbu	r3,48(r2)
  80b178:	00bff204 	movi	r2,-56
  80b17c:	1884703a 	and	r2,r3,r2
  80b180:	1007883a 	mov	r3,r2
  80b184:	e0bff917 	ldw	r2,-28(fp)
  80b188:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  80b18c:	e0bff917 	ldw	r2,-28(fp)
  80b190:	00c00044 	movi	r3,1
  80b194:	10c00c45 	stb	r3,49(r2)
  80b198:	00000206 	br	80b1a4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  80b19c:	e0bff917 	ldw	r2,-28(fp)
  80b1a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  80b1a4:	e0bff917 	ldw	r2,-28(fp)
  80b1a8:	10800c03 	ldbu	r2,48(r2)
  80b1ac:	10803fcc 	andi	r2,r2,255
  80b1b0:	1080020c 	andi	r2,r2,8
  80b1b4:	10001b1e 	bne	r2,zero,80b224 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  80b1b8:	e0bff917 	ldw	r2,-28(fp)
  80b1bc:	10c00d83 	ldbu	r3,54(r2)
  80b1c0:	d0a04703 	ldbu	r2,-32484(gp)
  80b1c4:	1884b03a 	or	r2,r3,r2
  80b1c8:	d0a04705 	stb	r2,-32484(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80b1cc:	e0bff917 	ldw	r2,-28(fp)
  80b1d0:	10800d03 	ldbu	r2,52(r2)
  80b1d4:	10c03fcc 	andi	r3,r2,255
  80b1d8:	e0bff917 	ldw	r2,-28(fp)
  80b1dc:	10800d03 	ldbu	r2,52(r2)
  80b1e0:	11003fcc 	andi	r4,r2,255
  80b1e4:	d0a04744 	addi	r2,gp,-32483
  80b1e8:	2085883a 	add	r2,r4,r2
  80b1ec:	11000003 	ldbu	r4,0(r2)
  80b1f0:	e0bff917 	ldw	r2,-28(fp)
  80b1f4:	10800d43 	ldbu	r2,53(r2)
  80b1f8:	2084b03a 	or	r2,r4,r2
  80b1fc:	1009883a 	mov	r4,r2
  80b200:	d0a04744 	addi	r2,gp,-32483
  80b204:	1885883a 	add	r2,r3,r2
  80b208:	11000005 	stb	r4,0(r2)
  80b20c:	e0bff717 	ldw	r2,-36(fp)
  80b210:	e0bffc15 	stw	r2,-16(fp)
  80b214:	e0bffc17 	ldw	r2,-16(fp)
  80b218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  80b21c:	08054500 	call	805450 <OS_Sched>
  80b220:	00000406 	br	80b234 <OSTimeDlyResume+0x1bc>
  80b224:	e0bff717 	ldw	r2,-36(fp)
  80b228:	e0bffd15 	stw	r2,-12(fp)
  80b22c:	e0bffd17 	ldw	r2,-12(fp)
  80b230:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  80b234:	0005883a 	mov	r2,zero
}
  80b238:	e037883a 	mov	sp,fp
  80b23c:	dfc00117 	ldw	ra,4(sp)
  80b240:	df000017 	ldw	fp,0(sp)
  80b244:	dec00204 	addi	sp,sp,8
  80b248:	f800283a 	ret

0080b24c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  80b24c:	defffb04 	addi	sp,sp,-20
  80b250:	df000415 	stw	fp,16(sp)
  80b254:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b258:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b25c:	0005303a 	rdctl	r2,status
  80b260:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b264:	e0fffe17 	ldw	r3,-8(fp)
  80b268:	00bfff84 	movi	r2,-2
  80b26c:	1884703a 	and	r2,r3,r2
  80b270:	1001703a 	wrctl	status,r2
  
  return context;
  80b274:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80b278:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  80b27c:	d0a04b17 	ldw	r2,-32468(gp)
  80b280:	e0bffd15 	stw	r2,-12(fp)
  80b284:	e0bffc17 	ldw	r2,-16(fp)
  80b288:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b28c:	e0bfff17 	ldw	r2,-4(fp)
  80b290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  80b294:	e0bffd17 	ldw	r2,-12(fp)
}
  80b298:	e037883a 	mov	sp,fp
  80b29c:	df000017 	ldw	fp,0(sp)
  80b2a0:	dec00104 	addi	sp,sp,4
  80b2a4:	f800283a 	ret

0080b2a8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  80b2a8:	defffb04 	addi	sp,sp,-20
  80b2ac:	df000415 	stw	fp,16(sp)
  80b2b0:	df000404 	addi	fp,sp,16
  80b2b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b2b8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b2bc:	0005303a 	rdctl	r2,status
  80b2c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b2c4:	e0fffd17 	ldw	r3,-12(fp)
  80b2c8:	00bfff84 	movi	r2,-2
  80b2cc:	1884703a 	and	r2,r3,r2
  80b2d0:	1001703a 	wrctl	status,r2
  
  return context;
  80b2d4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80b2d8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  80b2dc:	e0bfff17 	ldw	r2,-4(fp)
  80b2e0:	d0a04b15 	stw	r2,-32468(gp)
  80b2e4:	e0bffc17 	ldw	r2,-16(fp)
  80b2e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b2ec:	e0bffe17 	ldw	r2,-8(fp)
  80b2f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80b2f4:	0001883a 	nop
  80b2f8:	e037883a 	mov	sp,fp
  80b2fc:	df000017 	ldw	fp,0(sp)
  80b300:	dec00104 	addi	sp,sp,4
  80b304:	f800283a 	ret

0080b308 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b308:	defffd04 	addi	sp,sp,-12
  80b30c:	dfc00215 	stw	ra,8(sp)
  80b310:	df000115 	stw	fp,4(sp)
  80b314:	df000104 	addi	fp,sp,4
  80b318:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b31c:	d1600604 	addi	r5,gp,-32744
  80b320:	e13fff17 	ldw	r4,-4(fp)
  80b324:	080e0380 	call	80e038 <alt_dev_llist_insert>
}
  80b328:	e037883a 	mov	sp,fp
  80b32c:	dfc00117 	ldw	ra,4(sp)
  80b330:	df000017 	ldw	fp,0(sp)
  80b334:	dec00204 	addi	sp,sp,8
  80b338:	f800283a 	ret

0080b33c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b33c:	defffd04 	addi	sp,sp,-12
  80b340:	dfc00215 	stw	ra,8(sp)
  80b344:	df000115 	stw	fp,4(sp)
  80b348:	df000104 	addi	fp,sp,4
  80b34c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80b350:	080ea800 	call	80ea80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b354:	00800044 	movi	r2,1
  80b358:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b35c:	0001883a 	nop
  80b360:	e037883a 	mov	sp,fp
  80b364:	dfc00117 	ldw	ra,4(sp)
  80b368:	df000017 	ldw	fp,0(sp)
  80b36c:	dec00204 	addi	sp,sp,8
  80b370:	f800283a 	ret

0080b374 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b374:	defffe04 	addi	sp,sp,-8
  80b378:	dfc00115 	stw	ra,4(sp)
  80b37c:	df000015 	stw	fp,0(sp)
  80b380:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80b384:	01c0fa04 	movi	r7,1000
  80b388:	01800144 	movi	r6,5
  80b38c:	000b883a 	mov	r5,zero
  80b390:	01004074 	movhi	r4,257
  80b394:	21280004 	addi	r4,r4,-24576
  80b398:	080ccc40 	call	80ccc4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  80b39c:	01002074 	movhi	r4,129
  80b3a0:	21009404 	addi	r4,r4,592
  80b3a4:	080b4580 	call	80b458 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80b3a8:	000d883a 	mov	r6,zero
  80b3ac:	000b883a 	mov	r5,zero
  80b3b0:	01002074 	movhi	r4,129
  80b3b4:	2100d104 	addi	r4,r4,836
  80b3b8:	080c0840 	call	80c084 <altera_avalon_jtag_uart_init>
  80b3bc:	01002074 	movhi	r4,129
  80b3c0:	2100c704 	addi	r4,r4,796
  80b3c4:	080b3080 	call	80b308 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80b3c8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( CAM_UART, cam_uart);
  80b3cc:	01800044 	movi	r6,1
  80b3d0:	000b883a 	mov	r5,zero
  80b3d4:	01002074 	movhi	r4,129
  80b3d8:	2104ec04 	addi	r4,r4,5040
  80b3dc:	080ce500 	call	80ce50 <altera_avalon_uart_init>
  80b3e0:	01002074 	movhi	r4,129
  80b3e4:	2104e204 	addi	r4,r4,5000
  80b3e8:	080b3080 	call	80b308 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  80b3ec:	01800084 	movi	r6,2
  80b3f0:	000b883a 	mov	r5,zero
  80b3f4:	01002074 	movhi	r4,129
  80b3f8:	21052004 	addi	r4,r4,5248
  80b3fc:	080ce500 	call	80ce50 <altera_avalon_uart_init>
  80b400:	01002074 	movhi	r4,129
  80b404:	21051604 	addi	r4,r4,5208
  80b408:	080b3080 	call	80b308 <alt_dev_reg>
}
  80b40c:	0001883a 	nop
  80b410:	e037883a 	mov	sp,fp
  80b414:	dfc00117 	ldw	ra,4(sp)
  80b418:	df000017 	ldw	fp,0(sp)
  80b41c:	dec00204 	addi	sp,sp,8
  80b420:	f800283a 	ret

0080b424 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  80b424:	defffd04 	addi	sp,sp,-12
  80b428:	dfc00215 	stw	ra,8(sp)
  80b42c:	df000115 	stw	fp,4(sp)
  80b430:	df000104 	addi	fp,sp,4
  80b434:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  80b438:	d1602a04 	addi	r5,gp,-32600
  80b43c:	e13fff17 	ldw	r4,-4(fp)
  80b440:	080e0380 	call	80e038 <alt_dev_llist_insert>
}
  80b444:	e037883a 	mov	sp,fp
  80b448:	dfc00117 	ldw	ra,4(sp)
  80b44c:	df000017 	ldw	fp,0(sp)
  80b450:	dec00204 	addi	sp,sp,8
  80b454:	f800283a 	ret

0080b458 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  80b458:	defffc04 	addi	sp,sp,-16
  80b45c:	dfc00315 	stw	ra,12(sp)
  80b460:	df000215 	stw	fp,8(sp)
  80b464:	df000204 	addi	fp,sp,8
  80b468:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80b46c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  80b470:	e13fff17 	ldw	r4,-4(fp)
  80b474:	080b4ac0 	call	80b4ac <alt_epcs_flash_query>
  80b478:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  80b47c:	e0bffe17 	ldw	r2,-8(fp)
  80b480:	1000041e 	bne	r2,zero,80b494 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  80b484:	e0bfff17 	ldw	r2,-4(fp)
  80b488:	1009883a 	mov	r4,r2
  80b48c:	080b4240 	call	80b424 <alt_flash_device_register>
  80b490:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  80b494:	e0bffe17 	ldw	r2,-8(fp)
}
  80b498:	e037883a 	mov	sp,fp
  80b49c:	dfc00117 	ldw	ra,4(sp)
  80b4a0:	df000017 	ldw	fp,0(sp)
  80b4a4:	dec00204 	addi	sp,sp,8
  80b4a8:	f800283a 	ret

0080b4ac <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  80b4ac:	defffc04 	addi	sp,sp,-16
  80b4b0:	dfc00315 	stw	ra,12(sp)
  80b4b4:	df000215 	stw	fp,8(sp)
  80b4b8:	df000204 	addi	fp,sp,8
  80b4bc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80b4c0:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  80b4c4:	e0bfff17 	ldw	r2,-4(fp)
  80b4c8:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  80b4cc:	e0bfff17 	ldw	r2,-4(fp)
  80b4d0:	10802e17 	ldw	r2,184(r2)
  80b4d4:	1009883a 	mov	r4,r2
  80b4d8:	080dd300 	call	80dd30 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  80b4dc:	10c03fcc 	andi	r3,r2,255
  80b4e0:	e0bfff17 	ldw	r2,-4(fp)
  80b4e4:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  80b4e8:	e0bfff17 	ldw	r2,-4(fp)
  80b4ec:	10803017 	ldw	r2,192(r2)
  80b4f0:	10800598 	cmpnei	r2,r2,22
  80b4f4:	10000a1e 	bne	r2,zero,80b520 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  80b4f8:	e0bfff17 	ldw	r2,-4(fp)
  80b4fc:	00c02034 	movhi	r3,128
  80b500:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  80b504:	e0bfff17 	ldw	r2,-4(fp)
  80b508:	00c02004 	movi	r3,128
  80b50c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80b510:	e0bfff17 	ldw	r2,-4(fp)
  80b514:	00c00074 	movhi	r3,1
  80b518:	10c01015 	stw	r3,64(r2)
  80b51c:	0000ce06 	br	80b858 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  80b520:	e0bfff17 	ldw	r2,-4(fp)
  80b524:	10803017 	ldw	r2,192(r2)
  80b528:	10800518 	cmpnei	r2,r2,20
  80b52c:	10000a1e 	bne	r2,zero,80b558 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  80b530:	e0bfff17 	ldw	r2,-4(fp)
  80b534:	00c00834 	movhi	r3,32
  80b538:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  80b53c:	e0bfff17 	ldw	r2,-4(fp)
  80b540:	00c00804 	movi	r3,32
  80b544:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80b548:	e0bfff17 	ldw	r2,-4(fp)
  80b54c:	00c00074 	movhi	r3,1
  80b550:	10c01015 	stw	r3,64(r2)
  80b554:	0000c006 	br	80b858 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  80b558:	e0bfff17 	ldw	r2,-4(fp)
  80b55c:	10803017 	ldw	r2,192(r2)
  80b560:	108004d8 	cmpnei	r2,r2,19
  80b564:	10000a1e 	bne	r2,zero,80b590 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  80b568:	e0bfff17 	ldw	r2,-4(fp)
  80b56c:	00c00434 	movhi	r3,16
  80b570:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  80b574:	e0bfff17 	ldw	r2,-4(fp)
  80b578:	00c00404 	movi	r3,16
  80b57c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80b580:	e0bfff17 	ldw	r2,-4(fp)
  80b584:	00c00074 	movhi	r3,1
  80b588:	10c01015 	stw	r3,64(r2)
  80b58c:	0000b206 	br	80b858 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  80b590:	e0bfff17 	ldw	r2,-4(fp)
  80b594:	10803017 	ldw	r2,192(r2)
  80b598:	10800498 	cmpnei	r2,r2,18
  80b59c:	10000a1e 	bne	r2,zero,80b5c8 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  80b5a0:	e0bfff17 	ldw	r2,-4(fp)
  80b5a4:	00c00234 	movhi	r3,8
  80b5a8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  80b5ac:	e0bfff17 	ldw	r2,-4(fp)
  80b5b0:	00c00204 	movi	r3,8
  80b5b4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80b5b8:	e0bfff17 	ldw	r2,-4(fp)
  80b5bc:	00c00074 	movhi	r3,1
  80b5c0:	10c01015 	stw	r3,64(r2)
  80b5c4:	0000a406 	br	80b858 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  80b5c8:	e0bfff17 	ldw	r2,-4(fp)
  80b5cc:	10803017 	ldw	r2,192(r2)
  80b5d0:	10800418 	cmpnei	r2,r2,16
  80b5d4:	10000a1e 	bne	r2,zero,80b600 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  80b5d8:	e0bfff17 	ldw	r2,-4(fp)
  80b5dc:	00c000b4 	movhi	r3,2
  80b5e0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  80b5e4:	e0bfff17 	ldw	r2,-4(fp)
  80b5e8:	00c00104 	movi	r3,4
  80b5ec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  80b5f0:	e0bfff17 	ldw	r2,-4(fp)
  80b5f4:	00e00014 	movui	r3,32768
  80b5f8:	10c01015 	stw	r3,64(r2)
  80b5fc:	00009606 	br	80b858 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  80b600:	e0bfff17 	ldw	r2,-4(fp)
  80b604:	10802e17 	ldw	r2,184(r2)
  80b608:	1009883a 	mov	r4,r2
  80b60c:	080dd980 	call	80dd98 <epcs_read_device_id>
  80b610:	1007883a 	mov	r3,r2
  80b614:	e0bfff17 	ldw	r2,-4(fp)
  80b618:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  80b61c:	e0bfff17 	ldw	r2,-4(fp)
  80b620:	10c03017 	ldw	r3,192(r2)
  80b624:	00804034 	movhi	r2,256
  80b628:	10bfffc4 	addi	r2,r2,-1
  80b62c:	1886703a 	and	r3,r3,r2
  80b630:	00800874 	movhi	r2,33
  80b634:	10ae8544 	addi	r2,r2,-17899
  80b638:	18800a1e 	bne	r3,r2,80b664 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  80b63c:	e0bfff17 	ldw	r2,-4(fp)
  80b640:	00c00834 	movhi	r3,32
  80b644:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  80b648:	e0bfff17 	ldw	r2,-4(fp)
  80b64c:	00c00804 	movi	r3,32
  80b650:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b654:	e0bfff17 	ldw	r2,-4(fp)
  80b658:	00c00074 	movhi	r3,1
  80b65c:	10c01015 	stw	r3,64(r2)
  80b660:	00007d06 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  80b664:	e0bfff17 	ldw	r2,-4(fp)
  80b668:	10c03017 	ldw	r3,192(r2)
  80b66c:	00804034 	movhi	r2,256
  80b670:	10bfffc4 	addi	r2,r2,-1
  80b674:	1886703a 	and	r3,r3,r2
  80b678:	00800874 	movhi	r2,33
  80b67c:	10ae8584 	addi	r2,r2,-17898
  80b680:	18800a1e 	bne	r3,r2,80b6ac <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  80b684:	e0bfff17 	ldw	r2,-4(fp)
  80b688:	00c01034 	movhi	r3,64
  80b68c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  80b690:	e0bfff17 	ldw	r2,-4(fp)
  80b694:	00c01004 	movi	r3,64
  80b698:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b69c:	e0bfff17 	ldw	r2,-4(fp)
  80b6a0:	00c00074 	movhi	r3,1
  80b6a4:	10c01015 	stw	r3,64(r2)
  80b6a8:	00006b06 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  80b6ac:	e0bfff17 	ldw	r2,-4(fp)
  80b6b0:	10c03017 	ldw	r3,192(r2)
  80b6b4:	00804034 	movhi	r2,256
  80b6b8:	10bfffc4 	addi	r2,r2,-1
  80b6bc:	1886703a 	and	r3,r3,r2
  80b6c0:	00800874 	movhi	r2,33
  80b6c4:	10ae85c4 	addi	r2,r2,-17897
  80b6c8:	18800a1e 	bne	r3,r2,80b6f4 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  80b6cc:	e0bfff17 	ldw	r2,-4(fp)
  80b6d0:	00c02034 	movhi	r3,128
  80b6d4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  80b6d8:	e0bfff17 	ldw	r2,-4(fp)
  80b6dc:	00c02004 	movi	r3,128
  80b6e0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b6e4:	e0bfff17 	ldw	r2,-4(fp)
  80b6e8:	00c00074 	movhi	r3,1
  80b6ec:	10c01015 	stw	r3,64(r2)
  80b6f0:	00005906 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  80b6f4:	e0bfff17 	ldw	r2,-4(fp)
  80b6f8:	10c03017 	ldw	r3,192(r2)
  80b6fc:	00804034 	movhi	r2,256
  80b700:	10bfffc4 	addi	r2,r2,-1
  80b704:	1886703a 	and	r3,r3,r2
  80b708:	00800874 	movhi	r2,33
  80b70c:	10ae8604 	addi	r2,r2,-17896
  80b710:	18800a1e 	bne	r3,r2,80b73c <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  80b714:	e0bfff17 	ldw	r2,-4(fp)
  80b718:	00c04034 	movhi	r3,256
  80b71c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  80b720:	e0bfff17 	ldw	r2,-4(fp)
  80b724:	00c04004 	movi	r3,256
  80b728:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b72c:	e0bfff17 	ldw	r2,-4(fp)
  80b730:	00c00074 	movhi	r3,1
  80b734:	10c01015 	stw	r3,64(r2)
  80b738:	00004706 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  80b73c:	e0bfff17 	ldw	r2,-4(fp)
  80b740:	10803017 	ldw	r2,192(r2)
  80b744:	10803fcc 	andi	r2,r2,255
  80b748:	10800618 	cmpnei	r2,r2,24
  80b74c:	10000a1e 	bne	r2,zero,80b778 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  80b750:	e0bfff17 	ldw	r2,-4(fp)
  80b754:	00c04034 	movhi	r3,256
  80b758:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  80b75c:	e0bfff17 	ldw	r2,-4(fp)
  80b760:	00c01004 	movi	r3,64
  80b764:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  80b768:	e0bfff17 	ldw	r2,-4(fp)
  80b76c:	00c00134 	movhi	r3,4
  80b770:	10c01015 	stw	r3,64(r2)
  80b774:	00003806 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  80b778:	e0bfff17 	ldw	r2,-4(fp)
  80b77c:	10803017 	ldw	r2,192(r2)
  80b780:	10803fcc 	andi	r2,r2,255
  80b784:	10800658 	cmpnei	r2,r2,25
  80b788:	10000d1e 	bne	r2,zero,80b7c0 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  80b78c:	e0bfff17 	ldw	r2,-4(fp)
  80b790:	00c08034 	movhi	r3,512
  80b794:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  80b798:	e0bfff17 	ldw	r2,-4(fp)
  80b79c:	00c08004 	movi	r3,512
  80b7a0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b7a4:	e0bfff17 	ldw	r2,-4(fp)
  80b7a8:	00c00074 	movhi	r3,1
  80b7ac:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  80b7b0:	e0bfff17 	ldw	r2,-4(fp)
  80b7b4:	00c00044 	movi	r3,1
  80b7b8:	10c03215 	stw	r3,200(r2)
  80b7bc:	00002606 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  80b7c0:	e0bfff17 	ldw	r2,-4(fp)
  80b7c4:	10803017 	ldw	r2,192(r2)
  80b7c8:	10803fcc 	andi	r2,r2,255
  80b7cc:	10800818 	cmpnei	r2,r2,32
  80b7d0:	10000d1e 	bne	r2,zero,80b808 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  80b7d4:	e0bfff17 	ldw	r2,-4(fp)
  80b7d8:	00c10034 	movhi	r3,1024
  80b7dc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  80b7e0:	e0bfff17 	ldw	r2,-4(fp)
  80b7e4:	00c10004 	movi	r3,1024
  80b7e8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b7ec:	e0bfff17 	ldw	r2,-4(fp)
  80b7f0:	00c00074 	movhi	r3,1
  80b7f4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  80b7f8:	e0bfff17 	ldw	r2,-4(fp)
  80b7fc:	00c00044 	movi	r3,1
  80b800:	10c03215 	stw	r3,200(r2)
  80b804:	00001406 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  80b808:	e0bfff17 	ldw	r2,-4(fp)
  80b80c:	10803017 	ldw	r2,192(r2)
  80b810:	10803fcc 	andi	r2,r2,255
  80b814:	10800858 	cmpnei	r2,r2,33
  80b818:	10000d1e 	bne	r2,zero,80b850 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  80b81c:	e0bfff17 	ldw	r2,-4(fp)
  80b820:	00c20034 	movhi	r3,2048
  80b824:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  80b828:	e0bfff17 	ldw	r2,-4(fp)
  80b82c:	00c20004 	movi	r3,2048
  80b830:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80b834:	e0bfff17 	ldw	r2,-4(fp)
  80b838:	00c00074 	movhi	r3,1
  80b83c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  80b840:	e0bfff17 	ldw	r2,-4(fp)
  80b844:	00c00044 	movi	r3,1
  80b848:	10c03215 	stw	r3,200(r2)
  80b84c:	00000206 	br	80b858 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  80b850:	00bffb44 	movi	r2,-19
  80b854:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  80b858:	e0bfff17 	ldw	r2,-4(fp)
  80b85c:	10800e17 	ldw	r2,56(r2)
  80b860:	1007883a 	mov	r3,r2
  80b864:	e0bfff17 	ldw	r2,-4(fp)
  80b868:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  80b86c:	e0bfff17 	ldw	r2,-4(fp)
  80b870:	00c00044 	movi	r3,1
  80b874:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  80b878:	e0bfff17 	ldw	r2,-4(fp)
  80b87c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  80b880:	e0bfff17 	ldw	r2,-4(fp)
  80b884:	00c04004 	movi	r3,256
  80b888:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  80b88c:	e0bffe17 	ldw	r2,-8(fp)
}
  80b890:	e037883a 	mov	sp,fp
  80b894:	dfc00117 	ldw	ra,4(sp)
  80b898:	df000017 	ldw	fp,0(sp)
  80b89c:	dec00204 	addi	sp,sp,8
  80b8a0:	f800283a 	ret

0080b8a4 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  80b8a4:	deffee04 	addi	sp,sp,-72
  80b8a8:	dfc01115 	stw	ra,68(sp)
  80b8ac:	df001015 	stw	fp,64(sp)
  80b8b0:	df001004 	addi	fp,sp,64
  80b8b4:	e13ffc15 	stw	r4,-16(fp)
  80b8b8:	e17ffd15 	stw	r5,-12(fp)
  80b8bc:	e1bffe15 	stw	r6,-8(fp)
  80b8c0:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  80b8c4:	00800804 	movi	r2,32
  80b8c8:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  80b8cc:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  80b8d0:	00002706 	br	80b970 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  80b8d4:	e0fff117 	ldw	r3,-60(fp)
  80b8d8:	e0bfff17 	ldw	r2,-4(fp)
  80b8dc:	1880012e 	bgeu	r3,r2,80b8e4 <alt_epcs_flash_memcmp+0x40>
  80b8e0:	1805883a 	mov	r2,r3
  80b8e4:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  80b8e8:	e0fffe17 	ldw	r3,-8(fp)
  80b8ec:	e0bff017 	ldw	r2,-64(fp)
  80b8f0:	1885883a 	add	r2,r3,r2
  80b8f4:	e0fff404 	addi	r3,fp,-48
  80b8f8:	e1fff217 	ldw	r7,-56(fp)
  80b8fc:	180d883a 	mov	r6,r3
  80b900:	100b883a 	mov	r5,r2
  80b904:	e13ffc17 	ldw	r4,-16(fp)
  80b908:	080be880 	call	80be88 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  80b90c:	1000020e 	bge	r2,zero,80b918 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  80b910:	00bfffc4 	movi	r2,-1
  80b914:	00001906 	br	80b97c <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  80b918:	e0bff017 	ldw	r2,-64(fp)
  80b91c:	e0fffd17 	ldw	r3,-12(fp)
  80b920:	1885883a 	add	r2,r3,r2
  80b924:	e13ff217 	ldw	r4,-56(fp)
  80b928:	e0fff404 	addi	r3,fp,-48
  80b92c:	200d883a 	mov	r6,r4
  80b930:	180b883a 	mov	r5,r3
  80b934:	1009883a 	mov	r4,r2
  80b938:	080f36c0 	call	80f36c <memcmp>
  80b93c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  80b940:	e0bff317 	ldw	r2,-52(fp)
  80b944:	10000226 	beq	r2,zero,80b950 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  80b948:	e0bff317 	ldw	r2,-52(fp)
  80b94c:	00000b06 	br	80b97c <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  80b950:	e0bff217 	ldw	r2,-56(fp)
  80b954:	e0ffff17 	ldw	r3,-4(fp)
  80b958:	1885c83a 	sub	r2,r3,r2
  80b95c:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  80b960:	e0fff017 	ldw	r3,-64(fp)
  80b964:	e0bff217 	ldw	r2,-56(fp)
  80b968:	1885883a 	add	r2,r3,r2
  80b96c:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  80b970:	e0bfff17 	ldw	r2,-4(fp)
  80b974:	103fd71e 	bne	r2,zero,80b8d4 <__alt_mem_epcs_flash_controller_0+0xff8028d4>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  80b978:	0005883a 	mov	r2,zero
}
  80b97c:	e037883a 	mov	sp,fp
  80b980:	dfc00117 	ldw	ra,4(sp)
  80b984:	df000017 	ldw	fp,0(sp)
  80b988:	dec00204 	addi	sp,sp,8
  80b98c:	f800283a 	ret

0080b990 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  80b990:	defff404 	addi	sp,sp,-48
  80b994:	dfc00b15 	stw	ra,44(sp)
  80b998:	df000a15 	stw	fp,40(sp)
  80b99c:	df000a04 	addi	fp,sp,40
  80b9a0:	e13ffc15 	stw	r4,-16(fp)
  80b9a4:	e17ffd15 	stw	r5,-12(fp)
  80b9a8:	e1bffe15 	stw	r6,-8(fp)
  80b9ac:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  80b9b0:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  80b9b4:	e03ff815 	stw	zero,-32(fp)
  80b9b8:	00008306 	br	80bbc8 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  80b9bc:	e0fffc17 	ldw	r3,-16(fp)
  80b9c0:	e0bff817 	ldw	r2,-32(fp)
  80b9c4:	1004913a 	slli	r2,r2,4
  80b9c8:	1885883a 	add	r2,r3,r2
  80b9cc:	10800d04 	addi	r2,r2,52
  80b9d0:	10800017 	ldw	r2,0(r2)
  80b9d4:	e0fffd17 	ldw	r3,-12(fp)
  80b9d8:	18807816 	blt	r3,r2,80bbbc <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  80b9dc:	e0fffc17 	ldw	r3,-16(fp)
  80b9e0:	e0bff817 	ldw	r2,-32(fp)
  80b9e4:	1004913a 	slli	r2,r2,4
  80b9e8:	1885883a 	add	r2,r3,r2
  80b9ec:	10800d04 	addi	r2,r2,52
  80b9f0:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  80b9f4:	e13ffc17 	ldw	r4,-16(fp)
  80b9f8:	e0bff817 	ldw	r2,-32(fp)
  80b9fc:	1004913a 	slli	r2,r2,4
  80ba00:	2085883a 	add	r2,r4,r2
  80ba04:	10800e04 	addi	r2,r2,56
  80ba08:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  80ba0c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  80ba10:	e0fffd17 	ldw	r3,-12(fp)
  80ba14:	1880690e 	bge	r3,r2,80bbbc <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  80ba18:	e0fffc17 	ldw	r3,-16(fp)
  80ba1c:	e0bff817 	ldw	r2,-32(fp)
  80ba20:	1004913a 	slli	r2,r2,4
  80ba24:	1885883a 	add	r2,r3,r2
  80ba28:	10800d04 	addi	r2,r2,52
  80ba2c:	10800017 	ldw	r2,0(r2)
  80ba30:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  80ba34:	e03ff915 	stw	zero,-28(fp)
  80ba38:	00005806 	br	80bb9c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  80ba3c:	e0fffd17 	ldw	r3,-12(fp)
  80ba40:	e0bffa17 	ldw	r2,-24(fp)
  80ba44:	18804916 	blt	r3,r2,80bb6c <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  80ba48:	e0fffc17 	ldw	r3,-16(fp)
  80ba4c:	e0bff817 	ldw	r2,-32(fp)
  80ba50:	10800104 	addi	r2,r2,4
  80ba54:	1004913a 	slli	r2,r2,4
  80ba58:	1885883a 	add	r2,r3,r2
  80ba5c:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  80ba60:	e0bffa17 	ldw	r2,-24(fp)
  80ba64:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  80ba68:	e0fffd17 	ldw	r3,-12(fp)
  80ba6c:	18803f0e 	bge	r3,r2,80bb6c <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  80ba70:	e0fffc17 	ldw	r3,-16(fp)
  80ba74:	e0bff817 	ldw	r2,-32(fp)
  80ba78:	10800104 	addi	r2,r2,4
  80ba7c:	1004913a 	slli	r2,r2,4
  80ba80:	1885883a 	add	r2,r3,r2
  80ba84:	10c00017 	ldw	r3,0(r2)
  80ba88:	e0bffa17 	ldw	r2,-24(fp)
  80ba8c:	1887883a 	add	r3,r3,r2
  80ba90:	e0bffd17 	ldw	r2,-12(fp)
  80ba94:	1885c83a 	sub	r2,r3,r2
  80ba98:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  80ba9c:	e0fffb17 	ldw	r3,-20(fp)
  80baa0:	e0bfff17 	ldw	r2,-4(fp)
  80baa4:	1880010e 	bge	r3,r2,80baac <alt_epcs_flash_write+0x11c>
  80baa8:	1805883a 	mov	r2,r3
  80baac:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  80bab0:	e0bffb17 	ldw	r2,-20(fp)
  80bab4:	100f883a 	mov	r7,r2
  80bab8:	e1bffd17 	ldw	r6,-12(fp)
  80babc:	e17ffe17 	ldw	r5,-8(fp)
  80bac0:	e13ffc17 	ldw	r4,-16(fp)
  80bac4:	080b8a40 	call	80b8a4 <alt_epcs_flash_memcmp>
  80bac8:	10001226 	beq	r2,zero,80bb14 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  80bacc:	e0bffc17 	ldw	r2,-16(fp)
  80bad0:	10800817 	ldw	r2,32(r2)
  80bad4:	e17ffa17 	ldw	r5,-24(fp)
  80bad8:	e13ffc17 	ldw	r4,-16(fp)
  80badc:	103ee83a 	callr	r2
  80bae0:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  80bae4:	e0bff717 	ldw	r2,-36(fp)
  80bae8:	10000a1e 	bne	r2,zero,80bb14 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  80baec:	e0bffc17 	ldw	r2,-16(fp)
  80baf0:	10800917 	ldw	r2,36(r2)
  80baf4:	e0fffb17 	ldw	r3,-20(fp)
  80baf8:	d8c00015 	stw	r3,0(sp)
  80bafc:	e1fffe17 	ldw	r7,-8(fp)
  80bb00:	e1bffd17 	ldw	r6,-12(fp)
  80bb04:	e17ffa17 	ldw	r5,-24(fp)
  80bb08:	e13ffc17 	ldw	r4,-16(fp)
  80bb0c:	103ee83a 	callr	r2
  80bb10:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  80bb14:	e0ffff17 	ldw	r3,-4(fp)
  80bb18:	e0bffb17 	ldw	r2,-20(fp)
  80bb1c:	18802e26 	beq	r3,r2,80bbd8 <alt_epcs_flash_write+0x248>
  80bb20:	e0bff717 	ldw	r2,-36(fp)
  80bb24:	10002c1e 	bne	r2,zero,80bbd8 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  80bb28:	e0ffff17 	ldw	r3,-4(fp)
  80bb2c:	e0bffb17 	ldw	r2,-20(fp)
  80bb30:	1885c83a 	sub	r2,r3,r2
  80bb34:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  80bb38:	e0fffc17 	ldw	r3,-16(fp)
  80bb3c:	e0bff817 	ldw	r2,-32(fp)
  80bb40:	10800104 	addi	r2,r2,4
  80bb44:	1004913a 	slli	r2,r2,4
  80bb48:	1885883a 	add	r2,r3,r2
  80bb4c:	10c00017 	ldw	r3,0(r2)
  80bb50:	e0bffa17 	ldw	r2,-24(fp)
  80bb54:	1885883a 	add	r2,r3,r2
  80bb58:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  80bb5c:	e0bffb17 	ldw	r2,-20(fp)
  80bb60:	e0fffe17 	ldw	r3,-8(fp)
  80bb64:	1885883a 	add	r2,r3,r2
  80bb68:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  80bb6c:	e0fffc17 	ldw	r3,-16(fp)
  80bb70:	e0bff817 	ldw	r2,-32(fp)
  80bb74:	10800104 	addi	r2,r2,4
  80bb78:	1004913a 	slli	r2,r2,4
  80bb7c:	1885883a 	add	r2,r3,r2
  80bb80:	10800017 	ldw	r2,0(r2)
  80bb84:	e0fffa17 	ldw	r3,-24(fp)
  80bb88:	1885883a 	add	r2,r3,r2
  80bb8c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  80bb90:	e0bff917 	ldw	r2,-28(fp)
  80bb94:	10800044 	addi	r2,r2,1
  80bb98:	e0bff915 	stw	r2,-28(fp)
  80bb9c:	e0fffc17 	ldw	r3,-16(fp)
  80bba0:	e0bff817 	ldw	r2,-32(fp)
  80bba4:	1004913a 	slli	r2,r2,4
  80bba8:	1885883a 	add	r2,r3,r2
  80bbac:	10800f04 	addi	r2,r2,60
  80bbb0:	10800017 	ldw	r2,0(r2)
  80bbb4:	e0fff917 	ldw	r3,-28(fp)
  80bbb8:	18bfa016 	blt	r3,r2,80ba3c <__alt_mem_epcs_flash_controller_0+0xff802a3c>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  80bbbc:	e0bff817 	ldw	r2,-32(fp)
  80bbc0:	10800044 	addi	r2,r2,1
  80bbc4:	e0bff815 	stw	r2,-32(fp)
  80bbc8:	e0bffc17 	ldw	r2,-16(fp)
  80bbcc:	10800c17 	ldw	r2,48(r2)
  80bbd0:	e0fff817 	ldw	r3,-32(fp)
  80bbd4:	18bf7916 	blt	r3,r2,80b9bc <__alt_mem_epcs_flash_controller_0+0xff8029bc>
      }
    }
  }

finished:
  return ret_code;
  80bbd8:	e0bff717 	ldw	r2,-36(fp)
}
  80bbdc:	e037883a 	mov	sp,fp
  80bbe0:	dfc00117 	ldw	ra,4(sp)
  80bbe4:	df000017 	ldw	fp,0(sp)
  80bbe8:	dec00204 	addi	sp,sp,8
  80bbec:	f800283a 	ret

0080bbf0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  80bbf0:	defffa04 	addi	sp,sp,-24
  80bbf4:	df000515 	stw	fp,20(sp)
  80bbf8:	df000504 	addi	fp,sp,20
  80bbfc:	e13ffd15 	stw	r4,-12(fp)
  80bc00:	e17ffe15 	stw	r5,-8(fp)
  80bc04:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  80bc08:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  80bc0c:	e0bffd17 	ldw	r2,-12(fp)
  80bc10:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  80bc14:	e0bffc17 	ldw	r2,-16(fp)
  80bc18:	10c00c17 	ldw	r3,48(r2)
  80bc1c:	e0bfff17 	ldw	r2,-4(fp)
  80bc20:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  80bc24:	e0bffc17 	ldw	r2,-16(fp)
  80bc28:	10800c17 	ldw	r2,48(r2)
  80bc2c:	1000031e 	bne	r2,zero,80bc3c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  80bc30:	00bffec4 	movi	r2,-5
  80bc34:	e0bffb15 	stw	r2,-20(fp)
  80bc38:	00000b06 	br	80bc68 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  80bc3c:	e0bffc17 	ldw	r2,-16(fp)
  80bc40:	10800c17 	ldw	r2,48(r2)
  80bc44:	10800250 	cmplti	r2,r2,9
  80bc48:	1000031e 	bne	r2,zero,80bc58 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  80bc4c:	00bffd04 	movi	r2,-12
  80bc50:	e0bffb15 	stw	r2,-20(fp)
  80bc54:	00000406 	br	80bc68 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  80bc58:	e0bffc17 	ldw	r2,-16(fp)
  80bc5c:	10c00d04 	addi	r3,r2,52
  80bc60:	e0bffe17 	ldw	r2,-8(fp)
  80bc64:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  80bc68:	e0bffb17 	ldw	r2,-20(fp)
}
  80bc6c:	e037883a 	mov	sp,fp
  80bc70:	df000017 	ldw	fp,0(sp)
  80bc74:	dec00104 	addi	sp,sp,4
  80bc78:	f800283a 	ret

0080bc7c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  80bc7c:	defff904 	addi	sp,sp,-28
  80bc80:	df000615 	stw	fp,24(sp)
  80bc84:	df000604 	addi	fp,sp,24
  80bc88:	e13ffe15 	stw	r4,-8(fp)
  80bc8c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80bc90:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80bc94:	e0bffe17 	ldw	r2,-8(fp)
  80bc98:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  80bc9c:	e0bffb17 	ldw	r2,-20(fp)
  80bca0:	10800c17 	ldw	r2,48(r2)
  80bca4:	10bfffc4 	addi	r2,r2,-1
  80bca8:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  80bcac:	e0fffb17 	ldw	r3,-20(fp)
  80bcb0:	e0bffc17 	ldw	r2,-16(fp)
  80bcb4:	1004913a 	slli	r2,r2,4
  80bcb8:	1885883a 	add	r2,r3,r2
  80bcbc:	10800d04 	addi	r2,r2,52
  80bcc0:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  80bcc4:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  80bcc8:	e13ffb17 	ldw	r4,-20(fp)
  80bccc:	e0bffc17 	ldw	r2,-16(fp)
  80bcd0:	1004913a 	slli	r2,r2,4
  80bcd4:	2085883a 	add	r2,r4,r2
  80bcd8:	10800e04 	addi	r2,r2,56
  80bcdc:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  80bce0:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  80bce4:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  80bce8:	e0bfff17 	ldw	r2,-4(fp)
  80bcec:	e0fffd17 	ldw	r3,-12(fp)
  80bcf0:	1880022e 	bgeu	r3,r2,80bcfc <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  80bcf4:	00bffec4 	movi	r2,-5
  80bcf8:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  80bcfc:	e0bffa17 	ldw	r2,-24(fp)
}
  80bd00:	e037883a 	mov	sp,fp
  80bd04:	df000017 	ldw	fp,0(sp)
  80bd08:	dec00104 	addi	sp,sp,4
  80bd0c:	f800283a 	ret

0080bd10 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  80bd10:	defffa04 	addi	sp,sp,-24
  80bd14:	dfc00515 	stw	ra,20(sp)
  80bd18:	df000415 	stw	fp,16(sp)
  80bd1c:	df000404 	addi	fp,sp,16
  80bd20:	e13ffe15 	stw	r4,-8(fp)
  80bd24:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80bd28:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80bd2c:	e0bffe17 	ldw	r2,-8(fp)
  80bd30:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  80bd34:	e17fff17 	ldw	r5,-4(fp)
  80bd38:	e13ffe17 	ldw	r4,-8(fp)
  80bd3c:	080bc7c0 	call	80bc7c <alt_epcs_test_address>
  80bd40:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  80bd44:	e0bffc17 	ldw	r2,-16(fp)
  80bd48:	10000916 	blt	r2,zero,80bd70 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  80bd4c:	e0bffd17 	ldw	r2,-12(fp)
  80bd50:	10c02e17 	ldw	r3,184(r2)
  80bd54:	e13fff17 	ldw	r4,-4(fp)
  80bd58:	e0bffd17 	ldw	r2,-12(fp)
  80bd5c:	10803217 	ldw	r2,200(r2)
  80bd60:	100d883a 	mov	r6,r2
  80bd64:	200b883a 	mov	r5,r4
  80bd68:	1809883a 	mov	r4,r3
  80bd6c:	080d9640 	call	80d964 <epcs_sector_erase>
  }
  return ret_code;
  80bd70:	e0bffc17 	ldw	r2,-16(fp)
}
  80bd74:	e037883a 	mov	sp,fp
  80bd78:	dfc00117 	ldw	ra,4(sp)
  80bd7c:	df000017 	ldw	fp,0(sp)
  80bd80:	dec00204 	addi	sp,sp,8
  80bd84:	f800283a 	ret

0080bd88 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  80bd88:	defff404 	addi	sp,sp,-48
  80bd8c:	dfc00b15 	stw	ra,44(sp)
  80bd90:	df000a15 	stw	fp,40(sp)
  80bd94:	df000a04 	addi	fp,sp,40
  80bd98:	e13ffc15 	stw	r4,-16(fp)
  80bd9c:	e17ffd15 	stw	r5,-12(fp)
  80bda0:	e1bffe15 	stw	r6,-8(fp)
  80bda4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80bda8:	e0bffc17 	ldw	r2,-16(fp)
  80bdac:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  80bdb0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  80bdb4:	e17ffe17 	ldw	r5,-8(fp)
  80bdb8:	e13ffc17 	ldw	r4,-16(fp)
  80bdbc:	080bc7c0 	call	80bc7c <alt_epcs_test_address>
  80bdc0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  80bdc4:	e0bff917 	ldw	r2,-28(fp)
  80bdc8:	10002916 	blt	r2,zero,80be70 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  80bdcc:	00002606 	br	80be68 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  80bdd0:	e0bff817 	ldw	r2,-32(fp)
  80bdd4:	10c03117 	ldw	r3,196(r2)
  80bdd8:	e0bffe17 	ldw	r2,-8(fp)
  80bddc:	1887883a 	add	r3,r3,r2
  80bde0:	e0bff817 	ldw	r2,-32(fp)
  80bde4:	10803117 	ldw	r2,196(r2)
  80bde8:	0085c83a 	sub	r2,zero,r2
  80bdec:	1884703a 	and	r2,r3,r2
  80bdf0:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  80bdf4:	e0fffa17 	ldw	r3,-24(fp)
  80bdf8:	e0bffe17 	ldw	r2,-8(fp)
  80bdfc:	1885c83a 	sub	r2,r3,r2
  80be00:	e0c00217 	ldw	r3,8(fp)
  80be04:	1880010e 	bge	r3,r2,80be0c <alt_epcs_flash_write_block+0x84>
  80be08:	1805883a 	mov	r2,r3
  80be0c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  80be10:	e0bff817 	ldw	r2,-32(fp)
  80be14:	11002e17 	ldw	r4,184(r2)
  80be18:	e0bff717 	ldw	r2,-36(fp)
  80be1c:	e0ffff17 	ldw	r3,-4(fp)
  80be20:	1887883a 	add	r3,r3,r2
  80be24:	e0bff817 	ldw	r2,-32(fp)
  80be28:	10803217 	ldw	r2,200(r2)
  80be2c:	d8800015 	stw	r2,0(sp)
  80be30:	e1fffb17 	ldw	r7,-20(fp)
  80be34:	180d883a 	mov	r6,r3
  80be38:	e17ffe17 	ldw	r5,-8(fp)
  80be3c:	080dc140 	call	80dc14 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  80be40:	e0c00217 	ldw	r3,8(fp)
  80be44:	e0bffb17 	ldw	r2,-20(fp)
  80be48:	1885c83a 	sub	r2,r3,r2
  80be4c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  80be50:	e0fff717 	ldw	r3,-36(fp)
  80be54:	e0bffb17 	ldw	r2,-20(fp)
  80be58:	1885883a 	add	r2,r3,r2
  80be5c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  80be60:	e0bffa17 	ldw	r2,-24(fp)
  80be64:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  80be68:	e0800217 	ldw	r2,8(fp)
  80be6c:	103fd81e 	bne	r2,zero,80bdd0 <__alt_mem_epcs_flash_controller_0+0xff802dd0>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  80be70:	e0bff917 	ldw	r2,-28(fp)
}
  80be74:	e037883a 	mov	sp,fp
  80be78:	dfc00117 	ldw	ra,4(sp)
  80be7c:	df000017 	ldw	fp,0(sp)
  80be80:	dec00204 	addi	sp,sp,8
  80be84:	f800283a 	ret

0080be88 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  80be88:	defff704 	addi	sp,sp,-36
  80be8c:	dfc00815 	stw	ra,32(sp)
  80be90:	df000715 	stw	fp,28(sp)
  80be94:	df000704 	addi	fp,sp,28
  80be98:	e13ffc15 	stw	r4,-16(fp)
  80be9c:	e17ffd15 	stw	r5,-12(fp)
  80bea0:	e1bffe15 	stw	r6,-8(fp)
  80bea4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  80bea8:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80beac:	e0bffc17 	ldw	r2,-16(fp)
  80beb0:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  80beb4:	e17ffd17 	ldw	r5,-12(fp)
  80beb8:	e13ffc17 	ldw	r4,-16(fp)
  80bebc:	080bc7c0 	call	80bc7c <alt_epcs_test_address>
  80bec0:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  80bec4:	e0bffa17 	ldw	r2,-24(fp)
  80bec8:	10000f16 	blt	r2,zero,80bf08 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  80becc:	e0bffb17 	ldw	r2,-20(fp)
  80bed0:	10c02e17 	ldw	r3,184(r2)
  80bed4:	e0bffb17 	ldw	r2,-20(fp)
  80bed8:	10803217 	ldw	r2,200(r2)
  80bedc:	d8800015 	stw	r2,0(sp)
  80bee0:	e1ffff17 	ldw	r7,-4(fp)
  80bee4:	e1bffe17 	ldw	r6,-8(fp)
  80bee8:	e17ffd17 	ldw	r5,-12(fp)
  80beec:	1809883a 	mov	r4,r3
  80bef0:	080da600 	call	80da60 <epcs_read_buffer>
  80bef4:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  80bef8:	e0fffa17 	ldw	r3,-24(fp)
  80befc:	e0bfff17 	ldw	r2,-4(fp)
  80bf00:	1880011e 	bne	r3,r2,80bf08 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  80bf04:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  80bf08:	e0bffa17 	ldw	r2,-24(fp)
}
  80bf0c:	e037883a 	mov	sp,fp
  80bf10:	dfc00117 	ldw	ra,4(sp)
  80bf14:	df000017 	ldw	fp,0(sp)
  80bf18:	dec00204 	addi	sp,sp,8
  80bf1c:	f800283a 	ret

0080bf20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80bf20:	defffa04 	addi	sp,sp,-24
  80bf24:	dfc00515 	stw	ra,20(sp)
  80bf28:	df000415 	stw	fp,16(sp)
  80bf2c:	df000404 	addi	fp,sp,16
  80bf30:	e13ffd15 	stw	r4,-12(fp)
  80bf34:	e17ffe15 	stw	r5,-8(fp)
  80bf38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bf3c:	e0bffd17 	ldw	r2,-12(fp)
  80bf40:	10800017 	ldw	r2,0(r2)
  80bf44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80bf48:	e0bffc17 	ldw	r2,-16(fp)
  80bf4c:	10c00a04 	addi	r3,r2,40
  80bf50:	e0bffd17 	ldw	r2,-12(fp)
  80bf54:	10800217 	ldw	r2,8(r2)
  80bf58:	100f883a 	mov	r7,r2
  80bf5c:	e1bfff17 	ldw	r6,-4(fp)
  80bf60:	e17ffe17 	ldw	r5,-8(fp)
  80bf64:	1809883a 	mov	r4,r3
  80bf68:	080c6cc0 	call	80c6cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80bf6c:	e037883a 	mov	sp,fp
  80bf70:	dfc00117 	ldw	ra,4(sp)
  80bf74:	df000017 	ldw	fp,0(sp)
  80bf78:	dec00204 	addi	sp,sp,8
  80bf7c:	f800283a 	ret

0080bf80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bf80:	defffa04 	addi	sp,sp,-24
  80bf84:	dfc00515 	stw	ra,20(sp)
  80bf88:	df000415 	stw	fp,16(sp)
  80bf8c:	df000404 	addi	fp,sp,16
  80bf90:	e13ffd15 	stw	r4,-12(fp)
  80bf94:	e17ffe15 	stw	r5,-8(fp)
  80bf98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bf9c:	e0bffd17 	ldw	r2,-12(fp)
  80bfa0:	10800017 	ldw	r2,0(r2)
  80bfa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80bfa8:	e0bffc17 	ldw	r2,-16(fp)
  80bfac:	10c00a04 	addi	r3,r2,40
  80bfb0:	e0bffd17 	ldw	r2,-12(fp)
  80bfb4:	10800217 	ldw	r2,8(r2)
  80bfb8:	100f883a 	mov	r7,r2
  80bfbc:	e1bfff17 	ldw	r6,-4(fp)
  80bfc0:	e17ffe17 	ldw	r5,-8(fp)
  80bfc4:	1809883a 	mov	r4,r3
  80bfc8:	080c9880 	call	80c988 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80bfcc:	e037883a 	mov	sp,fp
  80bfd0:	dfc00117 	ldw	ra,4(sp)
  80bfd4:	df000017 	ldw	fp,0(sp)
  80bfd8:	dec00204 	addi	sp,sp,8
  80bfdc:	f800283a 	ret

0080bfe0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80bfe0:	defffc04 	addi	sp,sp,-16
  80bfe4:	dfc00315 	stw	ra,12(sp)
  80bfe8:	df000215 	stw	fp,8(sp)
  80bfec:	df000204 	addi	fp,sp,8
  80bff0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bff4:	e0bfff17 	ldw	r2,-4(fp)
  80bff8:	10800017 	ldw	r2,0(r2)
  80bffc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80c000:	e0bffe17 	ldw	r2,-8(fp)
  80c004:	10c00a04 	addi	r3,r2,40
  80c008:	e0bfff17 	ldw	r2,-4(fp)
  80c00c:	10800217 	ldw	r2,8(r2)
  80c010:	100b883a 	mov	r5,r2
  80c014:	1809883a 	mov	r4,r3
  80c018:	080c5740 	call	80c574 <altera_avalon_jtag_uart_close>
}
  80c01c:	e037883a 	mov	sp,fp
  80c020:	dfc00117 	ldw	ra,4(sp)
  80c024:	df000017 	ldw	fp,0(sp)
  80c028:	dec00204 	addi	sp,sp,8
  80c02c:	f800283a 	ret

0080c030 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80c030:	defffa04 	addi	sp,sp,-24
  80c034:	dfc00515 	stw	ra,20(sp)
  80c038:	df000415 	stw	fp,16(sp)
  80c03c:	df000404 	addi	fp,sp,16
  80c040:	e13ffd15 	stw	r4,-12(fp)
  80c044:	e17ffe15 	stw	r5,-8(fp)
  80c048:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80c04c:	e0bffd17 	ldw	r2,-12(fp)
  80c050:	10800017 	ldw	r2,0(r2)
  80c054:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80c058:	e0bffc17 	ldw	r2,-16(fp)
  80c05c:	10800a04 	addi	r2,r2,40
  80c060:	e1bfff17 	ldw	r6,-4(fp)
  80c064:	e17ffe17 	ldw	r5,-8(fp)
  80c068:	1009883a 	mov	r4,r2
  80c06c:	080c5dc0 	call	80c5dc <altera_avalon_jtag_uart_ioctl>
}
  80c070:	e037883a 	mov	sp,fp
  80c074:	dfc00117 	ldw	ra,4(sp)
  80c078:	df000017 	ldw	fp,0(sp)
  80c07c:	dec00204 	addi	sp,sp,8
  80c080:	f800283a 	ret

0080c084 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80c084:	defff104 	addi	sp,sp,-60
  80c088:	dfc00e15 	stw	ra,56(sp)
  80c08c:	df000d15 	stw	fp,52(sp)
  80c090:	df000d04 	addi	fp,sp,52
  80c094:	e13ff915 	stw	r4,-28(fp)
  80c098:	e17ffa15 	stw	r5,-24(fp)
  80c09c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  80c0a0:	e0bff917 	ldw	r2,-28(fp)
  80c0a4:	10800c04 	addi	r2,r2,48
  80c0a8:	e0bff415 	stw	r2,-48(fp)
  80c0ac:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80c0b0:	e0bff80b 	ldhu	r2,-32(fp)
  80c0b4:	e0fff884 	addi	r3,fp,-30
  80c0b8:	180b883a 	mov	r5,r3
  80c0bc:	1009883a 	mov	r4,r2
  80c0c0:	0805fbc0 	call	805fbc <OSFlagCreate>
  80c0c4:	1007883a 	mov	r3,r2
  80c0c8:	e0bff417 	ldw	r2,-48(fp)
  80c0cc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  80c0d0:	e0bff917 	ldw	r2,-28(fp)
  80c0d4:	10800a04 	addi	r2,r2,40
  80c0d8:	e0bff515 	stw	r2,-44(fp)
  80c0dc:	00800044 	movi	r2,1
  80c0e0:	e0bff78d 	sth	r2,-34(fp)
  80c0e4:	e0bff78b 	ldhu	r2,-34(fp)
  80c0e8:	1009883a 	mov	r4,r2
  80c0ec:	0808cdc0 	call	808cdc <OSSemCreate>
  80c0f0:	1007883a 	mov	r3,r2
  80c0f4:	e0bff517 	ldw	r2,-44(fp)
  80c0f8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  80c0fc:	e0bff917 	ldw	r2,-28(fp)
  80c100:	10800b04 	addi	r2,r2,44
  80c104:	e0bff615 	stw	r2,-40(fp)
  80c108:	00800044 	movi	r2,1
  80c10c:	e0bff70d 	sth	r2,-36(fp)
  80c110:	e0bff70b 	ldhu	r2,-36(fp)
  80c114:	1009883a 	mov	r4,r2
  80c118:	0808cdc0 	call	808cdc <OSSemCreate>
  80c11c:	1007883a 	mov	r3,r2
  80c120:	e0bff617 	ldw	r2,-40(fp)
  80c124:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c128:	e0bff917 	ldw	r2,-28(fp)
  80c12c:	00c00044 	movi	r3,1
  80c130:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c134:	e0bff917 	ldw	r2,-28(fp)
  80c138:	10800017 	ldw	r2,0(r2)
  80c13c:	10800104 	addi	r2,r2,4
  80c140:	1007883a 	mov	r3,r2
  80c144:	e0bff917 	ldw	r2,-28(fp)
  80c148:	10800817 	ldw	r2,32(r2)
  80c14c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80c150:	e0bffa17 	ldw	r2,-24(fp)
  80c154:	e0fffb17 	ldw	r3,-20(fp)
  80c158:	d8000015 	stw	zero,0(sp)
  80c15c:	e1fff917 	ldw	r7,-28(fp)
  80c160:	01802074 	movhi	r6,129
  80c164:	31b07304 	addi	r6,r6,-15924
  80c168:	180b883a 	mov	r5,r3
  80c16c:	1009883a 	mov	r4,r2
  80c170:	080e2580 	call	80e258 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80c174:	e0bff917 	ldw	r2,-28(fp)
  80c178:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80c17c:	e0bff917 	ldw	r2,-28(fp)
  80c180:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c184:	d0e05017 	ldw	r3,-32448(gp)
  80c188:	e1fff917 	ldw	r7,-28(fp)
  80c18c:	01802074 	movhi	r6,129
  80c190:	31b11c04 	addi	r6,r6,-15248
  80c194:	180b883a 	mov	r5,r3
  80c198:	1009883a 	mov	r4,r2
  80c19c:	080ded00 	call	80ded0 <alt_alarm_start>
  80c1a0:	1000040e 	bge	r2,zero,80c1b4 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80c1a4:	e0fff917 	ldw	r3,-28(fp)
  80c1a8:	00a00034 	movhi	r2,32768
  80c1ac:	10bfffc4 	addi	r2,r2,-1
  80c1b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80c1b4:	0001883a 	nop
  80c1b8:	e037883a 	mov	sp,fp
  80c1bc:	dfc00117 	ldw	ra,4(sp)
  80c1c0:	df000017 	ldw	fp,0(sp)
  80c1c4:	dec00204 	addi	sp,sp,8
  80c1c8:	f800283a 	ret

0080c1cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80c1cc:	defff204 	addi	sp,sp,-56
  80c1d0:	dfc00d15 	stw	ra,52(sp)
  80c1d4:	df000c15 	stw	fp,48(sp)
  80c1d8:	df000c04 	addi	fp,sp,48
  80c1dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80c1e0:	e0bfff17 	ldw	r2,-4(fp)
  80c1e4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  80c1e8:	e0bff617 	ldw	r2,-40(fp)
  80c1ec:	10800017 	ldw	r2,0(r2)
  80c1f0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c1f4:	e0bff717 	ldw	r2,-36(fp)
  80c1f8:	10800104 	addi	r2,r2,4
  80c1fc:	10800037 	ldwio	r2,0(r2)
  80c200:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80c204:	e0bff817 	ldw	r2,-32(fp)
  80c208:	1080c00c 	andi	r2,r2,768
  80c20c:	10009126 	beq	r2,zero,80c454 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80c210:	e0bff817 	ldw	r2,-32(fp)
  80c214:	1080400c 	andi	r2,r2,256
  80c218:	10004726 	beq	r2,zero,80c338 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80c21c:	00800074 	movhi	r2,1
  80c220:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c224:	e0bff617 	ldw	r2,-40(fp)
  80c228:	10800d17 	ldw	r2,52(r2)
  80c22c:	10800044 	addi	r2,r2,1
  80c230:	1081ffcc 	andi	r2,r2,2047
  80c234:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  80c238:	e0bff617 	ldw	r2,-40(fp)
  80c23c:	10c00e17 	ldw	r3,56(r2)
  80c240:	e0bff917 	ldw	r2,-28(fp)
  80c244:	18802726 	beq	r3,r2,80c2e4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80c248:	e0bff717 	ldw	r2,-36(fp)
  80c24c:	10800037 	ldwio	r2,0(r2)
  80c250:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80c254:	e0bff417 	ldw	r2,-48(fp)
  80c258:	10a0000c 	andi	r2,r2,32768
  80c25c:	10002326 	beq	r2,zero,80c2ec <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80c260:	e0bff617 	ldw	r2,-40(fp)
  80c264:	10800d17 	ldw	r2,52(r2)
  80c268:	e0fff417 	ldw	r3,-48(fp)
  80c26c:	1809883a 	mov	r4,r3
  80c270:	e0fff617 	ldw	r3,-40(fp)
  80c274:	1885883a 	add	r2,r3,r2
  80c278:	10801104 	addi	r2,r2,68
  80c27c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c280:	e0bff617 	ldw	r2,-40(fp)
  80c284:	10800d17 	ldw	r2,52(r2)
  80c288:	10800044 	addi	r2,r2,1
  80c28c:	10c1ffcc 	andi	r3,r2,2047
  80c290:	e0bff617 	ldw	r2,-40(fp)
  80c294:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  80c298:	e0bff617 	ldw	r2,-40(fp)
  80c29c:	10800c17 	ldw	r2,48(r2)
  80c2a0:	e0bffb15 	stw	r2,-20(fp)
  80c2a4:	00800044 	movi	r2,1
  80c2a8:	e0bffc0d 	sth	r2,-16(fp)
  80c2ac:	00800044 	movi	r2,1
  80c2b0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80c2b4:	d0a03b43 	ldbu	r2,-32531(gp)
  80c2b8:	10803fcc 	andi	r2,r2,255
  80c2bc:	103fd926 	beq	r2,zero,80c224 <__alt_mem_epcs_flash_controller_0+0xff803224>
  {
    OSFlagPost (group, flags, opt, &err);
  80c2c0:	e0bffc0b 	ldhu	r2,-16(fp)
  80c2c4:	e0fffc83 	ldbu	r3,-14(fp)
  80c2c8:	e13ffdc4 	addi	r4,fp,-9
  80c2cc:	200f883a 	mov	r7,r4
  80c2d0:	180d883a 	mov	r6,r3
  80c2d4:	100b883a 	mov	r5,r2
  80c2d8:	e13ffb17 	ldw	r4,-20(fp)
  80c2dc:	0806b980 	call	806b98 <OSFlagPost>
      }
  80c2e0:	003fd006 	br	80c224 <__alt_mem_epcs_flash_controller_0+0xff803224>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80c2e4:	0001883a 	nop
  80c2e8:	00000106 	br	80c2f0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80c2ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c2f0:	e0bff417 	ldw	r2,-48(fp)
  80c2f4:	10bfffec 	andhi	r2,r2,65535
  80c2f8:	10000f26 	beq	r2,zero,80c338 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c2fc:	e0bff617 	ldw	r2,-40(fp)
  80c300:	10c00817 	ldw	r3,32(r2)
  80c304:	00bfff84 	movi	r2,-2
  80c308:	1886703a 	and	r3,r3,r2
  80c30c:	e0bff617 	ldw	r2,-40(fp)
  80c310:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c314:	e0bff717 	ldw	r2,-36(fp)
  80c318:	10800104 	addi	r2,r2,4
  80c31c:	1007883a 	mov	r3,r2
  80c320:	e0bff617 	ldw	r2,-40(fp)
  80c324:	10800817 	ldw	r2,32(r2)
  80c328:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c32c:	e0bff717 	ldw	r2,-36(fp)
  80c330:	10800104 	addi	r2,r2,4
  80c334:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c338:	e0bff817 	ldw	r2,-32(fp)
  80c33c:	1080800c 	andi	r2,r2,512
  80c340:	103fac26 	beq	r2,zero,80c1f4 <__alt_mem_epcs_flash_controller_0+0xff8031f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c344:	e0bff817 	ldw	r2,-32(fp)
  80c348:	1004d43a 	srli	r2,r2,16
  80c34c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c350:	00002606 	br	80c3ec <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c354:	e0bff717 	ldw	r2,-36(fp)
  80c358:	e0fff617 	ldw	r3,-40(fp)
  80c35c:	18c01017 	ldw	r3,64(r3)
  80c360:	e13ff617 	ldw	r4,-40(fp)
  80c364:	20c7883a 	add	r3,r4,r3
  80c368:	18c21104 	addi	r3,r3,2116
  80c36c:	18c00003 	ldbu	r3,0(r3)
  80c370:	18c03fcc 	andi	r3,r3,255
  80c374:	18c0201c 	xori	r3,r3,128
  80c378:	18ffe004 	addi	r3,r3,-128
  80c37c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c380:	e0bff617 	ldw	r2,-40(fp)
  80c384:	10801017 	ldw	r2,64(r2)
  80c388:	10800044 	addi	r2,r2,1
  80c38c:	10c1ffcc 	andi	r3,r2,2047
  80c390:	e0bff617 	ldw	r2,-40(fp)
  80c394:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  80c398:	e0bff617 	ldw	r2,-40(fp)
  80c39c:	10800c17 	ldw	r2,48(r2)
  80c3a0:	e0bffa15 	stw	r2,-24(fp)
  80c3a4:	00800084 	movi	r2,2
  80c3a8:	e0bffd0d 	sth	r2,-12(fp)
  80c3ac:	00800044 	movi	r2,1
  80c3b0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80c3b4:	d0a03b43 	ldbu	r2,-32531(gp)
  80c3b8:	10803fcc 	andi	r2,r2,255
  80c3bc:	10000826 	beq	r2,zero,80c3e0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  80c3c0:	e0bffd0b 	ldhu	r2,-12(fp)
  80c3c4:	e0fffd83 	ldbu	r3,-10(fp)
  80c3c8:	e13ffe04 	addi	r4,fp,-8
  80c3cc:	200f883a 	mov	r7,r4
  80c3d0:	180d883a 	mov	r6,r3
  80c3d4:	100b883a 	mov	r5,r2
  80c3d8:	e13ffa17 	ldw	r4,-24(fp)
  80c3dc:	0806b980 	call	806b98 <OSFlagPost>

        space--;
  80c3e0:	e0bff517 	ldw	r2,-44(fp)
  80c3e4:	10bfffc4 	addi	r2,r2,-1
  80c3e8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c3ec:	e0bff517 	ldw	r2,-44(fp)
  80c3f0:	10000526 	beq	r2,zero,80c408 <altera_avalon_jtag_uart_irq+0x23c>
  80c3f4:	e0bff617 	ldw	r2,-40(fp)
  80c3f8:	10c01017 	ldw	r3,64(r2)
  80c3fc:	e0bff617 	ldw	r2,-40(fp)
  80c400:	10800f17 	ldw	r2,60(r2)
  80c404:	18bfd31e 	bne	r3,r2,80c354 <__alt_mem_epcs_flash_controller_0+0xff803354>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c408:	e0bff517 	ldw	r2,-44(fp)
  80c40c:	103f7926 	beq	r2,zero,80c1f4 <__alt_mem_epcs_flash_controller_0+0xff8031f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c410:	e0bff617 	ldw	r2,-40(fp)
  80c414:	10c00817 	ldw	r3,32(r2)
  80c418:	00bfff44 	movi	r2,-3
  80c41c:	1886703a 	and	r3,r3,r2
  80c420:	e0bff617 	ldw	r2,-40(fp)
  80c424:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c428:	e0bff617 	ldw	r2,-40(fp)
  80c42c:	10800017 	ldw	r2,0(r2)
  80c430:	10800104 	addi	r2,r2,4
  80c434:	1007883a 	mov	r3,r2
  80c438:	e0bff617 	ldw	r2,-40(fp)
  80c43c:	10800817 	ldw	r2,32(r2)
  80c440:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c444:	e0bff717 	ldw	r2,-36(fp)
  80c448:	10800104 	addi	r2,r2,4
  80c44c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c450:	003f6806 	br	80c1f4 <__alt_mem_epcs_flash_controller_0+0xff8031f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80c454:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80c458:	0001883a 	nop
  80c45c:	e037883a 	mov	sp,fp
  80c460:	dfc00117 	ldw	ra,4(sp)
  80c464:	df000017 	ldw	fp,0(sp)
  80c468:	dec00204 	addi	sp,sp,8
  80c46c:	f800283a 	ret

0080c470 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c470:	defff904 	addi	sp,sp,-28
  80c474:	dfc00615 	stw	ra,24(sp)
  80c478:	df000515 	stw	fp,20(sp)
  80c47c:	df000504 	addi	fp,sp,20
  80c480:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c484:	e0bfff17 	ldw	r2,-4(fp)
  80c488:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c48c:	e0bffb17 	ldw	r2,-20(fp)
  80c490:	10800017 	ldw	r2,0(r2)
  80c494:	10800104 	addi	r2,r2,4
  80c498:	10800037 	ldwio	r2,0(r2)
  80c49c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c4a0:	e0bffc17 	ldw	r2,-16(fp)
  80c4a4:	1081000c 	andi	r2,r2,1024
  80c4a8:	10000b26 	beq	r2,zero,80c4d8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c4ac:	e0bffb17 	ldw	r2,-20(fp)
  80c4b0:	10800017 	ldw	r2,0(r2)
  80c4b4:	10800104 	addi	r2,r2,4
  80c4b8:	1007883a 	mov	r3,r2
  80c4bc:	e0bffb17 	ldw	r2,-20(fp)
  80c4c0:	10800817 	ldw	r2,32(r2)
  80c4c4:	10810014 	ori	r2,r2,1024
  80c4c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80c4cc:	e0bffb17 	ldw	r2,-20(fp)
  80c4d0:	10000915 	stw	zero,36(r2)
  80c4d4:	00002106 	br	80c55c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c4d8:	e0bffb17 	ldw	r2,-20(fp)
  80c4dc:	10c00917 	ldw	r3,36(r2)
  80c4e0:	00a00034 	movhi	r2,32768
  80c4e4:	10bfff04 	addi	r2,r2,-4
  80c4e8:	10c01c36 	bltu	r2,r3,80c55c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  80c4ec:	e0bffb17 	ldw	r2,-20(fp)
  80c4f0:	10800917 	ldw	r2,36(r2)
  80c4f4:	10c00044 	addi	r3,r2,1
  80c4f8:	e0bffb17 	ldw	r2,-20(fp)
  80c4fc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  80c500:	e0bffb17 	ldw	r2,-20(fp)
  80c504:	10c00917 	ldw	r3,36(r2)
  80c508:	e0bffb17 	ldw	r2,-20(fp)
  80c50c:	10800117 	ldw	r2,4(r2)
  80c510:	18801236 	bltu	r3,r2,80c55c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  80c514:	e0bffb17 	ldw	r2,-20(fp)
  80c518:	10800c17 	ldw	r2,48(r2)
  80c51c:	e0bffd15 	stw	r2,-12(fp)
  80c520:	00800104 	movi	r2,4
  80c524:	e0bffe0d 	sth	r2,-8(fp)
  80c528:	00800044 	movi	r2,1
  80c52c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80c530:	d0a03b43 	ldbu	r2,-32531(gp)
  80c534:	10803fcc 	andi	r2,r2,255
  80c538:	10000826 	beq	r2,zero,80c55c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  80c53c:	e0bffe0b 	ldhu	r2,-8(fp)
  80c540:	e0fffe83 	ldbu	r3,-6(fp)
  80c544:	e13ffec4 	addi	r4,fp,-5
  80c548:	200f883a 	mov	r7,r4
  80c54c:	180d883a 	mov	r6,r3
  80c550:	100b883a 	mov	r5,r2
  80c554:	e13ffd17 	ldw	r4,-12(fp)
  80c558:	0806b980 	call	806b98 <OSFlagPost>
  80c55c:	d0a05017 	ldw	r2,-32448(gp)
    }
  }

  return alt_ticks_per_second();
}
  80c560:	e037883a 	mov	sp,fp
  80c564:	dfc00117 	ldw	ra,4(sp)
  80c568:	df000017 	ldw	fp,0(sp)
  80c56c:	dec00204 	addi	sp,sp,8
  80c570:	f800283a 	ret

0080c574 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c574:	defffd04 	addi	sp,sp,-12
  80c578:	df000215 	stw	fp,8(sp)
  80c57c:	df000204 	addi	fp,sp,8
  80c580:	e13ffe15 	stw	r4,-8(fp)
  80c584:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c588:	00000506 	br	80c5a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80c58c:	e0bfff17 	ldw	r2,-4(fp)
  80c590:	1090000c 	andi	r2,r2,16384
  80c594:	10000226 	beq	r2,zero,80c5a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80c598:	00bffd44 	movi	r2,-11
  80c59c:	00000b06 	br	80c5cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c5a0:	e0bffe17 	ldw	r2,-8(fp)
  80c5a4:	10c01017 	ldw	r3,64(r2)
  80c5a8:	e0bffe17 	ldw	r2,-8(fp)
  80c5ac:	10800f17 	ldw	r2,60(r2)
  80c5b0:	18800526 	beq	r3,r2,80c5c8 <altera_avalon_jtag_uart_close+0x54>
  80c5b4:	e0bffe17 	ldw	r2,-8(fp)
  80c5b8:	10c00917 	ldw	r3,36(r2)
  80c5bc:	e0bffe17 	ldw	r2,-8(fp)
  80c5c0:	10800117 	ldw	r2,4(r2)
  80c5c4:	18bff136 	bltu	r3,r2,80c58c <__alt_mem_epcs_flash_controller_0+0xff80358c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c5c8:	0005883a 	mov	r2,zero
}
  80c5cc:	e037883a 	mov	sp,fp
  80c5d0:	df000017 	ldw	fp,0(sp)
  80c5d4:	dec00104 	addi	sp,sp,4
  80c5d8:	f800283a 	ret

0080c5dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c5dc:	defffa04 	addi	sp,sp,-24
  80c5e0:	df000515 	stw	fp,20(sp)
  80c5e4:	df000504 	addi	fp,sp,20
  80c5e8:	e13ffd15 	stw	r4,-12(fp)
  80c5ec:	e17ffe15 	stw	r5,-8(fp)
  80c5f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80c5f4:	00bff9c4 	movi	r2,-25
  80c5f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80c5fc:	e0bffe17 	ldw	r2,-8(fp)
  80c600:	10da8060 	cmpeqi	r3,r2,27137
  80c604:	1800031e 	bne	r3,zero,80c614 <altera_avalon_jtag_uart_ioctl+0x38>
  80c608:	109a80a0 	cmpeqi	r2,r2,27138
  80c60c:	1000181e 	bne	r2,zero,80c670 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80c610:	00002906 	br	80c6b8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c614:	e0bffd17 	ldw	r2,-12(fp)
  80c618:	10c00117 	ldw	r3,4(r2)
  80c61c:	00a00034 	movhi	r2,32768
  80c620:	10bfffc4 	addi	r2,r2,-1
  80c624:	18802126 	beq	r3,r2,80c6ac <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80c628:	e0bfff17 	ldw	r2,-4(fp)
  80c62c:	10800017 	ldw	r2,0(r2)
  80c630:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c634:	e0bffc17 	ldw	r2,-16(fp)
  80c638:	10800090 	cmplti	r2,r2,2
  80c63c:	1000061e 	bne	r2,zero,80c658 <altera_avalon_jtag_uart_ioctl+0x7c>
  80c640:	e0fffc17 	ldw	r3,-16(fp)
  80c644:	00a00034 	movhi	r2,32768
  80c648:	10bfffc4 	addi	r2,r2,-1
  80c64c:	18800226 	beq	r3,r2,80c658 <altera_avalon_jtag_uart_ioctl+0x7c>
  80c650:	e0bffc17 	ldw	r2,-16(fp)
  80c654:	00000206 	br	80c660 <altera_avalon_jtag_uart_ioctl+0x84>
  80c658:	00a00034 	movhi	r2,32768
  80c65c:	10bfff84 	addi	r2,r2,-2
  80c660:	e0fffd17 	ldw	r3,-12(fp)
  80c664:	18800115 	stw	r2,4(r3)
      rc = 0;
  80c668:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c66c:	00000f06 	br	80c6ac <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c670:	e0bffd17 	ldw	r2,-12(fp)
  80c674:	10c00117 	ldw	r3,4(r2)
  80c678:	00a00034 	movhi	r2,32768
  80c67c:	10bfffc4 	addi	r2,r2,-1
  80c680:	18800c26 	beq	r3,r2,80c6b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c684:	e0bffd17 	ldw	r2,-12(fp)
  80c688:	10c00917 	ldw	r3,36(r2)
  80c68c:	e0bffd17 	ldw	r2,-12(fp)
  80c690:	10800117 	ldw	r2,4(r2)
  80c694:	1885803a 	cmpltu	r2,r3,r2
  80c698:	10c03fcc 	andi	r3,r2,255
  80c69c:	e0bfff17 	ldw	r2,-4(fp)
  80c6a0:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80c6a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c6a8:	00000206 	br	80c6b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80c6ac:	0001883a 	nop
  80c6b0:	00000106 	br	80c6b8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80c6b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80c6b8:	e0bffb17 	ldw	r2,-20(fp)
}
  80c6bc:	e037883a 	mov	sp,fp
  80c6c0:	df000017 	ldw	fp,0(sp)
  80c6c4:	dec00104 	addi	sp,sp,4
  80c6c8:	f800283a 	ret

0080c6cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c6cc:	deffed04 	addi	sp,sp,-76
  80c6d0:	dfc01215 	stw	ra,72(sp)
  80c6d4:	df001115 	stw	fp,68(sp)
  80c6d8:	df001104 	addi	fp,sp,68
  80c6dc:	e13ffc15 	stw	r4,-16(fp)
  80c6e0:	e17ffd15 	stw	r5,-12(fp)
  80c6e4:	e1bffe15 	stw	r6,-8(fp)
  80c6e8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80c6ec:	e0bffd17 	ldw	r2,-12(fp)
  80c6f0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  80c6f4:	e0bffc17 	ldw	r2,-16(fp)
  80c6f8:	10800a17 	ldw	r2,40(r2)
  80c6fc:	e0bff815 	stw	r2,-32(fp)
  80c700:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80c704:	e0bff90b 	ldhu	r2,-28(fp)
  80c708:	e0fffb04 	addi	r3,fp,-20
  80c70c:	180d883a 	mov	r6,r3
  80c710:	100b883a 	mov	r5,r2
  80c714:	e13ff817 	ldw	r4,-32(fp)
  80c718:	0808ff40 	call	808ff4 <OSSemPend>

  while (space > 0)
  80c71c:	00006106 	br	80c8a4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c720:	e0bffc17 	ldw	r2,-16(fp)
  80c724:	10800d17 	ldw	r2,52(r2)
  80c728:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  80c72c:	e0bffc17 	ldw	r2,-16(fp)
  80c730:	10800e17 	ldw	r2,56(r2)
  80c734:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  80c738:	e0fff317 	ldw	r3,-52(fp)
  80c73c:	e0bff417 	ldw	r2,-48(fp)
  80c740:	18800536 	bltu	r3,r2,80c758 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  80c744:	e0fff317 	ldw	r3,-52(fp)
  80c748:	e0bff417 	ldw	r2,-48(fp)
  80c74c:	1885c83a 	sub	r2,r3,r2
  80c750:	e0bff115 	stw	r2,-60(fp)
  80c754:	00000406 	br	80c768 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c758:	00c20004 	movi	r3,2048
  80c75c:	e0bff417 	ldw	r2,-48(fp)
  80c760:	1885c83a 	sub	r2,r3,r2
  80c764:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  80c768:	e0bff117 	ldw	r2,-60(fp)
  80c76c:	10001e26 	beq	r2,zero,80c7e8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  80c770:	e0fffe17 	ldw	r3,-8(fp)
  80c774:	e0bff117 	ldw	r2,-60(fp)
  80c778:	1880022e 	bgeu	r3,r2,80c784 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  80c77c:	e0bffe17 	ldw	r2,-8(fp)
  80c780:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c784:	e0bffc17 	ldw	r2,-16(fp)
  80c788:	10c01104 	addi	r3,r2,68
  80c78c:	e0bff417 	ldw	r2,-48(fp)
  80c790:	1885883a 	add	r2,r3,r2
  80c794:	e1bff117 	ldw	r6,-60(fp)
  80c798:	100b883a 	mov	r5,r2
  80c79c:	e13ff017 	ldw	r4,-64(fp)
  80c7a0:	08015b00 	call	8015b0 <memcpy>
      ptr   += n;
  80c7a4:	e0fff017 	ldw	r3,-64(fp)
  80c7a8:	e0bff117 	ldw	r2,-60(fp)
  80c7ac:	1885883a 	add	r2,r3,r2
  80c7b0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  80c7b4:	e0fffe17 	ldw	r3,-8(fp)
  80c7b8:	e0bff117 	ldw	r2,-60(fp)
  80c7bc:	1885c83a 	sub	r2,r3,r2
  80c7c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c7c4:	e0fff417 	ldw	r3,-48(fp)
  80c7c8:	e0bff117 	ldw	r2,-60(fp)
  80c7cc:	1885883a 	add	r2,r3,r2
  80c7d0:	10c1ffcc 	andi	r3,r2,2047
  80c7d4:	e0bffc17 	ldw	r2,-16(fp)
  80c7d8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  80c7dc:	e0bffe17 	ldw	r2,-8(fp)
  80c7e0:	00bfcf16 	blt	zero,r2,80c720 <__alt_mem_epcs_flash_controller_0+0xff803720>
  80c7e4:	00000106 	br	80c7ec <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80c7e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80c7ec:	e0fff017 	ldw	r3,-64(fp)
  80c7f0:	e0bffd17 	ldw	r2,-12(fp)
  80c7f4:	18802e1e 	bne	r3,r2,80c8b0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c7f8:	e0bfff17 	ldw	r2,-4(fp)
  80c7fc:	1090000c 	andi	r2,r2,16384
  80c800:	10002d1e 	bne	r2,zero,80c8b8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  80c804:	d0a03b43 	ldbu	r2,-32531(gp)
  80c808:	10803fcc 	andi	r2,r2,255
  80c80c:	10800058 	cmpnei	r2,r2,1
  80c810:	1000161e 	bne	r2,zero,80c86c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  80c814:	e0bffc17 	ldw	r2,-16(fp)
  80c818:	10800c17 	ldw	r2,48(r2)
  80c81c:	e0bff215 	stw	r2,-56(fp)
  80c820:	00800144 	movi	r2,5
  80c824:	e0bff98d 	sth	r2,-26(fp)
  80c828:	00bfe0c4 	movi	r2,-125
  80c82c:	e0bffa05 	stb	r2,-24(fp)
  80c830:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80c834:	d0a03b43 	ldbu	r2,-32531(gp)
  80c838:	10803fcc 	andi	r2,r2,255
  80c83c:	10001526 	beq	r2,zero,80c894 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80c840:	e0fff98b 	ldhu	r3,-26(fp)
  80c844:	e13ffa03 	ldbu	r4,-24(fp)
  80c848:	e17ffa8b 	ldhu	r5,-22(fp)
  80c84c:	e0bffb44 	addi	r2,fp,-19
  80c850:	d8800015 	stw	r2,0(sp)
  80c854:	280f883a 	mov	r7,r5
  80c858:	200d883a 	mov	r6,r4
  80c85c:	180b883a 	mov	r5,r3
  80c860:	e13ff217 	ldw	r4,-56(fp)
  80c864:	08065800 	call	806580 <OSFlagPend>
  80c868:	00000a06 	br	80c894 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c86c:	0001883a 	nop
  80c870:	e0bffc17 	ldw	r2,-16(fp)
  80c874:	10c00d17 	ldw	r3,52(r2)
  80c878:	e0bff317 	ldw	r2,-52(fp)
  80c87c:	1880051e 	bne	r3,r2,80c894 <altera_avalon_jtag_uart_read+0x1c8>
  80c880:	e0bffc17 	ldw	r2,-16(fp)
  80c884:	10c00917 	ldw	r3,36(r2)
  80c888:	e0bffc17 	ldw	r2,-16(fp)
  80c88c:	10800117 	ldw	r2,4(r2)
  80c890:	18bff736 	bltu	r3,r2,80c870 <__alt_mem_epcs_flash_controller_0+0xff803870>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c894:	e0bffc17 	ldw	r2,-16(fp)
  80c898:	10c00d17 	ldw	r3,52(r2)
  80c89c:	e0bff317 	ldw	r2,-52(fp)
  80c8a0:	18800726 	beq	r3,r2,80c8c0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c8a4:	e0bffe17 	ldw	r2,-8(fp)
  80c8a8:	00bf9d16 	blt	zero,r2,80c720 <__alt_mem_epcs_flash_controller_0+0xff803720>
  80c8ac:	00000506 	br	80c8c4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80c8b0:	0001883a 	nop
  80c8b4:	00000306 	br	80c8c4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80c8b8:	0001883a 	nop
  80c8bc:	00000106 	br	80c8c4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80c8c0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80c8c4:	e0bffc17 	ldw	r2,-16(fp)
  80c8c8:	10800a17 	ldw	r2,40(r2)
  80c8cc:	1009883a 	mov	r4,r2
  80c8d0:	080936c0 	call	80936c <OSSemPost>

  if (ptr != buffer)
  80c8d4:	e0fff017 	ldw	r3,-64(fp)
  80c8d8:	e0bffd17 	ldw	r2,-12(fp)
  80c8dc:	18801826 	beq	r3,r2,80c940 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c8e0:	0005303a 	rdctl	r2,status
  80c8e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c8e8:	e0fff717 	ldw	r3,-36(fp)
  80c8ec:	00bfff84 	movi	r2,-2
  80c8f0:	1884703a 	and	r2,r3,r2
  80c8f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c8f8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c8fc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c900:	e0bffc17 	ldw	r2,-16(fp)
  80c904:	10800817 	ldw	r2,32(r2)
  80c908:	10c00054 	ori	r3,r2,1
  80c90c:	e0bffc17 	ldw	r2,-16(fp)
  80c910:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c914:	e0bffc17 	ldw	r2,-16(fp)
  80c918:	10800017 	ldw	r2,0(r2)
  80c91c:	10800104 	addi	r2,r2,4
  80c920:	1007883a 	mov	r3,r2
  80c924:	e0bffc17 	ldw	r2,-16(fp)
  80c928:	10800817 	ldw	r2,32(r2)
  80c92c:	18800035 	stwio	r2,0(r3)
  80c930:	e0bff617 	ldw	r2,-40(fp)
  80c934:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c938:	e0bff517 	ldw	r2,-44(fp)
  80c93c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c940:	e0fff017 	ldw	r3,-64(fp)
  80c944:	e0bffd17 	ldw	r2,-12(fp)
  80c948:	18800426 	beq	r3,r2,80c95c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  80c94c:	e0fff017 	ldw	r3,-64(fp)
  80c950:	e0bffd17 	ldw	r2,-12(fp)
  80c954:	1885c83a 	sub	r2,r3,r2
  80c958:	00000606 	br	80c974 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  80c95c:	e0bfff17 	ldw	r2,-4(fp)
  80c960:	1090000c 	andi	r2,r2,16384
  80c964:	10000226 	beq	r2,zero,80c970 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  80c968:	00bffd44 	movi	r2,-11
  80c96c:	00000106 	br	80c974 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  80c970:	00bffec4 	movi	r2,-5
}
  80c974:	e037883a 	mov	sp,fp
  80c978:	dfc00117 	ldw	ra,4(sp)
  80c97c:	df000017 	ldw	fp,0(sp)
  80c980:	dec00204 	addi	sp,sp,8
  80c984:	f800283a 	ret

0080c988 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c988:	deffed04 	addi	sp,sp,-76
  80c98c:	dfc01215 	stw	ra,72(sp)
  80c990:	df001115 	stw	fp,68(sp)
  80c994:	df001104 	addi	fp,sp,68
  80c998:	e13ffc15 	stw	r4,-16(fp)
  80c99c:	e17ffd15 	stw	r5,-12(fp)
  80c9a0:	e1bffe15 	stw	r6,-8(fp)
  80c9a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c9a8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c9ac:	e0bffd17 	ldw	r2,-12(fp)
  80c9b0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  80c9b4:	e0bffc17 	ldw	r2,-16(fp)
  80c9b8:	10800b17 	ldw	r2,44(r2)
  80c9bc:	e0bff815 	stw	r2,-32(fp)
  80c9c0:	e03ff90d 	sth	zero,-28(fp)
  80c9c4:	e0bff90b 	ldhu	r2,-28(fp)
  80c9c8:	e0fffb44 	addi	r3,fp,-19
  80c9cc:	180d883a 	mov	r6,r3
  80c9d0:	100b883a 	mov	r5,r2
  80c9d4:	e13ff817 	ldw	r4,-32(fp)
  80c9d8:	0808ff40 	call	808ff4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c9dc:	00003706 	br	80cabc <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c9e0:	e0bffc17 	ldw	r2,-16(fp)
  80c9e4:	10800f17 	ldw	r2,60(r2)
  80c9e8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  80c9ec:	e0bffc17 	ldw	r2,-16(fp)
  80c9f0:	10801017 	ldw	r2,64(r2)
  80c9f4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  80c9f8:	e0fff417 	ldw	r3,-48(fp)
  80c9fc:	e0bff017 	ldw	r2,-64(fp)
  80ca00:	1880062e 	bgeu	r3,r2,80ca1c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  80ca04:	e0fff017 	ldw	r3,-64(fp)
  80ca08:	e0bff417 	ldw	r2,-48(fp)
  80ca0c:	1885c83a 	sub	r2,r3,r2
  80ca10:	10bfffc4 	addi	r2,r2,-1
  80ca14:	e0bff115 	stw	r2,-60(fp)
  80ca18:	00000b06 	br	80ca48 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  80ca1c:	e0bff017 	ldw	r2,-64(fp)
  80ca20:	10000526 	beq	r2,zero,80ca38 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ca24:	00c20004 	movi	r3,2048
  80ca28:	e0bff417 	ldw	r2,-48(fp)
  80ca2c:	1885c83a 	sub	r2,r3,r2
  80ca30:	e0bff115 	stw	r2,-60(fp)
  80ca34:	00000406 	br	80ca48 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ca38:	00c1ffc4 	movi	r3,2047
  80ca3c:	e0bff417 	ldw	r2,-48(fp)
  80ca40:	1885c83a 	sub	r2,r3,r2
  80ca44:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  80ca48:	e0bff117 	ldw	r2,-60(fp)
  80ca4c:	10001e26 	beq	r2,zero,80cac8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  80ca50:	e0fffe17 	ldw	r3,-8(fp)
  80ca54:	e0bff117 	ldw	r2,-60(fp)
  80ca58:	1880022e 	bgeu	r3,r2,80ca64 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  80ca5c:	e0bffe17 	ldw	r2,-8(fp)
  80ca60:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80ca64:	e0bffc17 	ldw	r2,-16(fp)
  80ca68:	10c21104 	addi	r3,r2,2116
  80ca6c:	e0bff417 	ldw	r2,-48(fp)
  80ca70:	1885883a 	add	r2,r3,r2
  80ca74:	e1bff117 	ldw	r6,-60(fp)
  80ca78:	e17ffd17 	ldw	r5,-12(fp)
  80ca7c:	1009883a 	mov	r4,r2
  80ca80:	08015b00 	call	8015b0 <memcpy>
      ptr   += n;
  80ca84:	e0fffd17 	ldw	r3,-12(fp)
  80ca88:	e0bff117 	ldw	r2,-60(fp)
  80ca8c:	1885883a 	add	r2,r3,r2
  80ca90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80ca94:	e0fffe17 	ldw	r3,-8(fp)
  80ca98:	e0bff117 	ldw	r2,-60(fp)
  80ca9c:	1885c83a 	sub	r2,r3,r2
  80caa0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80caa4:	e0fff417 	ldw	r3,-48(fp)
  80caa8:	e0bff117 	ldw	r2,-60(fp)
  80caac:	1885883a 	add	r2,r3,r2
  80cab0:	10c1ffcc 	andi	r3,r2,2047
  80cab4:	e0bffc17 	ldw	r2,-16(fp)
  80cab8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80cabc:	e0bffe17 	ldw	r2,-8(fp)
  80cac0:	00bfc716 	blt	zero,r2,80c9e0 <__alt_mem_epcs_flash_controller_0+0xff8039e0>
  80cac4:	00000106 	br	80cacc <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80cac8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cacc:	0005303a 	rdctl	r2,status
  80cad0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cad4:	e0fff717 	ldw	r3,-36(fp)
  80cad8:	00bfff84 	movi	r2,-2
  80cadc:	1884703a 	and	r2,r3,r2
  80cae0:	1001703a 	wrctl	status,r2
  
  return context;
  80cae4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80cae8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80caec:	e0bffc17 	ldw	r2,-16(fp)
  80caf0:	10800817 	ldw	r2,32(r2)
  80caf4:	10c00094 	ori	r3,r2,2
  80caf8:	e0bffc17 	ldw	r2,-16(fp)
  80cafc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cb00:	e0bffc17 	ldw	r2,-16(fp)
  80cb04:	10800017 	ldw	r2,0(r2)
  80cb08:	10800104 	addi	r2,r2,4
  80cb0c:	1007883a 	mov	r3,r2
  80cb10:	e0bffc17 	ldw	r2,-16(fp)
  80cb14:	10800817 	ldw	r2,32(r2)
  80cb18:	18800035 	stwio	r2,0(r3)
  80cb1c:	e0bff617 	ldw	r2,-40(fp)
  80cb20:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb24:	e0bff317 	ldw	r2,-52(fp)
  80cb28:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80cb2c:	e0bffe17 	ldw	r2,-8(fp)
  80cb30:	00802a0e 	bge	zero,r2,80cbdc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  80cb34:	e0bfff17 	ldw	r2,-4(fp)
  80cb38:	1090000c 	andi	r2,r2,16384
  80cb3c:	10002a1e 	bne	r2,zero,80cbe8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  80cb40:	d0a03b43 	ldbu	r2,-32531(gp)
  80cb44:	10803fcc 	andi	r2,r2,255
  80cb48:	10800058 	cmpnei	r2,r2,1
  80cb4c:	1000161e 	bne	r2,zero,80cba8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  80cb50:	e0bffc17 	ldw	r2,-16(fp)
  80cb54:	10800c17 	ldw	r2,48(r2)
  80cb58:	e0bff515 	stw	r2,-44(fp)
  80cb5c:	00800184 	movi	r2,6
  80cb60:	e0bff98d 	sth	r2,-26(fp)
  80cb64:	00bfe0c4 	movi	r2,-125
  80cb68:	e0bffa05 	stb	r2,-24(fp)
  80cb6c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80cb70:	d0a03b43 	ldbu	r2,-32531(gp)
  80cb74:	10803fcc 	andi	r2,r2,255
  80cb78:	10001526 	beq	r2,zero,80cbd0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80cb7c:	e0fff98b 	ldhu	r3,-26(fp)
  80cb80:	e13ffa03 	ldbu	r4,-24(fp)
  80cb84:	e17ffa8b 	ldhu	r5,-22(fp)
  80cb88:	e0bffb04 	addi	r2,fp,-20
  80cb8c:	d8800015 	stw	r2,0(sp)
  80cb90:	280f883a 	mov	r7,r5
  80cb94:	200d883a 	mov	r6,r4
  80cb98:	180b883a 	mov	r5,r3
  80cb9c:	e13ff517 	ldw	r4,-44(fp)
  80cba0:	08065800 	call	806580 <OSFlagPend>
  80cba4:	00000a06 	br	80cbd0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80cba8:	0001883a 	nop
  80cbac:	e0bffc17 	ldw	r2,-16(fp)
  80cbb0:	10c01017 	ldw	r3,64(r2)
  80cbb4:	e0bff017 	ldw	r2,-64(fp)
  80cbb8:	1880051e 	bne	r3,r2,80cbd0 <altera_avalon_jtag_uart_write+0x248>
  80cbbc:	e0bffc17 	ldw	r2,-16(fp)
  80cbc0:	10c00917 	ldw	r3,36(r2)
  80cbc4:	e0bffc17 	ldw	r2,-16(fp)
  80cbc8:	10800117 	ldw	r2,4(r2)
  80cbcc:	18bff736 	bltu	r3,r2,80cbac <__alt_mem_epcs_flash_controller_0+0xff803bac>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80cbd0:	e0bffc17 	ldw	r2,-16(fp)
  80cbd4:	10800917 	ldw	r2,36(r2)
  80cbd8:	1000051e 	bne	r2,zero,80cbf0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  80cbdc:	e0bffe17 	ldw	r2,-8(fp)
  80cbe0:	00bfb616 	blt	zero,r2,80cabc <__alt_mem_epcs_flash_controller_0+0xff803abc>
  80cbe4:	00000306 	br	80cbf4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80cbe8:	0001883a 	nop
  80cbec:	00000106 	br	80cbf4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80cbf0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  80cbf4:	e0bffc17 	ldw	r2,-16(fp)
  80cbf8:	10800b17 	ldw	r2,44(r2)
  80cbfc:	1009883a 	mov	r4,r2
  80cc00:	080936c0 	call	80936c <OSSemPost>

  if (ptr != start)
  80cc04:	e0fffd17 	ldw	r3,-12(fp)
  80cc08:	e0bff217 	ldw	r2,-56(fp)
  80cc0c:	18800426 	beq	r3,r2,80cc20 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  80cc10:	e0fffd17 	ldw	r3,-12(fp)
  80cc14:	e0bff217 	ldw	r2,-56(fp)
  80cc18:	1885c83a 	sub	r2,r3,r2
  80cc1c:	00000606 	br	80cc38 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  80cc20:	e0bfff17 	ldw	r2,-4(fp)
  80cc24:	1090000c 	andi	r2,r2,16384
  80cc28:	10000226 	beq	r2,zero,80cc34 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  80cc2c:	00bffd44 	movi	r2,-11
  80cc30:	00000106 	br	80cc38 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80cc34:	00bffec4 	movi	r2,-5
}
  80cc38:	e037883a 	mov	sp,fp
  80cc3c:	dfc00117 	ldw	ra,4(sp)
  80cc40:	df000017 	ldw	fp,0(sp)
  80cc44:	dec00204 	addi	sp,sp,8
  80cc48:	f800283a 	ret

0080cc4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80cc4c:	defffa04 	addi	sp,sp,-24
  80cc50:	dfc00515 	stw	ra,20(sp)
  80cc54:	df000415 	stw	fp,16(sp)
  80cc58:	df000404 	addi	fp,sp,16
  80cc5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80cc60:	0007883a 	mov	r3,zero
  80cc64:	e0bfff17 	ldw	r2,-4(fp)
  80cc68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80cc6c:	e0bfff17 	ldw	r2,-4(fp)
  80cc70:	10800104 	addi	r2,r2,4
  80cc74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc78:	0005303a 	rdctl	r2,status
  80cc7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc80:	e0fffd17 	ldw	r3,-12(fp)
  80cc84:	00bfff84 	movi	r2,-2
  80cc88:	1884703a 	and	r2,r3,r2
  80cc8c:	1001703a 	wrctl	status,r2
  
  return context;
  80cc90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80cc94:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80cc98:	080e9780 	call	80e978 <alt_tick>
  80cc9c:	e0bffc17 	ldw	r2,-16(fp)
  80cca0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cca4:	e0bffe17 	ldw	r2,-8(fp)
  80cca8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ccac:	0001883a 	nop
  80ccb0:	e037883a 	mov	sp,fp
  80ccb4:	dfc00117 	ldw	ra,4(sp)
  80ccb8:	df000017 	ldw	fp,0(sp)
  80ccbc:	dec00204 	addi	sp,sp,8
  80ccc0:	f800283a 	ret

0080ccc4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ccc4:	defff804 	addi	sp,sp,-32
  80ccc8:	dfc00715 	stw	ra,28(sp)
  80cccc:	df000615 	stw	fp,24(sp)
  80ccd0:	df000604 	addi	fp,sp,24
  80ccd4:	e13ffc15 	stw	r4,-16(fp)
  80ccd8:	e17ffd15 	stw	r5,-12(fp)
  80ccdc:	e1bffe15 	stw	r6,-8(fp)
  80cce0:	e1ffff15 	stw	r7,-4(fp)
  80cce4:	e0bfff17 	ldw	r2,-4(fp)
  80cce8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ccec:	d0a05017 	ldw	r2,-32448(gp)
  80ccf0:	1000021e 	bne	r2,zero,80ccfc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80ccf4:	e0bffb17 	ldw	r2,-20(fp)
  80ccf8:	d0a05015 	stw	r2,-32448(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ccfc:	e0bffc17 	ldw	r2,-16(fp)
  80cd00:	10800104 	addi	r2,r2,4
  80cd04:	00c001c4 	movi	r3,7
  80cd08:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80cd0c:	d8000015 	stw	zero,0(sp)
  80cd10:	e1fffc17 	ldw	r7,-16(fp)
  80cd14:	01802074 	movhi	r6,129
  80cd18:	31b31304 	addi	r6,r6,-13236
  80cd1c:	e17ffe17 	ldw	r5,-8(fp)
  80cd20:	e13ffd17 	ldw	r4,-12(fp)
  80cd24:	080e2580 	call	80e258 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80cd28:	0001883a 	nop
  80cd2c:	e037883a 	mov	sp,fp
  80cd30:	dfc00117 	ldw	ra,4(sp)
  80cd34:	df000017 	ldw	fp,0(sp)
  80cd38:	dec00204 	addi	sp,sp,8
  80cd3c:	f800283a 	ret

0080cd40 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80cd40:	defffa04 	addi	sp,sp,-24
  80cd44:	dfc00515 	stw	ra,20(sp)
  80cd48:	df000415 	stw	fp,16(sp)
  80cd4c:	df000404 	addi	fp,sp,16
  80cd50:	e13ffd15 	stw	r4,-12(fp)
  80cd54:	e17ffe15 	stw	r5,-8(fp)
  80cd58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cd5c:	e0bffd17 	ldw	r2,-12(fp)
  80cd60:	10800017 	ldw	r2,0(r2)
  80cd64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80cd68:	e0bffc17 	ldw	r2,-16(fp)
  80cd6c:	10c00a04 	addi	r3,r2,40
  80cd70:	e0bffd17 	ldw	r2,-12(fp)
  80cd74:	10800217 	ldw	r2,8(r2)
  80cd78:	100f883a 	mov	r7,r2
  80cd7c:	e1bfff17 	ldw	r6,-4(fp)
  80cd80:	e17ffe17 	ldw	r5,-8(fp)
  80cd84:	1809883a 	mov	r4,r3
  80cd88:	080d3b80 	call	80d3b8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80cd8c:	e037883a 	mov	sp,fp
  80cd90:	dfc00117 	ldw	ra,4(sp)
  80cd94:	df000017 	ldw	fp,0(sp)
  80cd98:	dec00204 	addi	sp,sp,8
  80cd9c:	f800283a 	ret

0080cda0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80cda0:	defffa04 	addi	sp,sp,-24
  80cda4:	dfc00515 	stw	ra,20(sp)
  80cda8:	df000415 	stw	fp,16(sp)
  80cdac:	df000404 	addi	fp,sp,16
  80cdb0:	e13ffd15 	stw	r4,-12(fp)
  80cdb4:	e17ffe15 	stw	r5,-8(fp)
  80cdb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cdbc:	e0bffd17 	ldw	r2,-12(fp)
  80cdc0:	10800017 	ldw	r2,0(r2)
  80cdc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80cdc8:	e0bffc17 	ldw	r2,-16(fp)
  80cdcc:	10c00a04 	addi	r3,r2,40
  80cdd0:	e0bffd17 	ldw	r2,-12(fp)
  80cdd4:	10800217 	ldw	r2,8(r2)
  80cdd8:	100f883a 	mov	r7,r2
  80cddc:	e1bfff17 	ldw	r6,-4(fp)
  80cde0:	e17ffe17 	ldw	r5,-8(fp)
  80cde4:	1809883a 	mov	r4,r3
  80cde8:	080d65c0 	call	80d65c <altera_avalon_uart_write>
      fd->fd_flags);
}
  80cdec:	e037883a 	mov	sp,fp
  80cdf0:	dfc00117 	ldw	ra,4(sp)
  80cdf4:	df000017 	ldw	fp,0(sp)
  80cdf8:	dec00204 	addi	sp,sp,8
  80cdfc:	f800283a 	ret

0080ce00 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80ce00:	defffc04 	addi	sp,sp,-16
  80ce04:	dfc00315 	stw	ra,12(sp)
  80ce08:	df000215 	stw	fp,8(sp)
  80ce0c:	df000204 	addi	fp,sp,8
  80ce10:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ce14:	e0bfff17 	ldw	r2,-4(fp)
  80ce18:	10800017 	ldw	r2,0(r2)
  80ce1c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80ce20:	e0bffe17 	ldw	r2,-8(fp)
  80ce24:	10c00a04 	addi	r3,r2,40
  80ce28:	e0bfff17 	ldw	r2,-4(fp)
  80ce2c:	10800217 	ldw	r2,8(r2)
  80ce30:	100b883a 	mov	r5,r2
  80ce34:	1809883a 	mov	r4,r3
  80ce38:	080d3280 	call	80d328 <altera_avalon_uart_close>
}
  80ce3c:	e037883a 	mov	sp,fp
  80ce40:	dfc00117 	ldw	ra,4(sp)
  80ce44:	df000017 	ldw	fp,0(sp)
  80ce48:	dec00204 	addi	sp,sp,8
  80ce4c:	f800283a 	ret

0080ce50 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80ce50:	defff304 	addi	sp,sp,-52
  80ce54:	dfc00c15 	stw	ra,48(sp)
  80ce58:	df000b15 	stw	fp,44(sp)
  80ce5c:	df000b04 	addi	fp,sp,44
  80ce60:	e13ffd15 	stw	r4,-12(fp)
  80ce64:	e17ffe15 	stw	r5,-8(fp)
  80ce68:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80ce6c:	e0bffd17 	ldw	r2,-12(fp)
  80ce70:	10800017 	ldw	r2,0(r2)
  80ce74:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80ce78:	e0bffd17 	ldw	r2,-12(fp)
  80ce7c:	10800704 	addi	r2,r2,28
  80ce80:	e0bffa15 	stw	r2,-24(fp)
  80ce84:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80ce88:	e0bffb0b 	ldhu	r2,-20(fp)
  80ce8c:	e0fffc84 	addi	r3,fp,-14
  80ce90:	180b883a 	mov	r5,r3
  80ce94:	1009883a 	mov	r4,r2
  80ce98:	0805fbc0 	call	805fbc <OSFlagCreate>
  80ce9c:	1007883a 	mov	r3,r2
  80cea0:	e0bffa17 	ldw	r2,-24(fp)
  80cea4:	10c00015 	stw	r3,0(r2)
  return err;
  80cea8:	e0bffc83 	ldbu	r2,-14(fp)
  80ceac:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80ceb0:	1000241e 	bne	r2,zero,80cf44 <altera_avalon_uart_init+0xf4>
  80ceb4:	e0bffd17 	ldw	r2,-12(fp)
  80ceb8:	10800804 	addi	r2,r2,32
  80cebc:	e0bff715 	stw	r2,-36(fp)
  80cec0:	00800044 	movi	r2,1
  80cec4:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80cec8:	e0bffb8b 	ldhu	r2,-18(fp)
  80cecc:	1009883a 	mov	r4,r2
  80ced0:	0808cdc0 	call	808cdc <OSSemCreate>
  80ced4:	1007883a 	mov	r3,r2
  80ced8:	e0bff717 	ldw	r2,-36(fp)
  80cedc:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80cee0:	e0bff717 	ldw	r2,-36(fp)
  80cee4:	10800017 	ldw	r2,0(r2)
  80cee8:	10000226 	beq	r2,zero,80cef4 <altera_avalon_uart_init+0xa4>
  80ceec:	0005883a 	mov	r2,zero
  80cef0:	00000106 	br	80cef8 <altera_avalon_uart_init+0xa8>
  80cef4:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80cef8:	1000121e 	bne	r2,zero,80cf44 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  80cefc:	e0bffd17 	ldw	r2,-12(fp)
  80cf00:	10800904 	addi	r2,r2,36
  80cf04:	e0bff815 	stw	r2,-32(fp)
  80cf08:	00800044 	movi	r2,1
  80cf0c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80cf10:	e0bffc0b 	ldhu	r2,-16(fp)
  80cf14:	1009883a 	mov	r4,r2
  80cf18:	0808cdc0 	call	808cdc <OSSemCreate>
  80cf1c:	1007883a 	mov	r3,r2
  80cf20:	e0bff817 	ldw	r2,-32(fp)
  80cf24:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80cf28:	e0bff817 	ldw	r2,-32(fp)
  80cf2c:	10800017 	ldw	r2,0(r2)
  80cf30:	10000226 	beq	r2,zero,80cf3c <altera_avalon_uart_init+0xec>
  80cf34:	0005883a 	mov	r2,zero
  80cf38:	00000106 	br	80cf40 <altera_avalon_uart_init+0xf0>
  80cf3c:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80cf40:	10000226 	beq	r2,zero,80cf4c <altera_avalon_uart_init+0xfc>
  80cf44:	00800044 	movi	r2,1
  80cf48:	00000106 	br	80cf50 <altera_avalon_uart_init+0x100>
  80cf4c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80cf50:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80cf54:	e0bff917 	ldw	r2,-28(fp)
  80cf58:	10000f1e 	bne	r2,zero,80cf98 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80cf5c:	e0bffd17 	ldw	r2,-12(fp)
  80cf60:	00c32004 	movi	r3,3200
  80cf64:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80cf68:	e0bff617 	ldw	r2,-40(fp)
  80cf6c:	10800304 	addi	r2,r2,12
  80cf70:	e0fffd17 	ldw	r3,-12(fp)
  80cf74:	18c00117 	ldw	r3,4(r3)
  80cf78:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80cf7c:	d8000015 	stw	zero,0(sp)
  80cf80:	e1fffd17 	ldw	r7,-12(fp)
  80cf84:	01802074 	movhi	r6,129
  80cf88:	31b3ec04 	addi	r6,r6,-12368
  80cf8c:	e17fff17 	ldw	r5,-4(fp)
  80cf90:	e13ffe17 	ldw	r4,-8(fp)
  80cf94:	080e2580 	call	80e258 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80cf98:	0001883a 	nop
  80cf9c:	e037883a 	mov	sp,fp
  80cfa0:	dfc00117 	ldw	ra,4(sp)
  80cfa4:	df000017 	ldw	fp,0(sp)
  80cfa8:	dec00204 	addi	sp,sp,8
  80cfac:	f800283a 	ret

0080cfb0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80cfb0:	defffa04 	addi	sp,sp,-24
  80cfb4:	dfc00515 	stw	ra,20(sp)
  80cfb8:	df000415 	stw	fp,16(sp)
  80cfbc:	df000404 	addi	fp,sp,16
  80cfc0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80cfc4:	e0bfff17 	ldw	r2,-4(fp)
  80cfc8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80cfcc:	e0bffc17 	ldw	r2,-16(fp)
  80cfd0:	10800017 	ldw	r2,0(r2)
  80cfd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80cfd8:	e0bffd17 	ldw	r2,-12(fp)
  80cfdc:	10800204 	addi	r2,r2,8
  80cfe0:	10800037 	ldwio	r2,0(r2)
  80cfe4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80cfe8:	e0bffd17 	ldw	r2,-12(fp)
  80cfec:	10800204 	addi	r2,r2,8
  80cff0:	0007883a 	mov	r3,zero
  80cff4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80cff8:	e0bffd17 	ldw	r2,-12(fp)
  80cffc:	10800204 	addi	r2,r2,8
  80d000:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80d004:	e0bffe17 	ldw	r2,-8(fp)
  80d008:	1080200c 	andi	r2,r2,128
  80d00c:	10000326 	beq	r2,zero,80d01c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80d010:	e17ffe17 	ldw	r5,-8(fp)
  80d014:	e13ffc17 	ldw	r4,-16(fp)
  80d018:	080d04c0 	call	80d04c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80d01c:	e0bffe17 	ldw	r2,-8(fp)
  80d020:	1081100c 	andi	r2,r2,1088
  80d024:	10000326 	beq	r2,zero,80d034 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80d028:	e17ffe17 	ldw	r5,-8(fp)
  80d02c:	e13ffc17 	ldw	r4,-16(fp)
  80d030:	080d1840 	call	80d184 <altera_avalon_uart_txirq>
  }
  

}
  80d034:	0001883a 	nop
  80d038:	e037883a 	mov	sp,fp
  80d03c:	dfc00117 	ldw	ra,4(sp)
  80d040:	df000017 	ldw	fp,0(sp)
  80d044:	dec00204 	addi	sp,sp,8
  80d048:	f800283a 	ret

0080d04c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d04c:	defff904 	addi	sp,sp,-28
  80d050:	dfc00615 	stw	ra,24(sp)
  80d054:	df000515 	stw	fp,20(sp)
  80d058:	df000504 	addi	fp,sp,20
  80d05c:	e13ffe15 	stw	r4,-8(fp)
  80d060:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80d064:	e0bfff17 	ldw	r2,-4(fp)
  80d068:	108000cc 	andi	r2,r2,3
  80d06c:	10003f1e 	bne	r2,zero,80d16c <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80d070:	e0bffe17 	ldw	r2,-8(fp)
  80d074:	10c00317 	ldw	r3,12(r2)
  80d078:	e0bffe17 	ldw	r2,-8(fp)
  80d07c:	10800217 	ldw	r2,8(r2)
  80d080:	1880121e 	bne	r3,r2,80d0cc <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  80d084:	e0bffe17 	ldw	r2,-8(fp)
  80d088:	10800717 	ldw	r2,28(r2)
  80d08c:	e0bffc15 	stw	r2,-16(fp)
  80d090:	00800044 	movi	r2,1
  80d094:	e0bffd0d 	sth	r2,-12(fp)
  80d098:	00800044 	movi	r2,1
  80d09c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80d0a0:	d0a03b43 	ldbu	r2,-32531(gp)
  80d0a4:	10803fcc 	andi	r2,r2,255
  80d0a8:	10000826 	beq	r2,zero,80d0cc <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  80d0ac:	e0bffd0b 	ldhu	r2,-12(fp)
  80d0b0:	e0fffd83 	ldbu	r3,-10(fp)
  80d0b4:	e13ffdc4 	addi	r4,fp,-9
  80d0b8:	200f883a 	mov	r7,r4
  80d0bc:	180d883a 	mov	r6,r3
  80d0c0:	100b883a 	mov	r5,r2
  80d0c4:	e13ffc17 	ldw	r4,-16(fp)
  80d0c8:	0806b980 	call	806b98 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d0cc:	e0bffe17 	ldw	r2,-8(fp)
  80d0d0:	10800317 	ldw	r2,12(r2)
  80d0d4:	10800044 	addi	r2,r2,1
  80d0d8:	10800fcc 	andi	r2,r2,63
  80d0dc:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80d0e0:	e0bffe17 	ldw	r2,-8(fp)
  80d0e4:	10800317 	ldw	r2,12(r2)
  80d0e8:	e0fffe17 	ldw	r3,-8(fp)
  80d0ec:	18c00017 	ldw	r3,0(r3)
  80d0f0:	18c00037 	ldwio	r3,0(r3)
  80d0f4:	1809883a 	mov	r4,r3
  80d0f8:	e0fffe17 	ldw	r3,-8(fp)
  80d0fc:	1885883a 	add	r2,r3,r2
  80d100:	10800a04 	addi	r2,r2,40
  80d104:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80d108:	e0bffe17 	ldw	r2,-8(fp)
  80d10c:	e0fffb17 	ldw	r3,-20(fp)
  80d110:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d114:	e0bffe17 	ldw	r2,-8(fp)
  80d118:	10800317 	ldw	r2,12(r2)
  80d11c:	10800044 	addi	r2,r2,1
  80d120:	10800fcc 	andi	r2,r2,63
  80d124:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80d128:	e0bffe17 	ldw	r2,-8(fp)
  80d12c:	10c00217 	ldw	r3,8(r2)
  80d130:	e0bffb17 	ldw	r2,-20(fp)
  80d134:	18800e1e 	bne	r3,r2,80d170 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d138:	e0bffe17 	ldw	r2,-8(fp)
  80d13c:	10c00117 	ldw	r3,4(r2)
  80d140:	00bfdfc4 	movi	r2,-129
  80d144:	1886703a 	and	r3,r3,r2
  80d148:	e0bffe17 	ldw	r2,-8(fp)
  80d14c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80d150:	e0bffe17 	ldw	r2,-8(fp)
  80d154:	10800017 	ldw	r2,0(r2)
  80d158:	10800304 	addi	r2,r2,12
  80d15c:	e0fffe17 	ldw	r3,-8(fp)
  80d160:	18c00117 	ldw	r3,4(r3)
  80d164:	10c00035 	stwio	r3,0(r2)
  80d168:	00000106 	br	80d170 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80d16c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80d170:	e037883a 	mov	sp,fp
  80d174:	dfc00117 	ldw	ra,4(sp)
  80d178:	df000017 	ldw	fp,0(sp)
  80d17c:	dec00204 	addi	sp,sp,8
  80d180:	f800283a 	ret

0080d184 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d184:	defffa04 	addi	sp,sp,-24
  80d188:	dfc00515 	stw	ra,20(sp)
  80d18c:	df000415 	stw	fp,16(sp)
  80d190:	df000404 	addi	fp,sp,16
  80d194:	e13ffe15 	stw	r4,-8(fp)
  80d198:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80d19c:	e0bffe17 	ldw	r2,-8(fp)
  80d1a0:	10c00417 	ldw	r3,16(r2)
  80d1a4:	e0bffe17 	ldw	r2,-8(fp)
  80d1a8:	10800517 	ldw	r2,20(r2)
  80d1ac:	18804726 	beq	r3,r2,80d2cc <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d1b0:	e0bffe17 	ldw	r2,-8(fp)
  80d1b4:	10800617 	ldw	r2,24(r2)
  80d1b8:	1080008c 	andi	r2,r2,2
  80d1bc:	10000326 	beq	r2,zero,80d1cc <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80d1c0:	e0bfff17 	ldw	r2,-4(fp)
  80d1c4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d1c8:	10003226 	beq	r2,zero,80d294 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80d1cc:	e0bffe17 	ldw	r2,-8(fp)
  80d1d0:	10c00417 	ldw	r3,16(r2)
  80d1d4:	e0bffe17 	ldw	r2,-8(fp)
  80d1d8:	10800517 	ldw	r2,20(r2)
  80d1dc:	10800044 	addi	r2,r2,1
  80d1e0:	10800fcc 	andi	r2,r2,63
  80d1e4:	1880121e 	bne	r3,r2,80d230 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  80d1e8:	e0bffe17 	ldw	r2,-8(fp)
  80d1ec:	10800717 	ldw	r2,28(r2)
  80d1f0:	e0bffc15 	stw	r2,-16(fp)
  80d1f4:	00800084 	movi	r2,2
  80d1f8:	e0bffd0d 	sth	r2,-12(fp)
  80d1fc:	00800044 	movi	r2,1
  80d200:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80d204:	d0a03b43 	ldbu	r2,-32531(gp)
  80d208:	10803fcc 	andi	r2,r2,255
  80d20c:	10000826 	beq	r2,zero,80d230 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  80d210:	e0bffd0b 	ldhu	r2,-12(fp)
  80d214:	e0fffd83 	ldbu	r3,-10(fp)
  80d218:	e13ffdc4 	addi	r4,fp,-9
  80d21c:	200f883a 	mov	r7,r4
  80d220:	180d883a 	mov	r6,r3
  80d224:	100b883a 	mov	r5,r2
  80d228:	e13ffc17 	ldw	r4,-16(fp)
  80d22c:	0806b980 	call	806b98 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80d230:	e0bffe17 	ldw	r2,-8(fp)
  80d234:	10800017 	ldw	r2,0(r2)
  80d238:	10800104 	addi	r2,r2,4
  80d23c:	e0fffe17 	ldw	r3,-8(fp)
  80d240:	18c00417 	ldw	r3,16(r3)
  80d244:	e13ffe17 	ldw	r4,-8(fp)
  80d248:	20c7883a 	add	r3,r4,r3
  80d24c:	18c01a04 	addi	r3,r3,104
  80d250:	18c00003 	ldbu	r3,0(r3)
  80d254:	18c03fcc 	andi	r3,r3,255
  80d258:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80d25c:	e0bffe17 	ldw	r2,-8(fp)
  80d260:	10800417 	ldw	r2,16(r2)
  80d264:	10800044 	addi	r2,r2,1
  80d268:	e0fffe17 	ldw	r3,-8(fp)
  80d26c:	18800415 	stw	r2,16(r3)
  80d270:	10c00fcc 	andi	r3,r2,63
  80d274:	e0bffe17 	ldw	r2,-8(fp)
  80d278:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d27c:	e0bffe17 	ldw	r2,-8(fp)
  80d280:	10800117 	ldw	r2,4(r2)
  80d284:	10c01014 	ori	r3,r2,64
  80d288:	e0bffe17 	ldw	r2,-8(fp)
  80d28c:	10c00115 	stw	r3,4(r2)
  80d290:	00000e06 	br	80d2cc <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80d294:	e0bffe17 	ldw	r2,-8(fp)
  80d298:	10800017 	ldw	r2,0(r2)
  80d29c:	10800204 	addi	r2,r2,8
  80d2a0:	10800037 	ldwio	r2,0(r2)
  80d2a4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80d2a8:	e0bfff17 	ldw	r2,-4(fp)
  80d2ac:	1082000c 	andi	r2,r2,2048
  80d2b0:	1000061e 	bne	r2,zero,80d2cc <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d2b4:	e0bffe17 	ldw	r2,-8(fp)
  80d2b8:	10c00117 	ldw	r3,4(r2)
  80d2bc:	00bfefc4 	movi	r2,-65
  80d2c0:	1886703a 	and	r3,r3,r2
  80d2c4:	e0bffe17 	ldw	r2,-8(fp)
  80d2c8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80d2cc:	e0bffe17 	ldw	r2,-8(fp)
  80d2d0:	10c00417 	ldw	r3,16(r2)
  80d2d4:	e0bffe17 	ldw	r2,-8(fp)
  80d2d8:	10800517 	ldw	r2,20(r2)
  80d2dc:	1880061e 	bne	r3,r2,80d2f8 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d2e0:	e0bffe17 	ldw	r2,-8(fp)
  80d2e4:	10c00117 	ldw	r3,4(r2)
  80d2e8:	00beefc4 	movi	r2,-1089
  80d2ec:	1886703a 	and	r3,r3,r2
  80d2f0:	e0bffe17 	ldw	r2,-8(fp)
  80d2f4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d2f8:	e0bffe17 	ldw	r2,-8(fp)
  80d2fc:	10800017 	ldw	r2,0(r2)
  80d300:	10800304 	addi	r2,r2,12
  80d304:	e0fffe17 	ldw	r3,-8(fp)
  80d308:	18c00117 	ldw	r3,4(r3)
  80d30c:	10c00035 	stwio	r3,0(r2)
}
  80d310:	0001883a 	nop
  80d314:	e037883a 	mov	sp,fp
  80d318:	dfc00117 	ldw	ra,4(sp)
  80d31c:	df000017 	ldw	fp,0(sp)
  80d320:	dec00204 	addi	sp,sp,8
  80d324:	f800283a 	ret

0080d328 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80d328:	defffd04 	addi	sp,sp,-12
  80d32c:	df000215 	stw	fp,8(sp)
  80d330:	df000204 	addi	fp,sp,8
  80d334:	e13ffe15 	stw	r4,-8(fp)
  80d338:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d33c:	00000506 	br	80d354 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80d340:	e0bfff17 	ldw	r2,-4(fp)
  80d344:	1090000c 	andi	r2,r2,16384
  80d348:	10000226 	beq	r2,zero,80d354 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80d34c:	00bffd44 	movi	r2,-11
  80d350:	00000606 	br	80d36c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d354:	e0bffe17 	ldw	r2,-8(fp)
  80d358:	10c00417 	ldw	r3,16(r2)
  80d35c:	e0bffe17 	ldw	r2,-8(fp)
  80d360:	10800517 	ldw	r2,20(r2)
  80d364:	18bff61e 	bne	r3,r2,80d340 <__alt_mem_epcs_flash_controller_0+0xff804340>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d368:	0005883a 	mov	r2,zero
}
  80d36c:	e037883a 	mov	sp,fp
  80d370:	df000017 	ldw	fp,0(sp)
  80d374:	dec00104 	addi	sp,sp,4
  80d378:	f800283a 	ret

0080d37c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d37c:	defffe04 	addi	sp,sp,-8
  80d380:	dfc00115 	stw	ra,4(sp)
  80d384:	df000015 	stw	fp,0(sp)
  80d388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d38c:	d0a00917 	ldw	r2,-32732(gp)
  80d390:	10000326 	beq	r2,zero,80d3a0 <alt_get_errno+0x24>
  80d394:	d0a00917 	ldw	r2,-32732(gp)
  80d398:	103ee83a 	callr	r2
  80d39c:	00000106 	br	80d3a4 <alt_get_errno+0x28>
  80d3a0:	d0a03204 	addi	r2,gp,-32568
}
  80d3a4:	e037883a 	mov	sp,fp
  80d3a8:	dfc00117 	ldw	ra,4(sp)
  80d3ac:	df000017 	ldw	fp,0(sp)
  80d3b0:	dec00204 	addi	sp,sp,8
  80d3b4:	f800283a 	ret

0080d3b8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80d3b8:	deffec04 	addi	sp,sp,-80
  80d3bc:	dfc01315 	stw	ra,76(sp)
  80d3c0:	df001215 	stw	fp,72(sp)
  80d3c4:	df001204 	addi	fp,sp,72
  80d3c8:	e13ffc15 	stw	r4,-16(fp)
  80d3cc:	e17ffd15 	stw	r5,-12(fp)
  80d3d0:	e1bffe15 	stw	r6,-8(fp)
  80d3d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80d3d8:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  80d3dc:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80d3e0:	e0bfff17 	ldw	r2,-4(fp)
  80d3e4:	1090000c 	andi	r2,r2,16384
  80d3e8:	1005003a 	cmpeq	r2,r2,zero
  80d3ec:	10803fcc 	andi	r2,r2,255
  80d3f0:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  80d3f4:	e0bffc17 	ldw	r2,-16(fp)
  80d3f8:	10800817 	ldw	r2,32(r2)
  80d3fc:	e0bff815 	stw	r2,-32(fp)
  80d400:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80d404:	e0bff90b 	ldhu	r2,-28(fp)
  80d408:	e0fffb44 	addi	r3,fp,-19
  80d40c:	180d883a 	mov	r6,r3
  80d410:	100b883a 	mov	r5,r2
  80d414:	e13ff817 	ldw	r4,-32(fp)
  80d418:	0808ff40 	call	808ff4 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d41c:	00001306 	br	80d46c <altera_avalon_uart_read+0xb4>
    {
      count++;
  80d420:	e0bff017 	ldw	r2,-64(fp)
  80d424:	10800044 	addi	r2,r2,1
  80d428:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80d42c:	e0bffd17 	ldw	r2,-12(fp)
  80d430:	10c00044 	addi	r3,r2,1
  80d434:	e0fffd15 	stw	r3,-12(fp)
  80d438:	e0fffc17 	ldw	r3,-16(fp)
  80d43c:	18c00217 	ldw	r3,8(r3)
  80d440:	e13ffc17 	ldw	r4,-16(fp)
  80d444:	20c7883a 	add	r3,r4,r3
  80d448:	18c00a04 	addi	r3,r3,40
  80d44c:	18c00003 	ldbu	r3,0(r3)
  80d450:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80d454:	e0bffc17 	ldw	r2,-16(fp)
  80d458:	10800217 	ldw	r2,8(r2)
  80d45c:	10800044 	addi	r2,r2,1
  80d460:	10c00fcc 	andi	r3,r2,63
  80d464:	e0bffc17 	ldw	r2,-16(fp)
  80d468:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d46c:	e0fff017 	ldw	r3,-64(fp)
  80d470:	e0bffe17 	ldw	r2,-8(fp)
  80d474:	1880050e 	bge	r3,r2,80d48c <altera_avalon_uart_read+0xd4>
  80d478:	e0bffc17 	ldw	r2,-16(fp)
  80d47c:	10c00217 	ldw	r3,8(r2)
  80d480:	e0bffc17 	ldw	r2,-16(fp)
  80d484:	10800317 	ldw	r2,12(r2)
  80d488:	18bfe51e 	bne	r3,r2,80d420 <__alt_mem_epcs_flash_controller_0+0xff804420>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80d48c:	e0bff017 	ldw	r2,-64(fp)
  80d490:	10003a1e 	bne	r2,zero,80d57c <altera_avalon_uart_read+0x1c4>
  80d494:	e0bffc17 	ldw	r2,-16(fp)
  80d498:	10c00217 	ldw	r3,8(r2)
  80d49c:	e0bffc17 	ldw	r2,-16(fp)
  80d4a0:	10800317 	ldw	r2,12(r2)
  80d4a4:	1880351e 	bne	r3,r2,80d57c <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  80d4a8:	e0bff117 	ldw	r2,-60(fp)
  80d4ac:	1000071e 	bne	r2,zero,80d4cc <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80d4b0:	080d37c0 	call	80d37c <alt_get_errno>
  80d4b4:	1007883a 	mov	r3,r2
  80d4b8:	008002c4 	movi	r2,11
  80d4bc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80d4c0:	00800044 	movi	r2,1
  80d4c4:	e0bfef05 	stb	r2,-68(fp)
        break;
  80d4c8:	00003006 	br	80d58c <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d4cc:	0005303a 	rdctl	r2,status
  80d4d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d4d4:	e0fff517 	ldw	r3,-44(fp)
  80d4d8:	00bfff84 	movi	r2,-2
  80d4dc:	1884703a 	and	r2,r3,r2
  80d4e0:	1001703a 	wrctl	status,r2
  
  return context;
  80d4e4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80d4e8:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d4ec:	e0bffc17 	ldw	r2,-16(fp)
  80d4f0:	10800117 	ldw	r2,4(r2)
  80d4f4:	10c02014 	ori	r3,r2,128
  80d4f8:	e0bffc17 	ldw	r2,-16(fp)
  80d4fc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d500:	e0bffc17 	ldw	r2,-16(fp)
  80d504:	10800017 	ldw	r2,0(r2)
  80d508:	10800304 	addi	r2,r2,12
  80d50c:	e0fffc17 	ldw	r3,-16(fp)
  80d510:	18c00117 	ldw	r3,4(r3)
  80d514:	10c00035 	stwio	r3,0(r2)
  80d518:	e0bff417 	ldw	r2,-48(fp)
  80d51c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d520:	e0bff617 	ldw	r2,-40(fp)
  80d524:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  80d528:	e0bffc17 	ldw	r2,-16(fp)
  80d52c:	10800717 	ldw	r2,28(r2)
  80d530:	e0bff215 	stw	r2,-56(fp)
  80d534:	00800044 	movi	r2,1
  80d538:	e0bff98d 	sth	r2,-26(fp)
  80d53c:	00bfe0c4 	movi	r2,-125
  80d540:	e0bffa05 	stb	r2,-24(fp)
  80d544:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80d548:	d0a03b43 	ldbu	r2,-32531(gp)
  80d54c:	10803fcc 	andi	r2,r2,255
  80d550:	10000a26 	beq	r2,zero,80d57c <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80d554:	e0fff98b 	ldhu	r3,-26(fp)
  80d558:	e13ffa03 	ldbu	r4,-24(fp)
  80d55c:	e17ffa8b 	ldhu	r5,-22(fp)
  80d560:	e0bffb04 	addi	r2,fp,-20
  80d564:	d8800015 	stw	r2,0(sp)
  80d568:	280f883a 	mov	r7,r5
  80d56c:	200d883a 	mov	r6,r4
  80d570:	180b883a 	mov	r5,r3
  80d574:	e13ff217 	ldw	r4,-56(fp)
  80d578:	08065800 	call	806580 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80d57c:	e0bff017 	ldw	r2,-64(fp)
  80d580:	1000021e 	bne	r2,zero,80d58c <altera_avalon_uart_read+0x1d4>
  80d584:	e0bffe17 	ldw	r2,-8(fp)
  80d588:	103fb81e 	bne	r2,zero,80d46c <__alt_mem_epcs_flash_controller_0+0xff80446c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80d58c:	e0bffc17 	ldw	r2,-16(fp)
  80d590:	10800817 	ldw	r2,32(r2)
  80d594:	1009883a 	mov	r4,r2
  80d598:	080936c0 	call	80936c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d59c:	0005303a 	rdctl	r2,status
  80d5a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5a4:	e0fff717 	ldw	r3,-36(fp)
  80d5a8:	00bfff84 	movi	r2,-2
  80d5ac:	1884703a 	and	r2,r3,r2
  80d5b0:	1001703a 	wrctl	status,r2
  
  return context;
  80d5b4:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80d5b8:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d5bc:	e0bffc17 	ldw	r2,-16(fp)
  80d5c0:	10800117 	ldw	r2,4(r2)
  80d5c4:	10c02014 	ori	r3,r2,128
  80d5c8:	e0bffc17 	ldw	r2,-16(fp)
  80d5cc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d5d0:	e0bffc17 	ldw	r2,-16(fp)
  80d5d4:	10800017 	ldw	r2,0(r2)
  80d5d8:	10800304 	addi	r2,r2,12
  80d5dc:	e0fffc17 	ldw	r3,-16(fp)
  80d5e0:	18c00117 	ldw	r3,4(r3)
  80d5e4:	10c00035 	stwio	r3,0(r2)
  80d5e8:	e0bff417 	ldw	r2,-48(fp)
  80d5ec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d5f0:	e0bff317 	ldw	r2,-52(fp)
  80d5f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80d5f8:	e0bfef03 	ldbu	r2,-68(fp)
  80d5fc:	10000226 	beq	r2,zero,80d608 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  80d600:	00bffd44 	movi	r2,-11
  80d604:	00000106 	br	80d60c <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  80d608:	e0bff017 	ldw	r2,-64(fp)
  }
}
  80d60c:	e037883a 	mov	sp,fp
  80d610:	dfc00117 	ldw	ra,4(sp)
  80d614:	df000017 	ldw	fp,0(sp)
  80d618:	dec00204 	addi	sp,sp,8
  80d61c:	f800283a 	ret

0080d620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d620:	defffe04 	addi	sp,sp,-8
  80d624:	dfc00115 	stw	ra,4(sp)
  80d628:	df000015 	stw	fp,0(sp)
  80d62c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d630:	d0a00917 	ldw	r2,-32732(gp)
  80d634:	10000326 	beq	r2,zero,80d644 <alt_get_errno+0x24>
  80d638:	d0a00917 	ldw	r2,-32732(gp)
  80d63c:	103ee83a 	callr	r2
  80d640:	00000106 	br	80d648 <alt_get_errno+0x28>
  80d644:	d0a03204 	addi	r2,gp,-32568
}
  80d648:	e037883a 	mov	sp,fp
  80d64c:	dfc00117 	ldw	ra,4(sp)
  80d650:	df000017 	ldw	fp,0(sp)
  80d654:	dec00204 	addi	sp,sp,8
  80d658:	f800283a 	ret

0080d65c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80d65c:	deffec04 	addi	sp,sp,-80
  80d660:	dfc01315 	stw	ra,76(sp)
  80d664:	df001215 	stw	fp,72(sp)
  80d668:	df001204 	addi	fp,sp,72
  80d66c:	e13ffc15 	stw	r4,-16(fp)
  80d670:	e17ffd15 	stw	r5,-12(fp)
  80d674:	e1bffe15 	stw	r6,-8(fp)
  80d678:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80d67c:	e0bffe17 	ldw	r2,-8(fp)
  80d680:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80d684:	e0bfff17 	ldw	r2,-4(fp)
  80d688:	1090000c 	andi	r2,r2,16384
  80d68c:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  80d690:	e0bffc17 	ldw	r2,-16(fp)
  80d694:	10800917 	ldw	r2,36(r2)
  80d698:	e0bff815 	stw	r2,-32(fp)
  80d69c:	e03ff90d 	sth	zero,-28(fp)
  80d6a0:	e0bff90b 	ldhu	r2,-28(fp)
  80d6a4:	e0fffb44 	addi	r3,fp,-19
  80d6a8:	180d883a 	mov	r6,r3
  80d6ac:	100b883a 	mov	r5,r2
  80d6b0:	e13ff817 	ldw	r4,-32(fp)
  80d6b4:	0808ff40 	call	808ff4 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80d6b8:	00005106 	br	80d800 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d6bc:	e0bffc17 	ldw	r2,-16(fp)
  80d6c0:	10800517 	ldw	r2,20(r2)
  80d6c4:	10800044 	addi	r2,r2,1
  80d6c8:	10800fcc 	andi	r2,r2,63
  80d6cc:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80d6d0:	e0bffc17 	ldw	r2,-16(fp)
  80d6d4:	10c00417 	ldw	r3,16(r2)
  80d6d8:	e0bff217 	ldw	r2,-56(fp)
  80d6dc:	1880371e 	bne	r3,r2,80d7bc <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  80d6e0:	e0bff017 	ldw	r2,-64(fp)
  80d6e4:	10000526 	beq	r2,zero,80d6fc <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80d6e8:	080d6200 	call	80d620 <alt_get_errno>
  80d6ec:	1007883a 	mov	r3,r2
  80d6f0:	008002c4 	movi	r2,11
  80d6f4:	18800015 	stw	r2,0(r3)
        break;
  80d6f8:	00004306 	br	80d808 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d6fc:	0005303a 	rdctl	r2,status
  80d700:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d704:	e0fff517 	ldw	r3,-44(fp)
  80d708:	00bfff84 	movi	r2,-2
  80d70c:	1884703a 	and	r2,r3,r2
  80d710:	1001703a 	wrctl	status,r2
  
  return context;
  80d714:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80d718:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d71c:	e0bffc17 	ldw	r2,-16(fp)
  80d720:	10800117 	ldw	r2,4(r2)
  80d724:	10c11014 	ori	r3,r2,1088
  80d728:	e0bffc17 	ldw	r2,-16(fp)
  80d72c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d730:	e0bffc17 	ldw	r2,-16(fp)
  80d734:	10800017 	ldw	r2,0(r2)
  80d738:	10800304 	addi	r2,r2,12
  80d73c:	e0fffc17 	ldw	r3,-16(fp)
  80d740:	18c00117 	ldw	r3,4(r3)
  80d744:	10c00035 	stwio	r3,0(r2)
  80d748:	e0bff417 	ldw	r2,-48(fp)
  80d74c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d750:	e0bff117 	ldw	r2,-60(fp)
  80d754:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  80d758:	e0bffc17 	ldw	r2,-16(fp)
  80d75c:	10800717 	ldw	r2,28(r2)
  80d760:	e0bff315 	stw	r2,-52(fp)
  80d764:	00800084 	movi	r2,2
  80d768:	e0bff98d 	sth	r2,-26(fp)
  80d76c:	00bfe0c4 	movi	r2,-125
  80d770:	e0bffa05 	stb	r2,-24(fp)
  80d774:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80d778:	d0a03b43 	ldbu	r2,-32531(gp)
  80d77c:	10803fcc 	andi	r2,r2,255
  80d780:	10000a26 	beq	r2,zero,80d7ac <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80d784:	e0fff98b 	ldhu	r3,-26(fp)
  80d788:	e13ffa03 	ldbu	r4,-24(fp)
  80d78c:	e17ffa8b 	ldhu	r5,-22(fp)
  80d790:	e0bffb04 	addi	r2,fp,-20
  80d794:	d8800015 	stw	r2,0(sp)
  80d798:	280f883a 	mov	r7,r5
  80d79c:	200d883a 	mov	r6,r4
  80d7a0:	180b883a 	mov	r5,r3
  80d7a4:	e13ff317 	ldw	r4,-52(fp)
  80d7a8:	08065800 	call	806580 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80d7ac:	e0bffc17 	ldw	r2,-16(fp)
  80d7b0:	10c00417 	ldw	r3,16(r2)
  80d7b4:	e0bff217 	ldw	r2,-56(fp)
  80d7b8:	18bfe726 	beq	r3,r2,80d758 <__alt_mem_epcs_flash_controller_0+0xff804758>
      }
    }

    count--;
  80d7bc:	e0bfef17 	ldw	r2,-68(fp)
  80d7c0:	10bfffc4 	addi	r2,r2,-1
  80d7c4:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80d7c8:	e0bffc17 	ldw	r2,-16(fp)
  80d7cc:	10c00517 	ldw	r3,20(r2)
  80d7d0:	e0bffd17 	ldw	r2,-12(fp)
  80d7d4:	11000044 	addi	r4,r2,1
  80d7d8:	e13ffd15 	stw	r4,-12(fp)
  80d7dc:	10800003 	ldbu	r2,0(r2)
  80d7e0:	1009883a 	mov	r4,r2
  80d7e4:	e0bffc17 	ldw	r2,-16(fp)
  80d7e8:	10c5883a 	add	r2,r2,r3
  80d7ec:	10801a04 	addi	r2,r2,104
  80d7f0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80d7f4:	e0bffc17 	ldw	r2,-16(fp)
  80d7f8:	e0fff217 	ldw	r3,-56(fp)
  80d7fc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80d800:	e0bfef17 	ldw	r2,-68(fp)
  80d804:	103fad1e 	bne	r2,zero,80d6bc <__alt_mem_epcs_flash_controller_0+0xff8046bc>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  80d808:	e0bffc17 	ldw	r2,-16(fp)
  80d80c:	10800917 	ldw	r2,36(r2)
  80d810:	1009883a 	mov	r4,r2
  80d814:	080936c0 	call	80936c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d818:	0005303a 	rdctl	r2,status
  80d81c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d820:	e0fff717 	ldw	r3,-36(fp)
  80d824:	00bfff84 	movi	r2,-2
  80d828:	1884703a 	and	r2,r3,r2
  80d82c:	1001703a 	wrctl	status,r2
  
  return context;
  80d830:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80d834:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d838:	e0bffc17 	ldw	r2,-16(fp)
  80d83c:	10800117 	ldw	r2,4(r2)
  80d840:	10c11014 	ori	r3,r2,1088
  80d844:	e0bffc17 	ldw	r2,-16(fp)
  80d848:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d84c:	e0bffc17 	ldw	r2,-16(fp)
  80d850:	10800017 	ldw	r2,0(r2)
  80d854:	10800304 	addi	r2,r2,12
  80d858:	e0fffc17 	ldw	r3,-16(fp)
  80d85c:	18c00117 	ldw	r3,4(r3)
  80d860:	10c00035 	stwio	r3,0(r2)
  80d864:	e0bff417 	ldw	r2,-48(fp)
  80d868:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d86c:	e0bff617 	ldw	r2,-40(fp)
  80d870:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80d874:	e0fffe17 	ldw	r3,-8(fp)
  80d878:	e0bfef17 	ldw	r2,-68(fp)
  80d87c:	1885c83a 	sub	r2,r3,r2
}
  80d880:	e037883a 	mov	sp,fp
  80d884:	dfc00117 	ldw	ra,4(sp)
  80d888:	df000017 	ldw	fp,0(sp)
  80d88c:	dec00204 	addi	sp,sp,8
  80d890:	f800283a 	ret

0080d894 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  80d894:	defff904 	addi	sp,sp,-28
  80d898:	dfc00615 	stw	ra,24(sp)
  80d89c:	df000515 	stw	fp,20(sp)
  80d8a0:	df000504 	addi	fp,sp,20
  80d8a4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  80d8a8:	00800144 	movi	r2,5
  80d8ac:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  80d8b0:	d8000215 	stw	zero,8(sp)
  80d8b4:	e0bffe44 	addi	r2,fp,-7
  80d8b8:	d8800115 	stw	r2,4(sp)
  80d8bc:	00800044 	movi	r2,1
  80d8c0:	d8800015 	stw	r2,0(sp)
  80d8c4:	e1fffe04 	addi	r7,fp,-8
  80d8c8:	01800044 	movi	r6,1
  80d8cc:	000b883a 	mov	r5,zero
  80d8d0:	e13fff17 	ldw	r4,-4(fp)
  80d8d4:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  80d8d8:	e0bffe43 	ldbu	r2,-7(fp)
}
  80d8dc:	e037883a 	mov	sp,fp
  80d8e0:	dfc00117 	ldw	ra,4(sp)
  80d8e4:	df000017 	ldw	fp,0(sp)
  80d8e8:	dec00204 	addi	sp,sp,8
  80d8ec:	f800283a 	ret

0080d8f0 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  80d8f0:	defffd04 	addi	sp,sp,-12
  80d8f4:	dfc00215 	stw	ra,8(sp)
  80d8f8:	df000115 	stw	fp,4(sp)
  80d8fc:	df000104 	addi	fp,sp,4
  80d900:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  80d904:	e13fff17 	ldw	r4,-4(fp)
  80d908:	080d8940 	call	80d894 <epcs_read_status_register>
  80d90c:	10803fcc 	andi	r2,r2,255
  80d910:	1080004c 	andi	r2,r2,1
}
  80d914:	e037883a 	mov	sp,fp
  80d918:	dfc00117 	ldw	ra,4(sp)
  80d91c:	df000017 	ldw	fp,0(sp)
  80d920:	dec00204 	addi	sp,sp,8
  80d924:	f800283a 	ret

0080d928 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  80d928:	defffd04 	addi	sp,sp,-12
  80d92c:	dfc00215 	stw	ra,8(sp)
  80d930:	df000115 	stw	fp,4(sp)
  80d934:	df000104 	addi	fp,sp,4
  80d938:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  80d93c:	0001883a 	nop
  80d940:	e13fff17 	ldw	r4,-4(fp)
  80d944:	080d8f00 	call	80d8f0 <epcs_test_wip>
  80d948:	103ffd1e 	bne	r2,zero,80d940 <__alt_mem_epcs_flash_controller_0+0xff804940>
  {
  }
}
  80d94c:	0001883a 	nop
  80d950:	e037883a 	mov	sp,fp
  80d954:	dfc00117 	ldw	ra,4(sp)
  80d958:	df000017 	ldw	fp,0(sp)
  80d95c:	dec00204 	addi	sp,sp,8
  80d960:	f800283a 	ret

0080d964 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  80d964:	defff604 	addi	sp,sp,-40
  80d968:	dfc00915 	stw	ra,36(sp)
  80d96c:	df000815 	stw	fp,32(sp)
  80d970:	df000804 	addi	fp,sp,32
  80d974:	e13ffd15 	stw	r4,-12(fp)
  80d978:	e17ffe15 	stw	r5,-8(fp)
  80d97c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  80d980:	e0bfff17 	ldw	r2,-4(fp)
  80d984:	10001226 	beq	r2,zero,80d9d0 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  80d988:	00bff604 	movi	r2,-40
  80d98c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  80d990:	e0bffe17 	ldw	r2,-8(fp)
  80d994:	1004d63a 	srli	r2,r2,24
  80d998:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  80d99c:	e0bffe17 	ldw	r2,-8(fp)
  80d9a0:	1004d43a 	srli	r2,r2,16
  80d9a4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  80d9a8:	e0bffe17 	ldw	r2,-8(fp)
  80d9ac:	1004d23a 	srli	r2,r2,8
  80d9b0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  80d9b4:	e0bffe17 	ldw	r2,-8(fp)
  80d9b8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  80d9bc:	00800144 	movi	r2,5
  80d9c0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  80d9c4:	e13ffd17 	ldw	r4,-12(fp)
  80d9c8:	080de180 	call	80de18 <epcs_enter_4_bytes_mode>
  80d9cc:	00000c06 	br	80da00 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  80d9d0:	00bff604 	movi	r2,-40
  80d9d4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  80d9d8:	e0bffe17 	ldw	r2,-8(fp)
  80d9dc:	1004d43a 	srli	r2,r2,16
  80d9e0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  80d9e4:	e0bffe17 	ldw	r2,-8(fp)
  80d9e8:	1004d23a 	srli	r2,r2,8
  80d9ec:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  80d9f0:	e0bffe17 	ldw	r2,-8(fp)
  80d9f4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  80d9f8:	00800104 	movi	r2,4
  80d9fc:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  80da00:	e13ffd17 	ldw	r4,-12(fp)
  80da04:	080db540 	call	80db54 <epcs_write_enable>

  alt_avalon_spi_command(
  80da08:	e0bffb03 	ldbu	r2,-20(fp)
  80da0c:	e0fffb44 	addi	r3,fp,-19
  80da10:	d8000215 	stw	zero,8(sp)
  80da14:	d8000115 	stw	zero,4(sp)
  80da18:	d8000015 	stw	zero,0(sp)
  80da1c:	180f883a 	mov	r7,r3
  80da20:	100d883a 	mov	r6,r2
  80da24:	000b883a 	mov	r5,zero
  80da28:	e13ffd17 	ldw	r4,-12(fp)
  80da2c:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80da30:	e13ffd17 	ldw	r4,-12(fp)
  80da34:	080d9280 	call	80d928 <epcs_await_wip_released>

  if(four_bytes_mode)
  80da38:	e0bfff17 	ldw	r2,-4(fp)
  80da3c:	10000226 	beq	r2,zero,80da48 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  80da40:	e13ffd17 	ldw	r4,-12(fp)
  80da44:	080de740 	call	80de74 <epcs_exit_4_bytes_mode>
  }
}
  80da48:	0001883a 	nop
  80da4c:	e037883a 	mov	sp,fp
  80da50:	dfc00117 	ldw	ra,4(sp)
  80da54:	df000017 	ldw	fp,0(sp)
  80da58:	dec00204 	addi	sp,sp,8
  80da5c:	f800283a 	ret

0080da60 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  80da60:	defff404 	addi	sp,sp,-48
  80da64:	dfc00b15 	stw	ra,44(sp)
  80da68:	df000a15 	stw	fp,40(sp)
  80da6c:	df000a04 	addi	fp,sp,40
  80da70:	e13ffc15 	stw	r4,-16(fp)
  80da74:	e17ffd15 	stw	r5,-12(fp)
  80da78:	e1bffe15 	stw	r6,-8(fp)
  80da7c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  80da80:	008000c4 	movi	r2,3
  80da84:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80da88:	e0800217 	ldw	r2,8(fp)
  80da8c:	10001026 	beq	r2,zero,80dad0 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  80da90:	e0bffd17 	ldw	r2,-12(fp)
  80da94:	1004d63a 	srli	r2,r2,24
  80da98:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  80da9c:	e0bffd17 	ldw	r2,-12(fp)
  80daa0:	1005d43a 	srai	r2,r2,16
  80daa4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  80daa8:	e0bffd17 	ldw	r2,-12(fp)
  80daac:	1005d23a 	srai	r2,r2,8
  80dab0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  80dab4:	e0bffd17 	ldw	r2,-12(fp)
  80dab8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  80dabc:	00800144 	movi	r2,5
  80dac0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  80dac4:	e13ffc17 	ldw	r4,-16(fp)
  80dac8:	080de180 	call	80de18 <epcs_enter_4_bytes_mode>
  80dacc:	00000a06 	br	80daf8 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  80dad0:	e0bffd17 	ldw	r2,-12(fp)
  80dad4:	1005d43a 	srai	r2,r2,16
  80dad8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  80dadc:	e0bffd17 	ldw	r2,-12(fp)
  80dae0:	1005d23a 	srai	r2,r2,8
  80dae4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  80dae8:	e0bffd17 	ldw	r2,-12(fp)
  80daec:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  80daf0:	00800104 	movi	r2,4
  80daf4:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  80daf8:	e13ffc17 	ldw	r4,-16(fp)
  80dafc:	080d9280 	call	80d928 <epcs_await_wip_released>

  alt_avalon_spi_command(
  80db00:	e0bfff17 	ldw	r2,-4(fp)
  80db04:	e13ffa04 	addi	r4,fp,-24
  80db08:	d8000215 	stw	zero,8(sp)
  80db0c:	e0fffe17 	ldw	r3,-8(fp)
  80db10:	d8c00115 	stw	r3,4(sp)
  80db14:	d8800015 	stw	r2,0(sp)
  80db18:	200f883a 	mov	r7,r4
  80db1c:	e1bff917 	ldw	r6,-28(fp)
  80db20:	000b883a 	mov	r5,zero
  80db24:	e13ffc17 	ldw	r4,-16(fp)
  80db28:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  80db2c:	e0800217 	ldw	r2,8(fp)
  80db30:	10000226 	beq	r2,zero,80db3c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  80db34:	e13ffc17 	ldw	r4,-16(fp)
  80db38:	080de740 	call	80de74 <epcs_exit_4_bytes_mode>
  }

  return length;
  80db3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80db40:	e037883a 	mov	sp,fp
  80db44:	dfc00117 	ldw	ra,4(sp)
  80db48:	df000017 	ldw	fp,0(sp)
  80db4c:	dec00204 	addi	sp,sp,8
  80db50:	f800283a 	ret

0080db54 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  80db54:	defff904 	addi	sp,sp,-28
  80db58:	dfc00615 	stw	ra,24(sp)
  80db5c:	df000515 	stw	fp,20(sp)
  80db60:	df000504 	addi	fp,sp,20
  80db64:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  80db68:	00800184 	movi	r2,6
  80db6c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  80db70:	d8000215 	stw	zero,8(sp)
  80db74:	d8000115 	stw	zero,4(sp)
  80db78:	d8000015 	stw	zero,0(sp)
  80db7c:	e1fffe04 	addi	r7,fp,-8
  80db80:	01800044 	movi	r6,1
  80db84:	000b883a 	mov	r5,zero
  80db88:	e13fff17 	ldw	r4,-4(fp)
  80db8c:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  80db90:	0001883a 	nop
  80db94:	e037883a 	mov	sp,fp
  80db98:	dfc00117 	ldw	ra,4(sp)
  80db9c:	df000017 	ldw	fp,0(sp)
  80dba0:	dec00204 	addi	sp,sp,8
  80dba4:	f800283a 	ret

0080dba8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  80dba8:	defff804 	addi	sp,sp,-32
  80dbac:	dfc00715 	stw	ra,28(sp)
  80dbb0:	df000615 	stw	fp,24(sp)
  80dbb4:	df000604 	addi	fp,sp,24
  80dbb8:	e13ffe15 	stw	r4,-8(fp)
  80dbbc:	2805883a 	mov	r2,r5
  80dbc0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  80dbc4:	00800044 	movi	r2,1
  80dbc8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  80dbcc:	e0bfff03 	ldbu	r2,-4(fp)
  80dbd0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  80dbd4:	d8000215 	stw	zero,8(sp)
  80dbd8:	d8000115 	stw	zero,4(sp)
  80dbdc:	d8000015 	stw	zero,0(sp)
  80dbe0:	e1fffd04 	addi	r7,fp,-12
  80dbe4:	01800084 	movi	r6,2
  80dbe8:	000b883a 	mov	r5,zero
  80dbec:	e13ffe17 	ldw	r4,-8(fp)
  80dbf0:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80dbf4:	e13ffe17 	ldw	r4,-8(fp)
  80dbf8:	080d9280 	call	80d928 <epcs_await_wip_released>
}
  80dbfc:	0001883a 	nop
  80dc00:	e037883a 	mov	sp,fp
  80dc04:	dfc00117 	ldw	ra,4(sp)
  80dc08:	df000017 	ldw	fp,0(sp)
  80dc0c:	dec00204 	addi	sp,sp,8
  80dc10:	f800283a 	ret

0080dc14 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  80dc14:	defff404 	addi	sp,sp,-48
  80dc18:	dfc00b15 	stw	ra,44(sp)
  80dc1c:	df000a15 	stw	fp,40(sp)
  80dc20:	df000a04 	addi	fp,sp,40
  80dc24:	e13ffc15 	stw	r4,-16(fp)
  80dc28:	e17ffd15 	stw	r5,-12(fp)
  80dc2c:	e1bffe15 	stw	r6,-8(fp)
  80dc30:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  80dc34:	00800084 	movi	r2,2
  80dc38:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80dc3c:	e0800217 	ldw	r2,8(fp)
  80dc40:	10001026 	beq	r2,zero,80dc84 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  80dc44:	e0bffd17 	ldw	r2,-12(fp)
  80dc48:	1004d63a 	srli	r2,r2,24
  80dc4c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  80dc50:	e0bffd17 	ldw	r2,-12(fp)
  80dc54:	1005d43a 	srai	r2,r2,16
  80dc58:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  80dc5c:	e0bffd17 	ldw	r2,-12(fp)
  80dc60:	1005d23a 	srai	r2,r2,8
  80dc64:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  80dc68:	e0bffd17 	ldw	r2,-12(fp)
  80dc6c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  80dc70:	00800144 	movi	r2,5
  80dc74:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  80dc78:	e13ffc17 	ldw	r4,-16(fp)
  80dc7c:	080de180 	call	80de18 <epcs_enter_4_bytes_mode>
  80dc80:	00000a06 	br	80dcac <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  80dc84:	e0bffd17 	ldw	r2,-12(fp)
  80dc88:	1005d43a 	srai	r2,r2,16
  80dc8c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  80dc90:	e0bffd17 	ldw	r2,-12(fp)
  80dc94:	1005d23a 	srai	r2,r2,8
  80dc98:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  80dc9c:	e0bffd17 	ldw	r2,-12(fp)
  80dca0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  80dca4:	00800104 	movi	r2,4
  80dca8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  80dcac:	e13ffc17 	ldw	r4,-16(fp)
  80dcb0:	080db540 	call	80db54 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  80dcb4:	e0fffa04 	addi	r3,fp,-24
  80dcb8:	00800044 	movi	r2,1
  80dcbc:	d8800215 	stw	r2,8(sp)
  80dcc0:	d8000115 	stw	zero,4(sp)
  80dcc4:	d8000015 	stw	zero,0(sp)
  80dcc8:	180f883a 	mov	r7,r3
  80dccc:	e1bff917 	ldw	r6,-28(fp)
  80dcd0:	000b883a 	mov	r5,zero
  80dcd4:	e13ffc17 	ldw	r4,-16(fp)
  80dcd8:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  80dcdc:	e0bfff17 	ldw	r2,-4(fp)
  80dce0:	d8000215 	stw	zero,8(sp)
  80dce4:	d8000115 	stw	zero,4(sp)
  80dce8:	d8000015 	stw	zero,0(sp)
  80dcec:	e1fffe17 	ldw	r7,-8(fp)
  80dcf0:	100d883a 	mov	r6,r2
  80dcf4:	000b883a 	mov	r5,zero
  80dcf8:	e13ffc17 	ldw	r4,-16(fp)
  80dcfc:	080edfc0 	call	80edfc <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  80dd00:	e13ffc17 	ldw	r4,-16(fp)
  80dd04:	080d9280 	call	80d928 <epcs_await_wip_released>

  if(four_bytes_mode)
  80dd08:	e0800217 	ldw	r2,8(fp)
  80dd0c:	10000226 	beq	r2,zero,80dd18 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  80dd10:	e13ffc17 	ldw	r4,-16(fp)
  80dd14:	080de740 	call	80de74 <epcs_exit_4_bytes_mode>
  }

  return length;
  80dd18:	e0bfff17 	ldw	r2,-4(fp)
}
  80dd1c:	e037883a 	mov	sp,fp
  80dd20:	dfc00117 	ldw	ra,4(sp)
  80dd24:	df000017 	ldw	fp,0(sp)
  80dd28:	dec00204 	addi	sp,sp,8
  80dd2c:	f800283a 	ret

0080dd30 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  80dd30:	defff804 	addi	sp,sp,-32
  80dd34:	dfc00715 	stw	ra,28(sp)
  80dd38:	df000615 	stw	fp,24(sp)
  80dd3c:	df000604 	addi	fp,sp,24
  80dd40:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  80dd44:	00bfeac4 	movi	r2,-85
  80dd48:	e0bffd05 	stb	r2,-12(fp)
  80dd4c:	e03ffd45 	stb	zero,-11(fp)
  80dd50:	e03ffd85 	stb	zero,-10(fp)
  80dd54:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  80dd58:	d8000215 	stw	zero,8(sp)
  80dd5c:	e0bffe04 	addi	r2,fp,-8
  80dd60:	d8800115 	stw	r2,4(sp)
  80dd64:	00800044 	movi	r2,1
  80dd68:	d8800015 	stw	r2,0(sp)
  80dd6c:	e1fffd04 	addi	r7,fp,-12
  80dd70:	01800104 	movi	r6,4
  80dd74:	000b883a 	mov	r5,zero
  80dd78:	e13fff17 	ldw	r4,-4(fp)
  80dd7c:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  80dd80:	e0bffe03 	ldbu	r2,-8(fp)
}
  80dd84:	e037883a 	mov	sp,fp
  80dd88:	dfc00117 	ldw	ra,4(sp)
  80dd8c:	df000017 	ldw	fp,0(sp)
  80dd90:	dec00204 	addi	sp,sp,8
  80dd94:	f800283a 	ret

0080dd98 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  80dd98:	defff904 	addi	sp,sp,-28
  80dd9c:	dfc00615 	stw	ra,24(sp)
  80dda0:	df000515 	stw	fp,20(sp)
  80dda4:	df000504 	addi	fp,sp,20
  80dda8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  80ddac:	00bfe7c4 	movi	r2,-97
  80ddb0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  80ddb4:	d8000215 	stw	zero,8(sp)
  80ddb8:	e0bffe44 	addi	r2,fp,-7
  80ddbc:	d8800115 	stw	r2,4(sp)
  80ddc0:	008000c4 	movi	r2,3
  80ddc4:	d8800015 	stw	r2,0(sp)
  80ddc8:	e1fffe04 	addi	r7,fp,-8
  80ddcc:	01800044 	movi	r6,1
  80ddd0:	000b883a 	mov	r5,zero
  80ddd4:	e13fff17 	ldw	r4,-4(fp)
  80ddd8:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  80dddc:	e0bffe43 	ldbu	r2,-7(fp)
  80dde0:	10803fcc 	andi	r2,r2,255
  80dde4:	1006943a 	slli	r3,r2,16
  80dde8:	e0bffe83 	ldbu	r2,-6(fp)
  80ddec:	10803fcc 	andi	r2,r2,255
  80ddf0:	1004923a 	slli	r2,r2,8
  80ddf4:	1886b03a 	or	r3,r3,r2
  80ddf8:	e0bffec3 	ldbu	r2,-5(fp)
  80ddfc:	10803fcc 	andi	r2,r2,255
  80de00:	1884b03a 	or	r2,r3,r2
}
  80de04:	e037883a 	mov	sp,fp
  80de08:	dfc00117 	ldw	ra,4(sp)
  80de0c:	df000017 	ldw	fp,0(sp)
  80de10:	dec00204 	addi	sp,sp,8
  80de14:	f800283a 	ret

0080de18 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  80de18:	defff904 	addi	sp,sp,-28
  80de1c:	dfc00615 	stw	ra,24(sp)
  80de20:	df000515 	stw	fp,20(sp)
  80de24:	df000504 	addi	fp,sp,20
  80de28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  80de2c:	00bfedc4 	movi	r2,-73
  80de30:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80de34:	e13fff17 	ldw	r4,-4(fp)
  80de38:	080db540 	call	80db54 <epcs_write_enable>

  alt_avalon_spi_command(
  80de3c:	d8000215 	stw	zero,8(sp)
  80de40:	d8000115 	stw	zero,4(sp)
  80de44:	d8000015 	stw	zero,0(sp)
  80de48:	e1fffe04 	addi	r7,fp,-8
  80de4c:	01800044 	movi	r6,1
  80de50:	000b883a 	mov	r5,zero
  80de54:	e13fff17 	ldw	r4,-4(fp)
  80de58:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80de5c:	0001883a 	nop
}
  80de60:	e037883a 	mov	sp,fp
  80de64:	dfc00117 	ldw	ra,4(sp)
  80de68:	df000017 	ldw	fp,0(sp)
  80de6c:	dec00204 	addi	sp,sp,8
  80de70:	f800283a 	ret

0080de74 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  80de74:	defff904 	addi	sp,sp,-28
  80de78:	dfc00615 	stw	ra,24(sp)
  80de7c:	df000515 	stw	fp,20(sp)
  80de80:	df000504 	addi	fp,sp,20
  80de84:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  80de88:	00bffa44 	movi	r2,-23
  80de8c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80de90:	e13fff17 	ldw	r4,-4(fp)
  80de94:	080db540 	call	80db54 <epcs_write_enable>

  alt_avalon_spi_command(
  80de98:	d8000215 	stw	zero,8(sp)
  80de9c:	d8000115 	stw	zero,4(sp)
  80dea0:	d8000015 	stw	zero,0(sp)
  80dea4:	e1fffe04 	addi	r7,fp,-8
  80dea8:	01800044 	movi	r6,1
  80deac:	000b883a 	mov	r5,zero
  80deb0:	e13fff17 	ldw	r4,-4(fp)
  80deb4:	080edfc0 	call	80edfc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80deb8:	0001883a 	nop
}
  80debc:	e037883a 	mov	sp,fp
  80dec0:	dfc00117 	ldw	ra,4(sp)
  80dec4:	df000017 	ldw	fp,0(sp)
  80dec8:	dec00204 	addi	sp,sp,8
  80decc:	f800283a 	ret

0080ded0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80ded0:	defff504 	addi	sp,sp,-44
  80ded4:	df000a15 	stw	fp,40(sp)
  80ded8:	df000a04 	addi	fp,sp,40
  80dedc:	e13ffc15 	stw	r4,-16(fp)
  80dee0:	e17ffd15 	stw	r5,-12(fp)
  80dee4:	e1bffe15 	stw	r6,-8(fp)
  80dee8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80deec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80def0:	d0a05017 	ldw	r2,-32448(gp)
  
  if (alt_ticks_per_second ())
  80def4:	10003c26 	beq	r2,zero,80dfe8 <alt_alarm_start+0x118>
  {
    if (alarm)
  80def8:	e0bffc17 	ldw	r2,-16(fp)
  80defc:	10003826 	beq	r2,zero,80dfe0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80df00:	e0bffc17 	ldw	r2,-16(fp)
  80df04:	e0fffe17 	ldw	r3,-8(fp)
  80df08:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80df0c:	e0bffc17 	ldw	r2,-16(fp)
  80df10:	e0ffff17 	ldw	r3,-4(fp)
  80df14:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df18:	0005303a 	rdctl	r2,status
  80df1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df20:	e0fff917 	ldw	r3,-28(fp)
  80df24:	00bfff84 	movi	r2,-2
  80df28:	1884703a 	and	r2,r3,r2
  80df2c:	1001703a 	wrctl	status,r2
  
  return context;
  80df30:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80df34:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80df38:	d0a05117 	ldw	r2,-32444(gp)
      
      current_nticks = alt_nticks();
  80df3c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80df40:	e0fffd17 	ldw	r3,-12(fp)
  80df44:	e0bff617 	ldw	r2,-40(fp)
  80df48:	1885883a 	add	r2,r3,r2
  80df4c:	10c00044 	addi	r3,r2,1
  80df50:	e0bffc17 	ldw	r2,-16(fp)
  80df54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80df58:	e0bffc17 	ldw	r2,-16(fp)
  80df5c:	10c00217 	ldw	r3,8(r2)
  80df60:	e0bff617 	ldw	r2,-40(fp)
  80df64:	1880042e 	bgeu	r3,r2,80df78 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80df68:	e0bffc17 	ldw	r2,-16(fp)
  80df6c:	00c00044 	movi	r3,1
  80df70:	10c00405 	stb	r3,16(r2)
  80df74:	00000206 	br	80df80 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80df78:	e0bffc17 	ldw	r2,-16(fp)
  80df7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80df80:	e0bffc17 	ldw	r2,-16(fp)
  80df84:	d0e02d04 	addi	r3,gp,-32588
  80df88:	e0fffa15 	stw	r3,-24(fp)
  80df8c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80df90:	e0bffb17 	ldw	r2,-20(fp)
  80df94:	e0fffa17 	ldw	r3,-24(fp)
  80df98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80df9c:	e0bffa17 	ldw	r2,-24(fp)
  80dfa0:	10c00017 	ldw	r3,0(r2)
  80dfa4:	e0bffb17 	ldw	r2,-20(fp)
  80dfa8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80dfac:	e0bffa17 	ldw	r2,-24(fp)
  80dfb0:	10800017 	ldw	r2,0(r2)
  80dfb4:	e0fffb17 	ldw	r3,-20(fp)
  80dfb8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80dfbc:	e0bffa17 	ldw	r2,-24(fp)
  80dfc0:	e0fffb17 	ldw	r3,-20(fp)
  80dfc4:	10c00015 	stw	r3,0(r2)
  80dfc8:	e0bff817 	ldw	r2,-32(fp)
  80dfcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dfd0:	e0bff717 	ldw	r2,-36(fp)
  80dfd4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80dfd8:	0005883a 	mov	r2,zero
  80dfdc:	00000306 	br	80dfec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80dfe0:	00bffa84 	movi	r2,-22
  80dfe4:	00000106 	br	80dfec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80dfe8:	00bfde84 	movi	r2,-134
  }
}
  80dfec:	e037883a 	mov	sp,fp
  80dff0:	df000017 	ldw	fp,0(sp)
  80dff4:	dec00104 	addi	sp,sp,4
  80dff8:	f800283a 	ret

0080dffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dffc:	defffe04 	addi	sp,sp,-8
  80e000:	dfc00115 	stw	ra,4(sp)
  80e004:	df000015 	stw	fp,0(sp)
  80e008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e00c:	d0a00917 	ldw	r2,-32732(gp)
  80e010:	10000326 	beq	r2,zero,80e020 <alt_get_errno+0x24>
  80e014:	d0a00917 	ldw	r2,-32732(gp)
  80e018:	103ee83a 	callr	r2
  80e01c:	00000106 	br	80e024 <alt_get_errno+0x28>
  80e020:	d0a03204 	addi	r2,gp,-32568
}
  80e024:	e037883a 	mov	sp,fp
  80e028:	dfc00117 	ldw	ra,4(sp)
  80e02c:	df000017 	ldw	fp,0(sp)
  80e030:	dec00204 	addi	sp,sp,8
  80e034:	f800283a 	ret

0080e038 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80e038:	defffa04 	addi	sp,sp,-24
  80e03c:	dfc00515 	stw	ra,20(sp)
  80e040:	df000415 	stw	fp,16(sp)
  80e044:	df000404 	addi	fp,sp,16
  80e048:	e13ffe15 	stw	r4,-8(fp)
  80e04c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80e050:	e0bffe17 	ldw	r2,-8(fp)
  80e054:	10000326 	beq	r2,zero,80e064 <alt_dev_llist_insert+0x2c>
  80e058:	e0bffe17 	ldw	r2,-8(fp)
  80e05c:	10800217 	ldw	r2,8(r2)
  80e060:	1000061e 	bne	r2,zero,80e07c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80e064:	080dffc0 	call	80dffc <alt_get_errno>
  80e068:	1007883a 	mov	r3,r2
  80e06c:	00800584 	movi	r2,22
  80e070:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80e074:	00bffa84 	movi	r2,-22
  80e078:	00001306 	br	80e0c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80e07c:	e0bffe17 	ldw	r2,-8(fp)
  80e080:	e0ffff17 	ldw	r3,-4(fp)
  80e084:	e0fffc15 	stw	r3,-16(fp)
  80e088:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e08c:	e0bffd17 	ldw	r2,-12(fp)
  80e090:	e0fffc17 	ldw	r3,-16(fp)
  80e094:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80e098:	e0bffc17 	ldw	r2,-16(fp)
  80e09c:	10c00017 	ldw	r3,0(r2)
  80e0a0:	e0bffd17 	ldw	r2,-12(fp)
  80e0a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e0a8:	e0bffc17 	ldw	r2,-16(fp)
  80e0ac:	10800017 	ldw	r2,0(r2)
  80e0b0:	e0fffd17 	ldw	r3,-12(fp)
  80e0b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80e0b8:	e0bffc17 	ldw	r2,-16(fp)
  80e0bc:	e0fffd17 	ldw	r3,-12(fp)
  80e0c0:	10c00015 	stw	r3,0(r2)

  return 0;  
  80e0c4:	0005883a 	mov	r2,zero
}
  80e0c8:	e037883a 	mov	sp,fp
  80e0cc:	dfc00117 	ldw	ra,4(sp)
  80e0d0:	df000017 	ldw	fp,0(sp)
  80e0d4:	dec00204 	addi	sp,sp,8
  80e0d8:	f800283a 	ret

0080e0dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80e0dc:	defffd04 	addi	sp,sp,-12
  80e0e0:	dfc00215 	stw	ra,8(sp)
  80e0e4:	df000115 	stw	fp,4(sp)
  80e0e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e0ec:	00802074 	movhi	r2,129
  80e0f0:	10bdac04 	addi	r2,r2,-2384
  80e0f4:	e0bfff15 	stw	r2,-4(fp)
  80e0f8:	00000606 	br	80e114 <_do_ctors+0x38>
        (*ctor) (); 
  80e0fc:	e0bfff17 	ldw	r2,-4(fp)
  80e100:	10800017 	ldw	r2,0(r2)
  80e104:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e108:	e0bfff17 	ldw	r2,-4(fp)
  80e10c:	10bfff04 	addi	r2,r2,-4
  80e110:	e0bfff15 	stw	r2,-4(fp)
  80e114:	e0ffff17 	ldw	r3,-4(fp)
  80e118:	00802074 	movhi	r2,129
  80e11c:	10bdad04 	addi	r2,r2,-2380
  80e120:	18bff62e 	bgeu	r3,r2,80e0fc <__alt_mem_epcs_flash_controller_0+0xff8050fc>
        (*ctor) (); 
}
  80e124:	0001883a 	nop
  80e128:	e037883a 	mov	sp,fp
  80e12c:	dfc00117 	ldw	ra,4(sp)
  80e130:	df000017 	ldw	fp,0(sp)
  80e134:	dec00204 	addi	sp,sp,8
  80e138:	f800283a 	ret

0080e13c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80e13c:	defffd04 	addi	sp,sp,-12
  80e140:	dfc00215 	stw	ra,8(sp)
  80e144:	df000115 	stw	fp,4(sp)
  80e148:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e14c:	00802074 	movhi	r2,129
  80e150:	10bdac04 	addi	r2,r2,-2384
  80e154:	e0bfff15 	stw	r2,-4(fp)
  80e158:	00000606 	br	80e174 <_do_dtors+0x38>
        (*dtor) (); 
  80e15c:	e0bfff17 	ldw	r2,-4(fp)
  80e160:	10800017 	ldw	r2,0(r2)
  80e164:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e168:	e0bfff17 	ldw	r2,-4(fp)
  80e16c:	10bfff04 	addi	r2,r2,-4
  80e170:	e0bfff15 	stw	r2,-4(fp)
  80e174:	e0ffff17 	ldw	r3,-4(fp)
  80e178:	00802074 	movhi	r2,129
  80e17c:	10bdad04 	addi	r2,r2,-2380
  80e180:	18bff62e 	bgeu	r3,r2,80e15c <__alt_mem_epcs_flash_controller_0+0xff80515c>
        (*dtor) (); 
}
  80e184:	0001883a 	nop
  80e188:	e037883a 	mov	sp,fp
  80e18c:	dfc00117 	ldw	ra,4(sp)
  80e190:	df000017 	ldw	fp,0(sp)
  80e194:	dec00204 	addi	sp,sp,8
  80e198:	f800283a 	ret

0080e19c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  80e19c:	defffc04 	addi	sp,sp,-16
  80e1a0:	dfc00315 	stw	ra,12(sp)
  80e1a4:	df000215 	stw	fp,8(sp)
  80e1a8:	df000204 	addi	fp,sp,8
  80e1ac:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  80e1b0:	d1602a04 	addi	r5,gp,-32600
  80e1b4:	e13fff17 	ldw	r4,-4(fp)
  80e1b8:	080eff80 	call	80eff8 <alt_find_dev>
  80e1bc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  80e1c0:	e0bffe17 	ldw	r2,-8(fp)
  80e1c4:	10000926 	beq	r2,zero,80e1ec <alt_flash_open_dev+0x50>
  80e1c8:	e0bffe17 	ldw	r2,-8(fp)
  80e1cc:	10800317 	ldw	r2,12(r2)
  80e1d0:	10000626 	beq	r2,zero,80e1ec <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  80e1d4:	e0bffe17 	ldw	r2,-8(fp)
  80e1d8:	10800317 	ldw	r2,12(r2)
  80e1dc:	e17fff17 	ldw	r5,-4(fp)
  80e1e0:	e13ffe17 	ldw	r4,-8(fp)
  80e1e4:	103ee83a 	callr	r2
  80e1e8:	00000106 	br	80e1f0 <alt_flash_open_dev+0x54>
  }

  return dev;
  80e1ec:	e0bffe17 	ldw	r2,-8(fp)
}
  80e1f0:	e037883a 	mov	sp,fp
  80e1f4:	dfc00117 	ldw	ra,4(sp)
  80e1f8:	df000017 	ldw	fp,0(sp)
  80e1fc:	dec00204 	addi	sp,sp,8
  80e200:	f800283a 	ret

0080e204 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  80e204:	defffd04 	addi	sp,sp,-12
  80e208:	dfc00215 	stw	ra,8(sp)
  80e20c:	df000115 	stw	fp,4(sp)
  80e210:	df000104 	addi	fp,sp,4
  80e214:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  80e218:	e0bfff17 	ldw	r2,-4(fp)
  80e21c:	10000826 	beq	r2,zero,80e240 <alt_flash_close_dev+0x3c>
  80e220:	e0bfff17 	ldw	r2,-4(fp)
  80e224:	10800417 	ldw	r2,16(r2)
  80e228:	10000526 	beq	r2,zero,80e240 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  80e22c:	e0bfff17 	ldw	r2,-4(fp)
  80e230:	10800417 	ldw	r2,16(r2)
  80e234:	e13fff17 	ldw	r4,-4(fp)
  80e238:	103ee83a 	callr	r2
  }
  return;
  80e23c:	0001883a 	nop
  80e240:	0001883a 	nop
}
  80e244:	e037883a 	mov	sp,fp
  80e248:	dfc00117 	ldw	ra,4(sp)
  80e24c:	df000017 	ldw	fp,0(sp)
  80e250:	dec00204 	addi	sp,sp,8
  80e254:	f800283a 	ret

0080e258 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e258:	defff904 	addi	sp,sp,-28
  80e25c:	dfc00615 	stw	ra,24(sp)
  80e260:	df000515 	stw	fp,20(sp)
  80e264:	df000504 	addi	fp,sp,20
  80e268:	e13ffc15 	stw	r4,-16(fp)
  80e26c:	e17ffd15 	stw	r5,-12(fp)
  80e270:	e1bffe15 	stw	r6,-8(fp)
  80e274:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e278:	e0800217 	ldw	r2,8(fp)
  80e27c:	d8800015 	stw	r2,0(sp)
  80e280:	e1ffff17 	ldw	r7,-4(fp)
  80e284:	e1bffe17 	ldw	r6,-8(fp)
  80e288:	e17ffd17 	ldw	r5,-12(fp)
  80e28c:	e13ffc17 	ldw	r4,-16(fp)
  80e290:	080e4080 	call	80e408 <alt_iic_isr_register>
}  
  80e294:	e037883a 	mov	sp,fp
  80e298:	dfc00117 	ldw	ra,4(sp)
  80e29c:	df000017 	ldw	fp,0(sp)
  80e2a0:	dec00204 	addi	sp,sp,8
  80e2a4:	f800283a 	ret

0080e2a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e2a8:	defff904 	addi	sp,sp,-28
  80e2ac:	df000615 	stw	fp,24(sp)
  80e2b0:	df000604 	addi	fp,sp,24
  80e2b4:	e13ffe15 	stw	r4,-8(fp)
  80e2b8:	e17fff15 	stw	r5,-4(fp)
  80e2bc:	e0bfff17 	ldw	r2,-4(fp)
  80e2c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e2c4:	0005303a 	rdctl	r2,status
  80e2c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e2cc:	e0fffb17 	ldw	r3,-20(fp)
  80e2d0:	00bfff84 	movi	r2,-2
  80e2d4:	1884703a 	and	r2,r3,r2
  80e2d8:	1001703a 	wrctl	status,r2
  
  return context;
  80e2dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e2e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80e2e4:	00c00044 	movi	r3,1
  80e2e8:	e0bffa17 	ldw	r2,-24(fp)
  80e2ec:	1884983a 	sll	r2,r3,r2
  80e2f0:	1007883a 	mov	r3,r2
  80e2f4:	d0a04f17 	ldw	r2,-32452(gp)
  80e2f8:	1884b03a 	or	r2,r3,r2
  80e2fc:	d0a04f15 	stw	r2,-32452(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e300:	d0a04f17 	ldw	r2,-32452(gp)
  80e304:	100170fa 	wrctl	ienable,r2
  80e308:	e0bffc17 	ldw	r2,-16(fp)
  80e30c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e310:	e0bffd17 	ldw	r2,-12(fp)
  80e314:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e318:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80e31c:	0001883a 	nop
}
  80e320:	e037883a 	mov	sp,fp
  80e324:	df000017 	ldw	fp,0(sp)
  80e328:	dec00104 	addi	sp,sp,4
  80e32c:	f800283a 	ret

0080e330 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e330:	defff904 	addi	sp,sp,-28
  80e334:	df000615 	stw	fp,24(sp)
  80e338:	df000604 	addi	fp,sp,24
  80e33c:	e13ffe15 	stw	r4,-8(fp)
  80e340:	e17fff15 	stw	r5,-4(fp)
  80e344:	e0bfff17 	ldw	r2,-4(fp)
  80e348:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e34c:	0005303a 	rdctl	r2,status
  80e350:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e354:	e0fffb17 	ldw	r3,-20(fp)
  80e358:	00bfff84 	movi	r2,-2
  80e35c:	1884703a 	and	r2,r3,r2
  80e360:	1001703a 	wrctl	status,r2
  
  return context;
  80e364:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e368:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80e36c:	00c00044 	movi	r3,1
  80e370:	e0bffa17 	ldw	r2,-24(fp)
  80e374:	1884983a 	sll	r2,r3,r2
  80e378:	0084303a 	nor	r2,zero,r2
  80e37c:	1007883a 	mov	r3,r2
  80e380:	d0a04f17 	ldw	r2,-32452(gp)
  80e384:	1884703a 	and	r2,r3,r2
  80e388:	d0a04f15 	stw	r2,-32452(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e38c:	d0a04f17 	ldw	r2,-32452(gp)
  80e390:	100170fa 	wrctl	ienable,r2
  80e394:	e0bffc17 	ldw	r2,-16(fp)
  80e398:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e39c:	e0bffd17 	ldw	r2,-12(fp)
  80e3a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e3a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80e3a8:	0001883a 	nop
}
  80e3ac:	e037883a 	mov	sp,fp
  80e3b0:	df000017 	ldw	fp,0(sp)
  80e3b4:	dec00104 	addi	sp,sp,4
  80e3b8:	f800283a 	ret

0080e3bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e3bc:	defffc04 	addi	sp,sp,-16
  80e3c0:	df000315 	stw	fp,12(sp)
  80e3c4:	df000304 	addi	fp,sp,12
  80e3c8:	e13ffe15 	stw	r4,-8(fp)
  80e3cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e3d0:	000530fa 	rdctl	r2,ienable
  80e3d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e3d8:	00c00044 	movi	r3,1
  80e3dc:	e0bfff17 	ldw	r2,-4(fp)
  80e3e0:	1884983a 	sll	r2,r3,r2
  80e3e4:	1007883a 	mov	r3,r2
  80e3e8:	e0bffd17 	ldw	r2,-12(fp)
  80e3ec:	1884703a 	and	r2,r3,r2
  80e3f0:	1004c03a 	cmpne	r2,r2,zero
  80e3f4:	10803fcc 	andi	r2,r2,255
}
  80e3f8:	e037883a 	mov	sp,fp
  80e3fc:	df000017 	ldw	fp,0(sp)
  80e400:	dec00104 	addi	sp,sp,4
  80e404:	f800283a 	ret

0080e408 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e408:	defff504 	addi	sp,sp,-44
  80e40c:	dfc00a15 	stw	ra,40(sp)
  80e410:	df000915 	stw	fp,36(sp)
  80e414:	df000904 	addi	fp,sp,36
  80e418:	e13ffc15 	stw	r4,-16(fp)
  80e41c:	e17ffd15 	stw	r5,-12(fp)
  80e420:	e1bffe15 	stw	r6,-8(fp)
  80e424:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80e428:	00bffa84 	movi	r2,-22
  80e42c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e430:	e0bffd17 	ldw	r2,-12(fp)
  80e434:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e438:	e0bff817 	ldw	r2,-32(fp)
  80e43c:	10800808 	cmpgei	r2,r2,32
  80e440:	1000271e 	bne	r2,zero,80e4e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e444:	0005303a 	rdctl	r2,status
  80e448:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e44c:	e0fffb17 	ldw	r3,-20(fp)
  80e450:	00bfff84 	movi	r2,-2
  80e454:	1884703a 	and	r2,r3,r2
  80e458:	1001703a 	wrctl	status,r2
  
  return context;
  80e45c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e460:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80e464:	008020b4 	movhi	r2,130
  80e468:	10a23004 	addi	r2,r2,-30528
  80e46c:	e0fff817 	ldw	r3,-32(fp)
  80e470:	180690fa 	slli	r3,r3,3
  80e474:	10c5883a 	add	r2,r2,r3
  80e478:	e0fffe17 	ldw	r3,-8(fp)
  80e47c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80e480:	008020b4 	movhi	r2,130
  80e484:	10a23004 	addi	r2,r2,-30528
  80e488:	e0fff817 	ldw	r3,-32(fp)
  80e48c:	180690fa 	slli	r3,r3,3
  80e490:	10c5883a 	add	r2,r2,r3
  80e494:	10800104 	addi	r2,r2,4
  80e498:	e0ffff17 	ldw	r3,-4(fp)
  80e49c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e4a0:	e0bffe17 	ldw	r2,-8(fp)
  80e4a4:	10000526 	beq	r2,zero,80e4bc <alt_iic_isr_register+0xb4>
  80e4a8:	e0bff817 	ldw	r2,-32(fp)
  80e4ac:	100b883a 	mov	r5,r2
  80e4b0:	e13ffc17 	ldw	r4,-16(fp)
  80e4b4:	080e2a80 	call	80e2a8 <alt_ic_irq_enable>
  80e4b8:	00000406 	br	80e4cc <alt_iic_isr_register+0xc4>
  80e4bc:	e0bff817 	ldw	r2,-32(fp)
  80e4c0:	100b883a 	mov	r5,r2
  80e4c4:	e13ffc17 	ldw	r4,-16(fp)
  80e4c8:	080e3300 	call	80e330 <alt_ic_irq_disable>
  80e4cc:	e0bff715 	stw	r2,-36(fp)
  80e4d0:	e0bffa17 	ldw	r2,-24(fp)
  80e4d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e4d8:	e0bff917 	ldw	r2,-28(fp)
  80e4dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e4e0:	e0bff717 	ldw	r2,-36(fp)
}
  80e4e4:	e037883a 	mov	sp,fp
  80e4e8:	dfc00117 	ldw	ra,4(sp)
  80e4ec:	df000017 	ldw	fp,0(sp)
  80e4f0:	dec00204 	addi	sp,sp,8
  80e4f4:	f800283a 	ret

0080e4f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80e4f8:	defff804 	addi	sp,sp,-32
  80e4fc:	dfc00715 	stw	ra,28(sp)
  80e500:	df000615 	stw	fp,24(sp)
  80e504:	dc000515 	stw	r16,20(sp)
  80e508:	df000604 	addi	fp,sp,24
  80e50c:	e13ffb15 	stw	r4,-20(fp)
  80e510:	e17ffc15 	stw	r5,-16(fp)
  80e514:	e1bffd15 	stw	r6,-12(fp)
  80e518:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  80e51c:	e1bffe17 	ldw	r6,-8(fp)
  80e520:	e17ffd17 	ldw	r5,-12(fp)
  80e524:	e13ffc17 	ldw	r4,-16(fp)
  80e528:	080e7800 	call	80e780 <open>
  80e52c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  80e530:	e0bffa17 	ldw	r2,-24(fp)
  80e534:	10002216 	blt	r2,zero,80e5c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  80e538:	04002074 	movhi	r16,129
  80e53c:	84003404 	addi	r16,r16,208
  80e540:	e0bffa17 	ldw	r2,-24(fp)
  80e544:	01400304 	movi	r5,12
  80e548:	1009883a 	mov	r4,r2
  80e54c:	0802f380 	call	802f38 <__mulsi3>
  80e550:	8085883a 	add	r2,r16,r2
  80e554:	10c00017 	ldw	r3,0(r2)
  80e558:	e0bffb17 	ldw	r2,-20(fp)
  80e55c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80e560:	04002074 	movhi	r16,129
  80e564:	84003404 	addi	r16,r16,208
  80e568:	e0bffa17 	ldw	r2,-24(fp)
  80e56c:	01400304 	movi	r5,12
  80e570:	1009883a 	mov	r4,r2
  80e574:	0802f380 	call	802f38 <__mulsi3>
  80e578:	8085883a 	add	r2,r16,r2
  80e57c:	10800104 	addi	r2,r2,4
  80e580:	10c00017 	ldw	r3,0(r2)
  80e584:	e0bffb17 	ldw	r2,-20(fp)
  80e588:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80e58c:	04002074 	movhi	r16,129
  80e590:	84003404 	addi	r16,r16,208
  80e594:	e0bffa17 	ldw	r2,-24(fp)
  80e598:	01400304 	movi	r5,12
  80e59c:	1009883a 	mov	r4,r2
  80e5a0:	0802f380 	call	802f38 <__mulsi3>
  80e5a4:	8085883a 	add	r2,r16,r2
  80e5a8:	10800204 	addi	r2,r2,8
  80e5ac:	10c00017 	ldw	r3,0(r2)
  80e5b0:	e0bffb17 	ldw	r2,-20(fp)
  80e5b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80e5b8:	e13ffa17 	ldw	r4,-24(fp)
  80e5bc:	08035900 	call	803590 <alt_release_fd>
  }
} 
  80e5c0:	0001883a 	nop
  80e5c4:	e6ffff04 	addi	sp,fp,-4
  80e5c8:	dfc00217 	ldw	ra,8(sp)
  80e5cc:	df000117 	ldw	fp,4(sp)
  80e5d0:	dc000017 	ldw	r16,0(sp)
  80e5d4:	dec00304 	addi	sp,sp,12
  80e5d8:	f800283a 	ret

0080e5dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80e5dc:	defffb04 	addi	sp,sp,-20
  80e5e0:	dfc00415 	stw	ra,16(sp)
  80e5e4:	df000315 	stw	fp,12(sp)
  80e5e8:	df000304 	addi	fp,sp,12
  80e5ec:	e13ffd15 	stw	r4,-12(fp)
  80e5f0:	e17ffe15 	stw	r5,-8(fp)
  80e5f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80e5f8:	01c07fc4 	movi	r7,511
  80e5fc:	01800044 	movi	r6,1
  80e600:	e17ffd17 	ldw	r5,-12(fp)
  80e604:	01002074 	movhi	r4,129
  80e608:	21003704 	addi	r4,r4,220
  80e60c:	080e4f80 	call	80e4f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80e610:	01c07fc4 	movi	r7,511
  80e614:	000d883a 	mov	r6,zero
  80e618:	e17ffe17 	ldw	r5,-8(fp)
  80e61c:	01002074 	movhi	r4,129
  80e620:	21003404 	addi	r4,r4,208
  80e624:	080e4f80 	call	80e4f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80e628:	01c07fc4 	movi	r7,511
  80e62c:	01800044 	movi	r6,1
  80e630:	e17fff17 	ldw	r5,-4(fp)
  80e634:	01002074 	movhi	r4,129
  80e638:	21003a04 	addi	r4,r4,232
  80e63c:	080e4f80 	call	80e4f8 <alt_open_fd>
}  
  80e640:	0001883a 	nop
  80e644:	e037883a 	mov	sp,fp
  80e648:	dfc00117 	ldw	ra,4(sp)
  80e64c:	df000017 	ldw	fp,0(sp)
  80e650:	dec00204 	addi	sp,sp,8
  80e654:	f800283a 	ret

0080e658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e658:	defffe04 	addi	sp,sp,-8
  80e65c:	dfc00115 	stw	ra,4(sp)
  80e660:	df000015 	stw	fp,0(sp)
  80e664:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e668:	d0a00917 	ldw	r2,-32732(gp)
  80e66c:	10000326 	beq	r2,zero,80e67c <alt_get_errno+0x24>
  80e670:	d0a00917 	ldw	r2,-32732(gp)
  80e674:	103ee83a 	callr	r2
  80e678:	00000106 	br	80e680 <alt_get_errno+0x28>
  80e67c:	d0a03204 	addi	r2,gp,-32568
}
  80e680:	e037883a 	mov	sp,fp
  80e684:	dfc00117 	ldw	ra,4(sp)
  80e688:	df000017 	ldw	fp,0(sp)
  80e68c:	dec00204 	addi	sp,sp,8
  80e690:	f800283a 	ret

0080e694 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80e694:	defffb04 	addi	sp,sp,-20
  80e698:	dfc00415 	stw	ra,16(sp)
  80e69c:	df000315 	stw	fp,12(sp)
  80e6a0:	dc000215 	stw	r16,8(sp)
  80e6a4:	df000304 	addi	fp,sp,12
  80e6a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80e6ac:	e0bffe17 	ldw	r2,-8(fp)
  80e6b0:	10800217 	ldw	r2,8(r2)
  80e6b4:	10d00034 	orhi	r3,r2,16384
  80e6b8:	e0bffe17 	ldw	r2,-8(fp)
  80e6bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e6c0:	e03ffd15 	stw	zero,-12(fp)
  80e6c4:	00002306 	br	80e754 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e6c8:	04002074 	movhi	r16,129
  80e6cc:	84003404 	addi	r16,r16,208
  80e6d0:	e0bffd17 	ldw	r2,-12(fp)
  80e6d4:	01400304 	movi	r5,12
  80e6d8:	1009883a 	mov	r4,r2
  80e6dc:	0802f380 	call	802f38 <__mulsi3>
  80e6e0:	8085883a 	add	r2,r16,r2
  80e6e4:	10c00017 	ldw	r3,0(r2)
  80e6e8:	e0bffe17 	ldw	r2,-8(fp)
  80e6ec:	10800017 	ldw	r2,0(r2)
  80e6f0:	1880151e 	bne	r3,r2,80e748 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e6f4:	04002074 	movhi	r16,129
  80e6f8:	84003404 	addi	r16,r16,208
  80e6fc:	e0bffd17 	ldw	r2,-12(fp)
  80e700:	01400304 	movi	r5,12
  80e704:	1009883a 	mov	r4,r2
  80e708:	0802f380 	call	802f38 <__mulsi3>
  80e70c:	8085883a 	add	r2,r16,r2
  80e710:	10800204 	addi	r2,r2,8
  80e714:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e718:	10000b0e 	bge	r2,zero,80e748 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80e71c:	01400304 	movi	r5,12
  80e720:	e13ffd17 	ldw	r4,-12(fp)
  80e724:	0802f380 	call	802f38 <__mulsi3>
  80e728:	1007883a 	mov	r3,r2
  80e72c:	00802074 	movhi	r2,129
  80e730:	10803404 	addi	r2,r2,208
  80e734:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e738:	e0bffe17 	ldw	r2,-8(fp)
  80e73c:	18800226 	beq	r3,r2,80e748 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80e740:	00bffcc4 	movi	r2,-13
  80e744:	00000806 	br	80e768 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e748:	e0bffd17 	ldw	r2,-12(fp)
  80e74c:	10800044 	addi	r2,r2,1
  80e750:	e0bffd15 	stw	r2,-12(fp)
  80e754:	d0a00817 	ldw	r2,-32736(gp)
  80e758:	1007883a 	mov	r3,r2
  80e75c:	e0bffd17 	ldw	r2,-12(fp)
  80e760:	18bfd92e 	bgeu	r3,r2,80e6c8 <__alt_mem_epcs_flash_controller_0+0xff8056c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80e764:	0005883a 	mov	r2,zero
}
  80e768:	e6ffff04 	addi	sp,fp,-4
  80e76c:	dfc00217 	ldw	ra,8(sp)
  80e770:	df000117 	ldw	fp,4(sp)
  80e774:	dc000017 	ldw	r16,0(sp)
  80e778:	dec00304 	addi	sp,sp,12
  80e77c:	f800283a 	ret

0080e780 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80e780:	defff604 	addi	sp,sp,-40
  80e784:	dfc00915 	stw	ra,36(sp)
  80e788:	df000815 	stw	fp,32(sp)
  80e78c:	df000804 	addi	fp,sp,32
  80e790:	e13ffd15 	stw	r4,-12(fp)
  80e794:	e17ffe15 	stw	r5,-8(fp)
  80e798:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80e79c:	00bfffc4 	movi	r2,-1
  80e7a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80e7a4:	00bffb44 	movi	r2,-19
  80e7a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80e7ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80e7b0:	d1600604 	addi	r5,gp,-32744
  80e7b4:	e13ffd17 	ldw	r4,-12(fp)
  80e7b8:	080eff80 	call	80eff8 <alt_find_dev>
  80e7bc:	e0bff815 	stw	r2,-32(fp)
  80e7c0:	e0bff817 	ldw	r2,-32(fp)
  80e7c4:	1000051e 	bne	r2,zero,80e7dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80e7c8:	e13ffd17 	ldw	r4,-12(fp)
  80e7cc:	080f0880 	call	80f088 <alt_find_file>
  80e7d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80e7d4:	00800044 	movi	r2,1
  80e7d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80e7dc:	e0bff817 	ldw	r2,-32(fp)
  80e7e0:	10002b26 	beq	r2,zero,80e890 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80e7e4:	e13ff817 	ldw	r4,-32(fp)
  80e7e8:	080f1900 	call	80f190 <alt_get_fd>
  80e7ec:	e0bff915 	stw	r2,-28(fp)
  80e7f0:	e0bff917 	ldw	r2,-28(fp)
  80e7f4:	1000030e 	bge	r2,zero,80e804 <open+0x84>
    {
      status = index;
  80e7f8:	e0bff917 	ldw	r2,-28(fp)
  80e7fc:	e0bffa15 	stw	r2,-24(fp)
  80e800:	00002506 	br	80e898 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  80e804:	01400304 	movi	r5,12
  80e808:	e13ff917 	ldw	r4,-28(fp)
  80e80c:	0802f380 	call	802f38 <__mulsi3>
  80e810:	1007883a 	mov	r3,r2
  80e814:	00802074 	movhi	r2,129
  80e818:	10803404 	addi	r2,r2,208
  80e81c:	1885883a 	add	r2,r3,r2
  80e820:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80e824:	e0fffe17 	ldw	r3,-8(fp)
  80e828:	00900034 	movhi	r2,16384
  80e82c:	10bfffc4 	addi	r2,r2,-1
  80e830:	1886703a 	and	r3,r3,r2
  80e834:	e0bffc17 	ldw	r2,-16(fp)
  80e838:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80e83c:	e0bffb17 	ldw	r2,-20(fp)
  80e840:	1000051e 	bne	r2,zero,80e858 <open+0xd8>
  80e844:	e13ffc17 	ldw	r4,-16(fp)
  80e848:	080e6940 	call	80e694 <alt_file_locked>
  80e84c:	e0bffa15 	stw	r2,-24(fp)
  80e850:	e0bffa17 	ldw	r2,-24(fp)
  80e854:	10001016 	blt	r2,zero,80e898 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80e858:	e0bff817 	ldw	r2,-32(fp)
  80e85c:	10800317 	ldw	r2,12(r2)
  80e860:	10000826 	beq	r2,zero,80e884 <open+0x104>
  80e864:	e0bff817 	ldw	r2,-32(fp)
  80e868:	10800317 	ldw	r2,12(r2)
  80e86c:	e1ffff17 	ldw	r7,-4(fp)
  80e870:	e1bffe17 	ldw	r6,-8(fp)
  80e874:	e17ffd17 	ldw	r5,-12(fp)
  80e878:	e13ffc17 	ldw	r4,-16(fp)
  80e87c:	103ee83a 	callr	r2
  80e880:	00000106 	br	80e888 <open+0x108>
  80e884:	0005883a 	mov	r2,zero
  80e888:	e0bffa15 	stw	r2,-24(fp)
  80e88c:	00000206 	br	80e898 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80e890:	00bffb44 	movi	r2,-19
  80e894:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80e898:	e0bffa17 	ldw	r2,-24(fp)
  80e89c:	1000090e 	bge	r2,zero,80e8c4 <open+0x144>
  {
    alt_release_fd (index);  
  80e8a0:	e13ff917 	ldw	r4,-28(fp)
  80e8a4:	08035900 	call	803590 <alt_release_fd>
    ALT_ERRNO = -status;
  80e8a8:	080e6580 	call	80e658 <alt_get_errno>
  80e8ac:	1007883a 	mov	r3,r2
  80e8b0:	e0bffa17 	ldw	r2,-24(fp)
  80e8b4:	0085c83a 	sub	r2,zero,r2
  80e8b8:	18800015 	stw	r2,0(r3)
    return -1;
  80e8bc:	00bfffc4 	movi	r2,-1
  80e8c0:	00000106 	br	80e8c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  80e8c4:	e0bff917 	ldw	r2,-28(fp)
}
  80e8c8:	e037883a 	mov	sp,fp
  80e8cc:	dfc00117 	ldw	ra,4(sp)
  80e8d0:	df000017 	ldw	fp,0(sp)
  80e8d4:	dec00204 	addi	sp,sp,8
  80e8d8:	f800283a 	ret

0080e8dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e8dc:	defffa04 	addi	sp,sp,-24
  80e8e0:	df000515 	stw	fp,20(sp)
  80e8e4:	df000504 	addi	fp,sp,20
  80e8e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e8ec:	0005303a 	rdctl	r2,status
  80e8f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e8f4:	e0fffc17 	ldw	r3,-16(fp)
  80e8f8:	00bfff84 	movi	r2,-2
  80e8fc:	1884703a 	and	r2,r3,r2
  80e900:	1001703a 	wrctl	status,r2
  
  return context;
  80e904:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e908:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80e90c:	e0bfff17 	ldw	r2,-4(fp)
  80e910:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e914:	e0bffd17 	ldw	r2,-12(fp)
  80e918:	10800017 	ldw	r2,0(r2)
  80e91c:	e0fffd17 	ldw	r3,-12(fp)
  80e920:	18c00117 	ldw	r3,4(r3)
  80e924:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80e928:	e0bffd17 	ldw	r2,-12(fp)
  80e92c:	10800117 	ldw	r2,4(r2)
  80e930:	e0fffd17 	ldw	r3,-12(fp)
  80e934:	18c00017 	ldw	r3,0(r3)
  80e938:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e93c:	e0bffd17 	ldw	r2,-12(fp)
  80e940:	e0fffd17 	ldw	r3,-12(fp)
  80e944:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80e948:	e0bffd17 	ldw	r2,-12(fp)
  80e94c:	e0fffd17 	ldw	r3,-12(fp)
  80e950:	10c00015 	stw	r3,0(r2)
  80e954:	e0bffb17 	ldw	r2,-20(fp)
  80e958:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e95c:	e0bffe17 	ldw	r2,-8(fp)
  80e960:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e964:	0001883a 	nop
  80e968:	e037883a 	mov	sp,fp
  80e96c:	df000017 	ldw	fp,0(sp)
  80e970:	dec00104 	addi	sp,sp,4
  80e974:	f800283a 	ret

0080e978 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e978:	defffb04 	addi	sp,sp,-20
  80e97c:	dfc00415 	stw	ra,16(sp)
  80e980:	df000315 	stw	fp,12(sp)
  80e984:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e988:	d0a02d17 	ldw	r2,-32588(gp)
  80e98c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e990:	d0a05117 	ldw	r2,-32444(gp)
  80e994:	10800044 	addi	r2,r2,1
  80e998:	d0a05115 	stw	r2,-32444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e99c:	00002e06 	br	80ea58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e9a0:	e0bffd17 	ldw	r2,-12(fp)
  80e9a4:	10800017 	ldw	r2,0(r2)
  80e9a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e9ac:	e0bffd17 	ldw	r2,-12(fp)
  80e9b0:	10800403 	ldbu	r2,16(r2)
  80e9b4:	10803fcc 	andi	r2,r2,255
  80e9b8:	10000426 	beq	r2,zero,80e9cc <alt_tick+0x54>
  80e9bc:	d0a05117 	ldw	r2,-32444(gp)
  80e9c0:	1000021e 	bne	r2,zero,80e9cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80e9c4:	e0bffd17 	ldw	r2,-12(fp)
  80e9c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e9cc:	e0bffd17 	ldw	r2,-12(fp)
  80e9d0:	10800217 	ldw	r2,8(r2)
  80e9d4:	d0e05117 	ldw	r3,-32444(gp)
  80e9d8:	18801d36 	bltu	r3,r2,80ea50 <alt_tick+0xd8>
  80e9dc:	e0bffd17 	ldw	r2,-12(fp)
  80e9e0:	10800403 	ldbu	r2,16(r2)
  80e9e4:	10803fcc 	andi	r2,r2,255
  80e9e8:	1000191e 	bne	r2,zero,80ea50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80e9ec:	e0bffd17 	ldw	r2,-12(fp)
  80e9f0:	10800317 	ldw	r2,12(r2)
  80e9f4:	e0fffd17 	ldw	r3,-12(fp)
  80e9f8:	18c00517 	ldw	r3,20(r3)
  80e9fc:	1809883a 	mov	r4,r3
  80ea00:	103ee83a 	callr	r2
  80ea04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80ea08:	e0bfff17 	ldw	r2,-4(fp)
  80ea0c:	1000031e 	bne	r2,zero,80ea1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80ea10:	e13ffd17 	ldw	r4,-12(fp)
  80ea14:	080e8dc0 	call	80e8dc <alt_alarm_stop>
  80ea18:	00000d06 	br	80ea50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80ea1c:	e0bffd17 	ldw	r2,-12(fp)
  80ea20:	10c00217 	ldw	r3,8(r2)
  80ea24:	e0bfff17 	ldw	r2,-4(fp)
  80ea28:	1887883a 	add	r3,r3,r2
  80ea2c:	e0bffd17 	ldw	r2,-12(fp)
  80ea30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80ea34:	e0bffd17 	ldw	r2,-12(fp)
  80ea38:	10c00217 	ldw	r3,8(r2)
  80ea3c:	d0a05117 	ldw	r2,-32444(gp)
  80ea40:	1880032e 	bgeu	r3,r2,80ea50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80ea44:	e0bffd17 	ldw	r2,-12(fp)
  80ea48:	00c00044 	movi	r3,1
  80ea4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80ea50:	e0bffe17 	ldw	r2,-8(fp)
  80ea54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ea58:	e0fffd17 	ldw	r3,-12(fp)
  80ea5c:	d0a02d04 	addi	r2,gp,-32588
  80ea60:	18bfcf1e 	bne	r3,r2,80e9a0 <__alt_mem_epcs_flash_controller_0+0xff8059a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80ea64:	08047a40 	call	8047a4 <OSTimeTick>
}
  80ea68:	0001883a 	nop
  80ea6c:	e037883a 	mov	sp,fp
  80ea70:	dfc00117 	ldw	ra,4(sp)
  80ea74:	df000017 	ldw	fp,0(sp)
  80ea78:	dec00204 	addi	sp,sp,8
  80ea7c:	f800283a 	ret

0080ea80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80ea80:	deffff04 	addi	sp,sp,-4
  80ea84:	df000015 	stw	fp,0(sp)
  80ea88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80ea8c:	000170fa 	wrctl	ienable,zero
}
  80ea90:	0001883a 	nop
  80ea94:	e037883a 	mov	sp,fp
  80ea98:	df000017 	ldw	fp,0(sp)
  80ea9c:	dec00104 	addi	sp,sp,4
  80eaa0:	f800283a 	ret

0080eaa4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  80eaa4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  80eaa8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  80eaac:	d1204a17 	ldw	r4,-32472(gp)

      stw ra,  0(sp)
  80eab0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  80eab4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  80eab8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  80eabc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  80eac0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  80eac4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  80eac8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  80eacc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  80ead0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  80ead4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  80ead8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  80eadc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80eae0:	080ed180 	call	80ed18 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  80eae4:	d1204517 	ldw	r4,-32492(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  80eae8:	d1603d07 	ldb	r5,-32524(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  80eaec:	d1204a15 	stw	r4,-32472(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  80eaf0:	d1603d45 	stb	r5,-32523(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  80eaf4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  80eaf8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  80eafc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  80eb00:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  80eb04:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  80eb08:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  80eb0c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  80eb10:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  80eb14:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  80eb18:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  80eb1c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  80eb20:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  80eb24:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  80eb28:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  80eb2c:	f800283a 	ret

0080eb30 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  80eb30:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  80eb34:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  80eb38:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  80eb3c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80eb40:	080ed180 	call	80ed18 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  80eb44:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  80eb48:	d4a03b45 	stb	r18,-32531(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  80eb4c:	003fe506 	br	80eae4 <__alt_mem_epcs_flash_controller_0+0xff805ae4>

0080eb50 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  80eb50:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  80eb54:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  80eb58:	10800054 	ori	r2,r2,1
      wrctl status, r2
  80eb5c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  80eb60:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  80eb64:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  80eb68:	dec00204 	addi	sp,sp,8

      callr r2
  80eb6c:	103ee83a 	callr	r2

      nop
  80eb70:	0001883a 	nop

0080eb74 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  80eb74:	defff704 	addi	sp,sp,-36
  80eb78:	dfc00815 	stw	ra,32(sp)
  80eb7c:	df000715 	stw	fp,28(sp)
  80eb80:	df000704 	addi	fp,sp,28
  80eb84:	e13ffc15 	stw	r4,-16(fp)
  80eb88:	e17ffd15 	stw	r5,-12(fp)
  80eb8c:	e1bffe15 	stw	r6,-8(fp)
  80eb90:	3805883a 	mov	r2,r7
  80eb94:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  80eb98:	e0fffe17 	ldw	r3,-8(fp)
  80eb9c:	00bfff04 	movi	r2,-4
  80eba0:	1884703a 	and	r2,r3,r2
  80eba4:	10bef704 	addi	r2,r2,-1060
  80eba8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  80ebac:	01810904 	movi	r6,1060
  80ebb0:	000b883a 	mov	r5,zero
  80ebb4:	e13ff917 	ldw	r4,-28(fp)
  80ebb8:	08018540 	call	801854 <memset>
  80ebbc:	e0bff917 	ldw	r2,-28(fp)
  80ebc0:	10c0bb04 	addi	r3,r2,748
  80ebc4:	e0bff917 	ldw	r2,-28(fp)
  80ebc8:	10c00115 	stw	r3,4(r2)
  80ebcc:	e0bff917 	ldw	r2,-28(fp)
  80ebd0:	10c0d504 	addi	r3,r2,852
  80ebd4:	e0bff917 	ldw	r2,-28(fp)
  80ebd8:	10c00215 	stw	r3,8(r2)
  80ebdc:	e0bff917 	ldw	r2,-28(fp)
  80ebe0:	10c0ef04 	addi	r3,r2,956
  80ebe4:	e0bff917 	ldw	r2,-28(fp)
  80ebe8:	10c00315 	stw	r3,12(r2)
  80ebec:	e0fff917 	ldw	r3,-28(fp)
  80ebf0:	00802074 	movhi	r2,129
  80ebf4:	10be1e04 	addi	r2,r2,-1928
  80ebf8:	18800d15 	stw	r2,52(r3)
  80ebfc:	e0bff917 	ldw	r2,-28(fp)
  80ec00:	00c00044 	movi	r3,1
  80ec04:	10c02915 	stw	r3,164(r2)
  80ec08:	10002a15 	stw	zero,168(r2)
  80ec0c:	e0bff917 	ldw	r2,-28(fp)
  80ec10:	00ccc384 	movi	r3,13070
  80ec14:	10c02b0d 	sth	r3,172(r2)
  80ec18:	e0bff917 	ldw	r2,-28(fp)
  80ec1c:	00eaf344 	movi	r3,-21555
  80ec20:	10c02b8d 	sth	r3,174(r2)
  80ec24:	e0bff917 	ldw	r2,-28(fp)
  80ec28:	00c48d04 	movi	r3,4660
  80ec2c:	10c02c0d 	sth	r3,176(r2)
  80ec30:	e0bff917 	ldw	r2,-28(fp)
  80ec34:	00f99b44 	movi	r3,-6547
  80ec38:	10c02c8d 	sth	r3,178(r2)
  80ec3c:	e0bff917 	ldw	r2,-28(fp)
  80ec40:	00f7bb04 	movi	r3,-8468
  80ec44:	10c02d0d 	sth	r3,180(r2)
  80ec48:	e0bff917 	ldw	r2,-28(fp)
  80ec4c:	00c00144 	movi	r3,5
  80ec50:	10c02d8d 	sth	r3,182(r2)
  80ec54:	e0bff917 	ldw	r2,-28(fp)
  80ec58:	00c002c4 	movi	r3,11
  80ec5c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  80ec60:	e0bff917 	ldw	r2,-28(fp)
  80ec64:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  80ec68:	e0bffa17 	ldw	r2,-24(fp)
  80ec6c:	10bff304 	addi	r2,r2,-52
  80ec70:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  80ec74:	e0bffb17 	ldw	r2,-20(fp)
  80ec78:	10800c04 	addi	r2,r2,48
  80ec7c:	e0fffc17 	ldw	r3,-16(fp)
  80ec80:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  80ec84:	e0bffb17 	ldw	r2,-20(fp)
  80ec88:	10800b04 	addi	r2,r2,44
  80ec8c:	e0fffd17 	ldw	r3,-12(fp)
  80ec90:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  80ec94:	e0bffb17 	ldw	r2,-20(fp)
  80ec98:	10800a04 	addi	r2,r2,40
  80ec9c:	e0fff917 	ldw	r3,-28(fp)
  80eca0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  80eca4:	00802074 	movhi	r2,129
  80eca8:	10bad404 	addi	r2,r2,-5296
  80ecac:	10c00104 	addi	r3,r2,4
  80ecb0:	e0bffb17 	ldw	r2,-20(fp)
  80ecb4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  80ecb8:	e0bffb17 	ldw	r2,-20(fp)
}
  80ecbc:	e037883a 	mov	sp,fp
  80ecc0:	dfc00117 	ldw	ra,4(sp)
  80ecc4:	df000017 	ldw	fp,0(sp)
  80ecc8:	dec00204 	addi	sp,sp,8
  80eccc:	f800283a 	ret

0080ecd0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  80ecd0:	defffe04 	addi	sp,sp,-8
  80ecd4:	df000115 	stw	fp,4(sp)
  80ecd8:	df000104 	addi	fp,sp,4
  80ecdc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  80ece0:	0001883a 	nop
  80ece4:	e037883a 	mov	sp,fp
  80ece8:	df000017 	ldw	fp,0(sp)
  80ecec:	dec00104 	addi	sp,sp,4
  80ecf0:	f800283a 	ret

0080ecf4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  80ecf4:	defffe04 	addi	sp,sp,-8
  80ecf8:	df000115 	stw	fp,4(sp)
  80ecfc:	df000104 	addi	fp,sp,4
  80ed00:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  80ed04:	0001883a 	nop
  80ed08:	e037883a 	mov	sp,fp
  80ed0c:	df000017 	ldw	fp,0(sp)
  80ed10:	dec00104 	addi	sp,sp,4
  80ed14:	f800283a 	ret

0080ed18 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  80ed18:	deffff04 	addi	sp,sp,-4
  80ed1c:	df000015 	stw	fp,0(sp)
  80ed20:	d839883a 	mov	fp,sp
}
  80ed24:	0001883a 	nop
  80ed28:	e037883a 	mov	sp,fp
  80ed2c:	df000017 	ldw	fp,0(sp)
  80ed30:	dec00104 	addi	sp,sp,4
  80ed34:	f800283a 	ret

0080ed38 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  80ed38:	deffff04 	addi	sp,sp,-4
  80ed3c:	df000015 	stw	fp,0(sp)
  80ed40:	d839883a 	mov	fp,sp
}
  80ed44:	0001883a 	nop
  80ed48:	e037883a 	mov	sp,fp
  80ed4c:	df000017 	ldw	fp,0(sp)
  80ed50:	dec00104 	addi	sp,sp,4
  80ed54:	f800283a 	ret

0080ed58 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  80ed58:	deffff04 	addi	sp,sp,-4
  80ed5c:	df000015 	stw	fp,0(sp)
  80ed60:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  80ed64:	0001883a 	nop
  80ed68:	e037883a 	mov	sp,fp
  80ed6c:	df000017 	ldw	fp,0(sp)
  80ed70:	dec00104 	addi	sp,sp,4
  80ed74:	f800283a 	ret

0080ed78 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  80ed78:	deffff04 	addi	sp,sp,-4
  80ed7c:	df000015 	stw	fp,0(sp)
  80ed80:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  80ed84:	0001883a 	nop
  80ed88:	e037883a 	mov	sp,fp
  80ed8c:	df000017 	ldw	fp,0(sp)
  80ed90:	dec00104 	addi	sp,sp,4
  80ed94:	f800283a 	ret

0080ed98 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  80ed98:	deffff04 	addi	sp,sp,-4
  80ed9c:	df000015 	stw	fp,0(sp)
  80eda0:	d839883a 	mov	fp,sp
}
  80eda4:	0001883a 	nop
  80eda8:	e037883a 	mov	sp,fp
  80edac:	df000017 	ldw	fp,0(sp)
  80edb0:	dec00104 	addi	sp,sp,4
  80edb4:	f800283a 	ret

0080edb8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  80edb8:	deffff04 	addi	sp,sp,-4
  80edbc:	df000015 	stw	fp,0(sp)
  80edc0:	d839883a 	mov	fp,sp
}
  80edc4:	0001883a 	nop
  80edc8:	e037883a 	mov	sp,fp
  80edcc:	df000017 	ldw	fp,0(sp)
  80edd0:	dec00104 	addi	sp,sp,4
  80edd4:	f800283a 	ret

0080edd8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  80edd8:	defffe04 	addi	sp,sp,-8
  80eddc:	df000115 	stw	fp,4(sp)
  80ede0:	df000104 	addi	fp,sp,4
  80ede4:	e13fff15 	stw	r4,-4(fp)
}
  80ede8:	0001883a 	nop
  80edec:	e037883a 	mov	sp,fp
  80edf0:	df000017 	ldw	fp,0(sp)
  80edf4:	dec00104 	addi	sp,sp,4
  80edf8:	f800283a 	ret

0080edfc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  80edfc:	defff404 	addi	sp,sp,-48
  80ee00:	df000b15 	stw	fp,44(sp)
  80ee04:	df000b04 	addi	fp,sp,44
  80ee08:	e13ffc15 	stw	r4,-16(fp)
  80ee0c:	e17ffd15 	stw	r5,-12(fp)
  80ee10:	e1bffe15 	stw	r6,-8(fp)
  80ee14:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  80ee18:	e0ffff17 	ldw	r3,-4(fp)
  80ee1c:	e0bffe17 	ldw	r2,-8(fp)
  80ee20:	1885883a 	add	r2,r3,r2
  80ee24:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  80ee28:	e0c00217 	ldw	r3,8(fp)
  80ee2c:	e0800117 	ldw	r2,4(fp)
  80ee30:	1885883a 	add	r2,r3,r2
  80ee34:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  80ee38:	e0800117 	ldw	r2,4(fp)
  80ee3c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  80ee40:	e0bffe17 	ldw	r2,-8(fp)
  80ee44:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  80ee48:	00800044 	movi	r2,1
  80ee4c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80ee50:	e0bffc17 	ldw	r2,-16(fp)
  80ee54:	10800504 	addi	r2,r2,20
  80ee58:	1009883a 	mov	r4,r2
  80ee5c:	00c00044 	movi	r3,1
  80ee60:	e0bffd17 	ldw	r2,-12(fp)
  80ee64:	1884983a 	sll	r2,r3,r2
  80ee68:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  80ee6c:	e0800317 	ldw	r2,12(fp)
  80ee70:	1080008c 	andi	r2,r2,2
  80ee74:	1000051e 	bne	r2,zero,80ee8c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80ee78:	e0bffc17 	ldw	r2,-16(fp)
  80ee7c:	10800304 	addi	r2,r2,12
  80ee80:	1007883a 	mov	r3,r2
  80ee84:	00810004 	movi	r2,1024
  80ee88:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80ee8c:	e0bffc17 	ldw	r2,-16(fp)
  80ee90:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80ee94:	e0bffc17 	ldw	r2,-16(fp)
  80ee98:	10800204 	addi	r2,r2,8
  80ee9c:	10800037 	ldwio	r2,0(r2)
  80eea0:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80eea4:	e0bffa17 	ldw	r2,-24(fp)
  80eea8:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80eeac:	10000226 	beq	r2,zero,80eeb8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80eeb0:	e0bff717 	ldw	r2,-36(fp)
  80eeb4:	1000031e 	bne	r2,zero,80eec4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80eeb8:	e0bffa17 	ldw	r2,-24(fp)
  80eebc:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80eec0:	103ff426 	beq	r2,zero,80ee94 <__alt_mem_epcs_flash_controller_0+0xff805e94>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  80eec4:	e0bffa17 	ldw	r2,-24(fp)
  80eec8:	1080100c 	andi	r2,r2,64
  80eecc:	10001e26 	beq	r2,zero,80ef48 <alt_avalon_spi_command+0x14c>
  80eed0:	e0bff717 	ldw	r2,-36(fp)
  80eed4:	00801c0e 	bge	zero,r2,80ef48 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  80eed8:	e0bff717 	ldw	r2,-36(fp)
  80eedc:	10bfffc4 	addi	r2,r2,-1
  80eee0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  80eee4:	e0ffff17 	ldw	r3,-4(fp)
  80eee8:	e0bff817 	ldw	r2,-32(fp)
  80eeec:	18800a2e 	bgeu	r3,r2,80ef18 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  80eef0:	e0bffc17 	ldw	r2,-16(fp)
  80eef4:	10800104 	addi	r2,r2,4
  80eef8:	1009883a 	mov	r4,r2
  80eefc:	e0bfff17 	ldw	r2,-4(fp)
  80ef00:	10c00044 	addi	r3,r2,1
  80ef04:	e0ffff15 	stw	r3,-4(fp)
  80ef08:	10800003 	ldbu	r2,0(r2)
  80ef0c:	10803fcc 	andi	r2,r2,255
  80ef10:	20800035 	stwio	r2,0(r4)
  80ef14:	00000c06 	br	80ef48 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  80ef18:	e0bff517 	ldw	r2,-44(fp)
  80ef1c:	10000826 	beq	r2,zero,80ef40 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  80ef20:	e0bff517 	ldw	r2,-44(fp)
  80ef24:	10bfffc4 	addi	r2,r2,-1
  80ef28:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  80ef2c:	e0bffc17 	ldw	r2,-16(fp)
  80ef30:	10800104 	addi	r2,r2,4
  80ef34:	0007883a 	mov	r3,zero
  80ef38:	10c00035 	stwio	r3,0(r2)
  80ef3c:	00000206 	br	80ef48 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  80ef40:	00bf0004 	movi	r2,-1024
  80ef44:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  80ef48:	e0bffa17 	ldw	r2,-24(fp)
  80ef4c:	1080200c 	andi	r2,r2,128
  80ef50:	103fd026 	beq	r2,zero,80ee94 <__alt_mem_epcs_flash_controller_0+0xff805e94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80ef54:	e0bffc17 	ldw	r2,-16(fp)
  80ef58:	10800037 	ldwio	r2,0(r2)
  80ef5c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  80ef60:	e0bff617 	ldw	r2,-40(fp)
  80ef64:	10000426 	beq	r2,zero,80ef78 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  80ef68:	e0bff617 	ldw	r2,-40(fp)
  80ef6c:	10bfffc4 	addi	r2,r2,-1
  80ef70:	e0bff615 	stw	r2,-40(fp)
  80ef74:	00000506 	br	80ef8c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  80ef78:	e0800217 	ldw	r2,8(fp)
  80ef7c:	10c00044 	addi	r3,r2,1
  80ef80:	e0c00215 	stw	r3,8(fp)
  80ef84:	e0fffb17 	ldw	r3,-20(fp)
  80ef88:	10c00005 	stb	r3,0(r2)
      credits++;
  80ef8c:	e0bff717 	ldw	r2,-36(fp)
  80ef90:	10800044 	addi	r2,r2,1
  80ef94:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  80ef98:	e0bff617 	ldw	r2,-40(fp)
  80ef9c:	103fbd1e 	bne	r2,zero,80ee94 <__alt_mem_epcs_flash_controller_0+0xff805e94>
  80efa0:	e0c00217 	ldw	r3,8(fp)
  80efa4:	e0bff917 	ldw	r2,-28(fp)
  80efa8:	18bfba1e 	bne	r3,r2,80ee94 <__alt_mem_epcs_flash_controller_0+0xff805e94>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80efac:	e0bffc17 	ldw	r2,-16(fp)
  80efb0:	10800204 	addi	r2,r2,8
  80efb4:	10800037 	ldwio	r2,0(r2)
  80efb8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  80efbc:	e0bffa17 	ldw	r2,-24(fp)
  80efc0:	1080080c 	andi	r2,r2,32
  80efc4:	103ff926 	beq	r2,zero,80efac <__alt_mem_epcs_flash_controller_0+0xff805fac>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  80efc8:	e0800317 	ldw	r2,12(fp)
  80efcc:	1080004c 	andi	r2,r2,1
  80efd0:	1000041e 	bne	r2,zero,80efe4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  80efd4:	e0bffc17 	ldw	r2,-16(fp)
  80efd8:	10800304 	addi	r2,r2,12
  80efdc:	0007883a 	mov	r3,zero
  80efe0:	10c00035 	stwio	r3,0(r2)

  return read_length;
  80efe4:	e0800117 	ldw	r2,4(fp)
}
  80efe8:	e037883a 	mov	sp,fp
  80efec:	df000017 	ldw	fp,0(sp)
  80eff0:	dec00104 	addi	sp,sp,4
  80eff4:	f800283a 	ret

0080eff8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80eff8:	defffa04 	addi	sp,sp,-24
  80effc:	dfc00515 	stw	ra,20(sp)
  80f000:	df000415 	stw	fp,16(sp)
  80f004:	df000404 	addi	fp,sp,16
  80f008:	e13ffe15 	stw	r4,-8(fp)
  80f00c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80f010:	e0bfff17 	ldw	r2,-4(fp)
  80f014:	10800017 	ldw	r2,0(r2)
  80f018:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80f01c:	e13ffe17 	ldw	r4,-8(fp)
  80f020:	08002280 	call	800228 <strlen>
  80f024:	10800044 	addi	r2,r2,1
  80f028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f02c:	00000d06 	br	80f064 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80f030:	e0bffc17 	ldw	r2,-16(fp)
  80f034:	10800217 	ldw	r2,8(r2)
  80f038:	e0fffd17 	ldw	r3,-12(fp)
  80f03c:	180d883a 	mov	r6,r3
  80f040:	e17ffe17 	ldw	r5,-8(fp)
  80f044:	1009883a 	mov	r4,r2
  80f048:	080f36c0 	call	80f36c <memcmp>
  80f04c:	1000021e 	bne	r2,zero,80f058 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80f050:	e0bffc17 	ldw	r2,-16(fp)
  80f054:	00000706 	br	80f074 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80f058:	e0bffc17 	ldw	r2,-16(fp)
  80f05c:	10800017 	ldw	r2,0(r2)
  80f060:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f064:	e0fffc17 	ldw	r3,-16(fp)
  80f068:	e0bfff17 	ldw	r2,-4(fp)
  80f06c:	18bff01e 	bne	r3,r2,80f030 <__alt_mem_epcs_flash_controller_0+0xff806030>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80f070:	0005883a 	mov	r2,zero
}
  80f074:	e037883a 	mov	sp,fp
  80f078:	dfc00117 	ldw	ra,4(sp)
  80f07c:	df000017 	ldw	fp,0(sp)
  80f080:	dec00204 	addi	sp,sp,8
  80f084:	f800283a 	ret

0080f088 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f088:	defffb04 	addi	sp,sp,-20
  80f08c:	dfc00415 	stw	ra,16(sp)
  80f090:	df000315 	stw	fp,12(sp)
  80f094:	df000304 	addi	fp,sp,12
  80f098:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f09c:	d0a00417 	ldw	r2,-32752(gp)
  80f0a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f0a4:	00003106 	br	80f16c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80f0a8:	e0bffd17 	ldw	r2,-12(fp)
  80f0ac:	10800217 	ldw	r2,8(r2)
  80f0b0:	1009883a 	mov	r4,r2
  80f0b4:	08002280 	call	800228 <strlen>
  80f0b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80f0bc:	e0bffd17 	ldw	r2,-12(fp)
  80f0c0:	10c00217 	ldw	r3,8(r2)
  80f0c4:	e0bffe17 	ldw	r2,-8(fp)
  80f0c8:	10bfffc4 	addi	r2,r2,-1
  80f0cc:	1885883a 	add	r2,r3,r2
  80f0d0:	10800003 	ldbu	r2,0(r2)
  80f0d4:	10803fcc 	andi	r2,r2,255
  80f0d8:	1080201c 	xori	r2,r2,128
  80f0dc:	10bfe004 	addi	r2,r2,-128
  80f0e0:	10800bd8 	cmpnei	r2,r2,47
  80f0e4:	1000031e 	bne	r2,zero,80f0f4 <alt_find_file+0x6c>
    {
      len -= 1;
  80f0e8:	e0bffe17 	ldw	r2,-8(fp)
  80f0ec:	10bfffc4 	addi	r2,r2,-1
  80f0f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f0f4:	e0bffe17 	ldw	r2,-8(fp)
  80f0f8:	e0ffff17 	ldw	r3,-4(fp)
  80f0fc:	1885883a 	add	r2,r3,r2
  80f100:	10800003 	ldbu	r2,0(r2)
  80f104:	10803fcc 	andi	r2,r2,255
  80f108:	1080201c 	xori	r2,r2,128
  80f10c:	10bfe004 	addi	r2,r2,-128
  80f110:	10800be0 	cmpeqi	r2,r2,47
  80f114:	1000081e 	bne	r2,zero,80f138 <alt_find_file+0xb0>
  80f118:	e0bffe17 	ldw	r2,-8(fp)
  80f11c:	e0ffff17 	ldw	r3,-4(fp)
  80f120:	1885883a 	add	r2,r3,r2
  80f124:	10800003 	ldbu	r2,0(r2)
  80f128:	10803fcc 	andi	r2,r2,255
  80f12c:	1080201c 	xori	r2,r2,128
  80f130:	10bfe004 	addi	r2,r2,-128
  80f134:	10000a1e 	bne	r2,zero,80f160 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80f138:	e0bffd17 	ldw	r2,-12(fp)
  80f13c:	10800217 	ldw	r2,8(r2)
  80f140:	e0fffe17 	ldw	r3,-8(fp)
  80f144:	180d883a 	mov	r6,r3
  80f148:	e17fff17 	ldw	r5,-4(fp)
  80f14c:	1009883a 	mov	r4,r2
  80f150:	080f36c0 	call	80f36c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f154:	1000021e 	bne	r2,zero,80f160 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f158:	e0bffd17 	ldw	r2,-12(fp)
  80f15c:	00000706 	br	80f17c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80f160:	e0bffd17 	ldw	r2,-12(fp)
  80f164:	10800017 	ldw	r2,0(r2)
  80f168:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f16c:	e0fffd17 	ldw	r3,-12(fp)
  80f170:	d0a00404 	addi	r2,gp,-32752
  80f174:	18bfcc1e 	bne	r3,r2,80f0a8 <__alt_mem_epcs_flash_controller_0+0xff8060a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f178:	0005883a 	mov	r2,zero
}
  80f17c:	e037883a 	mov	sp,fp
  80f180:	dfc00117 	ldw	ra,4(sp)
  80f184:	df000017 	ldw	fp,0(sp)
  80f188:	dec00204 	addi	sp,sp,8
  80f18c:	f800283a 	ret

0080f190 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f190:	defff804 	addi	sp,sp,-32
  80f194:	dfc00715 	stw	ra,28(sp)
  80f198:	df000615 	stw	fp,24(sp)
  80f19c:	dc000515 	stw	r16,20(sp)
  80f1a0:	df000604 	addi	fp,sp,24
  80f1a4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f1a8:	00bffa04 	movi	r2,-24
  80f1ac:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  80f1b0:	d0a03317 	ldw	r2,-32564(gp)
  80f1b4:	e0bffc15 	stw	r2,-16(fp)
  80f1b8:	e03ffd0d 	sth	zero,-12(fp)
  80f1bc:	e0bffd0b 	ldhu	r2,-12(fp)
  80f1c0:	e0fffd84 	addi	r3,fp,-10
  80f1c4:	180d883a 	mov	r6,r3
  80f1c8:	100b883a 	mov	r5,r2
  80f1cc:	e13ffc17 	ldw	r4,-16(fp)
  80f1d0:	0808ff40 	call	808ff4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f1d4:	e03ffa15 	stw	zero,-24(fp)
  80f1d8:	00001d06 	br	80f250 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  80f1dc:	04002074 	movhi	r16,129
  80f1e0:	84003404 	addi	r16,r16,208
  80f1e4:	e0bffa17 	ldw	r2,-24(fp)
  80f1e8:	01400304 	movi	r5,12
  80f1ec:	1009883a 	mov	r4,r2
  80f1f0:	0802f380 	call	802f38 <__mulsi3>
  80f1f4:	8085883a 	add	r2,r16,r2
  80f1f8:	10800017 	ldw	r2,0(r2)
  80f1fc:	1000111e 	bne	r2,zero,80f244 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  80f200:	04002074 	movhi	r16,129
  80f204:	84003404 	addi	r16,r16,208
  80f208:	e0bffa17 	ldw	r2,-24(fp)
  80f20c:	01400304 	movi	r5,12
  80f210:	1009883a 	mov	r4,r2
  80f214:	0802f380 	call	802f38 <__mulsi3>
  80f218:	8085883a 	add	r2,r16,r2
  80f21c:	e0fffe17 	ldw	r3,-8(fp)
  80f220:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80f224:	d0e00817 	ldw	r3,-32736(gp)
  80f228:	e0bffa17 	ldw	r2,-24(fp)
  80f22c:	1880020e 	bge	r3,r2,80f238 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  80f230:	e0bffa17 	ldw	r2,-24(fp)
  80f234:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80f238:	e0bffa17 	ldw	r2,-24(fp)
  80f23c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  80f240:	00000606 	br	80f25c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f244:	e0bffa17 	ldw	r2,-24(fp)
  80f248:	10800044 	addi	r2,r2,1
  80f24c:	e0bffa15 	stw	r2,-24(fp)
  80f250:	e0bffa17 	ldw	r2,-24(fp)
  80f254:	10800810 	cmplti	r2,r2,32
  80f258:	103fe01e 	bne	r2,zero,80f1dc <__alt_mem_epcs_flash_controller_0+0xff8061dc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  80f25c:	d0a03317 	ldw	r2,-32564(gp)
  80f260:	1009883a 	mov	r4,r2
  80f264:	080936c0 	call	80936c <OSSemPost>

  return rc;
  80f268:	e0bffb17 	ldw	r2,-20(fp)
}
  80f26c:	e6ffff04 	addi	sp,fp,-4
  80f270:	dfc00217 	ldw	ra,8(sp)
  80f274:	df000117 	ldw	fp,4(sp)
  80f278:	dc000017 	ldw	r16,0(sp)
  80f27c:	dec00304 	addi	sp,sp,12
  80f280:	f800283a 	ret

0080f284 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80f284:	defffe04 	addi	sp,sp,-8
  80f288:	df000115 	stw	fp,4(sp)
  80f28c:	df000104 	addi	fp,sp,4
  80f290:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80f294:	e0bfff17 	ldw	r2,-4(fp)
  80f298:	10bffe84 	addi	r2,r2,-6
  80f29c:	10c00428 	cmpgeui	r3,r2,16
  80f2a0:	18001a1e 	bne	r3,zero,80f30c <alt_exception_cause_generated_bad_addr+0x88>
  80f2a4:	100690ba 	slli	r3,r2,2
  80f2a8:	00802074 	movhi	r2,129
  80f2ac:	10bcaf04 	addi	r2,r2,-3396
  80f2b0:	1885883a 	add	r2,r3,r2
  80f2b4:	10800017 	ldw	r2,0(r2)
  80f2b8:	1000683a 	jmp	r2
  80f2bc:	0080f2fc 	xorhi	r2,zero,971
  80f2c0:	0080f2fc 	xorhi	r2,zero,971
  80f2c4:	0080f30c 	andi	r2,zero,972
  80f2c8:	0080f30c 	andi	r2,zero,972
  80f2cc:	0080f30c 	andi	r2,zero,972
  80f2d0:	0080f2fc 	xorhi	r2,zero,971
  80f2d4:	0080f304 	movi	r2,972
  80f2d8:	0080f30c 	andi	r2,zero,972
  80f2dc:	0080f2fc 	xorhi	r2,zero,971
  80f2e0:	0080f2fc 	xorhi	r2,zero,971
  80f2e4:	0080f30c 	andi	r2,zero,972
  80f2e8:	0080f2fc 	xorhi	r2,zero,971
  80f2ec:	0080f304 	movi	r2,972
  80f2f0:	0080f30c 	andi	r2,zero,972
  80f2f4:	0080f30c 	andi	r2,zero,972
  80f2f8:	0080f2fc 	xorhi	r2,zero,971
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80f2fc:	00800044 	movi	r2,1
  80f300:	00000306 	br	80f310 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80f304:	0005883a 	mov	r2,zero
  80f308:	00000106 	br	80f310 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80f30c:	0005883a 	mov	r2,zero
  }
}
  80f310:	e037883a 	mov	sp,fp
  80f314:	df000017 	ldw	fp,0(sp)
  80f318:	dec00104 	addi	sp,sp,4
  80f31c:	f800283a 	ret

0080f320 <atexit>:
  80f320:	200b883a 	mov	r5,r4
  80f324:	000f883a 	mov	r7,zero
  80f328:	000d883a 	mov	r6,zero
  80f32c:	0009883a 	mov	r4,zero
  80f330:	080f3e81 	jmpi	80f3e8 <__register_exitproc>

0080f334 <exit>:
  80f334:	defffe04 	addi	sp,sp,-8
  80f338:	000b883a 	mov	r5,zero
  80f33c:	dc000015 	stw	r16,0(sp)
  80f340:	dfc00115 	stw	ra,4(sp)
  80f344:	2021883a 	mov	r16,r4
  80f348:	080f5000 	call	80f500 <__call_exitprocs>
  80f34c:	00802074 	movhi	r2,129
  80f350:	10854a04 	addi	r2,r2,5416
  80f354:	11000017 	ldw	r4,0(r2)
  80f358:	20800f17 	ldw	r2,60(r4)
  80f35c:	10000126 	beq	r2,zero,80f364 <exit+0x30>
  80f360:	103ee83a 	callr	r2
  80f364:	8009883a 	mov	r4,r16
  80f368:	080f6800 	call	80f680 <_exit>

0080f36c <memcmp>:
  80f36c:	01c000c4 	movi	r7,3
  80f370:	3980192e 	bgeu	r7,r6,80f3d8 <memcmp+0x6c>
  80f374:	2144b03a 	or	r2,r4,r5
  80f378:	11c4703a 	and	r2,r2,r7
  80f37c:	10000f26 	beq	r2,zero,80f3bc <memcmp+0x50>
  80f380:	20800003 	ldbu	r2,0(r4)
  80f384:	28c00003 	ldbu	r3,0(r5)
  80f388:	10c0151e 	bne	r2,r3,80f3e0 <memcmp+0x74>
  80f38c:	31bfff84 	addi	r6,r6,-2
  80f390:	01ffffc4 	movi	r7,-1
  80f394:	00000406 	br	80f3a8 <memcmp+0x3c>
  80f398:	20800003 	ldbu	r2,0(r4)
  80f39c:	28c00003 	ldbu	r3,0(r5)
  80f3a0:	31bfffc4 	addi	r6,r6,-1
  80f3a4:	10c00e1e 	bne	r2,r3,80f3e0 <memcmp+0x74>
  80f3a8:	21000044 	addi	r4,r4,1
  80f3ac:	29400044 	addi	r5,r5,1
  80f3b0:	31fff91e 	bne	r6,r7,80f398 <__alt_mem_epcs_flash_controller_0+0xff806398>
  80f3b4:	0005883a 	mov	r2,zero
  80f3b8:	f800283a 	ret
  80f3bc:	20c00017 	ldw	r3,0(r4)
  80f3c0:	28800017 	ldw	r2,0(r5)
  80f3c4:	18bfee1e 	bne	r3,r2,80f380 <__alt_mem_epcs_flash_controller_0+0xff806380>
  80f3c8:	31bfff04 	addi	r6,r6,-4
  80f3cc:	21000104 	addi	r4,r4,4
  80f3d0:	29400104 	addi	r5,r5,4
  80f3d4:	39bff936 	bltu	r7,r6,80f3bc <__alt_mem_epcs_flash_controller_0+0xff8063bc>
  80f3d8:	303fe91e 	bne	r6,zero,80f380 <__alt_mem_epcs_flash_controller_0+0xff806380>
  80f3dc:	003ff506 	br	80f3b4 <__alt_mem_epcs_flash_controller_0+0xff8063b4>
  80f3e0:	10c5c83a 	sub	r2,r2,r3
  80f3e4:	f800283a 	ret

0080f3e8 <__register_exitproc>:
  80f3e8:	defffa04 	addi	sp,sp,-24
  80f3ec:	dc000315 	stw	r16,12(sp)
  80f3f0:	04002074 	movhi	r16,129
  80f3f4:	84054a04 	addi	r16,r16,5416
  80f3f8:	80c00017 	ldw	r3,0(r16)
  80f3fc:	dc400415 	stw	r17,16(sp)
  80f400:	dfc00515 	stw	ra,20(sp)
  80f404:	18805217 	ldw	r2,328(r3)
  80f408:	2023883a 	mov	r17,r4
  80f40c:	10003726 	beq	r2,zero,80f4ec <__register_exitproc+0x104>
  80f410:	10c00117 	ldw	r3,4(r2)
  80f414:	010007c4 	movi	r4,31
  80f418:	20c00e16 	blt	r4,r3,80f454 <__register_exitproc+0x6c>
  80f41c:	1a000044 	addi	r8,r3,1
  80f420:	8800221e 	bne	r17,zero,80f4ac <__register_exitproc+0xc4>
  80f424:	18c00084 	addi	r3,r3,2
  80f428:	18c7883a 	add	r3,r3,r3
  80f42c:	18c7883a 	add	r3,r3,r3
  80f430:	12000115 	stw	r8,4(r2)
  80f434:	10c7883a 	add	r3,r2,r3
  80f438:	19400015 	stw	r5,0(r3)
  80f43c:	0005883a 	mov	r2,zero
  80f440:	dfc00517 	ldw	ra,20(sp)
  80f444:	dc400417 	ldw	r17,16(sp)
  80f448:	dc000317 	ldw	r16,12(sp)
  80f44c:	dec00604 	addi	sp,sp,24
  80f450:	f800283a 	ret
  80f454:	00800034 	movhi	r2,0
  80f458:	10800004 	addi	r2,r2,0
  80f45c:	10002626 	beq	r2,zero,80f4f8 <__register_exitproc+0x110>
  80f460:	01006404 	movi	r4,400
  80f464:	d9400015 	stw	r5,0(sp)
  80f468:	d9800115 	stw	r6,4(sp)
  80f46c:	d9c00215 	stw	r7,8(sp)
  80f470:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80f474:	d9400017 	ldw	r5,0(sp)
  80f478:	d9800117 	ldw	r6,4(sp)
  80f47c:	d9c00217 	ldw	r7,8(sp)
  80f480:	10001d26 	beq	r2,zero,80f4f8 <__register_exitproc+0x110>
  80f484:	81000017 	ldw	r4,0(r16)
  80f488:	10000115 	stw	zero,4(r2)
  80f48c:	02000044 	movi	r8,1
  80f490:	22405217 	ldw	r9,328(r4)
  80f494:	0007883a 	mov	r3,zero
  80f498:	12400015 	stw	r9,0(r2)
  80f49c:	20805215 	stw	r2,328(r4)
  80f4a0:	10006215 	stw	zero,392(r2)
  80f4a4:	10006315 	stw	zero,396(r2)
  80f4a8:	883fde26 	beq	r17,zero,80f424 <__alt_mem_epcs_flash_controller_0+0xff806424>
  80f4ac:	18c9883a 	add	r4,r3,r3
  80f4b0:	2109883a 	add	r4,r4,r4
  80f4b4:	1109883a 	add	r4,r2,r4
  80f4b8:	21802215 	stw	r6,136(r4)
  80f4bc:	01800044 	movi	r6,1
  80f4c0:	12406217 	ldw	r9,392(r2)
  80f4c4:	30cc983a 	sll	r6,r6,r3
  80f4c8:	4992b03a 	or	r9,r9,r6
  80f4cc:	12406215 	stw	r9,392(r2)
  80f4d0:	21c04215 	stw	r7,264(r4)
  80f4d4:	01000084 	movi	r4,2
  80f4d8:	893fd21e 	bne	r17,r4,80f424 <__alt_mem_epcs_flash_controller_0+0xff806424>
  80f4dc:	11006317 	ldw	r4,396(r2)
  80f4e0:	218cb03a 	or	r6,r4,r6
  80f4e4:	11806315 	stw	r6,396(r2)
  80f4e8:	003fce06 	br	80f424 <__alt_mem_epcs_flash_controller_0+0xff806424>
  80f4ec:	18805304 	addi	r2,r3,332
  80f4f0:	18805215 	stw	r2,328(r3)
  80f4f4:	003fc606 	br	80f410 <__alt_mem_epcs_flash_controller_0+0xff806410>
  80f4f8:	00bfffc4 	movi	r2,-1
  80f4fc:	003fd006 	br	80f440 <__alt_mem_epcs_flash_controller_0+0xff806440>

0080f500 <__call_exitprocs>:
  80f500:	defff504 	addi	sp,sp,-44
  80f504:	df000915 	stw	fp,36(sp)
  80f508:	dd400615 	stw	r21,24(sp)
  80f50c:	dc800315 	stw	r18,12(sp)
  80f510:	dfc00a15 	stw	ra,40(sp)
  80f514:	ddc00815 	stw	r23,32(sp)
  80f518:	dd800715 	stw	r22,28(sp)
  80f51c:	dd000515 	stw	r20,20(sp)
  80f520:	dcc00415 	stw	r19,16(sp)
  80f524:	dc400215 	stw	r17,8(sp)
  80f528:	dc000115 	stw	r16,4(sp)
  80f52c:	d9000015 	stw	r4,0(sp)
  80f530:	2839883a 	mov	fp,r5
  80f534:	04800044 	movi	r18,1
  80f538:	057fffc4 	movi	r21,-1
  80f53c:	00802074 	movhi	r2,129
  80f540:	10854a04 	addi	r2,r2,5416
  80f544:	12000017 	ldw	r8,0(r2)
  80f548:	45005217 	ldw	r20,328(r8)
  80f54c:	44c05204 	addi	r19,r8,328
  80f550:	a0001c26 	beq	r20,zero,80f5c4 <__call_exitprocs+0xc4>
  80f554:	a0800117 	ldw	r2,4(r20)
  80f558:	15ffffc4 	addi	r23,r2,-1
  80f55c:	b8000d16 	blt	r23,zero,80f594 <__call_exitprocs+0x94>
  80f560:	14000044 	addi	r16,r2,1
  80f564:	8421883a 	add	r16,r16,r16
  80f568:	8421883a 	add	r16,r16,r16
  80f56c:	84402004 	addi	r17,r16,128
  80f570:	a463883a 	add	r17,r20,r17
  80f574:	a421883a 	add	r16,r20,r16
  80f578:	e0001e26 	beq	fp,zero,80f5f4 <__call_exitprocs+0xf4>
  80f57c:	80804017 	ldw	r2,256(r16)
  80f580:	e0801c26 	beq	fp,r2,80f5f4 <__call_exitprocs+0xf4>
  80f584:	bdffffc4 	addi	r23,r23,-1
  80f588:	843fff04 	addi	r16,r16,-4
  80f58c:	8c7fff04 	addi	r17,r17,-4
  80f590:	bd7ff91e 	bne	r23,r21,80f578 <__alt_mem_epcs_flash_controller_0+0xff806578>
  80f594:	00800034 	movhi	r2,0
  80f598:	10800004 	addi	r2,r2,0
  80f59c:	10000926 	beq	r2,zero,80f5c4 <__call_exitprocs+0xc4>
  80f5a0:	a0800117 	ldw	r2,4(r20)
  80f5a4:	1000301e 	bne	r2,zero,80f668 <__call_exitprocs+0x168>
  80f5a8:	a0800017 	ldw	r2,0(r20)
  80f5ac:	10003226 	beq	r2,zero,80f678 <__call_exitprocs+0x178>
  80f5b0:	a009883a 	mov	r4,r20
  80f5b4:	98800015 	stw	r2,0(r19)
  80f5b8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80f5bc:	9d000017 	ldw	r20,0(r19)
  80f5c0:	a03fe41e 	bne	r20,zero,80f554 <__alt_mem_epcs_flash_controller_0+0xff806554>
  80f5c4:	dfc00a17 	ldw	ra,40(sp)
  80f5c8:	df000917 	ldw	fp,36(sp)
  80f5cc:	ddc00817 	ldw	r23,32(sp)
  80f5d0:	dd800717 	ldw	r22,28(sp)
  80f5d4:	dd400617 	ldw	r21,24(sp)
  80f5d8:	dd000517 	ldw	r20,20(sp)
  80f5dc:	dcc00417 	ldw	r19,16(sp)
  80f5e0:	dc800317 	ldw	r18,12(sp)
  80f5e4:	dc400217 	ldw	r17,8(sp)
  80f5e8:	dc000117 	ldw	r16,4(sp)
  80f5ec:	dec00b04 	addi	sp,sp,44
  80f5f0:	f800283a 	ret
  80f5f4:	a0800117 	ldw	r2,4(r20)
  80f5f8:	80c00017 	ldw	r3,0(r16)
  80f5fc:	10bfffc4 	addi	r2,r2,-1
  80f600:	15c01426 	beq	r2,r23,80f654 <__call_exitprocs+0x154>
  80f604:	80000015 	stw	zero,0(r16)
  80f608:	183fde26 	beq	r3,zero,80f584 <__alt_mem_epcs_flash_controller_0+0xff806584>
  80f60c:	95c8983a 	sll	r4,r18,r23
  80f610:	a0806217 	ldw	r2,392(r20)
  80f614:	a5800117 	ldw	r22,4(r20)
  80f618:	2084703a 	and	r2,r4,r2
  80f61c:	10000b26 	beq	r2,zero,80f64c <__call_exitprocs+0x14c>
  80f620:	a0806317 	ldw	r2,396(r20)
  80f624:	2088703a 	and	r4,r4,r2
  80f628:	20000c1e 	bne	r4,zero,80f65c <__call_exitprocs+0x15c>
  80f62c:	89400017 	ldw	r5,0(r17)
  80f630:	d9000017 	ldw	r4,0(sp)
  80f634:	183ee83a 	callr	r3
  80f638:	a0800117 	ldw	r2,4(r20)
  80f63c:	15bfbf1e 	bne	r2,r22,80f53c <__alt_mem_epcs_flash_controller_0+0xff80653c>
  80f640:	98800017 	ldw	r2,0(r19)
  80f644:	153fcf26 	beq	r2,r20,80f584 <__alt_mem_epcs_flash_controller_0+0xff806584>
  80f648:	003fbc06 	br	80f53c <__alt_mem_epcs_flash_controller_0+0xff80653c>
  80f64c:	183ee83a 	callr	r3
  80f650:	003ff906 	br	80f638 <__alt_mem_epcs_flash_controller_0+0xff806638>
  80f654:	a5c00115 	stw	r23,4(r20)
  80f658:	003feb06 	br	80f608 <__alt_mem_epcs_flash_controller_0+0xff806608>
  80f65c:	89000017 	ldw	r4,0(r17)
  80f660:	183ee83a 	callr	r3
  80f664:	003ff406 	br	80f638 <__alt_mem_epcs_flash_controller_0+0xff806638>
  80f668:	a0800017 	ldw	r2,0(r20)
  80f66c:	a027883a 	mov	r19,r20
  80f670:	1029883a 	mov	r20,r2
  80f674:	003fb606 	br	80f550 <__alt_mem_epcs_flash_controller_0+0xff806550>
  80f678:	0005883a 	mov	r2,zero
  80f67c:	003ffb06 	br	80f66c <__alt_mem_epcs_flash_controller_0+0xff80666c>

0080f680 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f680:	defffd04 	addi	sp,sp,-12
  80f684:	df000215 	stw	fp,8(sp)
  80f688:	df000204 	addi	fp,sp,8
  80f68c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80f690:	d0203b45 	stb	zero,-32531(gp)
  80f694:	e0bfff17 	ldw	r2,-4(fp)
  80f698:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80f69c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f6a0:	10000226 	beq	r2,zero,80f6ac <_exit+0x2c>
    ALT_SIM_FAIL();
  80f6a4:	002af070 	cmpltui	zero,zero,43969
  80f6a8:	00000106 	br	80f6b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80f6ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f6b0:	003fff06 	br	80f6b0 <__alt_mem_epcs_flash_controller_0+0xff8066b0>
