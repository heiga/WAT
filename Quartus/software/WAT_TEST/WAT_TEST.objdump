
WAT_TEST.elf:     file format elf32-littlenios2
WAT_TEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0001c2a0 memsz 0x00025eb8 flags rwx
    LOAD off    0x0001e020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x0001f000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  0001e020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019d9c  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006ac  00819d9c  00819d9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e58  0081a448  0081a448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009c18  0081c2a0  0081c2a0  0001d2a0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  00825eb8  00825eb8  0001f000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  0001f000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  0001f000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001110  00000000  00000000  0001f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002ffda  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000b7c9  00000000  00000000  00050112  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ece7  00000000  00000000  0005b8db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003740  00000000  00000000  0006a5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000522d  00000000  00000000  0006dd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001786c  00000000  00000000  00072f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0008a7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000018b0  00000000  00000000  0008a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  0009139a  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000913a0  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000913ac  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000913ad  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000913ae  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000913b2  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000913b6  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  000913ba  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  000913c5  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  000913d0  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  000913db  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  000913e9  2**0
                  CONTENTS, READONLY
 31 .jdi          0000448f  00000000  00000000  000913f7  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00096f3e  00000000  00000000  00095886  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
00819d9c l    d  .rodata	00000000 .rodata
0081a448 l    d  .rwdata	00000000 .rwdata
0081c2a0 l    d  .bss	00000000 .bss
00825eb8 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera_test.c
0081c16c l     O .rwdata	00000006 CAM_SYNC
0081c174 l     O .rwdata	00000004 CAM_INIT
0081c178 l     O .rwdata	00000004 CAM_SIZE
0081c17c l     O .rwdata	00000004 CAM_SNAP
0081c180 l     O .rwdata	00000004 CAM_GRAB
0081c184 l     O .rwdata	00000004 CAM_DATA
0081c188 l     O .rwdata	00000006 CAM_ACK_SYNC
0081c190 l     O .rwdata	00000004 CAM_ACK_INIT
0081c194 l     O .rwdata	00000004 CAM_ACK_SIZE
0081c198 l     O .rwdata	00000004 CAM_ACK_SNAP
0081c19c l     O .rwdata	00000004 CAM_ACK_GRAB
0081c1a0 l     O .rwdata	00000004 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 motor_test.c
00000000 l    df *ABS*	00000000 wat_main_test.c
0081c1a4 l     O .rwdata	00000006 CAM_SYNC
0081c1ac l     O .rwdata	00000004 CAM_INIT
0081c1b0 l     O .rwdata	00000004 CAM_SIZE
0081c1b4 l     O .rwdata	00000004 CAM_SNAP
0081c1b8 l     O .rwdata	00000004 CAM_GRAB
0081c1bc l     O .rwdata	00000004 CAM_DATA
0081c1c0 l     O .rwdata	00000006 CAM_ACK_SYNC
0081c1c8 l     O .rwdata	00000004 CAM_ACK_INIT
0081c1cc l     O .rwdata	00000004 CAM_ACK_SIZE
0081c1d0 l     O .rwdata	00000004 CAM_ACK_SNAP
0081c1d4 l     O .rwdata	00000004 CAM_ACK_GRAB
0081c1d8 l     O .rwdata	00000004 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 wifi_test.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081a02a l     O .rodata	00000010 zeroes.4404
00802bd8 l     F .text	000000bc __sbprintf
0081a03a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802de8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804940 l     F .text	00000008 __fp_unlock
00804954 l     F .text	0000019c __sinit.part.1
00804af0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081a448 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0081a88c l     O .rwdata	00000020 lc_ctype_charset
0081a86c l     O .rwdata	00000020 lc_message_charset
0081a8ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081a06c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00807fc4 l     F .text	000000fc __sprint_r.part.0
0081a190 l     O .rodata	00000010 zeroes.4349
00809600 l     F .text	000000bc __sbprintf
0081a1a0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d75c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d788 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080db1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080dc04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ddd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081c210 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080e04c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081c214 l     O .rwdata	00000004 lockid
0081c2e8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081c218 l     O .rwdata	00000004 lockid
0081c2f0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080fa84 l     F .text	00000048 OS_InitMisc
0080facc l     F .text	0000006c OS_InitRdyList
0080fc38 l     F .text	000000e4 OS_InitTCBList
0080f9a4 l     F .text	000000e0 OS_InitEventList
0080fb38 l     F .text	00000080 OS_InitTaskIdle
0080fbb8 l     F .text	00000080 OS_InitTaskStat
0080fea8 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00811bb8 l     F .text	000000f4 OS_FlagTaskRdy
00811978 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815c90 l     F .text	00000034 alt_dev_reg
0081ae94 l     O .rwdata	000000cc epcs_flash_controller_0
0081af60 l     O .rwdata	0000106c jtag_uart_0
0081bfcc l     O .rwdata	000000d0 cam_uart
0081c09c l     O .rwdata	000000d0 wifi_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00815dac l     F .text	00000034 alt_flash_device_register
00815e34 l     F .text	000003f8 alt_epcs_flash_query
0081622c l     F .text	000000ec alt_epcs_flash_memcmp
00816604 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00816b54 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00816df8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008175d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00817938 l     F .text	0000009c altera_avalon_uart_irq
008179d4 l     F .text	00000138 altera_avalon_uart_rxirq
00817b0c l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00817d04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00817fa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00818278 l     F .text	00000038 epcs_test_wip
008182b0 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00818984 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00818c7c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00818ddc l     F .text	0000003c alt_get_errno
00818e18 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081c348 g     O .bss	00000004 alt_instruction_exception_handler
00807608 g     F .text	00000074 _mprec_log10
0081c266 g     O .rwdata	00000002 OSTaskNameSize
00816578 g     F .text	0000008c alt_epcs_flash_get_info
008076f4 g     F .text	0000008c __any_on
00809bb4 g     F .text	00000054 _isatty_r
0081a078 g     O .rodata	00000028 __mprec_tinytens
0080dd1c g     F .text	000000bc alt_main
00800774 g     F .text	000000c0 _puts_r
00822b94 g     O .bss	00000100 alt_irq
00809c08 g     F .text	00000060 _lseek_r
008123d8 g     F .text	000000d8 OS_MemInit
00815c30 g     F .text	00000060 OSTimeSet
0080c020 g     F .text	00000088 .hidden __eqdf2
0080e6f8 g     F .text	00000610 OSEventPendMulti
00825eb8 g       *ABS*	00000000 __alt_heap_start
00819454 g     F .text	00000024 OSTaskCreateHook
00800738 g     F .text	0000003c printf
0081c23e g     O .rwdata	00000002 OSMboxEn
0080ed60 g     F .text	0000004c OSIntEnter
00809e20 g     F .text	0000009c _wcrtomb_r
00807e84 g     F .text	0000005c __sseek
00804ca0 g     F .text	00000010 __sinit
00809cc8 g     F .text	00000140 __swbuf_r
0081c24e g     O .rwdata	00000002 OSQEn
00805774 g     F .text	0000007c _setlocale_r
00804af8 g     F .text	00000078 __sfmoreglue
0080e3cc g     F .text	000000cc __malloc_unlock
008194bc g     F .text	00000020 OSTaskStatHook
0081c2f8 g     O .bss	00000001 OSLockNesting
0081c28c g     O .rwdata	00000002 OSDataSize
0081c2f9 g     O .bss	00000001 OSRunning
0081cb94 g     O .bss	00002000 motor_test_stk
00806444 g     F .text	0000015c memmove
008194fc g     F .text	00000020 OSInitHookBegin
0081c284 g     O .rwdata	00000002 OSTmrSize
00804c88 g     F .text	00000018 _cleanup
008066c8 g     F .text	000000a8 _Balloc
0081c2fc g     O .bss	00000004 OSIdleCtr
0081c37c g     O .bss	00000800 camPackageBuffer
0080c0a8 g     F .text	000000dc .hidden __gtdf2
00819204 g     F .text	00000024 altera_nios2_gen2_irq_init
008192d4 g       .text	00000000 OSStartTsk
008101d8 g     F .text	000002d4 OS_TCBInit
008182ec g     F .text	000000fc epcs_sector_erase
01009000 g     F .entry	00000000 __reset
0081c28a g     O .rwdata	00000002 OSTmrWheelTblSize
0081c22a g     O .rwdata	00000002 OSEventSize
0081c300 g     O .bss	00000001 OSPrioHighRdy
00809b58 g     F .text	0000005c _fstat_r
0081cb7c g     O .bss	00000018 camCommandBuffer
00819478 g     F .text	00000024 OSTaskDelHook
0081c2d0 g     O .bss	00000004 errno
00807e00 g     F .text	00000008 __seofread
008192b4 g       .text	00000000 OSStartHighRdy
008146b0 g     F .text	000001e4 OSTaskCreateExt
008114c0 g     F .text	00000060 OSFlagPendGetFlagsRdy
0081c26a g     O .rwdata	00000002 OSTaskStatStkSize
0081063c g     F .text	00000308 OSFlagAccept
00812a1c g     F .text	000000b8 OSQFlush
008124b0 g     F .text	00000140 OSQAccept
0081c2e0 g     O .bss	00000004 alt_argv
0082416c g       *ABS*	00000000 _gp
00814504 g     F .text	000001ac OSTaskCreate
00814014 g     F .text	000004f0 OSTaskChangePrio
0081c2f4 g     O .bss	00000004 alt_heapsem
008104ac g     F .text	00000190 OSDebugInit
00814894 g     F .text	00000344 OSTaskDel
0081ad14 g     O .rwdata	00000180 alt_fd_list
00822c94 g     O .bss	00000370 OSFlagTbl
0080f784 g     F .text	000000b8 OS_EventTaskRemove
00818530 g     F .text	0000006c epcs_write_status_register
0081977c g     F .text	00000090 alt_find_dev
008062fc g     F .text	00000148 memcpy
0081c254 g     O .rwdata	00000002 OSRdyTblSize
00804948 g     F .text	0000000c _cleanup_r
0080d460 g     F .text	000000dc .hidden __floatsidf
00818d60 g     F .text	0000007c alt_io_redirect
0080c184 g     F .text	000000f4 .hidden __ltdf2
00819d9c g       *ABS*	00000000 __DTOR_END__
00800834 g     F .text	00000014 puts
00818be0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080e498 g     F .text	00000120 OSEventNameGet
0081c238 g     O .rwdata	00000002 OSFlagMax
00816710 g     F .text	00000100 alt_epcs_flash_write_block
00807ce4 g     F .text	00000074 __fpclassifyd
00807564 g     F .text	000000a4 __ratio
0080edac g     F .text	000000f8 OSIntExit
008095e4 g     F .text	0000001c __vfiprintf_internal
0081c272 g     O .rwdata	00000002 OSTCBSize
0081c301 g     O .bss	00000001 OSPrioCur
00817054 g     F .text	000002bc altera_avalon_jtag_uart_read
00800708 g     F .text	00000030 _printf_r
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080acc0 g     F .text	00000064 .hidden __udivsi3
0080db58 g     F .text	000000ac isatty
0081c258 g     O .rwdata	00000002 OSStkWidth
0081a0c8 g     O .rodata	000000c8 __mprec_tens
0081c24c g     O .rwdata	00000002 OSPtrSize
008057f0 g     F .text	0000000c __locale_charset
0081c22c g     O .rwdata	00000002 OSEventTblSize
00819228 g       .text	00000000 OSCtxSw
0081c2cc g     O .bss	00000004 __malloc_top_pad
0081c304 g     O .bss	00000004 OSTCBList
0081c2d4 g     O .bss	00000004 alt_fd_list_lock
0081c1e4 g     O .rwdata	00000004 __mb_cur_max
00805820 g     F .text	0000000c _localeconv_r
00806afc g     F .text	0000003c __i2b
00805124 g     F .text	000004c8 __sfvwrite_r
00823004 g     O .bss	00000c30 OSMemTbl
0081c308 g     O .bss	00000001 OSTickStepState
00807d58 g     F .text	00000054 _sbrk_r
0081c250 g     O .rwdata	00000002 OSQMax
00823c34 g     O .bss	00000800 OSTaskStatStk
00812014 g     F .text	000000f0 OSMemNameGet
0081c230 g     O .rwdata	00000002 OSFlagEn
00809c68 g     F .text	00000060 _read_r
0081c276 g     O .rwdata	00000002 OSTimeTickHookEn
00811cac g     F .text	000000a4 OS_FlagUnlink
00812ecc g     F .text	00000168 OSQPost
0081c204 g     O .rwdata	00000004 alt_max_fd
0080fd70 g     F .text	00000068 OS_MemCopy
0080fdd8 g     F .text	000000d0 OS_Sched
0080984c g     F .text	000000f0 _fclose_r
00811f24 g     F .text	000000f0 OSMemGet
00814ec0 g     F .text	000001b4 OSTaskNameSet
00804910 g     F .text	00000030 fflush
0081c2c8 g     O .bss	00000004 __malloc_max_sbrked_mem
0081c30c g     O .bss	00000004 OSCtxSwCtr
008194dc g     F .text	00000020 OSTimeTickHook
0081c23a g     O .rwdata	00000002 OSFlagNameSize
0080f83c g     F .text	00000100 OS_EventTaskRemoveMulti
0080ada4 g     F .text	000008ac .hidden __adddf3
0080f634 g     F .text	00000150 OS_EventTaskWaitMulti
00816698 g     F .text	00000078 alt_epcs_flash_erase_block
0080730c g     F .text	0000010c __b2d
0081c252 g     O .rwdata	00000002 OSQSize
0080a604 g     F .text	000005c4 .hidden __umoddi3
0080dc40 g     F .text	000000dc lseek
0081397c g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0081c1dc g     O .rwdata	00000004 _global_impure_ptr
008187fc g     F .text	0000005c epcs_exit_4_bytes_mode
00807780 g     F .text	00000564 _realloc_r
0081c23c g     O .rwdata	00000002 OSLowestPrio
00825eb8 g       *ABS*	00000000 __bss_end
0080da2c g     F .text	000000f0 alt_iic_isr_register
0081955c g     F .text	00000024 OSTCBInitHook
0081c282 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
008190fc g     F .text	00000108 alt_tick
0080a008 g     F .text	000005fc .hidden __udivdi3
00809ab4 g     F .text	00000024 _fputwc_r
0081c224 g     O .rwdata	00000002 OSEventEn
0081a0a0 g     O .rodata	00000028 __mprec_bigtens
008068e0 g     F .text	00000104 __s2b
0081c27e g     O .rwdata	00000002 OSTmrCfgNameSize
0080d53c g     F .text	000000a8 .hidden __floatunsidf
0080704c g     F .text	00000060 __mcmp
008177d8 g     F .text	00000160 altera_avalon_uart_init
00804cc0 g     F .text	00000018 __fp_lock_all
0080d9e0 g     F .text	0000004c alt_ic_irq_enabled
0081c2a0 g     O .bss	00000001 useData
00811ad8 g     F .text	000000e0 OS_FlagInit
00819060 g     F .text	0000009c alt_alarm_stop
0081c260 g     O .rwdata	00000002 OSTaskIdleStkSize
0081c2d8 g     O .bss	00000004 alt_irq_active
008135b4 g     F .text	000000b0 OSSemAccept
00812218 g     F .text	000000d8 OSMemPut
00811d50 g     F .text	000001d4 OSMemCreate
0081c310 g     O .bss	00000004 OSIdleCtrMax
010040fc g     F .exceptions	000000d4 alt_irq_handler
0081acec g     O .rwdata	00000028 alt_dev_null
0081c274 g     O .rwdata	00000002 OSTicksPerSec
00819228 g       .text	00000000 OSIntCtxSw
008069e4 g     F .text	00000068 __hi0bits
0080d3e0 g     F .text	00000080 .hidden __fixdfsi
0081c314 g     O .bss	00000004 OSTCBFreeList
00813b88 g     F .text	0000016c OSSemPendAbort
0081c1fc g     O .rwdata	00000008 alt_dev_list
0080e088 g     F .text	00000100 write
0081c278 g     O .rwdata	00000002 OSVersionNbr
0080d7c4 g     F .text	000000b8 fstat
0080c184 g     F .text	000000f4 .hidden __ledf2
008002ac g     F .text	0000011c motor_test
0081c220 g     O .rwdata	00000004 OSEndiannessTest
00806dc4 g     F .text	00000140 __pow5mult
008080d8 g     F .text	0000150c ___vfiprintf_internal_r
0081c2c0 g     O .bss	00000004 __nlocale_changed
0080ad24 g     F .text	00000058 .hidden __umodsi3
008186b8 g     F .text	00000068 epcs_read_electronic_signature
0081c232 g     O .rwdata	00000002 OSFlagGrpSize
00825eb8 g       *ABS*	00000000 end
0081c2a4 g     O .bss	00000004 camQueueStatus
00817fe4 g     F .text	00000238 altera_avalon_uart_write
00816a0c g     F .text	00000148 altera_avalon_jtag_uart_init
00810040 g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0081c2b0 g     O .bss	00000004 SENSOR_SEM
00819d9c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081764c g     F .text	0000007c alt_avalon_timer_sc_init
00817728 g     F .text	00000060 altera_avalon_uart_write_fd
0080d5e4 g     F .text	00000064 .hidden __clzsi2
00817788 g     F .text	00000050 altera_avalon_uart_close_fd
00817310 g     F .text	000002c4 altera_avalon_jtag_uart_write
00804cb0 g     F .text	00000004 __sfp_lock_acquire
00806218 g     F .text	000000e4 memchr
0080fd1c g     F .text	00000054 OS_MemClr
008008e0 g     F .text	000022dc ___vfprintf_internal_r
008192f8 g     F .text	0000015c OSTaskStkInit
00804e14 g     F .text	00000310 _free_r
008057fc g     F .text	00000010 __locale_mb_cur_max
0080f38c g     F .text	00000198 OS_EventTaskRdy
00819be8 g     F .text	00000180 __call_exitprocs
0081c318 g     O .bss	00000001 OSCPUUsage
0081c2bc g     O .bss	00000004 __mlocale_changed
0081c1e8 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
0081c34c g     O .bss	00000004 _alt_tick_rate
00812ad4 g     F .text	0000028c OSQPend
00800038 g     F .text	000001e4 camera_test
00815780 g     F .text	00000104 OSTimeDly
00806f04 g     F .text	00000148 __lshift
00819580 g     F .text	000001fc alt_avalon_spi_command
0081c350 g     O .bss	00000004 _alt_nticks
0080de14 g     F .text	00000104 read
00815cfc g     F .text	000000b0 alt_sys_init
00819ad0 g     F .text	00000118 __register_exitproc
0081c319 g     O .bss	00000001 OSTaskCtr
00815884 g     F .text	0000017c OSTimeDlyHMSM
00806b38 g     F .text	0000028c __multiply
00816efc g     F .text	00000068 altera_avalon_jtag_uart_close
0080ad7c g     F .text	00000028 .hidden __mulsi3
0081c354 g     O .bss	00000028 __malloc_current_mallinfo
0081c226 g     O .rwdata	00000002 OSEventMax
00807418 g     F .text	0000014c __d2b
00813cf4 g     F .text	00000110 OSSemPost
0081eb94 g     O .bss	00002000 wifi_test_stk
0081821c g     F .text	0000005c epcs_read_status_register
0080ef30 g     F .text	000000dc OSSchedUnlock
0081c2a8 g     O .bss	00000004 camCommandQueue
008168a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00819914 g     F .text	000000f4 alt_get_fd
0081c31c g     O .bss	00000004 OSMemFreeList
0080f07c g     F .text	000000b0 OSStatInit
008118b4 g     F .text	000000c4 OSFlagQuery
0081c25c g     O .rwdata	00000002 OSTaskCreateExtEn
0080971c g     F .text	00000054 _close_r
00818720 g     F .text	00000080 epcs_read_device_id
00819a54 g     F .text	0000007c memcmp
0080f36c g     F .text	00000020 OS_Dummy
00816968 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00825eb8 g       *ABS*	00000000 __alt_stack_base
008169b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00802c94 g     F .text	00000154 __swsetup_r
00824434 g     O .bss	000001e0 OSQTbl
0080b650 g     F .text	000009d0 .hidden __divdf3
00804b70 g     F .text	00000118 __sfp
0080767c g     F .text	00000078 __copybits
0081a8e4 g     O .rwdata	00000408 __malloc_av_
00804cbc g     F .text	00000004 __sinit_lock_release
0081c320 g     O .bss	00000004 OSTCBHighRdy
0080c278 g     F .text	0000086c .hidden __muldf3
00807dac g     F .text	00000054 __sread
0081c324 g     O .bss	00000004 OSQFreeList
0081980c g     F .text	00000108 alt_find_file
008189c0 g     F .text	000000a4 alt_dev_llist_insert
0080e2ac g     F .text	00000120 __malloc_lock
0080df9c g     F .text	000000b0 sbrk
0080e5b8 g     F .text	00000140 OSEventNameSet
008048b4 g     F .text	0000005c _fflush_r
00809770 g     F .text	000000dc _calloc_r
0081c328 g     O .bss	00000001 OSRdyGrp
0081c290 g     O .rwdata	00000008 alt_flash_dev_list
0081c2a0 g       *ABS*	00000000 __bss_start
008065a0 g     F .text	00000128 memset
0080042c g     F .text	0000022c main
0081c2e4 g     O .bss	00000004 alt_envp
0081c2c4 g     O .bss	00000004 __malloc_max_total_mem
00816908 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809e08 g     F .text	00000018 __swbuf
0081a2d0 g     O .rodata	00000100 OSUnMapTbl
0081c256 g     O .rwdata	00000002 OSSemEn
00811520 g     F .text	00000394 OSFlagPost
00807ee0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080993c g     F .text	00000014 fclose
0080f524 g     F .text	00000110 OS_EventTaskWait
0081010c g     F .text	000000cc OS_TaskStatStkChk
00814bd8 g     F .text	00000150 OSTaskDelReq
00803010 g     F .text	00001688 _dtoa_r
00805a0c g     F .text	0000080c _malloc_r
00809f7c g     F .text	00000030 __ascii_wctomb
0081c208 g     O .rwdata	00000004 alt_errno
0080f00c g     F .text	00000070 OSStart
0080e24c g     F .text	00000060 __env_unlock
008055ec g     F .text	000000c4 _fwalk
00815074 g     F .text	000001d4 OSTaskResume
008122f0 g     F .text	000000e8 OSMemQuery
0081c268 g     O .rwdata	00000002 OSTaskStatEn
0081c242 g     O .rwdata	00000002 OSMemMax
00813034 g     F .text	00000170 OSQPostFront
0080abc8 g     F .text	00000084 .hidden __divsi3
0081c329 g     O .bss	00000003 OSRdyTbl
0081c21c g     O .rwdata	00000002 OSDebugEn
00804cf0 g     F .text	00000124 _malloc_trim_r
00819d9c g       *ABS*	00000000 __CTOR_END__
0081c234 g     O .rwdata	00000002 OSFlagNodeSize
0081c27c g     O .rwdata	00000002 OSTmrCfgMax
00816318 g     F .text	00000260 alt_epcs_flash_write
00807ee8 g     F .text	000000dc strcmp
008125f0 g     F .text	000001ac OSQCreate
00814d28 g     F .text	00000198 OSTaskNameGet
008131a4 g     F .text	0000020c OSQPostOpt
0080f12c g     F .text	00000220 OSTimeTick
0081c2ac g     O .bss	00000004 camPackageQueue
0081c264 g     O .rwdata	00000002 OSTaskMax
00819d9c g       *ABS*	00000000 __DTOR_LIST__
00813664 g     F .text	000000d8 OSSemCreate
0081c288 g     O .rwdata	00000002 OSTmrWheelSize
0080c020 g     F .text	00000088 .hidden __nedf2
0081c25e g     O .rwdata	00000002 OSTaskDelEn
00813e04 g     F .text	00000110 OSSemQuery
0081279c g     F .text	00000280 OSQDel
00812d60 g     F .text	0000016c OSQPendAbort
00815cc4 g     F .text	00000038 alt_irq_init
0080df18 g     F .text	00000084 alt_release_fd
0081a1b0 g     O .rodata	00000100 .hidden __clz_tab
0081c2b8 g     O .bss	00000004 _PathLocale
00819a08 g     F .text	00000014 atexit
008096bc g     F .text	00000060 _write_r
0080eea4 g     F .text	0000008c OSSchedLock
0080582c g     F .text	00000018 setlocale
008003c8 g     F .text	00000064 sensor_interrupt
00810944 g     F .text	00000108 OSFlagCreate
0081c1e0 g     O .rwdata	00000004 _impure_ptr
0081c2dc g     O .bss	00000004 alt_argc
00804698 g     F .text	0000021c __sflush_r
00818ac4 g     F .text	00000060 _do_dtors
00805818 g     F .text	00000008 __locale_cjk_lang
0081c22e g     O .rwdata	00000002 OSEventMultiEn
00810a4c g     F .text	00000248 OSFlagDel
0081c32c g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
008072a8 g     F .text	00000064 __ulp
00810f08 g     F .text	000005b8 OSFlagPend
0081c27a g     O .rwdata	00000002 OSTmrEn
00804cd8 g     F .text	00000018 __fp_unlock_all
00820b94 g     O .bss	00002000 camera_test_stk
0081c1f4 g     O .rwdata	00000008 alt_fs_list
0080ff1c g     F .text	00000074 OS_StrCopy
0081c244 g     O .rwdata	00000002 OSMemNameSize
0081951c g     F .text	00000020 OSInitHookEnd
0081c270 g     O .rwdata	00000002 OSTCBPrioTblMax
00805844 g     F .text	0000000c localeconv
008183e8 g     F .text	000000f4 epcs_read_buffer
0081c26c g     O .rwdata	00000002 OSTaskStatStkChkEn
00815de0 g     F .text	00000054 alt_epcs_flash_init
0080d87c g     F .text	00000050 alt_ic_isr_register
0081c240 g     O .rwdata	00000002 OSMemEn
0081c24a g     O .rwdata	00000002 OSMutexEn
0081c2a0 g       *ABS*	00000000 _edata
008176c8 g     F .text	00000060 altera_avalon_uart_read_fd
00800690 g     F .text	00000078 button_interrupt
00825eb8 g       *ABS*	00000000 _end
00818b24 g     F .text	00000068 alt_flash_open_dev
0081c330 g     O .bss	00000001 OSIntNesting
00809950 g     F .text	00000164 __fputwc
00816f64 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00815a00 g     F .text	000001d4 OSTimeDlyResume
00810dbc g     F .text	0000014c OSFlagNameSet
00815248 g     F .text	000001c0 OSTaskStkChk
0080d954 g     F .text	0000008c alt_ic_irq_disable
008187a0 g     F .text	0000005c epcs_enter_4_bytes_mode
0081c246 g     O .rwdata	00000002 OSMemSize
00807e08 g     F .text	0000007c __swrite
0081c1ec g     O .rwdata	00000004 __malloc_trim_threshold
0080580c g     F .text	0000000c __locale_msgcharset
0081c334 g     O .bss	00000004 OSTCBCur
00819a1c g     F .text	00000038 exit
0081c248 g     O .rwdata	00000002 OSMemTblSize
008056b0 g     F .text	000000c4 _fwalk_reent
008070ac g     F .text	000001fc __mdiff
00818b8c g     F .text	00000054 alt_flash_close_dev
0080ac4c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00804cb4 g     F .text	00000004 __sfp_lock_release
0081c2b4 g     O .bss	00000004 BUTTON_SEM
0080ed08 g     F .text	00000058 OSInit
008155ec g     F .text	00000124 OSTaskQuery
0081350c g     F .text	000000a8 OS_QInit
0080ff90 g     F .text	00000054 OS_StrLen
00812104 g     F .text	00000114 OSMemNameSet
0081c262 g     O .rwdata	00000002 OSTaskProfileEn
0081c338 g     O .bss	00000004 OSTime
00817cb0 g     F .text	00000054 altera_avalon_uart_close
00824614 g     O .bss	00000800 OSTaskIdleStk
00819d68 g     F .text	00000034 _exit
00818858 g     F .text	0000012c alt_alarm_start
00810c94 g     F .text	00000128 OSFlagNameGet
00815bd4 g     F .text	0000005c OSTimeGet
00805850 g     F .text	000001bc __smakebuf_r
00800848 g     F .text	00000098 strlen
008184dc g     F .text	00000054 epcs_write_enable
0081949c g     F .text	00000020 OSTaskSwHook
00818f04 g     F .text	0000015c open
00824e14 g     O .bss	00000b40 OSEventTbl
0080c0a8 g     F .text	000000dc .hidden __gedf2
00825954 g     O .bss	00000510 OSTCBTbl
00813f14 g     F .text	00000100 OSSemSet
0081c1f0 g     O .rwdata	00000004 __wctomb
008080c0 g     F .text	00000018 __sprint_r
0081c20c g     O .rwdata	00000004 alt_priority_mask
0081373c g     F .text	00000240 OSSemDel
0081c33c g     O .bss	00000004 OSFlagFreeList
0080d8cc g     F .text	00000088 alt_ic_irq_enable
0081c228 g     O .rwdata	00000002 OSEventNameSize
00802bbc g     F .text	0000001c __vfprintf_internal
0081c340 g     O .bss	00000001 OSStatRdy
00800658 g     F .text	00000038 wifi_test
00825e64 g     O .bss	00000054 OSTCBPrioTbl
00817d40 g     F .text	00000268 altera_avalon_uart_read
00809fac g     F .text	0000005c _wctomb_r
0080e188 g     F .text	000000c4 __env_lock
0081c26e g     O .rwdata	00000002 OSTaskSwHookEn
0080cae4 g     F .text	000008fc .hidden __subdf3
00816810 g     F .text	00000098 alt_epcs_flash_read
00806a4c g     F .text	000000b0 __lo0bits
0081c298 g     O .rwdata	00000008 alt_alarm_list
0081c236 g     O .rwdata	00000002 OSFlagWidth
00818a64 g     F .text	00000060 _do_ctors
00809ebc g     F .text	000000c0 wcrtomb
0080d684 g     F .text	000000d8 close
0080021c g     F .text	00000090 cam_uart_interrupt
0081c2ec g     O .bss	00000004 alt_envsem
0081c344 g     O .bss	00000004 OSIdleCtrRun
0080f34c g     F .text	00000020 OSVersion
0081c280 g     O .rwdata	00000002 OSTmrCfgWheelSize
00815710 g     F .text	00000070 OS_TaskStkClr
0081c25a g     O .rwdata	00000002 OSTaskCreateEn
0080f93c g     F .text	00000068 OS_EventWaitListInit
00809ad8 g     F .text	00000080 fputwc
0081953c g     F .text	00000020 OSTaskIdleHook
00804cb8 g     F .text	00000004 __sinit_lock_acquire
0081859c g     F .text	0000011c epcs_write_buffer
00806798 g     F .text	00000148 __multadd
00815408 g     F .text	000001e4 OSTaskSuspend
00806770 g     F .text	00000028 _Bfree
0080ffe4 g     F .text	0000005c OS_TaskIdle
0081c286 g     O .rwdata	00000002 OSTmrTblSize
008133b0 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	080ed600 	call	80ed60 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	008020b4 	movhi	r2,130
 1004140:	108ae504 	addi	r2,r2,11156
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	008020b4 	movhi	r2,130
 1004158:	108ae504 	addi	r2,r2,11156
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	080edac0 	call	80edac <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a07717 	ldw	r2,-32292(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a07717 	ldw	r2,-32292(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  80000c:	d6905b14 	ori	gp,gp,16748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	10b0a814 	ori	r2,r2,49824

    movhi r3, %hi(__bss_end)
  800018:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  80001c:	18d7ae14 	ori	r3,r3,24248

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	080dd1c0 	call	80dd1c <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <camera_test>:
 * camera will take a picture and output the average color
 * value to the terminal. Operator will switch the image and
 * press the button again. A different average color should
 * appear in the terminal. Repeat as needed.
 */
void camera_test(void* pdata){
  800038:	defff804 	addi	sp,sp,-32
  80003c:	dfc00715 	stw	ra,28(sp)
  800040:	df000615 	stw	fp,24(sp)
  800044:	df000604 	addi	fp,sp,24
  800048:	e13fff15 	stw	r4,-4(fp)

	uint32_t *leds = GREEN_LEDS_BASE;
  80004c:	00804074 	movhi	r2,257
  800050:	10a82804 	addi	r2,r2,-24416
  800054:	e0bffb15 	stw	r2,-20(fp)

	uint8_t q = 0;
  800058:	e03ffa05 	stb	zero,-24(fp)
	uint8_t z = 0;
  80005c:	e03ffa45 	stb	zero,-23(fp)
	uint8_t err;
	uint16_t temp;

	void* cam_reply_void;
	uint8_t cam_reply = 0;
  800060:	e03ffc05 	stb	zero,-16(fp)
	uint16_t packet_count = 0;
  800064:	e03ffc8d 	sth	zero,-14(fp)

	uint8_t sync_delay = CAM_INIT_SYNC_DELAY;
  800068:	00800144 	movi	r2,5
  80006c:	e0bffa85 	stb	r2,-22(fp)
	bool synced = FALSE;
  800070:	e03ffac5 	stb	zero,-21(fp)
	* Synchronise with camera
	* Documentation mentions this will take 25-60 attempts
	* Recommends an increasing delay between attempts
	* with an initial time of 5ms
	*/
	useData = FALSE;
  800074:	d0204d05 	stb	zero,-32460(gp)
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  800078:	e03ffa05 	stb	zero,-24(fp)
  80007c:	00004406 	br	800190 <camera_test+0x158>
		//Assume false until proven otherwise
		synced = FALSE;
  800080:	e03ffac5 	stb	zero,-21(fp)

		//Send the sync command
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800084:	e03ffa45 	stb	zero,-23(fp)
  800088:	00001106 	br	8000d0 <camera_test+0x98>
			while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  80008c:	0001883a 	nop
  800090:	00804074 	movhi	r2,257
  800094:	10a81204 	addi	r2,r2,-24504
  800098:	10800037 	ldwio	r2,0(r2)
  80009c:	1080100c 	andi	r2,r2,64
  8000a0:	103ffb26 	beq	r2,zero,800090 <__alt_mem_epcs_flash_controller_0+0xff7f7090>
			IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
  8000a4:	e0fffa43 	ldbu	r3,-23(fp)
  8000a8:	d0a00004 	addi	r2,gp,-32768
  8000ac:	1885883a 	add	r2,r3,r2
  8000b0:	10800003 	ldbu	r2,0(r2)
  8000b4:	10c03fcc 	andi	r3,r2,255
  8000b8:	00804074 	movhi	r2,257
  8000bc:	10a81104 	addi	r2,r2,-24508
  8000c0:	10c00035 	stwio	r3,0(r2)
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
		//Assume false until proven otherwise
		synced = FALSE;

		//Send the sync command
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8000c4:	e0bffa43 	ldbu	r2,-23(fp)
  8000c8:	10800044 	addi	r2,r2,1
  8000cc:	e0bffa45 	stb	r2,-23(fp)
  8000d0:	e0bffa43 	ldbu	r2,-23(fp)
  8000d4:	108001b0 	cmpltui	r2,r2,6
  8000d8:	103fec1e 	bne	r2,zero,80008c <__alt_mem_epcs_flash_controller_0+0xff7f708c>
			while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
			IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
		}

		//Wait the recommended sync time as per doc
		OSTimeDlyHMSM(0, 0, 0, sync_delay);
  8000dc:	e0bffa83 	ldbu	r2,-22(fp)
  8000e0:	100f883a 	mov	r7,r2
  8000e4:	000d883a 	mov	r6,zero
  8000e8:	000b883a 	mov	r5,zero
  8000ec:	0009883a 	mov	r4,zero
  8000f0:	08158840 	call	815884 <OSTimeDlyHMSM>

		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8000f4:	e03ffa45 	stb	zero,-23(fp)
  8000f8:	00001a06 	br	800164 <camera_test+0x12c>
			cam_reply_void = OSQAccept(camCommandQueue, &err);
  8000fc:	d0a04f17 	ldw	r2,-32452(gp)
  800100:	e0fffe04 	addi	r3,fp,-8
  800104:	180b883a 	mov	r5,r3
  800108:	1009883a 	mov	r4,r2
  80010c:	08124b00 	call	8124b0 <OSQAccept>
  800110:	e0bffd15 	stw	r2,-12(fp)
			if (cam_reply_void != NULL){
  800114:	e0bffd17 	ldw	r2,-12(fp)
  800118:	10000f26 	beq	r2,zero,800158 <camera_test+0x120>
				cam_reply = (uint8_t) cam_reply_void;
  80011c:	e0bffd17 	ldw	r2,-12(fp)
  800120:	e0bffc05 	stb	r2,-16(fp)
				printf("%x\n", cam_reply);
  800124:	e0bffc03 	ldbu	r2,-16(fp)
  800128:	100b883a 	mov	r5,r2
  80012c:	010020b4 	movhi	r4,130
  800130:	21278f04 	addi	r4,r4,-25028
  800134:	08007380 	call	800738 <printf>
				if (cam_reply != CAM_ACK_SYNC[z]){
  800138:	e0fffa43 	ldbu	r3,-23(fp)
  80013c:	d0a00704 	addi	r2,gp,-32740
  800140:	1885883a 	add	r2,r3,r2
  800144:	10800003 	ldbu	r2,0(r2)
  800148:	10c03fcc 	andi	r3,r2,255
  80014c:	e0bffc03 	ldbu	r2,-16(fp)
  800150:	18800126 	beq	r3,r2,800158 <camera_test+0x120>
					synced = FALSE;
  800154:	e03ffac5 	stb	zero,-21(fp)
		}

		//Wait the recommended sync time as per doc
		OSTimeDlyHMSM(0, 0, 0, sync_delay);

		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800158:	e0bffa43 	ldbu	r2,-23(fp)
  80015c:	10800044 	addi	r2,r2,1
  800160:	e0bffa45 	stb	r2,-23(fp)
  800164:	e0bffa43 	ldbu	r2,-23(fp)
  800168:	108001b0 	cmpltui	r2,r2,6
  80016c:	103fe31e 	bne	r2,zero,8000fc <__alt_mem_epcs_flash_controller_0+0xff7f70fc>
				}
			}
		}


		if (synced){
  800170:	e0bffac3 	ldbu	r2,-21(fp)
  800174:	10000a1e 	bne	r2,zero,8001a0 <camera_test+0x168>
			break;
		}else{

			sync_delay++;
  800178:	e0bffa83 	ldbu	r2,-22(fp)
  80017c:	10800044 	addi	r2,r2,1
  800180:	e0bffa85 	stb	r2,-22(fp)
	* Documentation mentions this will take 25-60 attempts
	* Recommends an increasing delay between attempts
	* with an initial time of 5ms
	*/
	useData = FALSE;
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  800184:	e0bffa03 	ldbu	r2,-24(fp)
  800188:	10800044 	addi	r2,r2,1
  80018c:	e0bffa05 	stb	r2,-24(fp)
  800190:	e0bffa03 	ldbu	r2,-24(fp)
  800194:	10800f30 	cmpltui	r2,r2,60
  800198:	103fb91e 	bne	r2,zero,800080 <__alt_mem_epcs_flash_controller_0+0xff7f7080>
  80019c:	00000106 	br	8001a4 <camera_test+0x16c>
			}
		}


		if (synced){
			break;
  8001a0:	0001883a 	nop

			sync_delay++;
		}
	}

	if (synced){
  8001a4:	e0bffac3 	ldbu	r2,-21(fp)
  8001a8:	10000b26 	beq	r2,zero,8001d8 <camera_test+0x1a0>
		printf("Cam synced after %i attempts\n", sync_delay);
  8001ac:	e0bffa83 	ldbu	r2,-22(fp)
  8001b0:	100b883a 	mov	r5,r2
  8001b4:	010020b4 	movhi	r4,130
  8001b8:	21279004 	addi	r4,r4,-25024
  8001bc:	08007380 	call	800738 <printf>
		*leds = *leds ^ 0xFF;
  8001c0:	e0bffb17 	ldw	r2,-20(fp)
  8001c4:	10800017 	ldw	r2,0(r2)
  8001c8:	10c03fdc 	xori	r3,r2,255
  8001cc:	e0bffb17 	ldw	r2,-20(fp)
  8001d0:	10c00015 	stw	r3,0(r2)
  8001d4:	00000606 	br	8001f0 <camera_test+0x1b8>
	}else{
		printf("Cam sync failure after %i attempts\n", sync_delay);
  8001d8:	e0bffa83 	ldbu	r2,-22(fp)
  8001dc:	100b883a 	mov	r5,r2
  8001e0:	010020b4 	movhi	r4,130
  8001e4:	21279804 	addi	r4,r4,-24992
  8001e8:	08007380 	call	800738 <printf>
		return;
  8001ec:	00000606 	br	800208 <camera_test+0x1d0>

		//print to terminal

		//repeat

		OSTimeDlyHMSM(0, 0, 1, 0);
  8001f0:	000f883a 	mov	r7,zero
  8001f4:	01800044 	movi	r6,1
  8001f8:	000b883a 	mov	r5,zero
  8001fc:	0009883a 	mov	r4,zero
  800200:	08158840 	call	815884 <OSTimeDlyHMSM>
	}
  800204:	003ffa06 	br	8001f0 <__alt_mem_epcs_flash_controller_0+0xff7f71f0>
}
  800208:	e037883a 	mov	sp,fp
  80020c:	dfc00117 	ldw	ra,4(sp)
  800210:	df000017 	ldw	fp,0(sp)
  800214:	dec00204 	addi	sp,sp,8
  800218:	f800283a 	ret

0080021c <cam_uart_interrupt>:

void cam_uart_interrupt(void * context){
  80021c:	defffc04 	addi	sp,sp,-16
  800220:	dfc00315 	stw	ra,12(sp)
  800224:	df000215 	stw	fp,8(sp)
  800228:	df000204 	addi	fp,sp,8
  80022c:	e13fff15 	stw	r4,-4(fp)
	uint8_t read = 0;
  800230:	e03ffe05 	stb	zero,-8(fp)

	while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
  800234:	0001883a 	nop
  800238:	00804074 	movhi	r2,257
  80023c:	10a81204 	addi	r2,r2,-24504
  800240:	10800037 	ldwio	r2,0(r2)
  800244:	1080200c 	andi	r2,r2,128
  800248:	103ffb26 	beq	r2,zero,800238 <__alt_mem_epcs_flash_controller_0+0xff7f7238>
	read = IORD_ALTERA_AVALON_UART_RXDATA(CAM_UART_BASE);
  80024c:	00804074 	movhi	r2,257
  800250:	10a81004 	addi	r2,r2,-24512
  800254:	10800037 	ldwio	r2,0(r2)
  800258:	e0bffe05 	stb	r2,-8(fp)

	if (useData){
  80025c:	d0a04d03 	ldbu	r2,-32460(gp)
  800260:	10803fcc 	andi	r2,r2,255
  800264:	10000626 	beq	r2,zero,800280 <cam_uart_interrupt+0x64>
		OSQPost(camPackageQueue, (void*) read);
  800268:	d0a05017 	ldw	r2,-32448(gp)
  80026c:	e0fffe03 	ldbu	r3,-8(fp)
  800270:	180b883a 	mov	r5,r3
  800274:	1009883a 	mov	r4,r2
  800278:	0812ecc0 	call	812ecc <OSQPost>
	}else{
		OSQPost(camCommandQueue, (void*) read);
	}
}
  80027c:	00000506 	br	800294 <cam_uart_interrupt+0x78>
	read = IORD_ALTERA_AVALON_UART_RXDATA(CAM_UART_BASE);

	if (useData){
		OSQPost(camPackageQueue, (void*) read);
	}else{
		OSQPost(camCommandQueue, (void*) read);
  800280:	d0a04f17 	ldw	r2,-32452(gp)
  800284:	e0fffe03 	ldbu	r3,-8(fp)
  800288:	180b883a 	mov	r5,r3
  80028c:	1009883a 	mov	r4,r2
  800290:	0812ecc0 	call	812ecc <OSQPost>
	}
}
  800294:	0001883a 	nop
  800298:	e037883a 	mov	sp,fp
  80029c:	dfc00117 	ldw	ra,4(sp)
  8002a0:	df000017 	ldw	fp,0(sp)
  8002a4:	dec00204 	addi	sp,sp,8
  8002a8:	f800283a 	ret

008002ac <motor_test>:

/*
 * Drives FORWARD initially but when the INFRARED SENSOR
 * detects something and it will REVERSE the direction
 */
void motor_test(void* pdata){
  8002ac:	defffd04 	addi	sp,sp,-12
  8002b0:	dfc00215 	stw	ra,8(sp)
  8002b4:	df000115 	stw	fp,4(sp)
  8002b8:	df000104 	addi	fp,sp,4
  8002bc:	e13fff15 	stw	r4,-4(fp)
	uint8_t err;
	while (1){
		//do stuff
		//OSSemPend(SENSOR_SEM, 0, &err);
		//Drive straight for one second
		OSTimeDlyHMSM(0, 0, 1, 0);
  8002c0:	000f883a 	mov	r7,zero
  8002c4:	01800044 	movi	r6,1
  8002c8:	000b883a 	mov	r5,zero
  8002cc:	0009883a 	mov	r4,zero
  8002d0:	08158840 	call	815884 <OSTimeDlyHMSM>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_L_BASE, MOTOR_FORWARD);
  8002d4:	00c00184 	movi	r3,6
  8002d8:	00804074 	movhi	r2,257
  8002dc:	10a83004 	addi	r2,r2,-24384
  8002e0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_R_BASE, MOTOR_FORWARD);
  8002e4:	00c00184 	movi	r3,6
  8002e8:	00804074 	movhi	r2,257
  8002ec:	10a83404 	addi	r2,r2,-24368
  8002f0:	10c00035 	stwio	r3,0(r2)
		//Drive left for one second
		OSTimeDlyHMSM(0, 0, 1, 0);
  8002f4:	000f883a 	mov	r7,zero
  8002f8:	01800044 	movi	r6,1
  8002fc:	000b883a 	mov	r5,zero
  800300:	0009883a 	mov	r4,zero
  800304:	08158840 	call	815884 <OSTimeDlyHMSM>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_L_BASE, MOTOR_REVERSE);
  800308:	00c001c4 	movi	r3,7
  80030c:	00804074 	movhi	r2,257
  800310:	10a83004 	addi	r2,r2,-24384
  800314:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_R_BASE, MOTOR_FORWARD);
  800318:	00c00184 	movi	r3,6
  80031c:	00804074 	movhi	r2,257
  800320:	10a83404 	addi	r2,r2,-24368
  800324:	10c00035 	stwio	r3,0(r2)
		//Drive right for one second
		OSTimeDlyHMSM(0, 0, 1, 0);
  800328:	000f883a 	mov	r7,zero
  80032c:	01800044 	movi	r6,1
  800330:	000b883a 	mov	r5,zero
  800334:	0009883a 	mov	r4,zero
  800338:	08158840 	call	815884 <OSTimeDlyHMSM>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_L_BASE, MOTOR_FORWARD);
  80033c:	00c00184 	movi	r3,6
  800340:	00804074 	movhi	r2,257
  800344:	10a83004 	addi	r2,r2,-24384
  800348:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_R_BASE, MOTOR_REVERSE);
  80034c:	00c001c4 	movi	r3,7
  800350:	00804074 	movhi	r2,257
  800354:	10a83404 	addi	r2,r2,-24368
  800358:	10c00035 	stwio	r3,0(r2)
		//Drive reverse for one second
		OSTimeDlyHMSM(0, 0, 1, 0);
  80035c:	000f883a 	mov	r7,zero
  800360:	01800044 	movi	r6,1
  800364:	000b883a 	mov	r5,zero
  800368:	0009883a 	mov	r4,zero
  80036c:	08158840 	call	815884 <OSTimeDlyHMSM>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_L_BASE, MOTOR_REVERSE);
  800370:	00c001c4 	movi	r3,7
  800374:	00804074 	movhi	r2,257
  800378:	10a83004 	addi	r2,r2,-24384
  80037c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_R_BASE, MOTOR_REVERSE);
  800380:	00c001c4 	movi	r3,7
  800384:	00804074 	movhi	r2,257
  800388:	10a83404 	addi	r2,r2,-24368
  80038c:	10c00035 	stwio	r3,0(r2)
		//Stop for one second
		OSTimeDlyHMSM(0, 0, 1, 0);
  800390:	000f883a 	mov	r7,zero
  800394:	01800044 	movi	r6,1
  800398:	000b883a 	mov	r5,zero
  80039c:	0009883a 	mov	r4,zero
  8003a0:	08158840 	call	815884 <OSTimeDlyHMSM>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_L_BASE, MOTOR_STOP);
  8003a4:	00c00104 	movi	r3,4
  8003a8:	00804074 	movhi	r2,257
  8003ac:	10a83004 	addi	r2,r2,-24384
  8003b0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_SET_BITS(MOTOR_R_BASE, MOTOR_STOP);
  8003b4:	00c00104 	movi	r3,4
  8003b8:	00804074 	movhi	r2,257
  8003bc:	10a83404 	addi	r2,r2,-24368
  8003c0:	10c00035 	stwio	r3,0(r2)
	}
  8003c4:	003fbe06 	br	8002c0 <__alt_mem_epcs_flash_controller_0+0xff7f72c0>

008003c8 <sensor_interrupt>:
}

void sensor_interrupt(void * context){
  8003c8:	defffd04 	addi	sp,sp,-12
  8003cc:	dfc00215 	stw	ra,8(sp)
  8003d0:	df000115 	stw	fp,4(sp)
  8003d4:	df000104 	addi	fp,sp,4
  8003d8:	e13fff15 	stw	r4,-4(fp)
	printf("sensor\n");
  8003dc:	010020b4 	movhi	r4,130
  8003e0:	2127a104 	addi	r4,r4,-24956
  8003e4:	08008340 	call	800834 <puts>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 1);
  8003e8:	00c00044 	movi	r3,1
  8003ec:	00804074 	movhi	r2,257
  8003f0:	10a83704 	addi	r2,r2,-24356
  8003f4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  8003f8:	00c003c4 	movi	r3,15
  8003fc:	00804074 	movhi	r2,257
  800400:	10a83604 	addi	r2,r2,-24360
  800404:	10c00035 	stwio	r3,0(r2)
	//post semaphore for camera
	OSSemPost(SENSOR_SEM);
  800408:	d0a05117 	ldw	r2,-32444(gp)
  80040c:	1009883a 	mov	r4,r2
  800410:	0813cf40 	call	813cf4 <OSSemPost>
}
  800414:	0001883a 	nop
  800418:	e037883a 	mov	sp,fp
  80041c:	dfc00117 	ldw	ra,4(sp)
  800420:	df000017 	ldw	fp,0(sp)
  800424:	dec00204 	addi	sp,sp,8
  800428:	f800283a 	ret

0080042c <main>:
 */



/* The main function creates two task and starts multi-tasking */
int main(void){
  80042c:	defff904 	addi	sp,sp,-28
  800430:	dfc00615 	stw	ra,24(sp)
  800434:	df000515 	stw	fp,20(sp)
  800438:	df000504 	addi	fp,sp,20
  
	printf("START OF MAIN\n");
  80043c:	010020b4 	movhi	r4,130
  800440:	2127cb04 	addi	r4,r4,-24788
  800444:	08008340 	call	800834 <puts>


	OSTaskCreateExt(motor_test,
  800448:	d8000415 	stw	zero,16(sp)
  80044c:	d8000315 	stw	zero,12(sp)
  800450:	00820004 	movi	r2,2048
  800454:	d8800215 	stw	r2,8(sp)
  800458:	008020b4 	movhi	r2,130
  80045c:	10b2e504 	addi	r2,r2,-13420
  800460:	d8800115 	stw	r2,4(sp)
  800464:	00800084 	movi	r2,2
  800468:	d8800015 	stw	r2,0(sp)
  80046c:	01c00084 	movi	r7,2
  800470:	018020b4 	movhi	r6,130
  800474:	31bae404 	addi	r6,r6,-5232
  800478:	000b883a 	mov	r5,zero
  80047c:	01002034 	movhi	r4,128
  800480:	2100ab04 	addi	r4,r4,684
  800484:	08146b00 	call	8146b0 <OSTaskCreateExt>
                  	motor_test_stk,
                  	TASK_STACKSIZE,
                  	NULL,
                  	0);

	printf("START OF MOTOR\n");
  800488:	010020b4 	movhi	r4,130
  80048c:	2127cf04 	addi	r4,r4,-24772
  800490:	08008340 	call	800834 <puts>

	OSTaskCreateExt(camera_test,
  800494:	d8000415 	stw	zero,16(sp)
  800498:	d8000315 	stw	zero,12(sp)
  80049c:	00820004 	movi	r2,2048
  8004a0:	d8800215 	stw	r2,8(sp)
  8004a4:	008020b4 	movhi	r2,130
  8004a8:	1082e504 	addi	r2,r2,2964
  8004ac:	d8800115 	stw	r2,4(sp)
  8004b0:	00800044 	movi	r2,1
  8004b4:	d8800015 	stw	r2,0(sp)
  8004b8:	01c00044 	movi	r7,1
  8004bc:	018020b4 	movhi	r6,130
  8004c0:	318ae404 	addi	r6,r6,11152
  8004c4:	000b883a 	mov	r5,zero
  8004c8:	01002034 	movhi	r4,128
  8004cc:	21000e04 	addi	r4,r4,56
  8004d0:	08146b00 	call	8146b0 <OSTaskCreateExt>
                  	camera_test_stk,
                  	TASK_STACKSIZE,
                  	NULL,
                  	0);

	printf("START OF CAM\n");
  8004d4:	010020b4 	movhi	r4,130
  8004d8:	2127d304 	addi	r4,r4,-24756
  8004dc:	08008340 	call	800834 <puts>

	OSTaskCreateExt(wifi_test,
  8004e0:	d8000415 	stw	zero,16(sp)
  8004e4:	d8000315 	stw	zero,12(sp)
  8004e8:	00820004 	movi	r2,2048
  8004ec:	d8800215 	stw	r2,8(sp)
  8004f0:	008020b4 	movhi	r2,130
  8004f4:	10bae504 	addi	r2,r2,-5228
  8004f8:	d8800115 	stw	r2,4(sp)
  8004fc:	008000c4 	movi	r2,3
  800500:	d8800015 	stw	r2,0(sp)
  800504:	01c000c4 	movi	r7,3
  800508:	018020b4 	movhi	r6,130
  80050c:	3182e404 	addi	r6,r6,2960
  800510:	000b883a 	mov	r5,zero
  800514:	01002034 	movhi	r4,128
  800518:	21019604 	addi	r4,r4,1624
  80051c:	08146b00 	call	8146b0 <OSTaskCreateExt>
                    wifi_test_stk,
                    TASK_STACKSIZE,
                    NULL,
                    0);

	printf("START OF WIFI\n");
  800520:	010020b4 	movhi	r4,130
  800524:	2127d704 	addi	r4,r4,-24740
  800528:	08008340 	call	800834 <puts>

	//Semaphore
	BUTTON_SEM = OSSemCreate(SEM_INIT_VALUE);
  80052c:	0009883a 	mov	r4,zero
  800530:	08136640 	call	813664 <OSSemCreate>
  800534:	d0a05215 	stw	r2,-32440(gp)
	SENSOR_SEM = OSSemCreate(SEM_INIT_VALUE);
  800538:	0009883a 	mov	r4,zero
  80053c:	08136640 	call	813664 <OSSemCreate>
  800540:	d0a05115 	stw	r2,-32444(gp)

	//Interrupt masks
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  800544:	00c003c4 	movi	r3,15
  800548:	00804074 	movhi	r2,257
  80054c:	10a82604 	addi	r2,r2,-24424
  800550:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 0x1);
  800554:	00c00044 	movi	r3,1
  800558:	00804074 	movhi	r2,257
  80055c:	10a82704 	addi	r2,r2,-24420
  800560:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  800564:	00c003c4 	movi	r3,15
  800568:	00804074 	movhi	r2,257
  80056c:	10a83604 	addi	r2,r2,-24360
  800570:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 0x1);
  800574:	00c00044 	movi	r3,1
  800578:	00804074 	movhi	r2,257
  80057c:	10a83704 	addi	r2,r2,-24356
  800580:	10c00035 	stwio	r3,0(r2)

	//Interrupt controller
	if(alt_ic_isr_register(BUTTON_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
  800584:	d8000015 	stw	zero,0(sp)
  800588:	000f883a 	mov	r7,zero
  80058c:	01802034 	movhi	r6,128
  800590:	3181a404 	addi	r6,r6,1680
  800594:	01400104 	movi	r5,4
  800598:	0009883a 	mov	r4,zero
  80059c:	080d87c0 	call	80d87c <alt_ic_isr_register>
  8005a0:	10000326 	beq	r2,zero,8005b0 <main+0x184>
					    BUTTON_BUTTON_IRQ,
					    button_interrupt,
					    NULL,
					    NULL))
	{
	  printf("button interrupt failed\n");
  8005a4:	010020b4 	movhi	r4,130
  8005a8:	2127db04 	addi	r4,r4,-24724
  8005ac:	08008340 	call	800834 <puts>
	}

	if(alt_ic_isr_register(PROX_SENSOR_IRQ_INTERRUPT_CONTROLLER_ID,
  8005b0:	d8000015 	stw	zero,0(sp)
  8005b4:	000f883a 	mov	r7,zero
  8005b8:	01802034 	movhi	r6,128
  8005bc:	3180f204 	addi	r6,r6,968
  8005c0:	014000c4 	movi	r5,3
  8005c4:	0009883a 	mov	r4,zero
  8005c8:	080d87c0 	call	80d87c <alt_ic_isr_register>
  8005cc:	10000326 	beq	r2,zero,8005dc <main+0x1b0>
					    PROX_SENSOR_IRQ,
					    sensor_interrupt,
					    NULL,
					    NULL))
	{
	  printf("proximity sensor interrupt failed\n");
  8005d0:	010020b4 	movhi	r4,130
  8005d4:	2127e104 	addi	r4,r4,-24700
  8005d8:	08008340 	call	800834 <puts>
	}

	if(alt_ic_isr_register(CAM_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  8005dc:	d8000015 	stw	zero,0(sp)
  8005e0:	000f883a 	mov	r7,zero
  8005e4:	01802034 	movhi	r6,128
  8005e8:	31808704 	addi	r6,r6,540
  8005ec:	01400044 	movi	r5,1
  8005f0:	0009883a 	mov	r4,zero
  8005f4:	080d87c0 	call	80d87c <alt_ic_isr_register>
  8005f8:	10000326 	beq	r2,zero,800608 <main+0x1dc>
				  	  	   CAM_UART_IRQ,
				  	  	   &cam_uart_interrupt,
				  	  	   NULL,
				  	  	   NULL))
	{
	  printf("cam interrupt failed\n");
  8005fc:	010020b4 	movhi	r4,130
  800600:	2127ea04 	addi	r4,r4,-24664
  800604:	08008340 	call	800834 <puts>
	}

	camCommandQueue = OSQCreate(&camCommandBuffer[0], CAM_COMMAND_LENGTH);
  800608:	01400184 	movi	r5,6
  80060c:	010020b4 	movhi	r4,130
  800610:	2132df04 	addi	r4,r4,-13444
  800614:	08125f00 	call	8125f0 <OSQCreate>
  800618:	d0a04f15 	stw	r2,-32452(gp)
	camPackageQueue = OSQCreate(&camPackageBuffer[0], CAM_PACKAGE_LENGTH);
  80061c:	01408004 	movi	r5,512
  800620:	010020b4 	movhi	r4,130
  800624:	2130df04 	addi	r4,r4,-15492
  800628:	08125f00 	call	8125f0 <OSQCreate>
  80062c:	d0a05015 	stw	r2,-32448(gp)

	printf("END OF MAIN\n");
  800630:	010020b4 	movhi	r4,130
  800634:	2127f004 	addi	r4,r4,-24640
  800638:	08008340 	call	800834 <puts>

	OSStart();
  80063c:	080f00c0 	call	80f00c <OSStart>

	return 0;
  800640:	0005883a 	mov	r2,zero
}
  800644:	e037883a 	mov	sp,fp
  800648:	dfc00117 	ldw	ra,4(sp)
  80064c:	df000017 	ldw	fp,0(sp)
  800650:	dec00204 	addi	sp,sp,8
  800654:	f800283a 	ret

00800658 <wifi_test>:
 *      Author: Randy Baron
 */

#include "wifi_test.h"

void wifi_test(void* pdata){
  800658:	defffc04 	addi	sp,sp,-16
  80065c:	dfc00315 	stw	ra,12(sp)
  800660:	df000215 	stw	fp,8(sp)
  800664:	df000204 	addi	fp,sp,8
  800668:	e13fff15 	stw	r4,-4(fp)
	uint8_t err;
	while (1){
		  //do stuff
		OSSemPend(BUTTON_SEM, 0, &err);
  80066c:	d0a05217 	ldw	r2,-32440(gp)
  800670:	e1bffe04 	addi	r6,fp,-8
  800674:	000b883a 	mov	r5,zero
  800678:	1009883a 	mov	r4,r2
  80067c:	081397c0 	call	81397c <OSSemPend>
		printf("Hello from wifi\n");
  800680:	010020b4 	movhi	r4,130
  800684:	2127f304 	addi	r4,r4,-24628
  800688:	08008340 	call	800834 <puts>
	}
  80068c:	003ff706 	br	80066c <__alt_mem_epcs_flash_controller_0+0xff7f766c>

00800690 <button_interrupt>:
	//OSTimeDlyHMSM(0, 0, 0, CAM_WAIT_MS);
}

void button_interrupt(void * context){
  800690:	defffd04 	addi	sp,sp,-12
  800694:	dfc00215 	stw	ra,8(sp)
  800698:	df000115 	stw	fp,4(sp)
  80069c:	df000104 	addi	fp,sp,4
  8006a0:	e13fff15 	stw	r4,-4(fp)
	printf("button\n");
  8006a4:	010020b4 	movhi	r4,130
  8006a8:	2127f704 	addi	r4,r4,-24612
  8006ac:	08008340 	call	800834 <puts>
	OSTimeDlyHMSM(0, 0, 0, 400);
  8006b0:	01c06404 	movi	r7,400
  8006b4:	000d883a 	mov	r6,zero
  8006b8:	000b883a 	mov	r5,zero
  8006bc:	0009883a 	mov	r4,zero
  8006c0:	08158840 	call	815884 <OSTimeDlyHMSM>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 1);
  8006c4:	00c00044 	movi	r3,1
  8006c8:	00804074 	movhi	r2,257
  8006cc:	10a82704 	addi	r2,r2,-24420
  8006d0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  8006d4:	00c003c4 	movi	r3,15
  8006d8:	00804074 	movhi	r2,257
  8006dc:	10a82604 	addi	r2,r2,-24424
  8006e0:	10c00035 	stwio	r3,0(r2)

	//post semaphore for camera
	OSSemPost(BUTTON_SEM);
  8006e4:	d0a05217 	ldw	r2,-32440(gp)
  8006e8:	1009883a 	mov	r4,r2
  8006ec:	0813cf40 	call	813cf4 <OSSemPost>
}
  8006f0:	0001883a 	nop
  8006f4:	e037883a 	mov	sp,fp
  8006f8:	dfc00117 	ldw	ra,4(sp)
  8006fc:	df000017 	ldw	fp,0(sp)
  800700:	dec00204 	addi	sp,sp,8
  800704:	f800283a 	ret

00800708 <_printf_r>:
  800708:	defffd04 	addi	sp,sp,-12
  80070c:	2805883a 	mov	r2,r5
  800710:	dfc00015 	stw	ra,0(sp)
  800714:	d9800115 	stw	r6,4(sp)
  800718:	d9c00215 	stw	r7,8(sp)
  80071c:	21400217 	ldw	r5,8(r4)
  800720:	d9c00104 	addi	r7,sp,4
  800724:	100d883a 	mov	r6,r2
  800728:	08008e00 	call	8008e0 <___vfprintf_internal_r>
  80072c:	dfc00017 	ldw	ra,0(sp)
  800730:	dec00304 	addi	sp,sp,12
  800734:	f800283a 	ret

00800738 <printf>:
  800738:	defffc04 	addi	sp,sp,-16
  80073c:	dfc00015 	stw	ra,0(sp)
  800740:	d9400115 	stw	r5,4(sp)
  800744:	d9800215 	stw	r6,8(sp)
  800748:	d9c00315 	stw	r7,12(sp)
  80074c:	008020b4 	movhi	r2,130
  800750:	10b07804 	addi	r2,r2,-15904
  800754:	10800017 	ldw	r2,0(r2)
  800758:	200b883a 	mov	r5,r4
  80075c:	d9800104 	addi	r6,sp,4
  800760:	11000217 	ldw	r4,8(r2)
  800764:	0802bbc0 	call	802bbc <__vfprintf_internal>
  800768:	dfc00017 	ldw	ra,0(sp)
  80076c:	dec00404 	addi	sp,sp,16
  800770:	f800283a 	ret

00800774 <_puts_r>:
  800774:	defff604 	addi	sp,sp,-40
  800778:	dc000715 	stw	r16,28(sp)
  80077c:	2021883a 	mov	r16,r4
  800780:	2809883a 	mov	r4,r5
  800784:	dc400815 	stw	r17,32(sp)
  800788:	dfc00915 	stw	ra,36(sp)
  80078c:	2823883a 	mov	r17,r5
  800790:	08008480 	call	800848 <strlen>
  800794:	10c00044 	addi	r3,r2,1
  800798:	d8800115 	stw	r2,4(sp)
  80079c:	008020b4 	movhi	r2,130
  8007a0:	10a7f904 	addi	r2,r2,-24604
  8007a4:	d8800215 	stw	r2,8(sp)
  8007a8:	00800044 	movi	r2,1
  8007ac:	d8800315 	stw	r2,12(sp)
  8007b0:	00800084 	movi	r2,2
  8007b4:	dc400015 	stw	r17,0(sp)
  8007b8:	d8c00615 	stw	r3,24(sp)
  8007bc:	dec00415 	stw	sp,16(sp)
  8007c0:	d8800515 	stw	r2,20(sp)
  8007c4:	80000226 	beq	r16,zero,8007d0 <_puts_r+0x5c>
  8007c8:	80800e17 	ldw	r2,56(r16)
  8007cc:	10001426 	beq	r2,zero,800820 <_puts_r+0xac>
  8007d0:	81400217 	ldw	r5,8(r16)
  8007d4:	2880030b 	ldhu	r2,12(r5)
  8007d8:	10c8000c 	andi	r3,r2,8192
  8007dc:	1800061e 	bne	r3,zero,8007f8 <_puts_r+0x84>
  8007e0:	29001917 	ldw	r4,100(r5)
  8007e4:	00f7ffc4 	movi	r3,-8193
  8007e8:	10880014 	ori	r2,r2,8192
  8007ec:	20c6703a 	and	r3,r4,r3
  8007f0:	2880030d 	sth	r2,12(r5)
  8007f4:	28c01915 	stw	r3,100(r5)
  8007f8:	d9800404 	addi	r6,sp,16
  8007fc:	8009883a 	mov	r4,r16
  800800:	08051240 	call	805124 <__sfvwrite_r>
  800804:	1000091e 	bne	r2,zero,80082c <_puts_r+0xb8>
  800808:	00800284 	movi	r2,10
  80080c:	dfc00917 	ldw	ra,36(sp)
  800810:	dc400817 	ldw	r17,32(sp)
  800814:	dc000717 	ldw	r16,28(sp)
  800818:	dec00a04 	addi	sp,sp,40
  80081c:	f800283a 	ret
  800820:	8009883a 	mov	r4,r16
  800824:	0804ca00 	call	804ca0 <__sinit>
  800828:	003fe906 	br	8007d0 <__alt_mem_epcs_flash_controller_0+0xff7f77d0>
  80082c:	00bfffc4 	movi	r2,-1
  800830:	003ff606 	br	80080c <__alt_mem_epcs_flash_controller_0+0xff7f780c>

00800834 <puts>:
  800834:	008020b4 	movhi	r2,130
  800838:	10b07804 	addi	r2,r2,-15904
  80083c:	200b883a 	mov	r5,r4
  800840:	11000017 	ldw	r4,0(r2)
  800844:	08007741 	jmpi	800774 <_puts_r>

00800848 <strlen>:
  800848:	208000cc 	andi	r2,r4,3
  80084c:	10002026 	beq	r2,zero,8008d0 <strlen+0x88>
  800850:	20800007 	ldb	r2,0(r4)
  800854:	10002026 	beq	r2,zero,8008d8 <strlen+0x90>
  800858:	2005883a 	mov	r2,r4
  80085c:	00000206 	br	800868 <strlen+0x20>
  800860:	10c00007 	ldb	r3,0(r2)
  800864:	18001826 	beq	r3,zero,8008c8 <strlen+0x80>
  800868:	10800044 	addi	r2,r2,1
  80086c:	10c000cc 	andi	r3,r2,3
  800870:	183ffb1e 	bne	r3,zero,800860 <__alt_mem_epcs_flash_controller_0+0xff7f7860>
  800874:	10c00017 	ldw	r3,0(r2)
  800878:	01ffbff4 	movhi	r7,65279
  80087c:	39ffbfc4 	addi	r7,r7,-257
  800880:	00ca303a 	nor	r5,zero,r3
  800884:	01a02074 	movhi	r6,32897
  800888:	19c7883a 	add	r3,r3,r7
  80088c:	31a02004 	addi	r6,r6,-32640
  800890:	1946703a 	and	r3,r3,r5
  800894:	1986703a 	and	r3,r3,r6
  800898:	1800091e 	bne	r3,zero,8008c0 <strlen+0x78>
  80089c:	10800104 	addi	r2,r2,4
  8008a0:	10c00017 	ldw	r3,0(r2)
  8008a4:	19cb883a 	add	r5,r3,r7
  8008a8:	00c6303a 	nor	r3,zero,r3
  8008ac:	28c6703a 	and	r3,r5,r3
  8008b0:	1986703a 	and	r3,r3,r6
  8008b4:	183ff926 	beq	r3,zero,80089c <__alt_mem_epcs_flash_controller_0+0xff7f789c>
  8008b8:	00000106 	br	8008c0 <strlen+0x78>
  8008bc:	10800044 	addi	r2,r2,1
  8008c0:	10c00007 	ldb	r3,0(r2)
  8008c4:	183ffd1e 	bne	r3,zero,8008bc <__alt_mem_epcs_flash_controller_0+0xff7f78bc>
  8008c8:	1105c83a 	sub	r2,r2,r4
  8008cc:	f800283a 	ret
  8008d0:	2005883a 	mov	r2,r4
  8008d4:	003fe706 	br	800874 <__alt_mem_epcs_flash_controller_0+0xff7f7874>
  8008d8:	0005883a 	mov	r2,zero
  8008dc:	f800283a 	ret

008008e0 <___vfprintf_internal_r>:
  8008e0:	deffb804 	addi	sp,sp,-288
  8008e4:	dfc04715 	stw	ra,284(sp)
  8008e8:	ddc04515 	stw	r23,276(sp)
  8008ec:	dd404315 	stw	r21,268(sp)
  8008f0:	d9002d15 	stw	r4,180(sp)
  8008f4:	282f883a 	mov	r23,r5
  8008f8:	302b883a 	mov	r21,r6
  8008fc:	d9c02e15 	stw	r7,184(sp)
  800900:	df004615 	stw	fp,280(sp)
  800904:	dd804415 	stw	r22,272(sp)
  800908:	dd004215 	stw	r20,264(sp)
  80090c:	dcc04115 	stw	r19,260(sp)
  800910:	dc804015 	stw	r18,256(sp)
  800914:	dc403f15 	stw	r17,252(sp)
  800918:	dc003e15 	stw	r16,248(sp)
  80091c:	08058200 	call	805820 <_localeconv_r>
  800920:	10800017 	ldw	r2,0(r2)
  800924:	1009883a 	mov	r4,r2
  800928:	d8803415 	stw	r2,208(sp)
  80092c:	08008480 	call	800848 <strlen>
  800930:	d8803715 	stw	r2,220(sp)
  800934:	d8802d17 	ldw	r2,180(sp)
  800938:	10000226 	beq	r2,zero,800944 <___vfprintf_internal_r+0x64>
  80093c:	10800e17 	ldw	r2,56(r2)
  800940:	1000fb26 	beq	r2,zero,800d30 <___vfprintf_internal_r+0x450>
  800944:	b880030b 	ldhu	r2,12(r23)
  800948:	10c8000c 	andi	r3,r2,8192
  80094c:	1800061e 	bne	r3,zero,800968 <___vfprintf_internal_r+0x88>
  800950:	b9001917 	ldw	r4,100(r23)
  800954:	00f7ffc4 	movi	r3,-8193
  800958:	10880014 	ori	r2,r2,8192
  80095c:	20c6703a 	and	r3,r4,r3
  800960:	b880030d 	sth	r2,12(r23)
  800964:	b8c01915 	stw	r3,100(r23)
  800968:	10c0020c 	andi	r3,r2,8
  80096c:	1800c326 	beq	r3,zero,800c7c <___vfprintf_internal_r+0x39c>
  800970:	b8c00417 	ldw	r3,16(r23)
  800974:	1800c126 	beq	r3,zero,800c7c <___vfprintf_internal_r+0x39c>
  800978:	1080068c 	andi	r2,r2,26
  80097c:	00c00284 	movi	r3,10
  800980:	10c0c626 	beq	r2,r3,800c9c <___vfprintf_internal_r+0x3bc>
  800984:	d8c00404 	addi	r3,sp,16
  800988:	050020b4 	movhi	r20,130
  80098c:	d9001e04 	addi	r4,sp,120
  800990:	a5280a84 	addi	r20,r20,-24534
  800994:	d8c01e15 	stw	r3,120(sp)
  800998:	d8002015 	stw	zero,128(sp)
  80099c:	d8001f15 	stw	zero,124(sp)
  8009a0:	d8003315 	stw	zero,204(sp)
  8009a4:	d8003615 	stw	zero,216(sp)
  8009a8:	d8003815 	stw	zero,224(sp)
  8009ac:	1811883a 	mov	r8,r3
  8009b0:	d8003915 	stw	zero,228(sp)
  8009b4:	d8003a15 	stw	zero,232(sp)
  8009b8:	d8002f15 	stw	zero,188(sp)
  8009bc:	d9002815 	stw	r4,160(sp)
  8009c0:	a8800007 	ldb	r2,0(r21)
  8009c4:	10028b26 	beq	r2,zero,8013f4 <___vfprintf_internal_r+0xb14>
  8009c8:	00c00944 	movi	r3,37
  8009cc:	a823883a 	mov	r17,r21
  8009d0:	10c0021e 	bne	r2,r3,8009dc <___vfprintf_internal_r+0xfc>
  8009d4:	00001406 	br	800a28 <___vfprintf_internal_r+0x148>
  8009d8:	10c00326 	beq	r2,r3,8009e8 <___vfprintf_internal_r+0x108>
  8009dc:	8c400044 	addi	r17,r17,1
  8009e0:	88800007 	ldb	r2,0(r17)
  8009e4:	103ffc1e 	bne	r2,zero,8009d8 <__alt_mem_epcs_flash_controller_0+0xff7f79d8>
  8009e8:	8d61c83a 	sub	r16,r17,r21
  8009ec:	80000e26 	beq	r16,zero,800a28 <___vfprintf_internal_r+0x148>
  8009f0:	d8c02017 	ldw	r3,128(sp)
  8009f4:	d8801f17 	ldw	r2,124(sp)
  8009f8:	45400015 	stw	r21,0(r8)
  8009fc:	1c07883a 	add	r3,r3,r16
  800a00:	10800044 	addi	r2,r2,1
  800a04:	d8c02015 	stw	r3,128(sp)
  800a08:	44000115 	stw	r16,4(r8)
  800a0c:	d8801f15 	stw	r2,124(sp)
  800a10:	00c001c4 	movi	r3,7
  800a14:	1880a916 	blt	r3,r2,800cbc <___vfprintf_internal_r+0x3dc>
  800a18:	42000204 	addi	r8,r8,8
  800a1c:	d9402f17 	ldw	r5,188(sp)
  800a20:	2c0b883a 	add	r5,r5,r16
  800a24:	d9402f15 	stw	r5,188(sp)
  800a28:	88800007 	ldb	r2,0(r17)
  800a2c:	1000aa26 	beq	r2,zero,800cd8 <___vfprintf_internal_r+0x3f8>
  800a30:	8d400044 	addi	r21,r17,1
  800a34:	8c400047 	ldb	r17,1(r17)
  800a38:	0021883a 	mov	r16,zero
  800a3c:	00bfffc4 	movi	r2,-1
  800a40:	0025883a 	mov	r18,zero
  800a44:	dc002905 	stb	r16,164(sp)
  800a48:	d8002785 	stb	zero,158(sp)
  800a4c:	d8002b05 	stb	zero,172(sp)
  800a50:	d8802a15 	stw	r2,168(sp)
  800a54:	d8003115 	stw	zero,196(sp)
  800a58:	04c01604 	movi	r19,88
  800a5c:	05800244 	movi	r22,9
  800a60:	9021883a 	mov	r16,r18
  800a64:	4039883a 	mov	fp,r8
  800a68:	ad400044 	addi	r21,r21,1
  800a6c:	88bff804 	addi	r2,r17,-32
  800a70:	98833236 	bltu	r19,r2,80173c <___vfprintf_internal_r+0xe5c>
  800a74:	100490ba 	slli	r2,r2,2
  800a78:	00c02034 	movhi	r3,128
  800a7c:	18c2a304 	addi	r3,r3,2700
  800a80:	10c5883a 	add	r2,r2,r3
  800a84:	10800017 	ldw	r2,0(r2)
  800a88:	1000683a 	jmp	r2
  800a8c:	00801634 	movhi	r2,88
  800a90:	0080173c 	xorhi	r2,zero,92
  800a94:	0080173c 	xorhi	r2,zero,92
  800a98:	00801654 	movui	r2,89
  800a9c:	0080173c 	xorhi	r2,zero,92
  800aa0:	0080173c 	xorhi	r2,zero,92
  800aa4:	0080173c 	xorhi	r2,zero,92
  800aa8:	0080173c 	xorhi	r2,zero,92
  800aac:	0080173c 	xorhi	r2,zero,92
  800ab0:	0080173c 	xorhi	r2,zero,92
  800ab4:	00800d3c 	xorhi	r2,zero,52
  800ab8:	00801544 	movi	r2,85
  800abc:	0080173c 	xorhi	r2,zero,92
  800ac0:	00800c00 	call	800c0 <OSCtxSw_SWITCH_PC+0x80080>
  800ac4:	00800d60 	cmpeqi	r2,zero,53
  800ac8:	0080173c 	xorhi	r2,zero,92
  800acc:	00800db0 	cmpltui	r2,zero,54
  800ad0:	00800dbc 	xorhi	r2,zero,54
  800ad4:	00800dbc 	xorhi	r2,zero,54
  800ad8:	00800dbc 	xorhi	r2,zero,54
  800adc:	00800dbc 	xorhi	r2,zero,54
  800ae0:	00800dbc 	xorhi	r2,zero,54
  800ae4:	00800dbc 	xorhi	r2,zero,54
  800ae8:	00800dbc 	xorhi	r2,zero,54
  800aec:	00800dbc 	xorhi	r2,zero,54
  800af0:	00800dbc 	xorhi	r2,zero,54
  800af4:	0080173c 	xorhi	r2,zero,92
  800af8:	0080173c 	xorhi	r2,zero,92
  800afc:	0080173c 	xorhi	r2,zero,92
  800b00:	0080173c 	xorhi	r2,zero,92
  800b04:	0080173c 	xorhi	r2,zero,92
  800b08:	0080173c 	xorhi	r2,zero,92
  800b0c:	0080173c 	xorhi	r2,zero,92
  800b10:	0080173c 	xorhi	r2,zero,92
  800b14:	0080173c 	xorhi	r2,zero,92
  800b18:	0080173c 	xorhi	r2,zero,92
  800b1c:	00800df8 	rdprs	r2,zero,55
  800b20:	00800ec0 	call	800ec <OSCtxSw_SWITCH_PC+0x800ac>
  800b24:	0080173c 	xorhi	r2,zero,92
  800b28:	00800ec0 	call	800ec <OSCtxSw_SWITCH_PC+0x800ac>
  800b2c:	0080173c 	xorhi	r2,zero,92
  800b30:	0080173c 	xorhi	r2,zero,92
  800b34:	0080173c 	xorhi	r2,zero,92
  800b38:	0080173c 	xorhi	r2,zero,92
  800b3c:	00800f6c 	andhi	r2,zero,61
  800b40:	0080173c 	xorhi	r2,zero,92
  800b44:	0080173c 	xorhi	r2,zero,92
  800b48:	00800f78 	rdprs	r2,zero,61
  800b4c:	0080173c 	xorhi	r2,zero,92
  800b50:	0080173c 	xorhi	r2,zero,92
  800b54:	0080173c 	xorhi	r2,zero,92
  800b58:	0080173c 	xorhi	r2,zero,92
  800b5c:	0080173c 	xorhi	r2,zero,92
  800b60:	008013fc 	xorhi	r2,zero,79
  800b64:	0080173c 	xorhi	r2,zero,92
  800b68:	0080173c 	xorhi	r2,zero,92
  800b6c:	00801468 	cmpgeui	r2,zero,81
  800b70:	0080173c 	xorhi	r2,zero,92
  800b74:	0080173c 	xorhi	r2,zero,92
  800b78:	0080173c 	xorhi	r2,zero,92
  800b7c:	0080173c 	xorhi	r2,zero,92
  800b80:	0080173c 	xorhi	r2,zero,92
  800b84:	0080173c 	xorhi	r2,zero,92
  800b88:	0080173c 	xorhi	r2,zero,92
  800b8c:	0080173c 	xorhi	r2,zero,92
  800b90:	0080173c 	xorhi	r2,zero,92
  800b94:	0080173c 	xorhi	r2,zero,92
  800b98:	008016e0 	cmpeqi	r2,zero,91
  800b9c:	00801660 	cmpeqi	r2,zero,89
  800ba0:	00800ec0 	call	800ec <OSCtxSw_SWITCH_PC+0x800ac>
  800ba4:	00800ec0 	call	800ec <OSCtxSw_SWITCH_PC+0x800ac>
  800ba8:	00800ec0 	call	800ec <OSCtxSw_SWITCH_PC+0x800ac>
  800bac:	00801680 	call	80168 <OSCtxSw_SWITCH_PC+0x80128>
  800bb0:	00801660 	cmpeqi	r2,zero,89
  800bb4:	0080173c 	xorhi	r2,zero,92
  800bb8:	0080173c 	xorhi	r2,zero,92
  800bbc:	0080168c 	andi	r2,zero,90
  800bc0:	0080173c 	xorhi	r2,zero,92
  800bc4:	008016a0 	cmpeqi	r2,zero,90
  800bc8:	00801524 	muli	r2,zero,84
  800bcc:	00800c0c 	andi	r2,zero,48
  800bd0:	0080155c 	xori	r2,zero,85
  800bd4:	0080173c 	xorhi	r2,zero,92
  800bd8:	00801568 	cmpgeui	r2,zero,85
  800bdc:	0080173c 	xorhi	r2,zero,92
  800be0:	008015cc 	andi	r2,zero,87
  800be4:	0080173c 	xorhi	r2,zero,92
  800be8:	0080173c 	xorhi	r2,zero,92
  800bec:	008015ec 	andhi	r2,zero,87
  800bf0:	d8c03117 	ldw	r3,196(sp)
  800bf4:	d8802e15 	stw	r2,184(sp)
  800bf8:	00c7c83a 	sub	r3,zero,r3
  800bfc:	d8c03115 	stw	r3,196(sp)
  800c00:	84000114 	ori	r16,r16,4
  800c04:	ac400007 	ldb	r17,0(r21)
  800c08:	003f9706 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  800c0c:	00800c04 	movi	r2,48
  800c10:	d8802705 	stb	r2,156(sp)
  800c14:	00801e04 	movi	r2,120
  800c18:	d8802745 	stb	r2,157(sp)
  800c1c:	d9002a17 	ldw	r4,168(sp)
  800c20:	d8802e17 	ldw	r2,184(sp)
  800c24:	d8002785 	stb	zero,158(sp)
  800c28:	e011883a 	mov	r8,fp
  800c2c:	10c00104 	addi	r3,r2,4
  800c30:	14c00017 	ldw	r19,0(r2)
  800c34:	002d883a 	mov	r22,zero
  800c38:	80800094 	ori	r2,r16,2
  800c3c:	2002ca16 	blt	r4,zero,801768 <___vfprintf_internal_r+0xe88>
  800c40:	00bfdfc4 	movi	r2,-129
  800c44:	80a4703a 	and	r18,r16,r2
  800c48:	d8c02e15 	stw	r3,184(sp)
  800c4c:	94800094 	ori	r18,r18,2
  800c50:	9802b41e 	bne	r19,zero,801724 <___vfprintf_internal_r+0xe44>
  800c54:	014020b4 	movhi	r5,130
  800c58:	29680304 	addi	r5,r5,-24564
  800c5c:	d9403915 	stw	r5,228(sp)
  800c60:	04401e04 	movi	r17,120
  800c64:	d8802a17 	ldw	r2,168(sp)
  800c68:	0039883a 	mov	fp,zero
  800c6c:	1001fa26 	beq	r2,zero,801458 <___vfprintf_internal_r+0xb78>
  800c70:	0027883a 	mov	r19,zero
  800c74:	002d883a 	mov	r22,zero
  800c78:	00021906 	br	8014e0 <___vfprintf_internal_r+0xc00>
  800c7c:	d9002d17 	ldw	r4,180(sp)
  800c80:	b80b883a 	mov	r5,r23
  800c84:	0802c940 	call	802c94 <__swsetup_r>
  800c88:	1005dc1e 	bne	r2,zero,8023fc <___vfprintf_internal_r+0x1b1c>
  800c8c:	b880030b 	ldhu	r2,12(r23)
  800c90:	00c00284 	movi	r3,10
  800c94:	1080068c 	andi	r2,r2,26
  800c98:	10ff3a1e 	bne	r2,r3,800984 <__alt_mem_epcs_flash_controller_0+0xff7f7984>
  800c9c:	b880038f 	ldh	r2,14(r23)
  800ca0:	103f3816 	blt	r2,zero,800984 <__alt_mem_epcs_flash_controller_0+0xff7f7984>
  800ca4:	d9c02e17 	ldw	r7,184(sp)
  800ca8:	d9002d17 	ldw	r4,180(sp)
  800cac:	a80d883a 	mov	r6,r21
  800cb0:	b80b883a 	mov	r5,r23
  800cb4:	0802bd80 	call	802bd8 <__sbprintf>
  800cb8:	00001106 	br	800d00 <___vfprintf_internal_r+0x420>
  800cbc:	d9002d17 	ldw	r4,180(sp)
  800cc0:	d9801e04 	addi	r6,sp,120
  800cc4:	b80b883a 	mov	r5,r23
  800cc8:	08080c00 	call	8080c0 <__sprint_r>
  800ccc:	1000081e 	bne	r2,zero,800cf0 <___vfprintf_internal_r+0x410>
  800cd0:	da000404 	addi	r8,sp,16
  800cd4:	003f5106 	br	800a1c <__alt_mem_epcs_flash_controller_0+0xff7f7a1c>
  800cd8:	d8802017 	ldw	r2,128(sp)
  800cdc:	10000426 	beq	r2,zero,800cf0 <___vfprintf_internal_r+0x410>
  800ce0:	d9002d17 	ldw	r4,180(sp)
  800ce4:	d9801e04 	addi	r6,sp,120
  800ce8:	b80b883a 	mov	r5,r23
  800cec:	08080c00 	call	8080c0 <__sprint_r>
  800cf0:	b880030b 	ldhu	r2,12(r23)
  800cf4:	1080100c 	andi	r2,r2,64
  800cf8:	1005c01e 	bne	r2,zero,8023fc <___vfprintf_internal_r+0x1b1c>
  800cfc:	d8802f17 	ldw	r2,188(sp)
  800d00:	dfc04717 	ldw	ra,284(sp)
  800d04:	df004617 	ldw	fp,280(sp)
  800d08:	ddc04517 	ldw	r23,276(sp)
  800d0c:	dd804417 	ldw	r22,272(sp)
  800d10:	dd404317 	ldw	r21,268(sp)
  800d14:	dd004217 	ldw	r20,264(sp)
  800d18:	dcc04117 	ldw	r19,260(sp)
  800d1c:	dc804017 	ldw	r18,256(sp)
  800d20:	dc403f17 	ldw	r17,252(sp)
  800d24:	dc003e17 	ldw	r16,248(sp)
  800d28:	dec04804 	addi	sp,sp,288
  800d2c:	f800283a 	ret
  800d30:	d9002d17 	ldw	r4,180(sp)
  800d34:	0804ca00 	call	804ca0 <__sinit>
  800d38:	003f0206 	br	800944 <__alt_mem_epcs_flash_controller_0+0xff7f7944>
  800d3c:	d9002e17 	ldw	r4,184(sp)
  800d40:	d9402e17 	ldw	r5,184(sp)
  800d44:	21000017 	ldw	r4,0(r4)
  800d48:	28800104 	addi	r2,r5,4
  800d4c:	d9003115 	stw	r4,196(sp)
  800d50:	203fa716 	blt	r4,zero,800bf0 <__alt_mem_epcs_flash_controller_0+0xff7f7bf0>
  800d54:	d8802e15 	stw	r2,184(sp)
  800d58:	ac400007 	ldb	r17,0(r21)
  800d5c:	003f4206 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  800d60:	ac400007 	ldb	r17,0(r21)
  800d64:	01000a84 	movi	r4,42
  800d68:	a8c00044 	addi	r3,r21,1
  800d6c:	89075826 	beq	r17,r4,802ad0 <___vfprintf_internal_r+0x21f0>
  800d70:	8cbff404 	addi	r18,r17,-48
  800d74:	b486ae36 	bltu	r22,r18,802830 <___vfprintf_internal_r+0x1f50>
  800d78:	0009883a 	mov	r4,zero
  800d7c:	1823883a 	mov	r17,r3
  800d80:	01400284 	movi	r5,10
  800d84:	080ad7c0 	call	80ad7c <__mulsi3>
  800d88:	88c00007 	ldb	r3,0(r17)
  800d8c:	1489883a 	add	r4,r2,r18
  800d90:	8d400044 	addi	r21,r17,1
  800d94:	1cbff404 	addi	r18,r3,-48
  800d98:	a823883a 	mov	r17,r21
  800d9c:	b4bff82e 	bgeu	r22,r18,800d80 <__alt_mem_epcs_flash_controller_0+0xff7f7d80>
  800da0:	1823883a 	mov	r17,r3
  800da4:	2005f616 	blt	r4,zero,802580 <___vfprintf_internal_r+0x1ca0>
  800da8:	d9002a15 	stw	r4,168(sp)
  800dac:	003f2f06 	br	800a6c <__alt_mem_epcs_flash_controller_0+0xff7f7a6c>
  800db0:	84002014 	ori	r16,r16,128
  800db4:	ac400007 	ldb	r17,0(r21)
  800db8:	003f2b06 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  800dbc:	8cbff404 	addi	r18,r17,-48
  800dc0:	d8003115 	stw	zero,196(sp)
  800dc4:	0009883a 	mov	r4,zero
  800dc8:	a823883a 	mov	r17,r21
  800dcc:	01400284 	movi	r5,10
  800dd0:	080ad7c0 	call	80ad7c <__mulsi3>
  800dd4:	88c00007 	ldb	r3,0(r17)
  800dd8:	9089883a 	add	r4,r18,r2
  800ddc:	ad400044 	addi	r21,r21,1
  800de0:	1cbff404 	addi	r18,r3,-48
  800de4:	a823883a 	mov	r17,r21
  800de8:	b4bff82e 	bgeu	r22,r18,800dcc <__alt_mem_epcs_flash_controller_0+0xff7f7dcc>
  800dec:	1823883a 	mov	r17,r3
  800df0:	d9003115 	stw	r4,196(sp)
  800df4:	003f1d06 	br	800a6c <__alt_mem_epcs_flash_controller_0+0xff7f7a6c>
  800df8:	8025883a 	mov	r18,r16
  800dfc:	dc002903 	ldbu	r16,164(sp)
  800e00:	e011883a 	mov	r8,fp
  800e04:	84003fcc 	andi	r16,r16,255
  800e08:	8007531e 	bne	r16,zero,802b58 <___vfprintf_internal_r+0x2278>
  800e0c:	94800414 	ori	r18,r18,16
  800e10:	9080080c 	andi	r2,r18,32
  800e14:	1003a326 	beq	r2,zero,801ca4 <___vfprintf_internal_r+0x13c4>
  800e18:	d9002e17 	ldw	r4,184(sp)
  800e1c:	20800117 	ldw	r2,4(r4)
  800e20:	24c00017 	ldw	r19,0(r4)
  800e24:	21000204 	addi	r4,r4,8
  800e28:	d9002e15 	stw	r4,184(sp)
  800e2c:	102d883a 	mov	r22,r2
  800e30:	10047316 	blt	r2,zero,802000 <___vfprintf_internal_r+0x1720>
  800e34:	d9002a17 	ldw	r4,168(sp)
  800e38:	df002783 	ldbu	fp,158(sp)
  800e3c:	2003e416 	blt	r4,zero,801dd0 <___vfprintf_internal_r+0x14f0>
  800e40:	00ffdfc4 	movi	r3,-129
  800e44:	9d84b03a 	or	r2,r19,r22
  800e48:	90e4703a 	and	r18,r18,r3
  800e4c:	10018026 	beq	r2,zero,801450 <___vfprintf_internal_r+0xb70>
  800e50:	b003ab26 	beq	r22,zero,801d00 <___vfprintf_internal_r+0x1420>
  800e54:	dc402915 	stw	r17,164(sp)
  800e58:	dc001e04 	addi	r16,sp,120
  800e5c:	b023883a 	mov	r17,r22
  800e60:	402d883a 	mov	r22,r8
  800e64:	9809883a 	mov	r4,r19
  800e68:	880b883a 	mov	r5,r17
  800e6c:	01800284 	movi	r6,10
  800e70:	000f883a 	mov	r7,zero
  800e74:	080a6040 	call	80a604 <__umoddi3>
  800e78:	10800c04 	addi	r2,r2,48
  800e7c:	843fffc4 	addi	r16,r16,-1
  800e80:	9809883a 	mov	r4,r19
  800e84:	880b883a 	mov	r5,r17
  800e88:	80800005 	stb	r2,0(r16)
  800e8c:	01800284 	movi	r6,10
  800e90:	000f883a 	mov	r7,zero
  800e94:	080a0080 	call	80a008 <__udivdi3>
  800e98:	1027883a 	mov	r19,r2
  800e9c:	10c4b03a 	or	r2,r2,r3
  800ea0:	1823883a 	mov	r17,r3
  800ea4:	103fef1e 	bne	r2,zero,800e64 <__alt_mem_epcs_flash_controller_0+0xff7f7e64>
  800ea8:	d8c02817 	ldw	r3,160(sp)
  800eac:	dc402917 	ldw	r17,164(sp)
  800eb0:	b011883a 	mov	r8,r22
  800eb4:	1c07c83a 	sub	r3,r3,r16
  800eb8:	d8c02b15 	stw	r3,172(sp)
  800ebc:	00005f06 	br	80103c <___vfprintf_internal_r+0x75c>
  800ec0:	8025883a 	mov	r18,r16
  800ec4:	dc002903 	ldbu	r16,164(sp)
  800ec8:	e011883a 	mov	r8,fp
  800ecc:	84003fcc 	andi	r16,r16,255
  800ed0:	80071e1e 	bne	r16,zero,802b4c <___vfprintf_internal_r+0x226c>
  800ed4:	9080020c 	andi	r2,r18,8
  800ed8:	1004af26 	beq	r2,zero,802198 <___vfprintf_internal_r+0x18b8>
  800edc:	d9002e17 	ldw	r4,184(sp)
  800ee0:	d9402e17 	ldw	r5,184(sp)
  800ee4:	d8802e17 	ldw	r2,184(sp)
  800ee8:	21000017 	ldw	r4,0(r4)
  800eec:	29400117 	ldw	r5,4(r5)
  800ef0:	10800204 	addi	r2,r2,8
  800ef4:	d9003615 	stw	r4,216(sp)
  800ef8:	d9403815 	stw	r5,224(sp)
  800efc:	d8802e15 	stw	r2,184(sp)
  800f00:	d9003617 	ldw	r4,216(sp)
  800f04:	d9403817 	ldw	r5,224(sp)
  800f08:	da003d15 	stw	r8,244(sp)
  800f0c:	04000044 	movi	r16,1
  800f10:	0807ce40 	call	807ce4 <__fpclassifyd>
  800f14:	da003d17 	ldw	r8,244(sp)
  800f18:	1404441e 	bne	r2,r16,80202c <___vfprintf_internal_r+0x174c>
  800f1c:	d9003617 	ldw	r4,216(sp)
  800f20:	d9403817 	ldw	r5,224(sp)
  800f24:	000d883a 	mov	r6,zero
  800f28:	000f883a 	mov	r7,zero
  800f2c:	080c1840 	call	80c184 <__ledf2>
  800f30:	da003d17 	ldw	r8,244(sp)
  800f34:	1005e316 	blt	r2,zero,8026c4 <___vfprintf_internal_r+0x1de4>
  800f38:	df002783 	ldbu	fp,158(sp)
  800f3c:	008011c4 	movi	r2,71
  800f40:	1445580e 	bge	r2,r17,8024a4 <___vfprintf_internal_r+0x1bc4>
  800f44:	040020b4 	movhi	r16,130
  800f48:	8427fb04 	addi	r16,r16,-24596
  800f4c:	00c000c4 	movi	r3,3
  800f50:	00bfdfc4 	movi	r2,-129
  800f54:	d8c02915 	stw	r3,164(sp)
  800f58:	90a4703a 	and	r18,r18,r2
  800f5c:	d8c02b15 	stw	r3,172(sp)
  800f60:	d8002a15 	stw	zero,168(sp)
  800f64:	d8003215 	stw	zero,200(sp)
  800f68:	00003a06 	br	801054 <___vfprintf_internal_r+0x774>
  800f6c:	84000214 	ori	r16,r16,8
  800f70:	ac400007 	ldb	r17,0(r21)
  800f74:	003ebc06 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  800f78:	8025883a 	mov	r18,r16
  800f7c:	dc002903 	ldbu	r16,164(sp)
  800f80:	e011883a 	mov	r8,fp
  800f84:	84003fcc 	andi	r16,r16,255
  800f88:	8007001e 	bne	r16,zero,802b8c <___vfprintf_internal_r+0x22ac>
  800f8c:	94800414 	ori	r18,r18,16
  800f90:	9080080c 	andi	r2,r18,32
  800f94:	1002fa26 	beq	r2,zero,801b80 <___vfprintf_internal_r+0x12a0>
  800f98:	d9002e17 	ldw	r4,184(sp)
  800f9c:	d9402a17 	ldw	r5,168(sp)
  800fa0:	d8002785 	stb	zero,158(sp)
  800fa4:	20800204 	addi	r2,r4,8
  800fa8:	24c00017 	ldw	r19,0(r4)
  800fac:	25800117 	ldw	r22,4(r4)
  800fb0:	2804b116 	blt	r5,zero,802278 <___vfprintf_internal_r+0x1998>
  800fb4:	013fdfc4 	movi	r4,-129
  800fb8:	9d86b03a 	or	r3,r19,r22
  800fbc:	d8802e15 	stw	r2,184(sp)
  800fc0:	9124703a 	and	r18,r18,r4
  800fc4:	1802fb1e 	bne	r3,zero,801bb4 <___vfprintf_internal_r+0x12d4>
  800fc8:	d8c02a17 	ldw	r3,168(sp)
  800fcc:	0039883a 	mov	fp,zero
  800fd0:	1805e526 	beq	r3,zero,802768 <___vfprintf_internal_r+0x1e88>
  800fd4:	0027883a 	mov	r19,zero
  800fd8:	002d883a 	mov	r22,zero
  800fdc:	dc001e04 	addi	r16,sp,120
  800fe0:	9806d0fa 	srli	r3,r19,3
  800fe4:	b008977a 	slli	r4,r22,29
  800fe8:	b02cd0fa 	srli	r22,r22,3
  800fec:	9cc001cc 	andi	r19,r19,7
  800ff0:	98800c04 	addi	r2,r19,48
  800ff4:	843fffc4 	addi	r16,r16,-1
  800ff8:	20e6b03a 	or	r19,r4,r3
  800ffc:	80800005 	stb	r2,0(r16)
  801000:	9d86b03a 	or	r3,r19,r22
  801004:	183ff61e 	bne	r3,zero,800fe0 <__alt_mem_epcs_flash_controller_0+0xff7f7fe0>
  801008:	90c0004c 	andi	r3,r18,1
  80100c:	18014126 	beq	r3,zero,801514 <___vfprintf_internal_r+0xc34>
  801010:	10803fcc 	andi	r2,r2,255
  801014:	1080201c 	xori	r2,r2,128
  801018:	10bfe004 	addi	r2,r2,-128
  80101c:	00c00c04 	movi	r3,48
  801020:	10c13c26 	beq	r2,r3,801514 <___vfprintf_internal_r+0xc34>
  801024:	80ffffc5 	stb	r3,-1(r16)
  801028:	d8c02817 	ldw	r3,160(sp)
  80102c:	80bfffc4 	addi	r2,r16,-1
  801030:	1021883a 	mov	r16,r2
  801034:	1887c83a 	sub	r3,r3,r2
  801038:	d8c02b15 	stw	r3,172(sp)
  80103c:	d8802b17 	ldw	r2,172(sp)
  801040:	d9002a17 	ldw	r4,168(sp)
  801044:	1100010e 	bge	r2,r4,80104c <___vfprintf_internal_r+0x76c>
  801048:	2005883a 	mov	r2,r4
  80104c:	d8802915 	stw	r2,164(sp)
  801050:	d8003215 	stw	zero,200(sp)
  801054:	e7003fcc 	andi	fp,fp,255
  801058:	e700201c 	xori	fp,fp,128
  80105c:	e73fe004 	addi	fp,fp,-128
  801060:	e0000326 	beq	fp,zero,801070 <___vfprintf_internal_r+0x790>
  801064:	d8c02917 	ldw	r3,164(sp)
  801068:	18c00044 	addi	r3,r3,1
  80106c:	d8c02915 	stw	r3,164(sp)
  801070:	90c0008c 	andi	r3,r18,2
  801074:	d8c02c15 	stw	r3,176(sp)
  801078:	18000326 	beq	r3,zero,801088 <___vfprintf_internal_r+0x7a8>
  80107c:	d8c02917 	ldw	r3,164(sp)
  801080:	18c00084 	addi	r3,r3,2
  801084:	d8c02915 	stw	r3,164(sp)
  801088:	90c0210c 	andi	r3,r18,132
  80108c:	d8c03015 	stw	r3,192(sp)
  801090:	1801c51e 	bne	r3,zero,8017a8 <___vfprintf_internal_r+0xec8>
  801094:	d9003117 	ldw	r4,196(sp)
  801098:	d8c02917 	ldw	r3,164(sp)
  80109c:	20e7c83a 	sub	r19,r4,r3
  8010a0:	04c1c10e 	bge	zero,r19,8017a8 <___vfprintf_internal_r+0xec8>
  8010a4:	02400404 	movi	r9,16
  8010a8:	d8c02017 	ldw	r3,128(sp)
  8010ac:	d8801f17 	ldw	r2,124(sp)
  8010b0:	4cc52f0e 	bge	r9,r19,802570 <___vfprintf_internal_r+0x1c90>
  8010b4:	014020b4 	movhi	r5,130
  8010b8:	29680e84 	addi	r5,r5,-24518
  8010bc:	dc403b15 	stw	r17,236(sp)
  8010c0:	d9403515 	stw	r5,212(sp)
  8010c4:	9823883a 	mov	r17,r19
  8010c8:	482d883a 	mov	r22,r9
  8010cc:	9027883a 	mov	r19,r18
  8010d0:	070001c4 	movi	fp,7
  8010d4:	8025883a 	mov	r18,r16
  8010d8:	dc002d17 	ldw	r16,180(sp)
  8010dc:	00000306 	br	8010ec <___vfprintf_internal_r+0x80c>
  8010e0:	8c7ffc04 	addi	r17,r17,-16
  8010e4:	42000204 	addi	r8,r8,8
  8010e8:	b440130e 	bge	r22,r17,801138 <___vfprintf_internal_r+0x858>
  8010ec:	010020b4 	movhi	r4,130
  8010f0:	18c00404 	addi	r3,r3,16
  8010f4:	10800044 	addi	r2,r2,1
  8010f8:	21280e84 	addi	r4,r4,-24518
  8010fc:	41000015 	stw	r4,0(r8)
  801100:	45800115 	stw	r22,4(r8)
  801104:	d8c02015 	stw	r3,128(sp)
  801108:	d8801f15 	stw	r2,124(sp)
  80110c:	e0bff40e 	bge	fp,r2,8010e0 <__alt_mem_epcs_flash_controller_0+0xff7f80e0>
  801110:	d9801e04 	addi	r6,sp,120
  801114:	b80b883a 	mov	r5,r23
  801118:	8009883a 	mov	r4,r16
  80111c:	08080c00 	call	8080c0 <__sprint_r>
  801120:	103ef31e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801124:	8c7ffc04 	addi	r17,r17,-16
  801128:	d8c02017 	ldw	r3,128(sp)
  80112c:	d8801f17 	ldw	r2,124(sp)
  801130:	da000404 	addi	r8,sp,16
  801134:	b47fed16 	blt	r22,r17,8010ec <__alt_mem_epcs_flash_controller_0+0xff7f80ec>
  801138:	9021883a 	mov	r16,r18
  80113c:	9825883a 	mov	r18,r19
  801140:	8827883a 	mov	r19,r17
  801144:	dc403b17 	ldw	r17,236(sp)
  801148:	d9403517 	ldw	r5,212(sp)
  80114c:	98c7883a 	add	r3,r19,r3
  801150:	10800044 	addi	r2,r2,1
  801154:	41400015 	stw	r5,0(r8)
  801158:	44c00115 	stw	r19,4(r8)
  80115c:	d8c02015 	stw	r3,128(sp)
  801160:	d8801f15 	stw	r2,124(sp)
  801164:	010001c4 	movi	r4,7
  801168:	2082c516 	blt	r4,r2,801c80 <___vfprintf_internal_r+0x13a0>
  80116c:	df002787 	ldb	fp,158(sp)
  801170:	42000204 	addi	r8,r8,8
  801174:	e0000c26 	beq	fp,zero,8011a8 <___vfprintf_internal_r+0x8c8>
  801178:	d8801f17 	ldw	r2,124(sp)
  80117c:	d9002784 	addi	r4,sp,158
  801180:	18c00044 	addi	r3,r3,1
  801184:	10800044 	addi	r2,r2,1
  801188:	41000015 	stw	r4,0(r8)
  80118c:	01000044 	movi	r4,1
  801190:	41000115 	stw	r4,4(r8)
  801194:	d8c02015 	stw	r3,128(sp)
  801198:	d8801f15 	stw	r2,124(sp)
  80119c:	010001c4 	movi	r4,7
  8011a0:	20825e16 	blt	r4,r2,801b1c <___vfprintf_internal_r+0x123c>
  8011a4:	42000204 	addi	r8,r8,8
  8011a8:	d8802c17 	ldw	r2,176(sp)
  8011ac:	10000c26 	beq	r2,zero,8011e0 <___vfprintf_internal_r+0x900>
  8011b0:	d8801f17 	ldw	r2,124(sp)
  8011b4:	d9002704 	addi	r4,sp,156
  8011b8:	18c00084 	addi	r3,r3,2
  8011bc:	10800044 	addi	r2,r2,1
  8011c0:	41000015 	stw	r4,0(r8)
  8011c4:	01000084 	movi	r4,2
  8011c8:	41000115 	stw	r4,4(r8)
  8011cc:	d8c02015 	stw	r3,128(sp)
  8011d0:	d8801f15 	stw	r2,124(sp)
  8011d4:	010001c4 	movi	r4,7
  8011d8:	20825816 	blt	r4,r2,801b3c <___vfprintf_internal_r+0x125c>
  8011dc:	42000204 	addi	r8,r8,8
  8011e0:	d9003017 	ldw	r4,192(sp)
  8011e4:	00802004 	movi	r2,128
  8011e8:	2081bb26 	beq	r4,r2,8018d8 <___vfprintf_internal_r+0xff8>
  8011ec:	d9402a17 	ldw	r5,168(sp)
  8011f0:	d8802b17 	ldw	r2,172(sp)
  8011f4:	28adc83a 	sub	r22,r5,r2
  8011f8:	0580310e 	bge	zero,r22,8012c0 <___vfprintf_internal_r+0x9e0>
  8011fc:	07000404 	movi	fp,16
  801200:	d8801f17 	ldw	r2,124(sp)
  801204:	e584360e 	bge	fp,r22,8022e0 <___vfprintf_internal_r+0x1a00>
  801208:	014020b4 	movhi	r5,130
  80120c:	29680a84 	addi	r5,r5,-24534
  801210:	dc402a15 	stw	r17,168(sp)
  801214:	d9402c15 	stw	r5,176(sp)
  801218:	b023883a 	mov	r17,r22
  80121c:	04c001c4 	movi	r19,7
  801220:	a82d883a 	mov	r22,r21
  801224:	902b883a 	mov	r21,r18
  801228:	8025883a 	mov	r18,r16
  80122c:	dc002d17 	ldw	r16,180(sp)
  801230:	00000306 	br	801240 <___vfprintf_internal_r+0x960>
  801234:	8c7ffc04 	addi	r17,r17,-16
  801238:	42000204 	addi	r8,r8,8
  80123c:	e440110e 	bge	fp,r17,801284 <___vfprintf_internal_r+0x9a4>
  801240:	18c00404 	addi	r3,r3,16
  801244:	10800044 	addi	r2,r2,1
  801248:	45000015 	stw	r20,0(r8)
  80124c:	47000115 	stw	fp,4(r8)
  801250:	d8c02015 	stw	r3,128(sp)
  801254:	d8801f15 	stw	r2,124(sp)
  801258:	98bff60e 	bge	r19,r2,801234 <__alt_mem_epcs_flash_controller_0+0xff7f8234>
  80125c:	d9801e04 	addi	r6,sp,120
  801260:	b80b883a 	mov	r5,r23
  801264:	8009883a 	mov	r4,r16
  801268:	08080c00 	call	8080c0 <__sprint_r>
  80126c:	103ea01e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801270:	8c7ffc04 	addi	r17,r17,-16
  801274:	d8c02017 	ldw	r3,128(sp)
  801278:	d8801f17 	ldw	r2,124(sp)
  80127c:	da000404 	addi	r8,sp,16
  801280:	e47fef16 	blt	fp,r17,801240 <__alt_mem_epcs_flash_controller_0+0xff7f8240>
  801284:	9021883a 	mov	r16,r18
  801288:	a825883a 	mov	r18,r21
  80128c:	b02b883a 	mov	r21,r22
  801290:	882d883a 	mov	r22,r17
  801294:	dc402a17 	ldw	r17,168(sp)
  801298:	d9002c17 	ldw	r4,176(sp)
  80129c:	1d87883a 	add	r3,r3,r22
  8012a0:	10800044 	addi	r2,r2,1
  8012a4:	41000015 	stw	r4,0(r8)
  8012a8:	45800115 	stw	r22,4(r8)
  8012ac:	d8c02015 	stw	r3,128(sp)
  8012b0:	d8801f15 	stw	r2,124(sp)
  8012b4:	010001c4 	movi	r4,7
  8012b8:	20821016 	blt	r4,r2,801afc <___vfprintf_internal_r+0x121c>
  8012bc:	42000204 	addi	r8,r8,8
  8012c0:	9080400c 	andi	r2,r18,256
  8012c4:	10013a1e 	bne	r2,zero,8017b0 <___vfprintf_internal_r+0xed0>
  8012c8:	d9402b17 	ldw	r5,172(sp)
  8012cc:	d8801f17 	ldw	r2,124(sp)
  8012d0:	44000015 	stw	r16,0(r8)
  8012d4:	1947883a 	add	r3,r3,r5
  8012d8:	10800044 	addi	r2,r2,1
  8012dc:	41400115 	stw	r5,4(r8)
  8012e0:	d8c02015 	stw	r3,128(sp)
  8012e4:	d8801f15 	stw	r2,124(sp)
  8012e8:	010001c4 	movi	r4,7
  8012ec:	2081f516 	blt	r4,r2,801ac4 <___vfprintf_internal_r+0x11e4>
  8012f0:	42000204 	addi	r8,r8,8
  8012f4:	9480010c 	andi	r18,r18,4
  8012f8:	90003226 	beq	r18,zero,8013c4 <___vfprintf_internal_r+0xae4>
  8012fc:	d9403117 	ldw	r5,196(sp)
  801300:	d8802917 	ldw	r2,164(sp)
  801304:	28a1c83a 	sub	r16,r5,r2
  801308:	04002e0e 	bge	zero,r16,8013c4 <___vfprintf_internal_r+0xae4>
  80130c:	04400404 	movi	r17,16
  801310:	d8801f17 	ldw	r2,124(sp)
  801314:	8c04c40e 	bge	r17,r16,802628 <___vfprintf_internal_r+0x1d48>
  801318:	014020b4 	movhi	r5,130
  80131c:	29680e84 	addi	r5,r5,-24518
  801320:	d9403515 	stw	r5,212(sp)
  801324:	048001c4 	movi	r18,7
  801328:	dcc02d17 	ldw	r19,180(sp)
  80132c:	00000306 	br	80133c <___vfprintf_internal_r+0xa5c>
  801330:	843ffc04 	addi	r16,r16,-16
  801334:	42000204 	addi	r8,r8,8
  801338:	8c00130e 	bge	r17,r16,801388 <___vfprintf_internal_r+0xaa8>
  80133c:	010020b4 	movhi	r4,130
  801340:	18c00404 	addi	r3,r3,16
  801344:	10800044 	addi	r2,r2,1
  801348:	21280e84 	addi	r4,r4,-24518
  80134c:	41000015 	stw	r4,0(r8)
  801350:	44400115 	stw	r17,4(r8)
  801354:	d8c02015 	stw	r3,128(sp)
  801358:	d8801f15 	stw	r2,124(sp)
  80135c:	90bff40e 	bge	r18,r2,801330 <__alt_mem_epcs_flash_controller_0+0xff7f8330>
  801360:	d9801e04 	addi	r6,sp,120
  801364:	b80b883a 	mov	r5,r23
  801368:	9809883a 	mov	r4,r19
  80136c:	08080c00 	call	8080c0 <__sprint_r>
  801370:	103e5f1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801374:	843ffc04 	addi	r16,r16,-16
  801378:	d8c02017 	ldw	r3,128(sp)
  80137c:	d8801f17 	ldw	r2,124(sp)
  801380:	da000404 	addi	r8,sp,16
  801384:	8c3fed16 	blt	r17,r16,80133c <__alt_mem_epcs_flash_controller_0+0xff7f833c>
  801388:	d9403517 	ldw	r5,212(sp)
  80138c:	1c07883a 	add	r3,r3,r16
  801390:	10800044 	addi	r2,r2,1
  801394:	41400015 	stw	r5,0(r8)
  801398:	44000115 	stw	r16,4(r8)
  80139c:	d8c02015 	stw	r3,128(sp)
  8013a0:	d8801f15 	stw	r2,124(sp)
  8013a4:	010001c4 	movi	r4,7
  8013a8:	2080060e 	bge	r4,r2,8013c4 <___vfprintf_internal_r+0xae4>
  8013ac:	d9002d17 	ldw	r4,180(sp)
  8013b0:	d9801e04 	addi	r6,sp,120
  8013b4:	b80b883a 	mov	r5,r23
  8013b8:	08080c00 	call	8080c0 <__sprint_r>
  8013bc:	103e4c1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  8013c0:	d8c02017 	ldw	r3,128(sp)
  8013c4:	d8803117 	ldw	r2,196(sp)
  8013c8:	d9002917 	ldw	r4,164(sp)
  8013cc:	1100010e 	bge	r2,r4,8013d4 <___vfprintf_internal_r+0xaf4>
  8013d0:	2005883a 	mov	r2,r4
  8013d4:	d9402f17 	ldw	r5,188(sp)
  8013d8:	288b883a 	add	r5,r5,r2
  8013dc:	d9402f15 	stw	r5,188(sp)
  8013e0:	1801c01e 	bne	r3,zero,801ae4 <___vfprintf_internal_r+0x1204>
  8013e4:	a8800007 	ldb	r2,0(r21)
  8013e8:	d8001f15 	stw	zero,124(sp)
  8013ec:	da000404 	addi	r8,sp,16
  8013f0:	103d751e 	bne	r2,zero,8009c8 <__alt_mem_epcs_flash_controller_0+0xff7f79c8>
  8013f4:	a823883a 	mov	r17,r21
  8013f8:	003d8b06 	br	800a28 <__alt_mem_epcs_flash_controller_0+0xff7f7a28>
  8013fc:	8025883a 	mov	r18,r16
  801400:	dc002903 	ldbu	r16,164(sp)
  801404:	e011883a 	mov	r8,fp
  801408:	84003fcc 	andi	r16,r16,255
  80140c:	8005e51e 	bne	r16,zero,802ba4 <___vfprintf_internal_r+0x22c4>
  801410:	94800414 	ori	r18,r18,16
  801414:	9080080c 	andi	r2,r18,32
  801418:	10022b26 	beq	r2,zero,801cc8 <___vfprintf_internal_r+0x13e8>
  80141c:	d9002e17 	ldw	r4,184(sp)
  801420:	d9402a17 	ldw	r5,168(sp)
  801424:	d8002785 	stb	zero,158(sp)
  801428:	20c00204 	addi	r3,r4,8
  80142c:	24c00017 	ldw	r19,0(r4)
  801430:	25800117 	ldw	r22,4(r4)
  801434:	28042e16 	blt	r5,zero,8024f0 <___vfprintf_internal_r+0x1c10>
  801438:	013fdfc4 	movi	r4,-129
  80143c:	9d84b03a 	or	r2,r19,r22
  801440:	d8c02e15 	stw	r3,184(sp)
  801444:	9124703a 	and	r18,r18,r4
  801448:	0039883a 	mov	fp,zero
  80144c:	103e801e 	bne	r2,zero,800e50 <__alt_mem_epcs_flash_controller_0+0xff7f7e50>
  801450:	d9002a17 	ldw	r4,168(sp)
  801454:	2002e01e 	bne	r4,zero,801fd8 <___vfprintf_internal_r+0x16f8>
  801458:	d8002a15 	stw	zero,168(sp)
  80145c:	d8002b15 	stw	zero,172(sp)
  801460:	dc001e04 	addi	r16,sp,120
  801464:	003ef506 	br	80103c <__alt_mem_epcs_flash_controller_0+0xff7f803c>
  801468:	8025883a 	mov	r18,r16
  80146c:	dc002903 	ldbu	r16,164(sp)
  801470:	e011883a 	mov	r8,fp
  801474:	84003fcc 	andi	r16,r16,255
  801478:	8005ba1e 	bne	r16,zero,802b64 <___vfprintf_internal_r+0x2284>
  80147c:	010020b4 	movhi	r4,130
  801480:	2127fe04 	addi	r4,r4,-24584
  801484:	d9003915 	stw	r4,228(sp)
  801488:	9080080c 	andi	r2,r18,32
  80148c:	10006126 	beq	r2,zero,801614 <___vfprintf_internal_r+0xd34>
  801490:	d9402e17 	ldw	r5,184(sp)
  801494:	2cc00017 	ldw	r19,0(r5)
  801498:	2d800117 	ldw	r22,4(r5)
  80149c:	29400204 	addi	r5,r5,8
  8014a0:	d9402e15 	stw	r5,184(sp)
  8014a4:	9080004c 	andi	r2,r18,1
  8014a8:	1001ac26 	beq	r2,zero,801b5c <___vfprintf_internal_r+0x127c>
  8014ac:	9d84b03a 	or	r2,r19,r22
  8014b0:	10038526 	beq	r2,zero,8022c8 <___vfprintf_internal_r+0x19e8>
  8014b4:	d8c02a17 	ldw	r3,168(sp)
  8014b8:	00800c04 	movi	r2,48
  8014bc:	d8802705 	stb	r2,156(sp)
  8014c0:	dc402745 	stb	r17,157(sp)
  8014c4:	d8002785 	stb	zero,158(sp)
  8014c8:	90800094 	ori	r2,r18,2
  8014cc:	18047916 	blt	r3,zero,8026b4 <___vfprintf_internal_r+0x1dd4>
  8014d0:	00bfdfc4 	movi	r2,-129
  8014d4:	90a4703a 	and	r18,r18,r2
  8014d8:	94800094 	ori	r18,r18,2
  8014dc:	0039883a 	mov	fp,zero
  8014e0:	d9003917 	ldw	r4,228(sp)
  8014e4:	dc001e04 	addi	r16,sp,120
  8014e8:	988003cc 	andi	r2,r19,15
  8014ec:	b006973a 	slli	r3,r22,28
  8014f0:	2085883a 	add	r2,r4,r2
  8014f4:	9826d13a 	srli	r19,r19,4
  8014f8:	10800003 	ldbu	r2,0(r2)
  8014fc:	b02cd13a 	srli	r22,r22,4
  801500:	843fffc4 	addi	r16,r16,-1
  801504:	1ce6b03a 	or	r19,r3,r19
  801508:	80800005 	stb	r2,0(r16)
  80150c:	9d84b03a 	or	r2,r19,r22
  801510:	103ff51e 	bne	r2,zero,8014e8 <__alt_mem_epcs_flash_controller_0+0xff7f84e8>
  801514:	d8c02817 	ldw	r3,160(sp)
  801518:	1c07c83a 	sub	r3,r3,r16
  80151c:	d8c02b15 	stw	r3,172(sp)
  801520:	003ec606 	br	80103c <__alt_mem_epcs_flash_controller_0+0xff7f803c>
  801524:	8025883a 	mov	r18,r16
  801528:	dc002903 	ldbu	r16,164(sp)
  80152c:	e011883a 	mov	r8,fp
  801530:	84003fcc 	andi	r16,r16,255
  801534:	803e9626 	beq	r16,zero,800f90 <__alt_mem_epcs_flash_controller_0+0xff7f7f90>
  801538:	d8c02b03 	ldbu	r3,172(sp)
  80153c:	d8c02785 	stb	r3,158(sp)
  801540:	003e9306 	br	800f90 <__alt_mem_epcs_flash_controller_0+0xff7f7f90>
  801544:	00c00044 	movi	r3,1
  801548:	d8c02905 	stb	r3,164(sp)
  80154c:	00c00ac4 	movi	r3,43
  801550:	d8c02b05 	stb	r3,172(sp)
  801554:	ac400007 	ldb	r17,0(r21)
  801558:	003d4306 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  80155c:	84000814 	ori	r16,r16,32
  801560:	ac400007 	ldb	r17,0(r21)
  801564:	003d4006 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  801568:	d8802e17 	ldw	r2,184(sp)
  80156c:	8025883a 	mov	r18,r16
  801570:	d8002785 	stb	zero,158(sp)
  801574:	14000017 	ldw	r16,0(r2)
  801578:	e011883a 	mov	r8,fp
  80157c:	14c00104 	addi	r19,r2,4
  801580:	80042d26 	beq	r16,zero,802638 <___vfprintf_internal_r+0x1d58>
  801584:	d8c02a17 	ldw	r3,168(sp)
  801588:	1803e416 	blt	r3,zero,80251c <___vfprintf_internal_r+0x1c3c>
  80158c:	180d883a 	mov	r6,r3
  801590:	000b883a 	mov	r5,zero
  801594:	8009883a 	mov	r4,r16
  801598:	df003d15 	stw	fp,244(sp)
  80159c:	08062180 	call	806218 <memchr>
  8015a0:	da003d17 	ldw	r8,244(sp)
  8015a4:	10046826 	beq	r2,zero,802748 <___vfprintf_internal_r+0x1e68>
  8015a8:	1405c83a 	sub	r2,r2,r16
  8015ac:	d8802b15 	stw	r2,172(sp)
  8015b0:	1003e016 	blt	r2,zero,802534 <___vfprintf_internal_r+0x1c54>
  8015b4:	df002783 	ldbu	fp,158(sp)
  8015b8:	d8802915 	stw	r2,164(sp)
  8015bc:	dcc02e15 	stw	r19,184(sp)
  8015c0:	d8002a15 	stw	zero,168(sp)
  8015c4:	d8003215 	stw	zero,200(sp)
  8015c8:	003ea206 	br	801054 <__alt_mem_epcs_flash_controller_0+0xff7f8054>
  8015cc:	8025883a 	mov	r18,r16
  8015d0:	dc002903 	ldbu	r16,164(sp)
  8015d4:	e011883a 	mov	r8,fp
  8015d8:	84003fcc 	andi	r16,r16,255
  8015dc:	803f8d26 	beq	r16,zero,801414 <__alt_mem_epcs_flash_controller_0+0xff7f8414>
  8015e0:	d8c02b03 	ldbu	r3,172(sp)
  8015e4:	d8c02785 	stb	r3,158(sp)
  8015e8:	003f8a06 	br	801414 <__alt_mem_epcs_flash_controller_0+0xff7f8414>
  8015ec:	8025883a 	mov	r18,r16
  8015f0:	dc002903 	ldbu	r16,164(sp)
  8015f4:	e011883a 	mov	r8,fp
  8015f8:	84003fcc 	andi	r16,r16,255
  8015fc:	8005661e 	bne	r16,zero,802b98 <___vfprintf_internal_r+0x22b8>
  801600:	010020b4 	movhi	r4,130
  801604:	21280304 	addi	r4,r4,-24564
  801608:	d9003915 	stw	r4,228(sp)
  80160c:	9080080c 	andi	r2,r18,32
  801610:	103f9f1e 	bne	r2,zero,801490 <__alt_mem_epcs_flash_controller_0+0xff7f8490>
  801614:	9080040c 	andi	r2,r18,16
  801618:	1002eb26 	beq	r2,zero,8021c8 <___vfprintf_internal_r+0x18e8>
  80161c:	d8802e17 	ldw	r2,184(sp)
  801620:	002d883a 	mov	r22,zero
  801624:	14c00017 	ldw	r19,0(r2)
  801628:	10800104 	addi	r2,r2,4
  80162c:	d8802e15 	stw	r2,184(sp)
  801630:	003f9c06 	br	8014a4 <__alt_mem_epcs_flash_controller_0+0xff7f84a4>
  801634:	d8802b07 	ldb	r2,172(sp)
  801638:	1002e11e 	bne	r2,zero,8021c0 <___vfprintf_internal_r+0x18e0>
  80163c:	00c00044 	movi	r3,1
  801640:	d8c02905 	stb	r3,164(sp)
  801644:	00c00804 	movi	r3,32
  801648:	d8c02b05 	stb	r3,172(sp)
  80164c:	ac400007 	ldb	r17,0(r21)
  801650:	003d0506 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  801654:	84000054 	ori	r16,r16,1
  801658:	ac400007 	ldb	r17,0(r21)
  80165c:	003d0206 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  801660:	8025883a 	mov	r18,r16
  801664:	dc002903 	ldbu	r16,164(sp)
  801668:	e011883a 	mov	r8,fp
  80166c:	84003fcc 	andi	r16,r16,255
  801670:	803de726 	beq	r16,zero,800e10 <__alt_mem_epcs_flash_controller_0+0xff7f7e10>
  801674:	d8c02b03 	ldbu	r3,172(sp)
  801678:	d8c02785 	stb	r3,158(sp)
  80167c:	003de406 	br	800e10 <__alt_mem_epcs_flash_controller_0+0xff7f7e10>
  801680:	84001014 	ori	r16,r16,64
  801684:	ac400007 	ldb	r17,0(r21)
  801688:	003cf706 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  80168c:	ac400007 	ldb	r17,0(r21)
  801690:	00801b04 	movi	r2,108
  801694:	88838f26 	beq	r17,r2,8024d4 <___vfprintf_internal_r+0x1bf4>
  801698:	84000414 	ori	r16,r16,16
  80169c:	003cf206 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  8016a0:	8025883a 	mov	r18,r16
  8016a4:	dc002903 	ldbu	r16,164(sp)
  8016a8:	e011883a 	mov	r8,fp
  8016ac:	84003fcc 	andi	r16,r16,255
  8016b0:	80053f1e 	bne	r16,zero,802bb0 <___vfprintf_internal_r+0x22d0>
  8016b4:	9080080c 	andi	r2,r18,32
  8016b8:	1002d226 	beq	r2,zero,802204 <___vfprintf_internal_r+0x1924>
  8016bc:	d9002e17 	ldw	r4,184(sp)
  8016c0:	d9402f17 	ldw	r5,188(sp)
  8016c4:	20800017 	ldw	r2,0(r4)
  8016c8:	2807d7fa 	srai	r3,r5,31
  8016cc:	21000104 	addi	r4,r4,4
  8016d0:	d9002e15 	stw	r4,184(sp)
  8016d4:	11400015 	stw	r5,0(r2)
  8016d8:	10c00115 	stw	r3,4(r2)
  8016dc:	003cb806 	br	8009c0 <__alt_mem_epcs_flash_controller_0+0xff7f79c0>
  8016e0:	d8c02e17 	ldw	r3,184(sp)
  8016e4:	d9002e17 	ldw	r4,184(sp)
  8016e8:	8025883a 	mov	r18,r16
  8016ec:	18800017 	ldw	r2,0(r3)
  8016f0:	21000104 	addi	r4,r4,4
  8016f4:	00c00044 	movi	r3,1
  8016f8:	e011883a 	mov	r8,fp
  8016fc:	d8c02915 	stw	r3,164(sp)
  801700:	d8002785 	stb	zero,158(sp)
  801704:	d8801405 	stb	r2,80(sp)
  801708:	d9002e15 	stw	r4,184(sp)
  80170c:	d8c02b15 	stw	r3,172(sp)
  801710:	d8002a15 	stw	zero,168(sp)
  801714:	d8003215 	stw	zero,200(sp)
  801718:	dc001404 	addi	r16,sp,80
  80171c:	0039883a 	mov	fp,zero
  801720:	003e5306 	br	801070 <__alt_mem_epcs_flash_controller_0+0xff7f8070>
  801724:	010020b4 	movhi	r4,130
  801728:	21280304 	addi	r4,r4,-24564
  80172c:	0039883a 	mov	fp,zero
  801730:	d9003915 	stw	r4,228(sp)
  801734:	04401e04 	movi	r17,120
  801738:	003f6906 	br	8014e0 <__alt_mem_epcs_flash_controller_0+0xff7f84e0>
  80173c:	8025883a 	mov	r18,r16
  801740:	dc002903 	ldbu	r16,164(sp)
  801744:	e011883a 	mov	r8,fp
  801748:	84003fcc 	andi	r16,r16,255
  80174c:	8005081e 	bne	r16,zero,802b70 <___vfprintf_internal_r+0x2290>
  801750:	883d6126 	beq	r17,zero,800cd8 <__alt_mem_epcs_flash_controller_0+0xff7f7cd8>
  801754:	00c00044 	movi	r3,1
  801758:	d8c02915 	stw	r3,164(sp)
  80175c:	dc401405 	stb	r17,80(sp)
  801760:	d8002785 	stb	zero,158(sp)
  801764:	003fe906 	br	80170c <__alt_mem_epcs_flash_controller_0+0xff7f870c>
  801768:	014020b4 	movhi	r5,130
  80176c:	29680304 	addi	r5,r5,-24564
  801770:	d9403915 	stw	r5,228(sp)
  801774:	d8c02e15 	stw	r3,184(sp)
  801778:	1025883a 	mov	r18,r2
  80177c:	04401e04 	movi	r17,120
  801780:	9d84b03a 	or	r2,r19,r22
  801784:	1000fc1e 	bne	r2,zero,801b78 <___vfprintf_internal_r+0x1298>
  801788:	0039883a 	mov	fp,zero
  80178c:	00800084 	movi	r2,2
  801790:	10803fcc 	andi	r2,r2,255
  801794:	00c00044 	movi	r3,1
  801798:	10c20f26 	beq	r2,r3,801fd8 <___vfprintf_internal_r+0x16f8>
  80179c:	00c00084 	movi	r3,2
  8017a0:	10fd3326 	beq	r2,r3,800c70 <__alt_mem_epcs_flash_controller_0+0xff7f7c70>
  8017a4:	003e0b06 	br	800fd4 <__alt_mem_epcs_flash_controller_0+0xff7f7fd4>
  8017a8:	d8c02017 	ldw	r3,128(sp)
  8017ac:	003e7106 	br	801174 <__alt_mem_epcs_flash_controller_0+0xff7f8174>
  8017b0:	00801944 	movi	r2,101
  8017b4:	14407e0e 	bge	r2,r17,8019b0 <___vfprintf_internal_r+0x10d0>
  8017b8:	d9003617 	ldw	r4,216(sp)
  8017bc:	d9403817 	ldw	r5,224(sp)
  8017c0:	000d883a 	mov	r6,zero
  8017c4:	000f883a 	mov	r7,zero
  8017c8:	d8c03c15 	stw	r3,240(sp)
  8017cc:	da003d15 	stw	r8,244(sp)
  8017d0:	080c0200 	call	80c020 <__eqdf2>
  8017d4:	d8c03c17 	ldw	r3,240(sp)
  8017d8:	da003d17 	ldw	r8,244(sp)
  8017dc:	1000f71e 	bne	r2,zero,801bbc <___vfprintf_internal_r+0x12dc>
  8017e0:	d8801f17 	ldw	r2,124(sp)
  8017e4:	010020b4 	movhi	r4,130
  8017e8:	21280a04 	addi	r4,r4,-24536
  8017ec:	18c00044 	addi	r3,r3,1
  8017f0:	10800044 	addi	r2,r2,1
  8017f4:	41000015 	stw	r4,0(r8)
  8017f8:	01000044 	movi	r4,1
  8017fc:	41000115 	stw	r4,4(r8)
  801800:	d8c02015 	stw	r3,128(sp)
  801804:	d8801f15 	stw	r2,124(sp)
  801808:	010001c4 	movi	r4,7
  80180c:	2082b816 	blt	r4,r2,8022f0 <___vfprintf_internal_r+0x1a10>
  801810:	42000204 	addi	r8,r8,8
  801814:	d8802617 	ldw	r2,152(sp)
  801818:	d9403317 	ldw	r5,204(sp)
  80181c:	11400216 	blt	r2,r5,801828 <___vfprintf_internal_r+0xf48>
  801820:	9080004c 	andi	r2,r18,1
  801824:	103eb326 	beq	r2,zero,8012f4 <__alt_mem_epcs_flash_controller_0+0xff7f82f4>
  801828:	d8803717 	ldw	r2,220(sp)
  80182c:	d9003417 	ldw	r4,208(sp)
  801830:	d9403717 	ldw	r5,220(sp)
  801834:	1887883a 	add	r3,r3,r2
  801838:	d8801f17 	ldw	r2,124(sp)
  80183c:	41000015 	stw	r4,0(r8)
  801840:	41400115 	stw	r5,4(r8)
  801844:	10800044 	addi	r2,r2,1
  801848:	d8c02015 	stw	r3,128(sp)
  80184c:	d8801f15 	stw	r2,124(sp)
  801850:	010001c4 	movi	r4,7
  801854:	20832916 	blt	r4,r2,8024fc <___vfprintf_internal_r+0x1c1c>
  801858:	42000204 	addi	r8,r8,8
  80185c:	d8803317 	ldw	r2,204(sp)
  801860:	143fffc4 	addi	r16,r2,-1
  801864:	043ea30e 	bge	zero,r16,8012f4 <__alt_mem_epcs_flash_controller_0+0xff7f82f4>
  801868:	04400404 	movi	r17,16
  80186c:	d8801f17 	ldw	r2,124(sp)
  801870:	8c00880e 	bge	r17,r16,801a94 <___vfprintf_internal_r+0x11b4>
  801874:	014020b4 	movhi	r5,130
  801878:	29680a84 	addi	r5,r5,-24534
  80187c:	d9402c15 	stw	r5,176(sp)
  801880:	058001c4 	movi	r22,7
  801884:	dcc02d17 	ldw	r19,180(sp)
  801888:	00000306 	br	801898 <___vfprintf_internal_r+0xfb8>
  80188c:	42000204 	addi	r8,r8,8
  801890:	843ffc04 	addi	r16,r16,-16
  801894:	8c00820e 	bge	r17,r16,801aa0 <___vfprintf_internal_r+0x11c0>
  801898:	18c00404 	addi	r3,r3,16
  80189c:	10800044 	addi	r2,r2,1
  8018a0:	45000015 	stw	r20,0(r8)
  8018a4:	44400115 	stw	r17,4(r8)
  8018a8:	d8c02015 	stw	r3,128(sp)
  8018ac:	d8801f15 	stw	r2,124(sp)
  8018b0:	b0bff60e 	bge	r22,r2,80188c <__alt_mem_epcs_flash_controller_0+0xff7f888c>
  8018b4:	d9801e04 	addi	r6,sp,120
  8018b8:	b80b883a 	mov	r5,r23
  8018bc:	9809883a 	mov	r4,r19
  8018c0:	08080c00 	call	8080c0 <__sprint_r>
  8018c4:	103d0a1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  8018c8:	d8c02017 	ldw	r3,128(sp)
  8018cc:	d8801f17 	ldw	r2,124(sp)
  8018d0:	da000404 	addi	r8,sp,16
  8018d4:	003fee06 	br	801890 <__alt_mem_epcs_flash_controller_0+0xff7f8890>
  8018d8:	d9403117 	ldw	r5,196(sp)
  8018dc:	d8802917 	ldw	r2,164(sp)
  8018e0:	28adc83a 	sub	r22,r5,r2
  8018e4:	05be410e 	bge	zero,r22,8011ec <__alt_mem_epcs_flash_controller_0+0xff7f81ec>
  8018e8:	07000404 	movi	fp,16
  8018ec:	d8801f17 	ldw	r2,124(sp)
  8018f0:	e5838f0e 	bge	fp,r22,802730 <___vfprintf_internal_r+0x1e50>
  8018f4:	014020b4 	movhi	r5,130
  8018f8:	29680a84 	addi	r5,r5,-24534
  8018fc:	dc403015 	stw	r17,192(sp)
  801900:	d9402c15 	stw	r5,176(sp)
  801904:	b023883a 	mov	r17,r22
  801908:	04c001c4 	movi	r19,7
  80190c:	a82d883a 	mov	r22,r21
  801910:	902b883a 	mov	r21,r18
  801914:	8025883a 	mov	r18,r16
  801918:	dc002d17 	ldw	r16,180(sp)
  80191c:	00000306 	br	80192c <___vfprintf_internal_r+0x104c>
  801920:	8c7ffc04 	addi	r17,r17,-16
  801924:	42000204 	addi	r8,r8,8
  801928:	e440110e 	bge	fp,r17,801970 <___vfprintf_internal_r+0x1090>
  80192c:	18c00404 	addi	r3,r3,16
  801930:	10800044 	addi	r2,r2,1
  801934:	45000015 	stw	r20,0(r8)
  801938:	47000115 	stw	fp,4(r8)
  80193c:	d8c02015 	stw	r3,128(sp)
  801940:	d8801f15 	stw	r2,124(sp)
  801944:	98bff60e 	bge	r19,r2,801920 <__alt_mem_epcs_flash_controller_0+0xff7f8920>
  801948:	d9801e04 	addi	r6,sp,120
  80194c:	b80b883a 	mov	r5,r23
  801950:	8009883a 	mov	r4,r16
  801954:	08080c00 	call	8080c0 <__sprint_r>
  801958:	103ce51e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  80195c:	8c7ffc04 	addi	r17,r17,-16
  801960:	d8c02017 	ldw	r3,128(sp)
  801964:	d8801f17 	ldw	r2,124(sp)
  801968:	da000404 	addi	r8,sp,16
  80196c:	e47fef16 	blt	fp,r17,80192c <__alt_mem_epcs_flash_controller_0+0xff7f892c>
  801970:	9021883a 	mov	r16,r18
  801974:	a825883a 	mov	r18,r21
  801978:	b02b883a 	mov	r21,r22
  80197c:	882d883a 	mov	r22,r17
  801980:	dc403017 	ldw	r17,192(sp)
  801984:	d9002c17 	ldw	r4,176(sp)
  801988:	1d87883a 	add	r3,r3,r22
  80198c:	10800044 	addi	r2,r2,1
  801990:	41000015 	stw	r4,0(r8)
  801994:	45800115 	stw	r22,4(r8)
  801998:	d8c02015 	stw	r3,128(sp)
  80199c:	d8801f15 	stw	r2,124(sp)
  8019a0:	010001c4 	movi	r4,7
  8019a4:	20818e16 	blt	r4,r2,801fe0 <___vfprintf_internal_r+0x1700>
  8019a8:	42000204 	addi	r8,r8,8
  8019ac:	003e0f06 	br	8011ec <__alt_mem_epcs_flash_controller_0+0xff7f81ec>
  8019b0:	d9403317 	ldw	r5,204(sp)
  8019b4:	00800044 	movi	r2,1
  8019b8:	18c00044 	addi	r3,r3,1
  8019bc:	1141530e 	bge	r2,r5,801f0c <___vfprintf_internal_r+0x162c>
  8019c0:	dc401f17 	ldw	r17,124(sp)
  8019c4:	00800044 	movi	r2,1
  8019c8:	40800115 	stw	r2,4(r8)
  8019cc:	8c400044 	addi	r17,r17,1
  8019d0:	44000015 	stw	r16,0(r8)
  8019d4:	d8c02015 	stw	r3,128(sp)
  8019d8:	dc401f15 	stw	r17,124(sp)
  8019dc:	008001c4 	movi	r2,7
  8019e0:	14416b16 	blt	r2,r17,801f90 <___vfprintf_internal_r+0x16b0>
  8019e4:	42000204 	addi	r8,r8,8
  8019e8:	d8803717 	ldw	r2,220(sp)
  8019ec:	d9003417 	ldw	r4,208(sp)
  8019f0:	8c400044 	addi	r17,r17,1
  8019f4:	10c7883a 	add	r3,r2,r3
  8019f8:	40800115 	stw	r2,4(r8)
  8019fc:	41000015 	stw	r4,0(r8)
  801a00:	d8c02015 	stw	r3,128(sp)
  801a04:	dc401f15 	stw	r17,124(sp)
  801a08:	008001c4 	movi	r2,7
  801a0c:	14416916 	blt	r2,r17,801fb4 <___vfprintf_internal_r+0x16d4>
  801a10:	45800204 	addi	r22,r8,8
  801a14:	d9003617 	ldw	r4,216(sp)
  801a18:	d9403817 	ldw	r5,224(sp)
  801a1c:	000d883a 	mov	r6,zero
  801a20:	000f883a 	mov	r7,zero
  801a24:	d8c03c15 	stw	r3,240(sp)
  801a28:	080c0200 	call	80c020 <__eqdf2>
  801a2c:	d8c03c17 	ldw	r3,240(sp)
  801a30:	1000bc26 	beq	r2,zero,801d24 <___vfprintf_internal_r+0x1444>
  801a34:	d9403317 	ldw	r5,204(sp)
  801a38:	84000044 	addi	r16,r16,1
  801a3c:	8c400044 	addi	r17,r17,1
  801a40:	28bfffc4 	addi	r2,r5,-1
  801a44:	1887883a 	add	r3,r3,r2
  801a48:	b0800115 	stw	r2,4(r22)
  801a4c:	b4000015 	stw	r16,0(r22)
  801a50:	d8c02015 	stw	r3,128(sp)
  801a54:	dc401f15 	stw	r17,124(sp)
  801a58:	008001c4 	movi	r2,7
  801a5c:	14414316 	blt	r2,r17,801f6c <___vfprintf_internal_r+0x168c>
  801a60:	b5800204 	addi	r22,r22,8
  801a64:	d9003a17 	ldw	r4,232(sp)
  801a68:	df0022c4 	addi	fp,sp,139
  801a6c:	8c400044 	addi	r17,r17,1
  801a70:	20c7883a 	add	r3,r4,r3
  801a74:	b7000015 	stw	fp,0(r22)
  801a78:	b1000115 	stw	r4,4(r22)
  801a7c:	d8c02015 	stw	r3,128(sp)
  801a80:	dc401f15 	stw	r17,124(sp)
  801a84:	008001c4 	movi	r2,7
  801a88:	14400e16 	blt	r2,r17,801ac4 <___vfprintf_internal_r+0x11e4>
  801a8c:	b2000204 	addi	r8,r22,8
  801a90:	003e1806 	br	8012f4 <__alt_mem_epcs_flash_controller_0+0xff7f82f4>
  801a94:	010020b4 	movhi	r4,130
  801a98:	21280a84 	addi	r4,r4,-24534
  801a9c:	d9002c15 	stw	r4,176(sp)
  801aa0:	d9002c17 	ldw	r4,176(sp)
  801aa4:	1c07883a 	add	r3,r3,r16
  801aa8:	44000115 	stw	r16,4(r8)
  801aac:	41000015 	stw	r4,0(r8)
  801ab0:	10800044 	addi	r2,r2,1
  801ab4:	d8c02015 	stw	r3,128(sp)
  801ab8:	d8801f15 	stw	r2,124(sp)
  801abc:	010001c4 	movi	r4,7
  801ac0:	20be0b0e 	bge	r4,r2,8012f0 <__alt_mem_epcs_flash_controller_0+0xff7f82f0>
  801ac4:	d9002d17 	ldw	r4,180(sp)
  801ac8:	d9801e04 	addi	r6,sp,120
  801acc:	b80b883a 	mov	r5,r23
  801ad0:	08080c00 	call	8080c0 <__sprint_r>
  801ad4:	103c861e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801ad8:	d8c02017 	ldw	r3,128(sp)
  801adc:	da000404 	addi	r8,sp,16
  801ae0:	003e0406 	br	8012f4 <__alt_mem_epcs_flash_controller_0+0xff7f82f4>
  801ae4:	d9002d17 	ldw	r4,180(sp)
  801ae8:	d9801e04 	addi	r6,sp,120
  801aec:	b80b883a 	mov	r5,r23
  801af0:	08080c00 	call	8080c0 <__sprint_r>
  801af4:	103e3b26 	beq	r2,zero,8013e4 <__alt_mem_epcs_flash_controller_0+0xff7f83e4>
  801af8:	003c7d06 	br	800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801afc:	d9002d17 	ldw	r4,180(sp)
  801b00:	d9801e04 	addi	r6,sp,120
  801b04:	b80b883a 	mov	r5,r23
  801b08:	08080c00 	call	8080c0 <__sprint_r>
  801b0c:	103c781e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801b10:	d8c02017 	ldw	r3,128(sp)
  801b14:	da000404 	addi	r8,sp,16
  801b18:	003de906 	br	8012c0 <__alt_mem_epcs_flash_controller_0+0xff7f82c0>
  801b1c:	d9002d17 	ldw	r4,180(sp)
  801b20:	d9801e04 	addi	r6,sp,120
  801b24:	b80b883a 	mov	r5,r23
  801b28:	08080c00 	call	8080c0 <__sprint_r>
  801b2c:	103c701e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801b30:	d8c02017 	ldw	r3,128(sp)
  801b34:	da000404 	addi	r8,sp,16
  801b38:	003d9b06 	br	8011a8 <__alt_mem_epcs_flash_controller_0+0xff7f81a8>
  801b3c:	d9002d17 	ldw	r4,180(sp)
  801b40:	d9801e04 	addi	r6,sp,120
  801b44:	b80b883a 	mov	r5,r23
  801b48:	08080c00 	call	8080c0 <__sprint_r>
  801b4c:	103c681e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801b50:	d8c02017 	ldw	r3,128(sp)
  801b54:	da000404 	addi	r8,sp,16
  801b58:	003da106 	br	8011e0 <__alt_mem_epcs_flash_controller_0+0xff7f81e0>
  801b5c:	d9402a17 	ldw	r5,168(sp)
  801b60:	d8002785 	stb	zero,158(sp)
  801b64:	283f0616 	blt	r5,zero,801780 <__alt_mem_epcs_flash_controller_0+0xff7f8780>
  801b68:	00ffdfc4 	movi	r3,-129
  801b6c:	9d84b03a 	or	r2,r19,r22
  801b70:	90e4703a 	and	r18,r18,r3
  801b74:	103c3b26 	beq	r2,zero,800c64 <__alt_mem_epcs_flash_controller_0+0xff7f7c64>
  801b78:	0039883a 	mov	fp,zero
  801b7c:	003e5806 	br	8014e0 <__alt_mem_epcs_flash_controller_0+0xff7f84e0>
  801b80:	9080040c 	andi	r2,r18,16
  801b84:	1001b326 	beq	r2,zero,802254 <___vfprintf_internal_r+0x1974>
  801b88:	d8c02e17 	ldw	r3,184(sp)
  801b8c:	d9002a17 	ldw	r4,168(sp)
  801b90:	d8002785 	stb	zero,158(sp)
  801b94:	18800104 	addi	r2,r3,4
  801b98:	1cc00017 	ldw	r19,0(r3)
  801b9c:	002d883a 	mov	r22,zero
  801ba0:	2001b516 	blt	r4,zero,802278 <___vfprintf_internal_r+0x1998>
  801ba4:	00ffdfc4 	movi	r3,-129
  801ba8:	d8802e15 	stw	r2,184(sp)
  801bac:	90e4703a 	and	r18,r18,r3
  801bb0:	983d0526 	beq	r19,zero,800fc8 <__alt_mem_epcs_flash_controller_0+0xff7f7fc8>
  801bb4:	0039883a 	mov	fp,zero
  801bb8:	003d0806 	br	800fdc <__alt_mem_epcs_flash_controller_0+0xff7f7fdc>
  801bbc:	dc402617 	ldw	r17,152(sp)
  801bc0:	0441d30e 	bge	zero,r17,802310 <___vfprintf_internal_r+0x1a30>
  801bc4:	dc403217 	ldw	r17,200(sp)
  801bc8:	d8803317 	ldw	r2,204(sp)
  801bcc:	1440010e 	bge	r2,r17,801bd4 <___vfprintf_internal_r+0x12f4>
  801bd0:	1023883a 	mov	r17,r2
  801bd4:	04400a0e 	bge	zero,r17,801c00 <___vfprintf_internal_r+0x1320>
  801bd8:	d8801f17 	ldw	r2,124(sp)
  801bdc:	1c47883a 	add	r3,r3,r17
  801be0:	44000015 	stw	r16,0(r8)
  801be4:	10800044 	addi	r2,r2,1
  801be8:	44400115 	stw	r17,4(r8)
  801bec:	d8c02015 	stw	r3,128(sp)
  801bf0:	d8801f15 	stw	r2,124(sp)
  801bf4:	010001c4 	movi	r4,7
  801bf8:	20826516 	blt	r4,r2,802590 <___vfprintf_internal_r+0x1cb0>
  801bfc:	42000204 	addi	r8,r8,8
  801c00:	88026116 	blt	r17,zero,802588 <___vfprintf_internal_r+0x1ca8>
  801c04:	d9003217 	ldw	r4,200(sp)
  801c08:	2463c83a 	sub	r17,r4,r17
  801c0c:	04407b0e 	bge	zero,r17,801dfc <___vfprintf_internal_r+0x151c>
  801c10:	05800404 	movi	r22,16
  801c14:	d8801f17 	ldw	r2,124(sp)
  801c18:	b4419d0e 	bge	r22,r17,802290 <___vfprintf_internal_r+0x19b0>
  801c1c:	010020b4 	movhi	r4,130
  801c20:	21280a84 	addi	r4,r4,-24534
  801c24:	d9002c15 	stw	r4,176(sp)
  801c28:	070001c4 	movi	fp,7
  801c2c:	dcc02d17 	ldw	r19,180(sp)
  801c30:	00000306 	br	801c40 <___vfprintf_internal_r+0x1360>
  801c34:	42000204 	addi	r8,r8,8
  801c38:	8c7ffc04 	addi	r17,r17,-16
  801c3c:	b441970e 	bge	r22,r17,80229c <___vfprintf_internal_r+0x19bc>
  801c40:	18c00404 	addi	r3,r3,16
  801c44:	10800044 	addi	r2,r2,1
  801c48:	45000015 	stw	r20,0(r8)
  801c4c:	45800115 	stw	r22,4(r8)
  801c50:	d8c02015 	stw	r3,128(sp)
  801c54:	d8801f15 	stw	r2,124(sp)
  801c58:	e0bff60e 	bge	fp,r2,801c34 <__alt_mem_epcs_flash_controller_0+0xff7f8c34>
  801c5c:	d9801e04 	addi	r6,sp,120
  801c60:	b80b883a 	mov	r5,r23
  801c64:	9809883a 	mov	r4,r19
  801c68:	08080c00 	call	8080c0 <__sprint_r>
  801c6c:	103c201e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801c70:	d8c02017 	ldw	r3,128(sp)
  801c74:	d8801f17 	ldw	r2,124(sp)
  801c78:	da000404 	addi	r8,sp,16
  801c7c:	003fee06 	br	801c38 <__alt_mem_epcs_flash_controller_0+0xff7f8c38>
  801c80:	d9002d17 	ldw	r4,180(sp)
  801c84:	d9801e04 	addi	r6,sp,120
  801c88:	b80b883a 	mov	r5,r23
  801c8c:	08080c00 	call	8080c0 <__sprint_r>
  801c90:	103c171e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801c94:	d8c02017 	ldw	r3,128(sp)
  801c98:	df002787 	ldb	fp,158(sp)
  801c9c:	da000404 	addi	r8,sp,16
  801ca0:	003d3406 	br	801174 <__alt_mem_epcs_flash_controller_0+0xff7f8174>
  801ca4:	9080040c 	andi	r2,r18,16
  801ca8:	10016126 	beq	r2,zero,802230 <___vfprintf_internal_r+0x1950>
  801cac:	d9402e17 	ldw	r5,184(sp)
  801cb0:	2cc00017 	ldw	r19,0(r5)
  801cb4:	29400104 	addi	r5,r5,4
  801cb8:	d9402e15 	stw	r5,184(sp)
  801cbc:	982dd7fa 	srai	r22,r19,31
  801cc0:	b005883a 	mov	r2,r22
  801cc4:	003c5a06 	br	800e30 <__alt_mem_epcs_flash_controller_0+0xff7f7e30>
  801cc8:	9080040c 	andi	r2,r18,16
  801ccc:	10003526 	beq	r2,zero,801da4 <___vfprintf_internal_r+0x14c4>
  801cd0:	d8c02e17 	ldw	r3,184(sp)
  801cd4:	d9002a17 	ldw	r4,168(sp)
  801cd8:	d8002785 	stb	zero,158(sp)
  801cdc:	18800104 	addi	r2,r3,4
  801ce0:	1cc00017 	ldw	r19,0(r3)
  801ce4:	002d883a 	mov	r22,zero
  801ce8:	20003716 	blt	r4,zero,801dc8 <___vfprintf_internal_r+0x14e8>
  801cec:	00ffdfc4 	movi	r3,-129
  801cf0:	d8802e15 	stw	r2,184(sp)
  801cf4:	90e4703a 	and	r18,r18,r3
  801cf8:	0039883a 	mov	fp,zero
  801cfc:	983dd426 	beq	r19,zero,801450 <__alt_mem_epcs_flash_controller_0+0xff7f8450>
  801d00:	00800244 	movi	r2,9
  801d04:	14fc5336 	bltu	r2,r19,800e54 <__alt_mem_epcs_flash_controller_0+0xff7f7e54>
  801d08:	d8c02817 	ldw	r3,160(sp)
  801d0c:	dc001dc4 	addi	r16,sp,119
  801d10:	9cc00c04 	addi	r19,r19,48
  801d14:	1c07c83a 	sub	r3,r3,r16
  801d18:	dcc01dc5 	stb	r19,119(sp)
  801d1c:	d8c02b15 	stw	r3,172(sp)
  801d20:	003cc606 	br	80103c <__alt_mem_epcs_flash_controller_0+0xff7f803c>
  801d24:	d8803317 	ldw	r2,204(sp)
  801d28:	143fffc4 	addi	r16,r2,-1
  801d2c:	043f4d0e 	bge	zero,r16,801a64 <__alt_mem_epcs_flash_controller_0+0xff7f8a64>
  801d30:	07000404 	movi	fp,16
  801d34:	e400810e 	bge	fp,r16,801f3c <___vfprintf_internal_r+0x165c>
  801d38:	014020b4 	movhi	r5,130
  801d3c:	29680a84 	addi	r5,r5,-24534
  801d40:	d9402c15 	stw	r5,176(sp)
  801d44:	01c001c4 	movi	r7,7
  801d48:	dcc02d17 	ldw	r19,180(sp)
  801d4c:	00000306 	br	801d5c <___vfprintf_internal_r+0x147c>
  801d50:	b5800204 	addi	r22,r22,8
  801d54:	843ffc04 	addi	r16,r16,-16
  801d58:	e4007b0e 	bge	fp,r16,801f48 <___vfprintf_internal_r+0x1668>
  801d5c:	18c00404 	addi	r3,r3,16
  801d60:	8c400044 	addi	r17,r17,1
  801d64:	b5000015 	stw	r20,0(r22)
  801d68:	b7000115 	stw	fp,4(r22)
  801d6c:	d8c02015 	stw	r3,128(sp)
  801d70:	dc401f15 	stw	r17,124(sp)
  801d74:	3c7ff60e 	bge	r7,r17,801d50 <__alt_mem_epcs_flash_controller_0+0xff7f8d50>
  801d78:	d9801e04 	addi	r6,sp,120
  801d7c:	b80b883a 	mov	r5,r23
  801d80:	9809883a 	mov	r4,r19
  801d84:	d9c03c15 	stw	r7,240(sp)
  801d88:	08080c00 	call	8080c0 <__sprint_r>
  801d8c:	d9c03c17 	ldw	r7,240(sp)
  801d90:	103bd71e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801d94:	d8c02017 	ldw	r3,128(sp)
  801d98:	dc401f17 	ldw	r17,124(sp)
  801d9c:	dd800404 	addi	r22,sp,16
  801da0:	003fec06 	br	801d54 <__alt_mem_epcs_flash_controller_0+0xff7f8d54>
  801da4:	9080100c 	andi	r2,r18,64
  801da8:	d8002785 	stb	zero,158(sp)
  801dac:	10010e26 	beq	r2,zero,8021e8 <___vfprintf_internal_r+0x1908>
  801db0:	d9402e17 	ldw	r5,184(sp)
  801db4:	d8c02a17 	ldw	r3,168(sp)
  801db8:	002d883a 	mov	r22,zero
  801dbc:	28800104 	addi	r2,r5,4
  801dc0:	2cc0000b 	ldhu	r19,0(r5)
  801dc4:	183fc90e 	bge	r3,zero,801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  801dc8:	d8802e15 	stw	r2,184(sp)
  801dcc:	0039883a 	mov	fp,zero
  801dd0:	9d84b03a 	or	r2,r19,r22
  801dd4:	103c1e1e 	bne	r2,zero,800e50 <__alt_mem_epcs_flash_controller_0+0xff7f7e50>
  801dd8:	00800044 	movi	r2,1
  801ddc:	003e6c06 	br	801790 <__alt_mem_epcs_flash_controller_0+0xff7f8790>
  801de0:	d9002d17 	ldw	r4,180(sp)
  801de4:	d9801e04 	addi	r6,sp,120
  801de8:	b80b883a 	mov	r5,r23
  801dec:	08080c00 	call	8080c0 <__sprint_r>
  801df0:	103bbf1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801df4:	d8c02017 	ldw	r3,128(sp)
  801df8:	da000404 	addi	r8,sp,16
  801dfc:	d9003217 	ldw	r4,200(sp)
  801e00:	d8802617 	ldw	r2,152(sp)
  801e04:	d9403317 	ldw	r5,204(sp)
  801e08:	8123883a 	add	r17,r16,r4
  801e0c:	11400216 	blt	r2,r5,801e18 <___vfprintf_internal_r+0x1538>
  801e10:	9100004c 	andi	r4,r18,1
  801e14:	20000d26 	beq	r4,zero,801e4c <___vfprintf_internal_r+0x156c>
  801e18:	d9003717 	ldw	r4,220(sp)
  801e1c:	d9403417 	ldw	r5,208(sp)
  801e20:	1907883a 	add	r3,r3,r4
  801e24:	d9001f17 	ldw	r4,124(sp)
  801e28:	41400015 	stw	r5,0(r8)
  801e2c:	d9403717 	ldw	r5,220(sp)
  801e30:	21000044 	addi	r4,r4,1
  801e34:	d8c02015 	stw	r3,128(sp)
  801e38:	41400115 	stw	r5,4(r8)
  801e3c:	d9001f15 	stw	r4,124(sp)
  801e40:	014001c4 	movi	r5,7
  801e44:	2901e816 	blt	r5,r4,8025e8 <___vfprintf_internal_r+0x1d08>
  801e48:	42000204 	addi	r8,r8,8
  801e4c:	d9003317 	ldw	r4,204(sp)
  801e50:	8121883a 	add	r16,r16,r4
  801e54:	2085c83a 	sub	r2,r4,r2
  801e58:	8461c83a 	sub	r16,r16,r17
  801e5c:	1400010e 	bge	r2,r16,801e64 <___vfprintf_internal_r+0x1584>
  801e60:	1021883a 	mov	r16,r2
  801e64:	04000a0e 	bge	zero,r16,801e90 <___vfprintf_internal_r+0x15b0>
  801e68:	d9001f17 	ldw	r4,124(sp)
  801e6c:	1c07883a 	add	r3,r3,r16
  801e70:	44400015 	stw	r17,0(r8)
  801e74:	21000044 	addi	r4,r4,1
  801e78:	44000115 	stw	r16,4(r8)
  801e7c:	d8c02015 	stw	r3,128(sp)
  801e80:	d9001f15 	stw	r4,124(sp)
  801e84:	014001c4 	movi	r5,7
  801e88:	2901fb16 	blt	r5,r4,802678 <___vfprintf_internal_r+0x1d98>
  801e8c:	42000204 	addi	r8,r8,8
  801e90:	8001f716 	blt	r16,zero,802670 <___vfprintf_internal_r+0x1d90>
  801e94:	1421c83a 	sub	r16,r2,r16
  801e98:	043d160e 	bge	zero,r16,8012f4 <__alt_mem_epcs_flash_controller_0+0xff7f82f4>
  801e9c:	04400404 	movi	r17,16
  801ea0:	d8801f17 	ldw	r2,124(sp)
  801ea4:	8c3efb0e 	bge	r17,r16,801a94 <__alt_mem_epcs_flash_controller_0+0xff7f8a94>
  801ea8:	014020b4 	movhi	r5,130
  801eac:	29680a84 	addi	r5,r5,-24534
  801eb0:	d9402c15 	stw	r5,176(sp)
  801eb4:	058001c4 	movi	r22,7
  801eb8:	dcc02d17 	ldw	r19,180(sp)
  801ebc:	00000306 	br	801ecc <___vfprintf_internal_r+0x15ec>
  801ec0:	42000204 	addi	r8,r8,8
  801ec4:	843ffc04 	addi	r16,r16,-16
  801ec8:	8c3ef50e 	bge	r17,r16,801aa0 <__alt_mem_epcs_flash_controller_0+0xff7f8aa0>
  801ecc:	18c00404 	addi	r3,r3,16
  801ed0:	10800044 	addi	r2,r2,1
  801ed4:	45000015 	stw	r20,0(r8)
  801ed8:	44400115 	stw	r17,4(r8)
  801edc:	d8c02015 	stw	r3,128(sp)
  801ee0:	d8801f15 	stw	r2,124(sp)
  801ee4:	b0bff60e 	bge	r22,r2,801ec0 <__alt_mem_epcs_flash_controller_0+0xff7f8ec0>
  801ee8:	d9801e04 	addi	r6,sp,120
  801eec:	b80b883a 	mov	r5,r23
  801ef0:	9809883a 	mov	r4,r19
  801ef4:	08080c00 	call	8080c0 <__sprint_r>
  801ef8:	103b7d1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801efc:	d8c02017 	ldw	r3,128(sp)
  801f00:	d8801f17 	ldw	r2,124(sp)
  801f04:	da000404 	addi	r8,sp,16
  801f08:	003fee06 	br	801ec4 <__alt_mem_epcs_flash_controller_0+0xff7f8ec4>
  801f0c:	9088703a 	and	r4,r18,r2
  801f10:	203eab1e 	bne	r4,zero,8019c0 <__alt_mem_epcs_flash_controller_0+0xff7f89c0>
  801f14:	dc401f17 	ldw	r17,124(sp)
  801f18:	40800115 	stw	r2,4(r8)
  801f1c:	44000015 	stw	r16,0(r8)
  801f20:	8c400044 	addi	r17,r17,1
  801f24:	d8c02015 	stw	r3,128(sp)
  801f28:	dc401f15 	stw	r17,124(sp)
  801f2c:	008001c4 	movi	r2,7
  801f30:	14400e16 	blt	r2,r17,801f6c <___vfprintf_internal_r+0x168c>
  801f34:	45800204 	addi	r22,r8,8
  801f38:	003eca06 	br	801a64 <__alt_mem_epcs_flash_controller_0+0xff7f8a64>
  801f3c:	010020b4 	movhi	r4,130
  801f40:	21280a84 	addi	r4,r4,-24534
  801f44:	d9002c15 	stw	r4,176(sp)
  801f48:	d8802c17 	ldw	r2,176(sp)
  801f4c:	1c07883a 	add	r3,r3,r16
  801f50:	8c400044 	addi	r17,r17,1
  801f54:	b0800015 	stw	r2,0(r22)
  801f58:	b4000115 	stw	r16,4(r22)
  801f5c:	d8c02015 	stw	r3,128(sp)
  801f60:	dc401f15 	stw	r17,124(sp)
  801f64:	008001c4 	movi	r2,7
  801f68:	147ebd0e 	bge	r2,r17,801a60 <__alt_mem_epcs_flash_controller_0+0xff7f8a60>
  801f6c:	d9002d17 	ldw	r4,180(sp)
  801f70:	d9801e04 	addi	r6,sp,120
  801f74:	b80b883a 	mov	r5,r23
  801f78:	08080c00 	call	8080c0 <__sprint_r>
  801f7c:	103b5c1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801f80:	d8c02017 	ldw	r3,128(sp)
  801f84:	dc401f17 	ldw	r17,124(sp)
  801f88:	dd800404 	addi	r22,sp,16
  801f8c:	003eb506 	br	801a64 <__alt_mem_epcs_flash_controller_0+0xff7f8a64>
  801f90:	d9002d17 	ldw	r4,180(sp)
  801f94:	d9801e04 	addi	r6,sp,120
  801f98:	b80b883a 	mov	r5,r23
  801f9c:	08080c00 	call	8080c0 <__sprint_r>
  801fa0:	103b531e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801fa4:	d8c02017 	ldw	r3,128(sp)
  801fa8:	dc401f17 	ldw	r17,124(sp)
  801fac:	da000404 	addi	r8,sp,16
  801fb0:	003e8d06 	br	8019e8 <__alt_mem_epcs_flash_controller_0+0xff7f89e8>
  801fb4:	d9002d17 	ldw	r4,180(sp)
  801fb8:	d9801e04 	addi	r6,sp,120
  801fbc:	b80b883a 	mov	r5,r23
  801fc0:	08080c00 	call	8080c0 <__sprint_r>
  801fc4:	103b4a1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801fc8:	d8c02017 	ldw	r3,128(sp)
  801fcc:	dc401f17 	ldw	r17,124(sp)
  801fd0:	dd800404 	addi	r22,sp,16
  801fd4:	003e8f06 	br	801a14 <__alt_mem_epcs_flash_controller_0+0xff7f8a14>
  801fd8:	0027883a 	mov	r19,zero
  801fdc:	003f4a06 	br	801d08 <__alt_mem_epcs_flash_controller_0+0xff7f8d08>
  801fe0:	d9002d17 	ldw	r4,180(sp)
  801fe4:	d9801e04 	addi	r6,sp,120
  801fe8:	b80b883a 	mov	r5,r23
  801fec:	08080c00 	call	8080c0 <__sprint_r>
  801ff0:	103b3f1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  801ff4:	d8c02017 	ldw	r3,128(sp)
  801ff8:	da000404 	addi	r8,sp,16
  801ffc:	003c7b06 	br	8011ec <__alt_mem_epcs_flash_controller_0+0xff7f81ec>
  802000:	d9402a17 	ldw	r5,168(sp)
  802004:	04e7c83a 	sub	r19,zero,r19
  802008:	07000b44 	movi	fp,45
  80200c:	9804c03a 	cmpne	r2,r19,zero
  802010:	05adc83a 	sub	r22,zero,r22
  802014:	df002785 	stb	fp,158(sp)
  802018:	b0adc83a 	sub	r22,r22,r2
  80201c:	28017b16 	blt	r5,zero,80260c <___vfprintf_internal_r+0x1d2c>
  802020:	00bfdfc4 	movi	r2,-129
  802024:	90a4703a 	and	r18,r18,r2
  802028:	003b8906 	br	800e50 <__alt_mem_epcs_flash_controller_0+0xff7f7e50>
  80202c:	d9003617 	ldw	r4,216(sp)
  802030:	d9403817 	ldw	r5,224(sp)
  802034:	da003d15 	stw	r8,244(sp)
  802038:	0807ce40 	call	807ce4 <__fpclassifyd>
  80203c:	da003d17 	ldw	r8,244(sp)
  802040:	1000f026 	beq	r2,zero,802404 <___vfprintf_internal_r+0x1b24>
  802044:	d9002a17 	ldw	r4,168(sp)
  802048:	05bff7c4 	movi	r22,-33
  80204c:	00bfffc4 	movi	r2,-1
  802050:	8dac703a 	and	r22,r17,r22
  802054:	20820026 	beq	r4,r2,802858 <___vfprintf_internal_r+0x1f78>
  802058:	008011c4 	movi	r2,71
  80205c:	b081f726 	beq	r22,r2,80283c <___vfprintf_internal_r+0x1f5c>
  802060:	d9003817 	ldw	r4,224(sp)
  802064:	90c04014 	ori	r3,r18,256
  802068:	d8c02c15 	stw	r3,176(sp)
  80206c:	20021516 	blt	r4,zero,8028c4 <___vfprintf_internal_r+0x1fe4>
  802070:	dcc03817 	ldw	r19,224(sp)
  802074:	d8002905 	stb	zero,164(sp)
  802078:	00801984 	movi	r2,102
  80207c:	8881f926 	beq	r17,r2,802864 <___vfprintf_internal_r+0x1f84>
  802080:	00801184 	movi	r2,70
  802084:	88821c26 	beq	r17,r2,8028f8 <___vfprintf_internal_r+0x2018>
  802088:	00801144 	movi	r2,69
  80208c:	b081ef26 	beq	r22,r2,80284c <___vfprintf_internal_r+0x1f6c>
  802090:	d8c02a17 	ldw	r3,168(sp)
  802094:	d8802104 	addi	r2,sp,132
  802098:	d8800315 	stw	r2,12(sp)
  80209c:	d9403617 	ldw	r5,216(sp)
  8020a0:	d8802504 	addi	r2,sp,148
  8020a4:	d9002d17 	ldw	r4,180(sp)
  8020a8:	d8800215 	stw	r2,8(sp)
  8020ac:	d8802604 	addi	r2,sp,152
  8020b0:	d8c00015 	stw	r3,0(sp)
  8020b4:	d8800115 	stw	r2,4(sp)
  8020b8:	01c00084 	movi	r7,2
  8020bc:	980d883a 	mov	r6,r19
  8020c0:	d8c03c15 	stw	r3,240(sp)
  8020c4:	da003d15 	stw	r8,244(sp)
  8020c8:	08030100 	call	803010 <_dtoa_r>
  8020cc:	1021883a 	mov	r16,r2
  8020d0:	008019c4 	movi	r2,103
  8020d4:	d8c03c17 	ldw	r3,240(sp)
  8020d8:	da003d17 	ldw	r8,244(sp)
  8020dc:	88817126 	beq	r17,r2,8026a4 <___vfprintf_internal_r+0x1dc4>
  8020e0:	008011c4 	movi	r2,71
  8020e4:	88829126 	beq	r17,r2,802b2c <___vfprintf_internal_r+0x224c>
  8020e8:	80f9883a 	add	fp,r16,r3
  8020ec:	d9003617 	ldw	r4,216(sp)
  8020f0:	000d883a 	mov	r6,zero
  8020f4:	000f883a 	mov	r7,zero
  8020f8:	980b883a 	mov	r5,r19
  8020fc:	da003d15 	stw	r8,244(sp)
  802100:	080c0200 	call	80c020 <__eqdf2>
  802104:	da003d17 	ldw	r8,244(sp)
  802108:	10018d26 	beq	r2,zero,802740 <___vfprintf_internal_r+0x1e60>
  80210c:	d8802117 	ldw	r2,132(sp)
  802110:	1700062e 	bgeu	r2,fp,80212c <___vfprintf_internal_r+0x184c>
  802114:	01000c04 	movi	r4,48
  802118:	10c00044 	addi	r3,r2,1
  80211c:	d8c02115 	stw	r3,132(sp)
  802120:	11000005 	stb	r4,0(r2)
  802124:	d8802117 	ldw	r2,132(sp)
  802128:	173ffb36 	bltu	r2,fp,802118 <__alt_mem_epcs_flash_controller_0+0xff7f9118>
  80212c:	1405c83a 	sub	r2,r2,r16
  802130:	d8803315 	stw	r2,204(sp)
  802134:	008011c4 	movi	r2,71
  802138:	b0817626 	beq	r22,r2,802714 <___vfprintf_internal_r+0x1e34>
  80213c:	00801944 	movi	r2,101
  802140:	1442800e 	bge	r2,r17,802b44 <___vfprintf_internal_r+0x2264>
  802144:	d8c02617 	ldw	r3,152(sp)
  802148:	00801984 	movi	r2,102
  80214c:	d8c03215 	stw	r3,200(sp)
  802150:	8881fe26 	beq	r17,r2,80294c <___vfprintf_internal_r+0x206c>
  802154:	d8c03217 	ldw	r3,200(sp)
  802158:	d9003317 	ldw	r4,204(sp)
  80215c:	1901dd16 	blt	r3,r4,8028d4 <___vfprintf_internal_r+0x1ff4>
  802160:	9480004c 	andi	r18,r18,1
  802164:	90022b1e 	bne	r18,zero,802a14 <___vfprintf_internal_r+0x2134>
  802168:	1805883a 	mov	r2,r3
  80216c:	18028316 	blt	r3,zero,802b7c <___vfprintf_internal_r+0x229c>
  802170:	d8c03217 	ldw	r3,200(sp)
  802174:	044019c4 	movi	r17,103
  802178:	d8c02b15 	stw	r3,172(sp)
  80217c:	df002907 	ldb	fp,164(sp)
  802180:	e001531e 	bne	fp,zero,8026d0 <___vfprintf_internal_r+0x1df0>
  802184:	df002783 	ldbu	fp,158(sp)
  802188:	d8802915 	stw	r2,164(sp)
  80218c:	dc802c17 	ldw	r18,176(sp)
  802190:	d8002a15 	stw	zero,168(sp)
  802194:	003baf06 	br	801054 <__alt_mem_epcs_flash_controller_0+0xff7f8054>
  802198:	d8c02e17 	ldw	r3,184(sp)
  80219c:	d9002e17 	ldw	r4,184(sp)
  8021a0:	d9402e17 	ldw	r5,184(sp)
  8021a4:	18c00017 	ldw	r3,0(r3)
  8021a8:	21000117 	ldw	r4,4(r4)
  8021ac:	29400204 	addi	r5,r5,8
  8021b0:	d8c03615 	stw	r3,216(sp)
  8021b4:	d9003815 	stw	r4,224(sp)
  8021b8:	d9402e15 	stw	r5,184(sp)
  8021bc:	003b5006 	br	800f00 <__alt_mem_epcs_flash_controller_0+0xff7f7f00>
  8021c0:	ac400007 	ldb	r17,0(r21)
  8021c4:	003a2806 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  8021c8:	9080100c 	andi	r2,r18,64
  8021cc:	1000a826 	beq	r2,zero,802470 <___vfprintf_internal_r+0x1b90>
  8021d0:	d8c02e17 	ldw	r3,184(sp)
  8021d4:	002d883a 	mov	r22,zero
  8021d8:	1cc0000b 	ldhu	r19,0(r3)
  8021dc:	18c00104 	addi	r3,r3,4
  8021e0:	d8c02e15 	stw	r3,184(sp)
  8021e4:	003caf06 	br	8014a4 <__alt_mem_epcs_flash_controller_0+0xff7f84a4>
  8021e8:	d9002e17 	ldw	r4,184(sp)
  8021ec:	d9402a17 	ldw	r5,168(sp)
  8021f0:	002d883a 	mov	r22,zero
  8021f4:	20800104 	addi	r2,r4,4
  8021f8:	24c00017 	ldw	r19,0(r4)
  8021fc:	283ebb0e 	bge	r5,zero,801cec <__alt_mem_epcs_flash_controller_0+0xff7f8cec>
  802200:	003ef106 	br	801dc8 <__alt_mem_epcs_flash_controller_0+0xff7f8dc8>
  802204:	9080040c 	andi	r2,r18,16
  802208:	1000921e 	bne	r2,zero,802454 <___vfprintf_internal_r+0x1b74>
  80220c:	9480100c 	andi	r18,r18,64
  802210:	90013926 	beq	r18,zero,8026f8 <___vfprintf_internal_r+0x1e18>
  802214:	d9402e17 	ldw	r5,184(sp)
  802218:	d8c02f17 	ldw	r3,188(sp)
  80221c:	28800017 	ldw	r2,0(r5)
  802220:	29400104 	addi	r5,r5,4
  802224:	d9402e15 	stw	r5,184(sp)
  802228:	10c0000d 	sth	r3,0(r2)
  80222c:	0039e406 	br	8009c0 <__alt_mem_epcs_flash_controller_0+0xff7f79c0>
  802230:	9080100c 	andi	r2,r18,64
  802234:	10008026 	beq	r2,zero,802438 <___vfprintf_internal_r+0x1b58>
  802238:	d8802e17 	ldw	r2,184(sp)
  80223c:	14c0000f 	ldh	r19,0(r2)
  802240:	10800104 	addi	r2,r2,4
  802244:	d8802e15 	stw	r2,184(sp)
  802248:	982dd7fa 	srai	r22,r19,31
  80224c:	b005883a 	mov	r2,r22
  802250:	003af706 	br	800e30 <__alt_mem_epcs_flash_controller_0+0xff7f7e30>
  802254:	9080100c 	andi	r2,r18,64
  802258:	d8002785 	stb	zero,158(sp)
  80225c:	10008a1e 	bne	r2,zero,802488 <___vfprintf_internal_r+0x1ba8>
  802260:	d9002e17 	ldw	r4,184(sp)
  802264:	d9402a17 	ldw	r5,168(sp)
  802268:	002d883a 	mov	r22,zero
  80226c:	20800104 	addi	r2,r4,4
  802270:	24c00017 	ldw	r19,0(r4)
  802274:	283e4b0e 	bge	r5,zero,801ba4 <__alt_mem_epcs_flash_controller_0+0xff7f8ba4>
  802278:	9d86b03a 	or	r3,r19,r22
  80227c:	d8802e15 	stw	r2,184(sp)
  802280:	183e4c1e 	bne	r3,zero,801bb4 <__alt_mem_epcs_flash_controller_0+0xff7f8bb4>
  802284:	0039883a 	mov	fp,zero
  802288:	0005883a 	mov	r2,zero
  80228c:	003d4006 	br	801790 <__alt_mem_epcs_flash_controller_0+0xff7f8790>
  802290:	014020b4 	movhi	r5,130
  802294:	29680a84 	addi	r5,r5,-24534
  802298:	d9402c15 	stw	r5,176(sp)
  80229c:	d9402c17 	ldw	r5,176(sp)
  8022a0:	1c47883a 	add	r3,r3,r17
  8022a4:	10800044 	addi	r2,r2,1
  8022a8:	41400015 	stw	r5,0(r8)
  8022ac:	44400115 	stw	r17,4(r8)
  8022b0:	d8c02015 	stw	r3,128(sp)
  8022b4:	d8801f15 	stw	r2,124(sp)
  8022b8:	010001c4 	movi	r4,7
  8022bc:	20bec816 	blt	r4,r2,801de0 <__alt_mem_epcs_flash_controller_0+0xff7f8de0>
  8022c0:	42000204 	addi	r8,r8,8
  8022c4:	003ecd06 	br	801dfc <__alt_mem_epcs_flash_controller_0+0xff7f8dfc>
  8022c8:	d9002a17 	ldw	r4,168(sp)
  8022cc:	d8002785 	stb	zero,158(sp)
  8022d0:	203d2d16 	blt	r4,zero,801788 <__alt_mem_epcs_flash_controller_0+0xff7f8788>
  8022d4:	00bfdfc4 	movi	r2,-129
  8022d8:	90a4703a 	and	r18,r18,r2
  8022dc:	003a6106 	br	800c64 <__alt_mem_epcs_flash_controller_0+0xff7f7c64>
  8022e0:	010020b4 	movhi	r4,130
  8022e4:	21280a84 	addi	r4,r4,-24534
  8022e8:	d9002c15 	stw	r4,176(sp)
  8022ec:	003bea06 	br	801298 <__alt_mem_epcs_flash_controller_0+0xff7f8298>
  8022f0:	d9002d17 	ldw	r4,180(sp)
  8022f4:	d9801e04 	addi	r6,sp,120
  8022f8:	b80b883a 	mov	r5,r23
  8022fc:	08080c00 	call	8080c0 <__sprint_r>
  802300:	103a7b1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  802304:	d8c02017 	ldw	r3,128(sp)
  802308:	da000404 	addi	r8,sp,16
  80230c:	003d4106 	br	801814 <__alt_mem_epcs_flash_controller_0+0xff7f8814>
  802310:	d8801f17 	ldw	r2,124(sp)
  802314:	014020b4 	movhi	r5,130
  802318:	01000044 	movi	r4,1
  80231c:	18c00044 	addi	r3,r3,1
  802320:	10800044 	addi	r2,r2,1
  802324:	29680a04 	addi	r5,r5,-24536
  802328:	41000115 	stw	r4,4(r8)
  80232c:	41400015 	stw	r5,0(r8)
  802330:	d8c02015 	stw	r3,128(sp)
  802334:	d8801f15 	stw	r2,124(sp)
  802338:	010001c4 	movi	r4,7
  80233c:	20805c16 	blt	r4,r2,8024b0 <___vfprintf_internal_r+0x1bd0>
  802340:	42000204 	addi	r8,r8,8
  802344:	8800041e 	bne	r17,zero,802358 <___vfprintf_internal_r+0x1a78>
  802348:	d8803317 	ldw	r2,204(sp)
  80234c:	1000021e 	bne	r2,zero,802358 <___vfprintf_internal_r+0x1a78>
  802350:	9080004c 	andi	r2,r18,1
  802354:	103be726 	beq	r2,zero,8012f4 <__alt_mem_epcs_flash_controller_0+0xff7f82f4>
  802358:	d9003717 	ldw	r4,220(sp)
  80235c:	d8801f17 	ldw	r2,124(sp)
  802360:	d9403417 	ldw	r5,208(sp)
  802364:	20c7883a 	add	r3,r4,r3
  802368:	10800044 	addi	r2,r2,1
  80236c:	41000115 	stw	r4,4(r8)
  802370:	41400015 	stw	r5,0(r8)
  802374:	d8c02015 	stw	r3,128(sp)
  802378:	d8801f15 	stw	r2,124(sp)
  80237c:	010001c4 	movi	r4,7
  802380:	20812116 	blt	r4,r2,802808 <___vfprintf_internal_r+0x1f28>
  802384:	42000204 	addi	r8,r8,8
  802388:	0463c83a 	sub	r17,zero,r17
  80238c:	0440730e 	bge	zero,r17,80255c <___vfprintf_internal_r+0x1c7c>
  802390:	05800404 	movi	r22,16
  802394:	b440860e 	bge	r22,r17,8025b0 <___vfprintf_internal_r+0x1cd0>
  802398:	014020b4 	movhi	r5,130
  80239c:	29680a84 	addi	r5,r5,-24534
  8023a0:	d9402c15 	stw	r5,176(sp)
  8023a4:	070001c4 	movi	fp,7
  8023a8:	dcc02d17 	ldw	r19,180(sp)
  8023ac:	00000306 	br	8023bc <___vfprintf_internal_r+0x1adc>
  8023b0:	42000204 	addi	r8,r8,8
  8023b4:	8c7ffc04 	addi	r17,r17,-16
  8023b8:	b440800e 	bge	r22,r17,8025bc <___vfprintf_internal_r+0x1cdc>
  8023bc:	18c00404 	addi	r3,r3,16
  8023c0:	10800044 	addi	r2,r2,1
  8023c4:	45000015 	stw	r20,0(r8)
  8023c8:	45800115 	stw	r22,4(r8)
  8023cc:	d8c02015 	stw	r3,128(sp)
  8023d0:	d8801f15 	stw	r2,124(sp)
  8023d4:	e0bff60e 	bge	fp,r2,8023b0 <__alt_mem_epcs_flash_controller_0+0xff7f93b0>
  8023d8:	d9801e04 	addi	r6,sp,120
  8023dc:	b80b883a 	mov	r5,r23
  8023e0:	9809883a 	mov	r4,r19
  8023e4:	08080c00 	call	8080c0 <__sprint_r>
  8023e8:	103a411e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  8023ec:	d8c02017 	ldw	r3,128(sp)
  8023f0:	d8801f17 	ldw	r2,124(sp)
  8023f4:	da000404 	addi	r8,sp,16
  8023f8:	003fee06 	br	8023b4 <__alt_mem_epcs_flash_controller_0+0xff7f93b4>
  8023fc:	00bfffc4 	movi	r2,-1
  802400:	003a3f06 	br	800d00 <__alt_mem_epcs_flash_controller_0+0xff7f7d00>
  802404:	008011c4 	movi	r2,71
  802408:	1440b816 	blt	r2,r17,8026ec <___vfprintf_internal_r+0x1e0c>
  80240c:	040020b4 	movhi	r16,130
  802410:	8427fc04 	addi	r16,r16,-24592
  802414:	00c000c4 	movi	r3,3
  802418:	00bfdfc4 	movi	r2,-129
  80241c:	d8c02915 	stw	r3,164(sp)
  802420:	90a4703a 	and	r18,r18,r2
  802424:	df002783 	ldbu	fp,158(sp)
  802428:	d8c02b15 	stw	r3,172(sp)
  80242c:	d8002a15 	stw	zero,168(sp)
  802430:	d8003215 	stw	zero,200(sp)
  802434:	003b0706 	br	801054 <__alt_mem_epcs_flash_controller_0+0xff7f8054>
  802438:	d8c02e17 	ldw	r3,184(sp)
  80243c:	1cc00017 	ldw	r19,0(r3)
  802440:	18c00104 	addi	r3,r3,4
  802444:	d8c02e15 	stw	r3,184(sp)
  802448:	982dd7fa 	srai	r22,r19,31
  80244c:	b005883a 	mov	r2,r22
  802450:	003a7706 	br	800e30 <__alt_mem_epcs_flash_controller_0+0xff7f7e30>
  802454:	d8c02e17 	ldw	r3,184(sp)
  802458:	d9002f17 	ldw	r4,188(sp)
  80245c:	18800017 	ldw	r2,0(r3)
  802460:	18c00104 	addi	r3,r3,4
  802464:	d8c02e15 	stw	r3,184(sp)
  802468:	11000015 	stw	r4,0(r2)
  80246c:	00395406 	br	8009c0 <__alt_mem_epcs_flash_controller_0+0xff7f79c0>
  802470:	d9002e17 	ldw	r4,184(sp)
  802474:	002d883a 	mov	r22,zero
  802478:	24c00017 	ldw	r19,0(r4)
  80247c:	21000104 	addi	r4,r4,4
  802480:	d9002e15 	stw	r4,184(sp)
  802484:	003c0706 	br	8014a4 <__alt_mem_epcs_flash_controller_0+0xff7f84a4>
  802488:	d9402e17 	ldw	r5,184(sp)
  80248c:	d8c02a17 	ldw	r3,168(sp)
  802490:	002d883a 	mov	r22,zero
  802494:	28800104 	addi	r2,r5,4
  802498:	2cc0000b 	ldhu	r19,0(r5)
  80249c:	183dc10e 	bge	r3,zero,801ba4 <__alt_mem_epcs_flash_controller_0+0xff7f8ba4>
  8024a0:	003f7506 	br	802278 <__alt_mem_epcs_flash_controller_0+0xff7f9278>
  8024a4:	040020b4 	movhi	r16,130
  8024a8:	8427fa04 	addi	r16,r16,-24600
  8024ac:	003aa706 	br	800f4c <__alt_mem_epcs_flash_controller_0+0xff7f7f4c>
  8024b0:	d9002d17 	ldw	r4,180(sp)
  8024b4:	d9801e04 	addi	r6,sp,120
  8024b8:	b80b883a 	mov	r5,r23
  8024bc:	08080c00 	call	8080c0 <__sprint_r>
  8024c0:	103a0b1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  8024c4:	dc402617 	ldw	r17,152(sp)
  8024c8:	d8c02017 	ldw	r3,128(sp)
  8024cc:	da000404 	addi	r8,sp,16
  8024d0:	003f9c06 	br	802344 <__alt_mem_epcs_flash_controller_0+0xff7f9344>
  8024d4:	ac400043 	ldbu	r17,1(r21)
  8024d8:	84000814 	ori	r16,r16,32
  8024dc:	ad400044 	addi	r21,r21,1
  8024e0:	8c403fcc 	andi	r17,r17,255
  8024e4:	8c40201c 	xori	r17,r17,128
  8024e8:	8c7fe004 	addi	r17,r17,-128
  8024ec:	00395e06 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  8024f0:	d8c02e15 	stw	r3,184(sp)
  8024f4:	0039883a 	mov	fp,zero
  8024f8:	003e3506 	br	801dd0 <__alt_mem_epcs_flash_controller_0+0xff7f8dd0>
  8024fc:	d9002d17 	ldw	r4,180(sp)
  802500:	d9801e04 	addi	r6,sp,120
  802504:	b80b883a 	mov	r5,r23
  802508:	08080c00 	call	8080c0 <__sprint_r>
  80250c:	1039f81e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  802510:	d8c02017 	ldw	r3,128(sp)
  802514:	da000404 	addi	r8,sp,16
  802518:	003cd006 	br	80185c <__alt_mem_epcs_flash_controller_0+0xff7f885c>
  80251c:	8009883a 	mov	r4,r16
  802520:	df003d15 	stw	fp,244(sp)
  802524:	08008480 	call	800848 <strlen>
  802528:	d8802b15 	stw	r2,172(sp)
  80252c:	da003d17 	ldw	r8,244(sp)
  802530:	103c200e 	bge	r2,zero,8015b4 <__alt_mem_epcs_flash_controller_0+0xff7f85b4>
  802534:	0005883a 	mov	r2,zero
  802538:	003c1e06 	br	8015b4 <__alt_mem_epcs_flash_controller_0+0xff7f85b4>
  80253c:	d9002d17 	ldw	r4,180(sp)
  802540:	d9801e04 	addi	r6,sp,120
  802544:	b80b883a 	mov	r5,r23
  802548:	08080c00 	call	8080c0 <__sprint_r>
  80254c:	1039e81e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  802550:	d8c02017 	ldw	r3,128(sp)
  802554:	d8801f17 	ldw	r2,124(sp)
  802558:	da000404 	addi	r8,sp,16
  80255c:	d9403317 	ldw	r5,204(sp)
  802560:	10800044 	addi	r2,r2,1
  802564:	44000015 	stw	r16,0(r8)
  802568:	28c7883a 	add	r3,r5,r3
  80256c:	003b5b06 	br	8012dc <__alt_mem_epcs_flash_controller_0+0xff7f82dc>
  802570:	010020b4 	movhi	r4,130
  802574:	21280e84 	addi	r4,r4,-24518
  802578:	d9003515 	stw	r4,212(sp)
  80257c:	003af206 	br	801148 <__alt_mem_epcs_flash_controller_0+0xff7f8148>
  802580:	013fffc4 	movi	r4,-1
  802584:	003a0806 	br	800da8 <__alt_mem_epcs_flash_controller_0+0xff7f7da8>
  802588:	0023883a 	mov	r17,zero
  80258c:	003d9d06 	br	801c04 <__alt_mem_epcs_flash_controller_0+0xff7f8c04>
  802590:	d9002d17 	ldw	r4,180(sp)
  802594:	d9801e04 	addi	r6,sp,120
  802598:	b80b883a 	mov	r5,r23
  80259c:	08080c00 	call	8080c0 <__sprint_r>
  8025a0:	1039d31e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  8025a4:	d8c02017 	ldw	r3,128(sp)
  8025a8:	da000404 	addi	r8,sp,16
  8025ac:	003d9406 	br	801c00 <__alt_mem_epcs_flash_controller_0+0xff7f8c00>
  8025b0:	010020b4 	movhi	r4,130
  8025b4:	21280a84 	addi	r4,r4,-24534
  8025b8:	d9002c15 	stw	r4,176(sp)
  8025bc:	d9002c17 	ldw	r4,176(sp)
  8025c0:	1c47883a 	add	r3,r3,r17
  8025c4:	10800044 	addi	r2,r2,1
  8025c8:	41000015 	stw	r4,0(r8)
  8025cc:	44400115 	stw	r17,4(r8)
  8025d0:	d8c02015 	stw	r3,128(sp)
  8025d4:	d8801f15 	stw	r2,124(sp)
  8025d8:	010001c4 	movi	r4,7
  8025dc:	20bfd716 	blt	r4,r2,80253c <__alt_mem_epcs_flash_controller_0+0xff7f953c>
  8025e0:	42000204 	addi	r8,r8,8
  8025e4:	003fdd06 	br	80255c <__alt_mem_epcs_flash_controller_0+0xff7f955c>
  8025e8:	d9002d17 	ldw	r4,180(sp)
  8025ec:	d9801e04 	addi	r6,sp,120
  8025f0:	b80b883a 	mov	r5,r23
  8025f4:	08080c00 	call	8080c0 <__sprint_r>
  8025f8:	1039bd1e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  8025fc:	d8802617 	ldw	r2,152(sp)
  802600:	d8c02017 	ldw	r3,128(sp)
  802604:	da000404 	addi	r8,sp,16
  802608:	003e1006 	br	801e4c <__alt_mem_epcs_flash_controller_0+0xff7f8e4c>
  80260c:	00800044 	movi	r2,1
  802610:	10803fcc 	andi	r2,r2,255
  802614:	00c00044 	movi	r3,1
  802618:	10fa0d26 	beq	r2,r3,800e50 <__alt_mem_epcs_flash_controller_0+0xff7f7e50>
  80261c:	00c00084 	movi	r3,2
  802620:	10fbaf26 	beq	r2,r3,8014e0 <__alt_mem_epcs_flash_controller_0+0xff7f84e0>
  802624:	003a6d06 	br	800fdc <__alt_mem_epcs_flash_controller_0+0xff7f7fdc>
  802628:	010020b4 	movhi	r4,130
  80262c:	21280e84 	addi	r4,r4,-24518
  802630:	d9003515 	stw	r4,212(sp)
  802634:	003b5406 	br	801388 <__alt_mem_epcs_flash_controller_0+0xff7f8388>
  802638:	d8802a17 	ldw	r2,168(sp)
  80263c:	00c00184 	movi	r3,6
  802640:	1880012e 	bgeu	r3,r2,802648 <___vfprintf_internal_r+0x1d68>
  802644:	1805883a 	mov	r2,r3
  802648:	d8802b15 	stw	r2,172(sp)
  80264c:	1000ef16 	blt	r2,zero,802a0c <___vfprintf_internal_r+0x212c>
  802650:	040020b4 	movhi	r16,130
  802654:	d8802915 	stw	r2,164(sp)
  802658:	dcc02e15 	stw	r19,184(sp)
  80265c:	d8002a15 	stw	zero,168(sp)
  802660:	d8003215 	stw	zero,200(sp)
  802664:	84280804 	addi	r16,r16,-24544
  802668:	0039883a 	mov	fp,zero
  80266c:	003a8006 	br	801070 <__alt_mem_epcs_flash_controller_0+0xff7f8070>
  802670:	0021883a 	mov	r16,zero
  802674:	003e0706 	br	801e94 <__alt_mem_epcs_flash_controller_0+0xff7f8e94>
  802678:	d9002d17 	ldw	r4,180(sp)
  80267c:	d9801e04 	addi	r6,sp,120
  802680:	b80b883a 	mov	r5,r23
  802684:	08080c00 	call	8080c0 <__sprint_r>
  802688:	1039991e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  80268c:	d8802617 	ldw	r2,152(sp)
  802690:	d9403317 	ldw	r5,204(sp)
  802694:	d8c02017 	ldw	r3,128(sp)
  802698:	da000404 	addi	r8,sp,16
  80269c:	2885c83a 	sub	r2,r5,r2
  8026a0:	003dfb06 	br	801e90 <__alt_mem_epcs_flash_controller_0+0xff7f8e90>
  8026a4:	9080004c 	andi	r2,r18,1
  8026a8:	103e8f1e 	bne	r2,zero,8020e8 <__alt_mem_epcs_flash_controller_0+0xff7f90e8>
  8026ac:	d8802117 	ldw	r2,132(sp)
  8026b0:	003e9e06 	br	80212c <__alt_mem_epcs_flash_controller_0+0xff7f912c>
  8026b4:	1025883a 	mov	r18,r2
  8026b8:	0039883a 	mov	fp,zero
  8026bc:	00800084 	movi	r2,2
  8026c0:	003fd306 	br	802610 <__alt_mem_epcs_flash_controller_0+0xff7f9610>
  8026c4:	07000b44 	movi	fp,45
  8026c8:	df002785 	stb	fp,158(sp)
  8026cc:	003a1b06 	br	800f3c <__alt_mem_epcs_flash_controller_0+0xff7f7f3c>
  8026d0:	00c00b44 	movi	r3,45
  8026d4:	d8c02785 	stb	r3,158(sp)
  8026d8:	d8802915 	stw	r2,164(sp)
  8026dc:	dc802c17 	ldw	r18,176(sp)
  8026e0:	d8002a15 	stw	zero,168(sp)
  8026e4:	07000b44 	movi	fp,45
  8026e8:	003a5e06 	br	801064 <__alt_mem_epcs_flash_controller_0+0xff7f8064>
  8026ec:	040020b4 	movhi	r16,130
  8026f0:	8427fd04 	addi	r16,r16,-24588
  8026f4:	003f4706 	br	802414 <__alt_mem_epcs_flash_controller_0+0xff7f9414>
  8026f8:	d9002e17 	ldw	r4,184(sp)
  8026fc:	d9402f17 	ldw	r5,188(sp)
  802700:	20800017 	ldw	r2,0(r4)
  802704:	21000104 	addi	r4,r4,4
  802708:	d9002e15 	stw	r4,184(sp)
  80270c:	11400015 	stw	r5,0(r2)
  802710:	0038ab06 	br	8009c0 <__alt_mem_epcs_flash_controller_0+0xff7f79c0>
  802714:	dd802617 	ldw	r22,152(sp)
  802718:	00bfff44 	movi	r2,-3
  80271c:	b0801c16 	blt	r22,r2,802790 <___vfprintf_internal_r+0x1eb0>
  802720:	d9402a17 	ldw	r5,168(sp)
  802724:	2d801a16 	blt	r5,r22,802790 <___vfprintf_internal_r+0x1eb0>
  802728:	dd803215 	stw	r22,200(sp)
  80272c:	003e8906 	br	802154 <__alt_mem_epcs_flash_controller_0+0xff7f9154>
  802730:	010020b4 	movhi	r4,130
  802734:	21280a84 	addi	r4,r4,-24534
  802738:	d9002c15 	stw	r4,176(sp)
  80273c:	003c9106 	br	801984 <__alt_mem_epcs_flash_controller_0+0xff7f8984>
  802740:	e005883a 	mov	r2,fp
  802744:	003e7906 	br	80212c <__alt_mem_epcs_flash_controller_0+0xff7f912c>
  802748:	d9002a17 	ldw	r4,168(sp)
  80274c:	df002783 	ldbu	fp,158(sp)
  802750:	dcc02e15 	stw	r19,184(sp)
  802754:	d9002915 	stw	r4,164(sp)
  802758:	d9002b15 	stw	r4,172(sp)
  80275c:	d8002a15 	stw	zero,168(sp)
  802760:	d8003215 	stw	zero,200(sp)
  802764:	003a3b06 	br	801054 <__alt_mem_epcs_flash_controller_0+0xff7f8054>
  802768:	9080004c 	andi	r2,r18,1
  80276c:	0039883a 	mov	fp,zero
  802770:	10000426 	beq	r2,zero,802784 <___vfprintf_internal_r+0x1ea4>
  802774:	00800c04 	movi	r2,48
  802778:	dc001dc4 	addi	r16,sp,119
  80277c:	d8801dc5 	stb	r2,119(sp)
  802780:	003b6406 	br	801514 <__alt_mem_epcs_flash_controller_0+0xff7f8514>
  802784:	d8002b15 	stw	zero,172(sp)
  802788:	dc001e04 	addi	r16,sp,120
  80278c:	003a2b06 	br	80103c <__alt_mem_epcs_flash_controller_0+0xff7f803c>
  802790:	8c7fff84 	addi	r17,r17,-2
  802794:	b5bfffc4 	addi	r22,r22,-1
  802798:	dd802615 	stw	r22,152(sp)
  80279c:	dc4022c5 	stb	r17,139(sp)
  8027a0:	b000bf16 	blt	r22,zero,802aa0 <___vfprintf_internal_r+0x21c0>
  8027a4:	00800ac4 	movi	r2,43
  8027a8:	d8802305 	stb	r2,140(sp)
  8027ac:	00800244 	movi	r2,9
  8027b0:	15807016 	blt	r2,r22,802974 <___vfprintf_internal_r+0x2094>
  8027b4:	00800c04 	movi	r2,48
  8027b8:	b5800c04 	addi	r22,r22,48
  8027bc:	d8802345 	stb	r2,141(sp)
  8027c0:	dd802385 	stb	r22,142(sp)
  8027c4:	d88023c4 	addi	r2,sp,143
  8027c8:	df0022c4 	addi	fp,sp,139
  8027cc:	d8c03317 	ldw	r3,204(sp)
  8027d0:	1739c83a 	sub	fp,r2,fp
  8027d4:	d9003317 	ldw	r4,204(sp)
  8027d8:	e0c7883a 	add	r3,fp,r3
  8027dc:	df003a15 	stw	fp,232(sp)
  8027e0:	d8c02b15 	stw	r3,172(sp)
  8027e4:	00800044 	movi	r2,1
  8027e8:	1100b30e 	bge	r2,r4,802ab8 <___vfprintf_internal_r+0x21d8>
  8027ec:	d8c02b17 	ldw	r3,172(sp)
  8027f0:	18c00044 	addi	r3,r3,1
  8027f4:	d8c02b15 	stw	r3,172(sp)
  8027f8:	1805883a 	mov	r2,r3
  8027fc:	1800ac16 	blt	r3,zero,802ab0 <___vfprintf_internal_r+0x21d0>
  802800:	d8003215 	stw	zero,200(sp)
  802804:	003e5d06 	br	80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  802808:	d9002d17 	ldw	r4,180(sp)
  80280c:	d9801e04 	addi	r6,sp,120
  802810:	b80b883a 	mov	r5,r23
  802814:	08080c00 	call	8080c0 <__sprint_r>
  802818:	1039351e 	bne	r2,zero,800cf0 <__alt_mem_epcs_flash_controller_0+0xff7f7cf0>
  80281c:	dc402617 	ldw	r17,152(sp)
  802820:	d8c02017 	ldw	r3,128(sp)
  802824:	d8801f17 	ldw	r2,124(sp)
  802828:	da000404 	addi	r8,sp,16
  80282c:	003ed606 	br	802388 <__alt_mem_epcs_flash_controller_0+0xff7f9388>
  802830:	182b883a 	mov	r21,r3
  802834:	d8002a15 	stw	zero,168(sp)
  802838:	00388c06 	br	800a6c <__alt_mem_epcs_flash_controller_0+0xff7f7a6c>
  80283c:	d8802a17 	ldw	r2,168(sp)
  802840:	103e071e 	bne	r2,zero,802060 <__alt_mem_epcs_flash_controller_0+0xff7f9060>
  802844:	dc002a15 	stw	r16,168(sp)
  802848:	003e0506 	br	802060 <__alt_mem_epcs_flash_controller_0+0xff7f9060>
  80284c:	d9002a17 	ldw	r4,168(sp)
  802850:	20c00044 	addi	r3,r4,1
  802854:	003e0f06 	br	802094 <__alt_mem_epcs_flash_controller_0+0xff7f9094>
  802858:	01400184 	movi	r5,6
  80285c:	d9402a15 	stw	r5,168(sp)
  802860:	003dff06 	br	802060 <__alt_mem_epcs_flash_controller_0+0xff7f9060>
  802864:	d8802104 	addi	r2,sp,132
  802868:	d8800315 	stw	r2,12(sp)
  80286c:	d8802504 	addi	r2,sp,148
  802870:	d8800215 	stw	r2,8(sp)
  802874:	d8802604 	addi	r2,sp,152
  802878:	d8800115 	stw	r2,4(sp)
  80287c:	d8802a17 	ldw	r2,168(sp)
  802880:	d9403617 	ldw	r5,216(sp)
  802884:	d9002d17 	ldw	r4,180(sp)
  802888:	d8800015 	stw	r2,0(sp)
  80288c:	01c000c4 	movi	r7,3
  802890:	980d883a 	mov	r6,r19
  802894:	da003d15 	stw	r8,244(sp)
  802898:	08030100 	call	803010 <_dtoa_r>
  80289c:	d8c02a17 	ldw	r3,168(sp)
  8028a0:	da003d17 	ldw	r8,244(sp)
  8028a4:	1021883a 	mov	r16,r2
  8028a8:	10f9883a 	add	fp,r2,r3
  8028ac:	81000007 	ldb	r4,0(r16)
  8028b0:	00800c04 	movi	r2,48
  8028b4:	20805e26 	beq	r4,r2,802a30 <___vfprintf_internal_r+0x2150>
  8028b8:	d8c02617 	ldw	r3,152(sp)
  8028bc:	e0f9883a 	add	fp,fp,r3
  8028c0:	003e0a06 	br	8020ec <__alt_mem_epcs_flash_controller_0+0xff7f90ec>
  8028c4:	00c00b44 	movi	r3,45
  8028c8:	24e0003c 	xorhi	r19,r4,32768
  8028cc:	d8c02905 	stb	r3,164(sp)
  8028d0:	003de906 	br	802078 <__alt_mem_epcs_flash_controller_0+0xff7f9078>
  8028d4:	d8c03217 	ldw	r3,200(sp)
  8028d8:	00c07a0e 	bge	zero,r3,802ac4 <___vfprintf_internal_r+0x21e4>
  8028dc:	00800044 	movi	r2,1
  8028e0:	d9003317 	ldw	r4,204(sp)
  8028e4:	1105883a 	add	r2,r2,r4
  8028e8:	d8802b15 	stw	r2,172(sp)
  8028ec:	10004e16 	blt	r2,zero,802a28 <___vfprintf_internal_r+0x2148>
  8028f0:	044019c4 	movi	r17,103
  8028f4:	003e2106 	br	80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  8028f8:	d9002a17 	ldw	r4,168(sp)
  8028fc:	d8802104 	addi	r2,sp,132
  802900:	d8800315 	stw	r2,12(sp)
  802904:	d9000015 	stw	r4,0(sp)
  802908:	d8802504 	addi	r2,sp,148
  80290c:	d9403617 	ldw	r5,216(sp)
  802910:	d9002d17 	ldw	r4,180(sp)
  802914:	d8800215 	stw	r2,8(sp)
  802918:	d8802604 	addi	r2,sp,152
  80291c:	d8800115 	stw	r2,4(sp)
  802920:	01c000c4 	movi	r7,3
  802924:	980d883a 	mov	r6,r19
  802928:	da003d15 	stw	r8,244(sp)
  80292c:	08030100 	call	803010 <_dtoa_r>
  802930:	d8c02a17 	ldw	r3,168(sp)
  802934:	da003d17 	ldw	r8,244(sp)
  802938:	1021883a 	mov	r16,r2
  80293c:	00801184 	movi	r2,70
  802940:	80f9883a 	add	fp,r16,r3
  802944:	88bfd926 	beq	r17,r2,8028ac <__alt_mem_epcs_flash_controller_0+0xff7f98ac>
  802948:	003de806 	br	8020ec <__alt_mem_epcs_flash_controller_0+0xff7f90ec>
  80294c:	d9002a17 	ldw	r4,168(sp)
  802950:	00c04d0e 	bge	zero,r3,802a88 <___vfprintf_internal_r+0x21a8>
  802954:	2000441e 	bne	r4,zero,802a68 <___vfprintf_internal_r+0x2188>
  802958:	9480004c 	andi	r18,r18,1
  80295c:	9000421e 	bne	r18,zero,802a68 <___vfprintf_internal_r+0x2188>
  802960:	1805883a 	mov	r2,r3
  802964:	18006f16 	blt	r3,zero,802b24 <___vfprintf_internal_r+0x2244>
  802968:	d8c03217 	ldw	r3,200(sp)
  80296c:	d8c02b15 	stw	r3,172(sp)
  802970:	003e0206 	br	80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  802974:	df0022c4 	addi	fp,sp,139
  802978:	dc002a15 	stw	r16,168(sp)
  80297c:	4027883a 	mov	r19,r8
  802980:	e021883a 	mov	r16,fp
  802984:	b009883a 	mov	r4,r22
  802988:	01400284 	movi	r5,10
  80298c:	080ac4c0 	call	80ac4c <__modsi3>
  802990:	10800c04 	addi	r2,r2,48
  802994:	843fffc4 	addi	r16,r16,-1
  802998:	b009883a 	mov	r4,r22
  80299c:	01400284 	movi	r5,10
  8029a0:	80800005 	stb	r2,0(r16)
  8029a4:	080abc80 	call	80abc8 <__divsi3>
  8029a8:	102d883a 	mov	r22,r2
  8029ac:	00800244 	movi	r2,9
  8029b0:	15bff416 	blt	r2,r22,802984 <__alt_mem_epcs_flash_controller_0+0xff7f9984>
  8029b4:	9811883a 	mov	r8,r19
  8029b8:	b0800c04 	addi	r2,r22,48
  8029bc:	8027883a 	mov	r19,r16
  8029c0:	997fffc4 	addi	r5,r19,-1
  8029c4:	98bfffc5 	stb	r2,-1(r19)
  8029c8:	dc002a17 	ldw	r16,168(sp)
  8029cc:	2f006d2e 	bgeu	r5,fp,802b84 <___vfprintf_internal_r+0x22a4>
  8029d0:	d9c02384 	addi	r7,sp,142
  8029d4:	3ccfc83a 	sub	r7,r7,r19
  8029d8:	d9002344 	addi	r4,sp,141
  8029dc:	e1cf883a 	add	r7,fp,r7
  8029e0:	00000106 	br	8029e8 <___vfprintf_internal_r+0x2108>
  8029e4:	28800003 	ldbu	r2,0(r5)
  8029e8:	20800005 	stb	r2,0(r4)
  8029ec:	21000044 	addi	r4,r4,1
  8029f0:	29400044 	addi	r5,r5,1
  8029f4:	393ffb1e 	bne	r7,r4,8029e4 <__alt_mem_epcs_flash_controller_0+0xff7f99e4>
  8029f8:	d8802304 	addi	r2,sp,140
  8029fc:	14c5c83a 	sub	r2,r2,r19
  802a00:	d8c02344 	addi	r3,sp,141
  802a04:	1885883a 	add	r2,r3,r2
  802a08:	003f7006 	br	8027cc <__alt_mem_epcs_flash_controller_0+0xff7f97cc>
  802a0c:	0005883a 	mov	r2,zero
  802a10:	003f0f06 	br	802650 <__alt_mem_epcs_flash_controller_0+0xff7f9650>
  802a14:	d8c03217 	ldw	r3,200(sp)
  802a18:	18c00044 	addi	r3,r3,1
  802a1c:	d8c02b15 	stw	r3,172(sp)
  802a20:	1805883a 	mov	r2,r3
  802a24:	183fb20e 	bge	r3,zero,8028f0 <__alt_mem_epcs_flash_controller_0+0xff7f98f0>
  802a28:	0005883a 	mov	r2,zero
  802a2c:	003fb006 	br	8028f0 <__alt_mem_epcs_flash_controller_0+0xff7f98f0>
  802a30:	d9003617 	ldw	r4,216(sp)
  802a34:	000d883a 	mov	r6,zero
  802a38:	000f883a 	mov	r7,zero
  802a3c:	980b883a 	mov	r5,r19
  802a40:	d8c03c15 	stw	r3,240(sp)
  802a44:	da003d15 	stw	r8,244(sp)
  802a48:	080c0200 	call	80c020 <__eqdf2>
  802a4c:	d8c03c17 	ldw	r3,240(sp)
  802a50:	da003d17 	ldw	r8,244(sp)
  802a54:	103f9826 	beq	r2,zero,8028b8 <__alt_mem_epcs_flash_controller_0+0xff7f98b8>
  802a58:	00800044 	movi	r2,1
  802a5c:	10c7c83a 	sub	r3,r2,r3
  802a60:	d8c02615 	stw	r3,152(sp)
  802a64:	003f9506 	br	8028bc <__alt_mem_epcs_flash_controller_0+0xff7f98bc>
  802a68:	d9002a17 	ldw	r4,168(sp)
  802a6c:	d8c03217 	ldw	r3,200(sp)
  802a70:	20800044 	addi	r2,r4,1
  802a74:	1885883a 	add	r2,r3,r2
  802a78:	d8802b15 	stw	r2,172(sp)
  802a7c:	103dbf0e 	bge	r2,zero,80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  802a80:	0005883a 	mov	r2,zero
  802a84:	003dbd06 	br	80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  802a88:	2000201e 	bne	r4,zero,802b0c <___vfprintf_internal_r+0x222c>
  802a8c:	9480004c 	andi	r18,r18,1
  802a90:	90001e1e 	bne	r18,zero,802b0c <___vfprintf_internal_r+0x222c>
  802a94:	00800044 	movi	r2,1
  802a98:	d8802b15 	stw	r2,172(sp)
  802a9c:	003db706 	br	80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  802aa0:	00800b44 	movi	r2,45
  802aa4:	05adc83a 	sub	r22,zero,r22
  802aa8:	d8802305 	stb	r2,140(sp)
  802aac:	003f3f06 	br	8027ac <__alt_mem_epcs_flash_controller_0+0xff7f97ac>
  802ab0:	0005883a 	mov	r2,zero
  802ab4:	003f5206 	br	802800 <__alt_mem_epcs_flash_controller_0+0xff7f9800>
  802ab8:	90a4703a 	and	r18,r18,r2
  802abc:	903f4e26 	beq	r18,zero,8027f8 <__alt_mem_epcs_flash_controller_0+0xff7f97f8>
  802ac0:	003f4a06 	br	8027ec <__alt_mem_epcs_flash_controller_0+0xff7f97ec>
  802ac4:	00800084 	movi	r2,2
  802ac8:	10c5c83a 	sub	r2,r2,r3
  802acc:	003f8406 	br	8028e0 <__alt_mem_epcs_flash_controller_0+0xff7f98e0>
  802ad0:	d9402e17 	ldw	r5,184(sp)
  802ad4:	d9002e17 	ldw	r4,184(sp)
  802ad8:	ac400043 	ldbu	r17,1(r21)
  802adc:	29400017 	ldw	r5,0(r5)
  802ae0:	20800104 	addi	r2,r4,4
  802ae4:	d8802e15 	stw	r2,184(sp)
  802ae8:	d9402a15 	stw	r5,168(sp)
  802aec:	182b883a 	mov	r21,r3
  802af0:	283e7b0e 	bge	r5,zero,8024e0 <__alt_mem_epcs_flash_controller_0+0xff7f94e0>
  802af4:	8c403fcc 	andi	r17,r17,255
  802af8:	017fffc4 	movi	r5,-1
  802afc:	8c40201c 	xori	r17,r17,128
  802b00:	d9402a15 	stw	r5,168(sp)
  802b04:	8c7fe004 	addi	r17,r17,-128
  802b08:	0037d706 	br	800a68 <__alt_mem_epcs_flash_controller_0+0xff7f7a68>
  802b0c:	d8c02a17 	ldw	r3,168(sp)
  802b10:	18c00084 	addi	r3,r3,2
  802b14:	d8c02b15 	stw	r3,172(sp)
  802b18:	1805883a 	mov	r2,r3
  802b1c:	183d970e 	bge	r3,zero,80217c <__alt_mem_epcs_flash_controller_0+0xff7f917c>
  802b20:	003fd706 	br	802a80 <__alt_mem_epcs_flash_controller_0+0xff7f9a80>
  802b24:	0005883a 	mov	r2,zero
  802b28:	003f8f06 	br	802968 <__alt_mem_epcs_flash_controller_0+0xff7f9968>
  802b2c:	9080004c 	andi	r2,r18,1
  802b30:	103f821e 	bne	r2,zero,80293c <__alt_mem_epcs_flash_controller_0+0xff7f993c>
  802b34:	d8802117 	ldw	r2,132(sp)
  802b38:	1405c83a 	sub	r2,r2,r16
  802b3c:	d8803315 	stw	r2,204(sp)
  802b40:	b47ef426 	beq	r22,r17,802714 <__alt_mem_epcs_flash_controller_0+0xff7f9714>
  802b44:	dd802617 	ldw	r22,152(sp)
  802b48:	003f1206 	br	802794 <__alt_mem_epcs_flash_controller_0+0xff7f9794>
  802b4c:	d8c02b03 	ldbu	r3,172(sp)
  802b50:	d8c02785 	stb	r3,158(sp)
  802b54:	0038df06 	br	800ed4 <__alt_mem_epcs_flash_controller_0+0xff7f7ed4>
  802b58:	d8c02b03 	ldbu	r3,172(sp)
  802b5c:	d8c02785 	stb	r3,158(sp)
  802b60:	0038aa06 	br	800e0c <__alt_mem_epcs_flash_controller_0+0xff7f7e0c>
  802b64:	d8c02b03 	ldbu	r3,172(sp)
  802b68:	d8c02785 	stb	r3,158(sp)
  802b6c:	003a4306 	br	80147c <__alt_mem_epcs_flash_controller_0+0xff7f847c>
  802b70:	d8c02b03 	ldbu	r3,172(sp)
  802b74:	d8c02785 	stb	r3,158(sp)
  802b78:	003af506 	br	801750 <__alt_mem_epcs_flash_controller_0+0xff7f8750>
  802b7c:	0005883a 	mov	r2,zero
  802b80:	003d7b06 	br	802170 <__alt_mem_epcs_flash_controller_0+0xff7f9170>
  802b84:	d8802344 	addi	r2,sp,141
  802b88:	003f1006 	br	8027cc <__alt_mem_epcs_flash_controller_0+0xff7f97cc>
  802b8c:	d8c02b03 	ldbu	r3,172(sp)
  802b90:	d8c02785 	stb	r3,158(sp)
  802b94:	0038fd06 	br	800f8c <__alt_mem_epcs_flash_controller_0+0xff7f7f8c>
  802b98:	d8c02b03 	ldbu	r3,172(sp)
  802b9c:	d8c02785 	stb	r3,158(sp)
  802ba0:	003a9706 	br	801600 <__alt_mem_epcs_flash_controller_0+0xff7f8600>
  802ba4:	d8c02b03 	ldbu	r3,172(sp)
  802ba8:	d8c02785 	stb	r3,158(sp)
  802bac:	003a1806 	br	801410 <__alt_mem_epcs_flash_controller_0+0xff7f8410>
  802bb0:	d8c02b03 	ldbu	r3,172(sp)
  802bb4:	d8c02785 	stb	r3,158(sp)
  802bb8:	003abe06 	br	8016b4 <__alt_mem_epcs_flash_controller_0+0xff7f86b4>

00802bbc <__vfprintf_internal>:
  802bbc:	008020b4 	movhi	r2,130
  802bc0:	10b07804 	addi	r2,r2,-15904
  802bc4:	300f883a 	mov	r7,r6
  802bc8:	280d883a 	mov	r6,r5
  802bcc:	200b883a 	mov	r5,r4
  802bd0:	11000017 	ldw	r4,0(r2)
  802bd4:	08008e01 	jmpi	8008e0 <___vfprintf_internal_r>

00802bd8 <__sbprintf>:
  802bd8:	2880030b 	ldhu	r2,12(r5)
  802bdc:	2ac01917 	ldw	r11,100(r5)
  802be0:	2a80038b 	ldhu	r10,14(r5)
  802be4:	2a400717 	ldw	r9,28(r5)
  802be8:	2a000917 	ldw	r8,36(r5)
  802bec:	defee204 	addi	sp,sp,-1144
  802bf0:	00c10004 	movi	r3,1024
  802bf4:	dc011a15 	stw	r16,1128(sp)
  802bf8:	10bfff4c 	andi	r2,r2,65533
  802bfc:	2821883a 	mov	r16,r5
  802c00:	d8cb883a 	add	r5,sp,r3
  802c04:	dc811c15 	stw	r18,1136(sp)
  802c08:	dc411b15 	stw	r17,1132(sp)
  802c0c:	dfc11d15 	stw	ra,1140(sp)
  802c10:	2025883a 	mov	r18,r4
  802c14:	d881030d 	sth	r2,1036(sp)
  802c18:	dac11915 	stw	r11,1124(sp)
  802c1c:	da81038d 	sth	r10,1038(sp)
  802c20:	da410715 	stw	r9,1052(sp)
  802c24:	da010915 	stw	r8,1060(sp)
  802c28:	dec10015 	stw	sp,1024(sp)
  802c2c:	dec10415 	stw	sp,1040(sp)
  802c30:	d8c10215 	stw	r3,1032(sp)
  802c34:	d8c10515 	stw	r3,1044(sp)
  802c38:	d8010615 	stw	zero,1048(sp)
  802c3c:	08008e00 	call	8008e0 <___vfprintf_internal_r>
  802c40:	1023883a 	mov	r17,r2
  802c44:	10000416 	blt	r2,zero,802c58 <__sbprintf+0x80>
  802c48:	d9410004 	addi	r5,sp,1024
  802c4c:	9009883a 	mov	r4,r18
  802c50:	08048b40 	call	8048b4 <_fflush_r>
  802c54:	10000d1e 	bne	r2,zero,802c8c <__sbprintf+0xb4>
  802c58:	d881030b 	ldhu	r2,1036(sp)
  802c5c:	1080100c 	andi	r2,r2,64
  802c60:	10000326 	beq	r2,zero,802c70 <__sbprintf+0x98>
  802c64:	8080030b 	ldhu	r2,12(r16)
  802c68:	10801014 	ori	r2,r2,64
  802c6c:	8080030d 	sth	r2,12(r16)
  802c70:	8805883a 	mov	r2,r17
  802c74:	dfc11d17 	ldw	ra,1140(sp)
  802c78:	dc811c17 	ldw	r18,1136(sp)
  802c7c:	dc411b17 	ldw	r17,1132(sp)
  802c80:	dc011a17 	ldw	r16,1128(sp)
  802c84:	dec11e04 	addi	sp,sp,1144
  802c88:	f800283a 	ret
  802c8c:	047fffc4 	movi	r17,-1
  802c90:	003ff106 	br	802c58 <__alt_mem_epcs_flash_controller_0+0xff7f9c58>

00802c94 <__swsetup_r>:
  802c94:	008020b4 	movhi	r2,130
  802c98:	defffd04 	addi	sp,sp,-12
  802c9c:	10b07804 	addi	r2,r2,-15904
  802ca0:	dc400115 	stw	r17,4(sp)
  802ca4:	2023883a 	mov	r17,r4
  802ca8:	11000017 	ldw	r4,0(r2)
  802cac:	dc000015 	stw	r16,0(sp)
  802cb0:	dfc00215 	stw	ra,8(sp)
  802cb4:	2821883a 	mov	r16,r5
  802cb8:	20000226 	beq	r4,zero,802cc4 <__swsetup_r+0x30>
  802cbc:	20800e17 	ldw	r2,56(r4)
  802cc0:	10003126 	beq	r2,zero,802d88 <__swsetup_r+0xf4>
  802cc4:	8080030b 	ldhu	r2,12(r16)
  802cc8:	10c0020c 	andi	r3,r2,8
  802ccc:	1009883a 	mov	r4,r2
  802cd0:	18000f26 	beq	r3,zero,802d10 <__swsetup_r+0x7c>
  802cd4:	80c00417 	ldw	r3,16(r16)
  802cd8:	18001526 	beq	r3,zero,802d30 <__swsetup_r+0x9c>
  802cdc:	1100004c 	andi	r4,r2,1
  802ce0:	20001c1e 	bne	r4,zero,802d54 <__swsetup_r+0xc0>
  802ce4:	1080008c 	andi	r2,r2,2
  802ce8:	1000291e 	bne	r2,zero,802d90 <__swsetup_r+0xfc>
  802cec:	80800517 	ldw	r2,20(r16)
  802cf0:	80800215 	stw	r2,8(r16)
  802cf4:	18001c26 	beq	r3,zero,802d68 <__swsetup_r+0xd4>
  802cf8:	0005883a 	mov	r2,zero
  802cfc:	dfc00217 	ldw	ra,8(sp)
  802d00:	dc400117 	ldw	r17,4(sp)
  802d04:	dc000017 	ldw	r16,0(sp)
  802d08:	dec00304 	addi	sp,sp,12
  802d0c:	f800283a 	ret
  802d10:	2080040c 	andi	r2,r4,16
  802d14:	10002e26 	beq	r2,zero,802dd0 <__swsetup_r+0x13c>
  802d18:	2080010c 	andi	r2,r4,4
  802d1c:	10001e1e 	bne	r2,zero,802d98 <__swsetup_r+0x104>
  802d20:	80c00417 	ldw	r3,16(r16)
  802d24:	20800214 	ori	r2,r4,8
  802d28:	8080030d 	sth	r2,12(r16)
  802d2c:	183feb1e 	bne	r3,zero,802cdc <__alt_mem_epcs_flash_controller_0+0xff7f9cdc>
  802d30:	1100a00c 	andi	r4,r2,640
  802d34:	01408004 	movi	r5,512
  802d38:	217fe826 	beq	r4,r5,802cdc <__alt_mem_epcs_flash_controller_0+0xff7f9cdc>
  802d3c:	800b883a 	mov	r5,r16
  802d40:	8809883a 	mov	r4,r17
  802d44:	08058500 	call	805850 <__smakebuf_r>
  802d48:	8080030b 	ldhu	r2,12(r16)
  802d4c:	80c00417 	ldw	r3,16(r16)
  802d50:	003fe206 	br	802cdc <__alt_mem_epcs_flash_controller_0+0xff7f9cdc>
  802d54:	80800517 	ldw	r2,20(r16)
  802d58:	80000215 	stw	zero,8(r16)
  802d5c:	0085c83a 	sub	r2,zero,r2
  802d60:	80800615 	stw	r2,24(r16)
  802d64:	183fe41e 	bne	r3,zero,802cf8 <__alt_mem_epcs_flash_controller_0+0xff7f9cf8>
  802d68:	80c0030b 	ldhu	r3,12(r16)
  802d6c:	0005883a 	mov	r2,zero
  802d70:	1900200c 	andi	r4,r3,128
  802d74:	203fe126 	beq	r4,zero,802cfc <__alt_mem_epcs_flash_controller_0+0xff7f9cfc>
  802d78:	18c01014 	ori	r3,r3,64
  802d7c:	80c0030d 	sth	r3,12(r16)
  802d80:	00bfffc4 	movi	r2,-1
  802d84:	003fdd06 	br	802cfc <__alt_mem_epcs_flash_controller_0+0xff7f9cfc>
  802d88:	0804ca00 	call	804ca0 <__sinit>
  802d8c:	003fcd06 	br	802cc4 <__alt_mem_epcs_flash_controller_0+0xff7f9cc4>
  802d90:	0005883a 	mov	r2,zero
  802d94:	003fd606 	br	802cf0 <__alt_mem_epcs_flash_controller_0+0xff7f9cf0>
  802d98:	81400c17 	ldw	r5,48(r16)
  802d9c:	28000626 	beq	r5,zero,802db8 <__swsetup_r+0x124>
  802da0:	80801004 	addi	r2,r16,64
  802da4:	28800326 	beq	r5,r2,802db4 <__swsetup_r+0x120>
  802da8:	8809883a 	mov	r4,r17
  802dac:	0804e140 	call	804e14 <_free_r>
  802db0:	8100030b 	ldhu	r4,12(r16)
  802db4:	80000c15 	stw	zero,48(r16)
  802db8:	80c00417 	ldw	r3,16(r16)
  802dbc:	00bff6c4 	movi	r2,-37
  802dc0:	1108703a 	and	r4,r2,r4
  802dc4:	80000115 	stw	zero,4(r16)
  802dc8:	80c00015 	stw	r3,0(r16)
  802dcc:	003fd506 	br	802d24 <__alt_mem_epcs_flash_controller_0+0xff7f9d24>
  802dd0:	00800244 	movi	r2,9
  802dd4:	88800015 	stw	r2,0(r17)
  802dd8:	20801014 	ori	r2,r4,64
  802ddc:	8080030d 	sth	r2,12(r16)
  802de0:	00bfffc4 	movi	r2,-1
  802de4:	003fc506 	br	802cfc <__alt_mem_epcs_flash_controller_0+0xff7f9cfc>

00802de8 <quorem>:
  802de8:	defff204 	addi	sp,sp,-56
  802dec:	ddc00b15 	stw	r23,44(sp)
  802df0:	20800417 	ldw	r2,16(r4)
  802df4:	2dc00417 	ldw	r23,16(r5)
  802df8:	dfc00d15 	stw	ra,52(sp)
  802dfc:	df000c15 	stw	fp,48(sp)
  802e00:	dd800a15 	stw	r22,40(sp)
  802e04:	dd400915 	stw	r21,36(sp)
  802e08:	dd000815 	stw	r20,32(sp)
  802e0c:	dcc00715 	stw	r19,28(sp)
  802e10:	dc800615 	stw	r18,24(sp)
  802e14:	dc400515 	stw	r17,20(sp)
  802e18:	dc000415 	stw	r16,16(sp)
  802e1c:	15c07a16 	blt	r2,r23,803008 <quorem+0x220>
  802e20:	bdffffc4 	addi	r23,r23,-1
  802e24:	bde9883a 	add	r20,r23,r23
  802e28:	28c00504 	addi	r3,r5,20
  802e2c:	a529883a 	add	r20,r20,r20
  802e30:	1d39883a 	add	fp,r3,r20
  802e34:	24c00504 	addi	r19,r4,20
  802e38:	d9400215 	stw	r5,8(sp)
  802e3c:	9d29883a 	add	r20,r19,r20
  802e40:	e1400017 	ldw	r5,0(fp)
  802e44:	d9000015 	stw	r4,0(sp)
  802e48:	a1000017 	ldw	r4,0(r20)
  802e4c:	29400044 	addi	r5,r5,1
  802e50:	d8c00115 	stw	r3,4(sp)
  802e54:	dd000315 	stw	r20,12(sp)
  802e58:	080acc00 	call	80acc0 <__udivsi3>
  802e5c:	1025883a 	mov	r18,r2
  802e60:	10003026 	beq	r2,zero,802f24 <quorem+0x13c>
  802e64:	dc400117 	ldw	r17,4(sp)
  802e68:	9829883a 	mov	r20,r19
  802e6c:	002d883a 	mov	r22,zero
  802e70:	0021883a 	mov	r16,zero
  802e74:	8d400017 	ldw	r21,0(r17)
  802e78:	900b883a 	mov	r5,r18
  802e7c:	8c400104 	addi	r17,r17,4
  802e80:	a93fffcc 	andi	r4,r21,65535
  802e84:	080ad7c0 	call	80ad7c <__mulsi3>
  802e88:	a808d43a 	srli	r4,r21,16
  802e8c:	900b883a 	mov	r5,r18
  802e90:	15ad883a 	add	r22,r2,r22
  802e94:	080ad7c0 	call	80ad7c <__mulsi3>
  802e98:	a1000017 	ldw	r4,0(r20)
  802e9c:	b00cd43a 	srli	r6,r22,16
  802ea0:	b0ffffcc 	andi	r3,r22,65535
  802ea4:	217fffcc 	andi	r5,r4,65535
  802ea8:	2c21883a 	add	r16,r5,r16
  802eac:	80c7c83a 	sub	r3,r16,r3
  802eb0:	2008d43a 	srli	r4,r4,16
  802eb4:	1185883a 	add	r2,r2,r6
  802eb8:	1821d43a 	srai	r16,r3,16
  802ebc:	117fffcc 	andi	r5,r2,65535
  802ec0:	2149c83a 	sub	r4,r4,r5
  802ec4:	2421883a 	add	r16,r4,r16
  802ec8:	8008943a 	slli	r4,r16,16
  802ecc:	18ffffcc 	andi	r3,r3,65535
  802ed0:	102cd43a 	srli	r22,r2,16
  802ed4:	20c8b03a 	or	r4,r4,r3
  802ed8:	a1000015 	stw	r4,0(r20)
  802edc:	8021d43a 	srai	r16,r16,16
  802ee0:	a5000104 	addi	r20,r20,4
  802ee4:	e47fe32e 	bgeu	fp,r17,802e74 <__alt_mem_epcs_flash_controller_0+0xff7f9e74>
  802ee8:	d8c00317 	ldw	r3,12(sp)
  802eec:	18800017 	ldw	r2,0(r3)
  802ef0:	10000c1e 	bne	r2,zero,802f24 <quorem+0x13c>
  802ef4:	18bfff04 	addi	r2,r3,-4
  802ef8:	9880082e 	bgeu	r19,r2,802f1c <quorem+0x134>
  802efc:	18ffff17 	ldw	r3,-4(r3)
  802f00:	18000326 	beq	r3,zero,802f10 <quorem+0x128>
  802f04:	00000506 	br	802f1c <quorem+0x134>
  802f08:	10c00017 	ldw	r3,0(r2)
  802f0c:	1800031e 	bne	r3,zero,802f1c <quorem+0x134>
  802f10:	10bfff04 	addi	r2,r2,-4
  802f14:	bdffffc4 	addi	r23,r23,-1
  802f18:	98bffb36 	bltu	r19,r2,802f08 <__alt_mem_epcs_flash_controller_0+0xff7f9f08>
  802f1c:	d8c00017 	ldw	r3,0(sp)
  802f20:	1dc00415 	stw	r23,16(r3)
  802f24:	d9400217 	ldw	r5,8(sp)
  802f28:	d9000017 	ldw	r4,0(sp)
  802f2c:	080704c0 	call	80704c <__mcmp>
  802f30:	10002816 	blt	r2,zero,802fd4 <quorem+0x1ec>
  802f34:	dc400117 	ldw	r17,4(sp)
  802f38:	94800044 	addi	r18,r18,1
  802f3c:	980d883a 	mov	r6,r19
  802f40:	0007883a 	mov	r3,zero
  802f44:	31000017 	ldw	r4,0(r6)
  802f48:	89400017 	ldw	r5,0(r17)
  802f4c:	31800104 	addi	r6,r6,4
  802f50:	20bfffcc 	andi	r2,r4,65535
  802f54:	10c7883a 	add	r3,r2,r3
  802f58:	28bfffcc 	andi	r2,r5,65535
  802f5c:	1885c83a 	sub	r2,r3,r2
  802f60:	280ad43a 	srli	r5,r5,16
  802f64:	2008d43a 	srli	r4,r4,16
  802f68:	1007d43a 	srai	r3,r2,16
  802f6c:	10bfffcc 	andi	r2,r2,65535
  802f70:	2149c83a 	sub	r4,r4,r5
  802f74:	20c9883a 	add	r4,r4,r3
  802f78:	200a943a 	slli	r5,r4,16
  802f7c:	8c400104 	addi	r17,r17,4
  802f80:	2007d43a 	srai	r3,r4,16
  802f84:	2884b03a 	or	r2,r5,r2
  802f88:	30bfff15 	stw	r2,-4(r6)
  802f8c:	e47fed2e 	bgeu	fp,r17,802f44 <__alt_mem_epcs_flash_controller_0+0xff7f9f44>
  802f90:	bdc5883a 	add	r2,r23,r23
  802f94:	1085883a 	add	r2,r2,r2
  802f98:	9887883a 	add	r3,r19,r2
  802f9c:	18800017 	ldw	r2,0(r3)
  802fa0:	10000c1e 	bne	r2,zero,802fd4 <quorem+0x1ec>
  802fa4:	18bfff04 	addi	r2,r3,-4
  802fa8:	9880082e 	bgeu	r19,r2,802fcc <quorem+0x1e4>
  802fac:	18ffff17 	ldw	r3,-4(r3)
  802fb0:	18000326 	beq	r3,zero,802fc0 <quorem+0x1d8>
  802fb4:	00000506 	br	802fcc <quorem+0x1e4>
  802fb8:	10c00017 	ldw	r3,0(r2)
  802fbc:	1800031e 	bne	r3,zero,802fcc <quorem+0x1e4>
  802fc0:	10bfff04 	addi	r2,r2,-4
  802fc4:	bdffffc4 	addi	r23,r23,-1
  802fc8:	98bffb36 	bltu	r19,r2,802fb8 <__alt_mem_epcs_flash_controller_0+0xff7f9fb8>
  802fcc:	d8c00017 	ldw	r3,0(sp)
  802fd0:	1dc00415 	stw	r23,16(r3)
  802fd4:	9005883a 	mov	r2,r18
  802fd8:	dfc00d17 	ldw	ra,52(sp)
  802fdc:	df000c17 	ldw	fp,48(sp)
  802fe0:	ddc00b17 	ldw	r23,44(sp)
  802fe4:	dd800a17 	ldw	r22,40(sp)
  802fe8:	dd400917 	ldw	r21,36(sp)
  802fec:	dd000817 	ldw	r20,32(sp)
  802ff0:	dcc00717 	ldw	r19,28(sp)
  802ff4:	dc800617 	ldw	r18,24(sp)
  802ff8:	dc400517 	ldw	r17,20(sp)
  802ffc:	dc000417 	ldw	r16,16(sp)
  803000:	dec00e04 	addi	sp,sp,56
  803004:	f800283a 	ret
  803008:	0005883a 	mov	r2,zero
  80300c:	003ff206 	br	802fd8 <__alt_mem_epcs_flash_controller_0+0xff7f9fd8>

00803010 <_dtoa_r>:
  803010:	20801017 	ldw	r2,64(r4)
  803014:	deffde04 	addi	sp,sp,-136
  803018:	df002015 	stw	fp,128(sp)
  80301c:	dcc01b15 	stw	r19,108(sp)
  803020:	dc801a15 	stw	r18,104(sp)
  803024:	dc401915 	stw	r17,100(sp)
  803028:	dc001815 	stw	r16,96(sp)
  80302c:	dfc02115 	stw	ra,132(sp)
  803030:	ddc01f15 	stw	r23,124(sp)
  803034:	dd801e15 	stw	r22,120(sp)
  803038:	dd401d15 	stw	r21,116(sp)
  80303c:	dd001c15 	stw	r20,112(sp)
  803040:	d9c00315 	stw	r7,12(sp)
  803044:	2039883a 	mov	fp,r4
  803048:	3023883a 	mov	r17,r6
  80304c:	2825883a 	mov	r18,r5
  803050:	dc002417 	ldw	r16,144(sp)
  803054:	3027883a 	mov	r19,r6
  803058:	10000826 	beq	r2,zero,80307c <_dtoa_r+0x6c>
  80305c:	21801117 	ldw	r6,68(r4)
  803060:	00c00044 	movi	r3,1
  803064:	100b883a 	mov	r5,r2
  803068:	1986983a 	sll	r3,r3,r6
  80306c:	11800115 	stw	r6,4(r2)
  803070:	10c00215 	stw	r3,8(r2)
  803074:	08067700 	call	806770 <_Bfree>
  803078:	e0001015 	stw	zero,64(fp)
  80307c:	88002e16 	blt	r17,zero,803138 <_dtoa_r+0x128>
  803080:	80000015 	stw	zero,0(r16)
  803084:	889ffc2c 	andhi	r2,r17,32752
  803088:	00dffc34 	movhi	r3,32752
  80308c:	10c01c26 	beq	r2,r3,803100 <_dtoa_r+0xf0>
  803090:	000d883a 	mov	r6,zero
  803094:	000f883a 	mov	r7,zero
  803098:	9009883a 	mov	r4,r18
  80309c:	980b883a 	mov	r5,r19
  8030a0:	080c0200 	call	80c020 <__eqdf2>
  8030a4:	10002b1e 	bne	r2,zero,803154 <_dtoa_r+0x144>
  8030a8:	d9c02317 	ldw	r7,140(sp)
  8030ac:	00800044 	movi	r2,1
  8030b0:	38800015 	stw	r2,0(r7)
  8030b4:	d8802517 	ldw	r2,148(sp)
  8030b8:	10019e26 	beq	r2,zero,803734 <_dtoa_r+0x724>
  8030bc:	d8c02517 	ldw	r3,148(sp)
  8030c0:	008020b4 	movhi	r2,130
  8030c4:	10a80a44 	addi	r2,r2,-24535
  8030c8:	18800015 	stw	r2,0(r3)
  8030cc:	10bfffc4 	addi	r2,r2,-1
  8030d0:	dfc02117 	ldw	ra,132(sp)
  8030d4:	df002017 	ldw	fp,128(sp)
  8030d8:	ddc01f17 	ldw	r23,124(sp)
  8030dc:	dd801e17 	ldw	r22,120(sp)
  8030e0:	dd401d17 	ldw	r21,116(sp)
  8030e4:	dd001c17 	ldw	r20,112(sp)
  8030e8:	dcc01b17 	ldw	r19,108(sp)
  8030ec:	dc801a17 	ldw	r18,104(sp)
  8030f0:	dc401917 	ldw	r17,100(sp)
  8030f4:	dc001817 	ldw	r16,96(sp)
  8030f8:	dec02204 	addi	sp,sp,136
  8030fc:	f800283a 	ret
  803100:	d8c02317 	ldw	r3,140(sp)
  803104:	0089c3c4 	movi	r2,9999
  803108:	18800015 	stw	r2,0(r3)
  80310c:	90017726 	beq	r18,zero,8036ec <_dtoa_r+0x6dc>
  803110:	008020b4 	movhi	r2,130
  803114:	10a81604 	addi	r2,r2,-24488
  803118:	d9002517 	ldw	r4,148(sp)
  80311c:	203fec26 	beq	r4,zero,8030d0 <__alt_mem_epcs_flash_controller_0+0xff7fa0d0>
  803120:	10c000c7 	ldb	r3,3(r2)
  803124:	1801781e 	bne	r3,zero,803708 <_dtoa_r+0x6f8>
  803128:	10c000c4 	addi	r3,r2,3
  80312c:	d9802517 	ldw	r6,148(sp)
  803130:	30c00015 	stw	r3,0(r6)
  803134:	003fe606 	br	8030d0 <__alt_mem_epcs_flash_controller_0+0xff7fa0d0>
  803138:	04e00034 	movhi	r19,32768
  80313c:	9cffffc4 	addi	r19,r19,-1
  803140:	00800044 	movi	r2,1
  803144:	8ce6703a 	and	r19,r17,r19
  803148:	80800015 	stw	r2,0(r16)
  80314c:	9823883a 	mov	r17,r19
  803150:	003fcc06 	br	803084 <__alt_mem_epcs_flash_controller_0+0xff7fa084>
  803154:	d8800204 	addi	r2,sp,8
  803158:	d8800015 	stw	r2,0(sp)
  80315c:	d9c00104 	addi	r7,sp,4
  803160:	900b883a 	mov	r5,r18
  803164:	980d883a 	mov	r6,r19
  803168:	e009883a 	mov	r4,fp
  80316c:	8820d53a 	srli	r16,r17,20
  803170:	08074180 	call	807418 <__d2b>
  803174:	d8800915 	stw	r2,36(sp)
  803178:	8001651e 	bne	r16,zero,803710 <_dtoa_r+0x700>
  80317c:	dd800217 	ldw	r22,8(sp)
  803180:	dc000117 	ldw	r16,4(sp)
  803184:	00800804 	movi	r2,32
  803188:	b421883a 	add	r16,r22,r16
  80318c:	80c10c84 	addi	r3,r16,1074
  803190:	10c2d10e 	bge	r2,r3,803cd8 <_dtoa_r+0xcc8>
  803194:	00801004 	movi	r2,64
  803198:	81010484 	addi	r4,r16,1042
  80319c:	10c7c83a 	sub	r3,r2,r3
  8031a0:	9108d83a 	srl	r4,r18,r4
  8031a4:	88e2983a 	sll	r17,r17,r3
  8031a8:	2448b03a 	or	r4,r4,r17
  8031ac:	080d53c0 	call	80d53c <__floatunsidf>
  8031b0:	017f8434 	movhi	r5,65040
  8031b4:	01800044 	movi	r6,1
  8031b8:	1009883a 	mov	r4,r2
  8031bc:	194b883a 	add	r5,r3,r5
  8031c0:	843fffc4 	addi	r16,r16,-1
  8031c4:	d9801115 	stw	r6,68(sp)
  8031c8:	000d883a 	mov	r6,zero
  8031cc:	01cffe34 	movhi	r7,16376
  8031d0:	080cae40 	call	80cae4 <__subdf3>
  8031d4:	0198dbf4 	movhi	r6,25455
  8031d8:	01cff4f4 	movhi	r7,16339
  8031dc:	3190d844 	addi	r6,r6,17249
  8031e0:	39e1e9c4 	addi	r7,r7,-30809
  8031e4:	1009883a 	mov	r4,r2
  8031e8:	180b883a 	mov	r5,r3
  8031ec:	080c2780 	call	80c278 <__muldf3>
  8031f0:	01a2d874 	movhi	r6,35681
  8031f4:	01cff1f4 	movhi	r7,16327
  8031f8:	31b22cc4 	addi	r6,r6,-14157
  8031fc:	39e28a04 	addi	r7,r7,-30168
  803200:	180b883a 	mov	r5,r3
  803204:	1009883a 	mov	r4,r2
  803208:	080ada40 	call	80ada4 <__adddf3>
  80320c:	8009883a 	mov	r4,r16
  803210:	1029883a 	mov	r20,r2
  803214:	1823883a 	mov	r17,r3
  803218:	080d4600 	call	80d460 <__floatsidf>
  80321c:	019427f4 	movhi	r6,20639
  803220:	01cff4f4 	movhi	r7,16339
  803224:	319e7ec4 	addi	r6,r6,31227
  803228:	39d104c4 	addi	r7,r7,17427
  80322c:	1009883a 	mov	r4,r2
  803230:	180b883a 	mov	r5,r3
  803234:	080c2780 	call	80c278 <__muldf3>
  803238:	100d883a 	mov	r6,r2
  80323c:	180f883a 	mov	r7,r3
  803240:	a009883a 	mov	r4,r20
  803244:	880b883a 	mov	r5,r17
  803248:	080ada40 	call	80ada4 <__adddf3>
  80324c:	1009883a 	mov	r4,r2
  803250:	180b883a 	mov	r5,r3
  803254:	1029883a 	mov	r20,r2
  803258:	1823883a 	mov	r17,r3
  80325c:	080d3e00 	call	80d3e0 <__fixdfsi>
  803260:	000d883a 	mov	r6,zero
  803264:	000f883a 	mov	r7,zero
  803268:	a009883a 	mov	r4,r20
  80326c:	880b883a 	mov	r5,r17
  803270:	d8800515 	stw	r2,20(sp)
  803274:	080c1840 	call	80c184 <__ledf2>
  803278:	10028716 	blt	r2,zero,803c98 <_dtoa_r+0xc88>
  80327c:	d8c00517 	ldw	r3,20(sp)
  803280:	00800584 	movi	r2,22
  803284:	10c27536 	bltu	r2,r3,803c5c <_dtoa_r+0xc4c>
  803288:	180490fa 	slli	r2,r3,3
  80328c:	00c020b4 	movhi	r3,130
  803290:	18e83204 	addi	r3,r3,-24376
  803294:	1885883a 	add	r2,r3,r2
  803298:	11000017 	ldw	r4,0(r2)
  80329c:	11400117 	ldw	r5,4(r2)
  8032a0:	900d883a 	mov	r6,r18
  8032a4:	980f883a 	mov	r7,r19
  8032a8:	080c0a80 	call	80c0a8 <__gedf2>
  8032ac:	00828d0e 	bge	zero,r2,803ce4 <_dtoa_r+0xcd4>
  8032b0:	d9000517 	ldw	r4,20(sp)
  8032b4:	d8000e15 	stw	zero,56(sp)
  8032b8:	213fffc4 	addi	r4,r4,-1
  8032bc:	d9000515 	stw	r4,20(sp)
  8032c0:	b42dc83a 	sub	r22,r22,r16
  8032c4:	b5bfffc4 	addi	r22,r22,-1
  8032c8:	b0026f16 	blt	r22,zero,803c88 <_dtoa_r+0xc78>
  8032cc:	d8000815 	stw	zero,32(sp)
  8032d0:	d9c00517 	ldw	r7,20(sp)
  8032d4:	38026416 	blt	r7,zero,803c68 <_dtoa_r+0xc58>
  8032d8:	b1ed883a 	add	r22,r22,r7
  8032dc:	d9c00d15 	stw	r7,52(sp)
  8032e0:	d8000a15 	stw	zero,40(sp)
  8032e4:	d9800317 	ldw	r6,12(sp)
  8032e8:	00800244 	movi	r2,9
  8032ec:	11811436 	bltu	r2,r6,803740 <_dtoa_r+0x730>
  8032f0:	00800144 	movi	r2,5
  8032f4:	1184e10e 	bge	r2,r6,80467c <_dtoa_r+0x166c>
  8032f8:	31bfff04 	addi	r6,r6,-4
  8032fc:	d9800315 	stw	r6,12(sp)
  803300:	0023883a 	mov	r17,zero
  803304:	d9800317 	ldw	r6,12(sp)
  803308:	008000c4 	movi	r2,3
  80330c:	30836726 	beq	r6,r2,8040ac <_dtoa_r+0x109c>
  803310:	1183410e 	bge	r2,r6,804018 <_dtoa_r+0x1008>
  803314:	d9c00317 	ldw	r7,12(sp)
  803318:	00800104 	movi	r2,4
  80331c:	38827c26 	beq	r7,r2,803d10 <_dtoa_r+0xd00>
  803320:	00800144 	movi	r2,5
  803324:	3884c41e 	bne	r7,r2,804638 <_dtoa_r+0x1628>
  803328:	00800044 	movi	r2,1
  80332c:	d8800b15 	stw	r2,44(sp)
  803330:	d8c00517 	ldw	r3,20(sp)
  803334:	d9002217 	ldw	r4,136(sp)
  803338:	1907883a 	add	r3,r3,r4
  80333c:	19800044 	addi	r6,r3,1
  803340:	d8c00c15 	stw	r3,48(sp)
  803344:	d9800615 	stw	r6,24(sp)
  803348:	0183a40e 	bge	zero,r6,8041dc <_dtoa_r+0x11cc>
  80334c:	d9800617 	ldw	r6,24(sp)
  803350:	3021883a 	mov	r16,r6
  803354:	e0001115 	stw	zero,68(fp)
  803358:	008005c4 	movi	r2,23
  80335c:	1184c92e 	bgeu	r2,r6,804684 <_dtoa_r+0x1674>
  803360:	00c00044 	movi	r3,1
  803364:	00800104 	movi	r2,4
  803368:	1085883a 	add	r2,r2,r2
  80336c:	11000504 	addi	r4,r2,20
  803370:	180b883a 	mov	r5,r3
  803374:	18c00044 	addi	r3,r3,1
  803378:	313ffb2e 	bgeu	r6,r4,803368 <__alt_mem_epcs_flash_controller_0+0xff7fa368>
  80337c:	e1401115 	stw	r5,68(fp)
  803380:	e009883a 	mov	r4,fp
  803384:	08066c80 	call	8066c8 <_Balloc>
  803388:	d8800715 	stw	r2,28(sp)
  80338c:	e0801015 	stw	r2,64(fp)
  803390:	00800384 	movi	r2,14
  803394:	1400f736 	bltu	r2,r16,803774 <_dtoa_r+0x764>
  803398:	8800f626 	beq	r17,zero,803774 <_dtoa_r+0x764>
  80339c:	d9c00517 	ldw	r7,20(sp)
  8033a0:	01c39a0e 	bge	zero,r7,80420c <_dtoa_r+0x11fc>
  8033a4:	388003cc 	andi	r2,r7,15
  8033a8:	100490fa 	slli	r2,r2,3
  8033ac:	382bd13a 	srai	r21,r7,4
  8033b0:	00c020b4 	movhi	r3,130
  8033b4:	18e83204 	addi	r3,r3,-24376
  8033b8:	1885883a 	add	r2,r3,r2
  8033bc:	a8c0040c 	andi	r3,r21,16
  8033c0:	12400017 	ldw	r9,0(r2)
  8033c4:	12000117 	ldw	r8,4(r2)
  8033c8:	18037926 	beq	r3,zero,8041b0 <_dtoa_r+0x11a0>
  8033cc:	008020b4 	movhi	r2,130
  8033d0:	10a82804 	addi	r2,r2,-24416
  8033d4:	11800817 	ldw	r6,32(r2)
  8033d8:	11c00917 	ldw	r7,36(r2)
  8033dc:	9009883a 	mov	r4,r18
  8033e0:	980b883a 	mov	r5,r19
  8033e4:	da001715 	stw	r8,92(sp)
  8033e8:	da401615 	stw	r9,88(sp)
  8033ec:	080b6500 	call	80b650 <__divdf3>
  8033f0:	da001717 	ldw	r8,92(sp)
  8033f4:	da401617 	ldw	r9,88(sp)
  8033f8:	ad4003cc 	andi	r21,r21,15
  8033fc:	040000c4 	movi	r16,3
  803400:	1023883a 	mov	r17,r2
  803404:	1829883a 	mov	r20,r3
  803408:	a8001126 	beq	r21,zero,803450 <_dtoa_r+0x440>
  80340c:	05c020b4 	movhi	r23,130
  803410:	bde82804 	addi	r23,r23,-24416
  803414:	4805883a 	mov	r2,r9
  803418:	4007883a 	mov	r3,r8
  80341c:	a980004c 	andi	r6,r21,1
  803420:	1009883a 	mov	r4,r2
  803424:	a82bd07a 	srai	r21,r21,1
  803428:	180b883a 	mov	r5,r3
  80342c:	30000426 	beq	r6,zero,803440 <_dtoa_r+0x430>
  803430:	b9800017 	ldw	r6,0(r23)
  803434:	b9c00117 	ldw	r7,4(r23)
  803438:	84000044 	addi	r16,r16,1
  80343c:	080c2780 	call	80c278 <__muldf3>
  803440:	bdc00204 	addi	r23,r23,8
  803444:	a83ff51e 	bne	r21,zero,80341c <__alt_mem_epcs_flash_controller_0+0xff7fa41c>
  803448:	1013883a 	mov	r9,r2
  80344c:	1811883a 	mov	r8,r3
  803450:	480d883a 	mov	r6,r9
  803454:	400f883a 	mov	r7,r8
  803458:	8809883a 	mov	r4,r17
  80345c:	a00b883a 	mov	r5,r20
  803460:	080b6500 	call	80b650 <__divdf3>
  803464:	d8800f15 	stw	r2,60(sp)
  803468:	d8c01015 	stw	r3,64(sp)
  80346c:	d8c00e17 	ldw	r3,56(sp)
  803470:	18000626 	beq	r3,zero,80348c <_dtoa_r+0x47c>
  803474:	d9000f17 	ldw	r4,60(sp)
  803478:	d9401017 	ldw	r5,64(sp)
  80347c:	000d883a 	mov	r6,zero
  803480:	01cffc34 	movhi	r7,16368
  803484:	080c1840 	call	80c184 <__ledf2>
  803488:	10040b16 	blt	r2,zero,8044b8 <_dtoa_r+0x14a8>
  80348c:	8009883a 	mov	r4,r16
  803490:	080d4600 	call	80d460 <__floatsidf>
  803494:	d9800f17 	ldw	r6,60(sp)
  803498:	d9c01017 	ldw	r7,64(sp)
  80349c:	1009883a 	mov	r4,r2
  8034a0:	180b883a 	mov	r5,r3
  8034a4:	080c2780 	call	80c278 <__muldf3>
  8034a8:	000d883a 	mov	r6,zero
  8034ac:	01d00734 	movhi	r7,16412
  8034b0:	1009883a 	mov	r4,r2
  8034b4:	180b883a 	mov	r5,r3
  8034b8:	080ada40 	call	80ada4 <__adddf3>
  8034bc:	1021883a 	mov	r16,r2
  8034c0:	d8800617 	ldw	r2,24(sp)
  8034c4:	047f3034 	movhi	r17,64704
  8034c8:	1c63883a 	add	r17,r3,r17
  8034cc:	10031826 	beq	r2,zero,804130 <_dtoa_r+0x1120>
  8034d0:	d8c00517 	ldw	r3,20(sp)
  8034d4:	db000617 	ldw	r12,24(sp)
  8034d8:	d8c01315 	stw	r3,76(sp)
  8034dc:	d9000b17 	ldw	r4,44(sp)
  8034e0:	20038f26 	beq	r4,zero,804320 <_dtoa_r+0x1310>
  8034e4:	60bfffc4 	addi	r2,r12,-1
  8034e8:	100490fa 	slli	r2,r2,3
  8034ec:	00c020b4 	movhi	r3,130
  8034f0:	18e83204 	addi	r3,r3,-24376
  8034f4:	1885883a 	add	r2,r3,r2
  8034f8:	11800017 	ldw	r6,0(r2)
  8034fc:	11c00117 	ldw	r7,4(r2)
  803500:	d8800717 	ldw	r2,28(sp)
  803504:	0009883a 	mov	r4,zero
  803508:	014ff834 	movhi	r5,16352
  80350c:	db001615 	stw	r12,88(sp)
  803510:	15c00044 	addi	r23,r2,1
  803514:	080b6500 	call	80b650 <__divdf3>
  803518:	800d883a 	mov	r6,r16
  80351c:	880f883a 	mov	r7,r17
  803520:	1009883a 	mov	r4,r2
  803524:	180b883a 	mov	r5,r3
  803528:	080cae40 	call	80cae4 <__subdf3>
  80352c:	d9401017 	ldw	r5,64(sp)
  803530:	d9000f17 	ldw	r4,60(sp)
  803534:	102b883a 	mov	r21,r2
  803538:	d8c01215 	stw	r3,72(sp)
  80353c:	080d3e00 	call	80d3e0 <__fixdfsi>
  803540:	1009883a 	mov	r4,r2
  803544:	1029883a 	mov	r20,r2
  803548:	080d4600 	call	80d460 <__floatsidf>
  80354c:	d9000f17 	ldw	r4,60(sp)
  803550:	d9401017 	ldw	r5,64(sp)
  803554:	100d883a 	mov	r6,r2
  803558:	180f883a 	mov	r7,r3
  80355c:	080cae40 	call	80cae4 <__subdf3>
  803560:	1823883a 	mov	r17,r3
  803564:	d8c00717 	ldw	r3,28(sp)
  803568:	d9401217 	ldw	r5,72(sp)
  80356c:	a2000c04 	addi	r8,r20,48
  803570:	1021883a 	mov	r16,r2
  803574:	1a000005 	stb	r8,0(r3)
  803578:	800d883a 	mov	r6,r16
  80357c:	880f883a 	mov	r7,r17
  803580:	a809883a 	mov	r4,r21
  803584:	4029883a 	mov	r20,r8
  803588:	080c0a80 	call	80c0a8 <__gedf2>
  80358c:	00841d16 	blt	zero,r2,804604 <_dtoa_r+0x15f4>
  803590:	800d883a 	mov	r6,r16
  803594:	880f883a 	mov	r7,r17
  803598:	0009883a 	mov	r4,zero
  80359c:	014ffc34 	movhi	r5,16368
  8035a0:	080cae40 	call	80cae4 <__subdf3>
  8035a4:	d9401217 	ldw	r5,72(sp)
  8035a8:	100d883a 	mov	r6,r2
  8035ac:	180f883a 	mov	r7,r3
  8035b0:	a809883a 	mov	r4,r21
  8035b4:	080c0a80 	call	80c0a8 <__gedf2>
  8035b8:	db001617 	ldw	r12,88(sp)
  8035bc:	00840e16 	blt	zero,r2,8045f8 <_dtoa_r+0x15e8>
  8035c0:	00800044 	movi	r2,1
  8035c4:	13006b0e 	bge	r2,r12,803774 <_dtoa_r+0x764>
  8035c8:	d9000717 	ldw	r4,28(sp)
  8035cc:	dd800f15 	stw	r22,60(sp)
  8035d0:	dcc01015 	stw	r19,64(sp)
  8035d4:	2319883a 	add	r12,r4,r12
  8035d8:	dcc01217 	ldw	r19,72(sp)
  8035dc:	602d883a 	mov	r22,r12
  8035e0:	dc801215 	stw	r18,72(sp)
  8035e4:	b825883a 	mov	r18,r23
  8035e8:	00000906 	br	803610 <_dtoa_r+0x600>
  8035ec:	080cae40 	call	80cae4 <__subdf3>
  8035f0:	a80d883a 	mov	r6,r21
  8035f4:	980f883a 	mov	r7,r19
  8035f8:	1009883a 	mov	r4,r2
  8035fc:	180b883a 	mov	r5,r3
  803600:	080c1840 	call	80c184 <__ledf2>
  803604:	1003e816 	blt	r2,zero,8045a8 <_dtoa_r+0x1598>
  803608:	b825883a 	mov	r18,r23
  80360c:	bd83e926 	beq	r23,r22,8045b4 <_dtoa_r+0x15a4>
  803610:	a809883a 	mov	r4,r21
  803614:	980b883a 	mov	r5,r19
  803618:	000d883a 	mov	r6,zero
  80361c:	01d00934 	movhi	r7,16420
  803620:	080c2780 	call	80c278 <__muldf3>
  803624:	000d883a 	mov	r6,zero
  803628:	01d00934 	movhi	r7,16420
  80362c:	8009883a 	mov	r4,r16
  803630:	880b883a 	mov	r5,r17
  803634:	102b883a 	mov	r21,r2
  803638:	1827883a 	mov	r19,r3
  80363c:	080c2780 	call	80c278 <__muldf3>
  803640:	180b883a 	mov	r5,r3
  803644:	1009883a 	mov	r4,r2
  803648:	1821883a 	mov	r16,r3
  80364c:	1023883a 	mov	r17,r2
  803650:	080d3e00 	call	80d3e0 <__fixdfsi>
  803654:	1009883a 	mov	r4,r2
  803658:	1029883a 	mov	r20,r2
  80365c:	080d4600 	call	80d460 <__floatsidf>
  803660:	8809883a 	mov	r4,r17
  803664:	800b883a 	mov	r5,r16
  803668:	100d883a 	mov	r6,r2
  80366c:	180f883a 	mov	r7,r3
  803670:	080cae40 	call	80cae4 <__subdf3>
  803674:	a5000c04 	addi	r20,r20,48
  803678:	a80d883a 	mov	r6,r21
  80367c:	980f883a 	mov	r7,r19
  803680:	1009883a 	mov	r4,r2
  803684:	180b883a 	mov	r5,r3
  803688:	95000005 	stb	r20,0(r18)
  80368c:	1021883a 	mov	r16,r2
  803690:	1823883a 	mov	r17,r3
  803694:	080c1840 	call	80c184 <__ledf2>
  803698:	bdc00044 	addi	r23,r23,1
  80369c:	800d883a 	mov	r6,r16
  8036a0:	880f883a 	mov	r7,r17
  8036a4:	0009883a 	mov	r4,zero
  8036a8:	014ffc34 	movhi	r5,16368
  8036ac:	103fcf0e 	bge	r2,zero,8035ec <__alt_mem_epcs_flash_controller_0+0xff7fa5ec>
  8036b0:	d8c01317 	ldw	r3,76(sp)
  8036b4:	d8c00515 	stw	r3,20(sp)
  8036b8:	d9400917 	ldw	r5,36(sp)
  8036bc:	e009883a 	mov	r4,fp
  8036c0:	08067700 	call	806770 <_Bfree>
  8036c4:	d9000517 	ldw	r4,20(sp)
  8036c8:	d9802317 	ldw	r6,140(sp)
  8036cc:	d9c02517 	ldw	r7,148(sp)
  8036d0:	b8000005 	stb	zero,0(r23)
  8036d4:	20800044 	addi	r2,r4,1
  8036d8:	30800015 	stw	r2,0(r6)
  8036dc:	3802aa26 	beq	r7,zero,804188 <_dtoa_r+0x1178>
  8036e0:	3dc00015 	stw	r23,0(r7)
  8036e4:	d8800717 	ldw	r2,28(sp)
  8036e8:	003e7906 	br	8030d0 <__alt_mem_epcs_flash_controller_0+0xff7fa0d0>
  8036ec:	00800434 	movhi	r2,16
  8036f0:	10bfffc4 	addi	r2,r2,-1
  8036f4:	88a2703a 	and	r17,r17,r2
  8036f8:	883e851e 	bne	r17,zero,803110 <__alt_mem_epcs_flash_controller_0+0xff7fa110>
  8036fc:	008020b4 	movhi	r2,130
  803700:	10a81304 	addi	r2,r2,-24500
  803704:	003e8406 	br	803118 <__alt_mem_epcs_flash_controller_0+0xff7fa118>
  803708:	10c00204 	addi	r3,r2,8
  80370c:	003e8706 	br	80312c <__alt_mem_epcs_flash_controller_0+0xff7fa12c>
  803710:	01400434 	movhi	r5,16
  803714:	297fffc4 	addi	r5,r5,-1
  803718:	994a703a 	and	r5,r19,r5
  80371c:	9009883a 	mov	r4,r18
  803720:	843f0044 	addi	r16,r16,-1023
  803724:	294ffc34 	orhi	r5,r5,16368
  803728:	dd800217 	ldw	r22,8(sp)
  80372c:	d8001115 	stw	zero,68(sp)
  803730:	003ea506 	br	8031c8 <__alt_mem_epcs_flash_controller_0+0xff7fa1c8>
  803734:	008020b4 	movhi	r2,130
  803738:	10a80a04 	addi	r2,r2,-24536
  80373c:	003e6406 	br	8030d0 <__alt_mem_epcs_flash_controller_0+0xff7fa0d0>
  803740:	e0001115 	stw	zero,68(fp)
  803744:	000b883a 	mov	r5,zero
  803748:	e009883a 	mov	r4,fp
  80374c:	08066c80 	call	8066c8 <_Balloc>
  803750:	01bfffc4 	movi	r6,-1
  803754:	01c00044 	movi	r7,1
  803758:	d8800715 	stw	r2,28(sp)
  80375c:	d9800c15 	stw	r6,48(sp)
  803760:	e0801015 	stw	r2,64(fp)
  803764:	d8000315 	stw	zero,12(sp)
  803768:	d9c00b15 	stw	r7,44(sp)
  80376c:	d9800615 	stw	r6,24(sp)
  803770:	d8002215 	stw	zero,136(sp)
  803774:	d8800117 	ldw	r2,4(sp)
  803778:	10008916 	blt	r2,zero,8039a0 <_dtoa_r+0x990>
  80377c:	d9000517 	ldw	r4,20(sp)
  803780:	00c00384 	movi	r3,14
  803784:	19008616 	blt	r3,r4,8039a0 <_dtoa_r+0x990>
  803788:	200490fa 	slli	r2,r4,3
  80378c:	00c020b4 	movhi	r3,130
  803790:	d9802217 	ldw	r6,136(sp)
  803794:	18e83204 	addi	r3,r3,-24376
  803798:	1885883a 	add	r2,r3,r2
  80379c:	14000017 	ldw	r16,0(r2)
  8037a0:	14400117 	ldw	r17,4(r2)
  8037a4:	30016316 	blt	r6,zero,803d34 <_dtoa_r+0xd24>
  8037a8:	800d883a 	mov	r6,r16
  8037ac:	880f883a 	mov	r7,r17
  8037b0:	9009883a 	mov	r4,r18
  8037b4:	980b883a 	mov	r5,r19
  8037b8:	080b6500 	call	80b650 <__divdf3>
  8037bc:	180b883a 	mov	r5,r3
  8037c0:	1009883a 	mov	r4,r2
  8037c4:	080d3e00 	call	80d3e0 <__fixdfsi>
  8037c8:	1009883a 	mov	r4,r2
  8037cc:	102b883a 	mov	r21,r2
  8037d0:	080d4600 	call	80d460 <__floatsidf>
  8037d4:	800d883a 	mov	r6,r16
  8037d8:	880f883a 	mov	r7,r17
  8037dc:	1009883a 	mov	r4,r2
  8037e0:	180b883a 	mov	r5,r3
  8037e4:	080c2780 	call	80c278 <__muldf3>
  8037e8:	100d883a 	mov	r6,r2
  8037ec:	180f883a 	mov	r7,r3
  8037f0:	9009883a 	mov	r4,r18
  8037f4:	980b883a 	mov	r5,r19
  8037f8:	080cae40 	call	80cae4 <__subdf3>
  8037fc:	d9c00717 	ldw	r7,28(sp)
  803800:	1009883a 	mov	r4,r2
  803804:	a8800c04 	addi	r2,r21,48
  803808:	38800005 	stb	r2,0(r7)
  80380c:	3dc00044 	addi	r23,r7,1
  803810:	d9c00617 	ldw	r7,24(sp)
  803814:	01800044 	movi	r6,1
  803818:	180b883a 	mov	r5,r3
  80381c:	2005883a 	mov	r2,r4
  803820:	39803826 	beq	r7,r6,803904 <_dtoa_r+0x8f4>
  803824:	000d883a 	mov	r6,zero
  803828:	01d00934 	movhi	r7,16420
  80382c:	080c2780 	call	80c278 <__muldf3>
  803830:	000d883a 	mov	r6,zero
  803834:	000f883a 	mov	r7,zero
  803838:	1009883a 	mov	r4,r2
  80383c:	180b883a 	mov	r5,r3
  803840:	1025883a 	mov	r18,r2
  803844:	1827883a 	mov	r19,r3
  803848:	080c0200 	call	80c020 <__eqdf2>
  80384c:	103f9a26 	beq	r2,zero,8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803850:	d9c00617 	ldw	r7,24(sp)
  803854:	d8c00717 	ldw	r3,28(sp)
  803858:	b829883a 	mov	r20,r23
  80385c:	38bfffc4 	addi	r2,r7,-1
  803860:	18ad883a 	add	r22,r3,r2
  803864:	00000a06 	br	803890 <_dtoa_r+0x880>
  803868:	080c2780 	call	80c278 <__muldf3>
  80386c:	000d883a 	mov	r6,zero
  803870:	000f883a 	mov	r7,zero
  803874:	1009883a 	mov	r4,r2
  803878:	180b883a 	mov	r5,r3
  80387c:	1025883a 	mov	r18,r2
  803880:	1827883a 	mov	r19,r3
  803884:	b829883a 	mov	r20,r23
  803888:	080c0200 	call	80c020 <__eqdf2>
  80388c:	103f8a26 	beq	r2,zero,8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803890:	800d883a 	mov	r6,r16
  803894:	880f883a 	mov	r7,r17
  803898:	9009883a 	mov	r4,r18
  80389c:	980b883a 	mov	r5,r19
  8038a0:	080b6500 	call	80b650 <__divdf3>
  8038a4:	180b883a 	mov	r5,r3
  8038a8:	1009883a 	mov	r4,r2
  8038ac:	080d3e00 	call	80d3e0 <__fixdfsi>
  8038b0:	1009883a 	mov	r4,r2
  8038b4:	102b883a 	mov	r21,r2
  8038b8:	080d4600 	call	80d460 <__floatsidf>
  8038bc:	800d883a 	mov	r6,r16
  8038c0:	880f883a 	mov	r7,r17
  8038c4:	1009883a 	mov	r4,r2
  8038c8:	180b883a 	mov	r5,r3
  8038cc:	080c2780 	call	80c278 <__muldf3>
  8038d0:	100d883a 	mov	r6,r2
  8038d4:	180f883a 	mov	r7,r3
  8038d8:	9009883a 	mov	r4,r18
  8038dc:	980b883a 	mov	r5,r19
  8038e0:	080cae40 	call	80cae4 <__subdf3>
  8038e4:	aa000c04 	addi	r8,r21,48
  8038e8:	a2000005 	stb	r8,0(r20)
  8038ec:	000d883a 	mov	r6,zero
  8038f0:	01d00934 	movhi	r7,16420
  8038f4:	1009883a 	mov	r4,r2
  8038f8:	180b883a 	mov	r5,r3
  8038fc:	a5c00044 	addi	r23,r20,1
  803900:	b53fd91e 	bne	r22,r20,803868 <__alt_mem_epcs_flash_controller_0+0xff7fa868>
  803904:	100d883a 	mov	r6,r2
  803908:	180f883a 	mov	r7,r3
  80390c:	1009883a 	mov	r4,r2
  803910:	180b883a 	mov	r5,r3
  803914:	080ada40 	call	80ada4 <__adddf3>
  803918:	100d883a 	mov	r6,r2
  80391c:	180f883a 	mov	r7,r3
  803920:	8009883a 	mov	r4,r16
  803924:	880b883a 	mov	r5,r17
  803928:	1027883a 	mov	r19,r2
  80392c:	1825883a 	mov	r18,r3
  803930:	080c1840 	call	80c184 <__ledf2>
  803934:	10000816 	blt	r2,zero,803958 <_dtoa_r+0x948>
  803938:	980d883a 	mov	r6,r19
  80393c:	900f883a 	mov	r7,r18
  803940:	8009883a 	mov	r4,r16
  803944:	880b883a 	mov	r5,r17
  803948:	080c0200 	call	80c020 <__eqdf2>
  80394c:	103f5a1e 	bne	r2,zero,8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803950:	ad40004c 	andi	r21,r21,1
  803954:	a83f5826 	beq	r21,zero,8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803958:	bd3fffc3 	ldbu	r20,-1(r23)
  80395c:	b8bfffc4 	addi	r2,r23,-1
  803960:	1007883a 	mov	r3,r2
  803964:	01400e44 	movi	r5,57
  803968:	d9800717 	ldw	r6,28(sp)
  80396c:	00000506 	br	803984 <_dtoa_r+0x974>
  803970:	18ffffc4 	addi	r3,r3,-1
  803974:	11824726 	beq	r2,r6,804294 <_dtoa_r+0x1284>
  803978:	1d000003 	ldbu	r20,0(r3)
  80397c:	102f883a 	mov	r23,r2
  803980:	10bfffc4 	addi	r2,r2,-1
  803984:	a1003fcc 	andi	r4,r20,255
  803988:	2100201c 	xori	r4,r4,128
  80398c:	213fe004 	addi	r4,r4,-128
  803990:	217ff726 	beq	r4,r5,803970 <__alt_mem_epcs_flash_controller_0+0xff7fa970>
  803994:	a2000044 	addi	r8,r20,1
  803998:	12000005 	stb	r8,0(r2)
  80399c:	003f4606 	br	8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  8039a0:	d9000b17 	ldw	r4,44(sp)
  8039a4:	2000c826 	beq	r4,zero,803cc8 <_dtoa_r+0xcb8>
  8039a8:	d9800317 	ldw	r6,12(sp)
  8039ac:	00c00044 	movi	r3,1
  8039b0:	1980f90e 	bge	r3,r6,803d98 <_dtoa_r+0xd88>
  8039b4:	d8800617 	ldw	r2,24(sp)
  8039b8:	d8c00a17 	ldw	r3,40(sp)
  8039bc:	157fffc4 	addi	r21,r2,-1
  8039c0:	1d41f316 	blt	r3,r21,804190 <_dtoa_r+0x1180>
  8039c4:	1d6bc83a 	sub	r21,r3,r21
  8039c8:	d9c00617 	ldw	r7,24(sp)
  8039cc:	3802aa16 	blt	r7,zero,804478 <_dtoa_r+0x1468>
  8039d0:	dd000817 	ldw	r20,32(sp)
  8039d4:	d8800617 	ldw	r2,24(sp)
  8039d8:	d8c00817 	ldw	r3,32(sp)
  8039dc:	01400044 	movi	r5,1
  8039e0:	e009883a 	mov	r4,fp
  8039e4:	1887883a 	add	r3,r3,r2
  8039e8:	d8c00815 	stw	r3,32(sp)
  8039ec:	b0ad883a 	add	r22,r22,r2
  8039f0:	0806afc0 	call	806afc <__i2b>
  8039f4:	1023883a 	mov	r17,r2
  8039f8:	a0000826 	beq	r20,zero,803a1c <_dtoa_r+0xa0c>
  8039fc:	0580070e 	bge	zero,r22,803a1c <_dtoa_r+0xa0c>
  803a00:	a005883a 	mov	r2,r20
  803a04:	b500b916 	blt	r22,r20,803cec <_dtoa_r+0xcdc>
  803a08:	d9000817 	ldw	r4,32(sp)
  803a0c:	a0a9c83a 	sub	r20,r20,r2
  803a10:	b0adc83a 	sub	r22,r22,r2
  803a14:	2089c83a 	sub	r4,r4,r2
  803a18:	d9000815 	stw	r4,32(sp)
  803a1c:	d9800a17 	ldw	r6,40(sp)
  803a20:	0181810e 	bge	zero,r6,804028 <_dtoa_r+0x1018>
  803a24:	d9c00b17 	ldw	r7,44(sp)
  803a28:	3800b326 	beq	r7,zero,803cf8 <_dtoa_r+0xce8>
  803a2c:	a800b226 	beq	r21,zero,803cf8 <_dtoa_r+0xce8>
  803a30:	880b883a 	mov	r5,r17
  803a34:	a80d883a 	mov	r6,r21
  803a38:	e009883a 	mov	r4,fp
  803a3c:	0806dc40 	call	806dc4 <__pow5mult>
  803a40:	d9800917 	ldw	r6,36(sp)
  803a44:	100b883a 	mov	r5,r2
  803a48:	e009883a 	mov	r4,fp
  803a4c:	1023883a 	mov	r17,r2
  803a50:	0806b380 	call	806b38 <__multiply>
  803a54:	1021883a 	mov	r16,r2
  803a58:	d8800a17 	ldw	r2,40(sp)
  803a5c:	d9400917 	ldw	r5,36(sp)
  803a60:	e009883a 	mov	r4,fp
  803a64:	1545c83a 	sub	r2,r2,r21
  803a68:	d8800a15 	stw	r2,40(sp)
  803a6c:	08067700 	call	806770 <_Bfree>
  803a70:	d8c00a17 	ldw	r3,40(sp)
  803a74:	18009f1e 	bne	r3,zero,803cf4 <_dtoa_r+0xce4>
  803a78:	05c00044 	movi	r23,1
  803a7c:	e009883a 	mov	r4,fp
  803a80:	b80b883a 	mov	r5,r23
  803a84:	0806afc0 	call	806afc <__i2b>
  803a88:	d9000d17 	ldw	r4,52(sp)
  803a8c:	102b883a 	mov	r21,r2
  803a90:	2000ce26 	beq	r4,zero,803dcc <_dtoa_r+0xdbc>
  803a94:	200d883a 	mov	r6,r4
  803a98:	100b883a 	mov	r5,r2
  803a9c:	e009883a 	mov	r4,fp
  803aa0:	0806dc40 	call	806dc4 <__pow5mult>
  803aa4:	d9800317 	ldw	r6,12(sp)
  803aa8:	102b883a 	mov	r21,r2
  803aac:	b981810e 	bge	r23,r6,8040b4 <_dtoa_r+0x10a4>
  803ab0:	0027883a 	mov	r19,zero
  803ab4:	a8800417 	ldw	r2,16(r21)
  803ab8:	05c00804 	movi	r23,32
  803abc:	10800104 	addi	r2,r2,4
  803ac0:	1085883a 	add	r2,r2,r2
  803ac4:	1085883a 	add	r2,r2,r2
  803ac8:	a885883a 	add	r2,r21,r2
  803acc:	11000017 	ldw	r4,0(r2)
  803ad0:	08069e40 	call	8069e4 <__hi0bits>
  803ad4:	b885c83a 	sub	r2,r23,r2
  803ad8:	1585883a 	add	r2,r2,r22
  803adc:	108007cc 	andi	r2,r2,31
  803ae0:	1000b326 	beq	r2,zero,803db0 <_dtoa_r+0xda0>
  803ae4:	00c00804 	movi	r3,32
  803ae8:	1887c83a 	sub	r3,r3,r2
  803aec:	01000104 	movi	r4,4
  803af0:	20c2cd0e 	bge	r4,r3,804628 <_dtoa_r+0x1618>
  803af4:	00c00704 	movi	r3,28
  803af8:	1885c83a 	sub	r2,r3,r2
  803afc:	d8c00817 	ldw	r3,32(sp)
  803b00:	a0a9883a 	add	r20,r20,r2
  803b04:	b0ad883a 	add	r22,r22,r2
  803b08:	1887883a 	add	r3,r3,r2
  803b0c:	d8c00815 	stw	r3,32(sp)
  803b10:	d9800817 	ldw	r6,32(sp)
  803b14:	0180040e 	bge	zero,r6,803b28 <_dtoa_r+0xb18>
  803b18:	800b883a 	mov	r5,r16
  803b1c:	e009883a 	mov	r4,fp
  803b20:	0806f040 	call	806f04 <__lshift>
  803b24:	1021883a 	mov	r16,r2
  803b28:	0580050e 	bge	zero,r22,803b40 <_dtoa_r+0xb30>
  803b2c:	a80b883a 	mov	r5,r21
  803b30:	b00d883a 	mov	r6,r22
  803b34:	e009883a 	mov	r4,fp
  803b38:	0806f040 	call	806f04 <__lshift>
  803b3c:	102b883a 	mov	r21,r2
  803b40:	d9c00e17 	ldw	r7,56(sp)
  803b44:	3801211e 	bne	r7,zero,803fcc <_dtoa_r+0xfbc>
  803b48:	d9800617 	ldw	r6,24(sp)
  803b4c:	0181380e 	bge	zero,r6,804030 <_dtoa_r+0x1020>
  803b50:	d8c00b17 	ldw	r3,44(sp)
  803b54:	1800ab1e 	bne	r3,zero,803e04 <_dtoa_r+0xdf4>
  803b58:	dc800717 	ldw	r18,28(sp)
  803b5c:	dcc00617 	ldw	r19,24(sp)
  803b60:	9029883a 	mov	r20,r18
  803b64:	00000206 	br	803b70 <_dtoa_r+0xb60>
  803b68:	08067980 	call	806798 <__multadd>
  803b6c:	1021883a 	mov	r16,r2
  803b70:	a80b883a 	mov	r5,r21
  803b74:	8009883a 	mov	r4,r16
  803b78:	0802de80 	call	802de8 <quorem>
  803b7c:	10800c04 	addi	r2,r2,48
  803b80:	90800005 	stb	r2,0(r18)
  803b84:	94800044 	addi	r18,r18,1
  803b88:	9507c83a 	sub	r3,r18,r20
  803b8c:	000f883a 	mov	r7,zero
  803b90:	01800284 	movi	r6,10
  803b94:	800b883a 	mov	r5,r16
  803b98:	e009883a 	mov	r4,fp
  803b9c:	1cfff216 	blt	r3,r19,803b68 <__alt_mem_epcs_flash_controller_0+0xff7fab68>
  803ba0:	1011883a 	mov	r8,r2
  803ba4:	d8800617 	ldw	r2,24(sp)
  803ba8:	0082370e 	bge	zero,r2,804488 <_dtoa_r+0x1478>
  803bac:	d9000717 	ldw	r4,28(sp)
  803bb0:	0025883a 	mov	r18,zero
  803bb4:	20af883a 	add	r23,r4,r2
  803bb8:	01800044 	movi	r6,1
  803bbc:	800b883a 	mov	r5,r16
  803bc0:	e009883a 	mov	r4,fp
  803bc4:	da001715 	stw	r8,92(sp)
  803bc8:	0806f040 	call	806f04 <__lshift>
  803bcc:	a80b883a 	mov	r5,r21
  803bd0:	1009883a 	mov	r4,r2
  803bd4:	d8800915 	stw	r2,36(sp)
  803bd8:	080704c0 	call	80704c <__mcmp>
  803bdc:	da001717 	ldw	r8,92(sp)
  803be0:	0081800e 	bge	zero,r2,8041e4 <_dtoa_r+0x11d4>
  803be4:	b93fffc3 	ldbu	r4,-1(r23)
  803be8:	b8bfffc4 	addi	r2,r23,-1
  803bec:	1007883a 	mov	r3,r2
  803bf0:	01800e44 	movi	r6,57
  803bf4:	d9c00717 	ldw	r7,28(sp)
  803bf8:	00000506 	br	803c10 <_dtoa_r+0xc00>
  803bfc:	18ffffc4 	addi	r3,r3,-1
  803c00:	11c12326 	beq	r2,r7,804090 <_dtoa_r+0x1080>
  803c04:	19000003 	ldbu	r4,0(r3)
  803c08:	102f883a 	mov	r23,r2
  803c0c:	10bfffc4 	addi	r2,r2,-1
  803c10:	21403fcc 	andi	r5,r4,255
  803c14:	2940201c 	xori	r5,r5,128
  803c18:	297fe004 	addi	r5,r5,-128
  803c1c:	29bff726 	beq	r5,r6,803bfc <__alt_mem_epcs_flash_controller_0+0xff7fabfc>
  803c20:	21000044 	addi	r4,r4,1
  803c24:	11000005 	stb	r4,0(r2)
  803c28:	a80b883a 	mov	r5,r21
  803c2c:	e009883a 	mov	r4,fp
  803c30:	08067700 	call	806770 <_Bfree>
  803c34:	883ea026 	beq	r17,zero,8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803c38:	90000426 	beq	r18,zero,803c4c <_dtoa_r+0xc3c>
  803c3c:	94400326 	beq	r18,r17,803c4c <_dtoa_r+0xc3c>
  803c40:	900b883a 	mov	r5,r18
  803c44:	e009883a 	mov	r4,fp
  803c48:	08067700 	call	806770 <_Bfree>
  803c4c:	880b883a 	mov	r5,r17
  803c50:	e009883a 	mov	r4,fp
  803c54:	08067700 	call	806770 <_Bfree>
  803c58:	003e9706 	br	8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803c5c:	01800044 	movi	r6,1
  803c60:	d9800e15 	stw	r6,56(sp)
  803c64:	003d9606 	br	8032c0 <__alt_mem_epcs_flash_controller_0+0xff7fa2c0>
  803c68:	d8800817 	ldw	r2,32(sp)
  803c6c:	d8c00517 	ldw	r3,20(sp)
  803c70:	d8000d15 	stw	zero,52(sp)
  803c74:	10c5c83a 	sub	r2,r2,r3
  803c78:	00c9c83a 	sub	r4,zero,r3
  803c7c:	d8800815 	stw	r2,32(sp)
  803c80:	d9000a15 	stw	r4,40(sp)
  803c84:	003d9706 	br	8032e4 <__alt_mem_epcs_flash_controller_0+0xff7fa2e4>
  803c88:	05adc83a 	sub	r22,zero,r22
  803c8c:	dd800815 	stw	r22,32(sp)
  803c90:	002d883a 	mov	r22,zero
  803c94:	003d8e06 	br	8032d0 <__alt_mem_epcs_flash_controller_0+0xff7fa2d0>
  803c98:	d9000517 	ldw	r4,20(sp)
  803c9c:	080d4600 	call	80d460 <__floatsidf>
  803ca0:	100d883a 	mov	r6,r2
  803ca4:	180f883a 	mov	r7,r3
  803ca8:	a009883a 	mov	r4,r20
  803cac:	880b883a 	mov	r5,r17
  803cb0:	080c0200 	call	80c020 <__eqdf2>
  803cb4:	103d7126 	beq	r2,zero,80327c <__alt_mem_epcs_flash_controller_0+0xff7fa27c>
  803cb8:	d9c00517 	ldw	r7,20(sp)
  803cbc:	39ffffc4 	addi	r7,r7,-1
  803cc0:	d9c00515 	stw	r7,20(sp)
  803cc4:	003d6d06 	br	80327c <__alt_mem_epcs_flash_controller_0+0xff7fa27c>
  803cc8:	dd400a17 	ldw	r21,40(sp)
  803ccc:	dd000817 	ldw	r20,32(sp)
  803cd0:	0023883a 	mov	r17,zero
  803cd4:	003f4806 	br	8039f8 <__alt_mem_epcs_flash_controller_0+0xff7fa9f8>
  803cd8:	10e3c83a 	sub	r17,r2,r3
  803cdc:	9448983a 	sll	r4,r18,r17
  803ce0:	003d3206 	br	8031ac <__alt_mem_epcs_flash_controller_0+0xff7fa1ac>
  803ce4:	d8000e15 	stw	zero,56(sp)
  803ce8:	003d7506 	br	8032c0 <__alt_mem_epcs_flash_controller_0+0xff7fa2c0>
  803cec:	b005883a 	mov	r2,r22
  803cf0:	003f4506 	br	803a08 <__alt_mem_epcs_flash_controller_0+0xff7faa08>
  803cf4:	dc000915 	stw	r16,36(sp)
  803cf8:	d9800a17 	ldw	r6,40(sp)
  803cfc:	d9400917 	ldw	r5,36(sp)
  803d00:	e009883a 	mov	r4,fp
  803d04:	0806dc40 	call	806dc4 <__pow5mult>
  803d08:	1021883a 	mov	r16,r2
  803d0c:	003f5a06 	br	803a78 <__alt_mem_epcs_flash_controller_0+0xff7faa78>
  803d10:	01c00044 	movi	r7,1
  803d14:	d9c00b15 	stw	r7,44(sp)
  803d18:	d8802217 	ldw	r2,136(sp)
  803d1c:	0081280e 	bge	zero,r2,8041c0 <_dtoa_r+0x11b0>
  803d20:	100d883a 	mov	r6,r2
  803d24:	1021883a 	mov	r16,r2
  803d28:	d8800c15 	stw	r2,48(sp)
  803d2c:	d8800615 	stw	r2,24(sp)
  803d30:	003d8806 	br	803354 <__alt_mem_epcs_flash_controller_0+0xff7fa354>
  803d34:	d8800617 	ldw	r2,24(sp)
  803d38:	00be9b16 	blt	zero,r2,8037a8 <__alt_mem_epcs_flash_controller_0+0xff7fa7a8>
  803d3c:	10010f1e 	bne	r2,zero,80417c <_dtoa_r+0x116c>
  803d40:	880b883a 	mov	r5,r17
  803d44:	000d883a 	mov	r6,zero
  803d48:	01d00534 	movhi	r7,16404
  803d4c:	8009883a 	mov	r4,r16
  803d50:	080c2780 	call	80c278 <__muldf3>
  803d54:	900d883a 	mov	r6,r18
  803d58:	980f883a 	mov	r7,r19
  803d5c:	1009883a 	mov	r4,r2
  803d60:	180b883a 	mov	r5,r3
  803d64:	080c0a80 	call	80c0a8 <__gedf2>
  803d68:	002b883a 	mov	r21,zero
  803d6c:	0023883a 	mov	r17,zero
  803d70:	1000bf16 	blt	r2,zero,804070 <_dtoa_r+0x1060>
  803d74:	d9802217 	ldw	r6,136(sp)
  803d78:	ddc00717 	ldw	r23,28(sp)
  803d7c:	018c303a 	nor	r6,zero,r6
  803d80:	d9800515 	stw	r6,20(sp)
  803d84:	a80b883a 	mov	r5,r21
  803d88:	e009883a 	mov	r4,fp
  803d8c:	08067700 	call	806770 <_Bfree>
  803d90:	883e4926 	beq	r17,zero,8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  803d94:	003fad06 	br	803c4c <__alt_mem_epcs_flash_controller_0+0xff7fac4c>
  803d98:	d9c01117 	ldw	r7,68(sp)
  803d9c:	3801bc26 	beq	r7,zero,804490 <_dtoa_r+0x1480>
  803da0:	10810cc4 	addi	r2,r2,1075
  803da4:	dd400a17 	ldw	r21,40(sp)
  803da8:	dd000817 	ldw	r20,32(sp)
  803dac:	003f0a06 	br	8039d8 <__alt_mem_epcs_flash_controller_0+0xff7fa9d8>
  803db0:	00800704 	movi	r2,28
  803db4:	d9000817 	ldw	r4,32(sp)
  803db8:	a0a9883a 	add	r20,r20,r2
  803dbc:	b0ad883a 	add	r22,r22,r2
  803dc0:	2089883a 	add	r4,r4,r2
  803dc4:	d9000815 	stw	r4,32(sp)
  803dc8:	003f5106 	br	803b10 <__alt_mem_epcs_flash_controller_0+0xff7fab10>
  803dcc:	d8c00317 	ldw	r3,12(sp)
  803dd0:	b8c1fc0e 	bge	r23,r3,8045c4 <_dtoa_r+0x15b4>
  803dd4:	0027883a 	mov	r19,zero
  803dd8:	b805883a 	mov	r2,r23
  803ddc:	003f3e06 	br	803ad8 <__alt_mem_epcs_flash_controller_0+0xff7faad8>
  803de0:	880b883a 	mov	r5,r17
  803de4:	e009883a 	mov	r4,fp
  803de8:	000f883a 	mov	r7,zero
  803dec:	01800284 	movi	r6,10
  803df0:	08067980 	call	806798 <__multadd>
  803df4:	d9000c17 	ldw	r4,48(sp)
  803df8:	1023883a 	mov	r17,r2
  803dfc:	0102040e 	bge	zero,r4,804610 <_dtoa_r+0x1600>
  803e00:	d9000615 	stw	r4,24(sp)
  803e04:	0500050e 	bge	zero,r20,803e1c <_dtoa_r+0xe0c>
  803e08:	880b883a 	mov	r5,r17
  803e0c:	a00d883a 	mov	r6,r20
  803e10:	e009883a 	mov	r4,fp
  803e14:	0806f040 	call	806f04 <__lshift>
  803e18:	1023883a 	mov	r17,r2
  803e1c:	9801241e 	bne	r19,zero,8042b0 <_dtoa_r+0x12a0>
  803e20:	8829883a 	mov	r20,r17
  803e24:	d9000617 	ldw	r4,24(sp)
  803e28:	dcc00717 	ldw	r19,28(sp)
  803e2c:	9480004c 	andi	r18,r18,1
  803e30:	20bfffc4 	addi	r2,r4,-1
  803e34:	9885883a 	add	r2,r19,r2
  803e38:	d8800415 	stw	r2,16(sp)
  803e3c:	dc800615 	stw	r18,24(sp)
  803e40:	a80b883a 	mov	r5,r21
  803e44:	8009883a 	mov	r4,r16
  803e48:	0802de80 	call	802de8 <quorem>
  803e4c:	880b883a 	mov	r5,r17
  803e50:	8009883a 	mov	r4,r16
  803e54:	102f883a 	mov	r23,r2
  803e58:	080704c0 	call	80704c <__mcmp>
  803e5c:	a80b883a 	mov	r5,r21
  803e60:	a00d883a 	mov	r6,r20
  803e64:	e009883a 	mov	r4,fp
  803e68:	102d883a 	mov	r22,r2
  803e6c:	08070ac0 	call	8070ac <__mdiff>
  803e70:	1007883a 	mov	r3,r2
  803e74:	10800317 	ldw	r2,12(r2)
  803e78:	bc800c04 	addi	r18,r23,48
  803e7c:	180b883a 	mov	r5,r3
  803e80:	10004e1e 	bne	r2,zero,803fbc <_dtoa_r+0xfac>
  803e84:	8009883a 	mov	r4,r16
  803e88:	d8c01615 	stw	r3,88(sp)
  803e8c:	080704c0 	call	80704c <__mcmp>
  803e90:	d8c01617 	ldw	r3,88(sp)
  803e94:	e009883a 	mov	r4,fp
  803e98:	d8801615 	stw	r2,88(sp)
  803e9c:	180b883a 	mov	r5,r3
  803ea0:	08067700 	call	806770 <_Bfree>
  803ea4:	d8801617 	ldw	r2,88(sp)
  803ea8:	1000041e 	bne	r2,zero,803ebc <_dtoa_r+0xeac>
  803eac:	d9800317 	ldw	r6,12(sp)
  803eb0:	3000021e 	bne	r6,zero,803ebc <_dtoa_r+0xeac>
  803eb4:	d8c00617 	ldw	r3,24(sp)
  803eb8:	18003726 	beq	r3,zero,803f98 <_dtoa_r+0xf88>
  803ebc:	b0002016 	blt	r22,zero,803f40 <_dtoa_r+0xf30>
  803ec0:	b000041e 	bne	r22,zero,803ed4 <_dtoa_r+0xec4>
  803ec4:	d9000317 	ldw	r4,12(sp)
  803ec8:	2000021e 	bne	r4,zero,803ed4 <_dtoa_r+0xec4>
  803ecc:	d8c00617 	ldw	r3,24(sp)
  803ed0:	18001b26 	beq	r3,zero,803f40 <_dtoa_r+0xf30>
  803ed4:	00810716 	blt	zero,r2,8042f4 <_dtoa_r+0x12e4>
  803ed8:	d8c00417 	ldw	r3,16(sp)
  803edc:	9d800044 	addi	r22,r19,1
  803ee0:	9c800005 	stb	r18,0(r19)
  803ee4:	b02f883a 	mov	r23,r22
  803ee8:	98c10626 	beq	r19,r3,804304 <_dtoa_r+0x12f4>
  803eec:	800b883a 	mov	r5,r16
  803ef0:	000f883a 	mov	r7,zero
  803ef4:	01800284 	movi	r6,10
  803ef8:	e009883a 	mov	r4,fp
  803efc:	08067980 	call	806798 <__multadd>
  803f00:	1021883a 	mov	r16,r2
  803f04:	000f883a 	mov	r7,zero
  803f08:	01800284 	movi	r6,10
  803f0c:	880b883a 	mov	r5,r17
  803f10:	e009883a 	mov	r4,fp
  803f14:	8d002526 	beq	r17,r20,803fac <_dtoa_r+0xf9c>
  803f18:	08067980 	call	806798 <__multadd>
  803f1c:	a00b883a 	mov	r5,r20
  803f20:	000f883a 	mov	r7,zero
  803f24:	01800284 	movi	r6,10
  803f28:	e009883a 	mov	r4,fp
  803f2c:	1023883a 	mov	r17,r2
  803f30:	08067980 	call	806798 <__multadd>
  803f34:	1029883a 	mov	r20,r2
  803f38:	b027883a 	mov	r19,r22
  803f3c:	003fc006 	br	803e40 <__alt_mem_epcs_flash_controller_0+0xff7fae40>
  803f40:	9011883a 	mov	r8,r18
  803f44:	00800e0e 	bge	zero,r2,803f80 <_dtoa_r+0xf70>
  803f48:	800b883a 	mov	r5,r16
  803f4c:	01800044 	movi	r6,1
  803f50:	e009883a 	mov	r4,fp
  803f54:	da001715 	stw	r8,92(sp)
  803f58:	0806f040 	call	806f04 <__lshift>
  803f5c:	a80b883a 	mov	r5,r21
  803f60:	1009883a 	mov	r4,r2
  803f64:	1021883a 	mov	r16,r2
  803f68:	080704c0 	call	80704c <__mcmp>
  803f6c:	da001717 	ldw	r8,92(sp)
  803f70:	0081960e 	bge	zero,r2,8045cc <_dtoa_r+0x15bc>
  803f74:	00800e44 	movi	r2,57
  803f78:	40817026 	beq	r8,r2,80453c <_dtoa_r+0x152c>
  803f7c:	ba000c44 	addi	r8,r23,49
  803f80:	8825883a 	mov	r18,r17
  803f84:	9dc00044 	addi	r23,r19,1
  803f88:	9a000005 	stb	r8,0(r19)
  803f8c:	a023883a 	mov	r17,r20
  803f90:	dc000915 	stw	r16,36(sp)
  803f94:	003f2406 	br	803c28 <__alt_mem_epcs_flash_controller_0+0xff7fac28>
  803f98:	00800e44 	movi	r2,57
  803f9c:	9011883a 	mov	r8,r18
  803fa0:	90816626 	beq	r18,r2,80453c <_dtoa_r+0x152c>
  803fa4:	05bff516 	blt	zero,r22,803f7c <__alt_mem_epcs_flash_controller_0+0xff7faf7c>
  803fa8:	003ff506 	br	803f80 <__alt_mem_epcs_flash_controller_0+0xff7faf80>
  803fac:	08067980 	call	806798 <__multadd>
  803fb0:	1023883a 	mov	r17,r2
  803fb4:	1029883a 	mov	r20,r2
  803fb8:	003fdf06 	br	803f38 <__alt_mem_epcs_flash_controller_0+0xff7faf38>
  803fbc:	e009883a 	mov	r4,fp
  803fc0:	08067700 	call	806770 <_Bfree>
  803fc4:	00800044 	movi	r2,1
  803fc8:	003fbc06 	br	803ebc <__alt_mem_epcs_flash_controller_0+0xff7faebc>
  803fcc:	a80b883a 	mov	r5,r21
  803fd0:	8009883a 	mov	r4,r16
  803fd4:	080704c0 	call	80704c <__mcmp>
  803fd8:	103edb0e 	bge	r2,zero,803b48 <__alt_mem_epcs_flash_controller_0+0xff7fab48>
  803fdc:	800b883a 	mov	r5,r16
  803fe0:	000f883a 	mov	r7,zero
  803fe4:	01800284 	movi	r6,10
  803fe8:	e009883a 	mov	r4,fp
  803fec:	08067980 	call	806798 <__multadd>
  803ff0:	1021883a 	mov	r16,r2
  803ff4:	d8800517 	ldw	r2,20(sp)
  803ff8:	d8c00b17 	ldw	r3,44(sp)
  803ffc:	10bfffc4 	addi	r2,r2,-1
  804000:	d8800515 	stw	r2,20(sp)
  804004:	183f761e 	bne	r3,zero,803de0 <__alt_mem_epcs_flash_controller_0+0xff7fade0>
  804008:	d9000c17 	ldw	r4,48(sp)
  80400c:	0101730e 	bge	zero,r4,8045dc <_dtoa_r+0x15cc>
  804010:	d9000615 	stw	r4,24(sp)
  804014:	003ed006 	br	803b58 <__alt_mem_epcs_flash_controller_0+0xff7fab58>
  804018:	00800084 	movi	r2,2
  80401c:	3081861e 	bne	r6,r2,804638 <_dtoa_r+0x1628>
  804020:	d8000b15 	stw	zero,44(sp)
  804024:	003f3c06 	br	803d18 <__alt_mem_epcs_flash_controller_0+0xff7fad18>
  804028:	dc000917 	ldw	r16,36(sp)
  80402c:	003e9206 	br	803a78 <__alt_mem_epcs_flash_controller_0+0xff7faa78>
  804030:	d9c00317 	ldw	r7,12(sp)
  804034:	00800084 	movi	r2,2
  804038:	11fec50e 	bge	r2,r7,803b50 <__alt_mem_epcs_flash_controller_0+0xff7fab50>
  80403c:	d9000617 	ldw	r4,24(sp)
  804040:	20013c1e 	bne	r4,zero,804534 <_dtoa_r+0x1524>
  804044:	a80b883a 	mov	r5,r21
  804048:	000f883a 	mov	r7,zero
  80404c:	01800144 	movi	r6,5
  804050:	e009883a 	mov	r4,fp
  804054:	08067980 	call	806798 <__multadd>
  804058:	100b883a 	mov	r5,r2
  80405c:	8009883a 	mov	r4,r16
  804060:	102b883a 	mov	r21,r2
  804064:	080704c0 	call	80704c <__mcmp>
  804068:	dc000915 	stw	r16,36(sp)
  80406c:	00bf410e 	bge	zero,r2,803d74 <__alt_mem_epcs_flash_controller_0+0xff7fad74>
  804070:	d9c00717 	ldw	r7,28(sp)
  804074:	00800c44 	movi	r2,49
  804078:	38800005 	stb	r2,0(r7)
  80407c:	d8800517 	ldw	r2,20(sp)
  804080:	3dc00044 	addi	r23,r7,1
  804084:	10800044 	addi	r2,r2,1
  804088:	d8800515 	stw	r2,20(sp)
  80408c:	003f3d06 	br	803d84 <__alt_mem_epcs_flash_controller_0+0xff7fad84>
  804090:	d9800517 	ldw	r6,20(sp)
  804094:	d9c00717 	ldw	r7,28(sp)
  804098:	00800c44 	movi	r2,49
  80409c:	31800044 	addi	r6,r6,1
  8040a0:	d9800515 	stw	r6,20(sp)
  8040a4:	38800005 	stb	r2,0(r7)
  8040a8:	003edf06 	br	803c28 <__alt_mem_epcs_flash_controller_0+0xff7fac28>
  8040ac:	d8000b15 	stw	zero,44(sp)
  8040b0:	003c9f06 	br	803330 <__alt_mem_epcs_flash_controller_0+0xff7fa330>
  8040b4:	903e7e1e 	bne	r18,zero,803ab0 <__alt_mem_epcs_flash_controller_0+0xff7faab0>
  8040b8:	00800434 	movhi	r2,16
  8040bc:	10bfffc4 	addi	r2,r2,-1
  8040c0:	9884703a 	and	r2,r19,r2
  8040c4:	1000ea1e 	bne	r2,zero,804470 <_dtoa_r+0x1460>
  8040c8:	9cdffc2c 	andhi	r19,r19,32752
  8040cc:	9800e826 	beq	r19,zero,804470 <_dtoa_r+0x1460>
  8040d0:	d9c00817 	ldw	r7,32(sp)
  8040d4:	b5800044 	addi	r22,r22,1
  8040d8:	04c00044 	movi	r19,1
  8040dc:	39c00044 	addi	r7,r7,1
  8040e0:	d9c00815 	stw	r7,32(sp)
  8040e4:	d8800d17 	ldw	r2,52(sp)
  8040e8:	103e721e 	bne	r2,zero,803ab4 <__alt_mem_epcs_flash_controller_0+0xff7faab4>
  8040ec:	00800044 	movi	r2,1
  8040f0:	003e7906 	br	803ad8 <__alt_mem_epcs_flash_controller_0+0xff7faad8>
  8040f4:	8009883a 	mov	r4,r16
  8040f8:	080d4600 	call	80d460 <__floatsidf>
  8040fc:	d9800f17 	ldw	r6,60(sp)
  804100:	d9c01017 	ldw	r7,64(sp)
  804104:	1009883a 	mov	r4,r2
  804108:	180b883a 	mov	r5,r3
  80410c:	080c2780 	call	80c278 <__muldf3>
  804110:	000d883a 	mov	r6,zero
  804114:	01d00734 	movhi	r7,16412
  804118:	1009883a 	mov	r4,r2
  80411c:	180b883a 	mov	r5,r3
  804120:	080ada40 	call	80ada4 <__adddf3>
  804124:	047f3034 	movhi	r17,64704
  804128:	1021883a 	mov	r16,r2
  80412c:	1c63883a 	add	r17,r3,r17
  804130:	d9000f17 	ldw	r4,60(sp)
  804134:	d9401017 	ldw	r5,64(sp)
  804138:	000d883a 	mov	r6,zero
  80413c:	01d00534 	movhi	r7,16404
  804140:	080cae40 	call	80cae4 <__subdf3>
  804144:	800d883a 	mov	r6,r16
  804148:	880f883a 	mov	r7,r17
  80414c:	1009883a 	mov	r4,r2
  804150:	180b883a 	mov	r5,r3
  804154:	102b883a 	mov	r21,r2
  804158:	1829883a 	mov	r20,r3
  80415c:	080c0a80 	call	80c0a8 <__gedf2>
  804160:	00806c16 	blt	zero,r2,804314 <_dtoa_r+0x1304>
  804164:	89e0003c 	xorhi	r7,r17,32768
  804168:	800d883a 	mov	r6,r16
  80416c:	a809883a 	mov	r4,r21
  804170:	a00b883a 	mov	r5,r20
  804174:	080c1840 	call	80c184 <__ledf2>
  804178:	103d7e0e 	bge	r2,zero,803774 <__alt_mem_epcs_flash_controller_0+0xff7fa774>
  80417c:	002b883a 	mov	r21,zero
  804180:	0023883a 	mov	r17,zero
  804184:	003efb06 	br	803d74 <__alt_mem_epcs_flash_controller_0+0xff7fad74>
  804188:	d8800717 	ldw	r2,28(sp)
  80418c:	003bd006 	br	8030d0 <__alt_mem_epcs_flash_controller_0+0xff7fa0d0>
  804190:	d9000a17 	ldw	r4,40(sp)
  804194:	d9800d17 	ldw	r6,52(sp)
  804198:	dd400a15 	stw	r21,40(sp)
  80419c:	a905c83a 	sub	r2,r21,r4
  8041a0:	308d883a 	add	r6,r6,r2
  8041a4:	d9800d15 	stw	r6,52(sp)
  8041a8:	002b883a 	mov	r21,zero
  8041ac:	003e0606 	br	8039c8 <__alt_mem_epcs_flash_controller_0+0xff7fa9c8>
  8041b0:	9023883a 	mov	r17,r18
  8041b4:	9829883a 	mov	r20,r19
  8041b8:	04000084 	movi	r16,2
  8041bc:	003c9206 	br	803408 <__alt_mem_epcs_flash_controller_0+0xff7fa408>
  8041c0:	04000044 	movi	r16,1
  8041c4:	dc000c15 	stw	r16,48(sp)
  8041c8:	dc000615 	stw	r16,24(sp)
  8041cc:	dc002215 	stw	r16,136(sp)
  8041d0:	e0001115 	stw	zero,68(fp)
  8041d4:	000b883a 	mov	r5,zero
  8041d8:	003c6906 	br	803380 <__alt_mem_epcs_flash_controller_0+0xff7fa380>
  8041dc:	3021883a 	mov	r16,r6
  8041e0:	003ffb06 	br	8041d0 <__alt_mem_epcs_flash_controller_0+0xff7fb1d0>
  8041e4:	1000021e 	bne	r2,zero,8041f0 <_dtoa_r+0x11e0>
  8041e8:	4200004c 	andi	r8,r8,1
  8041ec:	403e7d1e 	bne	r8,zero,803be4 <__alt_mem_epcs_flash_controller_0+0xff7fabe4>
  8041f0:	01000c04 	movi	r4,48
  8041f4:	00000106 	br	8041fc <_dtoa_r+0x11ec>
  8041f8:	102f883a 	mov	r23,r2
  8041fc:	b8bfffc4 	addi	r2,r23,-1
  804200:	10c00007 	ldb	r3,0(r2)
  804204:	193ffc26 	beq	r3,r4,8041f8 <__alt_mem_epcs_flash_controller_0+0xff7fb1f8>
  804208:	003e8706 	br	803c28 <__alt_mem_epcs_flash_controller_0+0xff7fac28>
  80420c:	d8800517 	ldw	r2,20(sp)
  804210:	00a3c83a 	sub	r17,zero,r2
  804214:	8800a426 	beq	r17,zero,8044a8 <_dtoa_r+0x1498>
  804218:	888003cc 	andi	r2,r17,15
  80421c:	100490fa 	slli	r2,r2,3
  804220:	00c020b4 	movhi	r3,130
  804224:	18e83204 	addi	r3,r3,-24376
  804228:	1885883a 	add	r2,r3,r2
  80422c:	11800017 	ldw	r6,0(r2)
  804230:	11c00117 	ldw	r7,4(r2)
  804234:	9009883a 	mov	r4,r18
  804238:	980b883a 	mov	r5,r19
  80423c:	8823d13a 	srai	r17,r17,4
  804240:	080c2780 	call	80c278 <__muldf3>
  804244:	d8800f15 	stw	r2,60(sp)
  804248:	d8c01015 	stw	r3,64(sp)
  80424c:	8800e826 	beq	r17,zero,8045f0 <_dtoa_r+0x15e0>
  804250:	050020b4 	movhi	r20,130
  804254:	a5282804 	addi	r20,r20,-24416
  804258:	04000084 	movi	r16,2
  80425c:	8980004c 	andi	r6,r17,1
  804260:	1009883a 	mov	r4,r2
  804264:	8823d07a 	srai	r17,r17,1
  804268:	180b883a 	mov	r5,r3
  80426c:	30000426 	beq	r6,zero,804280 <_dtoa_r+0x1270>
  804270:	a1800017 	ldw	r6,0(r20)
  804274:	a1c00117 	ldw	r7,4(r20)
  804278:	84000044 	addi	r16,r16,1
  80427c:	080c2780 	call	80c278 <__muldf3>
  804280:	a5000204 	addi	r20,r20,8
  804284:	883ff51e 	bne	r17,zero,80425c <__alt_mem_epcs_flash_controller_0+0xff7fb25c>
  804288:	d8800f15 	stw	r2,60(sp)
  80428c:	d8c01015 	stw	r3,64(sp)
  804290:	003c7606 	br	80346c <__alt_mem_epcs_flash_controller_0+0xff7fa46c>
  804294:	00c00c04 	movi	r3,48
  804298:	10c00005 	stb	r3,0(r2)
  80429c:	d8c00517 	ldw	r3,20(sp)
  8042a0:	bd3fffc3 	ldbu	r20,-1(r23)
  8042a4:	18c00044 	addi	r3,r3,1
  8042a8:	d8c00515 	stw	r3,20(sp)
  8042ac:	003db906 	br	803994 <__alt_mem_epcs_flash_controller_0+0xff7fa994>
  8042b0:	89400117 	ldw	r5,4(r17)
  8042b4:	e009883a 	mov	r4,fp
  8042b8:	08066c80 	call	8066c8 <_Balloc>
  8042bc:	89800417 	ldw	r6,16(r17)
  8042c0:	89400304 	addi	r5,r17,12
  8042c4:	11000304 	addi	r4,r2,12
  8042c8:	31800084 	addi	r6,r6,2
  8042cc:	318d883a 	add	r6,r6,r6
  8042d0:	318d883a 	add	r6,r6,r6
  8042d4:	1027883a 	mov	r19,r2
  8042d8:	08062fc0 	call	8062fc <memcpy>
  8042dc:	01800044 	movi	r6,1
  8042e0:	980b883a 	mov	r5,r19
  8042e4:	e009883a 	mov	r4,fp
  8042e8:	0806f040 	call	806f04 <__lshift>
  8042ec:	1029883a 	mov	r20,r2
  8042f0:	003ecc06 	br	803e24 <__alt_mem_epcs_flash_controller_0+0xff7fae24>
  8042f4:	00800e44 	movi	r2,57
  8042f8:	90809026 	beq	r18,r2,80453c <_dtoa_r+0x152c>
  8042fc:	92000044 	addi	r8,r18,1
  804300:	003f1f06 	br	803f80 <__alt_mem_epcs_flash_controller_0+0xff7faf80>
  804304:	9011883a 	mov	r8,r18
  804308:	8825883a 	mov	r18,r17
  80430c:	a023883a 	mov	r17,r20
  804310:	003e2906 	br	803bb8 <__alt_mem_epcs_flash_controller_0+0xff7fabb8>
  804314:	002b883a 	mov	r21,zero
  804318:	0023883a 	mov	r17,zero
  80431c:	003f5406 	br	804070 <__alt_mem_epcs_flash_controller_0+0xff7fb070>
  804320:	61bfffc4 	addi	r6,r12,-1
  804324:	300490fa 	slli	r2,r6,3
  804328:	00c020b4 	movhi	r3,130
  80432c:	18e83204 	addi	r3,r3,-24376
  804330:	1885883a 	add	r2,r3,r2
  804334:	11000017 	ldw	r4,0(r2)
  804338:	11400117 	ldw	r5,4(r2)
  80433c:	d8800717 	ldw	r2,28(sp)
  804340:	880f883a 	mov	r7,r17
  804344:	d9801215 	stw	r6,72(sp)
  804348:	800d883a 	mov	r6,r16
  80434c:	db001615 	stw	r12,88(sp)
  804350:	15c00044 	addi	r23,r2,1
  804354:	080c2780 	call	80c278 <__muldf3>
  804358:	d9401017 	ldw	r5,64(sp)
  80435c:	d9000f17 	ldw	r4,60(sp)
  804360:	d8c01515 	stw	r3,84(sp)
  804364:	d8801415 	stw	r2,80(sp)
  804368:	080d3e00 	call	80d3e0 <__fixdfsi>
  80436c:	1009883a 	mov	r4,r2
  804370:	1021883a 	mov	r16,r2
  804374:	080d4600 	call	80d460 <__floatsidf>
  804378:	d9000f17 	ldw	r4,60(sp)
  80437c:	d9401017 	ldw	r5,64(sp)
  804380:	100d883a 	mov	r6,r2
  804384:	180f883a 	mov	r7,r3
  804388:	080cae40 	call	80cae4 <__subdf3>
  80438c:	1829883a 	mov	r20,r3
  804390:	d8c00717 	ldw	r3,28(sp)
  804394:	84000c04 	addi	r16,r16,48
  804398:	1023883a 	mov	r17,r2
  80439c:	1c000005 	stb	r16,0(r3)
  8043a0:	db001617 	ldw	r12,88(sp)
  8043a4:	00800044 	movi	r2,1
  8043a8:	60802226 	beq	r12,r2,804434 <_dtoa_r+0x1424>
  8043ac:	d9c00717 	ldw	r7,28(sp)
  8043b0:	8805883a 	mov	r2,r17
  8043b4:	b82b883a 	mov	r21,r23
  8043b8:	3b19883a 	add	r12,r7,r12
  8043bc:	6023883a 	mov	r17,r12
  8043c0:	a007883a 	mov	r3,r20
  8043c4:	dc800f15 	stw	r18,60(sp)
  8043c8:	000d883a 	mov	r6,zero
  8043cc:	01d00934 	movhi	r7,16420
  8043d0:	1009883a 	mov	r4,r2
  8043d4:	180b883a 	mov	r5,r3
  8043d8:	080c2780 	call	80c278 <__muldf3>
  8043dc:	180b883a 	mov	r5,r3
  8043e0:	1009883a 	mov	r4,r2
  8043e4:	1829883a 	mov	r20,r3
  8043e8:	1025883a 	mov	r18,r2
  8043ec:	080d3e00 	call	80d3e0 <__fixdfsi>
  8043f0:	1009883a 	mov	r4,r2
  8043f4:	1021883a 	mov	r16,r2
  8043f8:	080d4600 	call	80d460 <__floatsidf>
  8043fc:	100d883a 	mov	r6,r2
  804400:	180f883a 	mov	r7,r3
  804404:	9009883a 	mov	r4,r18
  804408:	a00b883a 	mov	r5,r20
  80440c:	84000c04 	addi	r16,r16,48
  804410:	080cae40 	call	80cae4 <__subdf3>
  804414:	ad400044 	addi	r21,r21,1
  804418:	ac3fffc5 	stb	r16,-1(r21)
  80441c:	ac7fea1e 	bne	r21,r17,8043c8 <__alt_mem_epcs_flash_controller_0+0xff7fb3c8>
  804420:	1023883a 	mov	r17,r2
  804424:	d8801217 	ldw	r2,72(sp)
  804428:	dc800f17 	ldw	r18,60(sp)
  80442c:	1829883a 	mov	r20,r3
  804430:	b8af883a 	add	r23,r23,r2
  804434:	d9001417 	ldw	r4,80(sp)
  804438:	d9401517 	ldw	r5,84(sp)
  80443c:	000d883a 	mov	r6,zero
  804440:	01cff834 	movhi	r7,16352
  804444:	080ada40 	call	80ada4 <__adddf3>
  804448:	880d883a 	mov	r6,r17
  80444c:	a00f883a 	mov	r7,r20
  804450:	1009883a 	mov	r4,r2
  804454:	180b883a 	mov	r5,r3
  804458:	080c1840 	call	80c184 <__ledf2>
  80445c:	10003e0e 	bge	r2,zero,804558 <_dtoa_r+0x1548>
  804460:	d9001317 	ldw	r4,76(sp)
  804464:	bd3fffc3 	ldbu	r20,-1(r23)
  804468:	d9000515 	stw	r4,20(sp)
  80446c:	003d3b06 	br	80395c <__alt_mem_epcs_flash_controller_0+0xff7fa95c>
  804470:	0027883a 	mov	r19,zero
  804474:	003f1b06 	br	8040e4 <__alt_mem_epcs_flash_controller_0+0xff7fb0e4>
  804478:	d8800817 	ldw	r2,32(sp)
  80447c:	11e9c83a 	sub	r20,r2,r7
  804480:	0005883a 	mov	r2,zero
  804484:	003d5406 	br	8039d8 <__alt_mem_epcs_flash_controller_0+0xff7fa9d8>
  804488:	00800044 	movi	r2,1
  80448c:	003dc706 	br	803bac <__alt_mem_epcs_flash_controller_0+0xff7fabac>
  804490:	d8c00217 	ldw	r3,8(sp)
  804494:	00800d84 	movi	r2,54
  804498:	dd400a17 	ldw	r21,40(sp)
  80449c:	10c5c83a 	sub	r2,r2,r3
  8044a0:	dd000817 	ldw	r20,32(sp)
  8044a4:	003d4c06 	br	8039d8 <__alt_mem_epcs_flash_controller_0+0xff7fa9d8>
  8044a8:	dc800f15 	stw	r18,60(sp)
  8044ac:	dcc01015 	stw	r19,64(sp)
  8044b0:	04000084 	movi	r16,2
  8044b4:	003bed06 	br	80346c <__alt_mem_epcs_flash_controller_0+0xff7fa46c>
  8044b8:	d9000617 	ldw	r4,24(sp)
  8044bc:	203f0d26 	beq	r4,zero,8040f4 <__alt_mem_epcs_flash_controller_0+0xff7fb0f4>
  8044c0:	d9800c17 	ldw	r6,48(sp)
  8044c4:	01bcab0e 	bge	zero,r6,803774 <__alt_mem_epcs_flash_controller_0+0xff7fa774>
  8044c8:	d9401017 	ldw	r5,64(sp)
  8044cc:	d9000f17 	ldw	r4,60(sp)
  8044d0:	000d883a 	mov	r6,zero
  8044d4:	01d00934 	movhi	r7,16420
  8044d8:	080c2780 	call	80c278 <__muldf3>
  8044dc:	81000044 	addi	r4,r16,1
  8044e0:	d8800f15 	stw	r2,60(sp)
  8044e4:	d8c01015 	stw	r3,64(sp)
  8044e8:	080d4600 	call	80d460 <__floatsidf>
  8044ec:	d9800f17 	ldw	r6,60(sp)
  8044f0:	d9c01017 	ldw	r7,64(sp)
  8044f4:	1009883a 	mov	r4,r2
  8044f8:	180b883a 	mov	r5,r3
  8044fc:	080c2780 	call	80c278 <__muldf3>
  804500:	01d00734 	movhi	r7,16412
  804504:	000d883a 	mov	r6,zero
  804508:	1009883a 	mov	r4,r2
  80450c:	180b883a 	mov	r5,r3
  804510:	080ada40 	call	80ada4 <__adddf3>
  804514:	d9c00517 	ldw	r7,20(sp)
  804518:	047f3034 	movhi	r17,64704
  80451c:	1021883a 	mov	r16,r2
  804520:	39ffffc4 	addi	r7,r7,-1
  804524:	d9c01315 	stw	r7,76(sp)
  804528:	1c63883a 	add	r17,r3,r17
  80452c:	db000c17 	ldw	r12,48(sp)
  804530:	003bea06 	br	8034dc <__alt_mem_epcs_flash_controller_0+0xff7fa4dc>
  804534:	dc000915 	stw	r16,36(sp)
  804538:	003e0e06 	br	803d74 <__alt_mem_epcs_flash_controller_0+0xff7fad74>
  80453c:	01000e44 	movi	r4,57
  804540:	8825883a 	mov	r18,r17
  804544:	9dc00044 	addi	r23,r19,1
  804548:	99000005 	stb	r4,0(r19)
  80454c:	a023883a 	mov	r17,r20
  804550:	dc000915 	stw	r16,36(sp)
  804554:	003da406 	br	803be8 <__alt_mem_epcs_flash_controller_0+0xff7fabe8>
  804558:	d9801417 	ldw	r6,80(sp)
  80455c:	d9c01517 	ldw	r7,84(sp)
  804560:	0009883a 	mov	r4,zero
  804564:	014ff834 	movhi	r5,16352
  804568:	080cae40 	call	80cae4 <__subdf3>
  80456c:	880d883a 	mov	r6,r17
  804570:	a00f883a 	mov	r7,r20
  804574:	1009883a 	mov	r4,r2
  804578:	180b883a 	mov	r5,r3
  80457c:	080c0a80 	call	80c0a8 <__gedf2>
  804580:	00bc7c0e 	bge	zero,r2,803774 <__alt_mem_epcs_flash_controller_0+0xff7fa774>
  804584:	01000c04 	movi	r4,48
  804588:	00000106 	br	804590 <_dtoa_r+0x1580>
  80458c:	102f883a 	mov	r23,r2
  804590:	b8bfffc4 	addi	r2,r23,-1
  804594:	10c00007 	ldb	r3,0(r2)
  804598:	193ffc26 	beq	r3,r4,80458c <__alt_mem_epcs_flash_controller_0+0xff7fb58c>
  80459c:	d9801317 	ldw	r6,76(sp)
  8045a0:	d9800515 	stw	r6,20(sp)
  8045a4:	003c4406 	br	8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  8045a8:	d9801317 	ldw	r6,76(sp)
  8045ac:	d9800515 	stw	r6,20(sp)
  8045b0:	003cea06 	br	80395c <__alt_mem_epcs_flash_controller_0+0xff7fa95c>
  8045b4:	dd800f17 	ldw	r22,60(sp)
  8045b8:	dcc01017 	ldw	r19,64(sp)
  8045bc:	dc801217 	ldw	r18,72(sp)
  8045c0:	003c6c06 	br	803774 <__alt_mem_epcs_flash_controller_0+0xff7fa774>
  8045c4:	903e031e 	bne	r18,zero,803dd4 <__alt_mem_epcs_flash_controller_0+0xff7fadd4>
  8045c8:	003ebb06 	br	8040b8 <__alt_mem_epcs_flash_controller_0+0xff7fb0b8>
  8045cc:	103e6c1e 	bne	r2,zero,803f80 <__alt_mem_epcs_flash_controller_0+0xff7faf80>
  8045d0:	4080004c 	andi	r2,r8,1
  8045d4:	103e6a26 	beq	r2,zero,803f80 <__alt_mem_epcs_flash_controller_0+0xff7faf80>
  8045d8:	003e6606 	br	803f74 <__alt_mem_epcs_flash_controller_0+0xff7faf74>
  8045dc:	d8c00317 	ldw	r3,12(sp)
  8045e0:	00800084 	movi	r2,2
  8045e4:	10c02916 	blt	r2,r3,80468c <_dtoa_r+0x167c>
  8045e8:	d9000c17 	ldw	r4,48(sp)
  8045ec:	003e8806 	br	804010 <__alt_mem_epcs_flash_controller_0+0xff7fb010>
  8045f0:	04000084 	movi	r16,2
  8045f4:	003b9d06 	br	80346c <__alt_mem_epcs_flash_controller_0+0xff7fa46c>
  8045f8:	d9001317 	ldw	r4,76(sp)
  8045fc:	d9000515 	stw	r4,20(sp)
  804600:	003cd606 	br	80395c <__alt_mem_epcs_flash_controller_0+0xff7fa95c>
  804604:	d8801317 	ldw	r2,76(sp)
  804608:	d8800515 	stw	r2,20(sp)
  80460c:	003c2a06 	br	8036b8 <__alt_mem_epcs_flash_controller_0+0xff7fa6b8>
  804610:	d9800317 	ldw	r6,12(sp)
  804614:	00800084 	movi	r2,2
  804618:	11801516 	blt	r2,r6,804670 <_dtoa_r+0x1660>
  80461c:	d9c00c17 	ldw	r7,48(sp)
  804620:	d9c00615 	stw	r7,24(sp)
  804624:	003df706 	br	803e04 <__alt_mem_epcs_flash_controller_0+0xff7fae04>
  804628:	193d3926 	beq	r3,r4,803b10 <__alt_mem_epcs_flash_controller_0+0xff7fab10>
  80462c:	00c00f04 	movi	r3,60
  804630:	1885c83a 	sub	r2,r3,r2
  804634:	003ddf06 	br	803db4 <__alt_mem_epcs_flash_controller_0+0xff7fadb4>
  804638:	e009883a 	mov	r4,fp
  80463c:	e0001115 	stw	zero,68(fp)
  804640:	000b883a 	mov	r5,zero
  804644:	08066c80 	call	8066c8 <_Balloc>
  804648:	d8800715 	stw	r2,28(sp)
  80464c:	d8c00717 	ldw	r3,28(sp)
  804650:	00bfffc4 	movi	r2,-1
  804654:	01000044 	movi	r4,1
  804658:	d8800c15 	stw	r2,48(sp)
  80465c:	e0c01015 	stw	r3,64(fp)
  804660:	d9000b15 	stw	r4,44(sp)
  804664:	d8800615 	stw	r2,24(sp)
  804668:	d8002215 	stw	zero,136(sp)
  80466c:	003c4106 	br	803774 <__alt_mem_epcs_flash_controller_0+0xff7fa774>
  804670:	d8c00c17 	ldw	r3,48(sp)
  804674:	d8c00615 	stw	r3,24(sp)
  804678:	003e7006 	br	80403c <__alt_mem_epcs_flash_controller_0+0xff7fb03c>
  80467c:	04400044 	movi	r17,1
  804680:	003b2006 	br	803304 <__alt_mem_epcs_flash_controller_0+0xff7fa304>
  804684:	000b883a 	mov	r5,zero
  804688:	003b3d06 	br	803380 <__alt_mem_epcs_flash_controller_0+0xff7fa380>
  80468c:	d8800c17 	ldw	r2,48(sp)
  804690:	d8800615 	stw	r2,24(sp)
  804694:	003e6906 	br	80403c <__alt_mem_epcs_flash_controller_0+0xff7fb03c>

00804698 <__sflush_r>:
  804698:	2880030b 	ldhu	r2,12(r5)
  80469c:	defffb04 	addi	sp,sp,-20
  8046a0:	dcc00315 	stw	r19,12(sp)
  8046a4:	dc400115 	stw	r17,4(sp)
  8046a8:	dfc00415 	stw	ra,16(sp)
  8046ac:	dc800215 	stw	r18,8(sp)
  8046b0:	dc000015 	stw	r16,0(sp)
  8046b4:	10c0020c 	andi	r3,r2,8
  8046b8:	2823883a 	mov	r17,r5
  8046bc:	2027883a 	mov	r19,r4
  8046c0:	1800311e 	bne	r3,zero,804788 <__sflush_r+0xf0>
  8046c4:	28c00117 	ldw	r3,4(r5)
  8046c8:	10820014 	ori	r2,r2,2048
  8046cc:	2880030d 	sth	r2,12(r5)
  8046d0:	00c04b0e 	bge	zero,r3,804800 <__sflush_r+0x168>
  8046d4:	8a000a17 	ldw	r8,40(r17)
  8046d8:	40002326 	beq	r8,zero,804768 <__sflush_r+0xd0>
  8046dc:	9c000017 	ldw	r16,0(r19)
  8046e0:	10c4000c 	andi	r3,r2,4096
  8046e4:	98000015 	stw	zero,0(r19)
  8046e8:	18004826 	beq	r3,zero,80480c <__sflush_r+0x174>
  8046ec:	89801417 	ldw	r6,80(r17)
  8046f0:	10c0010c 	andi	r3,r2,4
  8046f4:	18000626 	beq	r3,zero,804710 <__sflush_r+0x78>
  8046f8:	88c00117 	ldw	r3,4(r17)
  8046fc:	88800c17 	ldw	r2,48(r17)
  804700:	30cdc83a 	sub	r6,r6,r3
  804704:	10000226 	beq	r2,zero,804710 <__sflush_r+0x78>
  804708:	88800f17 	ldw	r2,60(r17)
  80470c:	308dc83a 	sub	r6,r6,r2
  804710:	89400717 	ldw	r5,28(r17)
  804714:	000f883a 	mov	r7,zero
  804718:	9809883a 	mov	r4,r19
  80471c:	403ee83a 	callr	r8
  804720:	00ffffc4 	movi	r3,-1
  804724:	10c04426 	beq	r2,r3,804838 <__sflush_r+0x1a0>
  804728:	88c0030b 	ldhu	r3,12(r17)
  80472c:	89000417 	ldw	r4,16(r17)
  804730:	88000115 	stw	zero,4(r17)
  804734:	197dffcc 	andi	r5,r3,63487
  804738:	8940030d 	sth	r5,12(r17)
  80473c:	89000015 	stw	r4,0(r17)
  804740:	18c4000c 	andi	r3,r3,4096
  804744:	18002c1e 	bne	r3,zero,8047f8 <__sflush_r+0x160>
  804748:	89400c17 	ldw	r5,48(r17)
  80474c:	9c000015 	stw	r16,0(r19)
  804750:	28000526 	beq	r5,zero,804768 <__sflush_r+0xd0>
  804754:	88801004 	addi	r2,r17,64
  804758:	28800226 	beq	r5,r2,804764 <__sflush_r+0xcc>
  80475c:	9809883a 	mov	r4,r19
  804760:	0804e140 	call	804e14 <_free_r>
  804764:	88000c15 	stw	zero,48(r17)
  804768:	0005883a 	mov	r2,zero
  80476c:	dfc00417 	ldw	ra,16(sp)
  804770:	dcc00317 	ldw	r19,12(sp)
  804774:	dc800217 	ldw	r18,8(sp)
  804778:	dc400117 	ldw	r17,4(sp)
  80477c:	dc000017 	ldw	r16,0(sp)
  804780:	dec00504 	addi	sp,sp,20
  804784:	f800283a 	ret
  804788:	2c800417 	ldw	r18,16(r5)
  80478c:	903ff626 	beq	r18,zero,804768 <__alt_mem_epcs_flash_controller_0+0xff7fb768>
  804790:	2c000017 	ldw	r16,0(r5)
  804794:	108000cc 	andi	r2,r2,3
  804798:	2c800015 	stw	r18,0(r5)
  80479c:	84a1c83a 	sub	r16,r16,r18
  8047a0:	1000131e 	bne	r2,zero,8047f0 <__sflush_r+0x158>
  8047a4:	28800517 	ldw	r2,20(r5)
  8047a8:	88800215 	stw	r2,8(r17)
  8047ac:	04000316 	blt	zero,r16,8047bc <__sflush_r+0x124>
  8047b0:	003fed06 	br	804768 <__alt_mem_epcs_flash_controller_0+0xff7fb768>
  8047b4:	90a5883a 	add	r18,r18,r2
  8047b8:	043feb0e 	bge	zero,r16,804768 <__alt_mem_epcs_flash_controller_0+0xff7fb768>
  8047bc:	88800917 	ldw	r2,36(r17)
  8047c0:	89400717 	ldw	r5,28(r17)
  8047c4:	800f883a 	mov	r7,r16
  8047c8:	900d883a 	mov	r6,r18
  8047cc:	9809883a 	mov	r4,r19
  8047d0:	103ee83a 	callr	r2
  8047d4:	80a1c83a 	sub	r16,r16,r2
  8047d8:	00bff616 	blt	zero,r2,8047b4 <__alt_mem_epcs_flash_controller_0+0xff7fb7b4>
  8047dc:	88c0030b 	ldhu	r3,12(r17)
  8047e0:	00bfffc4 	movi	r2,-1
  8047e4:	18c01014 	ori	r3,r3,64
  8047e8:	88c0030d 	sth	r3,12(r17)
  8047ec:	003fdf06 	br	80476c <__alt_mem_epcs_flash_controller_0+0xff7fb76c>
  8047f0:	0005883a 	mov	r2,zero
  8047f4:	003fec06 	br	8047a8 <__alt_mem_epcs_flash_controller_0+0xff7fb7a8>
  8047f8:	88801415 	stw	r2,80(r17)
  8047fc:	003fd206 	br	804748 <__alt_mem_epcs_flash_controller_0+0xff7fb748>
  804800:	28c00f17 	ldw	r3,60(r5)
  804804:	00ffb316 	blt	zero,r3,8046d4 <__alt_mem_epcs_flash_controller_0+0xff7fb6d4>
  804808:	003fd706 	br	804768 <__alt_mem_epcs_flash_controller_0+0xff7fb768>
  80480c:	89400717 	ldw	r5,28(r17)
  804810:	000d883a 	mov	r6,zero
  804814:	01c00044 	movi	r7,1
  804818:	9809883a 	mov	r4,r19
  80481c:	403ee83a 	callr	r8
  804820:	100d883a 	mov	r6,r2
  804824:	00bfffc4 	movi	r2,-1
  804828:	30801426 	beq	r6,r2,80487c <__sflush_r+0x1e4>
  80482c:	8880030b 	ldhu	r2,12(r17)
  804830:	8a000a17 	ldw	r8,40(r17)
  804834:	003fae06 	br	8046f0 <__alt_mem_epcs_flash_controller_0+0xff7fb6f0>
  804838:	98c00017 	ldw	r3,0(r19)
  80483c:	183fba26 	beq	r3,zero,804728 <__alt_mem_epcs_flash_controller_0+0xff7fb728>
  804840:	01000744 	movi	r4,29
  804844:	19000626 	beq	r3,r4,804860 <__sflush_r+0x1c8>
  804848:	01000584 	movi	r4,22
  80484c:	19000426 	beq	r3,r4,804860 <__sflush_r+0x1c8>
  804850:	88c0030b 	ldhu	r3,12(r17)
  804854:	18c01014 	ori	r3,r3,64
  804858:	88c0030d 	sth	r3,12(r17)
  80485c:	003fc306 	br	80476c <__alt_mem_epcs_flash_controller_0+0xff7fb76c>
  804860:	8880030b 	ldhu	r2,12(r17)
  804864:	88c00417 	ldw	r3,16(r17)
  804868:	88000115 	stw	zero,4(r17)
  80486c:	10bdffcc 	andi	r2,r2,63487
  804870:	8880030d 	sth	r2,12(r17)
  804874:	88c00015 	stw	r3,0(r17)
  804878:	003fb306 	br	804748 <__alt_mem_epcs_flash_controller_0+0xff7fb748>
  80487c:	98800017 	ldw	r2,0(r19)
  804880:	103fea26 	beq	r2,zero,80482c <__alt_mem_epcs_flash_controller_0+0xff7fb82c>
  804884:	00c00744 	movi	r3,29
  804888:	10c00226 	beq	r2,r3,804894 <__sflush_r+0x1fc>
  80488c:	00c00584 	movi	r3,22
  804890:	10c0031e 	bne	r2,r3,8048a0 <__sflush_r+0x208>
  804894:	9c000015 	stw	r16,0(r19)
  804898:	0005883a 	mov	r2,zero
  80489c:	003fb306 	br	80476c <__alt_mem_epcs_flash_controller_0+0xff7fb76c>
  8048a0:	88c0030b 	ldhu	r3,12(r17)
  8048a4:	3005883a 	mov	r2,r6
  8048a8:	18c01014 	ori	r3,r3,64
  8048ac:	88c0030d 	sth	r3,12(r17)
  8048b0:	003fae06 	br	80476c <__alt_mem_epcs_flash_controller_0+0xff7fb76c>

008048b4 <_fflush_r>:
  8048b4:	defffd04 	addi	sp,sp,-12
  8048b8:	dc000115 	stw	r16,4(sp)
  8048bc:	dfc00215 	stw	ra,8(sp)
  8048c0:	2021883a 	mov	r16,r4
  8048c4:	20000226 	beq	r4,zero,8048d0 <_fflush_r+0x1c>
  8048c8:	20800e17 	ldw	r2,56(r4)
  8048cc:	10000c26 	beq	r2,zero,804900 <_fflush_r+0x4c>
  8048d0:	2880030f 	ldh	r2,12(r5)
  8048d4:	1000051e 	bne	r2,zero,8048ec <_fflush_r+0x38>
  8048d8:	0005883a 	mov	r2,zero
  8048dc:	dfc00217 	ldw	ra,8(sp)
  8048e0:	dc000117 	ldw	r16,4(sp)
  8048e4:	dec00304 	addi	sp,sp,12
  8048e8:	f800283a 	ret
  8048ec:	8009883a 	mov	r4,r16
  8048f0:	dfc00217 	ldw	ra,8(sp)
  8048f4:	dc000117 	ldw	r16,4(sp)
  8048f8:	dec00304 	addi	sp,sp,12
  8048fc:	08046981 	jmpi	804698 <__sflush_r>
  804900:	d9400015 	stw	r5,0(sp)
  804904:	0804ca00 	call	804ca0 <__sinit>
  804908:	d9400017 	ldw	r5,0(sp)
  80490c:	003ff006 	br	8048d0 <__alt_mem_epcs_flash_controller_0+0xff7fb8d0>

00804910 <fflush>:
  804910:	20000526 	beq	r4,zero,804928 <fflush+0x18>
  804914:	008020b4 	movhi	r2,130
  804918:	10b07804 	addi	r2,r2,-15904
  80491c:	200b883a 	mov	r5,r4
  804920:	11000017 	ldw	r4,0(r2)
  804924:	08048b41 	jmpi	8048b4 <_fflush_r>
  804928:	008020b4 	movhi	r2,130
  80492c:	10b07704 	addi	r2,r2,-15908
  804930:	11000017 	ldw	r4,0(r2)
  804934:	01402034 	movhi	r5,128
  804938:	29522d04 	addi	r5,r5,18612
  80493c:	08056b01 	jmpi	8056b0 <_fwalk_reent>

00804940 <__fp_unlock>:
  804940:	0005883a 	mov	r2,zero
  804944:	f800283a 	ret

00804948 <_cleanup_r>:
  804948:	01402074 	movhi	r5,129
  80494c:	29661304 	addi	r5,r5,-26548
  804950:	08056b01 	jmpi	8056b0 <_fwalk_reent>

00804954 <__sinit.part.1>:
  804954:	defff704 	addi	sp,sp,-36
  804958:	00c02034 	movhi	r3,128
  80495c:	dfc00815 	stw	ra,32(sp)
  804960:	ddc00715 	stw	r23,28(sp)
  804964:	dd800615 	stw	r22,24(sp)
  804968:	dd400515 	stw	r21,20(sp)
  80496c:	dd000415 	stw	r20,16(sp)
  804970:	dcc00315 	stw	r19,12(sp)
  804974:	dc800215 	stw	r18,8(sp)
  804978:	dc400115 	stw	r17,4(sp)
  80497c:	dc000015 	stw	r16,0(sp)
  804980:	18d25204 	addi	r3,r3,18760
  804984:	24000117 	ldw	r16,4(r4)
  804988:	20c00f15 	stw	r3,60(r4)
  80498c:	2080bb04 	addi	r2,r4,748
  804990:	00c000c4 	movi	r3,3
  804994:	20c0b915 	stw	r3,740(r4)
  804998:	2080ba15 	stw	r2,744(r4)
  80499c:	2000b815 	stw	zero,736(r4)
  8049a0:	05c00204 	movi	r23,8
  8049a4:	00800104 	movi	r2,4
  8049a8:	2025883a 	mov	r18,r4
  8049ac:	b80d883a 	mov	r6,r23
  8049b0:	81001704 	addi	r4,r16,92
  8049b4:	000b883a 	mov	r5,zero
  8049b8:	80000015 	stw	zero,0(r16)
  8049bc:	80000115 	stw	zero,4(r16)
  8049c0:	80000215 	stw	zero,8(r16)
  8049c4:	8080030d 	sth	r2,12(r16)
  8049c8:	80001915 	stw	zero,100(r16)
  8049cc:	8000038d 	sth	zero,14(r16)
  8049d0:	80000415 	stw	zero,16(r16)
  8049d4:	80000515 	stw	zero,20(r16)
  8049d8:	80000615 	stw	zero,24(r16)
  8049dc:	08065a00 	call	8065a0 <memset>
  8049e0:	05802034 	movhi	r22,128
  8049e4:	94400217 	ldw	r17,8(r18)
  8049e8:	05402034 	movhi	r21,128
  8049ec:	05002034 	movhi	r20,128
  8049f0:	04c02034 	movhi	r19,128
  8049f4:	b59f6b04 	addi	r22,r22,32172
  8049f8:	ad5f8204 	addi	r21,r21,32264
  8049fc:	a51fa104 	addi	r20,r20,32388
  804a00:	9cdfb804 	addi	r19,r19,32480
  804a04:	85800815 	stw	r22,32(r16)
  804a08:	85400915 	stw	r21,36(r16)
  804a0c:	85000a15 	stw	r20,40(r16)
  804a10:	84c00b15 	stw	r19,44(r16)
  804a14:	84000715 	stw	r16,28(r16)
  804a18:	00800284 	movi	r2,10
  804a1c:	8880030d 	sth	r2,12(r17)
  804a20:	00800044 	movi	r2,1
  804a24:	b80d883a 	mov	r6,r23
  804a28:	89001704 	addi	r4,r17,92
  804a2c:	000b883a 	mov	r5,zero
  804a30:	88000015 	stw	zero,0(r17)
  804a34:	88000115 	stw	zero,4(r17)
  804a38:	88000215 	stw	zero,8(r17)
  804a3c:	88001915 	stw	zero,100(r17)
  804a40:	8880038d 	sth	r2,14(r17)
  804a44:	88000415 	stw	zero,16(r17)
  804a48:	88000515 	stw	zero,20(r17)
  804a4c:	88000615 	stw	zero,24(r17)
  804a50:	08065a00 	call	8065a0 <memset>
  804a54:	94000317 	ldw	r16,12(r18)
  804a58:	00800484 	movi	r2,18
  804a5c:	8c400715 	stw	r17,28(r17)
  804a60:	8d800815 	stw	r22,32(r17)
  804a64:	8d400915 	stw	r21,36(r17)
  804a68:	8d000a15 	stw	r20,40(r17)
  804a6c:	8cc00b15 	stw	r19,44(r17)
  804a70:	8080030d 	sth	r2,12(r16)
  804a74:	00800084 	movi	r2,2
  804a78:	80000015 	stw	zero,0(r16)
  804a7c:	80000115 	stw	zero,4(r16)
  804a80:	80000215 	stw	zero,8(r16)
  804a84:	80001915 	stw	zero,100(r16)
  804a88:	8080038d 	sth	r2,14(r16)
  804a8c:	80000415 	stw	zero,16(r16)
  804a90:	80000515 	stw	zero,20(r16)
  804a94:	80000615 	stw	zero,24(r16)
  804a98:	b80d883a 	mov	r6,r23
  804a9c:	000b883a 	mov	r5,zero
  804aa0:	81001704 	addi	r4,r16,92
  804aa4:	08065a00 	call	8065a0 <memset>
  804aa8:	00800044 	movi	r2,1
  804aac:	84000715 	stw	r16,28(r16)
  804ab0:	85800815 	stw	r22,32(r16)
  804ab4:	85400915 	stw	r21,36(r16)
  804ab8:	85000a15 	stw	r20,40(r16)
  804abc:	84c00b15 	stw	r19,44(r16)
  804ac0:	90800e15 	stw	r2,56(r18)
  804ac4:	dfc00817 	ldw	ra,32(sp)
  804ac8:	ddc00717 	ldw	r23,28(sp)
  804acc:	dd800617 	ldw	r22,24(sp)
  804ad0:	dd400517 	ldw	r21,20(sp)
  804ad4:	dd000417 	ldw	r20,16(sp)
  804ad8:	dcc00317 	ldw	r19,12(sp)
  804adc:	dc800217 	ldw	r18,8(sp)
  804ae0:	dc400117 	ldw	r17,4(sp)
  804ae4:	dc000017 	ldw	r16,0(sp)
  804ae8:	dec00904 	addi	sp,sp,36
  804aec:	f800283a 	ret

00804af0 <__fp_lock>:
  804af0:	0005883a 	mov	r2,zero
  804af4:	f800283a 	ret

00804af8 <__sfmoreglue>:
  804af8:	defffc04 	addi	sp,sp,-16
  804afc:	dc800215 	stw	r18,8(sp)
  804b00:	2825883a 	mov	r18,r5
  804b04:	dc000015 	stw	r16,0(sp)
  804b08:	01401a04 	movi	r5,104
  804b0c:	2021883a 	mov	r16,r4
  804b10:	913fffc4 	addi	r4,r18,-1
  804b14:	dfc00315 	stw	ra,12(sp)
  804b18:	dc400115 	stw	r17,4(sp)
  804b1c:	080ad7c0 	call	80ad7c <__mulsi3>
  804b20:	8009883a 	mov	r4,r16
  804b24:	11401d04 	addi	r5,r2,116
  804b28:	1023883a 	mov	r17,r2
  804b2c:	0805a0c0 	call	805a0c <_malloc_r>
  804b30:	1021883a 	mov	r16,r2
  804b34:	10000726 	beq	r2,zero,804b54 <__sfmoreglue+0x5c>
  804b38:	11000304 	addi	r4,r2,12
  804b3c:	10000015 	stw	zero,0(r2)
  804b40:	14800115 	stw	r18,4(r2)
  804b44:	11000215 	stw	r4,8(r2)
  804b48:	89801a04 	addi	r6,r17,104
  804b4c:	000b883a 	mov	r5,zero
  804b50:	08065a00 	call	8065a0 <memset>
  804b54:	8005883a 	mov	r2,r16
  804b58:	dfc00317 	ldw	ra,12(sp)
  804b5c:	dc800217 	ldw	r18,8(sp)
  804b60:	dc400117 	ldw	r17,4(sp)
  804b64:	dc000017 	ldw	r16,0(sp)
  804b68:	dec00404 	addi	sp,sp,16
  804b6c:	f800283a 	ret

00804b70 <__sfp>:
  804b70:	defffb04 	addi	sp,sp,-20
  804b74:	dc000015 	stw	r16,0(sp)
  804b78:	040020b4 	movhi	r16,130
  804b7c:	84307704 	addi	r16,r16,-15908
  804b80:	dcc00315 	stw	r19,12(sp)
  804b84:	2027883a 	mov	r19,r4
  804b88:	81000017 	ldw	r4,0(r16)
  804b8c:	dfc00415 	stw	ra,16(sp)
  804b90:	dc800215 	stw	r18,8(sp)
  804b94:	20800e17 	ldw	r2,56(r4)
  804b98:	dc400115 	stw	r17,4(sp)
  804b9c:	1000021e 	bne	r2,zero,804ba8 <__sfp+0x38>
  804ba0:	08049540 	call	804954 <__sinit.part.1>
  804ba4:	81000017 	ldw	r4,0(r16)
  804ba8:	2480b804 	addi	r18,r4,736
  804bac:	047fffc4 	movi	r17,-1
  804bb0:	91000117 	ldw	r4,4(r18)
  804bb4:	94000217 	ldw	r16,8(r18)
  804bb8:	213fffc4 	addi	r4,r4,-1
  804bbc:	20000a16 	blt	r4,zero,804be8 <__sfp+0x78>
  804bc0:	8080030f 	ldh	r2,12(r16)
  804bc4:	10000c26 	beq	r2,zero,804bf8 <__sfp+0x88>
  804bc8:	80c01d04 	addi	r3,r16,116
  804bcc:	00000206 	br	804bd8 <__sfp+0x68>
  804bd0:	18bfe60f 	ldh	r2,-104(r3)
  804bd4:	10000826 	beq	r2,zero,804bf8 <__sfp+0x88>
  804bd8:	213fffc4 	addi	r4,r4,-1
  804bdc:	1c3ffd04 	addi	r16,r3,-12
  804be0:	18c01a04 	addi	r3,r3,104
  804be4:	247ffa1e 	bne	r4,r17,804bd0 <__alt_mem_epcs_flash_controller_0+0xff7fbbd0>
  804be8:	90800017 	ldw	r2,0(r18)
  804bec:	10001d26 	beq	r2,zero,804c64 <__sfp+0xf4>
  804bf0:	1025883a 	mov	r18,r2
  804bf4:	003fee06 	br	804bb0 <__alt_mem_epcs_flash_controller_0+0xff7fbbb0>
  804bf8:	00bfffc4 	movi	r2,-1
  804bfc:	8080038d 	sth	r2,14(r16)
  804c00:	00800044 	movi	r2,1
  804c04:	8080030d 	sth	r2,12(r16)
  804c08:	80001915 	stw	zero,100(r16)
  804c0c:	80000015 	stw	zero,0(r16)
  804c10:	80000215 	stw	zero,8(r16)
  804c14:	80000115 	stw	zero,4(r16)
  804c18:	80000415 	stw	zero,16(r16)
  804c1c:	80000515 	stw	zero,20(r16)
  804c20:	80000615 	stw	zero,24(r16)
  804c24:	01800204 	movi	r6,8
  804c28:	000b883a 	mov	r5,zero
  804c2c:	81001704 	addi	r4,r16,92
  804c30:	08065a00 	call	8065a0 <memset>
  804c34:	8005883a 	mov	r2,r16
  804c38:	80000c15 	stw	zero,48(r16)
  804c3c:	80000d15 	stw	zero,52(r16)
  804c40:	80001115 	stw	zero,68(r16)
  804c44:	80001215 	stw	zero,72(r16)
  804c48:	dfc00417 	ldw	ra,16(sp)
  804c4c:	dcc00317 	ldw	r19,12(sp)
  804c50:	dc800217 	ldw	r18,8(sp)
  804c54:	dc400117 	ldw	r17,4(sp)
  804c58:	dc000017 	ldw	r16,0(sp)
  804c5c:	dec00504 	addi	sp,sp,20
  804c60:	f800283a 	ret
  804c64:	01400104 	movi	r5,4
  804c68:	9809883a 	mov	r4,r19
  804c6c:	0804af80 	call	804af8 <__sfmoreglue>
  804c70:	90800015 	stw	r2,0(r18)
  804c74:	103fde1e 	bne	r2,zero,804bf0 <__alt_mem_epcs_flash_controller_0+0xff7fbbf0>
  804c78:	00800304 	movi	r2,12
  804c7c:	98800015 	stw	r2,0(r19)
  804c80:	0005883a 	mov	r2,zero
  804c84:	003ff006 	br	804c48 <__alt_mem_epcs_flash_controller_0+0xff7fbc48>

00804c88 <_cleanup>:
  804c88:	008020b4 	movhi	r2,130
  804c8c:	10b07704 	addi	r2,r2,-15908
  804c90:	11000017 	ldw	r4,0(r2)
  804c94:	01402074 	movhi	r5,129
  804c98:	29661304 	addi	r5,r5,-26548
  804c9c:	08056b01 	jmpi	8056b0 <_fwalk_reent>

00804ca0 <__sinit>:
  804ca0:	20800e17 	ldw	r2,56(r4)
  804ca4:	10000126 	beq	r2,zero,804cac <__sinit+0xc>
  804ca8:	f800283a 	ret
  804cac:	08049541 	jmpi	804954 <__sinit.part.1>

00804cb0 <__sfp_lock_acquire>:
  804cb0:	f800283a 	ret

00804cb4 <__sfp_lock_release>:
  804cb4:	f800283a 	ret

00804cb8 <__sinit_lock_acquire>:
  804cb8:	f800283a 	ret

00804cbc <__sinit_lock_release>:
  804cbc:	f800283a 	ret

00804cc0 <__fp_lock_all>:
  804cc0:	008020b4 	movhi	r2,130
  804cc4:	10b07804 	addi	r2,r2,-15904
  804cc8:	11000017 	ldw	r4,0(r2)
  804ccc:	01402034 	movhi	r5,128
  804cd0:	2952bc04 	addi	r5,r5,19184
  804cd4:	08055ec1 	jmpi	8055ec <_fwalk>

00804cd8 <__fp_unlock_all>:
  804cd8:	008020b4 	movhi	r2,130
  804cdc:	10b07804 	addi	r2,r2,-15904
  804ce0:	11000017 	ldw	r4,0(r2)
  804ce4:	01402034 	movhi	r5,128
  804ce8:	29525004 	addi	r5,r5,18752
  804cec:	08055ec1 	jmpi	8055ec <_fwalk>

00804cf0 <_malloc_trim_r>:
  804cf0:	defffb04 	addi	sp,sp,-20
  804cf4:	dcc00315 	stw	r19,12(sp)
  804cf8:	04c020b4 	movhi	r19,130
  804cfc:	dc800215 	stw	r18,8(sp)
  804d00:	dc400115 	stw	r17,4(sp)
  804d04:	dc000015 	stw	r16,0(sp)
  804d08:	dfc00415 	stw	ra,16(sp)
  804d0c:	2821883a 	mov	r16,r5
  804d10:	9cea3904 	addi	r19,r19,-22300
  804d14:	2025883a 	mov	r18,r4
  804d18:	080e2ac0 	call	80e2ac <__malloc_lock>
  804d1c:	98800217 	ldw	r2,8(r19)
  804d20:	14400117 	ldw	r17,4(r2)
  804d24:	00bfff04 	movi	r2,-4
  804d28:	88a2703a 	and	r17,r17,r2
  804d2c:	8c21c83a 	sub	r16,r17,r16
  804d30:	8403fbc4 	addi	r16,r16,4079
  804d34:	8020d33a 	srli	r16,r16,12
  804d38:	0083ffc4 	movi	r2,4095
  804d3c:	843fffc4 	addi	r16,r16,-1
  804d40:	8020933a 	slli	r16,r16,12
  804d44:	1400060e 	bge	r2,r16,804d60 <_malloc_trim_r+0x70>
  804d48:	000b883a 	mov	r5,zero
  804d4c:	9009883a 	mov	r4,r18
  804d50:	0807d580 	call	807d58 <_sbrk_r>
  804d54:	98c00217 	ldw	r3,8(r19)
  804d58:	1c47883a 	add	r3,r3,r17
  804d5c:	10c00a26 	beq	r2,r3,804d88 <_malloc_trim_r+0x98>
  804d60:	9009883a 	mov	r4,r18
  804d64:	080e3cc0 	call	80e3cc <__malloc_unlock>
  804d68:	0005883a 	mov	r2,zero
  804d6c:	dfc00417 	ldw	ra,16(sp)
  804d70:	dcc00317 	ldw	r19,12(sp)
  804d74:	dc800217 	ldw	r18,8(sp)
  804d78:	dc400117 	ldw	r17,4(sp)
  804d7c:	dc000017 	ldw	r16,0(sp)
  804d80:	dec00504 	addi	sp,sp,20
  804d84:	f800283a 	ret
  804d88:	040bc83a 	sub	r5,zero,r16
  804d8c:	9009883a 	mov	r4,r18
  804d90:	0807d580 	call	807d58 <_sbrk_r>
  804d94:	00ffffc4 	movi	r3,-1
  804d98:	10c00d26 	beq	r2,r3,804dd0 <_malloc_trim_r+0xe0>
  804d9c:	00c020b4 	movhi	r3,130
  804da0:	18f0d504 	addi	r3,r3,-15532
  804da4:	18800017 	ldw	r2,0(r3)
  804da8:	99000217 	ldw	r4,8(r19)
  804dac:	8c23c83a 	sub	r17,r17,r16
  804db0:	8c400054 	ori	r17,r17,1
  804db4:	1421c83a 	sub	r16,r2,r16
  804db8:	24400115 	stw	r17,4(r4)
  804dbc:	9009883a 	mov	r4,r18
  804dc0:	1c000015 	stw	r16,0(r3)
  804dc4:	080e3cc0 	call	80e3cc <__malloc_unlock>
  804dc8:	00800044 	movi	r2,1
  804dcc:	003fe706 	br	804d6c <__alt_mem_epcs_flash_controller_0+0xff7fbd6c>
  804dd0:	000b883a 	mov	r5,zero
  804dd4:	9009883a 	mov	r4,r18
  804dd8:	0807d580 	call	807d58 <_sbrk_r>
  804ddc:	99000217 	ldw	r4,8(r19)
  804de0:	014003c4 	movi	r5,15
  804de4:	1107c83a 	sub	r3,r2,r4
  804de8:	28ffdd0e 	bge	r5,r3,804d60 <__alt_mem_epcs_flash_controller_0+0xff7fbd60>
  804dec:	014020b4 	movhi	r5,130
  804df0:	29707a04 	addi	r5,r5,-15896
  804df4:	29400017 	ldw	r5,0(r5)
  804df8:	18c00054 	ori	r3,r3,1
  804dfc:	20c00115 	stw	r3,4(r4)
  804e00:	00c020b4 	movhi	r3,130
  804e04:	1145c83a 	sub	r2,r2,r5
  804e08:	18f0d504 	addi	r3,r3,-15532
  804e0c:	18800015 	stw	r2,0(r3)
  804e10:	003fd306 	br	804d60 <__alt_mem_epcs_flash_controller_0+0xff7fbd60>

00804e14 <_free_r>:
  804e14:	28004126 	beq	r5,zero,804f1c <_free_r+0x108>
  804e18:	defffd04 	addi	sp,sp,-12
  804e1c:	dc400115 	stw	r17,4(sp)
  804e20:	dc000015 	stw	r16,0(sp)
  804e24:	2023883a 	mov	r17,r4
  804e28:	2821883a 	mov	r16,r5
  804e2c:	dfc00215 	stw	ra,8(sp)
  804e30:	080e2ac0 	call	80e2ac <__malloc_lock>
  804e34:	81ffff17 	ldw	r7,-4(r16)
  804e38:	00bfff84 	movi	r2,-2
  804e3c:	010020b4 	movhi	r4,130
  804e40:	81bffe04 	addi	r6,r16,-8
  804e44:	3884703a 	and	r2,r7,r2
  804e48:	212a3904 	addi	r4,r4,-22300
  804e4c:	308b883a 	add	r5,r6,r2
  804e50:	2a400117 	ldw	r9,4(r5)
  804e54:	22000217 	ldw	r8,8(r4)
  804e58:	00ffff04 	movi	r3,-4
  804e5c:	48c6703a 	and	r3,r9,r3
  804e60:	2a005726 	beq	r5,r8,804fc0 <_free_r+0x1ac>
  804e64:	28c00115 	stw	r3,4(r5)
  804e68:	39c0004c 	andi	r7,r7,1
  804e6c:	3800091e 	bne	r7,zero,804e94 <_free_r+0x80>
  804e70:	823ffe17 	ldw	r8,-8(r16)
  804e74:	22400204 	addi	r9,r4,8
  804e78:	320dc83a 	sub	r6,r6,r8
  804e7c:	31c00217 	ldw	r7,8(r6)
  804e80:	1205883a 	add	r2,r2,r8
  804e84:	3a406526 	beq	r7,r9,80501c <_free_r+0x208>
  804e88:	32000317 	ldw	r8,12(r6)
  804e8c:	3a000315 	stw	r8,12(r7)
  804e90:	41c00215 	stw	r7,8(r8)
  804e94:	28cf883a 	add	r7,r5,r3
  804e98:	39c00117 	ldw	r7,4(r7)
  804e9c:	39c0004c 	andi	r7,r7,1
  804ea0:	38003a26 	beq	r7,zero,804f8c <_free_r+0x178>
  804ea4:	10c00054 	ori	r3,r2,1
  804ea8:	30c00115 	stw	r3,4(r6)
  804eac:	3087883a 	add	r3,r6,r2
  804eb0:	18800015 	stw	r2,0(r3)
  804eb4:	00c07fc4 	movi	r3,511
  804eb8:	18801936 	bltu	r3,r2,804f20 <_free_r+0x10c>
  804ebc:	1004d0fa 	srli	r2,r2,3
  804ec0:	01c00044 	movi	r7,1
  804ec4:	21400117 	ldw	r5,4(r4)
  804ec8:	10c00044 	addi	r3,r2,1
  804ecc:	18c7883a 	add	r3,r3,r3
  804ed0:	1005d0ba 	srai	r2,r2,2
  804ed4:	18c7883a 	add	r3,r3,r3
  804ed8:	18c7883a 	add	r3,r3,r3
  804edc:	1907883a 	add	r3,r3,r4
  804ee0:	3884983a 	sll	r2,r7,r2
  804ee4:	19c00017 	ldw	r7,0(r3)
  804ee8:	1a3ffe04 	addi	r8,r3,-8
  804eec:	1144b03a 	or	r2,r2,r5
  804ef0:	32000315 	stw	r8,12(r6)
  804ef4:	31c00215 	stw	r7,8(r6)
  804ef8:	20800115 	stw	r2,4(r4)
  804efc:	19800015 	stw	r6,0(r3)
  804f00:	39800315 	stw	r6,12(r7)
  804f04:	8809883a 	mov	r4,r17
  804f08:	dfc00217 	ldw	ra,8(sp)
  804f0c:	dc400117 	ldw	r17,4(sp)
  804f10:	dc000017 	ldw	r16,0(sp)
  804f14:	dec00304 	addi	sp,sp,12
  804f18:	080e3cc1 	jmpi	80e3cc <__malloc_unlock>
  804f1c:	f800283a 	ret
  804f20:	100ad27a 	srli	r5,r2,9
  804f24:	00c00104 	movi	r3,4
  804f28:	19404a36 	bltu	r3,r5,805054 <_free_r+0x240>
  804f2c:	100ad1ba 	srli	r5,r2,6
  804f30:	28c00e44 	addi	r3,r5,57
  804f34:	18c7883a 	add	r3,r3,r3
  804f38:	29400e04 	addi	r5,r5,56
  804f3c:	18c7883a 	add	r3,r3,r3
  804f40:	18c7883a 	add	r3,r3,r3
  804f44:	1909883a 	add	r4,r3,r4
  804f48:	20c00017 	ldw	r3,0(r4)
  804f4c:	01c020b4 	movhi	r7,130
  804f50:	213ffe04 	addi	r4,r4,-8
  804f54:	39ea3904 	addi	r7,r7,-22300
  804f58:	20c04426 	beq	r4,r3,80506c <_free_r+0x258>
  804f5c:	01ffff04 	movi	r7,-4
  804f60:	19400117 	ldw	r5,4(r3)
  804f64:	29ca703a 	and	r5,r5,r7
  804f68:	1140022e 	bgeu	r2,r5,804f74 <_free_r+0x160>
  804f6c:	18c00217 	ldw	r3,8(r3)
  804f70:	20fffb1e 	bne	r4,r3,804f60 <__alt_mem_epcs_flash_controller_0+0xff7fbf60>
  804f74:	19000317 	ldw	r4,12(r3)
  804f78:	31000315 	stw	r4,12(r6)
  804f7c:	30c00215 	stw	r3,8(r6)
  804f80:	21800215 	stw	r6,8(r4)
  804f84:	19800315 	stw	r6,12(r3)
  804f88:	003fde06 	br	804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>
  804f8c:	29c00217 	ldw	r7,8(r5)
  804f90:	10c5883a 	add	r2,r2,r3
  804f94:	00c020b4 	movhi	r3,130
  804f98:	18ea3b04 	addi	r3,r3,-22292
  804f9c:	38c03b26 	beq	r7,r3,80508c <_free_r+0x278>
  804fa0:	2a000317 	ldw	r8,12(r5)
  804fa4:	11400054 	ori	r5,r2,1
  804fa8:	3087883a 	add	r3,r6,r2
  804fac:	3a000315 	stw	r8,12(r7)
  804fb0:	41c00215 	stw	r7,8(r8)
  804fb4:	31400115 	stw	r5,4(r6)
  804fb8:	18800015 	stw	r2,0(r3)
  804fbc:	003fbd06 	br	804eb4 <__alt_mem_epcs_flash_controller_0+0xff7fbeb4>
  804fc0:	39c0004c 	andi	r7,r7,1
  804fc4:	10c5883a 	add	r2,r2,r3
  804fc8:	3800071e 	bne	r7,zero,804fe8 <_free_r+0x1d4>
  804fcc:	81fffe17 	ldw	r7,-8(r16)
  804fd0:	31cdc83a 	sub	r6,r6,r7
  804fd4:	30c00317 	ldw	r3,12(r6)
  804fd8:	31400217 	ldw	r5,8(r6)
  804fdc:	11c5883a 	add	r2,r2,r7
  804fe0:	28c00315 	stw	r3,12(r5)
  804fe4:	19400215 	stw	r5,8(r3)
  804fe8:	10c00054 	ori	r3,r2,1
  804fec:	30c00115 	stw	r3,4(r6)
  804ff0:	00c020b4 	movhi	r3,130
  804ff4:	18f07b04 	addi	r3,r3,-15892
  804ff8:	18c00017 	ldw	r3,0(r3)
  804ffc:	21800215 	stw	r6,8(r4)
  805000:	10ffc036 	bltu	r2,r3,804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>
  805004:	008020b4 	movhi	r2,130
  805008:	10b0b304 	addi	r2,r2,-15668
  80500c:	11400017 	ldw	r5,0(r2)
  805010:	8809883a 	mov	r4,r17
  805014:	0804cf00 	call	804cf0 <_malloc_trim_r>
  805018:	003fba06 	br	804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>
  80501c:	28c9883a 	add	r4,r5,r3
  805020:	21000117 	ldw	r4,4(r4)
  805024:	2100004c 	andi	r4,r4,1
  805028:	2000391e 	bne	r4,zero,805110 <_free_r+0x2fc>
  80502c:	29c00217 	ldw	r7,8(r5)
  805030:	29000317 	ldw	r4,12(r5)
  805034:	1885883a 	add	r2,r3,r2
  805038:	10c00054 	ori	r3,r2,1
  80503c:	39000315 	stw	r4,12(r7)
  805040:	21c00215 	stw	r7,8(r4)
  805044:	30c00115 	stw	r3,4(r6)
  805048:	308d883a 	add	r6,r6,r2
  80504c:	30800015 	stw	r2,0(r6)
  805050:	003fac06 	br	804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>
  805054:	00c00504 	movi	r3,20
  805058:	19401536 	bltu	r3,r5,8050b0 <_free_r+0x29c>
  80505c:	28c01704 	addi	r3,r5,92
  805060:	18c7883a 	add	r3,r3,r3
  805064:	294016c4 	addi	r5,r5,91
  805068:	003fb406 	br	804f3c <__alt_mem_epcs_flash_controller_0+0xff7fbf3c>
  80506c:	280bd0ba 	srai	r5,r5,2
  805070:	00c00044 	movi	r3,1
  805074:	38800117 	ldw	r2,4(r7)
  805078:	194a983a 	sll	r5,r3,r5
  80507c:	2007883a 	mov	r3,r4
  805080:	2884b03a 	or	r2,r5,r2
  805084:	38800115 	stw	r2,4(r7)
  805088:	003fbb06 	br	804f78 <__alt_mem_epcs_flash_controller_0+0xff7fbf78>
  80508c:	21800515 	stw	r6,20(r4)
  805090:	21800415 	stw	r6,16(r4)
  805094:	10c00054 	ori	r3,r2,1
  805098:	31c00315 	stw	r7,12(r6)
  80509c:	31c00215 	stw	r7,8(r6)
  8050a0:	30c00115 	stw	r3,4(r6)
  8050a4:	308d883a 	add	r6,r6,r2
  8050a8:	30800015 	stw	r2,0(r6)
  8050ac:	003f9506 	br	804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>
  8050b0:	00c01504 	movi	r3,84
  8050b4:	19400536 	bltu	r3,r5,8050cc <_free_r+0x2b8>
  8050b8:	100ad33a 	srli	r5,r2,12
  8050bc:	28c01bc4 	addi	r3,r5,111
  8050c0:	18c7883a 	add	r3,r3,r3
  8050c4:	29401b84 	addi	r5,r5,110
  8050c8:	003f9c06 	br	804f3c <__alt_mem_epcs_flash_controller_0+0xff7fbf3c>
  8050cc:	00c05504 	movi	r3,340
  8050d0:	19400536 	bltu	r3,r5,8050e8 <_free_r+0x2d4>
  8050d4:	100ad3fa 	srli	r5,r2,15
  8050d8:	28c01e04 	addi	r3,r5,120
  8050dc:	18c7883a 	add	r3,r3,r3
  8050e0:	29401dc4 	addi	r5,r5,119
  8050e4:	003f9506 	br	804f3c <__alt_mem_epcs_flash_controller_0+0xff7fbf3c>
  8050e8:	00c15504 	movi	r3,1364
  8050ec:	19400536 	bltu	r3,r5,805104 <_free_r+0x2f0>
  8050f0:	100ad4ba 	srli	r5,r2,18
  8050f4:	28c01f44 	addi	r3,r5,125
  8050f8:	18c7883a 	add	r3,r3,r3
  8050fc:	29401f04 	addi	r5,r5,124
  805100:	003f8e06 	br	804f3c <__alt_mem_epcs_flash_controller_0+0xff7fbf3c>
  805104:	00c03f84 	movi	r3,254
  805108:	01401f84 	movi	r5,126
  80510c:	003f8b06 	br	804f3c <__alt_mem_epcs_flash_controller_0+0xff7fbf3c>
  805110:	10c00054 	ori	r3,r2,1
  805114:	30c00115 	stw	r3,4(r6)
  805118:	308d883a 	add	r6,r6,r2
  80511c:	30800015 	stw	r2,0(r6)
  805120:	003f7806 	br	804f04 <__alt_mem_epcs_flash_controller_0+0xff7fbf04>

00805124 <__sfvwrite_r>:
  805124:	30800217 	ldw	r2,8(r6)
  805128:	10006726 	beq	r2,zero,8052c8 <__sfvwrite_r+0x1a4>
  80512c:	28c0030b 	ldhu	r3,12(r5)
  805130:	defff404 	addi	sp,sp,-48
  805134:	dd400715 	stw	r21,28(sp)
  805138:	dd000615 	stw	r20,24(sp)
  80513c:	dc000215 	stw	r16,8(sp)
  805140:	dfc00b15 	stw	ra,44(sp)
  805144:	df000a15 	stw	fp,40(sp)
  805148:	ddc00915 	stw	r23,36(sp)
  80514c:	dd800815 	stw	r22,32(sp)
  805150:	dcc00515 	stw	r19,20(sp)
  805154:	dc800415 	stw	r18,16(sp)
  805158:	dc400315 	stw	r17,12(sp)
  80515c:	1880020c 	andi	r2,r3,8
  805160:	2821883a 	mov	r16,r5
  805164:	202b883a 	mov	r21,r4
  805168:	3029883a 	mov	r20,r6
  80516c:	10002726 	beq	r2,zero,80520c <__sfvwrite_r+0xe8>
  805170:	28800417 	ldw	r2,16(r5)
  805174:	10002526 	beq	r2,zero,80520c <__sfvwrite_r+0xe8>
  805178:	1880008c 	andi	r2,r3,2
  80517c:	a4400017 	ldw	r17,0(r20)
  805180:	10002a26 	beq	r2,zero,80522c <__sfvwrite_r+0x108>
  805184:	05a00034 	movhi	r22,32768
  805188:	0027883a 	mov	r19,zero
  80518c:	0025883a 	mov	r18,zero
  805190:	b5bf0004 	addi	r22,r22,-1024
  805194:	980d883a 	mov	r6,r19
  805198:	a809883a 	mov	r4,r21
  80519c:	90004626 	beq	r18,zero,8052b8 <__sfvwrite_r+0x194>
  8051a0:	900f883a 	mov	r7,r18
  8051a4:	b480022e 	bgeu	r22,r18,8051b0 <__sfvwrite_r+0x8c>
  8051a8:	01e00034 	movhi	r7,32768
  8051ac:	39ff0004 	addi	r7,r7,-1024
  8051b0:	80800917 	ldw	r2,36(r16)
  8051b4:	81400717 	ldw	r5,28(r16)
  8051b8:	103ee83a 	callr	r2
  8051bc:	00805a0e 	bge	zero,r2,805328 <__sfvwrite_r+0x204>
  8051c0:	a0c00217 	ldw	r3,8(r20)
  8051c4:	98a7883a 	add	r19,r19,r2
  8051c8:	90a5c83a 	sub	r18,r18,r2
  8051cc:	1885c83a 	sub	r2,r3,r2
  8051d0:	a0800215 	stw	r2,8(r20)
  8051d4:	103fef1e 	bne	r2,zero,805194 <__alt_mem_epcs_flash_controller_0+0xff7fc194>
  8051d8:	0005883a 	mov	r2,zero
  8051dc:	dfc00b17 	ldw	ra,44(sp)
  8051e0:	df000a17 	ldw	fp,40(sp)
  8051e4:	ddc00917 	ldw	r23,36(sp)
  8051e8:	dd800817 	ldw	r22,32(sp)
  8051ec:	dd400717 	ldw	r21,28(sp)
  8051f0:	dd000617 	ldw	r20,24(sp)
  8051f4:	dcc00517 	ldw	r19,20(sp)
  8051f8:	dc800417 	ldw	r18,16(sp)
  8051fc:	dc400317 	ldw	r17,12(sp)
  805200:	dc000217 	ldw	r16,8(sp)
  805204:	dec00c04 	addi	sp,sp,48
  805208:	f800283a 	ret
  80520c:	800b883a 	mov	r5,r16
  805210:	a809883a 	mov	r4,r21
  805214:	0802c940 	call	802c94 <__swsetup_r>
  805218:	1000ee1e 	bne	r2,zero,8055d4 <__sfvwrite_r+0x4b0>
  80521c:	80c0030b 	ldhu	r3,12(r16)
  805220:	a4400017 	ldw	r17,0(r20)
  805224:	1880008c 	andi	r2,r3,2
  805228:	103fd61e 	bne	r2,zero,805184 <__alt_mem_epcs_flash_controller_0+0xff7fc184>
  80522c:	1880004c 	andi	r2,r3,1
  805230:	1000421e 	bne	r2,zero,80533c <__sfvwrite_r+0x218>
  805234:	0039883a 	mov	fp,zero
  805238:	0025883a 	mov	r18,zero
  80523c:	90001a26 	beq	r18,zero,8052a8 <__sfvwrite_r+0x184>
  805240:	1880800c 	andi	r2,r3,512
  805244:	84c00217 	ldw	r19,8(r16)
  805248:	10002126 	beq	r2,zero,8052d0 <__sfvwrite_r+0x1ac>
  80524c:	982f883a 	mov	r23,r19
  805250:	94c09636 	bltu	r18,r19,8054ac <__sfvwrite_r+0x388>
  805254:	1881200c 	andi	r2,r3,1152
  805258:	1000a11e 	bne	r2,zero,8054e0 <__sfvwrite_r+0x3bc>
  80525c:	81000017 	ldw	r4,0(r16)
  805260:	b80d883a 	mov	r6,r23
  805264:	e00b883a 	mov	r5,fp
  805268:	08064440 	call	806444 <memmove>
  80526c:	80c00217 	ldw	r3,8(r16)
  805270:	81000017 	ldw	r4,0(r16)
  805274:	9005883a 	mov	r2,r18
  805278:	1ce7c83a 	sub	r19,r3,r19
  80527c:	25cf883a 	add	r7,r4,r23
  805280:	84c00215 	stw	r19,8(r16)
  805284:	81c00015 	stw	r7,0(r16)
  805288:	a0c00217 	ldw	r3,8(r20)
  80528c:	e0b9883a 	add	fp,fp,r2
  805290:	90a5c83a 	sub	r18,r18,r2
  805294:	18a7c83a 	sub	r19,r3,r2
  805298:	a4c00215 	stw	r19,8(r20)
  80529c:	983fce26 	beq	r19,zero,8051d8 <__alt_mem_epcs_flash_controller_0+0xff7fc1d8>
  8052a0:	80c0030b 	ldhu	r3,12(r16)
  8052a4:	903fe61e 	bne	r18,zero,805240 <__alt_mem_epcs_flash_controller_0+0xff7fc240>
  8052a8:	8f000017 	ldw	fp,0(r17)
  8052ac:	8c800117 	ldw	r18,4(r17)
  8052b0:	8c400204 	addi	r17,r17,8
  8052b4:	003fe106 	br	80523c <__alt_mem_epcs_flash_controller_0+0xff7fc23c>
  8052b8:	8cc00017 	ldw	r19,0(r17)
  8052bc:	8c800117 	ldw	r18,4(r17)
  8052c0:	8c400204 	addi	r17,r17,8
  8052c4:	003fb306 	br	805194 <__alt_mem_epcs_flash_controller_0+0xff7fc194>
  8052c8:	0005883a 	mov	r2,zero
  8052cc:	f800283a 	ret
  8052d0:	81000017 	ldw	r4,0(r16)
  8052d4:	80800417 	ldw	r2,16(r16)
  8052d8:	11005a36 	bltu	r2,r4,805444 <__sfvwrite_r+0x320>
  8052dc:	85c00517 	ldw	r23,20(r16)
  8052e0:	95c05836 	bltu	r18,r23,805444 <__sfvwrite_r+0x320>
  8052e4:	00a00034 	movhi	r2,32768
  8052e8:	10bfffc4 	addi	r2,r2,-1
  8052ec:	9009883a 	mov	r4,r18
  8052f0:	1480012e 	bgeu	r2,r18,8052f8 <__sfvwrite_r+0x1d4>
  8052f4:	1009883a 	mov	r4,r2
  8052f8:	b80b883a 	mov	r5,r23
  8052fc:	080abc80 	call	80abc8 <__divsi3>
  805300:	b80b883a 	mov	r5,r23
  805304:	1009883a 	mov	r4,r2
  805308:	080ad7c0 	call	80ad7c <__mulsi3>
  80530c:	81400717 	ldw	r5,28(r16)
  805310:	80c00917 	ldw	r3,36(r16)
  805314:	100f883a 	mov	r7,r2
  805318:	e00d883a 	mov	r6,fp
  80531c:	a809883a 	mov	r4,r21
  805320:	183ee83a 	callr	r3
  805324:	00bfd816 	blt	zero,r2,805288 <__alt_mem_epcs_flash_controller_0+0xff7fc288>
  805328:	8080030b 	ldhu	r2,12(r16)
  80532c:	10801014 	ori	r2,r2,64
  805330:	8080030d 	sth	r2,12(r16)
  805334:	00bfffc4 	movi	r2,-1
  805338:	003fa806 	br	8051dc <__alt_mem_epcs_flash_controller_0+0xff7fc1dc>
  80533c:	0027883a 	mov	r19,zero
  805340:	0011883a 	mov	r8,zero
  805344:	0039883a 	mov	fp,zero
  805348:	0025883a 	mov	r18,zero
  80534c:	90001f26 	beq	r18,zero,8053cc <__sfvwrite_r+0x2a8>
  805350:	40005a26 	beq	r8,zero,8054bc <__sfvwrite_r+0x398>
  805354:	982d883a 	mov	r22,r19
  805358:	94c0012e 	bgeu	r18,r19,805360 <__sfvwrite_r+0x23c>
  80535c:	902d883a 	mov	r22,r18
  805360:	81000017 	ldw	r4,0(r16)
  805364:	80800417 	ldw	r2,16(r16)
  805368:	b02f883a 	mov	r23,r22
  80536c:	81c00517 	ldw	r7,20(r16)
  805370:	1100032e 	bgeu	r2,r4,805380 <__sfvwrite_r+0x25c>
  805374:	80c00217 	ldw	r3,8(r16)
  805378:	38c7883a 	add	r3,r7,r3
  80537c:	1d801816 	blt	r3,r22,8053e0 <__sfvwrite_r+0x2bc>
  805380:	b1c03e16 	blt	r22,r7,80547c <__sfvwrite_r+0x358>
  805384:	80800917 	ldw	r2,36(r16)
  805388:	81400717 	ldw	r5,28(r16)
  80538c:	e00d883a 	mov	r6,fp
  805390:	da000115 	stw	r8,4(sp)
  805394:	a809883a 	mov	r4,r21
  805398:	103ee83a 	callr	r2
  80539c:	102f883a 	mov	r23,r2
  8053a0:	da000117 	ldw	r8,4(sp)
  8053a4:	00bfe00e 	bge	zero,r2,805328 <__alt_mem_epcs_flash_controller_0+0xff7fc328>
  8053a8:	9de7c83a 	sub	r19,r19,r23
  8053ac:	98001f26 	beq	r19,zero,80542c <__sfvwrite_r+0x308>
  8053b0:	a0800217 	ldw	r2,8(r20)
  8053b4:	e5f9883a 	add	fp,fp,r23
  8053b8:	95e5c83a 	sub	r18,r18,r23
  8053bc:	15efc83a 	sub	r23,r2,r23
  8053c0:	a5c00215 	stw	r23,8(r20)
  8053c4:	b83f8426 	beq	r23,zero,8051d8 <__alt_mem_epcs_flash_controller_0+0xff7fc1d8>
  8053c8:	903fe11e 	bne	r18,zero,805350 <__alt_mem_epcs_flash_controller_0+0xff7fc350>
  8053cc:	8f000017 	ldw	fp,0(r17)
  8053d0:	8c800117 	ldw	r18,4(r17)
  8053d4:	0011883a 	mov	r8,zero
  8053d8:	8c400204 	addi	r17,r17,8
  8053dc:	003fdb06 	br	80534c <__alt_mem_epcs_flash_controller_0+0xff7fc34c>
  8053e0:	180d883a 	mov	r6,r3
  8053e4:	e00b883a 	mov	r5,fp
  8053e8:	da000115 	stw	r8,4(sp)
  8053ec:	d8c00015 	stw	r3,0(sp)
  8053f0:	08064440 	call	806444 <memmove>
  8053f4:	d8c00017 	ldw	r3,0(sp)
  8053f8:	80800017 	ldw	r2,0(r16)
  8053fc:	800b883a 	mov	r5,r16
  805400:	a809883a 	mov	r4,r21
  805404:	10c5883a 	add	r2,r2,r3
  805408:	80800015 	stw	r2,0(r16)
  80540c:	d8c00015 	stw	r3,0(sp)
  805410:	08048b40 	call	8048b4 <_fflush_r>
  805414:	d8c00017 	ldw	r3,0(sp)
  805418:	da000117 	ldw	r8,4(sp)
  80541c:	103fc21e 	bne	r2,zero,805328 <__alt_mem_epcs_flash_controller_0+0xff7fc328>
  805420:	182f883a 	mov	r23,r3
  805424:	9de7c83a 	sub	r19,r19,r23
  805428:	983fe11e 	bne	r19,zero,8053b0 <__alt_mem_epcs_flash_controller_0+0xff7fc3b0>
  80542c:	800b883a 	mov	r5,r16
  805430:	a809883a 	mov	r4,r21
  805434:	08048b40 	call	8048b4 <_fflush_r>
  805438:	103fbb1e 	bne	r2,zero,805328 <__alt_mem_epcs_flash_controller_0+0xff7fc328>
  80543c:	0011883a 	mov	r8,zero
  805440:	003fdb06 	br	8053b0 <__alt_mem_epcs_flash_controller_0+0xff7fc3b0>
  805444:	94c0012e 	bgeu	r18,r19,80544c <__sfvwrite_r+0x328>
  805448:	9027883a 	mov	r19,r18
  80544c:	980d883a 	mov	r6,r19
  805450:	e00b883a 	mov	r5,fp
  805454:	08064440 	call	806444 <memmove>
  805458:	80800217 	ldw	r2,8(r16)
  80545c:	80c00017 	ldw	r3,0(r16)
  805460:	14c5c83a 	sub	r2,r2,r19
  805464:	1cc7883a 	add	r3,r3,r19
  805468:	80800215 	stw	r2,8(r16)
  80546c:	80c00015 	stw	r3,0(r16)
  805470:	10004326 	beq	r2,zero,805580 <__sfvwrite_r+0x45c>
  805474:	9805883a 	mov	r2,r19
  805478:	003f8306 	br	805288 <__alt_mem_epcs_flash_controller_0+0xff7fc288>
  80547c:	b00d883a 	mov	r6,r22
  805480:	e00b883a 	mov	r5,fp
  805484:	da000115 	stw	r8,4(sp)
  805488:	08064440 	call	806444 <memmove>
  80548c:	80800217 	ldw	r2,8(r16)
  805490:	80c00017 	ldw	r3,0(r16)
  805494:	da000117 	ldw	r8,4(sp)
  805498:	1585c83a 	sub	r2,r2,r22
  80549c:	1dad883a 	add	r22,r3,r22
  8054a0:	80800215 	stw	r2,8(r16)
  8054a4:	85800015 	stw	r22,0(r16)
  8054a8:	003fbf06 	br	8053a8 <__alt_mem_epcs_flash_controller_0+0xff7fc3a8>
  8054ac:	81000017 	ldw	r4,0(r16)
  8054b0:	9027883a 	mov	r19,r18
  8054b4:	902f883a 	mov	r23,r18
  8054b8:	003f6906 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  8054bc:	900d883a 	mov	r6,r18
  8054c0:	01400284 	movi	r5,10
  8054c4:	e009883a 	mov	r4,fp
  8054c8:	08062180 	call	806218 <memchr>
  8054cc:	10003e26 	beq	r2,zero,8055c8 <__sfvwrite_r+0x4a4>
  8054d0:	10800044 	addi	r2,r2,1
  8054d4:	1727c83a 	sub	r19,r2,fp
  8054d8:	02000044 	movi	r8,1
  8054dc:	003f9d06 	br	805354 <__alt_mem_epcs_flash_controller_0+0xff7fc354>
  8054e0:	80800517 	ldw	r2,20(r16)
  8054e4:	81400417 	ldw	r5,16(r16)
  8054e8:	81c00017 	ldw	r7,0(r16)
  8054ec:	10a7883a 	add	r19,r2,r2
  8054f0:	9885883a 	add	r2,r19,r2
  8054f4:	1026d7fa 	srli	r19,r2,31
  8054f8:	396dc83a 	sub	r22,r7,r5
  8054fc:	b1000044 	addi	r4,r22,1
  805500:	9885883a 	add	r2,r19,r2
  805504:	1027d07a 	srai	r19,r2,1
  805508:	2485883a 	add	r2,r4,r18
  80550c:	980d883a 	mov	r6,r19
  805510:	9880022e 	bgeu	r19,r2,80551c <__sfvwrite_r+0x3f8>
  805514:	1027883a 	mov	r19,r2
  805518:	100d883a 	mov	r6,r2
  80551c:	18c1000c 	andi	r3,r3,1024
  805520:	18001c26 	beq	r3,zero,805594 <__sfvwrite_r+0x470>
  805524:	300b883a 	mov	r5,r6
  805528:	a809883a 	mov	r4,r21
  80552c:	0805a0c0 	call	805a0c <_malloc_r>
  805530:	102f883a 	mov	r23,r2
  805534:	10002926 	beq	r2,zero,8055dc <__sfvwrite_r+0x4b8>
  805538:	81400417 	ldw	r5,16(r16)
  80553c:	b00d883a 	mov	r6,r22
  805540:	1009883a 	mov	r4,r2
  805544:	08062fc0 	call	8062fc <memcpy>
  805548:	8080030b 	ldhu	r2,12(r16)
  80554c:	00fedfc4 	movi	r3,-1153
  805550:	10c4703a 	and	r2,r2,r3
  805554:	10802014 	ori	r2,r2,128
  805558:	8080030d 	sth	r2,12(r16)
  80555c:	bd89883a 	add	r4,r23,r22
  805560:	9d8fc83a 	sub	r7,r19,r22
  805564:	85c00415 	stw	r23,16(r16)
  805568:	84c00515 	stw	r19,20(r16)
  80556c:	81000015 	stw	r4,0(r16)
  805570:	9027883a 	mov	r19,r18
  805574:	81c00215 	stw	r7,8(r16)
  805578:	902f883a 	mov	r23,r18
  80557c:	003f3806 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  805580:	800b883a 	mov	r5,r16
  805584:	a809883a 	mov	r4,r21
  805588:	08048b40 	call	8048b4 <_fflush_r>
  80558c:	103fb926 	beq	r2,zero,805474 <__alt_mem_epcs_flash_controller_0+0xff7fc474>
  805590:	003f6506 	br	805328 <__alt_mem_epcs_flash_controller_0+0xff7fc328>
  805594:	a809883a 	mov	r4,r21
  805598:	08077800 	call	807780 <_realloc_r>
  80559c:	102f883a 	mov	r23,r2
  8055a0:	103fee1e 	bne	r2,zero,80555c <__alt_mem_epcs_flash_controller_0+0xff7fc55c>
  8055a4:	81400417 	ldw	r5,16(r16)
  8055a8:	a809883a 	mov	r4,r21
  8055ac:	0804e140 	call	804e14 <_free_r>
  8055b0:	8080030b 	ldhu	r2,12(r16)
  8055b4:	00ffdfc4 	movi	r3,-129
  8055b8:	1884703a 	and	r2,r3,r2
  8055bc:	00c00304 	movi	r3,12
  8055c0:	a8c00015 	stw	r3,0(r21)
  8055c4:	003f5906 	br	80532c <__alt_mem_epcs_flash_controller_0+0xff7fc32c>
  8055c8:	94c00044 	addi	r19,r18,1
  8055cc:	02000044 	movi	r8,1
  8055d0:	003f6006 	br	805354 <__alt_mem_epcs_flash_controller_0+0xff7fc354>
  8055d4:	00bfffc4 	movi	r2,-1
  8055d8:	003f0006 	br	8051dc <__alt_mem_epcs_flash_controller_0+0xff7fc1dc>
  8055dc:	00800304 	movi	r2,12
  8055e0:	a8800015 	stw	r2,0(r21)
  8055e4:	8080030b 	ldhu	r2,12(r16)
  8055e8:	003f5006 	br	80532c <__alt_mem_epcs_flash_controller_0+0xff7fc32c>

008055ec <_fwalk>:
  8055ec:	defff704 	addi	sp,sp,-36
  8055f0:	dd000415 	stw	r20,16(sp)
  8055f4:	dfc00815 	stw	ra,32(sp)
  8055f8:	ddc00715 	stw	r23,28(sp)
  8055fc:	dd800615 	stw	r22,24(sp)
  805600:	dd400515 	stw	r21,20(sp)
  805604:	dcc00315 	stw	r19,12(sp)
  805608:	dc800215 	stw	r18,8(sp)
  80560c:	dc400115 	stw	r17,4(sp)
  805610:	dc000015 	stw	r16,0(sp)
  805614:	2500b804 	addi	r20,r4,736
  805618:	a0002326 	beq	r20,zero,8056a8 <_fwalk+0xbc>
  80561c:	282b883a 	mov	r21,r5
  805620:	002f883a 	mov	r23,zero
  805624:	05800044 	movi	r22,1
  805628:	04ffffc4 	movi	r19,-1
  80562c:	a4400117 	ldw	r17,4(r20)
  805630:	a4800217 	ldw	r18,8(r20)
  805634:	8c7fffc4 	addi	r17,r17,-1
  805638:	88000d16 	blt	r17,zero,805670 <_fwalk+0x84>
  80563c:	94000304 	addi	r16,r18,12
  805640:	94800384 	addi	r18,r18,14
  805644:	8080000b 	ldhu	r2,0(r16)
  805648:	8c7fffc4 	addi	r17,r17,-1
  80564c:	813ffd04 	addi	r4,r16,-12
  805650:	b080042e 	bgeu	r22,r2,805664 <_fwalk+0x78>
  805654:	9080000f 	ldh	r2,0(r18)
  805658:	14c00226 	beq	r2,r19,805664 <_fwalk+0x78>
  80565c:	a83ee83a 	callr	r21
  805660:	b8aeb03a 	or	r23,r23,r2
  805664:	84001a04 	addi	r16,r16,104
  805668:	94801a04 	addi	r18,r18,104
  80566c:	8cfff51e 	bne	r17,r19,805644 <__alt_mem_epcs_flash_controller_0+0xff7fc644>
  805670:	a5000017 	ldw	r20,0(r20)
  805674:	a03fed1e 	bne	r20,zero,80562c <__alt_mem_epcs_flash_controller_0+0xff7fc62c>
  805678:	b805883a 	mov	r2,r23
  80567c:	dfc00817 	ldw	ra,32(sp)
  805680:	ddc00717 	ldw	r23,28(sp)
  805684:	dd800617 	ldw	r22,24(sp)
  805688:	dd400517 	ldw	r21,20(sp)
  80568c:	dd000417 	ldw	r20,16(sp)
  805690:	dcc00317 	ldw	r19,12(sp)
  805694:	dc800217 	ldw	r18,8(sp)
  805698:	dc400117 	ldw	r17,4(sp)
  80569c:	dc000017 	ldw	r16,0(sp)
  8056a0:	dec00904 	addi	sp,sp,36
  8056a4:	f800283a 	ret
  8056a8:	002f883a 	mov	r23,zero
  8056ac:	003ff206 	br	805678 <__alt_mem_epcs_flash_controller_0+0xff7fc678>

008056b0 <_fwalk_reent>:
  8056b0:	defff704 	addi	sp,sp,-36
  8056b4:	dd000415 	stw	r20,16(sp)
  8056b8:	dfc00815 	stw	ra,32(sp)
  8056bc:	ddc00715 	stw	r23,28(sp)
  8056c0:	dd800615 	stw	r22,24(sp)
  8056c4:	dd400515 	stw	r21,20(sp)
  8056c8:	dcc00315 	stw	r19,12(sp)
  8056cc:	dc800215 	stw	r18,8(sp)
  8056d0:	dc400115 	stw	r17,4(sp)
  8056d4:	dc000015 	stw	r16,0(sp)
  8056d8:	2500b804 	addi	r20,r4,736
  8056dc:	a0002326 	beq	r20,zero,80576c <_fwalk_reent+0xbc>
  8056e0:	282b883a 	mov	r21,r5
  8056e4:	2027883a 	mov	r19,r4
  8056e8:	002f883a 	mov	r23,zero
  8056ec:	05800044 	movi	r22,1
  8056f0:	04bfffc4 	movi	r18,-1
  8056f4:	a4400117 	ldw	r17,4(r20)
  8056f8:	a4000217 	ldw	r16,8(r20)
  8056fc:	8c7fffc4 	addi	r17,r17,-1
  805700:	88000c16 	blt	r17,zero,805734 <_fwalk_reent+0x84>
  805704:	84000304 	addi	r16,r16,12
  805708:	8080000b 	ldhu	r2,0(r16)
  80570c:	8c7fffc4 	addi	r17,r17,-1
  805710:	817ffd04 	addi	r5,r16,-12
  805714:	b080052e 	bgeu	r22,r2,80572c <_fwalk_reent+0x7c>
  805718:	8080008f 	ldh	r2,2(r16)
  80571c:	9809883a 	mov	r4,r19
  805720:	14800226 	beq	r2,r18,80572c <_fwalk_reent+0x7c>
  805724:	a83ee83a 	callr	r21
  805728:	b8aeb03a 	or	r23,r23,r2
  80572c:	84001a04 	addi	r16,r16,104
  805730:	8cbff51e 	bne	r17,r18,805708 <__alt_mem_epcs_flash_controller_0+0xff7fc708>
  805734:	a5000017 	ldw	r20,0(r20)
  805738:	a03fee1e 	bne	r20,zero,8056f4 <__alt_mem_epcs_flash_controller_0+0xff7fc6f4>
  80573c:	b805883a 	mov	r2,r23
  805740:	dfc00817 	ldw	ra,32(sp)
  805744:	ddc00717 	ldw	r23,28(sp)
  805748:	dd800617 	ldw	r22,24(sp)
  80574c:	dd400517 	ldw	r21,20(sp)
  805750:	dd000417 	ldw	r20,16(sp)
  805754:	dcc00317 	ldw	r19,12(sp)
  805758:	dc800217 	ldw	r18,8(sp)
  80575c:	dc400117 	ldw	r17,4(sp)
  805760:	dc000017 	ldw	r16,0(sp)
  805764:	dec00904 	addi	sp,sp,36
  805768:	f800283a 	ret
  80576c:	002f883a 	mov	r23,zero
  805770:	003ff206 	br	80573c <__alt_mem_epcs_flash_controller_0+0xff7fc73c>

00805774 <_setlocale_r>:
  805774:	30001b26 	beq	r6,zero,8057e4 <_setlocale_r+0x70>
  805778:	014020b4 	movhi	r5,130
  80577c:	defffe04 	addi	sp,sp,-8
  805780:	29681804 	addi	r5,r5,-24480
  805784:	3009883a 	mov	r4,r6
  805788:	dc000015 	stw	r16,0(sp)
  80578c:	dfc00115 	stw	ra,4(sp)
  805790:	3021883a 	mov	r16,r6
  805794:	0807ee80 	call	807ee8 <strcmp>
  805798:	1000061e 	bne	r2,zero,8057b4 <_setlocale_r+0x40>
  80579c:	008020b4 	movhi	r2,130
  8057a0:	10a81704 	addi	r2,r2,-24484
  8057a4:	dfc00117 	ldw	ra,4(sp)
  8057a8:	dc000017 	ldw	r16,0(sp)
  8057ac:	dec00204 	addi	sp,sp,8
  8057b0:	f800283a 	ret
  8057b4:	014020b4 	movhi	r5,130
  8057b8:	29681704 	addi	r5,r5,-24484
  8057bc:	8009883a 	mov	r4,r16
  8057c0:	0807ee80 	call	807ee8 <strcmp>
  8057c4:	103ff526 	beq	r2,zero,80579c <__alt_mem_epcs_flash_controller_0+0xff7fc79c>
  8057c8:	014020b4 	movhi	r5,130
  8057cc:	29680204 	addi	r5,r5,-24568
  8057d0:	8009883a 	mov	r4,r16
  8057d4:	0807ee80 	call	807ee8 <strcmp>
  8057d8:	103ff026 	beq	r2,zero,80579c <__alt_mem_epcs_flash_controller_0+0xff7fc79c>
  8057dc:	0005883a 	mov	r2,zero
  8057e0:	003ff006 	br	8057a4 <__alt_mem_epcs_flash_controller_0+0xff7fc7a4>
  8057e4:	008020b4 	movhi	r2,130
  8057e8:	10a81704 	addi	r2,r2,-24484
  8057ec:	f800283a 	ret

008057f0 <__locale_charset>:
  8057f0:	008020b4 	movhi	r2,130
  8057f4:	10aa2304 	addi	r2,r2,-22388
  8057f8:	f800283a 	ret

008057fc <__locale_mb_cur_max>:
  8057fc:	008020b4 	movhi	r2,130
  805800:	10b07904 	addi	r2,r2,-15900
  805804:	10800017 	ldw	r2,0(r2)
  805808:	f800283a 	ret

0080580c <__locale_msgcharset>:
  80580c:	008020b4 	movhi	r2,130
  805810:	10aa1b04 	addi	r2,r2,-22420
  805814:	f800283a 	ret

00805818 <__locale_cjk_lang>:
  805818:	0005883a 	mov	r2,zero
  80581c:	f800283a 	ret

00805820 <_localeconv_r>:
  805820:	008020b4 	movhi	r2,130
  805824:	10aa2b04 	addi	r2,r2,-22356
  805828:	f800283a 	ret

0080582c <setlocale>:
  80582c:	008020b4 	movhi	r2,130
  805830:	10b07804 	addi	r2,r2,-15904
  805834:	280d883a 	mov	r6,r5
  805838:	200b883a 	mov	r5,r4
  80583c:	11000017 	ldw	r4,0(r2)
  805840:	08057741 	jmpi	805774 <_setlocale_r>

00805844 <localeconv>:
  805844:	008020b4 	movhi	r2,130
  805848:	10aa2b04 	addi	r2,r2,-22356
  80584c:	f800283a 	ret

00805850 <__smakebuf_r>:
  805850:	2880030b 	ldhu	r2,12(r5)
  805854:	10c0008c 	andi	r3,r2,2
  805858:	1800411e 	bne	r3,zero,805960 <__smakebuf_r+0x110>
  80585c:	deffec04 	addi	sp,sp,-80
  805860:	dc000f15 	stw	r16,60(sp)
  805864:	2821883a 	mov	r16,r5
  805868:	2940038f 	ldh	r5,14(r5)
  80586c:	dc401015 	stw	r17,64(sp)
  805870:	dfc01315 	stw	ra,76(sp)
  805874:	dcc01215 	stw	r19,72(sp)
  805878:	dc801115 	stw	r18,68(sp)
  80587c:	2023883a 	mov	r17,r4
  805880:	28001c16 	blt	r5,zero,8058f4 <__smakebuf_r+0xa4>
  805884:	d80d883a 	mov	r6,sp
  805888:	0809b580 	call	809b58 <_fstat_r>
  80588c:	10001816 	blt	r2,zero,8058f0 <__smakebuf_r+0xa0>
  805890:	d8800117 	ldw	r2,4(sp)
  805894:	00e00014 	movui	r3,32768
  805898:	10bc000c 	andi	r2,r2,61440
  80589c:	14c80020 	cmpeqi	r19,r2,8192
  8058a0:	10c03726 	beq	r2,r3,805980 <__smakebuf_r+0x130>
  8058a4:	80c0030b 	ldhu	r3,12(r16)
  8058a8:	18c20014 	ori	r3,r3,2048
  8058ac:	80c0030d 	sth	r3,12(r16)
  8058b0:	00c80004 	movi	r3,8192
  8058b4:	10c0521e 	bne	r2,r3,805a00 <__smakebuf_r+0x1b0>
  8058b8:	8140038f 	ldh	r5,14(r16)
  8058bc:	8809883a 	mov	r4,r17
  8058c0:	0809bb40 	call	809bb4 <_isatty_r>
  8058c4:	10004c26 	beq	r2,zero,8059f8 <__smakebuf_r+0x1a8>
  8058c8:	8080030b 	ldhu	r2,12(r16)
  8058cc:	80c010c4 	addi	r3,r16,67
  8058d0:	80c00015 	stw	r3,0(r16)
  8058d4:	10800054 	ori	r2,r2,1
  8058d8:	8080030d 	sth	r2,12(r16)
  8058dc:	00800044 	movi	r2,1
  8058e0:	80c00415 	stw	r3,16(r16)
  8058e4:	80800515 	stw	r2,20(r16)
  8058e8:	04810004 	movi	r18,1024
  8058ec:	00000706 	br	80590c <__smakebuf_r+0xbc>
  8058f0:	8080030b 	ldhu	r2,12(r16)
  8058f4:	10c0200c 	andi	r3,r2,128
  8058f8:	18001f1e 	bne	r3,zero,805978 <__smakebuf_r+0x128>
  8058fc:	04810004 	movi	r18,1024
  805900:	10820014 	ori	r2,r2,2048
  805904:	8080030d 	sth	r2,12(r16)
  805908:	0027883a 	mov	r19,zero
  80590c:	900b883a 	mov	r5,r18
  805910:	8809883a 	mov	r4,r17
  805914:	0805a0c0 	call	805a0c <_malloc_r>
  805918:	10002c26 	beq	r2,zero,8059cc <__smakebuf_r+0x17c>
  80591c:	80c0030b 	ldhu	r3,12(r16)
  805920:	01002034 	movhi	r4,128
  805924:	21125204 	addi	r4,r4,18760
  805928:	89000f15 	stw	r4,60(r17)
  80592c:	18c02014 	ori	r3,r3,128
  805930:	80c0030d 	sth	r3,12(r16)
  805934:	80800015 	stw	r2,0(r16)
  805938:	80800415 	stw	r2,16(r16)
  80593c:	84800515 	stw	r18,20(r16)
  805940:	98001a1e 	bne	r19,zero,8059ac <__smakebuf_r+0x15c>
  805944:	dfc01317 	ldw	ra,76(sp)
  805948:	dcc01217 	ldw	r19,72(sp)
  80594c:	dc801117 	ldw	r18,68(sp)
  805950:	dc401017 	ldw	r17,64(sp)
  805954:	dc000f17 	ldw	r16,60(sp)
  805958:	dec01404 	addi	sp,sp,80
  80595c:	f800283a 	ret
  805960:	288010c4 	addi	r2,r5,67
  805964:	28800015 	stw	r2,0(r5)
  805968:	28800415 	stw	r2,16(r5)
  80596c:	00800044 	movi	r2,1
  805970:	28800515 	stw	r2,20(r5)
  805974:	f800283a 	ret
  805978:	04801004 	movi	r18,64
  80597c:	003fe006 	br	805900 <__alt_mem_epcs_flash_controller_0+0xff7fc900>
  805980:	81000a17 	ldw	r4,40(r16)
  805984:	00c02034 	movhi	r3,128
  805988:	18dfa104 	addi	r3,r3,32388
  80598c:	20ffc51e 	bne	r4,r3,8058a4 <__alt_mem_epcs_flash_controller_0+0xff7fc8a4>
  805990:	8080030b 	ldhu	r2,12(r16)
  805994:	04810004 	movi	r18,1024
  805998:	84801315 	stw	r18,76(r16)
  80599c:	1484b03a 	or	r2,r2,r18
  8059a0:	8080030d 	sth	r2,12(r16)
  8059a4:	0027883a 	mov	r19,zero
  8059a8:	003fd806 	br	80590c <__alt_mem_epcs_flash_controller_0+0xff7fc90c>
  8059ac:	8140038f 	ldh	r5,14(r16)
  8059b0:	8809883a 	mov	r4,r17
  8059b4:	0809bb40 	call	809bb4 <_isatty_r>
  8059b8:	103fe226 	beq	r2,zero,805944 <__alt_mem_epcs_flash_controller_0+0xff7fc944>
  8059bc:	8080030b 	ldhu	r2,12(r16)
  8059c0:	10800054 	ori	r2,r2,1
  8059c4:	8080030d 	sth	r2,12(r16)
  8059c8:	003fde06 	br	805944 <__alt_mem_epcs_flash_controller_0+0xff7fc944>
  8059cc:	8080030b 	ldhu	r2,12(r16)
  8059d0:	10c0800c 	andi	r3,r2,512
  8059d4:	183fdb1e 	bne	r3,zero,805944 <__alt_mem_epcs_flash_controller_0+0xff7fc944>
  8059d8:	10800094 	ori	r2,r2,2
  8059dc:	80c010c4 	addi	r3,r16,67
  8059e0:	8080030d 	sth	r2,12(r16)
  8059e4:	00800044 	movi	r2,1
  8059e8:	80c00015 	stw	r3,0(r16)
  8059ec:	80c00415 	stw	r3,16(r16)
  8059f0:	80800515 	stw	r2,20(r16)
  8059f4:	003fd306 	br	805944 <__alt_mem_epcs_flash_controller_0+0xff7fc944>
  8059f8:	04810004 	movi	r18,1024
  8059fc:	003fc306 	br	80590c <__alt_mem_epcs_flash_controller_0+0xff7fc90c>
  805a00:	0027883a 	mov	r19,zero
  805a04:	04810004 	movi	r18,1024
  805a08:	003fc006 	br	80590c <__alt_mem_epcs_flash_controller_0+0xff7fc90c>

00805a0c <_malloc_r>:
  805a0c:	defff504 	addi	sp,sp,-44
  805a10:	dc800315 	stw	r18,12(sp)
  805a14:	dfc00a15 	stw	ra,40(sp)
  805a18:	df000915 	stw	fp,36(sp)
  805a1c:	ddc00815 	stw	r23,32(sp)
  805a20:	dd800715 	stw	r22,28(sp)
  805a24:	dd400615 	stw	r21,24(sp)
  805a28:	dd000515 	stw	r20,20(sp)
  805a2c:	dcc00415 	stw	r19,16(sp)
  805a30:	dc400215 	stw	r17,8(sp)
  805a34:	dc000115 	stw	r16,4(sp)
  805a38:	288002c4 	addi	r2,r5,11
  805a3c:	00c00584 	movi	r3,22
  805a40:	2025883a 	mov	r18,r4
  805a44:	18807f2e 	bgeu	r3,r2,805c44 <_malloc_r+0x238>
  805a48:	047ffe04 	movi	r17,-8
  805a4c:	1462703a 	and	r17,r2,r17
  805a50:	8800a316 	blt	r17,zero,805ce0 <_malloc_r+0x2d4>
  805a54:	8940a236 	bltu	r17,r5,805ce0 <_malloc_r+0x2d4>
  805a58:	080e2ac0 	call	80e2ac <__malloc_lock>
  805a5c:	00807dc4 	movi	r2,503
  805a60:	1441e92e 	bgeu	r2,r17,806208 <_malloc_r+0x7fc>
  805a64:	8804d27a 	srli	r2,r17,9
  805a68:	1000a126 	beq	r2,zero,805cf0 <_malloc_r+0x2e4>
  805a6c:	00c00104 	movi	r3,4
  805a70:	18811e36 	bltu	r3,r2,805eec <_malloc_r+0x4e0>
  805a74:	8804d1ba 	srli	r2,r17,6
  805a78:	12000e44 	addi	r8,r2,57
  805a7c:	11c00e04 	addi	r7,r2,56
  805a80:	4209883a 	add	r4,r8,r8
  805a84:	04c020b4 	movhi	r19,130
  805a88:	2109883a 	add	r4,r4,r4
  805a8c:	9cea3904 	addi	r19,r19,-22300
  805a90:	2109883a 	add	r4,r4,r4
  805a94:	9909883a 	add	r4,r19,r4
  805a98:	24000117 	ldw	r16,4(r4)
  805a9c:	213ffe04 	addi	r4,r4,-8
  805aa0:	24009726 	beq	r4,r16,805d00 <_malloc_r+0x2f4>
  805aa4:	80800117 	ldw	r2,4(r16)
  805aa8:	01bfff04 	movi	r6,-4
  805aac:	014003c4 	movi	r5,15
  805ab0:	1184703a 	and	r2,r2,r6
  805ab4:	1447c83a 	sub	r3,r2,r17
  805ab8:	28c00716 	blt	r5,r3,805ad8 <_malloc_r+0xcc>
  805abc:	1800920e 	bge	r3,zero,805d08 <_malloc_r+0x2fc>
  805ac0:	84000317 	ldw	r16,12(r16)
  805ac4:	24008e26 	beq	r4,r16,805d00 <_malloc_r+0x2f4>
  805ac8:	80800117 	ldw	r2,4(r16)
  805acc:	1184703a 	and	r2,r2,r6
  805ad0:	1447c83a 	sub	r3,r2,r17
  805ad4:	28fff90e 	bge	r5,r3,805abc <__alt_mem_epcs_flash_controller_0+0xff7fcabc>
  805ad8:	3809883a 	mov	r4,r7
  805adc:	018020b4 	movhi	r6,130
  805ae0:	9c000417 	ldw	r16,16(r19)
  805ae4:	31aa3904 	addi	r6,r6,-22300
  805ae8:	32000204 	addi	r8,r6,8
  805aec:	82013426 	beq	r16,r8,805fc0 <_malloc_r+0x5b4>
  805af0:	80c00117 	ldw	r3,4(r16)
  805af4:	00bfff04 	movi	r2,-4
  805af8:	188e703a 	and	r7,r3,r2
  805afc:	3c45c83a 	sub	r2,r7,r17
  805b00:	00c003c4 	movi	r3,15
  805b04:	18811f16 	blt	r3,r2,805f84 <_malloc_r+0x578>
  805b08:	32000515 	stw	r8,20(r6)
  805b0c:	32000415 	stw	r8,16(r6)
  805b10:	10007f0e 	bge	r2,zero,805d10 <_malloc_r+0x304>
  805b14:	00807fc4 	movi	r2,511
  805b18:	11c0fd36 	bltu	r2,r7,805f10 <_malloc_r+0x504>
  805b1c:	3806d0fa 	srli	r3,r7,3
  805b20:	01c00044 	movi	r7,1
  805b24:	30800117 	ldw	r2,4(r6)
  805b28:	19400044 	addi	r5,r3,1
  805b2c:	294b883a 	add	r5,r5,r5
  805b30:	1807d0ba 	srai	r3,r3,2
  805b34:	294b883a 	add	r5,r5,r5
  805b38:	294b883a 	add	r5,r5,r5
  805b3c:	298b883a 	add	r5,r5,r6
  805b40:	38c6983a 	sll	r3,r7,r3
  805b44:	29c00017 	ldw	r7,0(r5)
  805b48:	2a7ffe04 	addi	r9,r5,-8
  805b4c:	1886b03a 	or	r3,r3,r2
  805b50:	82400315 	stw	r9,12(r16)
  805b54:	81c00215 	stw	r7,8(r16)
  805b58:	30c00115 	stw	r3,4(r6)
  805b5c:	2c000015 	stw	r16,0(r5)
  805b60:	3c000315 	stw	r16,12(r7)
  805b64:	2005d0ba 	srai	r2,r4,2
  805b68:	01400044 	movi	r5,1
  805b6c:	288a983a 	sll	r5,r5,r2
  805b70:	19406f36 	bltu	r3,r5,805d30 <_malloc_r+0x324>
  805b74:	28c4703a 	and	r2,r5,r3
  805b78:	10000a1e 	bne	r2,zero,805ba4 <_malloc_r+0x198>
  805b7c:	00bfff04 	movi	r2,-4
  805b80:	294b883a 	add	r5,r5,r5
  805b84:	2088703a 	and	r4,r4,r2
  805b88:	28c4703a 	and	r2,r5,r3
  805b8c:	21000104 	addi	r4,r4,4
  805b90:	1000041e 	bne	r2,zero,805ba4 <_malloc_r+0x198>
  805b94:	294b883a 	add	r5,r5,r5
  805b98:	28c4703a 	and	r2,r5,r3
  805b9c:	21000104 	addi	r4,r4,4
  805ba0:	103ffc26 	beq	r2,zero,805b94 <__alt_mem_epcs_flash_controller_0+0xff7fcb94>
  805ba4:	02bfff04 	movi	r10,-4
  805ba8:	024003c4 	movi	r9,15
  805bac:	21800044 	addi	r6,r4,1
  805bb0:	318d883a 	add	r6,r6,r6
  805bb4:	318d883a 	add	r6,r6,r6
  805bb8:	318d883a 	add	r6,r6,r6
  805bbc:	998d883a 	add	r6,r19,r6
  805bc0:	333ffe04 	addi	r12,r6,-8
  805bc4:	2017883a 	mov	r11,r4
  805bc8:	31800104 	addi	r6,r6,4
  805bcc:	34000017 	ldw	r16,0(r6)
  805bd0:	31fffd04 	addi	r7,r6,-12
  805bd4:	81c0041e 	bne	r16,r7,805be8 <_malloc_r+0x1dc>
  805bd8:	0000fb06 	br	805fc8 <_malloc_r+0x5bc>
  805bdc:	1801030e 	bge	r3,zero,805fec <_malloc_r+0x5e0>
  805be0:	84000317 	ldw	r16,12(r16)
  805be4:	81c0f826 	beq	r16,r7,805fc8 <_malloc_r+0x5bc>
  805be8:	80800117 	ldw	r2,4(r16)
  805bec:	1284703a 	and	r2,r2,r10
  805bf0:	1447c83a 	sub	r3,r2,r17
  805bf4:	48fff90e 	bge	r9,r3,805bdc <__alt_mem_epcs_flash_controller_0+0xff7fcbdc>
  805bf8:	80800317 	ldw	r2,12(r16)
  805bfc:	81000217 	ldw	r4,8(r16)
  805c00:	89400054 	ori	r5,r17,1
  805c04:	81400115 	stw	r5,4(r16)
  805c08:	20800315 	stw	r2,12(r4)
  805c0c:	11000215 	stw	r4,8(r2)
  805c10:	8463883a 	add	r17,r16,r17
  805c14:	9c400515 	stw	r17,20(r19)
  805c18:	9c400415 	stw	r17,16(r19)
  805c1c:	18800054 	ori	r2,r3,1
  805c20:	88800115 	stw	r2,4(r17)
  805c24:	8a000315 	stw	r8,12(r17)
  805c28:	8a000215 	stw	r8,8(r17)
  805c2c:	88e3883a 	add	r17,r17,r3
  805c30:	88c00015 	stw	r3,0(r17)
  805c34:	9009883a 	mov	r4,r18
  805c38:	080e3cc0 	call	80e3cc <__malloc_unlock>
  805c3c:	80800204 	addi	r2,r16,8
  805c40:	00001b06 	br	805cb0 <_malloc_r+0x2a4>
  805c44:	04400404 	movi	r17,16
  805c48:	89402536 	bltu	r17,r5,805ce0 <_malloc_r+0x2d4>
  805c4c:	080e2ac0 	call	80e2ac <__malloc_lock>
  805c50:	00800184 	movi	r2,6
  805c54:	01000084 	movi	r4,2
  805c58:	04c020b4 	movhi	r19,130
  805c5c:	1085883a 	add	r2,r2,r2
  805c60:	9cea3904 	addi	r19,r19,-22300
  805c64:	1085883a 	add	r2,r2,r2
  805c68:	9885883a 	add	r2,r19,r2
  805c6c:	14000117 	ldw	r16,4(r2)
  805c70:	10fffe04 	addi	r3,r2,-8
  805c74:	80c0d926 	beq	r16,r3,805fdc <_malloc_r+0x5d0>
  805c78:	80c00117 	ldw	r3,4(r16)
  805c7c:	81000317 	ldw	r4,12(r16)
  805c80:	00bfff04 	movi	r2,-4
  805c84:	1884703a 	and	r2,r3,r2
  805c88:	81400217 	ldw	r5,8(r16)
  805c8c:	8085883a 	add	r2,r16,r2
  805c90:	10c00117 	ldw	r3,4(r2)
  805c94:	29000315 	stw	r4,12(r5)
  805c98:	21400215 	stw	r5,8(r4)
  805c9c:	18c00054 	ori	r3,r3,1
  805ca0:	10c00115 	stw	r3,4(r2)
  805ca4:	9009883a 	mov	r4,r18
  805ca8:	080e3cc0 	call	80e3cc <__malloc_unlock>
  805cac:	80800204 	addi	r2,r16,8
  805cb0:	dfc00a17 	ldw	ra,40(sp)
  805cb4:	df000917 	ldw	fp,36(sp)
  805cb8:	ddc00817 	ldw	r23,32(sp)
  805cbc:	dd800717 	ldw	r22,28(sp)
  805cc0:	dd400617 	ldw	r21,24(sp)
  805cc4:	dd000517 	ldw	r20,20(sp)
  805cc8:	dcc00417 	ldw	r19,16(sp)
  805ccc:	dc800317 	ldw	r18,12(sp)
  805cd0:	dc400217 	ldw	r17,8(sp)
  805cd4:	dc000117 	ldw	r16,4(sp)
  805cd8:	dec00b04 	addi	sp,sp,44
  805cdc:	f800283a 	ret
  805ce0:	00800304 	movi	r2,12
  805ce4:	90800015 	stw	r2,0(r18)
  805ce8:	0005883a 	mov	r2,zero
  805cec:	003ff006 	br	805cb0 <__alt_mem_epcs_flash_controller_0+0xff7fccb0>
  805cf0:	01002004 	movi	r4,128
  805cf4:	02001004 	movi	r8,64
  805cf8:	01c00fc4 	movi	r7,63
  805cfc:	003f6106 	br	805a84 <__alt_mem_epcs_flash_controller_0+0xff7fca84>
  805d00:	4009883a 	mov	r4,r8
  805d04:	003f7506 	br	805adc <__alt_mem_epcs_flash_controller_0+0xff7fcadc>
  805d08:	81000317 	ldw	r4,12(r16)
  805d0c:	003fde06 	br	805c88 <__alt_mem_epcs_flash_controller_0+0xff7fcc88>
  805d10:	81c5883a 	add	r2,r16,r7
  805d14:	11400117 	ldw	r5,4(r2)
  805d18:	9009883a 	mov	r4,r18
  805d1c:	29400054 	ori	r5,r5,1
  805d20:	11400115 	stw	r5,4(r2)
  805d24:	080e3cc0 	call	80e3cc <__malloc_unlock>
  805d28:	80800204 	addi	r2,r16,8
  805d2c:	003fe006 	br	805cb0 <__alt_mem_epcs_flash_controller_0+0xff7fccb0>
  805d30:	9c000217 	ldw	r16,8(r19)
  805d34:	00bfff04 	movi	r2,-4
  805d38:	85800117 	ldw	r22,4(r16)
  805d3c:	b0ac703a 	and	r22,r22,r2
  805d40:	b4400336 	bltu	r22,r17,805d50 <_malloc_r+0x344>
  805d44:	b445c83a 	sub	r2,r22,r17
  805d48:	00c003c4 	movi	r3,15
  805d4c:	18805d16 	blt	r3,r2,805ec4 <_malloc_r+0x4b8>
  805d50:	05c020b4 	movhi	r23,130
  805d54:	008020b4 	movhi	r2,130
  805d58:	10b0b304 	addi	r2,r2,-15668
  805d5c:	bdf07a04 	addi	r23,r23,-15896
  805d60:	15400017 	ldw	r21,0(r2)
  805d64:	b8c00017 	ldw	r3,0(r23)
  805d68:	00bfffc4 	movi	r2,-1
  805d6c:	858d883a 	add	r6,r16,r22
  805d70:	8d6b883a 	add	r21,r17,r21
  805d74:	1880ea26 	beq	r3,r2,806120 <_malloc_r+0x714>
  805d78:	ad4403c4 	addi	r21,r21,4111
  805d7c:	00bc0004 	movi	r2,-4096
  805d80:	a8aa703a 	and	r21,r21,r2
  805d84:	a80b883a 	mov	r5,r21
  805d88:	9009883a 	mov	r4,r18
  805d8c:	d9800015 	stw	r6,0(sp)
  805d90:	0807d580 	call	807d58 <_sbrk_r>
  805d94:	1029883a 	mov	r20,r2
  805d98:	00bfffc4 	movi	r2,-1
  805d9c:	d9800017 	ldw	r6,0(sp)
  805da0:	a080e826 	beq	r20,r2,806144 <_malloc_r+0x738>
  805da4:	a180a636 	bltu	r20,r6,806040 <_malloc_r+0x634>
  805da8:	070020b4 	movhi	fp,130
  805dac:	e730d504 	addi	fp,fp,-15532
  805db0:	e0800017 	ldw	r2,0(fp)
  805db4:	a887883a 	add	r3,r21,r2
  805db8:	e0c00015 	stw	r3,0(fp)
  805dbc:	3500e626 	beq	r6,r20,806158 <_malloc_r+0x74c>
  805dc0:	b9000017 	ldw	r4,0(r23)
  805dc4:	00bfffc4 	movi	r2,-1
  805dc8:	2080ee26 	beq	r4,r2,806184 <_malloc_r+0x778>
  805dcc:	a185c83a 	sub	r2,r20,r6
  805dd0:	10c5883a 	add	r2,r2,r3
  805dd4:	e0800015 	stw	r2,0(fp)
  805dd8:	a0c001cc 	andi	r3,r20,7
  805ddc:	1800bc26 	beq	r3,zero,8060d0 <_malloc_r+0x6c4>
  805de0:	a0e9c83a 	sub	r20,r20,r3
  805de4:	00840204 	movi	r2,4104
  805de8:	a5000204 	addi	r20,r20,8
  805dec:	10c7c83a 	sub	r3,r2,r3
  805df0:	a545883a 	add	r2,r20,r21
  805df4:	1083ffcc 	andi	r2,r2,4095
  805df8:	18abc83a 	sub	r21,r3,r2
  805dfc:	a80b883a 	mov	r5,r21
  805e00:	9009883a 	mov	r4,r18
  805e04:	0807d580 	call	807d58 <_sbrk_r>
  805e08:	00ffffc4 	movi	r3,-1
  805e0c:	10c0e126 	beq	r2,r3,806194 <_malloc_r+0x788>
  805e10:	1505c83a 	sub	r2,r2,r20
  805e14:	1545883a 	add	r2,r2,r21
  805e18:	10800054 	ori	r2,r2,1
  805e1c:	e0c00017 	ldw	r3,0(fp)
  805e20:	9d000215 	stw	r20,8(r19)
  805e24:	a0800115 	stw	r2,4(r20)
  805e28:	a8c7883a 	add	r3,r21,r3
  805e2c:	e0c00015 	stw	r3,0(fp)
  805e30:	84c00e26 	beq	r16,r19,805e6c <_malloc_r+0x460>
  805e34:	018003c4 	movi	r6,15
  805e38:	3580a72e 	bgeu	r6,r22,8060d8 <_malloc_r+0x6cc>
  805e3c:	81400117 	ldw	r5,4(r16)
  805e40:	013ffe04 	movi	r4,-8
  805e44:	b0bffd04 	addi	r2,r22,-12
  805e48:	1104703a 	and	r2,r2,r4
  805e4c:	2900004c 	andi	r4,r5,1
  805e50:	2088b03a 	or	r4,r4,r2
  805e54:	81000115 	stw	r4,4(r16)
  805e58:	01400144 	movi	r5,5
  805e5c:	8089883a 	add	r4,r16,r2
  805e60:	21400115 	stw	r5,4(r4)
  805e64:	21400215 	stw	r5,8(r4)
  805e68:	3080cd36 	bltu	r6,r2,8061a0 <_malloc_r+0x794>
  805e6c:	008020b4 	movhi	r2,130
  805e70:	10b0b204 	addi	r2,r2,-15672
  805e74:	11000017 	ldw	r4,0(r2)
  805e78:	20c0012e 	bgeu	r4,r3,805e80 <_malloc_r+0x474>
  805e7c:	10c00015 	stw	r3,0(r2)
  805e80:	008020b4 	movhi	r2,130
  805e84:	10b0b104 	addi	r2,r2,-15676
  805e88:	11000017 	ldw	r4,0(r2)
  805e8c:	9c000217 	ldw	r16,8(r19)
  805e90:	20c0012e 	bgeu	r4,r3,805e98 <_malloc_r+0x48c>
  805e94:	10c00015 	stw	r3,0(r2)
  805e98:	80c00117 	ldw	r3,4(r16)
  805e9c:	00bfff04 	movi	r2,-4
  805ea0:	1886703a 	and	r3,r3,r2
  805ea4:	1c45c83a 	sub	r2,r3,r17
  805ea8:	1c400236 	bltu	r3,r17,805eb4 <_malloc_r+0x4a8>
  805eac:	00c003c4 	movi	r3,15
  805eb0:	18800416 	blt	r3,r2,805ec4 <_malloc_r+0x4b8>
  805eb4:	9009883a 	mov	r4,r18
  805eb8:	080e3cc0 	call	80e3cc <__malloc_unlock>
  805ebc:	0005883a 	mov	r2,zero
  805ec0:	003f7b06 	br	805cb0 <__alt_mem_epcs_flash_controller_0+0xff7fccb0>
  805ec4:	88c00054 	ori	r3,r17,1
  805ec8:	80c00115 	stw	r3,4(r16)
  805ecc:	8463883a 	add	r17,r16,r17
  805ed0:	10800054 	ori	r2,r2,1
  805ed4:	9c400215 	stw	r17,8(r19)
  805ed8:	88800115 	stw	r2,4(r17)
  805edc:	9009883a 	mov	r4,r18
  805ee0:	080e3cc0 	call	80e3cc <__malloc_unlock>
  805ee4:	80800204 	addi	r2,r16,8
  805ee8:	003f7106 	br	805cb0 <__alt_mem_epcs_flash_controller_0+0xff7fccb0>
  805eec:	00c00504 	movi	r3,20
  805ef0:	18804a2e 	bgeu	r3,r2,80601c <_malloc_r+0x610>
  805ef4:	00c01504 	movi	r3,84
  805ef8:	18806e36 	bltu	r3,r2,8060b4 <_malloc_r+0x6a8>
  805efc:	8804d33a 	srli	r2,r17,12
  805f00:	12001bc4 	addi	r8,r2,111
  805f04:	11c01b84 	addi	r7,r2,110
  805f08:	4209883a 	add	r4,r8,r8
  805f0c:	003edd06 	br	805a84 <__alt_mem_epcs_flash_controller_0+0xff7fca84>
  805f10:	3804d27a 	srli	r2,r7,9
  805f14:	00c00104 	movi	r3,4
  805f18:	1880442e 	bgeu	r3,r2,80602c <_malloc_r+0x620>
  805f1c:	00c00504 	movi	r3,20
  805f20:	18808136 	bltu	r3,r2,806128 <_malloc_r+0x71c>
  805f24:	11401704 	addi	r5,r2,92
  805f28:	10c016c4 	addi	r3,r2,91
  805f2c:	294b883a 	add	r5,r5,r5
  805f30:	294b883a 	add	r5,r5,r5
  805f34:	294b883a 	add	r5,r5,r5
  805f38:	994b883a 	add	r5,r19,r5
  805f3c:	28800017 	ldw	r2,0(r5)
  805f40:	018020b4 	movhi	r6,130
  805f44:	297ffe04 	addi	r5,r5,-8
  805f48:	31aa3904 	addi	r6,r6,-22300
  805f4c:	28806526 	beq	r5,r2,8060e4 <_malloc_r+0x6d8>
  805f50:	01bfff04 	movi	r6,-4
  805f54:	10c00117 	ldw	r3,4(r2)
  805f58:	1986703a 	and	r3,r3,r6
  805f5c:	38c0022e 	bgeu	r7,r3,805f68 <_malloc_r+0x55c>
  805f60:	10800217 	ldw	r2,8(r2)
  805f64:	28bffb1e 	bne	r5,r2,805f54 <__alt_mem_epcs_flash_controller_0+0xff7fcf54>
  805f68:	11400317 	ldw	r5,12(r2)
  805f6c:	98c00117 	ldw	r3,4(r19)
  805f70:	81400315 	stw	r5,12(r16)
  805f74:	80800215 	stw	r2,8(r16)
  805f78:	2c000215 	stw	r16,8(r5)
  805f7c:	14000315 	stw	r16,12(r2)
  805f80:	003ef806 	br	805b64 <__alt_mem_epcs_flash_controller_0+0xff7fcb64>
  805f84:	88c00054 	ori	r3,r17,1
  805f88:	80c00115 	stw	r3,4(r16)
  805f8c:	8463883a 	add	r17,r16,r17
  805f90:	34400515 	stw	r17,20(r6)
  805f94:	34400415 	stw	r17,16(r6)
  805f98:	10c00054 	ori	r3,r2,1
  805f9c:	8a000315 	stw	r8,12(r17)
  805fa0:	8a000215 	stw	r8,8(r17)
  805fa4:	88c00115 	stw	r3,4(r17)
  805fa8:	88a3883a 	add	r17,r17,r2
  805fac:	88800015 	stw	r2,0(r17)
  805fb0:	9009883a 	mov	r4,r18
  805fb4:	080e3cc0 	call	80e3cc <__malloc_unlock>
  805fb8:	80800204 	addi	r2,r16,8
  805fbc:	003f3c06 	br	805cb0 <__alt_mem_epcs_flash_controller_0+0xff7fccb0>
  805fc0:	30c00117 	ldw	r3,4(r6)
  805fc4:	003ee706 	br	805b64 <__alt_mem_epcs_flash_controller_0+0xff7fcb64>
  805fc8:	5ac00044 	addi	r11,r11,1
  805fcc:	588000cc 	andi	r2,r11,3
  805fd0:	31800204 	addi	r6,r6,8
  805fd4:	103efd1e 	bne	r2,zero,805bcc <__alt_mem_epcs_flash_controller_0+0xff7fcbcc>
  805fd8:	00002406 	br	80606c <_malloc_r+0x660>
  805fdc:	14000317 	ldw	r16,12(r2)
  805fe0:	143f251e 	bne	r2,r16,805c78 <__alt_mem_epcs_flash_controller_0+0xff7fcc78>
  805fe4:	21000084 	addi	r4,r4,2
  805fe8:	003ebc06 	br	805adc <__alt_mem_epcs_flash_controller_0+0xff7fcadc>
  805fec:	8085883a 	add	r2,r16,r2
  805ff0:	10c00117 	ldw	r3,4(r2)
  805ff4:	81000317 	ldw	r4,12(r16)
  805ff8:	81400217 	ldw	r5,8(r16)
  805ffc:	18c00054 	ori	r3,r3,1
  806000:	10c00115 	stw	r3,4(r2)
  806004:	29000315 	stw	r4,12(r5)
  806008:	21400215 	stw	r5,8(r4)
  80600c:	9009883a 	mov	r4,r18
  806010:	080e3cc0 	call	80e3cc <__malloc_unlock>
  806014:	80800204 	addi	r2,r16,8
  806018:	003f2506 	br	805cb0 <__alt_mem_epcs_flash_controller_0+0xff7fccb0>
  80601c:	12001704 	addi	r8,r2,92
  806020:	11c016c4 	addi	r7,r2,91
  806024:	4209883a 	add	r4,r8,r8
  806028:	003e9606 	br	805a84 <__alt_mem_epcs_flash_controller_0+0xff7fca84>
  80602c:	3804d1ba 	srli	r2,r7,6
  806030:	11400e44 	addi	r5,r2,57
  806034:	10c00e04 	addi	r3,r2,56
  806038:	294b883a 	add	r5,r5,r5
  80603c:	003fbc06 	br	805f30 <__alt_mem_epcs_flash_controller_0+0xff7fcf30>
  806040:	84ff5926 	beq	r16,r19,805da8 <__alt_mem_epcs_flash_controller_0+0xff7fcda8>
  806044:	008020b4 	movhi	r2,130
  806048:	10aa3904 	addi	r2,r2,-22300
  80604c:	14000217 	ldw	r16,8(r2)
  806050:	00bfff04 	movi	r2,-4
  806054:	80c00117 	ldw	r3,4(r16)
  806058:	1886703a 	and	r3,r3,r2
  80605c:	003f9106 	br	805ea4 <__alt_mem_epcs_flash_controller_0+0xff7fcea4>
  806060:	60800217 	ldw	r2,8(r12)
  806064:	213fffc4 	addi	r4,r4,-1
  806068:	1300651e 	bne	r2,r12,806200 <_malloc_r+0x7f4>
  80606c:	208000cc 	andi	r2,r4,3
  806070:	633ffe04 	addi	r12,r12,-8
  806074:	103ffa1e 	bne	r2,zero,806060 <__alt_mem_epcs_flash_controller_0+0xff7fd060>
  806078:	98800117 	ldw	r2,4(r19)
  80607c:	0146303a 	nor	r3,zero,r5
  806080:	1884703a 	and	r2,r3,r2
  806084:	98800115 	stw	r2,4(r19)
  806088:	294b883a 	add	r5,r5,r5
  80608c:	117f2836 	bltu	r2,r5,805d30 <__alt_mem_epcs_flash_controller_0+0xff7fcd30>
  806090:	283f2726 	beq	r5,zero,805d30 <__alt_mem_epcs_flash_controller_0+0xff7fcd30>
  806094:	2886703a 	and	r3,r5,r2
  806098:	5809883a 	mov	r4,r11
  80609c:	183ec31e 	bne	r3,zero,805bac <__alt_mem_epcs_flash_controller_0+0xff7fcbac>
  8060a0:	294b883a 	add	r5,r5,r5
  8060a4:	2886703a 	and	r3,r5,r2
  8060a8:	21000104 	addi	r4,r4,4
  8060ac:	183ffc26 	beq	r3,zero,8060a0 <__alt_mem_epcs_flash_controller_0+0xff7fd0a0>
  8060b0:	003ebe06 	br	805bac <__alt_mem_epcs_flash_controller_0+0xff7fcbac>
  8060b4:	00c05504 	movi	r3,340
  8060b8:	18801236 	bltu	r3,r2,806104 <_malloc_r+0x6f8>
  8060bc:	8804d3fa 	srli	r2,r17,15
  8060c0:	12001e04 	addi	r8,r2,120
  8060c4:	11c01dc4 	addi	r7,r2,119
  8060c8:	4209883a 	add	r4,r8,r8
  8060cc:	003e6d06 	br	805a84 <__alt_mem_epcs_flash_controller_0+0xff7fca84>
  8060d0:	00c40004 	movi	r3,4096
  8060d4:	003f4606 	br	805df0 <__alt_mem_epcs_flash_controller_0+0xff7fcdf0>
  8060d8:	00800044 	movi	r2,1
  8060dc:	a0800115 	stw	r2,4(r20)
  8060e0:	003f7406 	br	805eb4 <__alt_mem_epcs_flash_controller_0+0xff7fceb4>
  8060e4:	1805d0ba 	srai	r2,r3,2
  8060e8:	01c00044 	movi	r7,1
  8060ec:	30c00117 	ldw	r3,4(r6)
  8060f0:	388e983a 	sll	r7,r7,r2
  8060f4:	2805883a 	mov	r2,r5
  8060f8:	38c6b03a 	or	r3,r7,r3
  8060fc:	30c00115 	stw	r3,4(r6)
  806100:	003f9b06 	br	805f70 <__alt_mem_epcs_flash_controller_0+0xff7fcf70>
  806104:	00c15504 	movi	r3,1364
  806108:	18801a36 	bltu	r3,r2,806174 <_malloc_r+0x768>
  80610c:	8804d4ba 	srli	r2,r17,18
  806110:	12001f44 	addi	r8,r2,125
  806114:	11c01f04 	addi	r7,r2,124
  806118:	4209883a 	add	r4,r8,r8
  80611c:	003e5906 	br	805a84 <__alt_mem_epcs_flash_controller_0+0xff7fca84>
  806120:	ad400404 	addi	r21,r21,16
  806124:	003f1706 	br	805d84 <__alt_mem_epcs_flash_controller_0+0xff7fcd84>
  806128:	00c01504 	movi	r3,84
  80612c:	18802336 	bltu	r3,r2,8061bc <_malloc_r+0x7b0>
  806130:	3804d33a 	srli	r2,r7,12
  806134:	11401bc4 	addi	r5,r2,111
  806138:	10c01b84 	addi	r3,r2,110
  80613c:	294b883a 	add	r5,r5,r5
  806140:	003f7b06 	br	805f30 <__alt_mem_epcs_flash_controller_0+0xff7fcf30>
  806144:	9c000217 	ldw	r16,8(r19)
  806148:	00bfff04 	movi	r2,-4
  80614c:	80c00117 	ldw	r3,4(r16)
  806150:	1886703a 	and	r3,r3,r2
  806154:	003f5306 	br	805ea4 <__alt_mem_epcs_flash_controller_0+0xff7fcea4>
  806158:	3083ffcc 	andi	r2,r6,4095
  80615c:	103f181e 	bne	r2,zero,805dc0 <__alt_mem_epcs_flash_controller_0+0xff7fcdc0>
  806160:	99000217 	ldw	r4,8(r19)
  806164:	b545883a 	add	r2,r22,r21
  806168:	10800054 	ori	r2,r2,1
  80616c:	20800115 	stw	r2,4(r4)
  806170:	003f3e06 	br	805e6c <__alt_mem_epcs_flash_controller_0+0xff7fce6c>
  806174:	01003f84 	movi	r4,254
  806178:	02001fc4 	movi	r8,127
  80617c:	01c01f84 	movi	r7,126
  806180:	003e4006 	br	805a84 <__alt_mem_epcs_flash_controller_0+0xff7fca84>
  806184:	008020b4 	movhi	r2,130
  806188:	10b07a04 	addi	r2,r2,-15896
  80618c:	15000015 	stw	r20,0(r2)
  806190:	003f1106 	br	805dd8 <__alt_mem_epcs_flash_controller_0+0xff7fcdd8>
  806194:	00800044 	movi	r2,1
  806198:	002b883a 	mov	r21,zero
  80619c:	003f1f06 	br	805e1c <__alt_mem_epcs_flash_controller_0+0xff7fce1c>
  8061a0:	81400204 	addi	r5,r16,8
  8061a4:	9009883a 	mov	r4,r18
  8061a8:	0804e140 	call	804e14 <_free_r>
  8061ac:	008020b4 	movhi	r2,130
  8061b0:	10b0d504 	addi	r2,r2,-15532
  8061b4:	10c00017 	ldw	r3,0(r2)
  8061b8:	003f2c06 	br	805e6c <__alt_mem_epcs_flash_controller_0+0xff7fce6c>
  8061bc:	00c05504 	movi	r3,340
  8061c0:	18800536 	bltu	r3,r2,8061d8 <_malloc_r+0x7cc>
  8061c4:	3804d3fa 	srli	r2,r7,15
  8061c8:	11401e04 	addi	r5,r2,120
  8061cc:	10c01dc4 	addi	r3,r2,119
  8061d0:	294b883a 	add	r5,r5,r5
  8061d4:	003f5606 	br	805f30 <__alt_mem_epcs_flash_controller_0+0xff7fcf30>
  8061d8:	00c15504 	movi	r3,1364
  8061dc:	18800536 	bltu	r3,r2,8061f4 <_malloc_r+0x7e8>
  8061e0:	3804d4ba 	srli	r2,r7,18
  8061e4:	11401f44 	addi	r5,r2,125
  8061e8:	10c01f04 	addi	r3,r2,124
  8061ec:	294b883a 	add	r5,r5,r5
  8061f0:	003f4f06 	br	805f30 <__alt_mem_epcs_flash_controller_0+0xff7fcf30>
  8061f4:	01403f84 	movi	r5,254
  8061f8:	00c01f84 	movi	r3,126
  8061fc:	003f4c06 	br	805f30 <__alt_mem_epcs_flash_controller_0+0xff7fcf30>
  806200:	98800117 	ldw	r2,4(r19)
  806204:	003fa006 	br	806088 <__alt_mem_epcs_flash_controller_0+0xff7fd088>
  806208:	8808d0fa 	srli	r4,r17,3
  80620c:	20800044 	addi	r2,r4,1
  806210:	1085883a 	add	r2,r2,r2
  806214:	003e9006 	br	805c58 <__alt_mem_epcs_flash_controller_0+0xff7fcc58>

00806218 <memchr>:
  806218:	208000cc 	andi	r2,r4,3
  80621c:	280f883a 	mov	r7,r5
  806220:	10003426 	beq	r2,zero,8062f4 <memchr+0xdc>
  806224:	30bfffc4 	addi	r2,r6,-1
  806228:	30001a26 	beq	r6,zero,806294 <memchr+0x7c>
  80622c:	20c00003 	ldbu	r3,0(r4)
  806230:	29803fcc 	andi	r6,r5,255
  806234:	30c0051e 	bne	r6,r3,80624c <memchr+0x34>
  806238:	00001806 	br	80629c <memchr+0x84>
  80623c:	10001526 	beq	r2,zero,806294 <memchr+0x7c>
  806240:	20c00003 	ldbu	r3,0(r4)
  806244:	10bfffc4 	addi	r2,r2,-1
  806248:	30c01426 	beq	r6,r3,80629c <memchr+0x84>
  80624c:	21000044 	addi	r4,r4,1
  806250:	20c000cc 	andi	r3,r4,3
  806254:	183ff91e 	bne	r3,zero,80623c <__alt_mem_epcs_flash_controller_0+0xff7fd23c>
  806258:	020000c4 	movi	r8,3
  80625c:	40801136 	bltu	r8,r2,8062a4 <memchr+0x8c>
  806260:	10000c26 	beq	r2,zero,806294 <memchr+0x7c>
  806264:	20c00003 	ldbu	r3,0(r4)
  806268:	29403fcc 	andi	r5,r5,255
  80626c:	28c00b26 	beq	r5,r3,80629c <memchr+0x84>
  806270:	20c00044 	addi	r3,r4,1
  806274:	39803fcc 	andi	r6,r7,255
  806278:	2089883a 	add	r4,r4,r2
  80627c:	00000306 	br	80628c <memchr+0x74>
  806280:	18c00044 	addi	r3,r3,1
  806284:	197fffc3 	ldbu	r5,-1(r3)
  806288:	31400526 	beq	r6,r5,8062a0 <memchr+0x88>
  80628c:	1805883a 	mov	r2,r3
  806290:	20fffb1e 	bne	r4,r3,806280 <__alt_mem_epcs_flash_controller_0+0xff7fd280>
  806294:	0005883a 	mov	r2,zero
  806298:	f800283a 	ret
  80629c:	2005883a 	mov	r2,r4
  8062a0:	f800283a 	ret
  8062a4:	28c03fcc 	andi	r3,r5,255
  8062a8:	1812923a 	slli	r9,r3,8
  8062ac:	02ffbff4 	movhi	r11,65279
  8062b0:	02a02074 	movhi	r10,32897
  8062b4:	48d2b03a 	or	r9,r9,r3
  8062b8:	4806943a 	slli	r3,r9,16
  8062bc:	5affbfc4 	addi	r11,r11,-257
  8062c0:	52a02004 	addi	r10,r10,-32640
  8062c4:	48d2b03a 	or	r9,r9,r3
  8062c8:	20c00017 	ldw	r3,0(r4)
  8062cc:	48c6f03a 	xor	r3,r9,r3
  8062d0:	1acd883a 	add	r6,r3,r11
  8062d4:	00c6303a 	nor	r3,zero,r3
  8062d8:	30c6703a 	and	r3,r6,r3
  8062dc:	1a86703a 	and	r3,r3,r10
  8062e0:	183fe01e 	bne	r3,zero,806264 <__alt_mem_epcs_flash_controller_0+0xff7fd264>
  8062e4:	10bfff04 	addi	r2,r2,-4
  8062e8:	21000104 	addi	r4,r4,4
  8062ec:	40bff636 	bltu	r8,r2,8062c8 <__alt_mem_epcs_flash_controller_0+0xff7fd2c8>
  8062f0:	003fdb06 	br	806260 <__alt_mem_epcs_flash_controller_0+0xff7fd260>
  8062f4:	3005883a 	mov	r2,r6
  8062f8:	003fd706 	br	806258 <__alt_mem_epcs_flash_controller_0+0xff7fd258>

008062fc <memcpy>:
  8062fc:	defffd04 	addi	sp,sp,-12
  806300:	dfc00215 	stw	ra,8(sp)
  806304:	dc400115 	stw	r17,4(sp)
  806308:	dc000015 	stw	r16,0(sp)
  80630c:	00c003c4 	movi	r3,15
  806310:	2005883a 	mov	r2,r4
  806314:	1980452e 	bgeu	r3,r6,80642c <memcpy+0x130>
  806318:	2906b03a 	or	r3,r5,r4
  80631c:	18c000cc 	andi	r3,r3,3
  806320:	1800441e 	bne	r3,zero,806434 <memcpy+0x138>
  806324:	347ffc04 	addi	r17,r6,-16
  806328:	8822d13a 	srli	r17,r17,4
  80632c:	28c00104 	addi	r3,r5,4
  806330:	23400104 	addi	r13,r4,4
  806334:	8820913a 	slli	r16,r17,4
  806338:	2b000204 	addi	r12,r5,8
  80633c:	22c00204 	addi	r11,r4,8
  806340:	84000504 	addi	r16,r16,20
  806344:	2a800304 	addi	r10,r5,12
  806348:	22400304 	addi	r9,r4,12
  80634c:	2c21883a 	add	r16,r5,r16
  806350:	2811883a 	mov	r8,r5
  806354:	200f883a 	mov	r7,r4
  806358:	41000017 	ldw	r4,0(r8)
  80635c:	1fc00017 	ldw	ra,0(r3)
  806360:	63c00017 	ldw	r15,0(r12)
  806364:	39000015 	stw	r4,0(r7)
  806368:	53800017 	ldw	r14,0(r10)
  80636c:	6fc00015 	stw	ra,0(r13)
  806370:	5bc00015 	stw	r15,0(r11)
  806374:	4b800015 	stw	r14,0(r9)
  806378:	18c00404 	addi	r3,r3,16
  80637c:	39c00404 	addi	r7,r7,16
  806380:	42000404 	addi	r8,r8,16
  806384:	6b400404 	addi	r13,r13,16
  806388:	63000404 	addi	r12,r12,16
  80638c:	5ac00404 	addi	r11,r11,16
  806390:	52800404 	addi	r10,r10,16
  806394:	4a400404 	addi	r9,r9,16
  806398:	1c3fef1e 	bne	r3,r16,806358 <__alt_mem_epcs_flash_controller_0+0xff7fd358>
  80639c:	89c00044 	addi	r7,r17,1
  8063a0:	380e913a 	slli	r7,r7,4
  8063a4:	310003cc 	andi	r4,r6,15
  8063a8:	02c000c4 	movi	r11,3
  8063ac:	11c7883a 	add	r3,r2,r7
  8063b0:	29cb883a 	add	r5,r5,r7
  8063b4:	5900212e 	bgeu	r11,r4,80643c <memcpy+0x140>
  8063b8:	1813883a 	mov	r9,r3
  8063bc:	2811883a 	mov	r8,r5
  8063c0:	200f883a 	mov	r7,r4
  8063c4:	42800017 	ldw	r10,0(r8)
  8063c8:	4a400104 	addi	r9,r9,4
  8063cc:	39ffff04 	addi	r7,r7,-4
  8063d0:	4abfff15 	stw	r10,-4(r9)
  8063d4:	42000104 	addi	r8,r8,4
  8063d8:	59fffa36 	bltu	r11,r7,8063c4 <__alt_mem_epcs_flash_controller_0+0xff7fd3c4>
  8063dc:	213fff04 	addi	r4,r4,-4
  8063e0:	2008d0ba 	srli	r4,r4,2
  8063e4:	318000cc 	andi	r6,r6,3
  8063e8:	21000044 	addi	r4,r4,1
  8063ec:	2109883a 	add	r4,r4,r4
  8063f0:	2109883a 	add	r4,r4,r4
  8063f4:	1907883a 	add	r3,r3,r4
  8063f8:	290b883a 	add	r5,r5,r4
  8063fc:	30000626 	beq	r6,zero,806418 <memcpy+0x11c>
  806400:	198d883a 	add	r6,r3,r6
  806404:	29c00003 	ldbu	r7,0(r5)
  806408:	18c00044 	addi	r3,r3,1
  80640c:	29400044 	addi	r5,r5,1
  806410:	19ffffc5 	stb	r7,-1(r3)
  806414:	19bffb1e 	bne	r3,r6,806404 <__alt_mem_epcs_flash_controller_0+0xff7fd404>
  806418:	dfc00217 	ldw	ra,8(sp)
  80641c:	dc400117 	ldw	r17,4(sp)
  806420:	dc000017 	ldw	r16,0(sp)
  806424:	dec00304 	addi	sp,sp,12
  806428:	f800283a 	ret
  80642c:	2007883a 	mov	r3,r4
  806430:	003ff206 	br	8063fc <__alt_mem_epcs_flash_controller_0+0xff7fd3fc>
  806434:	2007883a 	mov	r3,r4
  806438:	003ff106 	br	806400 <__alt_mem_epcs_flash_controller_0+0xff7fd400>
  80643c:	200d883a 	mov	r6,r4
  806440:	003fee06 	br	8063fc <__alt_mem_epcs_flash_controller_0+0xff7fd3fc>

00806444 <memmove>:
  806444:	2005883a 	mov	r2,r4
  806448:	29000b2e 	bgeu	r5,r4,806478 <memmove+0x34>
  80644c:	298f883a 	add	r7,r5,r6
  806450:	21c0092e 	bgeu	r4,r7,806478 <memmove+0x34>
  806454:	2187883a 	add	r3,r4,r6
  806458:	198bc83a 	sub	r5,r3,r6
  80645c:	30004826 	beq	r6,zero,806580 <memmove+0x13c>
  806460:	39ffffc4 	addi	r7,r7,-1
  806464:	39000003 	ldbu	r4,0(r7)
  806468:	18ffffc4 	addi	r3,r3,-1
  80646c:	19000005 	stb	r4,0(r3)
  806470:	28fffb1e 	bne	r5,r3,806460 <__alt_mem_epcs_flash_controller_0+0xff7fd460>
  806474:	f800283a 	ret
  806478:	00c003c4 	movi	r3,15
  80647c:	1980412e 	bgeu	r3,r6,806584 <memmove+0x140>
  806480:	2886b03a 	or	r3,r5,r2
  806484:	18c000cc 	andi	r3,r3,3
  806488:	1800401e 	bne	r3,zero,80658c <memmove+0x148>
  80648c:	33fffc04 	addi	r15,r6,-16
  806490:	781ed13a 	srli	r15,r15,4
  806494:	28c00104 	addi	r3,r5,4
  806498:	13400104 	addi	r13,r2,4
  80649c:	781c913a 	slli	r14,r15,4
  8064a0:	2b000204 	addi	r12,r5,8
  8064a4:	12c00204 	addi	r11,r2,8
  8064a8:	73800504 	addi	r14,r14,20
  8064ac:	2a800304 	addi	r10,r5,12
  8064b0:	12400304 	addi	r9,r2,12
  8064b4:	2b9d883a 	add	r14,r5,r14
  8064b8:	2811883a 	mov	r8,r5
  8064bc:	100f883a 	mov	r7,r2
  8064c0:	41000017 	ldw	r4,0(r8)
  8064c4:	39c00404 	addi	r7,r7,16
  8064c8:	18c00404 	addi	r3,r3,16
  8064cc:	393ffc15 	stw	r4,-16(r7)
  8064d0:	193ffc17 	ldw	r4,-16(r3)
  8064d4:	6b400404 	addi	r13,r13,16
  8064d8:	5ac00404 	addi	r11,r11,16
  8064dc:	693ffc15 	stw	r4,-16(r13)
  8064e0:	61000017 	ldw	r4,0(r12)
  8064e4:	4a400404 	addi	r9,r9,16
  8064e8:	42000404 	addi	r8,r8,16
  8064ec:	593ffc15 	stw	r4,-16(r11)
  8064f0:	51000017 	ldw	r4,0(r10)
  8064f4:	63000404 	addi	r12,r12,16
  8064f8:	52800404 	addi	r10,r10,16
  8064fc:	493ffc15 	stw	r4,-16(r9)
  806500:	1bbfef1e 	bne	r3,r14,8064c0 <__alt_mem_epcs_flash_controller_0+0xff7fd4c0>
  806504:	79000044 	addi	r4,r15,1
  806508:	2008913a 	slli	r4,r4,4
  80650c:	328003cc 	andi	r10,r6,15
  806510:	02c000c4 	movi	r11,3
  806514:	1107883a 	add	r3,r2,r4
  806518:	290b883a 	add	r5,r5,r4
  80651c:	5a801e2e 	bgeu	r11,r10,806598 <memmove+0x154>
  806520:	1813883a 	mov	r9,r3
  806524:	2811883a 	mov	r8,r5
  806528:	500f883a 	mov	r7,r10
  80652c:	41000017 	ldw	r4,0(r8)
  806530:	4a400104 	addi	r9,r9,4
  806534:	39ffff04 	addi	r7,r7,-4
  806538:	493fff15 	stw	r4,-4(r9)
  80653c:	42000104 	addi	r8,r8,4
  806540:	59fffa36 	bltu	r11,r7,80652c <__alt_mem_epcs_flash_controller_0+0xff7fd52c>
  806544:	513fff04 	addi	r4,r10,-4
  806548:	2008d0ba 	srli	r4,r4,2
  80654c:	318000cc 	andi	r6,r6,3
  806550:	21000044 	addi	r4,r4,1
  806554:	2109883a 	add	r4,r4,r4
  806558:	2109883a 	add	r4,r4,r4
  80655c:	1907883a 	add	r3,r3,r4
  806560:	290b883a 	add	r5,r5,r4
  806564:	30000b26 	beq	r6,zero,806594 <memmove+0x150>
  806568:	198d883a 	add	r6,r3,r6
  80656c:	29c00003 	ldbu	r7,0(r5)
  806570:	18c00044 	addi	r3,r3,1
  806574:	29400044 	addi	r5,r5,1
  806578:	19ffffc5 	stb	r7,-1(r3)
  80657c:	19bffb1e 	bne	r3,r6,80656c <__alt_mem_epcs_flash_controller_0+0xff7fd56c>
  806580:	f800283a 	ret
  806584:	1007883a 	mov	r3,r2
  806588:	003ff606 	br	806564 <__alt_mem_epcs_flash_controller_0+0xff7fd564>
  80658c:	1007883a 	mov	r3,r2
  806590:	003ff506 	br	806568 <__alt_mem_epcs_flash_controller_0+0xff7fd568>
  806594:	f800283a 	ret
  806598:	500d883a 	mov	r6,r10
  80659c:	003ff106 	br	806564 <__alt_mem_epcs_flash_controller_0+0xff7fd564>

008065a0 <memset>:
  8065a0:	20c000cc 	andi	r3,r4,3
  8065a4:	2005883a 	mov	r2,r4
  8065a8:	18004426 	beq	r3,zero,8066bc <memset+0x11c>
  8065ac:	31ffffc4 	addi	r7,r6,-1
  8065b0:	30004026 	beq	r6,zero,8066b4 <memset+0x114>
  8065b4:	2813883a 	mov	r9,r5
  8065b8:	200d883a 	mov	r6,r4
  8065bc:	2007883a 	mov	r3,r4
  8065c0:	00000406 	br	8065d4 <memset+0x34>
  8065c4:	3a3fffc4 	addi	r8,r7,-1
  8065c8:	31800044 	addi	r6,r6,1
  8065cc:	38003926 	beq	r7,zero,8066b4 <memset+0x114>
  8065d0:	400f883a 	mov	r7,r8
  8065d4:	18c00044 	addi	r3,r3,1
  8065d8:	32400005 	stb	r9,0(r6)
  8065dc:	1a0000cc 	andi	r8,r3,3
  8065e0:	403ff81e 	bne	r8,zero,8065c4 <__alt_mem_epcs_flash_controller_0+0xff7fd5c4>
  8065e4:	010000c4 	movi	r4,3
  8065e8:	21c02d2e 	bgeu	r4,r7,8066a0 <memset+0x100>
  8065ec:	29003fcc 	andi	r4,r5,255
  8065f0:	200c923a 	slli	r6,r4,8
  8065f4:	3108b03a 	or	r4,r6,r4
  8065f8:	200c943a 	slli	r6,r4,16
  8065fc:	218cb03a 	or	r6,r4,r6
  806600:	010003c4 	movi	r4,15
  806604:	21c0182e 	bgeu	r4,r7,806668 <memset+0xc8>
  806608:	3b3ffc04 	addi	r12,r7,-16
  80660c:	6018d13a 	srli	r12,r12,4
  806610:	1a000104 	addi	r8,r3,4
  806614:	1ac00204 	addi	r11,r3,8
  806618:	6008913a 	slli	r4,r12,4
  80661c:	1a800304 	addi	r10,r3,12
  806620:	1813883a 	mov	r9,r3
  806624:	21000504 	addi	r4,r4,20
  806628:	1909883a 	add	r4,r3,r4
  80662c:	49800015 	stw	r6,0(r9)
  806630:	41800015 	stw	r6,0(r8)
  806634:	59800015 	stw	r6,0(r11)
  806638:	51800015 	stw	r6,0(r10)
  80663c:	42000404 	addi	r8,r8,16
  806640:	4a400404 	addi	r9,r9,16
  806644:	5ac00404 	addi	r11,r11,16
  806648:	52800404 	addi	r10,r10,16
  80664c:	413ff71e 	bne	r8,r4,80662c <__alt_mem_epcs_flash_controller_0+0xff7fd62c>
  806650:	63000044 	addi	r12,r12,1
  806654:	6018913a 	slli	r12,r12,4
  806658:	39c003cc 	andi	r7,r7,15
  80665c:	010000c4 	movi	r4,3
  806660:	1b07883a 	add	r3,r3,r12
  806664:	21c00e2e 	bgeu	r4,r7,8066a0 <memset+0x100>
  806668:	1813883a 	mov	r9,r3
  80666c:	3811883a 	mov	r8,r7
  806670:	010000c4 	movi	r4,3
  806674:	49800015 	stw	r6,0(r9)
  806678:	423fff04 	addi	r8,r8,-4
  80667c:	4a400104 	addi	r9,r9,4
  806680:	223ffc36 	bltu	r4,r8,806674 <__alt_mem_epcs_flash_controller_0+0xff7fd674>
  806684:	393fff04 	addi	r4,r7,-4
  806688:	2008d0ba 	srli	r4,r4,2
  80668c:	39c000cc 	andi	r7,r7,3
  806690:	21000044 	addi	r4,r4,1
  806694:	2109883a 	add	r4,r4,r4
  806698:	2109883a 	add	r4,r4,r4
  80669c:	1907883a 	add	r3,r3,r4
  8066a0:	38000526 	beq	r7,zero,8066b8 <memset+0x118>
  8066a4:	19cf883a 	add	r7,r3,r7
  8066a8:	19400005 	stb	r5,0(r3)
  8066ac:	18c00044 	addi	r3,r3,1
  8066b0:	38fffd1e 	bne	r7,r3,8066a8 <__alt_mem_epcs_flash_controller_0+0xff7fd6a8>
  8066b4:	f800283a 	ret
  8066b8:	f800283a 	ret
  8066bc:	2007883a 	mov	r3,r4
  8066c0:	300f883a 	mov	r7,r6
  8066c4:	003fc706 	br	8065e4 <__alt_mem_epcs_flash_controller_0+0xff7fd5e4>

008066c8 <_Balloc>:
  8066c8:	20801317 	ldw	r2,76(r4)
  8066cc:	defffc04 	addi	sp,sp,-16
  8066d0:	dc400115 	stw	r17,4(sp)
  8066d4:	dc000015 	stw	r16,0(sp)
  8066d8:	dfc00315 	stw	ra,12(sp)
  8066dc:	dc800215 	stw	r18,8(sp)
  8066e0:	2023883a 	mov	r17,r4
  8066e4:	2821883a 	mov	r16,r5
  8066e8:	10000f26 	beq	r2,zero,806728 <_Balloc+0x60>
  8066ec:	8407883a 	add	r3,r16,r16
  8066f0:	18c7883a 	add	r3,r3,r3
  8066f4:	10c7883a 	add	r3,r2,r3
  8066f8:	18800017 	ldw	r2,0(r3)
  8066fc:	10001126 	beq	r2,zero,806744 <_Balloc+0x7c>
  806700:	11000017 	ldw	r4,0(r2)
  806704:	19000015 	stw	r4,0(r3)
  806708:	10000415 	stw	zero,16(r2)
  80670c:	10000315 	stw	zero,12(r2)
  806710:	dfc00317 	ldw	ra,12(sp)
  806714:	dc800217 	ldw	r18,8(sp)
  806718:	dc400117 	ldw	r17,4(sp)
  80671c:	dc000017 	ldw	r16,0(sp)
  806720:	dec00404 	addi	sp,sp,16
  806724:	f800283a 	ret
  806728:	01800844 	movi	r6,33
  80672c:	01400104 	movi	r5,4
  806730:	08097700 	call	809770 <_calloc_r>
  806734:	88801315 	stw	r2,76(r17)
  806738:	103fec1e 	bne	r2,zero,8066ec <__alt_mem_epcs_flash_controller_0+0xff7fd6ec>
  80673c:	0005883a 	mov	r2,zero
  806740:	003ff306 	br	806710 <__alt_mem_epcs_flash_controller_0+0xff7fd710>
  806744:	01400044 	movi	r5,1
  806748:	2c24983a 	sll	r18,r5,r16
  80674c:	8809883a 	mov	r4,r17
  806750:	91800144 	addi	r6,r18,5
  806754:	318d883a 	add	r6,r6,r6
  806758:	318d883a 	add	r6,r6,r6
  80675c:	08097700 	call	809770 <_calloc_r>
  806760:	103ff626 	beq	r2,zero,80673c <__alt_mem_epcs_flash_controller_0+0xff7fd73c>
  806764:	14000115 	stw	r16,4(r2)
  806768:	14800215 	stw	r18,8(r2)
  80676c:	003fe606 	br	806708 <__alt_mem_epcs_flash_controller_0+0xff7fd708>

00806770 <_Bfree>:
  806770:	28000826 	beq	r5,zero,806794 <_Bfree+0x24>
  806774:	28c00117 	ldw	r3,4(r5)
  806778:	20801317 	ldw	r2,76(r4)
  80677c:	18c7883a 	add	r3,r3,r3
  806780:	18c7883a 	add	r3,r3,r3
  806784:	10c5883a 	add	r2,r2,r3
  806788:	10c00017 	ldw	r3,0(r2)
  80678c:	28c00015 	stw	r3,0(r5)
  806790:	11400015 	stw	r5,0(r2)
  806794:	f800283a 	ret

00806798 <__multadd>:
  806798:	defff704 	addi	sp,sp,-36
  80679c:	dc800215 	stw	r18,8(sp)
  8067a0:	2c800417 	ldw	r18,16(r5)
  8067a4:	dd800615 	stw	r22,24(sp)
  8067a8:	dd400515 	stw	r21,20(sp)
  8067ac:	dd000415 	stw	r20,16(sp)
  8067b0:	dcc00315 	stw	r19,12(sp)
  8067b4:	dc400115 	stw	r17,4(sp)
  8067b8:	dc000015 	stw	r16,0(sp)
  8067bc:	dfc00815 	stw	ra,32(sp)
  8067c0:	ddc00715 	stw	r23,28(sp)
  8067c4:	2827883a 	mov	r19,r5
  8067c8:	2029883a 	mov	r20,r4
  8067cc:	3023883a 	mov	r17,r6
  8067d0:	3821883a 	mov	r16,r7
  8067d4:	2d400504 	addi	r21,r5,20
  8067d8:	002d883a 	mov	r22,zero
  8067dc:	adc00017 	ldw	r23,0(r21)
  8067e0:	880b883a 	mov	r5,r17
  8067e4:	ad400104 	addi	r21,r21,4
  8067e8:	b93fffcc 	andi	r4,r23,65535
  8067ec:	080ad7c0 	call	80ad7c <__mulsi3>
  8067f0:	b808d43a 	srli	r4,r23,16
  8067f4:	880b883a 	mov	r5,r17
  8067f8:	1421883a 	add	r16,r2,r16
  8067fc:	080ad7c0 	call	80ad7c <__mulsi3>
  806800:	800ed43a 	srli	r7,r16,16
  806804:	80ffffcc 	andi	r3,r16,65535
  806808:	b5800044 	addi	r22,r22,1
  80680c:	11c5883a 	add	r2,r2,r7
  806810:	100e943a 	slli	r7,r2,16
  806814:	1020d43a 	srli	r16,r2,16
  806818:	38c7883a 	add	r3,r7,r3
  80681c:	a8ffff15 	stw	r3,-4(r21)
  806820:	b4bfee16 	blt	r22,r18,8067dc <__alt_mem_epcs_flash_controller_0+0xff7fd7dc>
  806824:	80000926 	beq	r16,zero,80684c <__multadd+0xb4>
  806828:	98800217 	ldw	r2,8(r19)
  80682c:	9080130e 	bge	r18,r2,80687c <__multadd+0xe4>
  806830:	90800144 	addi	r2,r18,5
  806834:	1085883a 	add	r2,r2,r2
  806838:	1085883a 	add	r2,r2,r2
  80683c:	9885883a 	add	r2,r19,r2
  806840:	14000015 	stw	r16,0(r2)
  806844:	94800044 	addi	r18,r18,1
  806848:	9c800415 	stw	r18,16(r19)
  80684c:	9805883a 	mov	r2,r19
  806850:	dfc00817 	ldw	ra,32(sp)
  806854:	ddc00717 	ldw	r23,28(sp)
  806858:	dd800617 	ldw	r22,24(sp)
  80685c:	dd400517 	ldw	r21,20(sp)
  806860:	dd000417 	ldw	r20,16(sp)
  806864:	dcc00317 	ldw	r19,12(sp)
  806868:	dc800217 	ldw	r18,8(sp)
  80686c:	dc400117 	ldw	r17,4(sp)
  806870:	dc000017 	ldw	r16,0(sp)
  806874:	dec00904 	addi	sp,sp,36
  806878:	f800283a 	ret
  80687c:	99400117 	ldw	r5,4(r19)
  806880:	a009883a 	mov	r4,r20
  806884:	29400044 	addi	r5,r5,1
  806888:	08066c80 	call	8066c8 <_Balloc>
  80688c:	99800417 	ldw	r6,16(r19)
  806890:	99400304 	addi	r5,r19,12
  806894:	11000304 	addi	r4,r2,12
  806898:	31800084 	addi	r6,r6,2
  80689c:	318d883a 	add	r6,r6,r6
  8068a0:	318d883a 	add	r6,r6,r6
  8068a4:	1023883a 	mov	r17,r2
  8068a8:	08062fc0 	call	8062fc <memcpy>
  8068ac:	98000a26 	beq	r19,zero,8068d8 <__multadd+0x140>
  8068b0:	98c00117 	ldw	r3,4(r19)
  8068b4:	a0801317 	ldw	r2,76(r20)
  8068b8:	18c7883a 	add	r3,r3,r3
  8068bc:	18c7883a 	add	r3,r3,r3
  8068c0:	10c5883a 	add	r2,r2,r3
  8068c4:	10c00017 	ldw	r3,0(r2)
  8068c8:	98c00015 	stw	r3,0(r19)
  8068cc:	14c00015 	stw	r19,0(r2)
  8068d0:	8827883a 	mov	r19,r17
  8068d4:	003fd606 	br	806830 <__alt_mem_epcs_flash_controller_0+0xff7fd830>
  8068d8:	8827883a 	mov	r19,r17
  8068dc:	003fd406 	br	806830 <__alt_mem_epcs_flash_controller_0+0xff7fd830>

008068e0 <__s2b>:
  8068e0:	defff904 	addi	sp,sp,-28
  8068e4:	dc400115 	stw	r17,4(sp)
  8068e8:	dc000015 	stw	r16,0(sp)
  8068ec:	2023883a 	mov	r17,r4
  8068f0:	2821883a 	mov	r16,r5
  8068f4:	39000204 	addi	r4,r7,8
  8068f8:	01400244 	movi	r5,9
  8068fc:	dcc00315 	stw	r19,12(sp)
  806900:	dc800215 	stw	r18,8(sp)
  806904:	dfc00615 	stw	ra,24(sp)
  806908:	dd400515 	stw	r21,20(sp)
  80690c:	dd000415 	stw	r20,16(sp)
  806910:	3825883a 	mov	r18,r7
  806914:	3027883a 	mov	r19,r6
  806918:	080abc80 	call	80abc8 <__divsi3>
  80691c:	00c00044 	movi	r3,1
  806920:	000b883a 	mov	r5,zero
  806924:	1880030e 	bge	r3,r2,806934 <__s2b+0x54>
  806928:	18c7883a 	add	r3,r3,r3
  80692c:	29400044 	addi	r5,r5,1
  806930:	18bffd16 	blt	r3,r2,806928 <__alt_mem_epcs_flash_controller_0+0xff7fd928>
  806934:	8809883a 	mov	r4,r17
  806938:	08066c80 	call	8066c8 <_Balloc>
  80693c:	d8c00717 	ldw	r3,28(sp)
  806940:	10c00515 	stw	r3,20(r2)
  806944:	00c00044 	movi	r3,1
  806948:	10c00415 	stw	r3,16(r2)
  80694c:	00c00244 	movi	r3,9
  806950:	1cc0210e 	bge	r3,r19,8069d8 <__s2b+0xf8>
  806954:	80eb883a 	add	r21,r16,r3
  806958:	a829883a 	mov	r20,r21
  80695c:	84e1883a 	add	r16,r16,r19
  806960:	a1c00007 	ldb	r7,0(r20)
  806964:	01800284 	movi	r6,10
  806968:	a5000044 	addi	r20,r20,1
  80696c:	100b883a 	mov	r5,r2
  806970:	39fff404 	addi	r7,r7,-48
  806974:	8809883a 	mov	r4,r17
  806978:	08067980 	call	806798 <__multadd>
  80697c:	a43ff81e 	bne	r20,r16,806960 <__alt_mem_epcs_flash_controller_0+0xff7fd960>
  806980:	ace1883a 	add	r16,r21,r19
  806984:	843ffe04 	addi	r16,r16,-8
  806988:	9c800a0e 	bge	r19,r18,8069b4 <__s2b+0xd4>
  80698c:	94e5c83a 	sub	r18,r18,r19
  806990:	84a5883a 	add	r18,r16,r18
  806994:	81c00007 	ldb	r7,0(r16)
  806998:	01800284 	movi	r6,10
  80699c:	84000044 	addi	r16,r16,1
  8069a0:	100b883a 	mov	r5,r2
  8069a4:	39fff404 	addi	r7,r7,-48
  8069a8:	8809883a 	mov	r4,r17
  8069ac:	08067980 	call	806798 <__multadd>
  8069b0:	84bff81e 	bne	r16,r18,806994 <__alt_mem_epcs_flash_controller_0+0xff7fd994>
  8069b4:	dfc00617 	ldw	ra,24(sp)
  8069b8:	dd400517 	ldw	r21,20(sp)
  8069bc:	dd000417 	ldw	r20,16(sp)
  8069c0:	dcc00317 	ldw	r19,12(sp)
  8069c4:	dc800217 	ldw	r18,8(sp)
  8069c8:	dc400117 	ldw	r17,4(sp)
  8069cc:	dc000017 	ldw	r16,0(sp)
  8069d0:	dec00704 	addi	sp,sp,28
  8069d4:	f800283a 	ret
  8069d8:	84000284 	addi	r16,r16,10
  8069dc:	1827883a 	mov	r19,r3
  8069e0:	003fe906 	br	806988 <__alt_mem_epcs_flash_controller_0+0xff7fd988>

008069e4 <__hi0bits>:
  8069e4:	20bfffec 	andhi	r2,r4,65535
  8069e8:	1000141e 	bne	r2,zero,806a3c <__hi0bits+0x58>
  8069ec:	2008943a 	slli	r4,r4,16
  8069f0:	00800404 	movi	r2,16
  8069f4:	20ffc02c 	andhi	r3,r4,65280
  8069f8:	1800021e 	bne	r3,zero,806a04 <__hi0bits+0x20>
  8069fc:	2008923a 	slli	r4,r4,8
  806a00:	10800204 	addi	r2,r2,8
  806a04:	20fc002c 	andhi	r3,r4,61440
  806a08:	1800021e 	bne	r3,zero,806a14 <__hi0bits+0x30>
  806a0c:	2008913a 	slli	r4,r4,4
  806a10:	10800104 	addi	r2,r2,4
  806a14:	20f0002c 	andhi	r3,r4,49152
  806a18:	1800031e 	bne	r3,zero,806a28 <__hi0bits+0x44>
  806a1c:	2109883a 	add	r4,r4,r4
  806a20:	10800084 	addi	r2,r2,2
  806a24:	2109883a 	add	r4,r4,r4
  806a28:	20000316 	blt	r4,zero,806a38 <__hi0bits+0x54>
  806a2c:	2110002c 	andhi	r4,r4,16384
  806a30:	2000041e 	bne	r4,zero,806a44 <__hi0bits+0x60>
  806a34:	00800804 	movi	r2,32
  806a38:	f800283a 	ret
  806a3c:	0005883a 	mov	r2,zero
  806a40:	003fec06 	br	8069f4 <__alt_mem_epcs_flash_controller_0+0xff7fd9f4>
  806a44:	10800044 	addi	r2,r2,1
  806a48:	f800283a 	ret

00806a4c <__lo0bits>:
  806a4c:	20c00017 	ldw	r3,0(r4)
  806a50:	188001cc 	andi	r2,r3,7
  806a54:	10000826 	beq	r2,zero,806a78 <__lo0bits+0x2c>
  806a58:	1880004c 	andi	r2,r3,1
  806a5c:	1000211e 	bne	r2,zero,806ae4 <__lo0bits+0x98>
  806a60:	1880008c 	andi	r2,r3,2
  806a64:	1000211e 	bne	r2,zero,806aec <__lo0bits+0xa0>
  806a68:	1806d0ba 	srli	r3,r3,2
  806a6c:	00800084 	movi	r2,2
  806a70:	20c00015 	stw	r3,0(r4)
  806a74:	f800283a 	ret
  806a78:	18bfffcc 	andi	r2,r3,65535
  806a7c:	10001326 	beq	r2,zero,806acc <__lo0bits+0x80>
  806a80:	0005883a 	mov	r2,zero
  806a84:	19403fcc 	andi	r5,r3,255
  806a88:	2800021e 	bne	r5,zero,806a94 <__lo0bits+0x48>
  806a8c:	1806d23a 	srli	r3,r3,8
  806a90:	10800204 	addi	r2,r2,8
  806a94:	194003cc 	andi	r5,r3,15
  806a98:	2800021e 	bne	r5,zero,806aa4 <__lo0bits+0x58>
  806a9c:	1806d13a 	srli	r3,r3,4
  806aa0:	10800104 	addi	r2,r2,4
  806aa4:	194000cc 	andi	r5,r3,3
  806aa8:	2800021e 	bne	r5,zero,806ab4 <__lo0bits+0x68>
  806aac:	1806d0ba 	srli	r3,r3,2
  806ab0:	10800084 	addi	r2,r2,2
  806ab4:	1940004c 	andi	r5,r3,1
  806ab8:	2800081e 	bne	r5,zero,806adc <__lo0bits+0x90>
  806abc:	1806d07a 	srli	r3,r3,1
  806ac0:	1800051e 	bne	r3,zero,806ad8 <__lo0bits+0x8c>
  806ac4:	00800804 	movi	r2,32
  806ac8:	f800283a 	ret
  806acc:	1806d43a 	srli	r3,r3,16
  806ad0:	00800404 	movi	r2,16
  806ad4:	003feb06 	br	806a84 <__alt_mem_epcs_flash_controller_0+0xff7fda84>
  806ad8:	10800044 	addi	r2,r2,1
  806adc:	20c00015 	stw	r3,0(r4)
  806ae0:	f800283a 	ret
  806ae4:	0005883a 	mov	r2,zero
  806ae8:	f800283a 	ret
  806aec:	1806d07a 	srli	r3,r3,1
  806af0:	00800044 	movi	r2,1
  806af4:	20c00015 	stw	r3,0(r4)
  806af8:	f800283a 	ret

00806afc <__i2b>:
  806afc:	defffd04 	addi	sp,sp,-12
  806b00:	dc000015 	stw	r16,0(sp)
  806b04:	04000044 	movi	r16,1
  806b08:	dc400115 	stw	r17,4(sp)
  806b0c:	2823883a 	mov	r17,r5
  806b10:	800b883a 	mov	r5,r16
  806b14:	dfc00215 	stw	ra,8(sp)
  806b18:	08066c80 	call	8066c8 <_Balloc>
  806b1c:	14400515 	stw	r17,20(r2)
  806b20:	14000415 	stw	r16,16(r2)
  806b24:	dfc00217 	ldw	ra,8(sp)
  806b28:	dc400117 	ldw	r17,4(sp)
  806b2c:	dc000017 	ldw	r16,0(sp)
  806b30:	dec00304 	addi	sp,sp,12
  806b34:	f800283a 	ret

00806b38 <__multiply>:
  806b38:	deffef04 	addi	sp,sp,-68
  806b3c:	dc400815 	stw	r17,32(sp)
  806b40:	dc000715 	stw	r16,28(sp)
  806b44:	34400417 	ldw	r17,16(r6)
  806b48:	2c000417 	ldw	r16,16(r5)
  806b4c:	dd800d15 	stw	r22,52(sp)
  806b50:	dc800915 	stw	r18,36(sp)
  806b54:	dfc01015 	stw	ra,64(sp)
  806b58:	df000f15 	stw	fp,60(sp)
  806b5c:	ddc00e15 	stw	r23,56(sp)
  806b60:	dd400c15 	stw	r21,48(sp)
  806b64:	dd000b15 	stw	r20,44(sp)
  806b68:	dcc00a15 	stw	r19,40(sp)
  806b6c:	2825883a 	mov	r18,r5
  806b70:	302d883a 	mov	r22,r6
  806b74:	8440050e 	bge	r16,r17,806b8c <__multiply+0x54>
  806b78:	8007883a 	mov	r3,r16
  806b7c:	3025883a 	mov	r18,r6
  806b80:	8821883a 	mov	r16,r17
  806b84:	282d883a 	mov	r22,r5
  806b88:	1823883a 	mov	r17,r3
  806b8c:	90800217 	ldw	r2,8(r18)
  806b90:	8447883a 	add	r3,r16,r17
  806b94:	d8c00215 	stw	r3,8(sp)
  806b98:	91400117 	ldw	r5,4(r18)
  806b9c:	10c0010e 	bge	r2,r3,806ba4 <__multiply+0x6c>
  806ba0:	29400044 	addi	r5,r5,1
  806ba4:	08066c80 	call	8066c8 <_Balloc>
  806ba8:	d8c00217 	ldw	r3,8(sp)
  806bac:	d8800615 	stw	r2,24(sp)
  806bb0:	18eb883a 	add	r21,r3,r3
  806bb4:	ad6b883a 	add	r21,r21,r21
  806bb8:	10c00504 	addi	r3,r2,20
  806bbc:	1d6b883a 	add	r21,r3,r21
  806bc0:	d8c00115 	stw	r3,4(sp)
  806bc4:	dd400315 	stw	r21,12(sp)
  806bc8:	1805883a 	mov	r2,r3
  806bcc:	1d40042e 	bgeu	r3,r21,806be0 <__multiply+0xa8>
  806bd0:	d8c00317 	ldw	r3,12(sp)
  806bd4:	10000015 	stw	zero,0(r2)
  806bd8:	10800104 	addi	r2,r2,4
  806bdc:	10fffc36 	bltu	r2,r3,806bd0 <__alt_mem_epcs_flash_controller_0+0xff7fdbd0>
  806be0:	8c63883a 	add	r17,r17,r17
  806be4:	b5800504 	addi	r22,r22,20
  806be8:	8c63883a 	add	r17,r17,r17
  806bec:	94800504 	addi	r18,r18,20
  806bf0:	8421883a 	add	r16,r16,r16
  806bf4:	b463883a 	add	r17,r22,r17
  806bf8:	8421883a 	add	r16,r16,r16
  806bfc:	dd800015 	stw	r22,0(sp)
  806c00:	dc800415 	stw	r18,16(sp)
  806c04:	dc400515 	stw	r17,20(sp)
  806c08:	9429883a 	add	r20,r18,r16
  806c0c:	b4404f2e 	bgeu	r22,r17,806d4c <__multiply+0x214>
  806c10:	d8c00017 	ldw	r3,0(sp)
  806c14:	1c800017 	ldw	r18,0(r3)
  806c18:	947fffcc 	andi	r17,r18,65535
  806c1c:	88001e26 	beq	r17,zero,806c98 <__multiply+0x160>
  806c20:	dd800117 	ldw	r22,4(sp)
  806c24:	dd400417 	ldw	r21,16(sp)
  806c28:	0027883a 	mov	r19,zero
  806c2c:	ac800017 	ldw	r18,0(r21)
  806c30:	b4000017 	ldw	r16,0(r22)
  806c34:	880b883a 	mov	r5,r17
  806c38:	913fffcc 	andi	r4,r18,65535
  806c3c:	080ad7c0 	call	80ad7c <__mulsi3>
  806c40:	9008d43a 	srli	r4,r18,16
  806c44:	84bfffcc 	andi	r18,r16,65535
  806c48:	1485883a 	add	r2,r2,r18
  806c4c:	14e5883a 	add	r18,r2,r19
  806c50:	8020d43a 	srli	r16,r16,16
  806c54:	9026d43a 	srli	r19,r18,16
  806c58:	880b883a 	mov	r5,r17
  806c5c:	080ad7c0 	call	80ad7c <__mulsi3>
  806c60:	1405883a 	add	r2,r2,r16
  806c64:	14e1883a 	add	r16,r2,r19
  806c68:	90ffffcc 	andi	r3,r18,65535
  806c6c:	8024943a 	slli	r18,r16,16
  806c70:	ad400104 	addi	r21,r21,4
  806c74:	b005883a 	mov	r2,r22
  806c78:	90c6b03a 	or	r3,r18,r3
  806c7c:	b0c00015 	stw	r3,0(r22)
  806c80:	8026d43a 	srli	r19,r16,16
  806c84:	b5800104 	addi	r22,r22,4
  806c88:	ad3fe836 	bltu	r21,r20,806c2c <__alt_mem_epcs_flash_controller_0+0xff7fdc2c>
  806c8c:	d8c00017 	ldw	r3,0(sp)
  806c90:	14c00115 	stw	r19,4(r2)
  806c94:	1c800017 	ldw	r18,0(r3)
  806c98:	9024d43a 	srli	r18,r18,16
  806c9c:	90002226 	beq	r18,zero,806d28 <__multiply+0x1f0>
  806ca0:	d8c00117 	ldw	r3,4(sp)
  806ca4:	dd800417 	ldw	r22,16(sp)
  806ca8:	002f883a 	mov	r23,zero
  806cac:	1f000017 	ldw	fp,0(r3)
  806cb0:	1823883a 	mov	r17,r3
  806cb4:	182b883a 	mov	r21,r3
  806cb8:	e021883a 	mov	r16,fp
  806cbc:	00000106 	br	806cc4 <__multiply+0x18c>
  806cc0:	982b883a 	mov	r21,r19
  806cc4:	b100000b 	ldhu	r4,0(r22)
  806cc8:	8020d43a 	srli	r16,r16,16
  806ccc:	900b883a 	mov	r5,r18
  806cd0:	080ad7c0 	call	80ad7c <__mulsi3>
  806cd4:	1405883a 	add	r2,r2,r16
  806cd8:	15ef883a 	add	r23,r2,r23
  806cdc:	b804943a 	slli	r2,r23,16
  806ce0:	e0ffffcc 	andi	r3,fp,65535
  806ce4:	8c400104 	addi	r17,r17,4
  806ce8:	10c6b03a 	or	r3,r2,r3
  806cec:	88ffff15 	stw	r3,-4(r17)
  806cf0:	b5800104 	addi	r22,r22,4
  806cf4:	b13fff17 	ldw	r4,-4(r22)
  806cf8:	acc00104 	addi	r19,r21,4
  806cfc:	900b883a 	mov	r5,r18
  806d00:	2008d43a 	srli	r4,r4,16
  806d04:	9c000017 	ldw	r16,0(r19)
  806d08:	080ad7c0 	call	80ad7c <__mulsi3>
  806d0c:	b806d43a 	srli	r3,r23,16
  806d10:	813fffcc 	andi	r4,r16,65535
  806d14:	1105883a 	add	r2,r2,r4
  806d18:	10f9883a 	add	fp,r2,r3
  806d1c:	e02ed43a 	srli	r23,fp,16
  806d20:	b53fe736 	bltu	r22,r20,806cc0 <__alt_mem_epcs_flash_controller_0+0xff7fdcc0>
  806d24:	af000115 	stw	fp,4(r21)
  806d28:	d8c00017 	ldw	r3,0(sp)
  806d2c:	d9000517 	ldw	r4,20(sp)
  806d30:	18c00104 	addi	r3,r3,4
  806d34:	d8c00015 	stw	r3,0(sp)
  806d38:	d8c00117 	ldw	r3,4(sp)
  806d3c:	18c00104 	addi	r3,r3,4
  806d40:	d8c00115 	stw	r3,4(sp)
  806d44:	d8c00017 	ldw	r3,0(sp)
  806d48:	193fb136 	bltu	r3,r4,806c10 <__alt_mem_epcs_flash_controller_0+0xff7fdc10>
  806d4c:	d8c00217 	ldw	r3,8(sp)
  806d50:	00c00c0e 	bge	zero,r3,806d84 <__multiply+0x24c>
  806d54:	d8c00317 	ldw	r3,12(sp)
  806d58:	18bfff17 	ldw	r2,-4(r3)
  806d5c:	1d7fff04 	addi	r21,r3,-4
  806d60:	10000326 	beq	r2,zero,806d70 <__multiply+0x238>
  806d64:	00000706 	br	806d84 <__multiply+0x24c>
  806d68:	a8800017 	ldw	r2,0(r21)
  806d6c:	1000051e 	bne	r2,zero,806d84 <__multiply+0x24c>
  806d70:	d8c00217 	ldw	r3,8(sp)
  806d74:	ad7fff04 	addi	r21,r21,-4
  806d78:	18ffffc4 	addi	r3,r3,-1
  806d7c:	d8c00215 	stw	r3,8(sp)
  806d80:	183ff91e 	bne	r3,zero,806d68 <__alt_mem_epcs_flash_controller_0+0xff7fdd68>
  806d84:	d8c00617 	ldw	r3,24(sp)
  806d88:	d9000217 	ldw	r4,8(sp)
  806d8c:	1805883a 	mov	r2,r3
  806d90:	19000415 	stw	r4,16(r3)
  806d94:	dfc01017 	ldw	ra,64(sp)
  806d98:	df000f17 	ldw	fp,60(sp)
  806d9c:	ddc00e17 	ldw	r23,56(sp)
  806da0:	dd800d17 	ldw	r22,52(sp)
  806da4:	dd400c17 	ldw	r21,48(sp)
  806da8:	dd000b17 	ldw	r20,44(sp)
  806dac:	dcc00a17 	ldw	r19,40(sp)
  806db0:	dc800917 	ldw	r18,36(sp)
  806db4:	dc400817 	ldw	r17,32(sp)
  806db8:	dc000717 	ldw	r16,28(sp)
  806dbc:	dec01104 	addi	sp,sp,68
  806dc0:	f800283a 	ret

00806dc4 <__pow5mult>:
  806dc4:	defffa04 	addi	sp,sp,-24
  806dc8:	dcc00315 	stw	r19,12(sp)
  806dcc:	dc000015 	stw	r16,0(sp)
  806dd0:	dfc00515 	stw	ra,20(sp)
  806dd4:	dd000415 	stw	r20,16(sp)
  806dd8:	dc800215 	stw	r18,8(sp)
  806ddc:	dc400115 	stw	r17,4(sp)
  806de0:	308000cc 	andi	r2,r6,3
  806de4:	3021883a 	mov	r16,r6
  806de8:	2027883a 	mov	r19,r4
  806dec:	10002f1e 	bne	r2,zero,806eac <__pow5mult+0xe8>
  806df0:	2825883a 	mov	r18,r5
  806df4:	8021d0ba 	srai	r16,r16,2
  806df8:	80001a26 	beq	r16,zero,806e64 <__pow5mult+0xa0>
  806dfc:	9c401217 	ldw	r17,72(r19)
  806e00:	8800061e 	bne	r17,zero,806e1c <__pow5mult+0x58>
  806e04:	00003406 	br	806ed8 <__pow5mult+0x114>
  806e08:	8021d07a 	srai	r16,r16,1
  806e0c:	80001526 	beq	r16,zero,806e64 <__pow5mult+0xa0>
  806e10:	88800017 	ldw	r2,0(r17)
  806e14:	10001c26 	beq	r2,zero,806e88 <__pow5mult+0xc4>
  806e18:	1023883a 	mov	r17,r2
  806e1c:	8080004c 	andi	r2,r16,1
  806e20:	103ff926 	beq	r2,zero,806e08 <__alt_mem_epcs_flash_controller_0+0xff7fde08>
  806e24:	880d883a 	mov	r6,r17
  806e28:	900b883a 	mov	r5,r18
  806e2c:	9809883a 	mov	r4,r19
  806e30:	0806b380 	call	806b38 <__multiply>
  806e34:	90001b26 	beq	r18,zero,806ea4 <__pow5mult+0xe0>
  806e38:	91000117 	ldw	r4,4(r18)
  806e3c:	98c01317 	ldw	r3,76(r19)
  806e40:	8021d07a 	srai	r16,r16,1
  806e44:	2109883a 	add	r4,r4,r4
  806e48:	2109883a 	add	r4,r4,r4
  806e4c:	1907883a 	add	r3,r3,r4
  806e50:	19000017 	ldw	r4,0(r3)
  806e54:	91000015 	stw	r4,0(r18)
  806e58:	1c800015 	stw	r18,0(r3)
  806e5c:	1025883a 	mov	r18,r2
  806e60:	803feb1e 	bne	r16,zero,806e10 <__alt_mem_epcs_flash_controller_0+0xff7fde10>
  806e64:	9005883a 	mov	r2,r18
  806e68:	dfc00517 	ldw	ra,20(sp)
  806e6c:	dd000417 	ldw	r20,16(sp)
  806e70:	dcc00317 	ldw	r19,12(sp)
  806e74:	dc800217 	ldw	r18,8(sp)
  806e78:	dc400117 	ldw	r17,4(sp)
  806e7c:	dc000017 	ldw	r16,0(sp)
  806e80:	dec00604 	addi	sp,sp,24
  806e84:	f800283a 	ret
  806e88:	880d883a 	mov	r6,r17
  806e8c:	880b883a 	mov	r5,r17
  806e90:	9809883a 	mov	r4,r19
  806e94:	0806b380 	call	806b38 <__multiply>
  806e98:	88800015 	stw	r2,0(r17)
  806e9c:	10000015 	stw	zero,0(r2)
  806ea0:	003fdd06 	br	806e18 <__alt_mem_epcs_flash_controller_0+0xff7fde18>
  806ea4:	1025883a 	mov	r18,r2
  806ea8:	003fd706 	br	806e08 <__alt_mem_epcs_flash_controller_0+0xff7fde08>
  806eac:	10bfffc4 	addi	r2,r2,-1
  806eb0:	1085883a 	add	r2,r2,r2
  806eb4:	00c020b4 	movhi	r3,130
  806eb8:	18e81b04 	addi	r3,r3,-24468
  806ebc:	1085883a 	add	r2,r2,r2
  806ec0:	1885883a 	add	r2,r3,r2
  806ec4:	11800017 	ldw	r6,0(r2)
  806ec8:	000f883a 	mov	r7,zero
  806ecc:	08067980 	call	806798 <__multadd>
  806ed0:	1025883a 	mov	r18,r2
  806ed4:	003fc706 	br	806df4 <__alt_mem_epcs_flash_controller_0+0xff7fddf4>
  806ed8:	05000044 	movi	r20,1
  806edc:	a00b883a 	mov	r5,r20
  806ee0:	9809883a 	mov	r4,r19
  806ee4:	08066c80 	call	8066c8 <_Balloc>
  806ee8:	1023883a 	mov	r17,r2
  806eec:	00809c44 	movi	r2,625
  806ef0:	88800515 	stw	r2,20(r17)
  806ef4:	8d000415 	stw	r20,16(r17)
  806ef8:	9c401215 	stw	r17,72(r19)
  806efc:	88000015 	stw	zero,0(r17)
  806f00:	003fc606 	br	806e1c <__alt_mem_epcs_flash_controller_0+0xff7fde1c>

00806f04 <__lshift>:
  806f04:	defff904 	addi	sp,sp,-28
  806f08:	dd400515 	stw	r21,20(sp)
  806f0c:	dcc00315 	stw	r19,12(sp)
  806f10:	302bd17a 	srai	r21,r6,5
  806f14:	2cc00417 	ldw	r19,16(r5)
  806f18:	28800217 	ldw	r2,8(r5)
  806f1c:	dd000415 	stw	r20,16(sp)
  806f20:	ace7883a 	add	r19,r21,r19
  806f24:	dc800215 	stw	r18,8(sp)
  806f28:	dc400115 	stw	r17,4(sp)
  806f2c:	dc000015 	stw	r16,0(sp)
  806f30:	dfc00615 	stw	ra,24(sp)
  806f34:	9c000044 	addi	r16,r19,1
  806f38:	2823883a 	mov	r17,r5
  806f3c:	3029883a 	mov	r20,r6
  806f40:	2025883a 	mov	r18,r4
  806f44:	29400117 	ldw	r5,4(r5)
  806f48:	1400030e 	bge	r2,r16,806f58 <__lshift+0x54>
  806f4c:	1085883a 	add	r2,r2,r2
  806f50:	29400044 	addi	r5,r5,1
  806f54:	143ffd16 	blt	r2,r16,806f4c <__alt_mem_epcs_flash_controller_0+0xff7fdf4c>
  806f58:	9009883a 	mov	r4,r18
  806f5c:	08066c80 	call	8066c8 <_Balloc>
  806f60:	10c00504 	addi	r3,r2,20
  806f64:	0540070e 	bge	zero,r21,806f84 <__lshift+0x80>
  806f68:	ad6b883a 	add	r21,r21,r21
  806f6c:	ad6b883a 	add	r21,r21,r21
  806f70:	1809883a 	mov	r4,r3
  806f74:	1d47883a 	add	r3,r3,r21
  806f78:	20000015 	stw	zero,0(r4)
  806f7c:	21000104 	addi	r4,r4,4
  806f80:	193ffd1e 	bne	r3,r4,806f78 <__alt_mem_epcs_flash_controller_0+0xff7fdf78>
  806f84:	8a000417 	ldw	r8,16(r17)
  806f88:	89000504 	addi	r4,r17,20
  806f8c:	a18007cc 	andi	r6,r20,31
  806f90:	4211883a 	add	r8,r8,r8
  806f94:	4211883a 	add	r8,r8,r8
  806f98:	2211883a 	add	r8,r4,r8
  806f9c:	30002326 	beq	r6,zero,80702c <__lshift+0x128>
  806fa0:	02400804 	movi	r9,32
  806fa4:	4993c83a 	sub	r9,r9,r6
  806fa8:	000b883a 	mov	r5,zero
  806fac:	21c00017 	ldw	r7,0(r4)
  806fb0:	1815883a 	mov	r10,r3
  806fb4:	18c00104 	addi	r3,r3,4
  806fb8:	398e983a 	sll	r7,r7,r6
  806fbc:	21000104 	addi	r4,r4,4
  806fc0:	394ab03a 	or	r5,r7,r5
  806fc4:	197fff15 	stw	r5,-4(r3)
  806fc8:	217fff17 	ldw	r5,-4(r4)
  806fcc:	2a4ad83a 	srl	r5,r5,r9
  806fd0:	223ff636 	bltu	r4,r8,806fac <__alt_mem_epcs_flash_controller_0+0xff7fdfac>
  806fd4:	51400115 	stw	r5,4(r10)
  806fd8:	28001a1e 	bne	r5,zero,807044 <__lshift+0x140>
  806fdc:	843fffc4 	addi	r16,r16,-1
  806fe0:	14000415 	stw	r16,16(r2)
  806fe4:	88000826 	beq	r17,zero,807008 <__lshift+0x104>
  806fe8:	89000117 	ldw	r4,4(r17)
  806fec:	90c01317 	ldw	r3,76(r18)
  806ff0:	2109883a 	add	r4,r4,r4
  806ff4:	2109883a 	add	r4,r4,r4
  806ff8:	1907883a 	add	r3,r3,r4
  806ffc:	19000017 	ldw	r4,0(r3)
  807000:	89000015 	stw	r4,0(r17)
  807004:	1c400015 	stw	r17,0(r3)
  807008:	dfc00617 	ldw	ra,24(sp)
  80700c:	dd400517 	ldw	r21,20(sp)
  807010:	dd000417 	ldw	r20,16(sp)
  807014:	dcc00317 	ldw	r19,12(sp)
  807018:	dc800217 	ldw	r18,8(sp)
  80701c:	dc400117 	ldw	r17,4(sp)
  807020:	dc000017 	ldw	r16,0(sp)
  807024:	dec00704 	addi	sp,sp,28
  807028:	f800283a 	ret
  80702c:	21400017 	ldw	r5,0(r4)
  807030:	18c00104 	addi	r3,r3,4
  807034:	21000104 	addi	r4,r4,4
  807038:	197fff15 	stw	r5,-4(r3)
  80703c:	223ffb36 	bltu	r4,r8,80702c <__alt_mem_epcs_flash_controller_0+0xff7fe02c>
  807040:	003fe606 	br	806fdc <__alt_mem_epcs_flash_controller_0+0xff7fdfdc>
  807044:	9c000084 	addi	r16,r19,2
  807048:	003fe406 	br	806fdc <__alt_mem_epcs_flash_controller_0+0xff7fdfdc>

0080704c <__mcmp>:
  80704c:	20800417 	ldw	r2,16(r4)
  807050:	28c00417 	ldw	r3,16(r5)
  807054:	10c5c83a 	sub	r2,r2,r3
  807058:	1000111e 	bne	r2,zero,8070a0 <__mcmp+0x54>
  80705c:	18c7883a 	add	r3,r3,r3
  807060:	18c7883a 	add	r3,r3,r3
  807064:	21000504 	addi	r4,r4,20
  807068:	29400504 	addi	r5,r5,20
  80706c:	20c5883a 	add	r2,r4,r3
  807070:	28cb883a 	add	r5,r5,r3
  807074:	00000106 	br	80707c <__mcmp+0x30>
  807078:	20800a2e 	bgeu	r4,r2,8070a4 <__mcmp+0x58>
  80707c:	10bfff04 	addi	r2,r2,-4
  807080:	297fff04 	addi	r5,r5,-4
  807084:	11800017 	ldw	r6,0(r2)
  807088:	28c00017 	ldw	r3,0(r5)
  80708c:	30fffa26 	beq	r6,r3,807078 <__alt_mem_epcs_flash_controller_0+0xff7fe078>
  807090:	30c00236 	bltu	r6,r3,80709c <__mcmp+0x50>
  807094:	00800044 	movi	r2,1
  807098:	f800283a 	ret
  80709c:	00bfffc4 	movi	r2,-1
  8070a0:	f800283a 	ret
  8070a4:	0005883a 	mov	r2,zero
  8070a8:	f800283a 	ret

008070ac <__mdiff>:
  8070ac:	28c00417 	ldw	r3,16(r5)
  8070b0:	30800417 	ldw	r2,16(r6)
  8070b4:	defffa04 	addi	sp,sp,-24
  8070b8:	dcc00315 	stw	r19,12(sp)
  8070bc:	dc800215 	stw	r18,8(sp)
  8070c0:	dfc00515 	stw	ra,20(sp)
  8070c4:	dd000415 	stw	r20,16(sp)
  8070c8:	dc400115 	stw	r17,4(sp)
  8070cc:	dc000015 	stw	r16,0(sp)
  8070d0:	1887c83a 	sub	r3,r3,r2
  8070d4:	2825883a 	mov	r18,r5
  8070d8:	3027883a 	mov	r19,r6
  8070dc:	1800141e 	bne	r3,zero,807130 <__mdiff+0x84>
  8070e0:	1085883a 	add	r2,r2,r2
  8070e4:	1085883a 	add	r2,r2,r2
  8070e8:	2a000504 	addi	r8,r5,20
  8070ec:	34000504 	addi	r16,r6,20
  8070f0:	4087883a 	add	r3,r8,r2
  8070f4:	8085883a 	add	r2,r16,r2
  8070f8:	00000106 	br	807100 <__mdiff+0x54>
  8070fc:	40c0592e 	bgeu	r8,r3,807264 <__mdiff+0x1b8>
  807100:	18ffff04 	addi	r3,r3,-4
  807104:	10bfff04 	addi	r2,r2,-4
  807108:	19c00017 	ldw	r7,0(r3)
  80710c:	11400017 	ldw	r5,0(r2)
  807110:	397ffa26 	beq	r7,r5,8070fc <__alt_mem_epcs_flash_controller_0+0xff7fe0fc>
  807114:	3940592e 	bgeu	r7,r5,80727c <__mdiff+0x1d0>
  807118:	9005883a 	mov	r2,r18
  80711c:	4023883a 	mov	r17,r8
  807120:	9825883a 	mov	r18,r19
  807124:	05000044 	movi	r20,1
  807128:	1027883a 	mov	r19,r2
  80712c:	00000406 	br	807140 <__mdiff+0x94>
  807130:	18005616 	blt	r3,zero,80728c <__mdiff+0x1e0>
  807134:	34400504 	addi	r17,r6,20
  807138:	2c000504 	addi	r16,r5,20
  80713c:	0029883a 	mov	r20,zero
  807140:	91400117 	ldw	r5,4(r18)
  807144:	08066c80 	call	8066c8 <_Balloc>
  807148:	92400417 	ldw	r9,16(r18)
  80714c:	9b000417 	ldw	r12,16(r19)
  807150:	12c00504 	addi	r11,r2,20
  807154:	4a51883a 	add	r8,r9,r9
  807158:	6319883a 	add	r12,r12,r12
  80715c:	4211883a 	add	r8,r8,r8
  807160:	6319883a 	add	r12,r12,r12
  807164:	15000315 	stw	r20,12(r2)
  807168:	8211883a 	add	r8,r16,r8
  80716c:	8b19883a 	add	r12,r17,r12
  807170:	0007883a 	mov	r3,zero
  807174:	81400017 	ldw	r5,0(r16)
  807178:	89c00017 	ldw	r7,0(r17)
  80717c:	59800104 	addi	r6,r11,4
  807180:	293fffcc 	andi	r4,r5,65535
  807184:	20c7883a 	add	r3,r4,r3
  807188:	393fffcc 	andi	r4,r7,65535
  80718c:	1909c83a 	sub	r4,r3,r4
  807190:	280ad43a 	srli	r5,r5,16
  807194:	380ed43a 	srli	r7,r7,16
  807198:	2007d43a 	srai	r3,r4,16
  80719c:	213fffcc 	andi	r4,r4,65535
  8071a0:	29cbc83a 	sub	r5,r5,r7
  8071a4:	28c7883a 	add	r3,r5,r3
  8071a8:	180a943a 	slli	r5,r3,16
  8071ac:	8c400104 	addi	r17,r17,4
  8071b0:	84000104 	addi	r16,r16,4
  8071b4:	2908b03a 	or	r4,r5,r4
  8071b8:	59000015 	stw	r4,0(r11)
  8071bc:	1807d43a 	srai	r3,r3,16
  8071c0:	3015883a 	mov	r10,r6
  8071c4:	3017883a 	mov	r11,r6
  8071c8:	8b3fea36 	bltu	r17,r12,807174 <__alt_mem_epcs_flash_controller_0+0xff7fe174>
  8071cc:	8200162e 	bgeu	r16,r8,807228 <__mdiff+0x17c>
  8071d0:	8017883a 	mov	r11,r16
  8071d4:	59400017 	ldw	r5,0(r11)
  8071d8:	31800104 	addi	r6,r6,4
  8071dc:	5ac00104 	addi	r11,r11,4
  8071e0:	293fffcc 	andi	r4,r5,65535
  8071e4:	20c7883a 	add	r3,r4,r3
  8071e8:	280ed43a 	srli	r7,r5,16
  8071ec:	180bd43a 	srai	r5,r3,16
  8071f0:	193fffcc 	andi	r4,r3,65535
  8071f4:	3947883a 	add	r3,r7,r5
  8071f8:	180a943a 	slli	r5,r3,16
  8071fc:	1807d43a 	srai	r3,r3,16
  807200:	2908b03a 	or	r4,r5,r4
  807204:	313fff15 	stw	r4,-4(r6)
  807208:	5a3ff236 	bltu	r11,r8,8071d4 <__alt_mem_epcs_flash_controller_0+0xff7fe1d4>
  80720c:	0406303a 	nor	r3,zero,r16
  807210:	1a07883a 	add	r3,r3,r8
  807214:	1806d0ba 	srli	r3,r3,2
  807218:	18c00044 	addi	r3,r3,1
  80721c:	18c7883a 	add	r3,r3,r3
  807220:	18c7883a 	add	r3,r3,r3
  807224:	50d5883a 	add	r10,r10,r3
  807228:	50ffff04 	addi	r3,r10,-4
  80722c:	2000041e 	bne	r4,zero,807240 <__mdiff+0x194>
  807230:	18ffff04 	addi	r3,r3,-4
  807234:	19000017 	ldw	r4,0(r3)
  807238:	4a7fffc4 	addi	r9,r9,-1
  80723c:	203ffc26 	beq	r4,zero,807230 <__alt_mem_epcs_flash_controller_0+0xff7fe230>
  807240:	12400415 	stw	r9,16(r2)
  807244:	dfc00517 	ldw	ra,20(sp)
  807248:	dd000417 	ldw	r20,16(sp)
  80724c:	dcc00317 	ldw	r19,12(sp)
  807250:	dc800217 	ldw	r18,8(sp)
  807254:	dc400117 	ldw	r17,4(sp)
  807258:	dc000017 	ldw	r16,0(sp)
  80725c:	dec00604 	addi	sp,sp,24
  807260:	f800283a 	ret
  807264:	000b883a 	mov	r5,zero
  807268:	08066c80 	call	8066c8 <_Balloc>
  80726c:	00c00044 	movi	r3,1
  807270:	10c00415 	stw	r3,16(r2)
  807274:	10000515 	stw	zero,20(r2)
  807278:	003ff206 	br	807244 <__alt_mem_epcs_flash_controller_0+0xff7fe244>
  80727c:	8023883a 	mov	r17,r16
  807280:	0029883a 	mov	r20,zero
  807284:	4021883a 	mov	r16,r8
  807288:	003fad06 	br	807140 <__alt_mem_epcs_flash_controller_0+0xff7fe140>
  80728c:	9005883a 	mov	r2,r18
  807290:	94400504 	addi	r17,r18,20
  807294:	9c000504 	addi	r16,r19,20
  807298:	9825883a 	mov	r18,r19
  80729c:	05000044 	movi	r20,1
  8072a0:	1027883a 	mov	r19,r2
  8072a4:	003fa606 	br	807140 <__alt_mem_epcs_flash_controller_0+0xff7fe140>

008072a8 <__ulp>:
  8072a8:	295ffc2c 	andhi	r5,r5,32752
  8072ac:	00bf3034 	movhi	r2,64704
  8072b0:	2887883a 	add	r3,r5,r2
  8072b4:	00c0020e 	bge	zero,r3,8072c0 <__ulp+0x18>
  8072b8:	0005883a 	mov	r2,zero
  8072bc:	f800283a 	ret
  8072c0:	00c7c83a 	sub	r3,zero,r3
  8072c4:	1807d53a 	srai	r3,r3,20
  8072c8:	008004c4 	movi	r2,19
  8072cc:	10c00b0e 	bge	r2,r3,8072fc <__ulp+0x54>
  8072d0:	18bffb04 	addi	r2,r3,-20
  8072d4:	01000784 	movi	r4,30
  8072d8:	0007883a 	mov	r3,zero
  8072dc:	20800516 	blt	r4,r2,8072f4 <__ulp+0x4c>
  8072e0:	010007c4 	movi	r4,31
  8072e4:	2089c83a 	sub	r4,r4,r2
  8072e8:	00800044 	movi	r2,1
  8072ec:	1104983a 	sll	r2,r2,r4
  8072f0:	f800283a 	ret
  8072f4:	00800044 	movi	r2,1
  8072f8:	f800283a 	ret
  8072fc:	01400234 	movhi	r5,8
  807300:	28c7d83a 	sra	r3,r5,r3
  807304:	0005883a 	mov	r2,zero
  807308:	f800283a 	ret

0080730c <__b2d>:
  80730c:	defffa04 	addi	sp,sp,-24
  807310:	dc000015 	stw	r16,0(sp)
  807314:	24000417 	ldw	r16,16(r4)
  807318:	dc400115 	stw	r17,4(sp)
  80731c:	24400504 	addi	r17,r4,20
  807320:	8421883a 	add	r16,r16,r16
  807324:	8421883a 	add	r16,r16,r16
  807328:	8c21883a 	add	r16,r17,r16
  80732c:	dc800215 	stw	r18,8(sp)
  807330:	84bfff17 	ldw	r18,-4(r16)
  807334:	dd000415 	stw	r20,16(sp)
  807338:	dcc00315 	stw	r19,12(sp)
  80733c:	9009883a 	mov	r4,r18
  807340:	2829883a 	mov	r20,r5
  807344:	dfc00515 	stw	ra,20(sp)
  807348:	08069e40 	call	8069e4 <__hi0bits>
  80734c:	00c00804 	movi	r3,32
  807350:	1889c83a 	sub	r4,r3,r2
  807354:	a1000015 	stw	r4,0(r20)
  807358:	01000284 	movi	r4,10
  80735c:	84ffff04 	addi	r19,r16,-4
  807360:	20801216 	blt	r4,r2,8073ac <__b2d+0xa0>
  807364:	018002c4 	movi	r6,11
  807368:	308dc83a 	sub	r6,r6,r2
  80736c:	9186d83a 	srl	r3,r18,r6
  807370:	18cffc34 	orhi	r3,r3,16368
  807374:	8cc0212e 	bgeu	r17,r19,8073fc <__b2d+0xf0>
  807378:	813ffe17 	ldw	r4,-8(r16)
  80737c:	218cd83a 	srl	r6,r4,r6
  807380:	10800544 	addi	r2,r2,21
  807384:	9084983a 	sll	r2,r18,r2
  807388:	1184b03a 	or	r2,r2,r6
  80738c:	dfc00517 	ldw	ra,20(sp)
  807390:	dd000417 	ldw	r20,16(sp)
  807394:	dcc00317 	ldw	r19,12(sp)
  807398:	dc800217 	ldw	r18,8(sp)
  80739c:	dc400117 	ldw	r17,4(sp)
  8073a0:	dc000017 	ldw	r16,0(sp)
  8073a4:	dec00604 	addi	sp,sp,24
  8073a8:	f800283a 	ret
  8073ac:	8cc00f2e 	bgeu	r17,r19,8073ec <__b2d+0xe0>
  8073b0:	117ffd44 	addi	r5,r2,-11
  8073b4:	80bffe17 	ldw	r2,-8(r16)
  8073b8:	28000e26 	beq	r5,zero,8073f4 <__b2d+0xe8>
  8073bc:	1949c83a 	sub	r4,r3,r5
  8073c0:	9164983a 	sll	r18,r18,r5
  8073c4:	1106d83a 	srl	r3,r2,r4
  8073c8:	81bffe04 	addi	r6,r16,-8
  8073cc:	948ffc34 	orhi	r18,r18,16368
  8073d0:	90c6b03a 	or	r3,r18,r3
  8073d4:	89800e2e 	bgeu	r17,r6,807410 <__b2d+0x104>
  8073d8:	81bffd17 	ldw	r6,-12(r16)
  8073dc:	1144983a 	sll	r2,r2,r5
  8073e0:	310ad83a 	srl	r5,r6,r4
  8073e4:	2884b03a 	or	r2,r5,r2
  8073e8:	003fe806 	br	80738c <__alt_mem_epcs_flash_controller_0+0xff7fe38c>
  8073ec:	10bffd44 	addi	r2,r2,-11
  8073f0:	1000041e 	bne	r2,zero,807404 <__b2d+0xf8>
  8073f4:	90cffc34 	orhi	r3,r18,16368
  8073f8:	003fe406 	br	80738c <__alt_mem_epcs_flash_controller_0+0xff7fe38c>
  8073fc:	000d883a 	mov	r6,zero
  807400:	003fdf06 	br	807380 <__alt_mem_epcs_flash_controller_0+0xff7fe380>
  807404:	90a4983a 	sll	r18,r18,r2
  807408:	0005883a 	mov	r2,zero
  80740c:	003ff906 	br	8073f4 <__alt_mem_epcs_flash_controller_0+0xff7fe3f4>
  807410:	1144983a 	sll	r2,r2,r5
  807414:	003fdd06 	br	80738c <__alt_mem_epcs_flash_controller_0+0xff7fe38c>

00807418 <__d2b>:
  807418:	defff804 	addi	sp,sp,-32
  80741c:	dc000215 	stw	r16,8(sp)
  807420:	3021883a 	mov	r16,r6
  807424:	dc400315 	stw	r17,12(sp)
  807428:	8022907a 	slli	r17,r16,1
  80742c:	dd000615 	stw	r20,24(sp)
  807430:	2829883a 	mov	r20,r5
  807434:	01400044 	movi	r5,1
  807438:	dcc00515 	stw	r19,20(sp)
  80743c:	dc800415 	stw	r18,16(sp)
  807440:	dfc00715 	stw	ra,28(sp)
  807444:	3825883a 	mov	r18,r7
  807448:	8822d57a 	srli	r17,r17,21
  80744c:	08066c80 	call	8066c8 <_Balloc>
  807450:	1027883a 	mov	r19,r2
  807454:	00800434 	movhi	r2,16
  807458:	10bfffc4 	addi	r2,r2,-1
  80745c:	808c703a 	and	r6,r16,r2
  807460:	88000126 	beq	r17,zero,807468 <__d2b+0x50>
  807464:	31800434 	orhi	r6,r6,16
  807468:	d9800015 	stw	r6,0(sp)
  80746c:	a0002426 	beq	r20,zero,807500 <__d2b+0xe8>
  807470:	d9000104 	addi	r4,sp,4
  807474:	dd000115 	stw	r20,4(sp)
  807478:	0806a4c0 	call	806a4c <__lo0bits>
  80747c:	d8c00017 	ldw	r3,0(sp)
  807480:	10002f1e 	bne	r2,zero,807540 <__d2b+0x128>
  807484:	d9000117 	ldw	r4,4(sp)
  807488:	99000515 	stw	r4,20(r19)
  80748c:	1821003a 	cmpeq	r16,r3,zero
  807490:	01000084 	movi	r4,2
  807494:	2421c83a 	sub	r16,r4,r16
  807498:	98c00615 	stw	r3,24(r19)
  80749c:	9c000415 	stw	r16,16(r19)
  8074a0:	88001f1e 	bne	r17,zero,807520 <__d2b+0x108>
  8074a4:	10bef384 	addi	r2,r2,-1074
  8074a8:	90800015 	stw	r2,0(r18)
  8074ac:	00900034 	movhi	r2,16384
  8074b0:	10bfffc4 	addi	r2,r2,-1
  8074b4:	8085883a 	add	r2,r16,r2
  8074b8:	1085883a 	add	r2,r2,r2
  8074bc:	1085883a 	add	r2,r2,r2
  8074c0:	9885883a 	add	r2,r19,r2
  8074c4:	11000517 	ldw	r4,20(r2)
  8074c8:	8020917a 	slli	r16,r16,5
  8074cc:	08069e40 	call	8069e4 <__hi0bits>
  8074d0:	d8c00817 	ldw	r3,32(sp)
  8074d4:	8085c83a 	sub	r2,r16,r2
  8074d8:	18800015 	stw	r2,0(r3)
  8074dc:	9805883a 	mov	r2,r19
  8074e0:	dfc00717 	ldw	ra,28(sp)
  8074e4:	dd000617 	ldw	r20,24(sp)
  8074e8:	dcc00517 	ldw	r19,20(sp)
  8074ec:	dc800417 	ldw	r18,16(sp)
  8074f0:	dc400317 	ldw	r17,12(sp)
  8074f4:	dc000217 	ldw	r16,8(sp)
  8074f8:	dec00804 	addi	sp,sp,32
  8074fc:	f800283a 	ret
  807500:	d809883a 	mov	r4,sp
  807504:	0806a4c0 	call	806a4c <__lo0bits>
  807508:	d8c00017 	ldw	r3,0(sp)
  80750c:	04000044 	movi	r16,1
  807510:	9c000415 	stw	r16,16(r19)
  807514:	98c00515 	stw	r3,20(r19)
  807518:	10800804 	addi	r2,r2,32
  80751c:	883fe126 	beq	r17,zero,8074a4 <__alt_mem_epcs_flash_controller_0+0xff7fe4a4>
  807520:	00c00d44 	movi	r3,53
  807524:	8c7ef344 	addi	r17,r17,-1075
  807528:	88a3883a 	add	r17,r17,r2
  80752c:	1885c83a 	sub	r2,r3,r2
  807530:	d8c00817 	ldw	r3,32(sp)
  807534:	94400015 	stw	r17,0(r18)
  807538:	18800015 	stw	r2,0(r3)
  80753c:	003fe706 	br	8074dc <__alt_mem_epcs_flash_controller_0+0xff7fe4dc>
  807540:	01000804 	movi	r4,32
  807544:	2089c83a 	sub	r4,r4,r2
  807548:	1908983a 	sll	r4,r3,r4
  80754c:	d9400117 	ldw	r5,4(sp)
  807550:	1886d83a 	srl	r3,r3,r2
  807554:	2148b03a 	or	r4,r4,r5
  807558:	99000515 	stw	r4,20(r19)
  80755c:	d8c00015 	stw	r3,0(sp)
  807560:	003fca06 	br	80748c <__alt_mem_epcs_flash_controller_0+0xff7fe48c>

00807564 <__ratio>:
  807564:	defff904 	addi	sp,sp,-28
  807568:	dc400315 	stw	r17,12(sp)
  80756c:	2823883a 	mov	r17,r5
  807570:	d9400104 	addi	r5,sp,4
  807574:	dfc00615 	stw	ra,24(sp)
  807578:	dcc00515 	stw	r19,20(sp)
  80757c:	dc800415 	stw	r18,16(sp)
  807580:	2027883a 	mov	r19,r4
  807584:	dc000215 	stw	r16,8(sp)
  807588:	080730c0 	call	80730c <__b2d>
  80758c:	d80b883a 	mov	r5,sp
  807590:	8809883a 	mov	r4,r17
  807594:	1025883a 	mov	r18,r2
  807598:	1821883a 	mov	r16,r3
  80759c:	080730c0 	call	80730c <__b2d>
  8075a0:	8a000417 	ldw	r8,16(r17)
  8075a4:	99000417 	ldw	r4,16(r19)
  8075a8:	d9400117 	ldw	r5,4(sp)
  8075ac:	2209c83a 	sub	r4,r4,r8
  8075b0:	2010917a 	slli	r8,r4,5
  8075b4:	d9000017 	ldw	r4,0(sp)
  8075b8:	2909c83a 	sub	r4,r5,r4
  8075bc:	4109883a 	add	r4,r8,r4
  8075c0:	01000e0e 	bge	zero,r4,8075fc <__ratio+0x98>
  8075c4:	2008953a 	slli	r4,r4,20
  8075c8:	2421883a 	add	r16,r4,r16
  8075cc:	100d883a 	mov	r6,r2
  8075d0:	180f883a 	mov	r7,r3
  8075d4:	9009883a 	mov	r4,r18
  8075d8:	800b883a 	mov	r5,r16
  8075dc:	080b6500 	call	80b650 <__divdf3>
  8075e0:	dfc00617 	ldw	ra,24(sp)
  8075e4:	dcc00517 	ldw	r19,20(sp)
  8075e8:	dc800417 	ldw	r18,16(sp)
  8075ec:	dc400317 	ldw	r17,12(sp)
  8075f0:	dc000217 	ldw	r16,8(sp)
  8075f4:	dec00704 	addi	sp,sp,28
  8075f8:	f800283a 	ret
  8075fc:	2008953a 	slli	r4,r4,20
  807600:	1907c83a 	sub	r3,r3,r4
  807604:	003ff106 	br	8075cc <__alt_mem_epcs_flash_controller_0+0xff7fe5cc>

00807608 <_mprec_log10>:
  807608:	defffe04 	addi	sp,sp,-8
  80760c:	dc000015 	stw	r16,0(sp)
  807610:	dfc00115 	stw	ra,4(sp)
  807614:	008005c4 	movi	r2,23
  807618:	2021883a 	mov	r16,r4
  80761c:	11000d0e 	bge	r2,r4,807654 <_mprec_log10+0x4c>
  807620:	0005883a 	mov	r2,zero
  807624:	00cffc34 	movhi	r3,16368
  807628:	843fffc4 	addi	r16,r16,-1
  80762c:	000d883a 	mov	r6,zero
  807630:	01d00934 	movhi	r7,16420
  807634:	1009883a 	mov	r4,r2
  807638:	180b883a 	mov	r5,r3
  80763c:	080c2780 	call	80c278 <__muldf3>
  807640:	803ff91e 	bne	r16,zero,807628 <__alt_mem_epcs_flash_controller_0+0xff7fe628>
  807644:	dfc00117 	ldw	ra,4(sp)
  807648:	dc000017 	ldw	r16,0(sp)
  80764c:	dec00204 	addi	sp,sp,8
  807650:	f800283a 	ret
  807654:	202090fa 	slli	r16,r4,3
  807658:	008020b4 	movhi	r2,130
  80765c:	10a83204 	addi	r2,r2,-24376
  807660:	1421883a 	add	r16,r2,r16
  807664:	80800017 	ldw	r2,0(r16)
  807668:	80c00117 	ldw	r3,4(r16)
  80766c:	dfc00117 	ldw	ra,4(sp)
  807670:	dc000017 	ldw	r16,0(sp)
  807674:	dec00204 	addi	sp,sp,8
  807678:	f800283a 	ret

0080767c <__copybits>:
  80767c:	297fffc4 	addi	r5,r5,-1
  807680:	280fd17a 	srai	r7,r5,5
  807684:	30c00417 	ldw	r3,16(r6)
  807688:	30800504 	addi	r2,r6,20
  80768c:	39c00044 	addi	r7,r7,1
  807690:	18c7883a 	add	r3,r3,r3
  807694:	39cf883a 	add	r7,r7,r7
  807698:	18c7883a 	add	r3,r3,r3
  80769c:	39cf883a 	add	r7,r7,r7
  8076a0:	10c7883a 	add	r3,r2,r3
  8076a4:	21cf883a 	add	r7,r4,r7
  8076a8:	10c00d2e 	bgeu	r2,r3,8076e0 <__copybits+0x64>
  8076ac:	200b883a 	mov	r5,r4
  8076b0:	12000017 	ldw	r8,0(r2)
  8076b4:	29400104 	addi	r5,r5,4
  8076b8:	10800104 	addi	r2,r2,4
  8076bc:	2a3fff15 	stw	r8,-4(r5)
  8076c0:	10fffb36 	bltu	r2,r3,8076b0 <__alt_mem_epcs_flash_controller_0+0xff7fe6b0>
  8076c4:	1985c83a 	sub	r2,r3,r6
  8076c8:	10bffac4 	addi	r2,r2,-21
  8076cc:	1004d0ba 	srli	r2,r2,2
  8076d0:	10800044 	addi	r2,r2,1
  8076d4:	1085883a 	add	r2,r2,r2
  8076d8:	1085883a 	add	r2,r2,r2
  8076dc:	2089883a 	add	r4,r4,r2
  8076e0:	21c0032e 	bgeu	r4,r7,8076f0 <__copybits+0x74>
  8076e4:	20000015 	stw	zero,0(r4)
  8076e8:	21000104 	addi	r4,r4,4
  8076ec:	21fffd36 	bltu	r4,r7,8076e4 <__alt_mem_epcs_flash_controller_0+0xff7fe6e4>
  8076f0:	f800283a 	ret

008076f4 <__any_on>:
  8076f4:	20c00417 	ldw	r3,16(r4)
  8076f8:	2805d17a 	srai	r2,r5,5
  8076fc:	21000504 	addi	r4,r4,20
  807700:	18800d0e 	bge	r3,r2,807738 <__any_on+0x44>
  807704:	18c7883a 	add	r3,r3,r3
  807708:	18c7883a 	add	r3,r3,r3
  80770c:	20c7883a 	add	r3,r4,r3
  807710:	20c0192e 	bgeu	r4,r3,807778 <__any_on+0x84>
  807714:	18bfff17 	ldw	r2,-4(r3)
  807718:	18ffff04 	addi	r3,r3,-4
  80771c:	1000041e 	bne	r2,zero,807730 <__any_on+0x3c>
  807720:	20c0142e 	bgeu	r4,r3,807774 <__any_on+0x80>
  807724:	18ffff04 	addi	r3,r3,-4
  807728:	19400017 	ldw	r5,0(r3)
  80772c:	283ffc26 	beq	r5,zero,807720 <__alt_mem_epcs_flash_controller_0+0xff7fe720>
  807730:	00800044 	movi	r2,1
  807734:	f800283a 	ret
  807738:	10c00a0e 	bge	r2,r3,807764 <__any_on+0x70>
  80773c:	1085883a 	add	r2,r2,r2
  807740:	1085883a 	add	r2,r2,r2
  807744:	294007cc 	andi	r5,r5,31
  807748:	2087883a 	add	r3,r4,r2
  80774c:	283ff026 	beq	r5,zero,807710 <__alt_mem_epcs_flash_controller_0+0xff7fe710>
  807750:	19800017 	ldw	r6,0(r3)
  807754:	3144d83a 	srl	r2,r6,r5
  807758:	114a983a 	sll	r5,r2,r5
  80775c:	317ff41e 	bne	r6,r5,807730 <__alt_mem_epcs_flash_controller_0+0xff7fe730>
  807760:	003feb06 	br	807710 <__alt_mem_epcs_flash_controller_0+0xff7fe710>
  807764:	1085883a 	add	r2,r2,r2
  807768:	1085883a 	add	r2,r2,r2
  80776c:	2087883a 	add	r3,r4,r2
  807770:	003fe706 	br	807710 <__alt_mem_epcs_flash_controller_0+0xff7fe710>
  807774:	f800283a 	ret
  807778:	0005883a 	mov	r2,zero
  80777c:	f800283a 	ret

00807780 <_realloc_r>:
  807780:	defff604 	addi	sp,sp,-40
  807784:	dc800215 	stw	r18,8(sp)
  807788:	dfc00915 	stw	ra,36(sp)
  80778c:	df000815 	stw	fp,32(sp)
  807790:	ddc00715 	stw	r23,28(sp)
  807794:	dd800615 	stw	r22,24(sp)
  807798:	dd400515 	stw	r21,20(sp)
  80779c:	dd000415 	stw	r20,16(sp)
  8077a0:	dcc00315 	stw	r19,12(sp)
  8077a4:	dc400115 	stw	r17,4(sp)
  8077a8:	dc000015 	stw	r16,0(sp)
  8077ac:	3025883a 	mov	r18,r6
  8077b0:	2800b726 	beq	r5,zero,807a90 <_realloc_r+0x310>
  8077b4:	282b883a 	mov	r21,r5
  8077b8:	2029883a 	mov	r20,r4
  8077bc:	080e2ac0 	call	80e2ac <__malloc_lock>
  8077c0:	a8bfff17 	ldw	r2,-4(r21)
  8077c4:	043fff04 	movi	r16,-4
  8077c8:	90c002c4 	addi	r3,r18,11
  8077cc:	01000584 	movi	r4,22
  8077d0:	acfffe04 	addi	r19,r21,-8
  8077d4:	1420703a 	and	r16,r2,r16
  8077d8:	20c0332e 	bgeu	r4,r3,8078a8 <_realloc_r+0x128>
  8077dc:	047ffe04 	movi	r17,-8
  8077e0:	1c62703a 	and	r17,r3,r17
  8077e4:	8807883a 	mov	r3,r17
  8077e8:	88005816 	blt	r17,zero,80794c <_realloc_r+0x1cc>
  8077ec:	8c805736 	bltu	r17,r18,80794c <_realloc_r+0x1cc>
  8077f0:	80c0300e 	bge	r16,r3,8078b4 <_realloc_r+0x134>
  8077f4:	070020b4 	movhi	fp,130
  8077f8:	e72a3904 	addi	fp,fp,-22300
  8077fc:	e1c00217 	ldw	r7,8(fp)
  807800:	9c09883a 	add	r4,r19,r16
  807804:	22000117 	ldw	r8,4(r4)
  807808:	21c06326 	beq	r4,r7,807998 <_realloc_r+0x218>
  80780c:	017fff84 	movi	r5,-2
  807810:	414a703a 	and	r5,r8,r5
  807814:	214b883a 	add	r5,r4,r5
  807818:	29800117 	ldw	r6,4(r5)
  80781c:	3180004c 	andi	r6,r6,1
  807820:	30003f26 	beq	r6,zero,807920 <_realloc_r+0x1a0>
  807824:	1080004c 	andi	r2,r2,1
  807828:	10008326 	beq	r2,zero,807a38 <_realloc_r+0x2b8>
  80782c:	900b883a 	mov	r5,r18
  807830:	a009883a 	mov	r4,r20
  807834:	0805a0c0 	call	805a0c <_malloc_r>
  807838:	1025883a 	mov	r18,r2
  80783c:	10011e26 	beq	r2,zero,807cb8 <_realloc_r+0x538>
  807840:	a93fff17 	ldw	r4,-4(r21)
  807844:	10fffe04 	addi	r3,r2,-8
  807848:	00bfff84 	movi	r2,-2
  80784c:	2084703a 	and	r2,r4,r2
  807850:	9885883a 	add	r2,r19,r2
  807854:	1880ee26 	beq	r3,r2,807c10 <_realloc_r+0x490>
  807858:	81bfff04 	addi	r6,r16,-4
  80785c:	00800904 	movi	r2,36
  807860:	1180b836 	bltu	r2,r6,807b44 <_realloc_r+0x3c4>
  807864:	00c004c4 	movi	r3,19
  807868:	19809636 	bltu	r3,r6,807ac4 <_realloc_r+0x344>
  80786c:	9005883a 	mov	r2,r18
  807870:	a807883a 	mov	r3,r21
  807874:	19000017 	ldw	r4,0(r3)
  807878:	11000015 	stw	r4,0(r2)
  80787c:	19000117 	ldw	r4,4(r3)
  807880:	11000115 	stw	r4,4(r2)
  807884:	18c00217 	ldw	r3,8(r3)
  807888:	10c00215 	stw	r3,8(r2)
  80788c:	a80b883a 	mov	r5,r21
  807890:	a009883a 	mov	r4,r20
  807894:	0804e140 	call	804e14 <_free_r>
  807898:	a009883a 	mov	r4,r20
  80789c:	080e3cc0 	call	80e3cc <__malloc_unlock>
  8078a0:	9005883a 	mov	r2,r18
  8078a4:	00001206 	br	8078f0 <_realloc_r+0x170>
  8078a8:	00c00404 	movi	r3,16
  8078ac:	1823883a 	mov	r17,r3
  8078b0:	003fce06 	br	8077ec <__alt_mem_epcs_flash_controller_0+0xff7fe7ec>
  8078b4:	a825883a 	mov	r18,r21
  8078b8:	8445c83a 	sub	r2,r16,r17
  8078bc:	00c003c4 	movi	r3,15
  8078c0:	18802636 	bltu	r3,r2,80795c <_realloc_r+0x1dc>
  8078c4:	99800117 	ldw	r6,4(r19)
  8078c8:	9c07883a 	add	r3,r19,r16
  8078cc:	3180004c 	andi	r6,r6,1
  8078d0:	3420b03a 	or	r16,r6,r16
  8078d4:	9c000115 	stw	r16,4(r19)
  8078d8:	18800117 	ldw	r2,4(r3)
  8078dc:	10800054 	ori	r2,r2,1
  8078e0:	18800115 	stw	r2,4(r3)
  8078e4:	a009883a 	mov	r4,r20
  8078e8:	080e3cc0 	call	80e3cc <__malloc_unlock>
  8078ec:	9005883a 	mov	r2,r18
  8078f0:	dfc00917 	ldw	ra,36(sp)
  8078f4:	df000817 	ldw	fp,32(sp)
  8078f8:	ddc00717 	ldw	r23,28(sp)
  8078fc:	dd800617 	ldw	r22,24(sp)
  807900:	dd400517 	ldw	r21,20(sp)
  807904:	dd000417 	ldw	r20,16(sp)
  807908:	dcc00317 	ldw	r19,12(sp)
  80790c:	dc800217 	ldw	r18,8(sp)
  807910:	dc400117 	ldw	r17,4(sp)
  807914:	dc000017 	ldw	r16,0(sp)
  807918:	dec00a04 	addi	sp,sp,40
  80791c:	f800283a 	ret
  807920:	017fff04 	movi	r5,-4
  807924:	414a703a 	and	r5,r8,r5
  807928:	814d883a 	add	r6,r16,r5
  80792c:	30c01f16 	blt	r6,r3,8079ac <_realloc_r+0x22c>
  807930:	20800317 	ldw	r2,12(r4)
  807934:	20c00217 	ldw	r3,8(r4)
  807938:	a825883a 	mov	r18,r21
  80793c:	3021883a 	mov	r16,r6
  807940:	18800315 	stw	r2,12(r3)
  807944:	10c00215 	stw	r3,8(r2)
  807948:	003fdb06 	br	8078b8 <__alt_mem_epcs_flash_controller_0+0xff7fe8b8>
  80794c:	00800304 	movi	r2,12
  807950:	a0800015 	stw	r2,0(r20)
  807954:	0005883a 	mov	r2,zero
  807958:	003fe506 	br	8078f0 <__alt_mem_epcs_flash_controller_0+0xff7fe8f0>
  80795c:	98c00117 	ldw	r3,4(r19)
  807960:	9c4b883a 	add	r5,r19,r17
  807964:	11000054 	ori	r4,r2,1
  807968:	18c0004c 	andi	r3,r3,1
  80796c:	1c62b03a 	or	r17,r3,r17
  807970:	9c400115 	stw	r17,4(r19)
  807974:	29000115 	stw	r4,4(r5)
  807978:	2885883a 	add	r2,r5,r2
  80797c:	10c00117 	ldw	r3,4(r2)
  807980:	29400204 	addi	r5,r5,8
  807984:	a009883a 	mov	r4,r20
  807988:	18c00054 	ori	r3,r3,1
  80798c:	10c00115 	stw	r3,4(r2)
  807990:	0804e140 	call	804e14 <_free_r>
  807994:	003fd306 	br	8078e4 <__alt_mem_epcs_flash_controller_0+0xff7fe8e4>
  807998:	017fff04 	movi	r5,-4
  80799c:	414a703a 	and	r5,r8,r5
  8079a0:	89800404 	addi	r6,r17,16
  8079a4:	8151883a 	add	r8,r16,r5
  8079a8:	4180590e 	bge	r8,r6,807b10 <_realloc_r+0x390>
  8079ac:	1080004c 	andi	r2,r2,1
  8079b0:	103f9e1e 	bne	r2,zero,80782c <__alt_mem_epcs_flash_controller_0+0xff7fe82c>
  8079b4:	adbffe17 	ldw	r22,-8(r21)
  8079b8:	00bfff04 	movi	r2,-4
  8079bc:	9dadc83a 	sub	r22,r19,r22
  8079c0:	b1800117 	ldw	r6,4(r22)
  8079c4:	3084703a 	and	r2,r6,r2
  8079c8:	20002026 	beq	r4,zero,807a4c <_realloc_r+0x2cc>
  8079cc:	80af883a 	add	r23,r16,r2
  8079d0:	b96f883a 	add	r23,r23,r5
  8079d4:	21c05f26 	beq	r4,r7,807b54 <_realloc_r+0x3d4>
  8079d8:	b8c01c16 	blt	r23,r3,807a4c <_realloc_r+0x2cc>
  8079dc:	20800317 	ldw	r2,12(r4)
  8079e0:	20c00217 	ldw	r3,8(r4)
  8079e4:	81bfff04 	addi	r6,r16,-4
  8079e8:	01000904 	movi	r4,36
  8079ec:	18800315 	stw	r2,12(r3)
  8079f0:	10c00215 	stw	r3,8(r2)
  8079f4:	b0c00217 	ldw	r3,8(r22)
  8079f8:	b0800317 	ldw	r2,12(r22)
  8079fc:	b4800204 	addi	r18,r22,8
  807a00:	18800315 	stw	r2,12(r3)
  807a04:	10c00215 	stw	r3,8(r2)
  807a08:	21801b36 	bltu	r4,r6,807a78 <_realloc_r+0x2f8>
  807a0c:	008004c4 	movi	r2,19
  807a10:	1180352e 	bgeu	r2,r6,807ae8 <_realloc_r+0x368>
  807a14:	a8800017 	ldw	r2,0(r21)
  807a18:	b0800215 	stw	r2,8(r22)
  807a1c:	a8800117 	ldw	r2,4(r21)
  807a20:	b0800315 	stw	r2,12(r22)
  807a24:	008006c4 	movi	r2,27
  807a28:	11807f36 	bltu	r2,r6,807c28 <_realloc_r+0x4a8>
  807a2c:	b0800404 	addi	r2,r22,16
  807a30:	ad400204 	addi	r21,r21,8
  807a34:	00002d06 	br	807aec <_realloc_r+0x36c>
  807a38:	adbffe17 	ldw	r22,-8(r21)
  807a3c:	00bfff04 	movi	r2,-4
  807a40:	9dadc83a 	sub	r22,r19,r22
  807a44:	b1000117 	ldw	r4,4(r22)
  807a48:	2084703a 	and	r2,r4,r2
  807a4c:	b03f7726 	beq	r22,zero,80782c <__alt_mem_epcs_flash_controller_0+0xff7fe82c>
  807a50:	80af883a 	add	r23,r16,r2
  807a54:	b8ff7516 	blt	r23,r3,80782c <__alt_mem_epcs_flash_controller_0+0xff7fe82c>
  807a58:	b0800317 	ldw	r2,12(r22)
  807a5c:	b0c00217 	ldw	r3,8(r22)
  807a60:	81bfff04 	addi	r6,r16,-4
  807a64:	01000904 	movi	r4,36
  807a68:	18800315 	stw	r2,12(r3)
  807a6c:	10c00215 	stw	r3,8(r2)
  807a70:	b4800204 	addi	r18,r22,8
  807a74:	21bfe52e 	bgeu	r4,r6,807a0c <__alt_mem_epcs_flash_controller_0+0xff7fea0c>
  807a78:	a80b883a 	mov	r5,r21
  807a7c:	9009883a 	mov	r4,r18
  807a80:	08064440 	call	806444 <memmove>
  807a84:	b821883a 	mov	r16,r23
  807a88:	b027883a 	mov	r19,r22
  807a8c:	003f8a06 	br	8078b8 <__alt_mem_epcs_flash_controller_0+0xff7fe8b8>
  807a90:	300b883a 	mov	r5,r6
  807a94:	dfc00917 	ldw	ra,36(sp)
  807a98:	df000817 	ldw	fp,32(sp)
  807a9c:	ddc00717 	ldw	r23,28(sp)
  807aa0:	dd800617 	ldw	r22,24(sp)
  807aa4:	dd400517 	ldw	r21,20(sp)
  807aa8:	dd000417 	ldw	r20,16(sp)
  807aac:	dcc00317 	ldw	r19,12(sp)
  807ab0:	dc800217 	ldw	r18,8(sp)
  807ab4:	dc400117 	ldw	r17,4(sp)
  807ab8:	dc000017 	ldw	r16,0(sp)
  807abc:	dec00a04 	addi	sp,sp,40
  807ac0:	0805a0c1 	jmpi	805a0c <_malloc_r>
  807ac4:	a8c00017 	ldw	r3,0(r21)
  807ac8:	90c00015 	stw	r3,0(r18)
  807acc:	a8c00117 	ldw	r3,4(r21)
  807ad0:	90c00115 	stw	r3,4(r18)
  807ad4:	00c006c4 	movi	r3,27
  807ad8:	19804536 	bltu	r3,r6,807bf0 <_realloc_r+0x470>
  807adc:	90800204 	addi	r2,r18,8
  807ae0:	a8c00204 	addi	r3,r21,8
  807ae4:	003f6306 	br	807874 <__alt_mem_epcs_flash_controller_0+0xff7fe874>
  807ae8:	9005883a 	mov	r2,r18
  807aec:	a8c00017 	ldw	r3,0(r21)
  807af0:	b821883a 	mov	r16,r23
  807af4:	b027883a 	mov	r19,r22
  807af8:	10c00015 	stw	r3,0(r2)
  807afc:	a8c00117 	ldw	r3,4(r21)
  807b00:	10c00115 	stw	r3,4(r2)
  807b04:	a8c00217 	ldw	r3,8(r21)
  807b08:	10c00215 	stw	r3,8(r2)
  807b0c:	003f6a06 	br	8078b8 <__alt_mem_epcs_flash_controller_0+0xff7fe8b8>
  807b10:	9c67883a 	add	r19,r19,r17
  807b14:	4445c83a 	sub	r2,r8,r17
  807b18:	e4c00215 	stw	r19,8(fp)
  807b1c:	10800054 	ori	r2,r2,1
  807b20:	98800115 	stw	r2,4(r19)
  807b24:	a8bfff17 	ldw	r2,-4(r21)
  807b28:	a009883a 	mov	r4,r20
  807b2c:	1080004c 	andi	r2,r2,1
  807b30:	1462b03a 	or	r17,r2,r17
  807b34:	ac7fff15 	stw	r17,-4(r21)
  807b38:	080e3cc0 	call	80e3cc <__malloc_unlock>
  807b3c:	a805883a 	mov	r2,r21
  807b40:	003f6b06 	br	8078f0 <__alt_mem_epcs_flash_controller_0+0xff7fe8f0>
  807b44:	a80b883a 	mov	r5,r21
  807b48:	9009883a 	mov	r4,r18
  807b4c:	08064440 	call	806444 <memmove>
  807b50:	003f4e06 	br	80788c <__alt_mem_epcs_flash_controller_0+0xff7fe88c>
  807b54:	89000404 	addi	r4,r17,16
  807b58:	b93fbc16 	blt	r23,r4,807a4c <__alt_mem_epcs_flash_controller_0+0xff7fea4c>
  807b5c:	b0800317 	ldw	r2,12(r22)
  807b60:	b0c00217 	ldw	r3,8(r22)
  807b64:	81bfff04 	addi	r6,r16,-4
  807b68:	01000904 	movi	r4,36
  807b6c:	18800315 	stw	r2,12(r3)
  807b70:	10c00215 	stw	r3,8(r2)
  807b74:	b4800204 	addi	r18,r22,8
  807b78:	21804336 	bltu	r4,r6,807c88 <_realloc_r+0x508>
  807b7c:	008004c4 	movi	r2,19
  807b80:	11803f2e 	bgeu	r2,r6,807c80 <_realloc_r+0x500>
  807b84:	a8800017 	ldw	r2,0(r21)
  807b88:	b0800215 	stw	r2,8(r22)
  807b8c:	a8800117 	ldw	r2,4(r21)
  807b90:	b0800315 	stw	r2,12(r22)
  807b94:	008006c4 	movi	r2,27
  807b98:	11803f36 	bltu	r2,r6,807c98 <_realloc_r+0x518>
  807b9c:	b0800404 	addi	r2,r22,16
  807ba0:	ad400204 	addi	r21,r21,8
  807ba4:	a8c00017 	ldw	r3,0(r21)
  807ba8:	10c00015 	stw	r3,0(r2)
  807bac:	a8c00117 	ldw	r3,4(r21)
  807bb0:	10c00115 	stw	r3,4(r2)
  807bb4:	a8c00217 	ldw	r3,8(r21)
  807bb8:	10c00215 	stw	r3,8(r2)
  807bbc:	b447883a 	add	r3,r22,r17
  807bc0:	bc45c83a 	sub	r2,r23,r17
  807bc4:	e0c00215 	stw	r3,8(fp)
  807bc8:	10800054 	ori	r2,r2,1
  807bcc:	18800115 	stw	r2,4(r3)
  807bd0:	b0800117 	ldw	r2,4(r22)
  807bd4:	a009883a 	mov	r4,r20
  807bd8:	1080004c 	andi	r2,r2,1
  807bdc:	1462b03a 	or	r17,r2,r17
  807be0:	b4400115 	stw	r17,4(r22)
  807be4:	080e3cc0 	call	80e3cc <__malloc_unlock>
  807be8:	9005883a 	mov	r2,r18
  807bec:	003f4006 	br	8078f0 <__alt_mem_epcs_flash_controller_0+0xff7fe8f0>
  807bf0:	a8c00217 	ldw	r3,8(r21)
  807bf4:	90c00215 	stw	r3,8(r18)
  807bf8:	a8c00317 	ldw	r3,12(r21)
  807bfc:	90c00315 	stw	r3,12(r18)
  807c00:	30801126 	beq	r6,r2,807c48 <_realloc_r+0x4c8>
  807c04:	90800404 	addi	r2,r18,16
  807c08:	a8c00404 	addi	r3,r21,16
  807c0c:	003f1906 	br	807874 <__alt_mem_epcs_flash_controller_0+0xff7fe874>
  807c10:	90ffff17 	ldw	r3,-4(r18)
  807c14:	00bfff04 	movi	r2,-4
  807c18:	a825883a 	mov	r18,r21
  807c1c:	1884703a 	and	r2,r3,r2
  807c20:	80a1883a 	add	r16,r16,r2
  807c24:	003f2406 	br	8078b8 <__alt_mem_epcs_flash_controller_0+0xff7fe8b8>
  807c28:	a8800217 	ldw	r2,8(r21)
  807c2c:	b0800415 	stw	r2,16(r22)
  807c30:	a8800317 	ldw	r2,12(r21)
  807c34:	b0800515 	stw	r2,20(r22)
  807c38:	31000a26 	beq	r6,r4,807c64 <_realloc_r+0x4e4>
  807c3c:	b0800604 	addi	r2,r22,24
  807c40:	ad400404 	addi	r21,r21,16
  807c44:	003fa906 	br	807aec <__alt_mem_epcs_flash_controller_0+0xff7feaec>
  807c48:	a9000417 	ldw	r4,16(r21)
  807c4c:	90800604 	addi	r2,r18,24
  807c50:	a8c00604 	addi	r3,r21,24
  807c54:	91000415 	stw	r4,16(r18)
  807c58:	a9000517 	ldw	r4,20(r21)
  807c5c:	91000515 	stw	r4,20(r18)
  807c60:	003f0406 	br	807874 <__alt_mem_epcs_flash_controller_0+0xff7fe874>
  807c64:	a8c00417 	ldw	r3,16(r21)
  807c68:	ad400604 	addi	r21,r21,24
  807c6c:	b0800804 	addi	r2,r22,32
  807c70:	b0c00615 	stw	r3,24(r22)
  807c74:	a8ffff17 	ldw	r3,-4(r21)
  807c78:	b0c00715 	stw	r3,28(r22)
  807c7c:	003f9b06 	br	807aec <__alt_mem_epcs_flash_controller_0+0xff7feaec>
  807c80:	9005883a 	mov	r2,r18
  807c84:	003fc706 	br	807ba4 <__alt_mem_epcs_flash_controller_0+0xff7feba4>
  807c88:	a80b883a 	mov	r5,r21
  807c8c:	9009883a 	mov	r4,r18
  807c90:	08064440 	call	806444 <memmove>
  807c94:	003fc906 	br	807bbc <__alt_mem_epcs_flash_controller_0+0xff7febbc>
  807c98:	a8800217 	ldw	r2,8(r21)
  807c9c:	b0800415 	stw	r2,16(r22)
  807ca0:	a8800317 	ldw	r2,12(r21)
  807ca4:	b0800515 	stw	r2,20(r22)
  807ca8:	31000726 	beq	r6,r4,807cc8 <_realloc_r+0x548>
  807cac:	b0800604 	addi	r2,r22,24
  807cb0:	ad400404 	addi	r21,r21,16
  807cb4:	003fbb06 	br	807ba4 <__alt_mem_epcs_flash_controller_0+0xff7feba4>
  807cb8:	a009883a 	mov	r4,r20
  807cbc:	080e3cc0 	call	80e3cc <__malloc_unlock>
  807cc0:	0005883a 	mov	r2,zero
  807cc4:	003f0a06 	br	8078f0 <__alt_mem_epcs_flash_controller_0+0xff7fe8f0>
  807cc8:	a8c00417 	ldw	r3,16(r21)
  807ccc:	ad400604 	addi	r21,r21,24
  807cd0:	b0800804 	addi	r2,r22,32
  807cd4:	b0c00615 	stw	r3,24(r22)
  807cd8:	a8ffff17 	ldw	r3,-4(r21)
  807cdc:	b0c00715 	stw	r3,28(r22)
  807ce0:	003fb006 	br	807ba4 <__alt_mem_epcs_flash_controller_0+0xff7feba4>

00807ce4 <__fpclassifyd>:
  807ce4:	00a00034 	movhi	r2,32768
  807ce8:	10bfffc4 	addi	r2,r2,-1
  807cec:	2884703a 	and	r2,r5,r2
  807cf0:	10000726 	beq	r2,zero,807d10 <__fpclassifyd+0x2c>
  807cf4:	00fffc34 	movhi	r3,65520
  807cf8:	019ff834 	movhi	r6,32736
  807cfc:	28c7883a 	add	r3,r5,r3
  807d00:	31bfffc4 	addi	r6,r6,-1
  807d04:	30c00536 	bltu	r6,r3,807d1c <__fpclassifyd+0x38>
  807d08:	00800104 	movi	r2,4
  807d0c:	f800283a 	ret
  807d10:	2000021e 	bne	r4,zero,807d1c <__fpclassifyd+0x38>
  807d14:	00800084 	movi	r2,2
  807d18:	f800283a 	ret
  807d1c:	00dffc34 	movhi	r3,32752
  807d20:	019ff834 	movhi	r6,32736
  807d24:	28cb883a 	add	r5,r5,r3
  807d28:	31bfffc4 	addi	r6,r6,-1
  807d2c:	317ff62e 	bgeu	r6,r5,807d08 <__alt_mem_epcs_flash_controller_0+0xff7fed08>
  807d30:	01400434 	movhi	r5,16
  807d34:	297fffc4 	addi	r5,r5,-1
  807d38:	28800236 	bltu	r5,r2,807d44 <__fpclassifyd+0x60>
  807d3c:	008000c4 	movi	r2,3
  807d40:	f800283a 	ret
  807d44:	10c00226 	beq	r2,r3,807d50 <__fpclassifyd+0x6c>
  807d48:	0005883a 	mov	r2,zero
  807d4c:	f800283a 	ret
  807d50:	2005003a 	cmpeq	r2,r4,zero
  807d54:	f800283a 	ret

00807d58 <_sbrk_r>:
  807d58:	defffd04 	addi	sp,sp,-12
  807d5c:	dc000015 	stw	r16,0(sp)
  807d60:	040020b4 	movhi	r16,130
  807d64:	dc400115 	stw	r17,4(sp)
  807d68:	8430b404 	addi	r16,r16,-15664
  807d6c:	2023883a 	mov	r17,r4
  807d70:	2809883a 	mov	r4,r5
  807d74:	dfc00215 	stw	ra,8(sp)
  807d78:	80000015 	stw	zero,0(r16)
  807d7c:	080df9c0 	call	80df9c <sbrk>
  807d80:	00ffffc4 	movi	r3,-1
  807d84:	10c00526 	beq	r2,r3,807d9c <_sbrk_r+0x44>
  807d88:	dfc00217 	ldw	ra,8(sp)
  807d8c:	dc400117 	ldw	r17,4(sp)
  807d90:	dc000017 	ldw	r16,0(sp)
  807d94:	dec00304 	addi	sp,sp,12
  807d98:	f800283a 	ret
  807d9c:	80c00017 	ldw	r3,0(r16)
  807da0:	183ff926 	beq	r3,zero,807d88 <__alt_mem_epcs_flash_controller_0+0xff7fed88>
  807da4:	88c00015 	stw	r3,0(r17)
  807da8:	003ff706 	br	807d88 <__alt_mem_epcs_flash_controller_0+0xff7fed88>

00807dac <__sread>:
  807dac:	defffe04 	addi	sp,sp,-8
  807db0:	dc000015 	stw	r16,0(sp)
  807db4:	2821883a 	mov	r16,r5
  807db8:	2940038f 	ldh	r5,14(r5)
  807dbc:	dfc00115 	stw	ra,4(sp)
  807dc0:	0809c680 	call	809c68 <_read_r>
  807dc4:	10000716 	blt	r2,zero,807de4 <__sread+0x38>
  807dc8:	80c01417 	ldw	r3,80(r16)
  807dcc:	1887883a 	add	r3,r3,r2
  807dd0:	80c01415 	stw	r3,80(r16)
  807dd4:	dfc00117 	ldw	ra,4(sp)
  807dd8:	dc000017 	ldw	r16,0(sp)
  807ddc:	dec00204 	addi	sp,sp,8
  807de0:	f800283a 	ret
  807de4:	80c0030b 	ldhu	r3,12(r16)
  807de8:	18fbffcc 	andi	r3,r3,61439
  807dec:	80c0030d 	sth	r3,12(r16)
  807df0:	dfc00117 	ldw	ra,4(sp)
  807df4:	dc000017 	ldw	r16,0(sp)
  807df8:	dec00204 	addi	sp,sp,8
  807dfc:	f800283a 	ret

00807e00 <__seofread>:
  807e00:	0005883a 	mov	r2,zero
  807e04:	f800283a 	ret

00807e08 <__swrite>:
  807e08:	2880030b 	ldhu	r2,12(r5)
  807e0c:	defffb04 	addi	sp,sp,-20
  807e10:	dcc00315 	stw	r19,12(sp)
  807e14:	dc800215 	stw	r18,8(sp)
  807e18:	dc400115 	stw	r17,4(sp)
  807e1c:	dc000015 	stw	r16,0(sp)
  807e20:	dfc00415 	stw	ra,16(sp)
  807e24:	10c0400c 	andi	r3,r2,256
  807e28:	2821883a 	mov	r16,r5
  807e2c:	2023883a 	mov	r17,r4
  807e30:	3025883a 	mov	r18,r6
  807e34:	3827883a 	mov	r19,r7
  807e38:	18000526 	beq	r3,zero,807e50 <__swrite+0x48>
  807e3c:	2940038f 	ldh	r5,14(r5)
  807e40:	01c00084 	movi	r7,2
  807e44:	000d883a 	mov	r6,zero
  807e48:	0809c080 	call	809c08 <_lseek_r>
  807e4c:	8080030b 	ldhu	r2,12(r16)
  807e50:	8140038f 	ldh	r5,14(r16)
  807e54:	10bbffcc 	andi	r2,r2,61439
  807e58:	980f883a 	mov	r7,r19
  807e5c:	900d883a 	mov	r6,r18
  807e60:	8809883a 	mov	r4,r17
  807e64:	8080030d 	sth	r2,12(r16)
  807e68:	dfc00417 	ldw	ra,16(sp)
  807e6c:	dcc00317 	ldw	r19,12(sp)
  807e70:	dc800217 	ldw	r18,8(sp)
  807e74:	dc400117 	ldw	r17,4(sp)
  807e78:	dc000017 	ldw	r16,0(sp)
  807e7c:	dec00504 	addi	sp,sp,20
  807e80:	08096bc1 	jmpi	8096bc <_write_r>

00807e84 <__sseek>:
  807e84:	defffe04 	addi	sp,sp,-8
  807e88:	dc000015 	stw	r16,0(sp)
  807e8c:	2821883a 	mov	r16,r5
  807e90:	2940038f 	ldh	r5,14(r5)
  807e94:	dfc00115 	stw	ra,4(sp)
  807e98:	0809c080 	call	809c08 <_lseek_r>
  807e9c:	00ffffc4 	movi	r3,-1
  807ea0:	10c00826 	beq	r2,r3,807ec4 <__sseek+0x40>
  807ea4:	80c0030b 	ldhu	r3,12(r16)
  807ea8:	80801415 	stw	r2,80(r16)
  807eac:	18c40014 	ori	r3,r3,4096
  807eb0:	80c0030d 	sth	r3,12(r16)
  807eb4:	dfc00117 	ldw	ra,4(sp)
  807eb8:	dc000017 	ldw	r16,0(sp)
  807ebc:	dec00204 	addi	sp,sp,8
  807ec0:	f800283a 	ret
  807ec4:	80c0030b 	ldhu	r3,12(r16)
  807ec8:	18fbffcc 	andi	r3,r3,61439
  807ecc:	80c0030d 	sth	r3,12(r16)
  807ed0:	dfc00117 	ldw	ra,4(sp)
  807ed4:	dc000017 	ldw	r16,0(sp)
  807ed8:	dec00204 	addi	sp,sp,8
  807edc:	f800283a 	ret

00807ee0 <__sclose>:
  807ee0:	2940038f 	ldh	r5,14(r5)
  807ee4:	080971c1 	jmpi	80971c <_close_r>

00807ee8 <strcmp>:
  807ee8:	2144b03a 	or	r2,r4,r5
  807eec:	108000cc 	andi	r2,r2,3
  807ef0:	1000171e 	bne	r2,zero,807f50 <strcmp+0x68>
  807ef4:	20800017 	ldw	r2,0(r4)
  807ef8:	28c00017 	ldw	r3,0(r5)
  807efc:	10c0141e 	bne	r2,r3,807f50 <strcmp+0x68>
  807f00:	027fbff4 	movhi	r9,65279
  807f04:	4a7fbfc4 	addi	r9,r9,-257
  807f08:	0086303a 	nor	r3,zero,r2
  807f0c:	02202074 	movhi	r8,32897
  807f10:	1245883a 	add	r2,r2,r9
  807f14:	42202004 	addi	r8,r8,-32640
  807f18:	10c4703a 	and	r2,r2,r3
  807f1c:	1204703a 	and	r2,r2,r8
  807f20:	10000226 	beq	r2,zero,807f2c <strcmp+0x44>
  807f24:	00002306 	br	807fb4 <strcmp+0xcc>
  807f28:	1000221e 	bne	r2,zero,807fb4 <strcmp+0xcc>
  807f2c:	21000104 	addi	r4,r4,4
  807f30:	20c00017 	ldw	r3,0(r4)
  807f34:	29400104 	addi	r5,r5,4
  807f38:	29800017 	ldw	r6,0(r5)
  807f3c:	1a4f883a 	add	r7,r3,r9
  807f40:	00c4303a 	nor	r2,zero,r3
  807f44:	3884703a 	and	r2,r7,r2
  807f48:	1204703a 	and	r2,r2,r8
  807f4c:	19bff626 	beq	r3,r6,807f28 <__alt_mem_epcs_flash_controller_0+0xff7fef28>
  807f50:	20800003 	ldbu	r2,0(r4)
  807f54:	10c03fcc 	andi	r3,r2,255
  807f58:	18c0201c 	xori	r3,r3,128
  807f5c:	18ffe004 	addi	r3,r3,-128
  807f60:	18000c26 	beq	r3,zero,807f94 <strcmp+0xac>
  807f64:	29800007 	ldb	r6,0(r5)
  807f68:	19800326 	beq	r3,r6,807f78 <strcmp+0x90>
  807f6c:	00001306 	br	807fbc <strcmp+0xd4>
  807f70:	29800007 	ldb	r6,0(r5)
  807f74:	11800b1e 	bne	r2,r6,807fa4 <strcmp+0xbc>
  807f78:	21000044 	addi	r4,r4,1
  807f7c:	20c00003 	ldbu	r3,0(r4)
  807f80:	29400044 	addi	r5,r5,1
  807f84:	18803fcc 	andi	r2,r3,255
  807f88:	1080201c 	xori	r2,r2,128
  807f8c:	10bfe004 	addi	r2,r2,-128
  807f90:	103ff71e 	bne	r2,zero,807f70 <__alt_mem_epcs_flash_controller_0+0xff7fef70>
  807f94:	0007883a 	mov	r3,zero
  807f98:	28800003 	ldbu	r2,0(r5)
  807f9c:	1885c83a 	sub	r2,r3,r2
  807fa0:	f800283a 	ret
  807fa4:	28800003 	ldbu	r2,0(r5)
  807fa8:	18c03fcc 	andi	r3,r3,255
  807fac:	1885c83a 	sub	r2,r3,r2
  807fb0:	f800283a 	ret
  807fb4:	0005883a 	mov	r2,zero
  807fb8:	f800283a 	ret
  807fbc:	10c03fcc 	andi	r3,r2,255
  807fc0:	003ff506 	br	807f98 <__alt_mem_epcs_flash_controller_0+0xff7fef98>

00807fc4 <__sprint_r.part.0>:
  807fc4:	28801917 	ldw	r2,100(r5)
  807fc8:	defff604 	addi	sp,sp,-40
  807fcc:	dd400515 	stw	r21,20(sp)
  807fd0:	dfc00915 	stw	ra,36(sp)
  807fd4:	df000815 	stw	fp,32(sp)
  807fd8:	ddc00715 	stw	r23,28(sp)
  807fdc:	dd800615 	stw	r22,24(sp)
  807fe0:	dd000415 	stw	r20,16(sp)
  807fe4:	dcc00315 	stw	r19,12(sp)
  807fe8:	dc800215 	stw	r18,8(sp)
  807fec:	dc400115 	stw	r17,4(sp)
  807ff0:	dc000015 	stw	r16,0(sp)
  807ff4:	1088000c 	andi	r2,r2,8192
  807ff8:	302b883a 	mov	r21,r6
  807ffc:	10002e26 	beq	r2,zero,8080b8 <__sprint_r.part.0+0xf4>
  808000:	30800217 	ldw	r2,8(r6)
  808004:	35800017 	ldw	r22,0(r6)
  808008:	10002926 	beq	r2,zero,8080b0 <__sprint_r.part.0+0xec>
  80800c:	2827883a 	mov	r19,r5
  808010:	2029883a 	mov	r20,r4
  808014:	b5c00104 	addi	r23,r22,4
  808018:	04bfffc4 	movi	r18,-1
  80801c:	bc400017 	ldw	r17,0(r23)
  808020:	b4000017 	ldw	r16,0(r22)
  808024:	0039883a 	mov	fp,zero
  808028:	8822d0ba 	srli	r17,r17,2
  80802c:	8800031e 	bne	r17,zero,80803c <__sprint_r.part.0+0x78>
  808030:	00001806 	br	808094 <__sprint_r.part.0+0xd0>
  808034:	84000104 	addi	r16,r16,4
  808038:	8f001526 	beq	r17,fp,808090 <__sprint_r.part.0+0xcc>
  80803c:	81400017 	ldw	r5,0(r16)
  808040:	980d883a 	mov	r6,r19
  808044:	a009883a 	mov	r4,r20
  808048:	0809ab40 	call	809ab4 <_fputwc_r>
  80804c:	e7000044 	addi	fp,fp,1
  808050:	14bff81e 	bne	r2,r18,808034 <__alt_mem_epcs_flash_controller_0+0xff7ff034>
  808054:	9005883a 	mov	r2,r18
  808058:	a8000215 	stw	zero,8(r21)
  80805c:	a8000115 	stw	zero,4(r21)
  808060:	dfc00917 	ldw	ra,36(sp)
  808064:	df000817 	ldw	fp,32(sp)
  808068:	ddc00717 	ldw	r23,28(sp)
  80806c:	dd800617 	ldw	r22,24(sp)
  808070:	dd400517 	ldw	r21,20(sp)
  808074:	dd000417 	ldw	r20,16(sp)
  808078:	dcc00317 	ldw	r19,12(sp)
  80807c:	dc800217 	ldw	r18,8(sp)
  808080:	dc400117 	ldw	r17,4(sp)
  808084:	dc000017 	ldw	r16,0(sp)
  808088:	dec00a04 	addi	sp,sp,40
  80808c:	f800283a 	ret
  808090:	a8800217 	ldw	r2,8(r21)
  808094:	8c63883a 	add	r17,r17,r17
  808098:	8c63883a 	add	r17,r17,r17
  80809c:	1445c83a 	sub	r2,r2,r17
  8080a0:	a8800215 	stw	r2,8(r21)
  8080a4:	b5800204 	addi	r22,r22,8
  8080a8:	bdc00204 	addi	r23,r23,8
  8080ac:	103fdb1e 	bne	r2,zero,80801c <__alt_mem_epcs_flash_controller_0+0xff7ff01c>
  8080b0:	0005883a 	mov	r2,zero
  8080b4:	003fe806 	br	808058 <__alt_mem_epcs_flash_controller_0+0xff7ff058>
  8080b8:	08051240 	call	805124 <__sfvwrite_r>
  8080bc:	003fe606 	br	808058 <__alt_mem_epcs_flash_controller_0+0xff7ff058>

008080c0 <__sprint_r>:
  8080c0:	30c00217 	ldw	r3,8(r6)
  8080c4:	18000126 	beq	r3,zero,8080cc <__sprint_r+0xc>
  8080c8:	0807fc41 	jmpi	807fc4 <__sprint_r.part.0>
  8080cc:	30000115 	stw	zero,4(r6)
  8080d0:	0005883a 	mov	r2,zero
  8080d4:	f800283a 	ret

008080d8 <___vfiprintf_internal_r>:
  8080d8:	deffca04 	addi	sp,sp,-216
  8080dc:	dd403115 	stw	r21,196(sp)
  8080e0:	dfc03515 	stw	ra,212(sp)
  8080e4:	df003415 	stw	fp,208(sp)
  8080e8:	ddc03315 	stw	r23,204(sp)
  8080ec:	dd803215 	stw	r22,200(sp)
  8080f0:	dd003015 	stw	r20,192(sp)
  8080f4:	dcc02f15 	stw	r19,188(sp)
  8080f8:	dc802e15 	stw	r18,184(sp)
  8080fc:	dc402d15 	stw	r17,180(sp)
  808100:	dc002c15 	stw	r16,176(sp)
  808104:	d9002115 	stw	r4,132(sp)
  808108:	d9402015 	stw	r5,128(sp)
  80810c:	d9c02215 	stw	r7,136(sp)
  808110:	302b883a 	mov	r21,r6
  808114:	20000226 	beq	r4,zero,808120 <___vfiprintf_internal_r+0x48>
  808118:	20800e17 	ldw	r2,56(r4)
  80811c:	1000cf26 	beq	r2,zero,80845c <___vfiprintf_internal_r+0x384>
  808120:	d8c02017 	ldw	r3,128(sp)
  808124:	1880030b 	ldhu	r2,12(r3)
  808128:	10c8000c 	andi	r3,r2,8192
  80812c:	1800071e 	bne	r3,zero,80814c <___vfiprintf_internal_r+0x74>
  808130:	d9402017 	ldw	r5,128(sp)
  808134:	00f7ffc4 	movi	r3,-8193
  808138:	10880014 	ori	r2,r2,8192
  80813c:	29001917 	ldw	r4,100(r5)
  808140:	2880030d 	sth	r2,12(r5)
  808144:	20c6703a 	and	r3,r4,r3
  808148:	28c01915 	stw	r3,100(r5)
  80814c:	10c0020c 	andi	r3,r2,8
  808150:	1800a526 	beq	r3,zero,8083e8 <___vfiprintf_internal_r+0x310>
  808154:	d9002017 	ldw	r4,128(sp)
  808158:	20c00417 	ldw	r3,16(r4)
  80815c:	1800a226 	beq	r3,zero,8083e8 <___vfiprintf_internal_r+0x310>
  808160:	1080068c 	andi	r2,r2,26
  808164:	00c00284 	movi	r3,10
  808168:	10c0a826 	beq	r2,r3,80840c <___vfiprintf_internal_r+0x334>
  80816c:	d9001a04 	addi	r4,sp,104
  808170:	d94019c4 	addi	r5,sp,103
  808174:	048020b4 	movhi	r18,130
  808178:	2145c83a 	sub	r2,r4,r5
  80817c:	94a86404 	addi	r18,r18,-24176
  808180:	d9001e15 	stw	r4,120(sp)
  808184:	d9401f15 	stw	r5,124(sp)
  808188:	dec01a15 	stw	sp,104(sp)
  80818c:	d8001c15 	stw	zero,112(sp)
  808190:	d8001b15 	stw	zero,108(sp)
  808194:	d811883a 	mov	r8,sp
  808198:	d8002615 	stw	zero,152(sp)
  80819c:	d8002415 	stw	zero,144(sp)
  8081a0:	d8802815 	stw	r2,160(sp)
  8081a4:	a82d883a 	mov	r22,r21
  8081a8:	b0800007 	ldb	r2,0(r22)
  8081ac:	10040d26 	beq	r2,zero,8091e4 <___vfiprintf_internal_r+0x110c>
  8081b0:	00c00944 	movi	r3,37
  8081b4:	b029883a 	mov	r20,r22
  8081b8:	10c0021e 	bne	r2,r3,8081c4 <___vfiprintf_internal_r+0xec>
  8081bc:	00001606 	br	808218 <___vfiprintf_internal_r+0x140>
  8081c0:	10c00326 	beq	r2,r3,8081d0 <___vfiprintf_internal_r+0xf8>
  8081c4:	a5000044 	addi	r20,r20,1
  8081c8:	a0800007 	ldb	r2,0(r20)
  8081cc:	103ffc1e 	bne	r2,zero,8081c0 <__alt_mem_epcs_flash_controller_0+0xff7ff1c0>
  8081d0:	a5a1c83a 	sub	r16,r20,r22
  8081d4:	80001026 	beq	r16,zero,808218 <___vfiprintf_internal_r+0x140>
  8081d8:	d8c01c17 	ldw	r3,112(sp)
  8081dc:	d8801b17 	ldw	r2,108(sp)
  8081e0:	45800015 	stw	r22,0(r8)
  8081e4:	80c7883a 	add	r3,r16,r3
  8081e8:	10800044 	addi	r2,r2,1
  8081ec:	44000115 	stw	r16,4(r8)
  8081f0:	d8c01c15 	stw	r3,112(sp)
  8081f4:	d8801b15 	stw	r2,108(sp)
  8081f8:	010001c4 	movi	r4,7
  8081fc:	2080750e 	bge	r4,r2,8083d4 <___vfiprintf_internal_r+0x2fc>
  808200:	1803951e 	bne	r3,zero,809058 <___vfiprintf_internal_r+0xf80>
  808204:	d8c02417 	ldw	r3,144(sp)
  808208:	d8001b15 	stw	zero,108(sp)
  80820c:	d811883a 	mov	r8,sp
  808210:	1c07883a 	add	r3,r3,r16
  808214:	d8c02415 	stw	r3,144(sp)
  808218:	a0800007 	ldb	r2,0(r20)
  80821c:	1002e026 	beq	r2,zero,808da0 <___vfiprintf_internal_r+0xcc8>
  808220:	a5800044 	addi	r22,r20,1
  808224:	a0c00047 	ldb	r3,1(r20)
  808228:	d8001d85 	stb	zero,118(sp)
  80822c:	0027883a 	mov	r19,zero
  808230:	d8002305 	stb	zero,140(sp)
  808234:	043fffc4 	movi	r16,-1
  808238:	d8002515 	stw	zero,148(sp)
  80823c:	0023883a 	mov	r17,zero
  808240:	05001604 	movi	r20,88
  808244:	05400244 	movi	r21,9
  808248:	402f883a 	mov	r23,r8
  80824c:	b5800044 	addi	r22,r22,1
  808250:	18bff804 	addi	r2,r3,-32
  808254:	a0827736 	bltu	r20,r2,808c34 <___vfiprintf_internal_r+0xb5c>
  808258:	100490ba 	slli	r2,r2,2
  80825c:	01002074 	movhi	r4,129
  808260:	21209c04 	addi	r4,r4,-32144
  808264:	1105883a 	add	r2,r2,r4
  808268:	10800017 	ldw	r2,0(r2)
  80826c:	1000683a 	jmp	r2
  808270:	00808934 	movhi	r2,548
  808274:	00808c34 	movhi	r2,560
  808278:	00808c34 	movhi	r2,560
  80827c:	00808950 	cmplti	r2,zero,549
  808280:	00808c34 	movhi	r2,560
  808284:	00808c34 	movhi	r2,560
  808288:	00808c34 	movhi	r2,560
  80828c:	00808c34 	movhi	r2,560
  808290:	00808c34 	movhi	r2,560
  808294:	00808c34 	movhi	r2,560
  808298:	00808b58 	cmpnei	r2,zero,557
  80829c:	00808b7c 	xorhi	r2,zero,557
  8082a0:	00808c34 	movhi	r2,560
  8082a4:	00808474 	movhi	r2,529
  8082a8:	00808b90 	cmplti	r2,zero,558
  8082ac:	00808c34 	movhi	r2,560
  8082b0:	0080895c 	xori	r2,zero,549
  8082b4:	00808968 	cmpgeui	r2,zero,549
  8082b8:	00808968 	cmpgeui	r2,zero,549
  8082bc:	00808968 	cmpgeui	r2,zero,549
  8082c0:	00808968 	cmpgeui	r2,zero,549
  8082c4:	00808968 	cmpgeui	r2,zero,549
  8082c8:	00808968 	cmpgeui	r2,zero,549
  8082cc:	00808968 	cmpgeui	r2,zero,549
  8082d0:	00808968 	cmpgeui	r2,zero,549
  8082d4:	00808968 	cmpgeui	r2,zero,549
  8082d8:	00808c34 	movhi	r2,560
  8082dc:	00808c34 	movhi	r2,560
  8082e0:	00808c34 	movhi	r2,560
  8082e4:	00808c34 	movhi	r2,560
  8082e8:	00808c34 	movhi	r2,560
  8082ec:	00808c34 	movhi	r2,560
  8082f0:	00808c34 	movhi	r2,560
  8082f4:	00808c34 	movhi	r2,560
  8082f8:	00808c34 	movhi	r2,560
  8082fc:	00808c34 	movhi	r2,560
  808300:	008089a8 	cmpgeui	r2,zero,550
  808304:	00808c34 	movhi	r2,560
  808308:	00808c34 	movhi	r2,560
  80830c:	00808c34 	movhi	r2,560
  808310:	00808c34 	movhi	r2,560
  808314:	00808c34 	movhi	r2,560
  808318:	00808c34 	movhi	r2,560
  80831c:	00808c34 	movhi	r2,560
  808320:	00808c34 	movhi	r2,560
  808324:	00808c34 	movhi	r2,560
  808328:	00808c34 	movhi	r2,560
  80832c:	008089e4 	muli	r2,zero,551
  808330:	00808c34 	movhi	r2,560
  808334:	00808c34 	movhi	r2,560
  808338:	00808c34 	movhi	r2,560
  80833c:	00808c34 	movhi	r2,560
  808340:	00808c34 	movhi	r2,560
  808344:	00808a40 	call	808a4 <OSCtxSw_SWITCH_PC+0x80864>
  808348:	00808c34 	movhi	r2,560
  80834c:	00808c34 	movhi	r2,560
  808350:	00808ab4 	movhi	r2,554
  808354:	00808c34 	movhi	r2,560
  808358:	00808c34 	movhi	r2,560
  80835c:	00808c34 	movhi	r2,560
  808360:	00808c34 	movhi	r2,560
  808364:	00808c34 	movhi	r2,560
  808368:	00808c34 	movhi	r2,560
  80836c:	00808c34 	movhi	r2,560
  808370:	00808c34 	movhi	r2,560
  808374:	00808c34 	movhi	r2,560
  808378:	00808c34 	movhi	r2,560
  80837c:	0080885c 	xori	r2,zero,545
  808380:	0080888c 	andi	r2,zero,546
  808384:	00808c34 	movhi	r2,560
  808388:	00808c34 	movhi	r2,560
  80838c:	00808c34 	movhi	r2,560
  808390:	00808bdc 	xori	r2,zero,559
  808394:	0080888c 	andi	r2,zero,546
  808398:	00808c34 	movhi	r2,560
  80839c:	00808c34 	movhi	r2,560
  8083a0:	00808734 	movhi	r2,540
  8083a4:	00808c34 	movhi	r2,560
  8083a8:	00808748 	cmpgei	r2,zero,541
  8083ac:	00808780 	call	80878 <OSCtxSw_SWITCH_PC+0x80838>
  8083b0:	00808480 	call	80848 <OSCtxSw_SWITCH_PC+0x80808>
  8083b4:	00808728 	cmpgeui	r2,zero,540
  8083b8:	00808c34 	movhi	r2,560
  8083bc:	00808af4 	movhi	r2,555
  8083c0:	00808c34 	movhi	r2,560
  8083c4:	00808b40 	call	808b4 <OSCtxSw_SWITCH_PC+0x80874>
  8083c8:	00808c34 	movhi	r2,560
  8083cc:	00808c34 	movhi	r2,560
  8083d0:	00808804 	movi	r2,544
  8083d4:	42000204 	addi	r8,r8,8
  8083d8:	d8c02417 	ldw	r3,144(sp)
  8083dc:	1c07883a 	add	r3,r3,r16
  8083e0:	d8c02415 	stw	r3,144(sp)
  8083e4:	003f8c06 	br	808218 <__alt_mem_epcs_flash_controller_0+0xff7ff218>
  8083e8:	d9402017 	ldw	r5,128(sp)
  8083ec:	d9002117 	ldw	r4,132(sp)
  8083f0:	0802c940 	call	802c94 <__swsetup_r>
  8083f4:	1003c11e 	bne	r2,zero,8092fc <___vfiprintf_internal_r+0x1224>
  8083f8:	d9402017 	ldw	r5,128(sp)
  8083fc:	00c00284 	movi	r3,10
  808400:	2880030b 	ldhu	r2,12(r5)
  808404:	1080068c 	andi	r2,r2,26
  808408:	10ff581e 	bne	r2,r3,80816c <__alt_mem_epcs_flash_controller_0+0xff7ff16c>
  80840c:	d8c02017 	ldw	r3,128(sp)
  808410:	1880038f 	ldh	r2,14(r3)
  808414:	103f5516 	blt	r2,zero,80816c <__alt_mem_epcs_flash_controller_0+0xff7ff16c>
  808418:	d9c02217 	ldw	r7,136(sp)
  80841c:	d9002117 	ldw	r4,132(sp)
  808420:	a80d883a 	mov	r6,r21
  808424:	180b883a 	mov	r5,r3
  808428:	08096000 	call	809600 <__sbprintf>
  80842c:	dfc03517 	ldw	ra,212(sp)
  808430:	df003417 	ldw	fp,208(sp)
  808434:	ddc03317 	ldw	r23,204(sp)
  808438:	dd803217 	ldw	r22,200(sp)
  80843c:	dd403117 	ldw	r21,196(sp)
  808440:	dd003017 	ldw	r20,192(sp)
  808444:	dcc02f17 	ldw	r19,188(sp)
  808448:	dc802e17 	ldw	r18,184(sp)
  80844c:	dc402d17 	ldw	r17,180(sp)
  808450:	dc002c17 	ldw	r16,176(sp)
  808454:	dec03604 	addi	sp,sp,216
  808458:	f800283a 	ret
  80845c:	0804ca00 	call	804ca0 <__sinit>
  808460:	003f2f06 	br	808120 <__alt_mem_epcs_flash_controller_0+0xff7ff120>
  808464:	d8c02517 	ldw	r3,148(sp)
  808468:	d8802215 	stw	r2,136(sp)
  80846c:	00c7c83a 	sub	r3,zero,r3
  808470:	d8c02515 	stw	r3,148(sp)
  808474:	8c400114 	ori	r17,r17,4
  808478:	b0c00007 	ldb	r3,0(r22)
  80847c:	003f7306 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808480:	00800c04 	movi	r2,48
  808484:	d9402217 	ldw	r5,136(sp)
  808488:	d8801d05 	stb	r2,116(sp)
  80848c:	00801e04 	movi	r2,120
  808490:	d8801d45 	stb	r2,117(sp)
  808494:	d8001d85 	stb	zero,118(sp)
  808498:	b811883a 	mov	r8,r23
  80849c:	28c00104 	addi	r3,r5,4
  8084a0:	2cc00017 	ldw	r19,0(r5)
  8084a4:	0029883a 	mov	r20,zero
  8084a8:	88800094 	ori	r2,r17,2
  8084ac:	80032516 	blt	r16,zero,809144 <___vfiprintf_internal_r+0x106c>
  8084b0:	00bfdfc4 	movi	r2,-129
  8084b4:	88a2703a 	and	r17,r17,r2
  8084b8:	d8c02215 	stw	r3,136(sp)
  8084bc:	8c400094 	ori	r17,r17,2
  8084c0:	98032a1e 	bne	r19,zero,80916c <___vfiprintf_internal_r+0x1094>
  8084c4:	008020b4 	movhi	r2,130
  8084c8:	10a80304 	addi	r2,r2,-24564
  8084cc:	d8802615 	stw	r2,152(sp)
  8084d0:	002b883a 	mov	r21,zero
  8084d4:	8001741e 	bne	r16,zero,808aa8 <___vfiprintf_internal_r+0x9d0>
  8084d8:	0021883a 	mov	r16,zero
  8084dc:	0029883a 	mov	r20,zero
  8084e0:	ddc01a04 	addi	r23,sp,104
  8084e4:	8027883a 	mov	r19,r16
  8084e8:	8500010e 	bge	r16,r20,8084f0 <___vfiprintf_internal_r+0x418>
  8084ec:	a027883a 	mov	r19,r20
  8084f0:	ad403fcc 	andi	r21,r21,255
  8084f4:	ad40201c 	xori	r21,r21,128
  8084f8:	ad7fe004 	addi	r21,r21,-128
  8084fc:	a8000126 	beq	r21,zero,808504 <___vfiprintf_internal_r+0x42c>
  808500:	9cc00044 	addi	r19,r19,1
  808504:	89c0008c 	andi	r7,r17,2
  808508:	38000126 	beq	r7,zero,808510 <___vfiprintf_internal_r+0x438>
  80850c:	9cc00084 	addi	r19,r19,2
  808510:	88c0210c 	andi	r3,r17,132
  808514:	1801dd1e 	bne	r3,zero,808c8c <___vfiprintf_internal_r+0xbb4>
  808518:	d9402517 	ldw	r5,148(sp)
  80851c:	2cebc83a 	sub	r21,r5,r19
  808520:	0541da0e 	bge	zero,r21,808c8c <___vfiprintf_internal_r+0xbb4>
  808524:	07000404 	movi	fp,16
  808528:	d8801c17 	ldw	r2,112(sp)
  80852c:	e543be0e 	bge	fp,r21,809428 <___vfiprintf_internal_r+0x1350>
  808530:	014020b4 	movhi	r5,130
  808534:	29686804 	addi	r5,r5,-24160
  808538:	dc002715 	stw	r16,156(sp)
  80853c:	d9801b17 	ldw	r6,108(sp)
  808540:	a821883a 	mov	r16,r21
  808544:	d9402315 	stw	r5,140(sp)
  808548:	028001c4 	movi	r10,7
  80854c:	d9c02915 	stw	r7,164(sp)
  808550:	182b883a 	mov	r21,r3
  808554:	00000506 	br	80856c <___vfiprintf_internal_r+0x494>
  808558:	31000084 	addi	r4,r6,2
  80855c:	42000204 	addi	r8,r8,8
  808560:	180d883a 	mov	r6,r3
  808564:	843ffc04 	addi	r16,r16,-16
  808568:	e4000f0e 	bge	fp,r16,8085a8 <___vfiprintf_internal_r+0x4d0>
  80856c:	010020b4 	movhi	r4,130
  808570:	10800404 	addi	r2,r2,16
  808574:	30c00044 	addi	r3,r6,1
  808578:	21286804 	addi	r4,r4,-24160
  80857c:	41000015 	stw	r4,0(r8)
  808580:	47000115 	stw	fp,4(r8)
  808584:	d8801c15 	stw	r2,112(sp)
  808588:	d8c01b15 	stw	r3,108(sp)
  80858c:	50fff20e 	bge	r10,r3,808558 <__alt_mem_epcs_flash_controller_0+0xff7ff558>
  808590:	1001b21e 	bne	r2,zero,808c5c <___vfiprintf_internal_r+0xb84>
  808594:	843ffc04 	addi	r16,r16,-16
  808598:	000d883a 	mov	r6,zero
  80859c:	01000044 	movi	r4,1
  8085a0:	d811883a 	mov	r8,sp
  8085a4:	e43ff116 	blt	fp,r16,80856c <__alt_mem_epcs_flash_controller_0+0xff7ff56c>
  8085a8:	a807883a 	mov	r3,r21
  8085ac:	d9c02917 	ldw	r7,164(sp)
  8085b0:	802b883a 	mov	r21,r16
  8085b4:	dc002717 	ldw	r16,156(sp)
  8085b8:	d9402317 	ldw	r5,140(sp)
  8085bc:	a885883a 	add	r2,r21,r2
  8085c0:	45400115 	stw	r21,4(r8)
  8085c4:	41400015 	stw	r5,0(r8)
  8085c8:	d8801c15 	stw	r2,112(sp)
  8085cc:	d9001b15 	stw	r4,108(sp)
  8085d0:	014001c4 	movi	r5,7
  8085d4:	29026216 	blt	r5,r4,808f60 <___vfiprintf_internal_r+0xe88>
  8085d8:	d9801d87 	ldb	r6,118(sp)
  8085dc:	42000204 	addi	r8,r8,8
  8085e0:	21400044 	addi	r5,r4,1
  8085e4:	3001ae1e 	bne	r6,zero,808ca0 <___vfiprintf_internal_r+0xbc8>
  8085e8:	3801bb26 	beq	r7,zero,808cd8 <___vfiprintf_internal_r+0xc00>
  8085ec:	d9001d04 	addi	r4,sp,116
  8085f0:	10800084 	addi	r2,r2,2
  8085f4:	41000015 	stw	r4,0(r8)
  8085f8:	01000084 	movi	r4,2
  8085fc:	41000115 	stw	r4,4(r8)
  808600:	d8801c15 	stw	r2,112(sp)
  808604:	d9401b15 	stw	r5,108(sp)
  808608:	010001c4 	movi	r4,7
  80860c:	2142680e 	bge	r4,r5,808fb0 <___vfiprintf_internal_r+0xed8>
  808610:	1002b11e 	bne	r2,zero,8090d8 <___vfiprintf_internal_r+0x1000>
  808614:	01802004 	movi	r6,128
  808618:	01400044 	movi	r5,1
  80861c:	0009883a 	mov	r4,zero
  808620:	d811883a 	mov	r8,sp
  808624:	1981ae1e 	bne	r3,r6,808ce0 <___vfiprintf_internal_r+0xc08>
  808628:	d8c02517 	ldw	r3,148(sp)
  80862c:	1cf9c83a 	sub	fp,r3,r19
  808630:	0701ab0e 	bge	zero,fp,808ce0 <___vfiprintf_internal_r+0xc08>
  808634:	05400404 	movi	r21,16
  808638:	af03a90e 	bge	r21,fp,8094e0 <___vfiprintf_internal_r+0x1408>
  80863c:	014020b4 	movhi	r5,130
  808640:	29686404 	addi	r5,r5,-24176
  808644:	d9402315 	stw	r5,140(sp)
  808648:	01c001c4 	movi	r7,7
  80864c:	00000506 	br	808664 <___vfiprintf_internal_r+0x58c>
  808650:	21800084 	addi	r6,r4,2
  808654:	42000204 	addi	r8,r8,8
  808658:	1809883a 	mov	r4,r3
  80865c:	e73ffc04 	addi	fp,fp,-16
  808660:	af000d0e 	bge	r21,fp,808698 <___vfiprintf_internal_r+0x5c0>
  808664:	10800404 	addi	r2,r2,16
  808668:	20c00044 	addi	r3,r4,1
  80866c:	44800015 	stw	r18,0(r8)
  808670:	45400115 	stw	r21,4(r8)
  808674:	d8801c15 	stw	r2,112(sp)
  808678:	d8c01b15 	stw	r3,108(sp)
  80867c:	38fff40e 	bge	r7,r3,808650 <__alt_mem_epcs_flash_controller_0+0xff7ff650>
  808680:	10022b1e 	bne	r2,zero,808f30 <___vfiprintf_internal_r+0xe58>
  808684:	e73ffc04 	addi	fp,fp,-16
  808688:	01800044 	movi	r6,1
  80868c:	0009883a 	mov	r4,zero
  808690:	d811883a 	mov	r8,sp
  808694:	af3ff316 	blt	r21,fp,808664 <__alt_mem_epcs_flash_controller_0+0xff7ff664>
  808698:	d8c02317 	ldw	r3,140(sp)
  80869c:	1705883a 	add	r2,r2,fp
  8086a0:	47000115 	stw	fp,4(r8)
  8086a4:	40c00015 	stw	r3,0(r8)
  8086a8:	d8801c15 	stw	r2,112(sp)
  8086ac:	d9801b15 	stw	r6,108(sp)
  8086b0:	00c001c4 	movi	r3,7
  8086b4:	19829416 	blt	r3,r6,809108 <___vfiprintf_internal_r+0x1030>
  8086b8:	8521c83a 	sub	r16,r16,r20
  8086bc:	42000204 	addi	r8,r8,8
  8086c0:	31400044 	addi	r5,r6,1
  8086c4:	3009883a 	mov	r4,r6
  8086c8:	04018716 	blt	zero,r16,808ce8 <___vfiprintf_internal_r+0xc10>
  8086cc:	a085883a 	add	r2,r20,r2
  8086d0:	45c00015 	stw	r23,0(r8)
  8086d4:	45000115 	stw	r20,4(r8)
  8086d8:	d8801c15 	stw	r2,112(sp)
  8086dc:	d9401b15 	stw	r5,108(sp)
  8086e0:	00c001c4 	movi	r3,7
  8086e4:	1941c20e 	bge	r3,r5,808df0 <___vfiprintf_internal_r+0xd18>
  8086e8:	1002531e 	bne	r2,zero,809038 <___vfiprintf_internal_r+0xf60>
  8086ec:	d8001b15 	stw	zero,108(sp)
  8086f0:	8c40010c 	andi	r17,r17,4
  8086f4:	88023226 	beq	r17,zero,808fc0 <___vfiprintf_internal_r+0xee8>
  8086f8:	d9002517 	ldw	r4,148(sp)
  8086fc:	24e3c83a 	sub	r17,r4,r19
  808700:	04432916 	blt	zero,r17,8093a8 <___vfiprintf_internal_r+0x12d0>
  808704:	d8802517 	ldw	r2,148(sp)
  808708:	14c0010e 	bge	r2,r19,808710 <___vfiprintf_internal_r+0x638>
  80870c:	9805883a 	mov	r2,r19
  808710:	d8c02417 	ldw	r3,144(sp)
  808714:	1887883a 	add	r3,r3,r2
  808718:	d8c02415 	stw	r3,144(sp)
  80871c:	d8001b15 	stw	zero,108(sp)
  808720:	d811883a 	mov	r8,sp
  808724:	003ea006 	br	8081a8 <__alt_mem_epcs_flash_controller_0+0xff7ff1a8>
  808728:	8c400814 	ori	r17,r17,32
  80872c:	b0c00007 	ldb	r3,0(r22)
  808730:	003ec606 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808734:	b0c00007 	ldb	r3,0(r22)
  808738:	00801b04 	movi	r2,108
  80873c:	18832026 	beq	r3,r2,8093c0 <___vfiprintf_internal_r+0x12e8>
  808740:	8c400414 	ori	r17,r17,16
  808744:	003ec106 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808748:	9cc03fcc 	andi	r19,r19,255
  80874c:	b811883a 	mov	r8,r23
  808750:	9803981e 	bne	r19,zero,8095b4 <___vfiprintf_internal_r+0x14dc>
  808754:	8880080c 	andi	r2,r17,32
  808758:	1002be26 	beq	r2,zero,809254 <___vfiprintf_internal_r+0x117c>
  80875c:	d9002217 	ldw	r4,136(sp)
  808760:	d9402417 	ldw	r5,144(sp)
  808764:	20800017 	ldw	r2,0(r4)
  808768:	2807d7fa 	srai	r3,r5,31
  80876c:	21000104 	addi	r4,r4,4
  808770:	d9002215 	stw	r4,136(sp)
  808774:	11400015 	stw	r5,0(r2)
  808778:	10c00115 	stw	r3,4(r2)
  80877c:	003e8a06 	br	8081a8 <__alt_mem_epcs_flash_controller_0+0xff7ff1a8>
  808780:	9cc03fcc 	andi	r19,r19,255
  808784:	b811883a 	mov	r8,r23
  808788:	9803871e 	bne	r19,zero,8095a8 <___vfiprintf_internal_r+0x14d0>
  80878c:	8880080c 	andi	r2,r17,32
  808790:	10009a26 	beq	r2,zero,8089fc <___vfiprintf_internal_r+0x924>
  808794:	d9002217 	ldw	r4,136(sp)
  808798:	d8001d85 	stb	zero,118(sp)
  80879c:	20800204 	addi	r2,r4,8
  8087a0:	24c00017 	ldw	r19,0(r4)
  8087a4:	25000117 	ldw	r20,4(r4)
  8087a8:	8002a416 	blt	r16,zero,80923c <___vfiprintf_internal_r+0x1164>
  8087ac:	013fdfc4 	movi	r4,-129
  8087b0:	9d06b03a 	or	r3,r19,r20
  8087b4:	d8802215 	stw	r2,136(sp)
  8087b8:	8922703a 	and	r17,r17,r4
  8087bc:	18009b26 	beq	r3,zero,808a2c <___vfiprintf_internal_r+0x954>
  8087c0:	002b883a 	mov	r21,zero
  8087c4:	ddc01a04 	addi	r23,sp,104
  8087c8:	9806d0fa 	srli	r3,r19,3
  8087cc:	a008977a 	slli	r4,r20,29
  8087d0:	a028d0fa 	srli	r20,r20,3
  8087d4:	9cc001cc 	andi	r19,r19,7
  8087d8:	98800c04 	addi	r2,r19,48
  8087dc:	bdffffc4 	addi	r23,r23,-1
  8087e0:	20e6b03a 	or	r19,r4,r3
  8087e4:	b8800005 	stb	r2,0(r23)
  8087e8:	9d06b03a 	or	r3,r19,r20
  8087ec:	183ff61e 	bne	r3,zero,8087c8 <__alt_mem_epcs_flash_controller_0+0xff7ff7c8>
  8087f0:	88c0004c 	andi	r3,r17,1
  8087f4:	18021f1e 	bne	r3,zero,809074 <___vfiprintf_internal_r+0xf9c>
  8087f8:	d9401e17 	ldw	r5,120(sp)
  8087fc:	2de9c83a 	sub	r20,r5,r23
  808800:	003f3806 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  808804:	9cc03fcc 	andi	r19,r19,255
  808808:	b811883a 	mov	r8,r23
  80880c:	98034f1e 	bne	r19,zero,80954c <___vfiprintf_internal_r+0x1474>
  808810:	008020b4 	movhi	r2,130
  808814:	10a80304 	addi	r2,r2,-24564
  808818:	d8802615 	stw	r2,152(sp)
  80881c:	8880080c 	andi	r2,r17,32
  808820:	1000ac26 	beq	r2,zero,808ad4 <___vfiprintf_internal_r+0x9fc>
  808824:	d9002217 	ldw	r4,136(sp)
  808828:	24c00017 	ldw	r19,0(r4)
  80882c:	25000117 	ldw	r20,4(r4)
  808830:	21000204 	addi	r4,r4,8
  808834:	d9002215 	stw	r4,136(sp)
  808838:	8880004c 	andi	r2,r17,1
  80883c:	1001e726 	beq	r2,zero,808fdc <___vfiprintf_internal_r+0xf04>
  808840:	9d04b03a 	or	r2,r19,r20
  808844:	10025c1e 	bne	r2,zero,8091b8 <___vfiprintf_internal_r+0x10e0>
  808848:	d8001d85 	stb	zero,118(sp)
  80884c:	80024416 	blt	r16,zero,809160 <___vfiprintf_internal_r+0x1088>
  808850:	00bfdfc4 	movi	r2,-129
  808854:	88a2703a 	and	r17,r17,r2
  808858:	003f1d06 	br	8084d0 <__alt_mem_epcs_flash_controller_0+0xff7ff4d0>
  80885c:	d8c02217 	ldw	r3,136(sp)
  808860:	04c00044 	movi	r19,1
  808864:	b811883a 	mov	r8,r23
  808868:	18800017 	ldw	r2,0(r3)
  80886c:	18c00104 	addi	r3,r3,4
  808870:	d8001d85 	stb	zero,118(sp)
  808874:	d8801005 	stb	r2,64(sp)
  808878:	d8c02215 	stw	r3,136(sp)
  80887c:	9829883a 	mov	r20,r19
  808880:	ddc01004 	addi	r23,sp,64
  808884:	0021883a 	mov	r16,zero
  808888:	003f1e06 	br	808504 <__alt_mem_epcs_flash_controller_0+0xff7ff504>
  80888c:	9cc03fcc 	andi	r19,r19,255
  808890:	b811883a 	mov	r8,r23
  808894:	9803331e 	bne	r19,zero,809564 <___vfiprintf_internal_r+0x148c>
  808898:	8880080c 	andi	r2,r17,32
  80889c:	10004826 	beq	r2,zero,8089c0 <___vfiprintf_internal_r+0x8e8>
  8088a0:	d9002217 	ldw	r4,136(sp)
  8088a4:	20800117 	ldw	r2,4(r4)
  8088a8:	24c00017 	ldw	r19,0(r4)
  8088ac:	21000204 	addi	r4,r4,8
  8088b0:	d9002215 	stw	r4,136(sp)
  8088b4:	1029883a 	mov	r20,r2
  8088b8:	10024c16 	blt	r2,zero,8091ec <___vfiprintf_internal_r+0x1114>
  8088bc:	dd401d83 	ldbu	r21,118(sp)
  8088c0:	80007116 	blt	r16,zero,808a88 <___vfiprintf_internal_r+0x9b0>
  8088c4:	00ffdfc4 	movi	r3,-129
  8088c8:	9d04b03a 	or	r2,r19,r20
  8088cc:	88e2703a 	and	r17,r17,r3
  8088d0:	1000d126 	beq	r2,zero,808c18 <___vfiprintf_internal_r+0xb40>
  8088d4:	a0023526 	beq	r20,zero,8091ac <___vfiprintf_internal_r+0x10d4>
  8088d8:	ddc01a04 	addi	r23,sp,104
  8088dc:	4039883a 	mov	fp,r8
  8088e0:	9809883a 	mov	r4,r19
  8088e4:	a00b883a 	mov	r5,r20
  8088e8:	01800284 	movi	r6,10
  8088ec:	000f883a 	mov	r7,zero
  8088f0:	080a6040 	call	80a604 <__umoddi3>
  8088f4:	10800c04 	addi	r2,r2,48
  8088f8:	bdffffc4 	addi	r23,r23,-1
  8088fc:	9809883a 	mov	r4,r19
  808900:	a00b883a 	mov	r5,r20
  808904:	b8800005 	stb	r2,0(r23)
  808908:	01800284 	movi	r6,10
  80890c:	000f883a 	mov	r7,zero
  808910:	080a0080 	call	80a008 <__udivdi3>
  808914:	1027883a 	mov	r19,r2
  808918:	10c4b03a 	or	r2,r2,r3
  80891c:	1829883a 	mov	r20,r3
  808920:	103fef1e 	bne	r2,zero,8088e0 <__alt_mem_epcs_flash_controller_0+0xff7ff8e0>
  808924:	d9001e17 	ldw	r4,120(sp)
  808928:	e011883a 	mov	r8,fp
  80892c:	25e9c83a 	sub	r20,r4,r23
  808930:	003eec06 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  808934:	d8802307 	ldb	r2,140(sp)
  808938:	1002361e 	bne	r2,zero,809214 <___vfiprintf_internal_r+0x113c>
  80893c:	00c00804 	movi	r3,32
  808940:	d8c02305 	stb	r3,140(sp)
  808944:	04c00044 	movi	r19,1
  808948:	b0c00007 	ldb	r3,0(r22)
  80894c:	003e3f06 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808950:	8c400054 	ori	r17,r17,1
  808954:	b0c00007 	ldb	r3,0(r22)
  808958:	003e3c06 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  80895c:	8c402014 	ori	r17,r17,128
  808960:	b0c00007 	ldb	r3,0(r22)
  808964:	003e3906 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808968:	dc002715 	stw	r16,156(sp)
  80896c:	d8002515 	stw	zero,148(sp)
  808970:	1f3ff404 	addi	fp,r3,-48
  808974:	0009883a 	mov	r4,zero
  808978:	b021883a 	mov	r16,r22
  80897c:	01400284 	movi	r5,10
  808980:	080ad7c0 	call	80ad7c <__mulsi3>
  808984:	80c00007 	ldb	r3,0(r16)
  808988:	e089883a 	add	r4,fp,r2
  80898c:	b5800044 	addi	r22,r22,1
  808990:	1f3ff404 	addi	fp,r3,-48
  808994:	b021883a 	mov	r16,r22
  808998:	af3ff82e 	bgeu	r21,fp,80897c <__alt_mem_epcs_flash_controller_0+0xff7ff97c>
  80899c:	d9002515 	stw	r4,148(sp)
  8089a0:	dc002717 	ldw	r16,156(sp)
  8089a4:	003e2a06 	br	808250 <__alt_mem_epcs_flash_controller_0+0xff7ff250>
  8089a8:	9cc03fcc 	andi	r19,r19,255
  8089ac:	b811883a 	mov	r8,r23
  8089b0:	9802e91e 	bne	r19,zero,809558 <___vfiprintf_internal_r+0x1480>
  8089b4:	8c400414 	ori	r17,r17,16
  8089b8:	8880080c 	andi	r2,r17,32
  8089bc:	103fb81e 	bne	r2,zero,8088a0 <__alt_mem_epcs_flash_controller_0+0xff7ff8a0>
  8089c0:	8880040c 	andi	r2,r17,16
  8089c4:	10022e26 	beq	r2,zero,809280 <___vfiprintf_internal_r+0x11a8>
  8089c8:	d9402217 	ldw	r5,136(sp)
  8089cc:	2cc00017 	ldw	r19,0(r5)
  8089d0:	29400104 	addi	r5,r5,4
  8089d4:	d9402215 	stw	r5,136(sp)
  8089d8:	9829d7fa 	srai	r20,r19,31
  8089dc:	a005883a 	mov	r2,r20
  8089e0:	003fb506 	br	8088b8 <__alt_mem_epcs_flash_controller_0+0xff7ff8b8>
  8089e4:	9cc03fcc 	andi	r19,r19,255
  8089e8:	b811883a 	mov	r8,r23
  8089ec:	9802fa1e 	bne	r19,zero,8095d8 <___vfiprintf_internal_r+0x1500>
  8089f0:	8c400414 	ori	r17,r17,16
  8089f4:	8880080c 	andi	r2,r17,32
  8089f8:	103f661e 	bne	r2,zero,808794 <__alt_mem_epcs_flash_controller_0+0xff7ff794>
  8089fc:	8880040c 	andi	r2,r17,16
  808a00:	10020626 	beq	r2,zero,80921c <___vfiprintf_internal_r+0x1144>
  808a04:	d9402217 	ldw	r5,136(sp)
  808a08:	d8001d85 	stb	zero,118(sp)
  808a0c:	0029883a 	mov	r20,zero
  808a10:	28800104 	addi	r2,r5,4
  808a14:	2cc00017 	ldw	r19,0(r5)
  808a18:	80020816 	blt	r16,zero,80923c <___vfiprintf_internal_r+0x1164>
  808a1c:	00ffdfc4 	movi	r3,-129
  808a20:	d8802215 	stw	r2,136(sp)
  808a24:	88e2703a 	and	r17,r17,r3
  808a28:	983f651e 	bne	r19,zero,8087c0 <__alt_mem_epcs_flash_controller_0+0xff7ff7c0>
  808a2c:	002b883a 	mov	r21,zero
  808a30:	8002cf26 	beq	r16,zero,809570 <___vfiprintf_internal_r+0x1498>
  808a34:	0027883a 	mov	r19,zero
  808a38:	0029883a 	mov	r20,zero
  808a3c:	003f6106 	br	8087c4 <__alt_mem_epcs_flash_controller_0+0xff7ff7c4>
  808a40:	9cc03fcc 	andi	r19,r19,255
  808a44:	b811883a 	mov	r8,r23
  808a48:	9802e01e 	bne	r19,zero,8095cc <___vfiprintf_internal_r+0x14f4>
  808a4c:	8c400414 	ori	r17,r17,16
  808a50:	8880080c 	andi	r2,r17,32
  808a54:	1000641e 	bne	r2,zero,808be8 <___vfiprintf_internal_r+0xb10>
  808a58:	8880040c 	andi	r2,r17,16
  808a5c:	1001c81e 	bne	r2,zero,809180 <___vfiprintf_internal_r+0x10a8>
  808a60:	8880100c 	andi	r2,r17,64
  808a64:	d8001d85 	stb	zero,118(sp)
  808a68:	1002281e 	bne	r2,zero,80930c <___vfiprintf_internal_r+0x1234>
  808a6c:	d9002217 	ldw	r4,136(sp)
  808a70:	0029883a 	mov	r20,zero
  808a74:	20800104 	addi	r2,r4,4
  808a78:	24c00017 	ldw	r19,0(r4)
  808a7c:	8001c60e 	bge	r16,zero,809198 <___vfiprintf_internal_r+0x10c0>
  808a80:	d8802215 	stw	r2,136(sp)
  808a84:	002b883a 	mov	r21,zero
  808a88:	9d04b03a 	or	r2,r19,r20
  808a8c:	103f911e 	bne	r2,zero,8088d4 <__alt_mem_epcs_flash_controller_0+0xff7ff8d4>
  808a90:	00800044 	movi	r2,1
  808a94:	10803fcc 	andi	r2,r2,255
  808a98:	00c00044 	movi	r3,1
  808a9c:	10c05f26 	beq	r2,r3,808c1c <___vfiprintf_internal_r+0xb44>
  808aa0:	00c00084 	movi	r3,2
  808aa4:	10ffe31e 	bne	r2,r3,808a34 <__alt_mem_epcs_flash_controller_0+0xff7ffa34>
  808aa8:	0027883a 	mov	r19,zero
  808aac:	0029883a 	mov	r20,zero
  808ab0:	00015106 	br	808ff8 <___vfiprintf_internal_r+0xf20>
  808ab4:	9cc03fcc 	andi	r19,r19,255
  808ab8:	b811883a 	mov	r8,r23
  808abc:	9802c01e 	bne	r19,zero,8095c0 <___vfiprintf_internal_r+0x14e8>
  808ac0:	014020b4 	movhi	r5,130
  808ac4:	2967fe04 	addi	r5,r5,-24584
  808ac8:	d9402615 	stw	r5,152(sp)
  808acc:	8880080c 	andi	r2,r17,32
  808ad0:	103f541e 	bne	r2,zero,808824 <__alt_mem_epcs_flash_controller_0+0xff7ff824>
  808ad4:	8880040c 	andi	r2,r17,16
  808ad8:	1001f226 	beq	r2,zero,8092a4 <___vfiprintf_internal_r+0x11cc>
  808adc:	d9402217 	ldw	r5,136(sp)
  808ae0:	0029883a 	mov	r20,zero
  808ae4:	2cc00017 	ldw	r19,0(r5)
  808ae8:	29400104 	addi	r5,r5,4
  808aec:	d9402215 	stw	r5,136(sp)
  808af0:	003f5106 	br	808838 <__alt_mem_epcs_flash_controller_0+0xff7ff838>
  808af4:	d8c02217 	ldw	r3,136(sp)
  808af8:	b811883a 	mov	r8,r23
  808afc:	d8001d85 	stb	zero,118(sp)
  808b00:	1dc00017 	ldw	r23,0(r3)
  808b04:	1f000104 	addi	fp,r3,4
  808b08:	b8025926 	beq	r23,zero,809470 <___vfiprintf_internal_r+0x1398>
  808b0c:	80023316 	blt	r16,zero,8093dc <___vfiprintf_internal_r+0x1304>
  808b10:	800d883a 	mov	r6,r16
  808b14:	000b883a 	mov	r5,zero
  808b18:	b809883a 	mov	r4,r23
  808b1c:	da002a15 	stw	r8,168(sp)
  808b20:	08062180 	call	806218 <memchr>
  808b24:	da002a17 	ldw	r8,168(sp)
  808b28:	10026826 	beq	r2,zero,8094cc <___vfiprintf_internal_r+0x13f4>
  808b2c:	15e9c83a 	sub	r20,r2,r23
  808b30:	dd401d83 	ldbu	r21,118(sp)
  808b34:	df002215 	stw	fp,136(sp)
  808b38:	0021883a 	mov	r16,zero
  808b3c:	003e6906 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  808b40:	9cc03fcc 	andi	r19,r19,255
  808b44:	b811883a 	mov	r8,r23
  808b48:	983fc126 	beq	r19,zero,808a50 <__alt_mem_epcs_flash_controller_0+0xff7ffa50>
  808b4c:	d8c02303 	ldbu	r3,140(sp)
  808b50:	d8c01d85 	stb	r3,118(sp)
  808b54:	003fbe06 	br	808a50 <__alt_mem_epcs_flash_controller_0+0xff7ffa50>
  808b58:	d9002217 	ldw	r4,136(sp)
  808b5c:	d9402217 	ldw	r5,136(sp)
  808b60:	21000017 	ldw	r4,0(r4)
  808b64:	28800104 	addi	r2,r5,4
  808b68:	d9002515 	stw	r4,148(sp)
  808b6c:	203e3d16 	blt	r4,zero,808464 <__alt_mem_epcs_flash_controller_0+0xff7ff464>
  808b70:	d8802215 	stw	r2,136(sp)
  808b74:	b0c00007 	ldb	r3,0(r22)
  808b78:	003db406 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808b7c:	00c00ac4 	movi	r3,43
  808b80:	d8c02305 	stb	r3,140(sp)
  808b84:	04c00044 	movi	r19,1
  808b88:	b0c00007 	ldb	r3,0(r22)
  808b8c:	003daf06 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808b90:	b0c00007 	ldb	r3,0(r22)
  808b94:	01000a84 	movi	r4,42
  808b98:	b4000044 	addi	r16,r22,1
  808b9c:	19025e26 	beq	r3,r4,809518 <___vfiprintf_internal_r+0x1440>
  808ba0:	1f3ff404 	addi	fp,r3,-48
  808ba4:	0009883a 	mov	r4,zero
  808ba8:	af025236 	bltu	r21,fp,8094f4 <___vfiprintf_internal_r+0x141c>
  808bac:	01400284 	movi	r5,10
  808bb0:	080ad7c0 	call	80ad7c <__mulsi3>
  808bb4:	80c00007 	ldb	r3,0(r16)
  808bb8:	1709883a 	add	r4,r2,fp
  808bbc:	85800044 	addi	r22,r16,1
  808bc0:	1f3ff404 	addi	fp,r3,-48
  808bc4:	b021883a 	mov	r16,r22
  808bc8:	af3ff82e 	bgeu	r21,fp,808bac <__alt_mem_epcs_flash_controller_0+0xff7ffbac>
  808bcc:	2021883a 	mov	r16,r4
  808bd0:	203d9f0e 	bge	r4,zero,808250 <__alt_mem_epcs_flash_controller_0+0xff7ff250>
  808bd4:	043fffc4 	movi	r16,-1
  808bd8:	003d9d06 	br	808250 <__alt_mem_epcs_flash_controller_0+0xff7ff250>
  808bdc:	8c401014 	ori	r17,r17,64
  808be0:	b0c00007 	ldb	r3,0(r22)
  808be4:	003d9906 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808be8:	d9002217 	ldw	r4,136(sp)
  808bec:	d8001d85 	stb	zero,118(sp)
  808bf0:	20c00204 	addi	r3,r4,8
  808bf4:	24c00017 	ldw	r19,0(r4)
  808bf8:	25000117 	ldw	r20,4(r4)
  808bfc:	8001e716 	blt	r16,zero,80939c <___vfiprintf_internal_r+0x12c4>
  808c00:	013fdfc4 	movi	r4,-129
  808c04:	9d04b03a 	or	r2,r19,r20
  808c08:	d8c02215 	stw	r3,136(sp)
  808c0c:	8922703a 	and	r17,r17,r4
  808c10:	002b883a 	mov	r21,zero
  808c14:	103f2f1e 	bne	r2,zero,8088d4 <__alt_mem_epcs_flash_controller_0+0xff7ff8d4>
  808c18:	803e2f26 	beq	r16,zero,8084d8 <__alt_mem_epcs_flash_controller_0+0xff7ff4d8>
  808c1c:	0027883a 	mov	r19,zero
  808c20:	9cc00c04 	addi	r19,r19,48
  808c24:	dcc019c5 	stb	r19,103(sp)
  808c28:	dd002817 	ldw	r20,160(sp)
  808c2c:	ddc019c4 	addi	r23,sp,103
  808c30:	003e2c06 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  808c34:	9cc03fcc 	andi	r19,r19,255
  808c38:	b811883a 	mov	r8,r23
  808c3c:	9802571e 	bne	r19,zero,80959c <___vfiprintf_internal_r+0x14c4>
  808c40:	18005726 	beq	r3,zero,808da0 <___vfiprintf_internal_r+0xcc8>
  808c44:	04c00044 	movi	r19,1
  808c48:	d8c01005 	stb	r3,64(sp)
  808c4c:	d8001d85 	stb	zero,118(sp)
  808c50:	9829883a 	mov	r20,r19
  808c54:	ddc01004 	addi	r23,sp,64
  808c58:	003f0a06 	br	808884 <__alt_mem_epcs_flash_controller_0+0xff7ff884>
  808c5c:	d9402017 	ldw	r5,128(sp)
  808c60:	d9002117 	ldw	r4,132(sp)
  808c64:	d9801a04 	addi	r6,sp,104
  808c68:	da802a15 	stw	r10,168(sp)
  808c6c:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808c70:	da802a17 	ldw	r10,168(sp)
  808c74:	1000501e 	bne	r2,zero,808db8 <___vfiprintf_internal_r+0xce0>
  808c78:	d9801b17 	ldw	r6,108(sp)
  808c7c:	d8801c17 	ldw	r2,112(sp)
  808c80:	d811883a 	mov	r8,sp
  808c84:	31000044 	addi	r4,r6,1
  808c88:	003e3606 	br	808564 <__alt_mem_epcs_flash_controller_0+0xff7ff564>
  808c8c:	d9001b17 	ldw	r4,108(sp)
  808c90:	d8801c17 	ldw	r2,112(sp)
  808c94:	21400044 	addi	r5,r4,1
  808c98:	d9801d87 	ldb	r6,118(sp)
  808c9c:	303e5226 	beq	r6,zero,8085e8 <__alt_mem_epcs_flash_controller_0+0xff7ff5e8>
  808ca0:	01800044 	movi	r6,1
  808ca4:	d9001d84 	addi	r4,sp,118
  808ca8:	1185883a 	add	r2,r2,r6
  808cac:	41000015 	stw	r4,0(r8)
  808cb0:	41800115 	stw	r6,4(r8)
  808cb4:	d8801c15 	stw	r2,112(sp)
  808cb8:	d9401b15 	stw	r5,108(sp)
  808cbc:	010001c4 	movi	r4,7
  808cc0:	2140b00e 	bge	r4,r5,808f84 <___vfiprintf_internal_r+0xeac>
  808cc4:	1000f61e 	bne	r2,zero,8090a0 <___vfiprintf_internal_r+0xfc8>
  808cc8:	3800b31e 	bne	r7,zero,808f98 <___vfiprintf_internal_r+0xec0>
  808ccc:	0009883a 	mov	r4,zero
  808cd0:	300b883a 	mov	r5,r6
  808cd4:	d811883a 	mov	r8,sp
  808cd8:	01802004 	movi	r6,128
  808cdc:	19be5226 	beq	r3,r6,808628 <__alt_mem_epcs_flash_controller_0+0xff7ff628>
  808ce0:	8521c83a 	sub	r16,r16,r20
  808ce4:	043e790e 	bge	zero,r16,8086cc <__alt_mem_epcs_flash_controller_0+0xff7ff6cc>
  808ce8:	05400404 	movi	r21,16
  808cec:	ac01b00e 	bge	r21,r16,8093b0 <___vfiprintf_internal_r+0x12d8>
  808cf0:	014020b4 	movhi	r5,130
  808cf4:	29686404 	addi	r5,r5,-24176
  808cf8:	d9402315 	stw	r5,140(sp)
  808cfc:	070001c4 	movi	fp,7
  808d00:	00000506 	br	808d18 <___vfiprintf_internal_r+0xc40>
  808d04:	21400084 	addi	r5,r4,2
  808d08:	42000204 	addi	r8,r8,8
  808d0c:	1809883a 	mov	r4,r3
  808d10:	843ffc04 	addi	r16,r16,-16
  808d14:	ac000d0e 	bge	r21,r16,808d4c <___vfiprintf_internal_r+0xc74>
  808d18:	10800404 	addi	r2,r2,16
  808d1c:	20c00044 	addi	r3,r4,1
  808d20:	44800015 	stw	r18,0(r8)
  808d24:	45400115 	stw	r21,4(r8)
  808d28:	d8801c15 	stw	r2,112(sp)
  808d2c:	d8c01b15 	stw	r3,108(sp)
  808d30:	e0fff40e 	bge	fp,r3,808d04 <__alt_mem_epcs_flash_controller_0+0xff7ffd04>
  808d34:	1000101e 	bne	r2,zero,808d78 <___vfiprintf_internal_r+0xca0>
  808d38:	843ffc04 	addi	r16,r16,-16
  808d3c:	01400044 	movi	r5,1
  808d40:	0009883a 	mov	r4,zero
  808d44:	d811883a 	mov	r8,sp
  808d48:	ac3ff316 	blt	r21,r16,808d18 <__alt_mem_epcs_flash_controller_0+0xff7ffd18>
  808d4c:	d8c02317 	ldw	r3,140(sp)
  808d50:	1405883a 	add	r2,r2,r16
  808d54:	44000115 	stw	r16,4(r8)
  808d58:	40c00015 	stw	r3,0(r8)
  808d5c:	d8801c15 	stw	r2,112(sp)
  808d60:	d9401b15 	stw	r5,108(sp)
  808d64:	00c001c4 	movi	r3,7
  808d68:	19401916 	blt	r3,r5,808dd0 <___vfiprintf_internal_r+0xcf8>
  808d6c:	42000204 	addi	r8,r8,8
  808d70:	29400044 	addi	r5,r5,1
  808d74:	003e5506 	br	8086cc <__alt_mem_epcs_flash_controller_0+0xff7ff6cc>
  808d78:	d9402017 	ldw	r5,128(sp)
  808d7c:	d9002117 	ldw	r4,132(sp)
  808d80:	d9801a04 	addi	r6,sp,104
  808d84:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808d88:	10000b1e 	bne	r2,zero,808db8 <___vfiprintf_internal_r+0xce0>
  808d8c:	d9001b17 	ldw	r4,108(sp)
  808d90:	d8801c17 	ldw	r2,112(sp)
  808d94:	d811883a 	mov	r8,sp
  808d98:	21400044 	addi	r5,r4,1
  808d9c:	003fdc06 	br	808d10 <__alt_mem_epcs_flash_controller_0+0xff7ffd10>
  808da0:	d8801c17 	ldw	r2,112(sp)
  808da4:	10000426 	beq	r2,zero,808db8 <___vfiprintf_internal_r+0xce0>
  808da8:	d9402017 	ldw	r5,128(sp)
  808dac:	d9002117 	ldw	r4,132(sp)
  808db0:	d9801a04 	addi	r6,sp,104
  808db4:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808db8:	d9402017 	ldw	r5,128(sp)
  808dbc:	2880030b 	ldhu	r2,12(r5)
  808dc0:	1080100c 	andi	r2,r2,64
  808dc4:	10014d1e 	bne	r2,zero,8092fc <___vfiprintf_internal_r+0x1224>
  808dc8:	d8802417 	ldw	r2,144(sp)
  808dcc:	003d9706 	br	80842c <__alt_mem_epcs_flash_controller_0+0xff7ff42c>
  808dd0:	1000d21e 	bne	r2,zero,80911c <___vfiprintf_internal_r+0x1044>
  808dd4:	00c00044 	movi	r3,1
  808dd8:	a005883a 	mov	r2,r20
  808ddc:	ddc00015 	stw	r23,0(sp)
  808de0:	dd000115 	stw	r20,4(sp)
  808de4:	dd001c15 	stw	r20,112(sp)
  808de8:	d8c01b15 	stw	r3,108(sp)
  808dec:	d811883a 	mov	r8,sp
  808df0:	42000204 	addi	r8,r8,8
  808df4:	8c40010c 	andi	r17,r17,4
  808df8:	88004026 	beq	r17,zero,808efc <___vfiprintf_internal_r+0xe24>
  808dfc:	d9002517 	ldw	r4,148(sp)
  808e00:	24e3c83a 	sub	r17,r4,r19
  808e04:	04403d0e 	bge	zero,r17,808efc <___vfiprintf_internal_r+0xe24>
  808e08:	04000404 	movi	r16,16
  808e0c:	8441a90e 	bge	r16,r17,8094b4 <___vfiprintf_internal_r+0x13dc>
  808e10:	00c020b4 	movhi	r3,130
  808e14:	18e86804 	addi	r3,r3,-24160
  808e18:	d9001b17 	ldw	r4,108(sp)
  808e1c:	d8c02315 	stw	r3,140(sp)
  808e20:	050001c4 	movi	r20,7
  808e24:	dd402117 	ldw	r21,132(sp)
  808e28:	ddc02017 	ldw	r23,128(sp)
  808e2c:	00000506 	br	808e44 <___vfiprintf_internal_r+0xd6c>
  808e30:	21400084 	addi	r5,r4,2
  808e34:	42000204 	addi	r8,r8,8
  808e38:	1809883a 	mov	r4,r3
  808e3c:	8c7ffc04 	addi	r17,r17,-16
  808e40:	84400f0e 	bge	r16,r17,808e80 <___vfiprintf_internal_r+0xda8>
  808e44:	014020b4 	movhi	r5,130
  808e48:	10800404 	addi	r2,r2,16
  808e4c:	20c00044 	addi	r3,r4,1
  808e50:	29686804 	addi	r5,r5,-24160
  808e54:	41400015 	stw	r5,0(r8)
  808e58:	44000115 	stw	r16,4(r8)
  808e5c:	d8801c15 	stw	r2,112(sp)
  808e60:	d8c01b15 	stw	r3,108(sp)
  808e64:	a0fff20e 	bge	r20,r3,808e30 <__alt_mem_epcs_flash_controller_0+0xff7ffe30>
  808e68:	1000141e 	bne	r2,zero,808ebc <___vfiprintf_internal_r+0xde4>
  808e6c:	8c7ffc04 	addi	r17,r17,-16
  808e70:	01400044 	movi	r5,1
  808e74:	0009883a 	mov	r4,zero
  808e78:	d811883a 	mov	r8,sp
  808e7c:	847ff116 	blt	r16,r17,808e44 <__alt_mem_epcs_flash_controller_0+0xff7ffe44>
  808e80:	d8c02317 	ldw	r3,140(sp)
  808e84:	1445883a 	add	r2,r2,r17
  808e88:	44400115 	stw	r17,4(r8)
  808e8c:	40c00015 	stw	r3,0(r8)
  808e90:	d8801c15 	stw	r2,112(sp)
  808e94:	d9401b15 	stw	r5,108(sp)
  808e98:	00c001c4 	movi	r3,7
  808e9c:	1940170e 	bge	r3,r5,808efc <___vfiprintf_internal_r+0xe24>
  808ea0:	1000101e 	bne	r2,zero,808ee4 <___vfiprintf_internal_r+0xe0c>
  808ea4:	d8802517 	ldw	r2,148(sp)
  808ea8:	14c11616 	blt	r2,r19,809304 <___vfiprintf_internal_r+0x122c>
  808eac:	d9002417 	ldw	r4,144(sp)
  808eb0:	2089883a 	add	r4,r4,r2
  808eb4:	d9002415 	stw	r4,144(sp)
  808eb8:	003e1806 	br	80871c <__alt_mem_epcs_flash_controller_0+0xff7ff71c>
  808ebc:	d9801a04 	addi	r6,sp,104
  808ec0:	b80b883a 	mov	r5,r23
  808ec4:	a809883a 	mov	r4,r21
  808ec8:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808ecc:	103fba1e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  808ed0:	d9001b17 	ldw	r4,108(sp)
  808ed4:	d8801c17 	ldw	r2,112(sp)
  808ed8:	d811883a 	mov	r8,sp
  808edc:	21400044 	addi	r5,r4,1
  808ee0:	003fd606 	br	808e3c <__alt_mem_epcs_flash_controller_0+0xff7ffe3c>
  808ee4:	d9402017 	ldw	r5,128(sp)
  808ee8:	d9002117 	ldw	r4,132(sp)
  808eec:	d9801a04 	addi	r6,sp,104
  808ef0:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808ef4:	103fb01e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  808ef8:	d8801c17 	ldw	r2,112(sp)
  808efc:	d8c02517 	ldw	r3,148(sp)
  808f00:	1cc0010e 	bge	r3,r19,808f08 <___vfiprintf_internal_r+0xe30>
  808f04:	9807883a 	mov	r3,r19
  808f08:	d9002417 	ldw	r4,144(sp)
  808f0c:	20c9883a 	add	r4,r4,r3
  808f10:	d9002415 	stw	r4,144(sp)
  808f14:	103e0126 	beq	r2,zero,80871c <__alt_mem_epcs_flash_controller_0+0xff7ff71c>
  808f18:	d9402017 	ldw	r5,128(sp)
  808f1c:	d9002117 	ldw	r4,132(sp)
  808f20:	d9801a04 	addi	r6,sp,104
  808f24:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808f28:	103dfc26 	beq	r2,zero,80871c <__alt_mem_epcs_flash_controller_0+0xff7ff71c>
  808f2c:	003fa206 	br	808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  808f30:	d9402017 	ldw	r5,128(sp)
  808f34:	d9002117 	ldw	r4,132(sp)
  808f38:	d9801a04 	addi	r6,sp,104
  808f3c:	d9c02b15 	stw	r7,172(sp)
  808f40:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  808f44:	d9c02b17 	ldw	r7,172(sp)
  808f48:	103f9b1e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  808f4c:	d9001b17 	ldw	r4,108(sp)
  808f50:	d8801c17 	ldw	r2,112(sp)
  808f54:	d811883a 	mov	r8,sp
  808f58:	21800044 	addi	r6,r4,1
  808f5c:	003dbf06 	br	80865c <__alt_mem_epcs_flash_controller_0+0xff7ff65c>
  808f60:	1000d81e 	bne	r2,zero,8092c4 <___vfiprintf_internal_r+0x11ec>
  808f64:	d9001d87 	ldb	r4,118(sp)
  808f68:	20000a26 	beq	r4,zero,808f94 <___vfiprintf_internal_r+0xebc>
  808f6c:	00800044 	movi	r2,1
  808f70:	d9001d84 	addi	r4,sp,118
  808f74:	100b883a 	mov	r5,r2
  808f78:	d9000015 	stw	r4,0(sp)
  808f7c:	d8800115 	stw	r2,4(sp)
  808f80:	d811883a 	mov	r8,sp
  808f84:	2809883a 	mov	r4,r5
  808f88:	42000204 	addi	r8,r8,8
  808f8c:	29400044 	addi	r5,r5,1
  808f90:	003d9506 	br	8085e8 <__alt_mem_epcs_flash_controller_0+0xff7ff5e8>
  808f94:	3800fd26 	beq	r7,zero,80938c <___vfiprintf_internal_r+0x12b4>
  808f98:	00800084 	movi	r2,2
  808f9c:	d9001d04 	addi	r4,sp,116
  808fa0:	d9000015 	stw	r4,0(sp)
  808fa4:	d8800115 	stw	r2,4(sp)
  808fa8:	01400044 	movi	r5,1
  808fac:	d811883a 	mov	r8,sp
  808fb0:	2809883a 	mov	r4,r5
  808fb4:	42000204 	addi	r8,r8,8
  808fb8:	29400044 	addi	r5,r5,1
  808fbc:	003f4606 	br	808cd8 <__alt_mem_epcs_flash_controller_0+0xff7ffcd8>
  808fc0:	d8802517 	ldw	r2,148(sp)
  808fc4:	14c0010e 	bge	r2,r19,808fcc <___vfiprintf_internal_r+0xef4>
  808fc8:	9805883a 	mov	r2,r19
  808fcc:	d9402417 	ldw	r5,144(sp)
  808fd0:	288b883a 	add	r5,r5,r2
  808fd4:	d9402415 	stw	r5,144(sp)
  808fd8:	003dd006 	br	80871c <__alt_mem_epcs_flash_controller_0+0xff7ff71c>
  808fdc:	d8001d85 	stb	zero,118(sp)
  808fe0:	80005d16 	blt	r16,zero,809158 <___vfiprintf_internal_r+0x1080>
  808fe4:	00ffdfc4 	movi	r3,-129
  808fe8:	9d04b03a 	or	r2,r19,r20
  808fec:	88e2703a 	and	r17,r17,r3
  808ff0:	103d3726 	beq	r2,zero,8084d0 <__alt_mem_epcs_flash_controller_0+0xff7ff4d0>
  808ff4:	002b883a 	mov	r21,zero
  808ff8:	d9002617 	ldw	r4,152(sp)
  808ffc:	ddc01a04 	addi	r23,sp,104
  809000:	988003cc 	andi	r2,r19,15
  809004:	a006973a 	slli	r3,r20,28
  809008:	2085883a 	add	r2,r4,r2
  80900c:	9826d13a 	srli	r19,r19,4
  809010:	10800003 	ldbu	r2,0(r2)
  809014:	a028d13a 	srli	r20,r20,4
  809018:	bdffffc4 	addi	r23,r23,-1
  80901c:	1ce6b03a 	or	r19,r3,r19
  809020:	b8800005 	stb	r2,0(r23)
  809024:	9d04b03a 	or	r2,r19,r20
  809028:	103ff51e 	bne	r2,zero,809000 <__alt_mem_epcs_flash_controller_0+0xff800000>
  80902c:	d8801e17 	ldw	r2,120(sp)
  809030:	15e9c83a 	sub	r20,r2,r23
  809034:	003d2b06 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  809038:	d9402017 	ldw	r5,128(sp)
  80903c:	d9002117 	ldw	r4,132(sp)
  809040:	d9801a04 	addi	r6,sp,104
  809044:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  809048:	103f5b1e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  80904c:	d8801c17 	ldw	r2,112(sp)
  809050:	d811883a 	mov	r8,sp
  809054:	003f6706 	br	808df4 <__alt_mem_epcs_flash_controller_0+0xff7ffdf4>
  809058:	d9402017 	ldw	r5,128(sp)
  80905c:	d9002117 	ldw	r4,132(sp)
  809060:	d9801a04 	addi	r6,sp,104
  809064:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  809068:	103f531e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  80906c:	d811883a 	mov	r8,sp
  809070:	003cd906 	br	8083d8 <__alt_mem_epcs_flash_controller_0+0xff7ff3d8>
  809074:	10803fcc 	andi	r2,r2,255
  809078:	1080201c 	xori	r2,r2,128
  80907c:	10bfe004 	addi	r2,r2,-128
  809080:	00c00c04 	movi	r3,48
  809084:	10ffe926 	beq	r2,r3,80902c <__alt_mem_epcs_flash_controller_0+0xff80002c>
  809088:	b8ffffc5 	stb	r3,-1(r23)
  80908c:	d8c01e17 	ldw	r3,120(sp)
  809090:	b8bfffc4 	addi	r2,r23,-1
  809094:	102f883a 	mov	r23,r2
  809098:	18a9c83a 	sub	r20,r3,r2
  80909c:	003d1106 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  8090a0:	d9402017 	ldw	r5,128(sp)
  8090a4:	d9002117 	ldw	r4,132(sp)
  8090a8:	d9801a04 	addi	r6,sp,104
  8090ac:	d8c02a15 	stw	r3,168(sp)
  8090b0:	d9c02b15 	stw	r7,172(sp)
  8090b4:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  8090b8:	d8c02a17 	ldw	r3,168(sp)
  8090bc:	d9c02b17 	ldw	r7,172(sp)
  8090c0:	103f3d1e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  8090c4:	d9001b17 	ldw	r4,108(sp)
  8090c8:	d8801c17 	ldw	r2,112(sp)
  8090cc:	d811883a 	mov	r8,sp
  8090d0:	21400044 	addi	r5,r4,1
  8090d4:	003d4406 	br	8085e8 <__alt_mem_epcs_flash_controller_0+0xff7ff5e8>
  8090d8:	d9402017 	ldw	r5,128(sp)
  8090dc:	d9002117 	ldw	r4,132(sp)
  8090e0:	d9801a04 	addi	r6,sp,104
  8090e4:	d8c02a15 	stw	r3,168(sp)
  8090e8:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  8090ec:	d8c02a17 	ldw	r3,168(sp)
  8090f0:	103f311e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  8090f4:	d9001b17 	ldw	r4,108(sp)
  8090f8:	d8801c17 	ldw	r2,112(sp)
  8090fc:	d811883a 	mov	r8,sp
  809100:	21400044 	addi	r5,r4,1
  809104:	003ef406 	br	808cd8 <__alt_mem_epcs_flash_controller_0+0xff7ffcd8>
  809108:	1000bd1e 	bne	r2,zero,809400 <___vfiprintf_internal_r+0x1328>
  80910c:	01400044 	movi	r5,1
  809110:	0009883a 	mov	r4,zero
  809114:	d811883a 	mov	r8,sp
  809118:	003ef106 	br	808ce0 <__alt_mem_epcs_flash_controller_0+0xff7ffce0>
  80911c:	d9402017 	ldw	r5,128(sp)
  809120:	d9002117 	ldw	r4,132(sp)
  809124:	d9801a04 	addi	r6,sp,104
  809128:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  80912c:	103f221e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  809130:	d9401b17 	ldw	r5,108(sp)
  809134:	d8801c17 	ldw	r2,112(sp)
  809138:	d811883a 	mov	r8,sp
  80913c:	29400044 	addi	r5,r5,1
  809140:	003d6206 	br	8086cc <__alt_mem_epcs_flash_controller_0+0xff7ff6cc>
  809144:	014020b4 	movhi	r5,130
  809148:	29680304 	addi	r5,r5,-24564
  80914c:	d9402615 	stw	r5,152(sp)
  809150:	d8c02215 	stw	r3,136(sp)
  809154:	1023883a 	mov	r17,r2
  809158:	9d04b03a 	or	r2,r19,r20
  80915c:	103fa51e 	bne	r2,zero,808ff4 <__alt_mem_epcs_flash_controller_0+0xff7ffff4>
  809160:	002b883a 	mov	r21,zero
  809164:	00800084 	movi	r2,2
  809168:	003e4a06 	br	808a94 <__alt_mem_epcs_flash_controller_0+0xff7ffa94>
  80916c:	014020b4 	movhi	r5,130
  809170:	29680304 	addi	r5,r5,-24564
  809174:	002b883a 	mov	r21,zero
  809178:	d9402615 	stw	r5,152(sp)
  80917c:	003f9e06 	br	808ff8 <__alt_mem_epcs_flash_controller_0+0xff7ffff8>
  809180:	d9402217 	ldw	r5,136(sp)
  809184:	d8001d85 	stb	zero,118(sp)
  809188:	0029883a 	mov	r20,zero
  80918c:	28800104 	addi	r2,r5,4
  809190:	2cc00017 	ldw	r19,0(r5)
  809194:	803e3a16 	blt	r16,zero,808a80 <__alt_mem_epcs_flash_controller_0+0xff7ffa80>
  809198:	00ffdfc4 	movi	r3,-129
  80919c:	d8802215 	stw	r2,136(sp)
  8091a0:	88e2703a 	and	r17,r17,r3
  8091a4:	002b883a 	mov	r21,zero
  8091a8:	983e9b26 	beq	r19,zero,808c18 <__alt_mem_epcs_flash_controller_0+0xff7ffc18>
  8091ac:	00800244 	movi	r2,9
  8091b0:	14fdc936 	bltu	r2,r19,8088d8 <__alt_mem_epcs_flash_controller_0+0xff7ff8d8>
  8091b4:	003e9a06 	br	808c20 <__alt_mem_epcs_flash_controller_0+0xff7ffc20>
  8091b8:	00800c04 	movi	r2,48
  8091bc:	d8c01d45 	stb	r3,117(sp)
  8091c0:	d8801d05 	stb	r2,116(sp)
  8091c4:	d8001d85 	stb	zero,118(sp)
  8091c8:	88c00094 	ori	r3,r17,2
  8091cc:	80009c16 	blt	r16,zero,809440 <___vfiprintf_internal_r+0x1368>
  8091d0:	00bfdfc4 	movi	r2,-129
  8091d4:	88a2703a 	and	r17,r17,r2
  8091d8:	8c400094 	ori	r17,r17,2
  8091dc:	002b883a 	mov	r21,zero
  8091e0:	003f8506 	br	808ff8 <__alt_mem_epcs_flash_controller_0+0xff7ffff8>
  8091e4:	b029883a 	mov	r20,r22
  8091e8:	003c0b06 	br	808218 <__alt_mem_epcs_flash_controller_0+0xff7ff218>
  8091ec:	04e7c83a 	sub	r19,zero,r19
  8091f0:	05400b44 	movi	r21,45
  8091f4:	9804c03a 	cmpne	r2,r19,zero
  8091f8:	0529c83a 	sub	r20,zero,r20
  8091fc:	dd401d85 	stb	r21,118(sp)
  809200:	a0a9c83a 	sub	r20,r20,r2
  809204:	80009716 	blt	r16,zero,809464 <___vfiprintf_internal_r+0x138c>
  809208:	00bfdfc4 	movi	r2,-129
  80920c:	88a2703a 	and	r17,r17,r2
  809210:	003db006 	br	8088d4 <__alt_mem_epcs_flash_controller_0+0xff7ff8d4>
  809214:	b0c00007 	ldb	r3,0(r22)
  809218:	003c0c06 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  80921c:	8880100c 	andi	r2,r17,64
  809220:	d8001d85 	stb	zero,118(sp)
  809224:	1000461e 	bne	r2,zero,809340 <___vfiprintf_internal_r+0x1268>
  809228:	d9002217 	ldw	r4,136(sp)
  80922c:	0029883a 	mov	r20,zero
  809230:	20800104 	addi	r2,r4,4
  809234:	24c00017 	ldw	r19,0(r4)
  809238:	803df80e 	bge	r16,zero,808a1c <__alt_mem_epcs_flash_controller_0+0xff7ffa1c>
  80923c:	9d06b03a 	or	r3,r19,r20
  809240:	d8802215 	stw	r2,136(sp)
  809244:	183d5e1e 	bne	r3,zero,8087c0 <__alt_mem_epcs_flash_controller_0+0xff7ff7c0>
  809248:	002b883a 	mov	r21,zero
  80924c:	0005883a 	mov	r2,zero
  809250:	003e1006 	br	808a94 <__alt_mem_epcs_flash_controller_0+0xff7ffa94>
  809254:	8880040c 	andi	r2,r17,16
  809258:	1000321e 	bne	r2,zero,809324 <___vfiprintf_internal_r+0x124c>
  80925c:	8c40100c 	andi	r17,r17,64
  809260:	88008d26 	beq	r17,zero,809498 <___vfiprintf_internal_r+0x13c0>
  809264:	d9402217 	ldw	r5,136(sp)
  809268:	d8c02417 	ldw	r3,144(sp)
  80926c:	28800017 	ldw	r2,0(r5)
  809270:	29400104 	addi	r5,r5,4
  809274:	d9402215 	stw	r5,136(sp)
  809278:	10c0000d 	sth	r3,0(r2)
  80927c:	003bca06 	br	8081a8 <__alt_mem_epcs_flash_controller_0+0xff7ff1a8>
  809280:	8880100c 	andi	r2,r17,64
  809284:	10003a26 	beq	r2,zero,809370 <___vfiprintf_internal_r+0x1298>
  809288:	d8802217 	ldw	r2,136(sp)
  80928c:	14c0000f 	ldh	r19,0(r2)
  809290:	10800104 	addi	r2,r2,4
  809294:	d8802215 	stw	r2,136(sp)
  809298:	9829d7fa 	srai	r20,r19,31
  80929c:	a005883a 	mov	r2,r20
  8092a0:	003d8506 	br	8088b8 <__alt_mem_epcs_flash_controller_0+0xff7ff8b8>
  8092a4:	8880100c 	andi	r2,r17,64
  8092a8:	10002b26 	beq	r2,zero,809358 <___vfiprintf_internal_r+0x1280>
  8092ac:	d8802217 	ldw	r2,136(sp)
  8092b0:	0029883a 	mov	r20,zero
  8092b4:	14c0000b 	ldhu	r19,0(r2)
  8092b8:	10800104 	addi	r2,r2,4
  8092bc:	d8802215 	stw	r2,136(sp)
  8092c0:	003d5d06 	br	808838 <__alt_mem_epcs_flash_controller_0+0xff7ff838>
  8092c4:	d9402017 	ldw	r5,128(sp)
  8092c8:	d9002117 	ldw	r4,132(sp)
  8092cc:	d9801a04 	addi	r6,sp,104
  8092d0:	d8c02a15 	stw	r3,168(sp)
  8092d4:	d9c02b15 	stw	r7,172(sp)
  8092d8:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  8092dc:	d8c02a17 	ldw	r3,168(sp)
  8092e0:	d9c02b17 	ldw	r7,172(sp)
  8092e4:	103eb41e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  8092e8:	d9001b17 	ldw	r4,108(sp)
  8092ec:	d8801c17 	ldw	r2,112(sp)
  8092f0:	d811883a 	mov	r8,sp
  8092f4:	21400044 	addi	r5,r4,1
  8092f8:	003e6706 	br	808c98 <__alt_mem_epcs_flash_controller_0+0xff7ffc98>
  8092fc:	00bfffc4 	movi	r2,-1
  809300:	003c4a06 	br	80842c <__alt_mem_epcs_flash_controller_0+0xff7ff42c>
  809304:	9805883a 	mov	r2,r19
  809308:	003ee806 	br	808eac <__alt_mem_epcs_flash_controller_0+0xff7ffeac>
  80930c:	d8c02217 	ldw	r3,136(sp)
  809310:	0029883a 	mov	r20,zero
  809314:	18800104 	addi	r2,r3,4
  809318:	1cc0000b 	ldhu	r19,0(r3)
  80931c:	803f9e0e 	bge	r16,zero,809198 <__alt_mem_epcs_flash_controller_0+0xff800198>
  809320:	003dd706 	br	808a80 <__alt_mem_epcs_flash_controller_0+0xff7ffa80>
  809324:	d8c02217 	ldw	r3,136(sp)
  809328:	d9002417 	ldw	r4,144(sp)
  80932c:	18800017 	ldw	r2,0(r3)
  809330:	18c00104 	addi	r3,r3,4
  809334:	d8c02215 	stw	r3,136(sp)
  809338:	11000015 	stw	r4,0(r2)
  80933c:	003b9a06 	br	8081a8 <__alt_mem_epcs_flash_controller_0+0xff7ff1a8>
  809340:	d8c02217 	ldw	r3,136(sp)
  809344:	0029883a 	mov	r20,zero
  809348:	18800104 	addi	r2,r3,4
  80934c:	1cc0000b 	ldhu	r19,0(r3)
  809350:	803db20e 	bge	r16,zero,808a1c <__alt_mem_epcs_flash_controller_0+0xff7ffa1c>
  809354:	003fb906 	br	80923c <__alt_mem_epcs_flash_controller_0+0xff80023c>
  809358:	d9002217 	ldw	r4,136(sp)
  80935c:	0029883a 	mov	r20,zero
  809360:	24c00017 	ldw	r19,0(r4)
  809364:	21000104 	addi	r4,r4,4
  809368:	d9002215 	stw	r4,136(sp)
  80936c:	003d3206 	br	808838 <__alt_mem_epcs_flash_controller_0+0xff7ff838>
  809370:	d8c02217 	ldw	r3,136(sp)
  809374:	1cc00017 	ldw	r19,0(r3)
  809378:	18c00104 	addi	r3,r3,4
  80937c:	d8c02215 	stw	r3,136(sp)
  809380:	9829d7fa 	srai	r20,r19,31
  809384:	a005883a 	mov	r2,r20
  809388:	003d4b06 	br	8088b8 <__alt_mem_epcs_flash_controller_0+0xff7ff8b8>
  80938c:	0009883a 	mov	r4,zero
  809390:	01400044 	movi	r5,1
  809394:	d811883a 	mov	r8,sp
  809398:	003e4f06 	br	808cd8 <__alt_mem_epcs_flash_controller_0+0xff7ffcd8>
  80939c:	d8c02215 	stw	r3,136(sp)
  8093a0:	002b883a 	mov	r21,zero
  8093a4:	003db806 	br	808a88 <__alt_mem_epcs_flash_controller_0+0xff7ffa88>
  8093a8:	d811883a 	mov	r8,sp
  8093ac:	003e9606 	br	808e08 <__alt_mem_epcs_flash_controller_0+0xff7ffe08>
  8093b0:	010020b4 	movhi	r4,130
  8093b4:	21286404 	addi	r4,r4,-24176
  8093b8:	d9002315 	stw	r4,140(sp)
  8093bc:	003e6306 	br	808d4c <__alt_mem_epcs_flash_controller_0+0xff7ffd4c>
  8093c0:	b0c00043 	ldbu	r3,1(r22)
  8093c4:	8c400814 	ori	r17,r17,32
  8093c8:	b5800044 	addi	r22,r22,1
  8093cc:	18c03fcc 	andi	r3,r3,255
  8093d0:	18c0201c 	xori	r3,r3,128
  8093d4:	18ffe004 	addi	r3,r3,-128
  8093d8:	003b9c06 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  8093dc:	b809883a 	mov	r4,r23
  8093e0:	da002a15 	stw	r8,168(sp)
  8093e4:	08008480 	call	800848 <strlen>
  8093e8:	1029883a 	mov	r20,r2
  8093ec:	dd401d83 	ldbu	r21,118(sp)
  8093f0:	df002215 	stw	fp,136(sp)
  8093f4:	0021883a 	mov	r16,zero
  8093f8:	da002a17 	ldw	r8,168(sp)
  8093fc:	003c3906 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  809400:	d9402017 	ldw	r5,128(sp)
  809404:	d9002117 	ldw	r4,132(sp)
  809408:	d9801a04 	addi	r6,sp,104
  80940c:	0807fc40 	call	807fc4 <__sprint_r.part.0>
  809410:	103e691e 	bne	r2,zero,808db8 <__alt_mem_epcs_flash_controller_0+0xff7ffdb8>
  809414:	d9001b17 	ldw	r4,108(sp)
  809418:	d8801c17 	ldw	r2,112(sp)
  80941c:	d811883a 	mov	r8,sp
  809420:	21400044 	addi	r5,r4,1
  809424:	003e2e06 	br	808ce0 <__alt_mem_epcs_flash_controller_0+0xff7ffce0>
  809428:	010020b4 	movhi	r4,130
  80942c:	21286804 	addi	r4,r4,-24160
  809430:	d9002315 	stw	r4,140(sp)
  809434:	d9001b17 	ldw	r4,108(sp)
  809438:	21000044 	addi	r4,r4,1
  80943c:	003c5e06 	br	8085b8 <__alt_mem_epcs_flash_controller_0+0xff7ff5b8>
  809440:	002b883a 	mov	r21,zero
  809444:	00800084 	movi	r2,2
  809448:	10803fcc 	andi	r2,r2,255
  80944c:	01000044 	movi	r4,1
  809450:	11002b26 	beq	r2,r4,809500 <___vfiprintf_internal_r+0x1428>
  809454:	01000084 	movi	r4,2
  809458:	11002b1e 	bne	r2,r4,809508 <___vfiprintf_internal_r+0x1430>
  80945c:	1823883a 	mov	r17,r3
  809460:	003ee506 	br	808ff8 <__alt_mem_epcs_flash_controller_0+0xff7ffff8>
  809464:	8807883a 	mov	r3,r17
  809468:	00800044 	movi	r2,1
  80946c:	003ff606 	br	809448 <__alt_mem_epcs_flash_controller_0+0xff800448>
  809470:	00800184 	movi	r2,6
  809474:	1400012e 	bgeu	r2,r16,80947c <___vfiprintf_internal_r+0x13a4>
  809478:	1021883a 	mov	r16,r2
  80947c:	8029883a 	mov	r20,r16
  809480:	8027883a 	mov	r19,r16
  809484:	80002216 	blt	r16,zero,809510 <___vfiprintf_internal_r+0x1438>
  809488:	05c020b4 	movhi	r23,130
  80948c:	df002215 	stw	fp,136(sp)
  809490:	bde80804 	addi	r23,r23,-24544
  809494:	003cfb06 	br	808884 <__alt_mem_epcs_flash_controller_0+0xff7ff884>
  809498:	d9002217 	ldw	r4,136(sp)
  80949c:	d9402417 	ldw	r5,144(sp)
  8094a0:	20800017 	ldw	r2,0(r4)
  8094a4:	21000104 	addi	r4,r4,4
  8094a8:	d9002215 	stw	r4,136(sp)
  8094ac:	11400015 	stw	r5,0(r2)
  8094b0:	003b3d06 	br	8081a8 <__alt_mem_epcs_flash_controller_0+0xff7ff1a8>
  8094b4:	014020b4 	movhi	r5,130
  8094b8:	29686804 	addi	r5,r5,-24160
  8094bc:	d9402315 	stw	r5,140(sp)
  8094c0:	d9401b17 	ldw	r5,108(sp)
  8094c4:	29400044 	addi	r5,r5,1
  8094c8:	003e6d06 	br	808e80 <__alt_mem_epcs_flash_controller_0+0xff7ffe80>
  8094cc:	8029883a 	mov	r20,r16
  8094d0:	dd401d83 	ldbu	r21,118(sp)
  8094d4:	df002215 	stw	fp,136(sp)
  8094d8:	0021883a 	mov	r16,zero
  8094dc:	003c0106 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  8094e0:	00c020b4 	movhi	r3,130
  8094e4:	18e86404 	addi	r3,r3,-24176
  8094e8:	d8c02315 	stw	r3,140(sp)
  8094ec:	280d883a 	mov	r6,r5
  8094f0:	003c6906 	br	808698 <__alt_mem_epcs_flash_controller_0+0xff7ff698>
  8094f4:	802d883a 	mov	r22,r16
  8094f8:	0021883a 	mov	r16,zero
  8094fc:	003b5406 	br	808250 <__alt_mem_epcs_flash_controller_0+0xff7ff250>
  809500:	1823883a 	mov	r17,r3
  809504:	003cf306 	br	8088d4 <__alt_mem_epcs_flash_controller_0+0xff7ff8d4>
  809508:	1823883a 	mov	r17,r3
  80950c:	003cad06 	br	8087c4 <__alt_mem_epcs_flash_controller_0+0xff7ff7c4>
  809510:	0027883a 	mov	r19,zero
  809514:	003fdc06 	br	809488 <__alt_mem_epcs_flash_controller_0+0xff800488>
  809518:	d9402217 	ldw	r5,136(sp)
  80951c:	8005883a 	mov	r2,r16
  809520:	b0c00043 	ldbu	r3,1(r22)
  809524:	2c000017 	ldw	r16,0(r5)
  809528:	29000104 	addi	r4,r5,4
  80952c:	d9002215 	stw	r4,136(sp)
  809530:	102d883a 	mov	r22,r2
  809534:	803fa50e 	bge	r16,zero,8093cc <__alt_mem_epcs_flash_controller_0+0xff8003cc>
  809538:	18c03fcc 	andi	r3,r3,255
  80953c:	18c0201c 	xori	r3,r3,128
  809540:	043fffc4 	movi	r16,-1
  809544:	18ffe004 	addi	r3,r3,-128
  809548:	003b4006 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  80954c:	d9402303 	ldbu	r5,140(sp)
  809550:	d9401d85 	stb	r5,118(sp)
  809554:	003cae06 	br	808810 <__alt_mem_epcs_flash_controller_0+0xff7ff810>
  809558:	d8c02303 	ldbu	r3,140(sp)
  80955c:	d8c01d85 	stb	r3,118(sp)
  809560:	003d1406 	br	8089b4 <__alt_mem_epcs_flash_controller_0+0xff7ff9b4>
  809564:	d8c02303 	ldbu	r3,140(sp)
  809568:	d8c01d85 	stb	r3,118(sp)
  80956c:	003cca06 	br	808898 <__alt_mem_epcs_flash_controller_0+0xff7ff898>
  809570:	8880004c 	andi	r2,r17,1
  809574:	002b883a 	mov	r21,zero
  809578:	10000526 	beq	r2,zero,809590 <___vfiprintf_internal_r+0x14b8>
  80957c:	00800c04 	movi	r2,48
  809580:	d88019c5 	stb	r2,103(sp)
  809584:	dd002817 	ldw	r20,160(sp)
  809588:	ddc019c4 	addi	r23,sp,103
  80958c:	003bd506 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  809590:	0029883a 	mov	r20,zero
  809594:	ddc01a04 	addi	r23,sp,104
  809598:	003bd206 	br	8084e4 <__alt_mem_epcs_flash_controller_0+0xff7ff4e4>
  80959c:	d9002303 	ldbu	r4,140(sp)
  8095a0:	d9001d85 	stb	r4,118(sp)
  8095a4:	003da606 	br	808c40 <__alt_mem_epcs_flash_controller_0+0xff7ffc40>
  8095a8:	d8c02303 	ldbu	r3,140(sp)
  8095ac:	d8c01d85 	stb	r3,118(sp)
  8095b0:	003c7606 	br	80878c <__alt_mem_epcs_flash_controller_0+0xff7ff78c>
  8095b4:	d8c02303 	ldbu	r3,140(sp)
  8095b8:	d8c01d85 	stb	r3,118(sp)
  8095bc:	003c6506 	br	808754 <__alt_mem_epcs_flash_controller_0+0xff7ff754>
  8095c0:	d9002303 	ldbu	r4,140(sp)
  8095c4:	d9001d85 	stb	r4,118(sp)
  8095c8:	003d3d06 	br	808ac0 <__alt_mem_epcs_flash_controller_0+0xff7ffac0>
  8095cc:	d8c02303 	ldbu	r3,140(sp)
  8095d0:	d8c01d85 	stb	r3,118(sp)
  8095d4:	003d1d06 	br	808a4c <__alt_mem_epcs_flash_controller_0+0xff7ffa4c>
  8095d8:	d8c02303 	ldbu	r3,140(sp)
  8095dc:	d8c01d85 	stb	r3,118(sp)
  8095e0:	003d0306 	br	8089f0 <__alt_mem_epcs_flash_controller_0+0xff7ff9f0>

008095e4 <__vfiprintf_internal>:
  8095e4:	008020b4 	movhi	r2,130
  8095e8:	10b07804 	addi	r2,r2,-15904
  8095ec:	300f883a 	mov	r7,r6
  8095f0:	280d883a 	mov	r6,r5
  8095f4:	200b883a 	mov	r5,r4
  8095f8:	11000017 	ldw	r4,0(r2)
  8095fc:	08080d81 	jmpi	8080d8 <___vfiprintf_internal_r>

00809600 <__sbprintf>:
  809600:	2880030b 	ldhu	r2,12(r5)
  809604:	2ac01917 	ldw	r11,100(r5)
  809608:	2a80038b 	ldhu	r10,14(r5)
  80960c:	2a400717 	ldw	r9,28(r5)
  809610:	2a000917 	ldw	r8,36(r5)
  809614:	defee204 	addi	sp,sp,-1144
  809618:	00c10004 	movi	r3,1024
  80961c:	dc011a15 	stw	r16,1128(sp)
  809620:	10bfff4c 	andi	r2,r2,65533
  809624:	2821883a 	mov	r16,r5
  809628:	d8cb883a 	add	r5,sp,r3
  80962c:	dc811c15 	stw	r18,1136(sp)
  809630:	dc411b15 	stw	r17,1132(sp)
  809634:	dfc11d15 	stw	ra,1140(sp)
  809638:	2025883a 	mov	r18,r4
  80963c:	d881030d 	sth	r2,1036(sp)
  809640:	dac11915 	stw	r11,1124(sp)
  809644:	da81038d 	sth	r10,1038(sp)
  809648:	da410715 	stw	r9,1052(sp)
  80964c:	da010915 	stw	r8,1060(sp)
  809650:	dec10015 	stw	sp,1024(sp)
  809654:	dec10415 	stw	sp,1040(sp)
  809658:	d8c10215 	stw	r3,1032(sp)
  80965c:	d8c10515 	stw	r3,1044(sp)
  809660:	d8010615 	stw	zero,1048(sp)
  809664:	08080d80 	call	8080d8 <___vfiprintf_internal_r>
  809668:	1023883a 	mov	r17,r2
  80966c:	10000416 	blt	r2,zero,809680 <__sbprintf+0x80>
  809670:	d9410004 	addi	r5,sp,1024
  809674:	9009883a 	mov	r4,r18
  809678:	08048b40 	call	8048b4 <_fflush_r>
  80967c:	10000d1e 	bne	r2,zero,8096b4 <__sbprintf+0xb4>
  809680:	d881030b 	ldhu	r2,1036(sp)
  809684:	1080100c 	andi	r2,r2,64
  809688:	10000326 	beq	r2,zero,809698 <__sbprintf+0x98>
  80968c:	8080030b 	ldhu	r2,12(r16)
  809690:	10801014 	ori	r2,r2,64
  809694:	8080030d 	sth	r2,12(r16)
  809698:	8805883a 	mov	r2,r17
  80969c:	dfc11d17 	ldw	ra,1140(sp)
  8096a0:	dc811c17 	ldw	r18,1136(sp)
  8096a4:	dc411b17 	ldw	r17,1132(sp)
  8096a8:	dc011a17 	ldw	r16,1128(sp)
  8096ac:	dec11e04 	addi	sp,sp,1144
  8096b0:	f800283a 	ret
  8096b4:	047fffc4 	movi	r17,-1
  8096b8:	003ff106 	br	809680 <__alt_mem_epcs_flash_controller_0+0xff800680>

008096bc <_write_r>:
  8096bc:	defffd04 	addi	sp,sp,-12
  8096c0:	2805883a 	mov	r2,r5
  8096c4:	dc000015 	stw	r16,0(sp)
  8096c8:	040020b4 	movhi	r16,130
  8096cc:	dc400115 	stw	r17,4(sp)
  8096d0:	300b883a 	mov	r5,r6
  8096d4:	8430b404 	addi	r16,r16,-15664
  8096d8:	2023883a 	mov	r17,r4
  8096dc:	380d883a 	mov	r6,r7
  8096e0:	1009883a 	mov	r4,r2
  8096e4:	dfc00215 	stw	ra,8(sp)
  8096e8:	80000015 	stw	zero,0(r16)
  8096ec:	080e0880 	call	80e088 <write>
  8096f0:	00ffffc4 	movi	r3,-1
  8096f4:	10c00526 	beq	r2,r3,80970c <_write_r+0x50>
  8096f8:	dfc00217 	ldw	ra,8(sp)
  8096fc:	dc400117 	ldw	r17,4(sp)
  809700:	dc000017 	ldw	r16,0(sp)
  809704:	dec00304 	addi	sp,sp,12
  809708:	f800283a 	ret
  80970c:	80c00017 	ldw	r3,0(r16)
  809710:	183ff926 	beq	r3,zero,8096f8 <__alt_mem_epcs_flash_controller_0+0xff8006f8>
  809714:	88c00015 	stw	r3,0(r17)
  809718:	003ff706 	br	8096f8 <__alt_mem_epcs_flash_controller_0+0xff8006f8>

0080971c <_close_r>:
  80971c:	defffd04 	addi	sp,sp,-12
  809720:	dc000015 	stw	r16,0(sp)
  809724:	040020b4 	movhi	r16,130
  809728:	dc400115 	stw	r17,4(sp)
  80972c:	8430b404 	addi	r16,r16,-15664
  809730:	2023883a 	mov	r17,r4
  809734:	2809883a 	mov	r4,r5
  809738:	dfc00215 	stw	ra,8(sp)
  80973c:	80000015 	stw	zero,0(r16)
  809740:	080d6840 	call	80d684 <close>
  809744:	00ffffc4 	movi	r3,-1
  809748:	10c00526 	beq	r2,r3,809760 <_close_r+0x44>
  80974c:	dfc00217 	ldw	ra,8(sp)
  809750:	dc400117 	ldw	r17,4(sp)
  809754:	dc000017 	ldw	r16,0(sp)
  809758:	dec00304 	addi	sp,sp,12
  80975c:	f800283a 	ret
  809760:	80c00017 	ldw	r3,0(r16)
  809764:	183ff926 	beq	r3,zero,80974c <__alt_mem_epcs_flash_controller_0+0xff80074c>
  809768:	88c00015 	stw	r3,0(r17)
  80976c:	003ff706 	br	80974c <__alt_mem_epcs_flash_controller_0+0xff80074c>

00809770 <_calloc_r>:
  809770:	defffe04 	addi	sp,sp,-8
  809774:	2805883a 	mov	r2,r5
  809778:	dc000015 	stw	r16,0(sp)
  80977c:	300b883a 	mov	r5,r6
  809780:	2021883a 	mov	r16,r4
  809784:	1009883a 	mov	r4,r2
  809788:	dfc00115 	stw	ra,4(sp)
  80978c:	080ad7c0 	call	80ad7c <__mulsi3>
  809790:	100b883a 	mov	r5,r2
  809794:	8009883a 	mov	r4,r16
  809798:	0805a0c0 	call	805a0c <_malloc_r>
  80979c:	10002926 	beq	r2,zero,809844 <_calloc_r+0xd4>
  8097a0:	11bfff17 	ldw	r6,-4(r2)
  8097a4:	1021883a 	mov	r16,r2
  8097a8:	00bfff04 	movi	r2,-4
  8097ac:	308c703a 	and	r6,r6,r2
  8097b0:	00c00904 	movi	r3,36
  8097b4:	308d883a 	add	r6,r6,r2
  8097b8:	19801636 	bltu	r3,r6,809814 <_calloc_r+0xa4>
  8097bc:	008004c4 	movi	r2,19
  8097c0:	11800b2e 	bgeu	r2,r6,8097f0 <_calloc_r+0x80>
  8097c4:	80000015 	stw	zero,0(r16)
  8097c8:	80000115 	stw	zero,4(r16)
  8097cc:	008006c4 	movi	r2,27
  8097d0:	11801a2e 	bgeu	r2,r6,80983c <_calloc_r+0xcc>
  8097d4:	80000215 	stw	zero,8(r16)
  8097d8:	80000315 	stw	zero,12(r16)
  8097dc:	30c0151e 	bne	r6,r3,809834 <_calloc_r+0xc4>
  8097e0:	80000415 	stw	zero,16(r16)
  8097e4:	80800604 	addi	r2,r16,24
  8097e8:	80000515 	stw	zero,20(r16)
  8097ec:	00000106 	br	8097f4 <_calloc_r+0x84>
  8097f0:	8005883a 	mov	r2,r16
  8097f4:	10000015 	stw	zero,0(r2)
  8097f8:	10000115 	stw	zero,4(r2)
  8097fc:	10000215 	stw	zero,8(r2)
  809800:	8005883a 	mov	r2,r16
  809804:	dfc00117 	ldw	ra,4(sp)
  809808:	dc000017 	ldw	r16,0(sp)
  80980c:	dec00204 	addi	sp,sp,8
  809810:	f800283a 	ret
  809814:	000b883a 	mov	r5,zero
  809818:	8009883a 	mov	r4,r16
  80981c:	08065a00 	call	8065a0 <memset>
  809820:	8005883a 	mov	r2,r16
  809824:	dfc00117 	ldw	ra,4(sp)
  809828:	dc000017 	ldw	r16,0(sp)
  80982c:	dec00204 	addi	sp,sp,8
  809830:	f800283a 	ret
  809834:	80800404 	addi	r2,r16,16
  809838:	003fee06 	br	8097f4 <__alt_mem_epcs_flash_controller_0+0xff8007f4>
  80983c:	80800204 	addi	r2,r16,8
  809840:	003fec06 	br	8097f4 <__alt_mem_epcs_flash_controller_0+0xff8007f4>
  809844:	0005883a 	mov	r2,zero
  809848:	003fee06 	br	809804 <__alt_mem_epcs_flash_controller_0+0xff800804>

0080984c <_fclose_r>:
  80984c:	28003926 	beq	r5,zero,809934 <_fclose_r+0xe8>
  809850:	defffc04 	addi	sp,sp,-16
  809854:	dc400115 	stw	r17,4(sp)
  809858:	dc000015 	stw	r16,0(sp)
  80985c:	dfc00315 	stw	ra,12(sp)
  809860:	dc800215 	stw	r18,8(sp)
  809864:	2023883a 	mov	r17,r4
  809868:	2821883a 	mov	r16,r5
  80986c:	20000226 	beq	r4,zero,809878 <_fclose_r+0x2c>
  809870:	20800e17 	ldw	r2,56(r4)
  809874:	10002726 	beq	r2,zero,809914 <_fclose_r+0xc8>
  809878:	8080030f 	ldh	r2,12(r16)
  80987c:	1000071e 	bne	r2,zero,80989c <_fclose_r+0x50>
  809880:	0005883a 	mov	r2,zero
  809884:	dfc00317 	ldw	ra,12(sp)
  809888:	dc800217 	ldw	r18,8(sp)
  80988c:	dc400117 	ldw	r17,4(sp)
  809890:	dc000017 	ldw	r16,0(sp)
  809894:	dec00404 	addi	sp,sp,16
  809898:	f800283a 	ret
  80989c:	800b883a 	mov	r5,r16
  8098a0:	8809883a 	mov	r4,r17
  8098a4:	08046980 	call	804698 <__sflush_r>
  8098a8:	1025883a 	mov	r18,r2
  8098ac:	80800b17 	ldw	r2,44(r16)
  8098b0:	10000426 	beq	r2,zero,8098c4 <_fclose_r+0x78>
  8098b4:	81400717 	ldw	r5,28(r16)
  8098b8:	8809883a 	mov	r4,r17
  8098bc:	103ee83a 	callr	r2
  8098c0:	10001616 	blt	r2,zero,80991c <_fclose_r+0xd0>
  8098c4:	8080030b 	ldhu	r2,12(r16)
  8098c8:	1080200c 	andi	r2,r2,128
  8098cc:	1000151e 	bne	r2,zero,809924 <_fclose_r+0xd8>
  8098d0:	81400c17 	ldw	r5,48(r16)
  8098d4:	28000526 	beq	r5,zero,8098ec <_fclose_r+0xa0>
  8098d8:	80801004 	addi	r2,r16,64
  8098dc:	28800226 	beq	r5,r2,8098e8 <_fclose_r+0x9c>
  8098e0:	8809883a 	mov	r4,r17
  8098e4:	0804e140 	call	804e14 <_free_r>
  8098e8:	80000c15 	stw	zero,48(r16)
  8098ec:	81401117 	ldw	r5,68(r16)
  8098f0:	28000326 	beq	r5,zero,809900 <_fclose_r+0xb4>
  8098f4:	8809883a 	mov	r4,r17
  8098f8:	0804e140 	call	804e14 <_free_r>
  8098fc:	80001115 	stw	zero,68(r16)
  809900:	0804cb00 	call	804cb0 <__sfp_lock_acquire>
  809904:	8000030d 	sth	zero,12(r16)
  809908:	0804cb40 	call	804cb4 <__sfp_lock_release>
  80990c:	9005883a 	mov	r2,r18
  809910:	003fdc06 	br	809884 <__alt_mem_epcs_flash_controller_0+0xff800884>
  809914:	0804ca00 	call	804ca0 <__sinit>
  809918:	003fd706 	br	809878 <__alt_mem_epcs_flash_controller_0+0xff800878>
  80991c:	04bfffc4 	movi	r18,-1
  809920:	003fe806 	br	8098c4 <__alt_mem_epcs_flash_controller_0+0xff8008c4>
  809924:	81400417 	ldw	r5,16(r16)
  809928:	8809883a 	mov	r4,r17
  80992c:	0804e140 	call	804e14 <_free_r>
  809930:	003fe706 	br	8098d0 <__alt_mem_epcs_flash_controller_0+0xff8008d0>
  809934:	0005883a 	mov	r2,zero
  809938:	f800283a 	ret

0080993c <fclose>:
  80993c:	008020b4 	movhi	r2,130
  809940:	10b07804 	addi	r2,r2,-15904
  809944:	200b883a 	mov	r5,r4
  809948:	11000017 	ldw	r4,0(r2)
  80994c:	080984c1 	jmpi	80984c <_fclose_r>

00809950 <__fputwc>:
  809950:	defff804 	addi	sp,sp,-32
  809954:	dcc00415 	stw	r19,16(sp)
  809958:	dc800315 	stw	r18,12(sp)
  80995c:	dc000115 	stw	r16,4(sp)
  809960:	dfc00715 	stw	ra,28(sp)
  809964:	dd400615 	stw	r21,24(sp)
  809968:	dd000515 	stw	r20,20(sp)
  80996c:	dc400215 	stw	r17,8(sp)
  809970:	2027883a 	mov	r19,r4
  809974:	2825883a 	mov	r18,r5
  809978:	3021883a 	mov	r16,r6
  80997c:	08057fc0 	call	8057fc <__locale_mb_cur_max>
  809980:	00c00044 	movi	r3,1
  809984:	10c03e26 	beq	r2,r3,809a80 <__fputwc+0x130>
  809988:	81c01704 	addi	r7,r16,92
  80998c:	900d883a 	mov	r6,r18
  809990:	d80b883a 	mov	r5,sp
  809994:	9809883a 	mov	r4,r19
  809998:	0809e200 	call	809e20 <_wcrtomb_r>
  80999c:	1029883a 	mov	r20,r2
  8099a0:	00bfffc4 	movi	r2,-1
  8099a4:	a0802026 	beq	r20,r2,809a28 <__fputwc+0xd8>
  8099a8:	d9400003 	ldbu	r5,0(sp)
  8099ac:	a0001c26 	beq	r20,zero,809a20 <__fputwc+0xd0>
  8099b0:	0023883a 	mov	r17,zero
  8099b4:	05400284 	movi	r21,10
  8099b8:	00000906 	br	8099e0 <__fputwc+0x90>
  8099bc:	80800017 	ldw	r2,0(r16)
  8099c0:	11400005 	stb	r5,0(r2)
  8099c4:	80c00017 	ldw	r3,0(r16)
  8099c8:	18c00044 	addi	r3,r3,1
  8099cc:	80c00015 	stw	r3,0(r16)
  8099d0:	8c400044 	addi	r17,r17,1
  8099d4:	dc45883a 	add	r2,sp,r17
  8099d8:	8d00112e 	bgeu	r17,r20,809a20 <__fputwc+0xd0>
  8099dc:	11400003 	ldbu	r5,0(r2)
  8099e0:	80c00217 	ldw	r3,8(r16)
  8099e4:	18ffffc4 	addi	r3,r3,-1
  8099e8:	80c00215 	stw	r3,8(r16)
  8099ec:	183ff30e 	bge	r3,zero,8099bc <__alt_mem_epcs_flash_controller_0+0xff8009bc>
  8099f0:	80800617 	ldw	r2,24(r16)
  8099f4:	18801916 	blt	r3,r2,809a5c <__fputwc+0x10c>
  8099f8:	80800017 	ldw	r2,0(r16)
  8099fc:	11400005 	stb	r5,0(r2)
  809a00:	80800017 	ldw	r2,0(r16)
  809a04:	10c00003 	ldbu	r3,0(r2)
  809a08:	10800044 	addi	r2,r2,1
  809a0c:	1d402326 	beq	r3,r21,809a9c <__fputwc+0x14c>
  809a10:	80800015 	stw	r2,0(r16)
  809a14:	8c400044 	addi	r17,r17,1
  809a18:	dc45883a 	add	r2,sp,r17
  809a1c:	8d3fef36 	bltu	r17,r20,8099dc <__alt_mem_epcs_flash_controller_0+0xff8009dc>
  809a20:	9005883a 	mov	r2,r18
  809a24:	00000406 	br	809a38 <__fputwc+0xe8>
  809a28:	80c0030b 	ldhu	r3,12(r16)
  809a2c:	a005883a 	mov	r2,r20
  809a30:	18c01014 	ori	r3,r3,64
  809a34:	80c0030d 	sth	r3,12(r16)
  809a38:	dfc00717 	ldw	ra,28(sp)
  809a3c:	dd400617 	ldw	r21,24(sp)
  809a40:	dd000517 	ldw	r20,20(sp)
  809a44:	dcc00417 	ldw	r19,16(sp)
  809a48:	dc800317 	ldw	r18,12(sp)
  809a4c:	dc400217 	ldw	r17,8(sp)
  809a50:	dc000117 	ldw	r16,4(sp)
  809a54:	dec00804 	addi	sp,sp,32
  809a58:	f800283a 	ret
  809a5c:	800d883a 	mov	r6,r16
  809a60:	29403fcc 	andi	r5,r5,255
  809a64:	9809883a 	mov	r4,r19
  809a68:	0809cc80 	call	809cc8 <__swbuf_r>
  809a6c:	10bfffe0 	cmpeqi	r2,r2,-1
  809a70:	10803fcc 	andi	r2,r2,255
  809a74:	103fd626 	beq	r2,zero,8099d0 <__alt_mem_epcs_flash_controller_0+0xff8009d0>
  809a78:	00bfffc4 	movi	r2,-1
  809a7c:	003fee06 	br	809a38 <__alt_mem_epcs_flash_controller_0+0xff800a38>
  809a80:	90ffffc4 	addi	r3,r18,-1
  809a84:	01003f84 	movi	r4,254
  809a88:	20ffbf36 	bltu	r4,r3,809988 <__alt_mem_epcs_flash_controller_0+0xff800988>
  809a8c:	900b883a 	mov	r5,r18
  809a90:	dc800005 	stb	r18,0(sp)
  809a94:	1029883a 	mov	r20,r2
  809a98:	003fc506 	br	8099b0 <__alt_mem_epcs_flash_controller_0+0xff8009b0>
  809a9c:	800d883a 	mov	r6,r16
  809aa0:	a80b883a 	mov	r5,r21
  809aa4:	9809883a 	mov	r4,r19
  809aa8:	0809cc80 	call	809cc8 <__swbuf_r>
  809aac:	10bfffe0 	cmpeqi	r2,r2,-1
  809ab0:	003fef06 	br	809a70 <__alt_mem_epcs_flash_controller_0+0xff800a70>

00809ab4 <_fputwc_r>:
  809ab4:	3080030b 	ldhu	r2,12(r6)
  809ab8:	10c8000c 	andi	r3,r2,8192
  809abc:	1800051e 	bne	r3,zero,809ad4 <_fputwc_r+0x20>
  809ac0:	30c01917 	ldw	r3,100(r6)
  809ac4:	10880014 	ori	r2,r2,8192
  809ac8:	3080030d 	sth	r2,12(r6)
  809acc:	18880014 	ori	r2,r3,8192
  809ad0:	30801915 	stw	r2,100(r6)
  809ad4:	08099501 	jmpi	809950 <__fputwc>

00809ad8 <fputwc>:
  809ad8:	008020b4 	movhi	r2,130
  809adc:	defffc04 	addi	sp,sp,-16
  809ae0:	10b07804 	addi	r2,r2,-15904
  809ae4:	dc000115 	stw	r16,4(sp)
  809ae8:	14000017 	ldw	r16,0(r2)
  809aec:	dc400215 	stw	r17,8(sp)
  809af0:	dfc00315 	stw	ra,12(sp)
  809af4:	2023883a 	mov	r17,r4
  809af8:	80000226 	beq	r16,zero,809b04 <fputwc+0x2c>
  809afc:	80800e17 	ldw	r2,56(r16)
  809b00:	10001026 	beq	r2,zero,809b44 <fputwc+0x6c>
  809b04:	2880030b 	ldhu	r2,12(r5)
  809b08:	10c8000c 	andi	r3,r2,8192
  809b0c:	1800051e 	bne	r3,zero,809b24 <fputwc+0x4c>
  809b10:	28c01917 	ldw	r3,100(r5)
  809b14:	10880014 	ori	r2,r2,8192
  809b18:	2880030d 	sth	r2,12(r5)
  809b1c:	18880014 	ori	r2,r3,8192
  809b20:	28801915 	stw	r2,100(r5)
  809b24:	280d883a 	mov	r6,r5
  809b28:	8009883a 	mov	r4,r16
  809b2c:	880b883a 	mov	r5,r17
  809b30:	dfc00317 	ldw	ra,12(sp)
  809b34:	dc400217 	ldw	r17,8(sp)
  809b38:	dc000117 	ldw	r16,4(sp)
  809b3c:	dec00404 	addi	sp,sp,16
  809b40:	08099501 	jmpi	809950 <__fputwc>
  809b44:	8009883a 	mov	r4,r16
  809b48:	d9400015 	stw	r5,0(sp)
  809b4c:	0804ca00 	call	804ca0 <__sinit>
  809b50:	d9400017 	ldw	r5,0(sp)
  809b54:	003feb06 	br	809b04 <__alt_mem_epcs_flash_controller_0+0xff800b04>

00809b58 <_fstat_r>:
  809b58:	defffd04 	addi	sp,sp,-12
  809b5c:	2805883a 	mov	r2,r5
  809b60:	dc000015 	stw	r16,0(sp)
  809b64:	040020b4 	movhi	r16,130
  809b68:	dc400115 	stw	r17,4(sp)
  809b6c:	8430b404 	addi	r16,r16,-15664
  809b70:	2023883a 	mov	r17,r4
  809b74:	300b883a 	mov	r5,r6
  809b78:	1009883a 	mov	r4,r2
  809b7c:	dfc00215 	stw	ra,8(sp)
  809b80:	80000015 	stw	zero,0(r16)
  809b84:	080d7c40 	call	80d7c4 <fstat>
  809b88:	00ffffc4 	movi	r3,-1
  809b8c:	10c00526 	beq	r2,r3,809ba4 <_fstat_r+0x4c>
  809b90:	dfc00217 	ldw	ra,8(sp)
  809b94:	dc400117 	ldw	r17,4(sp)
  809b98:	dc000017 	ldw	r16,0(sp)
  809b9c:	dec00304 	addi	sp,sp,12
  809ba0:	f800283a 	ret
  809ba4:	80c00017 	ldw	r3,0(r16)
  809ba8:	183ff926 	beq	r3,zero,809b90 <__alt_mem_epcs_flash_controller_0+0xff800b90>
  809bac:	88c00015 	stw	r3,0(r17)
  809bb0:	003ff706 	br	809b90 <__alt_mem_epcs_flash_controller_0+0xff800b90>

00809bb4 <_isatty_r>:
  809bb4:	defffd04 	addi	sp,sp,-12
  809bb8:	dc000015 	stw	r16,0(sp)
  809bbc:	040020b4 	movhi	r16,130
  809bc0:	dc400115 	stw	r17,4(sp)
  809bc4:	8430b404 	addi	r16,r16,-15664
  809bc8:	2023883a 	mov	r17,r4
  809bcc:	2809883a 	mov	r4,r5
  809bd0:	dfc00215 	stw	ra,8(sp)
  809bd4:	80000015 	stw	zero,0(r16)
  809bd8:	080db580 	call	80db58 <isatty>
  809bdc:	00ffffc4 	movi	r3,-1
  809be0:	10c00526 	beq	r2,r3,809bf8 <_isatty_r+0x44>
  809be4:	dfc00217 	ldw	ra,8(sp)
  809be8:	dc400117 	ldw	r17,4(sp)
  809bec:	dc000017 	ldw	r16,0(sp)
  809bf0:	dec00304 	addi	sp,sp,12
  809bf4:	f800283a 	ret
  809bf8:	80c00017 	ldw	r3,0(r16)
  809bfc:	183ff926 	beq	r3,zero,809be4 <__alt_mem_epcs_flash_controller_0+0xff800be4>
  809c00:	88c00015 	stw	r3,0(r17)
  809c04:	003ff706 	br	809be4 <__alt_mem_epcs_flash_controller_0+0xff800be4>

00809c08 <_lseek_r>:
  809c08:	defffd04 	addi	sp,sp,-12
  809c0c:	2805883a 	mov	r2,r5
  809c10:	dc000015 	stw	r16,0(sp)
  809c14:	040020b4 	movhi	r16,130
  809c18:	dc400115 	stw	r17,4(sp)
  809c1c:	300b883a 	mov	r5,r6
  809c20:	8430b404 	addi	r16,r16,-15664
  809c24:	2023883a 	mov	r17,r4
  809c28:	380d883a 	mov	r6,r7
  809c2c:	1009883a 	mov	r4,r2
  809c30:	dfc00215 	stw	ra,8(sp)
  809c34:	80000015 	stw	zero,0(r16)
  809c38:	080dc400 	call	80dc40 <lseek>
  809c3c:	00ffffc4 	movi	r3,-1
  809c40:	10c00526 	beq	r2,r3,809c58 <_lseek_r+0x50>
  809c44:	dfc00217 	ldw	ra,8(sp)
  809c48:	dc400117 	ldw	r17,4(sp)
  809c4c:	dc000017 	ldw	r16,0(sp)
  809c50:	dec00304 	addi	sp,sp,12
  809c54:	f800283a 	ret
  809c58:	80c00017 	ldw	r3,0(r16)
  809c5c:	183ff926 	beq	r3,zero,809c44 <__alt_mem_epcs_flash_controller_0+0xff800c44>
  809c60:	88c00015 	stw	r3,0(r17)
  809c64:	003ff706 	br	809c44 <__alt_mem_epcs_flash_controller_0+0xff800c44>

00809c68 <_read_r>:
  809c68:	defffd04 	addi	sp,sp,-12
  809c6c:	2805883a 	mov	r2,r5
  809c70:	dc000015 	stw	r16,0(sp)
  809c74:	040020b4 	movhi	r16,130
  809c78:	dc400115 	stw	r17,4(sp)
  809c7c:	300b883a 	mov	r5,r6
  809c80:	8430b404 	addi	r16,r16,-15664
  809c84:	2023883a 	mov	r17,r4
  809c88:	380d883a 	mov	r6,r7
  809c8c:	1009883a 	mov	r4,r2
  809c90:	dfc00215 	stw	ra,8(sp)
  809c94:	80000015 	stw	zero,0(r16)
  809c98:	080de140 	call	80de14 <read>
  809c9c:	00ffffc4 	movi	r3,-1
  809ca0:	10c00526 	beq	r2,r3,809cb8 <_read_r+0x50>
  809ca4:	dfc00217 	ldw	ra,8(sp)
  809ca8:	dc400117 	ldw	r17,4(sp)
  809cac:	dc000017 	ldw	r16,0(sp)
  809cb0:	dec00304 	addi	sp,sp,12
  809cb4:	f800283a 	ret
  809cb8:	80c00017 	ldw	r3,0(r16)
  809cbc:	183ff926 	beq	r3,zero,809ca4 <__alt_mem_epcs_flash_controller_0+0xff800ca4>
  809cc0:	88c00015 	stw	r3,0(r17)
  809cc4:	003ff706 	br	809ca4 <__alt_mem_epcs_flash_controller_0+0xff800ca4>

00809cc8 <__swbuf_r>:
  809cc8:	defffb04 	addi	sp,sp,-20
  809ccc:	dcc00315 	stw	r19,12(sp)
  809cd0:	dc800215 	stw	r18,8(sp)
  809cd4:	dc000015 	stw	r16,0(sp)
  809cd8:	dfc00415 	stw	ra,16(sp)
  809cdc:	dc400115 	stw	r17,4(sp)
  809ce0:	2025883a 	mov	r18,r4
  809ce4:	2827883a 	mov	r19,r5
  809ce8:	3021883a 	mov	r16,r6
  809cec:	20000226 	beq	r4,zero,809cf8 <__swbuf_r+0x30>
  809cf0:	20800e17 	ldw	r2,56(r4)
  809cf4:	10004226 	beq	r2,zero,809e00 <__swbuf_r+0x138>
  809cf8:	80800617 	ldw	r2,24(r16)
  809cfc:	8100030b 	ldhu	r4,12(r16)
  809d00:	80800215 	stw	r2,8(r16)
  809d04:	2080020c 	andi	r2,r4,8
  809d08:	10003626 	beq	r2,zero,809de4 <__swbuf_r+0x11c>
  809d0c:	80c00417 	ldw	r3,16(r16)
  809d10:	18003426 	beq	r3,zero,809de4 <__swbuf_r+0x11c>
  809d14:	2088000c 	andi	r2,r4,8192
  809d18:	9c403fcc 	andi	r17,r19,255
  809d1c:	10001a26 	beq	r2,zero,809d88 <__swbuf_r+0xc0>
  809d20:	80800017 	ldw	r2,0(r16)
  809d24:	81000517 	ldw	r4,20(r16)
  809d28:	10c7c83a 	sub	r3,r2,r3
  809d2c:	1900200e 	bge	r3,r4,809db0 <__swbuf_r+0xe8>
  809d30:	18c00044 	addi	r3,r3,1
  809d34:	81000217 	ldw	r4,8(r16)
  809d38:	11400044 	addi	r5,r2,1
  809d3c:	81400015 	stw	r5,0(r16)
  809d40:	213fffc4 	addi	r4,r4,-1
  809d44:	81000215 	stw	r4,8(r16)
  809d48:	14c00005 	stb	r19,0(r2)
  809d4c:	80800517 	ldw	r2,20(r16)
  809d50:	10c01e26 	beq	r2,r3,809dcc <__swbuf_r+0x104>
  809d54:	8080030b 	ldhu	r2,12(r16)
  809d58:	1080004c 	andi	r2,r2,1
  809d5c:	10000226 	beq	r2,zero,809d68 <__swbuf_r+0xa0>
  809d60:	00800284 	movi	r2,10
  809d64:	88801926 	beq	r17,r2,809dcc <__swbuf_r+0x104>
  809d68:	8805883a 	mov	r2,r17
  809d6c:	dfc00417 	ldw	ra,16(sp)
  809d70:	dcc00317 	ldw	r19,12(sp)
  809d74:	dc800217 	ldw	r18,8(sp)
  809d78:	dc400117 	ldw	r17,4(sp)
  809d7c:	dc000017 	ldw	r16,0(sp)
  809d80:	dec00504 	addi	sp,sp,20
  809d84:	f800283a 	ret
  809d88:	81401917 	ldw	r5,100(r16)
  809d8c:	00b7ffc4 	movi	r2,-8193
  809d90:	21080014 	ori	r4,r4,8192
  809d94:	2884703a 	and	r2,r5,r2
  809d98:	80801915 	stw	r2,100(r16)
  809d9c:	80800017 	ldw	r2,0(r16)
  809da0:	8100030d 	sth	r4,12(r16)
  809da4:	81000517 	ldw	r4,20(r16)
  809da8:	10c7c83a 	sub	r3,r2,r3
  809dac:	193fe016 	blt	r3,r4,809d30 <__alt_mem_epcs_flash_controller_0+0xff800d30>
  809db0:	800b883a 	mov	r5,r16
  809db4:	9009883a 	mov	r4,r18
  809db8:	08048b40 	call	8048b4 <_fflush_r>
  809dbc:	1000071e 	bne	r2,zero,809ddc <__swbuf_r+0x114>
  809dc0:	80800017 	ldw	r2,0(r16)
  809dc4:	00c00044 	movi	r3,1
  809dc8:	003fda06 	br	809d34 <__alt_mem_epcs_flash_controller_0+0xff800d34>
  809dcc:	800b883a 	mov	r5,r16
  809dd0:	9009883a 	mov	r4,r18
  809dd4:	08048b40 	call	8048b4 <_fflush_r>
  809dd8:	103fe326 	beq	r2,zero,809d68 <__alt_mem_epcs_flash_controller_0+0xff800d68>
  809ddc:	00bfffc4 	movi	r2,-1
  809de0:	003fe206 	br	809d6c <__alt_mem_epcs_flash_controller_0+0xff800d6c>
  809de4:	800b883a 	mov	r5,r16
  809de8:	9009883a 	mov	r4,r18
  809dec:	0802c940 	call	802c94 <__swsetup_r>
  809df0:	103ffa1e 	bne	r2,zero,809ddc <__alt_mem_epcs_flash_controller_0+0xff800ddc>
  809df4:	8100030b 	ldhu	r4,12(r16)
  809df8:	80c00417 	ldw	r3,16(r16)
  809dfc:	003fc506 	br	809d14 <__alt_mem_epcs_flash_controller_0+0xff800d14>
  809e00:	0804ca00 	call	804ca0 <__sinit>
  809e04:	003fbc06 	br	809cf8 <__alt_mem_epcs_flash_controller_0+0xff800cf8>

00809e08 <__swbuf>:
  809e08:	008020b4 	movhi	r2,130
  809e0c:	10b07804 	addi	r2,r2,-15904
  809e10:	280d883a 	mov	r6,r5
  809e14:	200b883a 	mov	r5,r4
  809e18:	11000017 	ldw	r4,0(r2)
  809e1c:	0809cc81 	jmpi	809cc8 <__swbuf_r>

00809e20 <_wcrtomb_r>:
  809e20:	defff604 	addi	sp,sp,-40
  809e24:	008020b4 	movhi	r2,130
  809e28:	dc800815 	stw	r18,32(sp)
  809e2c:	dc400715 	stw	r17,28(sp)
  809e30:	dc000615 	stw	r16,24(sp)
  809e34:	10b07c04 	addi	r2,r2,-15888
  809e38:	dfc00915 	stw	ra,36(sp)
  809e3c:	2021883a 	mov	r16,r4
  809e40:	3823883a 	mov	r17,r7
  809e44:	14800017 	ldw	r18,0(r2)
  809e48:	28001426 	beq	r5,zero,809e9c <_wcrtomb_r+0x7c>
  809e4c:	d9400415 	stw	r5,16(sp)
  809e50:	d9800515 	stw	r6,20(sp)
  809e54:	08057f00 	call	8057f0 <__locale_charset>
  809e58:	d9800517 	ldw	r6,20(sp)
  809e5c:	d9400417 	ldw	r5,16(sp)
  809e60:	100f883a 	mov	r7,r2
  809e64:	dc400015 	stw	r17,0(sp)
  809e68:	8009883a 	mov	r4,r16
  809e6c:	903ee83a 	callr	r18
  809e70:	00ffffc4 	movi	r3,-1
  809e74:	10c0031e 	bne	r2,r3,809e84 <_wcrtomb_r+0x64>
  809e78:	88000015 	stw	zero,0(r17)
  809e7c:	00c02284 	movi	r3,138
  809e80:	80c00015 	stw	r3,0(r16)
  809e84:	dfc00917 	ldw	ra,36(sp)
  809e88:	dc800817 	ldw	r18,32(sp)
  809e8c:	dc400717 	ldw	r17,28(sp)
  809e90:	dc000617 	ldw	r16,24(sp)
  809e94:	dec00a04 	addi	sp,sp,40
  809e98:	f800283a 	ret
  809e9c:	08057f00 	call	8057f0 <__locale_charset>
  809ea0:	100f883a 	mov	r7,r2
  809ea4:	dc400015 	stw	r17,0(sp)
  809ea8:	000d883a 	mov	r6,zero
  809eac:	d9400104 	addi	r5,sp,4
  809eb0:	8009883a 	mov	r4,r16
  809eb4:	903ee83a 	callr	r18
  809eb8:	003fed06 	br	809e70 <__alt_mem_epcs_flash_controller_0+0xff800e70>

00809ebc <wcrtomb>:
  809ebc:	defff604 	addi	sp,sp,-40
  809ec0:	008020b4 	movhi	r2,130
  809ec4:	dc800615 	stw	r18,24(sp)
  809ec8:	dc400515 	stw	r17,20(sp)
  809ecc:	10b07804 	addi	r2,r2,-15904
  809ed0:	dfc00915 	stw	ra,36(sp)
  809ed4:	dd000815 	stw	r20,32(sp)
  809ed8:	dcc00715 	stw	r19,28(sp)
  809edc:	dc000415 	stw	r16,16(sp)
  809ee0:	3025883a 	mov	r18,r6
  809ee4:	14400017 	ldw	r17,0(r2)
  809ee8:	20001926 	beq	r4,zero,809f50 <wcrtomb+0x94>
  809eec:	008020b4 	movhi	r2,130
  809ef0:	10b07c04 	addi	r2,r2,-15888
  809ef4:	15000017 	ldw	r20,0(r2)
  809ef8:	2021883a 	mov	r16,r4
  809efc:	2827883a 	mov	r19,r5
  809f00:	08057f00 	call	8057f0 <__locale_charset>
  809f04:	100f883a 	mov	r7,r2
  809f08:	dc800015 	stw	r18,0(sp)
  809f0c:	980d883a 	mov	r6,r19
  809f10:	800b883a 	mov	r5,r16
  809f14:	8809883a 	mov	r4,r17
  809f18:	a03ee83a 	callr	r20
  809f1c:	00ffffc4 	movi	r3,-1
  809f20:	10c0031e 	bne	r2,r3,809f30 <wcrtomb+0x74>
  809f24:	90000015 	stw	zero,0(r18)
  809f28:	00c02284 	movi	r3,138
  809f2c:	88c00015 	stw	r3,0(r17)
  809f30:	dfc00917 	ldw	ra,36(sp)
  809f34:	dd000817 	ldw	r20,32(sp)
  809f38:	dcc00717 	ldw	r19,28(sp)
  809f3c:	dc800617 	ldw	r18,24(sp)
  809f40:	dc400517 	ldw	r17,20(sp)
  809f44:	dc000417 	ldw	r16,16(sp)
  809f48:	dec00a04 	addi	sp,sp,40
  809f4c:	f800283a 	ret
  809f50:	008020b4 	movhi	r2,130
  809f54:	10b07c04 	addi	r2,r2,-15888
  809f58:	14000017 	ldw	r16,0(r2)
  809f5c:	08057f00 	call	8057f0 <__locale_charset>
  809f60:	100f883a 	mov	r7,r2
  809f64:	dc800015 	stw	r18,0(sp)
  809f68:	000d883a 	mov	r6,zero
  809f6c:	d9400104 	addi	r5,sp,4
  809f70:	8809883a 	mov	r4,r17
  809f74:	803ee83a 	callr	r16
  809f78:	003fe806 	br	809f1c <__alt_mem_epcs_flash_controller_0+0xff800f1c>

00809f7c <__ascii_wctomb>:
  809f7c:	28000526 	beq	r5,zero,809f94 <__ascii_wctomb+0x18>
  809f80:	00803fc4 	movi	r2,255
  809f84:	11800536 	bltu	r2,r6,809f9c <__ascii_wctomb+0x20>
  809f88:	29800005 	stb	r6,0(r5)
  809f8c:	00800044 	movi	r2,1
  809f90:	f800283a 	ret
  809f94:	0005883a 	mov	r2,zero
  809f98:	f800283a 	ret
  809f9c:	00802284 	movi	r2,138
  809fa0:	20800015 	stw	r2,0(r4)
  809fa4:	00bfffc4 	movi	r2,-1
  809fa8:	f800283a 	ret

00809fac <_wctomb_r>:
  809fac:	008020b4 	movhi	r2,130
  809fb0:	defff904 	addi	sp,sp,-28
  809fb4:	10b07c04 	addi	r2,r2,-15888
  809fb8:	dfc00615 	stw	ra,24(sp)
  809fbc:	dc400515 	stw	r17,20(sp)
  809fc0:	dc000415 	stw	r16,16(sp)
  809fc4:	3823883a 	mov	r17,r7
  809fc8:	14000017 	ldw	r16,0(r2)
  809fcc:	d9000115 	stw	r4,4(sp)
  809fd0:	d9400215 	stw	r5,8(sp)
  809fd4:	d9800315 	stw	r6,12(sp)
  809fd8:	08057f00 	call	8057f0 <__locale_charset>
  809fdc:	d9800317 	ldw	r6,12(sp)
  809fe0:	d9400217 	ldw	r5,8(sp)
  809fe4:	d9000117 	ldw	r4,4(sp)
  809fe8:	100f883a 	mov	r7,r2
  809fec:	dc400015 	stw	r17,0(sp)
  809ff0:	803ee83a 	callr	r16
  809ff4:	dfc00617 	ldw	ra,24(sp)
  809ff8:	dc400517 	ldw	r17,20(sp)
  809ffc:	dc000417 	ldw	r16,16(sp)
  80a000:	dec00704 	addi	sp,sp,28
  80a004:	f800283a 	ret

0080a008 <__udivdi3>:
  80a008:	defff404 	addi	sp,sp,-48
  80a00c:	dcc00515 	stw	r19,20(sp)
  80a010:	dc000215 	stw	r16,8(sp)
  80a014:	dfc00b15 	stw	ra,44(sp)
  80a018:	df000a15 	stw	fp,40(sp)
  80a01c:	ddc00915 	stw	r23,36(sp)
  80a020:	dd800815 	stw	r22,32(sp)
  80a024:	dd400715 	stw	r21,28(sp)
  80a028:	dd000615 	stw	r20,24(sp)
  80a02c:	dc800415 	stw	r18,16(sp)
  80a030:	dc400315 	stw	r17,12(sp)
  80a034:	2027883a 	mov	r19,r4
  80a038:	2821883a 	mov	r16,r5
  80a03c:	3800461e 	bne	r7,zero,80a158 <__udivdi3+0x150>
  80a040:	3023883a 	mov	r17,r6
  80a044:	2025883a 	mov	r18,r4
  80a048:	2980572e 	bgeu	r5,r6,80a1a8 <__udivdi3+0x1a0>
  80a04c:	00bfffd4 	movui	r2,65535
  80a050:	282d883a 	mov	r22,r5
  80a054:	1180b236 	bltu	r2,r6,80a320 <__udivdi3+0x318>
  80a058:	00803fc4 	movi	r2,255
  80a05c:	1185803a 	cmpltu	r2,r2,r6
  80a060:	100490fa 	slli	r2,r2,3
  80a064:	3086d83a 	srl	r3,r6,r2
  80a068:	010020b4 	movhi	r4,130
  80a06c:	21286c04 	addi	r4,r4,-24144
  80a070:	20c7883a 	add	r3,r4,r3
  80a074:	18c00003 	ldbu	r3,0(r3)
  80a078:	1885883a 	add	r2,r3,r2
  80a07c:	00c00804 	movi	r3,32
  80a080:	1887c83a 	sub	r3,r3,r2
  80a084:	18000526 	beq	r3,zero,80a09c <__udivdi3+0x94>
  80a088:	80e0983a 	sll	r16,r16,r3
  80a08c:	9884d83a 	srl	r2,r19,r2
  80a090:	30e2983a 	sll	r17,r6,r3
  80a094:	98e4983a 	sll	r18,r19,r3
  80a098:	142cb03a 	or	r22,r2,r16
  80a09c:	882ad43a 	srli	r21,r17,16
  80a0a0:	b009883a 	mov	r4,r22
  80a0a4:	8d3fffcc 	andi	r20,r17,65535
  80a0a8:	a80b883a 	mov	r5,r21
  80a0ac:	080ad240 	call	80ad24 <__umodsi3>
  80a0b0:	b009883a 	mov	r4,r22
  80a0b4:	a80b883a 	mov	r5,r21
  80a0b8:	1027883a 	mov	r19,r2
  80a0bc:	080acc00 	call	80acc0 <__udivsi3>
  80a0c0:	100b883a 	mov	r5,r2
  80a0c4:	a009883a 	mov	r4,r20
  80a0c8:	102d883a 	mov	r22,r2
  80a0cc:	080ad7c0 	call	80ad7c <__mulsi3>
  80a0d0:	9826943a 	slli	r19,r19,16
  80a0d4:	9006d43a 	srli	r3,r18,16
  80a0d8:	1cc6b03a 	or	r3,r3,r19
  80a0dc:	1880052e 	bgeu	r3,r2,80a0f4 <__udivdi3+0xec>
  80a0e0:	1c47883a 	add	r3,r3,r17
  80a0e4:	b13fffc4 	addi	r4,r22,-1
  80a0e8:	1c400136 	bltu	r3,r17,80a0f0 <__udivdi3+0xe8>
  80a0ec:	18814236 	bltu	r3,r2,80a5f8 <__udivdi3+0x5f0>
  80a0f0:	202d883a 	mov	r22,r4
  80a0f4:	18a1c83a 	sub	r16,r3,r2
  80a0f8:	8009883a 	mov	r4,r16
  80a0fc:	a80b883a 	mov	r5,r21
  80a100:	080ad240 	call	80ad24 <__umodsi3>
  80a104:	1027883a 	mov	r19,r2
  80a108:	8009883a 	mov	r4,r16
  80a10c:	a80b883a 	mov	r5,r21
  80a110:	9826943a 	slli	r19,r19,16
  80a114:	080acc00 	call	80acc0 <__udivsi3>
  80a118:	100b883a 	mov	r5,r2
  80a11c:	a009883a 	mov	r4,r20
  80a120:	94bfffcc 	andi	r18,r18,65535
  80a124:	1021883a 	mov	r16,r2
  80a128:	94e4b03a 	or	r18,r18,r19
  80a12c:	080ad7c0 	call	80ad7c <__mulsi3>
  80a130:	9080052e 	bgeu	r18,r2,80a148 <__udivdi3+0x140>
  80a134:	8ca5883a 	add	r18,r17,r18
  80a138:	80ffffc4 	addi	r3,r16,-1
  80a13c:	94410c36 	bltu	r18,r17,80a570 <__udivdi3+0x568>
  80a140:	90810b2e 	bgeu	r18,r2,80a570 <__udivdi3+0x568>
  80a144:	843fff84 	addi	r16,r16,-2
  80a148:	b004943a 	slli	r2,r22,16
  80a14c:	0007883a 	mov	r3,zero
  80a150:	1404b03a 	or	r2,r2,r16
  80a154:	00005e06 	br	80a2d0 <__udivdi3+0x2c8>
  80a158:	29c05b36 	bltu	r5,r7,80a2c8 <__udivdi3+0x2c0>
  80a15c:	00bfffd4 	movui	r2,65535
  80a160:	11c0672e 	bgeu	r2,r7,80a300 <__udivdi3+0x2f8>
  80a164:	00804034 	movhi	r2,256
  80a168:	10bfffc4 	addi	r2,r2,-1
  80a16c:	11c10a36 	bltu	r2,r7,80a598 <__udivdi3+0x590>
  80a170:	00800404 	movi	r2,16
  80a174:	3886d83a 	srl	r3,r7,r2
  80a178:	010020b4 	movhi	r4,130
  80a17c:	21286c04 	addi	r4,r4,-24144
  80a180:	20c7883a 	add	r3,r4,r3
  80a184:	18c00003 	ldbu	r3,0(r3)
  80a188:	05c00804 	movi	r23,32
  80a18c:	1885883a 	add	r2,r3,r2
  80a190:	b8afc83a 	sub	r23,r23,r2
  80a194:	b800671e 	bne	r23,zero,80a334 <__udivdi3+0x32c>
  80a198:	3c010536 	bltu	r7,r16,80a5b0 <__udivdi3+0x5a8>
  80a19c:	9985403a 	cmpgeu	r2,r19,r6
  80a1a0:	0007883a 	mov	r3,zero
  80a1a4:	00004a06 	br	80a2d0 <__udivdi3+0x2c8>
  80a1a8:	3000041e 	bne	r6,zero,80a1bc <__udivdi3+0x1b4>
  80a1ac:	000b883a 	mov	r5,zero
  80a1b0:	01000044 	movi	r4,1
  80a1b4:	080acc00 	call	80acc0 <__udivsi3>
  80a1b8:	1023883a 	mov	r17,r2
  80a1bc:	00bfffd4 	movui	r2,65535
  80a1c0:	1440532e 	bgeu	r2,r17,80a310 <__udivdi3+0x308>
  80a1c4:	00804034 	movhi	r2,256
  80a1c8:	10bfffc4 	addi	r2,r2,-1
  80a1cc:	1440f436 	bltu	r2,r17,80a5a0 <__udivdi3+0x598>
  80a1d0:	00800404 	movi	r2,16
  80a1d4:	8886d83a 	srl	r3,r17,r2
  80a1d8:	010020b4 	movhi	r4,130
  80a1dc:	21286c04 	addi	r4,r4,-24144
  80a1e0:	20c7883a 	add	r3,r4,r3
  80a1e4:	18c00003 	ldbu	r3,0(r3)
  80a1e8:	1885883a 	add	r2,r3,r2
  80a1ec:	00c00804 	movi	r3,32
  80a1f0:	1887c83a 	sub	r3,r3,r2
  80a1f4:	1800a51e 	bne	r3,zero,80a48c <__udivdi3+0x484>
  80a1f8:	882ad43a 	srli	r21,r17,16
  80a1fc:	8461c83a 	sub	r16,r16,r17
  80a200:	8d3fffcc 	andi	r20,r17,65535
  80a204:	00c00044 	movi	r3,1
  80a208:	a80b883a 	mov	r5,r21
  80a20c:	8009883a 	mov	r4,r16
  80a210:	d8c00115 	stw	r3,4(sp)
  80a214:	080ad240 	call	80ad24 <__umodsi3>
  80a218:	a80b883a 	mov	r5,r21
  80a21c:	8009883a 	mov	r4,r16
  80a220:	1027883a 	mov	r19,r2
  80a224:	080acc00 	call	80acc0 <__udivsi3>
  80a228:	a00b883a 	mov	r5,r20
  80a22c:	1009883a 	mov	r4,r2
  80a230:	102d883a 	mov	r22,r2
  80a234:	080ad7c0 	call	80ad7c <__mulsi3>
  80a238:	9826943a 	slli	r19,r19,16
  80a23c:	900ed43a 	srli	r7,r18,16
  80a240:	d8c00117 	ldw	r3,4(sp)
  80a244:	3cceb03a 	or	r7,r7,r19
  80a248:	3880052e 	bgeu	r7,r2,80a260 <__udivdi3+0x258>
  80a24c:	3c4f883a 	add	r7,r7,r17
  80a250:	b13fffc4 	addi	r4,r22,-1
  80a254:	3c400136 	bltu	r7,r17,80a25c <__udivdi3+0x254>
  80a258:	3880e436 	bltu	r7,r2,80a5ec <__udivdi3+0x5e4>
  80a25c:	202d883a 	mov	r22,r4
  80a260:	38a1c83a 	sub	r16,r7,r2
  80a264:	8009883a 	mov	r4,r16
  80a268:	a80b883a 	mov	r5,r21
  80a26c:	d8c00115 	stw	r3,4(sp)
  80a270:	080ad240 	call	80ad24 <__umodsi3>
  80a274:	1027883a 	mov	r19,r2
  80a278:	8009883a 	mov	r4,r16
  80a27c:	a80b883a 	mov	r5,r21
  80a280:	9826943a 	slli	r19,r19,16
  80a284:	080acc00 	call	80acc0 <__udivsi3>
  80a288:	a00b883a 	mov	r5,r20
  80a28c:	1009883a 	mov	r4,r2
  80a290:	94bfffcc 	andi	r18,r18,65535
  80a294:	1021883a 	mov	r16,r2
  80a298:	94e4b03a 	or	r18,r18,r19
  80a29c:	080ad7c0 	call	80ad7c <__mulsi3>
  80a2a0:	d8c00117 	ldw	r3,4(sp)
  80a2a4:	9080052e 	bgeu	r18,r2,80a2bc <__udivdi3+0x2b4>
  80a2a8:	8ca5883a 	add	r18,r17,r18
  80a2ac:	813fffc4 	addi	r4,r16,-1
  80a2b0:	9440ad36 	bltu	r18,r17,80a568 <__udivdi3+0x560>
  80a2b4:	9080ac2e 	bgeu	r18,r2,80a568 <__udivdi3+0x560>
  80a2b8:	843fff84 	addi	r16,r16,-2
  80a2bc:	b004943a 	slli	r2,r22,16
  80a2c0:	1404b03a 	or	r2,r2,r16
  80a2c4:	00000206 	br	80a2d0 <__udivdi3+0x2c8>
  80a2c8:	0007883a 	mov	r3,zero
  80a2cc:	0005883a 	mov	r2,zero
  80a2d0:	dfc00b17 	ldw	ra,44(sp)
  80a2d4:	df000a17 	ldw	fp,40(sp)
  80a2d8:	ddc00917 	ldw	r23,36(sp)
  80a2dc:	dd800817 	ldw	r22,32(sp)
  80a2e0:	dd400717 	ldw	r21,28(sp)
  80a2e4:	dd000617 	ldw	r20,24(sp)
  80a2e8:	dcc00517 	ldw	r19,20(sp)
  80a2ec:	dc800417 	ldw	r18,16(sp)
  80a2f0:	dc400317 	ldw	r17,12(sp)
  80a2f4:	dc000217 	ldw	r16,8(sp)
  80a2f8:	dec00c04 	addi	sp,sp,48
  80a2fc:	f800283a 	ret
  80a300:	00803fc4 	movi	r2,255
  80a304:	11c5803a 	cmpltu	r2,r2,r7
  80a308:	100490fa 	slli	r2,r2,3
  80a30c:	003f9906 	br	80a174 <__alt_mem_epcs_flash_controller_0+0xff801174>
  80a310:	00803fc4 	movi	r2,255
  80a314:	1445803a 	cmpltu	r2,r2,r17
  80a318:	100490fa 	slli	r2,r2,3
  80a31c:	003fad06 	br	80a1d4 <__alt_mem_epcs_flash_controller_0+0xff8011d4>
  80a320:	00804034 	movhi	r2,256
  80a324:	10bfffc4 	addi	r2,r2,-1
  80a328:	11809f36 	bltu	r2,r6,80a5a8 <__udivdi3+0x5a0>
  80a32c:	00800404 	movi	r2,16
  80a330:	003f4c06 	br	80a064 <__alt_mem_epcs_flash_controller_0+0xff801064>
  80a334:	3dce983a 	sll	r7,r7,r23
  80a338:	30b8d83a 	srl	fp,r6,r2
  80a33c:	80a2d83a 	srl	r17,r16,r2
  80a340:	35cc983a 	sll	r6,r6,r23
  80a344:	3f38b03a 	or	fp,r7,fp
  80a348:	e024d43a 	srli	r18,fp,16
  80a34c:	9884d83a 	srl	r2,r19,r2
  80a350:	85e0983a 	sll	r16,r16,r23
  80a354:	8809883a 	mov	r4,r17
  80a358:	900b883a 	mov	r5,r18
  80a35c:	d9800015 	stw	r6,0(sp)
  80a360:	1420b03a 	or	r16,r2,r16
  80a364:	080ad240 	call	80ad24 <__umodsi3>
  80a368:	900b883a 	mov	r5,r18
  80a36c:	8809883a 	mov	r4,r17
  80a370:	1029883a 	mov	r20,r2
  80a374:	e5bfffcc 	andi	r22,fp,65535
  80a378:	080acc00 	call	80acc0 <__udivsi3>
  80a37c:	100b883a 	mov	r5,r2
  80a380:	b009883a 	mov	r4,r22
  80a384:	102b883a 	mov	r21,r2
  80a388:	080ad7c0 	call	80ad7c <__mulsi3>
  80a38c:	a028943a 	slli	r20,r20,16
  80a390:	8006d43a 	srli	r3,r16,16
  80a394:	1d06b03a 	or	r3,r3,r20
  80a398:	1880042e 	bgeu	r3,r2,80a3ac <__udivdi3+0x3a4>
  80a39c:	1f07883a 	add	r3,r3,fp
  80a3a0:	a93fffc4 	addi	r4,r21,-1
  80a3a4:	1f00892e 	bgeu	r3,fp,80a5cc <__udivdi3+0x5c4>
  80a3a8:	202b883a 	mov	r21,r4
  80a3ac:	18a3c83a 	sub	r17,r3,r2
  80a3b0:	8809883a 	mov	r4,r17
  80a3b4:	900b883a 	mov	r5,r18
  80a3b8:	080ad240 	call	80ad24 <__umodsi3>
  80a3bc:	1029883a 	mov	r20,r2
  80a3c0:	8809883a 	mov	r4,r17
  80a3c4:	900b883a 	mov	r5,r18
  80a3c8:	a028943a 	slli	r20,r20,16
  80a3cc:	080acc00 	call	80acc0 <__udivsi3>
  80a3d0:	100b883a 	mov	r5,r2
  80a3d4:	b009883a 	mov	r4,r22
  80a3d8:	843fffcc 	andi	r16,r16,65535
  80a3dc:	1023883a 	mov	r17,r2
  80a3e0:	8520b03a 	or	r16,r16,r20
  80a3e4:	080ad7c0 	call	80ad7c <__mulsi3>
  80a3e8:	8080042e 	bgeu	r16,r2,80a3fc <__udivdi3+0x3f4>
  80a3ec:	8721883a 	add	r16,r16,fp
  80a3f0:	88ffffc4 	addi	r3,r17,-1
  80a3f4:	8700712e 	bgeu	r16,fp,80a5bc <__udivdi3+0x5b4>
  80a3f8:	1823883a 	mov	r17,r3
  80a3fc:	a80e943a 	slli	r7,r21,16
  80a400:	d8c00017 	ldw	r3,0(sp)
  80a404:	80a1c83a 	sub	r16,r16,r2
  80a408:	3c64b03a 	or	r18,r7,r17
  80a40c:	1d3fffcc 	andi	r20,r3,65535
  80a410:	9022d43a 	srli	r17,r18,16
  80a414:	95bfffcc 	andi	r22,r18,65535
  80a418:	a00b883a 	mov	r5,r20
  80a41c:	b009883a 	mov	r4,r22
  80a420:	182ad43a 	srli	r21,r3,16
  80a424:	080ad7c0 	call	80ad7c <__mulsi3>
  80a428:	a00b883a 	mov	r5,r20
  80a42c:	8809883a 	mov	r4,r17
  80a430:	1039883a 	mov	fp,r2
  80a434:	080ad7c0 	call	80ad7c <__mulsi3>
  80a438:	8809883a 	mov	r4,r17
  80a43c:	a80b883a 	mov	r5,r21
  80a440:	1029883a 	mov	r20,r2
  80a444:	080ad7c0 	call	80ad7c <__mulsi3>
  80a448:	a80b883a 	mov	r5,r21
  80a44c:	b009883a 	mov	r4,r22
  80a450:	1023883a 	mov	r17,r2
  80a454:	080ad7c0 	call	80ad7c <__mulsi3>
  80a458:	e006d43a 	srli	r3,fp,16
  80a45c:	1505883a 	add	r2,r2,r20
  80a460:	1887883a 	add	r3,r3,r2
  80a464:	1d00022e 	bgeu	r3,r20,80a470 <__udivdi3+0x468>
  80a468:	00800074 	movhi	r2,1
  80a46c:	88a3883a 	add	r17,r17,r2
  80a470:	1804d43a 	srli	r2,r3,16
  80a474:	1463883a 	add	r17,r2,r17
  80a478:	84404436 	bltu	r16,r17,80a58c <__udivdi3+0x584>
  80a47c:	84403e26 	beq	r16,r17,80a578 <__udivdi3+0x570>
  80a480:	9005883a 	mov	r2,r18
  80a484:	0007883a 	mov	r3,zero
  80a488:	003f9106 	br	80a2d0 <__alt_mem_epcs_flash_controller_0+0xff8012d0>
  80a48c:	88e2983a 	sll	r17,r17,r3
  80a490:	80aed83a 	srl	r23,r16,r2
  80a494:	80e0983a 	sll	r16,r16,r3
  80a498:	882ad43a 	srli	r21,r17,16
  80a49c:	9884d83a 	srl	r2,r19,r2
  80a4a0:	b809883a 	mov	r4,r23
  80a4a4:	a80b883a 	mov	r5,r21
  80a4a8:	98e4983a 	sll	r18,r19,r3
  80a4ac:	142cb03a 	or	r22,r2,r16
  80a4b0:	080ad240 	call	80ad24 <__umodsi3>
  80a4b4:	b809883a 	mov	r4,r23
  80a4b8:	a80b883a 	mov	r5,r21
  80a4bc:	1027883a 	mov	r19,r2
  80a4c0:	8d3fffcc 	andi	r20,r17,65535
  80a4c4:	080acc00 	call	80acc0 <__udivsi3>
  80a4c8:	a009883a 	mov	r4,r20
  80a4cc:	100b883a 	mov	r5,r2
  80a4d0:	102f883a 	mov	r23,r2
  80a4d4:	080ad7c0 	call	80ad7c <__mulsi3>
  80a4d8:	9826943a 	slli	r19,r19,16
  80a4dc:	b008d43a 	srli	r4,r22,16
  80a4e0:	24c8b03a 	or	r4,r4,r19
  80a4e4:	2080062e 	bgeu	r4,r2,80a500 <__udivdi3+0x4f8>
  80a4e8:	2449883a 	add	r4,r4,r17
  80a4ec:	b8ffffc4 	addi	r3,r23,-1
  80a4f0:	24403c36 	bltu	r4,r17,80a5e4 <__udivdi3+0x5dc>
  80a4f4:	20803b2e 	bgeu	r4,r2,80a5e4 <__udivdi3+0x5dc>
  80a4f8:	bdffff84 	addi	r23,r23,-2
  80a4fc:	2449883a 	add	r4,r4,r17
  80a500:	20a1c83a 	sub	r16,r4,r2
  80a504:	a80b883a 	mov	r5,r21
  80a508:	8009883a 	mov	r4,r16
  80a50c:	080ad240 	call	80ad24 <__umodsi3>
  80a510:	a80b883a 	mov	r5,r21
  80a514:	8009883a 	mov	r4,r16
  80a518:	1027883a 	mov	r19,r2
  80a51c:	080acc00 	call	80acc0 <__udivsi3>
  80a520:	a009883a 	mov	r4,r20
  80a524:	100b883a 	mov	r5,r2
  80a528:	9826943a 	slli	r19,r19,16
  80a52c:	1039883a 	mov	fp,r2
  80a530:	080ad7c0 	call	80ad7c <__mulsi3>
  80a534:	b13fffcc 	andi	r4,r22,65535
  80a538:	24c8b03a 	or	r4,r4,r19
  80a53c:	2080062e 	bgeu	r4,r2,80a558 <__udivdi3+0x550>
  80a540:	2449883a 	add	r4,r4,r17
  80a544:	e0ffffc4 	addi	r3,fp,-1
  80a548:	24402436 	bltu	r4,r17,80a5dc <__udivdi3+0x5d4>
  80a54c:	2080232e 	bgeu	r4,r2,80a5dc <__udivdi3+0x5d4>
  80a550:	e73fff84 	addi	fp,fp,-2
  80a554:	2449883a 	add	r4,r4,r17
  80a558:	b82e943a 	slli	r23,r23,16
  80a55c:	20a1c83a 	sub	r16,r4,r2
  80a560:	bf06b03a 	or	r3,r23,fp
  80a564:	003f2806 	br	80a208 <__alt_mem_epcs_flash_controller_0+0xff801208>
  80a568:	2021883a 	mov	r16,r4
  80a56c:	003f5306 	br	80a2bc <__alt_mem_epcs_flash_controller_0+0xff8012bc>
  80a570:	1821883a 	mov	r16,r3
  80a574:	003ef406 	br	80a148 <__alt_mem_epcs_flash_controller_0+0xff801148>
  80a578:	1806943a 	slli	r3,r3,16
  80a57c:	9de6983a 	sll	r19,r19,r23
  80a580:	e73fffcc 	andi	fp,fp,65535
  80a584:	1f07883a 	add	r3,r3,fp
  80a588:	98ffbd2e 	bgeu	r19,r3,80a480 <__alt_mem_epcs_flash_controller_0+0xff801480>
  80a58c:	90bfffc4 	addi	r2,r18,-1
  80a590:	0007883a 	mov	r3,zero
  80a594:	003f4e06 	br	80a2d0 <__alt_mem_epcs_flash_controller_0+0xff8012d0>
  80a598:	00800604 	movi	r2,24
  80a59c:	003ef506 	br	80a174 <__alt_mem_epcs_flash_controller_0+0xff801174>
  80a5a0:	00800604 	movi	r2,24
  80a5a4:	003f0b06 	br	80a1d4 <__alt_mem_epcs_flash_controller_0+0xff8011d4>
  80a5a8:	00800604 	movi	r2,24
  80a5ac:	003ead06 	br	80a064 <__alt_mem_epcs_flash_controller_0+0xff801064>
  80a5b0:	0007883a 	mov	r3,zero
  80a5b4:	00800044 	movi	r2,1
  80a5b8:	003f4506 	br	80a2d0 <__alt_mem_epcs_flash_controller_0+0xff8012d0>
  80a5bc:	80bf8e2e 	bgeu	r16,r2,80a3f8 <__alt_mem_epcs_flash_controller_0+0xff8013f8>
  80a5c0:	8c7fff84 	addi	r17,r17,-2
  80a5c4:	8721883a 	add	r16,r16,fp
  80a5c8:	003f8c06 	br	80a3fc <__alt_mem_epcs_flash_controller_0+0xff8013fc>
  80a5cc:	18bf762e 	bgeu	r3,r2,80a3a8 <__alt_mem_epcs_flash_controller_0+0xff8013a8>
  80a5d0:	ad7fff84 	addi	r21,r21,-2
  80a5d4:	1f07883a 	add	r3,r3,fp
  80a5d8:	003f7406 	br	80a3ac <__alt_mem_epcs_flash_controller_0+0xff8013ac>
  80a5dc:	1839883a 	mov	fp,r3
  80a5e0:	003fdd06 	br	80a558 <__alt_mem_epcs_flash_controller_0+0xff801558>
  80a5e4:	182f883a 	mov	r23,r3
  80a5e8:	003fc506 	br	80a500 <__alt_mem_epcs_flash_controller_0+0xff801500>
  80a5ec:	b5bfff84 	addi	r22,r22,-2
  80a5f0:	3c4f883a 	add	r7,r7,r17
  80a5f4:	003f1a06 	br	80a260 <__alt_mem_epcs_flash_controller_0+0xff801260>
  80a5f8:	b5bfff84 	addi	r22,r22,-2
  80a5fc:	1c47883a 	add	r3,r3,r17
  80a600:	003ebc06 	br	80a0f4 <__alt_mem_epcs_flash_controller_0+0xff8010f4>

0080a604 <__umoddi3>:
  80a604:	defff304 	addi	sp,sp,-52
  80a608:	df000b15 	stw	fp,44(sp)
  80a60c:	dc400415 	stw	r17,16(sp)
  80a610:	dc000315 	stw	r16,12(sp)
  80a614:	dfc00c15 	stw	ra,48(sp)
  80a618:	ddc00a15 	stw	r23,40(sp)
  80a61c:	dd800915 	stw	r22,36(sp)
  80a620:	dd400815 	stw	r21,32(sp)
  80a624:	dd000715 	stw	r20,28(sp)
  80a628:	dcc00615 	stw	r19,24(sp)
  80a62c:	dc800515 	stw	r18,20(sp)
  80a630:	2021883a 	mov	r16,r4
  80a634:	2823883a 	mov	r17,r5
  80a638:	2839883a 	mov	fp,r5
  80a63c:	3800401e 	bne	r7,zero,80a740 <__umoddi3+0x13c>
  80a640:	3027883a 	mov	r19,r6
  80a644:	2029883a 	mov	r20,r4
  80a648:	2980552e 	bgeu	r5,r6,80a7a0 <__umoddi3+0x19c>
  80a64c:	00bfffd4 	movui	r2,65535
  80a650:	1180a236 	bltu	r2,r6,80a8dc <__umoddi3+0x2d8>
  80a654:	01003fc4 	movi	r4,255
  80a658:	2189803a 	cmpltu	r4,r4,r6
  80a65c:	200890fa 	slli	r4,r4,3
  80a660:	3104d83a 	srl	r2,r6,r4
  80a664:	00c020b4 	movhi	r3,130
  80a668:	18e86c04 	addi	r3,r3,-24144
  80a66c:	1885883a 	add	r2,r3,r2
  80a670:	10c00003 	ldbu	r3,0(r2)
  80a674:	00800804 	movi	r2,32
  80a678:	1909883a 	add	r4,r3,r4
  80a67c:	1125c83a 	sub	r18,r2,r4
  80a680:	90000526 	beq	r18,zero,80a698 <__umoddi3+0x94>
  80a684:	8ca2983a 	sll	r17,r17,r18
  80a688:	8108d83a 	srl	r4,r16,r4
  80a68c:	34a6983a 	sll	r19,r6,r18
  80a690:	84a8983a 	sll	r20,r16,r18
  80a694:	2478b03a 	or	fp,r4,r17
  80a698:	982cd43a 	srli	r22,r19,16
  80a69c:	e009883a 	mov	r4,fp
  80a6a0:	9dffffcc 	andi	r23,r19,65535
  80a6a4:	b00b883a 	mov	r5,r22
  80a6a8:	080ad240 	call	80ad24 <__umodsi3>
  80a6ac:	b00b883a 	mov	r5,r22
  80a6b0:	e009883a 	mov	r4,fp
  80a6b4:	102b883a 	mov	r21,r2
  80a6b8:	080acc00 	call	80acc0 <__udivsi3>
  80a6bc:	100b883a 	mov	r5,r2
  80a6c0:	b809883a 	mov	r4,r23
  80a6c4:	080ad7c0 	call	80ad7c <__mulsi3>
  80a6c8:	a82a943a 	slli	r21,r21,16
  80a6cc:	a006d43a 	srli	r3,r20,16
  80a6d0:	1d46b03a 	or	r3,r3,r21
  80a6d4:	1880032e 	bgeu	r3,r2,80a6e4 <__umoddi3+0xe0>
  80a6d8:	1cc7883a 	add	r3,r3,r19
  80a6dc:	1cc00136 	bltu	r3,r19,80a6e4 <__umoddi3+0xe0>
  80a6e0:	18813136 	bltu	r3,r2,80aba8 <__umoddi3+0x5a4>
  80a6e4:	18a1c83a 	sub	r16,r3,r2
  80a6e8:	b00b883a 	mov	r5,r22
  80a6ec:	8009883a 	mov	r4,r16
  80a6f0:	080ad240 	call	80ad24 <__umodsi3>
  80a6f4:	b00b883a 	mov	r5,r22
  80a6f8:	8009883a 	mov	r4,r16
  80a6fc:	1023883a 	mov	r17,r2
  80a700:	080acc00 	call	80acc0 <__udivsi3>
  80a704:	100b883a 	mov	r5,r2
  80a708:	b809883a 	mov	r4,r23
  80a70c:	8822943a 	slli	r17,r17,16
  80a710:	080ad7c0 	call	80ad7c <__mulsi3>
  80a714:	a0ffffcc 	andi	r3,r20,65535
  80a718:	1c46b03a 	or	r3,r3,r17
  80a71c:	1880042e 	bgeu	r3,r2,80a730 <__umoddi3+0x12c>
  80a720:	1cc7883a 	add	r3,r3,r19
  80a724:	1cc00236 	bltu	r3,r19,80a730 <__umoddi3+0x12c>
  80a728:	1880012e 	bgeu	r3,r2,80a730 <__umoddi3+0x12c>
  80a72c:	1cc7883a 	add	r3,r3,r19
  80a730:	1885c83a 	sub	r2,r3,r2
  80a734:	1484d83a 	srl	r2,r2,r18
  80a738:	0007883a 	mov	r3,zero
  80a73c:	00005306 	br	80a88c <__umoddi3+0x288>
  80a740:	29c05036 	bltu	r5,r7,80a884 <__umoddi3+0x280>
  80a744:	00bfffd4 	movui	r2,65535
  80a748:	11c05c2e 	bgeu	r2,r7,80a8bc <__umoddi3+0x2b8>
  80a74c:	00804034 	movhi	r2,256
  80a750:	10bfffc4 	addi	r2,r2,-1
  80a754:	11c10636 	bltu	r2,r7,80ab70 <__umoddi3+0x56c>
  80a758:	01000404 	movi	r4,16
  80a75c:	3904d83a 	srl	r2,r7,r4
  80a760:	00c020b4 	movhi	r3,130
  80a764:	18e86c04 	addi	r3,r3,-24144
  80a768:	1885883a 	add	r2,r3,r2
  80a76c:	14c00003 	ldbu	r19,0(r2)
  80a770:	00c00804 	movi	r3,32
  80a774:	9927883a 	add	r19,r19,r4
  80a778:	1ce9c83a 	sub	r20,r3,r19
  80a77c:	a0005c1e 	bne	r20,zero,80a8f0 <__umoddi3+0x2ec>
  80a780:	3c400136 	bltu	r7,r17,80a788 <__umoddi3+0x184>
  80a784:	81810a36 	bltu	r16,r6,80abb0 <__umoddi3+0x5ac>
  80a788:	8185c83a 	sub	r2,r16,r6
  80a78c:	89e3c83a 	sub	r17,r17,r7
  80a790:	8089803a 	cmpltu	r4,r16,r2
  80a794:	8939c83a 	sub	fp,r17,r4
  80a798:	e007883a 	mov	r3,fp
  80a79c:	00003b06 	br	80a88c <__umoddi3+0x288>
  80a7a0:	3000041e 	bne	r6,zero,80a7b4 <__umoddi3+0x1b0>
  80a7a4:	000b883a 	mov	r5,zero
  80a7a8:	01000044 	movi	r4,1
  80a7ac:	080acc00 	call	80acc0 <__udivsi3>
  80a7b0:	1027883a 	mov	r19,r2
  80a7b4:	00bfffd4 	movui	r2,65535
  80a7b8:	14c0442e 	bgeu	r2,r19,80a8cc <__umoddi3+0x2c8>
  80a7bc:	00804034 	movhi	r2,256
  80a7c0:	10bfffc4 	addi	r2,r2,-1
  80a7c4:	14c0ec36 	bltu	r2,r19,80ab78 <__umoddi3+0x574>
  80a7c8:	00800404 	movi	r2,16
  80a7cc:	9886d83a 	srl	r3,r19,r2
  80a7d0:	010020b4 	movhi	r4,130
  80a7d4:	21286c04 	addi	r4,r4,-24144
  80a7d8:	20c7883a 	add	r3,r4,r3
  80a7dc:	18c00003 	ldbu	r3,0(r3)
  80a7e0:	1887883a 	add	r3,r3,r2
  80a7e4:	00800804 	movi	r2,32
  80a7e8:	10e5c83a 	sub	r18,r2,r3
  80a7ec:	9000ab1e 	bne	r18,zero,80aa9c <__umoddi3+0x498>
  80a7f0:	982cd43a 	srli	r22,r19,16
  80a7f4:	8ce3c83a 	sub	r17,r17,r19
  80a7f8:	9dffffcc 	andi	r23,r19,65535
  80a7fc:	b00b883a 	mov	r5,r22
  80a800:	8809883a 	mov	r4,r17
  80a804:	080ad240 	call	80ad24 <__umodsi3>
  80a808:	b00b883a 	mov	r5,r22
  80a80c:	8809883a 	mov	r4,r17
  80a810:	102b883a 	mov	r21,r2
  80a814:	080acc00 	call	80acc0 <__udivsi3>
  80a818:	b80b883a 	mov	r5,r23
  80a81c:	1009883a 	mov	r4,r2
  80a820:	080ad7c0 	call	80ad7c <__mulsi3>
  80a824:	a82a943a 	slli	r21,r21,16
  80a828:	a006d43a 	srli	r3,r20,16
  80a82c:	1d46b03a 	or	r3,r3,r21
  80a830:	1880042e 	bgeu	r3,r2,80a844 <__umoddi3+0x240>
  80a834:	1cc7883a 	add	r3,r3,r19
  80a838:	1cc00236 	bltu	r3,r19,80a844 <__umoddi3+0x240>
  80a83c:	1880012e 	bgeu	r3,r2,80a844 <__umoddi3+0x240>
  80a840:	1cc7883a 	add	r3,r3,r19
  80a844:	18a1c83a 	sub	r16,r3,r2
  80a848:	b00b883a 	mov	r5,r22
  80a84c:	8009883a 	mov	r4,r16
  80a850:	080ad240 	call	80ad24 <__umodsi3>
  80a854:	1023883a 	mov	r17,r2
  80a858:	b00b883a 	mov	r5,r22
  80a85c:	8009883a 	mov	r4,r16
  80a860:	080acc00 	call	80acc0 <__udivsi3>
  80a864:	8822943a 	slli	r17,r17,16
  80a868:	b80b883a 	mov	r5,r23
  80a86c:	1009883a 	mov	r4,r2
  80a870:	080ad7c0 	call	80ad7c <__mulsi3>
  80a874:	a53fffcc 	andi	r20,r20,65535
  80a878:	a446b03a 	or	r3,r20,r17
  80a87c:	18bfac2e 	bgeu	r3,r2,80a730 <__alt_mem_epcs_flash_controller_0+0xff801730>
  80a880:	003fa706 	br	80a720 <__alt_mem_epcs_flash_controller_0+0xff801720>
  80a884:	2005883a 	mov	r2,r4
  80a888:	2807883a 	mov	r3,r5
  80a88c:	dfc00c17 	ldw	ra,48(sp)
  80a890:	df000b17 	ldw	fp,44(sp)
  80a894:	ddc00a17 	ldw	r23,40(sp)
  80a898:	dd800917 	ldw	r22,36(sp)
  80a89c:	dd400817 	ldw	r21,32(sp)
  80a8a0:	dd000717 	ldw	r20,28(sp)
  80a8a4:	dcc00617 	ldw	r19,24(sp)
  80a8a8:	dc800517 	ldw	r18,20(sp)
  80a8ac:	dc400417 	ldw	r17,16(sp)
  80a8b0:	dc000317 	ldw	r16,12(sp)
  80a8b4:	dec00d04 	addi	sp,sp,52
  80a8b8:	f800283a 	ret
  80a8bc:	04c03fc4 	movi	r19,255
  80a8c0:	99c9803a 	cmpltu	r4,r19,r7
  80a8c4:	200890fa 	slli	r4,r4,3
  80a8c8:	003fa406 	br	80a75c <__alt_mem_epcs_flash_controller_0+0xff80175c>
  80a8cc:	00803fc4 	movi	r2,255
  80a8d0:	14c5803a 	cmpltu	r2,r2,r19
  80a8d4:	100490fa 	slli	r2,r2,3
  80a8d8:	003fbc06 	br	80a7cc <__alt_mem_epcs_flash_controller_0+0xff8017cc>
  80a8dc:	00804034 	movhi	r2,256
  80a8e0:	10bfffc4 	addi	r2,r2,-1
  80a8e4:	1180a636 	bltu	r2,r6,80ab80 <__umoddi3+0x57c>
  80a8e8:	01000404 	movi	r4,16
  80a8ec:	003f5c06 	br	80a660 <__alt_mem_epcs_flash_controller_0+0xff801660>
  80a8f0:	3d0e983a 	sll	r7,r7,r20
  80a8f4:	34ead83a 	srl	r21,r6,r19
  80a8f8:	8cc6d83a 	srl	r3,r17,r19
  80a8fc:	8d10983a 	sll	r8,r17,r20
  80a900:	3d6ab03a 	or	r21,r7,r21
  80a904:	a82cd43a 	srli	r22,r21,16
  80a908:	84e2d83a 	srl	r17,r16,r19
  80a90c:	1809883a 	mov	r4,r3
  80a910:	b00b883a 	mov	r5,r22
  80a914:	8a22b03a 	or	r17,r17,r8
  80a918:	3524983a 	sll	r18,r6,r20
  80a91c:	dc400015 	stw	r17,0(sp)
  80a920:	d8c00115 	stw	r3,4(sp)
  80a924:	080ad240 	call	80ad24 <__umodsi3>
  80a928:	d8c00117 	ldw	r3,4(sp)
  80a92c:	b00b883a 	mov	r5,r22
  80a930:	1039883a 	mov	fp,r2
  80a934:	1809883a 	mov	r4,r3
  80a938:	080acc00 	call	80acc0 <__udivsi3>
  80a93c:	adffffcc 	andi	r23,r21,65535
  80a940:	100b883a 	mov	r5,r2
  80a944:	b809883a 	mov	r4,r23
  80a948:	1023883a 	mov	r17,r2
  80a94c:	080ad7c0 	call	80ad7c <__mulsi3>
  80a950:	d9400017 	ldw	r5,0(sp)
  80a954:	e008943a 	slli	r4,fp,16
  80a958:	8520983a 	sll	r16,r16,r20
  80a95c:	2806d43a 	srli	r3,r5,16
  80a960:	1906b03a 	or	r3,r3,r4
  80a964:	1880042e 	bgeu	r3,r2,80a978 <__umoddi3+0x374>
  80a968:	1d47883a 	add	r3,r3,r21
  80a96c:	893fffc4 	addi	r4,r17,-1
  80a970:	1d40892e 	bgeu	r3,r21,80ab98 <__umoddi3+0x594>
  80a974:	2023883a 	mov	r17,r4
  80a978:	18b9c83a 	sub	fp,r3,r2
  80a97c:	b00b883a 	mov	r5,r22
  80a980:	e009883a 	mov	r4,fp
  80a984:	080ad240 	call	80ad24 <__umodsi3>
  80a988:	b00b883a 	mov	r5,r22
  80a98c:	e009883a 	mov	r4,fp
  80a990:	d8800215 	stw	r2,8(sp)
  80a994:	080acc00 	call	80acc0 <__udivsi3>
  80a998:	100b883a 	mov	r5,r2
  80a99c:	b809883a 	mov	r4,r23
  80a9a0:	102d883a 	mov	r22,r2
  80a9a4:	080ad7c0 	call	80ad7c <__mulsi3>
  80a9a8:	d9800217 	ldw	r6,8(sp)
  80a9ac:	d8c00017 	ldw	r3,0(sp)
  80a9b0:	300c943a 	slli	r6,r6,16
  80a9b4:	1a3fffcc 	andi	r8,r3,65535
  80a9b8:	4190b03a 	or	r8,r8,r6
  80a9bc:	4080042e 	bgeu	r8,r2,80a9d0 <__umoddi3+0x3cc>
  80a9c0:	4551883a 	add	r8,r8,r21
  80a9c4:	b0ffffc4 	addi	r3,r22,-1
  80a9c8:	45406f2e 	bgeu	r8,r21,80ab88 <__umoddi3+0x584>
  80a9cc:	182d883a 	mov	r22,r3
  80a9d0:	880e943a 	slli	r7,r17,16
  80a9d4:	9006d43a 	srli	r3,r18,16
  80a9d8:	91bfffcc 	andi	r6,r18,65535
  80a9dc:	3dacb03a 	or	r22,r7,r22
  80a9e0:	b02ed43a 	srli	r23,r22,16
  80a9e4:	b5bfffcc 	andi	r22,r22,65535
  80a9e8:	300b883a 	mov	r5,r6
  80a9ec:	b009883a 	mov	r4,r22
  80a9f0:	40a3c83a 	sub	r17,r8,r2
  80a9f4:	d8c00115 	stw	r3,4(sp)
  80a9f8:	d9800215 	stw	r6,8(sp)
  80a9fc:	080ad7c0 	call	80ad7c <__mulsi3>
  80aa00:	d9800217 	ldw	r6,8(sp)
  80aa04:	b809883a 	mov	r4,r23
  80aa08:	1039883a 	mov	fp,r2
  80aa0c:	300b883a 	mov	r5,r6
  80aa10:	080ad7c0 	call	80ad7c <__mulsi3>
  80aa14:	d8c00117 	ldw	r3,4(sp)
  80aa18:	b809883a 	mov	r4,r23
  80aa1c:	d8800215 	stw	r2,8(sp)
  80aa20:	180b883a 	mov	r5,r3
  80aa24:	080ad7c0 	call	80ad7c <__mulsi3>
  80aa28:	d8c00117 	ldw	r3,4(sp)
  80aa2c:	b009883a 	mov	r4,r22
  80aa30:	102f883a 	mov	r23,r2
  80aa34:	180b883a 	mov	r5,r3
  80aa38:	080ad7c0 	call	80ad7c <__mulsi3>
  80aa3c:	d9800217 	ldw	r6,8(sp)
  80aa40:	e006d43a 	srli	r3,fp,16
  80aa44:	1185883a 	add	r2,r2,r6
  80aa48:	1885883a 	add	r2,r3,r2
  80aa4c:	1180022e 	bgeu	r2,r6,80aa58 <__umoddi3+0x454>
  80aa50:	00c00074 	movhi	r3,1
  80aa54:	b8ef883a 	add	r23,r23,r3
  80aa58:	1006d43a 	srli	r3,r2,16
  80aa5c:	1004943a 	slli	r2,r2,16
  80aa60:	e73fffcc 	andi	fp,fp,65535
  80aa64:	1dc7883a 	add	r3,r3,r23
  80aa68:	1739883a 	add	fp,r2,fp
  80aa6c:	88c03a36 	bltu	r17,r3,80ab58 <__umoddi3+0x554>
  80aa70:	88c05126 	beq	r17,r3,80abb8 <__umoddi3+0x5b4>
  80aa74:	88c9c83a 	sub	r4,r17,r3
  80aa78:	e00f883a 	mov	r7,fp
  80aa7c:	81cfc83a 	sub	r7,r16,r7
  80aa80:	81c7803a 	cmpltu	r3,r16,r7
  80aa84:	20c7c83a 	sub	r3,r4,r3
  80aa88:	1cc4983a 	sll	r2,r3,r19
  80aa8c:	3d0ed83a 	srl	r7,r7,r20
  80aa90:	1d06d83a 	srl	r3,r3,r20
  80aa94:	11c4b03a 	or	r2,r2,r7
  80aa98:	003f7c06 	br	80a88c <__alt_mem_epcs_flash_controller_0+0xff80188c>
  80aa9c:	9ca6983a 	sll	r19,r19,r18
  80aaa0:	88f8d83a 	srl	fp,r17,r3
  80aaa4:	80c4d83a 	srl	r2,r16,r3
  80aaa8:	982cd43a 	srli	r22,r19,16
  80aaac:	8ca2983a 	sll	r17,r17,r18
  80aab0:	e009883a 	mov	r4,fp
  80aab4:	b00b883a 	mov	r5,r22
  80aab8:	146ab03a 	or	r21,r2,r17
  80aabc:	080ad240 	call	80ad24 <__umodsi3>
  80aac0:	b00b883a 	mov	r5,r22
  80aac4:	e009883a 	mov	r4,fp
  80aac8:	1029883a 	mov	r20,r2
  80aacc:	9dffffcc 	andi	r23,r19,65535
  80aad0:	080acc00 	call	80acc0 <__udivsi3>
  80aad4:	b809883a 	mov	r4,r23
  80aad8:	100b883a 	mov	r5,r2
  80aadc:	080ad7c0 	call	80ad7c <__mulsi3>
  80aae0:	a008943a 	slli	r4,r20,16
  80aae4:	a806d43a 	srli	r3,r21,16
  80aae8:	84a8983a 	sll	r20,r16,r18
  80aaec:	1906b03a 	or	r3,r3,r4
  80aaf0:	1880042e 	bgeu	r3,r2,80ab04 <__umoddi3+0x500>
  80aaf4:	1cc7883a 	add	r3,r3,r19
  80aaf8:	1cc00236 	bltu	r3,r19,80ab04 <__umoddi3+0x500>
  80aafc:	1880012e 	bgeu	r3,r2,80ab04 <__umoddi3+0x500>
  80ab00:	1cc7883a 	add	r3,r3,r19
  80ab04:	18a3c83a 	sub	r17,r3,r2
  80ab08:	b00b883a 	mov	r5,r22
  80ab0c:	8809883a 	mov	r4,r17
  80ab10:	080ad240 	call	80ad24 <__umodsi3>
  80ab14:	b00b883a 	mov	r5,r22
  80ab18:	8809883a 	mov	r4,r17
  80ab1c:	1021883a 	mov	r16,r2
  80ab20:	080acc00 	call	80acc0 <__udivsi3>
  80ab24:	100b883a 	mov	r5,r2
  80ab28:	b809883a 	mov	r4,r23
  80ab2c:	8020943a 	slli	r16,r16,16
  80ab30:	080ad7c0 	call	80ad7c <__mulsi3>
  80ab34:	a8ffffcc 	andi	r3,r21,65535
  80ab38:	1c06b03a 	or	r3,r3,r16
  80ab3c:	1880042e 	bgeu	r3,r2,80ab50 <__umoddi3+0x54c>
  80ab40:	1cc7883a 	add	r3,r3,r19
  80ab44:	1cc00236 	bltu	r3,r19,80ab50 <__umoddi3+0x54c>
  80ab48:	1880012e 	bgeu	r3,r2,80ab50 <__umoddi3+0x54c>
  80ab4c:	1cc7883a 	add	r3,r3,r19
  80ab50:	18a3c83a 	sub	r17,r3,r2
  80ab54:	003f2906 	br	80a7fc <__alt_mem_epcs_flash_controller_0+0xff8017fc>
  80ab58:	e48fc83a 	sub	r7,fp,r18
  80ab5c:	1d49c83a 	sub	r4,r3,r21
  80ab60:	e1f9803a 	cmpltu	fp,fp,r7
  80ab64:	2739c83a 	sub	fp,r4,fp
  80ab68:	8f09c83a 	sub	r4,r17,fp
  80ab6c:	003fc306 	br	80aa7c <__alt_mem_epcs_flash_controller_0+0xff801a7c>
  80ab70:	01000604 	movi	r4,24
  80ab74:	003ef906 	br	80a75c <__alt_mem_epcs_flash_controller_0+0xff80175c>
  80ab78:	00800604 	movi	r2,24
  80ab7c:	003f1306 	br	80a7cc <__alt_mem_epcs_flash_controller_0+0xff8017cc>
  80ab80:	01000604 	movi	r4,24
  80ab84:	003eb606 	br	80a660 <__alt_mem_epcs_flash_controller_0+0xff801660>
  80ab88:	40bf902e 	bgeu	r8,r2,80a9cc <__alt_mem_epcs_flash_controller_0+0xff8019cc>
  80ab8c:	b5bfff84 	addi	r22,r22,-2
  80ab90:	4551883a 	add	r8,r8,r21
  80ab94:	003f8e06 	br	80a9d0 <__alt_mem_epcs_flash_controller_0+0xff8019d0>
  80ab98:	18bf762e 	bgeu	r3,r2,80a974 <__alt_mem_epcs_flash_controller_0+0xff801974>
  80ab9c:	8c7fff84 	addi	r17,r17,-2
  80aba0:	1d47883a 	add	r3,r3,r21
  80aba4:	003f7406 	br	80a978 <__alt_mem_epcs_flash_controller_0+0xff801978>
  80aba8:	1cc7883a 	add	r3,r3,r19
  80abac:	003ecd06 	br	80a6e4 <__alt_mem_epcs_flash_controller_0+0xff8016e4>
  80abb0:	8005883a 	mov	r2,r16
  80abb4:	003ef806 	br	80a798 <__alt_mem_epcs_flash_controller_0+0xff801798>
  80abb8:	873fe736 	bltu	r16,fp,80ab58 <__alt_mem_epcs_flash_controller_0+0xff801b58>
  80abbc:	e00f883a 	mov	r7,fp
  80abc0:	0009883a 	mov	r4,zero
  80abc4:	003fad06 	br	80aa7c <__alt_mem_epcs_flash_controller_0+0xff801a7c>

0080abc8 <__divsi3>:
  80abc8:	20001b16 	blt	r4,zero,80ac38 <__divsi3+0x70>
  80abcc:	000f883a 	mov	r7,zero
  80abd0:	28001616 	blt	r5,zero,80ac2c <__divsi3+0x64>
  80abd4:	200d883a 	mov	r6,r4
  80abd8:	29001a2e 	bgeu	r5,r4,80ac44 <__divsi3+0x7c>
  80abdc:	00800804 	movi	r2,32
  80abe0:	00c00044 	movi	r3,1
  80abe4:	00000106 	br	80abec <__divsi3+0x24>
  80abe8:	10000d26 	beq	r2,zero,80ac20 <__divsi3+0x58>
  80abec:	294b883a 	add	r5,r5,r5
  80abf0:	10bfffc4 	addi	r2,r2,-1
  80abf4:	18c7883a 	add	r3,r3,r3
  80abf8:	293ffb36 	bltu	r5,r4,80abe8 <__alt_mem_epcs_flash_controller_0+0xff801be8>
  80abfc:	0005883a 	mov	r2,zero
  80ac00:	18000726 	beq	r3,zero,80ac20 <__divsi3+0x58>
  80ac04:	0005883a 	mov	r2,zero
  80ac08:	31400236 	bltu	r6,r5,80ac14 <__divsi3+0x4c>
  80ac0c:	314dc83a 	sub	r6,r6,r5
  80ac10:	10c4b03a 	or	r2,r2,r3
  80ac14:	1806d07a 	srli	r3,r3,1
  80ac18:	280ad07a 	srli	r5,r5,1
  80ac1c:	183ffa1e 	bne	r3,zero,80ac08 <__alt_mem_epcs_flash_controller_0+0xff801c08>
  80ac20:	38000126 	beq	r7,zero,80ac28 <__divsi3+0x60>
  80ac24:	0085c83a 	sub	r2,zero,r2
  80ac28:	f800283a 	ret
  80ac2c:	014bc83a 	sub	r5,zero,r5
  80ac30:	39c0005c 	xori	r7,r7,1
  80ac34:	003fe706 	br	80abd4 <__alt_mem_epcs_flash_controller_0+0xff801bd4>
  80ac38:	0109c83a 	sub	r4,zero,r4
  80ac3c:	01c00044 	movi	r7,1
  80ac40:	003fe306 	br	80abd0 <__alt_mem_epcs_flash_controller_0+0xff801bd0>
  80ac44:	00c00044 	movi	r3,1
  80ac48:	003fee06 	br	80ac04 <__alt_mem_epcs_flash_controller_0+0xff801c04>

0080ac4c <__modsi3>:
  80ac4c:	20001716 	blt	r4,zero,80acac <__modsi3+0x60>
  80ac50:	000f883a 	mov	r7,zero
  80ac54:	2005883a 	mov	r2,r4
  80ac58:	28001216 	blt	r5,zero,80aca4 <__modsi3+0x58>
  80ac5c:	2900162e 	bgeu	r5,r4,80acb8 <__modsi3+0x6c>
  80ac60:	01800804 	movi	r6,32
  80ac64:	00c00044 	movi	r3,1
  80ac68:	00000106 	br	80ac70 <__modsi3+0x24>
  80ac6c:	30000a26 	beq	r6,zero,80ac98 <__modsi3+0x4c>
  80ac70:	294b883a 	add	r5,r5,r5
  80ac74:	31bfffc4 	addi	r6,r6,-1
  80ac78:	18c7883a 	add	r3,r3,r3
  80ac7c:	293ffb36 	bltu	r5,r4,80ac6c <__alt_mem_epcs_flash_controller_0+0xff801c6c>
  80ac80:	18000526 	beq	r3,zero,80ac98 <__modsi3+0x4c>
  80ac84:	1806d07a 	srli	r3,r3,1
  80ac88:	11400136 	bltu	r2,r5,80ac90 <__modsi3+0x44>
  80ac8c:	1145c83a 	sub	r2,r2,r5
  80ac90:	280ad07a 	srli	r5,r5,1
  80ac94:	183ffb1e 	bne	r3,zero,80ac84 <__alt_mem_epcs_flash_controller_0+0xff801c84>
  80ac98:	38000126 	beq	r7,zero,80aca0 <__modsi3+0x54>
  80ac9c:	0085c83a 	sub	r2,zero,r2
  80aca0:	f800283a 	ret
  80aca4:	014bc83a 	sub	r5,zero,r5
  80aca8:	003fec06 	br	80ac5c <__alt_mem_epcs_flash_controller_0+0xff801c5c>
  80acac:	0109c83a 	sub	r4,zero,r4
  80acb0:	01c00044 	movi	r7,1
  80acb4:	003fe706 	br	80ac54 <__alt_mem_epcs_flash_controller_0+0xff801c54>
  80acb8:	00c00044 	movi	r3,1
  80acbc:	003ff106 	br	80ac84 <__alt_mem_epcs_flash_controller_0+0xff801c84>

0080acc0 <__udivsi3>:
  80acc0:	200d883a 	mov	r6,r4
  80acc4:	2900152e 	bgeu	r5,r4,80ad1c <__udivsi3+0x5c>
  80acc8:	28001416 	blt	r5,zero,80ad1c <__udivsi3+0x5c>
  80accc:	00800804 	movi	r2,32
  80acd0:	00c00044 	movi	r3,1
  80acd4:	00000206 	br	80ace0 <__udivsi3+0x20>
  80acd8:	10000e26 	beq	r2,zero,80ad14 <__udivsi3+0x54>
  80acdc:	28000516 	blt	r5,zero,80acf4 <__udivsi3+0x34>
  80ace0:	294b883a 	add	r5,r5,r5
  80ace4:	10bfffc4 	addi	r2,r2,-1
  80ace8:	18c7883a 	add	r3,r3,r3
  80acec:	293ffa36 	bltu	r5,r4,80acd8 <__alt_mem_epcs_flash_controller_0+0xff801cd8>
  80acf0:	18000826 	beq	r3,zero,80ad14 <__udivsi3+0x54>
  80acf4:	0005883a 	mov	r2,zero
  80acf8:	31400236 	bltu	r6,r5,80ad04 <__udivsi3+0x44>
  80acfc:	314dc83a 	sub	r6,r6,r5
  80ad00:	10c4b03a 	or	r2,r2,r3
  80ad04:	1806d07a 	srli	r3,r3,1
  80ad08:	280ad07a 	srli	r5,r5,1
  80ad0c:	183ffa1e 	bne	r3,zero,80acf8 <__alt_mem_epcs_flash_controller_0+0xff801cf8>
  80ad10:	f800283a 	ret
  80ad14:	0005883a 	mov	r2,zero
  80ad18:	f800283a 	ret
  80ad1c:	00c00044 	movi	r3,1
  80ad20:	003ff406 	br	80acf4 <__alt_mem_epcs_flash_controller_0+0xff801cf4>

0080ad24 <__umodsi3>:
  80ad24:	2005883a 	mov	r2,r4
  80ad28:	2900122e 	bgeu	r5,r4,80ad74 <__umodsi3+0x50>
  80ad2c:	28001116 	blt	r5,zero,80ad74 <__umodsi3+0x50>
  80ad30:	01800804 	movi	r6,32
  80ad34:	00c00044 	movi	r3,1
  80ad38:	00000206 	br	80ad44 <__umodsi3+0x20>
  80ad3c:	30000c26 	beq	r6,zero,80ad70 <__umodsi3+0x4c>
  80ad40:	28000516 	blt	r5,zero,80ad58 <__umodsi3+0x34>
  80ad44:	294b883a 	add	r5,r5,r5
  80ad48:	31bfffc4 	addi	r6,r6,-1
  80ad4c:	18c7883a 	add	r3,r3,r3
  80ad50:	293ffa36 	bltu	r5,r4,80ad3c <__alt_mem_epcs_flash_controller_0+0xff801d3c>
  80ad54:	18000626 	beq	r3,zero,80ad70 <__umodsi3+0x4c>
  80ad58:	1806d07a 	srli	r3,r3,1
  80ad5c:	11400136 	bltu	r2,r5,80ad64 <__umodsi3+0x40>
  80ad60:	1145c83a 	sub	r2,r2,r5
  80ad64:	280ad07a 	srli	r5,r5,1
  80ad68:	183ffb1e 	bne	r3,zero,80ad58 <__alt_mem_epcs_flash_controller_0+0xff801d58>
  80ad6c:	f800283a 	ret
  80ad70:	f800283a 	ret
  80ad74:	00c00044 	movi	r3,1
  80ad78:	003ff706 	br	80ad58 <__alt_mem_epcs_flash_controller_0+0xff801d58>

0080ad7c <__mulsi3>:
  80ad7c:	0005883a 	mov	r2,zero
  80ad80:	20000726 	beq	r4,zero,80ada0 <__mulsi3+0x24>
  80ad84:	20c0004c 	andi	r3,r4,1
  80ad88:	2008d07a 	srli	r4,r4,1
  80ad8c:	18000126 	beq	r3,zero,80ad94 <__mulsi3+0x18>
  80ad90:	1145883a 	add	r2,r2,r5
  80ad94:	294b883a 	add	r5,r5,r5
  80ad98:	203ffa1e 	bne	r4,zero,80ad84 <__alt_mem_epcs_flash_controller_0+0xff801d84>
  80ad9c:	f800283a 	ret
  80ada0:	f800283a 	ret

0080ada4 <__adddf3>:
  80ada4:	02c00434 	movhi	r11,16
  80ada8:	5affffc4 	addi	r11,r11,-1
  80adac:	2806d7fa 	srli	r3,r5,31
  80adb0:	2ad4703a 	and	r10,r5,r11
  80adb4:	3ad2703a 	and	r9,r7,r11
  80adb8:	3804d53a 	srli	r2,r7,20
  80adbc:	3018d77a 	srli	r12,r6,29
  80adc0:	280ad53a 	srli	r5,r5,20
  80adc4:	501490fa 	slli	r10,r10,3
  80adc8:	2010d77a 	srli	r8,r4,29
  80adcc:	481290fa 	slli	r9,r9,3
  80add0:	380ed7fa 	srli	r7,r7,31
  80add4:	defffb04 	addi	sp,sp,-20
  80add8:	dc800215 	stw	r18,8(sp)
  80addc:	dc400115 	stw	r17,4(sp)
  80ade0:	dc000015 	stw	r16,0(sp)
  80ade4:	dfc00415 	stw	ra,16(sp)
  80ade8:	dcc00315 	stw	r19,12(sp)
  80adec:	1c803fcc 	andi	r18,r3,255
  80adf0:	2c01ffcc 	andi	r16,r5,2047
  80adf4:	5210b03a 	or	r8,r10,r8
  80adf8:	202290fa 	slli	r17,r4,3
  80adfc:	1081ffcc 	andi	r2,r2,2047
  80ae00:	4b12b03a 	or	r9,r9,r12
  80ae04:	300c90fa 	slli	r6,r6,3
  80ae08:	91c07526 	beq	r18,r7,80afe0 <__adddf3+0x23c>
  80ae0c:	8087c83a 	sub	r3,r16,r2
  80ae10:	00c0ab0e 	bge	zero,r3,80b0c0 <__adddf3+0x31c>
  80ae14:	10002a1e 	bne	r2,zero,80aec0 <__adddf3+0x11c>
  80ae18:	4984b03a 	or	r2,r9,r6
  80ae1c:	1000961e 	bne	r2,zero,80b078 <__adddf3+0x2d4>
  80ae20:	888001cc 	andi	r2,r17,7
  80ae24:	10000726 	beq	r2,zero,80ae44 <__adddf3+0xa0>
  80ae28:	888003cc 	andi	r2,r17,15
  80ae2c:	00c00104 	movi	r3,4
  80ae30:	10c00426 	beq	r2,r3,80ae44 <__adddf3+0xa0>
  80ae34:	88c7883a 	add	r3,r17,r3
  80ae38:	1c63803a 	cmpltu	r17,r3,r17
  80ae3c:	4451883a 	add	r8,r8,r17
  80ae40:	1823883a 	mov	r17,r3
  80ae44:	4080202c 	andhi	r2,r8,128
  80ae48:	10005926 	beq	r2,zero,80afb0 <__adddf3+0x20c>
  80ae4c:	84000044 	addi	r16,r16,1
  80ae50:	0081ffc4 	movi	r2,2047
  80ae54:	8080ba26 	beq	r16,r2,80b140 <__adddf3+0x39c>
  80ae58:	00bfe034 	movhi	r2,65408
  80ae5c:	10bfffc4 	addi	r2,r2,-1
  80ae60:	4090703a 	and	r8,r8,r2
  80ae64:	4004977a 	slli	r2,r8,29
  80ae68:	4010927a 	slli	r8,r8,9
  80ae6c:	8822d0fa 	srli	r17,r17,3
  80ae70:	8401ffcc 	andi	r16,r16,2047
  80ae74:	4010d33a 	srli	r8,r8,12
  80ae78:	9007883a 	mov	r3,r18
  80ae7c:	1444b03a 	or	r2,r2,r17
  80ae80:	8401ffcc 	andi	r16,r16,2047
  80ae84:	8020953a 	slli	r16,r16,20
  80ae88:	18c03fcc 	andi	r3,r3,255
  80ae8c:	01000434 	movhi	r4,16
  80ae90:	213fffc4 	addi	r4,r4,-1
  80ae94:	180697fa 	slli	r3,r3,31
  80ae98:	4110703a 	and	r8,r8,r4
  80ae9c:	4410b03a 	or	r8,r8,r16
  80aea0:	40c6b03a 	or	r3,r8,r3
  80aea4:	dfc00417 	ldw	ra,16(sp)
  80aea8:	dcc00317 	ldw	r19,12(sp)
  80aeac:	dc800217 	ldw	r18,8(sp)
  80aeb0:	dc400117 	ldw	r17,4(sp)
  80aeb4:	dc000017 	ldw	r16,0(sp)
  80aeb8:	dec00504 	addi	sp,sp,20
  80aebc:	f800283a 	ret
  80aec0:	0081ffc4 	movi	r2,2047
  80aec4:	80bfd626 	beq	r16,r2,80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80aec8:	4a402034 	orhi	r9,r9,128
  80aecc:	00800e04 	movi	r2,56
  80aed0:	10c09f16 	blt	r2,r3,80b150 <__adddf3+0x3ac>
  80aed4:	008007c4 	movi	r2,31
  80aed8:	10c0c216 	blt	r2,r3,80b1e4 <__adddf3+0x440>
  80aedc:	00800804 	movi	r2,32
  80aee0:	10c5c83a 	sub	r2,r2,r3
  80aee4:	488a983a 	sll	r5,r9,r2
  80aee8:	30c8d83a 	srl	r4,r6,r3
  80aeec:	3084983a 	sll	r2,r6,r2
  80aef0:	48c6d83a 	srl	r3,r9,r3
  80aef4:	290cb03a 	or	r6,r5,r4
  80aef8:	1004c03a 	cmpne	r2,r2,zero
  80aefc:	308cb03a 	or	r6,r6,r2
  80af00:	898dc83a 	sub	r6,r17,r6
  80af04:	89a3803a 	cmpltu	r17,r17,r6
  80af08:	40d1c83a 	sub	r8,r8,r3
  80af0c:	4451c83a 	sub	r8,r8,r17
  80af10:	3023883a 	mov	r17,r6
  80af14:	4080202c 	andhi	r2,r8,128
  80af18:	10002326 	beq	r2,zero,80afa8 <__adddf3+0x204>
  80af1c:	04c02034 	movhi	r19,128
  80af20:	9cffffc4 	addi	r19,r19,-1
  80af24:	44e6703a 	and	r19,r8,r19
  80af28:	98007626 	beq	r19,zero,80b104 <__adddf3+0x360>
  80af2c:	9809883a 	mov	r4,r19
  80af30:	080d5e40 	call	80d5e4 <__clzsi2>
  80af34:	10fffe04 	addi	r3,r2,-8
  80af38:	010007c4 	movi	r4,31
  80af3c:	20c07716 	blt	r4,r3,80b11c <__adddf3+0x378>
  80af40:	00800804 	movi	r2,32
  80af44:	10c5c83a 	sub	r2,r2,r3
  80af48:	8884d83a 	srl	r2,r17,r2
  80af4c:	98d0983a 	sll	r8,r19,r3
  80af50:	88e2983a 	sll	r17,r17,r3
  80af54:	1204b03a 	or	r2,r2,r8
  80af58:	1c007416 	blt	r3,r16,80b12c <__adddf3+0x388>
  80af5c:	1c21c83a 	sub	r16,r3,r16
  80af60:	82000044 	addi	r8,r16,1
  80af64:	00c007c4 	movi	r3,31
  80af68:	1a009116 	blt	r3,r8,80b1b0 <__adddf3+0x40c>
  80af6c:	00c00804 	movi	r3,32
  80af70:	1a07c83a 	sub	r3,r3,r8
  80af74:	8a08d83a 	srl	r4,r17,r8
  80af78:	88e2983a 	sll	r17,r17,r3
  80af7c:	10c6983a 	sll	r3,r2,r3
  80af80:	1210d83a 	srl	r8,r2,r8
  80af84:	8804c03a 	cmpne	r2,r17,zero
  80af88:	1906b03a 	or	r3,r3,r4
  80af8c:	18a2b03a 	or	r17,r3,r2
  80af90:	0021883a 	mov	r16,zero
  80af94:	003fa206 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80af98:	1890b03a 	or	r8,r3,r2
  80af9c:	40017d26 	beq	r8,zero,80b594 <__adddf3+0x7f0>
  80afa0:	1011883a 	mov	r8,r2
  80afa4:	1823883a 	mov	r17,r3
  80afa8:	888001cc 	andi	r2,r17,7
  80afac:	103f9e1e 	bne	r2,zero,80ae28 <__alt_mem_epcs_flash_controller_0+0xff801e28>
  80afb0:	4004977a 	slli	r2,r8,29
  80afb4:	8822d0fa 	srli	r17,r17,3
  80afb8:	4010d0fa 	srli	r8,r8,3
  80afbc:	9007883a 	mov	r3,r18
  80afc0:	1444b03a 	or	r2,r2,r17
  80afc4:	0101ffc4 	movi	r4,2047
  80afc8:	81002426 	beq	r16,r4,80b05c <__adddf3+0x2b8>
  80afcc:	8120703a 	and	r16,r16,r4
  80afd0:	01000434 	movhi	r4,16
  80afd4:	213fffc4 	addi	r4,r4,-1
  80afd8:	4110703a 	and	r8,r8,r4
  80afdc:	003fa806 	br	80ae80 <__alt_mem_epcs_flash_controller_0+0xff801e80>
  80afe0:	8089c83a 	sub	r4,r16,r2
  80afe4:	01005e0e 	bge	zero,r4,80b160 <__adddf3+0x3bc>
  80afe8:	10002b26 	beq	r2,zero,80b098 <__adddf3+0x2f4>
  80afec:	0081ffc4 	movi	r2,2047
  80aff0:	80bf8b26 	beq	r16,r2,80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80aff4:	4a402034 	orhi	r9,r9,128
  80aff8:	00800e04 	movi	r2,56
  80affc:	1100a40e 	bge	r2,r4,80b290 <__adddf3+0x4ec>
  80b000:	498cb03a 	or	r6,r9,r6
  80b004:	300ac03a 	cmpne	r5,r6,zero
  80b008:	0013883a 	mov	r9,zero
  80b00c:	2c4b883a 	add	r5,r5,r17
  80b010:	2c63803a 	cmpltu	r17,r5,r17
  80b014:	4a11883a 	add	r8,r9,r8
  80b018:	8a11883a 	add	r8,r17,r8
  80b01c:	2823883a 	mov	r17,r5
  80b020:	4080202c 	andhi	r2,r8,128
  80b024:	103fe026 	beq	r2,zero,80afa8 <__alt_mem_epcs_flash_controller_0+0xff801fa8>
  80b028:	84000044 	addi	r16,r16,1
  80b02c:	0081ffc4 	movi	r2,2047
  80b030:	8080d226 	beq	r16,r2,80b37c <__adddf3+0x5d8>
  80b034:	00bfe034 	movhi	r2,65408
  80b038:	10bfffc4 	addi	r2,r2,-1
  80b03c:	4090703a 	and	r8,r8,r2
  80b040:	880ad07a 	srli	r5,r17,1
  80b044:	400897fa 	slli	r4,r8,31
  80b048:	88c0004c 	andi	r3,r17,1
  80b04c:	28e2b03a 	or	r17,r5,r3
  80b050:	4010d07a 	srli	r8,r8,1
  80b054:	2462b03a 	or	r17,r4,r17
  80b058:	003f7106 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b05c:	4088b03a 	or	r4,r8,r2
  80b060:	20014526 	beq	r4,zero,80b578 <__adddf3+0x7d4>
  80b064:	01000434 	movhi	r4,16
  80b068:	42000234 	orhi	r8,r8,8
  80b06c:	213fffc4 	addi	r4,r4,-1
  80b070:	4110703a 	and	r8,r8,r4
  80b074:	003f8206 	br	80ae80 <__alt_mem_epcs_flash_controller_0+0xff801e80>
  80b078:	18ffffc4 	addi	r3,r3,-1
  80b07c:	1800491e 	bne	r3,zero,80b1a4 <__adddf3+0x400>
  80b080:	898bc83a 	sub	r5,r17,r6
  80b084:	8963803a 	cmpltu	r17,r17,r5
  80b088:	4251c83a 	sub	r8,r8,r9
  80b08c:	4451c83a 	sub	r8,r8,r17
  80b090:	2823883a 	mov	r17,r5
  80b094:	003f9f06 	br	80af14 <__alt_mem_epcs_flash_controller_0+0xff801f14>
  80b098:	4984b03a 	or	r2,r9,r6
  80b09c:	103f6026 	beq	r2,zero,80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b0a0:	213fffc4 	addi	r4,r4,-1
  80b0a4:	2000931e 	bne	r4,zero,80b2f4 <__adddf3+0x550>
  80b0a8:	898d883a 	add	r6,r17,r6
  80b0ac:	3463803a 	cmpltu	r17,r6,r17
  80b0b0:	4251883a 	add	r8,r8,r9
  80b0b4:	8a11883a 	add	r8,r17,r8
  80b0b8:	3023883a 	mov	r17,r6
  80b0bc:	003fd806 	br	80b020 <__alt_mem_epcs_flash_controller_0+0xff802020>
  80b0c0:	1800541e 	bne	r3,zero,80b214 <__adddf3+0x470>
  80b0c4:	80800044 	addi	r2,r16,1
  80b0c8:	1081ffcc 	andi	r2,r2,2047
  80b0cc:	00c00044 	movi	r3,1
  80b0d0:	1880a00e 	bge	r3,r2,80b354 <__adddf3+0x5b0>
  80b0d4:	8989c83a 	sub	r4,r17,r6
  80b0d8:	8905803a 	cmpltu	r2,r17,r4
  80b0dc:	4267c83a 	sub	r19,r8,r9
  80b0e0:	98a7c83a 	sub	r19,r19,r2
  80b0e4:	9880202c 	andhi	r2,r19,128
  80b0e8:	10006326 	beq	r2,zero,80b278 <__adddf3+0x4d4>
  80b0ec:	3463c83a 	sub	r17,r6,r17
  80b0f0:	4a07c83a 	sub	r3,r9,r8
  80b0f4:	344d803a 	cmpltu	r6,r6,r17
  80b0f8:	19a7c83a 	sub	r19,r3,r6
  80b0fc:	3825883a 	mov	r18,r7
  80b100:	983f8a1e 	bne	r19,zero,80af2c <__alt_mem_epcs_flash_controller_0+0xff801f2c>
  80b104:	8809883a 	mov	r4,r17
  80b108:	080d5e40 	call	80d5e4 <__clzsi2>
  80b10c:	10800804 	addi	r2,r2,32
  80b110:	10fffe04 	addi	r3,r2,-8
  80b114:	010007c4 	movi	r4,31
  80b118:	20ff890e 	bge	r4,r3,80af40 <__alt_mem_epcs_flash_controller_0+0xff801f40>
  80b11c:	10bff604 	addi	r2,r2,-40
  80b120:	8884983a 	sll	r2,r17,r2
  80b124:	0023883a 	mov	r17,zero
  80b128:	1c3f8c0e 	bge	r3,r16,80af5c <__alt_mem_epcs_flash_controller_0+0xff801f5c>
  80b12c:	023fe034 	movhi	r8,65408
  80b130:	423fffc4 	addi	r8,r8,-1
  80b134:	80e1c83a 	sub	r16,r16,r3
  80b138:	1210703a 	and	r8,r2,r8
  80b13c:	003f3806 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b140:	9007883a 	mov	r3,r18
  80b144:	0011883a 	mov	r8,zero
  80b148:	0005883a 	mov	r2,zero
  80b14c:	003f4c06 	br	80ae80 <__alt_mem_epcs_flash_controller_0+0xff801e80>
  80b150:	498cb03a 	or	r6,r9,r6
  80b154:	300cc03a 	cmpne	r6,r6,zero
  80b158:	0007883a 	mov	r3,zero
  80b15c:	003f6806 	br	80af00 <__alt_mem_epcs_flash_controller_0+0xff801f00>
  80b160:	20009c1e 	bne	r4,zero,80b3d4 <__adddf3+0x630>
  80b164:	80800044 	addi	r2,r16,1
  80b168:	1141ffcc 	andi	r5,r2,2047
  80b16c:	01000044 	movi	r4,1
  80b170:	2140670e 	bge	r4,r5,80b310 <__adddf3+0x56c>
  80b174:	0101ffc4 	movi	r4,2047
  80b178:	11007f26 	beq	r2,r4,80b378 <__adddf3+0x5d4>
  80b17c:	898d883a 	add	r6,r17,r6
  80b180:	4247883a 	add	r3,r8,r9
  80b184:	3451803a 	cmpltu	r8,r6,r17
  80b188:	40d1883a 	add	r8,r8,r3
  80b18c:	402297fa 	slli	r17,r8,31
  80b190:	300cd07a 	srli	r6,r6,1
  80b194:	4010d07a 	srli	r8,r8,1
  80b198:	1021883a 	mov	r16,r2
  80b19c:	89a2b03a 	or	r17,r17,r6
  80b1a0:	003f1f06 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b1a4:	0081ffc4 	movi	r2,2047
  80b1a8:	80bf481e 	bne	r16,r2,80aecc <__alt_mem_epcs_flash_controller_0+0xff801ecc>
  80b1ac:	003f1c06 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b1b0:	843ff844 	addi	r16,r16,-31
  80b1b4:	01000804 	movi	r4,32
  80b1b8:	1406d83a 	srl	r3,r2,r16
  80b1bc:	41005026 	beq	r8,r4,80b300 <__adddf3+0x55c>
  80b1c0:	01001004 	movi	r4,64
  80b1c4:	2211c83a 	sub	r8,r4,r8
  80b1c8:	1204983a 	sll	r2,r2,r8
  80b1cc:	88a2b03a 	or	r17,r17,r2
  80b1d0:	8822c03a 	cmpne	r17,r17,zero
  80b1d4:	1c62b03a 	or	r17,r3,r17
  80b1d8:	0011883a 	mov	r8,zero
  80b1dc:	0021883a 	mov	r16,zero
  80b1e0:	003f7106 	br	80afa8 <__alt_mem_epcs_flash_controller_0+0xff801fa8>
  80b1e4:	193ff804 	addi	r4,r3,-32
  80b1e8:	00800804 	movi	r2,32
  80b1ec:	4908d83a 	srl	r4,r9,r4
  80b1f0:	18804526 	beq	r3,r2,80b308 <__adddf3+0x564>
  80b1f4:	00801004 	movi	r2,64
  80b1f8:	10c5c83a 	sub	r2,r2,r3
  80b1fc:	4886983a 	sll	r3,r9,r2
  80b200:	198cb03a 	or	r6,r3,r6
  80b204:	300cc03a 	cmpne	r6,r6,zero
  80b208:	218cb03a 	or	r6,r4,r6
  80b20c:	0007883a 	mov	r3,zero
  80b210:	003f3b06 	br	80af00 <__alt_mem_epcs_flash_controller_0+0xff801f00>
  80b214:	80002a26 	beq	r16,zero,80b2c0 <__adddf3+0x51c>
  80b218:	0101ffc4 	movi	r4,2047
  80b21c:	11006826 	beq	r2,r4,80b3c0 <__adddf3+0x61c>
  80b220:	00c7c83a 	sub	r3,zero,r3
  80b224:	42002034 	orhi	r8,r8,128
  80b228:	01000e04 	movi	r4,56
  80b22c:	20c07c16 	blt	r4,r3,80b420 <__adddf3+0x67c>
  80b230:	010007c4 	movi	r4,31
  80b234:	20c0da16 	blt	r4,r3,80b5a0 <__adddf3+0x7fc>
  80b238:	01000804 	movi	r4,32
  80b23c:	20c9c83a 	sub	r4,r4,r3
  80b240:	4114983a 	sll	r10,r8,r4
  80b244:	88cad83a 	srl	r5,r17,r3
  80b248:	8908983a 	sll	r4,r17,r4
  80b24c:	40c6d83a 	srl	r3,r8,r3
  80b250:	5162b03a 	or	r17,r10,r5
  80b254:	2008c03a 	cmpne	r4,r4,zero
  80b258:	8922b03a 	or	r17,r17,r4
  80b25c:	3463c83a 	sub	r17,r6,r17
  80b260:	48c7c83a 	sub	r3,r9,r3
  80b264:	344d803a 	cmpltu	r6,r6,r17
  80b268:	1991c83a 	sub	r8,r3,r6
  80b26c:	1021883a 	mov	r16,r2
  80b270:	3825883a 	mov	r18,r7
  80b274:	003f2706 	br	80af14 <__alt_mem_epcs_flash_controller_0+0xff801f14>
  80b278:	24d0b03a 	or	r8,r4,r19
  80b27c:	40001b1e 	bne	r8,zero,80b2ec <__adddf3+0x548>
  80b280:	0005883a 	mov	r2,zero
  80b284:	0007883a 	mov	r3,zero
  80b288:	0021883a 	mov	r16,zero
  80b28c:	003f4d06 	br	80afc4 <__alt_mem_epcs_flash_controller_0+0xff801fc4>
  80b290:	008007c4 	movi	r2,31
  80b294:	11003c16 	blt	r2,r4,80b388 <__adddf3+0x5e4>
  80b298:	00800804 	movi	r2,32
  80b29c:	1105c83a 	sub	r2,r2,r4
  80b2a0:	488e983a 	sll	r7,r9,r2
  80b2a4:	310ad83a 	srl	r5,r6,r4
  80b2a8:	3084983a 	sll	r2,r6,r2
  80b2ac:	4912d83a 	srl	r9,r9,r4
  80b2b0:	394ab03a 	or	r5,r7,r5
  80b2b4:	1004c03a 	cmpne	r2,r2,zero
  80b2b8:	288ab03a 	or	r5,r5,r2
  80b2bc:	003f5306 	br	80b00c <__alt_mem_epcs_flash_controller_0+0xff80200c>
  80b2c0:	4448b03a 	or	r4,r8,r17
  80b2c4:	20003e26 	beq	r4,zero,80b3c0 <__adddf3+0x61c>
  80b2c8:	00c6303a 	nor	r3,zero,r3
  80b2cc:	18003a1e 	bne	r3,zero,80b3b8 <__adddf3+0x614>
  80b2d0:	3463c83a 	sub	r17,r6,r17
  80b2d4:	4a07c83a 	sub	r3,r9,r8
  80b2d8:	344d803a 	cmpltu	r6,r6,r17
  80b2dc:	1991c83a 	sub	r8,r3,r6
  80b2e0:	1021883a 	mov	r16,r2
  80b2e4:	3825883a 	mov	r18,r7
  80b2e8:	003f0a06 	br	80af14 <__alt_mem_epcs_flash_controller_0+0xff801f14>
  80b2ec:	2023883a 	mov	r17,r4
  80b2f0:	003f0d06 	br	80af28 <__alt_mem_epcs_flash_controller_0+0xff801f28>
  80b2f4:	0081ffc4 	movi	r2,2047
  80b2f8:	80bf3f1e 	bne	r16,r2,80aff8 <__alt_mem_epcs_flash_controller_0+0xff801ff8>
  80b2fc:	003ec806 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b300:	0005883a 	mov	r2,zero
  80b304:	003fb106 	br	80b1cc <__alt_mem_epcs_flash_controller_0+0xff8021cc>
  80b308:	0007883a 	mov	r3,zero
  80b30c:	003fbc06 	br	80b200 <__alt_mem_epcs_flash_controller_0+0xff802200>
  80b310:	4444b03a 	or	r2,r8,r17
  80b314:	8000871e 	bne	r16,zero,80b534 <__adddf3+0x790>
  80b318:	1000ba26 	beq	r2,zero,80b604 <__adddf3+0x860>
  80b31c:	4984b03a 	or	r2,r9,r6
  80b320:	103ebf26 	beq	r2,zero,80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b324:	8985883a 	add	r2,r17,r6
  80b328:	4247883a 	add	r3,r8,r9
  80b32c:	1451803a 	cmpltu	r8,r2,r17
  80b330:	40d1883a 	add	r8,r8,r3
  80b334:	40c0202c 	andhi	r3,r8,128
  80b338:	1023883a 	mov	r17,r2
  80b33c:	183f1a26 	beq	r3,zero,80afa8 <__alt_mem_epcs_flash_controller_0+0xff801fa8>
  80b340:	00bfe034 	movhi	r2,65408
  80b344:	10bfffc4 	addi	r2,r2,-1
  80b348:	2021883a 	mov	r16,r4
  80b34c:	4090703a 	and	r8,r8,r2
  80b350:	003eb306 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b354:	4444b03a 	or	r2,r8,r17
  80b358:	8000291e 	bne	r16,zero,80b400 <__adddf3+0x65c>
  80b35c:	10004b1e 	bne	r2,zero,80b48c <__adddf3+0x6e8>
  80b360:	4990b03a 	or	r8,r9,r6
  80b364:	40008b26 	beq	r8,zero,80b594 <__adddf3+0x7f0>
  80b368:	4811883a 	mov	r8,r9
  80b36c:	3023883a 	mov	r17,r6
  80b370:	3825883a 	mov	r18,r7
  80b374:	003eaa06 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b378:	1021883a 	mov	r16,r2
  80b37c:	0011883a 	mov	r8,zero
  80b380:	0005883a 	mov	r2,zero
  80b384:	003f0f06 	br	80afc4 <__alt_mem_epcs_flash_controller_0+0xff801fc4>
  80b388:	217ff804 	addi	r5,r4,-32
  80b38c:	00800804 	movi	r2,32
  80b390:	494ad83a 	srl	r5,r9,r5
  80b394:	20807d26 	beq	r4,r2,80b58c <__adddf3+0x7e8>
  80b398:	00801004 	movi	r2,64
  80b39c:	1109c83a 	sub	r4,r2,r4
  80b3a0:	4912983a 	sll	r9,r9,r4
  80b3a4:	498cb03a 	or	r6,r9,r6
  80b3a8:	300cc03a 	cmpne	r6,r6,zero
  80b3ac:	298ab03a 	or	r5,r5,r6
  80b3b0:	0013883a 	mov	r9,zero
  80b3b4:	003f1506 	br	80b00c <__alt_mem_epcs_flash_controller_0+0xff80200c>
  80b3b8:	0101ffc4 	movi	r4,2047
  80b3bc:	113f9a1e 	bne	r2,r4,80b228 <__alt_mem_epcs_flash_controller_0+0xff802228>
  80b3c0:	4811883a 	mov	r8,r9
  80b3c4:	3023883a 	mov	r17,r6
  80b3c8:	1021883a 	mov	r16,r2
  80b3cc:	3825883a 	mov	r18,r7
  80b3d0:	003e9306 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b3d4:	8000161e 	bne	r16,zero,80b430 <__adddf3+0x68c>
  80b3d8:	444ab03a 	or	r5,r8,r17
  80b3dc:	28005126 	beq	r5,zero,80b524 <__adddf3+0x780>
  80b3e0:	0108303a 	nor	r4,zero,r4
  80b3e4:	20004d1e 	bne	r4,zero,80b51c <__adddf3+0x778>
  80b3e8:	89a3883a 	add	r17,r17,r6
  80b3ec:	4253883a 	add	r9,r8,r9
  80b3f0:	898d803a 	cmpltu	r6,r17,r6
  80b3f4:	3251883a 	add	r8,r6,r9
  80b3f8:	1021883a 	mov	r16,r2
  80b3fc:	003f0806 	br	80b020 <__alt_mem_epcs_flash_controller_0+0xff802020>
  80b400:	1000301e 	bne	r2,zero,80b4c4 <__adddf3+0x720>
  80b404:	4984b03a 	or	r2,r9,r6
  80b408:	10007126 	beq	r2,zero,80b5d0 <__adddf3+0x82c>
  80b40c:	4811883a 	mov	r8,r9
  80b410:	3023883a 	mov	r17,r6
  80b414:	3825883a 	mov	r18,r7
  80b418:	0401ffc4 	movi	r16,2047
  80b41c:	003e8006 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b420:	4462b03a 	or	r17,r8,r17
  80b424:	8822c03a 	cmpne	r17,r17,zero
  80b428:	0007883a 	mov	r3,zero
  80b42c:	003f8b06 	br	80b25c <__alt_mem_epcs_flash_controller_0+0xff80225c>
  80b430:	0141ffc4 	movi	r5,2047
  80b434:	11403b26 	beq	r2,r5,80b524 <__adddf3+0x780>
  80b438:	0109c83a 	sub	r4,zero,r4
  80b43c:	42002034 	orhi	r8,r8,128
  80b440:	01400e04 	movi	r5,56
  80b444:	29006716 	blt	r5,r4,80b5e4 <__adddf3+0x840>
  80b448:	014007c4 	movi	r5,31
  80b44c:	29007016 	blt	r5,r4,80b610 <__adddf3+0x86c>
  80b450:	01400804 	movi	r5,32
  80b454:	290bc83a 	sub	r5,r5,r4
  80b458:	4154983a 	sll	r10,r8,r5
  80b45c:	890ed83a 	srl	r7,r17,r4
  80b460:	894a983a 	sll	r5,r17,r5
  80b464:	4108d83a 	srl	r4,r8,r4
  80b468:	51e2b03a 	or	r17,r10,r7
  80b46c:	280ac03a 	cmpne	r5,r5,zero
  80b470:	8962b03a 	or	r17,r17,r5
  80b474:	89a3883a 	add	r17,r17,r6
  80b478:	2253883a 	add	r9,r4,r9
  80b47c:	898d803a 	cmpltu	r6,r17,r6
  80b480:	3251883a 	add	r8,r6,r9
  80b484:	1021883a 	mov	r16,r2
  80b488:	003ee506 	br	80b020 <__alt_mem_epcs_flash_controller_0+0xff802020>
  80b48c:	4984b03a 	or	r2,r9,r6
  80b490:	103e6326 	beq	r2,zero,80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b494:	8987c83a 	sub	r3,r17,r6
  80b498:	88c9803a 	cmpltu	r4,r17,r3
  80b49c:	4245c83a 	sub	r2,r8,r9
  80b4a0:	1105c83a 	sub	r2,r2,r4
  80b4a4:	1100202c 	andhi	r4,r2,128
  80b4a8:	203ebb26 	beq	r4,zero,80af98 <__alt_mem_epcs_flash_controller_0+0xff801f98>
  80b4ac:	3463c83a 	sub	r17,r6,r17
  80b4b0:	4a07c83a 	sub	r3,r9,r8
  80b4b4:	344d803a 	cmpltu	r6,r6,r17
  80b4b8:	1991c83a 	sub	r8,r3,r6
  80b4bc:	3825883a 	mov	r18,r7
  80b4c0:	003e5706 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b4c4:	4984b03a 	or	r2,r9,r6
  80b4c8:	10002e26 	beq	r2,zero,80b584 <__adddf3+0x7e0>
  80b4cc:	4004d0fa 	srli	r2,r8,3
  80b4d0:	8822d0fa 	srli	r17,r17,3
  80b4d4:	4010977a 	slli	r8,r8,29
  80b4d8:	10c0022c 	andhi	r3,r2,8
  80b4dc:	4462b03a 	or	r17,r8,r17
  80b4e0:	18000826 	beq	r3,zero,80b504 <__adddf3+0x760>
  80b4e4:	4808d0fa 	srli	r4,r9,3
  80b4e8:	20c0022c 	andhi	r3,r4,8
  80b4ec:	1800051e 	bne	r3,zero,80b504 <__adddf3+0x760>
  80b4f0:	300cd0fa 	srli	r6,r6,3
  80b4f4:	4806977a 	slli	r3,r9,29
  80b4f8:	2005883a 	mov	r2,r4
  80b4fc:	3825883a 	mov	r18,r7
  80b500:	19a2b03a 	or	r17,r3,r6
  80b504:	8810d77a 	srli	r8,r17,29
  80b508:	100490fa 	slli	r2,r2,3
  80b50c:	882290fa 	slli	r17,r17,3
  80b510:	0401ffc4 	movi	r16,2047
  80b514:	4090b03a 	or	r8,r8,r2
  80b518:	003e4106 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b51c:	0141ffc4 	movi	r5,2047
  80b520:	117fc71e 	bne	r2,r5,80b440 <__alt_mem_epcs_flash_controller_0+0xff802440>
  80b524:	4811883a 	mov	r8,r9
  80b528:	3023883a 	mov	r17,r6
  80b52c:	1021883a 	mov	r16,r2
  80b530:	003e3b06 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b534:	10002f26 	beq	r2,zero,80b5f4 <__adddf3+0x850>
  80b538:	4984b03a 	or	r2,r9,r6
  80b53c:	10001126 	beq	r2,zero,80b584 <__adddf3+0x7e0>
  80b540:	4004d0fa 	srli	r2,r8,3
  80b544:	8822d0fa 	srli	r17,r17,3
  80b548:	4010977a 	slli	r8,r8,29
  80b54c:	10c0022c 	andhi	r3,r2,8
  80b550:	4462b03a 	or	r17,r8,r17
  80b554:	183feb26 	beq	r3,zero,80b504 <__alt_mem_epcs_flash_controller_0+0xff802504>
  80b558:	4808d0fa 	srli	r4,r9,3
  80b55c:	20c0022c 	andhi	r3,r4,8
  80b560:	183fe81e 	bne	r3,zero,80b504 <__alt_mem_epcs_flash_controller_0+0xff802504>
  80b564:	300cd0fa 	srli	r6,r6,3
  80b568:	4806977a 	slli	r3,r9,29
  80b56c:	2005883a 	mov	r2,r4
  80b570:	19a2b03a 	or	r17,r3,r6
  80b574:	003fe306 	br	80b504 <__alt_mem_epcs_flash_controller_0+0xff802504>
  80b578:	0011883a 	mov	r8,zero
  80b57c:	0005883a 	mov	r2,zero
  80b580:	003e3f06 	br	80ae80 <__alt_mem_epcs_flash_controller_0+0xff801e80>
  80b584:	0401ffc4 	movi	r16,2047
  80b588:	003e2506 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b58c:	0013883a 	mov	r9,zero
  80b590:	003f8406 	br	80b3a4 <__alt_mem_epcs_flash_controller_0+0xff8023a4>
  80b594:	0005883a 	mov	r2,zero
  80b598:	0007883a 	mov	r3,zero
  80b59c:	003e8906 	br	80afc4 <__alt_mem_epcs_flash_controller_0+0xff801fc4>
  80b5a0:	197ff804 	addi	r5,r3,-32
  80b5a4:	01000804 	movi	r4,32
  80b5a8:	414ad83a 	srl	r5,r8,r5
  80b5ac:	19002426 	beq	r3,r4,80b640 <__adddf3+0x89c>
  80b5b0:	01001004 	movi	r4,64
  80b5b4:	20c7c83a 	sub	r3,r4,r3
  80b5b8:	40c6983a 	sll	r3,r8,r3
  80b5bc:	1c46b03a 	or	r3,r3,r17
  80b5c0:	1806c03a 	cmpne	r3,r3,zero
  80b5c4:	28e2b03a 	or	r17,r5,r3
  80b5c8:	0007883a 	mov	r3,zero
  80b5cc:	003f2306 	br	80b25c <__alt_mem_epcs_flash_controller_0+0xff80225c>
  80b5d0:	0007883a 	mov	r3,zero
  80b5d4:	5811883a 	mov	r8,r11
  80b5d8:	00bfffc4 	movi	r2,-1
  80b5dc:	0401ffc4 	movi	r16,2047
  80b5e0:	003e7806 	br	80afc4 <__alt_mem_epcs_flash_controller_0+0xff801fc4>
  80b5e4:	4462b03a 	or	r17,r8,r17
  80b5e8:	8822c03a 	cmpne	r17,r17,zero
  80b5ec:	0009883a 	mov	r4,zero
  80b5f0:	003fa006 	br	80b474 <__alt_mem_epcs_flash_controller_0+0xff802474>
  80b5f4:	4811883a 	mov	r8,r9
  80b5f8:	3023883a 	mov	r17,r6
  80b5fc:	0401ffc4 	movi	r16,2047
  80b600:	003e0706 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b604:	4811883a 	mov	r8,r9
  80b608:	3023883a 	mov	r17,r6
  80b60c:	003e0406 	br	80ae20 <__alt_mem_epcs_flash_controller_0+0xff801e20>
  80b610:	21fff804 	addi	r7,r4,-32
  80b614:	01400804 	movi	r5,32
  80b618:	41ced83a 	srl	r7,r8,r7
  80b61c:	21400a26 	beq	r4,r5,80b648 <__adddf3+0x8a4>
  80b620:	01401004 	movi	r5,64
  80b624:	2909c83a 	sub	r4,r5,r4
  80b628:	4108983a 	sll	r4,r8,r4
  80b62c:	2448b03a 	or	r4,r4,r17
  80b630:	2008c03a 	cmpne	r4,r4,zero
  80b634:	3922b03a 	or	r17,r7,r4
  80b638:	0009883a 	mov	r4,zero
  80b63c:	003f8d06 	br	80b474 <__alt_mem_epcs_flash_controller_0+0xff802474>
  80b640:	0007883a 	mov	r3,zero
  80b644:	003fdd06 	br	80b5bc <__alt_mem_epcs_flash_controller_0+0xff8025bc>
  80b648:	0009883a 	mov	r4,zero
  80b64c:	003ff706 	br	80b62c <__alt_mem_epcs_flash_controller_0+0xff80262c>

0080b650 <__divdf3>:
  80b650:	defff004 	addi	sp,sp,-64
  80b654:	dc800815 	stw	r18,32(sp)
  80b658:	2824d53a 	srli	r18,r5,20
  80b65c:	dd800c15 	stw	r22,48(sp)
  80b660:	282cd7fa 	srli	r22,r5,31
  80b664:	dc000615 	stw	r16,24(sp)
  80b668:	04000434 	movhi	r16,16
  80b66c:	843fffc4 	addi	r16,r16,-1
  80b670:	dfc00f15 	stw	ra,60(sp)
  80b674:	df000e15 	stw	fp,56(sp)
  80b678:	ddc00d15 	stw	r23,52(sp)
  80b67c:	dd400b15 	stw	r21,44(sp)
  80b680:	dd000a15 	stw	r20,40(sp)
  80b684:	dcc00915 	stw	r19,36(sp)
  80b688:	dc400715 	stw	r17,28(sp)
  80b68c:	9481ffcc 	andi	r18,r18,2047
  80b690:	2c20703a 	and	r16,r5,r16
  80b694:	b2003fcc 	andi	r8,r22,255
  80b698:	90006126 	beq	r18,zero,80b820 <__divdf3+0x1d0>
  80b69c:	0081ffc4 	movi	r2,2047
  80b6a0:	202b883a 	mov	r21,r4
  80b6a4:	90803726 	beq	r18,r2,80b784 <__divdf3+0x134>
  80b6a8:	80800434 	orhi	r2,r16,16
  80b6ac:	100490fa 	slli	r2,r2,3
  80b6b0:	2020d77a 	srli	r16,r4,29
  80b6b4:	202a90fa 	slli	r21,r4,3
  80b6b8:	94bf0044 	addi	r18,r18,-1023
  80b6bc:	80a0b03a 	or	r16,r16,r2
  80b6c0:	0013883a 	mov	r9,zero
  80b6c4:	000b883a 	mov	r5,zero
  80b6c8:	3806d53a 	srli	r3,r7,20
  80b6cc:	382ed7fa 	srli	r23,r7,31
  80b6d0:	04400434 	movhi	r17,16
  80b6d4:	8c7fffc4 	addi	r17,r17,-1
  80b6d8:	18c1ffcc 	andi	r3,r3,2047
  80b6dc:	3029883a 	mov	r20,r6
  80b6e0:	3c62703a 	and	r17,r7,r17
  80b6e4:	bf003fcc 	andi	fp,r23,255
  80b6e8:	18006e26 	beq	r3,zero,80b8a4 <__divdf3+0x254>
  80b6ec:	0081ffc4 	movi	r2,2047
  80b6f0:	18806626 	beq	r3,r2,80b88c <__divdf3+0x23c>
  80b6f4:	88800434 	orhi	r2,r17,16
  80b6f8:	100490fa 	slli	r2,r2,3
  80b6fc:	3022d77a 	srli	r17,r6,29
  80b700:	302890fa 	slli	r20,r6,3
  80b704:	18ff0044 	addi	r3,r3,-1023
  80b708:	88a2b03a 	or	r17,r17,r2
  80b70c:	000f883a 	mov	r7,zero
  80b710:	b5e6f03a 	xor	r19,r22,r23
  80b714:	3a4cb03a 	or	r6,r7,r9
  80b718:	008003c4 	movi	r2,15
  80b71c:	9809883a 	mov	r4,r19
  80b720:	90c7c83a 	sub	r3,r18,r3
  80b724:	9cc03fcc 	andi	r19,r19,255
  80b728:	11809636 	bltu	r2,r6,80b984 <__divdf3+0x334>
  80b72c:	300c90ba 	slli	r6,r6,2
  80b730:	00802074 	movhi	r2,129
  80b734:	10add104 	addi	r2,r2,-18620
  80b738:	308d883a 	add	r6,r6,r2
  80b73c:	30800017 	ldw	r2,0(r6)
  80b740:	1000683a 	jmp	r2
  80b744:	0080b984 	movi	r2,742
  80b748:	0080b7bc 	xorhi	r2,zero,734
  80b74c:	0080b974 	movhi	r2,741
  80b750:	0080b7b0 	cmpltui	r2,zero,734
  80b754:	0080b974 	movhi	r2,741
  80b758:	0080b948 	cmpgei	r2,zero,741
  80b75c:	0080b974 	movhi	r2,741
  80b760:	0080b7b0 	cmpltui	r2,zero,734
  80b764:	0080b7bc 	xorhi	r2,zero,734
  80b768:	0080b7bc 	xorhi	r2,zero,734
  80b76c:	0080b948 	cmpgei	r2,zero,741
  80b770:	0080b7b0 	cmpltui	r2,zero,734
  80b774:	0080b7a0 	cmpeqi	r2,zero,734
  80b778:	0080b7a0 	cmpeqi	r2,zero,734
  80b77c:	0080b7a0 	cmpeqi	r2,zero,734
  80b780:	0080bd0c 	andi	r2,zero,756
  80b784:	2404b03a 	or	r2,r4,r16
  80b788:	10006c1e 	bne	r2,zero,80b93c <__divdf3+0x2ec>
  80b78c:	02400204 	movi	r9,8
  80b790:	0021883a 	mov	r16,zero
  80b794:	002b883a 	mov	r21,zero
  80b798:	01400084 	movi	r5,2
  80b79c:	003fca06 	br	80b6c8 <__alt_mem_epcs_flash_controller_0+0xff8026c8>
  80b7a0:	8023883a 	mov	r17,r16
  80b7a4:	a829883a 	mov	r20,r21
  80b7a8:	4039883a 	mov	fp,r8
  80b7ac:	280f883a 	mov	r7,r5
  80b7b0:	00800084 	movi	r2,2
  80b7b4:	3881601e 	bne	r7,r2,80bd38 <__divdf3+0x6e8>
  80b7b8:	e027883a 	mov	r19,fp
  80b7bc:	9900004c 	andi	r4,r19,1
  80b7c0:	0081ffc4 	movi	r2,2047
  80b7c4:	0021883a 	mov	r16,zero
  80b7c8:	002b883a 	mov	r21,zero
  80b7cc:	1004953a 	slli	r2,r2,20
  80b7d0:	20c03fcc 	andi	r3,r4,255
  80b7d4:	01400434 	movhi	r5,16
  80b7d8:	297fffc4 	addi	r5,r5,-1
  80b7dc:	180697fa 	slli	r3,r3,31
  80b7e0:	8160703a 	and	r16,r16,r5
  80b7e4:	80a0b03a 	or	r16,r16,r2
  80b7e8:	80c6b03a 	or	r3,r16,r3
  80b7ec:	a805883a 	mov	r2,r21
  80b7f0:	dfc00f17 	ldw	ra,60(sp)
  80b7f4:	df000e17 	ldw	fp,56(sp)
  80b7f8:	ddc00d17 	ldw	r23,52(sp)
  80b7fc:	dd800c17 	ldw	r22,48(sp)
  80b800:	dd400b17 	ldw	r21,44(sp)
  80b804:	dd000a17 	ldw	r20,40(sp)
  80b808:	dcc00917 	ldw	r19,36(sp)
  80b80c:	dc800817 	ldw	r18,32(sp)
  80b810:	dc400717 	ldw	r17,28(sp)
  80b814:	dc000617 	ldw	r16,24(sp)
  80b818:	dec01004 	addi	sp,sp,64
  80b81c:	f800283a 	ret
  80b820:	2404b03a 	or	r2,r4,r16
  80b824:	2023883a 	mov	r17,r4
  80b828:	10003f26 	beq	r2,zero,80b928 <__divdf3+0x2d8>
  80b82c:	80015e26 	beq	r16,zero,80bda8 <__divdf3+0x758>
  80b830:	8009883a 	mov	r4,r16
  80b834:	d9800215 	stw	r6,8(sp)
  80b838:	d9c00515 	stw	r7,20(sp)
  80b83c:	da000415 	stw	r8,16(sp)
  80b840:	080d5e40 	call	80d5e4 <__clzsi2>
  80b844:	d9800217 	ldw	r6,8(sp)
  80b848:	d9c00517 	ldw	r7,20(sp)
  80b84c:	da000417 	ldw	r8,16(sp)
  80b850:	113ffd44 	addi	r4,r2,-11
  80b854:	00c00704 	movi	r3,28
  80b858:	19014f16 	blt	r3,r4,80bd98 <__divdf3+0x748>
  80b85c:	00c00744 	movi	r3,29
  80b860:	157ffe04 	addi	r21,r2,-8
  80b864:	1907c83a 	sub	r3,r3,r4
  80b868:	8560983a 	sll	r16,r16,r21
  80b86c:	88c6d83a 	srl	r3,r17,r3
  80b870:	8d6a983a 	sll	r21,r17,r21
  80b874:	1c20b03a 	or	r16,r3,r16
  80b878:	1080fcc4 	addi	r2,r2,1011
  80b87c:	00a5c83a 	sub	r18,zero,r2
  80b880:	0013883a 	mov	r9,zero
  80b884:	000b883a 	mov	r5,zero
  80b888:	003f8f06 	br	80b6c8 <__alt_mem_epcs_flash_controller_0+0xff8026c8>
  80b88c:	3444b03a 	or	r2,r6,r17
  80b890:	1000231e 	bne	r2,zero,80b920 <__divdf3+0x2d0>
  80b894:	0023883a 	mov	r17,zero
  80b898:	0029883a 	mov	r20,zero
  80b89c:	01c00084 	movi	r7,2
  80b8a0:	003f9b06 	br	80b710 <__alt_mem_epcs_flash_controller_0+0xff802710>
  80b8a4:	3444b03a 	or	r2,r6,r17
  80b8a8:	10001926 	beq	r2,zero,80b910 <__divdf3+0x2c0>
  80b8ac:	88014b26 	beq	r17,zero,80bddc <__divdf3+0x78c>
  80b8b0:	8809883a 	mov	r4,r17
  80b8b4:	d9400115 	stw	r5,4(sp)
  80b8b8:	d9800215 	stw	r6,8(sp)
  80b8bc:	da000415 	stw	r8,16(sp)
  80b8c0:	da400315 	stw	r9,12(sp)
  80b8c4:	080d5e40 	call	80d5e4 <__clzsi2>
  80b8c8:	d9400117 	ldw	r5,4(sp)
  80b8cc:	d9800217 	ldw	r6,8(sp)
  80b8d0:	da000417 	ldw	r8,16(sp)
  80b8d4:	da400317 	ldw	r9,12(sp)
  80b8d8:	113ffd44 	addi	r4,r2,-11
  80b8dc:	00c00704 	movi	r3,28
  80b8e0:	19013a16 	blt	r3,r4,80bdcc <__divdf3+0x77c>
  80b8e4:	00c00744 	movi	r3,29
  80b8e8:	153ffe04 	addi	r20,r2,-8
  80b8ec:	1907c83a 	sub	r3,r3,r4
  80b8f0:	8d22983a 	sll	r17,r17,r20
  80b8f4:	30c6d83a 	srl	r3,r6,r3
  80b8f8:	3528983a 	sll	r20,r6,r20
  80b8fc:	1c62b03a 	or	r17,r3,r17
  80b900:	1080fcc4 	addi	r2,r2,1011
  80b904:	0087c83a 	sub	r3,zero,r2
  80b908:	000f883a 	mov	r7,zero
  80b90c:	003f8006 	br	80b710 <__alt_mem_epcs_flash_controller_0+0xff802710>
  80b910:	0023883a 	mov	r17,zero
  80b914:	0029883a 	mov	r20,zero
  80b918:	01c00044 	movi	r7,1
  80b91c:	003f7c06 	br	80b710 <__alt_mem_epcs_flash_controller_0+0xff802710>
  80b920:	01c000c4 	movi	r7,3
  80b924:	003f7a06 	br	80b710 <__alt_mem_epcs_flash_controller_0+0xff802710>
  80b928:	02400104 	movi	r9,4
  80b92c:	0021883a 	mov	r16,zero
  80b930:	002b883a 	mov	r21,zero
  80b934:	01400044 	movi	r5,1
  80b938:	003f6306 	br	80b6c8 <__alt_mem_epcs_flash_controller_0+0xff8026c8>
  80b93c:	02400304 	movi	r9,12
  80b940:	014000c4 	movi	r5,3
  80b944:	003f6006 	br	80b6c8 <__alt_mem_epcs_flash_controller_0+0xff8026c8>
  80b948:	04000434 	movhi	r16,16
  80b94c:	0009883a 	mov	r4,zero
  80b950:	843fffc4 	addi	r16,r16,-1
  80b954:	057fffc4 	movi	r21,-1
  80b958:	0081ffc4 	movi	r2,2047
  80b95c:	003f9b06 	br	80b7cc <__alt_mem_epcs_flash_controller_0+0xff8027cc>
  80b960:	00c00044 	movi	r3,1
  80b964:	1887c83a 	sub	r3,r3,r2
  80b968:	01000e04 	movi	r4,56
  80b96c:	20c1530e 	bge	r4,r3,80bebc <__divdf3+0x86c>
  80b970:	9900004c 	andi	r4,r19,1
  80b974:	0005883a 	mov	r2,zero
  80b978:	0021883a 	mov	r16,zero
  80b97c:	002b883a 	mov	r21,zero
  80b980:	003f9206 	br	80b7cc <__alt_mem_epcs_flash_controller_0+0xff8027cc>
  80b984:	8c012e36 	bltu	r17,r16,80be40 <__divdf3+0x7f0>
  80b988:	84412c26 	beq	r16,r17,80be3c <__divdf3+0x7ec>
  80b98c:	a82f883a 	mov	r23,r21
  80b990:	18ffffc4 	addi	r3,r3,-1
  80b994:	002b883a 	mov	r21,zero
  80b998:	a004d63a 	srli	r2,r20,24
  80b99c:	8822923a 	slli	r17,r17,8
  80b9a0:	a028923a 	slli	r20,r20,8
  80b9a4:	8009883a 	mov	r4,r16
  80b9a8:	88acb03a 	or	r22,r17,r2
  80b9ac:	dd000015 	stw	r20,0(sp)
  80b9b0:	b028d43a 	srli	r20,r22,16
  80b9b4:	d8c00215 	stw	r3,8(sp)
  80b9b8:	b4bfffcc 	andi	r18,r22,65535
  80b9bc:	a00b883a 	mov	r5,r20
  80b9c0:	080acc00 	call	80acc0 <__udivsi3>
  80b9c4:	100b883a 	mov	r5,r2
  80b9c8:	9009883a 	mov	r4,r18
  80b9cc:	1023883a 	mov	r17,r2
  80b9d0:	080ad7c0 	call	80ad7c <__mulsi3>
  80b9d4:	8009883a 	mov	r4,r16
  80b9d8:	a00b883a 	mov	r5,r20
  80b9dc:	1039883a 	mov	fp,r2
  80b9e0:	080ad240 	call	80ad24 <__umodsi3>
  80b9e4:	1004943a 	slli	r2,r2,16
  80b9e8:	b808d43a 	srli	r4,r23,16
  80b9ec:	d8c00217 	ldw	r3,8(sp)
  80b9f0:	2084b03a 	or	r2,r4,r2
  80b9f4:	1700062e 	bgeu	r2,fp,80ba10 <__divdf3+0x3c0>
  80b9f8:	1585883a 	add	r2,r2,r22
  80b9fc:	893fffc4 	addi	r4,r17,-1
  80ba00:	15811d36 	bltu	r2,r22,80be78 <__divdf3+0x828>
  80ba04:	17011c2e 	bgeu	r2,fp,80be78 <__divdf3+0x828>
  80ba08:	8c7fff84 	addi	r17,r17,-2
  80ba0c:	1585883a 	add	r2,r2,r22
  80ba10:	1739c83a 	sub	fp,r2,fp
  80ba14:	a00b883a 	mov	r5,r20
  80ba18:	e009883a 	mov	r4,fp
  80ba1c:	d8c00215 	stw	r3,8(sp)
  80ba20:	080acc00 	call	80acc0 <__udivsi3>
  80ba24:	100b883a 	mov	r5,r2
  80ba28:	9009883a 	mov	r4,r18
  80ba2c:	1021883a 	mov	r16,r2
  80ba30:	080ad7c0 	call	80ad7c <__mulsi3>
  80ba34:	a00b883a 	mov	r5,r20
  80ba38:	e009883a 	mov	r4,fp
  80ba3c:	d8800415 	stw	r2,16(sp)
  80ba40:	080ad240 	call	80ad24 <__umodsi3>
  80ba44:	1004943a 	slli	r2,r2,16
  80ba48:	da000417 	ldw	r8,16(sp)
  80ba4c:	bdffffcc 	andi	r23,r23,65535
  80ba50:	b884b03a 	or	r2,r23,r2
  80ba54:	d8c00217 	ldw	r3,8(sp)
  80ba58:	1200062e 	bgeu	r2,r8,80ba74 <__divdf3+0x424>
  80ba5c:	1585883a 	add	r2,r2,r22
  80ba60:	813fffc4 	addi	r4,r16,-1
  80ba64:	15810236 	bltu	r2,r22,80be70 <__divdf3+0x820>
  80ba68:	1201012e 	bgeu	r2,r8,80be70 <__divdf3+0x820>
  80ba6c:	843fff84 	addi	r16,r16,-2
  80ba70:	1585883a 	add	r2,r2,r22
  80ba74:	8822943a 	slli	r17,r17,16
  80ba78:	d9800017 	ldw	r6,0(sp)
  80ba7c:	1211c83a 	sub	r8,r2,r8
  80ba80:	8c22b03a 	or	r17,r17,r16
  80ba84:	373fffcc 	andi	fp,r6,65535
  80ba88:	8abfffcc 	andi	r10,r17,65535
  80ba8c:	8820d43a 	srli	r16,r17,16
  80ba90:	5009883a 	mov	r4,r10
  80ba94:	e00b883a 	mov	r5,fp
  80ba98:	302ed43a 	srli	r23,r6,16
  80ba9c:	d8c00215 	stw	r3,8(sp)
  80baa0:	da000415 	stw	r8,16(sp)
  80baa4:	da800115 	stw	r10,4(sp)
  80baa8:	080ad7c0 	call	80ad7c <__mulsi3>
  80baac:	800b883a 	mov	r5,r16
  80bab0:	e009883a 	mov	r4,fp
  80bab4:	d8800515 	stw	r2,20(sp)
  80bab8:	080ad7c0 	call	80ad7c <__mulsi3>
  80babc:	8009883a 	mov	r4,r16
  80bac0:	b80b883a 	mov	r5,r23
  80bac4:	d8800315 	stw	r2,12(sp)
  80bac8:	080ad7c0 	call	80ad7c <__mulsi3>
  80bacc:	da800117 	ldw	r10,4(sp)
  80bad0:	b80b883a 	mov	r5,r23
  80bad4:	1021883a 	mov	r16,r2
  80bad8:	5009883a 	mov	r4,r10
  80badc:	080ad7c0 	call	80ad7c <__mulsi3>
  80bae0:	d9c00517 	ldw	r7,20(sp)
  80bae4:	da400317 	ldw	r9,12(sp)
  80bae8:	d8c00217 	ldw	r3,8(sp)
  80baec:	3808d43a 	srli	r4,r7,16
  80baf0:	1245883a 	add	r2,r2,r9
  80baf4:	da000417 	ldw	r8,16(sp)
  80baf8:	2085883a 	add	r2,r4,r2
  80bafc:	1240022e 	bgeu	r2,r9,80bb08 <__divdf3+0x4b8>
  80bb00:	01000074 	movhi	r4,1
  80bb04:	8121883a 	add	r16,r16,r4
  80bb08:	1008d43a 	srli	r4,r2,16
  80bb0c:	1004943a 	slli	r2,r2,16
  80bb10:	39ffffcc 	andi	r7,r7,65535
  80bb14:	2409883a 	add	r4,r4,r16
  80bb18:	11c5883a 	add	r2,r2,r7
  80bb1c:	4100bb36 	bltu	r8,r4,80be0c <__divdf3+0x7bc>
  80bb20:	4100d726 	beq	r8,r4,80be80 <__divdf3+0x830>
  80bb24:	4109c83a 	sub	r4,r8,r4
  80bb28:	a8a1c83a 	sub	r16,r21,r2
  80bb2c:	ac2b803a 	cmpltu	r21,r21,r16
  80bb30:	256bc83a 	sub	r21,r4,r21
  80bb34:	b540d926 	beq	r22,r21,80be9c <__divdf3+0x84c>
  80bb38:	a00b883a 	mov	r5,r20
  80bb3c:	a809883a 	mov	r4,r21
  80bb40:	d8c00215 	stw	r3,8(sp)
  80bb44:	080acc00 	call	80acc0 <__udivsi3>
  80bb48:	100b883a 	mov	r5,r2
  80bb4c:	9009883a 	mov	r4,r18
  80bb50:	d8800515 	stw	r2,20(sp)
  80bb54:	080ad7c0 	call	80ad7c <__mulsi3>
  80bb58:	a809883a 	mov	r4,r21
  80bb5c:	a00b883a 	mov	r5,r20
  80bb60:	d8800415 	stw	r2,16(sp)
  80bb64:	080ad240 	call	80ad24 <__umodsi3>
  80bb68:	1004943a 	slli	r2,r2,16
  80bb6c:	8008d43a 	srli	r4,r16,16
  80bb70:	da000417 	ldw	r8,16(sp)
  80bb74:	d8c00217 	ldw	r3,8(sp)
  80bb78:	2084b03a 	or	r2,r4,r2
  80bb7c:	d9c00517 	ldw	r7,20(sp)
  80bb80:	1200062e 	bgeu	r2,r8,80bb9c <__divdf3+0x54c>
  80bb84:	1585883a 	add	r2,r2,r22
  80bb88:	393fffc4 	addi	r4,r7,-1
  80bb8c:	1580c536 	bltu	r2,r22,80bea4 <__divdf3+0x854>
  80bb90:	1200c42e 	bgeu	r2,r8,80bea4 <__divdf3+0x854>
  80bb94:	39ffff84 	addi	r7,r7,-2
  80bb98:	1585883a 	add	r2,r2,r22
  80bb9c:	122bc83a 	sub	r21,r2,r8
  80bba0:	a00b883a 	mov	r5,r20
  80bba4:	a809883a 	mov	r4,r21
  80bba8:	d8c00215 	stw	r3,8(sp)
  80bbac:	d9c00515 	stw	r7,20(sp)
  80bbb0:	080acc00 	call	80acc0 <__udivsi3>
  80bbb4:	9009883a 	mov	r4,r18
  80bbb8:	100b883a 	mov	r5,r2
  80bbbc:	d8800415 	stw	r2,16(sp)
  80bbc0:	080ad7c0 	call	80ad7c <__mulsi3>
  80bbc4:	a809883a 	mov	r4,r21
  80bbc8:	a00b883a 	mov	r5,r20
  80bbcc:	1025883a 	mov	r18,r2
  80bbd0:	080ad240 	call	80ad24 <__umodsi3>
  80bbd4:	1004943a 	slli	r2,r2,16
  80bbd8:	813fffcc 	andi	r4,r16,65535
  80bbdc:	d8c00217 	ldw	r3,8(sp)
  80bbe0:	20a0b03a 	or	r16,r4,r2
  80bbe4:	d9c00517 	ldw	r7,20(sp)
  80bbe8:	da000417 	ldw	r8,16(sp)
  80bbec:	8480062e 	bgeu	r16,r18,80bc08 <__divdf3+0x5b8>
  80bbf0:	85a1883a 	add	r16,r16,r22
  80bbf4:	40bfffc4 	addi	r2,r8,-1
  80bbf8:	8580ac36 	bltu	r16,r22,80beac <__divdf3+0x85c>
  80bbfc:	8480ab2e 	bgeu	r16,r18,80beac <__divdf3+0x85c>
  80bc00:	423fff84 	addi	r8,r8,-2
  80bc04:	85a1883a 	add	r16,r16,r22
  80bc08:	3804943a 	slli	r2,r7,16
  80bc0c:	84a1c83a 	sub	r16,r16,r18
  80bc10:	e009883a 	mov	r4,fp
  80bc14:	1228b03a 	or	r20,r2,r8
  80bc18:	a1ffffcc 	andi	r7,r20,65535
  80bc1c:	a024d43a 	srli	r18,r20,16
  80bc20:	380b883a 	mov	r5,r7
  80bc24:	d8c00215 	stw	r3,8(sp)
  80bc28:	d9c00515 	stw	r7,20(sp)
  80bc2c:	080ad7c0 	call	80ad7c <__mulsi3>
  80bc30:	900b883a 	mov	r5,r18
  80bc34:	e009883a 	mov	r4,fp
  80bc38:	102b883a 	mov	r21,r2
  80bc3c:	080ad7c0 	call	80ad7c <__mulsi3>
  80bc40:	900b883a 	mov	r5,r18
  80bc44:	b809883a 	mov	r4,r23
  80bc48:	1039883a 	mov	fp,r2
  80bc4c:	080ad7c0 	call	80ad7c <__mulsi3>
  80bc50:	d9c00517 	ldw	r7,20(sp)
  80bc54:	b80b883a 	mov	r5,r23
  80bc58:	1025883a 	mov	r18,r2
  80bc5c:	3809883a 	mov	r4,r7
  80bc60:	080ad7c0 	call	80ad7c <__mulsi3>
  80bc64:	a808d43a 	srli	r4,r21,16
  80bc68:	1705883a 	add	r2,r2,fp
  80bc6c:	d8c00217 	ldw	r3,8(sp)
  80bc70:	2085883a 	add	r2,r4,r2
  80bc74:	1700022e 	bgeu	r2,fp,80bc80 <__divdf3+0x630>
  80bc78:	01000074 	movhi	r4,1
  80bc7c:	9125883a 	add	r18,r18,r4
  80bc80:	1008d43a 	srli	r4,r2,16
  80bc84:	1004943a 	slli	r2,r2,16
  80bc88:	ad7fffcc 	andi	r21,r21,65535
  80bc8c:	2489883a 	add	r4,r4,r18
  80bc90:	1545883a 	add	r2,r2,r21
  80bc94:	81003836 	bltu	r16,r4,80bd78 <__divdf3+0x728>
  80bc98:	81003626 	beq	r16,r4,80bd74 <__divdf3+0x724>
  80bc9c:	a5000054 	ori	r20,r20,1
  80bca0:	1880ffc4 	addi	r2,r3,1023
  80bca4:	00bf2e0e 	bge	zero,r2,80b960 <__alt_mem_epcs_flash_controller_0+0xff802960>
  80bca8:	a10001cc 	andi	r4,r20,7
  80bcac:	20000726 	beq	r4,zero,80bccc <__divdf3+0x67c>
  80bcb0:	a10003cc 	andi	r4,r20,15
  80bcb4:	01400104 	movi	r5,4
  80bcb8:	21400426 	beq	r4,r5,80bccc <__divdf3+0x67c>
  80bcbc:	a149883a 	add	r4,r20,r5
  80bcc0:	2529803a 	cmpltu	r20,r4,r20
  80bcc4:	8d23883a 	add	r17,r17,r20
  80bcc8:	2029883a 	mov	r20,r4
  80bccc:	8900402c 	andhi	r4,r17,256
  80bcd0:	20000426 	beq	r4,zero,80bce4 <__divdf3+0x694>
  80bcd4:	18810004 	addi	r2,r3,1024
  80bcd8:	00ffc034 	movhi	r3,65280
  80bcdc:	18ffffc4 	addi	r3,r3,-1
  80bce0:	88e2703a 	and	r17,r17,r3
  80bce4:	00c1ff84 	movi	r3,2046
  80bce8:	18beb416 	blt	r3,r2,80b7bc <__alt_mem_epcs_flash_controller_0+0xff8027bc>
  80bcec:	a028d0fa 	srli	r20,r20,3
  80bcf0:	882a977a 	slli	r21,r17,29
  80bcf4:	8820927a 	slli	r16,r17,9
  80bcf8:	1081ffcc 	andi	r2,r2,2047
  80bcfc:	ad2ab03a 	or	r21,r21,r20
  80bd00:	8020d33a 	srli	r16,r16,12
  80bd04:	9900004c 	andi	r4,r19,1
  80bd08:	003eb006 	br	80b7cc <__alt_mem_epcs_flash_controller_0+0xff8027cc>
  80bd0c:	8080022c 	andhi	r2,r16,8
  80bd10:	10001226 	beq	r2,zero,80bd5c <__divdf3+0x70c>
  80bd14:	8880022c 	andhi	r2,r17,8
  80bd18:	1000101e 	bne	r2,zero,80bd5c <__divdf3+0x70c>
  80bd1c:	00800434 	movhi	r2,16
  80bd20:	8c000234 	orhi	r16,r17,8
  80bd24:	10bfffc4 	addi	r2,r2,-1
  80bd28:	b809883a 	mov	r4,r23
  80bd2c:	80a0703a 	and	r16,r16,r2
  80bd30:	a02b883a 	mov	r21,r20
  80bd34:	003f0806 	br	80b958 <__alt_mem_epcs_flash_controller_0+0xff802958>
  80bd38:	008000c4 	movi	r2,3
  80bd3c:	3880b126 	beq	r7,r2,80c004 <__divdf3+0x9b4>
  80bd40:	00800044 	movi	r2,1
  80bd44:	38805b1e 	bne	r7,r2,80beb4 <__divdf3+0x864>
  80bd48:	e009883a 	mov	r4,fp
  80bd4c:	0005883a 	mov	r2,zero
  80bd50:	0021883a 	mov	r16,zero
  80bd54:	002b883a 	mov	r21,zero
  80bd58:	003e9c06 	br	80b7cc <__alt_mem_epcs_flash_controller_0+0xff8027cc>
  80bd5c:	00800434 	movhi	r2,16
  80bd60:	84000234 	orhi	r16,r16,8
  80bd64:	10bfffc4 	addi	r2,r2,-1
  80bd68:	b009883a 	mov	r4,r22
  80bd6c:	80a0703a 	and	r16,r16,r2
  80bd70:	003ef906 	br	80b958 <__alt_mem_epcs_flash_controller_0+0xff802958>
  80bd74:	103fca26 	beq	r2,zero,80bca0 <__alt_mem_epcs_flash_controller_0+0xff802ca0>
  80bd78:	b421883a 	add	r16,r22,r16
  80bd7c:	a17fffc4 	addi	r5,r20,-1
  80bd80:	8580422e 	bgeu	r16,r22,80be8c <__divdf3+0x83c>
  80bd84:	2829883a 	mov	r20,r5
  80bd88:	813fc41e 	bne	r16,r4,80bc9c <__alt_mem_epcs_flash_controller_0+0xff802c9c>
  80bd8c:	d9800017 	ldw	r6,0(sp)
  80bd90:	30bfc21e 	bne	r6,r2,80bc9c <__alt_mem_epcs_flash_controller_0+0xff802c9c>
  80bd94:	003fc206 	br	80bca0 <__alt_mem_epcs_flash_controller_0+0xff802ca0>
  80bd98:	143ff604 	addi	r16,r2,-40
  80bd9c:	8c20983a 	sll	r16,r17,r16
  80bda0:	002b883a 	mov	r21,zero
  80bda4:	003eb406 	br	80b878 <__alt_mem_epcs_flash_controller_0+0xff802878>
  80bda8:	d9800215 	stw	r6,8(sp)
  80bdac:	d9c00515 	stw	r7,20(sp)
  80bdb0:	da000415 	stw	r8,16(sp)
  80bdb4:	080d5e40 	call	80d5e4 <__clzsi2>
  80bdb8:	10800804 	addi	r2,r2,32
  80bdbc:	da000417 	ldw	r8,16(sp)
  80bdc0:	d9c00517 	ldw	r7,20(sp)
  80bdc4:	d9800217 	ldw	r6,8(sp)
  80bdc8:	003ea106 	br	80b850 <__alt_mem_epcs_flash_controller_0+0xff802850>
  80bdcc:	147ff604 	addi	r17,r2,-40
  80bdd0:	3462983a 	sll	r17,r6,r17
  80bdd4:	0029883a 	mov	r20,zero
  80bdd8:	003ec906 	br	80b900 <__alt_mem_epcs_flash_controller_0+0xff802900>
  80bddc:	3009883a 	mov	r4,r6
  80bde0:	d9400115 	stw	r5,4(sp)
  80bde4:	d9800215 	stw	r6,8(sp)
  80bde8:	da000415 	stw	r8,16(sp)
  80bdec:	da400315 	stw	r9,12(sp)
  80bdf0:	080d5e40 	call	80d5e4 <__clzsi2>
  80bdf4:	10800804 	addi	r2,r2,32
  80bdf8:	da400317 	ldw	r9,12(sp)
  80bdfc:	da000417 	ldw	r8,16(sp)
  80be00:	d9800217 	ldw	r6,8(sp)
  80be04:	d9400117 	ldw	r5,4(sp)
  80be08:	003eb306 	br	80b8d8 <__alt_mem_epcs_flash_controller_0+0xff8028d8>
  80be0c:	d9800017 	ldw	r6,0(sp)
  80be10:	a9ab883a 	add	r21,r21,r6
  80be14:	a98b803a 	cmpltu	r5,r21,r6
  80be18:	2d8b883a 	add	r5,r5,r22
  80be1c:	2a11883a 	add	r8,r5,r8
  80be20:	897fffc4 	addi	r5,r17,-1
  80be24:	b2000c2e 	bgeu	r22,r8,80be58 <__divdf3+0x808>
  80be28:	41003f36 	bltu	r8,r4,80bf28 <__divdf3+0x8d8>
  80be2c:	22006c26 	beq	r4,r8,80bfe0 <__divdf3+0x990>
  80be30:	4109c83a 	sub	r4,r8,r4
  80be34:	2823883a 	mov	r17,r5
  80be38:	003f3b06 	br	80bb28 <__alt_mem_epcs_flash_controller_0+0xff802b28>
  80be3c:	ad3ed336 	bltu	r21,r20,80b98c <__alt_mem_epcs_flash_controller_0+0xff80298c>
  80be40:	a804d07a 	srli	r2,r21,1
  80be44:	802e97fa 	slli	r23,r16,31
  80be48:	a82a97fa 	slli	r21,r21,31
  80be4c:	8020d07a 	srli	r16,r16,1
  80be50:	b8aeb03a 	or	r23,r23,r2
  80be54:	003ed006 	br	80b998 <__alt_mem_epcs_flash_controller_0+0xff802998>
  80be58:	b23ff51e 	bne	r22,r8,80be30 <__alt_mem_epcs_flash_controller_0+0xff802e30>
  80be5c:	d9800017 	ldw	r6,0(sp)
  80be60:	a9bff12e 	bgeu	r21,r6,80be28 <__alt_mem_epcs_flash_controller_0+0xff802e28>
  80be64:	b109c83a 	sub	r4,r22,r4
  80be68:	2823883a 	mov	r17,r5
  80be6c:	003f2e06 	br	80bb28 <__alt_mem_epcs_flash_controller_0+0xff802b28>
  80be70:	2021883a 	mov	r16,r4
  80be74:	003eff06 	br	80ba74 <__alt_mem_epcs_flash_controller_0+0xff802a74>
  80be78:	2023883a 	mov	r17,r4
  80be7c:	003ee406 	br	80ba10 <__alt_mem_epcs_flash_controller_0+0xff802a10>
  80be80:	a8bfe236 	bltu	r21,r2,80be0c <__alt_mem_epcs_flash_controller_0+0xff802e0c>
  80be84:	0009883a 	mov	r4,zero
  80be88:	003f2706 	br	80bb28 <__alt_mem_epcs_flash_controller_0+0xff802b28>
  80be8c:	81002d36 	bltu	r16,r4,80bf44 <__divdf3+0x8f4>
  80be90:	24005626 	beq	r4,r16,80bfec <__divdf3+0x99c>
  80be94:	2829883a 	mov	r20,r5
  80be98:	003f8006 	br	80bc9c <__alt_mem_epcs_flash_controller_0+0xff802c9c>
  80be9c:	053fffc4 	movi	r20,-1
  80bea0:	003f7f06 	br	80bca0 <__alt_mem_epcs_flash_controller_0+0xff802ca0>
  80bea4:	200f883a 	mov	r7,r4
  80bea8:	003f3c06 	br	80bb9c <__alt_mem_epcs_flash_controller_0+0xff802b9c>
  80beac:	1011883a 	mov	r8,r2
  80beb0:	003f5506 	br	80bc08 <__alt_mem_epcs_flash_controller_0+0xff802c08>
  80beb4:	e027883a 	mov	r19,fp
  80beb8:	003f7906 	br	80bca0 <__alt_mem_epcs_flash_controller_0+0xff802ca0>
  80bebc:	010007c4 	movi	r4,31
  80bec0:	20c02816 	blt	r4,r3,80bf64 <__divdf3+0x914>
  80bec4:	00800804 	movi	r2,32
  80bec8:	10c5c83a 	sub	r2,r2,r3
  80becc:	888a983a 	sll	r5,r17,r2
  80bed0:	a0c8d83a 	srl	r4,r20,r3
  80bed4:	a084983a 	sll	r2,r20,r2
  80bed8:	88e2d83a 	srl	r17,r17,r3
  80bedc:	2906b03a 	or	r3,r5,r4
  80bee0:	1004c03a 	cmpne	r2,r2,zero
  80bee4:	1886b03a 	or	r3,r3,r2
  80bee8:	188001cc 	andi	r2,r3,7
  80beec:	10000726 	beq	r2,zero,80bf0c <__divdf3+0x8bc>
  80bef0:	188003cc 	andi	r2,r3,15
  80bef4:	01000104 	movi	r4,4
  80bef8:	11000426 	beq	r2,r4,80bf0c <__divdf3+0x8bc>
  80befc:	1805883a 	mov	r2,r3
  80bf00:	10c00104 	addi	r3,r2,4
  80bf04:	1885803a 	cmpltu	r2,r3,r2
  80bf08:	88a3883a 	add	r17,r17,r2
  80bf0c:	8880202c 	andhi	r2,r17,128
  80bf10:	10002926 	beq	r2,zero,80bfb8 <__divdf3+0x968>
  80bf14:	9900004c 	andi	r4,r19,1
  80bf18:	00800044 	movi	r2,1
  80bf1c:	0021883a 	mov	r16,zero
  80bf20:	002b883a 	mov	r21,zero
  80bf24:	003e2906 	br	80b7cc <__alt_mem_epcs_flash_controller_0+0xff8027cc>
  80bf28:	d9800017 	ldw	r6,0(sp)
  80bf2c:	8c7fff84 	addi	r17,r17,-2
  80bf30:	a9ab883a 	add	r21,r21,r6
  80bf34:	a98b803a 	cmpltu	r5,r21,r6
  80bf38:	2d8b883a 	add	r5,r5,r22
  80bf3c:	2a11883a 	add	r8,r5,r8
  80bf40:	003ef806 	br	80bb24 <__alt_mem_epcs_flash_controller_0+0xff802b24>
  80bf44:	d9800017 	ldw	r6,0(sp)
  80bf48:	318f883a 	add	r7,r6,r6
  80bf4c:	398b803a 	cmpltu	r5,r7,r6
  80bf50:	2d8d883a 	add	r6,r5,r22
  80bf54:	81a1883a 	add	r16,r16,r6
  80bf58:	a17fff84 	addi	r5,r20,-2
  80bf5c:	d9c00015 	stw	r7,0(sp)
  80bf60:	003f8806 	br	80bd84 <__alt_mem_epcs_flash_controller_0+0xff802d84>
  80bf64:	013ff844 	movi	r4,-31
  80bf68:	2085c83a 	sub	r2,r4,r2
  80bf6c:	8888d83a 	srl	r4,r17,r2
  80bf70:	00800804 	movi	r2,32
  80bf74:	18802126 	beq	r3,r2,80bffc <__divdf3+0x9ac>
  80bf78:	04001004 	movi	r16,64
  80bf7c:	80c7c83a 	sub	r3,r16,r3
  80bf80:	88e0983a 	sll	r16,r17,r3
  80bf84:	8504b03a 	or	r2,r16,r20
  80bf88:	1004c03a 	cmpne	r2,r2,zero
  80bf8c:	2084b03a 	or	r2,r4,r2
  80bf90:	144001cc 	andi	r17,r2,7
  80bf94:	88000d1e 	bne	r17,zero,80bfcc <__divdf3+0x97c>
  80bf98:	0021883a 	mov	r16,zero
  80bf9c:	102ad0fa 	srli	r21,r2,3
  80bfa0:	9900004c 	andi	r4,r19,1
  80bfa4:	0005883a 	mov	r2,zero
  80bfa8:	ac6ab03a 	or	r21,r21,r17
  80bfac:	003e0706 	br	80b7cc <__alt_mem_epcs_flash_controller_0+0xff8027cc>
  80bfb0:	1007883a 	mov	r3,r2
  80bfb4:	0023883a 	mov	r17,zero
  80bfb8:	8820927a 	slli	r16,r17,9
  80bfbc:	1805883a 	mov	r2,r3
  80bfc0:	8822977a 	slli	r17,r17,29
  80bfc4:	8020d33a 	srli	r16,r16,12
  80bfc8:	003ff406 	br	80bf9c <__alt_mem_epcs_flash_controller_0+0xff802f9c>
  80bfcc:	10c003cc 	andi	r3,r2,15
  80bfd0:	01000104 	movi	r4,4
  80bfd4:	193ff626 	beq	r3,r4,80bfb0 <__alt_mem_epcs_flash_controller_0+0xff802fb0>
  80bfd8:	0023883a 	mov	r17,zero
  80bfdc:	003fc806 	br	80bf00 <__alt_mem_epcs_flash_controller_0+0xff802f00>
  80bfe0:	a8bfd136 	bltu	r21,r2,80bf28 <__alt_mem_epcs_flash_controller_0+0xff802f28>
  80bfe4:	2823883a 	mov	r17,r5
  80bfe8:	003fa606 	br	80be84 <__alt_mem_epcs_flash_controller_0+0xff802e84>
  80bfec:	d9800017 	ldw	r6,0(sp)
  80bff0:	30bfd436 	bltu	r6,r2,80bf44 <__alt_mem_epcs_flash_controller_0+0xff802f44>
  80bff4:	2829883a 	mov	r20,r5
  80bff8:	003f6406 	br	80bd8c <__alt_mem_epcs_flash_controller_0+0xff802d8c>
  80bffc:	0021883a 	mov	r16,zero
  80c000:	003fe006 	br	80bf84 <__alt_mem_epcs_flash_controller_0+0xff802f84>
  80c004:	00800434 	movhi	r2,16
  80c008:	8c000234 	orhi	r16,r17,8
  80c00c:	10bfffc4 	addi	r2,r2,-1
  80c010:	e009883a 	mov	r4,fp
  80c014:	80a0703a 	and	r16,r16,r2
  80c018:	a02b883a 	mov	r21,r20
  80c01c:	003e4e06 	br	80b958 <__alt_mem_epcs_flash_controller_0+0xff802958>

0080c020 <__eqdf2>:
  80c020:	2804d53a 	srli	r2,r5,20
  80c024:	3806d53a 	srli	r3,r7,20
  80c028:	02000434 	movhi	r8,16
  80c02c:	423fffc4 	addi	r8,r8,-1
  80c030:	1081ffcc 	andi	r2,r2,2047
  80c034:	0281ffc4 	movi	r10,2047
  80c038:	2a12703a 	and	r9,r5,r8
  80c03c:	18c1ffcc 	andi	r3,r3,2047
  80c040:	3a10703a 	and	r8,r7,r8
  80c044:	280ad7fa 	srli	r5,r5,31
  80c048:	380ed7fa 	srli	r7,r7,31
  80c04c:	12801026 	beq	r2,r10,80c090 <__eqdf2+0x70>
  80c050:	0281ffc4 	movi	r10,2047
  80c054:	1a800a26 	beq	r3,r10,80c080 <__eqdf2+0x60>
  80c058:	10c00226 	beq	r2,r3,80c064 <__eqdf2+0x44>
  80c05c:	00800044 	movi	r2,1
  80c060:	f800283a 	ret
  80c064:	4a3ffd1e 	bne	r9,r8,80c05c <__alt_mem_epcs_flash_controller_0+0xff80305c>
  80c068:	21bffc1e 	bne	r4,r6,80c05c <__alt_mem_epcs_flash_controller_0+0xff80305c>
  80c06c:	29c00c26 	beq	r5,r7,80c0a0 <__eqdf2+0x80>
  80c070:	103ffa1e 	bne	r2,zero,80c05c <__alt_mem_epcs_flash_controller_0+0xff80305c>
  80c074:	2244b03a 	or	r2,r4,r9
  80c078:	1004c03a 	cmpne	r2,r2,zero
  80c07c:	f800283a 	ret
  80c080:	3214b03a 	or	r10,r6,r8
  80c084:	503ff426 	beq	r10,zero,80c058 <__alt_mem_epcs_flash_controller_0+0xff803058>
  80c088:	00800044 	movi	r2,1
  80c08c:	f800283a 	ret
  80c090:	2254b03a 	or	r10,r4,r9
  80c094:	503fee26 	beq	r10,zero,80c050 <__alt_mem_epcs_flash_controller_0+0xff803050>
  80c098:	00800044 	movi	r2,1
  80c09c:	f800283a 	ret
  80c0a0:	0005883a 	mov	r2,zero
  80c0a4:	f800283a 	ret

0080c0a8 <__gedf2>:
  80c0a8:	2804d53a 	srli	r2,r5,20
  80c0ac:	3806d53a 	srli	r3,r7,20
  80c0b0:	02000434 	movhi	r8,16
  80c0b4:	423fffc4 	addi	r8,r8,-1
  80c0b8:	1081ffcc 	andi	r2,r2,2047
  80c0bc:	0241ffc4 	movi	r9,2047
  80c0c0:	2a14703a 	and	r10,r5,r8
  80c0c4:	18c1ffcc 	andi	r3,r3,2047
  80c0c8:	3a10703a 	and	r8,r7,r8
  80c0cc:	280ad7fa 	srli	r5,r5,31
  80c0d0:	380ed7fa 	srli	r7,r7,31
  80c0d4:	12401d26 	beq	r2,r9,80c14c <__gedf2+0xa4>
  80c0d8:	0241ffc4 	movi	r9,2047
  80c0dc:	1a401226 	beq	r3,r9,80c128 <__gedf2+0x80>
  80c0e0:	1000081e 	bne	r2,zero,80c104 <__gedf2+0x5c>
  80c0e4:	2296b03a 	or	r11,r4,r10
  80c0e8:	5813003a 	cmpeq	r9,r11,zero
  80c0ec:	1800091e 	bne	r3,zero,80c114 <__gedf2+0x6c>
  80c0f0:	3218b03a 	or	r12,r6,r8
  80c0f4:	6000071e 	bne	r12,zero,80c114 <__gedf2+0x6c>
  80c0f8:	0005883a 	mov	r2,zero
  80c0fc:	5800101e 	bne	r11,zero,80c140 <__gedf2+0x98>
  80c100:	f800283a 	ret
  80c104:	18000c1e 	bne	r3,zero,80c138 <__gedf2+0x90>
  80c108:	3212b03a 	or	r9,r6,r8
  80c10c:	48000c26 	beq	r9,zero,80c140 <__gedf2+0x98>
  80c110:	0013883a 	mov	r9,zero
  80c114:	39c03fcc 	andi	r7,r7,255
  80c118:	48000826 	beq	r9,zero,80c13c <__gedf2+0x94>
  80c11c:	38000926 	beq	r7,zero,80c144 <__gedf2+0x9c>
  80c120:	00800044 	movi	r2,1
  80c124:	f800283a 	ret
  80c128:	3212b03a 	or	r9,r6,r8
  80c12c:	483fec26 	beq	r9,zero,80c0e0 <__alt_mem_epcs_flash_controller_0+0xff8030e0>
  80c130:	00bfff84 	movi	r2,-2
  80c134:	f800283a 	ret
  80c138:	39c03fcc 	andi	r7,r7,255
  80c13c:	29c00626 	beq	r5,r7,80c158 <__gedf2+0xb0>
  80c140:	283ff726 	beq	r5,zero,80c120 <__alt_mem_epcs_flash_controller_0+0xff803120>
  80c144:	00bfffc4 	movi	r2,-1
  80c148:	f800283a 	ret
  80c14c:	2292b03a 	or	r9,r4,r10
  80c150:	483fe126 	beq	r9,zero,80c0d8 <__alt_mem_epcs_flash_controller_0+0xff8030d8>
  80c154:	003ff606 	br	80c130 <__alt_mem_epcs_flash_controller_0+0xff803130>
  80c158:	18bff916 	blt	r3,r2,80c140 <__alt_mem_epcs_flash_controller_0+0xff803140>
  80c15c:	10c00316 	blt	r2,r3,80c16c <__gedf2+0xc4>
  80c160:	42bff736 	bltu	r8,r10,80c140 <__alt_mem_epcs_flash_controller_0+0xff803140>
  80c164:	52000326 	beq	r10,r8,80c174 <__gedf2+0xcc>
  80c168:	5200042e 	bgeu	r10,r8,80c17c <__gedf2+0xd4>
  80c16c:	283fec1e 	bne	r5,zero,80c120 <__alt_mem_epcs_flash_controller_0+0xff803120>
  80c170:	003ff406 	br	80c144 <__alt_mem_epcs_flash_controller_0+0xff803144>
  80c174:	313ff236 	bltu	r6,r4,80c140 <__alt_mem_epcs_flash_controller_0+0xff803140>
  80c178:	21bffc36 	bltu	r4,r6,80c16c <__alt_mem_epcs_flash_controller_0+0xff80316c>
  80c17c:	0005883a 	mov	r2,zero
  80c180:	f800283a 	ret

0080c184 <__ledf2>:
  80c184:	2804d53a 	srli	r2,r5,20
  80c188:	3810d53a 	srli	r8,r7,20
  80c18c:	00c00434 	movhi	r3,16
  80c190:	18ffffc4 	addi	r3,r3,-1
  80c194:	1081ffcc 	andi	r2,r2,2047
  80c198:	0241ffc4 	movi	r9,2047
  80c19c:	28d4703a 	and	r10,r5,r3
  80c1a0:	4201ffcc 	andi	r8,r8,2047
  80c1a4:	38c6703a 	and	r3,r7,r3
  80c1a8:	280ad7fa 	srli	r5,r5,31
  80c1ac:	380ed7fa 	srli	r7,r7,31
  80c1b0:	12401f26 	beq	r2,r9,80c230 <__ledf2+0xac>
  80c1b4:	0241ffc4 	movi	r9,2047
  80c1b8:	42401426 	beq	r8,r9,80c20c <__ledf2+0x88>
  80c1bc:	1000091e 	bne	r2,zero,80c1e4 <__ledf2+0x60>
  80c1c0:	2296b03a 	or	r11,r4,r10
  80c1c4:	5813003a 	cmpeq	r9,r11,zero
  80c1c8:	29403fcc 	andi	r5,r5,255
  80c1cc:	40000a1e 	bne	r8,zero,80c1f8 <__ledf2+0x74>
  80c1d0:	30d8b03a 	or	r12,r6,r3
  80c1d4:	6000081e 	bne	r12,zero,80c1f8 <__ledf2+0x74>
  80c1d8:	0005883a 	mov	r2,zero
  80c1dc:	5800111e 	bne	r11,zero,80c224 <__ledf2+0xa0>
  80c1e0:	f800283a 	ret
  80c1e4:	29403fcc 	andi	r5,r5,255
  80c1e8:	40000c1e 	bne	r8,zero,80c21c <__ledf2+0x98>
  80c1ec:	30d2b03a 	or	r9,r6,r3
  80c1f0:	48000c26 	beq	r9,zero,80c224 <__ledf2+0xa0>
  80c1f4:	0013883a 	mov	r9,zero
  80c1f8:	39c03fcc 	andi	r7,r7,255
  80c1fc:	48000826 	beq	r9,zero,80c220 <__ledf2+0x9c>
  80c200:	38001126 	beq	r7,zero,80c248 <__ledf2+0xc4>
  80c204:	00800044 	movi	r2,1
  80c208:	f800283a 	ret
  80c20c:	30d2b03a 	or	r9,r6,r3
  80c210:	483fea26 	beq	r9,zero,80c1bc <__alt_mem_epcs_flash_controller_0+0xff8031bc>
  80c214:	00800084 	movi	r2,2
  80c218:	f800283a 	ret
  80c21c:	39c03fcc 	andi	r7,r7,255
  80c220:	39400726 	beq	r7,r5,80c240 <__ledf2+0xbc>
  80c224:	2800081e 	bne	r5,zero,80c248 <__ledf2+0xc4>
  80c228:	00800044 	movi	r2,1
  80c22c:	f800283a 	ret
  80c230:	2292b03a 	or	r9,r4,r10
  80c234:	483fdf26 	beq	r9,zero,80c1b4 <__alt_mem_epcs_flash_controller_0+0xff8031b4>
  80c238:	00800084 	movi	r2,2
  80c23c:	f800283a 	ret
  80c240:	4080030e 	bge	r8,r2,80c250 <__ledf2+0xcc>
  80c244:	383fef26 	beq	r7,zero,80c204 <__alt_mem_epcs_flash_controller_0+0xff803204>
  80c248:	00bfffc4 	movi	r2,-1
  80c24c:	f800283a 	ret
  80c250:	123feb16 	blt	r2,r8,80c200 <__alt_mem_epcs_flash_controller_0+0xff803200>
  80c254:	1abff336 	bltu	r3,r10,80c224 <__alt_mem_epcs_flash_controller_0+0xff803224>
  80c258:	50c00326 	beq	r10,r3,80c268 <__ledf2+0xe4>
  80c25c:	50c0042e 	bgeu	r10,r3,80c270 <__ledf2+0xec>
  80c260:	283fe81e 	bne	r5,zero,80c204 <__alt_mem_epcs_flash_controller_0+0xff803204>
  80c264:	003ff806 	br	80c248 <__alt_mem_epcs_flash_controller_0+0xff803248>
  80c268:	313fee36 	bltu	r6,r4,80c224 <__alt_mem_epcs_flash_controller_0+0xff803224>
  80c26c:	21bffc36 	bltu	r4,r6,80c260 <__alt_mem_epcs_flash_controller_0+0xff803260>
  80c270:	0005883a 	mov	r2,zero
  80c274:	f800283a 	ret

0080c278 <__muldf3>:
  80c278:	deffee04 	addi	sp,sp,-72
  80c27c:	dd000c15 	stw	r20,48(sp)
  80c280:	2828d53a 	srli	r20,r5,20
  80c284:	ddc00f15 	stw	r23,60(sp)
  80c288:	282ed7fa 	srli	r23,r5,31
  80c28c:	dc000815 	stw	r16,32(sp)
  80c290:	04000434 	movhi	r16,16
  80c294:	dcc00b15 	stw	r19,44(sp)
  80c298:	843fffc4 	addi	r16,r16,-1
  80c29c:	dfc01115 	stw	ra,68(sp)
  80c2a0:	df001015 	stw	fp,64(sp)
  80c2a4:	dd800e15 	stw	r22,56(sp)
  80c2a8:	dd400d15 	stw	r21,52(sp)
  80c2ac:	dc800a15 	stw	r18,40(sp)
  80c2b0:	dc400915 	stw	r17,36(sp)
  80c2b4:	a501ffcc 	andi	r20,r20,2047
  80c2b8:	2c20703a 	and	r16,r5,r16
  80c2bc:	b827883a 	mov	r19,r23
  80c2c0:	ba403fcc 	andi	r9,r23,255
  80c2c4:	a0006026 	beq	r20,zero,80c448 <__muldf3+0x1d0>
  80c2c8:	0081ffc4 	movi	r2,2047
  80c2cc:	202d883a 	mov	r22,r4
  80c2d0:	a0803626 	beq	r20,r2,80c3ac <__muldf3+0x134>
  80c2d4:	84000434 	orhi	r16,r16,16
  80c2d8:	200ad77a 	srli	r5,r4,29
  80c2dc:	800490fa 	slli	r2,r16,3
  80c2e0:	202c90fa 	slli	r22,r4,3
  80c2e4:	a53f0044 	addi	r20,r20,-1023
  80c2e8:	28a0b03a 	or	r16,r5,r2
  80c2ec:	002b883a 	mov	r21,zero
  80c2f0:	000b883a 	mov	r5,zero
  80c2f4:	3804d53a 	srli	r2,r7,20
  80c2f8:	3838d7fa 	srli	fp,r7,31
  80c2fc:	04400434 	movhi	r17,16
  80c300:	8c7fffc4 	addi	r17,r17,-1
  80c304:	1081ffcc 	andi	r2,r2,2047
  80c308:	3025883a 	mov	r18,r6
  80c30c:	3c62703a 	and	r17,r7,r17
  80c310:	e2803fcc 	andi	r10,fp,255
  80c314:	10006d26 	beq	r2,zero,80c4cc <__muldf3+0x254>
  80c318:	00c1ffc4 	movi	r3,2047
  80c31c:	10c06526 	beq	r2,r3,80c4b4 <__muldf3+0x23c>
  80c320:	8c400434 	orhi	r17,r17,16
  80c324:	300ed77a 	srli	r7,r6,29
  80c328:	880690fa 	slli	r3,r17,3
  80c32c:	302490fa 	slli	r18,r6,3
  80c330:	10bf0044 	addi	r2,r2,-1023
  80c334:	38e2b03a 	or	r17,r7,r3
  80c338:	000f883a 	mov	r7,zero
  80c33c:	a087883a 	add	r3,r20,r2
  80c340:	010003c4 	movi	r4,15
  80c344:	3d44b03a 	or	r2,r7,r21
  80c348:	e5ccf03a 	xor	r6,fp,r23
  80c34c:	1a000044 	addi	r8,r3,1
  80c350:	20809b36 	bltu	r4,r2,80c5c0 <__muldf3+0x348>
  80c354:	100490ba 	slli	r2,r2,2
  80c358:	01002074 	movhi	r4,129
  80c35c:	2130db04 	addi	r4,r4,-15508
  80c360:	1105883a 	add	r2,r2,r4
  80c364:	10800017 	ldw	r2,0(r2)
  80c368:	1000683a 	jmp	r2
  80c36c:	0080c5c0 	call	80c5c <OSCtxSw_SWITCH_PC+0x80c1c>
  80c370:	0080c3cc 	andi	r2,zero,783
  80c374:	0080c3cc 	andi	r2,zero,783
  80c378:	0080c3c8 	cmpgei	r2,zero,783
  80c37c:	0080c59c 	xori	r2,zero,790
  80c380:	0080c59c 	xori	r2,zero,790
  80c384:	0080c584 	movi	r2,790
  80c388:	0080c3c8 	cmpgei	r2,zero,783
  80c38c:	0080c59c 	xori	r2,zero,790
  80c390:	0080c584 	movi	r2,790
  80c394:	0080c59c 	xori	r2,zero,790
  80c398:	0080c3c8 	cmpgei	r2,zero,783
  80c39c:	0080c5ac 	andhi	r2,zero,790
  80c3a0:	0080c5ac 	andhi	r2,zero,790
  80c3a4:	0080c5ac 	andhi	r2,zero,790
  80c3a8:	0080c90c 	andi	r2,zero,804
  80c3ac:	2404b03a 	or	r2,r4,r16
  80c3b0:	1000711e 	bne	r2,zero,80c578 <__muldf3+0x300>
  80c3b4:	05400204 	movi	r21,8
  80c3b8:	0021883a 	mov	r16,zero
  80c3bc:	002d883a 	mov	r22,zero
  80c3c0:	01400084 	movi	r5,2
  80c3c4:	003fcb06 	br	80c2f4 <__alt_mem_epcs_flash_controller_0+0xff8032f4>
  80c3c8:	500d883a 	mov	r6,r10
  80c3cc:	00800084 	movi	r2,2
  80c3d0:	38805926 	beq	r7,r2,80c538 <__muldf3+0x2c0>
  80c3d4:	008000c4 	movi	r2,3
  80c3d8:	3881bb26 	beq	r7,r2,80cac8 <__muldf3+0x850>
  80c3dc:	00800044 	movi	r2,1
  80c3e0:	3881961e 	bne	r7,r2,80ca3c <__muldf3+0x7c4>
  80c3e4:	3027883a 	mov	r19,r6
  80c3e8:	0005883a 	mov	r2,zero
  80c3ec:	0021883a 	mov	r16,zero
  80c3f0:	002d883a 	mov	r22,zero
  80c3f4:	1004953a 	slli	r2,r2,20
  80c3f8:	98c03fcc 	andi	r3,r19,255
  80c3fc:	04400434 	movhi	r17,16
  80c400:	8c7fffc4 	addi	r17,r17,-1
  80c404:	180697fa 	slli	r3,r3,31
  80c408:	8460703a 	and	r16,r16,r17
  80c40c:	80a0b03a 	or	r16,r16,r2
  80c410:	80c6b03a 	or	r3,r16,r3
  80c414:	b005883a 	mov	r2,r22
  80c418:	dfc01117 	ldw	ra,68(sp)
  80c41c:	df001017 	ldw	fp,64(sp)
  80c420:	ddc00f17 	ldw	r23,60(sp)
  80c424:	dd800e17 	ldw	r22,56(sp)
  80c428:	dd400d17 	ldw	r21,52(sp)
  80c42c:	dd000c17 	ldw	r20,48(sp)
  80c430:	dcc00b17 	ldw	r19,44(sp)
  80c434:	dc800a17 	ldw	r18,40(sp)
  80c438:	dc400917 	ldw	r17,36(sp)
  80c43c:	dc000817 	ldw	r16,32(sp)
  80c440:	dec01204 	addi	sp,sp,72
  80c444:	f800283a 	ret
  80c448:	2404b03a 	or	r2,r4,r16
  80c44c:	202b883a 	mov	r21,r4
  80c450:	10004426 	beq	r2,zero,80c564 <__muldf3+0x2ec>
  80c454:	80015126 	beq	r16,zero,80c99c <__muldf3+0x724>
  80c458:	8009883a 	mov	r4,r16
  80c45c:	d9800715 	stw	r6,28(sp)
  80c460:	d9c00215 	stw	r7,8(sp)
  80c464:	da400415 	stw	r9,16(sp)
  80c468:	080d5e40 	call	80d5e4 <__clzsi2>
  80c46c:	d9800717 	ldw	r6,28(sp)
  80c470:	d9c00217 	ldw	r7,8(sp)
  80c474:	da400417 	ldw	r9,16(sp)
  80c478:	113ffd44 	addi	r4,r2,-11
  80c47c:	00c00704 	movi	r3,28
  80c480:	19014216 	blt	r3,r4,80c98c <__muldf3+0x714>
  80c484:	00c00744 	movi	r3,29
  80c488:	15bffe04 	addi	r22,r2,-8
  80c48c:	1907c83a 	sub	r3,r3,r4
  80c490:	85a0983a 	sll	r16,r16,r22
  80c494:	a8c6d83a 	srl	r3,r21,r3
  80c498:	adac983a 	sll	r22,r21,r22
  80c49c:	1c20b03a 	or	r16,r3,r16
  80c4a0:	1080fcc4 	addi	r2,r2,1011
  80c4a4:	00a9c83a 	sub	r20,zero,r2
  80c4a8:	002b883a 	mov	r21,zero
  80c4ac:	000b883a 	mov	r5,zero
  80c4b0:	003f9006 	br	80c2f4 <__alt_mem_epcs_flash_controller_0+0xff8032f4>
  80c4b4:	3446b03a 	or	r3,r6,r17
  80c4b8:	1800281e 	bne	r3,zero,80c55c <__muldf3+0x2e4>
  80c4bc:	0023883a 	mov	r17,zero
  80c4c0:	0025883a 	mov	r18,zero
  80c4c4:	01c00084 	movi	r7,2
  80c4c8:	003f9c06 	br	80c33c <__alt_mem_epcs_flash_controller_0+0xff80333c>
  80c4cc:	3446b03a 	or	r3,r6,r17
  80c4d0:	18001e26 	beq	r3,zero,80c54c <__muldf3+0x2d4>
  80c4d4:	88012126 	beq	r17,zero,80c95c <__muldf3+0x6e4>
  80c4d8:	8809883a 	mov	r4,r17
  80c4dc:	d9400215 	stw	r5,8(sp)
  80c4e0:	d9800715 	stw	r6,28(sp)
  80c4e4:	da400415 	stw	r9,16(sp)
  80c4e8:	da800315 	stw	r10,12(sp)
  80c4ec:	080d5e40 	call	80d5e4 <__clzsi2>
  80c4f0:	d9400217 	ldw	r5,8(sp)
  80c4f4:	d9800717 	ldw	r6,28(sp)
  80c4f8:	da400417 	ldw	r9,16(sp)
  80c4fc:	da800317 	ldw	r10,12(sp)
  80c500:	113ffd44 	addi	r4,r2,-11
  80c504:	00c00704 	movi	r3,28
  80c508:	19011016 	blt	r3,r4,80c94c <__muldf3+0x6d4>
  80c50c:	00c00744 	movi	r3,29
  80c510:	14bffe04 	addi	r18,r2,-8
  80c514:	1907c83a 	sub	r3,r3,r4
  80c518:	8ca2983a 	sll	r17,r17,r18
  80c51c:	30c6d83a 	srl	r3,r6,r3
  80c520:	34a4983a 	sll	r18,r6,r18
  80c524:	1c62b03a 	or	r17,r3,r17
  80c528:	1080fcc4 	addi	r2,r2,1011
  80c52c:	0085c83a 	sub	r2,zero,r2
  80c530:	000f883a 	mov	r7,zero
  80c534:	003f8106 	br	80c33c <__alt_mem_epcs_flash_controller_0+0xff80333c>
  80c538:	3027883a 	mov	r19,r6
  80c53c:	0081ffc4 	movi	r2,2047
  80c540:	0021883a 	mov	r16,zero
  80c544:	002d883a 	mov	r22,zero
  80c548:	003faa06 	br	80c3f4 <__alt_mem_epcs_flash_controller_0+0xff8033f4>
  80c54c:	0023883a 	mov	r17,zero
  80c550:	0025883a 	mov	r18,zero
  80c554:	01c00044 	movi	r7,1
  80c558:	003f7806 	br	80c33c <__alt_mem_epcs_flash_controller_0+0xff80333c>
  80c55c:	01c000c4 	movi	r7,3
  80c560:	003f7606 	br	80c33c <__alt_mem_epcs_flash_controller_0+0xff80333c>
  80c564:	05400104 	movi	r21,4
  80c568:	0021883a 	mov	r16,zero
  80c56c:	002d883a 	mov	r22,zero
  80c570:	01400044 	movi	r5,1
  80c574:	003f5f06 	br	80c2f4 <__alt_mem_epcs_flash_controller_0+0xff8032f4>
  80c578:	05400304 	movi	r21,12
  80c57c:	014000c4 	movi	r5,3
  80c580:	003f5c06 	br	80c2f4 <__alt_mem_epcs_flash_controller_0+0xff8032f4>
  80c584:	04000434 	movhi	r16,16
  80c588:	0027883a 	mov	r19,zero
  80c58c:	843fffc4 	addi	r16,r16,-1
  80c590:	05bfffc4 	movi	r22,-1
  80c594:	0081ffc4 	movi	r2,2047
  80c598:	003f9606 	br	80c3f4 <__alt_mem_epcs_flash_controller_0+0xff8033f4>
  80c59c:	8023883a 	mov	r17,r16
  80c5a0:	b025883a 	mov	r18,r22
  80c5a4:	280f883a 	mov	r7,r5
  80c5a8:	003f8806 	br	80c3cc <__alt_mem_epcs_flash_controller_0+0xff8033cc>
  80c5ac:	8023883a 	mov	r17,r16
  80c5b0:	b025883a 	mov	r18,r22
  80c5b4:	480d883a 	mov	r6,r9
  80c5b8:	280f883a 	mov	r7,r5
  80c5bc:	003f8306 	br	80c3cc <__alt_mem_epcs_flash_controller_0+0xff8033cc>
  80c5c0:	b026d43a 	srli	r19,r22,16
  80c5c4:	902ed43a 	srli	r23,r18,16
  80c5c8:	b5bfffcc 	andi	r22,r22,65535
  80c5cc:	94bfffcc 	andi	r18,r18,65535
  80c5d0:	b00b883a 	mov	r5,r22
  80c5d4:	9009883a 	mov	r4,r18
  80c5d8:	d8c00515 	stw	r3,20(sp)
  80c5dc:	d9800715 	stw	r6,28(sp)
  80c5e0:	da000615 	stw	r8,24(sp)
  80c5e4:	080ad7c0 	call	80ad7c <__mulsi3>
  80c5e8:	980b883a 	mov	r5,r19
  80c5ec:	9009883a 	mov	r4,r18
  80c5f0:	1029883a 	mov	r20,r2
  80c5f4:	080ad7c0 	call	80ad7c <__mulsi3>
  80c5f8:	b80b883a 	mov	r5,r23
  80c5fc:	9809883a 	mov	r4,r19
  80c600:	102b883a 	mov	r21,r2
  80c604:	080ad7c0 	call	80ad7c <__mulsi3>
  80c608:	b809883a 	mov	r4,r23
  80c60c:	b00b883a 	mov	r5,r22
  80c610:	1039883a 	mov	fp,r2
  80c614:	080ad7c0 	call	80ad7c <__mulsi3>
  80c618:	a008d43a 	srli	r4,r20,16
  80c61c:	1545883a 	add	r2,r2,r21
  80c620:	d8c00517 	ldw	r3,20(sp)
  80c624:	2085883a 	add	r2,r4,r2
  80c628:	d9800717 	ldw	r6,28(sp)
  80c62c:	da000617 	ldw	r8,24(sp)
  80c630:	1540022e 	bgeu	r2,r21,80c63c <__muldf3+0x3c4>
  80c634:	01000074 	movhi	r4,1
  80c638:	e139883a 	add	fp,fp,r4
  80c63c:	100e943a 	slli	r7,r2,16
  80c640:	1004d43a 	srli	r2,r2,16
  80c644:	882ad43a 	srli	r21,r17,16
  80c648:	a53fffcc 	andi	r20,r20,65535
  80c64c:	8c7fffcc 	andi	r17,r17,65535
  80c650:	3d29883a 	add	r20,r7,r20
  80c654:	b00b883a 	mov	r5,r22
  80c658:	8809883a 	mov	r4,r17
  80c65c:	d8c00515 	stw	r3,20(sp)
  80c660:	d9800715 	stw	r6,28(sp)
  80c664:	da000615 	stw	r8,24(sp)
  80c668:	dd000115 	stw	r20,4(sp)
  80c66c:	d8800015 	stw	r2,0(sp)
  80c670:	080ad7c0 	call	80ad7c <__mulsi3>
  80c674:	980b883a 	mov	r5,r19
  80c678:	8809883a 	mov	r4,r17
  80c67c:	d8800215 	stw	r2,8(sp)
  80c680:	080ad7c0 	call	80ad7c <__mulsi3>
  80c684:	9809883a 	mov	r4,r19
  80c688:	a80b883a 	mov	r5,r21
  80c68c:	1029883a 	mov	r20,r2
  80c690:	080ad7c0 	call	80ad7c <__mulsi3>
  80c694:	b00b883a 	mov	r5,r22
  80c698:	a809883a 	mov	r4,r21
  80c69c:	d8800415 	stw	r2,16(sp)
  80c6a0:	080ad7c0 	call	80ad7c <__mulsi3>
  80c6a4:	d9c00217 	ldw	r7,8(sp)
  80c6a8:	1505883a 	add	r2,r2,r20
  80c6ac:	d8c00517 	ldw	r3,20(sp)
  80c6b0:	3826d43a 	srli	r19,r7,16
  80c6b4:	d9800717 	ldw	r6,28(sp)
  80c6b8:	da000617 	ldw	r8,24(sp)
  80c6bc:	9885883a 	add	r2,r19,r2
  80c6c0:	da400417 	ldw	r9,16(sp)
  80c6c4:	1500022e 	bgeu	r2,r20,80c6d0 <__muldf3+0x458>
  80c6c8:	01000074 	movhi	r4,1
  80c6cc:	4913883a 	add	r9,r9,r4
  80c6d0:	1028d43a 	srli	r20,r2,16
  80c6d4:	1004943a 	slli	r2,r2,16
  80c6d8:	802cd43a 	srli	r22,r16,16
  80c6dc:	843fffcc 	andi	r16,r16,65535
  80c6e0:	3cffffcc 	andi	r19,r7,65535
  80c6e4:	9009883a 	mov	r4,r18
  80c6e8:	800b883a 	mov	r5,r16
  80c6ec:	a269883a 	add	r20,r20,r9
  80c6f0:	d8c00515 	stw	r3,20(sp)
  80c6f4:	d9800715 	stw	r6,28(sp)
  80c6f8:	da000615 	stw	r8,24(sp)
  80c6fc:	14e7883a 	add	r19,r2,r19
  80c700:	080ad7c0 	call	80ad7c <__mulsi3>
  80c704:	9009883a 	mov	r4,r18
  80c708:	b00b883a 	mov	r5,r22
  80c70c:	d8800315 	stw	r2,12(sp)
  80c710:	080ad7c0 	call	80ad7c <__mulsi3>
  80c714:	b809883a 	mov	r4,r23
  80c718:	b00b883a 	mov	r5,r22
  80c71c:	d8800215 	stw	r2,8(sp)
  80c720:	080ad7c0 	call	80ad7c <__mulsi3>
  80c724:	b80b883a 	mov	r5,r23
  80c728:	8009883a 	mov	r4,r16
  80c72c:	d8800415 	stw	r2,16(sp)
  80c730:	080ad7c0 	call	80ad7c <__mulsi3>
  80c734:	da800317 	ldw	r10,12(sp)
  80c738:	d9c00217 	ldw	r7,8(sp)
  80c73c:	d9000017 	ldw	r4,0(sp)
  80c740:	502ed43a 	srli	r23,r10,16
  80c744:	11c5883a 	add	r2,r2,r7
  80c748:	24e5883a 	add	r18,r4,r19
  80c74c:	b885883a 	add	r2,r23,r2
  80c750:	d8c00517 	ldw	r3,20(sp)
  80c754:	d9800717 	ldw	r6,28(sp)
  80c758:	da000617 	ldw	r8,24(sp)
  80c75c:	da400417 	ldw	r9,16(sp)
  80c760:	11c0022e 	bgeu	r2,r7,80c76c <__muldf3+0x4f4>
  80c764:	01000074 	movhi	r4,1
  80c768:	4913883a 	add	r9,r9,r4
  80c76c:	100ed43a 	srli	r7,r2,16
  80c770:	1004943a 	slli	r2,r2,16
  80c774:	55ffffcc 	andi	r23,r10,65535
  80c778:	3a53883a 	add	r9,r7,r9
  80c77c:	8809883a 	mov	r4,r17
  80c780:	800b883a 	mov	r5,r16
  80c784:	d8c00515 	stw	r3,20(sp)
  80c788:	d9800715 	stw	r6,28(sp)
  80c78c:	da000615 	stw	r8,24(sp)
  80c790:	da400415 	stw	r9,16(sp)
  80c794:	15ef883a 	add	r23,r2,r23
  80c798:	080ad7c0 	call	80ad7c <__mulsi3>
  80c79c:	8809883a 	mov	r4,r17
  80c7a0:	b00b883a 	mov	r5,r22
  80c7a4:	d8800215 	stw	r2,8(sp)
  80c7a8:	080ad7c0 	call	80ad7c <__mulsi3>
  80c7ac:	b00b883a 	mov	r5,r22
  80c7b0:	a809883a 	mov	r4,r21
  80c7b4:	d8800315 	stw	r2,12(sp)
  80c7b8:	080ad7c0 	call	80ad7c <__mulsi3>
  80c7bc:	8009883a 	mov	r4,r16
  80c7c0:	a80b883a 	mov	r5,r21
  80c7c4:	1023883a 	mov	r17,r2
  80c7c8:	080ad7c0 	call	80ad7c <__mulsi3>
  80c7cc:	d9c00217 	ldw	r7,8(sp)
  80c7d0:	da800317 	ldw	r10,12(sp)
  80c7d4:	d8c00517 	ldw	r3,20(sp)
  80c7d8:	3808d43a 	srli	r4,r7,16
  80c7dc:	1285883a 	add	r2,r2,r10
  80c7e0:	d9800717 	ldw	r6,28(sp)
  80c7e4:	2085883a 	add	r2,r4,r2
  80c7e8:	da000617 	ldw	r8,24(sp)
  80c7ec:	da400417 	ldw	r9,16(sp)
  80c7f0:	1280022e 	bgeu	r2,r10,80c7fc <__muldf3+0x584>
  80c7f4:	01000074 	movhi	r4,1
  80c7f8:	8923883a 	add	r17,r17,r4
  80c7fc:	1008943a 	slli	r4,r2,16
  80c800:	39ffffcc 	andi	r7,r7,65535
  80c804:	e4b9883a 	add	fp,fp,r18
  80c808:	21cf883a 	add	r7,r4,r7
  80c80c:	e4e7803a 	cmpltu	r19,fp,r19
  80c810:	3d0f883a 	add	r7,r7,r20
  80c814:	bf39883a 	add	fp,r23,fp
  80c818:	99c9883a 	add	r4,r19,r7
  80c81c:	e5ef803a 	cmpltu	r23,fp,r23
  80c820:	490b883a 	add	r5,r9,r4
  80c824:	1004d43a 	srli	r2,r2,16
  80c828:	b965883a 	add	r18,r23,r5
  80c82c:	24c9803a 	cmpltu	r4,r4,r19
  80c830:	3d29803a 	cmpltu	r20,r7,r20
  80c834:	a128b03a 	or	r20,r20,r4
  80c838:	95ef803a 	cmpltu	r23,r18,r23
  80c83c:	2a53803a 	cmpltu	r9,r5,r9
  80c840:	a0a9883a 	add	r20,r20,r2
  80c844:	4deeb03a 	or	r23,r9,r23
  80c848:	a5ef883a 	add	r23,r20,r23
  80c84c:	bc63883a 	add	r17,r23,r17
  80c850:	e004927a 	slli	r2,fp,9
  80c854:	d9000117 	ldw	r4,4(sp)
  80c858:	882e927a 	slli	r23,r17,9
  80c85c:	9022d5fa 	srli	r17,r18,23
  80c860:	e038d5fa 	srli	fp,fp,23
  80c864:	1104b03a 	or	r2,r2,r4
  80c868:	9024927a 	slli	r18,r18,9
  80c86c:	1004c03a 	cmpne	r2,r2,zero
  80c870:	bc62b03a 	or	r17,r23,r17
  80c874:	1738b03a 	or	fp,r2,fp
  80c878:	8880402c 	andhi	r2,r17,256
  80c87c:	e4a4b03a 	or	r18,fp,r18
  80c880:	10000726 	beq	r2,zero,80c8a0 <__muldf3+0x628>
  80c884:	9006d07a 	srli	r3,r18,1
  80c888:	880497fa 	slli	r2,r17,31
  80c88c:	9480004c 	andi	r18,r18,1
  80c890:	8822d07a 	srli	r17,r17,1
  80c894:	1ca4b03a 	or	r18,r3,r18
  80c898:	14a4b03a 	or	r18,r2,r18
  80c89c:	4007883a 	mov	r3,r8
  80c8a0:	1880ffc4 	addi	r2,r3,1023
  80c8a4:	0080460e 	bge	zero,r2,80c9c0 <__muldf3+0x748>
  80c8a8:	910001cc 	andi	r4,r18,7
  80c8ac:	20000726 	beq	r4,zero,80c8cc <__muldf3+0x654>
  80c8b0:	910003cc 	andi	r4,r18,15
  80c8b4:	01400104 	movi	r5,4
  80c8b8:	21400426 	beq	r4,r5,80c8cc <__muldf3+0x654>
  80c8bc:	9149883a 	add	r4,r18,r5
  80c8c0:	24a5803a 	cmpltu	r18,r4,r18
  80c8c4:	8ca3883a 	add	r17,r17,r18
  80c8c8:	2025883a 	mov	r18,r4
  80c8cc:	8900402c 	andhi	r4,r17,256
  80c8d0:	20000426 	beq	r4,zero,80c8e4 <__muldf3+0x66c>
  80c8d4:	18810004 	addi	r2,r3,1024
  80c8d8:	00ffc034 	movhi	r3,65280
  80c8dc:	18ffffc4 	addi	r3,r3,-1
  80c8e0:	88e2703a 	and	r17,r17,r3
  80c8e4:	00c1ff84 	movi	r3,2046
  80c8e8:	18bf1316 	blt	r3,r2,80c538 <__alt_mem_epcs_flash_controller_0+0xff803538>
  80c8ec:	882c977a 	slli	r22,r17,29
  80c8f0:	9024d0fa 	srli	r18,r18,3
  80c8f4:	8822927a 	slli	r17,r17,9
  80c8f8:	1081ffcc 	andi	r2,r2,2047
  80c8fc:	b4acb03a 	or	r22,r22,r18
  80c900:	8820d33a 	srli	r16,r17,12
  80c904:	3027883a 	mov	r19,r6
  80c908:	003eba06 	br	80c3f4 <__alt_mem_epcs_flash_controller_0+0xff8033f4>
  80c90c:	8080022c 	andhi	r2,r16,8
  80c910:	10000926 	beq	r2,zero,80c938 <__muldf3+0x6c0>
  80c914:	8880022c 	andhi	r2,r17,8
  80c918:	1000071e 	bne	r2,zero,80c938 <__muldf3+0x6c0>
  80c91c:	00800434 	movhi	r2,16
  80c920:	8c000234 	orhi	r16,r17,8
  80c924:	10bfffc4 	addi	r2,r2,-1
  80c928:	e027883a 	mov	r19,fp
  80c92c:	80a0703a 	and	r16,r16,r2
  80c930:	902d883a 	mov	r22,r18
  80c934:	003f1706 	br	80c594 <__alt_mem_epcs_flash_controller_0+0xff803594>
  80c938:	00800434 	movhi	r2,16
  80c93c:	84000234 	orhi	r16,r16,8
  80c940:	10bfffc4 	addi	r2,r2,-1
  80c944:	80a0703a 	and	r16,r16,r2
  80c948:	003f1206 	br	80c594 <__alt_mem_epcs_flash_controller_0+0xff803594>
  80c94c:	147ff604 	addi	r17,r2,-40
  80c950:	3462983a 	sll	r17,r6,r17
  80c954:	0025883a 	mov	r18,zero
  80c958:	003ef306 	br	80c528 <__alt_mem_epcs_flash_controller_0+0xff803528>
  80c95c:	3009883a 	mov	r4,r6
  80c960:	d9400215 	stw	r5,8(sp)
  80c964:	d9800715 	stw	r6,28(sp)
  80c968:	da400415 	stw	r9,16(sp)
  80c96c:	da800315 	stw	r10,12(sp)
  80c970:	080d5e40 	call	80d5e4 <__clzsi2>
  80c974:	10800804 	addi	r2,r2,32
  80c978:	da800317 	ldw	r10,12(sp)
  80c97c:	da400417 	ldw	r9,16(sp)
  80c980:	d9800717 	ldw	r6,28(sp)
  80c984:	d9400217 	ldw	r5,8(sp)
  80c988:	003edd06 	br	80c500 <__alt_mem_epcs_flash_controller_0+0xff803500>
  80c98c:	143ff604 	addi	r16,r2,-40
  80c990:	ac20983a 	sll	r16,r21,r16
  80c994:	002d883a 	mov	r22,zero
  80c998:	003ec106 	br	80c4a0 <__alt_mem_epcs_flash_controller_0+0xff8034a0>
  80c99c:	d9800715 	stw	r6,28(sp)
  80c9a0:	d9c00215 	stw	r7,8(sp)
  80c9a4:	da400415 	stw	r9,16(sp)
  80c9a8:	080d5e40 	call	80d5e4 <__clzsi2>
  80c9ac:	10800804 	addi	r2,r2,32
  80c9b0:	da400417 	ldw	r9,16(sp)
  80c9b4:	d9c00217 	ldw	r7,8(sp)
  80c9b8:	d9800717 	ldw	r6,28(sp)
  80c9bc:	003eae06 	br	80c478 <__alt_mem_epcs_flash_controller_0+0xff803478>
  80c9c0:	00c00044 	movi	r3,1
  80c9c4:	1887c83a 	sub	r3,r3,r2
  80c9c8:	01000e04 	movi	r4,56
  80c9cc:	20fe8516 	blt	r4,r3,80c3e4 <__alt_mem_epcs_flash_controller_0+0xff8033e4>
  80c9d0:	010007c4 	movi	r4,31
  80c9d4:	20c01b16 	blt	r4,r3,80ca44 <__muldf3+0x7cc>
  80c9d8:	00800804 	movi	r2,32
  80c9dc:	10c5c83a 	sub	r2,r2,r3
  80c9e0:	888a983a 	sll	r5,r17,r2
  80c9e4:	90c8d83a 	srl	r4,r18,r3
  80c9e8:	9084983a 	sll	r2,r18,r2
  80c9ec:	88e2d83a 	srl	r17,r17,r3
  80c9f0:	2906b03a 	or	r3,r5,r4
  80c9f4:	1004c03a 	cmpne	r2,r2,zero
  80c9f8:	1886b03a 	or	r3,r3,r2
  80c9fc:	188001cc 	andi	r2,r3,7
  80ca00:	10000726 	beq	r2,zero,80ca20 <__muldf3+0x7a8>
  80ca04:	188003cc 	andi	r2,r3,15
  80ca08:	01000104 	movi	r4,4
  80ca0c:	11000426 	beq	r2,r4,80ca20 <__muldf3+0x7a8>
  80ca10:	1805883a 	mov	r2,r3
  80ca14:	10c00104 	addi	r3,r2,4
  80ca18:	1885803a 	cmpltu	r2,r3,r2
  80ca1c:	88a3883a 	add	r17,r17,r2
  80ca20:	8880202c 	andhi	r2,r17,128
  80ca24:	10001c26 	beq	r2,zero,80ca98 <__muldf3+0x820>
  80ca28:	3027883a 	mov	r19,r6
  80ca2c:	00800044 	movi	r2,1
  80ca30:	0021883a 	mov	r16,zero
  80ca34:	002d883a 	mov	r22,zero
  80ca38:	003e6e06 	br	80c3f4 <__alt_mem_epcs_flash_controller_0+0xff8033f4>
  80ca3c:	4007883a 	mov	r3,r8
  80ca40:	003f9706 	br	80c8a0 <__alt_mem_epcs_flash_controller_0+0xff8038a0>
  80ca44:	017ff844 	movi	r5,-31
  80ca48:	2885c83a 	sub	r2,r5,r2
  80ca4c:	888ad83a 	srl	r5,r17,r2
  80ca50:	00800804 	movi	r2,32
  80ca54:	18801a26 	beq	r3,r2,80cac0 <__muldf3+0x848>
  80ca58:	01001004 	movi	r4,64
  80ca5c:	20c7c83a 	sub	r3,r4,r3
  80ca60:	88e2983a 	sll	r17,r17,r3
  80ca64:	8ca4b03a 	or	r18,r17,r18
  80ca68:	9004c03a 	cmpne	r2,r18,zero
  80ca6c:	2884b03a 	or	r2,r5,r2
  80ca70:	144001cc 	andi	r17,r2,7
  80ca74:	88000d1e 	bne	r17,zero,80caac <__muldf3+0x834>
  80ca78:	0021883a 	mov	r16,zero
  80ca7c:	102cd0fa 	srli	r22,r2,3
  80ca80:	3027883a 	mov	r19,r6
  80ca84:	0005883a 	mov	r2,zero
  80ca88:	b46cb03a 	or	r22,r22,r17
  80ca8c:	003e5906 	br	80c3f4 <__alt_mem_epcs_flash_controller_0+0xff8033f4>
  80ca90:	1007883a 	mov	r3,r2
  80ca94:	0023883a 	mov	r17,zero
  80ca98:	8820927a 	slli	r16,r17,9
  80ca9c:	1805883a 	mov	r2,r3
  80caa0:	8822977a 	slli	r17,r17,29
  80caa4:	8020d33a 	srli	r16,r16,12
  80caa8:	003ff406 	br	80ca7c <__alt_mem_epcs_flash_controller_0+0xff803a7c>
  80caac:	10c003cc 	andi	r3,r2,15
  80cab0:	01000104 	movi	r4,4
  80cab4:	193ff626 	beq	r3,r4,80ca90 <__alt_mem_epcs_flash_controller_0+0xff803a90>
  80cab8:	0023883a 	mov	r17,zero
  80cabc:	003fd506 	br	80ca14 <__alt_mem_epcs_flash_controller_0+0xff803a14>
  80cac0:	0023883a 	mov	r17,zero
  80cac4:	003fe706 	br	80ca64 <__alt_mem_epcs_flash_controller_0+0xff803a64>
  80cac8:	00800434 	movhi	r2,16
  80cacc:	8c000234 	orhi	r16,r17,8
  80cad0:	10bfffc4 	addi	r2,r2,-1
  80cad4:	3027883a 	mov	r19,r6
  80cad8:	80a0703a 	and	r16,r16,r2
  80cadc:	902d883a 	mov	r22,r18
  80cae0:	003eac06 	br	80c594 <__alt_mem_epcs_flash_controller_0+0xff803594>

0080cae4 <__subdf3>:
  80cae4:	02000434 	movhi	r8,16
  80cae8:	423fffc4 	addi	r8,r8,-1
  80caec:	defffb04 	addi	sp,sp,-20
  80caf0:	2a14703a 	and	r10,r5,r8
  80caf4:	3812d53a 	srli	r9,r7,20
  80caf8:	3a10703a 	and	r8,r7,r8
  80cafc:	2006d77a 	srli	r3,r4,29
  80cb00:	3004d77a 	srli	r2,r6,29
  80cb04:	dc000015 	stw	r16,0(sp)
  80cb08:	501490fa 	slli	r10,r10,3
  80cb0c:	2820d53a 	srli	r16,r5,20
  80cb10:	401090fa 	slli	r8,r8,3
  80cb14:	dc800215 	stw	r18,8(sp)
  80cb18:	dc400115 	stw	r17,4(sp)
  80cb1c:	dfc00415 	stw	ra,16(sp)
  80cb20:	202290fa 	slli	r17,r4,3
  80cb24:	dcc00315 	stw	r19,12(sp)
  80cb28:	4a41ffcc 	andi	r9,r9,2047
  80cb2c:	0101ffc4 	movi	r4,2047
  80cb30:	2824d7fa 	srli	r18,r5,31
  80cb34:	8401ffcc 	andi	r16,r16,2047
  80cb38:	50c6b03a 	or	r3,r10,r3
  80cb3c:	380ed7fa 	srli	r7,r7,31
  80cb40:	408ab03a 	or	r5,r8,r2
  80cb44:	300c90fa 	slli	r6,r6,3
  80cb48:	49009626 	beq	r9,r4,80cda4 <__subdf3+0x2c0>
  80cb4c:	39c0005c 	xori	r7,r7,1
  80cb50:	8245c83a 	sub	r2,r16,r9
  80cb54:	3c807426 	beq	r7,r18,80cd28 <__subdf3+0x244>
  80cb58:	0080af0e 	bge	zero,r2,80ce18 <__subdf3+0x334>
  80cb5c:	48002a1e 	bne	r9,zero,80cc08 <__subdf3+0x124>
  80cb60:	2988b03a 	or	r4,r5,r6
  80cb64:	20009a1e 	bne	r4,zero,80cdd0 <__subdf3+0x2ec>
  80cb68:	888001cc 	andi	r2,r17,7
  80cb6c:	10000726 	beq	r2,zero,80cb8c <__subdf3+0xa8>
  80cb70:	888003cc 	andi	r2,r17,15
  80cb74:	01000104 	movi	r4,4
  80cb78:	11000426 	beq	r2,r4,80cb8c <__subdf3+0xa8>
  80cb7c:	890b883a 	add	r5,r17,r4
  80cb80:	2c63803a 	cmpltu	r17,r5,r17
  80cb84:	1c47883a 	add	r3,r3,r17
  80cb88:	2823883a 	mov	r17,r5
  80cb8c:	1880202c 	andhi	r2,r3,128
  80cb90:	10005926 	beq	r2,zero,80ccf8 <__subdf3+0x214>
  80cb94:	84000044 	addi	r16,r16,1
  80cb98:	0081ffc4 	movi	r2,2047
  80cb9c:	8080be26 	beq	r16,r2,80ce98 <__subdf3+0x3b4>
  80cba0:	017fe034 	movhi	r5,65408
  80cba4:	297fffc4 	addi	r5,r5,-1
  80cba8:	1946703a 	and	r3,r3,r5
  80cbac:	1804977a 	slli	r2,r3,29
  80cbb0:	1806927a 	slli	r3,r3,9
  80cbb4:	8822d0fa 	srli	r17,r17,3
  80cbb8:	8401ffcc 	andi	r16,r16,2047
  80cbbc:	180ad33a 	srli	r5,r3,12
  80cbc0:	9100004c 	andi	r4,r18,1
  80cbc4:	1444b03a 	or	r2,r2,r17
  80cbc8:	80c1ffcc 	andi	r3,r16,2047
  80cbcc:	1820953a 	slli	r16,r3,20
  80cbd0:	20c03fcc 	andi	r3,r4,255
  80cbd4:	180897fa 	slli	r4,r3,31
  80cbd8:	00c00434 	movhi	r3,16
  80cbdc:	18ffffc4 	addi	r3,r3,-1
  80cbe0:	28c6703a 	and	r3,r5,r3
  80cbe4:	1c06b03a 	or	r3,r3,r16
  80cbe8:	1906b03a 	or	r3,r3,r4
  80cbec:	dfc00417 	ldw	ra,16(sp)
  80cbf0:	dcc00317 	ldw	r19,12(sp)
  80cbf4:	dc800217 	ldw	r18,8(sp)
  80cbf8:	dc400117 	ldw	r17,4(sp)
  80cbfc:	dc000017 	ldw	r16,0(sp)
  80cc00:	dec00504 	addi	sp,sp,20
  80cc04:	f800283a 	ret
  80cc08:	0101ffc4 	movi	r4,2047
  80cc0c:	813fd626 	beq	r16,r4,80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cc10:	29402034 	orhi	r5,r5,128
  80cc14:	01000e04 	movi	r4,56
  80cc18:	2080a316 	blt	r4,r2,80cea8 <__subdf3+0x3c4>
  80cc1c:	010007c4 	movi	r4,31
  80cc20:	2080c616 	blt	r4,r2,80cf3c <__subdf3+0x458>
  80cc24:	01000804 	movi	r4,32
  80cc28:	2089c83a 	sub	r4,r4,r2
  80cc2c:	2910983a 	sll	r8,r5,r4
  80cc30:	308ed83a 	srl	r7,r6,r2
  80cc34:	3108983a 	sll	r4,r6,r4
  80cc38:	2884d83a 	srl	r2,r5,r2
  80cc3c:	41ccb03a 	or	r6,r8,r7
  80cc40:	2008c03a 	cmpne	r4,r4,zero
  80cc44:	310cb03a 	or	r6,r6,r4
  80cc48:	898dc83a 	sub	r6,r17,r6
  80cc4c:	89a3803a 	cmpltu	r17,r17,r6
  80cc50:	1887c83a 	sub	r3,r3,r2
  80cc54:	1c47c83a 	sub	r3,r3,r17
  80cc58:	3023883a 	mov	r17,r6
  80cc5c:	1880202c 	andhi	r2,r3,128
  80cc60:	10002326 	beq	r2,zero,80ccf0 <__subdf3+0x20c>
  80cc64:	04c02034 	movhi	r19,128
  80cc68:	9cffffc4 	addi	r19,r19,-1
  80cc6c:	1ce6703a 	and	r19,r3,r19
  80cc70:	98007a26 	beq	r19,zero,80ce5c <__subdf3+0x378>
  80cc74:	9809883a 	mov	r4,r19
  80cc78:	080d5e40 	call	80d5e4 <__clzsi2>
  80cc7c:	113ffe04 	addi	r4,r2,-8
  80cc80:	00c007c4 	movi	r3,31
  80cc84:	19007b16 	blt	r3,r4,80ce74 <__subdf3+0x390>
  80cc88:	00800804 	movi	r2,32
  80cc8c:	1105c83a 	sub	r2,r2,r4
  80cc90:	8884d83a 	srl	r2,r17,r2
  80cc94:	9906983a 	sll	r3,r19,r4
  80cc98:	8922983a 	sll	r17,r17,r4
  80cc9c:	10c4b03a 	or	r2,r2,r3
  80cca0:	24007816 	blt	r4,r16,80ce84 <__subdf3+0x3a0>
  80cca4:	2421c83a 	sub	r16,r4,r16
  80cca8:	80c00044 	addi	r3,r16,1
  80ccac:	010007c4 	movi	r4,31
  80ccb0:	20c09516 	blt	r4,r3,80cf08 <__subdf3+0x424>
  80ccb4:	01400804 	movi	r5,32
  80ccb8:	28cbc83a 	sub	r5,r5,r3
  80ccbc:	88c8d83a 	srl	r4,r17,r3
  80ccc0:	8962983a 	sll	r17,r17,r5
  80ccc4:	114a983a 	sll	r5,r2,r5
  80ccc8:	10c6d83a 	srl	r3,r2,r3
  80cccc:	8804c03a 	cmpne	r2,r17,zero
  80ccd0:	290ab03a 	or	r5,r5,r4
  80ccd4:	28a2b03a 	or	r17,r5,r2
  80ccd8:	0021883a 	mov	r16,zero
  80ccdc:	003fa206 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cce0:	2090b03a 	or	r8,r4,r2
  80cce4:	40018e26 	beq	r8,zero,80d320 <__subdf3+0x83c>
  80cce8:	1007883a 	mov	r3,r2
  80ccec:	2023883a 	mov	r17,r4
  80ccf0:	888001cc 	andi	r2,r17,7
  80ccf4:	103f9e1e 	bne	r2,zero,80cb70 <__alt_mem_epcs_flash_controller_0+0xff803b70>
  80ccf8:	1804977a 	slli	r2,r3,29
  80ccfc:	8822d0fa 	srli	r17,r17,3
  80cd00:	1810d0fa 	srli	r8,r3,3
  80cd04:	9100004c 	andi	r4,r18,1
  80cd08:	1444b03a 	or	r2,r2,r17
  80cd0c:	00c1ffc4 	movi	r3,2047
  80cd10:	80c02826 	beq	r16,r3,80cdb4 <__subdf3+0x2d0>
  80cd14:	01400434 	movhi	r5,16
  80cd18:	297fffc4 	addi	r5,r5,-1
  80cd1c:	80e0703a 	and	r16,r16,r3
  80cd20:	414a703a 	and	r5,r8,r5
  80cd24:	003fa806 	br	80cbc8 <__alt_mem_epcs_flash_controller_0+0xff803bc8>
  80cd28:	0080630e 	bge	zero,r2,80ceb8 <__subdf3+0x3d4>
  80cd2c:	48003026 	beq	r9,zero,80cdf0 <__subdf3+0x30c>
  80cd30:	0101ffc4 	movi	r4,2047
  80cd34:	813f8c26 	beq	r16,r4,80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cd38:	29402034 	orhi	r5,r5,128
  80cd3c:	01000e04 	movi	r4,56
  80cd40:	2080a90e 	bge	r4,r2,80cfe8 <__subdf3+0x504>
  80cd44:	298cb03a 	or	r6,r5,r6
  80cd48:	3012c03a 	cmpne	r9,r6,zero
  80cd4c:	0005883a 	mov	r2,zero
  80cd50:	4c53883a 	add	r9,r9,r17
  80cd54:	4c63803a 	cmpltu	r17,r9,r17
  80cd58:	10c7883a 	add	r3,r2,r3
  80cd5c:	88c7883a 	add	r3,r17,r3
  80cd60:	4823883a 	mov	r17,r9
  80cd64:	1880202c 	andhi	r2,r3,128
  80cd68:	1000d026 	beq	r2,zero,80d0ac <__subdf3+0x5c8>
  80cd6c:	84000044 	addi	r16,r16,1
  80cd70:	0081ffc4 	movi	r2,2047
  80cd74:	8080fe26 	beq	r16,r2,80d170 <__subdf3+0x68c>
  80cd78:	00bfe034 	movhi	r2,65408
  80cd7c:	10bfffc4 	addi	r2,r2,-1
  80cd80:	1886703a 	and	r3,r3,r2
  80cd84:	880ad07a 	srli	r5,r17,1
  80cd88:	180497fa 	slli	r2,r3,31
  80cd8c:	8900004c 	andi	r4,r17,1
  80cd90:	2922b03a 	or	r17,r5,r4
  80cd94:	1806d07a 	srli	r3,r3,1
  80cd98:	1462b03a 	or	r17,r2,r17
  80cd9c:	3825883a 	mov	r18,r7
  80cda0:	003f7106 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cda4:	2984b03a 	or	r2,r5,r6
  80cda8:	103f6826 	beq	r2,zero,80cb4c <__alt_mem_epcs_flash_controller_0+0xff803b4c>
  80cdac:	39c03fcc 	andi	r7,r7,255
  80cdb0:	003f6706 	br	80cb50 <__alt_mem_epcs_flash_controller_0+0xff803b50>
  80cdb4:	4086b03a 	or	r3,r8,r2
  80cdb8:	18015226 	beq	r3,zero,80d304 <__subdf3+0x820>
  80cdbc:	00c00434 	movhi	r3,16
  80cdc0:	41400234 	orhi	r5,r8,8
  80cdc4:	18ffffc4 	addi	r3,r3,-1
  80cdc8:	28ca703a 	and	r5,r5,r3
  80cdcc:	003f7e06 	br	80cbc8 <__alt_mem_epcs_flash_controller_0+0xff803bc8>
  80cdd0:	10bfffc4 	addi	r2,r2,-1
  80cdd4:	1000491e 	bne	r2,zero,80cefc <__subdf3+0x418>
  80cdd8:	898fc83a 	sub	r7,r17,r6
  80cddc:	89e3803a 	cmpltu	r17,r17,r7
  80cde0:	1947c83a 	sub	r3,r3,r5
  80cde4:	1c47c83a 	sub	r3,r3,r17
  80cde8:	3823883a 	mov	r17,r7
  80cdec:	003f9b06 	br	80cc5c <__alt_mem_epcs_flash_controller_0+0xff803c5c>
  80cdf0:	2988b03a 	or	r4,r5,r6
  80cdf4:	203f5c26 	beq	r4,zero,80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cdf8:	10bfffc4 	addi	r2,r2,-1
  80cdfc:	1000931e 	bne	r2,zero,80d04c <__subdf3+0x568>
  80ce00:	898d883a 	add	r6,r17,r6
  80ce04:	3463803a 	cmpltu	r17,r6,r17
  80ce08:	1947883a 	add	r3,r3,r5
  80ce0c:	88c7883a 	add	r3,r17,r3
  80ce10:	3023883a 	mov	r17,r6
  80ce14:	003fd306 	br	80cd64 <__alt_mem_epcs_flash_controller_0+0xff803d64>
  80ce18:	1000541e 	bne	r2,zero,80cf6c <__subdf3+0x488>
  80ce1c:	80800044 	addi	r2,r16,1
  80ce20:	1081ffcc 	andi	r2,r2,2047
  80ce24:	01000044 	movi	r4,1
  80ce28:	2080a20e 	bge	r4,r2,80d0b4 <__subdf3+0x5d0>
  80ce2c:	8989c83a 	sub	r4,r17,r6
  80ce30:	8905803a 	cmpltu	r2,r17,r4
  80ce34:	1967c83a 	sub	r19,r3,r5
  80ce38:	98a7c83a 	sub	r19,r19,r2
  80ce3c:	9880202c 	andhi	r2,r19,128
  80ce40:	10006326 	beq	r2,zero,80cfd0 <__subdf3+0x4ec>
  80ce44:	3463c83a 	sub	r17,r6,r17
  80ce48:	28c7c83a 	sub	r3,r5,r3
  80ce4c:	344d803a 	cmpltu	r6,r6,r17
  80ce50:	19a7c83a 	sub	r19,r3,r6
  80ce54:	3825883a 	mov	r18,r7
  80ce58:	983f861e 	bne	r19,zero,80cc74 <__alt_mem_epcs_flash_controller_0+0xff803c74>
  80ce5c:	8809883a 	mov	r4,r17
  80ce60:	080d5e40 	call	80d5e4 <__clzsi2>
  80ce64:	10800804 	addi	r2,r2,32
  80ce68:	113ffe04 	addi	r4,r2,-8
  80ce6c:	00c007c4 	movi	r3,31
  80ce70:	193f850e 	bge	r3,r4,80cc88 <__alt_mem_epcs_flash_controller_0+0xff803c88>
  80ce74:	10bff604 	addi	r2,r2,-40
  80ce78:	8884983a 	sll	r2,r17,r2
  80ce7c:	0023883a 	mov	r17,zero
  80ce80:	243f880e 	bge	r4,r16,80cca4 <__alt_mem_epcs_flash_controller_0+0xff803ca4>
  80ce84:	00ffe034 	movhi	r3,65408
  80ce88:	18ffffc4 	addi	r3,r3,-1
  80ce8c:	8121c83a 	sub	r16,r16,r4
  80ce90:	10c6703a 	and	r3,r2,r3
  80ce94:	003f3406 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80ce98:	9100004c 	andi	r4,r18,1
  80ce9c:	000b883a 	mov	r5,zero
  80cea0:	0005883a 	mov	r2,zero
  80cea4:	003f4806 	br	80cbc8 <__alt_mem_epcs_flash_controller_0+0xff803bc8>
  80cea8:	298cb03a 	or	r6,r5,r6
  80ceac:	300cc03a 	cmpne	r6,r6,zero
  80ceb0:	0005883a 	mov	r2,zero
  80ceb4:	003f6406 	br	80cc48 <__alt_mem_epcs_flash_controller_0+0xff803c48>
  80ceb8:	10009a1e 	bne	r2,zero,80d124 <__subdf3+0x640>
  80cebc:	82400044 	addi	r9,r16,1
  80cec0:	4881ffcc 	andi	r2,r9,2047
  80cec4:	02800044 	movi	r10,1
  80cec8:	5080670e 	bge	r10,r2,80d068 <__subdf3+0x584>
  80cecc:	0081ffc4 	movi	r2,2047
  80ced0:	4880af26 	beq	r9,r2,80d190 <__subdf3+0x6ac>
  80ced4:	898d883a 	add	r6,r17,r6
  80ced8:	1945883a 	add	r2,r3,r5
  80cedc:	3447803a 	cmpltu	r3,r6,r17
  80cee0:	1887883a 	add	r3,r3,r2
  80cee4:	182297fa 	slli	r17,r3,31
  80cee8:	300cd07a 	srli	r6,r6,1
  80ceec:	1806d07a 	srli	r3,r3,1
  80cef0:	4821883a 	mov	r16,r9
  80cef4:	89a2b03a 	or	r17,r17,r6
  80cef8:	003f1b06 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cefc:	0101ffc4 	movi	r4,2047
  80cf00:	813f441e 	bne	r16,r4,80cc14 <__alt_mem_epcs_flash_controller_0+0xff803c14>
  80cf04:	003f1806 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80cf08:	843ff844 	addi	r16,r16,-31
  80cf0c:	01400804 	movi	r5,32
  80cf10:	1408d83a 	srl	r4,r2,r16
  80cf14:	19405026 	beq	r3,r5,80d058 <__subdf3+0x574>
  80cf18:	01401004 	movi	r5,64
  80cf1c:	28c7c83a 	sub	r3,r5,r3
  80cf20:	10c4983a 	sll	r2,r2,r3
  80cf24:	88a2b03a 	or	r17,r17,r2
  80cf28:	8822c03a 	cmpne	r17,r17,zero
  80cf2c:	2462b03a 	or	r17,r4,r17
  80cf30:	0007883a 	mov	r3,zero
  80cf34:	0021883a 	mov	r16,zero
  80cf38:	003f6d06 	br	80ccf0 <__alt_mem_epcs_flash_controller_0+0xff803cf0>
  80cf3c:	11fff804 	addi	r7,r2,-32
  80cf40:	01000804 	movi	r4,32
  80cf44:	29ced83a 	srl	r7,r5,r7
  80cf48:	11004526 	beq	r2,r4,80d060 <__subdf3+0x57c>
  80cf4c:	01001004 	movi	r4,64
  80cf50:	2089c83a 	sub	r4,r4,r2
  80cf54:	2904983a 	sll	r2,r5,r4
  80cf58:	118cb03a 	or	r6,r2,r6
  80cf5c:	300cc03a 	cmpne	r6,r6,zero
  80cf60:	398cb03a 	or	r6,r7,r6
  80cf64:	0005883a 	mov	r2,zero
  80cf68:	003f3706 	br	80cc48 <__alt_mem_epcs_flash_controller_0+0xff803c48>
  80cf6c:	80002a26 	beq	r16,zero,80d018 <__subdf3+0x534>
  80cf70:	0101ffc4 	movi	r4,2047
  80cf74:	49006626 	beq	r9,r4,80d110 <__subdf3+0x62c>
  80cf78:	0085c83a 	sub	r2,zero,r2
  80cf7c:	18c02034 	orhi	r3,r3,128
  80cf80:	01000e04 	movi	r4,56
  80cf84:	20807e16 	blt	r4,r2,80d180 <__subdf3+0x69c>
  80cf88:	010007c4 	movi	r4,31
  80cf8c:	2080e716 	blt	r4,r2,80d32c <__subdf3+0x848>
  80cf90:	01000804 	movi	r4,32
  80cf94:	2089c83a 	sub	r4,r4,r2
  80cf98:	1914983a 	sll	r10,r3,r4
  80cf9c:	8890d83a 	srl	r8,r17,r2
  80cfa0:	8908983a 	sll	r4,r17,r4
  80cfa4:	1884d83a 	srl	r2,r3,r2
  80cfa8:	5222b03a 	or	r17,r10,r8
  80cfac:	2006c03a 	cmpne	r3,r4,zero
  80cfb0:	88e2b03a 	or	r17,r17,r3
  80cfb4:	3463c83a 	sub	r17,r6,r17
  80cfb8:	2885c83a 	sub	r2,r5,r2
  80cfbc:	344d803a 	cmpltu	r6,r6,r17
  80cfc0:	1187c83a 	sub	r3,r2,r6
  80cfc4:	4821883a 	mov	r16,r9
  80cfc8:	3825883a 	mov	r18,r7
  80cfcc:	003f2306 	br	80cc5c <__alt_mem_epcs_flash_controller_0+0xff803c5c>
  80cfd0:	24d0b03a 	or	r8,r4,r19
  80cfd4:	40001b1e 	bne	r8,zero,80d044 <__subdf3+0x560>
  80cfd8:	0005883a 	mov	r2,zero
  80cfdc:	0009883a 	mov	r4,zero
  80cfe0:	0021883a 	mov	r16,zero
  80cfe4:	003f4906 	br	80cd0c <__alt_mem_epcs_flash_controller_0+0xff803d0c>
  80cfe8:	010007c4 	movi	r4,31
  80cfec:	20803a16 	blt	r4,r2,80d0d8 <__subdf3+0x5f4>
  80cff0:	01000804 	movi	r4,32
  80cff4:	2089c83a 	sub	r4,r4,r2
  80cff8:	2912983a 	sll	r9,r5,r4
  80cffc:	3090d83a 	srl	r8,r6,r2
  80d000:	3108983a 	sll	r4,r6,r4
  80d004:	2884d83a 	srl	r2,r5,r2
  80d008:	4a12b03a 	or	r9,r9,r8
  80d00c:	2008c03a 	cmpne	r4,r4,zero
  80d010:	4912b03a 	or	r9,r9,r4
  80d014:	003f4e06 	br	80cd50 <__alt_mem_epcs_flash_controller_0+0xff803d50>
  80d018:	1c48b03a 	or	r4,r3,r17
  80d01c:	20003c26 	beq	r4,zero,80d110 <__subdf3+0x62c>
  80d020:	0084303a 	nor	r2,zero,r2
  80d024:	1000381e 	bne	r2,zero,80d108 <__subdf3+0x624>
  80d028:	3463c83a 	sub	r17,r6,r17
  80d02c:	28c5c83a 	sub	r2,r5,r3
  80d030:	344d803a 	cmpltu	r6,r6,r17
  80d034:	1187c83a 	sub	r3,r2,r6
  80d038:	4821883a 	mov	r16,r9
  80d03c:	3825883a 	mov	r18,r7
  80d040:	003f0606 	br	80cc5c <__alt_mem_epcs_flash_controller_0+0xff803c5c>
  80d044:	2023883a 	mov	r17,r4
  80d048:	003f0906 	br	80cc70 <__alt_mem_epcs_flash_controller_0+0xff803c70>
  80d04c:	0101ffc4 	movi	r4,2047
  80d050:	813f3a1e 	bne	r16,r4,80cd3c <__alt_mem_epcs_flash_controller_0+0xff803d3c>
  80d054:	003ec406 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d058:	0005883a 	mov	r2,zero
  80d05c:	003fb106 	br	80cf24 <__alt_mem_epcs_flash_controller_0+0xff803f24>
  80d060:	0005883a 	mov	r2,zero
  80d064:	003fbc06 	br	80cf58 <__alt_mem_epcs_flash_controller_0+0xff803f58>
  80d068:	1c44b03a 	or	r2,r3,r17
  80d06c:	80008e1e 	bne	r16,zero,80d2a8 <__subdf3+0x7c4>
  80d070:	1000c826 	beq	r2,zero,80d394 <__subdf3+0x8b0>
  80d074:	2984b03a 	or	r2,r5,r6
  80d078:	103ebb26 	beq	r2,zero,80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d07c:	8989883a 	add	r4,r17,r6
  80d080:	1945883a 	add	r2,r3,r5
  80d084:	2447803a 	cmpltu	r3,r4,r17
  80d088:	1887883a 	add	r3,r3,r2
  80d08c:	1880202c 	andhi	r2,r3,128
  80d090:	2023883a 	mov	r17,r4
  80d094:	103f1626 	beq	r2,zero,80ccf0 <__alt_mem_epcs_flash_controller_0+0xff803cf0>
  80d098:	00bfe034 	movhi	r2,65408
  80d09c:	10bfffc4 	addi	r2,r2,-1
  80d0a0:	5021883a 	mov	r16,r10
  80d0a4:	1886703a 	and	r3,r3,r2
  80d0a8:	003eaf06 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d0ac:	3825883a 	mov	r18,r7
  80d0b0:	003f0f06 	br	80ccf0 <__alt_mem_epcs_flash_controller_0+0xff803cf0>
  80d0b4:	1c44b03a 	or	r2,r3,r17
  80d0b8:	8000251e 	bne	r16,zero,80d150 <__subdf3+0x66c>
  80d0bc:	1000661e 	bne	r2,zero,80d258 <__subdf3+0x774>
  80d0c0:	2990b03a 	or	r8,r5,r6
  80d0c4:	40009626 	beq	r8,zero,80d320 <__subdf3+0x83c>
  80d0c8:	2807883a 	mov	r3,r5
  80d0cc:	3023883a 	mov	r17,r6
  80d0d0:	3825883a 	mov	r18,r7
  80d0d4:	003ea406 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d0d8:	127ff804 	addi	r9,r2,-32
  80d0dc:	01000804 	movi	r4,32
  80d0e0:	2a52d83a 	srl	r9,r5,r9
  80d0e4:	11008c26 	beq	r2,r4,80d318 <__subdf3+0x834>
  80d0e8:	01001004 	movi	r4,64
  80d0ec:	2085c83a 	sub	r2,r4,r2
  80d0f0:	2884983a 	sll	r2,r5,r2
  80d0f4:	118cb03a 	or	r6,r2,r6
  80d0f8:	300cc03a 	cmpne	r6,r6,zero
  80d0fc:	4992b03a 	or	r9,r9,r6
  80d100:	0005883a 	mov	r2,zero
  80d104:	003f1206 	br	80cd50 <__alt_mem_epcs_flash_controller_0+0xff803d50>
  80d108:	0101ffc4 	movi	r4,2047
  80d10c:	493f9c1e 	bne	r9,r4,80cf80 <__alt_mem_epcs_flash_controller_0+0xff803f80>
  80d110:	2807883a 	mov	r3,r5
  80d114:	3023883a 	mov	r17,r6
  80d118:	4821883a 	mov	r16,r9
  80d11c:	3825883a 	mov	r18,r7
  80d120:	003e9106 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d124:	80001f1e 	bne	r16,zero,80d1a4 <__subdf3+0x6c0>
  80d128:	1c48b03a 	or	r4,r3,r17
  80d12c:	20005a26 	beq	r4,zero,80d298 <__subdf3+0x7b4>
  80d130:	0084303a 	nor	r2,zero,r2
  80d134:	1000561e 	bne	r2,zero,80d290 <__subdf3+0x7ac>
  80d138:	89a3883a 	add	r17,r17,r6
  80d13c:	1945883a 	add	r2,r3,r5
  80d140:	898d803a 	cmpltu	r6,r17,r6
  80d144:	3087883a 	add	r3,r6,r2
  80d148:	4821883a 	mov	r16,r9
  80d14c:	003f0506 	br	80cd64 <__alt_mem_epcs_flash_controller_0+0xff803d64>
  80d150:	10002b1e 	bne	r2,zero,80d200 <__subdf3+0x71c>
  80d154:	2984b03a 	or	r2,r5,r6
  80d158:	10008026 	beq	r2,zero,80d35c <__subdf3+0x878>
  80d15c:	2807883a 	mov	r3,r5
  80d160:	3023883a 	mov	r17,r6
  80d164:	3825883a 	mov	r18,r7
  80d168:	0401ffc4 	movi	r16,2047
  80d16c:	003e7e06 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d170:	3809883a 	mov	r4,r7
  80d174:	0011883a 	mov	r8,zero
  80d178:	0005883a 	mov	r2,zero
  80d17c:	003ee306 	br	80cd0c <__alt_mem_epcs_flash_controller_0+0xff803d0c>
  80d180:	1c62b03a 	or	r17,r3,r17
  80d184:	8822c03a 	cmpne	r17,r17,zero
  80d188:	0005883a 	mov	r2,zero
  80d18c:	003f8906 	br	80cfb4 <__alt_mem_epcs_flash_controller_0+0xff803fb4>
  80d190:	3809883a 	mov	r4,r7
  80d194:	4821883a 	mov	r16,r9
  80d198:	0011883a 	mov	r8,zero
  80d19c:	0005883a 	mov	r2,zero
  80d1a0:	003eda06 	br	80cd0c <__alt_mem_epcs_flash_controller_0+0xff803d0c>
  80d1a4:	0101ffc4 	movi	r4,2047
  80d1a8:	49003b26 	beq	r9,r4,80d298 <__subdf3+0x7b4>
  80d1ac:	0085c83a 	sub	r2,zero,r2
  80d1b0:	18c02034 	orhi	r3,r3,128
  80d1b4:	01000e04 	movi	r4,56
  80d1b8:	20806e16 	blt	r4,r2,80d374 <__subdf3+0x890>
  80d1bc:	010007c4 	movi	r4,31
  80d1c0:	20807716 	blt	r4,r2,80d3a0 <__subdf3+0x8bc>
  80d1c4:	01000804 	movi	r4,32
  80d1c8:	2089c83a 	sub	r4,r4,r2
  80d1cc:	1914983a 	sll	r10,r3,r4
  80d1d0:	8890d83a 	srl	r8,r17,r2
  80d1d4:	8908983a 	sll	r4,r17,r4
  80d1d8:	1884d83a 	srl	r2,r3,r2
  80d1dc:	5222b03a 	or	r17,r10,r8
  80d1e0:	2006c03a 	cmpne	r3,r4,zero
  80d1e4:	88e2b03a 	or	r17,r17,r3
  80d1e8:	89a3883a 	add	r17,r17,r6
  80d1ec:	1145883a 	add	r2,r2,r5
  80d1f0:	898d803a 	cmpltu	r6,r17,r6
  80d1f4:	3087883a 	add	r3,r6,r2
  80d1f8:	4821883a 	mov	r16,r9
  80d1fc:	003ed906 	br	80cd64 <__alt_mem_epcs_flash_controller_0+0xff803d64>
  80d200:	2984b03a 	or	r2,r5,r6
  80d204:	10004226 	beq	r2,zero,80d310 <__subdf3+0x82c>
  80d208:	1808d0fa 	srli	r4,r3,3
  80d20c:	8822d0fa 	srli	r17,r17,3
  80d210:	1806977a 	slli	r3,r3,29
  80d214:	2080022c 	andhi	r2,r4,8
  80d218:	1c62b03a 	or	r17,r3,r17
  80d21c:	10000826 	beq	r2,zero,80d240 <__subdf3+0x75c>
  80d220:	2812d0fa 	srli	r9,r5,3
  80d224:	4880022c 	andhi	r2,r9,8
  80d228:	1000051e 	bne	r2,zero,80d240 <__subdf3+0x75c>
  80d22c:	300cd0fa 	srli	r6,r6,3
  80d230:	2804977a 	slli	r2,r5,29
  80d234:	4809883a 	mov	r4,r9
  80d238:	3825883a 	mov	r18,r7
  80d23c:	11a2b03a 	or	r17,r2,r6
  80d240:	8806d77a 	srli	r3,r17,29
  80d244:	200890fa 	slli	r4,r4,3
  80d248:	882290fa 	slli	r17,r17,3
  80d24c:	0401ffc4 	movi	r16,2047
  80d250:	1906b03a 	or	r3,r3,r4
  80d254:	003e4406 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d258:	2984b03a 	or	r2,r5,r6
  80d25c:	103e4226 	beq	r2,zero,80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d260:	8989c83a 	sub	r4,r17,r6
  80d264:	8911803a 	cmpltu	r8,r17,r4
  80d268:	1945c83a 	sub	r2,r3,r5
  80d26c:	1205c83a 	sub	r2,r2,r8
  80d270:	1200202c 	andhi	r8,r2,128
  80d274:	403e9a26 	beq	r8,zero,80cce0 <__alt_mem_epcs_flash_controller_0+0xff803ce0>
  80d278:	3463c83a 	sub	r17,r6,r17
  80d27c:	28c5c83a 	sub	r2,r5,r3
  80d280:	344d803a 	cmpltu	r6,r6,r17
  80d284:	1187c83a 	sub	r3,r2,r6
  80d288:	3825883a 	mov	r18,r7
  80d28c:	003e3606 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d290:	0101ffc4 	movi	r4,2047
  80d294:	493fc71e 	bne	r9,r4,80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>
  80d298:	2807883a 	mov	r3,r5
  80d29c:	3023883a 	mov	r17,r6
  80d2a0:	4821883a 	mov	r16,r9
  80d2a4:	003e3006 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d2a8:	10003626 	beq	r2,zero,80d384 <__subdf3+0x8a0>
  80d2ac:	2984b03a 	or	r2,r5,r6
  80d2b0:	10001726 	beq	r2,zero,80d310 <__subdf3+0x82c>
  80d2b4:	1808d0fa 	srli	r4,r3,3
  80d2b8:	8822d0fa 	srli	r17,r17,3
  80d2bc:	1806977a 	slli	r3,r3,29
  80d2c0:	2080022c 	andhi	r2,r4,8
  80d2c4:	1c62b03a 	or	r17,r3,r17
  80d2c8:	10000726 	beq	r2,zero,80d2e8 <__subdf3+0x804>
  80d2cc:	2812d0fa 	srli	r9,r5,3
  80d2d0:	4880022c 	andhi	r2,r9,8
  80d2d4:	1000041e 	bne	r2,zero,80d2e8 <__subdf3+0x804>
  80d2d8:	300cd0fa 	srli	r6,r6,3
  80d2dc:	2804977a 	slli	r2,r5,29
  80d2e0:	4809883a 	mov	r4,r9
  80d2e4:	11a2b03a 	or	r17,r2,r6
  80d2e8:	8806d77a 	srli	r3,r17,29
  80d2ec:	200890fa 	slli	r4,r4,3
  80d2f0:	882290fa 	slli	r17,r17,3
  80d2f4:	3825883a 	mov	r18,r7
  80d2f8:	1906b03a 	or	r3,r3,r4
  80d2fc:	0401ffc4 	movi	r16,2047
  80d300:	003e1906 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d304:	000b883a 	mov	r5,zero
  80d308:	0005883a 	mov	r2,zero
  80d30c:	003e2e06 	br	80cbc8 <__alt_mem_epcs_flash_controller_0+0xff803bc8>
  80d310:	0401ffc4 	movi	r16,2047
  80d314:	003e1406 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d318:	0005883a 	mov	r2,zero
  80d31c:	003f7506 	br	80d0f4 <__alt_mem_epcs_flash_controller_0+0xff8040f4>
  80d320:	0005883a 	mov	r2,zero
  80d324:	0009883a 	mov	r4,zero
  80d328:	003e7806 	br	80cd0c <__alt_mem_epcs_flash_controller_0+0xff803d0c>
  80d32c:	123ff804 	addi	r8,r2,-32
  80d330:	01000804 	movi	r4,32
  80d334:	1a10d83a 	srl	r8,r3,r8
  80d338:	11002526 	beq	r2,r4,80d3d0 <__subdf3+0x8ec>
  80d33c:	01001004 	movi	r4,64
  80d340:	2085c83a 	sub	r2,r4,r2
  80d344:	1884983a 	sll	r2,r3,r2
  80d348:	1444b03a 	or	r2,r2,r17
  80d34c:	1004c03a 	cmpne	r2,r2,zero
  80d350:	40a2b03a 	or	r17,r8,r2
  80d354:	0005883a 	mov	r2,zero
  80d358:	003f1606 	br	80cfb4 <__alt_mem_epcs_flash_controller_0+0xff803fb4>
  80d35c:	02000434 	movhi	r8,16
  80d360:	0009883a 	mov	r4,zero
  80d364:	423fffc4 	addi	r8,r8,-1
  80d368:	00bfffc4 	movi	r2,-1
  80d36c:	0401ffc4 	movi	r16,2047
  80d370:	003e6606 	br	80cd0c <__alt_mem_epcs_flash_controller_0+0xff803d0c>
  80d374:	1c62b03a 	or	r17,r3,r17
  80d378:	8822c03a 	cmpne	r17,r17,zero
  80d37c:	0005883a 	mov	r2,zero
  80d380:	003f9906 	br	80d1e8 <__alt_mem_epcs_flash_controller_0+0xff8041e8>
  80d384:	2807883a 	mov	r3,r5
  80d388:	3023883a 	mov	r17,r6
  80d38c:	0401ffc4 	movi	r16,2047
  80d390:	003df506 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d394:	2807883a 	mov	r3,r5
  80d398:	3023883a 	mov	r17,r6
  80d39c:	003df206 	br	80cb68 <__alt_mem_epcs_flash_controller_0+0xff803b68>
  80d3a0:	123ff804 	addi	r8,r2,-32
  80d3a4:	01000804 	movi	r4,32
  80d3a8:	1a10d83a 	srl	r8,r3,r8
  80d3ac:	11000a26 	beq	r2,r4,80d3d8 <__subdf3+0x8f4>
  80d3b0:	01001004 	movi	r4,64
  80d3b4:	2085c83a 	sub	r2,r4,r2
  80d3b8:	1884983a 	sll	r2,r3,r2
  80d3bc:	1444b03a 	or	r2,r2,r17
  80d3c0:	1004c03a 	cmpne	r2,r2,zero
  80d3c4:	40a2b03a 	or	r17,r8,r2
  80d3c8:	0005883a 	mov	r2,zero
  80d3cc:	003f8606 	br	80d1e8 <__alt_mem_epcs_flash_controller_0+0xff8041e8>
  80d3d0:	0005883a 	mov	r2,zero
  80d3d4:	003fdc06 	br	80d348 <__alt_mem_epcs_flash_controller_0+0xff804348>
  80d3d8:	0005883a 	mov	r2,zero
  80d3dc:	003ff706 	br	80d3bc <__alt_mem_epcs_flash_controller_0+0xff8043bc>

0080d3e0 <__fixdfsi>:
  80d3e0:	280cd53a 	srli	r6,r5,20
  80d3e4:	00c00434 	movhi	r3,16
  80d3e8:	18ffffc4 	addi	r3,r3,-1
  80d3ec:	3181ffcc 	andi	r6,r6,2047
  80d3f0:	01c0ff84 	movi	r7,1022
  80d3f4:	28c6703a 	and	r3,r5,r3
  80d3f8:	280ad7fa 	srli	r5,r5,31
  80d3fc:	3980120e 	bge	r7,r6,80d448 <__fixdfsi+0x68>
  80d400:	00810744 	movi	r2,1053
  80d404:	11800c16 	blt	r2,r6,80d438 <__fixdfsi+0x58>
  80d408:	00810cc4 	movi	r2,1075
  80d40c:	1185c83a 	sub	r2,r2,r6
  80d410:	01c007c4 	movi	r7,31
  80d414:	18c00434 	orhi	r3,r3,16
  80d418:	38800d16 	blt	r7,r2,80d450 <__fixdfsi+0x70>
  80d41c:	31befb44 	addi	r6,r6,-1043
  80d420:	2084d83a 	srl	r2,r4,r2
  80d424:	1986983a 	sll	r3,r3,r6
  80d428:	1884b03a 	or	r2,r3,r2
  80d42c:	28000726 	beq	r5,zero,80d44c <__fixdfsi+0x6c>
  80d430:	0085c83a 	sub	r2,zero,r2
  80d434:	f800283a 	ret
  80d438:	00a00034 	movhi	r2,32768
  80d43c:	10bfffc4 	addi	r2,r2,-1
  80d440:	2885883a 	add	r2,r5,r2
  80d444:	f800283a 	ret
  80d448:	0005883a 	mov	r2,zero
  80d44c:	f800283a 	ret
  80d450:	008104c4 	movi	r2,1043
  80d454:	1185c83a 	sub	r2,r2,r6
  80d458:	1884d83a 	srl	r2,r3,r2
  80d45c:	003ff306 	br	80d42c <__alt_mem_epcs_flash_controller_0+0xff80442c>

0080d460 <__floatsidf>:
  80d460:	defffd04 	addi	sp,sp,-12
  80d464:	dfc00215 	stw	ra,8(sp)
  80d468:	dc400115 	stw	r17,4(sp)
  80d46c:	dc000015 	stw	r16,0(sp)
  80d470:	20002b26 	beq	r4,zero,80d520 <__floatsidf+0xc0>
  80d474:	2023883a 	mov	r17,r4
  80d478:	2020d7fa 	srli	r16,r4,31
  80d47c:	20002d16 	blt	r4,zero,80d534 <__floatsidf+0xd4>
  80d480:	8809883a 	mov	r4,r17
  80d484:	080d5e40 	call	80d5e4 <__clzsi2>
  80d488:	01410784 	movi	r5,1054
  80d48c:	288bc83a 	sub	r5,r5,r2
  80d490:	01010cc4 	movi	r4,1075
  80d494:	2149c83a 	sub	r4,r4,r5
  80d498:	00c007c4 	movi	r3,31
  80d49c:	1900160e 	bge	r3,r4,80d4f8 <__floatsidf+0x98>
  80d4a0:	00c104c4 	movi	r3,1043
  80d4a4:	1947c83a 	sub	r3,r3,r5
  80d4a8:	88c6983a 	sll	r3,r17,r3
  80d4ac:	00800434 	movhi	r2,16
  80d4b0:	10bfffc4 	addi	r2,r2,-1
  80d4b4:	1886703a 	and	r3,r3,r2
  80d4b8:	2941ffcc 	andi	r5,r5,2047
  80d4bc:	800d883a 	mov	r6,r16
  80d4c0:	0005883a 	mov	r2,zero
  80d4c4:	280a953a 	slli	r5,r5,20
  80d4c8:	31803fcc 	andi	r6,r6,255
  80d4cc:	01000434 	movhi	r4,16
  80d4d0:	300c97fa 	slli	r6,r6,31
  80d4d4:	213fffc4 	addi	r4,r4,-1
  80d4d8:	1906703a 	and	r3,r3,r4
  80d4dc:	1946b03a 	or	r3,r3,r5
  80d4e0:	1986b03a 	or	r3,r3,r6
  80d4e4:	dfc00217 	ldw	ra,8(sp)
  80d4e8:	dc400117 	ldw	r17,4(sp)
  80d4ec:	dc000017 	ldw	r16,0(sp)
  80d4f0:	dec00304 	addi	sp,sp,12
  80d4f4:	f800283a 	ret
  80d4f8:	00c002c4 	movi	r3,11
  80d4fc:	1887c83a 	sub	r3,r3,r2
  80d500:	88c6d83a 	srl	r3,r17,r3
  80d504:	8904983a 	sll	r2,r17,r4
  80d508:	01000434 	movhi	r4,16
  80d50c:	213fffc4 	addi	r4,r4,-1
  80d510:	2941ffcc 	andi	r5,r5,2047
  80d514:	1906703a 	and	r3,r3,r4
  80d518:	800d883a 	mov	r6,r16
  80d51c:	003fe906 	br	80d4c4 <__alt_mem_epcs_flash_controller_0+0xff8044c4>
  80d520:	000d883a 	mov	r6,zero
  80d524:	000b883a 	mov	r5,zero
  80d528:	0007883a 	mov	r3,zero
  80d52c:	0005883a 	mov	r2,zero
  80d530:	003fe406 	br	80d4c4 <__alt_mem_epcs_flash_controller_0+0xff8044c4>
  80d534:	0123c83a 	sub	r17,zero,r4
  80d538:	003fd106 	br	80d480 <__alt_mem_epcs_flash_controller_0+0xff804480>

0080d53c <__floatunsidf>:
  80d53c:	defffe04 	addi	sp,sp,-8
  80d540:	dc000015 	stw	r16,0(sp)
  80d544:	dfc00115 	stw	ra,4(sp)
  80d548:	2021883a 	mov	r16,r4
  80d54c:	20002226 	beq	r4,zero,80d5d8 <__floatunsidf+0x9c>
  80d550:	080d5e40 	call	80d5e4 <__clzsi2>
  80d554:	01010784 	movi	r4,1054
  80d558:	2089c83a 	sub	r4,r4,r2
  80d55c:	01810cc4 	movi	r6,1075
  80d560:	310dc83a 	sub	r6,r6,r4
  80d564:	00c007c4 	movi	r3,31
  80d568:	1980120e 	bge	r3,r6,80d5b4 <__floatunsidf+0x78>
  80d56c:	00c104c4 	movi	r3,1043
  80d570:	1907c83a 	sub	r3,r3,r4
  80d574:	80ca983a 	sll	r5,r16,r3
  80d578:	00800434 	movhi	r2,16
  80d57c:	10bfffc4 	addi	r2,r2,-1
  80d580:	2101ffcc 	andi	r4,r4,2047
  80d584:	0021883a 	mov	r16,zero
  80d588:	288a703a 	and	r5,r5,r2
  80d58c:	2008953a 	slli	r4,r4,20
  80d590:	00c00434 	movhi	r3,16
  80d594:	18ffffc4 	addi	r3,r3,-1
  80d598:	28c6703a 	and	r3,r5,r3
  80d59c:	8005883a 	mov	r2,r16
  80d5a0:	1906b03a 	or	r3,r3,r4
  80d5a4:	dfc00117 	ldw	ra,4(sp)
  80d5a8:	dc000017 	ldw	r16,0(sp)
  80d5ac:	dec00204 	addi	sp,sp,8
  80d5b0:	f800283a 	ret
  80d5b4:	00c002c4 	movi	r3,11
  80d5b8:	188bc83a 	sub	r5,r3,r2
  80d5bc:	814ad83a 	srl	r5,r16,r5
  80d5c0:	00c00434 	movhi	r3,16
  80d5c4:	18ffffc4 	addi	r3,r3,-1
  80d5c8:	81a0983a 	sll	r16,r16,r6
  80d5cc:	2101ffcc 	andi	r4,r4,2047
  80d5d0:	28ca703a 	and	r5,r5,r3
  80d5d4:	003fed06 	br	80d58c <__alt_mem_epcs_flash_controller_0+0xff80458c>
  80d5d8:	0009883a 	mov	r4,zero
  80d5dc:	000b883a 	mov	r5,zero
  80d5e0:	003fea06 	br	80d58c <__alt_mem_epcs_flash_controller_0+0xff80458c>

0080d5e4 <__clzsi2>:
  80d5e4:	00bfffd4 	movui	r2,65535
  80d5e8:	11000536 	bltu	r2,r4,80d600 <__clzsi2+0x1c>
  80d5ec:	00803fc4 	movi	r2,255
  80d5f0:	11000f36 	bltu	r2,r4,80d630 <__clzsi2+0x4c>
  80d5f4:	00800804 	movi	r2,32
  80d5f8:	0007883a 	mov	r3,zero
  80d5fc:	00000506 	br	80d614 <__clzsi2+0x30>
  80d600:	00804034 	movhi	r2,256
  80d604:	10bfffc4 	addi	r2,r2,-1
  80d608:	11000c2e 	bgeu	r2,r4,80d63c <__clzsi2+0x58>
  80d60c:	00800204 	movi	r2,8
  80d610:	00c00604 	movi	r3,24
  80d614:	20c8d83a 	srl	r4,r4,r3
  80d618:	00c020b4 	movhi	r3,130
  80d61c:	18e86c04 	addi	r3,r3,-24144
  80d620:	1909883a 	add	r4,r3,r4
  80d624:	20c00003 	ldbu	r3,0(r4)
  80d628:	10c5c83a 	sub	r2,r2,r3
  80d62c:	f800283a 	ret
  80d630:	00800604 	movi	r2,24
  80d634:	00c00204 	movi	r3,8
  80d638:	003ff606 	br	80d614 <__alt_mem_epcs_flash_controller_0+0xff804614>
  80d63c:	00800404 	movi	r2,16
  80d640:	1007883a 	mov	r3,r2
  80d644:	003ff306 	br	80d614 <__alt_mem_epcs_flash_controller_0+0xff804614>

0080d648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d648:	defffe04 	addi	sp,sp,-8
  80d64c:	dfc00115 	stw	ra,4(sp)
  80d650:	df000015 	stw	fp,0(sp)
  80d654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d658:	d0a02717 	ldw	r2,-32612(gp)
  80d65c:	10000326 	beq	r2,zero,80d66c <alt_get_errno+0x24>
  80d660:	d0a02717 	ldw	r2,-32612(gp)
  80d664:	103ee83a 	callr	r2
  80d668:	00000106 	br	80d670 <alt_get_errno+0x28>
  80d66c:	d0a05904 	addi	r2,gp,-32412
}
  80d670:	e037883a 	mov	sp,fp
  80d674:	dfc00117 	ldw	ra,4(sp)
  80d678:	df000017 	ldw	fp,0(sp)
  80d67c:	dec00204 	addi	sp,sp,8
  80d680:	f800283a 	ret

0080d684 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d684:	defffb04 	addi	sp,sp,-20
  80d688:	dfc00415 	stw	ra,16(sp)
  80d68c:	df000315 	stw	fp,12(sp)
  80d690:	df000304 	addi	fp,sp,12
  80d694:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d698:	e0bfff17 	ldw	r2,-4(fp)
  80d69c:	10000816 	blt	r2,zero,80d6c0 <close+0x3c>
  80d6a0:	01400304 	movi	r5,12
  80d6a4:	e13fff17 	ldw	r4,-4(fp)
  80d6a8:	080ad7c0 	call	80ad7c <__mulsi3>
  80d6ac:	1007883a 	mov	r3,r2
  80d6b0:	008020b4 	movhi	r2,130
  80d6b4:	10ab4504 	addi	r2,r2,-21228
  80d6b8:	1885883a 	add	r2,r3,r2
  80d6bc:	00000106 	br	80d6c4 <close+0x40>
  80d6c0:	0005883a 	mov	r2,zero
  80d6c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80d6c8:	e0bffd17 	ldw	r2,-12(fp)
  80d6cc:	10001926 	beq	r2,zero,80d734 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d6d0:	e0bffd17 	ldw	r2,-12(fp)
  80d6d4:	10800017 	ldw	r2,0(r2)
  80d6d8:	10800417 	ldw	r2,16(r2)
  80d6dc:	10000626 	beq	r2,zero,80d6f8 <close+0x74>
  80d6e0:	e0bffd17 	ldw	r2,-12(fp)
  80d6e4:	10800017 	ldw	r2,0(r2)
  80d6e8:	10800417 	ldw	r2,16(r2)
  80d6ec:	e13ffd17 	ldw	r4,-12(fp)
  80d6f0:	103ee83a 	callr	r2
  80d6f4:	00000106 	br	80d6fc <close+0x78>
  80d6f8:	0005883a 	mov	r2,zero
  80d6fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d700:	e13fff17 	ldw	r4,-4(fp)
  80d704:	080df180 	call	80df18 <alt_release_fd>
    if (rval < 0)
  80d708:	e0bffe17 	ldw	r2,-8(fp)
  80d70c:	1000070e 	bge	r2,zero,80d72c <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80d710:	080d6480 	call	80d648 <alt_get_errno>
  80d714:	1007883a 	mov	r3,r2
  80d718:	e0bffe17 	ldw	r2,-8(fp)
  80d71c:	0085c83a 	sub	r2,zero,r2
  80d720:	18800015 	stw	r2,0(r3)
      return -1;
  80d724:	00bfffc4 	movi	r2,-1
  80d728:	00000706 	br	80d748 <close+0xc4>
    }
    return 0;
  80d72c:	0005883a 	mov	r2,zero
  80d730:	00000506 	br	80d748 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d734:	080d6480 	call	80d648 <alt_get_errno>
  80d738:	1007883a 	mov	r3,r2
  80d73c:	00801444 	movi	r2,81
  80d740:	18800015 	stw	r2,0(r3)
    return -1;
  80d744:	00bfffc4 	movi	r2,-1
  }
}
  80d748:	e037883a 	mov	sp,fp
  80d74c:	dfc00117 	ldw	ra,4(sp)
  80d750:	df000017 	ldw	fp,0(sp)
  80d754:	dec00204 	addi	sp,sp,8
  80d758:	f800283a 	ret

0080d75c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d75c:	defffc04 	addi	sp,sp,-16
  80d760:	df000315 	stw	fp,12(sp)
  80d764:	df000304 	addi	fp,sp,12
  80d768:	e13ffd15 	stw	r4,-12(fp)
  80d76c:	e17ffe15 	stw	r5,-8(fp)
  80d770:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d774:	e0bfff17 	ldw	r2,-4(fp)
}
  80d778:	e037883a 	mov	sp,fp
  80d77c:	df000017 	ldw	fp,0(sp)
  80d780:	dec00104 	addi	sp,sp,4
  80d784:	f800283a 	ret

0080d788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d788:	defffe04 	addi	sp,sp,-8
  80d78c:	dfc00115 	stw	ra,4(sp)
  80d790:	df000015 	stw	fp,0(sp)
  80d794:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d798:	d0a02717 	ldw	r2,-32612(gp)
  80d79c:	10000326 	beq	r2,zero,80d7ac <alt_get_errno+0x24>
  80d7a0:	d0a02717 	ldw	r2,-32612(gp)
  80d7a4:	103ee83a 	callr	r2
  80d7a8:	00000106 	br	80d7b0 <alt_get_errno+0x28>
  80d7ac:	d0a05904 	addi	r2,gp,-32412
}
  80d7b0:	e037883a 	mov	sp,fp
  80d7b4:	dfc00117 	ldw	ra,4(sp)
  80d7b8:	df000017 	ldw	fp,0(sp)
  80d7bc:	dec00204 	addi	sp,sp,8
  80d7c0:	f800283a 	ret

0080d7c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80d7c4:	defffb04 	addi	sp,sp,-20
  80d7c8:	dfc00415 	stw	ra,16(sp)
  80d7cc:	df000315 	stw	fp,12(sp)
  80d7d0:	df000304 	addi	fp,sp,12
  80d7d4:	e13ffe15 	stw	r4,-8(fp)
  80d7d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d7dc:	e0bffe17 	ldw	r2,-8(fp)
  80d7e0:	10000816 	blt	r2,zero,80d804 <fstat+0x40>
  80d7e4:	01400304 	movi	r5,12
  80d7e8:	e13ffe17 	ldw	r4,-8(fp)
  80d7ec:	080ad7c0 	call	80ad7c <__mulsi3>
  80d7f0:	1007883a 	mov	r3,r2
  80d7f4:	008020b4 	movhi	r2,130
  80d7f8:	10ab4504 	addi	r2,r2,-21228
  80d7fc:	1885883a 	add	r2,r3,r2
  80d800:	00000106 	br	80d808 <fstat+0x44>
  80d804:	0005883a 	mov	r2,zero
  80d808:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80d80c:	e0bffd17 	ldw	r2,-12(fp)
  80d810:	10001026 	beq	r2,zero,80d854 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80d814:	e0bffd17 	ldw	r2,-12(fp)
  80d818:	10800017 	ldw	r2,0(r2)
  80d81c:	10800817 	ldw	r2,32(r2)
  80d820:	10000726 	beq	r2,zero,80d840 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80d824:	e0bffd17 	ldw	r2,-12(fp)
  80d828:	10800017 	ldw	r2,0(r2)
  80d82c:	10800817 	ldw	r2,32(r2)
  80d830:	e17fff17 	ldw	r5,-4(fp)
  80d834:	e13ffd17 	ldw	r4,-12(fp)
  80d838:	103ee83a 	callr	r2
  80d83c:	00000a06 	br	80d868 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80d840:	e0bfff17 	ldw	r2,-4(fp)
  80d844:	00c80004 	movi	r3,8192
  80d848:	10c00115 	stw	r3,4(r2)
      return 0;
  80d84c:	0005883a 	mov	r2,zero
  80d850:	00000506 	br	80d868 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d854:	080d7880 	call	80d788 <alt_get_errno>
  80d858:	1007883a 	mov	r3,r2
  80d85c:	00801444 	movi	r2,81
  80d860:	18800015 	stw	r2,0(r3)
    return -1;
  80d864:	00bfffc4 	movi	r2,-1
  }
}
  80d868:	e037883a 	mov	sp,fp
  80d86c:	dfc00117 	ldw	ra,4(sp)
  80d870:	df000017 	ldw	fp,0(sp)
  80d874:	dec00204 	addi	sp,sp,8
  80d878:	f800283a 	ret

0080d87c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d87c:	defff904 	addi	sp,sp,-28
  80d880:	dfc00615 	stw	ra,24(sp)
  80d884:	df000515 	stw	fp,20(sp)
  80d888:	df000504 	addi	fp,sp,20
  80d88c:	e13ffc15 	stw	r4,-16(fp)
  80d890:	e17ffd15 	stw	r5,-12(fp)
  80d894:	e1bffe15 	stw	r6,-8(fp)
  80d898:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80d89c:	e0800217 	ldw	r2,8(fp)
  80d8a0:	d8800015 	stw	r2,0(sp)
  80d8a4:	e1ffff17 	ldw	r7,-4(fp)
  80d8a8:	e1bffe17 	ldw	r6,-8(fp)
  80d8ac:	e17ffd17 	ldw	r5,-12(fp)
  80d8b0:	e13ffc17 	ldw	r4,-16(fp)
  80d8b4:	080da2c0 	call	80da2c <alt_iic_isr_register>
}  
  80d8b8:	e037883a 	mov	sp,fp
  80d8bc:	dfc00117 	ldw	ra,4(sp)
  80d8c0:	df000017 	ldw	fp,0(sp)
  80d8c4:	dec00204 	addi	sp,sp,8
  80d8c8:	f800283a 	ret

0080d8cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80d8cc:	defff904 	addi	sp,sp,-28
  80d8d0:	df000615 	stw	fp,24(sp)
  80d8d4:	df000604 	addi	fp,sp,24
  80d8d8:	e13ffe15 	stw	r4,-8(fp)
  80d8dc:	e17fff15 	stw	r5,-4(fp)
  80d8e0:	e0bfff17 	ldw	r2,-4(fp)
  80d8e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d8e8:	0005303a 	rdctl	r2,status
  80d8ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d8f0:	e0fffb17 	ldw	r3,-20(fp)
  80d8f4:	00bfff84 	movi	r2,-2
  80d8f8:	1884703a 	and	r2,r3,r2
  80d8fc:	1001703a 	wrctl	status,r2
  
  return context;
  80d900:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d904:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80d908:	00c00044 	movi	r3,1
  80d90c:	e0bffa17 	ldw	r2,-24(fp)
  80d910:	1884983a 	sll	r2,r3,r2
  80d914:	1007883a 	mov	r3,r2
  80d918:	d0a05b17 	ldw	r2,-32404(gp)
  80d91c:	1884b03a 	or	r2,r3,r2
  80d920:	d0a05b15 	stw	r2,-32404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d924:	d0a05b17 	ldw	r2,-32404(gp)
  80d928:	100170fa 	wrctl	ienable,r2
  80d92c:	e0bffc17 	ldw	r2,-16(fp)
  80d930:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d934:	e0bffd17 	ldw	r2,-12(fp)
  80d938:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d93c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80d940:	0001883a 	nop
}
  80d944:	e037883a 	mov	sp,fp
  80d948:	df000017 	ldw	fp,0(sp)
  80d94c:	dec00104 	addi	sp,sp,4
  80d950:	f800283a 	ret

0080d954 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80d954:	defff904 	addi	sp,sp,-28
  80d958:	df000615 	stw	fp,24(sp)
  80d95c:	df000604 	addi	fp,sp,24
  80d960:	e13ffe15 	stw	r4,-8(fp)
  80d964:	e17fff15 	stw	r5,-4(fp)
  80d968:	e0bfff17 	ldw	r2,-4(fp)
  80d96c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d970:	0005303a 	rdctl	r2,status
  80d974:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d978:	e0fffb17 	ldw	r3,-20(fp)
  80d97c:	00bfff84 	movi	r2,-2
  80d980:	1884703a 	and	r2,r3,r2
  80d984:	1001703a 	wrctl	status,r2
  
  return context;
  80d988:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d98c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80d990:	00c00044 	movi	r3,1
  80d994:	e0bffa17 	ldw	r2,-24(fp)
  80d998:	1884983a 	sll	r2,r3,r2
  80d99c:	0084303a 	nor	r2,zero,r2
  80d9a0:	1007883a 	mov	r3,r2
  80d9a4:	d0a05b17 	ldw	r2,-32404(gp)
  80d9a8:	1884703a 	and	r2,r3,r2
  80d9ac:	d0a05b15 	stw	r2,-32404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d9b0:	d0a05b17 	ldw	r2,-32404(gp)
  80d9b4:	100170fa 	wrctl	ienable,r2
  80d9b8:	e0bffc17 	ldw	r2,-16(fp)
  80d9bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d9c0:	e0bffd17 	ldw	r2,-12(fp)
  80d9c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d9c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80d9cc:	0001883a 	nop
}
  80d9d0:	e037883a 	mov	sp,fp
  80d9d4:	df000017 	ldw	fp,0(sp)
  80d9d8:	dec00104 	addi	sp,sp,4
  80d9dc:	f800283a 	ret

0080d9e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80d9e0:	defffc04 	addi	sp,sp,-16
  80d9e4:	df000315 	stw	fp,12(sp)
  80d9e8:	df000304 	addi	fp,sp,12
  80d9ec:	e13ffe15 	stw	r4,-8(fp)
  80d9f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80d9f4:	000530fa 	rdctl	r2,ienable
  80d9f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80d9fc:	00c00044 	movi	r3,1
  80da00:	e0bfff17 	ldw	r2,-4(fp)
  80da04:	1884983a 	sll	r2,r3,r2
  80da08:	1007883a 	mov	r3,r2
  80da0c:	e0bffd17 	ldw	r2,-12(fp)
  80da10:	1884703a 	and	r2,r3,r2
  80da14:	1004c03a 	cmpne	r2,r2,zero
  80da18:	10803fcc 	andi	r2,r2,255
}
  80da1c:	e037883a 	mov	sp,fp
  80da20:	df000017 	ldw	fp,0(sp)
  80da24:	dec00104 	addi	sp,sp,4
  80da28:	f800283a 	ret

0080da2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80da2c:	defff504 	addi	sp,sp,-44
  80da30:	dfc00a15 	stw	ra,40(sp)
  80da34:	df000915 	stw	fp,36(sp)
  80da38:	df000904 	addi	fp,sp,36
  80da3c:	e13ffc15 	stw	r4,-16(fp)
  80da40:	e17ffd15 	stw	r5,-12(fp)
  80da44:	e1bffe15 	stw	r6,-8(fp)
  80da48:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80da4c:	00bffa84 	movi	r2,-22
  80da50:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80da54:	e0bffd17 	ldw	r2,-12(fp)
  80da58:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80da5c:	e0bff817 	ldw	r2,-32(fp)
  80da60:	10800808 	cmpgei	r2,r2,32
  80da64:	1000271e 	bne	r2,zero,80db04 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da68:	0005303a 	rdctl	r2,status
  80da6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da70:	e0fffb17 	ldw	r3,-20(fp)
  80da74:	00bfff84 	movi	r2,-2
  80da78:	1884703a 	and	r2,r3,r2
  80da7c:	1001703a 	wrctl	status,r2
  
  return context;
  80da80:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80da84:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80da88:	008020b4 	movhi	r2,130
  80da8c:	108ae504 	addi	r2,r2,11156
  80da90:	e0fff817 	ldw	r3,-32(fp)
  80da94:	180690fa 	slli	r3,r3,3
  80da98:	10c5883a 	add	r2,r2,r3
  80da9c:	e0fffe17 	ldw	r3,-8(fp)
  80daa0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80daa4:	008020b4 	movhi	r2,130
  80daa8:	108ae504 	addi	r2,r2,11156
  80daac:	e0fff817 	ldw	r3,-32(fp)
  80dab0:	180690fa 	slli	r3,r3,3
  80dab4:	10c5883a 	add	r2,r2,r3
  80dab8:	10800104 	addi	r2,r2,4
  80dabc:	e0ffff17 	ldw	r3,-4(fp)
  80dac0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80dac4:	e0bffe17 	ldw	r2,-8(fp)
  80dac8:	10000526 	beq	r2,zero,80dae0 <alt_iic_isr_register+0xb4>
  80dacc:	e0bff817 	ldw	r2,-32(fp)
  80dad0:	100b883a 	mov	r5,r2
  80dad4:	e13ffc17 	ldw	r4,-16(fp)
  80dad8:	080d8cc0 	call	80d8cc <alt_ic_irq_enable>
  80dadc:	00000406 	br	80daf0 <alt_iic_isr_register+0xc4>
  80dae0:	e0bff817 	ldw	r2,-32(fp)
  80dae4:	100b883a 	mov	r5,r2
  80dae8:	e13ffc17 	ldw	r4,-16(fp)
  80daec:	080d9540 	call	80d954 <alt_ic_irq_disable>
  80daf0:	e0bff715 	stw	r2,-36(fp)
  80daf4:	e0bffa17 	ldw	r2,-24(fp)
  80daf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dafc:	e0bff917 	ldw	r2,-28(fp)
  80db00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80db04:	e0bff717 	ldw	r2,-36(fp)
}
  80db08:	e037883a 	mov	sp,fp
  80db0c:	dfc00117 	ldw	ra,4(sp)
  80db10:	df000017 	ldw	fp,0(sp)
  80db14:	dec00204 	addi	sp,sp,8
  80db18:	f800283a 	ret

0080db1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80db1c:	defffe04 	addi	sp,sp,-8
  80db20:	dfc00115 	stw	ra,4(sp)
  80db24:	df000015 	stw	fp,0(sp)
  80db28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80db2c:	d0a02717 	ldw	r2,-32612(gp)
  80db30:	10000326 	beq	r2,zero,80db40 <alt_get_errno+0x24>
  80db34:	d0a02717 	ldw	r2,-32612(gp)
  80db38:	103ee83a 	callr	r2
  80db3c:	00000106 	br	80db44 <alt_get_errno+0x28>
  80db40:	d0a05904 	addi	r2,gp,-32412
}
  80db44:	e037883a 	mov	sp,fp
  80db48:	dfc00117 	ldw	ra,4(sp)
  80db4c:	df000017 	ldw	fp,0(sp)
  80db50:	dec00204 	addi	sp,sp,8
  80db54:	f800283a 	ret

0080db58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80db58:	deffed04 	addi	sp,sp,-76
  80db5c:	dfc01215 	stw	ra,72(sp)
  80db60:	df001115 	stw	fp,68(sp)
  80db64:	df001104 	addi	fp,sp,68
  80db68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80db6c:	e0bfff17 	ldw	r2,-4(fp)
  80db70:	10000816 	blt	r2,zero,80db94 <isatty+0x3c>
  80db74:	01400304 	movi	r5,12
  80db78:	e13fff17 	ldw	r4,-4(fp)
  80db7c:	080ad7c0 	call	80ad7c <__mulsi3>
  80db80:	1007883a 	mov	r3,r2
  80db84:	008020b4 	movhi	r2,130
  80db88:	10ab4504 	addi	r2,r2,-21228
  80db8c:	1885883a 	add	r2,r3,r2
  80db90:	00000106 	br	80db98 <isatty+0x40>
  80db94:	0005883a 	mov	r2,zero
  80db98:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80db9c:	e0bfef17 	ldw	r2,-68(fp)
  80dba0:	10000e26 	beq	r2,zero,80dbdc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80dba4:	e0bfef17 	ldw	r2,-68(fp)
  80dba8:	10800017 	ldw	r2,0(r2)
  80dbac:	10800817 	ldw	r2,32(r2)
  80dbb0:	1000021e 	bne	r2,zero,80dbbc <isatty+0x64>
    {
      return 1;
  80dbb4:	00800044 	movi	r2,1
  80dbb8:	00000d06 	br	80dbf0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80dbbc:	e0bff004 	addi	r2,fp,-64
  80dbc0:	100b883a 	mov	r5,r2
  80dbc4:	e13fff17 	ldw	r4,-4(fp)
  80dbc8:	080d7c40 	call	80d7c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80dbcc:	e0bff117 	ldw	r2,-60(fp)
  80dbd0:	10880020 	cmpeqi	r2,r2,8192
  80dbd4:	10803fcc 	andi	r2,r2,255
  80dbd8:	00000506 	br	80dbf0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dbdc:	080db1c0 	call	80db1c <alt_get_errno>
  80dbe0:	1007883a 	mov	r3,r2
  80dbe4:	00801444 	movi	r2,81
  80dbe8:	18800015 	stw	r2,0(r3)
    return 0;
  80dbec:	0005883a 	mov	r2,zero
  }
}
  80dbf0:	e037883a 	mov	sp,fp
  80dbf4:	dfc00117 	ldw	ra,4(sp)
  80dbf8:	df000017 	ldw	fp,0(sp)
  80dbfc:	dec00204 	addi	sp,sp,8
  80dc00:	f800283a 	ret

0080dc04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc04:	defffe04 	addi	sp,sp,-8
  80dc08:	dfc00115 	stw	ra,4(sp)
  80dc0c:	df000015 	stw	fp,0(sp)
  80dc10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc14:	d0a02717 	ldw	r2,-32612(gp)
  80dc18:	10000326 	beq	r2,zero,80dc28 <alt_get_errno+0x24>
  80dc1c:	d0a02717 	ldw	r2,-32612(gp)
  80dc20:	103ee83a 	callr	r2
  80dc24:	00000106 	br	80dc2c <alt_get_errno+0x28>
  80dc28:	d0a05904 	addi	r2,gp,-32412
}
  80dc2c:	e037883a 	mov	sp,fp
  80dc30:	dfc00117 	ldw	ra,4(sp)
  80dc34:	df000017 	ldw	fp,0(sp)
  80dc38:	dec00204 	addi	sp,sp,8
  80dc3c:	f800283a 	ret

0080dc40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80dc40:	defff904 	addi	sp,sp,-28
  80dc44:	dfc00615 	stw	ra,24(sp)
  80dc48:	df000515 	stw	fp,20(sp)
  80dc4c:	df000504 	addi	fp,sp,20
  80dc50:	e13ffd15 	stw	r4,-12(fp)
  80dc54:	e17ffe15 	stw	r5,-8(fp)
  80dc58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80dc5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dc60:	e0bffd17 	ldw	r2,-12(fp)
  80dc64:	10000816 	blt	r2,zero,80dc88 <lseek+0x48>
  80dc68:	01400304 	movi	r5,12
  80dc6c:	e13ffd17 	ldw	r4,-12(fp)
  80dc70:	080ad7c0 	call	80ad7c <__mulsi3>
  80dc74:	1007883a 	mov	r3,r2
  80dc78:	008020b4 	movhi	r2,130
  80dc7c:	10ab4504 	addi	r2,r2,-21228
  80dc80:	1885883a 	add	r2,r3,r2
  80dc84:	00000106 	br	80dc8c <lseek+0x4c>
  80dc88:	0005883a 	mov	r2,zero
  80dc8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80dc90:	e0bffc17 	ldw	r2,-16(fp)
  80dc94:	10001026 	beq	r2,zero,80dcd8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80dc98:	e0bffc17 	ldw	r2,-16(fp)
  80dc9c:	10800017 	ldw	r2,0(r2)
  80dca0:	10800717 	ldw	r2,28(r2)
  80dca4:	10000926 	beq	r2,zero,80dccc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80dca8:	e0bffc17 	ldw	r2,-16(fp)
  80dcac:	10800017 	ldw	r2,0(r2)
  80dcb0:	10800717 	ldw	r2,28(r2)
  80dcb4:	e1bfff17 	ldw	r6,-4(fp)
  80dcb8:	e17ffe17 	ldw	r5,-8(fp)
  80dcbc:	e13ffc17 	ldw	r4,-16(fp)
  80dcc0:	103ee83a 	callr	r2
  80dcc4:	e0bffb15 	stw	r2,-20(fp)
  80dcc8:	00000506 	br	80dce0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80dccc:	00bfde84 	movi	r2,-134
  80dcd0:	e0bffb15 	stw	r2,-20(fp)
  80dcd4:	00000206 	br	80dce0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80dcd8:	00bfebc4 	movi	r2,-81
  80dcdc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80dce0:	e0bffb17 	ldw	r2,-20(fp)
  80dce4:	1000070e 	bge	r2,zero,80dd04 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  80dce8:	080dc040 	call	80dc04 <alt_get_errno>
  80dcec:	1007883a 	mov	r3,r2
  80dcf0:	e0bffb17 	ldw	r2,-20(fp)
  80dcf4:	0085c83a 	sub	r2,zero,r2
  80dcf8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80dcfc:	00bfffc4 	movi	r2,-1
  80dd00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80dd04:	e0bffb17 	ldw	r2,-20(fp)
}
  80dd08:	e037883a 	mov	sp,fp
  80dd0c:	dfc00117 	ldw	ra,4(sp)
  80dd10:	df000017 	ldw	fp,0(sp)
  80dd14:	dec00204 	addi	sp,sp,8
  80dd18:	f800283a 	ret

0080dd1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80dd1c:	defff904 	addi	sp,sp,-28
  80dd20:	dfc00615 	stw	ra,24(sp)
  80dd24:	df000515 	stw	fp,20(sp)
  80dd28:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80dd2c:	0009883a 	mov	r4,zero
  80dd30:	0815cc40 	call	815cc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80dd34:	080ed080 	call	80ed08 <OSInit>
  80dd38:	01000044 	movi	r4,1
  80dd3c:	08136640 	call	813664 <OSSemCreate>
  80dd40:	d0a06015 	stw	r2,-32384(gp)
  80dd44:	01000044 	movi	r4,1
  80dd48:	08136640 	call	813664 <OSSemCreate>
  80dd4c:	d0a06215 	stw	r2,-32376(gp)
  80dd50:	d0a05a04 	addi	r2,gp,-32408
  80dd54:	e0bffc15 	stw	r2,-16(fp)
  80dd58:	00800044 	movi	r2,1
  80dd5c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80dd60:	e0bffd0b 	ldhu	r2,-12(fp)
  80dd64:	1009883a 	mov	r4,r2
  80dd68:	08136640 	call	813664 <OSSemCreate>
  80dd6c:	1007883a 	mov	r3,r2
  80dd70:	e0bffc17 	ldw	r2,-16(fp)
  80dd74:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80dd78:	0815cfc0 	call	815cfc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80dd7c:	018020b4 	movhi	r6,130
  80dd80:	31a8af04 	addi	r6,r6,-23876
  80dd84:	014020b4 	movhi	r5,130
  80dd88:	2968af04 	addi	r5,r5,-23876
  80dd8c:	010020b4 	movhi	r4,130
  80dd90:	2128af04 	addi	r4,r4,-23876
  80dd94:	0818d600 	call	818d60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80dd98:	0818a640 	call	818a64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80dd9c:	010020b4 	movhi	r4,130
  80dda0:	2122b104 	addi	r4,r4,-30012
  80dda4:	0819a080 	call	819a08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80dda8:	d0a05c17 	ldw	r2,-32400(gp)
  80ddac:	d0e05d17 	ldw	r3,-32396(gp)
  80ddb0:	d1205e17 	ldw	r4,-32392(gp)
  80ddb4:	200d883a 	mov	r6,r4
  80ddb8:	180b883a 	mov	r5,r3
  80ddbc:	1009883a 	mov	r4,r2
  80ddc0:	080042c0 	call	80042c <main>
  80ddc4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  80ddc8:	01000044 	movi	r4,1
  80ddcc:	080d6840 	call	80d684 <close>
  exit (result);
  80ddd0:	e13ffb17 	ldw	r4,-20(fp)
  80ddd4:	0819a1c0 	call	819a1c <exit>

0080ddd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ddd8:	defffe04 	addi	sp,sp,-8
  80dddc:	dfc00115 	stw	ra,4(sp)
  80dde0:	df000015 	stw	fp,0(sp)
  80dde4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dde8:	d0a02717 	ldw	r2,-32612(gp)
  80ddec:	10000326 	beq	r2,zero,80ddfc <alt_get_errno+0x24>
  80ddf0:	d0a02717 	ldw	r2,-32612(gp)
  80ddf4:	103ee83a 	callr	r2
  80ddf8:	00000106 	br	80de00 <alt_get_errno+0x28>
  80ddfc:	d0a05904 	addi	r2,gp,-32412
}
  80de00:	e037883a 	mov	sp,fp
  80de04:	dfc00117 	ldw	ra,4(sp)
  80de08:	df000017 	ldw	fp,0(sp)
  80de0c:	dec00204 	addi	sp,sp,8
  80de10:	f800283a 	ret

0080de14 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80de14:	defff904 	addi	sp,sp,-28
  80de18:	dfc00615 	stw	ra,24(sp)
  80de1c:	df000515 	stw	fp,20(sp)
  80de20:	df000504 	addi	fp,sp,20
  80de24:	e13ffd15 	stw	r4,-12(fp)
  80de28:	e17ffe15 	stw	r5,-8(fp)
  80de2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80de30:	e0bffd17 	ldw	r2,-12(fp)
  80de34:	10000816 	blt	r2,zero,80de58 <read+0x44>
  80de38:	01400304 	movi	r5,12
  80de3c:	e13ffd17 	ldw	r4,-12(fp)
  80de40:	080ad7c0 	call	80ad7c <__mulsi3>
  80de44:	1007883a 	mov	r3,r2
  80de48:	008020b4 	movhi	r2,130
  80de4c:	10ab4504 	addi	r2,r2,-21228
  80de50:	1885883a 	add	r2,r3,r2
  80de54:	00000106 	br	80de5c <read+0x48>
  80de58:	0005883a 	mov	r2,zero
  80de5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80de60:	e0bffb17 	ldw	r2,-20(fp)
  80de64:	10002226 	beq	r2,zero,80def0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80de68:	e0bffb17 	ldw	r2,-20(fp)
  80de6c:	10800217 	ldw	r2,8(r2)
  80de70:	108000cc 	andi	r2,r2,3
  80de74:	10800060 	cmpeqi	r2,r2,1
  80de78:	1000181e 	bne	r2,zero,80dedc <read+0xc8>
        (fd->dev->read))
  80de7c:	e0bffb17 	ldw	r2,-20(fp)
  80de80:	10800017 	ldw	r2,0(r2)
  80de84:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80de88:	10001426 	beq	r2,zero,80dedc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80de8c:	e0bffb17 	ldw	r2,-20(fp)
  80de90:	10800017 	ldw	r2,0(r2)
  80de94:	10800517 	ldw	r2,20(r2)
  80de98:	e0ffff17 	ldw	r3,-4(fp)
  80de9c:	180d883a 	mov	r6,r3
  80dea0:	e17ffe17 	ldw	r5,-8(fp)
  80dea4:	e13ffb17 	ldw	r4,-20(fp)
  80dea8:	103ee83a 	callr	r2
  80deac:	e0bffc15 	stw	r2,-16(fp)
  80deb0:	e0bffc17 	ldw	r2,-16(fp)
  80deb4:	1000070e 	bge	r2,zero,80ded4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  80deb8:	080ddd80 	call	80ddd8 <alt_get_errno>
  80debc:	1007883a 	mov	r3,r2
  80dec0:	e0bffc17 	ldw	r2,-16(fp)
  80dec4:	0085c83a 	sub	r2,zero,r2
  80dec8:	18800015 	stw	r2,0(r3)
          return -1;
  80decc:	00bfffc4 	movi	r2,-1
  80ded0:	00000c06 	br	80df04 <read+0xf0>
        }
        return rval;
  80ded4:	e0bffc17 	ldw	r2,-16(fp)
  80ded8:	00000a06 	br	80df04 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80dedc:	080ddd80 	call	80ddd8 <alt_get_errno>
  80dee0:	1007883a 	mov	r3,r2
  80dee4:	00800344 	movi	r2,13
  80dee8:	18800015 	stw	r2,0(r3)
  80deec:	00000406 	br	80df00 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80def0:	080ddd80 	call	80ddd8 <alt_get_errno>
  80def4:	1007883a 	mov	r3,r2
  80def8:	00801444 	movi	r2,81
  80defc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80df00:	00bfffc4 	movi	r2,-1
}
  80df04:	e037883a 	mov	sp,fp
  80df08:	dfc00117 	ldw	ra,4(sp)
  80df0c:	df000017 	ldw	fp,0(sp)
  80df10:	dec00204 	addi	sp,sp,8
  80df14:	f800283a 	ret

0080df18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80df18:	defffc04 	addi	sp,sp,-16
  80df1c:	dfc00315 	stw	ra,12(sp)
  80df20:	df000215 	stw	fp,8(sp)
  80df24:	dc000115 	stw	r16,4(sp)
  80df28:	df000204 	addi	fp,sp,8
  80df2c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80df30:	e0bffe17 	ldw	r2,-8(fp)
  80df34:	108000d0 	cmplti	r2,r2,3
  80df38:	1000111e 	bne	r2,zero,80df80 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80df3c:	040020b4 	movhi	r16,130
  80df40:	842b4504 	addi	r16,r16,-21228
  80df44:	e0bffe17 	ldw	r2,-8(fp)
  80df48:	01400304 	movi	r5,12
  80df4c:	1009883a 	mov	r4,r2
  80df50:	080ad7c0 	call	80ad7c <__mulsi3>
  80df54:	8085883a 	add	r2,r16,r2
  80df58:	10800204 	addi	r2,r2,8
  80df5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80df60:	040020b4 	movhi	r16,130
  80df64:	842b4504 	addi	r16,r16,-21228
  80df68:	e0bffe17 	ldw	r2,-8(fp)
  80df6c:	01400304 	movi	r5,12
  80df70:	1009883a 	mov	r4,r2
  80df74:	080ad7c0 	call	80ad7c <__mulsi3>
  80df78:	8085883a 	add	r2,r16,r2
  80df7c:	10000015 	stw	zero,0(r2)
  }
}
  80df80:	0001883a 	nop
  80df84:	e6ffff04 	addi	sp,fp,-4
  80df88:	dfc00217 	ldw	ra,8(sp)
  80df8c:	df000117 	ldw	fp,4(sp)
  80df90:	dc000017 	ldw	r16,0(sp)
  80df94:	dec00304 	addi	sp,sp,12
  80df98:	f800283a 	ret

0080df9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80df9c:	defff904 	addi	sp,sp,-28
  80dfa0:	df000615 	stw	fp,24(sp)
  80dfa4:	df000604 	addi	fp,sp,24
  80dfa8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dfac:	0005303a 	rdctl	r2,status
  80dfb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dfb4:	e0fffe17 	ldw	r3,-8(fp)
  80dfb8:	00bfff84 	movi	r2,-2
  80dfbc:	1884703a 	and	r2,r3,r2
  80dfc0:	1001703a 	wrctl	status,r2
  
  return context;
  80dfc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80dfc8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80dfcc:	d0a02917 	ldw	r2,-32604(gp)
  80dfd0:	10c000c4 	addi	r3,r2,3
  80dfd4:	00bfff04 	movi	r2,-4
  80dfd8:	1884703a 	and	r2,r3,r2
  80dfdc:	d0a02915 	stw	r2,-32604(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80dfe0:	d0e02917 	ldw	r3,-32604(gp)
  80dfe4:	e0bfff17 	ldw	r2,-4(fp)
  80dfe8:	1887883a 	add	r3,r3,r2
  80dfec:	00804034 	movhi	r2,256
  80dff0:	10800004 	addi	r2,r2,0
  80dff4:	10c0062e 	bgeu	r2,r3,80e010 <sbrk+0x74>
  80dff8:	e0bffb17 	ldw	r2,-20(fp)
  80dffc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e000:	e0bffa17 	ldw	r2,-24(fp)
  80e004:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e008:	00bfffc4 	movi	r2,-1
  80e00c:	00000b06 	br	80e03c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e010:	d0a02917 	ldw	r2,-32604(gp)
  80e014:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e018:	d0e02917 	ldw	r3,-32604(gp)
  80e01c:	e0bfff17 	ldw	r2,-4(fp)
  80e020:	1885883a 	add	r2,r3,r2
  80e024:	d0a02915 	stw	r2,-32604(gp)
  80e028:	e0bffb17 	ldw	r2,-20(fp)
  80e02c:	e0bffc15 	stw	r2,-16(fp)
  80e030:	e0bffc17 	ldw	r2,-16(fp)
  80e034:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e038:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e03c:	e037883a 	mov	sp,fp
  80e040:	df000017 	ldw	fp,0(sp)
  80e044:	dec00104 	addi	sp,sp,4
  80e048:	f800283a 	ret

0080e04c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e04c:	defffe04 	addi	sp,sp,-8
  80e050:	dfc00115 	stw	ra,4(sp)
  80e054:	df000015 	stw	fp,0(sp)
  80e058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e05c:	d0a02717 	ldw	r2,-32612(gp)
  80e060:	10000326 	beq	r2,zero,80e070 <alt_get_errno+0x24>
  80e064:	d0a02717 	ldw	r2,-32612(gp)
  80e068:	103ee83a 	callr	r2
  80e06c:	00000106 	br	80e074 <alt_get_errno+0x28>
  80e070:	d0a05904 	addi	r2,gp,-32412
}
  80e074:	e037883a 	mov	sp,fp
  80e078:	dfc00117 	ldw	ra,4(sp)
  80e07c:	df000017 	ldw	fp,0(sp)
  80e080:	dec00204 	addi	sp,sp,8
  80e084:	f800283a 	ret

0080e088 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e088:	defff904 	addi	sp,sp,-28
  80e08c:	dfc00615 	stw	ra,24(sp)
  80e090:	df000515 	stw	fp,20(sp)
  80e094:	df000504 	addi	fp,sp,20
  80e098:	e13ffd15 	stw	r4,-12(fp)
  80e09c:	e17ffe15 	stw	r5,-8(fp)
  80e0a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e0a4:	e0bffd17 	ldw	r2,-12(fp)
  80e0a8:	10000816 	blt	r2,zero,80e0cc <write+0x44>
  80e0ac:	01400304 	movi	r5,12
  80e0b0:	e13ffd17 	ldw	r4,-12(fp)
  80e0b4:	080ad7c0 	call	80ad7c <__mulsi3>
  80e0b8:	1007883a 	mov	r3,r2
  80e0bc:	008020b4 	movhi	r2,130
  80e0c0:	10ab4504 	addi	r2,r2,-21228
  80e0c4:	1885883a 	add	r2,r3,r2
  80e0c8:	00000106 	br	80e0d0 <write+0x48>
  80e0cc:	0005883a 	mov	r2,zero
  80e0d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e0d4:	e0bffb17 	ldw	r2,-20(fp)
  80e0d8:	10002126 	beq	r2,zero,80e160 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e0dc:	e0bffb17 	ldw	r2,-20(fp)
  80e0e0:	10800217 	ldw	r2,8(r2)
  80e0e4:	108000cc 	andi	r2,r2,3
  80e0e8:	10001826 	beq	r2,zero,80e14c <write+0xc4>
  80e0ec:	e0bffb17 	ldw	r2,-20(fp)
  80e0f0:	10800017 	ldw	r2,0(r2)
  80e0f4:	10800617 	ldw	r2,24(r2)
  80e0f8:	10001426 	beq	r2,zero,80e14c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e0fc:	e0bffb17 	ldw	r2,-20(fp)
  80e100:	10800017 	ldw	r2,0(r2)
  80e104:	10800617 	ldw	r2,24(r2)
  80e108:	e0ffff17 	ldw	r3,-4(fp)
  80e10c:	180d883a 	mov	r6,r3
  80e110:	e17ffe17 	ldw	r5,-8(fp)
  80e114:	e13ffb17 	ldw	r4,-20(fp)
  80e118:	103ee83a 	callr	r2
  80e11c:	e0bffc15 	stw	r2,-16(fp)
  80e120:	e0bffc17 	ldw	r2,-16(fp)
  80e124:	1000070e 	bge	r2,zero,80e144 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  80e128:	080e04c0 	call	80e04c <alt_get_errno>
  80e12c:	1007883a 	mov	r3,r2
  80e130:	e0bffc17 	ldw	r2,-16(fp)
  80e134:	0085c83a 	sub	r2,zero,r2
  80e138:	18800015 	stw	r2,0(r3)
        return -1;
  80e13c:	00bfffc4 	movi	r2,-1
  80e140:	00000c06 	br	80e174 <write+0xec>
      }
      return rval;
  80e144:	e0bffc17 	ldw	r2,-16(fp)
  80e148:	00000a06 	br	80e174 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e14c:	080e04c0 	call	80e04c <alt_get_errno>
  80e150:	1007883a 	mov	r3,r2
  80e154:	00800344 	movi	r2,13
  80e158:	18800015 	stw	r2,0(r3)
  80e15c:	00000406 	br	80e170 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e160:	080e04c0 	call	80e04c <alt_get_errno>
  80e164:	1007883a 	mov	r3,r2
  80e168:	00801444 	movi	r2,81
  80e16c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e170:	00bfffc4 	movi	r2,-1
}
  80e174:	e037883a 	mov	sp,fp
  80e178:	dfc00117 	ldw	ra,4(sp)
  80e17c:	df000017 	ldw	fp,0(sp)
  80e180:	dec00204 	addi	sp,sp,8
  80e184:	f800283a 	ret

0080e188 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80e188:	deffdf04 	addi	sp,sp,-132
  80e18c:	dfc02015 	stw	ra,128(sp)
  80e190:	df001f15 	stw	fp,124(sp)
  80e194:	df001f04 	addi	fp,sp,124
  80e198:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80e19c:	e0bfe204 	addi	r2,fp,-120
  80e1a0:	100b883a 	mov	r5,r2
  80e1a4:	01003fc4 	movi	r4,255
  80e1a8:	08155ec0 	call	8155ec <OSTaskQuery>
  80e1ac:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80e1b0:	e0bffe83 	ldbu	r2,-6(fp)
  80e1b4:	10803fcc 	andi	r2,r2,255
  80e1b8:	10001e1e 	bne	r2,zero,80e234 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  80e1bc:	e0bfee83 	ldbu	r2,-70(fp)
  80e1c0:	10803fcc 	andi	r2,r2,255
  80e1c4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80e1c8:	d0a06017 	ldw	r2,-32384(gp)
  80e1cc:	e0fffd04 	addi	r3,fp,-12
  80e1d0:	180b883a 	mov	r5,r3
  80e1d4:	1009883a 	mov	r4,r2
  80e1d8:	0813e040 	call	813e04 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80e1dc:	e0bffe43 	ldbu	r2,-7(fp)
  80e1e0:	10803fcc 	andi	r2,r2,255
  80e1e4:	10000726 	beq	r2,zero,80e204 <__env_lock+0x7c>
  80e1e8:	d0a02a17 	ldw	r2,-32600(gp)
  80e1ec:	e0ffe117 	ldw	r3,-124(fp)
  80e1f0:	1880041e 	bne	r3,r2,80e204 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  80e1f4:	d0a05f17 	ldw	r2,-32388(gp)
  80e1f8:	10800044 	addi	r2,r2,1
  80e1fc:	d0a05f15 	stw	r2,-32388(gp)
  80e200:	00000a06 	br	80e22c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80e204:	d0a06017 	ldw	r2,-32384(gp)
  80e208:	e0fffe84 	addi	r3,fp,-6
  80e20c:	180d883a 	mov	r6,r3
  80e210:	000b883a 	mov	r5,zero
  80e214:	1009883a 	mov	r4,r2
  80e218:	081397c0 	call	81397c <OSSemPend>
    locks  = 1;
  80e21c:	00800044 	movi	r2,1
  80e220:	d0a05f15 	stw	r2,-32388(gp)
    lockid = id;
  80e224:	e0bfe117 	ldw	r2,-124(fp)
  80e228:	d0a02a15 	stw	r2,-32600(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  80e22c:	0001883a 	nop
  80e230:	00000106 	br	80e238 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  80e234:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80e238:	e037883a 	mov	sp,fp
  80e23c:	dfc00117 	ldw	ra,4(sp)
  80e240:	df000017 	ldw	fp,0(sp)
  80e244:	dec00204 	addi	sp,sp,8
  80e248:	f800283a 	ret

0080e24c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80e24c:	defffd04 	addi	sp,sp,-12
  80e250:	dfc00215 	stw	ra,8(sp)
  80e254:	df000115 	stw	fp,4(sp)
  80e258:	df000104 	addi	fp,sp,4
  80e25c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80e260:	d0a05f17 	ldw	r2,-32388(gp)
  80e264:	10000b26 	beq	r2,zero,80e294 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80e268:	d0a05f17 	ldw	r2,-32388(gp)
  80e26c:	10bfffc4 	addi	r2,r2,-1
  80e270:	d0a05f15 	stw	r2,-32388(gp)
  80e274:	d0a05f17 	ldw	r2,-32388(gp)
  80e278:	1000071e 	bne	r2,zero,80e298 <__env_unlock+0x4c>
  {
    lockid = -1;
  80e27c:	00bfffc4 	movi	r2,-1
  80e280:	d0a02a15 	stw	r2,-32600(gp)
    OSSemPost( alt_envsem );
  80e284:	d0a06017 	ldw	r2,-32384(gp)
  80e288:	1009883a 	mov	r4,r2
  80e28c:	0813cf40 	call	813cf4 <OSSemPost>
  80e290:	00000106 	br	80e298 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  80e294:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80e298:	e037883a 	mov	sp,fp
  80e29c:	dfc00117 	ldw	ra,4(sp)
  80e2a0:	df000017 	ldw	fp,0(sp)
  80e2a4:	dec00204 	addi	sp,sp,8
  80e2a8:	f800283a 	ret

0080e2ac <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80e2ac:	deffdb04 	addi	sp,sp,-148
  80e2b0:	dfc02415 	stw	ra,144(sp)
  80e2b4:	df002315 	stw	fp,140(sp)
  80e2b8:	df002304 	addi	fp,sp,140
  80e2bc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e2c0:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80e2c4:	d0a06343 	ldbu	r2,-32371(gp)
  80e2c8:	10803fcc 	andi	r2,r2,255
  80e2cc:	10800060 	cmpeqi	r2,r2,1
  80e2d0:	10003626 	beq	r2,zero,80e3ac <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80e2d4:	e0bfe204 	addi	r2,fp,-120
  80e2d8:	100b883a 	mov	r5,r2
  80e2dc:	01003fc4 	movi	r4,255
  80e2e0:	08155ec0 	call	8155ec <OSTaskQuery>
  80e2e4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80e2e8:	e0bffe83 	ldbu	r2,-6(fp)
  80e2ec:	10803fcc 	andi	r2,r2,255
  80e2f0:	1000301e 	bne	r2,zero,80e3b4 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  80e2f4:	e0bfee83 	ldbu	r2,-70(fp)
  80e2f8:	10803fcc 	andi	r2,r2,255
  80e2fc:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80e300:	d0a06217 	ldw	r2,-32376(gp)
  80e304:	e0fffd04 	addi	r3,fp,-12
  80e308:	180b883a 	mov	r5,r3
  80e30c:	1009883a 	mov	r4,r2
  80e310:	0813e040 	call	813e04 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e314:	0005303a 	rdctl	r2,status
  80e318:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e31c:	e0ffe117 	ldw	r3,-124(fp)
  80e320:	00bfff84 	movi	r2,-2
  80e324:	1884703a 	and	r2,r3,r2
  80e328:	1001703a 	wrctl	status,r2
  
  return context;
  80e32c:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  80e330:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80e334:	e0bffd0b 	ldhu	r2,-12(fp)
  80e338:	10bfffcc 	andi	r2,r2,65535
  80e33c:	10000b1e 	bne	r2,zero,80e36c <__malloc_lock+0xc0>
  80e340:	d0a02b17 	ldw	r2,-32596(gp)
  80e344:	e0ffde17 	ldw	r3,-136(fp)
  80e348:	1880081e 	bne	r3,r2,80e36c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  80e34c:	d0a06117 	ldw	r2,-32380(gp)
  80e350:	10800044 	addi	r2,r2,1
  80e354:	d0a06115 	stw	r2,-32380(gp)
  80e358:	e0bfdd17 	ldw	r2,-140(fp)
  80e35c:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e360:	e0bfdf17 	ldw	r2,-132(fp)
  80e364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  80e368:	00000e06 	br	80e3a4 <__malloc_lock+0xf8>
  80e36c:	e0bfdd17 	ldw	r2,-140(fp)
  80e370:	e0bfe015 	stw	r2,-128(fp)
  80e374:	e0bfe017 	ldw	r2,-128(fp)
  80e378:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80e37c:	d0a06217 	ldw	r2,-32376(gp)
  80e380:	e0fffe84 	addi	r3,fp,-6
  80e384:	180d883a 	mov	r6,r3
  80e388:	000b883a 	mov	r5,zero
  80e38c:	1009883a 	mov	r4,r2
  80e390:	081397c0 	call	81397c <OSSemPend>
    locks  = 1;
  80e394:	00800044 	movi	r2,1
  80e398:	d0a06115 	stw	r2,-32380(gp)
    lockid = id;
  80e39c:	e0bfde17 	ldw	r2,-136(fp)
  80e3a0:	d0a02b15 	stw	r2,-32596(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  80e3a4:	0001883a 	nop
  80e3a8:	00000306 	br	80e3b8 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  80e3ac:	0001883a 	nop
  80e3b0:	00000106 	br	80e3b8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  80e3b4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80e3b8:	e037883a 	mov	sp,fp
  80e3bc:	dfc00117 	ldw	ra,4(sp)
  80e3c0:	df000017 	ldw	fp,0(sp)
  80e3c4:	dec00204 	addi	sp,sp,8
  80e3c8:	f800283a 	ret

0080e3cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e3cc:	defff804 	addi	sp,sp,-32
  80e3d0:	dfc00715 	stw	ra,28(sp)
  80e3d4:	df000615 	stw	fp,24(sp)
  80e3d8:	df000604 	addi	fp,sp,24
  80e3dc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e3e0:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80e3e4:	d0a06343 	ldbu	r2,-32371(gp)
  80e3e8:	10803fcc 	andi	r2,r2,255
  80e3ec:	10800060 	cmpeqi	r2,r2,1
  80e3f0:	10002326 	beq	r2,zero,80e480 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e3f4:	0005303a 	rdctl	r2,status
  80e3f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3fc:	e0fffe17 	ldw	r3,-8(fp)
  80e400:	00bfff84 	movi	r2,-2
  80e404:	1884703a 	and	r2,r3,r2
  80e408:	1001703a 	wrctl	status,r2
  
  return context;
  80e40c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  80e410:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  80e414:	d0a06117 	ldw	r2,-32380(gp)
  80e418:	1000051e 	bne	r2,zero,80e430 <__malloc_unlock+0x64>
  80e41c:	e0bffa17 	ldw	r2,-24(fp)
  80e420:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e424:	e0bffb17 	ldw	r2,-20(fp)
  80e428:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80e42c:	00001506 	br	80e484 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80e430:	d0a06117 	ldw	r2,-32380(gp)
  80e434:	10bfffc4 	addi	r2,r2,-1
  80e438:	d0a06115 	stw	r2,-32380(gp)
  80e43c:	d0a06117 	ldw	r2,-32380(gp)
  80e440:	10000a1e 	bne	r2,zero,80e46c <__malloc_unlock+0xa0>
  {
    lockid = -1;
  80e444:	00bfffc4 	movi	r2,-1
  80e448:	d0a02b15 	stw	r2,-32596(gp)
  80e44c:	e0bffa17 	ldw	r2,-24(fp)
  80e450:	e0bffc15 	stw	r2,-16(fp)
  80e454:	e0bffc17 	ldw	r2,-16(fp)
  80e458:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80e45c:	d0a06217 	ldw	r2,-32376(gp)
  80e460:	1009883a 	mov	r4,r2
  80e464:	0813cf40 	call	813cf4 <OSSemPost>
  80e468:	00000606 	br	80e484 <__malloc_unlock+0xb8>
  80e46c:	e0bffa17 	ldw	r2,-24(fp)
  80e470:	e0bffd15 	stw	r2,-12(fp)
  80e474:	e0bffd17 	ldw	r2,-12(fp)
  80e478:	1001703a 	wrctl	status,r2
  80e47c:	00000106 	br	80e484 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  80e480:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80e484:	e037883a 	mov	sp,fp
  80e488:	dfc00117 	ldw	ra,4(sp)
  80e48c:	df000017 	ldw	fp,0(sp)
  80e490:	dec00204 	addi	sp,sp,8
  80e494:	f800283a 	ret

0080e498 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80e498:	defff704 	addi	sp,sp,-36
  80e49c:	dfc00815 	stw	ra,32(sp)
  80e4a0:	df000715 	stw	fp,28(sp)
  80e4a4:	df000704 	addi	fp,sp,28
  80e4a8:	e13ffd15 	stw	r4,-12(fp)
  80e4ac:	e17ffe15 	stw	r5,-8(fp)
  80e4b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e4b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80e4b8:	e0bfff17 	ldw	r2,-4(fp)
  80e4bc:	1000021e 	bne	r2,zero,80e4c8 <OSEventNameGet+0x30>
        return (0);
  80e4c0:	0005883a 	mov	r2,zero
  80e4c4:	00003706 	br	80e5a4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80e4c8:	e0bffd17 	ldw	r2,-12(fp)
  80e4cc:	1000051e 	bne	r2,zero,80e4e4 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80e4d0:	e0bfff17 	ldw	r2,-4(fp)
  80e4d4:	00c00104 	movi	r3,4
  80e4d8:	10c00005 	stb	r3,0(r2)
        return (0);
  80e4dc:	0005883a 	mov	r2,zero
  80e4e0:	00003006 	br	80e5a4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80e4e4:	e0bffe17 	ldw	r2,-8(fp)
  80e4e8:	1000051e 	bne	r2,zero,80e500 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  80e4ec:	e0bfff17 	ldw	r2,-4(fp)
  80e4f0:	00c00304 	movi	r3,12
  80e4f4:	10c00005 	stb	r3,0(r2)
        return (0);
  80e4f8:	0005883a 	mov	r2,zero
  80e4fc:	00002906 	br	80e5a4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80e500:	d0a07103 	ldbu	r2,-32316(gp)
  80e504:	10803fcc 	andi	r2,r2,255
  80e508:	10000526 	beq	r2,zero,80e520 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  80e50c:	e0bfff17 	ldw	r2,-4(fp)
  80e510:	00c00444 	movi	r3,17
  80e514:	10c00005 	stb	r3,0(r2)
        return (0);
  80e518:	0005883a 	mov	r2,zero
  80e51c:	00002106 	br	80e5a4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  80e520:	e0bffd17 	ldw	r2,-12(fp)
  80e524:	10800003 	ldbu	r2,0(r2)
  80e528:	10803fcc 	andi	r2,r2,255
  80e52c:	10bfffc4 	addi	r2,r2,-1
  80e530:	10800128 	cmpgeui	r2,r2,4
  80e534:	10000526 	beq	r2,zero,80e54c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80e538:	e0bfff17 	ldw	r2,-4(fp)
  80e53c:	00c00044 	movi	r3,1
  80e540:	10c00005 	stb	r3,0(r2)
             return (0);
  80e544:	0005883a 	mov	r2,zero
  80e548:	00001606 	br	80e5a4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80e54c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e550:	0005303a 	rdctl	r2,status
  80e554:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e558:	e0fffb17 	ldw	r3,-20(fp)
  80e55c:	00bfff84 	movi	r2,-2
  80e560:	1884703a 	and	r2,r3,r2
  80e564:	1001703a 	wrctl	status,r2
  
  return context;
  80e568:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80e56c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80e570:	e0bffd17 	ldw	r2,-12(fp)
  80e574:	10800384 	addi	r2,r2,14
  80e578:	100b883a 	mov	r5,r2
  80e57c:	e13ffe17 	ldw	r4,-8(fp)
  80e580:	080ff1c0 	call	80ff1c <OS_StrCopy>
  80e584:	e0bffa05 	stb	r2,-24(fp)
  80e588:	e0bff917 	ldw	r2,-28(fp)
  80e58c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e590:	e0bffc17 	ldw	r2,-16(fp)
  80e594:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e598:	e0bfff17 	ldw	r2,-4(fp)
  80e59c:	10000005 	stb	zero,0(r2)
    return (len);
  80e5a0:	e0bffa03 	ldbu	r2,-24(fp)
}
  80e5a4:	e037883a 	mov	sp,fp
  80e5a8:	dfc00117 	ldw	ra,4(sp)
  80e5ac:	df000017 	ldw	fp,0(sp)
  80e5b0:	dec00204 	addi	sp,sp,8
  80e5b4:	f800283a 	ret

0080e5b8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80e5b8:	defff604 	addi	sp,sp,-40
  80e5bc:	dfc00915 	stw	ra,36(sp)
  80e5c0:	df000815 	stw	fp,32(sp)
  80e5c4:	df000804 	addi	fp,sp,32
  80e5c8:	e13ffd15 	stw	r4,-12(fp)
  80e5cc:	e17ffe15 	stw	r5,-8(fp)
  80e5d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e5d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80e5d8:	e0bfff17 	ldw	r2,-4(fp)
  80e5dc:	10004026 	beq	r2,zero,80e6e0 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80e5e0:	e0bffd17 	ldw	r2,-12(fp)
  80e5e4:	1000041e 	bne	r2,zero,80e5f8 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80e5e8:	e0bfff17 	ldw	r2,-4(fp)
  80e5ec:	00c00104 	movi	r3,4
  80e5f0:	10c00005 	stb	r3,0(r2)
        return;
  80e5f4:	00003b06 	br	80e6e4 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80e5f8:	e0bffe17 	ldw	r2,-8(fp)
  80e5fc:	1000041e 	bne	r2,zero,80e610 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  80e600:	e0bfff17 	ldw	r2,-4(fp)
  80e604:	00c00304 	movi	r3,12
  80e608:	10c00005 	stb	r3,0(r2)
        return;
  80e60c:	00003506 	br	80e6e4 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80e610:	d0a07103 	ldbu	r2,-32316(gp)
  80e614:	10803fcc 	andi	r2,r2,255
  80e618:	10000426 	beq	r2,zero,80e62c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  80e61c:	e0bfff17 	ldw	r2,-4(fp)
  80e620:	00c00484 	movi	r3,18
  80e624:	10c00005 	stb	r3,0(r2)
        return;
  80e628:	00002e06 	br	80e6e4 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  80e62c:	e0bffd17 	ldw	r2,-12(fp)
  80e630:	10800003 	ldbu	r2,0(r2)
  80e634:	10803fcc 	andi	r2,r2,255
  80e638:	10bfffc4 	addi	r2,r2,-1
  80e63c:	10800128 	cmpgeui	r2,r2,4
  80e640:	10000426 	beq	r2,zero,80e654 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80e644:	e0bfff17 	ldw	r2,-4(fp)
  80e648:	00c00044 	movi	r3,1
  80e64c:	10c00005 	stb	r3,0(r2)
             return;
  80e650:	00002406 	br	80e6e4 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80e654:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e658:	0005303a 	rdctl	r2,status
  80e65c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e660:	e0fffc17 	ldw	r3,-16(fp)
  80e664:	00bfff84 	movi	r2,-2
  80e668:	1884703a 	and	r2,r3,r2
  80e66c:	1001703a 	wrctl	status,r2
  
  return context;
  80e670:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80e674:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80e678:	e13ffe17 	ldw	r4,-8(fp)
  80e67c:	080ff900 	call	80ff90 <OS_StrLen>
  80e680:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80e684:	e0bffa03 	ldbu	r2,-24(fp)
  80e688:	10800830 	cmpltui	r2,r2,32
  80e68c:	1000081e 	bne	r2,zero,80e6b0 <OSEventNameSet+0xf8>
  80e690:	e0bff817 	ldw	r2,-32(fp)
  80e694:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e698:	e0bff917 	ldw	r2,-28(fp)
  80e69c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80e6a0:	e0bfff17 	ldw	r2,-4(fp)
  80e6a4:	00c002c4 	movi	r3,11
  80e6a8:	10c00005 	stb	r3,0(r2)
        return;
  80e6ac:	00000d06 	br	80e6e4 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80e6b0:	e0bffd17 	ldw	r2,-12(fp)
  80e6b4:	10800384 	addi	r2,r2,14
  80e6b8:	e17ffe17 	ldw	r5,-8(fp)
  80e6bc:	1009883a 	mov	r4,r2
  80e6c0:	080ff1c0 	call	80ff1c <OS_StrCopy>
  80e6c4:	e0bff817 	ldw	r2,-32(fp)
  80e6c8:	e0bffb15 	stw	r2,-20(fp)
  80e6cc:	e0bffb17 	ldw	r2,-20(fp)
  80e6d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e6d4:	e0bfff17 	ldw	r2,-4(fp)
  80e6d8:	10000005 	stb	zero,0(r2)
  80e6dc:	00000106 	br	80e6e4 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  80e6e0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80e6e4:	e037883a 	mov	sp,fp
  80e6e8:	dfc00117 	ldw	ra,4(sp)
  80e6ec:	df000017 	ldw	fp,0(sp)
  80e6f0:	dec00204 	addi	sp,sp,8
  80e6f4:	f800283a 	ret

0080e6f8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80e6f8:	deffed04 	addi	sp,sp,-76
  80e6fc:	dfc01215 	stw	ra,72(sp)
  80e700:	df001115 	stw	fp,68(sp)
  80e704:	df001104 	addi	fp,sp,68
  80e708:	e13ffc15 	stw	r4,-16(fp)
  80e70c:	e17ffd15 	stw	r5,-12(fp)
  80e710:	e1bffe15 	stw	r6,-8(fp)
  80e714:	3805883a 	mov	r2,r7
  80e718:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80e71c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80e720:	e0800217 	ldw	r2,8(fp)
  80e724:	1000021e 	bne	r2,zero,80e730 <OSEventPendMulti+0x38>
        return (0);
  80e728:	0005883a 	mov	r2,zero
  80e72c:	00017106 	br	80ecf4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80e730:	e0bffc17 	ldw	r2,-16(fp)
  80e734:	1000051e 	bne	r2,zero,80e74c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  80e738:	e0800217 	ldw	r2,8(fp)
  80e73c:	00c00104 	movi	r3,4
  80e740:	10c00005 	stb	r3,0(r2)
        return (0);
  80e744:	0005883a 	mov	r2,zero
  80e748:	00016a06 	br	80ecf4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80e74c:	e0bffd17 	ldw	r2,-12(fp)
  80e750:	1000051e 	bne	r2,zero,80e768 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  80e754:	e0800217 	ldw	r2,8(fp)
  80e758:	00c00104 	movi	r3,4
  80e75c:	10c00005 	stb	r3,0(r2)
        return (0);
  80e760:	0005883a 	mov	r2,zero
  80e764:	00016306 	br	80ecf4 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80e768:	e0bffe17 	ldw	r2,-8(fp)
  80e76c:	1000051e 	bne	r2,zero,80e784 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  80e770:	e0800217 	ldw	r2,8(fp)
  80e774:	00c00104 	movi	r3,4
  80e778:	10c00005 	stb	r3,0(r2)
        return (0);
  80e77c:	0005883a 	mov	r2,zero
  80e780:	00015c06 	br	80ecf4 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80e784:	e0bffd17 	ldw	r2,-12(fp)
  80e788:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80e78c:	e0bffc17 	ldw	r2,-16(fp)
  80e790:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  80e794:	e0bfef17 	ldw	r2,-68(fp)
  80e798:	10800017 	ldw	r2,0(r2)
  80e79c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  80e7a0:	00001906 	br	80e808 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80e7a4:	e0bff017 	ldw	r2,-64(fp)
  80e7a8:	10800003 	ldbu	r2,0(r2)
  80e7ac:	10803fcc 	andi	r2,r2,255
  80e7b0:	10c000a0 	cmpeqi	r3,r2,2
  80e7b4:	1800091e 	bne	r3,zero,80e7dc <OSEventPendMulti+0xe4>
  80e7b8:	10c000e0 	cmpeqi	r3,r2,3
  80e7bc:	1800091e 	bne	r3,zero,80e7e4 <OSEventPendMulti+0xec>
  80e7c0:	10800060 	cmpeqi	r2,r2,1
  80e7c4:	1000091e 	bne	r2,zero,80e7ec <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80e7c8:	e0800217 	ldw	r2,8(fp)
  80e7cc:	00c00044 	movi	r3,1
  80e7d0:	10c00005 	stb	r3,0(r2)
                 return (0);
  80e7d4:	0005883a 	mov	r2,zero
  80e7d8:	00014606 	br	80ecf4 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  80e7dc:	0001883a 	nop
  80e7e0:	00000306 	br	80e7f0 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  80e7e4:	0001883a 	nop
  80e7e8:	00000106 	br	80e7f0 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  80e7ec:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  80e7f0:	e0bfef17 	ldw	r2,-68(fp)
  80e7f4:	10800104 	addi	r2,r2,4
  80e7f8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  80e7fc:	e0bfef17 	ldw	r2,-68(fp)
  80e800:	10800017 	ldw	r2,0(r2)
  80e804:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80e808:	e0bff017 	ldw	r2,-64(fp)
  80e80c:	103fe51e 	bne	r2,zero,80e7a4 <__alt_mem_epcs_flash_controller_0+0xff8057a4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80e810:	d0a07103 	ldbu	r2,-32316(gp)
  80e814:	10803fcc 	andi	r2,r2,255
  80e818:	10000526 	beq	r2,zero,80e830 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80e81c:	e0800217 	ldw	r2,8(fp)
  80e820:	00c00084 	movi	r3,2
  80e824:	10c00005 	stb	r3,0(r2)
        return (0);
  80e828:	0005883a 	mov	r2,zero
  80e82c:	00013106 	br	80ecf4 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80e830:	d0a06303 	ldbu	r2,-32372(gp)
  80e834:	10803fcc 	andi	r2,r2,255
  80e838:	10000526 	beq	r2,zero,80e850 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80e83c:	e0800217 	ldw	r2,8(fp)
  80e840:	00c00344 	movi	r3,13
  80e844:	10c00005 	stb	r3,0(r2)
        return (0);
  80e848:	0005883a 	mov	r2,zero
  80e84c:	00012906 	br	80ecf4 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e850:	0005303a 	rdctl	r2,status
  80e854:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e858:	e0fffb17 	ldw	r3,-20(fp)
  80e85c:	00bfff84 	movi	r2,-2
  80e860:	1884703a 	and	r2,r3,r2
  80e864:	1001703a 	wrctl	status,r2
  
  return context;
  80e868:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80e86c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  80e870:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  80e874:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80e878:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  80e87c:	e0bffc17 	ldw	r2,-16(fp)
  80e880:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  80e884:	e0bfef17 	ldw	r2,-68(fp)
  80e888:	10800017 	ldw	r2,0(r2)
  80e88c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80e890:	00008106 	br	80ea98 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  80e894:	e0bff017 	ldw	r2,-64(fp)
  80e898:	10800003 	ldbu	r2,0(r2)
  80e89c:	10803fcc 	andi	r2,r2,255
  80e8a0:	10c000a0 	cmpeqi	r3,r2,2
  80e8a4:	18003c1e 	bne	r3,zero,80e998 <OSEventPendMulti+0x2a0>
  80e8a8:	10c000e0 	cmpeqi	r3,r2,3
  80e8ac:	1800031e 	bne	r3,zero,80e8bc <OSEventPendMulti+0x1c4>
  80e8b0:	10800060 	cmpeqi	r2,r2,1
  80e8b4:	10001e1e 	bne	r2,zero,80e930 <OSEventPendMulti+0x238>
  80e8b8:	00006606 	br	80ea54 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80e8bc:	e0bff017 	ldw	r2,-64(fp)
  80e8c0:	1080020b 	ldhu	r2,8(r2)
  80e8c4:	10bfffcc 	andi	r2,r2,65535
  80e8c8:	10001526 	beq	r2,zero,80e920 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80e8cc:	e0bff017 	ldw	r2,-64(fp)
  80e8d0:	1080020b 	ldhu	r2,8(r2)
  80e8d4:	10bfffc4 	addi	r2,r2,-1
  80e8d8:	1007883a 	mov	r3,r2
  80e8dc:	e0bff017 	ldw	r2,-64(fp)
  80e8e0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80e8e4:	e0bffd17 	ldw	r2,-12(fp)
  80e8e8:	10c00104 	addi	r3,r2,4
  80e8ec:	e0fffd15 	stw	r3,-12(fp)
  80e8f0:	e0fff017 	ldw	r3,-64(fp)
  80e8f4:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  80e8f8:	00800044 	movi	r2,1
  80e8fc:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80e900:	e0bffe17 	ldw	r2,-8(fp)
  80e904:	10c00104 	addi	r3,r2,4
  80e908:	e0fffe15 	stw	r3,-8(fp)
  80e90c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  80e910:	e0bff18b 	ldhu	r2,-58(fp)
  80e914:	10800044 	addi	r2,r2,1
  80e918:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  80e91c:	00005806 	br	80ea80 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80e920:	e0bff203 	ldbu	r2,-56(fp)
  80e924:	10800054 	ori	r2,r2,1
  80e928:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80e92c:	00005406 	br	80ea80 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80e930:	e0bff017 	ldw	r2,-64(fp)
  80e934:	10800117 	ldw	r2,4(r2)
  80e938:	10001326 	beq	r2,zero,80e988 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80e93c:	e0bffe17 	ldw	r2,-8(fp)
  80e940:	10c00104 	addi	r3,r2,4
  80e944:	e0fffe15 	stw	r3,-8(fp)
  80e948:	e0fff017 	ldw	r3,-64(fp)
  80e94c:	18c00117 	ldw	r3,4(r3)
  80e950:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  80e954:	e0bff017 	ldw	r2,-64(fp)
  80e958:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80e95c:	e0bffd17 	ldw	r2,-12(fp)
  80e960:	10c00104 	addi	r3,r2,4
  80e964:	e0fffd15 	stw	r3,-12(fp)
  80e968:	e0fff017 	ldw	r3,-64(fp)
  80e96c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  80e970:	00800044 	movi	r2,1
  80e974:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80e978:	e0bff18b 	ldhu	r2,-58(fp)
  80e97c:	10800044 	addi	r2,r2,1
  80e980:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  80e984:	00003e06 	br	80ea80 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80e988:	e0bff203 	ldbu	r2,-56(fp)
  80e98c:	10800094 	ori	r2,r2,2
  80e990:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80e994:	00003a06 	br	80ea80 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80e998:	e0bff017 	ldw	r2,-64(fp)
  80e99c:	10800117 	ldw	r2,4(r2)
  80e9a0:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80e9a4:	e0bff517 	ldw	r2,-44(fp)
  80e9a8:	1080058b 	ldhu	r2,22(r2)
  80e9ac:	10bfffcc 	andi	r2,r2,65535
  80e9b0:	10002426 	beq	r2,zero,80ea44 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80e9b4:	e0bffe17 	ldw	r2,-8(fp)
  80e9b8:	10c00104 	addi	r3,r2,4
  80e9bc:	e0fffe15 	stw	r3,-8(fp)
  80e9c0:	e0fff517 	ldw	r3,-44(fp)
  80e9c4:	18c00417 	ldw	r3,16(r3)
  80e9c8:	19400104 	addi	r5,r3,4
  80e9cc:	e13ff517 	ldw	r4,-44(fp)
  80e9d0:	21400415 	stw	r5,16(r4)
  80e9d4:	18c00017 	ldw	r3,0(r3)
  80e9d8:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80e9dc:	e0bff517 	ldw	r2,-44(fp)
  80e9e0:	10c00417 	ldw	r3,16(r2)
  80e9e4:	e0bff517 	ldw	r2,-44(fp)
  80e9e8:	10800217 	ldw	r2,8(r2)
  80e9ec:	1880041e 	bne	r3,r2,80ea00 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80e9f0:	e0bff517 	ldw	r2,-44(fp)
  80e9f4:	10c00117 	ldw	r3,4(r2)
  80e9f8:	e0bff517 	ldw	r2,-44(fp)
  80e9fc:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80ea00:	e0bff517 	ldw	r2,-44(fp)
  80ea04:	1080058b 	ldhu	r2,22(r2)
  80ea08:	10bfffc4 	addi	r2,r2,-1
  80ea0c:	1007883a 	mov	r3,r2
  80ea10:	e0bff517 	ldw	r2,-44(fp)
  80ea14:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80ea18:	e0bffd17 	ldw	r2,-12(fp)
  80ea1c:	10c00104 	addi	r3,r2,4
  80ea20:	e0fffd15 	stw	r3,-12(fp)
  80ea24:	e0fff017 	ldw	r3,-64(fp)
  80ea28:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  80ea2c:	00800044 	movi	r2,1
  80ea30:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80ea34:	e0bff18b 	ldhu	r2,-58(fp)
  80ea38:	10800044 	addi	r2,r2,1
  80ea3c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  80ea40:	00000f06 	br	80ea80 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80ea44:	e0bff203 	ldbu	r2,-56(fp)
  80ea48:	10800114 	ori	r2,r2,4
  80ea4c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80ea50:	00000b06 	br	80ea80 <OSEventPendMulti+0x388>
  80ea54:	e0bff317 	ldw	r2,-52(fp)
  80ea58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea5c:	e0bff417 	ldw	r2,-48(fp)
  80ea60:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80ea64:	e0bffd17 	ldw	r2,-12(fp)
  80ea68:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80ea6c:	e0800217 	ldw	r2,8(fp)
  80ea70:	00c00044 	movi	r3,1
  80ea74:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  80ea78:	e0bff18b 	ldhu	r2,-58(fp)
  80ea7c:	00009d06 	br	80ecf4 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  80ea80:	e0bfef17 	ldw	r2,-68(fp)
  80ea84:	10800104 	addi	r2,r2,4
  80ea88:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  80ea8c:	e0bfef17 	ldw	r2,-68(fp)
  80ea90:	10800017 	ldw	r2,0(r2)
  80ea94:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80ea98:	e0bff017 	ldw	r2,-64(fp)
  80ea9c:	103f7d1e 	bne	r2,zero,80e894 <__alt_mem_epcs_flash_controller_0+0xff805894>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80eaa0:	e0bff103 	ldbu	r2,-60(fp)
  80eaa4:	10800058 	cmpnei	r2,r2,1
  80eaa8:	10000a1e 	bne	r2,zero,80ead4 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80eaac:	e0bffd17 	ldw	r2,-12(fp)
  80eab0:	10000015 	stw	zero,0(r2)
  80eab4:	e0bff317 	ldw	r2,-52(fp)
  80eab8:	e0bff615 	stw	r2,-40(fp)
  80eabc:	e0bff617 	ldw	r2,-40(fp)
  80eac0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80eac4:	e0800217 	ldw	r2,8(fp)
  80eac8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80eacc:	e0bff18b 	ldhu	r2,-58(fp)
  80ead0:	00008806 	br	80ecf4 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80ead4:	d0a07217 	ldw	r2,-32312(gp)
  80ead8:	d0e07217 	ldw	r3,-32312(gp)
  80eadc:	19000c03 	ldbu	r4,48(r3)
  80eae0:	e0fff203 	ldbu	r3,-56(fp)
  80eae4:	20c6b03a 	or	r3,r4,r3
  80eae8:	1809883a 	mov	r4,r3
  80eaec:	00ffe004 	movi	r3,-128
  80eaf0:	20c6b03a 	or	r3,r4,r3
  80eaf4:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80eaf8:	d0a07217 	ldw	r2,-32312(gp)
  80eafc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80eb00:	d0a07217 	ldw	r2,-32312(gp)
  80eb04:	e0ffff0b 	ldhu	r3,-4(fp)
  80eb08:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80eb0c:	e13ffc17 	ldw	r4,-16(fp)
  80eb10:	080f6340 	call	80f634 <OS_EventTaskWaitMulti>
  80eb14:	e0bff317 	ldw	r2,-52(fp)
  80eb18:	e0bff915 	stw	r2,-28(fp)
  80eb1c:	e0bff917 	ldw	r2,-28(fp)
  80eb20:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80eb24:	080fdd80 	call	80fdd8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb28:	0005303a 	rdctl	r2,status
  80eb2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb30:	e0fff717 	ldw	r3,-36(fp)
  80eb34:	00bfff84 	movi	r2,-2
  80eb38:	1884703a 	and	r2,r3,r2
  80eb3c:	1001703a 	wrctl	status,r2
  
  return context;
  80eb40:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80eb44:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80eb48:	d0a07217 	ldw	r2,-32312(gp)
  80eb4c:	10800c43 	ldbu	r2,49(r2)
  80eb50:	10803fcc 	andi	r2,r2,255
  80eb54:	10000226 	beq	r2,zero,80eb60 <OSEventPendMulti+0x468>
  80eb58:	108000a0 	cmpeqi	r2,r2,2
  80eb5c:	10001826 	beq	r2,zero,80ebc0 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80eb60:	d0a07217 	ldw	r2,-32312(gp)
  80eb64:	10800717 	ldw	r2,28(r2)
  80eb68:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80eb6c:	e0bff017 	ldw	r2,-64(fp)
  80eb70:	10000b26 	beq	r2,zero,80eba0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80eb74:	e0bffd17 	ldw	r2,-12(fp)
  80eb78:	10c00104 	addi	r3,r2,4
  80eb7c:	e0fffd15 	stw	r3,-12(fp)
  80eb80:	e0fff017 	ldw	r3,-64(fp)
  80eb84:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80eb88:	e0bffd17 	ldw	r2,-12(fp)
  80eb8c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80eb90:	e0bff18b 	ldhu	r2,-58(fp)
  80eb94:	10800044 	addi	r2,r2,1
  80eb98:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  80eb9c:	00000d06 	br	80ebd4 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80eba0:	d0a07217 	ldw	r2,-32312(gp)
  80eba4:	00c00044 	movi	r3,1
  80eba8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80ebac:	d0a07217 	ldw	r2,-32312(gp)
  80ebb0:	e17ffc17 	ldw	r5,-16(fp)
  80ebb4:	1009883a 	mov	r4,r2
  80ebb8:	080f83c0 	call	80f83c <OS_EventTaskRemoveMulti>
             }
			 break;
  80ebbc:	00000506 	br	80ebd4 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80ebc0:	d0a07217 	ldw	r2,-32312(gp)
  80ebc4:	e17ffc17 	ldw	r5,-16(fp)
  80ebc8:	1009883a 	mov	r4,r2
  80ebcc:	080f83c0 	call	80f83c <OS_EventTaskRemoveMulti>
             break;
  80ebd0:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80ebd4:	d0a07217 	ldw	r2,-32312(gp)
  80ebd8:	10800c43 	ldbu	r2,49(r2)
  80ebdc:	10803fcc 	andi	r2,r2,255
  80ebe0:	10000326 	beq	r2,zero,80ebf0 <OSEventPendMulti+0x4f8>
  80ebe4:	108000a0 	cmpeqi	r2,r2,2
  80ebe8:	1000231e 	bne	r2,zero,80ec78 <OSEventPendMulti+0x580>
  80ebec:	00002a06 	br	80ec98 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80ebf0:	e0bff017 	ldw	r2,-64(fp)
  80ebf4:	10800003 	ldbu	r2,0(r2)
  80ebf8:	10803fcc 	andi	r2,r2,255
  80ebfc:	0080100e 	bge	zero,r2,80ec40 <OSEventPendMulti+0x548>
  80ec00:	10c000d0 	cmplti	r3,r2,3
  80ec04:	1800071e 	bne	r3,zero,80ec24 <OSEventPendMulti+0x52c>
  80ec08:	108000e0 	cmpeqi	r2,r2,3
  80ec0c:	10000c26 	beq	r2,zero,80ec40 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80ec10:	e0bffe17 	ldw	r2,-8(fp)
  80ec14:	10c00104 	addi	r3,r2,4
  80ec18:	e0fffe15 	stw	r3,-8(fp)
  80ec1c:	10000015 	stw	zero,0(r2)
                      break;
  80ec20:	00001206 	br	80ec6c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80ec24:	e0bffe17 	ldw	r2,-8(fp)
  80ec28:	10c00104 	addi	r3,r2,4
  80ec2c:	e0fffe15 	stw	r3,-8(fp)
  80ec30:	d0e07217 	ldw	r3,-32312(gp)
  80ec34:	18c00917 	ldw	r3,36(r3)
  80ec38:	10c00015 	stw	r3,0(r2)
                      break;
  80ec3c:	00000b06 	br	80ec6c <OSEventPendMulti+0x574>
  80ec40:	e0bff317 	ldw	r2,-52(fp)
  80ec44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec48:	e0bff817 	ldw	r2,-32(fp)
  80ec4c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80ec50:	e0bffd17 	ldw	r2,-12(fp)
  80ec54:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80ec58:	e0800217 	ldw	r2,8(fp)
  80ec5c:	00c00044 	movi	r3,1
  80ec60:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  80ec64:	e0bff18b 	ldhu	r2,-58(fp)
  80ec68:	00002206 	br	80ecf4 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  80ec6c:	e0800217 	ldw	r2,8(fp)
  80ec70:	10000005 	stb	zero,0(r2)
             break;
  80ec74:	00001006 	br	80ecb8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80ec78:	e0bffe17 	ldw	r2,-8(fp)
  80ec7c:	10c00104 	addi	r3,r2,4
  80ec80:	e0fffe15 	stw	r3,-8(fp)
  80ec84:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80ec88:	e0800217 	ldw	r2,8(fp)
  80ec8c:	00c00384 	movi	r3,14
  80ec90:	10c00005 	stb	r3,0(r2)
             break;
  80ec94:	00000806 	br	80ecb8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80ec98:	e0bffe17 	ldw	r2,-8(fp)
  80ec9c:	10c00104 	addi	r3,r2,4
  80eca0:	e0fffe15 	stw	r3,-8(fp)
  80eca4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80eca8:	e0800217 	ldw	r2,8(fp)
  80ecac:	00c00284 	movi	r3,10
  80ecb0:	10c00005 	stb	r3,0(r2)
             break;
  80ecb4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80ecb8:	d0a07217 	ldw	r2,-32312(gp)
  80ecbc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80ecc0:	d0a07217 	ldw	r2,-32312(gp)
  80ecc4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80ecc8:	d0a07217 	ldw	r2,-32312(gp)
  80eccc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80ecd0:	d0a07217 	ldw	r2,-32312(gp)
  80ecd4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80ecd8:	d0a07217 	ldw	r2,-32312(gp)
  80ecdc:	10000915 	stw	zero,36(r2)
  80ece0:	e0bff317 	ldw	r2,-52(fp)
  80ece4:	e0bffa15 	stw	r2,-24(fp)
  80ece8:	e0bffa17 	ldw	r2,-24(fp)
  80ecec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80ecf0:	e0bff18b 	ldhu	r2,-58(fp)
}
  80ecf4:	e037883a 	mov	sp,fp
  80ecf8:	dfc00117 	ldw	ra,4(sp)
  80ecfc:	df000017 	ldw	fp,0(sp)
  80ed00:	dec00204 	addi	sp,sp,8
  80ed04:	f800283a 	ret

0080ed08 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80ed08:	defffe04 	addi	sp,sp,-8
  80ed0c:	dfc00115 	stw	ra,4(sp)
  80ed10:	df000015 	stw	fp,0(sp)
  80ed14:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80ed18:	08194fc0 	call	8194fc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80ed1c:	080fa840 	call	80fa84 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80ed20:	080facc0 	call	80facc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80ed24:	080fc380 	call	80fc38 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80ed28:	080f9a40 	call	80f9a4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80ed2c:	0811ad80 	call	811ad8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80ed30:	08123d80 	call	8123d8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80ed34:	081350c0 	call	81350c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80ed38:	080fb380 	call	80fb38 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80ed3c:	080fbb80 	call	80fbb8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80ed40:	081951c0 	call	81951c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80ed44:	08104ac0 	call	8104ac <OSDebugInit>
#endif
}
  80ed48:	0001883a 	nop
  80ed4c:	e037883a 	mov	sp,fp
  80ed50:	dfc00117 	ldw	ra,4(sp)
  80ed54:	df000017 	ldw	fp,0(sp)
  80ed58:	dec00204 	addi	sp,sp,8
  80ed5c:	f800283a 	ret

0080ed60 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80ed60:	deffff04 	addi	sp,sp,-4
  80ed64:	df000015 	stw	fp,0(sp)
  80ed68:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  80ed6c:	d0a06343 	ldbu	r2,-32371(gp)
  80ed70:	10803fcc 	andi	r2,r2,255
  80ed74:	10800058 	cmpnei	r2,r2,1
  80ed78:	1000071e 	bne	r2,zero,80ed98 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  80ed7c:	d0a07103 	ldbu	r2,-32316(gp)
  80ed80:	10803fcc 	andi	r2,r2,255
  80ed84:	10803fe0 	cmpeqi	r2,r2,255
  80ed88:	1000031e 	bne	r2,zero,80ed98 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80ed8c:	d0a07103 	ldbu	r2,-32316(gp)
  80ed90:	10800044 	addi	r2,r2,1
  80ed94:	d0a07105 	stb	r2,-32316(gp)
        }
    }
}
  80ed98:	0001883a 	nop
  80ed9c:	e037883a 	mov	sp,fp
  80eda0:	df000017 	ldw	fp,0(sp)
  80eda4:	dec00104 	addi	sp,sp,4
  80eda8:	f800283a 	ret

0080edac <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80edac:	defffb04 	addi	sp,sp,-20
  80edb0:	dfc00415 	stw	ra,16(sp)
  80edb4:	df000315 	stw	fp,12(sp)
  80edb8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80edbc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80edc0:	d0a06343 	ldbu	r2,-32371(gp)
  80edc4:	10803fcc 	andi	r2,r2,255
  80edc8:	10800058 	cmpnei	r2,r2,1
  80edcc:	10002f1e 	bne	r2,zero,80ee8c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edd0:	0005303a 	rdctl	r2,status
  80edd4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edd8:	e0ffff17 	ldw	r3,-4(fp)
  80eddc:	00bfff84 	movi	r2,-2
  80ede0:	1884703a 	and	r2,r3,r2
  80ede4:	1001703a 	wrctl	status,r2
  
  return context;
  80ede8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80edec:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80edf0:	d0a07103 	ldbu	r2,-32316(gp)
  80edf4:	10803fcc 	andi	r2,r2,255
  80edf8:	10000326 	beq	r2,zero,80ee08 <OSIntExit+0x5c>
            OSIntNesting--;
  80edfc:	d0a07103 	ldbu	r2,-32316(gp)
  80ee00:	10bfffc4 	addi	r2,r2,-1
  80ee04:	d0a07105 	stb	r2,-32316(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80ee08:	d0a07103 	ldbu	r2,-32316(gp)
  80ee0c:	10803fcc 	andi	r2,r2,255
  80ee10:	10001a1e 	bne	r2,zero,80ee7c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80ee14:	d0a06303 	ldbu	r2,-32372(gp)
  80ee18:	10803fcc 	andi	r2,r2,255
  80ee1c:	1000171e 	bne	r2,zero,80ee7c <OSIntExit+0xd0>
                OS_SchedNew();
  80ee20:	080fea80 	call	80fea8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80ee24:	d0e06503 	ldbu	r3,-32364(gp)
  80ee28:	d0a06543 	ldbu	r2,-32363(gp)
  80ee2c:	18c03fcc 	andi	r3,r3,255
  80ee30:	10803fcc 	andi	r2,r2,255
  80ee34:	18801126 	beq	r3,r2,80ee7c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80ee38:	d0a06503 	ldbu	r2,-32364(gp)
  80ee3c:	10c03fcc 	andi	r3,r2,255
  80ee40:	008020b4 	movhi	r2,130
  80ee44:	10979904 	addi	r2,r2,24164
  80ee48:	18c7883a 	add	r3,r3,r3
  80ee4c:	18c7883a 	add	r3,r3,r3
  80ee50:	10c5883a 	add	r2,r2,r3
  80ee54:	10800017 	ldw	r2,0(r2)
  80ee58:	d0a06d15 	stw	r2,-32332(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80ee5c:	d0a06d17 	ldw	r2,-32332(gp)
  80ee60:	10c00e17 	ldw	r3,56(r2)
  80ee64:	18c00044 	addi	r3,r3,1
  80ee68:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80ee6c:	d0a06817 	ldw	r2,-32352(gp)
  80ee70:	10800044 	addi	r2,r2,1
  80ee74:	d0a06815 	stw	r2,-32352(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80ee78:	08192280 	call	819228 <OSCtxSw>
  80ee7c:	e0bffd17 	ldw	r2,-12(fp)
  80ee80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee84:	e0bffe17 	ldw	r2,-8(fp)
  80ee88:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80ee8c:	0001883a 	nop
  80ee90:	e037883a 	mov	sp,fp
  80ee94:	dfc00117 	ldw	ra,4(sp)
  80ee98:	df000017 	ldw	fp,0(sp)
  80ee9c:	dec00204 	addi	sp,sp,8
  80eea0:	f800283a 	ret

0080eea4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80eea4:	defffc04 	addi	sp,sp,-16
  80eea8:	df000315 	stw	fp,12(sp)
  80eeac:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eeb0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80eeb4:	d0a06343 	ldbu	r2,-32371(gp)
  80eeb8:	10803fcc 	andi	r2,r2,255
  80eebc:	10800058 	cmpnei	r2,r2,1
  80eec0:	1000161e 	bne	r2,zero,80ef1c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eec4:	0005303a 	rdctl	r2,status
  80eec8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eecc:	e0ffff17 	ldw	r3,-4(fp)
  80eed0:	00bfff84 	movi	r2,-2
  80eed4:	1884703a 	and	r2,r3,r2
  80eed8:	1001703a 	wrctl	status,r2
  
  return context;
  80eedc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80eee0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80eee4:	d0a07103 	ldbu	r2,-32316(gp)
  80eee8:	10803fcc 	andi	r2,r2,255
  80eeec:	1000071e 	bne	r2,zero,80ef0c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80eef0:	d0a06303 	ldbu	r2,-32372(gp)
  80eef4:	10803fcc 	andi	r2,r2,255
  80eef8:	10803fe0 	cmpeqi	r2,r2,255
  80eefc:	1000031e 	bne	r2,zero,80ef0c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80ef00:	d0a06303 	ldbu	r2,-32372(gp)
  80ef04:	10800044 	addi	r2,r2,1
  80ef08:	d0a06305 	stb	r2,-32372(gp)
  80ef0c:	e0bffd17 	ldw	r2,-12(fp)
  80ef10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef14:	e0bffe17 	ldw	r2,-8(fp)
  80ef18:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80ef1c:	0001883a 	nop
  80ef20:	e037883a 	mov	sp,fp
  80ef24:	df000017 	ldw	fp,0(sp)
  80ef28:	dec00104 	addi	sp,sp,4
  80ef2c:	f800283a 	ret

0080ef30 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80ef30:	defff804 	addi	sp,sp,-32
  80ef34:	dfc00715 	stw	ra,28(sp)
  80ef38:	df000615 	stw	fp,24(sp)
  80ef3c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80ef40:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80ef44:	d0a06343 	ldbu	r2,-32371(gp)
  80ef48:	10803fcc 	andi	r2,r2,255
  80ef4c:	10800058 	cmpnei	r2,r2,1
  80ef50:	1000281e 	bne	r2,zero,80eff4 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef54:	0005303a 	rdctl	r2,status
  80ef58:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef5c:	e0ffff17 	ldw	r3,-4(fp)
  80ef60:	00bfff84 	movi	r2,-2
  80ef64:	1884703a 	and	r2,r3,r2
  80ef68:	1001703a 	wrctl	status,r2
  
  return context;
  80ef6c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80ef70:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80ef74:	d0a06303 	ldbu	r2,-32372(gp)
  80ef78:	10803fcc 	andi	r2,r2,255
  80ef7c:	10001926 	beq	r2,zero,80efe4 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80ef80:	d0a06303 	ldbu	r2,-32372(gp)
  80ef84:	10bfffc4 	addi	r2,r2,-1
  80ef88:	d0a06305 	stb	r2,-32372(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80ef8c:	d0a06303 	ldbu	r2,-32372(gp)
  80ef90:	10803fcc 	andi	r2,r2,255
  80ef94:	10000e1e 	bne	r2,zero,80efd0 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80ef98:	d0a07103 	ldbu	r2,-32316(gp)
  80ef9c:	10803fcc 	andi	r2,r2,255
  80efa0:	1000061e 	bne	r2,zero,80efbc <OSSchedUnlock+0x8c>
  80efa4:	e0bffa17 	ldw	r2,-24(fp)
  80efa8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efac:	e0bffb17 	ldw	r2,-20(fp)
  80efb0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80efb4:	080fdd80 	call	80fdd8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80efb8:	00000e06 	br	80eff4 <OSSchedUnlock+0xc4>
  80efbc:	e0bffa17 	ldw	r2,-24(fp)
  80efc0:	e0bffc15 	stw	r2,-16(fp)
  80efc4:	e0bffc17 	ldw	r2,-16(fp)
  80efc8:	1001703a 	wrctl	status,r2
  80efcc:	00000906 	br	80eff4 <OSSchedUnlock+0xc4>
  80efd0:	e0bffa17 	ldw	r2,-24(fp)
  80efd4:	e0bffd15 	stw	r2,-12(fp)
  80efd8:	e0bffd17 	ldw	r2,-12(fp)
  80efdc:	1001703a 	wrctl	status,r2
  80efe0:	00000406 	br	80eff4 <OSSchedUnlock+0xc4>
  80efe4:	e0bffa17 	ldw	r2,-24(fp)
  80efe8:	e0bffe15 	stw	r2,-8(fp)
  80efec:	e0bffe17 	ldw	r2,-8(fp)
  80eff0:	1001703a 	wrctl	status,r2
  80eff4:	0001883a 	nop
  80eff8:	e037883a 	mov	sp,fp
  80effc:	dfc00117 	ldw	ra,4(sp)
  80f000:	df000017 	ldw	fp,0(sp)
  80f004:	dec00204 	addi	sp,sp,8
  80f008:	f800283a 	ret

0080f00c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80f00c:	defffe04 	addi	sp,sp,-8
  80f010:	dfc00115 	stw	ra,4(sp)
  80f014:	df000015 	stw	fp,0(sp)
  80f018:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80f01c:	d0a06343 	ldbu	r2,-32371(gp)
  80f020:	10803fcc 	andi	r2,r2,255
  80f024:	10000f1e 	bne	r2,zero,80f064 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80f028:	080fea80 	call	80fea8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80f02c:	d0a06503 	ldbu	r2,-32364(gp)
  80f030:	d0a06545 	stb	r2,-32363(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80f034:	d0a06503 	ldbu	r2,-32364(gp)
  80f038:	10c03fcc 	andi	r3,r2,255
  80f03c:	008020b4 	movhi	r2,130
  80f040:	10979904 	addi	r2,r2,24164
  80f044:	18c7883a 	add	r3,r3,r3
  80f048:	18c7883a 	add	r3,r3,r3
  80f04c:	10c5883a 	add	r2,r2,r3
  80f050:	10800017 	ldw	r2,0(r2)
  80f054:	d0a06d15 	stw	r2,-32332(gp)
        OSTCBCur      = OSTCBHighRdy;
  80f058:	d0a06d17 	ldw	r2,-32332(gp)
  80f05c:	d0a07215 	stw	r2,-32312(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80f060:	08192b40 	call	8192b4 <OSStartHighRdy>
    }
}
  80f064:	0001883a 	nop
  80f068:	e037883a 	mov	sp,fp
  80f06c:	dfc00117 	ldw	ra,4(sp)
  80f070:	df000017 	ldw	fp,0(sp)
  80f074:	dec00204 	addi	sp,sp,8
  80f078:	f800283a 	ret

0080f07c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80f07c:	defff904 	addi	sp,sp,-28
  80f080:	dfc00615 	stw	ra,24(sp)
  80f084:	df000515 	stw	fp,20(sp)
  80f088:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f08c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80f090:	01000084 	movi	r4,2
  80f094:	08157800 	call	815780 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f098:	0005303a 	rdctl	r2,status
  80f09c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0a0:	e0fffc17 	ldw	r3,-16(fp)
  80f0a4:	00bfff84 	movi	r2,-2
  80f0a8:	1884703a 	and	r2,r3,r2
  80f0ac:	1001703a 	wrctl	status,r2
  
  return context;
  80f0b0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80f0b4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80f0b8:	d0206415 	stw	zero,-32368(gp)
  80f0bc:	e0bffb17 	ldw	r2,-20(fp)
  80f0c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f0c4:	e0bffd17 	ldw	r2,-12(fp)
  80f0c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80f0cc:	01001904 	movi	r4,100
  80f0d0:	08157800 	call	815780 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0d4:	0005303a 	rdctl	r2,status
  80f0d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0dc:	e0fffe17 	ldw	r3,-8(fp)
  80f0e0:	00bfff84 	movi	r2,-2
  80f0e4:	1884703a 	and	r2,r3,r2
  80f0e8:	1001703a 	wrctl	status,r2
  
  return context;
  80f0ec:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80f0f0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80f0f4:	d0a06417 	ldw	r2,-32368(gp)
  80f0f8:	d0a06915 	stw	r2,-32348(gp)
    OSStatRdy    = OS_TRUE;
  80f0fc:	00800044 	movi	r2,1
  80f100:	d0a07505 	stb	r2,-32300(gp)
  80f104:	e0bffb17 	ldw	r2,-20(fp)
  80f108:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f10c:	e0bfff17 	ldw	r2,-4(fp)
  80f110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80f114:	0001883a 	nop
  80f118:	e037883a 	mov	sp,fp
  80f11c:	dfc00117 	ldw	ra,4(sp)
  80f120:	df000017 	ldw	fp,0(sp)
  80f124:	dec00204 	addi	sp,sp,8
  80f128:	f800283a 	ret

0080f12c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80f12c:	defff704 	addi	sp,sp,-36
  80f130:	dfc00815 	stw	ra,32(sp)
  80f134:	df000715 	stw	fp,28(sp)
  80f138:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80f13c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80f140:	08194dc0 	call	8194dc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f144:	0005303a 	rdctl	r2,status
  80f148:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f14c:	e0fffd17 	ldw	r3,-12(fp)
  80f150:	00bfff84 	movi	r2,-2
  80f154:	1884703a 	and	r2,r3,r2
  80f158:	1001703a 	wrctl	status,r2
  
  return context;
  80f15c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80f160:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  80f164:	d0a07317 	ldw	r2,-32308(gp)
  80f168:	10800044 	addi	r2,r2,1
  80f16c:	d0a07315 	stw	r2,-32308(gp)
  80f170:	e0bffb17 	ldw	r2,-20(fp)
  80f174:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f178:	e0bfff17 	ldw	r2,-4(fp)
  80f17c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80f180:	d0a06343 	ldbu	r2,-32371(gp)
  80f184:	10803fcc 	andi	r2,r2,255
  80f188:	10800058 	cmpnei	r2,r2,1
  80f18c:	10006a1e 	bne	r2,zero,80f338 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80f190:	d0a06703 	ldbu	r2,-32356(gp)
  80f194:	10803fcc 	andi	r2,r2,255
  80f198:	10c00060 	cmpeqi	r3,r2,1
  80f19c:	1800061e 	bne	r3,zero,80f1b8 <OSTimeTick+0x8c>
  80f1a0:	10c000a0 	cmpeqi	r3,r2,2
  80f1a4:	1800061e 	bne	r3,zero,80f1c0 <OSTimeTick+0x94>
  80f1a8:	10000a1e 	bne	r2,zero,80f1d4 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80f1ac:	00800044 	movi	r2,1
  80f1b0:	e0bffa05 	stb	r2,-24(fp)
                 break;
  80f1b4:	00000b06 	br	80f1e4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80f1b8:	e03ffa05 	stb	zero,-24(fp)
                 break;
  80f1bc:	00000906 	br	80f1e4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80f1c0:	00800044 	movi	r2,1
  80f1c4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80f1c8:	00800044 	movi	r2,1
  80f1cc:	d0a06705 	stb	r2,-32356(gp)
                 break;
  80f1d0:	00000406 	br	80f1e4 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80f1d4:	00800044 	movi	r2,1
  80f1d8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80f1dc:	d0206705 	stb	zero,-32356(gp)
                 break;
  80f1e0:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80f1e4:	e0bffa03 	ldbu	r2,-24(fp)
  80f1e8:	10005226 	beq	r2,zero,80f334 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80f1ec:	d0a06617 	ldw	r2,-32360(gp)
  80f1f0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80f1f4:	00004906 	br	80f31c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f1f8:	0005303a 	rdctl	r2,status
  80f1fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f200:	e0fffc17 	ldw	r3,-16(fp)
  80f204:	00bfff84 	movi	r2,-2
  80f208:	1884703a 	and	r2,r3,r2
  80f20c:	1001703a 	wrctl	status,r2
  
  return context;
  80f210:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  80f214:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80f218:	e0bff917 	ldw	r2,-28(fp)
  80f21c:	10800b8b 	ldhu	r2,46(r2)
  80f220:	10bfffcc 	andi	r2,r2,65535
  80f224:	10003626 	beq	r2,zero,80f300 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80f228:	e0bff917 	ldw	r2,-28(fp)
  80f22c:	10800b8b 	ldhu	r2,46(r2)
  80f230:	10bfffc4 	addi	r2,r2,-1
  80f234:	1007883a 	mov	r3,r2
  80f238:	e0bff917 	ldw	r2,-28(fp)
  80f23c:	10c00b8d 	sth	r3,46(r2)
  80f240:	e0bff917 	ldw	r2,-28(fp)
  80f244:	10800b8b 	ldhu	r2,46(r2)
  80f248:	10bfffcc 	andi	r2,r2,65535
  80f24c:	10002c1e 	bne	r2,zero,80f300 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80f250:	e0bff917 	ldw	r2,-28(fp)
  80f254:	10800c03 	ldbu	r2,48(r2)
  80f258:	10803fcc 	andi	r2,r2,255
  80f25c:	10800dcc 	andi	r2,r2,55
  80f260:	10000b26 	beq	r2,zero,80f290 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80f264:	e0bff917 	ldw	r2,-28(fp)
  80f268:	10c00c03 	ldbu	r3,48(r2)
  80f26c:	00bff204 	movi	r2,-56
  80f270:	1884703a 	and	r2,r3,r2
  80f274:	1007883a 	mov	r3,r2
  80f278:	e0bff917 	ldw	r2,-28(fp)
  80f27c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80f280:	e0bff917 	ldw	r2,-28(fp)
  80f284:	00c00044 	movi	r3,1
  80f288:	10c00c45 	stb	r3,49(r2)
  80f28c:	00000206 	br	80f298 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80f290:	e0bff917 	ldw	r2,-28(fp)
  80f294:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80f298:	e0bff917 	ldw	r2,-28(fp)
  80f29c:	10800c03 	ldbu	r2,48(r2)
  80f2a0:	10803fcc 	andi	r2,r2,255
  80f2a4:	1080020c 	andi	r2,r2,8
  80f2a8:	1000151e 	bne	r2,zero,80f300 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80f2ac:	e0bff917 	ldw	r2,-28(fp)
  80f2b0:	10c00d83 	ldbu	r3,54(r2)
  80f2b4:	d0a06f03 	ldbu	r2,-32324(gp)
  80f2b8:	1884b03a 	or	r2,r3,r2
  80f2bc:	d0a06f05 	stb	r2,-32324(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80f2c0:	e0bff917 	ldw	r2,-28(fp)
  80f2c4:	10800d03 	ldbu	r2,52(r2)
  80f2c8:	10c03fcc 	andi	r3,r2,255
  80f2cc:	e0bff917 	ldw	r2,-28(fp)
  80f2d0:	10800d03 	ldbu	r2,52(r2)
  80f2d4:	11003fcc 	andi	r4,r2,255
  80f2d8:	d0a06f44 	addi	r2,gp,-32323
  80f2dc:	2085883a 	add	r2,r4,r2
  80f2e0:	11000003 	ldbu	r4,0(r2)
  80f2e4:	e0bff917 	ldw	r2,-28(fp)
  80f2e8:	10800d43 	ldbu	r2,53(r2)
  80f2ec:	2084b03a 	or	r2,r4,r2
  80f2f0:	1009883a 	mov	r4,r2
  80f2f4:	d0a06f44 	addi	r2,gp,-32323
  80f2f8:	1885883a 	add	r2,r3,r2
  80f2fc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80f300:	e0bff917 	ldw	r2,-28(fp)
  80f304:	10800517 	ldw	r2,20(r2)
  80f308:	e0bff915 	stw	r2,-28(fp)
  80f30c:	e0bffb17 	ldw	r2,-20(fp)
  80f310:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f314:	e0bffe17 	ldw	r2,-8(fp)
  80f318:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80f31c:	e0bff917 	ldw	r2,-28(fp)
  80f320:	10800c83 	ldbu	r2,50(r2)
  80f324:	10803fcc 	andi	r2,r2,255
  80f328:	10800518 	cmpnei	r2,r2,20
  80f32c:	103fb21e 	bne	r2,zero,80f1f8 <__alt_mem_epcs_flash_controller_0+0xff8061f8>
  80f330:	00000106 	br	80f338 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  80f334:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80f338:	e037883a 	mov	sp,fp
  80f33c:	dfc00117 	ldw	ra,4(sp)
  80f340:	df000017 	ldw	fp,0(sp)
  80f344:	dec00204 	addi	sp,sp,8
  80f348:	f800283a 	ret

0080f34c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80f34c:	deffff04 	addi	sp,sp,-4
  80f350:	df000015 	stw	fp,0(sp)
  80f354:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80f358:	00804784 	movi	r2,286
}
  80f35c:	e037883a 	mov	sp,fp
  80f360:	df000017 	ldw	fp,0(sp)
  80f364:	dec00104 	addi	sp,sp,4
  80f368:	f800283a 	ret

0080f36c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80f36c:	deffff04 	addi	sp,sp,-4
  80f370:	df000015 	stw	fp,0(sp)
  80f374:	d839883a 	mov	fp,sp
}
  80f378:	0001883a 	nop
  80f37c:	e037883a 	mov	sp,fp
  80f380:	df000017 	ldw	fp,0(sp)
  80f384:	dec00104 	addi	sp,sp,4
  80f388:	f800283a 	ret

0080f38c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80f38c:	defff804 	addi	sp,sp,-32
  80f390:	dfc00715 	stw	ra,28(sp)
  80f394:	df000615 	stw	fp,24(sp)
  80f398:	df000604 	addi	fp,sp,24
  80f39c:	e13ffc15 	stw	r4,-16(fp)
  80f3a0:	e17ffd15 	stw	r5,-12(fp)
  80f3a4:	3007883a 	mov	r3,r6
  80f3a8:	3805883a 	mov	r2,r7
  80f3ac:	e0fffe05 	stb	r3,-8(fp)
  80f3b0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80f3b4:	e0bffc17 	ldw	r2,-16(fp)
  80f3b8:	10800283 	ldbu	r2,10(r2)
  80f3bc:	10c03fcc 	andi	r3,r2,255
  80f3c0:	008020b4 	movhi	r2,130
  80f3c4:	10a8b404 	addi	r2,r2,-23856
  80f3c8:	10c5883a 	add	r2,r2,r3
  80f3cc:	10800003 	ldbu	r2,0(r2)
  80f3d0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80f3d4:	e0bffa03 	ldbu	r2,-24(fp)
  80f3d8:	e0fffc17 	ldw	r3,-16(fp)
  80f3dc:	1885883a 	add	r2,r3,r2
  80f3e0:	108002c4 	addi	r2,r2,11
  80f3e4:	10800003 	ldbu	r2,0(r2)
  80f3e8:	10c03fcc 	andi	r3,r2,255
  80f3ec:	008020b4 	movhi	r2,130
  80f3f0:	10a8b404 	addi	r2,r2,-23856
  80f3f4:	10c5883a 	add	r2,r2,r3
  80f3f8:	10800003 	ldbu	r2,0(r2)
  80f3fc:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80f400:	e0bffa03 	ldbu	r2,-24(fp)
  80f404:	100490fa 	slli	r2,r2,3
  80f408:	1007883a 	mov	r3,r2
  80f40c:	e0bffa43 	ldbu	r2,-23(fp)
  80f410:	1885883a 	add	r2,r3,r2
  80f414:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80f418:	e0fffa83 	ldbu	r3,-22(fp)
  80f41c:	008020b4 	movhi	r2,130
  80f420:	10979904 	addi	r2,r2,24164
  80f424:	18c7883a 	add	r3,r3,r3
  80f428:	18c7883a 	add	r3,r3,r3
  80f42c:	10c5883a 	add	r2,r2,r3
  80f430:	10800017 	ldw	r2,0(r2)
  80f434:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80f438:	e0bffb17 	ldw	r2,-20(fp)
  80f43c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80f440:	e0bffb17 	ldw	r2,-20(fp)
  80f444:	e0fffd17 	ldw	r3,-12(fp)
  80f448:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80f44c:	e0bffb17 	ldw	r2,-20(fp)
  80f450:	10800c03 	ldbu	r2,48(r2)
  80f454:	1007883a 	mov	r3,r2
  80f458:	e0bffe03 	ldbu	r2,-8(fp)
  80f45c:	0084303a 	nor	r2,zero,r2
  80f460:	1884703a 	and	r2,r3,r2
  80f464:	1007883a 	mov	r3,r2
  80f468:	e0bffb17 	ldw	r2,-20(fp)
  80f46c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80f470:	e0bffb17 	ldw	r2,-20(fp)
  80f474:	e0ffff03 	ldbu	r3,-4(fp)
  80f478:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80f47c:	e0bffb17 	ldw	r2,-20(fp)
  80f480:	10800c03 	ldbu	r2,48(r2)
  80f484:	10803fcc 	andi	r2,r2,255
  80f488:	1080020c 	andi	r2,r2,8
  80f48c:	1000111e 	bne	r2,zero,80f4d4 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80f490:	e0bffb17 	ldw	r2,-20(fp)
  80f494:	10c00d83 	ldbu	r3,54(r2)
  80f498:	d0a06f03 	ldbu	r2,-32324(gp)
  80f49c:	1884b03a 	or	r2,r3,r2
  80f4a0:	d0a06f05 	stb	r2,-32324(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80f4a4:	e0fffa03 	ldbu	r3,-24(fp)
  80f4a8:	e13ffa03 	ldbu	r4,-24(fp)
  80f4ac:	d0a06f44 	addi	r2,gp,-32323
  80f4b0:	2085883a 	add	r2,r4,r2
  80f4b4:	11000003 	ldbu	r4,0(r2)
  80f4b8:	e0bffb17 	ldw	r2,-20(fp)
  80f4bc:	10800d43 	ldbu	r2,53(r2)
  80f4c0:	2084b03a 	or	r2,r4,r2
  80f4c4:	1009883a 	mov	r4,r2
  80f4c8:	d0a06f44 	addi	r2,gp,-32323
  80f4cc:	1885883a 	add	r2,r3,r2
  80f4d0:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80f4d4:	e17ffc17 	ldw	r5,-16(fp)
  80f4d8:	e13ffb17 	ldw	r4,-20(fp)
  80f4dc:	080f7840 	call	80f784 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80f4e0:	e0bffb17 	ldw	r2,-20(fp)
  80f4e4:	10800817 	ldw	r2,32(r2)
  80f4e8:	10000826 	beq	r2,zero,80f50c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80f4ec:	e0bffb17 	ldw	r2,-20(fp)
  80f4f0:	10800817 	ldw	r2,32(r2)
  80f4f4:	100b883a 	mov	r5,r2
  80f4f8:	e13ffb17 	ldw	r4,-20(fp)
  80f4fc:	080f83c0 	call	80f83c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80f500:	e0bffb17 	ldw	r2,-20(fp)
  80f504:	e0fffc17 	ldw	r3,-16(fp)
  80f508:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  80f50c:	e0bffa83 	ldbu	r2,-22(fp)
}
  80f510:	e037883a 	mov	sp,fp
  80f514:	dfc00117 	ldw	ra,4(sp)
  80f518:	df000017 	ldw	fp,0(sp)
  80f51c:	dec00204 	addi	sp,sp,8
  80f520:	f800283a 	ret

0080f524 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80f524:	defffd04 	addi	sp,sp,-12
  80f528:	df000215 	stw	fp,8(sp)
  80f52c:	df000204 	addi	fp,sp,8
  80f530:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80f534:	d0a07217 	ldw	r2,-32312(gp)
  80f538:	e0ffff17 	ldw	r3,-4(fp)
  80f53c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80f540:	d0a07217 	ldw	r2,-32312(gp)
  80f544:	10800d03 	ldbu	r2,52(r2)
  80f548:	10803fcc 	andi	r2,r2,255
  80f54c:	d0e07217 	ldw	r3,-32312(gp)
  80f550:	18c00d03 	ldbu	r3,52(r3)
  80f554:	18c03fcc 	andi	r3,r3,255
  80f558:	e13fff17 	ldw	r4,-4(fp)
  80f55c:	20c7883a 	add	r3,r4,r3
  80f560:	18c002c4 	addi	r3,r3,11
  80f564:	19000003 	ldbu	r4,0(r3)
  80f568:	d0e07217 	ldw	r3,-32312(gp)
  80f56c:	18c00d43 	ldbu	r3,53(r3)
  80f570:	20c6b03a 	or	r3,r4,r3
  80f574:	1809883a 	mov	r4,r3
  80f578:	e0ffff17 	ldw	r3,-4(fp)
  80f57c:	1885883a 	add	r2,r3,r2
  80f580:	108002c4 	addi	r2,r2,11
  80f584:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80f588:	e0bfff17 	ldw	r2,-4(fp)
  80f58c:	10c00283 	ldbu	r3,10(r2)
  80f590:	d0a07217 	ldw	r2,-32312(gp)
  80f594:	10800d83 	ldbu	r2,54(r2)
  80f598:	1884b03a 	or	r2,r3,r2
  80f59c:	1007883a 	mov	r3,r2
  80f5a0:	e0bfff17 	ldw	r2,-4(fp)
  80f5a4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80f5a8:	d0a07217 	ldw	r2,-32312(gp)
  80f5ac:	10800d03 	ldbu	r2,52(r2)
  80f5b0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80f5b4:	e0fffe03 	ldbu	r3,-8(fp)
  80f5b8:	e13ffe03 	ldbu	r4,-8(fp)
  80f5bc:	d0a06f44 	addi	r2,gp,-32323
  80f5c0:	2085883a 	add	r2,r4,r2
  80f5c4:	10800003 	ldbu	r2,0(r2)
  80f5c8:	1009883a 	mov	r4,r2
  80f5cc:	d0a07217 	ldw	r2,-32312(gp)
  80f5d0:	10800d43 	ldbu	r2,53(r2)
  80f5d4:	0084303a 	nor	r2,zero,r2
  80f5d8:	2084703a 	and	r2,r4,r2
  80f5dc:	1009883a 	mov	r4,r2
  80f5e0:	d0a06f44 	addi	r2,gp,-32323
  80f5e4:	1885883a 	add	r2,r3,r2
  80f5e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80f5ec:	e0fffe03 	ldbu	r3,-8(fp)
  80f5f0:	d0a06f44 	addi	r2,gp,-32323
  80f5f4:	1885883a 	add	r2,r3,r2
  80f5f8:	10800003 	ldbu	r2,0(r2)
  80f5fc:	10803fcc 	andi	r2,r2,255
  80f600:	1000071e 	bne	r2,zero,80f620 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80f604:	d0a07217 	ldw	r2,-32312(gp)
  80f608:	10800d83 	ldbu	r2,54(r2)
  80f60c:	0084303a 	nor	r2,zero,r2
  80f610:	1007883a 	mov	r3,r2
  80f614:	d0a06f03 	ldbu	r2,-32324(gp)
  80f618:	1884703a 	and	r2,r3,r2
  80f61c:	d0a06f05 	stb	r2,-32324(gp)
    }
}
  80f620:	0001883a 	nop
  80f624:	e037883a 	mov	sp,fp
  80f628:	df000017 	ldw	fp,0(sp)
  80f62c:	dec00104 	addi	sp,sp,4
  80f630:	f800283a 	ret

0080f634 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80f634:	defffb04 	addi	sp,sp,-20
  80f638:	df000415 	stw	fp,16(sp)
  80f63c:	df000404 	addi	fp,sp,16
  80f640:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80f644:	d0a07217 	ldw	r2,-32312(gp)
  80f648:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80f64c:	d0a07217 	ldw	r2,-32312(gp)
  80f650:	e0ffff17 	ldw	r3,-4(fp)
  80f654:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  80f658:	e0bfff17 	ldw	r2,-4(fp)
  80f65c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  80f660:	e0bffc17 	ldw	r2,-16(fp)
  80f664:	10800017 	ldw	r2,0(r2)
  80f668:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80f66c:	00002006 	br	80f6f0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80f670:	d0a07217 	ldw	r2,-32312(gp)
  80f674:	10800d03 	ldbu	r2,52(r2)
  80f678:	10803fcc 	andi	r2,r2,255
  80f67c:	d0e07217 	ldw	r3,-32312(gp)
  80f680:	18c00d03 	ldbu	r3,52(r3)
  80f684:	18c03fcc 	andi	r3,r3,255
  80f688:	e13ffd17 	ldw	r4,-12(fp)
  80f68c:	20c7883a 	add	r3,r4,r3
  80f690:	18c002c4 	addi	r3,r3,11
  80f694:	19000003 	ldbu	r4,0(r3)
  80f698:	d0e07217 	ldw	r3,-32312(gp)
  80f69c:	18c00d43 	ldbu	r3,53(r3)
  80f6a0:	20c6b03a 	or	r3,r4,r3
  80f6a4:	1809883a 	mov	r4,r3
  80f6a8:	e0fffd17 	ldw	r3,-12(fp)
  80f6ac:	1885883a 	add	r2,r3,r2
  80f6b0:	108002c4 	addi	r2,r2,11
  80f6b4:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80f6b8:	e0bffd17 	ldw	r2,-12(fp)
  80f6bc:	10c00283 	ldbu	r3,10(r2)
  80f6c0:	d0a07217 	ldw	r2,-32312(gp)
  80f6c4:	10800d83 	ldbu	r2,54(r2)
  80f6c8:	1884b03a 	or	r2,r3,r2
  80f6cc:	1007883a 	mov	r3,r2
  80f6d0:	e0bffd17 	ldw	r2,-12(fp)
  80f6d4:	10c00285 	stb	r3,10(r2)
        pevents++;
  80f6d8:	e0bffc17 	ldw	r2,-16(fp)
  80f6dc:	10800104 	addi	r2,r2,4
  80f6e0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  80f6e4:	e0bffc17 	ldw	r2,-16(fp)
  80f6e8:	10800017 	ldw	r2,0(r2)
  80f6ec:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80f6f0:	e0bffd17 	ldw	r2,-12(fp)
  80f6f4:	103fde1e 	bne	r2,zero,80f670 <__alt_mem_epcs_flash_controller_0+0xff806670>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80f6f8:	d0a07217 	ldw	r2,-32312(gp)
  80f6fc:	10800d03 	ldbu	r2,52(r2)
  80f700:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80f704:	e0fffe03 	ldbu	r3,-8(fp)
  80f708:	e13ffe03 	ldbu	r4,-8(fp)
  80f70c:	d0a06f44 	addi	r2,gp,-32323
  80f710:	2085883a 	add	r2,r4,r2
  80f714:	10800003 	ldbu	r2,0(r2)
  80f718:	1009883a 	mov	r4,r2
  80f71c:	d0a07217 	ldw	r2,-32312(gp)
  80f720:	10800d43 	ldbu	r2,53(r2)
  80f724:	0084303a 	nor	r2,zero,r2
  80f728:	2084703a 	and	r2,r4,r2
  80f72c:	1009883a 	mov	r4,r2
  80f730:	d0a06f44 	addi	r2,gp,-32323
  80f734:	1885883a 	add	r2,r3,r2
  80f738:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80f73c:	e0fffe03 	ldbu	r3,-8(fp)
  80f740:	d0a06f44 	addi	r2,gp,-32323
  80f744:	1885883a 	add	r2,r3,r2
  80f748:	10800003 	ldbu	r2,0(r2)
  80f74c:	10803fcc 	andi	r2,r2,255
  80f750:	1000071e 	bne	r2,zero,80f770 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80f754:	d0a07217 	ldw	r2,-32312(gp)
  80f758:	10800d83 	ldbu	r2,54(r2)
  80f75c:	0084303a 	nor	r2,zero,r2
  80f760:	1007883a 	mov	r3,r2
  80f764:	d0a06f03 	ldbu	r2,-32324(gp)
  80f768:	1884703a 	and	r2,r3,r2
  80f76c:	d0a06f05 	stb	r2,-32324(gp)
    }
}
  80f770:	0001883a 	nop
  80f774:	e037883a 	mov	sp,fp
  80f778:	df000017 	ldw	fp,0(sp)
  80f77c:	dec00104 	addi	sp,sp,4
  80f780:	f800283a 	ret

0080f784 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80f784:	defffc04 	addi	sp,sp,-16
  80f788:	df000315 	stw	fp,12(sp)
  80f78c:	df000304 	addi	fp,sp,12
  80f790:	e13ffe15 	stw	r4,-8(fp)
  80f794:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80f798:	e0bffe17 	ldw	r2,-8(fp)
  80f79c:	10800d03 	ldbu	r2,52(r2)
  80f7a0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80f7a4:	e0bffd03 	ldbu	r2,-12(fp)
  80f7a8:	e0fffd03 	ldbu	r3,-12(fp)
  80f7ac:	e13fff17 	ldw	r4,-4(fp)
  80f7b0:	20c7883a 	add	r3,r4,r3
  80f7b4:	18c002c4 	addi	r3,r3,11
  80f7b8:	18c00003 	ldbu	r3,0(r3)
  80f7bc:	1809883a 	mov	r4,r3
  80f7c0:	e0fffe17 	ldw	r3,-8(fp)
  80f7c4:	18c00d43 	ldbu	r3,53(r3)
  80f7c8:	00c6303a 	nor	r3,zero,r3
  80f7cc:	20c6703a 	and	r3,r4,r3
  80f7d0:	1809883a 	mov	r4,r3
  80f7d4:	e0ffff17 	ldw	r3,-4(fp)
  80f7d8:	1885883a 	add	r2,r3,r2
  80f7dc:	108002c4 	addi	r2,r2,11
  80f7e0:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80f7e4:	e0bffd03 	ldbu	r2,-12(fp)
  80f7e8:	e0ffff17 	ldw	r3,-4(fp)
  80f7ec:	1885883a 	add	r2,r3,r2
  80f7f0:	108002c4 	addi	r2,r2,11
  80f7f4:	10800003 	ldbu	r2,0(r2)
  80f7f8:	10803fcc 	andi	r2,r2,255
  80f7fc:	10000a1e 	bne	r2,zero,80f828 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80f800:	e0bfff17 	ldw	r2,-4(fp)
  80f804:	10800283 	ldbu	r2,10(r2)
  80f808:	1007883a 	mov	r3,r2
  80f80c:	e0bffe17 	ldw	r2,-8(fp)
  80f810:	10800d83 	ldbu	r2,54(r2)
  80f814:	0084303a 	nor	r2,zero,r2
  80f818:	1884703a 	and	r2,r3,r2
  80f81c:	1007883a 	mov	r3,r2
  80f820:	e0bfff17 	ldw	r2,-4(fp)
  80f824:	10c00285 	stb	r3,10(r2)
    }
}
  80f828:	0001883a 	nop
  80f82c:	e037883a 	mov	sp,fp
  80f830:	df000017 	ldw	fp,0(sp)
  80f834:	dec00104 	addi	sp,sp,4
  80f838:	f800283a 	ret

0080f83c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80f83c:	defffa04 	addi	sp,sp,-24
  80f840:	df000515 	stw	fp,20(sp)
  80f844:	df000504 	addi	fp,sp,20
  80f848:	e13ffe15 	stw	r4,-8(fp)
  80f84c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80f850:	e0bffe17 	ldw	r2,-8(fp)
  80f854:	10800d03 	ldbu	r2,52(r2)
  80f858:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  80f85c:	e0bffe17 	ldw	r2,-8(fp)
  80f860:	10800d83 	ldbu	r2,54(r2)
  80f864:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  80f868:	e0bffe17 	ldw	r2,-8(fp)
  80f86c:	10800d43 	ldbu	r2,53(r2)
  80f870:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  80f874:	e0bfff17 	ldw	r2,-4(fp)
  80f878:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  80f87c:	e0bffb17 	ldw	r2,-20(fp)
  80f880:	10800017 	ldw	r2,0(r2)
  80f884:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80f888:	00002506 	br	80f920 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  80f88c:	e0bffd03 	ldbu	r2,-12(fp)
  80f890:	e0fffd03 	ldbu	r3,-12(fp)
  80f894:	e13ffc17 	ldw	r4,-16(fp)
  80f898:	20c7883a 	add	r3,r4,r3
  80f89c:	18c002c4 	addi	r3,r3,11
  80f8a0:	18c00003 	ldbu	r3,0(r3)
  80f8a4:	1809883a 	mov	r4,r3
  80f8a8:	e0fffd83 	ldbu	r3,-10(fp)
  80f8ac:	00c6303a 	nor	r3,zero,r3
  80f8b0:	20c6703a 	and	r3,r4,r3
  80f8b4:	1809883a 	mov	r4,r3
  80f8b8:	e0fffc17 	ldw	r3,-16(fp)
  80f8bc:	1885883a 	add	r2,r3,r2
  80f8c0:	108002c4 	addi	r2,r2,11
  80f8c4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80f8c8:	e0bffd03 	ldbu	r2,-12(fp)
  80f8cc:	e0fffc17 	ldw	r3,-16(fp)
  80f8d0:	1885883a 	add	r2,r3,r2
  80f8d4:	108002c4 	addi	r2,r2,11
  80f8d8:	10800003 	ldbu	r2,0(r2)
  80f8dc:	10803fcc 	andi	r2,r2,255
  80f8e0:	1000091e 	bne	r2,zero,80f908 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  80f8e4:	e0bffc17 	ldw	r2,-16(fp)
  80f8e8:	10800283 	ldbu	r2,10(r2)
  80f8ec:	1007883a 	mov	r3,r2
  80f8f0:	e0bffd43 	ldbu	r2,-11(fp)
  80f8f4:	0084303a 	nor	r2,zero,r2
  80f8f8:	1884703a 	and	r2,r3,r2
  80f8fc:	1007883a 	mov	r3,r2
  80f900:	e0bffc17 	ldw	r2,-16(fp)
  80f904:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80f908:	e0bffb17 	ldw	r2,-20(fp)
  80f90c:	10800104 	addi	r2,r2,4
  80f910:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  80f914:	e0bffb17 	ldw	r2,-20(fp)
  80f918:	10800017 	ldw	r2,0(r2)
  80f91c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80f920:	e0bffc17 	ldw	r2,-16(fp)
  80f924:	103fd91e 	bne	r2,zero,80f88c <__alt_mem_epcs_flash_controller_0+0xff80688c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80f928:	0001883a 	nop
  80f92c:	e037883a 	mov	sp,fp
  80f930:	df000017 	ldw	fp,0(sp)
  80f934:	dec00104 	addi	sp,sp,4
  80f938:	f800283a 	ret

0080f93c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80f93c:	defffc04 	addi	sp,sp,-16
  80f940:	df000315 	stw	fp,12(sp)
  80f944:	df000304 	addi	fp,sp,12
  80f948:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80f94c:	e0bfff17 	ldw	r2,-4(fp)
  80f950:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80f954:	e0bfff17 	ldw	r2,-4(fp)
  80f958:	108002c4 	addi	r2,r2,11
  80f95c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80f960:	e03ffe05 	stb	zero,-8(fp)
  80f964:	00000706 	br	80f984 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  80f968:	e0bffd17 	ldw	r2,-12(fp)
  80f96c:	10c00044 	addi	r3,r2,1
  80f970:	e0fffd15 	stw	r3,-12(fp)
  80f974:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80f978:	e0bffe03 	ldbu	r2,-8(fp)
  80f97c:	10800044 	addi	r2,r2,1
  80f980:	e0bffe05 	stb	r2,-8(fp)
  80f984:	e0bffe03 	ldbu	r2,-8(fp)
  80f988:	108000f0 	cmpltui	r2,r2,3
  80f98c:	103ff61e 	bne	r2,zero,80f968 <__alt_mem_epcs_flash_controller_0+0xff806968>
        *ptbl++ = 0;
    }
}
  80f990:	0001883a 	nop
  80f994:	e037883a 	mov	sp,fp
  80f998:	df000017 	ldw	fp,0(sp)
  80f99c:	dec00104 	addi	sp,sp,4
  80f9a0:	f800283a 	ret

0080f9a4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80f9a4:	defffb04 	addi	sp,sp,-20
  80f9a8:	dfc00415 	stw	ra,16(sp)
  80f9ac:	df000315 	stw	fp,12(sp)
  80f9b0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80f9b4:	0142d004 	movi	r5,2880
  80f9b8:	010020b4 	movhi	r4,130
  80f9bc:	21138504 	addi	r4,r4,19988
  80f9c0:	080fd1c0 	call	80fd1c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80f9c4:	008020b4 	movhi	r2,130
  80f9c8:	10938504 	addi	r2,r2,19988
  80f9cc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80f9d0:	008020b4 	movhi	r2,130
  80f9d4:	10939104 	addi	r2,r2,20036
  80f9d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80f9dc:	e03ffd0d 	sth	zero,-12(fp)
  80f9e0:	00001306 	br	80fa30 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f9e4:	e0bffe17 	ldw	r2,-8(fp)
  80f9e8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80f9ec:	e0bffe17 	ldw	r2,-8(fp)
  80f9f0:	e0ffff17 	ldw	r3,-4(fp)
  80f9f4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80f9f8:	e0bffe17 	ldw	r2,-8(fp)
  80f9fc:	00c00fc4 	movi	r3,63
  80fa00:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80fa04:	e0bffe17 	ldw	r2,-8(fp)
  80fa08:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80fa0c:	e0bffe17 	ldw	r2,-8(fp)
  80fa10:	10800c04 	addi	r2,r2,48
  80fa14:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80fa18:	e0bfff17 	ldw	r2,-4(fp)
  80fa1c:	10800c04 	addi	r2,r2,48
  80fa20:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80fa24:	e0bffd0b 	ldhu	r2,-12(fp)
  80fa28:	10800044 	addi	r2,r2,1
  80fa2c:	e0bffd0d 	sth	r2,-12(fp)
  80fa30:	e0bffd0b 	ldhu	r2,-12(fp)
  80fa34:	10800ef0 	cmpltui	r2,r2,59
  80fa38:	103fea1e 	bne	r2,zero,80f9e4 <__alt_mem_epcs_flash_controller_0+0xff8069e4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80fa3c:	e0bffe17 	ldw	r2,-8(fp)
  80fa40:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80fa44:	e0bffe17 	ldw	r2,-8(fp)
  80fa48:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80fa4c:	e0bffe17 	ldw	r2,-8(fp)
  80fa50:	00c00fc4 	movi	r3,63
  80fa54:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80fa58:	e0bffe17 	ldw	r2,-8(fp)
  80fa5c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80fa60:	008020b4 	movhi	r2,130
  80fa64:	10938504 	addi	r2,r2,19988
  80fa68:	d0a07015 	stw	r2,-32320(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80fa6c:	0001883a 	nop
  80fa70:	e037883a 	mov	sp,fp
  80fa74:	dfc00117 	ldw	ra,4(sp)
  80fa78:	df000017 	ldw	fp,0(sp)
  80fa7c:	dec00204 	addi	sp,sp,8
  80fa80:	f800283a 	ret

0080fa84 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80fa84:	deffff04 	addi	sp,sp,-4
  80fa88:	df000015 	stw	fp,0(sp)
  80fa8c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80fa90:	d0207315 	stw	zero,-32308(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80fa94:	d0207105 	stb	zero,-32316(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80fa98:	d0206305 	stb	zero,-32372(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80fa9c:	d0206b45 	stb	zero,-32339(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80faa0:	d0206345 	stb	zero,-32371(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80faa4:	d0206815 	stw	zero,-32352(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80faa8:	d0206415 	stw	zero,-32368(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80faac:	d0207615 	stw	zero,-32296(gp)
    OSIdleCtrMax  = 0L;
  80fab0:	d0206915 	stw	zero,-32348(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80fab4:	d0207505 	stb	zero,-32300(gp)
#endif
}
  80fab8:	0001883a 	nop
  80fabc:	e037883a 	mov	sp,fp
  80fac0:	df000017 	ldw	fp,0(sp)
  80fac4:	dec00104 	addi	sp,sp,4
  80fac8:	f800283a 	ret

0080facc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80facc:	defffd04 	addi	sp,sp,-12
  80fad0:	df000215 	stw	fp,8(sp)
  80fad4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80fad8:	d0206f05 	stb	zero,-32324(gp)
    prdytbl       = &OSRdyTbl[0];
  80fadc:	d0a06f44 	addi	r2,gp,-32323
  80fae0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80fae4:	e03ffe05 	stb	zero,-8(fp)
  80fae8:	00000706 	br	80fb08 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  80faec:	e0bfff17 	ldw	r2,-4(fp)
  80faf0:	10c00044 	addi	r3,r2,1
  80faf4:	e0ffff15 	stw	r3,-4(fp)
  80faf8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80fafc:	e0bffe03 	ldbu	r2,-8(fp)
  80fb00:	10800044 	addi	r2,r2,1
  80fb04:	e0bffe05 	stb	r2,-8(fp)
  80fb08:	e0bffe03 	ldbu	r2,-8(fp)
  80fb0c:	108000f0 	cmpltui	r2,r2,3
  80fb10:	103ff61e 	bne	r2,zero,80faec <__alt_mem_epcs_flash_controller_0+0xff806aec>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80fb14:	d0206545 	stb	zero,-32363(gp)
    OSPrioHighRdy = 0;
  80fb18:	d0206505 	stb	zero,-32364(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80fb1c:	d0206d15 	stw	zero,-32332(gp)
    OSTCBCur      = (OS_TCB *)0;
  80fb20:	d0207215 	stw	zero,-32312(gp)
}
  80fb24:	0001883a 	nop
  80fb28:	e037883a 	mov	sp,fp
  80fb2c:	df000017 	ldw	fp,0(sp)
  80fb30:	dec00104 	addi	sp,sp,4
  80fb34:	f800283a 	ret

0080fb38 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80fb38:	defff804 	addi	sp,sp,-32
  80fb3c:	dfc00715 	stw	ra,28(sp)
  80fb40:	df000615 	stw	fp,24(sp)
  80fb44:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80fb48:	008000c4 	movi	r2,3
  80fb4c:	d8800415 	stw	r2,16(sp)
  80fb50:	d8000315 	stw	zero,12(sp)
  80fb54:	00808004 	movi	r2,512
  80fb58:	d8800215 	stw	r2,8(sp)
  80fb5c:	008020b4 	movhi	r2,130
  80fb60:	10918504 	addi	r2,r2,17940
  80fb64:	d8800115 	stw	r2,4(sp)
  80fb68:	00bfffd4 	movui	r2,65535
  80fb6c:	d8800015 	stw	r2,0(sp)
  80fb70:	01c00504 	movi	r7,20
  80fb74:	018020b4 	movhi	r6,130
  80fb78:	31938404 	addi	r6,r6,19984
  80fb7c:	000b883a 	mov	r5,zero
  80fb80:	01002074 	movhi	r4,129
  80fb84:	213ff904 	addi	r4,r4,-28
  80fb88:	08146b00 	call	8146b0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80fb8c:	e1bfff04 	addi	r6,fp,-4
  80fb90:	014020b4 	movhi	r5,130
  80fb94:	2968f404 	addi	r5,r5,-23600
  80fb98:	01000504 	movi	r4,20
  80fb9c:	0814ec00 	call	814ec0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80fba0:	0001883a 	nop
  80fba4:	e037883a 	mov	sp,fp
  80fba8:	dfc00117 	ldw	ra,4(sp)
  80fbac:	df000017 	ldw	fp,0(sp)
  80fbb0:	dec00204 	addi	sp,sp,8
  80fbb4:	f800283a 	ret

0080fbb8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80fbb8:	defff804 	addi	sp,sp,-32
  80fbbc:	dfc00715 	stw	ra,28(sp)
  80fbc0:	df000615 	stw	fp,24(sp)
  80fbc4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80fbc8:	008000c4 	movi	r2,3
  80fbcc:	d8800415 	stw	r2,16(sp)
  80fbd0:	d8000315 	stw	zero,12(sp)
  80fbd4:	00808004 	movi	r2,512
  80fbd8:	d8800215 	stw	r2,8(sp)
  80fbdc:	008020b4 	movhi	r2,130
  80fbe0:	108f0d04 	addi	r2,r2,15412
  80fbe4:	d8800115 	stw	r2,4(sp)
  80fbe8:	00bfff94 	movui	r2,65534
  80fbec:	d8800015 	stw	r2,0(sp)
  80fbf0:	01c004c4 	movi	r7,19
  80fbf4:	018020b4 	movhi	r6,130
  80fbf8:	31910c04 	addi	r6,r6,17456
  80fbfc:	000b883a 	mov	r5,zero
  80fc00:	01002074 	movhi	r4,129
  80fc04:	21001004 	addi	r4,r4,64
  80fc08:	08146b00 	call	8146b0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80fc0c:	e1bfff04 	addi	r6,fp,-4
  80fc10:	014020b4 	movhi	r5,130
  80fc14:	2968f804 	addi	r5,r5,-23584
  80fc18:	010004c4 	movi	r4,19
  80fc1c:	0814ec00 	call	814ec0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80fc20:	0001883a 	nop
  80fc24:	e037883a 	mov	sp,fp
  80fc28:	dfc00117 	ldw	ra,4(sp)
  80fc2c:	df000017 	ldw	fp,0(sp)
  80fc30:	dec00204 	addi	sp,sp,8
  80fc34:	f800283a 	ret

0080fc38 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80fc38:	defffb04 	addi	sp,sp,-20
  80fc3c:	dfc00415 	stw	ra,16(sp)
  80fc40:	df000315 	stw	fp,12(sp)
  80fc44:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80fc48:	01414404 	movi	r5,1296
  80fc4c:	010020b4 	movhi	r4,130
  80fc50:	21165504 	addi	r4,r4,22868
  80fc54:	080fd1c0 	call	80fd1c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80fc58:	01401504 	movi	r5,84
  80fc5c:	010020b4 	movhi	r4,130
  80fc60:	21179904 	addi	r4,r4,24164
  80fc64:	080fd1c0 	call	80fd1c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80fc68:	008020b4 	movhi	r2,130
  80fc6c:	10965504 	addi	r2,r2,22868
  80fc70:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80fc74:	008020b4 	movhi	r2,130
  80fc78:	10967004 	addi	r2,r2,22976
  80fc7c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80fc80:	e03ffd05 	stb	zero,-12(fp)
  80fc84:	00001106 	br	80fccc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80fc88:	e0bffe17 	ldw	r2,-8(fp)
  80fc8c:	e0ffff17 	ldw	r3,-4(fp)
  80fc90:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80fc94:	e0bffe17 	ldw	r2,-8(fp)
  80fc98:	00c00fc4 	movi	r3,63
  80fc9c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80fca0:	e0bffe17 	ldw	r2,-8(fp)
  80fca4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80fca8:	e0bffe17 	ldw	r2,-8(fp)
  80fcac:	10801b04 	addi	r2,r2,108
  80fcb0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80fcb4:	e0bfff17 	ldw	r2,-4(fp)
  80fcb8:	10801b04 	addi	r2,r2,108
  80fcbc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80fcc0:	e0bffd03 	ldbu	r2,-12(fp)
  80fcc4:	10800044 	addi	r2,r2,1
  80fcc8:	e0bffd05 	stb	r2,-12(fp)
  80fccc:	e0bffd03 	ldbu	r2,-12(fp)
  80fcd0:	108002f0 	cmpltui	r2,r2,11
  80fcd4:	103fec1e 	bne	r2,zero,80fc88 <__alt_mem_epcs_flash_controller_0+0xff806c88>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80fcd8:	e0bffe17 	ldw	r2,-8(fp)
  80fcdc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80fce0:	e0bffe17 	ldw	r2,-8(fp)
  80fce4:	00c00fc4 	movi	r3,63
  80fce8:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80fcec:	e0bffe17 	ldw	r2,-8(fp)
  80fcf0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80fcf4:	d0206615 	stw	zero,-32360(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80fcf8:	008020b4 	movhi	r2,130
  80fcfc:	10965504 	addi	r2,r2,22868
  80fd00:	d0a06a15 	stw	r2,-32344(gp)
}
  80fd04:	0001883a 	nop
  80fd08:	e037883a 	mov	sp,fp
  80fd0c:	dfc00117 	ldw	ra,4(sp)
  80fd10:	df000017 	ldw	fp,0(sp)
  80fd14:	dec00204 	addi	sp,sp,8
  80fd18:	f800283a 	ret

0080fd1c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80fd1c:	defffd04 	addi	sp,sp,-12
  80fd20:	df000215 	stw	fp,8(sp)
  80fd24:	df000204 	addi	fp,sp,8
  80fd28:	e13ffe15 	stw	r4,-8(fp)
  80fd2c:	2805883a 	mov	r2,r5
  80fd30:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  80fd34:	00000706 	br	80fd54 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80fd38:	e0bffe17 	ldw	r2,-8(fp)
  80fd3c:	10c00044 	addi	r3,r2,1
  80fd40:	e0fffe15 	stw	r3,-8(fp)
  80fd44:	10000005 	stb	zero,0(r2)
        size--;
  80fd48:	e0bfff0b 	ldhu	r2,-4(fp)
  80fd4c:	10bfffc4 	addi	r2,r2,-1
  80fd50:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80fd54:	e0bfff0b 	ldhu	r2,-4(fp)
  80fd58:	103ff71e 	bne	r2,zero,80fd38 <__alt_mem_epcs_flash_controller_0+0xff806d38>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80fd5c:	0001883a 	nop
  80fd60:	e037883a 	mov	sp,fp
  80fd64:	df000017 	ldw	fp,0(sp)
  80fd68:	dec00104 	addi	sp,sp,4
  80fd6c:	f800283a 	ret

0080fd70 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80fd70:	defffc04 	addi	sp,sp,-16
  80fd74:	df000315 	stw	fp,12(sp)
  80fd78:	df000304 	addi	fp,sp,12
  80fd7c:	e13ffd15 	stw	r4,-12(fp)
  80fd80:	e17ffe15 	stw	r5,-8(fp)
  80fd84:	3005883a 	mov	r2,r6
  80fd88:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  80fd8c:	00000b06 	br	80fdbc <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  80fd90:	e0bffd17 	ldw	r2,-12(fp)
  80fd94:	10c00044 	addi	r3,r2,1
  80fd98:	e0fffd15 	stw	r3,-12(fp)
  80fd9c:	e0fffe17 	ldw	r3,-8(fp)
  80fda0:	19000044 	addi	r4,r3,1
  80fda4:	e13ffe15 	stw	r4,-8(fp)
  80fda8:	18c00003 	ldbu	r3,0(r3)
  80fdac:	10c00005 	stb	r3,0(r2)
        size--;
  80fdb0:	e0bfff0b 	ldhu	r2,-4(fp)
  80fdb4:	10bfffc4 	addi	r2,r2,-1
  80fdb8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80fdbc:	e0bfff0b 	ldhu	r2,-4(fp)
  80fdc0:	103ff31e 	bne	r2,zero,80fd90 <__alt_mem_epcs_flash_controller_0+0xff806d90>
        *pdest++ = *psrc++;
        size--;
    }
}
  80fdc4:	0001883a 	nop
  80fdc8:	e037883a 	mov	sp,fp
  80fdcc:	df000017 	ldw	fp,0(sp)
  80fdd0:	dec00104 	addi	sp,sp,4
  80fdd4:	f800283a 	ret

0080fdd8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80fdd8:	defffb04 	addi	sp,sp,-20
  80fddc:	dfc00415 	stw	ra,16(sp)
  80fde0:	df000315 	stw	fp,12(sp)
  80fde4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80fde8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fdec:	0005303a 	rdctl	r2,status
  80fdf0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fdf4:	e0ffff17 	ldw	r3,-4(fp)
  80fdf8:	00bfff84 	movi	r2,-2
  80fdfc:	1884703a 	and	r2,r3,r2
  80fe00:	1001703a 	wrctl	status,r2
  
  return context;
  80fe04:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  80fe08:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80fe0c:	d0a07103 	ldbu	r2,-32316(gp)
  80fe10:	10803fcc 	andi	r2,r2,255
  80fe14:	10001a1e 	bne	r2,zero,80fe80 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80fe18:	d0a06303 	ldbu	r2,-32372(gp)
  80fe1c:	10803fcc 	andi	r2,r2,255
  80fe20:	1000171e 	bne	r2,zero,80fe80 <OS_Sched+0xa8>
            OS_SchedNew();
  80fe24:	080fea80 	call	80fea8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80fe28:	d0e06503 	ldbu	r3,-32364(gp)
  80fe2c:	d0a06543 	ldbu	r2,-32363(gp)
  80fe30:	18c03fcc 	andi	r3,r3,255
  80fe34:	10803fcc 	andi	r2,r2,255
  80fe38:	18801126 	beq	r3,r2,80fe80 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80fe3c:	d0a06503 	ldbu	r2,-32364(gp)
  80fe40:	10c03fcc 	andi	r3,r2,255
  80fe44:	008020b4 	movhi	r2,130
  80fe48:	10979904 	addi	r2,r2,24164
  80fe4c:	18c7883a 	add	r3,r3,r3
  80fe50:	18c7883a 	add	r3,r3,r3
  80fe54:	10c5883a 	add	r2,r2,r3
  80fe58:	10800017 	ldw	r2,0(r2)
  80fe5c:	d0a06d15 	stw	r2,-32332(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80fe60:	d0a06d17 	ldw	r2,-32332(gp)
  80fe64:	10c00e17 	ldw	r3,56(r2)
  80fe68:	18c00044 	addi	r3,r3,1
  80fe6c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80fe70:	d0a06817 	ldw	r2,-32352(gp)
  80fe74:	10800044 	addi	r2,r2,1
  80fe78:	d0a06815 	stw	r2,-32352(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80fe7c:	08192280 	call	819228 <OSCtxSw>
  80fe80:	e0bffd17 	ldw	r2,-12(fp)
  80fe84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe88:	e0bffe17 	ldw	r2,-8(fp)
  80fe8c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80fe90:	0001883a 	nop
  80fe94:	e037883a 	mov	sp,fp
  80fe98:	dfc00117 	ldw	ra,4(sp)
  80fe9c:	df000017 	ldw	fp,0(sp)
  80fea0:	dec00204 	addi	sp,sp,8
  80fea4:	f800283a 	ret

0080fea8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80fea8:	defffe04 	addi	sp,sp,-8
  80feac:	df000115 	stw	fp,4(sp)
  80feb0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80feb4:	d0a06f03 	ldbu	r2,-32324(gp)
  80feb8:	10c03fcc 	andi	r3,r2,255
  80febc:	008020b4 	movhi	r2,130
  80fec0:	10a8b404 	addi	r2,r2,-23856
  80fec4:	10c5883a 	add	r2,r2,r3
  80fec8:	10800003 	ldbu	r2,0(r2)
  80fecc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80fed0:	e0bfff03 	ldbu	r2,-4(fp)
  80fed4:	100490fa 	slli	r2,r2,3
  80fed8:	1009883a 	mov	r4,r2
  80fedc:	e0ffff03 	ldbu	r3,-4(fp)
  80fee0:	d0a06f44 	addi	r2,gp,-32323
  80fee4:	1885883a 	add	r2,r3,r2
  80fee8:	10800003 	ldbu	r2,0(r2)
  80feec:	10c03fcc 	andi	r3,r2,255
  80fef0:	008020b4 	movhi	r2,130
  80fef4:	10a8b404 	addi	r2,r2,-23856
  80fef8:	10c5883a 	add	r2,r2,r3
  80fefc:	10800003 	ldbu	r2,0(r2)
  80ff00:	2085883a 	add	r2,r4,r2
  80ff04:	d0a06505 	stb	r2,-32364(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80ff08:	0001883a 	nop
  80ff0c:	e037883a 	mov	sp,fp
  80ff10:	df000017 	ldw	fp,0(sp)
  80ff14:	dec00104 	addi	sp,sp,4
  80ff18:	f800283a 	ret

0080ff1c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80ff1c:	defffc04 	addi	sp,sp,-16
  80ff20:	df000315 	stw	fp,12(sp)
  80ff24:	df000304 	addi	fp,sp,12
  80ff28:	e13ffe15 	stw	r4,-8(fp)
  80ff2c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80ff30:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80ff34:	00000b06 	br	80ff64 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  80ff38:	e0bffe17 	ldw	r2,-8(fp)
  80ff3c:	10c00044 	addi	r3,r2,1
  80ff40:	e0fffe15 	stw	r3,-8(fp)
  80ff44:	e0ffff17 	ldw	r3,-4(fp)
  80ff48:	19000044 	addi	r4,r3,1
  80ff4c:	e13fff15 	stw	r4,-4(fp)
  80ff50:	18c00003 	ldbu	r3,0(r3)
  80ff54:	10c00005 	stb	r3,0(r2)
        len++;
  80ff58:	e0bffd03 	ldbu	r2,-12(fp)
  80ff5c:	10800044 	addi	r2,r2,1
  80ff60:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80ff64:	e0bfff17 	ldw	r2,-4(fp)
  80ff68:	10800003 	ldbu	r2,0(r2)
  80ff6c:	10803fcc 	andi	r2,r2,255
  80ff70:	103ff11e 	bne	r2,zero,80ff38 <__alt_mem_epcs_flash_controller_0+0xff806f38>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80ff74:	e0bffe17 	ldw	r2,-8(fp)
  80ff78:	10000005 	stb	zero,0(r2)
    return (len);
  80ff7c:	e0bffd03 	ldbu	r2,-12(fp)
}
  80ff80:	e037883a 	mov	sp,fp
  80ff84:	df000017 	ldw	fp,0(sp)
  80ff88:	dec00104 	addi	sp,sp,4
  80ff8c:	f800283a 	ret

0080ff90 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80ff90:	defffd04 	addi	sp,sp,-12
  80ff94:	df000215 	stw	fp,8(sp)
  80ff98:	df000204 	addi	fp,sp,8
  80ff9c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80ffa0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80ffa4:	00000606 	br	80ffc0 <OS_StrLen+0x30>
        psrc++;
  80ffa8:	e0bfff17 	ldw	r2,-4(fp)
  80ffac:	10800044 	addi	r2,r2,1
  80ffb0:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80ffb4:	e0bffe03 	ldbu	r2,-8(fp)
  80ffb8:	10800044 	addi	r2,r2,1
  80ffbc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80ffc0:	e0bfff17 	ldw	r2,-4(fp)
  80ffc4:	10800003 	ldbu	r2,0(r2)
  80ffc8:	10803fcc 	andi	r2,r2,255
  80ffcc:	103ff61e 	bne	r2,zero,80ffa8 <__alt_mem_epcs_flash_controller_0+0xff806fa8>
        psrc++;
        len++;
    }
    return (len);
  80ffd0:	e0bffe03 	ldbu	r2,-8(fp)
}
  80ffd4:	e037883a 	mov	sp,fp
  80ffd8:	df000017 	ldw	fp,0(sp)
  80ffdc:	dec00104 	addi	sp,sp,4
  80ffe0:	f800283a 	ret

0080ffe4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80ffe4:	defffa04 	addi	sp,sp,-24
  80ffe8:	dfc00515 	stw	ra,20(sp)
  80ffec:	df000415 	stw	fp,16(sp)
  80fff0:	df000404 	addi	fp,sp,16
  80fff4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fff8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fffc:	0005303a 	rdctl	r2,status
  810000:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810004:	e0fffd17 	ldw	r3,-12(fp)
  810008:	00bfff84 	movi	r2,-2
  81000c:	1884703a 	and	r2,r3,r2
  810010:	1001703a 	wrctl	status,r2
  
  return context;
  810014:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  810018:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  81001c:	d0a06417 	ldw	r2,-32368(gp)
  810020:	10800044 	addi	r2,r2,1
  810024:	d0a06415 	stw	r2,-32368(gp)
  810028:	e0bffc17 	ldw	r2,-16(fp)
  81002c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810030:	e0bffe17 	ldw	r2,-8(fp)
  810034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  810038:	081953c0 	call	81953c <OSTaskIdleHook>
    }
  81003c:	003fef06 	br	80fffc <__alt_mem_epcs_flash_controller_0+0xff806ffc>

00810040 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  810040:	defffa04 	addi	sp,sp,-24
  810044:	dfc00515 	stw	ra,20(sp)
  810048:	df000415 	stw	fp,16(sp)
  81004c:	df000404 	addi	fp,sp,16
  810050:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810054:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810058:	00000206 	br	810064 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  81005c:	01003204 	movi	r4,200
  810060:	08157800 	call	815780 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810064:	d0a07503 	ldbu	r2,-32300(gp)
  810068:	10803fcc 	andi	r2,r2,255
  81006c:	103ffb26 	beq	r2,zero,81005c <__alt_mem_epcs_flash_controller_0+0xff80705c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  810070:	d0a06917 	ldw	r2,-32348(gp)
  810074:	01401904 	movi	r5,100
  810078:	1009883a 	mov	r4,r2
  81007c:	080acc00 	call	80acc0 <__udivsi3>
  810080:	d0a06915 	stw	r2,-32348(gp)
    if (OSIdleCtrMax == 0L) {
  810084:	d0a06917 	ldw	r2,-32348(gp)
  810088:	1000031e 	bne	r2,zero,810098 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  81008c:	d0206b05 	stb	zero,-32340(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  810090:	01003fc4 	movi	r4,255
  810094:	08154080 	call	815408 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810098:	0005303a 	rdctl	r2,status
  81009c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8100a0:	e0fffd17 	ldw	r3,-12(fp)
  8100a4:	00bfff84 	movi	r2,-2
  8100a8:	1884703a 	and	r2,r3,r2
  8100ac:	1001703a 	wrctl	status,r2
  
  return context;
  8100b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  8100b4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  8100b8:	d0a06417 	ldw	r2,-32368(gp)
  8100bc:	d0a07615 	stw	r2,-32296(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  8100c0:	d0206415 	stw	zero,-32368(gp)
  8100c4:	e0bffc17 	ldw	r2,-16(fp)
  8100c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8100cc:	e0bffe17 	ldw	r2,-8(fp)
  8100d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  8100d4:	d0a07617 	ldw	r2,-32296(gp)
  8100d8:	d0e06917 	ldw	r3,-32348(gp)
  8100dc:	180b883a 	mov	r5,r3
  8100e0:	1009883a 	mov	r4,r2
  8100e4:	080acc00 	call	80acc0 <__udivsi3>
  8100e8:	1007883a 	mov	r3,r2
  8100ec:	00801904 	movi	r2,100
  8100f0:	10c5c83a 	sub	r2,r2,r3
  8100f4:	d0a06b05 	stb	r2,-32340(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  8100f8:	08194bc0 	call	8194bc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  8100fc:	081010c0 	call	81010c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  810100:	01001904 	movi	r4,100
  810104:	08157800 	call	815780 <OSTimeDly>
    }
  810108:	003fe306 	br	810098 <__alt_mem_epcs_flash_controller_0+0xff807098>

0081010c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  81010c:	defffa04 	addi	sp,sp,-24
  810110:	dfc00515 	stw	ra,20(sp)
  810114:	df000415 	stw	fp,16(sp)
  810118:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  81011c:	e03ffc05 	stb	zero,-16(fp)
  810120:	00002406 	br	8101b4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  810124:	e0bffc03 	ldbu	r2,-16(fp)
  810128:	e0fffe04 	addi	r3,fp,-8
  81012c:	180b883a 	mov	r5,r3
  810130:	1009883a 	mov	r4,r2
  810134:	08152480 	call	815248 <OSTaskStkChk>
  810138:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  81013c:	e0bffc43 	ldbu	r2,-15(fp)
  810140:	1000191e 	bne	r2,zero,8101a8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  810144:	e0fffc03 	ldbu	r3,-16(fp)
  810148:	008020b4 	movhi	r2,130
  81014c:	10979904 	addi	r2,r2,24164
  810150:	18c7883a 	add	r3,r3,r3
  810154:	18c7883a 	add	r3,r3,r3
  810158:	10c5883a 	add	r2,r2,r3
  81015c:	10800017 	ldw	r2,0(r2)
  810160:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  810164:	e0bffd17 	ldw	r2,-12(fp)
  810168:	10000f26 	beq	r2,zero,8101a8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  81016c:	e0bffd17 	ldw	r2,-12(fp)
  810170:	10800060 	cmpeqi	r2,r2,1
  810174:	10000c1e 	bne	r2,zero,8101a8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  810178:	e0bffd17 	ldw	r2,-12(fp)
  81017c:	10c00217 	ldw	r3,8(r2)
  810180:	e0bffd17 	ldw	r2,-12(fp)
  810184:	10800317 	ldw	r2,12(r2)
  810188:	1085883a 	add	r2,r2,r2
  81018c:	1085883a 	add	r2,r2,r2
  810190:	1887883a 	add	r3,r3,r2
  810194:	e0bffd17 	ldw	r2,-12(fp)
  810198:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  81019c:	e0ffff17 	ldw	r3,-4(fp)
  8101a0:	e0bffd17 	ldw	r2,-12(fp)
  8101a4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8101a8:	e0bffc03 	ldbu	r2,-16(fp)
  8101ac:	10800044 	addi	r2,r2,1
  8101b0:	e0bffc05 	stb	r2,-16(fp)
  8101b4:	e0bffc03 	ldbu	r2,-16(fp)
  8101b8:	10800570 	cmpltui	r2,r2,21
  8101bc:	103fd91e 	bne	r2,zero,810124 <__alt_mem_epcs_flash_controller_0+0xff807124>
#endif
                }
            }
        }
    }
}
  8101c0:	0001883a 	nop
  8101c4:	e037883a 	mov	sp,fp
  8101c8:	dfc00117 	ldw	ra,4(sp)
  8101cc:	df000017 	ldw	fp,0(sp)
  8101d0:	dec00204 	addi	sp,sp,8
  8101d4:	f800283a 	ret

008101d8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  8101d8:	defff204 	addi	sp,sp,-56
  8101dc:	dfc00d15 	stw	ra,52(sp)
  8101e0:	df000c15 	stw	fp,48(sp)
  8101e4:	df000c04 	addi	fp,sp,48
  8101e8:	e17ffc15 	stw	r5,-16(fp)
  8101ec:	e1bffd15 	stw	r6,-12(fp)
  8101f0:	3807883a 	mov	r3,r7
  8101f4:	e0800417 	ldw	r2,16(fp)
  8101f8:	e13ffb05 	stb	r4,-20(fp)
  8101fc:	e0fffe0d 	sth	r3,-8(fp)
  810200:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810204:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810208:	0005303a 	rdctl	r2,status
  81020c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810210:	e0fffa17 	ldw	r3,-24(fp)
  810214:	00bfff84 	movi	r2,-2
  810218:	1884703a 	and	r2,r3,r2
  81021c:	1001703a 	wrctl	status,r2
  
  return context;
  810220:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  810224:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  810228:	d0a06a17 	ldw	r2,-32344(gp)
  81022c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  810230:	e0bff617 	ldw	r2,-40(fp)
  810234:	10009326 	beq	r2,zero,810484 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  810238:	e0bff617 	ldw	r2,-40(fp)
  81023c:	10800517 	ldw	r2,20(r2)
  810240:	d0a06a15 	stw	r2,-32344(gp)
  810244:	e0bff417 	ldw	r2,-48(fp)
  810248:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81024c:	e0bff817 	ldw	r2,-32(fp)
  810250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  810254:	e0bff617 	ldw	r2,-40(fp)
  810258:	e0fffc17 	ldw	r3,-16(fp)
  81025c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  810260:	e0bff617 	ldw	r2,-40(fp)
  810264:	e0fffb03 	ldbu	r3,-20(fp)
  810268:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  81026c:	e0bff617 	ldw	r2,-40(fp)
  810270:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  810274:	e0bff617 	ldw	r2,-40(fp)
  810278:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  81027c:	e0bff617 	ldw	r2,-40(fp)
  810280:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  810284:	e0bff617 	ldw	r2,-40(fp)
  810288:	e0c00317 	ldw	r3,12(fp)
  81028c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  810290:	e0bff617 	ldw	r2,-40(fp)
  810294:	e0c00217 	ldw	r3,8(fp)
  810298:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  81029c:	e0bff617 	ldw	r2,-40(fp)
  8102a0:	e0fffd17 	ldw	r3,-12(fp)
  8102a4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  8102a8:	e0bff617 	ldw	r2,-40(fp)
  8102ac:	e0ffff0b 	ldhu	r3,-4(fp)
  8102b0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  8102b4:	e0bff617 	ldw	r2,-40(fp)
  8102b8:	e0fffe0b 	ldhu	r3,-8(fp)
  8102bc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  8102c0:	e0bff617 	ldw	r2,-40(fp)
  8102c4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  8102c8:	e0bffb03 	ldbu	r2,-20(fp)
  8102cc:	1004d0fa 	srli	r2,r2,3
  8102d0:	1007883a 	mov	r3,r2
  8102d4:	e0bff617 	ldw	r2,-40(fp)
  8102d8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  8102dc:	e0bffb03 	ldbu	r2,-20(fp)
  8102e0:	108001cc 	andi	r2,r2,7
  8102e4:	1007883a 	mov	r3,r2
  8102e8:	e0bff617 	ldw	r2,-40(fp)
  8102ec:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  8102f0:	e0bff617 	ldw	r2,-40(fp)
  8102f4:	10800d03 	ldbu	r2,52(r2)
  8102f8:	10803fcc 	andi	r2,r2,255
  8102fc:	00c00044 	movi	r3,1
  810300:	1884983a 	sll	r2,r3,r2
  810304:	1007883a 	mov	r3,r2
  810308:	e0bff617 	ldw	r2,-40(fp)
  81030c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  810310:	e0bff617 	ldw	r2,-40(fp)
  810314:	10800cc3 	ldbu	r2,51(r2)
  810318:	10803fcc 	andi	r2,r2,255
  81031c:	00c00044 	movi	r3,1
  810320:	1884983a 	sll	r2,r3,r2
  810324:	1007883a 	mov	r3,r2
  810328:	e0bff617 	ldw	r2,-40(fp)
  81032c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  810330:	e0bff617 	ldw	r2,-40(fp)
  810334:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  810338:	e0bff617 	ldw	r2,-40(fp)
  81033c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  810340:	e0bff617 	ldw	r2,-40(fp)
  810344:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  810348:	e0bff617 	ldw	r2,-40(fp)
  81034c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  810350:	e0bff617 	ldw	r2,-40(fp)
  810354:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  810358:	e0bff617 	ldw	r2,-40(fp)
  81035c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  810360:	e0bff617 	ldw	r2,-40(fp)
  810364:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  810368:	e0bff617 	ldw	r2,-40(fp)
  81036c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  810370:	e0bff617 	ldw	r2,-40(fp)
  810374:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  810378:	e0bff617 	ldw	r2,-40(fp)
  81037c:	00c00fc4 	movi	r3,63
  810380:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  810384:	e0bff617 	ldw	r2,-40(fp)
  810388:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  81038c:	e13ff617 	ldw	r4,-40(fp)
  810390:	081955c0 	call	81955c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  810394:	e13ff617 	ldw	r4,-40(fp)
  810398:	08194540 	call	819454 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81039c:	0005303a 	rdctl	r2,status
  8103a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8103a4:	e0fff517 	ldw	r3,-44(fp)
  8103a8:	00bfff84 	movi	r2,-2
  8103ac:	1884703a 	and	r2,r3,r2
  8103b0:	1001703a 	wrctl	status,r2
  
  return context;
  8103b4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  8103b8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  8103bc:	e0fffb03 	ldbu	r3,-20(fp)
  8103c0:	008020b4 	movhi	r2,130
  8103c4:	10979904 	addi	r2,r2,24164
  8103c8:	18c7883a 	add	r3,r3,r3
  8103cc:	18c7883a 	add	r3,r3,r3
  8103d0:	10c5883a 	add	r2,r2,r3
  8103d4:	e0fff617 	ldw	r3,-40(fp)
  8103d8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  8103dc:	d0e06617 	ldw	r3,-32360(gp)
  8103e0:	e0bff617 	ldw	r2,-40(fp)
  8103e4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  8103e8:	e0bff617 	ldw	r2,-40(fp)
  8103ec:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  8103f0:	d0a06617 	ldw	r2,-32360(gp)
  8103f4:	10000326 	beq	r2,zero,810404 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  8103f8:	d0a06617 	ldw	r2,-32360(gp)
  8103fc:	e0fff617 	ldw	r3,-40(fp)
  810400:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  810404:	e0bff617 	ldw	r2,-40(fp)
  810408:	d0a06615 	stw	r2,-32360(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  81040c:	e0bff617 	ldw	r2,-40(fp)
  810410:	10c00d83 	ldbu	r3,54(r2)
  810414:	d0a06f03 	ldbu	r2,-32324(gp)
  810418:	1884b03a 	or	r2,r3,r2
  81041c:	d0a06f05 	stb	r2,-32324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810420:	e0bff617 	ldw	r2,-40(fp)
  810424:	10800d03 	ldbu	r2,52(r2)
  810428:	10c03fcc 	andi	r3,r2,255
  81042c:	e0bff617 	ldw	r2,-40(fp)
  810430:	10800d03 	ldbu	r2,52(r2)
  810434:	11003fcc 	andi	r4,r2,255
  810438:	d0a06f44 	addi	r2,gp,-32323
  81043c:	2085883a 	add	r2,r4,r2
  810440:	11000003 	ldbu	r4,0(r2)
  810444:	e0bff617 	ldw	r2,-40(fp)
  810448:	10800d43 	ldbu	r2,53(r2)
  81044c:	2084b03a 	or	r2,r4,r2
  810450:	1009883a 	mov	r4,r2
  810454:	d0a06f44 	addi	r2,gp,-32323
  810458:	1885883a 	add	r2,r3,r2
  81045c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  810460:	d0a06b43 	ldbu	r2,-32339(gp)
  810464:	10800044 	addi	r2,r2,1
  810468:	d0a06b45 	stb	r2,-32339(gp)
  81046c:	e0bff417 	ldw	r2,-48(fp)
  810470:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810474:	e0bff717 	ldw	r2,-36(fp)
  810478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81047c:	0005883a 	mov	r2,zero
  810480:	00000506 	br	810498 <OS_TCBInit+0x2c0>
  810484:	e0bff417 	ldw	r2,-48(fp)
  810488:	e0bff915 	stw	r2,-28(fp)
  81048c:	e0bff917 	ldw	r2,-28(fp)
  810490:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  810494:	00801084 	movi	r2,66
}
  810498:	e037883a 	mov	sp,fp
  81049c:	dfc00117 	ldw	ra,4(sp)
  8104a0:	df000017 	ldw	fp,0(sp)
  8104a4:	dec00204 	addi	sp,sp,8
  8104a8:	f800283a 	ret

008104ac <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8104ac:	defffe04 	addi	sp,sp,-8
  8104b0:	df000115 	stw	fp,4(sp)
  8104b4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8104b8:	d0a02c04 	addi	r2,gp,-32592
  8104bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8104c0:	d0a02d04 	addi	r2,gp,-32588
  8104c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8104c8:	d0a02e84 	addi	r2,gp,-32582
  8104cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  8104d0:	d0a02f04 	addi	r2,gp,-32580
  8104d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  8104d8:	d0a02e04 	addi	r2,gp,-32584
  8104dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  8104e0:	d0a02f84 	addi	r2,gp,-32578
  8104e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  8104e8:	d0a03004 	addi	r2,gp,-32576
  8104ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  8104f0:	d0a03084 	addi	r2,gp,-32574
  8104f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  8104f8:	d0a03104 	addi	r2,gp,-32572
  8104fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  810500:	d0a03184 	addi	r2,gp,-32570
  810504:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  810508:	d0a03204 	addi	r2,gp,-32568
  81050c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  810510:	d0a03284 	addi	r2,gp,-32566
  810514:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  810518:	d0a03304 	addi	r2,gp,-32564
  81051c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  810520:	d0a03384 	addi	r2,gp,-32562
  810524:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  810528:	d0a03404 	addi	r2,gp,-32560
  81052c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  810530:	d0a03484 	addi	r2,gp,-32558
  810534:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  810538:	d0a03504 	addi	r2,gp,-32556
  81053c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  810540:	d0a03584 	addi	r2,gp,-32554
  810544:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  810548:	d0a03604 	addi	r2,gp,-32552
  81054c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  810550:	d0a03684 	addi	r2,gp,-32550
  810554:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  810558:	d0a03704 	addi	r2,gp,-32548
  81055c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  810560:	d0a03784 	addi	r2,gp,-32546
  810564:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  810568:	d0a03804 	addi	r2,gp,-32544
  81056c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  810570:	d0a03884 	addi	r2,gp,-32542
  810574:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  810578:	d0a03904 	addi	r2,gp,-32540
  81057c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  810580:	d0a03984 	addi	r2,gp,-32538
  810584:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  810588:	d0a03a04 	addi	r2,gp,-32536
  81058c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  810590:	d0a03a84 	addi	r2,gp,-32534
  810594:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  810598:	d0a03b04 	addi	r2,gp,-32532
  81059c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  8105a0:	d0a03b84 	addi	r2,gp,-32530
  8105a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  8105a8:	d0a03c04 	addi	r2,gp,-32528
  8105ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  8105b0:	d0a03c84 	addi	r2,gp,-32526
  8105b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  8105b8:	d0a03d04 	addi	r2,gp,-32524
  8105bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  8105c0:	d0a03d84 	addi	r2,gp,-32522
  8105c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  8105c8:	d0a03e04 	addi	r2,gp,-32520
  8105cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  8105d0:	d0a03e84 	addi	r2,gp,-32518
  8105d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  8105d8:	d0a03f04 	addi	r2,gp,-32516
  8105dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  8105e0:	d0a03f84 	addi	r2,gp,-32514
  8105e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  8105e8:	d0a04004 	addi	r2,gp,-32512
  8105ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  8105f0:	d0a04084 	addi	r2,gp,-32510
  8105f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  8105f8:	d0a04104 	addi	r2,gp,-32508
  8105fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  810600:	d0a04184 	addi	r2,gp,-32506
  810604:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  810608:	d0a04204 	addi	r2,gp,-32504
  81060c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  810610:	d0a04284 	addi	r2,gp,-32502
  810614:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  810618:	d0a04304 	addi	r2,gp,-32500
  81061c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  810620:	d0a04804 	addi	r2,gp,-32480
  810624:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  810628:	0001883a 	nop
  81062c:	e037883a 	mov	sp,fp
  810630:	df000017 	ldw	fp,0(sp)
  810634:	dec00104 	addi	sp,sp,4
  810638:	f800283a 	ret

0081063c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  81063c:	defff204 	addi	sp,sp,-56
  810640:	df000d15 	stw	fp,52(sp)
  810644:	df000d04 	addi	fp,sp,52
  810648:	e13ffc15 	stw	r4,-16(fp)
  81064c:	2807883a 	mov	r3,r5
  810650:	3005883a 	mov	r2,r6
  810654:	e1ffff15 	stw	r7,-4(fp)
  810658:	e0fffd0d 	sth	r3,-12(fp)
  81065c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810660:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810664:	e0bfff17 	ldw	r2,-4(fp)
  810668:	1000021e 	bne	r2,zero,810674 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  81066c:	0005883a 	mov	r2,zero
  810670:	0000b006 	br	810934 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  810674:	e0bffc17 	ldw	r2,-16(fp)
  810678:	1000051e 	bne	r2,zero,810690 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81067c:	e0bfff17 	ldw	r2,-4(fp)
  810680:	00c01b84 	movi	r3,110
  810684:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810688:	0005883a 	mov	r2,zero
  81068c:	0000a906 	br	810934 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  810690:	e0bffc17 	ldw	r2,-16(fp)
  810694:	10800003 	ldbu	r2,0(r2)
  810698:	10803fcc 	andi	r2,r2,255
  81069c:	10800160 	cmpeqi	r2,r2,5
  8106a0:	1000051e 	bne	r2,zero,8106b8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8106a4:	e0bfff17 	ldw	r2,-4(fp)
  8106a8:	00c00044 	movi	r3,1
  8106ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8106b0:	0005883a 	mov	r2,zero
  8106b4:	00009f06 	br	810934 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8106b8:	e0fffe03 	ldbu	r3,-8(fp)
  8106bc:	00bfe004 	movi	r2,-128
  8106c0:	1884703a 	and	r2,r3,r2
  8106c4:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  8106c8:	e0bff503 	ldbu	r2,-44(fp)
  8106cc:	10000626 	beq	r2,zero,8106e8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  8106d0:	e0bffe03 	ldbu	r2,-8(fp)
  8106d4:	10801fcc 	andi	r2,r2,127
  8106d8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  8106dc:	00800044 	movi	r2,1
  8106e0:	e0bff385 	stb	r2,-50(fp)
  8106e4:	00000106 	br	8106ec <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  8106e8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  8106ec:	e0bfff17 	ldw	r2,-4(fp)
  8106f0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106f4:	0005303a 	rdctl	r2,status
  8106f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106fc:	e0fffb17 	ldw	r3,-20(fp)
  810700:	00bfff84 	movi	r2,-2
  810704:	1884703a 	and	r2,r3,r2
  810708:	1001703a 	wrctl	status,r2
  
  return context;
  81070c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  810710:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  810714:	e0bffe03 	ldbu	r2,-8(fp)
  810718:	10c00060 	cmpeqi	r3,r2,1
  81071c:	18005f1e 	bne	r3,zero,81089c <OSFlagAccept+0x260>
  810720:	10c00088 	cmpgei	r3,r2,2
  810724:	1800021e 	bne	r3,zero,810730 <OSFlagAccept+0xf4>
  810728:	10003f26 	beq	r2,zero,810828 <OSFlagAccept+0x1ec>
  81072c:	00007706 	br	81090c <OSFlagAccept+0x2d0>
  810730:	10c000a0 	cmpeqi	r3,r2,2
  810734:	1800031e 	bne	r3,zero,810744 <OSFlagAccept+0x108>
  810738:	108000e0 	cmpeqi	r2,r2,3
  81073c:	10001e1e 	bne	r2,zero,8107b8 <OSFlagAccept+0x17c>
  810740:	00007206 	br	81090c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  810744:	e0bffc17 	ldw	r2,-16(fp)
  810748:	10c0020b 	ldhu	r3,8(r2)
  81074c:	e0bffd0b 	ldhu	r2,-12(fp)
  810750:	1884703a 	and	r2,r3,r2
  810754:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  810758:	e0fff30b 	ldhu	r3,-52(fp)
  81075c:	e0bffd0b 	ldhu	r2,-12(fp)
  810760:	18800d1e 	bne	r3,r2,810798 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810764:	e0bff383 	ldbu	r2,-50(fp)
  810768:	10800058 	cmpnei	r2,r2,1
  81076c:	10000d1e 	bne	r2,zero,8107a4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  810770:	e0bffc17 	ldw	r2,-16(fp)
  810774:	1080020b 	ldhu	r2,8(r2)
  810778:	1007883a 	mov	r3,r2
  81077c:	e0bff30b 	ldhu	r2,-52(fp)
  810780:	0084303a 	nor	r2,zero,r2
  810784:	1884703a 	and	r2,r3,r2
  810788:	1007883a 	mov	r3,r2
  81078c:	e0bffc17 	ldw	r2,-16(fp)
  810790:	10c0020d 	sth	r3,8(r2)
  810794:	00000306 	br	8107a4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  810798:	e0bfff17 	ldw	r2,-4(fp)
  81079c:	00c01c04 	movi	r3,112
  8107a0:	10c00005 	stb	r3,0(r2)
  8107a4:	e0bff417 	ldw	r2,-48(fp)
  8107a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107ac:	e0bff617 	ldw	r2,-40(fp)
  8107b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8107b4:	00005e06 	br	810930 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8107b8:	e0bffc17 	ldw	r2,-16(fp)
  8107bc:	10c0020b 	ldhu	r3,8(r2)
  8107c0:	e0bffd0b 	ldhu	r2,-12(fp)
  8107c4:	1884703a 	and	r2,r3,r2
  8107c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8107cc:	e0bff30b 	ldhu	r2,-52(fp)
  8107d0:	10000d26 	beq	r2,zero,810808 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8107d4:	e0bff383 	ldbu	r2,-50(fp)
  8107d8:	10800058 	cmpnei	r2,r2,1
  8107dc:	10000d1e 	bne	r2,zero,810814 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8107e0:	e0bffc17 	ldw	r2,-16(fp)
  8107e4:	1080020b 	ldhu	r2,8(r2)
  8107e8:	1007883a 	mov	r3,r2
  8107ec:	e0bff30b 	ldhu	r2,-52(fp)
  8107f0:	0084303a 	nor	r2,zero,r2
  8107f4:	1884703a 	and	r2,r3,r2
  8107f8:	1007883a 	mov	r3,r2
  8107fc:	e0bffc17 	ldw	r2,-16(fp)
  810800:	10c0020d 	sth	r3,8(r2)
  810804:	00000306 	br	810814 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  810808:	e0bfff17 	ldw	r2,-4(fp)
  81080c:	00c01c04 	movi	r3,112
  810810:	10c00005 	stb	r3,0(r2)
  810814:	e0bff417 	ldw	r2,-48(fp)
  810818:	e0bff715 	stw	r2,-36(fp)
  81081c:	e0bff717 	ldw	r2,-36(fp)
  810820:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810824:	00004206 	br	810930 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  810828:	e0bffc17 	ldw	r2,-16(fp)
  81082c:	1080020b 	ldhu	r2,8(r2)
  810830:	0084303a 	nor	r2,zero,r2
  810834:	1007883a 	mov	r3,r2
  810838:	e0bffd0b 	ldhu	r2,-12(fp)
  81083c:	1884703a 	and	r2,r3,r2
  810840:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  810844:	e0fff30b 	ldhu	r3,-52(fp)
  810848:	e0bffd0b 	ldhu	r2,-12(fp)
  81084c:	18800b1e 	bne	r3,r2,81087c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810850:	e0bff383 	ldbu	r2,-50(fp)
  810854:	10800058 	cmpnei	r2,r2,1
  810858:	10000b1e 	bne	r2,zero,810888 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81085c:	e0bffc17 	ldw	r2,-16(fp)
  810860:	10c0020b 	ldhu	r3,8(r2)
  810864:	e0bff30b 	ldhu	r2,-52(fp)
  810868:	1884b03a 	or	r2,r3,r2
  81086c:	1007883a 	mov	r3,r2
  810870:	e0bffc17 	ldw	r2,-16(fp)
  810874:	10c0020d 	sth	r3,8(r2)
  810878:	00000306 	br	810888 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81087c:	e0bfff17 	ldw	r2,-4(fp)
  810880:	00c01c04 	movi	r3,112
  810884:	10c00005 	stb	r3,0(r2)
  810888:	e0bff417 	ldw	r2,-48(fp)
  81088c:	e0bff815 	stw	r2,-32(fp)
  810890:	e0bff817 	ldw	r2,-32(fp)
  810894:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810898:	00002506 	br	810930 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  81089c:	e0bffc17 	ldw	r2,-16(fp)
  8108a0:	1080020b 	ldhu	r2,8(r2)
  8108a4:	0084303a 	nor	r2,zero,r2
  8108a8:	1007883a 	mov	r3,r2
  8108ac:	e0bffd0b 	ldhu	r2,-12(fp)
  8108b0:	1884703a 	and	r2,r3,r2
  8108b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8108b8:	e0bff30b 	ldhu	r2,-52(fp)
  8108bc:	10000b26 	beq	r2,zero,8108ec <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8108c0:	e0bff383 	ldbu	r2,-50(fp)
  8108c4:	10800058 	cmpnei	r2,r2,1
  8108c8:	10000b1e 	bne	r2,zero,8108f8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8108cc:	e0bffc17 	ldw	r2,-16(fp)
  8108d0:	10c0020b 	ldhu	r3,8(r2)
  8108d4:	e0bff30b 	ldhu	r2,-52(fp)
  8108d8:	1884b03a 	or	r2,r3,r2
  8108dc:	1007883a 	mov	r3,r2
  8108e0:	e0bffc17 	ldw	r2,-16(fp)
  8108e4:	10c0020d 	sth	r3,8(r2)
  8108e8:	00000306 	br	8108f8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8108ec:	e0bfff17 	ldw	r2,-4(fp)
  8108f0:	00c01c04 	movi	r3,112
  8108f4:	10c00005 	stb	r3,0(r2)
  8108f8:	e0bff417 	ldw	r2,-48(fp)
  8108fc:	e0bff915 	stw	r2,-28(fp)
  810900:	e0bff917 	ldw	r2,-28(fp)
  810904:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810908:	00000906 	br	810930 <OSFlagAccept+0x2f4>
  81090c:	e0bff417 	ldw	r2,-48(fp)
  810910:	e0bffa15 	stw	r2,-24(fp)
  810914:	e0bffa17 	ldw	r2,-24(fp)
  810918:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81091c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  810920:	e0bfff17 	ldw	r2,-4(fp)
  810924:	00c01bc4 	movi	r3,111
  810928:	10c00005 	stb	r3,0(r2)
             break;
  81092c:	0001883a 	nop
    }
    return (flags_rdy);
  810930:	e0bff30b 	ldhu	r2,-52(fp)
}
  810934:	e037883a 	mov	sp,fp
  810938:	df000017 	ldw	fp,0(sp)
  81093c:	dec00104 	addi	sp,sp,4
  810940:	f800283a 	ret

00810944 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  810944:	defff804 	addi	sp,sp,-32
  810948:	df000715 	stw	fp,28(sp)
  81094c:	df000704 	addi	fp,sp,28
  810950:	2005883a 	mov	r2,r4
  810954:	e17fff15 	stw	r5,-4(fp)
  810958:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  81095c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  810960:	e0bfff17 	ldw	r2,-4(fp)
  810964:	1000021e 	bne	r2,zero,810970 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  810968:	0005883a 	mov	r2,zero
  81096c:	00003306 	br	810a3c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  810970:	d0a07103 	ldbu	r2,-32316(gp)
  810974:	10803fcc 	andi	r2,r2,255
  810978:	10000526 	beq	r2,zero,810990 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  81097c:	e0bfff17 	ldw	r2,-4(fp)
  810980:	00c00404 	movi	r3,16
  810984:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  810988:	0005883a 	mov	r2,zero
  81098c:	00002b06 	br	810a3c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810990:	0005303a 	rdctl	r2,status
  810994:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810998:	e0fffd17 	ldw	r3,-12(fp)
  81099c:	00bfff84 	movi	r2,-2
  8109a0:	1884703a 	and	r2,r3,r2
  8109a4:	1001703a 	wrctl	status,r2
  
  return context;
  8109a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8109ac:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  8109b0:	d0a07417 	ldw	r2,-32304(gp)
  8109b4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  8109b8:	e0bffb17 	ldw	r2,-20(fp)
  8109bc:	10001726 	beq	r2,zero,810a1c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  8109c0:	d0a07417 	ldw	r2,-32304(gp)
  8109c4:	10800117 	ldw	r2,4(r2)
  8109c8:	d0a07415 	stw	r2,-32304(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  8109cc:	e0bffb17 	ldw	r2,-20(fp)
  8109d0:	00c00144 	movi	r3,5
  8109d4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  8109d8:	e0bffb17 	ldw	r2,-20(fp)
  8109dc:	e0fffe0b 	ldhu	r3,-8(fp)
  8109e0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  8109e4:	e0bffb17 	ldw	r2,-20(fp)
  8109e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  8109ec:	e0bffb17 	ldw	r2,-20(fp)
  8109f0:	00c00fc4 	movi	r3,63
  8109f4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8109f8:	e0bffb17 	ldw	r2,-20(fp)
  8109fc:	100002c5 	stb	zero,11(r2)
  810a00:	e0bff917 	ldw	r2,-28(fp)
  810a04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a08:	e0bffa17 	ldw	r2,-24(fp)
  810a0c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  810a10:	e0bfff17 	ldw	r2,-4(fp)
  810a14:	10000005 	stb	zero,0(r2)
  810a18:	00000706 	br	810a38 <OSFlagCreate+0xf4>
  810a1c:	e0bff917 	ldw	r2,-28(fp)
  810a20:	e0bffc15 	stw	r2,-16(fp)
  810a24:	e0bffc17 	ldw	r2,-16(fp)
  810a28:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  810a2c:	e0bfff17 	ldw	r2,-4(fp)
  810a30:	00c01c84 	movi	r3,114
  810a34:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  810a38:	e0bffb17 	ldw	r2,-20(fp)
}
  810a3c:	e037883a 	mov	sp,fp
  810a40:	df000017 	ldw	fp,0(sp)
  810a44:	dec00104 	addi	sp,sp,4
  810a48:	f800283a 	ret

00810a4c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  810a4c:	defff204 	addi	sp,sp,-56
  810a50:	dfc00d15 	stw	ra,52(sp)
  810a54:	df000c15 	stw	fp,48(sp)
  810a58:	df000c04 	addi	fp,sp,48
  810a5c:	e13ffd15 	stw	r4,-12(fp)
  810a60:	2805883a 	mov	r2,r5
  810a64:	e1bfff15 	stw	r6,-4(fp)
  810a68:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810a6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810a70:	e0bfff17 	ldw	r2,-4(fp)
  810a74:	1000021e 	bne	r2,zero,810a80 <OSFlagDel+0x34>
        return (pgrp);
  810a78:	e0bffd17 	ldw	r2,-12(fp)
  810a7c:	00008006 	br	810c80 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  810a80:	e0bffd17 	ldw	r2,-12(fp)
  810a84:	1000051e 	bne	r2,zero,810a9c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810a88:	e0bfff17 	ldw	r2,-4(fp)
  810a8c:	00c01b84 	movi	r3,110
  810a90:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  810a94:	e0bffd17 	ldw	r2,-12(fp)
  810a98:	00007906 	br	810c80 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810a9c:	d0a07103 	ldbu	r2,-32316(gp)
  810aa0:	10803fcc 	andi	r2,r2,255
  810aa4:	10000526 	beq	r2,zero,810abc <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  810aa8:	e0bfff17 	ldw	r2,-4(fp)
  810aac:	00c003c4 	movi	r3,15
  810ab0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  810ab4:	e0bffd17 	ldw	r2,-12(fp)
  810ab8:	00007106 	br	810c80 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  810abc:	e0bffd17 	ldw	r2,-12(fp)
  810ac0:	10800003 	ldbu	r2,0(r2)
  810ac4:	10803fcc 	andi	r2,r2,255
  810ac8:	10800160 	cmpeqi	r2,r2,5
  810acc:	1000051e 	bne	r2,zero,810ae4 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  810ad0:	e0bfff17 	ldw	r2,-4(fp)
  810ad4:	00c00044 	movi	r3,1
  810ad8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  810adc:	e0bffd17 	ldw	r2,-12(fp)
  810ae0:	00006706 	br	810c80 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ae4:	0005303a 	rdctl	r2,status
  810ae8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810aec:	e0fffc17 	ldw	r3,-16(fp)
  810af0:	00bfff84 	movi	r2,-2
  810af4:	1884703a 	and	r2,r3,r2
  810af8:	1001703a 	wrctl	status,r2
  
  return context;
  810afc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  810b00:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  810b04:	e0bffd17 	ldw	r2,-12(fp)
  810b08:	10800117 	ldw	r2,4(r2)
  810b0c:	10000326 	beq	r2,zero,810b1c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  810b10:	00800044 	movi	r2,1
  810b14:	e0bff405 	stb	r2,-48(fp)
  810b18:	00000106 	br	810b20 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  810b1c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  810b20:	e0bffe03 	ldbu	r2,-8(fp)
  810b24:	10000326 	beq	r2,zero,810b34 <OSFlagDel+0xe8>
  810b28:	10800060 	cmpeqi	r2,r2,1
  810b2c:	1000231e 	bne	r2,zero,810bbc <OSFlagDel+0x170>
  810b30:	00004806 	br	810c54 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  810b34:	e0bff403 	ldbu	r2,-48(fp)
  810b38:	1000161e 	bne	r2,zero,810b94 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  810b3c:	e0bffd17 	ldw	r2,-12(fp)
  810b40:	00c00fc4 	movi	r3,63
  810b44:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  810b48:	e0bffd17 	ldw	r2,-12(fp)
  810b4c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810b50:	e0bffd17 	ldw	r2,-12(fp)
  810b54:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  810b58:	d0e07417 	ldw	r3,-32304(gp)
  810b5c:	e0bffd17 	ldw	r2,-12(fp)
  810b60:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  810b64:	e0bffd17 	ldw	r2,-12(fp)
  810b68:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  810b6c:	e0bffd17 	ldw	r2,-12(fp)
  810b70:	d0a07415 	stw	r2,-32304(gp)
  810b74:	e0bff717 	ldw	r2,-36(fp)
  810b78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b7c:	e0bff817 	ldw	r2,-32(fp)
  810b80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  810b84:	e0bfff17 	ldw	r2,-4(fp)
  810b88:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  810b8c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  810b90:	00003a06 	br	810c7c <OSFlagDel+0x230>
  810b94:	e0bff717 	ldw	r2,-36(fp)
  810b98:	e0bff915 	stw	r2,-28(fp)
  810b9c:	e0bff917 	ldw	r2,-28(fp)
  810ba0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  810ba4:	e0bfff17 	ldw	r2,-4(fp)
  810ba8:	00c01244 	movi	r3,73
  810bac:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  810bb0:	e0bffd17 	ldw	r2,-12(fp)
  810bb4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  810bb8:	00003006 	br	810c7c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  810bbc:	e0bffd17 	ldw	r2,-12(fp)
  810bc0:	10800117 	ldw	r2,4(r2)
  810bc4:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  810bc8:	00000606 	br	810be4 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  810bcc:	000b883a 	mov	r5,zero
  810bd0:	e13ff517 	ldw	r4,-44(fp)
  810bd4:	0811bb80 	call	811bb8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  810bd8:	e0bff517 	ldw	r2,-44(fp)
  810bdc:	10800017 	ldw	r2,0(r2)
  810be0:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  810be4:	e0bff517 	ldw	r2,-44(fp)
  810be8:	103ff81e 	bne	r2,zero,810bcc <__alt_mem_epcs_flash_controller_0+0xff807bcc>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  810bec:	e0bffd17 	ldw	r2,-12(fp)
  810bf0:	00c00fc4 	movi	r3,63
  810bf4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  810bf8:	e0bffd17 	ldw	r2,-12(fp)
  810bfc:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810c00:	e0bffd17 	ldw	r2,-12(fp)
  810c04:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  810c08:	d0e07417 	ldw	r3,-32304(gp)
  810c0c:	e0bffd17 	ldw	r2,-12(fp)
  810c10:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  810c14:	e0bffd17 	ldw	r2,-12(fp)
  810c18:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  810c1c:	e0bffd17 	ldw	r2,-12(fp)
  810c20:	d0a07415 	stw	r2,-32304(gp)
  810c24:	e0bff717 	ldw	r2,-36(fp)
  810c28:	e0bffa15 	stw	r2,-24(fp)
  810c2c:	e0bffa17 	ldw	r2,-24(fp)
  810c30:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  810c34:	e0bff403 	ldbu	r2,-48(fp)
  810c38:	10800058 	cmpnei	r2,r2,1
  810c3c:	1000011e 	bne	r2,zero,810c44 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  810c40:	080fdd80 	call	80fdd8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  810c44:	e0bfff17 	ldw	r2,-4(fp)
  810c48:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  810c4c:	e03ff615 	stw	zero,-40(fp)
             break;
  810c50:	00000a06 	br	810c7c <OSFlagDel+0x230>
  810c54:	e0bff717 	ldw	r2,-36(fp)
  810c58:	e0bffb15 	stw	r2,-20(fp)
  810c5c:	e0bffb17 	ldw	r2,-20(fp)
  810c60:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  810c64:	e0bfff17 	ldw	r2,-4(fp)
  810c68:	00c001c4 	movi	r3,7
  810c6c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  810c70:	e0bffd17 	ldw	r2,-12(fp)
  810c74:	e0bff615 	stw	r2,-40(fp)
             break;
  810c78:	0001883a 	nop
    }
    return (pgrp_return);
  810c7c:	e0bff617 	ldw	r2,-40(fp)
}
  810c80:	e037883a 	mov	sp,fp
  810c84:	dfc00117 	ldw	ra,4(sp)
  810c88:	df000017 	ldw	fp,0(sp)
  810c8c:	dec00204 	addi	sp,sp,8
  810c90:	f800283a 	ret

00810c94 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  810c94:	defff604 	addi	sp,sp,-40
  810c98:	dfc00915 	stw	ra,36(sp)
  810c9c:	df000815 	stw	fp,32(sp)
  810ca0:	df000804 	addi	fp,sp,32
  810ca4:	e13ffd15 	stw	r4,-12(fp)
  810ca8:	e17ffe15 	stw	r5,-8(fp)
  810cac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810cb0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  810cb4:	e0bfff17 	ldw	r2,-4(fp)
  810cb8:	1000021e 	bne	r2,zero,810cc4 <OSFlagNameGet+0x30>
        return (0);
  810cbc:	0005883a 	mov	r2,zero
  810cc0:	00003906 	br	810da8 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  810cc4:	e0bffd17 	ldw	r2,-12(fp)
  810cc8:	1000051e 	bne	r2,zero,810ce0 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810ccc:	e0bfff17 	ldw	r2,-4(fp)
  810cd0:	00c01b84 	movi	r3,110
  810cd4:	10c00005 	stb	r3,0(r2)
        return (0);
  810cd8:	0005883a 	mov	r2,zero
  810cdc:	00003206 	br	810da8 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  810ce0:	e0bffe17 	ldw	r2,-8(fp)
  810ce4:	1000051e 	bne	r2,zero,810cfc <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  810ce8:	e0bfff17 	ldw	r2,-4(fp)
  810cec:	00c00304 	movi	r3,12
  810cf0:	10c00005 	stb	r3,0(r2)
        return (0);
  810cf4:	0005883a 	mov	r2,zero
  810cf8:	00002b06 	br	810da8 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  810cfc:	d0a07103 	ldbu	r2,-32316(gp)
  810d00:	10803fcc 	andi	r2,r2,255
  810d04:	10000526 	beq	r2,zero,810d1c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  810d08:	e0bfff17 	ldw	r2,-4(fp)
  810d0c:	00c00444 	movi	r3,17
  810d10:	10c00005 	stb	r3,0(r2)
        return (0);
  810d14:	0005883a 	mov	r2,zero
  810d18:	00002306 	br	810da8 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d1c:	0005303a 	rdctl	r2,status
  810d20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d24:	e0fffc17 	ldw	r3,-16(fp)
  810d28:	00bfff84 	movi	r2,-2
  810d2c:	1884703a 	and	r2,r3,r2
  810d30:	1001703a 	wrctl	status,r2
  
  return context;
  810d34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  810d38:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  810d3c:	e0bffd17 	ldw	r2,-12(fp)
  810d40:	10800003 	ldbu	r2,0(r2)
  810d44:	10803fcc 	andi	r2,r2,255
  810d48:	10800160 	cmpeqi	r2,r2,5
  810d4c:	1000091e 	bne	r2,zero,810d74 <OSFlagNameGet+0xe0>
  810d50:	e0bff817 	ldw	r2,-32(fp)
  810d54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d58:	e0bff917 	ldw	r2,-28(fp)
  810d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  810d60:	e0bfff17 	ldw	r2,-4(fp)
  810d64:	00c00044 	movi	r3,1
  810d68:	10c00005 	stb	r3,0(r2)
        return (0);
  810d6c:	0005883a 	mov	r2,zero
  810d70:	00000d06 	br	810da8 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  810d74:	e0bffd17 	ldw	r2,-12(fp)
  810d78:	10800284 	addi	r2,r2,10
  810d7c:	100b883a 	mov	r5,r2
  810d80:	e13ffe17 	ldw	r4,-8(fp)
  810d84:	080ff1c0 	call	80ff1c <OS_StrCopy>
  810d88:	e0bffb05 	stb	r2,-20(fp)
  810d8c:	e0bff817 	ldw	r2,-32(fp)
  810d90:	e0bffa15 	stw	r2,-24(fp)
  810d94:	e0bffa17 	ldw	r2,-24(fp)
  810d98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810d9c:	e0bfff17 	ldw	r2,-4(fp)
  810da0:	10000005 	stb	zero,0(r2)
    return (len);
  810da4:	e0bffb03 	ldbu	r2,-20(fp)
}
  810da8:	e037883a 	mov	sp,fp
  810dac:	dfc00117 	ldw	ra,4(sp)
  810db0:	df000017 	ldw	fp,0(sp)
  810db4:	dec00204 	addi	sp,sp,8
  810db8:	f800283a 	ret

00810dbc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  810dbc:	defff504 	addi	sp,sp,-44
  810dc0:	dfc00a15 	stw	ra,40(sp)
  810dc4:	df000915 	stw	fp,36(sp)
  810dc8:	df000904 	addi	fp,sp,36
  810dcc:	e13ffd15 	stw	r4,-12(fp)
  810dd0:	e17ffe15 	stw	r5,-8(fp)
  810dd4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810dd8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  810ddc:	e0bfff17 	ldw	r2,-4(fp)
  810de0:	10004326 	beq	r2,zero,810ef0 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  810de4:	e0bffd17 	ldw	r2,-12(fp)
  810de8:	1000041e 	bne	r2,zero,810dfc <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810dec:	e0bfff17 	ldw	r2,-4(fp)
  810df0:	00c01b84 	movi	r3,110
  810df4:	10c00005 	stb	r3,0(r2)
        return;
  810df8:	00003e06 	br	810ef4 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  810dfc:	e0bffe17 	ldw	r2,-8(fp)
  810e00:	1000041e 	bne	r2,zero,810e14 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  810e04:	e0bfff17 	ldw	r2,-4(fp)
  810e08:	00c00304 	movi	r3,12
  810e0c:	10c00005 	stb	r3,0(r2)
        return;
  810e10:	00003806 	br	810ef4 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  810e14:	d0a07103 	ldbu	r2,-32316(gp)
  810e18:	10803fcc 	andi	r2,r2,255
  810e1c:	10000426 	beq	r2,zero,810e30 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  810e20:	e0bfff17 	ldw	r2,-4(fp)
  810e24:	00c00484 	movi	r3,18
  810e28:	10c00005 	stb	r3,0(r2)
        return;
  810e2c:	00003106 	br	810ef4 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e30:	0005303a 	rdctl	r2,status
  810e34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e38:	e0fffc17 	ldw	r3,-16(fp)
  810e3c:	00bfff84 	movi	r2,-2
  810e40:	1884703a 	and	r2,r3,r2
  810e44:	1001703a 	wrctl	status,r2
  
  return context;
  810e48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  810e4c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  810e50:	e0bffd17 	ldw	r2,-12(fp)
  810e54:	10800003 	ldbu	r2,0(r2)
  810e58:	10803fcc 	andi	r2,r2,255
  810e5c:	10800160 	cmpeqi	r2,r2,5
  810e60:	1000081e 	bne	r2,zero,810e84 <OSFlagNameSet+0xc8>
  810e64:	e0bff717 	ldw	r2,-36(fp)
  810e68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e6c:	e0bff817 	ldw	r2,-32(fp)
  810e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  810e74:	e0bfff17 	ldw	r2,-4(fp)
  810e78:	00c00044 	movi	r3,1
  810e7c:	10c00005 	stb	r3,0(r2)
        return;
  810e80:	00001c06 	br	810ef4 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  810e84:	e13ffe17 	ldw	r4,-8(fp)
  810e88:	080ff900 	call	80ff90 <OS_StrLen>
  810e8c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  810e90:	e0bffa03 	ldbu	r2,-24(fp)
  810e94:	10800830 	cmpltui	r2,r2,32
  810e98:	1000081e 	bne	r2,zero,810ebc <OSFlagNameSet+0x100>
  810e9c:	e0bff717 	ldw	r2,-36(fp)
  810ea0:	e0bff915 	stw	r2,-28(fp)
  810ea4:	e0bff917 	ldw	r2,-28(fp)
  810ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  810eac:	e0bfff17 	ldw	r2,-4(fp)
  810eb0:	00c01cc4 	movi	r3,115
  810eb4:	10c00005 	stb	r3,0(r2)
        return;
  810eb8:	00000e06 	br	810ef4 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  810ebc:	e0bffd17 	ldw	r2,-12(fp)
  810ec0:	10800284 	addi	r2,r2,10
  810ec4:	e17ffe17 	ldw	r5,-8(fp)
  810ec8:	1009883a 	mov	r4,r2
  810ecc:	080ff1c0 	call	80ff1c <OS_StrCopy>
  810ed0:	e0bff717 	ldw	r2,-36(fp)
  810ed4:	e0bffb15 	stw	r2,-20(fp)
  810ed8:	e0bffb17 	ldw	r2,-20(fp)
  810edc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810ee0:	e0bfff17 	ldw	r2,-4(fp)
  810ee4:	10000005 	stb	zero,0(r2)
    return;
  810ee8:	0001883a 	nop
  810eec:	00000106 	br	810ef4 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  810ef0:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  810ef4:	e037883a 	mov	sp,fp
  810ef8:	dfc00117 	ldw	ra,4(sp)
  810efc:	df000017 	ldw	fp,0(sp)
  810f00:	dec00204 	addi	sp,sp,8
  810f04:	f800283a 	ret

00810f08 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  810f08:	deffe104 	addi	sp,sp,-124
  810f0c:	dfc01e15 	stw	ra,120(sp)
  810f10:	df001d15 	stw	fp,116(sp)
  810f14:	df001d04 	addi	fp,sp,116
  810f18:	e13ffc15 	stw	r4,-16(fp)
  810f1c:	2809883a 	mov	r4,r5
  810f20:	3007883a 	mov	r3,r6
  810f24:	3805883a 	mov	r2,r7
  810f28:	e13ffd0d 	sth	r4,-12(fp)
  810f2c:	e0fffe05 	stb	r3,-8(fp)
  810f30:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810f34:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810f38:	e0800217 	ldw	r2,8(fp)
  810f3c:	1000021e 	bne	r2,zero,810f48 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  810f40:	0005883a 	mov	r2,zero
  810f44:	00015906 	br	8114ac <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  810f48:	e0bffc17 	ldw	r2,-16(fp)
  810f4c:	1000051e 	bne	r2,zero,810f64 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810f50:	e0800217 	ldw	r2,8(fp)
  810f54:	00c01b84 	movi	r3,110
  810f58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810f5c:	0005883a 	mov	r2,zero
  810f60:	00015206 	br	8114ac <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810f64:	d0a07103 	ldbu	r2,-32316(gp)
  810f68:	10803fcc 	andi	r2,r2,255
  810f6c:	10000526 	beq	r2,zero,810f84 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  810f70:	e0800217 	ldw	r2,8(fp)
  810f74:	00c00084 	movi	r3,2
  810f78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810f7c:	0005883a 	mov	r2,zero
  810f80:	00014a06 	br	8114ac <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  810f84:	d0a06303 	ldbu	r2,-32372(gp)
  810f88:	10803fcc 	andi	r2,r2,255
  810f8c:	10000526 	beq	r2,zero,810fa4 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  810f90:	e0800217 	ldw	r2,8(fp)
  810f94:	00c00344 	movi	r3,13
  810f98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810f9c:	0005883a 	mov	r2,zero
  810fa0:	00014206 	br	8114ac <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  810fa4:	e0bffc17 	ldw	r2,-16(fp)
  810fa8:	10800003 	ldbu	r2,0(r2)
  810fac:	10803fcc 	andi	r2,r2,255
  810fb0:	10800160 	cmpeqi	r2,r2,5
  810fb4:	1000051e 	bne	r2,zero,810fcc <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  810fb8:	e0800217 	ldw	r2,8(fp)
  810fbc:	00c00044 	movi	r3,1
  810fc0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810fc4:	0005883a 	mov	r2,zero
  810fc8:	00013806 	br	8114ac <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  810fcc:	e0fffe03 	ldbu	r3,-8(fp)
  810fd0:	00bfe004 	movi	r2,-128
  810fd4:	1884703a 	and	r2,r3,r2
  810fd8:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  810fdc:	e0bfe603 	ldbu	r2,-104(fp)
  810fe0:	10000626 	beq	r2,zero,810ffc <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  810fe4:	e0bffe03 	ldbu	r2,-8(fp)
  810fe8:	10801fcc 	andi	r2,r2,127
  810fec:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  810ff0:	00800044 	movi	r2,1
  810ff4:	e0bfe405 	stb	r2,-112(fp)
  810ff8:	00000106 	br	811000 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  810ffc:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811000:	0005303a 	rdctl	r2,status
  811004:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811008:	e0fff617 	ldw	r3,-40(fp)
  81100c:	00bfff84 	movi	r2,-2
  811010:	1884703a 	and	r2,r3,r2
  811014:	1001703a 	wrctl	status,r2
  
  return context;
  811018:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81101c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  811020:	e0bffe03 	ldbu	r2,-8(fp)
  811024:	10c00060 	cmpeqi	r3,r2,1
  811028:	1800921e 	bne	r3,zero,811274 <OSFlagPend+0x36c>
  81102c:	10c00088 	cmpgei	r3,r2,2
  811030:	1800021e 	bne	r3,zero,81103c <OSFlagPend+0x134>
  811034:	10006126 	beq	r2,zero,8111bc <OSFlagPend+0x2b4>
  811038:	0000bb06 	br	811328 <OSFlagPend+0x420>
  81103c:	10c000a0 	cmpeqi	r3,r2,2
  811040:	1800031e 	bne	r3,zero,811050 <OSFlagPend+0x148>
  811044:	108000e0 	cmpeqi	r2,r2,3
  811048:	10002f1e 	bne	r2,zero,811108 <OSFlagPend+0x200>
  81104c:	0000b606 	br	811328 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  811050:	e0bffc17 	ldw	r2,-16(fp)
  811054:	10c0020b 	ldhu	r3,8(r2)
  811058:	e0bffd0b 	ldhu	r2,-12(fp)
  81105c:	1884703a 	and	r2,r3,r2
  811060:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811064:	e0ffe80b 	ldhu	r3,-96(fp)
  811068:	e0bffd0b 	ldhu	r2,-12(fp)
  81106c:	1880171e 	bne	r3,r2,8110cc <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811070:	e0bfe403 	ldbu	r2,-112(fp)
  811074:	10800058 	cmpnei	r2,r2,1
  811078:	1000091e 	bne	r2,zero,8110a0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  81107c:	e0bffc17 	ldw	r2,-16(fp)
  811080:	1080020b 	ldhu	r2,8(r2)
  811084:	1007883a 	mov	r3,r2
  811088:	e0bfe80b 	ldhu	r2,-96(fp)
  81108c:	0084303a 	nor	r2,zero,r2
  811090:	1884703a 	and	r2,r3,r2
  811094:	1007883a 	mov	r3,r2
  811098:	e0bffc17 	ldw	r2,-16(fp)
  81109c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8110a0:	d0a07217 	ldw	r2,-32312(gp)
  8110a4:	e0ffe80b 	ldhu	r3,-96(fp)
  8110a8:	10c00b0d 	sth	r3,44(r2)
  8110ac:	e0bfe517 	ldw	r2,-108(fp)
  8110b0:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110b4:	e0bfe717 	ldw	r2,-100(fp)
  8110b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8110bc:	e0800217 	ldw	r2,8(fp)
  8110c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8110c4:	e0bfe80b 	ldhu	r2,-96(fp)
  8110c8:	0000f806 	br	8114ac <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8110cc:	e13ffd0b 	ldhu	r4,-12(fp)
  8110d0:	e17ffe03 	ldbu	r5,-8(fp)
  8110d4:	e0bfff0b 	ldhu	r2,-4(fp)
  8110d8:	e0fff704 	addi	r3,fp,-36
  8110dc:	d8800015 	stw	r2,0(sp)
  8110e0:	280f883a 	mov	r7,r5
  8110e4:	200d883a 	mov	r6,r4
  8110e8:	180b883a 	mov	r5,r3
  8110ec:	e13ffc17 	ldw	r4,-16(fp)
  8110f0:	08119780 	call	811978 <OS_FlagBlock>
  8110f4:	e0bfe517 	ldw	r2,-108(fp)
  8110f8:	e0bfe915 	stw	r2,-92(fp)
  8110fc:	e0bfe917 	ldw	r2,-92(fp)
  811100:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811104:	00009206 	br	811350 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  811108:	e0bffc17 	ldw	r2,-16(fp)
  81110c:	10c0020b 	ldhu	r3,8(r2)
  811110:	e0bffd0b 	ldhu	r2,-12(fp)
  811114:	1884703a 	and	r2,r3,r2
  811118:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  81111c:	e0bfe80b 	ldhu	r2,-96(fp)
  811120:	10001726 	beq	r2,zero,811180 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811124:	e0bfe403 	ldbu	r2,-112(fp)
  811128:	10800058 	cmpnei	r2,r2,1
  81112c:	1000091e 	bne	r2,zero,811154 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  811130:	e0bffc17 	ldw	r2,-16(fp)
  811134:	1080020b 	ldhu	r2,8(r2)
  811138:	1007883a 	mov	r3,r2
  81113c:	e0bfe80b 	ldhu	r2,-96(fp)
  811140:	0084303a 	nor	r2,zero,r2
  811144:	1884703a 	and	r2,r3,r2
  811148:	1007883a 	mov	r3,r2
  81114c:	e0bffc17 	ldw	r2,-16(fp)
  811150:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811154:	d0a07217 	ldw	r2,-32312(gp)
  811158:	e0ffe80b 	ldhu	r3,-96(fp)
  81115c:	10c00b0d 	sth	r3,44(r2)
  811160:	e0bfe517 	ldw	r2,-108(fp)
  811164:	e0bfea15 	stw	r2,-88(fp)
  811168:	e0bfea17 	ldw	r2,-88(fp)
  81116c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811170:	e0800217 	ldw	r2,8(fp)
  811174:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811178:	e0bfe80b 	ldhu	r2,-96(fp)
  81117c:	0000cb06 	br	8114ac <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811180:	e13ffd0b 	ldhu	r4,-12(fp)
  811184:	e17ffe03 	ldbu	r5,-8(fp)
  811188:	e0bfff0b 	ldhu	r2,-4(fp)
  81118c:	e0fff704 	addi	r3,fp,-36
  811190:	d8800015 	stw	r2,0(sp)
  811194:	280f883a 	mov	r7,r5
  811198:	200d883a 	mov	r6,r4
  81119c:	180b883a 	mov	r5,r3
  8111a0:	e13ffc17 	ldw	r4,-16(fp)
  8111a4:	08119780 	call	811978 <OS_FlagBlock>
  8111a8:	e0bfe517 	ldw	r2,-108(fp)
  8111ac:	e0bfeb15 	stw	r2,-84(fp)
  8111b0:	e0bfeb17 	ldw	r2,-84(fp)
  8111b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8111b8:	00006506 	br	811350 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8111bc:	e0bffc17 	ldw	r2,-16(fp)
  8111c0:	1080020b 	ldhu	r2,8(r2)
  8111c4:	0084303a 	nor	r2,zero,r2
  8111c8:	1007883a 	mov	r3,r2
  8111cc:	e0bffd0b 	ldhu	r2,-12(fp)
  8111d0:	1884703a 	and	r2,r3,r2
  8111d4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8111d8:	e0ffe80b 	ldhu	r3,-96(fp)
  8111dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8111e0:	1880151e 	bne	r3,r2,811238 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8111e4:	e0bfe403 	ldbu	r2,-112(fp)
  8111e8:	10800058 	cmpnei	r2,r2,1
  8111ec:	1000071e 	bne	r2,zero,81120c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  8111f0:	e0bffc17 	ldw	r2,-16(fp)
  8111f4:	10c0020b 	ldhu	r3,8(r2)
  8111f8:	e0bfe80b 	ldhu	r2,-96(fp)
  8111fc:	1884b03a 	or	r2,r3,r2
  811200:	1007883a 	mov	r3,r2
  811204:	e0bffc17 	ldw	r2,-16(fp)
  811208:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81120c:	d0a07217 	ldw	r2,-32312(gp)
  811210:	e0ffe80b 	ldhu	r3,-96(fp)
  811214:	10c00b0d 	sth	r3,44(r2)
  811218:	e0bfe517 	ldw	r2,-108(fp)
  81121c:	e0bfec15 	stw	r2,-80(fp)
  811220:	e0bfec17 	ldw	r2,-80(fp)
  811224:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811228:	e0800217 	ldw	r2,8(fp)
  81122c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811230:	e0bfe80b 	ldhu	r2,-96(fp)
  811234:	00009d06 	br	8114ac <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811238:	e13ffd0b 	ldhu	r4,-12(fp)
  81123c:	e17ffe03 	ldbu	r5,-8(fp)
  811240:	e0bfff0b 	ldhu	r2,-4(fp)
  811244:	e0fff704 	addi	r3,fp,-36
  811248:	d8800015 	stw	r2,0(sp)
  81124c:	280f883a 	mov	r7,r5
  811250:	200d883a 	mov	r6,r4
  811254:	180b883a 	mov	r5,r3
  811258:	e13ffc17 	ldw	r4,-16(fp)
  81125c:	08119780 	call	811978 <OS_FlagBlock>
  811260:	e0bfe517 	ldw	r2,-108(fp)
  811264:	e0bfed15 	stw	r2,-76(fp)
  811268:	e0bfed17 	ldw	r2,-76(fp)
  81126c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811270:	00003706 	br	811350 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  811274:	e0bffc17 	ldw	r2,-16(fp)
  811278:	1080020b 	ldhu	r2,8(r2)
  81127c:	0084303a 	nor	r2,zero,r2
  811280:	1007883a 	mov	r3,r2
  811284:	e0bffd0b 	ldhu	r2,-12(fp)
  811288:	1884703a 	and	r2,r3,r2
  81128c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  811290:	e0bfe80b 	ldhu	r2,-96(fp)
  811294:	10001526 	beq	r2,zero,8112ec <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811298:	e0bfe403 	ldbu	r2,-112(fp)
  81129c:	10800058 	cmpnei	r2,r2,1
  8112a0:	1000071e 	bne	r2,zero,8112c0 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8112a4:	e0bffc17 	ldw	r2,-16(fp)
  8112a8:	10c0020b 	ldhu	r3,8(r2)
  8112ac:	e0bfe80b 	ldhu	r2,-96(fp)
  8112b0:	1884b03a 	or	r2,r3,r2
  8112b4:	1007883a 	mov	r3,r2
  8112b8:	e0bffc17 	ldw	r2,-16(fp)
  8112bc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8112c0:	d0a07217 	ldw	r2,-32312(gp)
  8112c4:	e0ffe80b 	ldhu	r3,-96(fp)
  8112c8:	10c00b0d 	sth	r3,44(r2)
  8112cc:	e0bfe517 	ldw	r2,-108(fp)
  8112d0:	e0bfee15 	stw	r2,-72(fp)
  8112d4:	e0bfee17 	ldw	r2,-72(fp)
  8112d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8112dc:	e0800217 	ldw	r2,8(fp)
  8112e0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8112e4:	e0bfe80b 	ldhu	r2,-96(fp)
  8112e8:	00007006 	br	8114ac <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8112ec:	e13ffd0b 	ldhu	r4,-12(fp)
  8112f0:	e17ffe03 	ldbu	r5,-8(fp)
  8112f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8112f8:	e0fff704 	addi	r3,fp,-36
  8112fc:	d8800015 	stw	r2,0(sp)
  811300:	280f883a 	mov	r7,r5
  811304:	200d883a 	mov	r6,r4
  811308:	180b883a 	mov	r5,r3
  81130c:	e13ffc17 	ldw	r4,-16(fp)
  811310:	08119780 	call	811978 <OS_FlagBlock>
  811314:	e0bfe517 	ldw	r2,-108(fp)
  811318:	e0bfef15 	stw	r2,-68(fp)
  81131c:	e0bfef17 	ldw	r2,-68(fp)
  811320:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811324:	00000a06 	br	811350 <OSFlagPend+0x448>
  811328:	e0bfe517 	ldw	r2,-108(fp)
  81132c:	e0bff015 	stw	r2,-64(fp)
  811330:	e0bff017 	ldw	r2,-64(fp)
  811334:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  811338:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  81133c:	e0800217 	ldw	r2,8(fp)
  811340:	00c01bc4 	movi	r3,111
  811344:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  811348:	e0bfe80b 	ldhu	r2,-96(fp)
  81134c:	00005706 	br	8114ac <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  811350:	080fdd80 	call	80fdd8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811354:	0005303a 	rdctl	r2,status
  811358:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81135c:	e0fff117 	ldw	r3,-60(fp)
  811360:	00bfff84 	movi	r2,-2
  811364:	1884703a 	and	r2,r3,r2
  811368:	1001703a 	wrctl	status,r2
  
  return context;
  81136c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  811370:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  811374:	d0a07217 	ldw	r2,-32312(gp)
  811378:	10800c43 	ldbu	r2,49(r2)
  81137c:	10803fcc 	andi	r2,r2,255
  811380:	10001c26 	beq	r2,zero,8113f4 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  811384:	d0a07217 	ldw	r2,-32312(gp)
  811388:	10800c43 	ldbu	r2,49(r2)
  81138c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  811390:	d0a07217 	ldw	r2,-32312(gp)
  811394:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  811398:	e0bff704 	addi	r2,fp,-36
  81139c:	1009883a 	mov	r4,r2
  8113a0:	0811cac0 	call	811cac <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  8113a4:	d0a07217 	ldw	r2,-32312(gp)
  8113a8:	10000c05 	stb	zero,48(r2)
  8113ac:	e0bfe517 	ldw	r2,-108(fp)
  8113b0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113b4:	e0bff217 	ldw	r2,-56(fp)
  8113b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  8113bc:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  8113c0:	e0bff303 	ldbu	r2,-52(fp)
  8113c4:	108000a0 	cmpeqi	r2,r2,2
  8113c8:	10000426 	beq	r2,zero,8113dc <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  8113cc:	e0800217 	ldw	r2,8(fp)
  8113d0:	00c00384 	movi	r3,14
  8113d4:	10c00005 	stb	r3,0(r2)
                 break;
  8113d8:	00000406 	br	8113ec <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  8113dc:	e0800217 	ldw	r2,8(fp)
  8113e0:	00c00284 	movi	r3,10
  8113e4:	10c00005 	stb	r3,0(r2)
                 break;
  8113e8:	0001883a 	nop
        }
        return (flags_rdy);
  8113ec:	e0bfe80b 	ldhu	r2,-96(fp)
  8113f0:	00002e06 	br	8114ac <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  8113f4:	d0a07217 	ldw	r2,-32312(gp)
  8113f8:	10800b0b 	ldhu	r2,44(r2)
  8113fc:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  811400:	e0bfe403 	ldbu	r2,-112(fp)
  811404:	10800058 	cmpnei	r2,r2,1
  811408:	1000211e 	bne	r2,zero,811490 <OSFlagPend+0x588>
        switch (wait_type) {
  81140c:	e0bffe03 	ldbu	r2,-8(fp)
  811410:	10001616 	blt	r2,zero,81146c <OSFlagPend+0x564>
  811414:	10c00090 	cmplti	r3,r2,2
  811418:	18000c1e 	bne	r3,zero,81144c <OSFlagPend+0x544>
  81141c:	10800108 	cmpgei	r2,r2,4
  811420:	1000121e 	bne	r2,zero,81146c <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  811424:	e0bffc17 	ldw	r2,-16(fp)
  811428:	1080020b 	ldhu	r2,8(r2)
  81142c:	1007883a 	mov	r3,r2
  811430:	e0bfe80b 	ldhu	r2,-96(fp)
  811434:	0084303a 	nor	r2,zero,r2
  811438:	1884703a 	and	r2,r3,r2
  81143c:	1007883a 	mov	r3,r2
  811440:	e0bffc17 	ldw	r2,-16(fp)
  811444:	10c0020d 	sth	r3,8(r2)
                 break;
  811448:	00001106 	br	811490 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  81144c:	e0bffc17 	ldw	r2,-16(fp)
  811450:	10c0020b 	ldhu	r3,8(r2)
  811454:	e0bfe80b 	ldhu	r2,-96(fp)
  811458:	1884b03a 	or	r2,r3,r2
  81145c:	1007883a 	mov	r3,r2
  811460:	e0bffc17 	ldw	r2,-16(fp)
  811464:	10c0020d 	sth	r3,8(r2)
                 break;
  811468:	00000906 	br	811490 <OSFlagPend+0x588>
  81146c:	e0bfe517 	ldw	r2,-108(fp)
  811470:	e0bff415 	stw	r2,-48(fp)
  811474:	e0bff417 	ldw	r2,-48(fp)
  811478:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81147c:	e0800217 	ldw	r2,8(fp)
  811480:	00c01bc4 	movi	r3,111
  811484:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  811488:	0005883a 	mov	r2,zero
  81148c:	00000706 	br	8114ac <OSFlagPend+0x5a4>
  811490:	e0bfe517 	ldw	r2,-108(fp)
  811494:	e0bff515 	stw	r2,-44(fp)
  811498:	e0bff517 	ldw	r2,-44(fp)
  81149c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  8114a0:	e0800217 	ldw	r2,8(fp)
  8114a4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  8114a8:	e0bfe80b 	ldhu	r2,-96(fp)
}
  8114ac:	e037883a 	mov	sp,fp
  8114b0:	dfc00117 	ldw	ra,4(sp)
  8114b4:	df000017 	ldw	fp,0(sp)
  8114b8:	dec00204 	addi	sp,sp,8
  8114bc:	f800283a 	ret

008114c0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  8114c0:	defffb04 	addi	sp,sp,-20
  8114c4:	df000415 	stw	fp,16(sp)
  8114c8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8114cc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114d0:	0005303a 	rdctl	r2,status
  8114d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114d8:	e0fffe17 	ldw	r3,-8(fp)
  8114dc:	00bfff84 	movi	r2,-2
  8114e0:	1884703a 	and	r2,r3,r2
  8114e4:	1001703a 	wrctl	status,r2
  
  return context;
  8114e8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  8114ec:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  8114f0:	d0a07217 	ldw	r2,-32312(gp)
  8114f4:	10800b0b 	ldhu	r2,44(r2)
  8114f8:	e0bffd0d 	sth	r2,-12(fp)
  8114fc:	e0bffc17 	ldw	r2,-16(fp)
  811500:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811504:	e0bfff17 	ldw	r2,-4(fp)
  811508:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  81150c:	e0bffd0b 	ldhu	r2,-12(fp)
}
  811510:	e037883a 	mov	sp,fp
  811514:	df000017 	ldw	fp,0(sp)
  811518:	dec00104 	addi	sp,sp,4
  81151c:	f800283a 	ret

00811520 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  811520:	deffef04 	addi	sp,sp,-68
  811524:	dfc01015 	stw	ra,64(sp)
  811528:	df000f15 	stw	fp,60(sp)
  81152c:	df000f04 	addi	fp,sp,60
  811530:	e13ffc15 	stw	r4,-16(fp)
  811534:	2807883a 	mov	r3,r5
  811538:	3005883a 	mov	r2,r6
  81153c:	e1ffff15 	stw	r7,-4(fp)
  811540:	e0fffd0d 	sth	r3,-12(fp)
  811544:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  811548:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81154c:	e0bfff17 	ldw	r2,-4(fp)
  811550:	1000021e 	bne	r2,zero,81155c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  811554:	0005883a 	mov	r2,zero
  811558:	0000d106 	br	8118a0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  81155c:	e0bffc17 	ldw	r2,-16(fp)
  811560:	1000051e 	bne	r2,zero,811578 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811564:	e0bfff17 	ldw	r2,-4(fp)
  811568:	00c01b84 	movi	r3,110
  81156c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811570:	0005883a 	mov	r2,zero
  811574:	0000ca06 	br	8118a0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  811578:	e0bffc17 	ldw	r2,-16(fp)
  81157c:	10800003 	ldbu	r2,0(r2)
  811580:	10803fcc 	andi	r2,r2,255
  811584:	10800160 	cmpeqi	r2,r2,5
  811588:	1000051e 	bne	r2,zero,8115a0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  81158c:	e0bfff17 	ldw	r2,-4(fp)
  811590:	00c00044 	movi	r3,1
  811594:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811598:	0005883a 	mov	r2,zero
  81159c:	0000c006 	br	8118a0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8115a0:	0005303a 	rdctl	r2,status
  8115a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115a8:	e0fffb17 	ldw	r3,-20(fp)
  8115ac:	00bfff84 	movi	r2,-2
  8115b0:	1884703a 	and	r2,r3,r2
  8115b4:	1001703a 	wrctl	status,r2
  
  return context;
  8115b8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8115bc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  8115c0:	e0bffe03 	ldbu	r2,-8(fp)
  8115c4:	10000326 	beq	r2,zero,8115d4 <OSFlagPost+0xb4>
  8115c8:	10800060 	cmpeqi	r2,r2,1
  8115cc:	10000b1e 	bne	r2,zero,8115fc <OSFlagPost+0xdc>
  8115d0:	00001206 	br	81161c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8115d4:	e0bffc17 	ldw	r2,-16(fp)
  8115d8:	1080020b 	ldhu	r2,8(r2)
  8115dc:	1007883a 	mov	r3,r2
  8115e0:	e0bffd0b 	ldhu	r2,-12(fp)
  8115e4:	0084303a 	nor	r2,zero,r2
  8115e8:	1884703a 	and	r2,r3,r2
  8115ec:	1007883a 	mov	r3,r2
  8115f0:	e0bffc17 	ldw	r2,-16(fp)
  8115f4:	10c0020d 	sth	r3,8(r2)
             break;
  8115f8:	00001106 	br	811640 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  8115fc:	e0bffc17 	ldw	r2,-16(fp)
  811600:	10c0020b 	ldhu	r3,8(r2)
  811604:	e0bffd0b 	ldhu	r2,-12(fp)
  811608:	1884b03a 	or	r2,r3,r2
  81160c:	1007883a 	mov	r3,r2
  811610:	e0bffc17 	ldw	r2,-16(fp)
  811614:	10c0020d 	sth	r3,8(r2)
             break;
  811618:	00000906 	br	811640 <OSFlagPost+0x120>
  81161c:	e0bff317 	ldw	r2,-52(fp)
  811620:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811624:	e0bff417 	ldw	r2,-48(fp)
  811628:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  81162c:	e0bfff17 	ldw	r2,-4(fp)
  811630:	00c01c44 	movi	r3,113
  811634:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  811638:	0005883a 	mov	r2,zero
  81163c:	00009806 	br	8118a0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  811640:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  811644:	e0bffc17 	ldw	r2,-16(fp)
  811648:	10800117 	ldw	r2,4(r2)
  81164c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  811650:	00007706 	br	811830 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  811654:	e0bff117 	ldw	r2,-60(fp)
  811658:	10800483 	ldbu	r2,18(r2)
  81165c:	10803fcc 	andi	r2,r2,255
  811660:	10c00060 	cmpeqi	r3,r2,1
  811664:	18004a1e 	bne	r3,zero,811790 <OSFlagPost+0x270>
  811668:	10c00088 	cmpgei	r3,r2,2
  81166c:	1800021e 	bne	r3,zero,811678 <OSFlagPost+0x158>
  811670:	10002f26 	beq	r2,zero,811730 <OSFlagPost+0x210>
  811674:	00005b06 	br	8117e4 <OSFlagPost+0x2c4>
  811678:	10c000a0 	cmpeqi	r3,r2,2
  81167c:	1800031e 	bne	r3,zero,81168c <OSFlagPost+0x16c>
  811680:	108000e0 	cmpeqi	r2,r2,3
  811684:	1000171e 	bne	r2,zero,8116e4 <OSFlagPost+0x1c4>
  811688:	00005606 	br	8117e4 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81168c:	e0bffc17 	ldw	r2,-16(fp)
  811690:	10c0020b 	ldhu	r3,8(r2)
  811694:	e0bff117 	ldw	r2,-60(fp)
  811698:	1080040b 	ldhu	r2,16(r2)
  81169c:	1884703a 	and	r2,r3,r2
  8116a0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8116a4:	e0bff117 	ldw	r2,-60(fp)
  8116a8:	1080040b 	ldhu	r2,16(r2)
  8116ac:	10ffffcc 	andi	r3,r2,65535
  8116b0:	e0bff60b 	ldhu	r2,-40(fp)
  8116b4:	1880541e 	bne	r3,r2,811808 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8116b8:	e0bff60b 	ldhu	r2,-40(fp)
  8116bc:	100b883a 	mov	r5,r2
  8116c0:	e13ff117 	ldw	r4,-60(fp)
  8116c4:	0811bb80 	call	811bb8 <OS_FlagTaskRdy>
  8116c8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8116cc:	e0bff683 	ldbu	r2,-38(fp)
  8116d0:	10800058 	cmpnei	r2,r2,1
  8116d4:	10004c1e 	bne	r2,zero,811808 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8116d8:	00800044 	movi	r2,1
  8116dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8116e0:	00004906 	br	811808 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8116e4:	e0bffc17 	ldw	r2,-16(fp)
  8116e8:	10c0020b 	ldhu	r3,8(r2)
  8116ec:	e0bff117 	ldw	r2,-60(fp)
  8116f0:	1080040b 	ldhu	r2,16(r2)
  8116f4:	1884703a 	and	r2,r3,r2
  8116f8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8116fc:	e0bff60b 	ldhu	r2,-40(fp)
  811700:	10004326 	beq	r2,zero,811810 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  811704:	e0bff60b 	ldhu	r2,-40(fp)
  811708:	100b883a 	mov	r5,r2
  81170c:	e13ff117 	ldw	r4,-60(fp)
  811710:	0811bb80 	call	811bb8 <OS_FlagTaskRdy>
  811714:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  811718:	e0bff683 	ldbu	r2,-38(fp)
  81171c:	10800058 	cmpnei	r2,r2,1
  811720:	10003b1e 	bne	r2,zero,811810 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  811724:	00800044 	movi	r2,1
  811728:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  81172c:	00003806 	br	811810 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  811730:	e0bffc17 	ldw	r2,-16(fp)
  811734:	1080020b 	ldhu	r2,8(r2)
  811738:	0084303a 	nor	r2,zero,r2
  81173c:	1007883a 	mov	r3,r2
  811740:	e0bff117 	ldw	r2,-60(fp)
  811744:	1080040b 	ldhu	r2,16(r2)
  811748:	1884703a 	and	r2,r3,r2
  81174c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  811750:	e0bff117 	ldw	r2,-60(fp)
  811754:	1080040b 	ldhu	r2,16(r2)
  811758:	10ffffcc 	andi	r3,r2,65535
  81175c:	e0bff60b 	ldhu	r2,-40(fp)
  811760:	18802d1e 	bne	r3,r2,811818 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  811764:	e0bff60b 	ldhu	r2,-40(fp)
  811768:	100b883a 	mov	r5,r2
  81176c:	e13ff117 	ldw	r4,-60(fp)
  811770:	0811bb80 	call	811bb8 <OS_FlagTaskRdy>
  811774:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  811778:	e0bff683 	ldbu	r2,-38(fp)
  81177c:	10800058 	cmpnei	r2,r2,1
  811780:	1000251e 	bne	r2,zero,811818 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  811784:	00800044 	movi	r2,1
  811788:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  81178c:	00002206 	br	811818 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  811790:	e0bffc17 	ldw	r2,-16(fp)
  811794:	1080020b 	ldhu	r2,8(r2)
  811798:	0084303a 	nor	r2,zero,r2
  81179c:	1007883a 	mov	r3,r2
  8117a0:	e0bff117 	ldw	r2,-60(fp)
  8117a4:	1080040b 	ldhu	r2,16(r2)
  8117a8:	1884703a 	and	r2,r3,r2
  8117ac:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8117b0:	e0bff60b 	ldhu	r2,-40(fp)
  8117b4:	10001a26 	beq	r2,zero,811820 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8117b8:	e0bff60b 	ldhu	r2,-40(fp)
  8117bc:	100b883a 	mov	r5,r2
  8117c0:	e13ff117 	ldw	r4,-60(fp)
  8117c4:	0811bb80 	call	811bb8 <OS_FlagTaskRdy>
  8117c8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8117cc:	e0bff683 	ldbu	r2,-38(fp)
  8117d0:	10800058 	cmpnei	r2,r2,1
  8117d4:	1000121e 	bne	r2,zero,811820 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8117d8:	00800044 	movi	r2,1
  8117dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8117e0:	00000f06 	br	811820 <OSFlagPost+0x300>
  8117e4:	e0bff317 	ldw	r2,-52(fp)
  8117e8:	e0bff515 	stw	r2,-44(fp)
  8117ec:	e0bff517 	ldw	r2,-44(fp)
  8117f0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8117f4:	e0bfff17 	ldw	r2,-4(fp)
  8117f8:	00c01bc4 	movi	r3,111
  8117fc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  811800:	0005883a 	mov	r2,zero
  811804:	00002606 	br	8118a0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811808:	0001883a 	nop
  81180c:	00000506 	br	811824 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811810:	0001883a 	nop
  811814:	00000306 	br	811824 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811818:	0001883a 	nop
  81181c:	00000106 	br	811824 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811820:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  811824:	e0bff117 	ldw	r2,-60(fp)
  811828:	10800017 	ldw	r2,0(r2)
  81182c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  811830:	e0bff117 	ldw	r2,-60(fp)
  811834:	103f871e 	bne	r2,zero,811654 <__alt_mem_epcs_flash_controller_0+0xff808654>
  811838:	e0bff317 	ldw	r2,-52(fp)
  81183c:	e0bff715 	stw	r2,-36(fp)
  811840:	e0bff717 	ldw	r2,-36(fp)
  811844:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  811848:	e0bff203 	ldbu	r2,-56(fp)
  81184c:	10800058 	cmpnei	r2,r2,1
  811850:	1000011e 	bne	r2,zero,811858 <OSFlagPost+0x338>
        OS_Sched();
  811854:	080fdd80 	call	80fdd8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811858:	0005303a 	rdctl	r2,status
  81185c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811860:	e0fffa17 	ldw	r3,-24(fp)
  811864:	00bfff84 	movi	r2,-2
  811868:	1884703a 	and	r2,r3,r2
  81186c:	1001703a 	wrctl	status,r2
  
  return context;
  811870:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  811874:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  811878:	e0bffc17 	ldw	r2,-16(fp)
  81187c:	1080020b 	ldhu	r2,8(r2)
  811880:	e0bff90d 	sth	r2,-28(fp)
  811884:	e0bff317 	ldw	r2,-52(fp)
  811888:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81188c:	e0bff817 	ldw	r2,-32(fp)
  811890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  811894:	e0bfff17 	ldw	r2,-4(fp)
  811898:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  81189c:	e0bff90b 	ldhu	r2,-28(fp)
}
  8118a0:	e037883a 	mov	sp,fp
  8118a4:	dfc00117 	ldw	ra,4(sp)
  8118a8:	df000017 	ldw	fp,0(sp)
  8118ac:	dec00204 	addi	sp,sp,8
  8118b0:	f800283a 	ret

008118b4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  8118b4:	defff904 	addi	sp,sp,-28
  8118b8:	df000615 	stw	fp,24(sp)
  8118bc:	df000604 	addi	fp,sp,24
  8118c0:	e13ffe15 	stw	r4,-8(fp)
  8118c4:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  8118c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  8118cc:	e0bfff17 	ldw	r2,-4(fp)
  8118d0:	1000021e 	bne	r2,zero,8118dc <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  8118d4:	0005883a 	mov	r2,zero
  8118d8:	00002306 	br	811968 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  8118dc:	e0bffe17 	ldw	r2,-8(fp)
  8118e0:	1000051e 	bne	r2,zero,8118f8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8118e4:	e0bfff17 	ldw	r2,-4(fp)
  8118e8:	00c01b84 	movi	r3,110
  8118ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8118f0:	0005883a 	mov	r2,zero
  8118f4:	00001c06 	br	811968 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  8118f8:	e0bffe17 	ldw	r2,-8(fp)
  8118fc:	10800003 	ldbu	r2,0(r2)
  811900:	10803fcc 	andi	r2,r2,255
  811904:	10800160 	cmpeqi	r2,r2,5
  811908:	1000051e 	bne	r2,zero,811920 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  81190c:	e0bfff17 	ldw	r2,-4(fp)
  811910:	00c00044 	movi	r3,1
  811914:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811918:	0005883a 	mov	r2,zero
  81191c:	00001206 	br	811968 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811920:	0005303a 	rdctl	r2,status
  811924:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811928:	e0fffc17 	ldw	r3,-16(fp)
  81192c:	00bfff84 	movi	r2,-2
  811930:	1884703a 	and	r2,r3,r2
  811934:	1001703a 	wrctl	status,r2
  
  return context;
  811938:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81193c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  811940:	e0bffe17 	ldw	r2,-8(fp)
  811944:	1080020b 	ldhu	r2,8(r2)
  811948:	e0bffb0d 	sth	r2,-20(fp)
  81194c:	e0bffa17 	ldw	r2,-24(fp)
  811950:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811954:	e0bffd17 	ldw	r2,-12(fp)
  811958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81195c:	e0bfff17 	ldw	r2,-4(fp)
  811960:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  811964:	e0bffb0b 	ldhu	r2,-20(fp)
}
  811968:	e037883a 	mov	sp,fp
  81196c:	df000017 	ldw	fp,0(sp)
  811970:	dec00104 	addi	sp,sp,4
  811974:	f800283a 	ret

00811978 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  811978:	defff804 	addi	sp,sp,-32
  81197c:	df000715 	stw	fp,28(sp)
  811980:	df000704 	addi	fp,sp,28
  811984:	e13ffb15 	stw	r4,-20(fp)
  811988:	e17ffc15 	stw	r5,-16(fp)
  81198c:	3009883a 	mov	r4,r6
  811990:	3807883a 	mov	r3,r7
  811994:	e0800117 	ldw	r2,4(fp)
  811998:	e13ffd0d 	sth	r4,-12(fp)
  81199c:	e0fffe05 	stb	r3,-8(fp)
  8119a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  8119a4:	d0a07217 	ldw	r2,-32312(gp)
  8119a8:	d0e07217 	ldw	r3,-32312(gp)
  8119ac:	18c00c03 	ldbu	r3,48(r3)
  8119b0:	18c00814 	ori	r3,r3,32
  8119b4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  8119b8:	d0a07217 	ldw	r2,-32312(gp)
  8119bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  8119c0:	d0a07217 	ldw	r2,-32312(gp)
  8119c4:	e0ffff0b 	ldhu	r3,-4(fp)
  8119c8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  8119cc:	d0a07217 	ldw	r2,-32312(gp)
  8119d0:	e0fffc17 	ldw	r3,-16(fp)
  8119d4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  8119d8:	e0bffc17 	ldw	r2,-16(fp)
  8119dc:	e0fffd0b 	ldhu	r3,-12(fp)
  8119e0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  8119e4:	e0bffc17 	ldw	r2,-16(fp)
  8119e8:	e0fffe03 	ldbu	r3,-8(fp)
  8119ec:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  8119f0:	d0e07217 	ldw	r3,-32312(gp)
  8119f4:	e0bffc17 	ldw	r2,-16(fp)
  8119f8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  8119fc:	e0bffb17 	ldw	r2,-20(fp)
  811a00:	10c00117 	ldw	r3,4(r2)
  811a04:	e0bffc17 	ldw	r2,-16(fp)
  811a08:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  811a0c:	e0bffc17 	ldw	r2,-16(fp)
  811a10:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  811a14:	e0bffc17 	ldw	r2,-16(fp)
  811a18:	e0fffb17 	ldw	r3,-20(fp)
  811a1c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  811a20:	e0bffb17 	ldw	r2,-20(fp)
  811a24:	10800117 	ldw	r2,4(r2)
  811a28:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  811a2c:	e0bff917 	ldw	r2,-28(fp)
  811a30:	10000326 	beq	r2,zero,811a40 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  811a34:	e0bff917 	ldw	r2,-28(fp)
  811a38:	e0fffc17 	ldw	r3,-16(fp)
  811a3c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  811a40:	e0bffb17 	ldw	r2,-20(fp)
  811a44:	e0fffc17 	ldw	r3,-16(fp)
  811a48:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  811a4c:	d0a07217 	ldw	r2,-32312(gp)
  811a50:	10800d03 	ldbu	r2,52(r2)
  811a54:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  811a58:	e0fffa03 	ldbu	r3,-24(fp)
  811a5c:	e13ffa03 	ldbu	r4,-24(fp)
  811a60:	d0a06f44 	addi	r2,gp,-32323
  811a64:	2085883a 	add	r2,r4,r2
  811a68:	10800003 	ldbu	r2,0(r2)
  811a6c:	1009883a 	mov	r4,r2
  811a70:	d0a07217 	ldw	r2,-32312(gp)
  811a74:	10800d43 	ldbu	r2,53(r2)
  811a78:	0084303a 	nor	r2,zero,r2
  811a7c:	2084703a 	and	r2,r4,r2
  811a80:	1009883a 	mov	r4,r2
  811a84:	d0a06f44 	addi	r2,gp,-32323
  811a88:	1885883a 	add	r2,r3,r2
  811a8c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  811a90:	e0fffa03 	ldbu	r3,-24(fp)
  811a94:	d0a06f44 	addi	r2,gp,-32323
  811a98:	1885883a 	add	r2,r3,r2
  811a9c:	10800003 	ldbu	r2,0(r2)
  811aa0:	10803fcc 	andi	r2,r2,255
  811aa4:	1000071e 	bne	r2,zero,811ac4 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  811aa8:	d0a07217 	ldw	r2,-32312(gp)
  811aac:	10800d83 	ldbu	r2,54(r2)
  811ab0:	0084303a 	nor	r2,zero,r2
  811ab4:	1007883a 	mov	r3,r2
  811ab8:	d0a06f03 	ldbu	r2,-32324(gp)
  811abc:	1884703a 	and	r2,r3,r2
  811ac0:	d0a06f05 	stb	r2,-32324(gp)
    }
}
  811ac4:	0001883a 	nop
  811ac8:	e037883a 	mov	sp,fp
  811acc:	df000017 	ldw	fp,0(sp)
  811ad0:	dec00104 	addi	sp,sp,4
  811ad4:	f800283a 	ret

00811ad8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  811ad8:	defffb04 	addi	sp,sp,-20
  811adc:	dfc00415 	stw	ra,16(sp)
  811ae0:	df000315 	stw	fp,12(sp)
  811ae4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  811ae8:	0140dc04 	movi	r5,880
  811aec:	010020b4 	movhi	r4,130
  811af0:	210b2504 	addi	r4,r4,11412
  811af4:	080fd1c0 	call	80fd1c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  811af8:	008020b4 	movhi	r2,130
  811afc:	108b2504 	addi	r2,r2,11412
  811b00:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  811b04:	008020b4 	movhi	r2,130
  811b08:	108b3004 	addi	r2,r2,11456
  811b0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  811b10:	e03ffd0d 	sth	zero,-12(fp)
  811b14:	00001306 	br	811b64 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811b18:	e0bffe17 	ldw	r2,-8(fp)
  811b1c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  811b20:	e0bffe17 	ldw	r2,-8(fp)
  811b24:	e0ffff17 	ldw	r3,-4(fp)
  811b28:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  811b2c:	e0bffe17 	ldw	r2,-8(fp)
  811b30:	00c00fc4 	movi	r3,63
  811b34:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  811b38:	e0bffe17 	ldw	r2,-8(fp)
  811b3c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  811b40:	e0bffe17 	ldw	r2,-8(fp)
  811b44:	10800b04 	addi	r2,r2,44
  811b48:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  811b4c:	e0bfff17 	ldw	r2,-4(fp)
  811b50:	10800b04 	addi	r2,r2,44
  811b54:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  811b58:	e0bffd0b 	ldhu	r2,-12(fp)
  811b5c:	10800044 	addi	r2,r2,1
  811b60:	e0bffd0d 	sth	r2,-12(fp)
  811b64:	e0bffd0b 	ldhu	r2,-12(fp)
  811b68:	108004f0 	cmpltui	r2,r2,19
  811b6c:	103fea1e 	bne	r2,zero,811b18 <__alt_mem_epcs_flash_controller_0+0xff808b18>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811b70:	e0bffe17 	ldw	r2,-8(fp)
  811b74:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  811b78:	e0bffe17 	ldw	r2,-8(fp)
  811b7c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  811b80:	e0bffe17 	ldw	r2,-8(fp)
  811b84:	00c00fc4 	movi	r3,63
  811b88:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  811b8c:	e0bffe17 	ldw	r2,-8(fp)
  811b90:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  811b94:	008020b4 	movhi	r2,130
  811b98:	108b2504 	addi	r2,r2,11412
  811b9c:	d0a07415 	stw	r2,-32304(gp)
#endif
}
  811ba0:	0001883a 	nop
  811ba4:	e037883a 	mov	sp,fp
  811ba8:	dfc00117 	ldw	ra,4(sp)
  811bac:	df000017 	ldw	fp,0(sp)
  811bb0:	dec00204 	addi	sp,sp,8
  811bb4:	f800283a 	ret

00811bb8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  811bb8:	defffa04 	addi	sp,sp,-24
  811bbc:	dfc00515 	stw	ra,20(sp)
  811bc0:	df000415 	stw	fp,16(sp)
  811bc4:	df000404 	addi	fp,sp,16
  811bc8:	e13ffe15 	stw	r4,-8(fp)
  811bcc:	2805883a 	mov	r2,r5
  811bd0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  811bd4:	e0bffe17 	ldw	r2,-8(fp)
  811bd8:	10800217 	ldw	r2,8(r2)
  811bdc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  811be0:	e0bffd17 	ldw	r2,-12(fp)
  811be4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  811be8:	e0bffd17 	ldw	r2,-12(fp)
  811bec:	e0ffff0b 	ldhu	r3,-4(fp)
  811bf0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  811bf4:	e0bffd17 	ldw	r2,-12(fp)
  811bf8:	10c00c03 	ldbu	r3,48(r2)
  811bfc:	00bff7c4 	movi	r2,-33
  811c00:	1884703a 	and	r2,r3,r2
  811c04:	1007883a 	mov	r3,r2
  811c08:	e0bffd17 	ldw	r2,-12(fp)
  811c0c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  811c10:	e0bffd17 	ldw	r2,-12(fp)
  811c14:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  811c18:	e0bffd17 	ldw	r2,-12(fp)
  811c1c:	10800c03 	ldbu	r2,48(r2)
  811c20:	10803fcc 	andi	r2,r2,255
  811c24:	1000181e 	bne	r2,zero,811c88 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  811c28:	e0bffd17 	ldw	r2,-12(fp)
  811c2c:	10c00d83 	ldbu	r3,54(r2)
  811c30:	d0a06f03 	ldbu	r2,-32324(gp)
  811c34:	1884b03a 	or	r2,r3,r2
  811c38:	d0a06f05 	stb	r2,-32324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  811c3c:	e0bffd17 	ldw	r2,-12(fp)
  811c40:	10800d03 	ldbu	r2,52(r2)
  811c44:	10c03fcc 	andi	r3,r2,255
  811c48:	e0bffd17 	ldw	r2,-12(fp)
  811c4c:	10800d03 	ldbu	r2,52(r2)
  811c50:	11003fcc 	andi	r4,r2,255
  811c54:	d0a06f44 	addi	r2,gp,-32323
  811c58:	2085883a 	add	r2,r4,r2
  811c5c:	11000003 	ldbu	r4,0(r2)
  811c60:	e0bffd17 	ldw	r2,-12(fp)
  811c64:	10800d43 	ldbu	r2,53(r2)
  811c68:	2084b03a 	or	r2,r4,r2
  811c6c:	1009883a 	mov	r4,r2
  811c70:	d0a06f44 	addi	r2,gp,-32323
  811c74:	1885883a 	add	r2,r3,r2
  811c78:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  811c7c:	00800044 	movi	r2,1
  811c80:	e0bffc05 	stb	r2,-16(fp)
  811c84:	00000106 	br	811c8c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  811c88:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  811c8c:	e13ffe17 	ldw	r4,-8(fp)
  811c90:	0811cac0 	call	811cac <OS_FlagUnlink>
    return (sched);
  811c94:	e0bffc03 	ldbu	r2,-16(fp)
}
  811c98:	e037883a 	mov	sp,fp
  811c9c:	dfc00117 	ldw	ra,4(sp)
  811ca0:	df000017 	ldw	fp,0(sp)
  811ca4:	dec00204 	addi	sp,sp,8
  811ca8:	f800283a 	ret

00811cac <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  811cac:	defffa04 	addi	sp,sp,-24
  811cb0:	df000515 	stw	fp,20(sp)
  811cb4:	df000504 	addi	fp,sp,20
  811cb8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  811cbc:	e0bfff17 	ldw	r2,-4(fp)
  811cc0:	10800117 	ldw	r2,4(r2)
  811cc4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  811cc8:	e0bfff17 	ldw	r2,-4(fp)
  811ccc:	10800017 	ldw	r2,0(r2)
  811cd0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  811cd4:	e0bffb17 	ldw	r2,-20(fp)
  811cd8:	10000b1e 	bne	r2,zero,811d08 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  811cdc:	e0bfff17 	ldw	r2,-4(fp)
  811ce0:	10800317 	ldw	r2,12(r2)
  811ce4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  811ce8:	e0bffd17 	ldw	r2,-12(fp)
  811cec:	e0fffc17 	ldw	r3,-16(fp)
  811cf0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  811cf4:	e0bffc17 	ldw	r2,-16(fp)
  811cf8:	10000b26 	beq	r2,zero,811d28 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  811cfc:	e0bffc17 	ldw	r2,-16(fp)
  811d00:	10000115 	stw	zero,4(r2)
  811d04:	00000806 	br	811d28 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  811d08:	e0bffb17 	ldw	r2,-20(fp)
  811d0c:	e0fffc17 	ldw	r3,-16(fp)
  811d10:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  811d14:	e0bffc17 	ldw	r2,-16(fp)
  811d18:	10000326 	beq	r2,zero,811d28 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  811d1c:	e0bffc17 	ldw	r2,-16(fp)
  811d20:	e0fffb17 	ldw	r3,-20(fp)
  811d24:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  811d28:	e0bfff17 	ldw	r2,-4(fp)
  811d2c:	10800217 	ldw	r2,8(r2)
  811d30:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  811d34:	e0bffe17 	ldw	r2,-8(fp)
  811d38:	10000a15 	stw	zero,40(r2)
#endif
}
  811d3c:	0001883a 	nop
  811d40:	e037883a 	mov	sp,fp
  811d44:	df000017 	ldw	fp,0(sp)
  811d48:	dec00104 	addi	sp,sp,4
  811d4c:	f800283a 	ret

00811d50 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  811d50:	defff404 	addi	sp,sp,-48
  811d54:	df000b15 	stw	fp,44(sp)
  811d58:	df000b04 	addi	fp,sp,44
  811d5c:	e13ffc15 	stw	r4,-16(fp)
  811d60:	e17ffd15 	stw	r5,-12(fp)
  811d64:	e1bffe15 	stw	r6,-8(fp)
  811d68:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811d6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  811d70:	e0bfff17 	ldw	r2,-4(fp)
  811d74:	1000021e 	bne	r2,zero,811d80 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  811d78:	0005883a 	mov	r2,zero
  811d7c:	00006506 	br	811f14 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  811d80:	e0bffc17 	ldw	r2,-16(fp)
  811d84:	1000051e 	bne	r2,zero,811d9c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  811d88:	e0bfff17 	ldw	r2,-4(fp)
  811d8c:	00c01884 	movi	r3,98
  811d90:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  811d94:	0005883a 	mov	r2,zero
  811d98:	00005e06 	br	811f14 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  811d9c:	e0bffc17 	ldw	r2,-16(fp)
  811da0:	108000cc 	andi	r2,r2,3
  811da4:	10000526 	beq	r2,zero,811dbc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  811da8:	e0bfff17 	ldw	r2,-4(fp)
  811dac:	00c01884 	movi	r3,98
  811db0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  811db4:	0005883a 	mov	r2,zero
  811db8:	00005606 	br	811f14 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  811dbc:	e0bffd17 	ldw	r2,-12(fp)
  811dc0:	108000a8 	cmpgeui	r2,r2,2
  811dc4:	1000051e 	bne	r2,zero,811ddc <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  811dc8:	e0bfff17 	ldw	r2,-4(fp)
  811dcc:	00c016c4 	movi	r3,91
  811dd0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  811dd4:	0005883a 	mov	r2,zero
  811dd8:	00004e06 	br	811f14 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  811ddc:	e0bffe17 	ldw	r2,-8(fp)
  811de0:	10800128 	cmpgeui	r2,r2,4
  811de4:	1000051e 	bne	r2,zero,811dfc <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  811de8:	e0bfff17 	ldw	r2,-4(fp)
  811dec:	00c01704 	movi	r3,92
  811df0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  811df4:	0005883a 	mov	r2,zero
  811df8:	00004606 	br	811f14 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811dfc:	0005303a 	rdctl	r2,status
  811e00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e04:	e0fffb17 	ldw	r3,-20(fp)
  811e08:	00bfff84 	movi	r2,-2
  811e0c:	1884703a 	and	r2,r3,r2
  811e10:	1001703a 	wrctl	status,r2
  
  return context;
  811e14:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811e18:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  811e1c:	d0a06c17 	ldw	r2,-32336(gp)
  811e20:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  811e24:	d0a06c17 	ldw	r2,-32336(gp)
  811e28:	10000326 	beq	r2,zero,811e38 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  811e2c:	d0a06c17 	ldw	r2,-32336(gp)
  811e30:	10800117 	ldw	r2,4(r2)
  811e34:	d0a06c15 	stw	r2,-32336(gp)
  811e38:	e0bff817 	ldw	r2,-32(fp)
  811e3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811e40:	e0bff917 	ldw	r2,-28(fp)
  811e44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  811e48:	e0bffa17 	ldw	r2,-24(fp)
  811e4c:	1000051e 	bne	r2,zero,811e64 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  811e50:	e0bfff17 	ldw	r2,-4(fp)
  811e54:	00c01684 	movi	r3,90
  811e58:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  811e5c:	0005883a 	mov	r2,zero
  811e60:	00002c06 	br	811f14 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  811e64:	e0bffc17 	ldw	r2,-16(fp)
  811e68:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  811e6c:	e0fffc17 	ldw	r3,-16(fp)
  811e70:	e0bffe17 	ldw	r2,-8(fp)
  811e74:	1885883a 	add	r2,r3,r2
  811e78:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  811e7c:	e03ff715 	stw	zero,-36(fp)
  811e80:	00000c06 	br	811eb4 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  811e84:	e0bff617 	ldw	r2,-40(fp)
  811e88:	e0fff517 	ldw	r3,-44(fp)
  811e8c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  811e90:	e0bff517 	ldw	r2,-44(fp)
  811e94:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  811e98:	e0fff517 	ldw	r3,-44(fp)
  811e9c:	e0bffe17 	ldw	r2,-8(fp)
  811ea0:	1885883a 	add	r2,r3,r2
  811ea4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  811ea8:	e0bff717 	ldw	r2,-36(fp)
  811eac:	10800044 	addi	r2,r2,1
  811eb0:	e0bff715 	stw	r2,-36(fp)
  811eb4:	e0bffd17 	ldw	r2,-12(fp)
  811eb8:	10bfffc4 	addi	r2,r2,-1
  811ebc:	e0fff717 	ldw	r3,-36(fp)
  811ec0:	18bff036 	bltu	r3,r2,811e84 <__alt_mem_epcs_flash_controller_0+0xff808e84>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  811ec4:	e0bff617 	ldw	r2,-40(fp)
  811ec8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  811ecc:	e0bffa17 	ldw	r2,-24(fp)
  811ed0:	e0fffc17 	ldw	r3,-16(fp)
  811ed4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  811ed8:	e0bffa17 	ldw	r2,-24(fp)
  811edc:	e0fffc17 	ldw	r3,-16(fp)
  811ee0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  811ee4:	e0bffa17 	ldw	r2,-24(fp)
  811ee8:	e0fffd17 	ldw	r3,-12(fp)
  811eec:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  811ef0:	e0bffa17 	ldw	r2,-24(fp)
  811ef4:	e0fffd17 	ldw	r3,-12(fp)
  811ef8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  811efc:	e0bffa17 	ldw	r2,-24(fp)
  811f00:	e0fffe17 	ldw	r3,-8(fp)
  811f04:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  811f08:	e0bfff17 	ldw	r2,-4(fp)
  811f0c:	10000005 	stb	zero,0(r2)
    return (pmem);
  811f10:	e0bffa17 	ldw	r2,-24(fp)
}
  811f14:	e037883a 	mov	sp,fp
  811f18:	df000017 	ldw	fp,0(sp)
  811f1c:	dec00104 	addi	sp,sp,4
  811f20:	f800283a 	ret

00811f24 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  811f24:	defff804 	addi	sp,sp,-32
  811f28:	df000715 	stw	fp,28(sp)
  811f2c:	df000704 	addi	fp,sp,28
  811f30:	e13ffe15 	stw	r4,-8(fp)
  811f34:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811f38:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  811f3c:	e0bfff17 	ldw	r2,-4(fp)
  811f40:	1000021e 	bne	r2,zero,811f4c <OSMemGet+0x28>
        return ((void *)0);
  811f44:	0005883a 	mov	r2,zero
  811f48:	00002e06 	br	812004 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  811f4c:	e0bffe17 	ldw	r2,-8(fp)
  811f50:	1000051e 	bne	r2,zero,811f68 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811f54:	e0bfff17 	ldw	r2,-4(fp)
  811f58:	00c01804 	movi	r3,96
  811f5c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  811f60:	0005883a 	mov	r2,zero
  811f64:	00002706 	br	812004 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f68:	0005303a 	rdctl	r2,status
  811f6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f70:	e0fffd17 	ldw	r3,-12(fp)
  811f74:	00bfff84 	movi	r2,-2
  811f78:	1884703a 	and	r2,r3,r2
  811f7c:	1001703a 	wrctl	status,r2
  
  return context;
  811f80:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811f84:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  811f88:	e0bffe17 	ldw	r2,-8(fp)
  811f8c:	10800417 	ldw	r2,16(r2)
  811f90:	10001426 	beq	r2,zero,811fe4 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  811f94:	e0bffe17 	ldw	r2,-8(fp)
  811f98:	10800117 	ldw	r2,4(r2)
  811f9c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  811fa0:	e0bffb17 	ldw	r2,-20(fp)
  811fa4:	10c00017 	ldw	r3,0(r2)
  811fa8:	e0bffe17 	ldw	r2,-8(fp)
  811fac:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  811fb0:	e0bffe17 	ldw	r2,-8(fp)
  811fb4:	10800417 	ldw	r2,16(r2)
  811fb8:	10ffffc4 	addi	r3,r2,-1
  811fbc:	e0bffe17 	ldw	r2,-8(fp)
  811fc0:	10c00415 	stw	r3,16(r2)
  811fc4:	e0bff917 	ldw	r2,-28(fp)
  811fc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fcc:	e0bffa17 	ldw	r2,-24(fp)
  811fd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  811fd4:	e0bfff17 	ldw	r2,-4(fp)
  811fd8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  811fdc:	e0bffb17 	ldw	r2,-20(fp)
  811fe0:	00000806 	br	812004 <OSMemGet+0xe0>
  811fe4:	e0bff917 	ldw	r2,-28(fp)
  811fe8:	e0bffc15 	stw	r2,-16(fp)
  811fec:	e0bffc17 	ldw	r2,-16(fp)
  811ff0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  811ff4:	e0bfff17 	ldw	r2,-4(fp)
  811ff8:	00c01744 	movi	r3,93
  811ffc:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  812000:	0005883a 	mov	r2,zero
}
  812004:	e037883a 	mov	sp,fp
  812008:	df000017 	ldw	fp,0(sp)
  81200c:	dec00104 	addi	sp,sp,4
  812010:	f800283a 	ret

00812014 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  812014:	defff704 	addi	sp,sp,-36
  812018:	dfc00815 	stw	ra,32(sp)
  81201c:	df000715 	stw	fp,28(sp)
  812020:	df000704 	addi	fp,sp,28
  812024:	e13ffd15 	stw	r4,-12(fp)
  812028:	e17ffe15 	stw	r5,-8(fp)
  81202c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812030:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812034:	e0bfff17 	ldw	r2,-4(fp)
  812038:	1000021e 	bne	r2,zero,812044 <OSMemNameGet+0x30>
        return (0);
  81203c:	0005883a 	mov	r2,zero
  812040:	00002b06 	br	8120f0 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  812044:	e0bffd17 	ldw	r2,-12(fp)
  812048:	1000051e 	bne	r2,zero,812060 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81204c:	e0bfff17 	ldw	r2,-4(fp)
  812050:	00c01804 	movi	r3,96
  812054:	10c00005 	stb	r3,0(r2)
        return (0);
  812058:	0005883a 	mov	r2,zero
  81205c:	00002406 	br	8120f0 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812060:	e0bffe17 	ldw	r2,-8(fp)
  812064:	1000051e 	bne	r2,zero,81207c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  812068:	e0bfff17 	ldw	r2,-4(fp)
  81206c:	00c00304 	movi	r3,12
  812070:	10c00005 	stb	r3,0(r2)
        return (0);
  812074:	0005883a 	mov	r2,zero
  812078:	00001d06 	br	8120f0 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81207c:	d0a07103 	ldbu	r2,-32316(gp)
  812080:	10803fcc 	andi	r2,r2,255
  812084:	10000526 	beq	r2,zero,81209c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  812088:	e0bfff17 	ldw	r2,-4(fp)
  81208c:	00c00444 	movi	r3,17
  812090:	10c00005 	stb	r3,0(r2)
        return (0);
  812094:	0005883a 	mov	r2,zero
  812098:	00001506 	br	8120f0 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81209c:	0005303a 	rdctl	r2,status
  8120a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120a4:	e0fffb17 	ldw	r3,-20(fp)
  8120a8:	00bfff84 	movi	r2,-2
  8120ac:	1884703a 	and	r2,r3,r2
  8120b0:	1001703a 	wrctl	status,r2
  
  return context;
  8120b4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8120b8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  8120bc:	e0bffd17 	ldw	r2,-12(fp)
  8120c0:	10800504 	addi	r2,r2,20
  8120c4:	100b883a 	mov	r5,r2
  8120c8:	e13ffe17 	ldw	r4,-8(fp)
  8120cc:	080ff1c0 	call	80ff1c <OS_StrCopy>
  8120d0:	e0bffa05 	stb	r2,-24(fp)
  8120d4:	e0bff917 	ldw	r2,-28(fp)
  8120d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120dc:	e0bffc17 	ldw	r2,-16(fp)
  8120e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8120e4:	e0bfff17 	ldw	r2,-4(fp)
  8120e8:	10000005 	stb	zero,0(r2)
    return (len);
  8120ec:	e0bffa03 	ldbu	r2,-24(fp)
}
  8120f0:	e037883a 	mov	sp,fp
  8120f4:	dfc00117 	ldw	ra,4(sp)
  8120f8:	df000017 	ldw	fp,0(sp)
  8120fc:	dec00204 	addi	sp,sp,8
  812100:	f800283a 	ret

00812104 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  812104:	defff604 	addi	sp,sp,-40
  812108:	dfc00915 	stw	ra,36(sp)
  81210c:	df000815 	stw	fp,32(sp)
  812110:	df000804 	addi	fp,sp,32
  812114:	e13ffd15 	stw	r4,-12(fp)
  812118:	e17ffe15 	stw	r5,-8(fp)
  81211c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812120:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812124:	e0bfff17 	ldw	r2,-4(fp)
  812128:	10003526 	beq	r2,zero,812200 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81212c:	e0bffd17 	ldw	r2,-12(fp)
  812130:	1000041e 	bne	r2,zero,812144 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812134:	e0bfff17 	ldw	r2,-4(fp)
  812138:	00c01804 	movi	r3,96
  81213c:	10c00005 	stb	r3,0(r2)
        return;
  812140:	00003006 	br	812204 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812144:	e0bffe17 	ldw	r2,-8(fp)
  812148:	1000041e 	bne	r2,zero,81215c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  81214c:	e0bfff17 	ldw	r2,-4(fp)
  812150:	00c00304 	movi	r3,12
  812154:	10c00005 	stb	r3,0(r2)
        return;
  812158:	00002a06 	br	812204 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81215c:	d0a07103 	ldbu	r2,-32316(gp)
  812160:	10803fcc 	andi	r2,r2,255
  812164:	10000426 	beq	r2,zero,812178 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  812168:	e0bfff17 	ldw	r2,-4(fp)
  81216c:	00c00484 	movi	r3,18
  812170:	10c00005 	stb	r3,0(r2)
        return;
  812174:	00002306 	br	812204 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812178:	0005303a 	rdctl	r2,status
  81217c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812180:	e0fffc17 	ldw	r3,-16(fp)
  812184:	00bfff84 	movi	r2,-2
  812188:	1884703a 	and	r2,r3,r2
  81218c:	1001703a 	wrctl	status,r2
  
  return context;
  812190:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812194:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  812198:	e13ffe17 	ldw	r4,-8(fp)
  81219c:	080ff900 	call	80ff90 <OS_StrLen>
  8121a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  8121a4:	e0bffa03 	ldbu	r2,-24(fp)
  8121a8:	10800830 	cmpltui	r2,r2,32
  8121ac:	1000081e 	bne	r2,zero,8121d0 <OSMemNameSet+0xcc>
  8121b0:	e0bff817 	ldw	r2,-32(fp)
  8121b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121b8:	e0bff917 	ldw	r2,-28(fp)
  8121bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  8121c0:	e0bfff17 	ldw	r2,-4(fp)
  8121c4:	00c018c4 	movi	r3,99
  8121c8:	10c00005 	stb	r3,0(r2)
        return;
  8121cc:	00000d06 	br	812204 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  8121d0:	e0bffd17 	ldw	r2,-12(fp)
  8121d4:	10800504 	addi	r2,r2,20
  8121d8:	e17ffe17 	ldw	r5,-8(fp)
  8121dc:	1009883a 	mov	r4,r2
  8121e0:	080ff1c0 	call	80ff1c <OS_StrCopy>
  8121e4:	e0bff817 	ldw	r2,-32(fp)
  8121e8:	e0bffb15 	stw	r2,-20(fp)
  8121ec:	e0bffb17 	ldw	r2,-20(fp)
  8121f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8121f4:	e0bfff17 	ldw	r2,-4(fp)
  8121f8:	10000005 	stb	zero,0(r2)
  8121fc:	00000106 	br	812204 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  812200:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  812204:	e037883a 	mov	sp,fp
  812208:	dfc00117 	ldw	ra,4(sp)
  81220c:	df000017 	ldw	fp,0(sp)
  812210:	dec00204 	addi	sp,sp,8
  812214:	f800283a 	ret

00812218 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  812218:	defff904 	addi	sp,sp,-28
  81221c:	df000615 	stw	fp,24(sp)
  812220:	df000604 	addi	fp,sp,24
  812224:	e13ffe15 	stw	r4,-8(fp)
  812228:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81222c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  812230:	e0bffe17 	ldw	r2,-8(fp)
  812234:	1000021e 	bne	r2,zero,812240 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  812238:	00801804 	movi	r2,96
  81223c:	00002806 	br	8122e0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  812240:	e0bfff17 	ldw	r2,-4(fp)
  812244:	1000021e 	bne	r2,zero,812250 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  812248:	008017c4 	movi	r2,95
  81224c:	00002406 	br	8122e0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812250:	0005303a 	rdctl	r2,status
  812254:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812258:	e0fffd17 	ldw	r3,-12(fp)
  81225c:	00bfff84 	movi	r2,-2
  812260:	1884703a 	and	r2,r3,r2
  812264:	1001703a 	wrctl	status,r2
  
  return context;
  812268:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81226c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  812270:	e0bffe17 	ldw	r2,-8(fp)
  812274:	10c00417 	ldw	r3,16(r2)
  812278:	e0bffe17 	ldw	r2,-8(fp)
  81227c:	10800317 	ldw	r2,12(r2)
  812280:	18800636 	bltu	r3,r2,81229c <OSMemPut+0x84>
  812284:	e0bffa17 	ldw	r2,-24(fp)
  812288:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81228c:	e0bffb17 	ldw	r2,-20(fp)
  812290:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  812294:	00801784 	movi	r2,94
  812298:	00001106 	br	8122e0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  81229c:	e0bffe17 	ldw	r2,-8(fp)
  8122a0:	10c00117 	ldw	r3,4(r2)
  8122a4:	e0bfff17 	ldw	r2,-4(fp)
  8122a8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  8122ac:	e0bffe17 	ldw	r2,-8(fp)
  8122b0:	e0ffff17 	ldw	r3,-4(fp)
  8122b4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  8122b8:	e0bffe17 	ldw	r2,-8(fp)
  8122bc:	10800417 	ldw	r2,16(r2)
  8122c0:	10c00044 	addi	r3,r2,1
  8122c4:	e0bffe17 	ldw	r2,-8(fp)
  8122c8:	10c00415 	stw	r3,16(r2)
  8122cc:	e0bffa17 	ldw	r2,-24(fp)
  8122d0:	e0bffc15 	stw	r2,-16(fp)
  8122d4:	e0bffc17 	ldw	r2,-16(fp)
  8122d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  8122dc:	0005883a 	mov	r2,zero
}
  8122e0:	e037883a 	mov	sp,fp
  8122e4:	df000017 	ldw	fp,0(sp)
  8122e8:	dec00104 	addi	sp,sp,4
  8122ec:	f800283a 	ret

008122f0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  8122f0:	defffa04 	addi	sp,sp,-24
  8122f4:	df000515 	stw	fp,20(sp)
  8122f8:	df000504 	addi	fp,sp,20
  8122fc:	e13ffe15 	stw	r4,-8(fp)
  812300:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812304:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  812308:	e0bffe17 	ldw	r2,-8(fp)
  81230c:	1000021e 	bne	r2,zero,812318 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  812310:	00801804 	movi	r2,96
  812314:	00002c06 	br	8123c8 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  812318:	e0bfff17 	ldw	r2,-4(fp)
  81231c:	1000021e 	bne	r2,zero,812328 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  812320:	00801844 	movi	r2,97
  812324:	00002806 	br	8123c8 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812328:	0005303a 	rdctl	r2,status
  81232c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812330:	e0fffc17 	ldw	r3,-16(fp)
  812334:	00bfff84 	movi	r2,-2
  812338:	1884703a 	and	r2,r3,r2
  81233c:	1001703a 	wrctl	status,r2
  
  return context;
  812340:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812344:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  812348:	e0bffe17 	ldw	r2,-8(fp)
  81234c:	10c00017 	ldw	r3,0(r2)
  812350:	e0bfff17 	ldw	r2,-4(fp)
  812354:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  812358:	e0bffe17 	ldw	r2,-8(fp)
  81235c:	10c00117 	ldw	r3,4(r2)
  812360:	e0bfff17 	ldw	r2,-4(fp)
  812364:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  812368:	e0bffe17 	ldw	r2,-8(fp)
  81236c:	10c00217 	ldw	r3,8(r2)
  812370:	e0bfff17 	ldw	r2,-4(fp)
  812374:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  812378:	e0bffe17 	ldw	r2,-8(fp)
  81237c:	10c00317 	ldw	r3,12(r2)
  812380:	e0bfff17 	ldw	r2,-4(fp)
  812384:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  812388:	e0bffe17 	ldw	r2,-8(fp)
  81238c:	10c00417 	ldw	r3,16(r2)
  812390:	e0bfff17 	ldw	r2,-4(fp)
  812394:	10c00415 	stw	r3,16(r2)
  812398:	e0bffb17 	ldw	r2,-20(fp)
  81239c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123a0:	e0bffd17 	ldw	r2,-12(fp)
  8123a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  8123a8:	e0bfff17 	ldw	r2,-4(fp)
  8123ac:	10c00317 	ldw	r3,12(r2)
  8123b0:	e0bfff17 	ldw	r2,-4(fp)
  8123b4:	10800417 	ldw	r2,16(r2)
  8123b8:	1887c83a 	sub	r3,r3,r2
  8123bc:	e0bfff17 	ldw	r2,-4(fp)
  8123c0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  8123c4:	0005883a 	mov	r2,zero
}
  8123c8:	e037883a 	mov	sp,fp
  8123cc:	df000017 	ldw	fp,0(sp)
  8123d0:	dec00104 	addi	sp,sp,4
  8123d4:	f800283a 	ret

008123d8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  8123d8:	defffc04 	addi	sp,sp,-16
  8123dc:	dfc00315 	stw	ra,12(sp)
  8123e0:	df000215 	stw	fp,8(sp)
  8123e4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  8123e8:	01430c04 	movi	r5,3120
  8123ec:	010020b4 	movhi	r4,130
  8123f0:	210c0104 	addi	r4,r4,12292
  8123f4:	080fd1c0 	call	80fd1c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  8123f8:	008020b4 	movhi	r2,130
  8123fc:	108c0104 	addi	r2,r2,12292
  812400:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  812404:	e03fff0d 	sth	zero,-4(fp)
  812408:	00001606 	br	812464 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81240c:	e0bfff0b 	ldhu	r2,-4(fp)
  812410:	10800044 	addi	r2,r2,1
  812414:	01400d04 	movi	r5,52
  812418:	1009883a 	mov	r4,r2
  81241c:	080ad7c0 	call	80ad7c <__mulsi3>
  812420:	1007883a 	mov	r3,r2
  812424:	008020b4 	movhi	r2,130
  812428:	108c0104 	addi	r2,r2,12292
  81242c:	1887883a 	add	r3,r3,r2
  812430:	e0bffe17 	ldw	r2,-8(fp)
  812434:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  812438:	e0bffe17 	ldw	r2,-8(fp)
  81243c:	00c00fc4 	movi	r3,63
  812440:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  812444:	e0bffe17 	ldw	r2,-8(fp)
  812448:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  81244c:	e0bffe17 	ldw	r2,-8(fp)
  812450:	10800d04 	addi	r2,r2,52
  812454:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  812458:	e0bfff0b 	ldhu	r2,-4(fp)
  81245c:	10800044 	addi	r2,r2,1
  812460:	e0bfff0d 	sth	r2,-4(fp)
  812464:	e0bfff0b 	ldhu	r2,-4(fp)
  812468:	10800ef0 	cmpltui	r2,r2,59
  81246c:	103fe71e 	bne	r2,zero,81240c <__alt_mem_epcs_flash_controller_0+0xff80940c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  812470:	e0bffe17 	ldw	r2,-8(fp)
  812474:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  812478:	e0bffe17 	ldw	r2,-8(fp)
  81247c:	00c00fc4 	movi	r3,63
  812480:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  812484:	e0bffe17 	ldw	r2,-8(fp)
  812488:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  81248c:	008020b4 	movhi	r2,130
  812490:	108c0104 	addi	r2,r2,12292
  812494:	d0a06c15 	stw	r2,-32336(gp)
#endif
}
  812498:	0001883a 	nop
  81249c:	e037883a 	mov	sp,fp
  8124a0:	dfc00117 	ldw	ra,4(sp)
  8124a4:	df000017 	ldw	fp,0(sp)
  8124a8:	dec00204 	addi	sp,sp,8
  8124ac:	f800283a 	ret

008124b0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  8124b0:	defff804 	addi	sp,sp,-32
  8124b4:	df000715 	stw	fp,28(sp)
  8124b8:	df000704 	addi	fp,sp,28
  8124bc:	e13ffe15 	stw	r4,-8(fp)
  8124c0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8124c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8124c8:	e0bfff17 	ldw	r2,-4(fp)
  8124cc:	1000021e 	bne	r2,zero,8124d8 <OSQAccept+0x28>
        return ((void *)0);
  8124d0:	0005883a 	mov	r2,zero
  8124d4:	00004206 	br	8125e0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8124d8:	e0bffe17 	ldw	r2,-8(fp)
  8124dc:	1000051e 	bne	r2,zero,8124f4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8124e0:	e0bfff17 	ldw	r2,-4(fp)
  8124e4:	00c00104 	movi	r3,4
  8124e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8124ec:	0005883a 	mov	r2,zero
  8124f0:	00003b06 	br	8125e0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  8124f4:	e0bffe17 	ldw	r2,-8(fp)
  8124f8:	10800003 	ldbu	r2,0(r2)
  8124fc:	10803fcc 	andi	r2,r2,255
  812500:	108000a0 	cmpeqi	r2,r2,2
  812504:	1000051e 	bne	r2,zero,81251c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  812508:	e0bfff17 	ldw	r2,-4(fp)
  81250c:	00c00044 	movi	r3,1
  812510:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812514:	0005883a 	mov	r2,zero
  812518:	00003106 	br	8125e0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81251c:	0005303a 	rdctl	r2,status
  812520:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812524:	e0fffd17 	ldw	r3,-12(fp)
  812528:	00bfff84 	movi	r2,-2
  81252c:	1884703a 	and	r2,r3,r2
  812530:	1001703a 	wrctl	status,r2
  
  return context;
  812534:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  812538:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81253c:	e0bffe17 	ldw	r2,-8(fp)
  812540:	10800117 	ldw	r2,4(r2)
  812544:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  812548:	e0bffc17 	ldw	r2,-16(fp)
  81254c:	1080058b 	ldhu	r2,22(r2)
  812550:	10bfffcc 	andi	r2,r2,65535
  812554:	10001926 	beq	r2,zero,8125bc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  812558:	e0bffc17 	ldw	r2,-16(fp)
  81255c:	10800417 	ldw	r2,16(r2)
  812560:	11000104 	addi	r4,r2,4
  812564:	e0fffc17 	ldw	r3,-16(fp)
  812568:	19000415 	stw	r4,16(r3)
  81256c:	10800017 	ldw	r2,0(r2)
  812570:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  812574:	e0bffc17 	ldw	r2,-16(fp)
  812578:	1080058b 	ldhu	r2,22(r2)
  81257c:	10bfffc4 	addi	r2,r2,-1
  812580:	1007883a 	mov	r3,r2
  812584:	e0bffc17 	ldw	r2,-16(fp)
  812588:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81258c:	e0bffc17 	ldw	r2,-16(fp)
  812590:	10c00417 	ldw	r3,16(r2)
  812594:	e0bffc17 	ldw	r2,-16(fp)
  812598:	10800217 	ldw	r2,8(r2)
  81259c:	1880041e 	bne	r3,r2,8125b0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  8125a0:	e0bffc17 	ldw	r2,-16(fp)
  8125a4:	10c00117 	ldw	r3,4(r2)
  8125a8:	e0bffc17 	ldw	r2,-16(fp)
  8125ac:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  8125b0:	e0bfff17 	ldw	r2,-4(fp)
  8125b4:	10000005 	stb	zero,0(r2)
  8125b8:	00000406 	br	8125cc <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  8125bc:	e0bfff17 	ldw	r2,-4(fp)
  8125c0:	00c007c4 	movi	r3,31
  8125c4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  8125c8:	e03ff915 	stw	zero,-28(fp)
  8125cc:	e0bffa17 	ldw	r2,-24(fp)
  8125d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125d4:	e0bffb17 	ldw	r2,-20(fp)
  8125d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  8125dc:	e0bff917 	ldw	r2,-28(fp)
}
  8125e0:	e037883a 	mov	sp,fp
  8125e4:	df000017 	ldw	fp,0(sp)
  8125e8:	dec00104 	addi	sp,sp,4
  8125ec:	f800283a 	ret

008125f0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  8125f0:	defff404 	addi	sp,sp,-48
  8125f4:	dfc00b15 	stw	ra,44(sp)
  8125f8:	df000a15 	stw	fp,40(sp)
  8125fc:	df000a04 	addi	fp,sp,40
  812600:	e13ffe15 	stw	r4,-8(fp)
  812604:	2805883a 	mov	r2,r5
  812608:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81260c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  812610:	d0a07103 	ldbu	r2,-32316(gp)
  812614:	10803fcc 	andi	r2,r2,255
  812618:	10000226 	beq	r2,zero,812624 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81261c:	0005883a 	mov	r2,zero
  812620:	00005906 	br	812788 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812624:	0005303a 	rdctl	r2,status
  812628:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81262c:	e0fffd17 	ldw	r3,-12(fp)
  812630:	00bfff84 	movi	r2,-2
  812634:	1884703a 	and	r2,r3,r2
  812638:	1001703a 	wrctl	status,r2
  
  return context;
  81263c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  812640:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  812644:	d0a07017 	ldw	r2,-32320(gp)
  812648:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81264c:	d0a07017 	ldw	r2,-32320(gp)
  812650:	10000326 	beq	r2,zero,812660 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  812654:	d0a07017 	ldw	r2,-32320(gp)
  812658:	10800117 	ldw	r2,4(r2)
  81265c:	d0a07015 	stw	r2,-32320(gp)
  812660:	e0bff717 	ldw	r2,-36(fp)
  812664:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812668:	e0bff817 	ldw	r2,-32(fp)
  81266c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  812670:	e0bff617 	ldw	r2,-40(fp)
  812674:	10004326 	beq	r2,zero,812784 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812678:	0005303a 	rdctl	r2,status
  81267c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812680:	e0fff917 	ldw	r3,-28(fp)
  812684:	00bfff84 	movi	r2,-2
  812688:	1884703a 	and	r2,r3,r2
  81268c:	1001703a 	wrctl	status,r2
  
  return context;
  812690:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  812694:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  812698:	d0a06e17 	ldw	r2,-32328(gp)
  81269c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  8126a0:	e0bffb17 	ldw	r2,-20(fp)
  8126a4:	10002d26 	beq	r2,zero,81275c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  8126a8:	d0a06e17 	ldw	r2,-32328(gp)
  8126ac:	10800017 	ldw	r2,0(r2)
  8126b0:	d0a06e15 	stw	r2,-32328(gp)
  8126b4:	e0bff717 	ldw	r2,-36(fp)
  8126b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8126bc:	e0bffa17 	ldw	r2,-24(fp)
  8126c0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  8126c4:	e0bffb17 	ldw	r2,-20(fp)
  8126c8:	e0fffe17 	ldw	r3,-8(fp)
  8126cc:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  8126d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8126d4:	1085883a 	add	r2,r2,r2
  8126d8:	1085883a 	add	r2,r2,r2
  8126dc:	1007883a 	mov	r3,r2
  8126e0:	e0bffe17 	ldw	r2,-8(fp)
  8126e4:	10c7883a 	add	r3,r2,r3
  8126e8:	e0bffb17 	ldw	r2,-20(fp)
  8126ec:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  8126f0:	e0bffb17 	ldw	r2,-20(fp)
  8126f4:	e0fffe17 	ldw	r3,-8(fp)
  8126f8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  8126fc:	e0bffb17 	ldw	r2,-20(fp)
  812700:	e0fffe17 	ldw	r3,-8(fp)
  812704:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  812708:	e0bffb17 	ldw	r2,-20(fp)
  81270c:	e0ffff0b 	ldhu	r3,-4(fp)
  812710:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  812714:	e0bffb17 	ldw	r2,-20(fp)
  812718:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  81271c:	e0bff617 	ldw	r2,-40(fp)
  812720:	00c00084 	movi	r3,2
  812724:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  812728:	e0bff617 	ldw	r2,-40(fp)
  81272c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  812730:	e0bff617 	ldw	r2,-40(fp)
  812734:	e0fffb17 	ldw	r3,-20(fp)
  812738:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  81273c:	e0bff617 	ldw	r2,-40(fp)
  812740:	00c00fc4 	movi	r3,63
  812744:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  812748:	e0bff617 	ldw	r2,-40(fp)
  81274c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  812750:	e13ff617 	ldw	r4,-40(fp)
  812754:	080f93c0 	call	80f93c <OS_EventWaitListInit>
  812758:	00000a06 	br	812784 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  81275c:	d0e07017 	ldw	r3,-32320(gp)
  812760:	e0bff617 	ldw	r2,-40(fp)
  812764:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  812768:	e0bff617 	ldw	r2,-40(fp)
  81276c:	d0a07015 	stw	r2,-32320(gp)
  812770:	e0bff717 	ldw	r2,-36(fp)
  812774:	e0bffc15 	stw	r2,-16(fp)
  812778:	e0bffc17 	ldw	r2,-16(fp)
  81277c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  812780:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  812784:	e0bff617 	ldw	r2,-40(fp)
}
  812788:	e037883a 	mov	sp,fp
  81278c:	dfc00117 	ldw	ra,4(sp)
  812790:	df000017 	ldw	fp,0(sp)
  812794:	dec00204 	addi	sp,sp,8
  812798:	f800283a 	ret

0081279c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81279c:	defff204 	addi	sp,sp,-56
  8127a0:	dfc00d15 	stw	ra,52(sp)
  8127a4:	df000c15 	stw	fp,48(sp)
  8127a8:	df000c04 	addi	fp,sp,48
  8127ac:	e13ffd15 	stw	r4,-12(fp)
  8127b0:	2805883a 	mov	r2,r5
  8127b4:	e1bfff15 	stw	r6,-4(fp)
  8127b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8127bc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8127c0:	e0bfff17 	ldw	r2,-4(fp)
  8127c4:	1000021e 	bne	r2,zero,8127d0 <OSQDel+0x34>
        return (pevent);
  8127c8:	e0bffd17 	ldw	r2,-12(fp)
  8127cc:	00008e06 	br	812a08 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8127d0:	e0bffd17 	ldw	r2,-12(fp)
  8127d4:	1000051e 	bne	r2,zero,8127ec <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8127d8:	e0bfff17 	ldw	r2,-4(fp)
  8127dc:	00c00104 	movi	r3,4
  8127e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8127e4:	e0bffd17 	ldw	r2,-12(fp)
  8127e8:	00008706 	br	812a08 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  8127ec:	e0bffd17 	ldw	r2,-12(fp)
  8127f0:	10800003 	ldbu	r2,0(r2)
  8127f4:	10803fcc 	andi	r2,r2,255
  8127f8:	108000a0 	cmpeqi	r2,r2,2
  8127fc:	1000051e 	bne	r2,zero,812814 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  812800:	e0bfff17 	ldw	r2,-4(fp)
  812804:	00c00044 	movi	r3,1
  812808:	10c00005 	stb	r3,0(r2)
        return (pevent);
  81280c:	e0bffd17 	ldw	r2,-12(fp)
  812810:	00007d06 	br	812a08 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  812814:	d0a07103 	ldbu	r2,-32316(gp)
  812818:	10803fcc 	andi	r2,r2,255
  81281c:	10000526 	beq	r2,zero,812834 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  812820:	e0bfff17 	ldw	r2,-4(fp)
  812824:	00c003c4 	movi	r3,15
  812828:	10c00005 	stb	r3,0(r2)
        return (pevent);
  81282c:	e0bffd17 	ldw	r2,-12(fp)
  812830:	00007506 	br	812a08 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812834:	0005303a 	rdctl	r2,status
  812838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81283c:	e0fffc17 	ldw	r3,-16(fp)
  812840:	00bfff84 	movi	r2,-2
  812844:	1884703a 	and	r2,r3,r2
  812848:	1001703a 	wrctl	status,r2
  
  return context;
  81284c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812850:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  812854:	e0bffd17 	ldw	r2,-12(fp)
  812858:	10800283 	ldbu	r2,10(r2)
  81285c:	10803fcc 	andi	r2,r2,255
  812860:	10000326 	beq	r2,zero,812870 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  812864:	00800044 	movi	r2,1
  812868:	e0bff405 	stb	r2,-48(fp)
  81286c:	00000106 	br	812874 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  812870:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  812874:	e0bffe03 	ldbu	r2,-8(fp)
  812878:	10000326 	beq	r2,zero,812888 <OSQDel+0xec>
  81287c:	10800060 	cmpeqi	r2,r2,1
  812880:	1000301e 	bne	r2,zero,812944 <OSQDel+0x1a8>
  812884:	00005506 	br	8129dc <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  812888:	e0bff403 	ldbu	r2,-48(fp)
  81288c:	10001e1e 	bne	r2,zero,812908 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  812890:	e0bffd17 	ldw	r2,-12(fp)
  812894:	00c00fc4 	movi	r3,63
  812898:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81289c:	e0bffd17 	ldw	r2,-12(fp)
  8128a0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8128a4:	e0bffd17 	ldw	r2,-12(fp)
  8128a8:	10800117 	ldw	r2,4(r2)
  8128ac:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8128b0:	d0e06e17 	ldw	r3,-32328(gp)
  8128b4:	e0bff817 	ldw	r2,-32(fp)
  8128b8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  8128bc:	e0bff817 	ldw	r2,-32(fp)
  8128c0:	d0a06e15 	stw	r2,-32328(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8128c4:	e0bffd17 	ldw	r2,-12(fp)
  8128c8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8128cc:	d0e07017 	ldw	r3,-32320(gp)
  8128d0:	e0bffd17 	ldw	r2,-12(fp)
  8128d4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8128d8:	e0bffd17 	ldw	r2,-12(fp)
  8128dc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  8128e0:	e0bffd17 	ldw	r2,-12(fp)
  8128e4:	d0a07015 	stw	r2,-32320(gp)
  8128e8:	e0bff617 	ldw	r2,-40(fp)
  8128ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8128f0:	e0bff717 	ldw	r2,-36(fp)
  8128f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  8128f8:	e0bfff17 	ldw	r2,-4(fp)
  8128fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  812900:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  812904:	00003f06 	br	812a04 <OSQDel+0x268>
  812908:	e0bff617 	ldw	r2,-40(fp)
  81290c:	e0bff915 	stw	r2,-28(fp)
  812910:	e0bff917 	ldw	r2,-28(fp)
  812914:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  812918:	e0bfff17 	ldw	r2,-4(fp)
  81291c:	00c01244 	movi	r3,73
  812920:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  812924:	e0bffd17 	ldw	r2,-12(fp)
  812928:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  81292c:	00003506 	br	812a04 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  812930:	000f883a 	mov	r7,zero
  812934:	01800104 	movi	r6,4
  812938:	000b883a 	mov	r5,zero
  81293c:	e13ffd17 	ldw	r4,-12(fp)
  812940:	080f38c0 	call	80f38c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  812944:	e0bffd17 	ldw	r2,-12(fp)
  812948:	10800283 	ldbu	r2,10(r2)
  81294c:	10803fcc 	andi	r2,r2,255
  812950:	103ff71e 	bne	r2,zero,812930 <__alt_mem_epcs_flash_controller_0+0xff809930>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  812954:	e0bffd17 	ldw	r2,-12(fp)
  812958:	00c00fc4 	movi	r3,63
  81295c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  812960:	e0bffd17 	ldw	r2,-12(fp)
  812964:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  812968:	e0bffd17 	ldw	r2,-12(fp)
  81296c:	10800117 	ldw	r2,4(r2)
  812970:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  812974:	d0e06e17 	ldw	r3,-32328(gp)
  812978:	e0bff817 	ldw	r2,-32(fp)
  81297c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  812980:	e0bff817 	ldw	r2,-32(fp)
  812984:	d0a06e15 	stw	r2,-32328(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  812990:	d0e07017 	ldw	r3,-32320(gp)
  812994:	e0bffd17 	ldw	r2,-12(fp)
  812998:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81299c:	e0bffd17 	ldw	r2,-12(fp)
  8129a0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8129a4:	e0bffd17 	ldw	r2,-12(fp)
  8129a8:	d0a07015 	stw	r2,-32320(gp)
  8129ac:	e0bff617 	ldw	r2,-40(fp)
  8129b0:	e0bffa15 	stw	r2,-24(fp)
  8129b4:	e0bffa17 	ldw	r2,-24(fp)
  8129b8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8129bc:	e0bff403 	ldbu	r2,-48(fp)
  8129c0:	10800058 	cmpnei	r2,r2,1
  8129c4:	1000011e 	bne	r2,zero,8129cc <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8129c8:	080fdd80 	call	80fdd8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8129cc:	e0bfff17 	ldw	r2,-4(fp)
  8129d0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  8129d4:	e03ff515 	stw	zero,-44(fp)
             break;
  8129d8:	00000a06 	br	812a04 <OSQDel+0x268>
  8129dc:	e0bff617 	ldw	r2,-40(fp)
  8129e0:	e0bffb15 	stw	r2,-20(fp)
  8129e4:	e0bffb17 	ldw	r2,-20(fp)
  8129e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8129ec:	e0bfff17 	ldw	r2,-4(fp)
  8129f0:	00c001c4 	movi	r3,7
  8129f4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  8129f8:	e0bffd17 	ldw	r2,-12(fp)
  8129fc:	e0bff515 	stw	r2,-44(fp)
             break;
  812a00:	0001883a 	nop
    }
    return (pevent_return);
  812a04:	e0bff517 	ldw	r2,-44(fp)
}
  812a08:	e037883a 	mov	sp,fp
  812a0c:	dfc00117 	ldw	ra,4(sp)
  812a10:	df000017 	ldw	fp,0(sp)
  812a14:	dec00204 	addi	sp,sp,8
  812a18:	f800283a 	ret

00812a1c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  812a1c:	defffa04 	addi	sp,sp,-24
  812a20:	df000515 	stw	fp,20(sp)
  812a24:	df000504 	addi	fp,sp,20
  812a28:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812a2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812a30:	e0bfff17 	ldw	r2,-4(fp)
  812a34:	1000021e 	bne	r2,zero,812a40 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  812a38:	00800104 	movi	r2,4
  812a3c:	00002106 	br	812ac4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  812a40:	e0bfff17 	ldw	r2,-4(fp)
  812a44:	10800003 	ldbu	r2,0(r2)
  812a48:	10803fcc 	andi	r2,r2,255
  812a4c:	108000a0 	cmpeqi	r2,r2,2
  812a50:	1000021e 	bne	r2,zero,812a5c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  812a54:	00800044 	movi	r2,1
  812a58:	00001a06 	br	812ac4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a5c:	0005303a 	rdctl	r2,status
  812a60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a64:	e0fffd17 	ldw	r3,-12(fp)
  812a68:	00bfff84 	movi	r2,-2
  812a6c:	1884703a 	and	r2,r3,r2
  812a70:	1001703a 	wrctl	status,r2
  
  return context;
  812a74:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812a78:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  812a7c:	e0bfff17 	ldw	r2,-4(fp)
  812a80:	10800117 	ldw	r2,4(r2)
  812a84:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  812a88:	e0bffc17 	ldw	r2,-16(fp)
  812a8c:	10c00117 	ldw	r3,4(r2)
  812a90:	e0bffc17 	ldw	r2,-16(fp)
  812a94:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  812a98:	e0bffc17 	ldw	r2,-16(fp)
  812a9c:	10c00117 	ldw	r3,4(r2)
  812aa0:	e0bffc17 	ldw	r2,-16(fp)
  812aa4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  812aa8:	e0bffc17 	ldw	r2,-16(fp)
  812aac:	1000058d 	sth	zero,22(r2)
  812ab0:	e0bffb17 	ldw	r2,-20(fp)
  812ab4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ab8:	e0bffe17 	ldw	r2,-8(fp)
  812abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812ac0:	0005883a 	mov	r2,zero
}
  812ac4:	e037883a 	mov	sp,fp
  812ac8:	df000017 	ldw	fp,0(sp)
  812acc:	dec00104 	addi	sp,sp,4
  812ad0:	f800283a 	ret

00812ad4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  812ad4:	defff304 	addi	sp,sp,-52
  812ad8:	dfc00c15 	stw	ra,48(sp)
  812adc:	df000b15 	stw	fp,44(sp)
  812ae0:	df000b04 	addi	fp,sp,44
  812ae4:	e13ffd15 	stw	r4,-12(fp)
  812ae8:	2805883a 	mov	r2,r5
  812aec:	e1bfff15 	stw	r6,-4(fp)
  812af0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812af4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812af8:	e0bfff17 	ldw	r2,-4(fp)
  812afc:	1000021e 	bne	r2,zero,812b08 <OSQPend+0x34>
        return ((void *)0);
  812b00:	0005883a 	mov	r2,zero
  812b04:	00009106 	br	812d4c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  812b08:	e0bffd17 	ldw	r2,-12(fp)
  812b0c:	1000051e 	bne	r2,zero,812b24 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  812b10:	e0bfff17 	ldw	r2,-4(fp)
  812b14:	00c00104 	movi	r3,4
  812b18:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812b1c:	0005883a 	mov	r2,zero
  812b20:	00008a06 	br	812d4c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  812b24:	e0bffd17 	ldw	r2,-12(fp)
  812b28:	10800003 	ldbu	r2,0(r2)
  812b2c:	10803fcc 	andi	r2,r2,255
  812b30:	108000a0 	cmpeqi	r2,r2,2
  812b34:	1000051e 	bne	r2,zero,812b4c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  812b38:	e0bfff17 	ldw	r2,-4(fp)
  812b3c:	00c00044 	movi	r3,1
  812b40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812b44:	0005883a 	mov	r2,zero
  812b48:	00008006 	br	812d4c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  812b4c:	d0a07103 	ldbu	r2,-32316(gp)
  812b50:	10803fcc 	andi	r2,r2,255
  812b54:	10000526 	beq	r2,zero,812b6c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  812b58:	e0bfff17 	ldw	r2,-4(fp)
  812b5c:	00c00084 	movi	r3,2
  812b60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812b64:	0005883a 	mov	r2,zero
  812b68:	00007806 	br	812d4c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  812b6c:	d0a06303 	ldbu	r2,-32372(gp)
  812b70:	10803fcc 	andi	r2,r2,255
  812b74:	10000526 	beq	r2,zero,812b8c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  812b78:	e0bfff17 	ldw	r2,-4(fp)
  812b7c:	00c00344 	movi	r3,13
  812b80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812b84:	0005883a 	mov	r2,zero
  812b88:	00007006 	br	812d4c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b8c:	0005303a 	rdctl	r2,status
  812b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b94:	e0fffc17 	ldw	r3,-16(fp)
  812b98:	00bfff84 	movi	r2,-2
  812b9c:	1884703a 	and	r2,r3,r2
  812ba0:	1001703a 	wrctl	status,r2
  
  return context;
  812ba4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812ba8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  812bac:	e0bffd17 	ldw	r2,-12(fp)
  812bb0:	10800117 	ldw	r2,4(r2)
  812bb4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  812bb8:	e0bff817 	ldw	r2,-32(fp)
  812bbc:	1080058b 	ldhu	r2,22(r2)
  812bc0:	10bfffcc 	andi	r2,r2,65535
  812bc4:	10001e26 	beq	r2,zero,812c40 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  812bc8:	e0bff817 	ldw	r2,-32(fp)
  812bcc:	10800417 	ldw	r2,16(r2)
  812bd0:	11000104 	addi	r4,r2,4
  812bd4:	e0fff817 	ldw	r3,-32(fp)
  812bd8:	19000415 	stw	r4,16(r3)
  812bdc:	10800017 	ldw	r2,0(r2)
  812be0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  812be4:	e0bff817 	ldw	r2,-32(fp)
  812be8:	1080058b 	ldhu	r2,22(r2)
  812bec:	10bfffc4 	addi	r2,r2,-1
  812bf0:	1007883a 	mov	r3,r2
  812bf4:	e0bff817 	ldw	r2,-32(fp)
  812bf8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  812bfc:	e0bff817 	ldw	r2,-32(fp)
  812c00:	10c00417 	ldw	r3,16(r2)
  812c04:	e0bff817 	ldw	r2,-32(fp)
  812c08:	10800217 	ldw	r2,8(r2)
  812c0c:	1880041e 	bne	r3,r2,812c20 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  812c10:	e0bff817 	ldw	r2,-32(fp)
  812c14:	10c00117 	ldw	r3,4(r2)
  812c18:	e0bff817 	ldw	r2,-32(fp)
  812c1c:	10c00415 	stw	r3,16(r2)
  812c20:	e0bff617 	ldw	r2,-40(fp)
  812c24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c28:	e0bff717 	ldw	r2,-36(fp)
  812c2c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  812c30:	e0bfff17 	ldw	r2,-4(fp)
  812c34:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  812c38:	e0bff517 	ldw	r2,-44(fp)
  812c3c:	00004306 	br	812d4c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  812c40:	d0a07217 	ldw	r2,-32312(gp)
  812c44:	d0e07217 	ldw	r3,-32312(gp)
  812c48:	18c00c03 	ldbu	r3,48(r3)
  812c4c:	18c00114 	ori	r3,r3,4
  812c50:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  812c54:	d0a07217 	ldw	r2,-32312(gp)
  812c58:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  812c5c:	d0a07217 	ldw	r2,-32312(gp)
  812c60:	e0fffe0b 	ldhu	r3,-8(fp)
  812c64:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  812c68:	e13ffd17 	ldw	r4,-12(fp)
  812c6c:	080f5240 	call	80f524 <OS_EventTaskWait>
  812c70:	e0bff617 	ldw	r2,-40(fp)
  812c74:	e0bffb15 	stw	r2,-20(fp)
  812c78:	e0bffb17 	ldw	r2,-20(fp)
  812c7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  812c80:	080fdd80 	call	80fdd8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c84:	0005303a 	rdctl	r2,status
  812c88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c8c:	e0fff917 	ldw	r3,-28(fp)
  812c90:	00bfff84 	movi	r2,-2
  812c94:	1884703a 	and	r2,r3,r2
  812c98:	1001703a 	wrctl	status,r2
  
  return context;
  812c9c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  812ca0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  812ca4:	d0a07217 	ldw	r2,-32312(gp)
  812ca8:	10800c43 	ldbu	r2,49(r2)
  812cac:	10803fcc 	andi	r2,r2,255
  812cb0:	10000326 	beq	r2,zero,812cc0 <OSQPend+0x1ec>
  812cb4:	108000a0 	cmpeqi	r2,r2,2
  812cb8:	1000071e 	bne	r2,zero,812cd8 <OSQPend+0x204>
  812cbc:	00000b06 	br	812cec <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  812cc0:	d0a07217 	ldw	r2,-32312(gp)
  812cc4:	10800917 	ldw	r2,36(r2)
  812cc8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  812ccc:	e0bfff17 	ldw	r2,-4(fp)
  812cd0:	10000005 	stb	zero,0(r2)
             break;
  812cd4:	00000e06 	br	812d10 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  812cd8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  812cdc:	e0bfff17 	ldw	r2,-4(fp)
  812ce0:	00c00384 	movi	r3,14
  812ce4:	10c00005 	stb	r3,0(r2)
             break;
  812ce8:	00000906 	br	812d10 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  812cec:	d0a07217 	ldw	r2,-32312(gp)
  812cf0:	e17ffd17 	ldw	r5,-12(fp)
  812cf4:	1009883a 	mov	r4,r2
  812cf8:	080f7840 	call	80f784 <OS_EventTaskRemove>
             pmsg = (void *)0;
  812cfc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  812d00:	e0bfff17 	ldw	r2,-4(fp)
  812d04:	00c00284 	movi	r3,10
  812d08:	10c00005 	stb	r3,0(r2)
             break;
  812d0c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  812d10:	d0a07217 	ldw	r2,-32312(gp)
  812d14:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  812d18:	d0a07217 	ldw	r2,-32312(gp)
  812d1c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  812d20:	d0a07217 	ldw	r2,-32312(gp)
  812d24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  812d28:	d0a07217 	ldw	r2,-32312(gp)
  812d2c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  812d30:	d0a07217 	ldw	r2,-32312(gp)
  812d34:	10000915 	stw	zero,36(r2)
  812d38:	e0bff617 	ldw	r2,-40(fp)
  812d3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d40:	e0bffa17 	ldw	r2,-24(fp)
  812d44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  812d48:	e0bff517 	ldw	r2,-44(fp)
}
  812d4c:	e037883a 	mov	sp,fp
  812d50:	dfc00117 	ldw	ra,4(sp)
  812d54:	df000017 	ldw	fp,0(sp)
  812d58:	dec00204 	addi	sp,sp,8
  812d5c:	f800283a 	ret

00812d60 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812d60:	defff604 	addi	sp,sp,-40
  812d64:	dfc00915 	stw	ra,36(sp)
  812d68:	df000815 	stw	fp,32(sp)
  812d6c:	df000804 	addi	fp,sp,32
  812d70:	e13ffd15 	stw	r4,-12(fp)
  812d74:	2805883a 	mov	r2,r5
  812d78:	e1bfff15 	stw	r6,-4(fp)
  812d7c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812d80:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812d84:	e0bfff17 	ldw	r2,-4(fp)
  812d88:	1000021e 	bne	r2,zero,812d94 <OSQPendAbort+0x34>
        return (0);
  812d8c:	0005883a 	mov	r2,zero
  812d90:	00004906 	br	812eb8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812d94:	e0bffd17 	ldw	r2,-12(fp)
  812d98:	1000051e 	bne	r2,zero,812db0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  812d9c:	e0bfff17 	ldw	r2,-4(fp)
  812da0:	00c00104 	movi	r3,4
  812da4:	10c00005 	stb	r3,0(r2)
        return (0);
  812da8:	0005883a 	mov	r2,zero
  812dac:	00004206 	br	812eb8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  812db0:	e0bffd17 	ldw	r2,-12(fp)
  812db4:	10800003 	ldbu	r2,0(r2)
  812db8:	10803fcc 	andi	r2,r2,255
  812dbc:	108000a0 	cmpeqi	r2,r2,2
  812dc0:	1000051e 	bne	r2,zero,812dd8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  812dc4:	e0bfff17 	ldw	r2,-4(fp)
  812dc8:	00c00044 	movi	r3,1
  812dcc:	10c00005 	stb	r3,0(r2)
        return (0);
  812dd0:	0005883a 	mov	r2,zero
  812dd4:	00003806 	br	812eb8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812dd8:	0005303a 	rdctl	r2,status
  812ddc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812de0:	e0fffc17 	ldw	r3,-16(fp)
  812de4:	00bfff84 	movi	r2,-2
  812de8:	1884703a 	and	r2,r3,r2
  812dec:	1001703a 	wrctl	status,r2
  
  return context;
  812df0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812df4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  812df8:	e0bffd17 	ldw	r2,-12(fp)
  812dfc:	10800283 	ldbu	r2,10(r2)
  812e00:	10803fcc 	andi	r2,r2,255
  812e04:	10002526 	beq	r2,zero,812e9c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  812e08:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  812e0c:	e0bffe03 	ldbu	r2,-8(fp)
  812e10:	10800060 	cmpeqi	r2,r2,1
  812e14:	10000e26 	beq	r2,zero,812e50 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  812e18:	00000806 	br	812e3c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  812e1c:	01c00084 	movi	r7,2
  812e20:	01800104 	movi	r6,4
  812e24:	000b883a 	mov	r5,zero
  812e28:	e13ffd17 	ldw	r4,-12(fp)
  812e2c:	080f38c0 	call	80f38c <OS_EventTaskRdy>
                     nbr_tasks++;
  812e30:	e0bff803 	ldbu	r2,-32(fp)
  812e34:	10800044 	addi	r2,r2,1
  812e38:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  812e3c:	e0bffd17 	ldw	r2,-12(fp)
  812e40:	10800283 	ldbu	r2,10(r2)
  812e44:	10803fcc 	andi	r2,r2,255
  812e48:	103ff41e 	bne	r2,zero,812e1c <__alt_mem_epcs_flash_controller_0+0xff809e1c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  812e4c:	00000906 	br	812e74 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  812e50:	01c00084 	movi	r7,2
  812e54:	01800104 	movi	r6,4
  812e58:	000b883a 	mov	r5,zero
  812e5c:	e13ffd17 	ldw	r4,-12(fp)
  812e60:	080f38c0 	call	80f38c <OS_EventTaskRdy>
                 nbr_tasks++;
  812e64:	e0bff803 	ldbu	r2,-32(fp)
  812e68:	10800044 	addi	r2,r2,1
  812e6c:	e0bff805 	stb	r2,-32(fp)
                 break;
  812e70:	0001883a 	nop
  812e74:	e0bff917 	ldw	r2,-28(fp)
  812e78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e7c:	e0bffa17 	ldw	r2,-24(fp)
  812e80:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  812e84:	080fdd80 	call	80fdd8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  812e88:	e0bfff17 	ldw	r2,-4(fp)
  812e8c:	00c00384 	movi	r3,14
  812e90:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  812e94:	e0bff803 	ldbu	r2,-32(fp)
  812e98:	00000706 	br	812eb8 <OSQPendAbort+0x158>
  812e9c:	e0bff917 	ldw	r2,-28(fp)
  812ea0:	e0bffb15 	stw	r2,-20(fp)
  812ea4:	e0bffb17 	ldw	r2,-20(fp)
  812ea8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812eac:	e0bfff17 	ldw	r2,-4(fp)
  812eb0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  812eb4:	0005883a 	mov	r2,zero
}
  812eb8:	e037883a 	mov	sp,fp
  812ebc:	dfc00117 	ldw	ra,4(sp)
  812ec0:	df000017 	ldw	fp,0(sp)
  812ec4:	dec00204 	addi	sp,sp,8
  812ec8:	f800283a 	ret

00812ecc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  812ecc:	defff604 	addi	sp,sp,-40
  812ed0:	dfc00915 	stw	ra,36(sp)
  812ed4:	df000815 	stw	fp,32(sp)
  812ed8:	df000804 	addi	fp,sp,32
  812edc:	e13ffe15 	stw	r4,-8(fp)
  812ee0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  812ee4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  812ee8:	e0bffe17 	ldw	r2,-8(fp)
  812eec:	1000021e 	bne	r2,zero,812ef8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  812ef0:	00800104 	movi	r2,4
  812ef4:	00004a06 	br	813020 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  812ef8:	e0bffe17 	ldw	r2,-8(fp)
  812efc:	10800003 	ldbu	r2,0(r2)
  812f00:	10803fcc 	andi	r2,r2,255
  812f04:	108000a0 	cmpeqi	r2,r2,2
  812f08:	1000021e 	bne	r2,zero,812f14 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  812f0c:	00800044 	movi	r2,1
  812f10:	00004306 	br	813020 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f14:	0005303a 	rdctl	r2,status
  812f18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f1c:	e0fffd17 	ldw	r3,-12(fp)
  812f20:	00bfff84 	movi	r2,-2
  812f24:	1884703a 	and	r2,r3,r2
  812f28:	1001703a 	wrctl	status,r2
  
  return context;
  812f2c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  812f30:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  812f34:	e0bffe17 	ldw	r2,-8(fp)
  812f38:	10800283 	ldbu	r2,10(r2)
  812f3c:	10803fcc 	andi	r2,r2,255
  812f40:	10000c26 	beq	r2,zero,812f74 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  812f44:	000f883a 	mov	r7,zero
  812f48:	01800104 	movi	r6,4
  812f4c:	e17fff17 	ldw	r5,-4(fp)
  812f50:	e13ffe17 	ldw	r4,-8(fp)
  812f54:	080f38c0 	call	80f38c <OS_EventTaskRdy>
  812f58:	e0bff817 	ldw	r2,-32(fp)
  812f5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f60:	e0bff917 	ldw	r2,-28(fp)
  812f64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  812f68:	080fdd80 	call	80fdd8 <OS_Sched>
        return (OS_ERR_NONE);
  812f6c:	0005883a 	mov	r2,zero
  812f70:	00002b06 	br	813020 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  812f74:	e0bffe17 	ldw	r2,-8(fp)
  812f78:	10800117 	ldw	r2,4(r2)
  812f7c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  812f80:	e0bffb17 	ldw	r2,-20(fp)
  812f84:	10c0058b 	ldhu	r3,22(r2)
  812f88:	e0bffb17 	ldw	r2,-20(fp)
  812f8c:	1080050b 	ldhu	r2,20(r2)
  812f90:	18ffffcc 	andi	r3,r3,65535
  812f94:	10bfffcc 	andi	r2,r2,65535
  812f98:	18800636 	bltu	r3,r2,812fb4 <OSQPost+0xe8>
  812f9c:	e0bff817 	ldw	r2,-32(fp)
  812fa0:	e0bffa15 	stw	r2,-24(fp)
  812fa4:	e0bffa17 	ldw	r2,-24(fp)
  812fa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  812fac:	00800784 	movi	r2,30
  812fb0:	00001b06 	br	813020 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  812fb4:	e0bffb17 	ldw	r2,-20(fp)
  812fb8:	10800317 	ldw	r2,12(r2)
  812fbc:	11000104 	addi	r4,r2,4
  812fc0:	e0fffb17 	ldw	r3,-20(fp)
  812fc4:	19000315 	stw	r4,12(r3)
  812fc8:	e0ffff17 	ldw	r3,-4(fp)
  812fcc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  812fd0:	e0bffb17 	ldw	r2,-20(fp)
  812fd4:	1080058b 	ldhu	r2,22(r2)
  812fd8:	10800044 	addi	r2,r2,1
  812fdc:	1007883a 	mov	r3,r2
  812fe0:	e0bffb17 	ldw	r2,-20(fp)
  812fe4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  812fe8:	e0bffb17 	ldw	r2,-20(fp)
  812fec:	10c00317 	ldw	r3,12(r2)
  812ff0:	e0bffb17 	ldw	r2,-20(fp)
  812ff4:	10800217 	ldw	r2,8(r2)
  812ff8:	1880041e 	bne	r3,r2,81300c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  812ffc:	e0bffb17 	ldw	r2,-20(fp)
  813000:	10c00117 	ldw	r3,4(r2)
  813004:	e0bffb17 	ldw	r2,-20(fp)
  813008:	10c00315 	stw	r3,12(r2)
  81300c:	e0bff817 	ldw	r2,-32(fp)
  813010:	e0bffc15 	stw	r2,-16(fp)
  813014:	e0bffc17 	ldw	r2,-16(fp)
  813018:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81301c:	0005883a 	mov	r2,zero
}
  813020:	e037883a 	mov	sp,fp
  813024:	dfc00117 	ldw	ra,4(sp)
  813028:	df000017 	ldw	fp,0(sp)
  81302c:	dec00204 	addi	sp,sp,8
  813030:	f800283a 	ret

00813034 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  813034:	defff604 	addi	sp,sp,-40
  813038:	dfc00915 	stw	ra,36(sp)
  81303c:	df000815 	stw	fp,32(sp)
  813040:	df000804 	addi	fp,sp,32
  813044:	e13ffe15 	stw	r4,-8(fp)
  813048:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81304c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813050:	e0bffe17 	ldw	r2,-8(fp)
  813054:	1000021e 	bne	r2,zero,813060 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  813058:	00800104 	movi	r2,4
  81305c:	00004c06 	br	813190 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  813060:	e0bffe17 	ldw	r2,-8(fp)
  813064:	10800003 	ldbu	r2,0(r2)
  813068:	10803fcc 	andi	r2,r2,255
  81306c:	108000a0 	cmpeqi	r2,r2,2
  813070:	1000021e 	bne	r2,zero,81307c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  813074:	00800044 	movi	r2,1
  813078:	00004506 	br	813190 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81307c:	0005303a 	rdctl	r2,status
  813080:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813084:	e0fffd17 	ldw	r3,-12(fp)
  813088:	00bfff84 	movi	r2,-2
  81308c:	1884703a 	and	r2,r3,r2
  813090:	1001703a 	wrctl	status,r2
  
  return context;
  813094:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813098:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  81309c:	e0bffe17 	ldw	r2,-8(fp)
  8130a0:	10800283 	ldbu	r2,10(r2)
  8130a4:	10803fcc 	andi	r2,r2,255
  8130a8:	10000c26 	beq	r2,zero,8130dc <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8130ac:	000f883a 	mov	r7,zero
  8130b0:	01800104 	movi	r6,4
  8130b4:	e17fff17 	ldw	r5,-4(fp)
  8130b8:	e13ffe17 	ldw	r4,-8(fp)
  8130bc:	080f38c0 	call	80f38c <OS_EventTaskRdy>
  8130c0:	e0bff817 	ldw	r2,-32(fp)
  8130c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8130c8:	e0bff917 	ldw	r2,-28(fp)
  8130cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  8130d0:	080fdd80 	call	80fdd8 <OS_Sched>
        return (OS_ERR_NONE);
  8130d4:	0005883a 	mov	r2,zero
  8130d8:	00002d06 	br	813190 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8130dc:	e0bffe17 	ldw	r2,-8(fp)
  8130e0:	10800117 	ldw	r2,4(r2)
  8130e4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8130e8:	e0bffb17 	ldw	r2,-20(fp)
  8130ec:	10c0058b 	ldhu	r3,22(r2)
  8130f0:	e0bffb17 	ldw	r2,-20(fp)
  8130f4:	1080050b 	ldhu	r2,20(r2)
  8130f8:	18ffffcc 	andi	r3,r3,65535
  8130fc:	10bfffcc 	andi	r2,r2,65535
  813100:	18800636 	bltu	r3,r2,81311c <OSQPostFront+0xe8>
  813104:	e0bff817 	ldw	r2,-32(fp)
  813108:	e0bffa15 	stw	r2,-24(fp)
  81310c:	e0bffa17 	ldw	r2,-24(fp)
  813110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  813114:	00800784 	movi	r2,30
  813118:	00001d06 	br	813190 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  81311c:	e0bffb17 	ldw	r2,-20(fp)
  813120:	10c00417 	ldw	r3,16(r2)
  813124:	e0bffb17 	ldw	r2,-20(fp)
  813128:	10800117 	ldw	r2,4(r2)
  81312c:	1880041e 	bne	r3,r2,813140 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  813130:	e0bffb17 	ldw	r2,-20(fp)
  813134:	10c00217 	ldw	r3,8(r2)
  813138:	e0bffb17 	ldw	r2,-20(fp)
  81313c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  813140:	e0bffb17 	ldw	r2,-20(fp)
  813144:	10800417 	ldw	r2,16(r2)
  813148:	10ffff04 	addi	r3,r2,-4
  81314c:	e0bffb17 	ldw	r2,-20(fp)
  813150:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  813154:	e0bffb17 	ldw	r2,-20(fp)
  813158:	10800417 	ldw	r2,16(r2)
  81315c:	e0ffff17 	ldw	r3,-4(fp)
  813160:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  813164:	e0bffb17 	ldw	r2,-20(fp)
  813168:	1080058b 	ldhu	r2,22(r2)
  81316c:	10800044 	addi	r2,r2,1
  813170:	1007883a 	mov	r3,r2
  813174:	e0bffb17 	ldw	r2,-20(fp)
  813178:	10c0058d 	sth	r3,22(r2)
  81317c:	e0bff817 	ldw	r2,-32(fp)
  813180:	e0bffc15 	stw	r2,-16(fp)
  813184:	e0bffc17 	ldw	r2,-16(fp)
  813188:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81318c:	0005883a 	mov	r2,zero
}
  813190:	e037883a 	mov	sp,fp
  813194:	dfc00117 	ldw	ra,4(sp)
  813198:	df000017 	ldw	fp,0(sp)
  81319c:	dec00204 	addi	sp,sp,8
  8131a0:	f800283a 	ret

008131a4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  8131a4:	defff504 	addi	sp,sp,-44
  8131a8:	dfc00a15 	stw	ra,40(sp)
  8131ac:	df000915 	stw	fp,36(sp)
  8131b0:	df000904 	addi	fp,sp,36
  8131b4:	e13ffd15 	stw	r4,-12(fp)
  8131b8:	e17ffe15 	stw	r5,-8(fp)
  8131bc:	3005883a 	mov	r2,r6
  8131c0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8131c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8131c8:	e0bffd17 	ldw	r2,-12(fp)
  8131cc:	1000021e 	bne	r2,zero,8131d8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  8131d0:	00800104 	movi	r2,4
  8131d4:	00007106 	br	81339c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8131d8:	e0bffd17 	ldw	r2,-12(fp)
  8131dc:	10800003 	ldbu	r2,0(r2)
  8131e0:	10803fcc 	andi	r2,r2,255
  8131e4:	108000a0 	cmpeqi	r2,r2,2
  8131e8:	1000021e 	bne	r2,zero,8131f4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  8131ec:	00800044 	movi	r2,1
  8131f0:	00006a06 	br	81339c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8131f4:	0005303a 	rdctl	r2,status
  8131f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8131fc:	e0fffc17 	ldw	r3,-16(fp)
  813200:	00bfff84 	movi	r2,-2
  813204:	1884703a 	and	r2,r3,r2
  813208:	1001703a 	wrctl	status,r2
  
  return context;
  81320c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813210:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  813214:	e0bffd17 	ldw	r2,-12(fp)
  813218:	10800283 	ldbu	r2,10(r2)
  81321c:	10803fcc 	andi	r2,r2,255
  813220:	10001d26 	beq	r2,zero,813298 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  813224:	e0bfff03 	ldbu	r2,-4(fp)
  813228:	1080004c 	andi	r2,r2,1
  81322c:	10000b26 	beq	r2,zero,81325c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  813230:	00000506 	br	813248 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813234:	000f883a 	mov	r7,zero
  813238:	01800104 	movi	r6,4
  81323c:	e17ffe17 	ldw	r5,-8(fp)
  813240:	e13ffd17 	ldw	r4,-12(fp)
  813244:	080f38c0 	call	80f38c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  813248:	e0bffd17 	ldw	r2,-12(fp)
  81324c:	10800283 	ldbu	r2,10(r2)
  813250:	10803fcc 	andi	r2,r2,255
  813254:	103ff71e 	bne	r2,zero,813234 <__alt_mem_epcs_flash_controller_0+0xff80a234>
  813258:	00000506 	br	813270 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81325c:	000f883a 	mov	r7,zero
  813260:	01800104 	movi	r6,4
  813264:	e17ffe17 	ldw	r5,-8(fp)
  813268:	e13ffd17 	ldw	r4,-12(fp)
  81326c:	080f38c0 	call	80f38c <OS_EventTaskRdy>
  813270:	e0bff717 	ldw	r2,-36(fp)
  813274:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813278:	e0bff817 	ldw	r2,-32(fp)
  81327c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  813280:	e0bfff03 	ldbu	r2,-4(fp)
  813284:	1080010c 	andi	r2,r2,4
  813288:	1000011e 	bne	r2,zero,813290 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  81328c:	080fdd80 	call	80fdd8 <OS_Sched>
        }
        return (OS_ERR_NONE);
  813290:	0005883a 	mov	r2,zero
  813294:	00004106 	br	81339c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  813298:	e0bffd17 	ldw	r2,-12(fp)
  81329c:	10800117 	ldw	r2,4(r2)
  8132a0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8132a4:	e0bffa17 	ldw	r2,-24(fp)
  8132a8:	10c0058b 	ldhu	r3,22(r2)
  8132ac:	e0bffa17 	ldw	r2,-24(fp)
  8132b0:	1080050b 	ldhu	r2,20(r2)
  8132b4:	18ffffcc 	andi	r3,r3,65535
  8132b8:	10bfffcc 	andi	r2,r2,65535
  8132bc:	18800636 	bltu	r3,r2,8132d8 <OSQPostOpt+0x134>
  8132c0:	e0bff717 	ldw	r2,-36(fp)
  8132c4:	e0bff915 	stw	r2,-28(fp)
  8132c8:	e0bff917 	ldw	r2,-28(fp)
  8132cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8132d0:	00800784 	movi	r2,30
  8132d4:	00003106 	br	81339c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  8132d8:	e0bfff03 	ldbu	r2,-4(fp)
  8132dc:	1080008c 	andi	r2,r2,2
  8132e0:	10001326 	beq	r2,zero,813330 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  8132e4:	e0bffa17 	ldw	r2,-24(fp)
  8132e8:	10c00417 	ldw	r3,16(r2)
  8132ec:	e0bffa17 	ldw	r2,-24(fp)
  8132f0:	10800117 	ldw	r2,4(r2)
  8132f4:	1880041e 	bne	r3,r2,813308 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  8132f8:	e0bffa17 	ldw	r2,-24(fp)
  8132fc:	10c00217 	ldw	r3,8(r2)
  813300:	e0bffa17 	ldw	r2,-24(fp)
  813304:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  813308:	e0bffa17 	ldw	r2,-24(fp)
  81330c:	10800417 	ldw	r2,16(r2)
  813310:	10ffff04 	addi	r3,r2,-4
  813314:	e0bffa17 	ldw	r2,-24(fp)
  813318:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  81331c:	e0bffa17 	ldw	r2,-24(fp)
  813320:	10800417 	ldw	r2,16(r2)
  813324:	e0fffe17 	ldw	r3,-8(fp)
  813328:	10c00015 	stw	r3,0(r2)
  81332c:	00001006 	br	813370 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  813330:	e0bffa17 	ldw	r2,-24(fp)
  813334:	10800317 	ldw	r2,12(r2)
  813338:	11000104 	addi	r4,r2,4
  81333c:	e0fffa17 	ldw	r3,-24(fp)
  813340:	19000315 	stw	r4,12(r3)
  813344:	e0fffe17 	ldw	r3,-8(fp)
  813348:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  81334c:	e0bffa17 	ldw	r2,-24(fp)
  813350:	10c00317 	ldw	r3,12(r2)
  813354:	e0bffa17 	ldw	r2,-24(fp)
  813358:	10800217 	ldw	r2,8(r2)
  81335c:	1880041e 	bne	r3,r2,813370 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  813360:	e0bffa17 	ldw	r2,-24(fp)
  813364:	10c00117 	ldw	r3,4(r2)
  813368:	e0bffa17 	ldw	r2,-24(fp)
  81336c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  813370:	e0bffa17 	ldw	r2,-24(fp)
  813374:	1080058b 	ldhu	r2,22(r2)
  813378:	10800044 	addi	r2,r2,1
  81337c:	1007883a 	mov	r3,r2
  813380:	e0bffa17 	ldw	r2,-24(fp)
  813384:	10c0058d 	sth	r3,22(r2)
  813388:	e0bff717 	ldw	r2,-36(fp)
  81338c:	e0bffb15 	stw	r2,-20(fp)
  813390:	e0bffb17 	ldw	r2,-20(fp)
  813394:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813398:	0005883a 	mov	r2,zero
}
  81339c:	e037883a 	mov	sp,fp
  8133a0:	dfc00117 	ldw	ra,4(sp)
  8133a4:	df000017 	ldw	fp,0(sp)
  8133a8:	dec00204 	addi	sp,sp,8
  8133ac:	f800283a 	ret

008133b0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  8133b0:	defff604 	addi	sp,sp,-40
  8133b4:	df000915 	stw	fp,36(sp)
  8133b8:	df000904 	addi	fp,sp,36
  8133bc:	e13ffe15 	stw	r4,-8(fp)
  8133c0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8133c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8133c8:	e0bffe17 	ldw	r2,-8(fp)
  8133cc:	1000021e 	bne	r2,zero,8133d8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  8133d0:	00800104 	movi	r2,4
  8133d4:	00004906 	br	8134fc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  8133d8:	e0bfff17 	ldw	r2,-4(fp)
  8133dc:	1000021e 	bne	r2,zero,8133e8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  8133e0:	00800244 	movi	r2,9
  8133e4:	00004506 	br	8134fc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8133e8:	e0bffe17 	ldw	r2,-8(fp)
  8133ec:	10800003 	ldbu	r2,0(r2)
  8133f0:	10803fcc 	andi	r2,r2,255
  8133f4:	108000a0 	cmpeqi	r2,r2,2
  8133f8:	1000021e 	bne	r2,zero,813404 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  8133fc:	00800044 	movi	r2,1
  813400:	00003e06 	br	8134fc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813404:	0005303a 	rdctl	r2,status
  813408:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81340c:	e0fffd17 	ldw	r3,-12(fp)
  813410:	00bfff84 	movi	r2,-2
  813414:	1884703a 	and	r2,r3,r2
  813418:	1001703a 	wrctl	status,r2
  
  return context;
  81341c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813420:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  813424:	e0bffe17 	ldw	r2,-8(fp)
  813428:	10c00283 	ldbu	r3,10(r2)
  81342c:	e0bfff17 	ldw	r2,-4(fp)
  813430:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  813434:	e0bffe17 	ldw	r2,-8(fp)
  813438:	108002c4 	addi	r2,r2,11
  81343c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  813440:	e0bfff17 	ldw	r2,-4(fp)
  813444:	10800204 	addi	r2,r2,8
  813448:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81344c:	e03ff705 	stb	zero,-36(fp)
  813450:	00000b06 	br	813480 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  813454:	e0bff917 	ldw	r2,-28(fp)
  813458:	10c00044 	addi	r3,r2,1
  81345c:	e0fff915 	stw	r3,-28(fp)
  813460:	e0fff817 	ldw	r3,-32(fp)
  813464:	19000044 	addi	r4,r3,1
  813468:	e13ff815 	stw	r4,-32(fp)
  81346c:	18c00003 	ldbu	r3,0(r3)
  813470:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813474:	e0bff703 	ldbu	r2,-36(fp)
  813478:	10800044 	addi	r2,r2,1
  81347c:	e0bff705 	stb	r2,-36(fp)
  813480:	e0bff703 	ldbu	r2,-36(fp)
  813484:	108000f0 	cmpltui	r2,r2,3
  813488:	103ff21e 	bne	r2,zero,813454 <__alt_mem_epcs_flash_controller_0+0xff80a454>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  81348c:	e0bffe17 	ldw	r2,-8(fp)
  813490:	10800117 	ldw	r2,4(r2)
  813494:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  813498:	e0bffc17 	ldw	r2,-16(fp)
  81349c:	1080058b 	ldhu	r2,22(r2)
  8134a0:	10bfffcc 	andi	r2,r2,65535
  8134a4:	10000626 	beq	r2,zero,8134c0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8134a8:	e0bffc17 	ldw	r2,-16(fp)
  8134ac:	10800417 	ldw	r2,16(r2)
  8134b0:	10c00017 	ldw	r3,0(r2)
  8134b4:	e0bfff17 	ldw	r2,-4(fp)
  8134b8:	10c00015 	stw	r3,0(r2)
  8134bc:	00000206 	br	8134c8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  8134c0:	e0bfff17 	ldw	r2,-4(fp)
  8134c4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8134c8:	e0bffc17 	ldw	r2,-16(fp)
  8134cc:	10c0058b 	ldhu	r3,22(r2)
  8134d0:	e0bfff17 	ldw	r2,-4(fp)
  8134d4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  8134d8:	e0bffc17 	ldw	r2,-16(fp)
  8134dc:	10c0050b 	ldhu	r3,20(r2)
  8134e0:	e0bfff17 	ldw	r2,-4(fp)
  8134e4:	10c0018d 	sth	r3,6(r2)
  8134e8:	e0bffa17 	ldw	r2,-24(fp)
  8134ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8134f0:	e0bffb17 	ldw	r2,-20(fp)
  8134f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8134f8:	0005883a 	mov	r2,zero
}
  8134fc:	e037883a 	mov	sp,fp
  813500:	df000017 	ldw	fp,0(sp)
  813504:	dec00104 	addi	sp,sp,4
  813508:	f800283a 	ret

0081350c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81350c:	defffb04 	addi	sp,sp,-20
  813510:	dfc00415 	stw	ra,16(sp)
  813514:	df000315 	stw	fp,12(sp)
  813518:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  81351c:	01407804 	movi	r5,480
  813520:	010020b4 	movhi	r4,130
  813524:	21110d04 	addi	r4,r4,17460
  813528:	080fd1c0 	call	80fd1c <OS_MemClr>
    pq1 = &OSQTbl[0];
  81352c:	008020b4 	movhi	r2,130
  813530:	10910d04 	addi	r2,r2,17460
  813534:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  813538:	008020b4 	movhi	r2,130
  81353c:	10911304 	addi	r2,r2,17484
  813540:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  813544:	e03ffd0d 	sth	zero,-12(fp)
  813548:	00000c06 	br	81357c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  81354c:	e0bffe17 	ldw	r2,-8(fp)
  813550:	e0ffff17 	ldw	r3,-4(fp)
  813554:	10c00015 	stw	r3,0(r2)
        pq1++;
  813558:	e0bffe17 	ldw	r2,-8(fp)
  81355c:	10800604 	addi	r2,r2,24
  813560:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  813564:	e0bfff17 	ldw	r2,-4(fp)
  813568:	10800604 	addi	r2,r2,24
  81356c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  813570:	e0bffd0b 	ldhu	r2,-12(fp)
  813574:	10800044 	addi	r2,r2,1
  813578:	e0bffd0d 	sth	r2,-12(fp)
  81357c:	e0bffd0b 	ldhu	r2,-12(fp)
  813580:	108004f0 	cmpltui	r2,r2,19
  813584:	103ff11e 	bne	r2,zero,81354c <__alt_mem_epcs_flash_controller_0+0xff80a54c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  813588:	e0bffe17 	ldw	r2,-8(fp)
  81358c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  813590:	008020b4 	movhi	r2,130
  813594:	10910d04 	addi	r2,r2,17460
  813598:	d0a06e15 	stw	r2,-32328(gp)
#endif
}
  81359c:	0001883a 	nop
  8135a0:	e037883a 	mov	sp,fp
  8135a4:	dfc00117 	ldw	ra,4(sp)
  8135a8:	df000017 	ldw	fp,0(sp)
  8135ac:	dec00204 	addi	sp,sp,8
  8135b0:	f800283a 	ret

008135b4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8135b4:	defffa04 	addi	sp,sp,-24
  8135b8:	df000515 	stw	fp,20(sp)
  8135bc:	df000504 	addi	fp,sp,20
  8135c0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8135c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8135c8:	e0bfff17 	ldw	r2,-4(fp)
  8135cc:	1000021e 	bne	r2,zero,8135d8 <OSSemAccept+0x24>
        return (0);
  8135d0:	0005883a 	mov	r2,zero
  8135d4:	00001f06 	br	813654 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8135d8:	e0bfff17 	ldw	r2,-4(fp)
  8135dc:	10800003 	ldbu	r2,0(r2)
  8135e0:	10803fcc 	andi	r2,r2,255
  8135e4:	108000e0 	cmpeqi	r2,r2,3
  8135e8:	1000021e 	bne	r2,zero,8135f4 <OSSemAccept+0x40>
        return (0);
  8135ec:	0005883a 	mov	r2,zero
  8135f0:	00001806 	br	813654 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135f4:	0005303a 	rdctl	r2,status
  8135f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8135fc:	e0fffe17 	ldw	r3,-8(fp)
  813600:	00bfff84 	movi	r2,-2
  813604:	1884703a 	and	r2,r3,r2
  813608:	1001703a 	wrctl	status,r2
  
  return context;
  81360c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  813610:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  813614:	e0bfff17 	ldw	r2,-4(fp)
  813618:	1080020b 	ldhu	r2,8(r2)
  81361c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  813620:	e0bffd0b 	ldhu	r2,-12(fp)
  813624:	10000626 	beq	r2,zero,813640 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  813628:	e0bfff17 	ldw	r2,-4(fp)
  81362c:	1080020b 	ldhu	r2,8(r2)
  813630:	10bfffc4 	addi	r2,r2,-1
  813634:	1007883a 	mov	r3,r2
  813638:	e0bfff17 	ldw	r2,-4(fp)
  81363c:	10c0020d 	sth	r3,8(r2)
  813640:	e0bffb17 	ldw	r2,-20(fp)
  813644:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813648:	e0bffc17 	ldw	r2,-16(fp)
  81364c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  813650:	e0bffd0b 	ldhu	r2,-12(fp)
}
  813654:	e037883a 	mov	sp,fp
  813658:	df000017 	ldw	fp,0(sp)
  81365c:	dec00104 	addi	sp,sp,4
  813660:	f800283a 	ret

00813664 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  813664:	defff904 	addi	sp,sp,-28
  813668:	dfc00615 	stw	ra,24(sp)
  81366c:	df000515 	stw	fp,20(sp)
  813670:	df000504 	addi	fp,sp,20
  813674:	2005883a 	mov	r2,r4
  813678:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81367c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813680:	d0a07103 	ldbu	r2,-32316(gp)
  813684:	10803fcc 	andi	r2,r2,255
  813688:	10000226 	beq	r2,zero,813694 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  81368c:	0005883a 	mov	r2,zero
  813690:	00002506 	br	813728 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813694:	0005303a 	rdctl	r2,status
  813698:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81369c:	e0fffe17 	ldw	r3,-8(fp)
  8136a0:	00bfff84 	movi	r2,-2
  8136a4:	1884703a 	and	r2,r3,r2
  8136a8:	1001703a 	wrctl	status,r2
  
  return context;
  8136ac:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8136b0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8136b4:	d0a07017 	ldw	r2,-32320(gp)
  8136b8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8136bc:	d0a07017 	ldw	r2,-32320(gp)
  8136c0:	10000326 	beq	r2,zero,8136d0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8136c4:	d0a07017 	ldw	r2,-32320(gp)
  8136c8:	10800117 	ldw	r2,4(r2)
  8136cc:	d0a07015 	stw	r2,-32320(gp)
  8136d0:	e0bffb17 	ldw	r2,-20(fp)
  8136d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136d8:	e0bffc17 	ldw	r2,-16(fp)
  8136dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  8136e0:	e0bffd17 	ldw	r2,-12(fp)
  8136e4:	10000f26 	beq	r2,zero,813724 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  8136e8:	e0bffd17 	ldw	r2,-12(fp)
  8136ec:	00c000c4 	movi	r3,3
  8136f0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  8136f4:	e0bffd17 	ldw	r2,-12(fp)
  8136f8:	e0ffff0b 	ldhu	r3,-4(fp)
  8136fc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  813700:	e0bffd17 	ldw	r2,-12(fp)
  813704:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  813708:	e0bffd17 	ldw	r2,-12(fp)
  81370c:	00c00fc4 	movi	r3,63
  813710:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  813714:	e0bffd17 	ldw	r2,-12(fp)
  813718:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  81371c:	e13ffd17 	ldw	r4,-12(fp)
  813720:	080f93c0 	call	80f93c <OS_EventWaitListInit>
    }
    return (pevent);
  813724:	e0bffd17 	ldw	r2,-12(fp)
}
  813728:	e037883a 	mov	sp,fp
  81372c:	dfc00117 	ldw	ra,4(sp)
  813730:	df000017 	ldw	fp,0(sp)
  813734:	dec00204 	addi	sp,sp,8
  813738:	f800283a 	ret

0081373c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81373c:	defff304 	addi	sp,sp,-52
  813740:	dfc00c15 	stw	ra,48(sp)
  813744:	df000b15 	stw	fp,44(sp)
  813748:	df000b04 	addi	fp,sp,44
  81374c:	e13ffd15 	stw	r4,-12(fp)
  813750:	2805883a 	mov	r2,r5
  813754:	e1bfff15 	stw	r6,-4(fp)
  813758:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81375c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813760:	e0bfff17 	ldw	r2,-4(fp)
  813764:	1000021e 	bne	r2,zero,813770 <OSSemDel+0x34>
        return (pevent);
  813768:	e0bffd17 	ldw	r2,-12(fp)
  81376c:	00007e06 	br	813968 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  813770:	e0bffd17 	ldw	r2,-12(fp)
  813774:	1000051e 	bne	r2,zero,81378c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  813778:	e0bfff17 	ldw	r2,-4(fp)
  81377c:	00c00104 	movi	r3,4
  813780:	10c00005 	stb	r3,0(r2)
        return (pevent);
  813784:	e0bffd17 	ldw	r2,-12(fp)
  813788:	00007706 	br	813968 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81378c:	e0bffd17 	ldw	r2,-12(fp)
  813790:	10800003 	ldbu	r2,0(r2)
  813794:	10803fcc 	andi	r2,r2,255
  813798:	108000e0 	cmpeqi	r2,r2,3
  81379c:	1000051e 	bne	r2,zero,8137b4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8137a0:	e0bfff17 	ldw	r2,-4(fp)
  8137a4:	00c00044 	movi	r3,1
  8137a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8137ac:	e0bffd17 	ldw	r2,-12(fp)
  8137b0:	00006d06 	br	813968 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8137b4:	d0a07103 	ldbu	r2,-32316(gp)
  8137b8:	10803fcc 	andi	r2,r2,255
  8137bc:	10000526 	beq	r2,zero,8137d4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8137c0:	e0bfff17 	ldw	r2,-4(fp)
  8137c4:	00c003c4 	movi	r3,15
  8137c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8137cc:	e0bffd17 	ldw	r2,-12(fp)
  8137d0:	00006506 	br	813968 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137d4:	0005303a 	rdctl	r2,status
  8137d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137dc:	e0fffc17 	ldw	r3,-16(fp)
  8137e0:	00bfff84 	movi	r2,-2
  8137e4:	1884703a 	and	r2,r3,r2
  8137e8:	1001703a 	wrctl	status,r2
  
  return context;
  8137ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8137f0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  8137f4:	e0bffd17 	ldw	r2,-12(fp)
  8137f8:	10800283 	ldbu	r2,10(r2)
  8137fc:	10803fcc 	andi	r2,r2,255
  813800:	10000326 	beq	r2,zero,813810 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  813804:	00800044 	movi	r2,1
  813808:	e0bff505 	stb	r2,-44(fp)
  81380c:	00000106 	br	813814 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  813810:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  813814:	e0bffe03 	ldbu	r2,-8(fp)
  813818:	10000326 	beq	r2,zero,813828 <OSSemDel+0xec>
  81381c:	10800060 	cmpeqi	r2,r2,1
  813820:	1000281e 	bne	r2,zero,8138c4 <OSSemDel+0x188>
  813824:	00004506 	br	81393c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  813828:	e0bff503 	ldbu	r2,-44(fp)
  81382c:	1000161e 	bne	r2,zero,813888 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  813830:	e0bffd17 	ldw	r2,-12(fp)
  813834:	00c00fc4 	movi	r3,63
  813838:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81383c:	e0bffd17 	ldw	r2,-12(fp)
  813840:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  813844:	e0bffd17 	ldw	r2,-12(fp)
  813848:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81384c:	d0e07017 	ldw	r3,-32320(gp)
  813850:	e0bffd17 	ldw	r2,-12(fp)
  813854:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  813858:	e0bffd17 	ldw	r2,-12(fp)
  81385c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  813860:	e0bffd17 	ldw	r2,-12(fp)
  813864:	d0a07015 	stw	r2,-32320(gp)
  813868:	e0bff717 	ldw	r2,-36(fp)
  81386c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813870:	e0bff817 	ldw	r2,-32(fp)
  813874:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  813878:	e0bfff17 	ldw	r2,-4(fp)
  81387c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  813880:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  813884:	00003706 	br	813964 <OSSemDel+0x228>
  813888:	e0bff717 	ldw	r2,-36(fp)
  81388c:	e0bff915 	stw	r2,-28(fp)
  813890:	e0bff917 	ldw	r2,-28(fp)
  813894:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  813898:	e0bfff17 	ldw	r2,-4(fp)
  81389c:	00c01244 	movi	r3,73
  8138a0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  8138a4:	e0bffd17 	ldw	r2,-12(fp)
  8138a8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  8138ac:	00002d06 	br	813964 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8138b0:	000f883a 	mov	r7,zero
  8138b4:	01800044 	movi	r6,1
  8138b8:	000b883a 	mov	r5,zero
  8138bc:	e13ffd17 	ldw	r4,-12(fp)
  8138c0:	080f38c0 	call	80f38c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8138c4:	e0bffd17 	ldw	r2,-12(fp)
  8138c8:	10800283 	ldbu	r2,10(r2)
  8138cc:	10803fcc 	andi	r2,r2,255
  8138d0:	103ff71e 	bne	r2,zero,8138b0 <__alt_mem_epcs_flash_controller_0+0xff80a8b0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8138d4:	e0bffd17 	ldw	r2,-12(fp)
  8138d8:	00c00fc4 	movi	r3,63
  8138dc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  8138e0:	e0bffd17 	ldw	r2,-12(fp)
  8138e4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8138e8:	e0bffd17 	ldw	r2,-12(fp)
  8138ec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8138f0:	d0e07017 	ldw	r3,-32320(gp)
  8138f4:	e0bffd17 	ldw	r2,-12(fp)
  8138f8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8138fc:	e0bffd17 	ldw	r2,-12(fp)
  813900:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  813904:	e0bffd17 	ldw	r2,-12(fp)
  813908:	d0a07015 	stw	r2,-32320(gp)
  81390c:	e0bff717 	ldw	r2,-36(fp)
  813910:	e0bffa15 	stw	r2,-24(fp)
  813914:	e0bffa17 	ldw	r2,-24(fp)
  813918:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81391c:	e0bff503 	ldbu	r2,-44(fp)
  813920:	10800058 	cmpnei	r2,r2,1
  813924:	1000011e 	bne	r2,zero,81392c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  813928:	080fdd80 	call	80fdd8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81392c:	e0bfff17 	ldw	r2,-4(fp)
  813930:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  813934:	e03ff615 	stw	zero,-40(fp)
             break;
  813938:	00000a06 	br	813964 <OSSemDel+0x228>
  81393c:	e0bff717 	ldw	r2,-36(fp)
  813940:	e0bffb15 	stw	r2,-20(fp)
  813944:	e0bffb17 	ldw	r2,-20(fp)
  813948:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81394c:	e0bfff17 	ldw	r2,-4(fp)
  813950:	00c001c4 	movi	r3,7
  813954:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  813958:	e0bffd17 	ldw	r2,-12(fp)
  81395c:	e0bff615 	stw	r2,-40(fp)
             break;
  813960:	0001883a 	nop
    }
    return (pevent_return);
  813964:	e0bff617 	ldw	r2,-40(fp)
}
  813968:	e037883a 	mov	sp,fp
  81396c:	dfc00117 	ldw	ra,4(sp)
  813970:	df000017 	ldw	fp,0(sp)
  813974:	dec00204 	addi	sp,sp,8
  813978:	f800283a 	ret

0081397c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81397c:	defff504 	addi	sp,sp,-44
  813980:	dfc00a15 	stw	ra,40(sp)
  813984:	df000915 	stw	fp,36(sp)
  813988:	df000904 	addi	fp,sp,36
  81398c:	e13ffd15 	stw	r4,-12(fp)
  813990:	2805883a 	mov	r2,r5
  813994:	e1bfff15 	stw	r6,-4(fp)
  813998:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81399c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8139a0:	e0bfff17 	ldw	r2,-4(fp)
  8139a4:	10007226 	beq	r2,zero,813b70 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8139a8:	e0bffd17 	ldw	r2,-12(fp)
  8139ac:	1000041e 	bne	r2,zero,8139c0 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8139b0:	e0bfff17 	ldw	r2,-4(fp)
  8139b4:	00c00104 	movi	r3,4
  8139b8:	10c00005 	stb	r3,0(r2)
        return;
  8139bc:	00006d06 	br	813b74 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8139c0:	e0bffd17 	ldw	r2,-12(fp)
  8139c4:	10800003 	ldbu	r2,0(r2)
  8139c8:	10803fcc 	andi	r2,r2,255
  8139cc:	108000e0 	cmpeqi	r2,r2,3
  8139d0:	1000041e 	bne	r2,zero,8139e4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  8139d4:	e0bfff17 	ldw	r2,-4(fp)
  8139d8:	00c00044 	movi	r3,1
  8139dc:	10c00005 	stb	r3,0(r2)
        return;
  8139e0:	00006406 	br	813b74 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  8139e4:	d0a07103 	ldbu	r2,-32316(gp)
  8139e8:	10803fcc 	andi	r2,r2,255
  8139ec:	10000426 	beq	r2,zero,813a00 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  8139f0:	e0bfff17 	ldw	r2,-4(fp)
  8139f4:	00c00084 	movi	r3,2
  8139f8:	10c00005 	stb	r3,0(r2)
        return;
  8139fc:	00005d06 	br	813b74 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  813a00:	d0a06303 	ldbu	r2,-32372(gp)
  813a04:	10803fcc 	andi	r2,r2,255
  813a08:	10000426 	beq	r2,zero,813a1c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  813a0c:	e0bfff17 	ldw	r2,-4(fp)
  813a10:	00c00344 	movi	r3,13
  813a14:	10c00005 	stb	r3,0(r2)
        return;
  813a18:	00005606 	br	813b74 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a1c:	0005303a 	rdctl	r2,status
  813a20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a24:	e0fffc17 	ldw	r3,-16(fp)
  813a28:	00bfff84 	movi	r2,-2
  813a2c:	1884703a 	and	r2,r3,r2
  813a30:	1001703a 	wrctl	status,r2
  
  return context;
  813a34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813a38:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  813a3c:	e0bffd17 	ldw	r2,-12(fp)
  813a40:	1080020b 	ldhu	r2,8(r2)
  813a44:	10bfffcc 	andi	r2,r2,65535
  813a48:	10000d26 	beq	r2,zero,813a80 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  813a4c:	e0bffd17 	ldw	r2,-12(fp)
  813a50:	1080020b 	ldhu	r2,8(r2)
  813a54:	10bfffc4 	addi	r2,r2,-1
  813a58:	1007883a 	mov	r3,r2
  813a5c:	e0bffd17 	ldw	r2,-12(fp)
  813a60:	10c0020d 	sth	r3,8(r2)
  813a64:	e0bff717 	ldw	r2,-36(fp)
  813a68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a6c:	e0bff817 	ldw	r2,-32(fp)
  813a70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  813a74:	e0bfff17 	ldw	r2,-4(fp)
  813a78:	10000005 	stb	zero,0(r2)
        return;
  813a7c:	00003d06 	br	813b74 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  813a80:	d0a07217 	ldw	r2,-32312(gp)
  813a84:	d0e07217 	ldw	r3,-32312(gp)
  813a88:	18c00c03 	ldbu	r3,48(r3)
  813a8c:	18c00054 	ori	r3,r3,1
  813a90:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  813a94:	d0a07217 	ldw	r2,-32312(gp)
  813a98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  813a9c:	d0a07217 	ldw	r2,-32312(gp)
  813aa0:	e0fffe0b 	ldhu	r3,-8(fp)
  813aa4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  813aa8:	e13ffd17 	ldw	r4,-12(fp)
  813aac:	080f5240 	call	80f524 <OS_EventTaskWait>
  813ab0:	e0bff717 	ldw	r2,-36(fp)
  813ab4:	e0bffb15 	stw	r2,-20(fp)
  813ab8:	e0bffb17 	ldw	r2,-20(fp)
  813abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  813ac0:	080fdd80 	call	80fdd8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ac4:	0005303a 	rdctl	r2,status
  813ac8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813acc:	e0fff917 	ldw	r3,-28(fp)
  813ad0:	00bfff84 	movi	r2,-2
  813ad4:	1884703a 	and	r2,r3,r2
  813ad8:	1001703a 	wrctl	status,r2
  
  return context;
  813adc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  813ae0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  813ae4:	d0a07217 	ldw	r2,-32312(gp)
  813ae8:	10800c43 	ldbu	r2,49(r2)
  813aec:	10803fcc 	andi	r2,r2,255
  813af0:	10000326 	beq	r2,zero,813b00 <OSSemPend+0x184>
  813af4:	108000a0 	cmpeqi	r2,r2,2
  813af8:	1000041e 	bne	r2,zero,813b0c <OSSemPend+0x190>
  813afc:	00000706 	br	813b1c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  813b00:	e0bfff17 	ldw	r2,-4(fp)
  813b04:	10000005 	stb	zero,0(r2)
             break;
  813b08:	00000c06 	br	813b3c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  813b0c:	e0bfff17 	ldw	r2,-4(fp)
  813b10:	00c00384 	movi	r3,14
  813b14:	10c00005 	stb	r3,0(r2)
             break;
  813b18:	00000806 	br	813b3c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  813b1c:	d0a07217 	ldw	r2,-32312(gp)
  813b20:	e17ffd17 	ldw	r5,-12(fp)
  813b24:	1009883a 	mov	r4,r2
  813b28:	080f7840 	call	80f784 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  813b2c:	e0bfff17 	ldw	r2,-4(fp)
  813b30:	00c00284 	movi	r3,10
  813b34:	10c00005 	stb	r3,0(r2)
             break;
  813b38:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  813b3c:	d0a07217 	ldw	r2,-32312(gp)
  813b40:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  813b44:	d0a07217 	ldw	r2,-32312(gp)
  813b48:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  813b4c:	d0a07217 	ldw	r2,-32312(gp)
  813b50:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  813b54:	d0a07217 	ldw	r2,-32312(gp)
  813b58:	10000815 	stw	zero,32(r2)
  813b5c:	e0bff717 	ldw	r2,-36(fp)
  813b60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b64:	e0bffa17 	ldw	r2,-24(fp)
  813b68:	1001703a 	wrctl	status,r2
  813b6c:	00000106 	br	813b74 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  813b70:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  813b74:	e037883a 	mov	sp,fp
  813b78:	dfc00117 	ldw	ra,4(sp)
  813b7c:	df000017 	ldw	fp,0(sp)
  813b80:	dec00204 	addi	sp,sp,8
  813b84:	f800283a 	ret

00813b88 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  813b88:	defff604 	addi	sp,sp,-40
  813b8c:	dfc00915 	stw	ra,36(sp)
  813b90:	df000815 	stw	fp,32(sp)
  813b94:	df000804 	addi	fp,sp,32
  813b98:	e13ffd15 	stw	r4,-12(fp)
  813b9c:	2805883a 	mov	r2,r5
  813ba0:	e1bfff15 	stw	r6,-4(fp)
  813ba4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813ba8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  813bac:	e0bfff17 	ldw	r2,-4(fp)
  813bb0:	1000021e 	bne	r2,zero,813bbc <OSSemPendAbort+0x34>
        return (0);
  813bb4:	0005883a 	mov	r2,zero
  813bb8:	00004906 	br	813ce0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813bbc:	e0bffd17 	ldw	r2,-12(fp)
  813bc0:	1000051e 	bne	r2,zero,813bd8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  813bc4:	e0bfff17 	ldw	r2,-4(fp)
  813bc8:	00c00104 	movi	r3,4
  813bcc:	10c00005 	stb	r3,0(r2)
        return (0);
  813bd0:	0005883a 	mov	r2,zero
  813bd4:	00004206 	br	813ce0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813bd8:	e0bffd17 	ldw	r2,-12(fp)
  813bdc:	10800003 	ldbu	r2,0(r2)
  813be0:	10803fcc 	andi	r2,r2,255
  813be4:	108000e0 	cmpeqi	r2,r2,3
  813be8:	1000051e 	bne	r2,zero,813c00 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  813bec:	e0bfff17 	ldw	r2,-4(fp)
  813bf0:	00c00044 	movi	r3,1
  813bf4:	10c00005 	stb	r3,0(r2)
        return (0);
  813bf8:	0005883a 	mov	r2,zero
  813bfc:	00003806 	br	813ce0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c00:	0005303a 	rdctl	r2,status
  813c04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c08:	e0fffc17 	ldw	r3,-16(fp)
  813c0c:	00bfff84 	movi	r2,-2
  813c10:	1884703a 	and	r2,r3,r2
  813c14:	1001703a 	wrctl	status,r2
  
  return context;
  813c18:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813c1c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  813c20:	e0bffd17 	ldw	r2,-12(fp)
  813c24:	10800283 	ldbu	r2,10(r2)
  813c28:	10803fcc 	andi	r2,r2,255
  813c2c:	10002526 	beq	r2,zero,813cc4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  813c30:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  813c34:	e0bffe03 	ldbu	r2,-8(fp)
  813c38:	10800060 	cmpeqi	r2,r2,1
  813c3c:	10000e26 	beq	r2,zero,813c78 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  813c40:	00000806 	br	813c64 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  813c44:	01c00084 	movi	r7,2
  813c48:	01800044 	movi	r6,1
  813c4c:	000b883a 	mov	r5,zero
  813c50:	e13ffd17 	ldw	r4,-12(fp)
  813c54:	080f38c0 	call	80f38c <OS_EventTaskRdy>
                     nbr_tasks++;
  813c58:	e0bff803 	ldbu	r2,-32(fp)
  813c5c:	10800044 	addi	r2,r2,1
  813c60:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  813c64:	e0bffd17 	ldw	r2,-12(fp)
  813c68:	10800283 	ldbu	r2,10(r2)
  813c6c:	10803fcc 	andi	r2,r2,255
  813c70:	103ff41e 	bne	r2,zero,813c44 <__alt_mem_epcs_flash_controller_0+0xff80ac44>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  813c74:	00000906 	br	813c9c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  813c78:	01c00084 	movi	r7,2
  813c7c:	01800044 	movi	r6,1
  813c80:	000b883a 	mov	r5,zero
  813c84:	e13ffd17 	ldw	r4,-12(fp)
  813c88:	080f38c0 	call	80f38c <OS_EventTaskRdy>
                 nbr_tasks++;
  813c8c:	e0bff803 	ldbu	r2,-32(fp)
  813c90:	10800044 	addi	r2,r2,1
  813c94:	e0bff805 	stb	r2,-32(fp)
                 break;
  813c98:	0001883a 	nop
  813c9c:	e0bff917 	ldw	r2,-28(fp)
  813ca0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ca4:	e0bffa17 	ldw	r2,-24(fp)
  813ca8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  813cac:	080fdd80 	call	80fdd8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  813cb0:	e0bfff17 	ldw	r2,-4(fp)
  813cb4:	00c00384 	movi	r3,14
  813cb8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  813cbc:	e0bff803 	ldbu	r2,-32(fp)
  813cc0:	00000706 	br	813ce0 <OSSemPendAbort+0x158>
  813cc4:	e0bff917 	ldw	r2,-28(fp)
  813cc8:	e0bffb15 	stw	r2,-20(fp)
  813ccc:	e0bffb17 	ldw	r2,-20(fp)
  813cd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813cd4:	e0bfff17 	ldw	r2,-4(fp)
  813cd8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  813cdc:	0005883a 	mov	r2,zero
}
  813ce0:	e037883a 	mov	sp,fp
  813ce4:	dfc00117 	ldw	ra,4(sp)
  813ce8:	df000017 	ldw	fp,0(sp)
  813cec:	dec00204 	addi	sp,sp,8
  813cf0:	f800283a 	ret

00813cf4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  813cf4:	defff804 	addi	sp,sp,-32
  813cf8:	dfc00715 	stw	ra,28(sp)
  813cfc:	df000615 	stw	fp,24(sp)
  813d00:	df000604 	addi	fp,sp,24
  813d04:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813d08:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813d0c:	e0bfff17 	ldw	r2,-4(fp)
  813d10:	1000021e 	bne	r2,zero,813d1c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  813d14:	00800104 	movi	r2,4
  813d18:	00003506 	br	813df0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813d1c:	e0bfff17 	ldw	r2,-4(fp)
  813d20:	10800003 	ldbu	r2,0(r2)
  813d24:	10803fcc 	andi	r2,r2,255
  813d28:	108000e0 	cmpeqi	r2,r2,3
  813d2c:	1000021e 	bne	r2,zero,813d38 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  813d30:	00800044 	movi	r2,1
  813d34:	00002e06 	br	813df0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d38:	0005303a 	rdctl	r2,status
  813d3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d40:	e0fffe17 	ldw	r3,-8(fp)
  813d44:	00bfff84 	movi	r2,-2
  813d48:	1884703a 	and	r2,r3,r2
  813d4c:	1001703a 	wrctl	status,r2
  
  return context;
  813d50:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  813d54:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  813d58:	e0bfff17 	ldw	r2,-4(fp)
  813d5c:	10800283 	ldbu	r2,10(r2)
  813d60:	10803fcc 	andi	r2,r2,255
  813d64:	10000c26 	beq	r2,zero,813d98 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  813d68:	000f883a 	mov	r7,zero
  813d6c:	01800044 	movi	r6,1
  813d70:	000b883a 	mov	r5,zero
  813d74:	e13fff17 	ldw	r4,-4(fp)
  813d78:	080f38c0 	call	80f38c <OS_EventTaskRdy>
  813d7c:	e0bffa17 	ldw	r2,-24(fp)
  813d80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d84:	e0bffb17 	ldw	r2,-20(fp)
  813d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  813d8c:	080fdd80 	call	80fdd8 <OS_Sched>
        return (OS_ERR_NONE);
  813d90:	0005883a 	mov	r2,zero
  813d94:	00001606 	br	813df0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  813d98:	e0bfff17 	ldw	r2,-4(fp)
  813d9c:	1080020b 	ldhu	r2,8(r2)
  813da0:	10ffffcc 	andi	r3,r2,65535
  813da4:	00bfffd4 	movui	r2,65535
  813da8:	18800c26 	beq	r3,r2,813ddc <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  813dac:	e0bfff17 	ldw	r2,-4(fp)
  813db0:	1080020b 	ldhu	r2,8(r2)
  813db4:	10800044 	addi	r2,r2,1
  813db8:	1007883a 	mov	r3,r2
  813dbc:	e0bfff17 	ldw	r2,-4(fp)
  813dc0:	10c0020d 	sth	r3,8(r2)
  813dc4:	e0bffa17 	ldw	r2,-24(fp)
  813dc8:	e0bffc15 	stw	r2,-16(fp)
  813dcc:	e0bffc17 	ldw	r2,-16(fp)
  813dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  813dd4:	0005883a 	mov	r2,zero
  813dd8:	00000506 	br	813df0 <OSSemPost+0xfc>
  813ddc:	e0bffa17 	ldw	r2,-24(fp)
  813de0:	e0bffd15 	stw	r2,-12(fp)
  813de4:	e0bffd17 	ldw	r2,-12(fp)
  813de8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  813dec:	00800c84 	movi	r2,50
}
  813df0:	e037883a 	mov	sp,fp
  813df4:	dfc00117 	ldw	ra,4(sp)
  813df8:	df000017 	ldw	fp,0(sp)
  813dfc:	dec00204 	addi	sp,sp,8
  813e00:	f800283a 	ret

00813e04 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  813e04:	defff704 	addi	sp,sp,-36
  813e08:	df000815 	stw	fp,32(sp)
  813e0c:	df000804 	addi	fp,sp,32
  813e10:	e13ffe15 	stw	r4,-8(fp)
  813e14:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  813e18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  813e1c:	e0bffe17 	ldw	r2,-8(fp)
  813e20:	1000021e 	bne	r2,zero,813e2c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  813e24:	00800104 	movi	r2,4
  813e28:	00003606 	br	813f04 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  813e2c:	e0bfff17 	ldw	r2,-4(fp)
  813e30:	1000021e 	bne	r2,zero,813e3c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  813e34:	00800244 	movi	r2,9
  813e38:	00003206 	br	813f04 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  813e3c:	e0bffe17 	ldw	r2,-8(fp)
  813e40:	10800003 	ldbu	r2,0(r2)
  813e44:	10803fcc 	andi	r2,r2,255
  813e48:	108000e0 	cmpeqi	r2,r2,3
  813e4c:	1000021e 	bne	r2,zero,813e58 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  813e50:	00800044 	movi	r2,1
  813e54:	00002b06 	br	813f04 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813e58:	0005303a 	rdctl	r2,status
  813e5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813e60:	e0fffd17 	ldw	r3,-12(fp)
  813e64:	00bfff84 	movi	r2,-2
  813e68:	1884703a 	and	r2,r3,r2
  813e6c:	1001703a 	wrctl	status,r2
  
  return context;
  813e70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813e74:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  813e78:	e0bffe17 	ldw	r2,-8(fp)
  813e7c:	10c00283 	ldbu	r3,10(r2)
  813e80:	e0bfff17 	ldw	r2,-4(fp)
  813e84:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  813e88:	e0bffe17 	ldw	r2,-8(fp)
  813e8c:	108002c4 	addi	r2,r2,11
  813e90:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  813e94:	e0bfff17 	ldw	r2,-4(fp)
  813e98:	10800084 	addi	r2,r2,2
  813e9c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813ea0:	e03ffa05 	stb	zero,-24(fp)
  813ea4:	00000b06 	br	813ed4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  813ea8:	e0bff917 	ldw	r2,-28(fp)
  813eac:	10c00044 	addi	r3,r2,1
  813eb0:	e0fff915 	stw	r3,-28(fp)
  813eb4:	e0fff817 	ldw	r3,-32(fp)
  813eb8:	19000044 	addi	r4,r3,1
  813ebc:	e13ff815 	stw	r4,-32(fp)
  813ec0:	18c00003 	ldbu	r3,0(r3)
  813ec4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813ec8:	e0bffa03 	ldbu	r2,-24(fp)
  813ecc:	10800044 	addi	r2,r2,1
  813ed0:	e0bffa05 	stb	r2,-24(fp)
  813ed4:	e0bffa03 	ldbu	r2,-24(fp)
  813ed8:	108000f0 	cmpltui	r2,r2,3
  813edc:	103ff21e 	bne	r2,zero,813ea8 <__alt_mem_epcs_flash_controller_0+0xff80aea8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  813ee0:	e0bffe17 	ldw	r2,-8(fp)
  813ee4:	10c0020b 	ldhu	r3,8(r2)
  813ee8:	e0bfff17 	ldw	r2,-4(fp)
  813eec:	10c0000d 	sth	r3,0(r2)
  813ef0:	e0bffb17 	ldw	r2,-20(fp)
  813ef4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ef8:	e0bffc17 	ldw	r2,-16(fp)
  813efc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813f00:	0005883a 	mov	r2,zero
}
  813f04:	e037883a 	mov	sp,fp
  813f08:	df000017 	ldw	fp,0(sp)
  813f0c:	dec00104 	addi	sp,sp,4
  813f10:	f800283a 	ret

00813f14 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  813f14:	defff904 	addi	sp,sp,-28
  813f18:	df000615 	stw	fp,24(sp)
  813f1c:	df000604 	addi	fp,sp,24
  813f20:	e13ffd15 	stw	r4,-12(fp)
  813f24:	2805883a 	mov	r2,r5
  813f28:	e1bfff15 	stw	r6,-4(fp)
  813f2c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813f30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  813f34:	e0bfff17 	ldw	r2,-4(fp)
  813f38:	10003126 	beq	r2,zero,814000 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813f3c:	e0bffd17 	ldw	r2,-12(fp)
  813f40:	1000041e 	bne	r2,zero,813f54 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  813f44:	e0bfff17 	ldw	r2,-4(fp)
  813f48:	00c00104 	movi	r3,4
  813f4c:	10c00005 	stb	r3,0(r2)
        return;
  813f50:	00002c06 	br	814004 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813f54:	e0bffd17 	ldw	r2,-12(fp)
  813f58:	10800003 	ldbu	r2,0(r2)
  813f5c:	10803fcc 	andi	r2,r2,255
  813f60:	108000e0 	cmpeqi	r2,r2,3
  813f64:	1000041e 	bne	r2,zero,813f78 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  813f68:	e0bfff17 	ldw	r2,-4(fp)
  813f6c:	00c00044 	movi	r3,1
  813f70:	10c00005 	stb	r3,0(r2)
        return;
  813f74:	00002306 	br	814004 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f78:	0005303a 	rdctl	r2,status
  813f7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f80:	e0fffc17 	ldw	r3,-16(fp)
  813f84:	00bfff84 	movi	r2,-2
  813f88:	1884703a 	and	r2,r3,r2
  813f8c:	1001703a 	wrctl	status,r2
  
  return context;
  813f90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813f94:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  813f98:	e0bfff17 	ldw	r2,-4(fp)
  813f9c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  813fa0:	e0bffd17 	ldw	r2,-12(fp)
  813fa4:	1080020b 	ldhu	r2,8(r2)
  813fa8:	10bfffcc 	andi	r2,r2,65535
  813fac:	10000426 	beq	r2,zero,813fc0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  813fb0:	e0bffd17 	ldw	r2,-12(fp)
  813fb4:	e0fffe0b 	ldhu	r3,-8(fp)
  813fb8:	10c0020d 	sth	r3,8(r2)
  813fbc:	00000b06 	br	813fec <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  813fc0:	e0bffd17 	ldw	r2,-12(fp)
  813fc4:	10800283 	ldbu	r2,10(r2)
  813fc8:	10803fcc 	andi	r2,r2,255
  813fcc:	1000041e 	bne	r2,zero,813fe0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  813fd0:	e0bffd17 	ldw	r2,-12(fp)
  813fd4:	e0fffe0b 	ldhu	r3,-8(fp)
  813fd8:	10c0020d 	sth	r3,8(r2)
  813fdc:	00000306 	br	813fec <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  813fe0:	e0bfff17 	ldw	r2,-4(fp)
  813fe4:	00c01244 	movi	r3,73
  813fe8:	10c00005 	stb	r3,0(r2)
  813fec:	e0bffa17 	ldw	r2,-24(fp)
  813ff0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ff4:	e0bffb17 	ldw	r2,-20(fp)
  813ff8:	1001703a 	wrctl	status,r2
  813ffc:	00000106 	br	814004 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  814000:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  814004:	e037883a 	mov	sp,fp
  814008:	df000017 	ldw	fp,0(sp)
  81400c:	dec00104 	addi	sp,sp,4
  814010:	f800283a 	ret

00814014 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  814014:	defff104 	addi	sp,sp,-60
  814018:	dfc00e15 	stw	ra,56(sp)
  81401c:	df000d15 	stw	fp,52(sp)
  814020:	df000d04 	addi	fp,sp,52
  814024:	2007883a 	mov	r3,r4
  814028:	2805883a 	mov	r2,r5
  81402c:	e0fffe05 	stb	r3,-8(fp)
  814030:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  814034:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  814038:	e0bffe03 	ldbu	r2,-8(fp)
  81403c:	10800530 	cmpltui	r2,r2,20
  814040:	1000051e 	bne	r2,zero,814058 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  814044:	e0bffe03 	ldbu	r2,-8(fp)
  814048:	10803fe0 	cmpeqi	r2,r2,255
  81404c:	1000021e 	bne	r2,zero,814058 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  814050:	00800a84 	movi	r2,42
  814054:	00012606 	br	8144f0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  814058:	e0bfff03 	ldbu	r2,-4(fp)
  81405c:	10800530 	cmpltui	r2,r2,20
  814060:	1000021e 	bne	r2,zero,81406c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  814064:	00800a84 	movi	r2,42
  814068:	00012106 	br	8144f0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81406c:	0005303a 	rdctl	r2,status
  814070:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814074:	e0fffd17 	ldw	r3,-12(fp)
  814078:	00bfff84 	movi	r2,-2
  81407c:	1884703a 	and	r2,r3,r2
  814080:	1001703a 	wrctl	status,r2
  
  return context;
  814084:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814088:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  81408c:	e0ffff03 	ldbu	r3,-4(fp)
  814090:	008020b4 	movhi	r2,130
  814094:	10979904 	addi	r2,r2,24164
  814098:	18c7883a 	add	r3,r3,r3
  81409c:	18c7883a 	add	r3,r3,r3
  8140a0:	10c5883a 	add	r2,r2,r3
  8140a4:	10800017 	ldw	r2,0(r2)
  8140a8:	10000626 	beq	r2,zero,8140c4 <OSTaskChangePrio+0xb0>
  8140ac:	e0bff517 	ldw	r2,-44(fp)
  8140b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8140b4:	e0bff617 	ldw	r2,-40(fp)
  8140b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  8140bc:	00800a04 	movi	r2,40
  8140c0:	00010b06 	br	8144f0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  8140c4:	e0bffe03 	ldbu	r2,-8(fp)
  8140c8:	10803fd8 	cmpnei	r2,r2,255
  8140cc:	1000031e 	bne	r2,zero,8140dc <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  8140d0:	d0a07217 	ldw	r2,-32312(gp)
  8140d4:	10800c83 	ldbu	r2,50(r2)
  8140d8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  8140dc:	e0fffe03 	ldbu	r3,-8(fp)
  8140e0:	008020b4 	movhi	r2,130
  8140e4:	10979904 	addi	r2,r2,24164
  8140e8:	18c7883a 	add	r3,r3,r3
  8140ec:	18c7883a 	add	r3,r3,r3
  8140f0:	10c5883a 	add	r2,r2,r3
  8140f4:	10800017 	ldw	r2,0(r2)
  8140f8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  8140fc:	e0bff817 	ldw	r2,-32(fp)
  814100:	1000061e 	bne	r2,zero,81411c <OSTaskChangePrio+0x108>
  814104:	e0bff517 	ldw	r2,-44(fp)
  814108:	e0bff715 	stw	r2,-36(fp)
  81410c:	e0bff717 	ldw	r2,-36(fp)
  814110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  814114:	00800a44 	movi	r2,41
  814118:	0000f506 	br	8144f0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  81411c:	e0bff817 	ldw	r2,-32(fp)
  814120:	10800058 	cmpnei	r2,r2,1
  814124:	1000061e 	bne	r2,zero,814140 <OSTaskChangePrio+0x12c>
  814128:	e0bff517 	ldw	r2,-44(fp)
  81412c:	e0bff915 	stw	r2,-28(fp)
  814130:	e0bff917 	ldw	r2,-28(fp)
  814134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  814138:	008010c4 	movi	r2,67
  81413c:	0000ec06 	br	8144f0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  814140:	e0bfff03 	ldbu	r2,-4(fp)
  814144:	1004d0fa 	srli	r2,r2,3
  814148:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  81414c:	e0bfff03 	ldbu	r2,-4(fp)
  814150:	108001cc 	andi	r2,r2,7
  814154:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  814158:	e0bffb03 	ldbu	r2,-20(fp)
  81415c:	00c00044 	movi	r3,1
  814160:	1884983a 	sll	r2,r3,r2
  814164:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  814168:	e0bffb43 	ldbu	r2,-19(fp)
  81416c:	00c00044 	movi	r3,1
  814170:	1884983a 	sll	r2,r3,r2
  814174:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  814178:	e0fffe03 	ldbu	r3,-8(fp)
  81417c:	008020b4 	movhi	r2,130
  814180:	10979904 	addi	r2,r2,24164
  814184:	18c7883a 	add	r3,r3,r3
  814188:	18c7883a 	add	r3,r3,r3
  81418c:	10c5883a 	add	r2,r2,r3
  814190:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  814194:	e0ffff03 	ldbu	r3,-4(fp)
  814198:	008020b4 	movhi	r2,130
  81419c:	10979904 	addi	r2,r2,24164
  8141a0:	18c7883a 	add	r3,r3,r3
  8141a4:	18c7883a 	add	r3,r3,r3
  8141a8:	10c5883a 	add	r2,r2,r3
  8141ac:	e0fff817 	ldw	r3,-32(fp)
  8141b0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  8141b4:	e0bff817 	ldw	r2,-32(fp)
  8141b8:	10800d03 	ldbu	r2,52(r2)
  8141bc:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  8141c0:	e0bff817 	ldw	r2,-32(fp)
  8141c4:	10800d83 	ldbu	r2,54(r2)
  8141c8:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  8141cc:	e0bff817 	ldw	r2,-32(fp)
  8141d0:	10800d43 	ldbu	r2,53(r2)
  8141d4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  8141d8:	e0fffc03 	ldbu	r3,-16(fp)
  8141dc:	d0a06f44 	addi	r2,gp,-32323
  8141e0:	1885883a 	add	r2,r3,r2
  8141e4:	10c00003 	ldbu	r3,0(r2)
  8141e8:	e0bffc83 	ldbu	r2,-14(fp)
  8141ec:	1884703a 	and	r2,r3,r2
  8141f0:	10803fcc 	andi	r2,r2,255
  8141f4:	10002826 	beq	r2,zero,814298 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  8141f8:	e0fffc03 	ldbu	r3,-16(fp)
  8141fc:	e13ffc03 	ldbu	r4,-16(fp)
  814200:	d0a06f44 	addi	r2,gp,-32323
  814204:	2085883a 	add	r2,r4,r2
  814208:	10800003 	ldbu	r2,0(r2)
  81420c:	1009883a 	mov	r4,r2
  814210:	e0bffc83 	ldbu	r2,-14(fp)
  814214:	0084303a 	nor	r2,zero,r2
  814218:	2084703a 	and	r2,r4,r2
  81421c:	1009883a 	mov	r4,r2
  814220:	d0a06f44 	addi	r2,gp,-32323
  814224:	1885883a 	add	r2,r3,r2
  814228:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  81422c:	e0fffc03 	ldbu	r3,-16(fp)
  814230:	d0a06f44 	addi	r2,gp,-32323
  814234:	1885883a 	add	r2,r3,r2
  814238:	10800003 	ldbu	r2,0(r2)
  81423c:	10803fcc 	andi	r2,r2,255
  814240:	1000061e 	bne	r2,zero,81425c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  814244:	e0bffc43 	ldbu	r2,-15(fp)
  814248:	0084303a 	nor	r2,zero,r2
  81424c:	1007883a 	mov	r3,r2
  814250:	d0a06f03 	ldbu	r2,-32324(gp)
  814254:	1884703a 	and	r2,r3,r2
  814258:	d0a06f05 	stb	r2,-32324(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81425c:	d0e06f03 	ldbu	r3,-32324(gp)
  814260:	e0bffb83 	ldbu	r2,-18(fp)
  814264:	1884b03a 	or	r2,r3,r2
  814268:	d0a06f05 	stb	r2,-32324(gp)
         OSRdyTbl[y_new] |= bitx_new;
  81426c:	e0fffb03 	ldbu	r3,-20(fp)
  814270:	e13ffb03 	ldbu	r4,-20(fp)
  814274:	d0a06f44 	addi	r2,gp,-32323
  814278:	2085883a 	add	r2,r4,r2
  81427c:	11000003 	ldbu	r4,0(r2)
  814280:	e0bffbc3 	ldbu	r2,-17(fp)
  814284:	2084b03a 	or	r2,r4,r2
  814288:	1009883a 	mov	r4,r2
  81428c:	d0a06f44 	addi	r2,gp,-32323
  814290:	1885883a 	add	r2,r3,r2
  814294:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  814298:	e0bff817 	ldw	r2,-32(fp)
  81429c:	10800717 	ldw	r2,28(r2)
  8142a0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  8142a4:	e0bff317 	ldw	r2,-52(fp)
  8142a8:	10003326 	beq	r2,zero,814378 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  8142ac:	e0bffc03 	ldbu	r2,-16(fp)
  8142b0:	e0fffc03 	ldbu	r3,-16(fp)
  8142b4:	e13ff317 	ldw	r4,-52(fp)
  8142b8:	20c7883a 	add	r3,r4,r3
  8142bc:	18c002c4 	addi	r3,r3,11
  8142c0:	18c00003 	ldbu	r3,0(r3)
  8142c4:	1809883a 	mov	r4,r3
  8142c8:	e0fffc83 	ldbu	r3,-14(fp)
  8142cc:	00c6303a 	nor	r3,zero,r3
  8142d0:	20c6703a 	and	r3,r4,r3
  8142d4:	1809883a 	mov	r4,r3
  8142d8:	e0fff317 	ldw	r3,-52(fp)
  8142dc:	1885883a 	add	r2,r3,r2
  8142e0:	108002c4 	addi	r2,r2,11
  8142e4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  8142e8:	e0bffc03 	ldbu	r2,-16(fp)
  8142ec:	e0fff317 	ldw	r3,-52(fp)
  8142f0:	1885883a 	add	r2,r3,r2
  8142f4:	108002c4 	addi	r2,r2,11
  8142f8:	10800003 	ldbu	r2,0(r2)
  8142fc:	10803fcc 	andi	r2,r2,255
  814300:	1000091e 	bne	r2,zero,814328 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  814304:	e0bff317 	ldw	r2,-52(fp)
  814308:	10800283 	ldbu	r2,10(r2)
  81430c:	1007883a 	mov	r3,r2
  814310:	e0bffc43 	ldbu	r2,-15(fp)
  814314:	0084303a 	nor	r2,zero,r2
  814318:	1884703a 	and	r2,r3,r2
  81431c:	1007883a 	mov	r3,r2
  814320:	e0bff317 	ldw	r2,-52(fp)
  814324:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  814328:	e0bff317 	ldw	r2,-52(fp)
  81432c:	10c00283 	ldbu	r3,10(r2)
  814330:	e0bffb83 	ldbu	r2,-18(fp)
  814334:	1884b03a 	or	r2,r3,r2
  814338:	1007883a 	mov	r3,r2
  81433c:	e0bff317 	ldw	r2,-52(fp)
  814340:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  814344:	e0bffb03 	ldbu	r2,-20(fp)
  814348:	e0fffb03 	ldbu	r3,-20(fp)
  81434c:	e13ff317 	ldw	r4,-52(fp)
  814350:	20c7883a 	add	r3,r4,r3
  814354:	18c002c4 	addi	r3,r3,11
  814358:	19000003 	ldbu	r4,0(r3)
  81435c:	e0fffbc3 	ldbu	r3,-17(fp)
  814360:	20c6b03a 	or	r3,r4,r3
  814364:	1809883a 	mov	r4,r3
  814368:	e0fff317 	ldw	r3,-52(fp)
  81436c:	1885883a 	add	r2,r3,r2
  814370:	108002c4 	addi	r2,r2,11
  814374:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  814378:	e0bff817 	ldw	r2,-32(fp)
  81437c:	10800817 	ldw	r2,32(r2)
  814380:	10004226 	beq	r2,zero,81448c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  814384:	e0bff817 	ldw	r2,-32(fp)
  814388:	10800817 	ldw	r2,32(r2)
  81438c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  814390:	e0bff417 	ldw	r2,-48(fp)
  814394:	10800017 	ldw	r2,0(r2)
  814398:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  81439c:	00003906 	br	814484 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  8143a0:	e0bffc03 	ldbu	r2,-16(fp)
  8143a4:	e0fffc03 	ldbu	r3,-16(fp)
  8143a8:	e13ff317 	ldw	r4,-52(fp)
  8143ac:	20c7883a 	add	r3,r4,r3
  8143b0:	18c002c4 	addi	r3,r3,11
  8143b4:	18c00003 	ldbu	r3,0(r3)
  8143b8:	1809883a 	mov	r4,r3
  8143bc:	e0fffc83 	ldbu	r3,-14(fp)
  8143c0:	00c6303a 	nor	r3,zero,r3
  8143c4:	20c6703a 	and	r3,r4,r3
  8143c8:	1809883a 	mov	r4,r3
  8143cc:	e0fff317 	ldw	r3,-52(fp)
  8143d0:	1885883a 	add	r2,r3,r2
  8143d4:	108002c4 	addi	r2,r2,11
  8143d8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8143dc:	e0bffc03 	ldbu	r2,-16(fp)
  8143e0:	e0fff317 	ldw	r3,-52(fp)
  8143e4:	1885883a 	add	r2,r3,r2
  8143e8:	108002c4 	addi	r2,r2,11
  8143ec:	10800003 	ldbu	r2,0(r2)
  8143f0:	10803fcc 	andi	r2,r2,255
  8143f4:	1000091e 	bne	r2,zero,81441c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  8143f8:	e0bff317 	ldw	r2,-52(fp)
  8143fc:	10800283 	ldbu	r2,10(r2)
  814400:	1007883a 	mov	r3,r2
  814404:	e0bffc43 	ldbu	r2,-15(fp)
  814408:	0084303a 	nor	r2,zero,r2
  81440c:	1884703a 	and	r2,r3,r2
  814410:	1007883a 	mov	r3,r2
  814414:	e0bff317 	ldw	r2,-52(fp)
  814418:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81441c:	e0bff317 	ldw	r2,-52(fp)
  814420:	10c00283 	ldbu	r3,10(r2)
  814424:	e0bffb83 	ldbu	r2,-18(fp)
  814428:	1884b03a 	or	r2,r3,r2
  81442c:	1007883a 	mov	r3,r2
  814430:	e0bff317 	ldw	r2,-52(fp)
  814434:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  814438:	e0bffb03 	ldbu	r2,-20(fp)
  81443c:	e0fffb03 	ldbu	r3,-20(fp)
  814440:	e13ff317 	ldw	r4,-52(fp)
  814444:	20c7883a 	add	r3,r4,r3
  814448:	18c002c4 	addi	r3,r3,11
  81444c:	19000003 	ldbu	r4,0(r3)
  814450:	e0fffbc3 	ldbu	r3,-17(fp)
  814454:	20c6b03a 	or	r3,r4,r3
  814458:	1809883a 	mov	r4,r3
  81445c:	e0fff317 	ldw	r3,-52(fp)
  814460:	1885883a 	add	r2,r3,r2
  814464:	108002c4 	addi	r2,r2,11
  814468:	11000005 	stb	r4,0(r2)
            pevents++;
  81446c:	e0bff417 	ldw	r2,-48(fp)
  814470:	10800104 	addi	r2,r2,4
  814474:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  814478:	e0bff417 	ldw	r2,-48(fp)
  81447c:	10800017 	ldw	r2,0(r2)
  814480:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  814484:	e0bff317 	ldw	r2,-52(fp)
  814488:	103fc51e 	bne	r2,zero,8143a0 <__alt_mem_epcs_flash_controller_0+0xff80b3a0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81448c:	e0bff817 	ldw	r2,-32(fp)
  814490:	e0ffff03 	ldbu	r3,-4(fp)
  814494:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  814498:	e0bff817 	ldw	r2,-32(fp)
  81449c:	e0fffb03 	ldbu	r3,-20(fp)
  8144a0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  8144a4:	e0bff817 	ldw	r2,-32(fp)
  8144a8:	e0fffb43 	ldbu	r3,-19(fp)
  8144ac:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  8144b0:	e0bff817 	ldw	r2,-32(fp)
  8144b4:	e0fffb83 	ldbu	r3,-18(fp)
  8144b8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  8144bc:	e0bff817 	ldw	r2,-32(fp)
  8144c0:	e0fffbc3 	ldbu	r3,-17(fp)
  8144c4:	10c00d45 	stb	r3,53(r2)
  8144c8:	e0bff517 	ldw	r2,-44(fp)
  8144cc:	e0bffa15 	stw	r2,-24(fp)
  8144d0:	e0bffa17 	ldw	r2,-24(fp)
  8144d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8144d8:	d0a06343 	ldbu	r2,-32371(gp)
  8144dc:	10803fcc 	andi	r2,r2,255
  8144e0:	10800058 	cmpnei	r2,r2,1
  8144e4:	1000011e 	bne	r2,zero,8144ec <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  8144e8:	080fdd80 	call	80fdd8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8144ec:	0005883a 	mov	r2,zero
}
  8144f0:	e037883a 	mov	sp,fp
  8144f4:	dfc00117 	ldw	ra,4(sp)
  8144f8:	df000017 	ldw	fp,0(sp)
  8144fc:	dec00204 	addi	sp,sp,8
  814500:	f800283a 	ret

00814504 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  814504:	deffee04 	addi	sp,sp,-72
  814508:	dfc01115 	stw	ra,68(sp)
  81450c:	df001015 	stw	fp,64(sp)
  814510:	df001004 	addi	fp,sp,64
  814514:	e13ffc15 	stw	r4,-16(fp)
  814518:	e17ffd15 	stw	r5,-12(fp)
  81451c:	e1bffe15 	stw	r6,-8(fp)
  814520:	3805883a 	mov	r2,r7
  814524:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  814528:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81452c:	e0bfff03 	ldbu	r2,-4(fp)
  814530:	10800570 	cmpltui	r2,r2,21
  814534:	1000021e 	bne	r2,zero,814540 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  814538:	00800a84 	movi	r2,42
  81453c:	00005706 	br	81469c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814540:	0005303a 	rdctl	r2,status
  814544:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814548:	e0fffb17 	ldw	r3,-20(fp)
  81454c:	00bfff84 	movi	r2,-2
  814550:	1884703a 	and	r2,r3,r2
  814554:	1001703a 	wrctl	status,r2
  
  return context;
  814558:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81455c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  814560:	d0a07103 	ldbu	r2,-32316(gp)
  814564:	10803fcc 	andi	r2,r2,255
  814568:	10000626 	beq	r2,zero,814584 <OSTaskCreate+0x80>
  81456c:	e0bff317 	ldw	r2,-52(fp)
  814570:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814574:	e0bff417 	ldw	r2,-48(fp)
  814578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81457c:	00800f04 	movi	r2,60
  814580:	00004606 	br	81469c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  814584:	e0ffff03 	ldbu	r3,-4(fp)
  814588:	008020b4 	movhi	r2,130
  81458c:	10979904 	addi	r2,r2,24164
  814590:	18c7883a 	add	r3,r3,r3
  814594:	18c7883a 	add	r3,r3,r3
  814598:	10c5883a 	add	r2,r2,r3
  81459c:	10800017 	ldw	r2,0(r2)
  8145a0:	1000391e 	bne	r2,zero,814688 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8145a4:	e0ffff03 	ldbu	r3,-4(fp)
  8145a8:	008020b4 	movhi	r2,130
  8145ac:	10979904 	addi	r2,r2,24164
  8145b0:	18c7883a 	add	r3,r3,r3
  8145b4:	18c7883a 	add	r3,r3,r3
  8145b8:	10c5883a 	add	r2,r2,r3
  8145bc:	00c00044 	movi	r3,1
  8145c0:	10c00015 	stw	r3,0(r2)
  8145c4:	e0bff317 	ldw	r2,-52(fp)
  8145c8:	e0bff515 	stw	r2,-44(fp)
  8145cc:	e0bff517 	ldw	r2,-44(fp)
  8145d0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  8145d4:	000f883a 	mov	r7,zero
  8145d8:	e1bffe17 	ldw	r6,-8(fp)
  8145dc:	e17ffd17 	ldw	r5,-12(fp)
  8145e0:	e13ffc17 	ldw	r4,-16(fp)
  8145e4:	08192f80 	call	8192f8 <OSTaskStkInit>
  8145e8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  8145ec:	e0bfff03 	ldbu	r2,-4(fp)
  8145f0:	d8000215 	stw	zero,8(sp)
  8145f4:	d8000115 	stw	zero,4(sp)
  8145f8:	d8000015 	stw	zero,0(sp)
  8145fc:	000f883a 	mov	r7,zero
  814600:	000d883a 	mov	r6,zero
  814604:	e17ff717 	ldw	r5,-36(fp)
  814608:	1009883a 	mov	r4,r2
  81460c:	08101d80 	call	8101d8 <OS_TCBInit>
  814610:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  814614:	e0bff803 	ldbu	r2,-32(fp)
  814618:	1000061e 	bne	r2,zero,814634 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81461c:	d0a06343 	ldbu	r2,-32371(gp)
  814620:	10803fcc 	andi	r2,r2,255
  814624:	10800058 	cmpnei	r2,r2,1
  814628:	1000151e 	bne	r2,zero,814680 <OSTaskCreate+0x17c>
                OS_Sched();
  81462c:	080fdd80 	call	80fdd8 <OS_Sched>
  814630:	00001306 	br	814680 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814634:	0005303a 	rdctl	r2,status
  814638:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81463c:	e0fffa17 	ldw	r3,-24(fp)
  814640:	00bfff84 	movi	r2,-2
  814644:	1884703a 	and	r2,r3,r2
  814648:	1001703a 	wrctl	status,r2
  
  return context;
  81464c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  814650:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  814654:	e0ffff03 	ldbu	r3,-4(fp)
  814658:	008020b4 	movhi	r2,130
  81465c:	10979904 	addi	r2,r2,24164
  814660:	18c7883a 	add	r3,r3,r3
  814664:	18c7883a 	add	r3,r3,r3
  814668:	10c5883a 	add	r2,r2,r3
  81466c:	10000015 	stw	zero,0(r2)
  814670:	e0bff317 	ldw	r2,-52(fp)
  814674:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814678:	e0bff617 	ldw	r2,-40(fp)
  81467c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  814680:	e0bff803 	ldbu	r2,-32(fp)
  814684:	00000506 	br	81469c <OSTaskCreate+0x198>
  814688:	e0bff317 	ldw	r2,-52(fp)
  81468c:	e0bff915 	stw	r2,-28(fp)
  814690:	e0bff917 	ldw	r2,-28(fp)
  814694:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  814698:	00800a04 	movi	r2,40
}
  81469c:	e037883a 	mov	sp,fp
  8146a0:	dfc00117 	ldw	ra,4(sp)
  8146a4:	df000017 	ldw	fp,0(sp)
  8146a8:	dec00204 	addi	sp,sp,8
  8146ac:	f800283a 	ret

008146b0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8146b0:	deffec04 	addi	sp,sp,-80
  8146b4:	dfc01315 	stw	ra,76(sp)
  8146b8:	df001215 	stw	fp,72(sp)
  8146bc:	df001204 	addi	fp,sp,72
  8146c0:	e13ffa15 	stw	r4,-24(fp)
  8146c4:	e17ffb15 	stw	r5,-20(fp)
  8146c8:	e1bffc15 	stw	r6,-16(fp)
  8146cc:	3809883a 	mov	r4,r7
  8146d0:	e0c00217 	ldw	r3,8(fp)
  8146d4:	e0800617 	ldw	r2,24(fp)
  8146d8:	e13ffd05 	stb	r4,-12(fp)
  8146dc:	e0fffe0d 	sth	r3,-8(fp)
  8146e0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8146e4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8146e8:	e0bffd03 	ldbu	r2,-12(fp)
  8146ec:	10800570 	cmpltui	r2,r2,21
  8146f0:	1000021e 	bne	r2,zero,8146fc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  8146f4:	00800a84 	movi	r2,42
  8146f8:	00006106 	br	814880 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8146fc:	0005303a 	rdctl	r2,status
  814700:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814704:	e0fff917 	ldw	r3,-28(fp)
  814708:	00bfff84 	movi	r2,-2
  81470c:	1884703a 	and	r2,r3,r2
  814710:	1001703a 	wrctl	status,r2
  
  return context;
  814714:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814718:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81471c:	d0a07103 	ldbu	r2,-32316(gp)
  814720:	10803fcc 	andi	r2,r2,255
  814724:	10000626 	beq	r2,zero,814740 <OSTaskCreateExt+0x90>
  814728:	e0bff117 	ldw	r2,-60(fp)
  81472c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814730:	e0bff217 	ldw	r2,-56(fp)
  814734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  814738:	00800f04 	movi	r2,60
  81473c:	00005006 	br	814880 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  814740:	e0fffd03 	ldbu	r3,-12(fp)
  814744:	008020b4 	movhi	r2,130
  814748:	10979904 	addi	r2,r2,24164
  81474c:	18c7883a 	add	r3,r3,r3
  814750:	18c7883a 	add	r3,r3,r3
  814754:	10c5883a 	add	r2,r2,r3
  814758:	10800017 	ldw	r2,0(r2)
  81475c:	1000431e 	bne	r2,zero,81486c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  814760:	e0fffd03 	ldbu	r3,-12(fp)
  814764:	008020b4 	movhi	r2,130
  814768:	10979904 	addi	r2,r2,24164
  81476c:	18c7883a 	add	r3,r3,r3
  814770:	18c7883a 	add	r3,r3,r3
  814774:	10c5883a 	add	r2,r2,r3
  814778:	00c00044 	movi	r3,1
  81477c:	10c00015 	stw	r3,0(r2)
  814780:	e0bff117 	ldw	r2,-60(fp)
  814784:	e0bff315 	stw	r2,-52(fp)
  814788:	e0bff317 	ldw	r2,-52(fp)
  81478c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  814790:	e0bfff0b 	ldhu	r2,-4(fp)
  814794:	100d883a 	mov	r6,r2
  814798:	e1400417 	ldw	r5,16(fp)
  81479c:	e1000317 	ldw	r4,12(fp)
  8147a0:	08157100 	call	815710 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  8147a4:	e0bfff0b 	ldhu	r2,-4(fp)
  8147a8:	100f883a 	mov	r7,r2
  8147ac:	e1bffc17 	ldw	r6,-16(fp)
  8147b0:	e17ffb17 	ldw	r5,-20(fp)
  8147b4:	e13ffa17 	ldw	r4,-24(fp)
  8147b8:	08192f80 	call	8192f8 <OSTaskStkInit>
  8147bc:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  8147c0:	e0fffd03 	ldbu	r3,-12(fp)
  8147c4:	e13ffe0b 	ldhu	r4,-8(fp)
  8147c8:	e0bfff0b 	ldhu	r2,-4(fp)
  8147cc:	d8800215 	stw	r2,8(sp)
  8147d0:	e0800517 	ldw	r2,20(fp)
  8147d4:	d8800115 	stw	r2,4(sp)
  8147d8:	e0800417 	ldw	r2,16(fp)
  8147dc:	d8800015 	stw	r2,0(sp)
  8147e0:	200f883a 	mov	r7,r4
  8147e4:	e1800317 	ldw	r6,12(fp)
  8147e8:	e17ff517 	ldw	r5,-44(fp)
  8147ec:	1809883a 	mov	r4,r3
  8147f0:	08101d80 	call	8101d8 <OS_TCBInit>
  8147f4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  8147f8:	e0bff603 	ldbu	r2,-40(fp)
  8147fc:	1000061e 	bne	r2,zero,814818 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  814800:	d0a06343 	ldbu	r2,-32371(gp)
  814804:	10803fcc 	andi	r2,r2,255
  814808:	10800058 	cmpnei	r2,r2,1
  81480c:	1000151e 	bne	r2,zero,814864 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  814810:	080fdd80 	call	80fdd8 <OS_Sched>
  814814:	00001306 	br	814864 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814818:	0005303a 	rdctl	r2,status
  81481c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814820:	e0fff817 	ldw	r3,-32(fp)
  814824:	00bfff84 	movi	r2,-2
  814828:	1884703a 	and	r2,r3,r2
  81482c:	1001703a 	wrctl	status,r2
  
  return context;
  814830:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  814834:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  814838:	e0fffd03 	ldbu	r3,-12(fp)
  81483c:	008020b4 	movhi	r2,130
  814840:	10979904 	addi	r2,r2,24164
  814844:	18c7883a 	add	r3,r3,r3
  814848:	18c7883a 	add	r3,r3,r3
  81484c:	10c5883a 	add	r2,r2,r3
  814850:	10000015 	stw	zero,0(r2)
  814854:	e0bff117 	ldw	r2,-60(fp)
  814858:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81485c:	e0bff417 	ldw	r2,-48(fp)
  814860:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  814864:	e0bff603 	ldbu	r2,-40(fp)
  814868:	00000506 	br	814880 <OSTaskCreateExt+0x1d0>
  81486c:	e0bff117 	ldw	r2,-60(fp)
  814870:	e0bff715 	stw	r2,-36(fp)
  814874:	e0bff717 	ldw	r2,-36(fp)
  814878:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81487c:	00800a04 	movi	r2,40
}
  814880:	e037883a 	mov	sp,fp
  814884:	dfc00117 	ldw	ra,4(sp)
  814888:	df000017 	ldw	fp,0(sp)
  81488c:	dec00204 	addi	sp,sp,8
  814890:	f800283a 	ret

00814894 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  814894:	defff404 	addi	sp,sp,-48
  814898:	dfc00b15 	stw	ra,44(sp)
  81489c:	df000a15 	stw	fp,40(sp)
  8148a0:	df000a04 	addi	fp,sp,40
  8148a4:	2005883a 	mov	r2,r4
  8148a8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  8148ac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  8148b0:	d0a07103 	ldbu	r2,-32316(gp)
  8148b4:	10803fcc 	andi	r2,r2,255
  8148b8:	10000226 	beq	r2,zero,8148c4 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  8148bc:	00801004 	movi	r2,64
  8148c0:	0000c006 	br	814bc4 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  8148c4:	e0bfff03 	ldbu	r2,-4(fp)
  8148c8:	10800518 	cmpnei	r2,r2,20
  8148cc:	1000021e 	bne	r2,zero,8148d8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  8148d0:	00800f84 	movi	r2,62
  8148d4:	0000bb06 	br	814bc4 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  8148d8:	e0bfff03 	ldbu	r2,-4(fp)
  8148dc:	10800530 	cmpltui	r2,r2,20
  8148e0:	1000051e 	bne	r2,zero,8148f8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  8148e4:	e0bfff03 	ldbu	r2,-4(fp)
  8148e8:	10803fe0 	cmpeqi	r2,r2,255
  8148ec:	1000021e 	bne	r2,zero,8148f8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  8148f0:	00800a84 	movi	r2,42
  8148f4:	0000b306 	br	814bc4 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8148f8:	0005303a 	rdctl	r2,status
  8148fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814900:	e0fffe17 	ldw	r3,-8(fp)
  814904:	00bfff84 	movi	r2,-2
  814908:	1884703a 	and	r2,r3,r2
  81490c:	1001703a 	wrctl	status,r2
  
  return context;
  814910:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  814914:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  814918:	e0bfff03 	ldbu	r2,-4(fp)
  81491c:	10803fd8 	cmpnei	r2,r2,255
  814920:	1000031e 	bne	r2,zero,814930 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  814924:	d0a07217 	ldw	r2,-32312(gp)
  814928:	10800c83 	ldbu	r2,50(r2)
  81492c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814930:	e0ffff03 	ldbu	r3,-4(fp)
  814934:	008020b4 	movhi	r2,130
  814938:	10979904 	addi	r2,r2,24164
  81493c:	18c7883a 	add	r3,r3,r3
  814940:	18c7883a 	add	r3,r3,r3
  814944:	10c5883a 	add	r2,r2,r3
  814948:	10800017 	ldw	r2,0(r2)
  81494c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  814950:	e0bff817 	ldw	r2,-32(fp)
  814954:	1000061e 	bne	r2,zero,814970 <OSTaskDel+0xdc>
  814958:	e0bff617 	ldw	r2,-40(fp)
  81495c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814960:	e0bff717 	ldw	r2,-36(fp)
  814964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814968:	008010c4 	movi	r2,67
  81496c:	00009506 	br	814bc4 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  814970:	e0bff817 	ldw	r2,-32(fp)
  814974:	10800058 	cmpnei	r2,r2,1
  814978:	1000061e 	bne	r2,zero,814994 <OSTaskDel+0x100>
  81497c:	e0bff617 	ldw	r2,-40(fp)
  814980:	e0bff915 	stw	r2,-28(fp)
  814984:	e0bff917 	ldw	r2,-28(fp)
  814988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81498c:	00800f44 	movi	r2,61
  814990:	00008c06 	br	814bc4 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  814994:	e0bff817 	ldw	r2,-32(fp)
  814998:	10800d03 	ldbu	r2,52(r2)
  81499c:	10c03fcc 	andi	r3,r2,255
  8149a0:	e0bff817 	ldw	r2,-32(fp)
  8149a4:	10800d03 	ldbu	r2,52(r2)
  8149a8:	11003fcc 	andi	r4,r2,255
  8149ac:	d0a06f44 	addi	r2,gp,-32323
  8149b0:	2085883a 	add	r2,r4,r2
  8149b4:	10800003 	ldbu	r2,0(r2)
  8149b8:	1009883a 	mov	r4,r2
  8149bc:	e0bff817 	ldw	r2,-32(fp)
  8149c0:	10800d43 	ldbu	r2,53(r2)
  8149c4:	0084303a 	nor	r2,zero,r2
  8149c8:	2084703a 	and	r2,r4,r2
  8149cc:	1009883a 	mov	r4,r2
  8149d0:	d0a06f44 	addi	r2,gp,-32323
  8149d4:	1885883a 	add	r2,r3,r2
  8149d8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  8149dc:	e0bff817 	ldw	r2,-32(fp)
  8149e0:	10800d03 	ldbu	r2,52(r2)
  8149e4:	10c03fcc 	andi	r3,r2,255
  8149e8:	d0a06f44 	addi	r2,gp,-32323
  8149ec:	1885883a 	add	r2,r3,r2
  8149f0:	10800003 	ldbu	r2,0(r2)
  8149f4:	10803fcc 	andi	r2,r2,255
  8149f8:	1000071e 	bne	r2,zero,814a18 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  8149fc:	e0bff817 	ldw	r2,-32(fp)
  814a00:	10800d83 	ldbu	r2,54(r2)
  814a04:	0084303a 	nor	r2,zero,r2
  814a08:	1007883a 	mov	r3,r2
  814a0c:	d0a06f03 	ldbu	r2,-32324(gp)
  814a10:	1884703a 	and	r2,r3,r2
  814a14:	d0a06f05 	stb	r2,-32324(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  814a18:	e0bff817 	ldw	r2,-32(fp)
  814a1c:	10800717 	ldw	r2,28(r2)
  814a20:	10000526 	beq	r2,zero,814a38 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  814a24:	e0bff817 	ldw	r2,-32(fp)
  814a28:	10800717 	ldw	r2,28(r2)
  814a2c:	100b883a 	mov	r5,r2
  814a30:	e13ff817 	ldw	r4,-32(fp)
  814a34:	080f7840 	call	80f784 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  814a38:	e0bff817 	ldw	r2,-32(fp)
  814a3c:	10800817 	ldw	r2,32(r2)
  814a40:	10000526 	beq	r2,zero,814a58 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  814a44:	e0bff817 	ldw	r2,-32(fp)
  814a48:	10800817 	ldw	r2,32(r2)
  814a4c:	100b883a 	mov	r5,r2
  814a50:	e13ff817 	ldw	r4,-32(fp)
  814a54:	080f83c0 	call	80f83c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  814a58:	e0bff817 	ldw	r2,-32(fp)
  814a5c:	10800a17 	ldw	r2,40(r2)
  814a60:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  814a64:	e0bffb17 	ldw	r2,-20(fp)
  814a68:	10000226 	beq	r2,zero,814a74 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  814a6c:	e13ffb17 	ldw	r4,-20(fp)
  814a70:	0811cac0 	call	811cac <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  814a74:	e0bff817 	ldw	r2,-32(fp)
  814a78:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  814a7c:	e0bff817 	ldw	r2,-32(fp)
  814a80:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  814a84:	e0bff817 	ldw	r2,-32(fp)
  814a88:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  814a8c:	d0a06303 	ldbu	r2,-32372(gp)
  814a90:	10803fcc 	andi	r2,r2,255
  814a94:	10803fe0 	cmpeqi	r2,r2,255
  814a98:	1000031e 	bne	r2,zero,814aa8 <OSTaskDel+0x214>
        OSLockNesting++;
  814a9c:	d0a06303 	ldbu	r2,-32372(gp)
  814aa0:	10800044 	addi	r2,r2,1
  814aa4:	d0a06305 	stb	r2,-32372(gp)
  814aa8:	e0bff617 	ldw	r2,-40(fp)
  814aac:	e0bffd15 	stw	r2,-12(fp)
  814ab0:	e0bffd17 	ldw	r2,-12(fp)
  814ab4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  814ab8:	080f36c0 	call	80f36c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814abc:	0005303a 	rdctl	r2,status
  814ac0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814ac4:	e0fffa17 	ldw	r3,-24(fp)
  814ac8:	00bfff84 	movi	r2,-2
  814acc:	1884703a 	and	r2,r3,r2
  814ad0:	1001703a 	wrctl	status,r2
  
  return context;
  814ad4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  814ad8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  814adc:	d0a06303 	ldbu	r2,-32372(gp)
  814ae0:	10803fcc 	andi	r2,r2,255
  814ae4:	10000326 	beq	r2,zero,814af4 <OSTaskDel+0x260>
        OSLockNesting--;
  814ae8:	d0a06303 	ldbu	r2,-32372(gp)
  814aec:	10bfffc4 	addi	r2,r2,-1
  814af0:	d0a06305 	stb	r2,-32372(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  814af4:	e13ff817 	ldw	r4,-32(fp)
  814af8:	08194780 	call	819478 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  814afc:	d0a06b43 	ldbu	r2,-32339(gp)
  814b00:	10bfffc4 	addi	r2,r2,-1
  814b04:	d0a06b45 	stb	r2,-32339(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  814b08:	e0ffff03 	ldbu	r3,-4(fp)
  814b0c:	008020b4 	movhi	r2,130
  814b10:	10979904 	addi	r2,r2,24164
  814b14:	18c7883a 	add	r3,r3,r3
  814b18:	18c7883a 	add	r3,r3,r3
  814b1c:	10c5883a 	add	r2,r2,r3
  814b20:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  814b24:	e0bff817 	ldw	r2,-32(fp)
  814b28:	10800617 	ldw	r2,24(r2)
  814b2c:	1000071e 	bne	r2,zero,814b4c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  814b30:	e0bff817 	ldw	r2,-32(fp)
  814b34:	10800517 	ldw	r2,20(r2)
  814b38:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  814b3c:	e0bff817 	ldw	r2,-32(fp)
  814b40:	10800517 	ldw	r2,20(r2)
  814b44:	d0a06615 	stw	r2,-32360(gp)
  814b48:	00000a06 	br	814b74 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  814b4c:	e0bff817 	ldw	r2,-32(fp)
  814b50:	10800617 	ldw	r2,24(r2)
  814b54:	e0fff817 	ldw	r3,-32(fp)
  814b58:	18c00517 	ldw	r3,20(r3)
  814b5c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  814b60:	e0bff817 	ldw	r2,-32(fp)
  814b64:	10800517 	ldw	r2,20(r2)
  814b68:	e0fff817 	ldw	r3,-32(fp)
  814b6c:	18c00617 	ldw	r3,24(r3)
  814b70:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  814b74:	d0e06a17 	ldw	r3,-32344(gp)
  814b78:	e0bff817 	ldw	r2,-32(fp)
  814b7c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  814b80:	e0bff817 	ldw	r2,-32(fp)
  814b84:	d0a06a15 	stw	r2,-32344(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  814b88:	e0bff817 	ldw	r2,-32(fp)
  814b8c:	00c00fc4 	movi	r3,63
  814b90:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  814b94:	e0bff817 	ldw	r2,-32(fp)
  814b98:	10001345 	stb	zero,77(r2)
  814b9c:	e0bff617 	ldw	r2,-40(fp)
  814ba0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814ba4:	e0bffc17 	ldw	r2,-16(fp)
  814ba8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  814bac:	d0a06343 	ldbu	r2,-32371(gp)
  814bb0:	10803fcc 	andi	r2,r2,255
  814bb4:	10800058 	cmpnei	r2,r2,1
  814bb8:	1000011e 	bne	r2,zero,814bc0 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  814bbc:	080fdd80 	call	80fdd8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  814bc0:	0005883a 	mov	r2,zero
}
  814bc4:	e037883a 	mov	sp,fp
  814bc8:	dfc00117 	ldw	ra,4(sp)
  814bcc:	df000017 	ldw	fp,0(sp)
  814bd0:	dec00204 	addi	sp,sp,8
  814bd4:	f800283a 	ret

00814bd8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  814bd8:	defff504 	addi	sp,sp,-44
  814bdc:	df000a15 	stw	fp,40(sp)
  814be0:	df000a04 	addi	fp,sp,40
  814be4:	2005883a 	mov	r2,r4
  814be8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814bec:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  814bf0:	e0bfff03 	ldbu	r2,-4(fp)
  814bf4:	10800518 	cmpnei	r2,r2,20
  814bf8:	1000021e 	bne	r2,zero,814c04 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  814bfc:	00800f84 	movi	r2,62
  814c00:	00004506 	br	814d18 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  814c04:	e0bfff03 	ldbu	r2,-4(fp)
  814c08:	10800530 	cmpltui	r2,r2,20
  814c0c:	1000051e 	bne	r2,zero,814c24 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  814c10:	e0bfff03 	ldbu	r2,-4(fp)
  814c14:	10803fe0 	cmpeqi	r2,r2,255
  814c18:	1000021e 	bne	r2,zero,814c24 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  814c1c:	00800a84 	movi	r2,42
  814c20:	00003d06 	br	814d18 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  814c24:	e0bfff03 	ldbu	r2,-4(fp)
  814c28:	10803fd8 	cmpnei	r2,r2,255
  814c2c:	1000111e 	bne	r2,zero,814c74 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c30:	0005303a 	rdctl	r2,status
  814c34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c38:	e0fff917 	ldw	r3,-28(fp)
  814c3c:	00bfff84 	movi	r2,-2
  814c40:	1884703a 	and	r2,r3,r2
  814c44:	1001703a 	wrctl	status,r2
  
  return context;
  814c48:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  814c4c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  814c50:	d0a07217 	ldw	r2,-32312(gp)
  814c54:	10800dc3 	ldbu	r2,55(r2)
  814c58:	e0bff805 	stb	r2,-32(fp)
  814c5c:	e0bff617 	ldw	r2,-40(fp)
  814c60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c64:	e0bffe17 	ldw	r2,-8(fp)
  814c68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  814c6c:	e0bff803 	ldbu	r2,-32(fp)
  814c70:	00002906 	br	814d18 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c74:	0005303a 	rdctl	r2,status
  814c78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c7c:	e0fff717 	ldw	r3,-36(fp)
  814c80:	00bfff84 	movi	r2,-2
  814c84:	1884703a 	and	r2,r3,r2
  814c88:	1001703a 	wrctl	status,r2
  
  return context;
  814c8c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  814c90:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  814c94:	e0ffff03 	ldbu	r3,-4(fp)
  814c98:	008020b4 	movhi	r2,130
  814c9c:	10979904 	addi	r2,r2,24164
  814ca0:	18c7883a 	add	r3,r3,r3
  814ca4:	18c7883a 	add	r3,r3,r3
  814ca8:	10c5883a 	add	r2,r2,r3
  814cac:	10800017 	ldw	r2,0(r2)
  814cb0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  814cb4:	e0bffb17 	ldw	r2,-20(fp)
  814cb8:	1000061e 	bne	r2,zero,814cd4 <OSTaskDelReq+0xfc>
  814cbc:	e0bff617 	ldw	r2,-40(fp)
  814cc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814cc4:	e0bffa17 	ldw	r2,-24(fp)
  814cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  814ccc:	008010c4 	movi	r2,67
  814cd0:	00001106 	br	814d18 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  814cd4:	e0bffb17 	ldw	r2,-20(fp)
  814cd8:	10800058 	cmpnei	r2,r2,1
  814cdc:	1000061e 	bne	r2,zero,814cf8 <OSTaskDelReq+0x120>
  814ce0:	e0bff617 	ldw	r2,-40(fp)
  814ce4:	e0bffc15 	stw	r2,-16(fp)
  814ce8:	e0bffc17 	ldw	r2,-16(fp)
  814cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  814cf0:	00800f44 	movi	r2,61
  814cf4:	00000806 	br	814d18 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  814cf8:	e0bffb17 	ldw	r2,-20(fp)
  814cfc:	00c00fc4 	movi	r3,63
  814d00:	10c00dc5 	stb	r3,55(r2)
  814d04:	e0bff617 	ldw	r2,-40(fp)
  814d08:	e0bffd15 	stw	r2,-12(fp)
  814d0c:	e0bffd17 	ldw	r2,-12(fp)
  814d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814d14:	0005883a 	mov	r2,zero
}
  814d18:	e037883a 	mov	sp,fp
  814d1c:	df000017 	ldw	fp,0(sp)
  814d20:	dec00104 	addi	sp,sp,4
  814d24:	f800283a 	ret

00814d28 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  814d28:	defff404 	addi	sp,sp,-48
  814d2c:	dfc00b15 	stw	ra,44(sp)
  814d30:	df000a15 	stw	fp,40(sp)
  814d34:	df000a04 	addi	fp,sp,40
  814d38:	2005883a 	mov	r2,r4
  814d3c:	e17ffe15 	stw	r5,-8(fp)
  814d40:	e1bfff15 	stw	r6,-4(fp)
  814d44:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  814d48:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  814d4c:	e0bfff17 	ldw	r2,-4(fp)
  814d50:	1000021e 	bne	r2,zero,814d5c <OSTaskNameGet+0x34>
        return (0);
  814d54:	0005883a 	mov	r2,zero
  814d58:	00005406 	br	814eac <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  814d5c:	e0bffd03 	ldbu	r2,-12(fp)
  814d60:	10800570 	cmpltui	r2,r2,21
  814d64:	1000081e 	bne	r2,zero,814d88 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  814d68:	e0bffd03 	ldbu	r2,-12(fp)
  814d6c:	10803fe0 	cmpeqi	r2,r2,255
  814d70:	1000051e 	bne	r2,zero,814d88 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  814d74:	e0bfff17 	ldw	r2,-4(fp)
  814d78:	00c00a84 	movi	r3,42
  814d7c:	10c00005 	stb	r3,0(r2)
            return (0);
  814d80:	0005883a 	mov	r2,zero
  814d84:	00004906 	br	814eac <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  814d88:	e0bffe17 	ldw	r2,-8(fp)
  814d8c:	1000051e 	bne	r2,zero,814da4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  814d90:	e0bfff17 	ldw	r2,-4(fp)
  814d94:	00c00304 	movi	r3,12
  814d98:	10c00005 	stb	r3,0(r2)
        return (0);
  814d9c:	0005883a 	mov	r2,zero
  814da0:	00004206 	br	814eac <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  814da4:	d0a07103 	ldbu	r2,-32316(gp)
  814da8:	10803fcc 	andi	r2,r2,255
  814dac:	10000526 	beq	r2,zero,814dc4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  814db0:	e0bfff17 	ldw	r2,-4(fp)
  814db4:	00c00444 	movi	r3,17
  814db8:	10c00005 	stb	r3,0(r2)
        return (0);
  814dbc:	0005883a 	mov	r2,zero
  814dc0:	00003a06 	br	814eac <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814dc4:	0005303a 	rdctl	r2,status
  814dc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814dcc:	e0fffc17 	ldw	r3,-16(fp)
  814dd0:	00bfff84 	movi	r2,-2
  814dd4:	1884703a 	and	r2,r3,r2
  814dd8:	1001703a 	wrctl	status,r2
  
  return context;
  814ddc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814de0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  814de4:	e0bffd03 	ldbu	r2,-12(fp)
  814de8:	10803fd8 	cmpnei	r2,r2,255
  814dec:	1000031e 	bne	r2,zero,814dfc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  814df0:	d0a07217 	ldw	r2,-32312(gp)
  814df4:	10800c83 	ldbu	r2,50(r2)
  814df8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814dfc:	e0fffd03 	ldbu	r3,-12(fp)
  814e00:	008020b4 	movhi	r2,130
  814e04:	10979904 	addi	r2,r2,24164
  814e08:	18c7883a 	add	r3,r3,r3
  814e0c:	18c7883a 	add	r3,r3,r3
  814e10:	10c5883a 	add	r2,r2,r3
  814e14:	10800017 	ldw	r2,0(r2)
  814e18:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  814e1c:	e0bff817 	ldw	r2,-32(fp)
  814e20:	1000091e 	bne	r2,zero,814e48 <OSTaskNameGet+0x120>
  814e24:	e0bff617 	ldw	r2,-40(fp)
  814e28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e2c:	e0bff717 	ldw	r2,-36(fp)
  814e30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814e34:	e0bfff17 	ldw	r2,-4(fp)
  814e38:	00c010c4 	movi	r3,67
  814e3c:	10c00005 	stb	r3,0(r2)
        return (0);
  814e40:	0005883a 	mov	r2,zero
  814e44:	00001906 	br	814eac <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  814e48:	e0bff817 	ldw	r2,-32(fp)
  814e4c:	10800058 	cmpnei	r2,r2,1
  814e50:	1000091e 	bne	r2,zero,814e78 <OSTaskNameGet+0x150>
  814e54:	e0bff617 	ldw	r2,-40(fp)
  814e58:	e0bff915 	stw	r2,-28(fp)
  814e5c:	e0bff917 	ldw	r2,-28(fp)
  814e60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814e64:	e0bfff17 	ldw	r2,-4(fp)
  814e68:	00c010c4 	movi	r3,67
  814e6c:	10c00005 	stb	r3,0(r2)
        return (0);
  814e70:	0005883a 	mov	r2,zero
  814e74:	00000d06 	br	814eac <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  814e78:	e0bff817 	ldw	r2,-32(fp)
  814e7c:	10801304 	addi	r2,r2,76
  814e80:	100b883a 	mov	r5,r2
  814e84:	e13ffe17 	ldw	r4,-8(fp)
  814e88:	080ff1c0 	call	80ff1c <OS_StrCopy>
  814e8c:	e0bffb05 	stb	r2,-20(fp)
  814e90:	e0bff617 	ldw	r2,-40(fp)
  814e94:	e0bffa15 	stw	r2,-24(fp)
  814e98:	e0bffa17 	ldw	r2,-24(fp)
  814e9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814ea0:	e0bfff17 	ldw	r2,-4(fp)
  814ea4:	10000005 	stb	zero,0(r2)
    return (len);
  814ea8:	e0bffb03 	ldbu	r2,-20(fp)
}
  814eac:	e037883a 	mov	sp,fp
  814eb0:	dfc00117 	ldw	ra,4(sp)
  814eb4:	df000017 	ldw	fp,0(sp)
  814eb8:	dec00204 	addi	sp,sp,8
  814ebc:	f800283a 	ret

00814ec0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  814ec0:	defff304 	addi	sp,sp,-52
  814ec4:	dfc00c15 	stw	ra,48(sp)
  814ec8:	df000b15 	stw	fp,44(sp)
  814ecc:	df000b04 	addi	fp,sp,44
  814ed0:	2005883a 	mov	r2,r4
  814ed4:	e17ffe15 	stw	r5,-8(fp)
  814ed8:	e1bfff15 	stw	r6,-4(fp)
  814edc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  814ee0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  814ee4:	e0bfff17 	ldw	r2,-4(fp)
  814ee8:	10005c26 	beq	r2,zero,81505c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  814eec:	e0bffd03 	ldbu	r2,-12(fp)
  814ef0:	10800570 	cmpltui	r2,r2,21
  814ef4:	1000071e 	bne	r2,zero,814f14 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  814ef8:	e0bffd03 	ldbu	r2,-12(fp)
  814efc:	10803fe0 	cmpeqi	r2,r2,255
  814f00:	1000041e 	bne	r2,zero,814f14 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  814f04:	e0bfff17 	ldw	r2,-4(fp)
  814f08:	00c00a84 	movi	r3,42
  814f0c:	10c00005 	stb	r3,0(r2)
            return;
  814f10:	00005306 	br	815060 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  814f14:	e0bffe17 	ldw	r2,-8(fp)
  814f18:	1000041e 	bne	r2,zero,814f2c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  814f1c:	e0bfff17 	ldw	r2,-4(fp)
  814f20:	00c00304 	movi	r3,12
  814f24:	10c00005 	stb	r3,0(r2)
        return;
  814f28:	00004d06 	br	815060 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  814f2c:	d0a07103 	ldbu	r2,-32316(gp)
  814f30:	10803fcc 	andi	r2,r2,255
  814f34:	10000426 	beq	r2,zero,814f48 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  814f38:	e0bfff17 	ldw	r2,-4(fp)
  814f3c:	00c00484 	movi	r3,18
  814f40:	10c00005 	stb	r3,0(r2)
        return;
  814f44:	00004606 	br	815060 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814f48:	0005303a 	rdctl	r2,status
  814f4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814f50:	e0fffc17 	ldw	r3,-16(fp)
  814f54:	00bfff84 	movi	r2,-2
  814f58:	1884703a 	and	r2,r3,r2
  814f5c:	1001703a 	wrctl	status,r2
  
  return context;
  814f60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814f64:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  814f68:	e0bffd03 	ldbu	r2,-12(fp)
  814f6c:	10803fd8 	cmpnei	r2,r2,255
  814f70:	1000031e 	bne	r2,zero,814f80 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  814f74:	d0a07217 	ldw	r2,-32312(gp)
  814f78:	10800c83 	ldbu	r2,50(r2)
  814f7c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814f80:	e0fffd03 	ldbu	r3,-12(fp)
  814f84:	008020b4 	movhi	r2,130
  814f88:	10979904 	addi	r2,r2,24164
  814f8c:	18c7883a 	add	r3,r3,r3
  814f90:	18c7883a 	add	r3,r3,r3
  814f94:	10c5883a 	add	r2,r2,r3
  814f98:	10800017 	ldw	r2,0(r2)
  814f9c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  814fa0:	e0bff717 	ldw	r2,-36(fp)
  814fa4:	1000081e 	bne	r2,zero,814fc8 <OSTaskNameSet+0x108>
  814fa8:	e0bff517 	ldw	r2,-44(fp)
  814fac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814fb0:	e0bff617 	ldw	r2,-40(fp)
  814fb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814fb8:	e0bfff17 	ldw	r2,-4(fp)
  814fbc:	00c010c4 	movi	r3,67
  814fc0:	10c00005 	stb	r3,0(r2)
        return;
  814fc4:	00002606 	br	815060 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  814fc8:	e0bff717 	ldw	r2,-36(fp)
  814fcc:	10800058 	cmpnei	r2,r2,1
  814fd0:	1000081e 	bne	r2,zero,814ff4 <OSTaskNameSet+0x134>
  814fd4:	e0bff517 	ldw	r2,-44(fp)
  814fd8:	e0bff815 	stw	r2,-32(fp)
  814fdc:	e0bff817 	ldw	r2,-32(fp)
  814fe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814fe4:	e0bfff17 	ldw	r2,-4(fp)
  814fe8:	00c010c4 	movi	r3,67
  814fec:	10c00005 	stb	r3,0(r2)
        return;
  814ff0:	00001b06 	br	815060 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  814ff4:	e13ffe17 	ldw	r4,-8(fp)
  814ff8:	080ff900 	call	80ff90 <OS_StrLen>
  814ffc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  815000:	e0bffa03 	ldbu	r2,-24(fp)
  815004:	10800830 	cmpltui	r2,r2,32
  815008:	1000081e 	bne	r2,zero,81502c <OSTaskNameSet+0x16c>
  81500c:	e0bff517 	ldw	r2,-44(fp)
  815010:	e0bff915 	stw	r2,-28(fp)
  815014:	e0bff917 	ldw	r2,-28(fp)
  815018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  81501c:	e0bfff17 	ldw	r2,-4(fp)
  815020:	00c01044 	movi	r3,65
  815024:	10c00005 	stb	r3,0(r2)
        return;
  815028:	00000d06 	br	815060 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  81502c:	e0bff717 	ldw	r2,-36(fp)
  815030:	10801304 	addi	r2,r2,76
  815034:	e17ffe17 	ldw	r5,-8(fp)
  815038:	1009883a 	mov	r4,r2
  81503c:	080ff1c0 	call	80ff1c <OS_StrCopy>
  815040:	e0bff517 	ldw	r2,-44(fp)
  815044:	e0bffb15 	stw	r2,-20(fp)
  815048:	e0bffb17 	ldw	r2,-20(fp)
  81504c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815050:	e0bfff17 	ldw	r2,-4(fp)
  815054:	10000005 	stb	zero,0(r2)
  815058:	00000106 	br	815060 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  81505c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  815060:	e037883a 	mov	sp,fp
  815064:	dfc00117 	ldw	ra,4(sp)
  815068:	df000017 	ldw	fp,0(sp)
  81506c:	dec00204 	addi	sp,sp,8
  815070:	f800283a 	ret

00815074 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  815074:	defff404 	addi	sp,sp,-48
  815078:	dfc00b15 	stw	ra,44(sp)
  81507c:	df000a15 	stw	fp,40(sp)
  815080:	df000a04 	addi	fp,sp,40
  815084:	2005883a 	mov	r2,r4
  815088:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81508c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  815090:	e0bfff03 	ldbu	r2,-4(fp)
  815094:	10800530 	cmpltui	r2,r2,20
  815098:	1000021e 	bne	r2,zero,8150a4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81509c:	00800a84 	movi	r2,42
  8150a0:	00006406 	br	815234 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8150a4:	0005303a 	rdctl	r2,status
  8150a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8150ac:	e0fffe17 	ldw	r3,-8(fp)
  8150b0:	00bfff84 	movi	r2,-2
  8150b4:	1884703a 	and	r2,r3,r2
  8150b8:	1001703a 	wrctl	status,r2
  
  return context;
  8150bc:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8150c0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  8150c4:	e0ffff03 	ldbu	r3,-4(fp)
  8150c8:	008020b4 	movhi	r2,130
  8150cc:	10979904 	addi	r2,r2,24164
  8150d0:	18c7883a 	add	r3,r3,r3
  8150d4:	18c7883a 	add	r3,r3,r3
  8150d8:	10c5883a 	add	r2,r2,r3
  8150dc:	10800017 	ldw	r2,0(r2)
  8150e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  8150e4:	e0bff817 	ldw	r2,-32(fp)
  8150e8:	1000061e 	bne	r2,zero,815104 <OSTaskResume+0x90>
  8150ec:	e0bff617 	ldw	r2,-40(fp)
  8150f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8150f4:	e0bff717 	ldw	r2,-36(fp)
  8150f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  8150fc:	00801184 	movi	r2,70
  815100:	00004c06 	br	815234 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  815104:	e0bff817 	ldw	r2,-32(fp)
  815108:	10800058 	cmpnei	r2,r2,1
  81510c:	1000061e 	bne	r2,zero,815128 <OSTaskResume+0xb4>
  815110:	e0bff617 	ldw	r2,-40(fp)
  815114:	e0bff915 	stw	r2,-28(fp)
  815118:	e0bff917 	ldw	r2,-28(fp)
  81511c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815120:	008010c4 	movi	r2,67
  815124:	00004306 	br	815234 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  815128:	e0bff817 	ldw	r2,-32(fp)
  81512c:	10800c03 	ldbu	r2,48(r2)
  815130:	10803fcc 	andi	r2,r2,255
  815134:	1080020c 	andi	r2,r2,8
  815138:	10003926 	beq	r2,zero,815220 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  81513c:	e0bff817 	ldw	r2,-32(fp)
  815140:	10c00c03 	ldbu	r3,48(r2)
  815144:	00bffdc4 	movi	r2,-9
  815148:	1884703a 	and	r2,r3,r2
  81514c:	1007883a 	mov	r3,r2
  815150:	e0bff817 	ldw	r2,-32(fp)
  815154:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  815158:	e0bff817 	ldw	r2,-32(fp)
  81515c:	10800c03 	ldbu	r2,48(r2)
  815160:	10803fcc 	andi	r2,r2,255
  815164:	1000281e 	bne	r2,zero,815208 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  815168:	e0bff817 	ldw	r2,-32(fp)
  81516c:	10800b8b 	ldhu	r2,46(r2)
  815170:	10bfffcc 	andi	r2,r2,65535
  815174:	10001f1e 	bne	r2,zero,8151f4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  815178:	e0bff817 	ldw	r2,-32(fp)
  81517c:	10c00d83 	ldbu	r3,54(r2)
  815180:	d0a06f03 	ldbu	r2,-32324(gp)
  815184:	1884b03a 	or	r2,r3,r2
  815188:	d0a06f05 	stb	r2,-32324(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81518c:	e0bff817 	ldw	r2,-32(fp)
  815190:	10800d03 	ldbu	r2,52(r2)
  815194:	10c03fcc 	andi	r3,r2,255
  815198:	e0bff817 	ldw	r2,-32(fp)
  81519c:	10800d03 	ldbu	r2,52(r2)
  8151a0:	11003fcc 	andi	r4,r2,255
  8151a4:	d0a06f44 	addi	r2,gp,-32323
  8151a8:	2085883a 	add	r2,r4,r2
  8151ac:	11000003 	ldbu	r4,0(r2)
  8151b0:	e0bff817 	ldw	r2,-32(fp)
  8151b4:	10800d43 	ldbu	r2,53(r2)
  8151b8:	2084b03a 	or	r2,r4,r2
  8151bc:	1009883a 	mov	r4,r2
  8151c0:	d0a06f44 	addi	r2,gp,-32323
  8151c4:	1885883a 	add	r2,r3,r2
  8151c8:	11000005 	stb	r4,0(r2)
  8151cc:	e0bff617 	ldw	r2,-40(fp)
  8151d0:	e0bffa15 	stw	r2,-24(fp)
  8151d4:	e0bffa17 	ldw	r2,-24(fp)
  8151d8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  8151dc:	d0a06343 	ldbu	r2,-32371(gp)
  8151e0:	10803fcc 	andi	r2,r2,255
  8151e4:	10800058 	cmpnei	r2,r2,1
  8151e8:	10000b1e 	bne	r2,zero,815218 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  8151ec:	080fdd80 	call	80fdd8 <OS_Sched>
  8151f0:	00000906 	br	815218 <OSTaskResume+0x1a4>
  8151f4:	e0bff617 	ldw	r2,-40(fp)
  8151f8:	e0bffb15 	stw	r2,-20(fp)
  8151fc:	e0bffb17 	ldw	r2,-20(fp)
  815200:	1001703a 	wrctl	status,r2
  815204:	00000406 	br	815218 <OSTaskResume+0x1a4>
  815208:	e0bff617 	ldw	r2,-40(fp)
  81520c:	e0bffc15 	stw	r2,-16(fp)
  815210:	e0bffc17 	ldw	r2,-16(fp)
  815214:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  815218:	0005883a 	mov	r2,zero
  81521c:	00000506 	br	815234 <OSTaskResume+0x1c0>
  815220:	e0bff617 	ldw	r2,-40(fp)
  815224:	e0bffd15 	stw	r2,-12(fp)
  815228:	e0bffd17 	ldw	r2,-12(fp)
  81522c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  815230:	00801104 	movi	r2,68
}
  815234:	e037883a 	mov	sp,fp
  815238:	dfc00117 	ldw	ra,4(sp)
  81523c:	df000017 	ldw	fp,0(sp)
  815240:	dec00204 	addi	sp,sp,8
  815244:	f800283a 	ret

00815248 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  815248:	defff304 	addi	sp,sp,-52
  81524c:	df000c15 	stw	fp,48(sp)
  815250:	df000c04 	addi	fp,sp,48
  815254:	2005883a 	mov	r2,r4
  815258:	e17fff15 	stw	r5,-4(fp)
  81525c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815260:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  815264:	e0bffe03 	ldbu	r2,-8(fp)
  815268:	10800570 	cmpltui	r2,r2,21
  81526c:	1000051e 	bne	r2,zero,815284 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  815270:	e0bffe03 	ldbu	r2,-8(fp)
  815274:	10803fe0 	cmpeqi	r2,r2,255
  815278:	1000021e 	bne	r2,zero,815284 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  81527c:	00800a84 	movi	r2,42
  815280:	00005d06 	br	8153f8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  815284:	e0bfff17 	ldw	r2,-4(fp)
  815288:	1000021e 	bne	r2,zero,815294 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  81528c:	00800244 	movi	r2,9
  815290:	00005906 	br	8153f8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  815294:	e0bfff17 	ldw	r2,-4(fp)
  815298:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  81529c:	e0bfff17 	ldw	r2,-4(fp)
  8152a0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8152a4:	0005303a 	rdctl	r2,status
  8152a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8152ac:	e0fffd17 	ldw	r3,-12(fp)
  8152b0:	00bfff84 	movi	r2,-2
  8152b4:	1884703a 	and	r2,r3,r2
  8152b8:	1001703a 	wrctl	status,r2
  
  return context;
  8152bc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  8152c0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  8152c4:	e0bffe03 	ldbu	r2,-8(fp)
  8152c8:	10803fd8 	cmpnei	r2,r2,255
  8152cc:	1000031e 	bne	r2,zero,8152dc <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  8152d0:	d0a07217 	ldw	r2,-32312(gp)
  8152d4:	10800c83 	ldbu	r2,50(r2)
  8152d8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8152dc:	e0fffe03 	ldbu	r3,-8(fp)
  8152e0:	008020b4 	movhi	r2,130
  8152e4:	10979904 	addi	r2,r2,24164
  8152e8:	18c7883a 	add	r3,r3,r3
  8152ec:	18c7883a 	add	r3,r3,r3
  8152f0:	10c5883a 	add	r2,r2,r3
  8152f4:	10800017 	ldw	r2,0(r2)
  8152f8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  8152fc:	e0bff817 	ldw	r2,-32(fp)
  815300:	1000061e 	bne	r2,zero,81531c <OSTaskStkChk+0xd4>
  815304:	e0bff617 	ldw	r2,-40(fp)
  815308:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81530c:	e0bff717 	ldw	r2,-36(fp)
  815310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815314:	008010c4 	movi	r2,67
  815318:	00003706 	br	8153f8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81531c:	e0bff817 	ldw	r2,-32(fp)
  815320:	10800058 	cmpnei	r2,r2,1
  815324:	1000061e 	bne	r2,zero,815340 <OSTaskStkChk+0xf8>
  815328:	e0bff617 	ldw	r2,-40(fp)
  81532c:	e0bff915 	stw	r2,-28(fp)
  815330:	e0bff917 	ldw	r2,-28(fp)
  815334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815338:	008010c4 	movi	r2,67
  81533c:	00002e06 	br	8153f8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  815340:	e0bff817 	ldw	r2,-32(fp)
  815344:	1080040b 	ldhu	r2,16(r2)
  815348:	10bfffcc 	andi	r2,r2,65535
  81534c:	1080004c 	andi	r2,r2,1
  815350:	1000061e 	bne	r2,zero,81536c <OSTaskStkChk+0x124>
  815354:	e0bff617 	ldw	r2,-40(fp)
  815358:	e0bffa15 	stw	r2,-24(fp)
  81535c:	e0bffa17 	ldw	r2,-24(fp)
  815360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  815364:	00801144 	movi	r2,69
  815368:	00002306 	br	8153f8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  81536c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  815370:	e0bff817 	ldw	r2,-32(fp)
  815374:	10800317 	ldw	r2,12(r2)
  815378:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81537c:	e0bff817 	ldw	r2,-32(fp)
  815380:	10800217 	ldw	r2,8(r2)
  815384:	e0bff415 	stw	r2,-48(fp)
  815388:	e0bff617 	ldw	r2,-40(fp)
  81538c:	e0bffb15 	stw	r2,-20(fp)
  815390:	e0bffb17 	ldw	r2,-20(fp)
  815394:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  815398:	00000306 	br	8153a8 <OSTaskStkChk+0x160>
        nfree++;
  81539c:	e0bff517 	ldw	r2,-44(fp)
  8153a0:	10800044 	addi	r2,r2,1
  8153a4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8153a8:	e0bff417 	ldw	r2,-48(fp)
  8153ac:	10c00104 	addi	r3,r2,4
  8153b0:	e0fff415 	stw	r3,-48(fp)
  8153b4:	10800017 	ldw	r2,0(r2)
  8153b8:	103ff826 	beq	r2,zero,81539c <__alt_mem_epcs_flash_controller_0+0xff80c39c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  8153bc:	e0bff517 	ldw	r2,-44(fp)
  8153c0:	1085883a 	add	r2,r2,r2
  8153c4:	1085883a 	add	r2,r2,r2
  8153c8:	1007883a 	mov	r3,r2
  8153cc:	e0bfff17 	ldw	r2,-4(fp)
  8153d0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  8153d4:	e0fffc17 	ldw	r3,-16(fp)
  8153d8:	e0bff517 	ldw	r2,-44(fp)
  8153dc:	1885c83a 	sub	r2,r3,r2
  8153e0:	1085883a 	add	r2,r2,r2
  8153e4:	1085883a 	add	r2,r2,r2
  8153e8:	1007883a 	mov	r3,r2
  8153ec:	e0bfff17 	ldw	r2,-4(fp)
  8153f0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8153f4:	0005883a 	mov	r2,zero
}
  8153f8:	e037883a 	mov	sp,fp
  8153fc:	df000017 	ldw	fp,0(sp)
  815400:	dec00104 	addi	sp,sp,4
  815404:	f800283a 	ret

00815408 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  815408:	defff504 	addi	sp,sp,-44
  81540c:	dfc00a15 	stw	ra,40(sp)
  815410:	df000915 	stw	fp,36(sp)
  815414:	df000904 	addi	fp,sp,36
  815418:	2005883a 	mov	r2,r4
  81541c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815420:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  815424:	e0bfff03 	ldbu	r2,-4(fp)
  815428:	10800518 	cmpnei	r2,r2,20
  81542c:	1000021e 	bne	r2,zero,815438 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  815430:	008011c4 	movi	r2,71
  815434:	00006806 	br	8155d8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  815438:	e0bfff03 	ldbu	r2,-4(fp)
  81543c:	10800530 	cmpltui	r2,r2,20
  815440:	1000051e 	bne	r2,zero,815458 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  815444:	e0bfff03 	ldbu	r2,-4(fp)
  815448:	10803fe0 	cmpeqi	r2,r2,255
  81544c:	1000021e 	bne	r2,zero,815458 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  815450:	00800a84 	movi	r2,42
  815454:	00006006 	br	8155d8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815458:	0005303a 	rdctl	r2,status
  81545c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815460:	e0fffe17 	ldw	r3,-8(fp)
  815464:	00bfff84 	movi	r2,-2
  815468:	1884703a 	and	r2,r3,r2
  81546c:	1001703a 	wrctl	status,r2
  
  return context;
  815470:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  815474:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  815478:	e0bfff03 	ldbu	r2,-4(fp)
  81547c:	10803fd8 	cmpnei	r2,r2,255
  815480:	1000061e 	bne	r2,zero,81549c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  815484:	d0a07217 	ldw	r2,-32312(gp)
  815488:	10800c83 	ldbu	r2,50(r2)
  81548c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  815490:	00800044 	movi	r2,1
  815494:	e0bff705 	stb	r2,-36(fp)
  815498:	00000906 	br	8154c0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  81549c:	d0a07217 	ldw	r2,-32312(gp)
  8154a0:	10800c83 	ldbu	r2,50(r2)
  8154a4:	10c03fcc 	andi	r3,r2,255
  8154a8:	e0bfff03 	ldbu	r2,-4(fp)
  8154ac:	1880031e 	bne	r3,r2,8154bc <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  8154b0:	00800044 	movi	r2,1
  8154b4:	e0bff705 	stb	r2,-36(fp)
  8154b8:	00000106 	br	8154c0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8154bc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8154c0:	e0ffff03 	ldbu	r3,-4(fp)
  8154c4:	008020b4 	movhi	r2,130
  8154c8:	10979904 	addi	r2,r2,24164
  8154cc:	18c7883a 	add	r3,r3,r3
  8154d0:	18c7883a 	add	r3,r3,r3
  8154d4:	10c5883a 	add	r2,r2,r3
  8154d8:	10800017 	ldw	r2,0(r2)
  8154dc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8154e0:	e0bffa17 	ldw	r2,-24(fp)
  8154e4:	1000061e 	bne	r2,zero,815500 <OSTaskSuspend+0xf8>
  8154e8:	e0bff817 	ldw	r2,-32(fp)
  8154ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8154f0:	e0bff917 	ldw	r2,-28(fp)
  8154f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  8154f8:	00801204 	movi	r2,72
  8154fc:	00003606 	br	8155d8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  815500:	e0bffa17 	ldw	r2,-24(fp)
  815504:	10800058 	cmpnei	r2,r2,1
  815508:	1000061e 	bne	r2,zero,815524 <OSTaskSuspend+0x11c>
  81550c:	e0bff817 	ldw	r2,-32(fp)
  815510:	e0bffb15 	stw	r2,-20(fp)
  815514:	e0bffb17 	ldw	r2,-20(fp)
  815518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81551c:	008010c4 	movi	r2,67
  815520:	00002d06 	br	8155d8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  815524:	e0bffa17 	ldw	r2,-24(fp)
  815528:	10800d03 	ldbu	r2,52(r2)
  81552c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  815530:	e0fffd03 	ldbu	r3,-12(fp)
  815534:	e13ffd03 	ldbu	r4,-12(fp)
  815538:	d0a06f44 	addi	r2,gp,-32323
  81553c:	2085883a 	add	r2,r4,r2
  815540:	10800003 	ldbu	r2,0(r2)
  815544:	1009883a 	mov	r4,r2
  815548:	e0bffa17 	ldw	r2,-24(fp)
  81554c:	10800d43 	ldbu	r2,53(r2)
  815550:	0084303a 	nor	r2,zero,r2
  815554:	2084703a 	and	r2,r4,r2
  815558:	1009883a 	mov	r4,r2
  81555c:	d0a06f44 	addi	r2,gp,-32323
  815560:	1885883a 	add	r2,r3,r2
  815564:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  815568:	e0fffd03 	ldbu	r3,-12(fp)
  81556c:	d0a06f44 	addi	r2,gp,-32323
  815570:	1885883a 	add	r2,r3,r2
  815574:	10800003 	ldbu	r2,0(r2)
  815578:	10803fcc 	andi	r2,r2,255
  81557c:	1000071e 	bne	r2,zero,81559c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  815580:	e0bffa17 	ldw	r2,-24(fp)
  815584:	10800d83 	ldbu	r2,54(r2)
  815588:	0084303a 	nor	r2,zero,r2
  81558c:	1007883a 	mov	r3,r2
  815590:	d0a06f03 	ldbu	r2,-32324(gp)
  815594:	1884703a 	and	r2,r3,r2
  815598:	d0a06f05 	stb	r2,-32324(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  81559c:	e0bffa17 	ldw	r2,-24(fp)
  8155a0:	10800c03 	ldbu	r2,48(r2)
  8155a4:	10800214 	ori	r2,r2,8
  8155a8:	1007883a 	mov	r3,r2
  8155ac:	e0bffa17 	ldw	r2,-24(fp)
  8155b0:	10c00c05 	stb	r3,48(r2)
  8155b4:	e0bff817 	ldw	r2,-32(fp)
  8155b8:	e0bffc15 	stw	r2,-16(fp)
  8155bc:	e0bffc17 	ldw	r2,-16(fp)
  8155c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  8155c4:	e0bff703 	ldbu	r2,-36(fp)
  8155c8:	10800058 	cmpnei	r2,r2,1
  8155cc:	1000011e 	bne	r2,zero,8155d4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  8155d0:	080fdd80 	call	80fdd8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8155d4:	0005883a 	mov	r2,zero
}
  8155d8:	e037883a 	mov	sp,fp
  8155dc:	dfc00117 	ldw	ra,4(sp)
  8155e0:	df000017 	ldw	fp,0(sp)
  8155e4:	dec00204 	addi	sp,sp,8
  8155e8:	f800283a 	ret

008155ec <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  8155ec:	defff604 	addi	sp,sp,-40
  8155f0:	dfc00915 	stw	ra,36(sp)
  8155f4:	df000815 	stw	fp,32(sp)
  8155f8:	df000804 	addi	fp,sp,32
  8155fc:	2005883a 	mov	r2,r4
  815600:	e17fff15 	stw	r5,-4(fp)
  815604:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815608:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  81560c:	e0bffe03 	ldbu	r2,-8(fp)
  815610:	10800570 	cmpltui	r2,r2,21
  815614:	1000051e 	bne	r2,zero,81562c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  815618:	e0bffe03 	ldbu	r2,-8(fp)
  81561c:	10803fe0 	cmpeqi	r2,r2,255
  815620:	1000021e 	bne	r2,zero,81562c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  815624:	00800a84 	movi	r2,42
  815628:	00003406 	br	8156fc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81562c:	e0bfff17 	ldw	r2,-4(fp)
  815630:	1000021e 	bne	r2,zero,81563c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  815634:	00800244 	movi	r2,9
  815638:	00003006 	br	8156fc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81563c:	0005303a 	rdctl	r2,status
  815640:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815644:	e0fffd17 	ldw	r3,-12(fp)
  815648:	00bfff84 	movi	r2,-2
  81564c:	1884703a 	and	r2,r3,r2
  815650:	1001703a 	wrctl	status,r2
  
  return context;
  815654:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815658:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  81565c:	e0bffe03 	ldbu	r2,-8(fp)
  815660:	10803fd8 	cmpnei	r2,r2,255
  815664:	1000031e 	bne	r2,zero,815674 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  815668:	d0a07217 	ldw	r2,-32312(gp)
  81566c:	10800c83 	ldbu	r2,50(r2)
  815670:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815674:	e0fffe03 	ldbu	r3,-8(fp)
  815678:	008020b4 	movhi	r2,130
  81567c:	10979904 	addi	r2,r2,24164
  815680:	18c7883a 	add	r3,r3,r3
  815684:	18c7883a 	add	r3,r3,r3
  815688:	10c5883a 	add	r2,r2,r3
  81568c:	10800017 	ldw	r2,0(r2)
  815690:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  815694:	e0bffa17 	ldw	r2,-24(fp)
  815698:	1000061e 	bne	r2,zero,8156b4 <OSTaskQuery+0xc8>
  81569c:	e0bff817 	ldw	r2,-32(fp)
  8156a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8156a4:	e0bff917 	ldw	r2,-28(fp)
  8156a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  8156ac:	00800a44 	movi	r2,41
  8156b0:	00001206 	br	8156fc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  8156b4:	e0bffa17 	ldw	r2,-24(fp)
  8156b8:	10800058 	cmpnei	r2,r2,1
  8156bc:	1000061e 	bne	r2,zero,8156d8 <OSTaskQuery+0xec>
  8156c0:	e0bff817 	ldw	r2,-32(fp)
  8156c4:	e0bffb15 	stw	r2,-20(fp)
  8156c8:	e0bffb17 	ldw	r2,-20(fp)
  8156cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8156d0:	008010c4 	movi	r2,67
  8156d4:	00000906 	br	8156fc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  8156d8:	01801b04 	movi	r6,108
  8156dc:	e17ffa17 	ldw	r5,-24(fp)
  8156e0:	e13fff17 	ldw	r4,-4(fp)
  8156e4:	080fd700 	call	80fd70 <OS_MemCopy>
  8156e8:	e0bff817 	ldw	r2,-32(fp)
  8156ec:	e0bffc15 	stw	r2,-16(fp)
  8156f0:	e0bffc17 	ldw	r2,-16(fp)
  8156f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8156f8:	0005883a 	mov	r2,zero
}
  8156fc:	e037883a 	mov	sp,fp
  815700:	dfc00117 	ldw	ra,4(sp)
  815704:	df000017 	ldw	fp,0(sp)
  815708:	dec00204 	addi	sp,sp,8
  81570c:	f800283a 	ret

00815710 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  815710:	defffc04 	addi	sp,sp,-16
  815714:	df000315 	stw	fp,12(sp)
  815718:	df000304 	addi	fp,sp,12
  81571c:	e13ffd15 	stw	r4,-12(fp)
  815720:	e17ffe15 	stw	r5,-8(fp)
  815724:	3005883a 	mov	r2,r6
  815728:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  81572c:	e0bfff0b 	ldhu	r2,-4(fp)
  815730:	1080004c 	andi	r2,r2,1
  815734:	10000d26 	beq	r2,zero,81576c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  815738:	e0bfff0b 	ldhu	r2,-4(fp)
  81573c:	1080008c 	andi	r2,r2,2
  815740:	10000a26 	beq	r2,zero,81576c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  815744:	00000706 	br	815764 <OS_TaskStkClr+0x54>
                size--;
  815748:	e0bffe17 	ldw	r2,-8(fp)
  81574c:	10bfffc4 	addi	r2,r2,-1
  815750:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  815754:	e0bffd17 	ldw	r2,-12(fp)
  815758:	10c00104 	addi	r3,r2,4
  81575c:	e0fffd15 	stw	r3,-12(fp)
  815760:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  815764:	e0bffe17 	ldw	r2,-8(fp)
  815768:	103ff71e 	bne	r2,zero,815748 <__alt_mem_epcs_flash_controller_0+0xff80c748>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  81576c:	0001883a 	nop
  815770:	e037883a 	mov	sp,fp
  815774:	df000017 	ldw	fp,0(sp)
  815778:	dec00104 	addi	sp,sp,4
  81577c:	f800283a 	ret

00815780 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  815780:	defff904 	addi	sp,sp,-28
  815784:	dfc00615 	stw	ra,24(sp)
  815788:	df000515 	stw	fp,20(sp)
  81578c:	df000504 	addi	fp,sp,20
  815790:	2005883a 	mov	r2,r4
  815794:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815798:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81579c:	d0a07103 	ldbu	r2,-32316(gp)
  8157a0:	10803fcc 	andi	r2,r2,255
  8157a4:	1000311e 	bne	r2,zero,81586c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8157a8:	e0bfff0b 	ldhu	r2,-4(fp)
  8157ac:	10003026 	beq	r2,zero,815870 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8157b0:	0005303a 	rdctl	r2,status
  8157b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8157b8:	e0fffe17 	ldw	r3,-8(fp)
  8157bc:	00bfff84 	movi	r2,-2
  8157c0:	1884703a 	and	r2,r3,r2
  8157c4:	1001703a 	wrctl	status,r2
  
  return context;
  8157c8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8157cc:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  8157d0:	d0a07217 	ldw	r2,-32312(gp)
  8157d4:	10800d03 	ldbu	r2,52(r2)
  8157d8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8157dc:	e0fffd03 	ldbu	r3,-12(fp)
  8157e0:	e13ffd03 	ldbu	r4,-12(fp)
  8157e4:	d0a06f44 	addi	r2,gp,-32323
  8157e8:	2085883a 	add	r2,r4,r2
  8157ec:	10800003 	ldbu	r2,0(r2)
  8157f0:	1009883a 	mov	r4,r2
  8157f4:	d0a07217 	ldw	r2,-32312(gp)
  8157f8:	10800d43 	ldbu	r2,53(r2)
  8157fc:	0084303a 	nor	r2,zero,r2
  815800:	2084703a 	and	r2,r4,r2
  815804:	1009883a 	mov	r4,r2
  815808:	d0a06f44 	addi	r2,gp,-32323
  81580c:	1885883a 	add	r2,r3,r2
  815810:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  815814:	e0fffd03 	ldbu	r3,-12(fp)
  815818:	d0a06f44 	addi	r2,gp,-32323
  81581c:	1885883a 	add	r2,r3,r2
  815820:	10800003 	ldbu	r2,0(r2)
  815824:	10803fcc 	andi	r2,r2,255
  815828:	1000071e 	bne	r2,zero,815848 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81582c:	d0a07217 	ldw	r2,-32312(gp)
  815830:	10800d83 	ldbu	r2,54(r2)
  815834:	0084303a 	nor	r2,zero,r2
  815838:	1007883a 	mov	r3,r2
  81583c:	d0a06f03 	ldbu	r2,-32324(gp)
  815840:	1884703a 	and	r2,r3,r2
  815844:	d0a06f05 	stb	r2,-32324(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  815848:	d0a07217 	ldw	r2,-32312(gp)
  81584c:	e0ffff0b 	ldhu	r3,-4(fp)
  815850:	10c00b8d 	sth	r3,46(r2)
  815854:	e0bffb17 	ldw	r2,-20(fp)
  815858:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81585c:	e0bffc17 	ldw	r2,-16(fp)
  815860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  815864:	080fdd80 	call	80fdd8 <OS_Sched>
  815868:	00000106 	br	815870 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  81586c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  815870:	e037883a 	mov	sp,fp
  815874:	dfc00117 	ldw	ra,4(sp)
  815878:	df000017 	ldw	fp,0(sp)
  81587c:	dec00204 	addi	sp,sp,8
  815880:	f800283a 	ret

00815884 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  815884:	defff704 	addi	sp,sp,-36
  815888:	dfc00815 	stw	ra,32(sp)
  81588c:	df000715 	stw	fp,28(sp)
  815890:	dc000615 	stw	r16,24(sp)
  815894:	df000704 	addi	fp,sp,28
  815898:	2011883a 	mov	r8,r4
  81589c:	2809883a 	mov	r4,r5
  8158a0:	3007883a 	mov	r3,r6
  8158a4:	3805883a 	mov	r2,r7
  8158a8:	e23ffb05 	stb	r8,-20(fp)
  8158ac:	e13ffc05 	stb	r4,-16(fp)
  8158b0:	e0fffd05 	stb	r3,-12(fp)
  8158b4:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8158b8:	d0a07103 	ldbu	r2,-32316(gp)
  8158bc:	10803fcc 	andi	r2,r2,255
  8158c0:	10000226 	beq	r2,zero,8158cc <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  8158c4:	00801544 	movi	r2,85
  8158c8:	00004706 	br	8159e8 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  8158cc:	e0bffb03 	ldbu	r2,-20(fp)
  8158d0:	1000081e 	bne	r2,zero,8158f4 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  8158d4:	e0bffc03 	ldbu	r2,-16(fp)
  8158d8:	1000061e 	bne	r2,zero,8158f4 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  8158dc:	e0bffd03 	ldbu	r2,-12(fp)
  8158e0:	1000041e 	bne	r2,zero,8158f4 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  8158e4:	e0bffe0b 	ldhu	r2,-8(fp)
  8158e8:	1000021e 	bne	r2,zero,8158f4 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  8158ec:	00801504 	movi	r2,84
  8158f0:	00003d06 	br	8159e8 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  8158f4:	e0bffc03 	ldbu	r2,-16(fp)
  8158f8:	10800f30 	cmpltui	r2,r2,60
  8158fc:	1000021e 	bne	r2,zero,815908 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  815900:	00801444 	movi	r2,81
  815904:	00003806 	br	8159e8 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  815908:	e0bffd03 	ldbu	r2,-12(fp)
  81590c:	10800f30 	cmpltui	r2,r2,60
  815910:	1000021e 	bne	r2,zero,81591c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  815914:	00801484 	movi	r2,82
  815918:	00003306 	br	8159e8 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  81591c:	e0bffe0b 	ldhu	r2,-8(fp)
  815920:	1080fa30 	cmpltui	r2,r2,1000
  815924:	1000021e 	bne	r2,zero,815930 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  815928:	008014c4 	movi	r2,83
  81592c:	00002e06 	br	8159e8 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  815930:	e0bffb03 	ldbu	r2,-20(fp)
  815934:	01438404 	movi	r5,3600
  815938:	1009883a 	mov	r4,r2
  81593c:	080ad7c0 	call	80ad7c <__mulsi3>
  815940:	1021883a 	mov	r16,r2
  815944:	e0bffc03 	ldbu	r2,-16(fp)
  815948:	01400f04 	movi	r5,60
  81594c:	1009883a 	mov	r4,r2
  815950:	080ad7c0 	call	80ad7c <__mulsi3>
  815954:	8087883a 	add	r3,r16,r2
  815958:	e0bffd03 	ldbu	r2,-12(fp)
  81595c:	1885883a 	add	r2,r3,r2
  815960:	0140fa04 	movi	r5,1000
  815964:	1009883a 	mov	r4,r2
  815968:	080ad7c0 	call	80ad7c <__mulsi3>
  81596c:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  815970:	e0bffe0b 	ldhu	r2,-8(fp)
  815974:	0140fa04 	movi	r5,1000
  815978:	1009883a 	mov	r4,r2
  81597c:	080ad7c0 	call	80ad7c <__mulsi3>
  815980:	0140fa04 	movi	r5,1000
  815984:	1009883a 	mov	r4,r2
  815988:	080acc00 	call	80acc0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  81598c:	8085883a 	add	r2,r16,r2
  815990:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  815994:	e0bffa17 	ldw	r2,-24(fp)
  815998:	1004d43a 	srli	r2,r2,16
  81599c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  8159a0:	e0bffa17 	ldw	r2,-24(fp)
  8159a4:	10bfffcc 	andi	r2,r2,65535
  8159a8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  8159ac:	e0bffa17 	ldw	r2,-24(fp)
  8159b0:	10bfffcc 	andi	r2,r2,65535
  8159b4:	1009883a 	mov	r4,r2
  8159b8:	08157800 	call	815780 <OSTimeDly>
    while (loops > 0) {
  8159bc:	00000706 	br	8159dc <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  8159c0:	01200014 	movui	r4,32768
  8159c4:	08157800 	call	815780 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8159c8:	01200014 	movui	r4,32768
  8159cc:	08157800 	call	815780 <OSTimeDly>
        loops--;
  8159d0:	e0bff90b 	ldhu	r2,-28(fp)
  8159d4:	10bfffc4 	addi	r2,r2,-1
  8159d8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  8159dc:	e0bff90b 	ldhu	r2,-28(fp)
  8159e0:	103ff71e 	bne	r2,zero,8159c0 <__alt_mem_epcs_flash_controller_0+0xff80c9c0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  8159e4:	0005883a 	mov	r2,zero
}
  8159e8:	e6ffff04 	addi	sp,fp,-4
  8159ec:	dfc00217 	ldw	ra,8(sp)
  8159f0:	df000117 	ldw	fp,4(sp)
  8159f4:	dc000017 	ldw	r16,0(sp)
  8159f8:	dec00304 	addi	sp,sp,12
  8159fc:	f800283a 	ret

00815a00 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  815a00:	defff504 	addi	sp,sp,-44
  815a04:	dfc00a15 	stw	ra,40(sp)
  815a08:	df000915 	stw	fp,36(sp)
  815a0c:	df000904 	addi	fp,sp,36
  815a10:	2005883a 	mov	r2,r4
  815a14:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  815a18:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  815a1c:	e0bfff03 	ldbu	r2,-4(fp)
  815a20:	10800530 	cmpltui	r2,r2,20
  815a24:	1000021e 	bne	r2,zero,815a30 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  815a28:	00800a84 	movi	r2,42
  815a2c:	00006406 	br	815bc0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a30:	0005303a 	rdctl	r2,status
  815a34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a38:	e0fffe17 	ldw	r3,-8(fp)
  815a3c:	00bfff84 	movi	r2,-2
  815a40:	1884703a 	and	r2,r3,r2
  815a44:	1001703a 	wrctl	status,r2
  
  return context;
  815a48:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  815a4c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  815a50:	e0ffff03 	ldbu	r3,-4(fp)
  815a54:	008020b4 	movhi	r2,130
  815a58:	10979904 	addi	r2,r2,24164
  815a5c:	18c7883a 	add	r3,r3,r3
  815a60:	18c7883a 	add	r3,r3,r3
  815a64:	10c5883a 	add	r2,r2,r3
  815a68:	10800017 	ldw	r2,0(r2)
  815a6c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  815a70:	e0bff917 	ldw	r2,-28(fp)
  815a74:	1000061e 	bne	r2,zero,815a90 <OSTimeDlyResume+0x90>
  815a78:	e0bff717 	ldw	r2,-36(fp)
  815a7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a80:	e0bff817 	ldw	r2,-32(fp)
  815a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815a88:	008010c4 	movi	r2,67
  815a8c:	00004c06 	br	815bc0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  815a90:	e0bff917 	ldw	r2,-28(fp)
  815a94:	10800058 	cmpnei	r2,r2,1
  815a98:	1000061e 	bne	r2,zero,815ab4 <OSTimeDlyResume+0xb4>
  815a9c:	e0bff717 	ldw	r2,-36(fp)
  815aa0:	e0bffa15 	stw	r2,-24(fp)
  815aa4:	e0bffa17 	ldw	r2,-24(fp)
  815aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815aac:	008010c4 	movi	r2,67
  815ab0:	00004306 	br	815bc0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  815ab4:	e0bff917 	ldw	r2,-28(fp)
  815ab8:	10800b8b 	ldhu	r2,46(r2)
  815abc:	10bfffcc 	andi	r2,r2,65535
  815ac0:	1000061e 	bne	r2,zero,815adc <OSTimeDlyResume+0xdc>
  815ac4:	e0bff717 	ldw	r2,-36(fp)
  815ac8:	e0bffb15 	stw	r2,-20(fp)
  815acc:	e0bffb17 	ldw	r2,-20(fp)
  815ad0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  815ad4:	00801404 	movi	r2,80
  815ad8:	00003906 	br	815bc0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  815adc:	e0bff917 	ldw	r2,-28(fp)
  815ae0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  815ae4:	e0bff917 	ldw	r2,-28(fp)
  815ae8:	10800c03 	ldbu	r2,48(r2)
  815aec:	10803fcc 	andi	r2,r2,255
  815af0:	10800dcc 	andi	r2,r2,55
  815af4:	10000b26 	beq	r2,zero,815b24 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  815af8:	e0bff917 	ldw	r2,-28(fp)
  815afc:	10c00c03 	ldbu	r3,48(r2)
  815b00:	00bff204 	movi	r2,-56
  815b04:	1884703a 	and	r2,r3,r2
  815b08:	1007883a 	mov	r3,r2
  815b0c:	e0bff917 	ldw	r2,-28(fp)
  815b10:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  815b14:	e0bff917 	ldw	r2,-28(fp)
  815b18:	00c00044 	movi	r3,1
  815b1c:	10c00c45 	stb	r3,49(r2)
  815b20:	00000206 	br	815b2c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  815b24:	e0bff917 	ldw	r2,-28(fp)
  815b28:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  815b2c:	e0bff917 	ldw	r2,-28(fp)
  815b30:	10800c03 	ldbu	r2,48(r2)
  815b34:	10803fcc 	andi	r2,r2,255
  815b38:	1080020c 	andi	r2,r2,8
  815b3c:	10001b1e 	bne	r2,zero,815bac <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  815b40:	e0bff917 	ldw	r2,-28(fp)
  815b44:	10c00d83 	ldbu	r3,54(r2)
  815b48:	d0a06f03 	ldbu	r2,-32324(gp)
  815b4c:	1884b03a 	or	r2,r3,r2
  815b50:	d0a06f05 	stb	r2,-32324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  815b54:	e0bff917 	ldw	r2,-28(fp)
  815b58:	10800d03 	ldbu	r2,52(r2)
  815b5c:	10c03fcc 	andi	r3,r2,255
  815b60:	e0bff917 	ldw	r2,-28(fp)
  815b64:	10800d03 	ldbu	r2,52(r2)
  815b68:	11003fcc 	andi	r4,r2,255
  815b6c:	d0a06f44 	addi	r2,gp,-32323
  815b70:	2085883a 	add	r2,r4,r2
  815b74:	11000003 	ldbu	r4,0(r2)
  815b78:	e0bff917 	ldw	r2,-28(fp)
  815b7c:	10800d43 	ldbu	r2,53(r2)
  815b80:	2084b03a 	or	r2,r4,r2
  815b84:	1009883a 	mov	r4,r2
  815b88:	d0a06f44 	addi	r2,gp,-32323
  815b8c:	1885883a 	add	r2,r3,r2
  815b90:	11000005 	stb	r4,0(r2)
  815b94:	e0bff717 	ldw	r2,-36(fp)
  815b98:	e0bffc15 	stw	r2,-16(fp)
  815b9c:	e0bffc17 	ldw	r2,-16(fp)
  815ba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  815ba4:	080fdd80 	call	80fdd8 <OS_Sched>
  815ba8:	00000406 	br	815bbc <OSTimeDlyResume+0x1bc>
  815bac:	e0bff717 	ldw	r2,-36(fp)
  815bb0:	e0bffd15 	stw	r2,-12(fp)
  815bb4:	e0bffd17 	ldw	r2,-12(fp)
  815bb8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  815bbc:	0005883a 	mov	r2,zero
}
  815bc0:	e037883a 	mov	sp,fp
  815bc4:	dfc00117 	ldw	ra,4(sp)
  815bc8:	df000017 	ldw	fp,0(sp)
  815bcc:	dec00204 	addi	sp,sp,8
  815bd0:	f800283a 	ret

00815bd4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  815bd4:	defffb04 	addi	sp,sp,-20
  815bd8:	df000415 	stw	fp,16(sp)
  815bdc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815be0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815be4:	0005303a 	rdctl	r2,status
  815be8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815bec:	e0fffe17 	ldw	r3,-8(fp)
  815bf0:	00bfff84 	movi	r2,-2
  815bf4:	1884703a 	and	r2,r3,r2
  815bf8:	1001703a 	wrctl	status,r2
  
  return context;
  815bfc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  815c00:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  815c04:	d0a07317 	ldw	r2,-32308(gp)
  815c08:	e0bffd15 	stw	r2,-12(fp)
  815c0c:	e0bffc17 	ldw	r2,-16(fp)
  815c10:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815c14:	e0bfff17 	ldw	r2,-4(fp)
  815c18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  815c1c:	e0bffd17 	ldw	r2,-12(fp)
}
  815c20:	e037883a 	mov	sp,fp
  815c24:	df000017 	ldw	fp,0(sp)
  815c28:	dec00104 	addi	sp,sp,4
  815c2c:	f800283a 	ret

00815c30 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  815c30:	defffb04 	addi	sp,sp,-20
  815c34:	df000415 	stw	fp,16(sp)
  815c38:	df000404 	addi	fp,sp,16
  815c3c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815c40:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c44:	0005303a 	rdctl	r2,status
  815c48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c4c:	e0fffd17 	ldw	r3,-12(fp)
  815c50:	00bfff84 	movi	r2,-2
  815c54:	1884703a 	and	r2,r3,r2
  815c58:	1001703a 	wrctl	status,r2
  
  return context;
  815c5c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  815c60:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  815c64:	e0bfff17 	ldw	r2,-4(fp)
  815c68:	d0a07315 	stw	r2,-32308(gp)
  815c6c:	e0bffc17 	ldw	r2,-16(fp)
  815c70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815c74:	e0bffe17 	ldw	r2,-8(fp)
  815c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  815c7c:	0001883a 	nop
  815c80:	e037883a 	mov	sp,fp
  815c84:	df000017 	ldw	fp,0(sp)
  815c88:	dec00104 	addi	sp,sp,4
  815c8c:	f800283a 	ret

00815c90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  815c90:	defffd04 	addi	sp,sp,-12
  815c94:	dfc00215 	stw	ra,8(sp)
  815c98:	df000115 	stw	fp,4(sp)
  815c9c:	df000104 	addi	fp,sp,4
  815ca0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  815ca4:	d1602404 	addi	r5,gp,-32624
  815ca8:	e13fff17 	ldw	r4,-4(fp)
  815cac:	08189c00 	call	8189c0 <alt_dev_llist_insert>
}
  815cb0:	e037883a 	mov	sp,fp
  815cb4:	dfc00117 	ldw	ra,4(sp)
  815cb8:	df000017 	ldw	fp,0(sp)
  815cbc:	dec00204 	addi	sp,sp,8
  815cc0:	f800283a 	ret

00815cc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  815cc4:	defffd04 	addi	sp,sp,-12
  815cc8:	dfc00215 	stw	ra,8(sp)
  815ccc:	df000115 	stw	fp,4(sp)
  815cd0:	df000104 	addi	fp,sp,4
  815cd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  815cd8:	08192040 	call	819204 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  815cdc:	00800044 	movi	r2,1
  815ce0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  815ce4:	0001883a 	nop
  815ce8:	e037883a 	mov	sp,fp
  815cec:	dfc00117 	ldw	ra,4(sp)
  815cf0:	df000017 	ldw	fp,0(sp)
  815cf4:	dec00204 	addi	sp,sp,8
  815cf8:	f800283a 	ret

00815cfc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  815cfc:	defffe04 	addi	sp,sp,-8
  815d00:	dfc00115 	stw	ra,4(sp)
  815d04:	df000015 	stw	fp,0(sp)
  815d08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  815d0c:	01c0fa04 	movi	r7,1000
  815d10:	01800144 	movi	r6,5
  815d14:	000b883a 	mov	r5,zero
  815d18:	01004074 	movhi	r4,257
  815d1c:	21280004 	addi	r4,r4,-24576
  815d20:	081764c0 	call	81764c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  815d24:	010020b4 	movhi	r4,130
  815d28:	212ba504 	addi	r4,r4,-20844
  815d2c:	0815de00 	call	815de0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  815d30:	000d883a 	mov	r6,zero
  815d34:	000b883a 	mov	r5,zero
  815d38:	010020b4 	movhi	r4,130
  815d3c:	212be204 	addi	r4,r4,-20600
  815d40:	0816a0c0 	call	816a0c <altera_avalon_jtag_uart_init>
  815d44:	010020b4 	movhi	r4,130
  815d48:	212bd804 	addi	r4,r4,-20640
  815d4c:	0815c900 	call	815c90 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  815d50:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( CAM_UART, cam_uart);
  815d54:	01800044 	movi	r6,1
  815d58:	000b883a 	mov	r5,zero
  815d5c:	010020b4 	movhi	r4,130
  815d60:	212ffd04 	addi	r4,r4,-16396
  815d64:	08177d80 	call	8177d8 <altera_avalon_uart_init>
  815d68:	010020b4 	movhi	r4,130
  815d6c:	212ff304 	addi	r4,r4,-16436
  815d70:	0815c900 	call	815c90 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  815d74:	01800084 	movi	r6,2
  815d78:	000b883a 	mov	r5,zero
  815d7c:	010020b4 	movhi	r4,130
  815d80:	21303104 	addi	r4,r4,-16188
  815d84:	08177d80 	call	8177d8 <altera_avalon_uart_init>
  815d88:	010020b4 	movhi	r4,130
  815d8c:	21302704 	addi	r4,r4,-16228
  815d90:	0815c900 	call	815c90 <alt_dev_reg>
}
  815d94:	0001883a 	nop
  815d98:	e037883a 	mov	sp,fp
  815d9c:	dfc00117 	ldw	ra,4(sp)
  815da0:	df000017 	ldw	fp,0(sp)
  815da4:	dec00204 	addi	sp,sp,8
  815da8:	f800283a 	ret

00815dac <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  815dac:	defffd04 	addi	sp,sp,-12
  815db0:	dfc00215 	stw	ra,8(sp)
  815db4:	df000115 	stw	fp,4(sp)
  815db8:	df000104 	addi	fp,sp,4
  815dbc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  815dc0:	d1604904 	addi	r5,gp,-32476
  815dc4:	e13fff17 	ldw	r4,-4(fp)
  815dc8:	08189c00 	call	8189c0 <alt_dev_llist_insert>
}
  815dcc:	e037883a 	mov	sp,fp
  815dd0:	dfc00117 	ldw	ra,4(sp)
  815dd4:	df000017 	ldw	fp,0(sp)
  815dd8:	dec00204 	addi	sp,sp,8
  815ddc:	f800283a 	ret

00815de0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  815de0:	defffc04 	addi	sp,sp,-16
  815de4:	dfc00315 	stw	ra,12(sp)
  815de8:	df000215 	stw	fp,8(sp)
  815dec:	df000204 	addi	fp,sp,8
  815df0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  815df4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  815df8:	e13fff17 	ldw	r4,-4(fp)
  815dfc:	0815e340 	call	815e34 <alt_epcs_flash_query>
  815e00:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  815e04:	e0bffe17 	ldw	r2,-8(fp)
  815e08:	1000041e 	bne	r2,zero,815e1c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  815e0c:	e0bfff17 	ldw	r2,-4(fp)
  815e10:	1009883a 	mov	r4,r2
  815e14:	0815dac0 	call	815dac <alt_flash_device_register>
  815e18:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  815e1c:	e0bffe17 	ldw	r2,-8(fp)
}
  815e20:	e037883a 	mov	sp,fp
  815e24:	dfc00117 	ldw	ra,4(sp)
  815e28:	df000017 	ldw	fp,0(sp)
  815e2c:	dec00204 	addi	sp,sp,8
  815e30:	f800283a 	ret

00815e34 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  815e34:	defffc04 	addi	sp,sp,-16
  815e38:	dfc00315 	stw	ra,12(sp)
  815e3c:	df000215 	stw	fp,8(sp)
  815e40:	df000204 	addi	fp,sp,8
  815e44:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  815e48:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  815e4c:	e0bfff17 	ldw	r2,-4(fp)
  815e50:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  815e54:	e0bfff17 	ldw	r2,-4(fp)
  815e58:	10802e17 	ldw	r2,184(r2)
  815e5c:	1009883a 	mov	r4,r2
  815e60:	08186b80 	call	8186b8 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  815e64:	10c03fcc 	andi	r3,r2,255
  815e68:	e0bfff17 	ldw	r2,-4(fp)
  815e6c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  815e70:	e0bfff17 	ldw	r2,-4(fp)
  815e74:	10803017 	ldw	r2,192(r2)
  815e78:	10800598 	cmpnei	r2,r2,22
  815e7c:	10000a1e 	bne	r2,zero,815ea8 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  815e80:	e0bfff17 	ldw	r2,-4(fp)
  815e84:	00c02034 	movhi	r3,128
  815e88:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  815e8c:	e0bfff17 	ldw	r2,-4(fp)
  815e90:	00c02004 	movi	r3,128
  815e94:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  815e98:	e0bfff17 	ldw	r2,-4(fp)
  815e9c:	00c00074 	movhi	r3,1
  815ea0:	10c01015 	stw	r3,64(r2)
  815ea4:	0000ce06 	br	8161e0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  815ea8:	e0bfff17 	ldw	r2,-4(fp)
  815eac:	10803017 	ldw	r2,192(r2)
  815eb0:	10800518 	cmpnei	r2,r2,20
  815eb4:	10000a1e 	bne	r2,zero,815ee0 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  815eb8:	e0bfff17 	ldw	r2,-4(fp)
  815ebc:	00c00834 	movhi	r3,32
  815ec0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  815ec4:	e0bfff17 	ldw	r2,-4(fp)
  815ec8:	00c00804 	movi	r3,32
  815ecc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  815ed0:	e0bfff17 	ldw	r2,-4(fp)
  815ed4:	00c00074 	movhi	r3,1
  815ed8:	10c01015 	stw	r3,64(r2)
  815edc:	0000c006 	br	8161e0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  815ee0:	e0bfff17 	ldw	r2,-4(fp)
  815ee4:	10803017 	ldw	r2,192(r2)
  815ee8:	108004d8 	cmpnei	r2,r2,19
  815eec:	10000a1e 	bne	r2,zero,815f18 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  815ef0:	e0bfff17 	ldw	r2,-4(fp)
  815ef4:	00c00434 	movhi	r3,16
  815ef8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  815efc:	e0bfff17 	ldw	r2,-4(fp)
  815f00:	00c00404 	movi	r3,16
  815f04:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  815f08:	e0bfff17 	ldw	r2,-4(fp)
  815f0c:	00c00074 	movhi	r3,1
  815f10:	10c01015 	stw	r3,64(r2)
  815f14:	0000b206 	br	8161e0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  815f18:	e0bfff17 	ldw	r2,-4(fp)
  815f1c:	10803017 	ldw	r2,192(r2)
  815f20:	10800498 	cmpnei	r2,r2,18
  815f24:	10000a1e 	bne	r2,zero,815f50 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  815f28:	e0bfff17 	ldw	r2,-4(fp)
  815f2c:	00c00234 	movhi	r3,8
  815f30:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  815f34:	e0bfff17 	ldw	r2,-4(fp)
  815f38:	00c00204 	movi	r3,8
  815f3c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  815f40:	e0bfff17 	ldw	r2,-4(fp)
  815f44:	00c00074 	movhi	r3,1
  815f48:	10c01015 	stw	r3,64(r2)
  815f4c:	0000a406 	br	8161e0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  815f50:	e0bfff17 	ldw	r2,-4(fp)
  815f54:	10803017 	ldw	r2,192(r2)
  815f58:	10800418 	cmpnei	r2,r2,16
  815f5c:	10000a1e 	bne	r2,zero,815f88 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  815f60:	e0bfff17 	ldw	r2,-4(fp)
  815f64:	00c000b4 	movhi	r3,2
  815f68:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  815f6c:	e0bfff17 	ldw	r2,-4(fp)
  815f70:	00c00104 	movi	r3,4
  815f74:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  815f78:	e0bfff17 	ldw	r2,-4(fp)
  815f7c:	00e00014 	movui	r3,32768
  815f80:	10c01015 	stw	r3,64(r2)
  815f84:	00009606 	br	8161e0 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  815f88:	e0bfff17 	ldw	r2,-4(fp)
  815f8c:	10802e17 	ldw	r2,184(r2)
  815f90:	1009883a 	mov	r4,r2
  815f94:	08187200 	call	818720 <epcs_read_device_id>
  815f98:	1007883a 	mov	r3,r2
  815f9c:	e0bfff17 	ldw	r2,-4(fp)
  815fa0:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  815fa4:	e0bfff17 	ldw	r2,-4(fp)
  815fa8:	10c03017 	ldw	r3,192(r2)
  815fac:	00804034 	movhi	r2,256
  815fb0:	10bfffc4 	addi	r2,r2,-1
  815fb4:	1886703a 	and	r3,r3,r2
  815fb8:	00800874 	movhi	r2,33
  815fbc:	10ae8544 	addi	r2,r2,-17899
  815fc0:	18800a1e 	bne	r3,r2,815fec <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  815fc4:	e0bfff17 	ldw	r2,-4(fp)
  815fc8:	00c00834 	movhi	r3,32
  815fcc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  815fd0:	e0bfff17 	ldw	r2,-4(fp)
  815fd4:	00c00804 	movi	r3,32
  815fd8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  815fdc:	e0bfff17 	ldw	r2,-4(fp)
  815fe0:	00c00074 	movhi	r3,1
  815fe4:	10c01015 	stw	r3,64(r2)
  815fe8:	00007d06 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  815fec:	e0bfff17 	ldw	r2,-4(fp)
  815ff0:	10c03017 	ldw	r3,192(r2)
  815ff4:	00804034 	movhi	r2,256
  815ff8:	10bfffc4 	addi	r2,r2,-1
  815ffc:	1886703a 	and	r3,r3,r2
  816000:	00800874 	movhi	r2,33
  816004:	10ae8584 	addi	r2,r2,-17898
  816008:	18800a1e 	bne	r3,r2,816034 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  81600c:	e0bfff17 	ldw	r2,-4(fp)
  816010:	00c01034 	movhi	r3,64
  816014:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  816018:	e0bfff17 	ldw	r2,-4(fp)
  81601c:	00c01004 	movi	r3,64
  816020:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816024:	e0bfff17 	ldw	r2,-4(fp)
  816028:	00c00074 	movhi	r3,1
  81602c:	10c01015 	stw	r3,64(r2)
  816030:	00006b06 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  816034:	e0bfff17 	ldw	r2,-4(fp)
  816038:	10c03017 	ldw	r3,192(r2)
  81603c:	00804034 	movhi	r2,256
  816040:	10bfffc4 	addi	r2,r2,-1
  816044:	1886703a 	and	r3,r3,r2
  816048:	00800874 	movhi	r2,33
  81604c:	10ae85c4 	addi	r2,r2,-17897
  816050:	18800a1e 	bne	r3,r2,81607c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  816054:	e0bfff17 	ldw	r2,-4(fp)
  816058:	00c02034 	movhi	r3,128
  81605c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  816060:	e0bfff17 	ldw	r2,-4(fp)
  816064:	00c02004 	movi	r3,128
  816068:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  81606c:	e0bfff17 	ldw	r2,-4(fp)
  816070:	00c00074 	movhi	r3,1
  816074:	10c01015 	stw	r3,64(r2)
  816078:	00005906 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  81607c:	e0bfff17 	ldw	r2,-4(fp)
  816080:	10c03017 	ldw	r3,192(r2)
  816084:	00804034 	movhi	r2,256
  816088:	10bfffc4 	addi	r2,r2,-1
  81608c:	1886703a 	and	r3,r3,r2
  816090:	00800874 	movhi	r2,33
  816094:	10ae8604 	addi	r2,r2,-17896
  816098:	18800a1e 	bne	r3,r2,8160c4 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  81609c:	e0bfff17 	ldw	r2,-4(fp)
  8160a0:	00c04034 	movhi	r3,256
  8160a4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  8160a8:	e0bfff17 	ldw	r2,-4(fp)
  8160ac:	00c04004 	movi	r3,256
  8160b0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8160b4:	e0bfff17 	ldw	r2,-4(fp)
  8160b8:	00c00074 	movhi	r3,1
  8160bc:	10c01015 	stw	r3,64(r2)
  8160c0:	00004706 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  8160c4:	e0bfff17 	ldw	r2,-4(fp)
  8160c8:	10803017 	ldw	r2,192(r2)
  8160cc:	10803fcc 	andi	r2,r2,255
  8160d0:	10800618 	cmpnei	r2,r2,24
  8160d4:	10000a1e 	bne	r2,zero,816100 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  8160d8:	e0bfff17 	ldw	r2,-4(fp)
  8160dc:	00c04034 	movhi	r3,256
  8160e0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  8160e4:	e0bfff17 	ldw	r2,-4(fp)
  8160e8:	00c01004 	movi	r3,64
  8160ec:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  8160f0:	e0bfff17 	ldw	r2,-4(fp)
  8160f4:	00c00134 	movhi	r3,4
  8160f8:	10c01015 	stw	r3,64(r2)
  8160fc:	00003806 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  816100:	e0bfff17 	ldw	r2,-4(fp)
  816104:	10803017 	ldw	r2,192(r2)
  816108:	10803fcc 	andi	r2,r2,255
  81610c:	10800658 	cmpnei	r2,r2,25
  816110:	10000d1e 	bne	r2,zero,816148 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  816114:	e0bfff17 	ldw	r2,-4(fp)
  816118:	00c08034 	movhi	r3,512
  81611c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  816120:	e0bfff17 	ldw	r2,-4(fp)
  816124:	00c08004 	movi	r3,512
  816128:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  81612c:	e0bfff17 	ldw	r2,-4(fp)
  816130:	00c00074 	movhi	r3,1
  816134:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  816138:	e0bfff17 	ldw	r2,-4(fp)
  81613c:	00c00044 	movi	r3,1
  816140:	10c03215 	stw	r3,200(r2)
  816144:	00002606 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  816148:	e0bfff17 	ldw	r2,-4(fp)
  81614c:	10803017 	ldw	r2,192(r2)
  816150:	10803fcc 	andi	r2,r2,255
  816154:	10800818 	cmpnei	r2,r2,32
  816158:	10000d1e 	bne	r2,zero,816190 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  81615c:	e0bfff17 	ldw	r2,-4(fp)
  816160:	00c10034 	movhi	r3,1024
  816164:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  816168:	e0bfff17 	ldw	r2,-4(fp)
  81616c:	00c10004 	movi	r3,1024
  816170:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816174:	e0bfff17 	ldw	r2,-4(fp)
  816178:	00c00074 	movhi	r3,1
  81617c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  816180:	e0bfff17 	ldw	r2,-4(fp)
  816184:	00c00044 	movi	r3,1
  816188:	10c03215 	stw	r3,200(r2)
  81618c:	00001406 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  816190:	e0bfff17 	ldw	r2,-4(fp)
  816194:	10803017 	ldw	r2,192(r2)
  816198:	10803fcc 	andi	r2,r2,255
  81619c:	10800858 	cmpnei	r2,r2,33
  8161a0:	10000d1e 	bne	r2,zero,8161d8 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  8161a4:	e0bfff17 	ldw	r2,-4(fp)
  8161a8:	00c20034 	movhi	r3,2048
  8161ac:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  8161b0:	e0bfff17 	ldw	r2,-4(fp)
  8161b4:	00c20004 	movi	r3,2048
  8161b8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8161bc:	e0bfff17 	ldw	r2,-4(fp)
  8161c0:	00c00074 	movhi	r3,1
  8161c4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  8161c8:	e0bfff17 	ldw	r2,-4(fp)
  8161cc:	00c00044 	movi	r3,1
  8161d0:	10c03215 	stw	r3,200(r2)
  8161d4:	00000206 	br	8161e0 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  8161d8:	00bffb44 	movi	r2,-19
  8161dc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  8161e0:	e0bfff17 	ldw	r2,-4(fp)
  8161e4:	10800e17 	ldw	r2,56(r2)
  8161e8:	1007883a 	mov	r3,r2
  8161ec:	e0bfff17 	ldw	r2,-4(fp)
  8161f0:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  8161f4:	e0bfff17 	ldw	r2,-4(fp)
  8161f8:	00c00044 	movi	r3,1
  8161fc:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  816200:	e0bfff17 	ldw	r2,-4(fp)
  816204:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  816208:	e0bfff17 	ldw	r2,-4(fp)
  81620c:	00c04004 	movi	r3,256
  816210:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  816214:	e0bffe17 	ldw	r2,-8(fp)
}
  816218:	e037883a 	mov	sp,fp
  81621c:	dfc00117 	ldw	ra,4(sp)
  816220:	df000017 	ldw	fp,0(sp)
  816224:	dec00204 	addi	sp,sp,8
  816228:	f800283a 	ret

0081622c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  81622c:	deffee04 	addi	sp,sp,-72
  816230:	dfc01115 	stw	ra,68(sp)
  816234:	df001015 	stw	fp,64(sp)
  816238:	df001004 	addi	fp,sp,64
  81623c:	e13ffc15 	stw	r4,-16(fp)
  816240:	e17ffd15 	stw	r5,-12(fp)
  816244:	e1bffe15 	stw	r6,-8(fp)
  816248:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  81624c:	00800804 	movi	r2,32
  816250:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  816254:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  816258:	00002706 	br	8162f8 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  81625c:	e0fff117 	ldw	r3,-60(fp)
  816260:	e0bfff17 	ldw	r2,-4(fp)
  816264:	1880012e 	bgeu	r3,r2,81626c <alt_epcs_flash_memcmp+0x40>
  816268:	1805883a 	mov	r2,r3
  81626c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  816270:	e0fffe17 	ldw	r3,-8(fp)
  816274:	e0bff017 	ldw	r2,-64(fp)
  816278:	1885883a 	add	r2,r3,r2
  81627c:	e0fff404 	addi	r3,fp,-48
  816280:	e1fff217 	ldw	r7,-56(fp)
  816284:	180d883a 	mov	r6,r3
  816288:	100b883a 	mov	r5,r2
  81628c:	e13ffc17 	ldw	r4,-16(fp)
  816290:	08168100 	call	816810 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  816294:	1000020e 	bge	r2,zero,8162a0 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  816298:	00bfffc4 	movi	r2,-1
  81629c:	00001906 	br	816304 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  8162a0:	e0bff017 	ldw	r2,-64(fp)
  8162a4:	e0fffd17 	ldw	r3,-12(fp)
  8162a8:	1885883a 	add	r2,r3,r2
  8162ac:	e13ff217 	ldw	r4,-56(fp)
  8162b0:	e0fff404 	addi	r3,fp,-48
  8162b4:	200d883a 	mov	r6,r4
  8162b8:	180b883a 	mov	r5,r3
  8162bc:	1009883a 	mov	r4,r2
  8162c0:	0819a540 	call	819a54 <memcmp>
  8162c4:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  8162c8:	e0bff317 	ldw	r2,-52(fp)
  8162cc:	10000226 	beq	r2,zero,8162d8 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  8162d0:	e0bff317 	ldw	r2,-52(fp)
  8162d4:	00000b06 	br	816304 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  8162d8:	e0bff217 	ldw	r2,-56(fp)
  8162dc:	e0ffff17 	ldw	r3,-4(fp)
  8162e0:	1885c83a 	sub	r2,r3,r2
  8162e4:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  8162e8:	e0fff017 	ldw	r3,-64(fp)
  8162ec:	e0bff217 	ldw	r2,-56(fp)
  8162f0:	1885883a 	add	r2,r3,r2
  8162f4:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  8162f8:	e0bfff17 	ldw	r2,-4(fp)
  8162fc:	103fd71e 	bne	r2,zero,81625c <__alt_mem_epcs_flash_controller_0+0xff80d25c>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  816300:	0005883a 	mov	r2,zero
}
  816304:	e037883a 	mov	sp,fp
  816308:	dfc00117 	ldw	ra,4(sp)
  81630c:	df000017 	ldw	fp,0(sp)
  816310:	dec00204 	addi	sp,sp,8
  816314:	f800283a 	ret

00816318 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  816318:	defff404 	addi	sp,sp,-48
  81631c:	dfc00b15 	stw	ra,44(sp)
  816320:	df000a15 	stw	fp,40(sp)
  816324:	df000a04 	addi	fp,sp,40
  816328:	e13ffc15 	stw	r4,-16(fp)
  81632c:	e17ffd15 	stw	r5,-12(fp)
  816330:	e1bffe15 	stw	r6,-8(fp)
  816334:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  816338:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  81633c:	e03ff815 	stw	zero,-32(fp)
  816340:	00008306 	br	816550 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  816344:	e0fffc17 	ldw	r3,-16(fp)
  816348:	e0bff817 	ldw	r2,-32(fp)
  81634c:	1004913a 	slli	r2,r2,4
  816350:	1885883a 	add	r2,r3,r2
  816354:	10800d04 	addi	r2,r2,52
  816358:	10800017 	ldw	r2,0(r2)
  81635c:	e0fffd17 	ldw	r3,-12(fp)
  816360:	18807816 	blt	r3,r2,816544 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  816364:	e0fffc17 	ldw	r3,-16(fp)
  816368:	e0bff817 	ldw	r2,-32(fp)
  81636c:	1004913a 	slli	r2,r2,4
  816370:	1885883a 	add	r2,r3,r2
  816374:	10800d04 	addi	r2,r2,52
  816378:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  81637c:	e13ffc17 	ldw	r4,-16(fp)
  816380:	e0bff817 	ldw	r2,-32(fp)
  816384:	1004913a 	slli	r2,r2,4
  816388:	2085883a 	add	r2,r4,r2
  81638c:	10800e04 	addi	r2,r2,56
  816390:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  816394:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  816398:	e0fffd17 	ldw	r3,-12(fp)
  81639c:	1880690e 	bge	r3,r2,816544 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  8163a0:	e0fffc17 	ldw	r3,-16(fp)
  8163a4:	e0bff817 	ldw	r2,-32(fp)
  8163a8:	1004913a 	slli	r2,r2,4
  8163ac:	1885883a 	add	r2,r3,r2
  8163b0:	10800d04 	addi	r2,r2,52
  8163b4:	10800017 	ldw	r2,0(r2)
  8163b8:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  8163bc:	e03ff915 	stw	zero,-28(fp)
  8163c0:	00005806 	br	816524 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  8163c4:	e0fffd17 	ldw	r3,-12(fp)
  8163c8:	e0bffa17 	ldw	r2,-24(fp)
  8163cc:	18804916 	blt	r3,r2,8164f4 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  8163d0:	e0fffc17 	ldw	r3,-16(fp)
  8163d4:	e0bff817 	ldw	r2,-32(fp)
  8163d8:	10800104 	addi	r2,r2,4
  8163dc:	1004913a 	slli	r2,r2,4
  8163e0:	1885883a 	add	r2,r3,r2
  8163e4:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  8163e8:	e0bffa17 	ldw	r2,-24(fp)
  8163ec:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  8163f0:	e0fffd17 	ldw	r3,-12(fp)
  8163f4:	18803f0e 	bge	r3,r2,8164f4 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  8163f8:	e0fffc17 	ldw	r3,-16(fp)
  8163fc:	e0bff817 	ldw	r2,-32(fp)
  816400:	10800104 	addi	r2,r2,4
  816404:	1004913a 	slli	r2,r2,4
  816408:	1885883a 	add	r2,r3,r2
  81640c:	10c00017 	ldw	r3,0(r2)
  816410:	e0bffa17 	ldw	r2,-24(fp)
  816414:	1887883a 	add	r3,r3,r2
  816418:	e0bffd17 	ldw	r2,-12(fp)
  81641c:	1885c83a 	sub	r2,r3,r2
  816420:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  816424:	e0fffb17 	ldw	r3,-20(fp)
  816428:	e0bfff17 	ldw	r2,-4(fp)
  81642c:	1880010e 	bge	r3,r2,816434 <alt_epcs_flash_write+0x11c>
  816430:	1805883a 	mov	r2,r3
  816434:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  816438:	e0bffb17 	ldw	r2,-20(fp)
  81643c:	100f883a 	mov	r7,r2
  816440:	e1bffd17 	ldw	r6,-12(fp)
  816444:	e17ffe17 	ldw	r5,-8(fp)
  816448:	e13ffc17 	ldw	r4,-16(fp)
  81644c:	081622c0 	call	81622c <alt_epcs_flash_memcmp>
  816450:	10001226 	beq	r2,zero,81649c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  816454:	e0bffc17 	ldw	r2,-16(fp)
  816458:	10800817 	ldw	r2,32(r2)
  81645c:	e17ffa17 	ldw	r5,-24(fp)
  816460:	e13ffc17 	ldw	r4,-16(fp)
  816464:	103ee83a 	callr	r2
  816468:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  81646c:	e0bff717 	ldw	r2,-36(fp)
  816470:	10000a1e 	bne	r2,zero,81649c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  816474:	e0bffc17 	ldw	r2,-16(fp)
  816478:	10800917 	ldw	r2,36(r2)
  81647c:	e0fffb17 	ldw	r3,-20(fp)
  816480:	d8c00015 	stw	r3,0(sp)
  816484:	e1fffe17 	ldw	r7,-8(fp)
  816488:	e1bffd17 	ldw	r6,-12(fp)
  81648c:	e17ffa17 	ldw	r5,-24(fp)
  816490:	e13ffc17 	ldw	r4,-16(fp)
  816494:	103ee83a 	callr	r2
  816498:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  81649c:	e0ffff17 	ldw	r3,-4(fp)
  8164a0:	e0bffb17 	ldw	r2,-20(fp)
  8164a4:	18802e26 	beq	r3,r2,816560 <alt_epcs_flash_write+0x248>
  8164a8:	e0bff717 	ldw	r2,-36(fp)
  8164ac:	10002c1e 	bne	r2,zero,816560 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  8164b0:	e0ffff17 	ldw	r3,-4(fp)
  8164b4:	e0bffb17 	ldw	r2,-20(fp)
  8164b8:	1885c83a 	sub	r2,r3,r2
  8164bc:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  8164c0:	e0fffc17 	ldw	r3,-16(fp)
  8164c4:	e0bff817 	ldw	r2,-32(fp)
  8164c8:	10800104 	addi	r2,r2,4
  8164cc:	1004913a 	slli	r2,r2,4
  8164d0:	1885883a 	add	r2,r3,r2
  8164d4:	10c00017 	ldw	r3,0(r2)
  8164d8:	e0bffa17 	ldw	r2,-24(fp)
  8164dc:	1885883a 	add	r2,r3,r2
  8164e0:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  8164e4:	e0bffb17 	ldw	r2,-20(fp)
  8164e8:	e0fffe17 	ldw	r3,-8(fp)
  8164ec:	1885883a 	add	r2,r3,r2
  8164f0:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  8164f4:	e0fffc17 	ldw	r3,-16(fp)
  8164f8:	e0bff817 	ldw	r2,-32(fp)
  8164fc:	10800104 	addi	r2,r2,4
  816500:	1004913a 	slli	r2,r2,4
  816504:	1885883a 	add	r2,r3,r2
  816508:	10800017 	ldw	r2,0(r2)
  81650c:	e0fffa17 	ldw	r3,-24(fp)
  816510:	1885883a 	add	r2,r3,r2
  816514:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  816518:	e0bff917 	ldw	r2,-28(fp)
  81651c:	10800044 	addi	r2,r2,1
  816520:	e0bff915 	stw	r2,-28(fp)
  816524:	e0fffc17 	ldw	r3,-16(fp)
  816528:	e0bff817 	ldw	r2,-32(fp)
  81652c:	1004913a 	slli	r2,r2,4
  816530:	1885883a 	add	r2,r3,r2
  816534:	10800f04 	addi	r2,r2,60
  816538:	10800017 	ldw	r2,0(r2)
  81653c:	e0fff917 	ldw	r3,-28(fp)
  816540:	18bfa016 	blt	r3,r2,8163c4 <__alt_mem_epcs_flash_controller_0+0xff80d3c4>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  816544:	e0bff817 	ldw	r2,-32(fp)
  816548:	10800044 	addi	r2,r2,1
  81654c:	e0bff815 	stw	r2,-32(fp)
  816550:	e0bffc17 	ldw	r2,-16(fp)
  816554:	10800c17 	ldw	r2,48(r2)
  816558:	e0fff817 	ldw	r3,-32(fp)
  81655c:	18bf7916 	blt	r3,r2,816344 <__alt_mem_epcs_flash_controller_0+0xff80d344>
      }
    }
  }

finished:
  return ret_code;
  816560:	e0bff717 	ldw	r2,-36(fp)
}
  816564:	e037883a 	mov	sp,fp
  816568:	dfc00117 	ldw	ra,4(sp)
  81656c:	df000017 	ldw	fp,0(sp)
  816570:	dec00204 	addi	sp,sp,8
  816574:	f800283a 	ret

00816578 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  816578:	defffa04 	addi	sp,sp,-24
  81657c:	df000515 	stw	fp,20(sp)
  816580:	df000504 	addi	fp,sp,20
  816584:	e13ffd15 	stw	r4,-12(fp)
  816588:	e17ffe15 	stw	r5,-8(fp)
  81658c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  816590:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  816594:	e0bffd17 	ldw	r2,-12(fp)
  816598:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  81659c:	e0bffc17 	ldw	r2,-16(fp)
  8165a0:	10c00c17 	ldw	r3,48(r2)
  8165a4:	e0bfff17 	ldw	r2,-4(fp)
  8165a8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  8165ac:	e0bffc17 	ldw	r2,-16(fp)
  8165b0:	10800c17 	ldw	r2,48(r2)
  8165b4:	1000031e 	bne	r2,zero,8165c4 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  8165b8:	00bffec4 	movi	r2,-5
  8165bc:	e0bffb15 	stw	r2,-20(fp)
  8165c0:	00000b06 	br	8165f0 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  8165c4:	e0bffc17 	ldw	r2,-16(fp)
  8165c8:	10800c17 	ldw	r2,48(r2)
  8165cc:	10800250 	cmplti	r2,r2,9
  8165d0:	1000031e 	bne	r2,zero,8165e0 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  8165d4:	00bffd04 	movi	r2,-12
  8165d8:	e0bffb15 	stw	r2,-20(fp)
  8165dc:	00000406 	br	8165f0 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  8165e0:	e0bffc17 	ldw	r2,-16(fp)
  8165e4:	10c00d04 	addi	r3,r2,52
  8165e8:	e0bffe17 	ldw	r2,-8(fp)
  8165ec:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  8165f0:	e0bffb17 	ldw	r2,-20(fp)
}
  8165f4:	e037883a 	mov	sp,fp
  8165f8:	df000017 	ldw	fp,0(sp)
  8165fc:	dec00104 	addi	sp,sp,4
  816600:	f800283a 	ret

00816604 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  816604:	defff904 	addi	sp,sp,-28
  816608:	df000615 	stw	fp,24(sp)
  81660c:	df000604 	addi	fp,sp,24
  816610:	e13ffe15 	stw	r4,-8(fp)
  816614:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  816618:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  81661c:	e0bffe17 	ldw	r2,-8(fp)
  816620:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  816624:	e0bffb17 	ldw	r2,-20(fp)
  816628:	10800c17 	ldw	r2,48(r2)
  81662c:	10bfffc4 	addi	r2,r2,-1
  816630:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  816634:	e0fffb17 	ldw	r3,-20(fp)
  816638:	e0bffc17 	ldw	r2,-16(fp)
  81663c:	1004913a 	slli	r2,r2,4
  816640:	1885883a 	add	r2,r3,r2
  816644:	10800d04 	addi	r2,r2,52
  816648:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  81664c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  816650:	e13ffb17 	ldw	r4,-20(fp)
  816654:	e0bffc17 	ldw	r2,-16(fp)
  816658:	1004913a 	slli	r2,r2,4
  81665c:	2085883a 	add	r2,r4,r2
  816660:	10800e04 	addi	r2,r2,56
  816664:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  816668:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  81666c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  816670:	e0bfff17 	ldw	r2,-4(fp)
  816674:	e0fffd17 	ldw	r3,-12(fp)
  816678:	1880022e 	bgeu	r3,r2,816684 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  81667c:	00bffec4 	movi	r2,-5
  816680:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  816684:	e0bffa17 	ldw	r2,-24(fp)
}
  816688:	e037883a 	mov	sp,fp
  81668c:	df000017 	ldw	fp,0(sp)
  816690:	dec00104 	addi	sp,sp,4
  816694:	f800283a 	ret

00816698 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  816698:	defffa04 	addi	sp,sp,-24
  81669c:	dfc00515 	stw	ra,20(sp)
  8166a0:	df000415 	stw	fp,16(sp)
  8166a4:	df000404 	addi	fp,sp,16
  8166a8:	e13ffe15 	stw	r4,-8(fp)
  8166ac:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  8166b0:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  8166b4:	e0bffe17 	ldw	r2,-8(fp)
  8166b8:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  8166bc:	e17fff17 	ldw	r5,-4(fp)
  8166c0:	e13ffe17 	ldw	r4,-8(fp)
  8166c4:	08166040 	call	816604 <alt_epcs_test_address>
  8166c8:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  8166cc:	e0bffc17 	ldw	r2,-16(fp)
  8166d0:	10000916 	blt	r2,zero,8166f8 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  8166d4:	e0bffd17 	ldw	r2,-12(fp)
  8166d8:	10c02e17 	ldw	r3,184(r2)
  8166dc:	e13fff17 	ldw	r4,-4(fp)
  8166e0:	e0bffd17 	ldw	r2,-12(fp)
  8166e4:	10803217 	ldw	r2,200(r2)
  8166e8:	100d883a 	mov	r6,r2
  8166ec:	200b883a 	mov	r5,r4
  8166f0:	1809883a 	mov	r4,r3
  8166f4:	08182ec0 	call	8182ec <epcs_sector_erase>
  }
  return ret_code;
  8166f8:	e0bffc17 	ldw	r2,-16(fp)
}
  8166fc:	e037883a 	mov	sp,fp
  816700:	dfc00117 	ldw	ra,4(sp)
  816704:	df000017 	ldw	fp,0(sp)
  816708:	dec00204 	addi	sp,sp,8
  81670c:	f800283a 	ret

00816710 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  816710:	defff404 	addi	sp,sp,-48
  816714:	dfc00b15 	stw	ra,44(sp)
  816718:	df000a15 	stw	fp,40(sp)
  81671c:	df000a04 	addi	fp,sp,40
  816720:	e13ffc15 	stw	r4,-16(fp)
  816724:	e17ffd15 	stw	r5,-12(fp)
  816728:	e1bffe15 	stw	r6,-8(fp)
  81672c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  816730:	e0bffc17 	ldw	r2,-16(fp)
  816734:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  816738:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  81673c:	e17ffe17 	ldw	r5,-8(fp)
  816740:	e13ffc17 	ldw	r4,-16(fp)
  816744:	08166040 	call	816604 <alt_epcs_test_address>
  816748:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  81674c:	e0bff917 	ldw	r2,-28(fp)
  816750:	10002916 	blt	r2,zero,8167f8 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  816754:	00002606 	br	8167f0 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  816758:	e0bff817 	ldw	r2,-32(fp)
  81675c:	10c03117 	ldw	r3,196(r2)
  816760:	e0bffe17 	ldw	r2,-8(fp)
  816764:	1887883a 	add	r3,r3,r2
  816768:	e0bff817 	ldw	r2,-32(fp)
  81676c:	10803117 	ldw	r2,196(r2)
  816770:	0085c83a 	sub	r2,zero,r2
  816774:	1884703a 	and	r2,r3,r2
  816778:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  81677c:	e0fffa17 	ldw	r3,-24(fp)
  816780:	e0bffe17 	ldw	r2,-8(fp)
  816784:	1885c83a 	sub	r2,r3,r2
  816788:	e0c00217 	ldw	r3,8(fp)
  81678c:	1880010e 	bge	r3,r2,816794 <alt_epcs_flash_write_block+0x84>
  816790:	1805883a 	mov	r2,r3
  816794:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  816798:	e0bff817 	ldw	r2,-32(fp)
  81679c:	11002e17 	ldw	r4,184(r2)
  8167a0:	e0bff717 	ldw	r2,-36(fp)
  8167a4:	e0ffff17 	ldw	r3,-4(fp)
  8167a8:	1887883a 	add	r3,r3,r2
  8167ac:	e0bff817 	ldw	r2,-32(fp)
  8167b0:	10803217 	ldw	r2,200(r2)
  8167b4:	d8800015 	stw	r2,0(sp)
  8167b8:	e1fffb17 	ldw	r7,-20(fp)
  8167bc:	180d883a 	mov	r6,r3
  8167c0:	e17ffe17 	ldw	r5,-8(fp)
  8167c4:	081859c0 	call	81859c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  8167c8:	e0c00217 	ldw	r3,8(fp)
  8167cc:	e0bffb17 	ldw	r2,-20(fp)
  8167d0:	1885c83a 	sub	r2,r3,r2
  8167d4:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  8167d8:	e0fff717 	ldw	r3,-36(fp)
  8167dc:	e0bffb17 	ldw	r2,-20(fp)
  8167e0:	1885883a 	add	r2,r3,r2
  8167e4:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  8167e8:	e0bffa17 	ldw	r2,-24(fp)
  8167ec:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  8167f0:	e0800217 	ldw	r2,8(fp)
  8167f4:	103fd81e 	bne	r2,zero,816758 <__alt_mem_epcs_flash_controller_0+0xff80d758>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  8167f8:	e0bff917 	ldw	r2,-28(fp)
}
  8167fc:	e037883a 	mov	sp,fp
  816800:	dfc00117 	ldw	ra,4(sp)
  816804:	df000017 	ldw	fp,0(sp)
  816808:	dec00204 	addi	sp,sp,8
  81680c:	f800283a 	ret

00816810 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  816810:	defff704 	addi	sp,sp,-36
  816814:	dfc00815 	stw	ra,32(sp)
  816818:	df000715 	stw	fp,28(sp)
  81681c:	df000704 	addi	fp,sp,28
  816820:	e13ffc15 	stw	r4,-16(fp)
  816824:	e17ffd15 	stw	r5,-12(fp)
  816828:	e1bffe15 	stw	r6,-8(fp)
  81682c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  816830:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  816834:	e0bffc17 	ldw	r2,-16(fp)
  816838:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  81683c:	e17ffd17 	ldw	r5,-12(fp)
  816840:	e13ffc17 	ldw	r4,-16(fp)
  816844:	08166040 	call	816604 <alt_epcs_test_address>
  816848:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  81684c:	e0bffa17 	ldw	r2,-24(fp)
  816850:	10000f16 	blt	r2,zero,816890 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  816854:	e0bffb17 	ldw	r2,-20(fp)
  816858:	10c02e17 	ldw	r3,184(r2)
  81685c:	e0bffb17 	ldw	r2,-20(fp)
  816860:	10803217 	ldw	r2,200(r2)
  816864:	d8800015 	stw	r2,0(sp)
  816868:	e1ffff17 	ldw	r7,-4(fp)
  81686c:	e1bffe17 	ldw	r6,-8(fp)
  816870:	e17ffd17 	ldw	r5,-12(fp)
  816874:	1809883a 	mov	r4,r3
  816878:	08183e80 	call	8183e8 <epcs_read_buffer>
  81687c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  816880:	e0fffa17 	ldw	r3,-24(fp)
  816884:	e0bfff17 	ldw	r2,-4(fp)
  816888:	1880011e 	bne	r3,r2,816890 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  81688c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  816890:	e0bffa17 	ldw	r2,-24(fp)
}
  816894:	e037883a 	mov	sp,fp
  816898:	dfc00117 	ldw	ra,4(sp)
  81689c:	df000017 	ldw	fp,0(sp)
  8168a0:	dec00204 	addi	sp,sp,8
  8168a4:	f800283a 	ret

008168a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8168a8:	defffa04 	addi	sp,sp,-24
  8168ac:	dfc00515 	stw	ra,20(sp)
  8168b0:	df000415 	stw	fp,16(sp)
  8168b4:	df000404 	addi	fp,sp,16
  8168b8:	e13ffd15 	stw	r4,-12(fp)
  8168bc:	e17ffe15 	stw	r5,-8(fp)
  8168c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8168c4:	e0bffd17 	ldw	r2,-12(fp)
  8168c8:	10800017 	ldw	r2,0(r2)
  8168cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8168d0:	e0bffc17 	ldw	r2,-16(fp)
  8168d4:	10c00a04 	addi	r3,r2,40
  8168d8:	e0bffd17 	ldw	r2,-12(fp)
  8168dc:	10800217 	ldw	r2,8(r2)
  8168e0:	100f883a 	mov	r7,r2
  8168e4:	e1bfff17 	ldw	r6,-4(fp)
  8168e8:	e17ffe17 	ldw	r5,-8(fp)
  8168ec:	1809883a 	mov	r4,r3
  8168f0:	08170540 	call	817054 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8168f4:	e037883a 	mov	sp,fp
  8168f8:	dfc00117 	ldw	ra,4(sp)
  8168fc:	df000017 	ldw	fp,0(sp)
  816900:	dec00204 	addi	sp,sp,8
  816904:	f800283a 	ret

00816908 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  816908:	defffa04 	addi	sp,sp,-24
  81690c:	dfc00515 	stw	ra,20(sp)
  816910:	df000415 	stw	fp,16(sp)
  816914:	df000404 	addi	fp,sp,16
  816918:	e13ffd15 	stw	r4,-12(fp)
  81691c:	e17ffe15 	stw	r5,-8(fp)
  816920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  816924:	e0bffd17 	ldw	r2,-12(fp)
  816928:	10800017 	ldw	r2,0(r2)
  81692c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  816930:	e0bffc17 	ldw	r2,-16(fp)
  816934:	10c00a04 	addi	r3,r2,40
  816938:	e0bffd17 	ldw	r2,-12(fp)
  81693c:	10800217 	ldw	r2,8(r2)
  816940:	100f883a 	mov	r7,r2
  816944:	e1bfff17 	ldw	r6,-4(fp)
  816948:	e17ffe17 	ldw	r5,-8(fp)
  81694c:	1809883a 	mov	r4,r3
  816950:	08173100 	call	817310 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  816954:	e037883a 	mov	sp,fp
  816958:	dfc00117 	ldw	ra,4(sp)
  81695c:	df000017 	ldw	fp,0(sp)
  816960:	dec00204 	addi	sp,sp,8
  816964:	f800283a 	ret

00816968 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  816968:	defffc04 	addi	sp,sp,-16
  81696c:	dfc00315 	stw	ra,12(sp)
  816970:	df000215 	stw	fp,8(sp)
  816974:	df000204 	addi	fp,sp,8
  816978:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81697c:	e0bfff17 	ldw	r2,-4(fp)
  816980:	10800017 	ldw	r2,0(r2)
  816984:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  816988:	e0bffe17 	ldw	r2,-8(fp)
  81698c:	10c00a04 	addi	r3,r2,40
  816990:	e0bfff17 	ldw	r2,-4(fp)
  816994:	10800217 	ldw	r2,8(r2)
  816998:	100b883a 	mov	r5,r2
  81699c:	1809883a 	mov	r4,r3
  8169a0:	0816efc0 	call	816efc <altera_avalon_jtag_uart_close>
}
  8169a4:	e037883a 	mov	sp,fp
  8169a8:	dfc00117 	ldw	ra,4(sp)
  8169ac:	df000017 	ldw	fp,0(sp)
  8169b0:	dec00204 	addi	sp,sp,8
  8169b4:	f800283a 	ret

008169b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8169b8:	defffa04 	addi	sp,sp,-24
  8169bc:	dfc00515 	stw	ra,20(sp)
  8169c0:	df000415 	stw	fp,16(sp)
  8169c4:	df000404 	addi	fp,sp,16
  8169c8:	e13ffd15 	stw	r4,-12(fp)
  8169cc:	e17ffe15 	stw	r5,-8(fp)
  8169d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8169d4:	e0bffd17 	ldw	r2,-12(fp)
  8169d8:	10800017 	ldw	r2,0(r2)
  8169dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8169e0:	e0bffc17 	ldw	r2,-16(fp)
  8169e4:	10800a04 	addi	r2,r2,40
  8169e8:	e1bfff17 	ldw	r6,-4(fp)
  8169ec:	e17ffe17 	ldw	r5,-8(fp)
  8169f0:	1009883a 	mov	r4,r2
  8169f4:	0816f640 	call	816f64 <altera_avalon_jtag_uart_ioctl>
}
  8169f8:	e037883a 	mov	sp,fp
  8169fc:	dfc00117 	ldw	ra,4(sp)
  816a00:	df000017 	ldw	fp,0(sp)
  816a04:	dec00204 	addi	sp,sp,8
  816a08:	f800283a 	ret

00816a0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  816a0c:	defff104 	addi	sp,sp,-60
  816a10:	dfc00e15 	stw	ra,56(sp)
  816a14:	df000d15 	stw	fp,52(sp)
  816a18:	df000d04 	addi	fp,sp,52
  816a1c:	e13ff915 	stw	r4,-28(fp)
  816a20:	e17ffa15 	stw	r5,-24(fp)
  816a24:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  816a28:	e0bff917 	ldw	r2,-28(fp)
  816a2c:	10800c04 	addi	r2,r2,48
  816a30:	e0bff415 	stw	r2,-48(fp)
  816a34:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  816a38:	e0bff80b 	ldhu	r2,-32(fp)
  816a3c:	e0fff884 	addi	r3,fp,-30
  816a40:	180b883a 	mov	r5,r3
  816a44:	1009883a 	mov	r4,r2
  816a48:	08109440 	call	810944 <OSFlagCreate>
  816a4c:	1007883a 	mov	r3,r2
  816a50:	e0bff417 	ldw	r2,-48(fp)
  816a54:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  816a58:	e0bff917 	ldw	r2,-28(fp)
  816a5c:	10800a04 	addi	r2,r2,40
  816a60:	e0bff515 	stw	r2,-44(fp)
  816a64:	00800044 	movi	r2,1
  816a68:	e0bff78d 	sth	r2,-34(fp)
  816a6c:	e0bff78b 	ldhu	r2,-34(fp)
  816a70:	1009883a 	mov	r4,r2
  816a74:	08136640 	call	813664 <OSSemCreate>
  816a78:	1007883a 	mov	r3,r2
  816a7c:	e0bff517 	ldw	r2,-44(fp)
  816a80:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  816a84:	e0bff917 	ldw	r2,-28(fp)
  816a88:	10800b04 	addi	r2,r2,44
  816a8c:	e0bff615 	stw	r2,-40(fp)
  816a90:	00800044 	movi	r2,1
  816a94:	e0bff70d 	sth	r2,-36(fp)
  816a98:	e0bff70b 	ldhu	r2,-36(fp)
  816a9c:	1009883a 	mov	r4,r2
  816aa0:	08136640 	call	813664 <OSSemCreate>
  816aa4:	1007883a 	mov	r3,r2
  816aa8:	e0bff617 	ldw	r2,-40(fp)
  816aac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  816ab0:	e0bff917 	ldw	r2,-28(fp)
  816ab4:	00c00044 	movi	r3,1
  816ab8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  816abc:	e0bff917 	ldw	r2,-28(fp)
  816ac0:	10800017 	ldw	r2,0(r2)
  816ac4:	10800104 	addi	r2,r2,4
  816ac8:	1007883a 	mov	r3,r2
  816acc:	e0bff917 	ldw	r2,-28(fp)
  816ad0:	10800817 	ldw	r2,32(r2)
  816ad4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  816ad8:	e0bffa17 	ldw	r2,-24(fp)
  816adc:	e0fffb17 	ldw	r3,-20(fp)
  816ae0:	d8000015 	stw	zero,0(sp)
  816ae4:	e1fff917 	ldw	r7,-28(fp)
  816ae8:	01802074 	movhi	r6,129
  816aec:	319ad504 	addi	r6,r6,27476
  816af0:	180b883a 	mov	r5,r3
  816af4:	1009883a 	mov	r4,r2
  816af8:	080d87c0 	call	80d87c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  816afc:	e0bff917 	ldw	r2,-28(fp)
  816b00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  816b04:	e0bff917 	ldw	r2,-28(fp)
  816b08:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  816b0c:	d0e07817 	ldw	r3,-32288(gp)
  816b10:	e1fff917 	ldw	r7,-28(fp)
  816b14:	01802074 	movhi	r6,129
  816b18:	319b7e04 	addi	r6,r6,28152
  816b1c:	180b883a 	mov	r5,r3
  816b20:	1009883a 	mov	r4,r2
  816b24:	08188580 	call	818858 <alt_alarm_start>
  816b28:	1000040e 	bge	r2,zero,816b3c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  816b2c:	e0fff917 	ldw	r3,-28(fp)
  816b30:	00a00034 	movhi	r2,32768
  816b34:	10bfffc4 	addi	r2,r2,-1
  816b38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  816b3c:	0001883a 	nop
  816b40:	e037883a 	mov	sp,fp
  816b44:	dfc00117 	ldw	ra,4(sp)
  816b48:	df000017 	ldw	fp,0(sp)
  816b4c:	dec00204 	addi	sp,sp,8
  816b50:	f800283a 	ret

00816b54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  816b54:	defff204 	addi	sp,sp,-56
  816b58:	dfc00d15 	stw	ra,52(sp)
  816b5c:	df000c15 	stw	fp,48(sp)
  816b60:	df000c04 	addi	fp,sp,48
  816b64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  816b68:	e0bfff17 	ldw	r2,-4(fp)
  816b6c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  816b70:	e0bff617 	ldw	r2,-40(fp)
  816b74:	10800017 	ldw	r2,0(r2)
  816b78:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  816b7c:	e0bff717 	ldw	r2,-36(fp)
  816b80:	10800104 	addi	r2,r2,4
  816b84:	10800037 	ldwio	r2,0(r2)
  816b88:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  816b8c:	e0bff817 	ldw	r2,-32(fp)
  816b90:	1080c00c 	andi	r2,r2,768
  816b94:	10009126 	beq	r2,zero,816ddc <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  816b98:	e0bff817 	ldw	r2,-32(fp)
  816b9c:	1080400c 	andi	r2,r2,256
  816ba0:	10004726 	beq	r2,zero,816cc0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  816ba4:	00800074 	movhi	r2,1
  816ba8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816bac:	e0bff617 	ldw	r2,-40(fp)
  816bb0:	10800d17 	ldw	r2,52(r2)
  816bb4:	10800044 	addi	r2,r2,1
  816bb8:	1081ffcc 	andi	r2,r2,2047
  816bbc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  816bc0:	e0bff617 	ldw	r2,-40(fp)
  816bc4:	10c00e17 	ldw	r3,56(r2)
  816bc8:	e0bff917 	ldw	r2,-28(fp)
  816bcc:	18802726 	beq	r3,r2,816c6c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  816bd0:	e0bff717 	ldw	r2,-36(fp)
  816bd4:	10800037 	ldwio	r2,0(r2)
  816bd8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  816bdc:	e0bff417 	ldw	r2,-48(fp)
  816be0:	10a0000c 	andi	r2,r2,32768
  816be4:	10002326 	beq	r2,zero,816c74 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  816be8:	e0bff617 	ldw	r2,-40(fp)
  816bec:	10800d17 	ldw	r2,52(r2)
  816bf0:	e0fff417 	ldw	r3,-48(fp)
  816bf4:	1809883a 	mov	r4,r3
  816bf8:	e0fff617 	ldw	r3,-40(fp)
  816bfc:	1885883a 	add	r2,r3,r2
  816c00:	10801104 	addi	r2,r2,68
  816c04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816c08:	e0bff617 	ldw	r2,-40(fp)
  816c0c:	10800d17 	ldw	r2,52(r2)
  816c10:	10800044 	addi	r2,r2,1
  816c14:	10c1ffcc 	andi	r3,r2,2047
  816c18:	e0bff617 	ldw	r2,-40(fp)
  816c1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  816c20:	e0bff617 	ldw	r2,-40(fp)
  816c24:	10800c17 	ldw	r2,48(r2)
  816c28:	e0bffb15 	stw	r2,-20(fp)
  816c2c:	00800044 	movi	r2,1
  816c30:	e0bffc0d 	sth	r2,-16(fp)
  816c34:	00800044 	movi	r2,1
  816c38:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  816c3c:	d0a06343 	ldbu	r2,-32371(gp)
  816c40:	10803fcc 	andi	r2,r2,255
  816c44:	103fd926 	beq	r2,zero,816bac <__alt_mem_epcs_flash_controller_0+0xff80dbac>
  {
    OSFlagPost (group, flags, opt, &err);
  816c48:	e0bffc0b 	ldhu	r2,-16(fp)
  816c4c:	e0fffc83 	ldbu	r3,-14(fp)
  816c50:	e13ffdc4 	addi	r4,fp,-9
  816c54:	200f883a 	mov	r7,r4
  816c58:	180d883a 	mov	r6,r3
  816c5c:	100b883a 	mov	r5,r2
  816c60:	e13ffb17 	ldw	r4,-20(fp)
  816c64:	08115200 	call	811520 <OSFlagPost>
      }
  816c68:	003fd006 	br	816bac <__alt_mem_epcs_flash_controller_0+0xff80dbac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  816c6c:	0001883a 	nop
  816c70:	00000106 	br	816c78 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  816c74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  816c78:	e0bff417 	ldw	r2,-48(fp)
  816c7c:	10bfffec 	andhi	r2,r2,65535
  816c80:	10000f26 	beq	r2,zero,816cc0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  816c84:	e0bff617 	ldw	r2,-40(fp)
  816c88:	10c00817 	ldw	r3,32(r2)
  816c8c:	00bfff84 	movi	r2,-2
  816c90:	1886703a 	and	r3,r3,r2
  816c94:	e0bff617 	ldw	r2,-40(fp)
  816c98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  816c9c:	e0bff717 	ldw	r2,-36(fp)
  816ca0:	10800104 	addi	r2,r2,4
  816ca4:	1007883a 	mov	r3,r2
  816ca8:	e0bff617 	ldw	r2,-40(fp)
  816cac:	10800817 	ldw	r2,32(r2)
  816cb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  816cb4:	e0bff717 	ldw	r2,-36(fp)
  816cb8:	10800104 	addi	r2,r2,4
  816cbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  816cc0:	e0bff817 	ldw	r2,-32(fp)
  816cc4:	1080800c 	andi	r2,r2,512
  816cc8:	103fac26 	beq	r2,zero,816b7c <__alt_mem_epcs_flash_controller_0+0xff80db7c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  816ccc:	e0bff817 	ldw	r2,-32(fp)
  816cd0:	1004d43a 	srli	r2,r2,16
  816cd4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  816cd8:	00002606 	br	816d74 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  816cdc:	e0bff717 	ldw	r2,-36(fp)
  816ce0:	e0fff617 	ldw	r3,-40(fp)
  816ce4:	18c01017 	ldw	r3,64(r3)
  816ce8:	e13ff617 	ldw	r4,-40(fp)
  816cec:	20c7883a 	add	r3,r4,r3
  816cf0:	18c21104 	addi	r3,r3,2116
  816cf4:	18c00003 	ldbu	r3,0(r3)
  816cf8:	18c03fcc 	andi	r3,r3,255
  816cfc:	18c0201c 	xori	r3,r3,128
  816d00:	18ffe004 	addi	r3,r3,-128
  816d04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816d08:	e0bff617 	ldw	r2,-40(fp)
  816d0c:	10801017 	ldw	r2,64(r2)
  816d10:	10800044 	addi	r2,r2,1
  816d14:	10c1ffcc 	andi	r3,r2,2047
  816d18:	e0bff617 	ldw	r2,-40(fp)
  816d1c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  816d20:	e0bff617 	ldw	r2,-40(fp)
  816d24:	10800c17 	ldw	r2,48(r2)
  816d28:	e0bffa15 	stw	r2,-24(fp)
  816d2c:	00800084 	movi	r2,2
  816d30:	e0bffd0d 	sth	r2,-12(fp)
  816d34:	00800044 	movi	r2,1
  816d38:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  816d3c:	d0a06343 	ldbu	r2,-32371(gp)
  816d40:	10803fcc 	andi	r2,r2,255
  816d44:	10000826 	beq	r2,zero,816d68 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  816d48:	e0bffd0b 	ldhu	r2,-12(fp)
  816d4c:	e0fffd83 	ldbu	r3,-10(fp)
  816d50:	e13ffe04 	addi	r4,fp,-8
  816d54:	200f883a 	mov	r7,r4
  816d58:	180d883a 	mov	r6,r3
  816d5c:	100b883a 	mov	r5,r2
  816d60:	e13ffa17 	ldw	r4,-24(fp)
  816d64:	08115200 	call	811520 <OSFlagPost>

        space--;
  816d68:	e0bff517 	ldw	r2,-44(fp)
  816d6c:	10bfffc4 	addi	r2,r2,-1
  816d70:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  816d74:	e0bff517 	ldw	r2,-44(fp)
  816d78:	10000526 	beq	r2,zero,816d90 <altera_avalon_jtag_uart_irq+0x23c>
  816d7c:	e0bff617 	ldw	r2,-40(fp)
  816d80:	10c01017 	ldw	r3,64(r2)
  816d84:	e0bff617 	ldw	r2,-40(fp)
  816d88:	10800f17 	ldw	r2,60(r2)
  816d8c:	18bfd31e 	bne	r3,r2,816cdc <__alt_mem_epcs_flash_controller_0+0xff80dcdc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  816d90:	e0bff517 	ldw	r2,-44(fp)
  816d94:	103f7926 	beq	r2,zero,816b7c <__alt_mem_epcs_flash_controller_0+0xff80db7c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  816d98:	e0bff617 	ldw	r2,-40(fp)
  816d9c:	10c00817 	ldw	r3,32(r2)
  816da0:	00bfff44 	movi	r2,-3
  816da4:	1886703a 	and	r3,r3,r2
  816da8:	e0bff617 	ldw	r2,-40(fp)
  816dac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  816db0:	e0bff617 	ldw	r2,-40(fp)
  816db4:	10800017 	ldw	r2,0(r2)
  816db8:	10800104 	addi	r2,r2,4
  816dbc:	1007883a 	mov	r3,r2
  816dc0:	e0bff617 	ldw	r2,-40(fp)
  816dc4:	10800817 	ldw	r2,32(r2)
  816dc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  816dcc:	e0bff717 	ldw	r2,-36(fp)
  816dd0:	10800104 	addi	r2,r2,4
  816dd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  816dd8:	003f6806 	br	816b7c <__alt_mem_epcs_flash_controller_0+0xff80db7c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  816ddc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  816de0:	0001883a 	nop
  816de4:	e037883a 	mov	sp,fp
  816de8:	dfc00117 	ldw	ra,4(sp)
  816dec:	df000017 	ldw	fp,0(sp)
  816df0:	dec00204 	addi	sp,sp,8
  816df4:	f800283a 	ret

00816df8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  816df8:	defff904 	addi	sp,sp,-28
  816dfc:	dfc00615 	stw	ra,24(sp)
  816e00:	df000515 	stw	fp,20(sp)
  816e04:	df000504 	addi	fp,sp,20
  816e08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  816e0c:	e0bfff17 	ldw	r2,-4(fp)
  816e10:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  816e14:	e0bffb17 	ldw	r2,-20(fp)
  816e18:	10800017 	ldw	r2,0(r2)
  816e1c:	10800104 	addi	r2,r2,4
  816e20:	10800037 	ldwio	r2,0(r2)
  816e24:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  816e28:	e0bffc17 	ldw	r2,-16(fp)
  816e2c:	1081000c 	andi	r2,r2,1024
  816e30:	10000b26 	beq	r2,zero,816e60 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  816e34:	e0bffb17 	ldw	r2,-20(fp)
  816e38:	10800017 	ldw	r2,0(r2)
  816e3c:	10800104 	addi	r2,r2,4
  816e40:	1007883a 	mov	r3,r2
  816e44:	e0bffb17 	ldw	r2,-20(fp)
  816e48:	10800817 	ldw	r2,32(r2)
  816e4c:	10810014 	ori	r2,r2,1024
  816e50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  816e54:	e0bffb17 	ldw	r2,-20(fp)
  816e58:	10000915 	stw	zero,36(r2)
  816e5c:	00002106 	br	816ee4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  816e60:	e0bffb17 	ldw	r2,-20(fp)
  816e64:	10c00917 	ldw	r3,36(r2)
  816e68:	00a00034 	movhi	r2,32768
  816e6c:	10bfff04 	addi	r2,r2,-4
  816e70:	10c01c36 	bltu	r2,r3,816ee4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  816e74:	e0bffb17 	ldw	r2,-20(fp)
  816e78:	10800917 	ldw	r2,36(r2)
  816e7c:	10c00044 	addi	r3,r2,1
  816e80:	e0bffb17 	ldw	r2,-20(fp)
  816e84:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  816e88:	e0bffb17 	ldw	r2,-20(fp)
  816e8c:	10c00917 	ldw	r3,36(r2)
  816e90:	e0bffb17 	ldw	r2,-20(fp)
  816e94:	10800117 	ldw	r2,4(r2)
  816e98:	18801236 	bltu	r3,r2,816ee4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  816e9c:	e0bffb17 	ldw	r2,-20(fp)
  816ea0:	10800c17 	ldw	r2,48(r2)
  816ea4:	e0bffd15 	stw	r2,-12(fp)
  816ea8:	00800104 	movi	r2,4
  816eac:	e0bffe0d 	sth	r2,-8(fp)
  816eb0:	00800044 	movi	r2,1
  816eb4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  816eb8:	d0a06343 	ldbu	r2,-32371(gp)
  816ebc:	10803fcc 	andi	r2,r2,255
  816ec0:	10000826 	beq	r2,zero,816ee4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  816ec4:	e0bffe0b 	ldhu	r2,-8(fp)
  816ec8:	e0fffe83 	ldbu	r3,-6(fp)
  816ecc:	e13ffec4 	addi	r4,fp,-5
  816ed0:	200f883a 	mov	r7,r4
  816ed4:	180d883a 	mov	r6,r3
  816ed8:	100b883a 	mov	r5,r2
  816edc:	e13ffd17 	ldw	r4,-12(fp)
  816ee0:	08115200 	call	811520 <OSFlagPost>
  816ee4:	d0a07817 	ldw	r2,-32288(gp)
    }
  }

  return alt_ticks_per_second();
}
  816ee8:	e037883a 	mov	sp,fp
  816eec:	dfc00117 	ldw	ra,4(sp)
  816ef0:	df000017 	ldw	fp,0(sp)
  816ef4:	dec00204 	addi	sp,sp,8
  816ef8:	f800283a 	ret

00816efc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  816efc:	defffd04 	addi	sp,sp,-12
  816f00:	df000215 	stw	fp,8(sp)
  816f04:	df000204 	addi	fp,sp,8
  816f08:	e13ffe15 	stw	r4,-8(fp)
  816f0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  816f10:	00000506 	br	816f28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  816f14:	e0bfff17 	ldw	r2,-4(fp)
  816f18:	1090000c 	andi	r2,r2,16384
  816f1c:	10000226 	beq	r2,zero,816f28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  816f20:	00bffd44 	movi	r2,-11
  816f24:	00000b06 	br	816f54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  816f28:	e0bffe17 	ldw	r2,-8(fp)
  816f2c:	10c01017 	ldw	r3,64(r2)
  816f30:	e0bffe17 	ldw	r2,-8(fp)
  816f34:	10800f17 	ldw	r2,60(r2)
  816f38:	18800526 	beq	r3,r2,816f50 <altera_avalon_jtag_uart_close+0x54>
  816f3c:	e0bffe17 	ldw	r2,-8(fp)
  816f40:	10c00917 	ldw	r3,36(r2)
  816f44:	e0bffe17 	ldw	r2,-8(fp)
  816f48:	10800117 	ldw	r2,4(r2)
  816f4c:	18bff136 	bltu	r3,r2,816f14 <__alt_mem_epcs_flash_controller_0+0xff80df14>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  816f50:	0005883a 	mov	r2,zero
}
  816f54:	e037883a 	mov	sp,fp
  816f58:	df000017 	ldw	fp,0(sp)
  816f5c:	dec00104 	addi	sp,sp,4
  816f60:	f800283a 	ret

00816f64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  816f64:	defffa04 	addi	sp,sp,-24
  816f68:	df000515 	stw	fp,20(sp)
  816f6c:	df000504 	addi	fp,sp,20
  816f70:	e13ffd15 	stw	r4,-12(fp)
  816f74:	e17ffe15 	stw	r5,-8(fp)
  816f78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  816f7c:	00bff9c4 	movi	r2,-25
  816f80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  816f84:	e0bffe17 	ldw	r2,-8(fp)
  816f88:	10da8060 	cmpeqi	r3,r2,27137
  816f8c:	1800031e 	bne	r3,zero,816f9c <altera_avalon_jtag_uart_ioctl+0x38>
  816f90:	109a80a0 	cmpeqi	r2,r2,27138
  816f94:	1000181e 	bne	r2,zero,816ff8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  816f98:	00002906 	br	817040 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  816f9c:	e0bffd17 	ldw	r2,-12(fp)
  816fa0:	10c00117 	ldw	r3,4(r2)
  816fa4:	00a00034 	movhi	r2,32768
  816fa8:	10bfffc4 	addi	r2,r2,-1
  816fac:	18802126 	beq	r3,r2,817034 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  816fb0:	e0bfff17 	ldw	r2,-4(fp)
  816fb4:	10800017 	ldw	r2,0(r2)
  816fb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  816fbc:	e0bffc17 	ldw	r2,-16(fp)
  816fc0:	10800090 	cmplti	r2,r2,2
  816fc4:	1000061e 	bne	r2,zero,816fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
  816fc8:	e0fffc17 	ldw	r3,-16(fp)
  816fcc:	00a00034 	movhi	r2,32768
  816fd0:	10bfffc4 	addi	r2,r2,-1
  816fd4:	18800226 	beq	r3,r2,816fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
  816fd8:	e0bffc17 	ldw	r2,-16(fp)
  816fdc:	00000206 	br	816fe8 <altera_avalon_jtag_uart_ioctl+0x84>
  816fe0:	00a00034 	movhi	r2,32768
  816fe4:	10bfff84 	addi	r2,r2,-2
  816fe8:	e0fffd17 	ldw	r3,-12(fp)
  816fec:	18800115 	stw	r2,4(r3)
      rc = 0;
  816ff0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  816ff4:	00000f06 	br	817034 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  816ff8:	e0bffd17 	ldw	r2,-12(fp)
  816ffc:	10c00117 	ldw	r3,4(r2)
  817000:	00a00034 	movhi	r2,32768
  817004:	10bfffc4 	addi	r2,r2,-1
  817008:	18800c26 	beq	r3,r2,81703c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81700c:	e0bffd17 	ldw	r2,-12(fp)
  817010:	10c00917 	ldw	r3,36(r2)
  817014:	e0bffd17 	ldw	r2,-12(fp)
  817018:	10800117 	ldw	r2,4(r2)
  81701c:	1885803a 	cmpltu	r2,r3,r2
  817020:	10c03fcc 	andi	r3,r2,255
  817024:	e0bfff17 	ldw	r2,-4(fp)
  817028:	10c00015 	stw	r3,0(r2)
      rc = 0;
  81702c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  817030:	00000206 	br	81703c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  817034:	0001883a 	nop
  817038:	00000106 	br	817040 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  81703c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  817040:	e0bffb17 	ldw	r2,-20(fp)
}
  817044:	e037883a 	mov	sp,fp
  817048:	df000017 	ldw	fp,0(sp)
  81704c:	dec00104 	addi	sp,sp,4
  817050:	f800283a 	ret

00817054 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  817054:	deffed04 	addi	sp,sp,-76
  817058:	dfc01215 	stw	ra,72(sp)
  81705c:	df001115 	stw	fp,68(sp)
  817060:	df001104 	addi	fp,sp,68
  817064:	e13ffc15 	stw	r4,-16(fp)
  817068:	e17ffd15 	stw	r5,-12(fp)
  81706c:	e1bffe15 	stw	r6,-8(fp)
  817070:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  817074:	e0bffd17 	ldw	r2,-12(fp)
  817078:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  81707c:	e0bffc17 	ldw	r2,-16(fp)
  817080:	10800a17 	ldw	r2,40(r2)
  817084:	e0bff815 	stw	r2,-32(fp)
  817088:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  81708c:	e0bff90b 	ldhu	r2,-28(fp)
  817090:	e0fffb04 	addi	r3,fp,-20
  817094:	180d883a 	mov	r6,r3
  817098:	100b883a 	mov	r5,r2
  81709c:	e13ff817 	ldw	r4,-32(fp)
  8170a0:	081397c0 	call	81397c <OSSemPend>

  while (space > 0)
  8170a4:	00006106 	br	81722c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8170a8:	e0bffc17 	ldw	r2,-16(fp)
  8170ac:	10800d17 	ldw	r2,52(r2)
  8170b0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  8170b4:	e0bffc17 	ldw	r2,-16(fp)
  8170b8:	10800e17 	ldw	r2,56(r2)
  8170bc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  8170c0:	e0fff317 	ldw	r3,-52(fp)
  8170c4:	e0bff417 	ldw	r2,-48(fp)
  8170c8:	18800536 	bltu	r3,r2,8170e0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  8170cc:	e0fff317 	ldw	r3,-52(fp)
  8170d0:	e0bff417 	ldw	r2,-48(fp)
  8170d4:	1885c83a 	sub	r2,r3,r2
  8170d8:	e0bff115 	stw	r2,-60(fp)
  8170dc:	00000406 	br	8170f0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8170e0:	00c20004 	movi	r3,2048
  8170e4:	e0bff417 	ldw	r2,-48(fp)
  8170e8:	1885c83a 	sub	r2,r3,r2
  8170ec:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  8170f0:	e0bff117 	ldw	r2,-60(fp)
  8170f4:	10001e26 	beq	r2,zero,817170 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  8170f8:	e0fffe17 	ldw	r3,-8(fp)
  8170fc:	e0bff117 	ldw	r2,-60(fp)
  817100:	1880022e 	bgeu	r3,r2,81710c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  817104:	e0bffe17 	ldw	r2,-8(fp)
  817108:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81710c:	e0bffc17 	ldw	r2,-16(fp)
  817110:	10c01104 	addi	r3,r2,68
  817114:	e0bff417 	ldw	r2,-48(fp)
  817118:	1885883a 	add	r2,r3,r2
  81711c:	e1bff117 	ldw	r6,-60(fp)
  817120:	100b883a 	mov	r5,r2
  817124:	e13ff017 	ldw	r4,-64(fp)
  817128:	08062fc0 	call	8062fc <memcpy>
      ptr   += n;
  81712c:	e0fff017 	ldw	r3,-64(fp)
  817130:	e0bff117 	ldw	r2,-60(fp)
  817134:	1885883a 	add	r2,r3,r2
  817138:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  81713c:	e0fffe17 	ldw	r3,-8(fp)
  817140:	e0bff117 	ldw	r2,-60(fp)
  817144:	1885c83a 	sub	r2,r3,r2
  817148:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81714c:	e0fff417 	ldw	r3,-48(fp)
  817150:	e0bff117 	ldw	r2,-60(fp)
  817154:	1885883a 	add	r2,r3,r2
  817158:	10c1ffcc 	andi	r3,r2,2047
  81715c:	e0bffc17 	ldw	r2,-16(fp)
  817160:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  817164:	e0bffe17 	ldw	r2,-8(fp)
  817168:	00bfcf16 	blt	zero,r2,8170a8 <__alt_mem_epcs_flash_controller_0+0xff80e0a8>
  81716c:	00000106 	br	817174 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  817170:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  817174:	e0fff017 	ldw	r3,-64(fp)
  817178:	e0bffd17 	ldw	r2,-12(fp)
  81717c:	18802e1e 	bne	r3,r2,817238 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  817180:	e0bfff17 	ldw	r2,-4(fp)
  817184:	1090000c 	andi	r2,r2,16384
  817188:	10002d1e 	bne	r2,zero,817240 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  81718c:	d0a06343 	ldbu	r2,-32371(gp)
  817190:	10803fcc 	andi	r2,r2,255
  817194:	10800058 	cmpnei	r2,r2,1
  817198:	1000161e 	bne	r2,zero,8171f4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  81719c:	e0bffc17 	ldw	r2,-16(fp)
  8171a0:	10800c17 	ldw	r2,48(r2)
  8171a4:	e0bff215 	stw	r2,-56(fp)
  8171a8:	00800144 	movi	r2,5
  8171ac:	e0bff98d 	sth	r2,-26(fp)
  8171b0:	00bfe0c4 	movi	r2,-125
  8171b4:	e0bffa05 	stb	r2,-24(fp)
  8171b8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8171bc:	d0a06343 	ldbu	r2,-32371(gp)
  8171c0:	10803fcc 	andi	r2,r2,255
  8171c4:	10001526 	beq	r2,zero,81721c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8171c8:	e0fff98b 	ldhu	r3,-26(fp)
  8171cc:	e13ffa03 	ldbu	r4,-24(fp)
  8171d0:	e17ffa8b 	ldhu	r5,-22(fp)
  8171d4:	e0bffb44 	addi	r2,fp,-19
  8171d8:	d8800015 	stw	r2,0(sp)
  8171dc:	280f883a 	mov	r7,r5
  8171e0:	200d883a 	mov	r6,r4
  8171e4:	180b883a 	mov	r5,r3
  8171e8:	e13ff217 	ldw	r4,-56(fp)
  8171ec:	0810f080 	call	810f08 <OSFlagPend>
  8171f0:	00000a06 	br	81721c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8171f4:	0001883a 	nop
  8171f8:	e0bffc17 	ldw	r2,-16(fp)
  8171fc:	10c00d17 	ldw	r3,52(r2)
  817200:	e0bff317 	ldw	r2,-52(fp)
  817204:	1880051e 	bne	r3,r2,81721c <altera_avalon_jtag_uart_read+0x1c8>
  817208:	e0bffc17 	ldw	r2,-16(fp)
  81720c:	10c00917 	ldw	r3,36(r2)
  817210:	e0bffc17 	ldw	r2,-16(fp)
  817214:	10800117 	ldw	r2,4(r2)
  817218:	18bff736 	bltu	r3,r2,8171f8 <__alt_mem_epcs_flash_controller_0+0xff80e1f8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81721c:	e0bffc17 	ldw	r2,-16(fp)
  817220:	10c00d17 	ldw	r3,52(r2)
  817224:	e0bff317 	ldw	r2,-52(fp)
  817228:	18800726 	beq	r3,r2,817248 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81722c:	e0bffe17 	ldw	r2,-8(fp)
  817230:	00bf9d16 	blt	zero,r2,8170a8 <__alt_mem_epcs_flash_controller_0+0xff80e0a8>
  817234:	00000506 	br	81724c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  817238:	0001883a 	nop
  81723c:	00000306 	br	81724c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  817240:	0001883a 	nop
  817244:	00000106 	br	81724c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  817248:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  81724c:	e0bffc17 	ldw	r2,-16(fp)
  817250:	10800a17 	ldw	r2,40(r2)
  817254:	1009883a 	mov	r4,r2
  817258:	0813cf40 	call	813cf4 <OSSemPost>

  if (ptr != buffer)
  81725c:	e0fff017 	ldw	r3,-64(fp)
  817260:	e0bffd17 	ldw	r2,-12(fp)
  817264:	18801826 	beq	r3,r2,8172c8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817268:	0005303a 	rdctl	r2,status
  81726c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817270:	e0fff717 	ldw	r3,-36(fp)
  817274:	00bfff84 	movi	r2,-2
  817278:	1884703a 	and	r2,r3,r2
  81727c:	1001703a 	wrctl	status,r2
  
  return context;
  817280:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  817284:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  817288:	e0bffc17 	ldw	r2,-16(fp)
  81728c:	10800817 	ldw	r2,32(r2)
  817290:	10c00054 	ori	r3,r2,1
  817294:	e0bffc17 	ldw	r2,-16(fp)
  817298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81729c:	e0bffc17 	ldw	r2,-16(fp)
  8172a0:	10800017 	ldw	r2,0(r2)
  8172a4:	10800104 	addi	r2,r2,4
  8172a8:	1007883a 	mov	r3,r2
  8172ac:	e0bffc17 	ldw	r2,-16(fp)
  8172b0:	10800817 	ldw	r2,32(r2)
  8172b4:	18800035 	stwio	r2,0(r3)
  8172b8:	e0bff617 	ldw	r2,-40(fp)
  8172bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8172c0:	e0bff517 	ldw	r2,-44(fp)
  8172c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8172c8:	e0fff017 	ldw	r3,-64(fp)
  8172cc:	e0bffd17 	ldw	r2,-12(fp)
  8172d0:	18800426 	beq	r3,r2,8172e4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  8172d4:	e0fff017 	ldw	r3,-64(fp)
  8172d8:	e0bffd17 	ldw	r2,-12(fp)
  8172dc:	1885c83a 	sub	r2,r3,r2
  8172e0:	00000606 	br	8172fc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8172e4:	e0bfff17 	ldw	r2,-4(fp)
  8172e8:	1090000c 	andi	r2,r2,16384
  8172ec:	10000226 	beq	r2,zero,8172f8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  8172f0:	00bffd44 	movi	r2,-11
  8172f4:	00000106 	br	8172fc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  8172f8:	00bffec4 	movi	r2,-5
}
  8172fc:	e037883a 	mov	sp,fp
  817300:	dfc00117 	ldw	ra,4(sp)
  817304:	df000017 	ldw	fp,0(sp)
  817308:	dec00204 	addi	sp,sp,8
  81730c:	f800283a 	ret

00817310 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  817310:	deffed04 	addi	sp,sp,-76
  817314:	dfc01215 	stw	ra,72(sp)
  817318:	df001115 	stw	fp,68(sp)
  81731c:	df001104 	addi	fp,sp,68
  817320:	e13ffc15 	stw	r4,-16(fp)
  817324:	e17ffd15 	stw	r5,-12(fp)
  817328:	e1bffe15 	stw	r6,-8(fp)
  81732c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  817330:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  817334:	e0bffd17 	ldw	r2,-12(fp)
  817338:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  81733c:	e0bffc17 	ldw	r2,-16(fp)
  817340:	10800b17 	ldw	r2,44(r2)
  817344:	e0bff815 	stw	r2,-32(fp)
  817348:	e03ff90d 	sth	zero,-28(fp)
  81734c:	e0bff90b 	ldhu	r2,-28(fp)
  817350:	e0fffb44 	addi	r3,fp,-19
  817354:	180d883a 	mov	r6,r3
  817358:	100b883a 	mov	r5,r2
  81735c:	e13ff817 	ldw	r4,-32(fp)
  817360:	081397c0 	call	81397c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817364:	00003706 	br	817444 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  817368:	e0bffc17 	ldw	r2,-16(fp)
  81736c:	10800f17 	ldw	r2,60(r2)
  817370:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  817374:	e0bffc17 	ldw	r2,-16(fp)
  817378:	10801017 	ldw	r2,64(r2)
  81737c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  817380:	e0fff417 	ldw	r3,-48(fp)
  817384:	e0bff017 	ldw	r2,-64(fp)
  817388:	1880062e 	bgeu	r3,r2,8173a4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  81738c:	e0fff017 	ldw	r3,-64(fp)
  817390:	e0bff417 	ldw	r2,-48(fp)
  817394:	1885c83a 	sub	r2,r3,r2
  817398:	10bfffc4 	addi	r2,r2,-1
  81739c:	e0bff115 	stw	r2,-60(fp)
  8173a0:	00000b06 	br	8173d0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  8173a4:	e0bff017 	ldw	r2,-64(fp)
  8173a8:	10000526 	beq	r2,zero,8173c0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8173ac:	00c20004 	movi	r3,2048
  8173b0:	e0bff417 	ldw	r2,-48(fp)
  8173b4:	1885c83a 	sub	r2,r3,r2
  8173b8:	e0bff115 	stw	r2,-60(fp)
  8173bc:	00000406 	br	8173d0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8173c0:	00c1ffc4 	movi	r3,2047
  8173c4:	e0bff417 	ldw	r2,-48(fp)
  8173c8:	1885c83a 	sub	r2,r3,r2
  8173cc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  8173d0:	e0bff117 	ldw	r2,-60(fp)
  8173d4:	10001e26 	beq	r2,zero,817450 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  8173d8:	e0fffe17 	ldw	r3,-8(fp)
  8173dc:	e0bff117 	ldw	r2,-60(fp)
  8173e0:	1880022e 	bgeu	r3,r2,8173ec <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  8173e4:	e0bffe17 	ldw	r2,-8(fp)
  8173e8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8173ec:	e0bffc17 	ldw	r2,-16(fp)
  8173f0:	10c21104 	addi	r3,r2,2116
  8173f4:	e0bff417 	ldw	r2,-48(fp)
  8173f8:	1885883a 	add	r2,r3,r2
  8173fc:	e1bff117 	ldw	r6,-60(fp)
  817400:	e17ffd17 	ldw	r5,-12(fp)
  817404:	1009883a 	mov	r4,r2
  817408:	08062fc0 	call	8062fc <memcpy>
      ptr   += n;
  81740c:	e0fffd17 	ldw	r3,-12(fp)
  817410:	e0bff117 	ldw	r2,-60(fp)
  817414:	1885883a 	add	r2,r3,r2
  817418:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  81741c:	e0fffe17 	ldw	r3,-8(fp)
  817420:	e0bff117 	ldw	r2,-60(fp)
  817424:	1885c83a 	sub	r2,r3,r2
  817428:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81742c:	e0fff417 	ldw	r3,-48(fp)
  817430:	e0bff117 	ldw	r2,-60(fp)
  817434:	1885883a 	add	r2,r3,r2
  817438:	10c1ffcc 	andi	r3,r2,2047
  81743c:	e0bffc17 	ldw	r2,-16(fp)
  817440:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817444:	e0bffe17 	ldw	r2,-8(fp)
  817448:	00bfc716 	blt	zero,r2,817368 <__alt_mem_epcs_flash_controller_0+0xff80e368>
  81744c:	00000106 	br	817454 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  817450:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817454:	0005303a 	rdctl	r2,status
  817458:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81745c:	e0fff717 	ldw	r3,-36(fp)
  817460:	00bfff84 	movi	r2,-2
  817464:	1884703a 	and	r2,r3,r2
  817468:	1001703a 	wrctl	status,r2
  
  return context;
  81746c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  817470:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  817474:	e0bffc17 	ldw	r2,-16(fp)
  817478:	10800817 	ldw	r2,32(r2)
  81747c:	10c00094 	ori	r3,r2,2
  817480:	e0bffc17 	ldw	r2,-16(fp)
  817484:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817488:	e0bffc17 	ldw	r2,-16(fp)
  81748c:	10800017 	ldw	r2,0(r2)
  817490:	10800104 	addi	r2,r2,4
  817494:	1007883a 	mov	r3,r2
  817498:	e0bffc17 	ldw	r2,-16(fp)
  81749c:	10800817 	ldw	r2,32(r2)
  8174a0:	18800035 	stwio	r2,0(r3)
  8174a4:	e0bff617 	ldw	r2,-40(fp)
  8174a8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8174ac:	e0bff317 	ldw	r2,-52(fp)
  8174b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8174b4:	e0bffe17 	ldw	r2,-8(fp)
  8174b8:	00802a0e 	bge	zero,r2,817564 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  8174bc:	e0bfff17 	ldw	r2,-4(fp)
  8174c0:	1090000c 	andi	r2,r2,16384
  8174c4:	10002a1e 	bne	r2,zero,817570 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8174c8:	d0a06343 	ldbu	r2,-32371(gp)
  8174cc:	10803fcc 	andi	r2,r2,255
  8174d0:	10800058 	cmpnei	r2,r2,1
  8174d4:	1000161e 	bne	r2,zero,817530 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  8174d8:	e0bffc17 	ldw	r2,-16(fp)
  8174dc:	10800c17 	ldw	r2,48(r2)
  8174e0:	e0bff515 	stw	r2,-44(fp)
  8174e4:	00800184 	movi	r2,6
  8174e8:	e0bff98d 	sth	r2,-26(fp)
  8174ec:	00bfe0c4 	movi	r2,-125
  8174f0:	e0bffa05 	stb	r2,-24(fp)
  8174f4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8174f8:	d0a06343 	ldbu	r2,-32371(gp)
  8174fc:	10803fcc 	andi	r2,r2,255
  817500:	10001526 	beq	r2,zero,817558 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  817504:	e0fff98b 	ldhu	r3,-26(fp)
  817508:	e13ffa03 	ldbu	r4,-24(fp)
  81750c:	e17ffa8b 	ldhu	r5,-22(fp)
  817510:	e0bffb04 	addi	r2,fp,-20
  817514:	d8800015 	stw	r2,0(sp)
  817518:	280f883a 	mov	r7,r5
  81751c:	200d883a 	mov	r6,r4
  817520:	180b883a 	mov	r5,r3
  817524:	e13ff517 	ldw	r4,-44(fp)
  817528:	0810f080 	call	810f08 <OSFlagPend>
  81752c:	00000a06 	br	817558 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  817530:	0001883a 	nop
  817534:	e0bffc17 	ldw	r2,-16(fp)
  817538:	10c01017 	ldw	r3,64(r2)
  81753c:	e0bff017 	ldw	r2,-64(fp)
  817540:	1880051e 	bne	r3,r2,817558 <altera_avalon_jtag_uart_write+0x248>
  817544:	e0bffc17 	ldw	r2,-16(fp)
  817548:	10c00917 	ldw	r3,36(r2)
  81754c:	e0bffc17 	ldw	r2,-16(fp)
  817550:	10800117 	ldw	r2,4(r2)
  817554:	18bff736 	bltu	r3,r2,817534 <__alt_mem_epcs_flash_controller_0+0xff80e534>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  817558:	e0bffc17 	ldw	r2,-16(fp)
  81755c:	10800917 	ldw	r2,36(r2)
  817560:	1000051e 	bne	r2,zero,817578 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  817564:	e0bffe17 	ldw	r2,-8(fp)
  817568:	00bfb616 	blt	zero,r2,817444 <__alt_mem_epcs_flash_controller_0+0xff80e444>
  81756c:	00000306 	br	81757c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  817570:	0001883a 	nop
  817574:	00000106 	br	81757c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  817578:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81757c:	e0bffc17 	ldw	r2,-16(fp)
  817580:	10800b17 	ldw	r2,44(r2)
  817584:	1009883a 	mov	r4,r2
  817588:	0813cf40 	call	813cf4 <OSSemPost>

  if (ptr != start)
  81758c:	e0fffd17 	ldw	r3,-12(fp)
  817590:	e0bff217 	ldw	r2,-56(fp)
  817594:	18800426 	beq	r3,r2,8175a8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  817598:	e0fffd17 	ldw	r3,-12(fp)
  81759c:	e0bff217 	ldw	r2,-56(fp)
  8175a0:	1885c83a 	sub	r2,r3,r2
  8175a4:	00000606 	br	8175c0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  8175a8:	e0bfff17 	ldw	r2,-4(fp)
  8175ac:	1090000c 	andi	r2,r2,16384
  8175b0:	10000226 	beq	r2,zero,8175bc <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  8175b4:	00bffd44 	movi	r2,-11
  8175b8:	00000106 	br	8175c0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8175bc:	00bffec4 	movi	r2,-5
}
  8175c0:	e037883a 	mov	sp,fp
  8175c4:	dfc00117 	ldw	ra,4(sp)
  8175c8:	df000017 	ldw	fp,0(sp)
  8175cc:	dec00204 	addi	sp,sp,8
  8175d0:	f800283a 	ret

008175d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8175d4:	defffa04 	addi	sp,sp,-24
  8175d8:	dfc00515 	stw	ra,20(sp)
  8175dc:	df000415 	stw	fp,16(sp)
  8175e0:	df000404 	addi	fp,sp,16
  8175e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8175e8:	0007883a 	mov	r3,zero
  8175ec:	e0bfff17 	ldw	r2,-4(fp)
  8175f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8175f4:	e0bfff17 	ldw	r2,-4(fp)
  8175f8:	10800104 	addi	r2,r2,4
  8175fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817600:	0005303a 	rdctl	r2,status
  817604:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817608:	e0fffd17 	ldw	r3,-12(fp)
  81760c:	00bfff84 	movi	r2,-2
  817610:	1884703a 	and	r2,r3,r2
  817614:	1001703a 	wrctl	status,r2
  
  return context;
  817618:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81761c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  817620:	08190fc0 	call	8190fc <alt_tick>
  817624:	e0bffc17 	ldw	r2,-16(fp)
  817628:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81762c:	e0bffe17 	ldw	r2,-8(fp)
  817630:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  817634:	0001883a 	nop
  817638:	e037883a 	mov	sp,fp
  81763c:	dfc00117 	ldw	ra,4(sp)
  817640:	df000017 	ldw	fp,0(sp)
  817644:	dec00204 	addi	sp,sp,8
  817648:	f800283a 	ret

0081764c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81764c:	defff804 	addi	sp,sp,-32
  817650:	dfc00715 	stw	ra,28(sp)
  817654:	df000615 	stw	fp,24(sp)
  817658:	df000604 	addi	fp,sp,24
  81765c:	e13ffc15 	stw	r4,-16(fp)
  817660:	e17ffd15 	stw	r5,-12(fp)
  817664:	e1bffe15 	stw	r6,-8(fp)
  817668:	e1ffff15 	stw	r7,-4(fp)
  81766c:	e0bfff17 	ldw	r2,-4(fp)
  817670:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  817674:	d0a07817 	ldw	r2,-32288(gp)
  817678:	1000021e 	bne	r2,zero,817684 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  81767c:	e0bffb17 	ldw	r2,-20(fp)
  817680:	d0a07815 	stw	r2,-32288(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  817684:	e0bffc17 	ldw	r2,-16(fp)
  817688:	10800104 	addi	r2,r2,4
  81768c:	00c001c4 	movi	r3,7
  817690:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  817694:	d8000015 	stw	zero,0(sp)
  817698:	e1fffc17 	ldw	r7,-16(fp)
  81769c:	01802074 	movhi	r6,129
  8176a0:	319d7504 	addi	r6,r6,30164
  8176a4:	e17ffe17 	ldw	r5,-8(fp)
  8176a8:	e13ffd17 	ldw	r4,-12(fp)
  8176ac:	080d87c0 	call	80d87c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8176b0:	0001883a 	nop
  8176b4:	e037883a 	mov	sp,fp
  8176b8:	dfc00117 	ldw	ra,4(sp)
  8176bc:	df000017 	ldw	fp,0(sp)
  8176c0:	dec00204 	addi	sp,sp,8
  8176c4:	f800283a 	ret

008176c8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8176c8:	defffa04 	addi	sp,sp,-24
  8176cc:	dfc00515 	stw	ra,20(sp)
  8176d0:	df000415 	stw	fp,16(sp)
  8176d4:	df000404 	addi	fp,sp,16
  8176d8:	e13ffd15 	stw	r4,-12(fp)
  8176dc:	e17ffe15 	stw	r5,-8(fp)
  8176e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8176e4:	e0bffd17 	ldw	r2,-12(fp)
  8176e8:	10800017 	ldw	r2,0(r2)
  8176ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8176f0:	e0bffc17 	ldw	r2,-16(fp)
  8176f4:	10c00a04 	addi	r3,r2,40
  8176f8:	e0bffd17 	ldw	r2,-12(fp)
  8176fc:	10800217 	ldw	r2,8(r2)
  817700:	100f883a 	mov	r7,r2
  817704:	e1bfff17 	ldw	r6,-4(fp)
  817708:	e17ffe17 	ldw	r5,-8(fp)
  81770c:	1809883a 	mov	r4,r3
  817710:	0817d400 	call	817d40 <altera_avalon_uart_read>
      fd->fd_flags);
}
  817714:	e037883a 	mov	sp,fp
  817718:	dfc00117 	ldw	ra,4(sp)
  81771c:	df000017 	ldw	fp,0(sp)
  817720:	dec00204 	addi	sp,sp,8
  817724:	f800283a 	ret

00817728 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  817728:	defffa04 	addi	sp,sp,-24
  81772c:	dfc00515 	stw	ra,20(sp)
  817730:	df000415 	stw	fp,16(sp)
  817734:	df000404 	addi	fp,sp,16
  817738:	e13ffd15 	stw	r4,-12(fp)
  81773c:	e17ffe15 	stw	r5,-8(fp)
  817740:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  817744:	e0bffd17 	ldw	r2,-12(fp)
  817748:	10800017 	ldw	r2,0(r2)
  81774c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  817750:	e0bffc17 	ldw	r2,-16(fp)
  817754:	10c00a04 	addi	r3,r2,40
  817758:	e0bffd17 	ldw	r2,-12(fp)
  81775c:	10800217 	ldw	r2,8(r2)
  817760:	100f883a 	mov	r7,r2
  817764:	e1bfff17 	ldw	r6,-4(fp)
  817768:	e17ffe17 	ldw	r5,-8(fp)
  81776c:	1809883a 	mov	r4,r3
  817770:	0817fe40 	call	817fe4 <altera_avalon_uart_write>
      fd->fd_flags);
}
  817774:	e037883a 	mov	sp,fp
  817778:	dfc00117 	ldw	ra,4(sp)
  81777c:	df000017 	ldw	fp,0(sp)
  817780:	dec00204 	addi	sp,sp,8
  817784:	f800283a 	ret

00817788 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  817788:	defffc04 	addi	sp,sp,-16
  81778c:	dfc00315 	stw	ra,12(sp)
  817790:	df000215 	stw	fp,8(sp)
  817794:	df000204 	addi	fp,sp,8
  817798:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81779c:	e0bfff17 	ldw	r2,-4(fp)
  8177a0:	10800017 	ldw	r2,0(r2)
  8177a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8177a8:	e0bffe17 	ldw	r2,-8(fp)
  8177ac:	10c00a04 	addi	r3,r2,40
  8177b0:	e0bfff17 	ldw	r2,-4(fp)
  8177b4:	10800217 	ldw	r2,8(r2)
  8177b8:	100b883a 	mov	r5,r2
  8177bc:	1809883a 	mov	r4,r3
  8177c0:	0817cb00 	call	817cb0 <altera_avalon_uart_close>
}
  8177c4:	e037883a 	mov	sp,fp
  8177c8:	dfc00117 	ldw	ra,4(sp)
  8177cc:	df000017 	ldw	fp,0(sp)
  8177d0:	dec00204 	addi	sp,sp,8
  8177d4:	f800283a 	ret

008177d8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8177d8:	defff304 	addi	sp,sp,-52
  8177dc:	dfc00c15 	stw	ra,48(sp)
  8177e0:	df000b15 	stw	fp,44(sp)
  8177e4:	df000b04 	addi	fp,sp,44
  8177e8:	e13ffd15 	stw	r4,-12(fp)
  8177ec:	e17ffe15 	stw	r5,-8(fp)
  8177f0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8177f4:	e0bffd17 	ldw	r2,-12(fp)
  8177f8:	10800017 	ldw	r2,0(r2)
  8177fc:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  817800:	e0bffd17 	ldw	r2,-12(fp)
  817804:	10800704 	addi	r2,r2,28
  817808:	e0bffa15 	stw	r2,-24(fp)
  81780c:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  817810:	e0bffb0b 	ldhu	r2,-20(fp)
  817814:	e0fffc84 	addi	r3,fp,-14
  817818:	180b883a 	mov	r5,r3
  81781c:	1009883a 	mov	r4,r2
  817820:	08109440 	call	810944 <OSFlagCreate>
  817824:	1007883a 	mov	r3,r2
  817828:	e0bffa17 	ldw	r2,-24(fp)
  81782c:	10c00015 	stw	r3,0(r2)
  return err;
  817830:	e0bffc83 	ldbu	r2,-14(fp)
  817834:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  817838:	1000241e 	bne	r2,zero,8178cc <altera_avalon_uart_init+0xf4>
  81783c:	e0bffd17 	ldw	r2,-12(fp)
  817840:	10800804 	addi	r2,r2,32
  817844:	e0bff715 	stw	r2,-36(fp)
  817848:	00800044 	movi	r2,1
  81784c:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  817850:	e0bffb8b 	ldhu	r2,-18(fp)
  817854:	1009883a 	mov	r4,r2
  817858:	08136640 	call	813664 <OSSemCreate>
  81785c:	1007883a 	mov	r3,r2
  817860:	e0bff717 	ldw	r2,-36(fp)
  817864:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  817868:	e0bff717 	ldw	r2,-36(fp)
  81786c:	10800017 	ldw	r2,0(r2)
  817870:	10000226 	beq	r2,zero,81787c <altera_avalon_uart_init+0xa4>
  817874:	0005883a 	mov	r2,zero
  817878:	00000106 	br	817880 <altera_avalon_uart_init+0xa8>
  81787c:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  817880:	1000121e 	bne	r2,zero,8178cc <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  817884:	e0bffd17 	ldw	r2,-12(fp)
  817888:	10800904 	addi	r2,r2,36
  81788c:	e0bff815 	stw	r2,-32(fp)
  817890:	00800044 	movi	r2,1
  817894:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  817898:	e0bffc0b 	ldhu	r2,-16(fp)
  81789c:	1009883a 	mov	r4,r2
  8178a0:	08136640 	call	813664 <OSSemCreate>
  8178a4:	1007883a 	mov	r3,r2
  8178a8:	e0bff817 	ldw	r2,-32(fp)
  8178ac:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  8178b0:	e0bff817 	ldw	r2,-32(fp)
  8178b4:	10800017 	ldw	r2,0(r2)
  8178b8:	10000226 	beq	r2,zero,8178c4 <altera_avalon_uart_init+0xec>
  8178bc:	0005883a 	mov	r2,zero
  8178c0:	00000106 	br	8178c8 <altera_avalon_uart_init+0xf0>
  8178c4:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8178c8:	10000226 	beq	r2,zero,8178d4 <altera_avalon_uart_init+0xfc>
  8178cc:	00800044 	movi	r2,1
  8178d0:	00000106 	br	8178d8 <altera_avalon_uart_init+0x100>
  8178d4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8178d8:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8178dc:	e0bff917 	ldw	r2,-28(fp)
  8178e0:	10000f1e 	bne	r2,zero,817920 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8178e4:	e0bffd17 	ldw	r2,-12(fp)
  8178e8:	00c32004 	movi	r3,3200
  8178ec:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8178f0:	e0bff617 	ldw	r2,-40(fp)
  8178f4:	10800304 	addi	r2,r2,12
  8178f8:	e0fffd17 	ldw	r3,-12(fp)
  8178fc:	18c00117 	ldw	r3,4(r3)
  817900:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  817904:	d8000015 	stw	zero,0(sp)
  817908:	e1fffd17 	ldw	r7,-12(fp)
  81790c:	01802074 	movhi	r6,129
  817910:	319e4e04 	addi	r6,r6,31032
  817914:	e17fff17 	ldw	r5,-4(fp)
  817918:	e13ffe17 	ldw	r4,-8(fp)
  81791c:	080d87c0 	call	80d87c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  817920:	0001883a 	nop
  817924:	e037883a 	mov	sp,fp
  817928:	dfc00117 	ldw	ra,4(sp)
  81792c:	df000017 	ldw	fp,0(sp)
  817930:	dec00204 	addi	sp,sp,8
  817934:	f800283a 	ret

00817938 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  817938:	defffa04 	addi	sp,sp,-24
  81793c:	dfc00515 	stw	ra,20(sp)
  817940:	df000415 	stw	fp,16(sp)
  817944:	df000404 	addi	fp,sp,16
  817948:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  81794c:	e0bfff17 	ldw	r2,-4(fp)
  817950:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  817954:	e0bffc17 	ldw	r2,-16(fp)
  817958:	10800017 	ldw	r2,0(r2)
  81795c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  817960:	e0bffd17 	ldw	r2,-12(fp)
  817964:	10800204 	addi	r2,r2,8
  817968:	10800037 	ldwio	r2,0(r2)
  81796c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  817970:	e0bffd17 	ldw	r2,-12(fp)
  817974:	10800204 	addi	r2,r2,8
  817978:	0007883a 	mov	r3,zero
  81797c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  817980:	e0bffd17 	ldw	r2,-12(fp)
  817984:	10800204 	addi	r2,r2,8
  817988:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  81798c:	e0bffe17 	ldw	r2,-8(fp)
  817990:	1080200c 	andi	r2,r2,128
  817994:	10000326 	beq	r2,zero,8179a4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  817998:	e17ffe17 	ldw	r5,-8(fp)
  81799c:	e13ffc17 	ldw	r4,-16(fp)
  8179a0:	08179d40 	call	8179d4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8179a4:	e0bffe17 	ldw	r2,-8(fp)
  8179a8:	1081100c 	andi	r2,r2,1088
  8179ac:	10000326 	beq	r2,zero,8179bc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8179b0:	e17ffe17 	ldw	r5,-8(fp)
  8179b4:	e13ffc17 	ldw	r4,-16(fp)
  8179b8:	0817b0c0 	call	817b0c <altera_avalon_uart_txirq>
  }
  

}
  8179bc:	0001883a 	nop
  8179c0:	e037883a 	mov	sp,fp
  8179c4:	dfc00117 	ldw	ra,4(sp)
  8179c8:	df000017 	ldw	fp,0(sp)
  8179cc:	dec00204 	addi	sp,sp,8
  8179d0:	f800283a 	ret

008179d4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8179d4:	defff904 	addi	sp,sp,-28
  8179d8:	dfc00615 	stw	ra,24(sp)
  8179dc:	df000515 	stw	fp,20(sp)
  8179e0:	df000504 	addi	fp,sp,20
  8179e4:	e13ffe15 	stw	r4,-8(fp)
  8179e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8179ec:	e0bfff17 	ldw	r2,-4(fp)
  8179f0:	108000cc 	andi	r2,r2,3
  8179f4:	10003f1e 	bne	r2,zero,817af4 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8179f8:	e0bffe17 	ldw	r2,-8(fp)
  8179fc:	10c00317 	ldw	r3,12(r2)
  817a00:	e0bffe17 	ldw	r2,-8(fp)
  817a04:	10800217 	ldw	r2,8(r2)
  817a08:	1880121e 	bne	r3,r2,817a54 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  817a0c:	e0bffe17 	ldw	r2,-8(fp)
  817a10:	10800717 	ldw	r2,28(r2)
  817a14:	e0bffc15 	stw	r2,-16(fp)
  817a18:	00800044 	movi	r2,1
  817a1c:	e0bffd0d 	sth	r2,-12(fp)
  817a20:	00800044 	movi	r2,1
  817a24:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817a28:	d0a06343 	ldbu	r2,-32371(gp)
  817a2c:	10803fcc 	andi	r2,r2,255
  817a30:	10000826 	beq	r2,zero,817a54 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  817a34:	e0bffd0b 	ldhu	r2,-12(fp)
  817a38:	e0fffd83 	ldbu	r3,-10(fp)
  817a3c:	e13ffdc4 	addi	r4,fp,-9
  817a40:	200f883a 	mov	r7,r4
  817a44:	180d883a 	mov	r6,r3
  817a48:	100b883a 	mov	r5,r2
  817a4c:	e13ffc17 	ldw	r4,-16(fp)
  817a50:	08115200 	call	811520 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  817a54:	e0bffe17 	ldw	r2,-8(fp)
  817a58:	10800317 	ldw	r2,12(r2)
  817a5c:	10800044 	addi	r2,r2,1
  817a60:	10800fcc 	andi	r2,r2,63
  817a64:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  817a68:	e0bffe17 	ldw	r2,-8(fp)
  817a6c:	10800317 	ldw	r2,12(r2)
  817a70:	e0fffe17 	ldw	r3,-8(fp)
  817a74:	18c00017 	ldw	r3,0(r3)
  817a78:	18c00037 	ldwio	r3,0(r3)
  817a7c:	1809883a 	mov	r4,r3
  817a80:	e0fffe17 	ldw	r3,-8(fp)
  817a84:	1885883a 	add	r2,r3,r2
  817a88:	10800a04 	addi	r2,r2,40
  817a8c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  817a90:	e0bffe17 	ldw	r2,-8(fp)
  817a94:	e0fffb17 	ldw	r3,-20(fp)
  817a98:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  817a9c:	e0bffe17 	ldw	r2,-8(fp)
  817aa0:	10800317 	ldw	r2,12(r2)
  817aa4:	10800044 	addi	r2,r2,1
  817aa8:	10800fcc 	andi	r2,r2,63
  817aac:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  817ab0:	e0bffe17 	ldw	r2,-8(fp)
  817ab4:	10c00217 	ldw	r3,8(r2)
  817ab8:	e0bffb17 	ldw	r2,-20(fp)
  817abc:	18800e1e 	bne	r3,r2,817af8 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  817ac0:	e0bffe17 	ldw	r2,-8(fp)
  817ac4:	10c00117 	ldw	r3,4(r2)
  817ac8:	00bfdfc4 	movi	r2,-129
  817acc:	1886703a 	and	r3,r3,r2
  817ad0:	e0bffe17 	ldw	r2,-8(fp)
  817ad4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  817ad8:	e0bffe17 	ldw	r2,-8(fp)
  817adc:	10800017 	ldw	r2,0(r2)
  817ae0:	10800304 	addi	r2,r2,12
  817ae4:	e0fffe17 	ldw	r3,-8(fp)
  817ae8:	18c00117 	ldw	r3,4(r3)
  817aec:	10c00035 	stwio	r3,0(r2)
  817af0:	00000106 	br	817af8 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  817af4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  817af8:	e037883a 	mov	sp,fp
  817afc:	dfc00117 	ldw	ra,4(sp)
  817b00:	df000017 	ldw	fp,0(sp)
  817b04:	dec00204 	addi	sp,sp,8
  817b08:	f800283a 	ret

00817b0c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  817b0c:	defffa04 	addi	sp,sp,-24
  817b10:	dfc00515 	stw	ra,20(sp)
  817b14:	df000415 	stw	fp,16(sp)
  817b18:	df000404 	addi	fp,sp,16
  817b1c:	e13ffe15 	stw	r4,-8(fp)
  817b20:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  817b24:	e0bffe17 	ldw	r2,-8(fp)
  817b28:	10c00417 	ldw	r3,16(r2)
  817b2c:	e0bffe17 	ldw	r2,-8(fp)
  817b30:	10800517 	ldw	r2,20(r2)
  817b34:	18804726 	beq	r3,r2,817c54 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  817b38:	e0bffe17 	ldw	r2,-8(fp)
  817b3c:	10800617 	ldw	r2,24(r2)
  817b40:	1080008c 	andi	r2,r2,2
  817b44:	10000326 	beq	r2,zero,817b54 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  817b48:	e0bfff17 	ldw	r2,-4(fp)
  817b4c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  817b50:	10003226 	beq	r2,zero,817c1c <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  817b54:	e0bffe17 	ldw	r2,-8(fp)
  817b58:	10c00417 	ldw	r3,16(r2)
  817b5c:	e0bffe17 	ldw	r2,-8(fp)
  817b60:	10800517 	ldw	r2,20(r2)
  817b64:	10800044 	addi	r2,r2,1
  817b68:	10800fcc 	andi	r2,r2,63
  817b6c:	1880121e 	bne	r3,r2,817bb8 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  817b70:	e0bffe17 	ldw	r2,-8(fp)
  817b74:	10800717 	ldw	r2,28(r2)
  817b78:	e0bffc15 	stw	r2,-16(fp)
  817b7c:	00800084 	movi	r2,2
  817b80:	e0bffd0d 	sth	r2,-12(fp)
  817b84:	00800044 	movi	r2,1
  817b88:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817b8c:	d0a06343 	ldbu	r2,-32371(gp)
  817b90:	10803fcc 	andi	r2,r2,255
  817b94:	10000826 	beq	r2,zero,817bb8 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  817b98:	e0bffd0b 	ldhu	r2,-12(fp)
  817b9c:	e0fffd83 	ldbu	r3,-10(fp)
  817ba0:	e13ffdc4 	addi	r4,fp,-9
  817ba4:	200f883a 	mov	r7,r4
  817ba8:	180d883a 	mov	r6,r3
  817bac:	100b883a 	mov	r5,r2
  817bb0:	e13ffc17 	ldw	r4,-16(fp)
  817bb4:	08115200 	call	811520 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  817bb8:	e0bffe17 	ldw	r2,-8(fp)
  817bbc:	10800017 	ldw	r2,0(r2)
  817bc0:	10800104 	addi	r2,r2,4
  817bc4:	e0fffe17 	ldw	r3,-8(fp)
  817bc8:	18c00417 	ldw	r3,16(r3)
  817bcc:	e13ffe17 	ldw	r4,-8(fp)
  817bd0:	20c7883a 	add	r3,r4,r3
  817bd4:	18c01a04 	addi	r3,r3,104
  817bd8:	18c00003 	ldbu	r3,0(r3)
  817bdc:	18c03fcc 	andi	r3,r3,255
  817be0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  817be4:	e0bffe17 	ldw	r2,-8(fp)
  817be8:	10800417 	ldw	r2,16(r2)
  817bec:	10800044 	addi	r2,r2,1
  817bf0:	e0fffe17 	ldw	r3,-8(fp)
  817bf4:	18800415 	stw	r2,16(r3)
  817bf8:	10c00fcc 	andi	r3,r2,63
  817bfc:	e0bffe17 	ldw	r2,-8(fp)
  817c00:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  817c04:	e0bffe17 	ldw	r2,-8(fp)
  817c08:	10800117 	ldw	r2,4(r2)
  817c0c:	10c01014 	ori	r3,r2,64
  817c10:	e0bffe17 	ldw	r2,-8(fp)
  817c14:	10c00115 	stw	r3,4(r2)
  817c18:	00000e06 	br	817c54 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  817c1c:	e0bffe17 	ldw	r2,-8(fp)
  817c20:	10800017 	ldw	r2,0(r2)
  817c24:	10800204 	addi	r2,r2,8
  817c28:	10800037 	ldwio	r2,0(r2)
  817c2c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  817c30:	e0bfff17 	ldw	r2,-4(fp)
  817c34:	1082000c 	andi	r2,r2,2048
  817c38:	1000061e 	bne	r2,zero,817c54 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  817c3c:	e0bffe17 	ldw	r2,-8(fp)
  817c40:	10c00117 	ldw	r3,4(r2)
  817c44:	00bfefc4 	movi	r2,-65
  817c48:	1886703a 	and	r3,r3,r2
  817c4c:	e0bffe17 	ldw	r2,-8(fp)
  817c50:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  817c54:	e0bffe17 	ldw	r2,-8(fp)
  817c58:	10c00417 	ldw	r3,16(r2)
  817c5c:	e0bffe17 	ldw	r2,-8(fp)
  817c60:	10800517 	ldw	r2,20(r2)
  817c64:	1880061e 	bne	r3,r2,817c80 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  817c68:	e0bffe17 	ldw	r2,-8(fp)
  817c6c:	10c00117 	ldw	r3,4(r2)
  817c70:	00beefc4 	movi	r2,-1089
  817c74:	1886703a 	and	r3,r3,r2
  817c78:	e0bffe17 	ldw	r2,-8(fp)
  817c7c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817c80:	e0bffe17 	ldw	r2,-8(fp)
  817c84:	10800017 	ldw	r2,0(r2)
  817c88:	10800304 	addi	r2,r2,12
  817c8c:	e0fffe17 	ldw	r3,-8(fp)
  817c90:	18c00117 	ldw	r3,4(r3)
  817c94:	10c00035 	stwio	r3,0(r2)
}
  817c98:	0001883a 	nop
  817c9c:	e037883a 	mov	sp,fp
  817ca0:	dfc00117 	ldw	ra,4(sp)
  817ca4:	df000017 	ldw	fp,0(sp)
  817ca8:	dec00204 	addi	sp,sp,8
  817cac:	f800283a 	ret

00817cb0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  817cb0:	defffd04 	addi	sp,sp,-12
  817cb4:	df000215 	stw	fp,8(sp)
  817cb8:	df000204 	addi	fp,sp,8
  817cbc:	e13ffe15 	stw	r4,-8(fp)
  817cc0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  817cc4:	00000506 	br	817cdc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  817cc8:	e0bfff17 	ldw	r2,-4(fp)
  817ccc:	1090000c 	andi	r2,r2,16384
  817cd0:	10000226 	beq	r2,zero,817cdc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  817cd4:	00bffd44 	movi	r2,-11
  817cd8:	00000606 	br	817cf4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  817cdc:	e0bffe17 	ldw	r2,-8(fp)
  817ce0:	10c00417 	ldw	r3,16(r2)
  817ce4:	e0bffe17 	ldw	r2,-8(fp)
  817ce8:	10800517 	ldw	r2,20(r2)
  817cec:	18bff61e 	bne	r3,r2,817cc8 <__alt_mem_epcs_flash_controller_0+0xff80ecc8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  817cf0:	0005883a 	mov	r2,zero
}
  817cf4:	e037883a 	mov	sp,fp
  817cf8:	df000017 	ldw	fp,0(sp)
  817cfc:	dec00104 	addi	sp,sp,4
  817d00:	f800283a 	ret

00817d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817d04:	defffe04 	addi	sp,sp,-8
  817d08:	dfc00115 	stw	ra,4(sp)
  817d0c:	df000015 	stw	fp,0(sp)
  817d10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817d14:	d0a02717 	ldw	r2,-32612(gp)
  817d18:	10000326 	beq	r2,zero,817d28 <alt_get_errno+0x24>
  817d1c:	d0a02717 	ldw	r2,-32612(gp)
  817d20:	103ee83a 	callr	r2
  817d24:	00000106 	br	817d2c <alt_get_errno+0x28>
  817d28:	d0a05904 	addi	r2,gp,-32412
}
  817d2c:	e037883a 	mov	sp,fp
  817d30:	dfc00117 	ldw	ra,4(sp)
  817d34:	df000017 	ldw	fp,0(sp)
  817d38:	dec00204 	addi	sp,sp,8
  817d3c:	f800283a 	ret

00817d40 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  817d40:	deffec04 	addi	sp,sp,-80
  817d44:	dfc01315 	stw	ra,76(sp)
  817d48:	df001215 	stw	fp,72(sp)
  817d4c:	df001204 	addi	fp,sp,72
  817d50:	e13ffc15 	stw	r4,-16(fp)
  817d54:	e17ffd15 	stw	r5,-12(fp)
  817d58:	e1bffe15 	stw	r6,-8(fp)
  817d5c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  817d60:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  817d64:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  817d68:	e0bfff17 	ldw	r2,-4(fp)
  817d6c:	1090000c 	andi	r2,r2,16384
  817d70:	1005003a 	cmpeq	r2,r2,zero
  817d74:	10803fcc 	andi	r2,r2,255
  817d78:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  817d7c:	e0bffc17 	ldw	r2,-16(fp)
  817d80:	10800817 	ldw	r2,32(r2)
  817d84:	e0bff815 	stw	r2,-32(fp)
  817d88:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  817d8c:	e0bff90b 	ldhu	r2,-28(fp)
  817d90:	e0fffb44 	addi	r3,fp,-19
  817d94:	180d883a 	mov	r6,r3
  817d98:	100b883a 	mov	r5,r2
  817d9c:	e13ff817 	ldw	r4,-32(fp)
  817da0:	081397c0 	call	81397c <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  817da4:	00001306 	br	817df4 <altera_avalon_uart_read+0xb4>
    {
      count++;
  817da8:	e0bff017 	ldw	r2,-64(fp)
  817dac:	10800044 	addi	r2,r2,1
  817db0:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  817db4:	e0bffd17 	ldw	r2,-12(fp)
  817db8:	10c00044 	addi	r3,r2,1
  817dbc:	e0fffd15 	stw	r3,-12(fp)
  817dc0:	e0fffc17 	ldw	r3,-16(fp)
  817dc4:	18c00217 	ldw	r3,8(r3)
  817dc8:	e13ffc17 	ldw	r4,-16(fp)
  817dcc:	20c7883a 	add	r3,r4,r3
  817dd0:	18c00a04 	addi	r3,r3,40
  817dd4:	18c00003 	ldbu	r3,0(r3)
  817dd8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  817ddc:	e0bffc17 	ldw	r2,-16(fp)
  817de0:	10800217 	ldw	r2,8(r2)
  817de4:	10800044 	addi	r2,r2,1
  817de8:	10c00fcc 	andi	r3,r2,63
  817dec:	e0bffc17 	ldw	r2,-16(fp)
  817df0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  817df4:	e0fff017 	ldw	r3,-64(fp)
  817df8:	e0bffe17 	ldw	r2,-8(fp)
  817dfc:	1880050e 	bge	r3,r2,817e14 <altera_avalon_uart_read+0xd4>
  817e00:	e0bffc17 	ldw	r2,-16(fp)
  817e04:	10c00217 	ldw	r3,8(r2)
  817e08:	e0bffc17 	ldw	r2,-16(fp)
  817e0c:	10800317 	ldw	r2,12(r2)
  817e10:	18bfe51e 	bne	r3,r2,817da8 <__alt_mem_epcs_flash_controller_0+0xff80eda8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  817e14:	e0bff017 	ldw	r2,-64(fp)
  817e18:	10003a1e 	bne	r2,zero,817f04 <altera_avalon_uart_read+0x1c4>
  817e1c:	e0bffc17 	ldw	r2,-16(fp)
  817e20:	10c00217 	ldw	r3,8(r2)
  817e24:	e0bffc17 	ldw	r2,-16(fp)
  817e28:	10800317 	ldw	r2,12(r2)
  817e2c:	1880351e 	bne	r3,r2,817f04 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  817e30:	e0bff117 	ldw	r2,-60(fp)
  817e34:	1000071e 	bne	r2,zero,817e54 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  817e38:	0817d040 	call	817d04 <alt_get_errno>
  817e3c:	1007883a 	mov	r3,r2
  817e40:	008002c4 	movi	r2,11
  817e44:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  817e48:	00800044 	movi	r2,1
  817e4c:	e0bfef05 	stb	r2,-68(fp)
        break;
  817e50:	00003006 	br	817f14 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817e54:	0005303a 	rdctl	r2,status
  817e58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817e5c:	e0fff517 	ldw	r3,-44(fp)
  817e60:	00bfff84 	movi	r2,-2
  817e64:	1884703a 	and	r2,r3,r2
  817e68:	1001703a 	wrctl	status,r2
  
  return context;
  817e6c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  817e70:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  817e74:	e0bffc17 	ldw	r2,-16(fp)
  817e78:	10800117 	ldw	r2,4(r2)
  817e7c:	10c02014 	ori	r3,r2,128
  817e80:	e0bffc17 	ldw	r2,-16(fp)
  817e84:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817e88:	e0bffc17 	ldw	r2,-16(fp)
  817e8c:	10800017 	ldw	r2,0(r2)
  817e90:	10800304 	addi	r2,r2,12
  817e94:	e0fffc17 	ldw	r3,-16(fp)
  817e98:	18c00117 	ldw	r3,4(r3)
  817e9c:	10c00035 	stwio	r3,0(r2)
  817ea0:	e0bff417 	ldw	r2,-48(fp)
  817ea4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817ea8:	e0bff617 	ldw	r2,-40(fp)
  817eac:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  817eb0:	e0bffc17 	ldw	r2,-16(fp)
  817eb4:	10800717 	ldw	r2,28(r2)
  817eb8:	e0bff215 	stw	r2,-56(fp)
  817ebc:	00800044 	movi	r2,1
  817ec0:	e0bff98d 	sth	r2,-26(fp)
  817ec4:	00bfe0c4 	movi	r2,-125
  817ec8:	e0bffa05 	stb	r2,-24(fp)
  817ecc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  817ed0:	d0a06343 	ldbu	r2,-32371(gp)
  817ed4:	10803fcc 	andi	r2,r2,255
  817ed8:	10000a26 	beq	r2,zero,817f04 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  817edc:	e0fff98b 	ldhu	r3,-26(fp)
  817ee0:	e13ffa03 	ldbu	r4,-24(fp)
  817ee4:	e17ffa8b 	ldhu	r5,-22(fp)
  817ee8:	e0bffb04 	addi	r2,fp,-20
  817eec:	d8800015 	stw	r2,0(sp)
  817ef0:	280f883a 	mov	r7,r5
  817ef4:	200d883a 	mov	r6,r4
  817ef8:	180b883a 	mov	r5,r3
  817efc:	e13ff217 	ldw	r4,-56(fp)
  817f00:	0810f080 	call	810f08 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  817f04:	e0bff017 	ldw	r2,-64(fp)
  817f08:	1000021e 	bne	r2,zero,817f14 <altera_avalon_uart_read+0x1d4>
  817f0c:	e0bffe17 	ldw	r2,-8(fp)
  817f10:	103fb81e 	bne	r2,zero,817df4 <__alt_mem_epcs_flash_controller_0+0xff80edf4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  817f14:	e0bffc17 	ldw	r2,-16(fp)
  817f18:	10800817 	ldw	r2,32(r2)
  817f1c:	1009883a 	mov	r4,r2
  817f20:	0813cf40 	call	813cf4 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817f24:	0005303a 	rdctl	r2,status
  817f28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817f2c:	e0fff717 	ldw	r3,-36(fp)
  817f30:	00bfff84 	movi	r2,-2
  817f34:	1884703a 	and	r2,r3,r2
  817f38:	1001703a 	wrctl	status,r2
  
  return context;
  817f3c:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  817f40:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  817f44:	e0bffc17 	ldw	r2,-16(fp)
  817f48:	10800117 	ldw	r2,4(r2)
  817f4c:	10c02014 	ori	r3,r2,128
  817f50:	e0bffc17 	ldw	r2,-16(fp)
  817f54:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817f58:	e0bffc17 	ldw	r2,-16(fp)
  817f5c:	10800017 	ldw	r2,0(r2)
  817f60:	10800304 	addi	r2,r2,12
  817f64:	e0fffc17 	ldw	r3,-16(fp)
  817f68:	18c00117 	ldw	r3,4(r3)
  817f6c:	10c00035 	stwio	r3,0(r2)
  817f70:	e0bff417 	ldw	r2,-48(fp)
  817f74:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817f78:	e0bff317 	ldw	r2,-52(fp)
  817f7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  817f80:	e0bfef03 	ldbu	r2,-68(fp)
  817f84:	10000226 	beq	r2,zero,817f90 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  817f88:	00bffd44 	movi	r2,-11
  817f8c:	00000106 	br	817f94 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  817f90:	e0bff017 	ldw	r2,-64(fp)
  }
}
  817f94:	e037883a 	mov	sp,fp
  817f98:	dfc00117 	ldw	ra,4(sp)
  817f9c:	df000017 	ldw	fp,0(sp)
  817fa0:	dec00204 	addi	sp,sp,8
  817fa4:	f800283a 	ret

00817fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817fa8:	defffe04 	addi	sp,sp,-8
  817fac:	dfc00115 	stw	ra,4(sp)
  817fb0:	df000015 	stw	fp,0(sp)
  817fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817fb8:	d0a02717 	ldw	r2,-32612(gp)
  817fbc:	10000326 	beq	r2,zero,817fcc <alt_get_errno+0x24>
  817fc0:	d0a02717 	ldw	r2,-32612(gp)
  817fc4:	103ee83a 	callr	r2
  817fc8:	00000106 	br	817fd0 <alt_get_errno+0x28>
  817fcc:	d0a05904 	addi	r2,gp,-32412
}
  817fd0:	e037883a 	mov	sp,fp
  817fd4:	dfc00117 	ldw	ra,4(sp)
  817fd8:	df000017 	ldw	fp,0(sp)
  817fdc:	dec00204 	addi	sp,sp,8
  817fe0:	f800283a 	ret

00817fe4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  817fe4:	deffec04 	addi	sp,sp,-80
  817fe8:	dfc01315 	stw	ra,76(sp)
  817fec:	df001215 	stw	fp,72(sp)
  817ff0:	df001204 	addi	fp,sp,72
  817ff4:	e13ffc15 	stw	r4,-16(fp)
  817ff8:	e17ffd15 	stw	r5,-12(fp)
  817ffc:	e1bffe15 	stw	r6,-8(fp)
  818000:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  818004:	e0bffe17 	ldw	r2,-8(fp)
  818008:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  81800c:	e0bfff17 	ldw	r2,-4(fp)
  818010:	1090000c 	andi	r2,r2,16384
  818014:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  818018:	e0bffc17 	ldw	r2,-16(fp)
  81801c:	10800917 	ldw	r2,36(r2)
  818020:	e0bff815 	stw	r2,-32(fp)
  818024:	e03ff90d 	sth	zero,-28(fp)
  818028:	e0bff90b 	ldhu	r2,-28(fp)
  81802c:	e0fffb44 	addi	r3,fp,-19
  818030:	180d883a 	mov	r6,r3
  818034:	100b883a 	mov	r5,r2
  818038:	e13ff817 	ldw	r4,-32(fp)
  81803c:	081397c0 	call	81397c <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  818040:	00005106 	br	818188 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  818044:	e0bffc17 	ldw	r2,-16(fp)
  818048:	10800517 	ldw	r2,20(r2)
  81804c:	10800044 	addi	r2,r2,1
  818050:	10800fcc 	andi	r2,r2,63
  818054:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  818058:	e0bffc17 	ldw	r2,-16(fp)
  81805c:	10c00417 	ldw	r3,16(r2)
  818060:	e0bff217 	ldw	r2,-56(fp)
  818064:	1880371e 	bne	r3,r2,818144 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  818068:	e0bff017 	ldw	r2,-64(fp)
  81806c:	10000526 	beq	r2,zero,818084 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  818070:	0817fa80 	call	817fa8 <alt_get_errno>
  818074:	1007883a 	mov	r3,r2
  818078:	008002c4 	movi	r2,11
  81807c:	18800015 	stw	r2,0(r3)
        break;
  818080:	00004306 	br	818190 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818084:	0005303a 	rdctl	r2,status
  818088:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81808c:	e0fff517 	ldw	r3,-44(fp)
  818090:	00bfff84 	movi	r2,-2
  818094:	1884703a 	and	r2,r3,r2
  818098:	1001703a 	wrctl	status,r2
  
  return context;
  81809c:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8180a0:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8180a4:	e0bffc17 	ldw	r2,-16(fp)
  8180a8:	10800117 	ldw	r2,4(r2)
  8180ac:	10c11014 	ori	r3,r2,1088
  8180b0:	e0bffc17 	ldw	r2,-16(fp)
  8180b4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8180b8:	e0bffc17 	ldw	r2,-16(fp)
  8180bc:	10800017 	ldw	r2,0(r2)
  8180c0:	10800304 	addi	r2,r2,12
  8180c4:	e0fffc17 	ldw	r3,-16(fp)
  8180c8:	18c00117 	ldw	r3,4(r3)
  8180cc:	10c00035 	stwio	r3,0(r2)
  8180d0:	e0bff417 	ldw	r2,-48(fp)
  8180d4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8180d8:	e0bff117 	ldw	r2,-60(fp)
  8180dc:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  8180e0:	e0bffc17 	ldw	r2,-16(fp)
  8180e4:	10800717 	ldw	r2,28(r2)
  8180e8:	e0bff315 	stw	r2,-52(fp)
  8180ec:	00800084 	movi	r2,2
  8180f0:	e0bff98d 	sth	r2,-26(fp)
  8180f4:	00bfe0c4 	movi	r2,-125
  8180f8:	e0bffa05 	stb	r2,-24(fp)
  8180fc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  818100:	d0a06343 	ldbu	r2,-32371(gp)
  818104:	10803fcc 	andi	r2,r2,255
  818108:	10000a26 	beq	r2,zero,818134 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81810c:	e0fff98b 	ldhu	r3,-26(fp)
  818110:	e13ffa03 	ldbu	r4,-24(fp)
  818114:	e17ffa8b 	ldhu	r5,-22(fp)
  818118:	e0bffb04 	addi	r2,fp,-20
  81811c:	d8800015 	stw	r2,0(sp)
  818120:	280f883a 	mov	r7,r5
  818124:	200d883a 	mov	r6,r4
  818128:	180b883a 	mov	r5,r3
  81812c:	e13ff317 	ldw	r4,-52(fp)
  818130:	0810f080 	call	810f08 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  818134:	e0bffc17 	ldw	r2,-16(fp)
  818138:	10c00417 	ldw	r3,16(r2)
  81813c:	e0bff217 	ldw	r2,-56(fp)
  818140:	18bfe726 	beq	r3,r2,8180e0 <__alt_mem_epcs_flash_controller_0+0xff80f0e0>
      }
    }

    count--;
  818144:	e0bfef17 	ldw	r2,-68(fp)
  818148:	10bfffc4 	addi	r2,r2,-1
  81814c:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  818150:	e0bffc17 	ldw	r2,-16(fp)
  818154:	10c00517 	ldw	r3,20(r2)
  818158:	e0bffd17 	ldw	r2,-12(fp)
  81815c:	11000044 	addi	r4,r2,1
  818160:	e13ffd15 	stw	r4,-12(fp)
  818164:	10800003 	ldbu	r2,0(r2)
  818168:	1009883a 	mov	r4,r2
  81816c:	e0bffc17 	ldw	r2,-16(fp)
  818170:	10c5883a 	add	r2,r2,r3
  818174:	10801a04 	addi	r2,r2,104
  818178:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  81817c:	e0bffc17 	ldw	r2,-16(fp)
  818180:	e0fff217 	ldw	r3,-56(fp)
  818184:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  818188:	e0bfef17 	ldw	r2,-68(fp)
  81818c:	103fad1e 	bne	r2,zero,818044 <__alt_mem_epcs_flash_controller_0+0xff80f044>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  818190:	e0bffc17 	ldw	r2,-16(fp)
  818194:	10800917 	ldw	r2,36(r2)
  818198:	1009883a 	mov	r4,r2
  81819c:	0813cf40 	call	813cf4 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8181a0:	0005303a 	rdctl	r2,status
  8181a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8181a8:	e0fff717 	ldw	r3,-36(fp)
  8181ac:	00bfff84 	movi	r2,-2
  8181b0:	1884703a 	and	r2,r3,r2
  8181b4:	1001703a 	wrctl	status,r2
  
  return context;
  8181b8:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8181bc:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8181c0:	e0bffc17 	ldw	r2,-16(fp)
  8181c4:	10800117 	ldw	r2,4(r2)
  8181c8:	10c11014 	ori	r3,r2,1088
  8181cc:	e0bffc17 	ldw	r2,-16(fp)
  8181d0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8181d4:	e0bffc17 	ldw	r2,-16(fp)
  8181d8:	10800017 	ldw	r2,0(r2)
  8181dc:	10800304 	addi	r2,r2,12
  8181e0:	e0fffc17 	ldw	r3,-16(fp)
  8181e4:	18c00117 	ldw	r3,4(r3)
  8181e8:	10c00035 	stwio	r3,0(r2)
  8181ec:	e0bff417 	ldw	r2,-48(fp)
  8181f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8181f4:	e0bff617 	ldw	r2,-40(fp)
  8181f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8181fc:	e0fffe17 	ldw	r3,-8(fp)
  818200:	e0bfef17 	ldw	r2,-68(fp)
  818204:	1885c83a 	sub	r2,r3,r2
}
  818208:	e037883a 	mov	sp,fp
  81820c:	dfc00117 	ldw	ra,4(sp)
  818210:	df000017 	ldw	fp,0(sp)
  818214:	dec00204 	addi	sp,sp,8
  818218:	f800283a 	ret

0081821c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  81821c:	defff904 	addi	sp,sp,-28
  818220:	dfc00615 	stw	ra,24(sp)
  818224:	df000515 	stw	fp,20(sp)
  818228:	df000504 	addi	fp,sp,20
  81822c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  818230:	00800144 	movi	r2,5
  818234:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  818238:	d8000215 	stw	zero,8(sp)
  81823c:	e0bffe44 	addi	r2,fp,-7
  818240:	d8800115 	stw	r2,4(sp)
  818244:	00800044 	movi	r2,1
  818248:	d8800015 	stw	r2,0(sp)
  81824c:	e1fffe04 	addi	r7,fp,-8
  818250:	01800044 	movi	r6,1
  818254:	000b883a 	mov	r5,zero
  818258:	e13fff17 	ldw	r4,-4(fp)
  81825c:	08195800 	call	819580 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  818260:	e0bffe43 	ldbu	r2,-7(fp)
}
  818264:	e037883a 	mov	sp,fp
  818268:	dfc00117 	ldw	ra,4(sp)
  81826c:	df000017 	ldw	fp,0(sp)
  818270:	dec00204 	addi	sp,sp,8
  818274:	f800283a 	ret

00818278 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  818278:	defffd04 	addi	sp,sp,-12
  81827c:	dfc00215 	stw	ra,8(sp)
  818280:	df000115 	stw	fp,4(sp)
  818284:	df000104 	addi	fp,sp,4
  818288:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  81828c:	e13fff17 	ldw	r4,-4(fp)
  818290:	081821c0 	call	81821c <epcs_read_status_register>
  818294:	10803fcc 	andi	r2,r2,255
  818298:	1080004c 	andi	r2,r2,1
}
  81829c:	e037883a 	mov	sp,fp
  8182a0:	dfc00117 	ldw	ra,4(sp)
  8182a4:	df000017 	ldw	fp,0(sp)
  8182a8:	dec00204 	addi	sp,sp,8
  8182ac:	f800283a 	ret

008182b0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  8182b0:	defffd04 	addi	sp,sp,-12
  8182b4:	dfc00215 	stw	ra,8(sp)
  8182b8:	df000115 	stw	fp,4(sp)
  8182bc:	df000104 	addi	fp,sp,4
  8182c0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  8182c4:	0001883a 	nop
  8182c8:	e13fff17 	ldw	r4,-4(fp)
  8182cc:	08182780 	call	818278 <epcs_test_wip>
  8182d0:	103ffd1e 	bne	r2,zero,8182c8 <__alt_mem_epcs_flash_controller_0+0xff80f2c8>
  {
  }
}
  8182d4:	0001883a 	nop
  8182d8:	e037883a 	mov	sp,fp
  8182dc:	dfc00117 	ldw	ra,4(sp)
  8182e0:	df000017 	ldw	fp,0(sp)
  8182e4:	dec00204 	addi	sp,sp,8
  8182e8:	f800283a 	ret

008182ec <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  8182ec:	defff604 	addi	sp,sp,-40
  8182f0:	dfc00915 	stw	ra,36(sp)
  8182f4:	df000815 	stw	fp,32(sp)
  8182f8:	df000804 	addi	fp,sp,32
  8182fc:	e13ffd15 	stw	r4,-12(fp)
  818300:	e17ffe15 	stw	r5,-8(fp)
  818304:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  818308:	e0bfff17 	ldw	r2,-4(fp)
  81830c:	10001226 	beq	r2,zero,818358 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  818310:	00bff604 	movi	r2,-40
  818314:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  818318:	e0bffe17 	ldw	r2,-8(fp)
  81831c:	1004d63a 	srli	r2,r2,24
  818320:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  818324:	e0bffe17 	ldw	r2,-8(fp)
  818328:	1004d43a 	srli	r2,r2,16
  81832c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  818330:	e0bffe17 	ldw	r2,-8(fp)
  818334:	1004d23a 	srli	r2,r2,8
  818338:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  81833c:	e0bffe17 	ldw	r2,-8(fp)
  818340:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  818344:	00800144 	movi	r2,5
  818348:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  81834c:	e13ffd17 	ldw	r4,-12(fp)
  818350:	08187a00 	call	8187a0 <epcs_enter_4_bytes_mode>
  818354:	00000c06 	br	818388 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  818358:	00bff604 	movi	r2,-40
  81835c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  818360:	e0bffe17 	ldw	r2,-8(fp)
  818364:	1004d43a 	srli	r2,r2,16
  818368:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  81836c:	e0bffe17 	ldw	r2,-8(fp)
  818370:	1004d23a 	srli	r2,r2,8
  818374:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  818378:	e0bffe17 	ldw	r2,-8(fp)
  81837c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  818380:	00800104 	movi	r2,4
  818384:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  818388:	e13ffd17 	ldw	r4,-12(fp)
  81838c:	08184dc0 	call	8184dc <epcs_write_enable>

  alt_avalon_spi_command(
  818390:	e0bffb03 	ldbu	r2,-20(fp)
  818394:	e0fffb44 	addi	r3,fp,-19
  818398:	d8000215 	stw	zero,8(sp)
  81839c:	d8000115 	stw	zero,4(sp)
  8183a0:	d8000015 	stw	zero,0(sp)
  8183a4:	180f883a 	mov	r7,r3
  8183a8:	100d883a 	mov	r6,r2
  8183ac:	000b883a 	mov	r5,zero
  8183b0:	e13ffd17 	ldw	r4,-12(fp)
  8183b4:	08195800 	call	819580 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  8183b8:	e13ffd17 	ldw	r4,-12(fp)
  8183bc:	08182b00 	call	8182b0 <epcs_await_wip_released>

  if(four_bytes_mode)
  8183c0:	e0bfff17 	ldw	r2,-4(fp)
  8183c4:	10000226 	beq	r2,zero,8183d0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  8183c8:	e13ffd17 	ldw	r4,-12(fp)
  8183cc:	08187fc0 	call	8187fc <epcs_exit_4_bytes_mode>
  }
}
  8183d0:	0001883a 	nop
  8183d4:	e037883a 	mov	sp,fp
  8183d8:	dfc00117 	ldw	ra,4(sp)
  8183dc:	df000017 	ldw	fp,0(sp)
  8183e0:	dec00204 	addi	sp,sp,8
  8183e4:	f800283a 	ret

008183e8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  8183e8:	defff404 	addi	sp,sp,-48
  8183ec:	dfc00b15 	stw	ra,44(sp)
  8183f0:	df000a15 	stw	fp,40(sp)
  8183f4:	df000a04 	addi	fp,sp,40
  8183f8:	e13ffc15 	stw	r4,-16(fp)
  8183fc:	e17ffd15 	stw	r5,-12(fp)
  818400:	e1bffe15 	stw	r6,-8(fp)
  818404:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  818408:	008000c4 	movi	r2,3
  81840c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  818410:	e0800217 	ldw	r2,8(fp)
  818414:	10001026 	beq	r2,zero,818458 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  818418:	e0bffd17 	ldw	r2,-12(fp)
  81841c:	1004d63a 	srli	r2,r2,24
  818420:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  818424:	e0bffd17 	ldw	r2,-12(fp)
  818428:	1005d43a 	srai	r2,r2,16
  81842c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  818430:	e0bffd17 	ldw	r2,-12(fp)
  818434:	1005d23a 	srai	r2,r2,8
  818438:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  81843c:	e0bffd17 	ldw	r2,-12(fp)
  818440:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  818444:	00800144 	movi	r2,5
  818448:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  81844c:	e13ffc17 	ldw	r4,-16(fp)
  818450:	08187a00 	call	8187a0 <epcs_enter_4_bytes_mode>
  818454:	00000a06 	br	818480 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  818458:	e0bffd17 	ldw	r2,-12(fp)
  81845c:	1005d43a 	srai	r2,r2,16
  818460:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  818464:	e0bffd17 	ldw	r2,-12(fp)
  818468:	1005d23a 	srai	r2,r2,8
  81846c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  818470:	e0bffd17 	ldw	r2,-12(fp)
  818474:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  818478:	00800104 	movi	r2,4
  81847c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  818480:	e13ffc17 	ldw	r4,-16(fp)
  818484:	08182b00 	call	8182b0 <epcs_await_wip_released>

  alt_avalon_spi_command(
  818488:	e0bfff17 	ldw	r2,-4(fp)
  81848c:	e13ffa04 	addi	r4,fp,-24
  818490:	d8000215 	stw	zero,8(sp)
  818494:	e0fffe17 	ldw	r3,-8(fp)
  818498:	d8c00115 	stw	r3,4(sp)
  81849c:	d8800015 	stw	r2,0(sp)
  8184a0:	200f883a 	mov	r7,r4
  8184a4:	e1bff917 	ldw	r6,-28(fp)
  8184a8:	000b883a 	mov	r5,zero
  8184ac:	e13ffc17 	ldw	r4,-16(fp)
  8184b0:	08195800 	call	819580 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  8184b4:	e0800217 	ldw	r2,8(fp)
  8184b8:	10000226 	beq	r2,zero,8184c4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  8184bc:	e13ffc17 	ldw	r4,-16(fp)
  8184c0:	08187fc0 	call	8187fc <epcs_exit_4_bytes_mode>
  }

  return length;
  8184c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8184c8:	e037883a 	mov	sp,fp
  8184cc:	dfc00117 	ldw	ra,4(sp)
  8184d0:	df000017 	ldw	fp,0(sp)
  8184d4:	dec00204 	addi	sp,sp,8
  8184d8:	f800283a 	ret

008184dc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  8184dc:	defff904 	addi	sp,sp,-28
  8184e0:	dfc00615 	stw	ra,24(sp)
  8184e4:	df000515 	stw	fp,20(sp)
  8184e8:	df000504 	addi	fp,sp,20
  8184ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  8184f0:	00800184 	movi	r2,6
  8184f4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  8184f8:	d8000215 	stw	zero,8(sp)
  8184fc:	d8000115 	stw	zero,4(sp)
  818500:	d8000015 	stw	zero,0(sp)
  818504:	e1fffe04 	addi	r7,fp,-8
  818508:	01800044 	movi	r6,1
  81850c:	000b883a 	mov	r5,zero
  818510:	e13fff17 	ldw	r4,-4(fp)
  818514:	08195800 	call	819580 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  818518:	0001883a 	nop
  81851c:	e037883a 	mov	sp,fp
  818520:	dfc00117 	ldw	ra,4(sp)
  818524:	df000017 	ldw	fp,0(sp)
  818528:	dec00204 	addi	sp,sp,8
  81852c:	f800283a 	ret

00818530 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  818530:	defff804 	addi	sp,sp,-32
  818534:	dfc00715 	stw	ra,28(sp)
  818538:	df000615 	stw	fp,24(sp)
  81853c:	df000604 	addi	fp,sp,24
  818540:	e13ffe15 	stw	r4,-8(fp)
  818544:	2805883a 	mov	r2,r5
  818548:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  81854c:	00800044 	movi	r2,1
  818550:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  818554:	e0bfff03 	ldbu	r2,-4(fp)
  818558:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  81855c:	d8000215 	stw	zero,8(sp)
  818560:	d8000115 	stw	zero,4(sp)
  818564:	d8000015 	stw	zero,0(sp)
  818568:	e1fffd04 	addi	r7,fp,-12
  81856c:	01800084 	movi	r6,2
  818570:	000b883a 	mov	r5,zero
  818574:	e13ffe17 	ldw	r4,-8(fp)
  818578:	08195800 	call	819580 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  81857c:	e13ffe17 	ldw	r4,-8(fp)
  818580:	08182b00 	call	8182b0 <epcs_await_wip_released>
}
  818584:	0001883a 	nop
  818588:	e037883a 	mov	sp,fp
  81858c:	dfc00117 	ldw	ra,4(sp)
  818590:	df000017 	ldw	fp,0(sp)
  818594:	dec00204 	addi	sp,sp,8
  818598:	f800283a 	ret

0081859c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  81859c:	defff404 	addi	sp,sp,-48
  8185a0:	dfc00b15 	stw	ra,44(sp)
  8185a4:	df000a15 	stw	fp,40(sp)
  8185a8:	df000a04 	addi	fp,sp,40
  8185ac:	e13ffc15 	stw	r4,-16(fp)
  8185b0:	e17ffd15 	stw	r5,-12(fp)
  8185b4:	e1bffe15 	stw	r6,-8(fp)
  8185b8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  8185bc:	00800084 	movi	r2,2
  8185c0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  8185c4:	e0800217 	ldw	r2,8(fp)
  8185c8:	10001026 	beq	r2,zero,81860c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  8185cc:	e0bffd17 	ldw	r2,-12(fp)
  8185d0:	1004d63a 	srli	r2,r2,24
  8185d4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  8185d8:	e0bffd17 	ldw	r2,-12(fp)
  8185dc:	1005d43a 	srai	r2,r2,16
  8185e0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  8185e4:	e0bffd17 	ldw	r2,-12(fp)
  8185e8:	1005d23a 	srai	r2,r2,8
  8185ec:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  8185f0:	e0bffd17 	ldw	r2,-12(fp)
  8185f4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  8185f8:	00800144 	movi	r2,5
  8185fc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  818600:	e13ffc17 	ldw	r4,-16(fp)
  818604:	08187a00 	call	8187a0 <epcs_enter_4_bytes_mode>
  818608:	00000a06 	br	818634 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  81860c:	e0bffd17 	ldw	r2,-12(fp)
  818610:	1005d43a 	srai	r2,r2,16
  818614:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  818618:	e0bffd17 	ldw	r2,-12(fp)
  81861c:	1005d23a 	srai	r2,r2,8
  818620:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  818624:	e0bffd17 	ldw	r2,-12(fp)
  818628:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  81862c:	00800104 	movi	r2,4
  818630:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  818634:	e13ffc17 	ldw	r4,-16(fp)
  818638:	08184dc0 	call	8184dc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  81863c:	e0fffa04 	addi	r3,fp,-24
  818640:	00800044 	movi	r2,1
  818644:	d8800215 	stw	r2,8(sp)
  818648:	d8000115 	stw	zero,4(sp)
  81864c:	d8000015 	stw	zero,0(sp)
  818650:	180f883a 	mov	r7,r3
  818654:	e1bff917 	ldw	r6,-28(fp)
  818658:	000b883a 	mov	r5,zero
  81865c:	e13ffc17 	ldw	r4,-16(fp)
  818660:	08195800 	call	819580 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  818664:	e0bfff17 	ldw	r2,-4(fp)
  818668:	d8000215 	stw	zero,8(sp)
  81866c:	d8000115 	stw	zero,4(sp)
  818670:	d8000015 	stw	zero,0(sp)
  818674:	e1fffe17 	ldw	r7,-8(fp)
  818678:	100d883a 	mov	r6,r2
  81867c:	000b883a 	mov	r5,zero
  818680:	e13ffc17 	ldw	r4,-16(fp)
  818684:	08195800 	call	819580 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  818688:	e13ffc17 	ldw	r4,-16(fp)
  81868c:	08182b00 	call	8182b0 <epcs_await_wip_released>

  if(four_bytes_mode)
  818690:	e0800217 	ldw	r2,8(fp)
  818694:	10000226 	beq	r2,zero,8186a0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  818698:	e13ffc17 	ldw	r4,-16(fp)
  81869c:	08187fc0 	call	8187fc <epcs_exit_4_bytes_mode>
  }

  return length;
  8186a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8186a4:	e037883a 	mov	sp,fp
  8186a8:	dfc00117 	ldw	ra,4(sp)
  8186ac:	df000017 	ldw	fp,0(sp)
  8186b0:	dec00204 	addi	sp,sp,8
  8186b4:	f800283a 	ret

008186b8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  8186b8:	defff804 	addi	sp,sp,-32
  8186bc:	dfc00715 	stw	ra,28(sp)
  8186c0:	df000615 	stw	fp,24(sp)
  8186c4:	df000604 	addi	fp,sp,24
  8186c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  8186cc:	00bfeac4 	movi	r2,-85
  8186d0:	e0bffd05 	stb	r2,-12(fp)
  8186d4:	e03ffd45 	stb	zero,-11(fp)
  8186d8:	e03ffd85 	stb	zero,-10(fp)
  8186dc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  8186e0:	d8000215 	stw	zero,8(sp)
  8186e4:	e0bffe04 	addi	r2,fp,-8
  8186e8:	d8800115 	stw	r2,4(sp)
  8186ec:	00800044 	movi	r2,1
  8186f0:	d8800015 	stw	r2,0(sp)
  8186f4:	e1fffd04 	addi	r7,fp,-12
  8186f8:	01800104 	movi	r6,4
  8186fc:	000b883a 	mov	r5,zero
  818700:	e13fff17 	ldw	r4,-4(fp)
  818704:	08195800 	call	819580 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  818708:	e0bffe03 	ldbu	r2,-8(fp)
}
  81870c:	e037883a 	mov	sp,fp
  818710:	dfc00117 	ldw	ra,4(sp)
  818714:	df000017 	ldw	fp,0(sp)
  818718:	dec00204 	addi	sp,sp,8
  81871c:	f800283a 	ret

00818720 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  818720:	defff904 	addi	sp,sp,-28
  818724:	dfc00615 	stw	ra,24(sp)
  818728:	df000515 	stw	fp,20(sp)
  81872c:	df000504 	addi	fp,sp,20
  818730:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  818734:	00bfe7c4 	movi	r2,-97
  818738:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  81873c:	d8000215 	stw	zero,8(sp)
  818740:	e0bffe44 	addi	r2,fp,-7
  818744:	d8800115 	stw	r2,4(sp)
  818748:	008000c4 	movi	r2,3
  81874c:	d8800015 	stw	r2,0(sp)
  818750:	e1fffe04 	addi	r7,fp,-8
  818754:	01800044 	movi	r6,1
  818758:	000b883a 	mov	r5,zero
  81875c:	e13fff17 	ldw	r4,-4(fp)
  818760:	08195800 	call	819580 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  818764:	e0bffe43 	ldbu	r2,-7(fp)
  818768:	10803fcc 	andi	r2,r2,255
  81876c:	1006943a 	slli	r3,r2,16
  818770:	e0bffe83 	ldbu	r2,-6(fp)
  818774:	10803fcc 	andi	r2,r2,255
  818778:	1004923a 	slli	r2,r2,8
  81877c:	1886b03a 	or	r3,r3,r2
  818780:	e0bffec3 	ldbu	r2,-5(fp)
  818784:	10803fcc 	andi	r2,r2,255
  818788:	1884b03a 	or	r2,r3,r2
}
  81878c:	e037883a 	mov	sp,fp
  818790:	dfc00117 	ldw	ra,4(sp)
  818794:	df000017 	ldw	fp,0(sp)
  818798:	dec00204 	addi	sp,sp,8
  81879c:	f800283a 	ret

008187a0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  8187a0:	defff904 	addi	sp,sp,-28
  8187a4:	dfc00615 	stw	ra,24(sp)
  8187a8:	df000515 	stw	fp,20(sp)
  8187ac:	df000504 	addi	fp,sp,20
  8187b0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  8187b4:	00bfedc4 	movi	r2,-73
  8187b8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  8187bc:	e13fff17 	ldw	r4,-4(fp)
  8187c0:	08184dc0 	call	8184dc <epcs_write_enable>

  alt_avalon_spi_command(
  8187c4:	d8000215 	stw	zero,8(sp)
  8187c8:	d8000115 	stw	zero,4(sp)
  8187cc:	d8000015 	stw	zero,0(sp)
  8187d0:	e1fffe04 	addi	r7,fp,-8
  8187d4:	01800044 	movi	r6,1
  8187d8:	000b883a 	mov	r5,zero
  8187dc:	e13fff17 	ldw	r4,-4(fp)
  8187e0:	08195800 	call	819580 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  8187e4:	0001883a 	nop
}
  8187e8:	e037883a 	mov	sp,fp
  8187ec:	dfc00117 	ldw	ra,4(sp)
  8187f0:	df000017 	ldw	fp,0(sp)
  8187f4:	dec00204 	addi	sp,sp,8
  8187f8:	f800283a 	ret

008187fc <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  8187fc:	defff904 	addi	sp,sp,-28
  818800:	dfc00615 	stw	ra,24(sp)
  818804:	df000515 	stw	fp,20(sp)
  818808:	df000504 	addi	fp,sp,20
  81880c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  818810:	00bffa44 	movi	r2,-23
  818814:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  818818:	e13fff17 	ldw	r4,-4(fp)
  81881c:	08184dc0 	call	8184dc <epcs_write_enable>

  alt_avalon_spi_command(
  818820:	d8000215 	stw	zero,8(sp)
  818824:	d8000115 	stw	zero,4(sp)
  818828:	d8000015 	stw	zero,0(sp)
  81882c:	e1fffe04 	addi	r7,fp,-8
  818830:	01800044 	movi	r6,1
  818834:	000b883a 	mov	r5,zero
  818838:	e13fff17 	ldw	r4,-4(fp)
  81883c:	08195800 	call	819580 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  818840:	0001883a 	nop
}
  818844:	e037883a 	mov	sp,fp
  818848:	dfc00117 	ldw	ra,4(sp)
  81884c:	df000017 	ldw	fp,0(sp)
  818850:	dec00204 	addi	sp,sp,8
  818854:	f800283a 	ret

00818858 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  818858:	defff504 	addi	sp,sp,-44
  81885c:	df000a15 	stw	fp,40(sp)
  818860:	df000a04 	addi	fp,sp,40
  818864:	e13ffc15 	stw	r4,-16(fp)
  818868:	e17ffd15 	stw	r5,-12(fp)
  81886c:	e1bffe15 	stw	r6,-8(fp)
  818870:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  818874:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  818878:	d0a07817 	ldw	r2,-32288(gp)
  
  if (alt_ticks_per_second ())
  81887c:	10003c26 	beq	r2,zero,818970 <alt_alarm_start+0x118>
  {
    if (alarm)
  818880:	e0bffc17 	ldw	r2,-16(fp)
  818884:	10003826 	beq	r2,zero,818968 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  818888:	e0bffc17 	ldw	r2,-16(fp)
  81888c:	e0fffe17 	ldw	r3,-8(fp)
  818890:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  818894:	e0bffc17 	ldw	r2,-16(fp)
  818898:	e0ffff17 	ldw	r3,-4(fp)
  81889c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8188a0:	0005303a 	rdctl	r2,status
  8188a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8188a8:	e0fff917 	ldw	r3,-28(fp)
  8188ac:	00bfff84 	movi	r2,-2
  8188b0:	1884703a 	and	r2,r3,r2
  8188b4:	1001703a 	wrctl	status,r2
  
  return context;
  8188b8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  8188bc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8188c0:	d0a07917 	ldw	r2,-32284(gp)
      
      current_nticks = alt_nticks();
  8188c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8188c8:	e0fffd17 	ldw	r3,-12(fp)
  8188cc:	e0bff617 	ldw	r2,-40(fp)
  8188d0:	1885883a 	add	r2,r3,r2
  8188d4:	10c00044 	addi	r3,r2,1
  8188d8:	e0bffc17 	ldw	r2,-16(fp)
  8188dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8188e0:	e0bffc17 	ldw	r2,-16(fp)
  8188e4:	10c00217 	ldw	r3,8(r2)
  8188e8:	e0bff617 	ldw	r2,-40(fp)
  8188ec:	1880042e 	bgeu	r3,r2,818900 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8188f0:	e0bffc17 	ldw	r2,-16(fp)
  8188f4:	00c00044 	movi	r3,1
  8188f8:	10c00405 	stb	r3,16(r2)
  8188fc:	00000206 	br	818908 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  818900:	e0bffc17 	ldw	r2,-16(fp)
  818904:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  818908:	e0bffc17 	ldw	r2,-16(fp)
  81890c:	d0e04b04 	addi	r3,gp,-32468
  818910:	e0fffa15 	stw	r3,-24(fp)
  818914:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  818918:	e0bffb17 	ldw	r2,-20(fp)
  81891c:	e0fffa17 	ldw	r3,-24(fp)
  818920:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  818924:	e0bffa17 	ldw	r2,-24(fp)
  818928:	10c00017 	ldw	r3,0(r2)
  81892c:	e0bffb17 	ldw	r2,-20(fp)
  818930:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  818934:	e0bffa17 	ldw	r2,-24(fp)
  818938:	10800017 	ldw	r2,0(r2)
  81893c:	e0fffb17 	ldw	r3,-20(fp)
  818940:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  818944:	e0bffa17 	ldw	r2,-24(fp)
  818948:	e0fffb17 	ldw	r3,-20(fp)
  81894c:	10c00015 	stw	r3,0(r2)
  818950:	e0bff817 	ldw	r2,-32(fp)
  818954:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818958:	e0bff717 	ldw	r2,-36(fp)
  81895c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  818960:	0005883a 	mov	r2,zero
  818964:	00000306 	br	818974 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  818968:	00bffa84 	movi	r2,-22
  81896c:	00000106 	br	818974 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  818970:	00bfde84 	movi	r2,-134
  }
}
  818974:	e037883a 	mov	sp,fp
  818978:	df000017 	ldw	fp,0(sp)
  81897c:	dec00104 	addi	sp,sp,4
  818980:	f800283a 	ret

00818984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818984:	defffe04 	addi	sp,sp,-8
  818988:	dfc00115 	stw	ra,4(sp)
  81898c:	df000015 	stw	fp,0(sp)
  818990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  818994:	d0a02717 	ldw	r2,-32612(gp)
  818998:	10000326 	beq	r2,zero,8189a8 <alt_get_errno+0x24>
  81899c:	d0a02717 	ldw	r2,-32612(gp)
  8189a0:	103ee83a 	callr	r2
  8189a4:	00000106 	br	8189ac <alt_get_errno+0x28>
  8189a8:	d0a05904 	addi	r2,gp,-32412
}
  8189ac:	e037883a 	mov	sp,fp
  8189b0:	dfc00117 	ldw	ra,4(sp)
  8189b4:	df000017 	ldw	fp,0(sp)
  8189b8:	dec00204 	addi	sp,sp,8
  8189bc:	f800283a 	ret

008189c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8189c0:	defffa04 	addi	sp,sp,-24
  8189c4:	dfc00515 	stw	ra,20(sp)
  8189c8:	df000415 	stw	fp,16(sp)
  8189cc:	df000404 	addi	fp,sp,16
  8189d0:	e13ffe15 	stw	r4,-8(fp)
  8189d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8189d8:	e0bffe17 	ldw	r2,-8(fp)
  8189dc:	10000326 	beq	r2,zero,8189ec <alt_dev_llist_insert+0x2c>
  8189e0:	e0bffe17 	ldw	r2,-8(fp)
  8189e4:	10800217 	ldw	r2,8(r2)
  8189e8:	1000061e 	bne	r2,zero,818a04 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8189ec:	08189840 	call	818984 <alt_get_errno>
  8189f0:	1007883a 	mov	r3,r2
  8189f4:	00800584 	movi	r2,22
  8189f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8189fc:	00bffa84 	movi	r2,-22
  818a00:	00001306 	br	818a50 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  818a04:	e0bffe17 	ldw	r2,-8(fp)
  818a08:	e0ffff17 	ldw	r3,-4(fp)
  818a0c:	e0fffc15 	stw	r3,-16(fp)
  818a10:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  818a14:	e0bffd17 	ldw	r2,-12(fp)
  818a18:	e0fffc17 	ldw	r3,-16(fp)
  818a1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  818a20:	e0bffc17 	ldw	r2,-16(fp)
  818a24:	10c00017 	ldw	r3,0(r2)
  818a28:	e0bffd17 	ldw	r2,-12(fp)
  818a2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  818a30:	e0bffc17 	ldw	r2,-16(fp)
  818a34:	10800017 	ldw	r2,0(r2)
  818a38:	e0fffd17 	ldw	r3,-12(fp)
  818a3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  818a40:	e0bffc17 	ldw	r2,-16(fp)
  818a44:	e0fffd17 	ldw	r3,-12(fp)
  818a48:	10c00015 	stw	r3,0(r2)

  return 0;  
  818a4c:	0005883a 	mov	r2,zero
}
  818a50:	e037883a 	mov	sp,fp
  818a54:	dfc00117 	ldw	ra,4(sp)
  818a58:	df000017 	ldw	fp,0(sp)
  818a5c:	dec00204 	addi	sp,sp,8
  818a60:	f800283a 	ret

00818a64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  818a64:	defffd04 	addi	sp,sp,-12
  818a68:	dfc00215 	stw	ra,8(sp)
  818a6c:	df000115 	stw	fp,4(sp)
  818a70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818a74:	008020b4 	movhi	r2,130
  818a78:	10a76604 	addi	r2,r2,-25192
  818a7c:	e0bfff15 	stw	r2,-4(fp)
  818a80:	00000606 	br	818a9c <_do_ctors+0x38>
        (*ctor) (); 
  818a84:	e0bfff17 	ldw	r2,-4(fp)
  818a88:	10800017 	ldw	r2,0(r2)
  818a8c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818a90:	e0bfff17 	ldw	r2,-4(fp)
  818a94:	10bfff04 	addi	r2,r2,-4
  818a98:	e0bfff15 	stw	r2,-4(fp)
  818a9c:	e0ffff17 	ldw	r3,-4(fp)
  818aa0:	008020b4 	movhi	r2,130
  818aa4:	10a76704 	addi	r2,r2,-25188
  818aa8:	18bff62e 	bgeu	r3,r2,818a84 <__alt_mem_epcs_flash_controller_0+0xff80fa84>
        (*ctor) (); 
}
  818aac:	0001883a 	nop
  818ab0:	e037883a 	mov	sp,fp
  818ab4:	dfc00117 	ldw	ra,4(sp)
  818ab8:	df000017 	ldw	fp,0(sp)
  818abc:	dec00204 	addi	sp,sp,8
  818ac0:	f800283a 	ret

00818ac4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  818ac4:	defffd04 	addi	sp,sp,-12
  818ac8:	dfc00215 	stw	ra,8(sp)
  818acc:	df000115 	stw	fp,4(sp)
  818ad0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818ad4:	008020b4 	movhi	r2,130
  818ad8:	10a76604 	addi	r2,r2,-25192
  818adc:	e0bfff15 	stw	r2,-4(fp)
  818ae0:	00000606 	br	818afc <_do_dtors+0x38>
        (*dtor) (); 
  818ae4:	e0bfff17 	ldw	r2,-4(fp)
  818ae8:	10800017 	ldw	r2,0(r2)
  818aec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818af0:	e0bfff17 	ldw	r2,-4(fp)
  818af4:	10bfff04 	addi	r2,r2,-4
  818af8:	e0bfff15 	stw	r2,-4(fp)
  818afc:	e0ffff17 	ldw	r3,-4(fp)
  818b00:	008020b4 	movhi	r2,130
  818b04:	10a76704 	addi	r2,r2,-25188
  818b08:	18bff62e 	bgeu	r3,r2,818ae4 <__alt_mem_epcs_flash_controller_0+0xff80fae4>
        (*dtor) (); 
}
  818b0c:	0001883a 	nop
  818b10:	e037883a 	mov	sp,fp
  818b14:	dfc00117 	ldw	ra,4(sp)
  818b18:	df000017 	ldw	fp,0(sp)
  818b1c:	dec00204 	addi	sp,sp,8
  818b20:	f800283a 	ret

00818b24 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  818b24:	defffc04 	addi	sp,sp,-16
  818b28:	dfc00315 	stw	ra,12(sp)
  818b2c:	df000215 	stw	fp,8(sp)
  818b30:	df000204 	addi	fp,sp,8
  818b34:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  818b38:	d1604904 	addi	r5,gp,-32476
  818b3c:	e13fff17 	ldw	r4,-4(fp)
  818b40:	081977c0 	call	81977c <alt_find_dev>
  818b44:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  818b48:	e0bffe17 	ldw	r2,-8(fp)
  818b4c:	10000926 	beq	r2,zero,818b74 <alt_flash_open_dev+0x50>
  818b50:	e0bffe17 	ldw	r2,-8(fp)
  818b54:	10800317 	ldw	r2,12(r2)
  818b58:	10000626 	beq	r2,zero,818b74 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  818b5c:	e0bffe17 	ldw	r2,-8(fp)
  818b60:	10800317 	ldw	r2,12(r2)
  818b64:	e17fff17 	ldw	r5,-4(fp)
  818b68:	e13ffe17 	ldw	r4,-8(fp)
  818b6c:	103ee83a 	callr	r2
  818b70:	00000106 	br	818b78 <alt_flash_open_dev+0x54>
  }

  return dev;
  818b74:	e0bffe17 	ldw	r2,-8(fp)
}
  818b78:	e037883a 	mov	sp,fp
  818b7c:	dfc00117 	ldw	ra,4(sp)
  818b80:	df000017 	ldw	fp,0(sp)
  818b84:	dec00204 	addi	sp,sp,8
  818b88:	f800283a 	ret

00818b8c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  818b8c:	defffd04 	addi	sp,sp,-12
  818b90:	dfc00215 	stw	ra,8(sp)
  818b94:	df000115 	stw	fp,4(sp)
  818b98:	df000104 	addi	fp,sp,4
  818b9c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  818ba0:	e0bfff17 	ldw	r2,-4(fp)
  818ba4:	10000826 	beq	r2,zero,818bc8 <alt_flash_close_dev+0x3c>
  818ba8:	e0bfff17 	ldw	r2,-4(fp)
  818bac:	10800417 	ldw	r2,16(r2)
  818bb0:	10000526 	beq	r2,zero,818bc8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  818bb4:	e0bfff17 	ldw	r2,-4(fp)
  818bb8:	10800417 	ldw	r2,16(r2)
  818bbc:	e13fff17 	ldw	r4,-4(fp)
  818bc0:	103ee83a 	callr	r2
  }
  return;
  818bc4:	0001883a 	nop
  818bc8:	0001883a 	nop
}
  818bcc:	e037883a 	mov	sp,fp
  818bd0:	dfc00117 	ldw	ra,4(sp)
  818bd4:	df000017 	ldw	fp,0(sp)
  818bd8:	dec00204 	addi	sp,sp,8
  818bdc:	f800283a 	ret

00818be0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  818be0:	defffe04 	addi	sp,sp,-8
  818be4:	df000115 	stw	fp,4(sp)
  818be8:	df000104 	addi	fp,sp,4
  818bec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  818bf0:	e0bfff17 	ldw	r2,-4(fp)
  818bf4:	10bffe84 	addi	r2,r2,-6
  818bf8:	10c00428 	cmpgeui	r3,r2,16
  818bfc:	18001a1e 	bne	r3,zero,818c68 <alt_exception_cause_generated_bad_addr+0x88>
  818c00:	100690ba 	slli	r3,r2,2
  818c04:	008020b4 	movhi	r2,130
  818c08:	10a30604 	addi	r2,r2,-29672
  818c0c:	1885883a 	add	r2,r3,r2
  818c10:	10800017 	ldw	r2,0(r2)
  818c14:	1000683a 	jmp	r2
  818c18:	00818c58 	cmpnei	r2,zero,1585
  818c1c:	00818c58 	cmpnei	r2,zero,1585
  818c20:	00818c68 	cmpgeui	r2,zero,1585
  818c24:	00818c68 	cmpgeui	r2,zero,1585
  818c28:	00818c68 	cmpgeui	r2,zero,1585
  818c2c:	00818c58 	cmpnei	r2,zero,1585
  818c30:	00818c60 	cmpeqi	r2,zero,1585
  818c34:	00818c68 	cmpgeui	r2,zero,1585
  818c38:	00818c58 	cmpnei	r2,zero,1585
  818c3c:	00818c58 	cmpnei	r2,zero,1585
  818c40:	00818c68 	cmpgeui	r2,zero,1585
  818c44:	00818c58 	cmpnei	r2,zero,1585
  818c48:	00818c60 	cmpeqi	r2,zero,1585
  818c4c:	00818c68 	cmpgeui	r2,zero,1585
  818c50:	00818c68 	cmpgeui	r2,zero,1585
  818c54:	00818c58 	cmpnei	r2,zero,1585
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  818c58:	00800044 	movi	r2,1
  818c5c:	00000306 	br	818c6c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  818c60:	0005883a 	mov	r2,zero
  818c64:	00000106 	br	818c6c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  818c68:	0005883a 	mov	r2,zero
  }
}
  818c6c:	e037883a 	mov	sp,fp
  818c70:	df000017 	ldw	fp,0(sp)
  818c74:	dec00104 	addi	sp,sp,4
  818c78:	f800283a 	ret

00818c7c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  818c7c:	defff804 	addi	sp,sp,-32
  818c80:	dfc00715 	stw	ra,28(sp)
  818c84:	df000615 	stw	fp,24(sp)
  818c88:	dc000515 	stw	r16,20(sp)
  818c8c:	df000604 	addi	fp,sp,24
  818c90:	e13ffb15 	stw	r4,-20(fp)
  818c94:	e17ffc15 	stw	r5,-16(fp)
  818c98:	e1bffd15 	stw	r6,-12(fp)
  818c9c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  818ca0:	e1bffe17 	ldw	r6,-8(fp)
  818ca4:	e17ffd17 	ldw	r5,-12(fp)
  818ca8:	e13ffc17 	ldw	r4,-16(fp)
  818cac:	0818f040 	call	818f04 <open>
  818cb0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  818cb4:	e0bffa17 	ldw	r2,-24(fp)
  818cb8:	10002216 	blt	r2,zero,818d44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  818cbc:	040020b4 	movhi	r16,130
  818cc0:	842b4504 	addi	r16,r16,-21228
  818cc4:	e0bffa17 	ldw	r2,-24(fp)
  818cc8:	01400304 	movi	r5,12
  818ccc:	1009883a 	mov	r4,r2
  818cd0:	080ad7c0 	call	80ad7c <__mulsi3>
  818cd4:	8085883a 	add	r2,r16,r2
  818cd8:	10c00017 	ldw	r3,0(r2)
  818cdc:	e0bffb17 	ldw	r2,-20(fp)
  818ce0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  818ce4:	040020b4 	movhi	r16,130
  818ce8:	842b4504 	addi	r16,r16,-21228
  818cec:	e0bffa17 	ldw	r2,-24(fp)
  818cf0:	01400304 	movi	r5,12
  818cf4:	1009883a 	mov	r4,r2
  818cf8:	080ad7c0 	call	80ad7c <__mulsi3>
  818cfc:	8085883a 	add	r2,r16,r2
  818d00:	10800104 	addi	r2,r2,4
  818d04:	10c00017 	ldw	r3,0(r2)
  818d08:	e0bffb17 	ldw	r2,-20(fp)
  818d0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  818d10:	040020b4 	movhi	r16,130
  818d14:	842b4504 	addi	r16,r16,-21228
  818d18:	e0bffa17 	ldw	r2,-24(fp)
  818d1c:	01400304 	movi	r5,12
  818d20:	1009883a 	mov	r4,r2
  818d24:	080ad7c0 	call	80ad7c <__mulsi3>
  818d28:	8085883a 	add	r2,r16,r2
  818d2c:	10800204 	addi	r2,r2,8
  818d30:	10c00017 	ldw	r3,0(r2)
  818d34:	e0bffb17 	ldw	r2,-20(fp)
  818d38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  818d3c:	e13ffa17 	ldw	r4,-24(fp)
  818d40:	080df180 	call	80df18 <alt_release_fd>
  }
} 
  818d44:	0001883a 	nop
  818d48:	e6ffff04 	addi	sp,fp,-4
  818d4c:	dfc00217 	ldw	ra,8(sp)
  818d50:	df000117 	ldw	fp,4(sp)
  818d54:	dc000017 	ldw	r16,0(sp)
  818d58:	dec00304 	addi	sp,sp,12
  818d5c:	f800283a 	ret

00818d60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  818d60:	defffb04 	addi	sp,sp,-20
  818d64:	dfc00415 	stw	ra,16(sp)
  818d68:	df000315 	stw	fp,12(sp)
  818d6c:	df000304 	addi	fp,sp,12
  818d70:	e13ffd15 	stw	r4,-12(fp)
  818d74:	e17ffe15 	stw	r5,-8(fp)
  818d78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  818d7c:	01c07fc4 	movi	r7,511
  818d80:	01800044 	movi	r6,1
  818d84:	e17ffd17 	ldw	r5,-12(fp)
  818d88:	010020b4 	movhi	r4,130
  818d8c:	212b4804 	addi	r4,r4,-21216
  818d90:	0818c7c0 	call	818c7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  818d94:	01c07fc4 	movi	r7,511
  818d98:	000d883a 	mov	r6,zero
  818d9c:	e17ffe17 	ldw	r5,-8(fp)
  818da0:	010020b4 	movhi	r4,130
  818da4:	212b4504 	addi	r4,r4,-21228
  818da8:	0818c7c0 	call	818c7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  818dac:	01c07fc4 	movi	r7,511
  818db0:	01800044 	movi	r6,1
  818db4:	e17fff17 	ldw	r5,-4(fp)
  818db8:	010020b4 	movhi	r4,130
  818dbc:	212b4b04 	addi	r4,r4,-21204
  818dc0:	0818c7c0 	call	818c7c <alt_open_fd>
}  
  818dc4:	0001883a 	nop
  818dc8:	e037883a 	mov	sp,fp
  818dcc:	dfc00117 	ldw	ra,4(sp)
  818dd0:	df000017 	ldw	fp,0(sp)
  818dd4:	dec00204 	addi	sp,sp,8
  818dd8:	f800283a 	ret

00818ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818ddc:	defffe04 	addi	sp,sp,-8
  818de0:	dfc00115 	stw	ra,4(sp)
  818de4:	df000015 	stw	fp,0(sp)
  818de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  818dec:	d0a02717 	ldw	r2,-32612(gp)
  818df0:	10000326 	beq	r2,zero,818e00 <alt_get_errno+0x24>
  818df4:	d0a02717 	ldw	r2,-32612(gp)
  818df8:	103ee83a 	callr	r2
  818dfc:	00000106 	br	818e04 <alt_get_errno+0x28>
  818e00:	d0a05904 	addi	r2,gp,-32412
}
  818e04:	e037883a 	mov	sp,fp
  818e08:	dfc00117 	ldw	ra,4(sp)
  818e0c:	df000017 	ldw	fp,0(sp)
  818e10:	dec00204 	addi	sp,sp,8
  818e14:	f800283a 	ret

00818e18 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  818e18:	defffb04 	addi	sp,sp,-20
  818e1c:	dfc00415 	stw	ra,16(sp)
  818e20:	df000315 	stw	fp,12(sp)
  818e24:	dc000215 	stw	r16,8(sp)
  818e28:	df000304 	addi	fp,sp,12
  818e2c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  818e30:	e0bffe17 	ldw	r2,-8(fp)
  818e34:	10800217 	ldw	r2,8(r2)
  818e38:	10d00034 	orhi	r3,r2,16384
  818e3c:	e0bffe17 	ldw	r2,-8(fp)
  818e40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  818e44:	e03ffd15 	stw	zero,-12(fp)
  818e48:	00002306 	br	818ed8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  818e4c:	040020b4 	movhi	r16,130
  818e50:	842b4504 	addi	r16,r16,-21228
  818e54:	e0bffd17 	ldw	r2,-12(fp)
  818e58:	01400304 	movi	r5,12
  818e5c:	1009883a 	mov	r4,r2
  818e60:	080ad7c0 	call	80ad7c <__mulsi3>
  818e64:	8085883a 	add	r2,r16,r2
  818e68:	10c00017 	ldw	r3,0(r2)
  818e6c:	e0bffe17 	ldw	r2,-8(fp)
  818e70:	10800017 	ldw	r2,0(r2)
  818e74:	1880151e 	bne	r3,r2,818ecc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  818e78:	040020b4 	movhi	r16,130
  818e7c:	842b4504 	addi	r16,r16,-21228
  818e80:	e0bffd17 	ldw	r2,-12(fp)
  818e84:	01400304 	movi	r5,12
  818e88:	1009883a 	mov	r4,r2
  818e8c:	080ad7c0 	call	80ad7c <__mulsi3>
  818e90:	8085883a 	add	r2,r16,r2
  818e94:	10800204 	addi	r2,r2,8
  818e98:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  818e9c:	10000b0e 	bge	r2,zero,818ecc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  818ea0:	01400304 	movi	r5,12
  818ea4:	e13ffd17 	ldw	r4,-12(fp)
  818ea8:	080ad7c0 	call	80ad7c <__mulsi3>
  818eac:	1007883a 	mov	r3,r2
  818eb0:	008020b4 	movhi	r2,130
  818eb4:	10ab4504 	addi	r2,r2,-21228
  818eb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  818ebc:	e0bffe17 	ldw	r2,-8(fp)
  818ec0:	18800226 	beq	r3,r2,818ecc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  818ec4:	00bffcc4 	movi	r2,-13
  818ec8:	00000806 	br	818eec <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  818ecc:	e0bffd17 	ldw	r2,-12(fp)
  818ed0:	10800044 	addi	r2,r2,1
  818ed4:	e0bffd15 	stw	r2,-12(fp)
  818ed8:	d0a02617 	ldw	r2,-32616(gp)
  818edc:	1007883a 	mov	r3,r2
  818ee0:	e0bffd17 	ldw	r2,-12(fp)
  818ee4:	18bfd92e 	bgeu	r3,r2,818e4c <__alt_mem_epcs_flash_controller_0+0xff80fe4c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  818ee8:	0005883a 	mov	r2,zero
}
  818eec:	e6ffff04 	addi	sp,fp,-4
  818ef0:	dfc00217 	ldw	ra,8(sp)
  818ef4:	df000117 	ldw	fp,4(sp)
  818ef8:	dc000017 	ldw	r16,0(sp)
  818efc:	dec00304 	addi	sp,sp,12
  818f00:	f800283a 	ret

00818f04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  818f04:	defff604 	addi	sp,sp,-40
  818f08:	dfc00915 	stw	ra,36(sp)
  818f0c:	df000815 	stw	fp,32(sp)
  818f10:	df000804 	addi	fp,sp,32
  818f14:	e13ffd15 	stw	r4,-12(fp)
  818f18:	e17ffe15 	stw	r5,-8(fp)
  818f1c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  818f20:	00bfffc4 	movi	r2,-1
  818f24:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  818f28:	00bffb44 	movi	r2,-19
  818f2c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  818f30:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  818f34:	d1602404 	addi	r5,gp,-32624
  818f38:	e13ffd17 	ldw	r4,-12(fp)
  818f3c:	081977c0 	call	81977c <alt_find_dev>
  818f40:	e0bff815 	stw	r2,-32(fp)
  818f44:	e0bff817 	ldw	r2,-32(fp)
  818f48:	1000051e 	bne	r2,zero,818f60 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  818f4c:	e13ffd17 	ldw	r4,-12(fp)
  818f50:	081980c0 	call	81980c <alt_find_file>
  818f54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  818f58:	00800044 	movi	r2,1
  818f5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  818f60:	e0bff817 	ldw	r2,-32(fp)
  818f64:	10002b26 	beq	r2,zero,819014 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  818f68:	e13ff817 	ldw	r4,-32(fp)
  818f6c:	08199140 	call	819914 <alt_get_fd>
  818f70:	e0bff915 	stw	r2,-28(fp)
  818f74:	e0bff917 	ldw	r2,-28(fp)
  818f78:	1000030e 	bge	r2,zero,818f88 <open+0x84>
    {
      status = index;
  818f7c:	e0bff917 	ldw	r2,-28(fp)
  818f80:	e0bffa15 	stw	r2,-24(fp)
  818f84:	00002506 	br	81901c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  818f88:	01400304 	movi	r5,12
  818f8c:	e13ff917 	ldw	r4,-28(fp)
  818f90:	080ad7c0 	call	80ad7c <__mulsi3>
  818f94:	1007883a 	mov	r3,r2
  818f98:	008020b4 	movhi	r2,130
  818f9c:	10ab4504 	addi	r2,r2,-21228
  818fa0:	1885883a 	add	r2,r3,r2
  818fa4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  818fa8:	e0fffe17 	ldw	r3,-8(fp)
  818fac:	00900034 	movhi	r2,16384
  818fb0:	10bfffc4 	addi	r2,r2,-1
  818fb4:	1886703a 	and	r3,r3,r2
  818fb8:	e0bffc17 	ldw	r2,-16(fp)
  818fbc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  818fc0:	e0bffb17 	ldw	r2,-20(fp)
  818fc4:	1000051e 	bne	r2,zero,818fdc <open+0xd8>
  818fc8:	e13ffc17 	ldw	r4,-16(fp)
  818fcc:	0818e180 	call	818e18 <alt_file_locked>
  818fd0:	e0bffa15 	stw	r2,-24(fp)
  818fd4:	e0bffa17 	ldw	r2,-24(fp)
  818fd8:	10001016 	blt	r2,zero,81901c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  818fdc:	e0bff817 	ldw	r2,-32(fp)
  818fe0:	10800317 	ldw	r2,12(r2)
  818fe4:	10000826 	beq	r2,zero,819008 <open+0x104>
  818fe8:	e0bff817 	ldw	r2,-32(fp)
  818fec:	10800317 	ldw	r2,12(r2)
  818ff0:	e1ffff17 	ldw	r7,-4(fp)
  818ff4:	e1bffe17 	ldw	r6,-8(fp)
  818ff8:	e17ffd17 	ldw	r5,-12(fp)
  818ffc:	e13ffc17 	ldw	r4,-16(fp)
  819000:	103ee83a 	callr	r2
  819004:	00000106 	br	81900c <open+0x108>
  819008:	0005883a 	mov	r2,zero
  81900c:	e0bffa15 	stw	r2,-24(fp)
  819010:	00000206 	br	81901c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  819014:	00bffb44 	movi	r2,-19
  819018:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81901c:	e0bffa17 	ldw	r2,-24(fp)
  819020:	1000090e 	bge	r2,zero,819048 <open+0x144>
  {
    alt_release_fd (index);  
  819024:	e13ff917 	ldw	r4,-28(fp)
  819028:	080df180 	call	80df18 <alt_release_fd>
    ALT_ERRNO = -status;
  81902c:	0818ddc0 	call	818ddc <alt_get_errno>
  819030:	1007883a 	mov	r3,r2
  819034:	e0bffa17 	ldw	r2,-24(fp)
  819038:	0085c83a 	sub	r2,zero,r2
  81903c:	18800015 	stw	r2,0(r3)
    return -1;
  819040:	00bfffc4 	movi	r2,-1
  819044:	00000106 	br	81904c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  819048:	e0bff917 	ldw	r2,-28(fp)
}
  81904c:	e037883a 	mov	sp,fp
  819050:	dfc00117 	ldw	ra,4(sp)
  819054:	df000017 	ldw	fp,0(sp)
  819058:	dec00204 	addi	sp,sp,8
  81905c:	f800283a 	ret

00819060 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  819060:	defffa04 	addi	sp,sp,-24
  819064:	df000515 	stw	fp,20(sp)
  819068:	df000504 	addi	fp,sp,20
  81906c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819070:	0005303a 	rdctl	r2,status
  819074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819078:	e0fffc17 	ldw	r3,-16(fp)
  81907c:	00bfff84 	movi	r2,-2
  819080:	1884703a 	and	r2,r3,r2
  819084:	1001703a 	wrctl	status,r2
  
  return context;
  819088:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81908c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  819090:	e0bfff17 	ldw	r2,-4(fp)
  819094:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  819098:	e0bffd17 	ldw	r2,-12(fp)
  81909c:	10800017 	ldw	r2,0(r2)
  8190a0:	e0fffd17 	ldw	r3,-12(fp)
  8190a4:	18c00117 	ldw	r3,4(r3)
  8190a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8190ac:	e0bffd17 	ldw	r2,-12(fp)
  8190b0:	10800117 	ldw	r2,4(r2)
  8190b4:	e0fffd17 	ldw	r3,-12(fp)
  8190b8:	18c00017 	ldw	r3,0(r3)
  8190bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8190c0:	e0bffd17 	ldw	r2,-12(fp)
  8190c4:	e0fffd17 	ldw	r3,-12(fp)
  8190c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8190cc:	e0bffd17 	ldw	r2,-12(fp)
  8190d0:	e0fffd17 	ldw	r3,-12(fp)
  8190d4:	10c00015 	stw	r3,0(r2)
  8190d8:	e0bffb17 	ldw	r2,-20(fp)
  8190dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8190e0:	e0bffe17 	ldw	r2,-8(fp)
  8190e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8190e8:	0001883a 	nop
  8190ec:	e037883a 	mov	sp,fp
  8190f0:	df000017 	ldw	fp,0(sp)
  8190f4:	dec00104 	addi	sp,sp,4
  8190f8:	f800283a 	ret

008190fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8190fc:	defffb04 	addi	sp,sp,-20
  819100:	dfc00415 	stw	ra,16(sp)
  819104:	df000315 	stw	fp,12(sp)
  819108:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81910c:	d0a04b17 	ldw	r2,-32468(gp)
  819110:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  819114:	d0a07917 	ldw	r2,-32284(gp)
  819118:	10800044 	addi	r2,r2,1
  81911c:	d0a07915 	stw	r2,-32284(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  819120:	00002e06 	br	8191dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  819124:	e0bffd17 	ldw	r2,-12(fp)
  819128:	10800017 	ldw	r2,0(r2)
  81912c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  819130:	e0bffd17 	ldw	r2,-12(fp)
  819134:	10800403 	ldbu	r2,16(r2)
  819138:	10803fcc 	andi	r2,r2,255
  81913c:	10000426 	beq	r2,zero,819150 <alt_tick+0x54>
  819140:	d0a07917 	ldw	r2,-32284(gp)
  819144:	1000021e 	bne	r2,zero,819150 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  819148:	e0bffd17 	ldw	r2,-12(fp)
  81914c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  819150:	e0bffd17 	ldw	r2,-12(fp)
  819154:	10800217 	ldw	r2,8(r2)
  819158:	d0e07917 	ldw	r3,-32284(gp)
  81915c:	18801d36 	bltu	r3,r2,8191d4 <alt_tick+0xd8>
  819160:	e0bffd17 	ldw	r2,-12(fp)
  819164:	10800403 	ldbu	r2,16(r2)
  819168:	10803fcc 	andi	r2,r2,255
  81916c:	1000191e 	bne	r2,zero,8191d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  819170:	e0bffd17 	ldw	r2,-12(fp)
  819174:	10800317 	ldw	r2,12(r2)
  819178:	e0fffd17 	ldw	r3,-12(fp)
  81917c:	18c00517 	ldw	r3,20(r3)
  819180:	1809883a 	mov	r4,r3
  819184:	103ee83a 	callr	r2
  819188:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81918c:	e0bfff17 	ldw	r2,-4(fp)
  819190:	1000031e 	bne	r2,zero,8191a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  819194:	e13ffd17 	ldw	r4,-12(fp)
  819198:	08190600 	call	819060 <alt_alarm_stop>
  81919c:	00000d06 	br	8191d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8191a0:	e0bffd17 	ldw	r2,-12(fp)
  8191a4:	10c00217 	ldw	r3,8(r2)
  8191a8:	e0bfff17 	ldw	r2,-4(fp)
  8191ac:	1887883a 	add	r3,r3,r2
  8191b0:	e0bffd17 	ldw	r2,-12(fp)
  8191b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8191b8:	e0bffd17 	ldw	r2,-12(fp)
  8191bc:	10c00217 	ldw	r3,8(r2)
  8191c0:	d0a07917 	ldw	r2,-32284(gp)
  8191c4:	1880032e 	bgeu	r3,r2,8191d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8191c8:	e0bffd17 	ldw	r2,-12(fp)
  8191cc:	00c00044 	movi	r3,1
  8191d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8191d4:	e0bffe17 	ldw	r2,-8(fp)
  8191d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8191dc:	e0fffd17 	ldw	r3,-12(fp)
  8191e0:	d0a04b04 	addi	r2,gp,-32468
  8191e4:	18bfcf1e 	bne	r3,r2,819124 <__alt_mem_epcs_flash_controller_0+0xff810124>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8191e8:	080f12c0 	call	80f12c <OSTimeTick>
}
  8191ec:	0001883a 	nop
  8191f0:	e037883a 	mov	sp,fp
  8191f4:	dfc00117 	ldw	ra,4(sp)
  8191f8:	df000017 	ldw	fp,0(sp)
  8191fc:	dec00204 	addi	sp,sp,8
  819200:	f800283a 	ret

00819204 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  819204:	deffff04 	addi	sp,sp,-4
  819208:	df000015 	stw	fp,0(sp)
  81920c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  819210:	000170fa 	wrctl	ienable,zero
}
  819214:	0001883a 	nop
  819218:	e037883a 	mov	sp,fp
  81921c:	df000017 	ldw	fp,0(sp)
  819220:	dec00104 	addi	sp,sp,4
  819224:	f800283a 	ret

00819228 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  819228:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81922c:	d0e01d17 	ldw	r3,-32652(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  819230:	d1207217 	ldw	r4,-32312(gp)

      stw ra,  0(sp)
  819234:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  819238:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81923c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  819240:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  819244:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  819248:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81924c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  819250:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  819254:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  819258:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81925c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  819260:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  819264:	081949c0 	call	81949c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  819268:	d1206d17 	ldw	r4,-32332(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81926c:	d1606507 	ldb	r5,-32364(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  819270:	d1207215 	stw	r4,-32312(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  819274:	d1606545 	stb	r5,-32363(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  819278:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81927c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  819280:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  819284:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  819288:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81928c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  819290:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  819294:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  819298:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81929c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  8192a0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8192a4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8192a8:	d0e01d15 	stw	r3,-32652(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8192ac:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8192b0:	f800283a 	ret

008192b4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8192b4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8192b8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8192bc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  8192c0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8192c4:	081949c0 	call	81949c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  8192c8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  8192cc:	d4a06345 	stb	r18,-32371(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  8192d0:	003fe506 	br	819268 <__alt_mem_epcs_flash_controller_0+0xff810268>

008192d4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  8192d4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  8192d8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8192dc:	10800054 	ori	r2,r2,1
      wrctl status, r2
  8192e0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  8192e4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  8192e8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  8192ec:	dec00204 	addi	sp,sp,8

      callr r2
  8192f0:	103ee83a 	callr	r2

      nop
  8192f4:	0001883a 	nop

008192f8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  8192f8:	defff704 	addi	sp,sp,-36
  8192fc:	dfc00815 	stw	ra,32(sp)
  819300:	df000715 	stw	fp,28(sp)
  819304:	df000704 	addi	fp,sp,28
  819308:	e13ffc15 	stw	r4,-16(fp)
  81930c:	e17ffd15 	stw	r5,-12(fp)
  819310:	e1bffe15 	stw	r6,-8(fp)
  819314:	3805883a 	mov	r2,r7
  819318:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81931c:	e0fffe17 	ldw	r3,-8(fp)
  819320:	00bfff04 	movi	r2,-4
  819324:	1884703a 	and	r2,r3,r2
  819328:	10bef704 	addi	r2,r2,-1060
  81932c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  819330:	01810904 	movi	r6,1060
  819334:	000b883a 	mov	r5,zero
  819338:	e13ff917 	ldw	r4,-28(fp)
  81933c:	08065a00 	call	8065a0 <memset>
  819340:	e0bff917 	ldw	r2,-28(fp)
  819344:	10c0bb04 	addi	r3,r2,748
  819348:	e0bff917 	ldw	r2,-28(fp)
  81934c:	10c00115 	stw	r3,4(r2)
  819350:	e0bff917 	ldw	r2,-28(fp)
  819354:	10c0d504 	addi	r3,r2,852
  819358:	e0bff917 	ldw	r2,-28(fp)
  81935c:	10c00215 	stw	r3,8(r2)
  819360:	e0bff917 	ldw	r2,-28(fp)
  819364:	10c0ef04 	addi	r3,r2,956
  819368:	e0bff917 	ldw	r2,-28(fp)
  81936c:	10c00315 	stw	r3,12(r2)
  819370:	e0fff917 	ldw	r3,-28(fp)
  819374:	008020b4 	movhi	r2,130
  819378:	10a91104 	addi	r2,r2,-23484
  81937c:	18800d15 	stw	r2,52(r3)
  819380:	e0bff917 	ldw	r2,-28(fp)
  819384:	00c00044 	movi	r3,1
  819388:	10c02915 	stw	r3,164(r2)
  81938c:	10002a15 	stw	zero,168(r2)
  819390:	e0bff917 	ldw	r2,-28(fp)
  819394:	00ccc384 	movi	r3,13070
  819398:	10c02b0d 	sth	r3,172(r2)
  81939c:	e0bff917 	ldw	r2,-28(fp)
  8193a0:	00eaf344 	movi	r3,-21555
  8193a4:	10c02b8d 	sth	r3,174(r2)
  8193a8:	e0bff917 	ldw	r2,-28(fp)
  8193ac:	00c48d04 	movi	r3,4660
  8193b0:	10c02c0d 	sth	r3,176(r2)
  8193b4:	e0bff917 	ldw	r2,-28(fp)
  8193b8:	00f99b44 	movi	r3,-6547
  8193bc:	10c02c8d 	sth	r3,178(r2)
  8193c0:	e0bff917 	ldw	r2,-28(fp)
  8193c4:	00f7bb04 	movi	r3,-8468
  8193c8:	10c02d0d 	sth	r3,180(r2)
  8193cc:	e0bff917 	ldw	r2,-28(fp)
  8193d0:	00c00144 	movi	r3,5
  8193d4:	10c02d8d 	sth	r3,182(r2)
  8193d8:	e0bff917 	ldw	r2,-28(fp)
  8193dc:	00c002c4 	movi	r3,11
  8193e0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  8193e4:	e0bff917 	ldw	r2,-28(fp)
  8193e8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  8193ec:	e0bffa17 	ldw	r2,-24(fp)
  8193f0:	10bff304 	addi	r2,r2,-52
  8193f4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  8193f8:	e0bffb17 	ldw	r2,-20(fp)
  8193fc:	10800c04 	addi	r2,r2,48
  819400:	e0fffc17 	ldw	r3,-16(fp)
  819404:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  819408:	e0bffb17 	ldw	r2,-20(fp)
  81940c:	10800b04 	addi	r2,r2,44
  819410:	e0fffd17 	ldw	r3,-12(fp)
  819414:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  819418:	e0bffb17 	ldw	r2,-20(fp)
  81941c:	10800a04 	addi	r2,r2,40
  819420:	e0fff917 	ldw	r3,-28(fp)
  819424:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  819428:	008020b4 	movhi	r2,130
  81942c:	10a4b504 	addi	r2,r2,-27948
  819430:	10c00104 	addi	r3,r2,4
  819434:	e0bffb17 	ldw	r2,-20(fp)
  819438:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81943c:	e0bffb17 	ldw	r2,-20(fp)
}
  819440:	e037883a 	mov	sp,fp
  819444:	dfc00117 	ldw	ra,4(sp)
  819448:	df000017 	ldw	fp,0(sp)
  81944c:	dec00204 	addi	sp,sp,8
  819450:	f800283a 	ret

00819454 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  819454:	defffe04 	addi	sp,sp,-8
  819458:	df000115 	stw	fp,4(sp)
  81945c:	df000104 	addi	fp,sp,4
  819460:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  819464:	0001883a 	nop
  819468:	e037883a 	mov	sp,fp
  81946c:	df000017 	ldw	fp,0(sp)
  819470:	dec00104 	addi	sp,sp,4
  819474:	f800283a 	ret

00819478 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  819478:	defffe04 	addi	sp,sp,-8
  81947c:	df000115 	stw	fp,4(sp)
  819480:	df000104 	addi	fp,sp,4
  819484:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  819488:	0001883a 	nop
  81948c:	e037883a 	mov	sp,fp
  819490:	df000017 	ldw	fp,0(sp)
  819494:	dec00104 	addi	sp,sp,4
  819498:	f800283a 	ret

0081949c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81949c:	deffff04 	addi	sp,sp,-4
  8194a0:	df000015 	stw	fp,0(sp)
  8194a4:	d839883a 	mov	fp,sp
}
  8194a8:	0001883a 	nop
  8194ac:	e037883a 	mov	sp,fp
  8194b0:	df000017 	ldw	fp,0(sp)
  8194b4:	dec00104 	addi	sp,sp,4
  8194b8:	f800283a 	ret

008194bc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  8194bc:	deffff04 	addi	sp,sp,-4
  8194c0:	df000015 	stw	fp,0(sp)
  8194c4:	d839883a 	mov	fp,sp
}
  8194c8:	0001883a 	nop
  8194cc:	e037883a 	mov	sp,fp
  8194d0:	df000017 	ldw	fp,0(sp)
  8194d4:	dec00104 	addi	sp,sp,4
  8194d8:	f800283a 	ret

008194dc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  8194dc:	deffff04 	addi	sp,sp,-4
  8194e0:	df000015 	stw	fp,0(sp)
  8194e4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  8194e8:	0001883a 	nop
  8194ec:	e037883a 	mov	sp,fp
  8194f0:	df000017 	ldw	fp,0(sp)
  8194f4:	dec00104 	addi	sp,sp,4
  8194f8:	f800283a 	ret

008194fc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  8194fc:	deffff04 	addi	sp,sp,-4
  819500:	df000015 	stw	fp,0(sp)
  819504:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  819508:	0001883a 	nop
  81950c:	e037883a 	mov	sp,fp
  819510:	df000017 	ldw	fp,0(sp)
  819514:	dec00104 	addi	sp,sp,4
  819518:	f800283a 	ret

0081951c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81951c:	deffff04 	addi	sp,sp,-4
  819520:	df000015 	stw	fp,0(sp)
  819524:	d839883a 	mov	fp,sp
}
  819528:	0001883a 	nop
  81952c:	e037883a 	mov	sp,fp
  819530:	df000017 	ldw	fp,0(sp)
  819534:	dec00104 	addi	sp,sp,4
  819538:	f800283a 	ret

0081953c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81953c:	deffff04 	addi	sp,sp,-4
  819540:	df000015 	stw	fp,0(sp)
  819544:	d839883a 	mov	fp,sp
}
  819548:	0001883a 	nop
  81954c:	e037883a 	mov	sp,fp
  819550:	df000017 	ldw	fp,0(sp)
  819554:	dec00104 	addi	sp,sp,4
  819558:	f800283a 	ret

0081955c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81955c:	defffe04 	addi	sp,sp,-8
  819560:	df000115 	stw	fp,4(sp)
  819564:	df000104 	addi	fp,sp,4
  819568:	e13fff15 	stw	r4,-4(fp)
}
  81956c:	0001883a 	nop
  819570:	e037883a 	mov	sp,fp
  819574:	df000017 	ldw	fp,0(sp)
  819578:	dec00104 	addi	sp,sp,4
  81957c:	f800283a 	ret

00819580 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  819580:	defff404 	addi	sp,sp,-48
  819584:	df000b15 	stw	fp,44(sp)
  819588:	df000b04 	addi	fp,sp,44
  81958c:	e13ffc15 	stw	r4,-16(fp)
  819590:	e17ffd15 	stw	r5,-12(fp)
  819594:	e1bffe15 	stw	r6,-8(fp)
  819598:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  81959c:	e0ffff17 	ldw	r3,-4(fp)
  8195a0:	e0bffe17 	ldw	r2,-8(fp)
  8195a4:	1885883a 	add	r2,r3,r2
  8195a8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  8195ac:	e0c00217 	ldw	r3,8(fp)
  8195b0:	e0800117 	ldw	r2,4(fp)
  8195b4:	1885883a 	add	r2,r3,r2
  8195b8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  8195bc:	e0800117 	ldw	r2,4(fp)
  8195c0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  8195c4:	e0bffe17 	ldw	r2,-8(fp)
  8195c8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  8195cc:	00800044 	movi	r2,1
  8195d0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  8195d4:	e0bffc17 	ldw	r2,-16(fp)
  8195d8:	10800504 	addi	r2,r2,20
  8195dc:	1009883a 	mov	r4,r2
  8195e0:	00c00044 	movi	r3,1
  8195e4:	e0bffd17 	ldw	r2,-12(fp)
  8195e8:	1884983a 	sll	r2,r3,r2
  8195ec:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  8195f0:	e0800317 	ldw	r2,12(fp)
  8195f4:	1080008c 	andi	r2,r2,2
  8195f8:	1000051e 	bne	r2,zero,819610 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  8195fc:	e0bffc17 	ldw	r2,-16(fp)
  819600:	10800304 	addi	r2,r2,12
  819604:	1007883a 	mov	r3,r2
  819608:	00810004 	movi	r2,1024
  81960c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  819610:	e0bffc17 	ldw	r2,-16(fp)
  819614:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  819618:	e0bffc17 	ldw	r2,-16(fp)
  81961c:	10800204 	addi	r2,r2,8
  819620:	10800037 	ldwio	r2,0(r2)
  819624:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  819628:	e0bffa17 	ldw	r2,-24(fp)
  81962c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  819630:	10000226 	beq	r2,zero,81963c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  819634:	e0bff717 	ldw	r2,-36(fp)
  819638:	1000031e 	bne	r2,zero,819648 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  81963c:	e0bffa17 	ldw	r2,-24(fp)
  819640:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  819644:	103ff426 	beq	r2,zero,819618 <__alt_mem_epcs_flash_controller_0+0xff810618>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  819648:	e0bffa17 	ldw	r2,-24(fp)
  81964c:	1080100c 	andi	r2,r2,64
  819650:	10001e26 	beq	r2,zero,8196cc <alt_avalon_spi_command+0x14c>
  819654:	e0bff717 	ldw	r2,-36(fp)
  819658:	00801c0e 	bge	zero,r2,8196cc <alt_avalon_spi_command+0x14c>
    {
      credits--;
  81965c:	e0bff717 	ldw	r2,-36(fp)
  819660:	10bfffc4 	addi	r2,r2,-1
  819664:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  819668:	e0ffff17 	ldw	r3,-4(fp)
  81966c:	e0bff817 	ldw	r2,-32(fp)
  819670:	18800a2e 	bgeu	r3,r2,81969c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  819674:	e0bffc17 	ldw	r2,-16(fp)
  819678:	10800104 	addi	r2,r2,4
  81967c:	1009883a 	mov	r4,r2
  819680:	e0bfff17 	ldw	r2,-4(fp)
  819684:	10c00044 	addi	r3,r2,1
  819688:	e0ffff15 	stw	r3,-4(fp)
  81968c:	10800003 	ldbu	r2,0(r2)
  819690:	10803fcc 	andi	r2,r2,255
  819694:	20800035 	stwio	r2,0(r4)
  819698:	00000c06 	br	8196cc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  81969c:	e0bff517 	ldw	r2,-44(fp)
  8196a0:	10000826 	beq	r2,zero,8196c4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  8196a4:	e0bff517 	ldw	r2,-44(fp)
  8196a8:	10bfffc4 	addi	r2,r2,-1
  8196ac:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  8196b0:	e0bffc17 	ldw	r2,-16(fp)
  8196b4:	10800104 	addi	r2,r2,4
  8196b8:	0007883a 	mov	r3,zero
  8196bc:	10c00035 	stwio	r3,0(r2)
  8196c0:	00000206 	br	8196cc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  8196c4:	00bf0004 	movi	r2,-1024
  8196c8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  8196cc:	e0bffa17 	ldw	r2,-24(fp)
  8196d0:	1080200c 	andi	r2,r2,128
  8196d4:	103fd026 	beq	r2,zero,819618 <__alt_mem_epcs_flash_controller_0+0xff810618>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  8196d8:	e0bffc17 	ldw	r2,-16(fp)
  8196dc:	10800037 	ldwio	r2,0(r2)
  8196e0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  8196e4:	e0bff617 	ldw	r2,-40(fp)
  8196e8:	10000426 	beq	r2,zero,8196fc <alt_avalon_spi_command+0x17c>
        read_ignore--;
  8196ec:	e0bff617 	ldw	r2,-40(fp)
  8196f0:	10bfffc4 	addi	r2,r2,-1
  8196f4:	e0bff615 	stw	r2,-40(fp)
  8196f8:	00000506 	br	819710 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  8196fc:	e0800217 	ldw	r2,8(fp)
  819700:	10c00044 	addi	r3,r2,1
  819704:	e0c00215 	stw	r3,8(fp)
  819708:	e0fffb17 	ldw	r3,-20(fp)
  81970c:	10c00005 	stb	r3,0(r2)
      credits++;
  819710:	e0bff717 	ldw	r2,-36(fp)
  819714:	10800044 	addi	r2,r2,1
  819718:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  81971c:	e0bff617 	ldw	r2,-40(fp)
  819720:	103fbd1e 	bne	r2,zero,819618 <__alt_mem_epcs_flash_controller_0+0xff810618>
  819724:	e0c00217 	ldw	r3,8(fp)
  819728:	e0bff917 	ldw	r2,-28(fp)
  81972c:	18bfba1e 	bne	r3,r2,819618 <__alt_mem_epcs_flash_controller_0+0xff810618>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  819730:	e0bffc17 	ldw	r2,-16(fp)
  819734:	10800204 	addi	r2,r2,8
  819738:	10800037 	ldwio	r2,0(r2)
  81973c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  819740:	e0bffa17 	ldw	r2,-24(fp)
  819744:	1080080c 	andi	r2,r2,32
  819748:	103ff926 	beq	r2,zero,819730 <__alt_mem_epcs_flash_controller_0+0xff810730>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  81974c:	e0800317 	ldw	r2,12(fp)
  819750:	1080004c 	andi	r2,r2,1
  819754:	1000041e 	bne	r2,zero,819768 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  819758:	e0bffc17 	ldw	r2,-16(fp)
  81975c:	10800304 	addi	r2,r2,12
  819760:	0007883a 	mov	r3,zero
  819764:	10c00035 	stwio	r3,0(r2)

  return read_length;
  819768:	e0800117 	ldw	r2,4(fp)
}
  81976c:	e037883a 	mov	sp,fp
  819770:	df000017 	ldw	fp,0(sp)
  819774:	dec00104 	addi	sp,sp,4
  819778:	f800283a 	ret

0081977c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81977c:	defffa04 	addi	sp,sp,-24
  819780:	dfc00515 	stw	ra,20(sp)
  819784:	df000415 	stw	fp,16(sp)
  819788:	df000404 	addi	fp,sp,16
  81978c:	e13ffe15 	stw	r4,-8(fp)
  819790:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  819794:	e0bfff17 	ldw	r2,-4(fp)
  819798:	10800017 	ldw	r2,0(r2)
  81979c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8197a0:	e13ffe17 	ldw	r4,-8(fp)
  8197a4:	08008480 	call	800848 <strlen>
  8197a8:	10800044 	addi	r2,r2,1
  8197ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8197b0:	00000d06 	br	8197e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8197b4:	e0bffc17 	ldw	r2,-16(fp)
  8197b8:	10800217 	ldw	r2,8(r2)
  8197bc:	e0fffd17 	ldw	r3,-12(fp)
  8197c0:	180d883a 	mov	r6,r3
  8197c4:	e17ffe17 	ldw	r5,-8(fp)
  8197c8:	1009883a 	mov	r4,r2
  8197cc:	0819a540 	call	819a54 <memcmp>
  8197d0:	1000021e 	bne	r2,zero,8197dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8197d4:	e0bffc17 	ldw	r2,-16(fp)
  8197d8:	00000706 	br	8197f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8197dc:	e0bffc17 	ldw	r2,-16(fp)
  8197e0:	10800017 	ldw	r2,0(r2)
  8197e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8197e8:	e0fffc17 	ldw	r3,-16(fp)
  8197ec:	e0bfff17 	ldw	r2,-4(fp)
  8197f0:	18bff01e 	bne	r3,r2,8197b4 <__alt_mem_epcs_flash_controller_0+0xff8107b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8197f4:	0005883a 	mov	r2,zero
}
  8197f8:	e037883a 	mov	sp,fp
  8197fc:	dfc00117 	ldw	ra,4(sp)
  819800:	df000017 	ldw	fp,0(sp)
  819804:	dec00204 	addi	sp,sp,8
  819808:	f800283a 	ret

0081980c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81980c:	defffb04 	addi	sp,sp,-20
  819810:	dfc00415 	stw	ra,16(sp)
  819814:	df000315 	stw	fp,12(sp)
  819818:	df000304 	addi	fp,sp,12
  81981c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  819820:	d0a02217 	ldw	r2,-32632(gp)
  819824:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  819828:	00003106 	br	8198f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  81982c:	e0bffd17 	ldw	r2,-12(fp)
  819830:	10800217 	ldw	r2,8(r2)
  819834:	1009883a 	mov	r4,r2
  819838:	08008480 	call	800848 <strlen>
  81983c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  819840:	e0bffd17 	ldw	r2,-12(fp)
  819844:	10c00217 	ldw	r3,8(r2)
  819848:	e0bffe17 	ldw	r2,-8(fp)
  81984c:	10bfffc4 	addi	r2,r2,-1
  819850:	1885883a 	add	r2,r3,r2
  819854:	10800003 	ldbu	r2,0(r2)
  819858:	10803fcc 	andi	r2,r2,255
  81985c:	1080201c 	xori	r2,r2,128
  819860:	10bfe004 	addi	r2,r2,-128
  819864:	10800bd8 	cmpnei	r2,r2,47
  819868:	1000031e 	bne	r2,zero,819878 <alt_find_file+0x6c>
    {
      len -= 1;
  81986c:	e0bffe17 	ldw	r2,-8(fp)
  819870:	10bfffc4 	addi	r2,r2,-1
  819874:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  819878:	e0bffe17 	ldw	r2,-8(fp)
  81987c:	e0ffff17 	ldw	r3,-4(fp)
  819880:	1885883a 	add	r2,r3,r2
  819884:	10800003 	ldbu	r2,0(r2)
  819888:	10803fcc 	andi	r2,r2,255
  81988c:	1080201c 	xori	r2,r2,128
  819890:	10bfe004 	addi	r2,r2,-128
  819894:	10800be0 	cmpeqi	r2,r2,47
  819898:	1000081e 	bne	r2,zero,8198bc <alt_find_file+0xb0>
  81989c:	e0bffe17 	ldw	r2,-8(fp)
  8198a0:	e0ffff17 	ldw	r3,-4(fp)
  8198a4:	1885883a 	add	r2,r3,r2
  8198a8:	10800003 	ldbu	r2,0(r2)
  8198ac:	10803fcc 	andi	r2,r2,255
  8198b0:	1080201c 	xori	r2,r2,128
  8198b4:	10bfe004 	addi	r2,r2,-128
  8198b8:	10000a1e 	bne	r2,zero,8198e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8198bc:	e0bffd17 	ldw	r2,-12(fp)
  8198c0:	10800217 	ldw	r2,8(r2)
  8198c4:	e0fffe17 	ldw	r3,-8(fp)
  8198c8:	180d883a 	mov	r6,r3
  8198cc:	e17fff17 	ldw	r5,-4(fp)
  8198d0:	1009883a 	mov	r4,r2
  8198d4:	0819a540 	call	819a54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8198d8:	1000021e 	bne	r2,zero,8198e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8198dc:	e0bffd17 	ldw	r2,-12(fp)
  8198e0:	00000706 	br	819900 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8198e4:	e0bffd17 	ldw	r2,-12(fp)
  8198e8:	10800017 	ldw	r2,0(r2)
  8198ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8198f0:	e0fffd17 	ldw	r3,-12(fp)
  8198f4:	d0a02204 	addi	r2,gp,-32632
  8198f8:	18bfcc1e 	bne	r3,r2,81982c <__alt_mem_epcs_flash_controller_0+0xff81082c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8198fc:	0005883a 	mov	r2,zero
}
  819900:	e037883a 	mov	sp,fp
  819904:	dfc00117 	ldw	ra,4(sp)
  819908:	df000017 	ldw	fp,0(sp)
  81990c:	dec00204 	addi	sp,sp,8
  819910:	f800283a 	ret

00819914 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  819914:	defff804 	addi	sp,sp,-32
  819918:	dfc00715 	stw	ra,28(sp)
  81991c:	df000615 	stw	fp,24(sp)
  819920:	dc000515 	stw	r16,20(sp)
  819924:	df000604 	addi	fp,sp,24
  819928:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  81992c:	00bffa04 	movi	r2,-24
  819930:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  819934:	d0a05a17 	ldw	r2,-32408(gp)
  819938:	e0bffc15 	stw	r2,-16(fp)
  81993c:	e03ffd0d 	sth	zero,-12(fp)
  819940:	e0bffd0b 	ldhu	r2,-12(fp)
  819944:	e0fffd84 	addi	r3,fp,-10
  819948:	180d883a 	mov	r6,r3
  81994c:	100b883a 	mov	r5,r2
  819950:	e13ffc17 	ldw	r4,-16(fp)
  819954:	081397c0 	call	81397c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  819958:	e03ffa15 	stw	zero,-24(fp)
  81995c:	00001d06 	br	8199d4 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  819960:	040020b4 	movhi	r16,130
  819964:	842b4504 	addi	r16,r16,-21228
  819968:	e0bffa17 	ldw	r2,-24(fp)
  81996c:	01400304 	movi	r5,12
  819970:	1009883a 	mov	r4,r2
  819974:	080ad7c0 	call	80ad7c <__mulsi3>
  819978:	8085883a 	add	r2,r16,r2
  81997c:	10800017 	ldw	r2,0(r2)
  819980:	1000111e 	bne	r2,zero,8199c8 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  819984:	040020b4 	movhi	r16,130
  819988:	842b4504 	addi	r16,r16,-21228
  81998c:	e0bffa17 	ldw	r2,-24(fp)
  819990:	01400304 	movi	r5,12
  819994:	1009883a 	mov	r4,r2
  819998:	080ad7c0 	call	80ad7c <__mulsi3>
  81999c:	8085883a 	add	r2,r16,r2
  8199a0:	e0fffe17 	ldw	r3,-8(fp)
  8199a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8199a8:	d0e02617 	ldw	r3,-32616(gp)
  8199ac:	e0bffa17 	ldw	r2,-24(fp)
  8199b0:	1880020e 	bge	r3,r2,8199bc <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  8199b4:	e0bffa17 	ldw	r2,-24(fp)
  8199b8:	d0a02615 	stw	r2,-32616(gp)
      }
      rc = i;
  8199bc:	e0bffa17 	ldw	r2,-24(fp)
  8199c0:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  8199c4:	00000606 	br	8199e0 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8199c8:	e0bffa17 	ldw	r2,-24(fp)
  8199cc:	10800044 	addi	r2,r2,1
  8199d0:	e0bffa15 	stw	r2,-24(fp)
  8199d4:	e0bffa17 	ldw	r2,-24(fp)
  8199d8:	10800810 	cmplti	r2,r2,32
  8199dc:	103fe01e 	bne	r2,zero,819960 <__alt_mem_epcs_flash_controller_0+0xff810960>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  8199e0:	d0a05a17 	ldw	r2,-32408(gp)
  8199e4:	1009883a 	mov	r4,r2
  8199e8:	0813cf40 	call	813cf4 <OSSemPost>

  return rc;
  8199ec:	e0bffb17 	ldw	r2,-20(fp)
}
  8199f0:	e6ffff04 	addi	sp,fp,-4
  8199f4:	dfc00217 	ldw	ra,8(sp)
  8199f8:	df000117 	ldw	fp,4(sp)
  8199fc:	dc000017 	ldw	r16,0(sp)
  819a00:	dec00304 	addi	sp,sp,12
  819a04:	f800283a 	ret

00819a08 <atexit>:
  819a08:	200b883a 	mov	r5,r4
  819a0c:	000f883a 	mov	r7,zero
  819a10:	000d883a 	mov	r6,zero
  819a14:	0009883a 	mov	r4,zero
  819a18:	0819ad01 	jmpi	819ad0 <__register_exitproc>

00819a1c <exit>:
  819a1c:	defffe04 	addi	sp,sp,-8
  819a20:	000b883a 	mov	r5,zero
  819a24:	dc000015 	stw	r16,0(sp)
  819a28:	dfc00115 	stw	ra,4(sp)
  819a2c:	2021883a 	mov	r16,r4
  819a30:	0819be80 	call	819be8 <__call_exitprocs>
  819a34:	008020b4 	movhi	r2,130
  819a38:	10b07704 	addi	r2,r2,-15908
  819a3c:	11000017 	ldw	r4,0(r2)
  819a40:	20800f17 	ldw	r2,60(r4)
  819a44:	10000126 	beq	r2,zero,819a4c <exit+0x30>
  819a48:	103ee83a 	callr	r2
  819a4c:	8009883a 	mov	r4,r16
  819a50:	0819d680 	call	819d68 <_exit>

00819a54 <memcmp>:
  819a54:	01c000c4 	movi	r7,3
  819a58:	3980192e 	bgeu	r7,r6,819ac0 <memcmp+0x6c>
  819a5c:	2144b03a 	or	r2,r4,r5
  819a60:	11c4703a 	and	r2,r2,r7
  819a64:	10000f26 	beq	r2,zero,819aa4 <memcmp+0x50>
  819a68:	20800003 	ldbu	r2,0(r4)
  819a6c:	28c00003 	ldbu	r3,0(r5)
  819a70:	10c0151e 	bne	r2,r3,819ac8 <memcmp+0x74>
  819a74:	31bfff84 	addi	r6,r6,-2
  819a78:	01ffffc4 	movi	r7,-1
  819a7c:	00000406 	br	819a90 <memcmp+0x3c>
  819a80:	20800003 	ldbu	r2,0(r4)
  819a84:	28c00003 	ldbu	r3,0(r5)
  819a88:	31bfffc4 	addi	r6,r6,-1
  819a8c:	10c00e1e 	bne	r2,r3,819ac8 <memcmp+0x74>
  819a90:	21000044 	addi	r4,r4,1
  819a94:	29400044 	addi	r5,r5,1
  819a98:	31fff91e 	bne	r6,r7,819a80 <__alt_mem_epcs_flash_controller_0+0xff810a80>
  819a9c:	0005883a 	mov	r2,zero
  819aa0:	f800283a 	ret
  819aa4:	20c00017 	ldw	r3,0(r4)
  819aa8:	28800017 	ldw	r2,0(r5)
  819aac:	18bfee1e 	bne	r3,r2,819a68 <__alt_mem_epcs_flash_controller_0+0xff810a68>
  819ab0:	31bfff04 	addi	r6,r6,-4
  819ab4:	21000104 	addi	r4,r4,4
  819ab8:	29400104 	addi	r5,r5,4
  819abc:	39bff936 	bltu	r7,r6,819aa4 <__alt_mem_epcs_flash_controller_0+0xff810aa4>
  819ac0:	303fe91e 	bne	r6,zero,819a68 <__alt_mem_epcs_flash_controller_0+0xff810a68>
  819ac4:	003ff506 	br	819a9c <__alt_mem_epcs_flash_controller_0+0xff810a9c>
  819ac8:	10c5c83a 	sub	r2,r2,r3
  819acc:	f800283a 	ret

00819ad0 <__register_exitproc>:
  819ad0:	defffa04 	addi	sp,sp,-24
  819ad4:	dc000315 	stw	r16,12(sp)
  819ad8:	040020b4 	movhi	r16,130
  819adc:	84307704 	addi	r16,r16,-15908
  819ae0:	80c00017 	ldw	r3,0(r16)
  819ae4:	dc400415 	stw	r17,16(sp)
  819ae8:	dfc00515 	stw	ra,20(sp)
  819aec:	18805217 	ldw	r2,328(r3)
  819af0:	2023883a 	mov	r17,r4
  819af4:	10003726 	beq	r2,zero,819bd4 <__register_exitproc+0x104>
  819af8:	10c00117 	ldw	r3,4(r2)
  819afc:	010007c4 	movi	r4,31
  819b00:	20c00e16 	blt	r4,r3,819b3c <__register_exitproc+0x6c>
  819b04:	1a000044 	addi	r8,r3,1
  819b08:	8800221e 	bne	r17,zero,819b94 <__register_exitproc+0xc4>
  819b0c:	18c00084 	addi	r3,r3,2
  819b10:	18c7883a 	add	r3,r3,r3
  819b14:	18c7883a 	add	r3,r3,r3
  819b18:	12000115 	stw	r8,4(r2)
  819b1c:	10c7883a 	add	r3,r2,r3
  819b20:	19400015 	stw	r5,0(r3)
  819b24:	0005883a 	mov	r2,zero
  819b28:	dfc00517 	ldw	ra,20(sp)
  819b2c:	dc400417 	ldw	r17,16(sp)
  819b30:	dc000317 	ldw	r16,12(sp)
  819b34:	dec00604 	addi	sp,sp,24
  819b38:	f800283a 	ret
  819b3c:	00800034 	movhi	r2,0
  819b40:	10800004 	addi	r2,r2,0
  819b44:	10002626 	beq	r2,zero,819be0 <__register_exitproc+0x110>
  819b48:	01006404 	movi	r4,400
  819b4c:	d9400015 	stw	r5,0(sp)
  819b50:	d9800115 	stw	r6,4(sp)
  819b54:	d9c00215 	stw	r7,8(sp)
  819b58:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  819b5c:	d9400017 	ldw	r5,0(sp)
  819b60:	d9800117 	ldw	r6,4(sp)
  819b64:	d9c00217 	ldw	r7,8(sp)
  819b68:	10001d26 	beq	r2,zero,819be0 <__register_exitproc+0x110>
  819b6c:	81000017 	ldw	r4,0(r16)
  819b70:	10000115 	stw	zero,4(r2)
  819b74:	02000044 	movi	r8,1
  819b78:	22405217 	ldw	r9,328(r4)
  819b7c:	0007883a 	mov	r3,zero
  819b80:	12400015 	stw	r9,0(r2)
  819b84:	20805215 	stw	r2,328(r4)
  819b88:	10006215 	stw	zero,392(r2)
  819b8c:	10006315 	stw	zero,396(r2)
  819b90:	883fde26 	beq	r17,zero,819b0c <__alt_mem_epcs_flash_controller_0+0xff810b0c>
  819b94:	18c9883a 	add	r4,r3,r3
  819b98:	2109883a 	add	r4,r4,r4
  819b9c:	1109883a 	add	r4,r2,r4
  819ba0:	21802215 	stw	r6,136(r4)
  819ba4:	01800044 	movi	r6,1
  819ba8:	12406217 	ldw	r9,392(r2)
  819bac:	30cc983a 	sll	r6,r6,r3
  819bb0:	4992b03a 	or	r9,r9,r6
  819bb4:	12406215 	stw	r9,392(r2)
  819bb8:	21c04215 	stw	r7,264(r4)
  819bbc:	01000084 	movi	r4,2
  819bc0:	893fd21e 	bne	r17,r4,819b0c <__alt_mem_epcs_flash_controller_0+0xff810b0c>
  819bc4:	11006317 	ldw	r4,396(r2)
  819bc8:	218cb03a 	or	r6,r4,r6
  819bcc:	11806315 	stw	r6,396(r2)
  819bd0:	003fce06 	br	819b0c <__alt_mem_epcs_flash_controller_0+0xff810b0c>
  819bd4:	18805304 	addi	r2,r3,332
  819bd8:	18805215 	stw	r2,328(r3)
  819bdc:	003fc606 	br	819af8 <__alt_mem_epcs_flash_controller_0+0xff810af8>
  819be0:	00bfffc4 	movi	r2,-1
  819be4:	003fd006 	br	819b28 <__alt_mem_epcs_flash_controller_0+0xff810b28>

00819be8 <__call_exitprocs>:
  819be8:	defff504 	addi	sp,sp,-44
  819bec:	df000915 	stw	fp,36(sp)
  819bf0:	dd400615 	stw	r21,24(sp)
  819bf4:	dc800315 	stw	r18,12(sp)
  819bf8:	dfc00a15 	stw	ra,40(sp)
  819bfc:	ddc00815 	stw	r23,32(sp)
  819c00:	dd800715 	stw	r22,28(sp)
  819c04:	dd000515 	stw	r20,20(sp)
  819c08:	dcc00415 	stw	r19,16(sp)
  819c0c:	dc400215 	stw	r17,8(sp)
  819c10:	dc000115 	stw	r16,4(sp)
  819c14:	d9000015 	stw	r4,0(sp)
  819c18:	2839883a 	mov	fp,r5
  819c1c:	04800044 	movi	r18,1
  819c20:	057fffc4 	movi	r21,-1
  819c24:	008020b4 	movhi	r2,130
  819c28:	10b07704 	addi	r2,r2,-15908
  819c2c:	12000017 	ldw	r8,0(r2)
  819c30:	45005217 	ldw	r20,328(r8)
  819c34:	44c05204 	addi	r19,r8,328
  819c38:	a0001c26 	beq	r20,zero,819cac <__call_exitprocs+0xc4>
  819c3c:	a0800117 	ldw	r2,4(r20)
  819c40:	15ffffc4 	addi	r23,r2,-1
  819c44:	b8000d16 	blt	r23,zero,819c7c <__call_exitprocs+0x94>
  819c48:	14000044 	addi	r16,r2,1
  819c4c:	8421883a 	add	r16,r16,r16
  819c50:	8421883a 	add	r16,r16,r16
  819c54:	84402004 	addi	r17,r16,128
  819c58:	a463883a 	add	r17,r20,r17
  819c5c:	a421883a 	add	r16,r20,r16
  819c60:	e0001e26 	beq	fp,zero,819cdc <__call_exitprocs+0xf4>
  819c64:	80804017 	ldw	r2,256(r16)
  819c68:	e0801c26 	beq	fp,r2,819cdc <__call_exitprocs+0xf4>
  819c6c:	bdffffc4 	addi	r23,r23,-1
  819c70:	843fff04 	addi	r16,r16,-4
  819c74:	8c7fff04 	addi	r17,r17,-4
  819c78:	bd7ff91e 	bne	r23,r21,819c60 <__alt_mem_epcs_flash_controller_0+0xff810c60>
  819c7c:	00800034 	movhi	r2,0
  819c80:	10800004 	addi	r2,r2,0
  819c84:	10000926 	beq	r2,zero,819cac <__call_exitprocs+0xc4>
  819c88:	a0800117 	ldw	r2,4(r20)
  819c8c:	1000301e 	bne	r2,zero,819d50 <__call_exitprocs+0x168>
  819c90:	a0800017 	ldw	r2,0(r20)
  819c94:	10003226 	beq	r2,zero,819d60 <__call_exitprocs+0x178>
  819c98:	a009883a 	mov	r4,r20
  819c9c:	98800015 	stw	r2,0(r19)
  819ca0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  819ca4:	9d000017 	ldw	r20,0(r19)
  819ca8:	a03fe41e 	bne	r20,zero,819c3c <__alt_mem_epcs_flash_controller_0+0xff810c3c>
  819cac:	dfc00a17 	ldw	ra,40(sp)
  819cb0:	df000917 	ldw	fp,36(sp)
  819cb4:	ddc00817 	ldw	r23,32(sp)
  819cb8:	dd800717 	ldw	r22,28(sp)
  819cbc:	dd400617 	ldw	r21,24(sp)
  819cc0:	dd000517 	ldw	r20,20(sp)
  819cc4:	dcc00417 	ldw	r19,16(sp)
  819cc8:	dc800317 	ldw	r18,12(sp)
  819ccc:	dc400217 	ldw	r17,8(sp)
  819cd0:	dc000117 	ldw	r16,4(sp)
  819cd4:	dec00b04 	addi	sp,sp,44
  819cd8:	f800283a 	ret
  819cdc:	a0800117 	ldw	r2,4(r20)
  819ce0:	80c00017 	ldw	r3,0(r16)
  819ce4:	10bfffc4 	addi	r2,r2,-1
  819ce8:	15c01426 	beq	r2,r23,819d3c <__call_exitprocs+0x154>
  819cec:	80000015 	stw	zero,0(r16)
  819cf0:	183fde26 	beq	r3,zero,819c6c <__alt_mem_epcs_flash_controller_0+0xff810c6c>
  819cf4:	95c8983a 	sll	r4,r18,r23
  819cf8:	a0806217 	ldw	r2,392(r20)
  819cfc:	a5800117 	ldw	r22,4(r20)
  819d00:	2084703a 	and	r2,r4,r2
  819d04:	10000b26 	beq	r2,zero,819d34 <__call_exitprocs+0x14c>
  819d08:	a0806317 	ldw	r2,396(r20)
  819d0c:	2088703a 	and	r4,r4,r2
  819d10:	20000c1e 	bne	r4,zero,819d44 <__call_exitprocs+0x15c>
  819d14:	89400017 	ldw	r5,0(r17)
  819d18:	d9000017 	ldw	r4,0(sp)
  819d1c:	183ee83a 	callr	r3
  819d20:	a0800117 	ldw	r2,4(r20)
  819d24:	15bfbf1e 	bne	r2,r22,819c24 <__alt_mem_epcs_flash_controller_0+0xff810c24>
  819d28:	98800017 	ldw	r2,0(r19)
  819d2c:	153fcf26 	beq	r2,r20,819c6c <__alt_mem_epcs_flash_controller_0+0xff810c6c>
  819d30:	003fbc06 	br	819c24 <__alt_mem_epcs_flash_controller_0+0xff810c24>
  819d34:	183ee83a 	callr	r3
  819d38:	003ff906 	br	819d20 <__alt_mem_epcs_flash_controller_0+0xff810d20>
  819d3c:	a5c00115 	stw	r23,4(r20)
  819d40:	003feb06 	br	819cf0 <__alt_mem_epcs_flash_controller_0+0xff810cf0>
  819d44:	89000017 	ldw	r4,0(r17)
  819d48:	183ee83a 	callr	r3
  819d4c:	003ff406 	br	819d20 <__alt_mem_epcs_flash_controller_0+0xff810d20>
  819d50:	a0800017 	ldw	r2,0(r20)
  819d54:	a027883a 	mov	r19,r20
  819d58:	1029883a 	mov	r20,r2
  819d5c:	003fb606 	br	819c38 <__alt_mem_epcs_flash_controller_0+0xff810c38>
  819d60:	0005883a 	mov	r2,zero
  819d64:	003ffb06 	br	819d54 <__alt_mem_epcs_flash_controller_0+0xff810d54>

00819d68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  819d68:	defffd04 	addi	sp,sp,-12
  819d6c:	df000215 	stw	fp,8(sp)
  819d70:	df000204 	addi	fp,sp,8
  819d74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  819d78:	d0206345 	stb	zero,-32371(gp)
  819d7c:	e0bfff17 	ldw	r2,-4(fp)
  819d80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  819d84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  819d88:	10000226 	beq	r2,zero,819d94 <_exit+0x2c>
    ALT_SIM_FAIL();
  819d8c:	002af070 	cmpltui	zero,zero,43969
  819d90:	00000106 	br	819d98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  819d94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  819d98:	003fff06 	br	819d98 <__alt_mem_epcs_flash_controller_0+0xff810d98>
