
WAT_TEST.elf:     file format elf32-littlenios2
WAT_TEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0000e1f8 memsz 0x000155a0 flags rwx
    LOAD off    0x00010020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00011000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  00011000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  00010020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c708  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000019c  0080c708  0080c708  0000d708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001954  0080c8a4  0080c8a4  0000d8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073a8  0080e1f8  0080e1f8  0000f1f8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  008155a0  008155a0  00011000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  00011000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  00011000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000830  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000143f0  00000000  00000000  00011858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000052f9  00000000  00000000  00025c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006056  00000000  00000000  0002af41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002190  00000000  00000000  00030f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034a7  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000e77  00000000  00000000  000365cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00037448  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000001c8  00000000  00000000  00037458  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  0003b08a  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003b090  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003b09c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003b09d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003b09e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003b0a2  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003b0a6  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0003b0aa  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  0003b0b5  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  0003b0c0  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  0003b0cb  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  0003b0d9  2**0
                  CONTENTS, READONLY
 31 .jdi          0000448f  00000000  00000000  0003b0e7  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00096e7a  00000000  00000000  0003f576  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0080c708 l    d  .rodata	00000000 .rodata
0080c8a4 l    d  .rwdata	00000000 .rwdata
0080e1f8 l    d  .bss	00000000 .bss
008155a0 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 wat_test.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0080e148 l     O .rwdata	00000004 lockid
0080e204 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0080e14c l     O .rwdata	00000004 lockid
0080e20c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00801aa8 l     F .text	00000048 OS_InitMisc
00801af0 l     F .text	0000006c OS_InitRdyList
00801c5c l     F .text	000000e4 OS_InitTCBList
008019c8 l     F .text	000000e0 OS_InitEventList
00801b5c l     F .text	00000080 OS_InitTaskIdle
00801bdc l     F .text	00000080 OS_InitTaskStat
00801ecc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00803bdc l     F .text	000000f4 OS_FlagTaskRdy
0080399c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00807cb4 l     F .text	00000034 alt_dev_reg
0080c8a4 l     O .rwdata	000000cc epcs_flash_controller_0
0080c970 l     O .rwdata	0000106c jtag_uart_0
0080d9dc l     O .rwdata	000000d0 cam_uart
0080daac l     O .rwdata	000000d0 wifi_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00807dd0 l     F .text	00000034 alt_flash_device_register
00807e58 l     F .text	000003f8 alt_epcs_flash_query
00808250 l     F .text	000000ec alt_epcs_flash_memcmp
00808628 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00808b78 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00808e1c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008095f8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080995c l     F .text	0000009c altera_avalon_uart_irq
008099f8 l     F .text	00000138 altera_avalon_uart_rxirq
00809b30 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00809d28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00809fcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0080a29c l     F .text	00000038 epcs_test_wip
0080a2d4 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a9a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080aabc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080aae8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080afe4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080b144 l     F .text	0000003c alt_get_errno
0080b180 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0080dd24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080e274 g     O .bss	00000004 alt_instruction_exception_handler
0080e19a g     O .rwdata	00000002 OSTaskNameSize
0080859c g     F .text	0000008c alt_epcs_flash_get_info
008000f0 g     F .text	000000bc alt_main
008154a0 g     O .bss	00000100 alt_irq
008043fc g     F .text	000000d8 OS_MemInit
00807c54 g     F .text	00000060 OSTimeSet
0080071c g     F .text	00000610 OSEventPendMulti
0080b840 g     F .text	00000024 OSTaskCreateHook
0080e27c g     O .bss	00002000 task1_stk
0080e172 g     O .rwdata	00000002 OSMboxEn
00800d84 g     F .text	0000004c OSIntEnter
0080e182 g     O .rwdata	00000002 OSQEn
008003f0 g     F .text	000000cc __malloc_unlock
0080b8a8 g     F .text	00000020 OSTaskStatHook
0080e214 g     O .bss	00000001 OSLockNesting
0080e1c0 g     O .rwdata	00000002 OSDataSize
0080e215 g     O .bss	00000001 OSRunning
0080b8e8 g     F .text	00000020 OSInitHookBegin
0080e1b8 g     O .rwdata	00000002 OSTmrSize
0080e218 g     O .bss	00000004 OSIdleCtr
0080b5f0 g     F .text	00000024 altera_nios2_gen2_irq_init
0080b6c0 g       .text	00000000 OSStartTsk
008021fc g     F .text	000002d4 OS_TCBInit
0080a310 g     F .text	000000fc epcs_sector_erase
01009000 g     F .entry	00000000 __reset
0080e1be g     O .rwdata	00000002 OSTmrWheelTblSize
0080e15e g     O .rwdata	00000002 OSEventSize
0080e21c g     O .bss	00000001 OSPrioHighRdy
0080b864 g     F .text	00000024 OSTaskDelHook
0080e278 g     O .bss	00000004 errno
0080b6a0 g       .text	00000000 OSStartHighRdy
008066d4 g     F .text	000001e4 OSTaskCreateExt
008034e4 g     F .text	00000060 OSFlagPendGetFlagsRdy
0080e19e g     O .rwdata	00000002 OSTaskStatStkSize
00802660 g     F .text	00000308 OSFlagAccept
00804a40 g     F .text	000000b8 OSQFlush
008044d4 g     F .text	00000140 OSQAccept
0080e1fc g     O .bss	00000004 alt_argv
00816148 g       *ABS*	00000000 _gp
00806528 g     F .text	000001ac OSTaskCreate
00806038 g     F .text	000004f0 OSTaskChangePrio
0080e210 g     O .bss	00000004 alt_heapsem
008024d0 g     F .text	00000190 OSDebugInit
008068b8 g     F .text	00000344 OSTaskDel
0080dba4 g     O .rwdata	00000180 alt_fd_list
0081227c g     O .bss	00000370 OSFlagTbl
008017a8 g     F .text	000000b8 OS_EventTaskRemove
0080a554 g     F .text	0000006c epcs_write_status_register
0080bb68 g     F .text	00000090 alt_find_dev
0080bf58 g     F .text	00000148 memcpy
0080e188 g     O .rwdata	00000002 OSRdyTblSize
0080b0c8 g     F .text	0000007c alt_io_redirect
0080c708 g       *ABS*	00000000 __DTOR_END__
0080bdf4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008004bc g     F .text	00000120 OSEventNameGet
0080e16c g     O .rwdata	00000002 OSFlagMax
00808734 g     F .text	00000100 alt_epcs_flash_write_block
00800dd0 g     F .text	000000f8 OSIntExit
0080e1a6 g     O .rwdata	00000002 OSTCBSize
0080e21d g     O .bss	00000001 OSPrioCur
00809078 g     F .text	000002bc altera_avalon_jtag_uart_read
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c5f0 g     F .text	00000064 .hidden __udivsi3
0080e18c g     O .rwdata	00000002 OSStkWidth
0080e180 g     O .rwdata	00000002 OSPtrSize
0080e160 g     O .rwdata	00000002 OSEventTblSize
0080b614 g       .text	00000000 OSCtxSw
0080e220 g     O .bss	00000004 OSTCBList
0080e264 g     O .bss	00000004 alt_fd_list_lock
008125ec g     O .bss	00000c30 OSMemTbl
0080e224 g     O .bss	00000001 OSTickStepState
0080e184 g     O .rwdata	00000002 OSQMax
0081321c g     O .bss	00000800 OSTaskStatStk
00804038 g     F .text	000000f0 OSMemNameGet
0080e164 g     O .rwdata	00000002 OSFlagEn
0080e1aa g     O .rwdata	00000002 OSTimeTickHookEn
00804ef0 g     F .text	00000168 OSQPost
00803cd0 g     F .text	000000a4 OS_FlagUnlink
0080e1d4 g     O .rwdata	00000004 alt_max_fd
00801d94 g     F .text	00000068 OS_MemCopy
00801dfc g     F .text	000000d0 OS_Sched
00803f48 g     F .text	000000f0 OSMemGet
00806ee4 g     F .text	000001b4 OSTaskNameSet
0080e228 g     O .bss	00000004 OSCtxSwCtr
0080b8c8 g     F .text	00000020 OSTimeTickHook
0080e16e g     O .rwdata	00000002 OSFlagNameSize
00801860 g     F .text	00000100 OS_EventTaskRemoveMulti
00801658 g     F .text	00000150 OS_EventTaskWaitMulti
008086bc g     F .text	00000078 alt_epcs_flash_erase_block
0080e186 g     O .rwdata	00000002 OSQSize
008059a0 g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0080e1f0 g     O .rwdata	00000004 _global_impure_ptr
0080a820 g     F .text	0000005c epcs_exit_4_bytes_mode
0080e170 g     O .rwdata	00000002 OSLowestPrio
008155a0 g       *ABS*	00000000 __bss_end
0080aef4 g     F .text	000000f0 alt_iic_isr_register
0080b948 g     F .text	00000024 OSTCBInitHook
0080e1b6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0080b4e8 g     F .text	00000108 alt_tick
0080e158 g     O .rwdata	00000002 OSEventEn
0080e1b2 g     O .rwdata	00000002 OSTmrCfgNameSize
008097fc g     F .text	00000160 altera_avalon_uart_init
0080aea8 g     F .text	0000004c alt_ic_irq_enabled
00803afc g     F .text	000000e0 OS_FlagInit
0080b44c g     F .text	0000009c alt_alarm_stop
0080e194 g     O .rwdata	00000002 OSTaskIdleStkSize
0080e268 g     O .bss	00000004 alt_irq_active
008055d8 g     F .text	000000b0 OSSemAccept
0080423c g     F .text	000000d8 OSMemPut
00803d74 g     F .text	000001d4 OSMemCreate
0080e22c g     O .bss	00000004 OSIdleCtrMax
010040fc g     F .exceptions	000000d4 alt_irq_handler
0080db7c g     O .rwdata	00000028 alt_dev_null
0080e1a8 g     O .rwdata	00000002 OSTicksPerSec
0080b614 g       .text	00000000 OSIntCtxSw
0080e230 g     O .bss	00000004 OSTCBFreeList
00805bac g     F .text	0000016c OSSemPendAbort
0080e1cc g     O .rwdata	00000008 alt_dev_list
0080e1ac g     O .rwdata	00000002 OSVersionNbr
0080e154 g     O .rwdata	00000004 OSEndiannessTest
0080c654 g     F .text	00000058 .hidden __umodsi3
0080a6dc g     F .text	00000068 epcs_read_electronic_signature
0080e166 g     O .rwdata	00000002 OSFlagGrpSize
008155a0 g       *ABS*	00000000 end
0080a008 g     F .text	00000238 altera_avalon_uart_write
00808a30 g     F .text	00000148 altera_avalon_jtag_uart_init
00802064 g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0080c708 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00809670 g     F .text	0000007c alt_avalon_timer_sc_init
0080974c g     F .text	00000060 altera_avalon_uart_write_fd
008097ac g     F .text	00000050 altera_avalon_uart_close_fd
00809334 g     F .text	000002c4 altera_avalon_jtag_uart_write
00801d40 g     F .text	00000054 OS_MemClr
0080b6e4 g     F .text	0000015c OSTaskStkInit
00800038 g     F .text	0000004c task1
008013b0 g     F .text	00000198 OS_EventTaskRdy
0080c378 g     F .text	00000180 __call_exitprocs
0080e234 g     O .bss	00000001 OSCPUUsage
00800000 g     F .text	00000038 _start
0080e26c g     O .bss	00000004 _alt_tick_rate
00804af8 g     F .text	0000028c OSQPend
008077a4 g     F .text	00000104 OSTimeDly
0080b96c g     F .text	000001fc alt_avalon_spi_command
0080e270 g     O .bss	00000004 _alt_nticks
00807d20 g     F .text	000000b0 alt_sys_init
0080c260 g     F .text	00000118 __register_exitproc
0080e235 g     O .bss	00000001 OSTaskCtr
008078a8 g     F .text	0000017c OSTimeDlyHMSM
00808f20 g     F .text	00000068 altera_avalon_jtag_uart_close
0080c6ac g     F .text	00000028 .hidden __mulsi3
0080e15a g     O .rwdata	00000002 OSEventMax
00805d18 g     F .text	00000110 OSSemPost
0080a240 g     F .text	0000005c epcs_read_status_register
00800f54 g     F .text	000000dc OSSchedUnlock
008088cc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080bd00 g     F .text	000000f4 alt_get_fd
0080e238 g     O .bss	00000004 OSMemFreeList
008010a0 g     F .text	000000b0 OSStatInit
008038d8 g     F .text	000000c4 OSFlagQuery
0080e190 g     O .rwdata	00000002 OSTaskCreateExtEn
0080a744 g     F .text	00000080 epcs_read_device_id
0080bedc g     F .text	0000007c memcmp
00801390 g     F .text	00000020 OS_Dummy
0080898c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008155a0 g       *ABS*	00000000 __alt_stack_base
008089dc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00813a1c g     O .bss	000001e0 OSQTbl
0080e23c g     O .bss	00000004 OSTCBHighRdy
0080e240 g     O .bss	00000004 OSQFreeList
0080bbf8 g     F .text	00000108 alt_find_file
0080ab24 g     F .text	000000a4 alt_dev_llist_insert
008002d0 g     F .text	00000120 __malloc_lock
008005dc g     F .text	00000140 OSEventNameSet
0080e244 g     O .bss	00000001 OSRdyGrp
0080e1dc g     O .rwdata	00000008 alt_flash_dev_list
0080e1f8 g       *ABS*	00000000 __bss_start
0080c0a0 g     F .text	00000128 memset
00800084 g     F .text	0000006c main
0080e200 g     O .bss	00000004 alt_envp
0080892c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c71c g     O .rodata	00000100 OSUnMapTbl
0080e18a g     O .rwdata	00000002 OSSemEn
00803544 g     F .text	00000394 OSFlagPost
00801548 g     F .text	00000110 OS_EventTaskWait
0081027c g     O .bss	00002000 task2_stk
00802130 g     F .text	000000cc OS_TaskStatStkChk
00806bfc g     F .text	00000150 OSTaskDelReq
0080e1d8 g     O .rwdata	00000004 alt_errno
00801030 g     F .text	00000070 OSStart
00800270 g     F .text	00000060 __env_unlock
00807098 g     F .text	000001d4 OSTaskResume
00804314 g     F .text	000000e8 OSMemQuery
0080e19c g     O .rwdata	00000002 OSTaskStatEn
0080e176 g     O .rwdata	00000002 OSMemMax
00805058 g     F .text	00000170 OSQPostFront
0080c4f8 g     F .text	00000084 .hidden __divsi3
0080e245 g     O .bss	00000003 OSRdyTbl
0080e150 g     O .rwdata	00000002 OSDebugEn
0080c708 g       *ABS*	00000000 __CTOR_END__
0080e168 g     O .rwdata	00000002 OSFlagNodeSize
0080e1b0 g     O .rwdata	00000002 OSTmrCfgMax
0080833c g     F .text	00000260 alt_epcs_flash_write
00804614 g     F .text	000001ac OSQCreate
00806d4c g     F .text	00000198 OSTaskNameGet
008051c8 g     F .text	0000020c OSQPostOpt
00801150 g     F .text	00000220 OSTimeTick
0080e198 g     O .rwdata	00000002 OSTaskMax
0080c708 g       *ABS*	00000000 __DTOR_LIST__
00805688 g     F .text	000000d8 OSSemCreate
0080e1bc g     O .rwdata	00000002 OSTmrWheelSize
0080e192 g     O .rwdata	00000002 OSTaskDelEn
00805e28 g     F .text	00000110 OSSemQuery
008047c0 g     F .text	00000280 OSQDel
00804d84 g     F .text	0000016c OSQPendAbort
00807ce8 g     F .text	00000038 alt_irq_init
0080b3c8 g     F .text	00000084 alt_release_fd
0080be90 g     F .text	00000014 atexit
00800ec8 g     F .text	0000008c OSSchedLock
00802968 g     F .text	00000108 OSFlagCreate
0080e1f4 g     O .rwdata	00000004 _impure_ptr
0080e1f8 g     O .bss	00000004 alt_argc
0080ac28 g     F .text	00000060 _do_dtors
0080e162 g     O .rwdata	00000002 OSEventMultiEn
00802a70 g     F .text	00000248 OSFlagDel
0080e248 g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
00802f2c g     F .text	000005b8 OSFlagPend
0080e1ae g     O .rwdata	00000002 OSTmrEn
0080e1c4 g     O .rwdata	00000008 alt_fs_list
00801f40 g     F .text	00000074 OS_StrCopy
0080e178 g     O .rwdata	00000002 OSMemNameSize
0080b908 g     F .text	00000020 OSInitHookEnd
0080e1a4 g     O .rwdata	00000002 OSTCBPrioTblMax
0080a40c g     F .text	000000f4 epcs_read_buffer
0080e1a0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00807e04 g     F .text	00000054 alt_epcs_flash_init
0080ad44 g     F .text	00000050 alt_ic_isr_register
0080e174 g     O .rwdata	00000002 OSMemEn
0080e17e g     O .rwdata	00000002 OSMutexEn
0080e1f8 g       *ABS*	00000000 _edata
008096ec g     F .text	00000060 altera_avalon_uart_read_fd
008155a0 g       *ABS*	00000000 _end
0080ac88 g     F .text	00000068 alt_flash_open_dev
0080e24c g     O .bss	00000001 OSIntNesting
00808f88 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00807a24 g     F .text	000001d4 OSTimeDlyResume
00802de0 g     F .text	0000014c OSFlagNameSet
0080726c g     F .text	000001c0 OSTaskStkChk
0080ae1c g     F .text	0000008c alt_ic_irq_disable
0080a7c4 g     F .text	0000005c epcs_enter_4_bytes_mode
0080e17a g     O .rwdata	00000002 OSMemSize
0080e250 g     O .bss	00000004 OSTCBCur
0080bea4 g     F .text	00000038 exit
0080e17c g     O .rwdata	00000002 OSMemTblSize
0080acf0 g     F .text	00000054 alt_flash_close_dev
0080c57c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00800d2c g     F .text	00000058 OSInit
00807610 g     F .text	00000124 OSTaskQuery
00805530 g     F .text	000000a8 OS_QInit
00801fb4 g     F .text	00000054 OS_StrLen
00804128 g     F .text	00000114 OSMemNameSet
0080e196 g     O .rwdata	00000002 OSTaskProfileEn
0080e254 g     O .bss	00000004 OSTime
00809cd4 g     F .text	00000054 altera_avalon_uart_close
00813bfc g     O .bss	00000800 OSTaskIdleStk
0080c6d4 g     F .text	00000034 _exit
0080a87c g     F .text	0000012c alt_alarm_start
00802cb8 g     F .text	00000128 OSFlagNameGet
00807bf8 g     F .text	0000005c OSTimeGet
0080c1c8 g     F .text	00000098 strlen
0080a500 g     F .text	00000054 epcs_write_enable
0080b888 g     F .text	00000020 OSTaskSwHook
0080b26c g     F .text	0000015c open
008143fc g     O .bss	00000b40 OSEventTbl
00814f3c g     O .bss	00000510 OSTCBTbl
00805f38 g     F .text	00000100 OSSemSet
0080e1e4 g     O .rwdata	00000004 alt_priority_mask
00805760 g     F .text	00000240 OSSemDel
0080e258 g     O .bss	00000004 OSFlagFreeList
0080ad94 g     F .text	00000088 alt_ic_irq_enable
0080e15c g     O .rwdata	00000002 OSEventNameSize
0080e25c g     O .bss	00000001 OSStatRdy
0081544c g     O .bss	00000054 OSTCBPrioTbl
00809d64 g     F .text	00000268 altera_avalon_uart_read
008001ac g     F .text	000000c4 __env_lock
0080e1a2 g     O .rwdata	00000002 OSTaskSwHookEn
00808834 g     F .text	00000098 alt_epcs_flash_read
0080e1e8 g     O .rwdata	00000008 alt_alarm_list
0080e16a g     O .rwdata	00000002 OSFlagWidth
0080abc8 g     F .text	00000060 _do_ctors
0080a9e4 g     F .text	000000d8 close
0080e208 g     O .bss	00000004 alt_envsem
0080e260 g     O .bss	00000004 OSIdleCtrRun
00801370 g     F .text	00000020 OSVersion
0080e1b4 g     O .rwdata	00000002 OSTmrCfgWheelSize
00807734 g     F .text	00000070 OS_TaskStkClr
0080e18e g     O .rwdata	00000002 OSTaskCreateEn
00801960 g     F .text	00000068 OS_EventWaitListInit
0080b928 g     F .text	00000020 OSTaskIdleHook
0080a5c0 g     F .text	0000011c epcs_write_buffer
0080742c g     F .text	000001e4 OSTaskSuspend
00802008 g     F .text	0000005c OS_TaskIdle
0080e1ba g     O .rwdata	00000002 OSTmrTblSize
008053d4 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	0800d840 	call	800d84 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	00802074 	movhi	r2,129
 1004140:	10952804 	addi	r2,r2,21664
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	00802074 	movhi	r2,129
 1004158:	10952804 	addi	r2,r2,21664
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	0800dd00 	call	800dd0 <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a04b17 	ldw	r2,-32468(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a04b17 	ldw	r2,-32468(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80000c:	d6985214 	ori	gp,gp,24904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800014:	10b87e14 	ori	r2,r2,57848

    movhi r3, %hi(__bss_end)
  800018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80001c:	18d56814 	ori	r3,r3,21920

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	08000f00 	call	8000f0 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <task1>:
#define TASK2_PRIORITY      2

//elf process failing at 0x008
/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  800038:	defffc04 	addi	sp,sp,-16
  80003c:	dfc00315 	stw	ra,12(sp)
  800040:	df000215 	stw	fp,8(sp)
  800044:	df000204 	addi	fp,sp,8
  800048:	e13fff15 	stw	r4,-4(fp)
	uint32_t *led_value = (uint32_t *) GREEN_LEDS_BASE;
  80004c:	00804074 	movhi	r2,257
  800050:	10a82804 	addi	r2,r2,-24416
  800054:	e0bffe15 	stw	r2,-8(fp)
	  while (1){
			*led_value = *led_value ^ 0xFF;
  800058:	e0bffe17 	ldw	r2,-8(fp)
  80005c:	10800017 	ldw	r2,0(r2)
  800060:	10c03fdc 	xori	r3,r2,255
  800064:	e0bffe17 	ldw	r2,-8(fp)
  800068:	10c00015 	stw	r3,0(r2)
			OSTimeDlyHMSM(0, 0, 1, 0);
  80006c:	000f883a 	mov	r7,zero
  800070:	01800044 	movi	r6,1
  800074:	000b883a 	mov	r5,zero
  800078:	0009883a 	mov	r4,zero
  80007c:	08078a80 	call	8078a8 <OSTimeDlyHMSM>
	  }
  800080:	003ff506 	br	800058 <__alt_mem_epcs_flash_controller_0+0xff7f7058>

00800084 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  800084:	defff904 	addi	sp,sp,-28
  800088:	dfc00615 	stw	ra,24(sp)
  80008c:	df000515 	stw	fp,20(sp)
  800090:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
  800094:	d8000415 	stw	zero,16(sp)
  800098:	d8000315 	stw	zero,12(sp)
  80009c:	00820004 	movi	r2,2048
  8000a0:	d8800215 	stw	r2,8(sp)
  8000a4:	00802074 	movhi	r2,129
  8000a8:	10b89f04 	addi	r2,r2,-7556
  8000ac:	d8800115 	stw	r2,4(sp)
  8000b0:	00800044 	movi	r2,1
  8000b4:	d8800015 	stw	r2,0(sp)
  8000b8:	01c00044 	movi	r7,1
  8000bc:	01802074 	movhi	r6,129
  8000c0:	31809e04 	addi	r6,r6,632
  8000c4:	000b883a 	mov	r5,zero
  8000c8:	01002034 	movhi	r4,128
  8000cc:	21000e04 	addi	r4,r4,56
  8000d0:	08066d40 	call	8066d4 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              

  OSStart();
  8000d4:	08010300 	call	801030 <OSStart>
  return 0;
  8000d8:	0005883a 	mov	r2,zero
}
  8000dc:	e037883a 	mov	sp,fp
  8000e0:	dfc00117 	ldw	ra,4(sp)
  8000e4:	df000017 	ldw	fp,0(sp)
  8000e8:	dec00204 	addi	sp,sp,8
  8000ec:	f800283a 	ret

008000f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8000f0:	defff904 	addi	sp,sp,-28
  8000f4:	dfc00615 	stw	ra,24(sp)
  8000f8:	df000515 	stw	fp,20(sp)
  8000fc:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800100:	0009883a 	mov	r4,zero
  800104:	0807ce80 	call	807ce8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800108:	0800d2c0 	call	800d2c <OSInit>
  80010c:	01000044 	movi	r4,1
  800110:	08056880 	call	805688 <OSSemCreate>
  800114:	d0a03015 	stw	r2,-32576(gp)
  800118:	01000044 	movi	r4,1
  80011c:	08056880 	call	805688 <OSSemCreate>
  800120:	d0a03215 	stw	r2,-32568(gp)
  800124:	d0a04704 	addi	r2,gp,-32484
  800128:	e0bffc15 	stw	r2,-16(fp)
  80012c:	00800044 	movi	r2,1
  800130:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  800134:	e0bffd0b 	ldhu	r2,-12(fp)
  800138:	1009883a 	mov	r4,r2
  80013c:	08056880 	call	805688 <OSSemCreate>
  800140:	1007883a 	mov	r3,r2
  800144:	e0bffc17 	ldw	r2,-16(fp)
  800148:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80014c:	0807d200 	call	807d20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800150:	01802074 	movhi	r6,129
  800154:	31b1c204 	addi	r6,r6,-14584
  800158:	01402074 	movhi	r5,129
  80015c:	2971c204 	addi	r5,r5,-14584
  800160:	01002074 	movhi	r4,129
  800164:	2131c204 	addi	r4,r4,-14584
  800168:	080b0c80 	call	80b0c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80016c:	080abc80 	call	80abc8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800170:	01002074 	movhi	r4,129
  800174:	212b0a04 	addi	r4,r4,-21464
  800178:	080be900 	call	80be90 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80017c:	d0a02c17 	ldw	r2,-32592(gp)
  800180:	d0e02d17 	ldw	r3,-32588(gp)
  800184:	d1202e17 	ldw	r4,-32584(gp)
  800188:	200d883a 	mov	r6,r4
  80018c:	180b883a 	mov	r5,r3
  800190:	1009883a 	mov	r4,r2
  800194:	08000840 	call	800084 <main>
  800198:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  80019c:	01000044 	movi	r4,1
  8001a0:	080a9e40 	call	80a9e4 <close>
  exit (result);
  8001a4:	e13ffb17 	ldw	r4,-20(fp)
  8001a8:	080bea40 	call	80bea4 <exit>

008001ac <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  8001ac:	deffdf04 	addi	sp,sp,-132
  8001b0:	dfc02015 	stw	ra,128(sp)
  8001b4:	df001f15 	stw	fp,124(sp)
  8001b8:	df001f04 	addi	fp,sp,124
  8001bc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  8001c0:	e0bfe204 	addi	r2,fp,-120
  8001c4:	100b883a 	mov	r5,r2
  8001c8:	01003fc4 	movi	r4,255
  8001cc:	08076100 	call	807610 <OSTaskQuery>
  8001d0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  8001d4:	e0bffe83 	ldbu	r2,-6(fp)
  8001d8:	10803fcc 	andi	r2,r2,255
  8001dc:	10001e1e 	bne	r2,zero,800258 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  8001e0:	e0bfee83 	ldbu	r2,-70(fp)
  8001e4:	10803fcc 	andi	r2,r2,255
  8001e8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  8001ec:	d0a03017 	ldw	r2,-32576(gp)
  8001f0:	e0fffd04 	addi	r3,fp,-12
  8001f4:	180b883a 	mov	r5,r3
  8001f8:	1009883a 	mov	r4,r2
  8001fc:	0805e280 	call	805e28 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  800200:	e0bffe43 	ldbu	r2,-7(fp)
  800204:	10803fcc 	andi	r2,r2,255
  800208:	10000726 	beq	r2,zero,800228 <__env_lock+0x7c>
  80020c:	d0a00017 	ldw	r2,-32768(gp)
  800210:	e0ffe117 	ldw	r3,-124(fp)
  800214:	1880041e 	bne	r3,r2,800228 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  800218:	d0a02f17 	ldw	r2,-32580(gp)
  80021c:	10800044 	addi	r2,r2,1
  800220:	d0a02f15 	stw	r2,-32580(gp)
  800224:	00000a06 	br	800250 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  800228:	d0a03017 	ldw	r2,-32576(gp)
  80022c:	e0fffe84 	addi	r3,fp,-6
  800230:	180d883a 	mov	r6,r3
  800234:	000b883a 	mov	r5,zero
  800238:	1009883a 	mov	r4,r2
  80023c:	08059a00 	call	8059a0 <OSSemPend>
    locks  = 1;
  800240:	00800044 	movi	r2,1
  800244:	d0a02f15 	stw	r2,-32580(gp)
    lockid = id;
  800248:	e0bfe117 	ldw	r2,-124(fp)
  80024c:	d0a00015 	stw	r2,-32768(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  800250:	0001883a 	nop
  800254:	00000106 	br	80025c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  800258:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80025c:	e037883a 	mov	sp,fp
  800260:	dfc00117 	ldw	ra,4(sp)
  800264:	df000017 	ldw	fp,0(sp)
  800268:	dec00204 	addi	sp,sp,8
  80026c:	f800283a 	ret

00800270 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  800270:	defffd04 	addi	sp,sp,-12
  800274:	dfc00215 	stw	ra,8(sp)
  800278:	df000115 	stw	fp,4(sp)
  80027c:	df000104 	addi	fp,sp,4
  800280:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  800284:	d0a02f17 	ldw	r2,-32580(gp)
  800288:	10000b26 	beq	r2,zero,8002b8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80028c:	d0a02f17 	ldw	r2,-32580(gp)
  800290:	10bfffc4 	addi	r2,r2,-1
  800294:	d0a02f15 	stw	r2,-32580(gp)
  800298:	d0a02f17 	ldw	r2,-32580(gp)
  80029c:	1000071e 	bne	r2,zero,8002bc <__env_unlock+0x4c>
  {
    lockid = -1;
  8002a0:	00bfffc4 	movi	r2,-1
  8002a4:	d0a00015 	stw	r2,-32768(gp)
    OSSemPost( alt_envsem );
  8002a8:	d0a03017 	ldw	r2,-32576(gp)
  8002ac:	1009883a 	mov	r4,r2
  8002b0:	0805d180 	call	805d18 <OSSemPost>
  8002b4:	00000106 	br	8002bc <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  8002b8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8002bc:	e037883a 	mov	sp,fp
  8002c0:	dfc00117 	ldw	ra,4(sp)
  8002c4:	df000017 	ldw	fp,0(sp)
  8002c8:	dec00204 	addi	sp,sp,8
  8002cc:	f800283a 	ret

008002d0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  8002d0:	deffdb04 	addi	sp,sp,-148
  8002d4:	dfc02415 	stw	ra,144(sp)
  8002d8:	df002315 	stw	fp,140(sp)
  8002dc:	df002304 	addi	fp,sp,140
  8002e0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8002e4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  8002e8:	d0a03343 	ldbu	r2,-32563(gp)
  8002ec:	10803fcc 	andi	r2,r2,255
  8002f0:	10800060 	cmpeqi	r2,r2,1
  8002f4:	10003626 	beq	r2,zero,8003d0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  8002f8:	e0bfe204 	addi	r2,fp,-120
  8002fc:	100b883a 	mov	r5,r2
  800300:	01003fc4 	movi	r4,255
  800304:	08076100 	call	807610 <OSTaskQuery>
  800308:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80030c:	e0bffe83 	ldbu	r2,-6(fp)
  800310:	10803fcc 	andi	r2,r2,255
  800314:	1000301e 	bne	r2,zero,8003d8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  800318:	e0bfee83 	ldbu	r2,-70(fp)
  80031c:	10803fcc 	andi	r2,r2,255
  800320:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  800324:	d0a03217 	ldw	r2,-32568(gp)
  800328:	e0fffd04 	addi	r3,fp,-12
  80032c:	180b883a 	mov	r5,r3
  800330:	1009883a 	mov	r4,r2
  800334:	0805e280 	call	805e28 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800338:	0005303a 	rdctl	r2,status
  80033c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800340:	e0ffe117 	ldw	r3,-124(fp)
  800344:	00bfff84 	movi	r2,-2
  800348:	1884703a 	and	r2,r3,r2
  80034c:	1001703a 	wrctl	status,r2
  
  return context;
  800350:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  800354:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  800358:	e0bffd0b 	ldhu	r2,-12(fp)
  80035c:	10bfffcc 	andi	r2,r2,65535
  800360:	10000b1e 	bne	r2,zero,800390 <__malloc_lock+0xc0>
  800364:	d0a00117 	ldw	r2,-32764(gp)
  800368:	e0ffde17 	ldw	r3,-136(fp)
  80036c:	1880081e 	bne	r3,r2,800390 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  800370:	d0a03117 	ldw	r2,-32572(gp)
  800374:	10800044 	addi	r2,r2,1
  800378:	d0a03115 	stw	r2,-32572(gp)
  80037c:	e0bfdd17 	ldw	r2,-140(fp)
  800380:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800384:	e0bfdf17 	ldw	r2,-132(fp)
  800388:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  80038c:	00000e06 	br	8003c8 <__malloc_lock+0xf8>
  800390:	e0bfdd17 	ldw	r2,-140(fp)
  800394:	e0bfe015 	stw	r2,-128(fp)
  800398:	e0bfe017 	ldw	r2,-128(fp)
  80039c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8003a0:	d0a03217 	ldw	r2,-32568(gp)
  8003a4:	e0fffe84 	addi	r3,fp,-6
  8003a8:	180d883a 	mov	r6,r3
  8003ac:	000b883a 	mov	r5,zero
  8003b0:	1009883a 	mov	r4,r2
  8003b4:	08059a00 	call	8059a0 <OSSemPend>
    locks  = 1;
  8003b8:	00800044 	movi	r2,1
  8003bc:	d0a03115 	stw	r2,-32572(gp)
    lockid = id;
  8003c0:	e0bfde17 	ldw	r2,-136(fp)
  8003c4:	d0a00115 	stw	r2,-32764(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  8003c8:	0001883a 	nop
  8003cc:	00000306 	br	8003dc <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  8003d0:	0001883a 	nop
  8003d4:	00000106 	br	8003dc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  8003d8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	dfc00117 	ldw	ra,4(sp)
  8003e4:	df000017 	ldw	fp,0(sp)
  8003e8:	dec00204 	addi	sp,sp,8
  8003ec:	f800283a 	ret

008003f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8003f0:	defff804 	addi	sp,sp,-32
  8003f4:	dfc00715 	stw	ra,28(sp)
  8003f8:	df000615 	stw	fp,24(sp)
  8003fc:	df000604 	addi	fp,sp,24
  800400:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800404:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  800408:	d0a03343 	ldbu	r2,-32563(gp)
  80040c:	10803fcc 	andi	r2,r2,255
  800410:	10800060 	cmpeqi	r2,r2,1
  800414:	10002326 	beq	r2,zero,8004a4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800418:	0005303a 	rdctl	r2,status
  80041c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800420:	e0fffe17 	ldw	r3,-8(fp)
  800424:	00bfff84 	movi	r2,-2
  800428:	1884703a 	and	r2,r3,r2
  80042c:	1001703a 	wrctl	status,r2
  
  return context;
  800430:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  800434:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  800438:	d0a03117 	ldw	r2,-32572(gp)
  80043c:	1000051e 	bne	r2,zero,800454 <__malloc_unlock+0x64>
  800440:	e0bffa17 	ldw	r2,-24(fp)
  800444:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800448:	e0bffb17 	ldw	r2,-20(fp)
  80044c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  800450:	00001506 	br	8004a8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  800454:	d0a03117 	ldw	r2,-32572(gp)
  800458:	10bfffc4 	addi	r2,r2,-1
  80045c:	d0a03115 	stw	r2,-32572(gp)
  800460:	d0a03117 	ldw	r2,-32572(gp)
  800464:	10000a1e 	bne	r2,zero,800490 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  800468:	00bfffc4 	movi	r2,-1
  80046c:	d0a00115 	stw	r2,-32764(gp)
  800470:	e0bffa17 	ldw	r2,-24(fp)
  800474:	e0bffc15 	stw	r2,-16(fp)
  800478:	e0bffc17 	ldw	r2,-16(fp)
  80047c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  800480:	d0a03217 	ldw	r2,-32568(gp)
  800484:	1009883a 	mov	r4,r2
  800488:	0805d180 	call	805d18 <OSSemPost>
  80048c:	00000606 	br	8004a8 <__malloc_unlock+0xb8>
  800490:	e0bffa17 	ldw	r2,-24(fp)
  800494:	e0bffd15 	stw	r2,-12(fp)
  800498:	e0bffd17 	ldw	r2,-12(fp)
  80049c:	1001703a 	wrctl	status,r2
  8004a0:	00000106 	br	8004a8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  8004a4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8004a8:	e037883a 	mov	sp,fp
  8004ac:	dfc00117 	ldw	ra,4(sp)
  8004b0:	df000017 	ldw	fp,0(sp)
  8004b4:	dec00204 	addi	sp,sp,8
  8004b8:	f800283a 	ret

008004bc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8004bc:	defff704 	addi	sp,sp,-36
  8004c0:	dfc00815 	stw	ra,32(sp)
  8004c4:	df000715 	stw	fp,28(sp)
  8004c8:	df000704 	addi	fp,sp,28
  8004cc:	e13ffd15 	stw	r4,-12(fp)
  8004d0:	e17ffe15 	stw	r5,-8(fp)
  8004d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8004d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8004dc:	e0bfff17 	ldw	r2,-4(fp)
  8004e0:	1000021e 	bne	r2,zero,8004ec <OSEventNameGet+0x30>
        return (0);
  8004e4:	0005883a 	mov	r2,zero
  8004e8:	00003706 	br	8005c8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8004ec:	e0bffd17 	ldw	r2,-12(fp)
  8004f0:	1000051e 	bne	r2,zero,800508 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  8004f4:	e0bfff17 	ldw	r2,-4(fp)
  8004f8:	00c00104 	movi	r3,4
  8004fc:	10c00005 	stb	r3,0(r2)
        return (0);
  800500:	0005883a 	mov	r2,zero
  800504:	00003006 	br	8005c8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  800508:	e0bffe17 	ldw	r2,-8(fp)
  80050c:	1000051e 	bne	r2,zero,800524 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  800510:	e0bfff17 	ldw	r2,-4(fp)
  800514:	00c00304 	movi	r3,12
  800518:	10c00005 	stb	r3,0(r2)
        return (0);
  80051c:	0005883a 	mov	r2,zero
  800520:	00002906 	br	8005c8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  800524:	d0a04103 	ldbu	r2,-32508(gp)
  800528:	10803fcc 	andi	r2,r2,255
  80052c:	10000526 	beq	r2,zero,800544 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	00c00444 	movi	r3,17
  800538:	10c00005 	stb	r3,0(r2)
        return (0);
  80053c:	0005883a 	mov	r2,zero
  800540:	00002106 	br	8005c8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  800544:	e0bffd17 	ldw	r2,-12(fp)
  800548:	10800003 	ldbu	r2,0(r2)
  80054c:	10803fcc 	andi	r2,r2,255
  800550:	10bfffc4 	addi	r2,r2,-1
  800554:	10800128 	cmpgeui	r2,r2,4
  800558:	10000526 	beq	r2,zero,800570 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80055c:	e0bfff17 	ldw	r2,-4(fp)
  800560:	00c00044 	movi	r3,1
  800564:	10c00005 	stb	r3,0(r2)
             return (0);
  800568:	0005883a 	mov	r2,zero
  80056c:	00001606 	br	8005c8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  800570:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800574:	0005303a 	rdctl	r2,status
  800578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80057c:	e0fffb17 	ldw	r3,-20(fp)
  800580:	00bfff84 	movi	r2,-2
  800584:	1884703a 	and	r2,r3,r2
  800588:	1001703a 	wrctl	status,r2
  
  return context;
  80058c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  800590:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  800594:	e0bffd17 	ldw	r2,-12(fp)
  800598:	10800384 	addi	r2,r2,14
  80059c:	100b883a 	mov	r5,r2
  8005a0:	e13ffe17 	ldw	r4,-8(fp)
  8005a4:	0801f400 	call	801f40 <OS_StrCopy>
  8005a8:	e0bffa05 	stb	r2,-24(fp)
  8005ac:	e0bff917 	ldw	r2,-28(fp)
  8005b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8005b4:	e0bffc17 	ldw	r2,-16(fp)
  8005b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8005bc:	e0bfff17 	ldw	r2,-4(fp)
  8005c0:	10000005 	stb	zero,0(r2)
    return (len);
  8005c4:	e0bffa03 	ldbu	r2,-24(fp)
}
  8005c8:	e037883a 	mov	sp,fp
  8005cc:	dfc00117 	ldw	ra,4(sp)
  8005d0:	df000017 	ldw	fp,0(sp)
  8005d4:	dec00204 	addi	sp,sp,8
  8005d8:	f800283a 	ret

008005dc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8005dc:	defff604 	addi	sp,sp,-40
  8005e0:	dfc00915 	stw	ra,36(sp)
  8005e4:	df000815 	stw	fp,32(sp)
  8005e8:	df000804 	addi	fp,sp,32
  8005ec:	e13ffd15 	stw	r4,-12(fp)
  8005f0:	e17ffe15 	stw	r5,-8(fp)
  8005f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8005f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8005fc:	e0bfff17 	ldw	r2,-4(fp)
  800600:	10004026 	beq	r2,zero,800704 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  800604:	e0bffd17 	ldw	r2,-12(fp)
  800608:	1000041e 	bne	r2,zero,80061c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80060c:	e0bfff17 	ldw	r2,-4(fp)
  800610:	00c00104 	movi	r3,4
  800614:	10c00005 	stb	r3,0(r2)
        return;
  800618:	00003b06 	br	800708 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80061c:	e0bffe17 	ldw	r2,-8(fp)
  800620:	1000041e 	bne	r2,zero,800634 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  800624:	e0bfff17 	ldw	r2,-4(fp)
  800628:	00c00304 	movi	r3,12
  80062c:	10c00005 	stb	r3,0(r2)
        return;
  800630:	00003506 	br	800708 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  800634:	d0a04103 	ldbu	r2,-32508(gp)
  800638:	10803fcc 	andi	r2,r2,255
  80063c:	10000426 	beq	r2,zero,800650 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  800640:	e0bfff17 	ldw	r2,-4(fp)
  800644:	00c00484 	movi	r3,18
  800648:	10c00005 	stb	r3,0(r2)
        return;
  80064c:	00002e06 	br	800708 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  800650:	e0bffd17 	ldw	r2,-12(fp)
  800654:	10800003 	ldbu	r2,0(r2)
  800658:	10803fcc 	andi	r2,r2,255
  80065c:	10bfffc4 	addi	r2,r2,-1
  800660:	10800128 	cmpgeui	r2,r2,4
  800664:	10000426 	beq	r2,zero,800678 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  800668:	e0bfff17 	ldw	r2,-4(fp)
  80066c:	00c00044 	movi	r3,1
  800670:	10c00005 	stb	r3,0(r2)
             return;
  800674:	00002406 	br	800708 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  800678:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80067c:	0005303a 	rdctl	r2,status
  800680:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800684:	e0fffc17 	ldw	r3,-16(fp)
  800688:	00bfff84 	movi	r2,-2
  80068c:	1884703a 	and	r2,r3,r2
  800690:	1001703a 	wrctl	status,r2
  
  return context;
  800694:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  800698:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80069c:	e13ffe17 	ldw	r4,-8(fp)
  8006a0:	0801fb40 	call	801fb4 <OS_StrLen>
  8006a4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  8006a8:	e0bffa03 	ldbu	r2,-24(fp)
  8006ac:	10800830 	cmpltui	r2,r2,32
  8006b0:	1000081e 	bne	r2,zero,8006d4 <OSEventNameSet+0xf8>
  8006b4:	e0bff817 	ldw	r2,-32(fp)
  8006b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8006bc:	e0bff917 	ldw	r2,-28(fp)
  8006c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  8006c4:	e0bfff17 	ldw	r2,-4(fp)
  8006c8:	00c002c4 	movi	r3,11
  8006cc:	10c00005 	stb	r3,0(r2)
        return;
  8006d0:	00000d06 	br	800708 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  8006d4:	e0bffd17 	ldw	r2,-12(fp)
  8006d8:	10800384 	addi	r2,r2,14
  8006dc:	e17ffe17 	ldw	r5,-8(fp)
  8006e0:	1009883a 	mov	r4,r2
  8006e4:	0801f400 	call	801f40 <OS_StrCopy>
  8006e8:	e0bff817 	ldw	r2,-32(fp)
  8006ec:	e0bffb15 	stw	r2,-20(fp)
  8006f0:	e0bffb17 	ldw	r2,-20(fp)
  8006f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8006f8:	e0bfff17 	ldw	r2,-4(fp)
  8006fc:	10000005 	stb	zero,0(r2)
  800700:	00000106 	br	800708 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  800704:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  800708:	e037883a 	mov	sp,fp
  80070c:	dfc00117 	ldw	ra,4(sp)
  800710:	df000017 	ldw	fp,0(sp)
  800714:	dec00204 	addi	sp,sp,8
  800718:	f800283a 	ret

0080071c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80071c:	deffed04 	addi	sp,sp,-76
  800720:	dfc01215 	stw	ra,72(sp)
  800724:	df001115 	stw	fp,68(sp)
  800728:	df001104 	addi	fp,sp,68
  80072c:	e13ffc15 	stw	r4,-16(fp)
  800730:	e17ffd15 	stw	r5,-12(fp)
  800734:	e1bffe15 	stw	r6,-8(fp)
  800738:	3805883a 	mov	r2,r7
  80073c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  800740:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  800744:	e0800217 	ldw	r2,8(fp)
  800748:	1000021e 	bne	r2,zero,800754 <OSEventPendMulti+0x38>
        return (0);
  80074c:	0005883a 	mov	r2,zero
  800750:	00017106 	br	800d18 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  800754:	e0bffc17 	ldw	r2,-16(fp)
  800758:	1000051e 	bne	r2,zero,800770 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  80075c:	e0800217 	ldw	r2,8(fp)
  800760:	00c00104 	movi	r3,4
  800764:	10c00005 	stb	r3,0(r2)
        return (0);
  800768:	0005883a 	mov	r2,zero
  80076c:	00016a06 	br	800d18 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  800770:	e0bffd17 	ldw	r2,-12(fp)
  800774:	1000051e 	bne	r2,zero,80078c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  800778:	e0800217 	ldw	r2,8(fp)
  80077c:	00c00104 	movi	r3,4
  800780:	10c00005 	stb	r3,0(r2)
        return (0);
  800784:	0005883a 	mov	r2,zero
  800788:	00016306 	br	800d18 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80078c:	e0bffe17 	ldw	r2,-8(fp)
  800790:	1000051e 	bne	r2,zero,8007a8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  800794:	e0800217 	ldw	r2,8(fp)
  800798:	00c00104 	movi	r3,4
  80079c:	10c00005 	stb	r3,0(r2)
        return (0);
  8007a0:	0005883a 	mov	r2,zero
  8007a4:	00015c06 	br	800d18 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8007a8:	e0bffd17 	ldw	r2,-12(fp)
  8007ac:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  8007b0:	e0bffc17 	ldw	r2,-16(fp)
  8007b4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  8007b8:	e0bfef17 	ldw	r2,-68(fp)
  8007bc:	10800017 	ldw	r2,0(r2)
  8007c0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  8007c4:	00001906 	br	80082c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  8007c8:	e0bff017 	ldw	r2,-64(fp)
  8007cc:	10800003 	ldbu	r2,0(r2)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	10c000a0 	cmpeqi	r3,r2,2
  8007d8:	1800091e 	bne	r3,zero,800800 <OSEventPendMulti+0xe4>
  8007dc:	10c000e0 	cmpeqi	r3,r2,3
  8007e0:	1800091e 	bne	r3,zero,800808 <OSEventPendMulti+0xec>
  8007e4:	10800060 	cmpeqi	r2,r2,1
  8007e8:	1000091e 	bne	r2,zero,800810 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  8007ec:	e0800217 	ldw	r2,8(fp)
  8007f0:	00c00044 	movi	r3,1
  8007f4:	10c00005 	stb	r3,0(r2)
                 return (0);
  8007f8:	0005883a 	mov	r2,zero
  8007fc:	00014606 	br	800d18 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  800800:	0001883a 	nop
  800804:	00000306 	br	800814 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  800808:	0001883a 	nop
  80080c:	00000106 	br	800814 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  800810:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  800814:	e0bfef17 	ldw	r2,-68(fp)
  800818:	10800104 	addi	r2,r2,4
  80081c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  800820:	e0bfef17 	ldw	r2,-68(fp)
  800824:	10800017 	ldw	r2,0(r2)
  800828:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80082c:	e0bff017 	ldw	r2,-64(fp)
  800830:	103fe51e 	bne	r2,zero,8007c8 <__alt_mem_epcs_flash_controller_0+0xff7f77c8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  800834:	d0a04103 	ldbu	r2,-32508(gp)
  800838:	10803fcc 	andi	r2,r2,255
  80083c:	10000526 	beq	r2,zero,800854 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  800840:	e0800217 	ldw	r2,8(fp)
  800844:	00c00084 	movi	r3,2
  800848:	10c00005 	stb	r3,0(r2)
        return (0);
  80084c:	0005883a 	mov	r2,zero
  800850:	00013106 	br	800d18 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  800854:	d0a03303 	ldbu	r2,-32564(gp)
  800858:	10803fcc 	andi	r2,r2,255
  80085c:	10000526 	beq	r2,zero,800874 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  800860:	e0800217 	ldw	r2,8(fp)
  800864:	00c00344 	movi	r3,13
  800868:	10c00005 	stb	r3,0(r2)
        return (0);
  80086c:	0005883a 	mov	r2,zero
  800870:	00012906 	br	800d18 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800874:	0005303a 	rdctl	r2,status
  800878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80087c:	e0fffb17 	ldw	r3,-20(fp)
  800880:	00bfff84 	movi	r2,-2
  800884:	1884703a 	and	r2,r3,r2
  800888:	1001703a 	wrctl	status,r2
  
  return context;
  80088c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  800890:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  800894:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  800898:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80089c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  8008a0:	e0bffc17 	ldw	r2,-16(fp)
  8008a4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  8008a8:	e0bfef17 	ldw	r2,-68(fp)
  8008ac:	10800017 	ldw	r2,0(r2)
  8008b0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8008b4:	00008106 	br	800abc <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  8008b8:	e0bff017 	ldw	r2,-64(fp)
  8008bc:	10800003 	ldbu	r2,0(r2)
  8008c0:	10803fcc 	andi	r2,r2,255
  8008c4:	10c000a0 	cmpeqi	r3,r2,2
  8008c8:	18003c1e 	bne	r3,zero,8009bc <OSEventPendMulti+0x2a0>
  8008cc:	10c000e0 	cmpeqi	r3,r2,3
  8008d0:	1800031e 	bne	r3,zero,8008e0 <OSEventPendMulti+0x1c4>
  8008d4:	10800060 	cmpeqi	r2,r2,1
  8008d8:	10001e1e 	bne	r2,zero,800954 <OSEventPendMulti+0x238>
  8008dc:	00006606 	br	800a78 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8008e0:	e0bff017 	ldw	r2,-64(fp)
  8008e4:	1080020b 	ldhu	r2,8(r2)
  8008e8:	10bfffcc 	andi	r2,r2,65535
  8008ec:	10001526 	beq	r2,zero,800944 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  8008f0:	e0bff017 	ldw	r2,-64(fp)
  8008f4:	1080020b 	ldhu	r2,8(r2)
  8008f8:	10bfffc4 	addi	r2,r2,-1
  8008fc:	1007883a 	mov	r3,r2
  800900:	e0bff017 	ldw	r2,-64(fp)
  800904:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  800908:	e0bffd17 	ldw	r2,-12(fp)
  80090c:	10c00104 	addi	r3,r2,4
  800910:	e0fffd15 	stw	r3,-12(fp)
  800914:	e0fff017 	ldw	r3,-64(fp)
  800918:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  80091c:	00800044 	movi	r2,1
  800920:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  800924:	e0bffe17 	ldw	r2,-8(fp)
  800928:	10c00104 	addi	r3,r2,4
  80092c:	e0fffe15 	stw	r3,-8(fp)
  800930:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  800934:	e0bff18b 	ldhu	r2,-58(fp)
  800938:	10800044 	addi	r2,r2,1
  80093c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  800940:	00005806 	br	800aa4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  800944:	e0bff203 	ldbu	r2,-56(fp)
  800948:	10800054 	ori	r2,r2,1
  80094c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  800950:	00005406 	br	800aa4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  800954:	e0bff017 	ldw	r2,-64(fp)
  800958:	10800117 	ldw	r2,4(r2)
  80095c:	10001326 	beq	r2,zero,8009ac <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  800960:	e0bffe17 	ldw	r2,-8(fp)
  800964:	10c00104 	addi	r3,r2,4
  800968:	e0fffe15 	stw	r3,-8(fp)
  80096c:	e0fff017 	ldw	r3,-64(fp)
  800970:	18c00117 	ldw	r3,4(r3)
  800974:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  800978:	e0bff017 	ldw	r2,-64(fp)
  80097c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  800980:	e0bffd17 	ldw	r2,-12(fp)
  800984:	10c00104 	addi	r3,r2,4
  800988:	e0fffd15 	stw	r3,-12(fp)
  80098c:	e0fff017 	ldw	r3,-64(fp)
  800990:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  800994:	00800044 	movi	r2,1
  800998:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80099c:	e0bff18b 	ldhu	r2,-58(fp)
  8009a0:	10800044 	addi	r2,r2,1
  8009a4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  8009a8:	00003e06 	br	800aa4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  8009ac:	e0bff203 	ldbu	r2,-56(fp)
  8009b0:	10800094 	ori	r2,r2,2
  8009b4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  8009b8:	00003a06 	br	800aa4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  8009bc:	e0bff017 	ldw	r2,-64(fp)
  8009c0:	10800117 	ldw	r2,4(r2)
  8009c4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  8009c8:	e0bff517 	ldw	r2,-44(fp)
  8009cc:	1080058b 	ldhu	r2,22(r2)
  8009d0:	10bfffcc 	andi	r2,r2,65535
  8009d4:	10002426 	beq	r2,zero,800a68 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  8009d8:	e0bffe17 	ldw	r2,-8(fp)
  8009dc:	10c00104 	addi	r3,r2,4
  8009e0:	e0fffe15 	stw	r3,-8(fp)
  8009e4:	e0fff517 	ldw	r3,-44(fp)
  8009e8:	18c00417 	ldw	r3,16(r3)
  8009ec:	19400104 	addi	r5,r3,4
  8009f0:	e13ff517 	ldw	r4,-44(fp)
  8009f4:	21400415 	stw	r5,16(r4)
  8009f8:	18c00017 	ldw	r3,0(r3)
  8009fc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  800a00:	e0bff517 	ldw	r2,-44(fp)
  800a04:	10c00417 	ldw	r3,16(r2)
  800a08:	e0bff517 	ldw	r2,-44(fp)
  800a0c:	10800217 	ldw	r2,8(r2)
  800a10:	1880041e 	bne	r3,r2,800a24 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  800a14:	e0bff517 	ldw	r2,-44(fp)
  800a18:	10c00117 	ldw	r3,4(r2)
  800a1c:	e0bff517 	ldw	r2,-44(fp)
  800a20:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  800a24:	e0bff517 	ldw	r2,-44(fp)
  800a28:	1080058b 	ldhu	r2,22(r2)
  800a2c:	10bfffc4 	addi	r2,r2,-1
  800a30:	1007883a 	mov	r3,r2
  800a34:	e0bff517 	ldw	r2,-44(fp)
  800a38:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  800a3c:	e0bffd17 	ldw	r2,-12(fp)
  800a40:	10c00104 	addi	r3,r2,4
  800a44:	e0fffd15 	stw	r3,-12(fp)
  800a48:	e0fff017 	ldw	r3,-64(fp)
  800a4c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  800a50:	00800044 	movi	r2,1
  800a54:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  800a58:	e0bff18b 	ldhu	r2,-58(fp)
  800a5c:	10800044 	addi	r2,r2,1
  800a60:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  800a64:	00000f06 	br	800aa4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  800a68:	e0bff203 	ldbu	r2,-56(fp)
  800a6c:	10800114 	ori	r2,r2,4
  800a70:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  800a74:	00000b06 	br	800aa4 <OSEventPendMulti+0x388>
  800a78:	e0bff317 	ldw	r2,-52(fp)
  800a7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800a80:	e0bff417 	ldw	r2,-48(fp)
  800a84:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  800a88:	e0bffd17 	ldw	r2,-12(fp)
  800a8c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  800a90:	e0800217 	ldw	r2,8(fp)
  800a94:	00c00044 	movi	r3,1
  800a98:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  800a9c:	e0bff18b 	ldhu	r2,-58(fp)
  800aa0:	00009d06 	br	800d18 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  800aa4:	e0bfef17 	ldw	r2,-68(fp)
  800aa8:	10800104 	addi	r2,r2,4
  800aac:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  800ab0:	e0bfef17 	ldw	r2,-68(fp)
  800ab4:	10800017 	ldw	r2,0(r2)
  800ab8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  800abc:	e0bff017 	ldw	r2,-64(fp)
  800ac0:	103f7d1e 	bne	r2,zero,8008b8 <__alt_mem_epcs_flash_controller_0+0xff7f78b8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  800ac4:	e0bff103 	ldbu	r2,-60(fp)
  800ac8:	10800058 	cmpnei	r2,r2,1
  800acc:	10000a1e 	bne	r2,zero,800af8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  800ad0:	e0bffd17 	ldw	r2,-12(fp)
  800ad4:	10000015 	stw	zero,0(r2)
  800ad8:	e0bff317 	ldw	r2,-52(fp)
  800adc:	e0bff615 	stw	r2,-40(fp)
  800ae0:	e0bff617 	ldw	r2,-40(fp)
  800ae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  800ae8:	e0800217 	ldw	r2,8(fp)
  800aec:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  800af0:	e0bff18b 	ldhu	r2,-58(fp)
  800af4:	00008806 	br	800d18 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  800af8:	d0a04217 	ldw	r2,-32504(gp)
  800afc:	d0e04217 	ldw	r3,-32504(gp)
  800b00:	19000c03 	ldbu	r4,48(r3)
  800b04:	e0fff203 	ldbu	r3,-56(fp)
  800b08:	20c6b03a 	or	r3,r4,r3
  800b0c:	1809883a 	mov	r4,r3
  800b10:	00ffe004 	movi	r3,-128
  800b14:	20c6b03a 	or	r3,r4,r3
  800b18:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  800b1c:	d0a04217 	ldw	r2,-32504(gp)
  800b20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  800b24:	d0a04217 	ldw	r2,-32504(gp)
  800b28:	e0ffff0b 	ldhu	r3,-4(fp)
  800b2c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  800b30:	e13ffc17 	ldw	r4,-16(fp)
  800b34:	08016580 	call	801658 <OS_EventTaskWaitMulti>
  800b38:	e0bff317 	ldw	r2,-52(fp)
  800b3c:	e0bff915 	stw	r2,-28(fp)
  800b40:	e0bff917 	ldw	r2,-28(fp)
  800b44:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  800b48:	0801dfc0 	call	801dfc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800b4c:	0005303a 	rdctl	r2,status
  800b50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800b54:	e0fff717 	ldw	r3,-36(fp)
  800b58:	00bfff84 	movi	r2,-2
  800b5c:	1884703a 	and	r2,r3,r2
  800b60:	1001703a 	wrctl	status,r2
  
  return context;
  800b64:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  800b68:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  800b6c:	d0a04217 	ldw	r2,-32504(gp)
  800b70:	10800c43 	ldbu	r2,49(r2)
  800b74:	10803fcc 	andi	r2,r2,255
  800b78:	10000226 	beq	r2,zero,800b84 <OSEventPendMulti+0x468>
  800b7c:	108000a0 	cmpeqi	r2,r2,2
  800b80:	10001826 	beq	r2,zero,800be4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  800b84:	d0a04217 	ldw	r2,-32504(gp)
  800b88:	10800717 	ldw	r2,28(r2)
  800b8c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  800b90:	e0bff017 	ldw	r2,-64(fp)
  800b94:	10000b26 	beq	r2,zero,800bc4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  800b98:	e0bffd17 	ldw	r2,-12(fp)
  800b9c:	10c00104 	addi	r3,r2,4
  800ba0:	e0fffd15 	stw	r3,-12(fp)
  800ba4:	e0fff017 	ldw	r3,-64(fp)
  800ba8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  800bb4:	e0bff18b 	ldhu	r2,-58(fp)
  800bb8:	10800044 	addi	r2,r2,1
  800bbc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  800bc0:	00000d06 	br	800bf8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  800bc4:	d0a04217 	ldw	r2,-32504(gp)
  800bc8:	00c00044 	movi	r3,1
  800bcc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  800bd0:	d0a04217 	ldw	r2,-32504(gp)
  800bd4:	e17ffc17 	ldw	r5,-16(fp)
  800bd8:	1009883a 	mov	r4,r2
  800bdc:	08018600 	call	801860 <OS_EventTaskRemoveMulti>
             }
			 break;
  800be0:	00000506 	br	800bf8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  800be4:	d0a04217 	ldw	r2,-32504(gp)
  800be8:	e17ffc17 	ldw	r5,-16(fp)
  800bec:	1009883a 	mov	r4,r2
  800bf0:	08018600 	call	801860 <OS_EventTaskRemoveMulti>
             break;
  800bf4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  800bf8:	d0a04217 	ldw	r2,-32504(gp)
  800bfc:	10800c43 	ldbu	r2,49(r2)
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	10000326 	beq	r2,zero,800c14 <OSEventPendMulti+0x4f8>
  800c08:	108000a0 	cmpeqi	r2,r2,2
  800c0c:	1000231e 	bne	r2,zero,800c9c <OSEventPendMulti+0x580>
  800c10:	00002a06 	br	800cbc <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  800c14:	e0bff017 	ldw	r2,-64(fp)
  800c18:	10800003 	ldbu	r2,0(r2)
  800c1c:	10803fcc 	andi	r2,r2,255
  800c20:	0080100e 	bge	zero,r2,800c64 <OSEventPendMulti+0x548>
  800c24:	10c000d0 	cmplti	r3,r2,3
  800c28:	1800071e 	bne	r3,zero,800c48 <OSEventPendMulti+0x52c>
  800c2c:	108000e0 	cmpeqi	r2,r2,3
  800c30:	10000c26 	beq	r2,zero,800c64 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  800c34:	e0bffe17 	ldw	r2,-8(fp)
  800c38:	10c00104 	addi	r3,r2,4
  800c3c:	e0fffe15 	stw	r3,-8(fp)
  800c40:	10000015 	stw	zero,0(r2)
                      break;
  800c44:	00001206 	br	800c90 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  800c48:	e0bffe17 	ldw	r2,-8(fp)
  800c4c:	10c00104 	addi	r3,r2,4
  800c50:	e0fffe15 	stw	r3,-8(fp)
  800c54:	d0e04217 	ldw	r3,-32504(gp)
  800c58:	18c00917 	ldw	r3,36(r3)
  800c5c:	10c00015 	stw	r3,0(r2)
                      break;
  800c60:	00000b06 	br	800c90 <OSEventPendMulti+0x574>
  800c64:	e0bff317 	ldw	r2,-52(fp)
  800c68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800c6c:	e0bff817 	ldw	r2,-32(fp)
  800c70:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  800c74:	e0bffd17 	ldw	r2,-12(fp)
  800c78:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  800c7c:	e0800217 	ldw	r2,8(fp)
  800c80:	00c00044 	movi	r3,1
  800c84:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  800c88:	e0bff18b 	ldhu	r2,-58(fp)
  800c8c:	00002206 	br	800d18 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  800c90:	e0800217 	ldw	r2,8(fp)
  800c94:	10000005 	stb	zero,0(r2)
             break;
  800c98:	00001006 	br	800cdc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  800c9c:	e0bffe17 	ldw	r2,-8(fp)
  800ca0:	10c00104 	addi	r3,r2,4
  800ca4:	e0fffe15 	stw	r3,-8(fp)
  800ca8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  800cac:	e0800217 	ldw	r2,8(fp)
  800cb0:	00c00384 	movi	r3,14
  800cb4:	10c00005 	stb	r3,0(r2)
             break;
  800cb8:	00000806 	br	800cdc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  800cbc:	e0bffe17 	ldw	r2,-8(fp)
  800cc0:	10c00104 	addi	r3,r2,4
  800cc4:	e0fffe15 	stw	r3,-8(fp)
  800cc8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  800ccc:	e0800217 	ldw	r2,8(fp)
  800cd0:	00c00284 	movi	r3,10
  800cd4:	10c00005 	stb	r3,0(r2)
             break;
  800cd8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  800cdc:	d0a04217 	ldw	r2,-32504(gp)
  800ce0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  800ce4:	d0a04217 	ldw	r2,-32504(gp)
  800ce8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  800cec:	d0a04217 	ldw	r2,-32504(gp)
  800cf0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  800cf4:	d0a04217 	ldw	r2,-32504(gp)
  800cf8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  800cfc:	d0a04217 	ldw	r2,-32504(gp)
  800d00:	10000915 	stw	zero,36(r2)
  800d04:	e0bff317 	ldw	r2,-52(fp)
  800d08:	e0bffa15 	stw	r2,-24(fp)
  800d0c:	e0bffa17 	ldw	r2,-24(fp)
  800d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  800d14:	e0bff18b 	ldhu	r2,-58(fp)
}
  800d18:	e037883a 	mov	sp,fp
  800d1c:	dfc00117 	ldw	ra,4(sp)
  800d20:	df000017 	ldw	fp,0(sp)
  800d24:	dec00204 	addi	sp,sp,8
  800d28:	f800283a 	ret

00800d2c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  800d2c:	defffe04 	addi	sp,sp,-8
  800d30:	dfc00115 	stw	ra,4(sp)
  800d34:	df000015 	stw	fp,0(sp)
  800d38:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  800d3c:	080b8e80 	call	80b8e8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  800d40:	0801aa80 	call	801aa8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  800d44:	0801af00 	call	801af0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  800d48:	0801c5c0 	call	801c5c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  800d4c:	08019c80 	call	8019c8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  800d50:	0803afc0 	call	803afc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  800d54:	08043fc0 	call	8043fc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  800d58:	08055300 	call	805530 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  800d5c:	0801b5c0 	call	801b5c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  800d60:	0801bdc0 	call	801bdc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  800d64:	080b9080 	call	80b908 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  800d68:	08024d00 	call	8024d0 <OSDebugInit>
#endif
}
  800d6c:	0001883a 	nop
  800d70:	e037883a 	mov	sp,fp
  800d74:	dfc00117 	ldw	ra,4(sp)
  800d78:	df000017 	ldw	fp,0(sp)
  800d7c:	dec00204 	addi	sp,sp,8
  800d80:	f800283a 	ret

00800d84 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  800d84:	deffff04 	addi	sp,sp,-4
  800d88:	df000015 	stw	fp,0(sp)
  800d8c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  800d90:	d0a03343 	ldbu	r2,-32563(gp)
  800d94:	10803fcc 	andi	r2,r2,255
  800d98:	10800058 	cmpnei	r2,r2,1
  800d9c:	1000071e 	bne	r2,zero,800dbc <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  800da0:	d0a04103 	ldbu	r2,-32508(gp)
  800da4:	10803fcc 	andi	r2,r2,255
  800da8:	10803fe0 	cmpeqi	r2,r2,255
  800dac:	1000031e 	bne	r2,zero,800dbc <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  800db0:	d0a04103 	ldbu	r2,-32508(gp)
  800db4:	10800044 	addi	r2,r2,1
  800db8:	d0a04105 	stb	r2,-32508(gp)
        }
    }
}
  800dbc:	0001883a 	nop
  800dc0:	e037883a 	mov	sp,fp
  800dc4:	df000017 	ldw	fp,0(sp)
  800dc8:	dec00104 	addi	sp,sp,4
  800dcc:	f800283a 	ret

00800dd0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  800dd0:	defffb04 	addi	sp,sp,-20
  800dd4:	dfc00415 	stw	ra,16(sp)
  800dd8:	df000315 	stw	fp,12(sp)
  800ddc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  800de0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  800de4:	d0a03343 	ldbu	r2,-32563(gp)
  800de8:	10803fcc 	andi	r2,r2,255
  800dec:	10800058 	cmpnei	r2,r2,1
  800df0:	10002f1e 	bne	r2,zero,800eb0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800df4:	0005303a 	rdctl	r2,status
  800df8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800dfc:	e0ffff17 	ldw	r3,-4(fp)
  800e00:	00bfff84 	movi	r2,-2
  800e04:	1884703a 	and	r2,r3,r2
  800e08:	1001703a 	wrctl	status,r2
  
  return context;
  800e0c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  800e10:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  800e14:	d0a04103 	ldbu	r2,-32508(gp)
  800e18:	10803fcc 	andi	r2,r2,255
  800e1c:	10000326 	beq	r2,zero,800e2c <OSIntExit+0x5c>
            OSIntNesting--;
  800e20:	d0a04103 	ldbu	r2,-32508(gp)
  800e24:	10bfffc4 	addi	r2,r2,-1
  800e28:	d0a04105 	stb	r2,-32508(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  800e2c:	d0a04103 	ldbu	r2,-32508(gp)
  800e30:	10803fcc 	andi	r2,r2,255
  800e34:	10001a1e 	bne	r2,zero,800ea0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  800e38:	d0a03303 	ldbu	r2,-32564(gp)
  800e3c:	10803fcc 	andi	r2,r2,255
  800e40:	1000171e 	bne	r2,zero,800ea0 <OSIntExit+0xd0>
                OS_SchedNew();
  800e44:	0801ecc0 	call	801ecc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  800e48:	d0e03503 	ldbu	r3,-32556(gp)
  800e4c:	d0a03543 	ldbu	r2,-32555(gp)
  800e50:	18c03fcc 	andi	r3,r3,255
  800e54:	10803fcc 	andi	r2,r2,255
  800e58:	18801126 	beq	r3,r2,800ea0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  800e5c:	d0a03503 	ldbu	r2,-32556(gp)
  800e60:	10c03fcc 	andi	r3,r2,255
  800e64:	00802074 	movhi	r2,129
  800e68:	10951304 	addi	r2,r2,21580
  800e6c:	18c7883a 	add	r3,r3,r3
  800e70:	18c7883a 	add	r3,r3,r3
  800e74:	10c5883a 	add	r2,r2,r3
  800e78:	10800017 	ldw	r2,0(r2)
  800e7c:	d0a03d15 	stw	r2,-32524(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  800e80:	d0a03d17 	ldw	r2,-32524(gp)
  800e84:	10c00e17 	ldw	r3,56(r2)
  800e88:	18c00044 	addi	r3,r3,1
  800e8c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  800e90:	d0a03817 	ldw	r2,-32544(gp)
  800e94:	10800044 	addi	r2,r2,1
  800e98:	d0a03815 	stw	r2,-32544(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  800e9c:	080b6140 	call	80b614 <OSCtxSw>
  800ea0:	e0bffd17 	ldw	r2,-12(fp)
  800ea4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800ea8:	e0bffe17 	ldw	r2,-8(fp)
  800eac:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  800eb0:	0001883a 	nop
  800eb4:	e037883a 	mov	sp,fp
  800eb8:	dfc00117 	ldw	ra,4(sp)
  800ebc:	df000017 	ldw	fp,0(sp)
  800ec0:	dec00204 	addi	sp,sp,8
  800ec4:	f800283a 	ret

00800ec8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  800ec8:	defffc04 	addi	sp,sp,-16
  800ecc:	df000315 	stw	fp,12(sp)
  800ed0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800ed4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  800ed8:	d0a03343 	ldbu	r2,-32563(gp)
  800edc:	10803fcc 	andi	r2,r2,255
  800ee0:	10800058 	cmpnei	r2,r2,1
  800ee4:	1000161e 	bne	r2,zero,800f40 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800ee8:	0005303a 	rdctl	r2,status
  800eec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800ef0:	e0ffff17 	ldw	r3,-4(fp)
  800ef4:	00bfff84 	movi	r2,-2
  800ef8:	1884703a 	and	r2,r3,r2
  800efc:	1001703a 	wrctl	status,r2
  
  return context;
  800f00:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  800f04:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  800f08:	d0a04103 	ldbu	r2,-32508(gp)
  800f0c:	10803fcc 	andi	r2,r2,255
  800f10:	1000071e 	bne	r2,zero,800f30 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  800f14:	d0a03303 	ldbu	r2,-32564(gp)
  800f18:	10803fcc 	andi	r2,r2,255
  800f1c:	10803fe0 	cmpeqi	r2,r2,255
  800f20:	1000031e 	bne	r2,zero,800f30 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  800f24:	d0a03303 	ldbu	r2,-32564(gp)
  800f28:	10800044 	addi	r2,r2,1
  800f2c:	d0a03305 	stb	r2,-32564(gp)
  800f30:	e0bffd17 	ldw	r2,-12(fp)
  800f34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f38:	e0bffe17 	ldw	r2,-8(fp)
  800f3c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  800f40:	0001883a 	nop
  800f44:	e037883a 	mov	sp,fp
  800f48:	df000017 	ldw	fp,0(sp)
  800f4c:	dec00104 	addi	sp,sp,4
  800f50:	f800283a 	ret

00800f54 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  800f54:	defff804 	addi	sp,sp,-32
  800f58:	dfc00715 	stw	ra,28(sp)
  800f5c:	df000615 	stw	fp,24(sp)
  800f60:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  800f64:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  800f68:	d0a03343 	ldbu	r2,-32563(gp)
  800f6c:	10803fcc 	andi	r2,r2,255
  800f70:	10800058 	cmpnei	r2,r2,1
  800f74:	1000281e 	bne	r2,zero,801018 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800f78:	0005303a 	rdctl	r2,status
  800f7c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800f80:	e0ffff17 	ldw	r3,-4(fp)
  800f84:	00bfff84 	movi	r2,-2
  800f88:	1884703a 	and	r2,r3,r2
  800f8c:	1001703a 	wrctl	status,r2
  
  return context;
  800f90:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  800f94:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  800f98:	d0a03303 	ldbu	r2,-32564(gp)
  800f9c:	10803fcc 	andi	r2,r2,255
  800fa0:	10001926 	beq	r2,zero,801008 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  800fa4:	d0a03303 	ldbu	r2,-32564(gp)
  800fa8:	10bfffc4 	addi	r2,r2,-1
  800fac:	d0a03305 	stb	r2,-32564(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  800fb0:	d0a03303 	ldbu	r2,-32564(gp)
  800fb4:	10803fcc 	andi	r2,r2,255
  800fb8:	10000e1e 	bne	r2,zero,800ff4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  800fbc:	d0a04103 	ldbu	r2,-32508(gp)
  800fc0:	10803fcc 	andi	r2,r2,255
  800fc4:	1000061e 	bne	r2,zero,800fe0 <OSSchedUnlock+0x8c>
  800fc8:	e0bffa17 	ldw	r2,-24(fp)
  800fcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800fd0:	e0bffb17 	ldw	r2,-20(fp)
  800fd4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  800fd8:	0801dfc0 	call	801dfc <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  800fdc:	00000e06 	br	801018 <OSSchedUnlock+0xc4>
  800fe0:	e0bffa17 	ldw	r2,-24(fp)
  800fe4:	e0bffc15 	stw	r2,-16(fp)
  800fe8:	e0bffc17 	ldw	r2,-16(fp)
  800fec:	1001703a 	wrctl	status,r2
  800ff0:	00000906 	br	801018 <OSSchedUnlock+0xc4>
  800ff4:	e0bffa17 	ldw	r2,-24(fp)
  800ff8:	e0bffd15 	stw	r2,-12(fp)
  800ffc:	e0bffd17 	ldw	r2,-12(fp)
  801000:	1001703a 	wrctl	status,r2
  801004:	00000406 	br	801018 <OSSchedUnlock+0xc4>
  801008:	e0bffa17 	ldw	r2,-24(fp)
  80100c:	e0bffe15 	stw	r2,-8(fp)
  801010:	e0bffe17 	ldw	r2,-8(fp)
  801014:	1001703a 	wrctl	status,r2
  801018:	0001883a 	nop
  80101c:	e037883a 	mov	sp,fp
  801020:	dfc00117 	ldw	ra,4(sp)
  801024:	df000017 	ldw	fp,0(sp)
  801028:	dec00204 	addi	sp,sp,8
  80102c:	f800283a 	ret

00801030 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  801030:	defffe04 	addi	sp,sp,-8
  801034:	dfc00115 	stw	ra,4(sp)
  801038:	df000015 	stw	fp,0(sp)
  80103c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  801040:	d0a03343 	ldbu	r2,-32563(gp)
  801044:	10803fcc 	andi	r2,r2,255
  801048:	10000f1e 	bne	r2,zero,801088 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80104c:	0801ecc0 	call	801ecc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  801050:	d0a03503 	ldbu	r2,-32556(gp)
  801054:	d0a03545 	stb	r2,-32555(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  801058:	d0a03503 	ldbu	r2,-32556(gp)
  80105c:	10c03fcc 	andi	r3,r2,255
  801060:	00802074 	movhi	r2,129
  801064:	10951304 	addi	r2,r2,21580
  801068:	18c7883a 	add	r3,r3,r3
  80106c:	18c7883a 	add	r3,r3,r3
  801070:	10c5883a 	add	r2,r2,r3
  801074:	10800017 	ldw	r2,0(r2)
  801078:	d0a03d15 	stw	r2,-32524(gp)
        OSTCBCur      = OSTCBHighRdy;
  80107c:	d0a03d17 	ldw	r2,-32524(gp)
  801080:	d0a04215 	stw	r2,-32504(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  801084:	080b6a00 	call	80b6a0 <OSStartHighRdy>
    }
}
  801088:	0001883a 	nop
  80108c:	e037883a 	mov	sp,fp
  801090:	dfc00117 	ldw	ra,4(sp)
  801094:	df000017 	ldw	fp,0(sp)
  801098:	dec00204 	addi	sp,sp,8
  80109c:	f800283a 	ret

008010a0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  8010a0:	defff904 	addi	sp,sp,-28
  8010a4:	dfc00615 	stw	ra,24(sp)
  8010a8:	df000515 	stw	fp,20(sp)
  8010ac:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8010b0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  8010b4:	01000084 	movi	r4,2
  8010b8:	08077a40 	call	8077a4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8010bc:	0005303a 	rdctl	r2,status
  8010c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8010c4:	e0fffc17 	ldw	r3,-16(fp)
  8010c8:	00bfff84 	movi	r2,-2
  8010cc:	1884703a 	and	r2,r3,r2
  8010d0:	1001703a 	wrctl	status,r2
  
  return context;
  8010d4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  8010d8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  8010dc:	d0203415 	stw	zero,-32560(gp)
  8010e0:	e0bffb17 	ldw	r2,-20(fp)
  8010e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8010e8:	e0bffd17 	ldw	r2,-12(fp)
  8010ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  8010f0:	01001904 	movi	r4,100
  8010f4:	08077a40 	call	8077a4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8010f8:	0005303a 	rdctl	r2,status
  8010fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801100:	e0fffe17 	ldw	r3,-8(fp)
  801104:	00bfff84 	movi	r2,-2
  801108:	1884703a 	and	r2,r3,r2
  80110c:	1001703a 	wrctl	status,r2
  
  return context;
  801110:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  801114:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  801118:	d0a03417 	ldw	r2,-32560(gp)
  80111c:	d0a03915 	stw	r2,-32540(gp)
    OSStatRdy    = OS_TRUE;
  801120:	00800044 	movi	r2,1
  801124:	d0a04505 	stb	r2,-32492(gp)
  801128:	e0bffb17 	ldw	r2,-20(fp)
  80112c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801130:	e0bfff17 	ldw	r2,-4(fp)
  801134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  801138:	0001883a 	nop
  80113c:	e037883a 	mov	sp,fp
  801140:	dfc00117 	ldw	ra,4(sp)
  801144:	df000017 	ldw	fp,0(sp)
  801148:	dec00204 	addi	sp,sp,8
  80114c:	f800283a 	ret

00801150 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  801150:	defff704 	addi	sp,sp,-36
  801154:	dfc00815 	stw	ra,32(sp)
  801158:	df000715 	stw	fp,28(sp)
  80115c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  801160:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  801164:	080b8c80 	call	80b8c8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801168:	0005303a 	rdctl	r2,status
  80116c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801170:	e0fffd17 	ldw	r3,-12(fp)
  801174:	00bfff84 	movi	r2,-2
  801178:	1884703a 	and	r2,r3,r2
  80117c:	1001703a 	wrctl	status,r2
  
  return context;
  801180:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  801184:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  801188:	d0a04317 	ldw	r2,-32500(gp)
  80118c:	10800044 	addi	r2,r2,1
  801190:	d0a04315 	stw	r2,-32500(gp)
  801194:	e0bffb17 	ldw	r2,-20(fp)
  801198:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80119c:	e0bfff17 	ldw	r2,-4(fp)
  8011a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  8011a4:	d0a03343 	ldbu	r2,-32563(gp)
  8011a8:	10803fcc 	andi	r2,r2,255
  8011ac:	10800058 	cmpnei	r2,r2,1
  8011b0:	10006a1e 	bne	r2,zero,80135c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  8011b4:	d0a03703 	ldbu	r2,-32548(gp)
  8011b8:	10803fcc 	andi	r2,r2,255
  8011bc:	10c00060 	cmpeqi	r3,r2,1
  8011c0:	1800061e 	bne	r3,zero,8011dc <OSTimeTick+0x8c>
  8011c4:	10c000a0 	cmpeqi	r3,r2,2
  8011c8:	1800061e 	bne	r3,zero,8011e4 <OSTimeTick+0x94>
  8011cc:	10000a1e 	bne	r2,zero,8011f8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  8011d0:	00800044 	movi	r2,1
  8011d4:	e0bffa05 	stb	r2,-24(fp)
                 break;
  8011d8:	00000b06 	br	801208 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  8011dc:	e03ffa05 	stb	zero,-24(fp)
                 break;
  8011e0:	00000906 	br	801208 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  8011e4:	00800044 	movi	r2,1
  8011e8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  8011ec:	00800044 	movi	r2,1
  8011f0:	d0a03705 	stb	r2,-32548(gp)
                 break;
  8011f4:	00000406 	br	801208 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  8011f8:	00800044 	movi	r2,1
  8011fc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  801200:	d0203705 	stb	zero,-32548(gp)
                 break;
  801204:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  801208:	e0bffa03 	ldbu	r2,-24(fp)
  80120c:	10005226 	beq	r2,zero,801358 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  801210:	d0a03617 	ldw	r2,-32552(gp)
  801214:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  801218:	00004906 	br	801340 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80121c:	0005303a 	rdctl	r2,status
  801220:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801224:	e0fffc17 	ldw	r3,-16(fp)
  801228:	00bfff84 	movi	r2,-2
  80122c:	1884703a 	and	r2,r3,r2
  801230:	1001703a 	wrctl	status,r2
  
  return context;
  801234:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  801238:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80123c:	e0bff917 	ldw	r2,-28(fp)
  801240:	10800b8b 	ldhu	r2,46(r2)
  801244:	10bfffcc 	andi	r2,r2,65535
  801248:	10003626 	beq	r2,zero,801324 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80124c:	e0bff917 	ldw	r2,-28(fp)
  801250:	10800b8b 	ldhu	r2,46(r2)
  801254:	10bfffc4 	addi	r2,r2,-1
  801258:	1007883a 	mov	r3,r2
  80125c:	e0bff917 	ldw	r2,-28(fp)
  801260:	10c00b8d 	sth	r3,46(r2)
  801264:	e0bff917 	ldw	r2,-28(fp)
  801268:	10800b8b 	ldhu	r2,46(r2)
  80126c:	10bfffcc 	andi	r2,r2,65535
  801270:	10002c1e 	bne	r2,zero,801324 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  801274:	e0bff917 	ldw	r2,-28(fp)
  801278:	10800c03 	ldbu	r2,48(r2)
  80127c:	10803fcc 	andi	r2,r2,255
  801280:	10800dcc 	andi	r2,r2,55
  801284:	10000b26 	beq	r2,zero,8012b4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  801288:	e0bff917 	ldw	r2,-28(fp)
  80128c:	10c00c03 	ldbu	r3,48(r2)
  801290:	00bff204 	movi	r2,-56
  801294:	1884703a 	and	r2,r3,r2
  801298:	1007883a 	mov	r3,r2
  80129c:	e0bff917 	ldw	r2,-28(fp)
  8012a0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8012a4:	e0bff917 	ldw	r2,-28(fp)
  8012a8:	00c00044 	movi	r3,1
  8012ac:	10c00c45 	stb	r3,49(r2)
  8012b0:	00000206 	br	8012bc <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8012b4:	e0bff917 	ldw	r2,-28(fp)
  8012b8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  8012bc:	e0bff917 	ldw	r2,-28(fp)
  8012c0:	10800c03 	ldbu	r2,48(r2)
  8012c4:	10803fcc 	andi	r2,r2,255
  8012c8:	1080020c 	andi	r2,r2,8
  8012cc:	1000151e 	bne	r2,zero,801324 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  8012d0:	e0bff917 	ldw	r2,-28(fp)
  8012d4:	10c00d83 	ldbu	r3,54(r2)
  8012d8:	d0a03f03 	ldbu	r2,-32516(gp)
  8012dc:	1884b03a 	or	r2,r3,r2
  8012e0:	d0a03f05 	stb	r2,-32516(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8012e4:	e0bff917 	ldw	r2,-28(fp)
  8012e8:	10800d03 	ldbu	r2,52(r2)
  8012ec:	10c03fcc 	andi	r3,r2,255
  8012f0:	e0bff917 	ldw	r2,-28(fp)
  8012f4:	10800d03 	ldbu	r2,52(r2)
  8012f8:	11003fcc 	andi	r4,r2,255
  8012fc:	d0a03f44 	addi	r2,gp,-32515
  801300:	2085883a 	add	r2,r4,r2
  801304:	11000003 	ldbu	r4,0(r2)
  801308:	e0bff917 	ldw	r2,-28(fp)
  80130c:	10800d43 	ldbu	r2,53(r2)
  801310:	2084b03a 	or	r2,r4,r2
  801314:	1009883a 	mov	r4,r2
  801318:	d0a03f44 	addi	r2,gp,-32515
  80131c:	1885883a 	add	r2,r3,r2
  801320:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  801324:	e0bff917 	ldw	r2,-28(fp)
  801328:	10800517 	ldw	r2,20(r2)
  80132c:	e0bff915 	stw	r2,-28(fp)
  801330:	e0bffb17 	ldw	r2,-20(fp)
  801334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801338:	e0bffe17 	ldw	r2,-8(fp)
  80133c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  801340:	e0bff917 	ldw	r2,-28(fp)
  801344:	10800c83 	ldbu	r2,50(r2)
  801348:	10803fcc 	andi	r2,r2,255
  80134c:	10800518 	cmpnei	r2,r2,20
  801350:	103fb21e 	bne	r2,zero,80121c <__alt_mem_epcs_flash_controller_0+0xff7f821c>
  801354:	00000106 	br	80135c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  801358:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80135c:	e037883a 	mov	sp,fp
  801360:	dfc00117 	ldw	ra,4(sp)
  801364:	df000017 	ldw	fp,0(sp)
  801368:	dec00204 	addi	sp,sp,8
  80136c:	f800283a 	ret

00801370 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  801370:	deffff04 	addi	sp,sp,-4
  801374:	df000015 	stw	fp,0(sp)
  801378:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80137c:	00804784 	movi	r2,286
}
  801380:	e037883a 	mov	sp,fp
  801384:	df000017 	ldw	fp,0(sp)
  801388:	dec00104 	addi	sp,sp,4
  80138c:	f800283a 	ret

00801390 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  801390:	deffff04 	addi	sp,sp,-4
  801394:	df000015 	stw	fp,0(sp)
  801398:	d839883a 	mov	fp,sp
}
  80139c:	0001883a 	nop
  8013a0:	e037883a 	mov	sp,fp
  8013a4:	df000017 	ldw	fp,0(sp)
  8013a8:	dec00104 	addi	sp,sp,4
  8013ac:	f800283a 	ret

008013b0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  8013b0:	defff804 	addi	sp,sp,-32
  8013b4:	dfc00715 	stw	ra,28(sp)
  8013b8:	df000615 	stw	fp,24(sp)
  8013bc:	df000604 	addi	fp,sp,24
  8013c0:	e13ffc15 	stw	r4,-16(fp)
  8013c4:	e17ffd15 	stw	r5,-12(fp)
  8013c8:	3007883a 	mov	r3,r6
  8013cc:	3805883a 	mov	r2,r7
  8013d0:	e0fffe05 	stb	r3,-8(fp)
  8013d4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  8013d8:	e0bffc17 	ldw	r2,-16(fp)
  8013dc:	10800283 	ldbu	r2,10(r2)
  8013e0:	10c03fcc 	andi	r3,r2,255
  8013e4:	00802074 	movhi	r2,129
  8013e8:	10b1c704 	addi	r2,r2,-14564
  8013ec:	10c5883a 	add	r2,r2,r3
  8013f0:	10800003 	ldbu	r2,0(r2)
  8013f4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  8013f8:	e0bffa03 	ldbu	r2,-24(fp)
  8013fc:	e0fffc17 	ldw	r3,-16(fp)
  801400:	1885883a 	add	r2,r3,r2
  801404:	108002c4 	addi	r2,r2,11
  801408:	10800003 	ldbu	r2,0(r2)
  80140c:	10c03fcc 	andi	r3,r2,255
  801410:	00802074 	movhi	r2,129
  801414:	10b1c704 	addi	r2,r2,-14564
  801418:	10c5883a 	add	r2,r2,r3
  80141c:	10800003 	ldbu	r2,0(r2)
  801420:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  801424:	e0bffa03 	ldbu	r2,-24(fp)
  801428:	100490fa 	slli	r2,r2,3
  80142c:	1007883a 	mov	r3,r2
  801430:	e0bffa43 	ldbu	r2,-23(fp)
  801434:	1885883a 	add	r2,r3,r2
  801438:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80143c:	e0fffa83 	ldbu	r3,-22(fp)
  801440:	00802074 	movhi	r2,129
  801444:	10951304 	addi	r2,r2,21580
  801448:	18c7883a 	add	r3,r3,r3
  80144c:	18c7883a 	add	r3,r3,r3
  801450:	10c5883a 	add	r2,r2,r3
  801454:	10800017 	ldw	r2,0(r2)
  801458:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80145c:	e0bffb17 	ldw	r2,-20(fp)
  801460:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  801464:	e0bffb17 	ldw	r2,-20(fp)
  801468:	e0fffd17 	ldw	r3,-12(fp)
  80146c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  801470:	e0bffb17 	ldw	r2,-20(fp)
  801474:	10800c03 	ldbu	r2,48(r2)
  801478:	1007883a 	mov	r3,r2
  80147c:	e0bffe03 	ldbu	r2,-8(fp)
  801480:	0084303a 	nor	r2,zero,r2
  801484:	1884703a 	and	r2,r3,r2
  801488:	1007883a 	mov	r3,r2
  80148c:	e0bffb17 	ldw	r2,-20(fp)
  801490:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  801494:	e0bffb17 	ldw	r2,-20(fp)
  801498:	e0ffff03 	ldbu	r3,-4(fp)
  80149c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  8014a0:	e0bffb17 	ldw	r2,-20(fp)
  8014a4:	10800c03 	ldbu	r2,48(r2)
  8014a8:	10803fcc 	andi	r2,r2,255
  8014ac:	1080020c 	andi	r2,r2,8
  8014b0:	1000111e 	bne	r2,zero,8014f8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8014b4:	e0bffb17 	ldw	r2,-20(fp)
  8014b8:	10c00d83 	ldbu	r3,54(r2)
  8014bc:	d0a03f03 	ldbu	r2,-32516(gp)
  8014c0:	1884b03a 	or	r2,r3,r2
  8014c4:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  8014c8:	e0fffa03 	ldbu	r3,-24(fp)
  8014cc:	e13ffa03 	ldbu	r4,-24(fp)
  8014d0:	d0a03f44 	addi	r2,gp,-32515
  8014d4:	2085883a 	add	r2,r4,r2
  8014d8:	11000003 	ldbu	r4,0(r2)
  8014dc:	e0bffb17 	ldw	r2,-20(fp)
  8014e0:	10800d43 	ldbu	r2,53(r2)
  8014e4:	2084b03a 	or	r2,r4,r2
  8014e8:	1009883a 	mov	r4,r2
  8014ec:	d0a03f44 	addi	r2,gp,-32515
  8014f0:	1885883a 	add	r2,r3,r2
  8014f4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8014f8:	e17ffc17 	ldw	r5,-16(fp)
  8014fc:	e13ffb17 	ldw	r4,-20(fp)
  801500:	08017a80 	call	8017a8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  801504:	e0bffb17 	ldw	r2,-20(fp)
  801508:	10800817 	ldw	r2,32(r2)
  80150c:	10000826 	beq	r2,zero,801530 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  801510:	e0bffb17 	ldw	r2,-20(fp)
  801514:	10800817 	ldw	r2,32(r2)
  801518:	100b883a 	mov	r5,r2
  80151c:	e13ffb17 	ldw	r4,-20(fp)
  801520:	08018600 	call	801860 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  801524:	e0bffb17 	ldw	r2,-20(fp)
  801528:	e0fffc17 	ldw	r3,-16(fp)
  80152c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  801530:	e0bffa83 	ldbu	r2,-22(fp)
}
  801534:	e037883a 	mov	sp,fp
  801538:	dfc00117 	ldw	ra,4(sp)
  80153c:	df000017 	ldw	fp,0(sp)
  801540:	dec00204 	addi	sp,sp,8
  801544:	f800283a 	ret

00801548 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  801548:	defffd04 	addi	sp,sp,-12
  80154c:	df000215 	stw	fp,8(sp)
  801550:	df000204 	addi	fp,sp,8
  801554:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  801558:	d0a04217 	ldw	r2,-32504(gp)
  80155c:	e0ffff17 	ldw	r3,-4(fp)
  801560:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  801564:	d0a04217 	ldw	r2,-32504(gp)
  801568:	10800d03 	ldbu	r2,52(r2)
  80156c:	10803fcc 	andi	r2,r2,255
  801570:	d0e04217 	ldw	r3,-32504(gp)
  801574:	18c00d03 	ldbu	r3,52(r3)
  801578:	18c03fcc 	andi	r3,r3,255
  80157c:	e13fff17 	ldw	r4,-4(fp)
  801580:	20c7883a 	add	r3,r4,r3
  801584:	18c002c4 	addi	r3,r3,11
  801588:	19000003 	ldbu	r4,0(r3)
  80158c:	d0e04217 	ldw	r3,-32504(gp)
  801590:	18c00d43 	ldbu	r3,53(r3)
  801594:	20c6b03a 	or	r3,r4,r3
  801598:	1809883a 	mov	r4,r3
  80159c:	e0ffff17 	ldw	r3,-4(fp)
  8015a0:	1885883a 	add	r2,r3,r2
  8015a4:	108002c4 	addi	r2,r2,11
  8015a8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8015ac:	e0bfff17 	ldw	r2,-4(fp)
  8015b0:	10c00283 	ldbu	r3,10(r2)
  8015b4:	d0a04217 	ldw	r2,-32504(gp)
  8015b8:	10800d83 	ldbu	r2,54(r2)
  8015bc:	1884b03a 	or	r2,r3,r2
  8015c0:	1007883a 	mov	r3,r2
  8015c4:	e0bfff17 	ldw	r2,-4(fp)
  8015c8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8015cc:	d0a04217 	ldw	r2,-32504(gp)
  8015d0:	10800d03 	ldbu	r2,52(r2)
  8015d4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8015d8:	e0fffe03 	ldbu	r3,-8(fp)
  8015dc:	e13ffe03 	ldbu	r4,-8(fp)
  8015e0:	d0a03f44 	addi	r2,gp,-32515
  8015e4:	2085883a 	add	r2,r4,r2
  8015e8:	10800003 	ldbu	r2,0(r2)
  8015ec:	1009883a 	mov	r4,r2
  8015f0:	d0a04217 	ldw	r2,-32504(gp)
  8015f4:	10800d43 	ldbu	r2,53(r2)
  8015f8:	0084303a 	nor	r2,zero,r2
  8015fc:	2084703a 	and	r2,r4,r2
  801600:	1009883a 	mov	r4,r2
  801604:	d0a03f44 	addi	r2,gp,-32515
  801608:	1885883a 	add	r2,r3,r2
  80160c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  801610:	e0fffe03 	ldbu	r3,-8(fp)
  801614:	d0a03f44 	addi	r2,gp,-32515
  801618:	1885883a 	add	r2,r3,r2
  80161c:	10800003 	ldbu	r2,0(r2)
  801620:	10803fcc 	andi	r2,r2,255
  801624:	1000071e 	bne	r2,zero,801644 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  801628:	d0a04217 	ldw	r2,-32504(gp)
  80162c:	10800d83 	ldbu	r2,54(r2)
  801630:	0084303a 	nor	r2,zero,r2
  801634:	1007883a 	mov	r3,r2
  801638:	d0a03f03 	ldbu	r2,-32516(gp)
  80163c:	1884703a 	and	r2,r3,r2
  801640:	d0a03f05 	stb	r2,-32516(gp)
    }
}
  801644:	0001883a 	nop
  801648:	e037883a 	mov	sp,fp
  80164c:	df000017 	ldw	fp,0(sp)
  801650:	dec00104 	addi	sp,sp,4
  801654:	f800283a 	ret

00801658 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  801658:	defffb04 	addi	sp,sp,-20
  80165c:	df000415 	stw	fp,16(sp)
  801660:	df000404 	addi	fp,sp,16
  801664:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  801668:	d0a04217 	ldw	r2,-32504(gp)
  80166c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  801670:	d0a04217 	ldw	r2,-32504(gp)
  801674:	e0ffff17 	ldw	r3,-4(fp)
  801678:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  80167c:	e0bfff17 	ldw	r2,-4(fp)
  801680:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	10800017 	ldw	r2,0(r2)
  80168c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  801690:	00002006 	br	801714 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  801694:	d0a04217 	ldw	r2,-32504(gp)
  801698:	10800d03 	ldbu	r2,52(r2)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	d0e04217 	ldw	r3,-32504(gp)
  8016a4:	18c00d03 	ldbu	r3,52(r3)
  8016a8:	18c03fcc 	andi	r3,r3,255
  8016ac:	e13ffd17 	ldw	r4,-12(fp)
  8016b0:	20c7883a 	add	r3,r4,r3
  8016b4:	18c002c4 	addi	r3,r3,11
  8016b8:	19000003 	ldbu	r4,0(r3)
  8016bc:	d0e04217 	ldw	r3,-32504(gp)
  8016c0:	18c00d43 	ldbu	r3,53(r3)
  8016c4:	20c6b03a 	or	r3,r4,r3
  8016c8:	1809883a 	mov	r4,r3
  8016cc:	e0fffd17 	ldw	r3,-12(fp)
  8016d0:	1885883a 	add	r2,r3,r2
  8016d4:	108002c4 	addi	r2,r2,11
  8016d8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8016dc:	e0bffd17 	ldw	r2,-12(fp)
  8016e0:	10c00283 	ldbu	r3,10(r2)
  8016e4:	d0a04217 	ldw	r2,-32504(gp)
  8016e8:	10800d83 	ldbu	r2,54(r2)
  8016ec:	1884b03a 	or	r2,r3,r2
  8016f0:	1007883a 	mov	r3,r2
  8016f4:	e0bffd17 	ldw	r2,-12(fp)
  8016f8:	10c00285 	stb	r3,10(r2)
        pevents++;
  8016fc:	e0bffc17 	ldw	r2,-16(fp)
  801700:	10800104 	addi	r2,r2,4
  801704:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10800017 	ldw	r2,0(r2)
  801710:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  801714:	e0bffd17 	ldw	r2,-12(fp)
  801718:	103fde1e 	bne	r2,zero,801694 <__alt_mem_epcs_flash_controller_0+0xff7f8694>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80171c:	d0a04217 	ldw	r2,-32504(gp)
  801720:	10800d03 	ldbu	r2,52(r2)
  801724:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  801728:	e0fffe03 	ldbu	r3,-8(fp)
  80172c:	e13ffe03 	ldbu	r4,-8(fp)
  801730:	d0a03f44 	addi	r2,gp,-32515
  801734:	2085883a 	add	r2,r4,r2
  801738:	10800003 	ldbu	r2,0(r2)
  80173c:	1009883a 	mov	r4,r2
  801740:	d0a04217 	ldw	r2,-32504(gp)
  801744:	10800d43 	ldbu	r2,53(r2)
  801748:	0084303a 	nor	r2,zero,r2
  80174c:	2084703a 	and	r2,r4,r2
  801750:	1009883a 	mov	r4,r2
  801754:	d0a03f44 	addi	r2,gp,-32515
  801758:	1885883a 	add	r2,r3,r2
  80175c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  801760:	e0fffe03 	ldbu	r3,-8(fp)
  801764:	d0a03f44 	addi	r2,gp,-32515
  801768:	1885883a 	add	r2,r3,r2
  80176c:	10800003 	ldbu	r2,0(r2)
  801770:	10803fcc 	andi	r2,r2,255
  801774:	1000071e 	bne	r2,zero,801794 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  801778:	d0a04217 	ldw	r2,-32504(gp)
  80177c:	10800d83 	ldbu	r2,54(r2)
  801780:	0084303a 	nor	r2,zero,r2
  801784:	1007883a 	mov	r3,r2
  801788:	d0a03f03 	ldbu	r2,-32516(gp)
  80178c:	1884703a 	and	r2,r3,r2
  801790:	d0a03f05 	stb	r2,-32516(gp)
    }
}
  801794:	0001883a 	nop
  801798:	e037883a 	mov	sp,fp
  80179c:	df000017 	ldw	fp,0(sp)
  8017a0:	dec00104 	addi	sp,sp,4
  8017a4:	f800283a 	ret

008017a8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  8017a8:	defffc04 	addi	sp,sp,-16
  8017ac:	df000315 	stw	fp,12(sp)
  8017b0:	df000304 	addi	fp,sp,12
  8017b4:	e13ffe15 	stw	r4,-8(fp)
  8017b8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  8017bc:	e0bffe17 	ldw	r2,-8(fp)
  8017c0:	10800d03 	ldbu	r2,52(r2)
  8017c4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8017c8:	e0bffd03 	ldbu	r2,-12(fp)
  8017cc:	e0fffd03 	ldbu	r3,-12(fp)
  8017d0:	e13fff17 	ldw	r4,-4(fp)
  8017d4:	20c7883a 	add	r3,r4,r3
  8017d8:	18c002c4 	addi	r3,r3,11
  8017dc:	18c00003 	ldbu	r3,0(r3)
  8017e0:	1809883a 	mov	r4,r3
  8017e4:	e0fffe17 	ldw	r3,-8(fp)
  8017e8:	18c00d43 	ldbu	r3,53(r3)
  8017ec:	00c6303a 	nor	r3,zero,r3
  8017f0:	20c6703a 	and	r3,r4,r3
  8017f4:	1809883a 	mov	r4,r3
  8017f8:	e0ffff17 	ldw	r3,-4(fp)
  8017fc:	1885883a 	add	r2,r3,r2
  801800:	108002c4 	addi	r2,r2,11
  801804:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  801808:	e0bffd03 	ldbu	r2,-12(fp)
  80180c:	e0ffff17 	ldw	r3,-4(fp)
  801810:	1885883a 	add	r2,r3,r2
  801814:	108002c4 	addi	r2,r2,11
  801818:	10800003 	ldbu	r2,0(r2)
  80181c:	10803fcc 	andi	r2,r2,255
  801820:	10000a1e 	bne	r2,zero,80184c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  801824:	e0bfff17 	ldw	r2,-4(fp)
  801828:	10800283 	ldbu	r2,10(r2)
  80182c:	1007883a 	mov	r3,r2
  801830:	e0bffe17 	ldw	r2,-8(fp)
  801834:	10800d83 	ldbu	r2,54(r2)
  801838:	0084303a 	nor	r2,zero,r2
  80183c:	1884703a 	and	r2,r3,r2
  801840:	1007883a 	mov	r3,r2
  801844:	e0bfff17 	ldw	r2,-4(fp)
  801848:	10c00285 	stb	r3,10(r2)
    }
}
  80184c:	0001883a 	nop
  801850:	e037883a 	mov	sp,fp
  801854:	df000017 	ldw	fp,0(sp)
  801858:	dec00104 	addi	sp,sp,4
  80185c:	f800283a 	ret

00801860 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  801860:	defffa04 	addi	sp,sp,-24
  801864:	df000515 	stw	fp,20(sp)
  801868:	df000504 	addi	fp,sp,20
  80186c:	e13ffe15 	stw	r4,-8(fp)
  801870:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  801874:	e0bffe17 	ldw	r2,-8(fp)
  801878:	10800d03 	ldbu	r2,52(r2)
  80187c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  801880:	e0bffe17 	ldw	r2,-8(fp)
  801884:	10800d83 	ldbu	r2,54(r2)
  801888:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  80188c:	e0bffe17 	ldw	r2,-8(fp)
  801890:	10800d43 	ldbu	r2,53(r2)
  801894:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  801898:	e0bfff17 	ldw	r2,-4(fp)
  80189c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  8018a0:	e0bffb17 	ldw	r2,-20(fp)
  8018a4:	10800017 	ldw	r2,0(r2)
  8018a8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8018ac:	00002506 	br	801944 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  8018b0:	e0bffd03 	ldbu	r2,-12(fp)
  8018b4:	e0fffd03 	ldbu	r3,-12(fp)
  8018b8:	e13ffc17 	ldw	r4,-16(fp)
  8018bc:	20c7883a 	add	r3,r4,r3
  8018c0:	18c002c4 	addi	r3,r3,11
  8018c4:	18c00003 	ldbu	r3,0(r3)
  8018c8:	1809883a 	mov	r4,r3
  8018cc:	e0fffd83 	ldbu	r3,-10(fp)
  8018d0:	00c6303a 	nor	r3,zero,r3
  8018d4:	20c6703a 	and	r3,r4,r3
  8018d8:	1809883a 	mov	r4,r3
  8018dc:	e0fffc17 	ldw	r3,-16(fp)
  8018e0:	1885883a 	add	r2,r3,r2
  8018e4:	108002c4 	addi	r2,r2,11
  8018e8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  8018ec:	e0bffd03 	ldbu	r2,-12(fp)
  8018f0:	e0fffc17 	ldw	r3,-16(fp)
  8018f4:	1885883a 	add	r2,r3,r2
  8018f8:	108002c4 	addi	r2,r2,11
  8018fc:	10800003 	ldbu	r2,0(r2)
  801900:	10803fcc 	andi	r2,r2,255
  801904:	1000091e 	bne	r2,zero,80192c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  801908:	e0bffc17 	ldw	r2,-16(fp)
  80190c:	10800283 	ldbu	r2,10(r2)
  801910:	1007883a 	mov	r3,r2
  801914:	e0bffd43 	ldbu	r2,-11(fp)
  801918:	0084303a 	nor	r2,zero,r2
  80191c:	1884703a 	and	r2,r3,r2
  801920:	1007883a 	mov	r3,r2
  801924:	e0bffc17 	ldw	r2,-16(fp)
  801928:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80192c:	e0bffb17 	ldw	r2,-20(fp)
  801930:	10800104 	addi	r2,r2,4
  801934:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  801938:	e0bffb17 	ldw	r2,-20(fp)
  80193c:	10800017 	ldw	r2,0(r2)
  801940:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  801944:	e0bffc17 	ldw	r2,-16(fp)
  801948:	103fd91e 	bne	r2,zero,8018b0 <__alt_mem_epcs_flash_controller_0+0xff7f88b0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80194c:	0001883a 	nop
  801950:	e037883a 	mov	sp,fp
  801954:	df000017 	ldw	fp,0(sp)
  801958:	dec00104 	addi	sp,sp,4
  80195c:	f800283a 	ret

00801960 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  801960:	defffc04 	addi	sp,sp,-16
  801964:	df000315 	stw	fp,12(sp)
  801968:	df000304 	addi	fp,sp,12
  80196c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  801970:	e0bfff17 	ldw	r2,-4(fp)
  801974:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  801978:	e0bfff17 	ldw	r2,-4(fp)
  80197c:	108002c4 	addi	r2,r2,11
  801980:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  801984:	e03ffe05 	stb	zero,-8(fp)
  801988:	00000706 	br	8019a8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  80198c:	e0bffd17 	ldw	r2,-12(fp)
  801990:	10c00044 	addi	r3,r2,1
  801994:	e0fffd15 	stw	r3,-12(fp)
  801998:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80199c:	e0bffe03 	ldbu	r2,-8(fp)
  8019a0:	10800044 	addi	r2,r2,1
  8019a4:	e0bffe05 	stb	r2,-8(fp)
  8019a8:	e0bffe03 	ldbu	r2,-8(fp)
  8019ac:	108000f0 	cmpltui	r2,r2,3
  8019b0:	103ff61e 	bne	r2,zero,80198c <__alt_mem_epcs_flash_controller_0+0xff7f898c>
        *ptbl++ = 0;
    }
}
  8019b4:	0001883a 	nop
  8019b8:	e037883a 	mov	sp,fp
  8019bc:	df000017 	ldw	fp,0(sp)
  8019c0:	dec00104 	addi	sp,sp,4
  8019c4:	f800283a 	ret

008019c8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8019c8:	defffb04 	addi	sp,sp,-20
  8019cc:	dfc00415 	stw	ra,16(sp)
  8019d0:	df000315 	stw	fp,12(sp)
  8019d4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8019d8:	0142d004 	movi	r5,2880
  8019dc:	01002074 	movhi	r4,129
  8019e0:	2110ff04 	addi	r4,r4,17404
  8019e4:	0801d400 	call	801d40 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8019e8:	00802074 	movhi	r2,129
  8019ec:	1090ff04 	addi	r2,r2,17404
  8019f0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  8019f4:	00802074 	movhi	r2,129
  8019f8:	10910b04 	addi	r2,r2,17452
  8019fc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  801a00:	e03ffd0d 	sth	zero,-12(fp)
  801a04:	00001306 	br	801a54 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  801a08:	e0bffe17 	ldw	r2,-8(fp)
  801a0c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  801a10:	e0bffe17 	ldw	r2,-8(fp)
  801a14:	e0ffff17 	ldw	r3,-4(fp)
  801a18:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  801a1c:	e0bffe17 	ldw	r2,-8(fp)
  801a20:	00c00fc4 	movi	r3,63
  801a24:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  801a28:	e0bffe17 	ldw	r2,-8(fp)
  801a2c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  801a30:	e0bffe17 	ldw	r2,-8(fp)
  801a34:	10800c04 	addi	r2,r2,48
  801a38:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  801a3c:	e0bfff17 	ldw	r2,-4(fp)
  801a40:	10800c04 	addi	r2,r2,48
  801a44:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  801a48:	e0bffd0b 	ldhu	r2,-12(fp)
  801a4c:	10800044 	addi	r2,r2,1
  801a50:	e0bffd0d 	sth	r2,-12(fp)
  801a54:	e0bffd0b 	ldhu	r2,-12(fp)
  801a58:	10800ef0 	cmpltui	r2,r2,59
  801a5c:	103fea1e 	bne	r2,zero,801a08 <__alt_mem_epcs_flash_controller_0+0xff7f8a08>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  801a60:	e0bffe17 	ldw	r2,-8(fp)
  801a64:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  801a68:	e0bffe17 	ldw	r2,-8(fp)
  801a6c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  801a70:	e0bffe17 	ldw	r2,-8(fp)
  801a74:	00c00fc4 	movi	r3,63
  801a78:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  801a7c:	e0bffe17 	ldw	r2,-8(fp)
  801a80:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  801a84:	00802074 	movhi	r2,129
  801a88:	1090ff04 	addi	r2,r2,17404
  801a8c:	d0a04015 	stw	r2,-32512(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  801a90:	0001883a 	nop
  801a94:	e037883a 	mov	sp,fp
  801a98:	dfc00117 	ldw	ra,4(sp)
  801a9c:	df000017 	ldw	fp,0(sp)
  801aa0:	dec00204 	addi	sp,sp,8
  801aa4:	f800283a 	ret

00801aa8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  801aa8:	deffff04 	addi	sp,sp,-4
  801aac:	df000015 	stw	fp,0(sp)
  801ab0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  801ab4:	d0204315 	stw	zero,-32500(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  801ab8:	d0204105 	stb	zero,-32508(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  801abc:	d0203305 	stb	zero,-32564(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  801ac0:	d0203b45 	stb	zero,-32531(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  801ac4:	d0203345 	stb	zero,-32563(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  801ac8:	d0203815 	stw	zero,-32544(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  801acc:	d0203415 	stw	zero,-32560(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  801ad0:	d0204615 	stw	zero,-32488(gp)
    OSIdleCtrMax  = 0L;
  801ad4:	d0203915 	stw	zero,-32540(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  801ad8:	d0204505 	stb	zero,-32492(gp)
#endif
}
  801adc:	0001883a 	nop
  801ae0:	e037883a 	mov	sp,fp
  801ae4:	df000017 	ldw	fp,0(sp)
  801ae8:	dec00104 	addi	sp,sp,4
  801aec:	f800283a 	ret

00801af0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  801af0:	defffd04 	addi	sp,sp,-12
  801af4:	df000215 	stw	fp,8(sp)
  801af8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  801afc:	d0203f05 	stb	zero,-32516(gp)
    prdytbl       = &OSRdyTbl[0];
  801b00:	d0a03f44 	addi	r2,gp,-32515
  801b04:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  801b08:	e03ffe05 	stb	zero,-8(fp)
  801b0c:	00000706 	br	801b2c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  801b10:	e0bfff17 	ldw	r2,-4(fp)
  801b14:	10c00044 	addi	r3,r2,1
  801b18:	e0ffff15 	stw	r3,-4(fp)
  801b1c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  801b20:	e0bffe03 	ldbu	r2,-8(fp)
  801b24:	10800044 	addi	r2,r2,1
  801b28:	e0bffe05 	stb	r2,-8(fp)
  801b2c:	e0bffe03 	ldbu	r2,-8(fp)
  801b30:	108000f0 	cmpltui	r2,r2,3
  801b34:	103ff61e 	bne	r2,zero,801b10 <__alt_mem_epcs_flash_controller_0+0xff7f8b10>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  801b38:	d0203545 	stb	zero,-32555(gp)
    OSPrioHighRdy = 0;
  801b3c:	d0203505 	stb	zero,-32556(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  801b40:	d0203d15 	stw	zero,-32524(gp)
    OSTCBCur      = (OS_TCB *)0;
  801b44:	d0204215 	stw	zero,-32504(gp)
}
  801b48:	0001883a 	nop
  801b4c:	e037883a 	mov	sp,fp
  801b50:	df000017 	ldw	fp,0(sp)
  801b54:	dec00104 	addi	sp,sp,4
  801b58:	f800283a 	ret

00801b5c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  801b5c:	defff804 	addi	sp,sp,-32
  801b60:	dfc00715 	stw	ra,28(sp)
  801b64:	df000615 	stw	fp,24(sp)
  801b68:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  801b6c:	008000c4 	movi	r2,3
  801b70:	d8800415 	stw	r2,16(sp)
  801b74:	d8000315 	stw	zero,12(sp)
  801b78:	00808004 	movi	r2,512
  801b7c:	d8800215 	stw	r2,8(sp)
  801b80:	00802074 	movhi	r2,129
  801b84:	108eff04 	addi	r2,r2,15356
  801b88:	d8800115 	stw	r2,4(sp)
  801b8c:	00bfffd4 	movui	r2,65535
  801b90:	d8800015 	stw	r2,0(sp)
  801b94:	01c00504 	movi	r7,20
  801b98:	01802074 	movhi	r6,129
  801b9c:	3190fe04 	addi	r6,r6,17400
  801ba0:	000b883a 	mov	r5,zero
  801ba4:	01002034 	movhi	r4,128
  801ba8:	21080204 	addi	r4,r4,8200
  801bac:	08066d40 	call	8066d4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  801bb0:	e1bfff04 	addi	r6,fp,-4
  801bb4:	01402074 	movhi	r5,129
  801bb8:	29720704 	addi	r5,r5,-14308
  801bbc:	01000504 	movi	r4,20
  801bc0:	0806ee40 	call	806ee4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  801bc4:	0001883a 	nop
  801bc8:	e037883a 	mov	sp,fp
  801bcc:	dfc00117 	ldw	ra,4(sp)
  801bd0:	df000017 	ldw	fp,0(sp)
  801bd4:	dec00204 	addi	sp,sp,8
  801bd8:	f800283a 	ret

00801bdc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  801bdc:	defff804 	addi	sp,sp,-32
  801be0:	dfc00715 	stw	ra,28(sp)
  801be4:	df000615 	stw	fp,24(sp)
  801be8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  801bec:	008000c4 	movi	r2,3
  801bf0:	d8800415 	stw	r2,16(sp)
  801bf4:	d8000315 	stw	zero,12(sp)
  801bf8:	00808004 	movi	r2,512
  801bfc:	d8800215 	stw	r2,8(sp)
  801c00:	00802074 	movhi	r2,129
  801c04:	108c8704 	addi	r2,r2,12828
  801c08:	d8800115 	stw	r2,4(sp)
  801c0c:	00bfff94 	movui	r2,65534
  801c10:	d8800015 	stw	r2,0(sp)
  801c14:	01c004c4 	movi	r7,19
  801c18:	01802074 	movhi	r6,129
  801c1c:	318e8604 	addi	r6,r6,14872
  801c20:	000b883a 	mov	r5,zero
  801c24:	01002034 	movhi	r4,128
  801c28:	21081904 	addi	r4,r4,8292
  801c2c:	08066d40 	call	8066d4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  801c30:	e1bfff04 	addi	r6,fp,-4
  801c34:	01402074 	movhi	r5,129
  801c38:	29720b04 	addi	r5,r5,-14292
  801c3c:	010004c4 	movi	r4,19
  801c40:	0806ee40 	call	806ee4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  801c44:	0001883a 	nop
  801c48:	e037883a 	mov	sp,fp
  801c4c:	dfc00117 	ldw	ra,4(sp)
  801c50:	df000017 	ldw	fp,0(sp)
  801c54:	dec00204 	addi	sp,sp,8
  801c58:	f800283a 	ret

00801c5c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  801c5c:	defffb04 	addi	sp,sp,-20
  801c60:	dfc00415 	stw	ra,16(sp)
  801c64:	df000315 	stw	fp,12(sp)
  801c68:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  801c6c:	01414404 	movi	r5,1296
  801c70:	01002074 	movhi	r4,129
  801c74:	2113cf04 	addi	r4,r4,20284
  801c78:	0801d400 	call	801d40 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  801c7c:	01401504 	movi	r5,84
  801c80:	01002074 	movhi	r4,129
  801c84:	21151304 	addi	r4,r4,21580
  801c88:	0801d400 	call	801d40 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  801c8c:	00802074 	movhi	r2,129
  801c90:	1093cf04 	addi	r2,r2,20284
  801c94:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  801c98:	00802074 	movhi	r2,129
  801c9c:	1093ea04 	addi	r2,r2,20392
  801ca0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  801ca4:	e03ffd05 	stb	zero,-12(fp)
  801ca8:	00001106 	br	801cf0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  801cac:	e0bffe17 	ldw	r2,-8(fp)
  801cb0:	e0ffff17 	ldw	r3,-4(fp)
  801cb4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  801cb8:	e0bffe17 	ldw	r2,-8(fp)
  801cbc:	00c00fc4 	movi	r3,63
  801cc0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  801cc4:	e0bffe17 	ldw	r2,-8(fp)
  801cc8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  801ccc:	e0bffe17 	ldw	r2,-8(fp)
  801cd0:	10801b04 	addi	r2,r2,108
  801cd4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  801cd8:	e0bfff17 	ldw	r2,-4(fp)
  801cdc:	10801b04 	addi	r2,r2,108
  801ce0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  801ce4:	e0bffd03 	ldbu	r2,-12(fp)
  801ce8:	10800044 	addi	r2,r2,1
  801cec:	e0bffd05 	stb	r2,-12(fp)
  801cf0:	e0bffd03 	ldbu	r2,-12(fp)
  801cf4:	108002f0 	cmpltui	r2,r2,11
  801cf8:	103fec1e 	bne	r2,zero,801cac <__alt_mem_epcs_flash_controller_0+0xff7f8cac>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  801cfc:	e0bffe17 	ldw	r2,-8(fp)
  801d00:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  801d04:	e0bffe17 	ldw	r2,-8(fp)
  801d08:	00c00fc4 	movi	r3,63
  801d0c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  801d10:	e0bffe17 	ldw	r2,-8(fp)
  801d14:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  801d18:	d0203615 	stw	zero,-32552(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  801d1c:	00802074 	movhi	r2,129
  801d20:	1093cf04 	addi	r2,r2,20284
  801d24:	d0a03a15 	stw	r2,-32536(gp)
}
  801d28:	0001883a 	nop
  801d2c:	e037883a 	mov	sp,fp
  801d30:	dfc00117 	ldw	ra,4(sp)
  801d34:	df000017 	ldw	fp,0(sp)
  801d38:	dec00204 	addi	sp,sp,8
  801d3c:	f800283a 	ret

00801d40 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  801d40:	defffd04 	addi	sp,sp,-12
  801d44:	df000215 	stw	fp,8(sp)
  801d48:	df000204 	addi	fp,sp,8
  801d4c:	e13ffe15 	stw	r4,-8(fp)
  801d50:	2805883a 	mov	r2,r5
  801d54:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  801d58:	00000706 	br	801d78 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  801d5c:	e0bffe17 	ldw	r2,-8(fp)
  801d60:	10c00044 	addi	r3,r2,1
  801d64:	e0fffe15 	stw	r3,-8(fp)
  801d68:	10000005 	stb	zero,0(r2)
        size--;
  801d6c:	e0bfff0b 	ldhu	r2,-4(fp)
  801d70:	10bfffc4 	addi	r2,r2,-1
  801d74:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  801d78:	e0bfff0b 	ldhu	r2,-4(fp)
  801d7c:	103ff71e 	bne	r2,zero,801d5c <__alt_mem_epcs_flash_controller_0+0xff7f8d5c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  801d80:	0001883a 	nop
  801d84:	e037883a 	mov	sp,fp
  801d88:	df000017 	ldw	fp,0(sp)
  801d8c:	dec00104 	addi	sp,sp,4
  801d90:	f800283a 	ret

00801d94 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  801d94:	defffc04 	addi	sp,sp,-16
  801d98:	df000315 	stw	fp,12(sp)
  801d9c:	df000304 	addi	fp,sp,12
  801da0:	e13ffd15 	stw	r4,-12(fp)
  801da4:	e17ffe15 	stw	r5,-8(fp)
  801da8:	3005883a 	mov	r2,r6
  801dac:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  801db0:	00000b06 	br	801de0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  801db4:	e0bffd17 	ldw	r2,-12(fp)
  801db8:	10c00044 	addi	r3,r2,1
  801dbc:	e0fffd15 	stw	r3,-12(fp)
  801dc0:	e0fffe17 	ldw	r3,-8(fp)
  801dc4:	19000044 	addi	r4,r3,1
  801dc8:	e13ffe15 	stw	r4,-8(fp)
  801dcc:	18c00003 	ldbu	r3,0(r3)
  801dd0:	10c00005 	stb	r3,0(r2)
        size--;
  801dd4:	e0bfff0b 	ldhu	r2,-4(fp)
  801dd8:	10bfffc4 	addi	r2,r2,-1
  801ddc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  801de0:	e0bfff0b 	ldhu	r2,-4(fp)
  801de4:	103ff31e 	bne	r2,zero,801db4 <__alt_mem_epcs_flash_controller_0+0xff7f8db4>
        *pdest++ = *psrc++;
        size--;
    }
}
  801de8:	0001883a 	nop
  801dec:	e037883a 	mov	sp,fp
  801df0:	df000017 	ldw	fp,0(sp)
  801df4:	dec00104 	addi	sp,sp,4
  801df8:	f800283a 	ret

00801dfc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  801dfc:	defffb04 	addi	sp,sp,-20
  801e00:	dfc00415 	stw	ra,16(sp)
  801e04:	df000315 	stw	fp,12(sp)
  801e08:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  801e0c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801e10:	0005303a 	rdctl	r2,status
  801e14:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801e18:	e0ffff17 	ldw	r3,-4(fp)
  801e1c:	00bfff84 	movi	r2,-2
  801e20:	1884703a 	and	r2,r3,r2
  801e24:	1001703a 	wrctl	status,r2
  
  return context;
  801e28:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  801e2c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  801e30:	d0a04103 	ldbu	r2,-32508(gp)
  801e34:	10803fcc 	andi	r2,r2,255
  801e38:	10001a1e 	bne	r2,zero,801ea4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  801e3c:	d0a03303 	ldbu	r2,-32564(gp)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1000171e 	bne	r2,zero,801ea4 <OS_Sched+0xa8>
            OS_SchedNew();
  801e48:	0801ecc0 	call	801ecc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  801e4c:	d0e03503 	ldbu	r3,-32556(gp)
  801e50:	d0a03543 	ldbu	r2,-32555(gp)
  801e54:	18c03fcc 	andi	r3,r3,255
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	18801126 	beq	r3,r2,801ea4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  801e60:	d0a03503 	ldbu	r2,-32556(gp)
  801e64:	10c03fcc 	andi	r3,r2,255
  801e68:	00802074 	movhi	r2,129
  801e6c:	10951304 	addi	r2,r2,21580
  801e70:	18c7883a 	add	r3,r3,r3
  801e74:	18c7883a 	add	r3,r3,r3
  801e78:	10c5883a 	add	r2,r2,r3
  801e7c:	10800017 	ldw	r2,0(r2)
  801e80:	d0a03d15 	stw	r2,-32524(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  801e84:	d0a03d17 	ldw	r2,-32524(gp)
  801e88:	10c00e17 	ldw	r3,56(r2)
  801e8c:	18c00044 	addi	r3,r3,1
  801e90:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  801e94:	d0a03817 	ldw	r2,-32544(gp)
  801e98:	10800044 	addi	r2,r2,1
  801e9c:	d0a03815 	stw	r2,-32544(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  801ea0:	080b6140 	call	80b614 <OSCtxSw>
  801ea4:	e0bffd17 	ldw	r2,-12(fp)
  801ea8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801eac:	e0bffe17 	ldw	r2,-8(fp)
  801eb0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  801eb4:	0001883a 	nop
  801eb8:	e037883a 	mov	sp,fp
  801ebc:	dfc00117 	ldw	ra,4(sp)
  801ec0:	df000017 	ldw	fp,0(sp)
  801ec4:	dec00204 	addi	sp,sp,8
  801ec8:	f800283a 	ret

00801ecc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  801ecc:	defffe04 	addi	sp,sp,-8
  801ed0:	df000115 	stw	fp,4(sp)
  801ed4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  801ed8:	d0a03f03 	ldbu	r2,-32516(gp)
  801edc:	10c03fcc 	andi	r3,r2,255
  801ee0:	00802074 	movhi	r2,129
  801ee4:	10b1c704 	addi	r2,r2,-14564
  801ee8:	10c5883a 	add	r2,r2,r3
  801eec:	10800003 	ldbu	r2,0(r2)
  801ef0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  801ef4:	e0bfff03 	ldbu	r2,-4(fp)
  801ef8:	100490fa 	slli	r2,r2,3
  801efc:	1009883a 	mov	r4,r2
  801f00:	e0ffff03 	ldbu	r3,-4(fp)
  801f04:	d0a03f44 	addi	r2,gp,-32515
  801f08:	1885883a 	add	r2,r3,r2
  801f0c:	10800003 	ldbu	r2,0(r2)
  801f10:	10c03fcc 	andi	r3,r2,255
  801f14:	00802074 	movhi	r2,129
  801f18:	10b1c704 	addi	r2,r2,-14564
  801f1c:	10c5883a 	add	r2,r2,r3
  801f20:	10800003 	ldbu	r2,0(r2)
  801f24:	2085883a 	add	r2,r4,r2
  801f28:	d0a03505 	stb	r2,-32556(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  801f2c:	0001883a 	nop
  801f30:	e037883a 	mov	sp,fp
  801f34:	df000017 	ldw	fp,0(sp)
  801f38:	dec00104 	addi	sp,sp,4
  801f3c:	f800283a 	ret

00801f40 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  801f40:	defffc04 	addi	sp,sp,-16
  801f44:	df000315 	stw	fp,12(sp)
  801f48:	df000304 	addi	fp,sp,12
  801f4c:	e13ffe15 	stw	r4,-8(fp)
  801f50:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  801f54:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  801f58:	00000b06 	br	801f88 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  801f5c:	e0bffe17 	ldw	r2,-8(fp)
  801f60:	10c00044 	addi	r3,r2,1
  801f64:	e0fffe15 	stw	r3,-8(fp)
  801f68:	e0ffff17 	ldw	r3,-4(fp)
  801f6c:	19000044 	addi	r4,r3,1
  801f70:	e13fff15 	stw	r4,-4(fp)
  801f74:	18c00003 	ldbu	r3,0(r3)
  801f78:	10c00005 	stb	r3,0(r2)
        len++;
  801f7c:	e0bffd03 	ldbu	r2,-12(fp)
  801f80:	10800044 	addi	r2,r2,1
  801f84:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  801f88:	e0bfff17 	ldw	r2,-4(fp)
  801f8c:	10800003 	ldbu	r2,0(r2)
  801f90:	10803fcc 	andi	r2,r2,255
  801f94:	103ff11e 	bne	r2,zero,801f5c <__alt_mem_epcs_flash_controller_0+0xff7f8f5c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  801f98:	e0bffe17 	ldw	r2,-8(fp)
  801f9c:	10000005 	stb	zero,0(r2)
    return (len);
  801fa0:	e0bffd03 	ldbu	r2,-12(fp)
}
  801fa4:	e037883a 	mov	sp,fp
  801fa8:	df000017 	ldw	fp,0(sp)
  801fac:	dec00104 	addi	sp,sp,4
  801fb0:	f800283a 	ret

00801fb4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  801fb4:	defffd04 	addi	sp,sp,-12
  801fb8:	df000215 	stw	fp,8(sp)
  801fbc:	df000204 	addi	fp,sp,8
  801fc0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  801fc4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  801fc8:	00000606 	br	801fe4 <OS_StrLen+0x30>
        psrc++;
  801fcc:	e0bfff17 	ldw	r2,-4(fp)
  801fd0:	10800044 	addi	r2,r2,1
  801fd4:	e0bfff15 	stw	r2,-4(fp)
        len++;
  801fd8:	e0bffe03 	ldbu	r2,-8(fp)
  801fdc:	10800044 	addi	r2,r2,1
  801fe0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  801fe4:	e0bfff17 	ldw	r2,-4(fp)
  801fe8:	10800003 	ldbu	r2,0(r2)
  801fec:	10803fcc 	andi	r2,r2,255
  801ff0:	103ff61e 	bne	r2,zero,801fcc <__alt_mem_epcs_flash_controller_0+0xff7f8fcc>
        psrc++;
        len++;
    }
    return (len);
  801ff4:	e0bffe03 	ldbu	r2,-8(fp)
}
  801ff8:	e037883a 	mov	sp,fp
  801ffc:	df000017 	ldw	fp,0(sp)
  802000:	dec00104 	addi	sp,sp,4
  802004:	f800283a 	ret

00802008 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  802008:	defffa04 	addi	sp,sp,-24
  80200c:	dfc00515 	stw	ra,20(sp)
  802010:	df000415 	stw	fp,16(sp)
  802014:	df000404 	addi	fp,sp,16
  802018:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80201c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802020:	0005303a 	rdctl	r2,status
  802024:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802028:	e0fffd17 	ldw	r3,-12(fp)
  80202c:	00bfff84 	movi	r2,-2
  802030:	1884703a 	and	r2,r3,r2
  802034:	1001703a 	wrctl	status,r2
  
  return context;
  802038:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80203c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  802040:	d0a03417 	ldw	r2,-32560(gp)
  802044:	10800044 	addi	r2,r2,1
  802048:	d0a03415 	stw	r2,-32560(gp)
  80204c:	e0bffc17 	ldw	r2,-16(fp)
  802050:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802054:	e0bffe17 	ldw	r2,-8(fp)
  802058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80205c:	080b9280 	call	80b928 <OSTaskIdleHook>
    }
  802060:	003fef06 	br	802020 <__alt_mem_epcs_flash_controller_0+0xff7f9020>

00802064 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  802064:	defffa04 	addi	sp,sp,-24
  802068:	dfc00515 	stw	ra,20(sp)
  80206c:	df000415 	stw	fp,16(sp)
  802070:	df000404 	addi	fp,sp,16
  802074:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  802078:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80207c:	00000206 	br	802088 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  802080:	01003204 	movi	r4,200
  802084:	08077a40 	call	8077a4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  802088:	d0a04503 	ldbu	r2,-32492(gp)
  80208c:	10803fcc 	andi	r2,r2,255
  802090:	103ffb26 	beq	r2,zero,802080 <__alt_mem_epcs_flash_controller_0+0xff7f9080>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  802094:	d0a03917 	ldw	r2,-32540(gp)
  802098:	01401904 	movi	r5,100
  80209c:	1009883a 	mov	r4,r2
  8020a0:	080c5f00 	call	80c5f0 <__udivsi3>
  8020a4:	d0a03915 	stw	r2,-32540(gp)
    if (OSIdleCtrMax == 0L) {
  8020a8:	d0a03917 	ldw	r2,-32540(gp)
  8020ac:	1000031e 	bne	r2,zero,8020bc <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  8020b0:	d0203b05 	stb	zero,-32532(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  8020b4:	01003fc4 	movi	r4,255
  8020b8:	080742c0 	call	80742c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8020bc:	0005303a 	rdctl	r2,status
  8020c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8020c4:	e0fffd17 	ldw	r3,-12(fp)
  8020c8:	00bfff84 	movi	r2,-2
  8020cc:	1884703a 	and	r2,r3,r2
  8020d0:	1001703a 	wrctl	status,r2
  
  return context;
  8020d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  8020d8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  8020dc:	d0a03417 	ldw	r2,-32560(gp)
  8020e0:	d0a04615 	stw	r2,-32488(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  8020e4:	d0203415 	stw	zero,-32560(gp)
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8020f0:	e0bffe17 	ldw	r2,-8(fp)
  8020f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  8020f8:	d0a04617 	ldw	r2,-32488(gp)
  8020fc:	d0e03917 	ldw	r3,-32540(gp)
  802100:	180b883a 	mov	r5,r3
  802104:	1009883a 	mov	r4,r2
  802108:	080c5f00 	call	80c5f0 <__udivsi3>
  80210c:	1007883a 	mov	r3,r2
  802110:	00801904 	movi	r2,100
  802114:	10c5c83a 	sub	r2,r2,r3
  802118:	d0a03b05 	stb	r2,-32532(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80211c:	080b8a80 	call	80b8a8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  802120:	08021300 	call	802130 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  802124:	01001904 	movi	r4,100
  802128:	08077a40 	call	8077a4 <OSTimeDly>
    }
  80212c:	003fe306 	br	8020bc <__alt_mem_epcs_flash_controller_0+0xff7f90bc>

00802130 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  802130:	defffa04 	addi	sp,sp,-24
  802134:	dfc00515 	stw	ra,20(sp)
  802138:	df000415 	stw	fp,16(sp)
  80213c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  802140:	e03ffc05 	stb	zero,-16(fp)
  802144:	00002406 	br	8021d8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  802148:	e0bffc03 	ldbu	r2,-16(fp)
  80214c:	e0fffe04 	addi	r3,fp,-8
  802150:	180b883a 	mov	r5,r3
  802154:	1009883a 	mov	r4,r2
  802158:	080726c0 	call	80726c <OSTaskStkChk>
  80215c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  802160:	e0bffc43 	ldbu	r2,-15(fp)
  802164:	1000191e 	bne	r2,zero,8021cc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  802168:	e0fffc03 	ldbu	r3,-16(fp)
  80216c:	00802074 	movhi	r2,129
  802170:	10951304 	addi	r2,r2,21580
  802174:	18c7883a 	add	r3,r3,r3
  802178:	18c7883a 	add	r3,r3,r3
  80217c:	10c5883a 	add	r2,r2,r3
  802180:	10800017 	ldw	r2,0(r2)
  802184:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  802188:	e0bffd17 	ldw	r2,-12(fp)
  80218c:	10000f26 	beq	r2,zero,8021cc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  802190:	e0bffd17 	ldw	r2,-12(fp)
  802194:	10800060 	cmpeqi	r2,r2,1
  802198:	10000c1e 	bne	r2,zero,8021cc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80219c:	e0bffd17 	ldw	r2,-12(fp)
  8021a0:	10c00217 	ldw	r3,8(r2)
  8021a4:	e0bffd17 	ldw	r2,-12(fp)
  8021a8:	10800317 	ldw	r2,12(r2)
  8021ac:	1085883a 	add	r2,r2,r2
  8021b0:	1085883a 	add	r2,r2,r2
  8021b4:	1887883a 	add	r3,r3,r2
  8021b8:	e0bffd17 	ldw	r2,-12(fp)
  8021bc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  8021c0:	e0ffff17 	ldw	r3,-4(fp)
  8021c4:	e0bffd17 	ldw	r2,-12(fp)
  8021c8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8021cc:	e0bffc03 	ldbu	r2,-16(fp)
  8021d0:	10800044 	addi	r2,r2,1
  8021d4:	e0bffc05 	stb	r2,-16(fp)
  8021d8:	e0bffc03 	ldbu	r2,-16(fp)
  8021dc:	10800570 	cmpltui	r2,r2,21
  8021e0:	103fd91e 	bne	r2,zero,802148 <__alt_mem_epcs_flash_controller_0+0xff7f9148>
#endif
                }
            }
        }
    }
}
  8021e4:	0001883a 	nop
  8021e8:	e037883a 	mov	sp,fp
  8021ec:	dfc00117 	ldw	ra,4(sp)
  8021f0:	df000017 	ldw	fp,0(sp)
  8021f4:	dec00204 	addi	sp,sp,8
  8021f8:	f800283a 	ret

008021fc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  8021fc:	defff204 	addi	sp,sp,-56
  802200:	dfc00d15 	stw	ra,52(sp)
  802204:	df000c15 	stw	fp,48(sp)
  802208:	df000c04 	addi	fp,sp,48
  80220c:	e17ffc15 	stw	r5,-16(fp)
  802210:	e1bffd15 	stw	r6,-12(fp)
  802214:	3807883a 	mov	r3,r7
  802218:	e0800417 	ldw	r2,16(fp)
  80221c:	e13ffb05 	stb	r4,-20(fp)
  802220:	e0fffe0d 	sth	r3,-8(fp)
  802224:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  802228:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80222c:	0005303a 	rdctl	r2,status
  802230:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802234:	e0fffa17 	ldw	r3,-24(fp)
  802238:	00bfff84 	movi	r2,-2
  80223c:	1884703a 	and	r2,r3,r2
  802240:	1001703a 	wrctl	status,r2
  
  return context;
  802244:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  802248:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80224c:	d0a03a17 	ldw	r2,-32536(gp)
  802250:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  802254:	e0bff617 	ldw	r2,-40(fp)
  802258:	10009326 	beq	r2,zero,8024a8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80225c:	e0bff617 	ldw	r2,-40(fp)
  802260:	10800517 	ldw	r2,20(r2)
  802264:	d0a03a15 	stw	r2,-32536(gp)
  802268:	e0bff417 	ldw	r2,-48(fp)
  80226c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802270:	e0bff817 	ldw	r2,-32(fp)
  802274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  802278:	e0bff617 	ldw	r2,-40(fp)
  80227c:	e0fffc17 	ldw	r3,-16(fp)
  802280:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  802284:	e0bff617 	ldw	r2,-40(fp)
  802288:	e0fffb03 	ldbu	r3,-20(fp)
  80228c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  802290:	e0bff617 	ldw	r2,-40(fp)
  802294:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  802298:	e0bff617 	ldw	r2,-40(fp)
  80229c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8022a0:	e0bff617 	ldw	r2,-40(fp)
  8022a4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8022a8:	e0bff617 	ldw	r2,-40(fp)
  8022ac:	e0c00317 	ldw	r3,12(fp)
  8022b0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  8022b4:	e0bff617 	ldw	r2,-40(fp)
  8022b8:	e0c00217 	ldw	r3,8(fp)
  8022bc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  8022c0:	e0bff617 	ldw	r2,-40(fp)
  8022c4:	e0fffd17 	ldw	r3,-12(fp)
  8022c8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  8022cc:	e0bff617 	ldw	r2,-40(fp)
  8022d0:	e0ffff0b 	ldhu	r3,-4(fp)
  8022d4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  8022d8:	e0bff617 	ldw	r2,-40(fp)
  8022dc:	e0fffe0b 	ldhu	r3,-8(fp)
  8022e0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  8022e4:	e0bff617 	ldw	r2,-40(fp)
  8022e8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  8022ec:	e0bffb03 	ldbu	r2,-20(fp)
  8022f0:	1004d0fa 	srli	r2,r2,3
  8022f4:	1007883a 	mov	r3,r2
  8022f8:	e0bff617 	ldw	r2,-40(fp)
  8022fc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  802300:	e0bffb03 	ldbu	r2,-20(fp)
  802304:	108001cc 	andi	r2,r2,7
  802308:	1007883a 	mov	r3,r2
  80230c:	e0bff617 	ldw	r2,-40(fp)
  802310:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  802314:	e0bff617 	ldw	r2,-40(fp)
  802318:	10800d03 	ldbu	r2,52(r2)
  80231c:	10803fcc 	andi	r2,r2,255
  802320:	00c00044 	movi	r3,1
  802324:	1884983a 	sll	r2,r3,r2
  802328:	1007883a 	mov	r3,r2
  80232c:	e0bff617 	ldw	r2,-40(fp)
  802330:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  802334:	e0bff617 	ldw	r2,-40(fp)
  802338:	10800cc3 	ldbu	r2,51(r2)
  80233c:	10803fcc 	andi	r2,r2,255
  802340:	00c00044 	movi	r3,1
  802344:	1884983a 	sll	r2,r3,r2
  802348:	1007883a 	mov	r3,r2
  80234c:	e0bff617 	ldw	r2,-40(fp)
  802350:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  802354:	e0bff617 	ldw	r2,-40(fp)
  802358:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80235c:	e0bff617 	ldw	r2,-40(fp)
  802360:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  802364:	e0bff617 	ldw	r2,-40(fp)
  802368:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80236c:	e0bff617 	ldw	r2,-40(fp)
  802370:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  802374:	e0bff617 	ldw	r2,-40(fp)
  802378:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80237c:	e0bff617 	ldw	r2,-40(fp)
  802380:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  802384:	e0bff617 	ldw	r2,-40(fp)
  802388:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80238c:	e0bff617 	ldw	r2,-40(fp)
  802390:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  802394:	e0bff617 	ldw	r2,-40(fp)
  802398:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80239c:	e0bff617 	ldw	r2,-40(fp)
  8023a0:	00c00fc4 	movi	r3,63
  8023a4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8023a8:	e0bff617 	ldw	r2,-40(fp)
  8023ac:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  8023b0:	e13ff617 	ldw	r4,-40(fp)
  8023b4:	080b9480 	call	80b948 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  8023b8:	e13ff617 	ldw	r4,-40(fp)
  8023bc:	080b8400 	call	80b840 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8023c0:	0005303a 	rdctl	r2,status
  8023c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8023c8:	e0fff517 	ldw	r3,-44(fp)
  8023cc:	00bfff84 	movi	r2,-2
  8023d0:	1884703a 	and	r2,r3,r2
  8023d4:	1001703a 	wrctl	status,r2
  
  return context;
  8023d8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  8023dc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  8023e0:	e0fffb03 	ldbu	r3,-20(fp)
  8023e4:	00802074 	movhi	r2,129
  8023e8:	10951304 	addi	r2,r2,21580
  8023ec:	18c7883a 	add	r3,r3,r3
  8023f0:	18c7883a 	add	r3,r3,r3
  8023f4:	10c5883a 	add	r2,r2,r3
  8023f8:	e0fff617 	ldw	r3,-40(fp)
  8023fc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  802400:	d0e03617 	ldw	r3,-32552(gp)
  802404:	e0bff617 	ldw	r2,-40(fp)
  802408:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80240c:	e0bff617 	ldw	r2,-40(fp)
  802410:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  802414:	d0a03617 	ldw	r2,-32552(gp)
  802418:	10000326 	beq	r2,zero,802428 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  80241c:	d0a03617 	ldw	r2,-32552(gp)
  802420:	e0fff617 	ldw	r3,-40(fp)
  802424:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  802428:	e0bff617 	ldw	r2,-40(fp)
  80242c:	d0a03615 	stw	r2,-32552(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  802430:	e0bff617 	ldw	r2,-40(fp)
  802434:	10c00d83 	ldbu	r3,54(r2)
  802438:	d0a03f03 	ldbu	r2,-32516(gp)
  80243c:	1884b03a 	or	r2,r3,r2
  802440:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  802444:	e0bff617 	ldw	r2,-40(fp)
  802448:	10800d03 	ldbu	r2,52(r2)
  80244c:	10c03fcc 	andi	r3,r2,255
  802450:	e0bff617 	ldw	r2,-40(fp)
  802454:	10800d03 	ldbu	r2,52(r2)
  802458:	11003fcc 	andi	r4,r2,255
  80245c:	d0a03f44 	addi	r2,gp,-32515
  802460:	2085883a 	add	r2,r4,r2
  802464:	11000003 	ldbu	r4,0(r2)
  802468:	e0bff617 	ldw	r2,-40(fp)
  80246c:	10800d43 	ldbu	r2,53(r2)
  802470:	2084b03a 	or	r2,r4,r2
  802474:	1009883a 	mov	r4,r2
  802478:	d0a03f44 	addi	r2,gp,-32515
  80247c:	1885883a 	add	r2,r3,r2
  802480:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  802484:	d0a03b43 	ldbu	r2,-32531(gp)
  802488:	10800044 	addi	r2,r2,1
  80248c:	d0a03b45 	stb	r2,-32531(gp)
  802490:	e0bff417 	ldw	r2,-48(fp)
  802494:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802498:	e0bff717 	ldw	r2,-36(fp)
  80249c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8024a0:	0005883a 	mov	r2,zero
  8024a4:	00000506 	br	8024bc <OS_TCBInit+0x2c0>
  8024a8:	e0bff417 	ldw	r2,-48(fp)
  8024ac:	e0bff915 	stw	r2,-28(fp)
  8024b0:	e0bff917 	ldw	r2,-28(fp)
  8024b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  8024b8:	00801084 	movi	r2,66
}
  8024bc:	e037883a 	mov	sp,fp
  8024c0:	dfc00117 	ldw	ra,4(sp)
  8024c4:	df000017 	ldw	fp,0(sp)
  8024c8:	dec00204 	addi	sp,sp,8
  8024cc:	f800283a 	ret

008024d0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8024d0:	defffe04 	addi	sp,sp,-8
  8024d4:	df000115 	stw	fp,4(sp)
  8024d8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8024dc:	d0a00204 	addi	r2,gp,-32760
  8024e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8024e4:	d0a00304 	addi	r2,gp,-32756
  8024e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8024ec:	d0a00484 	addi	r2,gp,-32750
  8024f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  8024f4:	d0a00504 	addi	r2,gp,-32748
  8024f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  8024fc:	d0a00404 	addi	r2,gp,-32752
  802500:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  802504:	d0a00584 	addi	r2,gp,-32746
  802508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80250c:	d0a00604 	addi	r2,gp,-32744
  802510:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  802514:	d0a00684 	addi	r2,gp,-32742
  802518:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80251c:	d0a00704 	addi	r2,gp,-32740
  802520:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  802524:	d0a00784 	addi	r2,gp,-32738
  802528:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80252c:	d0a00804 	addi	r2,gp,-32736
  802530:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  802534:	d0a00884 	addi	r2,gp,-32734
  802538:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80253c:	d0a00904 	addi	r2,gp,-32732
  802540:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  802544:	d0a00984 	addi	r2,gp,-32730
  802548:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80254c:	d0a00a04 	addi	r2,gp,-32728
  802550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  802554:	d0a00a84 	addi	r2,gp,-32726
  802558:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80255c:	d0a00b04 	addi	r2,gp,-32724
  802560:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  802564:	d0a00b84 	addi	r2,gp,-32722
  802568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80256c:	d0a00c04 	addi	r2,gp,-32720
  802570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  802574:	d0a00c84 	addi	r2,gp,-32718
  802578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80257c:	d0a00d04 	addi	r2,gp,-32716
  802580:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  802584:	d0a00d84 	addi	r2,gp,-32714
  802588:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80258c:	d0a00e04 	addi	r2,gp,-32712
  802590:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  802594:	d0a00e84 	addi	r2,gp,-32710
  802598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80259c:	d0a00f04 	addi	r2,gp,-32708
  8025a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  8025a4:	d0a00f84 	addi	r2,gp,-32706
  8025a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  8025ac:	d0a01004 	addi	r2,gp,-32704
  8025b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  8025b4:	d0a01084 	addi	r2,gp,-32702
  8025b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  8025bc:	d0a01104 	addi	r2,gp,-32700
  8025c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  8025c4:	d0a01184 	addi	r2,gp,-32698
  8025c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  8025cc:	d0a01204 	addi	r2,gp,-32696
  8025d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  8025d4:	d0a01284 	addi	r2,gp,-32694
  8025d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  8025dc:	d0a01304 	addi	r2,gp,-32692
  8025e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  8025e4:	d0a01384 	addi	r2,gp,-32690
  8025e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  8025ec:	d0a01404 	addi	r2,gp,-32688
  8025f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  8025f4:	d0a01484 	addi	r2,gp,-32686
  8025f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  8025fc:	d0a01504 	addi	r2,gp,-32684
  802600:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  802604:	d0a01584 	addi	r2,gp,-32682
  802608:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80260c:	d0a01604 	addi	r2,gp,-32680
  802610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  802614:	d0a01684 	addi	r2,gp,-32678
  802618:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80261c:	d0a01704 	addi	r2,gp,-32676
  802620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  802624:	d0a01784 	addi	r2,gp,-32674
  802628:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80262c:	d0a01804 	addi	r2,gp,-32672
  802630:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  802634:	d0a01884 	addi	r2,gp,-32670
  802638:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80263c:	d0a01904 	addi	r2,gp,-32668
  802640:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  802644:	d0a01e04 	addi	r2,gp,-32648
  802648:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80264c:	0001883a 	nop
  802650:	e037883a 	mov	sp,fp
  802654:	df000017 	ldw	fp,0(sp)
  802658:	dec00104 	addi	sp,sp,4
  80265c:	f800283a 	ret

00802660 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  802660:	defff204 	addi	sp,sp,-56
  802664:	df000d15 	stw	fp,52(sp)
  802668:	df000d04 	addi	fp,sp,52
  80266c:	e13ffc15 	stw	r4,-16(fp)
  802670:	2807883a 	mov	r3,r5
  802674:	3005883a 	mov	r2,r6
  802678:	e1ffff15 	stw	r7,-4(fp)
  80267c:	e0fffd0d 	sth	r3,-12(fp)
  802680:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  802684:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  802688:	e0bfff17 	ldw	r2,-4(fp)
  80268c:	1000021e 	bne	r2,zero,802698 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  802690:	0005883a 	mov	r2,zero
  802694:	0000b006 	br	802958 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802698:	e0bffc17 	ldw	r2,-16(fp)
  80269c:	1000051e 	bne	r2,zero,8026b4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8026a0:	e0bfff17 	ldw	r2,-4(fp)
  8026a4:	00c01b84 	movi	r3,110
  8026a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8026ac:	0005883a 	mov	r2,zero
  8026b0:	0000a906 	br	802958 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8026b4:	e0bffc17 	ldw	r2,-16(fp)
  8026b8:	10800003 	ldbu	r2,0(r2)
  8026bc:	10803fcc 	andi	r2,r2,255
  8026c0:	10800160 	cmpeqi	r2,r2,5
  8026c4:	1000051e 	bne	r2,zero,8026dc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8026c8:	e0bfff17 	ldw	r2,-4(fp)
  8026cc:	00c00044 	movi	r3,1
  8026d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8026d4:	0005883a 	mov	r2,zero
  8026d8:	00009f06 	br	802958 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8026dc:	e0fffe03 	ldbu	r3,-8(fp)
  8026e0:	00bfe004 	movi	r2,-128
  8026e4:	1884703a 	and	r2,r3,r2
  8026e8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  8026ec:	e0bff503 	ldbu	r2,-44(fp)
  8026f0:	10000626 	beq	r2,zero,80270c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  8026f4:	e0bffe03 	ldbu	r2,-8(fp)
  8026f8:	10801fcc 	andi	r2,r2,127
  8026fc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  802700:	00800044 	movi	r2,1
  802704:	e0bff385 	stb	r2,-50(fp)
  802708:	00000106 	br	802710 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  80270c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  802710:	e0bfff17 	ldw	r2,-4(fp)
  802714:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802718:	0005303a 	rdctl	r2,status
  80271c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802720:	e0fffb17 	ldw	r3,-20(fp)
  802724:	00bfff84 	movi	r2,-2
  802728:	1884703a 	and	r2,r3,r2
  80272c:	1001703a 	wrctl	status,r2
  
  return context;
  802730:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  802734:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  802738:	e0bffe03 	ldbu	r2,-8(fp)
  80273c:	10c00060 	cmpeqi	r3,r2,1
  802740:	18005f1e 	bne	r3,zero,8028c0 <OSFlagAccept+0x260>
  802744:	10c00088 	cmpgei	r3,r2,2
  802748:	1800021e 	bne	r3,zero,802754 <OSFlagAccept+0xf4>
  80274c:	10003f26 	beq	r2,zero,80284c <OSFlagAccept+0x1ec>
  802750:	00007706 	br	802930 <OSFlagAccept+0x2d0>
  802754:	10c000a0 	cmpeqi	r3,r2,2
  802758:	1800031e 	bne	r3,zero,802768 <OSFlagAccept+0x108>
  80275c:	108000e0 	cmpeqi	r2,r2,3
  802760:	10001e1e 	bne	r2,zero,8027dc <OSFlagAccept+0x17c>
  802764:	00007206 	br	802930 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  802768:	e0bffc17 	ldw	r2,-16(fp)
  80276c:	10c0020b 	ldhu	r3,8(r2)
  802770:	e0bffd0b 	ldhu	r2,-12(fp)
  802774:	1884703a 	and	r2,r3,r2
  802778:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80277c:	e0fff30b 	ldhu	r3,-52(fp)
  802780:	e0bffd0b 	ldhu	r2,-12(fp)
  802784:	18800d1e 	bne	r3,r2,8027bc <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802788:	e0bff383 	ldbu	r2,-50(fp)
  80278c:	10800058 	cmpnei	r2,r2,1
  802790:	10000d1e 	bne	r2,zero,8027c8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  802794:	e0bffc17 	ldw	r2,-16(fp)
  802798:	1080020b 	ldhu	r2,8(r2)
  80279c:	1007883a 	mov	r3,r2
  8027a0:	e0bff30b 	ldhu	r2,-52(fp)
  8027a4:	0084303a 	nor	r2,zero,r2
  8027a8:	1884703a 	and	r2,r3,r2
  8027ac:	1007883a 	mov	r3,r2
  8027b0:	e0bffc17 	ldw	r2,-16(fp)
  8027b4:	10c0020d 	sth	r3,8(r2)
  8027b8:	00000306 	br	8027c8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8027bc:	e0bfff17 	ldw	r2,-4(fp)
  8027c0:	00c01c04 	movi	r3,112
  8027c4:	10c00005 	stb	r3,0(r2)
  8027c8:	e0bff417 	ldw	r2,-48(fp)
  8027cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8027d0:	e0bff617 	ldw	r2,-40(fp)
  8027d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8027d8:	00005e06 	br	802954 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8027dc:	e0bffc17 	ldw	r2,-16(fp)
  8027e0:	10c0020b 	ldhu	r3,8(r2)
  8027e4:	e0bffd0b 	ldhu	r2,-12(fp)
  8027e8:	1884703a 	and	r2,r3,r2
  8027ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8027f0:	e0bff30b 	ldhu	r2,-52(fp)
  8027f4:	10000d26 	beq	r2,zero,80282c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8027f8:	e0bff383 	ldbu	r2,-50(fp)
  8027fc:	10800058 	cmpnei	r2,r2,1
  802800:	10000d1e 	bne	r2,zero,802838 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  802804:	e0bffc17 	ldw	r2,-16(fp)
  802808:	1080020b 	ldhu	r2,8(r2)
  80280c:	1007883a 	mov	r3,r2
  802810:	e0bff30b 	ldhu	r2,-52(fp)
  802814:	0084303a 	nor	r2,zero,r2
  802818:	1884703a 	and	r2,r3,r2
  80281c:	1007883a 	mov	r3,r2
  802820:	e0bffc17 	ldw	r2,-16(fp)
  802824:	10c0020d 	sth	r3,8(r2)
  802828:	00000306 	br	802838 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80282c:	e0bfff17 	ldw	r2,-4(fp)
  802830:	00c01c04 	movi	r3,112
  802834:	10c00005 	stb	r3,0(r2)
  802838:	e0bff417 	ldw	r2,-48(fp)
  80283c:	e0bff715 	stw	r2,-36(fp)
  802840:	e0bff717 	ldw	r2,-36(fp)
  802844:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  802848:	00004206 	br	802954 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80284c:	e0bffc17 	ldw	r2,-16(fp)
  802850:	1080020b 	ldhu	r2,8(r2)
  802854:	0084303a 	nor	r2,zero,r2
  802858:	1007883a 	mov	r3,r2
  80285c:	e0bffd0b 	ldhu	r2,-12(fp)
  802860:	1884703a 	and	r2,r3,r2
  802864:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  802868:	e0fff30b 	ldhu	r3,-52(fp)
  80286c:	e0bffd0b 	ldhu	r2,-12(fp)
  802870:	18800b1e 	bne	r3,r2,8028a0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802874:	e0bff383 	ldbu	r2,-50(fp)
  802878:	10800058 	cmpnei	r2,r2,1
  80287c:	10000b1e 	bne	r2,zero,8028ac <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10c0020b 	ldhu	r3,8(r2)
  802888:	e0bff30b 	ldhu	r2,-52(fp)
  80288c:	1884b03a 	or	r2,r3,r2
  802890:	1007883a 	mov	r3,r2
  802894:	e0bffc17 	ldw	r2,-16(fp)
  802898:	10c0020d 	sth	r3,8(r2)
  80289c:	00000306 	br	8028ac <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8028a0:	e0bfff17 	ldw	r2,-4(fp)
  8028a4:	00c01c04 	movi	r3,112
  8028a8:	10c00005 	stb	r3,0(r2)
  8028ac:	e0bff417 	ldw	r2,-48(fp)
  8028b0:	e0bff815 	stw	r2,-32(fp)
  8028b4:	e0bff817 	ldw	r2,-32(fp)
  8028b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8028bc:	00002506 	br	802954 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8028c0:	e0bffc17 	ldw	r2,-16(fp)
  8028c4:	1080020b 	ldhu	r2,8(r2)
  8028c8:	0084303a 	nor	r2,zero,r2
  8028cc:	1007883a 	mov	r3,r2
  8028d0:	e0bffd0b 	ldhu	r2,-12(fp)
  8028d4:	1884703a 	and	r2,r3,r2
  8028d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8028dc:	e0bff30b 	ldhu	r2,-52(fp)
  8028e0:	10000b26 	beq	r2,zero,802910 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8028e4:	e0bff383 	ldbu	r2,-50(fp)
  8028e8:	10800058 	cmpnei	r2,r2,1
  8028ec:	10000b1e 	bne	r2,zero,80291c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8028f0:	e0bffc17 	ldw	r2,-16(fp)
  8028f4:	10c0020b 	ldhu	r3,8(r2)
  8028f8:	e0bff30b 	ldhu	r2,-52(fp)
  8028fc:	1884b03a 	or	r2,r3,r2
  802900:	1007883a 	mov	r3,r2
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10c0020d 	sth	r3,8(r2)
  80290c:	00000306 	br	80291c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802910:	e0bfff17 	ldw	r2,-4(fp)
  802914:	00c01c04 	movi	r3,112
  802918:	10c00005 	stb	r3,0(r2)
  80291c:	e0bff417 	ldw	r2,-48(fp)
  802920:	e0bff915 	stw	r2,-28(fp)
  802924:	e0bff917 	ldw	r2,-28(fp)
  802928:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80292c:	00000906 	br	802954 <OSFlagAccept+0x2f4>
  802930:	e0bff417 	ldw	r2,-48(fp)
  802934:	e0bffa15 	stw	r2,-24(fp)
  802938:	e0bffa17 	ldw	r2,-24(fp)
  80293c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  802940:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  802944:	e0bfff17 	ldw	r2,-4(fp)
  802948:	00c01bc4 	movi	r3,111
  80294c:	10c00005 	stb	r3,0(r2)
             break;
  802950:	0001883a 	nop
    }
    return (flags_rdy);
  802954:	e0bff30b 	ldhu	r2,-52(fp)
}
  802958:	e037883a 	mov	sp,fp
  80295c:	df000017 	ldw	fp,0(sp)
  802960:	dec00104 	addi	sp,sp,4
  802964:	f800283a 	ret

00802968 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  802968:	defff804 	addi	sp,sp,-32
  80296c:	df000715 	stw	fp,28(sp)
  802970:	df000704 	addi	fp,sp,28
  802974:	2005883a 	mov	r2,r4
  802978:	e17fff15 	stw	r5,-4(fp)
  80297c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  802980:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  802984:	e0bfff17 	ldw	r2,-4(fp)
  802988:	1000021e 	bne	r2,zero,802994 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80298c:	0005883a 	mov	r2,zero
  802990:	00003306 	br	802a60 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  802994:	d0a04103 	ldbu	r2,-32508(gp)
  802998:	10803fcc 	andi	r2,r2,255
  80299c:	10000526 	beq	r2,zero,8029b4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  8029a0:	e0bfff17 	ldw	r2,-4(fp)
  8029a4:	00c00404 	movi	r3,16
  8029a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  8029ac:	0005883a 	mov	r2,zero
  8029b0:	00002b06 	br	802a60 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8029b4:	0005303a 	rdctl	r2,status
  8029b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8029bc:	e0fffd17 	ldw	r3,-12(fp)
  8029c0:	00bfff84 	movi	r2,-2
  8029c4:	1884703a 	and	r2,r3,r2
  8029c8:	1001703a 	wrctl	status,r2
  
  return context;
  8029cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8029d0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  8029d4:	d0a04417 	ldw	r2,-32496(gp)
  8029d8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  8029dc:	e0bffb17 	ldw	r2,-20(fp)
  8029e0:	10001726 	beq	r2,zero,802a40 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  8029e4:	d0a04417 	ldw	r2,-32496(gp)
  8029e8:	10800117 	ldw	r2,4(r2)
  8029ec:	d0a04415 	stw	r2,-32496(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  8029f0:	e0bffb17 	ldw	r2,-20(fp)
  8029f4:	00c00144 	movi	r3,5
  8029f8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  8029fc:	e0bffb17 	ldw	r2,-20(fp)
  802a00:	e0fffe0b 	ldhu	r3,-8(fp)
  802a04:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  802a08:	e0bffb17 	ldw	r2,-20(fp)
  802a0c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  802a10:	e0bffb17 	ldw	r2,-20(fp)
  802a14:	00c00fc4 	movi	r3,63
  802a18:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  802a1c:	e0bffb17 	ldw	r2,-20(fp)
  802a20:	100002c5 	stb	zero,11(r2)
  802a24:	e0bff917 	ldw	r2,-28(fp)
  802a28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802a2c:	e0bffa17 	ldw	r2,-24(fp)
  802a30:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  802a34:	e0bfff17 	ldw	r2,-4(fp)
  802a38:	10000005 	stb	zero,0(r2)
  802a3c:	00000706 	br	802a5c <OSFlagCreate+0xf4>
  802a40:	e0bff917 	ldw	r2,-28(fp)
  802a44:	e0bffc15 	stw	r2,-16(fp)
  802a48:	e0bffc17 	ldw	r2,-16(fp)
  802a4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  802a50:	e0bfff17 	ldw	r2,-4(fp)
  802a54:	00c01c84 	movi	r3,114
  802a58:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  802a5c:	e0bffb17 	ldw	r2,-20(fp)
}
  802a60:	e037883a 	mov	sp,fp
  802a64:	df000017 	ldw	fp,0(sp)
  802a68:	dec00104 	addi	sp,sp,4
  802a6c:	f800283a 	ret

00802a70 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  802a70:	defff204 	addi	sp,sp,-56
  802a74:	dfc00d15 	stw	ra,52(sp)
  802a78:	df000c15 	stw	fp,48(sp)
  802a7c:	df000c04 	addi	fp,sp,48
  802a80:	e13ffd15 	stw	r4,-12(fp)
  802a84:	2805883a 	mov	r2,r5
  802a88:	e1bfff15 	stw	r6,-4(fp)
  802a8c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  802a90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  802a94:	e0bfff17 	ldw	r2,-4(fp)
  802a98:	1000021e 	bne	r2,zero,802aa4 <OSFlagDel+0x34>
        return (pgrp);
  802a9c:	e0bffd17 	ldw	r2,-12(fp)
  802aa0:	00008006 	br	802ca4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802aa4:	e0bffd17 	ldw	r2,-12(fp)
  802aa8:	1000051e 	bne	r2,zero,802ac0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802aac:	e0bfff17 	ldw	r2,-4(fp)
  802ab0:	00c01b84 	movi	r3,110
  802ab4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  802ab8:	e0bffd17 	ldw	r2,-12(fp)
  802abc:	00007906 	br	802ca4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  802ac0:	d0a04103 	ldbu	r2,-32508(gp)
  802ac4:	10803fcc 	andi	r2,r2,255
  802ac8:	10000526 	beq	r2,zero,802ae0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  802acc:	e0bfff17 	ldw	r2,-4(fp)
  802ad0:	00c003c4 	movi	r3,15
  802ad4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  802ad8:	e0bffd17 	ldw	r2,-12(fp)
  802adc:	00007106 	br	802ca4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  802ae0:	e0bffd17 	ldw	r2,-12(fp)
  802ae4:	10800003 	ldbu	r2,0(r2)
  802ae8:	10803fcc 	andi	r2,r2,255
  802aec:	10800160 	cmpeqi	r2,r2,5
  802af0:	1000051e 	bne	r2,zero,802b08 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  802af4:	e0bfff17 	ldw	r2,-4(fp)
  802af8:	00c00044 	movi	r3,1
  802afc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  802b00:	e0bffd17 	ldw	r2,-12(fp)
  802b04:	00006706 	br	802ca4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802b08:	0005303a 	rdctl	r2,status
  802b0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802b10:	e0fffc17 	ldw	r3,-16(fp)
  802b14:	00bfff84 	movi	r2,-2
  802b18:	1884703a 	and	r2,r3,r2
  802b1c:	1001703a 	wrctl	status,r2
  
  return context;
  802b20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  802b24:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  802b28:	e0bffd17 	ldw	r2,-12(fp)
  802b2c:	10800117 	ldw	r2,4(r2)
  802b30:	10000326 	beq	r2,zero,802b40 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  802b34:	00800044 	movi	r2,1
  802b38:	e0bff405 	stb	r2,-48(fp)
  802b3c:	00000106 	br	802b44 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  802b40:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  802b44:	e0bffe03 	ldbu	r2,-8(fp)
  802b48:	10000326 	beq	r2,zero,802b58 <OSFlagDel+0xe8>
  802b4c:	10800060 	cmpeqi	r2,r2,1
  802b50:	1000231e 	bne	r2,zero,802be0 <OSFlagDel+0x170>
  802b54:	00004806 	br	802c78 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  802b58:	e0bff403 	ldbu	r2,-48(fp)
  802b5c:	1000161e 	bne	r2,zero,802bb8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  802b60:	e0bffd17 	ldw	r2,-12(fp)
  802b64:	00c00fc4 	movi	r3,63
  802b68:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  802b6c:	e0bffd17 	ldw	r2,-12(fp)
  802b70:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  802b74:	e0bffd17 	ldw	r2,-12(fp)
  802b78:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  802b7c:	d0e04417 	ldw	r3,-32496(gp)
  802b80:	e0bffd17 	ldw	r2,-12(fp)
  802b84:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  802b88:	e0bffd17 	ldw	r2,-12(fp)
  802b8c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  802b90:	e0bffd17 	ldw	r2,-12(fp)
  802b94:	d0a04415 	stw	r2,-32496(gp)
  802b98:	e0bff717 	ldw	r2,-36(fp)
  802b9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802ba0:	e0bff817 	ldw	r2,-32(fp)
  802ba4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  802ba8:	e0bfff17 	ldw	r2,-4(fp)
  802bac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  802bb0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  802bb4:	00003a06 	br	802ca0 <OSFlagDel+0x230>
  802bb8:	e0bff717 	ldw	r2,-36(fp)
  802bbc:	e0bff915 	stw	r2,-28(fp)
  802bc0:	e0bff917 	ldw	r2,-28(fp)
  802bc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  802bc8:	e0bfff17 	ldw	r2,-4(fp)
  802bcc:	00c01244 	movi	r3,73
  802bd0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  802bd4:	e0bffd17 	ldw	r2,-12(fp)
  802bd8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  802bdc:	00003006 	br	802ca0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  802be0:	e0bffd17 	ldw	r2,-12(fp)
  802be4:	10800117 	ldw	r2,4(r2)
  802be8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  802bec:	00000606 	br	802c08 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  802bf0:	000b883a 	mov	r5,zero
  802bf4:	e13ff517 	ldw	r4,-44(fp)
  802bf8:	0803bdc0 	call	803bdc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  802bfc:	e0bff517 	ldw	r2,-44(fp)
  802c00:	10800017 	ldw	r2,0(r2)
  802c04:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  802c08:	e0bff517 	ldw	r2,-44(fp)
  802c0c:	103ff81e 	bne	r2,zero,802bf0 <__alt_mem_epcs_flash_controller_0+0xff7f9bf0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  802c10:	e0bffd17 	ldw	r2,-12(fp)
  802c14:	00c00fc4 	movi	r3,63
  802c18:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  802c1c:	e0bffd17 	ldw	r2,-12(fp)
  802c20:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  802c24:	e0bffd17 	ldw	r2,-12(fp)
  802c28:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  802c2c:	d0e04417 	ldw	r3,-32496(gp)
  802c30:	e0bffd17 	ldw	r2,-12(fp)
  802c34:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  802c38:	e0bffd17 	ldw	r2,-12(fp)
  802c3c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  802c40:	e0bffd17 	ldw	r2,-12(fp)
  802c44:	d0a04415 	stw	r2,-32496(gp)
  802c48:	e0bff717 	ldw	r2,-36(fp)
  802c4c:	e0bffa15 	stw	r2,-24(fp)
  802c50:	e0bffa17 	ldw	r2,-24(fp)
  802c54:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  802c58:	e0bff403 	ldbu	r2,-48(fp)
  802c5c:	10800058 	cmpnei	r2,r2,1
  802c60:	1000011e 	bne	r2,zero,802c68 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  802c64:	0801dfc0 	call	801dfc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  802c68:	e0bfff17 	ldw	r2,-4(fp)
  802c6c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  802c70:	e03ff615 	stw	zero,-40(fp)
             break;
  802c74:	00000a06 	br	802ca0 <OSFlagDel+0x230>
  802c78:	e0bff717 	ldw	r2,-36(fp)
  802c7c:	e0bffb15 	stw	r2,-20(fp)
  802c80:	e0bffb17 	ldw	r2,-20(fp)
  802c84:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  802c88:	e0bfff17 	ldw	r2,-4(fp)
  802c8c:	00c001c4 	movi	r3,7
  802c90:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  802c94:	e0bffd17 	ldw	r2,-12(fp)
  802c98:	e0bff615 	stw	r2,-40(fp)
             break;
  802c9c:	0001883a 	nop
    }
    return (pgrp_return);
  802ca0:	e0bff617 	ldw	r2,-40(fp)
}
  802ca4:	e037883a 	mov	sp,fp
  802ca8:	dfc00117 	ldw	ra,4(sp)
  802cac:	df000017 	ldw	fp,0(sp)
  802cb0:	dec00204 	addi	sp,sp,8
  802cb4:	f800283a 	ret

00802cb8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  802cb8:	defff604 	addi	sp,sp,-40
  802cbc:	dfc00915 	stw	ra,36(sp)
  802cc0:	df000815 	stw	fp,32(sp)
  802cc4:	df000804 	addi	fp,sp,32
  802cc8:	e13ffd15 	stw	r4,-12(fp)
  802ccc:	e17ffe15 	stw	r5,-8(fp)
  802cd0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  802cd4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  802cd8:	e0bfff17 	ldw	r2,-4(fp)
  802cdc:	1000021e 	bne	r2,zero,802ce8 <OSFlagNameGet+0x30>
        return (0);
  802ce0:	0005883a 	mov	r2,zero
  802ce4:	00003906 	br	802dcc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  802ce8:	e0bffd17 	ldw	r2,-12(fp)
  802cec:	1000051e 	bne	r2,zero,802d04 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802cf0:	e0bfff17 	ldw	r2,-4(fp)
  802cf4:	00c01b84 	movi	r3,110
  802cf8:	10c00005 	stb	r3,0(r2)
        return (0);
  802cfc:	0005883a 	mov	r2,zero
  802d00:	00003206 	br	802dcc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  802d04:	e0bffe17 	ldw	r2,-8(fp)
  802d08:	1000051e 	bne	r2,zero,802d20 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  802d0c:	e0bfff17 	ldw	r2,-4(fp)
  802d10:	00c00304 	movi	r3,12
  802d14:	10c00005 	stb	r3,0(r2)
        return (0);
  802d18:	0005883a 	mov	r2,zero
  802d1c:	00002b06 	br	802dcc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  802d20:	d0a04103 	ldbu	r2,-32508(gp)
  802d24:	10803fcc 	andi	r2,r2,255
  802d28:	10000526 	beq	r2,zero,802d40 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  802d2c:	e0bfff17 	ldw	r2,-4(fp)
  802d30:	00c00444 	movi	r3,17
  802d34:	10c00005 	stb	r3,0(r2)
        return (0);
  802d38:	0005883a 	mov	r2,zero
  802d3c:	00002306 	br	802dcc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d40:	0005303a 	rdctl	r2,status
  802d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d48:	e0fffc17 	ldw	r3,-16(fp)
  802d4c:	00bfff84 	movi	r2,-2
  802d50:	1884703a 	and	r2,r3,r2
  802d54:	1001703a 	wrctl	status,r2
  
  return context;
  802d58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  802d5c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  802d60:	e0bffd17 	ldw	r2,-12(fp)
  802d64:	10800003 	ldbu	r2,0(r2)
  802d68:	10803fcc 	andi	r2,r2,255
  802d6c:	10800160 	cmpeqi	r2,r2,5
  802d70:	1000091e 	bne	r2,zero,802d98 <OSFlagNameGet+0xe0>
  802d74:	e0bff817 	ldw	r2,-32(fp)
  802d78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802d7c:	e0bff917 	ldw	r2,-28(fp)
  802d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  802d84:	e0bfff17 	ldw	r2,-4(fp)
  802d88:	00c00044 	movi	r3,1
  802d8c:	10c00005 	stb	r3,0(r2)
        return (0);
  802d90:	0005883a 	mov	r2,zero
  802d94:	00000d06 	br	802dcc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  802d98:	e0bffd17 	ldw	r2,-12(fp)
  802d9c:	10800284 	addi	r2,r2,10
  802da0:	100b883a 	mov	r5,r2
  802da4:	e13ffe17 	ldw	r4,-8(fp)
  802da8:	0801f400 	call	801f40 <OS_StrCopy>
  802dac:	e0bffb05 	stb	r2,-20(fp)
  802db0:	e0bff817 	ldw	r2,-32(fp)
  802db4:	e0bffa15 	stw	r2,-24(fp)
  802db8:	e0bffa17 	ldw	r2,-24(fp)
  802dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  802dc0:	e0bfff17 	ldw	r2,-4(fp)
  802dc4:	10000005 	stb	zero,0(r2)
    return (len);
  802dc8:	e0bffb03 	ldbu	r2,-20(fp)
}
  802dcc:	e037883a 	mov	sp,fp
  802dd0:	dfc00117 	ldw	ra,4(sp)
  802dd4:	df000017 	ldw	fp,0(sp)
  802dd8:	dec00204 	addi	sp,sp,8
  802ddc:	f800283a 	ret

00802de0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  802de0:	defff504 	addi	sp,sp,-44
  802de4:	dfc00a15 	stw	ra,40(sp)
  802de8:	df000915 	stw	fp,36(sp)
  802dec:	df000904 	addi	fp,sp,36
  802df0:	e13ffd15 	stw	r4,-12(fp)
  802df4:	e17ffe15 	stw	r5,-8(fp)
  802df8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  802dfc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  802e00:	e0bfff17 	ldw	r2,-4(fp)
  802e04:	10004326 	beq	r2,zero,802f14 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  802e08:	e0bffd17 	ldw	r2,-12(fp)
  802e0c:	1000041e 	bne	r2,zero,802e20 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802e10:	e0bfff17 	ldw	r2,-4(fp)
  802e14:	00c01b84 	movi	r3,110
  802e18:	10c00005 	stb	r3,0(r2)
        return;
  802e1c:	00003e06 	br	802f18 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  802e20:	e0bffe17 	ldw	r2,-8(fp)
  802e24:	1000041e 	bne	r2,zero,802e38 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  802e28:	e0bfff17 	ldw	r2,-4(fp)
  802e2c:	00c00304 	movi	r3,12
  802e30:	10c00005 	stb	r3,0(r2)
        return;
  802e34:	00003806 	br	802f18 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  802e38:	d0a04103 	ldbu	r2,-32508(gp)
  802e3c:	10803fcc 	andi	r2,r2,255
  802e40:	10000426 	beq	r2,zero,802e54 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  802e44:	e0bfff17 	ldw	r2,-4(fp)
  802e48:	00c00484 	movi	r3,18
  802e4c:	10c00005 	stb	r3,0(r2)
        return;
  802e50:	00003106 	br	802f18 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802e54:	0005303a 	rdctl	r2,status
  802e58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802e5c:	e0fffc17 	ldw	r3,-16(fp)
  802e60:	00bfff84 	movi	r2,-2
  802e64:	1884703a 	and	r2,r3,r2
  802e68:	1001703a 	wrctl	status,r2
  
  return context;
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  802e70:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  802e74:	e0bffd17 	ldw	r2,-12(fp)
  802e78:	10800003 	ldbu	r2,0(r2)
  802e7c:	10803fcc 	andi	r2,r2,255
  802e80:	10800160 	cmpeqi	r2,r2,5
  802e84:	1000081e 	bne	r2,zero,802ea8 <OSFlagNameSet+0xc8>
  802e88:	e0bff717 	ldw	r2,-36(fp)
  802e8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802e90:	e0bff817 	ldw	r2,-32(fp)
  802e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  802e98:	e0bfff17 	ldw	r2,-4(fp)
  802e9c:	00c00044 	movi	r3,1
  802ea0:	10c00005 	stb	r3,0(r2)
        return;
  802ea4:	00001c06 	br	802f18 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  802ea8:	e13ffe17 	ldw	r4,-8(fp)
  802eac:	0801fb40 	call	801fb4 <OS_StrLen>
  802eb0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  802eb4:	e0bffa03 	ldbu	r2,-24(fp)
  802eb8:	10800830 	cmpltui	r2,r2,32
  802ebc:	1000081e 	bne	r2,zero,802ee0 <OSFlagNameSet+0x100>
  802ec0:	e0bff717 	ldw	r2,-36(fp)
  802ec4:	e0bff915 	stw	r2,-28(fp)
  802ec8:	e0bff917 	ldw	r2,-28(fp)
  802ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  802ed0:	e0bfff17 	ldw	r2,-4(fp)
  802ed4:	00c01cc4 	movi	r3,115
  802ed8:	10c00005 	stb	r3,0(r2)
        return;
  802edc:	00000e06 	br	802f18 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  802ee0:	e0bffd17 	ldw	r2,-12(fp)
  802ee4:	10800284 	addi	r2,r2,10
  802ee8:	e17ffe17 	ldw	r5,-8(fp)
  802eec:	1009883a 	mov	r4,r2
  802ef0:	0801f400 	call	801f40 <OS_StrCopy>
  802ef4:	e0bff717 	ldw	r2,-36(fp)
  802ef8:	e0bffb15 	stw	r2,-20(fp)
  802efc:	e0bffb17 	ldw	r2,-20(fp)
  802f00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  802f04:	e0bfff17 	ldw	r2,-4(fp)
  802f08:	10000005 	stb	zero,0(r2)
    return;
  802f0c:	0001883a 	nop
  802f10:	00000106 	br	802f18 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  802f14:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  802f18:	e037883a 	mov	sp,fp
  802f1c:	dfc00117 	ldw	ra,4(sp)
  802f20:	df000017 	ldw	fp,0(sp)
  802f24:	dec00204 	addi	sp,sp,8
  802f28:	f800283a 	ret

00802f2c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  802f2c:	deffe104 	addi	sp,sp,-124
  802f30:	dfc01e15 	stw	ra,120(sp)
  802f34:	df001d15 	stw	fp,116(sp)
  802f38:	df001d04 	addi	fp,sp,116
  802f3c:	e13ffc15 	stw	r4,-16(fp)
  802f40:	2809883a 	mov	r4,r5
  802f44:	3007883a 	mov	r3,r6
  802f48:	3805883a 	mov	r2,r7
  802f4c:	e13ffd0d 	sth	r4,-12(fp)
  802f50:	e0fffe05 	stb	r3,-8(fp)
  802f54:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  802f58:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  802f5c:	e0800217 	ldw	r2,8(fp)
  802f60:	1000021e 	bne	r2,zero,802f6c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  802f64:	0005883a 	mov	r2,zero
  802f68:	00015906 	br	8034d0 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802f6c:	e0bffc17 	ldw	r2,-16(fp)
  802f70:	1000051e 	bne	r2,zero,802f88 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802f74:	e0800217 	ldw	r2,8(fp)
  802f78:	00c01b84 	movi	r3,110
  802f7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802f80:	0005883a 	mov	r2,zero
  802f84:	00015206 	br	8034d0 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  802f88:	d0a04103 	ldbu	r2,-32508(gp)
  802f8c:	10803fcc 	andi	r2,r2,255
  802f90:	10000526 	beq	r2,zero,802fa8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  802f94:	e0800217 	ldw	r2,8(fp)
  802f98:	00c00084 	movi	r3,2
  802f9c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802fa0:	0005883a 	mov	r2,zero
  802fa4:	00014a06 	br	8034d0 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  802fa8:	d0a03303 	ldbu	r2,-32564(gp)
  802fac:	10803fcc 	andi	r2,r2,255
  802fb0:	10000526 	beq	r2,zero,802fc8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  802fb4:	e0800217 	ldw	r2,8(fp)
  802fb8:	00c00344 	movi	r3,13
  802fbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802fc0:	0005883a 	mov	r2,zero
  802fc4:	00014206 	br	8034d0 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  802fc8:	e0bffc17 	ldw	r2,-16(fp)
  802fcc:	10800003 	ldbu	r2,0(r2)
  802fd0:	10803fcc 	andi	r2,r2,255
  802fd4:	10800160 	cmpeqi	r2,r2,5
  802fd8:	1000051e 	bne	r2,zero,802ff0 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  802fdc:	e0800217 	ldw	r2,8(fp)
  802fe0:	00c00044 	movi	r3,1
  802fe4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802fe8:	0005883a 	mov	r2,zero
  802fec:	00013806 	br	8034d0 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  802ff0:	e0fffe03 	ldbu	r3,-8(fp)
  802ff4:	00bfe004 	movi	r2,-128
  802ff8:	1884703a 	and	r2,r3,r2
  802ffc:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  803000:	e0bfe603 	ldbu	r2,-104(fp)
  803004:	10000626 	beq	r2,zero,803020 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  803008:	e0bffe03 	ldbu	r2,-8(fp)
  80300c:	10801fcc 	andi	r2,r2,127
  803010:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  803014:	00800044 	movi	r2,1
  803018:	e0bfe405 	stb	r2,-112(fp)
  80301c:	00000106 	br	803024 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  803020:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803024:	0005303a 	rdctl	r2,status
  803028:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80302c:	e0fff617 	ldw	r3,-40(fp)
  803030:	00bfff84 	movi	r2,-2
  803034:	1884703a 	and	r2,r3,r2
  803038:	1001703a 	wrctl	status,r2
  
  return context;
  80303c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  803040:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  803044:	e0bffe03 	ldbu	r2,-8(fp)
  803048:	10c00060 	cmpeqi	r3,r2,1
  80304c:	1800921e 	bne	r3,zero,803298 <OSFlagPend+0x36c>
  803050:	10c00088 	cmpgei	r3,r2,2
  803054:	1800021e 	bne	r3,zero,803060 <OSFlagPend+0x134>
  803058:	10006126 	beq	r2,zero,8031e0 <OSFlagPend+0x2b4>
  80305c:	0000bb06 	br	80334c <OSFlagPend+0x420>
  803060:	10c000a0 	cmpeqi	r3,r2,2
  803064:	1800031e 	bne	r3,zero,803074 <OSFlagPend+0x148>
  803068:	108000e0 	cmpeqi	r2,r2,3
  80306c:	10002f1e 	bne	r2,zero,80312c <OSFlagPend+0x200>
  803070:	0000b606 	br	80334c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  803074:	e0bffc17 	ldw	r2,-16(fp)
  803078:	10c0020b 	ldhu	r3,8(r2)
  80307c:	e0bffd0b 	ldhu	r2,-12(fp)
  803080:	1884703a 	and	r2,r3,r2
  803084:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  803088:	e0ffe80b 	ldhu	r3,-96(fp)
  80308c:	e0bffd0b 	ldhu	r2,-12(fp)
  803090:	1880171e 	bne	r3,r2,8030f0 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803094:	e0bfe403 	ldbu	r2,-112(fp)
  803098:	10800058 	cmpnei	r2,r2,1
  80309c:	1000091e 	bne	r2,zero,8030c4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8030a0:	e0bffc17 	ldw	r2,-16(fp)
  8030a4:	1080020b 	ldhu	r2,8(r2)
  8030a8:	1007883a 	mov	r3,r2
  8030ac:	e0bfe80b 	ldhu	r2,-96(fp)
  8030b0:	0084303a 	nor	r2,zero,r2
  8030b4:	1884703a 	and	r2,r3,r2
  8030b8:	1007883a 	mov	r3,r2
  8030bc:	e0bffc17 	ldw	r2,-16(fp)
  8030c0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8030c4:	d0a04217 	ldw	r2,-32504(gp)
  8030c8:	e0ffe80b 	ldhu	r3,-96(fp)
  8030cc:	10c00b0d 	sth	r3,44(r2)
  8030d0:	e0bfe517 	ldw	r2,-108(fp)
  8030d4:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8030d8:	e0bfe717 	ldw	r2,-100(fp)
  8030dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8030e0:	e0800217 	ldw	r2,8(fp)
  8030e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8030e8:	e0bfe80b 	ldhu	r2,-96(fp)
  8030ec:	0000f806 	br	8034d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8030f0:	e13ffd0b 	ldhu	r4,-12(fp)
  8030f4:	e17ffe03 	ldbu	r5,-8(fp)
  8030f8:	e0bfff0b 	ldhu	r2,-4(fp)
  8030fc:	e0fff704 	addi	r3,fp,-36
  803100:	d8800015 	stw	r2,0(sp)
  803104:	280f883a 	mov	r7,r5
  803108:	200d883a 	mov	r6,r4
  80310c:	180b883a 	mov	r5,r3
  803110:	e13ffc17 	ldw	r4,-16(fp)
  803114:	080399c0 	call	80399c <OS_FlagBlock>
  803118:	e0bfe517 	ldw	r2,-108(fp)
  80311c:	e0bfe915 	stw	r2,-92(fp)
  803120:	e0bfe917 	ldw	r2,-92(fp)
  803124:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803128:	00009206 	br	803374 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80312c:	e0bffc17 	ldw	r2,-16(fp)
  803130:	10c0020b 	ldhu	r3,8(r2)
  803134:	e0bffd0b 	ldhu	r2,-12(fp)
  803138:	1884703a 	and	r2,r3,r2
  80313c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  803140:	e0bfe80b 	ldhu	r2,-96(fp)
  803144:	10001726 	beq	r2,zero,8031a4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803148:	e0bfe403 	ldbu	r2,-112(fp)
  80314c:	10800058 	cmpnei	r2,r2,1
  803150:	1000091e 	bne	r2,zero,803178 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  803154:	e0bffc17 	ldw	r2,-16(fp)
  803158:	1080020b 	ldhu	r2,8(r2)
  80315c:	1007883a 	mov	r3,r2
  803160:	e0bfe80b 	ldhu	r2,-96(fp)
  803164:	0084303a 	nor	r2,zero,r2
  803168:	1884703a 	and	r2,r3,r2
  80316c:	1007883a 	mov	r3,r2
  803170:	e0bffc17 	ldw	r2,-16(fp)
  803174:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  803178:	d0a04217 	ldw	r2,-32504(gp)
  80317c:	e0ffe80b 	ldhu	r3,-96(fp)
  803180:	10c00b0d 	sth	r3,44(r2)
  803184:	e0bfe517 	ldw	r2,-108(fp)
  803188:	e0bfea15 	stw	r2,-88(fp)
  80318c:	e0bfea17 	ldw	r2,-88(fp)
  803190:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803194:	e0800217 	ldw	r2,8(fp)
  803198:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80319c:	e0bfe80b 	ldhu	r2,-96(fp)
  8031a0:	0000cb06 	br	8034d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8031a4:	e13ffd0b 	ldhu	r4,-12(fp)
  8031a8:	e17ffe03 	ldbu	r5,-8(fp)
  8031ac:	e0bfff0b 	ldhu	r2,-4(fp)
  8031b0:	e0fff704 	addi	r3,fp,-36
  8031b4:	d8800015 	stw	r2,0(sp)
  8031b8:	280f883a 	mov	r7,r5
  8031bc:	200d883a 	mov	r6,r4
  8031c0:	180b883a 	mov	r5,r3
  8031c4:	e13ffc17 	ldw	r4,-16(fp)
  8031c8:	080399c0 	call	80399c <OS_FlagBlock>
  8031cc:	e0bfe517 	ldw	r2,-108(fp)
  8031d0:	e0bfeb15 	stw	r2,-84(fp)
  8031d4:	e0bfeb17 	ldw	r2,-84(fp)
  8031d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8031dc:	00006506 	br	803374 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8031e0:	e0bffc17 	ldw	r2,-16(fp)
  8031e4:	1080020b 	ldhu	r2,8(r2)
  8031e8:	0084303a 	nor	r2,zero,r2
  8031ec:	1007883a 	mov	r3,r2
  8031f0:	e0bffd0b 	ldhu	r2,-12(fp)
  8031f4:	1884703a 	and	r2,r3,r2
  8031f8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8031fc:	e0ffe80b 	ldhu	r3,-96(fp)
  803200:	e0bffd0b 	ldhu	r2,-12(fp)
  803204:	1880151e 	bne	r3,r2,80325c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803208:	e0bfe403 	ldbu	r2,-112(fp)
  80320c:	10800058 	cmpnei	r2,r2,1
  803210:	1000071e 	bne	r2,zero,803230 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  803214:	e0bffc17 	ldw	r2,-16(fp)
  803218:	10c0020b 	ldhu	r3,8(r2)
  80321c:	e0bfe80b 	ldhu	r2,-96(fp)
  803220:	1884b03a 	or	r2,r3,r2
  803224:	1007883a 	mov	r3,r2
  803228:	e0bffc17 	ldw	r2,-16(fp)
  80322c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  803230:	d0a04217 	ldw	r2,-32504(gp)
  803234:	e0ffe80b 	ldhu	r3,-96(fp)
  803238:	10c00b0d 	sth	r3,44(r2)
  80323c:	e0bfe517 	ldw	r2,-108(fp)
  803240:	e0bfec15 	stw	r2,-80(fp)
  803244:	e0bfec17 	ldw	r2,-80(fp)
  803248:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80324c:	e0800217 	ldw	r2,8(fp)
  803250:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  803254:	e0bfe80b 	ldhu	r2,-96(fp)
  803258:	00009d06 	br	8034d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80325c:	e13ffd0b 	ldhu	r4,-12(fp)
  803260:	e17ffe03 	ldbu	r5,-8(fp)
  803264:	e0bfff0b 	ldhu	r2,-4(fp)
  803268:	e0fff704 	addi	r3,fp,-36
  80326c:	d8800015 	stw	r2,0(sp)
  803270:	280f883a 	mov	r7,r5
  803274:	200d883a 	mov	r6,r4
  803278:	180b883a 	mov	r5,r3
  80327c:	e13ffc17 	ldw	r4,-16(fp)
  803280:	080399c0 	call	80399c <OS_FlagBlock>
  803284:	e0bfe517 	ldw	r2,-108(fp)
  803288:	e0bfed15 	stw	r2,-76(fp)
  80328c:	e0bfed17 	ldw	r2,-76(fp)
  803290:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803294:	00003706 	br	803374 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  803298:	e0bffc17 	ldw	r2,-16(fp)
  80329c:	1080020b 	ldhu	r2,8(r2)
  8032a0:	0084303a 	nor	r2,zero,r2
  8032a4:	1007883a 	mov	r3,r2
  8032a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8032ac:	1884703a 	and	r2,r3,r2
  8032b0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8032b4:	e0bfe80b 	ldhu	r2,-96(fp)
  8032b8:	10001526 	beq	r2,zero,803310 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8032bc:	e0bfe403 	ldbu	r2,-112(fp)
  8032c0:	10800058 	cmpnei	r2,r2,1
  8032c4:	1000071e 	bne	r2,zero,8032e4 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8032c8:	e0bffc17 	ldw	r2,-16(fp)
  8032cc:	10c0020b 	ldhu	r3,8(r2)
  8032d0:	e0bfe80b 	ldhu	r2,-96(fp)
  8032d4:	1884b03a 	or	r2,r3,r2
  8032d8:	1007883a 	mov	r3,r2
  8032dc:	e0bffc17 	ldw	r2,-16(fp)
  8032e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8032e4:	d0a04217 	ldw	r2,-32504(gp)
  8032e8:	e0ffe80b 	ldhu	r3,-96(fp)
  8032ec:	10c00b0d 	sth	r3,44(r2)
  8032f0:	e0bfe517 	ldw	r2,-108(fp)
  8032f4:	e0bfee15 	stw	r2,-72(fp)
  8032f8:	e0bfee17 	ldw	r2,-72(fp)
  8032fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803300:	e0800217 	ldw	r2,8(fp)
  803304:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  803308:	e0bfe80b 	ldhu	r2,-96(fp)
  80330c:	00007006 	br	8034d0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803310:	e13ffd0b 	ldhu	r4,-12(fp)
  803314:	e17ffe03 	ldbu	r5,-8(fp)
  803318:	e0bfff0b 	ldhu	r2,-4(fp)
  80331c:	e0fff704 	addi	r3,fp,-36
  803320:	d8800015 	stw	r2,0(sp)
  803324:	280f883a 	mov	r7,r5
  803328:	200d883a 	mov	r6,r4
  80332c:	180b883a 	mov	r5,r3
  803330:	e13ffc17 	ldw	r4,-16(fp)
  803334:	080399c0 	call	80399c <OS_FlagBlock>
  803338:	e0bfe517 	ldw	r2,-108(fp)
  80333c:	e0bfef15 	stw	r2,-68(fp)
  803340:	e0bfef17 	ldw	r2,-68(fp)
  803344:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803348:	00000a06 	br	803374 <OSFlagPend+0x448>
  80334c:	e0bfe517 	ldw	r2,-108(fp)
  803350:	e0bff015 	stw	r2,-64(fp)
  803354:	e0bff017 	ldw	r2,-64(fp)
  803358:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80335c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  803360:	e0800217 	ldw	r2,8(fp)
  803364:	00c01bc4 	movi	r3,111
  803368:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  80336c:	e0bfe80b 	ldhu	r2,-96(fp)
  803370:	00005706 	br	8034d0 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  803374:	0801dfc0 	call	801dfc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803378:	0005303a 	rdctl	r2,status
  80337c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803380:	e0fff117 	ldw	r3,-60(fp)
  803384:	00bfff84 	movi	r2,-2
  803388:	1884703a 	and	r2,r3,r2
  80338c:	1001703a 	wrctl	status,r2
  
  return context;
  803390:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  803394:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  803398:	d0a04217 	ldw	r2,-32504(gp)
  80339c:	10800c43 	ldbu	r2,49(r2)
  8033a0:	10803fcc 	andi	r2,r2,255
  8033a4:	10001c26 	beq	r2,zero,803418 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8033a8:	d0a04217 	ldw	r2,-32504(gp)
  8033ac:	10800c43 	ldbu	r2,49(r2)
  8033b0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8033b4:	d0a04217 	ldw	r2,-32504(gp)
  8033b8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  8033bc:	e0bff704 	addi	r2,fp,-36
  8033c0:	1009883a 	mov	r4,r2
  8033c4:	0803cd00 	call	803cd0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  8033c8:	d0a04217 	ldw	r2,-32504(gp)
  8033cc:	10000c05 	stb	zero,48(r2)
  8033d0:	e0bfe517 	ldw	r2,-108(fp)
  8033d4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8033d8:	e0bff217 	ldw	r2,-56(fp)
  8033dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  8033e0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  8033e4:	e0bff303 	ldbu	r2,-52(fp)
  8033e8:	108000a0 	cmpeqi	r2,r2,2
  8033ec:	10000426 	beq	r2,zero,803400 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  8033f0:	e0800217 	ldw	r2,8(fp)
  8033f4:	00c00384 	movi	r3,14
  8033f8:	10c00005 	stb	r3,0(r2)
                 break;
  8033fc:	00000406 	br	803410 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  803400:	e0800217 	ldw	r2,8(fp)
  803404:	00c00284 	movi	r3,10
  803408:	10c00005 	stb	r3,0(r2)
                 break;
  80340c:	0001883a 	nop
        }
        return (flags_rdy);
  803410:	e0bfe80b 	ldhu	r2,-96(fp)
  803414:	00002e06 	br	8034d0 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  803418:	d0a04217 	ldw	r2,-32504(gp)
  80341c:	10800b0b 	ldhu	r2,44(r2)
  803420:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  803424:	e0bfe403 	ldbu	r2,-112(fp)
  803428:	10800058 	cmpnei	r2,r2,1
  80342c:	1000211e 	bne	r2,zero,8034b4 <OSFlagPend+0x588>
        switch (wait_type) {
  803430:	e0bffe03 	ldbu	r2,-8(fp)
  803434:	10001616 	blt	r2,zero,803490 <OSFlagPend+0x564>
  803438:	10c00090 	cmplti	r3,r2,2
  80343c:	18000c1e 	bne	r3,zero,803470 <OSFlagPend+0x544>
  803440:	10800108 	cmpgei	r2,r2,4
  803444:	1000121e 	bne	r2,zero,803490 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  803448:	e0bffc17 	ldw	r2,-16(fp)
  80344c:	1080020b 	ldhu	r2,8(r2)
  803450:	1007883a 	mov	r3,r2
  803454:	e0bfe80b 	ldhu	r2,-96(fp)
  803458:	0084303a 	nor	r2,zero,r2
  80345c:	1884703a 	and	r2,r3,r2
  803460:	1007883a 	mov	r3,r2
  803464:	e0bffc17 	ldw	r2,-16(fp)
  803468:	10c0020d 	sth	r3,8(r2)
                 break;
  80346c:	00001106 	br	8034b4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  803470:	e0bffc17 	ldw	r2,-16(fp)
  803474:	10c0020b 	ldhu	r3,8(r2)
  803478:	e0bfe80b 	ldhu	r2,-96(fp)
  80347c:	1884b03a 	or	r2,r3,r2
  803480:	1007883a 	mov	r3,r2
  803484:	e0bffc17 	ldw	r2,-16(fp)
  803488:	10c0020d 	sth	r3,8(r2)
                 break;
  80348c:	00000906 	br	8034b4 <OSFlagPend+0x588>
  803490:	e0bfe517 	ldw	r2,-108(fp)
  803494:	e0bff415 	stw	r2,-48(fp)
  803498:	e0bff417 	ldw	r2,-48(fp)
  80349c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8034a0:	e0800217 	ldw	r2,8(fp)
  8034a4:	00c01bc4 	movi	r3,111
  8034a8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  8034ac:	0005883a 	mov	r2,zero
  8034b0:	00000706 	br	8034d0 <OSFlagPend+0x5a4>
  8034b4:	e0bfe517 	ldw	r2,-108(fp)
  8034b8:	e0bff515 	stw	r2,-44(fp)
  8034bc:	e0bff517 	ldw	r2,-44(fp)
  8034c0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  8034c4:	e0800217 	ldw	r2,8(fp)
  8034c8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  8034cc:	e0bfe80b 	ldhu	r2,-96(fp)
}
  8034d0:	e037883a 	mov	sp,fp
  8034d4:	dfc00117 	ldw	ra,4(sp)
  8034d8:	df000017 	ldw	fp,0(sp)
  8034dc:	dec00204 	addi	sp,sp,8
  8034e0:	f800283a 	ret

008034e4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  8034e4:	defffb04 	addi	sp,sp,-20
  8034e8:	df000415 	stw	fp,16(sp)
  8034ec:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8034f0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8034f4:	0005303a 	rdctl	r2,status
  8034f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8034fc:	e0fffe17 	ldw	r3,-8(fp)
  803500:	00bfff84 	movi	r2,-2
  803504:	1884703a 	and	r2,r3,r2
  803508:	1001703a 	wrctl	status,r2
  
  return context;
  80350c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  803510:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  803514:	d0a04217 	ldw	r2,-32504(gp)
  803518:	10800b0b 	ldhu	r2,44(r2)
  80351c:	e0bffd0d 	sth	r2,-12(fp)
  803520:	e0bffc17 	ldw	r2,-16(fp)
  803524:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803528:	e0bfff17 	ldw	r2,-4(fp)
  80352c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  803530:	e0bffd0b 	ldhu	r2,-12(fp)
}
  803534:	e037883a 	mov	sp,fp
  803538:	df000017 	ldw	fp,0(sp)
  80353c:	dec00104 	addi	sp,sp,4
  803540:	f800283a 	ret

00803544 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  803544:	deffef04 	addi	sp,sp,-68
  803548:	dfc01015 	stw	ra,64(sp)
  80354c:	df000f15 	stw	fp,60(sp)
  803550:	df000f04 	addi	fp,sp,60
  803554:	e13ffc15 	stw	r4,-16(fp)
  803558:	2807883a 	mov	r3,r5
  80355c:	3005883a 	mov	r2,r6
  803560:	e1ffff15 	stw	r7,-4(fp)
  803564:	e0fffd0d 	sth	r3,-12(fp)
  803568:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80356c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  803570:	e0bfff17 	ldw	r2,-4(fp)
  803574:	1000021e 	bne	r2,zero,803580 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  803578:	0005883a 	mov	r2,zero
  80357c:	0000d106 	br	8038c4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  803580:	e0bffc17 	ldw	r2,-16(fp)
  803584:	1000051e 	bne	r2,zero,80359c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803588:	e0bfff17 	ldw	r2,-4(fp)
  80358c:	00c01b84 	movi	r3,110
  803590:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803594:	0005883a 	mov	r2,zero
  803598:	0000ca06 	br	8038c4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80359c:	e0bffc17 	ldw	r2,-16(fp)
  8035a0:	10800003 	ldbu	r2,0(r2)
  8035a4:	10803fcc 	andi	r2,r2,255
  8035a8:	10800160 	cmpeqi	r2,r2,5
  8035ac:	1000051e 	bne	r2,zero,8035c4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  8035b0:	e0bfff17 	ldw	r2,-4(fp)
  8035b4:	00c00044 	movi	r3,1
  8035b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8035bc:	0005883a 	mov	r2,zero
  8035c0:	0000c006 	br	8038c4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8035c4:	0005303a 	rdctl	r2,status
  8035c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8035cc:	e0fffb17 	ldw	r3,-20(fp)
  8035d0:	00bfff84 	movi	r2,-2
  8035d4:	1884703a 	and	r2,r3,r2
  8035d8:	1001703a 	wrctl	status,r2
  
  return context;
  8035dc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8035e0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  8035e4:	e0bffe03 	ldbu	r2,-8(fp)
  8035e8:	10000326 	beq	r2,zero,8035f8 <OSFlagPost+0xb4>
  8035ec:	10800060 	cmpeqi	r2,r2,1
  8035f0:	10000b1e 	bne	r2,zero,803620 <OSFlagPost+0xdc>
  8035f4:	00001206 	br	803640 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8035f8:	e0bffc17 	ldw	r2,-16(fp)
  8035fc:	1080020b 	ldhu	r2,8(r2)
  803600:	1007883a 	mov	r3,r2
  803604:	e0bffd0b 	ldhu	r2,-12(fp)
  803608:	0084303a 	nor	r2,zero,r2
  80360c:	1884703a 	and	r2,r3,r2
  803610:	1007883a 	mov	r3,r2
  803614:	e0bffc17 	ldw	r2,-16(fp)
  803618:	10c0020d 	sth	r3,8(r2)
             break;
  80361c:	00001106 	br	803664 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  803620:	e0bffc17 	ldw	r2,-16(fp)
  803624:	10c0020b 	ldhu	r3,8(r2)
  803628:	e0bffd0b 	ldhu	r2,-12(fp)
  80362c:	1884b03a 	or	r2,r3,r2
  803630:	1007883a 	mov	r3,r2
  803634:	e0bffc17 	ldw	r2,-16(fp)
  803638:	10c0020d 	sth	r3,8(r2)
             break;
  80363c:	00000906 	br	803664 <OSFlagPost+0x120>
  803640:	e0bff317 	ldw	r2,-52(fp)
  803644:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803648:	e0bff417 	ldw	r2,-48(fp)
  80364c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  803650:	e0bfff17 	ldw	r2,-4(fp)
  803654:	00c01c44 	movi	r3,113
  803658:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  80365c:	0005883a 	mov	r2,zero
  803660:	00009806 	br	8038c4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  803664:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	10800117 	ldw	r2,4(r2)
  803670:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  803674:	00007706 	br	803854 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  803678:	e0bff117 	ldw	r2,-60(fp)
  80367c:	10800483 	ldbu	r2,18(r2)
  803680:	10803fcc 	andi	r2,r2,255
  803684:	10c00060 	cmpeqi	r3,r2,1
  803688:	18004a1e 	bne	r3,zero,8037b4 <OSFlagPost+0x270>
  80368c:	10c00088 	cmpgei	r3,r2,2
  803690:	1800021e 	bne	r3,zero,80369c <OSFlagPost+0x158>
  803694:	10002f26 	beq	r2,zero,803754 <OSFlagPost+0x210>
  803698:	00005b06 	br	803808 <OSFlagPost+0x2c4>
  80369c:	10c000a0 	cmpeqi	r3,r2,2
  8036a0:	1800031e 	bne	r3,zero,8036b0 <OSFlagPost+0x16c>
  8036a4:	108000e0 	cmpeqi	r2,r2,3
  8036a8:	1000171e 	bne	r2,zero,803708 <OSFlagPost+0x1c4>
  8036ac:	00005606 	br	803808 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8036b0:	e0bffc17 	ldw	r2,-16(fp)
  8036b4:	10c0020b 	ldhu	r3,8(r2)
  8036b8:	e0bff117 	ldw	r2,-60(fp)
  8036bc:	1080040b 	ldhu	r2,16(r2)
  8036c0:	1884703a 	and	r2,r3,r2
  8036c4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8036c8:	e0bff117 	ldw	r2,-60(fp)
  8036cc:	1080040b 	ldhu	r2,16(r2)
  8036d0:	10ffffcc 	andi	r3,r2,65535
  8036d4:	e0bff60b 	ldhu	r2,-40(fp)
  8036d8:	1880541e 	bne	r3,r2,80382c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8036dc:	e0bff60b 	ldhu	r2,-40(fp)
  8036e0:	100b883a 	mov	r5,r2
  8036e4:	e13ff117 	ldw	r4,-60(fp)
  8036e8:	0803bdc0 	call	803bdc <OS_FlagTaskRdy>
  8036ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8036f0:	e0bff683 	ldbu	r2,-38(fp)
  8036f4:	10800058 	cmpnei	r2,r2,1
  8036f8:	10004c1e 	bne	r2,zero,80382c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8036fc:	00800044 	movi	r2,1
  803700:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803704:	00004906 	br	80382c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803708:	e0bffc17 	ldw	r2,-16(fp)
  80370c:	10c0020b 	ldhu	r3,8(r2)
  803710:	e0bff117 	ldw	r2,-60(fp)
  803714:	1080040b 	ldhu	r2,16(r2)
  803718:	1884703a 	and	r2,r3,r2
  80371c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  803720:	e0bff60b 	ldhu	r2,-40(fp)
  803724:	10004326 	beq	r2,zero,803834 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803728:	e0bff60b 	ldhu	r2,-40(fp)
  80372c:	100b883a 	mov	r5,r2
  803730:	e13ff117 	ldw	r4,-60(fp)
  803734:	0803bdc0 	call	803bdc <OS_FlagTaskRdy>
  803738:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  80373c:	e0bff683 	ldbu	r2,-38(fp)
  803740:	10800058 	cmpnei	r2,r2,1
  803744:	10003b1e 	bne	r2,zero,803834 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  803748:	00800044 	movi	r2,1
  80374c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803750:	00003806 	br	803834 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803754:	e0bffc17 	ldw	r2,-16(fp)
  803758:	1080020b 	ldhu	r2,8(r2)
  80375c:	0084303a 	nor	r2,zero,r2
  803760:	1007883a 	mov	r3,r2
  803764:	e0bff117 	ldw	r2,-60(fp)
  803768:	1080040b 	ldhu	r2,16(r2)
  80376c:	1884703a 	and	r2,r3,r2
  803770:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  803774:	e0bff117 	ldw	r2,-60(fp)
  803778:	1080040b 	ldhu	r2,16(r2)
  80377c:	10ffffcc 	andi	r3,r2,65535
  803780:	e0bff60b 	ldhu	r2,-40(fp)
  803784:	18802d1e 	bne	r3,r2,80383c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803788:	e0bff60b 	ldhu	r2,-40(fp)
  80378c:	100b883a 	mov	r5,r2
  803790:	e13ff117 	ldw	r4,-60(fp)
  803794:	0803bdc0 	call	803bdc <OS_FlagTaskRdy>
  803798:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  80379c:	e0bff683 	ldbu	r2,-38(fp)
  8037a0:	10800058 	cmpnei	r2,r2,1
  8037a4:	1000251e 	bne	r2,zero,80383c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8037a8:	00800044 	movi	r2,1
  8037ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8037b0:	00002206 	br	80383c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8037b4:	e0bffc17 	ldw	r2,-16(fp)
  8037b8:	1080020b 	ldhu	r2,8(r2)
  8037bc:	0084303a 	nor	r2,zero,r2
  8037c0:	1007883a 	mov	r3,r2
  8037c4:	e0bff117 	ldw	r2,-60(fp)
  8037c8:	1080040b 	ldhu	r2,16(r2)
  8037cc:	1884703a 	and	r2,r3,r2
  8037d0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8037d4:	e0bff60b 	ldhu	r2,-40(fp)
  8037d8:	10001a26 	beq	r2,zero,803844 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8037dc:	e0bff60b 	ldhu	r2,-40(fp)
  8037e0:	100b883a 	mov	r5,r2
  8037e4:	e13ff117 	ldw	r4,-60(fp)
  8037e8:	0803bdc0 	call	803bdc <OS_FlagTaskRdy>
  8037ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8037f0:	e0bff683 	ldbu	r2,-38(fp)
  8037f4:	10800058 	cmpnei	r2,r2,1
  8037f8:	1000121e 	bne	r2,zero,803844 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8037fc:	00800044 	movi	r2,1
  803800:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803804:	00000f06 	br	803844 <OSFlagPost+0x300>
  803808:	e0bff317 	ldw	r2,-52(fp)
  80380c:	e0bff515 	stw	r2,-44(fp)
  803810:	e0bff517 	ldw	r2,-44(fp)
  803814:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  803818:	e0bfff17 	ldw	r2,-4(fp)
  80381c:	00c01bc4 	movi	r3,111
  803820:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  803824:	0005883a 	mov	r2,zero
  803828:	00002606 	br	8038c4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  80382c:	0001883a 	nop
  803830:	00000506 	br	803848 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  803834:	0001883a 	nop
  803838:	00000306 	br	803848 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  80383c:	0001883a 	nop
  803840:	00000106 	br	803848 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  803844:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  803848:	e0bff117 	ldw	r2,-60(fp)
  80384c:	10800017 	ldw	r2,0(r2)
  803850:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  803854:	e0bff117 	ldw	r2,-60(fp)
  803858:	103f871e 	bne	r2,zero,803678 <__alt_mem_epcs_flash_controller_0+0xff7fa678>
  80385c:	e0bff317 	ldw	r2,-52(fp)
  803860:	e0bff715 	stw	r2,-36(fp)
  803864:	e0bff717 	ldw	r2,-36(fp)
  803868:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80386c:	e0bff203 	ldbu	r2,-56(fp)
  803870:	10800058 	cmpnei	r2,r2,1
  803874:	1000011e 	bne	r2,zero,80387c <OSFlagPost+0x338>
        OS_Sched();
  803878:	0801dfc0 	call	801dfc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80387c:	0005303a 	rdctl	r2,status
  803880:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803884:	e0fffa17 	ldw	r3,-24(fp)
  803888:	00bfff84 	movi	r2,-2
  80388c:	1884703a 	and	r2,r3,r2
  803890:	1001703a 	wrctl	status,r2
  
  return context;
  803894:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  803898:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  80389c:	e0bffc17 	ldw	r2,-16(fp)
  8038a0:	1080020b 	ldhu	r2,8(r2)
  8038a4:	e0bff90d 	sth	r2,-28(fp)
  8038a8:	e0bff317 	ldw	r2,-52(fp)
  8038ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8038b0:	e0bff817 	ldw	r2,-32(fp)
  8038b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  8038b8:	e0bfff17 	ldw	r2,-4(fp)
  8038bc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  8038c0:	e0bff90b 	ldhu	r2,-28(fp)
}
  8038c4:	e037883a 	mov	sp,fp
  8038c8:	dfc00117 	ldw	ra,4(sp)
  8038cc:	df000017 	ldw	fp,0(sp)
  8038d0:	dec00204 	addi	sp,sp,8
  8038d4:	f800283a 	ret

008038d8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  8038d8:	defff904 	addi	sp,sp,-28
  8038dc:	df000615 	stw	fp,24(sp)
  8038e0:	df000604 	addi	fp,sp,24
  8038e4:	e13ffe15 	stw	r4,-8(fp)
  8038e8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  8038ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  8038f0:	e0bfff17 	ldw	r2,-4(fp)
  8038f4:	1000021e 	bne	r2,zero,803900 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  8038f8:	0005883a 	mov	r2,zero
  8038fc:	00002306 	br	80398c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  803900:	e0bffe17 	ldw	r2,-8(fp)
  803904:	1000051e 	bne	r2,zero,80391c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803908:	e0bfff17 	ldw	r2,-4(fp)
  80390c:	00c01b84 	movi	r3,110
  803910:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803914:	0005883a 	mov	r2,zero
  803918:	00001c06 	br	80398c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80391c:	e0bffe17 	ldw	r2,-8(fp)
  803920:	10800003 	ldbu	r2,0(r2)
  803924:	10803fcc 	andi	r2,r2,255
  803928:	10800160 	cmpeqi	r2,r2,5
  80392c:	1000051e 	bne	r2,zero,803944 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  803930:	e0bfff17 	ldw	r2,-4(fp)
  803934:	00c00044 	movi	r3,1
  803938:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  80393c:	0005883a 	mov	r2,zero
  803940:	00001206 	br	80398c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803944:	0005303a 	rdctl	r2,status
  803948:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80394c:	e0fffc17 	ldw	r3,-16(fp)
  803950:	00bfff84 	movi	r2,-2
  803954:	1884703a 	and	r2,r3,r2
  803958:	1001703a 	wrctl	status,r2
  
  return context;
  80395c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  803960:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  803964:	e0bffe17 	ldw	r2,-8(fp)
  803968:	1080020b 	ldhu	r2,8(r2)
  80396c:	e0bffb0d 	sth	r2,-20(fp)
  803970:	e0bffa17 	ldw	r2,-24(fp)
  803974:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803978:	e0bffd17 	ldw	r2,-12(fp)
  80397c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803980:	e0bfff17 	ldw	r2,-4(fp)
  803984:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  803988:	e0bffb0b 	ldhu	r2,-20(fp)
}
  80398c:	e037883a 	mov	sp,fp
  803990:	df000017 	ldw	fp,0(sp)
  803994:	dec00104 	addi	sp,sp,4
  803998:	f800283a 	ret

0080399c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80399c:	defff804 	addi	sp,sp,-32
  8039a0:	df000715 	stw	fp,28(sp)
  8039a4:	df000704 	addi	fp,sp,28
  8039a8:	e13ffb15 	stw	r4,-20(fp)
  8039ac:	e17ffc15 	stw	r5,-16(fp)
  8039b0:	3009883a 	mov	r4,r6
  8039b4:	3807883a 	mov	r3,r7
  8039b8:	e0800117 	ldw	r2,4(fp)
  8039bc:	e13ffd0d 	sth	r4,-12(fp)
  8039c0:	e0fffe05 	stb	r3,-8(fp)
  8039c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  8039c8:	d0a04217 	ldw	r2,-32504(gp)
  8039cc:	d0e04217 	ldw	r3,-32504(gp)
  8039d0:	18c00c03 	ldbu	r3,48(r3)
  8039d4:	18c00814 	ori	r3,r3,32
  8039d8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  8039dc:	d0a04217 	ldw	r2,-32504(gp)
  8039e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  8039e4:	d0a04217 	ldw	r2,-32504(gp)
  8039e8:	e0ffff0b 	ldhu	r3,-4(fp)
  8039ec:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  8039f0:	d0a04217 	ldw	r2,-32504(gp)
  8039f4:	e0fffc17 	ldw	r3,-16(fp)
  8039f8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  8039fc:	e0bffc17 	ldw	r2,-16(fp)
  803a00:	e0fffd0b 	ldhu	r3,-12(fp)
  803a04:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  803a08:	e0bffc17 	ldw	r2,-16(fp)
  803a0c:	e0fffe03 	ldbu	r3,-8(fp)
  803a10:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  803a14:	d0e04217 	ldw	r3,-32504(gp)
  803a18:	e0bffc17 	ldw	r2,-16(fp)
  803a1c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  803a20:	e0bffb17 	ldw	r2,-20(fp)
  803a24:	10c00117 	ldw	r3,4(r2)
  803a28:	e0bffc17 	ldw	r2,-16(fp)
  803a2c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  803a30:	e0bffc17 	ldw	r2,-16(fp)
  803a34:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  803a38:	e0bffc17 	ldw	r2,-16(fp)
  803a3c:	e0fffb17 	ldw	r3,-20(fp)
  803a40:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  803a44:	e0bffb17 	ldw	r2,-20(fp)
  803a48:	10800117 	ldw	r2,4(r2)
  803a4c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  803a50:	e0bff917 	ldw	r2,-28(fp)
  803a54:	10000326 	beq	r2,zero,803a64 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  803a58:	e0bff917 	ldw	r2,-28(fp)
  803a5c:	e0fffc17 	ldw	r3,-16(fp)
  803a60:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  803a64:	e0bffb17 	ldw	r2,-20(fp)
  803a68:	e0fffc17 	ldw	r3,-16(fp)
  803a6c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  803a70:	d0a04217 	ldw	r2,-32504(gp)
  803a74:	10800d03 	ldbu	r2,52(r2)
  803a78:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  803a7c:	e0fffa03 	ldbu	r3,-24(fp)
  803a80:	e13ffa03 	ldbu	r4,-24(fp)
  803a84:	d0a03f44 	addi	r2,gp,-32515
  803a88:	2085883a 	add	r2,r4,r2
  803a8c:	10800003 	ldbu	r2,0(r2)
  803a90:	1009883a 	mov	r4,r2
  803a94:	d0a04217 	ldw	r2,-32504(gp)
  803a98:	10800d43 	ldbu	r2,53(r2)
  803a9c:	0084303a 	nor	r2,zero,r2
  803aa0:	2084703a 	and	r2,r4,r2
  803aa4:	1009883a 	mov	r4,r2
  803aa8:	d0a03f44 	addi	r2,gp,-32515
  803aac:	1885883a 	add	r2,r3,r2
  803ab0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  803ab4:	e0fffa03 	ldbu	r3,-24(fp)
  803ab8:	d0a03f44 	addi	r2,gp,-32515
  803abc:	1885883a 	add	r2,r3,r2
  803ac0:	10800003 	ldbu	r2,0(r2)
  803ac4:	10803fcc 	andi	r2,r2,255
  803ac8:	1000071e 	bne	r2,zero,803ae8 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  803acc:	d0a04217 	ldw	r2,-32504(gp)
  803ad0:	10800d83 	ldbu	r2,54(r2)
  803ad4:	0084303a 	nor	r2,zero,r2
  803ad8:	1007883a 	mov	r3,r2
  803adc:	d0a03f03 	ldbu	r2,-32516(gp)
  803ae0:	1884703a 	and	r2,r3,r2
  803ae4:	d0a03f05 	stb	r2,-32516(gp)
    }
}
  803ae8:	0001883a 	nop
  803aec:	e037883a 	mov	sp,fp
  803af0:	df000017 	ldw	fp,0(sp)
  803af4:	dec00104 	addi	sp,sp,4
  803af8:	f800283a 	ret

00803afc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  803afc:	defffb04 	addi	sp,sp,-20
  803b00:	dfc00415 	stw	ra,16(sp)
  803b04:	df000315 	stw	fp,12(sp)
  803b08:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  803b0c:	0140dc04 	movi	r5,880
  803b10:	01002074 	movhi	r4,129
  803b14:	21089f04 	addi	r4,r4,8828
  803b18:	0801d400 	call	801d40 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  803b1c:	00802074 	movhi	r2,129
  803b20:	10889f04 	addi	r2,r2,8828
  803b24:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  803b28:	00802074 	movhi	r2,129
  803b2c:	1088aa04 	addi	r2,r2,8872
  803b30:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  803b34:	e03ffd0d 	sth	zero,-12(fp)
  803b38:	00001306 	br	803b88 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  803b3c:	e0bffe17 	ldw	r2,-8(fp)
  803b40:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  803b44:	e0bffe17 	ldw	r2,-8(fp)
  803b48:	e0ffff17 	ldw	r3,-4(fp)
  803b4c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  803b50:	e0bffe17 	ldw	r2,-8(fp)
  803b54:	00c00fc4 	movi	r3,63
  803b58:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  803b5c:	e0bffe17 	ldw	r2,-8(fp)
  803b60:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  803b64:	e0bffe17 	ldw	r2,-8(fp)
  803b68:	10800b04 	addi	r2,r2,44
  803b6c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  803b70:	e0bfff17 	ldw	r2,-4(fp)
  803b74:	10800b04 	addi	r2,r2,44
  803b78:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  803b7c:	e0bffd0b 	ldhu	r2,-12(fp)
  803b80:	10800044 	addi	r2,r2,1
  803b84:	e0bffd0d 	sth	r2,-12(fp)
  803b88:	e0bffd0b 	ldhu	r2,-12(fp)
  803b8c:	108004f0 	cmpltui	r2,r2,19
  803b90:	103fea1e 	bne	r2,zero,803b3c <__alt_mem_epcs_flash_controller_0+0xff7fab3c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  803b94:	e0bffe17 	ldw	r2,-8(fp)
  803b98:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  803b9c:	e0bffe17 	ldw	r2,-8(fp)
  803ba0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  803ba4:	e0bffe17 	ldw	r2,-8(fp)
  803ba8:	00c00fc4 	movi	r3,63
  803bac:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  803bb0:	e0bffe17 	ldw	r2,-8(fp)
  803bb4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  803bb8:	00802074 	movhi	r2,129
  803bbc:	10889f04 	addi	r2,r2,8828
  803bc0:	d0a04415 	stw	r2,-32496(gp)
#endif
}
  803bc4:	0001883a 	nop
  803bc8:	e037883a 	mov	sp,fp
  803bcc:	dfc00117 	ldw	ra,4(sp)
  803bd0:	df000017 	ldw	fp,0(sp)
  803bd4:	dec00204 	addi	sp,sp,8
  803bd8:	f800283a 	ret

00803bdc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  803bdc:	defffa04 	addi	sp,sp,-24
  803be0:	dfc00515 	stw	ra,20(sp)
  803be4:	df000415 	stw	fp,16(sp)
  803be8:	df000404 	addi	fp,sp,16
  803bec:	e13ffe15 	stw	r4,-8(fp)
  803bf0:	2805883a 	mov	r2,r5
  803bf4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  803bf8:	e0bffe17 	ldw	r2,-8(fp)
  803bfc:	10800217 	ldw	r2,8(r2)
  803c00:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  803c04:	e0bffd17 	ldw	r2,-12(fp)
  803c08:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  803c0c:	e0bffd17 	ldw	r2,-12(fp)
  803c10:	e0ffff0b 	ldhu	r3,-4(fp)
  803c14:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  803c18:	e0bffd17 	ldw	r2,-12(fp)
  803c1c:	10c00c03 	ldbu	r3,48(r2)
  803c20:	00bff7c4 	movi	r2,-33
  803c24:	1884703a 	and	r2,r3,r2
  803c28:	1007883a 	mov	r3,r2
  803c2c:	e0bffd17 	ldw	r2,-12(fp)
  803c30:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  803c34:	e0bffd17 	ldw	r2,-12(fp)
  803c38:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  803c3c:	e0bffd17 	ldw	r2,-12(fp)
  803c40:	10800c03 	ldbu	r2,48(r2)
  803c44:	10803fcc 	andi	r2,r2,255
  803c48:	1000181e 	bne	r2,zero,803cac <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  803c4c:	e0bffd17 	ldw	r2,-12(fp)
  803c50:	10c00d83 	ldbu	r3,54(r2)
  803c54:	d0a03f03 	ldbu	r2,-32516(gp)
  803c58:	1884b03a 	or	r2,r3,r2
  803c5c:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  803c60:	e0bffd17 	ldw	r2,-12(fp)
  803c64:	10800d03 	ldbu	r2,52(r2)
  803c68:	10c03fcc 	andi	r3,r2,255
  803c6c:	e0bffd17 	ldw	r2,-12(fp)
  803c70:	10800d03 	ldbu	r2,52(r2)
  803c74:	11003fcc 	andi	r4,r2,255
  803c78:	d0a03f44 	addi	r2,gp,-32515
  803c7c:	2085883a 	add	r2,r4,r2
  803c80:	11000003 	ldbu	r4,0(r2)
  803c84:	e0bffd17 	ldw	r2,-12(fp)
  803c88:	10800d43 	ldbu	r2,53(r2)
  803c8c:	2084b03a 	or	r2,r4,r2
  803c90:	1009883a 	mov	r4,r2
  803c94:	d0a03f44 	addi	r2,gp,-32515
  803c98:	1885883a 	add	r2,r3,r2
  803c9c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  803ca0:	00800044 	movi	r2,1
  803ca4:	e0bffc05 	stb	r2,-16(fp)
  803ca8:	00000106 	br	803cb0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  803cac:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  803cb0:	e13ffe17 	ldw	r4,-8(fp)
  803cb4:	0803cd00 	call	803cd0 <OS_FlagUnlink>
    return (sched);
  803cb8:	e0bffc03 	ldbu	r2,-16(fp)
}
  803cbc:	e037883a 	mov	sp,fp
  803cc0:	dfc00117 	ldw	ra,4(sp)
  803cc4:	df000017 	ldw	fp,0(sp)
  803cc8:	dec00204 	addi	sp,sp,8
  803ccc:	f800283a 	ret

00803cd0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  803cd0:	defffa04 	addi	sp,sp,-24
  803cd4:	df000515 	stw	fp,20(sp)
  803cd8:	df000504 	addi	fp,sp,20
  803cdc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  803ce0:	e0bfff17 	ldw	r2,-4(fp)
  803ce4:	10800117 	ldw	r2,4(r2)
  803ce8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  803cec:	e0bfff17 	ldw	r2,-4(fp)
  803cf0:	10800017 	ldw	r2,0(r2)
  803cf4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  803cf8:	e0bffb17 	ldw	r2,-20(fp)
  803cfc:	10000b1e 	bne	r2,zero,803d2c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  803d00:	e0bfff17 	ldw	r2,-4(fp)
  803d04:	10800317 	ldw	r2,12(r2)
  803d08:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  803d0c:	e0bffd17 	ldw	r2,-12(fp)
  803d10:	e0fffc17 	ldw	r3,-16(fp)
  803d14:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  803d18:	e0bffc17 	ldw	r2,-16(fp)
  803d1c:	10000b26 	beq	r2,zero,803d4c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  803d20:	e0bffc17 	ldw	r2,-16(fp)
  803d24:	10000115 	stw	zero,4(r2)
  803d28:	00000806 	br	803d4c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  803d2c:	e0bffb17 	ldw	r2,-20(fp)
  803d30:	e0fffc17 	ldw	r3,-16(fp)
  803d34:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  803d38:	e0bffc17 	ldw	r2,-16(fp)
  803d3c:	10000326 	beq	r2,zero,803d4c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  803d40:	e0bffc17 	ldw	r2,-16(fp)
  803d44:	e0fffb17 	ldw	r3,-20(fp)
  803d48:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  803d4c:	e0bfff17 	ldw	r2,-4(fp)
  803d50:	10800217 	ldw	r2,8(r2)
  803d54:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  803d58:	e0bffe17 	ldw	r2,-8(fp)
  803d5c:	10000a15 	stw	zero,40(r2)
#endif
}
  803d60:	0001883a 	nop
  803d64:	e037883a 	mov	sp,fp
  803d68:	df000017 	ldw	fp,0(sp)
  803d6c:	dec00104 	addi	sp,sp,4
  803d70:	f800283a 	ret

00803d74 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  803d74:	defff404 	addi	sp,sp,-48
  803d78:	df000b15 	stw	fp,44(sp)
  803d7c:	df000b04 	addi	fp,sp,44
  803d80:	e13ffc15 	stw	r4,-16(fp)
  803d84:	e17ffd15 	stw	r5,-12(fp)
  803d88:	e1bffe15 	stw	r6,-8(fp)
  803d8c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  803d90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  803d94:	e0bfff17 	ldw	r2,-4(fp)
  803d98:	1000021e 	bne	r2,zero,803da4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  803d9c:	0005883a 	mov	r2,zero
  803da0:	00006506 	br	803f38 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  803da4:	e0bffc17 	ldw	r2,-16(fp)
  803da8:	1000051e 	bne	r2,zero,803dc0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  803dac:	e0bfff17 	ldw	r2,-4(fp)
  803db0:	00c01884 	movi	r3,98
  803db4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803db8:	0005883a 	mov	r2,zero
  803dbc:	00005e06 	br	803f38 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  803dc0:	e0bffc17 	ldw	r2,-16(fp)
  803dc4:	108000cc 	andi	r2,r2,3
  803dc8:	10000526 	beq	r2,zero,803de0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  803dcc:	e0bfff17 	ldw	r2,-4(fp)
  803dd0:	00c01884 	movi	r3,98
  803dd4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803dd8:	0005883a 	mov	r2,zero
  803ddc:	00005606 	br	803f38 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  803de0:	e0bffd17 	ldw	r2,-12(fp)
  803de4:	108000a8 	cmpgeui	r2,r2,2
  803de8:	1000051e 	bne	r2,zero,803e00 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  803dec:	e0bfff17 	ldw	r2,-4(fp)
  803df0:	00c016c4 	movi	r3,91
  803df4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803df8:	0005883a 	mov	r2,zero
  803dfc:	00004e06 	br	803f38 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  803e00:	e0bffe17 	ldw	r2,-8(fp)
  803e04:	10800128 	cmpgeui	r2,r2,4
  803e08:	1000051e 	bne	r2,zero,803e20 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  803e0c:	e0bfff17 	ldw	r2,-4(fp)
  803e10:	00c01704 	movi	r3,92
  803e14:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803e18:	0005883a 	mov	r2,zero
  803e1c:	00004606 	br	803f38 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803e20:	0005303a 	rdctl	r2,status
  803e24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803e28:	e0fffb17 	ldw	r3,-20(fp)
  803e2c:	00bfff84 	movi	r2,-2
  803e30:	1884703a 	and	r2,r3,r2
  803e34:	1001703a 	wrctl	status,r2
  
  return context;
  803e38:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  803e3c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  803e40:	d0a03c17 	ldw	r2,-32528(gp)
  803e44:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  803e48:	d0a03c17 	ldw	r2,-32528(gp)
  803e4c:	10000326 	beq	r2,zero,803e5c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  803e50:	d0a03c17 	ldw	r2,-32528(gp)
  803e54:	10800117 	ldw	r2,4(r2)
  803e58:	d0a03c15 	stw	r2,-32528(gp)
  803e5c:	e0bff817 	ldw	r2,-32(fp)
  803e60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803e64:	e0bff917 	ldw	r2,-28(fp)
  803e68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  803e6c:	e0bffa17 	ldw	r2,-24(fp)
  803e70:	1000051e 	bne	r2,zero,803e88 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  803e74:	e0bfff17 	ldw	r2,-4(fp)
  803e78:	00c01684 	movi	r3,90
  803e7c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803e80:	0005883a 	mov	r2,zero
  803e84:	00002c06 	br	803f38 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  803e88:	e0bffc17 	ldw	r2,-16(fp)
  803e8c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  803e90:	e0fffc17 	ldw	r3,-16(fp)
  803e94:	e0bffe17 	ldw	r2,-8(fp)
  803e98:	1885883a 	add	r2,r3,r2
  803e9c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  803ea0:	e03ff715 	stw	zero,-36(fp)
  803ea4:	00000c06 	br	803ed8 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  803ea8:	e0bff617 	ldw	r2,-40(fp)
  803eac:	e0fff517 	ldw	r3,-44(fp)
  803eb0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  803eb4:	e0bff517 	ldw	r2,-44(fp)
  803eb8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  803ebc:	e0fff517 	ldw	r3,-44(fp)
  803ec0:	e0bffe17 	ldw	r2,-8(fp)
  803ec4:	1885883a 	add	r2,r3,r2
  803ec8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  803ecc:	e0bff717 	ldw	r2,-36(fp)
  803ed0:	10800044 	addi	r2,r2,1
  803ed4:	e0bff715 	stw	r2,-36(fp)
  803ed8:	e0bffd17 	ldw	r2,-12(fp)
  803edc:	10bfffc4 	addi	r2,r2,-1
  803ee0:	e0fff717 	ldw	r3,-36(fp)
  803ee4:	18bff036 	bltu	r3,r2,803ea8 <__alt_mem_epcs_flash_controller_0+0xff7faea8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  803ee8:	e0bff617 	ldw	r2,-40(fp)
  803eec:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  803ef0:	e0bffa17 	ldw	r2,-24(fp)
  803ef4:	e0fffc17 	ldw	r3,-16(fp)
  803ef8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  803efc:	e0bffa17 	ldw	r2,-24(fp)
  803f00:	e0fffc17 	ldw	r3,-16(fp)
  803f04:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  803f08:	e0bffa17 	ldw	r2,-24(fp)
  803f0c:	e0fffd17 	ldw	r3,-12(fp)
  803f10:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  803f14:	e0bffa17 	ldw	r2,-24(fp)
  803f18:	e0fffd17 	ldw	r3,-12(fp)
  803f1c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  803f20:	e0bffa17 	ldw	r2,-24(fp)
  803f24:	e0fffe17 	ldw	r3,-8(fp)
  803f28:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  803f2c:	e0bfff17 	ldw	r2,-4(fp)
  803f30:	10000005 	stb	zero,0(r2)
    return (pmem);
  803f34:	e0bffa17 	ldw	r2,-24(fp)
}
  803f38:	e037883a 	mov	sp,fp
  803f3c:	df000017 	ldw	fp,0(sp)
  803f40:	dec00104 	addi	sp,sp,4
  803f44:	f800283a 	ret

00803f48 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  803f48:	defff804 	addi	sp,sp,-32
  803f4c:	df000715 	stw	fp,28(sp)
  803f50:	df000704 	addi	fp,sp,28
  803f54:	e13ffe15 	stw	r4,-8(fp)
  803f58:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  803f5c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  803f60:	e0bfff17 	ldw	r2,-4(fp)
  803f64:	1000021e 	bne	r2,zero,803f70 <OSMemGet+0x28>
        return ((void *)0);
  803f68:	0005883a 	mov	r2,zero
  803f6c:	00002e06 	br	804028 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  803f70:	e0bffe17 	ldw	r2,-8(fp)
  803f74:	1000051e 	bne	r2,zero,803f8c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  803f78:	e0bfff17 	ldw	r2,-4(fp)
  803f7c:	00c01804 	movi	r3,96
  803f80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  803f84:	0005883a 	mov	r2,zero
  803f88:	00002706 	br	804028 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f8c:	0005303a 	rdctl	r2,status
  803f90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f94:	e0fffd17 	ldw	r3,-12(fp)
  803f98:	00bfff84 	movi	r2,-2
  803f9c:	1884703a 	and	r2,r3,r2
  803fa0:	1001703a 	wrctl	status,r2
  
  return context;
  803fa4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  803fa8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  803fac:	e0bffe17 	ldw	r2,-8(fp)
  803fb0:	10800417 	ldw	r2,16(r2)
  803fb4:	10001426 	beq	r2,zero,804008 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  803fb8:	e0bffe17 	ldw	r2,-8(fp)
  803fbc:	10800117 	ldw	r2,4(r2)
  803fc0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  803fc4:	e0bffb17 	ldw	r2,-20(fp)
  803fc8:	10c00017 	ldw	r3,0(r2)
  803fcc:	e0bffe17 	ldw	r2,-8(fp)
  803fd0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  803fd4:	e0bffe17 	ldw	r2,-8(fp)
  803fd8:	10800417 	ldw	r2,16(r2)
  803fdc:	10ffffc4 	addi	r3,r2,-1
  803fe0:	e0bffe17 	ldw	r2,-8(fp)
  803fe4:	10c00415 	stw	r3,16(r2)
  803fe8:	e0bff917 	ldw	r2,-28(fp)
  803fec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803ff0:	e0bffa17 	ldw	r2,-24(fp)
  803ff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  803ff8:	e0bfff17 	ldw	r2,-4(fp)
  803ffc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  804000:	e0bffb17 	ldw	r2,-20(fp)
  804004:	00000806 	br	804028 <OSMemGet+0xe0>
  804008:	e0bff917 	ldw	r2,-28(fp)
  80400c:	e0bffc15 	stw	r2,-16(fp)
  804010:	e0bffc17 	ldw	r2,-16(fp)
  804014:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  804018:	e0bfff17 	ldw	r2,-4(fp)
  80401c:	00c01744 	movi	r3,93
  804020:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  804024:	0005883a 	mov	r2,zero
}
  804028:	e037883a 	mov	sp,fp
  80402c:	df000017 	ldw	fp,0(sp)
  804030:	dec00104 	addi	sp,sp,4
  804034:	f800283a 	ret

00804038 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  804038:	defff704 	addi	sp,sp,-36
  80403c:	dfc00815 	stw	ra,32(sp)
  804040:	df000715 	stw	fp,28(sp)
  804044:	df000704 	addi	fp,sp,28
  804048:	e13ffd15 	stw	r4,-12(fp)
  80404c:	e17ffe15 	stw	r5,-8(fp)
  804050:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804054:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804058:	e0bfff17 	ldw	r2,-4(fp)
  80405c:	1000021e 	bne	r2,zero,804068 <OSMemNameGet+0x30>
        return (0);
  804060:	0005883a 	mov	r2,zero
  804064:	00002b06 	br	804114 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  804068:	e0bffd17 	ldw	r2,-12(fp)
  80406c:	1000051e 	bne	r2,zero,804084 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  804070:	e0bfff17 	ldw	r2,-4(fp)
  804074:	00c01804 	movi	r3,96
  804078:	10c00005 	stb	r3,0(r2)
        return (0);
  80407c:	0005883a 	mov	r2,zero
  804080:	00002406 	br	804114 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  804084:	e0bffe17 	ldw	r2,-8(fp)
  804088:	1000051e 	bne	r2,zero,8040a0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  80408c:	e0bfff17 	ldw	r2,-4(fp)
  804090:	00c00304 	movi	r3,12
  804094:	10c00005 	stb	r3,0(r2)
        return (0);
  804098:	0005883a 	mov	r2,zero
  80409c:	00001d06 	br	804114 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8040a0:	d0a04103 	ldbu	r2,-32508(gp)
  8040a4:	10803fcc 	andi	r2,r2,255
  8040a8:	10000526 	beq	r2,zero,8040c0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  8040ac:	e0bfff17 	ldw	r2,-4(fp)
  8040b0:	00c00444 	movi	r3,17
  8040b4:	10c00005 	stb	r3,0(r2)
        return (0);
  8040b8:	0005883a 	mov	r2,zero
  8040bc:	00001506 	br	804114 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8040c0:	0005303a 	rdctl	r2,status
  8040c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8040c8:	e0fffb17 	ldw	r3,-20(fp)
  8040cc:	00bfff84 	movi	r2,-2
  8040d0:	1884703a 	and	r2,r3,r2
  8040d4:	1001703a 	wrctl	status,r2
  
  return context;
  8040d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8040dc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  8040e0:	e0bffd17 	ldw	r2,-12(fp)
  8040e4:	10800504 	addi	r2,r2,20
  8040e8:	100b883a 	mov	r5,r2
  8040ec:	e13ffe17 	ldw	r4,-8(fp)
  8040f0:	0801f400 	call	801f40 <OS_StrCopy>
  8040f4:	e0bffa05 	stb	r2,-24(fp)
  8040f8:	e0bff917 	ldw	r2,-28(fp)
  8040fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804108:	e0bfff17 	ldw	r2,-4(fp)
  80410c:	10000005 	stb	zero,0(r2)
    return (len);
  804110:	e0bffa03 	ldbu	r2,-24(fp)
}
  804114:	e037883a 	mov	sp,fp
  804118:	dfc00117 	ldw	ra,4(sp)
  80411c:	df000017 	ldw	fp,0(sp)
  804120:	dec00204 	addi	sp,sp,8
  804124:	f800283a 	ret

00804128 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  804128:	defff604 	addi	sp,sp,-40
  80412c:	dfc00915 	stw	ra,36(sp)
  804130:	df000815 	stw	fp,32(sp)
  804134:	df000804 	addi	fp,sp,32
  804138:	e13ffd15 	stw	r4,-12(fp)
  80413c:	e17ffe15 	stw	r5,-8(fp)
  804140:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804144:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804148:	e0bfff17 	ldw	r2,-4(fp)
  80414c:	10003526 	beq	r2,zero,804224 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  804150:	e0bffd17 	ldw	r2,-12(fp)
  804154:	1000041e 	bne	r2,zero,804168 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  804158:	e0bfff17 	ldw	r2,-4(fp)
  80415c:	00c01804 	movi	r3,96
  804160:	10c00005 	stb	r3,0(r2)
        return;
  804164:	00003006 	br	804228 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  804168:	e0bffe17 	ldw	r2,-8(fp)
  80416c:	1000041e 	bne	r2,zero,804180 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  804170:	e0bfff17 	ldw	r2,-4(fp)
  804174:	00c00304 	movi	r3,12
  804178:	10c00005 	stb	r3,0(r2)
        return;
  80417c:	00002a06 	br	804228 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  804180:	d0a04103 	ldbu	r2,-32508(gp)
  804184:	10803fcc 	andi	r2,r2,255
  804188:	10000426 	beq	r2,zero,80419c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  80418c:	e0bfff17 	ldw	r2,-4(fp)
  804190:	00c00484 	movi	r3,18
  804194:	10c00005 	stb	r3,0(r2)
        return;
  804198:	00002306 	br	804228 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80419c:	0005303a 	rdctl	r2,status
  8041a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8041a4:	e0fffc17 	ldw	r3,-16(fp)
  8041a8:	00bfff84 	movi	r2,-2
  8041ac:	1884703a 	and	r2,r3,r2
  8041b0:	1001703a 	wrctl	status,r2
  
  return context;
  8041b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8041b8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8041bc:	e13ffe17 	ldw	r4,-8(fp)
  8041c0:	0801fb40 	call	801fb4 <OS_StrLen>
  8041c4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  8041c8:	e0bffa03 	ldbu	r2,-24(fp)
  8041cc:	10800830 	cmpltui	r2,r2,32
  8041d0:	1000081e 	bne	r2,zero,8041f4 <OSMemNameSet+0xcc>
  8041d4:	e0bff817 	ldw	r2,-32(fp)
  8041d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8041dc:	e0bff917 	ldw	r2,-28(fp)
  8041e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  8041e4:	e0bfff17 	ldw	r2,-4(fp)
  8041e8:	00c018c4 	movi	r3,99
  8041ec:	10c00005 	stb	r3,0(r2)
        return;
  8041f0:	00000d06 	br	804228 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  8041f4:	e0bffd17 	ldw	r2,-12(fp)
  8041f8:	10800504 	addi	r2,r2,20
  8041fc:	e17ffe17 	ldw	r5,-8(fp)
  804200:	1009883a 	mov	r4,r2
  804204:	0801f400 	call	801f40 <OS_StrCopy>
  804208:	e0bff817 	ldw	r2,-32(fp)
  80420c:	e0bffb15 	stw	r2,-20(fp)
  804210:	e0bffb17 	ldw	r2,-20(fp)
  804214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804218:	e0bfff17 	ldw	r2,-4(fp)
  80421c:	10000005 	stb	zero,0(r2)
  804220:	00000106 	br	804228 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  804224:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  804228:	e037883a 	mov	sp,fp
  80422c:	dfc00117 	ldw	ra,4(sp)
  804230:	df000017 	ldw	fp,0(sp)
  804234:	dec00204 	addi	sp,sp,8
  804238:	f800283a 	ret

0080423c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80423c:	defff904 	addi	sp,sp,-28
  804240:	df000615 	stw	fp,24(sp)
  804244:	df000604 	addi	fp,sp,24
  804248:	e13ffe15 	stw	r4,-8(fp)
  80424c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804250:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  804254:	e0bffe17 	ldw	r2,-8(fp)
  804258:	1000021e 	bne	r2,zero,804264 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  80425c:	00801804 	movi	r2,96
  804260:	00002806 	br	804304 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  804264:	e0bfff17 	ldw	r2,-4(fp)
  804268:	1000021e 	bne	r2,zero,804274 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  80426c:	008017c4 	movi	r2,95
  804270:	00002406 	br	804304 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804274:	0005303a 	rdctl	r2,status
  804278:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80427c:	e0fffd17 	ldw	r3,-12(fp)
  804280:	00bfff84 	movi	r2,-2
  804284:	1884703a 	and	r2,r3,r2
  804288:	1001703a 	wrctl	status,r2
  
  return context;
  80428c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804290:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  804294:	e0bffe17 	ldw	r2,-8(fp)
  804298:	10c00417 	ldw	r3,16(r2)
  80429c:	e0bffe17 	ldw	r2,-8(fp)
  8042a0:	10800317 	ldw	r2,12(r2)
  8042a4:	18800636 	bltu	r3,r2,8042c0 <OSMemPut+0x84>
  8042a8:	e0bffa17 	ldw	r2,-24(fp)
  8042ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8042b0:	e0bffb17 	ldw	r2,-20(fp)
  8042b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  8042b8:	00801784 	movi	r2,94
  8042bc:	00001106 	br	804304 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  8042c0:	e0bffe17 	ldw	r2,-8(fp)
  8042c4:	10c00117 	ldw	r3,4(r2)
  8042c8:	e0bfff17 	ldw	r2,-4(fp)
  8042cc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  8042d0:	e0bffe17 	ldw	r2,-8(fp)
  8042d4:	e0ffff17 	ldw	r3,-4(fp)
  8042d8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  8042dc:	e0bffe17 	ldw	r2,-8(fp)
  8042e0:	10800417 	ldw	r2,16(r2)
  8042e4:	10c00044 	addi	r3,r2,1
  8042e8:	e0bffe17 	ldw	r2,-8(fp)
  8042ec:	10c00415 	stw	r3,16(r2)
  8042f0:	e0bffa17 	ldw	r2,-24(fp)
  8042f4:	e0bffc15 	stw	r2,-16(fp)
  8042f8:	e0bffc17 	ldw	r2,-16(fp)
  8042fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  804300:	0005883a 	mov	r2,zero
}
  804304:	e037883a 	mov	sp,fp
  804308:	df000017 	ldw	fp,0(sp)
  80430c:	dec00104 	addi	sp,sp,4
  804310:	f800283a 	ret

00804314 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  804314:	defffa04 	addi	sp,sp,-24
  804318:	df000515 	stw	fp,20(sp)
  80431c:	df000504 	addi	fp,sp,20
  804320:	e13ffe15 	stw	r4,-8(fp)
  804324:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804328:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80432c:	e0bffe17 	ldw	r2,-8(fp)
  804330:	1000021e 	bne	r2,zero,80433c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  804334:	00801804 	movi	r2,96
  804338:	00002c06 	br	8043ec <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80433c:	e0bfff17 	ldw	r2,-4(fp)
  804340:	1000021e 	bne	r2,zero,80434c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  804344:	00801844 	movi	r2,97
  804348:	00002806 	br	8043ec <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80434c:	0005303a 	rdctl	r2,status
  804350:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804354:	e0fffc17 	ldw	r3,-16(fp)
  804358:	00bfff84 	movi	r2,-2
  80435c:	1884703a 	and	r2,r3,r2
  804360:	1001703a 	wrctl	status,r2
  
  return context;
  804364:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804368:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80436c:	e0bffe17 	ldw	r2,-8(fp)
  804370:	10c00017 	ldw	r3,0(r2)
  804374:	e0bfff17 	ldw	r2,-4(fp)
  804378:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80437c:	e0bffe17 	ldw	r2,-8(fp)
  804380:	10c00117 	ldw	r3,4(r2)
  804384:	e0bfff17 	ldw	r2,-4(fp)
  804388:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80438c:	e0bffe17 	ldw	r2,-8(fp)
  804390:	10c00217 	ldw	r3,8(r2)
  804394:	e0bfff17 	ldw	r2,-4(fp)
  804398:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80439c:	e0bffe17 	ldw	r2,-8(fp)
  8043a0:	10c00317 	ldw	r3,12(r2)
  8043a4:	e0bfff17 	ldw	r2,-4(fp)
  8043a8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  8043ac:	e0bffe17 	ldw	r2,-8(fp)
  8043b0:	10c00417 	ldw	r3,16(r2)
  8043b4:	e0bfff17 	ldw	r2,-4(fp)
  8043b8:	10c00415 	stw	r3,16(r2)
  8043bc:	e0bffb17 	ldw	r2,-20(fp)
  8043c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8043c4:	e0bffd17 	ldw	r2,-12(fp)
  8043c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  8043cc:	e0bfff17 	ldw	r2,-4(fp)
  8043d0:	10c00317 	ldw	r3,12(r2)
  8043d4:	e0bfff17 	ldw	r2,-4(fp)
  8043d8:	10800417 	ldw	r2,16(r2)
  8043dc:	1887c83a 	sub	r3,r3,r2
  8043e0:	e0bfff17 	ldw	r2,-4(fp)
  8043e4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  8043e8:	0005883a 	mov	r2,zero
}
  8043ec:	e037883a 	mov	sp,fp
  8043f0:	df000017 	ldw	fp,0(sp)
  8043f4:	dec00104 	addi	sp,sp,4
  8043f8:	f800283a 	ret

008043fc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  8043fc:	defffc04 	addi	sp,sp,-16
  804400:	dfc00315 	stw	ra,12(sp)
  804404:	df000215 	stw	fp,8(sp)
  804408:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80440c:	01430c04 	movi	r5,3120
  804410:	01002074 	movhi	r4,129
  804414:	21097b04 	addi	r4,r4,9708
  804418:	0801d400 	call	801d40 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80441c:	00802074 	movhi	r2,129
  804420:	10897b04 	addi	r2,r2,9708
  804424:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  804428:	e03fff0d 	sth	zero,-4(fp)
  80442c:	00001606 	br	804488 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  804430:	e0bfff0b 	ldhu	r2,-4(fp)
  804434:	10800044 	addi	r2,r2,1
  804438:	01400d04 	movi	r5,52
  80443c:	1009883a 	mov	r4,r2
  804440:	080c6ac0 	call	80c6ac <__mulsi3>
  804444:	1007883a 	mov	r3,r2
  804448:	00802074 	movhi	r2,129
  80444c:	10897b04 	addi	r2,r2,9708
  804450:	1887883a 	add	r3,r3,r2
  804454:	e0bffe17 	ldw	r2,-8(fp)
  804458:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80445c:	e0bffe17 	ldw	r2,-8(fp)
  804460:	00c00fc4 	movi	r3,63
  804464:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  804468:	e0bffe17 	ldw	r2,-8(fp)
  80446c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  804470:	e0bffe17 	ldw	r2,-8(fp)
  804474:	10800d04 	addi	r2,r2,52
  804478:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80447c:	e0bfff0b 	ldhu	r2,-4(fp)
  804480:	10800044 	addi	r2,r2,1
  804484:	e0bfff0d 	sth	r2,-4(fp)
  804488:	e0bfff0b 	ldhu	r2,-4(fp)
  80448c:	10800ef0 	cmpltui	r2,r2,59
  804490:	103fe71e 	bne	r2,zero,804430 <__alt_mem_epcs_flash_controller_0+0xff7fb430>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  804494:	e0bffe17 	ldw	r2,-8(fp)
  804498:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80449c:	e0bffe17 	ldw	r2,-8(fp)
  8044a0:	00c00fc4 	movi	r3,63
  8044a4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  8044a8:	e0bffe17 	ldw	r2,-8(fp)
  8044ac:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  8044b0:	00802074 	movhi	r2,129
  8044b4:	10897b04 	addi	r2,r2,9708
  8044b8:	d0a03c15 	stw	r2,-32528(gp)
#endif
}
  8044bc:	0001883a 	nop
  8044c0:	e037883a 	mov	sp,fp
  8044c4:	dfc00117 	ldw	ra,4(sp)
  8044c8:	df000017 	ldw	fp,0(sp)
  8044cc:	dec00204 	addi	sp,sp,8
  8044d0:	f800283a 	ret

008044d4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  8044d4:	defff804 	addi	sp,sp,-32
  8044d8:	df000715 	stw	fp,28(sp)
  8044dc:	df000704 	addi	fp,sp,28
  8044e0:	e13ffe15 	stw	r4,-8(fp)
  8044e4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8044e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8044ec:	e0bfff17 	ldw	r2,-4(fp)
  8044f0:	1000021e 	bne	r2,zero,8044fc <OSQAccept+0x28>
        return ((void *)0);
  8044f4:	0005883a 	mov	r2,zero
  8044f8:	00004206 	br	804604 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8044fc:	e0bffe17 	ldw	r2,-8(fp)
  804500:	1000051e 	bne	r2,zero,804518 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  804504:	e0bfff17 	ldw	r2,-4(fp)
  804508:	00c00104 	movi	r3,4
  80450c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804510:	0005883a 	mov	r2,zero
  804514:	00003b06 	br	804604 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  804518:	e0bffe17 	ldw	r2,-8(fp)
  80451c:	10800003 	ldbu	r2,0(r2)
  804520:	10803fcc 	andi	r2,r2,255
  804524:	108000a0 	cmpeqi	r2,r2,2
  804528:	1000051e 	bne	r2,zero,804540 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  80452c:	e0bfff17 	ldw	r2,-4(fp)
  804530:	00c00044 	movi	r3,1
  804534:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804538:	0005883a 	mov	r2,zero
  80453c:	00003106 	br	804604 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804540:	0005303a 	rdctl	r2,status
  804544:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804548:	e0fffd17 	ldw	r3,-12(fp)
  80454c:	00bfff84 	movi	r2,-2
  804550:	1884703a 	and	r2,r3,r2
  804554:	1001703a 	wrctl	status,r2
  
  return context;
  804558:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  80455c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  804560:	e0bffe17 	ldw	r2,-8(fp)
  804564:	10800117 	ldw	r2,4(r2)
  804568:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80456c:	e0bffc17 	ldw	r2,-16(fp)
  804570:	1080058b 	ldhu	r2,22(r2)
  804574:	10bfffcc 	andi	r2,r2,65535
  804578:	10001926 	beq	r2,zero,8045e0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10800417 	ldw	r2,16(r2)
  804584:	11000104 	addi	r4,r2,4
  804588:	e0fffc17 	ldw	r3,-16(fp)
  80458c:	19000415 	stw	r4,16(r3)
  804590:	10800017 	ldw	r2,0(r2)
  804594:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  804598:	e0bffc17 	ldw	r2,-16(fp)
  80459c:	1080058b 	ldhu	r2,22(r2)
  8045a0:	10bfffc4 	addi	r2,r2,-1
  8045a4:	1007883a 	mov	r3,r2
  8045a8:	e0bffc17 	ldw	r2,-16(fp)
  8045ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8045b0:	e0bffc17 	ldw	r2,-16(fp)
  8045b4:	10c00417 	ldw	r3,16(r2)
  8045b8:	e0bffc17 	ldw	r2,-16(fp)
  8045bc:	10800217 	ldw	r2,8(r2)
  8045c0:	1880041e 	bne	r3,r2,8045d4 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  8045c4:	e0bffc17 	ldw	r2,-16(fp)
  8045c8:	10c00117 	ldw	r3,4(r2)
  8045cc:	e0bffc17 	ldw	r2,-16(fp)
  8045d0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  8045d4:	e0bfff17 	ldw	r2,-4(fp)
  8045d8:	10000005 	stb	zero,0(r2)
  8045dc:	00000406 	br	8045f0 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  8045e0:	e0bfff17 	ldw	r2,-4(fp)
  8045e4:	00c007c4 	movi	r3,31
  8045e8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  8045ec:	e03ff915 	stw	zero,-28(fp)
  8045f0:	e0bffa17 	ldw	r2,-24(fp)
  8045f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8045f8:	e0bffb17 	ldw	r2,-20(fp)
  8045fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  804600:	e0bff917 	ldw	r2,-28(fp)
}
  804604:	e037883a 	mov	sp,fp
  804608:	df000017 	ldw	fp,0(sp)
  80460c:	dec00104 	addi	sp,sp,4
  804610:	f800283a 	ret

00804614 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  804614:	defff404 	addi	sp,sp,-48
  804618:	dfc00b15 	stw	ra,44(sp)
  80461c:	df000a15 	stw	fp,40(sp)
  804620:	df000a04 	addi	fp,sp,40
  804624:	e13ffe15 	stw	r4,-8(fp)
  804628:	2805883a 	mov	r2,r5
  80462c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804630:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  804634:	d0a04103 	ldbu	r2,-32508(gp)
  804638:	10803fcc 	andi	r2,r2,255
  80463c:	10000226 	beq	r2,zero,804648 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  804640:	0005883a 	mov	r2,zero
  804644:	00005906 	br	8047ac <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804648:	0005303a 	rdctl	r2,status
  80464c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804650:	e0fffd17 	ldw	r3,-12(fp)
  804654:	00bfff84 	movi	r2,-2
  804658:	1884703a 	and	r2,r3,r2
  80465c:	1001703a 	wrctl	status,r2
  
  return context;
  804660:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  804664:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  804668:	d0a04017 	ldw	r2,-32512(gp)
  80466c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  804670:	d0a04017 	ldw	r2,-32512(gp)
  804674:	10000326 	beq	r2,zero,804684 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  804678:	d0a04017 	ldw	r2,-32512(gp)
  80467c:	10800117 	ldw	r2,4(r2)
  804680:	d0a04015 	stw	r2,-32512(gp)
  804684:	e0bff717 	ldw	r2,-36(fp)
  804688:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80468c:	e0bff817 	ldw	r2,-32(fp)
  804690:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  804694:	e0bff617 	ldw	r2,-40(fp)
  804698:	10004326 	beq	r2,zero,8047a8 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80469c:	0005303a 	rdctl	r2,status
  8046a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8046a4:	e0fff917 	ldw	r3,-28(fp)
  8046a8:	00bfff84 	movi	r2,-2
  8046ac:	1884703a 	and	r2,r3,r2
  8046b0:	1001703a 	wrctl	status,r2
  
  return context;
  8046b4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  8046b8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  8046bc:	d0a03e17 	ldw	r2,-32520(gp)
  8046c0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  8046c4:	e0bffb17 	ldw	r2,-20(fp)
  8046c8:	10002d26 	beq	r2,zero,804780 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  8046cc:	d0a03e17 	ldw	r2,-32520(gp)
  8046d0:	10800017 	ldw	r2,0(r2)
  8046d4:	d0a03e15 	stw	r2,-32520(gp)
  8046d8:	e0bff717 	ldw	r2,-36(fp)
  8046dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046e0:	e0bffa17 	ldw	r2,-24(fp)
  8046e4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  8046e8:	e0bffb17 	ldw	r2,-20(fp)
  8046ec:	e0fffe17 	ldw	r3,-8(fp)
  8046f0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  8046f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8046f8:	1085883a 	add	r2,r2,r2
  8046fc:	1085883a 	add	r2,r2,r2
  804700:	1007883a 	mov	r3,r2
  804704:	e0bffe17 	ldw	r2,-8(fp)
  804708:	10c7883a 	add	r3,r2,r3
  80470c:	e0bffb17 	ldw	r2,-20(fp)
  804710:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  804714:	e0bffb17 	ldw	r2,-20(fp)
  804718:	e0fffe17 	ldw	r3,-8(fp)
  80471c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  804720:	e0bffb17 	ldw	r2,-20(fp)
  804724:	e0fffe17 	ldw	r3,-8(fp)
  804728:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  80472c:	e0bffb17 	ldw	r2,-20(fp)
  804730:	e0ffff0b 	ldhu	r3,-4(fp)
  804734:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  804738:	e0bffb17 	ldw	r2,-20(fp)
  80473c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  804740:	e0bff617 	ldw	r2,-40(fp)
  804744:	00c00084 	movi	r3,2
  804748:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  80474c:	e0bff617 	ldw	r2,-40(fp)
  804750:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  804754:	e0bff617 	ldw	r2,-40(fp)
  804758:	e0fffb17 	ldw	r3,-20(fp)
  80475c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  804760:	e0bff617 	ldw	r2,-40(fp)
  804764:	00c00fc4 	movi	r3,63
  804768:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80476c:	e0bff617 	ldw	r2,-40(fp)
  804770:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  804774:	e13ff617 	ldw	r4,-40(fp)
  804778:	08019600 	call	801960 <OS_EventWaitListInit>
  80477c:	00000a06 	br	8047a8 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  804780:	d0e04017 	ldw	r3,-32512(gp)
  804784:	e0bff617 	ldw	r2,-40(fp)
  804788:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80478c:	e0bff617 	ldw	r2,-40(fp)
  804790:	d0a04015 	stw	r2,-32512(gp)
  804794:	e0bff717 	ldw	r2,-36(fp)
  804798:	e0bffc15 	stw	r2,-16(fp)
  80479c:	e0bffc17 	ldw	r2,-16(fp)
  8047a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  8047a4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  8047a8:	e0bff617 	ldw	r2,-40(fp)
}
  8047ac:	e037883a 	mov	sp,fp
  8047b0:	dfc00117 	ldw	ra,4(sp)
  8047b4:	df000017 	ldw	fp,0(sp)
  8047b8:	dec00204 	addi	sp,sp,8
  8047bc:	f800283a 	ret

008047c0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8047c0:	defff204 	addi	sp,sp,-56
  8047c4:	dfc00d15 	stw	ra,52(sp)
  8047c8:	df000c15 	stw	fp,48(sp)
  8047cc:	df000c04 	addi	fp,sp,48
  8047d0:	e13ffd15 	stw	r4,-12(fp)
  8047d4:	2805883a 	mov	r2,r5
  8047d8:	e1bfff15 	stw	r6,-4(fp)
  8047dc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8047e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8047e4:	e0bfff17 	ldw	r2,-4(fp)
  8047e8:	1000021e 	bne	r2,zero,8047f4 <OSQDel+0x34>
        return (pevent);
  8047ec:	e0bffd17 	ldw	r2,-12(fp)
  8047f0:	00008e06 	br	804a2c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8047f4:	e0bffd17 	ldw	r2,-12(fp)
  8047f8:	1000051e 	bne	r2,zero,804810 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8047fc:	e0bfff17 	ldw	r2,-4(fp)
  804800:	00c00104 	movi	r3,4
  804804:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804808:	e0bffd17 	ldw	r2,-12(fp)
  80480c:	00008706 	br	804a2c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  804810:	e0bffd17 	ldw	r2,-12(fp)
  804814:	10800003 	ldbu	r2,0(r2)
  804818:	10803fcc 	andi	r2,r2,255
  80481c:	108000a0 	cmpeqi	r2,r2,2
  804820:	1000051e 	bne	r2,zero,804838 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804824:	e0bfff17 	ldw	r2,-4(fp)
  804828:	00c00044 	movi	r3,1
  80482c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804830:	e0bffd17 	ldw	r2,-12(fp)
  804834:	00007d06 	br	804a2c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  804838:	d0a04103 	ldbu	r2,-32508(gp)
  80483c:	10803fcc 	andi	r2,r2,255
  804840:	10000526 	beq	r2,zero,804858 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  804844:	e0bfff17 	ldw	r2,-4(fp)
  804848:	00c003c4 	movi	r3,15
  80484c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804850:	e0bffd17 	ldw	r2,-12(fp)
  804854:	00007506 	br	804a2c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804858:	0005303a 	rdctl	r2,status
  80485c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804860:	e0fffc17 	ldw	r3,-16(fp)
  804864:	00bfff84 	movi	r2,-2
  804868:	1884703a 	and	r2,r3,r2
  80486c:	1001703a 	wrctl	status,r2
  
  return context;
  804870:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804874:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  804878:	e0bffd17 	ldw	r2,-12(fp)
  80487c:	10800283 	ldbu	r2,10(r2)
  804880:	10803fcc 	andi	r2,r2,255
  804884:	10000326 	beq	r2,zero,804894 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  804888:	00800044 	movi	r2,1
  80488c:	e0bff405 	stb	r2,-48(fp)
  804890:	00000106 	br	804898 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  804894:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  804898:	e0bffe03 	ldbu	r2,-8(fp)
  80489c:	10000326 	beq	r2,zero,8048ac <OSQDel+0xec>
  8048a0:	10800060 	cmpeqi	r2,r2,1
  8048a4:	1000301e 	bne	r2,zero,804968 <OSQDel+0x1a8>
  8048a8:	00005506 	br	804a00 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  8048ac:	e0bff403 	ldbu	r2,-48(fp)
  8048b0:	10001e1e 	bne	r2,zero,80492c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8048b4:	e0bffd17 	ldw	r2,-12(fp)
  8048b8:	00c00fc4 	movi	r3,63
  8048bc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8048c0:	e0bffd17 	ldw	r2,-12(fp)
  8048c4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8048c8:	e0bffd17 	ldw	r2,-12(fp)
  8048cc:	10800117 	ldw	r2,4(r2)
  8048d0:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8048d4:	d0e03e17 	ldw	r3,-32520(gp)
  8048d8:	e0bff817 	ldw	r2,-32(fp)
  8048dc:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  8048e0:	e0bff817 	ldw	r2,-32(fp)
  8048e4:	d0a03e15 	stw	r2,-32520(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8048e8:	e0bffd17 	ldw	r2,-12(fp)
  8048ec:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8048f0:	d0e04017 	ldw	r3,-32512(gp)
  8048f4:	e0bffd17 	ldw	r2,-12(fp)
  8048f8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8048fc:	e0bffd17 	ldw	r2,-12(fp)
  804900:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  804904:	e0bffd17 	ldw	r2,-12(fp)
  804908:	d0a04015 	stw	r2,-32512(gp)
  80490c:	e0bff617 	ldw	r2,-40(fp)
  804910:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804914:	e0bff717 	ldw	r2,-36(fp)
  804918:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80491c:	e0bfff17 	ldw	r2,-4(fp)
  804920:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  804924:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  804928:	00003f06 	br	804a28 <OSQDel+0x268>
  80492c:	e0bff617 	ldw	r2,-40(fp)
  804930:	e0bff915 	stw	r2,-28(fp)
  804934:	e0bff917 	ldw	r2,-28(fp)
  804938:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80493c:	e0bfff17 	ldw	r2,-4(fp)
  804940:	00c01244 	movi	r3,73
  804944:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  804948:	e0bffd17 	ldw	r2,-12(fp)
  80494c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  804950:	00003506 	br	804a28 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  804954:	000f883a 	mov	r7,zero
  804958:	01800104 	movi	r6,4
  80495c:	000b883a 	mov	r5,zero
  804960:	e13ffd17 	ldw	r4,-12(fp)
  804964:	08013b00 	call	8013b0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  804968:	e0bffd17 	ldw	r2,-12(fp)
  80496c:	10800283 	ldbu	r2,10(r2)
  804970:	10803fcc 	andi	r2,r2,255
  804974:	103ff71e 	bne	r2,zero,804954 <__alt_mem_epcs_flash_controller_0+0xff7fb954>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  804978:	e0bffd17 	ldw	r2,-12(fp)
  80497c:	00c00fc4 	movi	r3,63
  804980:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  804984:	e0bffd17 	ldw	r2,-12(fp)
  804988:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80498c:	e0bffd17 	ldw	r2,-12(fp)
  804990:	10800117 	ldw	r2,4(r2)
  804994:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  804998:	d0e03e17 	ldw	r3,-32520(gp)
  80499c:	e0bff817 	ldw	r2,-32(fp)
  8049a0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  8049a4:	e0bff817 	ldw	r2,-32(fp)
  8049a8:	d0a03e15 	stw	r2,-32520(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8049ac:	e0bffd17 	ldw	r2,-12(fp)
  8049b0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8049b4:	d0e04017 	ldw	r3,-32512(gp)
  8049b8:	e0bffd17 	ldw	r2,-12(fp)
  8049bc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8049c0:	e0bffd17 	ldw	r2,-12(fp)
  8049c4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8049c8:	e0bffd17 	ldw	r2,-12(fp)
  8049cc:	d0a04015 	stw	r2,-32512(gp)
  8049d0:	e0bff617 	ldw	r2,-40(fp)
  8049d4:	e0bffa15 	stw	r2,-24(fp)
  8049d8:	e0bffa17 	ldw	r2,-24(fp)
  8049dc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8049e0:	e0bff403 	ldbu	r2,-48(fp)
  8049e4:	10800058 	cmpnei	r2,r2,1
  8049e8:	1000011e 	bne	r2,zero,8049f0 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8049ec:	0801dfc0 	call	801dfc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8049f0:	e0bfff17 	ldw	r2,-4(fp)
  8049f4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  8049f8:	e03ff515 	stw	zero,-44(fp)
             break;
  8049fc:	00000a06 	br	804a28 <OSQDel+0x268>
  804a00:	e0bff617 	ldw	r2,-40(fp)
  804a04:	e0bffb15 	stw	r2,-20(fp)
  804a08:	e0bffb17 	ldw	r2,-20(fp)
  804a0c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  804a10:	e0bfff17 	ldw	r2,-4(fp)
  804a14:	00c001c4 	movi	r3,7
  804a18:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  804a1c:	e0bffd17 	ldw	r2,-12(fp)
  804a20:	e0bff515 	stw	r2,-44(fp)
             break;
  804a24:	0001883a 	nop
    }
    return (pevent_return);
  804a28:	e0bff517 	ldw	r2,-44(fp)
}
  804a2c:	e037883a 	mov	sp,fp
  804a30:	dfc00117 	ldw	ra,4(sp)
  804a34:	df000017 	ldw	fp,0(sp)
  804a38:	dec00204 	addi	sp,sp,8
  804a3c:	f800283a 	ret

00804a40 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  804a40:	defffa04 	addi	sp,sp,-24
  804a44:	df000515 	stw	fp,20(sp)
  804a48:	df000504 	addi	fp,sp,20
  804a4c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  804a50:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  804a54:	e0bfff17 	ldw	r2,-4(fp)
  804a58:	1000021e 	bne	r2,zero,804a64 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  804a5c:	00800104 	movi	r2,4
  804a60:	00002106 	br	804ae8 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  804a64:	e0bfff17 	ldw	r2,-4(fp)
  804a68:	10800003 	ldbu	r2,0(r2)
  804a6c:	10803fcc 	andi	r2,r2,255
  804a70:	108000a0 	cmpeqi	r2,r2,2
  804a74:	1000021e 	bne	r2,zero,804a80 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  804a78:	00800044 	movi	r2,1
  804a7c:	00001a06 	br	804ae8 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a80:	0005303a 	rdctl	r2,status
  804a84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a88:	e0fffd17 	ldw	r3,-12(fp)
  804a8c:	00bfff84 	movi	r2,-2
  804a90:	1884703a 	and	r2,r3,r2
  804a94:	1001703a 	wrctl	status,r2
  
  return context;
  804a98:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804a9c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  804aa0:	e0bfff17 	ldw	r2,-4(fp)
  804aa4:	10800117 	ldw	r2,4(r2)
  804aa8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10c00117 	ldw	r3,4(r2)
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  804abc:	e0bffc17 	ldw	r2,-16(fp)
  804ac0:	10c00117 	ldw	r3,4(r2)
  804ac4:	e0bffc17 	ldw	r2,-16(fp)
  804ac8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  804acc:	e0bffc17 	ldw	r2,-16(fp)
  804ad0:	1000058d 	sth	zero,22(r2)
  804ad4:	e0bffb17 	ldw	r2,-20(fp)
  804ad8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804adc:	e0bffe17 	ldw	r2,-8(fp)
  804ae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  804ae4:	0005883a 	mov	r2,zero
}
  804ae8:	e037883a 	mov	sp,fp
  804aec:	df000017 	ldw	fp,0(sp)
  804af0:	dec00104 	addi	sp,sp,4
  804af4:	f800283a 	ret

00804af8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  804af8:	defff304 	addi	sp,sp,-52
  804afc:	dfc00c15 	stw	ra,48(sp)
  804b00:	df000b15 	stw	fp,44(sp)
  804b04:	df000b04 	addi	fp,sp,44
  804b08:	e13ffd15 	stw	r4,-12(fp)
  804b0c:	2805883a 	mov	r2,r5
  804b10:	e1bfff15 	stw	r6,-4(fp)
  804b14:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804b18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804b1c:	e0bfff17 	ldw	r2,-4(fp)
  804b20:	1000021e 	bne	r2,zero,804b2c <OSQPend+0x34>
        return ((void *)0);
  804b24:	0005883a 	mov	r2,zero
  804b28:	00009106 	br	804d70 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  804b2c:	e0bffd17 	ldw	r2,-12(fp)
  804b30:	1000051e 	bne	r2,zero,804b48 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  804b34:	e0bfff17 	ldw	r2,-4(fp)
  804b38:	00c00104 	movi	r3,4
  804b3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804b40:	0005883a 	mov	r2,zero
  804b44:	00008a06 	br	804d70 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  804b48:	e0bffd17 	ldw	r2,-12(fp)
  804b4c:	10800003 	ldbu	r2,0(r2)
  804b50:	10803fcc 	andi	r2,r2,255
  804b54:	108000a0 	cmpeqi	r2,r2,2
  804b58:	1000051e 	bne	r2,zero,804b70 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804b5c:	e0bfff17 	ldw	r2,-4(fp)
  804b60:	00c00044 	movi	r3,1
  804b64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804b68:	0005883a 	mov	r2,zero
  804b6c:	00008006 	br	804d70 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  804b70:	d0a04103 	ldbu	r2,-32508(gp)
  804b74:	10803fcc 	andi	r2,r2,255
  804b78:	10000526 	beq	r2,zero,804b90 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  804b7c:	e0bfff17 	ldw	r2,-4(fp)
  804b80:	00c00084 	movi	r3,2
  804b84:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804b88:	0005883a 	mov	r2,zero
  804b8c:	00007806 	br	804d70 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  804b90:	d0a03303 	ldbu	r2,-32564(gp)
  804b94:	10803fcc 	andi	r2,r2,255
  804b98:	10000526 	beq	r2,zero,804bb0 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  804b9c:	e0bfff17 	ldw	r2,-4(fp)
  804ba0:	00c00344 	movi	r3,13
  804ba4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804ba8:	0005883a 	mov	r2,zero
  804bac:	00007006 	br	804d70 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804bb0:	0005303a 	rdctl	r2,status
  804bb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804bb8:	e0fffc17 	ldw	r3,-16(fp)
  804bbc:	00bfff84 	movi	r2,-2
  804bc0:	1884703a 	and	r2,r3,r2
  804bc4:	1001703a 	wrctl	status,r2
  
  return context;
  804bc8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804bcc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  804bd0:	e0bffd17 	ldw	r2,-12(fp)
  804bd4:	10800117 	ldw	r2,4(r2)
  804bd8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  804bdc:	e0bff817 	ldw	r2,-32(fp)
  804be0:	1080058b 	ldhu	r2,22(r2)
  804be4:	10bfffcc 	andi	r2,r2,65535
  804be8:	10001e26 	beq	r2,zero,804c64 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  804bec:	e0bff817 	ldw	r2,-32(fp)
  804bf0:	10800417 	ldw	r2,16(r2)
  804bf4:	11000104 	addi	r4,r2,4
  804bf8:	e0fff817 	ldw	r3,-32(fp)
  804bfc:	19000415 	stw	r4,16(r3)
  804c00:	10800017 	ldw	r2,0(r2)
  804c04:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  804c08:	e0bff817 	ldw	r2,-32(fp)
  804c0c:	1080058b 	ldhu	r2,22(r2)
  804c10:	10bfffc4 	addi	r2,r2,-1
  804c14:	1007883a 	mov	r3,r2
  804c18:	e0bff817 	ldw	r2,-32(fp)
  804c1c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  804c20:	e0bff817 	ldw	r2,-32(fp)
  804c24:	10c00417 	ldw	r3,16(r2)
  804c28:	e0bff817 	ldw	r2,-32(fp)
  804c2c:	10800217 	ldw	r2,8(r2)
  804c30:	1880041e 	bne	r3,r2,804c44 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  804c34:	e0bff817 	ldw	r2,-32(fp)
  804c38:	10c00117 	ldw	r3,4(r2)
  804c3c:	e0bff817 	ldw	r2,-32(fp)
  804c40:	10c00415 	stw	r3,16(r2)
  804c44:	e0bff617 	ldw	r2,-40(fp)
  804c48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c4c:	e0bff717 	ldw	r2,-36(fp)
  804c50:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  804c54:	e0bfff17 	ldw	r2,-4(fp)
  804c58:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  804c5c:	e0bff517 	ldw	r2,-44(fp)
  804c60:	00004306 	br	804d70 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  804c64:	d0a04217 	ldw	r2,-32504(gp)
  804c68:	d0e04217 	ldw	r3,-32504(gp)
  804c6c:	18c00c03 	ldbu	r3,48(r3)
  804c70:	18c00114 	ori	r3,r3,4
  804c74:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  804c78:	d0a04217 	ldw	r2,-32504(gp)
  804c7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  804c80:	d0a04217 	ldw	r2,-32504(gp)
  804c84:	e0fffe0b 	ldhu	r3,-8(fp)
  804c88:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  804c8c:	e13ffd17 	ldw	r4,-12(fp)
  804c90:	08015480 	call	801548 <OS_EventTaskWait>
  804c94:	e0bff617 	ldw	r2,-40(fp)
  804c98:	e0bffb15 	stw	r2,-20(fp)
  804c9c:	e0bffb17 	ldw	r2,-20(fp)
  804ca0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  804ca4:	0801dfc0 	call	801dfc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ca8:	0005303a 	rdctl	r2,status
  804cac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804cb0:	e0fff917 	ldw	r3,-28(fp)
  804cb4:	00bfff84 	movi	r2,-2
  804cb8:	1884703a 	and	r2,r3,r2
  804cbc:	1001703a 	wrctl	status,r2
  
  return context;
  804cc0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  804cc4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  804cc8:	d0a04217 	ldw	r2,-32504(gp)
  804ccc:	10800c43 	ldbu	r2,49(r2)
  804cd0:	10803fcc 	andi	r2,r2,255
  804cd4:	10000326 	beq	r2,zero,804ce4 <OSQPend+0x1ec>
  804cd8:	108000a0 	cmpeqi	r2,r2,2
  804cdc:	1000071e 	bne	r2,zero,804cfc <OSQPend+0x204>
  804ce0:	00000b06 	br	804d10 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  804ce4:	d0a04217 	ldw	r2,-32504(gp)
  804ce8:	10800917 	ldw	r2,36(r2)
  804cec:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  804cf0:	e0bfff17 	ldw	r2,-4(fp)
  804cf4:	10000005 	stb	zero,0(r2)
             break;
  804cf8:	00000e06 	br	804d34 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  804cfc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  804d00:	e0bfff17 	ldw	r2,-4(fp)
  804d04:	00c00384 	movi	r3,14
  804d08:	10c00005 	stb	r3,0(r2)
             break;
  804d0c:	00000906 	br	804d34 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  804d10:	d0a04217 	ldw	r2,-32504(gp)
  804d14:	e17ffd17 	ldw	r5,-12(fp)
  804d18:	1009883a 	mov	r4,r2
  804d1c:	08017a80 	call	8017a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
  804d20:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  804d24:	e0bfff17 	ldw	r2,-4(fp)
  804d28:	00c00284 	movi	r3,10
  804d2c:	10c00005 	stb	r3,0(r2)
             break;
  804d30:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  804d34:	d0a04217 	ldw	r2,-32504(gp)
  804d38:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  804d3c:	d0a04217 	ldw	r2,-32504(gp)
  804d40:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  804d44:	d0a04217 	ldw	r2,-32504(gp)
  804d48:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  804d4c:	d0a04217 	ldw	r2,-32504(gp)
  804d50:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  804d54:	d0a04217 	ldw	r2,-32504(gp)
  804d58:	10000915 	stw	zero,36(r2)
  804d5c:	e0bff617 	ldw	r2,-40(fp)
  804d60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804d64:	e0bffa17 	ldw	r2,-24(fp)
  804d68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  804d6c:	e0bff517 	ldw	r2,-44(fp)
}
  804d70:	e037883a 	mov	sp,fp
  804d74:	dfc00117 	ldw	ra,4(sp)
  804d78:	df000017 	ldw	fp,0(sp)
  804d7c:	dec00204 	addi	sp,sp,8
  804d80:	f800283a 	ret

00804d84 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  804d84:	defff604 	addi	sp,sp,-40
  804d88:	dfc00915 	stw	ra,36(sp)
  804d8c:	df000815 	stw	fp,32(sp)
  804d90:	df000804 	addi	fp,sp,32
  804d94:	e13ffd15 	stw	r4,-12(fp)
  804d98:	2805883a 	mov	r2,r5
  804d9c:	e1bfff15 	stw	r6,-4(fp)
  804da0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804da4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  804da8:	e0bfff17 	ldw	r2,-4(fp)
  804dac:	1000021e 	bne	r2,zero,804db8 <OSQPendAbort+0x34>
        return (0);
  804db0:	0005883a 	mov	r2,zero
  804db4:	00004906 	br	804edc <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  804db8:	e0bffd17 	ldw	r2,-12(fp)
  804dbc:	1000051e 	bne	r2,zero,804dd4 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  804dc0:	e0bfff17 	ldw	r2,-4(fp)
  804dc4:	00c00104 	movi	r3,4
  804dc8:	10c00005 	stb	r3,0(r2)
        return (0);
  804dcc:	0005883a 	mov	r2,zero
  804dd0:	00004206 	br	804edc <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  804dd4:	e0bffd17 	ldw	r2,-12(fp)
  804dd8:	10800003 	ldbu	r2,0(r2)
  804ddc:	10803fcc 	andi	r2,r2,255
  804de0:	108000a0 	cmpeqi	r2,r2,2
  804de4:	1000051e 	bne	r2,zero,804dfc <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804de8:	e0bfff17 	ldw	r2,-4(fp)
  804dec:	00c00044 	movi	r3,1
  804df0:	10c00005 	stb	r3,0(r2)
        return (0);
  804df4:	0005883a 	mov	r2,zero
  804df8:	00003806 	br	804edc <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804dfc:	0005303a 	rdctl	r2,status
  804e00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804e04:	e0fffc17 	ldw	r3,-16(fp)
  804e08:	00bfff84 	movi	r2,-2
  804e0c:	1884703a 	and	r2,r3,r2
  804e10:	1001703a 	wrctl	status,r2
  
  return context;
  804e14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804e18:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  804e1c:	e0bffd17 	ldw	r2,-12(fp)
  804e20:	10800283 	ldbu	r2,10(r2)
  804e24:	10803fcc 	andi	r2,r2,255
  804e28:	10002526 	beq	r2,zero,804ec0 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  804e2c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  804e30:	e0bffe03 	ldbu	r2,-8(fp)
  804e34:	10800060 	cmpeqi	r2,r2,1
  804e38:	10000e26 	beq	r2,zero,804e74 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  804e3c:	00000806 	br	804e60 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  804e40:	01c00084 	movi	r7,2
  804e44:	01800104 	movi	r6,4
  804e48:	000b883a 	mov	r5,zero
  804e4c:	e13ffd17 	ldw	r4,-12(fp)
  804e50:	08013b00 	call	8013b0 <OS_EventTaskRdy>
                     nbr_tasks++;
  804e54:	e0bff803 	ldbu	r2,-32(fp)
  804e58:	10800044 	addi	r2,r2,1
  804e5c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  804e60:	e0bffd17 	ldw	r2,-12(fp)
  804e64:	10800283 	ldbu	r2,10(r2)
  804e68:	10803fcc 	andi	r2,r2,255
  804e6c:	103ff41e 	bne	r2,zero,804e40 <__alt_mem_epcs_flash_controller_0+0xff7fbe40>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  804e70:	00000906 	br	804e98 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  804e74:	01c00084 	movi	r7,2
  804e78:	01800104 	movi	r6,4
  804e7c:	000b883a 	mov	r5,zero
  804e80:	e13ffd17 	ldw	r4,-12(fp)
  804e84:	08013b00 	call	8013b0 <OS_EventTaskRdy>
                 nbr_tasks++;
  804e88:	e0bff803 	ldbu	r2,-32(fp)
  804e8c:	10800044 	addi	r2,r2,1
  804e90:	e0bff805 	stb	r2,-32(fp)
                 break;
  804e94:	0001883a 	nop
  804e98:	e0bff917 	ldw	r2,-28(fp)
  804e9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ea0:	e0bffa17 	ldw	r2,-24(fp)
  804ea4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  804ea8:	0801dfc0 	call	801dfc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  804eac:	e0bfff17 	ldw	r2,-4(fp)
  804eb0:	00c00384 	movi	r3,14
  804eb4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  804eb8:	e0bff803 	ldbu	r2,-32(fp)
  804ebc:	00000706 	br	804edc <OSQPendAbort+0x158>
  804ec0:	e0bff917 	ldw	r2,-28(fp)
  804ec4:	e0bffb15 	stw	r2,-20(fp)
  804ec8:	e0bffb17 	ldw	r2,-20(fp)
  804ecc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804ed0:	e0bfff17 	ldw	r2,-4(fp)
  804ed4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  804ed8:	0005883a 	mov	r2,zero
}
  804edc:	e037883a 	mov	sp,fp
  804ee0:	dfc00117 	ldw	ra,4(sp)
  804ee4:	df000017 	ldw	fp,0(sp)
  804ee8:	dec00204 	addi	sp,sp,8
  804eec:	f800283a 	ret

00804ef0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  804ef0:	defff604 	addi	sp,sp,-40
  804ef4:	dfc00915 	stw	ra,36(sp)
  804ef8:	df000815 	stw	fp,32(sp)
  804efc:	df000804 	addi	fp,sp,32
  804f00:	e13ffe15 	stw	r4,-8(fp)
  804f04:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  804f08:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  804f0c:	e0bffe17 	ldw	r2,-8(fp)
  804f10:	1000021e 	bne	r2,zero,804f1c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  804f14:	00800104 	movi	r2,4
  804f18:	00004a06 	br	805044 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  804f1c:	e0bffe17 	ldw	r2,-8(fp)
  804f20:	10800003 	ldbu	r2,0(r2)
  804f24:	10803fcc 	andi	r2,r2,255
  804f28:	108000a0 	cmpeqi	r2,r2,2
  804f2c:	1000021e 	bne	r2,zero,804f38 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  804f30:	00800044 	movi	r2,1
  804f34:	00004306 	br	805044 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f38:	0005303a 	rdctl	r2,status
  804f3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f40:	e0fffd17 	ldw	r3,-12(fp)
  804f44:	00bfff84 	movi	r2,-2
  804f48:	1884703a 	and	r2,r3,r2
  804f4c:	1001703a 	wrctl	status,r2
  
  return context;
  804f50:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  804f54:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  804f58:	e0bffe17 	ldw	r2,-8(fp)
  804f5c:	10800283 	ldbu	r2,10(r2)
  804f60:	10803fcc 	andi	r2,r2,255
  804f64:	10000c26 	beq	r2,zero,804f98 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  804f68:	000f883a 	mov	r7,zero
  804f6c:	01800104 	movi	r6,4
  804f70:	e17fff17 	ldw	r5,-4(fp)
  804f74:	e13ffe17 	ldw	r4,-8(fp)
  804f78:	08013b00 	call	8013b0 <OS_EventTaskRdy>
  804f7c:	e0bff817 	ldw	r2,-32(fp)
  804f80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804f84:	e0bff917 	ldw	r2,-28(fp)
  804f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  804f8c:	0801dfc0 	call	801dfc <OS_Sched>
        return (OS_ERR_NONE);
  804f90:	0005883a 	mov	r2,zero
  804f94:	00002b06 	br	805044 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  804f98:	e0bffe17 	ldw	r2,-8(fp)
  804f9c:	10800117 	ldw	r2,4(r2)
  804fa0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  804fa4:	e0bffb17 	ldw	r2,-20(fp)
  804fa8:	10c0058b 	ldhu	r3,22(r2)
  804fac:	e0bffb17 	ldw	r2,-20(fp)
  804fb0:	1080050b 	ldhu	r2,20(r2)
  804fb4:	18ffffcc 	andi	r3,r3,65535
  804fb8:	10bfffcc 	andi	r2,r2,65535
  804fbc:	18800636 	bltu	r3,r2,804fd8 <OSQPost+0xe8>
  804fc0:	e0bff817 	ldw	r2,-32(fp)
  804fc4:	e0bffa15 	stw	r2,-24(fp)
  804fc8:	e0bffa17 	ldw	r2,-24(fp)
  804fcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  804fd0:	00800784 	movi	r2,30
  804fd4:	00001b06 	br	805044 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  804fd8:	e0bffb17 	ldw	r2,-20(fp)
  804fdc:	10800317 	ldw	r2,12(r2)
  804fe0:	11000104 	addi	r4,r2,4
  804fe4:	e0fffb17 	ldw	r3,-20(fp)
  804fe8:	19000315 	stw	r4,12(r3)
  804fec:	e0ffff17 	ldw	r3,-4(fp)
  804ff0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  804ff4:	e0bffb17 	ldw	r2,-20(fp)
  804ff8:	1080058b 	ldhu	r2,22(r2)
  804ffc:	10800044 	addi	r2,r2,1
  805000:	1007883a 	mov	r3,r2
  805004:	e0bffb17 	ldw	r2,-20(fp)
  805008:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80500c:	e0bffb17 	ldw	r2,-20(fp)
  805010:	10c00317 	ldw	r3,12(r2)
  805014:	e0bffb17 	ldw	r2,-20(fp)
  805018:	10800217 	ldw	r2,8(r2)
  80501c:	1880041e 	bne	r3,r2,805030 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  805020:	e0bffb17 	ldw	r2,-20(fp)
  805024:	10c00117 	ldw	r3,4(r2)
  805028:	e0bffb17 	ldw	r2,-20(fp)
  80502c:	10c00315 	stw	r3,12(r2)
  805030:	e0bff817 	ldw	r2,-32(fp)
  805034:	e0bffc15 	stw	r2,-16(fp)
  805038:	e0bffc17 	ldw	r2,-16(fp)
  80503c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805040:	0005883a 	mov	r2,zero
}
  805044:	e037883a 	mov	sp,fp
  805048:	dfc00117 	ldw	ra,4(sp)
  80504c:	df000017 	ldw	fp,0(sp)
  805050:	dec00204 	addi	sp,sp,8
  805054:	f800283a 	ret

00805058 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  805058:	defff604 	addi	sp,sp,-40
  80505c:	dfc00915 	stw	ra,36(sp)
  805060:	df000815 	stw	fp,32(sp)
  805064:	df000804 	addi	fp,sp,32
  805068:	e13ffe15 	stw	r4,-8(fp)
  80506c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805070:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805074:	e0bffe17 	ldw	r2,-8(fp)
  805078:	1000021e 	bne	r2,zero,805084 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80507c:	00800104 	movi	r2,4
  805080:	00004c06 	br	8051b4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  805084:	e0bffe17 	ldw	r2,-8(fp)
  805088:	10800003 	ldbu	r2,0(r2)
  80508c:	10803fcc 	andi	r2,r2,255
  805090:	108000a0 	cmpeqi	r2,r2,2
  805094:	1000021e 	bne	r2,zero,8050a0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  805098:	00800044 	movi	r2,1
  80509c:	00004506 	br	8051b4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8050a0:	0005303a 	rdctl	r2,status
  8050a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8050a8:	e0fffd17 	ldw	r3,-12(fp)
  8050ac:	00bfff84 	movi	r2,-2
  8050b0:	1884703a 	and	r2,r3,r2
  8050b4:	1001703a 	wrctl	status,r2
  
  return context;
  8050b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8050bc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  8050c0:	e0bffe17 	ldw	r2,-8(fp)
  8050c4:	10800283 	ldbu	r2,10(r2)
  8050c8:	10803fcc 	andi	r2,r2,255
  8050cc:	10000c26 	beq	r2,zero,805100 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8050d0:	000f883a 	mov	r7,zero
  8050d4:	01800104 	movi	r6,4
  8050d8:	e17fff17 	ldw	r5,-4(fp)
  8050dc:	e13ffe17 	ldw	r4,-8(fp)
  8050e0:	08013b00 	call	8013b0 <OS_EventTaskRdy>
  8050e4:	e0bff817 	ldw	r2,-32(fp)
  8050e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8050ec:	e0bff917 	ldw	r2,-28(fp)
  8050f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  8050f4:	0801dfc0 	call	801dfc <OS_Sched>
        return (OS_ERR_NONE);
  8050f8:	0005883a 	mov	r2,zero
  8050fc:	00002d06 	br	8051b4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  805100:	e0bffe17 	ldw	r2,-8(fp)
  805104:	10800117 	ldw	r2,4(r2)
  805108:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80510c:	e0bffb17 	ldw	r2,-20(fp)
  805110:	10c0058b 	ldhu	r3,22(r2)
  805114:	e0bffb17 	ldw	r2,-20(fp)
  805118:	1080050b 	ldhu	r2,20(r2)
  80511c:	18ffffcc 	andi	r3,r3,65535
  805120:	10bfffcc 	andi	r2,r2,65535
  805124:	18800636 	bltu	r3,r2,805140 <OSQPostFront+0xe8>
  805128:	e0bff817 	ldw	r2,-32(fp)
  80512c:	e0bffa15 	stw	r2,-24(fp)
  805130:	e0bffa17 	ldw	r2,-24(fp)
  805134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  805138:	00800784 	movi	r2,30
  80513c:	00001d06 	br	8051b4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  805140:	e0bffb17 	ldw	r2,-20(fp)
  805144:	10c00417 	ldw	r3,16(r2)
  805148:	e0bffb17 	ldw	r2,-20(fp)
  80514c:	10800117 	ldw	r2,4(r2)
  805150:	1880041e 	bne	r3,r2,805164 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  805154:	e0bffb17 	ldw	r2,-20(fp)
  805158:	10c00217 	ldw	r3,8(r2)
  80515c:	e0bffb17 	ldw	r2,-20(fp)
  805160:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  805164:	e0bffb17 	ldw	r2,-20(fp)
  805168:	10800417 	ldw	r2,16(r2)
  80516c:	10ffff04 	addi	r3,r2,-4
  805170:	e0bffb17 	ldw	r2,-20(fp)
  805174:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  805178:	e0bffb17 	ldw	r2,-20(fp)
  80517c:	10800417 	ldw	r2,16(r2)
  805180:	e0ffff17 	ldw	r3,-4(fp)
  805184:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  805188:	e0bffb17 	ldw	r2,-20(fp)
  80518c:	1080058b 	ldhu	r2,22(r2)
  805190:	10800044 	addi	r2,r2,1
  805194:	1007883a 	mov	r3,r2
  805198:	e0bffb17 	ldw	r2,-20(fp)
  80519c:	10c0058d 	sth	r3,22(r2)
  8051a0:	e0bff817 	ldw	r2,-32(fp)
  8051a4:	e0bffc15 	stw	r2,-16(fp)
  8051a8:	e0bffc17 	ldw	r2,-16(fp)
  8051ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8051b0:	0005883a 	mov	r2,zero
}
  8051b4:	e037883a 	mov	sp,fp
  8051b8:	dfc00117 	ldw	ra,4(sp)
  8051bc:	df000017 	ldw	fp,0(sp)
  8051c0:	dec00204 	addi	sp,sp,8
  8051c4:	f800283a 	ret

008051c8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  8051c8:	defff504 	addi	sp,sp,-44
  8051cc:	dfc00a15 	stw	ra,40(sp)
  8051d0:	df000915 	stw	fp,36(sp)
  8051d4:	df000904 	addi	fp,sp,36
  8051d8:	e13ffd15 	stw	r4,-12(fp)
  8051dc:	e17ffe15 	stw	r5,-8(fp)
  8051e0:	3005883a 	mov	r2,r6
  8051e4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8051e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8051ec:	e0bffd17 	ldw	r2,-12(fp)
  8051f0:	1000021e 	bne	r2,zero,8051fc <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  8051f4:	00800104 	movi	r2,4
  8051f8:	00007106 	br	8053c0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8051fc:	e0bffd17 	ldw	r2,-12(fp)
  805200:	10800003 	ldbu	r2,0(r2)
  805204:	10803fcc 	andi	r2,r2,255
  805208:	108000a0 	cmpeqi	r2,r2,2
  80520c:	1000021e 	bne	r2,zero,805218 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  805210:	00800044 	movi	r2,1
  805214:	00006a06 	br	8053c0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805218:	0005303a 	rdctl	r2,status
  80521c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805220:	e0fffc17 	ldw	r3,-16(fp)
  805224:	00bfff84 	movi	r2,-2
  805228:	1884703a 	and	r2,r3,r2
  80522c:	1001703a 	wrctl	status,r2
  
  return context;
  805230:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805234:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  805238:	e0bffd17 	ldw	r2,-12(fp)
  80523c:	10800283 	ldbu	r2,10(r2)
  805240:	10803fcc 	andi	r2,r2,255
  805244:	10001d26 	beq	r2,zero,8052bc <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  805248:	e0bfff03 	ldbu	r2,-4(fp)
  80524c:	1080004c 	andi	r2,r2,1
  805250:	10000b26 	beq	r2,zero,805280 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  805254:	00000506 	br	80526c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  805258:	000f883a 	mov	r7,zero
  80525c:	01800104 	movi	r6,4
  805260:	e17ffe17 	ldw	r5,-8(fp)
  805264:	e13ffd17 	ldw	r4,-12(fp)
  805268:	08013b00 	call	8013b0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80526c:	e0bffd17 	ldw	r2,-12(fp)
  805270:	10800283 	ldbu	r2,10(r2)
  805274:	10803fcc 	andi	r2,r2,255
  805278:	103ff71e 	bne	r2,zero,805258 <__alt_mem_epcs_flash_controller_0+0xff7fc258>
  80527c:	00000506 	br	805294 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  805280:	000f883a 	mov	r7,zero
  805284:	01800104 	movi	r6,4
  805288:	e17ffe17 	ldw	r5,-8(fp)
  80528c:	e13ffd17 	ldw	r4,-12(fp)
  805290:	08013b00 	call	8013b0 <OS_EventTaskRdy>
  805294:	e0bff717 	ldw	r2,-36(fp)
  805298:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80529c:	e0bff817 	ldw	r2,-32(fp)
  8052a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8052a4:	e0bfff03 	ldbu	r2,-4(fp)
  8052a8:	1080010c 	andi	r2,r2,4
  8052ac:	1000011e 	bne	r2,zero,8052b4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  8052b0:	0801dfc0 	call	801dfc <OS_Sched>
        }
        return (OS_ERR_NONE);
  8052b4:	0005883a 	mov	r2,zero
  8052b8:	00004106 	br	8053c0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8052bc:	e0bffd17 	ldw	r2,-12(fp)
  8052c0:	10800117 	ldw	r2,4(r2)
  8052c4:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8052c8:	e0bffa17 	ldw	r2,-24(fp)
  8052cc:	10c0058b 	ldhu	r3,22(r2)
  8052d0:	e0bffa17 	ldw	r2,-24(fp)
  8052d4:	1080050b 	ldhu	r2,20(r2)
  8052d8:	18ffffcc 	andi	r3,r3,65535
  8052dc:	10bfffcc 	andi	r2,r2,65535
  8052e0:	18800636 	bltu	r3,r2,8052fc <OSQPostOpt+0x134>
  8052e4:	e0bff717 	ldw	r2,-36(fp)
  8052e8:	e0bff915 	stw	r2,-28(fp)
  8052ec:	e0bff917 	ldw	r2,-28(fp)
  8052f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8052f4:	00800784 	movi	r2,30
  8052f8:	00003106 	br	8053c0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  8052fc:	e0bfff03 	ldbu	r2,-4(fp)
  805300:	1080008c 	andi	r2,r2,2
  805304:	10001326 	beq	r2,zero,805354 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  805308:	e0bffa17 	ldw	r2,-24(fp)
  80530c:	10c00417 	ldw	r3,16(r2)
  805310:	e0bffa17 	ldw	r2,-24(fp)
  805314:	10800117 	ldw	r2,4(r2)
  805318:	1880041e 	bne	r3,r2,80532c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80531c:	e0bffa17 	ldw	r2,-24(fp)
  805320:	10c00217 	ldw	r3,8(r2)
  805324:	e0bffa17 	ldw	r2,-24(fp)
  805328:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80532c:	e0bffa17 	ldw	r2,-24(fp)
  805330:	10800417 	ldw	r2,16(r2)
  805334:	10ffff04 	addi	r3,r2,-4
  805338:	e0bffa17 	ldw	r2,-24(fp)
  80533c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  805340:	e0bffa17 	ldw	r2,-24(fp)
  805344:	10800417 	ldw	r2,16(r2)
  805348:	e0fffe17 	ldw	r3,-8(fp)
  80534c:	10c00015 	stw	r3,0(r2)
  805350:	00001006 	br	805394 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  805354:	e0bffa17 	ldw	r2,-24(fp)
  805358:	10800317 	ldw	r2,12(r2)
  80535c:	11000104 	addi	r4,r2,4
  805360:	e0fffa17 	ldw	r3,-24(fp)
  805364:	19000315 	stw	r4,12(r3)
  805368:	e0fffe17 	ldw	r3,-8(fp)
  80536c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  805370:	e0bffa17 	ldw	r2,-24(fp)
  805374:	10c00317 	ldw	r3,12(r2)
  805378:	e0bffa17 	ldw	r2,-24(fp)
  80537c:	10800217 	ldw	r2,8(r2)
  805380:	1880041e 	bne	r3,r2,805394 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  805384:	e0bffa17 	ldw	r2,-24(fp)
  805388:	10c00117 	ldw	r3,4(r2)
  80538c:	e0bffa17 	ldw	r2,-24(fp)
  805390:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  805394:	e0bffa17 	ldw	r2,-24(fp)
  805398:	1080058b 	ldhu	r2,22(r2)
  80539c:	10800044 	addi	r2,r2,1
  8053a0:	1007883a 	mov	r3,r2
  8053a4:	e0bffa17 	ldw	r2,-24(fp)
  8053a8:	10c0058d 	sth	r3,22(r2)
  8053ac:	e0bff717 	ldw	r2,-36(fp)
  8053b0:	e0bffb15 	stw	r2,-20(fp)
  8053b4:	e0bffb17 	ldw	r2,-20(fp)
  8053b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8053bc:	0005883a 	mov	r2,zero
}
  8053c0:	e037883a 	mov	sp,fp
  8053c4:	dfc00117 	ldw	ra,4(sp)
  8053c8:	df000017 	ldw	fp,0(sp)
  8053cc:	dec00204 	addi	sp,sp,8
  8053d0:	f800283a 	ret

008053d4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  8053d4:	defff604 	addi	sp,sp,-40
  8053d8:	df000915 	stw	fp,36(sp)
  8053dc:	df000904 	addi	fp,sp,36
  8053e0:	e13ffe15 	stw	r4,-8(fp)
  8053e4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8053e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8053ec:	e0bffe17 	ldw	r2,-8(fp)
  8053f0:	1000021e 	bne	r2,zero,8053fc <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  8053f4:	00800104 	movi	r2,4
  8053f8:	00004906 	br	805520 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  8053fc:	e0bfff17 	ldw	r2,-4(fp)
  805400:	1000021e 	bne	r2,zero,80540c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  805404:	00800244 	movi	r2,9
  805408:	00004506 	br	805520 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80540c:	e0bffe17 	ldw	r2,-8(fp)
  805410:	10800003 	ldbu	r2,0(r2)
  805414:	10803fcc 	andi	r2,r2,255
  805418:	108000a0 	cmpeqi	r2,r2,2
  80541c:	1000021e 	bne	r2,zero,805428 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  805420:	00800044 	movi	r2,1
  805424:	00003e06 	br	805520 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805428:	0005303a 	rdctl	r2,status
  80542c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805430:	e0fffd17 	ldw	r3,-12(fp)
  805434:	00bfff84 	movi	r2,-2
  805438:	1884703a 	and	r2,r3,r2
  80543c:	1001703a 	wrctl	status,r2
  
  return context;
  805440:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  805444:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  805448:	e0bffe17 	ldw	r2,-8(fp)
  80544c:	10c00283 	ldbu	r3,10(r2)
  805450:	e0bfff17 	ldw	r2,-4(fp)
  805454:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  805458:	e0bffe17 	ldw	r2,-8(fp)
  80545c:	108002c4 	addi	r2,r2,11
  805460:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  805464:	e0bfff17 	ldw	r2,-4(fp)
  805468:	10800204 	addi	r2,r2,8
  80546c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805470:	e03ff705 	stb	zero,-36(fp)
  805474:	00000b06 	br	8054a4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  805478:	e0bff917 	ldw	r2,-28(fp)
  80547c:	10c00044 	addi	r3,r2,1
  805480:	e0fff915 	stw	r3,-28(fp)
  805484:	e0fff817 	ldw	r3,-32(fp)
  805488:	19000044 	addi	r4,r3,1
  80548c:	e13ff815 	stw	r4,-32(fp)
  805490:	18c00003 	ldbu	r3,0(r3)
  805494:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805498:	e0bff703 	ldbu	r2,-36(fp)
  80549c:	10800044 	addi	r2,r2,1
  8054a0:	e0bff705 	stb	r2,-36(fp)
  8054a4:	e0bff703 	ldbu	r2,-36(fp)
  8054a8:	108000f0 	cmpltui	r2,r2,3
  8054ac:	103ff21e 	bne	r2,zero,805478 <__alt_mem_epcs_flash_controller_0+0xff7fc478>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8054b0:	e0bffe17 	ldw	r2,-8(fp)
  8054b4:	10800117 	ldw	r2,4(r2)
  8054b8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8054bc:	e0bffc17 	ldw	r2,-16(fp)
  8054c0:	1080058b 	ldhu	r2,22(r2)
  8054c4:	10bfffcc 	andi	r2,r2,65535
  8054c8:	10000626 	beq	r2,zero,8054e4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8054cc:	e0bffc17 	ldw	r2,-16(fp)
  8054d0:	10800417 	ldw	r2,16(r2)
  8054d4:	10c00017 	ldw	r3,0(r2)
  8054d8:	e0bfff17 	ldw	r2,-4(fp)
  8054dc:	10c00015 	stw	r3,0(r2)
  8054e0:	00000206 	br	8054ec <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  8054e4:	e0bfff17 	ldw	r2,-4(fp)
  8054e8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8054ec:	e0bffc17 	ldw	r2,-16(fp)
  8054f0:	10c0058b 	ldhu	r3,22(r2)
  8054f4:	e0bfff17 	ldw	r2,-4(fp)
  8054f8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  8054fc:	e0bffc17 	ldw	r2,-16(fp)
  805500:	10c0050b 	ldhu	r3,20(r2)
  805504:	e0bfff17 	ldw	r2,-4(fp)
  805508:	10c0018d 	sth	r3,6(r2)
  80550c:	e0bffa17 	ldw	r2,-24(fp)
  805510:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805514:	e0bffb17 	ldw	r2,-20(fp)
  805518:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80551c:	0005883a 	mov	r2,zero
}
  805520:	e037883a 	mov	sp,fp
  805524:	df000017 	ldw	fp,0(sp)
  805528:	dec00104 	addi	sp,sp,4
  80552c:	f800283a 	ret

00805530 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  805530:	defffb04 	addi	sp,sp,-20
  805534:	dfc00415 	stw	ra,16(sp)
  805538:	df000315 	stw	fp,12(sp)
  80553c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  805540:	01407804 	movi	r5,480
  805544:	01002074 	movhi	r4,129
  805548:	210e8704 	addi	r4,r4,14876
  80554c:	0801d400 	call	801d40 <OS_MemClr>
    pq1 = &OSQTbl[0];
  805550:	00802074 	movhi	r2,129
  805554:	108e8704 	addi	r2,r2,14876
  805558:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  80555c:	00802074 	movhi	r2,129
  805560:	108e8d04 	addi	r2,r2,14900
  805564:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  805568:	e03ffd0d 	sth	zero,-12(fp)
  80556c:	00000c06 	br	8055a0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  805570:	e0bffe17 	ldw	r2,-8(fp)
  805574:	e0ffff17 	ldw	r3,-4(fp)
  805578:	10c00015 	stw	r3,0(r2)
        pq1++;
  80557c:	e0bffe17 	ldw	r2,-8(fp)
  805580:	10800604 	addi	r2,r2,24
  805584:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  805588:	e0bfff17 	ldw	r2,-4(fp)
  80558c:	10800604 	addi	r2,r2,24
  805590:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  805594:	e0bffd0b 	ldhu	r2,-12(fp)
  805598:	10800044 	addi	r2,r2,1
  80559c:	e0bffd0d 	sth	r2,-12(fp)
  8055a0:	e0bffd0b 	ldhu	r2,-12(fp)
  8055a4:	108004f0 	cmpltui	r2,r2,19
  8055a8:	103ff11e 	bne	r2,zero,805570 <__alt_mem_epcs_flash_controller_0+0xff7fc570>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8055ac:	e0bffe17 	ldw	r2,-8(fp)
  8055b0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8055b4:	00802074 	movhi	r2,129
  8055b8:	108e8704 	addi	r2,r2,14876
  8055bc:	d0a03e15 	stw	r2,-32520(gp)
#endif
}
  8055c0:	0001883a 	nop
  8055c4:	e037883a 	mov	sp,fp
  8055c8:	dfc00117 	ldw	ra,4(sp)
  8055cc:	df000017 	ldw	fp,0(sp)
  8055d0:	dec00204 	addi	sp,sp,8
  8055d4:	f800283a 	ret

008055d8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8055d8:	defffa04 	addi	sp,sp,-24
  8055dc:	df000515 	stw	fp,20(sp)
  8055e0:	df000504 	addi	fp,sp,20
  8055e4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8055e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8055ec:	e0bfff17 	ldw	r2,-4(fp)
  8055f0:	1000021e 	bne	r2,zero,8055fc <OSSemAccept+0x24>
        return (0);
  8055f4:	0005883a 	mov	r2,zero
  8055f8:	00001f06 	br	805678 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8055fc:	e0bfff17 	ldw	r2,-4(fp)
  805600:	10800003 	ldbu	r2,0(r2)
  805604:	10803fcc 	andi	r2,r2,255
  805608:	108000e0 	cmpeqi	r2,r2,3
  80560c:	1000021e 	bne	r2,zero,805618 <OSSemAccept+0x40>
        return (0);
  805610:	0005883a 	mov	r2,zero
  805614:	00001806 	br	805678 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805618:	0005303a 	rdctl	r2,status
  80561c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805620:	e0fffe17 	ldw	r3,-8(fp)
  805624:	00bfff84 	movi	r2,-2
  805628:	1884703a 	and	r2,r3,r2
  80562c:	1001703a 	wrctl	status,r2
  
  return context;
  805630:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  805634:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  805638:	e0bfff17 	ldw	r2,-4(fp)
  80563c:	1080020b 	ldhu	r2,8(r2)
  805640:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  805644:	e0bffd0b 	ldhu	r2,-12(fp)
  805648:	10000626 	beq	r2,zero,805664 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  80564c:	e0bfff17 	ldw	r2,-4(fp)
  805650:	1080020b 	ldhu	r2,8(r2)
  805654:	10bfffc4 	addi	r2,r2,-1
  805658:	1007883a 	mov	r3,r2
  80565c:	e0bfff17 	ldw	r2,-4(fp)
  805660:	10c0020d 	sth	r3,8(r2)
  805664:	e0bffb17 	ldw	r2,-20(fp)
  805668:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80566c:	e0bffc17 	ldw	r2,-16(fp)
  805670:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  805674:	e0bffd0b 	ldhu	r2,-12(fp)
}
  805678:	e037883a 	mov	sp,fp
  80567c:	df000017 	ldw	fp,0(sp)
  805680:	dec00104 	addi	sp,sp,4
  805684:	f800283a 	ret

00805688 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  805688:	defff904 	addi	sp,sp,-28
  80568c:	dfc00615 	stw	ra,24(sp)
  805690:	df000515 	stw	fp,20(sp)
  805694:	df000504 	addi	fp,sp,20
  805698:	2005883a 	mov	r2,r4
  80569c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8056a0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8056a4:	d0a04103 	ldbu	r2,-32508(gp)
  8056a8:	10803fcc 	andi	r2,r2,255
  8056ac:	10000226 	beq	r2,zero,8056b8 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8056b0:	0005883a 	mov	r2,zero
  8056b4:	00002506 	br	80574c <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8056b8:	0005303a 	rdctl	r2,status
  8056bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8056c0:	e0fffe17 	ldw	r3,-8(fp)
  8056c4:	00bfff84 	movi	r2,-2
  8056c8:	1884703a 	and	r2,r3,r2
  8056cc:	1001703a 	wrctl	status,r2
  
  return context;
  8056d0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8056d4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8056d8:	d0a04017 	ldw	r2,-32512(gp)
  8056dc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8056e0:	d0a04017 	ldw	r2,-32512(gp)
  8056e4:	10000326 	beq	r2,zero,8056f4 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8056e8:	d0a04017 	ldw	r2,-32512(gp)
  8056ec:	10800117 	ldw	r2,4(r2)
  8056f0:	d0a04015 	stw	r2,-32512(gp)
  8056f4:	e0bffb17 	ldw	r2,-20(fp)
  8056f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8056fc:	e0bffc17 	ldw	r2,-16(fp)
  805700:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  805704:	e0bffd17 	ldw	r2,-12(fp)
  805708:	10000f26 	beq	r2,zero,805748 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  80570c:	e0bffd17 	ldw	r2,-12(fp)
  805710:	00c000c4 	movi	r3,3
  805714:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  805718:	e0bffd17 	ldw	r2,-12(fp)
  80571c:	e0ffff0b 	ldhu	r3,-4(fp)
  805720:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  805724:	e0bffd17 	ldw	r2,-12(fp)
  805728:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  80572c:	e0bffd17 	ldw	r2,-12(fp)
  805730:	00c00fc4 	movi	r3,63
  805734:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  805738:	e0bffd17 	ldw	r2,-12(fp)
  80573c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  805740:	e13ffd17 	ldw	r4,-12(fp)
  805744:	08019600 	call	801960 <OS_EventWaitListInit>
    }
    return (pevent);
  805748:	e0bffd17 	ldw	r2,-12(fp)
}
  80574c:	e037883a 	mov	sp,fp
  805750:	dfc00117 	ldw	ra,4(sp)
  805754:	df000017 	ldw	fp,0(sp)
  805758:	dec00204 	addi	sp,sp,8
  80575c:	f800283a 	ret

00805760 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805760:	defff304 	addi	sp,sp,-52
  805764:	dfc00c15 	stw	ra,48(sp)
  805768:	df000b15 	stw	fp,44(sp)
  80576c:	df000b04 	addi	fp,sp,44
  805770:	e13ffd15 	stw	r4,-12(fp)
  805774:	2805883a 	mov	r2,r5
  805778:	e1bfff15 	stw	r6,-4(fp)
  80577c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805780:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  805784:	e0bfff17 	ldw	r2,-4(fp)
  805788:	1000021e 	bne	r2,zero,805794 <OSSemDel+0x34>
        return (pevent);
  80578c:	e0bffd17 	ldw	r2,-12(fp)
  805790:	00007e06 	br	80598c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  805794:	e0bffd17 	ldw	r2,-12(fp)
  805798:	1000051e 	bne	r2,zero,8057b0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  80579c:	e0bfff17 	ldw	r2,-4(fp)
  8057a0:	00c00104 	movi	r3,4
  8057a4:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8057a8:	e0bffd17 	ldw	r2,-12(fp)
  8057ac:	00007706 	br	80598c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8057b0:	e0bffd17 	ldw	r2,-12(fp)
  8057b4:	10800003 	ldbu	r2,0(r2)
  8057b8:	10803fcc 	andi	r2,r2,255
  8057bc:	108000e0 	cmpeqi	r2,r2,3
  8057c0:	1000051e 	bne	r2,zero,8057d8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8057c4:	e0bfff17 	ldw	r2,-4(fp)
  8057c8:	00c00044 	movi	r3,1
  8057cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8057d0:	e0bffd17 	ldw	r2,-12(fp)
  8057d4:	00006d06 	br	80598c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8057d8:	d0a04103 	ldbu	r2,-32508(gp)
  8057dc:	10803fcc 	andi	r2,r2,255
  8057e0:	10000526 	beq	r2,zero,8057f8 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
  8057e8:	00c003c4 	movi	r3,15
  8057ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8057f0:	e0bffd17 	ldw	r2,-12(fp)
  8057f4:	00006506 	br	80598c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8057f8:	0005303a 	rdctl	r2,status
  8057fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805800:	e0fffc17 	ldw	r3,-16(fp)
  805804:	00bfff84 	movi	r2,-2
  805808:	1884703a 	and	r2,r3,r2
  80580c:	1001703a 	wrctl	status,r2
  
  return context;
  805810:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805814:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  805818:	e0bffd17 	ldw	r2,-12(fp)
  80581c:	10800283 	ldbu	r2,10(r2)
  805820:	10803fcc 	andi	r2,r2,255
  805824:	10000326 	beq	r2,zero,805834 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  805828:	00800044 	movi	r2,1
  80582c:	e0bff505 	stb	r2,-44(fp)
  805830:	00000106 	br	805838 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  805834:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  805838:	e0bffe03 	ldbu	r2,-8(fp)
  80583c:	10000326 	beq	r2,zero,80584c <OSSemDel+0xec>
  805840:	10800060 	cmpeqi	r2,r2,1
  805844:	1000281e 	bne	r2,zero,8058e8 <OSSemDel+0x188>
  805848:	00004506 	br	805960 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  80584c:	e0bff503 	ldbu	r2,-44(fp)
  805850:	1000161e 	bne	r2,zero,8058ac <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  805854:	e0bffd17 	ldw	r2,-12(fp)
  805858:	00c00fc4 	movi	r3,63
  80585c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  805860:	e0bffd17 	ldw	r2,-12(fp)
  805864:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  805868:	e0bffd17 	ldw	r2,-12(fp)
  80586c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  805870:	d0e04017 	ldw	r3,-32512(gp)
  805874:	e0bffd17 	ldw	r2,-12(fp)
  805878:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80587c:	e0bffd17 	ldw	r2,-12(fp)
  805880:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  805884:	e0bffd17 	ldw	r2,-12(fp)
  805888:	d0a04015 	stw	r2,-32512(gp)
  80588c:	e0bff717 	ldw	r2,-36(fp)
  805890:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805894:	e0bff817 	ldw	r2,-32(fp)
  805898:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80589c:	e0bfff17 	ldw	r2,-4(fp)
  8058a0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  8058a4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  8058a8:	00003706 	br	805988 <OSSemDel+0x228>
  8058ac:	e0bff717 	ldw	r2,-36(fp)
  8058b0:	e0bff915 	stw	r2,-28(fp)
  8058b4:	e0bff917 	ldw	r2,-28(fp)
  8058b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8058bc:	e0bfff17 	ldw	r2,-4(fp)
  8058c0:	00c01244 	movi	r3,73
  8058c4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  8058c8:	e0bffd17 	ldw	r2,-12(fp)
  8058cc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  8058d0:	00002d06 	br	805988 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8058d4:	000f883a 	mov	r7,zero
  8058d8:	01800044 	movi	r6,1
  8058dc:	000b883a 	mov	r5,zero
  8058e0:	e13ffd17 	ldw	r4,-12(fp)
  8058e4:	08013b00 	call	8013b0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8058e8:	e0bffd17 	ldw	r2,-12(fp)
  8058ec:	10800283 	ldbu	r2,10(r2)
  8058f0:	10803fcc 	andi	r2,r2,255
  8058f4:	103ff71e 	bne	r2,zero,8058d4 <__alt_mem_epcs_flash_controller_0+0xff7fc8d4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8058f8:	e0bffd17 	ldw	r2,-12(fp)
  8058fc:	00c00fc4 	movi	r3,63
  805900:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  805904:	e0bffd17 	ldw	r2,-12(fp)
  805908:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80590c:	e0bffd17 	ldw	r2,-12(fp)
  805910:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  805914:	d0e04017 	ldw	r3,-32512(gp)
  805918:	e0bffd17 	ldw	r2,-12(fp)
  80591c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  805920:	e0bffd17 	ldw	r2,-12(fp)
  805924:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  805928:	e0bffd17 	ldw	r2,-12(fp)
  80592c:	d0a04015 	stw	r2,-32512(gp)
  805930:	e0bff717 	ldw	r2,-36(fp)
  805934:	e0bffa15 	stw	r2,-24(fp)
  805938:	e0bffa17 	ldw	r2,-24(fp)
  80593c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  805940:	e0bff503 	ldbu	r2,-44(fp)
  805944:	10800058 	cmpnei	r2,r2,1
  805948:	1000011e 	bne	r2,zero,805950 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80594c:	0801dfc0 	call	801dfc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  805950:	e0bfff17 	ldw	r2,-4(fp)
  805954:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  805958:	e03ff615 	stw	zero,-40(fp)
             break;
  80595c:	00000a06 	br	805988 <OSSemDel+0x228>
  805960:	e0bff717 	ldw	r2,-36(fp)
  805964:	e0bffb15 	stw	r2,-20(fp)
  805968:	e0bffb17 	ldw	r2,-20(fp)
  80596c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  805970:	e0bfff17 	ldw	r2,-4(fp)
  805974:	00c001c4 	movi	r3,7
  805978:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  80597c:	e0bffd17 	ldw	r2,-12(fp)
  805980:	e0bff615 	stw	r2,-40(fp)
             break;
  805984:	0001883a 	nop
    }
    return (pevent_return);
  805988:	e0bff617 	ldw	r2,-40(fp)
}
  80598c:	e037883a 	mov	sp,fp
  805990:	dfc00117 	ldw	ra,4(sp)
  805994:	df000017 	ldw	fp,0(sp)
  805998:	dec00204 	addi	sp,sp,8
  80599c:	f800283a 	ret

008059a0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8059a0:	defff504 	addi	sp,sp,-44
  8059a4:	dfc00a15 	stw	ra,40(sp)
  8059a8:	df000915 	stw	fp,36(sp)
  8059ac:	df000904 	addi	fp,sp,36
  8059b0:	e13ffd15 	stw	r4,-12(fp)
  8059b4:	2805883a 	mov	r2,r5
  8059b8:	e1bfff15 	stw	r6,-4(fp)
  8059bc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8059c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8059c4:	e0bfff17 	ldw	r2,-4(fp)
  8059c8:	10007226 	beq	r2,zero,805b94 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8059cc:	e0bffd17 	ldw	r2,-12(fp)
  8059d0:	1000041e 	bne	r2,zero,8059e4 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8059d4:	e0bfff17 	ldw	r2,-4(fp)
  8059d8:	00c00104 	movi	r3,4
  8059dc:	10c00005 	stb	r3,0(r2)
        return;
  8059e0:	00006d06 	br	805b98 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8059e4:	e0bffd17 	ldw	r2,-12(fp)
  8059e8:	10800003 	ldbu	r2,0(r2)
  8059ec:	10803fcc 	andi	r2,r2,255
  8059f0:	108000e0 	cmpeqi	r2,r2,3
  8059f4:	1000041e 	bne	r2,zero,805a08 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  8059f8:	e0bfff17 	ldw	r2,-4(fp)
  8059fc:	00c00044 	movi	r3,1
  805a00:	10c00005 	stb	r3,0(r2)
        return;
  805a04:	00006406 	br	805b98 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  805a08:	d0a04103 	ldbu	r2,-32508(gp)
  805a0c:	10803fcc 	andi	r2,r2,255
  805a10:	10000426 	beq	r2,zero,805a24 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  805a14:	e0bfff17 	ldw	r2,-4(fp)
  805a18:	00c00084 	movi	r3,2
  805a1c:	10c00005 	stb	r3,0(r2)
        return;
  805a20:	00005d06 	br	805b98 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  805a24:	d0a03303 	ldbu	r2,-32564(gp)
  805a28:	10803fcc 	andi	r2,r2,255
  805a2c:	10000426 	beq	r2,zero,805a40 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  805a30:	e0bfff17 	ldw	r2,-4(fp)
  805a34:	00c00344 	movi	r3,13
  805a38:	10c00005 	stb	r3,0(r2)
        return;
  805a3c:	00005606 	br	805b98 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a40:	0005303a 	rdctl	r2,status
  805a44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805a48:	e0fffc17 	ldw	r3,-16(fp)
  805a4c:	00bfff84 	movi	r2,-2
  805a50:	1884703a 	and	r2,r3,r2
  805a54:	1001703a 	wrctl	status,r2
  
  return context;
  805a58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805a5c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  805a60:	e0bffd17 	ldw	r2,-12(fp)
  805a64:	1080020b 	ldhu	r2,8(r2)
  805a68:	10bfffcc 	andi	r2,r2,65535
  805a6c:	10000d26 	beq	r2,zero,805aa4 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  805a70:	e0bffd17 	ldw	r2,-12(fp)
  805a74:	1080020b 	ldhu	r2,8(r2)
  805a78:	10bfffc4 	addi	r2,r2,-1
  805a7c:	1007883a 	mov	r3,r2
  805a80:	e0bffd17 	ldw	r2,-12(fp)
  805a84:	10c0020d 	sth	r3,8(r2)
  805a88:	e0bff717 	ldw	r2,-36(fp)
  805a8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805a90:	e0bff817 	ldw	r2,-32(fp)
  805a94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  805a98:	e0bfff17 	ldw	r2,-4(fp)
  805a9c:	10000005 	stb	zero,0(r2)
        return;
  805aa0:	00003d06 	br	805b98 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  805aa4:	d0a04217 	ldw	r2,-32504(gp)
  805aa8:	d0e04217 	ldw	r3,-32504(gp)
  805aac:	18c00c03 	ldbu	r3,48(r3)
  805ab0:	18c00054 	ori	r3,r3,1
  805ab4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  805ab8:	d0a04217 	ldw	r2,-32504(gp)
  805abc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  805ac0:	d0a04217 	ldw	r2,-32504(gp)
  805ac4:	e0fffe0b 	ldhu	r3,-8(fp)
  805ac8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  805acc:	e13ffd17 	ldw	r4,-12(fp)
  805ad0:	08015480 	call	801548 <OS_EventTaskWait>
  805ad4:	e0bff717 	ldw	r2,-36(fp)
  805ad8:	e0bffb15 	stw	r2,-20(fp)
  805adc:	e0bffb17 	ldw	r2,-20(fp)
  805ae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  805ae4:	0801dfc0 	call	801dfc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ae8:	0005303a 	rdctl	r2,status
  805aec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805af0:	e0fff917 	ldw	r3,-28(fp)
  805af4:	00bfff84 	movi	r2,-2
  805af8:	1884703a 	and	r2,r3,r2
  805afc:	1001703a 	wrctl	status,r2
  
  return context;
  805b00:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  805b04:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  805b08:	d0a04217 	ldw	r2,-32504(gp)
  805b0c:	10800c43 	ldbu	r2,49(r2)
  805b10:	10803fcc 	andi	r2,r2,255
  805b14:	10000326 	beq	r2,zero,805b24 <OSSemPend+0x184>
  805b18:	108000a0 	cmpeqi	r2,r2,2
  805b1c:	1000041e 	bne	r2,zero,805b30 <OSSemPend+0x190>
  805b20:	00000706 	br	805b40 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  805b24:	e0bfff17 	ldw	r2,-4(fp)
  805b28:	10000005 	stb	zero,0(r2)
             break;
  805b2c:	00000c06 	br	805b60 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  805b30:	e0bfff17 	ldw	r2,-4(fp)
  805b34:	00c00384 	movi	r3,14
  805b38:	10c00005 	stb	r3,0(r2)
             break;
  805b3c:	00000806 	br	805b60 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  805b40:	d0a04217 	ldw	r2,-32504(gp)
  805b44:	e17ffd17 	ldw	r5,-12(fp)
  805b48:	1009883a 	mov	r4,r2
  805b4c:	08017a80 	call	8017a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  805b50:	e0bfff17 	ldw	r2,-4(fp)
  805b54:	00c00284 	movi	r3,10
  805b58:	10c00005 	stb	r3,0(r2)
             break;
  805b5c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  805b60:	d0a04217 	ldw	r2,-32504(gp)
  805b64:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  805b68:	d0a04217 	ldw	r2,-32504(gp)
  805b6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  805b70:	d0a04217 	ldw	r2,-32504(gp)
  805b74:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  805b78:	d0a04217 	ldw	r2,-32504(gp)
  805b7c:	10000815 	stw	zero,32(r2)
  805b80:	e0bff717 	ldw	r2,-36(fp)
  805b84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805b88:	e0bffa17 	ldw	r2,-24(fp)
  805b8c:	1001703a 	wrctl	status,r2
  805b90:	00000106 	br	805b98 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  805b94:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  805b98:	e037883a 	mov	sp,fp
  805b9c:	dfc00117 	ldw	ra,4(sp)
  805ba0:	df000017 	ldw	fp,0(sp)
  805ba4:	dec00204 	addi	sp,sp,8
  805ba8:	f800283a 	ret

00805bac <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805bac:	defff604 	addi	sp,sp,-40
  805bb0:	dfc00915 	stw	ra,36(sp)
  805bb4:	df000815 	stw	fp,32(sp)
  805bb8:	df000804 	addi	fp,sp,32
  805bbc:	e13ffd15 	stw	r4,-12(fp)
  805bc0:	2805883a 	mov	r2,r5
  805bc4:	e1bfff15 	stw	r6,-4(fp)
  805bc8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805bcc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  805bd0:	e0bfff17 	ldw	r2,-4(fp)
  805bd4:	1000021e 	bne	r2,zero,805be0 <OSSemPendAbort+0x34>
        return (0);
  805bd8:	0005883a 	mov	r2,zero
  805bdc:	00004906 	br	805d04 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805be0:	e0bffd17 	ldw	r2,-12(fp)
  805be4:	1000051e 	bne	r2,zero,805bfc <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  805be8:	e0bfff17 	ldw	r2,-4(fp)
  805bec:	00c00104 	movi	r3,4
  805bf0:	10c00005 	stb	r3,0(r2)
        return (0);
  805bf4:	0005883a 	mov	r2,zero
  805bf8:	00004206 	br	805d04 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805bfc:	e0bffd17 	ldw	r2,-12(fp)
  805c00:	10800003 	ldbu	r2,0(r2)
  805c04:	10803fcc 	andi	r2,r2,255
  805c08:	108000e0 	cmpeqi	r2,r2,3
  805c0c:	1000051e 	bne	r2,zero,805c24 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  805c10:	e0bfff17 	ldw	r2,-4(fp)
  805c14:	00c00044 	movi	r3,1
  805c18:	10c00005 	stb	r3,0(r2)
        return (0);
  805c1c:	0005883a 	mov	r2,zero
  805c20:	00003806 	br	805d04 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805c24:	0005303a 	rdctl	r2,status
  805c28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c2c:	e0fffc17 	ldw	r3,-16(fp)
  805c30:	00bfff84 	movi	r2,-2
  805c34:	1884703a 	and	r2,r3,r2
  805c38:	1001703a 	wrctl	status,r2
  
  return context;
  805c3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805c40:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  805c44:	e0bffd17 	ldw	r2,-12(fp)
  805c48:	10800283 	ldbu	r2,10(r2)
  805c4c:	10803fcc 	andi	r2,r2,255
  805c50:	10002526 	beq	r2,zero,805ce8 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  805c54:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  805c58:	e0bffe03 	ldbu	r2,-8(fp)
  805c5c:	10800060 	cmpeqi	r2,r2,1
  805c60:	10000e26 	beq	r2,zero,805c9c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  805c64:	00000806 	br	805c88 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  805c68:	01c00084 	movi	r7,2
  805c6c:	01800044 	movi	r6,1
  805c70:	000b883a 	mov	r5,zero
  805c74:	e13ffd17 	ldw	r4,-12(fp)
  805c78:	08013b00 	call	8013b0 <OS_EventTaskRdy>
                     nbr_tasks++;
  805c7c:	e0bff803 	ldbu	r2,-32(fp)
  805c80:	10800044 	addi	r2,r2,1
  805c84:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  805c88:	e0bffd17 	ldw	r2,-12(fp)
  805c8c:	10800283 	ldbu	r2,10(r2)
  805c90:	10803fcc 	andi	r2,r2,255
  805c94:	103ff41e 	bne	r2,zero,805c68 <__alt_mem_epcs_flash_controller_0+0xff7fcc68>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  805c98:	00000906 	br	805cc0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  805c9c:	01c00084 	movi	r7,2
  805ca0:	01800044 	movi	r6,1
  805ca4:	000b883a 	mov	r5,zero
  805ca8:	e13ffd17 	ldw	r4,-12(fp)
  805cac:	08013b00 	call	8013b0 <OS_EventTaskRdy>
                 nbr_tasks++;
  805cb0:	e0bff803 	ldbu	r2,-32(fp)
  805cb4:	10800044 	addi	r2,r2,1
  805cb8:	e0bff805 	stb	r2,-32(fp)
                 break;
  805cbc:	0001883a 	nop
  805cc0:	e0bff917 	ldw	r2,-28(fp)
  805cc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805cc8:	e0bffa17 	ldw	r2,-24(fp)
  805ccc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  805cd0:	0801dfc0 	call	801dfc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  805cd4:	e0bfff17 	ldw	r2,-4(fp)
  805cd8:	00c00384 	movi	r3,14
  805cdc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  805ce0:	e0bff803 	ldbu	r2,-32(fp)
  805ce4:	00000706 	br	805d04 <OSSemPendAbort+0x158>
  805ce8:	e0bff917 	ldw	r2,-28(fp)
  805cec:	e0bffb15 	stw	r2,-20(fp)
  805cf0:	e0bffb17 	ldw	r2,-20(fp)
  805cf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805cf8:	e0bfff17 	ldw	r2,-4(fp)
  805cfc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  805d00:	0005883a 	mov	r2,zero
}
  805d04:	e037883a 	mov	sp,fp
  805d08:	dfc00117 	ldw	ra,4(sp)
  805d0c:	df000017 	ldw	fp,0(sp)
  805d10:	dec00204 	addi	sp,sp,8
  805d14:	f800283a 	ret

00805d18 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  805d18:	defff804 	addi	sp,sp,-32
  805d1c:	dfc00715 	stw	ra,28(sp)
  805d20:	df000615 	stw	fp,24(sp)
  805d24:	df000604 	addi	fp,sp,24
  805d28:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805d2c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805d30:	e0bfff17 	ldw	r2,-4(fp)
  805d34:	1000021e 	bne	r2,zero,805d40 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  805d38:	00800104 	movi	r2,4
  805d3c:	00003506 	br	805e14 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805d40:	e0bfff17 	ldw	r2,-4(fp)
  805d44:	10800003 	ldbu	r2,0(r2)
  805d48:	10803fcc 	andi	r2,r2,255
  805d4c:	108000e0 	cmpeqi	r2,r2,3
  805d50:	1000021e 	bne	r2,zero,805d5c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  805d54:	00800044 	movi	r2,1
  805d58:	00002e06 	br	805e14 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d5c:	0005303a 	rdctl	r2,status
  805d60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d64:	e0fffe17 	ldw	r3,-8(fp)
  805d68:	00bfff84 	movi	r2,-2
  805d6c:	1884703a 	and	r2,r3,r2
  805d70:	1001703a 	wrctl	status,r2
  
  return context;
  805d74:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  805d78:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  805d7c:	e0bfff17 	ldw	r2,-4(fp)
  805d80:	10800283 	ldbu	r2,10(r2)
  805d84:	10803fcc 	andi	r2,r2,255
  805d88:	10000c26 	beq	r2,zero,805dbc <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  805d8c:	000f883a 	mov	r7,zero
  805d90:	01800044 	movi	r6,1
  805d94:	000b883a 	mov	r5,zero
  805d98:	e13fff17 	ldw	r4,-4(fp)
  805d9c:	08013b00 	call	8013b0 <OS_EventTaskRdy>
  805da0:	e0bffa17 	ldw	r2,-24(fp)
  805da4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805da8:	e0bffb17 	ldw	r2,-20(fp)
  805dac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  805db0:	0801dfc0 	call	801dfc <OS_Sched>
        return (OS_ERR_NONE);
  805db4:	0005883a 	mov	r2,zero
  805db8:	00001606 	br	805e14 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  805dbc:	e0bfff17 	ldw	r2,-4(fp)
  805dc0:	1080020b 	ldhu	r2,8(r2)
  805dc4:	10ffffcc 	andi	r3,r2,65535
  805dc8:	00bfffd4 	movui	r2,65535
  805dcc:	18800c26 	beq	r3,r2,805e00 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  805dd0:	e0bfff17 	ldw	r2,-4(fp)
  805dd4:	1080020b 	ldhu	r2,8(r2)
  805dd8:	10800044 	addi	r2,r2,1
  805ddc:	1007883a 	mov	r3,r2
  805de0:	e0bfff17 	ldw	r2,-4(fp)
  805de4:	10c0020d 	sth	r3,8(r2)
  805de8:	e0bffa17 	ldw	r2,-24(fp)
  805dec:	e0bffc15 	stw	r2,-16(fp)
  805df0:	e0bffc17 	ldw	r2,-16(fp)
  805df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  805df8:	0005883a 	mov	r2,zero
  805dfc:	00000506 	br	805e14 <OSSemPost+0xfc>
  805e00:	e0bffa17 	ldw	r2,-24(fp)
  805e04:	e0bffd15 	stw	r2,-12(fp)
  805e08:	e0bffd17 	ldw	r2,-12(fp)
  805e0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  805e10:	00800c84 	movi	r2,50
}
  805e14:	e037883a 	mov	sp,fp
  805e18:	dfc00117 	ldw	ra,4(sp)
  805e1c:	df000017 	ldw	fp,0(sp)
  805e20:	dec00204 	addi	sp,sp,8
  805e24:	f800283a 	ret

00805e28 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  805e28:	defff704 	addi	sp,sp,-36
  805e2c:	df000815 	stw	fp,32(sp)
  805e30:	df000804 	addi	fp,sp,32
  805e34:	e13ffe15 	stw	r4,-8(fp)
  805e38:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805e3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  805e40:	e0bffe17 	ldw	r2,-8(fp)
  805e44:	1000021e 	bne	r2,zero,805e50 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  805e48:	00800104 	movi	r2,4
  805e4c:	00003606 	br	805f28 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  805e50:	e0bfff17 	ldw	r2,-4(fp)
  805e54:	1000021e 	bne	r2,zero,805e60 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  805e58:	00800244 	movi	r2,9
  805e5c:	00003206 	br	805f28 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  805e60:	e0bffe17 	ldw	r2,-8(fp)
  805e64:	10800003 	ldbu	r2,0(r2)
  805e68:	10803fcc 	andi	r2,r2,255
  805e6c:	108000e0 	cmpeqi	r2,r2,3
  805e70:	1000021e 	bne	r2,zero,805e7c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  805e74:	00800044 	movi	r2,1
  805e78:	00002b06 	br	805f28 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805e7c:	0005303a 	rdctl	r2,status
  805e80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e84:	e0fffd17 	ldw	r3,-12(fp)
  805e88:	00bfff84 	movi	r2,-2
  805e8c:	1884703a 	and	r2,r3,r2
  805e90:	1001703a 	wrctl	status,r2
  
  return context;
  805e94:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  805e98:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  805e9c:	e0bffe17 	ldw	r2,-8(fp)
  805ea0:	10c00283 	ldbu	r3,10(r2)
  805ea4:	e0bfff17 	ldw	r2,-4(fp)
  805ea8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  805eac:	e0bffe17 	ldw	r2,-8(fp)
  805eb0:	108002c4 	addi	r2,r2,11
  805eb4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  805eb8:	e0bfff17 	ldw	r2,-4(fp)
  805ebc:	10800084 	addi	r2,r2,2
  805ec0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805ec4:	e03ffa05 	stb	zero,-24(fp)
  805ec8:	00000b06 	br	805ef8 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  805ecc:	e0bff917 	ldw	r2,-28(fp)
  805ed0:	10c00044 	addi	r3,r2,1
  805ed4:	e0fff915 	stw	r3,-28(fp)
  805ed8:	e0fff817 	ldw	r3,-32(fp)
  805edc:	19000044 	addi	r4,r3,1
  805ee0:	e13ff815 	stw	r4,-32(fp)
  805ee4:	18c00003 	ldbu	r3,0(r3)
  805ee8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805eec:	e0bffa03 	ldbu	r2,-24(fp)
  805ef0:	10800044 	addi	r2,r2,1
  805ef4:	e0bffa05 	stb	r2,-24(fp)
  805ef8:	e0bffa03 	ldbu	r2,-24(fp)
  805efc:	108000f0 	cmpltui	r2,r2,3
  805f00:	103ff21e 	bne	r2,zero,805ecc <__alt_mem_epcs_flash_controller_0+0xff7fcecc>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  805f04:	e0bffe17 	ldw	r2,-8(fp)
  805f08:	10c0020b 	ldhu	r3,8(r2)
  805f0c:	e0bfff17 	ldw	r2,-4(fp)
  805f10:	10c0000d 	sth	r3,0(r2)
  805f14:	e0bffb17 	ldw	r2,-20(fp)
  805f18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f1c:	e0bffc17 	ldw	r2,-16(fp)
  805f20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805f24:	0005883a 	mov	r2,zero
}
  805f28:	e037883a 	mov	sp,fp
  805f2c:	df000017 	ldw	fp,0(sp)
  805f30:	dec00104 	addi	sp,sp,4
  805f34:	f800283a 	ret

00805f38 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  805f38:	defff904 	addi	sp,sp,-28
  805f3c:	df000615 	stw	fp,24(sp)
  805f40:	df000604 	addi	fp,sp,24
  805f44:	e13ffd15 	stw	r4,-12(fp)
  805f48:	2805883a 	mov	r2,r5
  805f4c:	e1bfff15 	stw	r6,-4(fp)
  805f50:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805f54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  805f58:	e0bfff17 	ldw	r2,-4(fp)
  805f5c:	10003126 	beq	r2,zero,806024 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805f60:	e0bffd17 	ldw	r2,-12(fp)
  805f64:	1000041e 	bne	r2,zero,805f78 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  805f68:	e0bfff17 	ldw	r2,-4(fp)
  805f6c:	00c00104 	movi	r3,4
  805f70:	10c00005 	stb	r3,0(r2)
        return;
  805f74:	00002c06 	br	806028 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805f78:	e0bffd17 	ldw	r2,-12(fp)
  805f7c:	10800003 	ldbu	r2,0(r2)
  805f80:	10803fcc 	andi	r2,r2,255
  805f84:	108000e0 	cmpeqi	r2,r2,3
  805f88:	1000041e 	bne	r2,zero,805f9c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  805f8c:	e0bfff17 	ldw	r2,-4(fp)
  805f90:	00c00044 	movi	r3,1
  805f94:	10c00005 	stb	r3,0(r2)
        return;
  805f98:	00002306 	br	806028 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805f9c:	0005303a 	rdctl	r2,status
  805fa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805fa4:	e0fffc17 	ldw	r3,-16(fp)
  805fa8:	00bfff84 	movi	r2,-2
  805fac:	1884703a 	and	r2,r3,r2
  805fb0:	1001703a 	wrctl	status,r2
  
  return context;
  805fb4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805fb8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  805fbc:	e0bfff17 	ldw	r2,-4(fp)
  805fc0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  805fc4:	e0bffd17 	ldw	r2,-12(fp)
  805fc8:	1080020b 	ldhu	r2,8(r2)
  805fcc:	10bfffcc 	andi	r2,r2,65535
  805fd0:	10000426 	beq	r2,zero,805fe4 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  805fd4:	e0bffd17 	ldw	r2,-12(fp)
  805fd8:	e0fffe0b 	ldhu	r3,-8(fp)
  805fdc:	10c0020d 	sth	r3,8(r2)
  805fe0:	00000b06 	br	806010 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  805fe4:	e0bffd17 	ldw	r2,-12(fp)
  805fe8:	10800283 	ldbu	r2,10(r2)
  805fec:	10803fcc 	andi	r2,r2,255
  805ff0:	1000041e 	bne	r2,zero,806004 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  805ff4:	e0bffd17 	ldw	r2,-12(fp)
  805ff8:	e0fffe0b 	ldhu	r3,-8(fp)
  805ffc:	10c0020d 	sth	r3,8(r2)
  806000:	00000306 	br	806010 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  806004:	e0bfff17 	ldw	r2,-4(fp)
  806008:	00c01244 	movi	r3,73
  80600c:	10c00005 	stb	r3,0(r2)
  806010:	e0bffa17 	ldw	r2,-24(fp)
  806014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806018:	e0bffb17 	ldw	r2,-20(fp)
  80601c:	1001703a 	wrctl	status,r2
  806020:	00000106 	br	806028 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  806024:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  806028:	e037883a 	mov	sp,fp
  80602c:	df000017 	ldw	fp,0(sp)
  806030:	dec00104 	addi	sp,sp,4
  806034:	f800283a 	ret

00806038 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  806038:	defff104 	addi	sp,sp,-60
  80603c:	dfc00e15 	stw	ra,56(sp)
  806040:	df000d15 	stw	fp,52(sp)
  806044:	df000d04 	addi	fp,sp,52
  806048:	2007883a 	mov	r3,r4
  80604c:	2805883a 	mov	r2,r5
  806050:	e0fffe05 	stb	r3,-8(fp)
  806054:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  806058:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  80605c:	e0bffe03 	ldbu	r2,-8(fp)
  806060:	10800530 	cmpltui	r2,r2,20
  806064:	1000051e 	bne	r2,zero,80607c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  806068:	e0bffe03 	ldbu	r2,-8(fp)
  80606c:	10803fe0 	cmpeqi	r2,r2,255
  806070:	1000021e 	bne	r2,zero,80607c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  806074:	00800a84 	movi	r2,42
  806078:	00012606 	br	806514 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  80607c:	e0bfff03 	ldbu	r2,-4(fp)
  806080:	10800530 	cmpltui	r2,r2,20
  806084:	1000021e 	bne	r2,zero,806090 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  806088:	00800a84 	movi	r2,42
  80608c:	00012106 	br	806514 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806090:	0005303a 	rdctl	r2,status
  806094:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806098:	e0fffd17 	ldw	r3,-12(fp)
  80609c:	00bfff84 	movi	r2,-2
  8060a0:	1884703a 	and	r2,r3,r2
  8060a4:	1001703a 	wrctl	status,r2
  
  return context;
  8060a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8060ac:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  8060b0:	e0ffff03 	ldbu	r3,-4(fp)
  8060b4:	00802074 	movhi	r2,129
  8060b8:	10951304 	addi	r2,r2,21580
  8060bc:	18c7883a 	add	r3,r3,r3
  8060c0:	18c7883a 	add	r3,r3,r3
  8060c4:	10c5883a 	add	r2,r2,r3
  8060c8:	10800017 	ldw	r2,0(r2)
  8060cc:	10000626 	beq	r2,zero,8060e8 <OSTaskChangePrio+0xb0>
  8060d0:	e0bff517 	ldw	r2,-44(fp)
  8060d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8060d8:	e0bff617 	ldw	r2,-40(fp)
  8060dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  8060e0:	00800a04 	movi	r2,40
  8060e4:	00010b06 	br	806514 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  8060e8:	e0bffe03 	ldbu	r2,-8(fp)
  8060ec:	10803fd8 	cmpnei	r2,r2,255
  8060f0:	1000031e 	bne	r2,zero,806100 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  8060f4:	d0a04217 	ldw	r2,-32504(gp)
  8060f8:	10800c83 	ldbu	r2,50(r2)
  8060fc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  806100:	e0fffe03 	ldbu	r3,-8(fp)
  806104:	00802074 	movhi	r2,129
  806108:	10951304 	addi	r2,r2,21580
  80610c:	18c7883a 	add	r3,r3,r3
  806110:	18c7883a 	add	r3,r3,r3
  806114:	10c5883a 	add	r2,r2,r3
  806118:	10800017 	ldw	r2,0(r2)
  80611c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  806120:	e0bff817 	ldw	r2,-32(fp)
  806124:	1000061e 	bne	r2,zero,806140 <OSTaskChangePrio+0x108>
  806128:	e0bff517 	ldw	r2,-44(fp)
  80612c:	e0bff715 	stw	r2,-36(fp)
  806130:	e0bff717 	ldw	r2,-36(fp)
  806134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  806138:	00800a44 	movi	r2,41
  80613c:	0000f506 	br	806514 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  806140:	e0bff817 	ldw	r2,-32(fp)
  806144:	10800058 	cmpnei	r2,r2,1
  806148:	1000061e 	bne	r2,zero,806164 <OSTaskChangePrio+0x12c>
  80614c:	e0bff517 	ldw	r2,-44(fp)
  806150:	e0bff915 	stw	r2,-28(fp)
  806154:	e0bff917 	ldw	r2,-28(fp)
  806158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  80615c:	008010c4 	movi	r2,67
  806160:	0000ec06 	br	806514 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  806164:	e0bfff03 	ldbu	r2,-4(fp)
  806168:	1004d0fa 	srli	r2,r2,3
  80616c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  806170:	e0bfff03 	ldbu	r2,-4(fp)
  806174:	108001cc 	andi	r2,r2,7
  806178:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  80617c:	e0bffb03 	ldbu	r2,-20(fp)
  806180:	00c00044 	movi	r3,1
  806184:	1884983a 	sll	r2,r3,r2
  806188:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  80618c:	e0bffb43 	ldbu	r2,-19(fp)
  806190:	00c00044 	movi	r3,1
  806194:	1884983a 	sll	r2,r3,r2
  806198:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80619c:	e0fffe03 	ldbu	r3,-8(fp)
  8061a0:	00802074 	movhi	r2,129
  8061a4:	10951304 	addi	r2,r2,21580
  8061a8:	18c7883a 	add	r3,r3,r3
  8061ac:	18c7883a 	add	r3,r3,r3
  8061b0:	10c5883a 	add	r2,r2,r3
  8061b4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  8061b8:	e0ffff03 	ldbu	r3,-4(fp)
  8061bc:	00802074 	movhi	r2,129
  8061c0:	10951304 	addi	r2,r2,21580
  8061c4:	18c7883a 	add	r3,r3,r3
  8061c8:	18c7883a 	add	r3,r3,r3
  8061cc:	10c5883a 	add	r2,r2,r3
  8061d0:	e0fff817 	ldw	r3,-32(fp)
  8061d4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  8061d8:	e0bff817 	ldw	r2,-32(fp)
  8061dc:	10800d03 	ldbu	r2,52(r2)
  8061e0:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  8061e4:	e0bff817 	ldw	r2,-32(fp)
  8061e8:	10800d83 	ldbu	r2,54(r2)
  8061ec:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  8061f0:	e0bff817 	ldw	r2,-32(fp)
  8061f4:	10800d43 	ldbu	r2,53(r2)
  8061f8:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  8061fc:	e0fffc03 	ldbu	r3,-16(fp)
  806200:	d0a03f44 	addi	r2,gp,-32515
  806204:	1885883a 	add	r2,r3,r2
  806208:	10c00003 	ldbu	r3,0(r2)
  80620c:	e0bffc83 	ldbu	r2,-14(fp)
  806210:	1884703a 	and	r2,r3,r2
  806214:	10803fcc 	andi	r2,r2,255
  806218:	10002826 	beq	r2,zero,8062bc <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  80621c:	e0fffc03 	ldbu	r3,-16(fp)
  806220:	e13ffc03 	ldbu	r4,-16(fp)
  806224:	d0a03f44 	addi	r2,gp,-32515
  806228:	2085883a 	add	r2,r4,r2
  80622c:	10800003 	ldbu	r2,0(r2)
  806230:	1009883a 	mov	r4,r2
  806234:	e0bffc83 	ldbu	r2,-14(fp)
  806238:	0084303a 	nor	r2,zero,r2
  80623c:	2084703a 	and	r2,r4,r2
  806240:	1009883a 	mov	r4,r2
  806244:	d0a03f44 	addi	r2,gp,-32515
  806248:	1885883a 	add	r2,r3,r2
  80624c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  806250:	e0fffc03 	ldbu	r3,-16(fp)
  806254:	d0a03f44 	addi	r2,gp,-32515
  806258:	1885883a 	add	r2,r3,r2
  80625c:	10800003 	ldbu	r2,0(r2)
  806260:	10803fcc 	andi	r2,r2,255
  806264:	1000061e 	bne	r2,zero,806280 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  806268:	e0bffc43 	ldbu	r2,-15(fp)
  80626c:	0084303a 	nor	r2,zero,r2
  806270:	1007883a 	mov	r3,r2
  806274:	d0a03f03 	ldbu	r2,-32516(gp)
  806278:	1884703a 	and	r2,r3,r2
  80627c:	d0a03f05 	stb	r2,-32516(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  806280:	d0e03f03 	ldbu	r3,-32516(gp)
  806284:	e0bffb83 	ldbu	r2,-18(fp)
  806288:	1884b03a 	or	r2,r3,r2
  80628c:	d0a03f05 	stb	r2,-32516(gp)
         OSRdyTbl[y_new] |= bitx_new;
  806290:	e0fffb03 	ldbu	r3,-20(fp)
  806294:	e13ffb03 	ldbu	r4,-20(fp)
  806298:	d0a03f44 	addi	r2,gp,-32515
  80629c:	2085883a 	add	r2,r4,r2
  8062a0:	11000003 	ldbu	r4,0(r2)
  8062a4:	e0bffbc3 	ldbu	r2,-17(fp)
  8062a8:	2084b03a 	or	r2,r4,r2
  8062ac:	1009883a 	mov	r4,r2
  8062b0:	d0a03f44 	addi	r2,gp,-32515
  8062b4:	1885883a 	add	r2,r3,r2
  8062b8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  8062bc:	e0bff817 	ldw	r2,-32(fp)
  8062c0:	10800717 	ldw	r2,28(r2)
  8062c4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  8062c8:	e0bff317 	ldw	r2,-52(fp)
  8062cc:	10003326 	beq	r2,zero,80639c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  8062d0:	e0bffc03 	ldbu	r2,-16(fp)
  8062d4:	e0fffc03 	ldbu	r3,-16(fp)
  8062d8:	e13ff317 	ldw	r4,-52(fp)
  8062dc:	20c7883a 	add	r3,r4,r3
  8062e0:	18c002c4 	addi	r3,r3,11
  8062e4:	18c00003 	ldbu	r3,0(r3)
  8062e8:	1809883a 	mov	r4,r3
  8062ec:	e0fffc83 	ldbu	r3,-14(fp)
  8062f0:	00c6303a 	nor	r3,zero,r3
  8062f4:	20c6703a 	and	r3,r4,r3
  8062f8:	1809883a 	mov	r4,r3
  8062fc:	e0fff317 	ldw	r3,-52(fp)
  806300:	1885883a 	add	r2,r3,r2
  806304:	108002c4 	addi	r2,r2,11
  806308:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80630c:	e0bffc03 	ldbu	r2,-16(fp)
  806310:	e0fff317 	ldw	r3,-52(fp)
  806314:	1885883a 	add	r2,r3,r2
  806318:	108002c4 	addi	r2,r2,11
  80631c:	10800003 	ldbu	r2,0(r2)
  806320:	10803fcc 	andi	r2,r2,255
  806324:	1000091e 	bne	r2,zero,80634c <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  806328:	e0bff317 	ldw	r2,-52(fp)
  80632c:	10800283 	ldbu	r2,10(r2)
  806330:	1007883a 	mov	r3,r2
  806334:	e0bffc43 	ldbu	r2,-15(fp)
  806338:	0084303a 	nor	r2,zero,r2
  80633c:	1884703a 	and	r2,r3,r2
  806340:	1007883a 	mov	r3,r2
  806344:	e0bff317 	ldw	r2,-52(fp)
  806348:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  80634c:	e0bff317 	ldw	r2,-52(fp)
  806350:	10c00283 	ldbu	r3,10(r2)
  806354:	e0bffb83 	ldbu	r2,-18(fp)
  806358:	1884b03a 	or	r2,r3,r2
  80635c:	1007883a 	mov	r3,r2
  806360:	e0bff317 	ldw	r2,-52(fp)
  806364:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  806368:	e0bffb03 	ldbu	r2,-20(fp)
  80636c:	e0fffb03 	ldbu	r3,-20(fp)
  806370:	e13ff317 	ldw	r4,-52(fp)
  806374:	20c7883a 	add	r3,r4,r3
  806378:	18c002c4 	addi	r3,r3,11
  80637c:	19000003 	ldbu	r4,0(r3)
  806380:	e0fffbc3 	ldbu	r3,-17(fp)
  806384:	20c6b03a 	or	r3,r4,r3
  806388:	1809883a 	mov	r4,r3
  80638c:	e0fff317 	ldw	r3,-52(fp)
  806390:	1885883a 	add	r2,r3,r2
  806394:	108002c4 	addi	r2,r2,11
  806398:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80639c:	e0bff817 	ldw	r2,-32(fp)
  8063a0:	10800817 	ldw	r2,32(r2)
  8063a4:	10004226 	beq	r2,zero,8064b0 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  8063a8:	e0bff817 	ldw	r2,-32(fp)
  8063ac:	10800817 	ldw	r2,32(r2)
  8063b0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  8063b4:	e0bff417 	ldw	r2,-48(fp)
  8063b8:	10800017 	ldw	r2,0(r2)
  8063bc:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  8063c0:	00003906 	br	8064a8 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  8063c4:	e0bffc03 	ldbu	r2,-16(fp)
  8063c8:	e0fffc03 	ldbu	r3,-16(fp)
  8063cc:	e13ff317 	ldw	r4,-52(fp)
  8063d0:	20c7883a 	add	r3,r4,r3
  8063d4:	18c002c4 	addi	r3,r3,11
  8063d8:	18c00003 	ldbu	r3,0(r3)
  8063dc:	1809883a 	mov	r4,r3
  8063e0:	e0fffc83 	ldbu	r3,-14(fp)
  8063e4:	00c6303a 	nor	r3,zero,r3
  8063e8:	20c6703a 	and	r3,r4,r3
  8063ec:	1809883a 	mov	r4,r3
  8063f0:	e0fff317 	ldw	r3,-52(fp)
  8063f4:	1885883a 	add	r2,r3,r2
  8063f8:	108002c4 	addi	r2,r2,11
  8063fc:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  806400:	e0bffc03 	ldbu	r2,-16(fp)
  806404:	e0fff317 	ldw	r3,-52(fp)
  806408:	1885883a 	add	r2,r3,r2
  80640c:	108002c4 	addi	r2,r2,11
  806410:	10800003 	ldbu	r2,0(r2)
  806414:	10803fcc 	andi	r2,r2,255
  806418:	1000091e 	bne	r2,zero,806440 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  80641c:	e0bff317 	ldw	r2,-52(fp)
  806420:	10800283 	ldbu	r2,10(r2)
  806424:	1007883a 	mov	r3,r2
  806428:	e0bffc43 	ldbu	r2,-15(fp)
  80642c:	0084303a 	nor	r2,zero,r2
  806430:	1884703a 	and	r2,r3,r2
  806434:	1007883a 	mov	r3,r2
  806438:	e0bff317 	ldw	r2,-52(fp)
  80643c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  806440:	e0bff317 	ldw	r2,-52(fp)
  806444:	10c00283 	ldbu	r3,10(r2)
  806448:	e0bffb83 	ldbu	r2,-18(fp)
  80644c:	1884b03a 	or	r2,r3,r2
  806450:	1007883a 	mov	r3,r2
  806454:	e0bff317 	ldw	r2,-52(fp)
  806458:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  80645c:	e0bffb03 	ldbu	r2,-20(fp)
  806460:	e0fffb03 	ldbu	r3,-20(fp)
  806464:	e13ff317 	ldw	r4,-52(fp)
  806468:	20c7883a 	add	r3,r4,r3
  80646c:	18c002c4 	addi	r3,r3,11
  806470:	19000003 	ldbu	r4,0(r3)
  806474:	e0fffbc3 	ldbu	r3,-17(fp)
  806478:	20c6b03a 	or	r3,r4,r3
  80647c:	1809883a 	mov	r4,r3
  806480:	e0fff317 	ldw	r3,-52(fp)
  806484:	1885883a 	add	r2,r3,r2
  806488:	108002c4 	addi	r2,r2,11
  80648c:	11000005 	stb	r4,0(r2)
            pevents++;
  806490:	e0bff417 	ldw	r2,-48(fp)
  806494:	10800104 	addi	r2,r2,4
  806498:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  80649c:	e0bff417 	ldw	r2,-48(fp)
  8064a0:	10800017 	ldw	r2,0(r2)
  8064a4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  8064a8:	e0bff317 	ldw	r2,-52(fp)
  8064ac:	103fc51e 	bne	r2,zero,8063c4 <__alt_mem_epcs_flash_controller_0+0xff7fd3c4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  8064b0:	e0bff817 	ldw	r2,-32(fp)
  8064b4:	e0ffff03 	ldbu	r3,-4(fp)
  8064b8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  8064bc:	e0bff817 	ldw	r2,-32(fp)
  8064c0:	e0fffb03 	ldbu	r3,-20(fp)
  8064c4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  8064c8:	e0bff817 	ldw	r2,-32(fp)
  8064cc:	e0fffb43 	ldbu	r3,-19(fp)
  8064d0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  8064d4:	e0bff817 	ldw	r2,-32(fp)
  8064d8:	e0fffb83 	ldbu	r3,-18(fp)
  8064dc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  8064e0:	e0bff817 	ldw	r2,-32(fp)
  8064e4:	e0fffbc3 	ldbu	r3,-17(fp)
  8064e8:	10c00d45 	stb	r3,53(r2)
  8064ec:	e0bff517 	ldw	r2,-44(fp)
  8064f0:	e0bffa15 	stw	r2,-24(fp)
  8064f4:	e0bffa17 	ldw	r2,-24(fp)
  8064f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8064fc:	d0a03343 	ldbu	r2,-32563(gp)
  806500:	10803fcc 	andi	r2,r2,255
  806504:	10800058 	cmpnei	r2,r2,1
  806508:	1000011e 	bne	r2,zero,806510 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  80650c:	0801dfc0 	call	801dfc <OS_Sched>
    }
    return (OS_ERR_NONE);
  806510:	0005883a 	mov	r2,zero
}
  806514:	e037883a 	mov	sp,fp
  806518:	dfc00117 	ldw	ra,4(sp)
  80651c:	df000017 	ldw	fp,0(sp)
  806520:	dec00204 	addi	sp,sp,8
  806524:	f800283a 	ret

00806528 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  806528:	deffee04 	addi	sp,sp,-72
  80652c:	dfc01115 	stw	ra,68(sp)
  806530:	df001015 	stw	fp,64(sp)
  806534:	df001004 	addi	fp,sp,64
  806538:	e13ffc15 	stw	r4,-16(fp)
  80653c:	e17ffd15 	stw	r5,-12(fp)
  806540:	e1bffe15 	stw	r6,-8(fp)
  806544:	3805883a 	mov	r2,r7
  806548:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80654c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  806550:	e0bfff03 	ldbu	r2,-4(fp)
  806554:	10800570 	cmpltui	r2,r2,21
  806558:	1000021e 	bne	r2,zero,806564 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  80655c:	00800a84 	movi	r2,42
  806560:	00005706 	br	8066c0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806564:	0005303a 	rdctl	r2,status
  806568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80656c:	e0fffb17 	ldw	r3,-20(fp)
  806570:	00bfff84 	movi	r2,-2
  806574:	1884703a 	and	r2,r3,r2
  806578:	1001703a 	wrctl	status,r2
  
  return context;
  80657c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  806580:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  806584:	d0a04103 	ldbu	r2,-32508(gp)
  806588:	10803fcc 	andi	r2,r2,255
  80658c:	10000626 	beq	r2,zero,8065a8 <OSTaskCreate+0x80>
  806590:	e0bff317 	ldw	r2,-52(fp)
  806594:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806598:	e0bff417 	ldw	r2,-48(fp)
  80659c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  8065a0:	00800f04 	movi	r2,60
  8065a4:	00004606 	br	8066c0 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8065a8:	e0ffff03 	ldbu	r3,-4(fp)
  8065ac:	00802074 	movhi	r2,129
  8065b0:	10951304 	addi	r2,r2,21580
  8065b4:	18c7883a 	add	r3,r3,r3
  8065b8:	18c7883a 	add	r3,r3,r3
  8065bc:	10c5883a 	add	r2,r2,r3
  8065c0:	10800017 	ldw	r2,0(r2)
  8065c4:	1000391e 	bne	r2,zero,8066ac <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8065c8:	e0ffff03 	ldbu	r3,-4(fp)
  8065cc:	00802074 	movhi	r2,129
  8065d0:	10951304 	addi	r2,r2,21580
  8065d4:	18c7883a 	add	r3,r3,r3
  8065d8:	18c7883a 	add	r3,r3,r3
  8065dc:	10c5883a 	add	r2,r2,r3
  8065e0:	00c00044 	movi	r3,1
  8065e4:	10c00015 	stw	r3,0(r2)
  8065e8:	e0bff317 	ldw	r2,-52(fp)
  8065ec:	e0bff515 	stw	r2,-44(fp)
  8065f0:	e0bff517 	ldw	r2,-44(fp)
  8065f4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  8065f8:	000f883a 	mov	r7,zero
  8065fc:	e1bffe17 	ldw	r6,-8(fp)
  806600:	e17ffd17 	ldw	r5,-12(fp)
  806604:	e13ffc17 	ldw	r4,-16(fp)
  806608:	080b6e40 	call	80b6e4 <OSTaskStkInit>
  80660c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  806610:	e0bfff03 	ldbu	r2,-4(fp)
  806614:	d8000215 	stw	zero,8(sp)
  806618:	d8000115 	stw	zero,4(sp)
  80661c:	d8000015 	stw	zero,0(sp)
  806620:	000f883a 	mov	r7,zero
  806624:	000d883a 	mov	r6,zero
  806628:	e17ff717 	ldw	r5,-36(fp)
  80662c:	1009883a 	mov	r4,r2
  806630:	08021fc0 	call	8021fc <OS_TCBInit>
  806634:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  806638:	e0bff803 	ldbu	r2,-32(fp)
  80663c:	1000061e 	bne	r2,zero,806658 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  806640:	d0a03343 	ldbu	r2,-32563(gp)
  806644:	10803fcc 	andi	r2,r2,255
  806648:	10800058 	cmpnei	r2,r2,1
  80664c:	1000151e 	bne	r2,zero,8066a4 <OSTaskCreate+0x17c>
                OS_Sched();
  806650:	0801dfc0 	call	801dfc <OS_Sched>
  806654:	00001306 	br	8066a4 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806658:	0005303a 	rdctl	r2,status
  80665c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806660:	e0fffa17 	ldw	r3,-24(fp)
  806664:	00bfff84 	movi	r2,-2
  806668:	1884703a 	and	r2,r3,r2
  80666c:	1001703a 	wrctl	status,r2
  
  return context;
  806670:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  806674:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  806678:	e0ffff03 	ldbu	r3,-4(fp)
  80667c:	00802074 	movhi	r2,129
  806680:	10951304 	addi	r2,r2,21580
  806684:	18c7883a 	add	r3,r3,r3
  806688:	18c7883a 	add	r3,r3,r3
  80668c:	10c5883a 	add	r2,r2,r3
  806690:	10000015 	stw	zero,0(r2)
  806694:	e0bff317 	ldw	r2,-52(fp)
  806698:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80669c:	e0bff617 	ldw	r2,-40(fp)
  8066a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8066a4:	e0bff803 	ldbu	r2,-32(fp)
  8066a8:	00000506 	br	8066c0 <OSTaskCreate+0x198>
  8066ac:	e0bff317 	ldw	r2,-52(fp)
  8066b0:	e0bff915 	stw	r2,-28(fp)
  8066b4:	e0bff917 	ldw	r2,-28(fp)
  8066b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8066bc:	00800a04 	movi	r2,40
}
  8066c0:	e037883a 	mov	sp,fp
  8066c4:	dfc00117 	ldw	ra,4(sp)
  8066c8:	df000017 	ldw	fp,0(sp)
  8066cc:	dec00204 	addi	sp,sp,8
  8066d0:	f800283a 	ret

008066d4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8066d4:	deffec04 	addi	sp,sp,-80
  8066d8:	dfc01315 	stw	ra,76(sp)
  8066dc:	df001215 	stw	fp,72(sp)
  8066e0:	df001204 	addi	fp,sp,72
  8066e4:	e13ffa15 	stw	r4,-24(fp)
  8066e8:	e17ffb15 	stw	r5,-20(fp)
  8066ec:	e1bffc15 	stw	r6,-16(fp)
  8066f0:	3809883a 	mov	r4,r7
  8066f4:	e0c00217 	ldw	r3,8(fp)
  8066f8:	e0800617 	ldw	r2,24(fp)
  8066fc:	e13ffd05 	stb	r4,-12(fp)
  806700:	e0fffe0d 	sth	r3,-8(fp)
  806704:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  806708:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80670c:	e0bffd03 	ldbu	r2,-12(fp)
  806710:	10800570 	cmpltui	r2,r2,21
  806714:	1000021e 	bne	r2,zero,806720 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  806718:	00800a84 	movi	r2,42
  80671c:	00006106 	br	8068a4 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806720:	0005303a 	rdctl	r2,status
  806724:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806728:	e0fff917 	ldw	r3,-28(fp)
  80672c:	00bfff84 	movi	r2,-2
  806730:	1884703a 	and	r2,r3,r2
  806734:	1001703a 	wrctl	status,r2
  
  return context;
  806738:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80673c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  806740:	d0a04103 	ldbu	r2,-32508(gp)
  806744:	10803fcc 	andi	r2,r2,255
  806748:	10000626 	beq	r2,zero,806764 <OSTaskCreateExt+0x90>
  80674c:	e0bff117 	ldw	r2,-60(fp)
  806750:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806754:	e0bff217 	ldw	r2,-56(fp)
  806758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80675c:	00800f04 	movi	r2,60
  806760:	00005006 	br	8068a4 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  806764:	e0fffd03 	ldbu	r3,-12(fp)
  806768:	00802074 	movhi	r2,129
  80676c:	10951304 	addi	r2,r2,21580
  806770:	18c7883a 	add	r3,r3,r3
  806774:	18c7883a 	add	r3,r3,r3
  806778:	10c5883a 	add	r2,r2,r3
  80677c:	10800017 	ldw	r2,0(r2)
  806780:	1000431e 	bne	r2,zero,806890 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  806784:	e0fffd03 	ldbu	r3,-12(fp)
  806788:	00802074 	movhi	r2,129
  80678c:	10951304 	addi	r2,r2,21580
  806790:	18c7883a 	add	r3,r3,r3
  806794:	18c7883a 	add	r3,r3,r3
  806798:	10c5883a 	add	r2,r2,r3
  80679c:	00c00044 	movi	r3,1
  8067a0:	10c00015 	stw	r3,0(r2)
  8067a4:	e0bff117 	ldw	r2,-60(fp)
  8067a8:	e0bff315 	stw	r2,-52(fp)
  8067ac:	e0bff317 	ldw	r2,-52(fp)
  8067b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  8067b4:	e0bfff0b 	ldhu	r2,-4(fp)
  8067b8:	100d883a 	mov	r6,r2
  8067bc:	e1400417 	ldw	r5,16(fp)
  8067c0:	e1000317 	ldw	r4,12(fp)
  8067c4:	08077340 	call	807734 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  8067c8:	e0bfff0b 	ldhu	r2,-4(fp)
  8067cc:	100f883a 	mov	r7,r2
  8067d0:	e1bffc17 	ldw	r6,-16(fp)
  8067d4:	e17ffb17 	ldw	r5,-20(fp)
  8067d8:	e13ffa17 	ldw	r4,-24(fp)
  8067dc:	080b6e40 	call	80b6e4 <OSTaskStkInit>
  8067e0:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  8067e4:	e0fffd03 	ldbu	r3,-12(fp)
  8067e8:	e13ffe0b 	ldhu	r4,-8(fp)
  8067ec:	e0bfff0b 	ldhu	r2,-4(fp)
  8067f0:	d8800215 	stw	r2,8(sp)
  8067f4:	e0800517 	ldw	r2,20(fp)
  8067f8:	d8800115 	stw	r2,4(sp)
  8067fc:	e0800417 	ldw	r2,16(fp)
  806800:	d8800015 	stw	r2,0(sp)
  806804:	200f883a 	mov	r7,r4
  806808:	e1800317 	ldw	r6,12(fp)
  80680c:	e17ff517 	ldw	r5,-44(fp)
  806810:	1809883a 	mov	r4,r3
  806814:	08021fc0 	call	8021fc <OS_TCBInit>
  806818:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  80681c:	e0bff603 	ldbu	r2,-40(fp)
  806820:	1000061e 	bne	r2,zero,80683c <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  806824:	d0a03343 	ldbu	r2,-32563(gp)
  806828:	10803fcc 	andi	r2,r2,255
  80682c:	10800058 	cmpnei	r2,r2,1
  806830:	1000151e 	bne	r2,zero,806888 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  806834:	0801dfc0 	call	801dfc <OS_Sched>
  806838:	00001306 	br	806888 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80683c:	0005303a 	rdctl	r2,status
  806840:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806844:	e0fff817 	ldw	r3,-32(fp)
  806848:	00bfff84 	movi	r2,-2
  80684c:	1884703a 	and	r2,r3,r2
  806850:	1001703a 	wrctl	status,r2
  
  return context;
  806854:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  806858:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80685c:	e0fffd03 	ldbu	r3,-12(fp)
  806860:	00802074 	movhi	r2,129
  806864:	10951304 	addi	r2,r2,21580
  806868:	18c7883a 	add	r3,r3,r3
  80686c:	18c7883a 	add	r3,r3,r3
  806870:	10c5883a 	add	r2,r2,r3
  806874:	10000015 	stw	zero,0(r2)
  806878:	e0bff117 	ldw	r2,-60(fp)
  80687c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806880:	e0bff417 	ldw	r2,-48(fp)
  806884:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  806888:	e0bff603 	ldbu	r2,-40(fp)
  80688c:	00000506 	br	8068a4 <OSTaskCreateExt+0x1d0>
  806890:	e0bff117 	ldw	r2,-60(fp)
  806894:	e0bff715 	stw	r2,-36(fp)
  806898:	e0bff717 	ldw	r2,-36(fp)
  80689c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8068a0:	00800a04 	movi	r2,40
}
  8068a4:	e037883a 	mov	sp,fp
  8068a8:	dfc00117 	ldw	ra,4(sp)
  8068ac:	df000017 	ldw	fp,0(sp)
  8068b0:	dec00204 	addi	sp,sp,8
  8068b4:	f800283a 	ret

008068b8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  8068b8:	defff404 	addi	sp,sp,-48
  8068bc:	dfc00b15 	stw	ra,44(sp)
  8068c0:	df000a15 	stw	fp,40(sp)
  8068c4:	df000a04 	addi	fp,sp,40
  8068c8:	2005883a 	mov	r2,r4
  8068cc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  8068d0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  8068d4:	d0a04103 	ldbu	r2,-32508(gp)
  8068d8:	10803fcc 	andi	r2,r2,255
  8068dc:	10000226 	beq	r2,zero,8068e8 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  8068e0:	00801004 	movi	r2,64
  8068e4:	0000c006 	br	806be8 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  8068e8:	e0bfff03 	ldbu	r2,-4(fp)
  8068ec:	10800518 	cmpnei	r2,r2,20
  8068f0:	1000021e 	bne	r2,zero,8068fc <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  8068f4:	00800f84 	movi	r2,62
  8068f8:	0000bb06 	br	806be8 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  8068fc:	e0bfff03 	ldbu	r2,-4(fp)
  806900:	10800530 	cmpltui	r2,r2,20
  806904:	1000051e 	bne	r2,zero,80691c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  806908:	e0bfff03 	ldbu	r2,-4(fp)
  80690c:	10803fe0 	cmpeqi	r2,r2,255
  806910:	1000021e 	bne	r2,zero,80691c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  806914:	00800a84 	movi	r2,42
  806918:	0000b306 	br	806be8 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80691c:	0005303a 	rdctl	r2,status
  806920:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806924:	e0fffe17 	ldw	r3,-8(fp)
  806928:	00bfff84 	movi	r2,-2
  80692c:	1884703a 	and	r2,r3,r2
  806930:	1001703a 	wrctl	status,r2
  
  return context;
  806934:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  806938:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80693c:	e0bfff03 	ldbu	r2,-4(fp)
  806940:	10803fd8 	cmpnei	r2,r2,255
  806944:	1000031e 	bne	r2,zero,806954 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  806948:	d0a04217 	ldw	r2,-32504(gp)
  80694c:	10800c83 	ldbu	r2,50(r2)
  806950:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  806954:	e0ffff03 	ldbu	r3,-4(fp)
  806958:	00802074 	movhi	r2,129
  80695c:	10951304 	addi	r2,r2,21580
  806960:	18c7883a 	add	r3,r3,r3
  806964:	18c7883a 	add	r3,r3,r3
  806968:	10c5883a 	add	r2,r2,r3
  80696c:	10800017 	ldw	r2,0(r2)
  806970:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  806974:	e0bff817 	ldw	r2,-32(fp)
  806978:	1000061e 	bne	r2,zero,806994 <OSTaskDel+0xdc>
  80697c:	e0bff617 	ldw	r2,-40(fp)
  806980:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806984:	e0bff717 	ldw	r2,-36(fp)
  806988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80698c:	008010c4 	movi	r2,67
  806990:	00009506 	br	806be8 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  806994:	e0bff817 	ldw	r2,-32(fp)
  806998:	10800058 	cmpnei	r2,r2,1
  80699c:	1000061e 	bne	r2,zero,8069b8 <OSTaskDel+0x100>
  8069a0:	e0bff617 	ldw	r2,-40(fp)
  8069a4:	e0bff915 	stw	r2,-28(fp)
  8069a8:	e0bff917 	ldw	r2,-28(fp)
  8069ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  8069b0:	00800f44 	movi	r2,61
  8069b4:	00008c06 	br	806be8 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  8069b8:	e0bff817 	ldw	r2,-32(fp)
  8069bc:	10800d03 	ldbu	r2,52(r2)
  8069c0:	10c03fcc 	andi	r3,r2,255
  8069c4:	e0bff817 	ldw	r2,-32(fp)
  8069c8:	10800d03 	ldbu	r2,52(r2)
  8069cc:	11003fcc 	andi	r4,r2,255
  8069d0:	d0a03f44 	addi	r2,gp,-32515
  8069d4:	2085883a 	add	r2,r4,r2
  8069d8:	10800003 	ldbu	r2,0(r2)
  8069dc:	1009883a 	mov	r4,r2
  8069e0:	e0bff817 	ldw	r2,-32(fp)
  8069e4:	10800d43 	ldbu	r2,53(r2)
  8069e8:	0084303a 	nor	r2,zero,r2
  8069ec:	2084703a 	and	r2,r4,r2
  8069f0:	1009883a 	mov	r4,r2
  8069f4:	d0a03f44 	addi	r2,gp,-32515
  8069f8:	1885883a 	add	r2,r3,r2
  8069fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  806a00:	e0bff817 	ldw	r2,-32(fp)
  806a04:	10800d03 	ldbu	r2,52(r2)
  806a08:	10c03fcc 	andi	r3,r2,255
  806a0c:	d0a03f44 	addi	r2,gp,-32515
  806a10:	1885883a 	add	r2,r3,r2
  806a14:	10800003 	ldbu	r2,0(r2)
  806a18:	10803fcc 	andi	r2,r2,255
  806a1c:	1000071e 	bne	r2,zero,806a3c <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  806a20:	e0bff817 	ldw	r2,-32(fp)
  806a24:	10800d83 	ldbu	r2,54(r2)
  806a28:	0084303a 	nor	r2,zero,r2
  806a2c:	1007883a 	mov	r3,r2
  806a30:	d0a03f03 	ldbu	r2,-32516(gp)
  806a34:	1884703a 	and	r2,r3,r2
  806a38:	d0a03f05 	stb	r2,-32516(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  806a3c:	e0bff817 	ldw	r2,-32(fp)
  806a40:	10800717 	ldw	r2,28(r2)
  806a44:	10000526 	beq	r2,zero,806a5c <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  806a48:	e0bff817 	ldw	r2,-32(fp)
  806a4c:	10800717 	ldw	r2,28(r2)
  806a50:	100b883a 	mov	r5,r2
  806a54:	e13ff817 	ldw	r4,-32(fp)
  806a58:	08017a80 	call	8017a8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  806a5c:	e0bff817 	ldw	r2,-32(fp)
  806a60:	10800817 	ldw	r2,32(r2)
  806a64:	10000526 	beq	r2,zero,806a7c <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  806a68:	e0bff817 	ldw	r2,-32(fp)
  806a6c:	10800817 	ldw	r2,32(r2)
  806a70:	100b883a 	mov	r5,r2
  806a74:	e13ff817 	ldw	r4,-32(fp)
  806a78:	08018600 	call	801860 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  806a7c:	e0bff817 	ldw	r2,-32(fp)
  806a80:	10800a17 	ldw	r2,40(r2)
  806a84:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  806a88:	e0bffb17 	ldw	r2,-20(fp)
  806a8c:	10000226 	beq	r2,zero,806a98 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  806a90:	e13ffb17 	ldw	r4,-20(fp)
  806a94:	0803cd00 	call	803cd0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  806a98:	e0bff817 	ldw	r2,-32(fp)
  806a9c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  806aa0:	e0bff817 	ldw	r2,-32(fp)
  806aa4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  806aa8:	e0bff817 	ldw	r2,-32(fp)
  806aac:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  806ab0:	d0a03303 	ldbu	r2,-32564(gp)
  806ab4:	10803fcc 	andi	r2,r2,255
  806ab8:	10803fe0 	cmpeqi	r2,r2,255
  806abc:	1000031e 	bne	r2,zero,806acc <OSTaskDel+0x214>
        OSLockNesting++;
  806ac0:	d0a03303 	ldbu	r2,-32564(gp)
  806ac4:	10800044 	addi	r2,r2,1
  806ac8:	d0a03305 	stb	r2,-32564(gp)
  806acc:	e0bff617 	ldw	r2,-40(fp)
  806ad0:	e0bffd15 	stw	r2,-12(fp)
  806ad4:	e0bffd17 	ldw	r2,-12(fp)
  806ad8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  806adc:	08013900 	call	801390 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806ae0:	0005303a 	rdctl	r2,status
  806ae4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ae8:	e0fffa17 	ldw	r3,-24(fp)
  806aec:	00bfff84 	movi	r2,-2
  806af0:	1884703a 	and	r2,r3,r2
  806af4:	1001703a 	wrctl	status,r2
  
  return context;
  806af8:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  806afc:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  806b00:	d0a03303 	ldbu	r2,-32564(gp)
  806b04:	10803fcc 	andi	r2,r2,255
  806b08:	10000326 	beq	r2,zero,806b18 <OSTaskDel+0x260>
        OSLockNesting--;
  806b0c:	d0a03303 	ldbu	r2,-32564(gp)
  806b10:	10bfffc4 	addi	r2,r2,-1
  806b14:	d0a03305 	stb	r2,-32564(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  806b18:	e13ff817 	ldw	r4,-32(fp)
  806b1c:	080b8640 	call	80b864 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  806b20:	d0a03b43 	ldbu	r2,-32531(gp)
  806b24:	10bfffc4 	addi	r2,r2,-1
  806b28:	d0a03b45 	stb	r2,-32531(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  806b2c:	e0ffff03 	ldbu	r3,-4(fp)
  806b30:	00802074 	movhi	r2,129
  806b34:	10951304 	addi	r2,r2,21580
  806b38:	18c7883a 	add	r3,r3,r3
  806b3c:	18c7883a 	add	r3,r3,r3
  806b40:	10c5883a 	add	r2,r2,r3
  806b44:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  806b48:	e0bff817 	ldw	r2,-32(fp)
  806b4c:	10800617 	ldw	r2,24(r2)
  806b50:	1000071e 	bne	r2,zero,806b70 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  806b54:	e0bff817 	ldw	r2,-32(fp)
  806b58:	10800517 	ldw	r2,20(r2)
  806b5c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  806b60:	e0bff817 	ldw	r2,-32(fp)
  806b64:	10800517 	ldw	r2,20(r2)
  806b68:	d0a03615 	stw	r2,-32552(gp)
  806b6c:	00000a06 	br	806b98 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  806b70:	e0bff817 	ldw	r2,-32(fp)
  806b74:	10800617 	ldw	r2,24(r2)
  806b78:	e0fff817 	ldw	r3,-32(fp)
  806b7c:	18c00517 	ldw	r3,20(r3)
  806b80:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  806b84:	e0bff817 	ldw	r2,-32(fp)
  806b88:	10800517 	ldw	r2,20(r2)
  806b8c:	e0fff817 	ldw	r3,-32(fp)
  806b90:	18c00617 	ldw	r3,24(r3)
  806b94:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  806b98:	d0e03a17 	ldw	r3,-32536(gp)
  806b9c:	e0bff817 	ldw	r2,-32(fp)
  806ba0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  806ba4:	e0bff817 	ldw	r2,-32(fp)
  806ba8:	d0a03a15 	stw	r2,-32536(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  806bac:	e0bff817 	ldw	r2,-32(fp)
  806bb0:	00c00fc4 	movi	r3,63
  806bb4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  806bb8:	e0bff817 	ldw	r2,-32(fp)
  806bbc:	10001345 	stb	zero,77(r2)
  806bc0:	e0bff617 	ldw	r2,-40(fp)
  806bc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806bc8:	e0bffc17 	ldw	r2,-16(fp)
  806bcc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  806bd0:	d0a03343 	ldbu	r2,-32563(gp)
  806bd4:	10803fcc 	andi	r2,r2,255
  806bd8:	10800058 	cmpnei	r2,r2,1
  806bdc:	1000011e 	bne	r2,zero,806be4 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  806be0:	0801dfc0 	call	801dfc <OS_Sched>
    }
    return (OS_ERR_NONE);
  806be4:	0005883a 	mov	r2,zero
}
  806be8:	e037883a 	mov	sp,fp
  806bec:	dfc00117 	ldw	ra,4(sp)
  806bf0:	df000017 	ldw	fp,0(sp)
  806bf4:	dec00204 	addi	sp,sp,8
  806bf8:	f800283a 	ret

00806bfc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  806bfc:	defff504 	addi	sp,sp,-44
  806c00:	df000a15 	stw	fp,40(sp)
  806c04:	df000a04 	addi	fp,sp,40
  806c08:	2005883a 	mov	r2,r4
  806c0c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806c10:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  806c14:	e0bfff03 	ldbu	r2,-4(fp)
  806c18:	10800518 	cmpnei	r2,r2,20
  806c1c:	1000021e 	bne	r2,zero,806c28 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  806c20:	00800f84 	movi	r2,62
  806c24:	00004506 	br	806d3c <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  806c28:	e0bfff03 	ldbu	r2,-4(fp)
  806c2c:	10800530 	cmpltui	r2,r2,20
  806c30:	1000051e 	bne	r2,zero,806c48 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  806c34:	e0bfff03 	ldbu	r2,-4(fp)
  806c38:	10803fe0 	cmpeqi	r2,r2,255
  806c3c:	1000021e 	bne	r2,zero,806c48 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  806c40:	00800a84 	movi	r2,42
  806c44:	00003d06 	br	806d3c <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  806c48:	e0bfff03 	ldbu	r2,-4(fp)
  806c4c:	10803fd8 	cmpnei	r2,r2,255
  806c50:	1000111e 	bne	r2,zero,806c98 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806c54:	0005303a 	rdctl	r2,status
  806c58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806c5c:	e0fff917 	ldw	r3,-28(fp)
  806c60:	00bfff84 	movi	r2,-2
  806c64:	1884703a 	and	r2,r3,r2
  806c68:	1001703a 	wrctl	status,r2
  
  return context;
  806c6c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  806c70:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  806c74:	d0a04217 	ldw	r2,-32504(gp)
  806c78:	10800dc3 	ldbu	r2,55(r2)
  806c7c:	e0bff805 	stb	r2,-32(fp)
  806c80:	e0bff617 	ldw	r2,-40(fp)
  806c84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c88:	e0bffe17 	ldw	r2,-8(fp)
  806c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  806c90:	e0bff803 	ldbu	r2,-32(fp)
  806c94:	00002906 	br	806d3c <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806c98:	0005303a 	rdctl	r2,status
  806c9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ca0:	e0fff717 	ldw	r3,-36(fp)
  806ca4:	00bfff84 	movi	r2,-2
  806ca8:	1884703a 	and	r2,r3,r2
  806cac:	1001703a 	wrctl	status,r2
  
  return context;
  806cb0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  806cb4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  806cb8:	e0ffff03 	ldbu	r3,-4(fp)
  806cbc:	00802074 	movhi	r2,129
  806cc0:	10951304 	addi	r2,r2,21580
  806cc4:	18c7883a 	add	r3,r3,r3
  806cc8:	18c7883a 	add	r3,r3,r3
  806ccc:	10c5883a 	add	r2,r2,r3
  806cd0:	10800017 	ldw	r2,0(r2)
  806cd4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  806cd8:	e0bffb17 	ldw	r2,-20(fp)
  806cdc:	1000061e 	bne	r2,zero,806cf8 <OSTaskDelReq+0xfc>
  806ce0:	e0bff617 	ldw	r2,-40(fp)
  806ce4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ce8:	e0bffa17 	ldw	r2,-24(fp)
  806cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  806cf0:	008010c4 	movi	r2,67
  806cf4:	00001106 	br	806d3c <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  806cf8:	e0bffb17 	ldw	r2,-20(fp)
  806cfc:	10800058 	cmpnei	r2,r2,1
  806d00:	1000061e 	bne	r2,zero,806d1c <OSTaskDelReq+0x120>
  806d04:	e0bff617 	ldw	r2,-40(fp)
  806d08:	e0bffc15 	stw	r2,-16(fp)
  806d0c:	e0bffc17 	ldw	r2,-16(fp)
  806d10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  806d14:	00800f44 	movi	r2,61
  806d18:	00000806 	br	806d3c <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  806d1c:	e0bffb17 	ldw	r2,-20(fp)
  806d20:	00c00fc4 	movi	r3,63
  806d24:	10c00dc5 	stb	r3,55(r2)
  806d28:	e0bff617 	ldw	r2,-40(fp)
  806d2c:	e0bffd15 	stw	r2,-12(fp)
  806d30:	e0bffd17 	ldw	r2,-12(fp)
  806d34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  806d38:	0005883a 	mov	r2,zero
}
  806d3c:	e037883a 	mov	sp,fp
  806d40:	df000017 	ldw	fp,0(sp)
  806d44:	dec00104 	addi	sp,sp,4
  806d48:	f800283a 	ret

00806d4c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806d4c:	defff404 	addi	sp,sp,-48
  806d50:	dfc00b15 	stw	ra,44(sp)
  806d54:	df000a15 	stw	fp,40(sp)
  806d58:	df000a04 	addi	fp,sp,40
  806d5c:	2005883a 	mov	r2,r4
  806d60:	e17ffe15 	stw	r5,-8(fp)
  806d64:	e1bfff15 	stw	r6,-4(fp)
  806d68:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  806d6c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  806d70:	e0bfff17 	ldw	r2,-4(fp)
  806d74:	1000021e 	bne	r2,zero,806d80 <OSTaskNameGet+0x34>
        return (0);
  806d78:	0005883a 	mov	r2,zero
  806d7c:	00005406 	br	806ed0 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  806d80:	e0bffd03 	ldbu	r2,-12(fp)
  806d84:	10800570 	cmpltui	r2,r2,21
  806d88:	1000081e 	bne	r2,zero,806dac <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  806d8c:	e0bffd03 	ldbu	r2,-12(fp)
  806d90:	10803fe0 	cmpeqi	r2,r2,255
  806d94:	1000051e 	bne	r2,zero,806dac <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  806d98:	e0bfff17 	ldw	r2,-4(fp)
  806d9c:	00c00a84 	movi	r3,42
  806da0:	10c00005 	stb	r3,0(r2)
            return (0);
  806da4:	0005883a 	mov	r2,zero
  806da8:	00004906 	br	806ed0 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  806dac:	e0bffe17 	ldw	r2,-8(fp)
  806db0:	1000051e 	bne	r2,zero,806dc8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  806db4:	e0bfff17 	ldw	r2,-4(fp)
  806db8:	00c00304 	movi	r3,12
  806dbc:	10c00005 	stb	r3,0(r2)
        return (0);
  806dc0:	0005883a 	mov	r2,zero
  806dc4:	00004206 	br	806ed0 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  806dc8:	d0a04103 	ldbu	r2,-32508(gp)
  806dcc:	10803fcc 	andi	r2,r2,255
  806dd0:	10000526 	beq	r2,zero,806de8 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  806dd4:	e0bfff17 	ldw	r2,-4(fp)
  806dd8:	00c00444 	movi	r3,17
  806ddc:	10c00005 	stb	r3,0(r2)
        return (0);
  806de0:	0005883a 	mov	r2,zero
  806de4:	00003a06 	br	806ed0 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806de8:	0005303a 	rdctl	r2,status
  806dec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806df0:	e0fffc17 	ldw	r3,-16(fp)
  806df4:	00bfff84 	movi	r2,-2
  806df8:	1884703a 	and	r2,r3,r2
  806dfc:	1001703a 	wrctl	status,r2
  
  return context;
  806e00:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806e04:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  806e08:	e0bffd03 	ldbu	r2,-12(fp)
  806e0c:	10803fd8 	cmpnei	r2,r2,255
  806e10:	1000031e 	bne	r2,zero,806e20 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  806e14:	d0a04217 	ldw	r2,-32504(gp)
  806e18:	10800c83 	ldbu	r2,50(r2)
  806e1c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  806e20:	e0fffd03 	ldbu	r3,-12(fp)
  806e24:	00802074 	movhi	r2,129
  806e28:	10951304 	addi	r2,r2,21580
  806e2c:	18c7883a 	add	r3,r3,r3
  806e30:	18c7883a 	add	r3,r3,r3
  806e34:	10c5883a 	add	r2,r2,r3
  806e38:	10800017 	ldw	r2,0(r2)
  806e3c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  806e40:	e0bff817 	ldw	r2,-32(fp)
  806e44:	1000091e 	bne	r2,zero,806e6c <OSTaskNameGet+0x120>
  806e48:	e0bff617 	ldw	r2,-40(fp)
  806e4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806e50:	e0bff717 	ldw	r2,-36(fp)
  806e54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  806e58:	e0bfff17 	ldw	r2,-4(fp)
  806e5c:	00c010c4 	movi	r3,67
  806e60:	10c00005 	stb	r3,0(r2)
        return (0);
  806e64:	0005883a 	mov	r2,zero
  806e68:	00001906 	br	806ed0 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  806e6c:	e0bff817 	ldw	r2,-32(fp)
  806e70:	10800058 	cmpnei	r2,r2,1
  806e74:	1000091e 	bne	r2,zero,806e9c <OSTaskNameGet+0x150>
  806e78:	e0bff617 	ldw	r2,-40(fp)
  806e7c:	e0bff915 	stw	r2,-28(fp)
  806e80:	e0bff917 	ldw	r2,-28(fp)
  806e84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  806e88:	e0bfff17 	ldw	r2,-4(fp)
  806e8c:	00c010c4 	movi	r3,67
  806e90:	10c00005 	stb	r3,0(r2)
        return (0);
  806e94:	0005883a 	mov	r2,zero
  806e98:	00000d06 	br	806ed0 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  806e9c:	e0bff817 	ldw	r2,-32(fp)
  806ea0:	10801304 	addi	r2,r2,76
  806ea4:	100b883a 	mov	r5,r2
  806ea8:	e13ffe17 	ldw	r4,-8(fp)
  806eac:	0801f400 	call	801f40 <OS_StrCopy>
  806eb0:	e0bffb05 	stb	r2,-20(fp)
  806eb4:	e0bff617 	ldw	r2,-40(fp)
  806eb8:	e0bffa15 	stw	r2,-24(fp)
  806ebc:	e0bffa17 	ldw	r2,-24(fp)
  806ec0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806ec4:	e0bfff17 	ldw	r2,-4(fp)
  806ec8:	10000005 	stb	zero,0(r2)
    return (len);
  806ecc:	e0bffb03 	ldbu	r2,-20(fp)
}
  806ed0:	e037883a 	mov	sp,fp
  806ed4:	dfc00117 	ldw	ra,4(sp)
  806ed8:	df000017 	ldw	fp,0(sp)
  806edc:	dec00204 	addi	sp,sp,8
  806ee0:	f800283a 	ret

00806ee4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806ee4:	defff304 	addi	sp,sp,-52
  806ee8:	dfc00c15 	stw	ra,48(sp)
  806eec:	df000b15 	stw	fp,44(sp)
  806ef0:	df000b04 	addi	fp,sp,44
  806ef4:	2005883a 	mov	r2,r4
  806ef8:	e17ffe15 	stw	r5,-8(fp)
  806efc:	e1bfff15 	stw	r6,-4(fp)
  806f00:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  806f04:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  806f08:	e0bfff17 	ldw	r2,-4(fp)
  806f0c:	10005c26 	beq	r2,zero,807080 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  806f10:	e0bffd03 	ldbu	r2,-12(fp)
  806f14:	10800570 	cmpltui	r2,r2,21
  806f18:	1000071e 	bne	r2,zero,806f38 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  806f1c:	e0bffd03 	ldbu	r2,-12(fp)
  806f20:	10803fe0 	cmpeqi	r2,r2,255
  806f24:	1000041e 	bne	r2,zero,806f38 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  806f28:	e0bfff17 	ldw	r2,-4(fp)
  806f2c:	00c00a84 	movi	r3,42
  806f30:	10c00005 	stb	r3,0(r2)
            return;
  806f34:	00005306 	br	807084 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  806f38:	e0bffe17 	ldw	r2,-8(fp)
  806f3c:	1000041e 	bne	r2,zero,806f50 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  806f40:	e0bfff17 	ldw	r2,-4(fp)
  806f44:	00c00304 	movi	r3,12
  806f48:	10c00005 	stb	r3,0(r2)
        return;
  806f4c:	00004d06 	br	807084 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  806f50:	d0a04103 	ldbu	r2,-32508(gp)
  806f54:	10803fcc 	andi	r2,r2,255
  806f58:	10000426 	beq	r2,zero,806f6c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  806f5c:	e0bfff17 	ldw	r2,-4(fp)
  806f60:	00c00484 	movi	r3,18
  806f64:	10c00005 	stb	r3,0(r2)
        return;
  806f68:	00004606 	br	807084 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806f6c:	0005303a 	rdctl	r2,status
  806f70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806f74:	e0fffc17 	ldw	r3,-16(fp)
  806f78:	00bfff84 	movi	r2,-2
  806f7c:	1884703a 	and	r2,r3,r2
  806f80:	1001703a 	wrctl	status,r2
  
  return context;
  806f84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806f88:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  806f8c:	e0bffd03 	ldbu	r2,-12(fp)
  806f90:	10803fd8 	cmpnei	r2,r2,255
  806f94:	1000031e 	bne	r2,zero,806fa4 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  806f98:	d0a04217 	ldw	r2,-32504(gp)
  806f9c:	10800c83 	ldbu	r2,50(r2)
  806fa0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  806fa4:	e0fffd03 	ldbu	r3,-12(fp)
  806fa8:	00802074 	movhi	r2,129
  806fac:	10951304 	addi	r2,r2,21580
  806fb0:	18c7883a 	add	r3,r3,r3
  806fb4:	18c7883a 	add	r3,r3,r3
  806fb8:	10c5883a 	add	r2,r2,r3
  806fbc:	10800017 	ldw	r2,0(r2)
  806fc0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  806fc4:	e0bff717 	ldw	r2,-36(fp)
  806fc8:	1000081e 	bne	r2,zero,806fec <OSTaskNameSet+0x108>
  806fcc:	e0bff517 	ldw	r2,-44(fp)
  806fd0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806fd4:	e0bff617 	ldw	r2,-40(fp)
  806fd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  806fdc:	e0bfff17 	ldw	r2,-4(fp)
  806fe0:	00c010c4 	movi	r3,67
  806fe4:	10c00005 	stb	r3,0(r2)
        return;
  806fe8:	00002606 	br	807084 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  806fec:	e0bff717 	ldw	r2,-36(fp)
  806ff0:	10800058 	cmpnei	r2,r2,1
  806ff4:	1000081e 	bne	r2,zero,807018 <OSTaskNameSet+0x134>
  806ff8:	e0bff517 	ldw	r2,-44(fp)
  806ffc:	e0bff815 	stw	r2,-32(fp)
  807000:	e0bff817 	ldw	r2,-32(fp)
  807004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  807008:	e0bfff17 	ldw	r2,-4(fp)
  80700c:	00c010c4 	movi	r3,67
  807010:	10c00005 	stb	r3,0(r2)
        return;
  807014:	00001b06 	br	807084 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  807018:	e13ffe17 	ldw	r4,-8(fp)
  80701c:	0801fb40 	call	801fb4 <OS_StrLen>
  807020:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  807024:	e0bffa03 	ldbu	r2,-24(fp)
  807028:	10800830 	cmpltui	r2,r2,32
  80702c:	1000081e 	bne	r2,zero,807050 <OSTaskNameSet+0x16c>
  807030:	e0bff517 	ldw	r2,-44(fp)
  807034:	e0bff915 	stw	r2,-28(fp)
  807038:	e0bff917 	ldw	r2,-28(fp)
  80703c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  807040:	e0bfff17 	ldw	r2,-4(fp)
  807044:	00c01044 	movi	r3,65
  807048:	10c00005 	stb	r3,0(r2)
        return;
  80704c:	00000d06 	br	807084 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  807050:	e0bff717 	ldw	r2,-36(fp)
  807054:	10801304 	addi	r2,r2,76
  807058:	e17ffe17 	ldw	r5,-8(fp)
  80705c:	1009883a 	mov	r4,r2
  807060:	0801f400 	call	801f40 <OS_StrCopy>
  807064:	e0bff517 	ldw	r2,-44(fp)
  807068:	e0bffb15 	stw	r2,-20(fp)
  80706c:	e0bffb17 	ldw	r2,-20(fp)
  807070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807074:	e0bfff17 	ldw	r2,-4(fp)
  807078:	10000005 	stb	zero,0(r2)
  80707c:	00000106 	br	807084 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  807080:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  807084:	e037883a 	mov	sp,fp
  807088:	dfc00117 	ldw	ra,4(sp)
  80708c:	df000017 	ldw	fp,0(sp)
  807090:	dec00204 	addi	sp,sp,8
  807094:	f800283a 	ret

00807098 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  807098:	defff404 	addi	sp,sp,-48
  80709c:	dfc00b15 	stw	ra,44(sp)
  8070a0:	df000a15 	stw	fp,40(sp)
  8070a4:	df000a04 	addi	fp,sp,40
  8070a8:	2005883a 	mov	r2,r4
  8070ac:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8070b0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  8070b4:	e0bfff03 	ldbu	r2,-4(fp)
  8070b8:	10800530 	cmpltui	r2,r2,20
  8070bc:	1000021e 	bne	r2,zero,8070c8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8070c0:	00800a84 	movi	r2,42
  8070c4:	00006406 	br	807258 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8070c8:	0005303a 	rdctl	r2,status
  8070cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8070d0:	e0fffe17 	ldw	r3,-8(fp)
  8070d4:	00bfff84 	movi	r2,-2
  8070d8:	1884703a 	and	r2,r3,r2
  8070dc:	1001703a 	wrctl	status,r2
  
  return context;
  8070e0:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8070e4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  8070e8:	e0ffff03 	ldbu	r3,-4(fp)
  8070ec:	00802074 	movhi	r2,129
  8070f0:	10951304 	addi	r2,r2,21580
  8070f4:	18c7883a 	add	r3,r3,r3
  8070f8:	18c7883a 	add	r3,r3,r3
  8070fc:	10c5883a 	add	r2,r2,r3
  807100:	10800017 	ldw	r2,0(r2)
  807104:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  807108:	e0bff817 	ldw	r2,-32(fp)
  80710c:	1000061e 	bne	r2,zero,807128 <OSTaskResume+0x90>
  807110:	e0bff617 	ldw	r2,-40(fp)
  807114:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807118:	e0bff717 	ldw	r2,-36(fp)
  80711c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  807120:	00801184 	movi	r2,70
  807124:	00004c06 	br	807258 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  807128:	e0bff817 	ldw	r2,-32(fp)
  80712c:	10800058 	cmpnei	r2,r2,1
  807130:	1000061e 	bne	r2,zero,80714c <OSTaskResume+0xb4>
  807134:	e0bff617 	ldw	r2,-40(fp)
  807138:	e0bff915 	stw	r2,-28(fp)
  80713c:	e0bff917 	ldw	r2,-28(fp)
  807140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  807144:	008010c4 	movi	r2,67
  807148:	00004306 	br	807258 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80714c:	e0bff817 	ldw	r2,-32(fp)
  807150:	10800c03 	ldbu	r2,48(r2)
  807154:	10803fcc 	andi	r2,r2,255
  807158:	1080020c 	andi	r2,r2,8
  80715c:	10003926 	beq	r2,zero,807244 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  807160:	e0bff817 	ldw	r2,-32(fp)
  807164:	10c00c03 	ldbu	r3,48(r2)
  807168:	00bffdc4 	movi	r2,-9
  80716c:	1884703a 	and	r2,r3,r2
  807170:	1007883a 	mov	r3,r2
  807174:	e0bff817 	ldw	r2,-32(fp)
  807178:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80717c:	e0bff817 	ldw	r2,-32(fp)
  807180:	10800c03 	ldbu	r2,48(r2)
  807184:	10803fcc 	andi	r2,r2,255
  807188:	1000281e 	bne	r2,zero,80722c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  80718c:	e0bff817 	ldw	r2,-32(fp)
  807190:	10800b8b 	ldhu	r2,46(r2)
  807194:	10bfffcc 	andi	r2,r2,65535
  807198:	10001f1e 	bne	r2,zero,807218 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80719c:	e0bff817 	ldw	r2,-32(fp)
  8071a0:	10c00d83 	ldbu	r3,54(r2)
  8071a4:	d0a03f03 	ldbu	r2,-32516(gp)
  8071a8:	1884b03a 	or	r2,r3,r2
  8071ac:	d0a03f05 	stb	r2,-32516(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8071b0:	e0bff817 	ldw	r2,-32(fp)
  8071b4:	10800d03 	ldbu	r2,52(r2)
  8071b8:	10c03fcc 	andi	r3,r2,255
  8071bc:	e0bff817 	ldw	r2,-32(fp)
  8071c0:	10800d03 	ldbu	r2,52(r2)
  8071c4:	11003fcc 	andi	r4,r2,255
  8071c8:	d0a03f44 	addi	r2,gp,-32515
  8071cc:	2085883a 	add	r2,r4,r2
  8071d0:	11000003 	ldbu	r4,0(r2)
  8071d4:	e0bff817 	ldw	r2,-32(fp)
  8071d8:	10800d43 	ldbu	r2,53(r2)
  8071dc:	2084b03a 	or	r2,r4,r2
  8071e0:	1009883a 	mov	r4,r2
  8071e4:	d0a03f44 	addi	r2,gp,-32515
  8071e8:	1885883a 	add	r2,r3,r2
  8071ec:	11000005 	stb	r4,0(r2)
  8071f0:	e0bff617 	ldw	r2,-40(fp)
  8071f4:	e0bffa15 	stw	r2,-24(fp)
  8071f8:	e0bffa17 	ldw	r2,-24(fp)
  8071fc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  807200:	d0a03343 	ldbu	r2,-32563(gp)
  807204:	10803fcc 	andi	r2,r2,255
  807208:	10800058 	cmpnei	r2,r2,1
  80720c:	10000b1e 	bne	r2,zero,80723c <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  807210:	0801dfc0 	call	801dfc <OS_Sched>
  807214:	00000906 	br	80723c <OSTaskResume+0x1a4>
  807218:	e0bff617 	ldw	r2,-40(fp)
  80721c:	e0bffb15 	stw	r2,-20(fp)
  807220:	e0bffb17 	ldw	r2,-20(fp)
  807224:	1001703a 	wrctl	status,r2
  807228:	00000406 	br	80723c <OSTaskResume+0x1a4>
  80722c:	e0bff617 	ldw	r2,-40(fp)
  807230:	e0bffc15 	stw	r2,-16(fp)
  807234:	e0bffc17 	ldw	r2,-16(fp)
  807238:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80723c:	0005883a 	mov	r2,zero
  807240:	00000506 	br	807258 <OSTaskResume+0x1c0>
  807244:	e0bff617 	ldw	r2,-40(fp)
  807248:	e0bffd15 	stw	r2,-12(fp)
  80724c:	e0bffd17 	ldw	r2,-12(fp)
  807250:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  807254:	00801104 	movi	r2,68
}
  807258:	e037883a 	mov	sp,fp
  80725c:	dfc00117 	ldw	ra,4(sp)
  807260:	df000017 	ldw	fp,0(sp)
  807264:	dec00204 	addi	sp,sp,8
  807268:	f800283a 	ret

0080726c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80726c:	defff304 	addi	sp,sp,-52
  807270:	df000c15 	stw	fp,48(sp)
  807274:	df000c04 	addi	fp,sp,48
  807278:	2005883a 	mov	r2,r4
  80727c:	e17fff15 	stw	r5,-4(fp)
  807280:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  807284:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  807288:	e0bffe03 	ldbu	r2,-8(fp)
  80728c:	10800570 	cmpltui	r2,r2,21
  807290:	1000051e 	bne	r2,zero,8072a8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  807294:	e0bffe03 	ldbu	r2,-8(fp)
  807298:	10803fe0 	cmpeqi	r2,r2,255
  80729c:	1000021e 	bne	r2,zero,8072a8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  8072a0:	00800a84 	movi	r2,42
  8072a4:	00005d06 	br	80741c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  8072a8:	e0bfff17 	ldw	r2,-4(fp)
  8072ac:	1000021e 	bne	r2,zero,8072b8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  8072b0:	00800244 	movi	r2,9
  8072b4:	00005906 	br	80741c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  8072b8:	e0bfff17 	ldw	r2,-4(fp)
  8072bc:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  8072c0:	e0bfff17 	ldw	r2,-4(fp)
  8072c4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8072c8:	0005303a 	rdctl	r2,status
  8072cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8072d0:	e0fffd17 	ldw	r3,-12(fp)
  8072d4:	00bfff84 	movi	r2,-2
  8072d8:	1884703a 	and	r2,r3,r2
  8072dc:	1001703a 	wrctl	status,r2
  
  return context;
  8072e0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  8072e4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  8072e8:	e0bffe03 	ldbu	r2,-8(fp)
  8072ec:	10803fd8 	cmpnei	r2,r2,255
  8072f0:	1000031e 	bne	r2,zero,807300 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  8072f4:	d0a04217 	ldw	r2,-32504(gp)
  8072f8:	10800c83 	ldbu	r2,50(r2)
  8072fc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807300:	e0fffe03 	ldbu	r3,-8(fp)
  807304:	00802074 	movhi	r2,129
  807308:	10951304 	addi	r2,r2,21580
  80730c:	18c7883a 	add	r3,r3,r3
  807310:	18c7883a 	add	r3,r3,r3
  807314:	10c5883a 	add	r2,r2,r3
  807318:	10800017 	ldw	r2,0(r2)
  80731c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  807320:	e0bff817 	ldw	r2,-32(fp)
  807324:	1000061e 	bne	r2,zero,807340 <OSTaskStkChk+0xd4>
  807328:	e0bff617 	ldw	r2,-40(fp)
  80732c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807330:	e0bff717 	ldw	r2,-36(fp)
  807334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  807338:	008010c4 	movi	r2,67
  80733c:	00003706 	br	80741c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  807340:	e0bff817 	ldw	r2,-32(fp)
  807344:	10800058 	cmpnei	r2,r2,1
  807348:	1000061e 	bne	r2,zero,807364 <OSTaskStkChk+0xf8>
  80734c:	e0bff617 	ldw	r2,-40(fp)
  807350:	e0bff915 	stw	r2,-28(fp)
  807354:	e0bff917 	ldw	r2,-28(fp)
  807358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80735c:	008010c4 	movi	r2,67
  807360:	00002e06 	br	80741c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  807364:	e0bff817 	ldw	r2,-32(fp)
  807368:	1080040b 	ldhu	r2,16(r2)
  80736c:	10bfffcc 	andi	r2,r2,65535
  807370:	1080004c 	andi	r2,r2,1
  807374:	1000061e 	bne	r2,zero,807390 <OSTaskStkChk+0x124>
  807378:	e0bff617 	ldw	r2,-40(fp)
  80737c:	e0bffa15 	stw	r2,-24(fp)
  807380:	e0bffa17 	ldw	r2,-24(fp)
  807384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  807388:	00801144 	movi	r2,69
  80738c:	00002306 	br	80741c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  807390:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  807394:	e0bff817 	ldw	r2,-32(fp)
  807398:	10800317 	ldw	r2,12(r2)
  80739c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  8073a0:	e0bff817 	ldw	r2,-32(fp)
  8073a4:	10800217 	ldw	r2,8(r2)
  8073a8:	e0bff415 	stw	r2,-48(fp)
  8073ac:	e0bff617 	ldw	r2,-40(fp)
  8073b0:	e0bffb15 	stw	r2,-20(fp)
  8073b4:	e0bffb17 	ldw	r2,-20(fp)
  8073b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8073bc:	00000306 	br	8073cc <OSTaskStkChk+0x160>
        nfree++;
  8073c0:	e0bff517 	ldw	r2,-44(fp)
  8073c4:	10800044 	addi	r2,r2,1
  8073c8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8073cc:	e0bff417 	ldw	r2,-48(fp)
  8073d0:	10c00104 	addi	r3,r2,4
  8073d4:	e0fff415 	stw	r3,-48(fp)
  8073d8:	10800017 	ldw	r2,0(r2)
  8073dc:	103ff826 	beq	r2,zero,8073c0 <__alt_mem_epcs_flash_controller_0+0xff7fe3c0>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  8073e0:	e0bff517 	ldw	r2,-44(fp)
  8073e4:	1085883a 	add	r2,r2,r2
  8073e8:	1085883a 	add	r2,r2,r2
  8073ec:	1007883a 	mov	r3,r2
  8073f0:	e0bfff17 	ldw	r2,-4(fp)
  8073f4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  8073f8:	e0fffc17 	ldw	r3,-16(fp)
  8073fc:	e0bff517 	ldw	r2,-44(fp)
  807400:	1885c83a 	sub	r2,r3,r2
  807404:	1085883a 	add	r2,r2,r2
  807408:	1085883a 	add	r2,r2,r2
  80740c:	1007883a 	mov	r3,r2
  807410:	e0bfff17 	ldw	r2,-4(fp)
  807414:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  807418:	0005883a 	mov	r2,zero
}
  80741c:	e037883a 	mov	sp,fp
  807420:	df000017 	ldw	fp,0(sp)
  807424:	dec00104 	addi	sp,sp,4
  807428:	f800283a 	ret

0080742c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80742c:	defff504 	addi	sp,sp,-44
  807430:	dfc00a15 	stw	ra,40(sp)
  807434:	df000915 	stw	fp,36(sp)
  807438:	df000904 	addi	fp,sp,36
  80743c:	2005883a 	mov	r2,r4
  807440:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807444:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  807448:	e0bfff03 	ldbu	r2,-4(fp)
  80744c:	10800518 	cmpnei	r2,r2,20
  807450:	1000021e 	bne	r2,zero,80745c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  807454:	008011c4 	movi	r2,71
  807458:	00006806 	br	8075fc <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80745c:	e0bfff03 	ldbu	r2,-4(fp)
  807460:	10800530 	cmpltui	r2,r2,20
  807464:	1000051e 	bne	r2,zero,80747c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  807468:	e0bfff03 	ldbu	r2,-4(fp)
  80746c:	10803fe0 	cmpeqi	r2,r2,255
  807470:	1000021e 	bne	r2,zero,80747c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  807474:	00800a84 	movi	r2,42
  807478:	00006006 	br	8075fc <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80747c:	0005303a 	rdctl	r2,status
  807480:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807484:	e0fffe17 	ldw	r3,-8(fp)
  807488:	00bfff84 	movi	r2,-2
  80748c:	1884703a 	and	r2,r3,r2
  807490:	1001703a 	wrctl	status,r2
  
  return context;
  807494:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  807498:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80749c:	e0bfff03 	ldbu	r2,-4(fp)
  8074a0:	10803fd8 	cmpnei	r2,r2,255
  8074a4:	1000061e 	bne	r2,zero,8074c0 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  8074a8:	d0a04217 	ldw	r2,-32504(gp)
  8074ac:	10800c83 	ldbu	r2,50(r2)
  8074b0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  8074b4:	00800044 	movi	r2,1
  8074b8:	e0bff705 	stb	r2,-36(fp)
  8074bc:	00000906 	br	8074e4 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  8074c0:	d0a04217 	ldw	r2,-32504(gp)
  8074c4:	10800c83 	ldbu	r2,50(r2)
  8074c8:	10c03fcc 	andi	r3,r2,255
  8074cc:	e0bfff03 	ldbu	r2,-4(fp)
  8074d0:	1880031e 	bne	r3,r2,8074e0 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  8074d4:	00800044 	movi	r2,1
  8074d8:	e0bff705 	stb	r2,-36(fp)
  8074dc:	00000106 	br	8074e4 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8074e0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8074e4:	e0ffff03 	ldbu	r3,-4(fp)
  8074e8:	00802074 	movhi	r2,129
  8074ec:	10951304 	addi	r2,r2,21580
  8074f0:	18c7883a 	add	r3,r3,r3
  8074f4:	18c7883a 	add	r3,r3,r3
  8074f8:	10c5883a 	add	r2,r2,r3
  8074fc:	10800017 	ldw	r2,0(r2)
  807500:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  807504:	e0bffa17 	ldw	r2,-24(fp)
  807508:	1000061e 	bne	r2,zero,807524 <OSTaskSuspend+0xf8>
  80750c:	e0bff817 	ldw	r2,-32(fp)
  807510:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807514:	e0bff917 	ldw	r2,-28(fp)
  807518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80751c:	00801204 	movi	r2,72
  807520:	00003606 	br	8075fc <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  807524:	e0bffa17 	ldw	r2,-24(fp)
  807528:	10800058 	cmpnei	r2,r2,1
  80752c:	1000061e 	bne	r2,zero,807548 <OSTaskSuspend+0x11c>
  807530:	e0bff817 	ldw	r2,-32(fp)
  807534:	e0bffb15 	stw	r2,-20(fp)
  807538:	e0bffb17 	ldw	r2,-20(fp)
  80753c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  807540:	008010c4 	movi	r2,67
  807544:	00002d06 	br	8075fc <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  807548:	e0bffa17 	ldw	r2,-24(fp)
  80754c:	10800d03 	ldbu	r2,52(r2)
  807550:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  807554:	e0fffd03 	ldbu	r3,-12(fp)
  807558:	e13ffd03 	ldbu	r4,-12(fp)
  80755c:	d0a03f44 	addi	r2,gp,-32515
  807560:	2085883a 	add	r2,r4,r2
  807564:	10800003 	ldbu	r2,0(r2)
  807568:	1009883a 	mov	r4,r2
  80756c:	e0bffa17 	ldw	r2,-24(fp)
  807570:	10800d43 	ldbu	r2,53(r2)
  807574:	0084303a 	nor	r2,zero,r2
  807578:	2084703a 	and	r2,r4,r2
  80757c:	1009883a 	mov	r4,r2
  807580:	d0a03f44 	addi	r2,gp,-32515
  807584:	1885883a 	add	r2,r3,r2
  807588:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80758c:	e0fffd03 	ldbu	r3,-12(fp)
  807590:	d0a03f44 	addi	r2,gp,-32515
  807594:	1885883a 	add	r2,r3,r2
  807598:	10800003 	ldbu	r2,0(r2)
  80759c:	10803fcc 	andi	r2,r2,255
  8075a0:	1000071e 	bne	r2,zero,8075c0 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  8075a4:	e0bffa17 	ldw	r2,-24(fp)
  8075a8:	10800d83 	ldbu	r2,54(r2)
  8075ac:	0084303a 	nor	r2,zero,r2
  8075b0:	1007883a 	mov	r3,r2
  8075b4:	d0a03f03 	ldbu	r2,-32516(gp)
  8075b8:	1884703a 	and	r2,r3,r2
  8075bc:	d0a03f05 	stb	r2,-32516(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8075c0:	e0bffa17 	ldw	r2,-24(fp)
  8075c4:	10800c03 	ldbu	r2,48(r2)
  8075c8:	10800214 	ori	r2,r2,8
  8075cc:	1007883a 	mov	r3,r2
  8075d0:	e0bffa17 	ldw	r2,-24(fp)
  8075d4:	10c00c05 	stb	r3,48(r2)
  8075d8:	e0bff817 	ldw	r2,-32(fp)
  8075dc:	e0bffc15 	stw	r2,-16(fp)
  8075e0:	e0bffc17 	ldw	r2,-16(fp)
  8075e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  8075e8:	e0bff703 	ldbu	r2,-36(fp)
  8075ec:	10800058 	cmpnei	r2,r2,1
  8075f0:	1000011e 	bne	r2,zero,8075f8 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  8075f4:	0801dfc0 	call	801dfc <OS_Sched>
    }
    return (OS_ERR_NONE);
  8075f8:	0005883a 	mov	r2,zero
}
  8075fc:	e037883a 	mov	sp,fp
  807600:	dfc00117 	ldw	ra,4(sp)
  807604:	df000017 	ldw	fp,0(sp)
  807608:	dec00204 	addi	sp,sp,8
  80760c:	f800283a 	ret

00807610 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  807610:	defff604 	addi	sp,sp,-40
  807614:	dfc00915 	stw	ra,36(sp)
  807618:	df000815 	stw	fp,32(sp)
  80761c:	df000804 	addi	fp,sp,32
  807620:	2005883a 	mov	r2,r4
  807624:	e17fff15 	stw	r5,-4(fp)
  807628:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80762c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  807630:	e0bffe03 	ldbu	r2,-8(fp)
  807634:	10800570 	cmpltui	r2,r2,21
  807638:	1000051e 	bne	r2,zero,807650 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80763c:	e0bffe03 	ldbu	r2,-8(fp)
  807640:	10803fe0 	cmpeqi	r2,r2,255
  807644:	1000021e 	bne	r2,zero,807650 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  807648:	00800a84 	movi	r2,42
  80764c:	00003406 	br	807720 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  807650:	e0bfff17 	ldw	r2,-4(fp)
  807654:	1000021e 	bne	r2,zero,807660 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  807658:	00800244 	movi	r2,9
  80765c:	00003006 	br	807720 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807660:	0005303a 	rdctl	r2,status
  807664:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807668:	e0fffd17 	ldw	r3,-12(fp)
  80766c:	00bfff84 	movi	r2,-2
  807670:	1884703a 	and	r2,r3,r2
  807674:	1001703a 	wrctl	status,r2
  
  return context;
  807678:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80767c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  807680:	e0bffe03 	ldbu	r2,-8(fp)
  807684:	10803fd8 	cmpnei	r2,r2,255
  807688:	1000031e 	bne	r2,zero,807698 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  80768c:	d0a04217 	ldw	r2,-32504(gp)
  807690:	10800c83 	ldbu	r2,50(r2)
  807694:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807698:	e0fffe03 	ldbu	r3,-8(fp)
  80769c:	00802074 	movhi	r2,129
  8076a0:	10951304 	addi	r2,r2,21580
  8076a4:	18c7883a 	add	r3,r3,r3
  8076a8:	18c7883a 	add	r3,r3,r3
  8076ac:	10c5883a 	add	r2,r2,r3
  8076b0:	10800017 	ldw	r2,0(r2)
  8076b4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  8076b8:	e0bffa17 	ldw	r2,-24(fp)
  8076bc:	1000061e 	bne	r2,zero,8076d8 <OSTaskQuery+0xc8>
  8076c0:	e0bff817 	ldw	r2,-32(fp)
  8076c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8076c8:	e0bff917 	ldw	r2,-28(fp)
  8076cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  8076d0:	00800a44 	movi	r2,41
  8076d4:	00001206 	br	807720 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  8076d8:	e0bffa17 	ldw	r2,-24(fp)
  8076dc:	10800058 	cmpnei	r2,r2,1
  8076e0:	1000061e 	bne	r2,zero,8076fc <OSTaskQuery+0xec>
  8076e4:	e0bff817 	ldw	r2,-32(fp)
  8076e8:	e0bffb15 	stw	r2,-20(fp)
  8076ec:	e0bffb17 	ldw	r2,-20(fp)
  8076f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8076f4:	008010c4 	movi	r2,67
  8076f8:	00000906 	br	807720 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  8076fc:	01801b04 	movi	r6,108
  807700:	e17ffa17 	ldw	r5,-24(fp)
  807704:	e13fff17 	ldw	r4,-4(fp)
  807708:	0801d940 	call	801d94 <OS_MemCopy>
  80770c:	e0bff817 	ldw	r2,-32(fp)
  807710:	e0bffc15 	stw	r2,-16(fp)
  807714:	e0bffc17 	ldw	r2,-16(fp)
  807718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80771c:	0005883a 	mov	r2,zero
}
  807720:	e037883a 	mov	sp,fp
  807724:	dfc00117 	ldw	ra,4(sp)
  807728:	df000017 	ldw	fp,0(sp)
  80772c:	dec00204 	addi	sp,sp,8
  807730:	f800283a 	ret

00807734 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  807734:	defffc04 	addi	sp,sp,-16
  807738:	df000315 	stw	fp,12(sp)
  80773c:	df000304 	addi	fp,sp,12
  807740:	e13ffd15 	stw	r4,-12(fp)
  807744:	e17ffe15 	stw	r5,-8(fp)
  807748:	3005883a 	mov	r2,r6
  80774c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  807750:	e0bfff0b 	ldhu	r2,-4(fp)
  807754:	1080004c 	andi	r2,r2,1
  807758:	10000d26 	beq	r2,zero,807790 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80775c:	e0bfff0b 	ldhu	r2,-4(fp)
  807760:	1080008c 	andi	r2,r2,2
  807764:	10000a26 	beq	r2,zero,807790 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  807768:	00000706 	br	807788 <OS_TaskStkClr+0x54>
                size--;
  80776c:	e0bffe17 	ldw	r2,-8(fp)
  807770:	10bfffc4 	addi	r2,r2,-1
  807774:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  807778:	e0bffd17 	ldw	r2,-12(fp)
  80777c:	10c00104 	addi	r3,r2,4
  807780:	e0fffd15 	stw	r3,-12(fp)
  807784:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  807788:	e0bffe17 	ldw	r2,-8(fp)
  80778c:	103ff71e 	bne	r2,zero,80776c <__alt_mem_epcs_flash_controller_0+0xff7fe76c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  807790:	0001883a 	nop
  807794:	e037883a 	mov	sp,fp
  807798:	df000017 	ldw	fp,0(sp)
  80779c:	dec00104 	addi	sp,sp,4
  8077a0:	f800283a 	ret

008077a4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  8077a4:	defff904 	addi	sp,sp,-28
  8077a8:	dfc00615 	stw	ra,24(sp)
  8077ac:	df000515 	stw	fp,20(sp)
  8077b0:	df000504 	addi	fp,sp,20
  8077b4:	2005883a 	mov	r2,r4
  8077b8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8077bc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8077c0:	d0a04103 	ldbu	r2,-32508(gp)
  8077c4:	10803fcc 	andi	r2,r2,255
  8077c8:	1000311e 	bne	r2,zero,807890 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8077cc:	e0bfff0b 	ldhu	r2,-4(fp)
  8077d0:	10003026 	beq	r2,zero,807894 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8077d4:	0005303a 	rdctl	r2,status
  8077d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8077dc:	e0fffe17 	ldw	r3,-8(fp)
  8077e0:	00bfff84 	movi	r2,-2
  8077e4:	1884703a 	and	r2,r3,r2
  8077e8:	1001703a 	wrctl	status,r2
  
  return context;
  8077ec:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8077f0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  8077f4:	d0a04217 	ldw	r2,-32504(gp)
  8077f8:	10800d03 	ldbu	r2,52(r2)
  8077fc:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  807800:	e0fffd03 	ldbu	r3,-12(fp)
  807804:	e13ffd03 	ldbu	r4,-12(fp)
  807808:	d0a03f44 	addi	r2,gp,-32515
  80780c:	2085883a 	add	r2,r4,r2
  807810:	10800003 	ldbu	r2,0(r2)
  807814:	1009883a 	mov	r4,r2
  807818:	d0a04217 	ldw	r2,-32504(gp)
  80781c:	10800d43 	ldbu	r2,53(r2)
  807820:	0084303a 	nor	r2,zero,r2
  807824:	2084703a 	and	r2,r4,r2
  807828:	1009883a 	mov	r4,r2
  80782c:	d0a03f44 	addi	r2,gp,-32515
  807830:	1885883a 	add	r2,r3,r2
  807834:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  807838:	e0fffd03 	ldbu	r3,-12(fp)
  80783c:	d0a03f44 	addi	r2,gp,-32515
  807840:	1885883a 	add	r2,r3,r2
  807844:	10800003 	ldbu	r2,0(r2)
  807848:	10803fcc 	andi	r2,r2,255
  80784c:	1000071e 	bne	r2,zero,80786c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  807850:	d0a04217 	ldw	r2,-32504(gp)
  807854:	10800d83 	ldbu	r2,54(r2)
  807858:	0084303a 	nor	r2,zero,r2
  80785c:	1007883a 	mov	r3,r2
  807860:	d0a03f03 	ldbu	r2,-32516(gp)
  807864:	1884703a 	and	r2,r3,r2
  807868:	d0a03f05 	stb	r2,-32516(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80786c:	d0a04217 	ldw	r2,-32504(gp)
  807870:	e0ffff0b 	ldhu	r3,-4(fp)
  807874:	10c00b8d 	sth	r3,46(r2)
  807878:	e0bffb17 	ldw	r2,-20(fp)
  80787c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807880:	e0bffc17 	ldw	r2,-16(fp)
  807884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  807888:	0801dfc0 	call	801dfc <OS_Sched>
  80788c:	00000106 	br	807894 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  807890:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  807894:	e037883a 	mov	sp,fp
  807898:	dfc00117 	ldw	ra,4(sp)
  80789c:	df000017 	ldw	fp,0(sp)
  8078a0:	dec00204 	addi	sp,sp,8
  8078a4:	f800283a 	ret

008078a8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  8078a8:	defff704 	addi	sp,sp,-36
  8078ac:	dfc00815 	stw	ra,32(sp)
  8078b0:	df000715 	stw	fp,28(sp)
  8078b4:	dc000615 	stw	r16,24(sp)
  8078b8:	df000704 	addi	fp,sp,28
  8078bc:	2011883a 	mov	r8,r4
  8078c0:	2809883a 	mov	r4,r5
  8078c4:	3007883a 	mov	r3,r6
  8078c8:	3805883a 	mov	r2,r7
  8078cc:	e23ffb05 	stb	r8,-20(fp)
  8078d0:	e13ffc05 	stb	r4,-16(fp)
  8078d4:	e0fffd05 	stb	r3,-12(fp)
  8078d8:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8078dc:	d0a04103 	ldbu	r2,-32508(gp)
  8078e0:	10803fcc 	andi	r2,r2,255
  8078e4:	10000226 	beq	r2,zero,8078f0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  8078e8:	00801544 	movi	r2,85
  8078ec:	00004706 	br	807a0c <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  8078f0:	e0bffb03 	ldbu	r2,-20(fp)
  8078f4:	1000081e 	bne	r2,zero,807918 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  8078f8:	e0bffc03 	ldbu	r2,-16(fp)
  8078fc:	1000061e 	bne	r2,zero,807918 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  807900:	e0bffd03 	ldbu	r2,-12(fp)
  807904:	1000041e 	bne	r2,zero,807918 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  807908:	e0bffe0b 	ldhu	r2,-8(fp)
  80790c:	1000021e 	bne	r2,zero,807918 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  807910:	00801504 	movi	r2,84
  807914:	00003d06 	br	807a0c <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  807918:	e0bffc03 	ldbu	r2,-16(fp)
  80791c:	10800f30 	cmpltui	r2,r2,60
  807920:	1000021e 	bne	r2,zero,80792c <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  807924:	00801444 	movi	r2,81
  807928:	00003806 	br	807a0c <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  80792c:	e0bffd03 	ldbu	r2,-12(fp)
  807930:	10800f30 	cmpltui	r2,r2,60
  807934:	1000021e 	bne	r2,zero,807940 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  807938:	00801484 	movi	r2,82
  80793c:	00003306 	br	807a0c <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  807940:	e0bffe0b 	ldhu	r2,-8(fp)
  807944:	1080fa30 	cmpltui	r2,r2,1000
  807948:	1000021e 	bne	r2,zero,807954 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  80794c:	008014c4 	movi	r2,83
  807950:	00002e06 	br	807a0c <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  807954:	e0bffb03 	ldbu	r2,-20(fp)
  807958:	01438404 	movi	r5,3600
  80795c:	1009883a 	mov	r4,r2
  807960:	080c6ac0 	call	80c6ac <__mulsi3>
  807964:	1021883a 	mov	r16,r2
  807968:	e0bffc03 	ldbu	r2,-16(fp)
  80796c:	01400f04 	movi	r5,60
  807970:	1009883a 	mov	r4,r2
  807974:	080c6ac0 	call	80c6ac <__mulsi3>
  807978:	8087883a 	add	r3,r16,r2
  80797c:	e0bffd03 	ldbu	r2,-12(fp)
  807980:	1885883a 	add	r2,r3,r2
  807984:	0140fa04 	movi	r5,1000
  807988:	1009883a 	mov	r4,r2
  80798c:	080c6ac0 	call	80c6ac <__mulsi3>
  807990:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  807994:	e0bffe0b 	ldhu	r2,-8(fp)
  807998:	0140fa04 	movi	r5,1000
  80799c:	1009883a 	mov	r4,r2
  8079a0:	080c6ac0 	call	80c6ac <__mulsi3>
  8079a4:	0140fa04 	movi	r5,1000
  8079a8:	1009883a 	mov	r4,r2
  8079ac:	080c5f00 	call	80c5f0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  8079b0:	8085883a 	add	r2,r16,r2
  8079b4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  8079b8:	e0bffa17 	ldw	r2,-24(fp)
  8079bc:	1004d43a 	srli	r2,r2,16
  8079c0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  8079c4:	e0bffa17 	ldw	r2,-24(fp)
  8079c8:	10bfffcc 	andi	r2,r2,65535
  8079cc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  8079d0:	e0bffa17 	ldw	r2,-24(fp)
  8079d4:	10bfffcc 	andi	r2,r2,65535
  8079d8:	1009883a 	mov	r4,r2
  8079dc:	08077a40 	call	8077a4 <OSTimeDly>
    while (loops > 0) {
  8079e0:	00000706 	br	807a00 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  8079e4:	01200014 	movui	r4,32768
  8079e8:	08077a40 	call	8077a4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8079ec:	01200014 	movui	r4,32768
  8079f0:	08077a40 	call	8077a4 <OSTimeDly>
        loops--;
  8079f4:	e0bff90b 	ldhu	r2,-28(fp)
  8079f8:	10bfffc4 	addi	r2,r2,-1
  8079fc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  807a00:	e0bff90b 	ldhu	r2,-28(fp)
  807a04:	103ff71e 	bne	r2,zero,8079e4 <__alt_mem_epcs_flash_controller_0+0xff7fe9e4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  807a08:	0005883a 	mov	r2,zero
}
  807a0c:	e6ffff04 	addi	sp,fp,-4
  807a10:	dfc00217 	ldw	ra,8(sp)
  807a14:	df000117 	ldw	fp,4(sp)
  807a18:	dc000017 	ldw	r16,0(sp)
  807a1c:	dec00304 	addi	sp,sp,12
  807a20:	f800283a 	ret

00807a24 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  807a24:	defff504 	addi	sp,sp,-44
  807a28:	dfc00a15 	stw	ra,40(sp)
  807a2c:	df000915 	stw	fp,36(sp)
  807a30:	df000904 	addi	fp,sp,36
  807a34:	2005883a 	mov	r2,r4
  807a38:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  807a3c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  807a40:	e0bfff03 	ldbu	r2,-4(fp)
  807a44:	10800530 	cmpltui	r2,r2,20
  807a48:	1000021e 	bne	r2,zero,807a54 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  807a4c:	00800a84 	movi	r2,42
  807a50:	00006406 	br	807be4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807a54:	0005303a 	rdctl	r2,status
  807a58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807a5c:	e0fffe17 	ldw	r3,-8(fp)
  807a60:	00bfff84 	movi	r2,-2
  807a64:	1884703a 	and	r2,r3,r2
  807a68:	1001703a 	wrctl	status,r2
  
  return context;
  807a6c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  807a70:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  807a74:	e0ffff03 	ldbu	r3,-4(fp)
  807a78:	00802074 	movhi	r2,129
  807a7c:	10951304 	addi	r2,r2,21580
  807a80:	18c7883a 	add	r3,r3,r3
  807a84:	18c7883a 	add	r3,r3,r3
  807a88:	10c5883a 	add	r2,r2,r3
  807a8c:	10800017 	ldw	r2,0(r2)
  807a90:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  807a94:	e0bff917 	ldw	r2,-28(fp)
  807a98:	1000061e 	bne	r2,zero,807ab4 <OSTimeDlyResume+0x90>
  807a9c:	e0bff717 	ldw	r2,-36(fp)
  807aa0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807aa4:	e0bff817 	ldw	r2,-32(fp)
  807aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  807aac:	008010c4 	movi	r2,67
  807ab0:	00004c06 	br	807be4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  807ab4:	e0bff917 	ldw	r2,-28(fp)
  807ab8:	10800058 	cmpnei	r2,r2,1
  807abc:	1000061e 	bne	r2,zero,807ad8 <OSTimeDlyResume+0xb4>
  807ac0:	e0bff717 	ldw	r2,-36(fp)
  807ac4:	e0bffa15 	stw	r2,-24(fp)
  807ac8:	e0bffa17 	ldw	r2,-24(fp)
  807acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  807ad0:	008010c4 	movi	r2,67
  807ad4:	00004306 	br	807be4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  807ad8:	e0bff917 	ldw	r2,-28(fp)
  807adc:	10800b8b 	ldhu	r2,46(r2)
  807ae0:	10bfffcc 	andi	r2,r2,65535
  807ae4:	1000061e 	bne	r2,zero,807b00 <OSTimeDlyResume+0xdc>
  807ae8:	e0bff717 	ldw	r2,-36(fp)
  807aec:	e0bffb15 	stw	r2,-20(fp)
  807af0:	e0bffb17 	ldw	r2,-20(fp)
  807af4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  807af8:	00801404 	movi	r2,80
  807afc:	00003906 	br	807be4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  807b00:	e0bff917 	ldw	r2,-28(fp)
  807b04:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  807b08:	e0bff917 	ldw	r2,-28(fp)
  807b0c:	10800c03 	ldbu	r2,48(r2)
  807b10:	10803fcc 	andi	r2,r2,255
  807b14:	10800dcc 	andi	r2,r2,55
  807b18:	10000b26 	beq	r2,zero,807b48 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  807b1c:	e0bff917 	ldw	r2,-28(fp)
  807b20:	10c00c03 	ldbu	r3,48(r2)
  807b24:	00bff204 	movi	r2,-56
  807b28:	1884703a 	and	r2,r3,r2
  807b2c:	1007883a 	mov	r3,r2
  807b30:	e0bff917 	ldw	r2,-28(fp)
  807b34:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  807b38:	e0bff917 	ldw	r2,-28(fp)
  807b3c:	00c00044 	movi	r3,1
  807b40:	10c00c45 	stb	r3,49(r2)
  807b44:	00000206 	br	807b50 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  807b48:	e0bff917 	ldw	r2,-28(fp)
  807b4c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  807b50:	e0bff917 	ldw	r2,-28(fp)
  807b54:	10800c03 	ldbu	r2,48(r2)
  807b58:	10803fcc 	andi	r2,r2,255
  807b5c:	1080020c 	andi	r2,r2,8
  807b60:	10001b1e 	bne	r2,zero,807bd0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  807b64:	e0bff917 	ldw	r2,-28(fp)
  807b68:	10c00d83 	ldbu	r3,54(r2)
  807b6c:	d0a03f03 	ldbu	r2,-32516(gp)
  807b70:	1884b03a 	or	r2,r3,r2
  807b74:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  807b78:	e0bff917 	ldw	r2,-28(fp)
  807b7c:	10800d03 	ldbu	r2,52(r2)
  807b80:	10c03fcc 	andi	r3,r2,255
  807b84:	e0bff917 	ldw	r2,-28(fp)
  807b88:	10800d03 	ldbu	r2,52(r2)
  807b8c:	11003fcc 	andi	r4,r2,255
  807b90:	d0a03f44 	addi	r2,gp,-32515
  807b94:	2085883a 	add	r2,r4,r2
  807b98:	11000003 	ldbu	r4,0(r2)
  807b9c:	e0bff917 	ldw	r2,-28(fp)
  807ba0:	10800d43 	ldbu	r2,53(r2)
  807ba4:	2084b03a 	or	r2,r4,r2
  807ba8:	1009883a 	mov	r4,r2
  807bac:	d0a03f44 	addi	r2,gp,-32515
  807bb0:	1885883a 	add	r2,r3,r2
  807bb4:	11000005 	stb	r4,0(r2)
  807bb8:	e0bff717 	ldw	r2,-36(fp)
  807bbc:	e0bffc15 	stw	r2,-16(fp)
  807bc0:	e0bffc17 	ldw	r2,-16(fp)
  807bc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  807bc8:	0801dfc0 	call	801dfc <OS_Sched>
  807bcc:	00000406 	br	807be0 <OSTimeDlyResume+0x1bc>
  807bd0:	e0bff717 	ldw	r2,-36(fp)
  807bd4:	e0bffd15 	stw	r2,-12(fp)
  807bd8:	e0bffd17 	ldw	r2,-12(fp)
  807bdc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  807be0:	0005883a 	mov	r2,zero
}
  807be4:	e037883a 	mov	sp,fp
  807be8:	dfc00117 	ldw	ra,4(sp)
  807bec:	df000017 	ldw	fp,0(sp)
  807bf0:	dec00204 	addi	sp,sp,8
  807bf4:	f800283a 	ret

00807bf8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  807bf8:	defffb04 	addi	sp,sp,-20
  807bfc:	df000415 	stw	fp,16(sp)
  807c00:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c04:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c08:	0005303a 	rdctl	r2,status
  807c0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c10:	e0fffe17 	ldw	r3,-8(fp)
  807c14:	00bfff84 	movi	r2,-2
  807c18:	1884703a 	and	r2,r3,r2
  807c1c:	1001703a 	wrctl	status,r2
  
  return context;
  807c20:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  807c24:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  807c28:	d0a04317 	ldw	r2,-32500(gp)
  807c2c:	e0bffd15 	stw	r2,-12(fp)
  807c30:	e0bffc17 	ldw	r2,-16(fp)
  807c34:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c38:	e0bfff17 	ldw	r2,-4(fp)
  807c3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  807c40:	e0bffd17 	ldw	r2,-12(fp)
}
  807c44:	e037883a 	mov	sp,fp
  807c48:	df000017 	ldw	fp,0(sp)
  807c4c:	dec00104 	addi	sp,sp,4
  807c50:	f800283a 	ret

00807c54 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  807c54:	defffb04 	addi	sp,sp,-20
  807c58:	df000415 	stw	fp,16(sp)
  807c5c:	df000404 	addi	fp,sp,16
  807c60:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c64:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c68:	0005303a 	rdctl	r2,status
  807c6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c70:	e0fffd17 	ldw	r3,-12(fp)
  807c74:	00bfff84 	movi	r2,-2
  807c78:	1884703a 	and	r2,r3,r2
  807c7c:	1001703a 	wrctl	status,r2
  
  return context;
  807c80:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  807c84:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  807c88:	e0bfff17 	ldw	r2,-4(fp)
  807c8c:	d0a04315 	stw	r2,-32500(gp)
  807c90:	e0bffc17 	ldw	r2,-16(fp)
  807c94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c98:	e0bffe17 	ldw	r2,-8(fp)
  807c9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  807ca0:	0001883a 	nop
  807ca4:	e037883a 	mov	sp,fp
  807ca8:	df000017 	ldw	fp,0(sp)
  807cac:	dec00104 	addi	sp,sp,4
  807cb0:	f800283a 	ret

00807cb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  807cb4:	defffd04 	addi	sp,sp,-12
  807cb8:	dfc00215 	stw	ra,8(sp)
  807cbc:	df000115 	stw	fp,4(sp)
  807cc0:	df000104 	addi	fp,sp,4
  807cc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807cc8:	d1602104 	addi	r5,gp,-32636
  807ccc:	e13fff17 	ldw	r4,-4(fp)
  807cd0:	080ab240 	call	80ab24 <alt_dev_llist_insert>
}
  807cd4:	e037883a 	mov	sp,fp
  807cd8:	dfc00117 	ldw	ra,4(sp)
  807cdc:	df000017 	ldw	fp,0(sp)
  807ce0:	dec00204 	addi	sp,sp,8
  807ce4:	f800283a 	ret

00807ce8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  807ce8:	defffd04 	addi	sp,sp,-12
  807cec:	dfc00215 	stw	ra,8(sp)
  807cf0:	df000115 	stw	fp,4(sp)
  807cf4:	df000104 	addi	fp,sp,4
  807cf8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  807cfc:	080b5f00 	call	80b5f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807d00:	00800044 	movi	r2,1
  807d04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  807d08:	0001883a 	nop
  807d0c:	e037883a 	mov	sp,fp
  807d10:	dfc00117 	ldw	ra,4(sp)
  807d14:	df000017 	ldw	fp,0(sp)
  807d18:	dec00204 	addi	sp,sp,8
  807d1c:	f800283a 	ret

00807d20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807d20:	defffe04 	addi	sp,sp,-8
  807d24:	dfc00115 	stw	ra,4(sp)
  807d28:	df000015 	stw	fp,0(sp)
  807d2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  807d30:	01c0fa04 	movi	r7,1000
  807d34:	01800144 	movi	r6,5
  807d38:	000b883a 	mov	r5,zero
  807d3c:	01004074 	movhi	r4,257
  807d40:	21280004 	addi	r4,r4,-24576
  807d44:	08096700 	call	809670 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  807d48:	01002074 	movhi	r4,129
  807d4c:	21322904 	addi	r4,r4,-14172
  807d50:	0807e040 	call	807e04 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  807d54:	000d883a 	mov	r6,zero
  807d58:	000b883a 	mov	r5,zero
  807d5c:	01002074 	movhi	r4,129
  807d60:	21326604 	addi	r4,r4,-13928
  807d64:	0808a300 	call	808a30 <altera_avalon_jtag_uart_init>
  807d68:	01002074 	movhi	r4,129
  807d6c:	21325c04 	addi	r4,r4,-13968
  807d70:	0807cb40 	call	807cb4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  807d74:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( CAM_UART, cam_uart);
  807d78:	01800044 	movi	r6,1
  807d7c:	000b883a 	mov	r5,zero
  807d80:	01002074 	movhi	r4,129
  807d84:	21368104 	addi	r4,r4,-9724
  807d88:	08097fc0 	call	8097fc <altera_avalon_uart_init>
  807d8c:	01002074 	movhi	r4,129
  807d90:	21367704 	addi	r4,r4,-9764
  807d94:	0807cb40 	call	807cb4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  807d98:	01800084 	movi	r6,2
  807d9c:	000b883a 	mov	r5,zero
  807da0:	01002074 	movhi	r4,129
  807da4:	2136b504 	addi	r4,r4,-9516
  807da8:	08097fc0 	call	8097fc <altera_avalon_uart_init>
  807dac:	01002074 	movhi	r4,129
  807db0:	2136ab04 	addi	r4,r4,-9556
  807db4:	0807cb40 	call	807cb4 <alt_dev_reg>
}
  807db8:	0001883a 	nop
  807dbc:	e037883a 	mov	sp,fp
  807dc0:	dfc00117 	ldw	ra,4(sp)
  807dc4:	df000017 	ldw	fp,0(sp)
  807dc8:	dec00204 	addi	sp,sp,8
  807dcc:	f800283a 	ret

00807dd0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  807dd0:	defffd04 	addi	sp,sp,-12
  807dd4:	dfc00215 	stw	ra,8(sp)
  807dd8:	df000115 	stw	fp,4(sp)
  807ddc:	df000104 	addi	fp,sp,4
  807de0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  807de4:	d1602504 	addi	r5,gp,-32620
  807de8:	e13fff17 	ldw	r4,-4(fp)
  807dec:	080ab240 	call	80ab24 <alt_dev_llist_insert>
}
  807df0:	e037883a 	mov	sp,fp
  807df4:	dfc00117 	ldw	ra,4(sp)
  807df8:	df000017 	ldw	fp,0(sp)
  807dfc:	dec00204 	addi	sp,sp,8
  807e00:	f800283a 	ret

00807e04 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  807e04:	defffc04 	addi	sp,sp,-16
  807e08:	dfc00315 	stw	ra,12(sp)
  807e0c:	df000215 	stw	fp,8(sp)
  807e10:	df000204 	addi	fp,sp,8
  807e14:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  807e18:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  807e1c:	e13fff17 	ldw	r4,-4(fp)
  807e20:	0807e580 	call	807e58 <alt_epcs_flash_query>
  807e24:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  807e28:	e0bffe17 	ldw	r2,-8(fp)
  807e2c:	1000041e 	bne	r2,zero,807e40 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  807e30:	e0bfff17 	ldw	r2,-4(fp)
  807e34:	1009883a 	mov	r4,r2
  807e38:	0807dd00 	call	807dd0 <alt_flash_device_register>
  807e3c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  807e40:	e0bffe17 	ldw	r2,-8(fp)
}
  807e44:	e037883a 	mov	sp,fp
  807e48:	dfc00117 	ldw	ra,4(sp)
  807e4c:	df000017 	ldw	fp,0(sp)
  807e50:	dec00204 	addi	sp,sp,8
  807e54:	f800283a 	ret

00807e58 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  807e58:	defffc04 	addi	sp,sp,-16
  807e5c:	dfc00315 	stw	ra,12(sp)
  807e60:	df000215 	stw	fp,8(sp)
  807e64:	df000204 	addi	fp,sp,8
  807e68:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  807e6c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  807e70:	e0bfff17 	ldw	r2,-4(fp)
  807e74:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  807e78:	e0bfff17 	ldw	r2,-4(fp)
  807e7c:	10802e17 	ldw	r2,184(r2)
  807e80:	1009883a 	mov	r4,r2
  807e84:	080a6dc0 	call	80a6dc <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  807e88:	10c03fcc 	andi	r3,r2,255
  807e8c:	e0bfff17 	ldw	r2,-4(fp)
  807e90:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  807e94:	e0bfff17 	ldw	r2,-4(fp)
  807e98:	10803017 	ldw	r2,192(r2)
  807e9c:	10800598 	cmpnei	r2,r2,22
  807ea0:	10000a1e 	bne	r2,zero,807ecc <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  807ea4:	e0bfff17 	ldw	r2,-4(fp)
  807ea8:	00c02034 	movhi	r3,128
  807eac:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  807eb0:	e0bfff17 	ldw	r2,-4(fp)
  807eb4:	00c02004 	movi	r3,128
  807eb8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807ebc:	e0bfff17 	ldw	r2,-4(fp)
  807ec0:	00c00074 	movhi	r3,1
  807ec4:	10c01015 	stw	r3,64(r2)
  807ec8:	0000ce06 	br	808204 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  807ecc:	e0bfff17 	ldw	r2,-4(fp)
  807ed0:	10803017 	ldw	r2,192(r2)
  807ed4:	10800518 	cmpnei	r2,r2,20
  807ed8:	10000a1e 	bne	r2,zero,807f04 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  807edc:	e0bfff17 	ldw	r2,-4(fp)
  807ee0:	00c00834 	movhi	r3,32
  807ee4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  807ee8:	e0bfff17 	ldw	r2,-4(fp)
  807eec:	00c00804 	movi	r3,32
  807ef0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807ef4:	e0bfff17 	ldw	r2,-4(fp)
  807ef8:	00c00074 	movhi	r3,1
  807efc:	10c01015 	stw	r3,64(r2)
  807f00:	0000c006 	br	808204 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  807f04:	e0bfff17 	ldw	r2,-4(fp)
  807f08:	10803017 	ldw	r2,192(r2)
  807f0c:	108004d8 	cmpnei	r2,r2,19
  807f10:	10000a1e 	bne	r2,zero,807f3c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  807f14:	e0bfff17 	ldw	r2,-4(fp)
  807f18:	00c00434 	movhi	r3,16
  807f1c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  807f20:	e0bfff17 	ldw	r2,-4(fp)
  807f24:	00c00404 	movi	r3,16
  807f28:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807f2c:	e0bfff17 	ldw	r2,-4(fp)
  807f30:	00c00074 	movhi	r3,1
  807f34:	10c01015 	stw	r3,64(r2)
  807f38:	0000b206 	br	808204 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  807f3c:	e0bfff17 	ldw	r2,-4(fp)
  807f40:	10803017 	ldw	r2,192(r2)
  807f44:	10800498 	cmpnei	r2,r2,18
  807f48:	10000a1e 	bne	r2,zero,807f74 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  807f4c:	e0bfff17 	ldw	r2,-4(fp)
  807f50:	00c00234 	movhi	r3,8
  807f54:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  807f58:	e0bfff17 	ldw	r2,-4(fp)
  807f5c:	00c00204 	movi	r3,8
  807f60:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807f64:	e0bfff17 	ldw	r2,-4(fp)
  807f68:	00c00074 	movhi	r3,1
  807f6c:	10c01015 	stw	r3,64(r2)
  807f70:	0000a406 	br	808204 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  807f74:	e0bfff17 	ldw	r2,-4(fp)
  807f78:	10803017 	ldw	r2,192(r2)
  807f7c:	10800418 	cmpnei	r2,r2,16
  807f80:	10000a1e 	bne	r2,zero,807fac <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  807f84:	e0bfff17 	ldw	r2,-4(fp)
  807f88:	00c000b4 	movhi	r3,2
  807f8c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  807f90:	e0bfff17 	ldw	r2,-4(fp)
  807f94:	00c00104 	movi	r3,4
  807f98:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  807f9c:	e0bfff17 	ldw	r2,-4(fp)
  807fa0:	00e00014 	movui	r3,32768
  807fa4:	10c01015 	stw	r3,64(r2)
  807fa8:	00009606 	br	808204 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  807fac:	e0bfff17 	ldw	r2,-4(fp)
  807fb0:	10802e17 	ldw	r2,184(r2)
  807fb4:	1009883a 	mov	r4,r2
  807fb8:	080a7440 	call	80a744 <epcs_read_device_id>
  807fbc:	1007883a 	mov	r3,r2
  807fc0:	e0bfff17 	ldw	r2,-4(fp)
  807fc4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  807fc8:	e0bfff17 	ldw	r2,-4(fp)
  807fcc:	10c03017 	ldw	r3,192(r2)
  807fd0:	00804034 	movhi	r2,256
  807fd4:	10bfffc4 	addi	r2,r2,-1
  807fd8:	1886703a 	and	r3,r3,r2
  807fdc:	00800874 	movhi	r2,33
  807fe0:	10ae8544 	addi	r2,r2,-17899
  807fe4:	18800a1e 	bne	r3,r2,808010 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  807fe8:	e0bfff17 	ldw	r2,-4(fp)
  807fec:	00c00834 	movhi	r3,32
  807ff0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  807ff4:	e0bfff17 	ldw	r2,-4(fp)
  807ff8:	00c00804 	movi	r3,32
  807ffc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808000:	e0bfff17 	ldw	r2,-4(fp)
  808004:	00c00074 	movhi	r3,1
  808008:	10c01015 	stw	r3,64(r2)
  80800c:	00007d06 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  808010:	e0bfff17 	ldw	r2,-4(fp)
  808014:	10c03017 	ldw	r3,192(r2)
  808018:	00804034 	movhi	r2,256
  80801c:	10bfffc4 	addi	r2,r2,-1
  808020:	1886703a 	and	r3,r3,r2
  808024:	00800874 	movhi	r2,33
  808028:	10ae8584 	addi	r2,r2,-17898
  80802c:	18800a1e 	bne	r3,r2,808058 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  808030:	e0bfff17 	ldw	r2,-4(fp)
  808034:	00c01034 	movhi	r3,64
  808038:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  80803c:	e0bfff17 	ldw	r2,-4(fp)
  808040:	00c01004 	movi	r3,64
  808044:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808048:	e0bfff17 	ldw	r2,-4(fp)
  80804c:	00c00074 	movhi	r3,1
  808050:	10c01015 	stw	r3,64(r2)
  808054:	00006b06 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  808058:	e0bfff17 	ldw	r2,-4(fp)
  80805c:	10c03017 	ldw	r3,192(r2)
  808060:	00804034 	movhi	r2,256
  808064:	10bfffc4 	addi	r2,r2,-1
  808068:	1886703a 	and	r3,r3,r2
  80806c:	00800874 	movhi	r2,33
  808070:	10ae85c4 	addi	r2,r2,-17897
  808074:	18800a1e 	bne	r3,r2,8080a0 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  808078:	e0bfff17 	ldw	r2,-4(fp)
  80807c:	00c02034 	movhi	r3,128
  808080:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  808084:	e0bfff17 	ldw	r2,-4(fp)
  808088:	00c02004 	movi	r3,128
  80808c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808090:	e0bfff17 	ldw	r2,-4(fp)
  808094:	00c00074 	movhi	r3,1
  808098:	10c01015 	stw	r3,64(r2)
  80809c:	00005906 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  8080a0:	e0bfff17 	ldw	r2,-4(fp)
  8080a4:	10c03017 	ldw	r3,192(r2)
  8080a8:	00804034 	movhi	r2,256
  8080ac:	10bfffc4 	addi	r2,r2,-1
  8080b0:	1886703a 	and	r3,r3,r2
  8080b4:	00800874 	movhi	r2,33
  8080b8:	10ae8604 	addi	r2,r2,-17896
  8080bc:	18800a1e 	bne	r3,r2,8080e8 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  8080c0:	e0bfff17 	ldw	r2,-4(fp)
  8080c4:	00c04034 	movhi	r3,256
  8080c8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  8080cc:	e0bfff17 	ldw	r2,-4(fp)
  8080d0:	00c04004 	movi	r3,256
  8080d4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8080d8:	e0bfff17 	ldw	r2,-4(fp)
  8080dc:	00c00074 	movhi	r3,1
  8080e0:	10c01015 	stw	r3,64(r2)
  8080e4:	00004706 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  8080e8:	e0bfff17 	ldw	r2,-4(fp)
  8080ec:	10803017 	ldw	r2,192(r2)
  8080f0:	10803fcc 	andi	r2,r2,255
  8080f4:	10800618 	cmpnei	r2,r2,24
  8080f8:	10000a1e 	bne	r2,zero,808124 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  8080fc:	e0bfff17 	ldw	r2,-4(fp)
  808100:	00c04034 	movhi	r3,256
  808104:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  808108:	e0bfff17 	ldw	r2,-4(fp)
  80810c:	00c01004 	movi	r3,64
  808110:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  808114:	e0bfff17 	ldw	r2,-4(fp)
  808118:	00c00134 	movhi	r3,4
  80811c:	10c01015 	stw	r3,64(r2)
  808120:	00003806 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  808124:	e0bfff17 	ldw	r2,-4(fp)
  808128:	10803017 	ldw	r2,192(r2)
  80812c:	10803fcc 	andi	r2,r2,255
  808130:	10800658 	cmpnei	r2,r2,25
  808134:	10000d1e 	bne	r2,zero,80816c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  808138:	e0bfff17 	ldw	r2,-4(fp)
  80813c:	00c08034 	movhi	r3,512
  808140:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  808144:	e0bfff17 	ldw	r2,-4(fp)
  808148:	00c08004 	movi	r3,512
  80814c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808150:	e0bfff17 	ldw	r2,-4(fp)
  808154:	00c00074 	movhi	r3,1
  808158:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  80815c:	e0bfff17 	ldw	r2,-4(fp)
  808160:	00c00044 	movi	r3,1
  808164:	10c03215 	stw	r3,200(r2)
  808168:	00002606 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  80816c:	e0bfff17 	ldw	r2,-4(fp)
  808170:	10803017 	ldw	r2,192(r2)
  808174:	10803fcc 	andi	r2,r2,255
  808178:	10800818 	cmpnei	r2,r2,32
  80817c:	10000d1e 	bne	r2,zero,8081b4 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  808180:	e0bfff17 	ldw	r2,-4(fp)
  808184:	00c10034 	movhi	r3,1024
  808188:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  80818c:	e0bfff17 	ldw	r2,-4(fp)
  808190:	00c10004 	movi	r3,1024
  808194:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808198:	e0bfff17 	ldw	r2,-4(fp)
  80819c:	00c00074 	movhi	r3,1
  8081a0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  8081a4:	e0bfff17 	ldw	r2,-4(fp)
  8081a8:	00c00044 	movi	r3,1
  8081ac:	10c03215 	stw	r3,200(r2)
  8081b0:	00001406 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  8081b4:	e0bfff17 	ldw	r2,-4(fp)
  8081b8:	10803017 	ldw	r2,192(r2)
  8081bc:	10803fcc 	andi	r2,r2,255
  8081c0:	10800858 	cmpnei	r2,r2,33
  8081c4:	10000d1e 	bne	r2,zero,8081fc <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  8081c8:	e0bfff17 	ldw	r2,-4(fp)
  8081cc:	00c20034 	movhi	r3,2048
  8081d0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  8081d4:	e0bfff17 	ldw	r2,-4(fp)
  8081d8:	00c20004 	movi	r3,2048
  8081dc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8081e0:	e0bfff17 	ldw	r2,-4(fp)
  8081e4:	00c00074 	movhi	r3,1
  8081e8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  8081ec:	e0bfff17 	ldw	r2,-4(fp)
  8081f0:	00c00044 	movi	r3,1
  8081f4:	10c03215 	stw	r3,200(r2)
  8081f8:	00000206 	br	808204 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  8081fc:	00bffb44 	movi	r2,-19
  808200:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  808204:	e0bfff17 	ldw	r2,-4(fp)
  808208:	10800e17 	ldw	r2,56(r2)
  80820c:	1007883a 	mov	r3,r2
  808210:	e0bfff17 	ldw	r2,-4(fp)
  808214:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  808218:	e0bfff17 	ldw	r2,-4(fp)
  80821c:	00c00044 	movi	r3,1
  808220:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  808224:	e0bfff17 	ldw	r2,-4(fp)
  808228:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  80822c:	e0bfff17 	ldw	r2,-4(fp)
  808230:	00c04004 	movi	r3,256
  808234:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  808238:	e0bffe17 	ldw	r2,-8(fp)
}
  80823c:	e037883a 	mov	sp,fp
  808240:	dfc00117 	ldw	ra,4(sp)
  808244:	df000017 	ldw	fp,0(sp)
  808248:	dec00204 	addi	sp,sp,8
  80824c:	f800283a 	ret

00808250 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  808250:	deffee04 	addi	sp,sp,-72
  808254:	dfc01115 	stw	ra,68(sp)
  808258:	df001015 	stw	fp,64(sp)
  80825c:	df001004 	addi	fp,sp,64
  808260:	e13ffc15 	stw	r4,-16(fp)
  808264:	e17ffd15 	stw	r5,-12(fp)
  808268:	e1bffe15 	stw	r6,-8(fp)
  80826c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  808270:	00800804 	movi	r2,32
  808274:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  808278:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  80827c:	00002706 	br	80831c <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  808280:	e0fff117 	ldw	r3,-60(fp)
  808284:	e0bfff17 	ldw	r2,-4(fp)
  808288:	1880012e 	bgeu	r3,r2,808290 <alt_epcs_flash_memcmp+0x40>
  80828c:	1805883a 	mov	r2,r3
  808290:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  808294:	e0fffe17 	ldw	r3,-8(fp)
  808298:	e0bff017 	ldw	r2,-64(fp)
  80829c:	1885883a 	add	r2,r3,r2
  8082a0:	e0fff404 	addi	r3,fp,-48
  8082a4:	e1fff217 	ldw	r7,-56(fp)
  8082a8:	180d883a 	mov	r6,r3
  8082ac:	100b883a 	mov	r5,r2
  8082b0:	e13ffc17 	ldw	r4,-16(fp)
  8082b4:	08088340 	call	808834 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  8082b8:	1000020e 	bge	r2,zero,8082c4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  8082bc:	00bfffc4 	movi	r2,-1
  8082c0:	00001906 	br	808328 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  8082c4:	e0bff017 	ldw	r2,-64(fp)
  8082c8:	e0fffd17 	ldw	r3,-12(fp)
  8082cc:	1885883a 	add	r2,r3,r2
  8082d0:	e13ff217 	ldw	r4,-56(fp)
  8082d4:	e0fff404 	addi	r3,fp,-48
  8082d8:	200d883a 	mov	r6,r4
  8082dc:	180b883a 	mov	r5,r3
  8082e0:	1009883a 	mov	r4,r2
  8082e4:	080bedc0 	call	80bedc <memcmp>
  8082e8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  8082ec:	e0bff317 	ldw	r2,-52(fp)
  8082f0:	10000226 	beq	r2,zero,8082fc <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  8082f4:	e0bff317 	ldw	r2,-52(fp)
  8082f8:	00000b06 	br	808328 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  8082fc:	e0bff217 	ldw	r2,-56(fp)
  808300:	e0ffff17 	ldw	r3,-4(fp)
  808304:	1885c83a 	sub	r2,r3,r2
  808308:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  80830c:	e0fff017 	ldw	r3,-64(fp)
  808310:	e0bff217 	ldw	r2,-56(fp)
  808314:	1885883a 	add	r2,r3,r2
  808318:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  80831c:	e0bfff17 	ldw	r2,-4(fp)
  808320:	103fd71e 	bne	r2,zero,808280 <__alt_mem_epcs_flash_controller_0+0xff7ff280>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  808324:	0005883a 	mov	r2,zero
}
  808328:	e037883a 	mov	sp,fp
  80832c:	dfc00117 	ldw	ra,4(sp)
  808330:	df000017 	ldw	fp,0(sp)
  808334:	dec00204 	addi	sp,sp,8
  808338:	f800283a 	ret

0080833c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  80833c:	defff404 	addi	sp,sp,-48
  808340:	dfc00b15 	stw	ra,44(sp)
  808344:	df000a15 	stw	fp,40(sp)
  808348:	df000a04 	addi	fp,sp,40
  80834c:	e13ffc15 	stw	r4,-16(fp)
  808350:	e17ffd15 	stw	r5,-12(fp)
  808354:	e1bffe15 	stw	r6,-8(fp)
  808358:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  80835c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  808360:	e03ff815 	stw	zero,-32(fp)
  808364:	00008306 	br	808574 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  808368:	e0fffc17 	ldw	r3,-16(fp)
  80836c:	e0bff817 	ldw	r2,-32(fp)
  808370:	1004913a 	slli	r2,r2,4
  808374:	1885883a 	add	r2,r3,r2
  808378:	10800d04 	addi	r2,r2,52
  80837c:	10800017 	ldw	r2,0(r2)
  808380:	e0fffd17 	ldw	r3,-12(fp)
  808384:	18807816 	blt	r3,r2,808568 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  808388:	e0fffc17 	ldw	r3,-16(fp)
  80838c:	e0bff817 	ldw	r2,-32(fp)
  808390:	1004913a 	slli	r2,r2,4
  808394:	1885883a 	add	r2,r3,r2
  808398:	10800d04 	addi	r2,r2,52
  80839c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  8083a0:	e13ffc17 	ldw	r4,-16(fp)
  8083a4:	e0bff817 	ldw	r2,-32(fp)
  8083a8:	1004913a 	slli	r2,r2,4
  8083ac:	2085883a 	add	r2,r4,r2
  8083b0:	10800e04 	addi	r2,r2,56
  8083b4:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  8083b8:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  8083bc:	e0fffd17 	ldw	r3,-12(fp)
  8083c0:	1880690e 	bge	r3,r2,808568 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  8083c4:	e0fffc17 	ldw	r3,-16(fp)
  8083c8:	e0bff817 	ldw	r2,-32(fp)
  8083cc:	1004913a 	slli	r2,r2,4
  8083d0:	1885883a 	add	r2,r3,r2
  8083d4:	10800d04 	addi	r2,r2,52
  8083d8:	10800017 	ldw	r2,0(r2)
  8083dc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  8083e0:	e03ff915 	stw	zero,-28(fp)
  8083e4:	00005806 	br	808548 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  8083e8:	e0fffd17 	ldw	r3,-12(fp)
  8083ec:	e0bffa17 	ldw	r2,-24(fp)
  8083f0:	18804916 	blt	r3,r2,808518 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  8083f4:	e0fffc17 	ldw	r3,-16(fp)
  8083f8:	e0bff817 	ldw	r2,-32(fp)
  8083fc:	10800104 	addi	r2,r2,4
  808400:	1004913a 	slli	r2,r2,4
  808404:	1885883a 	add	r2,r3,r2
  808408:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  80840c:	e0bffa17 	ldw	r2,-24(fp)
  808410:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  808414:	e0fffd17 	ldw	r3,-12(fp)
  808418:	18803f0e 	bge	r3,r2,808518 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  80841c:	e0fffc17 	ldw	r3,-16(fp)
  808420:	e0bff817 	ldw	r2,-32(fp)
  808424:	10800104 	addi	r2,r2,4
  808428:	1004913a 	slli	r2,r2,4
  80842c:	1885883a 	add	r2,r3,r2
  808430:	10c00017 	ldw	r3,0(r2)
  808434:	e0bffa17 	ldw	r2,-24(fp)
  808438:	1887883a 	add	r3,r3,r2
  80843c:	e0bffd17 	ldw	r2,-12(fp)
  808440:	1885c83a 	sub	r2,r3,r2
  808444:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  808448:	e0fffb17 	ldw	r3,-20(fp)
  80844c:	e0bfff17 	ldw	r2,-4(fp)
  808450:	1880010e 	bge	r3,r2,808458 <alt_epcs_flash_write+0x11c>
  808454:	1805883a 	mov	r2,r3
  808458:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  80845c:	e0bffb17 	ldw	r2,-20(fp)
  808460:	100f883a 	mov	r7,r2
  808464:	e1bffd17 	ldw	r6,-12(fp)
  808468:	e17ffe17 	ldw	r5,-8(fp)
  80846c:	e13ffc17 	ldw	r4,-16(fp)
  808470:	08082500 	call	808250 <alt_epcs_flash_memcmp>
  808474:	10001226 	beq	r2,zero,8084c0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  808478:	e0bffc17 	ldw	r2,-16(fp)
  80847c:	10800817 	ldw	r2,32(r2)
  808480:	e17ffa17 	ldw	r5,-24(fp)
  808484:	e13ffc17 	ldw	r4,-16(fp)
  808488:	103ee83a 	callr	r2
  80848c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  808490:	e0bff717 	ldw	r2,-36(fp)
  808494:	10000a1e 	bne	r2,zero,8084c0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  808498:	e0bffc17 	ldw	r2,-16(fp)
  80849c:	10800917 	ldw	r2,36(r2)
  8084a0:	e0fffb17 	ldw	r3,-20(fp)
  8084a4:	d8c00015 	stw	r3,0(sp)
  8084a8:	e1fffe17 	ldw	r7,-8(fp)
  8084ac:	e1bffd17 	ldw	r6,-12(fp)
  8084b0:	e17ffa17 	ldw	r5,-24(fp)
  8084b4:	e13ffc17 	ldw	r4,-16(fp)
  8084b8:	103ee83a 	callr	r2
  8084bc:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  8084c0:	e0ffff17 	ldw	r3,-4(fp)
  8084c4:	e0bffb17 	ldw	r2,-20(fp)
  8084c8:	18802e26 	beq	r3,r2,808584 <alt_epcs_flash_write+0x248>
  8084cc:	e0bff717 	ldw	r2,-36(fp)
  8084d0:	10002c1e 	bne	r2,zero,808584 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  8084d4:	e0ffff17 	ldw	r3,-4(fp)
  8084d8:	e0bffb17 	ldw	r2,-20(fp)
  8084dc:	1885c83a 	sub	r2,r3,r2
  8084e0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  8084e4:	e0fffc17 	ldw	r3,-16(fp)
  8084e8:	e0bff817 	ldw	r2,-32(fp)
  8084ec:	10800104 	addi	r2,r2,4
  8084f0:	1004913a 	slli	r2,r2,4
  8084f4:	1885883a 	add	r2,r3,r2
  8084f8:	10c00017 	ldw	r3,0(r2)
  8084fc:	e0bffa17 	ldw	r2,-24(fp)
  808500:	1885883a 	add	r2,r3,r2
  808504:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  808508:	e0bffb17 	ldw	r2,-20(fp)
  80850c:	e0fffe17 	ldw	r3,-8(fp)
  808510:	1885883a 	add	r2,r3,r2
  808514:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  808518:	e0fffc17 	ldw	r3,-16(fp)
  80851c:	e0bff817 	ldw	r2,-32(fp)
  808520:	10800104 	addi	r2,r2,4
  808524:	1004913a 	slli	r2,r2,4
  808528:	1885883a 	add	r2,r3,r2
  80852c:	10800017 	ldw	r2,0(r2)
  808530:	e0fffa17 	ldw	r3,-24(fp)
  808534:	1885883a 	add	r2,r3,r2
  808538:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  80853c:	e0bff917 	ldw	r2,-28(fp)
  808540:	10800044 	addi	r2,r2,1
  808544:	e0bff915 	stw	r2,-28(fp)
  808548:	e0fffc17 	ldw	r3,-16(fp)
  80854c:	e0bff817 	ldw	r2,-32(fp)
  808550:	1004913a 	slli	r2,r2,4
  808554:	1885883a 	add	r2,r3,r2
  808558:	10800f04 	addi	r2,r2,60
  80855c:	10800017 	ldw	r2,0(r2)
  808560:	e0fff917 	ldw	r3,-28(fp)
  808564:	18bfa016 	blt	r3,r2,8083e8 <__alt_mem_epcs_flash_controller_0+0xff7ff3e8>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  808568:	e0bff817 	ldw	r2,-32(fp)
  80856c:	10800044 	addi	r2,r2,1
  808570:	e0bff815 	stw	r2,-32(fp)
  808574:	e0bffc17 	ldw	r2,-16(fp)
  808578:	10800c17 	ldw	r2,48(r2)
  80857c:	e0fff817 	ldw	r3,-32(fp)
  808580:	18bf7916 	blt	r3,r2,808368 <__alt_mem_epcs_flash_controller_0+0xff7ff368>
      }
    }
  }

finished:
  return ret_code;
  808584:	e0bff717 	ldw	r2,-36(fp)
}
  808588:	e037883a 	mov	sp,fp
  80858c:	dfc00117 	ldw	ra,4(sp)
  808590:	df000017 	ldw	fp,0(sp)
  808594:	dec00204 	addi	sp,sp,8
  808598:	f800283a 	ret

0080859c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  80859c:	defffa04 	addi	sp,sp,-24
  8085a0:	df000515 	stw	fp,20(sp)
  8085a4:	df000504 	addi	fp,sp,20
  8085a8:	e13ffd15 	stw	r4,-12(fp)
  8085ac:	e17ffe15 	stw	r5,-8(fp)
  8085b0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  8085b4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  8085b8:	e0bffd17 	ldw	r2,-12(fp)
  8085bc:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  8085c0:	e0bffc17 	ldw	r2,-16(fp)
  8085c4:	10c00c17 	ldw	r3,48(r2)
  8085c8:	e0bfff17 	ldw	r2,-4(fp)
  8085cc:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  8085d0:	e0bffc17 	ldw	r2,-16(fp)
  8085d4:	10800c17 	ldw	r2,48(r2)
  8085d8:	1000031e 	bne	r2,zero,8085e8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  8085dc:	00bffec4 	movi	r2,-5
  8085e0:	e0bffb15 	stw	r2,-20(fp)
  8085e4:	00000b06 	br	808614 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  8085e8:	e0bffc17 	ldw	r2,-16(fp)
  8085ec:	10800c17 	ldw	r2,48(r2)
  8085f0:	10800250 	cmplti	r2,r2,9
  8085f4:	1000031e 	bne	r2,zero,808604 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  8085f8:	00bffd04 	movi	r2,-12
  8085fc:	e0bffb15 	stw	r2,-20(fp)
  808600:	00000406 	br	808614 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  808604:	e0bffc17 	ldw	r2,-16(fp)
  808608:	10c00d04 	addi	r3,r2,52
  80860c:	e0bffe17 	ldw	r2,-8(fp)
  808610:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  808614:	e0bffb17 	ldw	r2,-20(fp)
}
  808618:	e037883a 	mov	sp,fp
  80861c:	df000017 	ldw	fp,0(sp)
  808620:	dec00104 	addi	sp,sp,4
  808624:	f800283a 	ret

00808628 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  808628:	defff904 	addi	sp,sp,-28
  80862c:	df000615 	stw	fp,24(sp)
  808630:	df000604 	addi	fp,sp,24
  808634:	e13ffe15 	stw	r4,-8(fp)
  808638:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80863c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  808640:	e0bffe17 	ldw	r2,-8(fp)
  808644:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  808648:	e0bffb17 	ldw	r2,-20(fp)
  80864c:	10800c17 	ldw	r2,48(r2)
  808650:	10bfffc4 	addi	r2,r2,-1
  808654:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  808658:	e0fffb17 	ldw	r3,-20(fp)
  80865c:	e0bffc17 	ldw	r2,-16(fp)
  808660:	1004913a 	slli	r2,r2,4
  808664:	1885883a 	add	r2,r3,r2
  808668:	10800d04 	addi	r2,r2,52
  80866c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  808670:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  808674:	e13ffb17 	ldw	r4,-20(fp)
  808678:	e0bffc17 	ldw	r2,-16(fp)
  80867c:	1004913a 	slli	r2,r2,4
  808680:	2085883a 	add	r2,r4,r2
  808684:	10800e04 	addi	r2,r2,56
  808688:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  80868c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  808690:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  808694:	e0bfff17 	ldw	r2,-4(fp)
  808698:	e0fffd17 	ldw	r3,-12(fp)
  80869c:	1880022e 	bgeu	r3,r2,8086a8 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  8086a0:	00bffec4 	movi	r2,-5
  8086a4:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  8086a8:	e0bffa17 	ldw	r2,-24(fp)
}
  8086ac:	e037883a 	mov	sp,fp
  8086b0:	df000017 	ldw	fp,0(sp)
  8086b4:	dec00104 	addi	sp,sp,4
  8086b8:	f800283a 	ret

008086bc <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  8086bc:	defffa04 	addi	sp,sp,-24
  8086c0:	dfc00515 	stw	ra,20(sp)
  8086c4:	df000415 	stw	fp,16(sp)
  8086c8:	df000404 	addi	fp,sp,16
  8086cc:	e13ffe15 	stw	r4,-8(fp)
  8086d0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  8086d4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  8086d8:	e0bffe17 	ldw	r2,-8(fp)
  8086dc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  8086e0:	e17fff17 	ldw	r5,-4(fp)
  8086e4:	e13ffe17 	ldw	r4,-8(fp)
  8086e8:	08086280 	call	808628 <alt_epcs_test_address>
  8086ec:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  8086f0:	e0bffc17 	ldw	r2,-16(fp)
  8086f4:	10000916 	blt	r2,zero,80871c <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  8086f8:	e0bffd17 	ldw	r2,-12(fp)
  8086fc:	10c02e17 	ldw	r3,184(r2)
  808700:	e13fff17 	ldw	r4,-4(fp)
  808704:	e0bffd17 	ldw	r2,-12(fp)
  808708:	10803217 	ldw	r2,200(r2)
  80870c:	100d883a 	mov	r6,r2
  808710:	200b883a 	mov	r5,r4
  808714:	1809883a 	mov	r4,r3
  808718:	080a3100 	call	80a310 <epcs_sector_erase>
  }
  return ret_code;
  80871c:	e0bffc17 	ldw	r2,-16(fp)
}
  808720:	e037883a 	mov	sp,fp
  808724:	dfc00117 	ldw	ra,4(sp)
  808728:	df000017 	ldw	fp,0(sp)
  80872c:	dec00204 	addi	sp,sp,8
  808730:	f800283a 	ret

00808734 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  808734:	defff404 	addi	sp,sp,-48
  808738:	dfc00b15 	stw	ra,44(sp)
  80873c:	df000a15 	stw	fp,40(sp)
  808740:	df000a04 	addi	fp,sp,40
  808744:	e13ffc15 	stw	r4,-16(fp)
  808748:	e17ffd15 	stw	r5,-12(fp)
  80874c:	e1bffe15 	stw	r6,-8(fp)
  808750:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  808754:	e0bffc17 	ldw	r2,-16(fp)
  808758:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  80875c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  808760:	e17ffe17 	ldw	r5,-8(fp)
  808764:	e13ffc17 	ldw	r4,-16(fp)
  808768:	08086280 	call	808628 <alt_epcs_test_address>
  80876c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  808770:	e0bff917 	ldw	r2,-28(fp)
  808774:	10002916 	blt	r2,zero,80881c <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  808778:	00002606 	br	808814 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  80877c:	e0bff817 	ldw	r2,-32(fp)
  808780:	10c03117 	ldw	r3,196(r2)
  808784:	e0bffe17 	ldw	r2,-8(fp)
  808788:	1887883a 	add	r3,r3,r2
  80878c:	e0bff817 	ldw	r2,-32(fp)
  808790:	10803117 	ldw	r2,196(r2)
  808794:	0085c83a 	sub	r2,zero,r2
  808798:	1884703a 	and	r2,r3,r2
  80879c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  8087a0:	e0fffa17 	ldw	r3,-24(fp)
  8087a4:	e0bffe17 	ldw	r2,-8(fp)
  8087a8:	1885c83a 	sub	r2,r3,r2
  8087ac:	e0c00217 	ldw	r3,8(fp)
  8087b0:	1880010e 	bge	r3,r2,8087b8 <alt_epcs_flash_write_block+0x84>
  8087b4:	1805883a 	mov	r2,r3
  8087b8:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  8087bc:	e0bff817 	ldw	r2,-32(fp)
  8087c0:	11002e17 	ldw	r4,184(r2)
  8087c4:	e0bff717 	ldw	r2,-36(fp)
  8087c8:	e0ffff17 	ldw	r3,-4(fp)
  8087cc:	1887883a 	add	r3,r3,r2
  8087d0:	e0bff817 	ldw	r2,-32(fp)
  8087d4:	10803217 	ldw	r2,200(r2)
  8087d8:	d8800015 	stw	r2,0(sp)
  8087dc:	e1fffb17 	ldw	r7,-20(fp)
  8087e0:	180d883a 	mov	r6,r3
  8087e4:	e17ffe17 	ldw	r5,-8(fp)
  8087e8:	080a5c00 	call	80a5c0 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  8087ec:	e0c00217 	ldw	r3,8(fp)
  8087f0:	e0bffb17 	ldw	r2,-20(fp)
  8087f4:	1885c83a 	sub	r2,r3,r2
  8087f8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  8087fc:	e0fff717 	ldw	r3,-36(fp)
  808800:	e0bffb17 	ldw	r2,-20(fp)
  808804:	1885883a 	add	r2,r3,r2
  808808:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  80880c:	e0bffa17 	ldw	r2,-24(fp)
  808810:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  808814:	e0800217 	ldw	r2,8(fp)
  808818:	103fd81e 	bne	r2,zero,80877c <__alt_mem_epcs_flash_controller_0+0xff7ff77c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  80881c:	e0bff917 	ldw	r2,-28(fp)
}
  808820:	e037883a 	mov	sp,fp
  808824:	dfc00117 	ldw	ra,4(sp)
  808828:	df000017 	ldw	fp,0(sp)
  80882c:	dec00204 	addi	sp,sp,8
  808830:	f800283a 	ret

00808834 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  808834:	defff704 	addi	sp,sp,-36
  808838:	dfc00815 	stw	ra,32(sp)
  80883c:	df000715 	stw	fp,28(sp)
  808840:	df000704 	addi	fp,sp,28
  808844:	e13ffc15 	stw	r4,-16(fp)
  808848:	e17ffd15 	stw	r5,-12(fp)
  80884c:	e1bffe15 	stw	r6,-8(fp)
  808850:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  808854:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  808858:	e0bffc17 	ldw	r2,-16(fp)
  80885c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  808860:	e17ffd17 	ldw	r5,-12(fp)
  808864:	e13ffc17 	ldw	r4,-16(fp)
  808868:	08086280 	call	808628 <alt_epcs_test_address>
  80886c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  808870:	e0bffa17 	ldw	r2,-24(fp)
  808874:	10000f16 	blt	r2,zero,8088b4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  808878:	e0bffb17 	ldw	r2,-20(fp)
  80887c:	10c02e17 	ldw	r3,184(r2)
  808880:	e0bffb17 	ldw	r2,-20(fp)
  808884:	10803217 	ldw	r2,200(r2)
  808888:	d8800015 	stw	r2,0(sp)
  80888c:	e1ffff17 	ldw	r7,-4(fp)
  808890:	e1bffe17 	ldw	r6,-8(fp)
  808894:	e17ffd17 	ldw	r5,-12(fp)
  808898:	1809883a 	mov	r4,r3
  80889c:	080a40c0 	call	80a40c <epcs_read_buffer>
  8088a0:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  8088a4:	e0fffa17 	ldw	r3,-24(fp)
  8088a8:	e0bfff17 	ldw	r2,-4(fp)
  8088ac:	1880011e 	bne	r3,r2,8088b4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  8088b0:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  8088b4:	e0bffa17 	ldw	r2,-24(fp)
}
  8088b8:	e037883a 	mov	sp,fp
  8088bc:	dfc00117 	ldw	ra,4(sp)
  8088c0:	df000017 	ldw	fp,0(sp)
  8088c4:	dec00204 	addi	sp,sp,8
  8088c8:	f800283a 	ret

008088cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8088cc:	defffa04 	addi	sp,sp,-24
  8088d0:	dfc00515 	stw	ra,20(sp)
  8088d4:	df000415 	stw	fp,16(sp)
  8088d8:	df000404 	addi	fp,sp,16
  8088dc:	e13ffd15 	stw	r4,-12(fp)
  8088e0:	e17ffe15 	stw	r5,-8(fp)
  8088e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8088e8:	e0bffd17 	ldw	r2,-12(fp)
  8088ec:	10800017 	ldw	r2,0(r2)
  8088f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8088f4:	e0bffc17 	ldw	r2,-16(fp)
  8088f8:	10c00a04 	addi	r3,r2,40
  8088fc:	e0bffd17 	ldw	r2,-12(fp)
  808900:	10800217 	ldw	r2,8(r2)
  808904:	100f883a 	mov	r7,r2
  808908:	e1bfff17 	ldw	r6,-4(fp)
  80890c:	e17ffe17 	ldw	r5,-8(fp)
  808910:	1809883a 	mov	r4,r3
  808914:	08090780 	call	809078 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  808918:	e037883a 	mov	sp,fp
  80891c:	dfc00117 	ldw	ra,4(sp)
  808920:	df000017 	ldw	fp,0(sp)
  808924:	dec00204 	addi	sp,sp,8
  808928:	f800283a 	ret

0080892c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80892c:	defffa04 	addi	sp,sp,-24
  808930:	dfc00515 	stw	ra,20(sp)
  808934:	df000415 	stw	fp,16(sp)
  808938:	df000404 	addi	fp,sp,16
  80893c:	e13ffd15 	stw	r4,-12(fp)
  808940:	e17ffe15 	stw	r5,-8(fp)
  808944:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  808948:	e0bffd17 	ldw	r2,-12(fp)
  80894c:	10800017 	ldw	r2,0(r2)
  808950:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  808954:	e0bffc17 	ldw	r2,-16(fp)
  808958:	10c00a04 	addi	r3,r2,40
  80895c:	e0bffd17 	ldw	r2,-12(fp)
  808960:	10800217 	ldw	r2,8(r2)
  808964:	100f883a 	mov	r7,r2
  808968:	e1bfff17 	ldw	r6,-4(fp)
  80896c:	e17ffe17 	ldw	r5,-8(fp)
  808970:	1809883a 	mov	r4,r3
  808974:	08093340 	call	809334 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  808978:	e037883a 	mov	sp,fp
  80897c:	dfc00117 	ldw	ra,4(sp)
  808980:	df000017 	ldw	fp,0(sp)
  808984:	dec00204 	addi	sp,sp,8
  808988:	f800283a 	ret

0080898c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80898c:	defffc04 	addi	sp,sp,-16
  808990:	dfc00315 	stw	ra,12(sp)
  808994:	df000215 	stw	fp,8(sp)
  808998:	df000204 	addi	fp,sp,8
  80899c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8089a0:	e0bfff17 	ldw	r2,-4(fp)
  8089a4:	10800017 	ldw	r2,0(r2)
  8089a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8089ac:	e0bffe17 	ldw	r2,-8(fp)
  8089b0:	10c00a04 	addi	r3,r2,40
  8089b4:	e0bfff17 	ldw	r2,-4(fp)
  8089b8:	10800217 	ldw	r2,8(r2)
  8089bc:	100b883a 	mov	r5,r2
  8089c0:	1809883a 	mov	r4,r3
  8089c4:	0808f200 	call	808f20 <altera_avalon_jtag_uart_close>
}
  8089c8:	e037883a 	mov	sp,fp
  8089cc:	dfc00117 	ldw	ra,4(sp)
  8089d0:	df000017 	ldw	fp,0(sp)
  8089d4:	dec00204 	addi	sp,sp,8
  8089d8:	f800283a 	ret

008089dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8089dc:	defffa04 	addi	sp,sp,-24
  8089e0:	dfc00515 	stw	ra,20(sp)
  8089e4:	df000415 	stw	fp,16(sp)
  8089e8:	df000404 	addi	fp,sp,16
  8089ec:	e13ffd15 	stw	r4,-12(fp)
  8089f0:	e17ffe15 	stw	r5,-8(fp)
  8089f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8089f8:	e0bffd17 	ldw	r2,-12(fp)
  8089fc:	10800017 	ldw	r2,0(r2)
  808a00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  808a04:	e0bffc17 	ldw	r2,-16(fp)
  808a08:	10800a04 	addi	r2,r2,40
  808a0c:	e1bfff17 	ldw	r6,-4(fp)
  808a10:	e17ffe17 	ldw	r5,-8(fp)
  808a14:	1009883a 	mov	r4,r2
  808a18:	0808f880 	call	808f88 <altera_avalon_jtag_uart_ioctl>
}
  808a1c:	e037883a 	mov	sp,fp
  808a20:	dfc00117 	ldw	ra,4(sp)
  808a24:	df000017 	ldw	fp,0(sp)
  808a28:	dec00204 	addi	sp,sp,8
  808a2c:	f800283a 	ret

00808a30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  808a30:	defff104 	addi	sp,sp,-60
  808a34:	dfc00e15 	stw	ra,56(sp)
  808a38:	df000d15 	stw	fp,52(sp)
  808a3c:	df000d04 	addi	fp,sp,52
  808a40:	e13ff915 	stw	r4,-28(fp)
  808a44:	e17ffa15 	stw	r5,-24(fp)
  808a48:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  808a4c:	e0bff917 	ldw	r2,-28(fp)
  808a50:	10800c04 	addi	r2,r2,48
  808a54:	e0bff415 	stw	r2,-48(fp)
  808a58:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  808a5c:	e0bff80b 	ldhu	r2,-32(fp)
  808a60:	e0fff884 	addi	r3,fp,-30
  808a64:	180b883a 	mov	r5,r3
  808a68:	1009883a 	mov	r4,r2
  808a6c:	08029680 	call	802968 <OSFlagCreate>
  808a70:	1007883a 	mov	r3,r2
  808a74:	e0bff417 	ldw	r2,-48(fp)
  808a78:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  808a7c:	e0bff917 	ldw	r2,-28(fp)
  808a80:	10800a04 	addi	r2,r2,40
  808a84:	e0bff515 	stw	r2,-44(fp)
  808a88:	00800044 	movi	r2,1
  808a8c:	e0bff78d 	sth	r2,-34(fp)
  808a90:	e0bff78b 	ldhu	r2,-34(fp)
  808a94:	1009883a 	mov	r4,r2
  808a98:	08056880 	call	805688 <OSSemCreate>
  808a9c:	1007883a 	mov	r3,r2
  808aa0:	e0bff517 	ldw	r2,-44(fp)
  808aa4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  808aa8:	e0bff917 	ldw	r2,-28(fp)
  808aac:	10800b04 	addi	r2,r2,44
  808ab0:	e0bff615 	stw	r2,-40(fp)
  808ab4:	00800044 	movi	r2,1
  808ab8:	e0bff70d 	sth	r2,-36(fp)
  808abc:	e0bff70b 	ldhu	r2,-36(fp)
  808ac0:	1009883a 	mov	r4,r2
  808ac4:	08056880 	call	805688 <OSSemCreate>
  808ac8:	1007883a 	mov	r3,r2
  808acc:	e0bff617 	ldw	r2,-40(fp)
  808ad0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  808ad4:	e0bff917 	ldw	r2,-28(fp)
  808ad8:	00c00044 	movi	r3,1
  808adc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  808ae0:	e0bff917 	ldw	r2,-28(fp)
  808ae4:	10800017 	ldw	r2,0(r2)
  808ae8:	10800104 	addi	r2,r2,4
  808aec:	1007883a 	mov	r3,r2
  808af0:	e0bff917 	ldw	r2,-28(fp)
  808af4:	10800817 	ldw	r2,32(r2)
  808af8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  808afc:	e0bffa17 	ldw	r2,-24(fp)
  808b00:	e0fffb17 	ldw	r3,-20(fp)
  808b04:	d8000015 	stw	zero,0(sp)
  808b08:	e1fff917 	ldw	r7,-28(fp)
  808b0c:	01802074 	movhi	r6,129
  808b10:	31a2de04 	addi	r6,r6,-29832
  808b14:	180b883a 	mov	r5,r3
  808b18:	1009883a 	mov	r4,r2
  808b1c:	080ad440 	call	80ad44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  808b20:	e0bff917 	ldw	r2,-28(fp)
  808b24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  808b28:	e0bff917 	ldw	r2,-28(fp)
  808b2c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  808b30:	d0e04917 	ldw	r3,-32476(gp)
  808b34:	e1fff917 	ldw	r7,-28(fp)
  808b38:	01802074 	movhi	r6,129
  808b3c:	31a38704 	addi	r6,r6,-29156
  808b40:	180b883a 	mov	r5,r3
  808b44:	1009883a 	mov	r4,r2
  808b48:	080a87c0 	call	80a87c <alt_alarm_start>
  808b4c:	1000040e 	bge	r2,zero,808b60 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  808b50:	e0fff917 	ldw	r3,-28(fp)
  808b54:	00a00034 	movhi	r2,32768
  808b58:	10bfffc4 	addi	r2,r2,-1
  808b5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  808b60:	0001883a 	nop
  808b64:	e037883a 	mov	sp,fp
  808b68:	dfc00117 	ldw	ra,4(sp)
  808b6c:	df000017 	ldw	fp,0(sp)
  808b70:	dec00204 	addi	sp,sp,8
  808b74:	f800283a 	ret

00808b78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  808b78:	defff204 	addi	sp,sp,-56
  808b7c:	dfc00d15 	stw	ra,52(sp)
  808b80:	df000c15 	stw	fp,48(sp)
  808b84:	df000c04 	addi	fp,sp,48
  808b88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  808b8c:	e0bfff17 	ldw	r2,-4(fp)
  808b90:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  808b94:	e0bff617 	ldw	r2,-40(fp)
  808b98:	10800017 	ldw	r2,0(r2)
  808b9c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  808ba0:	e0bff717 	ldw	r2,-36(fp)
  808ba4:	10800104 	addi	r2,r2,4
  808ba8:	10800037 	ldwio	r2,0(r2)
  808bac:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  808bb0:	e0bff817 	ldw	r2,-32(fp)
  808bb4:	1080c00c 	andi	r2,r2,768
  808bb8:	10009126 	beq	r2,zero,808e00 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  808bbc:	e0bff817 	ldw	r2,-32(fp)
  808bc0:	1080400c 	andi	r2,r2,256
  808bc4:	10004726 	beq	r2,zero,808ce4 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  808bc8:	00800074 	movhi	r2,1
  808bcc:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808bd0:	e0bff617 	ldw	r2,-40(fp)
  808bd4:	10800d17 	ldw	r2,52(r2)
  808bd8:	10800044 	addi	r2,r2,1
  808bdc:	1081ffcc 	andi	r2,r2,2047
  808be0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  808be4:	e0bff617 	ldw	r2,-40(fp)
  808be8:	10c00e17 	ldw	r3,56(r2)
  808bec:	e0bff917 	ldw	r2,-28(fp)
  808bf0:	18802726 	beq	r3,r2,808c90 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  808bf4:	e0bff717 	ldw	r2,-36(fp)
  808bf8:	10800037 	ldwio	r2,0(r2)
  808bfc:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  808c00:	e0bff417 	ldw	r2,-48(fp)
  808c04:	10a0000c 	andi	r2,r2,32768
  808c08:	10002326 	beq	r2,zero,808c98 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  808c0c:	e0bff617 	ldw	r2,-40(fp)
  808c10:	10800d17 	ldw	r2,52(r2)
  808c14:	e0fff417 	ldw	r3,-48(fp)
  808c18:	1809883a 	mov	r4,r3
  808c1c:	e0fff617 	ldw	r3,-40(fp)
  808c20:	1885883a 	add	r2,r3,r2
  808c24:	10801104 	addi	r2,r2,68
  808c28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808c2c:	e0bff617 	ldw	r2,-40(fp)
  808c30:	10800d17 	ldw	r2,52(r2)
  808c34:	10800044 	addi	r2,r2,1
  808c38:	10c1ffcc 	andi	r3,r2,2047
  808c3c:	e0bff617 	ldw	r2,-40(fp)
  808c40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  808c44:	e0bff617 	ldw	r2,-40(fp)
  808c48:	10800c17 	ldw	r2,48(r2)
  808c4c:	e0bffb15 	stw	r2,-20(fp)
  808c50:	00800044 	movi	r2,1
  808c54:	e0bffc0d 	sth	r2,-16(fp)
  808c58:	00800044 	movi	r2,1
  808c5c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  808c60:	d0a03343 	ldbu	r2,-32563(gp)
  808c64:	10803fcc 	andi	r2,r2,255
  808c68:	103fd926 	beq	r2,zero,808bd0 <__alt_mem_epcs_flash_controller_0+0xff7ffbd0>
  {
    OSFlagPost (group, flags, opt, &err);
  808c6c:	e0bffc0b 	ldhu	r2,-16(fp)
  808c70:	e0fffc83 	ldbu	r3,-14(fp)
  808c74:	e13ffdc4 	addi	r4,fp,-9
  808c78:	200f883a 	mov	r7,r4
  808c7c:	180d883a 	mov	r6,r3
  808c80:	100b883a 	mov	r5,r2
  808c84:	e13ffb17 	ldw	r4,-20(fp)
  808c88:	08035440 	call	803544 <OSFlagPost>
      }
  808c8c:	003fd006 	br	808bd0 <__alt_mem_epcs_flash_controller_0+0xff7ffbd0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  808c90:	0001883a 	nop
  808c94:	00000106 	br	808c9c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  808c98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  808c9c:	e0bff417 	ldw	r2,-48(fp)
  808ca0:	10bfffec 	andhi	r2,r2,65535
  808ca4:	10000f26 	beq	r2,zero,808ce4 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  808ca8:	e0bff617 	ldw	r2,-40(fp)
  808cac:	10c00817 	ldw	r3,32(r2)
  808cb0:	00bfff84 	movi	r2,-2
  808cb4:	1886703a 	and	r3,r3,r2
  808cb8:	e0bff617 	ldw	r2,-40(fp)
  808cbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  808cc0:	e0bff717 	ldw	r2,-36(fp)
  808cc4:	10800104 	addi	r2,r2,4
  808cc8:	1007883a 	mov	r3,r2
  808ccc:	e0bff617 	ldw	r2,-40(fp)
  808cd0:	10800817 	ldw	r2,32(r2)
  808cd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  808cd8:	e0bff717 	ldw	r2,-36(fp)
  808cdc:	10800104 	addi	r2,r2,4
  808ce0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  808ce4:	e0bff817 	ldw	r2,-32(fp)
  808ce8:	1080800c 	andi	r2,r2,512
  808cec:	103fac26 	beq	r2,zero,808ba0 <__alt_mem_epcs_flash_controller_0+0xff7ffba0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  808cf0:	e0bff817 	ldw	r2,-32(fp)
  808cf4:	1004d43a 	srli	r2,r2,16
  808cf8:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  808cfc:	00002606 	br	808d98 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  808d00:	e0bff717 	ldw	r2,-36(fp)
  808d04:	e0fff617 	ldw	r3,-40(fp)
  808d08:	18c01017 	ldw	r3,64(r3)
  808d0c:	e13ff617 	ldw	r4,-40(fp)
  808d10:	20c7883a 	add	r3,r4,r3
  808d14:	18c21104 	addi	r3,r3,2116
  808d18:	18c00003 	ldbu	r3,0(r3)
  808d1c:	18c03fcc 	andi	r3,r3,255
  808d20:	18c0201c 	xori	r3,r3,128
  808d24:	18ffe004 	addi	r3,r3,-128
  808d28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808d2c:	e0bff617 	ldw	r2,-40(fp)
  808d30:	10801017 	ldw	r2,64(r2)
  808d34:	10800044 	addi	r2,r2,1
  808d38:	10c1ffcc 	andi	r3,r2,2047
  808d3c:	e0bff617 	ldw	r2,-40(fp)
  808d40:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  808d44:	e0bff617 	ldw	r2,-40(fp)
  808d48:	10800c17 	ldw	r2,48(r2)
  808d4c:	e0bffa15 	stw	r2,-24(fp)
  808d50:	00800084 	movi	r2,2
  808d54:	e0bffd0d 	sth	r2,-12(fp)
  808d58:	00800044 	movi	r2,1
  808d5c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  808d60:	d0a03343 	ldbu	r2,-32563(gp)
  808d64:	10803fcc 	andi	r2,r2,255
  808d68:	10000826 	beq	r2,zero,808d8c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  808d6c:	e0bffd0b 	ldhu	r2,-12(fp)
  808d70:	e0fffd83 	ldbu	r3,-10(fp)
  808d74:	e13ffe04 	addi	r4,fp,-8
  808d78:	200f883a 	mov	r7,r4
  808d7c:	180d883a 	mov	r6,r3
  808d80:	100b883a 	mov	r5,r2
  808d84:	e13ffa17 	ldw	r4,-24(fp)
  808d88:	08035440 	call	803544 <OSFlagPost>

        space--;
  808d8c:	e0bff517 	ldw	r2,-44(fp)
  808d90:	10bfffc4 	addi	r2,r2,-1
  808d94:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  808d98:	e0bff517 	ldw	r2,-44(fp)
  808d9c:	10000526 	beq	r2,zero,808db4 <altera_avalon_jtag_uart_irq+0x23c>
  808da0:	e0bff617 	ldw	r2,-40(fp)
  808da4:	10c01017 	ldw	r3,64(r2)
  808da8:	e0bff617 	ldw	r2,-40(fp)
  808dac:	10800f17 	ldw	r2,60(r2)
  808db0:	18bfd31e 	bne	r3,r2,808d00 <__alt_mem_epcs_flash_controller_0+0xff7ffd00>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  808db4:	e0bff517 	ldw	r2,-44(fp)
  808db8:	103f7926 	beq	r2,zero,808ba0 <__alt_mem_epcs_flash_controller_0+0xff7ffba0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  808dbc:	e0bff617 	ldw	r2,-40(fp)
  808dc0:	10c00817 	ldw	r3,32(r2)
  808dc4:	00bfff44 	movi	r2,-3
  808dc8:	1886703a 	and	r3,r3,r2
  808dcc:	e0bff617 	ldw	r2,-40(fp)
  808dd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  808dd4:	e0bff617 	ldw	r2,-40(fp)
  808dd8:	10800017 	ldw	r2,0(r2)
  808ddc:	10800104 	addi	r2,r2,4
  808de0:	1007883a 	mov	r3,r2
  808de4:	e0bff617 	ldw	r2,-40(fp)
  808de8:	10800817 	ldw	r2,32(r2)
  808dec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  808df0:	e0bff717 	ldw	r2,-36(fp)
  808df4:	10800104 	addi	r2,r2,4
  808df8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  808dfc:	003f6806 	br	808ba0 <__alt_mem_epcs_flash_controller_0+0xff7ffba0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  808e00:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  808e04:	0001883a 	nop
  808e08:	e037883a 	mov	sp,fp
  808e0c:	dfc00117 	ldw	ra,4(sp)
  808e10:	df000017 	ldw	fp,0(sp)
  808e14:	dec00204 	addi	sp,sp,8
  808e18:	f800283a 	ret

00808e1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  808e1c:	defff904 	addi	sp,sp,-28
  808e20:	dfc00615 	stw	ra,24(sp)
  808e24:	df000515 	stw	fp,20(sp)
  808e28:	df000504 	addi	fp,sp,20
  808e2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  808e30:	e0bfff17 	ldw	r2,-4(fp)
  808e34:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  808e38:	e0bffb17 	ldw	r2,-20(fp)
  808e3c:	10800017 	ldw	r2,0(r2)
  808e40:	10800104 	addi	r2,r2,4
  808e44:	10800037 	ldwio	r2,0(r2)
  808e48:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  808e4c:	e0bffc17 	ldw	r2,-16(fp)
  808e50:	1081000c 	andi	r2,r2,1024
  808e54:	10000b26 	beq	r2,zero,808e84 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  808e58:	e0bffb17 	ldw	r2,-20(fp)
  808e5c:	10800017 	ldw	r2,0(r2)
  808e60:	10800104 	addi	r2,r2,4
  808e64:	1007883a 	mov	r3,r2
  808e68:	e0bffb17 	ldw	r2,-20(fp)
  808e6c:	10800817 	ldw	r2,32(r2)
  808e70:	10810014 	ori	r2,r2,1024
  808e74:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  808e78:	e0bffb17 	ldw	r2,-20(fp)
  808e7c:	10000915 	stw	zero,36(r2)
  808e80:	00002106 	br	808f08 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  808e84:	e0bffb17 	ldw	r2,-20(fp)
  808e88:	10c00917 	ldw	r3,36(r2)
  808e8c:	00a00034 	movhi	r2,32768
  808e90:	10bfff04 	addi	r2,r2,-4
  808e94:	10c01c36 	bltu	r2,r3,808f08 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  808e98:	e0bffb17 	ldw	r2,-20(fp)
  808e9c:	10800917 	ldw	r2,36(r2)
  808ea0:	10c00044 	addi	r3,r2,1
  808ea4:	e0bffb17 	ldw	r2,-20(fp)
  808ea8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  808eac:	e0bffb17 	ldw	r2,-20(fp)
  808eb0:	10c00917 	ldw	r3,36(r2)
  808eb4:	e0bffb17 	ldw	r2,-20(fp)
  808eb8:	10800117 	ldw	r2,4(r2)
  808ebc:	18801236 	bltu	r3,r2,808f08 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  808ec0:	e0bffb17 	ldw	r2,-20(fp)
  808ec4:	10800c17 	ldw	r2,48(r2)
  808ec8:	e0bffd15 	stw	r2,-12(fp)
  808ecc:	00800104 	movi	r2,4
  808ed0:	e0bffe0d 	sth	r2,-8(fp)
  808ed4:	00800044 	movi	r2,1
  808ed8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  808edc:	d0a03343 	ldbu	r2,-32563(gp)
  808ee0:	10803fcc 	andi	r2,r2,255
  808ee4:	10000826 	beq	r2,zero,808f08 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  808ee8:	e0bffe0b 	ldhu	r2,-8(fp)
  808eec:	e0fffe83 	ldbu	r3,-6(fp)
  808ef0:	e13ffec4 	addi	r4,fp,-5
  808ef4:	200f883a 	mov	r7,r4
  808ef8:	180d883a 	mov	r6,r3
  808efc:	100b883a 	mov	r5,r2
  808f00:	e13ffd17 	ldw	r4,-12(fp)
  808f04:	08035440 	call	803544 <OSFlagPost>
  808f08:	d0a04917 	ldw	r2,-32476(gp)
    }
  }

  return alt_ticks_per_second();
}
  808f0c:	e037883a 	mov	sp,fp
  808f10:	dfc00117 	ldw	ra,4(sp)
  808f14:	df000017 	ldw	fp,0(sp)
  808f18:	dec00204 	addi	sp,sp,8
  808f1c:	f800283a 	ret

00808f20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  808f20:	defffd04 	addi	sp,sp,-12
  808f24:	df000215 	stw	fp,8(sp)
  808f28:	df000204 	addi	fp,sp,8
  808f2c:	e13ffe15 	stw	r4,-8(fp)
  808f30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  808f34:	00000506 	br	808f4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  808f38:	e0bfff17 	ldw	r2,-4(fp)
  808f3c:	1090000c 	andi	r2,r2,16384
  808f40:	10000226 	beq	r2,zero,808f4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  808f44:	00bffd44 	movi	r2,-11
  808f48:	00000b06 	br	808f78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  808f4c:	e0bffe17 	ldw	r2,-8(fp)
  808f50:	10c01017 	ldw	r3,64(r2)
  808f54:	e0bffe17 	ldw	r2,-8(fp)
  808f58:	10800f17 	ldw	r2,60(r2)
  808f5c:	18800526 	beq	r3,r2,808f74 <altera_avalon_jtag_uart_close+0x54>
  808f60:	e0bffe17 	ldw	r2,-8(fp)
  808f64:	10c00917 	ldw	r3,36(r2)
  808f68:	e0bffe17 	ldw	r2,-8(fp)
  808f6c:	10800117 	ldw	r2,4(r2)
  808f70:	18bff136 	bltu	r3,r2,808f38 <__alt_mem_epcs_flash_controller_0+0xff7fff38>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  808f74:	0005883a 	mov	r2,zero
}
  808f78:	e037883a 	mov	sp,fp
  808f7c:	df000017 	ldw	fp,0(sp)
  808f80:	dec00104 	addi	sp,sp,4
  808f84:	f800283a 	ret

00808f88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  808f88:	defffa04 	addi	sp,sp,-24
  808f8c:	df000515 	stw	fp,20(sp)
  808f90:	df000504 	addi	fp,sp,20
  808f94:	e13ffd15 	stw	r4,-12(fp)
  808f98:	e17ffe15 	stw	r5,-8(fp)
  808f9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  808fa0:	00bff9c4 	movi	r2,-25
  808fa4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  808fa8:	e0bffe17 	ldw	r2,-8(fp)
  808fac:	10da8060 	cmpeqi	r3,r2,27137
  808fb0:	1800031e 	bne	r3,zero,808fc0 <altera_avalon_jtag_uart_ioctl+0x38>
  808fb4:	109a80a0 	cmpeqi	r2,r2,27138
  808fb8:	1000181e 	bne	r2,zero,80901c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  808fbc:	00002906 	br	809064 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  808fc0:	e0bffd17 	ldw	r2,-12(fp)
  808fc4:	10c00117 	ldw	r3,4(r2)
  808fc8:	00a00034 	movhi	r2,32768
  808fcc:	10bfffc4 	addi	r2,r2,-1
  808fd0:	18802126 	beq	r3,r2,809058 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  808fd4:	e0bfff17 	ldw	r2,-4(fp)
  808fd8:	10800017 	ldw	r2,0(r2)
  808fdc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  808fe0:	e0bffc17 	ldw	r2,-16(fp)
  808fe4:	10800090 	cmplti	r2,r2,2
  808fe8:	1000061e 	bne	r2,zero,809004 <altera_avalon_jtag_uart_ioctl+0x7c>
  808fec:	e0fffc17 	ldw	r3,-16(fp)
  808ff0:	00a00034 	movhi	r2,32768
  808ff4:	10bfffc4 	addi	r2,r2,-1
  808ff8:	18800226 	beq	r3,r2,809004 <altera_avalon_jtag_uart_ioctl+0x7c>
  808ffc:	e0bffc17 	ldw	r2,-16(fp)
  809000:	00000206 	br	80900c <altera_avalon_jtag_uart_ioctl+0x84>
  809004:	00a00034 	movhi	r2,32768
  809008:	10bfff84 	addi	r2,r2,-2
  80900c:	e0fffd17 	ldw	r3,-12(fp)
  809010:	18800115 	stw	r2,4(r3)
      rc = 0;
  809014:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  809018:	00000f06 	br	809058 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80901c:	e0bffd17 	ldw	r2,-12(fp)
  809020:	10c00117 	ldw	r3,4(r2)
  809024:	00a00034 	movhi	r2,32768
  809028:	10bfffc4 	addi	r2,r2,-1
  80902c:	18800c26 	beq	r3,r2,809060 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  809030:	e0bffd17 	ldw	r2,-12(fp)
  809034:	10c00917 	ldw	r3,36(r2)
  809038:	e0bffd17 	ldw	r2,-12(fp)
  80903c:	10800117 	ldw	r2,4(r2)
  809040:	1885803a 	cmpltu	r2,r3,r2
  809044:	10c03fcc 	andi	r3,r2,255
  809048:	e0bfff17 	ldw	r2,-4(fp)
  80904c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  809050:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  809054:	00000206 	br	809060 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  809058:	0001883a 	nop
  80905c:	00000106 	br	809064 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  809060:	0001883a 	nop

  default:
    break;
  }

  return rc;
  809064:	e0bffb17 	ldw	r2,-20(fp)
}
  809068:	e037883a 	mov	sp,fp
  80906c:	df000017 	ldw	fp,0(sp)
  809070:	dec00104 	addi	sp,sp,4
  809074:	f800283a 	ret

00809078 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  809078:	deffed04 	addi	sp,sp,-76
  80907c:	dfc01215 	stw	ra,72(sp)
  809080:	df001115 	stw	fp,68(sp)
  809084:	df001104 	addi	fp,sp,68
  809088:	e13ffc15 	stw	r4,-16(fp)
  80908c:	e17ffd15 	stw	r5,-12(fp)
  809090:	e1bffe15 	stw	r6,-8(fp)
  809094:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  809098:	e0bffd17 	ldw	r2,-12(fp)
  80909c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  8090a0:	e0bffc17 	ldw	r2,-16(fp)
  8090a4:	10800a17 	ldw	r2,40(r2)
  8090a8:	e0bff815 	stw	r2,-32(fp)
  8090ac:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  8090b0:	e0bff90b 	ldhu	r2,-28(fp)
  8090b4:	e0fffb04 	addi	r3,fp,-20
  8090b8:	180d883a 	mov	r6,r3
  8090bc:	100b883a 	mov	r5,r2
  8090c0:	e13ff817 	ldw	r4,-32(fp)
  8090c4:	08059a00 	call	8059a0 <OSSemPend>

  while (space > 0)
  8090c8:	00006106 	br	809250 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8090cc:	e0bffc17 	ldw	r2,-16(fp)
  8090d0:	10800d17 	ldw	r2,52(r2)
  8090d4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  8090d8:	e0bffc17 	ldw	r2,-16(fp)
  8090dc:	10800e17 	ldw	r2,56(r2)
  8090e0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  8090e4:	e0fff317 	ldw	r3,-52(fp)
  8090e8:	e0bff417 	ldw	r2,-48(fp)
  8090ec:	18800536 	bltu	r3,r2,809104 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  8090f0:	e0fff317 	ldw	r3,-52(fp)
  8090f4:	e0bff417 	ldw	r2,-48(fp)
  8090f8:	1885c83a 	sub	r2,r3,r2
  8090fc:	e0bff115 	stw	r2,-60(fp)
  809100:	00000406 	br	809114 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  809104:	00c20004 	movi	r3,2048
  809108:	e0bff417 	ldw	r2,-48(fp)
  80910c:	1885c83a 	sub	r2,r3,r2
  809110:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  809114:	e0bff117 	ldw	r2,-60(fp)
  809118:	10001e26 	beq	r2,zero,809194 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  80911c:	e0fffe17 	ldw	r3,-8(fp)
  809120:	e0bff117 	ldw	r2,-60(fp)
  809124:	1880022e 	bgeu	r3,r2,809130 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  809128:	e0bffe17 	ldw	r2,-8(fp)
  80912c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  809130:	e0bffc17 	ldw	r2,-16(fp)
  809134:	10c01104 	addi	r3,r2,68
  809138:	e0bff417 	ldw	r2,-48(fp)
  80913c:	1885883a 	add	r2,r3,r2
  809140:	e1bff117 	ldw	r6,-60(fp)
  809144:	100b883a 	mov	r5,r2
  809148:	e13ff017 	ldw	r4,-64(fp)
  80914c:	080bf580 	call	80bf58 <memcpy>
      ptr   += n;
  809150:	e0fff017 	ldw	r3,-64(fp)
  809154:	e0bff117 	ldw	r2,-60(fp)
  809158:	1885883a 	add	r2,r3,r2
  80915c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  809160:	e0fffe17 	ldw	r3,-8(fp)
  809164:	e0bff117 	ldw	r2,-60(fp)
  809168:	1885c83a 	sub	r2,r3,r2
  80916c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  809170:	e0fff417 	ldw	r3,-48(fp)
  809174:	e0bff117 	ldw	r2,-60(fp)
  809178:	1885883a 	add	r2,r3,r2
  80917c:	10c1ffcc 	andi	r3,r2,2047
  809180:	e0bffc17 	ldw	r2,-16(fp)
  809184:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  809188:	e0bffe17 	ldw	r2,-8(fp)
  80918c:	00bfcf16 	blt	zero,r2,8090cc <__alt_mem_epcs_flash_controller_0+0xff8000cc>
  809190:	00000106 	br	809198 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  809194:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  809198:	e0fff017 	ldw	r3,-64(fp)
  80919c:	e0bffd17 	ldw	r2,-12(fp)
  8091a0:	18802e1e 	bne	r3,r2,80925c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8091a4:	e0bfff17 	ldw	r2,-4(fp)
  8091a8:	1090000c 	andi	r2,r2,16384
  8091ac:	10002d1e 	bne	r2,zero,809264 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  8091b0:	d0a03343 	ldbu	r2,-32563(gp)
  8091b4:	10803fcc 	andi	r2,r2,255
  8091b8:	10800058 	cmpnei	r2,r2,1
  8091bc:	1000161e 	bne	r2,zero,809218 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  8091c0:	e0bffc17 	ldw	r2,-16(fp)
  8091c4:	10800c17 	ldw	r2,48(r2)
  8091c8:	e0bff215 	stw	r2,-56(fp)
  8091cc:	00800144 	movi	r2,5
  8091d0:	e0bff98d 	sth	r2,-26(fp)
  8091d4:	00bfe0c4 	movi	r2,-125
  8091d8:	e0bffa05 	stb	r2,-24(fp)
  8091dc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8091e0:	d0a03343 	ldbu	r2,-32563(gp)
  8091e4:	10803fcc 	andi	r2,r2,255
  8091e8:	10001526 	beq	r2,zero,809240 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8091ec:	e0fff98b 	ldhu	r3,-26(fp)
  8091f0:	e13ffa03 	ldbu	r4,-24(fp)
  8091f4:	e17ffa8b 	ldhu	r5,-22(fp)
  8091f8:	e0bffb44 	addi	r2,fp,-19
  8091fc:	d8800015 	stw	r2,0(sp)
  809200:	280f883a 	mov	r7,r5
  809204:	200d883a 	mov	r6,r4
  809208:	180b883a 	mov	r5,r3
  80920c:	e13ff217 	ldw	r4,-56(fp)
  809210:	0802f2c0 	call	802f2c <OSFlagPend>
  809214:	00000a06 	br	809240 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  809218:	0001883a 	nop
  80921c:	e0bffc17 	ldw	r2,-16(fp)
  809220:	10c00d17 	ldw	r3,52(r2)
  809224:	e0bff317 	ldw	r2,-52(fp)
  809228:	1880051e 	bne	r3,r2,809240 <altera_avalon_jtag_uart_read+0x1c8>
  80922c:	e0bffc17 	ldw	r2,-16(fp)
  809230:	10c00917 	ldw	r3,36(r2)
  809234:	e0bffc17 	ldw	r2,-16(fp)
  809238:	10800117 	ldw	r2,4(r2)
  80923c:	18bff736 	bltu	r3,r2,80921c <__alt_mem_epcs_flash_controller_0+0xff80021c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  809240:	e0bffc17 	ldw	r2,-16(fp)
  809244:	10c00d17 	ldw	r3,52(r2)
  809248:	e0bff317 	ldw	r2,-52(fp)
  80924c:	18800726 	beq	r3,r2,80926c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  809250:	e0bffe17 	ldw	r2,-8(fp)
  809254:	00bf9d16 	blt	zero,r2,8090cc <__alt_mem_epcs_flash_controller_0+0xff8000cc>
  809258:	00000506 	br	809270 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80925c:	0001883a 	nop
  809260:	00000306 	br	809270 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  809264:	0001883a 	nop
  809268:	00000106 	br	809270 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80926c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  809270:	e0bffc17 	ldw	r2,-16(fp)
  809274:	10800a17 	ldw	r2,40(r2)
  809278:	1009883a 	mov	r4,r2
  80927c:	0805d180 	call	805d18 <OSSemPost>

  if (ptr != buffer)
  809280:	e0fff017 	ldw	r3,-64(fp)
  809284:	e0bffd17 	ldw	r2,-12(fp)
  809288:	18801826 	beq	r3,r2,8092ec <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80928c:	0005303a 	rdctl	r2,status
  809290:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809294:	e0fff717 	ldw	r3,-36(fp)
  809298:	00bfff84 	movi	r2,-2
  80929c:	1884703a 	and	r2,r3,r2
  8092a0:	1001703a 	wrctl	status,r2
  
  return context;
  8092a4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8092a8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8092ac:	e0bffc17 	ldw	r2,-16(fp)
  8092b0:	10800817 	ldw	r2,32(r2)
  8092b4:	10c00054 	ori	r3,r2,1
  8092b8:	e0bffc17 	ldw	r2,-16(fp)
  8092bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8092c0:	e0bffc17 	ldw	r2,-16(fp)
  8092c4:	10800017 	ldw	r2,0(r2)
  8092c8:	10800104 	addi	r2,r2,4
  8092cc:	1007883a 	mov	r3,r2
  8092d0:	e0bffc17 	ldw	r2,-16(fp)
  8092d4:	10800817 	ldw	r2,32(r2)
  8092d8:	18800035 	stwio	r2,0(r3)
  8092dc:	e0bff617 	ldw	r2,-40(fp)
  8092e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8092e4:	e0bff517 	ldw	r2,-44(fp)
  8092e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8092ec:	e0fff017 	ldw	r3,-64(fp)
  8092f0:	e0bffd17 	ldw	r2,-12(fp)
  8092f4:	18800426 	beq	r3,r2,809308 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  8092f8:	e0fff017 	ldw	r3,-64(fp)
  8092fc:	e0bffd17 	ldw	r2,-12(fp)
  809300:	1885c83a 	sub	r2,r3,r2
  809304:	00000606 	br	809320 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  809308:	e0bfff17 	ldw	r2,-4(fp)
  80930c:	1090000c 	andi	r2,r2,16384
  809310:	10000226 	beq	r2,zero,80931c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  809314:	00bffd44 	movi	r2,-11
  809318:	00000106 	br	809320 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  80931c:	00bffec4 	movi	r2,-5
}
  809320:	e037883a 	mov	sp,fp
  809324:	dfc00117 	ldw	ra,4(sp)
  809328:	df000017 	ldw	fp,0(sp)
  80932c:	dec00204 	addi	sp,sp,8
  809330:	f800283a 	ret

00809334 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  809334:	deffed04 	addi	sp,sp,-76
  809338:	dfc01215 	stw	ra,72(sp)
  80933c:	df001115 	stw	fp,68(sp)
  809340:	df001104 	addi	fp,sp,68
  809344:	e13ffc15 	stw	r4,-16(fp)
  809348:	e17ffd15 	stw	r5,-12(fp)
  80934c:	e1bffe15 	stw	r6,-8(fp)
  809350:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  809354:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  809358:	e0bffd17 	ldw	r2,-12(fp)
  80935c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  809360:	e0bffc17 	ldw	r2,-16(fp)
  809364:	10800b17 	ldw	r2,44(r2)
  809368:	e0bff815 	stw	r2,-32(fp)
  80936c:	e03ff90d 	sth	zero,-28(fp)
  809370:	e0bff90b 	ldhu	r2,-28(fp)
  809374:	e0fffb44 	addi	r3,fp,-19
  809378:	180d883a 	mov	r6,r3
  80937c:	100b883a 	mov	r5,r2
  809380:	e13ff817 	ldw	r4,-32(fp)
  809384:	08059a00 	call	8059a0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  809388:	00003706 	br	809468 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80938c:	e0bffc17 	ldw	r2,-16(fp)
  809390:	10800f17 	ldw	r2,60(r2)
  809394:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  809398:	e0bffc17 	ldw	r2,-16(fp)
  80939c:	10801017 	ldw	r2,64(r2)
  8093a0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  8093a4:	e0fff417 	ldw	r3,-48(fp)
  8093a8:	e0bff017 	ldw	r2,-64(fp)
  8093ac:	1880062e 	bgeu	r3,r2,8093c8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  8093b0:	e0fff017 	ldw	r3,-64(fp)
  8093b4:	e0bff417 	ldw	r2,-48(fp)
  8093b8:	1885c83a 	sub	r2,r3,r2
  8093bc:	10bfffc4 	addi	r2,r2,-1
  8093c0:	e0bff115 	stw	r2,-60(fp)
  8093c4:	00000b06 	br	8093f4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  8093c8:	e0bff017 	ldw	r2,-64(fp)
  8093cc:	10000526 	beq	r2,zero,8093e4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8093d0:	00c20004 	movi	r3,2048
  8093d4:	e0bff417 	ldw	r2,-48(fp)
  8093d8:	1885c83a 	sub	r2,r3,r2
  8093dc:	e0bff115 	stw	r2,-60(fp)
  8093e0:	00000406 	br	8093f4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8093e4:	00c1ffc4 	movi	r3,2047
  8093e8:	e0bff417 	ldw	r2,-48(fp)
  8093ec:	1885c83a 	sub	r2,r3,r2
  8093f0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  8093f4:	e0bff117 	ldw	r2,-60(fp)
  8093f8:	10001e26 	beq	r2,zero,809474 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  8093fc:	e0fffe17 	ldw	r3,-8(fp)
  809400:	e0bff117 	ldw	r2,-60(fp)
  809404:	1880022e 	bgeu	r3,r2,809410 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  809408:	e0bffe17 	ldw	r2,-8(fp)
  80940c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  809410:	e0bffc17 	ldw	r2,-16(fp)
  809414:	10c21104 	addi	r3,r2,2116
  809418:	e0bff417 	ldw	r2,-48(fp)
  80941c:	1885883a 	add	r2,r3,r2
  809420:	e1bff117 	ldw	r6,-60(fp)
  809424:	e17ffd17 	ldw	r5,-12(fp)
  809428:	1009883a 	mov	r4,r2
  80942c:	080bf580 	call	80bf58 <memcpy>
      ptr   += n;
  809430:	e0fffd17 	ldw	r3,-12(fp)
  809434:	e0bff117 	ldw	r2,-60(fp)
  809438:	1885883a 	add	r2,r3,r2
  80943c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  809440:	e0fffe17 	ldw	r3,-8(fp)
  809444:	e0bff117 	ldw	r2,-60(fp)
  809448:	1885c83a 	sub	r2,r3,r2
  80944c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  809450:	e0fff417 	ldw	r3,-48(fp)
  809454:	e0bff117 	ldw	r2,-60(fp)
  809458:	1885883a 	add	r2,r3,r2
  80945c:	10c1ffcc 	andi	r3,r2,2047
  809460:	e0bffc17 	ldw	r2,-16(fp)
  809464:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  809468:	e0bffe17 	ldw	r2,-8(fp)
  80946c:	00bfc716 	blt	zero,r2,80938c <__alt_mem_epcs_flash_controller_0+0xff80038c>
  809470:	00000106 	br	809478 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  809474:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809478:	0005303a 	rdctl	r2,status
  80947c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809480:	e0fff717 	ldw	r3,-36(fp)
  809484:	00bfff84 	movi	r2,-2
  809488:	1884703a 	and	r2,r3,r2
  80948c:	1001703a 	wrctl	status,r2
  
  return context;
  809490:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  809494:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  809498:	e0bffc17 	ldw	r2,-16(fp)
  80949c:	10800817 	ldw	r2,32(r2)
  8094a0:	10c00094 	ori	r3,r2,2
  8094a4:	e0bffc17 	ldw	r2,-16(fp)
  8094a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8094ac:	e0bffc17 	ldw	r2,-16(fp)
  8094b0:	10800017 	ldw	r2,0(r2)
  8094b4:	10800104 	addi	r2,r2,4
  8094b8:	1007883a 	mov	r3,r2
  8094bc:	e0bffc17 	ldw	r2,-16(fp)
  8094c0:	10800817 	ldw	r2,32(r2)
  8094c4:	18800035 	stwio	r2,0(r3)
  8094c8:	e0bff617 	ldw	r2,-40(fp)
  8094cc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8094d0:	e0bff317 	ldw	r2,-52(fp)
  8094d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8094d8:	e0bffe17 	ldw	r2,-8(fp)
  8094dc:	00802a0e 	bge	zero,r2,809588 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  8094e0:	e0bfff17 	ldw	r2,-4(fp)
  8094e4:	1090000c 	andi	r2,r2,16384
  8094e8:	10002a1e 	bne	r2,zero,809594 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8094ec:	d0a03343 	ldbu	r2,-32563(gp)
  8094f0:	10803fcc 	andi	r2,r2,255
  8094f4:	10800058 	cmpnei	r2,r2,1
  8094f8:	1000161e 	bne	r2,zero,809554 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  8094fc:	e0bffc17 	ldw	r2,-16(fp)
  809500:	10800c17 	ldw	r2,48(r2)
  809504:	e0bff515 	stw	r2,-44(fp)
  809508:	00800184 	movi	r2,6
  80950c:	e0bff98d 	sth	r2,-26(fp)
  809510:	00bfe0c4 	movi	r2,-125
  809514:	e0bffa05 	stb	r2,-24(fp)
  809518:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80951c:	d0a03343 	ldbu	r2,-32563(gp)
  809520:	10803fcc 	andi	r2,r2,255
  809524:	10001526 	beq	r2,zero,80957c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  809528:	e0fff98b 	ldhu	r3,-26(fp)
  80952c:	e13ffa03 	ldbu	r4,-24(fp)
  809530:	e17ffa8b 	ldhu	r5,-22(fp)
  809534:	e0bffb04 	addi	r2,fp,-20
  809538:	d8800015 	stw	r2,0(sp)
  80953c:	280f883a 	mov	r7,r5
  809540:	200d883a 	mov	r6,r4
  809544:	180b883a 	mov	r5,r3
  809548:	e13ff517 	ldw	r4,-44(fp)
  80954c:	0802f2c0 	call	802f2c <OSFlagPend>
  809550:	00000a06 	br	80957c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  809554:	0001883a 	nop
  809558:	e0bffc17 	ldw	r2,-16(fp)
  80955c:	10c01017 	ldw	r3,64(r2)
  809560:	e0bff017 	ldw	r2,-64(fp)
  809564:	1880051e 	bne	r3,r2,80957c <altera_avalon_jtag_uart_write+0x248>
  809568:	e0bffc17 	ldw	r2,-16(fp)
  80956c:	10c00917 	ldw	r3,36(r2)
  809570:	e0bffc17 	ldw	r2,-16(fp)
  809574:	10800117 	ldw	r2,4(r2)
  809578:	18bff736 	bltu	r3,r2,809558 <__alt_mem_epcs_flash_controller_0+0xff800558>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80957c:	e0bffc17 	ldw	r2,-16(fp)
  809580:	10800917 	ldw	r2,36(r2)
  809584:	1000051e 	bne	r2,zero,80959c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  809588:	e0bffe17 	ldw	r2,-8(fp)
  80958c:	00bfb616 	blt	zero,r2,809468 <__alt_mem_epcs_flash_controller_0+0xff800468>
  809590:	00000306 	br	8095a0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  809594:	0001883a 	nop
  809598:	00000106 	br	8095a0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80959c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8095a0:	e0bffc17 	ldw	r2,-16(fp)
  8095a4:	10800b17 	ldw	r2,44(r2)
  8095a8:	1009883a 	mov	r4,r2
  8095ac:	0805d180 	call	805d18 <OSSemPost>

  if (ptr != start)
  8095b0:	e0fffd17 	ldw	r3,-12(fp)
  8095b4:	e0bff217 	ldw	r2,-56(fp)
  8095b8:	18800426 	beq	r3,r2,8095cc <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  8095bc:	e0fffd17 	ldw	r3,-12(fp)
  8095c0:	e0bff217 	ldw	r2,-56(fp)
  8095c4:	1885c83a 	sub	r2,r3,r2
  8095c8:	00000606 	br	8095e4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  8095cc:	e0bfff17 	ldw	r2,-4(fp)
  8095d0:	1090000c 	andi	r2,r2,16384
  8095d4:	10000226 	beq	r2,zero,8095e0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  8095d8:	00bffd44 	movi	r2,-11
  8095dc:	00000106 	br	8095e4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8095e0:	00bffec4 	movi	r2,-5
}
  8095e4:	e037883a 	mov	sp,fp
  8095e8:	dfc00117 	ldw	ra,4(sp)
  8095ec:	df000017 	ldw	fp,0(sp)
  8095f0:	dec00204 	addi	sp,sp,8
  8095f4:	f800283a 	ret

008095f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8095f8:	defffa04 	addi	sp,sp,-24
  8095fc:	dfc00515 	stw	ra,20(sp)
  809600:	df000415 	stw	fp,16(sp)
  809604:	df000404 	addi	fp,sp,16
  809608:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80960c:	0007883a 	mov	r3,zero
  809610:	e0bfff17 	ldw	r2,-4(fp)
  809614:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  809618:	e0bfff17 	ldw	r2,-4(fp)
  80961c:	10800104 	addi	r2,r2,4
  809620:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809624:	0005303a 	rdctl	r2,status
  809628:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80962c:	e0fffd17 	ldw	r3,-12(fp)
  809630:	00bfff84 	movi	r2,-2
  809634:	1884703a 	and	r2,r3,r2
  809638:	1001703a 	wrctl	status,r2
  
  return context;
  80963c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  809640:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  809644:	080b4e80 	call	80b4e8 <alt_tick>
  809648:	e0bffc17 	ldw	r2,-16(fp)
  80964c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809650:	e0bffe17 	ldw	r2,-8(fp)
  809654:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  809658:	0001883a 	nop
  80965c:	e037883a 	mov	sp,fp
  809660:	dfc00117 	ldw	ra,4(sp)
  809664:	df000017 	ldw	fp,0(sp)
  809668:	dec00204 	addi	sp,sp,8
  80966c:	f800283a 	ret

00809670 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  809670:	defff804 	addi	sp,sp,-32
  809674:	dfc00715 	stw	ra,28(sp)
  809678:	df000615 	stw	fp,24(sp)
  80967c:	df000604 	addi	fp,sp,24
  809680:	e13ffc15 	stw	r4,-16(fp)
  809684:	e17ffd15 	stw	r5,-12(fp)
  809688:	e1bffe15 	stw	r6,-8(fp)
  80968c:	e1ffff15 	stw	r7,-4(fp)
  809690:	e0bfff17 	ldw	r2,-4(fp)
  809694:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  809698:	d0a04917 	ldw	r2,-32476(gp)
  80969c:	1000021e 	bne	r2,zero,8096a8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8096a0:	e0bffb17 	ldw	r2,-20(fp)
  8096a4:	d0a04915 	stw	r2,-32476(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8096a8:	e0bffc17 	ldw	r2,-16(fp)
  8096ac:	10800104 	addi	r2,r2,4
  8096b0:	00c001c4 	movi	r3,7
  8096b4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8096b8:	d8000015 	stw	zero,0(sp)
  8096bc:	e1fffc17 	ldw	r7,-16(fp)
  8096c0:	01802074 	movhi	r6,129
  8096c4:	31a57e04 	addi	r6,r6,-27144
  8096c8:	e17ffe17 	ldw	r5,-8(fp)
  8096cc:	e13ffd17 	ldw	r4,-12(fp)
  8096d0:	080ad440 	call	80ad44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8096d4:	0001883a 	nop
  8096d8:	e037883a 	mov	sp,fp
  8096dc:	dfc00117 	ldw	ra,4(sp)
  8096e0:	df000017 	ldw	fp,0(sp)
  8096e4:	dec00204 	addi	sp,sp,8
  8096e8:	f800283a 	ret

008096ec <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8096ec:	defffa04 	addi	sp,sp,-24
  8096f0:	dfc00515 	stw	ra,20(sp)
  8096f4:	df000415 	stw	fp,16(sp)
  8096f8:	df000404 	addi	fp,sp,16
  8096fc:	e13ffd15 	stw	r4,-12(fp)
  809700:	e17ffe15 	stw	r5,-8(fp)
  809704:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809708:	e0bffd17 	ldw	r2,-12(fp)
  80970c:	10800017 	ldw	r2,0(r2)
  809710:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  809714:	e0bffc17 	ldw	r2,-16(fp)
  809718:	10c00a04 	addi	r3,r2,40
  80971c:	e0bffd17 	ldw	r2,-12(fp)
  809720:	10800217 	ldw	r2,8(r2)
  809724:	100f883a 	mov	r7,r2
  809728:	e1bfff17 	ldw	r6,-4(fp)
  80972c:	e17ffe17 	ldw	r5,-8(fp)
  809730:	1809883a 	mov	r4,r3
  809734:	0809d640 	call	809d64 <altera_avalon_uart_read>
      fd->fd_flags);
}
  809738:	e037883a 	mov	sp,fp
  80973c:	dfc00117 	ldw	ra,4(sp)
  809740:	df000017 	ldw	fp,0(sp)
  809744:	dec00204 	addi	sp,sp,8
  809748:	f800283a 	ret

0080974c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80974c:	defffa04 	addi	sp,sp,-24
  809750:	dfc00515 	stw	ra,20(sp)
  809754:	df000415 	stw	fp,16(sp)
  809758:	df000404 	addi	fp,sp,16
  80975c:	e13ffd15 	stw	r4,-12(fp)
  809760:	e17ffe15 	stw	r5,-8(fp)
  809764:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809768:	e0bffd17 	ldw	r2,-12(fp)
  80976c:	10800017 	ldw	r2,0(r2)
  809770:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  809774:	e0bffc17 	ldw	r2,-16(fp)
  809778:	10c00a04 	addi	r3,r2,40
  80977c:	e0bffd17 	ldw	r2,-12(fp)
  809780:	10800217 	ldw	r2,8(r2)
  809784:	100f883a 	mov	r7,r2
  809788:	e1bfff17 	ldw	r6,-4(fp)
  80978c:	e17ffe17 	ldw	r5,-8(fp)
  809790:	1809883a 	mov	r4,r3
  809794:	080a0080 	call	80a008 <altera_avalon_uart_write>
      fd->fd_flags);
}
  809798:	e037883a 	mov	sp,fp
  80979c:	dfc00117 	ldw	ra,4(sp)
  8097a0:	df000017 	ldw	fp,0(sp)
  8097a4:	dec00204 	addi	sp,sp,8
  8097a8:	f800283a 	ret

008097ac <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8097ac:	defffc04 	addi	sp,sp,-16
  8097b0:	dfc00315 	stw	ra,12(sp)
  8097b4:	df000215 	stw	fp,8(sp)
  8097b8:	df000204 	addi	fp,sp,8
  8097bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8097c0:	e0bfff17 	ldw	r2,-4(fp)
  8097c4:	10800017 	ldw	r2,0(r2)
  8097c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8097cc:	e0bffe17 	ldw	r2,-8(fp)
  8097d0:	10c00a04 	addi	r3,r2,40
  8097d4:	e0bfff17 	ldw	r2,-4(fp)
  8097d8:	10800217 	ldw	r2,8(r2)
  8097dc:	100b883a 	mov	r5,r2
  8097e0:	1809883a 	mov	r4,r3
  8097e4:	0809cd40 	call	809cd4 <altera_avalon_uart_close>
}
  8097e8:	e037883a 	mov	sp,fp
  8097ec:	dfc00117 	ldw	ra,4(sp)
  8097f0:	df000017 	ldw	fp,0(sp)
  8097f4:	dec00204 	addi	sp,sp,8
  8097f8:	f800283a 	ret

008097fc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8097fc:	defff304 	addi	sp,sp,-52
  809800:	dfc00c15 	stw	ra,48(sp)
  809804:	df000b15 	stw	fp,44(sp)
  809808:	df000b04 	addi	fp,sp,44
  80980c:	e13ffd15 	stw	r4,-12(fp)
  809810:	e17ffe15 	stw	r5,-8(fp)
  809814:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  809818:	e0bffd17 	ldw	r2,-12(fp)
  80981c:	10800017 	ldw	r2,0(r2)
  809820:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  809824:	e0bffd17 	ldw	r2,-12(fp)
  809828:	10800704 	addi	r2,r2,28
  80982c:	e0bffa15 	stw	r2,-24(fp)
  809830:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  809834:	e0bffb0b 	ldhu	r2,-20(fp)
  809838:	e0fffc84 	addi	r3,fp,-14
  80983c:	180b883a 	mov	r5,r3
  809840:	1009883a 	mov	r4,r2
  809844:	08029680 	call	802968 <OSFlagCreate>
  809848:	1007883a 	mov	r3,r2
  80984c:	e0bffa17 	ldw	r2,-24(fp)
  809850:	10c00015 	stw	r3,0(r2)
  return err;
  809854:	e0bffc83 	ldbu	r2,-14(fp)
  809858:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80985c:	1000241e 	bne	r2,zero,8098f0 <altera_avalon_uart_init+0xf4>
  809860:	e0bffd17 	ldw	r2,-12(fp)
  809864:	10800804 	addi	r2,r2,32
  809868:	e0bff715 	stw	r2,-36(fp)
  80986c:	00800044 	movi	r2,1
  809870:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  809874:	e0bffb8b 	ldhu	r2,-18(fp)
  809878:	1009883a 	mov	r4,r2
  80987c:	08056880 	call	805688 <OSSemCreate>
  809880:	1007883a 	mov	r3,r2
  809884:	e0bff717 	ldw	r2,-36(fp)
  809888:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  80988c:	e0bff717 	ldw	r2,-36(fp)
  809890:	10800017 	ldw	r2,0(r2)
  809894:	10000226 	beq	r2,zero,8098a0 <altera_avalon_uart_init+0xa4>
  809898:	0005883a 	mov	r2,zero
  80989c:	00000106 	br	8098a4 <altera_avalon_uart_init+0xa8>
  8098a0:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8098a4:	1000121e 	bne	r2,zero,8098f0 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  8098a8:	e0bffd17 	ldw	r2,-12(fp)
  8098ac:	10800904 	addi	r2,r2,36
  8098b0:	e0bff815 	stw	r2,-32(fp)
  8098b4:	00800044 	movi	r2,1
  8098b8:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8098bc:	e0bffc0b 	ldhu	r2,-16(fp)
  8098c0:	1009883a 	mov	r4,r2
  8098c4:	08056880 	call	805688 <OSSemCreate>
  8098c8:	1007883a 	mov	r3,r2
  8098cc:	e0bff817 	ldw	r2,-32(fp)
  8098d0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  8098d4:	e0bff817 	ldw	r2,-32(fp)
  8098d8:	10800017 	ldw	r2,0(r2)
  8098dc:	10000226 	beq	r2,zero,8098e8 <altera_avalon_uart_init+0xec>
  8098e0:	0005883a 	mov	r2,zero
  8098e4:	00000106 	br	8098ec <altera_avalon_uart_init+0xf0>
  8098e8:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8098ec:	10000226 	beq	r2,zero,8098f8 <altera_avalon_uart_init+0xfc>
  8098f0:	00800044 	movi	r2,1
  8098f4:	00000106 	br	8098fc <altera_avalon_uart_init+0x100>
  8098f8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8098fc:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  809900:	e0bff917 	ldw	r2,-28(fp)
  809904:	10000f1e 	bne	r2,zero,809944 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  809908:	e0bffd17 	ldw	r2,-12(fp)
  80990c:	00c32004 	movi	r3,3200
  809910:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  809914:	e0bff617 	ldw	r2,-40(fp)
  809918:	10800304 	addi	r2,r2,12
  80991c:	e0fffd17 	ldw	r3,-12(fp)
  809920:	18c00117 	ldw	r3,4(r3)
  809924:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  809928:	d8000015 	stw	zero,0(sp)
  80992c:	e1fffd17 	ldw	r7,-12(fp)
  809930:	01802074 	movhi	r6,129
  809934:	31a65704 	addi	r6,r6,-26276
  809938:	e17fff17 	ldw	r5,-4(fp)
  80993c:	e13ffe17 	ldw	r4,-8(fp)
  809940:	080ad440 	call	80ad44 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  809944:	0001883a 	nop
  809948:	e037883a 	mov	sp,fp
  80994c:	dfc00117 	ldw	ra,4(sp)
  809950:	df000017 	ldw	fp,0(sp)
  809954:	dec00204 	addi	sp,sp,8
  809958:	f800283a 	ret

0080995c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80995c:	defffa04 	addi	sp,sp,-24
  809960:	dfc00515 	stw	ra,20(sp)
  809964:	df000415 	stw	fp,16(sp)
  809968:	df000404 	addi	fp,sp,16
  80996c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  809970:	e0bfff17 	ldw	r2,-4(fp)
  809974:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  809978:	e0bffc17 	ldw	r2,-16(fp)
  80997c:	10800017 	ldw	r2,0(r2)
  809980:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  809984:	e0bffd17 	ldw	r2,-12(fp)
  809988:	10800204 	addi	r2,r2,8
  80998c:	10800037 	ldwio	r2,0(r2)
  809990:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  809994:	e0bffd17 	ldw	r2,-12(fp)
  809998:	10800204 	addi	r2,r2,8
  80999c:	0007883a 	mov	r3,zero
  8099a0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8099a4:	e0bffd17 	ldw	r2,-12(fp)
  8099a8:	10800204 	addi	r2,r2,8
  8099ac:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8099b0:	e0bffe17 	ldw	r2,-8(fp)
  8099b4:	1080200c 	andi	r2,r2,128
  8099b8:	10000326 	beq	r2,zero,8099c8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8099bc:	e17ffe17 	ldw	r5,-8(fp)
  8099c0:	e13ffc17 	ldw	r4,-16(fp)
  8099c4:	08099f80 	call	8099f8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8099c8:	e0bffe17 	ldw	r2,-8(fp)
  8099cc:	1081100c 	andi	r2,r2,1088
  8099d0:	10000326 	beq	r2,zero,8099e0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8099d4:	e17ffe17 	ldw	r5,-8(fp)
  8099d8:	e13ffc17 	ldw	r4,-16(fp)
  8099dc:	0809b300 	call	809b30 <altera_avalon_uart_txirq>
  }
  

}
  8099e0:	0001883a 	nop
  8099e4:	e037883a 	mov	sp,fp
  8099e8:	dfc00117 	ldw	ra,4(sp)
  8099ec:	df000017 	ldw	fp,0(sp)
  8099f0:	dec00204 	addi	sp,sp,8
  8099f4:	f800283a 	ret

008099f8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8099f8:	defff904 	addi	sp,sp,-28
  8099fc:	dfc00615 	stw	ra,24(sp)
  809a00:	df000515 	stw	fp,20(sp)
  809a04:	df000504 	addi	fp,sp,20
  809a08:	e13ffe15 	stw	r4,-8(fp)
  809a0c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  809a10:	e0bfff17 	ldw	r2,-4(fp)
  809a14:	108000cc 	andi	r2,r2,3
  809a18:	10003f1e 	bne	r2,zero,809b18 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  809a1c:	e0bffe17 	ldw	r2,-8(fp)
  809a20:	10c00317 	ldw	r3,12(r2)
  809a24:	e0bffe17 	ldw	r2,-8(fp)
  809a28:	10800217 	ldw	r2,8(r2)
  809a2c:	1880121e 	bne	r3,r2,809a78 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  809a30:	e0bffe17 	ldw	r2,-8(fp)
  809a34:	10800717 	ldw	r2,28(r2)
  809a38:	e0bffc15 	stw	r2,-16(fp)
  809a3c:	00800044 	movi	r2,1
  809a40:	e0bffd0d 	sth	r2,-12(fp)
  809a44:	00800044 	movi	r2,1
  809a48:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  809a4c:	d0a03343 	ldbu	r2,-32563(gp)
  809a50:	10803fcc 	andi	r2,r2,255
  809a54:	10000826 	beq	r2,zero,809a78 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  809a58:	e0bffd0b 	ldhu	r2,-12(fp)
  809a5c:	e0fffd83 	ldbu	r3,-10(fp)
  809a60:	e13ffdc4 	addi	r4,fp,-9
  809a64:	200f883a 	mov	r7,r4
  809a68:	180d883a 	mov	r6,r3
  809a6c:	100b883a 	mov	r5,r2
  809a70:	e13ffc17 	ldw	r4,-16(fp)
  809a74:	08035440 	call	803544 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809a78:	e0bffe17 	ldw	r2,-8(fp)
  809a7c:	10800317 	ldw	r2,12(r2)
  809a80:	10800044 	addi	r2,r2,1
  809a84:	10800fcc 	andi	r2,r2,63
  809a88:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  809a8c:	e0bffe17 	ldw	r2,-8(fp)
  809a90:	10800317 	ldw	r2,12(r2)
  809a94:	e0fffe17 	ldw	r3,-8(fp)
  809a98:	18c00017 	ldw	r3,0(r3)
  809a9c:	18c00037 	ldwio	r3,0(r3)
  809aa0:	1809883a 	mov	r4,r3
  809aa4:	e0fffe17 	ldw	r3,-8(fp)
  809aa8:	1885883a 	add	r2,r3,r2
  809aac:	10800a04 	addi	r2,r2,40
  809ab0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  809ab4:	e0bffe17 	ldw	r2,-8(fp)
  809ab8:	e0fffb17 	ldw	r3,-20(fp)
  809abc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809ac0:	e0bffe17 	ldw	r2,-8(fp)
  809ac4:	10800317 	ldw	r2,12(r2)
  809ac8:	10800044 	addi	r2,r2,1
  809acc:	10800fcc 	andi	r2,r2,63
  809ad0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  809ad4:	e0bffe17 	ldw	r2,-8(fp)
  809ad8:	10c00217 	ldw	r3,8(r2)
  809adc:	e0bffb17 	ldw	r2,-20(fp)
  809ae0:	18800e1e 	bne	r3,r2,809b1c <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809ae4:	e0bffe17 	ldw	r2,-8(fp)
  809ae8:	10c00117 	ldw	r3,4(r2)
  809aec:	00bfdfc4 	movi	r2,-129
  809af0:	1886703a 	and	r3,r3,r2
  809af4:	e0bffe17 	ldw	r2,-8(fp)
  809af8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  809afc:	e0bffe17 	ldw	r2,-8(fp)
  809b00:	10800017 	ldw	r2,0(r2)
  809b04:	10800304 	addi	r2,r2,12
  809b08:	e0fffe17 	ldw	r3,-8(fp)
  809b0c:	18c00117 	ldw	r3,4(r3)
  809b10:	10c00035 	stwio	r3,0(r2)
  809b14:	00000106 	br	809b1c <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  809b18:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  809b1c:	e037883a 	mov	sp,fp
  809b20:	dfc00117 	ldw	ra,4(sp)
  809b24:	df000017 	ldw	fp,0(sp)
  809b28:	dec00204 	addi	sp,sp,8
  809b2c:	f800283a 	ret

00809b30 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  809b30:	defffa04 	addi	sp,sp,-24
  809b34:	dfc00515 	stw	ra,20(sp)
  809b38:	df000415 	stw	fp,16(sp)
  809b3c:	df000404 	addi	fp,sp,16
  809b40:	e13ffe15 	stw	r4,-8(fp)
  809b44:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  809b48:	e0bffe17 	ldw	r2,-8(fp)
  809b4c:	10c00417 	ldw	r3,16(r2)
  809b50:	e0bffe17 	ldw	r2,-8(fp)
  809b54:	10800517 	ldw	r2,20(r2)
  809b58:	18804726 	beq	r3,r2,809c78 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  809b5c:	e0bffe17 	ldw	r2,-8(fp)
  809b60:	10800617 	ldw	r2,24(r2)
  809b64:	1080008c 	andi	r2,r2,2
  809b68:	10000326 	beq	r2,zero,809b78 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  809b6c:	e0bfff17 	ldw	r2,-4(fp)
  809b70:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  809b74:	10003226 	beq	r2,zero,809c40 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  809b78:	e0bffe17 	ldw	r2,-8(fp)
  809b7c:	10c00417 	ldw	r3,16(r2)
  809b80:	e0bffe17 	ldw	r2,-8(fp)
  809b84:	10800517 	ldw	r2,20(r2)
  809b88:	10800044 	addi	r2,r2,1
  809b8c:	10800fcc 	andi	r2,r2,63
  809b90:	1880121e 	bne	r3,r2,809bdc <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  809b94:	e0bffe17 	ldw	r2,-8(fp)
  809b98:	10800717 	ldw	r2,28(r2)
  809b9c:	e0bffc15 	stw	r2,-16(fp)
  809ba0:	00800084 	movi	r2,2
  809ba4:	e0bffd0d 	sth	r2,-12(fp)
  809ba8:	00800044 	movi	r2,1
  809bac:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  809bb0:	d0a03343 	ldbu	r2,-32563(gp)
  809bb4:	10803fcc 	andi	r2,r2,255
  809bb8:	10000826 	beq	r2,zero,809bdc <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  809bbc:	e0bffd0b 	ldhu	r2,-12(fp)
  809bc0:	e0fffd83 	ldbu	r3,-10(fp)
  809bc4:	e13ffdc4 	addi	r4,fp,-9
  809bc8:	200f883a 	mov	r7,r4
  809bcc:	180d883a 	mov	r6,r3
  809bd0:	100b883a 	mov	r5,r2
  809bd4:	e13ffc17 	ldw	r4,-16(fp)
  809bd8:	08035440 	call	803544 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  809bdc:	e0bffe17 	ldw	r2,-8(fp)
  809be0:	10800017 	ldw	r2,0(r2)
  809be4:	10800104 	addi	r2,r2,4
  809be8:	e0fffe17 	ldw	r3,-8(fp)
  809bec:	18c00417 	ldw	r3,16(r3)
  809bf0:	e13ffe17 	ldw	r4,-8(fp)
  809bf4:	20c7883a 	add	r3,r4,r3
  809bf8:	18c01a04 	addi	r3,r3,104
  809bfc:	18c00003 	ldbu	r3,0(r3)
  809c00:	18c03fcc 	andi	r3,r3,255
  809c04:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  809c08:	e0bffe17 	ldw	r2,-8(fp)
  809c0c:	10800417 	ldw	r2,16(r2)
  809c10:	10800044 	addi	r2,r2,1
  809c14:	e0fffe17 	ldw	r3,-8(fp)
  809c18:	18800415 	stw	r2,16(r3)
  809c1c:	10c00fcc 	andi	r3,r2,63
  809c20:	e0bffe17 	ldw	r2,-8(fp)
  809c24:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809c28:	e0bffe17 	ldw	r2,-8(fp)
  809c2c:	10800117 	ldw	r2,4(r2)
  809c30:	10c01014 	ori	r3,r2,64
  809c34:	e0bffe17 	ldw	r2,-8(fp)
  809c38:	10c00115 	stw	r3,4(r2)
  809c3c:	00000e06 	br	809c78 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  809c40:	e0bffe17 	ldw	r2,-8(fp)
  809c44:	10800017 	ldw	r2,0(r2)
  809c48:	10800204 	addi	r2,r2,8
  809c4c:	10800037 	ldwio	r2,0(r2)
  809c50:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  809c54:	e0bfff17 	ldw	r2,-4(fp)
  809c58:	1082000c 	andi	r2,r2,2048
  809c5c:	1000061e 	bne	r2,zero,809c78 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809c60:	e0bffe17 	ldw	r2,-8(fp)
  809c64:	10c00117 	ldw	r3,4(r2)
  809c68:	00bfefc4 	movi	r2,-65
  809c6c:	1886703a 	and	r3,r3,r2
  809c70:	e0bffe17 	ldw	r2,-8(fp)
  809c74:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  809c78:	e0bffe17 	ldw	r2,-8(fp)
  809c7c:	10c00417 	ldw	r3,16(r2)
  809c80:	e0bffe17 	ldw	r2,-8(fp)
  809c84:	10800517 	ldw	r2,20(r2)
  809c88:	1880061e 	bne	r3,r2,809ca4 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  809c8c:	e0bffe17 	ldw	r2,-8(fp)
  809c90:	10c00117 	ldw	r3,4(r2)
  809c94:	00beefc4 	movi	r2,-1089
  809c98:	1886703a 	and	r3,r3,r2
  809c9c:	e0bffe17 	ldw	r2,-8(fp)
  809ca0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809ca4:	e0bffe17 	ldw	r2,-8(fp)
  809ca8:	10800017 	ldw	r2,0(r2)
  809cac:	10800304 	addi	r2,r2,12
  809cb0:	e0fffe17 	ldw	r3,-8(fp)
  809cb4:	18c00117 	ldw	r3,4(r3)
  809cb8:	10c00035 	stwio	r3,0(r2)
}
  809cbc:	0001883a 	nop
  809cc0:	e037883a 	mov	sp,fp
  809cc4:	dfc00117 	ldw	ra,4(sp)
  809cc8:	df000017 	ldw	fp,0(sp)
  809ccc:	dec00204 	addi	sp,sp,8
  809cd0:	f800283a 	ret

00809cd4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  809cd4:	defffd04 	addi	sp,sp,-12
  809cd8:	df000215 	stw	fp,8(sp)
  809cdc:	df000204 	addi	fp,sp,8
  809ce0:	e13ffe15 	stw	r4,-8(fp)
  809ce4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  809ce8:	00000506 	br	809d00 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  809cec:	e0bfff17 	ldw	r2,-4(fp)
  809cf0:	1090000c 	andi	r2,r2,16384
  809cf4:	10000226 	beq	r2,zero,809d00 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  809cf8:	00bffd44 	movi	r2,-11
  809cfc:	00000606 	br	809d18 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  809d00:	e0bffe17 	ldw	r2,-8(fp)
  809d04:	10c00417 	ldw	r3,16(r2)
  809d08:	e0bffe17 	ldw	r2,-8(fp)
  809d0c:	10800517 	ldw	r2,20(r2)
  809d10:	18bff61e 	bne	r3,r2,809cec <__alt_mem_epcs_flash_controller_0+0xff800cec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  809d14:	0005883a 	mov	r2,zero
}
  809d18:	e037883a 	mov	sp,fp
  809d1c:	df000017 	ldw	fp,0(sp)
  809d20:	dec00104 	addi	sp,sp,4
  809d24:	f800283a 	ret

00809d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809d28:	defffe04 	addi	sp,sp,-8
  809d2c:	dfc00115 	stw	ra,4(sp)
  809d30:	df000015 	stw	fp,0(sp)
  809d34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809d38:	d0a02417 	ldw	r2,-32624(gp)
  809d3c:	10000326 	beq	r2,zero,809d4c <alt_get_errno+0x24>
  809d40:	d0a02417 	ldw	r2,-32624(gp)
  809d44:	103ee83a 	callr	r2
  809d48:	00000106 	br	809d50 <alt_get_errno+0x28>
  809d4c:	d0a04c04 	addi	r2,gp,-32464
}
  809d50:	e037883a 	mov	sp,fp
  809d54:	dfc00117 	ldw	ra,4(sp)
  809d58:	df000017 	ldw	fp,0(sp)
  809d5c:	dec00204 	addi	sp,sp,8
  809d60:	f800283a 	ret

00809d64 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  809d64:	deffec04 	addi	sp,sp,-80
  809d68:	dfc01315 	stw	ra,76(sp)
  809d6c:	df001215 	stw	fp,72(sp)
  809d70:	df001204 	addi	fp,sp,72
  809d74:	e13ffc15 	stw	r4,-16(fp)
  809d78:	e17ffd15 	stw	r5,-12(fp)
  809d7c:	e1bffe15 	stw	r6,-8(fp)
  809d80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  809d84:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  809d88:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  809d8c:	e0bfff17 	ldw	r2,-4(fp)
  809d90:	1090000c 	andi	r2,r2,16384
  809d94:	1005003a 	cmpeq	r2,r2,zero
  809d98:	10803fcc 	andi	r2,r2,255
  809d9c:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  809da0:	e0bffc17 	ldw	r2,-16(fp)
  809da4:	10800817 	ldw	r2,32(r2)
  809da8:	e0bff815 	stw	r2,-32(fp)
  809dac:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  809db0:	e0bff90b 	ldhu	r2,-28(fp)
  809db4:	e0fffb44 	addi	r3,fp,-19
  809db8:	180d883a 	mov	r6,r3
  809dbc:	100b883a 	mov	r5,r2
  809dc0:	e13ff817 	ldw	r4,-32(fp)
  809dc4:	08059a00 	call	8059a0 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  809dc8:	00001306 	br	809e18 <altera_avalon_uart_read+0xb4>
    {
      count++;
  809dcc:	e0bff017 	ldw	r2,-64(fp)
  809dd0:	10800044 	addi	r2,r2,1
  809dd4:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  809dd8:	e0bffd17 	ldw	r2,-12(fp)
  809ddc:	10c00044 	addi	r3,r2,1
  809de0:	e0fffd15 	stw	r3,-12(fp)
  809de4:	e0fffc17 	ldw	r3,-16(fp)
  809de8:	18c00217 	ldw	r3,8(r3)
  809dec:	e13ffc17 	ldw	r4,-16(fp)
  809df0:	20c7883a 	add	r3,r4,r3
  809df4:	18c00a04 	addi	r3,r3,40
  809df8:	18c00003 	ldbu	r3,0(r3)
  809dfc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  809e00:	e0bffc17 	ldw	r2,-16(fp)
  809e04:	10800217 	ldw	r2,8(r2)
  809e08:	10800044 	addi	r2,r2,1
  809e0c:	10c00fcc 	andi	r3,r2,63
  809e10:	e0bffc17 	ldw	r2,-16(fp)
  809e14:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  809e18:	e0fff017 	ldw	r3,-64(fp)
  809e1c:	e0bffe17 	ldw	r2,-8(fp)
  809e20:	1880050e 	bge	r3,r2,809e38 <altera_avalon_uart_read+0xd4>
  809e24:	e0bffc17 	ldw	r2,-16(fp)
  809e28:	10c00217 	ldw	r3,8(r2)
  809e2c:	e0bffc17 	ldw	r2,-16(fp)
  809e30:	10800317 	ldw	r2,12(r2)
  809e34:	18bfe51e 	bne	r3,r2,809dcc <__alt_mem_epcs_flash_controller_0+0xff800dcc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  809e38:	e0bff017 	ldw	r2,-64(fp)
  809e3c:	10003a1e 	bne	r2,zero,809f28 <altera_avalon_uart_read+0x1c4>
  809e40:	e0bffc17 	ldw	r2,-16(fp)
  809e44:	10c00217 	ldw	r3,8(r2)
  809e48:	e0bffc17 	ldw	r2,-16(fp)
  809e4c:	10800317 	ldw	r2,12(r2)
  809e50:	1880351e 	bne	r3,r2,809f28 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  809e54:	e0bff117 	ldw	r2,-60(fp)
  809e58:	1000071e 	bne	r2,zero,809e78 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  809e5c:	0809d280 	call	809d28 <alt_get_errno>
  809e60:	1007883a 	mov	r3,r2
  809e64:	008002c4 	movi	r2,11
  809e68:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  809e6c:	00800044 	movi	r2,1
  809e70:	e0bfef05 	stb	r2,-68(fp)
        break;
  809e74:	00003006 	br	809f38 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809e78:	0005303a 	rdctl	r2,status
  809e7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809e80:	e0fff517 	ldw	r3,-44(fp)
  809e84:	00bfff84 	movi	r2,-2
  809e88:	1884703a 	and	r2,r3,r2
  809e8c:	1001703a 	wrctl	status,r2
  
  return context;
  809e90:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  809e94:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809e98:	e0bffc17 	ldw	r2,-16(fp)
  809e9c:	10800117 	ldw	r2,4(r2)
  809ea0:	10c02014 	ori	r3,r2,128
  809ea4:	e0bffc17 	ldw	r2,-16(fp)
  809ea8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809eac:	e0bffc17 	ldw	r2,-16(fp)
  809eb0:	10800017 	ldw	r2,0(r2)
  809eb4:	10800304 	addi	r2,r2,12
  809eb8:	e0fffc17 	ldw	r3,-16(fp)
  809ebc:	18c00117 	ldw	r3,4(r3)
  809ec0:	10c00035 	stwio	r3,0(r2)
  809ec4:	e0bff417 	ldw	r2,-48(fp)
  809ec8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809ecc:	e0bff617 	ldw	r2,-40(fp)
  809ed0:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  809ed4:	e0bffc17 	ldw	r2,-16(fp)
  809ed8:	10800717 	ldw	r2,28(r2)
  809edc:	e0bff215 	stw	r2,-56(fp)
  809ee0:	00800044 	movi	r2,1
  809ee4:	e0bff98d 	sth	r2,-26(fp)
  809ee8:	00bfe0c4 	movi	r2,-125
  809eec:	e0bffa05 	stb	r2,-24(fp)
  809ef0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  809ef4:	d0a03343 	ldbu	r2,-32563(gp)
  809ef8:	10803fcc 	andi	r2,r2,255
  809efc:	10000a26 	beq	r2,zero,809f28 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  809f00:	e0fff98b 	ldhu	r3,-26(fp)
  809f04:	e13ffa03 	ldbu	r4,-24(fp)
  809f08:	e17ffa8b 	ldhu	r5,-22(fp)
  809f0c:	e0bffb04 	addi	r2,fp,-20
  809f10:	d8800015 	stw	r2,0(sp)
  809f14:	280f883a 	mov	r7,r5
  809f18:	200d883a 	mov	r6,r4
  809f1c:	180b883a 	mov	r5,r3
  809f20:	e13ff217 	ldw	r4,-56(fp)
  809f24:	0802f2c0 	call	802f2c <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  809f28:	e0bff017 	ldw	r2,-64(fp)
  809f2c:	1000021e 	bne	r2,zero,809f38 <altera_avalon_uart_read+0x1d4>
  809f30:	e0bffe17 	ldw	r2,-8(fp)
  809f34:	103fb81e 	bne	r2,zero,809e18 <__alt_mem_epcs_flash_controller_0+0xff800e18>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  809f38:	e0bffc17 	ldw	r2,-16(fp)
  809f3c:	10800817 	ldw	r2,32(r2)
  809f40:	1009883a 	mov	r4,r2
  809f44:	0805d180 	call	805d18 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809f48:	0005303a 	rdctl	r2,status
  809f4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809f50:	e0fff717 	ldw	r3,-36(fp)
  809f54:	00bfff84 	movi	r2,-2
  809f58:	1884703a 	and	r2,r3,r2
  809f5c:	1001703a 	wrctl	status,r2
  
  return context;
  809f60:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  809f64:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809f68:	e0bffc17 	ldw	r2,-16(fp)
  809f6c:	10800117 	ldw	r2,4(r2)
  809f70:	10c02014 	ori	r3,r2,128
  809f74:	e0bffc17 	ldw	r2,-16(fp)
  809f78:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809f7c:	e0bffc17 	ldw	r2,-16(fp)
  809f80:	10800017 	ldw	r2,0(r2)
  809f84:	10800304 	addi	r2,r2,12
  809f88:	e0fffc17 	ldw	r3,-16(fp)
  809f8c:	18c00117 	ldw	r3,4(r3)
  809f90:	10c00035 	stwio	r3,0(r2)
  809f94:	e0bff417 	ldw	r2,-48(fp)
  809f98:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809f9c:	e0bff317 	ldw	r2,-52(fp)
  809fa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  809fa4:	e0bfef03 	ldbu	r2,-68(fp)
  809fa8:	10000226 	beq	r2,zero,809fb4 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  809fac:	00bffd44 	movi	r2,-11
  809fb0:	00000106 	br	809fb8 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  809fb4:	e0bff017 	ldw	r2,-64(fp)
  }
}
  809fb8:	e037883a 	mov	sp,fp
  809fbc:	dfc00117 	ldw	ra,4(sp)
  809fc0:	df000017 	ldw	fp,0(sp)
  809fc4:	dec00204 	addi	sp,sp,8
  809fc8:	f800283a 	ret

00809fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809fcc:	defffe04 	addi	sp,sp,-8
  809fd0:	dfc00115 	stw	ra,4(sp)
  809fd4:	df000015 	stw	fp,0(sp)
  809fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809fdc:	d0a02417 	ldw	r2,-32624(gp)
  809fe0:	10000326 	beq	r2,zero,809ff0 <alt_get_errno+0x24>
  809fe4:	d0a02417 	ldw	r2,-32624(gp)
  809fe8:	103ee83a 	callr	r2
  809fec:	00000106 	br	809ff4 <alt_get_errno+0x28>
  809ff0:	d0a04c04 	addi	r2,gp,-32464
}
  809ff4:	e037883a 	mov	sp,fp
  809ff8:	dfc00117 	ldw	ra,4(sp)
  809ffc:	df000017 	ldw	fp,0(sp)
  80a000:	dec00204 	addi	sp,sp,8
  80a004:	f800283a 	ret

0080a008 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80a008:	deffec04 	addi	sp,sp,-80
  80a00c:	dfc01315 	stw	ra,76(sp)
  80a010:	df001215 	stw	fp,72(sp)
  80a014:	df001204 	addi	fp,sp,72
  80a018:	e13ffc15 	stw	r4,-16(fp)
  80a01c:	e17ffd15 	stw	r5,-12(fp)
  80a020:	e1bffe15 	stw	r6,-8(fp)
  80a024:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80a028:	e0bffe17 	ldw	r2,-8(fp)
  80a02c:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80a030:	e0bfff17 	ldw	r2,-4(fp)
  80a034:	1090000c 	andi	r2,r2,16384
  80a038:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  80a03c:	e0bffc17 	ldw	r2,-16(fp)
  80a040:	10800917 	ldw	r2,36(r2)
  80a044:	e0bff815 	stw	r2,-32(fp)
  80a048:	e03ff90d 	sth	zero,-28(fp)
  80a04c:	e0bff90b 	ldhu	r2,-28(fp)
  80a050:	e0fffb44 	addi	r3,fp,-19
  80a054:	180d883a 	mov	r6,r3
  80a058:	100b883a 	mov	r5,r2
  80a05c:	e13ff817 	ldw	r4,-32(fp)
  80a060:	08059a00 	call	8059a0 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80a064:	00005106 	br	80a1ac <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80a068:	e0bffc17 	ldw	r2,-16(fp)
  80a06c:	10800517 	ldw	r2,20(r2)
  80a070:	10800044 	addi	r2,r2,1
  80a074:	10800fcc 	andi	r2,r2,63
  80a078:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80a07c:	e0bffc17 	ldw	r2,-16(fp)
  80a080:	10c00417 	ldw	r3,16(r2)
  80a084:	e0bff217 	ldw	r2,-56(fp)
  80a088:	1880371e 	bne	r3,r2,80a168 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  80a08c:	e0bff017 	ldw	r2,-64(fp)
  80a090:	10000526 	beq	r2,zero,80a0a8 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80a094:	0809fcc0 	call	809fcc <alt_get_errno>
  80a098:	1007883a 	mov	r3,r2
  80a09c:	008002c4 	movi	r2,11
  80a0a0:	18800015 	stw	r2,0(r3)
        break;
  80a0a4:	00004306 	br	80a1b4 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a0a8:	0005303a 	rdctl	r2,status
  80a0ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a0b0:	e0fff517 	ldw	r3,-44(fp)
  80a0b4:	00bfff84 	movi	r2,-2
  80a0b8:	1884703a 	and	r2,r3,r2
  80a0bc:	1001703a 	wrctl	status,r2
  
  return context;
  80a0c0:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80a0c4:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80a0c8:	e0bffc17 	ldw	r2,-16(fp)
  80a0cc:	10800117 	ldw	r2,4(r2)
  80a0d0:	10c11014 	ori	r3,r2,1088
  80a0d4:	e0bffc17 	ldw	r2,-16(fp)
  80a0d8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a0dc:	e0bffc17 	ldw	r2,-16(fp)
  80a0e0:	10800017 	ldw	r2,0(r2)
  80a0e4:	10800304 	addi	r2,r2,12
  80a0e8:	e0fffc17 	ldw	r3,-16(fp)
  80a0ec:	18c00117 	ldw	r3,4(r3)
  80a0f0:	10c00035 	stwio	r3,0(r2)
  80a0f4:	e0bff417 	ldw	r2,-48(fp)
  80a0f8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a0fc:	e0bff117 	ldw	r2,-60(fp)
  80a100:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  80a104:	e0bffc17 	ldw	r2,-16(fp)
  80a108:	10800717 	ldw	r2,28(r2)
  80a10c:	e0bff315 	stw	r2,-52(fp)
  80a110:	00800084 	movi	r2,2
  80a114:	e0bff98d 	sth	r2,-26(fp)
  80a118:	00bfe0c4 	movi	r2,-125
  80a11c:	e0bffa05 	stb	r2,-24(fp)
  80a120:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80a124:	d0a03343 	ldbu	r2,-32563(gp)
  80a128:	10803fcc 	andi	r2,r2,255
  80a12c:	10000a26 	beq	r2,zero,80a158 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80a130:	e0fff98b 	ldhu	r3,-26(fp)
  80a134:	e13ffa03 	ldbu	r4,-24(fp)
  80a138:	e17ffa8b 	ldhu	r5,-22(fp)
  80a13c:	e0bffb04 	addi	r2,fp,-20
  80a140:	d8800015 	stw	r2,0(sp)
  80a144:	280f883a 	mov	r7,r5
  80a148:	200d883a 	mov	r6,r4
  80a14c:	180b883a 	mov	r5,r3
  80a150:	e13ff317 	ldw	r4,-52(fp)
  80a154:	0802f2c0 	call	802f2c <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80a158:	e0bffc17 	ldw	r2,-16(fp)
  80a15c:	10c00417 	ldw	r3,16(r2)
  80a160:	e0bff217 	ldw	r2,-56(fp)
  80a164:	18bfe726 	beq	r3,r2,80a104 <__alt_mem_epcs_flash_controller_0+0xff801104>
      }
    }

    count--;
  80a168:	e0bfef17 	ldw	r2,-68(fp)
  80a16c:	10bfffc4 	addi	r2,r2,-1
  80a170:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80a174:	e0bffc17 	ldw	r2,-16(fp)
  80a178:	10c00517 	ldw	r3,20(r2)
  80a17c:	e0bffd17 	ldw	r2,-12(fp)
  80a180:	11000044 	addi	r4,r2,1
  80a184:	e13ffd15 	stw	r4,-12(fp)
  80a188:	10800003 	ldbu	r2,0(r2)
  80a18c:	1009883a 	mov	r4,r2
  80a190:	e0bffc17 	ldw	r2,-16(fp)
  80a194:	10c5883a 	add	r2,r2,r3
  80a198:	10801a04 	addi	r2,r2,104
  80a19c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80a1a0:	e0bffc17 	ldw	r2,-16(fp)
  80a1a4:	e0fff217 	ldw	r3,-56(fp)
  80a1a8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80a1ac:	e0bfef17 	ldw	r2,-68(fp)
  80a1b0:	103fad1e 	bne	r2,zero,80a068 <__alt_mem_epcs_flash_controller_0+0xff801068>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  80a1b4:	e0bffc17 	ldw	r2,-16(fp)
  80a1b8:	10800917 	ldw	r2,36(r2)
  80a1bc:	1009883a 	mov	r4,r2
  80a1c0:	0805d180 	call	805d18 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a1c4:	0005303a 	rdctl	r2,status
  80a1c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a1cc:	e0fff717 	ldw	r3,-36(fp)
  80a1d0:	00bfff84 	movi	r2,-2
  80a1d4:	1884703a 	and	r2,r3,r2
  80a1d8:	1001703a 	wrctl	status,r2
  
  return context;
  80a1dc:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80a1e0:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80a1e4:	e0bffc17 	ldw	r2,-16(fp)
  80a1e8:	10800117 	ldw	r2,4(r2)
  80a1ec:	10c11014 	ori	r3,r2,1088
  80a1f0:	e0bffc17 	ldw	r2,-16(fp)
  80a1f4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a1f8:	e0bffc17 	ldw	r2,-16(fp)
  80a1fc:	10800017 	ldw	r2,0(r2)
  80a200:	10800304 	addi	r2,r2,12
  80a204:	e0fffc17 	ldw	r3,-16(fp)
  80a208:	18c00117 	ldw	r3,4(r3)
  80a20c:	10c00035 	stwio	r3,0(r2)
  80a210:	e0bff417 	ldw	r2,-48(fp)
  80a214:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a218:	e0bff617 	ldw	r2,-40(fp)
  80a21c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80a220:	e0fffe17 	ldw	r3,-8(fp)
  80a224:	e0bfef17 	ldw	r2,-68(fp)
  80a228:	1885c83a 	sub	r2,r3,r2
}
  80a22c:	e037883a 	mov	sp,fp
  80a230:	dfc00117 	ldw	ra,4(sp)
  80a234:	df000017 	ldw	fp,0(sp)
  80a238:	dec00204 	addi	sp,sp,8
  80a23c:	f800283a 	ret

0080a240 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  80a240:	defff904 	addi	sp,sp,-28
  80a244:	dfc00615 	stw	ra,24(sp)
  80a248:	df000515 	stw	fp,20(sp)
  80a24c:	df000504 	addi	fp,sp,20
  80a250:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  80a254:	00800144 	movi	r2,5
  80a258:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  80a25c:	d8000215 	stw	zero,8(sp)
  80a260:	e0bffe44 	addi	r2,fp,-7
  80a264:	d8800115 	stw	r2,4(sp)
  80a268:	00800044 	movi	r2,1
  80a26c:	d8800015 	stw	r2,0(sp)
  80a270:	e1fffe04 	addi	r7,fp,-8
  80a274:	01800044 	movi	r6,1
  80a278:	000b883a 	mov	r5,zero
  80a27c:	e13fff17 	ldw	r4,-4(fp)
  80a280:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  80a284:	e0bffe43 	ldbu	r2,-7(fp)
}
  80a288:	e037883a 	mov	sp,fp
  80a28c:	dfc00117 	ldw	ra,4(sp)
  80a290:	df000017 	ldw	fp,0(sp)
  80a294:	dec00204 	addi	sp,sp,8
  80a298:	f800283a 	ret

0080a29c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  80a29c:	defffd04 	addi	sp,sp,-12
  80a2a0:	dfc00215 	stw	ra,8(sp)
  80a2a4:	df000115 	stw	fp,4(sp)
  80a2a8:	df000104 	addi	fp,sp,4
  80a2ac:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  80a2b0:	e13fff17 	ldw	r4,-4(fp)
  80a2b4:	080a2400 	call	80a240 <epcs_read_status_register>
  80a2b8:	10803fcc 	andi	r2,r2,255
  80a2bc:	1080004c 	andi	r2,r2,1
}
  80a2c0:	e037883a 	mov	sp,fp
  80a2c4:	dfc00117 	ldw	ra,4(sp)
  80a2c8:	df000017 	ldw	fp,0(sp)
  80a2cc:	dec00204 	addi	sp,sp,8
  80a2d0:	f800283a 	ret

0080a2d4 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  80a2d4:	defffd04 	addi	sp,sp,-12
  80a2d8:	dfc00215 	stw	ra,8(sp)
  80a2dc:	df000115 	stw	fp,4(sp)
  80a2e0:	df000104 	addi	fp,sp,4
  80a2e4:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  80a2e8:	0001883a 	nop
  80a2ec:	e13fff17 	ldw	r4,-4(fp)
  80a2f0:	080a29c0 	call	80a29c <epcs_test_wip>
  80a2f4:	103ffd1e 	bne	r2,zero,80a2ec <__alt_mem_epcs_flash_controller_0+0xff8012ec>
  {
  }
}
  80a2f8:	0001883a 	nop
  80a2fc:	e037883a 	mov	sp,fp
  80a300:	dfc00117 	ldw	ra,4(sp)
  80a304:	df000017 	ldw	fp,0(sp)
  80a308:	dec00204 	addi	sp,sp,8
  80a30c:	f800283a 	ret

0080a310 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  80a310:	defff604 	addi	sp,sp,-40
  80a314:	dfc00915 	stw	ra,36(sp)
  80a318:	df000815 	stw	fp,32(sp)
  80a31c:	df000804 	addi	fp,sp,32
  80a320:	e13ffd15 	stw	r4,-12(fp)
  80a324:	e17ffe15 	stw	r5,-8(fp)
  80a328:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  80a32c:	e0bfff17 	ldw	r2,-4(fp)
  80a330:	10001226 	beq	r2,zero,80a37c <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  80a334:	00bff604 	movi	r2,-40
  80a338:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  80a33c:	e0bffe17 	ldw	r2,-8(fp)
  80a340:	1004d63a 	srli	r2,r2,24
  80a344:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  80a348:	e0bffe17 	ldw	r2,-8(fp)
  80a34c:	1004d43a 	srli	r2,r2,16
  80a350:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  80a354:	e0bffe17 	ldw	r2,-8(fp)
  80a358:	1004d23a 	srli	r2,r2,8
  80a35c:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  80a360:	e0bffe17 	ldw	r2,-8(fp)
  80a364:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  80a368:	00800144 	movi	r2,5
  80a36c:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  80a370:	e13ffd17 	ldw	r4,-12(fp)
  80a374:	080a7c40 	call	80a7c4 <epcs_enter_4_bytes_mode>
  80a378:	00000c06 	br	80a3ac <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  80a37c:	00bff604 	movi	r2,-40
  80a380:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  80a384:	e0bffe17 	ldw	r2,-8(fp)
  80a388:	1004d43a 	srli	r2,r2,16
  80a38c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  80a390:	e0bffe17 	ldw	r2,-8(fp)
  80a394:	1004d23a 	srli	r2,r2,8
  80a398:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  80a39c:	e0bffe17 	ldw	r2,-8(fp)
  80a3a0:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  80a3a4:	00800104 	movi	r2,4
  80a3a8:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  80a3ac:	e13ffd17 	ldw	r4,-12(fp)
  80a3b0:	080a5000 	call	80a500 <epcs_write_enable>

  alt_avalon_spi_command(
  80a3b4:	e0bffb03 	ldbu	r2,-20(fp)
  80a3b8:	e0fffb44 	addi	r3,fp,-19
  80a3bc:	d8000215 	stw	zero,8(sp)
  80a3c0:	d8000115 	stw	zero,4(sp)
  80a3c4:	d8000015 	stw	zero,0(sp)
  80a3c8:	180f883a 	mov	r7,r3
  80a3cc:	100d883a 	mov	r6,r2
  80a3d0:	000b883a 	mov	r5,zero
  80a3d4:	e13ffd17 	ldw	r4,-12(fp)
  80a3d8:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80a3dc:	e13ffd17 	ldw	r4,-12(fp)
  80a3e0:	080a2d40 	call	80a2d4 <epcs_await_wip_released>

  if(four_bytes_mode)
  80a3e4:	e0bfff17 	ldw	r2,-4(fp)
  80a3e8:	10000226 	beq	r2,zero,80a3f4 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  80a3ec:	e13ffd17 	ldw	r4,-12(fp)
  80a3f0:	080a8200 	call	80a820 <epcs_exit_4_bytes_mode>
  }
}
  80a3f4:	0001883a 	nop
  80a3f8:	e037883a 	mov	sp,fp
  80a3fc:	dfc00117 	ldw	ra,4(sp)
  80a400:	df000017 	ldw	fp,0(sp)
  80a404:	dec00204 	addi	sp,sp,8
  80a408:	f800283a 	ret

0080a40c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  80a40c:	defff404 	addi	sp,sp,-48
  80a410:	dfc00b15 	stw	ra,44(sp)
  80a414:	df000a15 	stw	fp,40(sp)
  80a418:	df000a04 	addi	fp,sp,40
  80a41c:	e13ffc15 	stw	r4,-16(fp)
  80a420:	e17ffd15 	stw	r5,-12(fp)
  80a424:	e1bffe15 	stw	r6,-8(fp)
  80a428:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  80a42c:	008000c4 	movi	r2,3
  80a430:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80a434:	e0800217 	ldw	r2,8(fp)
  80a438:	10001026 	beq	r2,zero,80a47c <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  80a43c:	e0bffd17 	ldw	r2,-12(fp)
  80a440:	1004d63a 	srli	r2,r2,24
  80a444:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  80a448:	e0bffd17 	ldw	r2,-12(fp)
  80a44c:	1005d43a 	srai	r2,r2,16
  80a450:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  80a454:	e0bffd17 	ldw	r2,-12(fp)
  80a458:	1005d23a 	srai	r2,r2,8
  80a45c:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  80a460:	e0bffd17 	ldw	r2,-12(fp)
  80a464:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  80a468:	00800144 	movi	r2,5
  80a46c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  80a470:	e13ffc17 	ldw	r4,-16(fp)
  80a474:	080a7c40 	call	80a7c4 <epcs_enter_4_bytes_mode>
  80a478:	00000a06 	br	80a4a4 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  80a47c:	e0bffd17 	ldw	r2,-12(fp)
  80a480:	1005d43a 	srai	r2,r2,16
  80a484:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  80a488:	e0bffd17 	ldw	r2,-12(fp)
  80a48c:	1005d23a 	srai	r2,r2,8
  80a490:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  80a494:	e0bffd17 	ldw	r2,-12(fp)
  80a498:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  80a49c:	00800104 	movi	r2,4
  80a4a0:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  80a4a4:	e13ffc17 	ldw	r4,-16(fp)
  80a4a8:	080a2d40 	call	80a2d4 <epcs_await_wip_released>

  alt_avalon_spi_command(
  80a4ac:	e0bfff17 	ldw	r2,-4(fp)
  80a4b0:	e13ffa04 	addi	r4,fp,-24
  80a4b4:	d8000215 	stw	zero,8(sp)
  80a4b8:	e0fffe17 	ldw	r3,-8(fp)
  80a4bc:	d8c00115 	stw	r3,4(sp)
  80a4c0:	d8800015 	stw	r2,0(sp)
  80a4c4:	200f883a 	mov	r7,r4
  80a4c8:	e1bff917 	ldw	r6,-28(fp)
  80a4cc:	000b883a 	mov	r5,zero
  80a4d0:	e13ffc17 	ldw	r4,-16(fp)
  80a4d4:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  80a4d8:	e0800217 	ldw	r2,8(fp)
  80a4dc:	10000226 	beq	r2,zero,80a4e8 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  80a4e0:	e13ffc17 	ldw	r4,-16(fp)
  80a4e4:	080a8200 	call	80a820 <epcs_exit_4_bytes_mode>
  }

  return length;
  80a4e8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a4ec:	e037883a 	mov	sp,fp
  80a4f0:	dfc00117 	ldw	ra,4(sp)
  80a4f4:	df000017 	ldw	fp,0(sp)
  80a4f8:	dec00204 	addi	sp,sp,8
  80a4fc:	f800283a 	ret

0080a500 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  80a500:	defff904 	addi	sp,sp,-28
  80a504:	dfc00615 	stw	ra,24(sp)
  80a508:	df000515 	stw	fp,20(sp)
  80a50c:	df000504 	addi	fp,sp,20
  80a510:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  80a514:	00800184 	movi	r2,6
  80a518:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  80a51c:	d8000215 	stw	zero,8(sp)
  80a520:	d8000115 	stw	zero,4(sp)
  80a524:	d8000015 	stw	zero,0(sp)
  80a528:	e1fffe04 	addi	r7,fp,-8
  80a52c:	01800044 	movi	r6,1
  80a530:	000b883a 	mov	r5,zero
  80a534:	e13fff17 	ldw	r4,-4(fp)
  80a538:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  80a53c:	0001883a 	nop
  80a540:	e037883a 	mov	sp,fp
  80a544:	dfc00117 	ldw	ra,4(sp)
  80a548:	df000017 	ldw	fp,0(sp)
  80a54c:	dec00204 	addi	sp,sp,8
  80a550:	f800283a 	ret

0080a554 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  80a554:	defff804 	addi	sp,sp,-32
  80a558:	dfc00715 	stw	ra,28(sp)
  80a55c:	df000615 	stw	fp,24(sp)
  80a560:	df000604 	addi	fp,sp,24
  80a564:	e13ffe15 	stw	r4,-8(fp)
  80a568:	2805883a 	mov	r2,r5
  80a56c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  80a570:	00800044 	movi	r2,1
  80a574:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  80a578:	e0bfff03 	ldbu	r2,-4(fp)
  80a57c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  80a580:	d8000215 	stw	zero,8(sp)
  80a584:	d8000115 	stw	zero,4(sp)
  80a588:	d8000015 	stw	zero,0(sp)
  80a58c:	e1fffd04 	addi	r7,fp,-12
  80a590:	01800084 	movi	r6,2
  80a594:	000b883a 	mov	r5,zero
  80a598:	e13ffe17 	ldw	r4,-8(fp)
  80a59c:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80a5a0:	e13ffe17 	ldw	r4,-8(fp)
  80a5a4:	080a2d40 	call	80a2d4 <epcs_await_wip_released>
}
  80a5a8:	0001883a 	nop
  80a5ac:	e037883a 	mov	sp,fp
  80a5b0:	dfc00117 	ldw	ra,4(sp)
  80a5b4:	df000017 	ldw	fp,0(sp)
  80a5b8:	dec00204 	addi	sp,sp,8
  80a5bc:	f800283a 	ret

0080a5c0 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  80a5c0:	defff404 	addi	sp,sp,-48
  80a5c4:	dfc00b15 	stw	ra,44(sp)
  80a5c8:	df000a15 	stw	fp,40(sp)
  80a5cc:	df000a04 	addi	fp,sp,40
  80a5d0:	e13ffc15 	stw	r4,-16(fp)
  80a5d4:	e17ffd15 	stw	r5,-12(fp)
  80a5d8:	e1bffe15 	stw	r6,-8(fp)
  80a5dc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  80a5e0:	00800084 	movi	r2,2
  80a5e4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80a5e8:	e0800217 	ldw	r2,8(fp)
  80a5ec:	10001026 	beq	r2,zero,80a630 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  80a5f0:	e0bffd17 	ldw	r2,-12(fp)
  80a5f4:	1004d63a 	srli	r2,r2,24
  80a5f8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  80a5fc:	e0bffd17 	ldw	r2,-12(fp)
  80a600:	1005d43a 	srai	r2,r2,16
  80a604:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  80a608:	e0bffd17 	ldw	r2,-12(fp)
  80a60c:	1005d23a 	srai	r2,r2,8
  80a610:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  80a614:	e0bffd17 	ldw	r2,-12(fp)
  80a618:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  80a61c:	00800144 	movi	r2,5
  80a620:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  80a624:	e13ffc17 	ldw	r4,-16(fp)
  80a628:	080a7c40 	call	80a7c4 <epcs_enter_4_bytes_mode>
  80a62c:	00000a06 	br	80a658 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  80a630:	e0bffd17 	ldw	r2,-12(fp)
  80a634:	1005d43a 	srai	r2,r2,16
  80a638:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  80a63c:	e0bffd17 	ldw	r2,-12(fp)
  80a640:	1005d23a 	srai	r2,r2,8
  80a644:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  80a648:	e0bffd17 	ldw	r2,-12(fp)
  80a64c:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  80a650:	00800104 	movi	r2,4
  80a654:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  80a658:	e13ffc17 	ldw	r4,-16(fp)
  80a65c:	080a5000 	call	80a500 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  80a660:	e0fffa04 	addi	r3,fp,-24
  80a664:	00800044 	movi	r2,1
  80a668:	d8800215 	stw	r2,8(sp)
  80a66c:	d8000115 	stw	zero,4(sp)
  80a670:	d8000015 	stw	zero,0(sp)
  80a674:	180f883a 	mov	r7,r3
  80a678:	e1bff917 	ldw	r6,-28(fp)
  80a67c:	000b883a 	mov	r5,zero
  80a680:	e13ffc17 	ldw	r4,-16(fp)
  80a684:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  80a688:	e0bfff17 	ldw	r2,-4(fp)
  80a68c:	d8000215 	stw	zero,8(sp)
  80a690:	d8000115 	stw	zero,4(sp)
  80a694:	d8000015 	stw	zero,0(sp)
  80a698:	e1fffe17 	ldw	r7,-8(fp)
  80a69c:	100d883a 	mov	r6,r2
  80a6a0:	000b883a 	mov	r5,zero
  80a6a4:	e13ffc17 	ldw	r4,-16(fp)
  80a6a8:	080b96c0 	call	80b96c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  80a6ac:	e13ffc17 	ldw	r4,-16(fp)
  80a6b0:	080a2d40 	call	80a2d4 <epcs_await_wip_released>

  if(four_bytes_mode)
  80a6b4:	e0800217 	ldw	r2,8(fp)
  80a6b8:	10000226 	beq	r2,zero,80a6c4 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  80a6bc:	e13ffc17 	ldw	r4,-16(fp)
  80a6c0:	080a8200 	call	80a820 <epcs_exit_4_bytes_mode>
  }

  return length;
  80a6c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80a6c8:	e037883a 	mov	sp,fp
  80a6cc:	dfc00117 	ldw	ra,4(sp)
  80a6d0:	df000017 	ldw	fp,0(sp)
  80a6d4:	dec00204 	addi	sp,sp,8
  80a6d8:	f800283a 	ret

0080a6dc <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  80a6dc:	defff804 	addi	sp,sp,-32
  80a6e0:	dfc00715 	stw	ra,28(sp)
  80a6e4:	df000615 	stw	fp,24(sp)
  80a6e8:	df000604 	addi	fp,sp,24
  80a6ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  80a6f0:	00bfeac4 	movi	r2,-85
  80a6f4:	e0bffd05 	stb	r2,-12(fp)
  80a6f8:	e03ffd45 	stb	zero,-11(fp)
  80a6fc:	e03ffd85 	stb	zero,-10(fp)
  80a700:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  80a704:	d8000215 	stw	zero,8(sp)
  80a708:	e0bffe04 	addi	r2,fp,-8
  80a70c:	d8800115 	stw	r2,4(sp)
  80a710:	00800044 	movi	r2,1
  80a714:	d8800015 	stw	r2,0(sp)
  80a718:	e1fffd04 	addi	r7,fp,-12
  80a71c:	01800104 	movi	r6,4
  80a720:	000b883a 	mov	r5,zero
  80a724:	e13fff17 	ldw	r4,-4(fp)
  80a728:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  80a72c:	e0bffe03 	ldbu	r2,-8(fp)
}
  80a730:	e037883a 	mov	sp,fp
  80a734:	dfc00117 	ldw	ra,4(sp)
  80a738:	df000017 	ldw	fp,0(sp)
  80a73c:	dec00204 	addi	sp,sp,8
  80a740:	f800283a 	ret

0080a744 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  80a744:	defff904 	addi	sp,sp,-28
  80a748:	dfc00615 	stw	ra,24(sp)
  80a74c:	df000515 	stw	fp,20(sp)
  80a750:	df000504 	addi	fp,sp,20
  80a754:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  80a758:	00bfe7c4 	movi	r2,-97
  80a75c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  80a760:	d8000215 	stw	zero,8(sp)
  80a764:	e0bffe44 	addi	r2,fp,-7
  80a768:	d8800115 	stw	r2,4(sp)
  80a76c:	008000c4 	movi	r2,3
  80a770:	d8800015 	stw	r2,0(sp)
  80a774:	e1fffe04 	addi	r7,fp,-8
  80a778:	01800044 	movi	r6,1
  80a77c:	000b883a 	mov	r5,zero
  80a780:	e13fff17 	ldw	r4,-4(fp)
  80a784:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  80a788:	e0bffe43 	ldbu	r2,-7(fp)
  80a78c:	10803fcc 	andi	r2,r2,255
  80a790:	1006943a 	slli	r3,r2,16
  80a794:	e0bffe83 	ldbu	r2,-6(fp)
  80a798:	10803fcc 	andi	r2,r2,255
  80a79c:	1004923a 	slli	r2,r2,8
  80a7a0:	1886b03a 	or	r3,r3,r2
  80a7a4:	e0bffec3 	ldbu	r2,-5(fp)
  80a7a8:	10803fcc 	andi	r2,r2,255
  80a7ac:	1884b03a 	or	r2,r3,r2
}
  80a7b0:	e037883a 	mov	sp,fp
  80a7b4:	dfc00117 	ldw	ra,4(sp)
  80a7b8:	df000017 	ldw	fp,0(sp)
  80a7bc:	dec00204 	addi	sp,sp,8
  80a7c0:	f800283a 	ret

0080a7c4 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  80a7c4:	defff904 	addi	sp,sp,-28
  80a7c8:	dfc00615 	stw	ra,24(sp)
  80a7cc:	df000515 	stw	fp,20(sp)
  80a7d0:	df000504 	addi	fp,sp,20
  80a7d4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  80a7d8:	00bfedc4 	movi	r2,-73
  80a7dc:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80a7e0:	e13fff17 	ldw	r4,-4(fp)
  80a7e4:	080a5000 	call	80a500 <epcs_write_enable>

  alt_avalon_spi_command(
  80a7e8:	d8000215 	stw	zero,8(sp)
  80a7ec:	d8000115 	stw	zero,4(sp)
  80a7f0:	d8000015 	stw	zero,0(sp)
  80a7f4:	e1fffe04 	addi	r7,fp,-8
  80a7f8:	01800044 	movi	r6,1
  80a7fc:	000b883a 	mov	r5,zero
  80a800:	e13fff17 	ldw	r4,-4(fp)
  80a804:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80a808:	0001883a 	nop
}
  80a80c:	e037883a 	mov	sp,fp
  80a810:	dfc00117 	ldw	ra,4(sp)
  80a814:	df000017 	ldw	fp,0(sp)
  80a818:	dec00204 	addi	sp,sp,8
  80a81c:	f800283a 	ret

0080a820 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  80a820:	defff904 	addi	sp,sp,-28
  80a824:	dfc00615 	stw	ra,24(sp)
  80a828:	df000515 	stw	fp,20(sp)
  80a82c:	df000504 	addi	fp,sp,20
  80a830:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  80a834:	00bffa44 	movi	r2,-23
  80a838:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80a83c:	e13fff17 	ldw	r4,-4(fp)
  80a840:	080a5000 	call	80a500 <epcs_write_enable>

  alt_avalon_spi_command(
  80a844:	d8000215 	stw	zero,8(sp)
  80a848:	d8000115 	stw	zero,4(sp)
  80a84c:	d8000015 	stw	zero,0(sp)
  80a850:	e1fffe04 	addi	r7,fp,-8
  80a854:	01800044 	movi	r6,1
  80a858:	000b883a 	mov	r5,zero
  80a85c:	e13fff17 	ldw	r4,-4(fp)
  80a860:	080b96c0 	call	80b96c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80a864:	0001883a 	nop
}
  80a868:	e037883a 	mov	sp,fp
  80a86c:	dfc00117 	ldw	ra,4(sp)
  80a870:	df000017 	ldw	fp,0(sp)
  80a874:	dec00204 	addi	sp,sp,8
  80a878:	f800283a 	ret

0080a87c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80a87c:	defff504 	addi	sp,sp,-44
  80a880:	df000a15 	stw	fp,40(sp)
  80a884:	df000a04 	addi	fp,sp,40
  80a888:	e13ffc15 	stw	r4,-16(fp)
  80a88c:	e17ffd15 	stw	r5,-12(fp)
  80a890:	e1bffe15 	stw	r6,-8(fp)
  80a894:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80a898:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80a89c:	d0a04917 	ldw	r2,-32476(gp)
  
  if (alt_ticks_per_second ())
  80a8a0:	10003c26 	beq	r2,zero,80a994 <alt_alarm_start+0x118>
  {
    if (alarm)
  80a8a4:	e0bffc17 	ldw	r2,-16(fp)
  80a8a8:	10003826 	beq	r2,zero,80a98c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80a8ac:	e0bffc17 	ldw	r2,-16(fp)
  80a8b0:	e0fffe17 	ldw	r3,-8(fp)
  80a8b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80a8b8:	e0bffc17 	ldw	r2,-16(fp)
  80a8bc:	e0ffff17 	ldw	r3,-4(fp)
  80a8c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a8c4:	0005303a 	rdctl	r2,status
  80a8c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a8cc:	e0fff917 	ldw	r3,-28(fp)
  80a8d0:	00bfff84 	movi	r2,-2
  80a8d4:	1884703a 	and	r2,r3,r2
  80a8d8:	1001703a 	wrctl	status,r2
  
  return context;
  80a8dc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80a8e0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80a8e4:	d0a04a17 	ldw	r2,-32472(gp)
      
      current_nticks = alt_nticks();
  80a8e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80a8ec:	e0fffd17 	ldw	r3,-12(fp)
  80a8f0:	e0bff617 	ldw	r2,-40(fp)
  80a8f4:	1885883a 	add	r2,r3,r2
  80a8f8:	10c00044 	addi	r3,r2,1
  80a8fc:	e0bffc17 	ldw	r2,-16(fp)
  80a900:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80a904:	e0bffc17 	ldw	r2,-16(fp)
  80a908:	10c00217 	ldw	r3,8(r2)
  80a90c:	e0bff617 	ldw	r2,-40(fp)
  80a910:	1880042e 	bgeu	r3,r2,80a924 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80a914:	e0bffc17 	ldw	r2,-16(fp)
  80a918:	00c00044 	movi	r3,1
  80a91c:	10c00405 	stb	r3,16(r2)
  80a920:	00000206 	br	80a92c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80a924:	e0bffc17 	ldw	r2,-16(fp)
  80a928:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80a92c:	e0bffc17 	ldw	r2,-16(fp)
  80a930:	d0e02804 	addi	r3,gp,-32608
  80a934:	e0fffa15 	stw	r3,-24(fp)
  80a938:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80a93c:	e0bffb17 	ldw	r2,-20(fp)
  80a940:	e0fffa17 	ldw	r3,-24(fp)
  80a944:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80a948:	e0bffa17 	ldw	r2,-24(fp)
  80a94c:	10c00017 	ldw	r3,0(r2)
  80a950:	e0bffb17 	ldw	r2,-20(fp)
  80a954:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80a958:	e0bffa17 	ldw	r2,-24(fp)
  80a95c:	10800017 	ldw	r2,0(r2)
  80a960:	e0fffb17 	ldw	r3,-20(fp)
  80a964:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80a968:	e0bffa17 	ldw	r2,-24(fp)
  80a96c:	e0fffb17 	ldw	r3,-20(fp)
  80a970:	10c00015 	stw	r3,0(r2)
  80a974:	e0bff817 	ldw	r2,-32(fp)
  80a978:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a97c:	e0bff717 	ldw	r2,-36(fp)
  80a980:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80a984:	0005883a 	mov	r2,zero
  80a988:	00000306 	br	80a998 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80a98c:	00bffa84 	movi	r2,-22
  80a990:	00000106 	br	80a998 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80a994:	00bfde84 	movi	r2,-134
  }
}
  80a998:	e037883a 	mov	sp,fp
  80a99c:	df000017 	ldw	fp,0(sp)
  80a9a0:	dec00104 	addi	sp,sp,4
  80a9a4:	f800283a 	ret

0080a9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a9a8:	defffe04 	addi	sp,sp,-8
  80a9ac:	dfc00115 	stw	ra,4(sp)
  80a9b0:	df000015 	stw	fp,0(sp)
  80a9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a9b8:	d0a02417 	ldw	r2,-32624(gp)
  80a9bc:	10000326 	beq	r2,zero,80a9cc <alt_get_errno+0x24>
  80a9c0:	d0a02417 	ldw	r2,-32624(gp)
  80a9c4:	103ee83a 	callr	r2
  80a9c8:	00000106 	br	80a9d0 <alt_get_errno+0x28>
  80a9cc:	d0a04c04 	addi	r2,gp,-32464
}
  80a9d0:	e037883a 	mov	sp,fp
  80a9d4:	dfc00117 	ldw	ra,4(sp)
  80a9d8:	df000017 	ldw	fp,0(sp)
  80a9dc:	dec00204 	addi	sp,sp,8
  80a9e0:	f800283a 	ret

0080a9e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a9e4:	defffb04 	addi	sp,sp,-20
  80a9e8:	dfc00415 	stw	ra,16(sp)
  80a9ec:	df000315 	stw	fp,12(sp)
  80a9f0:	df000304 	addi	fp,sp,12
  80a9f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a9f8:	e0bfff17 	ldw	r2,-4(fp)
  80a9fc:	10000816 	blt	r2,zero,80aa20 <close+0x3c>
  80aa00:	01400304 	movi	r5,12
  80aa04:	e13fff17 	ldw	r4,-4(fp)
  80aa08:	080c6ac0 	call	80c6ac <__mulsi3>
  80aa0c:	1007883a 	mov	r3,r2
  80aa10:	00802074 	movhi	r2,129
  80aa14:	10b6e904 	addi	r2,r2,-9308
  80aa18:	1885883a 	add	r2,r3,r2
  80aa1c:	00000106 	br	80aa24 <close+0x40>
  80aa20:	0005883a 	mov	r2,zero
  80aa24:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80aa28:	e0bffd17 	ldw	r2,-12(fp)
  80aa2c:	10001926 	beq	r2,zero,80aa94 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80aa30:	e0bffd17 	ldw	r2,-12(fp)
  80aa34:	10800017 	ldw	r2,0(r2)
  80aa38:	10800417 	ldw	r2,16(r2)
  80aa3c:	10000626 	beq	r2,zero,80aa58 <close+0x74>
  80aa40:	e0bffd17 	ldw	r2,-12(fp)
  80aa44:	10800017 	ldw	r2,0(r2)
  80aa48:	10800417 	ldw	r2,16(r2)
  80aa4c:	e13ffd17 	ldw	r4,-12(fp)
  80aa50:	103ee83a 	callr	r2
  80aa54:	00000106 	br	80aa5c <close+0x78>
  80aa58:	0005883a 	mov	r2,zero
  80aa5c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80aa60:	e13fff17 	ldw	r4,-4(fp)
  80aa64:	080b3c80 	call	80b3c8 <alt_release_fd>
    if (rval < 0)
  80aa68:	e0bffe17 	ldw	r2,-8(fp)
  80aa6c:	1000070e 	bge	r2,zero,80aa8c <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80aa70:	080a9a80 	call	80a9a8 <alt_get_errno>
  80aa74:	1007883a 	mov	r3,r2
  80aa78:	e0bffe17 	ldw	r2,-8(fp)
  80aa7c:	0085c83a 	sub	r2,zero,r2
  80aa80:	18800015 	stw	r2,0(r3)
      return -1;
  80aa84:	00bfffc4 	movi	r2,-1
  80aa88:	00000706 	br	80aaa8 <close+0xc4>
    }
    return 0;
  80aa8c:	0005883a 	mov	r2,zero
  80aa90:	00000506 	br	80aaa8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80aa94:	080a9a80 	call	80a9a8 <alt_get_errno>
  80aa98:	1007883a 	mov	r3,r2
  80aa9c:	00801444 	movi	r2,81
  80aaa0:	18800015 	stw	r2,0(r3)
    return -1;
  80aaa4:	00bfffc4 	movi	r2,-1
  }
}
  80aaa8:	e037883a 	mov	sp,fp
  80aaac:	dfc00117 	ldw	ra,4(sp)
  80aab0:	df000017 	ldw	fp,0(sp)
  80aab4:	dec00204 	addi	sp,sp,8
  80aab8:	f800283a 	ret

0080aabc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80aabc:	defffc04 	addi	sp,sp,-16
  80aac0:	df000315 	stw	fp,12(sp)
  80aac4:	df000304 	addi	fp,sp,12
  80aac8:	e13ffd15 	stw	r4,-12(fp)
  80aacc:	e17ffe15 	stw	r5,-8(fp)
  80aad0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80aad4:	e0bfff17 	ldw	r2,-4(fp)
}
  80aad8:	e037883a 	mov	sp,fp
  80aadc:	df000017 	ldw	fp,0(sp)
  80aae0:	dec00104 	addi	sp,sp,4
  80aae4:	f800283a 	ret

0080aae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aae8:	defffe04 	addi	sp,sp,-8
  80aaec:	dfc00115 	stw	ra,4(sp)
  80aaf0:	df000015 	stw	fp,0(sp)
  80aaf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80aaf8:	d0a02417 	ldw	r2,-32624(gp)
  80aafc:	10000326 	beq	r2,zero,80ab0c <alt_get_errno+0x24>
  80ab00:	d0a02417 	ldw	r2,-32624(gp)
  80ab04:	103ee83a 	callr	r2
  80ab08:	00000106 	br	80ab10 <alt_get_errno+0x28>
  80ab0c:	d0a04c04 	addi	r2,gp,-32464
}
  80ab10:	e037883a 	mov	sp,fp
  80ab14:	dfc00117 	ldw	ra,4(sp)
  80ab18:	df000017 	ldw	fp,0(sp)
  80ab1c:	dec00204 	addi	sp,sp,8
  80ab20:	f800283a 	ret

0080ab24 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80ab24:	defffa04 	addi	sp,sp,-24
  80ab28:	dfc00515 	stw	ra,20(sp)
  80ab2c:	df000415 	stw	fp,16(sp)
  80ab30:	df000404 	addi	fp,sp,16
  80ab34:	e13ffe15 	stw	r4,-8(fp)
  80ab38:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80ab3c:	e0bffe17 	ldw	r2,-8(fp)
  80ab40:	10000326 	beq	r2,zero,80ab50 <alt_dev_llist_insert+0x2c>
  80ab44:	e0bffe17 	ldw	r2,-8(fp)
  80ab48:	10800217 	ldw	r2,8(r2)
  80ab4c:	1000061e 	bne	r2,zero,80ab68 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80ab50:	080aae80 	call	80aae8 <alt_get_errno>
  80ab54:	1007883a 	mov	r3,r2
  80ab58:	00800584 	movi	r2,22
  80ab5c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80ab60:	00bffa84 	movi	r2,-22
  80ab64:	00001306 	br	80abb4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ab68:	e0bffe17 	ldw	r2,-8(fp)
  80ab6c:	e0ffff17 	ldw	r3,-4(fp)
  80ab70:	e0fffc15 	stw	r3,-16(fp)
  80ab74:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ab78:	e0bffd17 	ldw	r2,-12(fp)
  80ab7c:	e0fffc17 	ldw	r3,-16(fp)
  80ab80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80ab84:	e0bffc17 	ldw	r2,-16(fp)
  80ab88:	10c00017 	ldw	r3,0(r2)
  80ab8c:	e0bffd17 	ldw	r2,-12(fp)
  80ab90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ab94:	e0bffc17 	ldw	r2,-16(fp)
  80ab98:	10800017 	ldw	r2,0(r2)
  80ab9c:	e0fffd17 	ldw	r3,-12(fp)
  80aba0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80aba4:	e0bffc17 	ldw	r2,-16(fp)
  80aba8:	e0fffd17 	ldw	r3,-12(fp)
  80abac:	10c00015 	stw	r3,0(r2)

  return 0;  
  80abb0:	0005883a 	mov	r2,zero
}
  80abb4:	e037883a 	mov	sp,fp
  80abb8:	dfc00117 	ldw	ra,4(sp)
  80abbc:	df000017 	ldw	fp,0(sp)
  80abc0:	dec00204 	addi	sp,sp,8
  80abc4:	f800283a 	ret

0080abc8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80abc8:	defffd04 	addi	sp,sp,-12
  80abcc:	dfc00215 	stw	ra,8(sp)
  80abd0:	df000115 	stw	fp,4(sp)
  80abd4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80abd8:	00802074 	movhi	r2,129
  80abdc:	10b1c104 	addi	r2,r2,-14588
  80abe0:	e0bfff15 	stw	r2,-4(fp)
  80abe4:	00000606 	br	80ac00 <_do_ctors+0x38>
        (*ctor) (); 
  80abe8:	e0bfff17 	ldw	r2,-4(fp)
  80abec:	10800017 	ldw	r2,0(r2)
  80abf0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80abf4:	e0bfff17 	ldw	r2,-4(fp)
  80abf8:	10bfff04 	addi	r2,r2,-4
  80abfc:	e0bfff15 	stw	r2,-4(fp)
  80ac00:	e0ffff17 	ldw	r3,-4(fp)
  80ac04:	00802074 	movhi	r2,129
  80ac08:	10b1c204 	addi	r2,r2,-14584
  80ac0c:	18bff62e 	bgeu	r3,r2,80abe8 <__alt_mem_epcs_flash_controller_0+0xff801be8>
        (*ctor) (); 
}
  80ac10:	0001883a 	nop
  80ac14:	e037883a 	mov	sp,fp
  80ac18:	dfc00117 	ldw	ra,4(sp)
  80ac1c:	df000017 	ldw	fp,0(sp)
  80ac20:	dec00204 	addi	sp,sp,8
  80ac24:	f800283a 	ret

0080ac28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ac28:	defffd04 	addi	sp,sp,-12
  80ac2c:	dfc00215 	stw	ra,8(sp)
  80ac30:	df000115 	stw	fp,4(sp)
  80ac34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ac38:	00802074 	movhi	r2,129
  80ac3c:	10b1c104 	addi	r2,r2,-14588
  80ac40:	e0bfff15 	stw	r2,-4(fp)
  80ac44:	00000606 	br	80ac60 <_do_dtors+0x38>
        (*dtor) (); 
  80ac48:	e0bfff17 	ldw	r2,-4(fp)
  80ac4c:	10800017 	ldw	r2,0(r2)
  80ac50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ac54:	e0bfff17 	ldw	r2,-4(fp)
  80ac58:	10bfff04 	addi	r2,r2,-4
  80ac5c:	e0bfff15 	stw	r2,-4(fp)
  80ac60:	e0ffff17 	ldw	r3,-4(fp)
  80ac64:	00802074 	movhi	r2,129
  80ac68:	10b1c204 	addi	r2,r2,-14584
  80ac6c:	18bff62e 	bgeu	r3,r2,80ac48 <__alt_mem_epcs_flash_controller_0+0xff801c48>
        (*dtor) (); 
}
  80ac70:	0001883a 	nop
  80ac74:	e037883a 	mov	sp,fp
  80ac78:	dfc00117 	ldw	ra,4(sp)
  80ac7c:	df000017 	ldw	fp,0(sp)
  80ac80:	dec00204 	addi	sp,sp,8
  80ac84:	f800283a 	ret

0080ac88 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  80ac88:	defffc04 	addi	sp,sp,-16
  80ac8c:	dfc00315 	stw	ra,12(sp)
  80ac90:	df000215 	stw	fp,8(sp)
  80ac94:	df000204 	addi	fp,sp,8
  80ac98:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  80ac9c:	d1602504 	addi	r5,gp,-32620
  80aca0:	e13fff17 	ldw	r4,-4(fp)
  80aca4:	080bb680 	call	80bb68 <alt_find_dev>
  80aca8:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  80acac:	e0bffe17 	ldw	r2,-8(fp)
  80acb0:	10000926 	beq	r2,zero,80acd8 <alt_flash_open_dev+0x50>
  80acb4:	e0bffe17 	ldw	r2,-8(fp)
  80acb8:	10800317 	ldw	r2,12(r2)
  80acbc:	10000626 	beq	r2,zero,80acd8 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  80acc0:	e0bffe17 	ldw	r2,-8(fp)
  80acc4:	10800317 	ldw	r2,12(r2)
  80acc8:	e17fff17 	ldw	r5,-4(fp)
  80accc:	e13ffe17 	ldw	r4,-8(fp)
  80acd0:	103ee83a 	callr	r2
  80acd4:	00000106 	br	80acdc <alt_flash_open_dev+0x54>
  }

  return dev;
  80acd8:	e0bffe17 	ldw	r2,-8(fp)
}
  80acdc:	e037883a 	mov	sp,fp
  80ace0:	dfc00117 	ldw	ra,4(sp)
  80ace4:	df000017 	ldw	fp,0(sp)
  80ace8:	dec00204 	addi	sp,sp,8
  80acec:	f800283a 	ret

0080acf0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  80acf0:	defffd04 	addi	sp,sp,-12
  80acf4:	dfc00215 	stw	ra,8(sp)
  80acf8:	df000115 	stw	fp,4(sp)
  80acfc:	df000104 	addi	fp,sp,4
  80ad00:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  80ad04:	e0bfff17 	ldw	r2,-4(fp)
  80ad08:	10000826 	beq	r2,zero,80ad2c <alt_flash_close_dev+0x3c>
  80ad0c:	e0bfff17 	ldw	r2,-4(fp)
  80ad10:	10800417 	ldw	r2,16(r2)
  80ad14:	10000526 	beq	r2,zero,80ad2c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  80ad18:	e0bfff17 	ldw	r2,-4(fp)
  80ad1c:	10800417 	ldw	r2,16(r2)
  80ad20:	e13fff17 	ldw	r4,-4(fp)
  80ad24:	103ee83a 	callr	r2
  }
  return;
  80ad28:	0001883a 	nop
  80ad2c:	0001883a 	nop
}
  80ad30:	e037883a 	mov	sp,fp
  80ad34:	dfc00117 	ldw	ra,4(sp)
  80ad38:	df000017 	ldw	fp,0(sp)
  80ad3c:	dec00204 	addi	sp,sp,8
  80ad40:	f800283a 	ret

0080ad44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ad44:	defff904 	addi	sp,sp,-28
  80ad48:	dfc00615 	stw	ra,24(sp)
  80ad4c:	df000515 	stw	fp,20(sp)
  80ad50:	df000504 	addi	fp,sp,20
  80ad54:	e13ffc15 	stw	r4,-16(fp)
  80ad58:	e17ffd15 	stw	r5,-12(fp)
  80ad5c:	e1bffe15 	stw	r6,-8(fp)
  80ad60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80ad64:	e0800217 	ldw	r2,8(fp)
  80ad68:	d8800015 	stw	r2,0(sp)
  80ad6c:	e1ffff17 	ldw	r7,-4(fp)
  80ad70:	e1bffe17 	ldw	r6,-8(fp)
  80ad74:	e17ffd17 	ldw	r5,-12(fp)
  80ad78:	e13ffc17 	ldw	r4,-16(fp)
  80ad7c:	080aef40 	call	80aef4 <alt_iic_isr_register>
}  
  80ad80:	e037883a 	mov	sp,fp
  80ad84:	dfc00117 	ldw	ra,4(sp)
  80ad88:	df000017 	ldw	fp,0(sp)
  80ad8c:	dec00204 	addi	sp,sp,8
  80ad90:	f800283a 	ret

0080ad94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80ad94:	defff904 	addi	sp,sp,-28
  80ad98:	df000615 	stw	fp,24(sp)
  80ad9c:	df000604 	addi	fp,sp,24
  80ada0:	e13ffe15 	stw	r4,-8(fp)
  80ada4:	e17fff15 	stw	r5,-4(fp)
  80ada8:	e0bfff17 	ldw	r2,-4(fp)
  80adac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80adb0:	0005303a 	rdctl	r2,status
  80adb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80adb8:	e0fffb17 	ldw	r3,-20(fp)
  80adbc:	00bfff84 	movi	r2,-2
  80adc0:	1884703a 	and	r2,r3,r2
  80adc4:	1001703a 	wrctl	status,r2
  
  return context;
  80adc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80adcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80add0:	00c00044 	movi	r3,1
  80add4:	e0bffa17 	ldw	r2,-24(fp)
  80add8:	1884983a 	sll	r2,r3,r2
  80addc:	1007883a 	mov	r3,r2
  80ade0:	d0a04817 	ldw	r2,-32480(gp)
  80ade4:	1884b03a 	or	r2,r3,r2
  80ade8:	d0a04815 	stw	r2,-32480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80adec:	d0a04817 	ldw	r2,-32480(gp)
  80adf0:	100170fa 	wrctl	ienable,r2
  80adf4:	e0bffc17 	ldw	r2,-16(fp)
  80adf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80adfc:	e0bffd17 	ldw	r2,-12(fp)
  80ae00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ae04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80ae08:	0001883a 	nop
}
  80ae0c:	e037883a 	mov	sp,fp
  80ae10:	df000017 	ldw	fp,0(sp)
  80ae14:	dec00104 	addi	sp,sp,4
  80ae18:	f800283a 	ret

0080ae1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ae1c:	defff904 	addi	sp,sp,-28
  80ae20:	df000615 	stw	fp,24(sp)
  80ae24:	df000604 	addi	fp,sp,24
  80ae28:	e13ffe15 	stw	r4,-8(fp)
  80ae2c:	e17fff15 	stw	r5,-4(fp)
  80ae30:	e0bfff17 	ldw	r2,-4(fp)
  80ae34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae38:	0005303a 	rdctl	r2,status
  80ae3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae40:	e0fffb17 	ldw	r3,-20(fp)
  80ae44:	00bfff84 	movi	r2,-2
  80ae48:	1884703a 	and	r2,r3,r2
  80ae4c:	1001703a 	wrctl	status,r2
  
  return context;
  80ae50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ae54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80ae58:	00c00044 	movi	r3,1
  80ae5c:	e0bffa17 	ldw	r2,-24(fp)
  80ae60:	1884983a 	sll	r2,r3,r2
  80ae64:	0084303a 	nor	r2,zero,r2
  80ae68:	1007883a 	mov	r3,r2
  80ae6c:	d0a04817 	ldw	r2,-32480(gp)
  80ae70:	1884703a 	and	r2,r3,r2
  80ae74:	d0a04815 	stw	r2,-32480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ae78:	d0a04817 	ldw	r2,-32480(gp)
  80ae7c:	100170fa 	wrctl	ienable,r2
  80ae80:	e0bffc17 	ldw	r2,-16(fp)
  80ae84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ae88:	e0bffd17 	ldw	r2,-12(fp)
  80ae8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ae90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80ae94:	0001883a 	nop
}
  80ae98:	e037883a 	mov	sp,fp
  80ae9c:	df000017 	ldw	fp,0(sp)
  80aea0:	dec00104 	addi	sp,sp,4
  80aea4:	f800283a 	ret

0080aea8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80aea8:	defffc04 	addi	sp,sp,-16
  80aeac:	df000315 	stw	fp,12(sp)
  80aeb0:	df000304 	addi	fp,sp,12
  80aeb4:	e13ffe15 	stw	r4,-8(fp)
  80aeb8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80aebc:	000530fa 	rdctl	r2,ienable
  80aec0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80aec4:	00c00044 	movi	r3,1
  80aec8:	e0bfff17 	ldw	r2,-4(fp)
  80aecc:	1884983a 	sll	r2,r3,r2
  80aed0:	1007883a 	mov	r3,r2
  80aed4:	e0bffd17 	ldw	r2,-12(fp)
  80aed8:	1884703a 	and	r2,r3,r2
  80aedc:	1004c03a 	cmpne	r2,r2,zero
  80aee0:	10803fcc 	andi	r2,r2,255
}
  80aee4:	e037883a 	mov	sp,fp
  80aee8:	df000017 	ldw	fp,0(sp)
  80aeec:	dec00104 	addi	sp,sp,4
  80aef0:	f800283a 	ret

0080aef4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80aef4:	defff504 	addi	sp,sp,-44
  80aef8:	dfc00a15 	stw	ra,40(sp)
  80aefc:	df000915 	stw	fp,36(sp)
  80af00:	df000904 	addi	fp,sp,36
  80af04:	e13ffc15 	stw	r4,-16(fp)
  80af08:	e17ffd15 	stw	r5,-12(fp)
  80af0c:	e1bffe15 	stw	r6,-8(fp)
  80af10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80af14:	00bffa84 	movi	r2,-22
  80af18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80af1c:	e0bffd17 	ldw	r2,-12(fp)
  80af20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80af24:	e0bff817 	ldw	r2,-32(fp)
  80af28:	10800808 	cmpgei	r2,r2,32
  80af2c:	1000271e 	bne	r2,zero,80afcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80af30:	0005303a 	rdctl	r2,status
  80af34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80af38:	e0fffb17 	ldw	r3,-20(fp)
  80af3c:	00bfff84 	movi	r2,-2
  80af40:	1884703a 	and	r2,r3,r2
  80af44:	1001703a 	wrctl	status,r2
  
  return context;
  80af48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80af4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80af50:	00802074 	movhi	r2,129
  80af54:	10952804 	addi	r2,r2,21664
  80af58:	e0fff817 	ldw	r3,-32(fp)
  80af5c:	180690fa 	slli	r3,r3,3
  80af60:	10c5883a 	add	r2,r2,r3
  80af64:	e0fffe17 	ldw	r3,-8(fp)
  80af68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80af6c:	00802074 	movhi	r2,129
  80af70:	10952804 	addi	r2,r2,21664
  80af74:	e0fff817 	ldw	r3,-32(fp)
  80af78:	180690fa 	slli	r3,r3,3
  80af7c:	10c5883a 	add	r2,r2,r3
  80af80:	10800104 	addi	r2,r2,4
  80af84:	e0ffff17 	ldw	r3,-4(fp)
  80af88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80af8c:	e0bffe17 	ldw	r2,-8(fp)
  80af90:	10000526 	beq	r2,zero,80afa8 <alt_iic_isr_register+0xb4>
  80af94:	e0bff817 	ldw	r2,-32(fp)
  80af98:	100b883a 	mov	r5,r2
  80af9c:	e13ffc17 	ldw	r4,-16(fp)
  80afa0:	080ad940 	call	80ad94 <alt_ic_irq_enable>
  80afa4:	00000406 	br	80afb8 <alt_iic_isr_register+0xc4>
  80afa8:	e0bff817 	ldw	r2,-32(fp)
  80afac:	100b883a 	mov	r5,r2
  80afb0:	e13ffc17 	ldw	r4,-16(fp)
  80afb4:	080ae1c0 	call	80ae1c <alt_ic_irq_disable>
  80afb8:	e0bff715 	stw	r2,-36(fp)
  80afbc:	e0bffa17 	ldw	r2,-24(fp)
  80afc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80afc4:	e0bff917 	ldw	r2,-28(fp)
  80afc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80afcc:	e0bff717 	ldw	r2,-36(fp)
}
  80afd0:	e037883a 	mov	sp,fp
  80afd4:	dfc00117 	ldw	ra,4(sp)
  80afd8:	df000017 	ldw	fp,0(sp)
  80afdc:	dec00204 	addi	sp,sp,8
  80afe0:	f800283a 	ret

0080afe4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80afe4:	defff804 	addi	sp,sp,-32
  80afe8:	dfc00715 	stw	ra,28(sp)
  80afec:	df000615 	stw	fp,24(sp)
  80aff0:	dc000515 	stw	r16,20(sp)
  80aff4:	df000604 	addi	fp,sp,24
  80aff8:	e13ffb15 	stw	r4,-20(fp)
  80affc:	e17ffc15 	stw	r5,-16(fp)
  80b000:	e1bffd15 	stw	r6,-12(fp)
  80b004:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  80b008:	e1bffe17 	ldw	r6,-8(fp)
  80b00c:	e17ffd17 	ldw	r5,-12(fp)
  80b010:	e13ffc17 	ldw	r4,-16(fp)
  80b014:	080b26c0 	call	80b26c <open>
  80b018:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  80b01c:	e0bffa17 	ldw	r2,-24(fp)
  80b020:	10002216 	blt	r2,zero,80b0ac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  80b024:	04002074 	movhi	r16,129
  80b028:	8436e904 	addi	r16,r16,-9308
  80b02c:	e0bffa17 	ldw	r2,-24(fp)
  80b030:	01400304 	movi	r5,12
  80b034:	1009883a 	mov	r4,r2
  80b038:	080c6ac0 	call	80c6ac <__mulsi3>
  80b03c:	8085883a 	add	r2,r16,r2
  80b040:	10c00017 	ldw	r3,0(r2)
  80b044:	e0bffb17 	ldw	r2,-20(fp)
  80b048:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80b04c:	04002074 	movhi	r16,129
  80b050:	8436e904 	addi	r16,r16,-9308
  80b054:	e0bffa17 	ldw	r2,-24(fp)
  80b058:	01400304 	movi	r5,12
  80b05c:	1009883a 	mov	r4,r2
  80b060:	080c6ac0 	call	80c6ac <__mulsi3>
  80b064:	8085883a 	add	r2,r16,r2
  80b068:	10800104 	addi	r2,r2,4
  80b06c:	10c00017 	ldw	r3,0(r2)
  80b070:	e0bffb17 	ldw	r2,-20(fp)
  80b074:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80b078:	04002074 	movhi	r16,129
  80b07c:	8436e904 	addi	r16,r16,-9308
  80b080:	e0bffa17 	ldw	r2,-24(fp)
  80b084:	01400304 	movi	r5,12
  80b088:	1009883a 	mov	r4,r2
  80b08c:	080c6ac0 	call	80c6ac <__mulsi3>
  80b090:	8085883a 	add	r2,r16,r2
  80b094:	10800204 	addi	r2,r2,8
  80b098:	10c00017 	ldw	r3,0(r2)
  80b09c:	e0bffb17 	ldw	r2,-20(fp)
  80b0a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80b0a4:	e13ffa17 	ldw	r4,-24(fp)
  80b0a8:	080b3c80 	call	80b3c8 <alt_release_fd>
  }
} 
  80b0ac:	0001883a 	nop
  80b0b0:	e6ffff04 	addi	sp,fp,-4
  80b0b4:	dfc00217 	ldw	ra,8(sp)
  80b0b8:	df000117 	ldw	fp,4(sp)
  80b0bc:	dc000017 	ldw	r16,0(sp)
  80b0c0:	dec00304 	addi	sp,sp,12
  80b0c4:	f800283a 	ret

0080b0c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80b0c8:	defffb04 	addi	sp,sp,-20
  80b0cc:	dfc00415 	stw	ra,16(sp)
  80b0d0:	df000315 	stw	fp,12(sp)
  80b0d4:	df000304 	addi	fp,sp,12
  80b0d8:	e13ffd15 	stw	r4,-12(fp)
  80b0dc:	e17ffe15 	stw	r5,-8(fp)
  80b0e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80b0e4:	01c07fc4 	movi	r7,511
  80b0e8:	01800044 	movi	r6,1
  80b0ec:	e17ffd17 	ldw	r5,-12(fp)
  80b0f0:	01002074 	movhi	r4,129
  80b0f4:	2136ec04 	addi	r4,r4,-9296
  80b0f8:	080afe40 	call	80afe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80b0fc:	01c07fc4 	movi	r7,511
  80b100:	000d883a 	mov	r6,zero
  80b104:	e17ffe17 	ldw	r5,-8(fp)
  80b108:	01002074 	movhi	r4,129
  80b10c:	2136e904 	addi	r4,r4,-9308
  80b110:	080afe40 	call	80afe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80b114:	01c07fc4 	movi	r7,511
  80b118:	01800044 	movi	r6,1
  80b11c:	e17fff17 	ldw	r5,-4(fp)
  80b120:	01002074 	movhi	r4,129
  80b124:	2136ef04 	addi	r4,r4,-9284
  80b128:	080afe40 	call	80afe4 <alt_open_fd>
}  
  80b12c:	0001883a 	nop
  80b130:	e037883a 	mov	sp,fp
  80b134:	dfc00117 	ldw	ra,4(sp)
  80b138:	df000017 	ldw	fp,0(sp)
  80b13c:	dec00204 	addi	sp,sp,8
  80b140:	f800283a 	ret

0080b144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b144:	defffe04 	addi	sp,sp,-8
  80b148:	dfc00115 	stw	ra,4(sp)
  80b14c:	df000015 	stw	fp,0(sp)
  80b150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b154:	d0a02417 	ldw	r2,-32624(gp)
  80b158:	10000326 	beq	r2,zero,80b168 <alt_get_errno+0x24>
  80b15c:	d0a02417 	ldw	r2,-32624(gp)
  80b160:	103ee83a 	callr	r2
  80b164:	00000106 	br	80b16c <alt_get_errno+0x28>
  80b168:	d0a04c04 	addi	r2,gp,-32464
}
  80b16c:	e037883a 	mov	sp,fp
  80b170:	dfc00117 	ldw	ra,4(sp)
  80b174:	df000017 	ldw	fp,0(sp)
  80b178:	dec00204 	addi	sp,sp,8
  80b17c:	f800283a 	ret

0080b180 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80b180:	defffb04 	addi	sp,sp,-20
  80b184:	dfc00415 	stw	ra,16(sp)
  80b188:	df000315 	stw	fp,12(sp)
  80b18c:	dc000215 	stw	r16,8(sp)
  80b190:	df000304 	addi	fp,sp,12
  80b194:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80b198:	e0bffe17 	ldw	r2,-8(fp)
  80b19c:	10800217 	ldw	r2,8(r2)
  80b1a0:	10d00034 	orhi	r3,r2,16384
  80b1a4:	e0bffe17 	ldw	r2,-8(fp)
  80b1a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b1ac:	e03ffd15 	stw	zero,-12(fp)
  80b1b0:	00002306 	br	80b240 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b1b4:	04002074 	movhi	r16,129
  80b1b8:	8436e904 	addi	r16,r16,-9308
  80b1bc:	e0bffd17 	ldw	r2,-12(fp)
  80b1c0:	01400304 	movi	r5,12
  80b1c4:	1009883a 	mov	r4,r2
  80b1c8:	080c6ac0 	call	80c6ac <__mulsi3>
  80b1cc:	8085883a 	add	r2,r16,r2
  80b1d0:	10c00017 	ldw	r3,0(r2)
  80b1d4:	e0bffe17 	ldw	r2,-8(fp)
  80b1d8:	10800017 	ldw	r2,0(r2)
  80b1dc:	1880151e 	bne	r3,r2,80b234 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b1e0:	04002074 	movhi	r16,129
  80b1e4:	8436e904 	addi	r16,r16,-9308
  80b1e8:	e0bffd17 	ldw	r2,-12(fp)
  80b1ec:	01400304 	movi	r5,12
  80b1f0:	1009883a 	mov	r4,r2
  80b1f4:	080c6ac0 	call	80c6ac <__mulsi3>
  80b1f8:	8085883a 	add	r2,r16,r2
  80b1fc:	10800204 	addi	r2,r2,8
  80b200:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b204:	10000b0e 	bge	r2,zero,80b234 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80b208:	01400304 	movi	r5,12
  80b20c:	e13ffd17 	ldw	r4,-12(fp)
  80b210:	080c6ac0 	call	80c6ac <__mulsi3>
  80b214:	1007883a 	mov	r3,r2
  80b218:	00802074 	movhi	r2,129
  80b21c:	10b6e904 	addi	r2,r2,-9308
  80b220:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b224:	e0bffe17 	ldw	r2,-8(fp)
  80b228:	18800226 	beq	r3,r2,80b234 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80b22c:	00bffcc4 	movi	r2,-13
  80b230:	00000806 	br	80b254 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b234:	e0bffd17 	ldw	r2,-12(fp)
  80b238:	10800044 	addi	r2,r2,1
  80b23c:	e0bffd15 	stw	r2,-12(fp)
  80b240:	d0a02317 	ldw	r2,-32628(gp)
  80b244:	1007883a 	mov	r3,r2
  80b248:	e0bffd17 	ldw	r2,-12(fp)
  80b24c:	18bfd92e 	bgeu	r3,r2,80b1b4 <__alt_mem_epcs_flash_controller_0+0xff8021b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80b250:	0005883a 	mov	r2,zero
}
  80b254:	e6ffff04 	addi	sp,fp,-4
  80b258:	dfc00217 	ldw	ra,8(sp)
  80b25c:	df000117 	ldw	fp,4(sp)
  80b260:	dc000017 	ldw	r16,0(sp)
  80b264:	dec00304 	addi	sp,sp,12
  80b268:	f800283a 	ret

0080b26c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80b26c:	defff604 	addi	sp,sp,-40
  80b270:	dfc00915 	stw	ra,36(sp)
  80b274:	df000815 	stw	fp,32(sp)
  80b278:	df000804 	addi	fp,sp,32
  80b27c:	e13ffd15 	stw	r4,-12(fp)
  80b280:	e17ffe15 	stw	r5,-8(fp)
  80b284:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80b288:	00bfffc4 	movi	r2,-1
  80b28c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80b290:	00bffb44 	movi	r2,-19
  80b294:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80b298:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80b29c:	d1602104 	addi	r5,gp,-32636
  80b2a0:	e13ffd17 	ldw	r4,-12(fp)
  80b2a4:	080bb680 	call	80bb68 <alt_find_dev>
  80b2a8:	e0bff815 	stw	r2,-32(fp)
  80b2ac:	e0bff817 	ldw	r2,-32(fp)
  80b2b0:	1000051e 	bne	r2,zero,80b2c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80b2b4:	e13ffd17 	ldw	r4,-12(fp)
  80b2b8:	080bbf80 	call	80bbf8 <alt_find_file>
  80b2bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80b2c0:	00800044 	movi	r2,1
  80b2c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80b2c8:	e0bff817 	ldw	r2,-32(fp)
  80b2cc:	10002b26 	beq	r2,zero,80b37c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80b2d0:	e13ff817 	ldw	r4,-32(fp)
  80b2d4:	080bd000 	call	80bd00 <alt_get_fd>
  80b2d8:	e0bff915 	stw	r2,-28(fp)
  80b2dc:	e0bff917 	ldw	r2,-28(fp)
  80b2e0:	1000030e 	bge	r2,zero,80b2f0 <open+0x84>
    {
      status = index;
  80b2e4:	e0bff917 	ldw	r2,-28(fp)
  80b2e8:	e0bffa15 	stw	r2,-24(fp)
  80b2ec:	00002506 	br	80b384 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  80b2f0:	01400304 	movi	r5,12
  80b2f4:	e13ff917 	ldw	r4,-28(fp)
  80b2f8:	080c6ac0 	call	80c6ac <__mulsi3>
  80b2fc:	1007883a 	mov	r3,r2
  80b300:	00802074 	movhi	r2,129
  80b304:	10b6e904 	addi	r2,r2,-9308
  80b308:	1885883a 	add	r2,r3,r2
  80b30c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80b310:	e0fffe17 	ldw	r3,-8(fp)
  80b314:	00900034 	movhi	r2,16384
  80b318:	10bfffc4 	addi	r2,r2,-1
  80b31c:	1886703a 	and	r3,r3,r2
  80b320:	e0bffc17 	ldw	r2,-16(fp)
  80b324:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80b328:	e0bffb17 	ldw	r2,-20(fp)
  80b32c:	1000051e 	bne	r2,zero,80b344 <open+0xd8>
  80b330:	e13ffc17 	ldw	r4,-16(fp)
  80b334:	080b1800 	call	80b180 <alt_file_locked>
  80b338:	e0bffa15 	stw	r2,-24(fp)
  80b33c:	e0bffa17 	ldw	r2,-24(fp)
  80b340:	10001016 	blt	r2,zero,80b384 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80b344:	e0bff817 	ldw	r2,-32(fp)
  80b348:	10800317 	ldw	r2,12(r2)
  80b34c:	10000826 	beq	r2,zero,80b370 <open+0x104>
  80b350:	e0bff817 	ldw	r2,-32(fp)
  80b354:	10800317 	ldw	r2,12(r2)
  80b358:	e1ffff17 	ldw	r7,-4(fp)
  80b35c:	e1bffe17 	ldw	r6,-8(fp)
  80b360:	e17ffd17 	ldw	r5,-12(fp)
  80b364:	e13ffc17 	ldw	r4,-16(fp)
  80b368:	103ee83a 	callr	r2
  80b36c:	00000106 	br	80b374 <open+0x108>
  80b370:	0005883a 	mov	r2,zero
  80b374:	e0bffa15 	stw	r2,-24(fp)
  80b378:	00000206 	br	80b384 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80b37c:	00bffb44 	movi	r2,-19
  80b380:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80b384:	e0bffa17 	ldw	r2,-24(fp)
  80b388:	1000090e 	bge	r2,zero,80b3b0 <open+0x144>
  {
    alt_release_fd (index);  
  80b38c:	e13ff917 	ldw	r4,-28(fp)
  80b390:	080b3c80 	call	80b3c8 <alt_release_fd>
    ALT_ERRNO = -status;
  80b394:	080b1440 	call	80b144 <alt_get_errno>
  80b398:	1007883a 	mov	r3,r2
  80b39c:	e0bffa17 	ldw	r2,-24(fp)
  80b3a0:	0085c83a 	sub	r2,zero,r2
  80b3a4:	18800015 	stw	r2,0(r3)
    return -1;
  80b3a8:	00bfffc4 	movi	r2,-1
  80b3ac:	00000106 	br	80b3b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  80b3b0:	e0bff917 	ldw	r2,-28(fp)
}
  80b3b4:	e037883a 	mov	sp,fp
  80b3b8:	dfc00117 	ldw	ra,4(sp)
  80b3bc:	df000017 	ldw	fp,0(sp)
  80b3c0:	dec00204 	addi	sp,sp,8
  80b3c4:	f800283a 	ret

0080b3c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b3c8:	defffc04 	addi	sp,sp,-16
  80b3cc:	dfc00315 	stw	ra,12(sp)
  80b3d0:	df000215 	stw	fp,8(sp)
  80b3d4:	dc000115 	stw	r16,4(sp)
  80b3d8:	df000204 	addi	fp,sp,8
  80b3dc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80b3e0:	e0bffe17 	ldw	r2,-8(fp)
  80b3e4:	108000d0 	cmplti	r2,r2,3
  80b3e8:	1000111e 	bne	r2,zero,80b430 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b3ec:	04002074 	movhi	r16,129
  80b3f0:	8436e904 	addi	r16,r16,-9308
  80b3f4:	e0bffe17 	ldw	r2,-8(fp)
  80b3f8:	01400304 	movi	r5,12
  80b3fc:	1009883a 	mov	r4,r2
  80b400:	080c6ac0 	call	80c6ac <__mulsi3>
  80b404:	8085883a 	add	r2,r16,r2
  80b408:	10800204 	addi	r2,r2,8
  80b40c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b410:	04002074 	movhi	r16,129
  80b414:	8436e904 	addi	r16,r16,-9308
  80b418:	e0bffe17 	ldw	r2,-8(fp)
  80b41c:	01400304 	movi	r5,12
  80b420:	1009883a 	mov	r4,r2
  80b424:	080c6ac0 	call	80c6ac <__mulsi3>
  80b428:	8085883a 	add	r2,r16,r2
  80b42c:	10000015 	stw	zero,0(r2)
  }
}
  80b430:	0001883a 	nop
  80b434:	e6ffff04 	addi	sp,fp,-4
  80b438:	dfc00217 	ldw	ra,8(sp)
  80b43c:	df000117 	ldw	fp,4(sp)
  80b440:	dc000017 	ldw	r16,0(sp)
  80b444:	dec00304 	addi	sp,sp,12
  80b448:	f800283a 	ret

0080b44c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80b44c:	defffa04 	addi	sp,sp,-24
  80b450:	df000515 	stw	fp,20(sp)
  80b454:	df000504 	addi	fp,sp,20
  80b458:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b45c:	0005303a 	rdctl	r2,status
  80b460:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b464:	e0fffc17 	ldw	r3,-16(fp)
  80b468:	00bfff84 	movi	r2,-2
  80b46c:	1884703a 	and	r2,r3,r2
  80b470:	1001703a 	wrctl	status,r2
  
  return context;
  80b474:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80b478:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80b47c:	e0bfff17 	ldw	r2,-4(fp)
  80b480:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80b484:	e0bffd17 	ldw	r2,-12(fp)
  80b488:	10800017 	ldw	r2,0(r2)
  80b48c:	e0fffd17 	ldw	r3,-12(fp)
  80b490:	18c00117 	ldw	r3,4(r3)
  80b494:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80b498:	e0bffd17 	ldw	r2,-12(fp)
  80b49c:	10800117 	ldw	r2,4(r2)
  80b4a0:	e0fffd17 	ldw	r3,-12(fp)
  80b4a4:	18c00017 	ldw	r3,0(r3)
  80b4a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80b4ac:	e0bffd17 	ldw	r2,-12(fp)
  80b4b0:	e0fffd17 	ldw	r3,-12(fp)
  80b4b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80b4b8:	e0bffd17 	ldw	r2,-12(fp)
  80b4bc:	e0fffd17 	ldw	r3,-12(fp)
  80b4c0:	10c00015 	stw	r3,0(r2)
  80b4c4:	e0bffb17 	ldw	r2,-20(fp)
  80b4c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4cc:	e0bffe17 	ldw	r2,-8(fp)
  80b4d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80b4d4:	0001883a 	nop
  80b4d8:	e037883a 	mov	sp,fp
  80b4dc:	df000017 	ldw	fp,0(sp)
  80b4e0:	dec00104 	addi	sp,sp,4
  80b4e4:	f800283a 	ret

0080b4e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80b4e8:	defffb04 	addi	sp,sp,-20
  80b4ec:	dfc00415 	stw	ra,16(sp)
  80b4f0:	df000315 	stw	fp,12(sp)
  80b4f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80b4f8:	d0a02817 	ldw	r2,-32608(gp)
  80b4fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80b500:	d0a04a17 	ldw	r2,-32472(gp)
  80b504:	10800044 	addi	r2,r2,1
  80b508:	d0a04a15 	stw	r2,-32472(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b50c:	00002e06 	br	80b5c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80b510:	e0bffd17 	ldw	r2,-12(fp)
  80b514:	10800017 	ldw	r2,0(r2)
  80b518:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80b51c:	e0bffd17 	ldw	r2,-12(fp)
  80b520:	10800403 	ldbu	r2,16(r2)
  80b524:	10803fcc 	andi	r2,r2,255
  80b528:	10000426 	beq	r2,zero,80b53c <alt_tick+0x54>
  80b52c:	d0a04a17 	ldw	r2,-32472(gp)
  80b530:	1000021e 	bne	r2,zero,80b53c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80b534:	e0bffd17 	ldw	r2,-12(fp)
  80b538:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80b53c:	e0bffd17 	ldw	r2,-12(fp)
  80b540:	10800217 	ldw	r2,8(r2)
  80b544:	d0e04a17 	ldw	r3,-32472(gp)
  80b548:	18801d36 	bltu	r3,r2,80b5c0 <alt_tick+0xd8>
  80b54c:	e0bffd17 	ldw	r2,-12(fp)
  80b550:	10800403 	ldbu	r2,16(r2)
  80b554:	10803fcc 	andi	r2,r2,255
  80b558:	1000191e 	bne	r2,zero,80b5c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80b55c:	e0bffd17 	ldw	r2,-12(fp)
  80b560:	10800317 	ldw	r2,12(r2)
  80b564:	e0fffd17 	ldw	r3,-12(fp)
  80b568:	18c00517 	ldw	r3,20(r3)
  80b56c:	1809883a 	mov	r4,r3
  80b570:	103ee83a 	callr	r2
  80b574:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80b578:	e0bfff17 	ldw	r2,-4(fp)
  80b57c:	1000031e 	bne	r2,zero,80b58c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80b580:	e13ffd17 	ldw	r4,-12(fp)
  80b584:	080b44c0 	call	80b44c <alt_alarm_stop>
  80b588:	00000d06 	br	80b5c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80b58c:	e0bffd17 	ldw	r2,-12(fp)
  80b590:	10c00217 	ldw	r3,8(r2)
  80b594:	e0bfff17 	ldw	r2,-4(fp)
  80b598:	1887883a 	add	r3,r3,r2
  80b59c:	e0bffd17 	ldw	r2,-12(fp)
  80b5a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80b5a4:	e0bffd17 	ldw	r2,-12(fp)
  80b5a8:	10c00217 	ldw	r3,8(r2)
  80b5ac:	d0a04a17 	ldw	r2,-32472(gp)
  80b5b0:	1880032e 	bgeu	r3,r2,80b5c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80b5b4:	e0bffd17 	ldw	r2,-12(fp)
  80b5b8:	00c00044 	movi	r3,1
  80b5bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80b5c0:	e0bffe17 	ldw	r2,-8(fp)
  80b5c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b5c8:	e0fffd17 	ldw	r3,-12(fp)
  80b5cc:	d0a02804 	addi	r2,gp,-32608
  80b5d0:	18bfcf1e 	bne	r3,r2,80b510 <__alt_mem_epcs_flash_controller_0+0xff802510>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80b5d4:	08011500 	call	801150 <OSTimeTick>
}
  80b5d8:	0001883a 	nop
  80b5dc:	e037883a 	mov	sp,fp
  80b5e0:	dfc00117 	ldw	ra,4(sp)
  80b5e4:	df000017 	ldw	fp,0(sp)
  80b5e8:	dec00204 	addi	sp,sp,8
  80b5ec:	f800283a 	ret

0080b5f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80b5f0:	deffff04 	addi	sp,sp,-4
  80b5f4:	df000015 	stw	fp,0(sp)
  80b5f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80b5fc:	000170fa 	wrctl	ienable,zero
}
  80b600:	0001883a 	nop
  80b604:	e037883a 	mov	sp,fp
  80b608:	df000017 	ldw	fp,0(sp)
  80b60c:	dec00104 	addi	sp,sp,4
  80b610:	f800283a 	ret

0080b614 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  80b614:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  80b618:	d0e02b17 	ldw	r3,-32596(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  80b61c:	d1204217 	ldw	r4,-32504(gp)

      stw ra,  0(sp)
  80b620:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  80b624:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  80b628:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  80b62c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  80b630:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  80b634:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  80b638:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  80b63c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  80b640:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  80b644:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  80b648:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  80b64c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80b650:	080b8880 	call	80b888 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  80b654:	d1203d17 	ldw	r4,-32524(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  80b658:	d1603507 	ldb	r5,-32556(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  80b65c:	d1204215 	stw	r4,-32504(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  80b660:	d1603545 	stb	r5,-32555(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  80b664:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  80b668:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  80b66c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  80b670:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  80b674:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  80b678:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  80b67c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  80b680:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  80b684:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  80b688:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  80b68c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  80b690:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  80b694:	d0e02b15 	stw	r3,-32596(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  80b698:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  80b69c:	f800283a 	ret

0080b6a0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  80b6a0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  80b6a4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  80b6a8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  80b6ac:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80b6b0:	080b8880 	call	80b888 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  80b6b4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  80b6b8:	d4a03345 	stb	r18,-32563(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  80b6bc:	003fe506 	br	80b654 <__alt_mem_epcs_flash_controller_0+0xff802654>

0080b6c0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  80b6c0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  80b6c4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  80b6c8:	10800054 	ori	r2,r2,1
      wrctl status, r2
  80b6cc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  80b6d0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  80b6d4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  80b6d8:	dec00204 	addi	sp,sp,8

      callr r2
  80b6dc:	103ee83a 	callr	r2

      nop
  80b6e0:	0001883a 	nop

0080b6e4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  80b6e4:	defff704 	addi	sp,sp,-36
  80b6e8:	dfc00815 	stw	ra,32(sp)
  80b6ec:	df000715 	stw	fp,28(sp)
  80b6f0:	df000704 	addi	fp,sp,28
  80b6f4:	e13ffc15 	stw	r4,-16(fp)
  80b6f8:	e17ffd15 	stw	r5,-12(fp)
  80b6fc:	e1bffe15 	stw	r6,-8(fp)
  80b700:	3805883a 	mov	r2,r7
  80b704:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  80b708:	e0fffe17 	ldw	r3,-8(fp)
  80b70c:	00bfff04 	movi	r2,-4
  80b710:	1884703a 	and	r2,r3,r2
  80b714:	10bef704 	addi	r2,r2,-1060
  80b718:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  80b71c:	01810904 	movi	r6,1060
  80b720:	000b883a 	mov	r5,zero
  80b724:	e13ff917 	ldw	r4,-28(fp)
  80b728:	080c0a00 	call	80c0a0 <memset>
  80b72c:	e0bff917 	ldw	r2,-28(fp)
  80b730:	10c0bb04 	addi	r3,r2,748
  80b734:	e0bff917 	ldw	r2,-28(fp)
  80b738:	10c00115 	stw	r3,4(r2)
  80b73c:	e0bff917 	ldw	r2,-28(fp)
  80b740:	10c0d504 	addi	r3,r2,852
  80b744:	e0bff917 	ldw	r2,-28(fp)
  80b748:	10c00215 	stw	r3,8(r2)
  80b74c:	e0bff917 	ldw	r2,-28(fp)
  80b750:	10c0ef04 	addi	r3,r2,956
  80b754:	e0bff917 	ldw	r2,-28(fp)
  80b758:	10c00315 	stw	r3,12(r2)
  80b75c:	e0fff917 	ldw	r3,-28(fp)
  80b760:	00802074 	movhi	r2,129
  80b764:	10b22704 	addi	r2,r2,-14180
  80b768:	18800d15 	stw	r2,52(r3)
  80b76c:	e0bff917 	ldw	r2,-28(fp)
  80b770:	00c00044 	movi	r3,1
  80b774:	10c02915 	stw	r3,164(r2)
  80b778:	10002a15 	stw	zero,168(r2)
  80b77c:	e0bff917 	ldw	r2,-28(fp)
  80b780:	00ccc384 	movi	r3,13070
  80b784:	10c02b0d 	sth	r3,172(r2)
  80b788:	e0bff917 	ldw	r2,-28(fp)
  80b78c:	00eaf344 	movi	r3,-21555
  80b790:	10c02b8d 	sth	r3,174(r2)
  80b794:	e0bff917 	ldw	r2,-28(fp)
  80b798:	00c48d04 	movi	r3,4660
  80b79c:	10c02c0d 	sth	r3,176(r2)
  80b7a0:	e0bff917 	ldw	r2,-28(fp)
  80b7a4:	00f99b44 	movi	r3,-6547
  80b7a8:	10c02c8d 	sth	r3,178(r2)
  80b7ac:	e0bff917 	ldw	r2,-28(fp)
  80b7b0:	00f7bb04 	movi	r3,-8468
  80b7b4:	10c02d0d 	sth	r3,180(r2)
  80b7b8:	e0bff917 	ldw	r2,-28(fp)
  80b7bc:	00c00144 	movi	r3,5
  80b7c0:	10c02d8d 	sth	r3,182(r2)
  80b7c4:	e0bff917 	ldw	r2,-28(fp)
  80b7c8:	00c002c4 	movi	r3,11
  80b7cc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  80b7d0:	e0bff917 	ldw	r2,-28(fp)
  80b7d4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  80b7d8:	e0bffa17 	ldw	r2,-24(fp)
  80b7dc:	10bff304 	addi	r2,r2,-52
  80b7e0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  80b7e4:	e0bffb17 	ldw	r2,-20(fp)
  80b7e8:	10800c04 	addi	r2,r2,48
  80b7ec:	e0fffc17 	ldw	r3,-16(fp)
  80b7f0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  80b7f4:	e0bffb17 	ldw	r2,-20(fp)
  80b7f8:	10800b04 	addi	r2,r2,44
  80b7fc:	e0fffd17 	ldw	r3,-12(fp)
  80b800:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  80b804:	e0bffb17 	ldw	r2,-20(fp)
  80b808:	10800a04 	addi	r2,r2,40
  80b80c:	e0fff917 	ldw	r3,-28(fp)
  80b810:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  80b814:	00802074 	movhi	r2,129
  80b818:	10adb004 	addi	r2,r2,-18752
  80b81c:	10c00104 	addi	r3,r2,4
  80b820:	e0bffb17 	ldw	r2,-20(fp)
  80b824:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  80b828:	e0bffb17 	ldw	r2,-20(fp)
}
  80b82c:	e037883a 	mov	sp,fp
  80b830:	dfc00117 	ldw	ra,4(sp)
  80b834:	df000017 	ldw	fp,0(sp)
  80b838:	dec00204 	addi	sp,sp,8
  80b83c:	f800283a 	ret

0080b840 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  80b840:	defffe04 	addi	sp,sp,-8
  80b844:	df000115 	stw	fp,4(sp)
  80b848:	df000104 	addi	fp,sp,4
  80b84c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  80b850:	0001883a 	nop
  80b854:	e037883a 	mov	sp,fp
  80b858:	df000017 	ldw	fp,0(sp)
  80b85c:	dec00104 	addi	sp,sp,4
  80b860:	f800283a 	ret

0080b864 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  80b864:	defffe04 	addi	sp,sp,-8
  80b868:	df000115 	stw	fp,4(sp)
  80b86c:	df000104 	addi	fp,sp,4
  80b870:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  80b874:	0001883a 	nop
  80b878:	e037883a 	mov	sp,fp
  80b87c:	df000017 	ldw	fp,0(sp)
  80b880:	dec00104 	addi	sp,sp,4
  80b884:	f800283a 	ret

0080b888 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  80b888:	deffff04 	addi	sp,sp,-4
  80b88c:	df000015 	stw	fp,0(sp)
  80b890:	d839883a 	mov	fp,sp
}
  80b894:	0001883a 	nop
  80b898:	e037883a 	mov	sp,fp
  80b89c:	df000017 	ldw	fp,0(sp)
  80b8a0:	dec00104 	addi	sp,sp,4
  80b8a4:	f800283a 	ret

0080b8a8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  80b8a8:	deffff04 	addi	sp,sp,-4
  80b8ac:	df000015 	stw	fp,0(sp)
  80b8b0:	d839883a 	mov	fp,sp
}
  80b8b4:	0001883a 	nop
  80b8b8:	e037883a 	mov	sp,fp
  80b8bc:	df000017 	ldw	fp,0(sp)
  80b8c0:	dec00104 	addi	sp,sp,4
  80b8c4:	f800283a 	ret

0080b8c8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  80b8c8:	deffff04 	addi	sp,sp,-4
  80b8cc:	df000015 	stw	fp,0(sp)
  80b8d0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  80b8d4:	0001883a 	nop
  80b8d8:	e037883a 	mov	sp,fp
  80b8dc:	df000017 	ldw	fp,0(sp)
  80b8e0:	dec00104 	addi	sp,sp,4
  80b8e4:	f800283a 	ret

0080b8e8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  80b8e8:	deffff04 	addi	sp,sp,-4
  80b8ec:	df000015 	stw	fp,0(sp)
  80b8f0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  80b8f4:	0001883a 	nop
  80b8f8:	e037883a 	mov	sp,fp
  80b8fc:	df000017 	ldw	fp,0(sp)
  80b900:	dec00104 	addi	sp,sp,4
  80b904:	f800283a 	ret

0080b908 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  80b908:	deffff04 	addi	sp,sp,-4
  80b90c:	df000015 	stw	fp,0(sp)
  80b910:	d839883a 	mov	fp,sp
}
  80b914:	0001883a 	nop
  80b918:	e037883a 	mov	sp,fp
  80b91c:	df000017 	ldw	fp,0(sp)
  80b920:	dec00104 	addi	sp,sp,4
  80b924:	f800283a 	ret

0080b928 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  80b928:	deffff04 	addi	sp,sp,-4
  80b92c:	df000015 	stw	fp,0(sp)
  80b930:	d839883a 	mov	fp,sp
}
  80b934:	0001883a 	nop
  80b938:	e037883a 	mov	sp,fp
  80b93c:	df000017 	ldw	fp,0(sp)
  80b940:	dec00104 	addi	sp,sp,4
  80b944:	f800283a 	ret

0080b948 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  80b948:	defffe04 	addi	sp,sp,-8
  80b94c:	df000115 	stw	fp,4(sp)
  80b950:	df000104 	addi	fp,sp,4
  80b954:	e13fff15 	stw	r4,-4(fp)
}
  80b958:	0001883a 	nop
  80b95c:	e037883a 	mov	sp,fp
  80b960:	df000017 	ldw	fp,0(sp)
  80b964:	dec00104 	addi	sp,sp,4
  80b968:	f800283a 	ret

0080b96c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  80b96c:	defff404 	addi	sp,sp,-48
  80b970:	df000b15 	stw	fp,44(sp)
  80b974:	df000b04 	addi	fp,sp,44
  80b978:	e13ffc15 	stw	r4,-16(fp)
  80b97c:	e17ffd15 	stw	r5,-12(fp)
  80b980:	e1bffe15 	stw	r6,-8(fp)
  80b984:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  80b988:	e0ffff17 	ldw	r3,-4(fp)
  80b98c:	e0bffe17 	ldw	r2,-8(fp)
  80b990:	1885883a 	add	r2,r3,r2
  80b994:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  80b998:	e0c00217 	ldw	r3,8(fp)
  80b99c:	e0800117 	ldw	r2,4(fp)
  80b9a0:	1885883a 	add	r2,r3,r2
  80b9a4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  80b9a8:	e0800117 	ldw	r2,4(fp)
  80b9ac:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  80b9b0:	e0bffe17 	ldw	r2,-8(fp)
  80b9b4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  80b9b8:	00800044 	movi	r2,1
  80b9bc:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80b9c0:	e0bffc17 	ldw	r2,-16(fp)
  80b9c4:	10800504 	addi	r2,r2,20
  80b9c8:	1009883a 	mov	r4,r2
  80b9cc:	00c00044 	movi	r3,1
  80b9d0:	e0bffd17 	ldw	r2,-12(fp)
  80b9d4:	1884983a 	sll	r2,r3,r2
  80b9d8:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  80b9dc:	e0800317 	ldw	r2,12(fp)
  80b9e0:	1080008c 	andi	r2,r2,2
  80b9e4:	1000051e 	bne	r2,zero,80b9fc <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80b9e8:	e0bffc17 	ldw	r2,-16(fp)
  80b9ec:	10800304 	addi	r2,r2,12
  80b9f0:	1007883a 	mov	r3,r2
  80b9f4:	00810004 	movi	r2,1024
  80b9f8:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80b9fc:	e0bffc17 	ldw	r2,-16(fp)
  80ba00:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80ba04:	e0bffc17 	ldw	r2,-16(fp)
  80ba08:	10800204 	addi	r2,r2,8
  80ba0c:	10800037 	ldwio	r2,0(r2)
  80ba10:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80ba14:	e0bffa17 	ldw	r2,-24(fp)
  80ba18:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80ba1c:	10000226 	beq	r2,zero,80ba28 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80ba20:	e0bff717 	ldw	r2,-36(fp)
  80ba24:	1000031e 	bne	r2,zero,80ba34 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80ba28:	e0bffa17 	ldw	r2,-24(fp)
  80ba2c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80ba30:	103ff426 	beq	r2,zero,80ba04 <__alt_mem_epcs_flash_controller_0+0xff802a04>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  80ba34:	e0bffa17 	ldw	r2,-24(fp)
  80ba38:	1080100c 	andi	r2,r2,64
  80ba3c:	10001e26 	beq	r2,zero,80bab8 <alt_avalon_spi_command+0x14c>
  80ba40:	e0bff717 	ldw	r2,-36(fp)
  80ba44:	00801c0e 	bge	zero,r2,80bab8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  80ba48:	e0bff717 	ldw	r2,-36(fp)
  80ba4c:	10bfffc4 	addi	r2,r2,-1
  80ba50:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  80ba54:	e0ffff17 	ldw	r3,-4(fp)
  80ba58:	e0bff817 	ldw	r2,-32(fp)
  80ba5c:	18800a2e 	bgeu	r3,r2,80ba88 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  80ba60:	e0bffc17 	ldw	r2,-16(fp)
  80ba64:	10800104 	addi	r2,r2,4
  80ba68:	1009883a 	mov	r4,r2
  80ba6c:	e0bfff17 	ldw	r2,-4(fp)
  80ba70:	10c00044 	addi	r3,r2,1
  80ba74:	e0ffff15 	stw	r3,-4(fp)
  80ba78:	10800003 	ldbu	r2,0(r2)
  80ba7c:	10803fcc 	andi	r2,r2,255
  80ba80:	20800035 	stwio	r2,0(r4)
  80ba84:	00000c06 	br	80bab8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  80ba88:	e0bff517 	ldw	r2,-44(fp)
  80ba8c:	10000826 	beq	r2,zero,80bab0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  80ba90:	e0bff517 	ldw	r2,-44(fp)
  80ba94:	10bfffc4 	addi	r2,r2,-1
  80ba98:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  80ba9c:	e0bffc17 	ldw	r2,-16(fp)
  80baa0:	10800104 	addi	r2,r2,4
  80baa4:	0007883a 	mov	r3,zero
  80baa8:	10c00035 	stwio	r3,0(r2)
  80baac:	00000206 	br	80bab8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  80bab0:	00bf0004 	movi	r2,-1024
  80bab4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  80bab8:	e0bffa17 	ldw	r2,-24(fp)
  80babc:	1080200c 	andi	r2,r2,128
  80bac0:	103fd026 	beq	r2,zero,80ba04 <__alt_mem_epcs_flash_controller_0+0xff802a04>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80bac4:	e0bffc17 	ldw	r2,-16(fp)
  80bac8:	10800037 	ldwio	r2,0(r2)
  80bacc:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  80bad0:	e0bff617 	ldw	r2,-40(fp)
  80bad4:	10000426 	beq	r2,zero,80bae8 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  80bad8:	e0bff617 	ldw	r2,-40(fp)
  80badc:	10bfffc4 	addi	r2,r2,-1
  80bae0:	e0bff615 	stw	r2,-40(fp)
  80bae4:	00000506 	br	80bafc <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  80bae8:	e0800217 	ldw	r2,8(fp)
  80baec:	10c00044 	addi	r3,r2,1
  80baf0:	e0c00215 	stw	r3,8(fp)
  80baf4:	e0fffb17 	ldw	r3,-20(fp)
  80baf8:	10c00005 	stb	r3,0(r2)
      credits++;
  80bafc:	e0bff717 	ldw	r2,-36(fp)
  80bb00:	10800044 	addi	r2,r2,1
  80bb04:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  80bb08:	e0bff617 	ldw	r2,-40(fp)
  80bb0c:	103fbd1e 	bne	r2,zero,80ba04 <__alt_mem_epcs_flash_controller_0+0xff802a04>
  80bb10:	e0c00217 	ldw	r3,8(fp)
  80bb14:	e0bff917 	ldw	r2,-28(fp)
  80bb18:	18bfba1e 	bne	r3,r2,80ba04 <__alt_mem_epcs_flash_controller_0+0xff802a04>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80bb1c:	e0bffc17 	ldw	r2,-16(fp)
  80bb20:	10800204 	addi	r2,r2,8
  80bb24:	10800037 	ldwio	r2,0(r2)
  80bb28:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  80bb2c:	e0bffa17 	ldw	r2,-24(fp)
  80bb30:	1080080c 	andi	r2,r2,32
  80bb34:	103ff926 	beq	r2,zero,80bb1c <__alt_mem_epcs_flash_controller_0+0xff802b1c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  80bb38:	e0800317 	ldw	r2,12(fp)
  80bb3c:	1080004c 	andi	r2,r2,1
  80bb40:	1000041e 	bne	r2,zero,80bb54 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  80bb44:	e0bffc17 	ldw	r2,-16(fp)
  80bb48:	10800304 	addi	r2,r2,12
  80bb4c:	0007883a 	mov	r3,zero
  80bb50:	10c00035 	stwio	r3,0(r2)

  return read_length;
  80bb54:	e0800117 	ldw	r2,4(fp)
}
  80bb58:	e037883a 	mov	sp,fp
  80bb5c:	df000017 	ldw	fp,0(sp)
  80bb60:	dec00104 	addi	sp,sp,4
  80bb64:	f800283a 	ret

0080bb68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80bb68:	defffa04 	addi	sp,sp,-24
  80bb6c:	dfc00515 	stw	ra,20(sp)
  80bb70:	df000415 	stw	fp,16(sp)
  80bb74:	df000404 	addi	fp,sp,16
  80bb78:	e13ffe15 	stw	r4,-8(fp)
  80bb7c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80bb80:	e0bfff17 	ldw	r2,-4(fp)
  80bb84:	10800017 	ldw	r2,0(r2)
  80bb88:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80bb8c:	e13ffe17 	ldw	r4,-8(fp)
  80bb90:	080c1c80 	call	80c1c8 <strlen>
  80bb94:	10800044 	addi	r2,r2,1
  80bb98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80bb9c:	00000d06 	br	80bbd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80bba0:	e0bffc17 	ldw	r2,-16(fp)
  80bba4:	10800217 	ldw	r2,8(r2)
  80bba8:	e0fffd17 	ldw	r3,-12(fp)
  80bbac:	180d883a 	mov	r6,r3
  80bbb0:	e17ffe17 	ldw	r5,-8(fp)
  80bbb4:	1009883a 	mov	r4,r2
  80bbb8:	080bedc0 	call	80bedc <memcmp>
  80bbbc:	1000021e 	bne	r2,zero,80bbc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80bbc0:	e0bffc17 	ldw	r2,-16(fp)
  80bbc4:	00000706 	br	80bbe4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80bbc8:	e0bffc17 	ldw	r2,-16(fp)
  80bbcc:	10800017 	ldw	r2,0(r2)
  80bbd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80bbd4:	e0fffc17 	ldw	r3,-16(fp)
  80bbd8:	e0bfff17 	ldw	r2,-4(fp)
  80bbdc:	18bff01e 	bne	r3,r2,80bba0 <__alt_mem_epcs_flash_controller_0+0xff802ba0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80bbe0:	0005883a 	mov	r2,zero
}
  80bbe4:	e037883a 	mov	sp,fp
  80bbe8:	dfc00117 	ldw	ra,4(sp)
  80bbec:	df000017 	ldw	fp,0(sp)
  80bbf0:	dec00204 	addi	sp,sp,8
  80bbf4:	f800283a 	ret

0080bbf8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80bbf8:	defffb04 	addi	sp,sp,-20
  80bbfc:	dfc00415 	stw	ra,16(sp)
  80bc00:	df000315 	stw	fp,12(sp)
  80bc04:	df000304 	addi	fp,sp,12
  80bc08:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80bc0c:	d0a01f17 	ldw	r2,-32644(gp)
  80bc10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80bc14:	00003106 	br	80bcdc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80bc18:	e0bffd17 	ldw	r2,-12(fp)
  80bc1c:	10800217 	ldw	r2,8(r2)
  80bc20:	1009883a 	mov	r4,r2
  80bc24:	080c1c80 	call	80c1c8 <strlen>
  80bc28:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80bc2c:	e0bffd17 	ldw	r2,-12(fp)
  80bc30:	10c00217 	ldw	r3,8(r2)
  80bc34:	e0bffe17 	ldw	r2,-8(fp)
  80bc38:	10bfffc4 	addi	r2,r2,-1
  80bc3c:	1885883a 	add	r2,r3,r2
  80bc40:	10800003 	ldbu	r2,0(r2)
  80bc44:	10803fcc 	andi	r2,r2,255
  80bc48:	1080201c 	xori	r2,r2,128
  80bc4c:	10bfe004 	addi	r2,r2,-128
  80bc50:	10800bd8 	cmpnei	r2,r2,47
  80bc54:	1000031e 	bne	r2,zero,80bc64 <alt_find_file+0x6c>
    {
      len -= 1;
  80bc58:	e0bffe17 	ldw	r2,-8(fp)
  80bc5c:	10bfffc4 	addi	r2,r2,-1
  80bc60:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80bc64:	e0bffe17 	ldw	r2,-8(fp)
  80bc68:	e0ffff17 	ldw	r3,-4(fp)
  80bc6c:	1885883a 	add	r2,r3,r2
  80bc70:	10800003 	ldbu	r2,0(r2)
  80bc74:	10803fcc 	andi	r2,r2,255
  80bc78:	1080201c 	xori	r2,r2,128
  80bc7c:	10bfe004 	addi	r2,r2,-128
  80bc80:	10800be0 	cmpeqi	r2,r2,47
  80bc84:	1000081e 	bne	r2,zero,80bca8 <alt_find_file+0xb0>
  80bc88:	e0bffe17 	ldw	r2,-8(fp)
  80bc8c:	e0ffff17 	ldw	r3,-4(fp)
  80bc90:	1885883a 	add	r2,r3,r2
  80bc94:	10800003 	ldbu	r2,0(r2)
  80bc98:	10803fcc 	andi	r2,r2,255
  80bc9c:	1080201c 	xori	r2,r2,128
  80bca0:	10bfe004 	addi	r2,r2,-128
  80bca4:	10000a1e 	bne	r2,zero,80bcd0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80bca8:	e0bffd17 	ldw	r2,-12(fp)
  80bcac:	10800217 	ldw	r2,8(r2)
  80bcb0:	e0fffe17 	ldw	r3,-8(fp)
  80bcb4:	180d883a 	mov	r6,r3
  80bcb8:	e17fff17 	ldw	r5,-4(fp)
  80bcbc:	1009883a 	mov	r4,r2
  80bcc0:	080bedc0 	call	80bedc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80bcc4:	1000021e 	bne	r2,zero,80bcd0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80bcc8:	e0bffd17 	ldw	r2,-12(fp)
  80bccc:	00000706 	br	80bcec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80bcd0:	e0bffd17 	ldw	r2,-12(fp)
  80bcd4:	10800017 	ldw	r2,0(r2)
  80bcd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80bcdc:	e0fffd17 	ldw	r3,-12(fp)
  80bce0:	d0a01f04 	addi	r2,gp,-32644
  80bce4:	18bfcc1e 	bne	r3,r2,80bc18 <__alt_mem_epcs_flash_controller_0+0xff802c18>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80bce8:	0005883a 	mov	r2,zero
}
  80bcec:	e037883a 	mov	sp,fp
  80bcf0:	dfc00117 	ldw	ra,4(sp)
  80bcf4:	df000017 	ldw	fp,0(sp)
  80bcf8:	dec00204 	addi	sp,sp,8
  80bcfc:	f800283a 	ret

0080bd00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80bd00:	defff804 	addi	sp,sp,-32
  80bd04:	dfc00715 	stw	ra,28(sp)
  80bd08:	df000615 	stw	fp,24(sp)
  80bd0c:	dc000515 	stw	r16,20(sp)
  80bd10:	df000604 	addi	fp,sp,24
  80bd14:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80bd18:	00bffa04 	movi	r2,-24
  80bd1c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  80bd20:	d0a04717 	ldw	r2,-32484(gp)
  80bd24:	e0bffc15 	stw	r2,-16(fp)
  80bd28:	e03ffd0d 	sth	zero,-12(fp)
  80bd2c:	e0bffd0b 	ldhu	r2,-12(fp)
  80bd30:	e0fffd84 	addi	r3,fp,-10
  80bd34:	180d883a 	mov	r6,r3
  80bd38:	100b883a 	mov	r5,r2
  80bd3c:	e13ffc17 	ldw	r4,-16(fp)
  80bd40:	08059a00 	call	8059a0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80bd44:	e03ffa15 	stw	zero,-24(fp)
  80bd48:	00001d06 	br	80bdc0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  80bd4c:	04002074 	movhi	r16,129
  80bd50:	8436e904 	addi	r16,r16,-9308
  80bd54:	e0bffa17 	ldw	r2,-24(fp)
  80bd58:	01400304 	movi	r5,12
  80bd5c:	1009883a 	mov	r4,r2
  80bd60:	080c6ac0 	call	80c6ac <__mulsi3>
  80bd64:	8085883a 	add	r2,r16,r2
  80bd68:	10800017 	ldw	r2,0(r2)
  80bd6c:	1000111e 	bne	r2,zero,80bdb4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  80bd70:	04002074 	movhi	r16,129
  80bd74:	8436e904 	addi	r16,r16,-9308
  80bd78:	e0bffa17 	ldw	r2,-24(fp)
  80bd7c:	01400304 	movi	r5,12
  80bd80:	1009883a 	mov	r4,r2
  80bd84:	080c6ac0 	call	80c6ac <__mulsi3>
  80bd88:	8085883a 	add	r2,r16,r2
  80bd8c:	e0fffe17 	ldw	r3,-8(fp)
  80bd90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80bd94:	d0e02317 	ldw	r3,-32628(gp)
  80bd98:	e0bffa17 	ldw	r2,-24(fp)
  80bd9c:	1880020e 	bge	r3,r2,80bda8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  80bda0:	e0bffa17 	ldw	r2,-24(fp)
  80bda4:	d0a02315 	stw	r2,-32628(gp)
      }
      rc = i;
  80bda8:	e0bffa17 	ldw	r2,-24(fp)
  80bdac:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  80bdb0:	00000606 	br	80bdcc <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80bdb4:	e0bffa17 	ldw	r2,-24(fp)
  80bdb8:	10800044 	addi	r2,r2,1
  80bdbc:	e0bffa15 	stw	r2,-24(fp)
  80bdc0:	e0bffa17 	ldw	r2,-24(fp)
  80bdc4:	10800810 	cmplti	r2,r2,32
  80bdc8:	103fe01e 	bne	r2,zero,80bd4c <__alt_mem_epcs_flash_controller_0+0xff802d4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  80bdcc:	d0a04717 	ldw	r2,-32484(gp)
  80bdd0:	1009883a 	mov	r4,r2
  80bdd4:	0805d180 	call	805d18 <OSSemPost>

  return rc;
  80bdd8:	e0bffb17 	ldw	r2,-20(fp)
}
  80bddc:	e6ffff04 	addi	sp,fp,-4
  80bde0:	dfc00217 	ldw	ra,8(sp)
  80bde4:	df000117 	ldw	fp,4(sp)
  80bde8:	dc000017 	ldw	r16,0(sp)
  80bdec:	dec00304 	addi	sp,sp,12
  80bdf0:	f800283a 	ret

0080bdf4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80bdf4:	defffe04 	addi	sp,sp,-8
  80bdf8:	df000115 	stw	fp,4(sp)
  80bdfc:	df000104 	addi	fp,sp,4
  80be00:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80be04:	e0bfff17 	ldw	r2,-4(fp)
  80be08:	10bffe84 	addi	r2,r2,-6
  80be0c:	10c00428 	cmpgeui	r3,r2,16
  80be10:	18001a1e 	bne	r3,zero,80be7c <alt_exception_cause_generated_bad_addr+0x88>
  80be14:	100690ba 	slli	r3,r2,2
  80be18:	00802074 	movhi	r2,129
  80be1c:	10af8b04 	addi	r2,r2,-16852
  80be20:	1885883a 	add	r2,r3,r2
  80be24:	10800017 	ldw	r2,0(r2)
  80be28:	1000683a 	jmp	r2
  80be2c:	0080be6c 	andhi	r2,zero,761
  80be30:	0080be6c 	andhi	r2,zero,761
  80be34:	0080be7c 	xorhi	r2,zero,761
  80be38:	0080be7c 	xorhi	r2,zero,761
  80be3c:	0080be7c 	xorhi	r2,zero,761
  80be40:	0080be6c 	andhi	r2,zero,761
  80be44:	0080be74 	movhi	r2,761
  80be48:	0080be7c 	xorhi	r2,zero,761
  80be4c:	0080be6c 	andhi	r2,zero,761
  80be50:	0080be6c 	andhi	r2,zero,761
  80be54:	0080be7c 	xorhi	r2,zero,761
  80be58:	0080be6c 	andhi	r2,zero,761
  80be5c:	0080be74 	movhi	r2,761
  80be60:	0080be7c 	xorhi	r2,zero,761
  80be64:	0080be7c 	xorhi	r2,zero,761
  80be68:	0080be6c 	andhi	r2,zero,761
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80be6c:	00800044 	movi	r2,1
  80be70:	00000306 	br	80be80 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80be74:	0005883a 	mov	r2,zero
  80be78:	00000106 	br	80be80 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80be7c:	0005883a 	mov	r2,zero
  }
}
  80be80:	e037883a 	mov	sp,fp
  80be84:	df000017 	ldw	fp,0(sp)
  80be88:	dec00104 	addi	sp,sp,4
  80be8c:	f800283a 	ret

0080be90 <atexit>:
  80be90:	200b883a 	mov	r5,r4
  80be94:	000f883a 	mov	r7,zero
  80be98:	000d883a 	mov	r6,zero
  80be9c:	0009883a 	mov	r4,zero
  80bea0:	080c2601 	jmpi	80c260 <__register_exitproc>

0080bea4 <exit>:
  80bea4:	defffe04 	addi	sp,sp,-8
  80bea8:	000b883a 	mov	r5,zero
  80beac:	dc000015 	stw	r16,0(sp)
  80beb0:	dfc00115 	stw	ra,4(sp)
  80beb4:	2021883a 	mov	r16,r4
  80beb8:	080c3780 	call	80c378 <__call_exitprocs>
  80bebc:	00802074 	movhi	r2,129
  80bec0:	10b87c04 	addi	r2,r2,-7696
  80bec4:	11000017 	ldw	r4,0(r2)
  80bec8:	20800f17 	ldw	r2,60(r4)
  80becc:	10000126 	beq	r2,zero,80bed4 <exit+0x30>
  80bed0:	103ee83a 	callr	r2
  80bed4:	8009883a 	mov	r4,r16
  80bed8:	080c6d40 	call	80c6d4 <_exit>

0080bedc <memcmp>:
  80bedc:	01c000c4 	movi	r7,3
  80bee0:	3980192e 	bgeu	r7,r6,80bf48 <memcmp+0x6c>
  80bee4:	2144b03a 	or	r2,r4,r5
  80bee8:	11c4703a 	and	r2,r2,r7
  80beec:	10000f26 	beq	r2,zero,80bf2c <memcmp+0x50>
  80bef0:	20800003 	ldbu	r2,0(r4)
  80bef4:	28c00003 	ldbu	r3,0(r5)
  80bef8:	10c0151e 	bne	r2,r3,80bf50 <memcmp+0x74>
  80befc:	31bfff84 	addi	r6,r6,-2
  80bf00:	01ffffc4 	movi	r7,-1
  80bf04:	00000406 	br	80bf18 <memcmp+0x3c>
  80bf08:	20800003 	ldbu	r2,0(r4)
  80bf0c:	28c00003 	ldbu	r3,0(r5)
  80bf10:	31bfffc4 	addi	r6,r6,-1
  80bf14:	10c00e1e 	bne	r2,r3,80bf50 <memcmp+0x74>
  80bf18:	21000044 	addi	r4,r4,1
  80bf1c:	29400044 	addi	r5,r5,1
  80bf20:	31fff91e 	bne	r6,r7,80bf08 <__alt_mem_epcs_flash_controller_0+0xff802f08>
  80bf24:	0005883a 	mov	r2,zero
  80bf28:	f800283a 	ret
  80bf2c:	20c00017 	ldw	r3,0(r4)
  80bf30:	28800017 	ldw	r2,0(r5)
  80bf34:	18bfee1e 	bne	r3,r2,80bef0 <__alt_mem_epcs_flash_controller_0+0xff802ef0>
  80bf38:	31bfff04 	addi	r6,r6,-4
  80bf3c:	21000104 	addi	r4,r4,4
  80bf40:	29400104 	addi	r5,r5,4
  80bf44:	39bff936 	bltu	r7,r6,80bf2c <__alt_mem_epcs_flash_controller_0+0xff802f2c>
  80bf48:	303fe91e 	bne	r6,zero,80bef0 <__alt_mem_epcs_flash_controller_0+0xff802ef0>
  80bf4c:	003ff506 	br	80bf24 <__alt_mem_epcs_flash_controller_0+0xff802f24>
  80bf50:	10c5c83a 	sub	r2,r2,r3
  80bf54:	f800283a 	ret

0080bf58 <memcpy>:
  80bf58:	defffd04 	addi	sp,sp,-12
  80bf5c:	dfc00215 	stw	ra,8(sp)
  80bf60:	dc400115 	stw	r17,4(sp)
  80bf64:	dc000015 	stw	r16,0(sp)
  80bf68:	00c003c4 	movi	r3,15
  80bf6c:	2005883a 	mov	r2,r4
  80bf70:	1980452e 	bgeu	r3,r6,80c088 <memcpy+0x130>
  80bf74:	2906b03a 	or	r3,r5,r4
  80bf78:	18c000cc 	andi	r3,r3,3
  80bf7c:	1800441e 	bne	r3,zero,80c090 <memcpy+0x138>
  80bf80:	347ffc04 	addi	r17,r6,-16
  80bf84:	8822d13a 	srli	r17,r17,4
  80bf88:	28c00104 	addi	r3,r5,4
  80bf8c:	23400104 	addi	r13,r4,4
  80bf90:	8820913a 	slli	r16,r17,4
  80bf94:	2b000204 	addi	r12,r5,8
  80bf98:	22c00204 	addi	r11,r4,8
  80bf9c:	84000504 	addi	r16,r16,20
  80bfa0:	2a800304 	addi	r10,r5,12
  80bfa4:	22400304 	addi	r9,r4,12
  80bfa8:	2c21883a 	add	r16,r5,r16
  80bfac:	2811883a 	mov	r8,r5
  80bfb0:	200f883a 	mov	r7,r4
  80bfb4:	41000017 	ldw	r4,0(r8)
  80bfb8:	1fc00017 	ldw	ra,0(r3)
  80bfbc:	63c00017 	ldw	r15,0(r12)
  80bfc0:	39000015 	stw	r4,0(r7)
  80bfc4:	53800017 	ldw	r14,0(r10)
  80bfc8:	6fc00015 	stw	ra,0(r13)
  80bfcc:	5bc00015 	stw	r15,0(r11)
  80bfd0:	4b800015 	stw	r14,0(r9)
  80bfd4:	18c00404 	addi	r3,r3,16
  80bfd8:	39c00404 	addi	r7,r7,16
  80bfdc:	42000404 	addi	r8,r8,16
  80bfe0:	6b400404 	addi	r13,r13,16
  80bfe4:	63000404 	addi	r12,r12,16
  80bfe8:	5ac00404 	addi	r11,r11,16
  80bfec:	52800404 	addi	r10,r10,16
  80bff0:	4a400404 	addi	r9,r9,16
  80bff4:	1c3fef1e 	bne	r3,r16,80bfb4 <__alt_mem_epcs_flash_controller_0+0xff802fb4>
  80bff8:	89c00044 	addi	r7,r17,1
  80bffc:	380e913a 	slli	r7,r7,4
  80c000:	310003cc 	andi	r4,r6,15
  80c004:	02c000c4 	movi	r11,3
  80c008:	11c7883a 	add	r3,r2,r7
  80c00c:	29cb883a 	add	r5,r5,r7
  80c010:	5900212e 	bgeu	r11,r4,80c098 <memcpy+0x140>
  80c014:	1813883a 	mov	r9,r3
  80c018:	2811883a 	mov	r8,r5
  80c01c:	200f883a 	mov	r7,r4
  80c020:	42800017 	ldw	r10,0(r8)
  80c024:	4a400104 	addi	r9,r9,4
  80c028:	39ffff04 	addi	r7,r7,-4
  80c02c:	4abfff15 	stw	r10,-4(r9)
  80c030:	42000104 	addi	r8,r8,4
  80c034:	59fffa36 	bltu	r11,r7,80c020 <__alt_mem_epcs_flash_controller_0+0xff803020>
  80c038:	213fff04 	addi	r4,r4,-4
  80c03c:	2008d0ba 	srli	r4,r4,2
  80c040:	318000cc 	andi	r6,r6,3
  80c044:	21000044 	addi	r4,r4,1
  80c048:	2109883a 	add	r4,r4,r4
  80c04c:	2109883a 	add	r4,r4,r4
  80c050:	1907883a 	add	r3,r3,r4
  80c054:	290b883a 	add	r5,r5,r4
  80c058:	30000626 	beq	r6,zero,80c074 <memcpy+0x11c>
  80c05c:	198d883a 	add	r6,r3,r6
  80c060:	29c00003 	ldbu	r7,0(r5)
  80c064:	18c00044 	addi	r3,r3,1
  80c068:	29400044 	addi	r5,r5,1
  80c06c:	19ffffc5 	stb	r7,-1(r3)
  80c070:	19bffb1e 	bne	r3,r6,80c060 <__alt_mem_epcs_flash_controller_0+0xff803060>
  80c074:	dfc00217 	ldw	ra,8(sp)
  80c078:	dc400117 	ldw	r17,4(sp)
  80c07c:	dc000017 	ldw	r16,0(sp)
  80c080:	dec00304 	addi	sp,sp,12
  80c084:	f800283a 	ret
  80c088:	2007883a 	mov	r3,r4
  80c08c:	003ff206 	br	80c058 <__alt_mem_epcs_flash_controller_0+0xff803058>
  80c090:	2007883a 	mov	r3,r4
  80c094:	003ff106 	br	80c05c <__alt_mem_epcs_flash_controller_0+0xff80305c>
  80c098:	200d883a 	mov	r6,r4
  80c09c:	003fee06 	br	80c058 <__alt_mem_epcs_flash_controller_0+0xff803058>

0080c0a0 <memset>:
  80c0a0:	20c000cc 	andi	r3,r4,3
  80c0a4:	2005883a 	mov	r2,r4
  80c0a8:	18004426 	beq	r3,zero,80c1bc <memset+0x11c>
  80c0ac:	31ffffc4 	addi	r7,r6,-1
  80c0b0:	30004026 	beq	r6,zero,80c1b4 <memset+0x114>
  80c0b4:	2813883a 	mov	r9,r5
  80c0b8:	200d883a 	mov	r6,r4
  80c0bc:	2007883a 	mov	r3,r4
  80c0c0:	00000406 	br	80c0d4 <memset+0x34>
  80c0c4:	3a3fffc4 	addi	r8,r7,-1
  80c0c8:	31800044 	addi	r6,r6,1
  80c0cc:	38003926 	beq	r7,zero,80c1b4 <memset+0x114>
  80c0d0:	400f883a 	mov	r7,r8
  80c0d4:	18c00044 	addi	r3,r3,1
  80c0d8:	32400005 	stb	r9,0(r6)
  80c0dc:	1a0000cc 	andi	r8,r3,3
  80c0e0:	403ff81e 	bne	r8,zero,80c0c4 <__alt_mem_epcs_flash_controller_0+0xff8030c4>
  80c0e4:	010000c4 	movi	r4,3
  80c0e8:	21c02d2e 	bgeu	r4,r7,80c1a0 <memset+0x100>
  80c0ec:	29003fcc 	andi	r4,r5,255
  80c0f0:	200c923a 	slli	r6,r4,8
  80c0f4:	3108b03a 	or	r4,r6,r4
  80c0f8:	200c943a 	slli	r6,r4,16
  80c0fc:	218cb03a 	or	r6,r4,r6
  80c100:	010003c4 	movi	r4,15
  80c104:	21c0182e 	bgeu	r4,r7,80c168 <memset+0xc8>
  80c108:	3b3ffc04 	addi	r12,r7,-16
  80c10c:	6018d13a 	srli	r12,r12,4
  80c110:	1a000104 	addi	r8,r3,4
  80c114:	1ac00204 	addi	r11,r3,8
  80c118:	6008913a 	slli	r4,r12,4
  80c11c:	1a800304 	addi	r10,r3,12
  80c120:	1813883a 	mov	r9,r3
  80c124:	21000504 	addi	r4,r4,20
  80c128:	1909883a 	add	r4,r3,r4
  80c12c:	49800015 	stw	r6,0(r9)
  80c130:	41800015 	stw	r6,0(r8)
  80c134:	59800015 	stw	r6,0(r11)
  80c138:	51800015 	stw	r6,0(r10)
  80c13c:	42000404 	addi	r8,r8,16
  80c140:	4a400404 	addi	r9,r9,16
  80c144:	5ac00404 	addi	r11,r11,16
  80c148:	52800404 	addi	r10,r10,16
  80c14c:	413ff71e 	bne	r8,r4,80c12c <__alt_mem_epcs_flash_controller_0+0xff80312c>
  80c150:	63000044 	addi	r12,r12,1
  80c154:	6018913a 	slli	r12,r12,4
  80c158:	39c003cc 	andi	r7,r7,15
  80c15c:	010000c4 	movi	r4,3
  80c160:	1b07883a 	add	r3,r3,r12
  80c164:	21c00e2e 	bgeu	r4,r7,80c1a0 <memset+0x100>
  80c168:	1813883a 	mov	r9,r3
  80c16c:	3811883a 	mov	r8,r7
  80c170:	010000c4 	movi	r4,3
  80c174:	49800015 	stw	r6,0(r9)
  80c178:	423fff04 	addi	r8,r8,-4
  80c17c:	4a400104 	addi	r9,r9,4
  80c180:	223ffc36 	bltu	r4,r8,80c174 <__alt_mem_epcs_flash_controller_0+0xff803174>
  80c184:	393fff04 	addi	r4,r7,-4
  80c188:	2008d0ba 	srli	r4,r4,2
  80c18c:	39c000cc 	andi	r7,r7,3
  80c190:	21000044 	addi	r4,r4,1
  80c194:	2109883a 	add	r4,r4,r4
  80c198:	2109883a 	add	r4,r4,r4
  80c19c:	1907883a 	add	r3,r3,r4
  80c1a0:	38000526 	beq	r7,zero,80c1b8 <memset+0x118>
  80c1a4:	19cf883a 	add	r7,r3,r7
  80c1a8:	19400005 	stb	r5,0(r3)
  80c1ac:	18c00044 	addi	r3,r3,1
  80c1b0:	38fffd1e 	bne	r7,r3,80c1a8 <__alt_mem_epcs_flash_controller_0+0xff8031a8>
  80c1b4:	f800283a 	ret
  80c1b8:	f800283a 	ret
  80c1bc:	2007883a 	mov	r3,r4
  80c1c0:	300f883a 	mov	r7,r6
  80c1c4:	003fc706 	br	80c0e4 <__alt_mem_epcs_flash_controller_0+0xff8030e4>

0080c1c8 <strlen>:
  80c1c8:	208000cc 	andi	r2,r4,3
  80c1cc:	10002026 	beq	r2,zero,80c250 <strlen+0x88>
  80c1d0:	20800007 	ldb	r2,0(r4)
  80c1d4:	10002026 	beq	r2,zero,80c258 <strlen+0x90>
  80c1d8:	2005883a 	mov	r2,r4
  80c1dc:	00000206 	br	80c1e8 <strlen+0x20>
  80c1e0:	10c00007 	ldb	r3,0(r2)
  80c1e4:	18001826 	beq	r3,zero,80c248 <strlen+0x80>
  80c1e8:	10800044 	addi	r2,r2,1
  80c1ec:	10c000cc 	andi	r3,r2,3
  80c1f0:	183ffb1e 	bne	r3,zero,80c1e0 <__alt_mem_epcs_flash_controller_0+0xff8031e0>
  80c1f4:	10c00017 	ldw	r3,0(r2)
  80c1f8:	01ffbff4 	movhi	r7,65279
  80c1fc:	39ffbfc4 	addi	r7,r7,-257
  80c200:	00ca303a 	nor	r5,zero,r3
  80c204:	01a02074 	movhi	r6,32897
  80c208:	19c7883a 	add	r3,r3,r7
  80c20c:	31a02004 	addi	r6,r6,-32640
  80c210:	1946703a 	and	r3,r3,r5
  80c214:	1986703a 	and	r3,r3,r6
  80c218:	1800091e 	bne	r3,zero,80c240 <strlen+0x78>
  80c21c:	10800104 	addi	r2,r2,4
  80c220:	10c00017 	ldw	r3,0(r2)
  80c224:	19cb883a 	add	r5,r3,r7
  80c228:	00c6303a 	nor	r3,zero,r3
  80c22c:	28c6703a 	and	r3,r5,r3
  80c230:	1986703a 	and	r3,r3,r6
  80c234:	183ff926 	beq	r3,zero,80c21c <__alt_mem_epcs_flash_controller_0+0xff80321c>
  80c238:	00000106 	br	80c240 <strlen+0x78>
  80c23c:	10800044 	addi	r2,r2,1
  80c240:	10c00007 	ldb	r3,0(r2)
  80c244:	183ffd1e 	bne	r3,zero,80c23c <__alt_mem_epcs_flash_controller_0+0xff80323c>
  80c248:	1105c83a 	sub	r2,r2,r4
  80c24c:	f800283a 	ret
  80c250:	2005883a 	mov	r2,r4
  80c254:	003fe706 	br	80c1f4 <__alt_mem_epcs_flash_controller_0+0xff8031f4>
  80c258:	0005883a 	mov	r2,zero
  80c25c:	f800283a 	ret

0080c260 <__register_exitproc>:
  80c260:	defffa04 	addi	sp,sp,-24
  80c264:	dc000315 	stw	r16,12(sp)
  80c268:	04002074 	movhi	r16,129
  80c26c:	84387c04 	addi	r16,r16,-7696
  80c270:	80c00017 	ldw	r3,0(r16)
  80c274:	dc400415 	stw	r17,16(sp)
  80c278:	dfc00515 	stw	ra,20(sp)
  80c27c:	18805217 	ldw	r2,328(r3)
  80c280:	2023883a 	mov	r17,r4
  80c284:	10003726 	beq	r2,zero,80c364 <__register_exitproc+0x104>
  80c288:	10c00117 	ldw	r3,4(r2)
  80c28c:	010007c4 	movi	r4,31
  80c290:	20c00e16 	blt	r4,r3,80c2cc <__register_exitproc+0x6c>
  80c294:	1a000044 	addi	r8,r3,1
  80c298:	8800221e 	bne	r17,zero,80c324 <__register_exitproc+0xc4>
  80c29c:	18c00084 	addi	r3,r3,2
  80c2a0:	18c7883a 	add	r3,r3,r3
  80c2a4:	18c7883a 	add	r3,r3,r3
  80c2a8:	12000115 	stw	r8,4(r2)
  80c2ac:	10c7883a 	add	r3,r2,r3
  80c2b0:	19400015 	stw	r5,0(r3)
  80c2b4:	0005883a 	mov	r2,zero
  80c2b8:	dfc00517 	ldw	ra,20(sp)
  80c2bc:	dc400417 	ldw	r17,16(sp)
  80c2c0:	dc000317 	ldw	r16,12(sp)
  80c2c4:	dec00604 	addi	sp,sp,24
  80c2c8:	f800283a 	ret
  80c2cc:	00800034 	movhi	r2,0
  80c2d0:	10800004 	addi	r2,r2,0
  80c2d4:	10002626 	beq	r2,zero,80c370 <__register_exitproc+0x110>
  80c2d8:	01006404 	movi	r4,400
  80c2dc:	d9400015 	stw	r5,0(sp)
  80c2e0:	d9800115 	stw	r6,4(sp)
  80c2e4:	d9c00215 	stw	r7,8(sp)
  80c2e8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80c2ec:	d9400017 	ldw	r5,0(sp)
  80c2f0:	d9800117 	ldw	r6,4(sp)
  80c2f4:	d9c00217 	ldw	r7,8(sp)
  80c2f8:	10001d26 	beq	r2,zero,80c370 <__register_exitproc+0x110>
  80c2fc:	81000017 	ldw	r4,0(r16)
  80c300:	10000115 	stw	zero,4(r2)
  80c304:	02000044 	movi	r8,1
  80c308:	22405217 	ldw	r9,328(r4)
  80c30c:	0007883a 	mov	r3,zero
  80c310:	12400015 	stw	r9,0(r2)
  80c314:	20805215 	stw	r2,328(r4)
  80c318:	10006215 	stw	zero,392(r2)
  80c31c:	10006315 	stw	zero,396(r2)
  80c320:	883fde26 	beq	r17,zero,80c29c <__alt_mem_epcs_flash_controller_0+0xff80329c>
  80c324:	18c9883a 	add	r4,r3,r3
  80c328:	2109883a 	add	r4,r4,r4
  80c32c:	1109883a 	add	r4,r2,r4
  80c330:	21802215 	stw	r6,136(r4)
  80c334:	01800044 	movi	r6,1
  80c338:	12406217 	ldw	r9,392(r2)
  80c33c:	30cc983a 	sll	r6,r6,r3
  80c340:	4992b03a 	or	r9,r9,r6
  80c344:	12406215 	stw	r9,392(r2)
  80c348:	21c04215 	stw	r7,264(r4)
  80c34c:	01000084 	movi	r4,2
  80c350:	893fd21e 	bne	r17,r4,80c29c <__alt_mem_epcs_flash_controller_0+0xff80329c>
  80c354:	11006317 	ldw	r4,396(r2)
  80c358:	218cb03a 	or	r6,r4,r6
  80c35c:	11806315 	stw	r6,396(r2)
  80c360:	003fce06 	br	80c29c <__alt_mem_epcs_flash_controller_0+0xff80329c>
  80c364:	18805304 	addi	r2,r3,332
  80c368:	18805215 	stw	r2,328(r3)
  80c36c:	003fc606 	br	80c288 <__alt_mem_epcs_flash_controller_0+0xff803288>
  80c370:	00bfffc4 	movi	r2,-1
  80c374:	003fd006 	br	80c2b8 <__alt_mem_epcs_flash_controller_0+0xff8032b8>

0080c378 <__call_exitprocs>:
  80c378:	defff504 	addi	sp,sp,-44
  80c37c:	df000915 	stw	fp,36(sp)
  80c380:	dd400615 	stw	r21,24(sp)
  80c384:	dc800315 	stw	r18,12(sp)
  80c388:	dfc00a15 	stw	ra,40(sp)
  80c38c:	ddc00815 	stw	r23,32(sp)
  80c390:	dd800715 	stw	r22,28(sp)
  80c394:	dd000515 	stw	r20,20(sp)
  80c398:	dcc00415 	stw	r19,16(sp)
  80c39c:	dc400215 	stw	r17,8(sp)
  80c3a0:	dc000115 	stw	r16,4(sp)
  80c3a4:	d9000015 	stw	r4,0(sp)
  80c3a8:	2839883a 	mov	fp,r5
  80c3ac:	04800044 	movi	r18,1
  80c3b0:	057fffc4 	movi	r21,-1
  80c3b4:	00802074 	movhi	r2,129
  80c3b8:	10b87c04 	addi	r2,r2,-7696
  80c3bc:	12000017 	ldw	r8,0(r2)
  80c3c0:	45005217 	ldw	r20,328(r8)
  80c3c4:	44c05204 	addi	r19,r8,328
  80c3c8:	a0001c26 	beq	r20,zero,80c43c <__call_exitprocs+0xc4>
  80c3cc:	a0800117 	ldw	r2,4(r20)
  80c3d0:	15ffffc4 	addi	r23,r2,-1
  80c3d4:	b8000d16 	blt	r23,zero,80c40c <__call_exitprocs+0x94>
  80c3d8:	14000044 	addi	r16,r2,1
  80c3dc:	8421883a 	add	r16,r16,r16
  80c3e0:	8421883a 	add	r16,r16,r16
  80c3e4:	84402004 	addi	r17,r16,128
  80c3e8:	a463883a 	add	r17,r20,r17
  80c3ec:	a421883a 	add	r16,r20,r16
  80c3f0:	e0001e26 	beq	fp,zero,80c46c <__call_exitprocs+0xf4>
  80c3f4:	80804017 	ldw	r2,256(r16)
  80c3f8:	e0801c26 	beq	fp,r2,80c46c <__call_exitprocs+0xf4>
  80c3fc:	bdffffc4 	addi	r23,r23,-1
  80c400:	843fff04 	addi	r16,r16,-4
  80c404:	8c7fff04 	addi	r17,r17,-4
  80c408:	bd7ff91e 	bne	r23,r21,80c3f0 <__alt_mem_epcs_flash_controller_0+0xff8033f0>
  80c40c:	00800034 	movhi	r2,0
  80c410:	10800004 	addi	r2,r2,0
  80c414:	10000926 	beq	r2,zero,80c43c <__call_exitprocs+0xc4>
  80c418:	a0800117 	ldw	r2,4(r20)
  80c41c:	1000301e 	bne	r2,zero,80c4e0 <__call_exitprocs+0x168>
  80c420:	a0800017 	ldw	r2,0(r20)
  80c424:	10003226 	beq	r2,zero,80c4f0 <__call_exitprocs+0x178>
  80c428:	a009883a 	mov	r4,r20
  80c42c:	98800015 	stw	r2,0(r19)
  80c430:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80c434:	9d000017 	ldw	r20,0(r19)
  80c438:	a03fe41e 	bne	r20,zero,80c3cc <__alt_mem_epcs_flash_controller_0+0xff8033cc>
  80c43c:	dfc00a17 	ldw	ra,40(sp)
  80c440:	df000917 	ldw	fp,36(sp)
  80c444:	ddc00817 	ldw	r23,32(sp)
  80c448:	dd800717 	ldw	r22,28(sp)
  80c44c:	dd400617 	ldw	r21,24(sp)
  80c450:	dd000517 	ldw	r20,20(sp)
  80c454:	dcc00417 	ldw	r19,16(sp)
  80c458:	dc800317 	ldw	r18,12(sp)
  80c45c:	dc400217 	ldw	r17,8(sp)
  80c460:	dc000117 	ldw	r16,4(sp)
  80c464:	dec00b04 	addi	sp,sp,44
  80c468:	f800283a 	ret
  80c46c:	a0800117 	ldw	r2,4(r20)
  80c470:	80c00017 	ldw	r3,0(r16)
  80c474:	10bfffc4 	addi	r2,r2,-1
  80c478:	15c01426 	beq	r2,r23,80c4cc <__call_exitprocs+0x154>
  80c47c:	80000015 	stw	zero,0(r16)
  80c480:	183fde26 	beq	r3,zero,80c3fc <__alt_mem_epcs_flash_controller_0+0xff8033fc>
  80c484:	95c8983a 	sll	r4,r18,r23
  80c488:	a0806217 	ldw	r2,392(r20)
  80c48c:	a5800117 	ldw	r22,4(r20)
  80c490:	2084703a 	and	r2,r4,r2
  80c494:	10000b26 	beq	r2,zero,80c4c4 <__call_exitprocs+0x14c>
  80c498:	a0806317 	ldw	r2,396(r20)
  80c49c:	2088703a 	and	r4,r4,r2
  80c4a0:	20000c1e 	bne	r4,zero,80c4d4 <__call_exitprocs+0x15c>
  80c4a4:	89400017 	ldw	r5,0(r17)
  80c4a8:	d9000017 	ldw	r4,0(sp)
  80c4ac:	183ee83a 	callr	r3
  80c4b0:	a0800117 	ldw	r2,4(r20)
  80c4b4:	15bfbf1e 	bne	r2,r22,80c3b4 <__alt_mem_epcs_flash_controller_0+0xff8033b4>
  80c4b8:	98800017 	ldw	r2,0(r19)
  80c4bc:	153fcf26 	beq	r2,r20,80c3fc <__alt_mem_epcs_flash_controller_0+0xff8033fc>
  80c4c0:	003fbc06 	br	80c3b4 <__alt_mem_epcs_flash_controller_0+0xff8033b4>
  80c4c4:	183ee83a 	callr	r3
  80c4c8:	003ff906 	br	80c4b0 <__alt_mem_epcs_flash_controller_0+0xff8034b0>
  80c4cc:	a5c00115 	stw	r23,4(r20)
  80c4d0:	003feb06 	br	80c480 <__alt_mem_epcs_flash_controller_0+0xff803480>
  80c4d4:	89000017 	ldw	r4,0(r17)
  80c4d8:	183ee83a 	callr	r3
  80c4dc:	003ff406 	br	80c4b0 <__alt_mem_epcs_flash_controller_0+0xff8034b0>
  80c4e0:	a0800017 	ldw	r2,0(r20)
  80c4e4:	a027883a 	mov	r19,r20
  80c4e8:	1029883a 	mov	r20,r2
  80c4ec:	003fb606 	br	80c3c8 <__alt_mem_epcs_flash_controller_0+0xff8033c8>
  80c4f0:	0005883a 	mov	r2,zero
  80c4f4:	003ffb06 	br	80c4e4 <__alt_mem_epcs_flash_controller_0+0xff8034e4>

0080c4f8 <__divsi3>:
  80c4f8:	20001b16 	blt	r4,zero,80c568 <__divsi3+0x70>
  80c4fc:	000f883a 	mov	r7,zero
  80c500:	28001616 	blt	r5,zero,80c55c <__divsi3+0x64>
  80c504:	200d883a 	mov	r6,r4
  80c508:	29001a2e 	bgeu	r5,r4,80c574 <__divsi3+0x7c>
  80c50c:	00800804 	movi	r2,32
  80c510:	00c00044 	movi	r3,1
  80c514:	00000106 	br	80c51c <__divsi3+0x24>
  80c518:	10000d26 	beq	r2,zero,80c550 <__divsi3+0x58>
  80c51c:	294b883a 	add	r5,r5,r5
  80c520:	10bfffc4 	addi	r2,r2,-1
  80c524:	18c7883a 	add	r3,r3,r3
  80c528:	293ffb36 	bltu	r5,r4,80c518 <__alt_mem_epcs_flash_controller_0+0xff803518>
  80c52c:	0005883a 	mov	r2,zero
  80c530:	18000726 	beq	r3,zero,80c550 <__divsi3+0x58>
  80c534:	0005883a 	mov	r2,zero
  80c538:	31400236 	bltu	r6,r5,80c544 <__divsi3+0x4c>
  80c53c:	314dc83a 	sub	r6,r6,r5
  80c540:	10c4b03a 	or	r2,r2,r3
  80c544:	1806d07a 	srli	r3,r3,1
  80c548:	280ad07a 	srli	r5,r5,1
  80c54c:	183ffa1e 	bne	r3,zero,80c538 <__alt_mem_epcs_flash_controller_0+0xff803538>
  80c550:	38000126 	beq	r7,zero,80c558 <__divsi3+0x60>
  80c554:	0085c83a 	sub	r2,zero,r2
  80c558:	f800283a 	ret
  80c55c:	014bc83a 	sub	r5,zero,r5
  80c560:	39c0005c 	xori	r7,r7,1
  80c564:	003fe706 	br	80c504 <__alt_mem_epcs_flash_controller_0+0xff803504>
  80c568:	0109c83a 	sub	r4,zero,r4
  80c56c:	01c00044 	movi	r7,1
  80c570:	003fe306 	br	80c500 <__alt_mem_epcs_flash_controller_0+0xff803500>
  80c574:	00c00044 	movi	r3,1
  80c578:	003fee06 	br	80c534 <__alt_mem_epcs_flash_controller_0+0xff803534>

0080c57c <__modsi3>:
  80c57c:	20001716 	blt	r4,zero,80c5dc <__modsi3+0x60>
  80c580:	000f883a 	mov	r7,zero
  80c584:	2005883a 	mov	r2,r4
  80c588:	28001216 	blt	r5,zero,80c5d4 <__modsi3+0x58>
  80c58c:	2900162e 	bgeu	r5,r4,80c5e8 <__modsi3+0x6c>
  80c590:	01800804 	movi	r6,32
  80c594:	00c00044 	movi	r3,1
  80c598:	00000106 	br	80c5a0 <__modsi3+0x24>
  80c59c:	30000a26 	beq	r6,zero,80c5c8 <__modsi3+0x4c>
  80c5a0:	294b883a 	add	r5,r5,r5
  80c5a4:	31bfffc4 	addi	r6,r6,-1
  80c5a8:	18c7883a 	add	r3,r3,r3
  80c5ac:	293ffb36 	bltu	r5,r4,80c59c <__alt_mem_epcs_flash_controller_0+0xff80359c>
  80c5b0:	18000526 	beq	r3,zero,80c5c8 <__modsi3+0x4c>
  80c5b4:	1806d07a 	srli	r3,r3,1
  80c5b8:	11400136 	bltu	r2,r5,80c5c0 <__modsi3+0x44>
  80c5bc:	1145c83a 	sub	r2,r2,r5
  80c5c0:	280ad07a 	srli	r5,r5,1
  80c5c4:	183ffb1e 	bne	r3,zero,80c5b4 <__alt_mem_epcs_flash_controller_0+0xff8035b4>
  80c5c8:	38000126 	beq	r7,zero,80c5d0 <__modsi3+0x54>
  80c5cc:	0085c83a 	sub	r2,zero,r2
  80c5d0:	f800283a 	ret
  80c5d4:	014bc83a 	sub	r5,zero,r5
  80c5d8:	003fec06 	br	80c58c <__alt_mem_epcs_flash_controller_0+0xff80358c>
  80c5dc:	0109c83a 	sub	r4,zero,r4
  80c5e0:	01c00044 	movi	r7,1
  80c5e4:	003fe706 	br	80c584 <__alt_mem_epcs_flash_controller_0+0xff803584>
  80c5e8:	00c00044 	movi	r3,1
  80c5ec:	003ff106 	br	80c5b4 <__alt_mem_epcs_flash_controller_0+0xff8035b4>

0080c5f0 <__udivsi3>:
  80c5f0:	200d883a 	mov	r6,r4
  80c5f4:	2900152e 	bgeu	r5,r4,80c64c <__udivsi3+0x5c>
  80c5f8:	28001416 	blt	r5,zero,80c64c <__udivsi3+0x5c>
  80c5fc:	00800804 	movi	r2,32
  80c600:	00c00044 	movi	r3,1
  80c604:	00000206 	br	80c610 <__udivsi3+0x20>
  80c608:	10000e26 	beq	r2,zero,80c644 <__udivsi3+0x54>
  80c60c:	28000516 	blt	r5,zero,80c624 <__udivsi3+0x34>
  80c610:	294b883a 	add	r5,r5,r5
  80c614:	10bfffc4 	addi	r2,r2,-1
  80c618:	18c7883a 	add	r3,r3,r3
  80c61c:	293ffa36 	bltu	r5,r4,80c608 <__alt_mem_epcs_flash_controller_0+0xff803608>
  80c620:	18000826 	beq	r3,zero,80c644 <__udivsi3+0x54>
  80c624:	0005883a 	mov	r2,zero
  80c628:	31400236 	bltu	r6,r5,80c634 <__udivsi3+0x44>
  80c62c:	314dc83a 	sub	r6,r6,r5
  80c630:	10c4b03a 	or	r2,r2,r3
  80c634:	1806d07a 	srli	r3,r3,1
  80c638:	280ad07a 	srli	r5,r5,1
  80c63c:	183ffa1e 	bne	r3,zero,80c628 <__alt_mem_epcs_flash_controller_0+0xff803628>
  80c640:	f800283a 	ret
  80c644:	0005883a 	mov	r2,zero
  80c648:	f800283a 	ret
  80c64c:	00c00044 	movi	r3,1
  80c650:	003ff406 	br	80c624 <__alt_mem_epcs_flash_controller_0+0xff803624>

0080c654 <__umodsi3>:
  80c654:	2005883a 	mov	r2,r4
  80c658:	2900122e 	bgeu	r5,r4,80c6a4 <__umodsi3+0x50>
  80c65c:	28001116 	blt	r5,zero,80c6a4 <__umodsi3+0x50>
  80c660:	01800804 	movi	r6,32
  80c664:	00c00044 	movi	r3,1
  80c668:	00000206 	br	80c674 <__umodsi3+0x20>
  80c66c:	30000c26 	beq	r6,zero,80c6a0 <__umodsi3+0x4c>
  80c670:	28000516 	blt	r5,zero,80c688 <__umodsi3+0x34>
  80c674:	294b883a 	add	r5,r5,r5
  80c678:	31bfffc4 	addi	r6,r6,-1
  80c67c:	18c7883a 	add	r3,r3,r3
  80c680:	293ffa36 	bltu	r5,r4,80c66c <__alt_mem_epcs_flash_controller_0+0xff80366c>
  80c684:	18000626 	beq	r3,zero,80c6a0 <__umodsi3+0x4c>
  80c688:	1806d07a 	srli	r3,r3,1
  80c68c:	11400136 	bltu	r2,r5,80c694 <__umodsi3+0x40>
  80c690:	1145c83a 	sub	r2,r2,r5
  80c694:	280ad07a 	srli	r5,r5,1
  80c698:	183ffb1e 	bne	r3,zero,80c688 <__alt_mem_epcs_flash_controller_0+0xff803688>
  80c69c:	f800283a 	ret
  80c6a0:	f800283a 	ret
  80c6a4:	00c00044 	movi	r3,1
  80c6a8:	003ff706 	br	80c688 <__alt_mem_epcs_flash_controller_0+0xff803688>

0080c6ac <__mulsi3>:
  80c6ac:	0005883a 	mov	r2,zero
  80c6b0:	20000726 	beq	r4,zero,80c6d0 <__mulsi3+0x24>
  80c6b4:	20c0004c 	andi	r3,r4,1
  80c6b8:	2008d07a 	srli	r4,r4,1
  80c6bc:	18000126 	beq	r3,zero,80c6c4 <__mulsi3+0x18>
  80c6c0:	1145883a 	add	r2,r2,r5
  80c6c4:	294b883a 	add	r5,r5,r5
  80c6c8:	203ffa1e 	bne	r4,zero,80c6b4 <__alt_mem_epcs_flash_controller_0+0xff8036b4>
  80c6cc:	f800283a 	ret
  80c6d0:	f800283a 	ret

0080c6d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80c6d4:	defffd04 	addi	sp,sp,-12
  80c6d8:	df000215 	stw	fp,8(sp)
  80c6dc:	df000204 	addi	fp,sp,8
  80c6e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80c6e4:	d0203345 	stb	zero,-32563(gp)
  80c6e8:	e0bfff17 	ldw	r2,-4(fp)
  80c6ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80c6f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c6f4:	10000226 	beq	r2,zero,80c700 <_exit+0x2c>
    ALT_SIM_FAIL();
  80c6f8:	002af070 	cmpltui	zero,zero,43969
  80c6fc:	00000106 	br	80c704 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80c700:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80c704:	003fff06 	br	80c704 <__alt_mem_epcs_flash_controller_0+0xff803704>
