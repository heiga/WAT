
WAT_TEST.elf:     file format elf32-littlenios2
WAT_TEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0001c814 memsz 0x00026434 flags rwx
    LOAD off    0x0001e020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x0001f000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  0001e020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a260  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000075c  0081a260  0081a260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e58  0081a9bc  0081a9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009c20  0081c814  0081c814  0001d814  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  00826434  00826434  0001f000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  0001f000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  0001f000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001160  00000000  00000000  0001f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000313a6  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000bc59  00000000  00000000  0005152e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f1c3  00000000  00000000  0005d187  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003820  00000000  00000000  0006c34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000052fd  00000000  00000000  0006fb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00017b11  00000000  00000000  00074e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0008c97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001910  00000000  00000000  0008c990  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  000936e2  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000936e8  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000936f4  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000936f5  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000936f6  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000936fa  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000936fe  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  00093702  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  0009370d  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  00093718  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  00093723  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  00093731  2**0
                  CONTENTS, READONLY
 31 .jdi          0000448f  00000000  00000000  0009373f  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00096e7e  00000000  00000000  00097bce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0081a260 l    d  .rodata	00000000 .rodata
0081a9bc l    d  .rwdata	00000000 .rwdata
0081c814 l    d  .bss	00000000 .bss
00826434 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera_test.c
0081c6e0 l     O .rwdata	00000006 CAM_SYNC
0081c6e6 l     O .rwdata	00000006 CAM_INIT
0081c6ec l     O .rwdata	00000004 CAM_SIZE
0081c6f0 l     O .rwdata	00000004 CAM_SNAP
0081c6f4 l     O .rwdata	00000004 CAM_GRAB
0081c6f8 l     O .rwdata	00000004 CAM_DATA
0081c6fc l     O .rwdata	00000006 CAM_ACK_SYNC
0081c702 l     O .rwdata	00000006 CAM_ACK_INIT
0081c708 l     O .rwdata	00000004 CAM_ACK_SIZE
0081c70c l     O .rwdata	00000004 CAM_ACK_SNAP
0081c710 l     O .rwdata	00000004 CAM_ACK_GRAB
0081c714 l     O .rwdata	00000004 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 motor_test.c
00000000 l    df *ABS*	00000000 wat_main_test.c
0081c718 l     O .rwdata	00000006 CAM_SYNC
0081c71e l     O .rwdata	00000006 CAM_INIT
0081c724 l     O .rwdata	00000004 CAM_SIZE
0081c728 l     O .rwdata	00000004 CAM_SNAP
0081c72c l     O .rwdata	00000004 CAM_GRAB
0081c730 l     O .rwdata	00000004 CAM_DATA
0081c734 l     O .rwdata	00000006 CAM_ACK_SYNC
0081c73a l     O .rwdata	00000006 CAM_ACK_INIT
0081c740 l     O .rwdata	00000004 CAM_ACK_SIZE
0081c744 l     O .rwdata	00000004 CAM_ACK_SNAP
0081c748 l     O .rwdata	00000004 CAM_ACK_GRAB
0081c74c l     O .rwdata	00000004 CAM_ACK_DEND
00000000 l    df *ABS*	00000000 wifi_test.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081a59e l     O .rodata	00000010 zeroes.4404
00802f34 l     F .text	000000bc __sbprintf
0081a5ae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00803144 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804c9c l     F .text	00000008 __fp_unlock
00804cb0 l     F .text	0000019c __sinit.part.1
00804e4c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081a9bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0081ae00 l     O .rwdata	00000020 lc_ctype_charset
0081ade0 l     O .rwdata	00000020 lc_message_charset
0081ae20 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081a5e0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00808488 l     F .text	000000fc __sprint_r.part.0
0081a704 l     O .rodata	00000010 zeroes.4349
00809ac4 l     F .text	000000bc __sbprintf
0081a714 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080db0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080dc20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080dc4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dfe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e0c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e29c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081c784 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080e510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081c788 l     O .rwdata	00000004 lockid
0081c864 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081c78c l     O .rwdata	00000004 lockid
0081c86c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080ff48 l     F .text	00000048 OS_InitMisc
0080ff90 l     F .text	0000006c OS_InitRdyList
008100fc l     F .text	000000e4 OS_InitTCBList
0080fe68 l     F .text	000000e0 OS_InitEventList
0080fffc l     F .text	00000080 OS_InitTaskIdle
0081007c l     F .text	00000080 OS_InitTaskStat
0081036c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0081207c l     F .text	000000f4 OS_FlagTaskRdy
00811e3c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00816154 l     F .text	00000034 alt_dev_reg
0081b408 l     O .rwdata	000000cc epcs_flash_controller_0
0081b4d4 l     O .rwdata	0000106c jtag_uart_0
0081c540 l     O .rwdata	000000d0 cam_uart
0081c610 l     O .rwdata	000000d0 wifi_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00816270 l     F .text	00000034 alt_flash_device_register
008162f8 l     F .text	000003f8 alt_epcs_flash_query
008166f0 l     F .text	000000ec alt_epcs_flash_memcmp
00816ac8 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00817018 l     F .text	000002a4 altera_avalon_jtag_uart_irq
008172bc l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00817a98 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00817dfc l     F .text	0000009c altera_avalon_uart_irq
00817e98 l     F .text	00000138 altera_avalon_uart_rxirq
00817fd0 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008181c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0081846c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0081873c l     F .text	00000038 epcs_test_wip
00818774 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00818e48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00819140 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
008192a0 l     F .text	0000003c alt_get_errno
008192dc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081c8c4 g     O .bss	00000004 alt_instruction_exception_handler
00800ab8 g     F .text	00000018 putchar
00807964 g     F .text	00000074 _mprec_log10
0081c7da g     O .rwdata	00000002 OSTaskNameSize
00816a3c g     F .text	0000008c alt_epcs_flash_get_info
00807a50 g     F .text	0000008c __any_on
0080a1d0 g     F .text	00000054 _isatty_r
0081a5ec g     O .rodata	00000028 __mprec_tinytens
0080e1e0 g     F .text	000000bc alt_main
00800ad0 g     F .text	000000c0 _puts_r
00823110 g     O .bss	00000100 alt_irq
0080a224 g     F .text	00000060 _lseek_r
0081289c g     F .text	000000d8 OS_MemInit
008160f4 g     F .text	00000060 OSTimeSet
0080c4e4 g     F .text	00000088 .hidden __eqdf2
0080ebbc g     F .text	00000610 OSEventPendMulti
00826434 g       *ABS*	00000000 __alt_heap_start
00819918 g     F .text	00000024 OSTaskCreateHook
00800a74 g     F .text	0000003c printf
0081c7b2 g     O .rwdata	00000002 OSMboxEn
0080f224 g     F .text	0000004c OSIntEnter
0080a2e4 g     F .text	0000009c _wcrtomb_r
00808348 g     F .text	0000005c __sseek
00804ffc g     F .text	00000010 __sinit
00809b80 g     F .text	00000140 __swbuf_r
0081c7c2 g     O .rwdata	00000002 OSQEn
00805ad0 g     F .text	0000007c _setlocale_r
00804e54 g     F .text	00000078 __sfmoreglue
0080e890 g     F .text	000000cc __malloc_unlock
00819980 g     F .text	00000020 OSTaskStatHook
0081c874 g     O .bss	00000001 OSLockNesting
0081c800 g     O .rwdata	00000002 OSDataSize
0081c875 g     O .bss	00000001 OSRunning
0081d110 g     O .bss	00002000 motor_test_stk
008067a0 g     F .text	0000015c memmove
008199c0 g     F .text	00000020 OSInitHookBegin
0081c7f8 g     O .rwdata	00000002 OSTmrSize
00804fe4 g     F .text	00000018 _cleanup
00806a24 g     F .text	000000a8 _Balloc
0081c878 g     O .bss	00000004 OSIdleCtr
0081c8f8 g     O .bss	00000800 camPackageBuffer
0080c56c g     F .text	000000dc .hidden __gtdf2
008196c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00819798 g       .text	00000000 OSStartTsk
0081069c g     F .text	000002d4 OS_TCBInit
008187b0 g     F .text	000000fc epcs_sector_erase
01009000 g     F .entry	00000000 __reset
0081c82c g     O .bss	00000004 WifiBuffer
0081c7fe g     O .rwdata	00000002 OSTmrWheelTblSize
0081c79e g     O .rwdata	00000002 OSEventSize
0081c87c g     O .bss	00000001 OSPrioHighRdy
0080a174 g     F .text	0000005c _fstat_r
0081d0f8 g     O .bss	00000018 camCommandBuffer
0081993c g     F .text	00000024 OSTaskDelHook
0081c84c g     O .bss	00000004 errno
008082c4 g     F .text	00000008 __seofread
00819778 g       .text	00000000 OSStartHighRdy
00814b74 g     F .text	000001e4 OSTaskCreateExt
00811984 g     F .text	00000060 OSFlagPendGetFlagsRdy
0081c7de g     O .rwdata	00000002 OSTaskStatStkSize
00810b00 g     F .text	00000308 OSFlagAccept
00812ee0 g     F .text	000000b8 OSQFlush
00812974 g     F .text	00000140 OSQAccept
0081c85c g     O .bss	00000004 alt_argv
008246e0 g       *ABS*	00000000 _gp
008149c8 g     F .text	000001ac OSTaskCreate
008144d8 g     F .text	000004f0 OSTaskChangePrio
0081c870 g     O .bss	00000004 alt_heapsem
00810970 g     F .text	00000190 OSDebugInit
00814d58 g     F .text	00000344 OSTaskDel
0081b288 g     O .rwdata	00000180 alt_fd_list
00823210 g     O .bss	00000370 OSFlagTbl
00800920 g     F .text	00000078 wifi_uart_interrupt
00800ab0 g     F .text	00000008 _putchar_r
0080fc48 g     F .text	000000b8 OS_EventTaskRemove
008189f4 g     F .text	0000006c epcs_write_status_register
00819c40 g     F .text	00000090 alt_find_dev
00806658 g     F .text	00000148 memcpy
0081c7c8 g     O .rwdata	00000002 OSRdyTblSize
00804ca4 g     F .text	0000000c _cleanup_r
0080d924 g     F .text	000000dc .hidden __floatsidf
00819224 g     F .text	0000007c alt_io_redirect
0080c648 g     F .text	000000f4 .hidden __ltdf2
0081a260 g       *ABS*	00000000 __DTOR_END__
00800b90 g     F .text	00000014 puts
008190a4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080e95c g     F .text	00000120 OSEventNameGet
0081c7ac g     O .rwdata	00000002 OSFlagMax
00816bd4 g     F .text	00000100 alt_epcs_flash_write_block
008081a8 g     F .text	00000074 __fpclassifyd
008078c0 g     F .text	000000a4 __ratio
0080f270 g     F .text	000000f8 OSIntExit
00809aa8 g     F .text	0000001c __vfiprintf_internal
0081c7e6 g     O .rwdata	00000002 OSTCBSize
0081c87d g     O .bss	00000001 OSPrioCur
00817518 g     F .text	000002bc altera_avalon_jtag_uart_read
00800a44 g     F .text	00000030 _printf_r
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080b184 g     F .text	00000064 .hidden __udivsi3
0080e01c g     F .text	000000ac isatty
0081c7cc g     O .rwdata	00000002 OSStkWidth
0081a63c g     O .rodata	000000c8 __mprec_tens
0081c7c0 g     O .rwdata	00000002 OSPtrSize
00805b4c g     F .text	0000000c __locale_charset
0081c7a0 g     O .rwdata	00000002 OSEventTblSize
008196ec g       .text	00000000 OSCtxSw
0081c848 g     O .bss	00000004 __malloc_top_pad
0081c880 g     O .bss	00000004 OSTCBList
0081c850 g     O .bss	00000004 alt_fd_list_lock
0081c758 g     O .rwdata	00000004 __mb_cur_max
00805b7c g     F .text	0000000c _localeconv_r
00806e58 g     F .text	0000003c __i2b
00805480 g     F .text	000004c8 __sfvwrite_r
00823580 g     O .bss	00000c30 OSMemTbl
0081c884 g     O .bss	00000001 OSTickStepState
0080821c g     F .text	00000054 _sbrk_r
0081c7c4 g     O .rwdata	00000002 OSQMax
008241b0 g     O .bss	00000800 OSTaskStatStk
008124d8 g     F .text	000000f0 OSMemNameGet
0081c7a4 g     O .rwdata	00000002 OSFlagEn
0080a284 g     F .text	00000060 _read_r
0081c7ea g     O .rwdata	00000002 OSTimeTickHookEn
00812170 g     F .text	000000a4 OS_FlagUnlink
00813390 g     F .text	00000168 OSQPost
0081c778 g     O .rwdata	00000004 alt_max_fd
00810234 g     F .text	00000068 OS_MemCopy
0081029c g     F .text	000000d0 OS_Sched
00809e68 g     F .text	000000f0 _fclose_r
008123e8 g     F .text	000000f0 OSMemGet
00815384 g     F .text	000001b4 OSTaskNameSet
00804c6c g     F .text	00000030 fflush
0081c844 g     O .bss	00000004 __malloc_max_sbrked_mem
0081c888 g     O .bss	00000004 OSCtxSwCtr
008199a0 g     F .text	00000020 OSTimeTickHook
0081c7ae g     O .rwdata	00000002 OSFlagNameSize
0080fd00 g     F .text	00000100 OS_EventTaskRemoveMulti
00800998 g     F .text	000000ac motorCommand
0080b268 g     F .text	000008ac .hidden __adddf3
0080faf8 g     F .text	00000150 OS_EventTaskWaitMulti
00816b5c g     F .text	00000078 alt_epcs_flash_erase_block
00807668 g     F .text	0000010c __b2d
0081c7c6 g     O .rwdata	00000002 OSQSize
0080aac8 g     F .text	000005c4 .hidden __umoddi3
0080e104 g     F .text	000000dc lseek
00813e40 g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0081c750 g     O .rwdata	00000004 _global_impure_ptr
00818cc0 g     F .text	0000005c epcs_exit_4_bytes_mode
00807c44 g     F .text	00000564 _realloc_r
0081c7b0 g     O .rwdata	00000002 OSLowestPrio
00826434 g       *ABS*	00000000 __bss_end
0080def0 g     F .text	000000f0 alt_iic_isr_register
00819a20 g     F .text	00000024 OSTCBInitHook
0081c7f6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
008195c0 g     F .text	00000108 alt_tick
0080a4cc g     F .text	000005fc .hidden __udivdi3
0080a0d0 g     F .text	00000024 _fputwc_r
0081c798 g     O .rwdata	00000002 OSEventEn
0081a614 g     O .rodata	00000028 __mprec_bigtens
00806c3c g     F .text	00000104 __s2b
0081c7f2 g     O .rwdata	00000002 OSTmrCfgNameSize
0080da00 g     F .text	000000a8 .hidden __floatunsidf
008073a8 g     F .text	00000060 __mcmp
00817c9c g     F .text	00000160 altera_avalon_uart_init
0080501c g     F .text	00000018 __fp_lock_all
0080dea4 g     F .text	0000004c alt_ic_irq_enabled
0081c814 g     O .bss	00000001 useData
00811f9c g     F .text	000000e0 OS_FlagInit
00819524 g     F .text	0000009c alt_alarm_stop
0081c7d4 g     O .rwdata	00000002 OSTaskIdleStkSize
0081c854 g     O .bss	00000004 alt_irq_active
00813a78 g     F .text	000000b0 OSSemAccept
008126dc g     F .text	000000d8 OSMemPut
00812214 g     F .text	000001d4 OSMemCreate
0081c88c g     O .bss	00000004 OSIdleCtrMax
010040fc g     F .exceptions	000000d4 alt_irq_handler
0081b260 g     O .rwdata	00000028 alt_dev_null
0081c7e8 g     O .rwdata	00000002 OSTicksPerSec
008196ec g       .text	00000000 OSIntCtxSw
00806d40 g     F .text	00000068 __hi0bits
0080d8a4 g     F .text	00000080 .hidden __fixdfsi
0081c890 g     O .bss	00000004 OSTCBFreeList
0081404c g     F .text	0000016c OSSemPendAbort
0081c770 g     O .rwdata	00000008 alt_dev_list
0080e54c g     F .text	00000100 write
00807adc g     F .text	000000a0 _putc_r
0081c7ec g     O .rwdata	00000002 OSVersionNbr
0080dc88 g     F .text	000000b8 fstat
0080c648 g     F .text	000000f4 .hidden __ledf2
00800580 g     F .text	0000002c motor_test
0081c794 g     O .rwdata	00000004 OSEndiannessTest
00807120 g     F .text	00000140 __pow5mult
0080859c g     F .text	0000150c ___vfiprintf_internal_r
0081c83c g     O .bss	00000004 __nlocale_changed
0080b1e8 g     F .text	00000058 .hidden __umodsi3
00818b7c g     F .text	00000068 epcs_read_electronic_signature
0081c7a6 g     O .rwdata	00000002 OSFlagGrpSize
00826434 g       *ABS*	00000000 end
0081c818 g     O .bss	00000004 camQueueStatus
008184a8 g     F .text	00000238 altera_avalon_uart_write
00816ed0 g     F .text	00000148 altera_avalon_jtag_uart_init
00810504 g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0081c828 g     O .bss	00000004 SENSOR_SEM
0081a260 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00817b10 g     F .text	0000007c alt_avalon_timer_sc_init
00817bec g     F .text	00000060 altera_avalon_uart_write_fd
0080daa8 g     F .text	00000064 .hidden __clzsi2
00817c4c g     F .text	00000050 altera_avalon_uart_close_fd
008177d4 g     F .text	000002c4 altera_avalon_jtag_uart_write
0080500c g     F .text	00000004 __sfp_lock_acquire
00806574 g     F .text	000000e4 memchr
008101e0 g     F .text	00000054 OS_MemClr
00800c3c g     F .text	000022dc ___vfprintf_internal_r
008197bc g     F .text	0000015c OSTaskStkInit
00805170 g     F .text	00000310 _free_r
00805b58 g     F .text	00000010 __locale_mb_cur_max
0080f850 g     F .text	00000198 OS_EventTaskRdy
0081a0ac g     F .text	00000180 __call_exitprocs
0081c894 g     O .bss	00000001 OSCPUUsage
0081c838 g     O .bss	00000004 __mlocale_changed
0081c75c g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
0081c8c8 g     O .bss	00000004 _alt_tick_rate
00812f98 g     F .text	0000028c OSQPend
00800038 g     F .text	00000440 camera_test
00815c44 g     F .text	00000104 OSTimeDly
00807260 g     F .text	00000148 __lshift
00819a44 g     F .text	000001fc alt_avalon_spi_command
0081c8cc g     O .bss	00000004 _alt_nticks
0080e2d8 g     F .text	00000104 read
008161c0 g     F .text	000000b0 alt_sys_init
00819f94 g     F .text	00000118 __register_exitproc
0081c895 g     O .bss	00000001 OSTaskCtr
00815d48 g     F .text	0000017c OSTimeDlyHMSM
00806e94 g     F .text	0000028c __multiply
008173c0 g     F .text	00000068 altera_avalon_jtag_uart_close
0080b240 g     F .text	00000028 .hidden __mulsi3
0081c8d0 g     O .bss	00000028 __malloc_current_mallinfo
0081c79a g     O .rwdata	00000002 OSEventMax
00807774 g     F .text	0000014c __d2b
008141b8 g     F .text	00000110 OSSemPost
0081f110 g     O .bss	00002000 wifi_test_stk
008186e0 g     F .text	0000005c epcs_read_status_register
0080f3f4 g     F .text	000000dc OSSchedUnlock
0081c81c g     O .bss	00000004 camCommandQueue
00816d6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00819dd8 g     F .text	000000f4 alt_get_fd
0081c898 g     O .bss	00000004 OSMemFreeList
0080f540 g     F .text	000000b0 OSStatInit
00811d78 g     F .text	000000c4 OSFlagQuery
0081c7d0 g     O .rwdata	00000002 OSTaskCreateExtEn
00809d38 g     F .text	00000054 _close_r
00818be4 g     F .text	00000080 epcs_read_device_id
00819f18 g     F .text	0000007c memcmp
0080f830 g     F .text	00000020 OS_Dummy
00816e2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00826434 g       *ABS*	00000000 __alt_stack_base
00816e7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00802ff0 g     F .text	00000154 __swsetup_r
008249b0 g     O .bss	000001e0 OSQTbl
0080bb14 g     F .text	000009d0 .hidden __divdf3
00804ecc g     F .text	00000118 __sfp
008079d8 g     F .text	00000078 __copybits
0081ae58 g     O .rwdata	00000408 __malloc_av_
00805018 g     F .text	00000004 __sinit_lock_release
0081c89c g     O .bss	00000004 OSTCBHighRdy
0080c73c g     F .text	0000086c .hidden __muldf3
00808270 g     F .text	00000054 __sread
0081c8a0 g     O .bss	00000004 OSQFreeList
00819cd0 g     F .text	00000108 alt_find_file
00818e84 g     F .text	000000a4 alt_dev_llist_insert
0080e770 g     F .text	00000120 __malloc_lock
0080e460 g     F .text	000000b0 sbrk
0080ea7c g     F .text	00000140 OSEventNameSet
00804c10 g     F .text	0000005c _fflush_r
00809d8c g     F .text	000000dc _calloc_r
0081c8a4 g     O .bss	00000001 OSRdyGrp
0081c804 g     O .rwdata	00000008 alt_flash_dev_list
0081c814 g       *ABS*	00000000 __bss_start
008068fc g     F .text	00000128 memset
00800610 g     F .text	000002b0 main
0081c860 g     O .bss	00000004 alt_envp
0081c840 g     O .bss	00000004 __malloc_max_total_mem
00816dcc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809cc0 g     F .text	00000018 __swbuf
0081a844 g     O .rodata	00000100 OSUnMapTbl
0081c7ca g     O .rwdata	00000002 OSSemEn
008119e4 g     F .text	00000394 OSFlagPost
008083a4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809f58 g     F .text	00000014 fclose
0080f9e8 g     F .text	00000110 OS_EventTaskWait
008105d0 g     F .text	000000cc OS_TaskStatStkChk
0081509c g     F .text	00000150 OSTaskDelReq
0080336c g     F .text	00001688 _dtoa_r
00805d68 g     F .text	0000080c _malloc_r
0080a440 g     F .text	00000030 __ascii_wctomb
0081c77c g     O .rwdata	00000004 alt_errno
0080f4d0 g     F .text	00000070 OSStart
0080e710 g     F .text	00000060 __env_unlock
00805948 g     F .text	000000c4 _fwalk
00815538 g     F .text	000001d4 OSTaskResume
008127b4 g     F .text	000000e8 OSMemQuery
0081c7dc g     O .rwdata	00000002 OSTaskStatEn
0081c7b6 g     O .rwdata	00000002 OSMemMax
008134f8 g     F .text	00000170 OSQPostFront
00807b7c g     F .text	000000c8 putc
0080b08c g     F .text	00000084 .hidden __divsi3
0081c8a5 g     O .bss	00000003 OSRdyTbl
0081c790 g     O .rwdata	00000002 OSDebugEn
0080504c g     F .text	00000124 _malloc_trim_r
0081a260 g       *ABS*	00000000 __CTOR_END__
0081c7a8 g     O .rwdata	00000002 OSFlagNodeSize
0081c7f0 g     O .rwdata	00000002 OSTmrCfgMax
008167dc g     F .text	00000260 alt_epcs_flash_write
008083ac g     F .text	000000dc strcmp
00812ab4 g     F .text	000001ac OSQCreate
008151ec g     F .text	00000198 OSTaskNameGet
00813668 g     F .text	0000020c OSQPostOpt
0080f5f0 g     F .text	00000220 OSTimeTick
0081c820 g     O .bss	00000004 camPackageQueue
0081c7d8 g     O .rwdata	00000002 OSTaskMax
0081a260 g       *ABS*	00000000 __DTOR_LIST__
00813b28 g     F .text	000000d8 OSSemCreate
0081c7fc g     O .rwdata	00000002 OSTmrWheelSize
0080c4e4 g     F .text	00000088 .hidden __nedf2
0081c7d2 g     O .rwdata	00000002 OSTaskDelEn
008142c8 g     F .text	00000110 OSSemQuery
00812c60 g     F .text	00000280 OSQDel
00813224 g     F .text	0000016c OSQPendAbort
00816188 g     F .text	00000038 alt_irq_init
0080e3dc g     F .text	00000084 alt_release_fd
0081a724 g     O .rodata	00000100 .hidden __clz_tab
0081c834 g     O .bss	00000004 _PathLocale
00819ecc g     F .text	00000014 atexit
00809cd8 g     F .text	00000060 _write_r
0080f368 g     F .text	0000008c OSSchedLock
00805b88 g     F .text	00000018 setlocale
008005ac g     F .text	00000064 sensor_interrupt
00810e08 g     F .text	00000108 OSFlagCreate
0081c754 g     O .rwdata	00000004 _impure_ptr
0081c858 g     O .bss	00000004 alt_argc
008049f4 g     F .text	0000021c __sflush_r
00818f88 g     F .text	00000060 _do_dtors
00805b74 g     F .text	00000008 __locale_cjk_lang
0081c7a2 g     O .rwdata	00000002 OSEventMultiEn
00810f10 g     F .text	00000248 OSFlagDel
0081c8a8 g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
00807604 g     F .text	00000064 __ulp
008113cc g     F .text	000005b8 OSFlagPend
0081c7ee g     O .rwdata	00000002 OSTmrEn
00805034 g     F .text	00000018 __fp_unlock_all
00821110 g     O .bss	00002000 camera_test_stk
0081c768 g     O .rwdata	00000008 alt_fs_list
008103e0 g     F .text	00000074 OS_StrCopy
0081c7b8 g     O .rwdata	00000002 OSMemNameSize
008199e0 g     F .text	00000020 OSInitHookEnd
0081c830 g     O .bss	00000004 wifiQueue
0081c7e4 g     O .rwdata	00000002 OSTCBPrioTblMax
00805ba0 g     F .text	0000000c localeconv
008188ac g     F .text	000000f4 epcs_read_buffer
0081c7e0 g     O .rwdata	00000002 OSTaskStatStkChkEn
008162a4 g     F .text	00000054 alt_epcs_flash_init
0080dd40 g     F .text	00000050 alt_ic_isr_register
0081c7b4 g     O .rwdata	00000002 OSMemEn
0081c7be g     O .rwdata	00000002 OSMutexEn
0081c814 g       *ABS*	00000000 _edata
00817b8c g     F .text	00000060 altera_avalon_uart_read_fd
00800508 g     F .text	00000078 button_interrupt
00826434 g       *ABS*	00000000 _end
00818fe8 g     F .text	00000068 alt_flash_open_dev
0081c8ac g     O .bss	00000001 OSIntNesting
00809f6c g     F .text	00000164 __fputwc
00817428 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00815ec4 g     F .text	000001d4 OSTimeDlyResume
00811280 g     F .text	0000014c OSFlagNameSet
0081570c g     F .text	000001c0 OSTaskStkChk
0080de18 g     F .text	0000008c alt_ic_irq_disable
00818c64 g     F .text	0000005c epcs_enter_4_bytes_mode
0081c7ba g     O .rwdata	00000002 OSMemSize
008082cc g     F .text	0000007c __swrite
0081c760 g     O .rwdata	00000004 __malloc_trim_threshold
00805b68 g     F .text	0000000c __locale_msgcharset
0081c8b0 g     O .bss	00000004 OSTCBCur
00819ee0 g     F .text	00000038 exit
0081c7bc g     O .rwdata	00000002 OSMemTblSize
00805a0c g     F .text	000000c4 _fwalk_reent
00807408 g     F .text	000001fc __mdiff
00819050 g     F .text	00000054 alt_flash_close_dev
0080b110 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00805010 g     F .text	00000004 __sfp_lock_release
0081c824 g     O .bss	00000004 BUTTON_SEM
0080f1cc g     F .text	00000058 OSInit
00815ab0 g     F .text	00000124 OSTaskQuery
008139d0 g     F .text	000000a8 OS_QInit
00810454 g     F .text	00000054 OS_StrLen
008125c8 g     F .text	00000114 OSMemNameSet
0081c7d6 g     O .rwdata	00000002 OSTaskProfileEn
0081c8b4 g     O .bss	00000004 OSTime
00818174 g     F .text	00000054 altera_avalon_uart_close
00824b90 g     O .bss	00000800 OSTaskIdleStk
0081a22c g     F .text	00000034 _exit
00818d1c g     F .text	0000012c alt_alarm_start
00811158 g     F .text	00000128 OSFlagNameGet
00816098 g     F .text	0000005c OSTimeGet
00805bac g     F .text	000001bc __smakebuf_r
00800ba4 g     F .text	00000098 strlen
008189a0 g     F .text	00000054 epcs_write_enable
00819960 g     F .text	00000020 OSTaskSwHook
008193c8 g     F .text	0000015c open
00825390 g     O .bss	00000b40 OSEventTbl
0080c56c g     F .text	000000dc .hidden __gedf2
00825ed0 g     O .bss	00000510 OSTCBTbl
008143d8 g     F .text	00000100 OSSemSet
0081c764 g     O .rwdata	00000004 __wctomb
00808584 g     F .text	00000018 __sprint_r
0081c780 g     O .rwdata	00000004 alt_priority_mask
00813c00 g     F .text	00000240 OSSemDel
0081c8b8 g     O .bss	00000004 OSFlagFreeList
0080dd90 g     F .text	00000088 alt_ic_irq_enable
0081c79c g     O .rwdata	00000002 OSEventNameSize
00802f18 g     F .text	0000001c __vfprintf_internal
0081c8bc g     O .bss	00000001 OSStatRdy
008008c0 g     F .text	00000060 wifi_test
008263e0 g     O .bss	00000054 OSTCBPrioTbl
00818204 g     F .text	00000268 altera_avalon_uart_read
0080a470 g     F .text	0000005c _wctomb_r
0080e64c g     F .text	000000c4 __env_lock
0081c7e2 g     O .rwdata	00000002 OSTaskSwHookEn
0080cfa8 g     F .text	000008fc .hidden __subdf3
00816cd4 g     F .text	00000098 alt_epcs_flash_read
00806da8 g     F .text	000000b0 __lo0bits
0081c80c g     O .rwdata	00000008 alt_alarm_list
0081c7aa g     O .rwdata	00000002 OSFlagWidth
00818f28 g     F .text	00000060 _do_ctors
0080a380 g     F .text	000000c0 wcrtomb
0080db48 g     F .text	000000d8 close
00800478 g     F .text	00000090 cam_uart_interrupt
0081c868 g     O .bss	00000004 alt_envsem
0081c8c0 g     O .bss	00000004 OSIdleCtrRun
0080f810 g     F .text	00000020 OSVersion
0081c7f4 g     O .rwdata	00000002 OSTmrCfgWheelSize
00815bd4 g     F .text	00000070 OS_TaskStkClr
0081c7ce g     O .rwdata	00000002 OSTaskCreateEn
0080fe00 g     F .text	00000068 OS_EventWaitListInit
0080a0f4 g     F .text	00000080 fputwc
00819a00 g     F .text	00000020 OSTaskIdleHook
00805014 g     F .text	00000004 __sinit_lock_acquire
00818a60 g     F .text	0000011c epcs_write_buffer
00806af4 g     F .text	00000148 __multadd
008158cc g     F .text	000001e4 OSTaskSuspend
00806acc g     F .text	00000028 _Bfree
008104a8 g     F .text	0000005c OS_TaskIdle
0081c7fa g     O .rwdata	00000002 OSTmrTblSize
00813874 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	080f2240 	call	80f224 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	008020b4 	movhi	r2,130
 1004140:	108c4404 	addi	r2,r2,12560
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	008020b4 	movhi	r2,130
 1004158:	108c4404 	addi	r2,r2,12560
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	080f2700 	call	80f270 <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a07917 	ldw	r2,-32284(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a07917 	ldw	r2,-32284(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  80000c:	d691b814 	ori	gp,gp,18144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	10b20514 	ori	r2,r2,51220

    movhi r3, %hi(__bss_end)
  800018:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  80001c:	18d90d14 	ori	r3,r3,25652

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	080e1e00 	call	80e1e0 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <camera_test>:
 * camera will take a picture and output the average color
 * value to the terminal. Operator will switch the image and
 * press the button again. A different average color should
 * appear in the terminal. Repeat as needed.
 */
void camera_test(void* pdata){
  800038:	defff904 	addi	sp,sp,-28
  80003c:	dfc00615 	stw	ra,24(sp)
  800040:	df000515 	stw	fp,20(sp)
  800044:	df000504 	addi	fp,sp,20
  800048:	e13fff15 	stw	r4,-4(fp)

	uint32_t *leds = GREEN_LEDS_BASE;
  80004c:	00804074 	movhi	r2,257
  800050:	10a82804 	addi	r2,r2,-24416
  800054:	e0bffc15 	stw	r2,-16(fp)

	uint8_t q = 0;
  800058:	e03ffb05 	stb	zero,-20(fp)
	uint8_t z = 0;
  80005c:	e03ffb45 	stb	zero,-19(fp)
	uint8_t err;
	uint16_t temp;

	uint8_t cam_reply = 0;
  800060:	e03ffd05 	stb	zero,-12(fp)
	uint16_t packet_count = 0;
  800064:	e03ffd8d 	sth	zero,-10(fp)

	uint8_t sync_delay = CAM_INIT_SYNC_DELAY;
  800068:	00800144 	movi	r2,5
  80006c:	e0bffb85 	stb	r2,-18(fp)
	bool synced = FALSE;
  800070:	e03ffbc5 	stb	zero,-17(fp)
	* Documentation mentions this will take 25-60 attempts
	* Recommends an increasing delay between attempts
	* with an initial time of 5ms
	*/

	useData = FALSE;
  800074:	d0204d05 	stb	zero,-32460(gp)
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  800078:	e03ffb05 	stb	zero,-20(fp)
  80007c:	00006406 	br	800210 <camera_test+0x1d8>
		//Assume false until proven otherwise
		synced = FALSE;
  800080:	e03ffbc5 	stb	zero,-17(fp)

		//Send the sync command
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800084:	e03ffb45 	stb	zero,-19(fp)
  800088:	00001106 	br	8000d0 <camera_test+0x98>
			while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  80008c:	0001883a 	nop
  800090:	00804074 	movhi	r2,257
  800094:	10a81204 	addi	r2,r2,-24504
  800098:	10800037 	ldwio	r2,0(r2)
  80009c:	1080100c 	andi	r2,r2,64
  8000a0:	103ffb26 	beq	r2,zero,800090 <__alt_mem_epcs_flash_controller_0+0xff7f7090>
			IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
  8000a4:	e0fffb43 	ldbu	r3,-19(fp)
  8000a8:	d0a00004 	addi	r2,gp,-32768
  8000ac:	1885883a 	add	r2,r3,r2
  8000b0:	10800003 	ldbu	r2,0(r2)
  8000b4:	10c03fcc 	andi	r3,r2,255
  8000b8:	00804074 	movhi	r2,257
  8000bc:	10a81104 	addi	r2,r2,-24508
  8000c0:	10c00035 	stwio	r3,0(r2)
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
		//Assume false until proven otherwise
		synced = FALSE;

		//Send the sync command
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8000c4:	e0bffb43 	ldbu	r2,-19(fp)
  8000c8:	10800044 	addi	r2,r2,1
  8000cc:	e0bffb45 	stb	r2,-19(fp)
  8000d0:	e0bffb43 	ldbu	r2,-19(fp)
  8000d4:	108001b0 	cmpltui	r2,r2,6
  8000d8:	103fec1e 	bne	r2,zero,80008c <__alt_mem_epcs_flash_controller_0+0xff7f708c>
			while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
			IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
		}

		//Wait the recommended sync time as per doc
		OSTimeDlyHMSM(0, 0, 0, sync_delay);
  8000dc:	e0bffb83 	ldbu	r2,-18(fp)
  8000e0:	100f883a 	mov	r7,r2
  8000e4:	000d883a 	mov	r6,zero
  8000e8:	000b883a 	mov	r5,zero
  8000ec:	0009883a 	mov	r4,zero
  8000f0:	0815d480 	call	815d48 <OSTimeDlyHMSM>

//		OSQQuery(camCommandQueue, camQueueStatus);
//		temp = camQueueStatus->OSMsg;
//		printf("temp = %i\n", temp);
		cam_reply = (uint8_t)OSQAccept(camCommandQueue, &err);
  8000f4:	d0a04f17 	ldw	r2,-32452(gp)
  8000f8:	e0fffe04 	addi	r3,fp,-8
  8000fc:	180b883a 	mov	r5,r3
  800100:	1009883a 	mov	r4,r2
  800104:	08129740 	call	812974 <OSQAccept>
  800108:	e0bffd05 	stb	r2,-12(fp)
		if (cam_reply == CAM_ACK_SYNC[0]){
  80010c:	00bfea84 	movi	r2,-86
  800110:	10c03fcc 	andi	r3,r2,255
  800114:	e0bffd03 	ldbu	r2,-12(fp)
  800118:	1880351e 	bne	r3,r2,8001f0 <camera_test+0x1b8>
			synced = TRUE;
  80011c:	00800044 	movi	r2,1
  800120:	e0bffbc5 	stb	r2,-17(fp)
			printf("Receiving %x", cam_reply);
  800124:	e0bffd03 	ldbu	r2,-12(fp)
  800128:	100b883a 	mov	r5,r2
  80012c:	010020b4 	movhi	r4,130
  800130:	2128b804 	addi	r4,r4,-23840
  800134:	0800a740 	call	800a74 <printf>
			for (z=1; z < CAM_COMMAND_LENGTH; z++){
  800138:	00800044 	movi	r2,1
  80013c:	e0bffb45 	stb	r2,-19(fp)
  800140:	00002606 	br	8001dc <camera_test+0x1a4>
				cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800144:	d0a04f17 	ldw	r2,-32452(gp)
  800148:	e0fffe04 	addi	r3,fp,-8
  80014c:	180d883a 	mov	r6,r3
  800150:	000b883a 	mov	r5,zero
  800154:	1009883a 	mov	r4,r2
  800158:	0812f980 	call	812f98 <OSQPend>
  80015c:	e0bffd05 	stb	r2,-12(fp)
				if ((cam_reply != CAM_ACK_SYNC[z]) && (z != CAM_ACK_IGNORE)){
  800160:	e0fffb43 	ldbu	r3,-19(fp)
  800164:	d0a00704 	addi	r2,gp,-32740
  800168:	1885883a 	add	r2,r3,r2
  80016c:	10800003 	ldbu	r2,0(r2)
  800170:	10c03fcc 	andi	r3,r2,255
  800174:	e0bffd03 	ldbu	r2,-12(fp)
  800178:	18801026 	beq	r3,r2,8001bc <camera_test+0x184>
  80017c:	e0bffb43 	ldbu	r2,-19(fp)
  800180:	108000e0 	cmpeqi	r2,r2,3
  800184:	10000d1e 	bne	r2,zero,8001bc <camera_test+0x184>
					printf("Got %x expected %x\n", cam_reply, CAM_ACK_SYNC[z]);
  800188:	e13ffd03 	ldbu	r4,-12(fp)
  80018c:	e0fffb43 	ldbu	r3,-19(fp)
  800190:	d0a00704 	addi	r2,gp,-32740
  800194:	1885883a 	add	r2,r3,r2
  800198:	10800003 	ldbu	r2,0(r2)
  80019c:	10803fcc 	andi	r2,r2,255
  8001a0:	100d883a 	mov	r6,r2
  8001a4:	200b883a 	mov	r5,r4
  8001a8:	010020b4 	movhi	r4,130
  8001ac:	2128bc04 	addi	r4,r4,-23824
  8001b0:	0800a740 	call	800a74 <printf>
					synced = FALSE;
  8001b4:	e03ffbc5 	stb	zero,-17(fp)
					break;
  8001b8:	00000b06 	br	8001e8 <camera_test+0x1b0>
				}else{
					printf(" %x", cam_reply);
  8001bc:	e0bffd03 	ldbu	r2,-12(fp)
  8001c0:	100b883a 	mov	r5,r2
  8001c4:	010020b4 	movhi	r4,130
  8001c8:	2128c104 	addi	r4,r4,-23804
  8001cc:	0800a740 	call	800a74 <printf>
//		printf("temp = %i\n", temp);
		cam_reply = (uint8_t)OSQAccept(camCommandQueue, &err);
		if (cam_reply == CAM_ACK_SYNC[0]){
			synced = TRUE;
			printf("Receiving %x", cam_reply);
			for (z=1; z < CAM_COMMAND_LENGTH; z++){
  8001d0:	e0bffb43 	ldbu	r2,-19(fp)
  8001d4:	10800044 	addi	r2,r2,1
  8001d8:	e0bffb45 	stb	r2,-19(fp)
  8001dc:	e0bffb43 	ldbu	r2,-19(fp)
  8001e0:	108001b0 	cmpltui	r2,r2,6
  8001e4:	103fd71e 	bne	r2,zero,800144 <__alt_mem_epcs_flash_controller_0+0xff7f7144>
					break;
				}else{
					printf(" %x", cam_reply);
				}
			}
			printf("\n");
  8001e8:	01000284 	movi	r4,10
  8001ec:	0800ab80 	call	800ab8 <putchar>
		}

		if (synced){
  8001f0:	e0bffbc3 	ldbu	r2,-17(fp)
  8001f4:	10000a1e 	bne	r2,zero,800220 <camera_test+0x1e8>
			break;
		}else{
			sync_delay++;
  8001f8:	e0bffb83 	ldbu	r2,-18(fp)
  8001fc:	10800044 	addi	r2,r2,1
  800200:	e0bffb85 	stb	r2,-18(fp)
	* Recommends an increasing delay between attempts
	* with an initial time of 5ms
	*/

	useData = FALSE;
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  800204:	e0bffb03 	ldbu	r2,-20(fp)
  800208:	10800044 	addi	r2,r2,1
  80020c:	e0bffb05 	stb	r2,-20(fp)
  800210:	e0bffb03 	ldbu	r2,-20(fp)
  800214:	10800f30 	cmpltui	r2,r2,60
  800218:	103f991e 	bne	r2,zero,800080 <__alt_mem_epcs_flash_controller_0+0xff7f7080>
  80021c:	00000106 	br	800224 <camera_test+0x1ec>
			}
			printf("\n");
		}

		if (synced){
			break;
  800220:	0001883a 	nop
		}else{
			sync_delay++;
		}
	}

	if (synced){
  800224:	e0bffbc3 	ldbu	r2,-17(fp)
  800228:	10000b26 	beq	r2,zero,800258 <camera_test+0x220>
		printf("Cam synced after %i attempts\n", sync_delay);
  80022c:	e0bffb83 	ldbu	r2,-18(fp)
  800230:	100b883a 	mov	r5,r2
  800234:	010020b4 	movhi	r4,130
  800238:	2128c204 	addi	r4,r4,-23800
  80023c:	0800a740 	call	800a74 <printf>
		*leds = *leds ^ 0xFF;
  800240:	e0bffc17 	ldw	r2,-16(fp)
  800244:	10800017 	ldw	r2,0(r2)
  800248:	10c03fdc 	xori	r3,r2,255
  80024c:	e0bffc17 	ldw	r2,-16(fp)
  800250:	10c00015 	stw	r3,0(r2)
  800254:	00000506 	br	80026c <camera_test+0x234>
	}else{
		printf("Cam sync failure after %i attempts\n", sync_delay);
  800258:	e0bffb83 	ldbu	r2,-18(fp)
  80025c:	100b883a 	mov	r5,r2
  800260:	010020b4 	movhi	r4,130
  800264:	2128ca04 	addi	r4,r4,-23768
  800268:	0800a740 	call	800a74 <printf>
		//return;
	}

	//Send ACK to camera to ACK its SYNC
	for (z=0; z < CAM_COMMAND_LENGTH; z++){
  80026c:	e03ffb45 	stb	zero,-19(fp)
  800270:	00001106 	br	8002b8 <camera_test+0x280>
		while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  800274:	0001883a 	nop
  800278:	00804074 	movhi	r2,257
  80027c:	10a81204 	addi	r2,r2,-24504
  800280:	10800037 	ldwio	r2,0(r2)
  800284:	1080100c 	andi	r2,r2,64
  800288:	103ffb26 	beq	r2,zero,800278 <__alt_mem_epcs_flash_controller_0+0xff7f7278>
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
  80028c:	e0fffb43 	ldbu	r3,-19(fp)
  800290:	d0a00704 	addi	r2,gp,-32740
  800294:	1885883a 	add	r2,r3,r2
  800298:	10800003 	ldbu	r2,0(r2)
  80029c:	10c03fcc 	andi	r3,r2,255
  8002a0:	00804074 	movhi	r2,257
  8002a4:	10a81104 	addi	r2,r2,-24508
  8002a8:	10c00035 	stwio	r3,0(r2)
		printf("Cam sync failure after %i attempts\n", sync_delay);
		//return;
	}

	//Send ACK to camera to ACK its SYNC
	for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8002ac:	e0bffb43 	ldbu	r2,-19(fp)
  8002b0:	10800044 	addi	r2,r2,1
  8002b4:	e0bffb45 	stb	r2,-19(fp)
  8002b8:	e0bffb43 	ldbu	r2,-19(fp)
  8002bc:	108001b0 	cmpltui	r2,r2,6
  8002c0:	103fec1e 	bne	r2,zero,800274 <__alt_mem_epcs_flash_controller_0+0xff7f7274>
		while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
	}

	//Flush queue then turn on camera
	OSQFlush(camCommandQueue);
  8002c4:	d0a04f17 	ldw	r2,-32452(gp)
  8002c8:	1009883a 	mov	r4,r2
  8002cc:	0812ee00 	call	812ee0 <OSQFlush>
	for (z=0; z < CAM_COMMAND_LENGTH; z++){
  8002d0:	e03ffb45 	stb	zero,-19(fp)
  8002d4:	00001106 	br	80031c <camera_test+0x2e4>
		while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  8002d8:	0001883a 	nop
  8002dc:	00804074 	movhi	r2,257
  8002e0:	10a81204 	addi	r2,r2,-24504
  8002e4:	10800037 	ldwio	r2,0(r2)
  8002e8:	1080100c 	andi	r2,r2,64
  8002ec:	103ffb26 	beq	r2,zero,8002dc <__alt_mem_epcs_flash_controller_0+0xff7f72dc>
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_INIT[z]);
  8002f0:	e0fffb43 	ldbu	r3,-19(fp)
  8002f4:	d0a00184 	addi	r2,gp,-32762
  8002f8:	1885883a 	add	r2,r3,r2
  8002fc:	10800003 	ldbu	r2,0(r2)
  800300:	10c03fcc 	andi	r3,r2,255
  800304:	00804074 	movhi	r2,257
  800308:	10a81104 	addi	r2,r2,-24508
  80030c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
	}

	//Flush queue then turn on camera
	OSQFlush(camCommandQueue);
	for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800310:	e0bffb43 	ldbu	r2,-19(fp)
  800314:	10800044 	addi	r2,r2,1
  800318:	e0bffb45 	stb	r2,-19(fp)
  80031c:	e0bffb43 	ldbu	r2,-19(fp)
  800320:	108001b0 	cmpltui	r2,r2,6
  800324:	103fec1e 	bne	r2,zero,8002d8 <__alt_mem_epcs_flash_controller_0+0xff7f72d8>
		while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
		IOWR_ALTERA_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_INIT[z]);
	}
	//Wait the recommended second then check for ACK
	OSTimeDlyHMSM(0, 0, 2, 0);
  800328:	000f883a 	mov	r7,zero
  80032c:	01800084 	movi	r6,2
  800330:	000b883a 	mov	r5,zero
  800334:	0009883a 	mov	r4,zero
  800338:	0815d480 	call	815d48 <OSTimeDlyHMSM>
	printf("Done waiting\n");
  80033c:	010020b4 	movhi	r4,130
  800340:	2128d304 	addi	r4,r4,-23732
  800344:	0800b900 	call	800b90 <puts>
	//for (z=0; z < CAM_MAX_ATTEMPTS; z++){
		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800348:	d0a04f17 	ldw	r2,-32452(gp)
  80034c:	e0fffe04 	addi	r3,fp,-8
  800350:	180d883a 	mov	r6,r3
  800354:	000b883a 	mov	r5,zero
  800358:	1009883a 	mov	r4,r2
  80035c:	0812f980 	call	812f98 <OSQPend>
  800360:	e0bffd05 	stb	r2,-12(fp)
		if (cam_reply == CAM_ACK_INIT[0]){
  800364:	00bfea84 	movi	r2,-86
  800368:	10c03fcc 	andi	r3,r2,255
  80036c:	e0bffd03 	ldbu	r2,-12(fp)
  800370:	1880331e 	bne	r3,r2,800440 <camera_test+0x408>
			printf("Receiving %x", cam_reply);
  800374:	e0bffd03 	ldbu	r2,-12(fp)
  800378:	100b883a 	mov	r5,r2
  80037c:	010020b4 	movhi	r4,130
  800380:	2128b804 	addi	r4,r4,-23840
  800384:	0800a740 	call	800a74 <printf>
			for (z=1; z < CAM_COMMAND_LENGTH; z++){
  800388:	00800044 	movi	r2,1
  80038c:	e0bffb45 	stb	r2,-19(fp)
  800390:	00002506 	br	800428 <camera_test+0x3f0>
				cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800394:	d0a04f17 	ldw	r2,-32452(gp)
  800398:	e0fffe04 	addi	r3,fp,-8
  80039c:	180d883a 	mov	r6,r3
  8003a0:	000b883a 	mov	r5,zero
  8003a4:	1009883a 	mov	r4,r2
  8003a8:	0812f980 	call	812f98 <OSQPend>
  8003ac:	e0bffd05 	stb	r2,-12(fp)
				if ((cam_reply != CAM_ACK_INIT[z]) && (z != CAM_ACK_IGNORE)){
  8003b0:	e0fffb43 	ldbu	r3,-19(fp)
  8003b4:	d0a00884 	addi	r2,gp,-32734
  8003b8:	1885883a 	add	r2,r3,r2
  8003bc:	10800003 	ldbu	r2,0(r2)
  8003c0:	10c03fcc 	andi	r3,r2,255
  8003c4:	e0bffd03 	ldbu	r2,-12(fp)
  8003c8:	18800f26 	beq	r3,r2,800408 <camera_test+0x3d0>
  8003cc:	e0bffb43 	ldbu	r2,-19(fp)
  8003d0:	108000e0 	cmpeqi	r2,r2,3
  8003d4:	10000c1e 	bne	r2,zero,800408 <camera_test+0x3d0>
					printf("Got %x expected %x\n", cam_reply, CAM_ACK_INIT[z]);
  8003d8:	e13ffd03 	ldbu	r4,-12(fp)
  8003dc:	e0fffb43 	ldbu	r3,-19(fp)
  8003e0:	d0a00884 	addi	r2,gp,-32734
  8003e4:	1885883a 	add	r2,r3,r2
  8003e8:	10800003 	ldbu	r2,0(r2)
  8003ec:	10803fcc 	andi	r2,r2,255
  8003f0:	100d883a 	mov	r6,r2
  8003f4:	200b883a 	mov	r5,r4
  8003f8:	010020b4 	movhi	r4,130
  8003fc:	2128bc04 	addi	r4,r4,-23824
  800400:	0800a740 	call	800a74 <printf>
  800404:	00000506 	br	80041c <camera_test+0x3e4>
					//break;
				}else{
					printf(" %x", cam_reply);
  800408:	e0bffd03 	ldbu	r2,-12(fp)
  80040c:	100b883a 	mov	r5,r2
  800410:	010020b4 	movhi	r4,130
  800414:	2128c104 	addi	r4,r4,-23804
  800418:	0800a740 	call	800a74 <printf>
	printf("Done waiting\n");
	//for (z=0; z < CAM_MAX_ATTEMPTS; z++){
		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
		if (cam_reply == CAM_ACK_INIT[0]){
			printf("Receiving %x", cam_reply);
			for (z=1; z < CAM_COMMAND_LENGTH; z++){
  80041c:	e0bffb43 	ldbu	r2,-19(fp)
  800420:	10800044 	addi	r2,r2,1
  800424:	e0bffb45 	stb	r2,-19(fp)
  800428:	e0bffb43 	ldbu	r2,-19(fp)
  80042c:	108001b0 	cmpltui	r2,r2,6
  800430:	103fd81e 	bne	r2,zero,800394 <__alt_mem_epcs_flash_controller_0+0xff7f7394>
					//break;
				}else{
					printf(" %x", cam_reply);
				}
			}
			printf("\n");
  800434:	01000284 	movi	r4,10
  800438:	0800ab80 	call	800ab8 <putchar>
  80043c:	00000806 	br	800460 <camera_test+0x428>
		}else{
			printf("Got %x expected %x\n", cam_reply, CAM_ACK_INIT[0]);
  800440:	e0bffd03 	ldbu	r2,-12(fp)
  800444:	00ffea84 	movi	r3,-86
  800448:	18c03fcc 	andi	r3,r3,255
  80044c:	180d883a 	mov	r6,r3
  800450:	100b883a 	mov	r5,r2
  800454:	010020b4 	movhi	r4,130
  800458:	2128bc04 	addi	r4,r4,-23824
  80045c:	0800a740 	call	800a74 <printf>

		//print to terminal

		//repeat

		OSTimeDlyHMSM(0, 0, 1, 0);
  800460:	000f883a 	mov	r7,zero
  800464:	01800044 	movi	r6,1
  800468:	000b883a 	mov	r5,zero
  80046c:	0009883a 	mov	r4,zero
  800470:	0815d480 	call	815d48 <OSTimeDlyHMSM>
	}
  800474:	003ffa06 	br	800460 <__alt_mem_epcs_flash_controller_0+0xff7f7460>

00800478 <cam_uart_interrupt>:
}

void cam_uart_interrupt(void * context){
  800478:	defffc04 	addi	sp,sp,-16
  80047c:	dfc00315 	stw	ra,12(sp)
  800480:	df000215 	stw	fp,8(sp)
  800484:	df000204 	addi	fp,sp,8
  800488:	e13fff15 	stw	r4,-4(fp)
	uint8_t read = 0;
  80048c:	e03ffe05 	stb	zero,-8(fp)

	while(!(IORD_ALTERA_AVALON_UART_STATUS(CAM_UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
  800490:	0001883a 	nop
  800494:	00804074 	movhi	r2,257
  800498:	10a81204 	addi	r2,r2,-24504
  80049c:	10800037 	ldwio	r2,0(r2)
  8004a0:	1080200c 	andi	r2,r2,128
  8004a4:	103ffb26 	beq	r2,zero,800494 <__alt_mem_epcs_flash_controller_0+0xff7f7494>
	read = IORD_ALTERA_AVALON_UART_RXDATA(CAM_UART_BASE);
  8004a8:	00804074 	movhi	r2,257
  8004ac:	10a81004 	addi	r2,r2,-24512
  8004b0:	10800037 	ldwio	r2,0(r2)
  8004b4:	e0bffe05 	stb	r2,-8(fp)

	if (useData){
  8004b8:	d0a04d03 	ldbu	r2,-32460(gp)
  8004bc:	10803fcc 	andi	r2,r2,255
  8004c0:	10000626 	beq	r2,zero,8004dc <cam_uart_interrupt+0x64>
		OSQPost(camPackageQueue, (void*) read);
  8004c4:	d0a05017 	ldw	r2,-32448(gp)
  8004c8:	e0fffe03 	ldbu	r3,-8(fp)
  8004cc:	180b883a 	mov	r5,r3
  8004d0:	1009883a 	mov	r4,r2
  8004d4:	08133900 	call	813390 <OSQPost>
	}else{
		OSQPost(camCommandQueue, (void*) read);
	}
}
  8004d8:	00000506 	br	8004f0 <cam_uart_interrupt+0x78>
	read = IORD_ALTERA_AVALON_UART_RXDATA(CAM_UART_BASE);

	if (useData){
		OSQPost(camPackageQueue, (void*) read);
	}else{
		OSQPost(camCommandQueue, (void*) read);
  8004dc:	d0a04f17 	ldw	r2,-32452(gp)
  8004e0:	e0fffe03 	ldbu	r3,-8(fp)
  8004e4:	180b883a 	mov	r5,r3
  8004e8:	1009883a 	mov	r4,r2
  8004ec:	08133900 	call	813390 <OSQPost>
	}
}
  8004f0:	0001883a 	nop
  8004f4:	e037883a 	mov	sp,fp
  8004f8:	dfc00117 	ldw	ra,4(sp)
  8004fc:	df000017 	ldw	fp,0(sp)
  800500:	dec00204 	addi	sp,sp,8
  800504:	f800283a 	ret

00800508 <button_interrupt>:

void button_interrupt(void * context){
  800508:	defffd04 	addi	sp,sp,-12
  80050c:	dfc00215 	stw	ra,8(sp)
  800510:	df000115 	stw	fp,4(sp)
  800514:	df000104 	addi	fp,sp,4
  800518:	e13fff15 	stw	r4,-4(fp)
	printf("button\n");
  80051c:	010020b4 	movhi	r4,130
  800520:	2128d704 	addi	r4,r4,-23716
  800524:	0800b900 	call	800b90 <puts>
	OSTimeDlyHMSM(0, 0, 0, 400);
  800528:	01c06404 	movi	r7,400
  80052c:	000d883a 	mov	r6,zero
  800530:	000b883a 	mov	r5,zero
  800534:	0009883a 	mov	r4,zero
  800538:	0815d480 	call	815d48 <OSTimeDlyHMSM>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 1);
  80053c:	00c00044 	movi	r3,1
  800540:	00804074 	movhi	r2,257
  800544:	10a82704 	addi	r2,r2,-24420
  800548:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  80054c:	00c003c4 	movi	r3,15
  800550:	00804074 	movhi	r2,257
  800554:	10a82604 	addi	r2,r2,-24424
  800558:	10c00035 	stwio	r3,0(r2)

	//post semaphore for camera
	OSSemPost(BUTTON_SEM);
  80055c:	d0a05117 	ldw	r2,-32444(gp)
  800560:	1009883a 	mov	r4,r2
  800564:	08141b80 	call	8141b8 <OSSemPost>
}
  800568:	0001883a 	nop
  80056c:	e037883a 	mov	sp,fp
  800570:	dfc00117 	ldw	ra,4(sp)
  800574:	df000017 	ldw	fp,0(sp)
  800578:	dec00204 	addi	sp,sp,8
  80057c:	f800283a 	ret

00800580 <motor_test>:

/*
 * Drives FORWARD initially but when the INFRARED SENSOR
 * detects something and it will REVERSE the direction
 */
void motor_test(void* pdata){
  800580:	defffd04 	addi	sp,sp,-12
  800584:	dfc00215 	stw	ra,8(sp)
  800588:	df000115 	stw	fp,4(sp)
  80058c:	df000104 	addi	fp,sp,4
  800590:	e13fff15 	stw	r4,-4(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);

        */
		OSTimeDlyHMSM(0, 0, 1, 0);
  800594:	000f883a 	mov	r7,zero
  800598:	01800044 	movi	r6,1
  80059c:	000b883a 	mov	r5,zero
  8005a0:	0009883a 	mov	r4,zero
  8005a4:	0815d480 	call	815d48 <OSTimeDlyHMSM>
	}
  8005a8:	003ffa06 	br	800594 <__alt_mem_epcs_flash_controller_0+0xff7f7594>

008005ac <sensor_interrupt>:
}

void sensor_interrupt(void * context){
  8005ac:	defffd04 	addi	sp,sp,-12
  8005b0:	dfc00215 	stw	ra,8(sp)
  8005b4:	df000115 	stw	fp,4(sp)
  8005b8:	df000104 	addi	fp,sp,4
  8005bc:	e13fff15 	stw	r4,-4(fp)
	printf("sensor\n");
  8005c0:	010020b4 	movhi	r4,130
  8005c4:	2128d904 	addi	r4,r4,-23708
  8005c8:	0800b900 	call	800b90 <puts>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 1);
  8005cc:	00c00044 	movi	r3,1
  8005d0:	00804074 	movhi	r2,257
  8005d4:	10a83704 	addi	r2,r2,-24356
  8005d8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  8005dc:	00c003c4 	movi	r3,15
  8005e0:	00804074 	movhi	r2,257
  8005e4:	10a83604 	addi	r2,r2,-24360
  8005e8:	10c00035 	stwio	r3,0(r2)
	//post semaphore for camera
	OSSemPost(SENSOR_SEM);
  8005ec:	d0a05217 	ldw	r2,-32440(gp)
  8005f0:	1009883a 	mov	r4,r2
  8005f4:	08141b80 	call	8141b8 <OSSemPost>
}
  8005f8:	0001883a 	nop
  8005fc:	e037883a 	mov	sp,fp
  800600:	dfc00117 	ldw	ra,4(sp)
  800604:	df000017 	ldw	fp,0(sp)
  800608:	dec00204 	addi	sp,sp,8
  80060c:	f800283a 	ret

00800610 <main>:
 */



/* The main function creates two task and starts multi-tasking */
int main(void){
  800610:	defff904 	addi	sp,sp,-28
  800614:	dfc00615 	stw	ra,24(sp)
  800618:	df000515 	stw	fp,20(sp)
  80061c:	df000504 	addi	fp,sp,20
  
	printf("START OF MAIN\n");
  800620:	010020b4 	movhi	r4,130
  800624:	2128fb04 	addi	r4,r4,-23572
  800628:	0800b900 	call	800b90 <puts>


	if(OSTaskCreateExt(motor_test,
  80062c:	d8000415 	stw	zero,16(sp)
  800630:	d8000315 	stw	zero,12(sp)
  800634:	00820004 	movi	r2,2048
  800638:	d8800215 	stw	r2,8(sp)
  80063c:	008020b4 	movhi	r2,130
  800640:	10b44404 	addi	r2,r2,-12016
  800644:	d8800115 	stw	r2,4(sp)
  800648:	00800084 	movi	r2,2
  80064c:	d8800015 	stw	r2,0(sp)
  800650:	01c00084 	movi	r7,2
  800654:	018020b4 	movhi	r6,130
  800658:	31bc4304 	addi	r6,r6,-3828
  80065c:	000b883a 	mov	r5,zero
  800660:	01002034 	movhi	r4,128
  800664:	21016004 	addi	r4,r4,1408
  800668:	0814b740 	call	814b74 <OSTaskCreateExt>
  80066c:	10803fcc 	andi	r2,r2,255
  800670:	10000326 	beq	r2,zero,800680 <main+0x70>
                  		motor_test_stk,
                  		TASK_STACKSIZE,
                  		NULL,
                  		0))
	{
		printf("Motor task creation failure\n");
  800674:	010020b4 	movhi	r4,130
  800678:	2128ff04 	addi	r4,r4,-23556
  80067c:	0800b900 	call	800b90 <puts>
	}

	printf("START OF MOTOR\n");
  800680:	010020b4 	movhi	r4,130
  800684:	21290604 	addi	r4,r4,-23528
  800688:	0800b900 	call	800b90 <puts>

	if(OSTaskCreateExt(camera_test,
  80068c:	d8000415 	stw	zero,16(sp)
  800690:	d8000315 	stw	zero,12(sp)
  800694:	00820004 	movi	r2,2048
  800698:	d8800215 	stw	r2,8(sp)
  80069c:	008020b4 	movhi	r2,130
  8006a0:	10844404 	addi	r2,r2,4368
  8006a4:	d8800115 	stw	r2,4(sp)
  8006a8:	00800044 	movi	r2,1
  8006ac:	d8800015 	stw	r2,0(sp)
  8006b0:	01c00044 	movi	r7,1
  8006b4:	018020b4 	movhi	r6,130
  8006b8:	318c4304 	addi	r6,r6,12556
  8006bc:	000b883a 	mov	r5,zero
  8006c0:	01002034 	movhi	r4,128
  8006c4:	21000e04 	addi	r4,r4,56
  8006c8:	0814b740 	call	814b74 <OSTaskCreateExt>
  8006cc:	10803fcc 	andi	r2,r2,255
  8006d0:	10000326 	beq	r2,zero,8006e0 <main+0xd0>
                  		camera_test_stk,
                  		TASK_STACKSIZE,
                  		NULL,
                  		0))
	{
		printf("Camera task creation failure\n");
  8006d4:	010020b4 	movhi	r4,130
  8006d8:	21290a04 	addi	r4,r4,-23512
  8006dc:	0800b900 	call	800b90 <puts>
	}

	printf("START OF CAM\n");
  8006e0:	010020b4 	movhi	r4,130
  8006e4:	21291204 	addi	r4,r4,-23480
  8006e8:	0800b900 	call	800b90 <puts>

	if(OSTaskCreateExt(wifi_test,
  8006ec:	d8000415 	stw	zero,16(sp)
  8006f0:	d8000315 	stw	zero,12(sp)
  8006f4:	00820004 	movi	r2,2048
  8006f8:	d8800215 	stw	r2,8(sp)
  8006fc:	008020b4 	movhi	r2,130
  800700:	10bc4404 	addi	r2,r2,-3824
  800704:	d8800115 	stw	r2,4(sp)
  800708:	008000c4 	movi	r2,3
  80070c:	d8800015 	stw	r2,0(sp)
  800710:	01c000c4 	movi	r7,3
  800714:	018020b4 	movhi	r6,130
  800718:	31844304 	addi	r6,r6,4364
  80071c:	000b883a 	mov	r5,zero
  800720:	01002034 	movhi	r4,128
  800724:	21023004 	addi	r4,r4,2240
  800728:	0814b740 	call	814b74 <OSTaskCreateExt>
  80072c:	10803fcc 	andi	r2,r2,255
  800730:	10000326 	beq	r2,zero,800740 <main+0x130>
                    	wifi_test_stk,
                    	TASK_STACKSIZE,
                    	NULL,
                    	0))
	{
		printf("Wifi task creation failure\n");
  800734:	010020b4 	movhi	r4,130
  800738:	21291604 	addi	r4,r4,-23464
  80073c:	0800b900 	call	800b90 <puts>
	}

	printf("START OF WIFI\n");
  800740:	010020b4 	movhi	r4,130
  800744:	21291d04 	addi	r4,r4,-23436
  800748:	0800b900 	call	800b90 <puts>

	//Semaphore
	BUTTON_SEM = OSSemCreate(SEM_INIT_VALUE);
  80074c:	0009883a 	mov	r4,zero
  800750:	0813b280 	call	813b28 <OSSemCreate>
  800754:	d0a05115 	stw	r2,-32444(gp)
	SENSOR_SEM = OSSemCreate(SEM_INIT_VALUE);
  800758:	0009883a 	mov	r4,zero
  80075c:	0813b280 	call	813b28 <OSSemCreate>
  800760:	d0a05215 	stw	r2,-32440(gp)

	//Interrupt masks
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  800764:	00c003c4 	movi	r3,15
  800768:	00804074 	movhi	r2,257
  80076c:	10a82604 	addi	r2,r2,-24424
  800770:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 0x0);
  800774:	0007883a 	mov	r3,zero
  800778:	00804074 	movhi	r2,257
  80077c:	10a82704 	addi	r2,r2,-24420
  800780:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  800784:	00c003c4 	movi	r3,15
  800788:	00804074 	movhi	r2,257
  80078c:	10a83604 	addi	r2,r2,-24360
  800790:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 0x0);
  800794:	0007883a 	mov	r3,zero
  800798:	00804074 	movhi	r2,257
  80079c:	10a83704 	addi	r2,r2,-24356
  8007a0:	10c00035 	stwio	r3,0(r2)

	//Interrupt controller
	if(alt_ic_isr_register(BUTTON_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
  8007a4:	d8000015 	stw	zero,0(sp)
  8007a8:	000f883a 	mov	r7,zero
  8007ac:	01802034 	movhi	r6,128
  8007b0:	31814204 	addi	r6,r6,1288
  8007b4:	01400104 	movi	r5,4
  8007b8:	0009883a 	mov	r4,zero
  8007bc:	080dd400 	call	80dd40 <alt_ic_isr_register>
  8007c0:	10000326 	beq	r2,zero,8007d0 <main+0x1c0>
					    	BUTTON_BUTTON_IRQ,
					    	button_interrupt,
					    	NULL,
					    	NULL))
	{
	  printf("button interrupt failed\n");
  8007c4:	010020b4 	movhi	r4,130
  8007c8:	21292104 	addi	r4,r4,-23420
  8007cc:	0800b900 	call	800b90 <puts>
	}

	if(alt_ic_isr_register(PROX_SENSOR_IRQ_INTERRUPT_CONTROLLER_ID,
  8007d0:	d8000015 	stw	zero,0(sp)
  8007d4:	000f883a 	mov	r7,zero
  8007d8:	01802034 	movhi	r6,128
  8007dc:	31816b04 	addi	r6,r6,1452
  8007e0:	014000c4 	movi	r5,3
  8007e4:	0009883a 	mov	r4,zero
  8007e8:	080dd400 	call	80dd40 <alt_ic_isr_register>
  8007ec:	10000326 	beq	r2,zero,8007fc <main+0x1ec>
					    	PROX_SENSOR_IRQ,
					    	sensor_interrupt,
					    	NULL,
					    	NULL))
	{
	  printf("proximity sensor interrupt failed\n");
  8007f0:	010020b4 	movhi	r4,130
  8007f4:	21292704 	addi	r4,r4,-23396
  8007f8:	0800b900 	call	800b90 <puts>
	}

	if(alt_ic_isr_register(CAM_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  8007fc:	d8000015 	stw	zero,0(sp)
  800800:	000f883a 	mov	r7,zero
  800804:	01802034 	movhi	r6,128
  800808:	31811e04 	addi	r6,r6,1144
  80080c:	01400044 	movi	r5,1
  800810:	0009883a 	mov	r4,zero
  800814:	080dd400 	call	80dd40 <alt_ic_isr_register>
  800818:	10000326 	beq	r2,zero,800828 <main+0x218>
				  	  	   CAM_UART_IRQ,
				  	  	   &cam_uart_interrupt,
				  	  	   NULL,
				  	  	   NULL))
	{
	  printf("cam interrupt failed\n");
  80081c:	010020b4 	movhi	r4,130
  800820:	21293004 	addi	r4,r4,-23360
  800824:	0800b900 	call	800b90 <puts>
	}
    
    //OSTimeDlyHMSM(0, 0, 1, 0);
	printf("wifi interrupt init\n");
  800828:	010020b4 	movhi	r4,130
  80082c:	21293604 	addi	r4,r4,-23336
  800830:	0800b900 	call	800b90 <puts>
    if(alt_ic_isr_register(WIFI_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  800834:	d8000015 	stw	zero,0(sp)
  800838:	000f883a 	mov	r7,zero
  80083c:	01802034 	movhi	r6,128
  800840:	31824804 	addi	r6,r6,2336
  800844:	01400084 	movi	r5,2
  800848:	0009883a 	mov	r4,zero
  80084c:	080dd400 	call	80dd40 <alt_ic_isr_register>
  800850:	10000326 	beq	r2,zero,800860 <main+0x250>
				  	  	   WIFI_UART_IRQ,
				  	  	   &wifi_uart_interrupt,
				  	  	   NULL,
				  	  	   NULL))
	{
	  printf("wifi interrupt failed\n");
  800854:	010020b4 	movhi	r4,130
  800858:	21293b04 	addi	r4,r4,-23316
  80085c:	0800b900 	call	800b90 <puts>
	}

	camCommandQueue = OSQCreate(camCommandBuffer, CAM_COMMAND_LENGTH);
  800860:	01400184 	movi	r5,6
  800864:	010020b4 	movhi	r4,130
  800868:	21343e04 	addi	r4,r4,-12040
  80086c:	0812ab40 	call	812ab4 <OSQCreate>
  800870:	d0a04f15 	stw	r2,-32452(gp)
	camPackageQueue = OSQCreate(camPackageBuffer, CAM_PACKAGE_LENGTH);
  800874:	01408004 	movi	r5,512
  800878:	010020b4 	movhi	r4,130
  80087c:	21323e04 	addi	r4,r4,-14088
  800880:	0812ab40 	call	812ab4 <OSQCreate>
  800884:	d0a05015 	stw	r2,-32448(gp)
    wifiQueue = OSQCreate(WifiBuffer, Wifi_PACKAGE_LENGTH);
  800888:	01400044 	movi	r5,1
  80088c:	d1205304 	addi	r4,gp,-32436
  800890:	0812ab40 	call	812ab4 <OSQCreate>
  800894:	d0a05415 	stw	r2,-32432(gp)

	printf("END OF MAIN\n");
  800898:	010020b4 	movhi	r4,130
  80089c:	21294104 	addi	r4,r4,-23292
  8008a0:	0800b900 	call	800b90 <puts>

	OSStart();
  8008a4:	080f4d00 	call	80f4d0 <OSStart>

	return 0;
  8008a8:	0005883a 	mov	r2,zero
}
  8008ac:	e037883a 	mov	sp,fp
  8008b0:	dfc00117 	ldw	ra,4(sp)
  8008b4:	df000017 	ldw	fp,0(sp)
  8008b8:	dec00204 	addi	sp,sp,8
  8008bc:	f800283a 	ret

008008c0 <wifi_test>:
 */

#include "wifi_test.h"
#include "motor_test.h"

void wifi_test(void* pdata){
  8008c0:	defffc04 	addi	sp,sp,-16
  8008c4:	dfc00315 	stw	ra,12(sp)
  8008c8:	df000215 	stw	fp,8(sp)
  8008cc:	df000204 	addi	fp,sp,8
  8008d0:	e13fff15 	stw	r4,-4(fp)
    uint8_t wifiReceive;

	while (1){
		  //do stuff
		// OSSemPend(BUTTON_SEM, 0, &err);
		printf("Hello from wifi\n");
  8008d4:	010020b4 	movhi	r4,130
  8008d8:	21294404 	addi	r4,r4,-23280
  8008dc:	0800b900 	call	800b90 <puts>

        wifiReceive = (uint8_t) OSQPend(wifiQueue, 0, &err);
  8008e0:	d0a05417 	ldw	r2,-32432(gp)
  8008e4:	e0fffe44 	addi	r3,fp,-7
  8008e8:	180d883a 	mov	r6,r3
  8008ec:	000b883a 	mov	r5,zero
  8008f0:	1009883a 	mov	r4,r2
  8008f4:	0812f980 	call	812f98 <OSQPend>
  8008f8:	e0bffe05 	stb	r2,-8(fp)
        printf("Received form Wifi: %d \n", wifiReceive);
  8008fc:	e0bffe03 	ldbu	r2,-8(fp)
  800900:	100b883a 	mov	r5,r2
  800904:	010020b4 	movhi	r4,130
  800908:	21294804 	addi	r4,r4,-23264
  80090c:	0800a740 	call	800a74 <printf>
        motorCommand(wifiReceive);
  800910:	e0bffe03 	ldbu	r2,-8(fp)
  800914:	1009883a 	mov	r4,r2
  800918:	08009980 	call	800998 <motorCommand>
	}
  80091c:	003fed06 	br	8008d4 <__alt_mem_epcs_flash_controller_0+0xff7f78d4>

00800920 <wifi_uart_interrupt>:
	//OSTimeDlyHMSM(0, 0, 0, CAM_WAIT_MS);
}

void wifi_uart_interrupt(void * context){
  800920:	defffc04 	addi	sp,sp,-16
  800924:	dfc00315 	stw	ra,12(sp)
  800928:	df000215 	stw	fp,8(sp)
  80092c:	df000204 	addi	fp,sp,8
  800930:	e13fff15 	stw	r4,-4(fp)
    uint8_t read = 0;
  800934:	e03ffe05 	stb	zero,-8(fp)
    printf("Hello from wifi interrupt\n");
  800938:	010020b4 	movhi	r4,130
  80093c:	21294f04 	addi	r4,r4,-23236
  800940:	0800b900 	call	800b90 <puts>
    while(!(IORD_ALTERA_AVALON_UART_STATUS(WIFI_UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
  800944:	0001883a 	nop
  800948:	00804074 	movhi	r2,257
  80094c:	10a80a04 	addi	r2,r2,-24536
  800950:	10800037 	ldwio	r2,0(r2)
  800954:	1080200c 	andi	r2,r2,128
  800958:	103ffb26 	beq	r2,zero,800948 <__alt_mem_epcs_flash_controller_0+0xff7f7948>
    read = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_UART_BASE);
  80095c:	00804074 	movhi	r2,257
  800960:	10a80804 	addi	r2,r2,-24544
  800964:	10800037 	ldwio	r2,0(r2)
  800968:	e0bffe05 	stb	r2,-8(fp)
    
    OSQPost(wifiQueue, (void*) read);
  80096c:	d0a05417 	ldw	r2,-32432(gp)
  800970:	e0fffe03 	ldbu	r3,-8(fp)
  800974:	180b883a 	mov	r5,r3
  800978:	1009883a 	mov	r4,r2
  80097c:	08133900 	call	813390 <OSQPost>
}
  800980:	0001883a 	nop
  800984:	e037883a 	mov	sp,fp
  800988:	dfc00117 	ldw	ra,4(sp)
  80098c:	df000017 	ldw	fp,0(sp)
  800990:	dec00204 	addi	sp,sp,8
  800994:	f800283a 	ret

00800998 <motorCommand>:

void motorCommand(uint8_t input) {
  800998:	defffe04 	addi	sp,sp,-8
  80099c:	df000115 	stw	fp,4(sp)
  8009a0:	df000104 	addi	fp,sp,4
  8009a4:	2005883a 	mov	r2,r4
  8009a8:	e0bfff05 	stb	r2,-4(fp)
    if (input == MOTOR_CW) {
  8009ac:	e0bfff03 	ldbu	r2,-4(fp)
  8009b0:	10800c58 	cmpnei	r2,r2,49
  8009b4:	1000081e 	bne	r2,zero,8009d8 <motorCommand+0x40>
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_FORWARD);
  8009b8:	00c000c4 	movi	r3,3
  8009bc:	00804074 	movhi	r2,257
  8009c0:	10a82c04 	addi	r2,r2,-24400
  8009c4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_FORWARD);
  8009c8:	00c000c4 	movi	r3,3
  8009cc:	00804074 	movhi	r2,257
  8009d0:	10a83004 	addi	r2,r2,-24384
  8009d4:	10c00035 	stwio	r3,0(r2)
    }
    if (input == MOTOR_CCW) {
  8009d8:	e0bfff03 	ldbu	r2,-4(fp)
  8009dc:	10800c98 	cmpnei	r2,r2,50
  8009e0:	1000081e 	bne	r2,zero,800a04 <motorCommand+0x6c>
        IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_REVERSE);
  8009e4:	00c00144 	movi	r3,5
  8009e8:	00804074 	movhi	r2,257
  8009ec:	10a82c04 	addi	r2,r2,-24400
  8009f0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_REVERSE);
  8009f4:	00c00144 	movi	r3,5
  8009f8:	00804074 	movhi	r2,257
  8009fc:	10a83004 	addi	r2,r2,-24384
  800a00:	10c00035 	stwio	r3,0(r2)
    }
    if (input == MOTOR_STOP) {
  800a04:	e0bfff03 	ldbu	r2,-4(fp)
  800a08:	10800cd8 	cmpnei	r2,r2,51
  800a0c:	1000081e 	bne	r2,zero,800a30 <motorCommand+0x98>
        IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
  800a10:	00c001c4 	movi	r3,7
  800a14:	00804074 	movhi	r2,257
  800a18:	10a82c04 	addi	r2,r2,-24400
  800a1c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);
  800a20:	00c001c4 	movi	r3,7
  800a24:	00804074 	movhi	r2,257
  800a28:	10a83004 	addi	r2,r2,-24384
  800a2c:	10c00035 	stwio	r3,0(r2)
    }
}
  800a30:	0001883a 	nop
  800a34:	e037883a 	mov	sp,fp
  800a38:	df000017 	ldw	fp,0(sp)
  800a3c:	dec00104 	addi	sp,sp,4
  800a40:	f800283a 	ret

00800a44 <_printf_r>:
  800a44:	defffd04 	addi	sp,sp,-12
  800a48:	2805883a 	mov	r2,r5
  800a4c:	dfc00015 	stw	ra,0(sp)
  800a50:	d9800115 	stw	r6,4(sp)
  800a54:	d9c00215 	stw	r7,8(sp)
  800a58:	21400217 	ldw	r5,8(r4)
  800a5c:	d9c00104 	addi	r7,sp,4
  800a60:	100d883a 	mov	r6,r2
  800a64:	0800c3c0 	call	800c3c <___vfprintf_internal_r>
  800a68:	dfc00017 	ldw	ra,0(sp)
  800a6c:	dec00304 	addi	sp,sp,12
  800a70:	f800283a 	ret

00800a74 <printf>:
  800a74:	defffc04 	addi	sp,sp,-16
  800a78:	dfc00015 	stw	ra,0(sp)
  800a7c:	d9400115 	stw	r5,4(sp)
  800a80:	d9800215 	stw	r6,8(sp)
  800a84:	d9c00315 	stw	r7,12(sp)
  800a88:	008020b4 	movhi	r2,130
  800a8c:	10b1d504 	addi	r2,r2,-14508
  800a90:	10800017 	ldw	r2,0(r2)
  800a94:	200b883a 	mov	r5,r4
  800a98:	d9800104 	addi	r6,sp,4
  800a9c:	11000217 	ldw	r4,8(r2)
  800aa0:	0802f180 	call	802f18 <__vfprintf_internal>
  800aa4:	dfc00017 	ldw	ra,0(sp)
  800aa8:	dec00404 	addi	sp,sp,16
  800aac:	f800283a 	ret

00800ab0 <_putchar_r>:
  800ab0:	21800217 	ldw	r6,8(r4)
  800ab4:	0807adc1 	jmpi	807adc <_putc_r>

00800ab8 <putchar>:
  800ab8:	008020b4 	movhi	r2,130
  800abc:	10b1d504 	addi	r2,r2,-14508
  800ac0:	200b883a 	mov	r5,r4
  800ac4:	11000017 	ldw	r4,0(r2)
  800ac8:	21800217 	ldw	r6,8(r4)
  800acc:	0807adc1 	jmpi	807adc <_putc_r>

00800ad0 <_puts_r>:
  800ad0:	defff604 	addi	sp,sp,-40
  800ad4:	dc000715 	stw	r16,28(sp)
  800ad8:	2021883a 	mov	r16,r4
  800adc:	2809883a 	mov	r4,r5
  800ae0:	dc400815 	stw	r17,32(sp)
  800ae4:	dfc00915 	stw	ra,36(sp)
  800ae8:	2823883a 	mov	r17,r5
  800aec:	0800ba40 	call	800ba4 <strlen>
  800af0:	10c00044 	addi	r3,r2,1
  800af4:	d8800115 	stw	r2,4(sp)
  800af8:	008020b4 	movhi	r2,130
  800afc:	10a95604 	addi	r2,r2,-23208
  800b00:	d8800215 	stw	r2,8(sp)
  800b04:	00800044 	movi	r2,1
  800b08:	d8800315 	stw	r2,12(sp)
  800b0c:	00800084 	movi	r2,2
  800b10:	dc400015 	stw	r17,0(sp)
  800b14:	d8c00615 	stw	r3,24(sp)
  800b18:	dec00415 	stw	sp,16(sp)
  800b1c:	d8800515 	stw	r2,20(sp)
  800b20:	80000226 	beq	r16,zero,800b2c <_puts_r+0x5c>
  800b24:	80800e17 	ldw	r2,56(r16)
  800b28:	10001426 	beq	r2,zero,800b7c <_puts_r+0xac>
  800b2c:	81400217 	ldw	r5,8(r16)
  800b30:	2880030b 	ldhu	r2,12(r5)
  800b34:	10c8000c 	andi	r3,r2,8192
  800b38:	1800061e 	bne	r3,zero,800b54 <_puts_r+0x84>
  800b3c:	29001917 	ldw	r4,100(r5)
  800b40:	00f7ffc4 	movi	r3,-8193
  800b44:	10880014 	ori	r2,r2,8192
  800b48:	20c6703a 	and	r3,r4,r3
  800b4c:	2880030d 	sth	r2,12(r5)
  800b50:	28c01915 	stw	r3,100(r5)
  800b54:	d9800404 	addi	r6,sp,16
  800b58:	8009883a 	mov	r4,r16
  800b5c:	08054800 	call	805480 <__sfvwrite_r>
  800b60:	1000091e 	bne	r2,zero,800b88 <_puts_r+0xb8>
  800b64:	00800284 	movi	r2,10
  800b68:	dfc00917 	ldw	ra,36(sp)
  800b6c:	dc400817 	ldw	r17,32(sp)
  800b70:	dc000717 	ldw	r16,28(sp)
  800b74:	dec00a04 	addi	sp,sp,40
  800b78:	f800283a 	ret
  800b7c:	8009883a 	mov	r4,r16
  800b80:	0804ffc0 	call	804ffc <__sinit>
  800b84:	003fe906 	br	800b2c <__alt_mem_epcs_flash_controller_0+0xff7f7b2c>
  800b88:	00bfffc4 	movi	r2,-1
  800b8c:	003ff606 	br	800b68 <__alt_mem_epcs_flash_controller_0+0xff7f7b68>

00800b90 <puts>:
  800b90:	008020b4 	movhi	r2,130
  800b94:	10b1d504 	addi	r2,r2,-14508
  800b98:	200b883a 	mov	r5,r4
  800b9c:	11000017 	ldw	r4,0(r2)
  800ba0:	0800ad01 	jmpi	800ad0 <_puts_r>

00800ba4 <strlen>:
  800ba4:	208000cc 	andi	r2,r4,3
  800ba8:	10002026 	beq	r2,zero,800c2c <strlen+0x88>
  800bac:	20800007 	ldb	r2,0(r4)
  800bb0:	10002026 	beq	r2,zero,800c34 <strlen+0x90>
  800bb4:	2005883a 	mov	r2,r4
  800bb8:	00000206 	br	800bc4 <strlen+0x20>
  800bbc:	10c00007 	ldb	r3,0(r2)
  800bc0:	18001826 	beq	r3,zero,800c24 <strlen+0x80>
  800bc4:	10800044 	addi	r2,r2,1
  800bc8:	10c000cc 	andi	r3,r2,3
  800bcc:	183ffb1e 	bne	r3,zero,800bbc <__alt_mem_epcs_flash_controller_0+0xff7f7bbc>
  800bd0:	10c00017 	ldw	r3,0(r2)
  800bd4:	01ffbff4 	movhi	r7,65279
  800bd8:	39ffbfc4 	addi	r7,r7,-257
  800bdc:	00ca303a 	nor	r5,zero,r3
  800be0:	01a02074 	movhi	r6,32897
  800be4:	19c7883a 	add	r3,r3,r7
  800be8:	31a02004 	addi	r6,r6,-32640
  800bec:	1946703a 	and	r3,r3,r5
  800bf0:	1986703a 	and	r3,r3,r6
  800bf4:	1800091e 	bne	r3,zero,800c1c <strlen+0x78>
  800bf8:	10800104 	addi	r2,r2,4
  800bfc:	10c00017 	ldw	r3,0(r2)
  800c00:	19cb883a 	add	r5,r3,r7
  800c04:	00c6303a 	nor	r3,zero,r3
  800c08:	28c6703a 	and	r3,r5,r3
  800c0c:	1986703a 	and	r3,r3,r6
  800c10:	183ff926 	beq	r3,zero,800bf8 <__alt_mem_epcs_flash_controller_0+0xff7f7bf8>
  800c14:	00000106 	br	800c1c <strlen+0x78>
  800c18:	10800044 	addi	r2,r2,1
  800c1c:	10c00007 	ldb	r3,0(r2)
  800c20:	183ffd1e 	bne	r3,zero,800c18 <__alt_mem_epcs_flash_controller_0+0xff7f7c18>
  800c24:	1105c83a 	sub	r2,r2,r4
  800c28:	f800283a 	ret
  800c2c:	2005883a 	mov	r2,r4
  800c30:	003fe706 	br	800bd0 <__alt_mem_epcs_flash_controller_0+0xff7f7bd0>
  800c34:	0005883a 	mov	r2,zero
  800c38:	f800283a 	ret

00800c3c <___vfprintf_internal_r>:
  800c3c:	deffb804 	addi	sp,sp,-288
  800c40:	dfc04715 	stw	ra,284(sp)
  800c44:	ddc04515 	stw	r23,276(sp)
  800c48:	dd404315 	stw	r21,268(sp)
  800c4c:	d9002d15 	stw	r4,180(sp)
  800c50:	282f883a 	mov	r23,r5
  800c54:	302b883a 	mov	r21,r6
  800c58:	d9c02e15 	stw	r7,184(sp)
  800c5c:	df004615 	stw	fp,280(sp)
  800c60:	dd804415 	stw	r22,272(sp)
  800c64:	dd004215 	stw	r20,264(sp)
  800c68:	dcc04115 	stw	r19,260(sp)
  800c6c:	dc804015 	stw	r18,256(sp)
  800c70:	dc403f15 	stw	r17,252(sp)
  800c74:	dc003e15 	stw	r16,248(sp)
  800c78:	0805b7c0 	call	805b7c <_localeconv_r>
  800c7c:	10800017 	ldw	r2,0(r2)
  800c80:	1009883a 	mov	r4,r2
  800c84:	d8803415 	stw	r2,208(sp)
  800c88:	0800ba40 	call	800ba4 <strlen>
  800c8c:	d8803715 	stw	r2,220(sp)
  800c90:	d8802d17 	ldw	r2,180(sp)
  800c94:	10000226 	beq	r2,zero,800ca0 <___vfprintf_internal_r+0x64>
  800c98:	10800e17 	ldw	r2,56(r2)
  800c9c:	1000fb26 	beq	r2,zero,80108c <___vfprintf_internal_r+0x450>
  800ca0:	b880030b 	ldhu	r2,12(r23)
  800ca4:	10c8000c 	andi	r3,r2,8192
  800ca8:	1800061e 	bne	r3,zero,800cc4 <___vfprintf_internal_r+0x88>
  800cac:	b9001917 	ldw	r4,100(r23)
  800cb0:	00f7ffc4 	movi	r3,-8193
  800cb4:	10880014 	ori	r2,r2,8192
  800cb8:	20c6703a 	and	r3,r4,r3
  800cbc:	b880030d 	sth	r2,12(r23)
  800cc0:	b8c01915 	stw	r3,100(r23)
  800cc4:	10c0020c 	andi	r3,r2,8
  800cc8:	1800c326 	beq	r3,zero,800fd8 <___vfprintf_internal_r+0x39c>
  800ccc:	b8c00417 	ldw	r3,16(r23)
  800cd0:	1800c126 	beq	r3,zero,800fd8 <___vfprintf_internal_r+0x39c>
  800cd4:	1080068c 	andi	r2,r2,26
  800cd8:	00c00284 	movi	r3,10
  800cdc:	10c0c626 	beq	r2,r3,800ff8 <___vfprintf_internal_r+0x3bc>
  800ce0:	d8c00404 	addi	r3,sp,16
  800ce4:	050020b4 	movhi	r20,130
  800ce8:	d9001e04 	addi	r4,sp,120
  800cec:	a5296784 	addi	r20,r20,-23138
  800cf0:	d8c01e15 	stw	r3,120(sp)
  800cf4:	d8002015 	stw	zero,128(sp)
  800cf8:	d8001f15 	stw	zero,124(sp)
  800cfc:	d8003315 	stw	zero,204(sp)
  800d00:	d8003615 	stw	zero,216(sp)
  800d04:	d8003815 	stw	zero,224(sp)
  800d08:	1811883a 	mov	r8,r3
  800d0c:	d8003915 	stw	zero,228(sp)
  800d10:	d8003a15 	stw	zero,232(sp)
  800d14:	d8002f15 	stw	zero,188(sp)
  800d18:	d9002815 	stw	r4,160(sp)
  800d1c:	a8800007 	ldb	r2,0(r21)
  800d20:	10028b26 	beq	r2,zero,801750 <___vfprintf_internal_r+0xb14>
  800d24:	00c00944 	movi	r3,37
  800d28:	a823883a 	mov	r17,r21
  800d2c:	10c0021e 	bne	r2,r3,800d38 <___vfprintf_internal_r+0xfc>
  800d30:	00001406 	br	800d84 <___vfprintf_internal_r+0x148>
  800d34:	10c00326 	beq	r2,r3,800d44 <___vfprintf_internal_r+0x108>
  800d38:	8c400044 	addi	r17,r17,1
  800d3c:	88800007 	ldb	r2,0(r17)
  800d40:	103ffc1e 	bne	r2,zero,800d34 <__alt_mem_epcs_flash_controller_0+0xff7f7d34>
  800d44:	8d61c83a 	sub	r16,r17,r21
  800d48:	80000e26 	beq	r16,zero,800d84 <___vfprintf_internal_r+0x148>
  800d4c:	d8c02017 	ldw	r3,128(sp)
  800d50:	d8801f17 	ldw	r2,124(sp)
  800d54:	45400015 	stw	r21,0(r8)
  800d58:	1c07883a 	add	r3,r3,r16
  800d5c:	10800044 	addi	r2,r2,1
  800d60:	d8c02015 	stw	r3,128(sp)
  800d64:	44000115 	stw	r16,4(r8)
  800d68:	d8801f15 	stw	r2,124(sp)
  800d6c:	00c001c4 	movi	r3,7
  800d70:	1880a916 	blt	r3,r2,801018 <___vfprintf_internal_r+0x3dc>
  800d74:	42000204 	addi	r8,r8,8
  800d78:	d9402f17 	ldw	r5,188(sp)
  800d7c:	2c0b883a 	add	r5,r5,r16
  800d80:	d9402f15 	stw	r5,188(sp)
  800d84:	88800007 	ldb	r2,0(r17)
  800d88:	1000aa26 	beq	r2,zero,801034 <___vfprintf_internal_r+0x3f8>
  800d8c:	8d400044 	addi	r21,r17,1
  800d90:	8c400047 	ldb	r17,1(r17)
  800d94:	0021883a 	mov	r16,zero
  800d98:	00bfffc4 	movi	r2,-1
  800d9c:	0025883a 	mov	r18,zero
  800da0:	dc002905 	stb	r16,164(sp)
  800da4:	d8002785 	stb	zero,158(sp)
  800da8:	d8002b05 	stb	zero,172(sp)
  800dac:	d8802a15 	stw	r2,168(sp)
  800db0:	d8003115 	stw	zero,196(sp)
  800db4:	04c01604 	movi	r19,88
  800db8:	05800244 	movi	r22,9
  800dbc:	9021883a 	mov	r16,r18
  800dc0:	4039883a 	mov	fp,r8
  800dc4:	ad400044 	addi	r21,r21,1
  800dc8:	88bff804 	addi	r2,r17,-32
  800dcc:	98833236 	bltu	r19,r2,801a98 <___vfprintf_internal_r+0xe5c>
  800dd0:	100490ba 	slli	r2,r2,2
  800dd4:	00c02034 	movhi	r3,128
  800dd8:	18c37a04 	addi	r3,r3,3560
  800ddc:	10c5883a 	add	r2,r2,r3
  800de0:	10800017 	ldw	r2,0(r2)
  800de4:	1000683a 	jmp	r2
  800de8:	00801990 	cmplti	r2,zero,102
  800dec:	00801a98 	cmpnei	r2,zero,106
  800df0:	00801a98 	cmpnei	r2,zero,106
  800df4:	008019b0 	cmpltui	r2,zero,102
  800df8:	00801a98 	cmpnei	r2,zero,106
  800dfc:	00801a98 	cmpnei	r2,zero,106
  800e00:	00801a98 	cmpnei	r2,zero,106
  800e04:	00801a98 	cmpnei	r2,zero,106
  800e08:	00801a98 	cmpnei	r2,zero,106
  800e0c:	00801a98 	cmpnei	r2,zero,106
  800e10:	00801098 	cmpnei	r2,zero,66
  800e14:	008018a0 	cmpeqi	r2,zero,98
  800e18:	00801a98 	cmpnei	r2,zero,106
  800e1c:	00800f5c 	xori	r2,zero,61
  800e20:	008010bc 	xorhi	r2,zero,66
  800e24:	00801a98 	cmpnei	r2,zero,106
  800e28:	0080110c 	andi	r2,zero,68
  800e2c:	00801118 	cmpnei	r2,zero,68
  800e30:	00801118 	cmpnei	r2,zero,68
  800e34:	00801118 	cmpnei	r2,zero,68
  800e38:	00801118 	cmpnei	r2,zero,68
  800e3c:	00801118 	cmpnei	r2,zero,68
  800e40:	00801118 	cmpnei	r2,zero,68
  800e44:	00801118 	cmpnei	r2,zero,68
  800e48:	00801118 	cmpnei	r2,zero,68
  800e4c:	00801118 	cmpnei	r2,zero,68
  800e50:	00801a98 	cmpnei	r2,zero,106
  800e54:	00801a98 	cmpnei	r2,zero,106
  800e58:	00801a98 	cmpnei	r2,zero,106
  800e5c:	00801a98 	cmpnei	r2,zero,106
  800e60:	00801a98 	cmpnei	r2,zero,106
  800e64:	00801a98 	cmpnei	r2,zero,106
  800e68:	00801a98 	cmpnei	r2,zero,106
  800e6c:	00801a98 	cmpnei	r2,zero,106
  800e70:	00801a98 	cmpnei	r2,zero,106
  800e74:	00801a98 	cmpnei	r2,zero,106
  800e78:	00801154 	movui	r2,69
  800e7c:	0080121c 	xori	r2,zero,72
  800e80:	00801a98 	cmpnei	r2,zero,106
  800e84:	0080121c 	xori	r2,zero,72
  800e88:	00801a98 	cmpnei	r2,zero,106
  800e8c:	00801a98 	cmpnei	r2,zero,106
  800e90:	00801a98 	cmpnei	r2,zero,106
  800e94:	00801a98 	cmpnei	r2,zero,106
  800e98:	008012c8 	cmpgei	r2,zero,75
  800e9c:	00801a98 	cmpnei	r2,zero,106
  800ea0:	00801a98 	cmpnei	r2,zero,106
  800ea4:	008012d4 	movui	r2,75
  800ea8:	00801a98 	cmpnei	r2,zero,106
  800eac:	00801a98 	cmpnei	r2,zero,106
  800eb0:	00801a98 	cmpnei	r2,zero,106
  800eb4:	00801a98 	cmpnei	r2,zero,106
  800eb8:	00801a98 	cmpnei	r2,zero,106
  800ebc:	00801758 	cmpnei	r2,zero,93
  800ec0:	00801a98 	cmpnei	r2,zero,106
  800ec4:	00801a98 	cmpnei	r2,zero,106
  800ec8:	008017c4 	movi	r2,95
  800ecc:	00801a98 	cmpnei	r2,zero,106
  800ed0:	00801a98 	cmpnei	r2,zero,106
  800ed4:	00801a98 	cmpnei	r2,zero,106
  800ed8:	00801a98 	cmpnei	r2,zero,106
  800edc:	00801a98 	cmpnei	r2,zero,106
  800ee0:	00801a98 	cmpnei	r2,zero,106
  800ee4:	00801a98 	cmpnei	r2,zero,106
  800ee8:	00801a98 	cmpnei	r2,zero,106
  800eec:	00801a98 	cmpnei	r2,zero,106
  800ef0:	00801a98 	cmpnei	r2,zero,106
  800ef4:	00801a3c 	xorhi	r2,zero,104
  800ef8:	008019bc 	xorhi	r2,zero,102
  800efc:	0080121c 	xori	r2,zero,72
  800f00:	0080121c 	xori	r2,zero,72
  800f04:	0080121c 	xori	r2,zero,72
  800f08:	008019dc 	xori	r2,zero,103
  800f0c:	008019bc 	xorhi	r2,zero,102
  800f10:	00801a98 	cmpnei	r2,zero,106
  800f14:	00801a98 	cmpnei	r2,zero,106
  800f18:	008019e8 	cmpgeui	r2,zero,103
  800f1c:	00801a98 	cmpnei	r2,zero,106
  800f20:	008019fc 	xorhi	r2,zero,103
  800f24:	00801880 	call	80188 <OSCtxSw_SWITCH_PC+0x80148>
  800f28:	00800f68 	cmpgeui	r2,zero,61
  800f2c:	008018b8 	rdprs	r2,zero,98
  800f30:	00801a98 	cmpnei	r2,zero,106
  800f34:	008018c4 	movi	r2,99
  800f38:	00801a98 	cmpnei	r2,zero,106
  800f3c:	00801928 	cmpgeui	r2,zero,100
  800f40:	00801a98 	cmpnei	r2,zero,106
  800f44:	00801a98 	cmpnei	r2,zero,106
  800f48:	00801948 	cmpgei	r2,zero,101
  800f4c:	d8c03117 	ldw	r3,196(sp)
  800f50:	d8802e15 	stw	r2,184(sp)
  800f54:	00c7c83a 	sub	r3,zero,r3
  800f58:	d8c03115 	stw	r3,196(sp)
  800f5c:	84000114 	ori	r16,r16,4
  800f60:	ac400007 	ldb	r17,0(r21)
  800f64:	003f9706 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  800f68:	00800c04 	movi	r2,48
  800f6c:	d8802705 	stb	r2,156(sp)
  800f70:	00801e04 	movi	r2,120
  800f74:	d8802745 	stb	r2,157(sp)
  800f78:	d9002a17 	ldw	r4,168(sp)
  800f7c:	d8802e17 	ldw	r2,184(sp)
  800f80:	d8002785 	stb	zero,158(sp)
  800f84:	e011883a 	mov	r8,fp
  800f88:	10c00104 	addi	r3,r2,4
  800f8c:	14c00017 	ldw	r19,0(r2)
  800f90:	002d883a 	mov	r22,zero
  800f94:	80800094 	ori	r2,r16,2
  800f98:	2002ca16 	blt	r4,zero,801ac4 <___vfprintf_internal_r+0xe88>
  800f9c:	00bfdfc4 	movi	r2,-129
  800fa0:	80a4703a 	and	r18,r16,r2
  800fa4:	d8c02e15 	stw	r3,184(sp)
  800fa8:	94800094 	ori	r18,r18,2
  800fac:	9802b41e 	bne	r19,zero,801a80 <___vfprintf_internal_r+0xe44>
  800fb0:	014020b4 	movhi	r5,130
  800fb4:	29696004 	addi	r5,r5,-23168
  800fb8:	d9403915 	stw	r5,228(sp)
  800fbc:	04401e04 	movi	r17,120
  800fc0:	d8802a17 	ldw	r2,168(sp)
  800fc4:	0039883a 	mov	fp,zero
  800fc8:	1001fa26 	beq	r2,zero,8017b4 <___vfprintf_internal_r+0xb78>
  800fcc:	0027883a 	mov	r19,zero
  800fd0:	002d883a 	mov	r22,zero
  800fd4:	00021906 	br	80183c <___vfprintf_internal_r+0xc00>
  800fd8:	d9002d17 	ldw	r4,180(sp)
  800fdc:	b80b883a 	mov	r5,r23
  800fe0:	0802ff00 	call	802ff0 <__swsetup_r>
  800fe4:	1005dc1e 	bne	r2,zero,802758 <___vfprintf_internal_r+0x1b1c>
  800fe8:	b880030b 	ldhu	r2,12(r23)
  800fec:	00c00284 	movi	r3,10
  800ff0:	1080068c 	andi	r2,r2,26
  800ff4:	10ff3a1e 	bne	r2,r3,800ce0 <__alt_mem_epcs_flash_controller_0+0xff7f7ce0>
  800ff8:	b880038f 	ldh	r2,14(r23)
  800ffc:	103f3816 	blt	r2,zero,800ce0 <__alt_mem_epcs_flash_controller_0+0xff7f7ce0>
  801000:	d9c02e17 	ldw	r7,184(sp)
  801004:	d9002d17 	ldw	r4,180(sp)
  801008:	a80d883a 	mov	r6,r21
  80100c:	b80b883a 	mov	r5,r23
  801010:	0802f340 	call	802f34 <__sbprintf>
  801014:	00001106 	br	80105c <___vfprintf_internal_r+0x420>
  801018:	d9002d17 	ldw	r4,180(sp)
  80101c:	d9801e04 	addi	r6,sp,120
  801020:	b80b883a 	mov	r5,r23
  801024:	08085840 	call	808584 <__sprint_r>
  801028:	1000081e 	bne	r2,zero,80104c <___vfprintf_internal_r+0x410>
  80102c:	da000404 	addi	r8,sp,16
  801030:	003f5106 	br	800d78 <__alt_mem_epcs_flash_controller_0+0xff7f7d78>
  801034:	d8802017 	ldw	r2,128(sp)
  801038:	10000426 	beq	r2,zero,80104c <___vfprintf_internal_r+0x410>
  80103c:	d9002d17 	ldw	r4,180(sp)
  801040:	d9801e04 	addi	r6,sp,120
  801044:	b80b883a 	mov	r5,r23
  801048:	08085840 	call	808584 <__sprint_r>
  80104c:	b880030b 	ldhu	r2,12(r23)
  801050:	1080100c 	andi	r2,r2,64
  801054:	1005c01e 	bne	r2,zero,802758 <___vfprintf_internal_r+0x1b1c>
  801058:	d8802f17 	ldw	r2,188(sp)
  80105c:	dfc04717 	ldw	ra,284(sp)
  801060:	df004617 	ldw	fp,280(sp)
  801064:	ddc04517 	ldw	r23,276(sp)
  801068:	dd804417 	ldw	r22,272(sp)
  80106c:	dd404317 	ldw	r21,268(sp)
  801070:	dd004217 	ldw	r20,264(sp)
  801074:	dcc04117 	ldw	r19,260(sp)
  801078:	dc804017 	ldw	r18,256(sp)
  80107c:	dc403f17 	ldw	r17,252(sp)
  801080:	dc003e17 	ldw	r16,248(sp)
  801084:	dec04804 	addi	sp,sp,288
  801088:	f800283a 	ret
  80108c:	d9002d17 	ldw	r4,180(sp)
  801090:	0804ffc0 	call	804ffc <__sinit>
  801094:	003f0206 	br	800ca0 <__alt_mem_epcs_flash_controller_0+0xff7f7ca0>
  801098:	d9002e17 	ldw	r4,184(sp)
  80109c:	d9402e17 	ldw	r5,184(sp)
  8010a0:	21000017 	ldw	r4,0(r4)
  8010a4:	28800104 	addi	r2,r5,4
  8010a8:	d9003115 	stw	r4,196(sp)
  8010ac:	203fa716 	blt	r4,zero,800f4c <__alt_mem_epcs_flash_controller_0+0xff7f7f4c>
  8010b0:	d8802e15 	stw	r2,184(sp)
  8010b4:	ac400007 	ldb	r17,0(r21)
  8010b8:	003f4206 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8010bc:	ac400007 	ldb	r17,0(r21)
  8010c0:	01000a84 	movi	r4,42
  8010c4:	a8c00044 	addi	r3,r21,1
  8010c8:	89075826 	beq	r17,r4,802e2c <___vfprintf_internal_r+0x21f0>
  8010cc:	8cbff404 	addi	r18,r17,-48
  8010d0:	b486ae36 	bltu	r22,r18,802b8c <___vfprintf_internal_r+0x1f50>
  8010d4:	0009883a 	mov	r4,zero
  8010d8:	1823883a 	mov	r17,r3
  8010dc:	01400284 	movi	r5,10
  8010e0:	080b2400 	call	80b240 <__mulsi3>
  8010e4:	88c00007 	ldb	r3,0(r17)
  8010e8:	1489883a 	add	r4,r2,r18
  8010ec:	8d400044 	addi	r21,r17,1
  8010f0:	1cbff404 	addi	r18,r3,-48
  8010f4:	a823883a 	mov	r17,r21
  8010f8:	b4bff82e 	bgeu	r22,r18,8010dc <__alt_mem_epcs_flash_controller_0+0xff7f80dc>
  8010fc:	1823883a 	mov	r17,r3
  801100:	2005f616 	blt	r4,zero,8028dc <___vfprintf_internal_r+0x1ca0>
  801104:	d9002a15 	stw	r4,168(sp)
  801108:	003f2f06 	br	800dc8 <__alt_mem_epcs_flash_controller_0+0xff7f7dc8>
  80110c:	84002014 	ori	r16,r16,128
  801110:	ac400007 	ldb	r17,0(r21)
  801114:	003f2b06 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  801118:	8cbff404 	addi	r18,r17,-48
  80111c:	d8003115 	stw	zero,196(sp)
  801120:	0009883a 	mov	r4,zero
  801124:	a823883a 	mov	r17,r21
  801128:	01400284 	movi	r5,10
  80112c:	080b2400 	call	80b240 <__mulsi3>
  801130:	88c00007 	ldb	r3,0(r17)
  801134:	9089883a 	add	r4,r18,r2
  801138:	ad400044 	addi	r21,r21,1
  80113c:	1cbff404 	addi	r18,r3,-48
  801140:	a823883a 	mov	r17,r21
  801144:	b4bff82e 	bgeu	r22,r18,801128 <__alt_mem_epcs_flash_controller_0+0xff7f8128>
  801148:	1823883a 	mov	r17,r3
  80114c:	d9003115 	stw	r4,196(sp)
  801150:	003f1d06 	br	800dc8 <__alt_mem_epcs_flash_controller_0+0xff7f7dc8>
  801154:	8025883a 	mov	r18,r16
  801158:	dc002903 	ldbu	r16,164(sp)
  80115c:	e011883a 	mov	r8,fp
  801160:	84003fcc 	andi	r16,r16,255
  801164:	8007531e 	bne	r16,zero,802eb4 <___vfprintf_internal_r+0x2278>
  801168:	94800414 	ori	r18,r18,16
  80116c:	9080080c 	andi	r2,r18,32
  801170:	1003a326 	beq	r2,zero,802000 <___vfprintf_internal_r+0x13c4>
  801174:	d9002e17 	ldw	r4,184(sp)
  801178:	20800117 	ldw	r2,4(r4)
  80117c:	24c00017 	ldw	r19,0(r4)
  801180:	21000204 	addi	r4,r4,8
  801184:	d9002e15 	stw	r4,184(sp)
  801188:	102d883a 	mov	r22,r2
  80118c:	10047316 	blt	r2,zero,80235c <___vfprintf_internal_r+0x1720>
  801190:	d9002a17 	ldw	r4,168(sp)
  801194:	df002783 	ldbu	fp,158(sp)
  801198:	2003e416 	blt	r4,zero,80212c <___vfprintf_internal_r+0x14f0>
  80119c:	00ffdfc4 	movi	r3,-129
  8011a0:	9d84b03a 	or	r2,r19,r22
  8011a4:	90e4703a 	and	r18,r18,r3
  8011a8:	10018026 	beq	r2,zero,8017ac <___vfprintf_internal_r+0xb70>
  8011ac:	b003ab26 	beq	r22,zero,80205c <___vfprintf_internal_r+0x1420>
  8011b0:	dc402915 	stw	r17,164(sp)
  8011b4:	dc001e04 	addi	r16,sp,120
  8011b8:	b023883a 	mov	r17,r22
  8011bc:	402d883a 	mov	r22,r8
  8011c0:	9809883a 	mov	r4,r19
  8011c4:	880b883a 	mov	r5,r17
  8011c8:	01800284 	movi	r6,10
  8011cc:	000f883a 	mov	r7,zero
  8011d0:	080aac80 	call	80aac8 <__umoddi3>
  8011d4:	10800c04 	addi	r2,r2,48
  8011d8:	843fffc4 	addi	r16,r16,-1
  8011dc:	9809883a 	mov	r4,r19
  8011e0:	880b883a 	mov	r5,r17
  8011e4:	80800005 	stb	r2,0(r16)
  8011e8:	01800284 	movi	r6,10
  8011ec:	000f883a 	mov	r7,zero
  8011f0:	080a4cc0 	call	80a4cc <__udivdi3>
  8011f4:	1027883a 	mov	r19,r2
  8011f8:	10c4b03a 	or	r2,r2,r3
  8011fc:	1823883a 	mov	r17,r3
  801200:	103fef1e 	bne	r2,zero,8011c0 <__alt_mem_epcs_flash_controller_0+0xff7f81c0>
  801204:	d8c02817 	ldw	r3,160(sp)
  801208:	dc402917 	ldw	r17,164(sp)
  80120c:	b011883a 	mov	r8,r22
  801210:	1c07c83a 	sub	r3,r3,r16
  801214:	d8c02b15 	stw	r3,172(sp)
  801218:	00005f06 	br	801398 <___vfprintf_internal_r+0x75c>
  80121c:	8025883a 	mov	r18,r16
  801220:	dc002903 	ldbu	r16,164(sp)
  801224:	e011883a 	mov	r8,fp
  801228:	84003fcc 	andi	r16,r16,255
  80122c:	80071e1e 	bne	r16,zero,802ea8 <___vfprintf_internal_r+0x226c>
  801230:	9080020c 	andi	r2,r18,8
  801234:	1004af26 	beq	r2,zero,8024f4 <___vfprintf_internal_r+0x18b8>
  801238:	d9002e17 	ldw	r4,184(sp)
  80123c:	d9402e17 	ldw	r5,184(sp)
  801240:	d8802e17 	ldw	r2,184(sp)
  801244:	21000017 	ldw	r4,0(r4)
  801248:	29400117 	ldw	r5,4(r5)
  80124c:	10800204 	addi	r2,r2,8
  801250:	d9003615 	stw	r4,216(sp)
  801254:	d9403815 	stw	r5,224(sp)
  801258:	d8802e15 	stw	r2,184(sp)
  80125c:	d9003617 	ldw	r4,216(sp)
  801260:	d9403817 	ldw	r5,224(sp)
  801264:	da003d15 	stw	r8,244(sp)
  801268:	04000044 	movi	r16,1
  80126c:	08081a80 	call	8081a8 <__fpclassifyd>
  801270:	da003d17 	ldw	r8,244(sp)
  801274:	1404441e 	bne	r2,r16,802388 <___vfprintf_internal_r+0x174c>
  801278:	d9003617 	ldw	r4,216(sp)
  80127c:	d9403817 	ldw	r5,224(sp)
  801280:	000d883a 	mov	r6,zero
  801284:	000f883a 	mov	r7,zero
  801288:	080c6480 	call	80c648 <__ledf2>
  80128c:	da003d17 	ldw	r8,244(sp)
  801290:	1005e316 	blt	r2,zero,802a20 <___vfprintf_internal_r+0x1de4>
  801294:	df002783 	ldbu	fp,158(sp)
  801298:	008011c4 	movi	r2,71
  80129c:	1445580e 	bge	r2,r17,802800 <___vfprintf_internal_r+0x1bc4>
  8012a0:	040020b4 	movhi	r16,130
  8012a4:	84295804 	addi	r16,r16,-23200
  8012a8:	00c000c4 	movi	r3,3
  8012ac:	00bfdfc4 	movi	r2,-129
  8012b0:	d8c02915 	stw	r3,164(sp)
  8012b4:	90a4703a 	and	r18,r18,r2
  8012b8:	d8c02b15 	stw	r3,172(sp)
  8012bc:	d8002a15 	stw	zero,168(sp)
  8012c0:	d8003215 	stw	zero,200(sp)
  8012c4:	00003a06 	br	8013b0 <___vfprintf_internal_r+0x774>
  8012c8:	84000214 	ori	r16,r16,8
  8012cc:	ac400007 	ldb	r17,0(r21)
  8012d0:	003ebc06 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8012d4:	8025883a 	mov	r18,r16
  8012d8:	dc002903 	ldbu	r16,164(sp)
  8012dc:	e011883a 	mov	r8,fp
  8012e0:	84003fcc 	andi	r16,r16,255
  8012e4:	8007001e 	bne	r16,zero,802ee8 <___vfprintf_internal_r+0x22ac>
  8012e8:	94800414 	ori	r18,r18,16
  8012ec:	9080080c 	andi	r2,r18,32
  8012f0:	1002fa26 	beq	r2,zero,801edc <___vfprintf_internal_r+0x12a0>
  8012f4:	d9002e17 	ldw	r4,184(sp)
  8012f8:	d9402a17 	ldw	r5,168(sp)
  8012fc:	d8002785 	stb	zero,158(sp)
  801300:	20800204 	addi	r2,r4,8
  801304:	24c00017 	ldw	r19,0(r4)
  801308:	25800117 	ldw	r22,4(r4)
  80130c:	2804b116 	blt	r5,zero,8025d4 <___vfprintf_internal_r+0x1998>
  801310:	013fdfc4 	movi	r4,-129
  801314:	9d86b03a 	or	r3,r19,r22
  801318:	d8802e15 	stw	r2,184(sp)
  80131c:	9124703a 	and	r18,r18,r4
  801320:	1802fb1e 	bne	r3,zero,801f10 <___vfprintf_internal_r+0x12d4>
  801324:	d8c02a17 	ldw	r3,168(sp)
  801328:	0039883a 	mov	fp,zero
  80132c:	1805e526 	beq	r3,zero,802ac4 <___vfprintf_internal_r+0x1e88>
  801330:	0027883a 	mov	r19,zero
  801334:	002d883a 	mov	r22,zero
  801338:	dc001e04 	addi	r16,sp,120
  80133c:	9806d0fa 	srli	r3,r19,3
  801340:	b008977a 	slli	r4,r22,29
  801344:	b02cd0fa 	srli	r22,r22,3
  801348:	9cc001cc 	andi	r19,r19,7
  80134c:	98800c04 	addi	r2,r19,48
  801350:	843fffc4 	addi	r16,r16,-1
  801354:	20e6b03a 	or	r19,r4,r3
  801358:	80800005 	stb	r2,0(r16)
  80135c:	9d86b03a 	or	r3,r19,r22
  801360:	183ff61e 	bne	r3,zero,80133c <__alt_mem_epcs_flash_controller_0+0xff7f833c>
  801364:	90c0004c 	andi	r3,r18,1
  801368:	18014126 	beq	r3,zero,801870 <___vfprintf_internal_r+0xc34>
  80136c:	10803fcc 	andi	r2,r2,255
  801370:	1080201c 	xori	r2,r2,128
  801374:	10bfe004 	addi	r2,r2,-128
  801378:	00c00c04 	movi	r3,48
  80137c:	10c13c26 	beq	r2,r3,801870 <___vfprintf_internal_r+0xc34>
  801380:	80ffffc5 	stb	r3,-1(r16)
  801384:	d8c02817 	ldw	r3,160(sp)
  801388:	80bfffc4 	addi	r2,r16,-1
  80138c:	1021883a 	mov	r16,r2
  801390:	1887c83a 	sub	r3,r3,r2
  801394:	d8c02b15 	stw	r3,172(sp)
  801398:	d8802b17 	ldw	r2,172(sp)
  80139c:	d9002a17 	ldw	r4,168(sp)
  8013a0:	1100010e 	bge	r2,r4,8013a8 <___vfprintf_internal_r+0x76c>
  8013a4:	2005883a 	mov	r2,r4
  8013a8:	d8802915 	stw	r2,164(sp)
  8013ac:	d8003215 	stw	zero,200(sp)
  8013b0:	e7003fcc 	andi	fp,fp,255
  8013b4:	e700201c 	xori	fp,fp,128
  8013b8:	e73fe004 	addi	fp,fp,-128
  8013bc:	e0000326 	beq	fp,zero,8013cc <___vfprintf_internal_r+0x790>
  8013c0:	d8c02917 	ldw	r3,164(sp)
  8013c4:	18c00044 	addi	r3,r3,1
  8013c8:	d8c02915 	stw	r3,164(sp)
  8013cc:	90c0008c 	andi	r3,r18,2
  8013d0:	d8c02c15 	stw	r3,176(sp)
  8013d4:	18000326 	beq	r3,zero,8013e4 <___vfprintf_internal_r+0x7a8>
  8013d8:	d8c02917 	ldw	r3,164(sp)
  8013dc:	18c00084 	addi	r3,r3,2
  8013e0:	d8c02915 	stw	r3,164(sp)
  8013e4:	90c0210c 	andi	r3,r18,132
  8013e8:	d8c03015 	stw	r3,192(sp)
  8013ec:	1801c51e 	bne	r3,zero,801b04 <___vfprintf_internal_r+0xec8>
  8013f0:	d9003117 	ldw	r4,196(sp)
  8013f4:	d8c02917 	ldw	r3,164(sp)
  8013f8:	20e7c83a 	sub	r19,r4,r3
  8013fc:	04c1c10e 	bge	zero,r19,801b04 <___vfprintf_internal_r+0xec8>
  801400:	02400404 	movi	r9,16
  801404:	d8c02017 	ldw	r3,128(sp)
  801408:	d8801f17 	ldw	r2,124(sp)
  80140c:	4cc52f0e 	bge	r9,r19,8028cc <___vfprintf_internal_r+0x1c90>
  801410:	014020b4 	movhi	r5,130
  801414:	29696b84 	addi	r5,r5,-23122
  801418:	dc403b15 	stw	r17,236(sp)
  80141c:	d9403515 	stw	r5,212(sp)
  801420:	9823883a 	mov	r17,r19
  801424:	482d883a 	mov	r22,r9
  801428:	9027883a 	mov	r19,r18
  80142c:	070001c4 	movi	fp,7
  801430:	8025883a 	mov	r18,r16
  801434:	dc002d17 	ldw	r16,180(sp)
  801438:	00000306 	br	801448 <___vfprintf_internal_r+0x80c>
  80143c:	8c7ffc04 	addi	r17,r17,-16
  801440:	42000204 	addi	r8,r8,8
  801444:	b440130e 	bge	r22,r17,801494 <___vfprintf_internal_r+0x858>
  801448:	010020b4 	movhi	r4,130
  80144c:	18c00404 	addi	r3,r3,16
  801450:	10800044 	addi	r2,r2,1
  801454:	21296b84 	addi	r4,r4,-23122
  801458:	41000015 	stw	r4,0(r8)
  80145c:	45800115 	stw	r22,4(r8)
  801460:	d8c02015 	stw	r3,128(sp)
  801464:	d8801f15 	stw	r2,124(sp)
  801468:	e0bff40e 	bge	fp,r2,80143c <__alt_mem_epcs_flash_controller_0+0xff7f843c>
  80146c:	d9801e04 	addi	r6,sp,120
  801470:	b80b883a 	mov	r5,r23
  801474:	8009883a 	mov	r4,r16
  801478:	08085840 	call	808584 <__sprint_r>
  80147c:	103ef31e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801480:	8c7ffc04 	addi	r17,r17,-16
  801484:	d8c02017 	ldw	r3,128(sp)
  801488:	d8801f17 	ldw	r2,124(sp)
  80148c:	da000404 	addi	r8,sp,16
  801490:	b47fed16 	blt	r22,r17,801448 <__alt_mem_epcs_flash_controller_0+0xff7f8448>
  801494:	9021883a 	mov	r16,r18
  801498:	9825883a 	mov	r18,r19
  80149c:	8827883a 	mov	r19,r17
  8014a0:	dc403b17 	ldw	r17,236(sp)
  8014a4:	d9403517 	ldw	r5,212(sp)
  8014a8:	98c7883a 	add	r3,r19,r3
  8014ac:	10800044 	addi	r2,r2,1
  8014b0:	41400015 	stw	r5,0(r8)
  8014b4:	44c00115 	stw	r19,4(r8)
  8014b8:	d8c02015 	stw	r3,128(sp)
  8014bc:	d8801f15 	stw	r2,124(sp)
  8014c0:	010001c4 	movi	r4,7
  8014c4:	2082c516 	blt	r4,r2,801fdc <___vfprintf_internal_r+0x13a0>
  8014c8:	df002787 	ldb	fp,158(sp)
  8014cc:	42000204 	addi	r8,r8,8
  8014d0:	e0000c26 	beq	fp,zero,801504 <___vfprintf_internal_r+0x8c8>
  8014d4:	d8801f17 	ldw	r2,124(sp)
  8014d8:	d9002784 	addi	r4,sp,158
  8014dc:	18c00044 	addi	r3,r3,1
  8014e0:	10800044 	addi	r2,r2,1
  8014e4:	41000015 	stw	r4,0(r8)
  8014e8:	01000044 	movi	r4,1
  8014ec:	41000115 	stw	r4,4(r8)
  8014f0:	d8c02015 	stw	r3,128(sp)
  8014f4:	d8801f15 	stw	r2,124(sp)
  8014f8:	010001c4 	movi	r4,7
  8014fc:	20825e16 	blt	r4,r2,801e78 <___vfprintf_internal_r+0x123c>
  801500:	42000204 	addi	r8,r8,8
  801504:	d8802c17 	ldw	r2,176(sp)
  801508:	10000c26 	beq	r2,zero,80153c <___vfprintf_internal_r+0x900>
  80150c:	d8801f17 	ldw	r2,124(sp)
  801510:	d9002704 	addi	r4,sp,156
  801514:	18c00084 	addi	r3,r3,2
  801518:	10800044 	addi	r2,r2,1
  80151c:	41000015 	stw	r4,0(r8)
  801520:	01000084 	movi	r4,2
  801524:	41000115 	stw	r4,4(r8)
  801528:	d8c02015 	stw	r3,128(sp)
  80152c:	d8801f15 	stw	r2,124(sp)
  801530:	010001c4 	movi	r4,7
  801534:	20825816 	blt	r4,r2,801e98 <___vfprintf_internal_r+0x125c>
  801538:	42000204 	addi	r8,r8,8
  80153c:	d9003017 	ldw	r4,192(sp)
  801540:	00802004 	movi	r2,128
  801544:	2081bb26 	beq	r4,r2,801c34 <___vfprintf_internal_r+0xff8>
  801548:	d9402a17 	ldw	r5,168(sp)
  80154c:	d8802b17 	ldw	r2,172(sp)
  801550:	28adc83a 	sub	r22,r5,r2
  801554:	0580310e 	bge	zero,r22,80161c <___vfprintf_internal_r+0x9e0>
  801558:	07000404 	movi	fp,16
  80155c:	d8801f17 	ldw	r2,124(sp)
  801560:	e584360e 	bge	fp,r22,80263c <___vfprintf_internal_r+0x1a00>
  801564:	014020b4 	movhi	r5,130
  801568:	29696784 	addi	r5,r5,-23138
  80156c:	dc402a15 	stw	r17,168(sp)
  801570:	d9402c15 	stw	r5,176(sp)
  801574:	b023883a 	mov	r17,r22
  801578:	04c001c4 	movi	r19,7
  80157c:	a82d883a 	mov	r22,r21
  801580:	902b883a 	mov	r21,r18
  801584:	8025883a 	mov	r18,r16
  801588:	dc002d17 	ldw	r16,180(sp)
  80158c:	00000306 	br	80159c <___vfprintf_internal_r+0x960>
  801590:	8c7ffc04 	addi	r17,r17,-16
  801594:	42000204 	addi	r8,r8,8
  801598:	e440110e 	bge	fp,r17,8015e0 <___vfprintf_internal_r+0x9a4>
  80159c:	18c00404 	addi	r3,r3,16
  8015a0:	10800044 	addi	r2,r2,1
  8015a4:	45000015 	stw	r20,0(r8)
  8015a8:	47000115 	stw	fp,4(r8)
  8015ac:	d8c02015 	stw	r3,128(sp)
  8015b0:	d8801f15 	stw	r2,124(sp)
  8015b4:	98bff60e 	bge	r19,r2,801590 <__alt_mem_epcs_flash_controller_0+0xff7f8590>
  8015b8:	d9801e04 	addi	r6,sp,120
  8015bc:	b80b883a 	mov	r5,r23
  8015c0:	8009883a 	mov	r4,r16
  8015c4:	08085840 	call	808584 <__sprint_r>
  8015c8:	103ea01e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  8015cc:	8c7ffc04 	addi	r17,r17,-16
  8015d0:	d8c02017 	ldw	r3,128(sp)
  8015d4:	d8801f17 	ldw	r2,124(sp)
  8015d8:	da000404 	addi	r8,sp,16
  8015dc:	e47fef16 	blt	fp,r17,80159c <__alt_mem_epcs_flash_controller_0+0xff7f859c>
  8015e0:	9021883a 	mov	r16,r18
  8015e4:	a825883a 	mov	r18,r21
  8015e8:	b02b883a 	mov	r21,r22
  8015ec:	882d883a 	mov	r22,r17
  8015f0:	dc402a17 	ldw	r17,168(sp)
  8015f4:	d9002c17 	ldw	r4,176(sp)
  8015f8:	1d87883a 	add	r3,r3,r22
  8015fc:	10800044 	addi	r2,r2,1
  801600:	41000015 	stw	r4,0(r8)
  801604:	45800115 	stw	r22,4(r8)
  801608:	d8c02015 	stw	r3,128(sp)
  80160c:	d8801f15 	stw	r2,124(sp)
  801610:	010001c4 	movi	r4,7
  801614:	20821016 	blt	r4,r2,801e58 <___vfprintf_internal_r+0x121c>
  801618:	42000204 	addi	r8,r8,8
  80161c:	9080400c 	andi	r2,r18,256
  801620:	10013a1e 	bne	r2,zero,801b0c <___vfprintf_internal_r+0xed0>
  801624:	d9402b17 	ldw	r5,172(sp)
  801628:	d8801f17 	ldw	r2,124(sp)
  80162c:	44000015 	stw	r16,0(r8)
  801630:	1947883a 	add	r3,r3,r5
  801634:	10800044 	addi	r2,r2,1
  801638:	41400115 	stw	r5,4(r8)
  80163c:	d8c02015 	stw	r3,128(sp)
  801640:	d8801f15 	stw	r2,124(sp)
  801644:	010001c4 	movi	r4,7
  801648:	2081f516 	blt	r4,r2,801e20 <___vfprintf_internal_r+0x11e4>
  80164c:	42000204 	addi	r8,r8,8
  801650:	9480010c 	andi	r18,r18,4
  801654:	90003226 	beq	r18,zero,801720 <___vfprintf_internal_r+0xae4>
  801658:	d9403117 	ldw	r5,196(sp)
  80165c:	d8802917 	ldw	r2,164(sp)
  801660:	28a1c83a 	sub	r16,r5,r2
  801664:	04002e0e 	bge	zero,r16,801720 <___vfprintf_internal_r+0xae4>
  801668:	04400404 	movi	r17,16
  80166c:	d8801f17 	ldw	r2,124(sp)
  801670:	8c04c40e 	bge	r17,r16,802984 <___vfprintf_internal_r+0x1d48>
  801674:	014020b4 	movhi	r5,130
  801678:	29696b84 	addi	r5,r5,-23122
  80167c:	d9403515 	stw	r5,212(sp)
  801680:	048001c4 	movi	r18,7
  801684:	dcc02d17 	ldw	r19,180(sp)
  801688:	00000306 	br	801698 <___vfprintf_internal_r+0xa5c>
  80168c:	843ffc04 	addi	r16,r16,-16
  801690:	42000204 	addi	r8,r8,8
  801694:	8c00130e 	bge	r17,r16,8016e4 <___vfprintf_internal_r+0xaa8>
  801698:	010020b4 	movhi	r4,130
  80169c:	18c00404 	addi	r3,r3,16
  8016a0:	10800044 	addi	r2,r2,1
  8016a4:	21296b84 	addi	r4,r4,-23122
  8016a8:	41000015 	stw	r4,0(r8)
  8016ac:	44400115 	stw	r17,4(r8)
  8016b0:	d8c02015 	stw	r3,128(sp)
  8016b4:	d8801f15 	stw	r2,124(sp)
  8016b8:	90bff40e 	bge	r18,r2,80168c <__alt_mem_epcs_flash_controller_0+0xff7f868c>
  8016bc:	d9801e04 	addi	r6,sp,120
  8016c0:	b80b883a 	mov	r5,r23
  8016c4:	9809883a 	mov	r4,r19
  8016c8:	08085840 	call	808584 <__sprint_r>
  8016cc:	103e5f1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  8016d0:	843ffc04 	addi	r16,r16,-16
  8016d4:	d8c02017 	ldw	r3,128(sp)
  8016d8:	d8801f17 	ldw	r2,124(sp)
  8016dc:	da000404 	addi	r8,sp,16
  8016e0:	8c3fed16 	blt	r17,r16,801698 <__alt_mem_epcs_flash_controller_0+0xff7f8698>
  8016e4:	d9403517 	ldw	r5,212(sp)
  8016e8:	1c07883a 	add	r3,r3,r16
  8016ec:	10800044 	addi	r2,r2,1
  8016f0:	41400015 	stw	r5,0(r8)
  8016f4:	44000115 	stw	r16,4(r8)
  8016f8:	d8c02015 	stw	r3,128(sp)
  8016fc:	d8801f15 	stw	r2,124(sp)
  801700:	010001c4 	movi	r4,7
  801704:	2080060e 	bge	r4,r2,801720 <___vfprintf_internal_r+0xae4>
  801708:	d9002d17 	ldw	r4,180(sp)
  80170c:	d9801e04 	addi	r6,sp,120
  801710:	b80b883a 	mov	r5,r23
  801714:	08085840 	call	808584 <__sprint_r>
  801718:	103e4c1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  80171c:	d8c02017 	ldw	r3,128(sp)
  801720:	d8803117 	ldw	r2,196(sp)
  801724:	d9002917 	ldw	r4,164(sp)
  801728:	1100010e 	bge	r2,r4,801730 <___vfprintf_internal_r+0xaf4>
  80172c:	2005883a 	mov	r2,r4
  801730:	d9402f17 	ldw	r5,188(sp)
  801734:	288b883a 	add	r5,r5,r2
  801738:	d9402f15 	stw	r5,188(sp)
  80173c:	1801c01e 	bne	r3,zero,801e40 <___vfprintf_internal_r+0x1204>
  801740:	a8800007 	ldb	r2,0(r21)
  801744:	d8001f15 	stw	zero,124(sp)
  801748:	da000404 	addi	r8,sp,16
  80174c:	103d751e 	bne	r2,zero,800d24 <__alt_mem_epcs_flash_controller_0+0xff7f7d24>
  801750:	a823883a 	mov	r17,r21
  801754:	003d8b06 	br	800d84 <__alt_mem_epcs_flash_controller_0+0xff7f7d84>
  801758:	8025883a 	mov	r18,r16
  80175c:	dc002903 	ldbu	r16,164(sp)
  801760:	e011883a 	mov	r8,fp
  801764:	84003fcc 	andi	r16,r16,255
  801768:	8005e51e 	bne	r16,zero,802f00 <___vfprintf_internal_r+0x22c4>
  80176c:	94800414 	ori	r18,r18,16
  801770:	9080080c 	andi	r2,r18,32
  801774:	10022b26 	beq	r2,zero,802024 <___vfprintf_internal_r+0x13e8>
  801778:	d9002e17 	ldw	r4,184(sp)
  80177c:	d9402a17 	ldw	r5,168(sp)
  801780:	d8002785 	stb	zero,158(sp)
  801784:	20c00204 	addi	r3,r4,8
  801788:	24c00017 	ldw	r19,0(r4)
  80178c:	25800117 	ldw	r22,4(r4)
  801790:	28042e16 	blt	r5,zero,80284c <___vfprintf_internal_r+0x1c10>
  801794:	013fdfc4 	movi	r4,-129
  801798:	9d84b03a 	or	r2,r19,r22
  80179c:	d8c02e15 	stw	r3,184(sp)
  8017a0:	9124703a 	and	r18,r18,r4
  8017a4:	0039883a 	mov	fp,zero
  8017a8:	103e801e 	bne	r2,zero,8011ac <__alt_mem_epcs_flash_controller_0+0xff7f81ac>
  8017ac:	d9002a17 	ldw	r4,168(sp)
  8017b0:	2002e01e 	bne	r4,zero,802334 <___vfprintf_internal_r+0x16f8>
  8017b4:	d8002a15 	stw	zero,168(sp)
  8017b8:	d8002b15 	stw	zero,172(sp)
  8017bc:	dc001e04 	addi	r16,sp,120
  8017c0:	003ef506 	br	801398 <__alt_mem_epcs_flash_controller_0+0xff7f8398>
  8017c4:	8025883a 	mov	r18,r16
  8017c8:	dc002903 	ldbu	r16,164(sp)
  8017cc:	e011883a 	mov	r8,fp
  8017d0:	84003fcc 	andi	r16,r16,255
  8017d4:	8005ba1e 	bne	r16,zero,802ec0 <___vfprintf_internal_r+0x2284>
  8017d8:	010020b4 	movhi	r4,130
  8017dc:	21295b04 	addi	r4,r4,-23188
  8017e0:	d9003915 	stw	r4,228(sp)
  8017e4:	9080080c 	andi	r2,r18,32
  8017e8:	10006126 	beq	r2,zero,801970 <___vfprintf_internal_r+0xd34>
  8017ec:	d9402e17 	ldw	r5,184(sp)
  8017f0:	2cc00017 	ldw	r19,0(r5)
  8017f4:	2d800117 	ldw	r22,4(r5)
  8017f8:	29400204 	addi	r5,r5,8
  8017fc:	d9402e15 	stw	r5,184(sp)
  801800:	9080004c 	andi	r2,r18,1
  801804:	1001ac26 	beq	r2,zero,801eb8 <___vfprintf_internal_r+0x127c>
  801808:	9d84b03a 	or	r2,r19,r22
  80180c:	10038526 	beq	r2,zero,802624 <___vfprintf_internal_r+0x19e8>
  801810:	d8c02a17 	ldw	r3,168(sp)
  801814:	00800c04 	movi	r2,48
  801818:	d8802705 	stb	r2,156(sp)
  80181c:	dc402745 	stb	r17,157(sp)
  801820:	d8002785 	stb	zero,158(sp)
  801824:	90800094 	ori	r2,r18,2
  801828:	18047916 	blt	r3,zero,802a10 <___vfprintf_internal_r+0x1dd4>
  80182c:	00bfdfc4 	movi	r2,-129
  801830:	90a4703a 	and	r18,r18,r2
  801834:	94800094 	ori	r18,r18,2
  801838:	0039883a 	mov	fp,zero
  80183c:	d9003917 	ldw	r4,228(sp)
  801840:	dc001e04 	addi	r16,sp,120
  801844:	988003cc 	andi	r2,r19,15
  801848:	b006973a 	slli	r3,r22,28
  80184c:	2085883a 	add	r2,r4,r2
  801850:	9826d13a 	srli	r19,r19,4
  801854:	10800003 	ldbu	r2,0(r2)
  801858:	b02cd13a 	srli	r22,r22,4
  80185c:	843fffc4 	addi	r16,r16,-1
  801860:	1ce6b03a 	or	r19,r3,r19
  801864:	80800005 	stb	r2,0(r16)
  801868:	9d84b03a 	or	r2,r19,r22
  80186c:	103ff51e 	bne	r2,zero,801844 <__alt_mem_epcs_flash_controller_0+0xff7f8844>
  801870:	d8c02817 	ldw	r3,160(sp)
  801874:	1c07c83a 	sub	r3,r3,r16
  801878:	d8c02b15 	stw	r3,172(sp)
  80187c:	003ec606 	br	801398 <__alt_mem_epcs_flash_controller_0+0xff7f8398>
  801880:	8025883a 	mov	r18,r16
  801884:	dc002903 	ldbu	r16,164(sp)
  801888:	e011883a 	mov	r8,fp
  80188c:	84003fcc 	andi	r16,r16,255
  801890:	803e9626 	beq	r16,zero,8012ec <__alt_mem_epcs_flash_controller_0+0xff7f82ec>
  801894:	d8c02b03 	ldbu	r3,172(sp)
  801898:	d8c02785 	stb	r3,158(sp)
  80189c:	003e9306 	br	8012ec <__alt_mem_epcs_flash_controller_0+0xff7f82ec>
  8018a0:	00c00044 	movi	r3,1
  8018a4:	d8c02905 	stb	r3,164(sp)
  8018a8:	00c00ac4 	movi	r3,43
  8018ac:	d8c02b05 	stb	r3,172(sp)
  8018b0:	ac400007 	ldb	r17,0(r21)
  8018b4:	003d4306 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8018b8:	84000814 	ori	r16,r16,32
  8018bc:	ac400007 	ldb	r17,0(r21)
  8018c0:	003d4006 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8018c4:	d8802e17 	ldw	r2,184(sp)
  8018c8:	8025883a 	mov	r18,r16
  8018cc:	d8002785 	stb	zero,158(sp)
  8018d0:	14000017 	ldw	r16,0(r2)
  8018d4:	e011883a 	mov	r8,fp
  8018d8:	14c00104 	addi	r19,r2,4
  8018dc:	80042d26 	beq	r16,zero,802994 <___vfprintf_internal_r+0x1d58>
  8018e0:	d8c02a17 	ldw	r3,168(sp)
  8018e4:	1803e416 	blt	r3,zero,802878 <___vfprintf_internal_r+0x1c3c>
  8018e8:	180d883a 	mov	r6,r3
  8018ec:	000b883a 	mov	r5,zero
  8018f0:	8009883a 	mov	r4,r16
  8018f4:	df003d15 	stw	fp,244(sp)
  8018f8:	08065740 	call	806574 <memchr>
  8018fc:	da003d17 	ldw	r8,244(sp)
  801900:	10046826 	beq	r2,zero,802aa4 <___vfprintf_internal_r+0x1e68>
  801904:	1405c83a 	sub	r2,r2,r16
  801908:	d8802b15 	stw	r2,172(sp)
  80190c:	1003e016 	blt	r2,zero,802890 <___vfprintf_internal_r+0x1c54>
  801910:	df002783 	ldbu	fp,158(sp)
  801914:	d8802915 	stw	r2,164(sp)
  801918:	dcc02e15 	stw	r19,184(sp)
  80191c:	d8002a15 	stw	zero,168(sp)
  801920:	d8003215 	stw	zero,200(sp)
  801924:	003ea206 	br	8013b0 <__alt_mem_epcs_flash_controller_0+0xff7f83b0>
  801928:	8025883a 	mov	r18,r16
  80192c:	dc002903 	ldbu	r16,164(sp)
  801930:	e011883a 	mov	r8,fp
  801934:	84003fcc 	andi	r16,r16,255
  801938:	803f8d26 	beq	r16,zero,801770 <__alt_mem_epcs_flash_controller_0+0xff7f8770>
  80193c:	d8c02b03 	ldbu	r3,172(sp)
  801940:	d8c02785 	stb	r3,158(sp)
  801944:	003f8a06 	br	801770 <__alt_mem_epcs_flash_controller_0+0xff7f8770>
  801948:	8025883a 	mov	r18,r16
  80194c:	dc002903 	ldbu	r16,164(sp)
  801950:	e011883a 	mov	r8,fp
  801954:	84003fcc 	andi	r16,r16,255
  801958:	8005661e 	bne	r16,zero,802ef4 <___vfprintf_internal_r+0x22b8>
  80195c:	010020b4 	movhi	r4,130
  801960:	21296004 	addi	r4,r4,-23168
  801964:	d9003915 	stw	r4,228(sp)
  801968:	9080080c 	andi	r2,r18,32
  80196c:	103f9f1e 	bne	r2,zero,8017ec <__alt_mem_epcs_flash_controller_0+0xff7f87ec>
  801970:	9080040c 	andi	r2,r18,16
  801974:	1002eb26 	beq	r2,zero,802524 <___vfprintf_internal_r+0x18e8>
  801978:	d8802e17 	ldw	r2,184(sp)
  80197c:	002d883a 	mov	r22,zero
  801980:	14c00017 	ldw	r19,0(r2)
  801984:	10800104 	addi	r2,r2,4
  801988:	d8802e15 	stw	r2,184(sp)
  80198c:	003f9c06 	br	801800 <__alt_mem_epcs_flash_controller_0+0xff7f8800>
  801990:	d8802b07 	ldb	r2,172(sp)
  801994:	1002e11e 	bne	r2,zero,80251c <___vfprintf_internal_r+0x18e0>
  801998:	00c00044 	movi	r3,1
  80199c:	d8c02905 	stb	r3,164(sp)
  8019a0:	00c00804 	movi	r3,32
  8019a4:	d8c02b05 	stb	r3,172(sp)
  8019a8:	ac400007 	ldb	r17,0(r21)
  8019ac:	003d0506 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8019b0:	84000054 	ori	r16,r16,1
  8019b4:	ac400007 	ldb	r17,0(r21)
  8019b8:	003d0206 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8019bc:	8025883a 	mov	r18,r16
  8019c0:	dc002903 	ldbu	r16,164(sp)
  8019c4:	e011883a 	mov	r8,fp
  8019c8:	84003fcc 	andi	r16,r16,255
  8019cc:	803de726 	beq	r16,zero,80116c <__alt_mem_epcs_flash_controller_0+0xff7f816c>
  8019d0:	d8c02b03 	ldbu	r3,172(sp)
  8019d4:	d8c02785 	stb	r3,158(sp)
  8019d8:	003de406 	br	80116c <__alt_mem_epcs_flash_controller_0+0xff7f816c>
  8019dc:	84001014 	ori	r16,r16,64
  8019e0:	ac400007 	ldb	r17,0(r21)
  8019e4:	003cf706 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8019e8:	ac400007 	ldb	r17,0(r21)
  8019ec:	00801b04 	movi	r2,108
  8019f0:	88838f26 	beq	r17,r2,802830 <___vfprintf_internal_r+0x1bf4>
  8019f4:	84000414 	ori	r16,r16,16
  8019f8:	003cf206 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  8019fc:	8025883a 	mov	r18,r16
  801a00:	dc002903 	ldbu	r16,164(sp)
  801a04:	e011883a 	mov	r8,fp
  801a08:	84003fcc 	andi	r16,r16,255
  801a0c:	80053f1e 	bne	r16,zero,802f0c <___vfprintf_internal_r+0x22d0>
  801a10:	9080080c 	andi	r2,r18,32
  801a14:	1002d226 	beq	r2,zero,802560 <___vfprintf_internal_r+0x1924>
  801a18:	d9002e17 	ldw	r4,184(sp)
  801a1c:	d9402f17 	ldw	r5,188(sp)
  801a20:	20800017 	ldw	r2,0(r4)
  801a24:	2807d7fa 	srai	r3,r5,31
  801a28:	21000104 	addi	r4,r4,4
  801a2c:	d9002e15 	stw	r4,184(sp)
  801a30:	11400015 	stw	r5,0(r2)
  801a34:	10c00115 	stw	r3,4(r2)
  801a38:	003cb806 	br	800d1c <__alt_mem_epcs_flash_controller_0+0xff7f7d1c>
  801a3c:	d8c02e17 	ldw	r3,184(sp)
  801a40:	d9002e17 	ldw	r4,184(sp)
  801a44:	8025883a 	mov	r18,r16
  801a48:	18800017 	ldw	r2,0(r3)
  801a4c:	21000104 	addi	r4,r4,4
  801a50:	00c00044 	movi	r3,1
  801a54:	e011883a 	mov	r8,fp
  801a58:	d8c02915 	stw	r3,164(sp)
  801a5c:	d8002785 	stb	zero,158(sp)
  801a60:	d8801405 	stb	r2,80(sp)
  801a64:	d9002e15 	stw	r4,184(sp)
  801a68:	d8c02b15 	stw	r3,172(sp)
  801a6c:	d8002a15 	stw	zero,168(sp)
  801a70:	d8003215 	stw	zero,200(sp)
  801a74:	dc001404 	addi	r16,sp,80
  801a78:	0039883a 	mov	fp,zero
  801a7c:	003e5306 	br	8013cc <__alt_mem_epcs_flash_controller_0+0xff7f83cc>
  801a80:	010020b4 	movhi	r4,130
  801a84:	21296004 	addi	r4,r4,-23168
  801a88:	0039883a 	mov	fp,zero
  801a8c:	d9003915 	stw	r4,228(sp)
  801a90:	04401e04 	movi	r17,120
  801a94:	003f6906 	br	80183c <__alt_mem_epcs_flash_controller_0+0xff7f883c>
  801a98:	8025883a 	mov	r18,r16
  801a9c:	dc002903 	ldbu	r16,164(sp)
  801aa0:	e011883a 	mov	r8,fp
  801aa4:	84003fcc 	andi	r16,r16,255
  801aa8:	8005081e 	bne	r16,zero,802ecc <___vfprintf_internal_r+0x2290>
  801aac:	883d6126 	beq	r17,zero,801034 <__alt_mem_epcs_flash_controller_0+0xff7f8034>
  801ab0:	00c00044 	movi	r3,1
  801ab4:	d8c02915 	stw	r3,164(sp)
  801ab8:	dc401405 	stb	r17,80(sp)
  801abc:	d8002785 	stb	zero,158(sp)
  801ac0:	003fe906 	br	801a68 <__alt_mem_epcs_flash_controller_0+0xff7f8a68>
  801ac4:	014020b4 	movhi	r5,130
  801ac8:	29696004 	addi	r5,r5,-23168
  801acc:	d9403915 	stw	r5,228(sp)
  801ad0:	d8c02e15 	stw	r3,184(sp)
  801ad4:	1025883a 	mov	r18,r2
  801ad8:	04401e04 	movi	r17,120
  801adc:	9d84b03a 	or	r2,r19,r22
  801ae0:	1000fc1e 	bne	r2,zero,801ed4 <___vfprintf_internal_r+0x1298>
  801ae4:	0039883a 	mov	fp,zero
  801ae8:	00800084 	movi	r2,2
  801aec:	10803fcc 	andi	r2,r2,255
  801af0:	00c00044 	movi	r3,1
  801af4:	10c20f26 	beq	r2,r3,802334 <___vfprintf_internal_r+0x16f8>
  801af8:	00c00084 	movi	r3,2
  801afc:	10fd3326 	beq	r2,r3,800fcc <__alt_mem_epcs_flash_controller_0+0xff7f7fcc>
  801b00:	003e0b06 	br	801330 <__alt_mem_epcs_flash_controller_0+0xff7f8330>
  801b04:	d8c02017 	ldw	r3,128(sp)
  801b08:	003e7106 	br	8014d0 <__alt_mem_epcs_flash_controller_0+0xff7f84d0>
  801b0c:	00801944 	movi	r2,101
  801b10:	14407e0e 	bge	r2,r17,801d0c <___vfprintf_internal_r+0x10d0>
  801b14:	d9003617 	ldw	r4,216(sp)
  801b18:	d9403817 	ldw	r5,224(sp)
  801b1c:	000d883a 	mov	r6,zero
  801b20:	000f883a 	mov	r7,zero
  801b24:	d8c03c15 	stw	r3,240(sp)
  801b28:	da003d15 	stw	r8,244(sp)
  801b2c:	080c4e40 	call	80c4e4 <__eqdf2>
  801b30:	d8c03c17 	ldw	r3,240(sp)
  801b34:	da003d17 	ldw	r8,244(sp)
  801b38:	1000f71e 	bne	r2,zero,801f18 <___vfprintf_internal_r+0x12dc>
  801b3c:	d8801f17 	ldw	r2,124(sp)
  801b40:	010020b4 	movhi	r4,130
  801b44:	21296704 	addi	r4,r4,-23140
  801b48:	18c00044 	addi	r3,r3,1
  801b4c:	10800044 	addi	r2,r2,1
  801b50:	41000015 	stw	r4,0(r8)
  801b54:	01000044 	movi	r4,1
  801b58:	41000115 	stw	r4,4(r8)
  801b5c:	d8c02015 	stw	r3,128(sp)
  801b60:	d8801f15 	stw	r2,124(sp)
  801b64:	010001c4 	movi	r4,7
  801b68:	2082b816 	blt	r4,r2,80264c <___vfprintf_internal_r+0x1a10>
  801b6c:	42000204 	addi	r8,r8,8
  801b70:	d8802617 	ldw	r2,152(sp)
  801b74:	d9403317 	ldw	r5,204(sp)
  801b78:	11400216 	blt	r2,r5,801b84 <___vfprintf_internal_r+0xf48>
  801b7c:	9080004c 	andi	r2,r18,1
  801b80:	103eb326 	beq	r2,zero,801650 <__alt_mem_epcs_flash_controller_0+0xff7f8650>
  801b84:	d8803717 	ldw	r2,220(sp)
  801b88:	d9003417 	ldw	r4,208(sp)
  801b8c:	d9403717 	ldw	r5,220(sp)
  801b90:	1887883a 	add	r3,r3,r2
  801b94:	d8801f17 	ldw	r2,124(sp)
  801b98:	41000015 	stw	r4,0(r8)
  801b9c:	41400115 	stw	r5,4(r8)
  801ba0:	10800044 	addi	r2,r2,1
  801ba4:	d8c02015 	stw	r3,128(sp)
  801ba8:	d8801f15 	stw	r2,124(sp)
  801bac:	010001c4 	movi	r4,7
  801bb0:	20832916 	blt	r4,r2,802858 <___vfprintf_internal_r+0x1c1c>
  801bb4:	42000204 	addi	r8,r8,8
  801bb8:	d8803317 	ldw	r2,204(sp)
  801bbc:	143fffc4 	addi	r16,r2,-1
  801bc0:	043ea30e 	bge	zero,r16,801650 <__alt_mem_epcs_flash_controller_0+0xff7f8650>
  801bc4:	04400404 	movi	r17,16
  801bc8:	d8801f17 	ldw	r2,124(sp)
  801bcc:	8c00880e 	bge	r17,r16,801df0 <___vfprintf_internal_r+0x11b4>
  801bd0:	014020b4 	movhi	r5,130
  801bd4:	29696784 	addi	r5,r5,-23138
  801bd8:	d9402c15 	stw	r5,176(sp)
  801bdc:	058001c4 	movi	r22,7
  801be0:	dcc02d17 	ldw	r19,180(sp)
  801be4:	00000306 	br	801bf4 <___vfprintf_internal_r+0xfb8>
  801be8:	42000204 	addi	r8,r8,8
  801bec:	843ffc04 	addi	r16,r16,-16
  801bf0:	8c00820e 	bge	r17,r16,801dfc <___vfprintf_internal_r+0x11c0>
  801bf4:	18c00404 	addi	r3,r3,16
  801bf8:	10800044 	addi	r2,r2,1
  801bfc:	45000015 	stw	r20,0(r8)
  801c00:	44400115 	stw	r17,4(r8)
  801c04:	d8c02015 	stw	r3,128(sp)
  801c08:	d8801f15 	stw	r2,124(sp)
  801c0c:	b0bff60e 	bge	r22,r2,801be8 <__alt_mem_epcs_flash_controller_0+0xff7f8be8>
  801c10:	d9801e04 	addi	r6,sp,120
  801c14:	b80b883a 	mov	r5,r23
  801c18:	9809883a 	mov	r4,r19
  801c1c:	08085840 	call	808584 <__sprint_r>
  801c20:	103d0a1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801c24:	d8c02017 	ldw	r3,128(sp)
  801c28:	d8801f17 	ldw	r2,124(sp)
  801c2c:	da000404 	addi	r8,sp,16
  801c30:	003fee06 	br	801bec <__alt_mem_epcs_flash_controller_0+0xff7f8bec>
  801c34:	d9403117 	ldw	r5,196(sp)
  801c38:	d8802917 	ldw	r2,164(sp)
  801c3c:	28adc83a 	sub	r22,r5,r2
  801c40:	05be410e 	bge	zero,r22,801548 <__alt_mem_epcs_flash_controller_0+0xff7f8548>
  801c44:	07000404 	movi	fp,16
  801c48:	d8801f17 	ldw	r2,124(sp)
  801c4c:	e5838f0e 	bge	fp,r22,802a8c <___vfprintf_internal_r+0x1e50>
  801c50:	014020b4 	movhi	r5,130
  801c54:	29696784 	addi	r5,r5,-23138
  801c58:	dc403015 	stw	r17,192(sp)
  801c5c:	d9402c15 	stw	r5,176(sp)
  801c60:	b023883a 	mov	r17,r22
  801c64:	04c001c4 	movi	r19,7
  801c68:	a82d883a 	mov	r22,r21
  801c6c:	902b883a 	mov	r21,r18
  801c70:	8025883a 	mov	r18,r16
  801c74:	dc002d17 	ldw	r16,180(sp)
  801c78:	00000306 	br	801c88 <___vfprintf_internal_r+0x104c>
  801c7c:	8c7ffc04 	addi	r17,r17,-16
  801c80:	42000204 	addi	r8,r8,8
  801c84:	e440110e 	bge	fp,r17,801ccc <___vfprintf_internal_r+0x1090>
  801c88:	18c00404 	addi	r3,r3,16
  801c8c:	10800044 	addi	r2,r2,1
  801c90:	45000015 	stw	r20,0(r8)
  801c94:	47000115 	stw	fp,4(r8)
  801c98:	d8c02015 	stw	r3,128(sp)
  801c9c:	d8801f15 	stw	r2,124(sp)
  801ca0:	98bff60e 	bge	r19,r2,801c7c <__alt_mem_epcs_flash_controller_0+0xff7f8c7c>
  801ca4:	d9801e04 	addi	r6,sp,120
  801ca8:	b80b883a 	mov	r5,r23
  801cac:	8009883a 	mov	r4,r16
  801cb0:	08085840 	call	808584 <__sprint_r>
  801cb4:	103ce51e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801cb8:	8c7ffc04 	addi	r17,r17,-16
  801cbc:	d8c02017 	ldw	r3,128(sp)
  801cc0:	d8801f17 	ldw	r2,124(sp)
  801cc4:	da000404 	addi	r8,sp,16
  801cc8:	e47fef16 	blt	fp,r17,801c88 <__alt_mem_epcs_flash_controller_0+0xff7f8c88>
  801ccc:	9021883a 	mov	r16,r18
  801cd0:	a825883a 	mov	r18,r21
  801cd4:	b02b883a 	mov	r21,r22
  801cd8:	882d883a 	mov	r22,r17
  801cdc:	dc403017 	ldw	r17,192(sp)
  801ce0:	d9002c17 	ldw	r4,176(sp)
  801ce4:	1d87883a 	add	r3,r3,r22
  801ce8:	10800044 	addi	r2,r2,1
  801cec:	41000015 	stw	r4,0(r8)
  801cf0:	45800115 	stw	r22,4(r8)
  801cf4:	d8c02015 	stw	r3,128(sp)
  801cf8:	d8801f15 	stw	r2,124(sp)
  801cfc:	010001c4 	movi	r4,7
  801d00:	20818e16 	blt	r4,r2,80233c <___vfprintf_internal_r+0x1700>
  801d04:	42000204 	addi	r8,r8,8
  801d08:	003e0f06 	br	801548 <__alt_mem_epcs_flash_controller_0+0xff7f8548>
  801d0c:	d9403317 	ldw	r5,204(sp)
  801d10:	00800044 	movi	r2,1
  801d14:	18c00044 	addi	r3,r3,1
  801d18:	1141530e 	bge	r2,r5,802268 <___vfprintf_internal_r+0x162c>
  801d1c:	dc401f17 	ldw	r17,124(sp)
  801d20:	00800044 	movi	r2,1
  801d24:	40800115 	stw	r2,4(r8)
  801d28:	8c400044 	addi	r17,r17,1
  801d2c:	44000015 	stw	r16,0(r8)
  801d30:	d8c02015 	stw	r3,128(sp)
  801d34:	dc401f15 	stw	r17,124(sp)
  801d38:	008001c4 	movi	r2,7
  801d3c:	14416b16 	blt	r2,r17,8022ec <___vfprintf_internal_r+0x16b0>
  801d40:	42000204 	addi	r8,r8,8
  801d44:	d8803717 	ldw	r2,220(sp)
  801d48:	d9003417 	ldw	r4,208(sp)
  801d4c:	8c400044 	addi	r17,r17,1
  801d50:	10c7883a 	add	r3,r2,r3
  801d54:	40800115 	stw	r2,4(r8)
  801d58:	41000015 	stw	r4,0(r8)
  801d5c:	d8c02015 	stw	r3,128(sp)
  801d60:	dc401f15 	stw	r17,124(sp)
  801d64:	008001c4 	movi	r2,7
  801d68:	14416916 	blt	r2,r17,802310 <___vfprintf_internal_r+0x16d4>
  801d6c:	45800204 	addi	r22,r8,8
  801d70:	d9003617 	ldw	r4,216(sp)
  801d74:	d9403817 	ldw	r5,224(sp)
  801d78:	000d883a 	mov	r6,zero
  801d7c:	000f883a 	mov	r7,zero
  801d80:	d8c03c15 	stw	r3,240(sp)
  801d84:	080c4e40 	call	80c4e4 <__eqdf2>
  801d88:	d8c03c17 	ldw	r3,240(sp)
  801d8c:	1000bc26 	beq	r2,zero,802080 <___vfprintf_internal_r+0x1444>
  801d90:	d9403317 	ldw	r5,204(sp)
  801d94:	84000044 	addi	r16,r16,1
  801d98:	8c400044 	addi	r17,r17,1
  801d9c:	28bfffc4 	addi	r2,r5,-1
  801da0:	1887883a 	add	r3,r3,r2
  801da4:	b0800115 	stw	r2,4(r22)
  801da8:	b4000015 	stw	r16,0(r22)
  801dac:	d8c02015 	stw	r3,128(sp)
  801db0:	dc401f15 	stw	r17,124(sp)
  801db4:	008001c4 	movi	r2,7
  801db8:	14414316 	blt	r2,r17,8022c8 <___vfprintf_internal_r+0x168c>
  801dbc:	b5800204 	addi	r22,r22,8
  801dc0:	d9003a17 	ldw	r4,232(sp)
  801dc4:	df0022c4 	addi	fp,sp,139
  801dc8:	8c400044 	addi	r17,r17,1
  801dcc:	20c7883a 	add	r3,r4,r3
  801dd0:	b7000015 	stw	fp,0(r22)
  801dd4:	b1000115 	stw	r4,4(r22)
  801dd8:	d8c02015 	stw	r3,128(sp)
  801ddc:	dc401f15 	stw	r17,124(sp)
  801de0:	008001c4 	movi	r2,7
  801de4:	14400e16 	blt	r2,r17,801e20 <___vfprintf_internal_r+0x11e4>
  801de8:	b2000204 	addi	r8,r22,8
  801dec:	003e1806 	br	801650 <__alt_mem_epcs_flash_controller_0+0xff7f8650>
  801df0:	010020b4 	movhi	r4,130
  801df4:	21296784 	addi	r4,r4,-23138
  801df8:	d9002c15 	stw	r4,176(sp)
  801dfc:	d9002c17 	ldw	r4,176(sp)
  801e00:	1c07883a 	add	r3,r3,r16
  801e04:	44000115 	stw	r16,4(r8)
  801e08:	41000015 	stw	r4,0(r8)
  801e0c:	10800044 	addi	r2,r2,1
  801e10:	d8c02015 	stw	r3,128(sp)
  801e14:	d8801f15 	stw	r2,124(sp)
  801e18:	010001c4 	movi	r4,7
  801e1c:	20be0b0e 	bge	r4,r2,80164c <__alt_mem_epcs_flash_controller_0+0xff7f864c>
  801e20:	d9002d17 	ldw	r4,180(sp)
  801e24:	d9801e04 	addi	r6,sp,120
  801e28:	b80b883a 	mov	r5,r23
  801e2c:	08085840 	call	808584 <__sprint_r>
  801e30:	103c861e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801e34:	d8c02017 	ldw	r3,128(sp)
  801e38:	da000404 	addi	r8,sp,16
  801e3c:	003e0406 	br	801650 <__alt_mem_epcs_flash_controller_0+0xff7f8650>
  801e40:	d9002d17 	ldw	r4,180(sp)
  801e44:	d9801e04 	addi	r6,sp,120
  801e48:	b80b883a 	mov	r5,r23
  801e4c:	08085840 	call	808584 <__sprint_r>
  801e50:	103e3b26 	beq	r2,zero,801740 <__alt_mem_epcs_flash_controller_0+0xff7f8740>
  801e54:	003c7d06 	br	80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801e58:	d9002d17 	ldw	r4,180(sp)
  801e5c:	d9801e04 	addi	r6,sp,120
  801e60:	b80b883a 	mov	r5,r23
  801e64:	08085840 	call	808584 <__sprint_r>
  801e68:	103c781e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801e6c:	d8c02017 	ldw	r3,128(sp)
  801e70:	da000404 	addi	r8,sp,16
  801e74:	003de906 	br	80161c <__alt_mem_epcs_flash_controller_0+0xff7f861c>
  801e78:	d9002d17 	ldw	r4,180(sp)
  801e7c:	d9801e04 	addi	r6,sp,120
  801e80:	b80b883a 	mov	r5,r23
  801e84:	08085840 	call	808584 <__sprint_r>
  801e88:	103c701e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801e8c:	d8c02017 	ldw	r3,128(sp)
  801e90:	da000404 	addi	r8,sp,16
  801e94:	003d9b06 	br	801504 <__alt_mem_epcs_flash_controller_0+0xff7f8504>
  801e98:	d9002d17 	ldw	r4,180(sp)
  801e9c:	d9801e04 	addi	r6,sp,120
  801ea0:	b80b883a 	mov	r5,r23
  801ea4:	08085840 	call	808584 <__sprint_r>
  801ea8:	103c681e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801eac:	d8c02017 	ldw	r3,128(sp)
  801eb0:	da000404 	addi	r8,sp,16
  801eb4:	003da106 	br	80153c <__alt_mem_epcs_flash_controller_0+0xff7f853c>
  801eb8:	d9402a17 	ldw	r5,168(sp)
  801ebc:	d8002785 	stb	zero,158(sp)
  801ec0:	283f0616 	blt	r5,zero,801adc <__alt_mem_epcs_flash_controller_0+0xff7f8adc>
  801ec4:	00ffdfc4 	movi	r3,-129
  801ec8:	9d84b03a 	or	r2,r19,r22
  801ecc:	90e4703a 	and	r18,r18,r3
  801ed0:	103c3b26 	beq	r2,zero,800fc0 <__alt_mem_epcs_flash_controller_0+0xff7f7fc0>
  801ed4:	0039883a 	mov	fp,zero
  801ed8:	003e5806 	br	80183c <__alt_mem_epcs_flash_controller_0+0xff7f883c>
  801edc:	9080040c 	andi	r2,r18,16
  801ee0:	1001b326 	beq	r2,zero,8025b0 <___vfprintf_internal_r+0x1974>
  801ee4:	d8c02e17 	ldw	r3,184(sp)
  801ee8:	d9002a17 	ldw	r4,168(sp)
  801eec:	d8002785 	stb	zero,158(sp)
  801ef0:	18800104 	addi	r2,r3,4
  801ef4:	1cc00017 	ldw	r19,0(r3)
  801ef8:	002d883a 	mov	r22,zero
  801efc:	2001b516 	blt	r4,zero,8025d4 <___vfprintf_internal_r+0x1998>
  801f00:	00ffdfc4 	movi	r3,-129
  801f04:	d8802e15 	stw	r2,184(sp)
  801f08:	90e4703a 	and	r18,r18,r3
  801f0c:	983d0526 	beq	r19,zero,801324 <__alt_mem_epcs_flash_controller_0+0xff7f8324>
  801f10:	0039883a 	mov	fp,zero
  801f14:	003d0806 	br	801338 <__alt_mem_epcs_flash_controller_0+0xff7f8338>
  801f18:	dc402617 	ldw	r17,152(sp)
  801f1c:	0441d30e 	bge	zero,r17,80266c <___vfprintf_internal_r+0x1a30>
  801f20:	dc403217 	ldw	r17,200(sp)
  801f24:	d8803317 	ldw	r2,204(sp)
  801f28:	1440010e 	bge	r2,r17,801f30 <___vfprintf_internal_r+0x12f4>
  801f2c:	1023883a 	mov	r17,r2
  801f30:	04400a0e 	bge	zero,r17,801f5c <___vfprintf_internal_r+0x1320>
  801f34:	d8801f17 	ldw	r2,124(sp)
  801f38:	1c47883a 	add	r3,r3,r17
  801f3c:	44000015 	stw	r16,0(r8)
  801f40:	10800044 	addi	r2,r2,1
  801f44:	44400115 	stw	r17,4(r8)
  801f48:	d8c02015 	stw	r3,128(sp)
  801f4c:	d8801f15 	stw	r2,124(sp)
  801f50:	010001c4 	movi	r4,7
  801f54:	20826516 	blt	r4,r2,8028ec <___vfprintf_internal_r+0x1cb0>
  801f58:	42000204 	addi	r8,r8,8
  801f5c:	88026116 	blt	r17,zero,8028e4 <___vfprintf_internal_r+0x1ca8>
  801f60:	d9003217 	ldw	r4,200(sp)
  801f64:	2463c83a 	sub	r17,r4,r17
  801f68:	04407b0e 	bge	zero,r17,802158 <___vfprintf_internal_r+0x151c>
  801f6c:	05800404 	movi	r22,16
  801f70:	d8801f17 	ldw	r2,124(sp)
  801f74:	b4419d0e 	bge	r22,r17,8025ec <___vfprintf_internal_r+0x19b0>
  801f78:	010020b4 	movhi	r4,130
  801f7c:	21296784 	addi	r4,r4,-23138
  801f80:	d9002c15 	stw	r4,176(sp)
  801f84:	070001c4 	movi	fp,7
  801f88:	dcc02d17 	ldw	r19,180(sp)
  801f8c:	00000306 	br	801f9c <___vfprintf_internal_r+0x1360>
  801f90:	42000204 	addi	r8,r8,8
  801f94:	8c7ffc04 	addi	r17,r17,-16
  801f98:	b441970e 	bge	r22,r17,8025f8 <___vfprintf_internal_r+0x19bc>
  801f9c:	18c00404 	addi	r3,r3,16
  801fa0:	10800044 	addi	r2,r2,1
  801fa4:	45000015 	stw	r20,0(r8)
  801fa8:	45800115 	stw	r22,4(r8)
  801fac:	d8c02015 	stw	r3,128(sp)
  801fb0:	d8801f15 	stw	r2,124(sp)
  801fb4:	e0bff60e 	bge	fp,r2,801f90 <__alt_mem_epcs_flash_controller_0+0xff7f8f90>
  801fb8:	d9801e04 	addi	r6,sp,120
  801fbc:	b80b883a 	mov	r5,r23
  801fc0:	9809883a 	mov	r4,r19
  801fc4:	08085840 	call	808584 <__sprint_r>
  801fc8:	103c201e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801fcc:	d8c02017 	ldw	r3,128(sp)
  801fd0:	d8801f17 	ldw	r2,124(sp)
  801fd4:	da000404 	addi	r8,sp,16
  801fd8:	003fee06 	br	801f94 <__alt_mem_epcs_flash_controller_0+0xff7f8f94>
  801fdc:	d9002d17 	ldw	r4,180(sp)
  801fe0:	d9801e04 	addi	r6,sp,120
  801fe4:	b80b883a 	mov	r5,r23
  801fe8:	08085840 	call	808584 <__sprint_r>
  801fec:	103c171e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  801ff0:	d8c02017 	ldw	r3,128(sp)
  801ff4:	df002787 	ldb	fp,158(sp)
  801ff8:	da000404 	addi	r8,sp,16
  801ffc:	003d3406 	br	8014d0 <__alt_mem_epcs_flash_controller_0+0xff7f84d0>
  802000:	9080040c 	andi	r2,r18,16
  802004:	10016126 	beq	r2,zero,80258c <___vfprintf_internal_r+0x1950>
  802008:	d9402e17 	ldw	r5,184(sp)
  80200c:	2cc00017 	ldw	r19,0(r5)
  802010:	29400104 	addi	r5,r5,4
  802014:	d9402e15 	stw	r5,184(sp)
  802018:	982dd7fa 	srai	r22,r19,31
  80201c:	b005883a 	mov	r2,r22
  802020:	003c5a06 	br	80118c <__alt_mem_epcs_flash_controller_0+0xff7f818c>
  802024:	9080040c 	andi	r2,r18,16
  802028:	10003526 	beq	r2,zero,802100 <___vfprintf_internal_r+0x14c4>
  80202c:	d8c02e17 	ldw	r3,184(sp)
  802030:	d9002a17 	ldw	r4,168(sp)
  802034:	d8002785 	stb	zero,158(sp)
  802038:	18800104 	addi	r2,r3,4
  80203c:	1cc00017 	ldw	r19,0(r3)
  802040:	002d883a 	mov	r22,zero
  802044:	20003716 	blt	r4,zero,802124 <___vfprintf_internal_r+0x14e8>
  802048:	00ffdfc4 	movi	r3,-129
  80204c:	d8802e15 	stw	r2,184(sp)
  802050:	90e4703a 	and	r18,r18,r3
  802054:	0039883a 	mov	fp,zero
  802058:	983dd426 	beq	r19,zero,8017ac <__alt_mem_epcs_flash_controller_0+0xff7f87ac>
  80205c:	00800244 	movi	r2,9
  802060:	14fc5336 	bltu	r2,r19,8011b0 <__alt_mem_epcs_flash_controller_0+0xff7f81b0>
  802064:	d8c02817 	ldw	r3,160(sp)
  802068:	dc001dc4 	addi	r16,sp,119
  80206c:	9cc00c04 	addi	r19,r19,48
  802070:	1c07c83a 	sub	r3,r3,r16
  802074:	dcc01dc5 	stb	r19,119(sp)
  802078:	d8c02b15 	stw	r3,172(sp)
  80207c:	003cc606 	br	801398 <__alt_mem_epcs_flash_controller_0+0xff7f8398>
  802080:	d8803317 	ldw	r2,204(sp)
  802084:	143fffc4 	addi	r16,r2,-1
  802088:	043f4d0e 	bge	zero,r16,801dc0 <__alt_mem_epcs_flash_controller_0+0xff7f8dc0>
  80208c:	07000404 	movi	fp,16
  802090:	e400810e 	bge	fp,r16,802298 <___vfprintf_internal_r+0x165c>
  802094:	014020b4 	movhi	r5,130
  802098:	29696784 	addi	r5,r5,-23138
  80209c:	d9402c15 	stw	r5,176(sp)
  8020a0:	01c001c4 	movi	r7,7
  8020a4:	dcc02d17 	ldw	r19,180(sp)
  8020a8:	00000306 	br	8020b8 <___vfprintf_internal_r+0x147c>
  8020ac:	b5800204 	addi	r22,r22,8
  8020b0:	843ffc04 	addi	r16,r16,-16
  8020b4:	e4007b0e 	bge	fp,r16,8022a4 <___vfprintf_internal_r+0x1668>
  8020b8:	18c00404 	addi	r3,r3,16
  8020bc:	8c400044 	addi	r17,r17,1
  8020c0:	b5000015 	stw	r20,0(r22)
  8020c4:	b7000115 	stw	fp,4(r22)
  8020c8:	d8c02015 	stw	r3,128(sp)
  8020cc:	dc401f15 	stw	r17,124(sp)
  8020d0:	3c7ff60e 	bge	r7,r17,8020ac <__alt_mem_epcs_flash_controller_0+0xff7f90ac>
  8020d4:	d9801e04 	addi	r6,sp,120
  8020d8:	b80b883a 	mov	r5,r23
  8020dc:	9809883a 	mov	r4,r19
  8020e0:	d9c03c15 	stw	r7,240(sp)
  8020e4:	08085840 	call	808584 <__sprint_r>
  8020e8:	d9c03c17 	ldw	r7,240(sp)
  8020ec:	103bd71e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  8020f0:	d8c02017 	ldw	r3,128(sp)
  8020f4:	dc401f17 	ldw	r17,124(sp)
  8020f8:	dd800404 	addi	r22,sp,16
  8020fc:	003fec06 	br	8020b0 <__alt_mem_epcs_flash_controller_0+0xff7f90b0>
  802100:	9080100c 	andi	r2,r18,64
  802104:	d8002785 	stb	zero,158(sp)
  802108:	10010e26 	beq	r2,zero,802544 <___vfprintf_internal_r+0x1908>
  80210c:	d9402e17 	ldw	r5,184(sp)
  802110:	d8c02a17 	ldw	r3,168(sp)
  802114:	002d883a 	mov	r22,zero
  802118:	28800104 	addi	r2,r5,4
  80211c:	2cc0000b 	ldhu	r19,0(r5)
  802120:	183fc90e 	bge	r3,zero,802048 <__alt_mem_epcs_flash_controller_0+0xff7f9048>
  802124:	d8802e15 	stw	r2,184(sp)
  802128:	0039883a 	mov	fp,zero
  80212c:	9d84b03a 	or	r2,r19,r22
  802130:	103c1e1e 	bne	r2,zero,8011ac <__alt_mem_epcs_flash_controller_0+0xff7f81ac>
  802134:	00800044 	movi	r2,1
  802138:	003e6c06 	br	801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  80213c:	d9002d17 	ldw	r4,180(sp)
  802140:	d9801e04 	addi	r6,sp,120
  802144:	b80b883a 	mov	r5,r23
  802148:	08085840 	call	808584 <__sprint_r>
  80214c:	103bbf1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802150:	d8c02017 	ldw	r3,128(sp)
  802154:	da000404 	addi	r8,sp,16
  802158:	d9003217 	ldw	r4,200(sp)
  80215c:	d8802617 	ldw	r2,152(sp)
  802160:	d9403317 	ldw	r5,204(sp)
  802164:	8123883a 	add	r17,r16,r4
  802168:	11400216 	blt	r2,r5,802174 <___vfprintf_internal_r+0x1538>
  80216c:	9100004c 	andi	r4,r18,1
  802170:	20000d26 	beq	r4,zero,8021a8 <___vfprintf_internal_r+0x156c>
  802174:	d9003717 	ldw	r4,220(sp)
  802178:	d9403417 	ldw	r5,208(sp)
  80217c:	1907883a 	add	r3,r3,r4
  802180:	d9001f17 	ldw	r4,124(sp)
  802184:	41400015 	stw	r5,0(r8)
  802188:	d9403717 	ldw	r5,220(sp)
  80218c:	21000044 	addi	r4,r4,1
  802190:	d8c02015 	stw	r3,128(sp)
  802194:	41400115 	stw	r5,4(r8)
  802198:	d9001f15 	stw	r4,124(sp)
  80219c:	014001c4 	movi	r5,7
  8021a0:	2901e816 	blt	r5,r4,802944 <___vfprintf_internal_r+0x1d08>
  8021a4:	42000204 	addi	r8,r8,8
  8021a8:	d9003317 	ldw	r4,204(sp)
  8021ac:	8121883a 	add	r16,r16,r4
  8021b0:	2085c83a 	sub	r2,r4,r2
  8021b4:	8461c83a 	sub	r16,r16,r17
  8021b8:	1400010e 	bge	r2,r16,8021c0 <___vfprintf_internal_r+0x1584>
  8021bc:	1021883a 	mov	r16,r2
  8021c0:	04000a0e 	bge	zero,r16,8021ec <___vfprintf_internal_r+0x15b0>
  8021c4:	d9001f17 	ldw	r4,124(sp)
  8021c8:	1c07883a 	add	r3,r3,r16
  8021cc:	44400015 	stw	r17,0(r8)
  8021d0:	21000044 	addi	r4,r4,1
  8021d4:	44000115 	stw	r16,4(r8)
  8021d8:	d8c02015 	stw	r3,128(sp)
  8021dc:	d9001f15 	stw	r4,124(sp)
  8021e0:	014001c4 	movi	r5,7
  8021e4:	2901fb16 	blt	r5,r4,8029d4 <___vfprintf_internal_r+0x1d98>
  8021e8:	42000204 	addi	r8,r8,8
  8021ec:	8001f716 	blt	r16,zero,8029cc <___vfprintf_internal_r+0x1d90>
  8021f0:	1421c83a 	sub	r16,r2,r16
  8021f4:	043d160e 	bge	zero,r16,801650 <__alt_mem_epcs_flash_controller_0+0xff7f8650>
  8021f8:	04400404 	movi	r17,16
  8021fc:	d8801f17 	ldw	r2,124(sp)
  802200:	8c3efb0e 	bge	r17,r16,801df0 <__alt_mem_epcs_flash_controller_0+0xff7f8df0>
  802204:	014020b4 	movhi	r5,130
  802208:	29696784 	addi	r5,r5,-23138
  80220c:	d9402c15 	stw	r5,176(sp)
  802210:	058001c4 	movi	r22,7
  802214:	dcc02d17 	ldw	r19,180(sp)
  802218:	00000306 	br	802228 <___vfprintf_internal_r+0x15ec>
  80221c:	42000204 	addi	r8,r8,8
  802220:	843ffc04 	addi	r16,r16,-16
  802224:	8c3ef50e 	bge	r17,r16,801dfc <__alt_mem_epcs_flash_controller_0+0xff7f8dfc>
  802228:	18c00404 	addi	r3,r3,16
  80222c:	10800044 	addi	r2,r2,1
  802230:	45000015 	stw	r20,0(r8)
  802234:	44400115 	stw	r17,4(r8)
  802238:	d8c02015 	stw	r3,128(sp)
  80223c:	d8801f15 	stw	r2,124(sp)
  802240:	b0bff60e 	bge	r22,r2,80221c <__alt_mem_epcs_flash_controller_0+0xff7f921c>
  802244:	d9801e04 	addi	r6,sp,120
  802248:	b80b883a 	mov	r5,r23
  80224c:	9809883a 	mov	r4,r19
  802250:	08085840 	call	808584 <__sprint_r>
  802254:	103b7d1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802258:	d8c02017 	ldw	r3,128(sp)
  80225c:	d8801f17 	ldw	r2,124(sp)
  802260:	da000404 	addi	r8,sp,16
  802264:	003fee06 	br	802220 <__alt_mem_epcs_flash_controller_0+0xff7f9220>
  802268:	9088703a 	and	r4,r18,r2
  80226c:	203eab1e 	bne	r4,zero,801d1c <__alt_mem_epcs_flash_controller_0+0xff7f8d1c>
  802270:	dc401f17 	ldw	r17,124(sp)
  802274:	40800115 	stw	r2,4(r8)
  802278:	44000015 	stw	r16,0(r8)
  80227c:	8c400044 	addi	r17,r17,1
  802280:	d8c02015 	stw	r3,128(sp)
  802284:	dc401f15 	stw	r17,124(sp)
  802288:	008001c4 	movi	r2,7
  80228c:	14400e16 	blt	r2,r17,8022c8 <___vfprintf_internal_r+0x168c>
  802290:	45800204 	addi	r22,r8,8
  802294:	003eca06 	br	801dc0 <__alt_mem_epcs_flash_controller_0+0xff7f8dc0>
  802298:	010020b4 	movhi	r4,130
  80229c:	21296784 	addi	r4,r4,-23138
  8022a0:	d9002c15 	stw	r4,176(sp)
  8022a4:	d8802c17 	ldw	r2,176(sp)
  8022a8:	1c07883a 	add	r3,r3,r16
  8022ac:	8c400044 	addi	r17,r17,1
  8022b0:	b0800015 	stw	r2,0(r22)
  8022b4:	b4000115 	stw	r16,4(r22)
  8022b8:	d8c02015 	stw	r3,128(sp)
  8022bc:	dc401f15 	stw	r17,124(sp)
  8022c0:	008001c4 	movi	r2,7
  8022c4:	147ebd0e 	bge	r2,r17,801dbc <__alt_mem_epcs_flash_controller_0+0xff7f8dbc>
  8022c8:	d9002d17 	ldw	r4,180(sp)
  8022cc:	d9801e04 	addi	r6,sp,120
  8022d0:	b80b883a 	mov	r5,r23
  8022d4:	08085840 	call	808584 <__sprint_r>
  8022d8:	103b5c1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  8022dc:	d8c02017 	ldw	r3,128(sp)
  8022e0:	dc401f17 	ldw	r17,124(sp)
  8022e4:	dd800404 	addi	r22,sp,16
  8022e8:	003eb506 	br	801dc0 <__alt_mem_epcs_flash_controller_0+0xff7f8dc0>
  8022ec:	d9002d17 	ldw	r4,180(sp)
  8022f0:	d9801e04 	addi	r6,sp,120
  8022f4:	b80b883a 	mov	r5,r23
  8022f8:	08085840 	call	808584 <__sprint_r>
  8022fc:	103b531e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802300:	d8c02017 	ldw	r3,128(sp)
  802304:	dc401f17 	ldw	r17,124(sp)
  802308:	da000404 	addi	r8,sp,16
  80230c:	003e8d06 	br	801d44 <__alt_mem_epcs_flash_controller_0+0xff7f8d44>
  802310:	d9002d17 	ldw	r4,180(sp)
  802314:	d9801e04 	addi	r6,sp,120
  802318:	b80b883a 	mov	r5,r23
  80231c:	08085840 	call	808584 <__sprint_r>
  802320:	103b4a1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802324:	d8c02017 	ldw	r3,128(sp)
  802328:	dc401f17 	ldw	r17,124(sp)
  80232c:	dd800404 	addi	r22,sp,16
  802330:	003e8f06 	br	801d70 <__alt_mem_epcs_flash_controller_0+0xff7f8d70>
  802334:	0027883a 	mov	r19,zero
  802338:	003f4a06 	br	802064 <__alt_mem_epcs_flash_controller_0+0xff7f9064>
  80233c:	d9002d17 	ldw	r4,180(sp)
  802340:	d9801e04 	addi	r6,sp,120
  802344:	b80b883a 	mov	r5,r23
  802348:	08085840 	call	808584 <__sprint_r>
  80234c:	103b3f1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802350:	d8c02017 	ldw	r3,128(sp)
  802354:	da000404 	addi	r8,sp,16
  802358:	003c7b06 	br	801548 <__alt_mem_epcs_flash_controller_0+0xff7f8548>
  80235c:	d9402a17 	ldw	r5,168(sp)
  802360:	04e7c83a 	sub	r19,zero,r19
  802364:	07000b44 	movi	fp,45
  802368:	9804c03a 	cmpne	r2,r19,zero
  80236c:	05adc83a 	sub	r22,zero,r22
  802370:	df002785 	stb	fp,158(sp)
  802374:	b0adc83a 	sub	r22,r22,r2
  802378:	28017b16 	blt	r5,zero,802968 <___vfprintf_internal_r+0x1d2c>
  80237c:	00bfdfc4 	movi	r2,-129
  802380:	90a4703a 	and	r18,r18,r2
  802384:	003b8906 	br	8011ac <__alt_mem_epcs_flash_controller_0+0xff7f81ac>
  802388:	d9003617 	ldw	r4,216(sp)
  80238c:	d9403817 	ldw	r5,224(sp)
  802390:	da003d15 	stw	r8,244(sp)
  802394:	08081a80 	call	8081a8 <__fpclassifyd>
  802398:	da003d17 	ldw	r8,244(sp)
  80239c:	1000f026 	beq	r2,zero,802760 <___vfprintf_internal_r+0x1b24>
  8023a0:	d9002a17 	ldw	r4,168(sp)
  8023a4:	05bff7c4 	movi	r22,-33
  8023a8:	00bfffc4 	movi	r2,-1
  8023ac:	8dac703a 	and	r22,r17,r22
  8023b0:	20820026 	beq	r4,r2,802bb4 <___vfprintf_internal_r+0x1f78>
  8023b4:	008011c4 	movi	r2,71
  8023b8:	b081f726 	beq	r22,r2,802b98 <___vfprintf_internal_r+0x1f5c>
  8023bc:	d9003817 	ldw	r4,224(sp)
  8023c0:	90c04014 	ori	r3,r18,256
  8023c4:	d8c02c15 	stw	r3,176(sp)
  8023c8:	20021516 	blt	r4,zero,802c20 <___vfprintf_internal_r+0x1fe4>
  8023cc:	dcc03817 	ldw	r19,224(sp)
  8023d0:	d8002905 	stb	zero,164(sp)
  8023d4:	00801984 	movi	r2,102
  8023d8:	8881f926 	beq	r17,r2,802bc0 <___vfprintf_internal_r+0x1f84>
  8023dc:	00801184 	movi	r2,70
  8023e0:	88821c26 	beq	r17,r2,802c54 <___vfprintf_internal_r+0x2018>
  8023e4:	00801144 	movi	r2,69
  8023e8:	b081ef26 	beq	r22,r2,802ba8 <___vfprintf_internal_r+0x1f6c>
  8023ec:	d8c02a17 	ldw	r3,168(sp)
  8023f0:	d8802104 	addi	r2,sp,132
  8023f4:	d8800315 	stw	r2,12(sp)
  8023f8:	d9403617 	ldw	r5,216(sp)
  8023fc:	d8802504 	addi	r2,sp,148
  802400:	d9002d17 	ldw	r4,180(sp)
  802404:	d8800215 	stw	r2,8(sp)
  802408:	d8802604 	addi	r2,sp,152
  80240c:	d8c00015 	stw	r3,0(sp)
  802410:	d8800115 	stw	r2,4(sp)
  802414:	01c00084 	movi	r7,2
  802418:	980d883a 	mov	r6,r19
  80241c:	d8c03c15 	stw	r3,240(sp)
  802420:	da003d15 	stw	r8,244(sp)
  802424:	080336c0 	call	80336c <_dtoa_r>
  802428:	1021883a 	mov	r16,r2
  80242c:	008019c4 	movi	r2,103
  802430:	d8c03c17 	ldw	r3,240(sp)
  802434:	da003d17 	ldw	r8,244(sp)
  802438:	88817126 	beq	r17,r2,802a00 <___vfprintf_internal_r+0x1dc4>
  80243c:	008011c4 	movi	r2,71
  802440:	88829126 	beq	r17,r2,802e88 <___vfprintf_internal_r+0x224c>
  802444:	80f9883a 	add	fp,r16,r3
  802448:	d9003617 	ldw	r4,216(sp)
  80244c:	000d883a 	mov	r6,zero
  802450:	000f883a 	mov	r7,zero
  802454:	980b883a 	mov	r5,r19
  802458:	da003d15 	stw	r8,244(sp)
  80245c:	080c4e40 	call	80c4e4 <__eqdf2>
  802460:	da003d17 	ldw	r8,244(sp)
  802464:	10018d26 	beq	r2,zero,802a9c <___vfprintf_internal_r+0x1e60>
  802468:	d8802117 	ldw	r2,132(sp)
  80246c:	1700062e 	bgeu	r2,fp,802488 <___vfprintf_internal_r+0x184c>
  802470:	01000c04 	movi	r4,48
  802474:	10c00044 	addi	r3,r2,1
  802478:	d8c02115 	stw	r3,132(sp)
  80247c:	11000005 	stb	r4,0(r2)
  802480:	d8802117 	ldw	r2,132(sp)
  802484:	173ffb36 	bltu	r2,fp,802474 <__alt_mem_epcs_flash_controller_0+0xff7f9474>
  802488:	1405c83a 	sub	r2,r2,r16
  80248c:	d8803315 	stw	r2,204(sp)
  802490:	008011c4 	movi	r2,71
  802494:	b0817626 	beq	r22,r2,802a70 <___vfprintf_internal_r+0x1e34>
  802498:	00801944 	movi	r2,101
  80249c:	1442800e 	bge	r2,r17,802ea0 <___vfprintf_internal_r+0x2264>
  8024a0:	d8c02617 	ldw	r3,152(sp)
  8024a4:	00801984 	movi	r2,102
  8024a8:	d8c03215 	stw	r3,200(sp)
  8024ac:	8881fe26 	beq	r17,r2,802ca8 <___vfprintf_internal_r+0x206c>
  8024b0:	d8c03217 	ldw	r3,200(sp)
  8024b4:	d9003317 	ldw	r4,204(sp)
  8024b8:	1901dd16 	blt	r3,r4,802c30 <___vfprintf_internal_r+0x1ff4>
  8024bc:	9480004c 	andi	r18,r18,1
  8024c0:	90022b1e 	bne	r18,zero,802d70 <___vfprintf_internal_r+0x2134>
  8024c4:	1805883a 	mov	r2,r3
  8024c8:	18028316 	blt	r3,zero,802ed8 <___vfprintf_internal_r+0x229c>
  8024cc:	d8c03217 	ldw	r3,200(sp)
  8024d0:	044019c4 	movi	r17,103
  8024d4:	d8c02b15 	stw	r3,172(sp)
  8024d8:	df002907 	ldb	fp,164(sp)
  8024dc:	e001531e 	bne	fp,zero,802a2c <___vfprintf_internal_r+0x1df0>
  8024e0:	df002783 	ldbu	fp,158(sp)
  8024e4:	d8802915 	stw	r2,164(sp)
  8024e8:	dc802c17 	ldw	r18,176(sp)
  8024ec:	d8002a15 	stw	zero,168(sp)
  8024f0:	003baf06 	br	8013b0 <__alt_mem_epcs_flash_controller_0+0xff7f83b0>
  8024f4:	d8c02e17 	ldw	r3,184(sp)
  8024f8:	d9002e17 	ldw	r4,184(sp)
  8024fc:	d9402e17 	ldw	r5,184(sp)
  802500:	18c00017 	ldw	r3,0(r3)
  802504:	21000117 	ldw	r4,4(r4)
  802508:	29400204 	addi	r5,r5,8
  80250c:	d8c03615 	stw	r3,216(sp)
  802510:	d9003815 	stw	r4,224(sp)
  802514:	d9402e15 	stw	r5,184(sp)
  802518:	003b5006 	br	80125c <__alt_mem_epcs_flash_controller_0+0xff7f825c>
  80251c:	ac400007 	ldb	r17,0(r21)
  802520:	003a2806 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  802524:	9080100c 	andi	r2,r18,64
  802528:	1000a826 	beq	r2,zero,8027cc <___vfprintf_internal_r+0x1b90>
  80252c:	d8c02e17 	ldw	r3,184(sp)
  802530:	002d883a 	mov	r22,zero
  802534:	1cc0000b 	ldhu	r19,0(r3)
  802538:	18c00104 	addi	r3,r3,4
  80253c:	d8c02e15 	stw	r3,184(sp)
  802540:	003caf06 	br	801800 <__alt_mem_epcs_flash_controller_0+0xff7f8800>
  802544:	d9002e17 	ldw	r4,184(sp)
  802548:	d9402a17 	ldw	r5,168(sp)
  80254c:	002d883a 	mov	r22,zero
  802550:	20800104 	addi	r2,r4,4
  802554:	24c00017 	ldw	r19,0(r4)
  802558:	283ebb0e 	bge	r5,zero,802048 <__alt_mem_epcs_flash_controller_0+0xff7f9048>
  80255c:	003ef106 	br	802124 <__alt_mem_epcs_flash_controller_0+0xff7f9124>
  802560:	9080040c 	andi	r2,r18,16
  802564:	1000921e 	bne	r2,zero,8027b0 <___vfprintf_internal_r+0x1b74>
  802568:	9480100c 	andi	r18,r18,64
  80256c:	90013926 	beq	r18,zero,802a54 <___vfprintf_internal_r+0x1e18>
  802570:	d9402e17 	ldw	r5,184(sp)
  802574:	d8c02f17 	ldw	r3,188(sp)
  802578:	28800017 	ldw	r2,0(r5)
  80257c:	29400104 	addi	r5,r5,4
  802580:	d9402e15 	stw	r5,184(sp)
  802584:	10c0000d 	sth	r3,0(r2)
  802588:	0039e406 	br	800d1c <__alt_mem_epcs_flash_controller_0+0xff7f7d1c>
  80258c:	9080100c 	andi	r2,r18,64
  802590:	10008026 	beq	r2,zero,802794 <___vfprintf_internal_r+0x1b58>
  802594:	d8802e17 	ldw	r2,184(sp)
  802598:	14c0000f 	ldh	r19,0(r2)
  80259c:	10800104 	addi	r2,r2,4
  8025a0:	d8802e15 	stw	r2,184(sp)
  8025a4:	982dd7fa 	srai	r22,r19,31
  8025a8:	b005883a 	mov	r2,r22
  8025ac:	003af706 	br	80118c <__alt_mem_epcs_flash_controller_0+0xff7f818c>
  8025b0:	9080100c 	andi	r2,r18,64
  8025b4:	d8002785 	stb	zero,158(sp)
  8025b8:	10008a1e 	bne	r2,zero,8027e4 <___vfprintf_internal_r+0x1ba8>
  8025bc:	d9002e17 	ldw	r4,184(sp)
  8025c0:	d9402a17 	ldw	r5,168(sp)
  8025c4:	002d883a 	mov	r22,zero
  8025c8:	20800104 	addi	r2,r4,4
  8025cc:	24c00017 	ldw	r19,0(r4)
  8025d0:	283e4b0e 	bge	r5,zero,801f00 <__alt_mem_epcs_flash_controller_0+0xff7f8f00>
  8025d4:	9d86b03a 	or	r3,r19,r22
  8025d8:	d8802e15 	stw	r2,184(sp)
  8025dc:	183e4c1e 	bne	r3,zero,801f10 <__alt_mem_epcs_flash_controller_0+0xff7f8f10>
  8025e0:	0039883a 	mov	fp,zero
  8025e4:	0005883a 	mov	r2,zero
  8025e8:	003d4006 	br	801aec <__alt_mem_epcs_flash_controller_0+0xff7f8aec>
  8025ec:	014020b4 	movhi	r5,130
  8025f0:	29696784 	addi	r5,r5,-23138
  8025f4:	d9402c15 	stw	r5,176(sp)
  8025f8:	d9402c17 	ldw	r5,176(sp)
  8025fc:	1c47883a 	add	r3,r3,r17
  802600:	10800044 	addi	r2,r2,1
  802604:	41400015 	stw	r5,0(r8)
  802608:	44400115 	stw	r17,4(r8)
  80260c:	d8c02015 	stw	r3,128(sp)
  802610:	d8801f15 	stw	r2,124(sp)
  802614:	010001c4 	movi	r4,7
  802618:	20bec816 	blt	r4,r2,80213c <__alt_mem_epcs_flash_controller_0+0xff7f913c>
  80261c:	42000204 	addi	r8,r8,8
  802620:	003ecd06 	br	802158 <__alt_mem_epcs_flash_controller_0+0xff7f9158>
  802624:	d9002a17 	ldw	r4,168(sp)
  802628:	d8002785 	stb	zero,158(sp)
  80262c:	203d2d16 	blt	r4,zero,801ae4 <__alt_mem_epcs_flash_controller_0+0xff7f8ae4>
  802630:	00bfdfc4 	movi	r2,-129
  802634:	90a4703a 	and	r18,r18,r2
  802638:	003a6106 	br	800fc0 <__alt_mem_epcs_flash_controller_0+0xff7f7fc0>
  80263c:	010020b4 	movhi	r4,130
  802640:	21296784 	addi	r4,r4,-23138
  802644:	d9002c15 	stw	r4,176(sp)
  802648:	003bea06 	br	8015f4 <__alt_mem_epcs_flash_controller_0+0xff7f85f4>
  80264c:	d9002d17 	ldw	r4,180(sp)
  802650:	d9801e04 	addi	r6,sp,120
  802654:	b80b883a 	mov	r5,r23
  802658:	08085840 	call	808584 <__sprint_r>
  80265c:	103a7b1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802660:	d8c02017 	ldw	r3,128(sp)
  802664:	da000404 	addi	r8,sp,16
  802668:	003d4106 	br	801b70 <__alt_mem_epcs_flash_controller_0+0xff7f8b70>
  80266c:	d8801f17 	ldw	r2,124(sp)
  802670:	014020b4 	movhi	r5,130
  802674:	01000044 	movi	r4,1
  802678:	18c00044 	addi	r3,r3,1
  80267c:	10800044 	addi	r2,r2,1
  802680:	29696704 	addi	r5,r5,-23140
  802684:	41000115 	stw	r4,4(r8)
  802688:	41400015 	stw	r5,0(r8)
  80268c:	d8c02015 	stw	r3,128(sp)
  802690:	d8801f15 	stw	r2,124(sp)
  802694:	010001c4 	movi	r4,7
  802698:	20805c16 	blt	r4,r2,80280c <___vfprintf_internal_r+0x1bd0>
  80269c:	42000204 	addi	r8,r8,8
  8026a0:	8800041e 	bne	r17,zero,8026b4 <___vfprintf_internal_r+0x1a78>
  8026a4:	d8803317 	ldw	r2,204(sp)
  8026a8:	1000021e 	bne	r2,zero,8026b4 <___vfprintf_internal_r+0x1a78>
  8026ac:	9080004c 	andi	r2,r18,1
  8026b0:	103be726 	beq	r2,zero,801650 <__alt_mem_epcs_flash_controller_0+0xff7f8650>
  8026b4:	d9003717 	ldw	r4,220(sp)
  8026b8:	d8801f17 	ldw	r2,124(sp)
  8026bc:	d9403417 	ldw	r5,208(sp)
  8026c0:	20c7883a 	add	r3,r4,r3
  8026c4:	10800044 	addi	r2,r2,1
  8026c8:	41000115 	stw	r4,4(r8)
  8026cc:	41400015 	stw	r5,0(r8)
  8026d0:	d8c02015 	stw	r3,128(sp)
  8026d4:	d8801f15 	stw	r2,124(sp)
  8026d8:	010001c4 	movi	r4,7
  8026dc:	20812116 	blt	r4,r2,802b64 <___vfprintf_internal_r+0x1f28>
  8026e0:	42000204 	addi	r8,r8,8
  8026e4:	0463c83a 	sub	r17,zero,r17
  8026e8:	0440730e 	bge	zero,r17,8028b8 <___vfprintf_internal_r+0x1c7c>
  8026ec:	05800404 	movi	r22,16
  8026f0:	b440860e 	bge	r22,r17,80290c <___vfprintf_internal_r+0x1cd0>
  8026f4:	014020b4 	movhi	r5,130
  8026f8:	29696784 	addi	r5,r5,-23138
  8026fc:	d9402c15 	stw	r5,176(sp)
  802700:	070001c4 	movi	fp,7
  802704:	dcc02d17 	ldw	r19,180(sp)
  802708:	00000306 	br	802718 <___vfprintf_internal_r+0x1adc>
  80270c:	42000204 	addi	r8,r8,8
  802710:	8c7ffc04 	addi	r17,r17,-16
  802714:	b440800e 	bge	r22,r17,802918 <___vfprintf_internal_r+0x1cdc>
  802718:	18c00404 	addi	r3,r3,16
  80271c:	10800044 	addi	r2,r2,1
  802720:	45000015 	stw	r20,0(r8)
  802724:	45800115 	stw	r22,4(r8)
  802728:	d8c02015 	stw	r3,128(sp)
  80272c:	d8801f15 	stw	r2,124(sp)
  802730:	e0bff60e 	bge	fp,r2,80270c <__alt_mem_epcs_flash_controller_0+0xff7f970c>
  802734:	d9801e04 	addi	r6,sp,120
  802738:	b80b883a 	mov	r5,r23
  80273c:	9809883a 	mov	r4,r19
  802740:	08085840 	call	808584 <__sprint_r>
  802744:	103a411e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802748:	d8c02017 	ldw	r3,128(sp)
  80274c:	d8801f17 	ldw	r2,124(sp)
  802750:	da000404 	addi	r8,sp,16
  802754:	003fee06 	br	802710 <__alt_mem_epcs_flash_controller_0+0xff7f9710>
  802758:	00bfffc4 	movi	r2,-1
  80275c:	003a3f06 	br	80105c <__alt_mem_epcs_flash_controller_0+0xff7f805c>
  802760:	008011c4 	movi	r2,71
  802764:	1440b816 	blt	r2,r17,802a48 <___vfprintf_internal_r+0x1e0c>
  802768:	040020b4 	movhi	r16,130
  80276c:	84295904 	addi	r16,r16,-23196
  802770:	00c000c4 	movi	r3,3
  802774:	00bfdfc4 	movi	r2,-129
  802778:	d8c02915 	stw	r3,164(sp)
  80277c:	90a4703a 	and	r18,r18,r2
  802780:	df002783 	ldbu	fp,158(sp)
  802784:	d8c02b15 	stw	r3,172(sp)
  802788:	d8002a15 	stw	zero,168(sp)
  80278c:	d8003215 	stw	zero,200(sp)
  802790:	003b0706 	br	8013b0 <__alt_mem_epcs_flash_controller_0+0xff7f83b0>
  802794:	d8c02e17 	ldw	r3,184(sp)
  802798:	1cc00017 	ldw	r19,0(r3)
  80279c:	18c00104 	addi	r3,r3,4
  8027a0:	d8c02e15 	stw	r3,184(sp)
  8027a4:	982dd7fa 	srai	r22,r19,31
  8027a8:	b005883a 	mov	r2,r22
  8027ac:	003a7706 	br	80118c <__alt_mem_epcs_flash_controller_0+0xff7f818c>
  8027b0:	d8c02e17 	ldw	r3,184(sp)
  8027b4:	d9002f17 	ldw	r4,188(sp)
  8027b8:	18800017 	ldw	r2,0(r3)
  8027bc:	18c00104 	addi	r3,r3,4
  8027c0:	d8c02e15 	stw	r3,184(sp)
  8027c4:	11000015 	stw	r4,0(r2)
  8027c8:	00395406 	br	800d1c <__alt_mem_epcs_flash_controller_0+0xff7f7d1c>
  8027cc:	d9002e17 	ldw	r4,184(sp)
  8027d0:	002d883a 	mov	r22,zero
  8027d4:	24c00017 	ldw	r19,0(r4)
  8027d8:	21000104 	addi	r4,r4,4
  8027dc:	d9002e15 	stw	r4,184(sp)
  8027e0:	003c0706 	br	801800 <__alt_mem_epcs_flash_controller_0+0xff7f8800>
  8027e4:	d9402e17 	ldw	r5,184(sp)
  8027e8:	d8c02a17 	ldw	r3,168(sp)
  8027ec:	002d883a 	mov	r22,zero
  8027f0:	28800104 	addi	r2,r5,4
  8027f4:	2cc0000b 	ldhu	r19,0(r5)
  8027f8:	183dc10e 	bge	r3,zero,801f00 <__alt_mem_epcs_flash_controller_0+0xff7f8f00>
  8027fc:	003f7506 	br	8025d4 <__alt_mem_epcs_flash_controller_0+0xff7f95d4>
  802800:	040020b4 	movhi	r16,130
  802804:	84295704 	addi	r16,r16,-23204
  802808:	003aa706 	br	8012a8 <__alt_mem_epcs_flash_controller_0+0xff7f82a8>
  80280c:	d9002d17 	ldw	r4,180(sp)
  802810:	d9801e04 	addi	r6,sp,120
  802814:	b80b883a 	mov	r5,r23
  802818:	08085840 	call	808584 <__sprint_r>
  80281c:	103a0b1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802820:	dc402617 	ldw	r17,152(sp)
  802824:	d8c02017 	ldw	r3,128(sp)
  802828:	da000404 	addi	r8,sp,16
  80282c:	003f9c06 	br	8026a0 <__alt_mem_epcs_flash_controller_0+0xff7f96a0>
  802830:	ac400043 	ldbu	r17,1(r21)
  802834:	84000814 	ori	r16,r16,32
  802838:	ad400044 	addi	r21,r21,1
  80283c:	8c403fcc 	andi	r17,r17,255
  802840:	8c40201c 	xori	r17,r17,128
  802844:	8c7fe004 	addi	r17,r17,-128
  802848:	00395e06 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  80284c:	d8c02e15 	stw	r3,184(sp)
  802850:	0039883a 	mov	fp,zero
  802854:	003e3506 	br	80212c <__alt_mem_epcs_flash_controller_0+0xff7f912c>
  802858:	d9002d17 	ldw	r4,180(sp)
  80285c:	d9801e04 	addi	r6,sp,120
  802860:	b80b883a 	mov	r5,r23
  802864:	08085840 	call	808584 <__sprint_r>
  802868:	1039f81e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  80286c:	d8c02017 	ldw	r3,128(sp)
  802870:	da000404 	addi	r8,sp,16
  802874:	003cd006 	br	801bb8 <__alt_mem_epcs_flash_controller_0+0xff7f8bb8>
  802878:	8009883a 	mov	r4,r16
  80287c:	df003d15 	stw	fp,244(sp)
  802880:	0800ba40 	call	800ba4 <strlen>
  802884:	d8802b15 	stw	r2,172(sp)
  802888:	da003d17 	ldw	r8,244(sp)
  80288c:	103c200e 	bge	r2,zero,801910 <__alt_mem_epcs_flash_controller_0+0xff7f8910>
  802890:	0005883a 	mov	r2,zero
  802894:	003c1e06 	br	801910 <__alt_mem_epcs_flash_controller_0+0xff7f8910>
  802898:	d9002d17 	ldw	r4,180(sp)
  80289c:	d9801e04 	addi	r6,sp,120
  8028a0:	b80b883a 	mov	r5,r23
  8028a4:	08085840 	call	808584 <__sprint_r>
  8028a8:	1039e81e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  8028ac:	d8c02017 	ldw	r3,128(sp)
  8028b0:	d8801f17 	ldw	r2,124(sp)
  8028b4:	da000404 	addi	r8,sp,16
  8028b8:	d9403317 	ldw	r5,204(sp)
  8028bc:	10800044 	addi	r2,r2,1
  8028c0:	44000015 	stw	r16,0(r8)
  8028c4:	28c7883a 	add	r3,r5,r3
  8028c8:	003b5b06 	br	801638 <__alt_mem_epcs_flash_controller_0+0xff7f8638>
  8028cc:	010020b4 	movhi	r4,130
  8028d0:	21296b84 	addi	r4,r4,-23122
  8028d4:	d9003515 	stw	r4,212(sp)
  8028d8:	003af206 	br	8014a4 <__alt_mem_epcs_flash_controller_0+0xff7f84a4>
  8028dc:	013fffc4 	movi	r4,-1
  8028e0:	003a0806 	br	801104 <__alt_mem_epcs_flash_controller_0+0xff7f8104>
  8028e4:	0023883a 	mov	r17,zero
  8028e8:	003d9d06 	br	801f60 <__alt_mem_epcs_flash_controller_0+0xff7f8f60>
  8028ec:	d9002d17 	ldw	r4,180(sp)
  8028f0:	d9801e04 	addi	r6,sp,120
  8028f4:	b80b883a 	mov	r5,r23
  8028f8:	08085840 	call	808584 <__sprint_r>
  8028fc:	1039d31e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802900:	d8c02017 	ldw	r3,128(sp)
  802904:	da000404 	addi	r8,sp,16
  802908:	003d9406 	br	801f5c <__alt_mem_epcs_flash_controller_0+0xff7f8f5c>
  80290c:	010020b4 	movhi	r4,130
  802910:	21296784 	addi	r4,r4,-23138
  802914:	d9002c15 	stw	r4,176(sp)
  802918:	d9002c17 	ldw	r4,176(sp)
  80291c:	1c47883a 	add	r3,r3,r17
  802920:	10800044 	addi	r2,r2,1
  802924:	41000015 	stw	r4,0(r8)
  802928:	44400115 	stw	r17,4(r8)
  80292c:	d8c02015 	stw	r3,128(sp)
  802930:	d8801f15 	stw	r2,124(sp)
  802934:	010001c4 	movi	r4,7
  802938:	20bfd716 	blt	r4,r2,802898 <__alt_mem_epcs_flash_controller_0+0xff7f9898>
  80293c:	42000204 	addi	r8,r8,8
  802940:	003fdd06 	br	8028b8 <__alt_mem_epcs_flash_controller_0+0xff7f98b8>
  802944:	d9002d17 	ldw	r4,180(sp)
  802948:	d9801e04 	addi	r6,sp,120
  80294c:	b80b883a 	mov	r5,r23
  802950:	08085840 	call	808584 <__sprint_r>
  802954:	1039bd1e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802958:	d8802617 	ldw	r2,152(sp)
  80295c:	d8c02017 	ldw	r3,128(sp)
  802960:	da000404 	addi	r8,sp,16
  802964:	003e1006 	br	8021a8 <__alt_mem_epcs_flash_controller_0+0xff7f91a8>
  802968:	00800044 	movi	r2,1
  80296c:	10803fcc 	andi	r2,r2,255
  802970:	00c00044 	movi	r3,1
  802974:	10fa0d26 	beq	r2,r3,8011ac <__alt_mem_epcs_flash_controller_0+0xff7f81ac>
  802978:	00c00084 	movi	r3,2
  80297c:	10fbaf26 	beq	r2,r3,80183c <__alt_mem_epcs_flash_controller_0+0xff7f883c>
  802980:	003a6d06 	br	801338 <__alt_mem_epcs_flash_controller_0+0xff7f8338>
  802984:	010020b4 	movhi	r4,130
  802988:	21296b84 	addi	r4,r4,-23122
  80298c:	d9003515 	stw	r4,212(sp)
  802990:	003b5406 	br	8016e4 <__alt_mem_epcs_flash_controller_0+0xff7f86e4>
  802994:	d8802a17 	ldw	r2,168(sp)
  802998:	00c00184 	movi	r3,6
  80299c:	1880012e 	bgeu	r3,r2,8029a4 <___vfprintf_internal_r+0x1d68>
  8029a0:	1805883a 	mov	r2,r3
  8029a4:	d8802b15 	stw	r2,172(sp)
  8029a8:	1000ef16 	blt	r2,zero,802d68 <___vfprintf_internal_r+0x212c>
  8029ac:	040020b4 	movhi	r16,130
  8029b0:	d8802915 	stw	r2,164(sp)
  8029b4:	dcc02e15 	stw	r19,184(sp)
  8029b8:	d8002a15 	stw	zero,168(sp)
  8029bc:	d8003215 	stw	zero,200(sp)
  8029c0:	84296504 	addi	r16,r16,-23148
  8029c4:	0039883a 	mov	fp,zero
  8029c8:	003a8006 	br	8013cc <__alt_mem_epcs_flash_controller_0+0xff7f83cc>
  8029cc:	0021883a 	mov	r16,zero
  8029d0:	003e0706 	br	8021f0 <__alt_mem_epcs_flash_controller_0+0xff7f91f0>
  8029d4:	d9002d17 	ldw	r4,180(sp)
  8029d8:	d9801e04 	addi	r6,sp,120
  8029dc:	b80b883a 	mov	r5,r23
  8029e0:	08085840 	call	808584 <__sprint_r>
  8029e4:	1039991e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  8029e8:	d8802617 	ldw	r2,152(sp)
  8029ec:	d9403317 	ldw	r5,204(sp)
  8029f0:	d8c02017 	ldw	r3,128(sp)
  8029f4:	da000404 	addi	r8,sp,16
  8029f8:	2885c83a 	sub	r2,r5,r2
  8029fc:	003dfb06 	br	8021ec <__alt_mem_epcs_flash_controller_0+0xff7f91ec>
  802a00:	9080004c 	andi	r2,r18,1
  802a04:	103e8f1e 	bne	r2,zero,802444 <__alt_mem_epcs_flash_controller_0+0xff7f9444>
  802a08:	d8802117 	ldw	r2,132(sp)
  802a0c:	003e9e06 	br	802488 <__alt_mem_epcs_flash_controller_0+0xff7f9488>
  802a10:	1025883a 	mov	r18,r2
  802a14:	0039883a 	mov	fp,zero
  802a18:	00800084 	movi	r2,2
  802a1c:	003fd306 	br	80296c <__alt_mem_epcs_flash_controller_0+0xff7f996c>
  802a20:	07000b44 	movi	fp,45
  802a24:	df002785 	stb	fp,158(sp)
  802a28:	003a1b06 	br	801298 <__alt_mem_epcs_flash_controller_0+0xff7f8298>
  802a2c:	00c00b44 	movi	r3,45
  802a30:	d8c02785 	stb	r3,158(sp)
  802a34:	d8802915 	stw	r2,164(sp)
  802a38:	dc802c17 	ldw	r18,176(sp)
  802a3c:	d8002a15 	stw	zero,168(sp)
  802a40:	07000b44 	movi	fp,45
  802a44:	003a5e06 	br	8013c0 <__alt_mem_epcs_flash_controller_0+0xff7f83c0>
  802a48:	040020b4 	movhi	r16,130
  802a4c:	84295a04 	addi	r16,r16,-23192
  802a50:	003f4706 	br	802770 <__alt_mem_epcs_flash_controller_0+0xff7f9770>
  802a54:	d9002e17 	ldw	r4,184(sp)
  802a58:	d9402f17 	ldw	r5,188(sp)
  802a5c:	20800017 	ldw	r2,0(r4)
  802a60:	21000104 	addi	r4,r4,4
  802a64:	d9002e15 	stw	r4,184(sp)
  802a68:	11400015 	stw	r5,0(r2)
  802a6c:	0038ab06 	br	800d1c <__alt_mem_epcs_flash_controller_0+0xff7f7d1c>
  802a70:	dd802617 	ldw	r22,152(sp)
  802a74:	00bfff44 	movi	r2,-3
  802a78:	b0801c16 	blt	r22,r2,802aec <___vfprintf_internal_r+0x1eb0>
  802a7c:	d9402a17 	ldw	r5,168(sp)
  802a80:	2d801a16 	blt	r5,r22,802aec <___vfprintf_internal_r+0x1eb0>
  802a84:	dd803215 	stw	r22,200(sp)
  802a88:	003e8906 	br	8024b0 <__alt_mem_epcs_flash_controller_0+0xff7f94b0>
  802a8c:	010020b4 	movhi	r4,130
  802a90:	21296784 	addi	r4,r4,-23138
  802a94:	d9002c15 	stw	r4,176(sp)
  802a98:	003c9106 	br	801ce0 <__alt_mem_epcs_flash_controller_0+0xff7f8ce0>
  802a9c:	e005883a 	mov	r2,fp
  802aa0:	003e7906 	br	802488 <__alt_mem_epcs_flash_controller_0+0xff7f9488>
  802aa4:	d9002a17 	ldw	r4,168(sp)
  802aa8:	df002783 	ldbu	fp,158(sp)
  802aac:	dcc02e15 	stw	r19,184(sp)
  802ab0:	d9002915 	stw	r4,164(sp)
  802ab4:	d9002b15 	stw	r4,172(sp)
  802ab8:	d8002a15 	stw	zero,168(sp)
  802abc:	d8003215 	stw	zero,200(sp)
  802ac0:	003a3b06 	br	8013b0 <__alt_mem_epcs_flash_controller_0+0xff7f83b0>
  802ac4:	9080004c 	andi	r2,r18,1
  802ac8:	0039883a 	mov	fp,zero
  802acc:	10000426 	beq	r2,zero,802ae0 <___vfprintf_internal_r+0x1ea4>
  802ad0:	00800c04 	movi	r2,48
  802ad4:	dc001dc4 	addi	r16,sp,119
  802ad8:	d8801dc5 	stb	r2,119(sp)
  802adc:	003b6406 	br	801870 <__alt_mem_epcs_flash_controller_0+0xff7f8870>
  802ae0:	d8002b15 	stw	zero,172(sp)
  802ae4:	dc001e04 	addi	r16,sp,120
  802ae8:	003a2b06 	br	801398 <__alt_mem_epcs_flash_controller_0+0xff7f8398>
  802aec:	8c7fff84 	addi	r17,r17,-2
  802af0:	b5bfffc4 	addi	r22,r22,-1
  802af4:	dd802615 	stw	r22,152(sp)
  802af8:	dc4022c5 	stb	r17,139(sp)
  802afc:	b000bf16 	blt	r22,zero,802dfc <___vfprintf_internal_r+0x21c0>
  802b00:	00800ac4 	movi	r2,43
  802b04:	d8802305 	stb	r2,140(sp)
  802b08:	00800244 	movi	r2,9
  802b0c:	15807016 	blt	r2,r22,802cd0 <___vfprintf_internal_r+0x2094>
  802b10:	00800c04 	movi	r2,48
  802b14:	b5800c04 	addi	r22,r22,48
  802b18:	d8802345 	stb	r2,141(sp)
  802b1c:	dd802385 	stb	r22,142(sp)
  802b20:	d88023c4 	addi	r2,sp,143
  802b24:	df0022c4 	addi	fp,sp,139
  802b28:	d8c03317 	ldw	r3,204(sp)
  802b2c:	1739c83a 	sub	fp,r2,fp
  802b30:	d9003317 	ldw	r4,204(sp)
  802b34:	e0c7883a 	add	r3,fp,r3
  802b38:	df003a15 	stw	fp,232(sp)
  802b3c:	d8c02b15 	stw	r3,172(sp)
  802b40:	00800044 	movi	r2,1
  802b44:	1100b30e 	bge	r2,r4,802e14 <___vfprintf_internal_r+0x21d8>
  802b48:	d8c02b17 	ldw	r3,172(sp)
  802b4c:	18c00044 	addi	r3,r3,1
  802b50:	d8c02b15 	stw	r3,172(sp)
  802b54:	1805883a 	mov	r2,r3
  802b58:	1800ac16 	blt	r3,zero,802e0c <___vfprintf_internal_r+0x21d0>
  802b5c:	d8003215 	stw	zero,200(sp)
  802b60:	003e5d06 	br	8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802b64:	d9002d17 	ldw	r4,180(sp)
  802b68:	d9801e04 	addi	r6,sp,120
  802b6c:	b80b883a 	mov	r5,r23
  802b70:	08085840 	call	808584 <__sprint_r>
  802b74:	1039351e 	bne	r2,zero,80104c <__alt_mem_epcs_flash_controller_0+0xff7f804c>
  802b78:	dc402617 	ldw	r17,152(sp)
  802b7c:	d8c02017 	ldw	r3,128(sp)
  802b80:	d8801f17 	ldw	r2,124(sp)
  802b84:	da000404 	addi	r8,sp,16
  802b88:	003ed606 	br	8026e4 <__alt_mem_epcs_flash_controller_0+0xff7f96e4>
  802b8c:	182b883a 	mov	r21,r3
  802b90:	d8002a15 	stw	zero,168(sp)
  802b94:	00388c06 	br	800dc8 <__alt_mem_epcs_flash_controller_0+0xff7f7dc8>
  802b98:	d8802a17 	ldw	r2,168(sp)
  802b9c:	103e071e 	bne	r2,zero,8023bc <__alt_mem_epcs_flash_controller_0+0xff7f93bc>
  802ba0:	dc002a15 	stw	r16,168(sp)
  802ba4:	003e0506 	br	8023bc <__alt_mem_epcs_flash_controller_0+0xff7f93bc>
  802ba8:	d9002a17 	ldw	r4,168(sp)
  802bac:	20c00044 	addi	r3,r4,1
  802bb0:	003e0f06 	br	8023f0 <__alt_mem_epcs_flash_controller_0+0xff7f93f0>
  802bb4:	01400184 	movi	r5,6
  802bb8:	d9402a15 	stw	r5,168(sp)
  802bbc:	003dff06 	br	8023bc <__alt_mem_epcs_flash_controller_0+0xff7f93bc>
  802bc0:	d8802104 	addi	r2,sp,132
  802bc4:	d8800315 	stw	r2,12(sp)
  802bc8:	d8802504 	addi	r2,sp,148
  802bcc:	d8800215 	stw	r2,8(sp)
  802bd0:	d8802604 	addi	r2,sp,152
  802bd4:	d8800115 	stw	r2,4(sp)
  802bd8:	d8802a17 	ldw	r2,168(sp)
  802bdc:	d9403617 	ldw	r5,216(sp)
  802be0:	d9002d17 	ldw	r4,180(sp)
  802be4:	d8800015 	stw	r2,0(sp)
  802be8:	01c000c4 	movi	r7,3
  802bec:	980d883a 	mov	r6,r19
  802bf0:	da003d15 	stw	r8,244(sp)
  802bf4:	080336c0 	call	80336c <_dtoa_r>
  802bf8:	d8c02a17 	ldw	r3,168(sp)
  802bfc:	da003d17 	ldw	r8,244(sp)
  802c00:	1021883a 	mov	r16,r2
  802c04:	10f9883a 	add	fp,r2,r3
  802c08:	81000007 	ldb	r4,0(r16)
  802c0c:	00800c04 	movi	r2,48
  802c10:	20805e26 	beq	r4,r2,802d8c <___vfprintf_internal_r+0x2150>
  802c14:	d8c02617 	ldw	r3,152(sp)
  802c18:	e0f9883a 	add	fp,fp,r3
  802c1c:	003e0a06 	br	802448 <__alt_mem_epcs_flash_controller_0+0xff7f9448>
  802c20:	00c00b44 	movi	r3,45
  802c24:	24e0003c 	xorhi	r19,r4,32768
  802c28:	d8c02905 	stb	r3,164(sp)
  802c2c:	003de906 	br	8023d4 <__alt_mem_epcs_flash_controller_0+0xff7f93d4>
  802c30:	d8c03217 	ldw	r3,200(sp)
  802c34:	00c07a0e 	bge	zero,r3,802e20 <___vfprintf_internal_r+0x21e4>
  802c38:	00800044 	movi	r2,1
  802c3c:	d9003317 	ldw	r4,204(sp)
  802c40:	1105883a 	add	r2,r2,r4
  802c44:	d8802b15 	stw	r2,172(sp)
  802c48:	10004e16 	blt	r2,zero,802d84 <___vfprintf_internal_r+0x2148>
  802c4c:	044019c4 	movi	r17,103
  802c50:	003e2106 	br	8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802c54:	d9002a17 	ldw	r4,168(sp)
  802c58:	d8802104 	addi	r2,sp,132
  802c5c:	d8800315 	stw	r2,12(sp)
  802c60:	d9000015 	stw	r4,0(sp)
  802c64:	d8802504 	addi	r2,sp,148
  802c68:	d9403617 	ldw	r5,216(sp)
  802c6c:	d9002d17 	ldw	r4,180(sp)
  802c70:	d8800215 	stw	r2,8(sp)
  802c74:	d8802604 	addi	r2,sp,152
  802c78:	d8800115 	stw	r2,4(sp)
  802c7c:	01c000c4 	movi	r7,3
  802c80:	980d883a 	mov	r6,r19
  802c84:	da003d15 	stw	r8,244(sp)
  802c88:	080336c0 	call	80336c <_dtoa_r>
  802c8c:	d8c02a17 	ldw	r3,168(sp)
  802c90:	da003d17 	ldw	r8,244(sp)
  802c94:	1021883a 	mov	r16,r2
  802c98:	00801184 	movi	r2,70
  802c9c:	80f9883a 	add	fp,r16,r3
  802ca0:	88bfd926 	beq	r17,r2,802c08 <__alt_mem_epcs_flash_controller_0+0xff7f9c08>
  802ca4:	003de806 	br	802448 <__alt_mem_epcs_flash_controller_0+0xff7f9448>
  802ca8:	d9002a17 	ldw	r4,168(sp)
  802cac:	00c04d0e 	bge	zero,r3,802de4 <___vfprintf_internal_r+0x21a8>
  802cb0:	2000441e 	bne	r4,zero,802dc4 <___vfprintf_internal_r+0x2188>
  802cb4:	9480004c 	andi	r18,r18,1
  802cb8:	9000421e 	bne	r18,zero,802dc4 <___vfprintf_internal_r+0x2188>
  802cbc:	1805883a 	mov	r2,r3
  802cc0:	18006f16 	blt	r3,zero,802e80 <___vfprintf_internal_r+0x2244>
  802cc4:	d8c03217 	ldw	r3,200(sp)
  802cc8:	d8c02b15 	stw	r3,172(sp)
  802ccc:	003e0206 	br	8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802cd0:	df0022c4 	addi	fp,sp,139
  802cd4:	dc002a15 	stw	r16,168(sp)
  802cd8:	4027883a 	mov	r19,r8
  802cdc:	e021883a 	mov	r16,fp
  802ce0:	b009883a 	mov	r4,r22
  802ce4:	01400284 	movi	r5,10
  802ce8:	080b1100 	call	80b110 <__modsi3>
  802cec:	10800c04 	addi	r2,r2,48
  802cf0:	843fffc4 	addi	r16,r16,-1
  802cf4:	b009883a 	mov	r4,r22
  802cf8:	01400284 	movi	r5,10
  802cfc:	80800005 	stb	r2,0(r16)
  802d00:	080b08c0 	call	80b08c <__divsi3>
  802d04:	102d883a 	mov	r22,r2
  802d08:	00800244 	movi	r2,9
  802d0c:	15bff416 	blt	r2,r22,802ce0 <__alt_mem_epcs_flash_controller_0+0xff7f9ce0>
  802d10:	9811883a 	mov	r8,r19
  802d14:	b0800c04 	addi	r2,r22,48
  802d18:	8027883a 	mov	r19,r16
  802d1c:	997fffc4 	addi	r5,r19,-1
  802d20:	98bfffc5 	stb	r2,-1(r19)
  802d24:	dc002a17 	ldw	r16,168(sp)
  802d28:	2f006d2e 	bgeu	r5,fp,802ee0 <___vfprintf_internal_r+0x22a4>
  802d2c:	d9c02384 	addi	r7,sp,142
  802d30:	3ccfc83a 	sub	r7,r7,r19
  802d34:	d9002344 	addi	r4,sp,141
  802d38:	e1cf883a 	add	r7,fp,r7
  802d3c:	00000106 	br	802d44 <___vfprintf_internal_r+0x2108>
  802d40:	28800003 	ldbu	r2,0(r5)
  802d44:	20800005 	stb	r2,0(r4)
  802d48:	21000044 	addi	r4,r4,1
  802d4c:	29400044 	addi	r5,r5,1
  802d50:	393ffb1e 	bne	r7,r4,802d40 <__alt_mem_epcs_flash_controller_0+0xff7f9d40>
  802d54:	d8802304 	addi	r2,sp,140
  802d58:	14c5c83a 	sub	r2,r2,r19
  802d5c:	d8c02344 	addi	r3,sp,141
  802d60:	1885883a 	add	r2,r3,r2
  802d64:	003f7006 	br	802b28 <__alt_mem_epcs_flash_controller_0+0xff7f9b28>
  802d68:	0005883a 	mov	r2,zero
  802d6c:	003f0f06 	br	8029ac <__alt_mem_epcs_flash_controller_0+0xff7f99ac>
  802d70:	d8c03217 	ldw	r3,200(sp)
  802d74:	18c00044 	addi	r3,r3,1
  802d78:	d8c02b15 	stw	r3,172(sp)
  802d7c:	1805883a 	mov	r2,r3
  802d80:	183fb20e 	bge	r3,zero,802c4c <__alt_mem_epcs_flash_controller_0+0xff7f9c4c>
  802d84:	0005883a 	mov	r2,zero
  802d88:	003fb006 	br	802c4c <__alt_mem_epcs_flash_controller_0+0xff7f9c4c>
  802d8c:	d9003617 	ldw	r4,216(sp)
  802d90:	000d883a 	mov	r6,zero
  802d94:	000f883a 	mov	r7,zero
  802d98:	980b883a 	mov	r5,r19
  802d9c:	d8c03c15 	stw	r3,240(sp)
  802da0:	da003d15 	stw	r8,244(sp)
  802da4:	080c4e40 	call	80c4e4 <__eqdf2>
  802da8:	d8c03c17 	ldw	r3,240(sp)
  802dac:	da003d17 	ldw	r8,244(sp)
  802db0:	103f9826 	beq	r2,zero,802c14 <__alt_mem_epcs_flash_controller_0+0xff7f9c14>
  802db4:	00800044 	movi	r2,1
  802db8:	10c7c83a 	sub	r3,r2,r3
  802dbc:	d8c02615 	stw	r3,152(sp)
  802dc0:	003f9506 	br	802c18 <__alt_mem_epcs_flash_controller_0+0xff7f9c18>
  802dc4:	d9002a17 	ldw	r4,168(sp)
  802dc8:	d8c03217 	ldw	r3,200(sp)
  802dcc:	20800044 	addi	r2,r4,1
  802dd0:	1885883a 	add	r2,r3,r2
  802dd4:	d8802b15 	stw	r2,172(sp)
  802dd8:	103dbf0e 	bge	r2,zero,8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802ddc:	0005883a 	mov	r2,zero
  802de0:	003dbd06 	br	8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802de4:	2000201e 	bne	r4,zero,802e68 <___vfprintf_internal_r+0x222c>
  802de8:	9480004c 	andi	r18,r18,1
  802dec:	90001e1e 	bne	r18,zero,802e68 <___vfprintf_internal_r+0x222c>
  802df0:	00800044 	movi	r2,1
  802df4:	d8802b15 	stw	r2,172(sp)
  802df8:	003db706 	br	8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802dfc:	00800b44 	movi	r2,45
  802e00:	05adc83a 	sub	r22,zero,r22
  802e04:	d8802305 	stb	r2,140(sp)
  802e08:	003f3f06 	br	802b08 <__alt_mem_epcs_flash_controller_0+0xff7f9b08>
  802e0c:	0005883a 	mov	r2,zero
  802e10:	003f5206 	br	802b5c <__alt_mem_epcs_flash_controller_0+0xff7f9b5c>
  802e14:	90a4703a 	and	r18,r18,r2
  802e18:	903f4e26 	beq	r18,zero,802b54 <__alt_mem_epcs_flash_controller_0+0xff7f9b54>
  802e1c:	003f4a06 	br	802b48 <__alt_mem_epcs_flash_controller_0+0xff7f9b48>
  802e20:	00800084 	movi	r2,2
  802e24:	10c5c83a 	sub	r2,r2,r3
  802e28:	003f8406 	br	802c3c <__alt_mem_epcs_flash_controller_0+0xff7f9c3c>
  802e2c:	d9402e17 	ldw	r5,184(sp)
  802e30:	d9002e17 	ldw	r4,184(sp)
  802e34:	ac400043 	ldbu	r17,1(r21)
  802e38:	29400017 	ldw	r5,0(r5)
  802e3c:	20800104 	addi	r2,r4,4
  802e40:	d8802e15 	stw	r2,184(sp)
  802e44:	d9402a15 	stw	r5,168(sp)
  802e48:	182b883a 	mov	r21,r3
  802e4c:	283e7b0e 	bge	r5,zero,80283c <__alt_mem_epcs_flash_controller_0+0xff7f983c>
  802e50:	8c403fcc 	andi	r17,r17,255
  802e54:	017fffc4 	movi	r5,-1
  802e58:	8c40201c 	xori	r17,r17,128
  802e5c:	d9402a15 	stw	r5,168(sp)
  802e60:	8c7fe004 	addi	r17,r17,-128
  802e64:	0037d706 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>
  802e68:	d8c02a17 	ldw	r3,168(sp)
  802e6c:	18c00084 	addi	r3,r3,2
  802e70:	d8c02b15 	stw	r3,172(sp)
  802e74:	1805883a 	mov	r2,r3
  802e78:	183d970e 	bge	r3,zero,8024d8 <__alt_mem_epcs_flash_controller_0+0xff7f94d8>
  802e7c:	003fd706 	br	802ddc <__alt_mem_epcs_flash_controller_0+0xff7f9ddc>
  802e80:	0005883a 	mov	r2,zero
  802e84:	003f8f06 	br	802cc4 <__alt_mem_epcs_flash_controller_0+0xff7f9cc4>
  802e88:	9080004c 	andi	r2,r18,1
  802e8c:	103f821e 	bne	r2,zero,802c98 <__alt_mem_epcs_flash_controller_0+0xff7f9c98>
  802e90:	d8802117 	ldw	r2,132(sp)
  802e94:	1405c83a 	sub	r2,r2,r16
  802e98:	d8803315 	stw	r2,204(sp)
  802e9c:	b47ef426 	beq	r22,r17,802a70 <__alt_mem_epcs_flash_controller_0+0xff7f9a70>
  802ea0:	dd802617 	ldw	r22,152(sp)
  802ea4:	003f1206 	br	802af0 <__alt_mem_epcs_flash_controller_0+0xff7f9af0>
  802ea8:	d8c02b03 	ldbu	r3,172(sp)
  802eac:	d8c02785 	stb	r3,158(sp)
  802eb0:	0038df06 	br	801230 <__alt_mem_epcs_flash_controller_0+0xff7f8230>
  802eb4:	d8c02b03 	ldbu	r3,172(sp)
  802eb8:	d8c02785 	stb	r3,158(sp)
  802ebc:	0038aa06 	br	801168 <__alt_mem_epcs_flash_controller_0+0xff7f8168>
  802ec0:	d8c02b03 	ldbu	r3,172(sp)
  802ec4:	d8c02785 	stb	r3,158(sp)
  802ec8:	003a4306 	br	8017d8 <__alt_mem_epcs_flash_controller_0+0xff7f87d8>
  802ecc:	d8c02b03 	ldbu	r3,172(sp)
  802ed0:	d8c02785 	stb	r3,158(sp)
  802ed4:	003af506 	br	801aac <__alt_mem_epcs_flash_controller_0+0xff7f8aac>
  802ed8:	0005883a 	mov	r2,zero
  802edc:	003d7b06 	br	8024cc <__alt_mem_epcs_flash_controller_0+0xff7f94cc>
  802ee0:	d8802344 	addi	r2,sp,141
  802ee4:	003f1006 	br	802b28 <__alt_mem_epcs_flash_controller_0+0xff7f9b28>
  802ee8:	d8c02b03 	ldbu	r3,172(sp)
  802eec:	d8c02785 	stb	r3,158(sp)
  802ef0:	0038fd06 	br	8012e8 <__alt_mem_epcs_flash_controller_0+0xff7f82e8>
  802ef4:	d8c02b03 	ldbu	r3,172(sp)
  802ef8:	d8c02785 	stb	r3,158(sp)
  802efc:	003a9706 	br	80195c <__alt_mem_epcs_flash_controller_0+0xff7f895c>
  802f00:	d8c02b03 	ldbu	r3,172(sp)
  802f04:	d8c02785 	stb	r3,158(sp)
  802f08:	003a1806 	br	80176c <__alt_mem_epcs_flash_controller_0+0xff7f876c>
  802f0c:	d8c02b03 	ldbu	r3,172(sp)
  802f10:	d8c02785 	stb	r3,158(sp)
  802f14:	003abe06 	br	801a10 <__alt_mem_epcs_flash_controller_0+0xff7f8a10>

00802f18 <__vfprintf_internal>:
  802f18:	008020b4 	movhi	r2,130
  802f1c:	10b1d504 	addi	r2,r2,-14508
  802f20:	300f883a 	mov	r7,r6
  802f24:	280d883a 	mov	r6,r5
  802f28:	200b883a 	mov	r5,r4
  802f2c:	11000017 	ldw	r4,0(r2)
  802f30:	0800c3c1 	jmpi	800c3c <___vfprintf_internal_r>

00802f34 <__sbprintf>:
  802f34:	2880030b 	ldhu	r2,12(r5)
  802f38:	2ac01917 	ldw	r11,100(r5)
  802f3c:	2a80038b 	ldhu	r10,14(r5)
  802f40:	2a400717 	ldw	r9,28(r5)
  802f44:	2a000917 	ldw	r8,36(r5)
  802f48:	defee204 	addi	sp,sp,-1144
  802f4c:	00c10004 	movi	r3,1024
  802f50:	dc011a15 	stw	r16,1128(sp)
  802f54:	10bfff4c 	andi	r2,r2,65533
  802f58:	2821883a 	mov	r16,r5
  802f5c:	d8cb883a 	add	r5,sp,r3
  802f60:	dc811c15 	stw	r18,1136(sp)
  802f64:	dc411b15 	stw	r17,1132(sp)
  802f68:	dfc11d15 	stw	ra,1140(sp)
  802f6c:	2025883a 	mov	r18,r4
  802f70:	d881030d 	sth	r2,1036(sp)
  802f74:	dac11915 	stw	r11,1124(sp)
  802f78:	da81038d 	sth	r10,1038(sp)
  802f7c:	da410715 	stw	r9,1052(sp)
  802f80:	da010915 	stw	r8,1060(sp)
  802f84:	dec10015 	stw	sp,1024(sp)
  802f88:	dec10415 	stw	sp,1040(sp)
  802f8c:	d8c10215 	stw	r3,1032(sp)
  802f90:	d8c10515 	stw	r3,1044(sp)
  802f94:	d8010615 	stw	zero,1048(sp)
  802f98:	0800c3c0 	call	800c3c <___vfprintf_internal_r>
  802f9c:	1023883a 	mov	r17,r2
  802fa0:	10000416 	blt	r2,zero,802fb4 <__sbprintf+0x80>
  802fa4:	d9410004 	addi	r5,sp,1024
  802fa8:	9009883a 	mov	r4,r18
  802fac:	0804c100 	call	804c10 <_fflush_r>
  802fb0:	10000d1e 	bne	r2,zero,802fe8 <__sbprintf+0xb4>
  802fb4:	d881030b 	ldhu	r2,1036(sp)
  802fb8:	1080100c 	andi	r2,r2,64
  802fbc:	10000326 	beq	r2,zero,802fcc <__sbprintf+0x98>
  802fc0:	8080030b 	ldhu	r2,12(r16)
  802fc4:	10801014 	ori	r2,r2,64
  802fc8:	8080030d 	sth	r2,12(r16)
  802fcc:	8805883a 	mov	r2,r17
  802fd0:	dfc11d17 	ldw	ra,1140(sp)
  802fd4:	dc811c17 	ldw	r18,1136(sp)
  802fd8:	dc411b17 	ldw	r17,1132(sp)
  802fdc:	dc011a17 	ldw	r16,1128(sp)
  802fe0:	dec11e04 	addi	sp,sp,1144
  802fe4:	f800283a 	ret
  802fe8:	047fffc4 	movi	r17,-1
  802fec:	003ff106 	br	802fb4 <__alt_mem_epcs_flash_controller_0+0xff7f9fb4>

00802ff0 <__swsetup_r>:
  802ff0:	008020b4 	movhi	r2,130
  802ff4:	defffd04 	addi	sp,sp,-12
  802ff8:	10b1d504 	addi	r2,r2,-14508
  802ffc:	dc400115 	stw	r17,4(sp)
  803000:	2023883a 	mov	r17,r4
  803004:	11000017 	ldw	r4,0(r2)
  803008:	dc000015 	stw	r16,0(sp)
  80300c:	dfc00215 	stw	ra,8(sp)
  803010:	2821883a 	mov	r16,r5
  803014:	20000226 	beq	r4,zero,803020 <__swsetup_r+0x30>
  803018:	20800e17 	ldw	r2,56(r4)
  80301c:	10003126 	beq	r2,zero,8030e4 <__swsetup_r+0xf4>
  803020:	8080030b 	ldhu	r2,12(r16)
  803024:	10c0020c 	andi	r3,r2,8
  803028:	1009883a 	mov	r4,r2
  80302c:	18000f26 	beq	r3,zero,80306c <__swsetup_r+0x7c>
  803030:	80c00417 	ldw	r3,16(r16)
  803034:	18001526 	beq	r3,zero,80308c <__swsetup_r+0x9c>
  803038:	1100004c 	andi	r4,r2,1
  80303c:	20001c1e 	bne	r4,zero,8030b0 <__swsetup_r+0xc0>
  803040:	1080008c 	andi	r2,r2,2
  803044:	1000291e 	bne	r2,zero,8030ec <__swsetup_r+0xfc>
  803048:	80800517 	ldw	r2,20(r16)
  80304c:	80800215 	stw	r2,8(r16)
  803050:	18001c26 	beq	r3,zero,8030c4 <__swsetup_r+0xd4>
  803054:	0005883a 	mov	r2,zero
  803058:	dfc00217 	ldw	ra,8(sp)
  80305c:	dc400117 	ldw	r17,4(sp)
  803060:	dc000017 	ldw	r16,0(sp)
  803064:	dec00304 	addi	sp,sp,12
  803068:	f800283a 	ret
  80306c:	2080040c 	andi	r2,r4,16
  803070:	10002e26 	beq	r2,zero,80312c <__swsetup_r+0x13c>
  803074:	2080010c 	andi	r2,r4,4
  803078:	10001e1e 	bne	r2,zero,8030f4 <__swsetup_r+0x104>
  80307c:	80c00417 	ldw	r3,16(r16)
  803080:	20800214 	ori	r2,r4,8
  803084:	8080030d 	sth	r2,12(r16)
  803088:	183feb1e 	bne	r3,zero,803038 <__alt_mem_epcs_flash_controller_0+0xff7fa038>
  80308c:	1100a00c 	andi	r4,r2,640
  803090:	01408004 	movi	r5,512
  803094:	217fe826 	beq	r4,r5,803038 <__alt_mem_epcs_flash_controller_0+0xff7fa038>
  803098:	800b883a 	mov	r5,r16
  80309c:	8809883a 	mov	r4,r17
  8030a0:	0805bac0 	call	805bac <__smakebuf_r>
  8030a4:	8080030b 	ldhu	r2,12(r16)
  8030a8:	80c00417 	ldw	r3,16(r16)
  8030ac:	003fe206 	br	803038 <__alt_mem_epcs_flash_controller_0+0xff7fa038>
  8030b0:	80800517 	ldw	r2,20(r16)
  8030b4:	80000215 	stw	zero,8(r16)
  8030b8:	0085c83a 	sub	r2,zero,r2
  8030bc:	80800615 	stw	r2,24(r16)
  8030c0:	183fe41e 	bne	r3,zero,803054 <__alt_mem_epcs_flash_controller_0+0xff7fa054>
  8030c4:	80c0030b 	ldhu	r3,12(r16)
  8030c8:	0005883a 	mov	r2,zero
  8030cc:	1900200c 	andi	r4,r3,128
  8030d0:	203fe126 	beq	r4,zero,803058 <__alt_mem_epcs_flash_controller_0+0xff7fa058>
  8030d4:	18c01014 	ori	r3,r3,64
  8030d8:	80c0030d 	sth	r3,12(r16)
  8030dc:	00bfffc4 	movi	r2,-1
  8030e0:	003fdd06 	br	803058 <__alt_mem_epcs_flash_controller_0+0xff7fa058>
  8030e4:	0804ffc0 	call	804ffc <__sinit>
  8030e8:	003fcd06 	br	803020 <__alt_mem_epcs_flash_controller_0+0xff7fa020>
  8030ec:	0005883a 	mov	r2,zero
  8030f0:	003fd606 	br	80304c <__alt_mem_epcs_flash_controller_0+0xff7fa04c>
  8030f4:	81400c17 	ldw	r5,48(r16)
  8030f8:	28000626 	beq	r5,zero,803114 <__swsetup_r+0x124>
  8030fc:	80801004 	addi	r2,r16,64
  803100:	28800326 	beq	r5,r2,803110 <__swsetup_r+0x120>
  803104:	8809883a 	mov	r4,r17
  803108:	08051700 	call	805170 <_free_r>
  80310c:	8100030b 	ldhu	r4,12(r16)
  803110:	80000c15 	stw	zero,48(r16)
  803114:	80c00417 	ldw	r3,16(r16)
  803118:	00bff6c4 	movi	r2,-37
  80311c:	1108703a 	and	r4,r2,r4
  803120:	80000115 	stw	zero,4(r16)
  803124:	80c00015 	stw	r3,0(r16)
  803128:	003fd506 	br	803080 <__alt_mem_epcs_flash_controller_0+0xff7fa080>
  80312c:	00800244 	movi	r2,9
  803130:	88800015 	stw	r2,0(r17)
  803134:	20801014 	ori	r2,r4,64
  803138:	8080030d 	sth	r2,12(r16)
  80313c:	00bfffc4 	movi	r2,-1
  803140:	003fc506 	br	803058 <__alt_mem_epcs_flash_controller_0+0xff7fa058>

00803144 <quorem>:
  803144:	defff204 	addi	sp,sp,-56
  803148:	ddc00b15 	stw	r23,44(sp)
  80314c:	20800417 	ldw	r2,16(r4)
  803150:	2dc00417 	ldw	r23,16(r5)
  803154:	dfc00d15 	stw	ra,52(sp)
  803158:	df000c15 	stw	fp,48(sp)
  80315c:	dd800a15 	stw	r22,40(sp)
  803160:	dd400915 	stw	r21,36(sp)
  803164:	dd000815 	stw	r20,32(sp)
  803168:	dcc00715 	stw	r19,28(sp)
  80316c:	dc800615 	stw	r18,24(sp)
  803170:	dc400515 	stw	r17,20(sp)
  803174:	dc000415 	stw	r16,16(sp)
  803178:	15c07a16 	blt	r2,r23,803364 <quorem+0x220>
  80317c:	bdffffc4 	addi	r23,r23,-1
  803180:	bde9883a 	add	r20,r23,r23
  803184:	28c00504 	addi	r3,r5,20
  803188:	a529883a 	add	r20,r20,r20
  80318c:	1d39883a 	add	fp,r3,r20
  803190:	24c00504 	addi	r19,r4,20
  803194:	d9400215 	stw	r5,8(sp)
  803198:	9d29883a 	add	r20,r19,r20
  80319c:	e1400017 	ldw	r5,0(fp)
  8031a0:	d9000015 	stw	r4,0(sp)
  8031a4:	a1000017 	ldw	r4,0(r20)
  8031a8:	29400044 	addi	r5,r5,1
  8031ac:	d8c00115 	stw	r3,4(sp)
  8031b0:	dd000315 	stw	r20,12(sp)
  8031b4:	080b1840 	call	80b184 <__udivsi3>
  8031b8:	1025883a 	mov	r18,r2
  8031bc:	10003026 	beq	r2,zero,803280 <quorem+0x13c>
  8031c0:	dc400117 	ldw	r17,4(sp)
  8031c4:	9829883a 	mov	r20,r19
  8031c8:	002d883a 	mov	r22,zero
  8031cc:	0021883a 	mov	r16,zero
  8031d0:	8d400017 	ldw	r21,0(r17)
  8031d4:	900b883a 	mov	r5,r18
  8031d8:	8c400104 	addi	r17,r17,4
  8031dc:	a93fffcc 	andi	r4,r21,65535
  8031e0:	080b2400 	call	80b240 <__mulsi3>
  8031e4:	a808d43a 	srli	r4,r21,16
  8031e8:	900b883a 	mov	r5,r18
  8031ec:	15ad883a 	add	r22,r2,r22
  8031f0:	080b2400 	call	80b240 <__mulsi3>
  8031f4:	a1000017 	ldw	r4,0(r20)
  8031f8:	b00cd43a 	srli	r6,r22,16
  8031fc:	b0ffffcc 	andi	r3,r22,65535
  803200:	217fffcc 	andi	r5,r4,65535
  803204:	2c21883a 	add	r16,r5,r16
  803208:	80c7c83a 	sub	r3,r16,r3
  80320c:	2008d43a 	srli	r4,r4,16
  803210:	1185883a 	add	r2,r2,r6
  803214:	1821d43a 	srai	r16,r3,16
  803218:	117fffcc 	andi	r5,r2,65535
  80321c:	2149c83a 	sub	r4,r4,r5
  803220:	2421883a 	add	r16,r4,r16
  803224:	8008943a 	slli	r4,r16,16
  803228:	18ffffcc 	andi	r3,r3,65535
  80322c:	102cd43a 	srli	r22,r2,16
  803230:	20c8b03a 	or	r4,r4,r3
  803234:	a1000015 	stw	r4,0(r20)
  803238:	8021d43a 	srai	r16,r16,16
  80323c:	a5000104 	addi	r20,r20,4
  803240:	e47fe32e 	bgeu	fp,r17,8031d0 <__alt_mem_epcs_flash_controller_0+0xff7fa1d0>
  803244:	d8c00317 	ldw	r3,12(sp)
  803248:	18800017 	ldw	r2,0(r3)
  80324c:	10000c1e 	bne	r2,zero,803280 <quorem+0x13c>
  803250:	18bfff04 	addi	r2,r3,-4
  803254:	9880082e 	bgeu	r19,r2,803278 <quorem+0x134>
  803258:	18ffff17 	ldw	r3,-4(r3)
  80325c:	18000326 	beq	r3,zero,80326c <quorem+0x128>
  803260:	00000506 	br	803278 <quorem+0x134>
  803264:	10c00017 	ldw	r3,0(r2)
  803268:	1800031e 	bne	r3,zero,803278 <quorem+0x134>
  80326c:	10bfff04 	addi	r2,r2,-4
  803270:	bdffffc4 	addi	r23,r23,-1
  803274:	98bffb36 	bltu	r19,r2,803264 <__alt_mem_epcs_flash_controller_0+0xff7fa264>
  803278:	d8c00017 	ldw	r3,0(sp)
  80327c:	1dc00415 	stw	r23,16(r3)
  803280:	d9400217 	ldw	r5,8(sp)
  803284:	d9000017 	ldw	r4,0(sp)
  803288:	08073a80 	call	8073a8 <__mcmp>
  80328c:	10002816 	blt	r2,zero,803330 <quorem+0x1ec>
  803290:	dc400117 	ldw	r17,4(sp)
  803294:	94800044 	addi	r18,r18,1
  803298:	980d883a 	mov	r6,r19
  80329c:	0007883a 	mov	r3,zero
  8032a0:	31000017 	ldw	r4,0(r6)
  8032a4:	89400017 	ldw	r5,0(r17)
  8032a8:	31800104 	addi	r6,r6,4
  8032ac:	20bfffcc 	andi	r2,r4,65535
  8032b0:	10c7883a 	add	r3,r2,r3
  8032b4:	28bfffcc 	andi	r2,r5,65535
  8032b8:	1885c83a 	sub	r2,r3,r2
  8032bc:	280ad43a 	srli	r5,r5,16
  8032c0:	2008d43a 	srli	r4,r4,16
  8032c4:	1007d43a 	srai	r3,r2,16
  8032c8:	10bfffcc 	andi	r2,r2,65535
  8032cc:	2149c83a 	sub	r4,r4,r5
  8032d0:	20c9883a 	add	r4,r4,r3
  8032d4:	200a943a 	slli	r5,r4,16
  8032d8:	8c400104 	addi	r17,r17,4
  8032dc:	2007d43a 	srai	r3,r4,16
  8032e0:	2884b03a 	or	r2,r5,r2
  8032e4:	30bfff15 	stw	r2,-4(r6)
  8032e8:	e47fed2e 	bgeu	fp,r17,8032a0 <__alt_mem_epcs_flash_controller_0+0xff7fa2a0>
  8032ec:	bdc5883a 	add	r2,r23,r23
  8032f0:	1085883a 	add	r2,r2,r2
  8032f4:	9887883a 	add	r3,r19,r2
  8032f8:	18800017 	ldw	r2,0(r3)
  8032fc:	10000c1e 	bne	r2,zero,803330 <quorem+0x1ec>
  803300:	18bfff04 	addi	r2,r3,-4
  803304:	9880082e 	bgeu	r19,r2,803328 <quorem+0x1e4>
  803308:	18ffff17 	ldw	r3,-4(r3)
  80330c:	18000326 	beq	r3,zero,80331c <quorem+0x1d8>
  803310:	00000506 	br	803328 <quorem+0x1e4>
  803314:	10c00017 	ldw	r3,0(r2)
  803318:	1800031e 	bne	r3,zero,803328 <quorem+0x1e4>
  80331c:	10bfff04 	addi	r2,r2,-4
  803320:	bdffffc4 	addi	r23,r23,-1
  803324:	98bffb36 	bltu	r19,r2,803314 <__alt_mem_epcs_flash_controller_0+0xff7fa314>
  803328:	d8c00017 	ldw	r3,0(sp)
  80332c:	1dc00415 	stw	r23,16(r3)
  803330:	9005883a 	mov	r2,r18
  803334:	dfc00d17 	ldw	ra,52(sp)
  803338:	df000c17 	ldw	fp,48(sp)
  80333c:	ddc00b17 	ldw	r23,44(sp)
  803340:	dd800a17 	ldw	r22,40(sp)
  803344:	dd400917 	ldw	r21,36(sp)
  803348:	dd000817 	ldw	r20,32(sp)
  80334c:	dcc00717 	ldw	r19,28(sp)
  803350:	dc800617 	ldw	r18,24(sp)
  803354:	dc400517 	ldw	r17,20(sp)
  803358:	dc000417 	ldw	r16,16(sp)
  80335c:	dec00e04 	addi	sp,sp,56
  803360:	f800283a 	ret
  803364:	0005883a 	mov	r2,zero
  803368:	003ff206 	br	803334 <__alt_mem_epcs_flash_controller_0+0xff7fa334>

0080336c <_dtoa_r>:
  80336c:	20801017 	ldw	r2,64(r4)
  803370:	deffde04 	addi	sp,sp,-136
  803374:	df002015 	stw	fp,128(sp)
  803378:	dcc01b15 	stw	r19,108(sp)
  80337c:	dc801a15 	stw	r18,104(sp)
  803380:	dc401915 	stw	r17,100(sp)
  803384:	dc001815 	stw	r16,96(sp)
  803388:	dfc02115 	stw	ra,132(sp)
  80338c:	ddc01f15 	stw	r23,124(sp)
  803390:	dd801e15 	stw	r22,120(sp)
  803394:	dd401d15 	stw	r21,116(sp)
  803398:	dd001c15 	stw	r20,112(sp)
  80339c:	d9c00315 	stw	r7,12(sp)
  8033a0:	2039883a 	mov	fp,r4
  8033a4:	3023883a 	mov	r17,r6
  8033a8:	2825883a 	mov	r18,r5
  8033ac:	dc002417 	ldw	r16,144(sp)
  8033b0:	3027883a 	mov	r19,r6
  8033b4:	10000826 	beq	r2,zero,8033d8 <_dtoa_r+0x6c>
  8033b8:	21801117 	ldw	r6,68(r4)
  8033bc:	00c00044 	movi	r3,1
  8033c0:	100b883a 	mov	r5,r2
  8033c4:	1986983a 	sll	r3,r3,r6
  8033c8:	11800115 	stw	r6,4(r2)
  8033cc:	10c00215 	stw	r3,8(r2)
  8033d0:	0806acc0 	call	806acc <_Bfree>
  8033d4:	e0001015 	stw	zero,64(fp)
  8033d8:	88002e16 	blt	r17,zero,803494 <_dtoa_r+0x128>
  8033dc:	80000015 	stw	zero,0(r16)
  8033e0:	889ffc2c 	andhi	r2,r17,32752
  8033e4:	00dffc34 	movhi	r3,32752
  8033e8:	10c01c26 	beq	r2,r3,80345c <_dtoa_r+0xf0>
  8033ec:	000d883a 	mov	r6,zero
  8033f0:	000f883a 	mov	r7,zero
  8033f4:	9009883a 	mov	r4,r18
  8033f8:	980b883a 	mov	r5,r19
  8033fc:	080c4e40 	call	80c4e4 <__eqdf2>
  803400:	10002b1e 	bne	r2,zero,8034b0 <_dtoa_r+0x144>
  803404:	d9c02317 	ldw	r7,140(sp)
  803408:	00800044 	movi	r2,1
  80340c:	38800015 	stw	r2,0(r7)
  803410:	d8802517 	ldw	r2,148(sp)
  803414:	10019e26 	beq	r2,zero,803a90 <_dtoa_r+0x724>
  803418:	d8c02517 	ldw	r3,148(sp)
  80341c:	008020b4 	movhi	r2,130
  803420:	10a96744 	addi	r2,r2,-23139
  803424:	18800015 	stw	r2,0(r3)
  803428:	10bfffc4 	addi	r2,r2,-1
  80342c:	dfc02117 	ldw	ra,132(sp)
  803430:	df002017 	ldw	fp,128(sp)
  803434:	ddc01f17 	ldw	r23,124(sp)
  803438:	dd801e17 	ldw	r22,120(sp)
  80343c:	dd401d17 	ldw	r21,116(sp)
  803440:	dd001c17 	ldw	r20,112(sp)
  803444:	dcc01b17 	ldw	r19,108(sp)
  803448:	dc801a17 	ldw	r18,104(sp)
  80344c:	dc401917 	ldw	r17,100(sp)
  803450:	dc001817 	ldw	r16,96(sp)
  803454:	dec02204 	addi	sp,sp,136
  803458:	f800283a 	ret
  80345c:	d8c02317 	ldw	r3,140(sp)
  803460:	0089c3c4 	movi	r2,9999
  803464:	18800015 	stw	r2,0(r3)
  803468:	90017726 	beq	r18,zero,803a48 <_dtoa_r+0x6dc>
  80346c:	008020b4 	movhi	r2,130
  803470:	10a97304 	addi	r2,r2,-23092
  803474:	d9002517 	ldw	r4,148(sp)
  803478:	203fec26 	beq	r4,zero,80342c <__alt_mem_epcs_flash_controller_0+0xff7fa42c>
  80347c:	10c000c7 	ldb	r3,3(r2)
  803480:	1801781e 	bne	r3,zero,803a64 <_dtoa_r+0x6f8>
  803484:	10c000c4 	addi	r3,r2,3
  803488:	d9802517 	ldw	r6,148(sp)
  80348c:	30c00015 	stw	r3,0(r6)
  803490:	003fe606 	br	80342c <__alt_mem_epcs_flash_controller_0+0xff7fa42c>
  803494:	04e00034 	movhi	r19,32768
  803498:	9cffffc4 	addi	r19,r19,-1
  80349c:	00800044 	movi	r2,1
  8034a0:	8ce6703a 	and	r19,r17,r19
  8034a4:	80800015 	stw	r2,0(r16)
  8034a8:	9823883a 	mov	r17,r19
  8034ac:	003fcc06 	br	8033e0 <__alt_mem_epcs_flash_controller_0+0xff7fa3e0>
  8034b0:	d8800204 	addi	r2,sp,8
  8034b4:	d8800015 	stw	r2,0(sp)
  8034b8:	d9c00104 	addi	r7,sp,4
  8034bc:	900b883a 	mov	r5,r18
  8034c0:	980d883a 	mov	r6,r19
  8034c4:	e009883a 	mov	r4,fp
  8034c8:	8820d53a 	srli	r16,r17,20
  8034cc:	08077740 	call	807774 <__d2b>
  8034d0:	d8800915 	stw	r2,36(sp)
  8034d4:	8001651e 	bne	r16,zero,803a6c <_dtoa_r+0x700>
  8034d8:	dd800217 	ldw	r22,8(sp)
  8034dc:	dc000117 	ldw	r16,4(sp)
  8034e0:	00800804 	movi	r2,32
  8034e4:	b421883a 	add	r16,r22,r16
  8034e8:	80c10c84 	addi	r3,r16,1074
  8034ec:	10c2d10e 	bge	r2,r3,804034 <_dtoa_r+0xcc8>
  8034f0:	00801004 	movi	r2,64
  8034f4:	81010484 	addi	r4,r16,1042
  8034f8:	10c7c83a 	sub	r3,r2,r3
  8034fc:	9108d83a 	srl	r4,r18,r4
  803500:	88e2983a 	sll	r17,r17,r3
  803504:	2448b03a 	or	r4,r4,r17
  803508:	080da000 	call	80da00 <__floatunsidf>
  80350c:	017f8434 	movhi	r5,65040
  803510:	01800044 	movi	r6,1
  803514:	1009883a 	mov	r4,r2
  803518:	194b883a 	add	r5,r3,r5
  80351c:	843fffc4 	addi	r16,r16,-1
  803520:	d9801115 	stw	r6,68(sp)
  803524:	000d883a 	mov	r6,zero
  803528:	01cffe34 	movhi	r7,16376
  80352c:	080cfa80 	call	80cfa8 <__subdf3>
  803530:	0198dbf4 	movhi	r6,25455
  803534:	01cff4f4 	movhi	r7,16339
  803538:	3190d844 	addi	r6,r6,17249
  80353c:	39e1e9c4 	addi	r7,r7,-30809
  803540:	1009883a 	mov	r4,r2
  803544:	180b883a 	mov	r5,r3
  803548:	080c73c0 	call	80c73c <__muldf3>
  80354c:	01a2d874 	movhi	r6,35681
  803550:	01cff1f4 	movhi	r7,16327
  803554:	31b22cc4 	addi	r6,r6,-14157
  803558:	39e28a04 	addi	r7,r7,-30168
  80355c:	180b883a 	mov	r5,r3
  803560:	1009883a 	mov	r4,r2
  803564:	080b2680 	call	80b268 <__adddf3>
  803568:	8009883a 	mov	r4,r16
  80356c:	1029883a 	mov	r20,r2
  803570:	1823883a 	mov	r17,r3
  803574:	080d9240 	call	80d924 <__floatsidf>
  803578:	019427f4 	movhi	r6,20639
  80357c:	01cff4f4 	movhi	r7,16339
  803580:	319e7ec4 	addi	r6,r6,31227
  803584:	39d104c4 	addi	r7,r7,17427
  803588:	1009883a 	mov	r4,r2
  80358c:	180b883a 	mov	r5,r3
  803590:	080c73c0 	call	80c73c <__muldf3>
  803594:	100d883a 	mov	r6,r2
  803598:	180f883a 	mov	r7,r3
  80359c:	a009883a 	mov	r4,r20
  8035a0:	880b883a 	mov	r5,r17
  8035a4:	080b2680 	call	80b268 <__adddf3>
  8035a8:	1009883a 	mov	r4,r2
  8035ac:	180b883a 	mov	r5,r3
  8035b0:	1029883a 	mov	r20,r2
  8035b4:	1823883a 	mov	r17,r3
  8035b8:	080d8a40 	call	80d8a4 <__fixdfsi>
  8035bc:	000d883a 	mov	r6,zero
  8035c0:	000f883a 	mov	r7,zero
  8035c4:	a009883a 	mov	r4,r20
  8035c8:	880b883a 	mov	r5,r17
  8035cc:	d8800515 	stw	r2,20(sp)
  8035d0:	080c6480 	call	80c648 <__ledf2>
  8035d4:	10028716 	blt	r2,zero,803ff4 <_dtoa_r+0xc88>
  8035d8:	d8c00517 	ldw	r3,20(sp)
  8035dc:	00800584 	movi	r2,22
  8035e0:	10c27536 	bltu	r2,r3,803fb8 <_dtoa_r+0xc4c>
  8035e4:	180490fa 	slli	r2,r3,3
  8035e8:	00c020b4 	movhi	r3,130
  8035ec:	18e98f04 	addi	r3,r3,-22980
  8035f0:	1885883a 	add	r2,r3,r2
  8035f4:	11000017 	ldw	r4,0(r2)
  8035f8:	11400117 	ldw	r5,4(r2)
  8035fc:	900d883a 	mov	r6,r18
  803600:	980f883a 	mov	r7,r19
  803604:	080c56c0 	call	80c56c <__gedf2>
  803608:	00828d0e 	bge	zero,r2,804040 <_dtoa_r+0xcd4>
  80360c:	d9000517 	ldw	r4,20(sp)
  803610:	d8000e15 	stw	zero,56(sp)
  803614:	213fffc4 	addi	r4,r4,-1
  803618:	d9000515 	stw	r4,20(sp)
  80361c:	b42dc83a 	sub	r22,r22,r16
  803620:	b5bfffc4 	addi	r22,r22,-1
  803624:	b0026f16 	blt	r22,zero,803fe4 <_dtoa_r+0xc78>
  803628:	d8000815 	stw	zero,32(sp)
  80362c:	d9c00517 	ldw	r7,20(sp)
  803630:	38026416 	blt	r7,zero,803fc4 <_dtoa_r+0xc58>
  803634:	b1ed883a 	add	r22,r22,r7
  803638:	d9c00d15 	stw	r7,52(sp)
  80363c:	d8000a15 	stw	zero,40(sp)
  803640:	d9800317 	ldw	r6,12(sp)
  803644:	00800244 	movi	r2,9
  803648:	11811436 	bltu	r2,r6,803a9c <_dtoa_r+0x730>
  80364c:	00800144 	movi	r2,5
  803650:	1184e10e 	bge	r2,r6,8049d8 <_dtoa_r+0x166c>
  803654:	31bfff04 	addi	r6,r6,-4
  803658:	d9800315 	stw	r6,12(sp)
  80365c:	0023883a 	mov	r17,zero
  803660:	d9800317 	ldw	r6,12(sp)
  803664:	008000c4 	movi	r2,3
  803668:	30836726 	beq	r6,r2,804408 <_dtoa_r+0x109c>
  80366c:	1183410e 	bge	r2,r6,804374 <_dtoa_r+0x1008>
  803670:	d9c00317 	ldw	r7,12(sp)
  803674:	00800104 	movi	r2,4
  803678:	38827c26 	beq	r7,r2,80406c <_dtoa_r+0xd00>
  80367c:	00800144 	movi	r2,5
  803680:	3884c41e 	bne	r7,r2,804994 <_dtoa_r+0x1628>
  803684:	00800044 	movi	r2,1
  803688:	d8800b15 	stw	r2,44(sp)
  80368c:	d8c00517 	ldw	r3,20(sp)
  803690:	d9002217 	ldw	r4,136(sp)
  803694:	1907883a 	add	r3,r3,r4
  803698:	19800044 	addi	r6,r3,1
  80369c:	d8c00c15 	stw	r3,48(sp)
  8036a0:	d9800615 	stw	r6,24(sp)
  8036a4:	0183a40e 	bge	zero,r6,804538 <_dtoa_r+0x11cc>
  8036a8:	d9800617 	ldw	r6,24(sp)
  8036ac:	3021883a 	mov	r16,r6
  8036b0:	e0001115 	stw	zero,68(fp)
  8036b4:	008005c4 	movi	r2,23
  8036b8:	1184c92e 	bgeu	r2,r6,8049e0 <_dtoa_r+0x1674>
  8036bc:	00c00044 	movi	r3,1
  8036c0:	00800104 	movi	r2,4
  8036c4:	1085883a 	add	r2,r2,r2
  8036c8:	11000504 	addi	r4,r2,20
  8036cc:	180b883a 	mov	r5,r3
  8036d0:	18c00044 	addi	r3,r3,1
  8036d4:	313ffb2e 	bgeu	r6,r4,8036c4 <__alt_mem_epcs_flash_controller_0+0xff7fa6c4>
  8036d8:	e1401115 	stw	r5,68(fp)
  8036dc:	e009883a 	mov	r4,fp
  8036e0:	0806a240 	call	806a24 <_Balloc>
  8036e4:	d8800715 	stw	r2,28(sp)
  8036e8:	e0801015 	stw	r2,64(fp)
  8036ec:	00800384 	movi	r2,14
  8036f0:	1400f736 	bltu	r2,r16,803ad0 <_dtoa_r+0x764>
  8036f4:	8800f626 	beq	r17,zero,803ad0 <_dtoa_r+0x764>
  8036f8:	d9c00517 	ldw	r7,20(sp)
  8036fc:	01c39a0e 	bge	zero,r7,804568 <_dtoa_r+0x11fc>
  803700:	388003cc 	andi	r2,r7,15
  803704:	100490fa 	slli	r2,r2,3
  803708:	382bd13a 	srai	r21,r7,4
  80370c:	00c020b4 	movhi	r3,130
  803710:	18e98f04 	addi	r3,r3,-22980
  803714:	1885883a 	add	r2,r3,r2
  803718:	a8c0040c 	andi	r3,r21,16
  80371c:	12400017 	ldw	r9,0(r2)
  803720:	12000117 	ldw	r8,4(r2)
  803724:	18037926 	beq	r3,zero,80450c <_dtoa_r+0x11a0>
  803728:	008020b4 	movhi	r2,130
  80372c:	10a98504 	addi	r2,r2,-23020
  803730:	11800817 	ldw	r6,32(r2)
  803734:	11c00917 	ldw	r7,36(r2)
  803738:	9009883a 	mov	r4,r18
  80373c:	980b883a 	mov	r5,r19
  803740:	da001715 	stw	r8,92(sp)
  803744:	da401615 	stw	r9,88(sp)
  803748:	080bb140 	call	80bb14 <__divdf3>
  80374c:	da001717 	ldw	r8,92(sp)
  803750:	da401617 	ldw	r9,88(sp)
  803754:	ad4003cc 	andi	r21,r21,15
  803758:	040000c4 	movi	r16,3
  80375c:	1023883a 	mov	r17,r2
  803760:	1829883a 	mov	r20,r3
  803764:	a8001126 	beq	r21,zero,8037ac <_dtoa_r+0x440>
  803768:	05c020b4 	movhi	r23,130
  80376c:	bde98504 	addi	r23,r23,-23020
  803770:	4805883a 	mov	r2,r9
  803774:	4007883a 	mov	r3,r8
  803778:	a980004c 	andi	r6,r21,1
  80377c:	1009883a 	mov	r4,r2
  803780:	a82bd07a 	srai	r21,r21,1
  803784:	180b883a 	mov	r5,r3
  803788:	30000426 	beq	r6,zero,80379c <_dtoa_r+0x430>
  80378c:	b9800017 	ldw	r6,0(r23)
  803790:	b9c00117 	ldw	r7,4(r23)
  803794:	84000044 	addi	r16,r16,1
  803798:	080c73c0 	call	80c73c <__muldf3>
  80379c:	bdc00204 	addi	r23,r23,8
  8037a0:	a83ff51e 	bne	r21,zero,803778 <__alt_mem_epcs_flash_controller_0+0xff7fa778>
  8037a4:	1013883a 	mov	r9,r2
  8037a8:	1811883a 	mov	r8,r3
  8037ac:	480d883a 	mov	r6,r9
  8037b0:	400f883a 	mov	r7,r8
  8037b4:	8809883a 	mov	r4,r17
  8037b8:	a00b883a 	mov	r5,r20
  8037bc:	080bb140 	call	80bb14 <__divdf3>
  8037c0:	d8800f15 	stw	r2,60(sp)
  8037c4:	d8c01015 	stw	r3,64(sp)
  8037c8:	d8c00e17 	ldw	r3,56(sp)
  8037cc:	18000626 	beq	r3,zero,8037e8 <_dtoa_r+0x47c>
  8037d0:	d9000f17 	ldw	r4,60(sp)
  8037d4:	d9401017 	ldw	r5,64(sp)
  8037d8:	000d883a 	mov	r6,zero
  8037dc:	01cffc34 	movhi	r7,16368
  8037e0:	080c6480 	call	80c648 <__ledf2>
  8037e4:	10040b16 	blt	r2,zero,804814 <_dtoa_r+0x14a8>
  8037e8:	8009883a 	mov	r4,r16
  8037ec:	080d9240 	call	80d924 <__floatsidf>
  8037f0:	d9800f17 	ldw	r6,60(sp)
  8037f4:	d9c01017 	ldw	r7,64(sp)
  8037f8:	1009883a 	mov	r4,r2
  8037fc:	180b883a 	mov	r5,r3
  803800:	080c73c0 	call	80c73c <__muldf3>
  803804:	000d883a 	mov	r6,zero
  803808:	01d00734 	movhi	r7,16412
  80380c:	1009883a 	mov	r4,r2
  803810:	180b883a 	mov	r5,r3
  803814:	080b2680 	call	80b268 <__adddf3>
  803818:	1021883a 	mov	r16,r2
  80381c:	d8800617 	ldw	r2,24(sp)
  803820:	047f3034 	movhi	r17,64704
  803824:	1c63883a 	add	r17,r3,r17
  803828:	10031826 	beq	r2,zero,80448c <_dtoa_r+0x1120>
  80382c:	d8c00517 	ldw	r3,20(sp)
  803830:	db000617 	ldw	r12,24(sp)
  803834:	d8c01315 	stw	r3,76(sp)
  803838:	d9000b17 	ldw	r4,44(sp)
  80383c:	20038f26 	beq	r4,zero,80467c <_dtoa_r+0x1310>
  803840:	60bfffc4 	addi	r2,r12,-1
  803844:	100490fa 	slli	r2,r2,3
  803848:	00c020b4 	movhi	r3,130
  80384c:	18e98f04 	addi	r3,r3,-22980
  803850:	1885883a 	add	r2,r3,r2
  803854:	11800017 	ldw	r6,0(r2)
  803858:	11c00117 	ldw	r7,4(r2)
  80385c:	d8800717 	ldw	r2,28(sp)
  803860:	0009883a 	mov	r4,zero
  803864:	014ff834 	movhi	r5,16352
  803868:	db001615 	stw	r12,88(sp)
  80386c:	15c00044 	addi	r23,r2,1
  803870:	080bb140 	call	80bb14 <__divdf3>
  803874:	800d883a 	mov	r6,r16
  803878:	880f883a 	mov	r7,r17
  80387c:	1009883a 	mov	r4,r2
  803880:	180b883a 	mov	r5,r3
  803884:	080cfa80 	call	80cfa8 <__subdf3>
  803888:	d9401017 	ldw	r5,64(sp)
  80388c:	d9000f17 	ldw	r4,60(sp)
  803890:	102b883a 	mov	r21,r2
  803894:	d8c01215 	stw	r3,72(sp)
  803898:	080d8a40 	call	80d8a4 <__fixdfsi>
  80389c:	1009883a 	mov	r4,r2
  8038a0:	1029883a 	mov	r20,r2
  8038a4:	080d9240 	call	80d924 <__floatsidf>
  8038a8:	d9000f17 	ldw	r4,60(sp)
  8038ac:	d9401017 	ldw	r5,64(sp)
  8038b0:	100d883a 	mov	r6,r2
  8038b4:	180f883a 	mov	r7,r3
  8038b8:	080cfa80 	call	80cfa8 <__subdf3>
  8038bc:	1823883a 	mov	r17,r3
  8038c0:	d8c00717 	ldw	r3,28(sp)
  8038c4:	d9401217 	ldw	r5,72(sp)
  8038c8:	a2000c04 	addi	r8,r20,48
  8038cc:	1021883a 	mov	r16,r2
  8038d0:	1a000005 	stb	r8,0(r3)
  8038d4:	800d883a 	mov	r6,r16
  8038d8:	880f883a 	mov	r7,r17
  8038dc:	a809883a 	mov	r4,r21
  8038e0:	4029883a 	mov	r20,r8
  8038e4:	080c56c0 	call	80c56c <__gedf2>
  8038e8:	00841d16 	blt	zero,r2,804960 <_dtoa_r+0x15f4>
  8038ec:	800d883a 	mov	r6,r16
  8038f0:	880f883a 	mov	r7,r17
  8038f4:	0009883a 	mov	r4,zero
  8038f8:	014ffc34 	movhi	r5,16368
  8038fc:	080cfa80 	call	80cfa8 <__subdf3>
  803900:	d9401217 	ldw	r5,72(sp)
  803904:	100d883a 	mov	r6,r2
  803908:	180f883a 	mov	r7,r3
  80390c:	a809883a 	mov	r4,r21
  803910:	080c56c0 	call	80c56c <__gedf2>
  803914:	db001617 	ldw	r12,88(sp)
  803918:	00840e16 	blt	zero,r2,804954 <_dtoa_r+0x15e8>
  80391c:	00800044 	movi	r2,1
  803920:	13006b0e 	bge	r2,r12,803ad0 <_dtoa_r+0x764>
  803924:	d9000717 	ldw	r4,28(sp)
  803928:	dd800f15 	stw	r22,60(sp)
  80392c:	dcc01015 	stw	r19,64(sp)
  803930:	2319883a 	add	r12,r4,r12
  803934:	dcc01217 	ldw	r19,72(sp)
  803938:	602d883a 	mov	r22,r12
  80393c:	dc801215 	stw	r18,72(sp)
  803940:	b825883a 	mov	r18,r23
  803944:	00000906 	br	80396c <_dtoa_r+0x600>
  803948:	080cfa80 	call	80cfa8 <__subdf3>
  80394c:	a80d883a 	mov	r6,r21
  803950:	980f883a 	mov	r7,r19
  803954:	1009883a 	mov	r4,r2
  803958:	180b883a 	mov	r5,r3
  80395c:	080c6480 	call	80c648 <__ledf2>
  803960:	1003e816 	blt	r2,zero,804904 <_dtoa_r+0x1598>
  803964:	b825883a 	mov	r18,r23
  803968:	bd83e926 	beq	r23,r22,804910 <_dtoa_r+0x15a4>
  80396c:	a809883a 	mov	r4,r21
  803970:	980b883a 	mov	r5,r19
  803974:	000d883a 	mov	r6,zero
  803978:	01d00934 	movhi	r7,16420
  80397c:	080c73c0 	call	80c73c <__muldf3>
  803980:	000d883a 	mov	r6,zero
  803984:	01d00934 	movhi	r7,16420
  803988:	8009883a 	mov	r4,r16
  80398c:	880b883a 	mov	r5,r17
  803990:	102b883a 	mov	r21,r2
  803994:	1827883a 	mov	r19,r3
  803998:	080c73c0 	call	80c73c <__muldf3>
  80399c:	180b883a 	mov	r5,r3
  8039a0:	1009883a 	mov	r4,r2
  8039a4:	1821883a 	mov	r16,r3
  8039a8:	1023883a 	mov	r17,r2
  8039ac:	080d8a40 	call	80d8a4 <__fixdfsi>
  8039b0:	1009883a 	mov	r4,r2
  8039b4:	1029883a 	mov	r20,r2
  8039b8:	080d9240 	call	80d924 <__floatsidf>
  8039bc:	8809883a 	mov	r4,r17
  8039c0:	800b883a 	mov	r5,r16
  8039c4:	100d883a 	mov	r6,r2
  8039c8:	180f883a 	mov	r7,r3
  8039cc:	080cfa80 	call	80cfa8 <__subdf3>
  8039d0:	a5000c04 	addi	r20,r20,48
  8039d4:	a80d883a 	mov	r6,r21
  8039d8:	980f883a 	mov	r7,r19
  8039dc:	1009883a 	mov	r4,r2
  8039e0:	180b883a 	mov	r5,r3
  8039e4:	95000005 	stb	r20,0(r18)
  8039e8:	1021883a 	mov	r16,r2
  8039ec:	1823883a 	mov	r17,r3
  8039f0:	080c6480 	call	80c648 <__ledf2>
  8039f4:	bdc00044 	addi	r23,r23,1
  8039f8:	800d883a 	mov	r6,r16
  8039fc:	880f883a 	mov	r7,r17
  803a00:	0009883a 	mov	r4,zero
  803a04:	014ffc34 	movhi	r5,16368
  803a08:	103fcf0e 	bge	r2,zero,803948 <__alt_mem_epcs_flash_controller_0+0xff7fa948>
  803a0c:	d8c01317 	ldw	r3,76(sp)
  803a10:	d8c00515 	stw	r3,20(sp)
  803a14:	d9400917 	ldw	r5,36(sp)
  803a18:	e009883a 	mov	r4,fp
  803a1c:	0806acc0 	call	806acc <_Bfree>
  803a20:	d9000517 	ldw	r4,20(sp)
  803a24:	d9802317 	ldw	r6,140(sp)
  803a28:	d9c02517 	ldw	r7,148(sp)
  803a2c:	b8000005 	stb	zero,0(r23)
  803a30:	20800044 	addi	r2,r4,1
  803a34:	30800015 	stw	r2,0(r6)
  803a38:	3802aa26 	beq	r7,zero,8044e4 <_dtoa_r+0x1178>
  803a3c:	3dc00015 	stw	r23,0(r7)
  803a40:	d8800717 	ldw	r2,28(sp)
  803a44:	003e7906 	br	80342c <__alt_mem_epcs_flash_controller_0+0xff7fa42c>
  803a48:	00800434 	movhi	r2,16
  803a4c:	10bfffc4 	addi	r2,r2,-1
  803a50:	88a2703a 	and	r17,r17,r2
  803a54:	883e851e 	bne	r17,zero,80346c <__alt_mem_epcs_flash_controller_0+0xff7fa46c>
  803a58:	008020b4 	movhi	r2,130
  803a5c:	10a97004 	addi	r2,r2,-23104
  803a60:	003e8406 	br	803474 <__alt_mem_epcs_flash_controller_0+0xff7fa474>
  803a64:	10c00204 	addi	r3,r2,8
  803a68:	003e8706 	br	803488 <__alt_mem_epcs_flash_controller_0+0xff7fa488>
  803a6c:	01400434 	movhi	r5,16
  803a70:	297fffc4 	addi	r5,r5,-1
  803a74:	994a703a 	and	r5,r19,r5
  803a78:	9009883a 	mov	r4,r18
  803a7c:	843f0044 	addi	r16,r16,-1023
  803a80:	294ffc34 	orhi	r5,r5,16368
  803a84:	dd800217 	ldw	r22,8(sp)
  803a88:	d8001115 	stw	zero,68(sp)
  803a8c:	003ea506 	br	803524 <__alt_mem_epcs_flash_controller_0+0xff7fa524>
  803a90:	008020b4 	movhi	r2,130
  803a94:	10a96704 	addi	r2,r2,-23140
  803a98:	003e6406 	br	80342c <__alt_mem_epcs_flash_controller_0+0xff7fa42c>
  803a9c:	e0001115 	stw	zero,68(fp)
  803aa0:	000b883a 	mov	r5,zero
  803aa4:	e009883a 	mov	r4,fp
  803aa8:	0806a240 	call	806a24 <_Balloc>
  803aac:	01bfffc4 	movi	r6,-1
  803ab0:	01c00044 	movi	r7,1
  803ab4:	d8800715 	stw	r2,28(sp)
  803ab8:	d9800c15 	stw	r6,48(sp)
  803abc:	e0801015 	stw	r2,64(fp)
  803ac0:	d8000315 	stw	zero,12(sp)
  803ac4:	d9c00b15 	stw	r7,44(sp)
  803ac8:	d9800615 	stw	r6,24(sp)
  803acc:	d8002215 	stw	zero,136(sp)
  803ad0:	d8800117 	ldw	r2,4(sp)
  803ad4:	10008916 	blt	r2,zero,803cfc <_dtoa_r+0x990>
  803ad8:	d9000517 	ldw	r4,20(sp)
  803adc:	00c00384 	movi	r3,14
  803ae0:	19008616 	blt	r3,r4,803cfc <_dtoa_r+0x990>
  803ae4:	200490fa 	slli	r2,r4,3
  803ae8:	00c020b4 	movhi	r3,130
  803aec:	d9802217 	ldw	r6,136(sp)
  803af0:	18e98f04 	addi	r3,r3,-22980
  803af4:	1885883a 	add	r2,r3,r2
  803af8:	14000017 	ldw	r16,0(r2)
  803afc:	14400117 	ldw	r17,4(r2)
  803b00:	30016316 	blt	r6,zero,804090 <_dtoa_r+0xd24>
  803b04:	800d883a 	mov	r6,r16
  803b08:	880f883a 	mov	r7,r17
  803b0c:	9009883a 	mov	r4,r18
  803b10:	980b883a 	mov	r5,r19
  803b14:	080bb140 	call	80bb14 <__divdf3>
  803b18:	180b883a 	mov	r5,r3
  803b1c:	1009883a 	mov	r4,r2
  803b20:	080d8a40 	call	80d8a4 <__fixdfsi>
  803b24:	1009883a 	mov	r4,r2
  803b28:	102b883a 	mov	r21,r2
  803b2c:	080d9240 	call	80d924 <__floatsidf>
  803b30:	800d883a 	mov	r6,r16
  803b34:	880f883a 	mov	r7,r17
  803b38:	1009883a 	mov	r4,r2
  803b3c:	180b883a 	mov	r5,r3
  803b40:	080c73c0 	call	80c73c <__muldf3>
  803b44:	100d883a 	mov	r6,r2
  803b48:	180f883a 	mov	r7,r3
  803b4c:	9009883a 	mov	r4,r18
  803b50:	980b883a 	mov	r5,r19
  803b54:	080cfa80 	call	80cfa8 <__subdf3>
  803b58:	d9c00717 	ldw	r7,28(sp)
  803b5c:	1009883a 	mov	r4,r2
  803b60:	a8800c04 	addi	r2,r21,48
  803b64:	38800005 	stb	r2,0(r7)
  803b68:	3dc00044 	addi	r23,r7,1
  803b6c:	d9c00617 	ldw	r7,24(sp)
  803b70:	01800044 	movi	r6,1
  803b74:	180b883a 	mov	r5,r3
  803b78:	2005883a 	mov	r2,r4
  803b7c:	39803826 	beq	r7,r6,803c60 <_dtoa_r+0x8f4>
  803b80:	000d883a 	mov	r6,zero
  803b84:	01d00934 	movhi	r7,16420
  803b88:	080c73c0 	call	80c73c <__muldf3>
  803b8c:	000d883a 	mov	r6,zero
  803b90:	000f883a 	mov	r7,zero
  803b94:	1009883a 	mov	r4,r2
  803b98:	180b883a 	mov	r5,r3
  803b9c:	1025883a 	mov	r18,r2
  803ba0:	1827883a 	mov	r19,r3
  803ba4:	080c4e40 	call	80c4e4 <__eqdf2>
  803ba8:	103f9a26 	beq	r2,zero,803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803bac:	d9c00617 	ldw	r7,24(sp)
  803bb0:	d8c00717 	ldw	r3,28(sp)
  803bb4:	b829883a 	mov	r20,r23
  803bb8:	38bfffc4 	addi	r2,r7,-1
  803bbc:	18ad883a 	add	r22,r3,r2
  803bc0:	00000a06 	br	803bec <_dtoa_r+0x880>
  803bc4:	080c73c0 	call	80c73c <__muldf3>
  803bc8:	000d883a 	mov	r6,zero
  803bcc:	000f883a 	mov	r7,zero
  803bd0:	1009883a 	mov	r4,r2
  803bd4:	180b883a 	mov	r5,r3
  803bd8:	1025883a 	mov	r18,r2
  803bdc:	1827883a 	mov	r19,r3
  803be0:	b829883a 	mov	r20,r23
  803be4:	080c4e40 	call	80c4e4 <__eqdf2>
  803be8:	103f8a26 	beq	r2,zero,803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803bec:	800d883a 	mov	r6,r16
  803bf0:	880f883a 	mov	r7,r17
  803bf4:	9009883a 	mov	r4,r18
  803bf8:	980b883a 	mov	r5,r19
  803bfc:	080bb140 	call	80bb14 <__divdf3>
  803c00:	180b883a 	mov	r5,r3
  803c04:	1009883a 	mov	r4,r2
  803c08:	080d8a40 	call	80d8a4 <__fixdfsi>
  803c0c:	1009883a 	mov	r4,r2
  803c10:	102b883a 	mov	r21,r2
  803c14:	080d9240 	call	80d924 <__floatsidf>
  803c18:	800d883a 	mov	r6,r16
  803c1c:	880f883a 	mov	r7,r17
  803c20:	1009883a 	mov	r4,r2
  803c24:	180b883a 	mov	r5,r3
  803c28:	080c73c0 	call	80c73c <__muldf3>
  803c2c:	100d883a 	mov	r6,r2
  803c30:	180f883a 	mov	r7,r3
  803c34:	9009883a 	mov	r4,r18
  803c38:	980b883a 	mov	r5,r19
  803c3c:	080cfa80 	call	80cfa8 <__subdf3>
  803c40:	aa000c04 	addi	r8,r21,48
  803c44:	a2000005 	stb	r8,0(r20)
  803c48:	000d883a 	mov	r6,zero
  803c4c:	01d00934 	movhi	r7,16420
  803c50:	1009883a 	mov	r4,r2
  803c54:	180b883a 	mov	r5,r3
  803c58:	a5c00044 	addi	r23,r20,1
  803c5c:	b53fd91e 	bne	r22,r20,803bc4 <__alt_mem_epcs_flash_controller_0+0xff7fabc4>
  803c60:	100d883a 	mov	r6,r2
  803c64:	180f883a 	mov	r7,r3
  803c68:	1009883a 	mov	r4,r2
  803c6c:	180b883a 	mov	r5,r3
  803c70:	080b2680 	call	80b268 <__adddf3>
  803c74:	100d883a 	mov	r6,r2
  803c78:	180f883a 	mov	r7,r3
  803c7c:	8009883a 	mov	r4,r16
  803c80:	880b883a 	mov	r5,r17
  803c84:	1027883a 	mov	r19,r2
  803c88:	1825883a 	mov	r18,r3
  803c8c:	080c6480 	call	80c648 <__ledf2>
  803c90:	10000816 	blt	r2,zero,803cb4 <_dtoa_r+0x948>
  803c94:	980d883a 	mov	r6,r19
  803c98:	900f883a 	mov	r7,r18
  803c9c:	8009883a 	mov	r4,r16
  803ca0:	880b883a 	mov	r5,r17
  803ca4:	080c4e40 	call	80c4e4 <__eqdf2>
  803ca8:	103f5a1e 	bne	r2,zero,803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803cac:	ad40004c 	andi	r21,r21,1
  803cb0:	a83f5826 	beq	r21,zero,803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803cb4:	bd3fffc3 	ldbu	r20,-1(r23)
  803cb8:	b8bfffc4 	addi	r2,r23,-1
  803cbc:	1007883a 	mov	r3,r2
  803cc0:	01400e44 	movi	r5,57
  803cc4:	d9800717 	ldw	r6,28(sp)
  803cc8:	00000506 	br	803ce0 <_dtoa_r+0x974>
  803ccc:	18ffffc4 	addi	r3,r3,-1
  803cd0:	11824726 	beq	r2,r6,8045f0 <_dtoa_r+0x1284>
  803cd4:	1d000003 	ldbu	r20,0(r3)
  803cd8:	102f883a 	mov	r23,r2
  803cdc:	10bfffc4 	addi	r2,r2,-1
  803ce0:	a1003fcc 	andi	r4,r20,255
  803ce4:	2100201c 	xori	r4,r4,128
  803ce8:	213fe004 	addi	r4,r4,-128
  803cec:	217ff726 	beq	r4,r5,803ccc <__alt_mem_epcs_flash_controller_0+0xff7faccc>
  803cf0:	a2000044 	addi	r8,r20,1
  803cf4:	12000005 	stb	r8,0(r2)
  803cf8:	003f4606 	br	803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803cfc:	d9000b17 	ldw	r4,44(sp)
  803d00:	2000c826 	beq	r4,zero,804024 <_dtoa_r+0xcb8>
  803d04:	d9800317 	ldw	r6,12(sp)
  803d08:	00c00044 	movi	r3,1
  803d0c:	1980f90e 	bge	r3,r6,8040f4 <_dtoa_r+0xd88>
  803d10:	d8800617 	ldw	r2,24(sp)
  803d14:	d8c00a17 	ldw	r3,40(sp)
  803d18:	157fffc4 	addi	r21,r2,-1
  803d1c:	1d41f316 	blt	r3,r21,8044ec <_dtoa_r+0x1180>
  803d20:	1d6bc83a 	sub	r21,r3,r21
  803d24:	d9c00617 	ldw	r7,24(sp)
  803d28:	3802aa16 	blt	r7,zero,8047d4 <_dtoa_r+0x1468>
  803d2c:	dd000817 	ldw	r20,32(sp)
  803d30:	d8800617 	ldw	r2,24(sp)
  803d34:	d8c00817 	ldw	r3,32(sp)
  803d38:	01400044 	movi	r5,1
  803d3c:	e009883a 	mov	r4,fp
  803d40:	1887883a 	add	r3,r3,r2
  803d44:	d8c00815 	stw	r3,32(sp)
  803d48:	b0ad883a 	add	r22,r22,r2
  803d4c:	0806e580 	call	806e58 <__i2b>
  803d50:	1023883a 	mov	r17,r2
  803d54:	a0000826 	beq	r20,zero,803d78 <_dtoa_r+0xa0c>
  803d58:	0580070e 	bge	zero,r22,803d78 <_dtoa_r+0xa0c>
  803d5c:	a005883a 	mov	r2,r20
  803d60:	b500b916 	blt	r22,r20,804048 <_dtoa_r+0xcdc>
  803d64:	d9000817 	ldw	r4,32(sp)
  803d68:	a0a9c83a 	sub	r20,r20,r2
  803d6c:	b0adc83a 	sub	r22,r22,r2
  803d70:	2089c83a 	sub	r4,r4,r2
  803d74:	d9000815 	stw	r4,32(sp)
  803d78:	d9800a17 	ldw	r6,40(sp)
  803d7c:	0181810e 	bge	zero,r6,804384 <_dtoa_r+0x1018>
  803d80:	d9c00b17 	ldw	r7,44(sp)
  803d84:	3800b326 	beq	r7,zero,804054 <_dtoa_r+0xce8>
  803d88:	a800b226 	beq	r21,zero,804054 <_dtoa_r+0xce8>
  803d8c:	880b883a 	mov	r5,r17
  803d90:	a80d883a 	mov	r6,r21
  803d94:	e009883a 	mov	r4,fp
  803d98:	08071200 	call	807120 <__pow5mult>
  803d9c:	d9800917 	ldw	r6,36(sp)
  803da0:	100b883a 	mov	r5,r2
  803da4:	e009883a 	mov	r4,fp
  803da8:	1023883a 	mov	r17,r2
  803dac:	0806e940 	call	806e94 <__multiply>
  803db0:	1021883a 	mov	r16,r2
  803db4:	d8800a17 	ldw	r2,40(sp)
  803db8:	d9400917 	ldw	r5,36(sp)
  803dbc:	e009883a 	mov	r4,fp
  803dc0:	1545c83a 	sub	r2,r2,r21
  803dc4:	d8800a15 	stw	r2,40(sp)
  803dc8:	0806acc0 	call	806acc <_Bfree>
  803dcc:	d8c00a17 	ldw	r3,40(sp)
  803dd0:	18009f1e 	bne	r3,zero,804050 <_dtoa_r+0xce4>
  803dd4:	05c00044 	movi	r23,1
  803dd8:	e009883a 	mov	r4,fp
  803ddc:	b80b883a 	mov	r5,r23
  803de0:	0806e580 	call	806e58 <__i2b>
  803de4:	d9000d17 	ldw	r4,52(sp)
  803de8:	102b883a 	mov	r21,r2
  803dec:	2000ce26 	beq	r4,zero,804128 <_dtoa_r+0xdbc>
  803df0:	200d883a 	mov	r6,r4
  803df4:	100b883a 	mov	r5,r2
  803df8:	e009883a 	mov	r4,fp
  803dfc:	08071200 	call	807120 <__pow5mult>
  803e00:	d9800317 	ldw	r6,12(sp)
  803e04:	102b883a 	mov	r21,r2
  803e08:	b981810e 	bge	r23,r6,804410 <_dtoa_r+0x10a4>
  803e0c:	0027883a 	mov	r19,zero
  803e10:	a8800417 	ldw	r2,16(r21)
  803e14:	05c00804 	movi	r23,32
  803e18:	10800104 	addi	r2,r2,4
  803e1c:	1085883a 	add	r2,r2,r2
  803e20:	1085883a 	add	r2,r2,r2
  803e24:	a885883a 	add	r2,r21,r2
  803e28:	11000017 	ldw	r4,0(r2)
  803e2c:	0806d400 	call	806d40 <__hi0bits>
  803e30:	b885c83a 	sub	r2,r23,r2
  803e34:	1585883a 	add	r2,r2,r22
  803e38:	108007cc 	andi	r2,r2,31
  803e3c:	1000b326 	beq	r2,zero,80410c <_dtoa_r+0xda0>
  803e40:	00c00804 	movi	r3,32
  803e44:	1887c83a 	sub	r3,r3,r2
  803e48:	01000104 	movi	r4,4
  803e4c:	20c2cd0e 	bge	r4,r3,804984 <_dtoa_r+0x1618>
  803e50:	00c00704 	movi	r3,28
  803e54:	1885c83a 	sub	r2,r3,r2
  803e58:	d8c00817 	ldw	r3,32(sp)
  803e5c:	a0a9883a 	add	r20,r20,r2
  803e60:	b0ad883a 	add	r22,r22,r2
  803e64:	1887883a 	add	r3,r3,r2
  803e68:	d8c00815 	stw	r3,32(sp)
  803e6c:	d9800817 	ldw	r6,32(sp)
  803e70:	0180040e 	bge	zero,r6,803e84 <_dtoa_r+0xb18>
  803e74:	800b883a 	mov	r5,r16
  803e78:	e009883a 	mov	r4,fp
  803e7c:	08072600 	call	807260 <__lshift>
  803e80:	1021883a 	mov	r16,r2
  803e84:	0580050e 	bge	zero,r22,803e9c <_dtoa_r+0xb30>
  803e88:	a80b883a 	mov	r5,r21
  803e8c:	b00d883a 	mov	r6,r22
  803e90:	e009883a 	mov	r4,fp
  803e94:	08072600 	call	807260 <__lshift>
  803e98:	102b883a 	mov	r21,r2
  803e9c:	d9c00e17 	ldw	r7,56(sp)
  803ea0:	3801211e 	bne	r7,zero,804328 <_dtoa_r+0xfbc>
  803ea4:	d9800617 	ldw	r6,24(sp)
  803ea8:	0181380e 	bge	zero,r6,80438c <_dtoa_r+0x1020>
  803eac:	d8c00b17 	ldw	r3,44(sp)
  803eb0:	1800ab1e 	bne	r3,zero,804160 <_dtoa_r+0xdf4>
  803eb4:	dc800717 	ldw	r18,28(sp)
  803eb8:	dcc00617 	ldw	r19,24(sp)
  803ebc:	9029883a 	mov	r20,r18
  803ec0:	00000206 	br	803ecc <_dtoa_r+0xb60>
  803ec4:	0806af40 	call	806af4 <__multadd>
  803ec8:	1021883a 	mov	r16,r2
  803ecc:	a80b883a 	mov	r5,r21
  803ed0:	8009883a 	mov	r4,r16
  803ed4:	08031440 	call	803144 <quorem>
  803ed8:	10800c04 	addi	r2,r2,48
  803edc:	90800005 	stb	r2,0(r18)
  803ee0:	94800044 	addi	r18,r18,1
  803ee4:	9507c83a 	sub	r3,r18,r20
  803ee8:	000f883a 	mov	r7,zero
  803eec:	01800284 	movi	r6,10
  803ef0:	800b883a 	mov	r5,r16
  803ef4:	e009883a 	mov	r4,fp
  803ef8:	1cfff216 	blt	r3,r19,803ec4 <__alt_mem_epcs_flash_controller_0+0xff7faec4>
  803efc:	1011883a 	mov	r8,r2
  803f00:	d8800617 	ldw	r2,24(sp)
  803f04:	0082370e 	bge	zero,r2,8047e4 <_dtoa_r+0x1478>
  803f08:	d9000717 	ldw	r4,28(sp)
  803f0c:	0025883a 	mov	r18,zero
  803f10:	20af883a 	add	r23,r4,r2
  803f14:	01800044 	movi	r6,1
  803f18:	800b883a 	mov	r5,r16
  803f1c:	e009883a 	mov	r4,fp
  803f20:	da001715 	stw	r8,92(sp)
  803f24:	08072600 	call	807260 <__lshift>
  803f28:	a80b883a 	mov	r5,r21
  803f2c:	1009883a 	mov	r4,r2
  803f30:	d8800915 	stw	r2,36(sp)
  803f34:	08073a80 	call	8073a8 <__mcmp>
  803f38:	da001717 	ldw	r8,92(sp)
  803f3c:	0081800e 	bge	zero,r2,804540 <_dtoa_r+0x11d4>
  803f40:	b93fffc3 	ldbu	r4,-1(r23)
  803f44:	b8bfffc4 	addi	r2,r23,-1
  803f48:	1007883a 	mov	r3,r2
  803f4c:	01800e44 	movi	r6,57
  803f50:	d9c00717 	ldw	r7,28(sp)
  803f54:	00000506 	br	803f6c <_dtoa_r+0xc00>
  803f58:	18ffffc4 	addi	r3,r3,-1
  803f5c:	11c12326 	beq	r2,r7,8043ec <_dtoa_r+0x1080>
  803f60:	19000003 	ldbu	r4,0(r3)
  803f64:	102f883a 	mov	r23,r2
  803f68:	10bfffc4 	addi	r2,r2,-1
  803f6c:	21403fcc 	andi	r5,r4,255
  803f70:	2940201c 	xori	r5,r5,128
  803f74:	297fe004 	addi	r5,r5,-128
  803f78:	29bff726 	beq	r5,r6,803f58 <__alt_mem_epcs_flash_controller_0+0xff7faf58>
  803f7c:	21000044 	addi	r4,r4,1
  803f80:	11000005 	stb	r4,0(r2)
  803f84:	a80b883a 	mov	r5,r21
  803f88:	e009883a 	mov	r4,fp
  803f8c:	0806acc0 	call	806acc <_Bfree>
  803f90:	883ea026 	beq	r17,zero,803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803f94:	90000426 	beq	r18,zero,803fa8 <_dtoa_r+0xc3c>
  803f98:	94400326 	beq	r18,r17,803fa8 <_dtoa_r+0xc3c>
  803f9c:	900b883a 	mov	r5,r18
  803fa0:	e009883a 	mov	r4,fp
  803fa4:	0806acc0 	call	806acc <_Bfree>
  803fa8:	880b883a 	mov	r5,r17
  803fac:	e009883a 	mov	r4,fp
  803fb0:	0806acc0 	call	806acc <_Bfree>
  803fb4:	003e9706 	br	803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  803fb8:	01800044 	movi	r6,1
  803fbc:	d9800e15 	stw	r6,56(sp)
  803fc0:	003d9606 	br	80361c <__alt_mem_epcs_flash_controller_0+0xff7fa61c>
  803fc4:	d8800817 	ldw	r2,32(sp)
  803fc8:	d8c00517 	ldw	r3,20(sp)
  803fcc:	d8000d15 	stw	zero,52(sp)
  803fd0:	10c5c83a 	sub	r2,r2,r3
  803fd4:	00c9c83a 	sub	r4,zero,r3
  803fd8:	d8800815 	stw	r2,32(sp)
  803fdc:	d9000a15 	stw	r4,40(sp)
  803fe0:	003d9706 	br	803640 <__alt_mem_epcs_flash_controller_0+0xff7fa640>
  803fe4:	05adc83a 	sub	r22,zero,r22
  803fe8:	dd800815 	stw	r22,32(sp)
  803fec:	002d883a 	mov	r22,zero
  803ff0:	003d8e06 	br	80362c <__alt_mem_epcs_flash_controller_0+0xff7fa62c>
  803ff4:	d9000517 	ldw	r4,20(sp)
  803ff8:	080d9240 	call	80d924 <__floatsidf>
  803ffc:	100d883a 	mov	r6,r2
  804000:	180f883a 	mov	r7,r3
  804004:	a009883a 	mov	r4,r20
  804008:	880b883a 	mov	r5,r17
  80400c:	080c4e40 	call	80c4e4 <__eqdf2>
  804010:	103d7126 	beq	r2,zero,8035d8 <__alt_mem_epcs_flash_controller_0+0xff7fa5d8>
  804014:	d9c00517 	ldw	r7,20(sp)
  804018:	39ffffc4 	addi	r7,r7,-1
  80401c:	d9c00515 	stw	r7,20(sp)
  804020:	003d6d06 	br	8035d8 <__alt_mem_epcs_flash_controller_0+0xff7fa5d8>
  804024:	dd400a17 	ldw	r21,40(sp)
  804028:	dd000817 	ldw	r20,32(sp)
  80402c:	0023883a 	mov	r17,zero
  804030:	003f4806 	br	803d54 <__alt_mem_epcs_flash_controller_0+0xff7fad54>
  804034:	10e3c83a 	sub	r17,r2,r3
  804038:	9448983a 	sll	r4,r18,r17
  80403c:	003d3206 	br	803508 <__alt_mem_epcs_flash_controller_0+0xff7fa508>
  804040:	d8000e15 	stw	zero,56(sp)
  804044:	003d7506 	br	80361c <__alt_mem_epcs_flash_controller_0+0xff7fa61c>
  804048:	b005883a 	mov	r2,r22
  80404c:	003f4506 	br	803d64 <__alt_mem_epcs_flash_controller_0+0xff7fad64>
  804050:	dc000915 	stw	r16,36(sp)
  804054:	d9800a17 	ldw	r6,40(sp)
  804058:	d9400917 	ldw	r5,36(sp)
  80405c:	e009883a 	mov	r4,fp
  804060:	08071200 	call	807120 <__pow5mult>
  804064:	1021883a 	mov	r16,r2
  804068:	003f5a06 	br	803dd4 <__alt_mem_epcs_flash_controller_0+0xff7fadd4>
  80406c:	01c00044 	movi	r7,1
  804070:	d9c00b15 	stw	r7,44(sp)
  804074:	d8802217 	ldw	r2,136(sp)
  804078:	0081280e 	bge	zero,r2,80451c <_dtoa_r+0x11b0>
  80407c:	100d883a 	mov	r6,r2
  804080:	1021883a 	mov	r16,r2
  804084:	d8800c15 	stw	r2,48(sp)
  804088:	d8800615 	stw	r2,24(sp)
  80408c:	003d8806 	br	8036b0 <__alt_mem_epcs_flash_controller_0+0xff7fa6b0>
  804090:	d8800617 	ldw	r2,24(sp)
  804094:	00be9b16 	blt	zero,r2,803b04 <__alt_mem_epcs_flash_controller_0+0xff7fab04>
  804098:	10010f1e 	bne	r2,zero,8044d8 <_dtoa_r+0x116c>
  80409c:	880b883a 	mov	r5,r17
  8040a0:	000d883a 	mov	r6,zero
  8040a4:	01d00534 	movhi	r7,16404
  8040a8:	8009883a 	mov	r4,r16
  8040ac:	080c73c0 	call	80c73c <__muldf3>
  8040b0:	900d883a 	mov	r6,r18
  8040b4:	980f883a 	mov	r7,r19
  8040b8:	1009883a 	mov	r4,r2
  8040bc:	180b883a 	mov	r5,r3
  8040c0:	080c56c0 	call	80c56c <__gedf2>
  8040c4:	002b883a 	mov	r21,zero
  8040c8:	0023883a 	mov	r17,zero
  8040cc:	1000bf16 	blt	r2,zero,8043cc <_dtoa_r+0x1060>
  8040d0:	d9802217 	ldw	r6,136(sp)
  8040d4:	ddc00717 	ldw	r23,28(sp)
  8040d8:	018c303a 	nor	r6,zero,r6
  8040dc:	d9800515 	stw	r6,20(sp)
  8040e0:	a80b883a 	mov	r5,r21
  8040e4:	e009883a 	mov	r4,fp
  8040e8:	0806acc0 	call	806acc <_Bfree>
  8040ec:	883e4926 	beq	r17,zero,803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  8040f0:	003fad06 	br	803fa8 <__alt_mem_epcs_flash_controller_0+0xff7fafa8>
  8040f4:	d9c01117 	ldw	r7,68(sp)
  8040f8:	3801bc26 	beq	r7,zero,8047ec <_dtoa_r+0x1480>
  8040fc:	10810cc4 	addi	r2,r2,1075
  804100:	dd400a17 	ldw	r21,40(sp)
  804104:	dd000817 	ldw	r20,32(sp)
  804108:	003f0a06 	br	803d34 <__alt_mem_epcs_flash_controller_0+0xff7fad34>
  80410c:	00800704 	movi	r2,28
  804110:	d9000817 	ldw	r4,32(sp)
  804114:	a0a9883a 	add	r20,r20,r2
  804118:	b0ad883a 	add	r22,r22,r2
  80411c:	2089883a 	add	r4,r4,r2
  804120:	d9000815 	stw	r4,32(sp)
  804124:	003f5106 	br	803e6c <__alt_mem_epcs_flash_controller_0+0xff7fae6c>
  804128:	d8c00317 	ldw	r3,12(sp)
  80412c:	b8c1fc0e 	bge	r23,r3,804920 <_dtoa_r+0x15b4>
  804130:	0027883a 	mov	r19,zero
  804134:	b805883a 	mov	r2,r23
  804138:	003f3e06 	br	803e34 <__alt_mem_epcs_flash_controller_0+0xff7fae34>
  80413c:	880b883a 	mov	r5,r17
  804140:	e009883a 	mov	r4,fp
  804144:	000f883a 	mov	r7,zero
  804148:	01800284 	movi	r6,10
  80414c:	0806af40 	call	806af4 <__multadd>
  804150:	d9000c17 	ldw	r4,48(sp)
  804154:	1023883a 	mov	r17,r2
  804158:	0102040e 	bge	zero,r4,80496c <_dtoa_r+0x1600>
  80415c:	d9000615 	stw	r4,24(sp)
  804160:	0500050e 	bge	zero,r20,804178 <_dtoa_r+0xe0c>
  804164:	880b883a 	mov	r5,r17
  804168:	a00d883a 	mov	r6,r20
  80416c:	e009883a 	mov	r4,fp
  804170:	08072600 	call	807260 <__lshift>
  804174:	1023883a 	mov	r17,r2
  804178:	9801241e 	bne	r19,zero,80460c <_dtoa_r+0x12a0>
  80417c:	8829883a 	mov	r20,r17
  804180:	d9000617 	ldw	r4,24(sp)
  804184:	dcc00717 	ldw	r19,28(sp)
  804188:	9480004c 	andi	r18,r18,1
  80418c:	20bfffc4 	addi	r2,r4,-1
  804190:	9885883a 	add	r2,r19,r2
  804194:	d8800415 	stw	r2,16(sp)
  804198:	dc800615 	stw	r18,24(sp)
  80419c:	a80b883a 	mov	r5,r21
  8041a0:	8009883a 	mov	r4,r16
  8041a4:	08031440 	call	803144 <quorem>
  8041a8:	880b883a 	mov	r5,r17
  8041ac:	8009883a 	mov	r4,r16
  8041b0:	102f883a 	mov	r23,r2
  8041b4:	08073a80 	call	8073a8 <__mcmp>
  8041b8:	a80b883a 	mov	r5,r21
  8041bc:	a00d883a 	mov	r6,r20
  8041c0:	e009883a 	mov	r4,fp
  8041c4:	102d883a 	mov	r22,r2
  8041c8:	08074080 	call	807408 <__mdiff>
  8041cc:	1007883a 	mov	r3,r2
  8041d0:	10800317 	ldw	r2,12(r2)
  8041d4:	bc800c04 	addi	r18,r23,48
  8041d8:	180b883a 	mov	r5,r3
  8041dc:	10004e1e 	bne	r2,zero,804318 <_dtoa_r+0xfac>
  8041e0:	8009883a 	mov	r4,r16
  8041e4:	d8c01615 	stw	r3,88(sp)
  8041e8:	08073a80 	call	8073a8 <__mcmp>
  8041ec:	d8c01617 	ldw	r3,88(sp)
  8041f0:	e009883a 	mov	r4,fp
  8041f4:	d8801615 	stw	r2,88(sp)
  8041f8:	180b883a 	mov	r5,r3
  8041fc:	0806acc0 	call	806acc <_Bfree>
  804200:	d8801617 	ldw	r2,88(sp)
  804204:	1000041e 	bne	r2,zero,804218 <_dtoa_r+0xeac>
  804208:	d9800317 	ldw	r6,12(sp)
  80420c:	3000021e 	bne	r6,zero,804218 <_dtoa_r+0xeac>
  804210:	d8c00617 	ldw	r3,24(sp)
  804214:	18003726 	beq	r3,zero,8042f4 <_dtoa_r+0xf88>
  804218:	b0002016 	blt	r22,zero,80429c <_dtoa_r+0xf30>
  80421c:	b000041e 	bne	r22,zero,804230 <_dtoa_r+0xec4>
  804220:	d9000317 	ldw	r4,12(sp)
  804224:	2000021e 	bne	r4,zero,804230 <_dtoa_r+0xec4>
  804228:	d8c00617 	ldw	r3,24(sp)
  80422c:	18001b26 	beq	r3,zero,80429c <_dtoa_r+0xf30>
  804230:	00810716 	blt	zero,r2,804650 <_dtoa_r+0x12e4>
  804234:	d8c00417 	ldw	r3,16(sp)
  804238:	9d800044 	addi	r22,r19,1
  80423c:	9c800005 	stb	r18,0(r19)
  804240:	b02f883a 	mov	r23,r22
  804244:	98c10626 	beq	r19,r3,804660 <_dtoa_r+0x12f4>
  804248:	800b883a 	mov	r5,r16
  80424c:	000f883a 	mov	r7,zero
  804250:	01800284 	movi	r6,10
  804254:	e009883a 	mov	r4,fp
  804258:	0806af40 	call	806af4 <__multadd>
  80425c:	1021883a 	mov	r16,r2
  804260:	000f883a 	mov	r7,zero
  804264:	01800284 	movi	r6,10
  804268:	880b883a 	mov	r5,r17
  80426c:	e009883a 	mov	r4,fp
  804270:	8d002526 	beq	r17,r20,804308 <_dtoa_r+0xf9c>
  804274:	0806af40 	call	806af4 <__multadd>
  804278:	a00b883a 	mov	r5,r20
  80427c:	000f883a 	mov	r7,zero
  804280:	01800284 	movi	r6,10
  804284:	e009883a 	mov	r4,fp
  804288:	1023883a 	mov	r17,r2
  80428c:	0806af40 	call	806af4 <__multadd>
  804290:	1029883a 	mov	r20,r2
  804294:	b027883a 	mov	r19,r22
  804298:	003fc006 	br	80419c <__alt_mem_epcs_flash_controller_0+0xff7fb19c>
  80429c:	9011883a 	mov	r8,r18
  8042a0:	00800e0e 	bge	zero,r2,8042dc <_dtoa_r+0xf70>
  8042a4:	800b883a 	mov	r5,r16
  8042a8:	01800044 	movi	r6,1
  8042ac:	e009883a 	mov	r4,fp
  8042b0:	da001715 	stw	r8,92(sp)
  8042b4:	08072600 	call	807260 <__lshift>
  8042b8:	a80b883a 	mov	r5,r21
  8042bc:	1009883a 	mov	r4,r2
  8042c0:	1021883a 	mov	r16,r2
  8042c4:	08073a80 	call	8073a8 <__mcmp>
  8042c8:	da001717 	ldw	r8,92(sp)
  8042cc:	0081960e 	bge	zero,r2,804928 <_dtoa_r+0x15bc>
  8042d0:	00800e44 	movi	r2,57
  8042d4:	40817026 	beq	r8,r2,804898 <_dtoa_r+0x152c>
  8042d8:	ba000c44 	addi	r8,r23,49
  8042dc:	8825883a 	mov	r18,r17
  8042e0:	9dc00044 	addi	r23,r19,1
  8042e4:	9a000005 	stb	r8,0(r19)
  8042e8:	a023883a 	mov	r17,r20
  8042ec:	dc000915 	stw	r16,36(sp)
  8042f0:	003f2406 	br	803f84 <__alt_mem_epcs_flash_controller_0+0xff7faf84>
  8042f4:	00800e44 	movi	r2,57
  8042f8:	9011883a 	mov	r8,r18
  8042fc:	90816626 	beq	r18,r2,804898 <_dtoa_r+0x152c>
  804300:	05bff516 	blt	zero,r22,8042d8 <__alt_mem_epcs_flash_controller_0+0xff7fb2d8>
  804304:	003ff506 	br	8042dc <__alt_mem_epcs_flash_controller_0+0xff7fb2dc>
  804308:	0806af40 	call	806af4 <__multadd>
  80430c:	1023883a 	mov	r17,r2
  804310:	1029883a 	mov	r20,r2
  804314:	003fdf06 	br	804294 <__alt_mem_epcs_flash_controller_0+0xff7fb294>
  804318:	e009883a 	mov	r4,fp
  80431c:	0806acc0 	call	806acc <_Bfree>
  804320:	00800044 	movi	r2,1
  804324:	003fbc06 	br	804218 <__alt_mem_epcs_flash_controller_0+0xff7fb218>
  804328:	a80b883a 	mov	r5,r21
  80432c:	8009883a 	mov	r4,r16
  804330:	08073a80 	call	8073a8 <__mcmp>
  804334:	103edb0e 	bge	r2,zero,803ea4 <__alt_mem_epcs_flash_controller_0+0xff7faea4>
  804338:	800b883a 	mov	r5,r16
  80433c:	000f883a 	mov	r7,zero
  804340:	01800284 	movi	r6,10
  804344:	e009883a 	mov	r4,fp
  804348:	0806af40 	call	806af4 <__multadd>
  80434c:	1021883a 	mov	r16,r2
  804350:	d8800517 	ldw	r2,20(sp)
  804354:	d8c00b17 	ldw	r3,44(sp)
  804358:	10bfffc4 	addi	r2,r2,-1
  80435c:	d8800515 	stw	r2,20(sp)
  804360:	183f761e 	bne	r3,zero,80413c <__alt_mem_epcs_flash_controller_0+0xff7fb13c>
  804364:	d9000c17 	ldw	r4,48(sp)
  804368:	0101730e 	bge	zero,r4,804938 <_dtoa_r+0x15cc>
  80436c:	d9000615 	stw	r4,24(sp)
  804370:	003ed006 	br	803eb4 <__alt_mem_epcs_flash_controller_0+0xff7faeb4>
  804374:	00800084 	movi	r2,2
  804378:	3081861e 	bne	r6,r2,804994 <_dtoa_r+0x1628>
  80437c:	d8000b15 	stw	zero,44(sp)
  804380:	003f3c06 	br	804074 <__alt_mem_epcs_flash_controller_0+0xff7fb074>
  804384:	dc000917 	ldw	r16,36(sp)
  804388:	003e9206 	br	803dd4 <__alt_mem_epcs_flash_controller_0+0xff7fadd4>
  80438c:	d9c00317 	ldw	r7,12(sp)
  804390:	00800084 	movi	r2,2
  804394:	11fec50e 	bge	r2,r7,803eac <__alt_mem_epcs_flash_controller_0+0xff7faeac>
  804398:	d9000617 	ldw	r4,24(sp)
  80439c:	20013c1e 	bne	r4,zero,804890 <_dtoa_r+0x1524>
  8043a0:	a80b883a 	mov	r5,r21
  8043a4:	000f883a 	mov	r7,zero
  8043a8:	01800144 	movi	r6,5
  8043ac:	e009883a 	mov	r4,fp
  8043b0:	0806af40 	call	806af4 <__multadd>
  8043b4:	100b883a 	mov	r5,r2
  8043b8:	8009883a 	mov	r4,r16
  8043bc:	102b883a 	mov	r21,r2
  8043c0:	08073a80 	call	8073a8 <__mcmp>
  8043c4:	dc000915 	stw	r16,36(sp)
  8043c8:	00bf410e 	bge	zero,r2,8040d0 <__alt_mem_epcs_flash_controller_0+0xff7fb0d0>
  8043cc:	d9c00717 	ldw	r7,28(sp)
  8043d0:	00800c44 	movi	r2,49
  8043d4:	38800005 	stb	r2,0(r7)
  8043d8:	d8800517 	ldw	r2,20(sp)
  8043dc:	3dc00044 	addi	r23,r7,1
  8043e0:	10800044 	addi	r2,r2,1
  8043e4:	d8800515 	stw	r2,20(sp)
  8043e8:	003f3d06 	br	8040e0 <__alt_mem_epcs_flash_controller_0+0xff7fb0e0>
  8043ec:	d9800517 	ldw	r6,20(sp)
  8043f0:	d9c00717 	ldw	r7,28(sp)
  8043f4:	00800c44 	movi	r2,49
  8043f8:	31800044 	addi	r6,r6,1
  8043fc:	d9800515 	stw	r6,20(sp)
  804400:	38800005 	stb	r2,0(r7)
  804404:	003edf06 	br	803f84 <__alt_mem_epcs_flash_controller_0+0xff7faf84>
  804408:	d8000b15 	stw	zero,44(sp)
  80440c:	003c9f06 	br	80368c <__alt_mem_epcs_flash_controller_0+0xff7fa68c>
  804410:	903e7e1e 	bne	r18,zero,803e0c <__alt_mem_epcs_flash_controller_0+0xff7fae0c>
  804414:	00800434 	movhi	r2,16
  804418:	10bfffc4 	addi	r2,r2,-1
  80441c:	9884703a 	and	r2,r19,r2
  804420:	1000ea1e 	bne	r2,zero,8047cc <_dtoa_r+0x1460>
  804424:	9cdffc2c 	andhi	r19,r19,32752
  804428:	9800e826 	beq	r19,zero,8047cc <_dtoa_r+0x1460>
  80442c:	d9c00817 	ldw	r7,32(sp)
  804430:	b5800044 	addi	r22,r22,1
  804434:	04c00044 	movi	r19,1
  804438:	39c00044 	addi	r7,r7,1
  80443c:	d9c00815 	stw	r7,32(sp)
  804440:	d8800d17 	ldw	r2,52(sp)
  804444:	103e721e 	bne	r2,zero,803e10 <__alt_mem_epcs_flash_controller_0+0xff7fae10>
  804448:	00800044 	movi	r2,1
  80444c:	003e7906 	br	803e34 <__alt_mem_epcs_flash_controller_0+0xff7fae34>
  804450:	8009883a 	mov	r4,r16
  804454:	080d9240 	call	80d924 <__floatsidf>
  804458:	d9800f17 	ldw	r6,60(sp)
  80445c:	d9c01017 	ldw	r7,64(sp)
  804460:	1009883a 	mov	r4,r2
  804464:	180b883a 	mov	r5,r3
  804468:	080c73c0 	call	80c73c <__muldf3>
  80446c:	000d883a 	mov	r6,zero
  804470:	01d00734 	movhi	r7,16412
  804474:	1009883a 	mov	r4,r2
  804478:	180b883a 	mov	r5,r3
  80447c:	080b2680 	call	80b268 <__adddf3>
  804480:	047f3034 	movhi	r17,64704
  804484:	1021883a 	mov	r16,r2
  804488:	1c63883a 	add	r17,r3,r17
  80448c:	d9000f17 	ldw	r4,60(sp)
  804490:	d9401017 	ldw	r5,64(sp)
  804494:	000d883a 	mov	r6,zero
  804498:	01d00534 	movhi	r7,16404
  80449c:	080cfa80 	call	80cfa8 <__subdf3>
  8044a0:	800d883a 	mov	r6,r16
  8044a4:	880f883a 	mov	r7,r17
  8044a8:	1009883a 	mov	r4,r2
  8044ac:	180b883a 	mov	r5,r3
  8044b0:	102b883a 	mov	r21,r2
  8044b4:	1829883a 	mov	r20,r3
  8044b8:	080c56c0 	call	80c56c <__gedf2>
  8044bc:	00806c16 	blt	zero,r2,804670 <_dtoa_r+0x1304>
  8044c0:	89e0003c 	xorhi	r7,r17,32768
  8044c4:	800d883a 	mov	r6,r16
  8044c8:	a809883a 	mov	r4,r21
  8044cc:	a00b883a 	mov	r5,r20
  8044d0:	080c6480 	call	80c648 <__ledf2>
  8044d4:	103d7e0e 	bge	r2,zero,803ad0 <__alt_mem_epcs_flash_controller_0+0xff7faad0>
  8044d8:	002b883a 	mov	r21,zero
  8044dc:	0023883a 	mov	r17,zero
  8044e0:	003efb06 	br	8040d0 <__alt_mem_epcs_flash_controller_0+0xff7fb0d0>
  8044e4:	d8800717 	ldw	r2,28(sp)
  8044e8:	003bd006 	br	80342c <__alt_mem_epcs_flash_controller_0+0xff7fa42c>
  8044ec:	d9000a17 	ldw	r4,40(sp)
  8044f0:	d9800d17 	ldw	r6,52(sp)
  8044f4:	dd400a15 	stw	r21,40(sp)
  8044f8:	a905c83a 	sub	r2,r21,r4
  8044fc:	308d883a 	add	r6,r6,r2
  804500:	d9800d15 	stw	r6,52(sp)
  804504:	002b883a 	mov	r21,zero
  804508:	003e0606 	br	803d24 <__alt_mem_epcs_flash_controller_0+0xff7fad24>
  80450c:	9023883a 	mov	r17,r18
  804510:	9829883a 	mov	r20,r19
  804514:	04000084 	movi	r16,2
  804518:	003c9206 	br	803764 <__alt_mem_epcs_flash_controller_0+0xff7fa764>
  80451c:	04000044 	movi	r16,1
  804520:	dc000c15 	stw	r16,48(sp)
  804524:	dc000615 	stw	r16,24(sp)
  804528:	dc002215 	stw	r16,136(sp)
  80452c:	e0001115 	stw	zero,68(fp)
  804530:	000b883a 	mov	r5,zero
  804534:	003c6906 	br	8036dc <__alt_mem_epcs_flash_controller_0+0xff7fa6dc>
  804538:	3021883a 	mov	r16,r6
  80453c:	003ffb06 	br	80452c <__alt_mem_epcs_flash_controller_0+0xff7fb52c>
  804540:	1000021e 	bne	r2,zero,80454c <_dtoa_r+0x11e0>
  804544:	4200004c 	andi	r8,r8,1
  804548:	403e7d1e 	bne	r8,zero,803f40 <__alt_mem_epcs_flash_controller_0+0xff7faf40>
  80454c:	01000c04 	movi	r4,48
  804550:	00000106 	br	804558 <_dtoa_r+0x11ec>
  804554:	102f883a 	mov	r23,r2
  804558:	b8bfffc4 	addi	r2,r23,-1
  80455c:	10c00007 	ldb	r3,0(r2)
  804560:	193ffc26 	beq	r3,r4,804554 <__alt_mem_epcs_flash_controller_0+0xff7fb554>
  804564:	003e8706 	br	803f84 <__alt_mem_epcs_flash_controller_0+0xff7faf84>
  804568:	d8800517 	ldw	r2,20(sp)
  80456c:	00a3c83a 	sub	r17,zero,r2
  804570:	8800a426 	beq	r17,zero,804804 <_dtoa_r+0x1498>
  804574:	888003cc 	andi	r2,r17,15
  804578:	100490fa 	slli	r2,r2,3
  80457c:	00c020b4 	movhi	r3,130
  804580:	18e98f04 	addi	r3,r3,-22980
  804584:	1885883a 	add	r2,r3,r2
  804588:	11800017 	ldw	r6,0(r2)
  80458c:	11c00117 	ldw	r7,4(r2)
  804590:	9009883a 	mov	r4,r18
  804594:	980b883a 	mov	r5,r19
  804598:	8823d13a 	srai	r17,r17,4
  80459c:	080c73c0 	call	80c73c <__muldf3>
  8045a0:	d8800f15 	stw	r2,60(sp)
  8045a4:	d8c01015 	stw	r3,64(sp)
  8045a8:	8800e826 	beq	r17,zero,80494c <_dtoa_r+0x15e0>
  8045ac:	050020b4 	movhi	r20,130
  8045b0:	a5298504 	addi	r20,r20,-23020
  8045b4:	04000084 	movi	r16,2
  8045b8:	8980004c 	andi	r6,r17,1
  8045bc:	1009883a 	mov	r4,r2
  8045c0:	8823d07a 	srai	r17,r17,1
  8045c4:	180b883a 	mov	r5,r3
  8045c8:	30000426 	beq	r6,zero,8045dc <_dtoa_r+0x1270>
  8045cc:	a1800017 	ldw	r6,0(r20)
  8045d0:	a1c00117 	ldw	r7,4(r20)
  8045d4:	84000044 	addi	r16,r16,1
  8045d8:	080c73c0 	call	80c73c <__muldf3>
  8045dc:	a5000204 	addi	r20,r20,8
  8045e0:	883ff51e 	bne	r17,zero,8045b8 <__alt_mem_epcs_flash_controller_0+0xff7fb5b8>
  8045e4:	d8800f15 	stw	r2,60(sp)
  8045e8:	d8c01015 	stw	r3,64(sp)
  8045ec:	003c7606 	br	8037c8 <__alt_mem_epcs_flash_controller_0+0xff7fa7c8>
  8045f0:	00c00c04 	movi	r3,48
  8045f4:	10c00005 	stb	r3,0(r2)
  8045f8:	d8c00517 	ldw	r3,20(sp)
  8045fc:	bd3fffc3 	ldbu	r20,-1(r23)
  804600:	18c00044 	addi	r3,r3,1
  804604:	d8c00515 	stw	r3,20(sp)
  804608:	003db906 	br	803cf0 <__alt_mem_epcs_flash_controller_0+0xff7facf0>
  80460c:	89400117 	ldw	r5,4(r17)
  804610:	e009883a 	mov	r4,fp
  804614:	0806a240 	call	806a24 <_Balloc>
  804618:	89800417 	ldw	r6,16(r17)
  80461c:	89400304 	addi	r5,r17,12
  804620:	11000304 	addi	r4,r2,12
  804624:	31800084 	addi	r6,r6,2
  804628:	318d883a 	add	r6,r6,r6
  80462c:	318d883a 	add	r6,r6,r6
  804630:	1027883a 	mov	r19,r2
  804634:	08066580 	call	806658 <memcpy>
  804638:	01800044 	movi	r6,1
  80463c:	980b883a 	mov	r5,r19
  804640:	e009883a 	mov	r4,fp
  804644:	08072600 	call	807260 <__lshift>
  804648:	1029883a 	mov	r20,r2
  80464c:	003ecc06 	br	804180 <__alt_mem_epcs_flash_controller_0+0xff7fb180>
  804650:	00800e44 	movi	r2,57
  804654:	90809026 	beq	r18,r2,804898 <_dtoa_r+0x152c>
  804658:	92000044 	addi	r8,r18,1
  80465c:	003f1f06 	br	8042dc <__alt_mem_epcs_flash_controller_0+0xff7fb2dc>
  804660:	9011883a 	mov	r8,r18
  804664:	8825883a 	mov	r18,r17
  804668:	a023883a 	mov	r17,r20
  80466c:	003e2906 	br	803f14 <__alt_mem_epcs_flash_controller_0+0xff7faf14>
  804670:	002b883a 	mov	r21,zero
  804674:	0023883a 	mov	r17,zero
  804678:	003f5406 	br	8043cc <__alt_mem_epcs_flash_controller_0+0xff7fb3cc>
  80467c:	61bfffc4 	addi	r6,r12,-1
  804680:	300490fa 	slli	r2,r6,3
  804684:	00c020b4 	movhi	r3,130
  804688:	18e98f04 	addi	r3,r3,-22980
  80468c:	1885883a 	add	r2,r3,r2
  804690:	11000017 	ldw	r4,0(r2)
  804694:	11400117 	ldw	r5,4(r2)
  804698:	d8800717 	ldw	r2,28(sp)
  80469c:	880f883a 	mov	r7,r17
  8046a0:	d9801215 	stw	r6,72(sp)
  8046a4:	800d883a 	mov	r6,r16
  8046a8:	db001615 	stw	r12,88(sp)
  8046ac:	15c00044 	addi	r23,r2,1
  8046b0:	080c73c0 	call	80c73c <__muldf3>
  8046b4:	d9401017 	ldw	r5,64(sp)
  8046b8:	d9000f17 	ldw	r4,60(sp)
  8046bc:	d8c01515 	stw	r3,84(sp)
  8046c0:	d8801415 	stw	r2,80(sp)
  8046c4:	080d8a40 	call	80d8a4 <__fixdfsi>
  8046c8:	1009883a 	mov	r4,r2
  8046cc:	1021883a 	mov	r16,r2
  8046d0:	080d9240 	call	80d924 <__floatsidf>
  8046d4:	d9000f17 	ldw	r4,60(sp)
  8046d8:	d9401017 	ldw	r5,64(sp)
  8046dc:	100d883a 	mov	r6,r2
  8046e0:	180f883a 	mov	r7,r3
  8046e4:	080cfa80 	call	80cfa8 <__subdf3>
  8046e8:	1829883a 	mov	r20,r3
  8046ec:	d8c00717 	ldw	r3,28(sp)
  8046f0:	84000c04 	addi	r16,r16,48
  8046f4:	1023883a 	mov	r17,r2
  8046f8:	1c000005 	stb	r16,0(r3)
  8046fc:	db001617 	ldw	r12,88(sp)
  804700:	00800044 	movi	r2,1
  804704:	60802226 	beq	r12,r2,804790 <_dtoa_r+0x1424>
  804708:	d9c00717 	ldw	r7,28(sp)
  80470c:	8805883a 	mov	r2,r17
  804710:	b82b883a 	mov	r21,r23
  804714:	3b19883a 	add	r12,r7,r12
  804718:	6023883a 	mov	r17,r12
  80471c:	a007883a 	mov	r3,r20
  804720:	dc800f15 	stw	r18,60(sp)
  804724:	000d883a 	mov	r6,zero
  804728:	01d00934 	movhi	r7,16420
  80472c:	1009883a 	mov	r4,r2
  804730:	180b883a 	mov	r5,r3
  804734:	080c73c0 	call	80c73c <__muldf3>
  804738:	180b883a 	mov	r5,r3
  80473c:	1009883a 	mov	r4,r2
  804740:	1829883a 	mov	r20,r3
  804744:	1025883a 	mov	r18,r2
  804748:	080d8a40 	call	80d8a4 <__fixdfsi>
  80474c:	1009883a 	mov	r4,r2
  804750:	1021883a 	mov	r16,r2
  804754:	080d9240 	call	80d924 <__floatsidf>
  804758:	100d883a 	mov	r6,r2
  80475c:	180f883a 	mov	r7,r3
  804760:	9009883a 	mov	r4,r18
  804764:	a00b883a 	mov	r5,r20
  804768:	84000c04 	addi	r16,r16,48
  80476c:	080cfa80 	call	80cfa8 <__subdf3>
  804770:	ad400044 	addi	r21,r21,1
  804774:	ac3fffc5 	stb	r16,-1(r21)
  804778:	ac7fea1e 	bne	r21,r17,804724 <__alt_mem_epcs_flash_controller_0+0xff7fb724>
  80477c:	1023883a 	mov	r17,r2
  804780:	d8801217 	ldw	r2,72(sp)
  804784:	dc800f17 	ldw	r18,60(sp)
  804788:	1829883a 	mov	r20,r3
  80478c:	b8af883a 	add	r23,r23,r2
  804790:	d9001417 	ldw	r4,80(sp)
  804794:	d9401517 	ldw	r5,84(sp)
  804798:	000d883a 	mov	r6,zero
  80479c:	01cff834 	movhi	r7,16352
  8047a0:	080b2680 	call	80b268 <__adddf3>
  8047a4:	880d883a 	mov	r6,r17
  8047a8:	a00f883a 	mov	r7,r20
  8047ac:	1009883a 	mov	r4,r2
  8047b0:	180b883a 	mov	r5,r3
  8047b4:	080c6480 	call	80c648 <__ledf2>
  8047b8:	10003e0e 	bge	r2,zero,8048b4 <_dtoa_r+0x1548>
  8047bc:	d9001317 	ldw	r4,76(sp)
  8047c0:	bd3fffc3 	ldbu	r20,-1(r23)
  8047c4:	d9000515 	stw	r4,20(sp)
  8047c8:	003d3b06 	br	803cb8 <__alt_mem_epcs_flash_controller_0+0xff7facb8>
  8047cc:	0027883a 	mov	r19,zero
  8047d0:	003f1b06 	br	804440 <__alt_mem_epcs_flash_controller_0+0xff7fb440>
  8047d4:	d8800817 	ldw	r2,32(sp)
  8047d8:	11e9c83a 	sub	r20,r2,r7
  8047dc:	0005883a 	mov	r2,zero
  8047e0:	003d5406 	br	803d34 <__alt_mem_epcs_flash_controller_0+0xff7fad34>
  8047e4:	00800044 	movi	r2,1
  8047e8:	003dc706 	br	803f08 <__alt_mem_epcs_flash_controller_0+0xff7faf08>
  8047ec:	d8c00217 	ldw	r3,8(sp)
  8047f0:	00800d84 	movi	r2,54
  8047f4:	dd400a17 	ldw	r21,40(sp)
  8047f8:	10c5c83a 	sub	r2,r2,r3
  8047fc:	dd000817 	ldw	r20,32(sp)
  804800:	003d4c06 	br	803d34 <__alt_mem_epcs_flash_controller_0+0xff7fad34>
  804804:	dc800f15 	stw	r18,60(sp)
  804808:	dcc01015 	stw	r19,64(sp)
  80480c:	04000084 	movi	r16,2
  804810:	003bed06 	br	8037c8 <__alt_mem_epcs_flash_controller_0+0xff7fa7c8>
  804814:	d9000617 	ldw	r4,24(sp)
  804818:	203f0d26 	beq	r4,zero,804450 <__alt_mem_epcs_flash_controller_0+0xff7fb450>
  80481c:	d9800c17 	ldw	r6,48(sp)
  804820:	01bcab0e 	bge	zero,r6,803ad0 <__alt_mem_epcs_flash_controller_0+0xff7faad0>
  804824:	d9401017 	ldw	r5,64(sp)
  804828:	d9000f17 	ldw	r4,60(sp)
  80482c:	000d883a 	mov	r6,zero
  804830:	01d00934 	movhi	r7,16420
  804834:	080c73c0 	call	80c73c <__muldf3>
  804838:	81000044 	addi	r4,r16,1
  80483c:	d8800f15 	stw	r2,60(sp)
  804840:	d8c01015 	stw	r3,64(sp)
  804844:	080d9240 	call	80d924 <__floatsidf>
  804848:	d9800f17 	ldw	r6,60(sp)
  80484c:	d9c01017 	ldw	r7,64(sp)
  804850:	1009883a 	mov	r4,r2
  804854:	180b883a 	mov	r5,r3
  804858:	080c73c0 	call	80c73c <__muldf3>
  80485c:	01d00734 	movhi	r7,16412
  804860:	000d883a 	mov	r6,zero
  804864:	1009883a 	mov	r4,r2
  804868:	180b883a 	mov	r5,r3
  80486c:	080b2680 	call	80b268 <__adddf3>
  804870:	d9c00517 	ldw	r7,20(sp)
  804874:	047f3034 	movhi	r17,64704
  804878:	1021883a 	mov	r16,r2
  80487c:	39ffffc4 	addi	r7,r7,-1
  804880:	d9c01315 	stw	r7,76(sp)
  804884:	1c63883a 	add	r17,r3,r17
  804888:	db000c17 	ldw	r12,48(sp)
  80488c:	003bea06 	br	803838 <__alt_mem_epcs_flash_controller_0+0xff7fa838>
  804890:	dc000915 	stw	r16,36(sp)
  804894:	003e0e06 	br	8040d0 <__alt_mem_epcs_flash_controller_0+0xff7fb0d0>
  804898:	01000e44 	movi	r4,57
  80489c:	8825883a 	mov	r18,r17
  8048a0:	9dc00044 	addi	r23,r19,1
  8048a4:	99000005 	stb	r4,0(r19)
  8048a8:	a023883a 	mov	r17,r20
  8048ac:	dc000915 	stw	r16,36(sp)
  8048b0:	003da406 	br	803f44 <__alt_mem_epcs_flash_controller_0+0xff7faf44>
  8048b4:	d9801417 	ldw	r6,80(sp)
  8048b8:	d9c01517 	ldw	r7,84(sp)
  8048bc:	0009883a 	mov	r4,zero
  8048c0:	014ff834 	movhi	r5,16352
  8048c4:	080cfa80 	call	80cfa8 <__subdf3>
  8048c8:	880d883a 	mov	r6,r17
  8048cc:	a00f883a 	mov	r7,r20
  8048d0:	1009883a 	mov	r4,r2
  8048d4:	180b883a 	mov	r5,r3
  8048d8:	080c56c0 	call	80c56c <__gedf2>
  8048dc:	00bc7c0e 	bge	zero,r2,803ad0 <__alt_mem_epcs_flash_controller_0+0xff7faad0>
  8048e0:	01000c04 	movi	r4,48
  8048e4:	00000106 	br	8048ec <_dtoa_r+0x1580>
  8048e8:	102f883a 	mov	r23,r2
  8048ec:	b8bfffc4 	addi	r2,r23,-1
  8048f0:	10c00007 	ldb	r3,0(r2)
  8048f4:	193ffc26 	beq	r3,r4,8048e8 <__alt_mem_epcs_flash_controller_0+0xff7fb8e8>
  8048f8:	d9801317 	ldw	r6,76(sp)
  8048fc:	d9800515 	stw	r6,20(sp)
  804900:	003c4406 	br	803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  804904:	d9801317 	ldw	r6,76(sp)
  804908:	d9800515 	stw	r6,20(sp)
  80490c:	003cea06 	br	803cb8 <__alt_mem_epcs_flash_controller_0+0xff7facb8>
  804910:	dd800f17 	ldw	r22,60(sp)
  804914:	dcc01017 	ldw	r19,64(sp)
  804918:	dc801217 	ldw	r18,72(sp)
  80491c:	003c6c06 	br	803ad0 <__alt_mem_epcs_flash_controller_0+0xff7faad0>
  804920:	903e031e 	bne	r18,zero,804130 <__alt_mem_epcs_flash_controller_0+0xff7fb130>
  804924:	003ebb06 	br	804414 <__alt_mem_epcs_flash_controller_0+0xff7fb414>
  804928:	103e6c1e 	bne	r2,zero,8042dc <__alt_mem_epcs_flash_controller_0+0xff7fb2dc>
  80492c:	4080004c 	andi	r2,r8,1
  804930:	103e6a26 	beq	r2,zero,8042dc <__alt_mem_epcs_flash_controller_0+0xff7fb2dc>
  804934:	003e6606 	br	8042d0 <__alt_mem_epcs_flash_controller_0+0xff7fb2d0>
  804938:	d8c00317 	ldw	r3,12(sp)
  80493c:	00800084 	movi	r2,2
  804940:	10c02916 	blt	r2,r3,8049e8 <_dtoa_r+0x167c>
  804944:	d9000c17 	ldw	r4,48(sp)
  804948:	003e8806 	br	80436c <__alt_mem_epcs_flash_controller_0+0xff7fb36c>
  80494c:	04000084 	movi	r16,2
  804950:	003b9d06 	br	8037c8 <__alt_mem_epcs_flash_controller_0+0xff7fa7c8>
  804954:	d9001317 	ldw	r4,76(sp)
  804958:	d9000515 	stw	r4,20(sp)
  80495c:	003cd606 	br	803cb8 <__alt_mem_epcs_flash_controller_0+0xff7facb8>
  804960:	d8801317 	ldw	r2,76(sp)
  804964:	d8800515 	stw	r2,20(sp)
  804968:	003c2a06 	br	803a14 <__alt_mem_epcs_flash_controller_0+0xff7faa14>
  80496c:	d9800317 	ldw	r6,12(sp)
  804970:	00800084 	movi	r2,2
  804974:	11801516 	blt	r2,r6,8049cc <_dtoa_r+0x1660>
  804978:	d9c00c17 	ldw	r7,48(sp)
  80497c:	d9c00615 	stw	r7,24(sp)
  804980:	003df706 	br	804160 <__alt_mem_epcs_flash_controller_0+0xff7fb160>
  804984:	193d3926 	beq	r3,r4,803e6c <__alt_mem_epcs_flash_controller_0+0xff7fae6c>
  804988:	00c00f04 	movi	r3,60
  80498c:	1885c83a 	sub	r2,r3,r2
  804990:	003ddf06 	br	804110 <__alt_mem_epcs_flash_controller_0+0xff7fb110>
  804994:	e009883a 	mov	r4,fp
  804998:	e0001115 	stw	zero,68(fp)
  80499c:	000b883a 	mov	r5,zero
  8049a0:	0806a240 	call	806a24 <_Balloc>
  8049a4:	d8800715 	stw	r2,28(sp)
  8049a8:	d8c00717 	ldw	r3,28(sp)
  8049ac:	00bfffc4 	movi	r2,-1
  8049b0:	01000044 	movi	r4,1
  8049b4:	d8800c15 	stw	r2,48(sp)
  8049b8:	e0c01015 	stw	r3,64(fp)
  8049bc:	d9000b15 	stw	r4,44(sp)
  8049c0:	d8800615 	stw	r2,24(sp)
  8049c4:	d8002215 	stw	zero,136(sp)
  8049c8:	003c4106 	br	803ad0 <__alt_mem_epcs_flash_controller_0+0xff7faad0>
  8049cc:	d8c00c17 	ldw	r3,48(sp)
  8049d0:	d8c00615 	stw	r3,24(sp)
  8049d4:	003e7006 	br	804398 <__alt_mem_epcs_flash_controller_0+0xff7fb398>
  8049d8:	04400044 	movi	r17,1
  8049dc:	003b2006 	br	803660 <__alt_mem_epcs_flash_controller_0+0xff7fa660>
  8049e0:	000b883a 	mov	r5,zero
  8049e4:	003b3d06 	br	8036dc <__alt_mem_epcs_flash_controller_0+0xff7fa6dc>
  8049e8:	d8800c17 	ldw	r2,48(sp)
  8049ec:	d8800615 	stw	r2,24(sp)
  8049f0:	003e6906 	br	804398 <__alt_mem_epcs_flash_controller_0+0xff7fb398>

008049f4 <__sflush_r>:
  8049f4:	2880030b 	ldhu	r2,12(r5)
  8049f8:	defffb04 	addi	sp,sp,-20
  8049fc:	dcc00315 	stw	r19,12(sp)
  804a00:	dc400115 	stw	r17,4(sp)
  804a04:	dfc00415 	stw	ra,16(sp)
  804a08:	dc800215 	stw	r18,8(sp)
  804a0c:	dc000015 	stw	r16,0(sp)
  804a10:	10c0020c 	andi	r3,r2,8
  804a14:	2823883a 	mov	r17,r5
  804a18:	2027883a 	mov	r19,r4
  804a1c:	1800311e 	bne	r3,zero,804ae4 <__sflush_r+0xf0>
  804a20:	28c00117 	ldw	r3,4(r5)
  804a24:	10820014 	ori	r2,r2,2048
  804a28:	2880030d 	sth	r2,12(r5)
  804a2c:	00c04b0e 	bge	zero,r3,804b5c <__sflush_r+0x168>
  804a30:	8a000a17 	ldw	r8,40(r17)
  804a34:	40002326 	beq	r8,zero,804ac4 <__sflush_r+0xd0>
  804a38:	9c000017 	ldw	r16,0(r19)
  804a3c:	10c4000c 	andi	r3,r2,4096
  804a40:	98000015 	stw	zero,0(r19)
  804a44:	18004826 	beq	r3,zero,804b68 <__sflush_r+0x174>
  804a48:	89801417 	ldw	r6,80(r17)
  804a4c:	10c0010c 	andi	r3,r2,4
  804a50:	18000626 	beq	r3,zero,804a6c <__sflush_r+0x78>
  804a54:	88c00117 	ldw	r3,4(r17)
  804a58:	88800c17 	ldw	r2,48(r17)
  804a5c:	30cdc83a 	sub	r6,r6,r3
  804a60:	10000226 	beq	r2,zero,804a6c <__sflush_r+0x78>
  804a64:	88800f17 	ldw	r2,60(r17)
  804a68:	308dc83a 	sub	r6,r6,r2
  804a6c:	89400717 	ldw	r5,28(r17)
  804a70:	000f883a 	mov	r7,zero
  804a74:	9809883a 	mov	r4,r19
  804a78:	403ee83a 	callr	r8
  804a7c:	00ffffc4 	movi	r3,-1
  804a80:	10c04426 	beq	r2,r3,804b94 <__sflush_r+0x1a0>
  804a84:	88c0030b 	ldhu	r3,12(r17)
  804a88:	89000417 	ldw	r4,16(r17)
  804a8c:	88000115 	stw	zero,4(r17)
  804a90:	197dffcc 	andi	r5,r3,63487
  804a94:	8940030d 	sth	r5,12(r17)
  804a98:	89000015 	stw	r4,0(r17)
  804a9c:	18c4000c 	andi	r3,r3,4096
  804aa0:	18002c1e 	bne	r3,zero,804b54 <__sflush_r+0x160>
  804aa4:	89400c17 	ldw	r5,48(r17)
  804aa8:	9c000015 	stw	r16,0(r19)
  804aac:	28000526 	beq	r5,zero,804ac4 <__sflush_r+0xd0>
  804ab0:	88801004 	addi	r2,r17,64
  804ab4:	28800226 	beq	r5,r2,804ac0 <__sflush_r+0xcc>
  804ab8:	9809883a 	mov	r4,r19
  804abc:	08051700 	call	805170 <_free_r>
  804ac0:	88000c15 	stw	zero,48(r17)
  804ac4:	0005883a 	mov	r2,zero
  804ac8:	dfc00417 	ldw	ra,16(sp)
  804acc:	dcc00317 	ldw	r19,12(sp)
  804ad0:	dc800217 	ldw	r18,8(sp)
  804ad4:	dc400117 	ldw	r17,4(sp)
  804ad8:	dc000017 	ldw	r16,0(sp)
  804adc:	dec00504 	addi	sp,sp,20
  804ae0:	f800283a 	ret
  804ae4:	2c800417 	ldw	r18,16(r5)
  804ae8:	903ff626 	beq	r18,zero,804ac4 <__alt_mem_epcs_flash_controller_0+0xff7fbac4>
  804aec:	2c000017 	ldw	r16,0(r5)
  804af0:	108000cc 	andi	r2,r2,3
  804af4:	2c800015 	stw	r18,0(r5)
  804af8:	84a1c83a 	sub	r16,r16,r18
  804afc:	1000131e 	bne	r2,zero,804b4c <__sflush_r+0x158>
  804b00:	28800517 	ldw	r2,20(r5)
  804b04:	88800215 	stw	r2,8(r17)
  804b08:	04000316 	blt	zero,r16,804b18 <__sflush_r+0x124>
  804b0c:	003fed06 	br	804ac4 <__alt_mem_epcs_flash_controller_0+0xff7fbac4>
  804b10:	90a5883a 	add	r18,r18,r2
  804b14:	043feb0e 	bge	zero,r16,804ac4 <__alt_mem_epcs_flash_controller_0+0xff7fbac4>
  804b18:	88800917 	ldw	r2,36(r17)
  804b1c:	89400717 	ldw	r5,28(r17)
  804b20:	800f883a 	mov	r7,r16
  804b24:	900d883a 	mov	r6,r18
  804b28:	9809883a 	mov	r4,r19
  804b2c:	103ee83a 	callr	r2
  804b30:	80a1c83a 	sub	r16,r16,r2
  804b34:	00bff616 	blt	zero,r2,804b10 <__alt_mem_epcs_flash_controller_0+0xff7fbb10>
  804b38:	88c0030b 	ldhu	r3,12(r17)
  804b3c:	00bfffc4 	movi	r2,-1
  804b40:	18c01014 	ori	r3,r3,64
  804b44:	88c0030d 	sth	r3,12(r17)
  804b48:	003fdf06 	br	804ac8 <__alt_mem_epcs_flash_controller_0+0xff7fbac8>
  804b4c:	0005883a 	mov	r2,zero
  804b50:	003fec06 	br	804b04 <__alt_mem_epcs_flash_controller_0+0xff7fbb04>
  804b54:	88801415 	stw	r2,80(r17)
  804b58:	003fd206 	br	804aa4 <__alt_mem_epcs_flash_controller_0+0xff7fbaa4>
  804b5c:	28c00f17 	ldw	r3,60(r5)
  804b60:	00ffb316 	blt	zero,r3,804a30 <__alt_mem_epcs_flash_controller_0+0xff7fba30>
  804b64:	003fd706 	br	804ac4 <__alt_mem_epcs_flash_controller_0+0xff7fbac4>
  804b68:	89400717 	ldw	r5,28(r17)
  804b6c:	000d883a 	mov	r6,zero
  804b70:	01c00044 	movi	r7,1
  804b74:	9809883a 	mov	r4,r19
  804b78:	403ee83a 	callr	r8
  804b7c:	100d883a 	mov	r6,r2
  804b80:	00bfffc4 	movi	r2,-1
  804b84:	30801426 	beq	r6,r2,804bd8 <__sflush_r+0x1e4>
  804b88:	8880030b 	ldhu	r2,12(r17)
  804b8c:	8a000a17 	ldw	r8,40(r17)
  804b90:	003fae06 	br	804a4c <__alt_mem_epcs_flash_controller_0+0xff7fba4c>
  804b94:	98c00017 	ldw	r3,0(r19)
  804b98:	183fba26 	beq	r3,zero,804a84 <__alt_mem_epcs_flash_controller_0+0xff7fba84>
  804b9c:	01000744 	movi	r4,29
  804ba0:	19000626 	beq	r3,r4,804bbc <__sflush_r+0x1c8>
  804ba4:	01000584 	movi	r4,22
  804ba8:	19000426 	beq	r3,r4,804bbc <__sflush_r+0x1c8>
  804bac:	88c0030b 	ldhu	r3,12(r17)
  804bb0:	18c01014 	ori	r3,r3,64
  804bb4:	88c0030d 	sth	r3,12(r17)
  804bb8:	003fc306 	br	804ac8 <__alt_mem_epcs_flash_controller_0+0xff7fbac8>
  804bbc:	8880030b 	ldhu	r2,12(r17)
  804bc0:	88c00417 	ldw	r3,16(r17)
  804bc4:	88000115 	stw	zero,4(r17)
  804bc8:	10bdffcc 	andi	r2,r2,63487
  804bcc:	8880030d 	sth	r2,12(r17)
  804bd0:	88c00015 	stw	r3,0(r17)
  804bd4:	003fb306 	br	804aa4 <__alt_mem_epcs_flash_controller_0+0xff7fbaa4>
  804bd8:	98800017 	ldw	r2,0(r19)
  804bdc:	103fea26 	beq	r2,zero,804b88 <__alt_mem_epcs_flash_controller_0+0xff7fbb88>
  804be0:	00c00744 	movi	r3,29
  804be4:	10c00226 	beq	r2,r3,804bf0 <__sflush_r+0x1fc>
  804be8:	00c00584 	movi	r3,22
  804bec:	10c0031e 	bne	r2,r3,804bfc <__sflush_r+0x208>
  804bf0:	9c000015 	stw	r16,0(r19)
  804bf4:	0005883a 	mov	r2,zero
  804bf8:	003fb306 	br	804ac8 <__alt_mem_epcs_flash_controller_0+0xff7fbac8>
  804bfc:	88c0030b 	ldhu	r3,12(r17)
  804c00:	3005883a 	mov	r2,r6
  804c04:	18c01014 	ori	r3,r3,64
  804c08:	88c0030d 	sth	r3,12(r17)
  804c0c:	003fae06 	br	804ac8 <__alt_mem_epcs_flash_controller_0+0xff7fbac8>

00804c10 <_fflush_r>:
  804c10:	defffd04 	addi	sp,sp,-12
  804c14:	dc000115 	stw	r16,4(sp)
  804c18:	dfc00215 	stw	ra,8(sp)
  804c1c:	2021883a 	mov	r16,r4
  804c20:	20000226 	beq	r4,zero,804c2c <_fflush_r+0x1c>
  804c24:	20800e17 	ldw	r2,56(r4)
  804c28:	10000c26 	beq	r2,zero,804c5c <_fflush_r+0x4c>
  804c2c:	2880030f 	ldh	r2,12(r5)
  804c30:	1000051e 	bne	r2,zero,804c48 <_fflush_r+0x38>
  804c34:	0005883a 	mov	r2,zero
  804c38:	dfc00217 	ldw	ra,8(sp)
  804c3c:	dc000117 	ldw	r16,4(sp)
  804c40:	dec00304 	addi	sp,sp,12
  804c44:	f800283a 	ret
  804c48:	8009883a 	mov	r4,r16
  804c4c:	dfc00217 	ldw	ra,8(sp)
  804c50:	dc000117 	ldw	r16,4(sp)
  804c54:	dec00304 	addi	sp,sp,12
  804c58:	08049f41 	jmpi	8049f4 <__sflush_r>
  804c5c:	d9400015 	stw	r5,0(sp)
  804c60:	0804ffc0 	call	804ffc <__sinit>
  804c64:	d9400017 	ldw	r5,0(sp)
  804c68:	003ff006 	br	804c2c <__alt_mem_epcs_flash_controller_0+0xff7fbc2c>

00804c6c <fflush>:
  804c6c:	20000526 	beq	r4,zero,804c84 <fflush+0x18>
  804c70:	008020b4 	movhi	r2,130
  804c74:	10b1d504 	addi	r2,r2,-14508
  804c78:	200b883a 	mov	r5,r4
  804c7c:	11000017 	ldw	r4,0(r2)
  804c80:	0804c101 	jmpi	804c10 <_fflush_r>
  804c84:	008020b4 	movhi	r2,130
  804c88:	10b1d404 	addi	r2,r2,-14512
  804c8c:	11000017 	ldw	r4,0(r2)
  804c90:	01402034 	movhi	r5,128
  804c94:	29530404 	addi	r5,r5,19472
  804c98:	0805a0c1 	jmpi	805a0c <_fwalk_reent>

00804c9c <__fp_unlock>:
  804c9c:	0005883a 	mov	r2,zero
  804ca0:	f800283a 	ret

00804ca4 <_cleanup_r>:
  804ca4:	01402074 	movhi	r5,129
  804ca8:	29679a04 	addi	r5,r5,-24984
  804cac:	0805a0c1 	jmpi	805a0c <_fwalk_reent>

00804cb0 <__sinit.part.1>:
  804cb0:	defff704 	addi	sp,sp,-36
  804cb4:	00c02034 	movhi	r3,128
  804cb8:	dfc00815 	stw	ra,32(sp)
  804cbc:	ddc00715 	stw	r23,28(sp)
  804cc0:	dd800615 	stw	r22,24(sp)
  804cc4:	dd400515 	stw	r21,20(sp)
  804cc8:	dd000415 	stw	r20,16(sp)
  804ccc:	dcc00315 	stw	r19,12(sp)
  804cd0:	dc800215 	stw	r18,8(sp)
  804cd4:	dc400115 	stw	r17,4(sp)
  804cd8:	dc000015 	stw	r16,0(sp)
  804cdc:	18d32904 	addi	r3,r3,19620
  804ce0:	24000117 	ldw	r16,4(r4)
  804ce4:	20c00f15 	stw	r3,60(r4)
  804ce8:	2080bb04 	addi	r2,r4,748
  804cec:	00c000c4 	movi	r3,3
  804cf0:	20c0b915 	stw	r3,740(r4)
  804cf4:	2080ba15 	stw	r2,744(r4)
  804cf8:	2000b815 	stw	zero,736(r4)
  804cfc:	05c00204 	movi	r23,8
  804d00:	00800104 	movi	r2,4
  804d04:	2025883a 	mov	r18,r4
  804d08:	b80d883a 	mov	r6,r23
  804d0c:	81001704 	addi	r4,r16,92
  804d10:	000b883a 	mov	r5,zero
  804d14:	80000015 	stw	zero,0(r16)
  804d18:	80000115 	stw	zero,4(r16)
  804d1c:	80000215 	stw	zero,8(r16)
  804d20:	8080030d 	sth	r2,12(r16)
  804d24:	80001915 	stw	zero,100(r16)
  804d28:	8000038d 	sth	zero,14(r16)
  804d2c:	80000415 	stw	zero,16(r16)
  804d30:	80000515 	stw	zero,20(r16)
  804d34:	80000615 	stw	zero,24(r16)
  804d38:	08068fc0 	call	8068fc <memset>
  804d3c:	05802074 	movhi	r22,129
  804d40:	94400217 	ldw	r17,8(r18)
  804d44:	05402074 	movhi	r21,129
  804d48:	05002074 	movhi	r20,129
  804d4c:	04c02074 	movhi	r19,129
  804d50:	b5a09c04 	addi	r22,r22,-32144
  804d54:	ad60b304 	addi	r21,r21,-32052
  804d58:	a520d204 	addi	r20,r20,-31928
  804d5c:	9ce0e904 	addi	r19,r19,-31836
  804d60:	85800815 	stw	r22,32(r16)
  804d64:	85400915 	stw	r21,36(r16)
  804d68:	85000a15 	stw	r20,40(r16)
  804d6c:	84c00b15 	stw	r19,44(r16)
  804d70:	84000715 	stw	r16,28(r16)
  804d74:	00800284 	movi	r2,10
  804d78:	8880030d 	sth	r2,12(r17)
  804d7c:	00800044 	movi	r2,1
  804d80:	b80d883a 	mov	r6,r23
  804d84:	89001704 	addi	r4,r17,92
  804d88:	000b883a 	mov	r5,zero
  804d8c:	88000015 	stw	zero,0(r17)
  804d90:	88000115 	stw	zero,4(r17)
  804d94:	88000215 	stw	zero,8(r17)
  804d98:	88001915 	stw	zero,100(r17)
  804d9c:	8880038d 	sth	r2,14(r17)
  804da0:	88000415 	stw	zero,16(r17)
  804da4:	88000515 	stw	zero,20(r17)
  804da8:	88000615 	stw	zero,24(r17)
  804dac:	08068fc0 	call	8068fc <memset>
  804db0:	94000317 	ldw	r16,12(r18)
  804db4:	00800484 	movi	r2,18
  804db8:	8c400715 	stw	r17,28(r17)
  804dbc:	8d800815 	stw	r22,32(r17)
  804dc0:	8d400915 	stw	r21,36(r17)
  804dc4:	8d000a15 	stw	r20,40(r17)
  804dc8:	8cc00b15 	stw	r19,44(r17)
  804dcc:	8080030d 	sth	r2,12(r16)
  804dd0:	00800084 	movi	r2,2
  804dd4:	80000015 	stw	zero,0(r16)
  804dd8:	80000115 	stw	zero,4(r16)
  804ddc:	80000215 	stw	zero,8(r16)
  804de0:	80001915 	stw	zero,100(r16)
  804de4:	8080038d 	sth	r2,14(r16)
  804de8:	80000415 	stw	zero,16(r16)
  804dec:	80000515 	stw	zero,20(r16)
  804df0:	80000615 	stw	zero,24(r16)
  804df4:	b80d883a 	mov	r6,r23
  804df8:	000b883a 	mov	r5,zero
  804dfc:	81001704 	addi	r4,r16,92
  804e00:	08068fc0 	call	8068fc <memset>
  804e04:	00800044 	movi	r2,1
  804e08:	84000715 	stw	r16,28(r16)
  804e0c:	85800815 	stw	r22,32(r16)
  804e10:	85400915 	stw	r21,36(r16)
  804e14:	85000a15 	stw	r20,40(r16)
  804e18:	84c00b15 	stw	r19,44(r16)
  804e1c:	90800e15 	stw	r2,56(r18)
  804e20:	dfc00817 	ldw	ra,32(sp)
  804e24:	ddc00717 	ldw	r23,28(sp)
  804e28:	dd800617 	ldw	r22,24(sp)
  804e2c:	dd400517 	ldw	r21,20(sp)
  804e30:	dd000417 	ldw	r20,16(sp)
  804e34:	dcc00317 	ldw	r19,12(sp)
  804e38:	dc800217 	ldw	r18,8(sp)
  804e3c:	dc400117 	ldw	r17,4(sp)
  804e40:	dc000017 	ldw	r16,0(sp)
  804e44:	dec00904 	addi	sp,sp,36
  804e48:	f800283a 	ret

00804e4c <__fp_lock>:
  804e4c:	0005883a 	mov	r2,zero
  804e50:	f800283a 	ret

00804e54 <__sfmoreglue>:
  804e54:	defffc04 	addi	sp,sp,-16
  804e58:	dc800215 	stw	r18,8(sp)
  804e5c:	2825883a 	mov	r18,r5
  804e60:	dc000015 	stw	r16,0(sp)
  804e64:	01401a04 	movi	r5,104
  804e68:	2021883a 	mov	r16,r4
  804e6c:	913fffc4 	addi	r4,r18,-1
  804e70:	dfc00315 	stw	ra,12(sp)
  804e74:	dc400115 	stw	r17,4(sp)
  804e78:	080b2400 	call	80b240 <__mulsi3>
  804e7c:	8009883a 	mov	r4,r16
  804e80:	11401d04 	addi	r5,r2,116
  804e84:	1023883a 	mov	r17,r2
  804e88:	0805d680 	call	805d68 <_malloc_r>
  804e8c:	1021883a 	mov	r16,r2
  804e90:	10000726 	beq	r2,zero,804eb0 <__sfmoreglue+0x5c>
  804e94:	11000304 	addi	r4,r2,12
  804e98:	10000015 	stw	zero,0(r2)
  804e9c:	14800115 	stw	r18,4(r2)
  804ea0:	11000215 	stw	r4,8(r2)
  804ea4:	89801a04 	addi	r6,r17,104
  804ea8:	000b883a 	mov	r5,zero
  804eac:	08068fc0 	call	8068fc <memset>
  804eb0:	8005883a 	mov	r2,r16
  804eb4:	dfc00317 	ldw	ra,12(sp)
  804eb8:	dc800217 	ldw	r18,8(sp)
  804ebc:	dc400117 	ldw	r17,4(sp)
  804ec0:	dc000017 	ldw	r16,0(sp)
  804ec4:	dec00404 	addi	sp,sp,16
  804ec8:	f800283a 	ret

00804ecc <__sfp>:
  804ecc:	defffb04 	addi	sp,sp,-20
  804ed0:	dc000015 	stw	r16,0(sp)
  804ed4:	040020b4 	movhi	r16,130
  804ed8:	8431d404 	addi	r16,r16,-14512
  804edc:	dcc00315 	stw	r19,12(sp)
  804ee0:	2027883a 	mov	r19,r4
  804ee4:	81000017 	ldw	r4,0(r16)
  804ee8:	dfc00415 	stw	ra,16(sp)
  804eec:	dc800215 	stw	r18,8(sp)
  804ef0:	20800e17 	ldw	r2,56(r4)
  804ef4:	dc400115 	stw	r17,4(sp)
  804ef8:	1000021e 	bne	r2,zero,804f04 <__sfp+0x38>
  804efc:	0804cb00 	call	804cb0 <__sinit.part.1>
  804f00:	81000017 	ldw	r4,0(r16)
  804f04:	2480b804 	addi	r18,r4,736
  804f08:	047fffc4 	movi	r17,-1
  804f0c:	91000117 	ldw	r4,4(r18)
  804f10:	94000217 	ldw	r16,8(r18)
  804f14:	213fffc4 	addi	r4,r4,-1
  804f18:	20000a16 	blt	r4,zero,804f44 <__sfp+0x78>
  804f1c:	8080030f 	ldh	r2,12(r16)
  804f20:	10000c26 	beq	r2,zero,804f54 <__sfp+0x88>
  804f24:	80c01d04 	addi	r3,r16,116
  804f28:	00000206 	br	804f34 <__sfp+0x68>
  804f2c:	18bfe60f 	ldh	r2,-104(r3)
  804f30:	10000826 	beq	r2,zero,804f54 <__sfp+0x88>
  804f34:	213fffc4 	addi	r4,r4,-1
  804f38:	1c3ffd04 	addi	r16,r3,-12
  804f3c:	18c01a04 	addi	r3,r3,104
  804f40:	247ffa1e 	bne	r4,r17,804f2c <__alt_mem_epcs_flash_controller_0+0xff7fbf2c>
  804f44:	90800017 	ldw	r2,0(r18)
  804f48:	10001d26 	beq	r2,zero,804fc0 <__sfp+0xf4>
  804f4c:	1025883a 	mov	r18,r2
  804f50:	003fee06 	br	804f0c <__alt_mem_epcs_flash_controller_0+0xff7fbf0c>
  804f54:	00bfffc4 	movi	r2,-1
  804f58:	8080038d 	sth	r2,14(r16)
  804f5c:	00800044 	movi	r2,1
  804f60:	8080030d 	sth	r2,12(r16)
  804f64:	80001915 	stw	zero,100(r16)
  804f68:	80000015 	stw	zero,0(r16)
  804f6c:	80000215 	stw	zero,8(r16)
  804f70:	80000115 	stw	zero,4(r16)
  804f74:	80000415 	stw	zero,16(r16)
  804f78:	80000515 	stw	zero,20(r16)
  804f7c:	80000615 	stw	zero,24(r16)
  804f80:	01800204 	movi	r6,8
  804f84:	000b883a 	mov	r5,zero
  804f88:	81001704 	addi	r4,r16,92
  804f8c:	08068fc0 	call	8068fc <memset>
  804f90:	8005883a 	mov	r2,r16
  804f94:	80000c15 	stw	zero,48(r16)
  804f98:	80000d15 	stw	zero,52(r16)
  804f9c:	80001115 	stw	zero,68(r16)
  804fa0:	80001215 	stw	zero,72(r16)
  804fa4:	dfc00417 	ldw	ra,16(sp)
  804fa8:	dcc00317 	ldw	r19,12(sp)
  804fac:	dc800217 	ldw	r18,8(sp)
  804fb0:	dc400117 	ldw	r17,4(sp)
  804fb4:	dc000017 	ldw	r16,0(sp)
  804fb8:	dec00504 	addi	sp,sp,20
  804fbc:	f800283a 	ret
  804fc0:	01400104 	movi	r5,4
  804fc4:	9809883a 	mov	r4,r19
  804fc8:	0804e540 	call	804e54 <__sfmoreglue>
  804fcc:	90800015 	stw	r2,0(r18)
  804fd0:	103fde1e 	bne	r2,zero,804f4c <__alt_mem_epcs_flash_controller_0+0xff7fbf4c>
  804fd4:	00800304 	movi	r2,12
  804fd8:	98800015 	stw	r2,0(r19)
  804fdc:	0005883a 	mov	r2,zero
  804fe0:	003ff006 	br	804fa4 <__alt_mem_epcs_flash_controller_0+0xff7fbfa4>

00804fe4 <_cleanup>:
  804fe4:	008020b4 	movhi	r2,130
  804fe8:	10b1d404 	addi	r2,r2,-14512
  804fec:	11000017 	ldw	r4,0(r2)
  804ff0:	01402074 	movhi	r5,129
  804ff4:	29679a04 	addi	r5,r5,-24984
  804ff8:	0805a0c1 	jmpi	805a0c <_fwalk_reent>

00804ffc <__sinit>:
  804ffc:	20800e17 	ldw	r2,56(r4)
  805000:	10000126 	beq	r2,zero,805008 <__sinit+0xc>
  805004:	f800283a 	ret
  805008:	0804cb01 	jmpi	804cb0 <__sinit.part.1>

0080500c <__sfp_lock_acquire>:
  80500c:	f800283a 	ret

00805010 <__sfp_lock_release>:
  805010:	f800283a 	ret

00805014 <__sinit_lock_acquire>:
  805014:	f800283a 	ret

00805018 <__sinit_lock_release>:
  805018:	f800283a 	ret

0080501c <__fp_lock_all>:
  80501c:	008020b4 	movhi	r2,130
  805020:	10b1d504 	addi	r2,r2,-14508
  805024:	11000017 	ldw	r4,0(r2)
  805028:	01402034 	movhi	r5,128
  80502c:	29539304 	addi	r5,r5,20044
  805030:	08059481 	jmpi	805948 <_fwalk>

00805034 <__fp_unlock_all>:
  805034:	008020b4 	movhi	r2,130
  805038:	10b1d504 	addi	r2,r2,-14508
  80503c:	11000017 	ldw	r4,0(r2)
  805040:	01402034 	movhi	r5,128
  805044:	29532704 	addi	r5,r5,19612
  805048:	08059481 	jmpi	805948 <_fwalk>

0080504c <_malloc_trim_r>:
  80504c:	defffb04 	addi	sp,sp,-20
  805050:	dcc00315 	stw	r19,12(sp)
  805054:	04c020b4 	movhi	r19,130
  805058:	dc800215 	stw	r18,8(sp)
  80505c:	dc400115 	stw	r17,4(sp)
  805060:	dc000015 	stw	r16,0(sp)
  805064:	dfc00415 	stw	ra,16(sp)
  805068:	2821883a 	mov	r16,r5
  80506c:	9ceb9604 	addi	r19,r19,-20904
  805070:	2025883a 	mov	r18,r4
  805074:	080e7700 	call	80e770 <__malloc_lock>
  805078:	98800217 	ldw	r2,8(r19)
  80507c:	14400117 	ldw	r17,4(r2)
  805080:	00bfff04 	movi	r2,-4
  805084:	88a2703a 	and	r17,r17,r2
  805088:	8c21c83a 	sub	r16,r17,r16
  80508c:	8403fbc4 	addi	r16,r16,4079
  805090:	8020d33a 	srli	r16,r16,12
  805094:	0083ffc4 	movi	r2,4095
  805098:	843fffc4 	addi	r16,r16,-1
  80509c:	8020933a 	slli	r16,r16,12
  8050a0:	1400060e 	bge	r2,r16,8050bc <_malloc_trim_r+0x70>
  8050a4:	000b883a 	mov	r5,zero
  8050a8:	9009883a 	mov	r4,r18
  8050ac:	080821c0 	call	80821c <_sbrk_r>
  8050b0:	98c00217 	ldw	r3,8(r19)
  8050b4:	1c47883a 	add	r3,r3,r17
  8050b8:	10c00a26 	beq	r2,r3,8050e4 <_malloc_trim_r+0x98>
  8050bc:	9009883a 	mov	r4,r18
  8050c0:	080e8900 	call	80e890 <__malloc_unlock>
  8050c4:	0005883a 	mov	r2,zero
  8050c8:	dfc00417 	ldw	ra,16(sp)
  8050cc:	dcc00317 	ldw	r19,12(sp)
  8050d0:	dc800217 	ldw	r18,8(sp)
  8050d4:	dc400117 	ldw	r17,4(sp)
  8050d8:	dc000017 	ldw	r16,0(sp)
  8050dc:	dec00504 	addi	sp,sp,20
  8050e0:	f800283a 	ret
  8050e4:	040bc83a 	sub	r5,zero,r16
  8050e8:	9009883a 	mov	r4,r18
  8050ec:	080821c0 	call	80821c <_sbrk_r>
  8050f0:	00ffffc4 	movi	r3,-1
  8050f4:	10c00d26 	beq	r2,r3,80512c <_malloc_trim_r+0xe0>
  8050f8:	00c020b4 	movhi	r3,130
  8050fc:	18f23404 	addi	r3,r3,-14128
  805100:	18800017 	ldw	r2,0(r3)
  805104:	99000217 	ldw	r4,8(r19)
  805108:	8c23c83a 	sub	r17,r17,r16
  80510c:	8c400054 	ori	r17,r17,1
  805110:	1421c83a 	sub	r16,r2,r16
  805114:	24400115 	stw	r17,4(r4)
  805118:	9009883a 	mov	r4,r18
  80511c:	1c000015 	stw	r16,0(r3)
  805120:	080e8900 	call	80e890 <__malloc_unlock>
  805124:	00800044 	movi	r2,1
  805128:	003fe706 	br	8050c8 <__alt_mem_epcs_flash_controller_0+0xff7fc0c8>
  80512c:	000b883a 	mov	r5,zero
  805130:	9009883a 	mov	r4,r18
  805134:	080821c0 	call	80821c <_sbrk_r>
  805138:	99000217 	ldw	r4,8(r19)
  80513c:	014003c4 	movi	r5,15
  805140:	1107c83a 	sub	r3,r2,r4
  805144:	28ffdd0e 	bge	r5,r3,8050bc <__alt_mem_epcs_flash_controller_0+0xff7fc0bc>
  805148:	014020b4 	movhi	r5,130
  80514c:	2971d704 	addi	r5,r5,-14500
  805150:	29400017 	ldw	r5,0(r5)
  805154:	18c00054 	ori	r3,r3,1
  805158:	20c00115 	stw	r3,4(r4)
  80515c:	00c020b4 	movhi	r3,130
  805160:	1145c83a 	sub	r2,r2,r5
  805164:	18f23404 	addi	r3,r3,-14128
  805168:	18800015 	stw	r2,0(r3)
  80516c:	003fd306 	br	8050bc <__alt_mem_epcs_flash_controller_0+0xff7fc0bc>

00805170 <_free_r>:
  805170:	28004126 	beq	r5,zero,805278 <_free_r+0x108>
  805174:	defffd04 	addi	sp,sp,-12
  805178:	dc400115 	stw	r17,4(sp)
  80517c:	dc000015 	stw	r16,0(sp)
  805180:	2023883a 	mov	r17,r4
  805184:	2821883a 	mov	r16,r5
  805188:	dfc00215 	stw	ra,8(sp)
  80518c:	080e7700 	call	80e770 <__malloc_lock>
  805190:	81ffff17 	ldw	r7,-4(r16)
  805194:	00bfff84 	movi	r2,-2
  805198:	010020b4 	movhi	r4,130
  80519c:	81bffe04 	addi	r6,r16,-8
  8051a0:	3884703a 	and	r2,r7,r2
  8051a4:	212b9604 	addi	r4,r4,-20904
  8051a8:	308b883a 	add	r5,r6,r2
  8051ac:	2a400117 	ldw	r9,4(r5)
  8051b0:	22000217 	ldw	r8,8(r4)
  8051b4:	00ffff04 	movi	r3,-4
  8051b8:	48c6703a 	and	r3,r9,r3
  8051bc:	2a005726 	beq	r5,r8,80531c <_free_r+0x1ac>
  8051c0:	28c00115 	stw	r3,4(r5)
  8051c4:	39c0004c 	andi	r7,r7,1
  8051c8:	3800091e 	bne	r7,zero,8051f0 <_free_r+0x80>
  8051cc:	823ffe17 	ldw	r8,-8(r16)
  8051d0:	22400204 	addi	r9,r4,8
  8051d4:	320dc83a 	sub	r6,r6,r8
  8051d8:	31c00217 	ldw	r7,8(r6)
  8051dc:	1205883a 	add	r2,r2,r8
  8051e0:	3a406526 	beq	r7,r9,805378 <_free_r+0x208>
  8051e4:	32000317 	ldw	r8,12(r6)
  8051e8:	3a000315 	stw	r8,12(r7)
  8051ec:	41c00215 	stw	r7,8(r8)
  8051f0:	28cf883a 	add	r7,r5,r3
  8051f4:	39c00117 	ldw	r7,4(r7)
  8051f8:	39c0004c 	andi	r7,r7,1
  8051fc:	38003a26 	beq	r7,zero,8052e8 <_free_r+0x178>
  805200:	10c00054 	ori	r3,r2,1
  805204:	30c00115 	stw	r3,4(r6)
  805208:	3087883a 	add	r3,r6,r2
  80520c:	18800015 	stw	r2,0(r3)
  805210:	00c07fc4 	movi	r3,511
  805214:	18801936 	bltu	r3,r2,80527c <_free_r+0x10c>
  805218:	1004d0fa 	srli	r2,r2,3
  80521c:	01c00044 	movi	r7,1
  805220:	21400117 	ldw	r5,4(r4)
  805224:	10c00044 	addi	r3,r2,1
  805228:	18c7883a 	add	r3,r3,r3
  80522c:	1005d0ba 	srai	r2,r2,2
  805230:	18c7883a 	add	r3,r3,r3
  805234:	18c7883a 	add	r3,r3,r3
  805238:	1907883a 	add	r3,r3,r4
  80523c:	3884983a 	sll	r2,r7,r2
  805240:	19c00017 	ldw	r7,0(r3)
  805244:	1a3ffe04 	addi	r8,r3,-8
  805248:	1144b03a 	or	r2,r2,r5
  80524c:	32000315 	stw	r8,12(r6)
  805250:	31c00215 	stw	r7,8(r6)
  805254:	20800115 	stw	r2,4(r4)
  805258:	19800015 	stw	r6,0(r3)
  80525c:	39800315 	stw	r6,12(r7)
  805260:	8809883a 	mov	r4,r17
  805264:	dfc00217 	ldw	ra,8(sp)
  805268:	dc400117 	ldw	r17,4(sp)
  80526c:	dc000017 	ldw	r16,0(sp)
  805270:	dec00304 	addi	sp,sp,12
  805274:	080e8901 	jmpi	80e890 <__malloc_unlock>
  805278:	f800283a 	ret
  80527c:	100ad27a 	srli	r5,r2,9
  805280:	00c00104 	movi	r3,4
  805284:	19404a36 	bltu	r3,r5,8053b0 <_free_r+0x240>
  805288:	100ad1ba 	srli	r5,r2,6
  80528c:	28c00e44 	addi	r3,r5,57
  805290:	18c7883a 	add	r3,r3,r3
  805294:	29400e04 	addi	r5,r5,56
  805298:	18c7883a 	add	r3,r3,r3
  80529c:	18c7883a 	add	r3,r3,r3
  8052a0:	1909883a 	add	r4,r3,r4
  8052a4:	20c00017 	ldw	r3,0(r4)
  8052a8:	01c020b4 	movhi	r7,130
  8052ac:	213ffe04 	addi	r4,r4,-8
  8052b0:	39eb9604 	addi	r7,r7,-20904
  8052b4:	20c04426 	beq	r4,r3,8053c8 <_free_r+0x258>
  8052b8:	01ffff04 	movi	r7,-4
  8052bc:	19400117 	ldw	r5,4(r3)
  8052c0:	29ca703a 	and	r5,r5,r7
  8052c4:	1140022e 	bgeu	r2,r5,8052d0 <_free_r+0x160>
  8052c8:	18c00217 	ldw	r3,8(r3)
  8052cc:	20fffb1e 	bne	r4,r3,8052bc <__alt_mem_epcs_flash_controller_0+0xff7fc2bc>
  8052d0:	19000317 	ldw	r4,12(r3)
  8052d4:	31000315 	stw	r4,12(r6)
  8052d8:	30c00215 	stw	r3,8(r6)
  8052dc:	21800215 	stw	r6,8(r4)
  8052e0:	19800315 	stw	r6,12(r3)
  8052e4:	003fde06 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  8052e8:	29c00217 	ldw	r7,8(r5)
  8052ec:	10c5883a 	add	r2,r2,r3
  8052f0:	00c020b4 	movhi	r3,130
  8052f4:	18eb9804 	addi	r3,r3,-20896
  8052f8:	38c03b26 	beq	r7,r3,8053e8 <_free_r+0x278>
  8052fc:	2a000317 	ldw	r8,12(r5)
  805300:	11400054 	ori	r5,r2,1
  805304:	3087883a 	add	r3,r6,r2
  805308:	3a000315 	stw	r8,12(r7)
  80530c:	41c00215 	stw	r7,8(r8)
  805310:	31400115 	stw	r5,4(r6)
  805314:	18800015 	stw	r2,0(r3)
  805318:	003fbd06 	br	805210 <__alt_mem_epcs_flash_controller_0+0xff7fc210>
  80531c:	39c0004c 	andi	r7,r7,1
  805320:	10c5883a 	add	r2,r2,r3
  805324:	3800071e 	bne	r7,zero,805344 <_free_r+0x1d4>
  805328:	81fffe17 	ldw	r7,-8(r16)
  80532c:	31cdc83a 	sub	r6,r6,r7
  805330:	30c00317 	ldw	r3,12(r6)
  805334:	31400217 	ldw	r5,8(r6)
  805338:	11c5883a 	add	r2,r2,r7
  80533c:	28c00315 	stw	r3,12(r5)
  805340:	19400215 	stw	r5,8(r3)
  805344:	10c00054 	ori	r3,r2,1
  805348:	30c00115 	stw	r3,4(r6)
  80534c:	00c020b4 	movhi	r3,130
  805350:	18f1d804 	addi	r3,r3,-14496
  805354:	18c00017 	ldw	r3,0(r3)
  805358:	21800215 	stw	r6,8(r4)
  80535c:	10ffc036 	bltu	r2,r3,805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  805360:	008020b4 	movhi	r2,130
  805364:	10b21204 	addi	r2,r2,-14264
  805368:	11400017 	ldw	r5,0(r2)
  80536c:	8809883a 	mov	r4,r17
  805370:	080504c0 	call	80504c <_malloc_trim_r>
  805374:	003fba06 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  805378:	28c9883a 	add	r4,r5,r3
  80537c:	21000117 	ldw	r4,4(r4)
  805380:	2100004c 	andi	r4,r4,1
  805384:	2000391e 	bne	r4,zero,80546c <_free_r+0x2fc>
  805388:	29c00217 	ldw	r7,8(r5)
  80538c:	29000317 	ldw	r4,12(r5)
  805390:	1885883a 	add	r2,r3,r2
  805394:	10c00054 	ori	r3,r2,1
  805398:	39000315 	stw	r4,12(r7)
  80539c:	21c00215 	stw	r7,8(r4)
  8053a0:	30c00115 	stw	r3,4(r6)
  8053a4:	308d883a 	add	r6,r6,r2
  8053a8:	30800015 	stw	r2,0(r6)
  8053ac:	003fac06 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  8053b0:	00c00504 	movi	r3,20
  8053b4:	19401536 	bltu	r3,r5,80540c <_free_r+0x29c>
  8053b8:	28c01704 	addi	r3,r5,92
  8053bc:	18c7883a 	add	r3,r3,r3
  8053c0:	294016c4 	addi	r5,r5,91
  8053c4:	003fb406 	br	805298 <__alt_mem_epcs_flash_controller_0+0xff7fc298>
  8053c8:	280bd0ba 	srai	r5,r5,2
  8053cc:	00c00044 	movi	r3,1
  8053d0:	38800117 	ldw	r2,4(r7)
  8053d4:	194a983a 	sll	r5,r3,r5
  8053d8:	2007883a 	mov	r3,r4
  8053dc:	2884b03a 	or	r2,r5,r2
  8053e0:	38800115 	stw	r2,4(r7)
  8053e4:	003fbb06 	br	8052d4 <__alt_mem_epcs_flash_controller_0+0xff7fc2d4>
  8053e8:	21800515 	stw	r6,20(r4)
  8053ec:	21800415 	stw	r6,16(r4)
  8053f0:	10c00054 	ori	r3,r2,1
  8053f4:	31c00315 	stw	r7,12(r6)
  8053f8:	31c00215 	stw	r7,8(r6)
  8053fc:	30c00115 	stw	r3,4(r6)
  805400:	308d883a 	add	r6,r6,r2
  805404:	30800015 	stw	r2,0(r6)
  805408:	003f9506 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>
  80540c:	00c01504 	movi	r3,84
  805410:	19400536 	bltu	r3,r5,805428 <_free_r+0x2b8>
  805414:	100ad33a 	srli	r5,r2,12
  805418:	28c01bc4 	addi	r3,r5,111
  80541c:	18c7883a 	add	r3,r3,r3
  805420:	29401b84 	addi	r5,r5,110
  805424:	003f9c06 	br	805298 <__alt_mem_epcs_flash_controller_0+0xff7fc298>
  805428:	00c05504 	movi	r3,340
  80542c:	19400536 	bltu	r3,r5,805444 <_free_r+0x2d4>
  805430:	100ad3fa 	srli	r5,r2,15
  805434:	28c01e04 	addi	r3,r5,120
  805438:	18c7883a 	add	r3,r3,r3
  80543c:	29401dc4 	addi	r5,r5,119
  805440:	003f9506 	br	805298 <__alt_mem_epcs_flash_controller_0+0xff7fc298>
  805444:	00c15504 	movi	r3,1364
  805448:	19400536 	bltu	r3,r5,805460 <_free_r+0x2f0>
  80544c:	100ad4ba 	srli	r5,r2,18
  805450:	28c01f44 	addi	r3,r5,125
  805454:	18c7883a 	add	r3,r3,r3
  805458:	29401f04 	addi	r5,r5,124
  80545c:	003f8e06 	br	805298 <__alt_mem_epcs_flash_controller_0+0xff7fc298>
  805460:	00c03f84 	movi	r3,254
  805464:	01401f84 	movi	r5,126
  805468:	003f8b06 	br	805298 <__alt_mem_epcs_flash_controller_0+0xff7fc298>
  80546c:	10c00054 	ori	r3,r2,1
  805470:	30c00115 	stw	r3,4(r6)
  805474:	308d883a 	add	r6,r6,r2
  805478:	30800015 	stw	r2,0(r6)
  80547c:	003f7806 	br	805260 <__alt_mem_epcs_flash_controller_0+0xff7fc260>

00805480 <__sfvwrite_r>:
  805480:	30800217 	ldw	r2,8(r6)
  805484:	10006726 	beq	r2,zero,805624 <__sfvwrite_r+0x1a4>
  805488:	28c0030b 	ldhu	r3,12(r5)
  80548c:	defff404 	addi	sp,sp,-48
  805490:	dd400715 	stw	r21,28(sp)
  805494:	dd000615 	stw	r20,24(sp)
  805498:	dc000215 	stw	r16,8(sp)
  80549c:	dfc00b15 	stw	ra,44(sp)
  8054a0:	df000a15 	stw	fp,40(sp)
  8054a4:	ddc00915 	stw	r23,36(sp)
  8054a8:	dd800815 	stw	r22,32(sp)
  8054ac:	dcc00515 	stw	r19,20(sp)
  8054b0:	dc800415 	stw	r18,16(sp)
  8054b4:	dc400315 	stw	r17,12(sp)
  8054b8:	1880020c 	andi	r2,r3,8
  8054bc:	2821883a 	mov	r16,r5
  8054c0:	202b883a 	mov	r21,r4
  8054c4:	3029883a 	mov	r20,r6
  8054c8:	10002726 	beq	r2,zero,805568 <__sfvwrite_r+0xe8>
  8054cc:	28800417 	ldw	r2,16(r5)
  8054d0:	10002526 	beq	r2,zero,805568 <__sfvwrite_r+0xe8>
  8054d4:	1880008c 	andi	r2,r3,2
  8054d8:	a4400017 	ldw	r17,0(r20)
  8054dc:	10002a26 	beq	r2,zero,805588 <__sfvwrite_r+0x108>
  8054e0:	05a00034 	movhi	r22,32768
  8054e4:	0027883a 	mov	r19,zero
  8054e8:	0025883a 	mov	r18,zero
  8054ec:	b5bf0004 	addi	r22,r22,-1024
  8054f0:	980d883a 	mov	r6,r19
  8054f4:	a809883a 	mov	r4,r21
  8054f8:	90004626 	beq	r18,zero,805614 <__sfvwrite_r+0x194>
  8054fc:	900f883a 	mov	r7,r18
  805500:	b480022e 	bgeu	r22,r18,80550c <__sfvwrite_r+0x8c>
  805504:	01e00034 	movhi	r7,32768
  805508:	39ff0004 	addi	r7,r7,-1024
  80550c:	80800917 	ldw	r2,36(r16)
  805510:	81400717 	ldw	r5,28(r16)
  805514:	103ee83a 	callr	r2
  805518:	00805a0e 	bge	zero,r2,805684 <__sfvwrite_r+0x204>
  80551c:	a0c00217 	ldw	r3,8(r20)
  805520:	98a7883a 	add	r19,r19,r2
  805524:	90a5c83a 	sub	r18,r18,r2
  805528:	1885c83a 	sub	r2,r3,r2
  80552c:	a0800215 	stw	r2,8(r20)
  805530:	103fef1e 	bne	r2,zero,8054f0 <__alt_mem_epcs_flash_controller_0+0xff7fc4f0>
  805534:	0005883a 	mov	r2,zero
  805538:	dfc00b17 	ldw	ra,44(sp)
  80553c:	df000a17 	ldw	fp,40(sp)
  805540:	ddc00917 	ldw	r23,36(sp)
  805544:	dd800817 	ldw	r22,32(sp)
  805548:	dd400717 	ldw	r21,28(sp)
  80554c:	dd000617 	ldw	r20,24(sp)
  805550:	dcc00517 	ldw	r19,20(sp)
  805554:	dc800417 	ldw	r18,16(sp)
  805558:	dc400317 	ldw	r17,12(sp)
  80555c:	dc000217 	ldw	r16,8(sp)
  805560:	dec00c04 	addi	sp,sp,48
  805564:	f800283a 	ret
  805568:	800b883a 	mov	r5,r16
  80556c:	a809883a 	mov	r4,r21
  805570:	0802ff00 	call	802ff0 <__swsetup_r>
  805574:	1000ee1e 	bne	r2,zero,805930 <__sfvwrite_r+0x4b0>
  805578:	80c0030b 	ldhu	r3,12(r16)
  80557c:	a4400017 	ldw	r17,0(r20)
  805580:	1880008c 	andi	r2,r3,2
  805584:	103fd61e 	bne	r2,zero,8054e0 <__alt_mem_epcs_flash_controller_0+0xff7fc4e0>
  805588:	1880004c 	andi	r2,r3,1
  80558c:	1000421e 	bne	r2,zero,805698 <__sfvwrite_r+0x218>
  805590:	0039883a 	mov	fp,zero
  805594:	0025883a 	mov	r18,zero
  805598:	90001a26 	beq	r18,zero,805604 <__sfvwrite_r+0x184>
  80559c:	1880800c 	andi	r2,r3,512
  8055a0:	84c00217 	ldw	r19,8(r16)
  8055a4:	10002126 	beq	r2,zero,80562c <__sfvwrite_r+0x1ac>
  8055a8:	982f883a 	mov	r23,r19
  8055ac:	94c09636 	bltu	r18,r19,805808 <__sfvwrite_r+0x388>
  8055b0:	1881200c 	andi	r2,r3,1152
  8055b4:	1000a11e 	bne	r2,zero,80583c <__sfvwrite_r+0x3bc>
  8055b8:	81000017 	ldw	r4,0(r16)
  8055bc:	b80d883a 	mov	r6,r23
  8055c0:	e00b883a 	mov	r5,fp
  8055c4:	08067a00 	call	8067a0 <memmove>
  8055c8:	80c00217 	ldw	r3,8(r16)
  8055cc:	81000017 	ldw	r4,0(r16)
  8055d0:	9005883a 	mov	r2,r18
  8055d4:	1ce7c83a 	sub	r19,r3,r19
  8055d8:	25cf883a 	add	r7,r4,r23
  8055dc:	84c00215 	stw	r19,8(r16)
  8055e0:	81c00015 	stw	r7,0(r16)
  8055e4:	a0c00217 	ldw	r3,8(r20)
  8055e8:	e0b9883a 	add	fp,fp,r2
  8055ec:	90a5c83a 	sub	r18,r18,r2
  8055f0:	18a7c83a 	sub	r19,r3,r2
  8055f4:	a4c00215 	stw	r19,8(r20)
  8055f8:	983fce26 	beq	r19,zero,805534 <__alt_mem_epcs_flash_controller_0+0xff7fc534>
  8055fc:	80c0030b 	ldhu	r3,12(r16)
  805600:	903fe61e 	bne	r18,zero,80559c <__alt_mem_epcs_flash_controller_0+0xff7fc59c>
  805604:	8f000017 	ldw	fp,0(r17)
  805608:	8c800117 	ldw	r18,4(r17)
  80560c:	8c400204 	addi	r17,r17,8
  805610:	003fe106 	br	805598 <__alt_mem_epcs_flash_controller_0+0xff7fc598>
  805614:	8cc00017 	ldw	r19,0(r17)
  805618:	8c800117 	ldw	r18,4(r17)
  80561c:	8c400204 	addi	r17,r17,8
  805620:	003fb306 	br	8054f0 <__alt_mem_epcs_flash_controller_0+0xff7fc4f0>
  805624:	0005883a 	mov	r2,zero
  805628:	f800283a 	ret
  80562c:	81000017 	ldw	r4,0(r16)
  805630:	80800417 	ldw	r2,16(r16)
  805634:	11005a36 	bltu	r2,r4,8057a0 <__sfvwrite_r+0x320>
  805638:	85c00517 	ldw	r23,20(r16)
  80563c:	95c05836 	bltu	r18,r23,8057a0 <__sfvwrite_r+0x320>
  805640:	00a00034 	movhi	r2,32768
  805644:	10bfffc4 	addi	r2,r2,-1
  805648:	9009883a 	mov	r4,r18
  80564c:	1480012e 	bgeu	r2,r18,805654 <__sfvwrite_r+0x1d4>
  805650:	1009883a 	mov	r4,r2
  805654:	b80b883a 	mov	r5,r23
  805658:	080b08c0 	call	80b08c <__divsi3>
  80565c:	b80b883a 	mov	r5,r23
  805660:	1009883a 	mov	r4,r2
  805664:	080b2400 	call	80b240 <__mulsi3>
  805668:	81400717 	ldw	r5,28(r16)
  80566c:	80c00917 	ldw	r3,36(r16)
  805670:	100f883a 	mov	r7,r2
  805674:	e00d883a 	mov	r6,fp
  805678:	a809883a 	mov	r4,r21
  80567c:	183ee83a 	callr	r3
  805680:	00bfd816 	blt	zero,r2,8055e4 <__alt_mem_epcs_flash_controller_0+0xff7fc5e4>
  805684:	8080030b 	ldhu	r2,12(r16)
  805688:	10801014 	ori	r2,r2,64
  80568c:	8080030d 	sth	r2,12(r16)
  805690:	00bfffc4 	movi	r2,-1
  805694:	003fa806 	br	805538 <__alt_mem_epcs_flash_controller_0+0xff7fc538>
  805698:	0027883a 	mov	r19,zero
  80569c:	0011883a 	mov	r8,zero
  8056a0:	0039883a 	mov	fp,zero
  8056a4:	0025883a 	mov	r18,zero
  8056a8:	90001f26 	beq	r18,zero,805728 <__sfvwrite_r+0x2a8>
  8056ac:	40005a26 	beq	r8,zero,805818 <__sfvwrite_r+0x398>
  8056b0:	982d883a 	mov	r22,r19
  8056b4:	94c0012e 	bgeu	r18,r19,8056bc <__sfvwrite_r+0x23c>
  8056b8:	902d883a 	mov	r22,r18
  8056bc:	81000017 	ldw	r4,0(r16)
  8056c0:	80800417 	ldw	r2,16(r16)
  8056c4:	b02f883a 	mov	r23,r22
  8056c8:	81c00517 	ldw	r7,20(r16)
  8056cc:	1100032e 	bgeu	r2,r4,8056dc <__sfvwrite_r+0x25c>
  8056d0:	80c00217 	ldw	r3,8(r16)
  8056d4:	38c7883a 	add	r3,r7,r3
  8056d8:	1d801816 	blt	r3,r22,80573c <__sfvwrite_r+0x2bc>
  8056dc:	b1c03e16 	blt	r22,r7,8057d8 <__sfvwrite_r+0x358>
  8056e0:	80800917 	ldw	r2,36(r16)
  8056e4:	81400717 	ldw	r5,28(r16)
  8056e8:	e00d883a 	mov	r6,fp
  8056ec:	da000115 	stw	r8,4(sp)
  8056f0:	a809883a 	mov	r4,r21
  8056f4:	103ee83a 	callr	r2
  8056f8:	102f883a 	mov	r23,r2
  8056fc:	da000117 	ldw	r8,4(sp)
  805700:	00bfe00e 	bge	zero,r2,805684 <__alt_mem_epcs_flash_controller_0+0xff7fc684>
  805704:	9de7c83a 	sub	r19,r19,r23
  805708:	98001f26 	beq	r19,zero,805788 <__sfvwrite_r+0x308>
  80570c:	a0800217 	ldw	r2,8(r20)
  805710:	e5f9883a 	add	fp,fp,r23
  805714:	95e5c83a 	sub	r18,r18,r23
  805718:	15efc83a 	sub	r23,r2,r23
  80571c:	a5c00215 	stw	r23,8(r20)
  805720:	b83f8426 	beq	r23,zero,805534 <__alt_mem_epcs_flash_controller_0+0xff7fc534>
  805724:	903fe11e 	bne	r18,zero,8056ac <__alt_mem_epcs_flash_controller_0+0xff7fc6ac>
  805728:	8f000017 	ldw	fp,0(r17)
  80572c:	8c800117 	ldw	r18,4(r17)
  805730:	0011883a 	mov	r8,zero
  805734:	8c400204 	addi	r17,r17,8
  805738:	003fdb06 	br	8056a8 <__alt_mem_epcs_flash_controller_0+0xff7fc6a8>
  80573c:	180d883a 	mov	r6,r3
  805740:	e00b883a 	mov	r5,fp
  805744:	da000115 	stw	r8,4(sp)
  805748:	d8c00015 	stw	r3,0(sp)
  80574c:	08067a00 	call	8067a0 <memmove>
  805750:	d8c00017 	ldw	r3,0(sp)
  805754:	80800017 	ldw	r2,0(r16)
  805758:	800b883a 	mov	r5,r16
  80575c:	a809883a 	mov	r4,r21
  805760:	10c5883a 	add	r2,r2,r3
  805764:	80800015 	stw	r2,0(r16)
  805768:	d8c00015 	stw	r3,0(sp)
  80576c:	0804c100 	call	804c10 <_fflush_r>
  805770:	d8c00017 	ldw	r3,0(sp)
  805774:	da000117 	ldw	r8,4(sp)
  805778:	103fc21e 	bne	r2,zero,805684 <__alt_mem_epcs_flash_controller_0+0xff7fc684>
  80577c:	182f883a 	mov	r23,r3
  805780:	9de7c83a 	sub	r19,r19,r23
  805784:	983fe11e 	bne	r19,zero,80570c <__alt_mem_epcs_flash_controller_0+0xff7fc70c>
  805788:	800b883a 	mov	r5,r16
  80578c:	a809883a 	mov	r4,r21
  805790:	0804c100 	call	804c10 <_fflush_r>
  805794:	103fbb1e 	bne	r2,zero,805684 <__alt_mem_epcs_flash_controller_0+0xff7fc684>
  805798:	0011883a 	mov	r8,zero
  80579c:	003fdb06 	br	80570c <__alt_mem_epcs_flash_controller_0+0xff7fc70c>
  8057a0:	94c0012e 	bgeu	r18,r19,8057a8 <__sfvwrite_r+0x328>
  8057a4:	9027883a 	mov	r19,r18
  8057a8:	980d883a 	mov	r6,r19
  8057ac:	e00b883a 	mov	r5,fp
  8057b0:	08067a00 	call	8067a0 <memmove>
  8057b4:	80800217 	ldw	r2,8(r16)
  8057b8:	80c00017 	ldw	r3,0(r16)
  8057bc:	14c5c83a 	sub	r2,r2,r19
  8057c0:	1cc7883a 	add	r3,r3,r19
  8057c4:	80800215 	stw	r2,8(r16)
  8057c8:	80c00015 	stw	r3,0(r16)
  8057cc:	10004326 	beq	r2,zero,8058dc <__sfvwrite_r+0x45c>
  8057d0:	9805883a 	mov	r2,r19
  8057d4:	003f8306 	br	8055e4 <__alt_mem_epcs_flash_controller_0+0xff7fc5e4>
  8057d8:	b00d883a 	mov	r6,r22
  8057dc:	e00b883a 	mov	r5,fp
  8057e0:	da000115 	stw	r8,4(sp)
  8057e4:	08067a00 	call	8067a0 <memmove>
  8057e8:	80800217 	ldw	r2,8(r16)
  8057ec:	80c00017 	ldw	r3,0(r16)
  8057f0:	da000117 	ldw	r8,4(sp)
  8057f4:	1585c83a 	sub	r2,r2,r22
  8057f8:	1dad883a 	add	r22,r3,r22
  8057fc:	80800215 	stw	r2,8(r16)
  805800:	85800015 	stw	r22,0(r16)
  805804:	003fbf06 	br	805704 <__alt_mem_epcs_flash_controller_0+0xff7fc704>
  805808:	81000017 	ldw	r4,0(r16)
  80580c:	9027883a 	mov	r19,r18
  805810:	902f883a 	mov	r23,r18
  805814:	003f6906 	br	8055bc <__alt_mem_epcs_flash_controller_0+0xff7fc5bc>
  805818:	900d883a 	mov	r6,r18
  80581c:	01400284 	movi	r5,10
  805820:	e009883a 	mov	r4,fp
  805824:	08065740 	call	806574 <memchr>
  805828:	10003e26 	beq	r2,zero,805924 <__sfvwrite_r+0x4a4>
  80582c:	10800044 	addi	r2,r2,1
  805830:	1727c83a 	sub	r19,r2,fp
  805834:	02000044 	movi	r8,1
  805838:	003f9d06 	br	8056b0 <__alt_mem_epcs_flash_controller_0+0xff7fc6b0>
  80583c:	80800517 	ldw	r2,20(r16)
  805840:	81400417 	ldw	r5,16(r16)
  805844:	81c00017 	ldw	r7,0(r16)
  805848:	10a7883a 	add	r19,r2,r2
  80584c:	9885883a 	add	r2,r19,r2
  805850:	1026d7fa 	srli	r19,r2,31
  805854:	396dc83a 	sub	r22,r7,r5
  805858:	b1000044 	addi	r4,r22,1
  80585c:	9885883a 	add	r2,r19,r2
  805860:	1027d07a 	srai	r19,r2,1
  805864:	2485883a 	add	r2,r4,r18
  805868:	980d883a 	mov	r6,r19
  80586c:	9880022e 	bgeu	r19,r2,805878 <__sfvwrite_r+0x3f8>
  805870:	1027883a 	mov	r19,r2
  805874:	100d883a 	mov	r6,r2
  805878:	18c1000c 	andi	r3,r3,1024
  80587c:	18001c26 	beq	r3,zero,8058f0 <__sfvwrite_r+0x470>
  805880:	300b883a 	mov	r5,r6
  805884:	a809883a 	mov	r4,r21
  805888:	0805d680 	call	805d68 <_malloc_r>
  80588c:	102f883a 	mov	r23,r2
  805890:	10002926 	beq	r2,zero,805938 <__sfvwrite_r+0x4b8>
  805894:	81400417 	ldw	r5,16(r16)
  805898:	b00d883a 	mov	r6,r22
  80589c:	1009883a 	mov	r4,r2
  8058a0:	08066580 	call	806658 <memcpy>
  8058a4:	8080030b 	ldhu	r2,12(r16)
  8058a8:	00fedfc4 	movi	r3,-1153
  8058ac:	10c4703a 	and	r2,r2,r3
  8058b0:	10802014 	ori	r2,r2,128
  8058b4:	8080030d 	sth	r2,12(r16)
  8058b8:	bd89883a 	add	r4,r23,r22
  8058bc:	9d8fc83a 	sub	r7,r19,r22
  8058c0:	85c00415 	stw	r23,16(r16)
  8058c4:	84c00515 	stw	r19,20(r16)
  8058c8:	81000015 	stw	r4,0(r16)
  8058cc:	9027883a 	mov	r19,r18
  8058d0:	81c00215 	stw	r7,8(r16)
  8058d4:	902f883a 	mov	r23,r18
  8058d8:	003f3806 	br	8055bc <__alt_mem_epcs_flash_controller_0+0xff7fc5bc>
  8058dc:	800b883a 	mov	r5,r16
  8058e0:	a809883a 	mov	r4,r21
  8058e4:	0804c100 	call	804c10 <_fflush_r>
  8058e8:	103fb926 	beq	r2,zero,8057d0 <__alt_mem_epcs_flash_controller_0+0xff7fc7d0>
  8058ec:	003f6506 	br	805684 <__alt_mem_epcs_flash_controller_0+0xff7fc684>
  8058f0:	a809883a 	mov	r4,r21
  8058f4:	0807c440 	call	807c44 <_realloc_r>
  8058f8:	102f883a 	mov	r23,r2
  8058fc:	103fee1e 	bne	r2,zero,8058b8 <__alt_mem_epcs_flash_controller_0+0xff7fc8b8>
  805900:	81400417 	ldw	r5,16(r16)
  805904:	a809883a 	mov	r4,r21
  805908:	08051700 	call	805170 <_free_r>
  80590c:	8080030b 	ldhu	r2,12(r16)
  805910:	00ffdfc4 	movi	r3,-129
  805914:	1884703a 	and	r2,r3,r2
  805918:	00c00304 	movi	r3,12
  80591c:	a8c00015 	stw	r3,0(r21)
  805920:	003f5906 	br	805688 <__alt_mem_epcs_flash_controller_0+0xff7fc688>
  805924:	94c00044 	addi	r19,r18,1
  805928:	02000044 	movi	r8,1
  80592c:	003f6006 	br	8056b0 <__alt_mem_epcs_flash_controller_0+0xff7fc6b0>
  805930:	00bfffc4 	movi	r2,-1
  805934:	003f0006 	br	805538 <__alt_mem_epcs_flash_controller_0+0xff7fc538>
  805938:	00800304 	movi	r2,12
  80593c:	a8800015 	stw	r2,0(r21)
  805940:	8080030b 	ldhu	r2,12(r16)
  805944:	003f5006 	br	805688 <__alt_mem_epcs_flash_controller_0+0xff7fc688>

00805948 <_fwalk>:
  805948:	defff704 	addi	sp,sp,-36
  80594c:	dd000415 	stw	r20,16(sp)
  805950:	dfc00815 	stw	ra,32(sp)
  805954:	ddc00715 	stw	r23,28(sp)
  805958:	dd800615 	stw	r22,24(sp)
  80595c:	dd400515 	stw	r21,20(sp)
  805960:	dcc00315 	stw	r19,12(sp)
  805964:	dc800215 	stw	r18,8(sp)
  805968:	dc400115 	stw	r17,4(sp)
  80596c:	dc000015 	stw	r16,0(sp)
  805970:	2500b804 	addi	r20,r4,736
  805974:	a0002326 	beq	r20,zero,805a04 <_fwalk+0xbc>
  805978:	282b883a 	mov	r21,r5
  80597c:	002f883a 	mov	r23,zero
  805980:	05800044 	movi	r22,1
  805984:	04ffffc4 	movi	r19,-1
  805988:	a4400117 	ldw	r17,4(r20)
  80598c:	a4800217 	ldw	r18,8(r20)
  805990:	8c7fffc4 	addi	r17,r17,-1
  805994:	88000d16 	blt	r17,zero,8059cc <_fwalk+0x84>
  805998:	94000304 	addi	r16,r18,12
  80599c:	94800384 	addi	r18,r18,14
  8059a0:	8080000b 	ldhu	r2,0(r16)
  8059a4:	8c7fffc4 	addi	r17,r17,-1
  8059a8:	813ffd04 	addi	r4,r16,-12
  8059ac:	b080042e 	bgeu	r22,r2,8059c0 <_fwalk+0x78>
  8059b0:	9080000f 	ldh	r2,0(r18)
  8059b4:	14c00226 	beq	r2,r19,8059c0 <_fwalk+0x78>
  8059b8:	a83ee83a 	callr	r21
  8059bc:	b8aeb03a 	or	r23,r23,r2
  8059c0:	84001a04 	addi	r16,r16,104
  8059c4:	94801a04 	addi	r18,r18,104
  8059c8:	8cfff51e 	bne	r17,r19,8059a0 <__alt_mem_epcs_flash_controller_0+0xff7fc9a0>
  8059cc:	a5000017 	ldw	r20,0(r20)
  8059d0:	a03fed1e 	bne	r20,zero,805988 <__alt_mem_epcs_flash_controller_0+0xff7fc988>
  8059d4:	b805883a 	mov	r2,r23
  8059d8:	dfc00817 	ldw	ra,32(sp)
  8059dc:	ddc00717 	ldw	r23,28(sp)
  8059e0:	dd800617 	ldw	r22,24(sp)
  8059e4:	dd400517 	ldw	r21,20(sp)
  8059e8:	dd000417 	ldw	r20,16(sp)
  8059ec:	dcc00317 	ldw	r19,12(sp)
  8059f0:	dc800217 	ldw	r18,8(sp)
  8059f4:	dc400117 	ldw	r17,4(sp)
  8059f8:	dc000017 	ldw	r16,0(sp)
  8059fc:	dec00904 	addi	sp,sp,36
  805a00:	f800283a 	ret
  805a04:	002f883a 	mov	r23,zero
  805a08:	003ff206 	br	8059d4 <__alt_mem_epcs_flash_controller_0+0xff7fc9d4>

00805a0c <_fwalk_reent>:
  805a0c:	defff704 	addi	sp,sp,-36
  805a10:	dd000415 	stw	r20,16(sp)
  805a14:	dfc00815 	stw	ra,32(sp)
  805a18:	ddc00715 	stw	r23,28(sp)
  805a1c:	dd800615 	stw	r22,24(sp)
  805a20:	dd400515 	stw	r21,20(sp)
  805a24:	dcc00315 	stw	r19,12(sp)
  805a28:	dc800215 	stw	r18,8(sp)
  805a2c:	dc400115 	stw	r17,4(sp)
  805a30:	dc000015 	stw	r16,0(sp)
  805a34:	2500b804 	addi	r20,r4,736
  805a38:	a0002326 	beq	r20,zero,805ac8 <_fwalk_reent+0xbc>
  805a3c:	282b883a 	mov	r21,r5
  805a40:	2027883a 	mov	r19,r4
  805a44:	002f883a 	mov	r23,zero
  805a48:	05800044 	movi	r22,1
  805a4c:	04bfffc4 	movi	r18,-1
  805a50:	a4400117 	ldw	r17,4(r20)
  805a54:	a4000217 	ldw	r16,8(r20)
  805a58:	8c7fffc4 	addi	r17,r17,-1
  805a5c:	88000c16 	blt	r17,zero,805a90 <_fwalk_reent+0x84>
  805a60:	84000304 	addi	r16,r16,12
  805a64:	8080000b 	ldhu	r2,0(r16)
  805a68:	8c7fffc4 	addi	r17,r17,-1
  805a6c:	817ffd04 	addi	r5,r16,-12
  805a70:	b080052e 	bgeu	r22,r2,805a88 <_fwalk_reent+0x7c>
  805a74:	8080008f 	ldh	r2,2(r16)
  805a78:	9809883a 	mov	r4,r19
  805a7c:	14800226 	beq	r2,r18,805a88 <_fwalk_reent+0x7c>
  805a80:	a83ee83a 	callr	r21
  805a84:	b8aeb03a 	or	r23,r23,r2
  805a88:	84001a04 	addi	r16,r16,104
  805a8c:	8cbff51e 	bne	r17,r18,805a64 <__alt_mem_epcs_flash_controller_0+0xff7fca64>
  805a90:	a5000017 	ldw	r20,0(r20)
  805a94:	a03fee1e 	bne	r20,zero,805a50 <__alt_mem_epcs_flash_controller_0+0xff7fca50>
  805a98:	b805883a 	mov	r2,r23
  805a9c:	dfc00817 	ldw	ra,32(sp)
  805aa0:	ddc00717 	ldw	r23,28(sp)
  805aa4:	dd800617 	ldw	r22,24(sp)
  805aa8:	dd400517 	ldw	r21,20(sp)
  805aac:	dd000417 	ldw	r20,16(sp)
  805ab0:	dcc00317 	ldw	r19,12(sp)
  805ab4:	dc800217 	ldw	r18,8(sp)
  805ab8:	dc400117 	ldw	r17,4(sp)
  805abc:	dc000017 	ldw	r16,0(sp)
  805ac0:	dec00904 	addi	sp,sp,36
  805ac4:	f800283a 	ret
  805ac8:	002f883a 	mov	r23,zero
  805acc:	003ff206 	br	805a98 <__alt_mem_epcs_flash_controller_0+0xff7fca98>

00805ad0 <_setlocale_r>:
  805ad0:	30001b26 	beq	r6,zero,805b40 <_setlocale_r+0x70>
  805ad4:	014020b4 	movhi	r5,130
  805ad8:	defffe04 	addi	sp,sp,-8
  805adc:	29697504 	addi	r5,r5,-23084
  805ae0:	3009883a 	mov	r4,r6
  805ae4:	dc000015 	stw	r16,0(sp)
  805ae8:	dfc00115 	stw	ra,4(sp)
  805aec:	3021883a 	mov	r16,r6
  805af0:	08083ac0 	call	8083ac <strcmp>
  805af4:	1000061e 	bne	r2,zero,805b10 <_setlocale_r+0x40>
  805af8:	008020b4 	movhi	r2,130
  805afc:	10a97404 	addi	r2,r2,-23088
  805b00:	dfc00117 	ldw	ra,4(sp)
  805b04:	dc000017 	ldw	r16,0(sp)
  805b08:	dec00204 	addi	sp,sp,8
  805b0c:	f800283a 	ret
  805b10:	014020b4 	movhi	r5,130
  805b14:	29697404 	addi	r5,r5,-23088
  805b18:	8009883a 	mov	r4,r16
  805b1c:	08083ac0 	call	8083ac <strcmp>
  805b20:	103ff526 	beq	r2,zero,805af8 <__alt_mem_epcs_flash_controller_0+0xff7fcaf8>
  805b24:	014020b4 	movhi	r5,130
  805b28:	29695f04 	addi	r5,r5,-23172
  805b2c:	8009883a 	mov	r4,r16
  805b30:	08083ac0 	call	8083ac <strcmp>
  805b34:	103ff026 	beq	r2,zero,805af8 <__alt_mem_epcs_flash_controller_0+0xff7fcaf8>
  805b38:	0005883a 	mov	r2,zero
  805b3c:	003ff006 	br	805b00 <__alt_mem_epcs_flash_controller_0+0xff7fcb00>
  805b40:	008020b4 	movhi	r2,130
  805b44:	10a97404 	addi	r2,r2,-23088
  805b48:	f800283a 	ret

00805b4c <__locale_charset>:
  805b4c:	008020b4 	movhi	r2,130
  805b50:	10ab8004 	addi	r2,r2,-20992
  805b54:	f800283a 	ret

00805b58 <__locale_mb_cur_max>:
  805b58:	008020b4 	movhi	r2,130
  805b5c:	10b1d604 	addi	r2,r2,-14504
  805b60:	10800017 	ldw	r2,0(r2)
  805b64:	f800283a 	ret

00805b68 <__locale_msgcharset>:
  805b68:	008020b4 	movhi	r2,130
  805b6c:	10ab7804 	addi	r2,r2,-21024
  805b70:	f800283a 	ret

00805b74 <__locale_cjk_lang>:
  805b74:	0005883a 	mov	r2,zero
  805b78:	f800283a 	ret

00805b7c <_localeconv_r>:
  805b7c:	008020b4 	movhi	r2,130
  805b80:	10ab8804 	addi	r2,r2,-20960
  805b84:	f800283a 	ret

00805b88 <setlocale>:
  805b88:	008020b4 	movhi	r2,130
  805b8c:	10b1d504 	addi	r2,r2,-14508
  805b90:	280d883a 	mov	r6,r5
  805b94:	200b883a 	mov	r5,r4
  805b98:	11000017 	ldw	r4,0(r2)
  805b9c:	0805ad01 	jmpi	805ad0 <_setlocale_r>

00805ba0 <localeconv>:
  805ba0:	008020b4 	movhi	r2,130
  805ba4:	10ab8804 	addi	r2,r2,-20960
  805ba8:	f800283a 	ret

00805bac <__smakebuf_r>:
  805bac:	2880030b 	ldhu	r2,12(r5)
  805bb0:	10c0008c 	andi	r3,r2,2
  805bb4:	1800411e 	bne	r3,zero,805cbc <__smakebuf_r+0x110>
  805bb8:	deffec04 	addi	sp,sp,-80
  805bbc:	dc000f15 	stw	r16,60(sp)
  805bc0:	2821883a 	mov	r16,r5
  805bc4:	2940038f 	ldh	r5,14(r5)
  805bc8:	dc401015 	stw	r17,64(sp)
  805bcc:	dfc01315 	stw	ra,76(sp)
  805bd0:	dcc01215 	stw	r19,72(sp)
  805bd4:	dc801115 	stw	r18,68(sp)
  805bd8:	2023883a 	mov	r17,r4
  805bdc:	28001c16 	blt	r5,zero,805c50 <__smakebuf_r+0xa4>
  805be0:	d80d883a 	mov	r6,sp
  805be4:	080a1740 	call	80a174 <_fstat_r>
  805be8:	10001816 	blt	r2,zero,805c4c <__smakebuf_r+0xa0>
  805bec:	d8800117 	ldw	r2,4(sp)
  805bf0:	00e00014 	movui	r3,32768
  805bf4:	10bc000c 	andi	r2,r2,61440
  805bf8:	14c80020 	cmpeqi	r19,r2,8192
  805bfc:	10c03726 	beq	r2,r3,805cdc <__smakebuf_r+0x130>
  805c00:	80c0030b 	ldhu	r3,12(r16)
  805c04:	18c20014 	ori	r3,r3,2048
  805c08:	80c0030d 	sth	r3,12(r16)
  805c0c:	00c80004 	movi	r3,8192
  805c10:	10c0521e 	bne	r2,r3,805d5c <__smakebuf_r+0x1b0>
  805c14:	8140038f 	ldh	r5,14(r16)
  805c18:	8809883a 	mov	r4,r17
  805c1c:	080a1d00 	call	80a1d0 <_isatty_r>
  805c20:	10004c26 	beq	r2,zero,805d54 <__smakebuf_r+0x1a8>
  805c24:	8080030b 	ldhu	r2,12(r16)
  805c28:	80c010c4 	addi	r3,r16,67
  805c2c:	80c00015 	stw	r3,0(r16)
  805c30:	10800054 	ori	r2,r2,1
  805c34:	8080030d 	sth	r2,12(r16)
  805c38:	00800044 	movi	r2,1
  805c3c:	80c00415 	stw	r3,16(r16)
  805c40:	80800515 	stw	r2,20(r16)
  805c44:	04810004 	movi	r18,1024
  805c48:	00000706 	br	805c68 <__smakebuf_r+0xbc>
  805c4c:	8080030b 	ldhu	r2,12(r16)
  805c50:	10c0200c 	andi	r3,r2,128
  805c54:	18001f1e 	bne	r3,zero,805cd4 <__smakebuf_r+0x128>
  805c58:	04810004 	movi	r18,1024
  805c5c:	10820014 	ori	r2,r2,2048
  805c60:	8080030d 	sth	r2,12(r16)
  805c64:	0027883a 	mov	r19,zero
  805c68:	900b883a 	mov	r5,r18
  805c6c:	8809883a 	mov	r4,r17
  805c70:	0805d680 	call	805d68 <_malloc_r>
  805c74:	10002c26 	beq	r2,zero,805d28 <__smakebuf_r+0x17c>
  805c78:	80c0030b 	ldhu	r3,12(r16)
  805c7c:	01002034 	movhi	r4,128
  805c80:	21132904 	addi	r4,r4,19620
  805c84:	89000f15 	stw	r4,60(r17)
  805c88:	18c02014 	ori	r3,r3,128
  805c8c:	80c0030d 	sth	r3,12(r16)
  805c90:	80800015 	stw	r2,0(r16)
  805c94:	80800415 	stw	r2,16(r16)
  805c98:	84800515 	stw	r18,20(r16)
  805c9c:	98001a1e 	bne	r19,zero,805d08 <__smakebuf_r+0x15c>
  805ca0:	dfc01317 	ldw	ra,76(sp)
  805ca4:	dcc01217 	ldw	r19,72(sp)
  805ca8:	dc801117 	ldw	r18,68(sp)
  805cac:	dc401017 	ldw	r17,64(sp)
  805cb0:	dc000f17 	ldw	r16,60(sp)
  805cb4:	dec01404 	addi	sp,sp,80
  805cb8:	f800283a 	ret
  805cbc:	288010c4 	addi	r2,r5,67
  805cc0:	28800015 	stw	r2,0(r5)
  805cc4:	28800415 	stw	r2,16(r5)
  805cc8:	00800044 	movi	r2,1
  805ccc:	28800515 	stw	r2,20(r5)
  805cd0:	f800283a 	ret
  805cd4:	04801004 	movi	r18,64
  805cd8:	003fe006 	br	805c5c <__alt_mem_epcs_flash_controller_0+0xff7fcc5c>
  805cdc:	81000a17 	ldw	r4,40(r16)
  805ce0:	00c02074 	movhi	r3,129
  805ce4:	18e0d204 	addi	r3,r3,-31928
  805ce8:	20ffc51e 	bne	r4,r3,805c00 <__alt_mem_epcs_flash_controller_0+0xff7fcc00>
  805cec:	8080030b 	ldhu	r2,12(r16)
  805cf0:	04810004 	movi	r18,1024
  805cf4:	84801315 	stw	r18,76(r16)
  805cf8:	1484b03a 	or	r2,r2,r18
  805cfc:	8080030d 	sth	r2,12(r16)
  805d00:	0027883a 	mov	r19,zero
  805d04:	003fd806 	br	805c68 <__alt_mem_epcs_flash_controller_0+0xff7fcc68>
  805d08:	8140038f 	ldh	r5,14(r16)
  805d0c:	8809883a 	mov	r4,r17
  805d10:	080a1d00 	call	80a1d0 <_isatty_r>
  805d14:	103fe226 	beq	r2,zero,805ca0 <__alt_mem_epcs_flash_controller_0+0xff7fcca0>
  805d18:	8080030b 	ldhu	r2,12(r16)
  805d1c:	10800054 	ori	r2,r2,1
  805d20:	8080030d 	sth	r2,12(r16)
  805d24:	003fde06 	br	805ca0 <__alt_mem_epcs_flash_controller_0+0xff7fcca0>
  805d28:	8080030b 	ldhu	r2,12(r16)
  805d2c:	10c0800c 	andi	r3,r2,512
  805d30:	183fdb1e 	bne	r3,zero,805ca0 <__alt_mem_epcs_flash_controller_0+0xff7fcca0>
  805d34:	10800094 	ori	r2,r2,2
  805d38:	80c010c4 	addi	r3,r16,67
  805d3c:	8080030d 	sth	r2,12(r16)
  805d40:	00800044 	movi	r2,1
  805d44:	80c00015 	stw	r3,0(r16)
  805d48:	80c00415 	stw	r3,16(r16)
  805d4c:	80800515 	stw	r2,20(r16)
  805d50:	003fd306 	br	805ca0 <__alt_mem_epcs_flash_controller_0+0xff7fcca0>
  805d54:	04810004 	movi	r18,1024
  805d58:	003fc306 	br	805c68 <__alt_mem_epcs_flash_controller_0+0xff7fcc68>
  805d5c:	0027883a 	mov	r19,zero
  805d60:	04810004 	movi	r18,1024
  805d64:	003fc006 	br	805c68 <__alt_mem_epcs_flash_controller_0+0xff7fcc68>

00805d68 <_malloc_r>:
  805d68:	defff504 	addi	sp,sp,-44
  805d6c:	dc800315 	stw	r18,12(sp)
  805d70:	dfc00a15 	stw	ra,40(sp)
  805d74:	df000915 	stw	fp,36(sp)
  805d78:	ddc00815 	stw	r23,32(sp)
  805d7c:	dd800715 	stw	r22,28(sp)
  805d80:	dd400615 	stw	r21,24(sp)
  805d84:	dd000515 	stw	r20,20(sp)
  805d88:	dcc00415 	stw	r19,16(sp)
  805d8c:	dc400215 	stw	r17,8(sp)
  805d90:	dc000115 	stw	r16,4(sp)
  805d94:	288002c4 	addi	r2,r5,11
  805d98:	00c00584 	movi	r3,22
  805d9c:	2025883a 	mov	r18,r4
  805da0:	18807f2e 	bgeu	r3,r2,805fa0 <_malloc_r+0x238>
  805da4:	047ffe04 	movi	r17,-8
  805da8:	1462703a 	and	r17,r2,r17
  805dac:	8800a316 	blt	r17,zero,80603c <_malloc_r+0x2d4>
  805db0:	8940a236 	bltu	r17,r5,80603c <_malloc_r+0x2d4>
  805db4:	080e7700 	call	80e770 <__malloc_lock>
  805db8:	00807dc4 	movi	r2,503
  805dbc:	1441e92e 	bgeu	r2,r17,806564 <_malloc_r+0x7fc>
  805dc0:	8804d27a 	srli	r2,r17,9
  805dc4:	1000a126 	beq	r2,zero,80604c <_malloc_r+0x2e4>
  805dc8:	00c00104 	movi	r3,4
  805dcc:	18811e36 	bltu	r3,r2,806248 <_malloc_r+0x4e0>
  805dd0:	8804d1ba 	srli	r2,r17,6
  805dd4:	12000e44 	addi	r8,r2,57
  805dd8:	11c00e04 	addi	r7,r2,56
  805ddc:	4209883a 	add	r4,r8,r8
  805de0:	04c020b4 	movhi	r19,130
  805de4:	2109883a 	add	r4,r4,r4
  805de8:	9ceb9604 	addi	r19,r19,-20904
  805dec:	2109883a 	add	r4,r4,r4
  805df0:	9909883a 	add	r4,r19,r4
  805df4:	24000117 	ldw	r16,4(r4)
  805df8:	213ffe04 	addi	r4,r4,-8
  805dfc:	24009726 	beq	r4,r16,80605c <_malloc_r+0x2f4>
  805e00:	80800117 	ldw	r2,4(r16)
  805e04:	01bfff04 	movi	r6,-4
  805e08:	014003c4 	movi	r5,15
  805e0c:	1184703a 	and	r2,r2,r6
  805e10:	1447c83a 	sub	r3,r2,r17
  805e14:	28c00716 	blt	r5,r3,805e34 <_malloc_r+0xcc>
  805e18:	1800920e 	bge	r3,zero,806064 <_malloc_r+0x2fc>
  805e1c:	84000317 	ldw	r16,12(r16)
  805e20:	24008e26 	beq	r4,r16,80605c <_malloc_r+0x2f4>
  805e24:	80800117 	ldw	r2,4(r16)
  805e28:	1184703a 	and	r2,r2,r6
  805e2c:	1447c83a 	sub	r3,r2,r17
  805e30:	28fff90e 	bge	r5,r3,805e18 <__alt_mem_epcs_flash_controller_0+0xff7fce18>
  805e34:	3809883a 	mov	r4,r7
  805e38:	018020b4 	movhi	r6,130
  805e3c:	9c000417 	ldw	r16,16(r19)
  805e40:	31ab9604 	addi	r6,r6,-20904
  805e44:	32000204 	addi	r8,r6,8
  805e48:	82013426 	beq	r16,r8,80631c <_malloc_r+0x5b4>
  805e4c:	80c00117 	ldw	r3,4(r16)
  805e50:	00bfff04 	movi	r2,-4
  805e54:	188e703a 	and	r7,r3,r2
  805e58:	3c45c83a 	sub	r2,r7,r17
  805e5c:	00c003c4 	movi	r3,15
  805e60:	18811f16 	blt	r3,r2,8062e0 <_malloc_r+0x578>
  805e64:	32000515 	stw	r8,20(r6)
  805e68:	32000415 	stw	r8,16(r6)
  805e6c:	10007f0e 	bge	r2,zero,80606c <_malloc_r+0x304>
  805e70:	00807fc4 	movi	r2,511
  805e74:	11c0fd36 	bltu	r2,r7,80626c <_malloc_r+0x504>
  805e78:	3806d0fa 	srli	r3,r7,3
  805e7c:	01c00044 	movi	r7,1
  805e80:	30800117 	ldw	r2,4(r6)
  805e84:	19400044 	addi	r5,r3,1
  805e88:	294b883a 	add	r5,r5,r5
  805e8c:	1807d0ba 	srai	r3,r3,2
  805e90:	294b883a 	add	r5,r5,r5
  805e94:	294b883a 	add	r5,r5,r5
  805e98:	298b883a 	add	r5,r5,r6
  805e9c:	38c6983a 	sll	r3,r7,r3
  805ea0:	29c00017 	ldw	r7,0(r5)
  805ea4:	2a7ffe04 	addi	r9,r5,-8
  805ea8:	1886b03a 	or	r3,r3,r2
  805eac:	82400315 	stw	r9,12(r16)
  805eb0:	81c00215 	stw	r7,8(r16)
  805eb4:	30c00115 	stw	r3,4(r6)
  805eb8:	2c000015 	stw	r16,0(r5)
  805ebc:	3c000315 	stw	r16,12(r7)
  805ec0:	2005d0ba 	srai	r2,r4,2
  805ec4:	01400044 	movi	r5,1
  805ec8:	288a983a 	sll	r5,r5,r2
  805ecc:	19406f36 	bltu	r3,r5,80608c <_malloc_r+0x324>
  805ed0:	28c4703a 	and	r2,r5,r3
  805ed4:	10000a1e 	bne	r2,zero,805f00 <_malloc_r+0x198>
  805ed8:	00bfff04 	movi	r2,-4
  805edc:	294b883a 	add	r5,r5,r5
  805ee0:	2088703a 	and	r4,r4,r2
  805ee4:	28c4703a 	and	r2,r5,r3
  805ee8:	21000104 	addi	r4,r4,4
  805eec:	1000041e 	bne	r2,zero,805f00 <_malloc_r+0x198>
  805ef0:	294b883a 	add	r5,r5,r5
  805ef4:	28c4703a 	and	r2,r5,r3
  805ef8:	21000104 	addi	r4,r4,4
  805efc:	103ffc26 	beq	r2,zero,805ef0 <__alt_mem_epcs_flash_controller_0+0xff7fcef0>
  805f00:	02bfff04 	movi	r10,-4
  805f04:	024003c4 	movi	r9,15
  805f08:	21800044 	addi	r6,r4,1
  805f0c:	318d883a 	add	r6,r6,r6
  805f10:	318d883a 	add	r6,r6,r6
  805f14:	318d883a 	add	r6,r6,r6
  805f18:	998d883a 	add	r6,r19,r6
  805f1c:	333ffe04 	addi	r12,r6,-8
  805f20:	2017883a 	mov	r11,r4
  805f24:	31800104 	addi	r6,r6,4
  805f28:	34000017 	ldw	r16,0(r6)
  805f2c:	31fffd04 	addi	r7,r6,-12
  805f30:	81c0041e 	bne	r16,r7,805f44 <_malloc_r+0x1dc>
  805f34:	0000fb06 	br	806324 <_malloc_r+0x5bc>
  805f38:	1801030e 	bge	r3,zero,806348 <_malloc_r+0x5e0>
  805f3c:	84000317 	ldw	r16,12(r16)
  805f40:	81c0f826 	beq	r16,r7,806324 <_malloc_r+0x5bc>
  805f44:	80800117 	ldw	r2,4(r16)
  805f48:	1284703a 	and	r2,r2,r10
  805f4c:	1447c83a 	sub	r3,r2,r17
  805f50:	48fff90e 	bge	r9,r3,805f38 <__alt_mem_epcs_flash_controller_0+0xff7fcf38>
  805f54:	80800317 	ldw	r2,12(r16)
  805f58:	81000217 	ldw	r4,8(r16)
  805f5c:	89400054 	ori	r5,r17,1
  805f60:	81400115 	stw	r5,4(r16)
  805f64:	20800315 	stw	r2,12(r4)
  805f68:	11000215 	stw	r4,8(r2)
  805f6c:	8463883a 	add	r17,r16,r17
  805f70:	9c400515 	stw	r17,20(r19)
  805f74:	9c400415 	stw	r17,16(r19)
  805f78:	18800054 	ori	r2,r3,1
  805f7c:	88800115 	stw	r2,4(r17)
  805f80:	8a000315 	stw	r8,12(r17)
  805f84:	8a000215 	stw	r8,8(r17)
  805f88:	88e3883a 	add	r17,r17,r3
  805f8c:	88c00015 	stw	r3,0(r17)
  805f90:	9009883a 	mov	r4,r18
  805f94:	080e8900 	call	80e890 <__malloc_unlock>
  805f98:	80800204 	addi	r2,r16,8
  805f9c:	00001b06 	br	80600c <_malloc_r+0x2a4>
  805fa0:	04400404 	movi	r17,16
  805fa4:	89402536 	bltu	r17,r5,80603c <_malloc_r+0x2d4>
  805fa8:	080e7700 	call	80e770 <__malloc_lock>
  805fac:	00800184 	movi	r2,6
  805fb0:	01000084 	movi	r4,2
  805fb4:	04c020b4 	movhi	r19,130
  805fb8:	1085883a 	add	r2,r2,r2
  805fbc:	9ceb9604 	addi	r19,r19,-20904
  805fc0:	1085883a 	add	r2,r2,r2
  805fc4:	9885883a 	add	r2,r19,r2
  805fc8:	14000117 	ldw	r16,4(r2)
  805fcc:	10fffe04 	addi	r3,r2,-8
  805fd0:	80c0d926 	beq	r16,r3,806338 <_malloc_r+0x5d0>
  805fd4:	80c00117 	ldw	r3,4(r16)
  805fd8:	81000317 	ldw	r4,12(r16)
  805fdc:	00bfff04 	movi	r2,-4
  805fe0:	1884703a 	and	r2,r3,r2
  805fe4:	81400217 	ldw	r5,8(r16)
  805fe8:	8085883a 	add	r2,r16,r2
  805fec:	10c00117 	ldw	r3,4(r2)
  805ff0:	29000315 	stw	r4,12(r5)
  805ff4:	21400215 	stw	r5,8(r4)
  805ff8:	18c00054 	ori	r3,r3,1
  805ffc:	10c00115 	stw	r3,4(r2)
  806000:	9009883a 	mov	r4,r18
  806004:	080e8900 	call	80e890 <__malloc_unlock>
  806008:	80800204 	addi	r2,r16,8
  80600c:	dfc00a17 	ldw	ra,40(sp)
  806010:	df000917 	ldw	fp,36(sp)
  806014:	ddc00817 	ldw	r23,32(sp)
  806018:	dd800717 	ldw	r22,28(sp)
  80601c:	dd400617 	ldw	r21,24(sp)
  806020:	dd000517 	ldw	r20,20(sp)
  806024:	dcc00417 	ldw	r19,16(sp)
  806028:	dc800317 	ldw	r18,12(sp)
  80602c:	dc400217 	ldw	r17,8(sp)
  806030:	dc000117 	ldw	r16,4(sp)
  806034:	dec00b04 	addi	sp,sp,44
  806038:	f800283a 	ret
  80603c:	00800304 	movi	r2,12
  806040:	90800015 	stw	r2,0(r18)
  806044:	0005883a 	mov	r2,zero
  806048:	003ff006 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  80604c:	01002004 	movi	r4,128
  806050:	02001004 	movi	r8,64
  806054:	01c00fc4 	movi	r7,63
  806058:	003f6106 	br	805de0 <__alt_mem_epcs_flash_controller_0+0xff7fcde0>
  80605c:	4009883a 	mov	r4,r8
  806060:	003f7506 	br	805e38 <__alt_mem_epcs_flash_controller_0+0xff7fce38>
  806064:	81000317 	ldw	r4,12(r16)
  806068:	003fde06 	br	805fe4 <__alt_mem_epcs_flash_controller_0+0xff7fcfe4>
  80606c:	81c5883a 	add	r2,r16,r7
  806070:	11400117 	ldw	r5,4(r2)
  806074:	9009883a 	mov	r4,r18
  806078:	29400054 	ori	r5,r5,1
  80607c:	11400115 	stw	r5,4(r2)
  806080:	080e8900 	call	80e890 <__malloc_unlock>
  806084:	80800204 	addi	r2,r16,8
  806088:	003fe006 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  80608c:	9c000217 	ldw	r16,8(r19)
  806090:	00bfff04 	movi	r2,-4
  806094:	85800117 	ldw	r22,4(r16)
  806098:	b0ac703a 	and	r22,r22,r2
  80609c:	b4400336 	bltu	r22,r17,8060ac <_malloc_r+0x344>
  8060a0:	b445c83a 	sub	r2,r22,r17
  8060a4:	00c003c4 	movi	r3,15
  8060a8:	18805d16 	blt	r3,r2,806220 <_malloc_r+0x4b8>
  8060ac:	05c020b4 	movhi	r23,130
  8060b0:	008020b4 	movhi	r2,130
  8060b4:	10b21204 	addi	r2,r2,-14264
  8060b8:	bdf1d704 	addi	r23,r23,-14500
  8060bc:	15400017 	ldw	r21,0(r2)
  8060c0:	b8c00017 	ldw	r3,0(r23)
  8060c4:	00bfffc4 	movi	r2,-1
  8060c8:	858d883a 	add	r6,r16,r22
  8060cc:	8d6b883a 	add	r21,r17,r21
  8060d0:	1880ea26 	beq	r3,r2,80647c <_malloc_r+0x714>
  8060d4:	ad4403c4 	addi	r21,r21,4111
  8060d8:	00bc0004 	movi	r2,-4096
  8060dc:	a8aa703a 	and	r21,r21,r2
  8060e0:	a80b883a 	mov	r5,r21
  8060e4:	9009883a 	mov	r4,r18
  8060e8:	d9800015 	stw	r6,0(sp)
  8060ec:	080821c0 	call	80821c <_sbrk_r>
  8060f0:	1029883a 	mov	r20,r2
  8060f4:	00bfffc4 	movi	r2,-1
  8060f8:	d9800017 	ldw	r6,0(sp)
  8060fc:	a080e826 	beq	r20,r2,8064a0 <_malloc_r+0x738>
  806100:	a180a636 	bltu	r20,r6,80639c <_malloc_r+0x634>
  806104:	070020b4 	movhi	fp,130
  806108:	e7323404 	addi	fp,fp,-14128
  80610c:	e0800017 	ldw	r2,0(fp)
  806110:	a887883a 	add	r3,r21,r2
  806114:	e0c00015 	stw	r3,0(fp)
  806118:	3500e626 	beq	r6,r20,8064b4 <_malloc_r+0x74c>
  80611c:	b9000017 	ldw	r4,0(r23)
  806120:	00bfffc4 	movi	r2,-1
  806124:	2080ee26 	beq	r4,r2,8064e0 <_malloc_r+0x778>
  806128:	a185c83a 	sub	r2,r20,r6
  80612c:	10c5883a 	add	r2,r2,r3
  806130:	e0800015 	stw	r2,0(fp)
  806134:	a0c001cc 	andi	r3,r20,7
  806138:	1800bc26 	beq	r3,zero,80642c <_malloc_r+0x6c4>
  80613c:	a0e9c83a 	sub	r20,r20,r3
  806140:	00840204 	movi	r2,4104
  806144:	a5000204 	addi	r20,r20,8
  806148:	10c7c83a 	sub	r3,r2,r3
  80614c:	a545883a 	add	r2,r20,r21
  806150:	1083ffcc 	andi	r2,r2,4095
  806154:	18abc83a 	sub	r21,r3,r2
  806158:	a80b883a 	mov	r5,r21
  80615c:	9009883a 	mov	r4,r18
  806160:	080821c0 	call	80821c <_sbrk_r>
  806164:	00ffffc4 	movi	r3,-1
  806168:	10c0e126 	beq	r2,r3,8064f0 <_malloc_r+0x788>
  80616c:	1505c83a 	sub	r2,r2,r20
  806170:	1545883a 	add	r2,r2,r21
  806174:	10800054 	ori	r2,r2,1
  806178:	e0c00017 	ldw	r3,0(fp)
  80617c:	9d000215 	stw	r20,8(r19)
  806180:	a0800115 	stw	r2,4(r20)
  806184:	a8c7883a 	add	r3,r21,r3
  806188:	e0c00015 	stw	r3,0(fp)
  80618c:	84c00e26 	beq	r16,r19,8061c8 <_malloc_r+0x460>
  806190:	018003c4 	movi	r6,15
  806194:	3580a72e 	bgeu	r6,r22,806434 <_malloc_r+0x6cc>
  806198:	81400117 	ldw	r5,4(r16)
  80619c:	013ffe04 	movi	r4,-8
  8061a0:	b0bffd04 	addi	r2,r22,-12
  8061a4:	1104703a 	and	r2,r2,r4
  8061a8:	2900004c 	andi	r4,r5,1
  8061ac:	2088b03a 	or	r4,r4,r2
  8061b0:	81000115 	stw	r4,4(r16)
  8061b4:	01400144 	movi	r5,5
  8061b8:	8089883a 	add	r4,r16,r2
  8061bc:	21400115 	stw	r5,4(r4)
  8061c0:	21400215 	stw	r5,8(r4)
  8061c4:	3080cd36 	bltu	r6,r2,8064fc <_malloc_r+0x794>
  8061c8:	008020b4 	movhi	r2,130
  8061cc:	10b21104 	addi	r2,r2,-14268
  8061d0:	11000017 	ldw	r4,0(r2)
  8061d4:	20c0012e 	bgeu	r4,r3,8061dc <_malloc_r+0x474>
  8061d8:	10c00015 	stw	r3,0(r2)
  8061dc:	008020b4 	movhi	r2,130
  8061e0:	10b21004 	addi	r2,r2,-14272
  8061e4:	11000017 	ldw	r4,0(r2)
  8061e8:	9c000217 	ldw	r16,8(r19)
  8061ec:	20c0012e 	bgeu	r4,r3,8061f4 <_malloc_r+0x48c>
  8061f0:	10c00015 	stw	r3,0(r2)
  8061f4:	80c00117 	ldw	r3,4(r16)
  8061f8:	00bfff04 	movi	r2,-4
  8061fc:	1886703a 	and	r3,r3,r2
  806200:	1c45c83a 	sub	r2,r3,r17
  806204:	1c400236 	bltu	r3,r17,806210 <_malloc_r+0x4a8>
  806208:	00c003c4 	movi	r3,15
  80620c:	18800416 	blt	r3,r2,806220 <_malloc_r+0x4b8>
  806210:	9009883a 	mov	r4,r18
  806214:	080e8900 	call	80e890 <__malloc_unlock>
  806218:	0005883a 	mov	r2,zero
  80621c:	003f7b06 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  806220:	88c00054 	ori	r3,r17,1
  806224:	80c00115 	stw	r3,4(r16)
  806228:	8463883a 	add	r17,r16,r17
  80622c:	10800054 	ori	r2,r2,1
  806230:	9c400215 	stw	r17,8(r19)
  806234:	88800115 	stw	r2,4(r17)
  806238:	9009883a 	mov	r4,r18
  80623c:	080e8900 	call	80e890 <__malloc_unlock>
  806240:	80800204 	addi	r2,r16,8
  806244:	003f7106 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  806248:	00c00504 	movi	r3,20
  80624c:	18804a2e 	bgeu	r3,r2,806378 <_malloc_r+0x610>
  806250:	00c01504 	movi	r3,84
  806254:	18806e36 	bltu	r3,r2,806410 <_malloc_r+0x6a8>
  806258:	8804d33a 	srli	r2,r17,12
  80625c:	12001bc4 	addi	r8,r2,111
  806260:	11c01b84 	addi	r7,r2,110
  806264:	4209883a 	add	r4,r8,r8
  806268:	003edd06 	br	805de0 <__alt_mem_epcs_flash_controller_0+0xff7fcde0>
  80626c:	3804d27a 	srli	r2,r7,9
  806270:	00c00104 	movi	r3,4
  806274:	1880442e 	bgeu	r3,r2,806388 <_malloc_r+0x620>
  806278:	00c00504 	movi	r3,20
  80627c:	18808136 	bltu	r3,r2,806484 <_malloc_r+0x71c>
  806280:	11401704 	addi	r5,r2,92
  806284:	10c016c4 	addi	r3,r2,91
  806288:	294b883a 	add	r5,r5,r5
  80628c:	294b883a 	add	r5,r5,r5
  806290:	294b883a 	add	r5,r5,r5
  806294:	994b883a 	add	r5,r19,r5
  806298:	28800017 	ldw	r2,0(r5)
  80629c:	018020b4 	movhi	r6,130
  8062a0:	297ffe04 	addi	r5,r5,-8
  8062a4:	31ab9604 	addi	r6,r6,-20904
  8062a8:	28806526 	beq	r5,r2,806440 <_malloc_r+0x6d8>
  8062ac:	01bfff04 	movi	r6,-4
  8062b0:	10c00117 	ldw	r3,4(r2)
  8062b4:	1986703a 	and	r3,r3,r6
  8062b8:	38c0022e 	bgeu	r7,r3,8062c4 <_malloc_r+0x55c>
  8062bc:	10800217 	ldw	r2,8(r2)
  8062c0:	28bffb1e 	bne	r5,r2,8062b0 <__alt_mem_epcs_flash_controller_0+0xff7fd2b0>
  8062c4:	11400317 	ldw	r5,12(r2)
  8062c8:	98c00117 	ldw	r3,4(r19)
  8062cc:	81400315 	stw	r5,12(r16)
  8062d0:	80800215 	stw	r2,8(r16)
  8062d4:	2c000215 	stw	r16,8(r5)
  8062d8:	14000315 	stw	r16,12(r2)
  8062dc:	003ef806 	br	805ec0 <__alt_mem_epcs_flash_controller_0+0xff7fcec0>
  8062e0:	88c00054 	ori	r3,r17,1
  8062e4:	80c00115 	stw	r3,4(r16)
  8062e8:	8463883a 	add	r17,r16,r17
  8062ec:	34400515 	stw	r17,20(r6)
  8062f0:	34400415 	stw	r17,16(r6)
  8062f4:	10c00054 	ori	r3,r2,1
  8062f8:	8a000315 	stw	r8,12(r17)
  8062fc:	8a000215 	stw	r8,8(r17)
  806300:	88c00115 	stw	r3,4(r17)
  806304:	88a3883a 	add	r17,r17,r2
  806308:	88800015 	stw	r2,0(r17)
  80630c:	9009883a 	mov	r4,r18
  806310:	080e8900 	call	80e890 <__malloc_unlock>
  806314:	80800204 	addi	r2,r16,8
  806318:	003f3c06 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  80631c:	30c00117 	ldw	r3,4(r6)
  806320:	003ee706 	br	805ec0 <__alt_mem_epcs_flash_controller_0+0xff7fcec0>
  806324:	5ac00044 	addi	r11,r11,1
  806328:	588000cc 	andi	r2,r11,3
  80632c:	31800204 	addi	r6,r6,8
  806330:	103efd1e 	bne	r2,zero,805f28 <__alt_mem_epcs_flash_controller_0+0xff7fcf28>
  806334:	00002406 	br	8063c8 <_malloc_r+0x660>
  806338:	14000317 	ldw	r16,12(r2)
  80633c:	143f251e 	bne	r2,r16,805fd4 <__alt_mem_epcs_flash_controller_0+0xff7fcfd4>
  806340:	21000084 	addi	r4,r4,2
  806344:	003ebc06 	br	805e38 <__alt_mem_epcs_flash_controller_0+0xff7fce38>
  806348:	8085883a 	add	r2,r16,r2
  80634c:	10c00117 	ldw	r3,4(r2)
  806350:	81000317 	ldw	r4,12(r16)
  806354:	81400217 	ldw	r5,8(r16)
  806358:	18c00054 	ori	r3,r3,1
  80635c:	10c00115 	stw	r3,4(r2)
  806360:	29000315 	stw	r4,12(r5)
  806364:	21400215 	stw	r5,8(r4)
  806368:	9009883a 	mov	r4,r18
  80636c:	080e8900 	call	80e890 <__malloc_unlock>
  806370:	80800204 	addi	r2,r16,8
  806374:	003f2506 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  806378:	12001704 	addi	r8,r2,92
  80637c:	11c016c4 	addi	r7,r2,91
  806380:	4209883a 	add	r4,r8,r8
  806384:	003e9606 	br	805de0 <__alt_mem_epcs_flash_controller_0+0xff7fcde0>
  806388:	3804d1ba 	srli	r2,r7,6
  80638c:	11400e44 	addi	r5,r2,57
  806390:	10c00e04 	addi	r3,r2,56
  806394:	294b883a 	add	r5,r5,r5
  806398:	003fbc06 	br	80628c <__alt_mem_epcs_flash_controller_0+0xff7fd28c>
  80639c:	84ff5926 	beq	r16,r19,806104 <__alt_mem_epcs_flash_controller_0+0xff7fd104>
  8063a0:	008020b4 	movhi	r2,130
  8063a4:	10ab9604 	addi	r2,r2,-20904
  8063a8:	14000217 	ldw	r16,8(r2)
  8063ac:	00bfff04 	movi	r2,-4
  8063b0:	80c00117 	ldw	r3,4(r16)
  8063b4:	1886703a 	and	r3,r3,r2
  8063b8:	003f9106 	br	806200 <__alt_mem_epcs_flash_controller_0+0xff7fd200>
  8063bc:	60800217 	ldw	r2,8(r12)
  8063c0:	213fffc4 	addi	r4,r4,-1
  8063c4:	1300651e 	bne	r2,r12,80655c <_malloc_r+0x7f4>
  8063c8:	208000cc 	andi	r2,r4,3
  8063cc:	633ffe04 	addi	r12,r12,-8
  8063d0:	103ffa1e 	bne	r2,zero,8063bc <__alt_mem_epcs_flash_controller_0+0xff7fd3bc>
  8063d4:	98800117 	ldw	r2,4(r19)
  8063d8:	0146303a 	nor	r3,zero,r5
  8063dc:	1884703a 	and	r2,r3,r2
  8063e0:	98800115 	stw	r2,4(r19)
  8063e4:	294b883a 	add	r5,r5,r5
  8063e8:	117f2836 	bltu	r2,r5,80608c <__alt_mem_epcs_flash_controller_0+0xff7fd08c>
  8063ec:	283f2726 	beq	r5,zero,80608c <__alt_mem_epcs_flash_controller_0+0xff7fd08c>
  8063f0:	2886703a 	and	r3,r5,r2
  8063f4:	5809883a 	mov	r4,r11
  8063f8:	183ec31e 	bne	r3,zero,805f08 <__alt_mem_epcs_flash_controller_0+0xff7fcf08>
  8063fc:	294b883a 	add	r5,r5,r5
  806400:	2886703a 	and	r3,r5,r2
  806404:	21000104 	addi	r4,r4,4
  806408:	183ffc26 	beq	r3,zero,8063fc <__alt_mem_epcs_flash_controller_0+0xff7fd3fc>
  80640c:	003ebe06 	br	805f08 <__alt_mem_epcs_flash_controller_0+0xff7fcf08>
  806410:	00c05504 	movi	r3,340
  806414:	18801236 	bltu	r3,r2,806460 <_malloc_r+0x6f8>
  806418:	8804d3fa 	srli	r2,r17,15
  80641c:	12001e04 	addi	r8,r2,120
  806420:	11c01dc4 	addi	r7,r2,119
  806424:	4209883a 	add	r4,r8,r8
  806428:	003e6d06 	br	805de0 <__alt_mem_epcs_flash_controller_0+0xff7fcde0>
  80642c:	00c40004 	movi	r3,4096
  806430:	003f4606 	br	80614c <__alt_mem_epcs_flash_controller_0+0xff7fd14c>
  806434:	00800044 	movi	r2,1
  806438:	a0800115 	stw	r2,4(r20)
  80643c:	003f7406 	br	806210 <__alt_mem_epcs_flash_controller_0+0xff7fd210>
  806440:	1805d0ba 	srai	r2,r3,2
  806444:	01c00044 	movi	r7,1
  806448:	30c00117 	ldw	r3,4(r6)
  80644c:	388e983a 	sll	r7,r7,r2
  806450:	2805883a 	mov	r2,r5
  806454:	38c6b03a 	or	r3,r7,r3
  806458:	30c00115 	stw	r3,4(r6)
  80645c:	003f9b06 	br	8062cc <__alt_mem_epcs_flash_controller_0+0xff7fd2cc>
  806460:	00c15504 	movi	r3,1364
  806464:	18801a36 	bltu	r3,r2,8064d0 <_malloc_r+0x768>
  806468:	8804d4ba 	srli	r2,r17,18
  80646c:	12001f44 	addi	r8,r2,125
  806470:	11c01f04 	addi	r7,r2,124
  806474:	4209883a 	add	r4,r8,r8
  806478:	003e5906 	br	805de0 <__alt_mem_epcs_flash_controller_0+0xff7fcde0>
  80647c:	ad400404 	addi	r21,r21,16
  806480:	003f1706 	br	8060e0 <__alt_mem_epcs_flash_controller_0+0xff7fd0e0>
  806484:	00c01504 	movi	r3,84
  806488:	18802336 	bltu	r3,r2,806518 <_malloc_r+0x7b0>
  80648c:	3804d33a 	srli	r2,r7,12
  806490:	11401bc4 	addi	r5,r2,111
  806494:	10c01b84 	addi	r3,r2,110
  806498:	294b883a 	add	r5,r5,r5
  80649c:	003f7b06 	br	80628c <__alt_mem_epcs_flash_controller_0+0xff7fd28c>
  8064a0:	9c000217 	ldw	r16,8(r19)
  8064a4:	00bfff04 	movi	r2,-4
  8064a8:	80c00117 	ldw	r3,4(r16)
  8064ac:	1886703a 	and	r3,r3,r2
  8064b0:	003f5306 	br	806200 <__alt_mem_epcs_flash_controller_0+0xff7fd200>
  8064b4:	3083ffcc 	andi	r2,r6,4095
  8064b8:	103f181e 	bne	r2,zero,80611c <__alt_mem_epcs_flash_controller_0+0xff7fd11c>
  8064bc:	99000217 	ldw	r4,8(r19)
  8064c0:	b545883a 	add	r2,r22,r21
  8064c4:	10800054 	ori	r2,r2,1
  8064c8:	20800115 	stw	r2,4(r4)
  8064cc:	003f3e06 	br	8061c8 <__alt_mem_epcs_flash_controller_0+0xff7fd1c8>
  8064d0:	01003f84 	movi	r4,254
  8064d4:	02001fc4 	movi	r8,127
  8064d8:	01c01f84 	movi	r7,126
  8064dc:	003e4006 	br	805de0 <__alt_mem_epcs_flash_controller_0+0xff7fcde0>
  8064e0:	008020b4 	movhi	r2,130
  8064e4:	10b1d704 	addi	r2,r2,-14500
  8064e8:	15000015 	stw	r20,0(r2)
  8064ec:	003f1106 	br	806134 <__alt_mem_epcs_flash_controller_0+0xff7fd134>
  8064f0:	00800044 	movi	r2,1
  8064f4:	002b883a 	mov	r21,zero
  8064f8:	003f1f06 	br	806178 <__alt_mem_epcs_flash_controller_0+0xff7fd178>
  8064fc:	81400204 	addi	r5,r16,8
  806500:	9009883a 	mov	r4,r18
  806504:	08051700 	call	805170 <_free_r>
  806508:	008020b4 	movhi	r2,130
  80650c:	10b23404 	addi	r2,r2,-14128
  806510:	10c00017 	ldw	r3,0(r2)
  806514:	003f2c06 	br	8061c8 <__alt_mem_epcs_flash_controller_0+0xff7fd1c8>
  806518:	00c05504 	movi	r3,340
  80651c:	18800536 	bltu	r3,r2,806534 <_malloc_r+0x7cc>
  806520:	3804d3fa 	srli	r2,r7,15
  806524:	11401e04 	addi	r5,r2,120
  806528:	10c01dc4 	addi	r3,r2,119
  80652c:	294b883a 	add	r5,r5,r5
  806530:	003f5606 	br	80628c <__alt_mem_epcs_flash_controller_0+0xff7fd28c>
  806534:	00c15504 	movi	r3,1364
  806538:	18800536 	bltu	r3,r2,806550 <_malloc_r+0x7e8>
  80653c:	3804d4ba 	srli	r2,r7,18
  806540:	11401f44 	addi	r5,r2,125
  806544:	10c01f04 	addi	r3,r2,124
  806548:	294b883a 	add	r5,r5,r5
  80654c:	003f4f06 	br	80628c <__alt_mem_epcs_flash_controller_0+0xff7fd28c>
  806550:	01403f84 	movi	r5,254
  806554:	00c01f84 	movi	r3,126
  806558:	003f4c06 	br	80628c <__alt_mem_epcs_flash_controller_0+0xff7fd28c>
  80655c:	98800117 	ldw	r2,4(r19)
  806560:	003fa006 	br	8063e4 <__alt_mem_epcs_flash_controller_0+0xff7fd3e4>
  806564:	8808d0fa 	srli	r4,r17,3
  806568:	20800044 	addi	r2,r4,1
  80656c:	1085883a 	add	r2,r2,r2
  806570:	003e9006 	br	805fb4 <__alt_mem_epcs_flash_controller_0+0xff7fcfb4>

00806574 <memchr>:
  806574:	208000cc 	andi	r2,r4,3
  806578:	280f883a 	mov	r7,r5
  80657c:	10003426 	beq	r2,zero,806650 <memchr+0xdc>
  806580:	30bfffc4 	addi	r2,r6,-1
  806584:	30001a26 	beq	r6,zero,8065f0 <memchr+0x7c>
  806588:	20c00003 	ldbu	r3,0(r4)
  80658c:	29803fcc 	andi	r6,r5,255
  806590:	30c0051e 	bne	r6,r3,8065a8 <memchr+0x34>
  806594:	00001806 	br	8065f8 <memchr+0x84>
  806598:	10001526 	beq	r2,zero,8065f0 <memchr+0x7c>
  80659c:	20c00003 	ldbu	r3,0(r4)
  8065a0:	10bfffc4 	addi	r2,r2,-1
  8065a4:	30c01426 	beq	r6,r3,8065f8 <memchr+0x84>
  8065a8:	21000044 	addi	r4,r4,1
  8065ac:	20c000cc 	andi	r3,r4,3
  8065b0:	183ff91e 	bne	r3,zero,806598 <__alt_mem_epcs_flash_controller_0+0xff7fd598>
  8065b4:	020000c4 	movi	r8,3
  8065b8:	40801136 	bltu	r8,r2,806600 <memchr+0x8c>
  8065bc:	10000c26 	beq	r2,zero,8065f0 <memchr+0x7c>
  8065c0:	20c00003 	ldbu	r3,0(r4)
  8065c4:	29403fcc 	andi	r5,r5,255
  8065c8:	28c00b26 	beq	r5,r3,8065f8 <memchr+0x84>
  8065cc:	20c00044 	addi	r3,r4,1
  8065d0:	39803fcc 	andi	r6,r7,255
  8065d4:	2089883a 	add	r4,r4,r2
  8065d8:	00000306 	br	8065e8 <memchr+0x74>
  8065dc:	18c00044 	addi	r3,r3,1
  8065e0:	197fffc3 	ldbu	r5,-1(r3)
  8065e4:	31400526 	beq	r6,r5,8065fc <memchr+0x88>
  8065e8:	1805883a 	mov	r2,r3
  8065ec:	20fffb1e 	bne	r4,r3,8065dc <__alt_mem_epcs_flash_controller_0+0xff7fd5dc>
  8065f0:	0005883a 	mov	r2,zero
  8065f4:	f800283a 	ret
  8065f8:	2005883a 	mov	r2,r4
  8065fc:	f800283a 	ret
  806600:	28c03fcc 	andi	r3,r5,255
  806604:	1812923a 	slli	r9,r3,8
  806608:	02ffbff4 	movhi	r11,65279
  80660c:	02a02074 	movhi	r10,32897
  806610:	48d2b03a 	or	r9,r9,r3
  806614:	4806943a 	slli	r3,r9,16
  806618:	5affbfc4 	addi	r11,r11,-257
  80661c:	52a02004 	addi	r10,r10,-32640
  806620:	48d2b03a 	or	r9,r9,r3
  806624:	20c00017 	ldw	r3,0(r4)
  806628:	48c6f03a 	xor	r3,r9,r3
  80662c:	1acd883a 	add	r6,r3,r11
  806630:	00c6303a 	nor	r3,zero,r3
  806634:	30c6703a 	and	r3,r6,r3
  806638:	1a86703a 	and	r3,r3,r10
  80663c:	183fe01e 	bne	r3,zero,8065c0 <__alt_mem_epcs_flash_controller_0+0xff7fd5c0>
  806640:	10bfff04 	addi	r2,r2,-4
  806644:	21000104 	addi	r4,r4,4
  806648:	40bff636 	bltu	r8,r2,806624 <__alt_mem_epcs_flash_controller_0+0xff7fd624>
  80664c:	003fdb06 	br	8065bc <__alt_mem_epcs_flash_controller_0+0xff7fd5bc>
  806650:	3005883a 	mov	r2,r6
  806654:	003fd706 	br	8065b4 <__alt_mem_epcs_flash_controller_0+0xff7fd5b4>

00806658 <memcpy>:
  806658:	defffd04 	addi	sp,sp,-12
  80665c:	dfc00215 	stw	ra,8(sp)
  806660:	dc400115 	stw	r17,4(sp)
  806664:	dc000015 	stw	r16,0(sp)
  806668:	00c003c4 	movi	r3,15
  80666c:	2005883a 	mov	r2,r4
  806670:	1980452e 	bgeu	r3,r6,806788 <memcpy+0x130>
  806674:	2906b03a 	or	r3,r5,r4
  806678:	18c000cc 	andi	r3,r3,3
  80667c:	1800441e 	bne	r3,zero,806790 <memcpy+0x138>
  806680:	347ffc04 	addi	r17,r6,-16
  806684:	8822d13a 	srli	r17,r17,4
  806688:	28c00104 	addi	r3,r5,4
  80668c:	23400104 	addi	r13,r4,4
  806690:	8820913a 	slli	r16,r17,4
  806694:	2b000204 	addi	r12,r5,8
  806698:	22c00204 	addi	r11,r4,8
  80669c:	84000504 	addi	r16,r16,20
  8066a0:	2a800304 	addi	r10,r5,12
  8066a4:	22400304 	addi	r9,r4,12
  8066a8:	2c21883a 	add	r16,r5,r16
  8066ac:	2811883a 	mov	r8,r5
  8066b0:	200f883a 	mov	r7,r4
  8066b4:	41000017 	ldw	r4,0(r8)
  8066b8:	1fc00017 	ldw	ra,0(r3)
  8066bc:	63c00017 	ldw	r15,0(r12)
  8066c0:	39000015 	stw	r4,0(r7)
  8066c4:	53800017 	ldw	r14,0(r10)
  8066c8:	6fc00015 	stw	ra,0(r13)
  8066cc:	5bc00015 	stw	r15,0(r11)
  8066d0:	4b800015 	stw	r14,0(r9)
  8066d4:	18c00404 	addi	r3,r3,16
  8066d8:	39c00404 	addi	r7,r7,16
  8066dc:	42000404 	addi	r8,r8,16
  8066e0:	6b400404 	addi	r13,r13,16
  8066e4:	63000404 	addi	r12,r12,16
  8066e8:	5ac00404 	addi	r11,r11,16
  8066ec:	52800404 	addi	r10,r10,16
  8066f0:	4a400404 	addi	r9,r9,16
  8066f4:	1c3fef1e 	bne	r3,r16,8066b4 <__alt_mem_epcs_flash_controller_0+0xff7fd6b4>
  8066f8:	89c00044 	addi	r7,r17,1
  8066fc:	380e913a 	slli	r7,r7,4
  806700:	310003cc 	andi	r4,r6,15
  806704:	02c000c4 	movi	r11,3
  806708:	11c7883a 	add	r3,r2,r7
  80670c:	29cb883a 	add	r5,r5,r7
  806710:	5900212e 	bgeu	r11,r4,806798 <memcpy+0x140>
  806714:	1813883a 	mov	r9,r3
  806718:	2811883a 	mov	r8,r5
  80671c:	200f883a 	mov	r7,r4
  806720:	42800017 	ldw	r10,0(r8)
  806724:	4a400104 	addi	r9,r9,4
  806728:	39ffff04 	addi	r7,r7,-4
  80672c:	4abfff15 	stw	r10,-4(r9)
  806730:	42000104 	addi	r8,r8,4
  806734:	59fffa36 	bltu	r11,r7,806720 <__alt_mem_epcs_flash_controller_0+0xff7fd720>
  806738:	213fff04 	addi	r4,r4,-4
  80673c:	2008d0ba 	srli	r4,r4,2
  806740:	318000cc 	andi	r6,r6,3
  806744:	21000044 	addi	r4,r4,1
  806748:	2109883a 	add	r4,r4,r4
  80674c:	2109883a 	add	r4,r4,r4
  806750:	1907883a 	add	r3,r3,r4
  806754:	290b883a 	add	r5,r5,r4
  806758:	30000626 	beq	r6,zero,806774 <memcpy+0x11c>
  80675c:	198d883a 	add	r6,r3,r6
  806760:	29c00003 	ldbu	r7,0(r5)
  806764:	18c00044 	addi	r3,r3,1
  806768:	29400044 	addi	r5,r5,1
  80676c:	19ffffc5 	stb	r7,-1(r3)
  806770:	19bffb1e 	bne	r3,r6,806760 <__alt_mem_epcs_flash_controller_0+0xff7fd760>
  806774:	dfc00217 	ldw	ra,8(sp)
  806778:	dc400117 	ldw	r17,4(sp)
  80677c:	dc000017 	ldw	r16,0(sp)
  806780:	dec00304 	addi	sp,sp,12
  806784:	f800283a 	ret
  806788:	2007883a 	mov	r3,r4
  80678c:	003ff206 	br	806758 <__alt_mem_epcs_flash_controller_0+0xff7fd758>
  806790:	2007883a 	mov	r3,r4
  806794:	003ff106 	br	80675c <__alt_mem_epcs_flash_controller_0+0xff7fd75c>
  806798:	200d883a 	mov	r6,r4
  80679c:	003fee06 	br	806758 <__alt_mem_epcs_flash_controller_0+0xff7fd758>

008067a0 <memmove>:
  8067a0:	2005883a 	mov	r2,r4
  8067a4:	29000b2e 	bgeu	r5,r4,8067d4 <memmove+0x34>
  8067a8:	298f883a 	add	r7,r5,r6
  8067ac:	21c0092e 	bgeu	r4,r7,8067d4 <memmove+0x34>
  8067b0:	2187883a 	add	r3,r4,r6
  8067b4:	198bc83a 	sub	r5,r3,r6
  8067b8:	30004826 	beq	r6,zero,8068dc <memmove+0x13c>
  8067bc:	39ffffc4 	addi	r7,r7,-1
  8067c0:	39000003 	ldbu	r4,0(r7)
  8067c4:	18ffffc4 	addi	r3,r3,-1
  8067c8:	19000005 	stb	r4,0(r3)
  8067cc:	28fffb1e 	bne	r5,r3,8067bc <__alt_mem_epcs_flash_controller_0+0xff7fd7bc>
  8067d0:	f800283a 	ret
  8067d4:	00c003c4 	movi	r3,15
  8067d8:	1980412e 	bgeu	r3,r6,8068e0 <memmove+0x140>
  8067dc:	2886b03a 	or	r3,r5,r2
  8067e0:	18c000cc 	andi	r3,r3,3
  8067e4:	1800401e 	bne	r3,zero,8068e8 <memmove+0x148>
  8067e8:	33fffc04 	addi	r15,r6,-16
  8067ec:	781ed13a 	srli	r15,r15,4
  8067f0:	28c00104 	addi	r3,r5,4
  8067f4:	13400104 	addi	r13,r2,4
  8067f8:	781c913a 	slli	r14,r15,4
  8067fc:	2b000204 	addi	r12,r5,8
  806800:	12c00204 	addi	r11,r2,8
  806804:	73800504 	addi	r14,r14,20
  806808:	2a800304 	addi	r10,r5,12
  80680c:	12400304 	addi	r9,r2,12
  806810:	2b9d883a 	add	r14,r5,r14
  806814:	2811883a 	mov	r8,r5
  806818:	100f883a 	mov	r7,r2
  80681c:	41000017 	ldw	r4,0(r8)
  806820:	39c00404 	addi	r7,r7,16
  806824:	18c00404 	addi	r3,r3,16
  806828:	393ffc15 	stw	r4,-16(r7)
  80682c:	193ffc17 	ldw	r4,-16(r3)
  806830:	6b400404 	addi	r13,r13,16
  806834:	5ac00404 	addi	r11,r11,16
  806838:	693ffc15 	stw	r4,-16(r13)
  80683c:	61000017 	ldw	r4,0(r12)
  806840:	4a400404 	addi	r9,r9,16
  806844:	42000404 	addi	r8,r8,16
  806848:	593ffc15 	stw	r4,-16(r11)
  80684c:	51000017 	ldw	r4,0(r10)
  806850:	63000404 	addi	r12,r12,16
  806854:	52800404 	addi	r10,r10,16
  806858:	493ffc15 	stw	r4,-16(r9)
  80685c:	1bbfef1e 	bne	r3,r14,80681c <__alt_mem_epcs_flash_controller_0+0xff7fd81c>
  806860:	79000044 	addi	r4,r15,1
  806864:	2008913a 	slli	r4,r4,4
  806868:	328003cc 	andi	r10,r6,15
  80686c:	02c000c4 	movi	r11,3
  806870:	1107883a 	add	r3,r2,r4
  806874:	290b883a 	add	r5,r5,r4
  806878:	5a801e2e 	bgeu	r11,r10,8068f4 <memmove+0x154>
  80687c:	1813883a 	mov	r9,r3
  806880:	2811883a 	mov	r8,r5
  806884:	500f883a 	mov	r7,r10
  806888:	41000017 	ldw	r4,0(r8)
  80688c:	4a400104 	addi	r9,r9,4
  806890:	39ffff04 	addi	r7,r7,-4
  806894:	493fff15 	stw	r4,-4(r9)
  806898:	42000104 	addi	r8,r8,4
  80689c:	59fffa36 	bltu	r11,r7,806888 <__alt_mem_epcs_flash_controller_0+0xff7fd888>
  8068a0:	513fff04 	addi	r4,r10,-4
  8068a4:	2008d0ba 	srli	r4,r4,2
  8068a8:	318000cc 	andi	r6,r6,3
  8068ac:	21000044 	addi	r4,r4,1
  8068b0:	2109883a 	add	r4,r4,r4
  8068b4:	2109883a 	add	r4,r4,r4
  8068b8:	1907883a 	add	r3,r3,r4
  8068bc:	290b883a 	add	r5,r5,r4
  8068c0:	30000b26 	beq	r6,zero,8068f0 <memmove+0x150>
  8068c4:	198d883a 	add	r6,r3,r6
  8068c8:	29c00003 	ldbu	r7,0(r5)
  8068cc:	18c00044 	addi	r3,r3,1
  8068d0:	29400044 	addi	r5,r5,1
  8068d4:	19ffffc5 	stb	r7,-1(r3)
  8068d8:	19bffb1e 	bne	r3,r6,8068c8 <__alt_mem_epcs_flash_controller_0+0xff7fd8c8>
  8068dc:	f800283a 	ret
  8068e0:	1007883a 	mov	r3,r2
  8068e4:	003ff606 	br	8068c0 <__alt_mem_epcs_flash_controller_0+0xff7fd8c0>
  8068e8:	1007883a 	mov	r3,r2
  8068ec:	003ff506 	br	8068c4 <__alt_mem_epcs_flash_controller_0+0xff7fd8c4>
  8068f0:	f800283a 	ret
  8068f4:	500d883a 	mov	r6,r10
  8068f8:	003ff106 	br	8068c0 <__alt_mem_epcs_flash_controller_0+0xff7fd8c0>

008068fc <memset>:
  8068fc:	20c000cc 	andi	r3,r4,3
  806900:	2005883a 	mov	r2,r4
  806904:	18004426 	beq	r3,zero,806a18 <memset+0x11c>
  806908:	31ffffc4 	addi	r7,r6,-1
  80690c:	30004026 	beq	r6,zero,806a10 <memset+0x114>
  806910:	2813883a 	mov	r9,r5
  806914:	200d883a 	mov	r6,r4
  806918:	2007883a 	mov	r3,r4
  80691c:	00000406 	br	806930 <memset+0x34>
  806920:	3a3fffc4 	addi	r8,r7,-1
  806924:	31800044 	addi	r6,r6,1
  806928:	38003926 	beq	r7,zero,806a10 <memset+0x114>
  80692c:	400f883a 	mov	r7,r8
  806930:	18c00044 	addi	r3,r3,1
  806934:	32400005 	stb	r9,0(r6)
  806938:	1a0000cc 	andi	r8,r3,3
  80693c:	403ff81e 	bne	r8,zero,806920 <__alt_mem_epcs_flash_controller_0+0xff7fd920>
  806940:	010000c4 	movi	r4,3
  806944:	21c02d2e 	bgeu	r4,r7,8069fc <memset+0x100>
  806948:	29003fcc 	andi	r4,r5,255
  80694c:	200c923a 	slli	r6,r4,8
  806950:	3108b03a 	or	r4,r6,r4
  806954:	200c943a 	slli	r6,r4,16
  806958:	218cb03a 	or	r6,r4,r6
  80695c:	010003c4 	movi	r4,15
  806960:	21c0182e 	bgeu	r4,r7,8069c4 <memset+0xc8>
  806964:	3b3ffc04 	addi	r12,r7,-16
  806968:	6018d13a 	srli	r12,r12,4
  80696c:	1a000104 	addi	r8,r3,4
  806970:	1ac00204 	addi	r11,r3,8
  806974:	6008913a 	slli	r4,r12,4
  806978:	1a800304 	addi	r10,r3,12
  80697c:	1813883a 	mov	r9,r3
  806980:	21000504 	addi	r4,r4,20
  806984:	1909883a 	add	r4,r3,r4
  806988:	49800015 	stw	r6,0(r9)
  80698c:	41800015 	stw	r6,0(r8)
  806990:	59800015 	stw	r6,0(r11)
  806994:	51800015 	stw	r6,0(r10)
  806998:	42000404 	addi	r8,r8,16
  80699c:	4a400404 	addi	r9,r9,16
  8069a0:	5ac00404 	addi	r11,r11,16
  8069a4:	52800404 	addi	r10,r10,16
  8069a8:	413ff71e 	bne	r8,r4,806988 <__alt_mem_epcs_flash_controller_0+0xff7fd988>
  8069ac:	63000044 	addi	r12,r12,1
  8069b0:	6018913a 	slli	r12,r12,4
  8069b4:	39c003cc 	andi	r7,r7,15
  8069b8:	010000c4 	movi	r4,3
  8069bc:	1b07883a 	add	r3,r3,r12
  8069c0:	21c00e2e 	bgeu	r4,r7,8069fc <memset+0x100>
  8069c4:	1813883a 	mov	r9,r3
  8069c8:	3811883a 	mov	r8,r7
  8069cc:	010000c4 	movi	r4,3
  8069d0:	49800015 	stw	r6,0(r9)
  8069d4:	423fff04 	addi	r8,r8,-4
  8069d8:	4a400104 	addi	r9,r9,4
  8069dc:	223ffc36 	bltu	r4,r8,8069d0 <__alt_mem_epcs_flash_controller_0+0xff7fd9d0>
  8069e0:	393fff04 	addi	r4,r7,-4
  8069e4:	2008d0ba 	srli	r4,r4,2
  8069e8:	39c000cc 	andi	r7,r7,3
  8069ec:	21000044 	addi	r4,r4,1
  8069f0:	2109883a 	add	r4,r4,r4
  8069f4:	2109883a 	add	r4,r4,r4
  8069f8:	1907883a 	add	r3,r3,r4
  8069fc:	38000526 	beq	r7,zero,806a14 <memset+0x118>
  806a00:	19cf883a 	add	r7,r3,r7
  806a04:	19400005 	stb	r5,0(r3)
  806a08:	18c00044 	addi	r3,r3,1
  806a0c:	38fffd1e 	bne	r7,r3,806a04 <__alt_mem_epcs_flash_controller_0+0xff7fda04>
  806a10:	f800283a 	ret
  806a14:	f800283a 	ret
  806a18:	2007883a 	mov	r3,r4
  806a1c:	300f883a 	mov	r7,r6
  806a20:	003fc706 	br	806940 <__alt_mem_epcs_flash_controller_0+0xff7fd940>

00806a24 <_Balloc>:
  806a24:	20801317 	ldw	r2,76(r4)
  806a28:	defffc04 	addi	sp,sp,-16
  806a2c:	dc400115 	stw	r17,4(sp)
  806a30:	dc000015 	stw	r16,0(sp)
  806a34:	dfc00315 	stw	ra,12(sp)
  806a38:	dc800215 	stw	r18,8(sp)
  806a3c:	2023883a 	mov	r17,r4
  806a40:	2821883a 	mov	r16,r5
  806a44:	10000f26 	beq	r2,zero,806a84 <_Balloc+0x60>
  806a48:	8407883a 	add	r3,r16,r16
  806a4c:	18c7883a 	add	r3,r3,r3
  806a50:	10c7883a 	add	r3,r2,r3
  806a54:	18800017 	ldw	r2,0(r3)
  806a58:	10001126 	beq	r2,zero,806aa0 <_Balloc+0x7c>
  806a5c:	11000017 	ldw	r4,0(r2)
  806a60:	19000015 	stw	r4,0(r3)
  806a64:	10000415 	stw	zero,16(r2)
  806a68:	10000315 	stw	zero,12(r2)
  806a6c:	dfc00317 	ldw	ra,12(sp)
  806a70:	dc800217 	ldw	r18,8(sp)
  806a74:	dc400117 	ldw	r17,4(sp)
  806a78:	dc000017 	ldw	r16,0(sp)
  806a7c:	dec00404 	addi	sp,sp,16
  806a80:	f800283a 	ret
  806a84:	01800844 	movi	r6,33
  806a88:	01400104 	movi	r5,4
  806a8c:	0809d8c0 	call	809d8c <_calloc_r>
  806a90:	88801315 	stw	r2,76(r17)
  806a94:	103fec1e 	bne	r2,zero,806a48 <__alt_mem_epcs_flash_controller_0+0xff7fda48>
  806a98:	0005883a 	mov	r2,zero
  806a9c:	003ff306 	br	806a6c <__alt_mem_epcs_flash_controller_0+0xff7fda6c>
  806aa0:	01400044 	movi	r5,1
  806aa4:	2c24983a 	sll	r18,r5,r16
  806aa8:	8809883a 	mov	r4,r17
  806aac:	91800144 	addi	r6,r18,5
  806ab0:	318d883a 	add	r6,r6,r6
  806ab4:	318d883a 	add	r6,r6,r6
  806ab8:	0809d8c0 	call	809d8c <_calloc_r>
  806abc:	103ff626 	beq	r2,zero,806a98 <__alt_mem_epcs_flash_controller_0+0xff7fda98>
  806ac0:	14000115 	stw	r16,4(r2)
  806ac4:	14800215 	stw	r18,8(r2)
  806ac8:	003fe606 	br	806a64 <__alt_mem_epcs_flash_controller_0+0xff7fda64>

00806acc <_Bfree>:
  806acc:	28000826 	beq	r5,zero,806af0 <_Bfree+0x24>
  806ad0:	28c00117 	ldw	r3,4(r5)
  806ad4:	20801317 	ldw	r2,76(r4)
  806ad8:	18c7883a 	add	r3,r3,r3
  806adc:	18c7883a 	add	r3,r3,r3
  806ae0:	10c5883a 	add	r2,r2,r3
  806ae4:	10c00017 	ldw	r3,0(r2)
  806ae8:	28c00015 	stw	r3,0(r5)
  806aec:	11400015 	stw	r5,0(r2)
  806af0:	f800283a 	ret

00806af4 <__multadd>:
  806af4:	defff704 	addi	sp,sp,-36
  806af8:	dc800215 	stw	r18,8(sp)
  806afc:	2c800417 	ldw	r18,16(r5)
  806b00:	dd800615 	stw	r22,24(sp)
  806b04:	dd400515 	stw	r21,20(sp)
  806b08:	dd000415 	stw	r20,16(sp)
  806b0c:	dcc00315 	stw	r19,12(sp)
  806b10:	dc400115 	stw	r17,4(sp)
  806b14:	dc000015 	stw	r16,0(sp)
  806b18:	dfc00815 	stw	ra,32(sp)
  806b1c:	ddc00715 	stw	r23,28(sp)
  806b20:	2827883a 	mov	r19,r5
  806b24:	2029883a 	mov	r20,r4
  806b28:	3023883a 	mov	r17,r6
  806b2c:	3821883a 	mov	r16,r7
  806b30:	2d400504 	addi	r21,r5,20
  806b34:	002d883a 	mov	r22,zero
  806b38:	adc00017 	ldw	r23,0(r21)
  806b3c:	880b883a 	mov	r5,r17
  806b40:	ad400104 	addi	r21,r21,4
  806b44:	b93fffcc 	andi	r4,r23,65535
  806b48:	080b2400 	call	80b240 <__mulsi3>
  806b4c:	b808d43a 	srli	r4,r23,16
  806b50:	880b883a 	mov	r5,r17
  806b54:	1421883a 	add	r16,r2,r16
  806b58:	080b2400 	call	80b240 <__mulsi3>
  806b5c:	800ed43a 	srli	r7,r16,16
  806b60:	80ffffcc 	andi	r3,r16,65535
  806b64:	b5800044 	addi	r22,r22,1
  806b68:	11c5883a 	add	r2,r2,r7
  806b6c:	100e943a 	slli	r7,r2,16
  806b70:	1020d43a 	srli	r16,r2,16
  806b74:	38c7883a 	add	r3,r7,r3
  806b78:	a8ffff15 	stw	r3,-4(r21)
  806b7c:	b4bfee16 	blt	r22,r18,806b38 <__alt_mem_epcs_flash_controller_0+0xff7fdb38>
  806b80:	80000926 	beq	r16,zero,806ba8 <__multadd+0xb4>
  806b84:	98800217 	ldw	r2,8(r19)
  806b88:	9080130e 	bge	r18,r2,806bd8 <__multadd+0xe4>
  806b8c:	90800144 	addi	r2,r18,5
  806b90:	1085883a 	add	r2,r2,r2
  806b94:	1085883a 	add	r2,r2,r2
  806b98:	9885883a 	add	r2,r19,r2
  806b9c:	14000015 	stw	r16,0(r2)
  806ba0:	94800044 	addi	r18,r18,1
  806ba4:	9c800415 	stw	r18,16(r19)
  806ba8:	9805883a 	mov	r2,r19
  806bac:	dfc00817 	ldw	ra,32(sp)
  806bb0:	ddc00717 	ldw	r23,28(sp)
  806bb4:	dd800617 	ldw	r22,24(sp)
  806bb8:	dd400517 	ldw	r21,20(sp)
  806bbc:	dd000417 	ldw	r20,16(sp)
  806bc0:	dcc00317 	ldw	r19,12(sp)
  806bc4:	dc800217 	ldw	r18,8(sp)
  806bc8:	dc400117 	ldw	r17,4(sp)
  806bcc:	dc000017 	ldw	r16,0(sp)
  806bd0:	dec00904 	addi	sp,sp,36
  806bd4:	f800283a 	ret
  806bd8:	99400117 	ldw	r5,4(r19)
  806bdc:	a009883a 	mov	r4,r20
  806be0:	29400044 	addi	r5,r5,1
  806be4:	0806a240 	call	806a24 <_Balloc>
  806be8:	99800417 	ldw	r6,16(r19)
  806bec:	99400304 	addi	r5,r19,12
  806bf0:	11000304 	addi	r4,r2,12
  806bf4:	31800084 	addi	r6,r6,2
  806bf8:	318d883a 	add	r6,r6,r6
  806bfc:	318d883a 	add	r6,r6,r6
  806c00:	1023883a 	mov	r17,r2
  806c04:	08066580 	call	806658 <memcpy>
  806c08:	98000a26 	beq	r19,zero,806c34 <__multadd+0x140>
  806c0c:	98c00117 	ldw	r3,4(r19)
  806c10:	a0801317 	ldw	r2,76(r20)
  806c14:	18c7883a 	add	r3,r3,r3
  806c18:	18c7883a 	add	r3,r3,r3
  806c1c:	10c5883a 	add	r2,r2,r3
  806c20:	10c00017 	ldw	r3,0(r2)
  806c24:	98c00015 	stw	r3,0(r19)
  806c28:	14c00015 	stw	r19,0(r2)
  806c2c:	8827883a 	mov	r19,r17
  806c30:	003fd606 	br	806b8c <__alt_mem_epcs_flash_controller_0+0xff7fdb8c>
  806c34:	8827883a 	mov	r19,r17
  806c38:	003fd406 	br	806b8c <__alt_mem_epcs_flash_controller_0+0xff7fdb8c>

00806c3c <__s2b>:
  806c3c:	defff904 	addi	sp,sp,-28
  806c40:	dc400115 	stw	r17,4(sp)
  806c44:	dc000015 	stw	r16,0(sp)
  806c48:	2023883a 	mov	r17,r4
  806c4c:	2821883a 	mov	r16,r5
  806c50:	39000204 	addi	r4,r7,8
  806c54:	01400244 	movi	r5,9
  806c58:	dcc00315 	stw	r19,12(sp)
  806c5c:	dc800215 	stw	r18,8(sp)
  806c60:	dfc00615 	stw	ra,24(sp)
  806c64:	dd400515 	stw	r21,20(sp)
  806c68:	dd000415 	stw	r20,16(sp)
  806c6c:	3825883a 	mov	r18,r7
  806c70:	3027883a 	mov	r19,r6
  806c74:	080b08c0 	call	80b08c <__divsi3>
  806c78:	00c00044 	movi	r3,1
  806c7c:	000b883a 	mov	r5,zero
  806c80:	1880030e 	bge	r3,r2,806c90 <__s2b+0x54>
  806c84:	18c7883a 	add	r3,r3,r3
  806c88:	29400044 	addi	r5,r5,1
  806c8c:	18bffd16 	blt	r3,r2,806c84 <__alt_mem_epcs_flash_controller_0+0xff7fdc84>
  806c90:	8809883a 	mov	r4,r17
  806c94:	0806a240 	call	806a24 <_Balloc>
  806c98:	d8c00717 	ldw	r3,28(sp)
  806c9c:	10c00515 	stw	r3,20(r2)
  806ca0:	00c00044 	movi	r3,1
  806ca4:	10c00415 	stw	r3,16(r2)
  806ca8:	00c00244 	movi	r3,9
  806cac:	1cc0210e 	bge	r3,r19,806d34 <__s2b+0xf8>
  806cb0:	80eb883a 	add	r21,r16,r3
  806cb4:	a829883a 	mov	r20,r21
  806cb8:	84e1883a 	add	r16,r16,r19
  806cbc:	a1c00007 	ldb	r7,0(r20)
  806cc0:	01800284 	movi	r6,10
  806cc4:	a5000044 	addi	r20,r20,1
  806cc8:	100b883a 	mov	r5,r2
  806ccc:	39fff404 	addi	r7,r7,-48
  806cd0:	8809883a 	mov	r4,r17
  806cd4:	0806af40 	call	806af4 <__multadd>
  806cd8:	a43ff81e 	bne	r20,r16,806cbc <__alt_mem_epcs_flash_controller_0+0xff7fdcbc>
  806cdc:	ace1883a 	add	r16,r21,r19
  806ce0:	843ffe04 	addi	r16,r16,-8
  806ce4:	9c800a0e 	bge	r19,r18,806d10 <__s2b+0xd4>
  806ce8:	94e5c83a 	sub	r18,r18,r19
  806cec:	84a5883a 	add	r18,r16,r18
  806cf0:	81c00007 	ldb	r7,0(r16)
  806cf4:	01800284 	movi	r6,10
  806cf8:	84000044 	addi	r16,r16,1
  806cfc:	100b883a 	mov	r5,r2
  806d00:	39fff404 	addi	r7,r7,-48
  806d04:	8809883a 	mov	r4,r17
  806d08:	0806af40 	call	806af4 <__multadd>
  806d0c:	84bff81e 	bne	r16,r18,806cf0 <__alt_mem_epcs_flash_controller_0+0xff7fdcf0>
  806d10:	dfc00617 	ldw	ra,24(sp)
  806d14:	dd400517 	ldw	r21,20(sp)
  806d18:	dd000417 	ldw	r20,16(sp)
  806d1c:	dcc00317 	ldw	r19,12(sp)
  806d20:	dc800217 	ldw	r18,8(sp)
  806d24:	dc400117 	ldw	r17,4(sp)
  806d28:	dc000017 	ldw	r16,0(sp)
  806d2c:	dec00704 	addi	sp,sp,28
  806d30:	f800283a 	ret
  806d34:	84000284 	addi	r16,r16,10
  806d38:	1827883a 	mov	r19,r3
  806d3c:	003fe906 	br	806ce4 <__alt_mem_epcs_flash_controller_0+0xff7fdce4>

00806d40 <__hi0bits>:
  806d40:	20bfffec 	andhi	r2,r4,65535
  806d44:	1000141e 	bne	r2,zero,806d98 <__hi0bits+0x58>
  806d48:	2008943a 	slli	r4,r4,16
  806d4c:	00800404 	movi	r2,16
  806d50:	20ffc02c 	andhi	r3,r4,65280
  806d54:	1800021e 	bne	r3,zero,806d60 <__hi0bits+0x20>
  806d58:	2008923a 	slli	r4,r4,8
  806d5c:	10800204 	addi	r2,r2,8
  806d60:	20fc002c 	andhi	r3,r4,61440
  806d64:	1800021e 	bne	r3,zero,806d70 <__hi0bits+0x30>
  806d68:	2008913a 	slli	r4,r4,4
  806d6c:	10800104 	addi	r2,r2,4
  806d70:	20f0002c 	andhi	r3,r4,49152
  806d74:	1800031e 	bne	r3,zero,806d84 <__hi0bits+0x44>
  806d78:	2109883a 	add	r4,r4,r4
  806d7c:	10800084 	addi	r2,r2,2
  806d80:	2109883a 	add	r4,r4,r4
  806d84:	20000316 	blt	r4,zero,806d94 <__hi0bits+0x54>
  806d88:	2110002c 	andhi	r4,r4,16384
  806d8c:	2000041e 	bne	r4,zero,806da0 <__hi0bits+0x60>
  806d90:	00800804 	movi	r2,32
  806d94:	f800283a 	ret
  806d98:	0005883a 	mov	r2,zero
  806d9c:	003fec06 	br	806d50 <__alt_mem_epcs_flash_controller_0+0xff7fdd50>
  806da0:	10800044 	addi	r2,r2,1
  806da4:	f800283a 	ret

00806da8 <__lo0bits>:
  806da8:	20c00017 	ldw	r3,0(r4)
  806dac:	188001cc 	andi	r2,r3,7
  806db0:	10000826 	beq	r2,zero,806dd4 <__lo0bits+0x2c>
  806db4:	1880004c 	andi	r2,r3,1
  806db8:	1000211e 	bne	r2,zero,806e40 <__lo0bits+0x98>
  806dbc:	1880008c 	andi	r2,r3,2
  806dc0:	1000211e 	bne	r2,zero,806e48 <__lo0bits+0xa0>
  806dc4:	1806d0ba 	srli	r3,r3,2
  806dc8:	00800084 	movi	r2,2
  806dcc:	20c00015 	stw	r3,0(r4)
  806dd0:	f800283a 	ret
  806dd4:	18bfffcc 	andi	r2,r3,65535
  806dd8:	10001326 	beq	r2,zero,806e28 <__lo0bits+0x80>
  806ddc:	0005883a 	mov	r2,zero
  806de0:	19403fcc 	andi	r5,r3,255
  806de4:	2800021e 	bne	r5,zero,806df0 <__lo0bits+0x48>
  806de8:	1806d23a 	srli	r3,r3,8
  806dec:	10800204 	addi	r2,r2,8
  806df0:	194003cc 	andi	r5,r3,15
  806df4:	2800021e 	bne	r5,zero,806e00 <__lo0bits+0x58>
  806df8:	1806d13a 	srli	r3,r3,4
  806dfc:	10800104 	addi	r2,r2,4
  806e00:	194000cc 	andi	r5,r3,3
  806e04:	2800021e 	bne	r5,zero,806e10 <__lo0bits+0x68>
  806e08:	1806d0ba 	srli	r3,r3,2
  806e0c:	10800084 	addi	r2,r2,2
  806e10:	1940004c 	andi	r5,r3,1
  806e14:	2800081e 	bne	r5,zero,806e38 <__lo0bits+0x90>
  806e18:	1806d07a 	srli	r3,r3,1
  806e1c:	1800051e 	bne	r3,zero,806e34 <__lo0bits+0x8c>
  806e20:	00800804 	movi	r2,32
  806e24:	f800283a 	ret
  806e28:	1806d43a 	srli	r3,r3,16
  806e2c:	00800404 	movi	r2,16
  806e30:	003feb06 	br	806de0 <__alt_mem_epcs_flash_controller_0+0xff7fdde0>
  806e34:	10800044 	addi	r2,r2,1
  806e38:	20c00015 	stw	r3,0(r4)
  806e3c:	f800283a 	ret
  806e40:	0005883a 	mov	r2,zero
  806e44:	f800283a 	ret
  806e48:	1806d07a 	srli	r3,r3,1
  806e4c:	00800044 	movi	r2,1
  806e50:	20c00015 	stw	r3,0(r4)
  806e54:	f800283a 	ret

00806e58 <__i2b>:
  806e58:	defffd04 	addi	sp,sp,-12
  806e5c:	dc000015 	stw	r16,0(sp)
  806e60:	04000044 	movi	r16,1
  806e64:	dc400115 	stw	r17,4(sp)
  806e68:	2823883a 	mov	r17,r5
  806e6c:	800b883a 	mov	r5,r16
  806e70:	dfc00215 	stw	ra,8(sp)
  806e74:	0806a240 	call	806a24 <_Balloc>
  806e78:	14400515 	stw	r17,20(r2)
  806e7c:	14000415 	stw	r16,16(r2)
  806e80:	dfc00217 	ldw	ra,8(sp)
  806e84:	dc400117 	ldw	r17,4(sp)
  806e88:	dc000017 	ldw	r16,0(sp)
  806e8c:	dec00304 	addi	sp,sp,12
  806e90:	f800283a 	ret

00806e94 <__multiply>:
  806e94:	deffef04 	addi	sp,sp,-68
  806e98:	dc400815 	stw	r17,32(sp)
  806e9c:	dc000715 	stw	r16,28(sp)
  806ea0:	34400417 	ldw	r17,16(r6)
  806ea4:	2c000417 	ldw	r16,16(r5)
  806ea8:	dd800d15 	stw	r22,52(sp)
  806eac:	dc800915 	stw	r18,36(sp)
  806eb0:	dfc01015 	stw	ra,64(sp)
  806eb4:	df000f15 	stw	fp,60(sp)
  806eb8:	ddc00e15 	stw	r23,56(sp)
  806ebc:	dd400c15 	stw	r21,48(sp)
  806ec0:	dd000b15 	stw	r20,44(sp)
  806ec4:	dcc00a15 	stw	r19,40(sp)
  806ec8:	2825883a 	mov	r18,r5
  806ecc:	302d883a 	mov	r22,r6
  806ed0:	8440050e 	bge	r16,r17,806ee8 <__multiply+0x54>
  806ed4:	8007883a 	mov	r3,r16
  806ed8:	3025883a 	mov	r18,r6
  806edc:	8821883a 	mov	r16,r17
  806ee0:	282d883a 	mov	r22,r5
  806ee4:	1823883a 	mov	r17,r3
  806ee8:	90800217 	ldw	r2,8(r18)
  806eec:	8447883a 	add	r3,r16,r17
  806ef0:	d8c00215 	stw	r3,8(sp)
  806ef4:	91400117 	ldw	r5,4(r18)
  806ef8:	10c0010e 	bge	r2,r3,806f00 <__multiply+0x6c>
  806efc:	29400044 	addi	r5,r5,1
  806f00:	0806a240 	call	806a24 <_Balloc>
  806f04:	d8c00217 	ldw	r3,8(sp)
  806f08:	d8800615 	stw	r2,24(sp)
  806f0c:	18eb883a 	add	r21,r3,r3
  806f10:	ad6b883a 	add	r21,r21,r21
  806f14:	10c00504 	addi	r3,r2,20
  806f18:	1d6b883a 	add	r21,r3,r21
  806f1c:	d8c00115 	stw	r3,4(sp)
  806f20:	dd400315 	stw	r21,12(sp)
  806f24:	1805883a 	mov	r2,r3
  806f28:	1d40042e 	bgeu	r3,r21,806f3c <__multiply+0xa8>
  806f2c:	d8c00317 	ldw	r3,12(sp)
  806f30:	10000015 	stw	zero,0(r2)
  806f34:	10800104 	addi	r2,r2,4
  806f38:	10fffc36 	bltu	r2,r3,806f2c <__alt_mem_epcs_flash_controller_0+0xff7fdf2c>
  806f3c:	8c63883a 	add	r17,r17,r17
  806f40:	b5800504 	addi	r22,r22,20
  806f44:	8c63883a 	add	r17,r17,r17
  806f48:	94800504 	addi	r18,r18,20
  806f4c:	8421883a 	add	r16,r16,r16
  806f50:	b463883a 	add	r17,r22,r17
  806f54:	8421883a 	add	r16,r16,r16
  806f58:	dd800015 	stw	r22,0(sp)
  806f5c:	dc800415 	stw	r18,16(sp)
  806f60:	dc400515 	stw	r17,20(sp)
  806f64:	9429883a 	add	r20,r18,r16
  806f68:	b4404f2e 	bgeu	r22,r17,8070a8 <__multiply+0x214>
  806f6c:	d8c00017 	ldw	r3,0(sp)
  806f70:	1c800017 	ldw	r18,0(r3)
  806f74:	947fffcc 	andi	r17,r18,65535
  806f78:	88001e26 	beq	r17,zero,806ff4 <__multiply+0x160>
  806f7c:	dd800117 	ldw	r22,4(sp)
  806f80:	dd400417 	ldw	r21,16(sp)
  806f84:	0027883a 	mov	r19,zero
  806f88:	ac800017 	ldw	r18,0(r21)
  806f8c:	b4000017 	ldw	r16,0(r22)
  806f90:	880b883a 	mov	r5,r17
  806f94:	913fffcc 	andi	r4,r18,65535
  806f98:	080b2400 	call	80b240 <__mulsi3>
  806f9c:	9008d43a 	srli	r4,r18,16
  806fa0:	84bfffcc 	andi	r18,r16,65535
  806fa4:	1485883a 	add	r2,r2,r18
  806fa8:	14e5883a 	add	r18,r2,r19
  806fac:	8020d43a 	srli	r16,r16,16
  806fb0:	9026d43a 	srli	r19,r18,16
  806fb4:	880b883a 	mov	r5,r17
  806fb8:	080b2400 	call	80b240 <__mulsi3>
  806fbc:	1405883a 	add	r2,r2,r16
  806fc0:	14e1883a 	add	r16,r2,r19
  806fc4:	90ffffcc 	andi	r3,r18,65535
  806fc8:	8024943a 	slli	r18,r16,16
  806fcc:	ad400104 	addi	r21,r21,4
  806fd0:	b005883a 	mov	r2,r22
  806fd4:	90c6b03a 	or	r3,r18,r3
  806fd8:	b0c00015 	stw	r3,0(r22)
  806fdc:	8026d43a 	srli	r19,r16,16
  806fe0:	b5800104 	addi	r22,r22,4
  806fe4:	ad3fe836 	bltu	r21,r20,806f88 <__alt_mem_epcs_flash_controller_0+0xff7fdf88>
  806fe8:	d8c00017 	ldw	r3,0(sp)
  806fec:	14c00115 	stw	r19,4(r2)
  806ff0:	1c800017 	ldw	r18,0(r3)
  806ff4:	9024d43a 	srli	r18,r18,16
  806ff8:	90002226 	beq	r18,zero,807084 <__multiply+0x1f0>
  806ffc:	d8c00117 	ldw	r3,4(sp)
  807000:	dd800417 	ldw	r22,16(sp)
  807004:	002f883a 	mov	r23,zero
  807008:	1f000017 	ldw	fp,0(r3)
  80700c:	1823883a 	mov	r17,r3
  807010:	182b883a 	mov	r21,r3
  807014:	e021883a 	mov	r16,fp
  807018:	00000106 	br	807020 <__multiply+0x18c>
  80701c:	982b883a 	mov	r21,r19
  807020:	b100000b 	ldhu	r4,0(r22)
  807024:	8020d43a 	srli	r16,r16,16
  807028:	900b883a 	mov	r5,r18
  80702c:	080b2400 	call	80b240 <__mulsi3>
  807030:	1405883a 	add	r2,r2,r16
  807034:	15ef883a 	add	r23,r2,r23
  807038:	b804943a 	slli	r2,r23,16
  80703c:	e0ffffcc 	andi	r3,fp,65535
  807040:	8c400104 	addi	r17,r17,4
  807044:	10c6b03a 	or	r3,r2,r3
  807048:	88ffff15 	stw	r3,-4(r17)
  80704c:	b5800104 	addi	r22,r22,4
  807050:	b13fff17 	ldw	r4,-4(r22)
  807054:	acc00104 	addi	r19,r21,4
  807058:	900b883a 	mov	r5,r18
  80705c:	2008d43a 	srli	r4,r4,16
  807060:	9c000017 	ldw	r16,0(r19)
  807064:	080b2400 	call	80b240 <__mulsi3>
  807068:	b806d43a 	srli	r3,r23,16
  80706c:	813fffcc 	andi	r4,r16,65535
  807070:	1105883a 	add	r2,r2,r4
  807074:	10f9883a 	add	fp,r2,r3
  807078:	e02ed43a 	srli	r23,fp,16
  80707c:	b53fe736 	bltu	r22,r20,80701c <__alt_mem_epcs_flash_controller_0+0xff7fe01c>
  807080:	af000115 	stw	fp,4(r21)
  807084:	d8c00017 	ldw	r3,0(sp)
  807088:	d9000517 	ldw	r4,20(sp)
  80708c:	18c00104 	addi	r3,r3,4
  807090:	d8c00015 	stw	r3,0(sp)
  807094:	d8c00117 	ldw	r3,4(sp)
  807098:	18c00104 	addi	r3,r3,4
  80709c:	d8c00115 	stw	r3,4(sp)
  8070a0:	d8c00017 	ldw	r3,0(sp)
  8070a4:	193fb136 	bltu	r3,r4,806f6c <__alt_mem_epcs_flash_controller_0+0xff7fdf6c>
  8070a8:	d8c00217 	ldw	r3,8(sp)
  8070ac:	00c00c0e 	bge	zero,r3,8070e0 <__multiply+0x24c>
  8070b0:	d8c00317 	ldw	r3,12(sp)
  8070b4:	18bfff17 	ldw	r2,-4(r3)
  8070b8:	1d7fff04 	addi	r21,r3,-4
  8070bc:	10000326 	beq	r2,zero,8070cc <__multiply+0x238>
  8070c0:	00000706 	br	8070e0 <__multiply+0x24c>
  8070c4:	a8800017 	ldw	r2,0(r21)
  8070c8:	1000051e 	bne	r2,zero,8070e0 <__multiply+0x24c>
  8070cc:	d8c00217 	ldw	r3,8(sp)
  8070d0:	ad7fff04 	addi	r21,r21,-4
  8070d4:	18ffffc4 	addi	r3,r3,-1
  8070d8:	d8c00215 	stw	r3,8(sp)
  8070dc:	183ff91e 	bne	r3,zero,8070c4 <__alt_mem_epcs_flash_controller_0+0xff7fe0c4>
  8070e0:	d8c00617 	ldw	r3,24(sp)
  8070e4:	d9000217 	ldw	r4,8(sp)
  8070e8:	1805883a 	mov	r2,r3
  8070ec:	19000415 	stw	r4,16(r3)
  8070f0:	dfc01017 	ldw	ra,64(sp)
  8070f4:	df000f17 	ldw	fp,60(sp)
  8070f8:	ddc00e17 	ldw	r23,56(sp)
  8070fc:	dd800d17 	ldw	r22,52(sp)
  807100:	dd400c17 	ldw	r21,48(sp)
  807104:	dd000b17 	ldw	r20,44(sp)
  807108:	dcc00a17 	ldw	r19,40(sp)
  80710c:	dc800917 	ldw	r18,36(sp)
  807110:	dc400817 	ldw	r17,32(sp)
  807114:	dc000717 	ldw	r16,28(sp)
  807118:	dec01104 	addi	sp,sp,68
  80711c:	f800283a 	ret

00807120 <__pow5mult>:
  807120:	defffa04 	addi	sp,sp,-24
  807124:	dcc00315 	stw	r19,12(sp)
  807128:	dc000015 	stw	r16,0(sp)
  80712c:	dfc00515 	stw	ra,20(sp)
  807130:	dd000415 	stw	r20,16(sp)
  807134:	dc800215 	stw	r18,8(sp)
  807138:	dc400115 	stw	r17,4(sp)
  80713c:	308000cc 	andi	r2,r6,3
  807140:	3021883a 	mov	r16,r6
  807144:	2027883a 	mov	r19,r4
  807148:	10002f1e 	bne	r2,zero,807208 <__pow5mult+0xe8>
  80714c:	2825883a 	mov	r18,r5
  807150:	8021d0ba 	srai	r16,r16,2
  807154:	80001a26 	beq	r16,zero,8071c0 <__pow5mult+0xa0>
  807158:	9c401217 	ldw	r17,72(r19)
  80715c:	8800061e 	bne	r17,zero,807178 <__pow5mult+0x58>
  807160:	00003406 	br	807234 <__pow5mult+0x114>
  807164:	8021d07a 	srai	r16,r16,1
  807168:	80001526 	beq	r16,zero,8071c0 <__pow5mult+0xa0>
  80716c:	88800017 	ldw	r2,0(r17)
  807170:	10001c26 	beq	r2,zero,8071e4 <__pow5mult+0xc4>
  807174:	1023883a 	mov	r17,r2
  807178:	8080004c 	andi	r2,r16,1
  80717c:	103ff926 	beq	r2,zero,807164 <__alt_mem_epcs_flash_controller_0+0xff7fe164>
  807180:	880d883a 	mov	r6,r17
  807184:	900b883a 	mov	r5,r18
  807188:	9809883a 	mov	r4,r19
  80718c:	0806e940 	call	806e94 <__multiply>
  807190:	90001b26 	beq	r18,zero,807200 <__pow5mult+0xe0>
  807194:	91000117 	ldw	r4,4(r18)
  807198:	98c01317 	ldw	r3,76(r19)
  80719c:	8021d07a 	srai	r16,r16,1
  8071a0:	2109883a 	add	r4,r4,r4
  8071a4:	2109883a 	add	r4,r4,r4
  8071a8:	1907883a 	add	r3,r3,r4
  8071ac:	19000017 	ldw	r4,0(r3)
  8071b0:	91000015 	stw	r4,0(r18)
  8071b4:	1c800015 	stw	r18,0(r3)
  8071b8:	1025883a 	mov	r18,r2
  8071bc:	803feb1e 	bne	r16,zero,80716c <__alt_mem_epcs_flash_controller_0+0xff7fe16c>
  8071c0:	9005883a 	mov	r2,r18
  8071c4:	dfc00517 	ldw	ra,20(sp)
  8071c8:	dd000417 	ldw	r20,16(sp)
  8071cc:	dcc00317 	ldw	r19,12(sp)
  8071d0:	dc800217 	ldw	r18,8(sp)
  8071d4:	dc400117 	ldw	r17,4(sp)
  8071d8:	dc000017 	ldw	r16,0(sp)
  8071dc:	dec00604 	addi	sp,sp,24
  8071e0:	f800283a 	ret
  8071e4:	880d883a 	mov	r6,r17
  8071e8:	880b883a 	mov	r5,r17
  8071ec:	9809883a 	mov	r4,r19
  8071f0:	0806e940 	call	806e94 <__multiply>
  8071f4:	88800015 	stw	r2,0(r17)
  8071f8:	10000015 	stw	zero,0(r2)
  8071fc:	003fdd06 	br	807174 <__alt_mem_epcs_flash_controller_0+0xff7fe174>
  807200:	1025883a 	mov	r18,r2
  807204:	003fd706 	br	807164 <__alt_mem_epcs_flash_controller_0+0xff7fe164>
  807208:	10bfffc4 	addi	r2,r2,-1
  80720c:	1085883a 	add	r2,r2,r2
  807210:	00c020b4 	movhi	r3,130
  807214:	18e97804 	addi	r3,r3,-23072
  807218:	1085883a 	add	r2,r2,r2
  80721c:	1885883a 	add	r2,r3,r2
  807220:	11800017 	ldw	r6,0(r2)
  807224:	000f883a 	mov	r7,zero
  807228:	0806af40 	call	806af4 <__multadd>
  80722c:	1025883a 	mov	r18,r2
  807230:	003fc706 	br	807150 <__alt_mem_epcs_flash_controller_0+0xff7fe150>
  807234:	05000044 	movi	r20,1
  807238:	a00b883a 	mov	r5,r20
  80723c:	9809883a 	mov	r4,r19
  807240:	0806a240 	call	806a24 <_Balloc>
  807244:	1023883a 	mov	r17,r2
  807248:	00809c44 	movi	r2,625
  80724c:	88800515 	stw	r2,20(r17)
  807250:	8d000415 	stw	r20,16(r17)
  807254:	9c401215 	stw	r17,72(r19)
  807258:	88000015 	stw	zero,0(r17)
  80725c:	003fc606 	br	807178 <__alt_mem_epcs_flash_controller_0+0xff7fe178>

00807260 <__lshift>:
  807260:	defff904 	addi	sp,sp,-28
  807264:	dd400515 	stw	r21,20(sp)
  807268:	dcc00315 	stw	r19,12(sp)
  80726c:	302bd17a 	srai	r21,r6,5
  807270:	2cc00417 	ldw	r19,16(r5)
  807274:	28800217 	ldw	r2,8(r5)
  807278:	dd000415 	stw	r20,16(sp)
  80727c:	ace7883a 	add	r19,r21,r19
  807280:	dc800215 	stw	r18,8(sp)
  807284:	dc400115 	stw	r17,4(sp)
  807288:	dc000015 	stw	r16,0(sp)
  80728c:	dfc00615 	stw	ra,24(sp)
  807290:	9c000044 	addi	r16,r19,1
  807294:	2823883a 	mov	r17,r5
  807298:	3029883a 	mov	r20,r6
  80729c:	2025883a 	mov	r18,r4
  8072a0:	29400117 	ldw	r5,4(r5)
  8072a4:	1400030e 	bge	r2,r16,8072b4 <__lshift+0x54>
  8072a8:	1085883a 	add	r2,r2,r2
  8072ac:	29400044 	addi	r5,r5,1
  8072b0:	143ffd16 	blt	r2,r16,8072a8 <__alt_mem_epcs_flash_controller_0+0xff7fe2a8>
  8072b4:	9009883a 	mov	r4,r18
  8072b8:	0806a240 	call	806a24 <_Balloc>
  8072bc:	10c00504 	addi	r3,r2,20
  8072c0:	0540070e 	bge	zero,r21,8072e0 <__lshift+0x80>
  8072c4:	ad6b883a 	add	r21,r21,r21
  8072c8:	ad6b883a 	add	r21,r21,r21
  8072cc:	1809883a 	mov	r4,r3
  8072d0:	1d47883a 	add	r3,r3,r21
  8072d4:	20000015 	stw	zero,0(r4)
  8072d8:	21000104 	addi	r4,r4,4
  8072dc:	193ffd1e 	bne	r3,r4,8072d4 <__alt_mem_epcs_flash_controller_0+0xff7fe2d4>
  8072e0:	8a000417 	ldw	r8,16(r17)
  8072e4:	89000504 	addi	r4,r17,20
  8072e8:	a18007cc 	andi	r6,r20,31
  8072ec:	4211883a 	add	r8,r8,r8
  8072f0:	4211883a 	add	r8,r8,r8
  8072f4:	2211883a 	add	r8,r4,r8
  8072f8:	30002326 	beq	r6,zero,807388 <__lshift+0x128>
  8072fc:	02400804 	movi	r9,32
  807300:	4993c83a 	sub	r9,r9,r6
  807304:	000b883a 	mov	r5,zero
  807308:	21c00017 	ldw	r7,0(r4)
  80730c:	1815883a 	mov	r10,r3
  807310:	18c00104 	addi	r3,r3,4
  807314:	398e983a 	sll	r7,r7,r6
  807318:	21000104 	addi	r4,r4,4
  80731c:	394ab03a 	or	r5,r7,r5
  807320:	197fff15 	stw	r5,-4(r3)
  807324:	217fff17 	ldw	r5,-4(r4)
  807328:	2a4ad83a 	srl	r5,r5,r9
  80732c:	223ff636 	bltu	r4,r8,807308 <__alt_mem_epcs_flash_controller_0+0xff7fe308>
  807330:	51400115 	stw	r5,4(r10)
  807334:	28001a1e 	bne	r5,zero,8073a0 <__lshift+0x140>
  807338:	843fffc4 	addi	r16,r16,-1
  80733c:	14000415 	stw	r16,16(r2)
  807340:	88000826 	beq	r17,zero,807364 <__lshift+0x104>
  807344:	89000117 	ldw	r4,4(r17)
  807348:	90c01317 	ldw	r3,76(r18)
  80734c:	2109883a 	add	r4,r4,r4
  807350:	2109883a 	add	r4,r4,r4
  807354:	1907883a 	add	r3,r3,r4
  807358:	19000017 	ldw	r4,0(r3)
  80735c:	89000015 	stw	r4,0(r17)
  807360:	1c400015 	stw	r17,0(r3)
  807364:	dfc00617 	ldw	ra,24(sp)
  807368:	dd400517 	ldw	r21,20(sp)
  80736c:	dd000417 	ldw	r20,16(sp)
  807370:	dcc00317 	ldw	r19,12(sp)
  807374:	dc800217 	ldw	r18,8(sp)
  807378:	dc400117 	ldw	r17,4(sp)
  80737c:	dc000017 	ldw	r16,0(sp)
  807380:	dec00704 	addi	sp,sp,28
  807384:	f800283a 	ret
  807388:	21400017 	ldw	r5,0(r4)
  80738c:	18c00104 	addi	r3,r3,4
  807390:	21000104 	addi	r4,r4,4
  807394:	197fff15 	stw	r5,-4(r3)
  807398:	223ffb36 	bltu	r4,r8,807388 <__alt_mem_epcs_flash_controller_0+0xff7fe388>
  80739c:	003fe606 	br	807338 <__alt_mem_epcs_flash_controller_0+0xff7fe338>
  8073a0:	9c000084 	addi	r16,r19,2
  8073a4:	003fe406 	br	807338 <__alt_mem_epcs_flash_controller_0+0xff7fe338>

008073a8 <__mcmp>:
  8073a8:	20800417 	ldw	r2,16(r4)
  8073ac:	28c00417 	ldw	r3,16(r5)
  8073b0:	10c5c83a 	sub	r2,r2,r3
  8073b4:	1000111e 	bne	r2,zero,8073fc <__mcmp+0x54>
  8073b8:	18c7883a 	add	r3,r3,r3
  8073bc:	18c7883a 	add	r3,r3,r3
  8073c0:	21000504 	addi	r4,r4,20
  8073c4:	29400504 	addi	r5,r5,20
  8073c8:	20c5883a 	add	r2,r4,r3
  8073cc:	28cb883a 	add	r5,r5,r3
  8073d0:	00000106 	br	8073d8 <__mcmp+0x30>
  8073d4:	20800a2e 	bgeu	r4,r2,807400 <__mcmp+0x58>
  8073d8:	10bfff04 	addi	r2,r2,-4
  8073dc:	297fff04 	addi	r5,r5,-4
  8073e0:	11800017 	ldw	r6,0(r2)
  8073e4:	28c00017 	ldw	r3,0(r5)
  8073e8:	30fffa26 	beq	r6,r3,8073d4 <__alt_mem_epcs_flash_controller_0+0xff7fe3d4>
  8073ec:	30c00236 	bltu	r6,r3,8073f8 <__mcmp+0x50>
  8073f0:	00800044 	movi	r2,1
  8073f4:	f800283a 	ret
  8073f8:	00bfffc4 	movi	r2,-1
  8073fc:	f800283a 	ret
  807400:	0005883a 	mov	r2,zero
  807404:	f800283a 	ret

00807408 <__mdiff>:
  807408:	28c00417 	ldw	r3,16(r5)
  80740c:	30800417 	ldw	r2,16(r6)
  807410:	defffa04 	addi	sp,sp,-24
  807414:	dcc00315 	stw	r19,12(sp)
  807418:	dc800215 	stw	r18,8(sp)
  80741c:	dfc00515 	stw	ra,20(sp)
  807420:	dd000415 	stw	r20,16(sp)
  807424:	dc400115 	stw	r17,4(sp)
  807428:	dc000015 	stw	r16,0(sp)
  80742c:	1887c83a 	sub	r3,r3,r2
  807430:	2825883a 	mov	r18,r5
  807434:	3027883a 	mov	r19,r6
  807438:	1800141e 	bne	r3,zero,80748c <__mdiff+0x84>
  80743c:	1085883a 	add	r2,r2,r2
  807440:	1085883a 	add	r2,r2,r2
  807444:	2a000504 	addi	r8,r5,20
  807448:	34000504 	addi	r16,r6,20
  80744c:	4087883a 	add	r3,r8,r2
  807450:	8085883a 	add	r2,r16,r2
  807454:	00000106 	br	80745c <__mdiff+0x54>
  807458:	40c0592e 	bgeu	r8,r3,8075c0 <__mdiff+0x1b8>
  80745c:	18ffff04 	addi	r3,r3,-4
  807460:	10bfff04 	addi	r2,r2,-4
  807464:	19c00017 	ldw	r7,0(r3)
  807468:	11400017 	ldw	r5,0(r2)
  80746c:	397ffa26 	beq	r7,r5,807458 <__alt_mem_epcs_flash_controller_0+0xff7fe458>
  807470:	3940592e 	bgeu	r7,r5,8075d8 <__mdiff+0x1d0>
  807474:	9005883a 	mov	r2,r18
  807478:	4023883a 	mov	r17,r8
  80747c:	9825883a 	mov	r18,r19
  807480:	05000044 	movi	r20,1
  807484:	1027883a 	mov	r19,r2
  807488:	00000406 	br	80749c <__mdiff+0x94>
  80748c:	18005616 	blt	r3,zero,8075e8 <__mdiff+0x1e0>
  807490:	34400504 	addi	r17,r6,20
  807494:	2c000504 	addi	r16,r5,20
  807498:	0029883a 	mov	r20,zero
  80749c:	91400117 	ldw	r5,4(r18)
  8074a0:	0806a240 	call	806a24 <_Balloc>
  8074a4:	92400417 	ldw	r9,16(r18)
  8074a8:	9b000417 	ldw	r12,16(r19)
  8074ac:	12c00504 	addi	r11,r2,20
  8074b0:	4a51883a 	add	r8,r9,r9
  8074b4:	6319883a 	add	r12,r12,r12
  8074b8:	4211883a 	add	r8,r8,r8
  8074bc:	6319883a 	add	r12,r12,r12
  8074c0:	15000315 	stw	r20,12(r2)
  8074c4:	8211883a 	add	r8,r16,r8
  8074c8:	8b19883a 	add	r12,r17,r12
  8074cc:	0007883a 	mov	r3,zero
  8074d0:	81400017 	ldw	r5,0(r16)
  8074d4:	89c00017 	ldw	r7,0(r17)
  8074d8:	59800104 	addi	r6,r11,4
  8074dc:	293fffcc 	andi	r4,r5,65535
  8074e0:	20c7883a 	add	r3,r4,r3
  8074e4:	393fffcc 	andi	r4,r7,65535
  8074e8:	1909c83a 	sub	r4,r3,r4
  8074ec:	280ad43a 	srli	r5,r5,16
  8074f0:	380ed43a 	srli	r7,r7,16
  8074f4:	2007d43a 	srai	r3,r4,16
  8074f8:	213fffcc 	andi	r4,r4,65535
  8074fc:	29cbc83a 	sub	r5,r5,r7
  807500:	28c7883a 	add	r3,r5,r3
  807504:	180a943a 	slli	r5,r3,16
  807508:	8c400104 	addi	r17,r17,4
  80750c:	84000104 	addi	r16,r16,4
  807510:	2908b03a 	or	r4,r5,r4
  807514:	59000015 	stw	r4,0(r11)
  807518:	1807d43a 	srai	r3,r3,16
  80751c:	3015883a 	mov	r10,r6
  807520:	3017883a 	mov	r11,r6
  807524:	8b3fea36 	bltu	r17,r12,8074d0 <__alt_mem_epcs_flash_controller_0+0xff7fe4d0>
  807528:	8200162e 	bgeu	r16,r8,807584 <__mdiff+0x17c>
  80752c:	8017883a 	mov	r11,r16
  807530:	59400017 	ldw	r5,0(r11)
  807534:	31800104 	addi	r6,r6,4
  807538:	5ac00104 	addi	r11,r11,4
  80753c:	293fffcc 	andi	r4,r5,65535
  807540:	20c7883a 	add	r3,r4,r3
  807544:	280ed43a 	srli	r7,r5,16
  807548:	180bd43a 	srai	r5,r3,16
  80754c:	193fffcc 	andi	r4,r3,65535
  807550:	3947883a 	add	r3,r7,r5
  807554:	180a943a 	slli	r5,r3,16
  807558:	1807d43a 	srai	r3,r3,16
  80755c:	2908b03a 	or	r4,r5,r4
  807560:	313fff15 	stw	r4,-4(r6)
  807564:	5a3ff236 	bltu	r11,r8,807530 <__alt_mem_epcs_flash_controller_0+0xff7fe530>
  807568:	0406303a 	nor	r3,zero,r16
  80756c:	1a07883a 	add	r3,r3,r8
  807570:	1806d0ba 	srli	r3,r3,2
  807574:	18c00044 	addi	r3,r3,1
  807578:	18c7883a 	add	r3,r3,r3
  80757c:	18c7883a 	add	r3,r3,r3
  807580:	50d5883a 	add	r10,r10,r3
  807584:	50ffff04 	addi	r3,r10,-4
  807588:	2000041e 	bne	r4,zero,80759c <__mdiff+0x194>
  80758c:	18ffff04 	addi	r3,r3,-4
  807590:	19000017 	ldw	r4,0(r3)
  807594:	4a7fffc4 	addi	r9,r9,-1
  807598:	203ffc26 	beq	r4,zero,80758c <__alt_mem_epcs_flash_controller_0+0xff7fe58c>
  80759c:	12400415 	stw	r9,16(r2)
  8075a0:	dfc00517 	ldw	ra,20(sp)
  8075a4:	dd000417 	ldw	r20,16(sp)
  8075a8:	dcc00317 	ldw	r19,12(sp)
  8075ac:	dc800217 	ldw	r18,8(sp)
  8075b0:	dc400117 	ldw	r17,4(sp)
  8075b4:	dc000017 	ldw	r16,0(sp)
  8075b8:	dec00604 	addi	sp,sp,24
  8075bc:	f800283a 	ret
  8075c0:	000b883a 	mov	r5,zero
  8075c4:	0806a240 	call	806a24 <_Balloc>
  8075c8:	00c00044 	movi	r3,1
  8075cc:	10c00415 	stw	r3,16(r2)
  8075d0:	10000515 	stw	zero,20(r2)
  8075d4:	003ff206 	br	8075a0 <__alt_mem_epcs_flash_controller_0+0xff7fe5a0>
  8075d8:	8023883a 	mov	r17,r16
  8075dc:	0029883a 	mov	r20,zero
  8075e0:	4021883a 	mov	r16,r8
  8075e4:	003fad06 	br	80749c <__alt_mem_epcs_flash_controller_0+0xff7fe49c>
  8075e8:	9005883a 	mov	r2,r18
  8075ec:	94400504 	addi	r17,r18,20
  8075f0:	9c000504 	addi	r16,r19,20
  8075f4:	9825883a 	mov	r18,r19
  8075f8:	05000044 	movi	r20,1
  8075fc:	1027883a 	mov	r19,r2
  807600:	003fa606 	br	80749c <__alt_mem_epcs_flash_controller_0+0xff7fe49c>

00807604 <__ulp>:
  807604:	295ffc2c 	andhi	r5,r5,32752
  807608:	00bf3034 	movhi	r2,64704
  80760c:	2887883a 	add	r3,r5,r2
  807610:	00c0020e 	bge	zero,r3,80761c <__ulp+0x18>
  807614:	0005883a 	mov	r2,zero
  807618:	f800283a 	ret
  80761c:	00c7c83a 	sub	r3,zero,r3
  807620:	1807d53a 	srai	r3,r3,20
  807624:	008004c4 	movi	r2,19
  807628:	10c00b0e 	bge	r2,r3,807658 <__ulp+0x54>
  80762c:	18bffb04 	addi	r2,r3,-20
  807630:	01000784 	movi	r4,30
  807634:	0007883a 	mov	r3,zero
  807638:	20800516 	blt	r4,r2,807650 <__ulp+0x4c>
  80763c:	010007c4 	movi	r4,31
  807640:	2089c83a 	sub	r4,r4,r2
  807644:	00800044 	movi	r2,1
  807648:	1104983a 	sll	r2,r2,r4
  80764c:	f800283a 	ret
  807650:	00800044 	movi	r2,1
  807654:	f800283a 	ret
  807658:	01400234 	movhi	r5,8
  80765c:	28c7d83a 	sra	r3,r5,r3
  807660:	0005883a 	mov	r2,zero
  807664:	f800283a 	ret

00807668 <__b2d>:
  807668:	defffa04 	addi	sp,sp,-24
  80766c:	dc000015 	stw	r16,0(sp)
  807670:	24000417 	ldw	r16,16(r4)
  807674:	dc400115 	stw	r17,4(sp)
  807678:	24400504 	addi	r17,r4,20
  80767c:	8421883a 	add	r16,r16,r16
  807680:	8421883a 	add	r16,r16,r16
  807684:	8c21883a 	add	r16,r17,r16
  807688:	dc800215 	stw	r18,8(sp)
  80768c:	84bfff17 	ldw	r18,-4(r16)
  807690:	dd000415 	stw	r20,16(sp)
  807694:	dcc00315 	stw	r19,12(sp)
  807698:	9009883a 	mov	r4,r18
  80769c:	2829883a 	mov	r20,r5
  8076a0:	dfc00515 	stw	ra,20(sp)
  8076a4:	0806d400 	call	806d40 <__hi0bits>
  8076a8:	00c00804 	movi	r3,32
  8076ac:	1889c83a 	sub	r4,r3,r2
  8076b0:	a1000015 	stw	r4,0(r20)
  8076b4:	01000284 	movi	r4,10
  8076b8:	84ffff04 	addi	r19,r16,-4
  8076bc:	20801216 	blt	r4,r2,807708 <__b2d+0xa0>
  8076c0:	018002c4 	movi	r6,11
  8076c4:	308dc83a 	sub	r6,r6,r2
  8076c8:	9186d83a 	srl	r3,r18,r6
  8076cc:	18cffc34 	orhi	r3,r3,16368
  8076d0:	8cc0212e 	bgeu	r17,r19,807758 <__b2d+0xf0>
  8076d4:	813ffe17 	ldw	r4,-8(r16)
  8076d8:	218cd83a 	srl	r6,r4,r6
  8076dc:	10800544 	addi	r2,r2,21
  8076e0:	9084983a 	sll	r2,r18,r2
  8076e4:	1184b03a 	or	r2,r2,r6
  8076e8:	dfc00517 	ldw	ra,20(sp)
  8076ec:	dd000417 	ldw	r20,16(sp)
  8076f0:	dcc00317 	ldw	r19,12(sp)
  8076f4:	dc800217 	ldw	r18,8(sp)
  8076f8:	dc400117 	ldw	r17,4(sp)
  8076fc:	dc000017 	ldw	r16,0(sp)
  807700:	dec00604 	addi	sp,sp,24
  807704:	f800283a 	ret
  807708:	8cc00f2e 	bgeu	r17,r19,807748 <__b2d+0xe0>
  80770c:	117ffd44 	addi	r5,r2,-11
  807710:	80bffe17 	ldw	r2,-8(r16)
  807714:	28000e26 	beq	r5,zero,807750 <__b2d+0xe8>
  807718:	1949c83a 	sub	r4,r3,r5
  80771c:	9164983a 	sll	r18,r18,r5
  807720:	1106d83a 	srl	r3,r2,r4
  807724:	81bffe04 	addi	r6,r16,-8
  807728:	948ffc34 	orhi	r18,r18,16368
  80772c:	90c6b03a 	or	r3,r18,r3
  807730:	89800e2e 	bgeu	r17,r6,80776c <__b2d+0x104>
  807734:	81bffd17 	ldw	r6,-12(r16)
  807738:	1144983a 	sll	r2,r2,r5
  80773c:	310ad83a 	srl	r5,r6,r4
  807740:	2884b03a 	or	r2,r5,r2
  807744:	003fe806 	br	8076e8 <__alt_mem_epcs_flash_controller_0+0xff7fe6e8>
  807748:	10bffd44 	addi	r2,r2,-11
  80774c:	1000041e 	bne	r2,zero,807760 <__b2d+0xf8>
  807750:	90cffc34 	orhi	r3,r18,16368
  807754:	003fe406 	br	8076e8 <__alt_mem_epcs_flash_controller_0+0xff7fe6e8>
  807758:	000d883a 	mov	r6,zero
  80775c:	003fdf06 	br	8076dc <__alt_mem_epcs_flash_controller_0+0xff7fe6dc>
  807760:	90a4983a 	sll	r18,r18,r2
  807764:	0005883a 	mov	r2,zero
  807768:	003ff906 	br	807750 <__alt_mem_epcs_flash_controller_0+0xff7fe750>
  80776c:	1144983a 	sll	r2,r2,r5
  807770:	003fdd06 	br	8076e8 <__alt_mem_epcs_flash_controller_0+0xff7fe6e8>

00807774 <__d2b>:
  807774:	defff804 	addi	sp,sp,-32
  807778:	dc000215 	stw	r16,8(sp)
  80777c:	3021883a 	mov	r16,r6
  807780:	dc400315 	stw	r17,12(sp)
  807784:	8022907a 	slli	r17,r16,1
  807788:	dd000615 	stw	r20,24(sp)
  80778c:	2829883a 	mov	r20,r5
  807790:	01400044 	movi	r5,1
  807794:	dcc00515 	stw	r19,20(sp)
  807798:	dc800415 	stw	r18,16(sp)
  80779c:	dfc00715 	stw	ra,28(sp)
  8077a0:	3825883a 	mov	r18,r7
  8077a4:	8822d57a 	srli	r17,r17,21
  8077a8:	0806a240 	call	806a24 <_Balloc>
  8077ac:	1027883a 	mov	r19,r2
  8077b0:	00800434 	movhi	r2,16
  8077b4:	10bfffc4 	addi	r2,r2,-1
  8077b8:	808c703a 	and	r6,r16,r2
  8077bc:	88000126 	beq	r17,zero,8077c4 <__d2b+0x50>
  8077c0:	31800434 	orhi	r6,r6,16
  8077c4:	d9800015 	stw	r6,0(sp)
  8077c8:	a0002426 	beq	r20,zero,80785c <__d2b+0xe8>
  8077cc:	d9000104 	addi	r4,sp,4
  8077d0:	dd000115 	stw	r20,4(sp)
  8077d4:	0806da80 	call	806da8 <__lo0bits>
  8077d8:	d8c00017 	ldw	r3,0(sp)
  8077dc:	10002f1e 	bne	r2,zero,80789c <__d2b+0x128>
  8077e0:	d9000117 	ldw	r4,4(sp)
  8077e4:	99000515 	stw	r4,20(r19)
  8077e8:	1821003a 	cmpeq	r16,r3,zero
  8077ec:	01000084 	movi	r4,2
  8077f0:	2421c83a 	sub	r16,r4,r16
  8077f4:	98c00615 	stw	r3,24(r19)
  8077f8:	9c000415 	stw	r16,16(r19)
  8077fc:	88001f1e 	bne	r17,zero,80787c <__d2b+0x108>
  807800:	10bef384 	addi	r2,r2,-1074
  807804:	90800015 	stw	r2,0(r18)
  807808:	00900034 	movhi	r2,16384
  80780c:	10bfffc4 	addi	r2,r2,-1
  807810:	8085883a 	add	r2,r16,r2
  807814:	1085883a 	add	r2,r2,r2
  807818:	1085883a 	add	r2,r2,r2
  80781c:	9885883a 	add	r2,r19,r2
  807820:	11000517 	ldw	r4,20(r2)
  807824:	8020917a 	slli	r16,r16,5
  807828:	0806d400 	call	806d40 <__hi0bits>
  80782c:	d8c00817 	ldw	r3,32(sp)
  807830:	8085c83a 	sub	r2,r16,r2
  807834:	18800015 	stw	r2,0(r3)
  807838:	9805883a 	mov	r2,r19
  80783c:	dfc00717 	ldw	ra,28(sp)
  807840:	dd000617 	ldw	r20,24(sp)
  807844:	dcc00517 	ldw	r19,20(sp)
  807848:	dc800417 	ldw	r18,16(sp)
  80784c:	dc400317 	ldw	r17,12(sp)
  807850:	dc000217 	ldw	r16,8(sp)
  807854:	dec00804 	addi	sp,sp,32
  807858:	f800283a 	ret
  80785c:	d809883a 	mov	r4,sp
  807860:	0806da80 	call	806da8 <__lo0bits>
  807864:	d8c00017 	ldw	r3,0(sp)
  807868:	04000044 	movi	r16,1
  80786c:	9c000415 	stw	r16,16(r19)
  807870:	98c00515 	stw	r3,20(r19)
  807874:	10800804 	addi	r2,r2,32
  807878:	883fe126 	beq	r17,zero,807800 <__alt_mem_epcs_flash_controller_0+0xff7fe800>
  80787c:	00c00d44 	movi	r3,53
  807880:	8c7ef344 	addi	r17,r17,-1075
  807884:	88a3883a 	add	r17,r17,r2
  807888:	1885c83a 	sub	r2,r3,r2
  80788c:	d8c00817 	ldw	r3,32(sp)
  807890:	94400015 	stw	r17,0(r18)
  807894:	18800015 	stw	r2,0(r3)
  807898:	003fe706 	br	807838 <__alt_mem_epcs_flash_controller_0+0xff7fe838>
  80789c:	01000804 	movi	r4,32
  8078a0:	2089c83a 	sub	r4,r4,r2
  8078a4:	1908983a 	sll	r4,r3,r4
  8078a8:	d9400117 	ldw	r5,4(sp)
  8078ac:	1886d83a 	srl	r3,r3,r2
  8078b0:	2148b03a 	or	r4,r4,r5
  8078b4:	99000515 	stw	r4,20(r19)
  8078b8:	d8c00015 	stw	r3,0(sp)
  8078bc:	003fca06 	br	8077e8 <__alt_mem_epcs_flash_controller_0+0xff7fe7e8>

008078c0 <__ratio>:
  8078c0:	defff904 	addi	sp,sp,-28
  8078c4:	dc400315 	stw	r17,12(sp)
  8078c8:	2823883a 	mov	r17,r5
  8078cc:	d9400104 	addi	r5,sp,4
  8078d0:	dfc00615 	stw	ra,24(sp)
  8078d4:	dcc00515 	stw	r19,20(sp)
  8078d8:	dc800415 	stw	r18,16(sp)
  8078dc:	2027883a 	mov	r19,r4
  8078e0:	dc000215 	stw	r16,8(sp)
  8078e4:	08076680 	call	807668 <__b2d>
  8078e8:	d80b883a 	mov	r5,sp
  8078ec:	8809883a 	mov	r4,r17
  8078f0:	1025883a 	mov	r18,r2
  8078f4:	1821883a 	mov	r16,r3
  8078f8:	08076680 	call	807668 <__b2d>
  8078fc:	8a000417 	ldw	r8,16(r17)
  807900:	99000417 	ldw	r4,16(r19)
  807904:	d9400117 	ldw	r5,4(sp)
  807908:	2209c83a 	sub	r4,r4,r8
  80790c:	2010917a 	slli	r8,r4,5
  807910:	d9000017 	ldw	r4,0(sp)
  807914:	2909c83a 	sub	r4,r5,r4
  807918:	4109883a 	add	r4,r8,r4
  80791c:	01000e0e 	bge	zero,r4,807958 <__ratio+0x98>
  807920:	2008953a 	slli	r4,r4,20
  807924:	2421883a 	add	r16,r4,r16
  807928:	100d883a 	mov	r6,r2
  80792c:	180f883a 	mov	r7,r3
  807930:	9009883a 	mov	r4,r18
  807934:	800b883a 	mov	r5,r16
  807938:	080bb140 	call	80bb14 <__divdf3>
  80793c:	dfc00617 	ldw	ra,24(sp)
  807940:	dcc00517 	ldw	r19,20(sp)
  807944:	dc800417 	ldw	r18,16(sp)
  807948:	dc400317 	ldw	r17,12(sp)
  80794c:	dc000217 	ldw	r16,8(sp)
  807950:	dec00704 	addi	sp,sp,28
  807954:	f800283a 	ret
  807958:	2008953a 	slli	r4,r4,20
  80795c:	1907c83a 	sub	r3,r3,r4
  807960:	003ff106 	br	807928 <__alt_mem_epcs_flash_controller_0+0xff7fe928>

00807964 <_mprec_log10>:
  807964:	defffe04 	addi	sp,sp,-8
  807968:	dc000015 	stw	r16,0(sp)
  80796c:	dfc00115 	stw	ra,4(sp)
  807970:	008005c4 	movi	r2,23
  807974:	2021883a 	mov	r16,r4
  807978:	11000d0e 	bge	r2,r4,8079b0 <_mprec_log10+0x4c>
  80797c:	0005883a 	mov	r2,zero
  807980:	00cffc34 	movhi	r3,16368
  807984:	843fffc4 	addi	r16,r16,-1
  807988:	000d883a 	mov	r6,zero
  80798c:	01d00934 	movhi	r7,16420
  807990:	1009883a 	mov	r4,r2
  807994:	180b883a 	mov	r5,r3
  807998:	080c73c0 	call	80c73c <__muldf3>
  80799c:	803ff91e 	bne	r16,zero,807984 <__alt_mem_epcs_flash_controller_0+0xff7fe984>
  8079a0:	dfc00117 	ldw	ra,4(sp)
  8079a4:	dc000017 	ldw	r16,0(sp)
  8079a8:	dec00204 	addi	sp,sp,8
  8079ac:	f800283a 	ret
  8079b0:	202090fa 	slli	r16,r4,3
  8079b4:	008020b4 	movhi	r2,130
  8079b8:	10a98f04 	addi	r2,r2,-22980
  8079bc:	1421883a 	add	r16,r2,r16
  8079c0:	80800017 	ldw	r2,0(r16)
  8079c4:	80c00117 	ldw	r3,4(r16)
  8079c8:	dfc00117 	ldw	ra,4(sp)
  8079cc:	dc000017 	ldw	r16,0(sp)
  8079d0:	dec00204 	addi	sp,sp,8
  8079d4:	f800283a 	ret

008079d8 <__copybits>:
  8079d8:	297fffc4 	addi	r5,r5,-1
  8079dc:	280fd17a 	srai	r7,r5,5
  8079e0:	30c00417 	ldw	r3,16(r6)
  8079e4:	30800504 	addi	r2,r6,20
  8079e8:	39c00044 	addi	r7,r7,1
  8079ec:	18c7883a 	add	r3,r3,r3
  8079f0:	39cf883a 	add	r7,r7,r7
  8079f4:	18c7883a 	add	r3,r3,r3
  8079f8:	39cf883a 	add	r7,r7,r7
  8079fc:	10c7883a 	add	r3,r2,r3
  807a00:	21cf883a 	add	r7,r4,r7
  807a04:	10c00d2e 	bgeu	r2,r3,807a3c <__copybits+0x64>
  807a08:	200b883a 	mov	r5,r4
  807a0c:	12000017 	ldw	r8,0(r2)
  807a10:	29400104 	addi	r5,r5,4
  807a14:	10800104 	addi	r2,r2,4
  807a18:	2a3fff15 	stw	r8,-4(r5)
  807a1c:	10fffb36 	bltu	r2,r3,807a0c <__alt_mem_epcs_flash_controller_0+0xff7fea0c>
  807a20:	1985c83a 	sub	r2,r3,r6
  807a24:	10bffac4 	addi	r2,r2,-21
  807a28:	1004d0ba 	srli	r2,r2,2
  807a2c:	10800044 	addi	r2,r2,1
  807a30:	1085883a 	add	r2,r2,r2
  807a34:	1085883a 	add	r2,r2,r2
  807a38:	2089883a 	add	r4,r4,r2
  807a3c:	21c0032e 	bgeu	r4,r7,807a4c <__copybits+0x74>
  807a40:	20000015 	stw	zero,0(r4)
  807a44:	21000104 	addi	r4,r4,4
  807a48:	21fffd36 	bltu	r4,r7,807a40 <__alt_mem_epcs_flash_controller_0+0xff7fea40>
  807a4c:	f800283a 	ret

00807a50 <__any_on>:
  807a50:	20c00417 	ldw	r3,16(r4)
  807a54:	2805d17a 	srai	r2,r5,5
  807a58:	21000504 	addi	r4,r4,20
  807a5c:	18800d0e 	bge	r3,r2,807a94 <__any_on+0x44>
  807a60:	18c7883a 	add	r3,r3,r3
  807a64:	18c7883a 	add	r3,r3,r3
  807a68:	20c7883a 	add	r3,r4,r3
  807a6c:	20c0192e 	bgeu	r4,r3,807ad4 <__any_on+0x84>
  807a70:	18bfff17 	ldw	r2,-4(r3)
  807a74:	18ffff04 	addi	r3,r3,-4
  807a78:	1000041e 	bne	r2,zero,807a8c <__any_on+0x3c>
  807a7c:	20c0142e 	bgeu	r4,r3,807ad0 <__any_on+0x80>
  807a80:	18ffff04 	addi	r3,r3,-4
  807a84:	19400017 	ldw	r5,0(r3)
  807a88:	283ffc26 	beq	r5,zero,807a7c <__alt_mem_epcs_flash_controller_0+0xff7fea7c>
  807a8c:	00800044 	movi	r2,1
  807a90:	f800283a 	ret
  807a94:	10c00a0e 	bge	r2,r3,807ac0 <__any_on+0x70>
  807a98:	1085883a 	add	r2,r2,r2
  807a9c:	1085883a 	add	r2,r2,r2
  807aa0:	294007cc 	andi	r5,r5,31
  807aa4:	2087883a 	add	r3,r4,r2
  807aa8:	283ff026 	beq	r5,zero,807a6c <__alt_mem_epcs_flash_controller_0+0xff7fea6c>
  807aac:	19800017 	ldw	r6,0(r3)
  807ab0:	3144d83a 	srl	r2,r6,r5
  807ab4:	114a983a 	sll	r5,r2,r5
  807ab8:	317ff41e 	bne	r6,r5,807a8c <__alt_mem_epcs_flash_controller_0+0xff7fea8c>
  807abc:	003feb06 	br	807a6c <__alt_mem_epcs_flash_controller_0+0xff7fea6c>
  807ac0:	1085883a 	add	r2,r2,r2
  807ac4:	1085883a 	add	r2,r2,r2
  807ac8:	2087883a 	add	r3,r4,r2
  807acc:	003fe706 	br	807a6c <__alt_mem_epcs_flash_controller_0+0xff7fea6c>
  807ad0:	f800283a 	ret
  807ad4:	0005883a 	mov	r2,zero
  807ad8:	f800283a 	ret

00807adc <_putc_r>:
  807adc:	defffc04 	addi	sp,sp,-16
  807ae0:	dc000215 	stw	r16,8(sp)
  807ae4:	dfc00315 	stw	ra,12(sp)
  807ae8:	2021883a 	mov	r16,r4
  807aec:	20000226 	beq	r4,zero,807af8 <_putc_r+0x1c>
  807af0:	20800e17 	ldw	r2,56(r4)
  807af4:	10001b26 	beq	r2,zero,807b64 <_putc_r+0x88>
  807af8:	30800217 	ldw	r2,8(r6)
  807afc:	10bfffc4 	addi	r2,r2,-1
  807b00:	30800215 	stw	r2,8(r6)
  807b04:	10000a16 	blt	r2,zero,807b30 <_putc_r+0x54>
  807b08:	30800017 	ldw	r2,0(r6)
  807b0c:	11400005 	stb	r5,0(r2)
  807b10:	30800017 	ldw	r2,0(r6)
  807b14:	10c00044 	addi	r3,r2,1
  807b18:	30c00015 	stw	r3,0(r6)
  807b1c:	10800003 	ldbu	r2,0(r2)
  807b20:	dfc00317 	ldw	ra,12(sp)
  807b24:	dc000217 	ldw	r16,8(sp)
  807b28:	dec00404 	addi	sp,sp,16
  807b2c:	f800283a 	ret
  807b30:	30c00617 	ldw	r3,24(r6)
  807b34:	10c00616 	blt	r2,r3,807b50 <_putc_r+0x74>
  807b38:	30800017 	ldw	r2,0(r6)
  807b3c:	00c00284 	movi	r3,10
  807b40:	11400005 	stb	r5,0(r2)
  807b44:	30800017 	ldw	r2,0(r6)
  807b48:	11400003 	ldbu	r5,0(r2)
  807b4c:	28fff11e 	bne	r5,r3,807b14 <__alt_mem_epcs_flash_controller_0+0xff7feb14>
  807b50:	8009883a 	mov	r4,r16
  807b54:	dfc00317 	ldw	ra,12(sp)
  807b58:	dc000217 	ldw	r16,8(sp)
  807b5c:	dec00404 	addi	sp,sp,16
  807b60:	0809b801 	jmpi	809b80 <__swbuf_r>
  807b64:	d9400015 	stw	r5,0(sp)
  807b68:	d9800115 	stw	r6,4(sp)
  807b6c:	0804ffc0 	call	804ffc <__sinit>
  807b70:	d9800117 	ldw	r6,4(sp)
  807b74:	d9400017 	ldw	r5,0(sp)
  807b78:	003fdf06 	br	807af8 <__alt_mem_epcs_flash_controller_0+0xff7feaf8>

00807b7c <putc>:
  807b7c:	008020b4 	movhi	r2,130
  807b80:	defffc04 	addi	sp,sp,-16
  807b84:	10b1d504 	addi	r2,r2,-14508
  807b88:	dc000115 	stw	r16,4(sp)
  807b8c:	14000017 	ldw	r16,0(r2)
  807b90:	dc400215 	stw	r17,8(sp)
  807b94:	dfc00315 	stw	ra,12(sp)
  807b98:	2023883a 	mov	r17,r4
  807b9c:	80000226 	beq	r16,zero,807ba8 <putc+0x2c>
  807ba0:	80800e17 	ldw	r2,56(r16)
  807ba4:	10001a26 	beq	r2,zero,807c10 <putc+0x94>
  807ba8:	28800217 	ldw	r2,8(r5)
  807bac:	10bfffc4 	addi	r2,r2,-1
  807bb0:	28800215 	stw	r2,8(r5)
  807bb4:	10000b16 	blt	r2,zero,807be4 <putc+0x68>
  807bb8:	28800017 	ldw	r2,0(r5)
  807bbc:	14400005 	stb	r17,0(r2)
  807bc0:	28800017 	ldw	r2,0(r5)
  807bc4:	10c00044 	addi	r3,r2,1
  807bc8:	28c00015 	stw	r3,0(r5)
  807bcc:	10800003 	ldbu	r2,0(r2)
  807bd0:	dfc00317 	ldw	ra,12(sp)
  807bd4:	dc400217 	ldw	r17,8(sp)
  807bd8:	dc000117 	ldw	r16,4(sp)
  807bdc:	dec00404 	addi	sp,sp,16
  807be0:	f800283a 	ret
  807be4:	28c00617 	ldw	r3,24(r5)
  807be8:	10c00e16 	blt	r2,r3,807c24 <putc+0xa8>
  807bec:	28800017 	ldw	r2,0(r5)
  807bf0:	01000284 	movi	r4,10
  807bf4:	14400005 	stb	r17,0(r2)
  807bf8:	28800017 	ldw	r2,0(r5)
  807bfc:	10c00003 	ldbu	r3,0(r2)
  807c00:	193ff01e 	bne	r3,r4,807bc4 <__alt_mem_epcs_flash_controller_0+0xff7febc4>
  807c04:	280d883a 	mov	r6,r5
  807c08:	180b883a 	mov	r5,r3
  807c0c:	00000706 	br	807c2c <putc+0xb0>
  807c10:	8009883a 	mov	r4,r16
  807c14:	d9400015 	stw	r5,0(sp)
  807c18:	0804ffc0 	call	804ffc <__sinit>
  807c1c:	d9400017 	ldw	r5,0(sp)
  807c20:	003fe106 	br	807ba8 <__alt_mem_epcs_flash_controller_0+0xff7feba8>
  807c24:	280d883a 	mov	r6,r5
  807c28:	880b883a 	mov	r5,r17
  807c2c:	8009883a 	mov	r4,r16
  807c30:	dfc00317 	ldw	ra,12(sp)
  807c34:	dc400217 	ldw	r17,8(sp)
  807c38:	dc000117 	ldw	r16,4(sp)
  807c3c:	dec00404 	addi	sp,sp,16
  807c40:	0809b801 	jmpi	809b80 <__swbuf_r>

00807c44 <_realloc_r>:
  807c44:	defff604 	addi	sp,sp,-40
  807c48:	dc800215 	stw	r18,8(sp)
  807c4c:	dfc00915 	stw	ra,36(sp)
  807c50:	df000815 	stw	fp,32(sp)
  807c54:	ddc00715 	stw	r23,28(sp)
  807c58:	dd800615 	stw	r22,24(sp)
  807c5c:	dd400515 	stw	r21,20(sp)
  807c60:	dd000415 	stw	r20,16(sp)
  807c64:	dcc00315 	stw	r19,12(sp)
  807c68:	dc400115 	stw	r17,4(sp)
  807c6c:	dc000015 	stw	r16,0(sp)
  807c70:	3025883a 	mov	r18,r6
  807c74:	2800b726 	beq	r5,zero,807f54 <_realloc_r+0x310>
  807c78:	282b883a 	mov	r21,r5
  807c7c:	2029883a 	mov	r20,r4
  807c80:	080e7700 	call	80e770 <__malloc_lock>
  807c84:	a8bfff17 	ldw	r2,-4(r21)
  807c88:	043fff04 	movi	r16,-4
  807c8c:	90c002c4 	addi	r3,r18,11
  807c90:	01000584 	movi	r4,22
  807c94:	acfffe04 	addi	r19,r21,-8
  807c98:	1420703a 	and	r16,r2,r16
  807c9c:	20c0332e 	bgeu	r4,r3,807d6c <_realloc_r+0x128>
  807ca0:	047ffe04 	movi	r17,-8
  807ca4:	1c62703a 	and	r17,r3,r17
  807ca8:	8807883a 	mov	r3,r17
  807cac:	88005816 	blt	r17,zero,807e10 <_realloc_r+0x1cc>
  807cb0:	8c805736 	bltu	r17,r18,807e10 <_realloc_r+0x1cc>
  807cb4:	80c0300e 	bge	r16,r3,807d78 <_realloc_r+0x134>
  807cb8:	070020b4 	movhi	fp,130
  807cbc:	e72b9604 	addi	fp,fp,-20904
  807cc0:	e1c00217 	ldw	r7,8(fp)
  807cc4:	9c09883a 	add	r4,r19,r16
  807cc8:	22000117 	ldw	r8,4(r4)
  807ccc:	21c06326 	beq	r4,r7,807e5c <_realloc_r+0x218>
  807cd0:	017fff84 	movi	r5,-2
  807cd4:	414a703a 	and	r5,r8,r5
  807cd8:	214b883a 	add	r5,r4,r5
  807cdc:	29800117 	ldw	r6,4(r5)
  807ce0:	3180004c 	andi	r6,r6,1
  807ce4:	30003f26 	beq	r6,zero,807de4 <_realloc_r+0x1a0>
  807ce8:	1080004c 	andi	r2,r2,1
  807cec:	10008326 	beq	r2,zero,807efc <_realloc_r+0x2b8>
  807cf0:	900b883a 	mov	r5,r18
  807cf4:	a009883a 	mov	r4,r20
  807cf8:	0805d680 	call	805d68 <_malloc_r>
  807cfc:	1025883a 	mov	r18,r2
  807d00:	10011e26 	beq	r2,zero,80817c <_realloc_r+0x538>
  807d04:	a93fff17 	ldw	r4,-4(r21)
  807d08:	10fffe04 	addi	r3,r2,-8
  807d0c:	00bfff84 	movi	r2,-2
  807d10:	2084703a 	and	r2,r4,r2
  807d14:	9885883a 	add	r2,r19,r2
  807d18:	1880ee26 	beq	r3,r2,8080d4 <_realloc_r+0x490>
  807d1c:	81bfff04 	addi	r6,r16,-4
  807d20:	00800904 	movi	r2,36
  807d24:	1180b836 	bltu	r2,r6,808008 <_realloc_r+0x3c4>
  807d28:	00c004c4 	movi	r3,19
  807d2c:	19809636 	bltu	r3,r6,807f88 <_realloc_r+0x344>
  807d30:	9005883a 	mov	r2,r18
  807d34:	a807883a 	mov	r3,r21
  807d38:	19000017 	ldw	r4,0(r3)
  807d3c:	11000015 	stw	r4,0(r2)
  807d40:	19000117 	ldw	r4,4(r3)
  807d44:	11000115 	stw	r4,4(r2)
  807d48:	18c00217 	ldw	r3,8(r3)
  807d4c:	10c00215 	stw	r3,8(r2)
  807d50:	a80b883a 	mov	r5,r21
  807d54:	a009883a 	mov	r4,r20
  807d58:	08051700 	call	805170 <_free_r>
  807d5c:	a009883a 	mov	r4,r20
  807d60:	080e8900 	call	80e890 <__malloc_unlock>
  807d64:	9005883a 	mov	r2,r18
  807d68:	00001206 	br	807db4 <_realloc_r+0x170>
  807d6c:	00c00404 	movi	r3,16
  807d70:	1823883a 	mov	r17,r3
  807d74:	003fce06 	br	807cb0 <__alt_mem_epcs_flash_controller_0+0xff7fecb0>
  807d78:	a825883a 	mov	r18,r21
  807d7c:	8445c83a 	sub	r2,r16,r17
  807d80:	00c003c4 	movi	r3,15
  807d84:	18802636 	bltu	r3,r2,807e20 <_realloc_r+0x1dc>
  807d88:	99800117 	ldw	r6,4(r19)
  807d8c:	9c07883a 	add	r3,r19,r16
  807d90:	3180004c 	andi	r6,r6,1
  807d94:	3420b03a 	or	r16,r6,r16
  807d98:	9c000115 	stw	r16,4(r19)
  807d9c:	18800117 	ldw	r2,4(r3)
  807da0:	10800054 	ori	r2,r2,1
  807da4:	18800115 	stw	r2,4(r3)
  807da8:	a009883a 	mov	r4,r20
  807dac:	080e8900 	call	80e890 <__malloc_unlock>
  807db0:	9005883a 	mov	r2,r18
  807db4:	dfc00917 	ldw	ra,36(sp)
  807db8:	df000817 	ldw	fp,32(sp)
  807dbc:	ddc00717 	ldw	r23,28(sp)
  807dc0:	dd800617 	ldw	r22,24(sp)
  807dc4:	dd400517 	ldw	r21,20(sp)
  807dc8:	dd000417 	ldw	r20,16(sp)
  807dcc:	dcc00317 	ldw	r19,12(sp)
  807dd0:	dc800217 	ldw	r18,8(sp)
  807dd4:	dc400117 	ldw	r17,4(sp)
  807dd8:	dc000017 	ldw	r16,0(sp)
  807ddc:	dec00a04 	addi	sp,sp,40
  807de0:	f800283a 	ret
  807de4:	017fff04 	movi	r5,-4
  807de8:	414a703a 	and	r5,r8,r5
  807dec:	814d883a 	add	r6,r16,r5
  807df0:	30c01f16 	blt	r6,r3,807e70 <_realloc_r+0x22c>
  807df4:	20800317 	ldw	r2,12(r4)
  807df8:	20c00217 	ldw	r3,8(r4)
  807dfc:	a825883a 	mov	r18,r21
  807e00:	3021883a 	mov	r16,r6
  807e04:	18800315 	stw	r2,12(r3)
  807e08:	10c00215 	stw	r3,8(r2)
  807e0c:	003fdb06 	br	807d7c <__alt_mem_epcs_flash_controller_0+0xff7fed7c>
  807e10:	00800304 	movi	r2,12
  807e14:	a0800015 	stw	r2,0(r20)
  807e18:	0005883a 	mov	r2,zero
  807e1c:	003fe506 	br	807db4 <__alt_mem_epcs_flash_controller_0+0xff7fedb4>
  807e20:	98c00117 	ldw	r3,4(r19)
  807e24:	9c4b883a 	add	r5,r19,r17
  807e28:	11000054 	ori	r4,r2,1
  807e2c:	18c0004c 	andi	r3,r3,1
  807e30:	1c62b03a 	or	r17,r3,r17
  807e34:	9c400115 	stw	r17,4(r19)
  807e38:	29000115 	stw	r4,4(r5)
  807e3c:	2885883a 	add	r2,r5,r2
  807e40:	10c00117 	ldw	r3,4(r2)
  807e44:	29400204 	addi	r5,r5,8
  807e48:	a009883a 	mov	r4,r20
  807e4c:	18c00054 	ori	r3,r3,1
  807e50:	10c00115 	stw	r3,4(r2)
  807e54:	08051700 	call	805170 <_free_r>
  807e58:	003fd306 	br	807da8 <__alt_mem_epcs_flash_controller_0+0xff7feda8>
  807e5c:	017fff04 	movi	r5,-4
  807e60:	414a703a 	and	r5,r8,r5
  807e64:	89800404 	addi	r6,r17,16
  807e68:	8151883a 	add	r8,r16,r5
  807e6c:	4180590e 	bge	r8,r6,807fd4 <_realloc_r+0x390>
  807e70:	1080004c 	andi	r2,r2,1
  807e74:	103f9e1e 	bne	r2,zero,807cf0 <__alt_mem_epcs_flash_controller_0+0xff7fecf0>
  807e78:	adbffe17 	ldw	r22,-8(r21)
  807e7c:	00bfff04 	movi	r2,-4
  807e80:	9dadc83a 	sub	r22,r19,r22
  807e84:	b1800117 	ldw	r6,4(r22)
  807e88:	3084703a 	and	r2,r6,r2
  807e8c:	20002026 	beq	r4,zero,807f10 <_realloc_r+0x2cc>
  807e90:	80af883a 	add	r23,r16,r2
  807e94:	b96f883a 	add	r23,r23,r5
  807e98:	21c05f26 	beq	r4,r7,808018 <_realloc_r+0x3d4>
  807e9c:	b8c01c16 	blt	r23,r3,807f10 <_realloc_r+0x2cc>
  807ea0:	20800317 	ldw	r2,12(r4)
  807ea4:	20c00217 	ldw	r3,8(r4)
  807ea8:	81bfff04 	addi	r6,r16,-4
  807eac:	01000904 	movi	r4,36
  807eb0:	18800315 	stw	r2,12(r3)
  807eb4:	10c00215 	stw	r3,8(r2)
  807eb8:	b0c00217 	ldw	r3,8(r22)
  807ebc:	b0800317 	ldw	r2,12(r22)
  807ec0:	b4800204 	addi	r18,r22,8
  807ec4:	18800315 	stw	r2,12(r3)
  807ec8:	10c00215 	stw	r3,8(r2)
  807ecc:	21801b36 	bltu	r4,r6,807f3c <_realloc_r+0x2f8>
  807ed0:	008004c4 	movi	r2,19
  807ed4:	1180352e 	bgeu	r2,r6,807fac <_realloc_r+0x368>
  807ed8:	a8800017 	ldw	r2,0(r21)
  807edc:	b0800215 	stw	r2,8(r22)
  807ee0:	a8800117 	ldw	r2,4(r21)
  807ee4:	b0800315 	stw	r2,12(r22)
  807ee8:	008006c4 	movi	r2,27
  807eec:	11807f36 	bltu	r2,r6,8080ec <_realloc_r+0x4a8>
  807ef0:	b0800404 	addi	r2,r22,16
  807ef4:	ad400204 	addi	r21,r21,8
  807ef8:	00002d06 	br	807fb0 <_realloc_r+0x36c>
  807efc:	adbffe17 	ldw	r22,-8(r21)
  807f00:	00bfff04 	movi	r2,-4
  807f04:	9dadc83a 	sub	r22,r19,r22
  807f08:	b1000117 	ldw	r4,4(r22)
  807f0c:	2084703a 	and	r2,r4,r2
  807f10:	b03f7726 	beq	r22,zero,807cf0 <__alt_mem_epcs_flash_controller_0+0xff7fecf0>
  807f14:	80af883a 	add	r23,r16,r2
  807f18:	b8ff7516 	blt	r23,r3,807cf0 <__alt_mem_epcs_flash_controller_0+0xff7fecf0>
  807f1c:	b0800317 	ldw	r2,12(r22)
  807f20:	b0c00217 	ldw	r3,8(r22)
  807f24:	81bfff04 	addi	r6,r16,-4
  807f28:	01000904 	movi	r4,36
  807f2c:	18800315 	stw	r2,12(r3)
  807f30:	10c00215 	stw	r3,8(r2)
  807f34:	b4800204 	addi	r18,r22,8
  807f38:	21bfe52e 	bgeu	r4,r6,807ed0 <__alt_mem_epcs_flash_controller_0+0xff7feed0>
  807f3c:	a80b883a 	mov	r5,r21
  807f40:	9009883a 	mov	r4,r18
  807f44:	08067a00 	call	8067a0 <memmove>
  807f48:	b821883a 	mov	r16,r23
  807f4c:	b027883a 	mov	r19,r22
  807f50:	003f8a06 	br	807d7c <__alt_mem_epcs_flash_controller_0+0xff7fed7c>
  807f54:	300b883a 	mov	r5,r6
  807f58:	dfc00917 	ldw	ra,36(sp)
  807f5c:	df000817 	ldw	fp,32(sp)
  807f60:	ddc00717 	ldw	r23,28(sp)
  807f64:	dd800617 	ldw	r22,24(sp)
  807f68:	dd400517 	ldw	r21,20(sp)
  807f6c:	dd000417 	ldw	r20,16(sp)
  807f70:	dcc00317 	ldw	r19,12(sp)
  807f74:	dc800217 	ldw	r18,8(sp)
  807f78:	dc400117 	ldw	r17,4(sp)
  807f7c:	dc000017 	ldw	r16,0(sp)
  807f80:	dec00a04 	addi	sp,sp,40
  807f84:	0805d681 	jmpi	805d68 <_malloc_r>
  807f88:	a8c00017 	ldw	r3,0(r21)
  807f8c:	90c00015 	stw	r3,0(r18)
  807f90:	a8c00117 	ldw	r3,4(r21)
  807f94:	90c00115 	stw	r3,4(r18)
  807f98:	00c006c4 	movi	r3,27
  807f9c:	19804536 	bltu	r3,r6,8080b4 <_realloc_r+0x470>
  807fa0:	90800204 	addi	r2,r18,8
  807fa4:	a8c00204 	addi	r3,r21,8
  807fa8:	003f6306 	br	807d38 <__alt_mem_epcs_flash_controller_0+0xff7fed38>
  807fac:	9005883a 	mov	r2,r18
  807fb0:	a8c00017 	ldw	r3,0(r21)
  807fb4:	b821883a 	mov	r16,r23
  807fb8:	b027883a 	mov	r19,r22
  807fbc:	10c00015 	stw	r3,0(r2)
  807fc0:	a8c00117 	ldw	r3,4(r21)
  807fc4:	10c00115 	stw	r3,4(r2)
  807fc8:	a8c00217 	ldw	r3,8(r21)
  807fcc:	10c00215 	stw	r3,8(r2)
  807fd0:	003f6a06 	br	807d7c <__alt_mem_epcs_flash_controller_0+0xff7fed7c>
  807fd4:	9c67883a 	add	r19,r19,r17
  807fd8:	4445c83a 	sub	r2,r8,r17
  807fdc:	e4c00215 	stw	r19,8(fp)
  807fe0:	10800054 	ori	r2,r2,1
  807fe4:	98800115 	stw	r2,4(r19)
  807fe8:	a8bfff17 	ldw	r2,-4(r21)
  807fec:	a009883a 	mov	r4,r20
  807ff0:	1080004c 	andi	r2,r2,1
  807ff4:	1462b03a 	or	r17,r2,r17
  807ff8:	ac7fff15 	stw	r17,-4(r21)
  807ffc:	080e8900 	call	80e890 <__malloc_unlock>
  808000:	a805883a 	mov	r2,r21
  808004:	003f6b06 	br	807db4 <__alt_mem_epcs_flash_controller_0+0xff7fedb4>
  808008:	a80b883a 	mov	r5,r21
  80800c:	9009883a 	mov	r4,r18
  808010:	08067a00 	call	8067a0 <memmove>
  808014:	003f4e06 	br	807d50 <__alt_mem_epcs_flash_controller_0+0xff7fed50>
  808018:	89000404 	addi	r4,r17,16
  80801c:	b93fbc16 	blt	r23,r4,807f10 <__alt_mem_epcs_flash_controller_0+0xff7fef10>
  808020:	b0800317 	ldw	r2,12(r22)
  808024:	b0c00217 	ldw	r3,8(r22)
  808028:	81bfff04 	addi	r6,r16,-4
  80802c:	01000904 	movi	r4,36
  808030:	18800315 	stw	r2,12(r3)
  808034:	10c00215 	stw	r3,8(r2)
  808038:	b4800204 	addi	r18,r22,8
  80803c:	21804336 	bltu	r4,r6,80814c <_realloc_r+0x508>
  808040:	008004c4 	movi	r2,19
  808044:	11803f2e 	bgeu	r2,r6,808144 <_realloc_r+0x500>
  808048:	a8800017 	ldw	r2,0(r21)
  80804c:	b0800215 	stw	r2,8(r22)
  808050:	a8800117 	ldw	r2,4(r21)
  808054:	b0800315 	stw	r2,12(r22)
  808058:	008006c4 	movi	r2,27
  80805c:	11803f36 	bltu	r2,r6,80815c <_realloc_r+0x518>
  808060:	b0800404 	addi	r2,r22,16
  808064:	ad400204 	addi	r21,r21,8
  808068:	a8c00017 	ldw	r3,0(r21)
  80806c:	10c00015 	stw	r3,0(r2)
  808070:	a8c00117 	ldw	r3,4(r21)
  808074:	10c00115 	stw	r3,4(r2)
  808078:	a8c00217 	ldw	r3,8(r21)
  80807c:	10c00215 	stw	r3,8(r2)
  808080:	b447883a 	add	r3,r22,r17
  808084:	bc45c83a 	sub	r2,r23,r17
  808088:	e0c00215 	stw	r3,8(fp)
  80808c:	10800054 	ori	r2,r2,1
  808090:	18800115 	stw	r2,4(r3)
  808094:	b0800117 	ldw	r2,4(r22)
  808098:	a009883a 	mov	r4,r20
  80809c:	1080004c 	andi	r2,r2,1
  8080a0:	1462b03a 	or	r17,r2,r17
  8080a4:	b4400115 	stw	r17,4(r22)
  8080a8:	080e8900 	call	80e890 <__malloc_unlock>
  8080ac:	9005883a 	mov	r2,r18
  8080b0:	003f4006 	br	807db4 <__alt_mem_epcs_flash_controller_0+0xff7fedb4>
  8080b4:	a8c00217 	ldw	r3,8(r21)
  8080b8:	90c00215 	stw	r3,8(r18)
  8080bc:	a8c00317 	ldw	r3,12(r21)
  8080c0:	90c00315 	stw	r3,12(r18)
  8080c4:	30801126 	beq	r6,r2,80810c <_realloc_r+0x4c8>
  8080c8:	90800404 	addi	r2,r18,16
  8080cc:	a8c00404 	addi	r3,r21,16
  8080d0:	003f1906 	br	807d38 <__alt_mem_epcs_flash_controller_0+0xff7fed38>
  8080d4:	90ffff17 	ldw	r3,-4(r18)
  8080d8:	00bfff04 	movi	r2,-4
  8080dc:	a825883a 	mov	r18,r21
  8080e0:	1884703a 	and	r2,r3,r2
  8080e4:	80a1883a 	add	r16,r16,r2
  8080e8:	003f2406 	br	807d7c <__alt_mem_epcs_flash_controller_0+0xff7fed7c>
  8080ec:	a8800217 	ldw	r2,8(r21)
  8080f0:	b0800415 	stw	r2,16(r22)
  8080f4:	a8800317 	ldw	r2,12(r21)
  8080f8:	b0800515 	stw	r2,20(r22)
  8080fc:	31000a26 	beq	r6,r4,808128 <_realloc_r+0x4e4>
  808100:	b0800604 	addi	r2,r22,24
  808104:	ad400404 	addi	r21,r21,16
  808108:	003fa906 	br	807fb0 <__alt_mem_epcs_flash_controller_0+0xff7fefb0>
  80810c:	a9000417 	ldw	r4,16(r21)
  808110:	90800604 	addi	r2,r18,24
  808114:	a8c00604 	addi	r3,r21,24
  808118:	91000415 	stw	r4,16(r18)
  80811c:	a9000517 	ldw	r4,20(r21)
  808120:	91000515 	stw	r4,20(r18)
  808124:	003f0406 	br	807d38 <__alt_mem_epcs_flash_controller_0+0xff7fed38>
  808128:	a8c00417 	ldw	r3,16(r21)
  80812c:	ad400604 	addi	r21,r21,24
  808130:	b0800804 	addi	r2,r22,32
  808134:	b0c00615 	stw	r3,24(r22)
  808138:	a8ffff17 	ldw	r3,-4(r21)
  80813c:	b0c00715 	stw	r3,28(r22)
  808140:	003f9b06 	br	807fb0 <__alt_mem_epcs_flash_controller_0+0xff7fefb0>
  808144:	9005883a 	mov	r2,r18
  808148:	003fc706 	br	808068 <__alt_mem_epcs_flash_controller_0+0xff7ff068>
  80814c:	a80b883a 	mov	r5,r21
  808150:	9009883a 	mov	r4,r18
  808154:	08067a00 	call	8067a0 <memmove>
  808158:	003fc906 	br	808080 <__alt_mem_epcs_flash_controller_0+0xff7ff080>
  80815c:	a8800217 	ldw	r2,8(r21)
  808160:	b0800415 	stw	r2,16(r22)
  808164:	a8800317 	ldw	r2,12(r21)
  808168:	b0800515 	stw	r2,20(r22)
  80816c:	31000726 	beq	r6,r4,80818c <_realloc_r+0x548>
  808170:	b0800604 	addi	r2,r22,24
  808174:	ad400404 	addi	r21,r21,16
  808178:	003fbb06 	br	808068 <__alt_mem_epcs_flash_controller_0+0xff7ff068>
  80817c:	a009883a 	mov	r4,r20
  808180:	080e8900 	call	80e890 <__malloc_unlock>
  808184:	0005883a 	mov	r2,zero
  808188:	003f0a06 	br	807db4 <__alt_mem_epcs_flash_controller_0+0xff7fedb4>
  80818c:	a8c00417 	ldw	r3,16(r21)
  808190:	ad400604 	addi	r21,r21,24
  808194:	b0800804 	addi	r2,r22,32
  808198:	b0c00615 	stw	r3,24(r22)
  80819c:	a8ffff17 	ldw	r3,-4(r21)
  8081a0:	b0c00715 	stw	r3,28(r22)
  8081a4:	003fb006 	br	808068 <__alt_mem_epcs_flash_controller_0+0xff7ff068>

008081a8 <__fpclassifyd>:
  8081a8:	00a00034 	movhi	r2,32768
  8081ac:	10bfffc4 	addi	r2,r2,-1
  8081b0:	2884703a 	and	r2,r5,r2
  8081b4:	10000726 	beq	r2,zero,8081d4 <__fpclassifyd+0x2c>
  8081b8:	00fffc34 	movhi	r3,65520
  8081bc:	019ff834 	movhi	r6,32736
  8081c0:	28c7883a 	add	r3,r5,r3
  8081c4:	31bfffc4 	addi	r6,r6,-1
  8081c8:	30c00536 	bltu	r6,r3,8081e0 <__fpclassifyd+0x38>
  8081cc:	00800104 	movi	r2,4
  8081d0:	f800283a 	ret
  8081d4:	2000021e 	bne	r4,zero,8081e0 <__fpclassifyd+0x38>
  8081d8:	00800084 	movi	r2,2
  8081dc:	f800283a 	ret
  8081e0:	00dffc34 	movhi	r3,32752
  8081e4:	019ff834 	movhi	r6,32736
  8081e8:	28cb883a 	add	r5,r5,r3
  8081ec:	31bfffc4 	addi	r6,r6,-1
  8081f0:	317ff62e 	bgeu	r6,r5,8081cc <__alt_mem_epcs_flash_controller_0+0xff7ff1cc>
  8081f4:	01400434 	movhi	r5,16
  8081f8:	297fffc4 	addi	r5,r5,-1
  8081fc:	28800236 	bltu	r5,r2,808208 <__fpclassifyd+0x60>
  808200:	008000c4 	movi	r2,3
  808204:	f800283a 	ret
  808208:	10c00226 	beq	r2,r3,808214 <__fpclassifyd+0x6c>
  80820c:	0005883a 	mov	r2,zero
  808210:	f800283a 	ret
  808214:	2005003a 	cmpeq	r2,r4,zero
  808218:	f800283a 	ret

0080821c <_sbrk_r>:
  80821c:	defffd04 	addi	sp,sp,-12
  808220:	dc000015 	stw	r16,0(sp)
  808224:	040020b4 	movhi	r16,130
  808228:	dc400115 	stw	r17,4(sp)
  80822c:	84321304 	addi	r16,r16,-14260
  808230:	2023883a 	mov	r17,r4
  808234:	2809883a 	mov	r4,r5
  808238:	dfc00215 	stw	ra,8(sp)
  80823c:	80000015 	stw	zero,0(r16)
  808240:	080e4600 	call	80e460 <sbrk>
  808244:	00ffffc4 	movi	r3,-1
  808248:	10c00526 	beq	r2,r3,808260 <_sbrk_r+0x44>
  80824c:	dfc00217 	ldw	ra,8(sp)
  808250:	dc400117 	ldw	r17,4(sp)
  808254:	dc000017 	ldw	r16,0(sp)
  808258:	dec00304 	addi	sp,sp,12
  80825c:	f800283a 	ret
  808260:	80c00017 	ldw	r3,0(r16)
  808264:	183ff926 	beq	r3,zero,80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>
  808268:	88c00015 	stw	r3,0(r17)
  80826c:	003ff706 	br	80824c <__alt_mem_epcs_flash_controller_0+0xff7ff24c>

00808270 <__sread>:
  808270:	defffe04 	addi	sp,sp,-8
  808274:	dc000015 	stw	r16,0(sp)
  808278:	2821883a 	mov	r16,r5
  80827c:	2940038f 	ldh	r5,14(r5)
  808280:	dfc00115 	stw	ra,4(sp)
  808284:	080a2840 	call	80a284 <_read_r>
  808288:	10000716 	blt	r2,zero,8082a8 <__sread+0x38>
  80828c:	80c01417 	ldw	r3,80(r16)
  808290:	1887883a 	add	r3,r3,r2
  808294:	80c01415 	stw	r3,80(r16)
  808298:	dfc00117 	ldw	ra,4(sp)
  80829c:	dc000017 	ldw	r16,0(sp)
  8082a0:	dec00204 	addi	sp,sp,8
  8082a4:	f800283a 	ret
  8082a8:	80c0030b 	ldhu	r3,12(r16)
  8082ac:	18fbffcc 	andi	r3,r3,61439
  8082b0:	80c0030d 	sth	r3,12(r16)
  8082b4:	dfc00117 	ldw	ra,4(sp)
  8082b8:	dc000017 	ldw	r16,0(sp)
  8082bc:	dec00204 	addi	sp,sp,8
  8082c0:	f800283a 	ret

008082c4 <__seofread>:
  8082c4:	0005883a 	mov	r2,zero
  8082c8:	f800283a 	ret

008082cc <__swrite>:
  8082cc:	2880030b 	ldhu	r2,12(r5)
  8082d0:	defffb04 	addi	sp,sp,-20
  8082d4:	dcc00315 	stw	r19,12(sp)
  8082d8:	dc800215 	stw	r18,8(sp)
  8082dc:	dc400115 	stw	r17,4(sp)
  8082e0:	dc000015 	stw	r16,0(sp)
  8082e4:	dfc00415 	stw	ra,16(sp)
  8082e8:	10c0400c 	andi	r3,r2,256
  8082ec:	2821883a 	mov	r16,r5
  8082f0:	2023883a 	mov	r17,r4
  8082f4:	3025883a 	mov	r18,r6
  8082f8:	3827883a 	mov	r19,r7
  8082fc:	18000526 	beq	r3,zero,808314 <__swrite+0x48>
  808300:	2940038f 	ldh	r5,14(r5)
  808304:	01c00084 	movi	r7,2
  808308:	000d883a 	mov	r6,zero
  80830c:	080a2240 	call	80a224 <_lseek_r>
  808310:	8080030b 	ldhu	r2,12(r16)
  808314:	8140038f 	ldh	r5,14(r16)
  808318:	10bbffcc 	andi	r2,r2,61439
  80831c:	980f883a 	mov	r7,r19
  808320:	900d883a 	mov	r6,r18
  808324:	8809883a 	mov	r4,r17
  808328:	8080030d 	sth	r2,12(r16)
  80832c:	dfc00417 	ldw	ra,16(sp)
  808330:	dcc00317 	ldw	r19,12(sp)
  808334:	dc800217 	ldw	r18,8(sp)
  808338:	dc400117 	ldw	r17,4(sp)
  80833c:	dc000017 	ldw	r16,0(sp)
  808340:	dec00504 	addi	sp,sp,20
  808344:	0809cd81 	jmpi	809cd8 <_write_r>

00808348 <__sseek>:
  808348:	defffe04 	addi	sp,sp,-8
  80834c:	dc000015 	stw	r16,0(sp)
  808350:	2821883a 	mov	r16,r5
  808354:	2940038f 	ldh	r5,14(r5)
  808358:	dfc00115 	stw	ra,4(sp)
  80835c:	080a2240 	call	80a224 <_lseek_r>
  808360:	00ffffc4 	movi	r3,-1
  808364:	10c00826 	beq	r2,r3,808388 <__sseek+0x40>
  808368:	80c0030b 	ldhu	r3,12(r16)
  80836c:	80801415 	stw	r2,80(r16)
  808370:	18c40014 	ori	r3,r3,4096
  808374:	80c0030d 	sth	r3,12(r16)
  808378:	dfc00117 	ldw	ra,4(sp)
  80837c:	dc000017 	ldw	r16,0(sp)
  808380:	dec00204 	addi	sp,sp,8
  808384:	f800283a 	ret
  808388:	80c0030b 	ldhu	r3,12(r16)
  80838c:	18fbffcc 	andi	r3,r3,61439
  808390:	80c0030d 	sth	r3,12(r16)
  808394:	dfc00117 	ldw	ra,4(sp)
  808398:	dc000017 	ldw	r16,0(sp)
  80839c:	dec00204 	addi	sp,sp,8
  8083a0:	f800283a 	ret

008083a4 <__sclose>:
  8083a4:	2940038f 	ldh	r5,14(r5)
  8083a8:	0809d381 	jmpi	809d38 <_close_r>

008083ac <strcmp>:
  8083ac:	2144b03a 	or	r2,r4,r5
  8083b0:	108000cc 	andi	r2,r2,3
  8083b4:	1000171e 	bne	r2,zero,808414 <strcmp+0x68>
  8083b8:	20800017 	ldw	r2,0(r4)
  8083bc:	28c00017 	ldw	r3,0(r5)
  8083c0:	10c0141e 	bne	r2,r3,808414 <strcmp+0x68>
  8083c4:	027fbff4 	movhi	r9,65279
  8083c8:	4a7fbfc4 	addi	r9,r9,-257
  8083cc:	0086303a 	nor	r3,zero,r2
  8083d0:	02202074 	movhi	r8,32897
  8083d4:	1245883a 	add	r2,r2,r9
  8083d8:	42202004 	addi	r8,r8,-32640
  8083dc:	10c4703a 	and	r2,r2,r3
  8083e0:	1204703a 	and	r2,r2,r8
  8083e4:	10000226 	beq	r2,zero,8083f0 <strcmp+0x44>
  8083e8:	00002306 	br	808478 <strcmp+0xcc>
  8083ec:	1000221e 	bne	r2,zero,808478 <strcmp+0xcc>
  8083f0:	21000104 	addi	r4,r4,4
  8083f4:	20c00017 	ldw	r3,0(r4)
  8083f8:	29400104 	addi	r5,r5,4
  8083fc:	29800017 	ldw	r6,0(r5)
  808400:	1a4f883a 	add	r7,r3,r9
  808404:	00c4303a 	nor	r2,zero,r3
  808408:	3884703a 	and	r2,r7,r2
  80840c:	1204703a 	and	r2,r2,r8
  808410:	19bff626 	beq	r3,r6,8083ec <__alt_mem_epcs_flash_controller_0+0xff7ff3ec>
  808414:	20800003 	ldbu	r2,0(r4)
  808418:	10c03fcc 	andi	r3,r2,255
  80841c:	18c0201c 	xori	r3,r3,128
  808420:	18ffe004 	addi	r3,r3,-128
  808424:	18000c26 	beq	r3,zero,808458 <strcmp+0xac>
  808428:	29800007 	ldb	r6,0(r5)
  80842c:	19800326 	beq	r3,r6,80843c <strcmp+0x90>
  808430:	00001306 	br	808480 <strcmp+0xd4>
  808434:	29800007 	ldb	r6,0(r5)
  808438:	11800b1e 	bne	r2,r6,808468 <strcmp+0xbc>
  80843c:	21000044 	addi	r4,r4,1
  808440:	20c00003 	ldbu	r3,0(r4)
  808444:	29400044 	addi	r5,r5,1
  808448:	18803fcc 	andi	r2,r3,255
  80844c:	1080201c 	xori	r2,r2,128
  808450:	10bfe004 	addi	r2,r2,-128
  808454:	103ff71e 	bne	r2,zero,808434 <__alt_mem_epcs_flash_controller_0+0xff7ff434>
  808458:	0007883a 	mov	r3,zero
  80845c:	28800003 	ldbu	r2,0(r5)
  808460:	1885c83a 	sub	r2,r3,r2
  808464:	f800283a 	ret
  808468:	28800003 	ldbu	r2,0(r5)
  80846c:	18c03fcc 	andi	r3,r3,255
  808470:	1885c83a 	sub	r2,r3,r2
  808474:	f800283a 	ret
  808478:	0005883a 	mov	r2,zero
  80847c:	f800283a 	ret
  808480:	10c03fcc 	andi	r3,r2,255
  808484:	003ff506 	br	80845c <__alt_mem_epcs_flash_controller_0+0xff7ff45c>

00808488 <__sprint_r.part.0>:
  808488:	28801917 	ldw	r2,100(r5)
  80848c:	defff604 	addi	sp,sp,-40
  808490:	dd400515 	stw	r21,20(sp)
  808494:	dfc00915 	stw	ra,36(sp)
  808498:	df000815 	stw	fp,32(sp)
  80849c:	ddc00715 	stw	r23,28(sp)
  8084a0:	dd800615 	stw	r22,24(sp)
  8084a4:	dd000415 	stw	r20,16(sp)
  8084a8:	dcc00315 	stw	r19,12(sp)
  8084ac:	dc800215 	stw	r18,8(sp)
  8084b0:	dc400115 	stw	r17,4(sp)
  8084b4:	dc000015 	stw	r16,0(sp)
  8084b8:	1088000c 	andi	r2,r2,8192
  8084bc:	302b883a 	mov	r21,r6
  8084c0:	10002e26 	beq	r2,zero,80857c <__sprint_r.part.0+0xf4>
  8084c4:	30800217 	ldw	r2,8(r6)
  8084c8:	35800017 	ldw	r22,0(r6)
  8084cc:	10002926 	beq	r2,zero,808574 <__sprint_r.part.0+0xec>
  8084d0:	2827883a 	mov	r19,r5
  8084d4:	2029883a 	mov	r20,r4
  8084d8:	b5c00104 	addi	r23,r22,4
  8084dc:	04bfffc4 	movi	r18,-1
  8084e0:	bc400017 	ldw	r17,0(r23)
  8084e4:	b4000017 	ldw	r16,0(r22)
  8084e8:	0039883a 	mov	fp,zero
  8084ec:	8822d0ba 	srli	r17,r17,2
  8084f0:	8800031e 	bne	r17,zero,808500 <__sprint_r.part.0+0x78>
  8084f4:	00001806 	br	808558 <__sprint_r.part.0+0xd0>
  8084f8:	84000104 	addi	r16,r16,4
  8084fc:	8f001526 	beq	r17,fp,808554 <__sprint_r.part.0+0xcc>
  808500:	81400017 	ldw	r5,0(r16)
  808504:	980d883a 	mov	r6,r19
  808508:	a009883a 	mov	r4,r20
  80850c:	080a0d00 	call	80a0d0 <_fputwc_r>
  808510:	e7000044 	addi	fp,fp,1
  808514:	14bff81e 	bne	r2,r18,8084f8 <__alt_mem_epcs_flash_controller_0+0xff7ff4f8>
  808518:	9005883a 	mov	r2,r18
  80851c:	a8000215 	stw	zero,8(r21)
  808520:	a8000115 	stw	zero,4(r21)
  808524:	dfc00917 	ldw	ra,36(sp)
  808528:	df000817 	ldw	fp,32(sp)
  80852c:	ddc00717 	ldw	r23,28(sp)
  808530:	dd800617 	ldw	r22,24(sp)
  808534:	dd400517 	ldw	r21,20(sp)
  808538:	dd000417 	ldw	r20,16(sp)
  80853c:	dcc00317 	ldw	r19,12(sp)
  808540:	dc800217 	ldw	r18,8(sp)
  808544:	dc400117 	ldw	r17,4(sp)
  808548:	dc000017 	ldw	r16,0(sp)
  80854c:	dec00a04 	addi	sp,sp,40
  808550:	f800283a 	ret
  808554:	a8800217 	ldw	r2,8(r21)
  808558:	8c63883a 	add	r17,r17,r17
  80855c:	8c63883a 	add	r17,r17,r17
  808560:	1445c83a 	sub	r2,r2,r17
  808564:	a8800215 	stw	r2,8(r21)
  808568:	b5800204 	addi	r22,r22,8
  80856c:	bdc00204 	addi	r23,r23,8
  808570:	103fdb1e 	bne	r2,zero,8084e0 <__alt_mem_epcs_flash_controller_0+0xff7ff4e0>
  808574:	0005883a 	mov	r2,zero
  808578:	003fe806 	br	80851c <__alt_mem_epcs_flash_controller_0+0xff7ff51c>
  80857c:	08054800 	call	805480 <__sfvwrite_r>
  808580:	003fe606 	br	80851c <__alt_mem_epcs_flash_controller_0+0xff7ff51c>

00808584 <__sprint_r>:
  808584:	30c00217 	ldw	r3,8(r6)
  808588:	18000126 	beq	r3,zero,808590 <__sprint_r+0xc>
  80858c:	08084881 	jmpi	808488 <__sprint_r.part.0>
  808590:	30000115 	stw	zero,4(r6)
  808594:	0005883a 	mov	r2,zero
  808598:	f800283a 	ret

0080859c <___vfiprintf_internal_r>:
  80859c:	deffca04 	addi	sp,sp,-216
  8085a0:	dd403115 	stw	r21,196(sp)
  8085a4:	dfc03515 	stw	ra,212(sp)
  8085a8:	df003415 	stw	fp,208(sp)
  8085ac:	ddc03315 	stw	r23,204(sp)
  8085b0:	dd803215 	stw	r22,200(sp)
  8085b4:	dd003015 	stw	r20,192(sp)
  8085b8:	dcc02f15 	stw	r19,188(sp)
  8085bc:	dc802e15 	stw	r18,184(sp)
  8085c0:	dc402d15 	stw	r17,180(sp)
  8085c4:	dc002c15 	stw	r16,176(sp)
  8085c8:	d9002115 	stw	r4,132(sp)
  8085cc:	d9402015 	stw	r5,128(sp)
  8085d0:	d9c02215 	stw	r7,136(sp)
  8085d4:	302b883a 	mov	r21,r6
  8085d8:	20000226 	beq	r4,zero,8085e4 <___vfiprintf_internal_r+0x48>
  8085dc:	20800e17 	ldw	r2,56(r4)
  8085e0:	1000cf26 	beq	r2,zero,808920 <___vfiprintf_internal_r+0x384>
  8085e4:	d8c02017 	ldw	r3,128(sp)
  8085e8:	1880030b 	ldhu	r2,12(r3)
  8085ec:	10c8000c 	andi	r3,r2,8192
  8085f0:	1800071e 	bne	r3,zero,808610 <___vfiprintf_internal_r+0x74>
  8085f4:	d9402017 	ldw	r5,128(sp)
  8085f8:	00f7ffc4 	movi	r3,-8193
  8085fc:	10880014 	ori	r2,r2,8192
  808600:	29001917 	ldw	r4,100(r5)
  808604:	2880030d 	sth	r2,12(r5)
  808608:	20c6703a 	and	r3,r4,r3
  80860c:	28c01915 	stw	r3,100(r5)
  808610:	10c0020c 	andi	r3,r2,8
  808614:	1800a526 	beq	r3,zero,8088ac <___vfiprintf_internal_r+0x310>
  808618:	d9002017 	ldw	r4,128(sp)
  80861c:	20c00417 	ldw	r3,16(r4)
  808620:	1800a226 	beq	r3,zero,8088ac <___vfiprintf_internal_r+0x310>
  808624:	1080068c 	andi	r2,r2,26
  808628:	00c00284 	movi	r3,10
  80862c:	10c0a826 	beq	r2,r3,8088d0 <___vfiprintf_internal_r+0x334>
  808630:	d9001a04 	addi	r4,sp,104
  808634:	d94019c4 	addi	r5,sp,103
  808638:	048020b4 	movhi	r18,130
  80863c:	2145c83a 	sub	r2,r4,r5
  808640:	94a9c104 	addi	r18,r18,-22780
  808644:	d9001e15 	stw	r4,120(sp)
  808648:	d9401f15 	stw	r5,124(sp)
  80864c:	dec01a15 	stw	sp,104(sp)
  808650:	d8001c15 	stw	zero,112(sp)
  808654:	d8001b15 	stw	zero,108(sp)
  808658:	d811883a 	mov	r8,sp
  80865c:	d8002615 	stw	zero,152(sp)
  808660:	d8002415 	stw	zero,144(sp)
  808664:	d8802815 	stw	r2,160(sp)
  808668:	a82d883a 	mov	r22,r21
  80866c:	b0800007 	ldb	r2,0(r22)
  808670:	10040d26 	beq	r2,zero,8096a8 <___vfiprintf_internal_r+0x110c>
  808674:	00c00944 	movi	r3,37
  808678:	b029883a 	mov	r20,r22
  80867c:	10c0021e 	bne	r2,r3,808688 <___vfiprintf_internal_r+0xec>
  808680:	00001606 	br	8086dc <___vfiprintf_internal_r+0x140>
  808684:	10c00326 	beq	r2,r3,808694 <___vfiprintf_internal_r+0xf8>
  808688:	a5000044 	addi	r20,r20,1
  80868c:	a0800007 	ldb	r2,0(r20)
  808690:	103ffc1e 	bne	r2,zero,808684 <__alt_mem_epcs_flash_controller_0+0xff7ff684>
  808694:	a5a1c83a 	sub	r16,r20,r22
  808698:	80001026 	beq	r16,zero,8086dc <___vfiprintf_internal_r+0x140>
  80869c:	d8c01c17 	ldw	r3,112(sp)
  8086a0:	d8801b17 	ldw	r2,108(sp)
  8086a4:	45800015 	stw	r22,0(r8)
  8086a8:	80c7883a 	add	r3,r16,r3
  8086ac:	10800044 	addi	r2,r2,1
  8086b0:	44000115 	stw	r16,4(r8)
  8086b4:	d8c01c15 	stw	r3,112(sp)
  8086b8:	d8801b15 	stw	r2,108(sp)
  8086bc:	010001c4 	movi	r4,7
  8086c0:	2080750e 	bge	r4,r2,808898 <___vfiprintf_internal_r+0x2fc>
  8086c4:	1803951e 	bne	r3,zero,80951c <___vfiprintf_internal_r+0xf80>
  8086c8:	d8c02417 	ldw	r3,144(sp)
  8086cc:	d8001b15 	stw	zero,108(sp)
  8086d0:	d811883a 	mov	r8,sp
  8086d4:	1c07883a 	add	r3,r3,r16
  8086d8:	d8c02415 	stw	r3,144(sp)
  8086dc:	a0800007 	ldb	r2,0(r20)
  8086e0:	1002e026 	beq	r2,zero,809264 <___vfiprintf_internal_r+0xcc8>
  8086e4:	a5800044 	addi	r22,r20,1
  8086e8:	a0c00047 	ldb	r3,1(r20)
  8086ec:	d8001d85 	stb	zero,118(sp)
  8086f0:	0027883a 	mov	r19,zero
  8086f4:	d8002305 	stb	zero,140(sp)
  8086f8:	043fffc4 	movi	r16,-1
  8086fc:	d8002515 	stw	zero,148(sp)
  808700:	0023883a 	mov	r17,zero
  808704:	05001604 	movi	r20,88
  808708:	05400244 	movi	r21,9
  80870c:	402f883a 	mov	r23,r8
  808710:	b5800044 	addi	r22,r22,1
  808714:	18bff804 	addi	r2,r3,-32
  808718:	a0827736 	bltu	r20,r2,8090f8 <___vfiprintf_internal_r+0xb5c>
  80871c:	100490ba 	slli	r2,r2,2
  808720:	01002074 	movhi	r4,129
  808724:	2121cd04 	addi	r4,r4,-30924
  808728:	1105883a 	add	r2,r2,r4
  80872c:	10800017 	ldw	r2,0(r2)
  808730:	1000683a 	jmp	r2
  808734:	00808df8 	rdprs	r2,zero,567
  808738:	008090f8 	rdprs	r2,zero,579
  80873c:	008090f8 	rdprs	r2,zero,579
  808740:	00808e14 	movui	r2,568
  808744:	008090f8 	rdprs	r2,zero,579
  808748:	008090f8 	rdprs	r2,zero,579
  80874c:	008090f8 	rdprs	r2,zero,579
  808750:	008090f8 	rdprs	r2,zero,579
  808754:	008090f8 	rdprs	r2,zero,579
  808758:	008090f8 	rdprs	r2,zero,579
  80875c:	0080901c 	xori	r2,zero,576
  808760:	00809040 	call	80904 <OSCtxSw_SWITCH_PC+0x808c4>
  808764:	008090f8 	rdprs	r2,zero,579
  808768:	00808938 	rdprs	r2,zero,548
  80876c:	00809054 	movui	r2,577
  808770:	008090f8 	rdprs	r2,zero,579
  808774:	00808e20 	cmpeqi	r2,zero,568
  808778:	00808e2c 	andhi	r2,zero,568
  80877c:	00808e2c 	andhi	r2,zero,568
  808780:	00808e2c 	andhi	r2,zero,568
  808784:	00808e2c 	andhi	r2,zero,568
  808788:	00808e2c 	andhi	r2,zero,568
  80878c:	00808e2c 	andhi	r2,zero,568
  808790:	00808e2c 	andhi	r2,zero,568
  808794:	00808e2c 	andhi	r2,zero,568
  808798:	00808e2c 	andhi	r2,zero,568
  80879c:	008090f8 	rdprs	r2,zero,579
  8087a0:	008090f8 	rdprs	r2,zero,579
  8087a4:	008090f8 	rdprs	r2,zero,579
  8087a8:	008090f8 	rdprs	r2,zero,579
  8087ac:	008090f8 	rdprs	r2,zero,579
  8087b0:	008090f8 	rdprs	r2,zero,579
  8087b4:	008090f8 	rdprs	r2,zero,579
  8087b8:	008090f8 	rdprs	r2,zero,579
  8087bc:	008090f8 	rdprs	r2,zero,579
  8087c0:	008090f8 	rdprs	r2,zero,579
  8087c4:	00808e6c 	andhi	r2,zero,569
  8087c8:	008090f8 	rdprs	r2,zero,579
  8087cc:	008090f8 	rdprs	r2,zero,579
  8087d0:	008090f8 	rdprs	r2,zero,579
  8087d4:	008090f8 	rdprs	r2,zero,579
  8087d8:	008090f8 	rdprs	r2,zero,579
  8087dc:	008090f8 	rdprs	r2,zero,579
  8087e0:	008090f8 	rdprs	r2,zero,579
  8087e4:	008090f8 	rdprs	r2,zero,579
  8087e8:	008090f8 	rdprs	r2,zero,579
  8087ec:	008090f8 	rdprs	r2,zero,579
  8087f0:	00808ea8 	cmpgeui	r2,zero,570
  8087f4:	008090f8 	rdprs	r2,zero,579
  8087f8:	008090f8 	rdprs	r2,zero,579
  8087fc:	008090f8 	rdprs	r2,zero,579
  808800:	008090f8 	rdprs	r2,zero,579
  808804:	008090f8 	rdprs	r2,zero,579
  808808:	00808f04 	movi	r2,572
  80880c:	008090f8 	rdprs	r2,zero,579
  808810:	008090f8 	rdprs	r2,zero,579
  808814:	00808f78 	rdprs	r2,zero,573
  808818:	008090f8 	rdprs	r2,zero,579
  80881c:	008090f8 	rdprs	r2,zero,579
  808820:	008090f8 	rdprs	r2,zero,579
  808824:	008090f8 	rdprs	r2,zero,579
  808828:	008090f8 	rdprs	r2,zero,579
  80882c:	008090f8 	rdprs	r2,zero,579
  808830:	008090f8 	rdprs	r2,zero,579
  808834:	008090f8 	rdprs	r2,zero,579
  808838:	008090f8 	rdprs	r2,zero,579
  80883c:	008090f8 	rdprs	r2,zero,579
  808840:	00808d20 	cmpeqi	r2,zero,564
  808844:	00808d50 	cmplti	r2,zero,565
  808848:	008090f8 	rdprs	r2,zero,579
  80884c:	008090f8 	rdprs	r2,zero,579
  808850:	008090f8 	rdprs	r2,zero,579
  808854:	008090a0 	cmpeqi	r2,zero,578
  808858:	00808d50 	cmplti	r2,zero,565
  80885c:	008090f8 	rdprs	r2,zero,579
  808860:	008090f8 	rdprs	r2,zero,579
  808864:	00808bf8 	rdprs	r2,zero,559
  808868:	008090f8 	rdprs	r2,zero,579
  80886c:	00808c0c 	andi	r2,zero,560
  808870:	00808c44 	movi	r2,561
  808874:	00808944 	movi	r2,549
  808878:	00808bec 	andhi	r2,zero,559
  80887c:	008090f8 	rdprs	r2,zero,579
  808880:	00808fb8 	rdprs	r2,zero,574
  808884:	008090f8 	rdprs	r2,zero,579
  808888:	00809004 	movi	r2,576
  80888c:	008090f8 	rdprs	r2,zero,579
  808890:	008090f8 	rdprs	r2,zero,579
  808894:	00808cc8 	cmpgei	r2,zero,563
  808898:	42000204 	addi	r8,r8,8
  80889c:	d8c02417 	ldw	r3,144(sp)
  8088a0:	1c07883a 	add	r3,r3,r16
  8088a4:	d8c02415 	stw	r3,144(sp)
  8088a8:	003f8c06 	br	8086dc <__alt_mem_epcs_flash_controller_0+0xff7ff6dc>
  8088ac:	d9402017 	ldw	r5,128(sp)
  8088b0:	d9002117 	ldw	r4,132(sp)
  8088b4:	0802ff00 	call	802ff0 <__swsetup_r>
  8088b8:	1003c11e 	bne	r2,zero,8097c0 <___vfiprintf_internal_r+0x1224>
  8088bc:	d9402017 	ldw	r5,128(sp)
  8088c0:	00c00284 	movi	r3,10
  8088c4:	2880030b 	ldhu	r2,12(r5)
  8088c8:	1080068c 	andi	r2,r2,26
  8088cc:	10ff581e 	bne	r2,r3,808630 <__alt_mem_epcs_flash_controller_0+0xff7ff630>
  8088d0:	d8c02017 	ldw	r3,128(sp)
  8088d4:	1880038f 	ldh	r2,14(r3)
  8088d8:	103f5516 	blt	r2,zero,808630 <__alt_mem_epcs_flash_controller_0+0xff7ff630>
  8088dc:	d9c02217 	ldw	r7,136(sp)
  8088e0:	d9002117 	ldw	r4,132(sp)
  8088e4:	a80d883a 	mov	r6,r21
  8088e8:	180b883a 	mov	r5,r3
  8088ec:	0809ac40 	call	809ac4 <__sbprintf>
  8088f0:	dfc03517 	ldw	ra,212(sp)
  8088f4:	df003417 	ldw	fp,208(sp)
  8088f8:	ddc03317 	ldw	r23,204(sp)
  8088fc:	dd803217 	ldw	r22,200(sp)
  808900:	dd403117 	ldw	r21,196(sp)
  808904:	dd003017 	ldw	r20,192(sp)
  808908:	dcc02f17 	ldw	r19,188(sp)
  80890c:	dc802e17 	ldw	r18,184(sp)
  808910:	dc402d17 	ldw	r17,180(sp)
  808914:	dc002c17 	ldw	r16,176(sp)
  808918:	dec03604 	addi	sp,sp,216
  80891c:	f800283a 	ret
  808920:	0804ffc0 	call	804ffc <__sinit>
  808924:	003f2f06 	br	8085e4 <__alt_mem_epcs_flash_controller_0+0xff7ff5e4>
  808928:	d8c02517 	ldw	r3,148(sp)
  80892c:	d8802215 	stw	r2,136(sp)
  808930:	00c7c83a 	sub	r3,zero,r3
  808934:	d8c02515 	stw	r3,148(sp)
  808938:	8c400114 	ori	r17,r17,4
  80893c:	b0c00007 	ldb	r3,0(r22)
  808940:	003f7306 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  808944:	00800c04 	movi	r2,48
  808948:	d9402217 	ldw	r5,136(sp)
  80894c:	d8801d05 	stb	r2,116(sp)
  808950:	00801e04 	movi	r2,120
  808954:	d8801d45 	stb	r2,117(sp)
  808958:	d8001d85 	stb	zero,118(sp)
  80895c:	b811883a 	mov	r8,r23
  808960:	28c00104 	addi	r3,r5,4
  808964:	2cc00017 	ldw	r19,0(r5)
  808968:	0029883a 	mov	r20,zero
  80896c:	88800094 	ori	r2,r17,2
  808970:	80032516 	blt	r16,zero,809608 <___vfiprintf_internal_r+0x106c>
  808974:	00bfdfc4 	movi	r2,-129
  808978:	88a2703a 	and	r17,r17,r2
  80897c:	d8c02215 	stw	r3,136(sp)
  808980:	8c400094 	ori	r17,r17,2
  808984:	98032a1e 	bne	r19,zero,809630 <___vfiprintf_internal_r+0x1094>
  808988:	008020b4 	movhi	r2,130
  80898c:	10a96004 	addi	r2,r2,-23168
  808990:	d8802615 	stw	r2,152(sp)
  808994:	002b883a 	mov	r21,zero
  808998:	8001741e 	bne	r16,zero,808f6c <___vfiprintf_internal_r+0x9d0>
  80899c:	0021883a 	mov	r16,zero
  8089a0:	0029883a 	mov	r20,zero
  8089a4:	ddc01a04 	addi	r23,sp,104
  8089a8:	8027883a 	mov	r19,r16
  8089ac:	8500010e 	bge	r16,r20,8089b4 <___vfiprintf_internal_r+0x418>
  8089b0:	a027883a 	mov	r19,r20
  8089b4:	ad403fcc 	andi	r21,r21,255
  8089b8:	ad40201c 	xori	r21,r21,128
  8089bc:	ad7fe004 	addi	r21,r21,-128
  8089c0:	a8000126 	beq	r21,zero,8089c8 <___vfiprintf_internal_r+0x42c>
  8089c4:	9cc00044 	addi	r19,r19,1
  8089c8:	89c0008c 	andi	r7,r17,2
  8089cc:	38000126 	beq	r7,zero,8089d4 <___vfiprintf_internal_r+0x438>
  8089d0:	9cc00084 	addi	r19,r19,2
  8089d4:	88c0210c 	andi	r3,r17,132
  8089d8:	1801dd1e 	bne	r3,zero,809150 <___vfiprintf_internal_r+0xbb4>
  8089dc:	d9402517 	ldw	r5,148(sp)
  8089e0:	2cebc83a 	sub	r21,r5,r19
  8089e4:	0541da0e 	bge	zero,r21,809150 <___vfiprintf_internal_r+0xbb4>
  8089e8:	07000404 	movi	fp,16
  8089ec:	d8801c17 	ldw	r2,112(sp)
  8089f0:	e543be0e 	bge	fp,r21,8098ec <___vfiprintf_internal_r+0x1350>
  8089f4:	014020b4 	movhi	r5,130
  8089f8:	2969c504 	addi	r5,r5,-22764
  8089fc:	dc002715 	stw	r16,156(sp)
  808a00:	d9801b17 	ldw	r6,108(sp)
  808a04:	a821883a 	mov	r16,r21
  808a08:	d9402315 	stw	r5,140(sp)
  808a0c:	028001c4 	movi	r10,7
  808a10:	d9c02915 	stw	r7,164(sp)
  808a14:	182b883a 	mov	r21,r3
  808a18:	00000506 	br	808a30 <___vfiprintf_internal_r+0x494>
  808a1c:	31000084 	addi	r4,r6,2
  808a20:	42000204 	addi	r8,r8,8
  808a24:	180d883a 	mov	r6,r3
  808a28:	843ffc04 	addi	r16,r16,-16
  808a2c:	e4000f0e 	bge	fp,r16,808a6c <___vfiprintf_internal_r+0x4d0>
  808a30:	010020b4 	movhi	r4,130
  808a34:	10800404 	addi	r2,r2,16
  808a38:	30c00044 	addi	r3,r6,1
  808a3c:	2129c504 	addi	r4,r4,-22764
  808a40:	41000015 	stw	r4,0(r8)
  808a44:	47000115 	stw	fp,4(r8)
  808a48:	d8801c15 	stw	r2,112(sp)
  808a4c:	d8c01b15 	stw	r3,108(sp)
  808a50:	50fff20e 	bge	r10,r3,808a1c <__alt_mem_epcs_flash_controller_0+0xff7ffa1c>
  808a54:	1001b21e 	bne	r2,zero,809120 <___vfiprintf_internal_r+0xb84>
  808a58:	843ffc04 	addi	r16,r16,-16
  808a5c:	000d883a 	mov	r6,zero
  808a60:	01000044 	movi	r4,1
  808a64:	d811883a 	mov	r8,sp
  808a68:	e43ff116 	blt	fp,r16,808a30 <__alt_mem_epcs_flash_controller_0+0xff7ffa30>
  808a6c:	a807883a 	mov	r3,r21
  808a70:	d9c02917 	ldw	r7,164(sp)
  808a74:	802b883a 	mov	r21,r16
  808a78:	dc002717 	ldw	r16,156(sp)
  808a7c:	d9402317 	ldw	r5,140(sp)
  808a80:	a885883a 	add	r2,r21,r2
  808a84:	45400115 	stw	r21,4(r8)
  808a88:	41400015 	stw	r5,0(r8)
  808a8c:	d8801c15 	stw	r2,112(sp)
  808a90:	d9001b15 	stw	r4,108(sp)
  808a94:	014001c4 	movi	r5,7
  808a98:	29026216 	blt	r5,r4,809424 <___vfiprintf_internal_r+0xe88>
  808a9c:	d9801d87 	ldb	r6,118(sp)
  808aa0:	42000204 	addi	r8,r8,8
  808aa4:	21400044 	addi	r5,r4,1
  808aa8:	3001ae1e 	bne	r6,zero,809164 <___vfiprintf_internal_r+0xbc8>
  808aac:	3801bb26 	beq	r7,zero,80919c <___vfiprintf_internal_r+0xc00>
  808ab0:	d9001d04 	addi	r4,sp,116
  808ab4:	10800084 	addi	r2,r2,2
  808ab8:	41000015 	stw	r4,0(r8)
  808abc:	01000084 	movi	r4,2
  808ac0:	41000115 	stw	r4,4(r8)
  808ac4:	d8801c15 	stw	r2,112(sp)
  808ac8:	d9401b15 	stw	r5,108(sp)
  808acc:	010001c4 	movi	r4,7
  808ad0:	2142680e 	bge	r4,r5,809474 <___vfiprintf_internal_r+0xed8>
  808ad4:	1002b11e 	bne	r2,zero,80959c <___vfiprintf_internal_r+0x1000>
  808ad8:	01802004 	movi	r6,128
  808adc:	01400044 	movi	r5,1
  808ae0:	0009883a 	mov	r4,zero
  808ae4:	d811883a 	mov	r8,sp
  808ae8:	1981ae1e 	bne	r3,r6,8091a4 <___vfiprintf_internal_r+0xc08>
  808aec:	d8c02517 	ldw	r3,148(sp)
  808af0:	1cf9c83a 	sub	fp,r3,r19
  808af4:	0701ab0e 	bge	zero,fp,8091a4 <___vfiprintf_internal_r+0xc08>
  808af8:	05400404 	movi	r21,16
  808afc:	af03a90e 	bge	r21,fp,8099a4 <___vfiprintf_internal_r+0x1408>
  808b00:	014020b4 	movhi	r5,130
  808b04:	2969c104 	addi	r5,r5,-22780
  808b08:	d9402315 	stw	r5,140(sp)
  808b0c:	01c001c4 	movi	r7,7
  808b10:	00000506 	br	808b28 <___vfiprintf_internal_r+0x58c>
  808b14:	21800084 	addi	r6,r4,2
  808b18:	42000204 	addi	r8,r8,8
  808b1c:	1809883a 	mov	r4,r3
  808b20:	e73ffc04 	addi	fp,fp,-16
  808b24:	af000d0e 	bge	r21,fp,808b5c <___vfiprintf_internal_r+0x5c0>
  808b28:	10800404 	addi	r2,r2,16
  808b2c:	20c00044 	addi	r3,r4,1
  808b30:	44800015 	stw	r18,0(r8)
  808b34:	45400115 	stw	r21,4(r8)
  808b38:	d8801c15 	stw	r2,112(sp)
  808b3c:	d8c01b15 	stw	r3,108(sp)
  808b40:	38fff40e 	bge	r7,r3,808b14 <__alt_mem_epcs_flash_controller_0+0xff7ffb14>
  808b44:	10022b1e 	bne	r2,zero,8093f4 <___vfiprintf_internal_r+0xe58>
  808b48:	e73ffc04 	addi	fp,fp,-16
  808b4c:	01800044 	movi	r6,1
  808b50:	0009883a 	mov	r4,zero
  808b54:	d811883a 	mov	r8,sp
  808b58:	af3ff316 	blt	r21,fp,808b28 <__alt_mem_epcs_flash_controller_0+0xff7ffb28>
  808b5c:	d8c02317 	ldw	r3,140(sp)
  808b60:	1705883a 	add	r2,r2,fp
  808b64:	47000115 	stw	fp,4(r8)
  808b68:	40c00015 	stw	r3,0(r8)
  808b6c:	d8801c15 	stw	r2,112(sp)
  808b70:	d9801b15 	stw	r6,108(sp)
  808b74:	00c001c4 	movi	r3,7
  808b78:	19829416 	blt	r3,r6,8095cc <___vfiprintf_internal_r+0x1030>
  808b7c:	8521c83a 	sub	r16,r16,r20
  808b80:	42000204 	addi	r8,r8,8
  808b84:	31400044 	addi	r5,r6,1
  808b88:	3009883a 	mov	r4,r6
  808b8c:	04018716 	blt	zero,r16,8091ac <___vfiprintf_internal_r+0xc10>
  808b90:	a085883a 	add	r2,r20,r2
  808b94:	45c00015 	stw	r23,0(r8)
  808b98:	45000115 	stw	r20,4(r8)
  808b9c:	d8801c15 	stw	r2,112(sp)
  808ba0:	d9401b15 	stw	r5,108(sp)
  808ba4:	00c001c4 	movi	r3,7
  808ba8:	1941c20e 	bge	r3,r5,8092b4 <___vfiprintf_internal_r+0xd18>
  808bac:	1002531e 	bne	r2,zero,8094fc <___vfiprintf_internal_r+0xf60>
  808bb0:	d8001b15 	stw	zero,108(sp)
  808bb4:	8c40010c 	andi	r17,r17,4
  808bb8:	88023226 	beq	r17,zero,809484 <___vfiprintf_internal_r+0xee8>
  808bbc:	d9002517 	ldw	r4,148(sp)
  808bc0:	24e3c83a 	sub	r17,r4,r19
  808bc4:	04432916 	blt	zero,r17,80986c <___vfiprintf_internal_r+0x12d0>
  808bc8:	d8802517 	ldw	r2,148(sp)
  808bcc:	14c0010e 	bge	r2,r19,808bd4 <___vfiprintf_internal_r+0x638>
  808bd0:	9805883a 	mov	r2,r19
  808bd4:	d8c02417 	ldw	r3,144(sp)
  808bd8:	1887883a 	add	r3,r3,r2
  808bdc:	d8c02415 	stw	r3,144(sp)
  808be0:	d8001b15 	stw	zero,108(sp)
  808be4:	d811883a 	mov	r8,sp
  808be8:	003ea006 	br	80866c <__alt_mem_epcs_flash_controller_0+0xff7ff66c>
  808bec:	8c400814 	ori	r17,r17,32
  808bf0:	b0c00007 	ldb	r3,0(r22)
  808bf4:	003ec606 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  808bf8:	b0c00007 	ldb	r3,0(r22)
  808bfc:	00801b04 	movi	r2,108
  808c00:	18832026 	beq	r3,r2,809884 <___vfiprintf_internal_r+0x12e8>
  808c04:	8c400414 	ori	r17,r17,16
  808c08:	003ec106 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  808c0c:	9cc03fcc 	andi	r19,r19,255
  808c10:	b811883a 	mov	r8,r23
  808c14:	9803981e 	bne	r19,zero,809a78 <___vfiprintf_internal_r+0x14dc>
  808c18:	8880080c 	andi	r2,r17,32
  808c1c:	1002be26 	beq	r2,zero,809718 <___vfiprintf_internal_r+0x117c>
  808c20:	d9002217 	ldw	r4,136(sp)
  808c24:	d9402417 	ldw	r5,144(sp)
  808c28:	20800017 	ldw	r2,0(r4)
  808c2c:	2807d7fa 	srai	r3,r5,31
  808c30:	21000104 	addi	r4,r4,4
  808c34:	d9002215 	stw	r4,136(sp)
  808c38:	11400015 	stw	r5,0(r2)
  808c3c:	10c00115 	stw	r3,4(r2)
  808c40:	003e8a06 	br	80866c <__alt_mem_epcs_flash_controller_0+0xff7ff66c>
  808c44:	9cc03fcc 	andi	r19,r19,255
  808c48:	b811883a 	mov	r8,r23
  808c4c:	9803871e 	bne	r19,zero,809a6c <___vfiprintf_internal_r+0x14d0>
  808c50:	8880080c 	andi	r2,r17,32
  808c54:	10009a26 	beq	r2,zero,808ec0 <___vfiprintf_internal_r+0x924>
  808c58:	d9002217 	ldw	r4,136(sp)
  808c5c:	d8001d85 	stb	zero,118(sp)
  808c60:	20800204 	addi	r2,r4,8
  808c64:	24c00017 	ldw	r19,0(r4)
  808c68:	25000117 	ldw	r20,4(r4)
  808c6c:	8002a416 	blt	r16,zero,809700 <___vfiprintf_internal_r+0x1164>
  808c70:	013fdfc4 	movi	r4,-129
  808c74:	9d06b03a 	or	r3,r19,r20
  808c78:	d8802215 	stw	r2,136(sp)
  808c7c:	8922703a 	and	r17,r17,r4
  808c80:	18009b26 	beq	r3,zero,808ef0 <___vfiprintf_internal_r+0x954>
  808c84:	002b883a 	mov	r21,zero
  808c88:	ddc01a04 	addi	r23,sp,104
  808c8c:	9806d0fa 	srli	r3,r19,3
  808c90:	a008977a 	slli	r4,r20,29
  808c94:	a028d0fa 	srli	r20,r20,3
  808c98:	9cc001cc 	andi	r19,r19,7
  808c9c:	98800c04 	addi	r2,r19,48
  808ca0:	bdffffc4 	addi	r23,r23,-1
  808ca4:	20e6b03a 	or	r19,r4,r3
  808ca8:	b8800005 	stb	r2,0(r23)
  808cac:	9d06b03a 	or	r3,r19,r20
  808cb0:	183ff61e 	bne	r3,zero,808c8c <__alt_mem_epcs_flash_controller_0+0xff7ffc8c>
  808cb4:	88c0004c 	andi	r3,r17,1
  808cb8:	18021f1e 	bne	r3,zero,809538 <___vfiprintf_internal_r+0xf9c>
  808cbc:	d9401e17 	ldw	r5,120(sp)
  808cc0:	2de9c83a 	sub	r20,r5,r23
  808cc4:	003f3806 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  808cc8:	9cc03fcc 	andi	r19,r19,255
  808ccc:	b811883a 	mov	r8,r23
  808cd0:	98034f1e 	bne	r19,zero,809a10 <___vfiprintf_internal_r+0x1474>
  808cd4:	008020b4 	movhi	r2,130
  808cd8:	10a96004 	addi	r2,r2,-23168
  808cdc:	d8802615 	stw	r2,152(sp)
  808ce0:	8880080c 	andi	r2,r17,32
  808ce4:	1000ac26 	beq	r2,zero,808f98 <___vfiprintf_internal_r+0x9fc>
  808ce8:	d9002217 	ldw	r4,136(sp)
  808cec:	24c00017 	ldw	r19,0(r4)
  808cf0:	25000117 	ldw	r20,4(r4)
  808cf4:	21000204 	addi	r4,r4,8
  808cf8:	d9002215 	stw	r4,136(sp)
  808cfc:	8880004c 	andi	r2,r17,1
  808d00:	1001e726 	beq	r2,zero,8094a0 <___vfiprintf_internal_r+0xf04>
  808d04:	9d04b03a 	or	r2,r19,r20
  808d08:	10025c1e 	bne	r2,zero,80967c <___vfiprintf_internal_r+0x10e0>
  808d0c:	d8001d85 	stb	zero,118(sp)
  808d10:	80024416 	blt	r16,zero,809624 <___vfiprintf_internal_r+0x1088>
  808d14:	00bfdfc4 	movi	r2,-129
  808d18:	88a2703a 	and	r17,r17,r2
  808d1c:	003f1d06 	br	808994 <__alt_mem_epcs_flash_controller_0+0xff7ff994>
  808d20:	d8c02217 	ldw	r3,136(sp)
  808d24:	04c00044 	movi	r19,1
  808d28:	b811883a 	mov	r8,r23
  808d2c:	18800017 	ldw	r2,0(r3)
  808d30:	18c00104 	addi	r3,r3,4
  808d34:	d8001d85 	stb	zero,118(sp)
  808d38:	d8801005 	stb	r2,64(sp)
  808d3c:	d8c02215 	stw	r3,136(sp)
  808d40:	9829883a 	mov	r20,r19
  808d44:	ddc01004 	addi	r23,sp,64
  808d48:	0021883a 	mov	r16,zero
  808d4c:	003f1e06 	br	8089c8 <__alt_mem_epcs_flash_controller_0+0xff7ff9c8>
  808d50:	9cc03fcc 	andi	r19,r19,255
  808d54:	b811883a 	mov	r8,r23
  808d58:	9803331e 	bne	r19,zero,809a28 <___vfiprintf_internal_r+0x148c>
  808d5c:	8880080c 	andi	r2,r17,32
  808d60:	10004826 	beq	r2,zero,808e84 <___vfiprintf_internal_r+0x8e8>
  808d64:	d9002217 	ldw	r4,136(sp)
  808d68:	20800117 	ldw	r2,4(r4)
  808d6c:	24c00017 	ldw	r19,0(r4)
  808d70:	21000204 	addi	r4,r4,8
  808d74:	d9002215 	stw	r4,136(sp)
  808d78:	1029883a 	mov	r20,r2
  808d7c:	10024c16 	blt	r2,zero,8096b0 <___vfiprintf_internal_r+0x1114>
  808d80:	dd401d83 	ldbu	r21,118(sp)
  808d84:	80007116 	blt	r16,zero,808f4c <___vfiprintf_internal_r+0x9b0>
  808d88:	00ffdfc4 	movi	r3,-129
  808d8c:	9d04b03a 	or	r2,r19,r20
  808d90:	88e2703a 	and	r17,r17,r3
  808d94:	1000d126 	beq	r2,zero,8090dc <___vfiprintf_internal_r+0xb40>
  808d98:	a0023526 	beq	r20,zero,809670 <___vfiprintf_internal_r+0x10d4>
  808d9c:	ddc01a04 	addi	r23,sp,104
  808da0:	4039883a 	mov	fp,r8
  808da4:	9809883a 	mov	r4,r19
  808da8:	a00b883a 	mov	r5,r20
  808dac:	01800284 	movi	r6,10
  808db0:	000f883a 	mov	r7,zero
  808db4:	080aac80 	call	80aac8 <__umoddi3>
  808db8:	10800c04 	addi	r2,r2,48
  808dbc:	bdffffc4 	addi	r23,r23,-1
  808dc0:	9809883a 	mov	r4,r19
  808dc4:	a00b883a 	mov	r5,r20
  808dc8:	b8800005 	stb	r2,0(r23)
  808dcc:	01800284 	movi	r6,10
  808dd0:	000f883a 	mov	r7,zero
  808dd4:	080a4cc0 	call	80a4cc <__udivdi3>
  808dd8:	1027883a 	mov	r19,r2
  808ddc:	10c4b03a 	or	r2,r2,r3
  808de0:	1829883a 	mov	r20,r3
  808de4:	103fef1e 	bne	r2,zero,808da4 <__alt_mem_epcs_flash_controller_0+0xff7ffda4>
  808de8:	d9001e17 	ldw	r4,120(sp)
  808dec:	e011883a 	mov	r8,fp
  808df0:	25e9c83a 	sub	r20,r4,r23
  808df4:	003eec06 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  808df8:	d8802307 	ldb	r2,140(sp)
  808dfc:	1002361e 	bne	r2,zero,8096d8 <___vfiprintf_internal_r+0x113c>
  808e00:	00c00804 	movi	r3,32
  808e04:	d8c02305 	stb	r3,140(sp)
  808e08:	04c00044 	movi	r19,1
  808e0c:	b0c00007 	ldb	r3,0(r22)
  808e10:	003e3f06 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  808e14:	8c400054 	ori	r17,r17,1
  808e18:	b0c00007 	ldb	r3,0(r22)
  808e1c:	003e3c06 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  808e20:	8c402014 	ori	r17,r17,128
  808e24:	b0c00007 	ldb	r3,0(r22)
  808e28:	003e3906 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  808e2c:	dc002715 	stw	r16,156(sp)
  808e30:	d8002515 	stw	zero,148(sp)
  808e34:	1f3ff404 	addi	fp,r3,-48
  808e38:	0009883a 	mov	r4,zero
  808e3c:	b021883a 	mov	r16,r22
  808e40:	01400284 	movi	r5,10
  808e44:	080b2400 	call	80b240 <__mulsi3>
  808e48:	80c00007 	ldb	r3,0(r16)
  808e4c:	e089883a 	add	r4,fp,r2
  808e50:	b5800044 	addi	r22,r22,1
  808e54:	1f3ff404 	addi	fp,r3,-48
  808e58:	b021883a 	mov	r16,r22
  808e5c:	af3ff82e 	bgeu	r21,fp,808e40 <__alt_mem_epcs_flash_controller_0+0xff7ffe40>
  808e60:	d9002515 	stw	r4,148(sp)
  808e64:	dc002717 	ldw	r16,156(sp)
  808e68:	003e2a06 	br	808714 <__alt_mem_epcs_flash_controller_0+0xff7ff714>
  808e6c:	9cc03fcc 	andi	r19,r19,255
  808e70:	b811883a 	mov	r8,r23
  808e74:	9802e91e 	bne	r19,zero,809a1c <___vfiprintf_internal_r+0x1480>
  808e78:	8c400414 	ori	r17,r17,16
  808e7c:	8880080c 	andi	r2,r17,32
  808e80:	103fb81e 	bne	r2,zero,808d64 <__alt_mem_epcs_flash_controller_0+0xff7ffd64>
  808e84:	8880040c 	andi	r2,r17,16
  808e88:	10022e26 	beq	r2,zero,809744 <___vfiprintf_internal_r+0x11a8>
  808e8c:	d9402217 	ldw	r5,136(sp)
  808e90:	2cc00017 	ldw	r19,0(r5)
  808e94:	29400104 	addi	r5,r5,4
  808e98:	d9402215 	stw	r5,136(sp)
  808e9c:	9829d7fa 	srai	r20,r19,31
  808ea0:	a005883a 	mov	r2,r20
  808ea4:	003fb506 	br	808d7c <__alt_mem_epcs_flash_controller_0+0xff7ffd7c>
  808ea8:	9cc03fcc 	andi	r19,r19,255
  808eac:	b811883a 	mov	r8,r23
  808eb0:	9802fa1e 	bne	r19,zero,809a9c <___vfiprintf_internal_r+0x1500>
  808eb4:	8c400414 	ori	r17,r17,16
  808eb8:	8880080c 	andi	r2,r17,32
  808ebc:	103f661e 	bne	r2,zero,808c58 <__alt_mem_epcs_flash_controller_0+0xff7ffc58>
  808ec0:	8880040c 	andi	r2,r17,16
  808ec4:	10020626 	beq	r2,zero,8096e0 <___vfiprintf_internal_r+0x1144>
  808ec8:	d9402217 	ldw	r5,136(sp)
  808ecc:	d8001d85 	stb	zero,118(sp)
  808ed0:	0029883a 	mov	r20,zero
  808ed4:	28800104 	addi	r2,r5,4
  808ed8:	2cc00017 	ldw	r19,0(r5)
  808edc:	80020816 	blt	r16,zero,809700 <___vfiprintf_internal_r+0x1164>
  808ee0:	00ffdfc4 	movi	r3,-129
  808ee4:	d8802215 	stw	r2,136(sp)
  808ee8:	88e2703a 	and	r17,r17,r3
  808eec:	983f651e 	bne	r19,zero,808c84 <__alt_mem_epcs_flash_controller_0+0xff7ffc84>
  808ef0:	002b883a 	mov	r21,zero
  808ef4:	8002cf26 	beq	r16,zero,809a34 <___vfiprintf_internal_r+0x1498>
  808ef8:	0027883a 	mov	r19,zero
  808efc:	0029883a 	mov	r20,zero
  808f00:	003f6106 	br	808c88 <__alt_mem_epcs_flash_controller_0+0xff7ffc88>
  808f04:	9cc03fcc 	andi	r19,r19,255
  808f08:	b811883a 	mov	r8,r23
  808f0c:	9802e01e 	bne	r19,zero,809a90 <___vfiprintf_internal_r+0x14f4>
  808f10:	8c400414 	ori	r17,r17,16
  808f14:	8880080c 	andi	r2,r17,32
  808f18:	1000641e 	bne	r2,zero,8090ac <___vfiprintf_internal_r+0xb10>
  808f1c:	8880040c 	andi	r2,r17,16
  808f20:	1001c81e 	bne	r2,zero,809644 <___vfiprintf_internal_r+0x10a8>
  808f24:	8880100c 	andi	r2,r17,64
  808f28:	d8001d85 	stb	zero,118(sp)
  808f2c:	1002281e 	bne	r2,zero,8097d0 <___vfiprintf_internal_r+0x1234>
  808f30:	d9002217 	ldw	r4,136(sp)
  808f34:	0029883a 	mov	r20,zero
  808f38:	20800104 	addi	r2,r4,4
  808f3c:	24c00017 	ldw	r19,0(r4)
  808f40:	8001c60e 	bge	r16,zero,80965c <___vfiprintf_internal_r+0x10c0>
  808f44:	d8802215 	stw	r2,136(sp)
  808f48:	002b883a 	mov	r21,zero
  808f4c:	9d04b03a 	or	r2,r19,r20
  808f50:	103f911e 	bne	r2,zero,808d98 <__alt_mem_epcs_flash_controller_0+0xff7ffd98>
  808f54:	00800044 	movi	r2,1
  808f58:	10803fcc 	andi	r2,r2,255
  808f5c:	00c00044 	movi	r3,1
  808f60:	10c05f26 	beq	r2,r3,8090e0 <___vfiprintf_internal_r+0xb44>
  808f64:	00c00084 	movi	r3,2
  808f68:	10ffe31e 	bne	r2,r3,808ef8 <__alt_mem_epcs_flash_controller_0+0xff7ffef8>
  808f6c:	0027883a 	mov	r19,zero
  808f70:	0029883a 	mov	r20,zero
  808f74:	00015106 	br	8094bc <___vfiprintf_internal_r+0xf20>
  808f78:	9cc03fcc 	andi	r19,r19,255
  808f7c:	b811883a 	mov	r8,r23
  808f80:	9802c01e 	bne	r19,zero,809a84 <___vfiprintf_internal_r+0x14e8>
  808f84:	014020b4 	movhi	r5,130
  808f88:	29695b04 	addi	r5,r5,-23188
  808f8c:	d9402615 	stw	r5,152(sp)
  808f90:	8880080c 	andi	r2,r17,32
  808f94:	103f541e 	bne	r2,zero,808ce8 <__alt_mem_epcs_flash_controller_0+0xff7ffce8>
  808f98:	8880040c 	andi	r2,r17,16
  808f9c:	1001f226 	beq	r2,zero,809768 <___vfiprintf_internal_r+0x11cc>
  808fa0:	d9402217 	ldw	r5,136(sp)
  808fa4:	0029883a 	mov	r20,zero
  808fa8:	2cc00017 	ldw	r19,0(r5)
  808fac:	29400104 	addi	r5,r5,4
  808fb0:	d9402215 	stw	r5,136(sp)
  808fb4:	003f5106 	br	808cfc <__alt_mem_epcs_flash_controller_0+0xff7ffcfc>
  808fb8:	d8c02217 	ldw	r3,136(sp)
  808fbc:	b811883a 	mov	r8,r23
  808fc0:	d8001d85 	stb	zero,118(sp)
  808fc4:	1dc00017 	ldw	r23,0(r3)
  808fc8:	1f000104 	addi	fp,r3,4
  808fcc:	b8025926 	beq	r23,zero,809934 <___vfiprintf_internal_r+0x1398>
  808fd0:	80023316 	blt	r16,zero,8098a0 <___vfiprintf_internal_r+0x1304>
  808fd4:	800d883a 	mov	r6,r16
  808fd8:	000b883a 	mov	r5,zero
  808fdc:	b809883a 	mov	r4,r23
  808fe0:	da002a15 	stw	r8,168(sp)
  808fe4:	08065740 	call	806574 <memchr>
  808fe8:	da002a17 	ldw	r8,168(sp)
  808fec:	10026826 	beq	r2,zero,809990 <___vfiprintf_internal_r+0x13f4>
  808ff0:	15e9c83a 	sub	r20,r2,r23
  808ff4:	dd401d83 	ldbu	r21,118(sp)
  808ff8:	df002215 	stw	fp,136(sp)
  808ffc:	0021883a 	mov	r16,zero
  809000:	003e6906 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  809004:	9cc03fcc 	andi	r19,r19,255
  809008:	b811883a 	mov	r8,r23
  80900c:	983fc126 	beq	r19,zero,808f14 <__alt_mem_epcs_flash_controller_0+0xff7fff14>
  809010:	d8c02303 	ldbu	r3,140(sp)
  809014:	d8c01d85 	stb	r3,118(sp)
  809018:	003fbe06 	br	808f14 <__alt_mem_epcs_flash_controller_0+0xff7fff14>
  80901c:	d9002217 	ldw	r4,136(sp)
  809020:	d9402217 	ldw	r5,136(sp)
  809024:	21000017 	ldw	r4,0(r4)
  809028:	28800104 	addi	r2,r5,4
  80902c:	d9002515 	stw	r4,148(sp)
  809030:	203e3d16 	blt	r4,zero,808928 <__alt_mem_epcs_flash_controller_0+0xff7ff928>
  809034:	d8802215 	stw	r2,136(sp)
  809038:	b0c00007 	ldb	r3,0(r22)
  80903c:	003db406 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  809040:	00c00ac4 	movi	r3,43
  809044:	d8c02305 	stb	r3,140(sp)
  809048:	04c00044 	movi	r19,1
  80904c:	b0c00007 	ldb	r3,0(r22)
  809050:	003daf06 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  809054:	b0c00007 	ldb	r3,0(r22)
  809058:	01000a84 	movi	r4,42
  80905c:	b4000044 	addi	r16,r22,1
  809060:	19025e26 	beq	r3,r4,8099dc <___vfiprintf_internal_r+0x1440>
  809064:	1f3ff404 	addi	fp,r3,-48
  809068:	0009883a 	mov	r4,zero
  80906c:	af025236 	bltu	r21,fp,8099b8 <___vfiprintf_internal_r+0x141c>
  809070:	01400284 	movi	r5,10
  809074:	080b2400 	call	80b240 <__mulsi3>
  809078:	80c00007 	ldb	r3,0(r16)
  80907c:	1709883a 	add	r4,r2,fp
  809080:	85800044 	addi	r22,r16,1
  809084:	1f3ff404 	addi	fp,r3,-48
  809088:	b021883a 	mov	r16,r22
  80908c:	af3ff82e 	bgeu	r21,fp,809070 <__alt_mem_epcs_flash_controller_0+0xff800070>
  809090:	2021883a 	mov	r16,r4
  809094:	203d9f0e 	bge	r4,zero,808714 <__alt_mem_epcs_flash_controller_0+0xff7ff714>
  809098:	043fffc4 	movi	r16,-1
  80909c:	003d9d06 	br	808714 <__alt_mem_epcs_flash_controller_0+0xff7ff714>
  8090a0:	8c401014 	ori	r17,r17,64
  8090a4:	b0c00007 	ldb	r3,0(r22)
  8090a8:	003d9906 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  8090ac:	d9002217 	ldw	r4,136(sp)
  8090b0:	d8001d85 	stb	zero,118(sp)
  8090b4:	20c00204 	addi	r3,r4,8
  8090b8:	24c00017 	ldw	r19,0(r4)
  8090bc:	25000117 	ldw	r20,4(r4)
  8090c0:	8001e716 	blt	r16,zero,809860 <___vfiprintf_internal_r+0x12c4>
  8090c4:	013fdfc4 	movi	r4,-129
  8090c8:	9d04b03a 	or	r2,r19,r20
  8090cc:	d8c02215 	stw	r3,136(sp)
  8090d0:	8922703a 	and	r17,r17,r4
  8090d4:	002b883a 	mov	r21,zero
  8090d8:	103f2f1e 	bne	r2,zero,808d98 <__alt_mem_epcs_flash_controller_0+0xff7ffd98>
  8090dc:	803e2f26 	beq	r16,zero,80899c <__alt_mem_epcs_flash_controller_0+0xff7ff99c>
  8090e0:	0027883a 	mov	r19,zero
  8090e4:	9cc00c04 	addi	r19,r19,48
  8090e8:	dcc019c5 	stb	r19,103(sp)
  8090ec:	dd002817 	ldw	r20,160(sp)
  8090f0:	ddc019c4 	addi	r23,sp,103
  8090f4:	003e2c06 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  8090f8:	9cc03fcc 	andi	r19,r19,255
  8090fc:	b811883a 	mov	r8,r23
  809100:	9802571e 	bne	r19,zero,809a60 <___vfiprintf_internal_r+0x14c4>
  809104:	18005726 	beq	r3,zero,809264 <___vfiprintf_internal_r+0xcc8>
  809108:	04c00044 	movi	r19,1
  80910c:	d8c01005 	stb	r3,64(sp)
  809110:	d8001d85 	stb	zero,118(sp)
  809114:	9829883a 	mov	r20,r19
  809118:	ddc01004 	addi	r23,sp,64
  80911c:	003f0a06 	br	808d48 <__alt_mem_epcs_flash_controller_0+0xff7ffd48>
  809120:	d9402017 	ldw	r5,128(sp)
  809124:	d9002117 	ldw	r4,132(sp)
  809128:	d9801a04 	addi	r6,sp,104
  80912c:	da802a15 	stw	r10,168(sp)
  809130:	08084880 	call	808488 <__sprint_r.part.0>
  809134:	da802a17 	ldw	r10,168(sp)
  809138:	1000501e 	bne	r2,zero,80927c <___vfiprintf_internal_r+0xce0>
  80913c:	d9801b17 	ldw	r6,108(sp)
  809140:	d8801c17 	ldw	r2,112(sp)
  809144:	d811883a 	mov	r8,sp
  809148:	31000044 	addi	r4,r6,1
  80914c:	003e3606 	br	808a28 <__alt_mem_epcs_flash_controller_0+0xff7ffa28>
  809150:	d9001b17 	ldw	r4,108(sp)
  809154:	d8801c17 	ldw	r2,112(sp)
  809158:	21400044 	addi	r5,r4,1
  80915c:	d9801d87 	ldb	r6,118(sp)
  809160:	303e5226 	beq	r6,zero,808aac <__alt_mem_epcs_flash_controller_0+0xff7ffaac>
  809164:	01800044 	movi	r6,1
  809168:	d9001d84 	addi	r4,sp,118
  80916c:	1185883a 	add	r2,r2,r6
  809170:	41000015 	stw	r4,0(r8)
  809174:	41800115 	stw	r6,4(r8)
  809178:	d8801c15 	stw	r2,112(sp)
  80917c:	d9401b15 	stw	r5,108(sp)
  809180:	010001c4 	movi	r4,7
  809184:	2140b00e 	bge	r4,r5,809448 <___vfiprintf_internal_r+0xeac>
  809188:	1000f61e 	bne	r2,zero,809564 <___vfiprintf_internal_r+0xfc8>
  80918c:	3800b31e 	bne	r7,zero,80945c <___vfiprintf_internal_r+0xec0>
  809190:	0009883a 	mov	r4,zero
  809194:	300b883a 	mov	r5,r6
  809198:	d811883a 	mov	r8,sp
  80919c:	01802004 	movi	r6,128
  8091a0:	19be5226 	beq	r3,r6,808aec <__alt_mem_epcs_flash_controller_0+0xff7ffaec>
  8091a4:	8521c83a 	sub	r16,r16,r20
  8091a8:	043e790e 	bge	zero,r16,808b90 <__alt_mem_epcs_flash_controller_0+0xff7ffb90>
  8091ac:	05400404 	movi	r21,16
  8091b0:	ac01b00e 	bge	r21,r16,809874 <___vfiprintf_internal_r+0x12d8>
  8091b4:	014020b4 	movhi	r5,130
  8091b8:	2969c104 	addi	r5,r5,-22780
  8091bc:	d9402315 	stw	r5,140(sp)
  8091c0:	070001c4 	movi	fp,7
  8091c4:	00000506 	br	8091dc <___vfiprintf_internal_r+0xc40>
  8091c8:	21400084 	addi	r5,r4,2
  8091cc:	42000204 	addi	r8,r8,8
  8091d0:	1809883a 	mov	r4,r3
  8091d4:	843ffc04 	addi	r16,r16,-16
  8091d8:	ac000d0e 	bge	r21,r16,809210 <___vfiprintf_internal_r+0xc74>
  8091dc:	10800404 	addi	r2,r2,16
  8091e0:	20c00044 	addi	r3,r4,1
  8091e4:	44800015 	stw	r18,0(r8)
  8091e8:	45400115 	stw	r21,4(r8)
  8091ec:	d8801c15 	stw	r2,112(sp)
  8091f0:	d8c01b15 	stw	r3,108(sp)
  8091f4:	e0fff40e 	bge	fp,r3,8091c8 <__alt_mem_epcs_flash_controller_0+0xff8001c8>
  8091f8:	1000101e 	bne	r2,zero,80923c <___vfiprintf_internal_r+0xca0>
  8091fc:	843ffc04 	addi	r16,r16,-16
  809200:	01400044 	movi	r5,1
  809204:	0009883a 	mov	r4,zero
  809208:	d811883a 	mov	r8,sp
  80920c:	ac3ff316 	blt	r21,r16,8091dc <__alt_mem_epcs_flash_controller_0+0xff8001dc>
  809210:	d8c02317 	ldw	r3,140(sp)
  809214:	1405883a 	add	r2,r2,r16
  809218:	44000115 	stw	r16,4(r8)
  80921c:	40c00015 	stw	r3,0(r8)
  809220:	d8801c15 	stw	r2,112(sp)
  809224:	d9401b15 	stw	r5,108(sp)
  809228:	00c001c4 	movi	r3,7
  80922c:	19401916 	blt	r3,r5,809294 <___vfiprintf_internal_r+0xcf8>
  809230:	42000204 	addi	r8,r8,8
  809234:	29400044 	addi	r5,r5,1
  809238:	003e5506 	br	808b90 <__alt_mem_epcs_flash_controller_0+0xff7ffb90>
  80923c:	d9402017 	ldw	r5,128(sp)
  809240:	d9002117 	ldw	r4,132(sp)
  809244:	d9801a04 	addi	r6,sp,104
  809248:	08084880 	call	808488 <__sprint_r.part.0>
  80924c:	10000b1e 	bne	r2,zero,80927c <___vfiprintf_internal_r+0xce0>
  809250:	d9001b17 	ldw	r4,108(sp)
  809254:	d8801c17 	ldw	r2,112(sp)
  809258:	d811883a 	mov	r8,sp
  80925c:	21400044 	addi	r5,r4,1
  809260:	003fdc06 	br	8091d4 <__alt_mem_epcs_flash_controller_0+0xff8001d4>
  809264:	d8801c17 	ldw	r2,112(sp)
  809268:	10000426 	beq	r2,zero,80927c <___vfiprintf_internal_r+0xce0>
  80926c:	d9402017 	ldw	r5,128(sp)
  809270:	d9002117 	ldw	r4,132(sp)
  809274:	d9801a04 	addi	r6,sp,104
  809278:	08084880 	call	808488 <__sprint_r.part.0>
  80927c:	d9402017 	ldw	r5,128(sp)
  809280:	2880030b 	ldhu	r2,12(r5)
  809284:	1080100c 	andi	r2,r2,64
  809288:	10014d1e 	bne	r2,zero,8097c0 <___vfiprintf_internal_r+0x1224>
  80928c:	d8802417 	ldw	r2,144(sp)
  809290:	003d9706 	br	8088f0 <__alt_mem_epcs_flash_controller_0+0xff7ff8f0>
  809294:	1000d21e 	bne	r2,zero,8095e0 <___vfiprintf_internal_r+0x1044>
  809298:	00c00044 	movi	r3,1
  80929c:	a005883a 	mov	r2,r20
  8092a0:	ddc00015 	stw	r23,0(sp)
  8092a4:	dd000115 	stw	r20,4(sp)
  8092a8:	dd001c15 	stw	r20,112(sp)
  8092ac:	d8c01b15 	stw	r3,108(sp)
  8092b0:	d811883a 	mov	r8,sp
  8092b4:	42000204 	addi	r8,r8,8
  8092b8:	8c40010c 	andi	r17,r17,4
  8092bc:	88004026 	beq	r17,zero,8093c0 <___vfiprintf_internal_r+0xe24>
  8092c0:	d9002517 	ldw	r4,148(sp)
  8092c4:	24e3c83a 	sub	r17,r4,r19
  8092c8:	04403d0e 	bge	zero,r17,8093c0 <___vfiprintf_internal_r+0xe24>
  8092cc:	04000404 	movi	r16,16
  8092d0:	8441a90e 	bge	r16,r17,809978 <___vfiprintf_internal_r+0x13dc>
  8092d4:	00c020b4 	movhi	r3,130
  8092d8:	18e9c504 	addi	r3,r3,-22764
  8092dc:	d9001b17 	ldw	r4,108(sp)
  8092e0:	d8c02315 	stw	r3,140(sp)
  8092e4:	050001c4 	movi	r20,7
  8092e8:	dd402117 	ldw	r21,132(sp)
  8092ec:	ddc02017 	ldw	r23,128(sp)
  8092f0:	00000506 	br	809308 <___vfiprintf_internal_r+0xd6c>
  8092f4:	21400084 	addi	r5,r4,2
  8092f8:	42000204 	addi	r8,r8,8
  8092fc:	1809883a 	mov	r4,r3
  809300:	8c7ffc04 	addi	r17,r17,-16
  809304:	84400f0e 	bge	r16,r17,809344 <___vfiprintf_internal_r+0xda8>
  809308:	014020b4 	movhi	r5,130
  80930c:	10800404 	addi	r2,r2,16
  809310:	20c00044 	addi	r3,r4,1
  809314:	2969c504 	addi	r5,r5,-22764
  809318:	41400015 	stw	r5,0(r8)
  80931c:	44000115 	stw	r16,4(r8)
  809320:	d8801c15 	stw	r2,112(sp)
  809324:	d8c01b15 	stw	r3,108(sp)
  809328:	a0fff20e 	bge	r20,r3,8092f4 <__alt_mem_epcs_flash_controller_0+0xff8002f4>
  80932c:	1000141e 	bne	r2,zero,809380 <___vfiprintf_internal_r+0xde4>
  809330:	8c7ffc04 	addi	r17,r17,-16
  809334:	01400044 	movi	r5,1
  809338:	0009883a 	mov	r4,zero
  80933c:	d811883a 	mov	r8,sp
  809340:	847ff116 	blt	r16,r17,809308 <__alt_mem_epcs_flash_controller_0+0xff800308>
  809344:	d8c02317 	ldw	r3,140(sp)
  809348:	1445883a 	add	r2,r2,r17
  80934c:	44400115 	stw	r17,4(r8)
  809350:	40c00015 	stw	r3,0(r8)
  809354:	d8801c15 	stw	r2,112(sp)
  809358:	d9401b15 	stw	r5,108(sp)
  80935c:	00c001c4 	movi	r3,7
  809360:	1940170e 	bge	r3,r5,8093c0 <___vfiprintf_internal_r+0xe24>
  809364:	1000101e 	bne	r2,zero,8093a8 <___vfiprintf_internal_r+0xe0c>
  809368:	d8802517 	ldw	r2,148(sp)
  80936c:	14c11616 	blt	r2,r19,8097c8 <___vfiprintf_internal_r+0x122c>
  809370:	d9002417 	ldw	r4,144(sp)
  809374:	2089883a 	add	r4,r4,r2
  809378:	d9002415 	stw	r4,144(sp)
  80937c:	003e1806 	br	808be0 <__alt_mem_epcs_flash_controller_0+0xff7ffbe0>
  809380:	d9801a04 	addi	r6,sp,104
  809384:	b80b883a 	mov	r5,r23
  809388:	a809883a 	mov	r4,r21
  80938c:	08084880 	call	808488 <__sprint_r.part.0>
  809390:	103fba1e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  809394:	d9001b17 	ldw	r4,108(sp)
  809398:	d8801c17 	ldw	r2,112(sp)
  80939c:	d811883a 	mov	r8,sp
  8093a0:	21400044 	addi	r5,r4,1
  8093a4:	003fd606 	br	809300 <__alt_mem_epcs_flash_controller_0+0xff800300>
  8093a8:	d9402017 	ldw	r5,128(sp)
  8093ac:	d9002117 	ldw	r4,132(sp)
  8093b0:	d9801a04 	addi	r6,sp,104
  8093b4:	08084880 	call	808488 <__sprint_r.part.0>
  8093b8:	103fb01e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  8093bc:	d8801c17 	ldw	r2,112(sp)
  8093c0:	d8c02517 	ldw	r3,148(sp)
  8093c4:	1cc0010e 	bge	r3,r19,8093cc <___vfiprintf_internal_r+0xe30>
  8093c8:	9807883a 	mov	r3,r19
  8093cc:	d9002417 	ldw	r4,144(sp)
  8093d0:	20c9883a 	add	r4,r4,r3
  8093d4:	d9002415 	stw	r4,144(sp)
  8093d8:	103e0126 	beq	r2,zero,808be0 <__alt_mem_epcs_flash_controller_0+0xff7ffbe0>
  8093dc:	d9402017 	ldw	r5,128(sp)
  8093e0:	d9002117 	ldw	r4,132(sp)
  8093e4:	d9801a04 	addi	r6,sp,104
  8093e8:	08084880 	call	808488 <__sprint_r.part.0>
  8093ec:	103dfc26 	beq	r2,zero,808be0 <__alt_mem_epcs_flash_controller_0+0xff7ffbe0>
  8093f0:	003fa206 	br	80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  8093f4:	d9402017 	ldw	r5,128(sp)
  8093f8:	d9002117 	ldw	r4,132(sp)
  8093fc:	d9801a04 	addi	r6,sp,104
  809400:	d9c02b15 	stw	r7,172(sp)
  809404:	08084880 	call	808488 <__sprint_r.part.0>
  809408:	d9c02b17 	ldw	r7,172(sp)
  80940c:	103f9b1e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  809410:	d9001b17 	ldw	r4,108(sp)
  809414:	d8801c17 	ldw	r2,112(sp)
  809418:	d811883a 	mov	r8,sp
  80941c:	21800044 	addi	r6,r4,1
  809420:	003dbf06 	br	808b20 <__alt_mem_epcs_flash_controller_0+0xff7ffb20>
  809424:	1000d81e 	bne	r2,zero,809788 <___vfiprintf_internal_r+0x11ec>
  809428:	d9001d87 	ldb	r4,118(sp)
  80942c:	20000a26 	beq	r4,zero,809458 <___vfiprintf_internal_r+0xebc>
  809430:	00800044 	movi	r2,1
  809434:	d9001d84 	addi	r4,sp,118
  809438:	100b883a 	mov	r5,r2
  80943c:	d9000015 	stw	r4,0(sp)
  809440:	d8800115 	stw	r2,4(sp)
  809444:	d811883a 	mov	r8,sp
  809448:	2809883a 	mov	r4,r5
  80944c:	42000204 	addi	r8,r8,8
  809450:	29400044 	addi	r5,r5,1
  809454:	003d9506 	br	808aac <__alt_mem_epcs_flash_controller_0+0xff7ffaac>
  809458:	3800fd26 	beq	r7,zero,809850 <___vfiprintf_internal_r+0x12b4>
  80945c:	00800084 	movi	r2,2
  809460:	d9001d04 	addi	r4,sp,116
  809464:	d9000015 	stw	r4,0(sp)
  809468:	d8800115 	stw	r2,4(sp)
  80946c:	01400044 	movi	r5,1
  809470:	d811883a 	mov	r8,sp
  809474:	2809883a 	mov	r4,r5
  809478:	42000204 	addi	r8,r8,8
  80947c:	29400044 	addi	r5,r5,1
  809480:	003f4606 	br	80919c <__alt_mem_epcs_flash_controller_0+0xff80019c>
  809484:	d8802517 	ldw	r2,148(sp)
  809488:	14c0010e 	bge	r2,r19,809490 <___vfiprintf_internal_r+0xef4>
  80948c:	9805883a 	mov	r2,r19
  809490:	d9402417 	ldw	r5,144(sp)
  809494:	288b883a 	add	r5,r5,r2
  809498:	d9402415 	stw	r5,144(sp)
  80949c:	003dd006 	br	808be0 <__alt_mem_epcs_flash_controller_0+0xff7ffbe0>
  8094a0:	d8001d85 	stb	zero,118(sp)
  8094a4:	80005d16 	blt	r16,zero,80961c <___vfiprintf_internal_r+0x1080>
  8094a8:	00ffdfc4 	movi	r3,-129
  8094ac:	9d04b03a 	or	r2,r19,r20
  8094b0:	88e2703a 	and	r17,r17,r3
  8094b4:	103d3726 	beq	r2,zero,808994 <__alt_mem_epcs_flash_controller_0+0xff7ff994>
  8094b8:	002b883a 	mov	r21,zero
  8094bc:	d9002617 	ldw	r4,152(sp)
  8094c0:	ddc01a04 	addi	r23,sp,104
  8094c4:	988003cc 	andi	r2,r19,15
  8094c8:	a006973a 	slli	r3,r20,28
  8094cc:	2085883a 	add	r2,r4,r2
  8094d0:	9826d13a 	srli	r19,r19,4
  8094d4:	10800003 	ldbu	r2,0(r2)
  8094d8:	a028d13a 	srli	r20,r20,4
  8094dc:	bdffffc4 	addi	r23,r23,-1
  8094e0:	1ce6b03a 	or	r19,r3,r19
  8094e4:	b8800005 	stb	r2,0(r23)
  8094e8:	9d04b03a 	or	r2,r19,r20
  8094ec:	103ff51e 	bne	r2,zero,8094c4 <__alt_mem_epcs_flash_controller_0+0xff8004c4>
  8094f0:	d8801e17 	ldw	r2,120(sp)
  8094f4:	15e9c83a 	sub	r20,r2,r23
  8094f8:	003d2b06 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  8094fc:	d9402017 	ldw	r5,128(sp)
  809500:	d9002117 	ldw	r4,132(sp)
  809504:	d9801a04 	addi	r6,sp,104
  809508:	08084880 	call	808488 <__sprint_r.part.0>
  80950c:	103f5b1e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  809510:	d8801c17 	ldw	r2,112(sp)
  809514:	d811883a 	mov	r8,sp
  809518:	003f6706 	br	8092b8 <__alt_mem_epcs_flash_controller_0+0xff8002b8>
  80951c:	d9402017 	ldw	r5,128(sp)
  809520:	d9002117 	ldw	r4,132(sp)
  809524:	d9801a04 	addi	r6,sp,104
  809528:	08084880 	call	808488 <__sprint_r.part.0>
  80952c:	103f531e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  809530:	d811883a 	mov	r8,sp
  809534:	003cd906 	br	80889c <__alt_mem_epcs_flash_controller_0+0xff7ff89c>
  809538:	10803fcc 	andi	r2,r2,255
  80953c:	1080201c 	xori	r2,r2,128
  809540:	10bfe004 	addi	r2,r2,-128
  809544:	00c00c04 	movi	r3,48
  809548:	10ffe926 	beq	r2,r3,8094f0 <__alt_mem_epcs_flash_controller_0+0xff8004f0>
  80954c:	b8ffffc5 	stb	r3,-1(r23)
  809550:	d8c01e17 	ldw	r3,120(sp)
  809554:	b8bfffc4 	addi	r2,r23,-1
  809558:	102f883a 	mov	r23,r2
  80955c:	18a9c83a 	sub	r20,r3,r2
  809560:	003d1106 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  809564:	d9402017 	ldw	r5,128(sp)
  809568:	d9002117 	ldw	r4,132(sp)
  80956c:	d9801a04 	addi	r6,sp,104
  809570:	d8c02a15 	stw	r3,168(sp)
  809574:	d9c02b15 	stw	r7,172(sp)
  809578:	08084880 	call	808488 <__sprint_r.part.0>
  80957c:	d8c02a17 	ldw	r3,168(sp)
  809580:	d9c02b17 	ldw	r7,172(sp)
  809584:	103f3d1e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  809588:	d9001b17 	ldw	r4,108(sp)
  80958c:	d8801c17 	ldw	r2,112(sp)
  809590:	d811883a 	mov	r8,sp
  809594:	21400044 	addi	r5,r4,1
  809598:	003d4406 	br	808aac <__alt_mem_epcs_flash_controller_0+0xff7ffaac>
  80959c:	d9402017 	ldw	r5,128(sp)
  8095a0:	d9002117 	ldw	r4,132(sp)
  8095a4:	d9801a04 	addi	r6,sp,104
  8095a8:	d8c02a15 	stw	r3,168(sp)
  8095ac:	08084880 	call	808488 <__sprint_r.part.0>
  8095b0:	d8c02a17 	ldw	r3,168(sp)
  8095b4:	103f311e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  8095b8:	d9001b17 	ldw	r4,108(sp)
  8095bc:	d8801c17 	ldw	r2,112(sp)
  8095c0:	d811883a 	mov	r8,sp
  8095c4:	21400044 	addi	r5,r4,1
  8095c8:	003ef406 	br	80919c <__alt_mem_epcs_flash_controller_0+0xff80019c>
  8095cc:	1000bd1e 	bne	r2,zero,8098c4 <___vfiprintf_internal_r+0x1328>
  8095d0:	01400044 	movi	r5,1
  8095d4:	0009883a 	mov	r4,zero
  8095d8:	d811883a 	mov	r8,sp
  8095dc:	003ef106 	br	8091a4 <__alt_mem_epcs_flash_controller_0+0xff8001a4>
  8095e0:	d9402017 	ldw	r5,128(sp)
  8095e4:	d9002117 	ldw	r4,132(sp)
  8095e8:	d9801a04 	addi	r6,sp,104
  8095ec:	08084880 	call	808488 <__sprint_r.part.0>
  8095f0:	103f221e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  8095f4:	d9401b17 	ldw	r5,108(sp)
  8095f8:	d8801c17 	ldw	r2,112(sp)
  8095fc:	d811883a 	mov	r8,sp
  809600:	29400044 	addi	r5,r5,1
  809604:	003d6206 	br	808b90 <__alt_mem_epcs_flash_controller_0+0xff7ffb90>
  809608:	014020b4 	movhi	r5,130
  80960c:	29696004 	addi	r5,r5,-23168
  809610:	d9402615 	stw	r5,152(sp)
  809614:	d8c02215 	stw	r3,136(sp)
  809618:	1023883a 	mov	r17,r2
  80961c:	9d04b03a 	or	r2,r19,r20
  809620:	103fa51e 	bne	r2,zero,8094b8 <__alt_mem_epcs_flash_controller_0+0xff8004b8>
  809624:	002b883a 	mov	r21,zero
  809628:	00800084 	movi	r2,2
  80962c:	003e4a06 	br	808f58 <__alt_mem_epcs_flash_controller_0+0xff7fff58>
  809630:	014020b4 	movhi	r5,130
  809634:	29696004 	addi	r5,r5,-23168
  809638:	002b883a 	mov	r21,zero
  80963c:	d9402615 	stw	r5,152(sp)
  809640:	003f9e06 	br	8094bc <__alt_mem_epcs_flash_controller_0+0xff8004bc>
  809644:	d9402217 	ldw	r5,136(sp)
  809648:	d8001d85 	stb	zero,118(sp)
  80964c:	0029883a 	mov	r20,zero
  809650:	28800104 	addi	r2,r5,4
  809654:	2cc00017 	ldw	r19,0(r5)
  809658:	803e3a16 	blt	r16,zero,808f44 <__alt_mem_epcs_flash_controller_0+0xff7fff44>
  80965c:	00ffdfc4 	movi	r3,-129
  809660:	d8802215 	stw	r2,136(sp)
  809664:	88e2703a 	and	r17,r17,r3
  809668:	002b883a 	mov	r21,zero
  80966c:	983e9b26 	beq	r19,zero,8090dc <__alt_mem_epcs_flash_controller_0+0xff8000dc>
  809670:	00800244 	movi	r2,9
  809674:	14fdc936 	bltu	r2,r19,808d9c <__alt_mem_epcs_flash_controller_0+0xff7ffd9c>
  809678:	003e9a06 	br	8090e4 <__alt_mem_epcs_flash_controller_0+0xff8000e4>
  80967c:	00800c04 	movi	r2,48
  809680:	d8c01d45 	stb	r3,117(sp)
  809684:	d8801d05 	stb	r2,116(sp)
  809688:	d8001d85 	stb	zero,118(sp)
  80968c:	88c00094 	ori	r3,r17,2
  809690:	80009c16 	blt	r16,zero,809904 <___vfiprintf_internal_r+0x1368>
  809694:	00bfdfc4 	movi	r2,-129
  809698:	88a2703a 	and	r17,r17,r2
  80969c:	8c400094 	ori	r17,r17,2
  8096a0:	002b883a 	mov	r21,zero
  8096a4:	003f8506 	br	8094bc <__alt_mem_epcs_flash_controller_0+0xff8004bc>
  8096a8:	b029883a 	mov	r20,r22
  8096ac:	003c0b06 	br	8086dc <__alt_mem_epcs_flash_controller_0+0xff7ff6dc>
  8096b0:	04e7c83a 	sub	r19,zero,r19
  8096b4:	05400b44 	movi	r21,45
  8096b8:	9804c03a 	cmpne	r2,r19,zero
  8096bc:	0529c83a 	sub	r20,zero,r20
  8096c0:	dd401d85 	stb	r21,118(sp)
  8096c4:	a0a9c83a 	sub	r20,r20,r2
  8096c8:	80009716 	blt	r16,zero,809928 <___vfiprintf_internal_r+0x138c>
  8096cc:	00bfdfc4 	movi	r2,-129
  8096d0:	88a2703a 	and	r17,r17,r2
  8096d4:	003db006 	br	808d98 <__alt_mem_epcs_flash_controller_0+0xff7ffd98>
  8096d8:	b0c00007 	ldb	r3,0(r22)
  8096dc:	003c0c06 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  8096e0:	8880100c 	andi	r2,r17,64
  8096e4:	d8001d85 	stb	zero,118(sp)
  8096e8:	1000461e 	bne	r2,zero,809804 <___vfiprintf_internal_r+0x1268>
  8096ec:	d9002217 	ldw	r4,136(sp)
  8096f0:	0029883a 	mov	r20,zero
  8096f4:	20800104 	addi	r2,r4,4
  8096f8:	24c00017 	ldw	r19,0(r4)
  8096fc:	803df80e 	bge	r16,zero,808ee0 <__alt_mem_epcs_flash_controller_0+0xff7ffee0>
  809700:	9d06b03a 	or	r3,r19,r20
  809704:	d8802215 	stw	r2,136(sp)
  809708:	183d5e1e 	bne	r3,zero,808c84 <__alt_mem_epcs_flash_controller_0+0xff7ffc84>
  80970c:	002b883a 	mov	r21,zero
  809710:	0005883a 	mov	r2,zero
  809714:	003e1006 	br	808f58 <__alt_mem_epcs_flash_controller_0+0xff7fff58>
  809718:	8880040c 	andi	r2,r17,16
  80971c:	1000321e 	bne	r2,zero,8097e8 <___vfiprintf_internal_r+0x124c>
  809720:	8c40100c 	andi	r17,r17,64
  809724:	88008d26 	beq	r17,zero,80995c <___vfiprintf_internal_r+0x13c0>
  809728:	d9402217 	ldw	r5,136(sp)
  80972c:	d8c02417 	ldw	r3,144(sp)
  809730:	28800017 	ldw	r2,0(r5)
  809734:	29400104 	addi	r5,r5,4
  809738:	d9402215 	stw	r5,136(sp)
  80973c:	10c0000d 	sth	r3,0(r2)
  809740:	003bca06 	br	80866c <__alt_mem_epcs_flash_controller_0+0xff7ff66c>
  809744:	8880100c 	andi	r2,r17,64
  809748:	10003a26 	beq	r2,zero,809834 <___vfiprintf_internal_r+0x1298>
  80974c:	d8802217 	ldw	r2,136(sp)
  809750:	14c0000f 	ldh	r19,0(r2)
  809754:	10800104 	addi	r2,r2,4
  809758:	d8802215 	stw	r2,136(sp)
  80975c:	9829d7fa 	srai	r20,r19,31
  809760:	a005883a 	mov	r2,r20
  809764:	003d8506 	br	808d7c <__alt_mem_epcs_flash_controller_0+0xff7ffd7c>
  809768:	8880100c 	andi	r2,r17,64
  80976c:	10002b26 	beq	r2,zero,80981c <___vfiprintf_internal_r+0x1280>
  809770:	d8802217 	ldw	r2,136(sp)
  809774:	0029883a 	mov	r20,zero
  809778:	14c0000b 	ldhu	r19,0(r2)
  80977c:	10800104 	addi	r2,r2,4
  809780:	d8802215 	stw	r2,136(sp)
  809784:	003d5d06 	br	808cfc <__alt_mem_epcs_flash_controller_0+0xff7ffcfc>
  809788:	d9402017 	ldw	r5,128(sp)
  80978c:	d9002117 	ldw	r4,132(sp)
  809790:	d9801a04 	addi	r6,sp,104
  809794:	d8c02a15 	stw	r3,168(sp)
  809798:	d9c02b15 	stw	r7,172(sp)
  80979c:	08084880 	call	808488 <__sprint_r.part.0>
  8097a0:	d8c02a17 	ldw	r3,168(sp)
  8097a4:	d9c02b17 	ldw	r7,172(sp)
  8097a8:	103eb41e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  8097ac:	d9001b17 	ldw	r4,108(sp)
  8097b0:	d8801c17 	ldw	r2,112(sp)
  8097b4:	d811883a 	mov	r8,sp
  8097b8:	21400044 	addi	r5,r4,1
  8097bc:	003e6706 	br	80915c <__alt_mem_epcs_flash_controller_0+0xff80015c>
  8097c0:	00bfffc4 	movi	r2,-1
  8097c4:	003c4a06 	br	8088f0 <__alt_mem_epcs_flash_controller_0+0xff7ff8f0>
  8097c8:	9805883a 	mov	r2,r19
  8097cc:	003ee806 	br	809370 <__alt_mem_epcs_flash_controller_0+0xff800370>
  8097d0:	d8c02217 	ldw	r3,136(sp)
  8097d4:	0029883a 	mov	r20,zero
  8097d8:	18800104 	addi	r2,r3,4
  8097dc:	1cc0000b 	ldhu	r19,0(r3)
  8097e0:	803f9e0e 	bge	r16,zero,80965c <__alt_mem_epcs_flash_controller_0+0xff80065c>
  8097e4:	003dd706 	br	808f44 <__alt_mem_epcs_flash_controller_0+0xff7fff44>
  8097e8:	d8c02217 	ldw	r3,136(sp)
  8097ec:	d9002417 	ldw	r4,144(sp)
  8097f0:	18800017 	ldw	r2,0(r3)
  8097f4:	18c00104 	addi	r3,r3,4
  8097f8:	d8c02215 	stw	r3,136(sp)
  8097fc:	11000015 	stw	r4,0(r2)
  809800:	003b9a06 	br	80866c <__alt_mem_epcs_flash_controller_0+0xff7ff66c>
  809804:	d8c02217 	ldw	r3,136(sp)
  809808:	0029883a 	mov	r20,zero
  80980c:	18800104 	addi	r2,r3,4
  809810:	1cc0000b 	ldhu	r19,0(r3)
  809814:	803db20e 	bge	r16,zero,808ee0 <__alt_mem_epcs_flash_controller_0+0xff7ffee0>
  809818:	003fb906 	br	809700 <__alt_mem_epcs_flash_controller_0+0xff800700>
  80981c:	d9002217 	ldw	r4,136(sp)
  809820:	0029883a 	mov	r20,zero
  809824:	24c00017 	ldw	r19,0(r4)
  809828:	21000104 	addi	r4,r4,4
  80982c:	d9002215 	stw	r4,136(sp)
  809830:	003d3206 	br	808cfc <__alt_mem_epcs_flash_controller_0+0xff7ffcfc>
  809834:	d8c02217 	ldw	r3,136(sp)
  809838:	1cc00017 	ldw	r19,0(r3)
  80983c:	18c00104 	addi	r3,r3,4
  809840:	d8c02215 	stw	r3,136(sp)
  809844:	9829d7fa 	srai	r20,r19,31
  809848:	a005883a 	mov	r2,r20
  80984c:	003d4b06 	br	808d7c <__alt_mem_epcs_flash_controller_0+0xff7ffd7c>
  809850:	0009883a 	mov	r4,zero
  809854:	01400044 	movi	r5,1
  809858:	d811883a 	mov	r8,sp
  80985c:	003e4f06 	br	80919c <__alt_mem_epcs_flash_controller_0+0xff80019c>
  809860:	d8c02215 	stw	r3,136(sp)
  809864:	002b883a 	mov	r21,zero
  809868:	003db806 	br	808f4c <__alt_mem_epcs_flash_controller_0+0xff7fff4c>
  80986c:	d811883a 	mov	r8,sp
  809870:	003e9606 	br	8092cc <__alt_mem_epcs_flash_controller_0+0xff8002cc>
  809874:	010020b4 	movhi	r4,130
  809878:	2129c104 	addi	r4,r4,-22780
  80987c:	d9002315 	stw	r4,140(sp)
  809880:	003e6306 	br	809210 <__alt_mem_epcs_flash_controller_0+0xff800210>
  809884:	b0c00043 	ldbu	r3,1(r22)
  809888:	8c400814 	ori	r17,r17,32
  80988c:	b5800044 	addi	r22,r22,1
  809890:	18c03fcc 	andi	r3,r3,255
  809894:	18c0201c 	xori	r3,r3,128
  809898:	18ffe004 	addi	r3,r3,-128
  80989c:	003b9c06 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  8098a0:	b809883a 	mov	r4,r23
  8098a4:	da002a15 	stw	r8,168(sp)
  8098a8:	0800ba40 	call	800ba4 <strlen>
  8098ac:	1029883a 	mov	r20,r2
  8098b0:	dd401d83 	ldbu	r21,118(sp)
  8098b4:	df002215 	stw	fp,136(sp)
  8098b8:	0021883a 	mov	r16,zero
  8098bc:	da002a17 	ldw	r8,168(sp)
  8098c0:	003c3906 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  8098c4:	d9402017 	ldw	r5,128(sp)
  8098c8:	d9002117 	ldw	r4,132(sp)
  8098cc:	d9801a04 	addi	r6,sp,104
  8098d0:	08084880 	call	808488 <__sprint_r.part.0>
  8098d4:	103e691e 	bne	r2,zero,80927c <__alt_mem_epcs_flash_controller_0+0xff80027c>
  8098d8:	d9001b17 	ldw	r4,108(sp)
  8098dc:	d8801c17 	ldw	r2,112(sp)
  8098e0:	d811883a 	mov	r8,sp
  8098e4:	21400044 	addi	r5,r4,1
  8098e8:	003e2e06 	br	8091a4 <__alt_mem_epcs_flash_controller_0+0xff8001a4>
  8098ec:	010020b4 	movhi	r4,130
  8098f0:	2129c504 	addi	r4,r4,-22764
  8098f4:	d9002315 	stw	r4,140(sp)
  8098f8:	d9001b17 	ldw	r4,108(sp)
  8098fc:	21000044 	addi	r4,r4,1
  809900:	003c5e06 	br	808a7c <__alt_mem_epcs_flash_controller_0+0xff7ffa7c>
  809904:	002b883a 	mov	r21,zero
  809908:	00800084 	movi	r2,2
  80990c:	10803fcc 	andi	r2,r2,255
  809910:	01000044 	movi	r4,1
  809914:	11002b26 	beq	r2,r4,8099c4 <___vfiprintf_internal_r+0x1428>
  809918:	01000084 	movi	r4,2
  80991c:	11002b1e 	bne	r2,r4,8099cc <___vfiprintf_internal_r+0x1430>
  809920:	1823883a 	mov	r17,r3
  809924:	003ee506 	br	8094bc <__alt_mem_epcs_flash_controller_0+0xff8004bc>
  809928:	8807883a 	mov	r3,r17
  80992c:	00800044 	movi	r2,1
  809930:	003ff606 	br	80990c <__alt_mem_epcs_flash_controller_0+0xff80090c>
  809934:	00800184 	movi	r2,6
  809938:	1400012e 	bgeu	r2,r16,809940 <___vfiprintf_internal_r+0x13a4>
  80993c:	1021883a 	mov	r16,r2
  809940:	8029883a 	mov	r20,r16
  809944:	8027883a 	mov	r19,r16
  809948:	80002216 	blt	r16,zero,8099d4 <___vfiprintf_internal_r+0x1438>
  80994c:	05c020b4 	movhi	r23,130
  809950:	df002215 	stw	fp,136(sp)
  809954:	bde96504 	addi	r23,r23,-23148
  809958:	003cfb06 	br	808d48 <__alt_mem_epcs_flash_controller_0+0xff7ffd48>
  80995c:	d9002217 	ldw	r4,136(sp)
  809960:	d9402417 	ldw	r5,144(sp)
  809964:	20800017 	ldw	r2,0(r4)
  809968:	21000104 	addi	r4,r4,4
  80996c:	d9002215 	stw	r4,136(sp)
  809970:	11400015 	stw	r5,0(r2)
  809974:	003b3d06 	br	80866c <__alt_mem_epcs_flash_controller_0+0xff7ff66c>
  809978:	014020b4 	movhi	r5,130
  80997c:	2969c504 	addi	r5,r5,-22764
  809980:	d9402315 	stw	r5,140(sp)
  809984:	d9401b17 	ldw	r5,108(sp)
  809988:	29400044 	addi	r5,r5,1
  80998c:	003e6d06 	br	809344 <__alt_mem_epcs_flash_controller_0+0xff800344>
  809990:	8029883a 	mov	r20,r16
  809994:	dd401d83 	ldbu	r21,118(sp)
  809998:	df002215 	stw	fp,136(sp)
  80999c:	0021883a 	mov	r16,zero
  8099a0:	003c0106 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  8099a4:	00c020b4 	movhi	r3,130
  8099a8:	18e9c104 	addi	r3,r3,-22780
  8099ac:	d8c02315 	stw	r3,140(sp)
  8099b0:	280d883a 	mov	r6,r5
  8099b4:	003c6906 	br	808b5c <__alt_mem_epcs_flash_controller_0+0xff7ffb5c>
  8099b8:	802d883a 	mov	r22,r16
  8099bc:	0021883a 	mov	r16,zero
  8099c0:	003b5406 	br	808714 <__alt_mem_epcs_flash_controller_0+0xff7ff714>
  8099c4:	1823883a 	mov	r17,r3
  8099c8:	003cf306 	br	808d98 <__alt_mem_epcs_flash_controller_0+0xff7ffd98>
  8099cc:	1823883a 	mov	r17,r3
  8099d0:	003cad06 	br	808c88 <__alt_mem_epcs_flash_controller_0+0xff7ffc88>
  8099d4:	0027883a 	mov	r19,zero
  8099d8:	003fdc06 	br	80994c <__alt_mem_epcs_flash_controller_0+0xff80094c>
  8099dc:	d9402217 	ldw	r5,136(sp)
  8099e0:	8005883a 	mov	r2,r16
  8099e4:	b0c00043 	ldbu	r3,1(r22)
  8099e8:	2c000017 	ldw	r16,0(r5)
  8099ec:	29000104 	addi	r4,r5,4
  8099f0:	d9002215 	stw	r4,136(sp)
  8099f4:	102d883a 	mov	r22,r2
  8099f8:	803fa50e 	bge	r16,zero,809890 <__alt_mem_epcs_flash_controller_0+0xff800890>
  8099fc:	18c03fcc 	andi	r3,r3,255
  809a00:	18c0201c 	xori	r3,r3,128
  809a04:	043fffc4 	movi	r16,-1
  809a08:	18ffe004 	addi	r3,r3,-128
  809a0c:	003b4006 	br	808710 <__alt_mem_epcs_flash_controller_0+0xff7ff710>
  809a10:	d9402303 	ldbu	r5,140(sp)
  809a14:	d9401d85 	stb	r5,118(sp)
  809a18:	003cae06 	br	808cd4 <__alt_mem_epcs_flash_controller_0+0xff7ffcd4>
  809a1c:	d8c02303 	ldbu	r3,140(sp)
  809a20:	d8c01d85 	stb	r3,118(sp)
  809a24:	003d1406 	br	808e78 <__alt_mem_epcs_flash_controller_0+0xff7ffe78>
  809a28:	d8c02303 	ldbu	r3,140(sp)
  809a2c:	d8c01d85 	stb	r3,118(sp)
  809a30:	003cca06 	br	808d5c <__alt_mem_epcs_flash_controller_0+0xff7ffd5c>
  809a34:	8880004c 	andi	r2,r17,1
  809a38:	002b883a 	mov	r21,zero
  809a3c:	10000526 	beq	r2,zero,809a54 <___vfiprintf_internal_r+0x14b8>
  809a40:	00800c04 	movi	r2,48
  809a44:	d88019c5 	stb	r2,103(sp)
  809a48:	dd002817 	ldw	r20,160(sp)
  809a4c:	ddc019c4 	addi	r23,sp,103
  809a50:	003bd506 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  809a54:	0029883a 	mov	r20,zero
  809a58:	ddc01a04 	addi	r23,sp,104
  809a5c:	003bd206 	br	8089a8 <__alt_mem_epcs_flash_controller_0+0xff7ff9a8>
  809a60:	d9002303 	ldbu	r4,140(sp)
  809a64:	d9001d85 	stb	r4,118(sp)
  809a68:	003da606 	br	809104 <__alt_mem_epcs_flash_controller_0+0xff800104>
  809a6c:	d8c02303 	ldbu	r3,140(sp)
  809a70:	d8c01d85 	stb	r3,118(sp)
  809a74:	003c7606 	br	808c50 <__alt_mem_epcs_flash_controller_0+0xff7ffc50>
  809a78:	d8c02303 	ldbu	r3,140(sp)
  809a7c:	d8c01d85 	stb	r3,118(sp)
  809a80:	003c6506 	br	808c18 <__alt_mem_epcs_flash_controller_0+0xff7ffc18>
  809a84:	d9002303 	ldbu	r4,140(sp)
  809a88:	d9001d85 	stb	r4,118(sp)
  809a8c:	003d3d06 	br	808f84 <__alt_mem_epcs_flash_controller_0+0xff7fff84>
  809a90:	d8c02303 	ldbu	r3,140(sp)
  809a94:	d8c01d85 	stb	r3,118(sp)
  809a98:	003d1d06 	br	808f10 <__alt_mem_epcs_flash_controller_0+0xff7fff10>
  809a9c:	d8c02303 	ldbu	r3,140(sp)
  809aa0:	d8c01d85 	stb	r3,118(sp)
  809aa4:	003d0306 	br	808eb4 <__alt_mem_epcs_flash_controller_0+0xff7ffeb4>

00809aa8 <__vfiprintf_internal>:
  809aa8:	008020b4 	movhi	r2,130
  809aac:	10b1d504 	addi	r2,r2,-14508
  809ab0:	300f883a 	mov	r7,r6
  809ab4:	280d883a 	mov	r6,r5
  809ab8:	200b883a 	mov	r5,r4
  809abc:	11000017 	ldw	r4,0(r2)
  809ac0:	080859c1 	jmpi	80859c <___vfiprintf_internal_r>

00809ac4 <__sbprintf>:
  809ac4:	2880030b 	ldhu	r2,12(r5)
  809ac8:	2ac01917 	ldw	r11,100(r5)
  809acc:	2a80038b 	ldhu	r10,14(r5)
  809ad0:	2a400717 	ldw	r9,28(r5)
  809ad4:	2a000917 	ldw	r8,36(r5)
  809ad8:	defee204 	addi	sp,sp,-1144
  809adc:	00c10004 	movi	r3,1024
  809ae0:	dc011a15 	stw	r16,1128(sp)
  809ae4:	10bfff4c 	andi	r2,r2,65533
  809ae8:	2821883a 	mov	r16,r5
  809aec:	d8cb883a 	add	r5,sp,r3
  809af0:	dc811c15 	stw	r18,1136(sp)
  809af4:	dc411b15 	stw	r17,1132(sp)
  809af8:	dfc11d15 	stw	ra,1140(sp)
  809afc:	2025883a 	mov	r18,r4
  809b00:	d881030d 	sth	r2,1036(sp)
  809b04:	dac11915 	stw	r11,1124(sp)
  809b08:	da81038d 	sth	r10,1038(sp)
  809b0c:	da410715 	stw	r9,1052(sp)
  809b10:	da010915 	stw	r8,1060(sp)
  809b14:	dec10015 	stw	sp,1024(sp)
  809b18:	dec10415 	stw	sp,1040(sp)
  809b1c:	d8c10215 	stw	r3,1032(sp)
  809b20:	d8c10515 	stw	r3,1044(sp)
  809b24:	d8010615 	stw	zero,1048(sp)
  809b28:	080859c0 	call	80859c <___vfiprintf_internal_r>
  809b2c:	1023883a 	mov	r17,r2
  809b30:	10000416 	blt	r2,zero,809b44 <__sbprintf+0x80>
  809b34:	d9410004 	addi	r5,sp,1024
  809b38:	9009883a 	mov	r4,r18
  809b3c:	0804c100 	call	804c10 <_fflush_r>
  809b40:	10000d1e 	bne	r2,zero,809b78 <__sbprintf+0xb4>
  809b44:	d881030b 	ldhu	r2,1036(sp)
  809b48:	1080100c 	andi	r2,r2,64
  809b4c:	10000326 	beq	r2,zero,809b5c <__sbprintf+0x98>
  809b50:	8080030b 	ldhu	r2,12(r16)
  809b54:	10801014 	ori	r2,r2,64
  809b58:	8080030d 	sth	r2,12(r16)
  809b5c:	8805883a 	mov	r2,r17
  809b60:	dfc11d17 	ldw	ra,1140(sp)
  809b64:	dc811c17 	ldw	r18,1136(sp)
  809b68:	dc411b17 	ldw	r17,1132(sp)
  809b6c:	dc011a17 	ldw	r16,1128(sp)
  809b70:	dec11e04 	addi	sp,sp,1144
  809b74:	f800283a 	ret
  809b78:	047fffc4 	movi	r17,-1
  809b7c:	003ff106 	br	809b44 <__alt_mem_epcs_flash_controller_0+0xff800b44>

00809b80 <__swbuf_r>:
  809b80:	defffb04 	addi	sp,sp,-20
  809b84:	dcc00315 	stw	r19,12(sp)
  809b88:	dc800215 	stw	r18,8(sp)
  809b8c:	dc000015 	stw	r16,0(sp)
  809b90:	dfc00415 	stw	ra,16(sp)
  809b94:	dc400115 	stw	r17,4(sp)
  809b98:	2025883a 	mov	r18,r4
  809b9c:	2827883a 	mov	r19,r5
  809ba0:	3021883a 	mov	r16,r6
  809ba4:	20000226 	beq	r4,zero,809bb0 <__swbuf_r+0x30>
  809ba8:	20800e17 	ldw	r2,56(r4)
  809bac:	10004226 	beq	r2,zero,809cb8 <__swbuf_r+0x138>
  809bb0:	80800617 	ldw	r2,24(r16)
  809bb4:	8100030b 	ldhu	r4,12(r16)
  809bb8:	80800215 	stw	r2,8(r16)
  809bbc:	2080020c 	andi	r2,r4,8
  809bc0:	10003626 	beq	r2,zero,809c9c <__swbuf_r+0x11c>
  809bc4:	80c00417 	ldw	r3,16(r16)
  809bc8:	18003426 	beq	r3,zero,809c9c <__swbuf_r+0x11c>
  809bcc:	2088000c 	andi	r2,r4,8192
  809bd0:	9c403fcc 	andi	r17,r19,255
  809bd4:	10001a26 	beq	r2,zero,809c40 <__swbuf_r+0xc0>
  809bd8:	80800017 	ldw	r2,0(r16)
  809bdc:	81000517 	ldw	r4,20(r16)
  809be0:	10c7c83a 	sub	r3,r2,r3
  809be4:	1900200e 	bge	r3,r4,809c68 <__swbuf_r+0xe8>
  809be8:	18c00044 	addi	r3,r3,1
  809bec:	81000217 	ldw	r4,8(r16)
  809bf0:	11400044 	addi	r5,r2,1
  809bf4:	81400015 	stw	r5,0(r16)
  809bf8:	213fffc4 	addi	r4,r4,-1
  809bfc:	81000215 	stw	r4,8(r16)
  809c00:	14c00005 	stb	r19,0(r2)
  809c04:	80800517 	ldw	r2,20(r16)
  809c08:	10c01e26 	beq	r2,r3,809c84 <__swbuf_r+0x104>
  809c0c:	8080030b 	ldhu	r2,12(r16)
  809c10:	1080004c 	andi	r2,r2,1
  809c14:	10000226 	beq	r2,zero,809c20 <__swbuf_r+0xa0>
  809c18:	00800284 	movi	r2,10
  809c1c:	88801926 	beq	r17,r2,809c84 <__swbuf_r+0x104>
  809c20:	8805883a 	mov	r2,r17
  809c24:	dfc00417 	ldw	ra,16(sp)
  809c28:	dcc00317 	ldw	r19,12(sp)
  809c2c:	dc800217 	ldw	r18,8(sp)
  809c30:	dc400117 	ldw	r17,4(sp)
  809c34:	dc000017 	ldw	r16,0(sp)
  809c38:	dec00504 	addi	sp,sp,20
  809c3c:	f800283a 	ret
  809c40:	81401917 	ldw	r5,100(r16)
  809c44:	00b7ffc4 	movi	r2,-8193
  809c48:	21080014 	ori	r4,r4,8192
  809c4c:	2884703a 	and	r2,r5,r2
  809c50:	80801915 	stw	r2,100(r16)
  809c54:	80800017 	ldw	r2,0(r16)
  809c58:	8100030d 	sth	r4,12(r16)
  809c5c:	81000517 	ldw	r4,20(r16)
  809c60:	10c7c83a 	sub	r3,r2,r3
  809c64:	193fe016 	blt	r3,r4,809be8 <__alt_mem_epcs_flash_controller_0+0xff800be8>
  809c68:	800b883a 	mov	r5,r16
  809c6c:	9009883a 	mov	r4,r18
  809c70:	0804c100 	call	804c10 <_fflush_r>
  809c74:	1000071e 	bne	r2,zero,809c94 <__swbuf_r+0x114>
  809c78:	80800017 	ldw	r2,0(r16)
  809c7c:	00c00044 	movi	r3,1
  809c80:	003fda06 	br	809bec <__alt_mem_epcs_flash_controller_0+0xff800bec>
  809c84:	800b883a 	mov	r5,r16
  809c88:	9009883a 	mov	r4,r18
  809c8c:	0804c100 	call	804c10 <_fflush_r>
  809c90:	103fe326 	beq	r2,zero,809c20 <__alt_mem_epcs_flash_controller_0+0xff800c20>
  809c94:	00bfffc4 	movi	r2,-1
  809c98:	003fe206 	br	809c24 <__alt_mem_epcs_flash_controller_0+0xff800c24>
  809c9c:	800b883a 	mov	r5,r16
  809ca0:	9009883a 	mov	r4,r18
  809ca4:	0802ff00 	call	802ff0 <__swsetup_r>
  809ca8:	103ffa1e 	bne	r2,zero,809c94 <__alt_mem_epcs_flash_controller_0+0xff800c94>
  809cac:	8100030b 	ldhu	r4,12(r16)
  809cb0:	80c00417 	ldw	r3,16(r16)
  809cb4:	003fc506 	br	809bcc <__alt_mem_epcs_flash_controller_0+0xff800bcc>
  809cb8:	0804ffc0 	call	804ffc <__sinit>
  809cbc:	003fbc06 	br	809bb0 <__alt_mem_epcs_flash_controller_0+0xff800bb0>

00809cc0 <__swbuf>:
  809cc0:	008020b4 	movhi	r2,130
  809cc4:	10b1d504 	addi	r2,r2,-14508
  809cc8:	280d883a 	mov	r6,r5
  809ccc:	200b883a 	mov	r5,r4
  809cd0:	11000017 	ldw	r4,0(r2)
  809cd4:	0809b801 	jmpi	809b80 <__swbuf_r>

00809cd8 <_write_r>:
  809cd8:	defffd04 	addi	sp,sp,-12
  809cdc:	2805883a 	mov	r2,r5
  809ce0:	dc000015 	stw	r16,0(sp)
  809ce4:	040020b4 	movhi	r16,130
  809ce8:	dc400115 	stw	r17,4(sp)
  809cec:	300b883a 	mov	r5,r6
  809cf0:	84321304 	addi	r16,r16,-14260
  809cf4:	2023883a 	mov	r17,r4
  809cf8:	380d883a 	mov	r6,r7
  809cfc:	1009883a 	mov	r4,r2
  809d00:	dfc00215 	stw	ra,8(sp)
  809d04:	80000015 	stw	zero,0(r16)
  809d08:	080e54c0 	call	80e54c <write>
  809d0c:	00ffffc4 	movi	r3,-1
  809d10:	10c00526 	beq	r2,r3,809d28 <_write_r+0x50>
  809d14:	dfc00217 	ldw	ra,8(sp)
  809d18:	dc400117 	ldw	r17,4(sp)
  809d1c:	dc000017 	ldw	r16,0(sp)
  809d20:	dec00304 	addi	sp,sp,12
  809d24:	f800283a 	ret
  809d28:	80c00017 	ldw	r3,0(r16)
  809d2c:	183ff926 	beq	r3,zero,809d14 <__alt_mem_epcs_flash_controller_0+0xff800d14>
  809d30:	88c00015 	stw	r3,0(r17)
  809d34:	003ff706 	br	809d14 <__alt_mem_epcs_flash_controller_0+0xff800d14>

00809d38 <_close_r>:
  809d38:	defffd04 	addi	sp,sp,-12
  809d3c:	dc000015 	stw	r16,0(sp)
  809d40:	040020b4 	movhi	r16,130
  809d44:	dc400115 	stw	r17,4(sp)
  809d48:	84321304 	addi	r16,r16,-14260
  809d4c:	2023883a 	mov	r17,r4
  809d50:	2809883a 	mov	r4,r5
  809d54:	dfc00215 	stw	ra,8(sp)
  809d58:	80000015 	stw	zero,0(r16)
  809d5c:	080db480 	call	80db48 <close>
  809d60:	00ffffc4 	movi	r3,-1
  809d64:	10c00526 	beq	r2,r3,809d7c <_close_r+0x44>
  809d68:	dfc00217 	ldw	ra,8(sp)
  809d6c:	dc400117 	ldw	r17,4(sp)
  809d70:	dc000017 	ldw	r16,0(sp)
  809d74:	dec00304 	addi	sp,sp,12
  809d78:	f800283a 	ret
  809d7c:	80c00017 	ldw	r3,0(r16)
  809d80:	183ff926 	beq	r3,zero,809d68 <__alt_mem_epcs_flash_controller_0+0xff800d68>
  809d84:	88c00015 	stw	r3,0(r17)
  809d88:	003ff706 	br	809d68 <__alt_mem_epcs_flash_controller_0+0xff800d68>

00809d8c <_calloc_r>:
  809d8c:	defffe04 	addi	sp,sp,-8
  809d90:	2805883a 	mov	r2,r5
  809d94:	dc000015 	stw	r16,0(sp)
  809d98:	300b883a 	mov	r5,r6
  809d9c:	2021883a 	mov	r16,r4
  809da0:	1009883a 	mov	r4,r2
  809da4:	dfc00115 	stw	ra,4(sp)
  809da8:	080b2400 	call	80b240 <__mulsi3>
  809dac:	100b883a 	mov	r5,r2
  809db0:	8009883a 	mov	r4,r16
  809db4:	0805d680 	call	805d68 <_malloc_r>
  809db8:	10002926 	beq	r2,zero,809e60 <_calloc_r+0xd4>
  809dbc:	11bfff17 	ldw	r6,-4(r2)
  809dc0:	1021883a 	mov	r16,r2
  809dc4:	00bfff04 	movi	r2,-4
  809dc8:	308c703a 	and	r6,r6,r2
  809dcc:	00c00904 	movi	r3,36
  809dd0:	308d883a 	add	r6,r6,r2
  809dd4:	19801636 	bltu	r3,r6,809e30 <_calloc_r+0xa4>
  809dd8:	008004c4 	movi	r2,19
  809ddc:	11800b2e 	bgeu	r2,r6,809e0c <_calloc_r+0x80>
  809de0:	80000015 	stw	zero,0(r16)
  809de4:	80000115 	stw	zero,4(r16)
  809de8:	008006c4 	movi	r2,27
  809dec:	11801a2e 	bgeu	r2,r6,809e58 <_calloc_r+0xcc>
  809df0:	80000215 	stw	zero,8(r16)
  809df4:	80000315 	stw	zero,12(r16)
  809df8:	30c0151e 	bne	r6,r3,809e50 <_calloc_r+0xc4>
  809dfc:	80000415 	stw	zero,16(r16)
  809e00:	80800604 	addi	r2,r16,24
  809e04:	80000515 	stw	zero,20(r16)
  809e08:	00000106 	br	809e10 <_calloc_r+0x84>
  809e0c:	8005883a 	mov	r2,r16
  809e10:	10000015 	stw	zero,0(r2)
  809e14:	10000115 	stw	zero,4(r2)
  809e18:	10000215 	stw	zero,8(r2)
  809e1c:	8005883a 	mov	r2,r16
  809e20:	dfc00117 	ldw	ra,4(sp)
  809e24:	dc000017 	ldw	r16,0(sp)
  809e28:	dec00204 	addi	sp,sp,8
  809e2c:	f800283a 	ret
  809e30:	000b883a 	mov	r5,zero
  809e34:	8009883a 	mov	r4,r16
  809e38:	08068fc0 	call	8068fc <memset>
  809e3c:	8005883a 	mov	r2,r16
  809e40:	dfc00117 	ldw	ra,4(sp)
  809e44:	dc000017 	ldw	r16,0(sp)
  809e48:	dec00204 	addi	sp,sp,8
  809e4c:	f800283a 	ret
  809e50:	80800404 	addi	r2,r16,16
  809e54:	003fee06 	br	809e10 <__alt_mem_epcs_flash_controller_0+0xff800e10>
  809e58:	80800204 	addi	r2,r16,8
  809e5c:	003fec06 	br	809e10 <__alt_mem_epcs_flash_controller_0+0xff800e10>
  809e60:	0005883a 	mov	r2,zero
  809e64:	003fee06 	br	809e20 <__alt_mem_epcs_flash_controller_0+0xff800e20>

00809e68 <_fclose_r>:
  809e68:	28003926 	beq	r5,zero,809f50 <_fclose_r+0xe8>
  809e6c:	defffc04 	addi	sp,sp,-16
  809e70:	dc400115 	stw	r17,4(sp)
  809e74:	dc000015 	stw	r16,0(sp)
  809e78:	dfc00315 	stw	ra,12(sp)
  809e7c:	dc800215 	stw	r18,8(sp)
  809e80:	2023883a 	mov	r17,r4
  809e84:	2821883a 	mov	r16,r5
  809e88:	20000226 	beq	r4,zero,809e94 <_fclose_r+0x2c>
  809e8c:	20800e17 	ldw	r2,56(r4)
  809e90:	10002726 	beq	r2,zero,809f30 <_fclose_r+0xc8>
  809e94:	8080030f 	ldh	r2,12(r16)
  809e98:	1000071e 	bne	r2,zero,809eb8 <_fclose_r+0x50>
  809e9c:	0005883a 	mov	r2,zero
  809ea0:	dfc00317 	ldw	ra,12(sp)
  809ea4:	dc800217 	ldw	r18,8(sp)
  809ea8:	dc400117 	ldw	r17,4(sp)
  809eac:	dc000017 	ldw	r16,0(sp)
  809eb0:	dec00404 	addi	sp,sp,16
  809eb4:	f800283a 	ret
  809eb8:	800b883a 	mov	r5,r16
  809ebc:	8809883a 	mov	r4,r17
  809ec0:	08049f40 	call	8049f4 <__sflush_r>
  809ec4:	1025883a 	mov	r18,r2
  809ec8:	80800b17 	ldw	r2,44(r16)
  809ecc:	10000426 	beq	r2,zero,809ee0 <_fclose_r+0x78>
  809ed0:	81400717 	ldw	r5,28(r16)
  809ed4:	8809883a 	mov	r4,r17
  809ed8:	103ee83a 	callr	r2
  809edc:	10001616 	blt	r2,zero,809f38 <_fclose_r+0xd0>
  809ee0:	8080030b 	ldhu	r2,12(r16)
  809ee4:	1080200c 	andi	r2,r2,128
  809ee8:	1000151e 	bne	r2,zero,809f40 <_fclose_r+0xd8>
  809eec:	81400c17 	ldw	r5,48(r16)
  809ef0:	28000526 	beq	r5,zero,809f08 <_fclose_r+0xa0>
  809ef4:	80801004 	addi	r2,r16,64
  809ef8:	28800226 	beq	r5,r2,809f04 <_fclose_r+0x9c>
  809efc:	8809883a 	mov	r4,r17
  809f00:	08051700 	call	805170 <_free_r>
  809f04:	80000c15 	stw	zero,48(r16)
  809f08:	81401117 	ldw	r5,68(r16)
  809f0c:	28000326 	beq	r5,zero,809f1c <_fclose_r+0xb4>
  809f10:	8809883a 	mov	r4,r17
  809f14:	08051700 	call	805170 <_free_r>
  809f18:	80001115 	stw	zero,68(r16)
  809f1c:	080500c0 	call	80500c <__sfp_lock_acquire>
  809f20:	8000030d 	sth	zero,12(r16)
  809f24:	08050100 	call	805010 <__sfp_lock_release>
  809f28:	9005883a 	mov	r2,r18
  809f2c:	003fdc06 	br	809ea0 <__alt_mem_epcs_flash_controller_0+0xff800ea0>
  809f30:	0804ffc0 	call	804ffc <__sinit>
  809f34:	003fd706 	br	809e94 <__alt_mem_epcs_flash_controller_0+0xff800e94>
  809f38:	04bfffc4 	movi	r18,-1
  809f3c:	003fe806 	br	809ee0 <__alt_mem_epcs_flash_controller_0+0xff800ee0>
  809f40:	81400417 	ldw	r5,16(r16)
  809f44:	8809883a 	mov	r4,r17
  809f48:	08051700 	call	805170 <_free_r>
  809f4c:	003fe706 	br	809eec <__alt_mem_epcs_flash_controller_0+0xff800eec>
  809f50:	0005883a 	mov	r2,zero
  809f54:	f800283a 	ret

00809f58 <fclose>:
  809f58:	008020b4 	movhi	r2,130
  809f5c:	10b1d504 	addi	r2,r2,-14508
  809f60:	200b883a 	mov	r5,r4
  809f64:	11000017 	ldw	r4,0(r2)
  809f68:	0809e681 	jmpi	809e68 <_fclose_r>

00809f6c <__fputwc>:
  809f6c:	defff804 	addi	sp,sp,-32
  809f70:	dcc00415 	stw	r19,16(sp)
  809f74:	dc800315 	stw	r18,12(sp)
  809f78:	dc000115 	stw	r16,4(sp)
  809f7c:	dfc00715 	stw	ra,28(sp)
  809f80:	dd400615 	stw	r21,24(sp)
  809f84:	dd000515 	stw	r20,20(sp)
  809f88:	dc400215 	stw	r17,8(sp)
  809f8c:	2027883a 	mov	r19,r4
  809f90:	2825883a 	mov	r18,r5
  809f94:	3021883a 	mov	r16,r6
  809f98:	0805b580 	call	805b58 <__locale_mb_cur_max>
  809f9c:	00c00044 	movi	r3,1
  809fa0:	10c03e26 	beq	r2,r3,80a09c <__fputwc+0x130>
  809fa4:	81c01704 	addi	r7,r16,92
  809fa8:	900d883a 	mov	r6,r18
  809fac:	d80b883a 	mov	r5,sp
  809fb0:	9809883a 	mov	r4,r19
  809fb4:	080a2e40 	call	80a2e4 <_wcrtomb_r>
  809fb8:	1029883a 	mov	r20,r2
  809fbc:	00bfffc4 	movi	r2,-1
  809fc0:	a0802026 	beq	r20,r2,80a044 <__fputwc+0xd8>
  809fc4:	d9400003 	ldbu	r5,0(sp)
  809fc8:	a0001c26 	beq	r20,zero,80a03c <__fputwc+0xd0>
  809fcc:	0023883a 	mov	r17,zero
  809fd0:	05400284 	movi	r21,10
  809fd4:	00000906 	br	809ffc <__fputwc+0x90>
  809fd8:	80800017 	ldw	r2,0(r16)
  809fdc:	11400005 	stb	r5,0(r2)
  809fe0:	80c00017 	ldw	r3,0(r16)
  809fe4:	18c00044 	addi	r3,r3,1
  809fe8:	80c00015 	stw	r3,0(r16)
  809fec:	8c400044 	addi	r17,r17,1
  809ff0:	dc45883a 	add	r2,sp,r17
  809ff4:	8d00112e 	bgeu	r17,r20,80a03c <__fputwc+0xd0>
  809ff8:	11400003 	ldbu	r5,0(r2)
  809ffc:	80c00217 	ldw	r3,8(r16)
  80a000:	18ffffc4 	addi	r3,r3,-1
  80a004:	80c00215 	stw	r3,8(r16)
  80a008:	183ff30e 	bge	r3,zero,809fd8 <__alt_mem_epcs_flash_controller_0+0xff800fd8>
  80a00c:	80800617 	ldw	r2,24(r16)
  80a010:	18801916 	blt	r3,r2,80a078 <__fputwc+0x10c>
  80a014:	80800017 	ldw	r2,0(r16)
  80a018:	11400005 	stb	r5,0(r2)
  80a01c:	80800017 	ldw	r2,0(r16)
  80a020:	10c00003 	ldbu	r3,0(r2)
  80a024:	10800044 	addi	r2,r2,1
  80a028:	1d402326 	beq	r3,r21,80a0b8 <__fputwc+0x14c>
  80a02c:	80800015 	stw	r2,0(r16)
  80a030:	8c400044 	addi	r17,r17,1
  80a034:	dc45883a 	add	r2,sp,r17
  80a038:	8d3fef36 	bltu	r17,r20,809ff8 <__alt_mem_epcs_flash_controller_0+0xff800ff8>
  80a03c:	9005883a 	mov	r2,r18
  80a040:	00000406 	br	80a054 <__fputwc+0xe8>
  80a044:	80c0030b 	ldhu	r3,12(r16)
  80a048:	a005883a 	mov	r2,r20
  80a04c:	18c01014 	ori	r3,r3,64
  80a050:	80c0030d 	sth	r3,12(r16)
  80a054:	dfc00717 	ldw	ra,28(sp)
  80a058:	dd400617 	ldw	r21,24(sp)
  80a05c:	dd000517 	ldw	r20,20(sp)
  80a060:	dcc00417 	ldw	r19,16(sp)
  80a064:	dc800317 	ldw	r18,12(sp)
  80a068:	dc400217 	ldw	r17,8(sp)
  80a06c:	dc000117 	ldw	r16,4(sp)
  80a070:	dec00804 	addi	sp,sp,32
  80a074:	f800283a 	ret
  80a078:	800d883a 	mov	r6,r16
  80a07c:	29403fcc 	andi	r5,r5,255
  80a080:	9809883a 	mov	r4,r19
  80a084:	0809b800 	call	809b80 <__swbuf_r>
  80a088:	10bfffe0 	cmpeqi	r2,r2,-1
  80a08c:	10803fcc 	andi	r2,r2,255
  80a090:	103fd626 	beq	r2,zero,809fec <__alt_mem_epcs_flash_controller_0+0xff800fec>
  80a094:	00bfffc4 	movi	r2,-1
  80a098:	003fee06 	br	80a054 <__alt_mem_epcs_flash_controller_0+0xff801054>
  80a09c:	90ffffc4 	addi	r3,r18,-1
  80a0a0:	01003f84 	movi	r4,254
  80a0a4:	20ffbf36 	bltu	r4,r3,809fa4 <__alt_mem_epcs_flash_controller_0+0xff800fa4>
  80a0a8:	900b883a 	mov	r5,r18
  80a0ac:	dc800005 	stb	r18,0(sp)
  80a0b0:	1029883a 	mov	r20,r2
  80a0b4:	003fc506 	br	809fcc <__alt_mem_epcs_flash_controller_0+0xff800fcc>
  80a0b8:	800d883a 	mov	r6,r16
  80a0bc:	a80b883a 	mov	r5,r21
  80a0c0:	9809883a 	mov	r4,r19
  80a0c4:	0809b800 	call	809b80 <__swbuf_r>
  80a0c8:	10bfffe0 	cmpeqi	r2,r2,-1
  80a0cc:	003fef06 	br	80a08c <__alt_mem_epcs_flash_controller_0+0xff80108c>

0080a0d0 <_fputwc_r>:
  80a0d0:	3080030b 	ldhu	r2,12(r6)
  80a0d4:	10c8000c 	andi	r3,r2,8192
  80a0d8:	1800051e 	bne	r3,zero,80a0f0 <_fputwc_r+0x20>
  80a0dc:	30c01917 	ldw	r3,100(r6)
  80a0e0:	10880014 	ori	r2,r2,8192
  80a0e4:	3080030d 	sth	r2,12(r6)
  80a0e8:	18880014 	ori	r2,r3,8192
  80a0ec:	30801915 	stw	r2,100(r6)
  80a0f0:	0809f6c1 	jmpi	809f6c <__fputwc>

0080a0f4 <fputwc>:
  80a0f4:	008020b4 	movhi	r2,130
  80a0f8:	defffc04 	addi	sp,sp,-16
  80a0fc:	10b1d504 	addi	r2,r2,-14508
  80a100:	dc000115 	stw	r16,4(sp)
  80a104:	14000017 	ldw	r16,0(r2)
  80a108:	dc400215 	stw	r17,8(sp)
  80a10c:	dfc00315 	stw	ra,12(sp)
  80a110:	2023883a 	mov	r17,r4
  80a114:	80000226 	beq	r16,zero,80a120 <fputwc+0x2c>
  80a118:	80800e17 	ldw	r2,56(r16)
  80a11c:	10001026 	beq	r2,zero,80a160 <fputwc+0x6c>
  80a120:	2880030b 	ldhu	r2,12(r5)
  80a124:	10c8000c 	andi	r3,r2,8192
  80a128:	1800051e 	bne	r3,zero,80a140 <fputwc+0x4c>
  80a12c:	28c01917 	ldw	r3,100(r5)
  80a130:	10880014 	ori	r2,r2,8192
  80a134:	2880030d 	sth	r2,12(r5)
  80a138:	18880014 	ori	r2,r3,8192
  80a13c:	28801915 	stw	r2,100(r5)
  80a140:	280d883a 	mov	r6,r5
  80a144:	8009883a 	mov	r4,r16
  80a148:	880b883a 	mov	r5,r17
  80a14c:	dfc00317 	ldw	ra,12(sp)
  80a150:	dc400217 	ldw	r17,8(sp)
  80a154:	dc000117 	ldw	r16,4(sp)
  80a158:	dec00404 	addi	sp,sp,16
  80a15c:	0809f6c1 	jmpi	809f6c <__fputwc>
  80a160:	8009883a 	mov	r4,r16
  80a164:	d9400015 	stw	r5,0(sp)
  80a168:	0804ffc0 	call	804ffc <__sinit>
  80a16c:	d9400017 	ldw	r5,0(sp)
  80a170:	003feb06 	br	80a120 <__alt_mem_epcs_flash_controller_0+0xff801120>

0080a174 <_fstat_r>:
  80a174:	defffd04 	addi	sp,sp,-12
  80a178:	2805883a 	mov	r2,r5
  80a17c:	dc000015 	stw	r16,0(sp)
  80a180:	040020b4 	movhi	r16,130
  80a184:	dc400115 	stw	r17,4(sp)
  80a188:	84321304 	addi	r16,r16,-14260
  80a18c:	2023883a 	mov	r17,r4
  80a190:	300b883a 	mov	r5,r6
  80a194:	1009883a 	mov	r4,r2
  80a198:	dfc00215 	stw	ra,8(sp)
  80a19c:	80000015 	stw	zero,0(r16)
  80a1a0:	080dc880 	call	80dc88 <fstat>
  80a1a4:	00ffffc4 	movi	r3,-1
  80a1a8:	10c00526 	beq	r2,r3,80a1c0 <_fstat_r+0x4c>
  80a1ac:	dfc00217 	ldw	ra,8(sp)
  80a1b0:	dc400117 	ldw	r17,4(sp)
  80a1b4:	dc000017 	ldw	r16,0(sp)
  80a1b8:	dec00304 	addi	sp,sp,12
  80a1bc:	f800283a 	ret
  80a1c0:	80c00017 	ldw	r3,0(r16)
  80a1c4:	183ff926 	beq	r3,zero,80a1ac <__alt_mem_epcs_flash_controller_0+0xff8011ac>
  80a1c8:	88c00015 	stw	r3,0(r17)
  80a1cc:	003ff706 	br	80a1ac <__alt_mem_epcs_flash_controller_0+0xff8011ac>

0080a1d0 <_isatty_r>:
  80a1d0:	defffd04 	addi	sp,sp,-12
  80a1d4:	dc000015 	stw	r16,0(sp)
  80a1d8:	040020b4 	movhi	r16,130
  80a1dc:	dc400115 	stw	r17,4(sp)
  80a1e0:	84321304 	addi	r16,r16,-14260
  80a1e4:	2023883a 	mov	r17,r4
  80a1e8:	2809883a 	mov	r4,r5
  80a1ec:	dfc00215 	stw	ra,8(sp)
  80a1f0:	80000015 	stw	zero,0(r16)
  80a1f4:	080e01c0 	call	80e01c <isatty>
  80a1f8:	00ffffc4 	movi	r3,-1
  80a1fc:	10c00526 	beq	r2,r3,80a214 <_isatty_r+0x44>
  80a200:	dfc00217 	ldw	ra,8(sp)
  80a204:	dc400117 	ldw	r17,4(sp)
  80a208:	dc000017 	ldw	r16,0(sp)
  80a20c:	dec00304 	addi	sp,sp,12
  80a210:	f800283a 	ret
  80a214:	80c00017 	ldw	r3,0(r16)
  80a218:	183ff926 	beq	r3,zero,80a200 <__alt_mem_epcs_flash_controller_0+0xff801200>
  80a21c:	88c00015 	stw	r3,0(r17)
  80a220:	003ff706 	br	80a200 <__alt_mem_epcs_flash_controller_0+0xff801200>

0080a224 <_lseek_r>:
  80a224:	defffd04 	addi	sp,sp,-12
  80a228:	2805883a 	mov	r2,r5
  80a22c:	dc000015 	stw	r16,0(sp)
  80a230:	040020b4 	movhi	r16,130
  80a234:	dc400115 	stw	r17,4(sp)
  80a238:	300b883a 	mov	r5,r6
  80a23c:	84321304 	addi	r16,r16,-14260
  80a240:	2023883a 	mov	r17,r4
  80a244:	380d883a 	mov	r6,r7
  80a248:	1009883a 	mov	r4,r2
  80a24c:	dfc00215 	stw	ra,8(sp)
  80a250:	80000015 	stw	zero,0(r16)
  80a254:	080e1040 	call	80e104 <lseek>
  80a258:	00ffffc4 	movi	r3,-1
  80a25c:	10c00526 	beq	r2,r3,80a274 <_lseek_r+0x50>
  80a260:	dfc00217 	ldw	ra,8(sp)
  80a264:	dc400117 	ldw	r17,4(sp)
  80a268:	dc000017 	ldw	r16,0(sp)
  80a26c:	dec00304 	addi	sp,sp,12
  80a270:	f800283a 	ret
  80a274:	80c00017 	ldw	r3,0(r16)
  80a278:	183ff926 	beq	r3,zero,80a260 <__alt_mem_epcs_flash_controller_0+0xff801260>
  80a27c:	88c00015 	stw	r3,0(r17)
  80a280:	003ff706 	br	80a260 <__alt_mem_epcs_flash_controller_0+0xff801260>

0080a284 <_read_r>:
  80a284:	defffd04 	addi	sp,sp,-12
  80a288:	2805883a 	mov	r2,r5
  80a28c:	dc000015 	stw	r16,0(sp)
  80a290:	040020b4 	movhi	r16,130
  80a294:	dc400115 	stw	r17,4(sp)
  80a298:	300b883a 	mov	r5,r6
  80a29c:	84321304 	addi	r16,r16,-14260
  80a2a0:	2023883a 	mov	r17,r4
  80a2a4:	380d883a 	mov	r6,r7
  80a2a8:	1009883a 	mov	r4,r2
  80a2ac:	dfc00215 	stw	ra,8(sp)
  80a2b0:	80000015 	stw	zero,0(r16)
  80a2b4:	080e2d80 	call	80e2d8 <read>
  80a2b8:	00ffffc4 	movi	r3,-1
  80a2bc:	10c00526 	beq	r2,r3,80a2d4 <_read_r+0x50>
  80a2c0:	dfc00217 	ldw	ra,8(sp)
  80a2c4:	dc400117 	ldw	r17,4(sp)
  80a2c8:	dc000017 	ldw	r16,0(sp)
  80a2cc:	dec00304 	addi	sp,sp,12
  80a2d0:	f800283a 	ret
  80a2d4:	80c00017 	ldw	r3,0(r16)
  80a2d8:	183ff926 	beq	r3,zero,80a2c0 <__alt_mem_epcs_flash_controller_0+0xff8012c0>
  80a2dc:	88c00015 	stw	r3,0(r17)
  80a2e0:	003ff706 	br	80a2c0 <__alt_mem_epcs_flash_controller_0+0xff8012c0>

0080a2e4 <_wcrtomb_r>:
  80a2e4:	defff604 	addi	sp,sp,-40
  80a2e8:	008020b4 	movhi	r2,130
  80a2ec:	dc800815 	stw	r18,32(sp)
  80a2f0:	dc400715 	stw	r17,28(sp)
  80a2f4:	dc000615 	stw	r16,24(sp)
  80a2f8:	10b1d904 	addi	r2,r2,-14492
  80a2fc:	dfc00915 	stw	ra,36(sp)
  80a300:	2021883a 	mov	r16,r4
  80a304:	3823883a 	mov	r17,r7
  80a308:	14800017 	ldw	r18,0(r2)
  80a30c:	28001426 	beq	r5,zero,80a360 <_wcrtomb_r+0x7c>
  80a310:	d9400415 	stw	r5,16(sp)
  80a314:	d9800515 	stw	r6,20(sp)
  80a318:	0805b4c0 	call	805b4c <__locale_charset>
  80a31c:	d9800517 	ldw	r6,20(sp)
  80a320:	d9400417 	ldw	r5,16(sp)
  80a324:	100f883a 	mov	r7,r2
  80a328:	dc400015 	stw	r17,0(sp)
  80a32c:	8009883a 	mov	r4,r16
  80a330:	903ee83a 	callr	r18
  80a334:	00ffffc4 	movi	r3,-1
  80a338:	10c0031e 	bne	r2,r3,80a348 <_wcrtomb_r+0x64>
  80a33c:	88000015 	stw	zero,0(r17)
  80a340:	00c02284 	movi	r3,138
  80a344:	80c00015 	stw	r3,0(r16)
  80a348:	dfc00917 	ldw	ra,36(sp)
  80a34c:	dc800817 	ldw	r18,32(sp)
  80a350:	dc400717 	ldw	r17,28(sp)
  80a354:	dc000617 	ldw	r16,24(sp)
  80a358:	dec00a04 	addi	sp,sp,40
  80a35c:	f800283a 	ret
  80a360:	0805b4c0 	call	805b4c <__locale_charset>
  80a364:	100f883a 	mov	r7,r2
  80a368:	dc400015 	stw	r17,0(sp)
  80a36c:	000d883a 	mov	r6,zero
  80a370:	d9400104 	addi	r5,sp,4
  80a374:	8009883a 	mov	r4,r16
  80a378:	903ee83a 	callr	r18
  80a37c:	003fed06 	br	80a334 <__alt_mem_epcs_flash_controller_0+0xff801334>

0080a380 <wcrtomb>:
  80a380:	defff604 	addi	sp,sp,-40
  80a384:	008020b4 	movhi	r2,130
  80a388:	dc800615 	stw	r18,24(sp)
  80a38c:	dc400515 	stw	r17,20(sp)
  80a390:	10b1d504 	addi	r2,r2,-14508
  80a394:	dfc00915 	stw	ra,36(sp)
  80a398:	dd000815 	stw	r20,32(sp)
  80a39c:	dcc00715 	stw	r19,28(sp)
  80a3a0:	dc000415 	stw	r16,16(sp)
  80a3a4:	3025883a 	mov	r18,r6
  80a3a8:	14400017 	ldw	r17,0(r2)
  80a3ac:	20001926 	beq	r4,zero,80a414 <wcrtomb+0x94>
  80a3b0:	008020b4 	movhi	r2,130
  80a3b4:	10b1d904 	addi	r2,r2,-14492
  80a3b8:	15000017 	ldw	r20,0(r2)
  80a3bc:	2021883a 	mov	r16,r4
  80a3c0:	2827883a 	mov	r19,r5
  80a3c4:	0805b4c0 	call	805b4c <__locale_charset>
  80a3c8:	100f883a 	mov	r7,r2
  80a3cc:	dc800015 	stw	r18,0(sp)
  80a3d0:	980d883a 	mov	r6,r19
  80a3d4:	800b883a 	mov	r5,r16
  80a3d8:	8809883a 	mov	r4,r17
  80a3dc:	a03ee83a 	callr	r20
  80a3e0:	00ffffc4 	movi	r3,-1
  80a3e4:	10c0031e 	bne	r2,r3,80a3f4 <wcrtomb+0x74>
  80a3e8:	90000015 	stw	zero,0(r18)
  80a3ec:	00c02284 	movi	r3,138
  80a3f0:	88c00015 	stw	r3,0(r17)
  80a3f4:	dfc00917 	ldw	ra,36(sp)
  80a3f8:	dd000817 	ldw	r20,32(sp)
  80a3fc:	dcc00717 	ldw	r19,28(sp)
  80a400:	dc800617 	ldw	r18,24(sp)
  80a404:	dc400517 	ldw	r17,20(sp)
  80a408:	dc000417 	ldw	r16,16(sp)
  80a40c:	dec00a04 	addi	sp,sp,40
  80a410:	f800283a 	ret
  80a414:	008020b4 	movhi	r2,130
  80a418:	10b1d904 	addi	r2,r2,-14492
  80a41c:	14000017 	ldw	r16,0(r2)
  80a420:	0805b4c0 	call	805b4c <__locale_charset>
  80a424:	100f883a 	mov	r7,r2
  80a428:	dc800015 	stw	r18,0(sp)
  80a42c:	000d883a 	mov	r6,zero
  80a430:	d9400104 	addi	r5,sp,4
  80a434:	8809883a 	mov	r4,r17
  80a438:	803ee83a 	callr	r16
  80a43c:	003fe806 	br	80a3e0 <__alt_mem_epcs_flash_controller_0+0xff8013e0>

0080a440 <__ascii_wctomb>:
  80a440:	28000526 	beq	r5,zero,80a458 <__ascii_wctomb+0x18>
  80a444:	00803fc4 	movi	r2,255
  80a448:	11800536 	bltu	r2,r6,80a460 <__ascii_wctomb+0x20>
  80a44c:	29800005 	stb	r6,0(r5)
  80a450:	00800044 	movi	r2,1
  80a454:	f800283a 	ret
  80a458:	0005883a 	mov	r2,zero
  80a45c:	f800283a 	ret
  80a460:	00802284 	movi	r2,138
  80a464:	20800015 	stw	r2,0(r4)
  80a468:	00bfffc4 	movi	r2,-1
  80a46c:	f800283a 	ret

0080a470 <_wctomb_r>:
  80a470:	008020b4 	movhi	r2,130
  80a474:	defff904 	addi	sp,sp,-28
  80a478:	10b1d904 	addi	r2,r2,-14492
  80a47c:	dfc00615 	stw	ra,24(sp)
  80a480:	dc400515 	stw	r17,20(sp)
  80a484:	dc000415 	stw	r16,16(sp)
  80a488:	3823883a 	mov	r17,r7
  80a48c:	14000017 	ldw	r16,0(r2)
  80a490:	d9000115 	stw	r4,4(sp)
  80a494:	d9400215 	stw	r5,8(sp)
  80a498:	d9800315 	stw	r6,12(sp)
  80a49c:	0805b4c0 	call	805b4c <__locale_charset>
  80a4a0:	d9800317 	ldw	r6,12(sp)
  80a4a4:	d9400217 	ldw	r5,8(sp)
  80a4a8:	d9000117 	ldw	r4,4(sp)
  80a4ac:	100f883a 	mov	r7,r2
  80a4b0:	dc400015 	stw	r17,0(sp)
  80a4b4:	803ee83a 	callr	r16
  80a4b8:	dfc00617 	ldw	ra,24(sp)
  80a4bc:	dc400517 	ldw	r17,20(sp)
  80a4c0:	dc000417 	ldw	r16,16(sp)
  80a4c4:	dec00704 	addi	sp,sp,28
  80a4c8:	f800283a 	ret

0080a4cc <__udivdi3>:
  80a4cc:	defff404 	addi	sp,sp,-48
  80a4d0:	dcc00515 	stw	r19,20(sp)
  80a4d4:	dc000215 	stw	r16,8(sp)
  80a4d8:	dfc00b15 	stw	ra,44(sp)
  80a4dc:	df000a15 	stw	fp,40(sp)
  80a4e0:	ddc00915 	stw	r23,36(sp)
  80a4e4:	dd800815 	stw	r22,32(sp)
  80a4e8:	dd400715 	stw	r21,28(sp)
  80a4ec:	dd000615 	stw	r20,24(sp)
  80a4f0:	dc800415 	stw	r18,16(sp)
  80a4f4:	dc400315 	stw	r17,12(sp)
  80a4f8:	2027883a 	mov	r19,r4
  80a4fc:	2821883a 	mov	r16,r5
  80a500:	3800461e 	bne	r7,zero,80a61c <__udivdi3+0x150>
  80a504:	3023883a 	mov	r17,r6
  80a508:	2025883a 	mov	r18,r4
  80a50c:	2980572e 	bgeu	r5,r6,80a66c <__udivdi3+0x1a0>
  80a510:	00bfffd4 	movui	r2,65535
  80a514:	282d883a 	mov	r22,r5
  80a518:	1180b236 	bltu	r2,r6,80a7e4 <__udivdi3+0x318>
  80a51c:	00803fc4 	movi	r2,255
  80a520:	1185803a 	cmpltu	r2,r2,r6
  80a524:	100490fa 	slli	r2,r2,3
  80a528:	3086d83a 	srl	r3,r6,r2
  80a52c:	010020b4 	movhi	r4,130
  80a530:	2129c904 	addi	r4,r4,-22748
  80a534:	20c7883a 	add	r3,r4,r3
  80a538:	18c00003 	ldbu	r3,0(r3)
  80a53c:	1885883a 	add	r2,r3,r2
  80a540:	00c00804 	movi	r3,32
  80a544:	1887c83a 	sub	r3,r3,r2
  80a548:	18000526 	beq	r3,zero,80a560 <__udivdi3+0x94>
  80a54c:	80e0983a 	sll	r16,r16,r3
  80a550:	9884d83a 	srl	r2,r19,r2
  80a554:	30e2983a 	sll	r17,r6,r3
  80a558:	98e4983a 	sll	r18,r19,r3
  80a55c:	142cb03a 	or	r22,r2,r16
  80a560:	882ad43a 	srli	r21,r17,16
  80a564:	b009883a 	mov	r4,r22
  80a568:	8d3fffcc 	andi	r20,r17,65535
  80a56c:	a80b883a 	mov	r5,r21
  80a570:	080b1e80 	call	80b1e8 <__umodsi3>
  80a574:	b009883a 	mov	r4,r22
  80a578:	a80b883a 	mov	r5,r21
  80a57c:	1027883a 	mov	r19,r2
  80a580:	080b1840 	call	80b184 <__udivsi3>
  80a584:	100b883a 	mov	r5,r2
  80a588:	a009883a 	mov	r4,r20
  80a58c:	102d883a 	mov	r22,r2
  80a590:	080b2400 	call	80b240 <__mulsi3>
  80a594:	9826943a 	slli	r19,r19,16
  80a598:	9006d43a 	srli	r3,r18,16
  80a59c:	1cc6b03a 	or	r3,r3,r19
  80a5a0:	1880052e 	bgeu	r3,r2,80a5b8 <__udivdi3+0xec>
  80a5a4:	1c47883a 	add	r3,r3,r17
  80a5a8:	b13fffc4 	addi	r4,r22,-1
  80a5ac:	1c400136 	bltu	r3,r17,80a5b4 <__udivdi3+0xe8>
  80a5b0:	18814236 	bltu	r3,r2,80aabc <__udivdi3+0x5f0>
  80a5b4:	202d883a 	mov	r22,r4
  80a5b8:	18a1c83a 	sub	r16,r3,r2
  80a5bc:	8009883a 	mov	r4,r16
  80a5c0:	a80b883a 	mov	r5,r21
  80a5c4:	080b1e80 	call	80b1e8 <__umodsi3>
  80a5c8:	1027883a 	mov	r19,r2
  80a5cc:	8009883a 	mov	r4,r16
  80a5d0:	a80b883a 	mov	r5,r21
  80a5d4:	9826943a 	slli	r19,r19,16
  80a5d8:	080b1840 	call	80b184 <__udivsi3>
  80a5dc:	100b883a 	mov	r5,r2
  80a5e0:	a009883a 	mov	r4,r20
  80a5e4:	94bfffcc 	andi	r18,r18,65535
  80a5e8:	1021883a 	mov	r16,r2
  80a5ec:	94e4b03a 	or	r18,r18,r19
  80a5f0:	080b2400 	call	80b240 <__mulsi3>
  80a5f4:	9080052e 	bgeu	r18,r2,80a60c <__udivdi3+0x140>
  80a5f8:	8ca5883a 	add	r18,r17,r18
  80a5fc:	80ffffc4 	addi	r3,r16,-1
  80a600:	94410c36 	bltu	r18,r17,80aa34 <__udivdi3+0x568>
  80a604:	90810b2e 	bgeu	r18,r2,80aa34 <__udivdi3+0x568>
  80a608:	843fff84 	addi	r16,r16,-2
  80a60c:	b004943a 	slli	r2,r22,16
  80a610:	0007883a 	mov	r3,zero
  80a614:	1404b03a 	or	r2,r2,r16
  80a618:	00005e06 	br	80a794 <__udivdi3+0x2c8>
  80a61c:	29c05b36 	bltu	r5,r7,80a78c <__udivdi3+0x2c0>
  80a620:	00bfffd4 	movui	r2,65535
  80a624:	11c0672e 	bgeu	r2,r7,80a7c4 <__udivdi3+0x2f8>
  80a628:	00804034 	movhi	r2,256
  80a62c:	10bfffc4 	addi	r2,r2,-1
  80a630:	11c10a36 	bltu	r2,r7,80aa5c <__udivdi3+0x590>
  80a634:	00800404 	movi	r2,16
  80a638:	3886d83a 	srl	r3,r7,r2
  80a63c:	010020b4 	movhi	r4,130
  80a640:	2129c904 	addi	r4,r4,-22748
  80a644:	20c7883a 	add	r3,r4,r3
  80a648:	18c00003 	ldbu	r3,0(r3)
  80a64c:	05c00804 	movi	r23,32
  80a650:	1885883a 	add	r2,r3,r2
  80a654:	b8afc83a 	sub	r23,r23,r2
  80a658:	b800671e 	bne	r23,zero,80a7f8 <__udivdi3+0x32c>
  80a65c:	3c010536 	bltu	r7,r16,80aa74 <__udivdi3+0x5a8>
  80a660:	9985403a 	cmpgeu	r2,r19,r6
  80a664:	0007883a 	mov	r3,zero
  80a668:	00004a06 	br	80a794 <__udivdi3+0x2c8>
  80a66c:	3000041e 	bne	r6,zero,80a680 <__udivdi3+0x1b4>
  80a670:	000b883a 	mov	r5,zero
  80a674:	01000044 	movi	r4,1
  80a678:	080b1840 	call	80b184 <__udivsi3>
  80a67c:	1023883a 	mov	r17,r2
  80a680:	00bfffd4 	movui	r2,65535
  80a684:	1440532e 	bgeu	r2,r17,80a7d4 <__udivdi3+0x308>
  80a688:	00804034 	movhi	r2,256
  80a68c:	10bfffc4 	addi	r2,r2,-1
  80a690:	1440f436 	bltu	r2,r17,80aa64 <__udivdi3+0x598>
  80a694:	00800404 	movi	r2,16
  80a698:	8886d83a 	srl	r3,r17,r2
  80a69c:	010020b4 	movhi	r4,130
  80a6a0:	2129c904 	addi	r4,r4,-22748
  80a6a4:	20c7883a 	add	r3,r4,r3
  80a6a8:	18c00003 	ldbu	r3,0(r3)
  80a6ac:	1885883a 	add	r2,r3,r2
  80a6b0:	00c00804 	movi	r3,32
  80a6b4:	1887c83a 	sub	r3,r3,r2
  80a6b8:	1800a51e 	bne	r3,zero,80a950 <__udivdi3+0x484>
  80a6bc:	882ad43a 	srli	r21,r17,16
  80a6c0:	8461c83a 	sub	r16,r16,r17
  80a6c4:	8d3fffcc 	andi	r20,r17,65535
  80a6c8:	00c00044 	movi	r3,1
  80a6cc:	a80b883a 	mov	r5,r21
  80a6d0:	8009883a 	mov	r4,r16
  80a6d4:	d8c00115 	stw	r3,4(sp)
  80a6d8:	080b1e80 	call	80b1e8 <__umodsi3>
  80a6dc:	a80b883a 	mov	r5,r21
  80a6e0:	8009883a 	mov	r4,r16
  80a6e4:	1027883a 	mov	r19,r2
  80a6e8:	080b1840 	call	80b184 <__udivsi3>
  80a6ec:	a00b883a 	mov	r5,r20
  80a6f0:	1009883a 	mov	r4,r2
  80a6f4:	102d883a 	mov	r22,r2
  80a6f8:	080b2400 	call	80b240 <__mulsi3>
  80a6fc:	9826943a 	slli	r19,r19,16
  80a700:	900ed43a 	srli	r7,r18,16
  80a704:	d8c00117 	ldw	r3,4(sp)
  80a708:	3cceb03a 	or	r7,r7,r19
  80a70c:	3880052e 	bgeu	r7,r2,80a724 <__udivdi3+0x258>
  80a710:	3c4f883a 	add	r7,r7,r17
  80a714:	b13fffc4 	addi	r4,r22,-1
  80a718:	3c400136 	bltu	r7,r17,80a720 <__udivdi3+0x254>
  80a71c:	3880e436 	bltu	r7,r2,80aab0 <__udivdi3+0x5e4>
  80a720:	202d883a 	mov	r22,r4
  80a724:	38a1c83a 	sub	r16,r7,r2
  80a728:	8009883a 	mov	r4,r16
  80a72c:	a80b883a 	mov	r5,r21
  80a730:	d8c00115 	stw	r3,4(sp)
  80a734:	080b1e80 	call	80b1e8 <__umodsi3>
  80a738:	1027883a 	mov	r19,r2
  80a73c:	8009883a 	mov	r4,r16
  80a740:	a80b883a 	mov	r5,r21
  80a744:	9826943a 	slli	r19,r19,16
  80a748:	080b1840 	call	80b184 <__udivsi3>
  80a74c:	a00b883a 	mov	r5,r20
  80a750:	1009883a 	mov	r4,r2
  80a754:	94bfffcc 	andi	r18,r18,65535
  80a758:	1021883a 	mov	r16,r2
  80a75c:	94e4b03a 	or	r18,r18,r19
  80a760:	080b2400 	call	80b240 <__mulsi3>
  80a764:	d8c00117 	ldw	r3,4(sp)
  80a768:	9080052e 	bgeu	r18,r2,80a780 <__udivdi3+0x2b4>
  80a76c:	8ca5883a 	add	r18,r17,r18
  80a770:	813fffc4 	addi	r4,r16,-1
  80a774:	9440ad36 	bltu	r18,r17,80aa2c <__udivdi3+0x560>
  80a778:	9080ac2e 	bgeu	r18,r2,80aa2c <__udivdi3+0x560>
  80a77c:	843fff84 	addi	r16,r16,-2
  80a780:	b004943a 	slli	r2,r22,16
  80a784:	1404b03a 	or	r2,r2,r16
  80a788:	00000206 	br	80a794 <__udivdi3+0x2c8>
  80a78c:	0007883a 	mov	r3,zero
  80a790:	0005883a 	mov	r2,zero
  80a794:	dfc00b17 	ldw	ra,44(sp)
  80a798:	df000a17 	ldw	fp,40(sp)
  80a79c:	ddc00917 	ldw	r23,36(sp)
  80a7a0:	dd800817 	ldw	r22,32(sp)
  80a7a4:	dd400717 	ldw	r21,28(sp)
  80a7a8:	dd000617 	ldw	r20,24(sp)
  80a7ac:	dcc00517 	ldw	r19,20(sp)
  80a7b0:	dc800417 	ldw	r18,16(sp)
  80a7b4:	dc400317 	ldw	r17,12(sp)
  80a7b8:	dc000217 	ldw	r16,8(sp)
  80a7bc:	dec00c04 	addi	sp,sp,48
  80a7c0:	f800283a 	ret
  80a7c4:	00803fc4 	movi	r2,255
  80a7c8:	11c5803a 	cmpltu	r2,r2,r7
  80a7cc:	100490fa 	slli	r2,r2,3
  80a7d0:	003f9906 	br	80a638 <__alt_mem_epcs_flash_controller_0+0xff801638>
  80a7d4:	00803fc4 	movi	r2,255
  80a7d8:	1445803a 	cmpltu	r2,r2,r17
  80a7dc:	100490fa 	slli	r2,r2,3
  80a7e0:	003fad06 	br	80a698 <__alt_mem_epcs_flash_controller_0+0xff801698>
  80a7e4:	00804034 	movhi	r2,256
  80a7e8:	10bfffc4 	addi	r2,r2,-1
  80a7ec:	11809f36 	bltu	r2,r6,80aa6c <__udivdi3+0x5a0>
  80a7f0:	00800404 	movi	r2,16
  80a7f4:	003f4c06 	br	80a528 <__alt_mem_epcs_flash_controller_0+0xff801528>
  80a7f8:	3dce983a 	sll	r7,r7,r23
  80a7fc:	30b8d83a 	srl	fp,r6,r2
  80a800:	80a2d83a 	srl	r17,r16,r2
  80a804:	35cc983a 	sll	r6,r6,r23
  80a808:	3f38b03a 	or	fp,r7,fp
  80a80c:	e024d43a 	srli	r18,fp,16
  80a810:	9884d83a 	srl	r2,r19,r2
  80a814:	85e0983a 	sll	r16,r16,r23
  80a818:	8809883a 	mov	r4,r17
  80a81c:	900b883a 	mov	r5,r18
  80a820:	d9800015 	stw	r6,0(sp)
  80a824:	1420b03a 	or	r16,r2,r16
  80a828:	080b1e80 	call	80b1e8 <__umodsi3>
  80a82c:	900b883a 	mov	r5,r18
  80a830:	8809883a 	mov	r4,r17
  80a834:	1029883a 	mov	r20,r2
  80a838:	e5bfffcc 	andi	r22,fp,65535
  80a83c:	080b1840 	call	80b184 <__udivsi3>
  80a840:	100b883a 	mov	r5,r2
  80a844:	b009883a 	mov	r4,r22
  80a848:	102b883a 	mov	r21,r2
  80a84c:	080b2400 	call	80b240 <__mulsi3>
  80a850:	a028943a 	slli	r20,r20,16
  80a854:	8006d43a 	srli	r3,r16,16
  80a858:	1d06b03a 	or	r3,r3,r20
  80a85c:	1880042e 	bgeu	r3,r2,80a870 <__udivdi3+0x3a4>
  80a860:	1f07883a 	add	r3,r3,fp
  80a864:	a93fffc4 	addi	r4,r21,-1
  80a868:	1f00892e 	bgeu	r3,fp,80aa90 <__udivdi3+0x5c4>
  80a86c:	202b883a 	mov	r21,r4
  80a870:	18a3c83a 	sub	r17,r3,r2
  80a874:	8809883a 	mov	r4,r17
  80a878:	900b883a 	mov	r5,r18
  80a87c:	080b1e80 	call	80b1e8 <__umodsi3>
  80a880:	1029883a 	mov	r20,r2
  80a884:	8809883a 	mov	r4,r17
  80a888:	900b883a 	mov	r5,r18
  80a88c:	a028943a 	slli	r20,r20,16
  80a890:	080b1840 	call	80b184 <__udivsi3>
  80a894:	100b883a 	mov	r5,r2
  80a898:	b009883a 	mov	r4,r22
  80a89c:	843fffcc 	andi	r16,r16,65535
  80a8a0:	1023883a 	mov	r17,r2
  80a8a4:	8520b03a 	or	r16,r16,r20
  80a8a8:	080b2400 	call	80b240 <__mulsi3>
  80a8ac:	8080042e 	bgeu	r16,r2,80a8c0 <__udivdi3+0x3f4>
  80a8b0:	8721883a 	add	r16,r16,fp
  80a8b4:	88ffffc4 	addi	r3,r17,-1
  80a8b8:	8700712e 	bgeu	r16,fp,80aa80 <__udivdi3+0x5b4>
  80a8bc:	1823883a 	mov	r17,r3
  80a8c0:	a80e943a 	slli	r7,r21,16
  80a8c4:	d8c00017 	ldw	r3,0(sp)
  80a8c8:	80a1c83a 	sub	r16,r16,r2
  80a8cc:	3c64b03a 	or	r18,r7,r17
  80a8d0:	1d3fffcc 	andi	r20,r3,65535
  80a8d4:	9022d43a 	srli	r17,r18,16
  80a8d8:	95bfffcc 	andi	r22,r18,65535
  80a8dc:	a00b883a 	mov	r5,r20
  80a8e0:	b009883a 	mov	r4,r22
  80a8e4:	182ad43a 	srli	r21,r3,16
  80a8e8:	080b2400 	call	80b240 <__mulsi3>
  80a8ec:	a00b883a 	mov	r5,r20
  80a8f0:	8809883a 	mov	r4,r17
  80a8f4:	1039883a 	mov	fp,r2
  80a8f8:	080b2400 	call	80b240 <__mulsi3>
  80a8fc:	8809883a 	mov	r4,r17
  80a900:	a80b883a 	mov	r5,r21
  80a904:	1029883a 	mov	r20,r2
  80a908:	080b2400 	call	80b240 <__mulsi3>
  80a90c:	a80b883a 	mov	r5,r21
  80a910:	b009883a 	mov	r4,r22
  80a914:	1023883a 	mov	r17,r2
  80a918:	080b2400 	call	80b240 <__mulsi3>
  80a91c:	e006d43a 	srli	r3,fp,16
  80a920:	1505883a 	add	r2,r2,r20
  80a924:	1887883a 	add	r3,r3,r2
  80a928:	1d00022e 	bgeu	r3,r20,80a934 <__udivdi3+0x468>
  80a92c:	00800074 	movhi	r2,1
  80a930:	88a3883a 	add	r17,r17,r2
  80a934:	1804d43a 	srli	r2,r3,16
  80a938:	1463883a 	add	r17,r2,r17
  80a93c:	84404436 	bltu	r16,r17,80aa50 <__udivdi3+0x584>
  80a940:	84403e26 	beq	r16,r17,80aa3c <__udivdi3+0x570>
  80a944:	9005883a 	mov	r2,r18
  80a948:	0007883a 	mov	r3,zero
  80a94c:	003f9106 	br	80a794 <__alt_mem_epcs_flash_controller_0+0xff801794>
  80a950:	88e2983a 	sll	r17,r17,r3
  80a954:	80aed83a 	srl	r23,r16,r2
  80a958:	80e0983a 	sll	r16,r16,r3
  80a95c:	882ad43a 	srli	r21,r17,16
  80a960:	9884d83a 	srl	r2,r19,r2
  80a964:	b809883a 	mov	r4,r23
  80a968:	a80b883a 	mov	r5,r21
  80a96c:	98e4983a 	sll	r18,r19,r3
  80a970:	142cb03a 	or	r22,r2,r16
  80a974:	080b1e80 	call	80b1e8 <__umodsi3>
  80a978:	b809883a 	mov	r4,r23
  80a97c:	a80b883a 	mov	r5,r21
  80a980:	1027883a 	mov	r19,r2
  80a984:	8d3fffcc 	andi	r20,r17,65535
  80a988:	080b1840 	call	80b184 <__udivsi3>
  80a98c:	a009883a 	mov	r4,r20
  80a990:	100b883a 	mov	r5,r2
  80a994:	102f883a 	mov	r23,r2
  80a998:	080b2400 	call	80b240 <__mulsi3>
  80a99c:	9826943a 	slli	r19,r19,16
  80a9a0:	b008d43a 	srli	r4,r22,16
  80a9a4:	24c8b03a 	or	r4,r4,r19
  80a9a8:	2080062e 	bgeu	r4,r2,80a9c4 <__udivdi3+0x4f8>
  80a9ac:	2449883a 	add	r4,r4,r17
  80a9b0:	b8ffffc4 	addi	r3,r23,-1
  80a9b4:	24403c36 	bltu	r4,r17,80aaa8 <__udivdi3+0x5dc>
  80a9b8:	20803b2e 	bgeu	r4,r2,80aaa8 <__udivdi3+0x5dc>
  80a9bc:	bdffff84 	addi	r23,r23,-2
  80a9c0:	2449883a 	add	r4,r4,r17
  80a9c4:	20a1c83a 	sub	r16,r4,r2
  80a9c8:	a80b883a 	mov	r5,r21
  80a9cc:	8009883a 	mov	r4,r16
  80a9d0:	080b1e80 	call	80b1e8 <__umodsi3>
  80a9d4:	a80b883a 	mov	r5,r21
  80a9d8:	8009883a 	mov	r4,r16
  80a9dc:	1027883a 	mov	r19,r2
  80a9e0:	080b1840 	call	80b184 <__udivsi3>
  80a9e4:	a009883a 	mov	r4,r20
  80a9e8:	100b883a 	mov	r5,r2
  80a9ec:	9826943a 	slli	r19,r19,16
  80a9f0:	1039883a 	mov	fp,r2
  80a9f4:	080b2400 	call	80b240 <__mulsi3>
  80a9f8:	b13fffcc 	andi	r4,r22,65535
  80a9fc:	24c8b03a 	or	r4,r4,r19
  80aa00:	2080062e 	bgeu	r4,r2,80aa1c <__udivdi3+0x550>
  80aa04:	2449883a 	add	r4,r4,r17
  80aa08:	e0ffffc4 	addi	r3,fp,-1
  80aa0c:	24402436 	bltu	r4,r17,80aaa0 <__udivdi3+0x5d4>
  80aa10:	2080232e 	bgeu	r4,r2,80aaa0 <__udivdi3+0x5d4>
  80aa14:	e73fff84 	addi	fp,fp,-2
  80aa18:	2449883a 	add	r4,r4,r17
  80aa1c:	b82e943a 	slli	r23,r23,16
  80aa20:	20a1c83a 	sub	r16,r4,r2
  80aa24:	bf06b03a 	or	r3,r23,fp
  80aa28:	003f2806 	br	80a6cc <__alt_mem_epcs_flash_controller_0+0xff8016cc>
  80aa2c:	2021883a 	mov	r16,r4
  80aa30:	003f5306 	br	80a780 <__alt_mem_epcs_flash_controller_0+0xff801780>
  80aa34:	1821883a 	mov	r16,r3
  80aa38:	003ef406 	br	80a60c <__alt_mem_epcs_flash_controller_0+0xff80160c>
  80aa3c:	1806943a 	slli	r3,r3,16
  80aa40:	9de6983a 	sll	r19,r19,r23
  80aa44:	e73fffcc 	andi	fp,fp,65535
  80aa48:	1f07883a 	add	r3,r3,fp
  80aa4c:	98ffbd2e 	bgeu	r19,r3,80a944 <__alt_mem_epcs_flash_controller_0+0xff801944>
  80aa50:	90bfffc4 	addi	r2,r18,-1
  80aa54:	0007883a 	mov	r3,zero
  80aa58:	003f4e06 	br	80a794 <__alt_mem_epcs_flash_controller_0+0xff801794>
  80aa5c:	00800604 	movi	r2,24
  80aa60:	003ef506 	br	80a638 <__alt_mem_epcs_flash_controller_0+0xff801638>
  80aa64:	00800604 	movi	r2,24
  80aa68:	003f0b06 	br	80a698 <__alt_mem_epcs_flash_controller_0+0xff801698>
  80aa6c:	00800604 	movi	r2,24
  80aa70:	003ead06 	br	80a528 <__alt_mem_epcs_flash_controller_0+0xff801528>
  80aa74:	0007883a 	mov	r3,zero
  80aa78:	00800044 	movi	r2,1
  80aa7c:	003f4506 	br	80a794 <__alt_mem_epcs_flash_controller_0+0xff801794>
  80aa80:	80bf8e2e 	bgeu	r16,r2,80a8bc <__alt_mem_epcs_flash_controller_0+0xff8018bc>
  80aa84:	8c7fff84 	addi	r17,r17,-2
  80aa88:	8721883a 	add	r16,r16,fp
  80aa8c:	003f8c06 	br	80a8c0 <__alt_mem_epcs_flash_controller_0+0xff8018c0>
  80aa90:	18bf762e 	bgeu	r3,r2,80a86c <__alt_mem_epcs_flash_controller_0+0xff80186c>
  80aa94:	ad7fff84 	addi	r21,r21,-2
  80aa98:	1f07883a 	add	r3,r3,fp
  80aa9c:	003f7406 	br	80a870 <__alt_mem_epcs_flash_controller_0+0xff801870>
  80aaa0:	1839883a 	mov	fp,r3
  80aaa4:	003fdd06 	br	80aa1c <__alt_mem_epcs_flash_controller_0+0xff801a1c>
  80aaa8:	182f883a 	mov	r23,r3
  80aaac:	003fc506 	br	80a9c4 <__alt_mem_epcs_flash_controller_0+0xff8019c4>
  80aab0:	b5bfff84 	addi	r22,r22,-2
  80aab4:	3c4f883a 	add	r7,r7,r17
  80aab8:	003f1a06 	br	80a724 <__alt_mem_epcs_flash_controller_0+0xff801724>
  80aabc:	b5bfff84 	addi	r22,r22,-2
  80aac0:	1c47883a 	add	r3,r3,r17
  80aac4:	003ebc06 	br	80a5b8 <__alt_mem_epcs_flash_controller_0+0xff8015b8>

0080aac8 <__umoddi3>:
  80aac8:	defff304 	addi	sp,sp,-52
  80aacc:	df000b15 	stw	fp,44(sp)
  80aad0:	dc400415 	stw	r17,16(sp)
  80aad4:	dc000315 	stw	r16,12(sp)
  80aad8:	dfc00c15 	stw	ra,48(sp)
  80aadc:	ddc00a15 	stw	r23,40(sp)
  80aae0:	dd800915 	stw	r22,36(sp)
  80aae4:	dd400815 	stw	r21,32(sp)
  80aae8:	dd000715 	stw	r20,28(sp)
  80aaec:	dcc00615 	stw	r19,24(sp)
  80aaf0:	dc800515 	stw	r18,20(sp)
  80aaf4:	2021883a 	mov	r16,r4
  80aaf8:	2823883a 	mov	r17,r5
  80aafc:	2839883a 	mov	fp,r5
  80ab00:	3800401e 	bne	r7,zero,80ac04 <__umoddi3+0x13c>
  80ab04:	3027883a 	mov	r19,r6
  80ab08:	2029883a 	mov	r20,r4
  80ab0c:	2980552e 	bgeu	r5,r6,80ac64 <__umoddi3+0x19c>
  80ab10:	00bfffd4 	movui	r2,65535
  80ab14:	1180a236 	bltu	r2,r6,80ada0 <__umoddi3+0x2d8>
  80ab18:	01003fc4 	movi	r4,255
  80ab1c:	2189803a 	cmpltu	r4,r4,r6
  80ab20:	200890fa 	slli	r4,r4,3
  80ab24:	3104d83a 	srl	r2,r6,r4
  80ab28:	00c020b4 	movhi	r3,130
  80ab2c:	18e9c904 	addi	r3,r3,-22748
  80ab30:	1885883a 	add	r2,r3,r2
  80ab34:	10c00003 	ldbu	r3,0(r2)
  80ab38:	00800804 	movi	r2,32
  80ab3c:	1909883a 	add	r4,r3,r4
  80ab40:	1125c83a 	sub	r18,r2,r4
  80ab44:	90000526 	beq	r18,zero,80ab5c <__umoddi3+0x94>
  80ab48:	8ca2983a 	sll	r17,r17,r18
  80ab4c:	8108d83a 	srl	r4,r16,r4
  80ab50:	34a6983a 	sll	r19,r6,r18
  80ab54:	84a8983a 	sll	r20,r16,r18
  80ab58:	2478b03a 	or	fp,r4,r17
  80ab5c:	982cd43a 	srli	r22,r19,16
  80ab60:	e009883a 	mov	r4,fp
  80ab64:	9dffffcc 	andi	r23,r19,65535
  80ab68:	b00b883a 	mov	r5,r22
  80ab6c:	080b1e80 	call	80b1e8 <__umodsi3>
  80ab70:	b00b883a 	mov	r5,r22
  80ab74:	e009883a 	mov	r4,fp
  80ab78:	102b883a 	mov	r21,r2
  80ab7c:	080b1840 	call	80b184 <__udivsi3>
  80ab80:	100b883a 	mov	r5,r2
  80ab84:	b809883a 	mov	r4,r23
  80ab88:	080b2400 	call	80b240 <__mulsi3>
  80ab8c:	a82a943a 	slli	r21,r21,16
  80ab90:	a006d43a 	srli	r3,r20,16
  80ab94:	1d46b03a 	or	r3,r3,r21
  80ab98:	1880032e 	bgeu	r3,r2,80aba8 <__umoddi3+0xe0>
  80ab9c:	1cc7883a 	add	r3,r3,r19
  80aba0:	1cc00136 	bltu	r3,r19,80aba8 <__umoddi3+0xe0>
  80aba4:	18813136 	bltu	r3,r2,80b06c <__umoddi3+0x5a4>
  80aba8:	18a1c83a 	sub	r16,r3,r2
  80abac:	b00b883a 	mov	r5,r22
  80abb0:	8009883a 	mov	r4,r16
  80abb4:	080b1e80 	call	80b1e8 <__umodsi3>
  80abb8:	b00b883a 	mov	r5,r22
  80abbc:	8009883a 	mov	r4,r16
  80abc0:	1023883a 	mov	r17,r2
  80abc4:	080b1840 	call	80b184 <__udivsi3>
  80abc8:	100b883a 	mov	r5,r2
  80abcc:	b809883a 	mov	r4,r23
  80abd0:	8822943a 	slli	r17,r17,16
  80abd4:	080b2400 	call	80b240 <__mulsi3>
  80abd8:	a0ffffcc 	andi	r3,r20,65535
  80abdc:	1c46b03a 	or	r3,r3,r17
  80abe0:	1880042e 	bgeu	r3,r2,80abf4 <__umoddi3+0x12c>
  80abe4:	1cc7883a 	add	r3,r3,r19
  80abe8:	1cc00236 	bltu	r3,r19,80abf4 <__umoddi3+0x12c>
  80abec:	1880012e 	bgeu	r3,r2,80abf4 <__umoddi3+0x12c>
  80abf0:	1cc7883a 	add	r3,r3,r19
  80abf4:	1885c83a 	sub	r2,r3,r2
  80abf8:	1484d83a 	srl	r2,r2,r18
  80abfc:	0007883a 	mov	r3,zero
  80ac00:	00005306 	br	80ad50 <__umoddi3+0x288>
  80ac04:	29c05036 	bltu	r5,r7,80ad48 <__umoddi3+0x280>
  80ac08:	00bfffd4 	movui	r2,65535
  80ac0c:	11c05c2e 	bgeu	r2,r7,80ad80 <__umoddi3+0x2b8>
  80ac10:	00804034 	movhi	r2,256
  80ac14:	10bfffc4 	addi	r2,r2,-1
  80ac18:	11c10636 	bltu	r2,r7,80b034 <__umoddi3+0x56c>
  80ac1c:	01000404 	movi	r4,16
  80ac20:	3904d83a 	srl	r2,r7,r4
  80ac24:	00c020b4 	movhi	r3,130
  80ac28:	18e9c904 	addi	r3,r3,-22748
  80ac2c:	1885883a 	add	r2,r3,r2
  80ac30:	14c00003 	ldbu	r19,0(r2)
  80ac34:	00c00804 	movi	r3,32
  80ac38:	9927883a 	add	r19,r19,r4
  80ac3c:	1ce9c83a 	sub	r20,r3,r19
  80ac40:	a0005c1e 	bne	r20,zero,80adb4 <__umoddi3+0x2ec>
  80ac44:	3c400136 	bltu	r7,r17,80ac4c <__umoddi3+0x184>
  80ac48:	81810a36 	bltu	r16,r6,80b074 <__umoddi3+0x5ac>
  80ac4c:	8185c83a 	sub	r2,r16,r6
  80ac50:	89e3c83a 	sub	r17,r17,r7
  80ac54:	8089803a 	cmpltu	r4,r16,r2
  80ac58:	8939c83a 	sub	fp,r17,r4
  80ac5c:	e007883a 	mov	r3,fp
  80ac60:	00003b06 	br	80ad50 <__umoddi3+0x288>
  80ac64:	3000041e 	bne	r6,zero,80ac78 <__umoddi3+0x1b0>
  80ac68:	000b883a 	mov	r5,zero
  80ac6c:	01000044 	movi	r4,1
  80ac70:	080b1840 	call	80b184 <__udivsi3>
  80ac74:	1027883a 	mov	r19,r2
  80ac78:	00bfffd4 	movui	r2,65535
  80ac7c:	14c0442e 	bgeu	r2,r19,80ad90 <__umoddi3+0x2c8>
  80ac80:	00804034 	movhi	r2,256
  80ac84:	10bfffc4 	addi	r2,r2,-1
  80ac88:	14c0ec36 	bltu	r2,r19,80b03c <__umoddi3+0x574>
  80ac8c:	00800404 	movi	r2,16
  80ac90:	9886d83a 	srl	r3,r19,r2
  80ac94:	010020b4 	movhi	r4,130
  80ac98:	2129c904 	addi	r4,r4,-22748
  80ac9c:	20c7883a 	add	r3,r4,r3
  80aca0:	18c00003 	ldbu	r3,0(r3)
  80aca4:	1887883a 	add	r3,r3,r2
  80aca8:	00800804 	movi	r2,32
  80acac:	10e5c83a 	sub	r18,r2,r3
  80acb0:	9000ab1e 	bne	r18,zero,80af60 <__umoddi3+0x498>
  80acb4:	982cd43a 	srli	r22,r19,16
  80acb8:	8ce3c83a 	sub	r17,r17,r19
  80acbc:	9dffffcc 	andi	r23,r19,65535
  80acc0:	b00b883a 	mov	r5,r22
  80acc4:	8809883a 	mov	r4,r17
  80acc8:	080b1e80 	call	80b1e8 <__umodsi3>
  80accc:	b00b883a 	mov	r5,r22
  80acd0:	8809883a 	mov	r4,r17
  80acd4:	102b883a 	mov	r21,r2
  80acd8:	080b1840 	call	80b184 <__udivsi3>
  80acdc:	b80b883a 	mov	r5,r23
  80ace0:	1009883a 	mov	r4,r2
  80ace4:	080b2400 	call	80b240 <__mulsi3>
  80ace8:	a82a943a 	slli	r21,r21,16
  80acec:	a006d43a 	srli	r3,r20,16
  80acf0:	1d46b03a 	or	r3,r3,r21
  80acf4:	1880042e 	bgeu	r3,r2,80ad08 <__umoddi3+0x240>
  80acf8:	1cc7883a 	add	r3,r3,r19
  80acfc:	1cc00236 	bltu	r3,r19,80ad08 <__umoddi3+0x240>
  80ad00:	1880012e 	bgeu	r3,r2,80ad08 <__umoddi3+0x240>
  80ad04:	1cc7883a 	add	r3,r3,r19
  80ad08:	18a1c83a 	sub	r16,r3,r2
  80ad0c:	b00b883a 	mov	r5,r22
  80ad10:	8009883a 	mov	r4,r16
  80ad14:	080b1e80 	call	80b1e8 <__umodsi3>
  80ad18:	1023883a 	mov	r17,r2
  80ad1c:	b00b883a 	mov	r5,r22
  80ad20:	8009883a 	mov	r4,r16
  80ad24:	080b1840 	call	80b184 <__udivsi3>
  80ad28:	8822943a 	slli	r17,r17,16
  80ad2c:	b80b883a 	mov	r5,r23
  80ad30:	1009883a 	mov	r4,r2
  80ad34:	080b2400 	call	80b240 <__mulsi3>
  80ad38:	a53fffcc 	andi	r20,r20,65535
  80ad3c:	a446b03a 	or	r3,r20,r17
  80ad40:	18bfac2e 	bgeu	r3,r2,80abf4 <__alt_mem_epcs_flash_controller_0+0xff801bf4>
  80ad44:	003fa706 	br	80abe4 <__alt_mem_epcs_flash_controller_0+0xff801be4>
  80ad48:	2005883a 	mov	r2,r4
  80ad4c:	2807883a 	mov	r3,r5
  80ad50:	dfc00c17 	ldw	ra,48(sp)
  80ad54:	df000b17 	ldw	fp,44(sp)
  80ad58:	ddc00a17 	ldw	r23,40(sp)
  80ad5c:	dd800917 	ldw	r22,36(sp)
  80ad60:	dd400817 	ldw	r21,32(sp)
  80ad64:	dd000717 	ldw	r20,28(sp)
  80ad68:	dcc00617 	ldw	r19,24(sp)
  80ad6c:	dc800517 	ldw	r18,20(sp)
  80ad70:	dc400417 	ldw	r17,16(sp)
  80ad74:	dc000317 	ldw	r16,12(sp)
  80ad78:	dec00d04 	addi	sp,sp,52
  80ad7c:	f800283a 	ret
  80ad80:	04c03fc4 	movi	r19,255
  80ad84:	99c9803a 	cmpltu	r4,r19,r7
  80ad88:	200890fa 	slli	r4,r4,3
  80ad8c:	003fa406 	br	80ac20 <__alt_mem_epcs_flash_controller_0+0xff801c20>
  80ad90:	00803fc4 	movi	r2,255
  80ad94:	14c5803a 	cmpltu	r2,r2,r19
  80ad98:	100490fa 	slli	r2,r2,3
  80ad9c:	003fbc06 	br	80ac90 <__alt_mem_epcs_flash_controller_0+0xff801c90>
  80ada0:	00804034 	movhi	r2,256
  80ada4:	10bfffc4 	addi	r2,r2,-1
  80ada8:	1180a636 	bltu	r2,r6,80b044 <__umoddi3+0x57c>
  80adac:	01000404 	movi	r4,16
  80adb0:	003f5c06 	br	80ab24 <__alt_mem_epcs_flash_controller_0+0xff801b24>
  80adb4:	3d0e983a 	sll	r7,r7,r20
  80adb8:	34ead83a 	srl	r21,r6,r19
  80adbc:	8cc6d83a 	srl	r3,r17,r19
  80adc0:	8d10983a 	sll	r8,r17,r20
  80adc4:	3d6ab03a 	or	r21,r7,r21
  80adc8:	a82cd43a 	srli	r22,r21,16
  80adcc:	84e2d83a 	srl	r17,r16,r19
  80add0:	1809883a 	mov	r4,r3
  80add4:	b00b883a 	mov	r5,r22
  80add8:	8a22b03a 	or	r17,r17,r8
  80addc:	3524983a 	sll	r18,r6,r20
  80ade0:	dc400015 	stw	r17,0(sp)
  80ade4:	d8c00115 	stw	r3,4(sp)
  80ade8:	080b1e80 	call	80b1e8 <__umodsi3>
  80adec:	d8c00117 	ldw	r3,4(sp)
  80adf0:	b00b883a 	mov	r5,r22
  80adf4:	1039883a 	mov	fp,r2
  80adf8:	1809883a 	mov	r4,r3
  80adfc:	080b1840 	call	80b184 <__udivsi3>
  80ae00:	adffffcc 	andi	r23,r21,65535
  80ae04:	100b883a 	mov	r5,r2
  80ae08:	b809883a 	mov	r4,r23
  80ae0c:	1023883a 	mov	r17,r2
  80ae10:	080b2400 	call	80b240 <__mulsi3>
  80ae14:	d9400017 	ldw	r5,0(sp)
  80ae18:	e008943a 	slli	r4,fp,16
  80ae1c:	8520983a 	sll	r16,r16,r20
  80ae20:	2806d43a 	srli	r3,r5,16
  80ae24:	1906b03a 	or	r3,r3,r4
  80ae28:	1880042e 	bgeu	r3,r2,80ae3c <__umoddi3+0x374>
  80ae2c:	1d47883a 	add	r3,r3,r21
  80ae30:	893fffc4 	addi	r4,r17,-1
  80ae34:	1d40892e 	bgeu	r3,r21,80b05c <__umoddi3+0x594>
  80ae38:	2023883a 	mov	r17,r4
  80ae3c:	18b9c83a 	sub	fp,r3,r2
  80ae40:	b00b883a 	mov	r5,r22
  80ae44:	e009883a 	mov	r4,fp
  80ae48:	080b1e80 	call	80b1e8 <__umodsi3>
  80ae4c:	b00b883a 	mov	r5,r22
  80ae50:	e009883a 	mov	r4,fp
  80ae54:	d8800215 	stw	r2,8(sp)
  80ae58:	080b1840 	call	80b184 <__udivsi3>
  80ae5c:	100b883a 	mov	r5,r2
  80ae60:	b809883a 	mov	r4,r23
  80ae64:	102d883a 	mov	r22,r2
  80ae68:	080b2400 	call	80b240 <__mulsi3>
  80ae6c:	d9800217 	ldw	r6,8(sp)
  80ae70:	d8c00017 	ldw	r3,0(sp)
  80ae74:	300c943a 	slli	r6,r6,16
  80ae78:	1a3fffcc 	andi	r8,r3,65535
  80ae7c:	4190b03a 	or	r8,r8,r6
  80ae80:	4080042e 	bgeu	r8,r2,80ae94 <__umoddi3+0x3cc>
  80ae84:	4551883a 	add	r8,r8,r21
  80ae88:	b0ffffc4 	addi	r3,r22,-1
  80ae8c:	45406f2e 	bgeu	r8,r21,80b04c <__umoddi3+0x584>
  80ae90:	182d883a 	mov	r22,r3
  80ae94:	880e943a 	slli	r7,r17,16
  80ae98:	9006d43a 	srli	r3,r18,16
  80ae9c:	91bfffcc 	andi	r6,r18,65535
  80aea0:	3dacb03a 	or	r22,r7,r22
  80aea4:	b02ed43a 	srli	r23,r22,16
  80aea8:	b5bfffcc 	andi	r22,r22,65535
  80aeac:	300b883a 	mov	r5,r6
  80aeb0:	b009883a 	mov	r4,r22
  80aeb4:	40a3c83a 	sub	r17,r8,r2
  80aeb8:	d8c00115 	stw	r3,4(sp)
  80aebc:	d9800215 	stw	r6,8(sp)
  80aec0:	080b2400 	call	80b240 <__mulsi3>
  80aec4:	d9800217 	ldw	r6,8(sp)
  80aec8:	b809883a 	mov	r4,r23
  80aecc:	1039883a 	mov	fp,r2
  80aed0:	300b883a 	mov	r5,r6
  80aed4:	080b2400 	call	80b240 <__mulsi3>
  80aed8:	d8c00117 	ldw	r3,4(sp)
  80aedc:	b809883a 	mov	r4,r23
  80aee0:	d8800215 	stw	r2,8(sp)
  80aee4:	180b883a 	mov	r5,r3
  80aee8:	080b2400 	call	80b240 <__mulsi3>
  80aeec:	d8c00117 	ldw	r3,4(sp)
  80aef0:	b009883a 	mov	r4,r22
  80aef4:	102f883a 	mov	r23,r2
  80aef8:	180b883a 	mov	r5,r3
  80aefc:	080b2400 	call	80b240 <__mulsi3>
  80af00:	d9800217 	ldw	r6,8(sp)
  80af04:	e006d43a 	srli	r3,fp,16
  80af08:	1185883a 	add	r2,r2,r6
  80af0c:	1885883a 	add	r2,r3,r2
  80af10:	1180022e 	bgeu	r2,r6,80af1c <__umoddi3+0x454>
  80af14:	00c00074 	movhi	r3,1
  80af18:	b8ef883a 	add	r23,r23,r3
  80af1c:	1006d43a 	srli	r3,r2,16
  80af20:	1004943a 	slli	r2,r2,16
  80af24:	e73fffcc 	andi	fp,fp,65535
  80af28:	1dc7883a 	add	r3,r3,r23
  80af2c:	1739883a 	add	fp,r2,fp
  80af30:	88c03a36 	bltu	r17,r3,80b01c <__umoddi3+0x554>
  80af34:	88c05126 	beq	r17,r3,80b07c <__umoddi3+0x5b4>
  80af38:	88c9c83a 	sub	r4,r17,r3
  80af3c:	e00f883a 	mov	r7,fp
  80af40:	81cfc83a 	sub	r7,r16,r7
  80af44:	81c7803a 	cmpltu	r3,r16,r7
  80af48:	20c7c83a 	sub	r3,r4,r3
  80af4c:	1cc4983a 	sll	r2,r3,r19
  80af50:	3d0ed83a 	srl	r7,r7,r20
  80af54:	1d06d83a 	srl	r3,r3,r20
  80af58:	11c4b03a 	or	r2,r2,r7
  80af5c:	003f7c06 	br	80ad50 <__alt_mem_epcs_flash_controller_0+0xff801d50>
  80af60:	9ca6983a 	sll	r19,r19,r18
  80af64:	88f8d83a 	srl	fp,r17,r3
  80af68:	80c4d83a 	srl	r2,r16,r3
  80af6c:	982cd43a 	srli	r22,r19,16
  80af70:	8ca2983a 	sll	r17,r17,r18
  80af74:	e009883a 	mov	r4,fp
  80af78:	b00b883a 	mov	r5,r22
  80af7c:	146ab03a 	or	r21,r2,r17
  80af80:	080b1e80 	call	80b1e8 <__umodsi3>
  80af84:	b00b883a 	mov	r5,r22
  80af88:	e009883a 	mov	r4,fp
  80af8c:	1029883a 	mov	r20,r2
  80af90:	9dffffcc 	andi	r23,r19,65535
  80af94:	080b1840 	call	80b184 <__udivsi3>
  80af98:	b809883a 	mov	r4,r23
  80af9c:	100b883a 	mov	r5,r2
  80afa0:	080b2400 	call	80b240 <__mulsi3>
  80afa4:	a008943a 	slli	r4,r20,16
  80afa8:	a806d43a 	srli	r3,r21,16
  80afac:	84a8983a 	sll	r20,r16,r18
  80afb0:	1906b03a 	or	r3,r3,r4
  80afb4:	1880042e 	bgeu	r3,r2,80afc8 <__umoddi3+0x500>
  80afb8:	1cc7883a 	add	r3,r3,r19
  80afbc:	1cc00236 	bltu	r3,r19,80afc8 <__umoddi3+0x500>
  80afc0:	1880012e 	bgeu	r3,r2,80afc8 <__umoddi3+0x500>
  80afc4:	1cc7883a 	add	r3,r3,r19
  80afc8:	18a3c83a 	sub	r17,r3,r2
  80afcc:	b00b883a 	mov	r5,r22
  80afd0:	8809883a 	mov	r4,r17
  80afd4:	080b1e80 	call	80b1e8 <__umodsi3>
  80afd8:	b00b883a 	mov	r5,r22
  80afdc:	8809883a 	mov	r4,r17
  80afe0:	1021883a 	mov	r16,r2
  80afe4:	080b1840 	call	80b184 <__udivsi3>
  80afe8:	100b883a 	mov	r5,r2
  80afec:	b809883a 	mov	r4,r23
  80aff0:	8020943a 	slli	r16,r16,16
  80aff4:	080b2400 	call	80b240 <__mulsi3>
  80aff8:	a8ffffcc 	andi	r3,r21,65535
  80affc:	1c06b03a 	or	r3,r3,r16
  80b000:	1880042e 	bgeu	r3,r2,80b014 <__umoddi3+0x54c>
  80b004:	1cc7883a 	add	r3,r3,r19
  80b008:	1cc00236 	bltu	r3,r19,80b014 <__umoddi3+0x54c>
  80b00c:	1880012e 	bgeu	r3,r2,80b014 <__umoddi3+0x54c>
  80b010:	1cc7883a 	add	r3,r3,r19
  80b014:	18a3c83a 	sub	r17,r3,r2
  80b018:	003f2906 	br	80acc0 <__alt_mem_epcs_flash_controller_0+0xff801cc0>
  80b01c:	e48fc83a 	sub	r7,fp,r18
  80b020:	1d49c83a 	sub	r4,r3,r21
  80b024:	e1f9803a 	cmpltu	fp,fp,r7
  80b028:	2739c83a 	sub	fp,r4,fp
  80b02c:	8f09c83a 	sub	r4,r17,fp
  80b030:	003fc306 	br	80af40 <__alt_mem_epcs_flash_controller_0+0xff801f40>
  80b034:	01000604 	movi	r4,24
  80b038:	003ef906 	br	80ac20 <__alt_mem_epcs_flash_controller_0+0xff801c20>
  80b03c:	00800604 	movi	r2,24
  80b040:	003f1306 	br	80ac90 <__alt_mem_epcs_flash_controller_0+0xff801c90>
  80b044:	01000604 	movi	r4,24
  80b048:	003eb606 	br	80ab24 <__alt_mem_epcs_flash_controller_0+0xff801b24>
  80b04c:	40bf902e 	bgeu	r8,r2,80ae90 <__alt_mem_epcs_flash_controller_0+0xff801e90>
  80b050:	b5bfff84 	addi	r22,r22,-2
  80b054:	4551883a 	add	r8,r8,r21
  80b058:	003f8e06 	br	80ae94 <__alt_mem_epcs_flash_controller_0+0xff801e94>
  80b05c:	18bf762e 	bgeu	r3,r2,80ae38 <__alt_mem_epcs_flash_controller_0+0xff801e38>
  80b060:	8c7fff84 	addi	r17,r17,-2
  80b064:	1d47883a 	add	r3,r3,r21
  80b068:	003f7406 	br	80ae3c <__alt_mem_epcs_flash_controller_0+0xff801e3c>
  80b06c:	1cc7883a 	add	r3,r3,r19
  80b070:	003ecd06 	br	80aba8 <__alt_mem_epcs_flash_controller_0+0xff801ba8>
  80b074:	8005883a 	mov	r2,r16
  80b078:	003ef806 	br	80ac5c <__alt_mem_epcs_flash_controller_0+0xff801c5c>
  80b07c:	873fe736 	bltu	r16,fp,80b01c <__alt_mem_epcs_flash_controller_0+0xff80201c>
  80b080:	e00f883a 	mov	r7,fp
  80b084:	0009883a 	mov	r4,zero
  80b088:	003fad06 	br	80af40 <__alt_mem_epcs_flash_controller_0+0xff801f40>

0080b08c <__divsi3>:
  80b08c:	20001b16 	blt	r4,zero,80b0fc <__divsi3+0x70>
  80b090:	000f883a 	mov	r7,zero
  80b094:	28001616 	blt	r5,zero,80b0f0 <__divsi3+0x64>
  80b098:	200d883a 	mov	r6,r4
  80b09c:	29001a2e 	bgeu	r5,r4,80b108 <__divsi3+0x7c>
  80b0a0:	00800804 	movi	r2,32
  80b0a4:	00c00044 	movi	r3,1
  80b0a8:	00000106 	br	80b0b0 <__divsi3+0x24>
  80b0ac:	10000d26 	beq	r2,zero,80b0e4 <__divsi3+0x58>
  80b0b0:	294b883a 	add	r5,r5,r5
  80b0b4:	10bfffc4 	addi	r2,r2,-1
  80b0b8:	18c7883a 	add	r3,r3,r3
  80b0bc:	293ffb36 	bltu	r5,r4,80b0ac <__alt_mem_epcs_flash_controller_0+0xff8020ac>
  80b0c0:	0005883a 	mov	r2,zero
  80b0c4:	18000726 	beq	r3,zero,80b0e4 <__divsi3+0x58>
  80b0c8:	0005883a 	mov	r2,zero
  80b0cc:	31400236 	bltu	r6,r5,80b0d8 <__divsi3+0x4c>
  80b0d0:	314dc83a 	sub	r6,r6,r5
  80b0d4:	10c4b03a 	or	r2,r2,r3
  80b0d8:	1806d07a 	srli	r3,r3,1
  80b0dc:	280ad07a 	srli	r5,r5,1
  80b0e0:	183ffa1e 	bne	r3,zero,80b0cc <__alt_mem_epcs_flash_controller_0+0xff8020cc>
  80b0e4:	38000126 	beq	r7,zero,80b0ec <__divsi3+0x60>
  80b0e8:	0085c83a 	sub	r2,zero,r2
  80b0ec:	f800283a 	ret
  80b0f0:	014bc83a 	sub	r5,zero,r5
  80b0f4:	39c0005c 	xori	r7,r7,1
  80b0f8:	003fe706 	br	80b098 <__alt_mem_epcs_flash_controller_0+0xff802098>
  80b0fc:	0109c83a 	sub	r4,zero,r4
  80b100:	01c00044 	movi	r7,1
  80b104:	003fe306 	br	80b094 <__alt_mem_epcs_flash_controller_0+0xff802094>
  80b108:	00c00044 	movi	r3,1
  80b10c:	003fee06 	br	80b0c8 <__alt_mem_epcs_flash_controller_0+0xff8020c8>

0080b110 <__modsi3>:
  80b110:	20001716 	blt	r4,zero,80b170 <__modsi3+0x60>
  80b114:	000f883a 	mov	r7,zero
  80b118:	2005883a 	mov	r2,r4
  80b11c:	28001216 	blt	r5,zero,80b168 <__modsi3+0x58>
  80b120:	2900162e 	bgeu	r5,r4,80b17c <__modsi3+0x6c>
  80b124:	01800804 	movi	r6,32
  80b128:	00c00044 	movi	r3,1
  80b12c:	00000106 	br	80b134 <__modsi3+0x24>
  80b130:	30000a26 	beq	r6,zero,80b15c <__modsi3+0x4c>
  80b134:	294b883a 	add	r5,r5,r5
  80b138:	31bfffc4 	addi	r6,r6,-1
  80b13c:	18c7883a 	add	r3,r3,r3
  80b140:	293ffb36 	bltu	r5,r4,80b130 <__alt_mem_epcs_flash_controller_0+0xff802130>
  80b144:	18000526 	beq	r3,zero,80b15c <__modsi3+0x4c>
  80b148:	1806d07a 	srli	r3,r3,1
  80b14c:	11400136 	bltu	r2,r5,80b154 <__modsi3+0x44>
  80b150:	1145c83a 	sub	r2,r2,r5
  80b154:	280ad07a 	srli	r5,r5,1
  80b158:	183ffb1e 	bne	r3,zero,80b148 <__alt_mem_epcs_flash_controller_0+0xff802148>
  80b15c:	38000126 	beq	r7,zero,80b164 <__modsi3+0x54>
  80b160:	0085c83a 	sub	r2,zero,r2
  80b164:	f800283a 	ret
  80b168:	014bc83a 	sub	r5,zero,r5
  80b16c:	003fec06 	br	80b120 <__alt_mem_epcs_flash_controller_0+0xff802120>
  80b170:	0109c83a 	sub	r4,zero,r4
  80b174:	01c00044 	movi	r7,1
  80b178:	003fe706 	br	80b118 <__alt_mem_epcs_flash_controller_0+0xff802118>
  80b17c:	00c00044 	movi	r3,1
  80b180:	003ff106 	br	80b148 <__alt_mem_epcs_flash_controller_0+0xff802148>

0080b184 <__udivsi3>:
  80b184:	200d883a 	mov	r6,r4
  80b188:	2900152e 	bgeu	r5,r4,80b1e0 <__udivsi3+0x5c>
  80b18c:	28001416 	blt	r5,zero,80b1e0 <__udivsi3+0x5c>
  80b190:	00800804 	movi	r2,32
  80b194:	00c00044 	movi	r3,1
  80b198:	00000206 	br	80b1a4 <__udivsi3+0x20>
  80b19c:	10000e26 	beq	r2,zero,80b1d8 <__udivsi3+0x54>
  80b1a0:	28000516 	blt	r5,zero,80b1b8 <__udivsi3+0x34>
  80b1a4:	294b883a 	add	r5,r5,r5
  80b1a8:	10bfffc4 	addi	r2,r2,-1
  80b1ac:	18c7883a 	add	r3,r3,r3
  80b1b0:	293ffa36 	bltu	r5,r4,80b19c <__alt_mem_epcs_flash_controller_0+0xff80219c>
  80b1b4:	18000826 	beq	r3,zero,80b1d8 <__udivsi3+0x54>
  80b1b8:	0005883a 	mov	r2,zero
  80b1bc:	31400236 	bltu	r6,r5,80b1c8 <__udivsi3+0x44>
  80b1c0:	314dc83a 	sub	r6,r6,r5
  80b1c4:	10c4b03a 	or	r2,r2,r3
  80b1c8:	1806d07a 	srli	r3,r3,1
  80b1cc:	280ad07a 	srli	r5,r5,1
  80b1d0:	183ffa1e 	bne	r3,zero,80b1bc <__alt_mem_epcs_flash_controller_0+0xff8021bc>
  80b1d4:	f800283a 	ret
  80b1d8:	0005883a 	mov	r2,zero
  80b1dc:	f800283a 	ret
  80b1e0:	00c00044 	movi	r3,1
  80b1e4:	003ff406 	br	80b1b8 <__alt_mem_epcs_flash_controller_0+0xff8021b8>

0080b1e8 <__umodsi3>:
  80b1e8:	2005883a 	mov	r2,r4
  80b1ec:	2900122e 	bgeu	r5,r4,80b238 <__umodsi3+0x50>
  80b1f0:	28001116 	blt	r5,zero,80b238 <__umodsi3+0x50>
  80b1f4:	01800804 	movi	r6,32
  80b1f8:	00c00044 	movi	r3,1
  80b1fc:	00000206 	br	80b208 <__umodsi3+0x20>
  80b200:	30000c26 	beq	r6,zero,80b234 <__umodsi3+0x4c>
  80b204:	28000516 	blt	r5,zero,80b21c <__umodsi3+0x34>
  80b208:	294b883a 	add	r5,r5,r5
  80b20c:	31bfffc4 	addi	r6,r6,-1
  80b210:	18c7883a 	add	r3,r3,r3
  80b214:	293ffa36 	bltu	r5,r4,80b200 <__alt_mem_epcs_flash_controller_0+0xff802200>
  80b218:	18000626 	beq	r3,zero,80b234 <__umodsi3+0x4c>
  80b21c:	1806d07a 	srli	r3,r3,1
  80b220:	11400136 	bltu	r2,r5,80b228 <__umodsi3+0x40>
  80b224:	1145c83a 	sub	r2,r2,r5
  80b228:	280ad07a 	srli	r5,r5,1
  80b22c:	183ffb1e 	bne	r3,zero,80b21c <__alt_mem_epcs_flash_controller_0+0xff80221c>
  80b230:	f800283a 	ret
  80b234:	f800283a 	ret
  80b238:	00c00044 	movi	r3,1
  80b23c:	003ff706 	br	80b21c <__alt_mem_epcs_flash_controller_0+0xff80221c>

0080b240 <__mulsi3>:
  80b240:	0005883a 	mov	r2,zero
  80b244:	20000726 	beq	r4,zero,80b264 <__mulsi3+0x24>
  80b248:	20c0004c 	andi	r3,r4,1
  80b24c:	2008d07a 	srli	r4,r4,1
  80b250:	18000126 	beq	r3,zero,80b258 <__mulsi3+0x18>
  80b254:	1145883a 	add	r2,r2,r5
  80b258:	294b883a 	add	r5,r5,r5
  80b25c:	203ffa1e 	bne	r4,zero,80b248 <__alt_mem_epcs_flash_controller_0+0xff802248>
  80b260:	f800283a 	ret
  80b264:	f800283a 	ret

0080b268 <__adddf3>:
  80b268:	02c00434 	movhi	r11,16
  80b26c:	5affffc4 	addi	r11,r11,-1
  80b270:	2806d7fa 	srli	r3,r5,31
  80b274:	2ad4703a 	and	r10,r5,r11
  80b278:	3ad2703a 	and	r9,r7,r11
  80b27c:	3804d53a 	srli	r2,r7,20
  80b280:	3018d77a 	srli	r12,r6,29
  80b284:	280ad53a 	srli	r5,r5,20
  80b288:	501490fa 	slli	r10,r10,3
  80b28c:	2010d77a 	srli	r8,r4,29
  80b290:	481290fa 	slli	r9,r9,3
  80b294:	380ed7fa 	srli	r7,r7,31
  80b298:	defffb04 	addi	sp,sp,-20
  80b29c:	dc800215 	stw	r18,8(sp)
  80b2a0:	dc400115 	stw	r17,4(sp)
  80b2a4:	dc000015 	stw	r16,0(sp)
  80b2a8:	dfc00415 	stw	ra,16(sp)
  80b2ac:	dcc00315 	stw	r19,12(sp)
  80b2b0:	1c803fcc 	andi	r18,r3,255
  80b2b4:	2c01ffcc 	andi	r16,r5,2047
  80b2b8:	5210b03a 	or	r8,r10,r8
  80b2bc:	202290fa 	slli	r17,r4,3
  80b2c0:	1081ffcc 	andi	r2,r2,2047
  80b2c4:	4b12b03a 	or	r9,r9,r12
  80b2c8:	300c90fa 	slli	r6,r6,3
  80b2cc:	91c07526 	beq	r18,r7,80b4a4 <__adddf3+0x23c>
  80b2d0:	8087c83a 	sub	r3,r16,r2
  80b2d4:	00c0ab0e 	bge	zero,r3,80b584 <__adddf3+0x31c>
  80b2d8:	10002a1e 	bne	r2,zero,80b384 <__adddf3+0x11c>
  80b2dc:	4984b03a 	or	r2,r9,r6
  80b2e0:	1000961e 	bne	r2,zero,80b53c <__adddf3+0x2d4>
  80b2e4:	888001cc 	andi	r2,r17,7
  80b2e8:	10000726 	beq	r2,zero,80b308 <__adddf3+0xa0>
  80b2ec:	888003cc 	andi	r2,r17,15
  80b2f0:	00c00104 	movi	r3,4
  80b2f4:	10c00426 	beq	r2,r3,80b308 <__adddf3+0xa0>
  80b2f8:	88c7883a 	add	r3,r17,r3
  80b2fc:	1c63803a 	cmpltu	r17,r3,r17
  80b300:	4451883a 	add	r8,r8,r17
  80b304:	1823883a 	mov	r17,r3
  80b308:	4080202c 	andhi	r2,r8,128
  80b30c:	10005926 	beq	r2,zero,80b474 <__adddf3+0x20c>
  80b310:	84000044 	addi	r16,r16,1
  80b314:	0081ffc4 	movi	r2,2047
  80b318:	8080ba26 	beq	r16,r2,80b604 <__adddf3+0x39c>
  80b31c:	00bfe034 	movhi	r2,65408
  80b320:	10bfffc4 	addi	r2,r2,-1
  80b324:	4090703a 	and	r8,r8,r2
  80b328:	4004977a 	slli	r2,r8,29
  80b32c:	4010927a 	slli	r8,r8,9
  80b330:	8822d0fa 	srli	r17,r17,3
  80b334:	8401ffcc 	andi	r16,r16,2047
  80b338:	4010d33a 	srli	r8,r8,12
  80b33c:	9007883a 	mov	r3,r18
  80b340:	1444b03a 	or	r2,r2,r17
  80b344:	8401ffcc 	andi	r16,r16,2047
  80b348:	8020953a 	slli	r16,r16,20
  80b34c:	18c03fcc 	andi	r3,r3,255
  80b350:	01000434 	movhi	r4,16
  80b354:	213fffc4 	addi	r4,r4,-1
  80b358:	180697fa 	slli	r3,r3,31
  80b35c:	4110703a 	and	r8,r8,r4
  80b360:	4410b03a 	or	r8,r8,r16
  80b364:	40c6b03a 	or	r3,r8,r3
  80b368:	dfc00417 	ldw	ra,16(sp)
  80b36c:	dcc00317 	ldw	r19,12(sp)
  80b370:	dc800217 	ldw	r18,8(sp)
  80b374:	dc400117 	ldw	r17,4(sp)
  80b378:	dc000017 	ldw	r16,0(sp)
  80b37c:	dec00504 	addi	sp,sp,20
  80b380:	f800283a 	ret
  80b384:	0081ffc4 	movi	r2,2047
  80b388:	80bfd626 	beq	r16,r2,80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b38c:	4a402034 	orhi	r9,r9,128
  80b390:	00800e04 	movi	r2,56
  80b394:	10c09f16 	blt	r2,r3,80b614 <__adddf3+0x3ac>
  80b398:	008007c4 	movi	r2,31
  80b39c:	10c0c216 	blt	r2,r3,80b6a8 <__adddf3+0x440>
  80b3a0:	00800804 	movi	r2,32
  80b3a4:	10c5c83a 	sub	r2,r2,r3
  80b3a8:	488a983a 	sll	r5,r9,r2
  80b3ac:	30c8d83a 	srl	r4,r6,r3
  80b3b0:	3084983a 	sll	r2,r6,r2
  80b3b4:	48c6d83a 	srl	r3,r9,r3
  80b3b8:	290cb03a 	or	r6,r5,r4
  80b3bc:	1004c03a 	cmpne	r2,r2,zero
  80b3c0:	308cb03a 	or	r6,r6,r2
  80b3c4:	898dc83a 	sub	r6,r17,r6
  80b3c8:	89a3803a 	cmpltu	r17,r17,r6
  80b3cc:	40d1c83a 	sub	r8,r8,r3
  80b3d0:	4451c83a 	sub	r8,r8,r17
  80b3d4:	3023883a 	mov	r17,r6
  80b3d8:	4080202c 	andhi	r2,r8,128
  80b3dc:	10002326 	beq	r2,zero,80b46c <__adddf3+0x204>
  80b3e0:	04c02034 	movhi	r19,128
  80b3e4:	9cffffc4 	addi	r19,r19,-1
  80b3e8:	44e6703a 	and	r19,r8,r19
  80b3ec:	98007626 	beq	r19,zero,80b5c8 <__adddf3+0x360>
  80b3f0:	9809883a 	mov	r4,r19
  80b3f4:	080daa80 	call	80daa8 <__clzsi2>
  80b3f8:	10fffe04 	addi	r3,r2,-8
  80b3fc:	010007c4 	movi	r4,31
  80b400:	20c07716 	blt	r4,r3,80b5e0 <__adddf3+0x378>
  80b404:	00800804 	movi	r2,32
  80b408:	10c5c83a 	sub	r2,r2,r3
  80b40c:	8884d83a 	srl	r2,r17,r2
  80b410:	98d0983a 	sll	r8,r19,r3
  80b414:	88e2983a 	sll	r17,r17,r3
  80b418:	1204b03a 	or	r2,r2,r8
  80b41c:	1c007416 	blt	r3,r16,80b5f0 <__adddf3+0x388>
  80b420:	1c21c83a 	sub	r16,r3,r16
  80b424:	82000044 	addi	r8,r16,1
  80b428:	00c007c4 	movi	r3,31
  80b42c:	1a009116 	blt	r3,r8,80b674 <__adddf3+0x40c>
  80b430:	00c00804 	movi	r3,32
  80b434:	1a07c83a 	sub	r3,r3,r8
  80b438:	8a08d83a 	srl	r4,r17,r8
  80b43c:	88e2983a 	sll	r17,r17,r3
  80b440:	10c6983a 	sll	r3,r2,r3
  80b444:	1210d83a 	srl	r8,r2,r8
  80b448:	8804c03a 	cmpne	r2,r17,zero
  80b44c:	1906b03a 	or	r3,r3,r4
  80b450:	18a2b03a 	or	r17,r3,r2
  80b454:	0021883a 	mov	r16,zero
  80b458:	003fa206 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b45c:	1890b03a 	or	r8,r3,r2
  80b460:	40017d26 	beq	r8,zero,80ba58 <__adddf3+0x7f0>
  80b464:	1011883a 	mov	r8,r2
  80b468:	1823883a 	mov	r17,r3
  80b46c:	888001cc 	andi	r2,r17,7
  80b470:	103f9e1e 	bne	r2,zero,80b2ec <__alt_mem_epcs_flash_controller_0+0xff8022ec>
  80b474:	4004977a 	slli	r2,r8,29
  80b478:	8822d0fa 	srli	r17,r17,3
  80b47c:	4010d0fa 	srli	r8,r8,3
  80b480:	9007883a 	mov	r3,r18
  80b484:	1444b03a 	or	r2,r2,r17
  80b488:	0101ffc4 	movi	r4,2047
  80b48c:	81002426 	beq	r16,r4,80b520 <__adddf3+0x2b8>
  80b490:	8120703a 	and	r16,r16,r4
  80b494:	01000434 	movhi	r4,16
  80b498:	213fffc4 	addi	r4,r4,-1
  80b49c:	4110703a 	and	r8,r8,r4
  80b4a0:	003fa806 	br	80b344 <__alt_mem_epcs_flash_controller_0+0xff802344>
  80b4a4:	8089c83a 	sub	r4,r16,r2
  80b4a8:	01005e0e 	bge	zero,r4,80b624 <__adddf3+0x3bc>
  80b4ac:	10002b26 	beq	r2,zero,80b55c <__adddf3+0x2f4>
  80b4b0:	0081ffc4 	movi	r2,2047
  80b4b4:	80bf8b26 	beq	r16,r2,80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b4b8:	4a402034 	orhi	r9,r9,128
  80b4bc:	00800e04 	movi	r2,56
  80b4c0:	1100a40e 	bge	r2,r4,80b754 <__adddf3+0x4ec>
  80b4c4:	498cb03a 	or	r6,r9,r6
  80b4c8:	300ac03a 	cmpne	r5,r6,zero
  80b4cc:	0013883a 	mov	r9,zero
  80b4d0:	2c4b883a 	add	r5,r5,r17
  80b4d4:	2c63803a 	cmpltu	r17,r5,r17
  80b4d8:	4a11883a 	add	r8,r9,r8
  80b4dc:	8a11883a 	add	r8,r17,r8
  80b4e0:	2823883a 	mov	r17,r5
  80b4e4:	4080202c 	andhi	r2,r8,128
  80b4e8:	103fe026 	beq	r2,zero,80b46c <__alt_mem_epcs_flash_controller_0+0xff80246c>
  80b4ec:	84000044 	addi	r16,r16,1
  80b4f0:	0081ffc4 	movi	r2,2047
  80b4f4:	8080d226 	beq	r16,r2,80b840 <__adddf3+0x5d8>
  80b4f8:	00bfe034 	movhi	r2,65408
  80b4fc:	10bfffc4 	addi	r2,r2,-1
  80b500:	4090703a 	and	r8,r8,r2
  80b504:	880ad07a 	srli	r5,r17,1
  80b508:	400897fa 	slli	r4,r8,31
  80b50c:	88c0004c 	andi	r3,r17,1
  80b510:	28e2b03a 	or	r17,r5,r3
  80b514:	4010d07a 	srli	r8,r8,1
  80b518:	2462b03a 	or	r17,r4,r17
  80b51c:	003f7106 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b520:	4088b03a 	or	r4,r8,r2
  80b524:	20014526 	beq	r4,zero,80ba3c <__adddf3+0x7d4>
  80b528:	01000434 	movhi	r4,16
  80b52c:	42000234 	orhi	r8,r8,8
  80b530:	213fffc4 	addi	r4,r4,-1
  80b534:	4110703a 	and	r8,r8,r4
  80b538:	003f8206 	br	80b344 <__alt_mem_epcs_flash_controller_0+0xff802344>
  80b53c:	18ffffc4 	addi	r3,r3,-1
  80b540:	1800491e 	bne	r3,zero,80b668 <__adddf3+0x400>
  80b544:	898bc83a 	sub	r5,r17,r6
  80b548:	8963803a 	cmpltu	r17,r17,r5
  80b54c:	4251c83a 	sub	r8,r8,r9
  80b550:	4451c83a 	sub	r8,r8,r17
  80b554:	2823883a 	mov	r17,r5
  80b558:	003f9f06 	br	80b3d8 <__alt_mem_epcs_flash_controller_0+0xff8023d8>
  80b55c:	4984b03a 	or	r2,r9,r6
  80b560:	103f6026 	beq	r2,zero,80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b564:	213fffc4 	addi	r4,r4,-1
  80b568:	2000931e 	bne	r4,zero,80b7b8 <__adddf3+0x550>
  80b56c:	898d883a 	add	r6,r17,r6
  80b570:	3463803a 	cmpltu	r17,r6,r17
  80b574:	4251883a 	add	r8,r8,r9
  80b578:	8a11883a 	add	r8,r17,r8
  80b57c:	3023883a 	mov	r17,r6
  80b580:	003fd806 	br	80b4e4 <__alt_mem_epcs_flash_controller_0+0xff8024e4>
  80b584:	1800541e 	bne	r3,zero,80b6d8 <__adddf3+0x470>
  80b588:	80800044 	addi	r2,r16,1
  80b58c:	1081ffcc 	andi	r2,r2,2047
  80b590:	00c00044 	movi	r3,1
  80b594:	1880a00e 	bge	r3,r2,80b818 <__adddf3+0x5b0>
  80b598:	8989c83a 	sub	r4,r17,r6
  80b59c:	8905803a 	cmpltu	r2,r17,r4
  80b5a0:	4267c83a 	sub	r19,r8,r9
  80b5a4:	98a7c83a 	sub	r19,r19,r2
  80b5a8:	9880202c 	andhi	r2,r19,128
  80b5ac:	10006326 	beq	r2,zero,80b73c <__adddf3+0x4d4>
  80b5b0:	3463c83a 	sub	r17,r6,r17
  80b5b4:	4a07c83a 	sub	r3,r9,r8
  80b5b8:	344d803a 	cmpltu	r6,r6,r17
  80b5bc:	19a7c83a 	sub	r19,r3,r6
  80b5c0:	3825883a 	mov	r18,r7
  80b5c4:	983f8a1e 	bne	r19,zero,80b3f0 <__alt_mem_epcs_flash_controller_0+0xff8023f0>
  80b5c8:	8809883a 	mov	r4,r17
  80b5cc:	080daa80 	call	80daa8 <__clzsi2>
  80b5d0:	10800804 	addi	r2,r2,32
  80b5d4:	10fffe04 	addi	r3,r2,-8
  80b5d8:	010007c4 	movi	r4,31
  80b5dc:	20ff890e 	bge	r4,r3,80b404 <__alt_mem_epcs_flash_controller_0+0xff802404>
  80b5e0:	10bff604 	addi	r2,r2,-40
  80b5e4:	8884983a 	sll	r2,r17,r2
  80b5e8:	0023883a 	mov	r17,zero
  80b5ec:	1c3f8c0e 	bge	r3,r16,80b420 <__alt_mem_epcs_flash_controller_0+0xff802420>
  80b5f0:	023fe034 	movhi	r8,65408
  80b5f4:	423fffc4 	addi	r8,r8,-1
  80b5f8:	80e1c83a 	sub	r16,r16,r3
  80b5fc:	1210703a 	and	r8,r2,r8
  80b600:	003f3806 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b604:	9007883a 	mov	r3,r18
  80b608:	0011883a 	mov	r8,zero
  80b60c:	0005883a 	mov	r2,zero
  80b610:	003f4c06 	br	80b344 <__alt_mem_epcs_flash_controller_0+0xff802344>
  80b614:	498cb03a 	or	r6,r9,r6
  80b618:	300cc03a 	cmpne	r6,r6,zero
  80b61c:	0007883a 	mov	r3,zero
  80b620:	003f6806 	br	80b3c4 <__alt_mem_epcs_flash_controller_0+0xff8023c4>
  80b624:	20009c1e 	bne	r4,zero,80b898 <__adddf3+0x630>
  80b628:	80800044 	addi	r2,r16,1
  80b62c:	1141ffcc 	andi	r5,r2,2047
  80b630:	01000044 	movi	r4,1
  80b634:	2140670e 	bge	r4,r5,80b7d4 <__adddf3+0x56c>
  80b638:	0101ffc4 	movi	r4,2047
  80b63c:	11007f26 	beq	r2,r4,80b83c <__adddf3+0x5d4>
  80b640:	898d883a 	add	r6,r17,r6
  80b644:	4247883a 	add	r3,r8,r9
  80b648:	3451803a 	cmpltu	r8,r6,r17
  80b64c:	40d1883a 	add	r8,r8,r3
  80b650:	402297fa 	slli	r17,r8,31
  80b654:	300cd07a 	srli	r6,r6,1
  80b658:	4010d07a 	srli	r8,r8,1
  80b65c:	1021883a 	mov	r16,r2
  80b660:	89a2b03a 	or	r17,r17,r6
  80b664:	003f1f06 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b668:	0081ffc4 	movi	r2,2047
  80b66c:	80bf481e 	bne	r16,r2,80b390 <__alt_mem_epcs_flash_controller_0+0xff802390>
  80b670:	003f1c06 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b674:	843ff844 	addi	r16,r16,-31
  80b678:	01000804 	movi	r4,32
  80b67c:	1406d83a 	srl	r3,r2,r16
  80b680:	41005026 	beq	r8,r4,80b7c4 <__adddf3+0x55c>
  80b684:	01001004 	movi	r4,64
  80b688:	2211c83a 	sub	r8,r4,r8
  80b68c:	1204983a 	sll	r2,r2,r8
  80b690:	88a2b03a 	or	r17,r17,r2
  80b694:	8822c03a 	cmpne	r17,r17,zero
  80b698:	1c62b03a 	or	r17,r3,r17
  80b69c:	0011883a 	mov	r8,zero
  80b6a0:	0021883a 	mov	r16,zero
  80b6a4:	003f7106 	br	80b46c <__alt_mem_epcs_flash_controller_0+0xff80246c>
  80b6a8:	193ff804 	addi	r4,r3,-32
  80b6ac:	00800804 	movi	r2,32
  80b6b0:	4908d83a 	srl	r4,r9,r4
  80b6b4:	18804526 	beq	r3,r2,80b7cc <__adddf3+0x564>
  80b6b8:	00801004 	movi	r2,64
  80b6bc:	10c5c83a 	sub	r2,r2,r3
  80b6c0:	4886983a 	sll	r3,r9,r2
  80b6c4:	198cb03a 	or	r6,r3,r6
  80b6c8:	300cc03a 	cmpne	r6,r6,zero
  80b6cc:	218cb03a 	or	r6,r4,r6
  80b6d0:	0007883a 	mov	r3,zero
  80b6d4:	003f3b06 	br	80b3c4 <__alt_mem_epcs_flash_controller_0+0xff8023c4>
  80b6d8:	80002a26 	beq	r16,zero,80b784 <__adddf3+0x51c>
  80b6dc:	0101ffc4 	movi	r4,2047
  80b6e0:	11006826 	beq	r2,r4,80b884 <__adddf3+0x61c>
  80b6e4:	00c7c83a 	sub	r3,zero,r3
  80b6e8:	42002034 	orhi	r8,r8,128
  80b6ec:	01000e04 	movi	r4,56
  80b6f0:	20c07c16 	blt	r4,r3,80b8e4 <__adddf3+0x67c>
  80b6f4:	010007c4 	movi	r4,31
  80b6f8:	20c0da16 	blt	r4,r3,80ba64 <__adddf3+0x7fc>
  80b6fc:	01000804 	movi	r4,32
  80b700:	20c9c83a 	sub	r4,r4,r3
  80b704:	4114983a 	sll	r10,r8,r4
  80b708:	88cad83a 	srl	r5,r17,r3
  80b70c:	8908983a 	sll	r4,r17,r4
  80b710:	40c6d83a 	srl	r3,r8,r3
  80b714:	5162b03a 	or	r17,r10,r5
  80b718:	2008c03a 	cmpne	r4,r4,zero
  80b71c:	8922b03a 	or	r17,r17,r4
  80b720:	3463c83a 	sub	r17,r6,r17
  80b724:	48c7c83a 	sub	r3,r9,r3
  80b728:	344d803a 	cmpltu	r6,r6,r17
  80b72c:	1991c83a 	sub	r8,r3,r6
  80b730:	1021883a 	mov	r16,r2
  80b734:	3825883a 	mov	r18,r7
  80b738:	003f2706 	br	80b3d8 <__alt_mem_epcs_flash_controller_0+0xff8023d8>
  80b73c:	24d0b03a 	or	r8,r4,r19
  80b740:	40001b1e 	bne	r8,zero,80b7b0 <__adddf3+0x548>
  80b744:	0005883a 	mov	r2,zero
  80b748:	0007883a 	mov	r3,zero
  80b74c:	0021883a 	mov	r16,zero
  80b750:	003f4d06 	br	80b488 <__alt_mem_epcs_flash_controller_0+0xff802488>
  80b754:	008007c4 	movi	r2,31
  80b758:	11003c16 	blt	r2,r4,80b84c <__adddf3+0x5e4>
  80b75c:	00800804 	movi	r2,32
  80b760:	1105c83a 	sub	r2,r2,r4
  80b764:	488e983a 	sll	r7,r9,r2
  80b768:	310ad83a 	srl	r5,r6,r4
  80b76c:	3084983a 	sll	r2,r6,r2
  80b770:	4912d83a 	srl	r9,r9,r4
  80b774:	394ab03a 	or	r5,r7,r5
  80b778:	1004c03a 	cmpne	r2,r2,zero
  80b77c:	288ab03a 	or	r5,r5,r2
  80b780:	003f5306 	br	80b4d0 <__alt_mem_epcs_flash_controller_0+0xff8024d0>
  80b784:	4448b03a 	or	r4,r8,r17
  80b788:	20003e26 	beq	r4,zero,80b884 <__adddf3+0x61c>
  80b78c:	00c6303a 	nor	r3,zero,r3
  80b790:	18003a1e 	bne	r3,zero,80b87c <__adddf3+0x614>
  80b794:	3463c83a 	sub	r17,r6,r17
  80b798:	4a07c83a 	sub	r3,r9,r8
  80b79c:	344d803a 	cmpltu	r6,r6,r17
  80b7a0:	1991c83a 	sub	r8,r3,r6
  80b7a4:	1021883a 	mov	r16,r2
  80b7a8:	3825883a 	mov	r18,r7
  80b7ac:	003f0a06 	br	80b3d8 <__alt_mem_epcs_flash_controller_0+0xff8023d8>
  80b7b0:	2023883a 	mov	r17,r4
  80b7b4:	003f0d06 	br	80b3ec <__alt_mem_epcs_flash_controller_0+0xff8023ec>
  80b7b8:	0081ffc4 	movi	r2,2047
  80b7bc:	80bf3f1e 	bne	r16,r2,80b4bc <__alt_mem_epcs_flash_controller_0+0xff8024bc>
  80b7c0:	003ec806 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b7c4:	0005883a 	mov	r2,zero
  80b7c8:	003fb106 	br	80b690 <__alt_mem_epcs_flash_controller_0+0xff802690>
  80b7cc:	0007883a 	mov	r3,zero
  80b7d0:	003fbc06 	br	80b6c4 <__alt_mem_epcs_flash_controller_0+0xff8026c4>
  80b7d4:	4444b03a 	or	r2,r8,r17
  80b7d8:	8000871e 	bne	r16,zero,80b9f8 <__adddf3+0x790>
  80b7dc:	1000ba26 	beq	r2,zero,80bac8 <__adddf3+0x860>
  80b7e0:	4984b03a 	or	r2,r9,r6
  80b7e4:	103ebf26 	beq	r2,zero,80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b7e8:	8985883a 	add	r2,r17,r6
  80b7ec:	4247883a 	add	r3,r8,r9
  80b7f0:	1451803a 	cmpltu	r8,r2,r17
  80b7f4:	40d1883a 	add	r8,r8,r3
  80b7f8:	40c0202c 	andhi	r3,r8,128
  80b7fc:	1023883a 	mov	r17,r2
  80b800:	183f1a26 	beq	r3,zero,80b46c <__alt_mem_epcs_flash_controller_0+0xff80246c>
  80b804:	00bfe034 	movhi	r2,65408
  80b808:	10bfffc4 	addi	r2,r2,-1
  80b80c:	2021883a 	mov	r16,r4
  80b810:	4090703a 	and	r8,r8,r2
  80b814:	003eb306 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b818:	4444b03a 	or	r2,r8,r17
  80b81c:	8000291e 	bne	r16,zero,80b8c4 <__adddf3+0x65c>
  80b820:	10004b1e 	bne	r2,zero,80b950 <__adddf3+0x6e8>
  80b824:	4990b03a 	or	r8,r9,r6
  80b828:	40008b26 	beq	r8,zero,80ba58 <__adddf3+0x7f0>
  80b82c:	4811883a 	mov	r8,r9
  80b830:	3023883a 	mov	r17,r6
  80b834:	3825883a 	mov	r18,r7
  80b838:	003eaa06 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b83c:	1021883a 	mov	r16,r2
  80b840:	0011883a 	mov	r8,zero
  80b844:	0005883a 	mov	r2,zero
  80b848:	003f0f06 	br	80b488 <__alt_mem_epcs_flash_controller_0+0xff802488>
  80b84c:	217ff804 	addi	r5,r4,-32
  80b850:	00800804 	movi	r2,32
  80b854:	494ad83a 	srl	r5,r9,r5
  80b858:	20807d26 	beq	r4,r2,80ba50 <__adddf3+0x7e8>
  80b85c:	00801004 	movi	r2,64
  80b860:	1109c83a 	sub	r4,r2,r4
  80b864:	4912983a 	sll	r9,r9,r4
  80b868:	498cb03a 	or	r6,r9,r6
  80b86c:	300cc03a 	cmpne	r6,r6,zero
  80b870:	298ab03a 	or	r5,r5,r6
  80b874:	0013883a 	mov	r9,zero
  80b878:	003f1506 	br	80b4d0 <__alt_mem_epcs_flash_controller_0+0xff8024d0>
  80b87c:	0101ffc4 	movi	r4,2047
  80b880:	113f9a1e 	bne	r2,r4,80b6ec <__alt_mem_epcs_flash_controller_0+0xff8026ec>
  80b884:	4811883a 	mov	r8,r9
  80b888:	3023883a 	mov	r17,r6
  80b88c:	1021883a 	mov	r16,r2
  80b890:	3825883a 	mov	r18,r7
  80b894:	003e9306 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b898:	8000161e 	bne	r16,zero,80b8f4 <__adddf3+0x68c>
  80b89c:	444ab03a 	or	r5,r8,r17
  80b8a0:	28005126 	beq	r5,zero,80b9e8 <__adddf3+0x780>
  80b8a4:	0108303a 	nor	r4,zero,r4
  80b8a8:	20004d1e 	bne	r4,zero,80b9e0 <__adddf3+0x778>
  80b8ac:	89a3883a 	add	r17,r17,r6
  80b8b0:	4253883a 	add	r9,r8,r9
  80b8b4:	898d803a 	cmpltu	r6,r17,r6
  80b8b8:	3251883a 	add	r8,r6,r9
  80b8bc:	1021883a 	mov	r16,r2
  80b8c0:	003f0806 	br	80b4e4 <__alt_mem_epcs_flash_controller_0+0xff8024e4>
  80b8c4:	1000301e 	bne	r2,zero,80b988 <__adddf3+0x720>
  80b8c8:	4984b03a 	or	r2,r9,r6
  80b8cc:	10007126 	beq	r2,zero,80ba94 <__adddf3+0x82c>
  80b8d0:	4811883a 	mov	r8,r9
  80b8d4:	3023883a 	mov	r17,r6
  80b8d8:	3825883a 	mov	r18,r7
  80b8dc:	0401ffc4 	movi	r16,2047
  80b8e0:	003e8006 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b8e4:	4462b03a 	or	r17,r8,r17
  80b8e8:	8822c03a 	cmpne	r17,r17,zero
  80b8ec:	0007883a 	mov	r3,zero
  80b8f0:	003f8b06 	br	80b720 <__alt_mem_epcs_flash_controller_0+0xff802720>
  80b8f4:	0141ffc4 	movi	r5,2047
  80b8f8:	11403b26 	beq	r2,r5,80b9e8 <__adddf3+0x780>
  80b8fc:	0109c83a 	sub	r4,zero,r4
  80b900:	42002034 	orhi	r8,r8,128
  80b904:	01400e04 	movi	r5,56
  80b908:	29006716 	blt	r5,r4,80baa8 <__adddf3+0x840>
  80b90c:	014007c4 	movi	r5,31
  80b910:	29007016 	blt	r5,r4,80bad4 <__adddf3+0x86c>
  80b914:	01400804 	movi	r5,32
  80b918:	290bc83a 	sub	r5,r5,r4
  80b91c:	4154983a 	sll	r10,r8,r5
  80b920:	890ed83a 	srl	r7,r17,r4
  80b924:	894a983a 	sll	r5,r17,r5
  80b928:	4108d83a 	srl	r4,r8,r4
  80b92c:	51e2b03a 	or	r17,r10,r7
  80b930:	280ac03a 	cmpne	r5,r5,zero
  80b934:	8962b03a 	or	r17,r17,r5
  80b938:	89a3883a 	add	r17,r17,r6
  80b93c:	2253883a 	add	r9,r4,r9
  80b940:	898d803a 	cmpltu	r6,r17,r6
  80b944:	3251883a 	add	r8,r6,r9
  80b948:	1021883a 	mov	r16,r2
  80b94c:	003ee506 	br	80b4e4 <__alt_mem_epcs_flash_controller_0+0xff8024e4>
  80b950:	4984b03a 	or	r2,r9,r6
  80b954:	103e6326 	beq	r2,zero,80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b958:	8987c83a 	sub	r3,r17,r6
  80b95c:	88c9803a 	cmpltu	r4,r17,r3
  80b960:	4245c83a 	sub	r2,r8,r9
  80b964:	1105c83a 	sub	r2,r2,r4
  80b968:	1100202c 	andhi	r4,r2,128
  80b96c:	203ebb26 	beq	r4,zero,80b45c <__alt_mem_epcs_flash_controller_0+0xff80245c>
  80b970:	3463c83a 	sub	r17,r6,r17
  80b974:	4a07c83a 	sub	r3,r9,r8
  80b978:	344d803a 	cmpltu	r6,r6,r17
  80b97c:	1991c83a 	sub	r8,r3,r6
  80b980:	3825883a 	mov	r18,r7
  80b984:	003e5706 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b988:	4984b03a 	or	r2,r9,r6
  80b98c:	10002e26 	beq	r2,zero,80ba48 <__adddf3+0x7e0>
  80b990:	4004d0fa 	srli	r2,r8,3
  80b994:	8822d0fa 	srli	r17,r17,3
  80b998:	4010977a 	slli	r8,r8,29
  80b99c:	10c0022c 	andhi	r3,r2,8
  80b9a0:	4462b03a 	or	r17,r8,r17
  80b9a4:	18000826 	beq	r3,zero,80b9c8 <__adddf3+0x760>
  80b9a8:	4808d0fa 	srli	r4,r9,3
  80b9ac:	20c0022c 	andhi	r3,r4,8
  80b9b0:	1800051e 	bne	r3,zero,80b9c8 <__adddf3+0x760>
  80b9b4:	300cd0fa 	srli	r6,r6,3
  80b9b8:	4806977a 	slli	r3,r9,29
  80b9bc:	2005883a 	mov	r2,r4
  80b9c0:	3825883a 	mov	r18,r7
  80b9c4:	19a2b03a 	or	r17,r3,r6
  80b9c8:	8810d77a 	srli	r8,r17,29
  80b9cc:	100490fa 	slli	r2,r2,3
  80b9d0:	882290fa 	slli	r17,r17,3
  80b9d4:	0401ffc4 	movi	r16,2047
  80b9d8:	4090b03a 	or	r8,r8,r2
  80b9dc:	003e4106 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b9e0:	0141ffc4 	movi	r5,2047
  80b9e4:	117fc71e 	bne	r2,r5,80b904 <__alt_mem_epcs_flash_controller_0+0xff802904>
  80b9e8:	4811883a 	mov	r8,r9
  80b9ec:	3023883a 	mov	r17,r6
  80b9f0:	1021883a 	mov	r16,r2
  80b9f4:	003e3b06 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80b9f8:	10002f26 	beq	r2,zero,80bab8 <__adddf3+0x850>
  80b9fc:	4984b03a 	or	r2,r9,r6
  80ba00:	10001126 	beq	r2,zero,80ba48 <__adddf3+0x7e0>
  80ba04:	4004d0fa 	srli	r2,r8,3
  80ba08:	8822d0fa 	srli	r17,r17,3
  80ba0c:	4010977a 	slli	r8,r8,29
  80ba10:	10c0022c 	andhi	r3,r2,8
  80ba14:	4462b03a 	or	r17,r8,r17
  80ba18:	183feb26 	beq	r3,zero,80b9c8 <__alt_mem_epcs_flash_controller_0+0xff8029c8>
  80ba1c:	4808d0fa 	srli	r4,r9,3
  80ba20:	20c0022c 	andhi	r3,r4,8
  80ba24:	183fe81e 	bne	r3,zero,80b9c8 <__alt_mem_epcs_flash_controller_0+0xff8029c8>
  80ba28:	300cd0fa 	srli	r6,r6,3
  80ba2c:	4806977a 	slli	r3,r9,29
  80ba30:	2005883a 	mov	r2,r4
  80ba34:	19a2b03a 	or	r17,r3,r6
  80ba38:	003fe306 	br	80b9c8 <__alt_mem_epcs_flash_controller_0+0xff8029c8>
  80ba3c:	0011883a 	mov	r8,zero
  80ba40:	0005883a 	mov	r2,zero
  80ba44:	003e3f06 	br	80b344 <__alt_mem_epcs_flash_controller_0+0xff802344>
  80ba48:	0401ffc4 	movi	r16,2047
  80ba4c:	003e2506 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80ba50:	0013883a 	mov	r9,zero
  80ba54:	003f8406 	br	80b868 <__alt_mem_epcs_flash_controller_0+0xff802868>
  80ba58:	0005883a 	mov	r2,zero
  80ba5c:	0007883a 	mov	r3,zero
  80ba60:	003e8906 	br	80b488 <__alt_mem_epcs_flash_controller_0+0xff802488>
  80ba64:	197ff804 	addi	r5,r3,-32
  80ba68:	01000804 	movi	r4,32
  80ba6c:	414ad83a 	srl	r5,r8,r5
  80ba70:	19002426 	beq	r3,r4,80bb04 <__adddf3+0x89c>
  80ba74:	01001004 	movi	r4,64
  80ba78:	20c7c83a 	sub	r3,r4,r3
  80ba7c:	40c6983a 	sll	r3,r8,r3
  80ba80:	1c46b03a 	or	r3,r3,r17
  80ba84:	1806c03a 	cmpne	r3,r3,zero
  80ba88:	28e2b03a 	or	r17,r5,r3
  80ba8c:	0007883a 	mov	r3,zero
  80ba90:	003f2306 	br	80b720 <__alt_mem_epcs_flash_controller_0+0xff802720>
  80ba94:	0007883a 	mov	r3,zero
  80ba98:	5811883a 	mov	r8,r11
  80ba9c:	00bfffc4 	movi	r2,-1
  80baa0:	0401ffc4 	movi	r16,2047
  80baa4:	003e7806 	br	80b488 <__alt_mem_epcs_flash_controller_0+0xff802488>
  80baa8:	4462b03a 	or	r17,r8,r17
  80baac:	8822c03a 	cmpne	r17,r17,zero
  80bab0:	0009883a 	mov	r4,zero
  80bab4:	003fa006 	br	80b938 <__alt_mem_epcs_flash_controller_0+0xff802938>
  80bab8:	4811883a 	mov	r8,r9
  80babc:	3023883a 	mov	r17,r6
  80bac0:	0401ffc4 	movi	r16,2047
  80bac4:	003e0706 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80bac8:	4811883a 	mov	r8,r9
  80bacc:	3023883a 	mov	r17,r6
  80bad0:	003e0406 	br	80b2e4 <__alt_mem_epcs_flash_controller_0+0xff8022e4>
  80bad4:	21fff804 	addi	r7,r4,-32
  80bad8:	01400804 	movi	r5,32
  80badc:	41ced83a 	srl	r7,r8,r7
  80bae0:	21400a26 	beq	r4,r5,80bb0c <__adddf3+0x8a4>
  80bae4:	01401004 	movi	r5,64
  80bae8:	2909c83a 	sub	r4,r5,r4
  80baec:	4108983a 	sll	r4,r8,r4
  80baf0:	2448b03a 	or	r4,r4,r17
  80baf4:	2008c03a 	cmpne	r4,r4,zero
  80baf8:	3922b03a 	or	r17,r7,r4
  80bafc:	0009883a 	mov	r4,zero
  80bb00:	003f8d06 	br	80b938 <__alt_mem_epcs_flash_controller_0+0xff802938>
  80bb04:	0007883a 	mov	r3,zero
  80bb08:	003fdd06 	br	80ba80 <__alt_mem_epcs_flash_controller_0+0xff802a80>
  80bb0c:	0009883a 	mov	r4,zero
  80bb10:	003ff706 	br	80baf0 <__alt_mem_epcs_flash_controller_0+0xff802af0>

0080bb14 <__divdf3>:
  80bb14:	defff004 	addi	sp,sp,-64
  80bb18:	dc800815 	stw	r18,32(sp)
  80bb1c:	2824d53a 	srli	r18,r5,20
  80bb20:	dd800c15 	stw	r22,48(sp)
  80bb24:	282cd7fa 	srli	r22,r5,31
  80bb28:	dc000615 	stw	r16,24(sp)
  80bb2c:	04000434 	movhi	r16,16
  80bb30:	843fffc4 	addi	r16,r16,-1
  80bb34:	dfc00f15 	stw	ra,60(sp)
  80bb38:	df000e15 	stw	fp,56(sp)
  80bb3c:	ddc00d15 	stw	r23,52(sp)
  80bb40:	dd400b15 	stw	r21,44(sp)
  80bb44:	dd000a15 	stw	r20,40(sp)
  80bb48:	dcc00915 	stw	r19,36(sp)
  80bb4c:	dc400715 	stw	r17,28(sp)
  80bb50:	9481ffcc 	andi	r18,r18,2047
  80bb54:	2c20703a 	and	r16,r5,r16
  80bb58:	b2003fcc 	andi	r8,r22,255
  80bb5c:	90006126 	beq	r18,zero,80bce4 <__divdf3+0x1d0>
  80bb60:	0081ffc4 	movi	r2,2047
  80bb64:	202b883a 	mov	r21,r4
  80bb68:	90803726 	beq	r18,r2,80bc48 <__divdf3+0x134>
  80bb6c:	80800434 	orhi	r2,r16,16
  80bb70:	100490fa 	slli	r2,r2,3
  80bb74:	2020d77a 	srli	r16,r4,29
  80bb78:	202a90fa 	slli	r21,r4,3
  80bb7c:	94bf0044 	addi	r18,r18,-1023
  80bb80:	80a0b03a 	or	r16,r16,r2
  80bb84:	0013883a 	mov	r9,zero
  80bb88:	000b883a 	mov	r5,zero
  80bb8c:	3806d53a 	srli	r3,r7,20
  80bb90:	382ed7fa 	srli	r23,r7,31
  80bb94:	04400434 	movhi	r17,16
  80bb98:	8c7fffc4 	addi	r17,r17,-1
  80bb9c:	18c1ffcc 	andi	r3,r3,2047
  80bba0:	3029883a 	mov	r20,r6
  80bba4:	3c62703a 	and	r17,r7,r17
  80bba8:	bf003fcc 	andi	fp,r23,255
  80bbac:	18006e26 	beq	r3,zero,80bd68 <__divdf3+0x254>
  80bbb0:	0081ffc4 	movi	r2,2047
  80bbb4:	18806626 	beq	r3,r2,80bd50 <__divdf3+0x23c>
  80bbb8:	88800434 	orhi	r2,r17,16
  80bbbc:	100490fa 	slli	r2,r2,3
  80bbc0:	3022d77a 	srli	r17,r6,29
  80bbc4:	302890fa 	slli	r20,r6,3
  80bbc8:	18ff0044 	addi	r3,r3,-1023
  80bbcc:	88a2b03a 	or	r17,r17,r2
  80bbd0:	000f883a 	mov	r7,zero
  80bbd4:	b5e6f03a 	xor	r19,r22,r23
  80bbd8:	3a4cb03a 	or	r6,r7,r9
  80bbdc:	008003c4 	movi	r2,15
  80bbe0:	9809883a 	mov	r4,r19
  80bbe4:	90c7c83a 	sub	r3,r18,r3
  80bbe8:	9cc03fcc 	andi	r19,r19,255
  80bbec:	11809636 	bltu	r2,r6,80be48 <__divdf3+0x334>
  80bbf0:	300c90ba 	slli	r6,r6,2
  80bbf4:	00802074 	movhi	r2,129
  80bbf8:	10af0204 	addi	r2,r2,-17400
  80bbfc:	308d883a 	add	r6,r6,r2
  80bc00:	30800017 	ldw	r2,0(r6)
  80bc04:	1000683a 	jmp	r2
  80bc08:	0080be48 	cmpgei	r2,zero,761
  80bc0c:	0080bc80 	call	80bc8 <OSCtxSw_SWITCH_PC+0x80b88>
  80bc10:	0080be38 	rdprs	r2,zero,760
  80bc14:	0080bc74 	movhi	r2,753
  80bc18:	0080be38 	rdprs	r2,zero,760
  80bc1c:	0080be0c 	andi	r2,zero,760
  80bc20:	0080be38 	rdprs	r2,zero,760
  80bc24:	0080bc74 	movhi	r2,753
  80bc28:	0080bc80 	call	80bc8 <OSCtxSw_SWITCH_PC+0x80b88>
  80bc2c:	0080bc80 	call	80bc8 <OSCtxSw_SWITCH_PC+0x80b88>
  80bc30:	0080be0c 	andi	r2,zero,760
  80bc34:	0080bc74 	movhi	r2,753
  80bc38:	0080bc64 	muli	r2,zero,753
  80bc3c:	0080bc64 	muli	r2,zero,753
  80bc40:	0080bc64 	muli	r2,zero,753
  80bc44:	0080c1d0 	cmplti	r2,zero,775
  80bc48:	2404b03a 	or	r2,r4,r16
  80bc4c:	10006c1e 	bne	r2,zero,80be00 <__divdf3+0x2ec>
  80bc50:	02400204 	movi	r9,8
  80bc54:	0021883a 	mov	r16,zero
  80bc58:	002b883a 	mov	r21,zero
  80bc5c:	01400084 	movi	r5,2
  80bc60:	003fca06 	br	80bb8c <__alt_mem_epcs_flash_controller_0+0xff802b8c>
  80bc64:	8023883a 	mov	r17,r16
  80bc68:	a829883a 	mov	r20,r21
  80bc6c:	4039883a 	mov	fp,r8
  80bc70:	280f883a 	mov	r7,r5
  80bc74:	00800084 	movi	r2,2
  80bc78:	3881601e 	bne	r7,r2,80c1fc <__divdf3+0x6e8>
  80bc7c:	e027883a 	mov	r19,fp
  80bc80:	9900004c 	andi	r4,r19,1
  80bc84:	0081ffc4 	movi	r2,2047
  80bc88:	0021883a 	mov	r16,zero
  80bc8c:	002b883a 	mov	r21,zero
  80bc90:	1004953a 	slli	r2,r2,20
  80bc94:	20c03fcc 	andi	r3,r4,255
  80bc98:	01400434 	movhi	r5,16
  80bc9c:	297fffc4 	addi	r5,r5,-1
  80bca0:	180697fa 	slli	r3,r3,31
  80bca4:	8160703a 	and	r16,r16,r5
  80bca8:	80a0b03a 	or	r16,r16,r2
  80bcac:	80c6b03a 	or	r3,r16,r3
  80bcb0:	a805883a 	mov	r2,r21
  80bcb4:	dfc00f17 	ldw	ra,60(sp)
  80bcb8:	df000e17 	ldw	fp,56(sp)
  80bcbc:	ddc00d17 	ldw	r23,52(sp)
  80bcc0:	dd800c17 	ldw	r22,48(sp)
  80bcc4:	dd400b17 	ldw	r21,44(sp)
  80bcc8:	dd000a17 	ldw	r20,40(sp)
  80bccc:	dcc00917 	ldw	r19,36(sp)
  80bcd0:	dc800817 	ldw	r18,32(sp)
  80bcd4:	dc400717 	ldw	r17,28(sp)
  80bcd8:	dc000617 	ldw	r16,24(sp)
  80bcdc:	dec01004 	addi	sp,sp,64
  80bce0:	f800283a 	ret
  80bce4:	2404b03a 	or	r2,r4,r16
  80bce8:	2023883a 	mov	r17,r4
  80bcec:	10003f26 	beq	r2,zero,80bdec <__divdf3+0x2d8>
  80bcf0:	80015e26 	beq	r16,zero,80c26c <__divdf3+0x758>
  80bcf4:	8009883a 	mov	r4,r16
  80bcf8:	d9800215 	stw	r6,8(sp)
  80bcfc:	d9c00515 	stw	r7,20(sp)
  80bd00:	da000415 	stw	r8,16(sp)
  80bd04:	080daa80 	call	80daa8 <__clzsi2>
  80bd08:	d9800217 	ldw	r6,8(sp)
  80bd0c:	d9c00517 	ldw	r7,20(sp)
  80bd10:	da000417 	ldw	r8,16(sp)
  80bd14:	113ffd44 	addi	r4,r2,-11
  80bd18:	00c00704 	movi	r3,28
  80bd1c:	19014f16 	blt	r3,r4,80c25c <__divdf3+0x748>
  80bd20:	00c00744 	movi	r3,29
  80bd24:	157ffe04 	addi	r21,r2,-8
  80bd28:	1907c83a 	sub	r3,r3,r4
  80bd2c:	8560983a 	sll	r16,r16,r21
  80bd30:	88c6d83a 	srl	r3,r17,r3
  80bd34:	8d6a983a 	sll	r21,r17,r21
  80bd38:	1c20b03a 	or	r16,r3,r16
  80bd3c:	1080fcc4 	addi	r2,r2,1011
  80bd40:	00a5c83a 	sub	r18,zero,r2
  80bd44:	0013883a 	mov	r9,zero
  80bd48:	000b883a 	mov	r5,zero
  80bd4c:	003f8f06 	br	80bb8c <__alt_mem_epcs_flash_controller_0+0xff802b8c>
  80bd50:	3444b03a 	or	r2,r6,r17
  80bd54:	1000231e 	bne	r2,zero,80bde4 <__divdf3+0x2d0>
  80bd58:	0023883a 	mov	r17,zero
  80bd5c:	0029883a 	mov	r20,zero
  80bd60:	01c00084 	movi	r7,2
  80bd64:	003f9b06 	br	80bbd4 <__alt_mem_epcs_flash_controller_0+0xff802bd4>
  80bd68:	3444b03a 	or	r2,r6,r17
  80bd6c:	10001926 	beq	r2,zero,80bdd4 <__divdf3+0x2c0>
  80bd70:	88014b26 	beq	r17,zero,80c2a0 <__divdf3+0x78c>
  80bd74:	8809883a 	mov	r4,r17
  80bd78:	d9400115 	stw	r5,4(sp)
  80bd7c:	d9800215 	stw	r6,8(sp)
  80bd80:	da000415 	stw	r8,16(sp)
  80bd84:	da400315 	stw	r9,12(sp)
  80bd88:	080daa80 	call	80daa8 <__clzsi2>
  80bd8c:	d9400117 	ldw	r5,4(sp)
  80bd90:	d9800217 	ldw	r6,8(sp)
  80bd94:	da000417 	ldw	r8,16(sp)
  80bd98:	da400317 	ldw	r9,12(sp)
  80bd9c:	113ffd44 	addi	r4,r2,-11
  80bda0:	00c00704 	movi	r3,28
  80bda4:	19013a16 	blt	r3,r4,80c290 <__divdf3+0x77c>
  80bda8:	00c00744 	movi	r3,29
  80bdac:	153ffe04 	addi	r20,r2,-8
  80bdb0:	1907c83a 	sub	r3,r3,r4
  80bdb4:	8d22983a 	sll	r17,r17,r20
  80bdb8:	30c6d83a 	srl	r3,r6,r3
  80bdbc:	3528983a 	sll	r20,r6,r20
  80bdc0:	1c62b03a 	or	r17,r3,r17
  80bdc4:	1080fcc4 	addi	r2,r2,1011
  80bdc8:	0087c83a 	sub	r3,zero,r2
  80bdcc:	000f883a 	mov	r7,zero
  80bdd0:	003f8006 	br	80bbd4 <__alt_mem_epcs_flash_controller_0+0xff802bd4>
  80bdd4:	0023883a 	mov	r17,zero
  80bdd8:	0029883a 	mov	r20,zero
  80bddc:	01c00044 	movi	r7,1
  80bde0:	003f7c06 	br	80bbd4 <__alt_mem_epcs_flash_controller_0+0xff802bd4>
  80bde4:	01c000c4 	movi	r7,3
  80bde8:	003f7a06 	br	80bbd4 <__alt_mem_epcs_flash_controller_0+0xff802bd4>
  80bdec:	02400104 	movi	r9,4
  80bdf0:	0021883a 	mov	r16,zero
  80bdf4:	002b883a 	mov	r21,zero
  80bdf8:	01400044 	movi	r5,1
  80bdfc:	003f6306 	br	80bb8c <__alt_mem_epcs_flash_controller_0+0xff802b8c>
  80be00:	02400304 	movi	r9,12
  80be04:	014000c4 	movi	r5,3
  80be08:	003f6006 	br	80bb8c <__alt_mem_epcs_flash_controller_0+0xff802b8c>
  80be0c:	04000434 	movhi	r16,16
  80be10:	0009883a 	mov	r4,zero
  80be14:	843fffc4 	addi	r16,r16,-1
  80be18:	057fffc4 	movi	r21,-1
  80be1c:	0081ffc4 	movi	r2,2047
  80be20:	003f9b06 	br	80bc90 <__alt_mem_epcs_flash_controller_0+0xff802c90>
  80be24:	00c00044 	movi	r3,1
  80be28:	1887c83a 	sub	r3,r3,r2
  80be2c:	01000e04 	movi	r4,56
  80be30:	20c1530e 	bge	r4,r3,80c380 <__divdf3+0x86c>
  80be34:	9900004c 	andi	r4,r19,1
  80be38:	0005883a 	mov	r2,zero
  80be3c:	0021883a 	mov	r16,zero
  80be40:	002b883a 	mov	r21,zero
  80be44:	003f9206 	br	80bc90 <__alt_mem_epcs_flash_controller_0+0xff802c90>
  80be48:	8c012e36 	bltu	r17,r16,80c304 <__divdf3+0x7f0>
  80be4c:	84412c26 	beq	r16,r17,80c300 <__divdf3+0x7ec>
  80be50:	a82f883a 	mov	r23,r21
  80be54:	18ffffc4 	addi	r3,r3,-1
  80be58:	002b883a 	mov	r21,zero
  80be5c:	a004d63a 	srli	r2,r20,24
  80be60:	8822923a 	slli	r17,r17,8
  80be64:	a028923a 	slli	r20,r20,8
  80be68:	8009883a 	mov	r4,r16
  80be6c:	88acb03a 	or	r22,r17,r2
  80be70:	dd000015 	stw	r20,0(sp)
  80be74:	b028d43a 	srli	r20,r22,16
  80be78:	d8c00215 	stw	r3,8(sp)
  80be7c:	b4bfffcc 	andi	r18,r22,65535
  80be80:	a00b883a 	mov	r5,r20
  80be84:	080b1840 	call	80b184 <__udivsi3>
  80be88:	100b883a 	mov	r5,r2
  80be8c:	9009883a 	mov	r4,r18
  80be90:	1023883a 	mov	r17,r2
  80be94:	080b2400 	call	80b240 <__mulsi3>
  80be98:	8009883a 	mov	r4,r16
  80be9c:	a00b883a 	mov	r5,r20
  80bea0:	1039883a 	mov	fp,r2
  80bea4:	080b1e80 	call	80b1e8 <__umodsi3>
  80bea8:	1004943a 	slli	r2,r2,16
  80beac:	b808d43a 	srli	r4,r23,16
  80beb0:	d8c00217 	ldw	r3,8(sp)
  80beb4:	2084b03a 	or	r2,r4,r2
  80beb8:	1700062e 	bgeu	r2,fp,80bed4 <__divdf3+0x3c0>
  80bebc:	1585883a 	add	r2,r2,r22
  80bec0:	893fffc4 	addi	r4,r17,-1
  80bec4:	15811d36 	bltu	r2,r22,80c33c <__divdf3+0x828>
  80bec8:	17011c2e 	bgeu	r2,fp,80c33c <__divdf3+0x828>
  80becc:	8c7fff84 	addi	r17,r17,-2
  80bed0:	1585883a 	add	r2,r2,r22
  80bed4:	1739c83a 	sub	fp,r2,fp
  80bed8:	a00b883a 	mov	r5,r20
  80bedc:	e009883a 	mov	r4,fp
  80bee0:	d8c00215 	stw	r3,8(sp)
  80bee4:	080b1840 	call	80b184 <__udivsi3>
  80bee8:	100b883a 	mov	r5,r2
  80beec:	9009883a 	mov	r4,r18
  80bef0:	1021883a 	mov	r16,r2
  80bef4:	080b2400 	call	80b240 <__mulsi3>
  80bef8:	a00b883a 	mov	r5,r20
  80befc:	e009883a 	mov	r4,fp
  80bf00:	d8800415 	stw	r2,16(sp)
  80bf04:	080b1e80 	call	80b1e8 <__umodsi3>
  80bf08:	1004943a 	slli	r2,r2,16
  80bf0c:	da000417 	ldw	r8,16(sp)
  80bf10:	bdffffcc 	andi	r23,r23,65535
  80bf14:	b884b03a 	or	r2,r23,r2
  80bf18:	d8c00217 	ldw	r3,8(sp)
  80bf1c:	1200062e 	bgeu	r2,r8,80bf38 <__divdf3+0x424>
  80bf20:	1585883a 	add	r2,r2,r22
  80bf24:	813fffc4 	addi	r4,r16,-1
  80bf28:	15810236 	bltu	r2,r22,80c334 <__divdf3+0x820>
  80bf2c:	1201012e 	bgeu	r2,r8,80c334 <__divdf3+0x820>
  80bf30:	843fff84 	addi	r16,r16,-2
  80bf34:	1585883a 	add	r2,r2,r22
  80bf38:	8822943a 	slli	r17,r17,16
  80bf3c:	d9800017 	ldw	r6,0(sp)
  80bf40:	1211c83a 	sub	r8,r2,r8
  80bf44:	8c22b03a 	or	r17,r17,r16
  80bf48:	373fffcc 	andi	fp,r6,65535
  80bf4c:	8abfffcc 	andi	r10,r17,65535
  80bf50:	8820d43a 	srli	r16,r17,16
  80bf54:	5009883a 	mov	r4,r10
  80bf58:	e00b883a 	mov	r5,fp
  80bf5c:	302ed43a 	srli	r23,r6,16
  80bf60:	d8c00215 	stw	r3,8(sp)
  80bf64:	da000415 	stw	r8,16(sp)
  80bf68:	da800115 	stw	r10,4(sp)
  80bf6c:	080b2400 	call	80b240 <__mulsi3>
  80bf70:	800b883a 	mov	r5,r16
  80bf74:	e009883a 	mov	r4,fp
  80bf78:	d8800515 	stw	r2,20(sp)
  80bf7c:	080b2400 	call	80b240 <__mulsi3>
  80bf80:	8009883a 	mov	r4,r16
  80bf84:	b80b883a 	mov	r5,r23
  80bf88:	d8800315 	stw	r2,12(sp)
  80bf8c:	080b2400 	call	80b240 <__mulsi3>
  80bf90:	da800117 	ldw	r10,4(sp)
  80bf94:	b80b883a 	mov	r5,r23
  80bf98:	1021883a 	mov	r16,r2
  80bf9c:	5009883a 	mov	r4,r10
  80bfa0:	080b2400 	call	80b240 <__mulsi3>
  80bfa4:	d9c00517 	ldw	r7,20(sp)
  80bfa8:	da400317 	ldw	r9,12(sp)
  80bfac:	d8c00217 	ldw	r3,8(sp)
  80bfb0:	3808d43a 	srli	r4,r7,16
  80bfb4:	1245883a 	add	r2,r2,r9
  80bfb8:	da000417 	ldw	r8,16(sp)
  80bfbc:	2085883a 	add	r2,r4,r2
  80bfc0:	1240022e 	bgeu	r2,r9,80bfcc <__divdf3+0x4b8>
  80bfc4:	01000074 	movhi	r4,1
  80bfc8:	8121883a 	add	r16,r16,r4
  80bfcc:	1008d43a 	srli	r4,r2,16
  80bfd0:	1004943a 	slli	r2,r2,16
  80bfd4:	39ffffcc 	andi	r7,r7,65535
  80bfd8:	2409883a 	add	r4,r4,r16
  80bfdc:	11c5883a 	add	r2,r2,r7
  80bfe0:	4100bb36 	bltu	r8,r4,80c2d0 <__divdf3+0x7bc>
  80bfe4:	4100d726 	beq	r8,r4,80c344 <__divdf3+0x830>
  80bfe8:	4109c83a 	sub	r4,r8,r4
  80bfec:	a8a1c83a 	sub	r16,r21,r2
  80bff0:	ac2b803a 	cmpltu	r21,r21,r16
  80bff4:	256bc83a 	sub	r21,r4,r21
  80bff8:	b540d926 	beq	r22,r21,80c360 <__divdf3+0x84c>
  80bffc:	a00b883a 	mov	r5,r20
  80c000:	a809883a 	mov	r4,r21
  80c004:	d8c00215 	stw	r3,8(sp)
  80c008:	080b1840 	call	80b184 <__udivsi3>
  80c00c:	100b883a 	mov	r5,r2
  80c010:	9009883a 	mov	r4,r18
  80c014:	d8800515 	stw	r2,20(sp)
  80c018:	080b2400 	call	80b240 <__mulsi3>
  80c01c:	a809883a 	mov	r4,r21
  80c020:	a00b883a 	mov	r5,r20
  80c024:	d8800415 	stw	r2,16(sp)
  80c028:	080b1e80 	call	80b1e8 <__umodsi3>
  80c02c:	1004943a 	slli	r2,r2,16
  80c030:	8008d43a 	srli	r4,r16,16
  80c034:	da000417 	ldw	r8,16(sp)
  80c038:	d8c00217 	ldw	r3,8(sp)
  80c03c:	2084b03a 	or	r2,r4,r2
  80c040:	d9c00517 	ldw	r7,20(sp)
  80c044:	1200062e 	bgeu	r2,r8,80c060 <__divdf3+0x54c>
  80c048:	1585883a 	add	r2,r2,r22
  80c04c:	393fffc4 	addi	r4,r7,-1
  80c050:	1580c536 	bltu	r2,r22,80c368 <__divdf3+0x854>
  80c054:	1200c42e 	bgeu	r2,r8,80c368 <__divdf3+0x854>
  80c058:	39ffff84 	addi	r7,r7,-2
  80c05c:	1585883a 	add	r2,r2,r22
  80c060:	122bc83a 	sub	r21,r2,r8
  80c064:	a00b883a 	mov	r5,r20
  80c068:	a809883a 	mov	r4,r21
  80c06c:	d8c00215 	stw	r3,8(sp)
  80c070:	d9c00515 	stw	r7,20(sp)
  80c074:	080b1840 	call	80b184 <__udivsi3>
  80c078:	9009883a 	mov	r4,r18
  80c07c:	100b883a 	mov	r5,r2
  80c080:	d8800415 	stw	r2,16(sp)
  80c084:	080b2400 	call	80b240 <__mulsi3>
  80c088:	a809883a 	mov	r4,r21
  80c08c:	a00b883a 	mov	r5,r20
  80c090:	1025883a 	mov	r18,r2
  80c094:	080b1e80 	call	80b1e8 <__umodsi3>
  80c098:	1004943a 	slli	r2,r2,16
  80c09c:	813fffcc 	andi	r4,r16,65535
  80c0a0:	d8c00217 	ldw	r3,8(sp)
  80c0a4:	20a0b03a 	or	r16,r4,r2
  80c0a8:	d9c00517 	ldw	r7,20(sp)
  80c0ac:	da000417 	ldw	r8,16(sp)
  80c0b0:	8480062e 	bgeu	r16,r18,80c0cc <__divdf3+0x5b8>
  80c0b4:	85a1883a 	add	r16,r16,r22
  80c0b8:	40bfffc4 	addi	r2,r8,-1
  80c0bc:	8580ac36 	bltu	r16,r22,80c370 <__divdf3+0x85c>
  80c0c0:	8480ab2e 	bgeu	r16,r18,80c370 <__divdf3+0x85c>
  80c0c4:	423fff84 	addi	r8,r8,-2
  80c0c8:	85a1883a 	add	r16,r16,r22
  80c0cc:	3804943a 	slli	r2,r7,16
  80c0d0:	84a1c83a 	sub	r16,r16,r18
  80c0d4:	e009883a 	mov	r4,fp
  80c0d8:	1228b03a 	or	r20,r2,r8
  80c0dc:	a1ffffcc 	andi	r7,r20,65535
  80c0e0:	a024d43a 	srli	r18,r20,16
  80c0e4:	380b883a 	mov	r5,r7
  80c0e8:	d8c00215 	stw	r3,8(sp)
  80c0ec:	d9c00515 	stw	r7,20(sp)
  80c0f0:	080b2400 	call	80b240 <__mulsi3>
  80c0f4:	900b883a 	mov	r5,r18
  80c0f8:	e009883a 	mov	r4,fp
  80c0fc:	102b883a 	mov	r21,r2
  80c100:	080b2400 	call	80b240 <__mulsi3>
  80c104:	900b883a 	mov	r5,r18
  80c108:	b809883a 	mov	r4,r23
  80c10c:	1039883a 	mov	fp,r2
  80c110:	080b2400 	call	80b240 <__mulsi3>
  80c114:	d9c00517 	ldw	r7,20(sp)
  80c118:	b80b883a 	mov	r5,r23
  80c11c:	1025883a 	mov	r18,r2
  80c120:	3809883a 	mov	r4,r7
  80c124:	080b2400 	call	80b240 <__mulsi3>
  80c128:	a808d43a 	srli	r4,r21,16
  80c12c:	1705883a 	add	r2,r2,fp
  80c130:	d8c00217 	ldw	r3,8(sp)
  80c134:	2085883a 	add	r2,r4,r2
  80c138:	1700022e 	bgeu	r2,fp,80c144 <__divdf3+0x630>
  80c13c:	01000074 	movhi	r4,1
  80c140:	9125883a 	add	r18,r18,r4
  80c144:	1008d43a 	srli	r4,r2,16
  80c148:	1004943a 	slli	r2,r2,16
  80c14c:	ad7fffcc 	andi	r21,r21,65535
  80c150:	2489883a 	add	r4,r4,r18
  80c154:	1545883a 	add	r2,r2,r21
  80c158:	81003836 	bltu	r16,r4,80c23c <__divdf3+0x728>
  80c15c:	81003626 	beq	r16,r4,80c238 <__divdf3+0x724>
  80c160:	a5000054 	ori	r20,r20,1
  80c164:	1880ffc4 	addi	r2,r3,1023
  80c168:	00bf2e0e 	bge	zero,r2,80be24 <__alt_mem_epcs_flash_controller_0+0xff802e24>
  80c16c:	a10001cc 	andi	r4,r20,7
  80c170:	20000726 	beq	r4,zero,80c190 <__divdf3+0x67c>
  80c174:	a10003cc 	andi	r4,r20,15
  80c178:	01400104 	movi	r5,4
  80c17c:	21400426 	beq	r4,r5,80c190 <__divdf3+0x67c>
  80c180:	a149883a 	add	r4,r20,r5
  80c184:	2529803a 	cmpltu	r20,r4,r20
  80c188:	8d23883a 	add	r17,r17,r20
  80c18c:	2029883a 	mov	r20,r4
  80c190:	8900402c 	andhi	r4,r17,256
  80c194:	20000426 	beq	r4,zero,80c1a8 <__divdf3+0x694>
  80c198:	18810004 	addi	r2,r3,1024
  80c19c:	00ffc034 	movhi	r3,65280
  80c1a0:	18ffffc4 	addi	r3,r3,-1
  80c1a4:	88e2703a 	and	r17,r17,r3
  80c1a8:	00c1ff84 	movi	r3,2046
  80c1ac:	18beb416 	blt	r3,r2,80bc80 <__alt_mem_epcs_flash_controller_0+0xff802c80>
  80c1b0:	a028d0fa 	srli	r20,r20,3
  80c1b4:	882a977a 	slli	r21,r17,29
  80c1b8:	8820927a 	slli	r16,r17,9
  80c1bc:	1081ffcc 	andi	r2,r2,2047
  80c1c0:	ad2ab03a 	or	r21,r21,r20
  80c1c4:	8020d33a 	srli	r16,r16,12
  80c1c8:	9900004c 	andi	r4,r19,1
  80c1cc:	003eb006 	br	80bc90 <__alt_mem_epcs_flash_controller_0+0xff802c90>
  80c1d0:	8080022c 	andhi	r2,r16,8
  80c1d4:	10001226 	beq	r2,zero,80c220 <__divdf3+0x70c>
  80c1d8:	8880022c 	andhi	r2,r17,8
  80c1dc:	1000101e 	bne	r2,zero,80c220 <__divdf3+0x70c>
  80c1e0:	00800434 	movhi	r2,16
  80c1e4:	8c000234 	orhi	r16,r17,8
  80c1e8:	10bfffc4 	addi	r2,r2,-1
  80c1ec:	b809883a 	mov	r4,r23
  80c1f0:	80a0703a 	and	r16,r16,r2
  80c1f4:	a02b883a 	mov	r21,r20
  80c1f8:	003f0806 	br	80be1c <__alt_mem_epcs_flash_controller_0+0xff802e1c>
  80c1fc:	008000c4 	movi	r2,3
  80c200:	3880b126 	beq	r7,r2,80c4c8 <__divdf3+0x9b4>
  80c204:	00800044 	movi	r2,1
  80c208:	38805b1e 	bne	r7,r2,80c378 <__divdf3+0x864>
  80c20c:	e009883a 	mov	r4,fp
  80c210:	0005883a 	mov	r2,zero
  80c214:	0021883a 	mov	r16,zero
  80c218:	002b883a 	mov	r21,zero
  80c21c:	003e9c06 	br	80bc90 <__alt_mem_epcs_flash_controller_0+0xff802c90>
  80c220:	00800434 	movhi	r2,16
  80c224:	84000234 	orhi	r16,r16,8
  80c228:	10bfffc4 	addi	r2,r2,-1
  80c22c:	b009883a 	mov	r4,r22
  80c230:	80a0703a 	and	r16,r16,r2
  80c234:	003ef906 	br	80be1c <__alt_mem_epcs_flash_controller_0+0xff802e1c>
  80c238:	103fca26 	beq	r2,zero,80c164 <__alt_mem_epcs_flash_controller_0+0xff803164>
  80c23c:	b421883a 	add	r16,r22,r16
  80c240:	a17fffc4 	addi	r5,r20,-1
  80c244:	8580422e 	bgeu	r16,r22,80c350 <__divdf3+0x83c>
  80c248:	2829883a 	mov	r20,r5
  80c24c:	813fc41e 	bne	r16,r4,80c160 <__alt_mem_epcs_flash_controller_0+0xff803160>
  80c250:	d9800017 	ldw	r6,0(sp)
  80c254:	30bfc21e 	bne	r6,r2,80c160 <__alt_mem_epcs_flash_controller_0+0xff803160>
  80c258:	003fc206 	br	80c164 <__alt_mem_epcs_flash_controller_0+0xff803164>
  80c25c:	143ff604 	addi	r16,r2,-40
  80c260:	8c20983a 	sll	r16,r17,r16
  80c264:	002b883a 	mov	r21,zero
  80c268:	003eb406 	br	80bd3c <__alt_mem_epcs_flash_controller_0+0xff802d3c>
  80c26c:	d9800215 	stw	r6,8(sp)
  80c270:	d9c00515 	stw	r7,20(sp)
  80c274:	da000415 	stw	r8,16(sp)
  80c278:	080daa80 	call	80daa8 <__clzsi2>
  80c27c:	10800804 	addi	r2,r2,32
  80c280:	da000417 	ldw	r8,16(sp)
  80c284:	d9c00517 	ldw	r7,20(sp)
  80c288:	d9800217 	ldw	r6,8(sp)
  80c28c:	003ea106 	br	80bd14 <__alt_mem_epcs_flash_controller_0+0xff802d14>
  80c290:	147ff604 	addi	r17,r2,-40
  80c294:	3462983a 	sll	r17,r6,r17
  80c298:	0029883a 	mov	r20,zero
  80c29c:	003ec906 	br	80bdc4 <__alt_mem_epcs_flash_controller_0+0xff802dc4>
  80c2a0:	3009883a 	mov	r4,r6
  80c2a4:	d9400115 	stw	r5,4(sp)
  80c2a8:	d9800215 	stw	r6,8(sp)
  80c2ac:	da000415 	stw	r8,16(sp)
  80c2b0:	da400315 	stw	r9,12(sp)
  80c2b4:	080daa80 	call	80daa8 <__clzsi2>
  80c2b8:	10800804 	addi	r2,r2,32
  80c2bc:	da400317 	ldw	r9,12(sp)
  80c2c0:	da000417 	ldw	r8,16(sp)
  80c2c4:	d9800217 	ldw	r6,8(sp)
  80c2c8:	d9400117 	ldw	r5,4(sp)
  80c2cc:	003eb306 	br	80bd9c <__alt_mem_epcs_flash_controller_0+0xff802d9c>
  80c2d0:	d9800017 	ldw	r6,0(sp)
  80c2d4:	a9ab883a 	add	r21,r21,r6
  80c2d8:	a98b803a 	cmpltu	r5,r21,r6
  80c2dc:	2d8b883a 	add	r5,r5,r22
  80c2e0:	2a11883a 	add	r8,r5,r8
  80c2e4:	897fffc4 	addi	r5,r17,-1
  80c2e8:	b2000c2e 	bgeu	r22,r8,80c31c <__divdf3+0x808>
  80c2ec:	41003f36 	bltu	r8,r4,80c3ec <__divdf3+0x8d8>
  80c2f0:	22006c26 	beq	r4,r8,80c4a4 <__divdf3+0x990>
  80c2f4:	4109c83a 	sub	r4,r8,r4
  80c2f8:	2823883a 	mov	r17,r5
  80c2fc:	003f3b06 	br	80bfec <__alt_mem_epcs_flash_controller_0+0xff802fec>
  80c300:	ad3ed336 	bltu	r21,r20,80be50 <__alt_mem_epcs_flash_controller_0+0xff802e50>
  80c304:	a804d07a 	srli	r2,r21,1
  80c308:	802e97fa 	slli	r23,r16,31
  80c30c:	a82a97fa 	slli	r21,r21,31
  80c310:	8020d07a 	srli	r16,r16,1
  80c314:	b8aeb03a 	or	r23,r23,r2
  80c318:	003ed006 	br	80be5c <__alt_mem_epcs_flash_controller_0+0xff802e5c>
  80c31c:	b23ff51e 	bne	r22,r8,80c2f4 <__alt_mem_epcs_flash_controller_0+0xff8032f4>
  80c320:	d9800017 	ldw	r6,0(sp)
  80c324:	a9bff12e 	bgeu	r21,r6,80c2ec <__alt_mem_epcs_flash_controller_0+0xff8032ec>
  80c328:	b109c83a 	sub	r4,r22,r4
  80c32c:	2823883a 	mov	r17,r5
  80c330:	003f2e06 	br	80bfec <__alt_mem_epcs_flash_controller_0+0xff802fec>
  80c334:	2021883a 	mov	r16,r4
  80c338:	003eff06 	br	80bf38 <__alt_mem_epcs_flash_controller_0+0xff802f38>
  80c33c:	2023883a 	mov	r17,r4
  80c340:	003ee406 	br	80bed4 <__alt_mem_epcs_flash_controller_0+0xff802ed4>
  80c344:	a8bfe236 	bltu	r21,r2,80c2d0 <__alt_mem_epcs_flash_controller_0+0xff8032d0>
  80c348:	0009883a 	mov	r4,zero
  80c34c:	003f2706 	br	80bfec <__alt_mem_epcs_flash_controller_0+0xff802fec>
  80c350:	81002d36 	bltu	r16,r4,80c408 <__divdf3+0x8f4>
  80c354:	24005626 	beq	r4,r16,80c4b0 <__divdf3+0x99c>
  80c358:	2829883a 	mov	r20,r5
  80c35c:	003f8006 	br	80c160 <__alt_mem_epcs_flash_controller_0+0xff803160>
  80c360:	053fffc4 	movi	r20,-1
  80c364:	003f7f06 	br	80c164 <__alt_mem_epcs_flash_controller_0+0xff803164>
  80c368:	200f883a 	mov	r7,r4
  80c36c:	003f3c06 	br	80c060 <__alt_mem_epcs_flash_controller_0+0xff803060>
  80c370:	1011883a 	mov	r8,r2
  80c374:	003f5506 	br	80c0cc <__alt_mem_epcs_flash_controller_0+0xff8030cc>
  80c378:	e027883a 	mov	r19,fp
  80c37c:	003f7906 	br	80c164 <__alt_mem_epcs_flash_controller_0+0xff803164>
  80c380:	010007c4 	movi	r4,31
  80c384:	20c02816 	blt	r4,r3,80c428 <__divdf3+0x914>
  80c388:	00800804 	movi	r2,32
  80c38c:	10c5c83a 	sub	r2,r2,r3
  80c390:	888a983a 	sll	r5,r17,r2
  80c394:	a0c8d83a 	srl	r4,r20,r3
  80c398:	a084983a 	sll	r2,r20,r2
  80c39c:	88e2d83a 	srl	r17,r17,r3
  80c3a0:	2906b03a 	or	r3,r5,r4
  80c3a4:	1004c03a 	cmpne	r2,r2,zero
  80c3a8:	1886b03a 	or	r3,r3,r2
  80c3ac:	188001cc 	andi	r2,r3,7
  80c3b0:	10000726 	beq	r2,zero,80c3d0 <__divdf3+0x8bc>
  80c3b4:	188003cc 	andi	r2,r3,15
  80c3b8:	01000104 	movi	r4,4
  80c3bc:	11000426 	beq	r2,r4,80c3d0 <__divdf3+0x8bc>
  80c3c0:	1805883a 	mov	r2,r3
  80c3c4:	10c00104 	addi	r3,r2,4
  80c3c8:	1885803a 	cmpltu	r2,r3,r2
  80c3cc:	88a3883a 	add	r17,r17,r2
  80c3d0:	8880202c 	andhi	r2,r17,128
  80c3d4:	10002926 	beq	r2,zero,80c47c <__divdf3+0x968>
  80c3d8:	9900004c 	andi	r4,r19,1
  80c3dc:	00800044 	movi	r2,1
  80c3e0:	0021883a 	mov	r16,zero
  80c3e4:	002b883a 	mov	r21,zero
  80c3e8:	003e2906 	br	80bc90 <__alt_mem_epcs_flash_controller_0+0xff802c90>
  80c3ec:	d9800017 	ldw	r6,0(sp)
  80c3f0:	8c7fff84 	addi	r17,r17,-2
  80c3f4:	a9ab883a 	add	r21,r21,r6
  80c3f8:	a98b803a 	cmpltu	r5,r21,r6
  80c3fc:	2d8b883a 	add	r5,r5,r22
  80c400:	2a11883a 	add	r8,r5,r8
  80c404:	003ef806 	br	80bfe8 <__alt_mem_epcs_flash_controller_0+0xff802fe8>
  80c408:	d9800017 	ldw	r6,0(sp)
  80c40c:	318f883a 	add	r7,r6,r6
  80c410:	398b803a 	cmpltu	r5,r7,r6
  80c414:	2d8d883a 	add	r6,r5,r22
  80c418:	81a1883a 	add	r16,r16,r6
  80c41c:	a17fff84 	addi	r5,r20,-2
  80c420:	d9c00015 	stw	r7,0(sp)
  80c424:	003f8806 	br	80c248 <__alt_mem_epcs_flash_controller_0+0xff803248>
  80c428:	013ff844 	movi	r4,-31
  80c42c:	2085c83a 	sub	r2,r4,r2
  80c430:	8888d83a 	srl	r4,r17,r2
  80c434:	00800804 	movi	r2,32
  80c438:	18802126 	beq	r3,r2,80c4c0 <__divdf3+0x9ac>
  80c43c:	04001004 	movi	r16,64
  80c440:	80c7c83a 	sub	r3,r16,r3
  80c444:	88e0983a 	sll	r16,r17,r3
  80c448:	8504b03a 	or	r2,r16,r20
  80c44c:	1004c03a 	cmpne	r2,r2,zero
  80c450:	2084b03a 	or	r2,r4,r2
  80c454:	144001cc 	andi	r17,r2,7
  80c458:	88000d1e 	bne	r17,zero,80c490 <__divdf3+0x97c>
  80c45c:	0021883a 	mov	r16,zero
  80c460:	102ad0fa 	srli	r21,r2,3
  80c464:	9900004c 	andi	r4,r19,1
  80c468:	0005883a 	mov	r2,zero
  80c46c:	ac6ab03a 	or	r21,r21,r17
  80c470:	003e0706 	br	80bc90 <__alt_mem_epcs_flash_controller_0+0xff802c90>
  80c474:	1007883a 	mov	r3,r2
  80c478:	0023883a 	mov	r17,zero
  80c47c:	8820927a 	slli	r16,r17,9
  80c480:	1805883a 	mov	r2,r3
  80c484:	8822977a 	slli	r17,r17,29
  80c488:	8020d33a 	srli	r16,r16,12
  80c48c:	003ff406 	br	80c460 <__alt_mem_epcs_flash_controller_0+0xff803460>
  80c490:	10c003cc 	andi	r3,r2,15
  80c494:	01000104 	movi	r4,4
  80c498:	193ff626 	beq	r3,r4,80c474 <__alt_mem_epcs_flash_controller_0+0xff803474>
  80c49c:	0023883a 	mov	r17,zero
  80c4a0:	003fc806 	br	80c3c4 <__alt_mem_epcs_flash_controller_0+0xff8033c4>
  80c4a4:	a8bfd136 	bltu	r21,r2,80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80c4a8:	2823883a 	mov	r17,r5
  80c4ac:	003fa606 	br	80c348 <__alt_mem_epcs_flash_controller_0+0xff803348>
  80c4b0:	d9800017 	ldw	r6,0(sp)
  80c4b4:	30bfd436 	bltu	r6,r2,80c408 <__alt_mem_epcs_flash_controller_0+0xff803408>
  80c4b8:	2829883a 	mov	r20,r5
  80c4bc:	003f6406 	br	80c250 <__alt_mem_epcs_flash_controller_0+0xff803250>
  80c4c0:	0021883a 	mov	r16,zero
  80c4c4:	003fe006 	br	80c448 <__alt_mem_epcs_flash_controller_0+0xff803448>
  80c4c8:	00800434 	movhi	r2,16
  80c4cc:	8c000234 	orhi	r16,r17,8
  80c4d0:	10bfffc4 	addi	r2,r2,-1
  80c4d4:	e009883a 	mov	r4,fp
  80c4d8:	80a0703a 	and	r16,r16,r2
  80c4dc:	a02b883a 	mov	r21,r20
  80c4e0:	003e4e06 	br	80be1c <__alt_mem_epcs_flash_controller_0+0xff802e1c>

0080c4e4 <__eqdf2>:
  80c4e4:	2804d53a 	srli	r2,r5,20
  80c4e8:	3806d53a 	srli	r3,r7,20
  80c4ec:	02000434 	movhi	r8,16
  80c4f0:	423fffc4 	addi	r8,r8,-1
  80c4f4:	1081ffcc 	andi	r2,r2,2047
  80c4f8:	0281ffc4 	movi	r10,2047
  80c4fc:	2a12703a 	and	r9,r5,r8
  80c500:	18c1ffcc 	andi	r3,r3,2047
  80c504:	3a10703a 	and	r8,r7,r8
  80c508:	280ad7fa 	srli	r5,r5,31
  80c50c:	380ed7fa 	srli	r7,r7,31
  80c510:	12801026 	beq	r2,r10,80c554 <__eqdf2+0x70>
  80c514:	0281ffc4 	movi	r10,2047
  80c518:	1a800a26 	beq	r3,r10,80c544 <__eqdf2+0x60>
  80c51c:	10c00226 	beq	r2,r3,80c528 <__eqdf2+0x44>
  80c520:	00800044 	movi	r2,1
  80c524:	f800283a 	ret
  80c528:	4a3ffd1e 	bne	r9,r8,80c520 <__alt_mem_epcs_flash_controller_0+0xff803520>
  80c52c:	21bffc1e 	bne	r4,r6,80c520 <__alt_mem_epcs_flash_controller_0+0xff803520>
  80c530:	29c00c26 	beq	r5,r7,80c564 <__eqdf2+0x80>
  80c534:	103ffa1e 	bne	r2,zero,80c520 <__alt_mem_epcs_flash_controller_0+0xff803520>
  80c538:	2244b03a 	or	r2,r4,r9
  80c53c:	1004c03a 	cmpne	r2,r2,zero
  80c540:	f800283a 	ret
  80c544:	3214b03a 	or	r10,r6,r8
  80c548:	503ff426 	beq	r10,zero,80c51c <__alt_mem_epcs_flash_controller_0+0xff80351c>
  80c54c:	00800044 	movi	r2,1
  80c550:	f800283a 	ret
  80c554:	2254b03a 	or	r10,r4,r9
  80c558:	503fee26 	beq	r10,zero,80c514 <__alt_mem_epcs_flash_controller_0+0xff803514>
  80c55c:	00800044 	movi	r2,1
  80c560:	f800283a 	ret
  80c564:	0005883a 	mov	r2,zero
  80c568:	f800283a 	ret

0080c56c <__gedf2>:
  80c56c:	2804d53a 	srli	r2,r5,20
  80c570:	3806d53a 	srli	r3,r7,20
  80c574:	02000434 	movhi	r8,16
  80c578:	423fffc4 	addi	r8,r8,-1
  80c57c:	1081ffcc 	andi	r2,r2,2047
  80c580:	0241ffc4 	movi	r9,2047
  80c584:	2a14703a 	and	r10,r5,r8
  80c588:	18c1ffcc 	andi	r3,r3,2047
  80c58c:	3a10703a 	and	r8,r7,r8
  80c590:	280ad7fa 	srli	r5,r5,31
  80c594:	380ed7fa 	srli	r7,r7,31
  80c598:	12401d26 	beq	r2,r9,80c610 <__gedf2+0xa4>
  80c59c:	0241ffc4 	movi	r9,2047
  80c5a0:	1a401226 	beq	r3,r9,80c5ec <__gedf2+0x80>
  80c5a4:	1000081e 	bne	r2,zero,80c5c8 <__gedf2+0x5c>
  80c5a8:	2296b03a 	or	r11,r4,r10
  80c5ac:	5813003a 	cmpeq	r9,r11,zero
  80c5b0:	1800091e 	bne	r3,zero,80c5d8 <__gedf2+0x6c>
  80c5b4:	3218b03a 	or	r12,r6,r8
  80c5b8:	6000071e 	bne	r12,zero,80c5d8 <__gedf2+0x6c>
  80c5bc:	0005883a 	mov	r2,zero
  80c5c0:	5800101e 	bne	r11,zero,80c604 <__gedf2+0x98>
  80c5c4:	f800283a 	ret
  80c5c8:	18000c1e 	bne	r3,zero,80c5fc <__gedf2+0x90>
  80c5cc:	3212b03a 	or	r9,r6,r8
  80c5d0:	48000c26 	beq	r9,zero,80c604 <__gedf2+0x98>
  80c5d4:	0013883a 	mov	r9,zero
  80c5d8:	39c03fcc 	andi	r7,r7,255
  80c5dc:	48000826 	beq	r9,zero,80c600 <__gedf2+0x94>
  80c5e0:	38000926 	beq	r7,zero,80c608 <__gedf2+0x9c>
  80c5e4:	00800044 	movi	r2,1
  80c5e8:	f800283a 	ret
  80c5ec:	3212b03a 	or	r9,r6,r8
  80c5f0:	483fec26 	beq	r9,zero,80c5a4 <__alt_mem_epcs_flash_controller_0+0xff8035a4>
  80c5f4:	00bfff84 	movi	r2,-2
  80c5f8:	f800283a 	ret
  80c5fc:	39c03fcc 	andi	r7,r7,255
  80c600:	29c00626 	beq	r5,r7,80c61c <__gedf2+0xb0>
  80c604:	283ff726 	beq	r5,zero,80c5e4 <__alt_mem_epcs_flash_controller_0+0xff8035e4>
  80c608:	00bfffc4 	movi	r2,-1
  80c60c:	f800283a 	ret
  80c610:	2292b03a 	or	r9,r4,r10
  80c614:	483fe126 	beq	r9,zero,80c59c <__alt_mem_epcs_flash_controller_0+0xff80359c>
  80c618:	003ff606 	br	80c5f4 <__alt_mem_epcs_flash_controller_0+0xff8035f4>
  80c61c:	18bff916 	blt	r3,r2,80c604 <__alt_mem_epcs_flash_controller_0+0xff803604>
  80c620:	10c00316 	blt	r2,r3,80c630 <__gedf2+0xc4>
  80c624:	42bff736 	bltu	r8,r10,80c604 <__alt_mem_epcs_flash_controller_0+0xff803604>
  80c628:	52000326 	beq	r10,r8,80c638 <__gedf2+0xcc>
  80c62c:	5200042e 	bgeu	r10,r8,80c640 <__gedf2+0xd4>
  80c630:	283fec1e 	bne	r5,zero,80c5e4 <__alt_mem_epcs_flash_controller_0+0xff8035e4>
  80c634:	003ff406 	br	80c608 <__alt_mem_epcs_flash_controller_0+0xff803608>
  80c638:	313ff236 	bltu	r6,r4,80c604 <__alt_mem_epcs_flash_controller_0+0xff803604>
  80c63c:	21bffc36 	bltu	r4,r6,80c630 <__alt_mem_epcs_flash_controller_0+0xff803630>
  80c640:	0005883a 	mov	r2,zero
  80c644:	f800283a 	ret

0080c648 <__ledf2>:
  80c648:	2804d53a 	srli	r2,r5,20
  80c64c:	3810d53a 	srli	r8,r7,20
  80c650:	00c00434 	movhi	r3,16
  80c654:	18ffffc4 	addi	r3,r3,-1
  80c658:	1081ffcc 	andi	r2,r2,2047
  80c65c:	0241ffc4 	movi	r9,2047
  80c660:	28d4703a 	and	r10,r5,r3
  80c664:	4201ffcc 	andi	r8,r8,2047
  80c668:	38c6703a 	and	r3,r7,r3
  80c66c:	280ad7fa 	srli	r5,r5,31
  80c670:	380ed7fa 	srli	r7,r7,31
  80c674:	12401f26 	beq	r2,r9,80c6f4 <__ledf2+0xac>
  80c678:	0241ffc4 	movi	r9,2047
  80c67c:	42401426 	beq	r8,r9,80c6d0 <__ledf2+0x88>
  80c680:	1000091e 	bne	r2,zero,80c6a8 <__ledf2+0x60>
  80c684:	2296b03a 	or	r11,r4,r10
  80c688:	5813003a 	cmpeq	r9,r11,zero
  80c68c:	29403fcc 	andi	r5,r5,255
  80c690:	40000a1e 	bne	r8,zero,80c6bc <__ledf2+0x74>
  80c694:	30d8b03a 	or	r12,r6,r3
  80c698:	6000081e 	bne	r12,zero,80c6bc <__ledf2+0x74>
  80c69c:	0005883a 	mov	r2,zero
  80c6a0:	5800111e 	bne	r11,zero,80c6e8 <__ledf2+0xa0>
  80c6a4:	f800283a 	ret
  80c6a8:	29403fcc 	andi	r5,r5,255
  80c6ac:	40000c1e 	bne	r8,zero,80c6e0 <__ledf2+0x98>
  80c6b0:	30d2b03a 	or	r9,r6,r3
  80c6b4:	48000c26 	beq	r9,zero,80c6e8 <__ledf2+0xa0>
  80c6b8:	0013883a 	mov	r9,zero
  80c6bc:	39c03fcc 	andi	r7,r7,255
  80c6c0:	48000826 	beq	r9,zero,80c6e4 <__ledf2+0x9c>
  80c6c4:	38001126 	beq	r7,zero,80c70c <__ledf2+0xc4>
  80c6c8:	00800044 	movi	r2,1
  80c6cc:	f800283a 	ret
  80c6d0:	30d2b03a 	or	r9,r6,r3
  80c6d4:	483fea26 	beq	r9,zero,80c680 <__alt_mem_epcs_flash_controller_0+0xff803680>
  80c6d8:	00800084 	movi	r2,2
  80c6dc:	f800283a 	ret
  80c6e0:	39c03fcc 	andi	r7,r7,255
  80c6e4:	39400726 	beq	r7,r5,80c704 <__ledf2+0xbc>
  80c6e8:	2800081e 	bne	r5,zero,80c70c <__ledf2+0xc4>
  80c6ec:	00800044 	movi	r2,1
  80c6f0:	f800283a 	ret
  80c6f4:	2292b03a 	or	r9,r4,r10
  80c6f8:	483fdf26 	beq	r9,zero,80c678 <__alt_mem_epcs_flash_controller_0+0xff803678>
  80c6fc:	00800084 	movi	r2,2
  80c700:	f800283a 	ret
  80c704:	4080030e 	bge	r8,r2,80c714 <__ledf2+0xcc>
  80c708:	383fef26 	beq	r7,zero,80c6c8 <__alt_mem_epcs_flash_controller_0+0xff8036c8>
  80c70c:	00bfffc4 	movi	r2,-1
  80c710:	f800283a 	ret
  80c714:	123feb16 	blt	r2,r8,80c6c4 <__alt_mem_epcs_flash_controller_0+0xff8036c4>
  80c718:	1abff336 	bltu	r3,r10,80c6e8 <__alt_mem_epcs_flash_controller_0+0xff8036e8>
  80c71c:	50c00326 	beq	r10,r3,80c72c <__ledf2+0xe4>
  80c720:	50c0042e 	bgeu	r10,r3,80c734 <__ledf2+0xec>
  80c724:	283fe81e 	bne	r5,zero,80c6c8 <__alt_mem_epcs_flash_controller_0+0xff8036c8>
  80c728:	003ff806 	br	80c70c <__alt_mem_epcs_flash_controller_0+0xff80370c>
  80c72c:	313fee36 	bltu	r6,r4,80c6e8 <__alt_mem_epcs_flash_controller_0+0xff8036e8>
  80c730:	21bffc36 	bltu	r4,r6,80c724 <__alt_mem_epcs_flash_controller_0+0xff803724>
  80c734:	0005883a 	mov	r2,zero
  80c738:	f800283a 	ret

0080c73c <__muldf3>:
  80c73c:	deffee04 	addi	sp,sp,-72
  80c740:	dd000c15 	stw	r20,48(sp)
  80c744:	2828d53a 	srli	r20,r5,20
  80c748:	ddc00f15 	stw	r23,60(sp)
  80c74c:	282ed7fa 	srli	r23,r5,31
  80c750:	dc000815 	stw	r16,32(sp)
  80c754:	04000434 	movhi	r16,16
  80c758:	dcc00b15 	stw	r19,44(sp)
  80c75c:	843fffc4 	addi	r16,r16,-1
  80c760:	dfc01115 	stw	ra,68(sp)
  80c764:	df001015 	stw	fp,64(sp)
  80c768:	dd800e15 	stw	r22,56(sp)
  80c76c:	dd400d15 	stw	r21,52(sp)
  80c770:	dc800a15 	stw	r18,40(sp)
  80c774:	dc400915 	stw	r17,36(sp)
  80c778:	a501ffcc 	andi	r20,r20,2047
  80c77c:	2c20703a 	and	r16,r5,r16
  80c780:	b827883a 	mov	r19,r23
  80c784:	ba403fcc 	andi	r9,r23,255
  80c788:	a0006026 	beq	r20,zero,80c90c <__muldf3+0x1d0>
  80c78c:	0081ffc4 	movi	r2,2047
  80c790:	202d883a 	mov	r22,r4
  80c794:	a0803626 	beq	r20,r2,80c870 <__muldf3+0x134>
  80c798:	84000434 	orhi	r16,r16,16
  80c79c:	200ad77a 	srli	r5,r4,29
  80c7a0:	800490fa 	slli	r2,r16,3
  80c7a4:	202c90fa 	slli	r22,r4,3
  80c7a8:	a53f0044 	addi	r20,r20,-1023
  80c7ac:	28a0b03a 	or	r16,r5,r2
  80c7b0:	002b883a 	mov	r21,zero
  80c7b4:	000b883a 	mov	r5,zero
  80c7b8:	3804d53a 	srli	r2,r7,20
  80c7bc:	3838d7fa 	srli	fp,r7,31
  80c7c0:	04400434 	movhi	r17,16
  80c7c4:	8c7fffc4 	addi	r17,r17,-1
  80c7c8:	1081ffcc 	andi	r2,r2,2047
  80c7cc:	3025883a 	mov	r18,r6
  80c7d0:	3c62703a 	and	r17,r7,r17
  80c7d4:	e2803fcc 	andi	r10,fp,255
  80c7d8:	10006d26 	beq	r2,zero,80c990 <__muldf3+0x254>
  80c7dc:	00c1ffc4 	movi	r3,2047
  80c7e0:	10c06526 	beq	r2,r3,80c978 <__muldf3+0x23c>
  80c7e4:	8c400434 	orhi	r17,r17,16
  80c7e8:	300ed77a 	srli	r7,r6,29
  80c7ec:	880690fa 	slli	r3,r17,3
  80c7f0:	302490fa 	slli	r18,r6,3
  80c7f4:	10bf0044 	addi	r2,r2,-1023
  80c7f8:	38e2b03a 	or	r17,r7,r3
  80c7fc:	000f883a 	mov	r7,zero
  80c800:	a087883a 	add	r3,r20,r2
  80c804:	010003c4 	movi	r4,15
  80c808:	3d44b03a 	or	r2,r7,r21
  80c80c:	e5ccf03a 	xor	r6,fp,r23
  80c810:	1a000044 	addi	r8,r3,1
  80c814:	20809b36 	bltu	r4,r2,80ca84 <__muldf3+0x348>
  80c818:	100490ba 	slli	r2,r2,2
  80c81c:	01002074 	movhi	r4,129
  80c820:	21320c04 	addi	r4,r4,-14288
  80c824:	1105883a 	add	r2,r2,r4
  80c828:	10800017 	ldw	r2,0(r2)
  80c82c:	1000683a 	jmp	r2
  80c830:	0080ca84 	movi	r2,810
  80c834:	0080c890 	cmplti	r2,zero,802
  80c838:	0080c890 	cmplti	r2,zero,802
  80c83c:	0080c88c 	andi	r2,zero,802
  80c840:	0080ca60 	cmpeqi	r2,zero,809
  80c844:	0080ca60 	cmpeqi	r2,zero,809
  80c848:	0080ca48 	cmpgei	r2,zero,809
  80c84c:	0080c88c 	andi	r2,zero,802
  80c850:	0080ca60 	cmpeqi	r2,zero,809
  80c854:	0080ca48 	cmpgei	r2,zero,809
  80c858:	0080ca60 	cmpeqi	r2,zero,809
  80c85c:	0080c88c 	andi	r2,zero,802
  80c860:	0080ca70 	cmpltui	r2,zero,809
  80c864:	0080ca70 	cmpltui	r2,zero,809
  80c868:	0080ca70 	cmpltui	r2,zero,809
  80c86c:	0080cdd0 	cmplti	r2,zero,823
  80c870:	2404b03a 	or	r2,r4,r16
  80c874:	1000711e 	bne	r2,zero,80ca3c <__muldf3+0x300>
  80c878:	05400204 	movi	r21,8
  80c87c:	0021883a 	mov	r16,zero
  80c880:	002d883a 	mov	r22,zero
  80c884:	01400084 	movi	r5,2
  80c888:	003fcb06 	br	80c7b8 <__alt_mem_epcs_flash_controller_0+0xff8037b8>
  80c88c:	500d883a 	mov	r6,r10
  80c890:	00800084 	movi	r2,2
  80c894:	38805926 	beq	r7,r2,80c9fc <__muldf3+0x2c0>
  80c898:	008000c4 	movi	r2,3
  80c89c:	3881bb26 	beq	r7,r2,80cf8c <__muldf3+0x850>
  80c8a0:	00800044 	movi	r2,1
  80c8a4:	3881961e 	bne	r7,r2,80cf00 <__muldf3+0x7c4>
  80c8a8:	3027883a 	mov	r19,r6
  80c8ac:	0005883a 	mov	r2,zero
  80c8b0:	0021883a 	mov	r16,zero
  80c8b4:	002d883a 	mov	r22,zero
  80c8b8:	1004953a 	slli	r2,r2,20
  80c8bc:	98c03fcc 	andi	r3,r19,255
  80c8c0:	04400434 	movhi	r17,16
  80c8c4:	8c7fffc4 	addi	r17,r17,-1
  80c8c8:	180697fa 	slli	r3,r3,31
  80c8cc:	8460703a 	and	r16,r16,r17
  80c8d0:	80a0b03a 	or	r16,r16,r2
  80c8d4:	80c6b03a 	or	r3,r16,r3
  80c8d8:	b005883a 	mov	r2,r22
  80c8dc:	dfc01117 	ldw	ra,68(sp)
  80c8e0:	df001017 	ldw	fp,64(sp)
  80c8e4:	ddc00f17 	ldw	r23,60(sp)
  80c8e8:	dd800e17 	ldw	r22,56(sp)
  80c8ec:	dd400d17 	ldw	r21,52(sp)
  80c8f0:	dd000c17 	ldw	r20,48(sp)
  80c8f4:	dcc00b17 	ldw	r19,44(sp)
  80c8f8:	dc800a17 	ldw	r18,40(sp)
  80c8fc:	dc400917 	ldw	r17,36(sp)
  80c900:	dc000817 	ldw	r16,32(sp)
  80c904:	dec01204 	addi	sp,sp,72
  80c908:	f800283a 	ret
  80c90c:	2404b03a 	or	r2,r4,r16
  80c910:	202b883a 	mov	r21,r4
  80c914:	10004426 	beq	r2,zero,80ca28 <__muldf3+0x2ec>
  80c918:	80015126 	beq	r16,zero,80ce60 <__muldf3+0x724>
  80c91c:	8009883a 	mov	r4,r16
  80c920:	d9800715 	stw	r6,28(sp)
  80c924:	d9c00215 	stw	r7,8(sp)
  80c928:	da400415 	stw	r9,16(sp)
  80c92c:	080daa80 	call	80daa8 <__clzsi2>
  80c930:	d9800717 	ldw	r6,28(sp)
  80c934:	d9c00217 	ldw	r7,8(sp)
  80c938:	da400417 	ldw	r9,16(sp)
  80c93c:	113ffd44 	addi	r4,r2,-11
  80c940:	00c00704 	movi	r3,28
  80c944:	19014216 	blt	r3,r4,80ce50 <__muldf3+0x714>
  80c948:	00c00744 	movi	r3,29
  80c94c:	15bffe04 	addi	r22,r2,-8
  80c950:	1907c83a 	sub	r3,r3,r4
  80c954:	85a0983a 	sll	r16,r16,r22
  80c958:	a8c6d83a 	srl	r3,r21,r3
  80c95c:	adac983a 	sll	r22,r21,r22
  80c960:	1c20b03a 	or	r16,r3,r16
  80c964:	1080fcc4 	addi	r2,r2,1011
  80c968:	00a9c83a 	sub	r20,zero,r2
  80c96c:	002b883a 	mov	r21,zero
  80c970:	000b883a 	mov	r5,zero
  80c974:	003f9006 	br	80c7b8 <__alt_mem_epcs_flash_controller_0+0xff8037b8>
  80c978:	3446b03a 	or	r3,r6,r17
  80c97c:	1800281e 	bne	r3,zero,80ca20 <__muldf3+0x2e4>
  80c980:	0023883a 	mov	r17,zero
  80c984:	0025883a 	mov	r18,zero
  80c988:	01c00084 	movi	r7,2
  80c98c:	003f9c06 	br	80c800 <__alt_mem_epcs_flash_controller_0+0xff803800>
  80c990:	3446b03a 	or	r3,r6,r17
  80c994:	18001e26 	beq	r3,zero,80ca10 <__muldf3+0x2d4>
  80c998:	88012126 	beq	r17,zero,80ce20 <__muldf3+0x6e4>
  80c99c:	8809883a 	mov	r4,r17
  80c9a0:	d9400215 	stw	r5,8(sp)
  80c9a4:	d9800715 	stw	r6,28(sp)
  80c9a8:	da400415 	stw	r9,16(sp)
  80c9ac:	da800315 	stw	r10,12(sp)
  80c9b0:	080daa80 	call	80daa8 <__clzsi2>
  80c9b4:	d9400217 	ldw	r5,8(sp)
  80c9b8:	d9800717 	ldw	r6,28(sp)
  80c9bc:	da400417 	ldw	r9,16(sp)
  80c9c0:	da800317 	ldw	r10,12(sp)
  80c9c4:	113ffd44 	addi	r4,r2,-11
  80c9c8:	00c00704 	movi	r3,28
  80c9cc:	19011016 	blt	r3,r4,80ce10 <__muldf3+0x6d4>
  80c9d0:	00c00744 	movi	r3,29
  80c9d4:	14bffe04 	addi	r18,r2,-8
  80c9d8:	1907c83a 	sub	r3,r3,r4
  80c9dc:	8ca2983a 	sll	r17,r17,r18
  80c9e0:	30c6d83a 	srl	r3,r6,r3
  80c9e4:	34a4983a 	sll	r18,r6,r18
  80c9e8:	1c62b03a 	or	r17,r3,r17
  80c9ec:	1080fcc4 	addi	r2,r2,1011
  80c9f0:	0085c83a 	sub	r2,zero,r2
  80c9f4:	000f883a 	mov	r7,zero
  80c9f8:	003f8106 	br	80c800 <__alt_mem_epcs_flash_controller_0+0xff803800>
  80c9fc:	3027883a 	mov	r19,r6
  80ca00:	0081ffc4 	movi	r2,2047
  80ca04:	0021883a 	mov	r16,zero
  80ca08:	002d883a 	mov	r22,zero
  80ca0c:	003faa06 	br	80c8b8 <__alt_mem_epcs_flash_controller_0+0xff8038b8>
  80ca10:	0023883a 	mov	r17,zero
  80ca14:	0025883a 	mov	r18,zero
  80ca18:	01c00044 	movi	r7,1
  80ca1c:	003f7806 	br	80c800 <__alt_mem_epcs_flash_controller_0+0xff803800>
  80ca20:	01c000c4 	movi	r7,3
  80ca24:	003f7606 	br	80c800 <__alt_mem_epcs_flash_controller_0+0xff803800>
  80ca28:	05400104 	movi	r21,4
  80ca2c:	0021883a 	mov	r16,zero
  80ca30:	002d883a 	mov	r22,zero
  80ca34:	01400044 	movi	r5,1
  80ca38:	003f5f06 	br	80c7b8 <__alt_mem_epcs_flash_controller_0+0xff8037b8>
  80ca3c:	05400304 	movi	r21,12
  80ca40:	014000c4 	movi	r5,3
  80ca44:	003f5c06 	br	80c7b8 <__alt_mem_epcs_flash_controller_0+0xff8037b8>
  80ca48:	04000434 	movhi	r16,16
  80ca4c:	0027883a 	mov	r19,zero
  80ca50:	843fffc4 	addi	r16,r16,-1
  80ca54:	05bfffc4 	movi	r22,-1
  80ca58:	0081ffc4 	movi	r2,2047
  80ca5c:	003f9606 	br	80c8b8 <__alt_mem_epcs_flash_controller_0+0xff8038b8>
  80ca60:	8023883a 	mov	r17,r16
  80ca64:	b025883a 	mov	r18,r22
  80ca68:	280f883a 	mov	r7,r5
  80ca6c:	003f8806 	br	80c890 <__alt_mem_epcs_flash_controller_0+0xff803890>
  80ca70:	8023883a 	mov	r17,r16
  80ca74:	b025883a 	mov	r18,r22
  80ca78:	480d883a 	mov	r6,r9
  80ca7c:	280f883a 	mov	r7,r5
  80ca80:	003f8306 	br	80c890 <__alt_mem_epcs_flash_controller_0+0xff803890>
  80ca84:	b026d43a 	srli	r19,r22,16
  80ca88:	902ed43a 	srli	r23,r18,16
  80ca8c:	b5bfffcc 	andi	r22,r22,65535
  80ca90:	94bfffcc 	andi	r18,r18,65535
  80ca94:	b00b883a 	mov	r5,r22
  80ca98:	9009883a 	mov	r4,r18
  80ca9c:	d8c00515 	stw	r3,20(sp)
  80caa0:	d9800715 	stw	r6,28(sp)
  80caa4:	da000615 	stw	r8,24(sp)
  80caa8:	080b2400 	call	80b240 <__mulsi3>
  80caac:	980b883a 	mov	r5,r19
  80cab0:	9009883a 	mov	r4,r18
  80cab4:	1029883a 	mov	r20,r2
  80cab8:	080b2400 	call	80b240 <__mulsi3>
  80cabc:	b80b883a 	mov	r5,r23
  80cac0:	9809883a 	mov	r4,r19
  80cac4:	102b883a 	mov	r21,r2
  80cac8:	080b2400 	call	80b240 <__mulsi3>
  80cacc:	b809883a 	mov	r4,r23
  80cad0:	b00b883a 	mov	r5,r22
  80cad4:	1039883a 	mov	fp,r2
  80cad8:	080b2400 	call	80b240 <__mulsi3>
  80cadc:	a008d43a 	srli	r4,r20,16
  80cae0:	1545883a 	add	r2,r2,r21
  80cae4:	d8c00517 	ldw	r3,20(sp)
  80cae8:	2085883a 	add	r2,r4,r2
  80caec:	d9800717 	ldw	r6,28(sp)
  80caf0:	da000617 	ldw	r8,24(sp)
  80caf4:	1540022e 	bgeu	r2,r21,80cb00 <__muldf3+0x3c4>
  80caf8:	01000074 	movhi	r4,1
  80cafc:	e139883a 	add	fp,fp,r4
  80cb00:	100e943a 	slli	r7,r2,16
  80cb04:	1004d43a 	srli	r2,r2,16
  80cb08:	882ad43a 	srli	r21,r17,16
  80cb0c:	a53fffcc 	andi	r20,r20,65535
  80cb10:	8c7fffcc 	andi	r17,r17,65535
  80cb14:	3d29883a 	add	r20,r7,r20
  80cb18:	b00b883a 	mov	r5,r22
  80cb1c:	8809883a 	mov	r4,r17
  80cb20:	d8c00515 	stw	r3,20(sp)
  80cb24:	d9800715 	stw	r6,28(sp)
  80cb28:	da000615 	stw	r8,24(sp)
  80cb2c:	dd000115 	stw	r20,4(sp)
  80cb30:	d8800015 	stw	r2,0(sp)
  80cb34:	080b2400 	call	80b240 <__mulsi3>
  80cb38:	980b883a 	mov	r5,r19
  80cb3c:	8809883a 	mov	r4,r17
  80cb40:	d8800215 	stw	r2,8(sp)
  80cb44:	080b2400 	call	80b240 <__mulsi3>
  80cb48:	9809883a 	mov	r4,r19
  80cb4c:	a80b883a 	mov	r5,r21
  80cb50:	1029883a 	mov	r20,r2
  80cb54:	080b2400 	call	80b240 <__mulsi3>
  80cb58:	b00b883a 	mov	r5,r22
  80cb5c:	a809883a 	mov	r4,r21
  80cb60:	d8800415 	stw	r2,16(sp)
  80cb64:	080b2400 	call	80b240 <__mulsi3>
  80cb68:	d9c00217 	ldw	r7,8(sp)
  80cb6c:	1505883a 	add	r2,r2,r20
  80cb70:	d8c00517 	ldw	r3,20(sp)
  80cb74:	3826d43a 	srli	r19,r7,16
  80cb78:	d9800717 	ldw	r6,28(sp)
  80cb7c:	da000617 	ldw	r8,24(sp)
  80cb80:	9885883a 	add	r2,r19,r2
  80cb84:	da400417 	ldw	r9,16(sp)
  80cb88:	1500022e 	bgeu	r2,r20,80cb94 <__muldf3+0x458>
  80cb8c:	01000074 	movhi	r4,1
  80cb90:	4913883a 	add	r9,r9,r4
  80cb94:	1028d43a 	srli	r20,r2,16
  80cb98:	1004943a 	slli	r2,r2,16
  80cb9c:	802cd43a 	srli	r22,r16,16
  80cba0:	843fffcc 	andi	r16,r16,65535
  80cba4:	3cffffcc 	andi	r19,r7,65535
  80cba8:	9009883a 	mov	r4,r18
  80cbac:	800b883a 	mov	r5,r16
  80cbb0:	a269883a 	add	r20,r20,r9
  80cbb4:	d8c00515 	stw	r3,20(sp)
  80cbb8:	d9800715 	stw	r6,28(sp)
  80cbbc:	da000615 	stw	r8,24(sp)
  80cbc0:	14e7883a 	add	r19,r2,r19
  80cbc4:	080b2400 	call	80b240 <__mulsi3>
  80cbc8:	9009883a 	mov	r4,r18
  80cbcc:	b00b883a 	mov	r5,r22
  80cbd0:	d8800315 	stw	r2,12(sp)
  80cbd4:	080b2400 	call	80b240 <__mulsi3>
  80cbd8:	b809883a 	mov	r4,r23
  80cbdc:	b00b883a 	mov	r5,r22
  80cbe0:	d8800215 	stw	r2,8(sp)
  80cbe4:	080b2400 	call	80b240 <__mulsi3>
  80cbe8:	b80b883a 	mov	r5,r23
  80cbec:	8009883a 	mov	r4,r16
  80cbf0:	d8800415 	stw	r2,16(sp)
  80cbf4:	080b2400 	call	80b240 <__mulsi3>
  80cbf8:	da800317 	ldw	r10,12(sp)
  80cbfc:	d9c00217 	ldw	r7,8(sp)
  80cc00:	d9000017 	ldw	r4,0(sp)
  80cc04:	502ed43a 	srli	r23,r10,16
  80cc08:	11c5883a 	add	r2,r2,r7
  80cc0c:	24e5883a 	add	r18,r4,r19
  80cc10:	b885883a 	add	r2,r23,r2
  80cc14:	d8c00517 	ldw	r3,20(sp)
  80cc18:	d9800717 	ldw	r6,28(sp)
  80cc1c:	da000617 	ldw	r8,24(sp)
  80cc20:	da400417 	ldw	r9,16(sp)
  80cc24:	11c0022e 	bgeu	r2,r7,80cc30 <__muldf3+0x4f4>
  80cc28:	01000074 	movhi	r4,1
  80cc2c:	4913883a 	add	r9,r9,r4
  80cc30:	100ed43a 	srli	r7,r2,16
  80cc34:	1004943a 	slli	r2,r2,16
  80cc38:	55ffffcc 	andi	r23,r10,65535
  80cc3c:	3a53883a 	add	r9,r7,r9
  80cc40:	8809883a 	mov	r4,r17
  80cc44:	800b883a 	mov	r5,r16
  80cc48:	d8c00515 	stw	r3,20(sp)
  80cc4c:	d9800715 	stw	r6,28(sp)
  80cc50:	da000615 	stw	r8,24(sp)
  80cc54:	da400415 	stw	r9,16(sp)
  80cc58:	15ef883a 	add	r23,r2,r23
  80cc5c:	080b2400 	call	80b240 <__mulsi3>
  80cc60:	8809883a 	mov	r4,r17
  80cc64:	b00b883a 	mov	r5,r22
  80cc68:	d8800215 	stw	r2,8(sp)
  80cc6c:	080b2400 	call	80b240 <__mulsi3>
  80cc70:	b00b883a 	mov	r5,r22
  80cc74:	a809883a 	mov	r4,r21
  80cc78:	d8800315 	stw	r2,12(sp)
  80cc7c:	080b2400 	call	80b240 <__mulsi3>
  80cc80:	8009883a 	mov	r4,r16
  80cc84:	a80b883a 	mov	r5,r21
  80cc88:	1023883a 	mov	r17,r2
  80cc8c:	080b2400 	call	80b240 <__mulsi3>
  80cc90:	d9c00217 	ldw	r7,8(sp)
  80cc94:	da800317 	ldw	r10,12(sp)
  80cc98:	d8c00517 	ldw	r3,20(sp)
  80cc9c:	3808d43a 	srli	r4,r7,16
  80cca0:	1285883a 	add	r2,r2,r10
  80cca4:	d9800717 	ldw	r6,28(sp)
  80cca8:	2085883a 	add	r2,r4,r2
  80ccac:	da000617 	ldw	r8,24(sp)
  80ccb0:	da400417 	ldw	r9,16(sp)
  80ccb4:	1280022e 	bgeu	r2,r10,80ccc0 <__muldf3+0x584>
  80ccb8:	01000074 	movhi	r4,1
  80ccbc:	8923883a 	add	r17,r17,r4
  80ccc0:	1008943a 	slli	r4,r2,16
  80ccc4:	39ffffcc 	andi	r7,r7,65535
  80ccc8:	e4b9883a 	add	fp,fp,r18
  80cccc:	21cf883a 	add	r7,r4,r7
  80ccd0:	e4e7803a 	cmpltu	r19,fp,r19
  80ccd4:	3d0f883a 	add	r7,r7,r20
  80ccd8:	bf39883a 	add	fp,r23,fp
  80ccdc:	99c9883a 	add	r4,r19,r7
  80cce0:	e5ef803a 	cmpltu	r23,fp,r23
  80cce4:	490b883a 	add	r5,r9,r4
  80cce8:	1004d43a 	srli	r2,r2,16
  80ccec:	b965883a 	add	r18,r23,r5
  80ccf0:	24c9803a 	cmpltu	r4,r4,r19
  80ccf4:	3d29803a 	cmpltu	r20,r7,r20
  80ccf8:	a128b03a 	or	r20,r20,r4
  80ccfc:	95ef803a 	cmpltu	r23,r18,r23
  80cd00:	2a53803a 	cmpltu	r9,r5,r9
  80cd04:	a0a9883a 	add	r20,r20,r2
  80cd08:	4deeb03a 	or	r23,r9,r23
  80cd0c:	a5ef883a 	add	r23,r20,r23
  80cd10:	bc63883a 	add	r17,r23,r17
  80cd14:	e004927a 	slli	r2,fp,9
  80cd18:	d9000117 	ldw	r4,4(sp)
  80cd1c:	882e927a 	slli	r23,r17,9
  80cd20:	9022d5fa 	srli	r17,r18,23
  80cd24:	e038d5fa 	srli	fp,fp,23
  80cd28:	1104b03a 	or	r2,r2,r4
  80cd2c:	9024927a 	slli	r18,r18,9
  80cd30:	1004c03a 	cmpne	r2,r2,zero
  80cd34:	bc62b03a 	or	r17,r23,r17
  80cd38:	1738b03a 	or	fp,r2,fp
  80cd3c:	8880402c 	andhi	r2,r17,256
  80cd40:	e4a4b03a 	or	r18,fp,r18
  80cd44:	10000726 	beq	r2,zero,80cd64 <__muldf3+0x628>
  80cd48:	9006d07a 	srli	r3,r18,1
  80cd4c:	880497fa 	slli	r2,r17,31
  80cd50:	9480004c 	andi	r18,r18,1
  80cd54:	8822d07a 	srli	r17,r17,1
  80cd58:	1ca4b03a 	or	r18,r3,r18
  80cd5c:	14a4b03a 	or	r18,r2,r18
  80cd60:	4007883a 	mov	r3,r8
  80cd64:	1880ffc4 	addi	r2,r3,1023
  80cd68:	0080460e 	bge	zero,r2,80ce84 <__muldf3+0x748>
  80cd6c:	910001cc 	andi	r4,r18,7
  80cd70:	20000726 	beq	r4,zero,80cd90 <__muldf3+0x654>
  80cd74:	910003cc 	andi	r4,r18,15
  80cd78:	01400104 	movi	r5,4
  80cd7c:	21400426 	beq	r4,r5,80cd90 <__muldf3+0x654>
  80cd80:	9149883a 	add	r4,r18,r5
  80cd84:	24a5803a 	cmpltu	r18,r4,r18
  80cd88:	8ca3883a 	add	r17,r17,r18
  80cd8c:	2025883a 	mov	r18,r4
  80cd90:	8900402c 	andhi	r4,r17,256
  80cd94:	20000426 	beq	r4,zero,80cda8 <__muldf3+0x66c>
  80cd98:	18810004 	addi	r2,r3,1024
  80cd9c:	00ffc034 	movhi	r3,65280
  80cda0:	18ffffc4 	addi	r3,r3,-1
  80cda4:	88e2703a 	and	r17,r17,r3
  80cda8:	00c1ff84 	movi	r3,2046
  80cdac:	18bf1316 	blt	r3,r2,80c9fc <__alt_mem_epcs_flash_controller_0+0xff8039fc>
  80cdb0:	882c977a 	slli	r22,r17,29
  80cdb4:	9024d0fa 	srli	r18,r18,3
  80cdb8:	8822927a 	slli	r17,r17,9
  80cdbc:	1081ffcc 	andi	r2,r2,2047
  80cdc0:	b4acb03a 	or	r22,r22,r18
  80cdc4:	8820d33a 	srli	r16,r17,12
  80cdc8:	3027883a 	mov	r19,r6
  80cdcc:	003eba06 	br	80c8b8 <__alt_mem_epcs_flash_controller_0+0xff8038b8>
  80cdd0:	8080022c 	andhi	r2,r16,8
  80cdd4:	10000926 	beq	r2,zero,80cdfc <__muldf3+0x6c0>
  80cdd8:	8880022c 	andhi	r2,r17,8
  80cddc:	1000071e 	bne	r2,zero,80cdfc <__muldf3+0x6c0>
  80cde0:	00800434 	movhi	r2,16
  80cde4:	8c000234 	orhi	r16,r17,8
  80cde8:	10bfffc4 	addi	r2,r2,-1
  80cdec:	e027883a 	mov	r19,fp
  80cdf0:	80a0703a 	and	r16,r16,r2
  80cdf4:	902d883a 	mov	r22,r18
  80cdf8:	003f1706 	br	80ca58 <__alt_mem_epcs_flash_controller_0+0xff803a58>
  80cdfc:	00800434 	movhi	r2,16
  80ce00:	84000234 	orhi	r16,r16,8
  80ce04:	10bfffc4 	addi	r2,r2,-1
  80ce08:	80a0703a 	and	r16,r16,r2
  80ce0c:	003f1206 	br	80ca58 <__alt_mem_epcs_flash_controller_0+0xff803a58>
  80ce10:	147ff604 	addi	r17,r2,-40
  80ce14:	3462983a 	sll	r17,r6,r17
  80ce18:	0025883a 	mov	r18,zero
  80ce1c:	003ef306 	br	80c9ec <__alt_mem_epcs_flash_controller_0+0xff8039ec>
  80ce20:	3009883a 	mov	r4,r6
  80ce24:	d9400215 	stw	r5,8(sp)
  80ce28:	d9800715 	stw	r6,28(sp)
  80ce2c:	da400415 	stw	r9,16(sp)
  80ce30:	da800315 	stw	r10,12(sp)
  80ce34:	080daa80 	call	80daa8 <__clzsi2>
  80ce38:	10800804 	addi	r2,r2,32
  80ce3c:	da800317 	ldw	r10,12(sp)
  80ce40:	da400417 	ldw	r9,16(sp)
  80ce44:	d9800717 	ldw	r6,28(sp)
  80ce48:	d9400217 	ldw	r5,8(sp)
  80ce4c:	003edd06 	br	80c9c4 <__alt_mem_epcs_flash_controller_0+0xff8039c4>
  80ce50:	143ff604 	addi	r16,r2,-40
  80ce54:	ac20983a 	sll	r16,r21,r16
  80ce58:	002d883a 	mov	r22,zero
  80ce5c:	003ec106 	br	80c964 <__alt_mem_epcs_flash_controller_0+0xff803964>
  80ce60:	d9800715 	stw	r6,28(sp)
  80ce64:	d9c00215 	stw	r7,8(sp)
  80ce68:	da400415 	stw	r9,16(sp)
  80ce6c:	080daa80 	call	80daa8 <__clzsi2>
  80ce70:	10800804 	addi	r2,r2,32
  80ce74:	da400417 	ldw	r9,16(sp)
  80ce78:	d9c00217 	ldw	r7,8(sp)
  80ce7c:	d9800717 	ldw	r6,28(sp)
  80ce80:	003eae06 	br	80c93c <__alt_mem_epcs_flash_controller_0+0xff80393c>
  80ce84:	00c00044 	movi	r3,1
  80ce88:	1887c83a 	sub	r3,r3,r2
  80ce8c:	01000e04 	movi	r4,56
  80ce90:	20fe8516 	blt	r4,r3,80c8a8 <__alt_mem_epcs_flash_controller_0+0xff8038a8>
  80ce94:	010007c4 	movi	r4,31
  80ce98:	20c01b16 	blt	r4,r3,80cf08 <__muldf3+0x7cc>
  80ce9c:	00800804 	movi	r2,32
  80cea0:	10c5c83a 	sub	r2,r2,r3
  80cea4:	888a983a 	sll	r5,r17,r2
  80cea8:	90c8d83a 	srl	r4,r18,r3
  80ceac:	9084983a 	sll	r2,r18,r2
  80ceb0:	88e2d83a 	srl	r17,r17,r3
  80ceb4:	2906b03a 	or	r3,r5,r4
  80ceb8:	1004c03a 	cmpne	r2,r2,zero
  80cebc:	1886b03a 	or	r3,r3,r2
  80cec0:	188001cc 	andi	r2,r3,7
  80cec4:	10000726 	beq	r2,zero,80cee4 <__muldf3+0x7a8>
  80cec8:	188003cc 	andi	r2,r3,15
  80cecc:	01000104 	movi	r4,4
  80ced0:	11000426 	beq	r2,r4,80cee4 <__muldf3+0x7a8>
  80ced4:	1805883a 	mov	r2,r3
  80ced8:	10c00104 	addi	r3,r2,4
  80cedc:	1885803a 	cmpltu	r2,r3,r2
  80cee0:	88a3883a 	add	r17,r17,r2
  80cee4:	8880202c 	andhi	r2,r17,128
  80cee8:	10001c26 	beq	r2,zero,80cf5c <__muldf3+0x820>
  80ceec:	3027883a 	mov	r19,r6
  80cef0:	00800044 	movi	r2,1
  80cef4:	0021883a 	mov	r16,zero
  80cef8:	002d883a 	mov	r22,zero
  80cefc:	003e6e06 	br	80c8b8 <__alt_mem_epcs_flash_controller_0+0xff8038b8>
  80cf00:	4007883a 	mov	r3,r8
  80cf04:	003f9706 	br	80cd64 <__alt_mem_epcs_flash_controller_0+0xff803d64>
  80cf08:	017ff844 	movi	r5,-31
  80cf0c:	2885c83a 	sub	r2,r5,r2
  80cf10:	888ad83a 	srl	r5,r17,r2
  80cf14:	00800804 	movi	r2,32
  80cf18:	18801a26 	beq	r3,r2,80cf84 <__muldf3+0x848>
  80cf1c:	01001004 	movi	r4,64
  80cf20:	20c7c83a 	sub	r3,r4,r3
  80cf24:	88e2983a 	sll	r17,r17,r3
  80cf28:	8ca4b03a 	or	r18,r17,r18
  80cf2c:	9004c03a 	cmpne	r2,r18,zero
  80cf30:	2884b03a 	or	r2,r5,r2
  80cf34:	144001cc 	andi	r17,r2,7
  80cf38:	88000d1e 	bne	r17,zero,80cf70 <__muldf3+0x834>
  80cf3c:	0021883a 	mov	r16,zero
  80cf40:	102cd0fa 	srli	r22,r2,3
  80cf44:	3027883a 	mov	r19,r6
  80cf48:	0005883a 	mov	r2,zero
  80cf4c:	b46cb03a 	or	r22,r22,r17
  80cf50:	003e5906 	br	80c8b8 <__alt_mem_epcs_flash_controller_0+0xff8038b8>
  80cf54:	1007883a 	mov	r3,r2
  80cf58:	0023883a 	mov	r17,zero
  80cf5c:	8820927a 	slli	r16,r17,9
  80cf60:	1805883a 	mov	r2,r3
  80cf64:	8822977a 	slli	r17,r17,29
  80cf68:	8020d33a 	srli	r16,r16,12
  80cf6c:	003ff406 	br	80cf40 <__alt_mem_epcs_flash_controller_0+0xff803f40>
  80cf70:	10c003cc 	andi	r3,r2,15
  80cf74:	01000104 	movi	r4,4
  80cf78:	193ff626 	beq	r3,r4,80cf54 <__alt_mem_epcs_flash_controller_0+0xff803f54>
  80cf7c:	0023883a 	mov	r17,zero
  80cf80:	003fd506 	br	80ced8 <__alt_mem_epcs_flash_controller_0+0xff803ed8>
  80cf84:	0023883a 	mov	r17,zero
  80cf88:	003fe706 	br	80cf28 <__alt_mem_epcs_flash_controller_0+0xff803f28>
  80cf8c:	00800434 	movhi	r2,16
  80cf90:	8c000234 	orhi	r16,r17,8
  80cf94:	10bfffc4 	addi	r2,r2,-1
  80cf98:	3027883a 	mov	r19,r6
  80cf9c:	80a0703a 	and	r16,r16,r2
  80cfa0:	902d883a 	mov	r22,r18
  80cfa4:	003eac06 	br	80ca58 <__alt_mem_epcs_flash_controller_0+0xff803a58>

0080cfa8 <__subdf3>:
  80cfa8:	02000434 	movhi	r8,16
  80cfac:	423fffc4 	addi	r8,r8,-1
  80cfb0:	defffb04 	addi	sp,sp,-20
  80cfb4:	2a14703a 	and	r10,r5,r8
  80cfb8:	3812d53a 	srli	r9,r7,20
  80cfbc:	3a10703a 	and	r8,r7,r8
  80cfc0:	2006d77a 	srli	r3,r4,29
  80cfc4:	3004d77a 	srli	r2,r6,29
  80cfc8:	dc000015 	stw	r16,0(sp)
  80cfcc:	501490fa 	slli	r10,r10,3
  80cfd0:	2820d53a 	srli	r16,r5,20
  80cfd4:	401090fa 	slli	r8,r8,3
  80cfd8:	dc800215 	stw	r18,8(sp)
  80cfdc:	dc400115 	stw	r17,4(sp)
  80cfe0:	dfc00415 	stw	ra,16(sp)
  80cfe4:	202290fa 	slli	r17,r4,3
  80cfe8:	dcc00315 	stw	r19,12(sp)
  80cfec:	4a41ffcc 	andi	r9,r9,2047
  80cff0:	0101ffc4 	movi	r4,2047
  80cff4:	2824d7fa 	srli	r18,r5,31
  80cff8:	8401ffcc 	andi	r16,r16,2047
  80cffc:	50c6b03a 	or	r3,r10,r3
  80d000:	380ed7fa 	srli	r7,r7,31
  80d004:	408ab03a 	or	r5,r8,r2
  80d008:	300c90fa 	slli	r6,r6,3
  80d00c:	49009626 	beq	r9,r4,80d268 <__subdf3+0x2c0>
  80d010:	39c0005c 	xori	r7,r7,1
  80d014:	8245c83a 	sub	r2,r16,r9
  80d018:	3c807426 	beq	r7,r18,80d1ec <__subdf3+0x244>
  80d01c:	0080af0e 	bge	zero,r2,80d2dc <__subdf3+0x334>
  80d020:	48002a1e 	bne	r9,zero,80d0cc <__subdf3+0x124>
  80d024:	2988b03a 	or	r4,r5,r6
  80d028:	20009a1e 	bne	r4,zero,80d294 <__subdf3+0x2ec>
  80d02c:	888001cc 	andi	r2,r17,7
  80d030:	10000726 	beq	r2,zero,80d050 <__subdf3+0xa8>
  80d034:	888003cc 	andi	r2,r17,15
  80d038:	01000104 	movi	r4,4
  80d03c:	11000426 	beq	r2,r4,80d050 <__subdf3+0xa8>
  80d040:	890b883a 	add	r5,r17,r4
  80d044:	2c63803a 	cmpltu	r17,r5,r17
  80d048:	1c47883a 	add	r3,r3,r17
  80d04c:	2823883a 	mov	r17,r5
  80d050:	1880202c 	andhi	r2,r3,128
  80d054:	10005926 	beq	r2,zero,80d1bc <__subdf3+0x214>
  80d058:	84000044 	addi	r16,r16,1
  80d05c:	0081ffc4 	movi	r2,2047
  80d060:	8080be26 	beq	r16,r2,80d35c <__subdf3+0x3b4>
  80d064:	017fe034 	movhi	r5,65408
  80d068:	297fffc4 	addi	r5,r5,-1
  80d06c:	1946703a 	and	r3,r3,r5
  80d070:	1804977a 	slli	r2,r3,29
  80d074:	1806927a 	slli	r3,r3,9
  80d078:	8822d0fa 	srli	r17,r17,3
  80d07c:	8401ffcc 	andi	r16,r16,2047
  80d080:	180ad33a 	srli	r5,r3,12
  80d084:	9100004c 	andi	r4,r18,1
  80d088:	1444b03a 	or	r2,r2,r17
  80d08c:	80c1ffcc 	andi	r3,r16,2047
  80d090:	1820953a 	slli	r16,r3,20
  80d094:	20c03fcc 	andi	r3,r4,255
  80d098:	180897fa 	slli	r4,r3,31
  80d09c:	00c00434 	movhi	r3,16
  80d0a0:	18ffffc4 	addi	r3,r3,-1
  80d0a4:	28c6703a 	and	r3,r5,r3
  80d0a8:	1c06b03a 	or	r3,r3,r16
  80d0ac:	1906b03a 	or	r3,r3,r4
  80d0b0:	dfc00417 	ldw	ra,16(sp)
  80d0b4:	dcc00317 	ldw	r19,12(sp)
  80d0b8:	dc800217 	ldw	r18,8(sp)
  80d0bc:	dc400117 	ldw	r17,4(sp)
  80d0c0:	dc000017 	ldw	r16,0(sp)
  80d0c4:	dec00504 	addi	sp,sp,20
  80d0c8:	f800283a 	ret
  80d0cc:	0101ffc4 	movi	r4,2047
  80d0d0:	813fd626 	beq	r16,r4,80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d0d4:	29402034 	orhi	r5,r5,128
  80d0d8:	01000e04 	movi	r4,56
  80d0dc:	2080a316 	blt	r4,r2,80d36c <__subdf3+0x3c4>
  80d0e0:	010007c4 	movi	r4,31
  80d0e4:	2080c616 	blt	r4,r2,80d400 <__subdf3+0x458>
  80d0e8:	01000804 	movi	r4,32
  80d0ec:	2089c83a 	sub	r4,r4,r2
  80d0f0:	2910983a 	sll	r8,r5,r4
  80d0f4:	308ed83a 	srl	r7,r6,r2
  80d0f8:	3108983a 	sll	r4,r6,r4
  80d0fc:	2884d83a 	srl	r2,r5,r2
  80d100:	41ccb03a 	or	r6,r8,r7
  80d104:	2008c03a 	cmpne	r4,r4,zero
  80d108:	310cb03a 	or	r6,r6,r4
  80d10c:	898dc83a 	sub	r6,r17,r6
  80d110:	89a3803a 	cmpltu	r17,r17,r6
  80d114:	1887c83a 	sub	r3,r3,r2
  80d118:	1c47c83a 	sub	r3,r3,r17
  80d11c:	3023883a 	mov	r17,r6
  80d120:	1880202c 	andhi	r2,r3,128
  80d124:	10002326 	beq	r2,zero,80d1b4 <__subdf3+0x20c>
  80d128:	04c02034 	movhi	r19,128
  80d12c:	9cffffc4 	addi	r19,r19,-1
  80d130:	1ce6703a 	and	r19,r3,r19
  80d134:	98007a26 	beq	r19,zero,80d320 <__subdf3+0x378>
  80d138:	9809883a 	mov	r4,r19
  80d13c:	080daa80 	call	80daa8 <__clzsi2>
  80d140:	113ffe04 	addi	r4,r2,-8
  80d144:	00c007c4 	movi	r3,31
  80d148:	19007b16 	blt	r3,r4,80d338 <__subdf3+0x390>
  80d14c:	00800804 	movi	r2,32
  80d150:	1105c83a 	sub	r2,r2,r4
  80d154:	8884d83a 	srl	r2,r17,r2
  80d158:	9906983a 	sll	r3,r19,r4
  80d15c:	8922983a 	sll	r17,r17,r4
  80d160:	10c4b03a 	or	r2,r2,r3
  80d164:	24007816 	blt	r4,r16,80d348 <__subdf3+0x3a0>
  80d168:	2421c83a 	sub	r16,r4,r16
  80d16c:	80c00044 	addi	r3,r16,1
  80d170:	010007c4 	movi	r4,31
  80d174:	20c09516 	blt	r4,r3,80d3cc <__subdf3+0x424>
  80d178:	01400804 	movi	r5,32
  80d17c:	28cbc83a 	sub	r5,r5,r3
  80d180:	88c8d83a 	srl	r4,r17,r3
  80d184:	8962983a 	sll	r17,r17,r5
  80d188:	114a983a 	sll	r5,r2,r5
  80d18c:	10c6d83a 	srl	r3,r2,r3
  80d190:	8804c03a 	cmpne	r2,r17,zero
  80d194:	290ab03a 	or	r5,r5,r4
  80d198:	28a2b03a 	or	r17,r5,r2
  80d19c:	0021883a 	mov	r16,zero
  80d1a0:	003fa206 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d1a4:	2090b03a 	or	r8,r4,r2
  80d1a8:	40018e26 	beq	r8,zero,80d7e4 <__subdf3+0x83c>
  80d1ac:	1007883a 	mov	r3,r2
  80d1b0:	2023883a 	mov	r17,r4
  80d1b4:	888001cc 	andi	r2,r17,7
  80d1b8:	103f9e1e 	bne	r2,zero,80d034 <__alt_mem_epcs_flash_controller_0+0xff804034>
  80d1bc:	1804977a 	slli	r2,r3,29
  80d1c0:	8822d0fa 	srli	r17,r17,3
  80d1c4:	1810d0fa 	srli	r8,r3,3
  80d1c8:	9100004c 	andi	r4,r18,1
  80d1cc:	1444b03a 	or	r2,r2,r17
  80d1d0:	00c1ffc4 	movi	r3,2047
  80d1d4:	80c02826 	beq	r16,r3,80d278 <__subdf3+0x2d0>
  80d1d8:	01400434 	movhi	r5,16
  80d1dc:	297fffc4 	addi	r5,r5,-1
  80d1e0:	80e0703a 	and	r16,r16,r3
  80d1e4:	414a703a 	and	r5,r8,r5
  80d1e8:	003fa806 	br	80d08c <__alt_mem_epcs_flash_controller_0+0xff80408c>
  80d1ec:	0080630e 	bge	zero,r2,80d37c <__subdf3+0x3d4>
  80d1f0:	48003026 	beq	r9,zero,80d2b4 <__subdf3+0x30c>
  80d1f4:	0101ffc4 	movi	r4,2047
  80d1f8:	813f8c26 	beq	r16,r4,80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d1fc:	29402034 	orhi	r5,r5,128
  80d200:	01000e04 	movi	r4,56
  80d204:	2080a90e 	bge	r4,r2,80d4ac <__subdf3+0x504>
  80d208:	298cb03a 	or	r6,r5,r6
  80d20c:	3012c03a 	cmpne	r9,r6,zero
  80d210:	0005883a 	mov	r2,zero
  80d214:	4c53883a 	add	r9,r9,r17
  80d218:	4c63803a 	cmpltu	r17,r9,r17
  80d21c:	10c7883a 	add	r3,r2,r3
  80d220:	88c7883a 	add	r3,r17,r3
  80d224:	4823883a 	mov	r17,r9
  80d228:	1880202c 	andhi	r2,r3,128
  80d22c:	1000d026 	beq	r2,zero,80d570 <__subdf3+0x5c8>
  80d230:	84000044 	addi	r16,r16,1
  80d234:	0081ffc4 	movi	r2,2047
  80d238:	8080fe26 	beq	r16,r2,80d634 <__subdf3+0x68c>
  80d23c:	00bfe034 	movhi	r2,65408
  80d240:	10bfffc4 	addi	r2,r2,-1
  80d244:	1886703a 	and	r3,r3,r2
  80d248:	880ad07a 	srli	r5,r17,1
  80d24c:	180497fa 	slli	r2,r3,31
  80d250:	8900004c 	andi	r4,r17,1
  80d254:	2922b03a 	or	r17,r5,r4
  80d258:	1806d07a 	srli	r3,r3,1
  80d25c:	1462b03a 	or	r17,r2,r17
  80d260:	3825883a 	mov	r18,r7
  80d264:	003f7106 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d268:	2984b03a 	or	r2,r5,r6
  80d26c:	103f6826 	beq	r2,zero,80d010 <__alt_mem_epcs_flash_controller_0+0xff804010>
  80d270:	39c03fcc 	andi	r7,r7,255
  80d274:	003f6706 	br	80d014 <__alt_mem_epcs_flash_controller_0+0xff804014>
  80d278:	4086b03a 	or	r3,r8,r2
  80d27c:	18015226 	beq	r3,zero,80d7c8 <__subdf3+0x820>
  80d280:	00c00434 	movhi	r3,16
  80d284:	41400234 	orhi	r5,r8,8
  80d288:	18ffffc4 	addi	r3,r3,-1
  80d28c:	28ca703a 	and	r5,r5,r3
  80d290:	003f7e06 	br	80d08c <__alt_mem_epcs_flash_controller_0+0xff80408c>
  80d294:	10bfffc4 	addi	r2,r2,-1
  80d298:	1000491e 	bne	r2,zero,80d3c0 <__subdf3+0x418>
  80d29c:	898fc83a 	sub	r7,r17,r6
  80d2a0:	89e3803a 	cmpltu	r17,r17,r7
  80d2a4:	1947c83a 	sub	r3,r3,r5
  80d2a8:	1c47c83a 	sub	r3,r3,r17
  80d2ac:	3823883a 	mov	r17,r7
  80d2b0:	003f9b06 	br	80d120 <__alt_mem_epcs_flash_controller_0+0xff804120>
  80d2b4:	2988b03a 	or	r4,r5,r6
  80d2b8:	203f5c26 	beq	r4,zero,80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d2bc:	10bfffc4 	addi	r2,r2,-1
  80d2c0:	1000931e 	bne	r2,zero,80d510 <__subdf3+0x568>
  80d2c4:	898d883a 	add	r6,r17,r6
  80d2c8:	3463803a 	cmpltu	r17,r6,r17
  80d2cc:	1947883a 	add	r3,r3,r5
  80d2d0:	88c7883a 	add	r3,r17,r3
  80d2d4:	3023883a 	mov	r17,r6
  80d2d8:	003fd306 	br	80d228 <__alt_mem_epcs_flash_controller_0+0xff804228>
  80d2dc:	1000541e 	bne	r2,zero,80d430 <__subdf3+0x488>
  80d2e0:	80800044 	addi	r2,r16,1
  80d2e4:	1081ffcc 	andi	r2,r2,2047
  80d2e8:	01000044 	movi	r4,1
  80d2ec:	2080a20e 	bge	r4,r2,80d578 <__subdf3+0x5d0>
  80d2f0:	8989c83a 	sub	r4,r17,r6
  80d2f4:	8905803a 	cmpltu	r2,r17,r4
  80d2f8:	1967c83a 	sub	r19,r3,r5
  80d2fc:	98a7c83a 	sub	r19,r19,r2
  80d300:	9880202c 	andhi	r2,r19,128
  80d304:	10006326 	beq	r2,zero,80d494 <__subdf3+0x4ec>
  80d308:	3463c83a 	sub	r17,r6,r17
  80d30c:	28c7c83a 	sub	r3,r5,r3
  80d310:	344d803a 	cmpltu	r6,r6,r17
  80d314:	19a7c83a 	sub	r19,r3,r6
  80d318:	3825883a 	mov	r18,r7
  80d31c:	983f861e 	bne	r19,zero,80d138 <__alt_mem_epcs_flash_controller_0+0xff804138>
  80d320:	8809883a 	mov	r4,r17
  80d324:	080daa80 	call	80daa8 <__clzsi2>
  80d328:	10800804 	addi	r2,r2,32
  80d32c:	113ffe04 	addi	r4,r2,-8
  80d330:	00c007c4 	movi	r3,31
  80d334:	193f850e 	bge	r3,r4,80d14c <__alt_mem_epcs_flash_controller_0+0xff80414c>
  80d338:	10bff604 	addi	r2,r2,-40
  80d33c:	8884983a 	sll	r2,r17,r2
  80d340:	0023883a 	mov	r17,zero
  80d344:	243f880e 	bge	r4,r16,80d168 <__alt_mem_epcs_flash_controller_0+0xff804168>
  80d348:	00ffe034 	movhi	r3,65408
  80d34c:	18ffffc4 	addi	r3,r3,-1
  80d350:	8121c83a 	sub	r16,r16,r4
  80d354:	10c6703a 	and	r3,r2,r3
  80d358:	003f3406 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d35c:	9100004c 	andi	r4,r18,1
  80d360:	000b883a 	mov	r5,zero
  80d364:	0005883a 	mov	r2,zero
  80d368:	003f4806 	br	80d08c <__alt_mem_epcs_flash_controller_0+0xff80408c>
  80d36c:	298cb03a 	or	r6,r5,r6
  80d370:	300cc03a 	cmpne	r6,r6,zero
  80d374:	0005883a 	mov	r2,zero
  80d378:	003f6406 	br	80d10c <__alt_mem_epcs_flash_controller_0+0xff80410c>
  80d37c:	10009a1e 	bne	r2,zero,80d5e8 <__subdf3+0x640>
  80d380:	82400044 	addi	r9,r16,1
  80d384:	4881ffcc 	andi	r2,r9,2047
  80d388:	02800044 	movi	r10,1
  80d38c:	5080670e 	bge	r10,r2,80d52c <__subdf3+0x584>
  80d390:	0081ffc4 	movi	r2,2047
  80d394:	4880af26 	beq	r9,r2,80d654 <__subdf3+0x6ac>
  80d398:	898d883a 	add	r6,r17,r6
  80d39c:	1945883a 	add	r2,r3,r5
  80d3a0:	3447803a 	cmpltu	r3,r6,r17
  80d3a4:	1887883a 	add	r3,r3,r2
  80d3a8:	182297fa 	slli	r17,r3,31
  80d3ac:	300cd07a 	srli	r6,r6,1
  80d3b0:	1806d07a 	srli	r3,r3,1
  80d3b4:	4821883a 	mov	r16,r9
  80d3b8:	89a2b03a 	or	r17,r17,r6
  80d3bc:	003f1b06 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d3c0:	0101ffc4 	movi	r4,2047
  80d3c4:	813f441e 	bne	r16,r4,80d0d8 <__alt_mem_epcs_flash_controller_0+0xff8040d8>
  80d3c8:	003f1806 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d3cc:	843ff844 	addi	r16,r16,-31
  80d3d0:	01400804 	movi	r5,32
  80d3d4:	1408d83a 	srl	r4,r2,r16
  80d3d8:	19405026 	beq	r3,r5,80d51c <__subdf3+0x574>
  80d3dc:	01401004 	movi	r5,64
  80d3e0:	28c7c83a 	sub	r3,r5,r3
  80d3e4:	10c4983a 	sll	r2,r2,r3
  80d3e8:	88a2b03a 	or	r17,r17,r2
  80d3ec:	8822c03a 	cmpne	r17,r17,zero
  80d3f0:	2462b03a 	or	r17,r4,r17
  80d3f4:	0007883a 	mov	r3,zero
  80d3f8:	0021883a 	mov	r16,zero
  80d3fc:	003f6d06 	br	80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>
  80d400:	11fff804 	addi	r7,r2,-32
  80d404:	01000804 	movi	r4,32
  80d408:	29ced83a 	srl	r7,r5,r7
  80d40c:	11004526 	beq	r2,r4,80d524 <__subdf3+0x57c>
  80d410:	01001004 	movi	r4,64
  80d414:	2089c83a 	sub	r4,r4,r2
  80d418:	2904983a 	sll	r2,r5,r4
  80d41c:	118cb03a 	or	r6,r2,r6
  80d420:	300cc03a 	cmpne	r6,r6,zero
  80d424:	398cb03a 	or	r6,r7,r6
  80d428:	0005883a 	mov	r2,zero
  80d42c:	003f3706 	br	80d10c <__alt_mem_epcs_flash_controller_0+0xff80410c>
  80d430:	80002a26 	beq	r16,zero,80d4dc <__subdf3+0x534>
  80d434:	0101ffc4 	movi	r4,2047
  80d438:	49006626 	beq	r9,r4,80d5d4 <__subdf3+0x62c>
  80d43c:	0085c83a 	sub	r2,zero,r2
  80d440:	18c02034 	orhi	r3,r3,128
  80d444:	01000e04 	movi	r4,56
  80d448:	20807e16 	blt	r4,r2,80d644 <__subdf3+0x69c>
  80d44c:	010007c4 	movi	r4,31
  80d450:	2080e716 	blt	r4,r2,80d7f0 <__subdf3+0x848>
  80d454:	01000804 	movi	r4,32
  80d458:	2089c83a 	sub	r4,r4,r2
  80d45c:	1914983a 	sll	r10,r3,r4
  80d460:	8890d83a 	srl	r8,r17,r2
  80d464:	8908983a 	sll	r4,r17,r4
  80d468:	1884d83a 	srl	r2,r3,r2
  80d46c:	5222b03a 	or	r17,r10,r8
  80d470:	2006c03a 	cmpne	r3,r4,zero
  80d474:	88e2b03a 	or	r17,r17,r3
  80d478:	3463c83a 	sub	r17,r6,r17
  80d47c:	2885c83a 	sub	r2,r5,r2
  80d480:	344d803a 	cmpltu	r6,r6,r17
  80d484:	1187c83a 	sub	r3,r2,r6
  80d488:	4821883a 	mov	r16,r9
  80d48c:	3825883a 	mov	r18,r7
  80d490:	003f2306 	br	80d120 <__alt_mem_epcs_flash_controller_0+0xff804120>
  80d494:	24d0b03a 	or	r8,r4,r19
  80d498:	40001b1e 	bne	r8,zero,80d508 <__subdf3+0x560>
  80d49c:	0005883a 	mov	r2,zero
  80d4a0:	0009883a 	mov	r4,zero
  80d4a4:	0021883a 	mov	r16,zero
  80d4a8:	003f4906 	br	80d1d0 <__alt_mem_epcs_flash_controller_0+0xff8041d0>
  80d4ac:	010007c4 	movi	r4,31
  80d4b0:	20803a16 	blt	r4,r2,80d59c <__subdf3+0x5f4>
  80d4b4:	01000804 	movi	r4,32
  80d4b8:	2089c83a 	sub	r4,r4,r2
  80d4bc:	2912983a 	sll	r9,r5,r4
  80d4c0:	3090d83a 	srl	r8,r6,r2
  80d4c4:	3108983a 	sll	r4,r6,r4
  80d4c8:	2884d83a 	srl	r2,r5,r2
  80d4cc:	4a12b03a 	or	r9,r9,r8
  80d4d0:	2008c03a 	cmpne	r4,r4,zero
  80d4d4:	4912b03a 	or	r9,r9,r4
  80d4d8:	003f4e06 	br	80d214 <__alt_mem_epcs_flash_controller_0+0xff804214>
  80d4dc:	1c48b03a 	or	r4,r3,r17
  80d4e0:	20003c26 	beq	r4,zero,80d5d4 <__subdf3+0x62c>
  80d4e4:	0084303a 	nor	r2,zero,r2
  80d4e8:	1000381e 	bne	r2,zero,80d5cc <__subdf3+0x624>
  80d4ec:	3463c83a 	sub	r17,r6,r17
  80d4f0:	28c5c83a 	sub	r2,r5,r3
  80d4f4:	344d803a 	cmpltu	r6,r6,r17
  80d4f8:	1187c83a 	sub	r3,r2,r6
  80d4fc:	4821883a 	mov	r16,r9
  80d500:	3825883a 	mov	r18,r7
  80d504:	003f0606 	br	80d120 <__alt_mem_epcs_flash_controller_0+0xff804120>
  80d508:	2023883a 	mov	r17,r4
  80d50c:	003f0906 	br	80d134 <__alt_mem_epcs_flash_controller_0+0xff804134>
  80d510:	0101ffc4 	movi	r4,2047
  80d514:	813f3a1e 	bne	r16,r4,80d200 <__alt_mem_epcs_flash_controller_0+0xff804200>
  80d518:	003ec406 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d51c:	0005883a 	mov	r2,zero
  80d520:	003fb106 	br	80d3e8 <__alt_mem_epcs_flash_controller_0+0xff8043e8>
  80d524:	0005883a 	mov	r2,zero
  80d528:	003fbc06 	br	80d41c <__alt_mem_epcs_flash_controller_0+0xff80441c>
  80d52c:	1c44b03a 	or	r2,r3,r17
  80d530:	80008e1e 	bne	r16,zero,80d76c <__subdf3+0x7c4>
  80d534:	1000c826 	beq	r2,zero,80d858 <__subdf3+0x8b0>
  80d538:	2984b03a 	or	r2,r5,r6
  80d53c:	103ebb26 	beq	r2,zero,80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d540:	8989883a 	add	r4,r17,r6
  80d544:	1945883a 	add	r2,r3,r5
  80d548:	2447803a 	cmpltu	r3,r4,r17
  80d54c:	1887883a 	add	r3,r3,r2
  80d550:	1880202c 	andhi	r2,r3,128
  80d554:	2023883a 	mov	r17,r4
  80d558:	103f1626 	beq	r2,zero,80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>
  80d55c:	00bfe034 	movhi	r2,65408
  80d560:	10bfffc4 	addi	r2,r2,-1
  80d564:	5021883a 	mov	r16,r10
  80d568:	1886703a 	and	r3,r3,r2
  80d56c:	003eaf06 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d570:	3825883a 	mov	r18,r7
  80d574:	003f0f06 	br	80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>
  80d578:	1c44b03a 	or	r2,r3,r17
  80d57c:	8000251e 	bne	r16,zero,80d614 <__subdf3+0x66c>
  80d580:	1000661e 	bne	r2,zero,80d71c <__subdf3+0x774>
  80d584:	2990b03a 	or	r8,r5,r6
  80d588:	40009626 	beq	r8,zero,80d7e4 <__subdf3+0x83c>
  80d58c:	2807883a 	mov	r3,r5
  80d590:	3023883a 	mov	r17,r6
  80d594:	3825883a 	mov	r18,r7
  80d598:	003ea406 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d59c:	127ff804 	addi	r9,r2,-32
  80d5a0:	01000804 	movi	r4,32
  80d5a4:	2a52d83a 	srl	r9,r5,r9
  80d5a8:	11008c26 	beq	r2,r4,80d7dc <__subdf3+0x834>
  80d5ac:	01001004 	movi	r4,64
  80d5b0:	2085c83a 	sub	r2,r4,r2
  80d5b4:	2884983a 	sll	r2,r5,r2
  80d5b8:	118cb03a 	or	r6,r2,r6
  80d5bc:	300cc03a 	cmpne	r6,r6,zero
  80d5c0:	4992b03a 	or	r9,r9,r6
  80d5c4:	0005883a 	mov	r2,zero
  80d5c8:	003f1206 	br	80d214 <__alt_mem_epcs_flash_controller_0+0xff804214>
  80d5cc:	0101ffc4 	movi	r4,2047
  80d5d0:	493f9c1e 	bne	r9,r4,80d444 <__alt_mem_epcs_flash_controller_0+0xff804444>
  80d5d4:	2807883a 	mov	r3,r5
  80d5d8:	3023883a 	mov	r17,r6
  80d5dc:	4821883a 	mov	r16,r9
  80d5e0:	3825883a 	mov	r18,r7
  80d5e4:	003e9106 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d5e8:	80001f1e 	bne	r16,zero,80d668 <__subdf3+0x6c0>
  80d5ec:	1c48b03a 	or	r4,r3,r17
  80d5f0:	20005a26 	beq	r4,zero,80d75c <__subdf3+0x7b4>
  80d5f4:	0084303a 	nor	r2,zero,r2
  80d5f8:	1000561e 	bne	r2,zero,80d754 <__subdf3+0x7ac>
  80d5fc:	89a3883a 	add	r17,r17,r6
  80d600:	1945883a 	add	r2,r3,r5
  80d604:	898d803a 	cmpltu	r6,r17,r6
  80d608:	3087883a 	add	r3,r6,r2
  80d60c:	4821883a 	mov	r16,r9
  80d610:	003f0506 	br	80d228 <__alt_mem_epcs_flash_controller_0+0xff804228>
  80d614:	10002b1e 	bne	r2,zero,80d6c4 <__subdf3+0x71c>
  80d618:	2984b03a 	or	r2,r5,r6
  80d61c:	10008026 	beq	r2,zero,80d820 <__subdf3+0x878>
  80d620:	2807883a 	mov	r3,r5
  80d624:	3023883a 	mov	r17,r6
  80d628:	3825883a 	mov	r18,r7
  80d62c:	0401ffc4 	movi	r16,2047
  80d630:	003e7e06 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d634:	3809883a 	mov	r4,r7
  80d638:	0011883a 	mov	r8,zero
  80d63c:	0005883a 	mov	r2,zero
  80d640:	003ee306 	br	80d1d0 <__alt_mem_epcs_flash_controller_0+0xff8041d0>
  80d644:	1c62b03a 	or	r17,r3,r17
  80d648:	8822c03a 	cmpne	r17,r17,zero
  80d64c:	0005883a 	mov	r2,zero
  80d650:	003f8906 	br	80d478 <__alt_mem_epcs_flash_controller_0+0xff804478>
  80d654:	3809883a 	mov	r4,r7
  80d658:	4821883a 	mov	r16,r9
  80d65c:	0011883a 	mov	r8,zero
  80d660:	0005883a 	mov	r2,zero
  80d664:	003eda06 	br	80d1d0 <__alt_mem_epcs_flash_controller_0+0xff8041d0>
  80d668:	0101ffc4 	movi	r4,2047
  80d66c:	49003b26 	beq	r9,r4,80d75c <__subdf3+0x7b4>
  80d670:	0085c83a 	sub	r2,zero,r2
  80d674:	18c02034 	orhi	r3,r3,128
  80d678:	01000e04 	movi	r4,56
  80d67c:	20806e16 	blt	r4,r2,80d838 <__subdf3+0x890>
  80d680:	010007c4 	movi	r4,31
  80d684:	20807716 	blt	r4,r2,80d864 <__subdf3+0x8bc>
  80d688:	01000804 	movi	r4,32
  80d68c:	2089c83a 	sub	r4,r4,r2
  80d690:	1914983a 	sll	r10,r3,r4
  80d694:	8890d83a 	srl	r8,r17,r2
  80d698:	8908983a 	sll	r4,r17,r4
  80d69c:	1884d83a 	srl	r2,r3,r2
  80d6a0:	5222b03a 	or	r17,r10,r8
  80d6a4:	2006c03a 	cmpne	r3,r4,zero
  80d6a8:	88e2b03a 	or	r17,r17,r3
  80d6ac:	89a3883a 	add	r17,r17,r6
  80d6b0:	1145883a 	add	r2,r2,r5
  80d6b4:	898d803a 	cmpltu	r6,r17,r6
  80d6b8:	3087883a 	add	r3,r6,r2
  80d6bc:	4821883a 	mov	r16,r9
  80d6c0:	003ed906 	br	80d228 <__alt_mem_epcs_flash_controller_0+0xff804228>
  80d6c4:	2984b03a 	or	r2,r5,r6
  80d6c8:	10004226 	beq	r2,zero,80d7d4 <__subdf3+0x82c>
  80d6cc:	1808d0fa 	srli	r4,r3,3
  80d6d0:	8822d0fa 	srli	r17,r17,3
  80d6d4:	1806977a 	slli	r3,r3,29
  80d6d8:	2080022c 	andhi	r2,r4,8
  80d6dc:	1c62b03a 	or	r17,r3,r17
  80d6e0:	10000826 	beq	r2,zero,80d704 <__subdf3+0x75c>
  80d6e4:	2812d0fa 	srli	r9,r5,3
  80d6e8:	4880022c 	andhi	r2,r9,8
  80d6ec:	1000051e 	bne	r2,zero,80d704 <__subdf3+0x75c>
  80d6f0:	300cd0fa 	srli	r6,r6,3
  80d6f4:	2804977a 	slli	r2,r5,29
  80d6f8:	4809883a 	mov	r4,r9
  80d6fc:	3825883a 	mov	r18,r7
  80d700:	11a2b03a 	or	r17,r2,r6
  80d704:	8806d77a 	srli	r3,r17,29
  80d708:	200890fa 	slli	r4,r4,3
  80d70c:	882290fa 	slli	r17,r17,3
  80d710:	0401ffc4 	movi	r16,2047
  80d714:	1906b03a 	or	r3,r3,r4
  80d718:	003e4406 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d71c:	2984b03a 	or	r2,r5,r6
  80d720:	103e4226 	beq	r2,zero,80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d724:	8989c83a 	sub	r4,r17,r6
  80d728:	8911803a 	cmpltu	r8,r17,r4
  80d72c:	1945c83a 	sub	r2,r3,r5
  80d730:	1205c83a 	sub	r2,r2,r8
  80d734:	1200202c 	andhi	r8,r2,128
  80d738:	403e9a26 	beq	r8,zero,80d1a4 <__alt_mem_epcs_flash_controller_0+0xff8041a4>
  80d73c:	3463c83a 	sub	r17,r6,r17
  80d740:	28c5c83a 	sub	r2,r5,r3
  80d744:	344d803a 	cmpltu	r6,r6,r17
  80d748:	1187c83a 	sub	r3,r2,r6
  80d74c:	3825883a 	mov	r18,r7
  80d750:	003e3606 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d754:	0101ffc4 	movi	r4,2047
  80d758:	493fc71e 	bne	r9,r4,80d678 <__alt_mem_epcs_flash_controller_0+0xff804678>
  80d75c:	2807883a 	mov	r3,r5
  80d760:	3023883a 	mov	r17,r6
  80d764:	4821883a 	mov	r16,r9
  80d768:	003e3006 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d76c:	10003626 	beq	r2,zero,80d848 <__subdf3+0x8a0>
  80d770:	2984b03a 	or	r2,r5,r6
  80d774:	10001726 	beq	r2,zero,80d7d4 <__subdf3+0x82c>
  80d778:	1808d0fa 	srli	r4,r3,3
  80d77c:	8822d0fa 	srli	r17,r17,3
  80d780:	1806977a 	slli	r3,r3,29
  80d784:	2080022c 	andhi	r2,r4,8
  80d788:	1c62b03a 	or	r17,r3,r17
  80d78c:	10000726 	beq	r2,zero,80d7ac <__subdf3+0x804>
  80d790:	2812d0fa 	srli	r9,r5,3
  80d794:	4880022c 	andhi	r2,r9,8
  80d798:	1000041e 	bne	r2,zero,80d7ac <__subdf3+0x804>
  80d79c:	300cd0fa 	srli	r6,r6,3
  80d7a0:	2804977a 	slli	r2,r5,29
  80d7a4:	4809883a 	mov	r4,r9
  80d7a8:	11a2b03a 	or	r17,r2,r6
  80d7ac:	8806d77a 	srli	r3,r17,29
  80d7b0:	200890fa 	slli	r4,r4,3
  80d7b4:	882290fa 	slli	r17,r17,3
  80d7b8:	3825883a 	mov	r18,r7
  80d7bc:	1906b03a 	or	r3,r3,r4
  80d7c0:	0401ffc4 	movi	r16,2047
  80d7c4:	003e1906 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d7c8:	000b883a 	mov	r5,zero
  80d7cc:	0005883a 	mov	r2,zero
  80d7d0:	003e2e06 	br	80d08c <__alt_mem_epcs_flash_controller_0+0xff80408c>
  80d7d4:	0401ffc4 	movi	r16,2047
  80d7d8:	003e1406 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d7dc:	0005883a 	mov	r2,zero
  80d7e0:	003f7506 	br	80d5b8 <__alt_mem_epcs_flash_controller_0+0xff8045b8>
  80d7e4:	0005883a 	mov	r2,zero
  80d7e8:	0009883a 	mov	r4,zero
  80d7ec:	003e7806 	br	80d1d0 <__alt_mem_epcs_flash_controller_0+0xff8041d0>
  80d7f0:	123ff804 	addi	r8,r2,-32
  80d7f4:	01000804 	movi	r4,32
  80d7f8:	1a10d83a 	srl	r8,r3,r8
  80d7fc:	11002526 	beq	r2,r4,80d894 <__subdf3+0x8ec>
  80d800:	01001004 	movi	r4,64
  80d804:	2085c83a 	sub	r2,r4,r2
  80d808:	1884983a 	sll	r2,r3,r2
  80d80c:	1444b03a 	or	r2,r2,r17
  80d810:	1004c03a 	cmpne	r2,r2,zero
  80d814:	40a2b03a 	or	r17,r8,r2
  80d818:	0005883a 	mov	r2,zero
  80d81c:	003f1606 	br	80d478 <__alt_mem_epcs_flash_controller_0+0xff804478>
  80d820:	02000434 	movhi	r8,16
  80d824:	0009883a 	mov	r4,zero
  80d828:	423fffc4 	addi	r8,r8,-1
  80d82c:	00bfffc4 	movi	r2,-1
  80d830:	0401ffc4 	movi	r16,2047
  80d834:	003e6606 	br	80d1d0 <__alt_mem_epcs_flash_controller_0+0xff8041d0>
  80d838:	1c62b03a 	or	r17,r3,r17
  80d83c:	8822c03a 	cmpne	r17,r17,zero
  80d840:	0005883a 	mov	r2,zero
  80d844:	003f9906 	br	80d6ac <__alt_mem_epcs_flash_controller_0+0xff8046ac>
  80d848:	2807883a 	mov	r3,r5
  80d84c:	3023883a 	mov	r17,r6
  80d850:	0401ffc4 	movi	r16,2047
  80d854:	003df506 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d858:	2807883a 	mov	r3,r5
  80d85c:	3023883a 	mov	r17,r6
  80d860:	003df206 	br	80d02c <__alt_mem_epcs_flash_controller_0+0xff80402c>
  80d864:	123ff804 	addi	r8,r2,-32
  80d868:	01000804 	movi	r4,32
  80d86c:	1a10d83a 	srl	r8,r3,r8
  80d870:	11000a26 	beq	r2,r4,80d89c <__subdf3+0x8f4>
  80d874:	01001004 	movi	r4,64
  80d878:	2085c83a 	sub	r2,r4,r2
  80d87c:	1884983a 	sll	r2,r3,r2
  80d880:	1444b03a 	or	r2,r2,r17
  80d884:	1004c03a 	cmpne	r2,r2,zero
  80d888:	40a2b03a 	or	r17,r8,r2
  80d88c:	0005883a 	mov	r2,zero
  80d890:	003f8606 	br	80d6ac <__alt_mem_epcs_flash_controller_0+0xff8046ac>
  80d894:	0005883a 	mov	r2,zero
  80d898:	003fdc06 	br	80d80c <__alt_mem_epcs_flash_controller_0+0xff80480c>
  80d89c:	0005883a 	mov	r2,zero
  80d8a0:	003ff706 	br	80d880 <__alt_mem_epcs_flash_controller_0+0xff804880>

0080d8a4 <__fixdfsi>:
  80d8a4:	280cd53a 	srli	r6,r5,20
  80d8a8:	00c00434 	movhi	r3,16
  80d8ac:	18ffffc4 	addi	r3,r3,-1
  80d8b0:	3181ffcc 	andi	r6,r6,2047
  80d8b4:	01c0ff84 	movi	r7,1022
  80d8b8:	28c6703a 	and	r3,r5,r3
  80d8bc:	280ad7fa 	srli	r5,r5,31
  80d8c0:	3980120e 	bge	r7,r6,80d90c <__fixdfsi+0x68>
  80d8c4:	00810744 	movi	r2,1053
  80d8c8:	11800c16 	blt	r2,r6,80d8fc <__fixdfsi+0x58>
  80d8cc:	00810cc4 	movi	r2,1075
  80d8d0:	1185c83a 	sub	r2,r2,r6
  80d8d4:	01c007c4 	movi	r7,31
  80d8d8:	18c00434 	orhi	r3,r3,16
  80d8dc:	38800d16 	blt	r7,r2,80d914 <__fixdfsi+0x70>
  80d8e0:	31befb44 	addi	r6,r6,-1043
  80d8e4:	2084d83a 	srl	r2,r4,r2
  80d8e8:	1986983a 	sll	r3,r3,r6
  80d8ec:	1884b03a 	or	r2,r3,r2
  80d8f0:	28000726 	beq	r5,zero,80d910 <__fixdfsi+0x6c>
  80d8f4:	0085c83a 	sub	r2,zero,r2
  80d8f8:	f800283a 	ret
  80d8fc:	00a00034 	movhi	r2,32768
  80d900:	10bfffc4 	addi	r2,r2,-1
  80d904:	2885883a 	add	r2,r5,r2
  80d908:	f800283a 	ret
  80d90c:	0005883a 	mov	r2,zero
  80d910:	f800283a 	ret
  80d914:	008104c4 	movi	r2,1043
  80d918:	1185c83a 	sub	r2,r2,r6
  80d91c:	1884d83a 	srl	r2,r3,r2
  80d920:	003ff306 	br	80d8f0 <__alt_mem_epcs_flash_controller_0+0xff8048f0>

0080d924 <__floatsidf>:
  80d924:	defffd04 	addi	sp,sp,-12
  80d928:	dfc00215 	stw	ra,8(sp)
  80d92c:	dc400115 	stw	r17,4(sp)
  80d930:	dc000015 	stw	r16,0(sp)
  80d934:	20002b26 	beq	r4,zero,80d9e4 <__floatsidf+0xc0>
  80d938:	2023883a 	mov	r17,r4
  80d93c:	2020d7fa 	srli	r16,r4,31
  80d940:	20002d16 	blt	r4,zero,80d9f8 <__floatsidf+0xd4>
  80d944:	8809883a 	mov	r4,r17
  80d948:	080daa80 	call	80daa8 <__clzsi2>
  80d94c:	01410784 	movi	r5,1054
  80d950:	288bc83a 	sub	r5,r5,r2
  80d954:	01010cc4 	movi	r4,1075
  80d958:	2149c83a 	sub	r4,r4,r5
  80d95c:	00c007c4 	movi	r3,31
  80d960:	1900160e 	bge	r3,r4,80d9bc <__floatsidf+0x98>
  80d964:	00c104c4 	movi	r3,1043
  80d968:	1947c83a 	sub	r3,r3,r5
  80d96c:	88c6983a 	sll	r3,r17,r3
  80d970:	00800434 	movhi	r2,16
  80d974:	10bfffc4 	addi	r2,r2,-1
  80d978:	1886703a 	and	r3,r3,r2
  80d97c:	2941ffcc 	andi	r5,r5,2047
  80d980:	800d883a 	mov	r6,r16
  80d984:	0005883a 	mov	r2,zero
  80d988:	280a953a 	slli	r5,r5,20
  80d98c:	31803fcc 	andi	r6,r6,255
  80d990:	01000434 	movhi	r4,16
  80d994:	300c97fa 	slli	r6,r6,31
  80d998:	213fffc4 	addi	r4,r4,-1
  80d99c:	1906703a 	and	r3,r3,r4
  80d9a0:	1946b03a 	or	r3,r3,r5
  80d9a4:	1986b03a 	or	r3,r3,r6
  80d9a8:	dfc00217 	ldw	ra,8(sp)
  80d9ac:	dc400117 	ldw	r17,4(sp)
  80d9b0:	dc000017 	ldw	r16,0(sp)
  80d9b4:	dec00304 	addi	sp,sp,12
  80d9b8:	f800283a 	ret
  80d9bc:	00c002c4 	movi	r3,11
  80d9c0:	1887c83a 	sub	r3,r3,r2
  80d9c4:	88c6d83a 	srl	r3,r17,r3
  80d9c8:	8904983a 	sll	r2,r17,r4
  80d9cc:	01000434 	movhi	r4,16
  80d9d0:	213fffc4 	addi	r4,r4,-1
  80d9d4:	2941ffcc 	andi	r5,r5,2047
  80d9d8:	1906703a 	and	r3,r3,r4
  80d9dc:	800d883a 	mov	r6,r16
  80d9e0:	003fe906 	br	80d988 <__alt_mem_epcs_flash_controller_0+0xff804988>
  80d9e4:	000d883a 	mov	r6,zero
  80d9e8:	000b883a 	mov	r5,zero
  80d9ec:	0007883a 	mov	r3,zero
  80d9f0:	0005883a 	mov	r2,zero
  80d9f4:	003fe406 	br	80d988 <__alt_mem_epcs_flash_controller_0+0xff804988>
  80d9f8:	0123c83a 	sub	r17,zero,r4
  80d9fc:	003fd106 	br	80d944 <__alt_mem_epcs_flash_controller_0+0xff804944>

0080da00 <__floatunsidf>:
  80da00:	defffe04 	addi	sp,sp,-8
  80da04:	dc000015 	stw	r16,0(sp)
  80da08:	dfc00115 	stw	ra,4(sp)
  80da0c:	2021883a 	mov	r16,r4
  80da10:	20002226 	beq	r4,zero,80da9c <__floatunsidf+0x9c>
  80da14:	080daa80 	call	80daa8 <__clzsi2>
  80da18:	01010784 	movi	r4,1054
  80da1c:	2089c83a 	sub	r4,r4,r2
  80da20:	01810cc4 	movi	r6,1075
  80da24:	310dc83a 	sub	r6,r6,r4
  80da28:	00c007c4 	movi	r3,31
  80da2c:	1980120e 	bge	r3,r6,80da78 <__floatunsidf+0x78>
  80da30:	00c104c4 	movi	r3,1043
  80da34:	1907c83a 	sub	r3,r3,r4
  80da38:	80ca983a 	sll	r5,r16,r3
  80da3c:	00800434 	movhi	r2,16
  80da40:	10bfffc4 	addi	r2,r2,-1
  80da44:	2101ffcc 	andi	r4,r4,2047
  80da48:	0021883a 	mov	r16,zero
  80da4c:	288a703a 	and	r5,r5,r2
  80da50:	2008953a 	slli	r4,r4,20
  80da54:	00c00434 	movhi	r3,16
  80da58:	18ffffc4 	addi	r3,r3,-1
  80da5c:	28c6703a 	and	r3,r5,r3
  80da60:	8005883a 	mov	r2,r16
  80da64:	1906b03a 	or	r3,r3,r4
  80da68:	dfc00117 	ldw	ra,4(sp)
  80da6c:	dc000017 	ldw	r16,0(sp)
  80da70:	dec00204 	addi	sp,sp,8
  80da74:	f800283a 	ret
  80da78:	00c002c4 	movi	r3,11
  80da7c:	188bc83a 	sub	r5,r3,r2
  80da80:	814ad83a 	srl	r5,r16,r5
  80da84:	00c00434 	movhi	r3,16
  80da88:	18ffffc4 	addi	r3,r3,-1
  80da8c:	81a0983a 	sll	r16,r16,r6
  80da90:	2101ffcc 	andi	r4,r4,2047
  80da94:	28ca703a 	and	r5,r5,r3
  80da98:	003fed06 	br	80da50 <__alt_mem_epcs_flash_controller_0+0xff804a50>
  80da9c:	0009883a 	mov	r4,zero
  80daa0:	000b883a 	mov	r5,zero
  80daa4:	003fea06 	br	80da50 <__alt_mem_epcs_flash_controller_0+0xff804a50>

0080daa8 <__clzsi2>:
  80daa8:	00bfffd4 	movui	r2,65535
  80daac:	11000536 	bltu	r2,r4,80dac4 <__clzsi2+0x1c>
  80dab0:	00803fc4 	movi	r2,255
  80dab4:	11000f36 	bltu	r2,r4,80daf4 <__clzsi2+0x4c>
  80dab8:	00800804 	movi	r2,32
  80dabc:	0007883a 	mov	r3,zero
  80dac0:	00000506 	br	80dad8 <__clzsi2+0x30>
  80dac4:	00804034 	movhi	r2,256
  80dac8:	10bfffc4 	addi	r2,r2,-1
  80dacc:	11000c2e 	bgeu	r2,r4,80db00 <__clzsi2+0x58>
  80dad0:	00800204 	movi	r2,8
  80dad4:	00c00604 	movi	r3,24
  80dad8:	20c8d83a 	srl	r4,r4,r3
  80dadc:	00c020b4 	movhi	r3,130
  80dae0:	18e9c904 	addi	r3,r3,-22748
  80dae4:	1909883a 	add	r4,r3,r4
  80dae8:	20c00003 	ldbu	r3,0(r4)
  80daec:	10c5c83a 	sub	r2,r2,r3
  80daf0:	f800283a 	ret
  80daf4:	00800604 	movi	r2,24
  80daf8:	00c00204 	movi	r3,8
  80dafc:	003ff606 	br	80dad8 <__alt_mem_epcs_flash_controller_0+0xff804ad8>
  80db00:	00800404 	movi	r2,16
  80db04:	1007883a 	mov	r3,r2
  80db08:	003ff306 	br	80dad8 <__alt_mem_epcs_flash_controller_0+0xff804ad8>

0080db0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80db0c:	defffe04 	addi	sp,sp,-8
  80db10:	dfc00115 	stw	ra,4(sp)
  80db14:	df000015 	stw	fp,0(sp)
  80db18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80db1c:	d0a02717 	ldw	r2,-32612(gp)
  80db20:	10000326 	beq	r2,zero,80db30 <alt_get_errno+0x24>
  80db24:	d0a02717 	ldw	r2,-32612(gp)
  80db28:	103ee83a 	callr	r2
  80db2c:	00000106 	br	80db34 <alt_get_errno+0x28>
  80db30:	d0a05b04 	addi	r2,gp,-32404
}
  80db34:	e037883a 	mov	sp,fp
  80db38:	dfc00117 	ldw	ra,4(sp)
  80db3c:	df000017 	ldw	fp,0(sp)
  80db40:	dec00204 	addi	sp,sp,8
  80db44:	f800283a 	ret

0080db48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80db48:	defffb04 	addi	sp,sp,-20
  80db4c:	dfc00415 	stw	ra,16(sp)
  80db50:	df000315 	stw	fp,12(sp)
  80db54:	df000304 	addi	fp,sp,12
  80db58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80db5c:	e0bfff17 	ldw	r2,-4(fp)
  80db60:	10000816 	blt	r2,zero,80db84 <close+0x3c>
  80db64:	01400304 	movi	r5,12
  80db68:	e13fff17 	ldw	r4,-4(fp)
  80db6c:	080b2400 	call	80b240 <__mulsi3>
  80db70:	1007883a 	mov	r3,r2
  80db74:	008020b4 	movhi	r2,130
  80db78:	10aca204 	addi	r2,r2,-19832
  80db7c:	1885883a 	add	r2,r3,r2
  80db80:	00000106 	br	80db88 <close+0x40>
  80db84:	0005883a 	mov	r2,zero
  80db88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80db8c:	e0bffd17 	ldw	r2,-12(fp)
  80db90:	10001926 	beq	r2,zero,80dbf8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80db94:	e0bffd17 	ldw	r2,-12(fp)
  80db98:	10800017 	ldw	r2,0(r2)
  80db9c:	10800417 	ldw	r2,16(r2)
  80dba0:	10000626 	beq	r2,zero,80dbbc <close+0x74>
  80dba4:	e0bffd17 	ldw	r2,-12(fp)
  80dba8:	10800017 	ldw	r2,0(r2)
  80dbac:	10800417 	ldw	r2,16(r2)
  80dbb0:	e13ffd17 	ldw	r4,-12(fp)
  80dbb4:	103ee83a 	callr	r2
  80dbb8:	00000106 	br	80dbc0 <close+0x78>
  80dbbc:	0005883a 	mov	r2,zero
  80dbc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80dbc4:	e13fff17 	ldw	r4,-4(fp)
  80dbc8:	080e3dc0 	call	80e3dc <alt_release_fd>
    if (rval < 0)
  80dbcc:	e0bffe17 	ldw	r2,-8(fp)
  80dbd0:	1000070e 	bge	r2,zero,80dbf0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80dbd4:	080db0c0 	call	80db0c <alt_get_errno>
  80dbd8:	1007883a 	mov	r3,r2
  80dbdc:	e0bffe17 	ldw	r2,-8(fp)
  80dbe0:	0085c83a 	sub	r2,zero,r2
  80dbe4:	18800015 	stw	r2,0(r3)
      return -1;
  80dbe8:	00bfffc4 	movi	r2,-1
  80dbec:	00000706 	br	80dc0c <close+0xc4>
    }
    return 0;
  80dbf0:	0005883a 	mov	r2,zero
  80dbf4:	00000506 	br	80dc0c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dbf8:	080db0c0 	call	80db0c <alt_get_errno>
  80dbfc:	1007883a 	mov	r3,r2
  80dc00:	00801444 	movi	r2,81
  80dc04:	18800015 	stw	r2,0(r3)
    return -1;
  80dc08:	00bfffc4 	movi	r2,-1
  }
}
  80dc0c:	e037883a 	mov	sp,fp
  80dc10:	dfc00117 	ldw	ra,4(sp)
  80dc14:	df000017 	ldw	fp,0(sp)
  80dc18:	dec00204 	addi	sp,sp,8
  80dc1c:	f800283a 	ret

0080dc20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80dc20:	defffc04 	addi	sp,sp,-16
  80dc24:	df000315 	stw	fp,12(sp)
  80dc28:	df000304 	addi	fp,sp,12
  80dc2c:	e13ffd15 	stw	r4,-12(fp)
  80dc30:	e17ffe15 	stw	r5,-8(fp)
  80dc34:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80dc38:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc3c:	e037883a 	mov	sp,fp
  80dc40:	df000017 	ldw	fp,0(sp)
  80dc44:	dec00104 	addi	sp,sp,4
  80dc48:	f800283a 	ret

0080dc4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc4c:	defffe04 	addi	sp,sp,-8
  80dc50:	dfc00115 	stw	ra,4(sp)
  80dc54:	df000015 	stw	fp,0(sp)
  80dc58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc5c:	d0a02717 	ldw	r2,-32612(gp)
  80dc60:	10000326 	beq	r2,zero,80dc70 <alt_get_errno+0x24>
  80dc64:	d0a02717 	ldw	r2,-32612(gp)
  80dc68:	103ee83a 	callr	r2
  80dc6c:	00000106 	br	80dc74 <alt_get_errno+0x28>
  80dc70:	d0a05b04 	addi	r2,gp,-32404
}
  80dc74:	e037883a 	mov	sp,fp
  80dc78:	dfc00117 	ldw	ra,4(sp)
  80dc7c:	df000017 	ldw	fp,0(sp)
  80dc80:	dec00204 	addi	sp,sp,8
  80dc84:	f800283a 	ret

0080dc88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80dc88:	defffb04 	addi	sp,sp,-20
  80dc8c:	dfc00415 	stw	ra,16(sp)
  80dc90:	df000315 	stw	fp,12(sp)
  80dc94:	df000304 	addi	fp,sp,12
  80dc98:	e13ffe15 	stw	r4,-8(fp)
  80dc9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dca0:	e0bffe17 	ldw	r2,-8(fp)
  80dca4:	10000816 	blt	r2,zero,80dcc8 <fstat+0x40>
  80dca8:	01400304 	movi	r5,12
  80dcac:	e13ffe17 	ldw	r4,-8(fp)
  80dcb0:	080b2400 	call	80b240 <__mulsi3>
  80dcb4:	1007883a 	mov	r3,r2
  80dcb8:	008020b4 	movhi	r2,130
  80dcbc:	10aca204 	addi	r2,r2,-19832
  80dcc0:	1885883a 	add	r2,r3,r2
  80dcc4:	00000106 	br	80dccc <fstat+0x44>
  80dcc8:	0005883a 	mov	r2,zero
  80dccc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80dcd0:	e0bffd17 	ldw	r2,-12(fp)
  80dcd4:	10001026 	beq	r2,zero,80dd18 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80dcd8:	e0bffd17 	ldw	r2,-12(fp)
  80dcdc:	10800017 	ldw	r2,0(r2)
  80dce0:	10800817 	ldw	r2,32(r2)
  80dce4:	10000726 	beq	r2,zero,80dd04 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80dce8:	e0bffd17 	ldw	r2,-12(fp)
  80dcec:	10800017 	ldw	r2,0(r2)
  80dcf0:	10800817 	ldw	r2,32(r2)
  80dcf4:	e17fff17 	ldw	r5,-4(fp)
  80dcf8:	e13ffd17 	ldw	r4,-12(fp)
  80dcfc:	103ee83a 	callr	r2
  80dd00:	00000a06 	br	80dd2c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80dd04:	e0bfff17 	ldw	r2,-4(fp)
  80dd08:	00c80004 	movi	r3,8192
  80dd0c:	10c00115 	stw	r3,4(r2)
      return 0;
  80dd10:	0005883a 	mov	r2,zero
  80dd14:	00000506 	br	80dd2c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dd18:	080dc4c0 	call	80dc4c <alt_get_errno>
  80dd1c:	1007883a 	mov	r3,r2
  80dd20:	00801444 	movi	r2,81
  80dd24:	18800015 	stw	r2,0(r3)
    return -1;
  80dd28:	00bfffc4 	movi	r2,-1
  }
}
  80dd2c:	e037883a 	mov	sp,fp
  80dd30:	dfc00117 	ldw	ra,4(sp)
  80dd34:	df000017 	ldw	fp,0(sp)
  80dd38:	dec00204 	addi	sp,sp,8
  80dd3c:	f800283a 	ret

0080dd40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80dd40:	defff904 	addi	sp,sp,-28
  80dd44:	dfc00615 	stw	ra,24(sp)
  80dd48:	df000515 	stw	fp,20(sp)
  80dd4c:	df000504 	addi	fp,sp,20
  80dd50:	e13ffc15 	stw	r4,-16(fp)
  80dd54:	e17ffd15 	stw	r5,-12(fp)
  80dd58:	e1bffe15 	stw	r6,-8(fp)
  80dd5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80dd60:	e0800217 	ldw	r2,8(fp)
  80dd64:	d8800015 	stw	r2,0(sp)
  80dd68:	e1ffff17 	ldw	r7,-4(fp)
  80dd6c:	e1bffe17 	ldw	r6,-8(fp)
  80dd70:	e17ffd17 	ldw	r5,-12(fp)
  80dd74:	e13ffc17 	ldw	r4,-16(fp)
  80dd78:	080def00 	call	80def0 <alt_iic_isr_register>
}  
  80dd7c:	e037883a 	mov	sp,fp
  80dd80:	dfc00117 	ldw	ra,4(sp)
  80dd84:	df000017 	ldw	fp,0(sp)
  80dd88:	dec00204 	addi	sp,sp,8
  80dd8c:	f800283a 	ret

0080dd90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80dd90:	defff904 	addi	sp,sp,-28
  80dd94:	df000615 	stw	fp,24(sp)
  80dd98:	df000604 	addi	fp,sp,24
  80dd9c:	e13ffe15 	stw	r4,-8(fp)
  80dda0:	e17fff15 	stw	r5,-4(fp)
  80dda4:	e0bfff17 	ldw	r2,-4(fp)
  80dda8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ddac:	0005303a 	rdctl	r2,status
  80ddb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ddb4:	e0fffb17 	ldw	r3,-20(fp)
  80ddb8:	00bfff84 	movi	r2,-2
  80ddbc:	1884703a 	and	r2,r3,r2
  80ddc0:	1001703a 	wrctl	status,r2
  
  return context;
  80ddc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ddc8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80ddcc:	00c00044 	movi	r3,1
  80ddd0:	e0bffa17 	ldw	r2,-24(fp)
  80ddd4:	1884983a 	sll	r2,r3,r2
  80ddd8:	1007883a 	mov	r3,r2
  80dddc:	d0a05d17 	ldw	r2,-32396(gp)
  80dde0:	1884b03a 	or	r2,r3,r2
  80dde4:	d0a05d15 	stw	r2,-32396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80dde8:	d0a05d17 	ldw	r2,-32396(gp)
  80ddec:	100170fa 	wrctl	ienable,r2
  80ddf0:	e0bffc17 	ldw	r2,-16(fp)
  80ddf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ddf8:	e0bffd17 	ldw	r2,-12(fp)
  80ddfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80de00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80de04:	0001883a 	nop
}
  80de08:	e037883a 	mov	sp,fp
  80de0c:	df000017 	ldw	fp,0(sp)
  80de10:	dec00104 	addi	sp,sp,4
  80de14:	f800283a 	ret

0080de18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80de18:	defff904 	addi	sp,sp,-28
  80de1c:	df000615 	stw	fp,24(sp)
  80de20:	df000604 	addi	fp,sp,24
  80de24:	e13ffe15 	stw	r4,-8(fp)
  80de28:	e17fff15 	stw	r5,-4(fp)
  80de2c:	e0bfff17 	ldw	r2,-4(fp)
  80de30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de34:	0005303a 	rdctl	r2,status
  80de38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de3c:	e0fffb17 	ldw	r3,-20(fp)
  80de40:	00bfff84 	movi	r2,-2
  80de44:	1884703a 	and	r2,r3,r2
  80de48:	1001703a 	wrctl	status,r2
  
  return context;
  80de4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80de50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80de54:	00c00044 	movi	r3,1
  80de58:	e0bffa17 	ldw	r2,-24(fp)
  80de5c:	1884983a 	sll	r2,r3,r2
  80de60:	0084303a 	nor	r2,zero,r2
  80de64:	1007883a 	mov	r3,r2
  80de68:	d0a05d17 	ldw	r2,-32396(gp)
  80de6c:	1884703a 	and	r2,r3,r2
  80de70:	d0a05d15 	stw	r2,-32396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80de74:	d0a05d17 	ldw	r2,-32396(gp)
  80de78:	100170fa 	wrctl	ienable,r2
  80de7c:	e0bffc17 	ldw	r2,-16(fp)
  80de80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de84:	e0bffd17 	ldw	r2,-12(fp)
  80de88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80de8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80de90:	0001883a 	nop
}
  80de94:	e037883a 	mov	sp,fp
  80de98:	df000017 	ldw	fp,0(sp)
  80de9c:	dec00104 	addi	sp,sp,4
  80dea0:	f800283a 	ret

0080dea4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80dea4:	defffc04 	addi	sp,sp,-16
  80dea8:	df000315 	stw	fp,12(sp)
  80deac:	df000304 	addi	fp,sp,12
  80deb0:	e13ffe15 	stw	r4,-8(fp)
  80deb4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80deb8:	000530fa 	rdctl	r2,ienable
  80debc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80dec0:	00c00044 	movi	r3,1
  80dec4:	e0bfff17 	ldw	r2,-4(fp)
  80dec8:	1884983a 	sll	r2,r3,r2
  80decc:	1007883a 	mov	r3,r2
  80ded0:	e0bffd17 	ldw	r2,-12(fp)
  80ded4:	1884703a 	and	r2,r3,r2
  80ded8:	1004c03a 	cmpne	r2,r2,zero
  80dedc:	10803fcc 	andi	r2,r2,255
}
  80dee0:	e037883a 	mov	sp,fp
  80dee4:	df000017 	ldw	fp,0(sp)
  80dee8:	dec00104 	addi	sp,sp,4
  80deec:	f800283a 	ret

0080def0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80def0:	defff504 	addi	sp,sp,-44
  80def4:	dfc00a15 	stw	ra,40(sp)
  80def8:	df000915 	stw	fp,36(sp)
  80defc:	df000904 	addi	fp,sp,36
  80df00:	e13ffc15 	stw	r4,-16(fp)
  80df04:	e17ffd15 	stw	r5,-12(fp)
  80df08:	e1bffe15 	stw	r6,-8(fp)
  80df0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80df10:	00bffa84 	movi	r2,-22
  80df14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80df18:	e0bffd17 	ldw	r2,-12(fp)
  80df1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80df20:	e0bff817 	ldw	r2,-32(fp)
  80df24:	10800808 	cmpgei	r2,r2,32
  80df28:	1000271e 	bne	r2,zero,80dfc8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df2c:	0005303a 	rdctl	r2,status
  80df30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df34:	e0fffb17 	ldw	r3,-20(fp)
  80df38:	00bfff84 	movi	r2,-2
  80df3c:	1884703a 	and	r2,r3,r2
  80df40:	1001703a 	wrctl	status,r2
  
  return context;
  80df44:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80df48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80df4c:	008020b4 	movhi	r2,130
  80df50:	108c4404 	addi	r2,r2,12560
  80df54:	e0fff817 	ldw	r3,-32(fp)
  80df58:	180690fa 	slli	r3,r3,3
  80df5c:	10c5883a 	add	r2,r2,r3
  80df60:	e0fffe17 	ldw	r3,-8(fp)
  80df64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80df68:	008020b4 	movhi	r2,130
  80df6c:	108c4404 	addi	r2,r2,12560
  80df70:	e0fff817 	ldw	r3,-32(fp)
  80df74:	180690fa 	slli	r3,r3,3
  80df78:	10c5883a 	add	r2,r2,r3
  80df7c:	10800104 	addi	r2,r2,4
  80df80:	e0ffff17 	ldw	r3,-4(fp)
  80df84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80df88:	e0bffe17 	ldw	r2,-8(fp)
  80df8c:	10000526 	beq	r2,zero,80dfa4 <alt_iic_isr_register+0xb4>
  80df90:	e0bff817 	ldw	r2,-32(fp)
  80df94:	100b883a 	mov	r5,r2
  80df98:	e13ffc17 	ldw	r4,-16(fp)
  80df9c:	080dd900 	call	80dd90 <alt_ic_irq_enable>
  80dfa0:	00000406 	br	80dfb4 <alt_iic_isr_register+0xc4>
  80dfa4:	e0bff817 	ldw	r2,-32(fp)
  80dfa8:	100b883a 	mov	r5,r2
  80dfac:	e13ffc17 	ldw	r4,-16(fp)
  80dfb0:	080de180 	call	80de18 <alt_ic_irq_disable>
  80dfb4:	e0bff715 	stw	r2,-36(fp)
  80dfb8:	e0bffa17 	ldw	r2,-24(fp)
  80dfbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dfc0:	e0bff917 	ldw	r2,-28(fp)
  80dfc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80dfc8:	e0bff717 	ldw	r2,-36(fp)
}
  80dfcc:	e037883a 	mov	sp,fp
  80dfd0:	dfc00117 	ldw	ra,4(sp)
  80dfd4:	df000017 	ldw	fp,0(sp)
  80dfd8:	dec00204 	addi	sp,sp,8
  80dfdc:	f800283a 	ret

0080dfe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dfe0:	defffe04 	addi	sp,sp,-8
  80dfe4:	dfc00115 	stw	ra,4(sp)
  80dfe8:	df000015 	stw	fp,0(sp)
  80dfec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dff0:	d0a02717 	ldw	r2,-32612(gp)
  80dff4:	10000326 	beq	r2,zero,80e004 <alt_get_errno+0x24>
  80dff8:	d0a02717 	ldw	r2,-32612(gp)
  80dffc:	103ee83a 	callr	r2
  80e000:	00000106 	br	80e008 <alt_get_errno+0x28>
  80e004:	d0a05b04 	addi	r2,gp,-32404
}
  80e008:	e037883a 	mov	sp,fp
  80e00c:	dfc00117 	ldw	ra,4(sp)
  80e010:	df000017 	ldw	fp,0(sp)
  80e014:	dec00204 	addi	sp,sp,8
  80e018:	f800283a 	ret

0080e01c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e01c:	deffed04 	addi	sp,sp,-76
  80e020:	dfc01215 	stw	ra,72(sp)
  80e024:	df001115 	stw	fp,68(sp)
  80e028:	df001104 	addi	fp,sp,68
  80e02c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e030:	e0bfff17 	ldw	r2,-4(fp)
  80e034:	10000816 	blt	r2,zero,80e058 <isatty+0x3c>
  80e038:	01400304 	movi	r5,12
  80e03c:	e13fff17 	ldw	r4,-4(fp)
  80e040:	080b2400 	call	80b240 <__mulsi3>
  80e044:	1007883a 	mov	r3,r2
  80e048:	008020b4 	movhi	r2,130
  80e04c:	10aca204 	addi	r2,r2,-19832
  80e050:	1885883a 	add	r2,r3,r2
  80e054:	00000106 	br	80e05c <isatty+0x40>
  80e058:	0005883a 	mov	r2,zero
  80e05c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80e060:	e0bfef17 	ldw	r2,-68(fp)
  80e064:	10000e26 	beq	r2,zero,80e0a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e068:	e0bfef17 	ldw	r2,-68(fp)
  80e06c:	10800017 	ldw	r2,0(r2)
  80e070:	10800817 	ldw	r2,32(r2)
  80e074:	1000021e 	bne	r2,zero,80e080 <isatty+0x64>
    {
      return 1;
  80e078:	00800044 	movi	r2,1
  80e07c:	00000d06 	br	80e0b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e080:	e0bff004 	addi	r2,fp,-64
  80e084:	100b883a 	mov	r5,r2
  80e088:	e13fff17 	ldw	r4,-4(fp)
  80e08c:	080dc880 	call	80dc88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e090:	e0bff117 	ldw	r2,-60(fp)
  80e094:	10880020 	cmpeqi	r2,r2,8192
  80e098:	10803fcc 	andi	r2,r2,255
  80e09c:	00000506 	br	80e0b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e0a0:	080dfe00 	call	80dfe0 <alt_get_errno>
  80e0a4:	1007883a 	mov	r3,r2
  80e0a8:	00801444 	movi	r2,81
  80e0ac:	18800015 	stw	r2,0(r3)
    return 0;
  80e0b0:	0005883a 	mov	r2,zero
  }
}
  80e0b4:	e037883a 	mov	sp,fp
  80e0b8:	dfc00117 	ldw	ra,4(sp)
  80e0bc:	df000017 	ldw	fp,0(sp)
  80e0c0:	dec00204 	addi	sp,sp,8
  80e0c4:	f800283a 	ret

0080e0c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e0c8:	defffe04 	addi	sp,sp,-8
  80e0cc:	dfc00115 	stw	ra,4(sp)
  80e0d0:	df000015 	stw	fp,0(sp)
  80e0d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e0d8:	d0a02717 	ldw	r2,-32612(gp)
  80e0dc:	10000326 	beq	r2,zero,80e0ec <alt_get_errno+0x24>
  80e0e0:	d0a02717 	ldw	r2,-32612(gp)
  80e0e4:	103ee83a 	callr	r2
  80e0e8:	00000106 	br	80e0f0 <alt_get_errno+0x28>
  80e0ec:	d0a05b04 	addi	r2,gp,-32404
}
  80e0f0:	e037883a 	mov	sp,fp
  80e0f4:	dfc00117 	ldw	ra,4(sp)
  80e0f8:	df000017 	ldw	fp,0(sp)
  80e0fc:	dec00204 	addi	sp,sp,8
  80e100:	f800283a 	ret

0080e104 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e104:	defff904 	addi	sp,sp,-28
  80e108:	dfc00615 	stw	ra,24(sp)
  80e10c:	df000515 	stw	fp,20(sp)
  80e110:	df000504 	addi	fp,sp,20
  80e114:	e13ffd15 	stw	r4,-12(fp)
  80e118:	e17ffe15 	stw	r5,-8(fp)
  80e11c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e120:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e124:	e0bffd17 	ldw	r2,-12(fp)
  80e128:	10000816 	blt	r2,zero,80e14c <lseek+0x48>
  80e12c:	01400304 	movi	r5,12
  80e130:	e13ffd17 	ldw	r4,-12(fp)
  80e134:	080b2400 	call	80b240 <__mulsi3>
  80e138:	1007883a 	mov	r3,r2
  80e13c:	008020b4 	movhi	r2,130
  80e140:	10aca204 	addi	r2,r2,-19832
  80e144:	1885883a 	add	r2,r3,r2
  80e148:	00000106 	br	80e150 <lseek+0x4c>
  80e14c:	0005883a 	mov	r2,zero
  80e150:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80e154:	e0bffc17 	ldw	r2,-16(fp)
  80e158:	10001026 	beq	r2,zero,80e19c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e15c:	e0bffc17 	ldw	r2,-16(fp)
  80e160:	10800017 	ldw	r2,0(r2)
  80e164:	10800717 	ldw	r2,28(r2)
  80e168:	10000926 	beq	r2,zero,80e190 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e16c:	e0bffc17 	ldw	r2,-16(fp)
  80e170:	10800017 	ldw	r2,0(r2)
  80e174:	10800717 	ldw	r2,28(r2)
  80e178:	e1bfff17 	ldw	r6,-4(fp)
  80e17c:	e17ffe17 	ldw	r5,-8(fp)
  80e180:	e13ffc17 	ldw	r4,-16(fp)
  80e184:	103ee83a 	callr	r2
  80e188:	e0bffb15 	stw	r2,-20(fp)
  80e18c:	00000506 	br	80e1a4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e190:	00bfde84 	movi	r2,-134
  80e194:	e0bffb15 	stw	r2,-20(fp)
  80e198:	00000206 	br	80e1a4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e19c:	00bfebc4 	movi	r2,-81
  80e1a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80e1a4:	e0bffb17 	ldw	r2,-20(fp)
  80e1a8:	1000070e 	bge	r2,zero,80e1c8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  80e1ac:	080e0c80 	call	80e0c8 <alt_get_errno>
  80e1b0:	1007883a 	mov	r3,r2
  80e1b4:	e0bffb17 	ldw	r2,-20(fp)
  80e1b8:	0085c83a 	sub	r2,zero,r2
  80e1bc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e1c0:	00bfffc4 	movi	r2,-1
  80e1c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80e1c8:	e0bffb17 	ldw	r2,-20(fp)
}
  80e1cc:	e037883a 	mov	sp,fp
  80e1d0:	dfc00117 	ldw	ra,4(sp)
  80e1d4:	df000017 	ldw	fp,0(sp)
  80e1d8:	dec00204 	addi	sp,sp,8
  80e1dc:	f800283a 	ret

0080e1e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e1e0:	defff904 	addi	sp,sp,-28
  80e1e4:	dfc00615 	stw	ra,24(sp)
  80e1e8:	df000515 	stw	fp,20(sp)
  80e1ec:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e1f0:	0009883a 	mov	r4,zero
  80e1f4:	08161880 	call	816188 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80e1f8:	080f1cc0 	call	80f1cc <OSInit>
  80e1fc:	01000044 	movi	r4,1
  80e200:	0813b280 	call	813b28 <OSSemCreate>
  80e204:	d0a06215 	stw	r2,-32376(gp)
  80e208:	01000044 	movi	r4,1
  80e20c:	0813b280 	call	813b28 <OSSemCreate>
  80e210:	d0a06415 	stw	r2,-32368(gp)
  80e214:	d0a05c04 	addi	r2,gp,-32400
  80e218:	e0bffc15 	stw	r2,-16(fp)
  80e21c:	00800044 	movi	r2,1
  80e220:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80e224:	e0bffd0b 	ldhu	r2,-12(fp)
  80e228:	1009883a 	mov	r4,r2
  80e22c:	0813b280 	call	813b28 <OSSemCreate>
  80e230:	1007883a 	mov	r3,r2
  80e234:	e0bffc17 	ldw	r2,-16(fp)
  80e238:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e23c:	08161c00 	call	8161c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e240:	018020b4 	movhi	r6,130
  80e244:	31aa0c04 	addi	r6,r6,-22480
  80e248:	014020b4 	movhi	r5,130
  80e24c:	296a0c04 	addi	r5,r5,-22480
  80e250:	010020b4 	movhi	r4,130
  80e254:	212a0c04 	addi	r4,r4,-22480
  80e258:	08192240 	call	819224 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e25c:	0818f280 	call	818f28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e260:	010020b4 	movhi	r4,130
  80e264:	2123e204 	addi	r4,r4,-28792
  80e268:	0819ecc0 	call	819ecc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e26c:	d0a05e17 	ldw	r2,-32392(gp)
  80e270:	d0e05f17 	ldw	r3,-32388(gp)
  80e274:	d1206017 	ldw	r4,-32384(gp)
  80e278:	200d883a 	mov	r6,r4
  80e27c:	180b883a 	mov	r5,r3
  80e280:	1009883a 	mov	r4,r2
  80e284:	08006100 	call	800610 <main>
  80e288:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  80e28c:	01000044 	movi	r4,1
  80e290:	080db480 	call	80db48 <close>
  exit (result);
  80e294:	e13ffb17 	ldw	r4,-20(fp)
  80e298:	0819ee00 	call	819ee0 <exit>

0080e29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e29c:	defffe04 	addi	sp,sp,-8
  80e2a0:	dfc00115 	stw	ra,4(sp)
  80e2a4:	df000015 	stw	fp,0(sp)
  80e2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e2ac:	d0a02717 	ldw	r2,-32612(gp)
  80e2b0:	10000326 	beq	r2,zero,80e2c0 <alt_get_errno+0x24>
  80e2b4:	d0a02717 	ldw	r2,-32612(gp)
  80e2b8:	103ee83a 	callr	r2
  80e2bc:	00000106 	br	80e2c4 <alt_get_errno+0x28>
  80e2c0:	d0a05b04 	addi	r2,gp,-32404
}
  80e2c4:	e037883a 	mov	sp,fp
  80e2c8:	dfc00117 	ldw	ra,4(sp)
  80e2cc:	df000017 	ldw	fp,0(sp)
  80e2d0:	dec00204 	addi	sp,sp,8
  80e2d4:	f800283a 	ret

0080e2d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e2d8:	defff904 	addi	sp,sp,-28
  80e2dc:	dfc00615 	stw	ra,24(sp)
  80e2e0:	df000515 	stw	fp,20(sp)
  80e2e4:	df000504 	addi	fp,sp,20
  80e2e8:	e13ffd15 	stw	r4,-12(fp)
  80e2ec:	e17ffe15 	stw	r5,-8(fp)
  80e2f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e2f4:	e0bffd17 	ldw	r2,-12(fp)
  80e2f8:	10000816 	blt	r2,zero,80e31c <read+0x44>
  80e2fc:	01400304 	movi	r5,12
  80e300:	e13ffd17 	ldw	r4,-12(fp)
  80e304:	080b2400 	call	80b240 <__mulsi3>
  80e308:	1007883a 	mov	r3,r2
  80e30c:	008020b4 	movhi	r2,130
  80e310:	10aca204 	addi	r2,r2,-19832
  80e314:	1885883a 	add	r2,r3,r2
  80e318:	00000106 	br	80e320 <read+0x48>
  80e31c:	0005883a 	mov	r2,zero
  80e320:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e324:	e0bffb17 	ldw	r2,-20(fp)
  80e328:	10002226 	beq	r2,zero,80e3b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e32c:	e0bffb17 	ldw	r2,-20(fp)
  80e330:	10800217 	ldw	r2,8(r2)
  80e334:	108000cc 	andi	r2,r2,3
  80e338:	10800060 	cmpeqi	r2,r2,1
  80e33c:	1000181e 	bne	r2,zero,80e3a0 <read+0xc8>
        (fd->dev->read))
  80e340:	e0bffb17 	ldw	r2,-20(fp)
  80e344:	10800017 	ldw	r2,0(r2)
  80e348:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e34c:	10001426 	beq	r2,zero,80e3a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e350:	e0bffb17 	ldw	r2,-20(fp)
  80e354:	10800017 	ldw	r2,0(r2)
  80e358:	10800517 	ldw	r2,20(r2)
  80e35c:	e0ffff17 	ldw	r3,-4(fp)
  80e360:	180d883a 	mov	r6,r3
  80e364:	e17ffe17 	ldw	r5,-8(fp)
  80e368:	e13ffb17 	ldw	r4,-20(fp)
  80e36c:	103ee83a 	callr	r2
  80e370:	e0bffc15 	stw	r2,-16(fp)
  80e374:	e0bffc17 	ldw	r2,-16(fp)
  80e378:	1000070e 	bge	r2,zero,80e398 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  80e37c:	080e29c0 	call	80e29c <alt_get_errno>
  80e380:	1007883a 	mov	r3,r2
  80e384:	e0bffc17 	ldw	r2,-16(fp)
  80e388:	0085c83a 	sub	r2,zero,r2
  80e38c:	18800015 	stw	r2,0(r3)
          return -1;
  80e390:	00bfffc4 	movi	r2,-1
  80e394:	00000c06 	br	80e3c8 <read+0xf0>
        }
        return rval;
  80e398:	e0bffc17 	ldw	r2,-16(fp)
  80e39c:	00000a06 	br	80e3c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e3a0:	080e29c0 	call	80e29c <alt_get_errno>
  80e3a4:	1007883a 	mov	r3,r2
  80e3a8:	00800344 	movi	r2,13
  80e3ac:	18800015 	stw	r2,0(r3)
  80e3b0:	00000406 	br	80e3c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e3b4:	080e29c0 	call	80e29c <alt_get_errno>
  80e3b8:	1007883a 	mov	r3,r2
  80e3bc:	00801444 	movi	r2,81
  80e3c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e3c4:	00bfffc4 	movi	r2,-1
}
  80e3c8:	e037883a 	mov	sp,fp
  80e3cc:	dfc00117 	ldw	ra,4(sp)
  80e3d0:	df000017 	ldw	fp,0(sp)
  80e3d4:	dec00204 	addi	sp,sp,8
  80e3d8:	f800283a 	ret

0080e3dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e3dc:	defffc04 	addi	sp,sp,-16
  80e3e0:	dfc00315 	stw	ra,12(sp)
  80e3e4:	df000215 	stw	fp,8(sp)
  80e3e8:	dc000115 	stw	r16,4(sp)
  80e3ec:	df000204 	addi	fp,sp,8
  80e3f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80e3f4:	e0bffe17 	ldw	r2,-8(fp)
  80e3f8:	108000d0 	cmplti	r2,r2,3
  80e3fc:	1000111e 	bne	r2,zero,80e444 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e400:	040020b4 	movhi	r16,130
  80e404:	842ca204 	addi	r16,r16,-19832
  80e408:	e0bffe17 	ldw	r2,-8(fp)
  80e40c:	01400304 	movi	r5,12
  80e410:	1009883a 	mov	r4,r2
  80e414:	080b2400 	call	80b240 <__mulsi3>
  80e418:	8085883a 	add	r2,r16,r2
  80e41c:	10800204 	addi	r2,r2,8
  80e420:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e424:	040020b4 	movhi	r16,130
  80e428:	842ca204 	addi	r16,r16,-19832
  80e42c:	e0bffe17 	ldw	r2,-8(fp)
  80e430:	01400304 	movi	r5,12
  80e434:	1009883a 	mov	r4,r2
  80e438:	080b2400 	call	80b240 <__mulsi3>
  80e43c:	8085883a 	add	r2,r16,r2
  80e440:	10000015 	stw	zero,0(r2)
  }
}
  80e444:	0001883a 	nop
  80e448:	e6ffff04 	addi	sp,fp,-4
  80e44c:	dfc00217 	ldw	ra,8(sp)
  80e450:	df000117 	ldw	fp,4(sp)
  80e454:	dc000017 	ldw	r16,0(sp)
  80e458:	dec00304 	addi	sp,sp,12
  80e45c:	f800283a 	ret

0080e460 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e460:	defff904 	addi	sp,sp,-28
  80e464:	df000615 	stw	fp,24(sp)
  80e468:	df000604 	addi	fp,sp,24
  80e46c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e470:	0005303a 	rdctl	r2,status
  80e474:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e478:	e0fffe17 	ldw	r3,-8(fp)
  80e47c:	00bfff84 	movi	r2,-2
  80e480:	1884703a 	and	r2,r3,r2
  80e484:	1001703a 	wrctl	status,r2
  
  return context;
  80e488:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e48c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e490:	d0a02917 	ldw	r2,-32604(gp)
  80e494:	10c000c4 	addi	r3,r2,3
  80e498:	00bfff04 	movi	r2,-4
  80e49c:	1884703a 	and	r2,r3,r2
  80e4a0:	d0a02915 	stw	r2,-32604(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e4a4:	d0e02917 	ldw	r3,-32604(gp)
  80e4a8:	e0bfff17 	ldw	r2,-4(fp)
  80e4ac:	1887883a 	add	r3,r3,r2
  80e4b0:	00804034 	movhi	r2,256
  80e4b4:	10800004 	addi	r2,r2,0
  80e4b8:	10c0062e 	bgeu	r2,r3,80e4d4 <sbrk+0x74>
  80e4bc:	e0bffb17 	ldw	r2,-20(fp)
  80e4c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e4c4:	e0bffa17 	ldw	r2,-24(fp)
  80e4c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e4cc:	00bfffc4 	movi	r2,-1
  80e4d0:	00000b06 	br	80e500 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e4d4:	d0a02917 	ldw	r2,-32604(gp)
  80e4d8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e4dc:	d0e02917 	ldw	r3,-32604(gp)
  80e4e0:	e0bfff17 	ldw	r2,-4(fp)
  80e4e4:	1885883a 	add	r2,r3,r2
  80e4e8:	d0a02915 	stw	r2,-32604(gp)
  80e4ec:	e0bffb17 	ldw	r2,-20(fp)
  80e4f0:	e0bffc15 	stw	r2,-16(fp)
  80e4f4:	e0bffc17 	ldw	r2,-16(fp)
  80e4f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e4fc:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e500:	e037883a 	mov	sp,fp
  80e504:	df000017 	ldw	fp,0(sp)
  80e508:	dec00104 	addi	sp,sp,4
  80e50c:	f800283a 	ret

0080e510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e510:	defffe04 	addi	sp,sp,-8
  80e514:	dfc00115 	stw	ra,4(sp)
  80e518:	df000015 	stw	fp,0(sp)
  80e51c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e520:	d0a02717 	ldw	r2,-32612(gp)
  80e524:	10000326 	beq	r2,zero,80e534 <alt_get_errno+0x24>
  80e528:	d0a02717 	ldw	r2,-32612(gp)
  80e52c:	103ee83a 	callr	r2
  80e530:	00000106 	br	80e538 <alt_get_errno+0x28>
  80e534:	d0a05b04 	addi	r2,gp,-32404
}
  80e538:	e037883a 	mov	sp,fp
  80e53c:	dfc00117 	ldw	ra,4(sp)
  80e540:	df000017 	ldw	fp,0(sp)
  80e544:	dec00204 	addi	sp,sp,8
  80e548:	f800283a 	ret

0080e54c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e54c:	defff904 	addi	sp,sp,-28
  80e550:	dfc00615 	stw	ra,24(sp)
  80e554:	df000515 	stw	fp,20(sp)
  80e558:	df000504 	addi	fp,sp,20
  80e55c:	e13ffd15 	stw	r4,-12(fp)
  80e560:	e17ffe15 	stw	r5,-8(fp)
  80e564:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e568:	e0bffd17 	ldw	r2,-12(fp)
  80e56c:	10000816 	blt	r2,zero,80e590 <write+0x44>
  80e570:	01400304 	movi	r5,12
  80e574:	e13ffd17 	ldw	r4,-12(fp)
  80e578:	080b2400 	call	80b240 <__mulsi3>
  80e57c:	1007883a 	mov	r3,r2
  80e580:	008020b4 	movhi	r2,130
  80e584:	10aca204 	addi	r2,r2,-19832
  80e588:	1885883a 	add	r2,r3,r2
  80e58c:	00000106 	br	80e594 <write+0x48>
  80e590:	0005883a 	mov	r2,zero
  80e594:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e598:	e0bffb17 	ldw	r2,-20(fp)
  80e59c:	10002126 	beq	r2,zero,80e624 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e5a0:	e0bffb17 	ldw	r2,-20(fp)
  80e5a4:	10800217 	ldw	r2,8(r2)
  80e5a8:	108000cc 	andi	r2,r2,3
  80e5ac:	10001826 	beq	r2,zero,80e610 <write+0xc4>
  80e5b0:	e0bffb17 	ldw	r2,-20(fp)
  80e5b4:	10800017 	ldw	r2,0(r2)
  80e5b8:	10800617 	ldw	r2,24(r2)
  80e5bc:	10001426 	beq	r2,zero,80e610 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e5c0:	e0bffb17 	ldw	r2,-20(fp)
  80e5c4:	10800017 	ldw	r2,0(r2)
  80e5c8:	10800617 	ldw	r2,24(r2)
  80e5cc:	e0ffff17 	ldw	r3,-4(fp)
  80e5d0:	180d883a 	mov	r6,r3
  80e5d4:	e17ffe17 	ldw	r5,-8(fp)
  80e5d8:	e13ffb17 	ldw	r4,-20(fp)
  80e5dc:	103ee83a 	callr	r2
  80e5e0:	e0bffc15 	stw	r2,-16(fp)
  80e5e4:	e0bffc17 	ldw	r2,-16(fp)
  80e5e8:	1000070e 	bge	r2,zero,80e608 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  80e5ec:	080e5100 	call	80e510 <alt_get_errno>
  80e5f0:	1007883a 	mov	r3,r2
  80e5f4:	e0bffc17 	ldw	r2,-16(fp)
  80e5f8:	0085c83a 	sub	r2,zero,r2
  80e5fc:	18800015 	stw	r2,0(r3)
        return -1;
  80e600:	00bfffc4 	movi	r2,-1
  80e604:	00000c06 	br	80e638 <write+0xec>
      }
      return rval;
  80e608:	e0bffc17 	ldw	r2,-16(fp)
  80e60c:	00000a06 	br	80e638 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e610:	080e5100 	call	80e510 <alt_get_errno>
  80e614:	1007883a 	mov	r3,r2
  80e618:	00800344 	movi	r2,13
  80e61c:	18800015 	stw	r2,0(r3)
  80e620:	00000406 	br	80e634 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e624:	080e5100 	call	80e510 <alt_get_errno>
  80e628:	1007883a 	mov	r3,r2
  80e62c:	00801444 	movi	r2,81
  80e630:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e634:	00bfffc4 	movi	r2,-1
}
  80e638:	e037883a 	mov	sp,fp
  80e63c:	dfc00117 	ldw	ra,4(sp)
  80e640:	df000017 	ldw	fp,0(sp)
  80e644:	dec00204 	addi	sp,sp,8
  80e648:	f800283a 	ret

0080e64c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80e64c:	deffdf04 	addi	sp,sp,-132
  80e650:	dfc02015 	stw	ra,128(sp)
  80e654:	df001f15 	stw	fp,124(sp)
  80e658:	df001f04 	addi	fp,sp,124
  80e65c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80e660:	e0bfe204 	addi	r2,fp,-120
  80e664:	100b883a 	mov	r5,r2
  80e668:	01003fc4 	movi	r4,255
  80e66c:	0815ab00 	call	815ab0 <OSTaskQuery>
  80e670:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80e674:	e0bffe83 	ldbu	r2,-6(fp)
  80e678:	10803fcc 	andi	r2,r2,255
  80e67c:	10001e1e 	bne	r2,zero,80e6f8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  80e680:	e0bfee83 	ldbu	r2,-70(fp)
  80e684:	10803fcc 	andi	r2,r2,255
  80e688:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80e68c:	d0a06217 	ldw	r2,-32376(gp)
  80e690:	e0fffd04 	addi	r3,fp,-12
  80e694:	180b883a 	mov	r5,r3
  80e698:	1009883a 	mov	r4,r2
  80e69c:	08142c80 	call	8142c8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80e6a0:	e0bffe43 	ldbu	r2,-7(fp)
  80e6a4:	10803fcc 	andi	r2,r2,255
  80e6a8:	10000726 	beq	r2,zero,80e6c8 <__env_lock+0x7c>
  80e6ac:	d0a02a17 	ldw	r2,-32600(gp)
  80e6b0:	e0ffe117 	ldw	r3,-124(fp)
  80e6b4:	1880041e 	bne	r3,r2,80e6c8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  80e6b8:	d0a06117 	ldw	r2,-32380(gp)
  80e6bc:	10800044 	addi	r2,r2,1
  80e6c0:	d0a06115 	stw	r2,-32380(gp)
  80e6c4:	00000a06 	br	80e6f0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80e6c8:	d0a06217 	ldw	r2,-32376(gp)
  80e6cc:	e0fffe84 	addi	r3,fp,-6
  80e6d0:	180d883a 	mov	r6,r3
  80e6d4:	000b883a 	mov	r5,zero
  80e6d8:	1009883a 	mov	r4,r2
  80e6dc:	0813e400 	call	813e40 <OSSemPend>
    locks  = 1;
  80e6e0:	00800044 	movi	r2,1
  80e6e4:	d0a06115 	stw	r2,-32380(gp)
    lockid = id;
  80e6e8:	e0bfe117 	ldw	r2,-124(fp)
  80e6ec:	d0a02a15 	stw	r2,-32600(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  80e6f0:	0001883a 	nop
  80e6f4:	00000106 	br	80e6fc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  80e6f8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80e6fc:	e037883a 	mov	sp,fp
  80e700:	dfc00117 	ldw	ra,4(sp)
  80e704:	df000017 	ldw	fp,0(sp)
  80e708:	dec00204 	addi	sp,sp,8
  80e70c:	f800283a 	ret

0080e710 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80e710:	defffd04 	addi	sp,sp,-12
  80e714:	dfc00215 	stw	ra,8(sp)
  80e718:	df000115 	stw	fp,4(sp)
  80e71c:	df000104 	addi	fp,sp,4
  80e720:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80e724:	d0a06117 	ldw	r2,-32380(gp)
  80e728:	10000b26 	beq	r2,zero,80e758 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80e72c:	d0a06117 	ldw	r2,-32380(gp)
  80e730:	10bfffc4 	addi	r2,r2,-1
  80e734:	d0a06115 	stw	r2,-32380(gp)
  80e738:	d0a06117 	ldw	r2,-32380(gp)
  80e73c:	1000071e 	bne	r2,zero,80e75c <__env_unlock+0x4c>
  {
    lockid = -1;
  80e740:	00bfffc4 	movi	r2,-1
  80e744:	d0a02a15 	stw	r2,-32600(gp)
    OSSemPost( alt_envsem );
  80e748:	d0a06217 	ldw	r2,-32376(gp)
  80e74c:	1009883a 	mov	r4,r2
  80e750:	08141b80 	call	8141b8 <OSSemPost>
  80e754:	00000106 	br	80e75c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  80e758:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80e75c:	e037883a 	mov	sp,fp
  80e760:	dfc00117 	ldw	ra,4(sp)
  80e764:	df000017 	ldw	fp,0(sp)
  80e768:	dec00204 	addi	sp,sp,8
  80e76c:	f800283a 	ret

0080e770 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80e770:	deffdb04 	addi	sp,sp,-148
  80e774:	dfc02415 	stw	ra,144(sp)
  80e778:	df002315 	stw	fp,140(sp)
  80e77c:	df002304 	addi	fp,sp,140
  80e780:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e784:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80e788:	d0a06543 	ldbu	r2,-32363(gp)
  80e78c:	10803fcc 	andi	r2,r2,255
  80e790:	10800060 	cmpeqi	r2,r2,1
  80e794:	10003626 	beq	r2,zero,80e870 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80e798:	e0bfe204 	addi	r2,fp,-120
  80e79c:	100b883a 	mov	r5,r2
  80e7a0:	01003fc4 	movi	r4,255
  80e7a4:	0815ab00 	call	815ab0 <OSTaskQuery>
  80e7a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80e7ac:	e0bffe83 	ldbu	r2,-6(fp)
  80e7b0:	10803fcc 	andi	r2,r2,255
  80e7b4:	1000301e 	bne	r2,zero,80e878 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  80e7b8:	e0bfee83 	ldbu	r2,-70(fp)
  80e7bc:	10803fcc 	andi	r2,r2,255
  80e7c0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80e7c4:	d0a06417 	ldw	r2,-32368(gp)
  80e7c8:	e0fffd04 	addi	r3,fp,-12
  80e7cc:	180b883a 	mov	r5,r3
  80e7d0:	1009883a 	mov	r4,r2
  80e7d4:	08142c80 	call	8142c8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e7d8:	0005303a 	rdctl	r2,status
  80e7dc:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e7e0:	e0ffe117 	ldw	r3,-124(fp)
  80e7e4:	00bfff84 	movi	r2,-2
  80e7e8:	1884703a 	and	r2,r3,r2
  80e7ec:	1001703a 	wrctl	status,r2
  
  return context;
  80e7f0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  80e7f4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80e7f8:	e0bffd0b 	ldhu	r2,-12(fp)
  80e7fc:	10bfffcc 	andi	r2,r2,65535
  80e800:	10000b1e 	bne	r2,zero,80e830 <__malloc_lock+0xc0>
  80e804:	d0a02b17 	ldw	r2,-32596(gp)
  80e808:	e0ffde17 	ldw	r3,-136(fp)
  80e80c:	1880081e 	bne	r3,r2,80e830 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  80e810:	d0a06317 	ldw	r2,-32372(gp)
  80e814:	10800044 	addi	r2,r2,1
  80e818:	d0a06315 	stw	r2,-32372(gp)
  80e81c:	e0bfdd17 	ldw	r2,-140(fp)
  80e820:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e824:	e0bfdf17 	ldw	r2,-132(fp)
  80e828:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  80e82c:	00000e06 	br	80e868 <__malloc_lock+0xf8>
  80e830:	e0bfdd17 	ldw	r2,-140(fp)
  80e834:	e0bfe015 	stw	r2,-128(fp)
  80e838:	e0bfe017 	ldw	r2,-128(fp)
  80e83c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80e840:	d0a06417 	ldw	r2,-32368(gp)
  80e844:	e0fffe84 	addi	r3,fp,-6
  80e848:	180d883a 	mov	r6,r3
  80e84c:	000b883a 	mov	r5,zero
  80e850:	1009883a 	mov	r4,r2
  80e854:	0813e400 	call	813e40 <OSSemPend>
    locks  = 1;
  80e858:	00800044 	movi	r2,1
  80e85c:	d0a06315 	stw	r2,-32372(gp)
    lockid = id;
  80e860:	e0bfde17 	ldw	r2,-136(fp)
  80e864:	d0a02b15 	stw	r2,-32596(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  80e868:	0001883a 	nop
  80e86c:	00000306 	br	80e87c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  80e870:	0001883a 	nop
  80e874:	00000106 	br	80e87c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  80e878:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80e87c:	e037883a 	mov	sp,fp
  80e880:	dfc00117 	ldw	ra,4(sp)
  80e884:	df000017 	ldw	fp,0(sp)
  80e888:	dec00204 	addi	sp,sp,8
  80e88c:	f800283a 	ret

0080e890 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e890:	defff804 	addi	sp,sp,-32
  80e894:	dfc00715 	stw	ra,28(sp)
  80e898:	df000615 	stw	fp,24(sp)
  80e89c:	df000604 	addi	fp,sp,24
  80e8a0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e8a4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80e8a8:	d0a06543 	ldbu	r2,-32363(gp)
  80e8ac:	10803fcc 	andi	r2,r2,255
  80e8b0:	10800060 	cmpeqi	r2,r2,1
  80e8b4:	10002326 	beq	r2,zero,80e944 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e8b8:	0005303a 	rdctl	r2,status
  80e8bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e8c0:	e0fffe17 	ldw	r3,-8(fp)
  80e8c4:	00bfff84 	movi	r2,-2
  80e8c8:	1884703a 	and	r2,r3,r2
  80e8cc:	1001703a 	wrctl	status,r2
  
  return context;
  80e8d0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  80e8d4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  80e8d8:	d0a06317 	ldw	r2,-32372(gp)
  80e8dc:	1000051e 	bne	r2,zero,80e8f4 <__malloc_unlock+0x64>
  80e8e0:	e0bffa17 	ldw	r2,-24(fp)
  80e8e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e8e8:	e0bffb17 	ldw	r2,-20(fp)
  80e8ec:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80e8f0:	00001506 	br	80e948 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80e8f4:	d0a06317 	ldw	r2,-32372(gp)
  80e8f8:	10bfffc4 	addi	r2,r2,-1
  80e8fc:	d0a06315 	stw	r2,-32372(gp)
  80e900:	d0a06317 	ldw	r2,-32372(gp)
  80e904:	10000a1e 	bne	r2,zero,80e930 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  80e908:	00bfffc4 	movi	r2,-1
  80e90c:	d0a02b15 	stw	r2,-32596(gp)
  80e910:	e0bffa17 	ldw	r2,-24(fp)
  80e914:	e0bffc15 	stw	r2,-16(fp)
  80e918:	e0bffc17 	ldw	r2,-16(fp)
  80e91c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80e920:	d0a06417 	ldw	r2,-32368(gp)
  80e924:	1009883a 	mov	r4,r2
  80e928:	08141b80 	call	8141b8 <OSSemPost>
  80e92c:	00000606 	br	80e948 <__malloc_unlock+0xb8>
  80e930:	e0bffa17 	ldw	r2,-24(fp)
  80e934:	e0bffd15 	stw	r2,-12(fp)
  80e938:	e0bffd17 	ldw	r2,-12(fp)
  80e93c:	1001703a 	wrctl	status,r2
  80e940:	00000106 	br	80e948 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  80e944:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80e948:	e037883a 	mov	sp,fp
  80e94c:	dfc00117 	ldw	ra,4(sp)
  80e950:	df000017 	ldw	fp,0(sp)
  80e954:	dec00204 	addi	sp,sp,8
  80e958:	f800283a 	ret

0080e95c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80e95c:	defff704 	addi	sp,sp,-36
  80e960:	dfc00815 	stw	ra,32(sp)
  80e964:	df000715 	stw	fp,28(sp)
  80e968:	df000704 	addi	fp,sp,28
  80e96c:	e13ffd15 	stw	r4,-12(fp)
  80e970:	e17ffe15 	stw	r5,-8(fp)
  80e974:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e978:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80e97c:	e0bfff17 	ldw	r2,-4(fp)
  80e980:	1000021e 	bne	r2,zero,80e98c <OSEventNameGet+0x30>
        return (0);
  80e984:	0005883a 	mov	r2,zero
  80e988:	00003706 	br	80ea68 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80e98c:	e0bffd17 	ldw	r2,-12(fp)
  80e990:	1000051e 	bne	r2,zero,80e9a8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80e994:	e0bfff17 	ldw	r2,-4(fp)
  80e998:	00c00104 	movi	r3,4
  80e99c:	10c00005 	stb	r3,0(r2)
        return (0);
  80e9a0:	0005883a 	mov	r2,zero
  80e9a4:	00003006 	br	80ea68 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80e9a8:	e0bffe17 	ldw	r2,-8(fp)
  80e9ac:	1000051e 	bne	r2,zero,80e9c4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  80e9b0:	e0bfff17 	ldw	r2,-4(fp)
  80e9b4:	00c00304 	movi	r3,12
  80e9b8:	10c00005 	stb	r3,0(r2)
        return (0);
  80e9bc:	0005883a 	mov	r2,zero
  80e9c0:	00002906 	br	80ea68 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80e9c4:	d0a07303 	ldbu	r2,-32308(gp)
  80e9c8:	10803fcc 	andi	r2,r2,255
  80e9cc:	10000526 	beq	r2,zero,80e9e4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  80e9d0:	e0bfff17 	ldw	r2,-4(fp)
  80e9d4:	00c00444 	movi	r3,17
  80e9d8:	10c00005 	stb	r3,0(r2)
        return (0);
  80e9dc:	0005883a 	mov	r2,zero
  80e9e0:	00002106 	br	80ea68 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  80e9e4:	e0bffd17 	ldw	r2,-12(fp)
  80e9e8:	10800003 	ldbu	r2,0(r2)
  80e9ec:	10803fcc 	andi	r2,r2,255
  80e9f0:	10bfffc4 	addi	r2,r2,-1
  80e9f4:	10800128 	cmpgeui	r2,r2,4
  80e9f8:	10000526 	beq	r2,zero,80ea10 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80e9fc:	e0bfff17 	ldw	r2,-4(fp)
  80ea00:	00c00044 	movi	r3,1
  80ea04:	10c00005 	stb	r3,0(r2)
             return (0);
  80ea08:	0005883a 	mov	r2,zero
  80ea0c:	00001606 	br	80ea68 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80ea10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea14:	0005303a 	rdctl	r2,status
  80ea18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea1c:	e0fffb17 	ldw	r3,-20(fp)
  80ea20:	00bfff84 	movi	r2,-2
  80ea24:	1884703a 	and	r2,r3,r2
  80ea28:	1001703a 	wrctl	status,r2
  
  return context;
  80ea2c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80ea30:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80ea34:	e0bffd17 	ldw	r2,-12(fp)
  80ea38:	10800384 	addi	r2,r2,14
  80ea3c:	100b883a 	mov	r5,r2
  80ea40:	e13ffe17 	ldw	r4,-8(fp)
  80ea44:	08103e00 	call	8103e0 <OS_StrCopy>
  80ea48:	e0bffa05 	stb	r2,-24(fp)
  80ea4c:	e0bff917 	ldw	r2,-28(fp)
  80ea50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea54:	e0bffc17 	ldw	r2,-16(fp)
  80ea58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ea5c:	e0bfff17 	ldw	r2,-4(fp)
  80ea60:	10000005 	stb	zero,0(r2)
    return (len);
  80ea64:	e0bffa03 	ldbu	r2,-24(fp)
}
  80ea68:	e037883a 	mov	sp,fp
  80ea6c:	dfc00117 	ldw	ra,4(sp)
  80ea70:	df000017 	ldw	fp,0(sp)
  80ea74:	dec00204 	addi	sp,sp,8
  80ea78:	f800283a 	ret

0080ea7c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80ea7c:	defff604 	addi	sp,sp,-40
  80ea80:	dfc00915 	stw	ra,36(sp)
  80ea84:	df000815 	stw	fp,32(sp)
  80ea88:	df000804 	addi	fp,sp,32
  80ea8c:	e13ffd15 	stw	r4,-12(fp)
  80ea90:	e17ffe15 	stw	r5,-8(fp)
  80ea94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ea98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ea9c:	e0bfff17 	ldw	r2,-4(fp)
  80eaa0:	10004026 	beq	r2,zero,80eba4 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80eaa4:	e0bffd17 	ldw	r2,-12(fp)
  80eaa8:	1000041e 	bne	r2,zero,80eabc <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80eaac:	e0bfff17 	ldw	r2,-4(fp)
  80eab0:	00c00104 	movi	r3,4
  80eab4:	10c00005 	stb	r3,0(r2)
        return;
  80eab8:	00003b06 	br	80eba8 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80eabc:	e0bffe17 	ldw	r2,-8(fp)
  80eac0:	1000041e 	bne	r2,zero,80ead4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  80eac4:	e0bfff17 	ldw	r2,-4(fp)
  80eac8:	00c00304 	movi	r3,12
  80eacc:	10c00005 	stb	r3,0(r2)
        return;
  80ead0:	00003506 	br	80eba8 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ead4:	d0a07303 	ldbu	r2,-32308(gp)
  80ead8:	10803fcc 	andi	r2,r2,255
  80eadc:	10000426 	beq	r2,zero,80eaf0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  80eae0:	e0bfff17 	ldw	r2,-4(fp)
  80eae4:	00c00484 	movi	r3,18
  80eae8:	10c00005 	stb	r3,0(r2)
        return;
  80eaec:	00002e06 	br	80eba8 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  80eaf0:	e0bffd17 	ldw	r2,-12(fp)
  80eaf4:	10800003 	ldbu	r2,0(r2)
  80eaf8:	10803fcc 	andi	r2,r2,255
  80eafc:	10bfffc4 	addi	r2,r2,-1
  80eb00:	10800128 	cmpgeui	r2,r2,4
  80eb04:	10000426 	beq	r2,zero,80eb18 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80eb08:	e0bfff17 	ldw	r2,-4(fp)
  80eb0c:	00c00044 	movi	r3,1
  80eb10:	10c00005 	stb	r3,0(r2)
             return;
  80eb14:	00002406 	br	80eba8 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80eb18:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb1c:	0005303a 	rdctl	r2,status
  80eb20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb24:	e0fffc17 	ldw	r3,-16(fp)
  80eb28:	00bfff84 	movi	r2,-2
  80eb2c:	1884703a 	and	r2,r3,r2
  80eb30:	1001703a 	wrctl	status,r2
  
  return context;
  80eb34:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80eb38:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80eb3c:	e13ffe17 	ldw	r4,-8(fp)
  80eb40:	08104540 	call	810454 <OS_StrLen>
  80eb44:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80eb48:	e0bffa03 	ldbu	r2,-24(fp)
  80eb4c:	10800830 	cmpltui	r2,r2,32
  80eb50:	1000081e 	bne	r2,zero,80eb74 <OSEventNameSet+0xf8>
  80eb54:	e0bff817 	ldw	r2,-32(fp)
  80eb58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb5c:	e0bff917 	ldw	r2,-28(fp)
  80eb60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80eb64:	e0bfff17 	ldw	r2,-4(fp)
  80eb68:	00c002c4 	movi	r3,11
  80eb6c:	10c00005 	stb	r3,0(r2)
        return;
  80eb70:	00000d06 	br	80eba8 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80eb74:	e0bffd17 	ldw	r2,-12(fp)
  80eb78:	10800384 	addi	r2,r2,14
  80eb7c:	e17ffe17 	ldw	r5,-8(fp)
  80eb80:	1009883a 	mov	r4,r2
  80eb84:	08103e00 	call	8103e0 <OS_StrCopy>
  80eb88:	e0bff817 	ldw	r2,-32(fp)
  80eb8c:	e0bffb15 	stw	r2,-20(fp)
  80eb90:	e0bffb17 	ldw	r2,-20(fp)
  80eb94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80eb98:	e0bfff17 	ldw	r2,-4(fp)
  80eb9c:	10000005 	stb	zero,0(r2)
  80eba0:	00000106 	br	80eba8 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  80eba4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80eba8:	e037883a 	mov	sp,fp
  80ebac:	dfc00117 	ldw	ra,4(sp)
  80ebb0:	df000017 	ldw	fp,0(sp)
  80ebb4:	dec00204 	addi	sp,sp,8
  80ebb8:	f800283a 	ret

0080ebbc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80ebbc:	deffed04 	addi	sp,sp,-76
  80ebc0:	dfc01215 	stw	ra,72(sp)
  80ebc4:	df001115 	stw	fp,68(sp)
  80ebc8:	df001104 	addi	fp,sp,68
  80ebcc:	e13ffc15 	stw	r4,-16(fp)
  80ebd0:	e17ffd15 	stw	r5,-12(fp)
  80ebd4:	e1bffe15 	stw	r6,-8(fp)
  80ebd8:	3805883a 	mov	r2,r7
  80ebdc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80ebe0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80ebe4:	e0800217 	ldw	r2,8(fp)
  80ebe8:	1000021e 	bne	r2,zero,80ebf4 <OSEventPendMulti+0x38>
        return (0);
  80ebec:	0005883a 	mov	r2,zero
  80ebf0:	00017106 	br	80f1b8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80ebf4:	e0bffc17 	ldw	r2,-16(fp)
  80ebf8:	1000051e 	bne	r2,zero,80ec10 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  80ebfc:	e0800217 	ldw	r2,8(fp)
  80ec00:	00c00104 	movi	r3,4
  80ec04:	10c00005 	stb	r3,0(r2)
        return (0);
  80ec08:	0005883a 	mov	r2,zero
  80ec0c:	00016a06 	br	80f1b8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80ec10:	e0bffd17 	ldw	r2,-12(fp)
  80ec14:	1000051e 	bne	r2,zero,80ec2c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  80ec18:	e0800217 	ldw	r2,8(fp)
  80ec1c:	00c00104 	movi	r3,4
  80ec20:	10c00005 	stb	r3,0(r2)
        return (0);
  80ec24:	0005883a 	mov	r2,zero
  80ec28:	00016306 	br	80f1b8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80ec2c:	e0bffe17 	ldw	r2,-8(fp)
  80ec30:	1000051e 	bne	r2,zero,80ec48 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  80ec34:	e0800217 	ldw	r2,8(fp)
  80ec38:	00c00104 	movi	r3,4
  80ec3c:	10c00005 	stb	r3,0(r2)
        return (0);
  80ec40:	0005883a 	mov	r2,zero
  80ec44:	00015c06 	br	80f1b8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80ec48:	e0bffd17 	ldw	r2,-12(fp)
  80ec4c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80ec50:	e0bffc17 	ldw	r2,-16(fp)
  80ec54:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  80ec58:	e0bfef17 	ldw	r2,-68(fp)
  80ec5c:	10800017 	ldw	r2,0(r2)
  80ec60:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  80ec64:	00001906 	br	80eccc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80ec68:	e0bff017 	ldw	r2,-64(fp)
  80ec6c:	10800003 	ldbu	r2,0(r2)
  80ec70:	10803fcc 	andi	r2,r2,255
  80ec74:	10c000a0 	cmpeqi	r3,r2,2
  80ec78:	1800091e 	bne	r3,zero,80eca0 <OSEventPendMulti+0xe4>
  80ec7c:	10c000e0 	cmpeqi	r3,r2,3
  80ec80:	1800091e 	bne	r3,zero,80eca8 <OSEventPendMulti+0xec>
  80ec84:	10800060 	cmpeqi	r2,r2,1
  80ec88:	1000091e 	bne	r2,zero,80ecb0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80ec8c:	e0800217 	ldw	r2,8(fp)
  80ec90:	00c00044 	movi	r3,1
  80ec94:	10c00005 	stb	r3,0(r2)
                 return (0);
  80ec98:	0005883a 	mov	r2,zero
  80ec9c:	00014606 	br	80f1b8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  80eca0:	0001883a 	nop
  80eca4:	00000306 	br	80ecb4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  80eca8:	0001883a 	nop
  80ecac:	00000106 	br	80ecb4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  80ecb0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  80ecb4:	e0bfef17 	ldw	r2,-68(fp)
  80ecb8:	10800104 	addi	r2,r2,4
  80ecbc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  80ecc0:	e0bfef17 	ldw	r2,-68(fp)
  80ecc4:	10800017 	ldw	r2,0(r2)
  80ecc8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80eccc:	e0bff017 	ldw	r2,-64(fp)
  80ecd0:	103fe51e 	bne	r2,zero,80ec68 <__alt_mem_epcs_flash_controller_0+0xff805c68>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80ecd4:	d0a07303 	ldbu	r2,-32308(gp)
  80ecd8:	10803fcc 	andi	r2,r2,255
  80ecdc:	10000526 	beq	r2,zero,80ecf4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80ece0:	e0800217 	ldw	r2,8(fp)
  80ece4:	00c00084 	movi	r3,2
  80ece8:	10c00005 	stb	r3,0(r2)
        return (0);
  80ecec:	0005883a 	mov	r2,zero
  80ecf0:	00013106 	br	80f1b8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80ecf4:	d0a06503 	ldbu	r2,-32364(gp)
  80ecf8:	10803fcc 	andi	r2,r2,255
  80ecfc:	10000526 	beq	r2,zero,80ed14 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80ed00:	e0800217 	ldw	r2,8(fp)
  80ed04:	00c00344 	movi	r3,13
  80ed08:	10c00005 	stb	r3,0(r2)
        return (0);
  80ed0c:	0005883a 	mov	r2,zero
  80ed10:	00012906 	br	80f1b8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed14:	0005303a 	rdctl	r2,status
  80ed18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed1c:	e0fffb17 	ldw	r3,-20(fp)
  80ed20:	00bfff84 	movi	r2,-2
  80ed24:	1884703a 	and	r2,r3,r2
  80ed28:	1001703a 	wrctl	status,r2
  
  return context;
  80ed2c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80ed30:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  80ed34:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  80ed38:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80ed3c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  80ed40:	e0bffc17 	ldw	r2,-16(fp)
  80ed44:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  80ed48:	e0bfef17 	ldw	r2,-68(fp)
  80ed4c:	10800017 	ldw	r2,0(r2)
  80ed50:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80ed54:	00008106 	br	80ef5c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  80ed58:	e0bff017 	ldw	r2,-64(fp)
  80ed5c:	10800003 	ldbu	r2,0(r2)
  80ed60:	10803fcc 	andi	r2,r2,255
  80ed64:	10c000a0 	cmpeqi	r3,r2,2
  80ed68:	18003c1e 	bne	r3,zero,80ee5c <OSEventPendMulti+0x2a0>
  80ed6c:	10c000e0 	cmpeqi	r3,r2,3
  80ed70:	1800031e 	bne	r3,zero,80ed80 <OSEventPendMulti+0x1c4>
  80ed74:	10800060 	cmpeqi	r2,r2,1
  80ed78:	10001e1e 	bne	r2,zero,80edf4 <OSEventPendMulti+0x238>
  80ed7c:	00006606 	br	80ef18 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80ed80:	e0bff017 	ldw	r2,-64(fp)
  80ed84:	1080020b 	ldhu	r2,8(r2)
  80ed88:	10bfffcc 	andi	r2,r2,65535
  80ed8c:	10001526 	beq	r2,zero,80ede4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80ed90:	e0bff017 	ldw	r2,-64(fp)
  80ed94:	1080020b 	ldhu	r2,8(r2)
  80ed98:	10bfffc4 	addi	r2,r2,-1
  80ed9c:	1007883a 	mov	r3,r2
  80eda0:	e0bff017 	ldw	r2,-64(fp)
  80eda4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80eda8:	e0bffd17 	ldw	r2,-12(fp)
  80edac:	10c00104 	addi	r3,r2,4
  80edb0:	e0fffd15 	stw	r3,-12(fp)
  80edb4:	e0fff017 	ldw	r3,-64(fp)
  80edb8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  80edbc:	00800044 	movi	r2,1
  80edc0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80edc4:	e0bffe17 	ldw	r2,-8(fp)
  80edc8:	10c00104 	addi	r3,r2,4
  80edcc:	e0fffe15 	stw	r3,-8(fp)
  80edd0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  80edd4:	e0bff18b 	ldhu	r2,-58(fp)
  80edd8:	10800044 	addi	r2,r2,1
  80eddc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  80ede0:	00005806 	br	80ef44 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80ede4:	e0bff203 	ldbu	r2,-56(fp)
  80ede8:	10800054 	ori	r2,r2,1
  80edec:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80edf0:	00005406 	br	80ef44 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80edf4:	e0bff017 	ldw	r2,-64(fp)
  80edf8:	10800117 	ldw	r2,4(r2)
  80edfc:	10001326 	beq	r2,zero,80ee4c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80ee00:	e0bffe17 	ldw	r2,-8(fp)
  80ee04:	10c00104 	addi	r3,r2,4
  80ee08:	e0fffe15 	stw	r3,-8(fp)
  80ee0c:	e0fff017 	ldw	r3,-64(fp)
  80ee10:	18c00117 	ldw	r3,4(r3)
  80ee14:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  80ee18:	e0bff017 	ldw	r2,-64(fp)
  80ee1c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80ee20:	e0bffd17 	ldw	r2,-12(fp)
  80ee24:	10c00104 	addi	r3,r2,4
  80ee28:	e0fffd15 	stw	r3,-12(fp)
  80ee2c:	e0fff017 	ldw	r3,-64(fp)
  80ee30:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  80ee34:	00800044 	movi	r2,1
  80ee38:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80ee3c:	e0bff18b 	ldhu	r2,-58(fp)
  80ee40:	10800044 	addi	r2,r2,1
  80ee44:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  80ee48:	00003e06 	br	80ef44 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80ee4c:	e0bff203 	ldbu	r2,-56(fp)
  80ee50:	10800094 	ori	r2,r2,2
  80ee54:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80ee58:	00003a06 	br	80ef44 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80ee5c:	e0bff017 	ldw	r2,-64(fp)
  80ee60:	10800117 	ldw	r2,4(r2)
  80ee64:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80ee68:	e0bff517 	ldw	r2,-44(fp)
  80ee6c:	1080058b 	ldhu	r2,22(r2)
  80ee70:	10bfffcc 	andi	r2,r2,65535
  80ee74:	10002426 	beq	r2,zero,80ef08 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80ee78:	e0bffe17 	ldw	r2,-8(fp)
  80ee7c:	10c00104 	addi	r3,r2,4
  80ee80:	e0fffe15 	stw	r3,-8(fp)
  80ee84:	e0fff517 	ldw	r3,-44(fp)
  80ee88:	18c00417 	ldw	r3,16(r3)
  80ee8c:	19400104 	addi	r5,r3,4
  80ee90:	e13ff517 	ldw	r4,-44(fp)
  80ee94:	21400415 	stw	r5,16(r4)
  80ee98:	18c00017 	ldw	r3,0(r3)
  80ee9c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80eea0:	e0bff517 	ldw	r2,-44(fp)
  80eea4:	10c00417 	ldw	r3,16(r2)
  80eea8:	e0bff517 	ldw	r2,-44(fp)
  80eeac:	10800217 	ldw	r2,8(r2)
  80eeb0:	1880041e 	bne	r3,r2,80eec4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80eeb4:	e0bff517 	ldw	r2,-44(fp)
  80eeb8:	10c00117 	ldw	r3,4(r2)
  80eebc:	e0bff517 	ldw	r2,-44(fp)
  80eec0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80eec4:	e0bff517 	ldw	r2,-44(fp)
  80eec8:	1080058b 	ldhu	r2,22(r2)
  80eecc:	10bfffc4 	addi	r2,r2,-1
  80eed0:	1007883a 	mov	r3,r2
  80eed4:	e0bff517 	ldw	r2,-44(fp)
  80eed8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80eedc:	e0bffd17 	ldw	r2,-12(fp)
  80eee0:	10c00104 	addi	r3,r2,4
  80eee4:	e0fffd15 	stw	r3,-12(fp)
  80eee8:	e0fff017 	ldw	r3,-64(fp)
  80eeec:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  80eef0:	00800044 	movi	r2,1
  80eef4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80eef8:	e0bff18b 	ldhu	r2,-58(fp)
  80eefc:	10800044 	addi	r2,r2,1
  80ef00:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  80ef04:	00000f06 	br	80ef44 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80ef08:	e0bff203 	ldbu	r2,-56(fp)
  80ef0c:	10800114 	ori	r2,r2,4
  80ef10:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80ef14:	00000b06 	br	80ef44 <OSEventPendMulti+0x388>
  80ef18:	e0bff317 	ldw	r2,-52(fp)
  80ef1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef20:	e0bff417 	ldw	r2,-48(fp)
  80ef24:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80ef28:	e0bffd17 	ldw	r2,-12(fp)
  80ef2c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80ef30:	e0800217 	ldw	r2,8(fp)
  80ef34:	00c00044 	movi	r3,1
  80ef38:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  80ef3c:	e0bff18b 	ldhu	r2,-58(fp)
  80ef40:	00009d06 	br	80f1b8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  80ef44:	e0bfef17 	ldw	r2,-68(fp)
  80ef48:	10800104 	addi	r2,r2,4
  80ef4c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  80ef50:	e0bfef17 	ldw	r2,-68(fp)
  80ef54:	10800017 	ldw	r2,0(r2)
  80ef58:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80ef5c:	e0bff017 	ldw	r2,-64(fp)
  80ef60:	103f7d1e 	bne	r2,zero,80ed58 <__alt_mem_epcs_flash_controller_0+0xff805d58>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80ef64:	e0bff103 	ldbu	r2,-60(fp)
  80ef68:	10800058 	cmpnei	r2,r2,1
  80ef6c:	10000a1e 	bne	r2,zero,80ef98 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80ef70:	e0bffd17 	ldw	r2,-12(fp)
  80ef74:	10000015 	stw	zero,0(r2)
  80ef78:	e0bff317 	ldw	r2,-52(fp)
  80ef7c:	e0bff615 	stw	r2,-40(fp)
  80ef80:	e0bff617 	ldw	r2,-40(fp)
  80ef84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80ef88:	e0800217 	ldw	r2,8(fp)
  80ef8c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80ef90:	e0bff18b 	ldhu	r2,-58(fp)
  80ef94:	00008806 	br	80f1b8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80ef98:	d0a07417 	ldw	r2,-32304(gp)
  80ef9c:	d0e07417 	ldw	r3,-32304(gp)
  80efa0:	19000c03 	ldbu	r4,48(r3)
  80efa4:	e0fff203 	ldbu	r3,-56(fp)
  80efa8:	20c6b03a 	or	r3,r4,r3
  80efac:	1809883a 	mov	r4,r3
  80efb0:	00ffe004 	movi	r3,-128
  80efb4:	20c6b03a 	or	r3,r4,r3
  80efb8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80efbc:	d0a07417 	ldw	r2,-32304(gp)
  80efc0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80efc4:	d0a07417 	ldw	r2,-32304(gp)
  80efc8:	e0ffff0b 	ldhu	r3,-4(fp)
  80efcc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80efd0:	e13ffc17 	ldw	r4,-16(fp)
  80efd4:	080faf80 	call	80faf8 <OS_EventTaskWaitMulti>
  80efd8:	e0bff317 	ldw	r2,-52(fp)
  80efdc:	e0bff915 	stw	r2,-28(fp)
  80efe0:	e0bff917 	ldw	r2,-28(fp)
  80efe4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80efe8:	081029c0 	call	81029c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efec:	0005303a 	rdctl	r2,status
  80eff0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eff4:	e0fff717 	ldw	r3,-36(fp)
  80eff8:	00bfff84 	movi	r2,-2
  80effc:	1884703a 	and	r2,r3,r2
  80f000:	1001703a 	wrctl	status,r2
  
  return context;
  80f004:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80f008:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80f00c:	d0a07417 	ldw	r2,-32304(gp)
  80f010:	10800c43 	ldbu	r2,49(r2)
  80f014:	10803fcc 	andi	r2,r2,255
  80f018:	10000226 	beq	r2,zero,80f024 <OSEventPendMulti+0x468>
  80f01c:	108000a0 	cmpeqi	r2,r2,2
  80f020:	10001826 	beq	r2,zero,80f084 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80f024:	d0a07417 	ldw	r2,-32304(gp)
  80f028:	10800717 	ldw	r2,28(r2)
  80f02c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80f030:	e0bff017 	ldw	r2,-64(fp)
  80f034:	10000b26 	beq	r2,zero,80f064 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80f038:	e0bffd17 	ldw	r2,-12(fp)
  80f03c:	10c00104 	addi	r3,r2,4
  80f040:	e0fffd15 	stw	r3,-12(fp)
  80f044:	e0fff017 	ldw	r3,-64(fp)
  80f048:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80f04c:	e0bffd17 	ldw	r2,-12(fp)
  80f050:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80f054:	e0bff18b 	ldhu	r2,-58(fp)
  80f058:	10800044 	addi	r2,r2,1
  80f05c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  80f060:	00000d06 	br	80f098 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80f064:	d0a07417 	ldw	r2,-32304(gp)
  80f068:	00c00044 	movi	r3,1
  80f06c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80f070:	d0a07417 	ldw	r2,-32304(gp)
  80f074:	e17ffc17 	ldw	r5,-16(fp)
  80f078:	1009883a 	mov	r4,r2
  80f07c:	080fd000 	call	80fd00 <OS_EventTaskRemoveMulti>
             }
			 break;
  80f080:	00000506 	br	80f098 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80f084:	d0a07417 	ldw	r2,-32304(gp)
  80f088:	e17ffc17 	ldw	r5,-16(fp)
  80f08c:	1009883a 	mov	r4,r2
  80f090:	080fd000 	call	80fd00 <OS_EventTaskRemoveMulti>
             break;
  80f094:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80f098:	d0a07417 	ldw	r2,-32304(gp)
  80f09c:	10800c43 	ldbu	r2,49(r2)
  80f0a0:	10803fcc 	andi	r2,r2,255
  80f0a4:	10000326 	beq	r2,zero,80f0b4 <OSEventPendMulti+0x4f8>
  80f0a8:	108000a0 	cmpeqi	r2,r2,2
  80f0ac:	1000231e 	bne	r2,zero,80f13c <OSEventPendMulti+0x580>
  80f0b0:	00002a06 	br	80f15c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80f0b4:	e0bff017 	ldw	r2,-64(fp)
  80f0b8:	10800003 	ldbu	r2,0(r2)
  80f0bc:	10803fcc 	andi	r2,r2,255
  80f0c0:	0080100e 	bge	zero,r2,80f104 <OSEventPendMulti+0x548>
  80f0c4:	10c000d0 	cmplti	r3,r2,3
  80f0c8:	1800071e 	bne	r3,zero,80f0e8 <OSEventPendMulti+0x52c>
  80f0cc:	108000e0 	cmpeqi	r2,r2,3
  80f0d0:	10000c26 	beq	r2,zero,80f104 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80f0d4:	e0bffe17 	ldw	r2,-8(fp)
  80f0d8:	10c00104 	addi	r3,r2,4
  80f0dc:	e0fffe15 	stw	r3,-8(fp)
  80f0e0:	10000015 	stw	zero,0(r2)
                      break;
  80f0e4:	00001206 	br	80f130 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80f0e8:	e0bffe17 	ldw	r2,-8(fp)
  80f0ec:	10c00104 	addi	r3,r2,4
  80f0f0:	e0fffe15 	stw	r3,-8(fp)
  80f0f4:	d0e07417 	ldw	r3,-32304(gp)
  80f0f8:	18c00917 	ldw	r3,36(r3)
  80f0fc:	10c00015 	stw	r3,0(r2)
                      break;
  80f100:	00000b06 	br	80f130 <OSEventPendMulti+0x574>
  80f104:	e0bff317 	ldw	r2,-52(fp)
  80f108:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f10c:	e0bff817 	ldw	r2,-32(fp)
  80f110:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80f114:	e0bffd17 	ldw	r2,-12(fp)
  80f118:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80f11c:	e0800217 	ldw	r2,8(fp)
  80f120:	00c00044 	movi	r3,1
  80f124:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  80f128:	e0bff18b 	ldhu	r2,-58(fp)
  80f12c:	00002206 	br	80f1b8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  80f130:	e0800217 	ldw	r2,8(fp)
  80f134:	10000005 	stb	zero,0(r2)
             break;
  80f138:	00001006 	br	80f17c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80f13c:	e0bffe17 	ldw	r2,-8(fp)
  80f140:	10c00104 	addi	r3,r2,4
  80f144:	e0fffe15 	stw	r3,-8(fp)
  80f148:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80f14c:	e0800217 	ldw	r2,8(fp)
  80f150:	00c00384 	movi	r3,14
  80f154:	10c00005 	stb	r3,0(r2)
             break;
  80f158:	00000806 	br	80f17c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80f15c:	e0bffe17 	ldw	r2,-8(fp)
  80f160:	10c00104 	addi	r3,r2,4
  80f164:	e0fffe15 	stw	r3,-8(fp)
  80f168:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80f16c:	e0800217 	ldw	r2,8(fp)
  80f170:	00c00284 	movi	r3,10
  80f174:	10c00005 	stb	r3,0(r2)
             break;
  80f178:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80f17c:	d0a07417 	ldw	r2,-32304(gp)
  80f180:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80f184:	d0a07417 	ldw	r2,-32304(gp)
  80f188:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80f18c:	d0a07417 	ldw	r2,-32304(gp)
  80f190:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80f194:	d0a07417 	ldw	r2,-32304(gp)
  80f198:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80f19c:	d0a07417 	ldw	r2,-32304(gp)
  80f1a0:	10000915 	stw	zero,36(r2)
  80f1a4:	e0bff317 	ldw	r2,-52(fp)
  80f1a8:	e0bffa15 	stw	r2,-24(fp)
  80f1ac:	e0bffa17 	ldw	r2,-24(fp)
  80f1b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80f1b4:	e0bff18b 	ldhu	r2,-58(fp)
}
  80f1b8:	e037883a 	mov	sp,fp
  80f1bc:	dfc00117 	ldw	ra,4(sp)
  80f1c0:	df000017 	ldw	fp,0(sp)
  80f1c4:	dec00204 	addi	sp,sp,8
  80f1c8:	f800283a 	ret

0080f1cc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80f1cc:	defffe04 	addi	sp,sp,-8
  80f1d0:	dfc00115 	stw	ra,4(sp)
  80f1d4:	df000015 	stw	fp,0(sp)
  80f1d8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80f1dc:	08199c00 	call	8199c0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80f1e0:	080ff480 	call	80ff48 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80f1e4:	080ff900 	call	80ff90 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80f1e8:	08100fc0 	call	8100fc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80f1ec:	080fe680 	call	80fe68 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80f1f0:	0811f9c0 	call	811f9c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80f1f4:	081289c0 	call	81289c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80f1f8:	08139d00 	call	8139d0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80f1fc:	080fffc0 	call	80fffc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80f200:	081007c0 	call	81007c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80f204:	08199e00 	call	8199e0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80f208:	08109700 	call	810970 <OSDebugInit>
#endif
}
  80f20c:	0001883a 	nop
  80f210:	e037883a 	mov	sp,fp
  80f214:	dfc00117 	ldw	ra,4(sp)
  80f218:	df000017 	ldw	fp,0(sp)
  80f21c:	dec00204 	addi	sp,sp,8
  80f220:	f800283a 	ret

0080f224 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80f224:	deffff04 	addi	sp,sp,-4
  80f228:	df000015 	stw	fp,0(sp)
  80f22c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  80f230:	d0a06543 	ldbu	r2,-32363(gp)
  80f234:	10803fcc 	andi	r2,r2,255
  80f238:	10800058 	cmpnei	r2,r2,1
  80f23c:	1000071e 	bne	r2,zero,80f25c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  80f240:	d0a07303 	ldbu	r2,-32308(gp)
  80f244:	10803fcc 	andi	r2,r2,255
  80f248:	10803fe0 	cmpeqi	r2,r2,255
  80f24c:	1000031e 	bne	r2,zero,80f25c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80f250:	d0a07303 	ldbu	r2,-32308(gp)
  80f254:	10800044 	addi	r2,r2,1
  80f258:	d0a07305 	stb	r2,-32308(gp)
        }
    }
}
  80f25c:	0001883a 	nop
  80f260:	e037883a 	mov	sp,fp
  80f264:	df000017 	ldw	fp,0(sp)
  80f268:	dec00104 	addi	sp,sp,4
  80f26c:	f800283a 	ret

0080f270 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80f270:	defffb04 	addi	sp,sp,-20
  80f274:	dfc00415 	stw	ra,16(sp)
  80f278:	df000315 	stw	fp,12(sp)
  80f27c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f280:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80f284:	d0a06543 	ldbu	r2,-32363(gp)
  80f288:	10803fcc 	andi	r2,r2,255
  80f28c:	10800058 	cmpnei	r2,r2,1
  80f290:	10002f1e 	bne	r2,zero,80f350 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f294:	0005303a 	rdctl	r2,status
  80f298:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f29c:	e0ffff17 	ldw	r3,-4(fp)
  80f2a0:	00bfff84 	movi	r2,-2
  80f2a4:	1884703a 	and	r2,r3,r2
  80f2a8:	1001703a 	wrctl	status,r2
  
  return context;
  80f2ac:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80f2b0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80f2b4:	d0a07303 	ldbu	r2,-32308(gp)
  80f2b8:	10803fcc 	andi	r2,r2,255
  80f2bc:	10000326 	beq	r2,zero,80f2cc <OSIntExit+0x5c>
            OSIntNesting--;
  80f2c0:	d0a07303 	ldbu	r2,-32308(gp)
  80f2c4:	10bfffc4 	addi	r2,r2,-1
  80f2c8:	d0a07305 	stb	r2,-32308(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80f2cc:	d0a07303 	ldbu	r2,-32308(gp)
  80f2d0:	10803fcc 	andi	r2,r2,255
  80f2d4:	10001a1e 	bne	r2,zero,80f340 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80f2d8:	d0a06503 	ldbu	r2,-32364(gp)
  80f2dc:	10803fcc 	andi	r2,r2,255
  80f2e0:	1000171e 	bne	r2,zero,80f340 <OSIntExit+0xd0>
                OS_SchedNew();
  80f2e4:	081036c0 	call	81036c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80f2e8:	d0e06703 	ldbu	r3,-32356(gp)
  80f2ec:	d0a06743 	ldbu	r2,-32355(gp)
  80f2f0:	18c03fcc 	andi	r3,r3,255
  80f2f4:	10803fcc 	andi	r2,r2,255
  80f2f8:	18801126 	beq	r3,r2,80f340 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80f2fc:	d0a06703 	ldbu	r2,-32356(gp)
  80f300:	10c03fcc 	andi	r3,r2,255
  80f304:	008020b4 	movhi	r2,130
  80f308:	1098f804 	addi	r2,r2,25568
  80f30c:	18c7883a 	add	r3,r3,r3
  80f310:	18c7883a 	add	r3,r3,r3
  80f314:	10c5883a 	add	r2,r2,r3
  80f318:	10800017 	ldw	r2,0(r2)
  80f31c:	d0a06f15 	stw	r2,-32324(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80f320:	d0a06f17 	ldw	r2,-32324(gp)
  80f324:	10c00e17 	ldw	r3,56(r2)
  80f328:	18c00044 	addi	r3,r3,1
  80f32c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80f330:	d0a06a17 	ldw	r2,-32344(gp)
  80f334:	10800044 	addi	r2,r2,1
  80f338:	d0a06a15 	stw	r2,-32344(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80f33c:	08196ec0 	call	8196ec <OSCtxSw>
  80f340:	e0bffd17 	ldw	r2,-12(fp)
  80f344:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f348:	e0bffe17 	ldw	r2,-8(fp)
  80f34c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80f350:	0001883a 	nop
  80f354:	e037883a 	mov	sp,fp
  80f358:	dfc00117 	ldw	ra,4(sp)
  80f35c:	df000017 	ldw	fp,0(sp)
  80f360:	dec00204 	addi	sp,sp,8
  80f364:	f800283a 	ret

0080f368 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80f368:	defffc04 	addi	sp,sp,-16
  80f36c:	df000315 	stw	fp,12(sp)
  80f370:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f374:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80f378:	d0a06543 	ldbu	r2,-32363(gp)
  80f37c:	10803fcc 	andi	r2,r2,255
  80f380:	10800058 	cmpnei	r2,r2,1
  80f384:	1000161e 	bne	r2,zero,80f3e0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f388:	0005303a 	rdctl	r2,status
  80f38c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f390:	e0ffff17 	ldw	r3,-4(fp)
  80f394:	00bfff84 	movi	r2,-2
  80f398:	1884703a 	and	r2,r3,r2
  80f39c:	1001703a 	wrctl	status,r2
  
  return context;
  80f3a0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80f3a4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80f3a8:	d0a07303 	ldbu	r2,-32308(gp)
  80f3ac:	10803fcc 	andi	r2,r2,255
  80f3b0:	1000071e 	bne	r2,zero,80f3d0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80f3b4:	d0a06503 	ldbu	r2,-32364(gp)
  80f3b8:	10803fcc 	andi	r2,r2,255
  80f3bc:	10803fe0 	cmpeqi	r2,r2,255
  80f3c0:	1000031e 	bne	r2,zero,80f3d0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80f3c4:	d0a06503 	ldbu	r2,-32364(gp)
  80f3c8:	10800044 	addi	r2,r2,1
  80f3cc:	d0a06505 	stb	r2,-32364(gp)
  80f3d0:	e0bffd17 	ldw	r2,-12(fp)
  80f3d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3d8:	e0bffe17 	ldw	r2,-8(fp)
  80f3dc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80f3e0:	0001883a 	nop
  80f3e4:	e037883a 	mov	sp,fp
  80f3e8:	df000017 	ldw	fp,0(sp)
  80f3ec:	dec00104 	addi	sp,sp,4
  80f3f0:	f800283a 	ret

0080f3f4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80f3f4:	defff804 	addi	sp,sp,-32
  80f3f8:	dfc00715 	stw	ra,28(sp)
  80f3fc:	df000615 	stw	fp,24(sp)
  80f400:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f404:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80f408:	d0a06543 	ldbu	r2,-32363(gp)
  80f40c:	10803fcc 	andi	r2,r2,255
  80f410:	10800058 	cmpnei	r2,r2,1
  80f414:	1000281e 	bne	r2,zero,80f4b8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f418:	0005303a 	rdctl	r2,status
  80f41c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f420:	e0ffff17 	ldw	r3,-4(fp)
  80f424:	00bfff84 	movi	r2,-2
  80f428:	1884703a 	and	r2,r3,r2
  80f42c:	1001703a 	wrctl	status,r2
  
  return context;
  80f430:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80f434:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80f438:	d0a06503 	ldbu	r2,-32364(gp)
  80f43c:	10803fcc 	andi	r2,r2,255
  80f440:	10001926 	beq	r2,zero,80f4a8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80f444:	d0a06503 	ldbu	r2,-32364(gp)
  80f448:	10bfffc4 	addi	r2,r2,-1
  80f44c:	d0a06505 	stb	r2,-32364(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80f450:	d0a06503 	ldbu	r2,-32364(gp)
  80f454:	10803fcc 	andi	r2,r2,255
  80f458:	10000e1e 	bne	r2,zero,80f494 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80f45c:	d0a07303 	ldbu	r2,-32308(gp)
  80f460:	10803fcc 	andi	r2,r2,255
  80f464:	1000061e 	bne	r2,zero,80f480 <OSSchedUnlock+0x8c>
  80f468:	e0bffa17 	ldw	r2,-24(fp)
  80f46c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f470:	e0bffb17 	ldw	r2,-20(fp)
  80f474:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80f478:	081029c0 	call	81029c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80f47c:	00000e06 	br	80f4b8 <OSSchedUnlock+0xc4>
  80f480:	e0bffa17 	ldw	r2,-24(fp)
  80f484:	e0bffc15 	stw	r2,-16(fp)
  80f488:	e0bffc17 	ldw	r2,-16(fp)
  80f48c:	1001703a 	wrctl	status,r2
  80f490:	00000906 	br	80f4b8 <OSSchedUnlock+0xc4>
  80f494:	e0bffa17 	ldw	r2,-24(fp)
  80f498:	e0bffd15 	stw	r2,-12(fp)
  80f49c:	e0bffd17 	ldw	r2,-12(fp)
  80f4a0:	1001703a 	wrctl	status,r2
  80f4a4:	00000406 	br	80f4b8 <OSSchedUnlock+0xc4>
  80f4a8:	e0bffa17 	ldw	r2,-24(fp)
  80f4ac:	e0bffe15 	stw	r2,-8(fp)
  80f4b0:	e0bffe17 	ldw	r2,-8(fp)
  80f4b4:	1001703a 	wrctl	status,r2
  80f4b8:	0001883a 	nop
  80f4bc:	e037883a 	mov	sp,fp
  80f4c0:	dfc00117 	ldw	ra,4(sp)
  80f4c4:	df000017 	ldw	fp,0(sp)
  80f4c8:	dec00204 	addi	sp,sp,8
  80f4cc:	f800283a 	ret

0080f4d0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80f4d0:	defffe04 	addi	sp,sp,-8
  80f4d4:	dfc00115 	stw	ra,4(sp)
  80f4d8:	df000015 	stw	fp,0(sp)
  80f4dc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80f4e0:	d0a06543 	ldbu	r2,-32363(gp)
  80f4e4:	10803fcc 	andi	r2,r2,255
  80f4e8:	10000f1e 	bne	r2,zero,80f528 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80f4ec:	081036c0 	call	81036c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80f4f0:	d0a06703 	ldbu	r2,-32356(gp)
  80f4f4:	d0a06745 	stb	r2,-32355(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80f4f8:	d0a06703 	ldbu	r2,-32356(gp)
  80f4fc:	10c03fcc 	andi	r3,r2,255
  80f500:	008020b4 	movhi	r2,130
  80f504:	1098f804 	addi	r2,r2,25568
  80f508:	18c7883a 	add	r3,r3,r3
  80f50c:	18c7883a 	add	r3,r3,r3
  80f510:	10c5883a 	add	r2,r2,r3
  80f514:	10800017 	ldw	r2,0(r2)
  80f518:	d0a06f15 	stw	r2,-32324(gp)
        OSTCBCur      = OSTCBHighRdy;
  80f51c:	d0a06f17 	ldw	r2,-32324(gp)
  80f520:	d0a07415 	stw	r2,-32304(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80f524:	08197780 	call	819778 <OSStartHighRdy>
    }
}
  80f528:	0001883a 	nop
  80f52c:	e037883a 	mov	sp,fp
  80f530:	dfc00117 	ldw	ra,4(sp)
  80f534:	df000017 	ldw	fp,0(sp)
  80f538:	dec00204 	addi	sp,sp,8
  80f53c:	f800283a 	ret

0080f540 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80f540:	defff904 	addi	sp,sp,-28
  80f544:	dfc00615 	stw	ra,24(sp)
  80f548:	df000515 	stw	fp,20(sp)
  80f54c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f550:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80f554:	01000084 	movi	r4,2
  80f558:	0815c440 	call	815c44 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f55c:	0005303a 	rdctl	r2,status
  80f560:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f564:	e0fffc17 	ldw	r3,-16(fp)
  80f568:	00bfff84 	movi	r2,-2
  80f56c:	1884703a 	and	r2,r3,r2
  80f570:	1001703a 	wrctl	status,r2
  
  return context;
  80f574:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80f578:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80f57c:	d0206615 	stw	zero,-32360(gp)
  80f580:	e0bffb17 	ldw	r2,-20(fp)
  80f584:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f588:	e0bffd17 	ldw	r2,-12(fp)
  80f58c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80f590:	01001904 	movi	r4,100
  80f594:	0815c440 	call	815c44 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f598:	0005303a 	rdctl	r2,status
  80f59c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f5a0:	e0fffe17 	ldw	r3,-8(fp)
  80f5a4:	00bfff84 	movi	r2,-2
  80f5a8:	1884703a 	and	r2,r3,r2
  80f5ac:	1001703a 	wrctl	status,r2
  
  return context;
  80f5b0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80f5b4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80f5b8:	d0a06617 	ldw	r2,-32360(gp)
  80f5bc:	d0a06b15 	stw	r2,-32340(gp)
    OSStatRdy    = OS_TRUE;
  80f5c0:	00800044 	movi	r2,1
  80f5c4:	d0a07705 	stb	r2,-32292(gp)
  80f5c8:	e0bffb17 	ldw	r2,-20(fp)
  80f5cc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5d0:	e0bfff17 	ldw	r2,-4(fp)
  80f5d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80f5d8:	0001883a 	nop
  80f5dc:	e037883a 	mov	sp,fp
  80f5e0:	dfc00117 	ldw	ra,4(sp)
  80f5e4:	df000017 	ldw	fp,0(sp)
  80f5e8:	dec00204 	addi	sp,sp,8
  80f5ec:	f800283a 	ret

0080f5f0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80f5f0:	defff704 	addi	sp,sp,-36
  80f5f4:	dfc00815 	stw	ra,32(sp)
  80f5f8:	df000715 	stw	fp,28(sp)
  80f5fc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80f600:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80f604:	08199a00 	call	8199a0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f608:	0005303a 	rdctl	r2,status
  80f60c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f610:	e0fffd17 	ldw	r3,-12(fp)
  80f614:	00bfff84 	movi	r2,-2
  80f618:	1884703a 	and	r2,r3,r2
  80f61c:	1001703a 	wrctl	status,r2
  
  return context;
  80f620:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80f624:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  80f628:	d0a07517 	ldw	r2,-32300(gp)
  80f62c:	10800044 	addi	r2,r2,1
  80f630:	d0a07515 	stw	r2,-32300(gp)
  80f634:	e0bffb17 	ldw	r2,-20(fp)
  80f638:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f63c:	e0bfff17 	ldw	r2,-4(fp)
  80f640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80f644:	d0a06543 	ldbu	r2,-32363(gp)
  80f648:	10803fcc 	andi	r2,r2,255
  80f64c:	10800058 	cmpnei	r2,r2,1
  80f650:	10006a1e 	bne	r2,zero,80f7fc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80f654:	d0a06903 	ldbu	r2,-32348(gp)
  80f658:	10803fcc 	andi	r2,r2,255
  80f65c:	10c00060 	cmpeqi	r3,r2,1
  80f660:	1800061e 	bne	r3,zero,80f67c <OSTimeTick+0x8c>
  80f664:	10c000a0 	cmpeqi	r3,r2,2
  80f668:	1800061e 	bne	r3,zero,80f684 <OSTimeTick+0x94>
  80f66c:	10000a1e 	bne	r2,zero,80f698 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80f670:	00800044 	movi	r2,1
  80f674:	e0bffa05 	stb	r2,-24(fp)
                 break;
  80f678:	00000b06 	br	80f6a8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80f67c:	e03ffa05 	stb	zero,-24(fp)
                 break;
  80f680:	00000906 	br	80f6a8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80f684:	00800044 	movi	r2,1
  80f688:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80f68c:	00800044 	movi	r2,1
  80f690:	d0a06905 	stb	r2,-32348(gp)
                 break;
  80f694:	00000406 	br	80f6a8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80f698:	00800044 	movi	r2,1
  80f69c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80f6a0:	d0206905 	stb	zero,-32348(gp)
                 break;
  80f6a4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80f6a8:	e0bffa03 	ldbu	r2,-24(fp)
  80f6ac:	10005226 	beq	r2,zero,80f7f8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80f6b0:	d0a06817 	ldw	r2,-32352(gp)
  80f6b4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80f6b8:	00004906 	br	80f7e0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6bc:	0005303a 	rdctl	r2,status
  80f6c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6c4:	e0fffc17 	ldw	r3,-16(fp)
  80f6c8:	00bfff84 	movi	r2,-2
  80f6cc:	1884703a 	and	r2,r3,r2
  80f6d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f6d4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  80f6d8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80f6dc:	e0bff917 	ldw	r2,-28(fp)
  80f6e0:	10800b8b 	ldhu	r2,46(r2)
  80f6e4:	10bfffcc 	andi	r2,r2,65535
  80f6e8:	10003626 	beq	r2,zero,80f7c4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80f6ec:	e0bff917 	ldw	r2,-28(fp)
  80f6f0:	10800b8b 	ldhu	r2,46(r2)
  80f6f4:	10bfffc4 	addi	r2,r2,-1
  80f6f8:	1007883a 	mov	r3,r2
  80f6fc:	e0bff917 	ldw	r2,-28(fp)
  80f700:	10c00b8d 	sth	r3,46(r2)
  80f704:	e0bff917 	ldw	r2,-28(fp)
  80f708:	10800b8b 	ldhu	r2,46(r2)
  80f70c:	10bfffcc 	andi	r2,r2,65535
  80f710:	10002c1e 	bne	r2,zero,80f7c4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80f714:	e0bff917 	ldw	r2,-28(fp)
  80f718:	10800c03 	ldbu	r2,48(r2)
  80f71c:	10803fcc 	andi	r2,r2,255
  80f720:	10800dcc 	andi	r2,r2,55
  80f724:	10000b26 	beq	r2,zero,80f754 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80f728:	e0bff917 	ldw	r2,-28(fp)
  80f72c:	10c00c03 	ldbu	r3,48(r2)
  80f730:	00bff204 	movi	r2,-56
  80f734:	1884703a 	and	r2,r3,r2
  80f738:	1007883a 	mov	r3,r2
  80f73c:	e0bff917 	ldw	r2,-28(fp)
  80f740:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80f744:	e0bff917 	ldw	r2,-28(fp)
  80f748:	00c00044 	movi	r3,1
  80f74c:	10c00c45 	stb	r3,49(r2)
  80f750:	00000206 	br	80f75c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80f754:	e0bff917 	ldw	r2,-28(fp)
  80f758:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80f75c:	e0bff917 	ldw	r2,-28(fp)
  80f760:	10800c03 	ldbu	r2,48(r2)
  80f764:	10803fcc 	andi	r2,r2,255
  80f768:	1080020c 	andi	r2,r2,8
  80f76c:	1000151e 	bne	r2,zero,80f7c4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80f770:	e0bff917 	ldw	r2,-28(fp)
  80f774:	10c00d83 	ldbu	r3,54(r2)
  80f778:	d0a07103 	ldbu	r2,-32316(gp)
  80f77c:	1884b03a 	or	r2,r3,r2
  80f780:	d0a07105 	stb	r2,-32316(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80f784:	e0bff917 	ldw	r2,-28(fp)
  80f788:	10800d03 	ldbu	r2,52(r2)
  80f78c:	10c03fcc 	andi	r3,r2,255
  80f790:	e0bff917 	ldw	r2,-28(fp)
  80f794:	10800d03 	ldbu	r2,52(r2)
  80f798:	11003fcc 	andi	r4,r2,255
  80f79c:	d0a07144 	addi	r2,gp,-32315
  80f7a0:	2085883a 	add	r2,r4,r2
  80f7a4:	11000003 	ldbu	r4,0(r2)
  80f7a8:	e0bff917 	ldw	r2,-28(fp)
  80f7ac:	10800d43 	ldbu	r2,53(r2)
  80f7b0:	2084b03a 	or	r2,r4,r2
  80f7b4:	1009883a 	mov	r4,r2
  80f7b8:	d0a07144 	addi	r2,gp,-32315
  80f7bc:	1885883a 	add	r2,r3,r2
  80f7c0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80f7c4:	e0bff917 	ldw	r2,-28(fp)
  80f7c8:	10800517 	ldw	r2,20(r2)
  80f7cc:	e0bff915 	stw	r2,-28(fp)
  80f7d0:	e0bffb17 	ldw	r2,-20(fp)
  80f7d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f7d8:	e0bffe17 	ldw	r2,-8(fp)
  80f7dc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80f7e0:	e0bff917 	ldw	r2,-28(fp)
  80f7e4:	10800c83 	ldbu	r2,50(r2)
  80f7e8:	10803fcc 	andi	r2,r2,255
  80f7ec:	10800518 	cmpnei	r2,r2,20
  80f7f0:	103fb21e 	bne	r2,zero,80f6bc <__alt_mem_epcs_flash_controller_0+0xff8066bc>
  80f7f4:	00000106 	br	80f7fc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  80f7f8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80f7fc:	e037883a 	mov	sp,fp
  80f800:	dfc00117 	ldw	ra,4(sp)
  80f804:	df000017 	ldw	fp,0(sp)
  80f808:	dec00204 	addi	sp,sp,8
  80f80c:	f800283a 	ret

0080f810 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80f810:	deffff04 	addi	sp,sp,-4
  80f814:	df000015 	stw	fp,0(sp)
  80f818:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80f81c:	00804784 	movi	r2,286
}
  80f820:	e037883a 	mov	sp,fp
  80f824:	df000017 	ldw	fp,0(sp)
  80f828:	dec00104 	addi	sp,sp,4
  80f82c:	f800283a 	ret

0080f830 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80f830:	deffff04 	addi	sp,sp,-4
  80f834:	df000015 	stw	fp,0(sp)
  80f838:	d839883a 	mov	fp,sp
}
  80f83c:	0001883a 	nop
  80f840:	e037883a 	mov	sp,fp
  80f844:	df000017 	ldw	fp,0(sp)
  80f848:	dec00104 	addi	sp,sp,4
  80f84c:	f800283a 	ret

0080f850 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80f850:	defff804 	addi	sp,sp,-32
  80f854:	dfc00715 	stw	ra,28(sp)
  80f858:	df000615 	stw	fp,24(sp)
  80f85c:	df000604 	addi	fp,sp,24
  80f860:	e13ffc15 	stw	r4,-16(fp)
  80f864:	e17ffd15 	stw	r5,-12(fp)
  80f868:	3007883a 	mov	r3,r6
  80f86c:	3805883a 	mov	r2,r7
  80f870:	e0fffe05 	stb	r3,-8(fp)
  80f874:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80f878:	e0bffc17 	ldw	r2,-16(fp)
  80f87c:	10800283 	ldbu	r2,10(r2)
  80f880:	10c03fcc 	andi	r3,r2,255
  80f884:	008020b4 	movhi	r2,130
  80f888:	10aa1104 	addi	r2,r2,-22460
  80f88c:	10c5883a 	add	r2,r2,r3
  80f890:	10800003 	ldbu	r2,0(r2)
  80f894:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80f898:	e0bffa03 	ldbu	r2,-24(fp)
  80f89c:	e0fffc17 	ldw	r3,-16(fp)
  80f8a0:	1885883a 	add	r2,r3,r2
  80f8a4:	108002c4 	addi	r2,r2,11
  80f8a8:	10800003 	ldbu	r2,0(r2)
  80f8ac:	10c03fcc 	andi	r3,r2,255
  80f8b0:	008020b4 	movhi	r2,130
  80f8b4:	10aa1104 	addi	r2,r2,-22460
  80f8b8:	10c5883a 	add	r2,r2,r3
  80f8bc:	10800003 	ldbu	r2,0(r2)
  80f8c0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80f8c4:	e0bffa03 	ldbu	r2,-24(fp)
  80f8c8:	100490fa 	slli	r2,r2,3
  80f8cc:	1007883a 	mov	r3,r2
  80f8d0:	e0bffa43 	ldbu	r2,-23(fp)
  80f8d4:	1885883a 	add	r2,r3,r2
  80f8d8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80f8dc:	e0fffa83 	ldbu	r3,-22(fp)
  80f8e0:	008020b4 	movhi	r2,130
  80f8e4:	1098f804 	addi	r2,r2,25568
  80f8e8:	18c7883a 	add	r3,r3,r3
  80f8ec:	18c7883a 	add	r3,r3,r3
  80f8f0:	10c5883a 	add	r2,r2,r3
  80f8f4:	10800017 	ldw	r2,0(r2)
  80f8f8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80f8fc:	e0bffb17 	ldw	r2,-20(fp)
  80f900:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80f904:	e0bffb17 	ldw	r2,-20(fp)
  80f908:	e0fffd17 	ldw	r3,-12(fp)
  80f90c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80f910:	e0bffb17 	ldw	r2,-20(fp)
  80f914:	10800c03 	ldbu	r2,48(r2)
  80f918:	1007883a 	mov	r3,r2
  80f91c:	e0bffe03 	ldbu	r2,-8(fp)
  80f920:	0084303a 	nor	r2,zero,r2
  80f924:	1884703a 	and	r2,r3,r2
  80f928:	1007883a 	mov	r3,r2
  80f92c:	e0bffb17 	ldw	r2,-20(fp)
  80f930:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80f934:	e0bffb17 	ldw	r2,-20(fp)
  80f938:	e0ffff03 	ldbu	r3,-4(fp)
  80f93c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80f940:	e0bffb17 	ldw	r2,-20(fp)
  80f944:	10800c03 	ldbu	r2,48(r2)
  80f948:	10803fcc 	andi	r2,r2,255
  80f94c:	1080020c 	andi	r2,r2,8
  80f950:	1000111e 	bne	r2,zero,80f998 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80f954:	e0bffb17 	ldw	r2,-20(fp)
  80f958:	10c00d83 	ldbu	r3,54(r2)
  80f95c:	d0a07103 	ldbu	r2,-32316(gp)
  80f960:	1884b03a 	or	r2,r3,r2
  80f964:	d0a07105 	stb	r2,-32316(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80f968:	e0fffa03 	ldbu	r3,-24(fp)
  80f96c:	e13ffa03 	ldbu	r4,-24(fp)
  80f970:	d0a07144 	addi	r2,gp,-32315
  80f974:	2085883a 	add	r2,r4,r2
  80f978:	11000003 	ldbu	r4,0(r2)
  80f97c:	e0bffb17 	ldw	r2,-20(fp)
  80f980:	10800d43 	ldbu	r2,53(r2)
  80f984:	2084b03a 	or	r2,r4,r2
  80f988:	1009883a 	mov	r4,r2
  80f98c:	d0a07144 	addi	r2,gp,-32315
  80f990:	1885883a 	add	r2,r3,r2
  80f994:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80f998:	e17ffc17 	ldw	r5,-16(fp)
  80f99c:	e13ffb17 	ldw	r4,-20(fp)
  80f9a0:	080fc480 	call	80fc48 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80f9a4:	e0bffb17 	ldw	r2,-20(fp)
  80f9a8:	10800817 	ldw	r2,32(r2)
  80f9ac:	10000826 	beq	r2,zero,80f9d0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80f9b0:	e0bffb17 	ldw	r2,-20(fp)
  80f9b4:	10800817 	ldw	r2,32(r2)
  80f9b8:	100b883a 	mov	r5,r2
  80f9bc:	e13ffb17 	ldw	r4,-20(fp)
  80f9c0:	080fd000 	call	80fd00 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80f9c4:	e0bffb17 	ldw	r2,-20(fp)
  80f9c8:	e0fffc17 	ldw	r3,-16(fp)
  80f9cc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  80f9d0:	e0bffa83 	ldbu	r2,-22(fp)
}
  80f9d4:	e037883a 	mov	sp,fp
  80f9d8:	dfc00117 	ldw	ra,4(sp)
  80f9dc:	df000017 	ldw	fp,0(sp)
  80f9e0:	dec00204 	addi	sp,sp,8
  80f9e4:	f800283a 	ret

0080f9e8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80f9e8:	defffd04 	addi	sp,sp,-12
  80f9ec:	df000215 	stw	fp,8(sp)
  80f9f0:	df000204 	addi	fp,sp,8
  80f9f4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80f9f8:	d0a07417 	ldw	r2,-32304(gp)
  80f9fc:	e0ffff17 	ldw	r3,-4(fp)
  80fa00:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80fa04:	d0a07417 	ldw	r2,-32304(gp)
  80fa08:	10800d03 	ldbu	r2,52(r2)
  80fa0c:	10803fcc 	andi	r2,r2,255
  80fa10:	d0e07417 	ldw	r3,-32304(gp)
  80fa14:	18c00d03 	ldbu	r3,52(r3)
  80fa18:	18c03fcc 	andi	r3,r3,255
  80fa1c:	e13fff17 	ldw	r4,-4(fp)
  80fa20:	20c7883a 	add	r3,r4,r3
  80fa24:	18c002c4 	addi	r3,r3,11
  80fa28:	19000003 	ldbu	r4,0(r3)
  80fa2c:	d0e07417 	ldw	r3,-32304(gp)
  80fa30:	18c00d43 	ldbu	r3,53(r3)
  80fa34:	20c6b03a 	or	r3,r4,r3
  80fa38:	1809883a 	mov	r4,r3
  80fa3c:	e0ffff17 	ldw	r3,-4(fp)
  80fa40:	1885883a 	add	r2,r3,r2
  80fa44:	108002c4 	addi	r2,r2,11
  80fa48:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80fa4c:	e0bfff17 	ldw	r2,-4(fp)
  80fa50:	10c00283 	ldbu	r3,10(r2)
  80fa54:	d0a07417 	ldw	r2,-32304(gp)
  80fa58:	10800d83 	ldbu	r2,54(r2)
  80fa5c:	1884b03a 	or	r2,r3,r2
  80fa60:	1007883a 	mov	r3,r2
  80fa64:	e0bfff17 	ldw	r2,-4(fp)
  80fa68:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80fa6c:	d0a07417 	ldw	r2,-32304(gp)
  80fa70:	10800d03 	ldbu	r2,52(r2)
  80fa74:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80fa78:	e0fffe03 	ldbu	r3,-8(fp)
  80fa7c:	e13ffe03 	ldbu	r4,-8(fp)
  80fa80:	d0a07144 	addi	r2,gp,-32315
  80fa84:	2085883a 	add	r2,r4,r2
  80fa88:	10800003 	ldbu	r2,0(r2)
  80fa8c:	1009883a 	mov	r4,r2
  80fa90:	d0a07417 	ldw	r2,-32304(gp)
  80fa94:	10800d43 	ldbu	r2,53(r2)
  80fa98:	0084303a 	nor	r2,zero,r2
  80fa9c:	2084703a 	and	r2,r4,r2
  80faa0:	1009883a 	mov	r4,r2
  80faa4:	d0a07144 	addi	r2,gp,-32315
  80faa8:	1885883a 	add	r2,r3,r2
  80faac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80fab0:	e0fffe03 	ldbu	r3,-8(fp)
  80fab4:	d0a07144 	addi	r2,gp,-32315
  80fab8:	1885883a 	add	r2,r3,r2
  80fabc:	10800003 	ldbu	r2,0(r2)
  80fac0:	10803fcc 	andi	r2,r2,255
  80fac4:	1000071e 	bne	r2,zero,80fae4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80fac8:	d0a07417 	ldw	r2,-32304(gp)
  80facc:	10800d83 	ldbu	r2,54(r2)
  80fad0:	0084303a 	nor	r2,zero,r2
  80fad4:	1007883a 	mov	r3,r2
  80fad8:	d0a07103 	ldbu	r2,-32316(gp)
  80fadc:	1884703a 	and	r2,r3,r2
  80fae0:	d0a07105 	stb	r2,-32316(gp)
    }
}
  80fae4:	0001883a 	nop
  80fae8:	e037883a 	mov	sp,fp
  80faec:	df000017 	ldw	fp,0(sp)
  80faf0:	dec00104 	addi	sp,sp,4
  80faf4:	f800283a 	ret

0080faf8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80faf8:	defffb04 	addi	sp,sp,-20
  80fafc:	df000415 	stw	fp,16(sp)
  80fb00:	df000404 	addi	fp,sp,16
  80fb04:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80fb08:	d0a07417 	ldw	r2,-32304(gp)
  80fb0c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80fb10:	d0a07417 	ldw	r2,-32304(gp)
  80fb14:	e0ffff17 	ldw	r3,-4(fp)
  80fb18:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  80fb1c:	e0bfff17 	ldw	r2,-4(fp)
  80fb20:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  80fb24:	e0bffc17 	ldw	r2,-16(fp)
  80fb28:	10800017 	ldw	r2,0(r2)
  80fb2c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80fb30:	00002006 	br	80fbb4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80fb34:	d0a07417 	ldw	r2,-32304(gp)
  80fb38:	10800d03 	ldbu	r2,52(r2)
  80fb3c:	10803fcc 	andi	r2,r2,255
  80fb40:	d0e07417 	ldw	r3,-32304(gp)
  80fb44:	18c00d03 	ldbu	r3,52(r3)
  80fb48:	18c03fcc 	andi	r3,r3,255
  80fb4c:	e13ffd17 	ldw	r4,-12(fp)
  80fb50:	20c7883a 	add	r3,r4,r3
  80fb54:	18c002c4 	addi	r3,r3,11
  80fb58:	19000003 	ldbu	r4,0(r3)
  80fb5c:	d0e07417 	ldw	r3,-32304(gp)
  80fb60:	18c00d43 	ldbu	r3,53(r3)
  80fb64:	20c6b03a 	or	r3,r4,r3
  80fb68:	1809883a 	mov	r4,r3
  80fb6c:	e0fffd17 	ldw	r3,-12(fp)
  80fb70:	1885883a 	add	r2,r3,r2
  80fb74:	108002c4 	addi	r2,r2,11
  80fb78:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80fb7c:	e0bffd17 	ldw	r2,-12(fp)
  80fb80:	10c00283 	ldbu	r3,10(r2)
  80fb84:	d0a07417 	ldw	r2,-32304(gp)
  80fb88:	10800d83 	ldbu	r2,54(r2)
  80fb8c:	1884b03a 	or	r2,r3,r2
  80fb90:	1007883a 	mov	r3,r2
  80fb94:	e0bffd17 	ldw	r2,-12(fp)
  80fb98:	10c00285 	stb	r3,10(r2)
        pevents++;
  80fb9c:	e0bffc17 	ldw	r2,-16(fp)
  80fba0:	10800104 	addi	r2,r2,4
  80fba4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  80fba8:	e0bffc17 	ldw	r2,-16(fp)
  80fbac:	10800017 	ldw	r2,0(r2)
  80fbb0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80fbb4:	e0bffd17 	ldw	r2,-12(fp)
  80fbb8:	103fde1e 	bne	r2,zero,80fb34 <__alt_mem_epcs_flash_controller_0+0xff806b34>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80fbbc:	d0a07417 	ldw	r2,-32304(gp)
  80fbc0:	10800d03 	ldbu	r2,52(r2)
  80fbc4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80fbc8:	e0fffe03 	ldbu	r3,-8(fp)
  80fbcc:	e13ffe03 	ldbu	r4,-8(fp)
  80fbd0:	d0a07144 	addi	r2,gp,-32315
  80fbd4:	2085883a 	add	r2,r4,r2
  80fbd8:	10800003 	ldbu	r2,0(r2)
  80fbdc:	1009883a 	mov	r4,r2
  80fbe0:	d0a07417 	ldw	r2,-32304(gp)
  80fbe4:	10800d43 	ldbu	r2,53(r2)
  80fbe8:	0084303a 	nor	r2,zero,r2
  80fbec:	2084703a 	and	r2,r4,r2
  80fbf0:	1009883a 	mov	r4,r2
  80fbf4:	d0a07144 	addi	r2,gp,-32315
  80fbf8:	1885883a 	add	r2,r3,r2
  80fbfc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80fc00:	e0fffe03 	ldbu	r3,-8(fp)
  80fc04:	d0a07144 	addi	r2,gp,-32315
  80fc08:	1885883a 	add	r2,r3,r2
  80fc0c:	10800003 	ldbu	r2,0(r2)
  80fc10:	10803fcc 	andi	r2,r2,255
  80fc14:	1000071e 	bne	r2,zero,80fc34 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80fc18:	d0a07417 	ldw	r2,-32304(gp)
  80fc1c:	10800d83 	ldbu	r2,54(r2)
  80fc20:	0084303a 	nor	r2,zero,r2
  80fc24:	1007883a 	mov	r3,r2
  80fc28:	d0a07103 	ldbu	r2,-32316(gp)
  80fc2c:	1884703a 	and	r2,r3,r2
  80fc30:	d0a07105 	stb	r2,-32316(gp)
    }
}
  80fc34:	0001883a 	nop
  80fc38:	e037883a 	mov	sp,fp
  80fc3c:	df000017 	ldw	fp,0(sp)
  80fc40:	dec00104 	addi	sp,sp,4
  80fc44:	f800283a 	ret

0080fc48 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80fc48:	defffc04 	addi	sp,sp,-16
  80fc4c:	df000315 	stw	fp,12(sp)
  80fc50:	df000304 	addi	fp,sp,12
  80fc54:	e13ffe15 	stw	r4,-8(fp)
  80fc58:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80fc5c:	e0bffe17 	ldw	r2,-8(fp)
  80fc60:	10800d03 	ldbu	r2,52(r2)
  80fc64:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80fc68:	e0bffd03 	ldbu	r2,-12(fp)
  80fc6c:	e0fffd03 	ldbu	r3,-12(fp)
  80fc70:	e13fff17 	ldw	r4,-4(fp)
  80fc74:	20c7883a 	add	r3,r4,r3
  80fc78:	18c002c4 	addi	r3,r3,11
  80fc7c:	18c00003 	ldbu	r3,0(r3)
  80fc80:	1809883a 	mov	r4,r3
  80fc84:	e0fffe17 	ldw	r3,-8(fp)
  80fc88:	18c00d43 	ldbu	r3,53(r3)
  80fc8c:	00c6303a 	nor	r3,zero,r3
  80fc90:	20c6703a 	and	r3,r4,r3
  80fc94:	1809883a 	mov	r4,r3
  80fc98:	e0ffff17 	ldw	r3,-4(fp)
  80fc9c:	1885883a 	add	r2,r3,r2
  80fca0:	108002c4 	addi	r2,r2,11
  80fca4:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80fca8:	e0bffd03 	ldbu	r2,-12(fp)
  80fcac:	e0ffff17 	ldw	r3,-4(fp)
  80fcb0:	1885883a 	add	r2,r3,r2
  80fcb4:	108002c4 	addi	r2,r2,11
  80fcb8:	10800003 	ldbu	r2,0(r2)
  80fcbc:	10803fcc 	andi	r2,r2,255
  80fcc0:	10000a1e 	bne	r2,zero,80fcec <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80fcc4:	e0bfff17 	ldw	r2,-4(fp)
  80fcc8:	10800283 	ldbu	r2,10(r2)
  80fccc:	1007883a 	mov	r3,r2
  80fcd0:	e0bffe17 	ldw	r2,-8(fp)
  80fcd4:	10800d83 	ldbu	r2,54(r2)
  80fcd8:	0084303a 	nor	r2,zero,r2
  80fcdc:	1884703a 	and	r2,r3,r2
  80fce0:	1007883a 	mov	r3,r2
  80fce4:	e0bfff17 	ldw	r2,-4(fp)
  80fce8:	10c00285 	stb	r3,10(r2)
    }
}
  80fcec:	0001883a 	nop
  80fcf0:	e037883a 	mov	sp,fp
  80fcf4:	df000017 	ldw	fp,0(sp)
  80fcf8:	dec00104 	addi	sp,sp,4
  80fcfc:	f800283a 	ret

0080fd00 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80fd00:	defffa04 	addi	sp,sp,-24
  80fd04:	df000515 	stw	fp,20(sp)
  80fd08:	df000504 	addi	fp,sp,20
  80fd0c:	e13ffe15 	stw	r4,-8(fp)
  80fd10:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80fd14:	e0bffe17 	ldw	r2,-8(fp)
  80fd18:	10800d03 	ldbu	r2,52(r2)
  80fd1c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  80fd20:	e0bffe17 	ldw	r2,-8(fp)
  80fd24:	10800d83 	ldbu	r2,54(r2)
  80fd28:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  80fd2c:	e0bffe17 	ldw	r2,-8(fp)
  80fd30:	10800d43 	ldbu	r2,53(r2)
  80fd34:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  80fd38:	e0bfff17 	ldw	r2,-4(fp)
  80fd3c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  80fd40:	e0bffb17 	ldw	r2,-20(fp)
  80fd44:	10800017 	ldw	r2,0(r2)
  80fd48:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80fd4c:	00002506 	br	80fde4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  80fd50:	e0bffd03 	ldbu	r2,-12(fp)
  80fd54:	e0fffd03 	ldbu	r3,-12(fp)
  80fd58:	e13ffc17 	ldw	r4,-16(fp)
  80fd5c:	20c7883a 	add	r3,r4,r3
  80fd60:	18c002c4 	addi	r3,r3,11
  80fd64:	18c00003 	ldbu	r3,0(r3)
  80fd68:	1809883a 	mov	r4,r3
  80fd6c:	e0fffd83 	ldbu	r3,-10(fp)
  80fd70:	00c6303a 	nor	r3,zero,r3
  80fd74:	20c6703a 	and	r3,r4,r3
  80fd78:	1809883a 	mov	r4,r3
  80fd7c:	e0fffc17 	ldw	r3,-16(fp)
  80fd80:	1885883a 	add	r2,r3,r2
  80fd84:	108002c4 	addi	r2,r2,11
  80fd88:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80fd8c:	e0bffd03 	ldbu	r2,-12(fp)
  80fd90:	e0fffc17 	ldw	r3,-16(fp)
  80fd94:	1885883a 	add	r2,r3,r2
  80fd98:	108002c4 	addi	r2,r2,11
  80fd9c:	10800003 	ldbu	r2,0(r2)
  80fda0:	10803fcc 	andi	r2,r2,255
  80fda4:	1000091e 	bne	r2,zero,80fdcc <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  80fda8:	e0bffc17 	ldw	r2,-16(fp)
  80fdac:	10800283 	ldbu	r2,10(r2)
  80fdb0:	1007883a 	mov	r3,r2
  80fdb4:	e0bffd43 	ldbu	r2,-11(fp)
  80fdb8:	0084303a 	nor	r2,zero,r2
  80fdbc:	1884703a 	and	r2,r3,r2
  80fdc0:	1007883a 	mov	r3,r2
  80fdc4:	e0bffc17 	ldw	r2,-16(fp)
  80fdc8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80fdcc:	e0bffb17 	ldw	r2,-20(fp)
  80fdd0:	10800104 	addi	r2,r2,4
  80fdd4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  80fdd8:	e0bffb17 	ldw	r2,-20(fp)
  80fddc:	10800017 	ldw	r2,0(r2)
  80fde0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80fde4:	e0bffc17 	ldw	r2,-16(fp)
  80fde8:	103fd91e 	bne	r2,zero,80fd50 <__alt_mem_epcs_flash_controller_0+0xff806d50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80fdec:	0001883a 	nop
  80fdf0:	e037883a 	mov	sp,fp
  80fdf4:	df000017 	ldw	fp,0(sp)
  80fdf8:	dec00104 	addi	sp,sp,4
  80fdfc:	f800283a 	ret

0080fe00 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80fe00:	defffc04 	addi	sp,sp,-16
  80fe04:	df000315 	stw	fp,12(sp)
  80fe08:	df000304 	addi	fp,sp,12
  80fe0c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80fe10:	e0bfff17 	ldw	r2,-4(fp)
  80fe14:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80fe18:	e0bfff17 	ldw	r2,-4(fp)
  80fe1c:	108002c4 	addi	r2,r2,11
  80fe20:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80fe24:	e03ffe05 	stb	zero,-8(fp)
  80fe28:	00000706 	br	80fe48 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  80fe2c:	e0bffd17 	ldw	r2,-12(fp)
  80fe30:	10c00044 	addi	r3,r2,1
  80fe34:	e0fffd15 	stw	r3,-12(fp)
  80fe38:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80fe3c:	e0bffe03 	ldbu	r2,-8(fp)
  80fe40:	10800044 	addi	r2,r2,1
  80fe44:	e0bffe05 	stb	r2,-8(fp)
  80fe48:	e0bffe03 	ldbu	r2,-8(fp)
  80fe4c:	108000f0 	cmpltui	r2,r2,3
  80fe50:	103ff61e 	bne	r2,zero,80fe2c <__alt_mem_epcs_flash_controller_0+0xff806e2c>
        *ptbl++ = 0;
    }
}
  80fe54:	0001883a 	nop
  80fe58:	e037883a 	mov	sp,fp
  80fe5c:	df000017 	ldw	fp,0(sp)
  80fe60:	dec00104 	addi	sp,sp,4
  80fe64:	f800283a 	ret

0080fe68 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80fe68:	defffb04 	addi	sp,sp,-20
  80fe6c:	dfc00415 	stw	ra,16(sp)
  80fe70:	df000315 	stw	fp,12(sp)
  80fe74:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80fe78:	0142d004 	movi	r5,2880
  80fe7c:	010020b4 	movhi	r4,130
  80fe80:	2114e404 	addi	r4,r4,21392
  80fe84:	08101e00 	call	8101e0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80fe88:	008020b4 	movhi	r2,130
  80fe8c:	1094e404 	addi	r2,r2,21392
  80fe90:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80fe94:	008020b4 	movhi	r2,130
  80fe98:	1094f004 	addi	r2,r2,21440
  80fe9c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80fea0:	e03ffd0d 	sth	zero,-12(fp)
  80fea4:	00001306 	br	80fef4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80fea8:	e0bffe17 	ldw	r2,-8(fp)
  80feac:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80feb0:	e0bffe17 	ldw	r2,-8(fp)
  80feb4:	e0ffff17 	ldw	r3,-4(fp)
  80feb8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80febc:	e0bffe17 	ldw	r2,-8(fp)
  80fec0:	00c00fc4 	movi	r3,63
  80fec4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80fec8:	e0bffe17 	ldw	r2,-8(fp)
  80fecc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80fed0:	e0bffe17 	ldw	r2,-8(fp)
  80fed4:	10800c04 	addi	r2,r2,48
  80fed8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80fedc:	e0bfff17 	ldw	r2,-4(fp)
  80fee0:	10800c04 	addi	r2,r2,48
  80fee4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80fee8:	e0bffd0b 	ldhu	r2,-12(fp)
  80feec:	10800044 	addi	r2,r2,1
  80fef0:	e0bffd0d 	sth	r2,-12(fp)
  80fef4:	e0bffd0b 	ldhu	r2,-12(fp)
  80fef8:	10800ef0 	cmpltui	r2,r2,59
  80fefc:	103fea1e 	bne	r2,zero,80fea8 <__alt_mem_epcs_flash_controller_0+0xff806ea8>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80ff00:	e0bffe17 	ldw	r2,-8(fp)
  80ff04:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80ff08:	e0bffe17 	ldw	r2,-8(fp)
  80ff0c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80ff10:	e0bffe17 	ldw	r2,-8(fp)
  80ff14:	00c00fc4 	movi	r3,63
  80ff18:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80ff1c:	e0bffe17 	ldw	r2,-8(fp)
  80ff20:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80ff24:	008020b4 	movhi	r2,130
  80ff28:	1094e404 	addi	r2,r2,21392
  80ff2c:	d0a07215 	stw	r2,-32312(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80ff30:	0001883a 	nop
  80ff34:	e037883a 	mov	sp,fp
  80ff38:	dfc00117 	ldw	ra,4(sp)
  80ff3c:	df000017 	ldw	fp,0(sp)
  80ff40:	dec00204 	addi	sp,sp,8
  80ff44:	f800283a 	ret

0080ff48 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80ff48:	deffff04 	addi	sp,sp,-4
  80ff4c:	df000015 	stw	fp,0(sp)
  80ff50:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80ff54:	d0207515 	stw	zero,-32300(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80ff58:	d0207305 	stb	zero,-32308(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80ff5c:	d0206505 	stb	zero,-32364(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80ff60:	d0206d45 	stb	zero,-32331(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80ff64:	d0206545 	stb	zero,-32363(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80ff68:	d0206a15 	stw	zero,-32344(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80ff6c:	d0206615 	stw	zero,-32360(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80ff70:	d0207815 	stw	zero,-32288(gp)
    OSIdleCtrMax  = 0L;
  80ff74:	d0206b15 	stw	zero,-32340(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80ff78:	d0207705 	stb	zero,-32292(gp)
#endif
}
  80ff7c:	0001883a 	nop
  80ff80:	e037883a 	mov	sp,fp
  80ff84:	df000017 	ldw	fp,0(sp)
  80ff88:	dec00104 	addi	sp,sp,4
  80ff8c:	f800283a 	ret

0080ff90 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80ff90:	defffd04 	addi	sp,sp,-12
  80ff94:	df000215 	stw	fp,8(sp)
  80ff98:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80ff9c:	d0207105 	stb	zero,-32316(gp)
    prdytbl       = &OSRdyTbl[0];
  80ffa0:	d0a07144 	addi	r2,gp,-32315
  80ffa4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80ffa8:	e03ffe05 	stb	zero,-8(fp)
  80ffac:	00000706 	br	80ffcc <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  80ffb0:	e0bfff17 	ldw	r2,-4(fp)
  80ffb4:	10c00044 	addi	r3,r2,1
  80ffb8:	e0ffff15 	stw	r3,-4(fp)
  80ffbc:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80ffc0:	e0bffe03 	ldbu	r2,-8(fp)
  80ffc4:	10800044 	addi	r2,r2,1
  80ffc8:	e0bffe05 	stb	r2,-8(fp)
  80ffcc:	e0bffe03 	ldbu	r2,-8(fp)
  80ffd0:	108000f0 	cmpltui	r2,r2,3
  80ffd4:	103ff61e 	bne	r2,zero,80ffb0 <__alt_mem_epcs_flash_controller_0+0xff806fb0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80ffd8:	d0206745 	stb	zero,-32355(gp)
    OSPrioHighRdy = 0;
  80ffdc:	d0206705 	stb	zero,-32356(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80ffe0:	d0206f15 	stw	zero,-32324(gp)
    OSTCBCur      = (OS_TCB *)0;
  80ffe4:	d0207415 	stw	zero,-32304(gp)
}
  80ffe8:	0001883a 	nop
  80ffec:	e037883a 	mov	sp,fp
  80fff0:	df000017 	ldw	fp,0(sp)
  80fff4:	dec00104 	addi	sp,sp,4
  80fff8:	f800283a 	ret

0080fffc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80fffc:	defff804 	addi	sp,sp,-32
  810000:	dfc00715 	stw	ra,28(sp)
  810004:	df000615 	stw	fp,24(sp)
  810008:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  81000c:	008000c4 	movi	r2,3
  810010:	d8800415 	stw	r2,16(sp)
  810014:	d8000315 	stw	zero,12(sp)
  810018:	00808004 	movi	r2,512
  81001c:	d8800215 	stw	r2,8(sp)
  810020:	008020b4 	movhi	r2,130
  810024:	1092e404 	addi	r2,r2,19344
  810028:	d8800115 	stw	r2,4(sp)
  81002c:	00bfffd4 	movui	r2,65535
  810030:	d8800015 	stw	r2,0(sp)
  810034:	01c00504 	movi	r7,20
  810038:	018020b4 	movhi	r6,130
  81003c:	3194e304 	addi	r6,r6,21388
  810040:	000b883a 	mov	r5,zero
  810044:	01002074 	movhi	r4,129
  810048:	21012a04 	addi	r4,r4,1192
  81004c:	0814b740 	call	814b74 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  810050:	e1bfff04 	addi	r6,fp,-4
  810054:	014020b4 	movhi	r5,130
  810058:	296a5104 	addi	r5,r5,-22204
  81005c:	01000504 	movi	r4,20
  810060:	08153840 	call	815384 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  810064:	0001883a 	nop
  810068:	e037883a 	mov	sp,fp
  81006c:	dfc00117 	ldw	ra,4(sp)
  810070:	df000017 	ldw	fp,0(sp)
  810074:	dec00204 	addi	sp,sp,8
  810078:	f800283a 	ret

0081007c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  81007c:	defff804 	addi	sp,sp,-32
  810080:	dfc00715 	stw	ra,28(sp)
  810084:	df000615 	stw	fp,24(sp)
  810088:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  81008c:	008000c4 	movi	r2,3
  810090:	d8800415 	stw	r2,16(sp)
  810094:	d8000315 	stw	zero,12(sp)
  810098:	00808004 	movi	r2,512
  81009c:	d8800215 	stw	r2,8(sp)
  8100a0:	008020b4 	movhi	r2,130
  8100a4:	10906c04 	addi	r2,r2,16816
  8100a8:	d8800115 	stw	r2,4(sp)
  8100ac:	00bfff94 	movui	r2,65534
  8100b0:	d8800015 	stw	r2,0(sp)
  8100b4:	01c004c4 	movi	r7,19
  8100b8:	018020b4 	movhi	r6,130
  8100bc:	31926b04 	addi	r6,r6,18860
  8100c0:	000b883a 	mov	r5,zero
  8100c4:	01002074 	movhi	r4,129
  8100c8:	21014104 	addi	r4,r4,1284
  8100cc:	0814b740 	call	814b74 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  8100d0:	e1bfff04 	addi	r6,fp,-4
  8100d4:	014020b4 	movhi	r5,130
  8100d8:	296a5504 	addi	r5,r5,-22188
  8100dc:	010004c4 	movi	r4,19
  8100e0:	08153840 	call	815384 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  8100e4:	0001883a 	nop
  8100e8:	e037883a 	mov	sp,fp
  8100ec:	dfc00117 	ldw	ra,4(sp)
  8100f0:	df000017 	ldw	fp,0(sp)
  8100f4:	dec00204 	addi	sp,sp,8
  8100f8:	f800283a 	ret

008100fc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  8100fc:	defffb04 	addi	sp,sp,-20
  810100:	dfc00415 	stw	ra,16(sp)
  810104:	df000315 	stw	fp,12(sp)
  810108:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  81010c:	01414404 	movi	r5,1296
  810110:	010020b4 	movhi	r4,130
  810114:	2117b404 	addi	r4,r4,24272
  810118:	08101e00 	call	8101e0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  81011c:	01401504 	movi	r5,84
  810120:	010020b4 	movhi	r4,130
  810124:	2118f804 	addi	r4,r4,25568
  810128:	08101e00 	call	8101e0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  81012c:	008020b4 	movhi	r2,130
  810130:	1097b404 	addi	r2,r2,24272
  810134:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  810138:	008020b4 	movhi	r2,130
  81013c:	1097cf04 	addi	r2,r2,24380
  810140:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  810144:	e03ffd05 	stb	zero,-12(fp)
  810148:	00001106 	br	810190 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  81014c:	e0bffe17 	ldw	r2,-8(fp)
  810150:	e0ffff17 	ldw	r3,-4(fp)
  810154:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  810158:	e0bffe17 	ldw	r2,-8(fp)
  81015c:	00c00fc4 	movi	r3,63
  810160:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  810164:	e0bffe17 	ldw	r2,-8(fp)
  810168:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  81016c:	e0bffe17 	ldw	r2,-8(fp)
  810170:	10801b04 	addi	r2,r2,108
  810174:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  810178:	e0bfff17 	ldw	r2,-4(fp)
  81017c:	10801b04 	addi	r2,r2,108
  810180:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  810184:	e0bffd03 	ldbu	r2,-12(fp)
  810188:	10800044 	addi	r2,r2,1
  81018c:	e0bffd05 	stb	r2,-12(fp)
  810190:	e0bffd03 	ldbu	r2,-12(fp)
  810194:	108002f0 	cmpltui	r2,r2,11
  810198:	103fec1e 	bne	r2,zero,81014c <__alt_mem_epcs_flash_controller_0+0xff80714c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  81019c:	e0bffe17 	ldw	r2,-8(fp)
  8101a0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  8101a4:	e0bffe17 	ldw	r2,-8(fp)
  8101a8:	00c00fc4 	movi	r3,63
  8101ac:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8101b0:	e0bffe17 	ldw	r2,-8(fp)
  8101b4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  8101b8:	d0206815 	stw	zero,-32352(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  8101bc:	008020b4 	movhi	r2,130
  8101c0:	1097b404 	addi	r2,r2,24272
  8101c4:	d0a06c15 	stw	r2,-32336(gp)
}
  8101c8:	0001883a 	nop
  8101cc:	e037883a 	mov	sp,fp
  8101d0:	dfc00117 	ldw	ra,4(sp)
  8101d4:	df000017 	ldw	fp,0(sp)
  8101d8:	dec00204 	addi	sp,sp,8
  8101dc:	f800283a 	ret

008101e0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  8101e0:	defffd04 	addi	sp,sp,-12
  8101e4:	df000215 	stw	fp,8(sp)
  8101e8:	df000204 	addi	fp,sp,8
  8101ec:	e13ffe15 	stw	r4,-8(fp)
  8101f0:	2805883a 	mov	r2,r5
  8101f4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  8101f8:	00000706 	br	810218 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  8101fc:	e0bffe17 	ldw	r2,-8(fp)
  810200:	10c00044 	addi	r3,r2,1
  810204:	e0fffe15 	stw	r3,-8(fp)
  810208:	10000005 	stb	zero,0(r2)
        size--;
  81020c:	e0bfff0b 	ldhu	r2,-4(fp)
  810210:	10bfffc4 	addi	r2,r2,-1
  810214:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  810218:	e0bfff0b 	ldhu	r2,-4(fp)
  81021c:	103ff71e 	bne	r2,zero,8101fc <__alt_mem_epcs_flash_controller_0+0xff8071fc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  810220:	0001883a 	nop
  810224:	e037883a 	mov	sp,fp
  810228:	df000017 	ldw	fp,0(sp)
  81022c:	dec00104 	addi	sp,sp,4
  810230:	f800283a 	ret

00810234 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  810234:	defffc04 	addi	sp,sp,-16
  810238:	df000315 	stw	fp,12(sp)
  81023c:	df000304 	addi	fp,sp,12
  810240:	e13ffd15 	stw	r4,-12(fp)
  810244:	e17ffe15 	stw	r5,-8(fp)
  810248:	3005883a 	mov	r2,r6
  81024c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  810250:	00000b06 	br	810280 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  810254:	e0bffd17 	ldw	r2,-12(fp)
  810258:	10c00044 	addi	r3,r2,1
  81025c:	e0fffd15 	stw	r3,-12(fp)
  810260:	e0fffe17 	ldw	r3,-8(fp)
  810264:	19000044 	addi	r4,r3,1
  810268:	e13ffe15 	stw	r4,-8(fp)
  81026c:	18c00003 	ldbu	r3,0(r3)
  810270:	10c00005 	stb	r3,0(r2)
        size--;
  810274:	e0bfff0b 	ldhu	r2,-4(fp)
  810278:	10bfffc4 	addi	r2,r2,-1
  81027c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  810280:	e0bfff0b 	ldhu	r2,-4(fp)
  810284:	103ff31e 	bne	r2,zero,810254 <__alt_mem_epcs_flash_controller_0+0xff807254>
        *pdest++ = *psrc++;
        size--;
    }
}
  810288:	0001883a 	nop
  81028c:	e037883a 	mov	sp,fp
  810290:	df000017 	ldw	fp,0(sp)
  810294:	dec00104 	addi	sp,sp,4
  810298:	f800283a 	ret

0081029c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  81029c:	defffb04 	addi	sp,sp,-20
  8102a0:	dfc00415 	stw	ra,16(sp)
  8102a4:	df000315 	stw	fp,12(sp)
  8102a8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8102ac:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102b0:	0005303a 	rdctl	r2,status
  8102b4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8102b8:	e0ffff17 	ldw	r3,-4(fp)
  8102bc:	00bfff84 	movi	r2,-2
  8102c0:	1884703a 	and	r2,r3,r2
  8102c4:	1001703a 	wrctl	status,r2
  
  return context;
  8102c8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  8102cc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  8102d0:	d0a07303 	ldbu	r2,-32308(gp)
  8102d4:	10803fcc 	andi	r2,r2,255
  8102d8:	10001a1e 	bne	r2,zero,810344 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  8102dc:	d0a06503 	ldbu	r2,-32364(gp)
  8102e0:	10803fcc 	andi	r2,r2,255
  8102e4:	1000171e 	bne	r2,zero,810344 <OS_Sched+0xa8>
            OS_SchedNew();
  8102e8:	081036c0 	call	81036c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8102ec:	d0e06703 	ldbu	r3,-32356(gp)
  8102f0:	d0a06743 	ldbu	r2,-32355(gp)
  8102f4:	18c03fcc 	andi	r3,r3,255
  8102f8:	10803fcc 	andi	r2,r2,255
  8102fc:	18801126 	beq	r3,r2,810344 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  810300:	d0a06703 	ldbu	r2,-32356(gp)
  810304:	10c03fcc 	andi	r3,r2,255
  810308:	008020b4 	movhi	r2,130
  81030c:	1098f804 	addi	r2,r2,25568
  810310:	18c7883a 	add	r3,r3,r3
  810314:	18c7883a 	add	r3,r3,r3
  810318:	10c5883a 	add	r2,r2,r3
  81031c:	10800017 	ldw	r2,0(r2)
  810320:	d0a06f15 	stw	r2,-32324(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  810324:	d0a06f17 	ldw	r2,-32324(gp)
  810328:	10c00e17 	ldw	r3,56(r2)
  81032c:	18c00044 	addi	r3,r3,1
  810330:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  810334:	d0a06a17 	ldw	r2,-32344(gp)
  810338:	10800044 	addi	r2,r2,1
  81033c:	d0a06a15 	stw	r2,-32344(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  810340:	08196ec0 	call	8196ec <OSCtxSw>
  810344:	e0bffd17 	ldw	r2,-12(fp)
  810348:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81034c:	e0bffe17 	ldw	r2,-8(fp)
  810350:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  810354:	0001883a 	nop
  810358:	e037883a 	mov	sp,fp
  81035c:	dfc00117 	ldw	ra,4(sp)
  810360:	df000017 	ldw	fp,0(sp)
  810364:	dec00204 	addi	sp,sp,8
  810368:	f800283a 	ret

0081036c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  81036c:	defffe04 	addi	sp,sp,-8
  810370:	df000115 	stw	fp,4(sp)
  810374:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  810378:	d0a07103 	ldbu	r2,-32316(gp)
  81037c:	10c03fcc 	andi	r3,r2,255
  810380:	008020b4 	movhi	r2,130
  810384:	10aa1104 	addi	r2,r2,-22460
  810388:	10c5883a 	add	r2,r2,r3
  81038c:	10800003 	ldbu	r2,0(r2)
  810390:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  810394:	e0bfff03 	ldbu	r2,-4(fp)
  810398:	100490fa 	slli	r2,r2,3
  81039c:	1009883a 	mov	r4,r2
  8103a0:	e0ffff03 	ldbu	r3,-4(fp)
  8103a4:	d0a07144 	addi	r2,gp,-32315
  8103a8:	1885883a 	add	r2,r3,r2
  8103ac:	10800003 	ldbu	r2,0(r2)
  8103b0:	10c03fcc 	andi	r3,r2,255
  8103b4:	008020b4 	movhi	r2,130
  8103b8:	10aa1104 	addi	r2,r2,-22460
  8103bc:	10c5883a 	add	r2,r2,r3
  8103c0:	10800003 	ldbu	r2,0(r2)
  8103c4:	2085883a 	add	r2,r4,r2
  8103c8:	d0a06705 	stb	r2,-32356(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  8103cc:	0001883a 	nop
  8103d0:	e037883a 	mov	sp,fp
  8103d4:	df000017 	ldw	fp,0(sp)
  8103d8:	dec00104 	addi	sp,sp,4
  8103dc:	f800283a 	ret

008103e0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  8103e0:	defffc04 	addi	sp,sp,-16
  8103e4:	df000315 	stw	fp,12(sp)
  8103e8:	df000304 	addi	fp,sp,12
  8103ec:	e13ffe15 	stw	r4,-8(fp)
  8103f0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  8103f4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  8103f8:	00000b06 	br	810428 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  8103fc:	e0bffe17 	ldw	r2,-8(fp)
  810400:	10c00044 	addi	r3,r2,1
  810404:	e0fffe15 	stw	r3,-8(fp)
  810408:	e0ffff17 	ldw	r3,-4(fp)
  81040c:	19000044 	addi	r4,r3,1
  810410:	e13fff15 	stw	r4,-4(fp)
  810414:	18c00003 	ldbu	r3,0(r3)
  810418:	10c00005 	stb	r3,0(r2)
        len++;
  81041c:	e0bffd03 	ldbu	r2,-12(fp)
  810420:	10800044 	addi	r2,r2,1
  810424:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  810428:	e0bfff17 	ldw	r2,-4(fp)
  81042c:	10800003 	ldbu	r2,0(r2)
  810430:	10803fcc 	andi	r2,r2,255
  810434:	103ff11e 	bne	r2,zero,8103fc <__alt_mem_epcs_flash_controller_0+0xff8073fc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  810438:	e0bffe17 	ldw	r2,-8(fp)
  81043c:	10000005 	stb	zero,0(r2)
    return (len);
  810440:	e0bffd03 	ldbu	r2,-12(fp)
}
  810444:	e037883a 	mov	sp,fp
  810448:	df000017 	ldw	fp,0(sp)
  81044c:	dec00104 	addi	sp,sp,4
  810450:	f800283a 	ret

00810454 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  810454:	defffd04 	addi	sp,sp,-12
  810458:	df000215 	stw	fp,8(sp)
  81045c:	df000204 	addi	fp,sp,8
  810460:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  810464:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  810468:	00000606 	br	810484 <OS_StrLen+0x30>
        psrc++;
  81046c:	e0bfff17 	ldw	r2,-4(fp)
  810470:	10800044 	addi	r2,r2,1
  810474:	e0bfff15 	stw	r2,-4(fp)
        len++;
  810478:	e0bffe03 	ldbu	r2,-8(fp)
  81047c:	10800044 	addi	r2,r2,1
  810480:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  810484:	e0bfff17 	ldw	r2,-4(fp)
  810488:	10800003 	ldbu	r2,0(r2)
  81048c:	10803fcc 	andi	r2,r2,255
  810490:	103ff61e 	bne	r2,zero,81046c <__alt_mem_epcs_flash_controller_0+0xff80746c>
        psrc++;
        len++;
    }
    return (len);
  810494:	e0bffe03 	ldbu	r2,-8(fp)
}
  810498:	e037883a 	mov	sp,fp
  81049c:	df000017 	ldw	fp,0(sp)
  8104a0:	dec00104 	addi	sp,sp,4
  8104a4:	f800283a 	ret

008104a8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  8104a8:	defffa04 	addi	sp,sp,-24
  8104ac:	dfc00515 	stw	ra,20(sp)
  8104b0:	df000415 	stw	fp,16(sp)
  8104b4:	df000404 	addi	fp,sp,16
  8104b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8104bc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8104c0:	0005303a 	rdctl	r2,status
  8104c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8104c8:	e0fffd17 	ldw	r3,-12(fp)
  8104cc:	00bfff84 	movi	r2,-2
  8104d0:	1884703a 	and	r2,r3,r2
  8104d4:	1001703a 	wrctl	status,r2
  
  return context;
  8104d8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  8104dc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  8104e0:	d0a06617 	ldw	r2,-32360(gp)
  8104e4:	10800044 	addi	r2,r2,1
  8104e8:	d0a06615 	stw	r2,-32360(gp)
  8104ec:	e0bffc17 	ldw	r2,-16(fp)
  8104f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8104f4:	e0bffe17 	ldw	r2,-8(fp)
  8104f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  8104fc:	0819a000 	call	819a00 <OSTaskIdleHook>
    }
  810500:	003fef06 	br	8104c0 <__alt_mem_epcs_flash_controller_0+0xff8074c0>

00810504 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  810504:	defffa04 	addi	sp,sp,-24
  810508:	dfc00515 	stw	ra,20(sp)
  81050c:	df000415 	stw	fp,16(sp)
  810510:	df000404 	addi	fp,sp,16
  810514:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810518:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  81051c:	00000206 	br	810528 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  810520:	01003204 	movi	r4,200
  810524:	0815c440 	call	815c44 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810528:	d0a07703 	ldbu	r2,-32292(gp)
  81052c:	10803fcc 	andi	r2,r2,255
  810530:	103ffb26 	beq	r2,zero,810520 <__alt_mem_epcs_flash_controller_0+0xff807520>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  810534:	d0a06b17 	ldw	r2,-32340(gp)
  810538:	01401904 	movi	r5,100
  81053c:	1009883a 	mov	r4,r2
  810540:	080b1840 	call	80b184 <__udivsi3>
  810544:	d0a06b15 	stw	r2,-32340(gp)
    if (OSIdleCtrMax == 0L) {
  810548:	d0a06b17 	ldw	r2,-32340(gp)
  81054c:	1000031e 	bne	r2,zero,81055c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  810550:	d0206d05 	stb	zero,-32332(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  810554:	01003fc4 	movi	r4,255
  810558:	08158cc0 	call	8158cc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81055c:	0005303a 	rdctl	r2,status
  810560:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810564:	e0fffd17 	ldw	r3,-12(fp)
  810568:	00bfff84 	movi	r2,-2
  81056c:	1884703a 	and	r2,r3,r2
  810570:	1001703a 	wrctl	status,r2
  
  return context;
  810574:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  810578:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  81057c:	d0a06617 	ldw	r2,-32360(gp)
  810580:	d0a07815 	stw	r2,-32288(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  810584:	d0206615 	stw	zero,-32360(gp)
  810588:	e0bffc17 	ldw	r2,-16(fp)
  81058c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810590:	e0bffe17 	ldw	r2,-8(fp)
  810594:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  810598:	d0a07817 	ldw	r2,-32288(gp)
  81059c:	d0e06b17 	ldw	r3,-32340(gp)
  8105a0:	180b883a 	mov	r5,r3
  8105a4:	1009883a 	mov	r4,r2
  8105a8:	080b1840 	call	80b184 <__udivsi3>
  8105ac:	1007883a 	mov	r3,r2
  8105b0:	00801904 	movi	r2,100
  8105b4:	10c5c83a 	sub	r2,r2,r3
  8105b8:	d0a06d05 	stb	r2,-32332(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  8105bc:	08199800 	call	819980 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  8105c0:	08105d00 	call	8105d0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  8105c4:	01001904 	movi	r4,100
  8105c8:	0815c440 	call	815c44 <OSTimeDly>
    }
  8105cc:	003fe306 	br	81055c <__alt_mem_epcs_flash_controller_0+0xff80755c>

008105d0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  8105d0:	defffa04 	addi	sp,sp,-24
  8105d4:	dfc00515 	stw	ra,20(sp)
  8105d8:	df000415 	stw	fp,16(sp)
  8105dc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8105e0:	e03ffc05 	stb	zero,-16(fp)
  8105e4:	00002406 	br	810678 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  8105e8:	e0bffc03 	ldbu	r2,-16(fp)
  8105ec:	e0fffe04 	addi	r3,fp,-8
  8105f0:	180b883a 	mov	r5,r3
  8105f4:	1009883a 	mov	r4,r2
  8105f8:	081570c0 	call	81570c <OSTaskStkChk>
  8105fc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  810600:	e0bffc43 	ldbu	r2,-15(fp)
  810604:	1000191e 	bne	r2,zero,81066c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  810608:	e0fffc03 	ldbu	r3,-16(fp)
  81060c:	008020b4 	movhi	r2,130
  810610:	1098f804 	addi	r2,r2,25568
  810614:	18c7883a 	add	r3,r3,r3
  810618:	18c7883a 	add	r3,r3,r3
  81061c:	10c5883a 	add	r2,r2,r3
  810620:	10800017 	ldw	r2,0(r2)
  810624:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  810628:	e0bffd17 	ldw	r2,-12(fp)
  81062c:	10000f26 	beq	r2,zero,81066c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  810630:	e0bffd17 	ldw	r2,-12(fp)
  810634:	10800060 	cmpeqi	r2,r2,1
  810638:	10000c1e 	bne	r2,zero,81066c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  81063c:	e0bffd17 	ldw	r2,-12(fp)
  810640:	10c00217 	ldw	r3,8(r2)
  810644:	e0bffd17 	ldw	r2,-12(fp)
  810648:	10800317 	ldw	r2,12(r2)
  81064c:	1085883a 	add	r2,r2,r2
  810650:	1085883a 	add	r2,r2,r2
  810654:	1887883a 	add	r3,r3,r2
  810658:	e0bffd17 	ldw	r2,-12(fp)
  81065c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  810660:	e0ffff17 	ldw	r3,-4(fp)
  810664:	e0bffd17 	ldw	r2,-12(fp)
  810668:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  81066c:	e0bffc03 	ldbu	r2,-16(fp)
  810670:	10800044 	addi	r2,r2,1
  810674:	e0bffc05 	stb	r2,-16(fp)
  810678:	e0bffc03 	ldbu	r2,-16(fp)
  81067c:	10800570 	cmpltui	r2,r2,21
  810680:	103fd91e 	bne	r2,zero,8105e8 <__alt_mem_epcs_flash_controller_0+0xff8075e8>
#endif
                }
            }
        }
    }
}
  810684:	0001883a 	nop
  810688:	e037883a 	mov	sp,fp
  81068c:	dfc00117 	ldw	ra,4(sp)
  810690:	df000017 	ldw	fp,0(sp)
  810694:	dec00204 	addi	sp,sp,8
  810698:	f800283a 	ret

0081069c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  81069c:	defff204 	addi	sp,sp,-56
  8106a0:	dfc00d15 	stw	ra,52(sp)
  8106a4:	df000c15 	stw	fp,48(sp)
  8106a8:	df000c04 	addi	fp,sp,48
  8106ac:	e17ffc15 	stw	r5,-16(fp)
  8106b0:	e1bffd15 	stw	r6,-12(fp)
  8106b4:	3807883a 	mov	r3,r7
  8106b8:	e0800417 	ldw	r2,16(fp)
  8106bc:	e13ffb05 	stb	r4,-20(fp)
  8106c0:	e0fffe0d 	sth	r3,-8(fp)
  8106c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8106c8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106cc:	0005303a 	rdctl	r2,status
  8106d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106d4:	e0fffa17 	ldw	r3,-24(fp)
  8106d8:	00bfff84 	movi	r2,-2
  8106dc:	1884703a 	and	r2,r3,r2
  8106e0:	1001703a 	wrctl	status,r2
  
  return context;
  8106e4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  8106e8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  8106ec:	d0a06c17 	ldw	r2,-32336(gp)
  8106f0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  8106f4:	e0bff617 	ldw	r2,-40(fp)
  8106f8:	10009326 	beq	r2,zero,810948 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  8106fc:	e0bff617 	ldw	r2,-40(fp)
  810700:	10800517 	ldw	r2,20(r2)
  810704:	d0a06c15 	stw	r2,-32336(gp)
  810708:	e0bff417 	ldw	r2,-48(fp)
  81070c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810710:	e0bff817 	ldw	r2,-32(fp)
  810714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  810718:	e0bff617 	ldw	r2,-40(fp)
  81071c:	e0fffc17 	ldw	r3,-16(fp)
  810720:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  810724:	e0bff617 	ldw	r2,-40(fp)
  810728:	e0fffb03 	ldbu	r3,-20(fp)
  81072c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  810730:	e0bff617 	ldw	r2,-40(fp)
  810734:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  810738:	e0bff617 	ldw	r2,-40(fp)
  81073c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  810740:	e0bff617 	ldw	r2,-40(fp)
  810744:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  810748:	e0bff617 	ldw	r2,-40(fp)
  81074c:	e0c00317 	ldw	r3,12(fp)
  810750:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  810754:	e0bff617 	ldw	r2,-40(fp)
  810758:	e0c00217 	ldw	r3,8(fp)
  81075c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  810760:	e0bff617 	ldw	r2,-40(fp)
  810764:	e0fffd17 	ldw	r3,-12(fp)
  810768:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  81076c:	e0bff617 	ldw	r2,-40(fp)
  810770:	e0ffff0b 	ldhu	r3,-4(fp)
  810774:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  810778:	e0bff617 	ldw	r2,-40(fp)
  81077c:	e0fffe0b 	ldhu	r3,-8(fp)
  810780:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  810784:	e0bff617 	ldw	r2,-40(fp)
  810788:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  81078c:	e0bffb03 	ldbu	r2,-20(fp)
  810790:	1004d0fa 	srli	r2,r2,3
  810794:	1007883a 	mov	r3,r2
  810798:	e0bff617 	ldw	r2,-40(fp)
  81079c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  8107a0:	e0bffb03 	ldbu	r2,-20(fp)
  8107a4:	108001cc 	andi	r2,r2,7
  8107a8:	1007883a 	mov	r3,r2
  8107ac:	e0bff617 	ldw	r2,-40(fp)
  8107b0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  8107b4:	e0bff617 	ldw	r2,-40(fp)
  8107b8:	10800d03 	ldbu	r2,52(r2)
  8107bc:	10803fcc 	andi	r2,r2,255
  8107c0:	00c00044 	movi	r3,1
  8107c4:	1884983a 	sll	r2,r3,r2
  8107c8:	1007883a 	mov	r3,r2
  8107cc:	e0bff617 	ldw	r2,-40(fp)
  8107d0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  8107d4:	e0bff617 	ldw	r2,-40(fp)
  8107d8:	10800cc3 	ldbu	r2,51(r2)
  8107dc:	10803fcc 	andi	r2,r2,255
  8107e0:	00c00044 	movi	r3,1
  8107e4:	1884983a 	sll	r2,r3,r2
  8107e8:	1007883a 	mov	r3,r2
  8107ec:	e0bff617 	ldw	r2,-40(fp)
  8107f0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  8107f4:	e0bff617 	ldw	r2,-40(fp)
  8107f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  8107fc:	e0bff617 	ldw	r2,-40(fp)
  810800:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  810804:	e0bff617 	ldw	r2,-40(fp)
  810808:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  81080c:	e0bff617 	ldw	r2,-40(fp)
  810810:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  810814:	e0bff617 	ldw	r2,-40(fp)
  810818:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  81081c:	e0bff617 	ldw	r2,-40(fp)
  810820:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  810824:	e0bff617 	ldw	r2,-40(fp)
  810828:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  81082c:	e0bff617 	ldw	r2,-40(fp)
  810830:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  810834:	e0bff617 	ldw	r2,-40(fp)
  810838:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  81083c:	e0bff617 	ldw	r2,-40(fp)
  810840:	00c00fc4 	movi	r3,63
  810844:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  810848:	e0bff617 	ldw	r2,-40(fp)
  81084c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  810850:	e13ff617 	ldw	r4,-40(fp)
  810854:	0819a200 	call	819a20 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  810858:	e13ff617 	ldw	r4,-40(fp)
  81085c:	08199180 	call	819918 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810860:	0005303a 	rdctl	r2,status
  810864:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810868:	e0fff517 	ldw	r3,-44(fp)
  81086c:	00bfff84 	movi	r2,-2
  810870:	1884703a 	and	r2,r3,r2
  810874:	1001703a 	wrctl	status,r2
  
  return context;
  810878:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  81087c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  810880:	e0fffb03 	ldbu	r3,-20(fp)
  810884:	008020b4 	movhi	r2,130
  810888:	1098f804 	addi	r2,r2,25568
  81088c:	18c7883a 	add	r3,r3,r3
  810890:	18c7883a 	add	r3,r3,r3
  810894:	10c5883a 	add	r2,r2,r3
  810898:	e0fff617 	ldw	r3,-40(fp)
  81089c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  8108a0:	d0e06817 	ldw	r3,-32352(gp)
  8108a4:	e0bff617 	ldw	r2,-40(fp)
  8108a8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  8108ac:	e0bff617 	ldw	r2,-40(fp)
  8108b0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  8108b4:	d0a06817 	ldw	r2,-32352(gp)
  8108b8:	10000326 	beq	r2,zero,8108c8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  8108bc:	d0a06817 	ldw	r2,-32352(gp)
  8108c0:	e0fff617 	ldw	r3,-40(fp)
  8108c4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  8108c8:	e0bff617 	ldw	r2,-40(fp)
  8108cc:	d0a06815 	stw	r2,-32352(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  8108d0:	e0bff617 	ldw	r2,-40(fp)
  8108d4:	10c00d83 	ldbu	r3,54(r2)
  8108d8:	d0a07103 	ldbu	r2,-32316(gp)
  8108dc:	1884b03a 	or	r2,r3,r2
  8108e0:	d0a07105 	stb	r2,-32316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8108e4:	e0bff617 	ldw	r2,-40(fp)
  8108e8:	10800d03 	ldbu	r2,52(r2)
  8108ec:	10c03fcc 	andi	r3,r2,255
  8108f0:	e0bff617 	ldw	r2,-40(fp)
  8108f4:	10800d03 	ldbu	r2,52(r2)
  8108f8:	11003fcc 	andi	r4,r2,255
  8108fc:	d0a07144 	addi	r2,gp,-32315
  810900:	2085883a 	add	r2,r4,r2
  810904:	11000003 	ldbu	r4,0(r2)
  810908:	e0bff617 	ldw	r2,-40(fp)
  81090c:	10800d43 	ldbu	r2,53(r2)
  810910:	2084b03a 	or	r2,r4,r2
  810914:	1009883a 	mov	r4,r2
  810918:	d0a07144 	addi	r2,gp,-32315
  81091c:	1885883a 	add	r2,r3,r2
  810920:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  810924:	d0a06d43 	ldbu	r2,-32331(gp)
  810928:	10800044 	addi	r2,r2,1
  81092c:	d0a06d45 	stb	r2,-32331(gp)
  810930:	e0bff417 	ldw	r2,-48(fp)
  810934:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810938:	e0bff717 	ldw	r2,-36(fp)
  81093c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  810940:	0005883a 	mov	r2,zero
  810944:	00000506 	br	81095c <OS_TCBInit+0x2c0>
  810948:	e0bff417 	ldw	r2,-48(fp)
  81094c:	e0bff915 	stw	r2,-28(fp)
  810950:	e0bff917 	ldw	r2,-28(fp)
  810954:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  810958:	00801084 	movi	r2,66
}
  81095c:	e037883a 	mov	sp,fp
  810960:	dfc00117 	ldw	ra,4(sp)
  810964:	df000017 	ldw	fp,0(sp)
  810968:	dec00204 	addi	sp,sp,8
  81096c:	f800283a 	ret

00810970 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  810970:	defffe04 	addi	sp,sp,-8
  810974:	df000115 	stw	fp,4(sp)
  810978:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  81097c:	d0a02c04 	addi	r2,gp,-32592
  810980:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  810984:	d0a02d04 	addi	r2,gp,-32588
  810988:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  81098c:	d0a02e84 	addi	r2,gp,-32582
  810990:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  810994:	d0a02f04 	addi	r2,gp,-32580
  810998:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  81099c:	d0a02e04 	addi	r2,gp,-32584
  8109a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  8109a4:	d0a02f84 	addi	r2,gp,-32578
  8109a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  8109ac:	d0a03004 	addi	r2,gp,-32576
  8109b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  8109b4:	d0a03084 	addi	r2,gp,-32574
  8109b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  8109bc:	d0a03104 	addi	r2,gp,-32572
  8109c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  8109c4:	d0a03184 	addi	r2,gp,-32570
  8109c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  8109cc:	d0a03204 	addi	r2,gp,-32568
  8109d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  8109d4:	d0a03284 	addi	r2,gp,-32566
  8109d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  8109dc:	d0a03304 	addi	r2,gp,-32564
  8109e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  8109e4:	d0a03384 	addi	r2,gp,-32562
  8109e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  8109ec:	d0a03404 	addi	r2,gp,-32560
  8109f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  8109f4:	d0a03484 	addi	r2,gp,-32558
  8109f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  8109fc:	d0a03504 	addi	r2,gp,-32556
  810a00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  810a04:	d0a03584 	addi	r2,gp,-32554
  810a08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  810a0c:	d0a03604 	addi	r2,gp,-32552
  810a10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  810a14:	d0a03684 	addi	r2,gp,-32550
  810a18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  810a1c:	d0a03704 	addi	r2,gp,-32548
  810a20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  810a24:	d0a03784 	addi	r2,gp,-32546
  810a28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  810a2c:	d0a03804 	addi	r2,gp,-32544
  810a30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  810a34:	d0a03884 	addi	r2,gp,-32542
  810a38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  810a3c:	d0a03904 	addi	r2,gp,-32540
  810a40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  810a44:	d0a03984 	addi	r2,gp,-32538
  810a48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  810a4c:	d0a03a04 	addi	r2,gp,-32536
  810a50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  810a54:	d0a03a84 	addi	r2,gp,-32534
  810a58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  810a5c:	d0a03b04 	addi	r2,gp,-32532
  810a60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  810a64:	d0a03b84 	addi	r2,gp,-32530
  810a68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  810a6c:	d0a03c04 	addi	r2,gp,-32528
  810a70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  810a74:	d0a03c84 	addi	r2,gp,-32526
  810a78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  810a7c:	d0a03d04 	addi	r2,gp,-32524
  810a80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  810a84:	d0a03d84 	addi	r2,gp,-32522
  810a88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  810a8c:	d0a03e04 	addi	r2,gp,-32520
  810a90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  810a94:	d0a03e84 	addi	r2,gp,-32518
  810a98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  810a9c:	d0a03f04 	addi	r2,gp,-32516
  810aa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  810aa4:	d0a03f84 	addi	r2,gp,-32514
  810aa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  810aac:	d0a04004 	addi	r2,gp,-32512
  810ab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  810ab4:	d0a04084 	addi	r2,gp,-32510
  810ab8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  810abc:	d0a04104 	addi	r2,gp,-32508
  810ac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  810ac4:	d0a04184 	addi	r2,gp,-32506
  810ac8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  810acc:	d0a04204 	addi	r2,gp,-32504
  810ad0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  810ad4:	d0a04284 	addi	r2,gp,-32502
  810ad8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  810adc:	d0a04304 	addi	r2,gp,-32500
  810ae0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  810ae4:	d0a04804 	addi	r2,gp,-32480
  810ae8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  810aec:	0001883a 	nop
  810af0:	e037883a 	mov	sp,fp
  810af4:	df000017 	ldw	fp,0(sp)
  810af8:	dec00104 	addi	sp,sp,4
  810afc:	f800283a 	ret

00810b00 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  810b00:	defff204 	addi	sp,sp,-56
  810b04:	df000d15 	stw	fp,52(sp)
  810b08:	df000d04 	addi	fp,sp,52
  810b0c:	e13ffc15 	stw	r4,-16(fp)
  810b10:	2807883a 	mov	r3,r5
  810b14:	3005883a 	mov	r2,r6
  810b18:	e1ffff15 	stw	r7,-4(fp)
  810b1c:	e0fffd0d 	sth	r3,-12(fp)
  810b20:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810b24:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810b28:	e0bfff17 	ldw	r2,-4(fp)
  810b2c:	1000021e 	bne	r2,zero,810b38 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  810b30:	0005883a 	mov	r2,zero
  810b34:	0000b006 	br	810df8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  810b38:	e0bffc17 	ldw	r2,-16(fp)
  810b3c:	1000051e 	bne	r2,zero,810b54 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810b40:	e0bfff17 	ldw	r2,-4(fp)
  810b44:	00c01b84 	movi	r3,110
  810b48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810b4c:	0005883a 	mov	r2,zero
  810b50:	0000a906 	br	810df8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  810b54:	e0bffc17 	ldw	r2,-16(fp)
  810b58:	10800003 	ldbu	r2,0(r2)
  810b5c:	10803fcc 	andi	r2,r2,255
  810b60:	10800160 	cmpeqi	r2,r2,5
  810b64:	1000051e 	bne	r2,zero,810b7c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  810b68:	e0bfff17 	ldw	r2,-4(fp)
  810b6c:	00c00044 	movi	r3,1
  810b70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  810b74:	0005883a 	mov	r2,zero
  810b78:	00009f06 	br	810df8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  810b7c:	e0fffe03 	ldbu	r3,-8(fp)
  810b80:	00bfe004 	movi	r2,-128
  810b84:	1884703a 	and	r2,r3,r2
  810b88:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  810b8c:	e0bff503 	ldbu	r2,-44(fp)
  810b90:	10000626 	beq	r2,zero,810bac <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  810b94:	e0bffe03 	ldbu	r2,-8(fp)
  810b98:	10801fcc 	andi	r2,r2,127
  810b9c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  810ba0:	00800044 	movi	r2,1
  810ba4:	e0bff385 	stb	r2,-50(fp)
  810ba8:	00000106 	br	810bb0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  810bac:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  810bb0:	e0bfff17 	ldw	r2,-4(fp)
  810bb4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810bb8:	0005303a 	rdctl	r2,status
  810bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810bc0:	e0fffb17 	ldw	r3,-20(fp)
  810bc4:	00bfff84 	movi	r2,-2
  810bc8:	1884703a 	and	r2,r3,r2
  810bcc:	1001703a 	wrctl	status,r2
  
  return context;
  810bd0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  810bd4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  810bd8:	e0bffe03 	ldbu	r2,-8(fp)
  810bdc:	10c00060 	cmpeqi	r3,r2,1
  810be0:	18005f1e 	bne	r3,zero,810d60 <OSFlagAccept+0x260>
  810be4:	10c00088 	cmpgei	r3,r2,2
  810be8:	1800021e 	bne	r3,zero,810bf4 <OSFlagAccept+0xf4>
  810bec:	10003f26 	beq	r2,zero,810cec <OSFlagAccept+0x1ec>
  810bf0:	00007706 	br	810dd0 <OSFlagAccept+0x2d0>
  810bf4:	10c000a0 	cmpeqi	r3,r2,2
  810bf8:	1800031e 	bne	r3,zero,810c08 <OSFlagAccept+0x108>
  810bfc:	108000e0 	cmpeqi	r2,r2,3
  810c00:	10001e1e 	bne	r2,zero,810c7c <OSFlagAccept+0x17c>
  810c04:	00007206 	br	810dd0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  810c08:	e0bffc17 	ldw	r2,-16(fp)
  810c0c:	10c0020b 	ldhu	r3,8(r2)
  810c10:	e0bffd0b 	ldhu	r2,-12(fp)
  810c14:	1884703a 	and	r2,r3,r2
  810c18:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  810c1c:	e0fff30b 	ldhu	r3,-52(fp)
  810c20:	e0bffd0b 	ldhu	r2,-12(fp)
  810c24:	18800d1e 	bne	r3,r2,810c5c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810c28:	e0bff383 	ldbu	r2,-50(fp)
  810c2c:	10800058 	cmpnei	r2,r2,1
  810c30:	10000d1e 	bne	r2,zero,810c68 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  810c34:	e0bffc17 	ldw	r2,-16(fp)
  810c38:	1080020b 	ldhu	r2,8(r2)
  810c3c:	1007883a 	mov	r3,r2
  810c40:	e0bff30b 	ldhu	r2,-52(fp)
  810c44:	0084303a 	nor	r2,zero,r2
  810c48:	1884703a 	and	r2,r3,r2
  810c4c:	1007883a 	mov	r3,r2
  810c50:	e0bffc17 	ldw	r2,-16(fp)
  810c54:	10c0020d 	sth	r3,8(r2)
  810c58:	00000306 	br	810c68 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  810c5c:	e0bfff17 	ldw	r2,-4(fp)
  810c60:	00c01c04 	movi	r3,112
  810c64:	10c00005 	stb	r3,0(r2)
  810c68:	e0bff417 	ldw	r2,-48(fp)
  810c6c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c70:	e0bff617 	ldw	r2,-40(fp)
  810c74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810c78:	00005e06 	br	810df4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  810c7c:	e0bffc17 	ldw	r2,-16(fp)
  810c80:	10c0020b 	ldhu	r3,8(r2)
  810c84:	e0bffd0b 	ldhu	r2,-12(fp)
  810c88:	1884703a 	and	r2,r3,r2
  810c8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  810c90:	e0bff30b 	ldhu	r2,-52(fp)
  810c94:	10000d26 	beq	r2,zero,810ccc <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810c98:	e0bff383 	ldbu	r2,-50(fp)
  810c9c:	10800058 	cmpnei	r2,r2,1
  810ca0:	10000d1e 	bne	r2,zero,810cd8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  810ca4:	e0bffc17 	ldw	r2,-16(fp)
  810ca8:	1080020b 	ldhu	r2,8(r2)
  810cac:	1007883a 	mov	r3,r2
  810cb0:	e0bff30b 	ldhu	r2,-52(fp)
  810cb4:	0084303a 	nor	r2,zero,r2
  810cb8:	1884703a 	and	r2,r3,r2
  810cbc:	1007883a 	mov	r3,r2
  810cc0:	e0bffc17 	ldw	r2,-16(fp)
  810cc4:	10c0020d 	sth	r3,8(r2)
  810cc8:	00000306 	br	810cd8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  810ccc:	e0bfff17 	ldw	r2,-4(fp)
  810cd0:	00c01c04 	movi	r3,112
  810cd4:	10c00005 	stb	r3,0(r2)
  810cd8:	e0bff417 	ldw	r2,-48(fp)
  810cdc:	e0bff715 	stw	r2,-36(fp)
  810ce0:	e0bff717 	ldw	r2,-36(fp)
  810ce4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810ce8:	00004206 	br	810df4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  810cec:	e0bffc17 	ldw	r2,-16(fp)
  810cf0:	1080020b 	ldhu	r2,8(r2)
  810cf4:	0084303a 	nor	r2,zero,r2
  810cf8:	1007883a 	mov	r3,r2
  810cfc:	e0bffd0b 	ldhu	r2,-12(fp)
  810d00:	1884703a 	and	r2,r3,r2
  810d04:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  810d08:	e0fff30b 	ldhu	r3,-52(fp)
  810d0c:	e0bffd0b 	ldhu	r2,-12(fp)
  810d10:	18800b1e 	bne	r3,r2,810d40 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810d14:	e0bff383 	ldbu	r2,-50(fp)
  810d18:	10800058 	cmpnei	r2,r2,1
  810d1c:	10000b1e 	bne	r2,zero,810d4c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  810d20:	e0bffc17 	ldw	r2,-16(fp)
  810d24:	10c0020b 	ldhu	r3,8(r2)
  810d28:	e0bff30b 	ldhu	r2,-52(fp)
  810d2c:	1884b03a 	or	r2,r3,r2
  810d30:	1007883a 	mov	r3,r2
  810d34:	e0bffc17 	ldw	r2,-16(fp)
  810d38:	10c0020d 	sth	r3,8(r2)
  810d3c:	00000306 	br	810d4c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  810d40:	e0bfff17 	ldw	r2,-4(fp)
  810d44:	00c01c04 	movi	r3,112
  810d48:	10c00005 	stb	r3,0(r2)
  810d4c:	e0bff417 	ldw	r2,-48(fp)
  810d50:	e0bff815 	stw	r2,-32(fp)
  810d54:	e0bff817 	ldw	r2,-32(fp)
  810d58:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810d5c:	00002506 	br	810df4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  810d60:	e0bffc17 	ldw	r2,-16(fp)
  810d64:	1080020b 	ldhu	r2,8(r2)
  810d68:	0084303a 	nor	r2,zero,r2
  810d6c:	1007883a 	mov	r3,r2
  810d70:	e0bffd0b 	ldhu	r2,-12(fp)
  810d74:	1884703a 	and	r2,r3,r2
  810d78:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  810d7c:	e0bff30b 	ldhu	r2,-52(fp)
  810d80:	10000b26 	beq	r2,zero,810db0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810d84:	e0bff383 	ldbu	r2,-50(fp)
  810d88:	10800058 	cmpnei	r2,r2,1
  810d8c:	10000b1e 	bne	r2,zero,810dbc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  810d90:	e0bffc17 	ldw	r2,-16(fp)
  810d94:	10c0020b 	ldhu	r3,8(r2)
  810d98:	e0bff30b 	ldhu	r2,-52(fp)
  810d9c:	1884b03a 	or	r2,r3,r2
  810da0:	1007883a 	mov	r3,r2
  810da4:	e0bffc17 	ldw	r2,-16(fp)
  810da8:	10c0020d 	sth	r3,8(r2)
  810dac:	00000306 	br	810dbc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  810db0:	e0bfff17 	ldw	r2,-4(fp)
  810db4:	00c01c04 	movi	r3,112
  810db8:	10c00005 	stb	r3,0(r2)
  810dbc:	e0bff417 	ldw	r2,-48(fp)
  810dc0:	e0bff915 	stw	r2,-28(fp)
  810dc4:	e0bff917 	ldw	r2,-28(fp)
  810dc8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  810dcc:	00000906 	br	810df4 <OSFlagAccept+0x2f4>
  810dd0:	e0bff417 	ldw	r2,-48(fp)
  810dd4:	e0bffa15 	stw	r2,-24(fp)
  810dd8:	e0bffa17 	ldw	r2,-24(fp)
  810ddc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  810de0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  810de4:	e0bfff17 	ldw	r2,-4(fp)
  810de8:	00c01bc4 	movi	r3,111
  810dec:	10c00005 	stb	r3,0(r2)
             break;
  810df0:	0001883a 	nop
    }
    return (flags_rdy);
  810df4:	e0bff30b 	ldhu	r2,-52(fp)
}
  810df8:	e037883a 	mov	sp,fp
  810dfc:	df000017 	ldw	fp,0(sp)
  810e00:	dec00104 	addi	sp,sp,4
  810e04:	f800283a 	ret

00810e08 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  810e08:	defff804 	addi	sp,sp,-32
  810e0c:	df000715 	stw	fp,28(sp)
  810e10:	df000704 	addi	fp,sp,28
  810e14:	2005883a 	mov	r2,r4
  810e18:	e17fff15 	stw	r5,-4(fp)
  810e1c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  810e20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  810e24:	e0bfff17 	ldw	r2,-4(fp)
  810e28:	1000021e 	bne	r2,zero,810e34 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  810e2c:	0005883a 	mov	r2,zero
  810e30:	00003306 	br	810f00 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  810e34:	d0a07303 	ldbu	r2,-32308(gp)
  810e38:	10803fcc 	andi	r2,r2,255
  810e3c:	10000526 	beq	r2,zero,810e54 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  810e40:	e0bfff17 	ldw	r2,-4(fp)
  810e44:	00c00404 	movi	r3,16
  810e48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  810e4c:	0005883a 	mov	r2,zero
  810e50:	00002b06 	br	810f00 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e54:	0005303a 	rdctl	r2,status
  810e58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e5c:	e0fffd17 	ldw	r3,-12(fp)
  810e60:	00bfff84 	movi	r2,-2
  810e64:	1884703a 	and	r2,r3,r2
  810e68:	1001703a 	wrctl	status,r2
  
  return context;
  810e6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  810e70:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  810e74:	d0a07617 	ldw	r2,-32296(gp)
  810e78:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  810e7c:	e0bffb17 	ldw	r2,-20(fp)
  810e80:	10001726 	beq	r2,zero,810ee0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  810e84:	d0a07617 	ldw	r2,-32296(gp)
  810e88:	10800117 	ldw	r2,4(r2)
  810e8c:	d0a07615 	stw	r2,-32296(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  810e90:	e0bffb17 	ldw	r2,-20(fp)
  810e94:	00c00144 	movi	r3,5
  810e98:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  810e9c:	e0bffb17 	ldw	r2,-20(fp)
  810ea0:	e0fffe0b 	ldhu	r3,-8(fp)
  810ea4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  810ea8:	e0bffb17 	ldw	r2,-20(fp)
  810eac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  810eb0:	e0bffb17 	ldw	r2,-20(fp)
  810eb4:	00c00fc4 	movi	r3,63
  810eb8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  810ebc:	e0bffb17 	ldw	r2,-20(fp)
  810ec0:	100002c5 	stb	zero,11(r2)
  810ec4:	e0bff917 	ldw	r2,-28(fp)
  810ec8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ecc:	e0bffa17 	ldw	r2,-24(fp)
  810ed0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  810ed4:	e0bfff17 	ldw	r2,-4(fp)
  810ed8:	10000005 	stb	zero,0(r2)
  810edc:	00000706 	br	810efc <OSFlagCreate+0xf4>
  810ee0:	e0bff917 	ldw	r2,-28(fp)
  810ee4:	e0bffc15 	stw	r2,-16(fp)
  810ee8:	e0bffc17 	ldw	r2,-16(fp)
  810eec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  810ef0:	e0bfff17 	ldw	r2,-4(fp)
  810ef4:	00c01c84 	movi	r3,114
  810ef8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  810efc:	e0bffb17 	ldw	r2,-20(fp)
}
  810f00:	e037883a 	mov	sp,fp
  810f04:	df000017 	ldw	fp,0(sp)
  810f08:	dec00104 	addi	sp,sp,4
  810f0c:	f800283a 	ret

00810f10 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  810f10:	defff204 	addi	sp,sp,-56
  810f14:	dfc00d15 	stw	ra,52(sp)
  810f18:	df000c15 	stw	fp,48(sp)
  810f1c:	df000c04 	addi	fp,sp,48
  810f20:	e13ffd15 	stw	r4,-12(fp)
  810f24:	2805883a 	mov	r2,r5
  810f28:	e1bfff15 	stw	r6,-4(fp)
  810f2c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810f30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810f34:	e0bfff17 	ldw	r2,-4(fp)
  810f38:	1000021e 	bne	r2,zero,810f44 <OSFlagDel+0x34>
        return (pgrp);
  810f3c:	e0bffd17 	ldw	r2,-12(fp)
  810f40:	00008006 	br	811144 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  810f44:	e0bffd17 	ldw	r2,-12(fp)
  810f48:	1000051e 	bne	r2,zero,810f60 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810f4c:	e0bfff17 	ldw	r2,-4(fp)
  810f50:	00c01b84 	movi	r3,110
  810f54:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  810f58:	e0bffd17 	ldw	r2,-12(fp)
  810f5c:	00007906 	br	811144 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810f60:	d0a07303 	ldbu	r2,-32308(gp)
  810f64:	10803fcc 	andi	r2,r2,255
  810f68:	10000526 	beq	r2,zero,810f80 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  810f6c:	e0bfff17 	ldw	r2,-4(fp)
  810f70:	00c003c4 	movi	r3,15
  810f74:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  810f78:	e0bffd17 	ldw	r2,-12(fp)
  810f7c:	00007106 	br	811144 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  810f80:	e0bffd17 	ldw	r2,-12(fp)
  810f84:	10800003 	ldbu	r2,0(r2)
  810f88:	10803fcc 	andi	r2,r2,255
  810f8c:	10800160 	cmpeqi	r2,r2,5
  810f90:	1000051e 	bne	r2,zero,810fa8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  810f94:	e0bfff17 	ldw	r2,-4(fp)
  810f98:	00c00044 	movi	r3,1
  810f9c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  810fa0:	e0bffd17 	ldw	r2,-12(fp)
  810fa4:	00006706 	br	811144 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fa8:	0005303a 	rdctl	r2,status
  810fac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810fb0:	e0fffc17 	ldw	r3,-16(fp)
  810fb4:	00bfff84 	movi	r2,-2
  810fb8:	1884703a 	and	r2,r3,r2
  810fbc:	1001703a 	wrctl	status,r2
  
  return context;
  810fc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  810fc4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  810fc8:	e0bffd17 	ldw	r2,-12(fp)
  810fcc:	10800117 	ldw	r2,4(r2)
  810fd0:	10000326 	beq	r2,zero,810fe0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  810fd4:	00800044 	movi	r2,1
  810fd8:	e0bff405 	stb	r2,-48(fp)
  810fdc:	00000106 	br	810fe4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  810fe0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  810fe4:	e0bffe03 	ldbu	r2,-8(fp)
  810fe8:	10000326 	beq	r2,zero,810ff8 <OSFlagDel+0xe8>
  810fec:	10800060 	cmpeqi	r2,r2,1
  810ff0:	1000231e 	bne	r2,zero,811080 <OSFlagDel+0x170>
  810ff4:	00004806 	br	811118 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  810ff8:	e0bff403 	ldbu	r2,-48(fp)
  810ffc:	1000161e 	bne	r2,zero,811058 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  811000:	e0bffd17 	ldw	r2,-12(fp)
  811004:	00c00fc4 	movi	r3,63
  811008:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  81100c:	e0bffd17 	ldw	r2,-12(fp)
  811010:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811014:	e0bffd17 	ldw	r2,-12(fp)
  811018:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  81101c:	d0e07617 	ldw	r3,-32296(gp)
  811020:	e0bffd17 	ldw	r2,-12(fp)
  811024:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  811028:	e0bffd17 	ldw	r2,-12(fp)
  81102c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  811030:	e0bffd17 	ldw	r2,-12(fp)
  811034:	d0a07615 	stw	r2,-32296(gp)
  811038:	e0bff717 	ldw	r2,-36(fp)
  81103c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811040:	e0bff817 	ldw	r2,-32(fp)
  811044:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  811048:	e0bfff17 	ldw	r2,-4(fp)
  81104c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  811050:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  811054:	00003a06 	br	811140 <OSFlagDel+0x230>
  811058:	e0bff717 	ldw	r2,-36(fp)
  81105c:	e0bff915 	stw	r2,-28(fp)
  811060:	e0bff917 	ldw	r2,-28(fp)
  811064:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  811068:	e0bfff17 	ldw	r2,-4(fp)
  81106c:	00c01244 	movi	r3,73
  811070:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  811074:	e0bffd17 	ldw	r2,-12(fp)
  811078:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  81107c:	00003006 	br	811140 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  811080:	e0bffd17 	ldw	r2,-12(fp)
  811084:	10800117 	ldw	r2,4(r2)
  811088:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81108c:	00000606 	br	8110a8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  811090:	000b883a 	mov	r5,zero
  811094:	e13ff517 	ldw	r4,-44(fp)
  811098:	081207c0 	call	81207c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81109c:	e0bff517 	ldw	r2,-44(fp)
  8110a0:	10800017 	ldw	r2,0(r2)
  8110a4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8110a8:	e0bff517 	ldw	r2,-44(fp)
  8110ac:	103ff81e 	bne	r2,zero,811090 <__alt_mem_epcs_flash_controller_0+0xff808090>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  8110b0:	e0bffd17 	ldw	r2,-12(fp)
  8110b4:	00c00fc4 	movi	r3,63
  8110b8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8110bc:	e0bffd17 	ldw	r2,-12(fp)
  8110c0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8110c4:	e0bffd17 	ldw	r2,-12(fp)
  8110c8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8110cc:	d0e07617 	ldw	r3,-32296(gp)
  8110d0:	e0bffd17 	ldw	r2,-12(fp)
  8110d4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8110d8:	e0bffd17 	ldw	r2,-12(fp)
  8110dc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  8110e0:	e0bffd17 	ldw	r2,-12(fp)
  8110e4:	d0a07615 	stw	r2,-32296(gp)
  8110e8:	e0bff717 	ldw	r2,-36(fp)
  8110ec:	e0bffa15 	stw	r2,-24(fp)
  8110f0:	e0bffa17 	ldw	r2,-24(fp)
  8110f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8110f8:	e0bff403 	ldbu	r2,-48(fp)
  8110fc:	10800058 	cmpnei	r2,r2,1
  811100:	1000011e 	bne	r2,zero,811108 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  811104:	081029c0 	call	81029c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  811108:	e0bfff17 	ldw	r2,-4(fp)
  81110c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  811110:	e03ff615 	stw	zero,-40(fp)
             break;
  811114:	00000a06 	br	811140 <OSFlagDel+0x230>
  811118:	e0bff717 	ldw	r2,-36(fp)
  81111c:	e0bffb15 	stw	r2,-20(fp)
  811120:	e0bffb17 	ldw	r2,-20(fp)
  811124:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  811128:	e0bfff17 	ldw	r2,-4(fp)
  81112c:	00c001c4 	movi	r3,7
  811130:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  811134:	e0bffd17 	ldw	r2,-12(fp)
  811138:	e0bff615 	stw	r2,-40(fp)
             break;
  81113c:	0001883a 	nop
    }
    return (pgrp_return);
  811140:	e0bff617 	ldw	r2,-40(fp)
}
  811144:	e037883a 	mov	sp,fp
  811148:	dfc00117 	ldw	ra,4(sp)
  81114c:	df000017 	ldw	fp,0(sp)
  811150:	dec00204 	addi	sp,sp,8
  811154:	f800283a 	ret

00811158 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  811158:	defff604 	addi	sp,sp,-40
  81115c:	dfc00915 	stw	ra,36(sp)
  811160:	df000815 	stw	fp,32(sp)
  811164:	df000804 	addi	fp,sp,32
  811168:	e13ffd15 	stw	r4,-12(fp)
  81116c:	e17ffe15 	stw	r5,-8(fp)
  811170:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811174:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811178:	e0bfff17 	ldw	r2,-4(fp)
  81117c:	1000021e 	bne	r2,zero,811188 <OSFlagNameGet+0x30>
        return (0);
  811180:	0005883a 	mov	r2,zero
  811184:	00003906 	br	81126c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  811188:	e0bffd17 	ldw	r2,-12(fp)
  81118c:	1000051e 	bne	r2,zero,8111a4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811190:	e0bfff17 	ldw	r2,-4(fp)
  811194:	00c01b84 	movi	r3,110
  811198:	10c00005 	stb	r3,0(r2)
        return (0);
  81119c:	0005883a 	mov	r2,zero
  8111a0:	00003206 	br	81126c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8111a4:	e0bffe17 	ldw	r2,-8(fp)
  8111a8:	1000051e 	bne	r2,zero,8111c0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  8111ac:	e0bfff17 	ldw	r2,-4(fp)
  8111b0:	00c00304 	movi	r3,12
  8111b4:	10c00005 	stb	r3,0(r2)
        return (0);
  8111b8:	0005883a 	mov	r2,zero
  8111bc:	00002b06 	br	81126c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8111c0:	d0a07303 	ldbu	r2,-32308(gp)
  8111c4:	10803fcc 	andi	r2,r2,255
  8111c8:	10000526 	beq	r2,zero,8111e0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  8111cc:	e0bfff17 	ldw	r2,-4(fp)
  8111d0:	00c00444 	movi	r3,17
  8111d4:	10c00005 	stb	r3,0(r2)
        return (0);
  8111d8:	0005883a 	mov	r2,zero
  8111dc:	00002306 	br	81126c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8111e0:	0005303a 	rdctl	r2,status
  8111e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8111e8:	e0fffc17 	ldw	r3,-16(fp)
  8111ec:	00bfff84 	movi	r2,-2
  8111f0:	1884703a 	and	r2,r3,r2
  8111f4:	1001703a 	wrctl	status,r2
  
  return context;
  8111f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8111fc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  811200:	e0bffd17 	ldw	r2,-12(fp)
  811204:	10800003 	ldbu	r2,0(r2)
  811208:	10803fcc 	andi	r2,r2,255
  81120c:	10800160 	cmpeqi	r2,r2,5
  811210:	1000091e 	bne	r2,zero,811238 <OSFlagNameGet+0xe0>
  811214:	e0bff817 	ldw	r2,-32(fp)
  811218:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81121c:	e0bff917 	ldw	r2,-28(fp)
  811220:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  811224:	e0bfff17 	ldw	r2,-4(fp)
  811228:	00c00044 	movi	r3,1
  81122c:	10c00005 	stb	r3,0(r2)
        return (0);
  811230:	0005883a 	mov	r2,zero
  811234:	00000d06 	br	81126c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  811238:	e0bffd17 	ldw	r2,-12(fp)
  81123c:	10800284 	addi	r2,r2,10
  811240:	100b883a 	mov	r5,r2
  811244:	e13ffe17 	ldw	r4,-8(fp)
  811248:	08103e00 	call	8103e0 <OS_StrCopy>
  81124c:	e0bffb05 	stb	r2,-20(fp)
  811250:	e0bff817 	ldw	r2,-32(fp)
  811254:	e0bffa15 	stw	r2,-24(fp)
  811258:	e0bffa17 	ldw	r2,-24(fp)
  81125c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811260:	e0bfff17 	ldw	r2,-4(fp)
  811264:	10000005 	stb	zero,0(r2)
    return (len);
  811268:	e0bffb03 	ldbu	r2,-20(fp)
}
  81126c:	e037883a 	mov	sp,fp
  811270:	dfc00117 	ldw	ra,4(sp)
  811274:	df000017 	ldw	fp,0(sp)
  811278:	dec00204 	addi	sp,sp,8
  81127c:	f800283a 	ret

00811280 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  811280:	defff504 	addi	sp,sp,-44
  811284:	dfc00a15 	stw	ra,40(sp)
  811288:	df000915 	stw	fp,36(sp)
  81128c:	df000904 	addi	fp,sp,36
  811290:	e13ffd15 	stw	r4,-12(fp)
  811294:	e17ffe15 	stw	r5,-8(fp)
  811298:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81129c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8112a0:	e0bfff17 	ldw	r2,-4(fp)
  8112a4:	10004326 	beq	r2,zero,8113b4 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8112a8:	e0bffd17 	ldw	r2,-12(fp)
  8112ac:	1000041e 	bne	r2,zero,8112c0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8112b0:	e0bfff17 	ldw	r2,-4(fp)
  8112b4:	00c01b84 	movi	r3,110
  8112b8:	10c00005 	stb	r3,0(r2)
        return;
  8112bc:	00003e06 	br	8113b8 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8112c0:	e0bffe17 	ldw	r2,-8(fp)
  8112c4:	1000041e 	bne	r2,zero,8112d8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  8112c8:	e0bfff17 	ldw	r2,-4(fp)
  8112cc:	00c00304 	movi	r3,12
  8112d0:	10c00005 	stb	r3,0(r2)
        return;
  8112d4:	00003806 	br	8113b8 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8112d8:	d0a07303 	ldbu	r2,-32308(gp)
  8112dc:	10803fcc 	andi	r2,r2,255
  8112e0:	10000426 	beq	r2,zero,8112f4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8112e4:	e0bfff17 	ldw	r2,-4(fp)
  8112e8:	00c00484 	movi	r3,18
  8112ec:	10c00005 	stb	r3,0(r2)
        return;
  8112f0:	00003106 	br	8113b8 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8112f4:	0005303a 	rdctl	r2,status
  8112f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112fc:	e0fffc17 	ldw	r3,-16(fp)
  811300:	00bfff84 	movi	r2,-2
  811304:	1884703a 	and	r2,r3,r2
  811308:	1001703a 	wrctl	status,r2
  
  return context;
  81130c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  811310:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  811314:	e0bffd17 	ldw	r2,-12(fp)
  811318:	10800003 	ldbu	r2,0(r2)
  81131c:	10803fcc 	andi	r2,r2,255
  811320:	10800160 	cmpeqi	r2,r2,5
  811324:	1000081e 	bne	r2,zero,811348 <OSFlagNameSet+0xc8>
  811328:	e0bff717 	ldw	r2,-36(fp)
  81132c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811330:	e0bff817 	ldw	r2,-32(fp)
  811334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  811338:	e0bfff17 	ldw	r2,-4(fp)
  81133c:	00c00044 	movi	r3,1
  811340:	10c00005 	stb	r3,0(r2)
        return;
  811344:	00001c06 	br	8113b8 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  811348:	e13ffe17 	ldw	r4,-8(fp)
  81134c:	08104540 	call	810454 <OS_StrLen>
  811350:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  811354:	e0bffa03 	ldbu	r2,-24(fp)
  811358:	10800830 	cmpltui	r2,r2,32
  81135c:	1000081e 	bne	r2,zero,811380 <OSFlagNameSet+0x100>
  811360:	e0bff717 	ldw	r2,-36(fp)
  811364:	e0bff915 	stw	r2,-28(fp)
  811368:	e0bff917 	ldw	r2,-28(fp)
  81136c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  811370:	e0bfff17 	ldw	r2,-4(fp)
  811374:	00c01cc4 	movi	r3,115
  811378:	10c00005 	stb	r3,0(r2)
        return;
  81137c:	00000e06 	br	8113b8 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  811380:	e0bffd17 	ldw	r2,-12(fp)
  811384:	10800284 	addi	r2,r2,10
  811388:	e17ffe17 	ldw	r5,-8(fp)
  81138c:	1009883a 	mov	r4,r2
  811390:	08103e00 	call	8103e0 <OS_StrCopy>
  811394:	e0bff717 	ldw	r2,-36(fp)
  811398:	e0bffb15 	stw	r2,-20(fp)
  81139c:	e0bffb17 	ldw	r2,-20(fp)
  8113a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8113a4:	e0bfff17 	ldw	r2,-4(fp)
  8113a8:	10000005 	stb	zero,0(r2)
    return;
  8113ac:	0001883a 	nop
  8113b0:	00000106 	br	8113b8 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  8113b4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  8113b8:	e037883a 	mov	sp,fp
  8113bc:	dfc00117 	ldw	ra,4(sp)
  8113c0:	df000017 	ldw	fp,0(sp)
  8113c4:	dec00204 	addi	sp,sp,8
  8113c8:	f800283a 	ret

008113cc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  8113cc:	deffe104 	addi	sp,sp,-124
  8113d0:	dfc01e15 	stw	ra,120(sp)
  8113d4:	df001d15 	stw	fp,116(sp)
  8113d8:	df001d04 	addi	fp,sp,116
  8113dc:	e13ffc15 	stw	r4,-16(fp)
  8113e0:	2809883a 	mov	r4,r5
  8113e4:	3007883a 	mov	r3,r6
  8113e8:	3805883a 	mov	r2,r7
  8113ec:	e13ffd0d 	sth	r4,-12(fp)
  8113f0:	e0fffe05 	stb	r3,-8(fp)
  8113f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8113f8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8113fc:	e0800217 	ldw	r2,8(fp)
  811400:	1000021e 	bne	r2,zero,81140c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  811404:	0005883a 	mov	r2,zero
  811408:	00015906 	br	811970 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  81140c:	e0bffc17 	ldw	r2,-16(fp)
  811410:	1000051e 	bne	r2,zero,811428 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811414:	e0800217 	ldw	r2,8(fp)
  811418:	00c01b84 	movi	r3,110
  81141c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811420:	0005883a 	mov	r2,zero
  811424:	00015206 	br	811970 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811428:	d0a07303 	ldbu	r2,-32308(gp)
  81142c:	10803fcc 	andi	r2,r2,255
  811430:	10000526 	beq	r2,zero,811448 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  811434:	e0800217 	ldw	r2,8(fp)
  811438:	00c00084 	movi	r3,2
  81143c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811440:	0005883a 	mov	r2,zero
  811444:	00014a06 	br	811970 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  811448:	d0a06503 	ldbu	r2,-32364(gp)
  81144c:	10803fcc 	andi	r2,r2,255
  811450:	10000526 	beq	r2,zero,811468 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  811454:	e0800217 	ldw	r2,8(fp)
  811458:	00c00344 	movi	r3,13
  81145c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811460:	0005883a 	mov	r2,zero
  811464:	00014206 	br	811970 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  811468:	e0bffc17 	ldw	r2,-16(fp)
  81146c:	10800003 	ldbu	r2,0(r2)
  811470:	10803fcc 	andi	r2,r2,255
  811474:	10800160 	cmpeqi	r2,r2,5
  811478:	1000051e 	bne	r2,zero,811490 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  81147c:	e0800217 	ldw	r2,8(fp)
  811480:	00c00044 	movi	r3,1
  811484:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811488:	0005883a 	mov	r2,zero
  81148c:	00013806 	br	811970 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  811490:	e0fffe03 	ldbu	r3,-8(fp)
  811494:	00bfe004 	movi	r2,-128
  811498:	1884703a 	and	r2,r3,r2
  81149c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  8114a0:	e0bfe603 	ldbu	r2,-104(fp)
  8114a4:	10000626 	beq	r2,zero,8114c0 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  8114a8:	e0bffe03 	ldbu	r2,-8(fp)
  8114ac:	10801fcc 	andi	r2,r2,127
  8114b0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  8114b4:	00800044 	movi	r2,1
  8114b8:	e0bfe405 	stb	r2,-112(fp)
  8114bc:	00000106 	br	8114c4 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  8114c0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114c4:	0005303a 	rdctl	r2,status
  8114c8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114cc:	e0fff617 	ldw	r3,-40(fp)
  8114d0:	00bfff84 	movi	r2,-2
  8114d4:	1884703a 	and	r2,r3,r2
  8114d8:	1001703a 	wrctl	status,r2
  
  return context;
  8114dc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8114e0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  8114e4:	e0bffe03 	ldbu	r2,-8(fp)
  8114e8:	10c00060 	cmpeqi	r3,r2,1
  8114ec:	1800921e 	bne	r3,zero,811738 <OSFlagPend+0x36c>
  8114f0:	10c00088 	cmpgei	r3,r2,2
  8114f4:	1800021e 	bne	r3,zero,811500 <OSFlagPend+0x134>
  8114f8:	10006126 	beq	r2,zero,811680 <OSFlagPend+0x2b4>
  8114fc:	0000bb06 	br	8117ec <OSFlagPend+0x420>
  811500:	10c000a0 	cmpeqi	r3,r2,2
  811504:	1800031e 	bne	r3,zero,811514 <OSFlagPend+0x148>
  811508:	108000e0 	cmpeqi	r2,r2,3
  81150c:	10002f1e 	bne	r2,zero,8115cc <OSFlagPend+0x200>
  811510:	0000b606 	br	8117ec <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  811514:	e0bffc17 	ldw	r2,-16(fp)
  811518:	10c0020b 	ldhu	r3,8(r2)
  81151c:	e0bffd0b 	ldhu	r2,-12(fp)
  811520:	1884703a 	and	r2,r3,r2
  811524:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811528:	e0ffe80b 	ldhu	r3,-96(fp)
  81152c:	e0bffd0b 	ldhu	r2,-12(fp)
  811530:	1880171e 	bne	r3,r2,811590 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811534:	e0bfe403 	ldbu	r2,-112(fp)
  811538:	10800058 	cmpnei	r2,r2,1
  81153c:	1000091e 	bne	r2,zero,811564 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  811540:	e0bffc17 	ldw	r2,-16(fp)
  811544:	1080020b 	ldhu	r2,8(r2)
  811548:	1007883a 	mov	r3,r2
  81154c:	e0bfe80b 	ldhu	r2,-96(fp)
  811550:	0084303a 	nor	r2,zero,r2
  811554:	1884703a 	and	r2,r3,r2
  811558:	1007883a 	mov	r3,r2
  81155c:	e0bffc17 	ldw	r2,-16(fp)
  811560:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811564:	d0a07417 	ldw	r2,-32304(gp)
  811568:	e0ffe80b 	ldhu	r3,-96(fp)
  81156c:	10c00b0d 	sth	r3,44(r2)
  811570:	e0bfe517 	ldw	r2,-108(fp)
  811574:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811578:	e0bfe717 	ldw	r2,-100(fp)
  81157c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811580:	e0800217 	ldw	r2,8(fp)
  811584:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811588:	e0bfe80b 	ldhu	r2,-96(fp)
  81158c:	0000f806 	br	811970 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811590:	e13ffd0b 	ldhu	r4,-12(fp)
  811594:	e17ffe03 	ldbu	r5,-8(fp)
  811598:	e0bfff0b 	ldhu	r2,-4(fp)
  81159c:	e0fff704 	addi	r3,fp,-36
  8115a0:	d8800015 	stw	r2,0(sp)
  8115a4:	280f883a 	mov	r7,r5
  8115a8:	200d883a 	mov	r6,r4
  8115ac:	180b883a 	mov	r5,r3
  8115b0:	e13ffc17 	ldw	r4,-16(fp)
  8115b4:	0811e3c0 	call	811e3c <OS_FlagBlock>
  8115b8:	e0bfe517 	ldw	r2,-108(fp)
  8115bc:	e0bfe915 	stw	r2,-92(fp)
  8115c0:	e0bfe917 	ldw	r2,-92(fp)
  8115c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8115c8:	00009206 	br	811814 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  8115cc:	e0bffc17 	ldw	r2,-16(fp)
  8115d0:	10c0020b 	ldhu	r3,8(r2)
  8115d4:	e0bffd0b 	ldhu	r2,-12(fp)
  8115d8:	1884703a 	and	r2,r3,r2
  8115dc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8115e0:	e0bfe80b 	ldhu	r2,-96(fp)
  8115e4:	10001726 	beq	r2,zero,811644 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8115e8:	e0bfe403 	ldbu	r2,-112(fp)
  8115ec:	10800058 	cmpnei	r2,r2,1
  8115f0:	1000091e 	bne	r2,zero,811618 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8115f4:	e0bffc17 	ldw	r2,-16(fp)
  8115f8:	1080020b 	ldhu	r2,8(r2)
  8115fc:	1007883a 	mov	r3,r2
  811600:	e0bfe80b 	ldhu	r2,-96(fp)
  811604:	0084303a 	nor	r2,zero,r2
  811608:	1884703a 	and	r2,r3,r2
  81160c:	1007883a 	mov	r3,r2
  811610:	e0bffc17 	ldw	r2,-16(fp)
  811614:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811618:	d0a07417 	ldw	r2,-32304(gp)
  81161c:	e0ffe80b 	ldhu	r3,-96(fp)
  811620:	10c00b0d 	sth	r3,44(r2)
  811624:	e0bfe517 	ldw	r2,-108(fp)
  811628:	e0bfea15 	stw	r2,-88(fp)
  81162c:	e0bfea17 	ldw	r2,-88(fp)
  811630:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811634:	e0800217 	ldw	r2,8(fp)
  811638:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81163c:	e0bfe80b 	ldhu	r2,-96(fp)
  811640:	0000cb06 	br	811970 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811644:	e13ffd0b 	ldhu	r4,-12(fp)
  811648:	e17ffe03 	ldbu	r5,-8(fp)
  81164c:	e0bfff0b 	ldhu	r2,-4(fp)
  811650:	e0fff704 	addi	r3,fp,-36
  811654:	d8800015 	stw	r2,0(sp)
  811658:	280f883a 	mov	r7,r5
  81165c:	200d883a 	mov	r6,r4
  811660:	180b883a 	mov	r5,r3
  811664:	e13ffc17 	ldw	r4,-16(fp)
  811668:	0811e3c0 	call	811e3c <OS_FlagBlock>
  81166c:	e0bfe517 	ldw	r2,-108(fp)
  811670:	e0bfeb15 	stw	r2,-84(fp)
  811674:	e0bfeb17 	ldw	r2,-84(fp)
  811678:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81167c:	00006506 	br	811814 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  811680:	e0bffc17 	ldw	r2,-16(fp)
  811684:	1080020b 	ldhu	r2,8(r2)
  811688:	0084303a 	nor	r2,zero,r2
  81168c:	1007883a 	mov	r3,r2
  811690:	e0bffd0b 	ldhu	r2,-12(fp)
  811694:	1884703a 	and	r2,r3,r2
  811698:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81169c:	e0ffe80b 	ldhu	r3,-96(fp)
  8116a0:	e0bffd0b 	ldhu	r2,-12(fp)
  8116a4:	1880151e 	bne	r3,r2,8116fc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8116a8:	e0bfe403 	ldbu	r2,-112(fp)
  8116ac:	10800058 	cmpnei	r2,r2,1
  8116b0:	1000071e 	bne	r2,zero,8116d0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  8116b4:	e0bffc17 	ldw	r2,-16(fp)
  8116b8:	10c0020b 	ldhu	r3,8(r2)
  8116bc:	e0bfe80b 	ldhu	r2,-96(fp)
  8116c0:	1884b03a 	or	r2,r3,r2
  8116c4:	1007883a 	mov	r3,r2
  8116c8:	e0bffc17 	ldw	r2,-16(fp)
  8116cc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8116d0:	d0a07417 	ldw	r2,-32304(gp)
  8116d4:	e0ffe80b 	ldhu	r3,-96(fp)
  8116d8:	10c00b0d 	sth	r3,44(r2)
  8116dc:	e0bfe517 	ldw	r2,-108(fp)
  8116e0:	e0bfec15 	stw	r2,-80(fp)
  8116e4:	e0bfec17 	ldw	r2,-80(fp)
  8116e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8116ec:	e0800217 	ldw	r2,8(fp)
  8116f0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8116f4:	e0bfe80b 	ldhu	r2,-96(fp)
  8116f8:	00009d06 	br	811970 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8116fc:	e13ffd0b 	ldhu	r4,-12(fp)
  811700:	e17ffe03 	ldbu	r5,-8(fp)
  811704:	e0bfff0b 	ldhu	r2,-4(fp)
  811708:	e0fff704 	addi	r3,fp,-36
  81170c:	d8800015 	stw	r2,0(sp)
  811710:	280f883a 	mov	r7,r5
  811714:	200d883a 	mov	r6,r4
  811718:	180b883a 	mov	r5,r3
  81171c:	e13ffc17 	ldw	r4,-16(fp)
  811720:	0811e3c0 	call	811e3c <OS_FlagBlock>
  811724:	e0bfe517 	ldw	r2,-108(fp)
  811728:	e0bfed15 	stw	r2,-76(fp)
  81172c:	e0bfed17 	ldw	r2,-76(fp)
  811730:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811734:	00003706 	br	811814 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  811738:	e0bffc17 	ldw	r2,-16(fp)
  81173c:	1080020b 	ldhu	r2,8(r2)
  811740:	0084303a 	nor	r2,zero,r2
  811744:	1007883a 	mov	r3,r2
  811748:	e0bffd0b 	ldhu	r2,-12(fp)
  81174c:	1884703a 	and	r2,r3,r2
  811750:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  811754:	e0bfe80b 	ldhu	r2,-96(fp)
  811758:	10001526 	beq	r2,zero,8117b0 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81175c:	e0bfe403 	ldbu	r2,-112(fp)
  811760:	10800058 	cmpnei	r2,r2,1
  811764:	1000071e 	bne	r2,zero,811784 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  811768:	e0bffc17 	ldw	r2,-16(fp)
  81176c:	10c0020b 	ldhu	r3,8(r2)
  811770:	e0bfe80b 	ldhu	r2,-96(fp)
  811774:	1884b03a 	or	r2,r3,r2
  811778:	1007883a 	mov	r3,r2
  81177c:	e0bffc17 	ldw	r2,-16(fp)
  811780:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811784:	d0a07417 	ldw	r2,-32304(gp)
  811788:	e0ffe80b 	ldhu	r3,-96(fp)
  81178c:	10c00b0d 	sth	r3,44(r2)
  811790:	e0bfe517 	ldw	r2,-108(fp)
  811794:	e0bfee15 	stw	r2,-72(fp)
  811798:	e0bfee17 	ldw	r2,-72(fp)
  81179c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8117a0:	e0800217 	ldw	r2,8(fp)
  8117a4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8117a8:	e0bfe80b 	ldhu	r2,-96(fp)
  8117ac:	00007006 	br	811970 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8117b0:	e13ffd0b 	ldhu	r4,-12(fp)
  8117b4:	e17ffe03 	ldbu	r5,-8(fp)
  8117b8:	e0bfff0b 	ldhu	r2,-4(fp)
  8117bc:	e0fff704 	addi	r3,fp,-36
  8117c0:	d8800015 	stw	r2,0(sp)
  8117c4:	280f883a 	mov	r7,r5
  8117c8:	200d883a 	mov	r6,r4
  8117cc:	180b883a 	mov	r5,r3
  8117d0:	e13ffc17 	ldw	r4,-16(fp)
  8117d4:	0811e3c0 	call	811e3c <OS_FlagBlock>
  8117d8:	e0bfe517 	ldw	r2,-108(fp)
  8117dc:	e0bfef15 	stw	r2,-68(fp)
  8117e0:	e0bfef17 	ldw	r2,-68(fp)
  8117e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8117e8:	00000a06 	br	811814 <OSFlagPend+0x448>
  8117ec:	e0bfe517 	ldw	r2,-108(fp)
  8117f0:	e0bff015 	stw	r2,-64(fp)
  8117f4:	e0bff017 	ldw	r2,-64(fp)
  8117f8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8117fc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  811800:	e0800217 	ldw	r2,8(fp)
  811804:	00c01bc4 	movi	r3,111
  811808:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  81180c:	e0bfe80b 	ldhu	r2,-96(fp)
  811810:	00005706 	br	811970 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  811814:	081029c0 	call	81029c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811818:	0005303a 	rdctl	r2,status
  81181c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811820:	e0fff117 	ldw	r3,-60(fp)
  811824:	00bfff84 	movi	r2,-2
  811828:	1884703a 	and	r2,r3,r2
  81182c:	1001703a 	wrctl	status,r2
  
  return context;
  811830:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  811834:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  811838:	d0a07417 	ldw	r2,-32304(gp)
  81183c:	10800c43 	ldbu	r2,49(r2)
  811840:	10803fcc 	andi	r2,r2,255
  811844:	10001c26 	beq	r2,zero,8118b8 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  811848:	d0a07417 	ldw	r2,-32304(gp)
  81184c:	10800c43 	ldbu	r2,49(r2)
  811850:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  811854:	d0a07417 	ldw	r2,-32304(gp)
  811858:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  81185c:	e0bff704 	addi	r2,fp,-36
  811860:	1009883a 	mov	r4,r2
  811864:	08121700 	call	812170 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  811868:	d0a07417 	ldw	r2,-32304(gp)
  81186c:	10000c05 	stb	zero,48(r2)
  811870:	e0bfe517 	ldw	r2,-108(fp)
  811874:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811878:	e0bff217 	ldw	r2,-56(fp)
  81187c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  811880:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  811884:	e0bff303 	ldbu	r2,-52(fp)
  811888:	108000a0 	cmpeqi	r2,r2,2
  81188c:	10000426 	beq	r2,zero,8118a0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  811890:	e0800217 	ldw	r2,8(fp)
  811894:	00c00384 	movi	r3,14
  811898:	10c00005 	stb	r3,0(r2)
                 break;
  81189c:	00000406 	br	8118b0 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  8118a0:	e0800217 	ldw	r2,8(fp)
  8118a4:	00c00284 	movi	r3,10
  8118a8:	10c00005 	stb	r3,0(r2)
                 break;
  8118ac:	0001883a 	nop
        }
        return (flags_rdy);
  8118b0:	e0bfe80b 	ldhu	r2,-96(fp)
  8118b4:	00002e06 	br	811970 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  8118b8:	d0a07417 	ldw	r2,-32304(gp)
  8118bc:	10800b0b 	ldhu	r2,44(r2)
  8118c0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  8118c4:	e0bfe403 	ldbu	r2,-112(fp)
  8118c8:	10800058 	cmpnei	r2,r2,1
  8118cc:	1000211e 	bne	r2,zero,811954 <OSFlagPend+0x588>
        switch (wait_type) {
  8118d0:	e0bffe03 	ldbu	r2,-8(fp)
  8118d4:	10001616 	blt	r2,zero,811930 <OSFlagPend+0x564>
  8118d8:	10c00090 	cmplti	r3,r2,2
  8118dc:	18000c1e 	bne	r3,zero,811910 <OSFlagPend+0x544>
  8118e0:	10800108 	cmpgei	r2,r2,4
  8118e4:	1000121e 	bne	r2,zero,811930 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8118e8:	e0bffc17 	ldw	r2,-16(fp)
  8118ec:	1080020b 	ldhu	r2,8(r2)
  8118f0:	1007883a 	mov	r3,r2
  8118f4:	e0bfe80b 	ldhu	r2,-96(fp)
  8118f8:	0084303a 	nor	r2,zero,r2
  8118fc:	1884703a 	and	r2,r3,r2
  811900:	1007883a 	mov	r3,r2
  811904:	e0bffc17 	ldw	r2,-16(fp)
  811908:	10c0020d 	sth	r3,8(r2)
                 break;
  81190c:	00001106 	br	811954 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  811910:	e0bffc17 	ldw	r2,-16(fp)
  811914:	10c0020b 	ldhu	r3,8(r2)
  811918:	e0bfe80b 	ldhu	r2,-96(fp)
  81191c:	1884b03a 	or	r2,r3,r2
  811920:	1007883a 	mov	r3,r2
  811924:	e0bffc17 	ldw	r2,-16(fp)
  811928:	10c0020d 	sth	r3,8(r2)
                 break;
  81192c:	00000906 	br	811954 <OSFlagPend+0x588>
  811930:	e0bfe517 	ldw	r2,-108(fp)
  811934:	e0bff415 	stw	r2,-48(fp)
  811938:	e0bff417 	ldw	r2,-48(fp)
  81193c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  811940:	e0800217 	ldw	r2,8(fp)
  811944:	00c01bc4 	movi	r3,111
  811948:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  81194c:	0005883a 	mov	r2,zero
  811950:	00000706 	br	811970 <OSFlagPend+0x5a4>
  811954:	e0bfe517 	ldw	r2,-108(fp)
  811958:	e0bff515 	stw	r2,-44(fp)
  81195c:	e0bff517 	ldw	r2,-44(fp)
  811960:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  811964:	e0800217 	ldw	r2,8(fp)
  811968:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  81196c:	e0bfe80b 	ldhu	r2,-96(fp)
}
  811970:	e037883a 	mov	sp,fp
  811974:	dfc00117 	ldw	ra,4(sp)
  811978:	df000017 	ldw	fp,0(sp)
  81197c:	dec00204 	addi	sp,sp,8
  811980:	f800283a 	ret

00811984 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  811984:	defffb04 	addi	sp,sp,-20
  811988:	df000415 	stw	fp,16(sp)
  81198c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  811990:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811994:	0005303a 	rdctl	r2,status
  811998:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81199c:	e0fffe17 	ldw	r3,-8(fp)
  8119a0:	00bfff84 	movi	r2,-2
  8119a4:	1884703a 	and	r2,r3,r2
  8119a8:	1001703a 	wrctl	status,r2
  
  return context;
  8119ac:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  8119b0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  8119b4:	d0a07417 	ldw	r2,-32304(gp)
  8119b8:	10800b0b 	ldhu	r2,44(r2)
  8119bc:	e0bffd0d 	sth	r2,-12(fp)
  8119c0:	e0bffc17 	ldw	r2,-16(fp)
  8119c4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119c8:	e0bfff17 	ldw	r2,-4(fp)
  8119cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  8119d0:	e0bffd0b 	ldhu	r2,-12(fp)
}
  8119d4:	e037883a 	mov	sp,fp
  8119d8:	df000017 	ldw	fp,0(sp)
  8119dc:	dec00104 	addi	sp,sp,4
  8119e0:	f800283a 	ret

008119e4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  8119e4:	deffef04 	addi	sp,sp,-68
  8119e8:	dfc01015 	stw	ra,64(sp)
  8119ec:	df000f15 	stw	fp,60(sp)
  8119f0:	df000f04 	addi	fp,sp,60
  8119f4:	e13ffc15 	stw	r4,-16(fp)
  8119f8:	2807883a 	mov	r3,r5
  8119fc:	3005883a 	mov	r2,r6
  811a00:	e1ffff15 	stw	r7,-4(fp)
  811a04:	e0fffd0d 	sth	r3,-12(fp)
  811a08:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  811a0c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  811a10:	e0bfff17 	ldw	r2,-4(fp)
  811a14:	1000021e 	bne	r2,zero,811a20 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  811a18:	0005883a 	mov	r2,zero
  811a1c:	0000d106 	br	811d64 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  811a20:	e0bffc17 	ldw	r2,-16(fp)
  811a24:	1000051e 	bne	r2,zero,811a3c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811a28:	e0bfff17 	ldw	r2,-4(fp)
  811a2c:	00c01b84 	movi	r3,110
  811a30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811a34:	0005883a 	mov	r2,zero
  811a38:	0000ca06 	br	811d64 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  811a3c:	e0bffc17 	ldw	r2,-16(fp)
  811a40:	10800003 	ldbu	r2,0(r2)
  811a44:	10803fcc 	andi	r2,r2,255
  811a48:	10800160 	cmpeqi	r2,r2,5
  811a4c:	1000051e 	bne	r2,zero,811a64 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  811a50:	e0bfff17 	ldw	r2,-4(fp)
  811a54:	00c00044 	movi	r3,1
  811a58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811a5c:	0005883a 	mov	r2,zero
  811a60:	0000c006 	br	811d64 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811a64:	0005303a 	rdctl	r2,status
  811a68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a6c:	e0fffb17 	ldw	r3,-20(fp)
  811a70:	00bfff84 	movi	r2,-2
  811a74:	1884703a 	and	r2,r3,r2
  811a78:	1001703a 	wrctl	status,r2
  
  return context;
  811a7c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  811a80:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  811a84:	e0bffe03 	ldbu	r2,-8(fp)
  811a88:	10000326 	beq	r2,zero,811a98 <OSFlagPost+0xb4>
  811a8c:	10800060 	cmpeqi	r2,r2,1
  811a90:	10000b1e 	bne	r2,zero,811ac0 <OSFlagPost+0xdc>
  811a94:	00001206 	br	811ae0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  811a98:	e0bffc17 	ldw	r2,-16(fp)
  811a9c:	1080020b 	ldhu	r2,8(r2)
  811aa0:	1007883a 	mov	r3,r2
  811aa4:	e0bffd0b 	ldhu	r2,-12(fp)
  811aa8:	0084303a 	nor	r2,zero,r2
  811aac:	1884703a 	and	r2,r3,r2
  811ab0:	1007883a 	mov	r3,r2
  811ab4:	e0bffc17 	ldw	r2,-16(fp)
  811ab8:	10c0020d 	sth	r3,8(r2)
             break;
  811abc:	00001106 	br	811b04 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  811ac0:	e0bffc17 	ldw	r2,-16(fp)
  811ac4:	10c0020b 	ldhu	r3,8(r2)
  811ac8:	e0bffd0b 	ldhu	r2,-12(fp)
  811acc:	1884b03a 	or	r2,r3,r2
  811ad0:	1007883a 	mov	r3,r2
  811ad4:	e0bffc17 	ldw	r2,-16(fp)
  811ad8:	10c0020d 	sth	r3,8(r2)
             break;
  811adc:	00000906 	br	811b04 <OSFlagPost+0x120>
  811ae0:	e0bff317 	ldw	r2,-52(fp)
  811ae4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ae8:	e0bff417 	ldw	r2,-48(fp)
  811aec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  811af0:	e0bfff17 	ldw	r2,-4(fp)
  811af4:	00c01c44 	movi	r3,113
  811af8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  811afc:	0005883a 	mov	r2,zero
  811b00:	00009806 	br	811d64 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  811b04:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  811b08:	e0bffc17 	ldw	r2,-16(fp)
  811b0c:	10800117 	ldw	r2,4(r2)
  811b10:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  811b14:	00007706 	br	811cf4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  811b18:	e0bff117 	ldw	r2,-60(fp)
  811b1c:	10800483 	ldbu	r2,18(r2)
  811b20:	10803fcc 	andi	r2,r2,255
  811b24:	10c00060 	cmpeqi	r3,r2,1
  811b28:	18004a1e 	bne	r3,zero,811c54 <OSFlagPost+0x270>
  811b2c:	10c00088 	cmpgei	r3,r2,2
  811b30:	1800021e 	bne	r3,zero,811b3c <OSFlagPost+0x158>
  811b34:	10002f26 	beq	r2,zero,811bf4 <OSFlagPost+0x210>
  811b38:	00005b06 	br	811ca8 <OSFlagPost+0x2c4>
  811b3c:	10c000a0 	cmpeqi	r3,r2,2
  811b40:	1800031e 	bne	r3,zero,811b50 <OSFlagPost+0x16c>
  811b44:	108000e0 	cmpeqi	r2,r2,3
  811b48:	1000171e 	bne	r2,zero,811ba8 <OSFlagPost+0x1c4>
  811b4c:	00005606 	br	811ca8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  811b50:	e0bffc17 	ldw	r2,-16(fp)
  811b54:	10c0020b 	ldhu	r3,8(r2)
  811b58:	e0bff117 	ldw	r2,-60(fp)
  811b5c:	1080040b 	ldhu	r2,16(r2)
  811b60:	1884703a 	and	r2,r3,r2
  811b64:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  811b68:	e0bff117 	ldw	r2,-60(fp)
  811b6c:	1080040b 	ldhu	r2,16(r2)
  811b70:	10ffffcc 	andi	r3,r2,65535
  811b74:	e0bff60b 	ldhu	r2,-40(fp)
  811b78:	1880541e 	bne	r3,r2,811ccc <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  811b7c:	e0bff60b 	ldhu	r2,-40(fp)
  811b80:	100b883a 	mov	r5,r2
  811b84:	e13ff117 	ldw	r4,-60(fp)
  811b88:	081207c0 	call	81207c <OS_FlagTaskRdy>
  811b8c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  811b90:	e0bff683 	ldbu	r2,-38(fp)
  811b94:	10800058 	cmpnei	r2,r2,1
  811b98:	10004c1e 	bne	r2,zero,811ccc <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  811b9c:	00800044 	movi	r2,1
  811ba0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  811ba4:	00004906 	br	811ccc <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  811ba8:	e0bffc17 	ldw	r2,-16(fp)
  811bac:	10c0020b 	ldhu	r3,8(r2)
  811bb0:	e0bff117 	ldw	r2,-60(fp)
  811bb4:	1080040b 	ldhu	r2,16(r2)
  811bb8:	1884703a 	and	r2,r3,r2
  811bbc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  811bc0:	e0bff60b 	ldhu	r2,-40(fp)
  811bc4:	10004326 	beq	r2,zero,811cd4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  811bc8:	e0bff60b 	ldhu	r2,-40(fp)
  811bcc:	100b883a 	mov	r5,r2
  811bd0:	e13ff117 	ldw	r4,-60(fp)
  811bd4:	081207c0 	call	81207c <OS_FlagTaskRdy>
  811bd8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  811bdc:	e0bff683 	ldbu	r2,-38(fp)
  811be0:	10800058 	cmpnei	r2,r2,1
  811be4:	10003b1e 	bne	r2,zero,811cd4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  811be8:	00800044 	movi	r2,1
  811bec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  811bf0:	00003806 	br	811cd4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  811bf4:	e0bffc17 	ldw	r2,-16(fp)
  811bf8:	1080020b 	ldhu	r2,8(r2)
  811bfc:	0084303a 	nor	r2,zero,r2
  811c00:	1007883a 	mov	r3,r2
  811c04:	e0bff117 	ldw	r2,-60(fp)
  811c08:	1080040b 	ldhu	r2,16(r2)
  811c0c:	1884703a 	and	r2,r3,r2
  811c10:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  811c14:	e0bff117 	ldw	r2,-60(fp)
  811c18:	1080040b 	ldhu	r2,16(r2)
  811c1c:	10ffffcc 	andi	r3,r2,65535
  811c20:	e0bff60b 	ldhu	r2,-40(fp)
  811c24:	18802d1e 	bne	r3,r2,811cdc <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  811c28:	e0bff60b 	ldhu	r2,-40(fp)
  811c2c:	100b883a 	mov	r5,r2
  811c30:	e13ff117 	ldw	r4,-60(fp)
  811c34:	081207c0 	call	81207c <OS_FlagTaskRdy>
  811c38:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  811c3c:	e0bff683 	ldbu	r2,-38(fp)
  811c40:	10800058 	cmpnei	r2,r2,1
  811c44:	1000251e 	bne	r2,zero,811cdc <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  811c48:	00800044 	movi	r2,1
  811c4c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  811c50:	00002206 	br	811cdc <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  811c54:	e0bffc17 	ldw	r2,-16(fp)
  811c58:	1080020b 	ldhu	r2,8(r2)
  811c5c:	0084303a 	nor	r2,zero,r2
  811c60:	1007883a 	mov	r3,r2
  811c64:	e0bff117 	ldw	r2,-60(fp)
  811c68:	1080040b 	ldhu	r2,16(r2)
  811c6c:	1884703a 	and	r2,r3,r2
  811c70:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  811c74:	e0bff60b 	ldhu	r2,-40(fp)
  811c78:	10001a26 	beq	r2,zero,811ce4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  811c7c:	e0bff60b 	ldhu	r2,-40(fp)
  811c80:	100b883a 	mov	r5,r2
  811c84:	e13ff117 	ldw	r4,-60(fp)
  811c88:	081207c0 	call	81207c <OS_FlagTaskRdy>
  811c8c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  811c90:	e0bff683 	ldbu	r2,-38(fp)
  811c94:	10800058 	cmpnei	r2,r2,1
  811c98:	1000121e 	bne	r2,zero,811ce4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  811c9c:	00800044 	movi	r2,1
  811ca0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  811ca4:	00000f06 	br	811ce4 <OSFlagPost+0x300>
  811ca8:	e0bff317 	ldw	r2,-52(fp)
  811cac:	e0bff515 	stw	r2,-44(fp)
  811cb0:	e0bff517 	ldw	r2,-44(fp)
  811cb4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  811cb8:	e0bfff17 	ldw	r2,-4(fp)
  811cbc:	00c01bc4 	movi	r3,111
  811cc0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  811cc4:	0005883a 	mov	r2,zero
  811cc8:	00002606 	br	811d64 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811ccc:	0001883a 	nop
  811cd0:	00000506 	br	811ce8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811cd4:	0001883a 	nop
  811cd8:	00000306 	br	811ce8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811cdc:	0001883a 	nop
  811ce0:	00000106 	br	811ce8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  811ce4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  811ce8:	e0bff117 	ldw	r2,-60(fp)
  811cec:	10800017 	ldw	r2,0(r2)
  811cf0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  811cf4:	e0bff117 	ldw	r2,-60(fp)
  811cf8:	103f871e 	bne	r2,zero,811b18 <__alt_mem_epcs_flash_controller_0+0xff808b18>
  811cfc:	e0bff317 	ldw	r2,-52(fp)
  811d00:	e0bff715 	stw	r2,-36(fp)
  811d04:	e0bff717 	ldw	r2,-36(fp)
  811d08:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  811d0c:	e0bff203 	ldbu	r2,-56(fp)
  811d10:	10800058 	cmpnei	r2,r2,1
  811d14:	1000011e 	bne	r2,zero,811d1c <OSFlagPost+0x338>
        OS_Sched();
  811d18:	081029c0 	call	81029c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d1c:	0005303a 	rdctl	r2,status
  811d20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d24:	e0fffa17 	ldw	r3,-24(fp)
  811d28:	00bfff84 	movi	r2,-2
  811d2c:	1884703a 	and	r2,r3,r2
  811d30:	1001703a 	wrctl	status,r2
  
  return context;
  811d34:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  811d38:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  811d3c:	e0bffc17 	ldw	r2,-16(fp)
  811d40:	1080020b 	ldhu	r2,8(r2)
  811d44:	e0bff90d 	sth	r2,-28(fp)
  811d48:	e0bff317 	ldw	r2,-52(fp)
  811d4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d50:	e0bff817 	ldw	r2,-32(fp)
  811d54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  811d58:	e0bfff17 	ldw	r2,-4(fp)
  811d5c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  811d60:	e0bff90b 	ldhu	r2,-28(fp)
}
  811d64:	e037883a 	mov	sp,fp
  811d68:	dfc00117 	ldw	ra,4(sp)
  811d6c:	df000017 	ldw	fp,0(sp)
  811d70:	dec00204 	addi	sp,sp,8
  811d74:	f800283a 	ret

00811d78 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  811d78:	defff904 	addi	sp,sp,-28
  811d7c:	df000615 	stw	fp,24(sp)
  811d80:	df000604 	addi	fp,sp,24
  811d84:	e13ffe15 	stw	r4,-8(fp)
  811d88:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  811d8c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  811d90:	e0bfff17 	ldw	r2,-4(fp)
  811d94:	1000021e 	bne	r2,zero,811da0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  811d98:	0005883a 	mov	r2,zero
  811d9c:	00002306 	br	811e2c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  811da0:	e0bffe17 	ldw	r2,-8(fp)
  811da4:	1000051e 	bne	r2,zero,811dbc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811da8:	e0bfff17 	ldw	r2,-4(fp)
  811dac:	00c01b84 	movi	r3,110
  811db0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811db4:	0005883a 	mov	r2,zero
  811db8:	00001c06 	br	811e2c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  811dbc:	e0bffe17 	ldw	r2,-8(fp)
  811dc0:	10800003 	ldbu	r2,0(r2)
  811dc4:	10803fcc 	andi	r2,r2,255
  811dc8:	10800160 	cmpeqi	r2,r2,5
  811dcc:	1000051e 	bne	r2,zero,811de4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  811dd0:	e0bfff17 	ldw	r2,-4(fp)
  811dd4:	00c00044 	movi	r3,1
  811dd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811ddc:	0005883a 	mov	r2,zero
  811de0:	00001206 	br	811e2c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811de4:	0005303a 	rdctl	r2,status
  811de8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811dec:	e0fffc17 	ldw	r3,-16(fp)
  811df0:	00bfff84 	movi	r2,-2
  811df4:	1884703a 	and	r2,r3,r2
  811df8:	1001703a 	wrctl	status,r2
  
  return context;
  811dfc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  811e00:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  811e04:	e0bffe17 	ldw	r2,-8(fp)
  811e08:	1080020b 	ldhu	r2,8(r2)
  811e0c:	e0bffb0d 	sth	r2,-20(fp)
  811e10:	e0bffa17 	ldw	r2,-24(fp)
  811e14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811e18:	e0bffd17 	ldw	r2,-12(fp)
  811e1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811e20:	e0bfff17 	ldw	r2,-4(fp)
  811e24:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  811e28:	e0bffb0b 	ldhu	r2,-20(fp)
}
  811e2c:	e037883a 	mov	sp,fp
  811e30:	df000017 	ldw	fp,0(sp)
  811e34:	dec00104 	addi	sp,sp,4
  811e38:	f800283a 	ret

00811e3c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  811e3c:	defff804 	addi	sp,sp,-32
  811e40:	df000715 	stw	fp,28(sp)
  811e44:	df000704 	addi	fp,sp,28
  811e48:	e13ffb15 	stw	r4,-20(fp)
  811e4c:	e17ffc15 	stw	r5,-16(fp)
  811e50:	3009883a 	mov	r4,r6
  811e54:	3807883a 	mov	r3,r7
  811e58:	e0800117 	ldw	r2,4(fp)
  811e5c:	e13ffd0d 	sth	r4,-12(fp)
  811e60:	e0fffe05 	stb	r3,-8(fp)
  811e64:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  811e68:	d0a07417 	ldw	r2,-32304(gp)
  811e6c:	d0e07417 	ldw	r3,-32304(gp)
  811e70:	18c00c03 	ldbu	r3,48(r3)
  811e74:	18c00814 	ori	r3,r3,32
  811e78:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  811e7c:	d0a07417 	ldw	r2,-32304(gp)
  811e80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  811e84:	d0a07417 	ldw	r2,-32304(gp)
  811e88:	e0ffff0b 	ldhu	r3,-4(fp)
  811e8c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  811e90:	d0a07417 	ldw	r2,-32304(gp)
  811e94:	e0fffc17 	ldw	r3,-16(fp)
  811e98:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  811e9c:	e0bffc17 	ldw	r2,-16(fp)
  811ea0:	e0fffd0b 	ldhu	r3,-12(fp)
  811ea4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  811ea8:	e0bffc17 	ldw	r2,-16(fp)
  811eac:	e0fffe03 	ldbu	r3,-8(fp)
  811eb0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  811eb4:	d0e07417 	ldw	r3,-32304(gp)
  811eb8:	e0bffc17 	ldw	r2,-16(fp)
  811ebc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  811ec0:	e0bffb17 	ldw	r2,-20(fp)
  811ec4:	10c00117 	ldw	r3,4(r2)
  811ec8:	e0bffc17 	ldw	r2,-16(fp)
  811ecc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  811ed0:	e0bffc17 	ldw	r2,-16(fp)
  811ed4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  811ed8:	e0bffc17 	ldw	r2,-16(fp)
  811edc:	e0fffb17 	ldw	r3,-20(fp)
  811ee0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  811ee4:	e0bffb17 	ldw	r2,-20(fp)
  811ee8:	10800117 	ldw	r2,4(r2)
  811eec:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  811ef0:	e0bff917 	ldw	r2,-28(fp)
  811ef4:	10000326 	beq	r2,zero,811f04 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  811ef8:	e0bff917 	ldw	r2,-28(fp)
  811efc:	e0fffc17 	ldw	r3,-16(fp)
  811f00:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  811f04:	e0bffb17 	ldw	r2,-20(fp)
  811f08:	e0fffc17 	ldw	r3,-16(fp)
  811f0c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  811f10:	d0a07417 	ldw	r2,-32304(gp)
  811f14:	10800d03 	ldbu	r2,52(r2)
  811f18:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  811f1c:	e0fffa03 	ldbu	r3,-24(fp)
  811f20:	e13ffa03 	ldbu	r4,-24(fp)
  811f24:	d0a07144 	addi	r2,gp,-32315
  811f28:	2085883a 	add	r2,r4,r2
  811f2c:	10800003 	ldbu	r2,0(r2)
  811f30:	1009883a 	mov	r4,r2
  811f34:	d0a07417 	ldw	r2,-32304(gp)
  811f38:	10800d43 	ldbu	r2,53(r2)
  811f3c:	0084303a 	nor	r2,zero,r2
  811f40:	2084703a 	and	r2,r4,r2
  811f44:	1009883a 	mov	r4,r2
  811f48:	d0a07144 	addi	r2,gp,-32315
  811f4c:	1885883a 	add	r2,r3,r2
  811f50:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  811f54:	e0fffa03 	ldbu	r3,-24(fp)
  811f58:	d0a07144 	addi	r2,gp,-32315
  811f5c:	1885883a 	add	r2,r3,r2
  811f60:	10800003 	ldbu	r2,0(r2)
  811f64:	10803fcc 	andi	r2,r2,255
  811f68:	1000071e 	bne	r2,zero,811f88 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  811f6c:	d0a07417 	ldw	r2,-32304(gp)
  811f70:	10800d83 	ldbu	r2,54(r2)
  811f74:	0084303a 	nor	r2,zero,r2
  811f78:	1007883a 	mov	r3,r2
  811f7c:	d0a07103 	ldbu	r2,-32316(gp)
  811f80:	1884703a 	and	r2,r3,r2
  811f84:	d0a07105 	stb	r2,-32316(gp)
    }
}
  811f88:	0001883a 	nop
  811f8c:	e037883a 	mov	sp,fp
  811f90:	df000017 	ldw	fp,0(sp)
  811f94:	dec00104 	addi	sp,sp,4
  811f98:	f800283a 	ret

00811f9c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  811f9c:	defffb04 	addi	sp,sp,-20
  811fa0:	dfc00415 	stw	ra,16(sp)
  811fa4:	df000315 	stw	fp,12(sp)
  811fa8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  811fac:	0140dc04 	movi	r5,880
  811fb0:	010020b4 	movhi	r4,130
  811fb4:	210c8404 	addi	r4,r4,12816
  811fb8:	08101e00 	call	8101e0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  811fbc:	008020b4 	movhi	r2,130
  811fc0:	108c8404 	addi	r2,r2,12816
  811fc4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  811fc8:	008020b4 	movhi	r2,130
  811fcc:	108c8f04 	addi	r2,r2,12860
  811fd0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  811fd4:	e03ffd0d 	sth	zero,-12(fp)
  811fd8:	00001306 	br	812028 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811fdc:	e0bffe17 	ldw	r2,-8(fp)
  811fe0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  811fe4:	e0bffe17 	ldw	r2,-8(fp)
  811fe8:	e0ffff17 	ldw	r3,-4(fp)
  811fec:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  811ff0:	e0bffe17 	ldw	r2,-8(fp)
  811ff4:	00c00fc4 	movi	r3,63
  811ff8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  811ffc:	e0bffe17 	ldw	r2,-8(fp)
  812000:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  812004:	e0bffe17 	ldw	r2,-8(fp)
  812008:	10800b04 	addi	r2,r2,44
  81200c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  812010:	e0bfff17 	ldw	r2,-4(fp)
  812014:	10800b04 	addi	r2,r2,44
  812018:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81201c:	e0bffd0b 	ldhu	r2,-12(fp)
  812020:	10800044 	addi	r2,r2,1
  812024:	e0bffd0d 	sth	r2,-12(fp)
  812028:	e0bffd0b 	ldhu	r2,-12(fp)
  81202c:	108004f0 	cmpltui	r2,r2,19
  812030:	103fea1e 	bne	r2,zero,811fdc <__alt_mem_epcs_flash_controller_0+0xff808fdc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  812034:	e0bffe17 	ldw	r2,-8(fp)
  812038:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  81203c:	e0bffe17 	ldw	r2,-8(fp)
  812040:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  812044:	e0bffe17 	ldw	r2,-8(fp)
  812048:	00c00fc4 	movi	r3,63
  81204c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  812050:	e0bffe17 	ldw	r2,-8(fp)
  812054:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  812058:	008020b4 	movhi	r2,130
  81205c:	108c8404 	addi	r2,r2,12816
  812060:	d0a07615 	stw	r2,-32296(gp)
#endif
}
  812064:	0001883a 	nop
  812068:	e037883a 	mov	sp,fp
  81206c:	dfc00117 	ldw	ra,4(sp)
  812070:	df000017 	ldw	fp,0(sp)
  812074:	dec00204 	addi	sp,sp,8
  812078:	f800283a 	ret

0081207c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  81207c:	defffa04 	addi	sp,sp,-24
  812080:	dfc00515 	stw	ra,20(sp)
  812084:	df000415 	stw	fp,16(sp)
  812088:	df000404 	addi	fp,sp,16
  81208c:	e13ffe15 	stw	r4,-8(fp)
  812090:	2805883a 	mov	r2,r5
  812094:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  812098:	e0bffe17 	ldw	r2,-8(fp)
  81209c:	10800217 	ldw	r2,8(r2)
  8120a0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  8120a4:	e0bffd17 	ldw	r2,-12(fp)
  8120a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  8120ac:	e0bffd17 	ldw	r2,-12(fp)
  8120b0:	e0ffff0b 	ldhu	r3,-4(fp)
  8120b4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  8120b8:	e0bffd17 	ldw	r2,-12(fp)
  8120bc:	10c00c03 	ldbu	r3,48(r2)
  8120c0:	00bff7c4 	movi	r2,-33
  8120c4:	1884703a 	and	r2,r3,r2
  8120c8:	1007883a 	mov	r3,r2
  8120cc:	e0bffd17 	ldw	r2,-12(fp)
  8120d0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  8120d4:	e0bffd17 	ldw	r2,-12(fp)
  8120d8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  8120dc:	e0bffd17 	ldw	r2,-12(fp)
  8120e0:	10800c03 	ldbu	r2,48(r2)
  8120e4:	10803fcc 	andi	r2,r2,255
  8120e8:	1000181e 	bne	r2,zero,81214c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  8120ec:	e0bffd17 	ldw	r2,-12(fp)
  8120f0:	10c00d83 	ldbu	r3,54(r2)
  8120f4:	d0a07103 	ldbu	r2,-32316(gp)
  8120f8:	1884b03a 	or	r2,r3,r2
  8120fc:	d0a07105 	stb	r2,-32316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812100:	e0bffd17 	ldw	r2,-12(fp)
  812104:	10800d03 	ldbu	r2,52(r2)
  812108:	10c03fcc 	andi	r3,r2,255
  81210c:	e0bffd17 	ldw	r2,-12(fp)
  812110:	10800d03 	ldbu	r2,52(r2)
  812114:	11003fcc 	andi	r4,r2,255
  812118:	d0a07144 	addi	r2,gp,-32315
  81211c:	2085883a 	add	r2,r4,r2
  812120:	11000003 	ldbu	r4,0(r2)
  812124:	e0bffd17 	ldw	r2,-12(fp)
  812128:	10800d43 	ldbu	r2,53(r2)
  81212c:	2084b03a 	or	r2,r4,r2
  812130:	1009883a 	mov	r4,r2
  812134:	d0a07144 	addi	r2,gp,-32315
  812138:	1885883a 	add	r2,r3,r2
  81213c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  812140:	00800044 	movi	r2,1
  812144:	e0bffc05 	stb	r2,-16(fp)
  812148:	00000106 	br	812150 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  81214c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  812150:	e13ffe17 	ldw	r4,-8(fp)
  812154:	08121700 	call	812170 <OS_FlagUnlink>
    return (sched);
  812158:	e0bffc03 	ldbu	r2,-16(fp)
}
  81215c:	e037883a 	mov	sp,fp
  812160:	dfc00117 	ldw	ra,4(sp)
  812164:	df000017 	ldw	fp,0(sp)
  812168:	dec00204 	addi	sp,sp,8
  81216c:	f800283a 	ret

00812170 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  812170:	defffa04 	addi	sp,sp,-24
  812174:	df000515 	stw	fp,20(sp)
  812178:	df000504 	addi	fp,sp,20
  81217c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  812180:	e0bfff17 	ldw	r2,-4(fp)
  812184:	10800117 	ldw	r2,4(r2)
  812188:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81218c:	e0bfff17 	ldw	r2,-4(fp)
  812190:	10800017 	ldw	r2,0(r2)
  812194:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  812198:	e0bffb17 	ldw	r2,-20(fp)
  81219c:	10000b1e 	bne	r2,zero,8121cc <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  8121a0:	e0bfff17 	ldw	r2,-4(fp)
  8121a4:	10800317 	ldw	r2,12(r2)
  8121a8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  8121ac:	e0bffd17 	ldw	r2,-12(fp)
  8121b0:	e0fffc17 	ldw	r3,-16(fp)
  8121b4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  8121b8:	e0bffc17 	ldw	r2,-16(fp)
  8121bc:	10000b26 	beq	r2,zero,8121ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  8121c0:	e0bffc17 	ldw	r2,-16(fp)
  8121c4:	10000115 	stw	zero,4(r2)
  8121c8:	00000806 	br	8121ec <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  8121cc:	e0bffb17 	ldw	r2,-20(fp)
  8121d0:	e0fffc17 	ldw	r3,-16(fp)
  8121d4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  8121d8:	e0bffc17 	ldw	r2,-16(fp)
  8121dc:	10000326 	beq	r2,zero,8121ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  8121e0:	e0bffc17 	ldw	r2,-16(fp)
  8121e4:	e0fffb17 	ldw	r3,-20(fp)
  8121e8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  8121ec:	e0bfff17 	ldw	r2,-4(fp)
  8121f0:	10800217 	ldw	r2,8(r2)
  8121f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  8121f8:	e0bffe17 	ldw	r2,-8(fp)
  8121fc:	10000a15 	stw	zero,40(r2)
#endif
}
  812200:	0001883a 	nop
  812204:	e037883a 	mov	sp,fp
  812208:	df000017 	ldw	fp,0(sp)
  81220c:	dec00104 	addi	sp,sp,4
  812210:	f800283a 	ret

00812214 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  812214:	defff404 	addi	sp,sp,-48
  812218:	df000b15 	stw	fp,44(sp)
  81221c:	df000b04 	addi	fp,sp,44
  812220:	e13ffc15 	stw	r4,-16(fp)
  812224:	e17ffd15 	stw	r5,-12(fp)
  812228:	e1bffe15 	stw	r6,-8(fp)
  81222c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812230:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812234:	e0bfff17 	ldw	r2,-4(fp)
  812238:	1000021e 	bne	r2,zero,812244 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  81223c:	0005883a 	mov	r2,zero
  812240:	00006506 	br	8123d8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  812244:	e0bffc17 	ldw	r2,-16(fp)
  812248:	1000051e 	bne	r2,zero,812260 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81224c:	e0bfff17 	ldw	r2,-4(fp)
  812250:	00c01884 	movi	r3,98
  812254:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  812258:	0005883a 	mov	r2,zero
  81225c:	00005e06 	br	8123d8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  812260:	e0bffc17 	ldw	r2,-16(fp)
  812264:	108000cc 	andi	r2,r2,3
  812268:	10000526 	beq	r2,zero,812280 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81226c:	e0bfff17 	ldw	r2,-4(fp)
  812270:	00c01884 	movi	r3,98
  812274:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  812278:	0005883a 	mov	r2,zero
  81227c:	00005606 	br	8123d8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  812280:	e0bffd17 	ldw	r2,-12(fp)
  812284:	108000a8 	cmpgeui	r2,r2,2
  812288:	1000051e 	bne	r2,zero,8122a0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  81228c:	e0bfff17 	ldw	r2,-4(fp)
  812290:	00c016c4 	movi	r3,91
  812294:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  812298:	0005883a 	mov	r2,zero
  81229c:	00004e06 	br	8123d8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  8122a0:	e0bffe17 	ldw	r2,-8(fp)
  8122a4:	10800128 	cmpgeui	r2,r2,4
  8122a8:	1000051e 	bne	r2,zero,8122c0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  8122ac:	e0bfff17 	ldw	r2,-4(fp)
  8122b0:	00c01704 	movi	r3,92
  8122b4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8122b8:	0005883a 	mov	r2,zero
  8122bc:	00004606 	br	8123d8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8122c0:	0005303a 	rdctl	r2,status
  8122c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122c8:	e0fffb17 	ldw	r3,-20(fp)
  8122cc:	00bfff84 	movi	r2,-2
  8122d0:	1884703a 	and	r2,r3,r2
  8122d4:	1001703a 	wrctl	status,r2
  
  return context;
  8122d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8122dc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  8122e0:	d0a06e17 	ldw	r2,-32328(gp)
  8122e4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  8122e8:	d0a06e17 	ldw	r2,-32328(gp)
  8122ec:	10000326 	beq	r2,zero,8122fc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  8122f0:	d0a06e17 	ldw	r2,-32328(gp)
  8122f4:	10800117 	ldw	r2,4(r2)
  8122f8:	d0a06e15 	stw	r2,-32328(gp)
  8122fc:	e0bff817 	ldw	r2,-32(fp)
  812300:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812304:	e0bff917 	ldw	r2,-28(fp)
  812308:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  81230c:	e0bffa17 	ldw	r2,-24(fp)
  812310:	1000051e 	bne	r2,zero,812328 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  812314:	e0bfff17 	ldw	r2,-4(fp)
  812318:	00c01684 	movi	r3,90
  81231c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  812320:	0005883a 	mov	r2,zero
  812324:	00002c06 	br	8123d8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  812328:	e0bffc17 	ldw	r2,-16(fp)
  81232c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  812330:	e0fffc17 	ldw	r3,-16(fp)
  812334:	e0bffe17 	ldw	r2,-8(fp)
  812338:	1885883a 	add	r2,r3,r2
  81233c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  812340:	e03ff715 	stw	zero,-36(fp)
  812344:	00000c06 	br	812378 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  812348:	e0bff617 	ldw	r2,-40(fp)
  81234c:	e0fff517 	ldw	r3,-44(fp)
  812350:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  812354:	e0bff517 	ldw	r2,-44(fp)
  812358:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  81235c:	e0fff517 	ldw	r3,-44(fp)
  812360:	e0bffe17 	ldw	r2,-8(fp)
  812364:	1885883a 	add	r2,r3,r2
  812368:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81236c:	e0bff717 	ldw	r2,-36(fp)
  812370:	10800044 	addi	r2,r2,1
  812374:	e0bff715 	stw	r2,-36(fp)
  812378:	e0bffd17 	ldw	r2,-12(fp)
  81237c:	10bfffc4 	addi	r2,r2,-1
  812380:	e0fff717 	ldw	r3,-36(fp)
  812384:	18bff036 	bltu	r3,r2,812348 <__alt_mem_epcs_flash_controller_0+0xff809348>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  812388:	e0bff617 	ldw	r2,-40(fp)
  81238c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  812390:	e0bffa17 	ldw	r2,-24(fp)
  812394:	e0fffc17 	ldw	r3,-16(fp)
  812398:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81239c:	e0bffa17 	ldw	r2,-24(fp)
  8123a0:	e0fffc17 	ldw	r3,-16(fp)
  8123a4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  8123a8:	e0bffa17 	ldw	r2,-24(fp)
  8123ac:	e0fffd17 	ldw	r3,-12(fp)
  8123b0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  8123b4:	e0bffa17 	ldw	r2,-24(fp)
  8123b8:	e0fffd17 	ldw	r3,-12(fp)
  8123bc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  8123c0:	e0bffa17 	ldw	r2,-24(fp)
  8123c4:	e0fffe17 	ldw	r3,-8(fp)
  8123c8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  8123cc:	e0bfff17 	ldw	r2,-4(fp)
  8123d0:	10000005 	stb	zero,0(r2)
    return (pmem);
  8123d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8123d8:	e037883a 	mov	sp,fp
  8123dc:	df000017 	ldw	fp,0(sp)
  8123e0:	dec00104 	addi	sp,sp,4
  8123e4:	f800283a 	ret

008123e8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  8123e8:	defff804 	addi	sp,sp,-32
  8123ec:	df000715 	stw	fp,28(sp)
  8123f0:	df000704 	addi	fp,sp,28
  8123f4:	e13ffe15 	stw	r4,-8(fp)
  8123f8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8123fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812400:	e0bfff17 	ldw	r2,-4(fp)
  812404:	1000021e 	bne	r2,zero,812410 <OSMemGet+0x28>
        return ((void *)0);
  812408:	0005883a 	mov	r2,zero
  81240c:	00002e06 	br	8124c8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  812410:	e0bffe17 	ldw	r2,-8(fp)
  812414:	1000051e 	bne	r2,zero,81242c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812418:	e0bfff17 	ldw	r2,-4(fp)
  81241c:	00c01804 	movi	r3,96
  812420:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812424:	0005883a 	mov	r2,zero
  812428:	00002706 	br	8124c8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81242c:	0005303a 	rdctl	r2,status
  812430:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812434:	e0fffd17 	ldw	r3,-12(fp)
  812438:	00bfff84 	movi	r2,-2
  81243c:	1884703a 	and	r2,r3,r2
  812440:	1001703a 	wrctl	status,r2
  
  return context;
  812444:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812448:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  81244c:	e0bffe17 	ldw	r2,-8(fp)
  812450:	10800417 	ldw	r2,16(r2)
  812454:	10001426 	beq	r2,zero,8124a8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  812458:	e0bffe17 	ldw	r2,-8(fp)
  81245c:	10800117 	ldw	r2,4(r2)
  812460:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  812464:	e0bffb17 	ldw	r2,-20(fp)
  812468:	10c00017 	ldw	r3,0(r2)
  81246c:	e0bffe17 	ldw	r2,-8(fp)
  812470:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  812474:	e0bffe17 	ldw	r2,-8(fp)
  812478:	10800417 	ldw	r2,16(r2)
  81247c:	10ffffc4 	addi	r3,r2,-1
  812480:	e0bffe17 	ldw	r2,-8(fp)
  812484:	10c00415 	stw	r3,16(r2)
  812488:	e0bff917 	ldw	r2,-28(fp)
  81248c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812490:	e0bffa17 	ldw	r2,-24(fp)
  812494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  812498:	e0bfff17 	ldw	r2,-4(fp)
  81249c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  8124a0:	e0bffb17 	ldw	r2,-20(fp)
  8124a4:	00000806 	br	8124c8 <OSMemGet+0xe0>
  8124a8:	e0bff917 	ldw	r2,-28(fp)
  8124ac:	e0bffc15 	stw	r2,-16(fp)
  8124b0:	e0bffc17 	ldw	r2,-16(fp)
  8124b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  8124b8:	e0bfff17 	ldw	r2,-4(fp)
  8124bc:	00c01744 	movi	r3,93
  8124c0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  8124c4:	0005883a 	mov	r2,zero
}
  8124c8:	e037883a 	mov	sp,fp
  8124cc:	df000017 	ldw	fp,0(sp)
  8124d0:	dec00104 	addi	sp,sp,4
  8124d4:	f800283a 	ret

008124d8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8124d8:	defff704 	addi	sp,sp,-36
  8124dc:	dfc00815 	stw	ra,32(sp)
  8124e0:	df000715 	stw	fp,28(sp)
  8124e4:	df000704 	addi	fp,sp,28
  8124e8:	e13ffd15 	stw	r4,-12(fp)
  8124ec:	e17ffe15 	stw	r5,-8(fp)
  8124f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8124f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8124f8:	e0bfff17 	ldw	r2,-4(fp)
  8124fc:	1000021e 	bne	r2,zero,812508 <OSMemNameGet+0x30>
        return (0);
  812500:	0005883a 	mov	r2,zero
  812504:	00002b06 	br	8125b4 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  812508:	e0bffd17 	ldw	r2,-12(fp)
  81250c:	1000051e 	bne	r2,zero,812524 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812510:	e0bfff17 	ldw	r2,-4(fp)
  812514:	00c01804 	movi	r3,96
  812518:	10c00005 	stb	r3,0(r2)
        return (0);
  81251c:	0005883a 	mov	r2,zero
  812520:	00002406 	br	8125b4 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812524:	e0bffe17 	ldw	r2,-8(fp)
  812528:	1000051e 	bne	r2,zero,812540 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  81252c:	e0bfff17 	ldw	r2,-4(fp)
  812530:	00c00304 	movi	r3,12
  812534:	10c00005 	stb	r3,0(r2)
        return (0);
  812538:	0005883a 	mov	r2,zero
  81253c:	00001d06 	br	8125b4 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812540:	d0a07303 	ldbu	r2,-32308(gp)
  812544:	10803fcc 	andi	r2,r2,255
  812548:	10000526 	beq	r2,zero,812560 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  81254c:	e0bfff17 	ldw	r2,-4(fp)
  812550:	00c00444 	movi	r3,17
  812554:	10c00005 	stb	r3,0(r2)
        return (0);
  812558:	0005883a 	mov	r2,zero
  81255c:	00001506 	br	8125b4 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812560:	0005303a 	rdctl	r2,status
  812564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812568:	e0fffb17 	ldw	r3,-20(fp)
  81256c:	00bfff84 	movi	r2,-2
  812570:	1884703a 	and	r2,r3,r2
  812574:	1001703a 	wrctl	status,r2
  
  return context;
  812578:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81257c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  812580:	e0bffd17 	ldw	r2,-12(fp)
  812584:	10800504 	addi	r2,r2,20
  812588:	100b883a 	mov	r5,r2
  81258c:	e13ffe17 	ldw	r4,-8(fp)
  812590:	08103e00 	call	8103e0 <OS_StrCopy>
  812594:	e0bffa05 	stb	r2,-24(fp)
  812598:	e0bff917 	ldw	r2,-28(fp)
  81259c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125a0:	e0bffc17 	ldw	r2,-16(fp)
  8125a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8125a8:	e0bfff17 	ldw	r2,-4(fp)
  8125ac:	10000005 	stb	zero,0(r2)
    return (len);
  8125b0:	e0bffa03 	ldbu	r2,-24(fp)
}
  8125b4:	e037883a 	mov	sp,fp
  8125b8:	dfc00117 	ldw	ra,4(sp)
  8125bc:	df000017 	ldw	fp,0(sp)
  8125c0:	dec00204 	addi	sp,sp,8
  8125c4:	f800283a 	ret

008125c8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8125c8:	defff604 	addi	sp,sp,-40
  8125cc:	dfc00915 	stw	ra,36(sp)
  8125d0:	df000815 	stw	fp,32(sp)
  8125d4:	df000804 	addi	fp,sp,32
  8125d8:	e13ffd15 	stw	r4,-12(fp)
  8125dc:	e17ffe15 	stw	r5,-8(fp)
  8125e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8125e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8125e8:	e0bfff17 	ldw	r2,-4(fp)
  8125ec:	10003526 	beq	r2,zero,8126c4 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8125f0:	e0bffd17 	ldw	r2,-12(fp)
  8125f4:	1000041e 	bne	r2,zero,812608 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8125f8:	e0bfff17 	ldw	r2,-4(fp)
  8125fc:	00c01804 	movi	r3,96
  812600:	10c00005 	stb	r3,0(r2)
        return;
  812604:	00003006 	br	8126c8 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812608:	e0bffe17 	ldw	r2,-8(fp)
  81260c:	1000041e 	bne	r2,zero,812620 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  812610:	e0bfff17 	ldw	r2,-4(fp)
  812614:	00c00304 	movi	r3,12
  812618:	10c00005 	stb	r3,0(r2)
        return;
  81261c:	00002a06 	br	8126c8 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812620:	d0a07303 	ldbu	r2,-32308(gp)
  812624:	10803fcc 	andi	r2,r2,255
  812628:	10000426 	beq	r2,zero,81263c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  81262c:	e0bfff17 	ldw	r2,-4(fp)
  812630:	00c00484 	movi	r3,18
  812634:	10c00005 	stb	r3,0(r2)
        return;
  812638:	00002306 	br	8126c8 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81263c:	0005303a 	rdctl	r2,status
  812640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812644:	e0fffc17 	ldw	r3,-16(fp)
  812648:	00bfff84 	movi	r2,-2
  81264c:	1884703a 	and	r2,r3,r2
  812650:	1001703a 	wrctl	status,r2
  
  return context;
  812654:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812658:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81265c:	e13ffe17 	ldw	r4,-8(fp)
  812660:	08104540 	call	810454 <OS_StrLen>
  812664:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  812668:	e0bffa03 	ldbu	r2,-24(fp)
  81266c:	10800830 	cmpltui	r2,r2,32
  812670:	1000081e 	bne	r2,zero,812694 <OSMemNameSet+0xcc>
  812674:	e0bff817 	ldw	r2,-32(fp)
  812678:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81267c:	e0bff917 	ldw	r2,-28(fp)
  812680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  812684:	e0bfff17 	ldw	r2,-4(fp)
  812688:	00c018c4 	movi	r3,99
  81268c:	10c00005 	stb	r3,0(r2)
        return;
  812690:	00000d06 	br	8126c8 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  812694:	e0bffd17 	ldw	r2,-12(fp)
  812698:	10800504 	addi	r2,r2,20
  81269c:	e17ffe17 	ldw	r5,-8(fp)
  8126a0:	1009883a 	mov	r4,r2
  8126a4:	08103e00 	call	8103e0 <OS_StrCopy>
  8126a8:	e0bff817 	ldw	r2,-32(fp)
  8126ac:	e0bffb15 	stw	r2,-20(fp)
  8126b0:	e0bffb17 	ldw	r2,-20(fp)
  8126b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8126b8:	e0bfff17 	ldw	r2,-4(fp)
  8126bc:	10000005 	stb	zero,0(r2)
  8126c0:	00000106 	br	8126c8 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  8126c4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  8126c8:	e037883a 	mov	sp,fp
  8126cc:	dfc00117 	ldw	ra,4(sp)
  8126d0:	df000017 	ldw	fp,0(sp)
  8126d4:	dec00204 	addi	sp,sp,8
  8126d8:	f800283a 	ret

008126dc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  8126dc:	defff904 	addi	sp,sp,-28
  8126e0:	df000615 	stw	fp,24(sp)
  8126e4:	df000604 	addi	fp,sp,24
  8126e8:	e13ffe15 	stw	r4,-8(fp)
  8126ec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8126f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8126f4:	e0bffe17 	ldw	r2,-8(fp)
  8126f8:	1000021e 	bne	r2,zero,812704 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8126fc:	00801804 	movi	r2,96
  812700:	00002806 	br	8127a4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  812704:	e0bfff17 	ldw	r2,-4(fp)
  812708:	1000021e 	bne	r2,zero,812714 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  81270c:	008017c4 	movi	r2,95
  812710:	00002406 	br	8127a4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812714:	0005303a 	rdctl	r2,status
  812718:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81271c:	e0fffd17 	ldw	r3,-12(fp)
  812720:	00bfff84 	movi	r2,-2
  812724:	1884703a 	and	r2,r3,r2
  812728:	1001703a 	wrctl	status,r2
  
  return context;
  81272c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812730:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  812734:	e0bffe17 	ldw	r2,-8(fp)
  812738:	10c00417 	ldw	r3,16(r2)
  81273c:	e0bffe17 	ldw	r2,-8(fp)
  812740:	10800317 	ldw	r2,12(r2)
  812744:	18800636 	bltu	r3,r2,812760 <OSMemPut+0x84>
  812748:	e0bffa17 	ldw	r2,-24(fp)
  81274c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812750:	e0bffb17 	ldw	r2,-20(fp)
  812754:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  812758:	00801784 	movi	r2,94
  81275c:	00001106 	br	8127a4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  812760:	e0bffe17 	ldw	r2,-8(fp)
  812764:	10c00117 	ldw	r3,4(r2)
  812768:	e0bfff17 	ldw	r2,-4(fp)
  81276c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  812770:	e0bffe17 	ldw	r2,-8(fp)
  812774:	e0ffff17 	ldw	r3,-4(fp)
  812778:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  81277c:	e0bffe17 	ldw	r2,-8(fp)
  812780:	10800417 	ldw	r2,16(r2)
  812784:	10c00044 	addi	r3,r2,1
  812788:	e0bffe17 	ldw	r2,-8(fp)
  81278c:	10c00415 	stw	r3,16(r2)
  812790:	e0bffa17 	ldw	r2,-24(fp)
  812794:	e0bffc15 	stw	r2,-16(fp)
  812798:	e0bffc17 	ldw	r2,-16(fp)
  81279c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  8127a0:	0005883a 	mov	r2,zero
}
  8127a4:	e037883a 	mov	sp,fp
  8127a8:	df000017 	ldw	fp,0(sp)
  8127ac:	dec00104 	addi	sp,sp,4
  8127b0:	f800283a 	ret

008127b4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  8127b4:	defffa04 	addi	sp,sp,-24
  8127b8:	df000515 	stw	fp,20(sp)
  8127bc:	df000504 	addi	fp,sp,20
  8127c0:	e13ffe15 	stw	r4,-8(fp)
  8127c4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8127c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8127cc:	e0bffe17 	ldw	r2,-8(fp)
  8127d0:	1000021e 	bne	r2,zero,8127dc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8127d4:	00801804 	movi	r2,96
  8127d8:	00002c06 	br	81288c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  8127dc:	e0bfff17 	ldw	r2,-4(fp)
  8127e0:	1000021e 	bne	r2,zero,8127ec <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  8127e4:	00801844 	movi	r2,97
  8127e8:	00002806 	br	81288c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8127ec:	0005303a 	rdctl	r2,status
  8127f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8127f4:	e0fffc17 	ldw	r3,-16(fp)
  8127f8:	00bfff84 	movi	r2,-2
  8127fc:	1884703a 	and	r2,r3,r2
  812800:	1001703a 	wrctl	status,r2
  
  return context;
  812804:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812808:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  81280c:	e0bffe17 	ldw	r2,-8(fp)
  812810:	10c00017 	ldw	r3,0(r2)
  812814:	e0bfff17 	ldw	r2,-4(fp)
  812818:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  81281c:	e0bffe17 	ldw	r2,-8(fp)
  812820:	10c00117 	ldw	r3,4(r2)
  812824:	e0bfff17 	ldw	r2,-4(fp)
  812828:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  81282c:	e0bffe17 	ldw	r2,-8(fp)
  812830:	10c00217 	ldw	r3,8(r2)
  812834:	e0bfff17 	ldw	r2,-4(fp)
  812838:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  81283c:	e0bffe17 	ldw	r2,-8(fp)
  812840:	10c00317 	ldw	r3,12(r2)
  812844:	e0bfff17 	ldw	r2,-4(fp)
  812848:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  81284c:	e0bffe17 	ldw	r2,-8(fp)
  812850:	10c00417 	ldw	r3,16(r2)
  812854:	e0bfff17 	ldw	r2,-4(fp)
  812858:	10c00415 	stw	r3,16(r2)
  81285c:	e0bffb17 	ldw	r2,-20(fp)
  812860:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812864:	e0bffd17 	ldw	r2,-12(fp)
  812868:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81286c:	e0bfff17 	ldw	r2,-4(fp)
  812870:	10c00317 	ldw	r3,12(r2)
  812874:	e0bfff17 	ldw	r2,-4(fp)
  812878:	10800417 	ldw	r2,16(r2)
  81287c:	1887c83a 	sub	r3,r3,r2
  812880:	e0bfff17 	ldw	r2,-4(fp)
  812884:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  812888:	0005883a 	mov	r2,zero
}
  81288c:	e037883a 	mov	sp,fp
  812890:	df000017 	ldw	fp,0(sp)
  812894:	dec00104 	addi	sp,sp,4
  812898:	f800283a 	ret

0081289c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  81289c:	defffc04 	addi	sp,sp,-16
  8128a0:	dfc00315 	stw	ra,12(sp)
  8128a4:	df000215 	stw	fp,8(sp)
  8128a8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  8128ac:	01430c04 	movi	r5,3120
  8128b0:	010020b4 	movhi	r4,130
  8128b4:	210d6004 	addi	r4,r4,13696
  8128b8:	08101e00 	call	8101e0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  8128bc:	008020b4 	movhi	r2,130
  8128c0:	108d6004 	addi	r2,r2,13696
  8128c4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  8128c8:	e03fff0d 	sth	zero,-4(fp)
  8128cc:	00001606 	br	812928 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  8128d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8128d4:	10800044 	addi	r2,r2,1
  8128d8:	01400d04 	movi	r5,52
  8128dc:	1009883a 	mov	r4,r2
  8128e0:	080b2400 	call	80b240 <__mulsi3>
  8128e4:	1007883a 	mov	r3,r2
  8128e8:	008020b4 	movhi	r2,130
  8128ec:	108d6004 	addi	r2,r2,13696
  8128f0:	1887883a 	add	r3,r3,r2
  8128f4:	e0bffe17 	ldw	r2,-8(fp)
  8128f8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  8128fc:	e0bffe17 	ldw	r2,-8(fp)
  812900:	00c00fc4 	movi	r3,63
  812904:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  812908:	e0bffe17 	ldw	r2,-8(fp)
  81290c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  812910:	e0bffe17 	ldw	r2,-8(fp)
  812914:	10800d04 	addi	r2,r2,52
  812918:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81291c:	e0bfff0b 	ldhu	r2,-4(fp)
  812920:	10800044 	addi	r2,r2,1
  812924:	e0bfff0d 	sth	r2,-4(fp)
  812928:	e0bfff0b 	ldhu	r2,-4(fp)
  81292c:	10800ef0 	cmpltui	r2,r2,59
  812930:	103fe71e 	bne	r2,zero,8128d0 <__alt_mem_epcs_flash_controller_0+0xff8098d0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  812934:	e0bffe17 	ldw	r2,-8(fp)
  812938:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  81293c:	e0bffe17 	ldw	r2,-8(fp)
  812940:	00c00fc4 	movi	r3,63
  812944:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  812948:	e0bffe17 	ldw	r2,-8(fp)
  81294c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  812950:	008020b4 	movhi	r2,130
  812954:	108d6004 	addi	r2,r2,13696
  812958:	d0a06e15 	stw	r2,-32328(gp)
#endif
}
  81295c:	0001883a 	nop
  812960:	e037883a 	mov	sp,fp
  812964:	dfc00117 	ldw	ra,4(sp)
  812968:	df000017 	ldw	fp,0(sp)
  81296c:	dec00204 	addi	sp,sp,8
  812970:	f800283a 	ret

00812974 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  812974:	defff804 	addi	sp,sp,-32
  812978:	df000715 	stw	fp,28(sp)
  81297c:	df000704 	addi	fp,sp,28
  812980:	e13ffe15 	stw	r4,-8(fp)
  812984:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812988:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81298c:	e0bfff17 	ldw	r2,-4(fp)
  812990:	1000021e 	bne	r2,zero,81299c <OSQAccept+0x28>
        return ((void *)0);
  812994:	0005883a 	mov	r2,zero
  812998:	00004206 	br	812aa4 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81299c:	e0bffe17 	ldw	r2,-8(fp)
  8129a0:	1000051e 	bne	r2,zero,8129b8 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8129a4:	e0bfff17 	ldw	r2,-4(fp)
  8129a8:	00c00104 	movi	r3,4
  8129ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8129b0:	0005883a 	mov	r2,zero
  8129b4:	00003b06 	br	812aa4 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  8129b8:	e0bffe17 	ldw	r2,-8(fp)
  8129bc:	10800003 	ldbu	r2,0(r2)
  8129c0:	10803fcc 	andi	r2,r2,255
  8129c4:	108000a0 	cmpeqi	r2,r2,2
  8129c8:	1000051e 	bne	r2,zero,8129e0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  8129cc:	e0bfff17 	ldw	r2,-4(fp)
  8129d0:	00c00044 	movi	r3,1
  8129d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8129d8:	0005883a 	mov	r2,zero
  8129dc:	00003106 	br	812aa4 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129e0:	0005303a 	rdctl	r2,status
  8129e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129e8:	e0fffd17 	ldw	r3,-12(fp)
  8129ec:	00bfff84 	movi	r2,-2
  8129f0:	1884703a 	and	r2,r3,r2
  8129f4:	1001703a 	wrctl	status,r2
  
  return context;
  8129f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8129fc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  812a00:	e0bffe17 	ldw	r2,-8(fp)
  812a04:	10800117 	ldw	r2,4(r2)
  812a08:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  812a0c:	e0bffc17 	ldw	r2,-16(fp)
  812a10:	1080058b 	ldhu	r2,22(r2)
  812a14:	10bfffcc 	andi	r2,r2,65535
  812a18:	10001926 	beq	r2,zero,812a80 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  812a1c:	e0bffc17 	ldw	r2,-16(fp)
  812a20:	10800417 	ldw	r2,16(r2)
  812a24:	11000104 	addi	r4,r2,4
  812a28:	e0fffc17 	ldw	r3,-16(fp)
  812a2c:	19000415 	stw	r4,16(r3)
  812a30:	10800017 	ldw	r2,0(r2)
  812a34:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  812a38:	e0bffc17 	ldw	r2,-16(fp)
  812a3c:	1080058b 	ldhu	r2,22(r2)
  812a40:	10bfffc4 	addi	r2,r2,-1
  812a44:	1007883a 	mov	r3,r2
  812a48:	e0bffc17 	ldw	r2,-16(fp)
  812a4c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  812a50:	e0bffc17 	ldw	r2,-16(fp)
  812a54:	10c00417 	ldw	r3,16(r2)
  812a58:	e0bffc17 	ldw	r2,-16(fp)
  812a5c:	10800217 	ldw	r2,8(r2)
  812a60:	1880041e 	bne	r3,r2,812a74 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  812a64:	e0bffc17 	ldw	r2,-16(fp)
  812a68:	10c00117 	ldw	r3,4(r2)
  812a6c:	e0bffc17 	ldw	r2,-16(fp)
  812a70:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  812a74:	e0bfff17 	ldw	r2,-4(fp)
  812a78:	10000005 	stb	zero,0(r2)
  812a7c:	00000406 	br	812a90 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  812a80:	e0bfff17 	ldw	r2,-4(fp)
  812a84:	00c007c4 	movi	r3,31
  812a88:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  812a8c:	e03ff915 	stw	zero,-28(fp)
  812a90:	e0bffa17 	ldw	r2,-24(fp)
  812a94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a98:	e0bffb17 	ldw	r2,-20(fp)
  812a9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  812aa0:	e0bff917 	ldw	r2,-28(fp)
}
  812aa4:	e037883a 	mov	sp,fp
  812aa8:	df000017 	ldw	fp,0(sp)
  812aac:	dec00104 	addi	sp,sp,4
  812ab0:	f800283a 	ret

00812ab4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  812ab4:	defff404 	addi	sp,sp,-48
  812ab8:	dfc00b15 	stw	ra,44(sp)
  812abc:	df000a15 	stw	fp,40(sp)
  812ac0:	df000a04 	addi	fp,sp,40
  812ac4:	e13ffe15 	stw	r4,-8(fp)
  812ac8:	2805883a 	mov	r2,r5
  812acc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812ad0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  812ad4:	d0a07303 	ldbu	r2,-32308(gp)
  812ad8:	10803fcc 	andi	r2,r2,255
  812adc:	10000226 	beq	r2,zero,812ae8 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  812ae0:	0005883a 	mov	r2,zero
  812ae4:	00005906 	br	812c4c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ae8:	0005303a 	rdctl	r2,status
  812aec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812af0:	e0fffd17 	ldw	r3,-12(fp)
  812af4:	00bfff84 	movi	r2,-2
  812af8:	1884703a 	and	r2,r3,r2
  812afc:	1001703a 	wrctl	status,r2
  
  return context;
  812b00:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  812b04:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  812b08:	d0a07217 	ldw	r2,-32312(gp)
  812b0c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  812b10:	d0a07217 	ldw	r2,-32312(gp)
  812b14:	10000326 	beq	r2,zero,812b24 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  812b18:	d0a07217 	ldw	r2,-32312(gp)
  812b1c:	10800117 	ldw	r2,4(r2)
  812b20:	d0a07215 	stw	r2,-32312(gp)
  812b24:	e0bff717 	ldw	r2,-36(fp)
  812b28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b2c:	e0bff817 	ldw	r2,-32(fp)
  812b30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  812b34:	e0bff617 	ldw	r2,-40(fp)
  812b38:	10004326 	beq	r2,zero,812c48 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b3c:	0005303a 	rdctl	r2,status
  812b40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b44:	e0fff917 	ldw	r3,-28(fp)
  812b48:	00bfff84 	movi	r2,-2
  812b4c:	1884703a 	and	r2,r3,r2
  812b50:	1001703a 	wrctl	status,r2
  
  return context;
  812b54:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  812b58:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  812b5c:	d0a07017 	ldw	r2,-32320(gp)
  812b60:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  812b64:	e0bffb17 	ldw	r2,-20(fp)
  812b68:	10002d26 	beq	r2,zero,812c20 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  812b6c:	d0a07017 	ldw	r2,-32320(gp)
  812b70:	10800017 	ldw	r2,0(r2)
  812b74:	d0a07015 	stw	r2,-32320(gp)
  812b78:	e0bff717 	ldw	r2,-36(fp)
  812b7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b80:	e0bffa17 	ldw	r2,-24(fp)
  812b84:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  812b88:	e0bffb17 	ldw	r2,-20(fp)
  812b8c:	e0fffe17 	ldw	r3,-8(fp)
  812b90:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  812b94:	e0bfff0b 	ldhu	r2,-4(fp)
  812b98:	1085883a 	add	r2,r2,r2
  812b9c:	1085883a 	add	r2,r2,r2
  812ba0:	1007883a 	mov	r3,r2
  812ba4:	e0bffe17 	ldw	r2,-8(fp)
  812ba8:	10c7883a 	add	r3,r2,r3
  812bac:	e0bffb17 	ldw	r2,-20(fp)
  812bb0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  812bb4:	e0bffb17 	ldw	r2,-20(fp)
  812bb8:	e0fffe17 	ldw	r3,-8(fp)
  812bbc:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  812bc0:	e0bffb17 	ldw	r2,-20(fp)
  812bc4:	e0fffe17 	ldw	r3,-8(fp)
  812bc8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  812bcc:	e0bffb17 	ldw	r2,-20(fp)
  812bd0:	e0ffff0b 	ldhu	r3,-4(fp)
  812bd4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  812bd8:	e0bffb17 	ldw	r2,-20(fp)
  812bdc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  812be0:	e0bff617 	ldw	r2,-40(fp)
  812be4:	00c00084 	movi	r3,2
  812be8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  812bec:	e0bff617 	ldw	r2,-40(fp)
  812bf0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  812bf4:	e0bff617 	ldw	r2,-40(fp)
  812bf8:	e0fffb17 	ldw	r3,-20(fp)
  812bfc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  812c00:	e0bff617 	ldw	r2,-40(fp)
  812c04:	00c00fc4 	movi	r3,63
  812c08:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  812c0c:	e0bff617 	ldw	r2,-40(fp)
  812c10:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  812c14:	e13ff617 	ldw	r4,-40(fp)
  812c18:	080fe000 	call	80fe00 <OS_EventWaitListInit>
  812c1c:	00000a06 	br	812c48 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  812c20:	d0e07217 	ldw	r3,-32312(gp)
  812c24:	e0bff617 	ldw	r2,-40(fp)
  812c28:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  812c2c:	e0bff617 	ldw	r2,-40(fp)
  812c30:	d0a07215 	stw	r2,-32312(gp)
  812c34:	e0bff717 	ldw	r2,-36(fp)
  812c38:	e0bffc15 	stw	r2,-16(fp)
  812c3c:	e0bffc17 	ldw	r2,-16(fp)
  812c40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  812c44:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  812c48:	e0bff617 	ldw	r2,-40(fp)
}
  812c4c:	e037883a 	mov	sp,fp
  812c50:	dfc00117 	ldw	ra,4(sp)
  812c54:	df000017 	ldw	fp,0(sp)
  812c58:	dec00204 	addi	sp,sp,8
  812c5c:	f800283a 	ret

00812c60 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812c60:	defff204 	addi	sp,sp,-56
  812c64:	dfc00d15 	stw	ra,52(sp)
  812c68:	df000c15 	stw	fp,48(sp)
  812c6c:	df000c04 	addi	fp,sp,48
  812c70:	e13ffd15 	stw	r4,-12(fp)
  812c74:	2805883a 	mov	r2,r5
  812c78:	e1bfff15 	stw	r6,-4(fp)
  812c7c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812c80:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812c84:	e0bfff17 	ldw	r2,-4(fp)
  812c88:	1000021e 	bne	r2,zero,812c94 <OSQDel+0x34>
        return (pevent);
  812c8c:	e0bffd17 	ldw	r2,-12(fp)
  812c90:	00008e06 	br	812ecc <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812c94:	e0bffd17 	ldw	r2,-12(fp)
  812c98:	1000051e 	bne	r2,zero,812cb0 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  812c9c:	e0bfff17 	ldw	r2,-4(fp)
  812ca0:	00c00104 	movi	r3,4
  812ca4:	10c00005 	stb	r3,0(r2)
        return (pevent);
  812ca8:	e0bffd17 	ldw	r2,-12(fp)
  812cac:	00008706 	br	812ecc <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  812cb0:	e0bffd17 	ldw	r2,-12(fp)
  812cb4:	10800003 	ldbu	r2,0(r2)
  812cb8:	10803fcc 	andi	r2,r2,255
  812cbc:	108000a0 	cmpeqi	r2,r2,2
  812cc0:	1000051e 	bne	r2,zero,812cd8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  812cc4:	e0bfff17 	ldw	r2,-4(fp)
  812cc8:	00c00044 	movi	r3,1
  812ccc:	10c00005 	stb	r3,0(r2)
        return (pevent);
  812cd0:	e0bffd17 	ldw	r2,-12(fp)
  812cd4:	00007d06 	br	812ecc <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  812cd8:	d0a07303 	ldbu	r2,-32308(gp)
  812cdc:	10803fcc 	andi	r2,r2,255
  812ce0:	10000526 	beq	r2,zero,812cf8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  812ce4:	e0bfff17 	ldw	r2,-4(fp)
  812ce8:	00c003c4 	movi	r3,15
  812cec:	10c00005 	stb	r3,0(r2)
        return (pevent);
  812cf0:	e0bffd17 	ldw	r2,-12(fp)
  812cf4:	00007506 	br	812ecc <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812cf8:	0005303a 	rdctl	r2,status
  812cfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d00:	e0fffc17 	ldw	r3,-16(fp)
  812d04:	00bfff84 	movi	r2,-2
  812d08:	1884703a 	and	r2,r3,r2
  812d0c:	1001703a 	wrctl	status,r2
  
  return context;
  812d10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812d14:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  812d18:	e0bffd17 	ldw	r2,-12(fp)
  812d1c:	10800283 	ldbu	r2,10(r2)
  812d20:	10803fcc 	andi	r2,r2,255
  812d24:	10000326 	beq	r2,zero,812d34 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  812d28:	00800044 	movi	r2,1
  812d2c:	e0bff405 	stb	r2,-48(fp)
  812d30:	00000106 	br	812d38 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  812d34:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  812d38:	e0bffe03 	ldbu	r2,-8(fp)
  812d3c:	10000326 	beq	r2,zero,812d4c <OSQDel+0xec>
  812d40:	10800060 	cmpeqi	r2,r2,1
  812d44:	1000301e 	bne	r2,zero,812e08 <OSQDel+0x1a8>
  812d48:	00005506 	br	812ea0 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  812d4c:	e0bff403 	ldbu	r2,-48(fp)
  812d50:	10001e1e 	bne	r2,zero,812dcc <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  812d54:	e0bffd17 	ldw	r2,-12(fp)
  812d58:	00c00fc4 	movi	r3,63
  812d5c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  812d60:	e0bffd17 	ldw	r2,-12(fp)
  812d64:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  812d68:	e0bffd17 	ldw	r2,-12(fp)
  812d6c:	10800117 	ldw	r2,4(r2)
  812d70:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  812d74:	d0e07017 	ldw	r3,-32320(gp)
  812d78:	e0bff817 	ldw	r2,-32(fp)
  812d7c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  812d80:	e0bff817 	ldw	r2,-32(fp)
  812d84:	d0a07015 	stw	r2,-32320(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812d88:	e0bffd17 	ldw	r2,-12(fp)
  812d8c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  812d90:	d0e07217 	ldw	r3,-32312(gp)
  812d94:	e0bffd17 	ldw	r2,-12(fp)
  812d98:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  812d9c:	e0bffd17 	ldw	r2,-12(fp)
  812da0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  812da4:	e0bffd17 	ldw	r2,-12(fp)
  812da8:	d0a07215 	stw	r2,-32312(gp)
  812dac:	e0bff617 	ldw	r2,-40(fp)
  812db0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812db4:	e0bff717 	ldw	r2,-36(fp)
  812db8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  812dbc:	e0bfff17 	ldw	r2,-4(fp)
  812dc0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  812dc4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  812dc8:	00003f06 	br	812ec8 <OSQDel+0x268>
  812dcc:	e0bff617 	ldw	r2,-40(fp)
  812dd0:	e0bff915 	stw	r2,-28(fp)
  812dd4:	e0bff917 	ldw	r2,-28(fp)
  812dd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  812ddc:	e0bfff17 	ldw	r2,-4(fp)
  812de0:	00c01244 	movi	r3,73
  812de4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  812de8:	e0bffd17 	ldw	r2,-12(fp)
  812dec:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  812df0:	00003506 	br	812ec8 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  812df4:	000f883a 	mov	r7,zero
  812df8:	01800104 	movi	r6,4
  812dfc:	000b883a 	mov	r5,zero
  812e00:	e13ffd17 	ldw	r4,-12(fp)
  812e04:	080f8500 	call	80f850 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  812e08:	e0bffd17 	ldw	r2,-12(fp)
  812e0c:	10800283 	ldbu	r2,10(r2)
  812e10:	10803fcc 	andi	r2,r2,255
  812e14:	103ff71e 	bne	r2,zero,812df4 <__alt_mem_epcs_flash_controller_0+0xff809df4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  812e18:	e0bffd17 	ldw	r2,-12(fp)
  812e1c:	00c00fc4 	movi	r3,63
  812e20:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  812e24:	e0bffd17 	ldw	r2,-12(fp)
  812e28:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  812e2c:	e0bffd17 	ldw	r2,-12(fp)
  812e30:	10800117 	ldw	r2,4(r2)
  812e34:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  812e38:	d0e07017 	ldw	r3,-32320(gp)
  812e3c:	e0bff817 	ldw	r2,-32(fp)
  812e40:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  812e44:	e0bff817 	ldw	r2,-32(fp)
  812e48:	d0a07015 	stw	r2,-32320(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812e4c:	e0bffd17 	ldw	r2,-12(fp)
  812e50:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  812e54:	d0e07217 	ldw	r3,-32312(gp)
  812e58:	e0bffd17 	ldw	r2,-12(fp)
  812e5c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  812e60:	e0bffd17 	ldw	r2,-12(fp)
  812e64:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  812e68:	e0bffd17 	ldw	r2,-12(fp)
  812e6c:	d0a07215 	stw	r2,-32312(gp)
  812e70:	e0bff617 	ldw	r2,-40(fp)
  812e74:	e0bffa15 	stw	r2,-24(fp)
  812e78:	e0bffa17 	ldw	r2,-24(fp)
  812e7c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  812e80:	e0bff403 	ldbu	r2,-48(fp)
  812e84:	10800058 	cmpnei	r2,r2,1
  812e88:	1000011e 	bne	r2,zero,812e90 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  812e8c:	081029c0 	call	81029c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  812e90:	e0bfff17 	ldw	r2,-4(fp)
  812e94:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  812e98:	e03ff515 	stw	zero,-44(fp)
             break;
  812e9c:	00000a06 	br	812ec8 <OSQDel+0x268>
  812ea0:	e0bff617 	ldw	r2,-40(fp)
  812ea4:	e0bffb15 	stw	r2,-20(fp)
  812ea8:	e0bffb17 	ldw	r2,-20(fp)
  812eac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  812eb0:	e0bfff17 	ldw	r2,-4(fp)
  812eb4:	00c001c4 	movi	r3,7
  812eb8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  812ebc:	e0bffd17 	ldw	r2,-12(fp)
  812ec0:	e0bff515 	stw	r2,-44(fp)
             break;
  812ec4:	0001883a 	nop
    }
    return (pevent_return);
  812ec8:	e0bff517 	ldw	r2,-44(fp)
}
  812ecc:	e037883a 	mov	sp,fp
  812ed0:	dfc00117 	ldw	ra,4(sp)
  812ed4:	df000017 	ldw	fp,0(sp)
  812ed8:	dec00204 	addi	sp,sp,8
  812edc:	f800283a 	ret

00812ee0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  812ee0:	defffa04 	addi	sp,sp,-24
  812ee4:	df000515 	stw	fp,20(sp)
  812ee8:	df000504 	addi	fp,sp,20
  812eec:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812ef0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812ef4:	e0bfff17 	ldw	r2,-4(fp)
  812ef8:	1000021e 	bne	r2,zero,812f04 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  812efc:	00800104 	movi	r2,4
  812f00:	00002106 	br	812f88 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  812f04:	e0bfff17 	ldw	r2,-4(fp)
  812f08:	10800003 	ldbu	r2,0(r2)
  812f0c:	10803fcc 	andi	r2,r2,255
  812f10:	108000a0 	cmpeqi	r2,r2,2
  812f14:	1000021e 	bne	r2,zero,812f20 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  812f18:	00800044 	movi	r2,1
  812f1c:	00001a06 	br	812f88 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f20:	0005303a 	rdctl	r2,status
  812f24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f28:	e0fffd17 	ldw	r3,-12(fp)
  812f2c:	00bfff84 	movi	r2,-2
  812f30:	1884703a 	and	r2,r3,r2
  812f34:	1001703a 	wrctl	status,r2
  
  return context;
  812f38:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812f3c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  812f40:	e0bfff17 	ldw	r2,-4(fp)
  812f44:	10800117 	ldw	r2,4(r2)
  812f48:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  812f4c:	e0bffc17 	ldw	r2,-16(fp)
  812f50:	10c00117 	ldw	r3,4(r2)
  812f54:	e0bffc17 	ldw	r2,-16(fp)
  812f58:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  812f5c:	e0bffc17 	ldw	r2,-16(fp)
  812f60:	10c00117 	ldw	r3,4(r2)
  812f64:	e0bffc17 	ldw	r2,-16(fp)
  812f68:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  812f6c:	e0bffc17 	ldw	r2,-16(fp)
  812f70:	1000058d 	sth	zero,22(r2)
  812f74:	e0bffb17 	ldw	r2,-20(fp)
  812f78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f7c:	e0bffe17 	ldw	r2,-8(fp)
  812f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812f84:	0005883a 	mov	r2,zero
}
  812f88:	e037883a 	mov	sp,fp
  812f8c:	df000017 	ldw	fp,0(sp)
  812f90:	dec00104 	addi	sp,sp,4
  812f94:	f800283a 	ret

00812f98 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  812f98:	defff304 	addi	sp,sp,-52
  812f9c:	dfc00c15 	stw	ra,48(sp)
  812fa0:	df000b15 	stw	fp,44(sp)
  812fa4:	df000b04 	addi	fp,sp,44
  812fa8:	e13ffd15 	stw	r4,-12(fp)
  812fac:	2805883a 	mov	r2,r5
  812fb0:	e1bfff15 	stw	r6,-4(fp)
  812fb4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812fb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812fbc:	e0bfff17 	ldw	r2,-4(fp)
  812fc0:	1000021e 	bne	r2,zero,812fcc <OSQPend+0x34>
        return ((void *)0);
  812fc4:	0005883a 	mov	r2,zero
  812fc8:	00009106 	br	813210 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  812fcc:	e0bffd17 	ldw	r2,-12(fp)
  812fd0:	1000051e 	bne	r2,zero,812fe8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  812fd4:	e0bfff17 	ldw	r2,-4(fp)
  812fd8:	00c00104 	movi	r3,4
  812fdc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812fe0:	0005883a 	mov	r2,zero
  812fe4:	00008a06 	br	813210 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  812fe8:	e0bffd17 	ldw	r2,-12(fp)
  812fec:	10800003 	ldbu	r2,0(r2)
  812ff0:	10803fcc 	andi	r2,r2,255
  812ff4:	108000a0 	cmpeqi	r2,r2,2
  812ff8:	1000051e 	bne	r2,zero,813010 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  812ffc:	e0bfff17 	ldw	r2,-4(fp)
  813000:	00c00044 	movi	r3,1
  813004:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  813008:	0005883a 	mov	r2,zero
  81300c:	00008006 	br	813210 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  813010:	d0a07303 	ldbu	r2,-32308(gp)
  813014:	10803fcc 	andi	r2,r2,255
  813018:	10000526 	beq	r2,zero,813030 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  81301c:	e0bfff17 	ldw	r2,-4(fp)
  813020:	00c00084 	movi	r3,2
  813024:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  813028:	0005883a 	mov	r2,zero
  81302c:	00007806 	br	813210 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  813030:	d0a06503 	ldbu	r2,-32364(gp)
  813034:	10803fcc 	andi	r2,r2,255
  813038:	10000526 	beq	r2,zero,813050 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  81303c:	e0bfff17 	ldw	r2,-4(fp)
  813040:	00c00344 	movi	r3,13
  813044:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  813048:	0005883a 	mov	r2,zero
  81304c:	00007006 	br	813210 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813050:	0005303a 	rdctl	r2,status
  813054:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813058:	e0fffc17 	ldw	r3,-16(fp)
  81305c:	00bfff84 	movi	r2,-2
  813060:	1884703a 	and	r2,r3,r2
  813064:	1001703a 	wrctl	status,r2
  
  return context;
  813068:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81306c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  813070:	e0bffd17 	ldw	r2,-12(fp)
  813074:	10800117 	ldw	r2,4(r2)
  813078:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81307c:	e0bff817 	ldw	r2,-32(fp)
  813080:	1080058b 	ldhu	r2,22(r2)
  813084:	10bfffcc 	andi	r2,r2,65535
  813088:	10001e26 	beq	r2,zero,813104 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81308c:	e0bff817 	ldw	r2,-32(fp)
  813090:	10800417 	ldw	r2,16(r2)
  813094:	11000104 	addi	r4,r2,4
  813098:	e0fff817 	ldw	r3,-32(fp)
  81309c:	19000415 	stw	r4,16(r3)
  8130a0:	10800017 	ldw	r2,0(r2)
  8130a4:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8130a8:	e0bff817 	ldw	r2,-32(fp)
  8130ac:	1080058b 	ldhu	r2,22(r2)
  8130b0:	10bfffc4 	addi	r2,r2,-1
  8130b4:	1007883a 	mov	r3,r2
  8130b8:	e0bff817 	ldw	r2,-32(fp)
  8130bc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8130c0:	e0bff817 	ldw	r2,-32(fp)
  8130c4:	10c00417 	ldw	r3,16(r2)
  8130c8:	e0bff817 	ldw	r2,-32(fp)
  8130cc:	10800217 	ldw	r2,8(r2)
  8130d0:	1880041e 	bne	r3,r2,8130e4 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  8130d4:	e0bff817 	ldw	r2,-32(fp)
  8130d8:	10c00117 	ldw	r3,4(r2)
  8130dc:	e0bff817 	ldw	r2,-32(fp)
  8130e0:	10c00415 	stw	r3,16(r2)
  8130e4:	e0bff617 	ldw	r2,-40(fp)
  8130e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8130ec:	e0bff717 	ldw	r2,-36(fp)
  8130f0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8130f4:	e0bfff17 	ldw	r2,-4(fp)
  8130f8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  8130fc:	e0bff517 	ldw	r2,-44(fp)
  813100:	00004306 	br	813210 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  813104:	d0a07417 	ldw	r2,-32304(gp)
  813108:	d0e07417 	ldw	r3,-32304(gp)
  81310c:	18c00c03 	ldbu	r3,48(r3)
  813110:	18c00114 	ori	r3,r3,4
  813114:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  813118:	d0a07417 	ldw	r2,-32304(gp)
  81311c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  813120:	d0a07417 	ldw	r2,-32304(gp)
  813124:	e0fffe0b 	ldhu	r3,-8(fp)
  813128:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  81312c:	e13ffd17 	ldw	r4,-12(fp)
  813130:	080f9e80 	call	80f9e8 <OS_EventTaskWait>
  813134:	e0bff617 	ldw	r2,-40(fp)
  813138:	e0bffb15 	stw	r2,-20(fp)
  81313c:	e0bffb17 	ldw	r2,-20(fp)
  813140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  813144:	081029c0 	call	81029c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813148:	0005303a 	rdctl	r2,status
  81314c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813150:	e0fff917 	ldw	r3,-28(fp)
  813154:	00bfff84 	movi	r2,-2
  813158:	1884703a 	and	r2,r3,r2
  81315c:	1001703a 	wrctl	status,r2
  
  return context;
  813160:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  813164:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  813168:	d0a07417 	ldw	r2,-32304(gp)
  81316c:	10800c43 	ldbu	r2,49(r2)
  813170:	10803fcc 	andi	r2,r2,255
  813174:	10000326 	beq	r2,zero,813184 <OSQPend+0x1ec>
  813178:	108000a0 	cmpeqi	r2,r2,2
  81317c:	1000071e 	bne	r2,zero,81319c <OSQPend+0x204>
  813180:	00000b06 	br	8131b0 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  813184:	d0a07417 	ldw	r2,-32304(gp)
  813188:	10800917 	ldw	r2,36(r2)
  81318c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  813190:	e0bfff17 	ldw	r2,-4(fp)
  813194:	10000005 	stb	zero,0(r2)
             break;
  813198:	00000e06 	br	8131d4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  81319c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  8131a0:	e0bfff17 	ldw	r2,-4(fp)
  8131a4:	00c00384 	movi	r3,14
  8131a8:	10c00005 	stb	r3,0(r2)
             break;
  8131ac:	00000906 	br	8131d4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  8131b0:	d0a07417 	ldw	r2,-32304(gp)
  8131b4:	e17ffd17 	ldw	r5,-12(fp)
  8131b8:	1009883a 	mov	r4,r2
  8131bc:	080fc480 	call	80fc48 <OS_EventTaskRemove>
             pmsg = (void *)0;
  8131c0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8131c4:	e0bfff17 	ldw	r2,-4(fp)
  8131c8:	00c00284 	movi	r3,10
  8131cc:	10c00005 	stb	r3,0(r2)
             break;
  8131d0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8131d4:	d0a07417 	ldw	r2,-32304(gp)
  8131d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8131dc:	d0a07417 	ldw	r2,-32304(gp)
  8131e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8131e4:	d0a07417 	ldw	r2,-32304(gp)
  8131e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8131ec:	d0a07417 	ldw	r2,-32304(gp)
  8131f0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8131f4:	d0a07417 	ldw	r2,-32304(gp)
  8131f8:	10000915 	stw	zero,36(r2)
  8131fc:	e0bff617 	ldw	r2,-40(fp)
  813200:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813204:	e0bffa17 	ldw	r2,-24(fp)
  813208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  81320c:	e0bff517 	ldw	r2,-44(fp)
}
  813210:	e037883a 	mov	sp,fp
  813214:	dfc00117 	ldw	ra,4(sp)
  813218:	df000017 	ldw	fp,0(sp)
  81321c:	dec00204 	addi	sp,sp,8
  813220:	f800283a 	ret

00813224 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  813224:	defff604 	addi	sp,sp,-40
  813228:	dfc00915 	stw	ra,36(sp)
  81322c:	df000815 	stw	fp,32(sp)
  813230:	df000804 	addi	fp,sp,32
  813234:	e13ffd15 	stw	r4,-12(fp)
  813238:	2805883a 	mov	r2,r5
  81323c:	e1bfff15 	stw	r6,-4(fp)
  813240:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  813244:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813248:	e0bfff17 	ldw	r2,-4(fp)
  81324c:	1000021e 	bne	r2,zero,813258 <OSQPendAbort+0x34>
        return (0);
  813250:	0005883a 	mov	r2,zero
  813254:	00004906 	br	81337c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  813258:	e0bffd17 	ldw	r2,-12(fp)
  81325c:	1000051e 	bne	r2,zero,813274 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  813260:	e0bfff17 	ldw	r2,-4(fp)
  813264:	00c00104 	movi	r3,4
  813268:	10c00005 	stb	r3,0(r2)
        return (0);
  81326c:	0005883a 	mov	r2,zero
  813270:	00004206 	br	81337c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  813274:	e0bffd17 	ldw	r2,-12(fp)
  813278:	10800003 	ldbu	r2,0(r2)
  81327c:	10803fcc 	andi	r2,r2,255
  813280:	108000a0 	cmpeqi	r2,r2,2
  813284:	1000051e 	bne	r2,zero,81329c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  813288:	e0bfff17 	ldw	r2,-4(fp)
  81328c:	00c00044 	movi	r3,1
  813290:	10c00005 	stb	r3,0(r2)
        return (0);
  813294:	0005883a 	mov	r2,zero
  813298:	00003806 	br	81337c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81329c:	0005303a 	rdctl	r2,status
  8132a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132a4:	e0fffc17 	ldw	r3,-16(fp)
  8132a8:	00bfff84 	movi	r2,-2
  8132ac:	1884703a 	and	r2,r3,r2
  8132b0:	1001703a 	wrctl	status,r2
  
  return context;
  8132b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8132b8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  8132bc:	e0bffd17 	ldw	r2,-12(fp)
  8132c0:	10800283 	ldbu	r2,10(r2)
  8132c4:	10803fcc 	andi	r2,r2,255
  8132c8:	10002526 	beq	r2,zero,813360 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  8132cc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  8132d0:	e0bffe03 	ldbu	r2,-8(fp)
  8132d4:	10800060 	cmpeqi	r2,r2,1
  8132d8:	10000e26 	beq	r2,zero,813314 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8132dc:	00000806 	br	813300 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8132e0:	01c00084 	movi	r7,2
  8132e4:	01800104 	movi	r6,4
  8132e8:	000b883a 	mov	r5,zero
  8132ec:	e13ffd17 	ldw	r4,-12(fp)
  8132f0:	080f8500 	call	80f850 <OS_EventTaskRdy>
                     nbr_tasks++;
  8132f4:	e0bff803 	ldbu	r2,-32(fp)
  8132f8:	10800044 	addi	r2,r2,1
  8132fc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  813300:	e0bffd17 	ldw	r2,-12(fp)
  813304:	10800283 	ldbu	r2,10(r2)
  813308:	10803fcc 	andi	r2,r2,255
  81330c:	103ff41e 	bne	r2,zero,8132e0 <__alt_mem_epcs_flash_controller_0+0xff80a2e0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  813310:	00000906 	br	813338 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  813314:	01c00084 	movi	r7,2
  813318:	01800104 	movi	r6,4
  81331c:	000b883a 	mov	r5,zero
  813320:	e13ffd17 	ldw	r4,-12(fp)
  813324:	080f8500 	call	80f850 <OS_EventTaskRdy>
                 nbr_tasks++;
  813328:	e0bff803 	ldbu	r2,-32(fp)
  81332c:	10800044 	addi	r2,r2,1
  813330:	e0bff805 	stb	r2,-32(fp)
                 break;
  813334:	0001883a 	nop
  813338:	e0bff917 	ldw	r2,-28(fp)
  81333c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813340:	e0bffa17 	ldw	r2,-24(fp)
  813344:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  813348:	081029c0 	call	81029c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81334c:	e0bfff17 	ldw	r2,-4(fp)
  813350:	00c00384 	movi	r3,14
  813354:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  813358:	e0bff803 	ldbu	r2,-32(fp)
  81335c:	00000706 	br	81337c <OSQPendAbort+0x158>
  813360:	e0bff917 	ldw	r2,-28(fp)
  813364:	e0bffb15 	stw	r2,-20(fp)
  813368:	e0bffb17 	ldw	r2,-20(fp)
  81336c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813370:	e0bfff17 	ldw	r2,-4(fp)
  813374:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  813378:	0005883a 	mov	r2,zero
}
  81337c:	e037883a 	mov	sp,fp
  813380:	dfc00117 	ldw	ra,4(sp)
  813384:	df000017 	ldw	fp,0(sp)
  813388:	dec00204 	addi	sp,sp,8
  81338c:	f800283a 	ret

00813390 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  813390:	defff604 	addi	sp,sp,-40
  813394:	dfc00915 	stw	ra,36(sp)
  813398:	df000815 	stw	fp,32(sp)
  81339c:	df000804 	addi	fp,sp,32
  8133a0:	e13ffe15 	stw	r4,-8(fp)
  8133a4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8133a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8133ac:	e0bffe17 	ldw	r2,-8(fp)
  8133b0:	1000021e 	bne	r2,zero,8133bc <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  8133b4:	00800104 	movi	r2,4
  8133b8:	00004a06 	br	8134e4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8133bc:	e0bffe17 	ldw	r2,-8(fp)
  8133c0:	10800003 	ldbu	r2,0(r2)
  8133c4:	10803fcc 	andi	r2,r2,255
  8133c8:	108000a0 	cmpeqi	r2,r2,2
  8133cc:	1000021e 	bne	r2,zero,8133d8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  8133d0:	00800044 	movi	r2,1
  8133d4:	00004306 	br	8134e4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133d8:	0005303a 	rdctl	r2,status
  8133dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133e0:	e0fffd17 	ldw	r3,-12(fp)
  8133e4:	00bfff84 	movi	r2,-2
  8133e8:	1884703a 	and	r2,r3,r2
  8133ec:	1001703a 	wrctl	status,r2
  
  return context;
  8133f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8133f4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  8133f8:	e0bffe17 	ldw	r2,-8(fp)
  8133fc:	10800283 	ldbu	r2,10(r2)
  813400:	10803fcc 	andi	r2,r2,255
  813404:	10000c26 	beq	r2,zero,813438 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813408:	000f883a 	mov	r7,zero
  81340c:	01800104 	movi	r6,4
  813410:	e17fff17 	ldw	r5,-4(fp)
  813414:	e13ffe17 	ldw	r4,-8(fp)
  813418:	080f8500 	call	80f850 <OS_EventTaskRdy>
  81341c:	e0bff817 	ldw	r2,-32(fp)
  813420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813424:	e0bff917 	ldw	r2,-28(fp)
  813428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  81342c:	081029c0 	call	81029c <OS_Sched>
        return (OS_ERR_NONE);
  813430:	0005883a 	mov	r2,zero
  813434:	00002b06 	br	8134e4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  813438:	e0bffe17 	ldw	r2,-8(fp)
  81343c:	10800117 	ldw	r2,4(r2)
  813440:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  813444:	e0bffb17 	ldw	r2,-20(fp)
  813448:	10c0058b 	ldhu	r3,22(r2)
  81344c:	e0bffb17 	ldw	r2,-20(fp)
  813450:	1080050b 	ldhu	r2,20(r2)
  813454:	18ffffcc 	andi	r3,r3,65535
  813458:	10bfffcc 	andi	r2,r2,65535
  81345c:	18800636 	bltu	r3,r2,813478 <OSQPost+0xe8>
  813460:	e0bff817 	ldw	r2,-32(fp)
  813464:	e0bffa15 	stw	r2,-24(fp)
  813468:	e0bffa17 	ldw	r2,-24(fp)
  81346c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  813470:	00800784 	movi	r2,30
  813474:	00001b06 	br	8134e4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  813478:	e0bffb17 	ldw	r2,-20(fp)
  81347c:	10800317 	ldw	r2,12(r2)
  813480:	11000104 	addi	r4,r2,4
  813484:	e0fffb17 	ldw	r3,-20(fp)
  813488:	19000315 	stw	r4,12(r3)
  81348c:	e0ffff17 	ldw	r3,-4(fp)
  813490:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  813494:	e0bffb17 	ldw	r2,-20(fp)
  813498:	1080058b 	ldhu	r2,22(r2)
  81349c:	10800044 	addi	r2,r2,1
  8134a0:	1007883a 	mov	r3,r2
  8134a4:	e0bffb17 	ldw	r2,-20(fp)
  8134a8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  8134ac:	e0bffb17 	ldw	r2,-20(fp)
  8134b0:	10c00317 	ldw	r3,12(r2)
  8134b4:	e0bffb17 	ldw	r2,-20(fp)
  8134b8:	10800217 	ldw	r2,8(r2)
  8134bc:	1880041e 	bne	r3,r2,8134d0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  8134c0:	e0bffb17 	ldw	r2,-20(fp)
  8134c4:	10c00117 	ldw	r3,4(r2)
  8134c8:	e0bffb17 	ldw	r2,-20(fp)
  8134cc:	10c00315 	stw	r3,12(r2)
  8134d0:	e0bff817 	ldw	r2,-32(fp)
  8134d4:	e0bffc15 	stw	r2,-16(fp)
  8134d8:	e0bffc17 	ldw	r2,-16(fp)
  8134dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8134e0:	0005883a 	mov	r2,zero
}
  8134e4:	e037883a 	mov	sp,fp
  8134e8:	dfc00117 	ldw	ra,4(sp)
  8134ec:	df000017 	ldw	fp,0(sp)
  8134f0:	dec00204 	addi	sp,sp,8
  8134f4:	f800283a 	ret

008134f8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8134f8:	defff604 	addi	sp,sp,-40
  8134fc:	dfc00915 	stw	ra,36(sp)
  813500:	df000815 	stw	fp,32(sp)
  813504:	df000804 	addi	fp,sp,32
  813508:	e13ffe15 	stw	r4,-8(fp)
  81350c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813510:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813514:	e0bffe17 	ldw	r2,-8(fp)
  813518:	1000021e 	bne	r2,zero,813524 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  81351c:	00800104 	movi	r2,4
  813520:	00004c06 	br	813654 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  813524:	e0bffe17 	ldw	r2,-8(fp)
  813528:	10800003 	ldbu	r2,0(r2)
  81352c:	10803fcc 	andi	r2,r2,255
  813530:	108000a0 	cmpeqi	r2,r2,2
  813534:	1000021e 	bne	r2,zero,813540 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  813538:	00800044 	movi	r2,1
  81353c:	00004506 	br	813654 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813540:	0005303a 	rdctl	r2,status
  813544:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813548:	e0fffd17 	ldw	r3,-12(fp)
  81354c:	00bfff84 	movi	r2,-2
  813550:	1884703a 	and	r2,r3,r2
  813554:	1001703a 	wrctl	status,r2
  
  return context;
  813558:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  81355c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  813560:	e0bffe17 	ldw	r2,-8(fp)
  813564:	10800283 	ldbu	r2,10(r2)
  813568:	10803fcc 	andi	r2,r2,255
  81356c:	10000c26 	beq	r2,zero,8135a0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813570:	000f883a 	mov	r7,zero
  813574:	01800104 	movi	r6,4
  813578:	e17fff17 	ldw	r5,-4(fp)
  81357c:	e13ffe17 	ldw	r4,-8(fp)
  813580:	080f8500 	call	80f850 <OS_EventTaskRdy>
  813584:	e0bff817 	ldw	r2,-32(fp)
  813588:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81358c:	e0bff917 	ldw	r2,-28(fp)
  813590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  813594:	081029c0 	call	81029c <OS_Sched>
        return (OS_ERR_NONE);
  813598:	0005883a 	mov	r2,zero
  81359c:	00002d06 	br	813654 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8135a0:	e0bffe17 	ldw	r2,-8(fp)
  8135a4:	10800117 	ldw	r2,4(r2)
  8135a8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8135ac:	e0bffb17 	ldw	r2,-20(fp)
  8135b0:	10c0058b 	ldhu	r3,22(r2)
  8135b4:	e0bffb17 	ldw	r2,-20(fp)
  8135b8:	1080050b 	ldhu	r2,20(r2)
  8135bc:	18ffffcc 	andi	r3,r3,65535
  8135c0:	10bfffcc 	andi	r2,r2,65535
  8135c4:	18800636 	bltu	r3,r2,8135e0 <OSQPostFront+0xe8>
  8135c8:	e0bff817 	ldw	r2,-32(fp)
  8135cc:	e0bffa15 	stw	r2,-24(fp)
  8135d0:	e0bffa17 	ldw	r2,-24(fp)
  8135d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8135d8:	00800784 	movi	r2,30
  8135dc:	00001d06 	br	813654 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  8135e0:	e0bffb17 	ldw	r2,-20(fp)
  8135e4:	10c00417 	ldw	r3,16(r2)
  8135e8:	e0bffb17 	ldw	r2,-20(fp)
  8135ec:	10800117 	ldw	r2,4(r2)
  8135f0:	1880041e 	bne	r3,r2,813604 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  8135f4:	e0bffb17 	ldw	r2,-20(fp)
  8135f8:	10c00217 	ldw	r3,8(r2)
  8135fc:	e0bffb17 	ldw	r2,-20(fp)
  813600:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  813604:	e0bffb17 	ldw	r2,-20(fp)
  813608:	10800417 	ldw	r2,16(r2)
  81360c:	10ffff04 	addi	r3,r2,-4
  813610:	e0bffb17 	ldw	r2,-20(fp)
  813614:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  813618:	e0bffb17 	ldw	r2,-20(fp)
  81361c:	10800417 	ldw	r2,16(r2)
  813620:	e0ffff17 	ldw	r3,-4(fp)
  813624:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  813628:	e0bffb17 	ldw	r2,-20(fp)
  81362c:	1080058b 	ldhu	r2,22(r2)
  813630:	10800044 	addi	r2,r2,1
  813634:	1007883a 	mov	r3,r2
  813638:	e0bffb17 	ldw	r2,-20(fp)
  81363c:	10c0058d 	sth	r3,22(r2)
  813640:	e0bff817 	ldw	r2,-32(fp)
  813644:	e0bffc15 	stw	r2,-16(fp)
  813648:	e0bffc17 	ldw	r2,-16(fp)
  81364c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813650:	0005883a 	mov	r2,zero
}
  813654:	e037883a 	mov	sp,fp
  813658:	dfc00117 	ldw	ra,4(sp)
  81365c:	df000017 	ldw	fp,0(sp)
  813660:	dec00204 	addi	sp,sp,8
  813664:	f800283a 	ret

00813668 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  813668:	defff504 	addi	sp,sp,-44
  81366c:	dfc00a15 	stw	ra,40(sp)
  813670:	df000915 	stw	fp,36(sp)
  813674:	df000904 	addi	fp,sp,36
  813678:	e13ffd15 	stw	r4,-12(fp)
  81367c:	e17ffe15 	stw	r5,-8(fp)
  813680:	3005883a 	mov	r2,r6
  813684:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813688:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81368c:	e0bffd17 	ldw	r2,-12(fp)
  813690:	1000021e 	bne	r2,zero,81369c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  813694:	00800104 	movi	r2,4
  813698:	00007106 	br	813860 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81369c:	e0bffd17 	ldw	r2,-12(fp)
  8136a0:	10800003 	ldbu	r2,0(r2)
  8136a4:	10803fcc 	andi	r2,r2,255
  8136a8:	108000a0 	cmpeqi	r2,r2,2
  8136ac:	1000021e 	bne	r2,zero,8136b8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  8136b0:	00800044 	movi	r2,1
  8136b4:	00006a06 	br	813860 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8136b8:	0005303a 	rdctl	r2,status
  8136bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8136c0:	e0fffc17 	ldw	r3,-16(fp)
  8136c4:	00bfff84 	movi	r2,-2
  8136c8:	1884703a 	and	r2,r3,r2
  8136cc:	1001703a 	wrctl	status,r2
  
  return context;
  8136d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8136d4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  8136d8:	e0bffd17 	ldw	r2,-12(fp)
  8136dc:	10800283 	ldbu	r2,10(r2)
  8136e0:	10803fcc 	andi	r2,r2,255
  8136e4:	10001d26 	beq	r2,zero,81375c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  8136e8:	e0bfff03 	ldbu	r2,-4(fp)
  8136ec:	1080004c 	andi	r2,r2,1
  8136f0:	10000b26 	beq	r2,zero,813720 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8136f4:	00000506 	br	81370c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8136f8:	000f883a 	mov	r7,zero
  8136fc:	01800104 	movi	r6,4
  813700:	e17ffe17 	ldw	r5,-8(fp)
  813704:	e13ffd17 	ldw	r4,-12(fp)
  813708:	080f8500 	call	80f850 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81370c:	e0bffd17 	ldw	r2,-12(fp)
  813710:	10800283 	ldbu	r2,10(r2)
  813714:	10803fcc 	andi	r2,r2,255
  813718:	103ff71e 	bne	r2,zero,8136f8 <__alt_mem_epcs_flash_controller_0+0xff80a6f8>
  81371c:	00000506 	br	813734 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813720:	000f883a 	mov	r7,zero
  813724:	01800104 	movi	r6,4
  813728:	e17ffe17 	ldw	r5,-8(fp)
  81372c:	e13ffd17 	ldw	r4,-12(fp)
  813730:	080f8500 	call	80f850 <OS_EventTaskRdy>
  813734:	e0bff717 	ldw	r2,-36(fp)
  813738:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81373c:	e0bff817 	ldw	r2,-32(fp)
  813740:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  813744:	e0bfff03 	ldbu	r2,-4(fp)
  813748:	1080010c 	andi	r2,r2,4
  81374c:	1000011e 	bne	r2,zero,813754 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  813750:	081029c0 	call	81029c <OS_Sched>
        }
        return (OS_ERR_NONE);
  813754:	0005883a 	mov	r2,zero
  813758:	00004106 	br	813860 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81375c:	e0bffd17 	ldw	r2,-12(fp)
  813760:	10800117 	ldw	r2,4(r2)
  813764:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  813768:	e0bffa17 	ldw	r2,-24(fp)
  81376c:	10c0058b 	ldhu	r3,22(r2)
  813770:	e0bffa17 	ldw	r2,-24(fp)
  813774:	1080050b 	ldhu	r2,20(r2)
  813778:	18ffffcc 	andi	r3,r3,65535
  81377c:	10bfffcc 	andi	r2,r2,65535
  813780:	18800636 	bltu	r3,r2,81379c <OSQPostOpt+0x134>
  813784:	e0bff717 	ldw	r2,-36(fp)
  813788:	e0bff915 	stw	r2,-28(fp)
  81378c:	e0bff917 	ldw	r2,-28(fp)
  813790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  813794:	00800784 	movi	r2,30
  813798:	00003106 	br	813860 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  81379c:	e0bfff03 	ldbu	r2,-4(fp)
  8137a0:	1080008c 	andi	r2,r2,2
  8137a4:	10001326 	beq	r2,zero,8137f4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  8137a8:	e0bffa17 	ldw	r2,-24(fp)
  8137ac:	10c00417 	ldw	r3,16(r2)
  8137b0:	e0bffa17 	ldw	r2,-24(fp)
  8137b4:	10800117 	ldw	r2,4(r2)
  8137b8:	1880041e 	bne	r3,r2,8137cc <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  8137bc:	e0bffa17 	ldw	r2,-24(fp)
  8137c0:	10c00217 	ldw	r3,8(r2)
  8137c4:	e0bffa17 	ldw	r2,-24(fp)
  8137c8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  8137cc:	e0bffa17 	ldw	r2,-24(fp)
  8137d0:	10800417 	ldw	r2,16(r2)
  8137d4:	10ffff04 	addi	r3,r2,-4
  8137d8:	e0bffa17 	ldw	r2,-24(fp)
  8137dc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  8137e0:	e0bffa17 	ldw	r2,-24(fp)
  8137e4:	10800417 	ldw	r2,16(r2)
  8137e8:	e0fffe17 	ldw	r3,-8(fp)
  8137ec:	10c00015 	stw	r3,0(r2)
  8137f0:	00001006 	br	813834 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  8137f4:	e0bffa17 	ldw	r2,-24(fp)
  8137f8:	10800317 	ldw	r2,12(r2)
  8137fc:	11000104 	addi	r4,r2,4
  813800:	e0fffa17 	ldw	r3,-24(fp)
  813804:	19000315 	stw	r4,12(r3)
  813808:	e0fffe17 	ldw	r3,-8(fp)
  81380c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  813810:	e0bffa17 	ldw	r2,-24(fp)
  813814:	10c00317 	ldw	r3,12(r2)
  813818:	e0bffa17 	ldw	r2,-24(fp)
  81381c:	10800217 	ldw	r2,8(r2)
  813820:	1880041e 	bne	r3,r2,813834 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  813824:	e0bffa17 	ldw	r2,-24(fp)
  813828:	10c00117 	ldw	r3,4(r2)
  81382c:	e0bffa17 	ldw	r2,-24(fp)
  813830:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  813834:	e0bffa17 	ldw	r2,-24(fp)
  813838:	1080058b 	ldhu	r2,22(r2)
  81383c:	10800044 	addi	r2,r2,1
  813840:	1007883a 	mov	r3,r2
  813844:	e0bffa17 	ldw	r2,-24(fp)
  813848:	10c0058d 	sth	r3,22(r2)
  81384c:	e0bff717 	ldw	r2,-36(fp)
  813850:	e0bffb15 	stw	r2,-20(fp)
  813854:	e0bffb17 	ldw	r2,-20(fp)
  813858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81385c:	0005883a 	mov	r2,zero
}
  813860:	e037883a 	mov	sp,fp
  813864:	dfc00117 	ldw	ra,4(sp)
  813868:	df000017 	ldw	fp,0(sp)
  81386c:	dec00204 	addi	sp,sp,8
  813870:	f800283a 	ret

00813874 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  813874:	defff604 	addi	sp,sp,-40
  813878:	df000915 	stw	fp,36(sp)
  81387c:	df000904 	addi	fp,sp,36
  813880:	e13ffe15 	stw	r4,-8(fp)
  813884:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  813888:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81388c:	e0bffe17 	ldw	r2,-8(fp)
  813890:	1000021e 	bne	r2,zero,81389c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  813894:	00800104 	movi	r2,4
  813898:	00004906 	br	8139c0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  81389c:	e0bfff17 	ldw	r2,-4(fp)
  8138a0:	1000021e 	bne	r2,zero,8138ac <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  8138a4:	00800244 	movi	r2,9
  8138a8:	00004506 	br	8139c0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8138ac:	e0bffe17 	ldw	r2,-8(fp)
  8138b0:	10800003 	ldbu	r2,0(r2)
  8138b4:	10803fcc 	andi	r2,r2,255
  8138b8:	108000a0 	cmpeqi	r2,r2,2
  8138bc:	1000021e 	bne	r2,zero,8138c8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  8138c0:	00800044 	movi	r2,1
  8138c4:	00003e06 	br	8139c0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8138c8:	0005303a 	rdctl	r2,status
  8138cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8138d0:	e0fffd17 	ldw	r3,-12(fp)
  8138d4:	00bfff84 	movi	r2,-2
  8138d8:	1884703a 	and	r2,r3,r2
  8138dc:	1001703a 	wrctl	status,r2
  
  return context;
  8138e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8138e4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  8138e8:	e0bffe17 	ldw	r2,-8(fp)
  8138ec:	10c00283 	ldbu	r3,10(r2)
  8138f0:	e0bfff17 	ldw	r2,-4(fp)
  8138f4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  8138f8:	e0bffe17 	ldw	r2,-8(fp)
  8138fc:	108002c4 	addi	r2,r2,11
  813900:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  813904:	e0bfff17 	ldw	r2,-4(fp)
  813908:	10800204 	addi	r2,r2,8
  81390c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813910:	e03ff705 	stb	zero,-36(fp)
  813914:	00000b06 	br	813944 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  813918:	e0bff917 	ldw	r2,-28(fp)
  81391c:	10c00044 	addi	r3,r2,1
  813920:	e0fff915 	stw	r3,-28(fp)
  813924:	e0fff817 	ldw	r3,-32(fp)
  813928:	19000044 	addi	r4,r3,1
  81392c:	e13ff815 	stw	r4,-32(fp)
  813930:	18c00003 	ldbu	r3,0(r3)
  813934:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813938:	e0bff703 	ldbu	r2,-36(fp)
  81393c:	10800044 	addi	r2,r2,1
  813940:	e0bff705 	stb	r2,-36(fp)
  813944:	e0bff703 	ldbu	r2,-36(fp)
  813948:	108000f0 	cmpltui	r2,r2,3
  81394c:	103ff21e 	bne	r2,zero,813918 <__alt_mem_epcs_flash_controller_0+0xff80a918>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  813950:	e0bffe17 	ldw	r2,-8(fp)
  813954:	10800117 	ldw	r2,4(r2)
  813958:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  81395c:	e0bffc17 	ldw	r2,-16(fp)
  813960:	1080058b 	ldhu	r2,22(r2)
  813964:	10bfffcc 	andi	r2,r2,65535
  813968:	10000626 	beq	r2,zero,813984 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  81396c:	e0bffc17 	ldw	r2,-16(fp)
  813970:	10800417 	ldw	r2,16(r2)
  813974:	10c00017 	ldw	r3,0(r2)
  813978:	e0bfff17 	ldw	r2,-4(fp)
  81397c:	10c00015 	stw	r3,0(r2)
  813980:	00000206 	br	81398c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  813984:	e0bfff17 	ldw	r2,-4(fp)
  813988:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  81398c:	e0bffc17 	ldw	r2,-16(fp)
  813990:	10c0058b 	ldhu	r3,22(r2)
  813994:	e0bfff17 	ldw	r2,-4(fp)
  813998:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  81399c:	e0bffc17 	ldw	r2,-16(fp)
  8139a0:	10c0050b 	ldhu	r3,20(r2)
  8139a4:	e0bfff17 	ldw	r2,-4(fp)
  8139a8:	10c0018d 	sth	r3,6(r2)
  8139ac:	e0bffa17 	ldw	r2,-24(fp)
  8139b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8139b4:	e0bffb17 	ldw	r2,-20(fp)
  8139b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8139bc:	0005883a 	mov	r2,zero
}
  8139c0:	e037883a 	mov	sp,fp
  8139c4:	df000017 	ldw	fp,0(sp)
  8139c8:	dec00104 	addi	sp,sp,4
  8139cc:	f800283a 	ret

008139d0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  8139d0:	defffb04 	addi	sp,sp,-20
  8139d4:	dfc00415 	stw	ra,16(sp)
  8139d8:	df000315 	stw	fp,12(sp)
  8139dc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  8139e0:	01407804 	movi	r5,480
  8139e4:	010020b4 	movhi	r4,130
  8139e8:	21126c04 	addi	r4,r4,18864
  8139ec:	08101e00 	call	8101e0 <OS_MemClr>
    pq1 = &OSQTbl[0];
  8139f0:	008020b4 	movhi	r2,130
  8139f4:	10926c04 	addi	r2,r2,18864
  8139f8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  8139fc:	008020b4 	movhi	r2,130
  813a00:	10927204 	addi	r2,r2,18888
  813a04:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  813a08:	e03ffd0d 	sth	zero,-12(fp)
  813a0c:	00000c06 	br	813a40 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  813a10:	e0bffe17 	ldw	r2,-8(fp)
  813a14:	e0ffff17 	ldw	r3,-4(fp)
  813a18:	10c00015 	stw	r3,0(r2)
        pq1++;
  813a1c:	e0bffe17 	ldw	r2,-8(fp)
  813a20:	10800604 	addi	r2,r2,24
  813a24:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  813a28:	e0bfff17 	ldw	r2,-4(fp)
  813a2c:	10800604 	addi	r2,r2,24
  813a30:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  813a34:	e0bffd0b 	ldhu	r2,-12(fp)
  813a38:	10800044 	addi	r2,r2,1
  813a3c:	e0bffd0d 	sth	r2,-12(fp)
  813a40:	e0bffd0b 	ldhu	r2,-12(fp)
  813a44:	108004f0 	cmpltui	r2,r2,19
  813a48:	103ff11e 	bne	r2,zero,813a10 <__alt_mem_epcs_flash_controller_0+0xff80aa10>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  813a4c:	e0bffe17 	ldw	r2,-8(fp)
  813a50:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  813a54:	008020b4 	movhi	r2,130
  813a58:	10926c04 	addi	r2,r2,18864
  813a5c:	d0a07015 	stw	r2,-32320(gp)
#endif
}
  813a60:	0001883a 	nop
  813a64:	e037883a 	mov	sp,fp
  813a68:	dfc00117 	ldw	ra,4(sp)
  813a6c:	df000017 	ldw	fp,0(sp)
  813a70:	dec00204 	addi	sp,sp,8
  813a74:	f800283a 	ret

00813a78 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  813a78:	defffa04 	addi	sp,sp,-24
  813a7c:	df000515 	stw	fp,20(sp)
  813a80:	df000504 	addi	fp,sp,20
  813a84:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813a88:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813a8c:	e0bfff17 	ldw	r2,-4(fp)
  813a90:	1000021e 	bne	r2,zero,813a9c <OSSemAccept+0x24>
        return (0);
  813a94:	0005883a 	mov	r2,zero
  813a98:	00001f06 	br	813b18 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813a9c:	e0bfff17 	ldw	r2,-4(fp)
  813aa0:	10800003 	ldbu	r2,0(r2)
  813aa4:	10803fcc 	andi	r2,r2,255
  813aa8:	108000e0 	cmpeqi	r2,r2,3
  813aac:	1000021e 	bne	r2,zero,813ab8 <OSSemAccept+0x40>
        return (0);
  813ab0:	0005883a 	mov	r2,zero
  813ab4:	00001806 	br	813b18 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ab8:	0005303a 	rdctl	r2,status
  813abc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ac0:	e0fffe17 	ldw	r3,-8(fp)
  813ac4:	00bfff84 	movi	r2,-2
  813ac8:	1884703a 	and	r2,r3,r2
  813acc:	1001703a 	wrctl	status,r2
  
  return context;
  813ad0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  813ad4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  813ad8:	e0bfff17 	ldw	r2,-4(fp)
  813adc:	1080020b 	ldhu	r2,8(r2)
  813ae0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  813ae4:	e0bffd0b 	ldhu	r2,-12(fp)
  813ae8:	10000626 	beq	r2,zero,813b04 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  813aec:	e0bfff17 	ldw	r2,-4(fp)
  813af0:	1080020b 	ldhu	r2,8(r2)
  813af4:	10bfffc4 	addi	r2,r2,-1
  813af8:	1007883a 	mov	r3,r2
  813afc:	e0bfff17 	ldw	r2,-4(fp)
  813b00:	10c0020d 	sth	r3,8(r2)
  813b04:	e0bffb17 	ldw	r2,-20(fp)
  813b08:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b0c:	e0bffc17 	ldw	r2,-16(fp)
  813b10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  813b14:	e0bffd0b 	ldhu	r2,-12(fp)
}
  813b18:	e037883a 	mov	sp,fp
  813b1c:	df000017 	ldw	fp,0(sp)
  813b20:	dec00104 	addi	sp,sp,4
  813b24:	f800283a 	ret

00813b28 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  813b28:	defff904 	addi	sp,sp,-28
  813b2c:	dfc00615 	stw	ra,24(sp)
  813b30:	df000515 	stw	fp,20(sp)
  813b34:	df000504 	addi	fp,sp,20
  813b38:	2005883a 	mov	r2,r4
  813b3c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  813b40:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813b44:	d0a07303 	ldbu	r2,-32308(gp)
  813b48:	10803fcc 	andi	r2,r2,255
  813b4c:	10000226 	beq	r2,zero,813b58 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  813b50:	0005883a 	mov	r2,zero
  813b54:	00002506 	br	813bec <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b58:	0005303a 	rdctl	r2,status
  813b5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b60:	e0fffe17 	ldw	r3,-8(fp)
  813b64:	00bfff84 	movi	r2,-2
  813b68:	1884703a 	and	r2,r3,r2
  813b6c:	1001703a 	wrctl	status,r2
  
  return context;
  813b70:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  813b74:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  813b78:	d0a07217 	ldw	r2,-32312(gp)
  813b7c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  813b80:	d0a07217 	ldw	r2,-32312(gp)
  813b84:	10000326 	beq	r2,zero,813b94 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  813b88:	d0a07217 	ldw	r2,-32312(gp)
  813b8c:	10800117 	ldw	r2,4(r2)
  813b90:	d0a07215 	stw	r2,-32312(gp)
  813b94:	e0bffb17 	ldw	r2,-20(fp)
  813b98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b9c:	e0bffc17 	ldw	r2,-16(fp)
  813ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  813ba4:	e0bffd17 	ldw	r2,-12(fp)
  813ba8:	10000f26 	beq	r2,zero,813be8 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  813bac:	e0bffd17 	ldw	r2,-12(fp)
  813bb0:	00c000c4 	movi	r3,3
  813bb4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  813bb8:	e0bffd17 	ldw	r2,-12(fp)
  813bbc:	e0ffff0b 	ldhu	r3,-4(fp)
  813bc0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  813bc4:	e0bffd17 	ldw	r2,-12(fp)
  813bc8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  813bcc:	e0bffd17 	ldw	r2,-12(fp)
  813bd0:	00c00fc4 	movi	r3,63
  813bd4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  813bd8:	e0bffd17 	ldw	r2,-12(fp)
  813bdc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  813be0:	e13ffd17 	ldw	r4,-12(fp)
  813be4:	080fe000 	call	80fe00 <OS_EventWaitListInit>
    }
    return (pevent);
  813be8:	e0bffd17 	ldw	r2,-12(fp)
}
  813bec:	e037883a 	mov	sp,fp
  813bf0:	dfc00117 	ldw	ra,4(sp)
  813bf4:	df000017 	ldw	fp,0(sp)
  813bf8:	dec00204 	addi	sp,sp,8
  813bfc:	f800283a 	ret

00813c00 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  813c00:	defff304 	addi	sp,sp,-52
  813c04:	dfc00c15 	stw	ra,48(sp)
  813c08:	df000b15 	stw	fp,44(sp)
  813c0c:	df000b04 	addi	fp,sp,44
  813c10:	e13ffd15 	stw	r4,-12(fp)
  813c14:	2805883a 	mov	r2,r5
  813c18:	e1bfff15 	stw	r6,-4(fp)
  813c1c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  813c20:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813c24:	e0bfff17 	ldw	r2,-4(fp)
  813c28:	1000021e 	bne	r2,zero,813c34 <OSSemDel+0x34>
        return (pevent);
  813c2c:	e0bffd17 	ldw	r2,-12(fp)
  813c30:	00007e06 	br	813e2c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  813c34:	e0bffd17 	ldw	r2,-12(fp)
  813c38:	1000051e 	bne	r2,zero,813c50 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  813c3c:	e0bfff17 	ldw	r2,-4(fp)
  813c40:	00c00104 	movi	r3,4
  813c44:	10c00005 	stb	r3,0(r2)
        return (pevent);
  813c48:	e0bffd17 	ldw	r2,-12(fp)
  813c4c:	00007706 	br	813e2c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  813c50:	e0bffd17 	ldw	r2,-12(fp)
  813c54:	10800003 	ldbu	r2,0(r2)
  813c58:	10803fcc 	andi	r2,r2,255
  813c5c:	108000e0 	cmpeqi	r2,r2,3
  813c60:	1000051e 	bne	r2,zero,813c78 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  813c64:	e0bfff17 	ldw	r2,-4(fp)
  813c68:	00c00044 	movi	r3,1
  813c6c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  813c70:	e0bffd17 	ldw	r2,-12(fp)
  813c74:	00006d06 	br	813e2c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813c78:	d0a07303 	ldbu	r2,-32308(gp)
  813c7c:	10803fcc 	andi	r2,r2,255
  813c80:	10000526 	beq	r2,zero,813c98 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  813c84:	e0bfff17 	ldw	r2,-4(fp)
  813c88:	00c003c4 	movi	r3,15
  813c8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  813c90:	e0bffd17 	ldw	r2,-12(fp)
  813c94:	00006506 	br	813e2c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c98:	0005303a 	rdctl	r2,status
  813c9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ca0:	e0fffc17 	ldw	r3,-16(fp)
  813ca4:	00bfff84 	movi	r2,-2
  813ca8:	1884703a 	and	r2,r3,r2
  813cac:	1001703a 	wrctl	status,r2
  
  return context;
  813cb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813cb4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  813cb8:	e0bffd17 	ldw	r2,-12(fp)
  813cbc:	10800283 	ldbu	r2,10(r2)
  813cc0:	10803fcc 	andi	r2,r2,255
  813cc4:	10000326 	beq	r2,zero,813cd4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  813cc8:	00800044 	movi	r2,1
  813ccc:	e0bff505 	stb	r2,-44(fp)
  813cd0:	00000106 	br	813cd8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  813cd4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  813cd8:	e0bffe03 	ldbu	r2,-8(fp)
  813cdc:	10000326 	beq	r2,zero,813cec <OSSemDel+0xec>
  813ce0:	10800060 	cmpeqi	r2,r2,1
  813ce4:	1000281e 	bne	r2,zero,813d88 <OSSemDel+0x188>
  813ce8:	00004506 	br	813e00 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  813cec:	e0bff503 	ldbu	r2,-44(fp)
  813cf0:	1000161e 	bne	r2,zero,813d4c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  813cf4:	e0bffd17 	ldw	r2,-12(fp)
  813cf8:	00c00fc4 	movi	r3,63
  813cfc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  813d00:	e0bffd17 	ldw	r2,-12(fp)
  813d04:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  813d08:	e0bffd17 	ldw	r2,-12(fp)
  813d0c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  813d10:	d0e07217 	ldw	r3,-32312(gp)
  813d14:	e0bffd17 	ldw	r2,-12(fp)
  813d18:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  813d1c:	e0bffd17 	ldw	r2,-12(fp)
  813d20:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  813d24:	e0bffd17 	ldw	r2,-12(fp)
  813d28:	d0a07215 	stw	r2,-32312(gp)
  813d2c:	e0bff717 	ldw	r2,-36(fp)
  813d30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d34:	e0bff817 	ldw	r2,-32(fp)
  813d38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  813d3c:	e0bfff17 	ldw	r2,-4(fp)
  813d40:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  813d44:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  813d48:	00003706 	br	813e28 <OSSemDel+0x228>
  813d4c:	e0bff717 	ldw	r2,-36(fp)
  813d50:	e0bff915 	stw	r2,-28(fp)
  813d54:	e0bff917 	ldw	r2,-28(fp)
  813d58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  813d5c:	e0bfff17 	ldw	r2,-4(fp)
  813d60:	00c01244 	movi	r3,73
  813d64:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  813d68:	e0bffd17 	ldw	r2,-12(fp)
  813d6c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  813d70:	00002d06 	br	813e28 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  813d74:	000f883a 	mov	r7,zero
  813d78:	01800044 	movi	r6,1
  813d7c:	000b883a 	mov	r5,zero
  813d80:	e13ffd17 	ldw	r4,-12(fp)
  813d84:	080f8500 	call	80f850 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  813d88:	e0bffd17 	ldw	r2,-12(fp)
  813d8c:	10800283 	ldbu	r2,10(r2)
  813d90:	10803fcc 	andi	r2,r2,255
  813d94:	103ff71e 	bne	r2,zero,813d74 <__alt_mem_epcs_flash_controller_0+0xff80ad74>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  813d98:	e0bffd17 	ldw	r2,-12(fp)
  813d9c:	00c00fc4 	movi	r3,63
  813da0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  813da4:	e0bffd17 	ldw	r2,-12(fp)
  813da8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  813dac:	e0bffd17 	ldw	r2,-12(fp)
  813db0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  813db4:	d0e07217 	ldw	r3,-32312(gp)
  813db8:	e0bffd17 	ldw	r2,-12(fp)
  813dbc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  813dc0:	e0bffd17 	ldw	r2,-12(fp)
  813dc4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  813dc8:	e0bffd17 	ldw	r2,-12(fp)
  813dcc:	d0a07215 	stw	r2,-32312(gp)
  813dd0:	e0bff717 	ldw	r2,-36(fp)
  813dd4:	e0bffa15 	stw	r2,-24(fp)
  813dd8:	e0bffa17 	ldw	r2,-24(fp)
  813ddc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  813de0:	e0bff503 	ldbu	r2,-44(fp)
  813de4:	10800058 	cmpnei	r2,r2,1
  813de8:	1000011e 	bne	r2,zero,813df0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  813dec:	081029c0 	call	81029c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  813df0:	e0bfff17 	ldw	r2,-4(fp)
  813df4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  813df8:	e03ff615 	stw	zero,-40(fp)
             break;
  813dfc:	00000a06 	br	813e28 <OSSemDel+0x228>
  813e00:	e0bff717 	ldw	r2,-36(fp)
  813e04:	e0bffb15 	stw	r2,-20(fp)
  813e08:	e0bffb17 	ldw	r2,-20(fp)
  813e0c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  813e10:	e0bfff17 	ldw	r2,-4(fp)
  813e14:	00c001c4 	movi	r3,7
  813e18:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  813e1c:	e0bffd17 	ldw	r2,-12(fp)
  813e20:	e0bff615 	stw	r2,-40(fp)
             break;
  813e24:	0001883a 	nop
    }
    return (pevent_return);
  813e28:	e0bff617 	ldw	r2,-40(fp)
}
  813e2c:	e037883a 	mov	sp,fp
  813e30:	dfc00117 	ldw	ra,4(sp)
  813e34:	df000017 	ldw	fp,0(sp)
  813e38:	dec00204 	addi	sp,sp,8
  813e3c:	f800283a 	ret

00813e40 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  813e40:	defff504 	addi	sp,sp,-44
  813e44:	dfc00a15 	stw	ra,40(sp)
  813e48:	df000915 	stw	fp,36(sp)
  813e4c:	df000904 	addi	fp,sp,36
  813e50:	e13ffd15 	stw	r4,-12(fp)
  813e54:	2805883a 	mov	r2,r5
  813e58:	e1bfff15 	stw	r6,-4(fp)
  813e5c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813e60:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  813e64:	e0bfff17 	ldw	r2,-4(fp)
  813e68:	10007226 	beq	r2,zero,814034 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813e6c:	e0bffd17 	ldw	r2,-12(fp)
  813e70:	1000041e 	bne	r2,zero,813e84 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  813e74:	e0bfff17 	ldw	r2,-4(fp)
  813e78:	00c00104 	movi	r3,4
  813e7c:	10c00005 	stb	r3,0(r2)
        return;
  813e80:	00006d06 	br	814038 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813e84:	e0bffd17 	ldw	r2,-12(fp)
  813e88:	10800003 	ldbu	r2,0(r2)
  813e8c:	10803fcc 	andi	r2,r2,255
  813e90:	108000e0 	cmpeqi	r2,r2,3
  813e94:	1000041e 	bne	r2,zero,813ea8 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  813e98:	e0bfff17 	ldw	r2,-4(fp)
  813e9c:	00c00044 	movi	r3,1
  813ea0:	10c00005 	stb	r3,0(r2)
        return;
  813ea4:	00006406 	br	814038 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  813ea8:	d0a07303 	ldbu	r2,-32308(gp)
  813eac:	10803fcc 	andi	r2,r2,255
  813eb0:	10000426 	beq	r2,zero,813ec4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  813eb4:	e0bfff17 	ldw	r2,-4(fp)
  813eb8:	00c00084 	movi	r3,2
  813ebc:	10c00005 	stb	r3,0(r2)
        return;
  813ec0:	00005d06 	br	814038 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  813ec4:	d0a06503 	ldbu	r2,-32364(gp)
  813ec8:	10803fcc 	andi	r2,r2,255
  813ecc:	10000426 	beq	r2,zero,813ee0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  813ed0:	e0bfff17 	ldw	r2,-4(fp)
  813ed4:	00c00344 	movi	r3,13
  813ed8:	10c00005 	stb	r3,0(r2)
        return;
  813edc:	00005606 	br	814038 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ee0:	0005303a 	rdctl	r2,status
  813ee4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ee8:	e0fffc17 	ldw	r3,-16(fp)
  813eec:	00bfff84 	movi	r2,-2
  813ef0:	1884703a 	and	r2,r3,r2
  813ef4:	1001703a 	wrctl	status,r2
  
  return context;
  813ef8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813efc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  813f00:	e0bffd17 	ldw	r2,-12(fp)
  813f04:	1080020b 	ldhu	r2,8(r2)
  813f08:	10bfffcc 	andi	r2,r2,65535
  813f0c:	10000d26 	beq	r2,zero,813f44 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  813f10:	e0bffd17 	ldw	r2,-12(fp)
  813f14:	1080020b 	ldhu	r2,8(r2)
  813f18:	10bfffc4 	addi	r2,r2,-1
  813f1c:	1007883a 	mov	r3,r2
  813f20:	e0bffd17 	ldw	r2,-12(fp)
  813f24:	10c0020d 	sth	r3,8(r2)
  813f28:	e0bff717 	ldw	r2,-36(fp)
  813f2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f30:	e0bff817 	ldw	r2,-32(fp)
  813f34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  813f38:	e0bfff17 	ldw	r2,-4(fp)
  813f3c:	10000005 	stb	zero,0(r2)
        return;
  813f40:	00003d06 	br	814038 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  813f44:	d0a07417 	ldw	r2,-32304(gp)
  813f48:	d0e07417 	ldw	r3,-32304(gp)
  813f4c:	18c00c03 	ldbu	r3,48(r3)
  813f50:	18c00054 	ori	r3,r3,1
  813f54:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  813f58:	d0a07417 	ldw	r2,-32304(gp)
  813f5c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  813f60:	d0a07417 	ldw	r2,-32304(gp)
  813f64:	e0fffe0b 	ldhu	r3,-8(fp)
  813f68:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  813f6c:	e13ffd17 	ldw	r4,-12(fp)
  813f70:	080f9e80 	call	80f9e8 <OS_EventTaskWait>
  813f74:	e0bff717 	ldw	r2,-36(fp)
  813f78:	e0bffb15 	stw	r2,-20(fp)
  813f7c:	e0bffb17 	ldw	r2,-20(fp)
  813f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  813f84:	081029c0 	call	81029c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f88:	0005303a 	rdctl	r2,status
  813f8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f90:	e0fff917 	ldw	r3,-28(fp)
  813f94:	00bfff84 	movi	r2,-2
  813f98:	1884703a 	and	r2,r3,r2
  813f9c:	1001703a 	wrctl	status,r2
  
  return context;
  813fa0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  813fa4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  813fa8:	d0a07417 	ldw	r2,-32304(gp)
  813fac:	10800c43 	ldbu	r2,49(r2)
  813fb0:	10803fcc 	andi	r2,r2,255
  813fb4:	10000326 	beq	r2,zero,813fc4 <OSSemPend+0x184>
  813fb8:	108000a0 	cmpeqi	r2,r2,2
  813fbc:	1000041e 	bne	r2,zero,813fd0 <OSSemPend+0x190>
  813fc0:	00000706 	br	813fe0 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  813fc4:	e0bfff17 	ldw	r2,-4(fp)
  813fc8:	10000005 	stb	zero,0(r2)
             break;
  813fcc:	00000c06 	br	814000 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  813fd0:	e0bfff17 	ldw	r2,-4(fp)
  813fd4:	00c00384 	movi	r3,14
  813fd8:	10c00005 	stb	r3,0(r2)
             break;
  813fdc:	00000806 	br	814000 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  813fe0:	d0a07417 	ldw	r2,-32304(gp)
  813fe4:	e17ffd17 	ldw	r5,-12(fp)
  813fe8:	1009883a 	mov	r4,r2
  813fec:	080fc480 	call	80fc48 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  813ff0:	e0bfff17 	ldw	r2,-4(fp)
  813ff4:	00c00284 	movi	r3,10
  813ff8:	10c00005 	stb	r3,0(r2)
             break;
  813ffc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  814000:	d0a07417 	ldw	r2,-32304(gp)
  814004:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  814008:	d0a07417 	ldw	r2,-32304(gp)
  81400c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  814010:	d0a07417 	ldw	r2,-32304(gp)
  814014:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  814018:	d0a07417 	ldw	r2,-32304(gp)
  81401c:	10000815 	stw	zero,32(r2)
  814020:	e0bff717 	ldw	r2,-36(fp)
  814024:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814028:	e0bffa17 	ldw	r2,-24(fp)
  81402c:	1001703a 	wrctl	status,r2
  814030:	00000106 	br	814038 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  814034:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  814038:	e037883a 	mov	sp,fp
  81403c:	dfc00117 	ldw	ra,4(sp)
  814040:	df000017 	ldw	fp,0(sp)
  814044:	dec00204 	addi	sp,sp,8
  814048:	f800283a 	ret

0081404c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81404c:	defff604 	addi	sp,sp,-40
  814050:	dfc00915 	stw	ra,36(sp)
  814054:	df000815 	stw	fp,32(sp)
  814058:	df000804 	addi	fp,sp,32
  81405c:	e13ffd15 	stw	r4,-12(fp)
  814060:	2805883a 	mov	r2,r5
  814064:	e1bfff15 	stw	r6,-4(fp)
  814068:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81406c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814070:	e0bfff17 	ldw	r2,-4(fp)
  814074:	1000021e 	bne	r2,zero,814080 <OSSemPendAbort+0x34>
        return (0);
  814078:	0005883a 	mov	r2,zero
  81407c:	00004906 	br	8141a4 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814080:	e0bffd17 	ldw	r2,-12(fp)
  814084:	1000051e 	bne	r2,zero,81409c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  814088:	e0bfff17 	ldw	r2,-4(fp)
  81408c:	00c00104 	movi	r3,4
  814090:	10c00005 	stb	r3,0(r2)
        return (0);
  814094:	0005883a 	mov	r2,zero
  814098:	00004206 	br	8141a4 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81409c:	e0bffd17 	ldw	r2,-12(fp)
  8140a0:	10800003 	ldbu	r2,0(r2)
  8140a4:	10803fcc 	andi	r2,r2,255
  8140a8:	108000e0 	cmpeqi	r2,r2,3
  8140ac:	1000051e 	bne	r2,zero,8140c4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8140b0:	e0bfff17 	ldw	r2,-4(fp)
  8140b4:	00c00044 	movi	r3,1
  8140b8:	10c00005 	stb	r3,0(r2)
        return (0);
  8140bc:	0005883a 	mov	r2,zero
  8140c0:	00003806 	br	8141a4 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8140c4:	0005303a 	rdctl	r2,status
  8140c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8140cc:	e0fffc17 	ldw	r3,-16(fp)
  8140d0:	00bfff84 	movi	r2,-2
  8140d4:	1884703a 	and	r2,r3,r2
  8140d8:	1001703a 	wrctl	status,r2
  
  return context;
  8140dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8140e0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  8140e4:	e0bffd17 	ldw	r2,-12(fp)
  8140e8:	10800283 	ldbu	r2,10(r2)
  8140ec:	10803fcc 	andi	r2,r2,255
  8140f0:	10002526 	beq	r2,zero,814188 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  8140f4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  8140f8:	e0bffe03 	ldbu	r2,-8(fp)
  8140fc:	10800060 	cmpeqi	r2,r2,1
  814100:	10000e26 	beq	r2,zero,81413c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  814104:	00000806 	br	814128 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  814108:	01c00084 	movi	r7,2
  81410c:	01800044 	movi	r6,1
  814110:	000b883a 	mov	r5,zero
  814114:	e13ffd17 	ldw	r4,-12(fp)
  814118:	080f8500 	call	80f850 <OS_EventTaskRdy>
                     nbr_tasks++;
  81411c:	e0bff803 	ldbu	r2,-32(fp)
  814120:	10800044 	addi	r2,r2,1
  814124:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  814128:	e0bffd17 	ldw	r2,-12(fp)
  81412c:	10800283 	ldbu	r2,10(r2)
  814130:	10803fcc 	andi	r2,r2,255
  814134:	103ff41e 	bne	r2,zero,814108 <__alt_mem_epcs_flash_controller_0+0xff80b108>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  814138:	00000906 	br	814160 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81413c:	01c00084 	movi	r7,2
  814140:	01800044 	movi	r6,1
  814144:	000b883a 	mov	r5,zero
  814148:	e13ffd17 	ldw	r4,-12(fp)
  81414c:	080f8500 	call	80f850 <OS_EventTaskRdy>
                 nbr_tasks++;
  814150:	e0bff803 	ldbu	r2,-32(fp)
  814154:	10800044 	addi	r2,r2,1
  814158:	e0bff805 	stb	r2,-32(fp)
                 break;
  81415c:	0001883a 	nop
  814160:	e0bff917 	ldw	r2,-28(fp)
  814164:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814168:	e0bffa17 	ldw	r2,-24(fp)
  81416c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  814170:	081029c0 	call	81029c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  814174:	e0bfff17 	ldw	r2,-4(fp)
  814178:	00c00384 	movi	r3,14
  81417c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  814180:	e0bff803 	ldbu	r2,-32(fp)
  814184:	00000706 	br	8141a4 <OSSemPendAbort+0x158>
  814188:	e0bff917 	ldw	r2,-28(fp)
  81418c:	e0bffb15 	stw	r2,-20(fp)
  814190:	e0bffb17 	ldw	r2,-20(fp)
  814194:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814198:	e0bfff17 	ldw	r2,-4(fp)
  81419c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  8141a0:	0005883a 	mov	r2,zero
}
  8141a4:	e037883a 	mov	sp,fp
  8141a8:	dfc00117 	ldw	ra,4(sp)
  8141ac:	df000017 	ldw	fp,0(sp)
  8141b0:	dec00204 	addi	sp,sp,8
  8141b4:	f800283a 	ret

008141b8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  8141b8:	defff804 	addi	sp,sp,-32
  8141bc:	dfc00715 	stw	ra,28(sp)
  8141c0:	df000615 	stw	fp,24(sp)
  8141c4:	df000604 	addi	fp,sp,24
  8141c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8141cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8141d0:	e0bfff17 	ldw	r2,-4(fp)
  8141d4:	1000021e 	bne	r2,zero,8141e0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  8141d8:	00800104 	movi	r2,4
  8141dc:	00003506 	br	8142b4 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8141e0:	e0bfff17 	ldw	r2,-4(fp)
  8141e4:	10800003 	ldbu	r2,0(r2)
  8141e8:	10803fcc 	andi	r2,r2,255
  8141ec:	108000e0 	cmpeqi	r2,r2,3
  8141f0:	1000021e 	bne	r2,zero,8141fc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  8141f4:	00800044 	movi	r2,1
  8141f8:	00002e06 	br	8142b4 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8141fc:	0005303a 	rdctl	r2,status
  814200:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814204:	e0fffe17 	ldw	r3,-8(fp)
  814208:	00bfff84 	movi	r2,-2
  81420c:	1884703a 	and	r2,r3,r2
  814210:	1001703a 	wrctl	status,r2
  
  return context;
  814214:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  814218:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  81421c:	e0bfff17 	ldw	r2,-4(fp)
  814220:	10800283 	ldbu	r2,10(r2)
  814224:	10803fcc 	andi	r2,r2,255
  814228:	10000c26 	beq	r2,zero,81425c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81422c:	000f883a 	mov	r7,zero
  814230:	01800044 	movi	r6,1
  814234:	000b883a 	mov	r5,zero
  814238:	e13fff17 	ldw	r4,-4(fp)
  81423c:	080f8500 	call	80f850 <OS_EventTaskRdy>
  814240:	e0bffa17 	ldw	r2,-24(fp)
  814244:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814248:	e0bffb17 	ldw	r2,-20(fp)
  81424c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  814250:	081029c0 	call	81029c <OS_Sched>
        return (OS_ERR_NONE);
  814254:	0005883a 	mov	r2,zero
  814258:	00001606 	br	8142b4 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  81425c:	e0bfff17 	ldw	r2,-4(fp)
  814260:	1080020b 	ldhu	r2,8(r2)
  814264:	10ffffcc 	andi	r3,r2,65535
  814268:	00bfffd4 	movui	r2,65535
  81426c:	18800c26 	beq	r3,r2,8142a0 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  814270:	e0bfff17 	ldw	r2,-4(fp)
  814274:	1080020b 	ldhu	r2,8(r2)
  814278:	10800044 	addi	r2,r2,1
  81427c:	1007883a 	mov	r3,r2
  814280:	e0bfff17 	ldw	r2,-4(fp)
  814284:	10c0020d 	sth	r3,8(r2)
  814288:	e0bffa17 	ldw	r2,-24(fp)
  81428c:	e0bffc15 	stw	r2,-16(fp)
  814290:	e0bffc17 	ldw	r2,-16(fp)
  814294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  814298:	0005883a 	mov	r2,zero
  81429c:	00000506 	br	8142b4 <OSSemPost+0xfc>
  8142a0:	e0bffa17 	ldw	r2,-24(fp)
  8142a4:	e0bffd15 	stw	r2,-12(fp)
  8142a8:	e0bffd17 	ldw	r2,-12(fp)
  8142ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  8142b0:	00800c84 	movi	r2,50
}
  8142b4:	e037883a 	mov	sp,fp
  8142b8:	dfc00117 	ldw	ra,4(sp)
  8142bc:	df000017 	ldw	fp,0(sp)
  8142c0:	dec00204 	addi	sp,sp,8
  8142c4:	f800283a 	ret

008142c8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  8142c8:	defff704 	addi	sp,sp,-36
  8142cc:	df000815 	stw	fp,32(sp)
  8142d0:	df000804 	addi	fp,sp,32
  8142d4:	e13ffe15 	stw	r4,-8(fp)
  8142d8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8142dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8142e0:	e0bffe17 	ldw	r2,-8(fp)
  8142e4:	1000021e 	bne	r2,zero,8142f0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  8142e8:	00800104 	movi	r2,4
  8142ec:	00003606 	br	8143c8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  8142f0:	e0bfff17 	ldw	r2,-4(fp)
  8142f4:	1000021e 	bne	r2,zero,814300 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  8142f8:	00800244 	movi	r2,9
  8142fc:	00003206 	br	8143c8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  814300:	e0bffe17 	ldw	r2,-8(fp)
  814304:	10800003 	ldbu	r2,0(r2)
  814308:	10803fcc 	andi	r2,r2,255
  81430c:	108000e0 	cmpeqi	r2,r2,3
  814310:	1000021e 	bne	r2,zero,81431c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  814314:	00800044 	movi	r2,1
  814318:	00002b06 	br	8143c8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81431c:	0005303a 	rdctl	r2,status
  814320:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814324:	e0fffd17 	ldw	r3,-12(fp)
  814328:	00bfff84 	movi	r2,-2
  81432c:	1884703a 	and	r2,r3,r2
  814330:	1001703a 	wrctl	status,r2
  
  return context;
  814334:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  814338:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  81433c:	e0bffe17 	ldw	r2,-8(fp)
  814340:	10c00283 	ldbu	r3,10(r2)
  814344:	e0bfff17 	ldw	r2,-4(fp)
  814348:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  81434c:	e0bffe17 	ldw	r2,-8(fp)
  814350:	108002c4 	addi	r2,r2,11
  814354:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  814358:	e0bfff17 	ldw	r2,-4(fp)
  81435c:	10800084 	addi	r2,r2,2
  814360:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  814364:	e03ffa05 	stb	zero,-24(fp)
  814368:	00000b06 	br	814398 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  81436c:	e0bff917 	ldw	r2,-28(fp)
  814370:	10c00044 	addi	r3,r2,1
  814374:	e0fff915 	stw	r3,-28(fp)
  814378:	e0fff817 	ldw	r3,-32(fp)
  81437c:	19000044 	addi	r4,r3,1
  814380:	e13ff815 	stw	r4,-32(fp)
  814384:	18c00003 	ldbu	r3,0(r3)
  814388:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81438c:	e0bffa03 	ldbu	r2,-24(fp)
  814390:	10800044 	addi	r2,r2,1
  814394:	e0bffa05 	stb	r2,-24(fp)
  814398:	e0bffa03 	ldbu	r2,-24(fp)
  81439c:	108000f0 	cmpltui	r2,r2,3
  8143a0:	103ff21e 	bne	r2,zero,81436c <__alt_mem_epcs_flash_controller_0+0xff80b36c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  8143a4:	e0bffe17 	ldw	r2,-8(fp)
  8143a8:	10c0020b 	ldhu	r3,8(r2)
  8143ac:	e0bfff17 	ldw	r2,-4(fp)
  8143b0:	10c0000d 	sth	r3,0(r2)
  8143b4:	e0bffb17 	ldw	r2,-20(fp)
  8143b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143bc:	e0bffc17 	ldw	r2,-16(fp)
  8143c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8143c4:	0005883a 	mov	r2,zero
}
  8143c8:	e037883a 	mov	sp,fp
  8143cc:	df000017 	ldw	fp,0(sp)
  8143d0:	dec00104 	addi	sp,sp,4
  8143d4:	f800283a 	ret

008143d8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  8143d8:	defff904 	addi	sp,sp,-28
  8143dc:	df000615 	stw	fp,24(sp)
  8143e0:	df000604 	addi	fp,sp,24
  8143e4:	e13ffd15 	stw	r4,-12(fp)
  8143e8:	2805883a 	mov	r2,r5
  8143ec:	e1bfff15 	stw	r6,-4(fp)
  8143f0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8143f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8143f8:	e0bfff17 	ldw	r2,-4(fp)
  8143fc:	10003126 	beq	r2,zero,8144c4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814400:	e0bffd17 	ldw	r2,-12(fp)
  814404:	1000041e 	bne	r2,zero,814418 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  814408:	e0bfff17 	ldw	r2,-4(fp)
  81440c:	00c00104 	movi	r3,4
  814410:	10c00005 	stb	r3,0(r2)
        return;
  814414:	00002c06 	br	8144c8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  814418:	e0bffd17 	ldw	r2,-12(fp)
  81441c:	10800003 	ldbu	r2,0(r2)
  814420:	10803fcc 	andi	r2,r2,255
  814424:	108000e0 	cmpeqi	r2,r2,3
  814428:	1000041e 	bne	r2,zero,81443c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  81442c:	e0bfff17 	ldw	r2,-4(fp)
  814430:	00c00044 	movi	r3,1
  814434:	10c00005 	stb	r3,0(r2)
        return;
  814438:	00002306 	br	8144c8 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81443c:	0005303a 	rdctl	r2,status
  814440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814444:	e0fffc17 	ldw	r3,-16(fp)
  814448:	00bfff84 	movi	r2,-2
  81444c:	1884703a 	and	r2,r3,r2
  814450:	1001703a 	wrctl	status,r2
  
  return context;
  814454:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814458:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  81445c:	e0bfff17 	ldw	r2,-4(fp)
  814460:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  814464:	e0bffd17 	ldw	r2,-12(fp)
  814468:	1080020b 	ldhu	r2,8(r2)
  81446c:	10bfffcc 	andi	r2,r2,65535
  814470:	10000426 	beq	r2,zero,814484 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  814474:	e0bffd17 	ldw	r2,-12(fp)
  814478:	e0fffe0b 	ldhu	r3,-8(fp)
  81447c:	10c0020d 	sth	r3,8(r2)
  814480:	00000b06 	br	8144b0 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  814484:	e0bffd17 	ldw	r2,-12(fp)
  814488:	10800283 	ldbu	r2,10(r2)
  81448c:	10803fcc 	andi	r2,r2,255
  814490:	1000041e 	bne	r2,zero,8144a4 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  814494:	e0bffd17 	ldw	r2,-12(fp)
  814498:	e0fffe0b 	ldhu	r3,-8(fp)
  81449c:	10c0020d 	sth	r3,8(r2)
  8144a0:	00000306 	br	8144b0 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  8144a4:	e0bfff17 	ldw	r2,-4(fp)
  8144a8:	00c01244 	movi	r3,73
  8144ac:	10c00005 	stb	r3,0(r2)
  8144b0:	e0bffa17 	ldw	r2,-24(fp)
  8144b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8144b8:	e0bffb17 	ldw	r2,-20(fp)
  8144bc:	1001703a 	wrctl	status,r2
  8144c0:	00000106 	br	8144c8 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  8144c4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  8144c8:	e037883a 	mov	sp,fp
  8144cc:	df000017 	ldw	fp,0(sp)
  8144d0:	dec00104 	addi	sp,sp,4
  8144d4:	f800283a 	ret

008144d8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  8144d8:	defff104 	addi	sp,sp,-60
  8144dc:	dfc00e15 	stw	ra,56(sp)
  8144e0:	df000d15 	stw	fp,52(sp)
  8144e4:	df000d04 	addi	fp,sp,52
  8144e8:	2007883a 	mov	r3,r4
  8144ec:	2805883a 	mov	r2,r5
  8144f0:	e0fffe05 	stb	r3,-8(fp)
  8144f4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8144f8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8144fc:	e0bffe03 	ldbu	r2,-8(fp)
  814500:	10800530 	cmpltui	r2,r2,20
  814504:	1000051e 	bne	r2,zero,81451c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  814508:	e0bffe03 	ldbu	r2,-8(fp)
  81450c:	10803fe0 	cmpeqi	r2,r2,255
  814510:	1000021e 	bne	r2,zero,81451c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  814514:	00800a84 	movi	r2,42
  814518:	00012606 	br	8149b4 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  81451c:	e0bfff03 	ldbu	r2,-4(fp)
  814520:	10800530 	cmpltui	r2,r2,20
  814524:	1000021e 	bne	r2,zero,814530 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  814528:	00800a84 	movi	r2,42
  81452c:	00012106 	br	8149b4 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814530:	0005303a 	rdctl	r2,status
  814534:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814538:	e0fffd17 	ldw	r3,-12(fp)
  81453c:	00bfff84 	movi	r2,-2
  814540:	1884703a 	and	r2,r3,r2
  814544:	1001703a 	wrctl	status,r2
  
  return context;
  814548:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81454c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  814550:	e0ffff03 	ldbu	r3,-4(fp)
  814554:	008020b4 	movhi	r2,130
  814558:	1098f804 	addi	r2,r2,25568
  81455c:	18c7883a 	add	r3,r3,r3
  814560:	18c7883a 	add	r3,r3,r3
  814564:	10c5883a 	add	r2,r2,r3
  814568:	10800017 	ldw	r2,0(r2)
  81456c:	10000626 	beq	r2,zero,814588 <OSTaskChangePrio+0xb0>
  814570:	e0bff517 	ldw	r2,-44(fp)
  814574:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814578:	e0bff617 	ldw	r2,-40(fp)
  81457c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  814580:	00800a04 	movi	r2,40
  814584:	00010b06 	br	8149b4 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  814588:	e0bffe03 	ldbu	r2,-8(fp)
  81458c:	10803fd8 	cmpnei	r2,r2,255
  814590:	1000031e 	bne	r2,zero,8145a0 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  814594:	d0a07417 	ldw	r2,-32304(gp)
  814598:	10800c83 	ldbu	r2,50(r2)
  81459c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  8145a0:	e0fffe03 	ldbu	r3,-8(fp)
  8145a4:	008020b4 	movhi	r2,130
  8145a8:	1098f804 	addi	r2,r2,25568
  8145ac:	18c7883a 	add	r3,r3,r3
  8145b0:	18c7883a 	add	r3,r3,r3
  8145b4:	10c5883a 	add	r2,r2,r3
  8145b8:	10800017 	ldw	r2,0(r2)
  8145bc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  8145c0:	e0bff817 	ldw	r2,-32(fp)
  8145c4:	1000061e 	bne	r2,zero,8145e0 <OSTaskChangePrio+0x108>
  8145c8:	e0bff517 	ldw	r2,-44(fp)
  8145cc:	e0bff715 	stw	r2,-36(fp)
  8145d0:	e0bff717 	ldw	r2,-36(fp)
  8145d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8145d8:	00800a44 	movi	r2,41
  8145dc:	0000f506 	br	8149b4 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  8145e0:	e0bff817 	ldw	r2,-32(fp)
  8145e4:	10800058 	cmpnei	r2,r2,1
  8145e8:	1000061e 	bne	r2,zero,814604 <OSTaskChangePrio+0x12c>
  8145ec:	e0bff517 	ldw	r2,-44(fp)
  8145f0:	e0bff915 	stw	r2,-28(fp)
  8145f4:	e0bff917 	ldw	r2,-28(fp)
  8145f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8145fc:	008010c4 	movi	r2,67
  814600:	0000ec06 	br	8149b4 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  814604:	e0bfff03 	ldbu	r2,-4(fp)
  814608:	1004d0fa 	srli	r2,r2,3
  81460c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  814610:	e0bfff03 	ldbu	r2,-4(fp)
  814614:	108001cc 	andi	r2,r2,7
  814618:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  81461c:	e0bffb03 	ldbu	r2,-20(fp)
  814620:	00c00044 	movi	r3,1
  814624:	1884983a 	sll	r2,r3,r2
  814628:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  81462c:	e0bffb43 	ldbu	r2,-19(fp)
  814630:	00c00044 	movi	r3,1
  814634:	1884983a 	sll	r2,r3,r2
  814638:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  81463c:	e0fffe03 	ldbu	r3,-8(fp)
  814640:	008020b4 	movhi	r2,130
  814644:	1098f804 	addi	r2,r2,25568
  814648:	18c7883a 	add	r3,r3,r3
  81464c:	18c7883a 	add	r3,r3,r3
  814650:	10c5883a 	add	r2,r2,r3
  814654:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  814658:	e0ffff03 	ldbu	r3,-4(fp)
  81465c:	008020b4 	movhi	r2,130
  814660:	1098f804 	addi	r2,r2,25568
  814664:	18c7883a 	add	r3,r3,r3
  814668:	18c7883a 	add	r3,r3,r3
  81466c:	10c5883a 	add	r2,r2,r3
  814670:	e0fff817 	ldw	r3,-32(fp)
  814674:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  814678:	e0bff817 	ldw	r2,-32(fp)
  81467c:	10800d03 	ldbu	r2,52(r2)
  814680:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  814684:	e0bff817 	ldw	r2,-32(fp)
  814688:	10800d83 	ldbu	r2,54(r2)
  81468c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  814690:	e0bff817 	ldw	r2,-32(fp)
  814694:	10800d43 	ldbu	r2,53(r2)
  814698:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  81469c:	e0fffc03 	ldbu	r3,-16(fp)
  8146a0:	d0a07144 	addi	r2,gp,-32315
  8146a4:	1885883a 	add	r2,r3,r2
  8146a8:	10c00003 	ldbu	r3,0(r2)
  8146ac:	e0bffc83 	ldbu	r2,-14(fp)
  8146b0:	1884703a 	and	r2,r3,r2
  8146b4:	10803fcc 	andi	r2,r2,255
  8146b8:	10002826 	beq	r2,zero,81475c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  8146bc:	e0fffc03 	ldbu	r3,-16(fp)
  8146c0:	e13ffc03 	ldbu	r4,-16(fp)
  8146c4:	d0a07144 	addi	r2,gp,-32315
  8146c8:	2085883a 	add	r2,r4,r2
  8146cc:	10800003 	ldbu	r2,0(r2)
  8146d0:	1009883a 	mov	r4,r2
  8146d4:	e0bffc83 	ldbu	r2,-14(fp)
  8146d8:	0084303a 	nor	r2,zero,r2
  8146dc:	2084703a 	and	r2,r4,r2
  8146e0:	1009883a 	mov	r4,r2
  8146e4:	d0a07144 	addi	r2,gp,-32315
  8146e8:	1885883a 	add	r2,r3,r2
  8146ec:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8146f0:	e0fffc03 	ldbu	r3,-16(fp)
  8146f4:	d0a07144 	addi	r2,gp,-32315
  8146f8:	1885883a 	add	r2,r3,r2
  8146fc:	10800003 	ldbu	r2,0(r2)
  814700:	10803fcc 	andi	r2,r2,255
  814704:	1000061e 	bne	r2,zero,814720 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  814708:	e0bffc43 	ldbu	r2,-15(fp)
  81470c:	0084303a 	nor	r2,zero,r2
  814710:	1007883a 	mov	r3,r2
  814714:	d0a07103 	ldbu	r2,-32316(gp)
  814718:	1884703a 	and	r2,r3,r2
  81471c:	d0a07105 	stb	r2,-32316(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  814720:	d0e07103 	ldbu	r3,-32316(gp)
  814724:	e0bffb83 	ldbu	r2,-18(fp)
  814728:	1884b03a 	or	r2,r3,r2
  81472c:	d0a07105 	stb	r2,-32316(gp)
         OSRdyTbl[y_new] |= bitx_new;
  814730:	e0fffb03 	ldbu	r3,-20(fp)
  814734:	e13ffb03 	ldbu	r4,-20(fp)
  814738:	d0a07144 	addi	r2,gp,-32315
  81473c:	2085883a 	add	r2,r4,r2
  814740:	11000003 	ldbu	r4,0(r2)
  814744:	e0bffbc3 	ldbu	r2,-17(fp)
  814748:	2084b03a 	or	r2,r4,r2
  81474c:	1009883a 	mov	r4,r2
  814750:	d0a07144 	addi	r2,gp,-32315
  814754:	1885883a 	add	r2,r3,r2
  814758:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  81475c:	e0bff817 	ldw	r2,-32(fp)
  814760:	10800717 	ldw	r2,28(r2)
  814764:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  814768:	e0bff317 	ldw	r2,-52(fp)
  81476c:	10003326 	beq	r2,zero,81483c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  814770:	e0bffc03 	ldbu	r2,-16(fp)
  814774:	e0fffc03 	ldbu	r3,-16(fp)
  814778:	e13ff317 	ldw	r4,-52(fp)
  81477c:	20c7883a 	add	r3,r4,r3
  814780:	18c002c4 	addi	r3,r3,11
  814784:	18c00003 	ldbu	r3,0(r3)
  814788:	1809883a 	mov	r4,r3
  81478c:	e0fffc83 	ldbu	r3,-14(fp)
  814790:	00c6303a 	nor	r3,zero,r3
  814794:	20c6703a 	and	r3,r4,r3
  814798:	1809883a 	mov	r4,r3
  81479c:	e0fff317 	ldw	r3,-52(fp)
  8147a0:	1885883a 	add	r2,r3,r2
  8147a4:	108002c4 	addi	r2,r2,11
  8147a8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  8147ac:	e0bffc03 	ldbu	r2,-16(fp)
  8147b0:	e0fff317 	ldw	r3,-52(fp)
  8147b4:	1885883a 	add	r2,r3,r2
  8147b8:	108002c4 	addi	r2,r2,11
  8147bc:	10800003 	ldbu	r2,0(r2)
  8147c0:	10803fcc 	andi	r2,r2,255
  8147c4:	1000091e 	bne	r2,zero,8147ec <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  8147c8:	e0bff317 	ldw	r2,-52(fp)
  8147cc:	10800283 	ldbu	r2,10(r2)
  8147d0:	1007883a 	mov	r3,r2
  8147d4:	e0bffc43 	ldbu	r2,-15(fp)
  8147d8:	0084303a 	nor	r2,zero,r2
  8147dc:	1884703a 	and	r2,r3,r2
  8147e0:	1007883a 	mov	r3,r2
  8147e4:	e0bff317 	ldw	r2,-52(fp)
  8147e8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  8147ec:	e0bff317 	ldw	r2,-52(fp)
  8147f0:	10c00283 	ldbu	r3,10(r2)
  8147f4:	e0bffb83 	ldbu	r2,-18(fp)
  8147f8:	1884b03a 	or	r2,r3,r2
  8147fc:	1007883a 	mov	r3,r2
  814800:	e0bff317 	ldw	r2,-52(fp)
  814804:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  814808:	e0bffb03 	ldbu	r2,-20(fp)
  81480c:	e0fffb03 	ldbu	r3,-20(fp)
  814810:	e13ff317 	ldw	r4,-52(fp)
  814814:	20c7883a 	add	r3,r4,r3
  814818:	18c002c4 	addi	r3,r3,11
  81481c:	19000003 	ldbu	r4,0(r3)
  814820:	e0fffbc3 	ldbu	r3,-17(fp)
  814824:	20c6b03a 	or	r3,r4,r3
  814828:	1809883a 	mov	r4,r3
  81482c:	e0fff317 	ldw	r3,-52(fp)
  814830:	1885883a 	add	r2,r3,r2
  814834:	108002c4 	addi	r2,r2,11
  814838:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81483c:	e0bff817 	ldw	r2,-32(fp)
  814840:	10800817 	ldw	r2,32(r2)
  814844:	10004226 	beq	r2,zero,814950 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  814848:	e0bff817 	ldw	r2,-32(fp)
  81484c:	10800817 	ldw	r2,32(r2)
  814850:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  814854:	e0bff417 	ldw	r2,-48(fp)
  814858:	10800017 	ldw	r2,0(r2)
  81485c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  814860:	00003906 	br	814948 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  814864:	e0bffc03 	ldbu	r2,-16(fp)
  814868:	e0fffc03 	ldbu	r3,-16(fp)
  81486c:	e13ff317 	ldw	r4,-52(fp)
  814870:	20c7883a 	add	r3,r4,r3
  814874:	18c002c4 	addi	r3,r3,11
  814878:	18c00003 	ldbu	r3,0(r3)
  81487c:	1809883a 	mov	r4,r3
  814880:	e0fffc83 	ldbu	r3,-14(fp)
  814884:	00c6303a 	nor	r3,zero,r3
  814888:	20c6703a 	and	r3,r4,r3
  81488c:	1809883a 	mov	r4,r3
  814890:	e0fff317 	ldw	r3,-52(fp)
  814894:	1885883a 	add	r2,r3,r2
  814898:	108002c4 	addi	r2,r2,11
  81489c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8148a0:	e0bffc03 	ldbu	r2,-16(fp)
  8148a4:	e0fff317 	ldw	r3,-52(fp)
  8148a8:	1885883a 	add	r2,r3,r2
  8148ac:	108002c4 	addi	r2,r2,11
  8148b0:	10800003 	ldbu	r2,0(r2)
  8148b4:	10803fcc 	andi	r2,r2,255
  8148b8:	1000091e 	bne	r2,zero,8148e0 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  8148bc:	e0bff317 	ldw	r2,-52(fp)
  8148c0:	10800283 	ldbu	r2,10(r2)
  8148c4:	1007883a 	mov	r3,r2
  8148c8:	e0bffc43 	ldbu	r2,-15(fp)
  8148cc:	0084303a 	nor	r2,zero,r2
  8148d0:	1884703a 	and	r2,r3,r2
  8148d4:	1007883a 	mov	r3,r2
  8148d8:	e0bff317 	ldw	r2,-52(fp)
  8148dc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  8148e0:	e0bff317 	ldw	r2,-52(fp)
  8148e4:	10c00283 	ldbu	r3,10(r2)
  8148e8:	e0bffb83 	ldbu	r2,-18(fp)
  8148ec:	1884b03a 	or	r2,r3,r2
  8148f0:	1007883a 	mov	r3,r2
  8148f4:	e0bff317 	ldw	r2,-52(fp)
  8148f8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  8148fc:	e0bffb03 	ldbu	r2,-20(fp)
  814900:	e0fffb03 	ldbu	r3,-20(fp)
  814904:	e13ff317 	ldw	r4,-52(fp)
  814908:	20c7883a 	add	r3,r4,r3
  81490c:	18c002c4 	addi	r3,r3,11
  814910:	19000003 	ldbu	r4,0(r3)
  814914:	e0fffbc3 	ldbu	r3,-17(fp)
  814918:	20c6b03a 	or	r3,r4,r3
  81491c:	1809883a 	mov	r4,r3
  814920:	e0fff317 	ldw	r3,-52(fp)
  814924:	1885883a 	add	r2,r3,r2
  814928:	108002c4 	addi	r2,r2,11
  81492c:	11000005 	stb	r4,0(r2)
            pevents++;
  814930:	e0bff417 	ldw	r2,-48(fp)
  814934:	10800104 	addi	r2,r2,4
  814938:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  81493c:	e0bff417 	ldw	r2,-48(fp)
  814940:	10800017 	ldw	r2,0(r2)
  814944:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  814948:	e0bff317 	ldw	r2,-52(fp)
  81494c:	103fc51e 	bne	r2,zero,814864 <__alt_mem_epcs_flash_controller_0+0xff80b864>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  814950:	e0bff817 	ldw	r2,-32(fp)
  814954:	e0ffff03 	ldbu	r3,-4(fp)
  814958:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  81495c:	e0bff817 	ldw	r2,-32(fp)
  814960:	e0fffb03 	ldbu	r3,-20(fp)
  814964:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  814968:	e0bff817 	ldw	r2,-32(fp)
  81496c:	e0fffb43 	ldbu	r3,-19(fp)
  814970:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  814974:	e0bff817 	ldw	r2,-32(fp)
  814978:	e0fffb83 	ldbu	r3,-18(fp)
  81497c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  814980:	e0bff817 	ldw	r2,-32(fp)
  814984:	e0fffbc3 	ldbu	r3,-17(fp)
  814988:	10c00d45 	stb	r3,53(r2)
  81498c:	e0bff517 	ldw	r2,-44(fp)
  814990:	e0bffa15 	stw	r2,-24(fp)
  814994:	e0bffa17 	ldw	r2,-24(fp)
  814998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81499c:	d0a06543 	ldbu	r2,-32363(gp)
  8149a0:	10803fcc 	andi	r2,r2,255
  8149a4:	10800058 	cmpnei	r2,r2,1
  8149a8:	1000011e 	bne	r2,zero,8149b0 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  8149ac:	081029c0 	call	81029c <OS_Sched>
    }
    return (OS_ERR_NONE);
  8149b0:	0005883a 	mov	r2,zero
}
  8149b4:	e037883a 	mov	sp,fp
  8149b8:	dfc00117 	ldw	ra,4(sp)
  8149bc:	df000017 	ldw	fp,0(sp)
  8149c0:	dec00204 	addi	sp,sp,8
  8149c4:	f800283a 	ret

008149c8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  8149c8:	deffee04 	addi	sp,sp,-72
  8149cc:	dfc01115 	stw	ra,68(sp)
  8149d0:	df001015 	stw	fp,64(sp)
  8149d4:	df001004 	addi	fp,sp,64
  8149d8:	e13ffc15 	stw	r4,-16(fp)
  8149dc:	e17ffd15 	stw	r5,-12(fp)
  8149e0:	e1bffe15 	stw	r6,-8(fp)
  8149e4:	3805883a 	mov	r2,r7
  8149e8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8149ec:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8149f0:	e0bfff03 	ldbu	r2,-4(fp)
  8149f4:	10800570 	cmpltui	r2,r2,21
  8149f8:	1000021e 	bne	r2,zero,814a04 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  8149fc:	00800a84 	movi	r2,42
  814a00:	00005706 	br	814b60 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814a04:	0005303a 	rdctl	r2,status
  814a08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814a0c:	e0fffb17 	ldw	r3,-20(fp)
  814a10:	00bfff84 	movi	r2,-2
  814a14:	1884703a 	and	r2,r3,r2
  814a18:	1001703a 	wrctl	status,r2
  
  return context;
  814a1c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814a20:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  814a24:	d0a07303 	ldbu	r2,-32308(gp)
  814a28:	10803fcc 	andi	r2,r2,255
  814a2c:	10000626 	beq	r2,zero,814a48 <OSTaskCreate+0x80>
  814a30:	e0bff317 	ldw	r2,-52(fp)
  814a34:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814a38:	e0bff417 	ldw	r2,-48(fp)
  814a3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  814a40:	00800f04 	movi	r2,60
  814a44:	00004606 	br	814b60 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  814a48:	e0ffff03 	ldbu	r3,-4(fp)
  814a4c:	008020b4 	movhi	r2,130
  814a50:	1098f804 	addi	r2,r2,25568
  814a54:	18c7883a 	add	r3,r3,r3
  814a58:	18c7883a 	add	r3,r3,r3
  814a5c:	10c5883a 	add	r2,r2,r3
  814a60:	10800017 	ldw	r2,0(r2)
  814a64:	1000391e 	bne	r2,zero,814b4c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  814a68:	e0ffff03 	ldbu	r3,-4(fp)
  814a6c:	008020b4 	movhi	r2,130
  814a70:	1098f804 	addi	r2,r2,25568
  814a74:	18c7883a 	add	r3,r3,r3
  814a78:	18c7883a 	add	r3,r3,r3
  814a7c:	10c5883a 	add	r2,r2,r3
  814a80:	00c00044 	movi	r3,1
  814a84:	10c00015 	stw	r3,0(r2)
  814a88:	e0bff317 	ldw	r2,-52(fp)
  814a8c:	e0bff515 	stw	r2,-44(fp)
  814a90:	e0bff517 	ldw	r2,-44(fp)
  814a94:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  814a98:	000f883a 	mov	r7,zero
  814a9c:	e1bffe17 	ldw	r6,-8(fp)
  814aa0:	e17ffd17 	ldw	r5,-12(fp)
  814aa4:	e13ffc17 	ldw	r4,-16(fp)
  814aa8:	08197bc0 	call	8197bc <OSTaskStkInit>
  814aac:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  814ab0:	e0bfff03 	ldbu	r2,-4(fp)
  814ab4:	d8000215 	stw	zero,8(sp)
  814ab8:	d8000115 	stw	zero,4(sp)
  814abc:	d8000015 	stw	zero,0(sp)
  814ac0:	000f883a 	mov	r7,zero
  814ac4:	000d883a 	mov	r6,zero
  814ac8:	e17ff717 	ldw	r5,-36(fp)
  814acc:	1009883a 	mov	r4,r2
  814ad0:	081069c0 	call	81069c <OS_TCBInit>
  814ad4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  814ad8:	e0bff803 	ldbu	r2,-32(fp)
  814adc:	1000061e 	bne	r2,zero,814af8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  814ae0:	d0a06543 	ldbu	r2,-32363(gp)
  814ae4:	10803fcc 	andi	r2,r2,255
  814ae8:	10800058 	cmpnei	r2,r2,1
  814aec:	1000151e 	bne	r2,zero,814b44 <OSTaskCreate+0x17c>
                OS_Sched();
  814af0:	081029c0 	call	81029c <OS_Sched>
  814af4:	00001306 	br	814b44 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814af8:	0005303a 	rdctl	r2,status
  814afc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814b00:	e0fffa17 	ldw	r3,-24(fp)
  814b04:	00bfff84 	movi	r2,-2
  814b08:	1884703a 	and	r2,r3,r2
  814b0c:	1001703a 	wrctl	status,r2
  
  return context;
  814b10:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  814b14:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  814b18:	e0ffff03 	ldbu	r3,-4(fp)
  814b1c:	008020b4 	movhi	r2,130
  814b20:	1098f804 	addi	r2,r2,25568
  814b24:	18c7883a 	add	r3,r3,r3
  814b28:	18c7883a 	add	r3,r3,r3
  814b2c:	10c5883a 	add	r2,r2,r3
  814b30:	10000015 	stw	zero,0(r2)
  814b34:	e0bff317 	ldw	r2,-52(fp)
  814b38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814b3c:	e0bff617 	ldw	r2,-40(fp)
  814b40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  814b44:	e0bff803 	ldbu	r2,-32(fp)
  814b48:	00000506 	br	814b60 <OSTaskCreate+0x198>
  814b4c:	e0bff317 	ldw	r2,-52(fp)
  814b50:	e0bff915 	stw	r2,-28(fp)
  814b54:	e0bff917 	ldw	r2,-28(fp)
  814b58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  814b5c:	00800a04 	movi	r2,40
}
  814b60:	e037883a 	mov	sp,fp
  814b64:	dfc00117 	ldw	ra,4(sp)
  814b68:	df000017 	ldw	fp,0(sp)
  814b6c:	dec00204 	addi	sp,sp,8
  814b70:	f800283a 	ret

00814b74 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  814b74:	deffec04 	addi	sp,sp,-80
  814b78:	dfc01315 	stw	ra,76(sp)
  814b7c:	df001215 	stw	fp,72(sp)
  814b80:	df001204 	addi	fp,sp,72
  814b84:	e13ffa15 	stw	r4,-24(fp)
  814b88:	e17ffb15 	stw	r5,-20(fp)
  814b8c:	e1bffc15 	stw	r6,-16(fp)
  814b90:	3809883a 	mov	r4,r7
  814b94:	e0c00217 	ldw	r3,8(fp)
  814b98:	e0800617 	ldw	r2,24(fp)
  814b9c:	e13ffd05 	stb	r4,-12(fp)
  814ba0:	e0fffe0d 	sth	r3,-8(fp)
  814ba4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  814ba8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  814bac:	e0bffd03 	ldbu	r2,-12(fp)
  814bb0:	10800570 	cmpltui	r2,r2,21
  814bb4:	1000021e 	bne	r2,zero,814bc0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  814bb8:	00800a84 	movi	r2,42
  814bbc:	00006106 	br	814d44 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814bc0:	0005303a 	rdctl	r2,status
  814bc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814bc8:	e0fff917 	ldw	r3,-28(fp)
  814bcc:	00bfff84 	movi	r2,-2
  814bd0:	1884703a 	and	r2,r3,r2
  814bd4:	1001703a 	wrctl	status,r2
  
  return context;
  814bd8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814bdc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  814be0:	d0a07303 	ldbu	r2,-32308(gp)
  814be4:	10803fcc 	andi	r2,r2,255
  814be8:	10000626 	beq	r2,zero,814c04 <OSTaskCreateExt+0x90>
  814bec:	e0bff117 	ldw	r2,-60(fp)
  814bf0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814bf4:	e0bff217 	ldw	r2,-56(fp)
  814bf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  814bfc:	00800f04 	movi	r2,60
  814c00:	00005006 	br	814d44 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  814c04:	e0fffd03 	ldbu	r3,-12(fp)
  814c08:	008020b4 	movhi	r2,130
  814c0c:	1098f804 	addi	r2,r2,25568
  814c10:	18c7883a 	add	r3,r3,r3
  814c14:	18c7883a 	add	r3,r3,r3
  814c18:	10c5883a 	add	r2,r2,r3
  814c1c:	10800017 	ldw	r2,0(r2)
  814c20:	1000431e 	bne	r2,zero,814d30 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  814c24:	e0fffd03 	ldbu	r3,-12(fp)
  814c28:	008020b4 	movhi	r2,130
  814c2c:	1098f804 	addi	r2,r2,25568
  814c30:	18c7883a 	add	r3,r3,r3
  814c34:	18c7883a 	add	r3,r3,r3
  814c38:	10c5883a 	add	r2,r2,r3
  814c3c:	00c00044 	movi	r3,1
  814c40:	10c00015 	stw	r3,0(r2)
  814c44:	e0bff117 	ldw	r2,-60(fp)
  814c48:	e0bff315 	stw	r2,-52(fp)
  814c4c:	e0bff317 	ldw	r2,-52(fp)
  814c50:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  814c54:	e0bfff0b 	ldhu	r2,-4(fp)
  814c58:	100d883a 	mov	r6,r2
  814c5c:	e1400417 	ldw	r5,16(fp)
  814c60:	e1000317 	ldw	r4,12(fp)
  814c64:	0815bd40 	call	815bd4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  814c68:	e0bfff0b 	ldhu	r2,-4(fp)
  814c6c:	100f883a 	mov	r7,r2
  814c70:	e1bffc17 	ldw	r6,-16(fp)
  814c74:	e17ffb17 	ldw	r5,-20(fp)
  814c78:	e13ffa17 	ldw	r4,-24(fp)
  814c7c:	08197bc0 	call	8197bc <OSTaskStkInit>
  814c80:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  814c84:	e0fffd03 	ldbu	r3,-12(fp)
  814c88:	e13ffe0b 	ldhu	r4,-8(fp)
  814c8c:	e0bfff0b 	ldhu	r2,-4(fp)
  814c90:	d8800215 	stw	r2,8(sp)
  814c94:	e0800517 	ldw	r2,20(fp)
  814c98:	d8800115 	stw	r2,4(sp)
  814c9c:	e0800417 	ldw	r2,16(fp)
  814ca0:	d8800015 	stw	r2,0(sp)
  814ca4:	200f883a 	mov	r7,r4
  814ca8:	e1800317 	ldw	r6,12(fp)
  814cac:	e17ff517 	ldw	r5,-44(fp)
  814cb0:	1809883a 	mov	r4,r3
  814cb4:	081069c0 	call	81069c <OS_TCBInit>
  814cb8:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  814cbc:	e0bff603 	ldbu	r2,-40(fp)
  814cc0:	1000061e 	bne	r2,zero,814cdc <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  814cc4:	d0a06543 	ldbu	r2,-32363(gp)
  814cc8:	10803fcc 	andi	r2,r2,255
  814ccc:	10800058 	cmpnei	r2,r2,1
  814cd0:	1000151e 	bne	r2,zero,814d28 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  814cd4:	081029c0 	call	81029c <OS_Sched>
  814cd8:	00001306 	br	814d28 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814cdc:	0005303a 	rdctl	r2,status
  814ce0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814ce4:	e0fff817 	ldw	r3,-32(fp)
  814ce8:	00bfff84 	movi	r2,-2
  814cec:	1884703a 	and	r2,r3,r2
  814cf0:	1001703a 	wrctl	status,r2
  
  return context;
  814cf4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  814cf8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  814cfc:	e0fffd03 	ldbu	r3,-12(fp)
  814d00:	008020b4 	movhi	r2,130
  814d04:	1098f804 	addi	r2,r2,25568
  814d08:	18c7883a 	add	r3,r3,r3
  814d0c:	18c7883a 	add	r3,r3,r3
  814d10:	10c5883a 	add	r2,r2,r3
  814d14:	10000015 	stw	zero,0(r2)
  814d18:	e0bff117 	ldw	r2,-60(fp)
  814d1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814d20:	e0bff417 	ldw	r2,-48(fp)
  814d24:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  814d28:	e0bff603 	ldbu	r2,-40(fp)
  814d2c:	00000506 	br	814d44 <OSTaskCreateExt+0x1d0>
  814d30:	e0bff117 	ldw	r2,-60(fp)
  814d34:	e0bff715 	stw	r2,-36(fp)
  814d38:	e0bff717 	ldw	r2,-36(fp)
  814d3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  814d40:	00800a04 	movi	r2,40
}
  814d44:	e037883a 	mov	sp,fp
  814d48:	dfc00117 	ldw	ra,4(sp)
  814d4c:	df000017 	ldw	fp,0(sp)
  814d50:	dec00204 	addi	sp,sp,8
  814d54:	f800283a 	ret

00814d58 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  814d58:	defff404 	addi	sp,sp,-48
  814d5c:	dfc00b15 	stw	ra,44(sp)
  814d60:	df000a15 	stw	fp,40(sp)
  814d64:	df000a04 	addi	fp,sp,40
  814d68:	2005883a 	mov	r2,r4
  814d6c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  814d70:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  814d74:	d0a07303 	ldbu	r2,-32308(gp)
  814d78:	10803fcc 	andi	r2,r2,255
  814d7c:	10000226 	beq	r2,zero,814d88 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  814d80:	00801004 	movi	r2,64
  814d84:	0000c006 	br	815088 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  814d88:	e0bfff03 	ldbu	r2,-4(fp)
  814d8c:	10800518 	cmpnei	r2,r2,20
  814d90:	1000021e 	bne	r2,zero,814d9c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  814d94:	00800f84 	movi	r2,62
  814d98:	0000bb06 	br	815088 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  814d9c:	e0bfff03 	ldbu	r2,-4(fp)
  814da0:	10800530 	cmpltui	r2,r2,20
  814da4:	1000051e 	bne	r2,zero,814dbc <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  814da8:	e0bfff03 	ldbu	r2,-4(fp)
  814dac:	10803fe0 	cmpeqi	r2,r2,255
  814db0:	1000021e 	bne	r2,zero,814dbc <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  814db4:	00800a84 	movi	r2,42
  814db8:	0000b306 	br	815088 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814dbc:	0005303a 	rdctl	r2,status
  814dc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814dc4:	e0fffe17 	ldw	r3,-8(fp)
  814dc8:	00bfff84 	movi	r2,-2
  814dcc:	1884703a 	and	r2,r3,r2
  814dd0:	1001703a 	wrctl	status,r2
  
  return context;
  814dd4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  814dd8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  814ddc:	e0bfff03 	ldbu	r2,-4(fp)
  814de0:	10803fd8 	cmpnei	r2,r2,255
  814de4:	1000031e 	bne	r2,zero,814df4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  814de8:	d0a07417 	ldw	r2,-32304(gp)
  814dec:	10800c83 	ldbu	r2,50(r2)
  814df0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814df4:	e0ffff03 	ldbu	r3,-4(fp)
  814df8:	008020b4 	movhi	r2,130
  814dfc:	1098f804 	addi	r2,r2,25568
  814e00:	18c7883a 	add	r3,r3,r3
  814e04:	18c7883a 	add	r3,r3,r3
  814e08:	10c5883a 	add	r2,r2,r3
  814e0c:	10800017 	ldw	r2,0(r2)
  814e10:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  814e14:	e0bff817 	ldw	r2,-32(fp)
  814e18:	1000061e 	bne	r2,zero,814e34 <OSTaskDel+0xdc>
  814e1c:	e0bff617 	ldw	r2,-40(fp)
  814e20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e24:	e0bff717 	ldw	r2,-36(fp)
  814e28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814e2c:	008010c4 	movi	r2,67
  814e30:	00009506 	br	815088 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  814e34:	e0bff817 	ldw	r2,-32(fp)
  814e38:	10800058 	cmpnei	r2,r2,1
  814e3c:	1000061e 	bne	r2,zero,814e58 <OSTaskDel+0x100>
  814e40:	e0bff617 	ldw	r2,-40(fp)
  814e44:	e0bff915 	stw	r2,-28(fp)
  814e48:	e0bff917 	ldw	r2,-28(fp)
  814e4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  814e50:	00800f44 	movi	r2,61
  814e54:	00008c06 	br	815088 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  814e58:	e0bff817 	ldw	r2,-32(fp)
  814e5c:	10800d03 	ldbu	r2,52(r2)
  814e60:	10c03fcc 	andi	r3,r2,255
  814e64:	e0bff817 	ldw	r2,-32(fp)
  814e68:	10800d03 	ldbu	r2,52(r2)
  814e6c:	11003fcc 	andi	r4,r2,255
  814e70:	d0a07144 	addi	r2,gp,-32315
  814e74:	2085883a 	add	r2,r4,r2
  814e78:	10800003 	ldbu	r2,0(r2)
  814e7c:	1009883a 	mov	r4,r2
  814e80:	e0bff817 	ldw	r2,-32(fp)
  814e84:	10800d43 	ldbu	r2,53(r2)
  814e88:	0084303a 	nor	r2,zero,r2
  814e8c:	2084703a 	and	r2,r4,r2
  814e90:	1009883a 	mov	r4,r2
  814e94:	d0a07144 	addi	r2,gp,-32315
  814e98:	1885883a 	add	r2,r3,r2
  814e9c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  814ea0:	e0bff817 	ldw	r2,-32(fp)
  814ea4:	10800d03 	ldbu	r2,52(r2)
  814ea8:	10c03fcc 	andi	r3,r2,255
  814eac:	d0a07144 	addi	r2,gp,-32315
  814eb0:	1885883a 	add	r2,r3,r2
  814eb4:	10800003 	ldbu	r2,0(r2)
  814eb8:	10803fcc 	andi	r2,r2,255
  814ebc:	1000071e 	bne	r2,zero,814edc <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  814ec0:	e0bff817 	ldw	r2,-32(fp)
  814ec4:	10800d83 	ldbu	r2,54(r2)
  814ec8:	0084303a 	nor	r2,zero,r2
  814ecc:	1007883a 	mov	r3,r2
  814ed0:	d0a07103 	ldbu	r2,-32316(gp)
  814ed4:	1884703a 	and	r2,r3,r2
  814ed8:	d0a07105 	stb	r2,-32316(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  814edc:	e0bff817 	ldw	r2,-32(fp)
  814ee0:	10800717 	ldw	r2,28(r2)
  814ee4:	10000526 	beq	r2,zero,814efc <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  814ee8:	e0bff817 	ldw	r2,-32(fp)
  814eec:	10800717 	ldw	r2,28(r2)
  814ef0:	100b883a 	mov	r5,r2
  814ef4:	e13ff817 	ldw	r4,-32(fp)
  814ef8:	080fc480 	call	80fc48 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  814efc:	e0bff817 	ldw	r2,-32(fp)
  814f00:	10800817 	ldw	r2,32(r2)
  814f04:	10000526 	beq	r2,zero,814f1c <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  814f08:	e0bff817 	ldw	r2,-32(fp)
  814f0c:	10800817 	ldw	r2,32(r2)
  814f10:	100b883a 	mov	r5,r2
  814f14:	e13ff817 	ldw	r4,-32(fp)
  814f18:	080fd000 	call	80fd00 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  814f1c:	e0bff817 	ldw	r2,-32(fp)
  814f20:	10800a17 	ldw	r2,40(r2)
  814f24:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  814f28:	e0bffb17 	ldw	r2,-20(fp)
  814f2c:	10000226 	beq	r2,zero,814f38 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  814f30:	e13ffb17 	ldw	r4,-20(fp)
  814f34:	08121700 	call	812170 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  814f38:	e0bff817 	ldw	r2,-32(fp)
  814f3c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  814f40:	e0bff817 	ldw	r2,-32(fp)
  814f44:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  814f48:	e0bff817 	ldw	r2,-32(fp)
  814f4c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  814f50:	d0a06503 	ldbu	r2,-32364(gp)
  814f54:	10803fcc 	andi	r2,r2,255
  814f58:	10803fe0 	cmpeqi	r2,r2,255
  814f5c:	1000031e 	bne	r2,zero,814f6c <OSTaskDel+0x214>
        OSLockNesting++;
  814f60:	d0a06503 	ldbu	r2,-32364(gp)
  814f64:	10800044 	addi	r2,r2,1
  814f68:	d0a06505 	stb	r2,-32364(gp)
  814f6c:	e0bff617 	ldw	r2,-40(fp)
  814f70:	e0bffd15 	stw	r2,-12(fp)
  814f74:	e0bffd17 	ldw	r2,-12(fp)
  814f78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  814f7c:	080f8300 	call	80f830 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814f80:	0005303a 	rdctl	r2,status
  814f84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814f88:	e0fffa17 	ldw	r3,-24(fp)
  814f8c:	00bfff84 	movi	r2,-2
  814f90:	1884703a 	and	r2,r3,r2
  814f94:	1001703a 	wrctl	status,r2
  
  return context;
  814f98:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  814f9c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  814fa0:	d0a06503 	ldbu	r2,-32364(gp)
  814fa4:	10803fcc 	andi	r2,r2,255
  814fa8:	10000326 	beq	r2,zero,814fb8 <OSTaskDel+0x260>
        OSLockNesting--;
  814fac:	d0a06503 	ldbu	r2,-32364(gp)
  814fb0:	10bfffc4 	addi	r2,r2,-1
  814fb4:	d0a06505 	stb	r2,-32364(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  814fb8:	e13ff817 	ldw	r4,-32(fp)
  814fbc:	081993c0 	call	81993c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  814fc0:	d0a06d43 	ldbu	r2,-32331(gp)
  814fc4:	10bfffc4 	addi	r2,r2,-1
  814fc8:	d0a06d45 	stb	r2,-32331(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  814fcc:	e0ffff03 	ldbu	r3,-4(fp)
  814fd0:	008020b4 	movhi	r2,130
  814fd4:	1098f804 	addi	r2,r2,25568
  814fd8:	18c7883a 	add	r3,r3,r3
  814fdc:	18c7883a 	add	r3,r3,r3
  814fe0:	10c5883a 	add	r2,r2,r3
  814fe4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  814fe8:	e0bff817 	ldw	r2,-32(fp)
  814fec:	10800617 	ldw	r2,24(r2)
  814ff0:	1000071e 	bne	r2,zero,815010 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  814ff4:	e0bff817 	ldw	r2,-32(fp)
  814ff8:	10800517 	ldw	r2,20(r2)
  814ffc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  815000:	e0bff817 	ldw	r2,-32(fp)
  815004:	10800517 	ldw	r2,20(r2)
  815008:	d0a06815 	stw	r2,-32352(gp)
  81500c:	00000a06 	br	815038 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  815010:	e0bff817 	ldw	r2,-32(fp)
  815014:	10800617 	ldw	r2,24(r2)
  815018:	e0fff817 	ldw	r3,-32(fp)
  81501c:	18c00517 	ldw	r3,20(r3)
  815020:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  815024:	e0bff817 	ldw	r2,-32(fp)
  815028:	10800517 	ldw	r2,20(r2)
  81502c:	e0fff817 	ldw	r3,-32(fp)
  815030:	18c00617 	ldw	r3,24(r3)
  815034:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  815038:	d0e06c17 	ldw	r3,-32336(gp)
  81503c:	e0bff817 	ldw	r2,-32(fp)
  815040:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  815044:	e0bff817 	ldw	r2,-32(fp)
  815048:	d0a06c15 	stw	r2,-32336(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  81504c:	e0bff817 	ldw	r2,-32(fp)
  815050:	00c00fc4 	movi	r3,63
  815054:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  815058:	e0bff817 	ldw	r2,-32(fp)
  81505c:	10001345 	stb	zero,77(r2)
  815060:	e0bff617 	ldw	r2,-40(fp)
  815064:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815068:	e0bffc17 	ldw	r2,-16(fp)
  81506c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  815070:	d0a06543 	ldbu	r2,-32363(gp)
  815074:	10803fcc 	andi	r2,r2,255
  815078:	10800058 	cmpnei	r2,r2,1
  81507c:	1000011e 	bne	r2,zero,815084 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  815080:	081029c0 	call	81029c <OS_Sched>
    }
    return (OS_ERR_NONE);
  815084:	0005883a 	mov	r2,zero
}
  815088:	e037883a 	mov	sp,fp
  81508c:	dfc00117 	ldw	ra,4(sp)
  815090:	df000017 	ldw	fp,0(sp)
  815094:	dec00204 	addi	sp,sp,8
  815098:	f800283a 	ret

0081509c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  81509c:	defff504 	addi	sp,sp,-44
  8150a0:	df000a15 	stw	fp,40(sp)
  8150a4:	df000a04 	addi	fp,sp,40
  8150a8:	2005883a 	mov	r2,r4
  8150ac:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8150b0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  8150b4:	e0bfff03 	ldbu	r2,-4(fp)
  8150b8:	10800518 	cmpnei	r2,r2,20
  8150bc:	1000021e 	bne	r2,zero,8150c8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  8150c0:	00800f84 	movi	r2,62
  8150c4:	00004506 	br	8151dc <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  8150c8:	e0bfff03 	ldbu	r2,-4(fp)
  8150cc:	10800530 	cmpltui	r2,r2,20
  8150d0:	1000051e 	bne	r2,zero,8150e8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  8150d4:	e0bfff03 	ldbu	r2,-4(fp)
  8150d8:	10803fe0 	cmpeqi	r2,r2,255
  8150dc:	1000021e 	bne	r2,zero,8150e8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  8150e0:	00800a84 	movi	r2,42
  8150e4:	00003d06 	br	8151dc <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  8150e8:	e0bfff03 	ldbu	r2,-4(fp)
  8150ec:	10803fd8 	cmpnei	r2,r2,255
  8150f0:	1000111e 	bne	r2,zero,815138 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8150f4:	0005303a 	rdctl	r2,status
  8150f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8150fc:	e0fff917 	ldw	r3,-28(fp)
  815100:	00bfff84 	movi	r2,-2
  815104:	1884703a 	and	r2,r3,r2
  815108:	1001703a 	wrctl	status,r2
  
  return context;
  81510c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  815110:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  815114:	d0a07417 	ldw	r2,-32304(gp)
  815118:	10800dc3 	ldbu	r2,55(r2)
  81511c:	e0bff805 	stb	r2,-32(fp)
  815120:	e0bff617 	ldw	r2,-40(fp)
  815124:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815128:	e0bffe17 	ldw	r2,-8(fp)
  81512c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  815130:	e0bff803 	ldbu	r2,-32(fp)
  815134:	00002906 	br	8151dc <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815138:	0005303a 	rdctl	r2,status
  81513c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815140:	e0fff717 	ldw	r3,-36(fp)
  815144:	00bfff84 	movi	r2,-2
  815148:	1884703a 	and	r2,r3,r2
  81514c:	1001703a 	wrctl	status,r2
  
  return context;
  815150:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  815154:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  815158:	e0ffff03 	ldbu	r3,-4(fp)
  81515c:	008020b4 	movhi	r2,130
  815160:	1098f804 	addi	r2,r2,25568
  815164:	18c7883a 	add	r3,r3,r3
  815168:	18c7883a 	add	r3,r3,r3
  81516c:	10c5883a 	add	r2,r2,r3
  815170:	10800017 	ldw	r2,0(r2)
  815174:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  815178:	e0bffb17 	ldw	r2,-20(fp)
  81517c:	1000061e 	bne	r2,zero,815198 <OSTaskDelReq+0xfc>
  815180:	e0bff617 	ldw	r2,-40(fp)
  815184:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815188:	e0bffa17 	ldw	r2,-24(fp)
  81518c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  815190:	008010c4 	movi	r2,67
  815194:	00001106 	br	8151dc <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  815198:	e0bffb17 	ldw	r2,-20(fp)
  81519c:	10800058 	cmpnei	r2,r2,1
  8151a0:	1000061e 	bne	r2,zero,8151bc <OSTaskDelReq+0x120>
  8151a4:	e0bff617 	ldw	r2,-40(fp)
  8151a8:	e0bffc15 	stw	r2,-16(fp)
  8151ac:	e0bffc17 	ldw	r2,-16(fp)
  8151b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  8151b4:	00800f44 	movi	r2,61
  8151b8:	00000806 	br	8151dc <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  8151bc:	e0bffb17 	ldw	r2,-20(fp)
  8151c0:	00c00fc4 	movi	r3,63
  8151c4:	10c00dc5 	stb	r3,55(r2)
  8151c8:	e0bff617 	ldw	r2,-40(fp)
  8151cc:	e0bffd15 	stw	r2,-12(fp)
  8151d0:	e0bffd17 	ldw	r2,-12(fp)
  8151d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8151d8:	0005883a 	mov	r2,zero
}
  8151dc:	e037883a 	mov	sp,fp
  8151e0:	df000017 	ldw	fp,0(sp)
  8151e4:	dec00104 	addi	sp,sp,4
  8151e8:	f800283a 	ret

008151ec <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  8151ec:	defff404 	addi	sp,sp,-48
  8151f0:	dfc00b15 	stw	ra,44(sp)
  8151f4:	df000a15 	stw	fp,40(sp)
  8151f8:	df000a04 	addi	fp,sp,40
  8151fc:	2005883a 	mov	r2,r4
  815200:	e17ffe15 	stw	r5,-8(fp)
  815204:	e1bfff15 	stw	r6,-4(fp)
  815208:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  81520c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  815210:	e0bfff17 	ldw	r2,-4(fp)
  815214:	1000021e 	bne	r2,zero,815220 <OSTaskNameGet+0x34>
        return (0);
  815218:	0005883a 	mov	r2,zero
  81521c:	00005406 	br	815370 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  815220:	e0bffd03 	ldbu	r2,-12(fp)
  815224:	10800570 	cmpltui	r2,r2,21
  815228:	1000081e 	bne	r2,zero,81524c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  81522c:	e0bffd03 	ldbu	r2,-12(fp)
  815230:	10803fe0 	cmpeqi	r2,r2,255
  815234:	1000051e 	bne	r2,zero,81524c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  815238:	e0bfff17 	ldw	r2,-4(fp)
  81523c:	00c00a84 	movi	r3,42
  815240:	10c00005 	stb	r3,0(r2)
            return (0);
  815244:	0005883a 	mov	r2,zero
  815248:	00004906 	br	815370 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  81524c:	e0bffe17 	ldw	r2,-8(fp)
  815250:	1000051e 	bne	r2,zero,815268 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  815254:	e0bfff17 	ldw	r2,-4(fp)
  815258:	00c00304 	movi	r3,12
  81525c:	10c00005 	stb	r3,0(r2)
        return (0);
  815260:	0005883a 	mov	r2,zero
  815264:	00004206 	br	815370 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  815268:	d0a07303 	ldbu	r2,-32308(gp)
  81526c:	10803fcc 	andi	r2,r2,255
  815270:	10000526 	beq	r2,zero,815288 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  815274:	e0bfff17 	ldw	r2,-4(fp)
  815278:	00c00444 	movi	r3,17
  81527c:	10c00005 	stb	r3,0(r2)
        return (0);
  815280:	0005883a 	mov	r2,zero
  815284:	00003a06 	br	815370 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815288:	0005303a 	rdctl	r2,status
  81528c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815290:	e0fffc17 	ldw	r3,-16(fp)
  815294:	00bfff84 	movi	r2,-2
  815298:	1884703a 	and	r2,r3,r2
  81529c:	1001703a 	wrctl	status,r2
  
  return context;
  8152a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8152a4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  8152a8:	e0bffd03 	ldbu	r2,-12(fp)
  8152ac:	10803fd8 	cmpnei	r2,r2,255
  8152b0:	1000031e 	bne	r2,zero,8152c0 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  8152b4:	d0a07417 	ldw	r2,-32304(gp)
  8152b8:	10800c83 	ldbu	r2,50(r2)
  8152bc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8152c0:	e0fffd03 	ldbu	r3,-12(fp)
  8152c4:	008020b4 	movhi	r2,130
  8152c8:	1098f804 	addi	r2,r2,25568
  8152cc:	18c7883a 	add	r3,r3,r3
  8152d0:	18c7883a 	add	r3,r3,r3
  8152d4:	10c5883a 	add	r2,r2,r3
  8152d8:	10800017 	ldw	r2,0(r2)
  8152dc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  8152e0:	e0bff817 	ldw	r2,-32(fp)
  8152e4:	1000091e 	bne	r2,zero,81530c <OSTaskNameGet+0x120>
  8152e8:	e0bff617 	ldw	r2,-40(fp)
  8152ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8152f0:	e0bff717 	ldw	r2,-36(fp)
  8152f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8152f8:	e0bfff17 	ldw	r2,-4(fp)
  8152fc:	00c010c4 	movi	r3,67
  815300:	10c00005 	stb	r3,0(r2)
        return (0);
  815304:	0005883a 	mov	r2,zero
  815308:	00001906 	br	815370 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81530c:	e0bff817 	ldw	r2,-32(fp)
  815310:	10800058 	cmpnei	r2,r2,1
  815314:	1000091e 	bne	r2,zero,81533c <OSTaskNameGet+0x150>
  815318:	e0bff617 	ldw	r2,-40(fp)
  81531c:	e0bff915 	stw	r2,-28(fp)
  815320:	e0bff917 	ldw	r2,-28(fp)
  815324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  815328:	e0bfff17 	ldw	r2,-4(fp)
  81532c:	00c010c4 	movi	r3,67
  815330:	10c00005 	stb	r3,0(r2)
        return (0);
  815334:	0005883a 	mov	r2,zero
  815338:	00000d06 	br	815370 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  81533c:	e0bff817 	ldw	r2,-32(fp)
  815340:	10801304 	addi	r2,r2,76
  815344:	100b883a 	mov	r5,r2
  815348:	e13ffe17 	ldw	r4,-8(fp)
  81534c:	08103e00 	call	8103e0 <OS_StrCopy>
  815350:	e0bffb05 	stb	r2,-20(fp)
  815354:	e0bff617 	ldw	r2,-40(fp)
  815358:	e0bffa15 	stw	r2,-24(fp)
  81535c:	e0bffa17 	ldw	r2,-24(fp)
  815360:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815364:	e0bfff17 	ldw	r2,-4(fp)
  815368:	10000005 	stb	zero,0(r2)
    return (len);
  81536c:	e0bffb03 	ldbu	r2,-20(fp)
}
  815370:	e037883a 	mov	sp,fp
  815374:	dfc00117 	ldw	ra,4(sp)
  815378:	df000017 	ldw	fp,0(sp)
  81537c:	dec00204 	addi	sp,sp,8
  815380:	f800283a 	ret

00815384 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  815384:	defff304 	addi	sp,sp,-52
  815388:	dfc00c15 	stw	ra,48(sp)
  81538c:	df000b15 	stw	fp,44(sp)
  815390:	df000b04 	addi	fp,sp,44
  815394:	2005883a 	mov	r2,r4
  815398:	e17ffe15 	stw	r5,-8(fp)
  81539c:	e1bfff15 	stw	r6,-4(fp)
  8153a0:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8153a4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8153a8:	e0bfff17 	ldw	r2,-4(fp)
  8153ac:	10005c26 	beq	r2,zero,815520 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  8153b0:	e0bffd03 	ldbu	r2,-12(fp)
  8153b4:	10800570 	cmpltui	r2,r2,21
  8153b8:	1000071e 	bne	r2,zero,8153d8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  8153bc:	e0bffd03 	ldbu	r2,-12(fp)
  8153c0:	10803fe0 	cmpeqi	r2,r2,255
  8153c4:	1000041e 	bne	r2,zero,8153d8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  8153c8:	e0bfff17 	ldw	r2,-4(fp)
  8153cc:	00c00a84 	movi	r3,42
  8153d0:	10c00005 	stb	r3,0(r2)
            return;
  8153d4:	00005306 	br	815524 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  8153d8:	e0bffe17 	ldw	r2,-8(fp)
  8153dc:	1000041e 	bne	r2,zero,8153f0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  8153e0:	e0bfff17 	ldw	r2,-4(fp)
  8153e4:	00c00304 	movi	r3,12
  8153e8:	10c00005 	stb	r3,0(r2)
        return;
  8153ec:	00004d06 	br	815524 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  8153f0:	d0a07303 	ldbu	r2,-32308(gp)
  8153f4:	10803fcc 	andi	r2,r2,255
  8153f8:	10000426 	beq	r2,zero,81540c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  8153fc:	e0bfff17 	ldw	r2,-4(fp)
  815400:	00c00484 	movi	r3,18
  815404:	10c00005 	stb	r3,0(r2)
        return;
  815408:	00004606 	br	815524 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81540c:	0005303a 	rdctl	r2,status
  815410:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815414:	e0fffc17 	ldw	r3,-16(fp)
  815418:	00bfff84 	movi	r2,-2
  81541c:	1884703a 	and	r2,r3,r2
  815420:	1001703a 	wrctl	status,r2
  
  return context;
  815424:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  815428:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  81542c:	e0bffd03 	ldbu	r2,-12(fp)
  815430:	10803fd8 	cmpnei	r2,r2,255
  815434:	1000031e 	bne	r2,zero,815444 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  815438:	d0a07417 	ldw	r2,-32304(gp)
  81543c:	10800c83 	ldbu	r2,50(r2)
  815440:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815444:	e0fffd03 	ldbu	r3,-12(fp)
  815448:	008020b4 	movhi	r2,130
  81544c:	1098f804 	addi	r2,r2,25568
  815450:	18c7883a 	add	r3,r3,r3
  815454:	18c7883a 	add	r3,r3,r3
  815458:	10c5883a 	add	r2,r2,r3
  81545c:	10800017 	ldw	r2,0(r2)
  815460:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  815464:	e0bff717 	ldw	r2,-36(fp)
  815468:	1000081e 	bne	r2,zero,81548c <OSTaskNameSet+0x108>
  81546c:	e0bff517 	ldw	r2,-44(fp)
  815470:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815474:	e0bff617 	ldw	r2,-40(fp)
  815478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81547c:	e0bfff17 	ldw	r2,-4(fp)
  815480:	00c010c4 	movi	r3,67
  815484:	10c00005 	stb	r3,0(r2)
        return;
  815488:	00002606 	br	815524 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81548c:	e0bff717 	ldw	r2,-36(fp)
  815490:	10800058 	cmpnei	r2,r2,1
  815494:	1000081e 	bne	r2,zero,8154b8 <OSTaskNameSet+0x134>
  815498:	e0bff517 	ldw	r2,-44(fp)
  81549c:	e0bff815 	stw	r2,-32(fp)
  8154a0:	e0bff817 	ldw	r2,-32(fp)
  8154a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8154a8:	e0bfff17 	ldw	r2,-4(fp)
  8154ac:	00c010c4 	movi	r3,67
  8154b0:	10c00005 	stb	r3,0(r2)
        return;
  8154b4:	00001b06 	br	815524 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  8154b8:	e13ffe17 	ldw	r4,-8(fp)
  8154bc:	08104540 	call	810454 <OS_StrLen>
  8154c0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  8154c4:	e0bffa03 	ldbu	r2,-24(fp)
  8154c8:	10800830 	cmpltui	r2,r2,32
  8154cc:	1000081e 	bne	r2,zero,8154f0 <OSTaskNameSet+0x16c>
  8154d0:	e0bff517 	ldw	r2,-44(fp)
  8154d4:	e0bff915 	stw	r2,-28(fp)
  8154d8:	e0bff917 	ldw	r2,-28(fp)
  8154dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  8154e0:	e0bfff17 	ldw	r2,-4(fp)
  8154e4:	00c01044 	movi	r3,65
  8154e8:	10c00005 	stb	r3,0(r2)
        return;
  8154ec:	00000d06 	br	815524 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8154f0:	e0bff717 	ldw	r2,-36(fp)
  8154f4:	10801304 	addi	r2,r2,76
  8154f8:	e17ffe17 	ldw	r5,-8(fp)
  8154fc:	1009883a 	mov	r4,r2
  815500:	08103e00 	call	8103e0 <OS_StrCopy>
  815504:	e0bff517 	ldw	r2,-44(fp)
  815508:	e0bffb15 	stw	r2,-20(fp)
  81550c:	e0bffb17 	ldw	r2,-20(fp)
  815510:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815514:	e0bfff17 	ldw	r2,-4(fp)
  815518:	10000005 	stb	zero,0(r2)
  81551c:	00000106 	br	815524 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  815520:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  815524:	e037883a 	mov	sp,fp
  815528:	dfc00117 	ldw	ra,4(sp)
  81552c:	df000017 	ldw	fp,0(sp)
  815530:	dec00204 	addi	sp,sp,8
  815534:	f800283a 	ret

00815538 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  815538:	defff404 	addi	sp,sp,-48
  81553c:	dfc00b15 	stw	ra,44(sp)
  815540:	df000a15 	stw	fp,40(sp)
  815544:	df000a04 	addi	fp,sp,40
  815548:	2005883a 	mov	r2,r4
  81554c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  815550:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  815554:	e0bfff03 	ldbu	r2,-4(fp)
  815558:	10800530 	cmpltui	r2,r2,20
  81555c:	1000021e 	bne	r2,zero,815568 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  815560:	00800a84 	movi	r2,42
  815564:	00006406 	br	8156f8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815568:	0005303a 	rdctl	r2,status
  81556c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815570:	e0fffe17 	ldw	r3,-8(fp)
  815574:	00bfff84 	movi	r2,-2
  815578:	1884703a 	and	r2,r3,r2
  81557c:	1001703a 	wrctl	status,r2
  
  return context;
  815580:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815584:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  815588:	e0ffff03 	ldbu	r3,-4(fp)
  81558c:	008020b4 	movhi	r2,130
  815590:	1098f804 	addi	r2,r2,25568
  815594:	18c7883a 	add	r3,r3,r3
  815598:	18c7883a 	add	r3,r3,r3
  81559c:	10c5883a 	add	r2,r2,r3
  8155a0:	10800017 	ldw	r2,0(r2)
  8155a4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  8155a8:	e0bff817 	ldw	r2,-32(fp)
  8155ac:	1000061e 	bne	r2,zero,8155c8 <OSTaskResume+0x90>
  8155b0:	e0bff617 	ldw	r2,-40(fp)
  8155b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8155b8:	e0bff717 	ldw	r2,-36(fp)
  8155bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  8155c0:	00801184 	movi	r2,70
  8155c4:	00004c06 	br	8156f8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  8155c8:	e0bff817 	ldw	r2,-32(fp)
  8155cc:	10800058 	cmpnei	r2,r2,1
  8155d0:	1000061e 	bne	r2,zero,8155ec <OSTaskResume+0xb4>
  8155d4:	e0bff617 	ldw	r2,-40(fp)
  8155d8:	e0bff915 	stw	r2,-28(fp)
  8155dc:	e0bff917 	ldw	r2,-28(fp)
  8155e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8155e4:	008010c4 	movi	r2,67
  8155e8:	00004306 	br	8156f8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8155ec:	e0bff817 	ldw	r2,-32(fp)
  8155f0:	10800c03 	ldbu	r2,48(r2)
  8155f4:	10803fcc 	andi	r2,r2,255
  8155f8:	1080020c 	andi	r2,r2,8
  8155fc:	10003926 	beq	r2,zero,8156e4 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  815600:	e0bff817 	ldw	r2,-32(fp)
  815604:	10c00c03 	ldbu	r3,48(r2)
  815608:	00bffdc4 	movi	r2,-9
  81560c:	1884703a 	and	r2,r3,r2
  815610:	1007883a 	mov	r3,r2
  815614:	e0bff817 	ldw	r2,-32(fp)
  815618:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  81561c:	e0bff817 	ldw	r2,-32(fp)
  815620:	10800c03 	ldbu	r2,48(r2)
  815624:	10803fcc 	andi	r2,r2,255
  815628:	1000281e 	bne	r2,zero,8156cc <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  81562c:	e0bff817 	ldw	r2,-32(fp)
  815630:	10800b8b 	ldhu	r2,46(r2)
  815634:	10bfffcc 	andi	r2,r2,65535
  815638:	10001f1e 	bne	r2,zero,8156b8 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  81563c:	e0bff817 	ldw	r2,-32(fp)
  815640:	10c00d83 	ldbu	r3,54(r2)
  815644:	d0a07103 	ldbu	r2,-32316(gp)
  815648:	1884b03a 	or	r2,r3,r2
  81564c:	d0a07105 	stb	r2,-32316(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  815650:	e0bff817 	ldw	r2,-32(fp)
  815654:	10800d03 	ldbu	r2,52(r2)
  815658:	10c03fcc 	andi	r3,r2,255
  81565c:	e0bff817 	ldw	r2,-32(fp)
  815660:	10800d03 	ldbu	r2,52(r2)
  815664:	11003fcc 	andi	r4,r2,255
  815668:	d0a07144 	addi	r2,gp,-32315
  81566c:	2085883a 	add	r2,r4,r2
  815670:	11000003 	ldbu	r4,0(r2)
  815674:	e0bff817 	ldw	r2,-32(fp)
  815678:	10800d43 	ldbu	r2,53(r2)
  81567c:	2084b03a 	or	r2,r4,r2
  815680:	1009883a 	mov	r4,r2
  815684:	d0a07144 	addi	r2,gp,-32315
  815688:	1885883a 	add	r2,r3,r2
  81568c:	11000005 	stb	r4,0(r2)
  815690:	e0bff617 	ldw	r2,-40(fp)
  815694:	e0bffa15 	stw	r2,-24(fp)
  815698:	e0bffa17 	ldw	r2,-24(fp)
  81569c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  8156a0:	d0a06543 	ldbu	r2,-32363(gp)
  8156a4:	10803fcc 	andi	r2,r2,255
  8156a8:	10800058 	cmpnei	r2,r2,1
  8156ac:	10000b1e 	bne	r2,zero,8156dc <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  8156b0:	081029c0 	call	81029c <OS_Sched>
  8156b4:	00000906 	br	8156dc <OSTaskResume+0x1a4>
  8156b8:	e0bff617 	ldw	r2,-40(fp)
  8156bc:	e0bffb15 	stw	r2,-20(fp)
  8156c0:	e0bffb17 	ldw	r2,-20(fp)
  8156c4:	1001703a 	wrctl	status,r2
  8156c8:	00000406 	br	8156dc <OSTaskResume+0x1a4>
  8156cc:	e0bff617 	ldw	r2,-40(fp)
  8156d0:	e0bffc15 	stw	r2,-16(fp)
  8156d4:	e0bffc17 	ldw	r2,-16(fp)
  8156d8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8156dc:	0005883a 	mov	r2,zero
  8156e0:	00000506 	br	8156f8 <OSTaskResume+0x1c0>
  8156e4:	e0bff617 	ldw	r2,-40(fp)
  8156e8:	e0bffd15 	stw	r2,-12(fp)
  8156ec:	e0bffd17 	ldw	r2,-12(fp)
  8156f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8156f4:	00801104 	movi	r2,68
}
  8156f8:	e037883a 	mov	sp,fp
  8156fc:	dfc00117 	ldw	ra,4(sp)
  815700:	df000017 	ldw	fp,0(sp)
  815704:	dec00204 	addi	sp,sp,8
  815708:	f800283a 	ret

0081570c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  81570c:	defff304 	addi	sp,sp,-52
  815710:	df000c15 	stw	fp,48(sp)
  815714:	df000c04 	addi	fp,sp,48
  815718:	2005883a 	mov	r2,r4
  81571c:	e17fff15 	stw	r5,-4(fp)
  815720:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815724:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  815728:	e0bffe03 	ldbu	r2,-8(fp)
  81572c:	10800570 	cmpltui	r2,r2,21
  815730:	1000051e 	bne	r2,zero,815748 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  815734:	e0bffe03 	ldbu	r2,-8(fp)
  815738:	10803fe0 	cmpeqi	r2,r2,255
  81573c:	1000021e 	bne	r2,zero,815748 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  815740:	00800a84 	movi	r2,42
  815744:	00005d06 	br	8158bc <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  815748:	e0bfff17 	ldw	r2,-4(fp)
  81574c:	1000021e 	bne	r2,zero,815758 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  815750:	00800244 	movi	r2,9
  815754:	00005906 	br	8158bc <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  815758:	e0bfff17 	ldw	r2,-4(fp)
  81575c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  815760:	e0bfff17 	ldw	r2,-4(fp)
  815764:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815768:	0005303a 	rdctl	r2,status
  81576c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815770:	e0fffd17 	ldw	r3,-12(fp)
  815774:	00bfff84 	movi	r2,-2
  815778:	1884703a 	and	r2,r3,r2
  81577c:	1001703a 	wrctl	status,r2
  
  return context;
  815780:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  815784:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  815788:	e0bffe03 	ldbu	r2,-8(fp)
  81578c:	10803fd8 	cmpnei	r2,r2,255
  815790:	1000031e 	bne	r2,zero,8157a0 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  815794:	d0a07417 	ldw	r2,-32304(gp)
  815798:	10800c83 	ldbu	r2,50(r2)
  81579c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8157a0:	e0fffe03 	ldbu	r3,-8(fp)
  8157a4:	008020b4 	movhi	r2,130
  8157a8:	1098f804 	addi	r2,r2,25568
  8157ac:	18c7883a 	add	r3,r3,r3
  8157b0:	18c7883a 	add	r3,r3,r3
  8157b4:	10c5883a 	add	r2,r2,r3
  8157b8:	10800017 	ldw	r2,0(r2)
  8157bc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  8157c0:	e0bff817 	ldw	r2,-32(fp)
  8157c4:	1000061e 	bne	r2,zero,8157e0 <OSTaskStkChk+0xd4>
  8157c8:	e0bff617 	ldw	r2,-40(fp)
  8157cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8157d0:	e0bff717 	ldw	r2,-36(fp)
  8157d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8157d8:	008010c4 	movi	r2,67
  8157dc:	00003706 	br	8158bc <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8157e0:	e0bff817 	ldw	r2,-32(fp)
  8157e4:	10800058 	cmpnei	r2,r2,1
  8157e8:	1000061e 	bne	r2,zero,815804 <OSTaskStkChk+0xf8>
  8157ec:	e0bff617 	ldw	r2,-40(fp)
  8157f0:	e0bff915 	stw	r2,-28(fp)
  8157f4:	e0bff917 	ldw	r2,-28(fp)
  8157f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8157fc:	008010c4 	movi	r2,67
  815800:	00002e06 	br	8158bc <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  815804:	e0bff817 	ldw	r2,-32(fp)
  815808:	1080040b 	ldhu	r2,16(r2)
  81580c:	10bfffcc 	andi	r2,r2,65535
  815810:	1080004c 	andi	r2,r2,1
  815814:	1000061e 	bne	r2,zero,815830 <OSTaskStkChk+0x124>
  815818:	e0bff617 	ldw	r2,-40(fp)
  81581c:	e0bffa15 	stw	r2,-24(fp)
  815820:	e0bffa17 	ldw	r2,-24(fp)
  815824:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  815828:	00801144 	movi	r2,69
  81582c:	00002306 	br	8158bc <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  815830:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  815834:	e0bff817 	ldw	r2,-32(fp)
  815838:	10800317 	ldw	r2,12(r2)
  81583c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  815840:	e0bff817 	ldw	r2,-32(fp)
  815844:	10800217 	ldw	r2,8(r2)
  815848:	e0bff415 	stw	r2,-48(fp)
  81584c:	e0bff617 	ldw	r2,-40(fp)
  815850:	e0bffb15 	stw	r2,-20(fp)
  815854:	e0bffb17 	ldw	r2,-20(fp)
  815858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81585c:	00000306 	br	81586c <OSTaskStkChk+0x160>
        nfree++;
  815860:	e0bff517 	ldw	r2,-44(fp)
  815864:	10800044 	addi	r2,r2,1
  815868:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81586c:	e0bff417 	ldw	r2,-48(fp)
  815870:	10c00104 	addi	r3,r2,4
  815874:	e0fff415 	stw	r3,-48(fp)
  815878:	10800017 	ldw	r2,0(r2)
  81587c:	103ff826 	beq	r2,zero,815860 <__alt_mem_epcs_flash_controller_0+0xff80c860>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  815880:	e0bff517 	ldw	r2,-44(fp)
  815884:	1085883a 	add	r2,r2,r2
  815888:	1085883a 	add	r2,r2,r2
  81588c:	1007883a 	mov	r3,r2
  815890:	e0bfff17 	ldw	r2,-4(fp)
  815894:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  815898:	e0fffc17 	ldw	r3,-16(fp)
  81589c:	e0bff517 	ldw	r2,-44(fp)
  8158a0:	1885c83a 	sub	r2,r3,r2
  8158a4:	1085883a 	add	r2,r2,r2
  8158a8:	1085883a 	add	r2,r2,r2
  8158ac:	1007883a 	mov	r3,r2
  8158b0:	e0bfff17 	ldw	r2,-4(fp)
  8158b4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8158b8:	0005883a 	mov	r2,zero
}
  8158bc:	e037883a 	mov	sp,fp
  8158c0:	df000017 	ldw	fp,0(sp)
  8158c4:	dec00104 	addi	sp,sp,4
  8158c8:	f800283a 	ret

008158cc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  8158cc:	defff504 	addi	sp,sp,-44
  8158d0:	dfc00a15 	stw	ra,40(sp)
  8158d4:	df000915 	stw	fp,36(sp)
  8158d8:	df000904 	addi	fp,sp,36
  8158dc:	2005883a 	mov	r2,r4
  8158e0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8158e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  8158e8:	e0bfff03 	ldbu	r2,-4(fp)
  8158ec:	10800518 	cmpnei	r2,r2,20
  8158f0:	1000021e 	bne	r2,zero,8158fc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  8158f4:	008011c4 	movi	r2,71
  8158f8:	00006806 	br	815a9c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  8158fc:	e0bfff03 	ldbu	r2,-4(fp)
  815900:	10800530 	cmpltui	r2,r2,20
  815904:	1000051e 	bne	r2,zero,81591c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  815908:	e0bfff03 	ldbu	r2,-4(fp)
  81590c:	10803fe0 	cmpeqi	r2,r2,255
  815910:	1000021e 	bne	r2,zero,81591c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  815914:	00800a84 	movi	r2,42
  815918:	00006006 	br	815a9c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81591c:	0005303a 	rdctl	r2,status
  815920:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815924:	e0fffe17 	ldw	r3,-8(fp)
  815928:	00bfff84 	movi	r2,-2
  81592c:	1884703a 	and	r2,r3,r2
  815930:	1001703a 	wrctl	status,r2
  
  return context;
  815934:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  815938:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  81593c:	e0bfff03 	ldbu	r2,-4(fp)
  815940:	10803fd8 	cmpnei	r2,r2,255
  815944:	1000061e 	bne	r2,zero,815960 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  815948:	d0a07417 	ldw	r2,-32304(gp)
  81594c:	10800c83 	ldbu	r2,50(r2)
  815950:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  815954:	00800044 	movi	r2,1
  815958:	e0bff705 	stb	r2,-36(fp)
  81595c:	00000906 	br	815984 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  815960:	d0a07417 	ldw	r2,-32304(gp)
  815964:	10800c83 	ldbu	r2,50(r2)
  815968:	10c03fcc 	andi	r3,r2,255
  81596c:	e0bfff03 	ldbu	r2,-4(fp)
  815970:	1880031e 	bne	r3,r2,815980 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  815974:	00800044 	movi	r2,1
  815978:	e0bff705 	stb	r2,-36(fp)
  81597c:	00000106 	br	815984 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  815980:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815984:	e0ffff03 	ldbu	r3,-4(fp)
  815988:	008020b4 	movhi	r2,130
  81598c:	1098f804 	addi	r2,r2,25568
  815990:	18c7883a 	add	r3,r3,r3
  815994:	18c7883a 	add	r3,r3,r3
  815998:	10c5883a 	add	r2,r2,r3
  81599c:	10800017 	ldw	r2,0(r2)
  8159a0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8159a4:	e0bffa17 	ldw	r2,-24(fp)
  8159a8:	1000061e 	bne	r2,zero,8159c4 <OSTaskSuspend+0xf8>
  8159ac:	e0bff817 	ldw	r2,-32(fp)
  8159b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8159b4:	e0bff917 	ldw	r2,-28(fp)
  8159b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  8159bc:	00801204 	movi	r2,72
  8159c0:	00003606 	br	815a9c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  8159c4:	e0bffa17 	ldw	r2,-24(fp)
  8159c8:	10800058 	cmpnei	r2,r2,1
  8159cc:	1000061e 	bne	r2,zero,8159e8 <OSTaskSuspend+0x11c>
  8159d0:	e0bff817 	ldw	r2,-32(fp)
  8159d4:	e0bffb15 	stw	r2,-20(fp)
  8159d8:	e0bffb17 	ldw	r2,-20(fp)
  8159dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8159e0:	008010c4 	movi	r2,67
  8159e4:	00002d06 	br	815a9c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  8159e8:	e0bffa17 	ldw	r2,-24(fp)
  8159ec:	10800d03 	ldbu	r2,52(r2)
  8159f0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  8159f4:	e0fffd03 	ldbu	r3,-12(fp)
  8159f8:	e13ffd03 	ldbu	r4,-12(fp)
  8159fc:	d0a07144 	addi	r2,gp,-32315
  815a00:	2085883a 	add	r2,r4,r2
  815a04:	10800003 	ldbu	r2,0(r2)
  815a08:	1009883a 	mov	r4,r2
  815a0c:	e0bffa17 	ldw	r2,-24(fp)
  815a10:	10800d43 	ldbu	r2,53(r2)
  815a14:	0084303a 	nor	r2,zero,r2
  815a18:	2084703a 	and	r2,r4,r2
  815a1c:	1009883a 	mov	r4,r2
  815a20:	d0a07144 	addi	r2,gp,-32315
  815a24:	1885883a 	add	r2,r3,r2
  815a28:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  815a2c:	e0fffd03 	ldbu	r3,-12(fp)
  815a30:	d0a07144 	addi	r2,gp,-32315
  815a34:	1885883a 	add	r2,r3,r2
  815a38:	10800003 	ldbu	r2,0(r2)
  815a3c:	10803fcc 	andi	r2,r2,255
  815a40:	1000071e 	bne	r2,zero,815a60 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  815a44:	e0bffa17 	ldw	r2,-24(fp)
  815a48:	10800d83 	ldbu	r2,54(r2)
  815a4c:	0084303a 	nor	r2,zero,r2
  815a50:	1007883a 	mov	r3,r2
  815a54:	d0a07103 	ldbu	r2,-32316(gp)
  815a58:	1884703a 	and	r2,r3,r2
  815a5c:	d0a07105 	stb	r2,-32316(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  815a60:	e0bffa17 	ldw	r2,-24(fp)
  815a64:	10800c03 	ldbu	r2,48(r2)
  815a68:	10800214 	ori	r2,r2,8
  815a6c:	1007883a 	mov	r3,r2
  815a70:	e0bffa17 	ldw	r2,-24(fp)
  815a74:	10c00c05 	stb	r3,48(r2)
  815a78:	e0bff817 	ldw	r2,-32(fp)
  815a7c:	e0bffc15 	stw	r2,-16(fp)
  815a80:	e0bffc17 	ldw	r2,-16(fp)
  815a84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  815a88:	e0bff703 	ldbu	r2,-36(fp)
  815a8c:	10800058 	cmpnei	r2,r2,1
  815a90:	1000011e 	bne	r2,zero,815a98 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  815a94:	081029c0 	call	81029c <OS_Sched>
    }
    return (OS_ERR_NONE);
  815a98:	0005883a 	mov	r2,zero
}
  815a9c:	e037883a 	mov	sp,fp
  815aa0:	dfc00117 	ldw	ra,4(sp)
  815aa4:	df000017 	ldw	fp,0(sp)
  815aa8:	dec00204 	addi	sp,sp,8
  815aac:	f800283a 	ret

00815ab0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  815ab0:	defff604 	addi	sp,sp,-40
  815ab4:	dfc00915 	stw	ra,36(sp)
  815ab8:	df000815 	stw	fp,32(sp)
  815abc:	df000804 	addi	fp,sp,32
  815ac0:	2005883a 	mov	r2,r4
  815ac4:	e17fff15 	stw	r5,-4(fp)
  815ac8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815acc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  815ad0:	e0bffe03 	ldbu	r2,-8(fp)
  815ad4:	10800570 	cmpltui	r2,r2,21
  815ad8:	1000051e 	bne	r2,zero,815af0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  815adc:	e0bffe03 	ldbu	r2,-8(fp)
  815ae0:	10803fe0 	cmpeqi	r2,r2,255
  815ae4:	1000021e 	bne	r2,zero,815af0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  815ae8:	00800a84 	movi	r2,42
  815aec:	00003406 	br	815bc0 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  815af0:	e0bfff17 	ldw	r2,-4(fp)
  815af4:	1000021e 	bne	r2,zero,815b00 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  815af8:	00800244 	movi	r2,9
  815afc:	00003006 	br	815bc0 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b00:	0005303a 	rdctl	r2,status
  815b04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b08:	e0fffd17 	ldw	r3,-12(fp)
  815b0c:	00bfff84 	movi	r2,-2
  815b10:	1884703a 	and	r2,r3,r2
  815b14:	1001703a 	wrctl	status,r2
  
  return context;
  815b18:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815b1c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  815b20:	e0bffe03 	ldbu	r2,-8(fp)
  815b24:	10803fd8 	cmpnei	r2,r2,255
  815b28:	1000031e 	bne	r2,zero,815b38 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  815b2c:	d0a07417 	ldw	r2,-32304(gp)
  815b30:	10800c83 	ldbu	r2,50(r2)
  815b34:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815b38:	e0fffe03 	ldbu	r3,-8(fp)
  815b3c:	008020b4 	movhi	r2,130
  815b40:	1098f804 	addi	r2,r2,25568
  815b44:	18c7883a 	add	r3,r3,r3
  815b48:	18c7883a 	add	r3,r3,r3
  815b4c:	10c5883a 	add	r2,r2,r3
  815b50:	10800017 	ldw	r2,0(r2)
  815b54:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  815b58:	e0bffa17 	ldw	r2,-24(fp)
  815b5c:	1000061e 	bne	r2,zero,815b78 <OSTaskQuery+0xc8>
  815b60:	e0bff817 	ldw	r2,-32(fp)
  815b64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815b68:	e0bff917 	ldw	r2,-28(fp)
  815b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  815b70:	00800a44 	movi	r2,41
  815b74:	00001206 	br	815bc0 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  815b78:	e0bffa17 	ldw	r2,-24(fp)
  815b7c:	10800058 	cmpnei	r2,r2,1
  815b80:	1000061e 	bne	r2,zero,815b9c <OSTaskQuery+0xec>
  815b84:	e0bff817 	ldw	r2,-32(fp)
  815b88:	e0bffb15 	stw	r2,-20(fp)
  815b8c:	e0bffb17 	ldw	r2,-20(fp)
  815b90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815b94:	008010c4 	movi	r2,67
  815b98:	00000906 	br	815bc0 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  815b9c:	01801b04 	movi	r6,108
  815ba0:	e17ffa17 	ldw	r5,-24(fp)
  815ba4:	e13fff17 	ldw	r4,-4(fp)
  815ba8:	08102340 	call	810234 <OS_MemCopy>
  815bac:	e0bff817 	ldw	r2,-32(fp)
  815bb0:	e0bffc15 	stw	r2,-16(fp)
  815bb4:	e0bffc17 	ldw	r2,-16(fp)
  815bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815bbc:	0005883a 	mov	r2,zero
}
  815bc0:	e037883a 	mov	sp,fp
  815bc4:	dfc00117 	ldw	ra,4(sp)
  815bc8:	df000017 	ldw	fp,0(sp)
  815bcc:	dec00204 	addi	sp,sp,8
  815bd0:	f800283a 	ret

00815bd4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  815bd4:	defffc04 	addi	sp,sp,-16
  815bd8:	df000315 	stw	fp,12(sp)
  815bdc:	df000304 	addi	fp,sp,12
  815be0:	e13ffd15 	stw	r4,-12(fp)
  815be4:	e17ffe15 	stw	r5,-8(fp)
  815be8:	3005883a 	mov	r2,r6
  815bec:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  815bf0:	e0bfff0b 	ldhu	r2,-4(fp)
  815bf4:	1080004c 	andi	r2,r2,1
  815bf8:	10000d26 	beq	r2,zero,815c30 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  815bfc:	e0bfff0b 	ldhu	r2,-4(fp)
  815c00:	1080008c 	andi	r2,r2,2
  815c04:	10000a26 	beq	r2,zero,815c30 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  815c08:	00000706 	br	815c28 <OS_TaskStkClr+0x54>
                size--;
  815c0c:	e0bffe17 	ldw	r2,-8(fp)
  815c10:	10bfffc4 	addi	r2,r2,-1
  815c14:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  815c18:	e0bffd17 	ldw	r2,-12(fp)
  815c1c:	10c00104 	addi	r3,r2,4
  815c20:	e0fffd15 	stw	r3,-12(fp)
  815c24:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  815c28:	e0bffe17 	ldw	r2,-8(fp)
  815c2c:	103ff71e 	bne	r2,zero,815c0c <__alt_mem_epcs_flash_controller_0+0xff80cc0c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  815c30:	0001883a 	nop
  815c34:	e037883a 	mov	sp,fp
  815c38:	df000017 	ldw	fp,0(sp)
  815c3c:	dec00104 	addi	sp,sp,4
  815c40:	f800283a 	ret

00815c44 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  815c44:	defff904 	addi	sp,sp,-28
  815c48:	dfc00615 	stw	ra,24(sp)
  815c4c:	df000515 	stw	fp,20(sp)
  815c50:	df000504 	addi	fp,sp,20
  815c54:	2005883a 	mov	r2,r4
  815c58:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815c5c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  815c60:	d0a07303 	ldbu	r2,-32308(gp)
  815c64:	10803fcc 	andi	r2,r2,255
  815c68:	1000311e 	bne	r2,zero,815d30 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  815c6c:	e0bfff0b 	ldhu	r2,-4(fp)
  815c70:	10003026 	beq	r2,zero,815d34 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c74:	0005303a 	rdctl	r2,status
  815c78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c7c:	e0fffe17 	ldw	r3,-8(fp)
  815c80:	00bfff84 	movi	r2,-2
  815c84:	1884703a 	and	r2,r3,r2
  815c88:	1001703a 	wrctl	status,r2
  
  return context;
  815c8c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  815c90:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  815c94:	d0a07417 	ldw	r2,-32304(gp)
  815c98:	10800d03 	ldbu	r2,52(r2)
  815c9c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  815ca0:	e0fffd03 	ldbu	r3,-12(fp)
  815ca4:	e13ffd03 	ldbu	r4,-12(fp)
  815ca8:	d0a07144 	addi	r2,gp,-32315
  815cac:	2085883a 	add	r2,r4,r2
  815cb0:	10800003 	ldbu	r2,0(r2)
  815cb4:	1009883a 	mov	r4,r2
  815cb8:	d0a07417 	ldw	r2,-32304(gp)
  815cbc:	10800d43 	ldbu	r2,53(r2)
  815cc0:	0084303a 	nor	r2,zero,r2
  815cc4:	2084703a 	and	r2,r4,r2
  815cc8:	1009883a 	mov	r4,r2
  815ccc:	d0a07144 	addi	r2,gp,-32315
  815cd0:	1885883a 	add	r2,r3,r2
  815cd4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  815cd8:	e0fffd03 	ldbu	r3,-12(fp)
  815cdc:	d0a07144 	addi	r2,gp,-32315
  815ce0:	1885883a 	add	r2,r3,r2
  815ce4:	10800003 	ldbu	r2,0(r2)
  815ce8:	10803fcc 	andi	r2,r2,255
  815cec:	1000071e 	bne	r2,zero,815d0c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  815cf0:	d0a07417 	ldw	r2,-32304(gp)
  815cf4:	10800d83 	ldbu	r2,54(r2)
  815cf8:	0084303a 	nor	r2,zero,r2
  815cfc:	1007883a 	mov	r3,r2
  815d00:	d0a07103 	ldbu	r2,-32316(gp)
  815d04:	1884703a 	and	r2,r3,r2
  815d08:	d0a07105 	stb	r2,-32316(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  815d0c:	d0a07417 	ldw	r2,-32304(gp)
  815d10:	e0ffff0b 	ldhu	r3,-4(fp)
  815d14:	10c00b8d 	sth	r3,46(r2)
  815d18:	e0bffb17 	ldw	r2,-20(fp)
  815d1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815d20:	e0bffc17 	ldw	r2,-16(fp)
  815d24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  815d28:	081029c0 	call	81029c <OS_Sched>
  815d2c:	00000106 	br	815d34 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  815d30:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  815d34:	e037883a 	mov	sp,fp
  815d38:	dfc00117 	ldw	ra,4(sp)
  815d3c:	df000017 	ldw	fp,0(sp)
  815d40:	dec00204 	addi	sp,sp,8
  815d44:	f800283a 	ret

00815d48 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  815d48:	defff704 	addi	sp,sp,-36
  815d4c:	dfc00815 	stw	ra,32(sp)
  815d50:	df000715 	stw	fp,28(sp)
  815d54:	dc000615 	stw	r16,24(sp)
  815d58:	df000704 	addi	fp,sp,28
  815d5c:	2011883a 	mov	r8,r4
  815d60:	2809883a 	mov	r4,r5
  815d64:	3007883a 	mov	r3,r6
  815d68:	3805883a 	mov	r2,r7
  815d6c:	e23ffb05 	stb	r8,-20(fp)
  815d70:	e13ffc05 	stb	r4,-16(fp)
  815d74:	e0fffd05 	stb	r3,-12(fp)
  815d78:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  815d7c:	d0a07303 	ldbu	r2,-32308(gp)
  815d80:	10803fcc 	andi	r2,r2,255
  815d84:	10000226 	beq	r2,zero,815d90 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  815d88:	00801544 	movi	r2,85
  815d8c:	00004706 	br	815eac <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  815d90:	e0bffb03 	ldbu	r2,-20(fp)
  815d94:	1000081e 	bne	r2,zero,815db8 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  815d98:	e0bffc03 	ldbu	r2,-16(fp)
  815d9c:	1000061e 	bne	r2,zero,815db8 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  815da0:	e0bffd03 	ldbu	r2,-12(fp)
  815da4:	1000041e 	bne	r2,zero,815db8 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  815da8:	e0bffe0b 	ldhu	r2,-8(fp)
  815dac:	1000021e 	bne	r2,zero,815db8 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  815db0:	00801504 	movi	r2,84
  815db4:	00003d06 	br	815eac <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  815db8:	e0bffc03 	ldbu	r2,-16(fp)
  815dbc:	10800f30 	cmpltui	r2,r2,60
  815dc0:	1000021e 	bne	r2,zero,815dcc <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  815dc4:	00801444 	movi	r2,81
  815dc8:	00003806 	br	815eac <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  815dcc:	e0bffd03 	ldbu	r2,-12(fp)
  815dd0:	10800f30 	cmpltui	r2,r2,60
  815dd4:	1000021e 	bne	r2,zero,815de0 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  815dd8:	00801484 	movi	r2,82
  815ddc:	00003306 	br	815eac <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  815de0:	e0bffe0b 	ldhu	r2,-8(fp)
  815de4:	1080fa30 	cmpltui	r2,r2,1000
  815de8:	1000021e 	bne	r2,zero,815df4 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  815dec:	008014c4 	movi	r2,83
  815df0:	00002e06 	br	815eac <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  815df4:	e0bffb03 	ldbu	r2,-20(fp)
  815df8:	01438404 	movi	r5,3600
  815dfc:	1009883a 	mov	r4,r2
  815e00:	080b2400 	call	80b240 <__mulsi3>
  815e04:	1021883a 	mov	r16,r2
  815e08:	e0bffc03 	ldbu	r2,-16(fp)
  815e0c:	01400f04 	movi	r5,60
  815e10:	1009883a 	mov	r4,r2
  815e14:	080b2400 	call	80b240 <__mulsi3>
  815e18:	8087883a 	add	r3,r16,r2
  815e1c:	e0bffd03 	ldbu	r2,-12(fp)
  815e20:	1885883a 	add	r2,r3,r2
  815e24:	0140fa04 	movi	r5,1000
  815e28:	1009883a 	mov	r4,r2
  815e2c:	080b2400 	call	80b240 <__mulsi3>
  815e30:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  815e34:	e0bffe0b 	ldhu	r2,-8(fp)
  815e38:	0140fa04 	movi	r5,1000
  815e3c:	1009883a 	mov	r4,r2
  815e40:	080b2400 	call	80b240 <__mulsi3>
  815e44:	0140fa04 	movi	r5,1000
  815e48:	1009883a 	mov	r4,r2
  815e4c:	080b1840 	call	80b184 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  815e50:	8085883a 	add	r2,r16,r2
  815e54:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  815e58:	e0bffa17 	ldw	r2,-24(fp)
  815e5c:	1004d43a 	srli	r2,r2,16
  815e60:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  815e64:	e0bffa17 	ldw	r2,-24(fp)
  815e68:	10bfffcc 	andi	r2,r2,65535
  815e6c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  815e70:	e0bffa17 	ldw	r2,-24(fp)
  815e74:	10bfffcc 	andi	r2,r2,65535
  815e78:	1009883a 	mov	r4,r2
  815e7c:	0815c440 	call	815c44 <OSTimeDly>
    while (loops > 0) {
  815e80:	00000706 	br	815ea0 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  815e84:	01200014 	movui	r4,32768
  815e88:	0815c440 	call	815c44 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  815e8c:	01200014 	movui	r4,32768
  815e90:	0815c440 	call	815c44 <OSTimeDly>
        loops--;
  815e94:	e0bff90b 	ldhu	r2,-28(fp)
  815e98:	10bfffc4 	addi	r2,r2,-1
  815e9c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  815ea0:	e0bff90b 	ldhu	r2,-28(fp)
  815ea4:	103ff71e 	bne	r2,zero,815e84 <__alt_mem_epcs_flash_controller_0+0xff80ce84>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  815ea8:	0005883a 	mov	r2,zero
}
  815eac:	e6ffff04 	addi	sp,fp,-4
  815eb0:	dfc00217 	ldw	ra,8(sp)
  815eb4:	df000117 	ldw	fp,4(sp)
  815eb8:	dc000017 	ldw	r16,0(sp)
  815ebc:	dec00304 	addi	sp,sp,12
  815ec0:	f800283a 	ret

00815ec4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  815ec4:	defff504 	addi	sp,sp,-44
  815ec8:	dfc00a15 	stw	ra,40(sp)
  815ecc:	df000915 	stw	fp,36(sp)
  815ed0:	df000904 	addi	fp,sp,36
  815ed4:	2005883a 	mov	r2,r4
  815ed8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  815edc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  815ee0:	e0bfff03 	ldbu	r2,-4(fp)
  815ee4:	10800530 	cmpltui	r2,r2,20
  815ee8:	1000021e 	bne	r2,zero,815ef4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  815eec:	00800a84 	movi	r2,42
  815ef0:	00006406 	br	816084 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815ef4:	0005303a 	rdctl	r2,status
  815ef8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815efc:	e0fffe17 	ldw	r3,-8(fp)
  815f00:	00bfff84 	movi	r2,-2
  815f04:	1884703a 	and	r2,r3,r2
  815f08:	1001703a 	wrctl	status,r2
  
  return context;
  815f0c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  815f10:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  815f14:	e0ffff03 	ldbu	r3,-4(fp)
  815f18:	008020b4 	movhi	r2,130
  815f1c:	1098f804 	addi	r2,r2,25568
  815f20:	18c7883a 	add	r3,r3,r3
  815f24:	18c7883a 	add	r3,r3,r3
  815f28:	10c5883a 	add	r2,r2,r3
  815f2c:	10800017 	ldw	r2,0(r2)
  815f30:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  815f34:	e0bff917 	ldw	r2,-28(fp)
  815f38:	1000061e 	bne	r2,zero,815f54 <OSTimeDlyResume+0x90>
  815f3c:	e0bff717 	ldw	r2,-36(fp)
  815f40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815f44:	e0bff817 	ldw	r2,-32(fp)
  815f48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815f4c:	008010c4 	movi	r2,67
  815f50:	00004c06 	br	816084 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  815f54:	e0bff917 	ldw	r2,-28(fp)
  815f58:	10800058 	cmpnei	r2,r2,1
  815f5c:	1000061e 	bne	r2,zero,815f78 <OSTimeDlyResume+0xb4>
  815f60:	e0bff717 	ldw	r2,-36(fp)
  815f64:	e0bffa15 	stw	r2,-24(fp)
  815f68:	e0bffa17 	ldw	r2,-24(fp)
  815f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815f70:	008010c4 	movi	r2,67
  815f74:	00004306 	br	816084 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  815f78:	e0bff917 	ldw	r2,-28(fp)
  815f7c:	10800b8b 	ldhu	r2,46(r2)
  815f80:	10bfffcc 	andi	r2,r2,65535
  815f84:	1000061e 	bne	r2,zero,815fa0 <OSTimeDlyResume+0xdc>
  815f88:	e0bff717 	ldw	r2,-36(fp)
  815f8c:	e0bffb15 	stw	r2,-20(fp)
  815f90:	e0bffb17 	ldw	r2,-20(fp)
  815f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  815f98:	00801404 	movi	r2,80
  815f9c:	00003906 	br	816084 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  815fa0:	e0bff917 	ldw	r2,-28(fp)
  815fa4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  815fa8:	e0bff917 	ldw	r2,-28(fp)
  815fac:	10800c03 	ldbu	r2,48(r2)
  815fb0:	10803fcc 	andi	r2,r2,255
  815fb4:	10800dcc 	andi	r2,r2,55
  815fb8:	10000b26 	beq	r2,zero,815fe8 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  815fbc:	e0bff917 	ldw	r2,-28(fp)
  815fc0:	10c00c03 	ldbu	r3,48(r2)
  815fc4:	00bff204 	movi	r2,-56
  815fc8:	1884703a 	and	r2,r3,r2
  815fcc:	1007883a 	mov	r3,r2
  815fd0:	e0bff917 	ldw	r2,-28(fp)
  815fd4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  815fd8:	e0bff917 	ldw	r2,-28(fp)
  815fdc:	00c00044 	movi	r3,1
  815fe0:	10c00c45 	stb	r3,49(r2)
  815fe4:	00000206 	br	815ff0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  815fe8:	e0bff917 	ldw	r2,-28(fp)
  815fec:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  815ff0:	e0bff917 	ldw	r2,-28(fp)
  815ff4:	10800c03 	ldbu	r2,48(r2)
  815ff8:	10803fcc 	andi	r2,r2,255
  815ffc:	1080020c 	andi	r2,r2,8
  816000:	10001b1e 	bne	r2,zero,816070 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  816004:	e0bff917 	ldw	r2,-28(fp)
  816008:	10c00d83 	ldbu	r3,54(r2)
  81600c:	d0a07103 	ldbu	r2,-32316(gp)
  816010:	1884b03a 	or	r2,r3,r2
  816014:	d0a07105 	stb	r2,-32316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  816018:	e0bff917 	ldw	r2,-28(fp)
  81601c:	10800d03 	ldbu	r2,52(r2)
  816020:	10c03fcc 	andi	r3,r2,255
  816024:	e0bff917 	ldw	r2,-28(fp)
  816028:	10800d03 	ldbu	r2,52(r2)
  81602c:	11003fcc 	andi	r4,r2,255
  816030:	d0a07144 	addi	r2,gp,-32315
  816034:	2085883a 	add	r2,r4,r2
  816038:	11000003 	ldbu	r4,0(r2)
  81603c:	e0bff917 	ldw	r2,-28(fp)
  816040:	10800d43 	ldbu	r2,53(r2)
  816044:	2084b03a 	or	r2,r4,r2
  816048:	1009883a 	mov	r4,r2
  81604c:	d0a07144 	addi	r2,gp,-32315
  816050:	1885883a 	add	r2,r3,r2
  816054:	11000005 	stb	r4,0(r2)
  816058:	e0bff717 	ldw	r2,-36(fp)
  81605c:	e0bffc15 	stw	r2,-16(fp)
  816060:	e0bffc17 	ldw	r2,-16(fp)
  816064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  816068:	081029c0 	call	81029c <OS_Sched>
  81606c:	00000406 	br	816080 <OSTimeDlyResume+0x1bc>
  816070:	e0bff717 	ldw	r2,-36(fp)
  816074:	e0bffd15 	stw	r2,-12(fp)
  816078:	e0bffd17 	ldw	r2,-12(fp)
  81607c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  816080:	0005883a 	mov	r2,zero
}
  816084:	e037883a 	mov	sp,fp
  816088:	dfc00117 	ldw	ra,4(sp)
  81608c:	df000017 	ldw	fp,0(sp)
  816090:	dec00204 	addi	sp,sp,8
  816094:	f800283a 	ret

00816098 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  816098:	defffb04 	addi	sp,sp,-20
  81609c:	df000415 	stw	fp,16(sp)
  8160a0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8160a4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8160a8:	0005303a 	rdctl	r2,status
  8160ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8160b0:	e0fffe17 	ldw	r3,-8(fp)
  8160b4:	00bfff84 	movi	r2,-2
  8160b8:	1884703a 	and	r2,r3,r2
  8160bc:	1001703a 	wrctl	status,r2
  
  return context;
  8160c0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  8160c4:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  8160c8:	d0a07517 	ldw	r2,-32300(gp)
  8160cc:	e0bffd15 	stw	r2,-12(fp)
  8160d0:	e0bffc17 	ldw	r2,-16(fp)
  8160d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8160d8:	e0bfff17 	ldw	r2,-4(fp)
  8160dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  8160e0:	e0bffd17 	ldw	r2,-12(fp)
}
  8160e4:	e037883a 	mov	sp,fp
  8160e8:	df000017 	ldw	fp,0(sp)
  8160ec:	dec00104 	addi	sp,sp,4
  8160f0:	f800283a 	ret

008160f4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8160f4:	defffb04 	addi	sp,sp,-20
  8160f8:	df000415 	stw	fp,16(sp)
  8160fc:	df000404 	addi	fp,sp,16
  816100:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816104:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816108:	0005303a 	rdctl	r2,status
  81610c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816110:	e0fffd17 	ldw	r3,-12(fp)
  816114:	00bfff84 	movi	r2,-2
  816118:	1884703a 	and	r2,r3,r2
  81611c:	1001703a 	wrctl	status,r2
  
  return context;
  816120:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  816124:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  816128:	e0bfff17 	ldw	r2,-4(fp)
  81612c:	d0a07515 	stw	r2,-32300(gp)
  816130:	e0bffc17 	ldw	r2,-16(fp)
  816134:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816138:	e0bffe17 	ldw	r2,-8(fp)
  81613c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  816140:	0001883a 	nop
  816144:	e037883a 	mov	sp,fp
  816148:	df000017 	ldw	fp,0(sp)
  81614c:	dec00104 	addi	sp,sp,4
  816150:	f800283a 	ret

00816154 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  816154:	defffd04 	addi	sp,sp,-12
  816158:	dfc00215 	stw	ra,8(sp)
  81615c:	df000115 	stw	fp,4(sp)
  816160:	df000104 	addi	fp,sp,4
  816164:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  816168:	d1602404 	addi	r5,gp,-32624
  81616c:	e13fff17 	ldw	r4,-4(fp)
  816170:	0818e840 	call	818e84 <alt_dev_llist_insert>
}
  816174:	e037883a 	mov	sp,fp
  816178:	dfc00117 	ldw	ra,4(sp)
  81617c:	df000017 	ldw	fp,0(sp)
  816180:	dec00204 	addi	sp,sp,8
  816184:	f800283a 	ret

00816188 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  816188:	defffd04 	addi	sp,sp,-12
  81618c:	dfc00215 	stw	ra,8(sp)
  816190:	df000115 	stw	fp,4(sp)
  816194:	df000104 	addi	fp,sp,4
  816198:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  81619c:	08196c80 	call	8196c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8161a0:	00800044 	movi	r2,1
  8161a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8161a8:	0001883a 	nop
  8161ac:	e037883a 	mov	sp,fp
  8161b0:	dfc00117 	ldw	ra,4(sp)
  8161b4:	df000017 	ldw	fp,0(sp)
  8161b8:	dec00204 	addi	sp,sp,8
  8161bc:	f800283a 	ret

008161c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8161c0:	defffe04 	addi	sp,sp,-8
  8161c4:	dfc00115 	stw	ra,4(sp)
  8161c8:	df000015 	stw	fp,0(sp)
  8161cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8161d0:	01c0fa04 	movi	r7,1000
  8161d4:	01800144 	movi	r6,5
  8161d8:	000b883a 	mov	r5,zero
  8161dc:	01004074 	movhi	r4,257
  8161e0:	21280004 	addi	r4,r4,-24576
  8161e4:	0817b100 	call	817b10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  8161e8:	010020b4 	movhi	r4,130
  8161ec:	212d0204 	addi	r4,r4,-19448
  8161f0:	08162a40 	call	8162a4 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8161f4:	000d883a 	mov	r6,zero
  8161f8:	000b883a 	mov	r5,zero
  8161fc:	010020b4 	movhi	r4,130
  816200:	212d3f04 	addi	r4,r4,-19204
  816204:	0816ed00 	call	816ed0 <altera_avalon_jtag_uart_init>
  816208:	010020b4 	movhi	r4,130
  81620c:	212d3504 	addi	r4,r4,-19244
  816210:	08161540 	call	816154 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  816214:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( CAM_UART, cam_uart);
  816218:	01800044 	movi	r6,1
  81621c:	000b883a 	mov	r5,zero
  816220:	010020b4 	movhi	r4,130
  816224:	21315a04 	addi	r4,r4,-15000
  816228:	0817c9c0 	call	817c9c <altera_avalon_uart_init>
  81622c:	010020b4 	movhi	r4,130
  816230:	21315004 	addi	r4,r4,-15040
  816234:	08161540 	call	816154 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  816238:	01800084 	movi	r6,2
  81623c:	000b883a 	mov	r5,zero
  816240:	010020b4 	movhi	r4,130
  816244:	21318e04 	addi	r4,r4,-14792
  816248:	0817c9c0 	call	817c9c <altera_avalon_uart_init>
  81624c:	010020b4 	movhi	r4,130
  816250:	21318404 	addi	r4,r4,-14832
  816254:	08161540 	call	816154 <alt_dev_reg>
}
  816258:	0001883a 	nop
  81625c:	e037883a 	mov	sp,fp
  816260:	dfc00117 	ldw	ra,4(sp)
  816264:	df000017 	ldw	fp,0(sp)
  816268:	dec00204 	addi	sp,sp,8
  81626c:	f800283a 	ret

00816270 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  816270:	defffd04 	addi	sp,sp,-12
  816274:	dfc00215 	stw	ra,8(sp)
  816278:	df000115 	stw	fp,4(sp)
  81627c:	df000104 	addi	fp,sp,4
  816280:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  816284:	d1604904 	addi	r5,gp,-32476
  816288:	e13fff17 	ldw	r4,-4(fp)
  81628c:	0818e840 	call	818e84 <alt_dev_llist_insert>
}
  816290:	e037883a 	mov	sp,fp
  816294:	dfc00117 	ldw	ra,4(sp)
  816298:	df000017 	ldw	fp,0(sp)
  81629c:	dec00204 	addi	sp,sp,8
  8162a0:	f800283a 	ret

008162a4 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  8162a4:	defffc04 	addi	sp,sp,-16
  8162a8:	dfc00315 	stw	ra,12(sp)
  8162ac:	df000215 	stw	fp,8(sp)
  8162b0:	df000204 	addi	fp,sp,8
  8162b4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  8162b8:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  8162bc:	e13fff17 	ldw	r4,-4(fp)
  8162c0:	08162f80 	call	8162f8 <alt_epcs_flash_query>
  8162c4:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  8162c8:	e0bffe17 	ldw	r2,-8(fp)
  8162cc:	1000041e 	bne	r2,zero,8162e0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  8162d0:	e0bfff17 	ldw	r2,-4(fp)
  8162d4:	1009883a 	mov	r4,r2
  8162d8:	08162700 	call	816270 <alt_flash_device_register>
  8162dc:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  8162e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8162e4:	e037883a 	mov	sp,fp
  8162e8:	dfc00117 	ldw	ra,4(sp)
  8162ec:	df000017 	ldw	fp,0(sp)
  8162f0:	dec00204 	addi	sp,sp,8
  8162f4:	f800283a 	ret

008162f8 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  8162f8:	defffc04 	addi	sp,sp,-16
  8162fc:	dfc00315 	stw	ra,12(sp)
  816300:	df000215 	stw	fp,8(sp)
  816304:	df000204 	addi	fp,sp,8
  816308:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  81630c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  816310:	e0bfff17 	ldw	r2,-4(fp)
  816314:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  816318:	e0bfff17 	ldw	r2,-4(fp)
  81631c:	10802e17 	ldw	r2,184(r2)
  816320:	1009883a 	mov	r4,r2
  816324:	0818b7c0 	call	818b7c <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  816328:	10c03fcc 	andi	r3,r2,255
  81632c:	e0bfff17 	ldw	r2,-4(fp)
  816330:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  816334:	e0bfff17 	ldw	r2,-4(fp)
  816338:	10803017 	ldw	r2,192(r2)
  81633c:	10800598 	cmpnei	r2,r2,22
  816340:	10000a1e 	bne	r2,zero,81636c <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  816344:	e0bfff17 	ldw	r2,-4(fp)
  816348:	00c02034 	movhi	r3,128
  81634c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  816350:	e0bfff17 	ldw	r2,-4(fp)
  816354:	00c02004 	movi	r3,128
  816358:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  81635c:	e0bfff17 	ldw	r2,-4(fp)
  816360:	00c00074 	movhi	r3,1
  816364:	10c01015 	stw	r3,64(r2)
  816368:	0000ce06 	br	8166a4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  81636c:	e0bfff17 	ldw	r2,-4(fp)
  816370:	10803017 	ldw	r2,192(r2)
  816374:	10800518 	cmpnei	r2,r2,20
  816378:	10000a1e 	bne	r2,zero,8163a4 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  81637c:	e0bfff17 	ldw	r2,-4(fp)
  816380:	00c00834 	movhi	r3,32
  816384:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  816388:	e0bfff17 	ldw	r2,-4(fp)
  81638c:	00c00804 	movi	r3,32
  816390:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  816394:	e0bfff17 	ldw	r2,-4(fp)
  816398:	00c00074 	movhi	r3,1
  81639c:	10c01015 	stw	r3,64(r2)
  8163a0:	0000c006 	br	8166a4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  8163a4:	e0bfff17 	ldw	r2,-4(fp)
  8163a8:	10803017 	ldw	r2,192(r2)
  8163ac:	108004d8 	cmpnei	r2,r2,19
  8163b0:	10000a1e 	bne	r2,zero,8163dc <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  8163b4:	e0bfff17 	ldw	r2,-4(fp)
  8163b8:	00c00434 	movhi	r3,16
  8163bc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  8163c0:	e0bfff17 	ldw	r2,-4(fp)
  8163c4:	00c00404 	movi	r3,16
  8163c8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  8163cc:	e0bfff17 	ldw	r2,-4(fp)
  8163d0:	00c00074 	movhi	r3,1
  8163d4:	10c01015 	stw	r3,64(r2)
  8163d8:	0000b206 	br	8166a4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  8163dc:	e0bfff17 	ldw	r2,-4(fp)
  8163e0:	10803017 	ldw	r2,192(r2)
  8163e4:	10800498 	cmpnei	r2,r2,18
  8163e8:	10000a1e 	bne	r2,zero,816414 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  8163ec:	e0bfff17 	ldw	r2,-4(fp)
  8163f0:	00c00234 	movhi	r3,8
  8163f4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  8163f8:	e0bfff17 	ldw	r2,-4(fp)
  8163fc:	00c00204 	movi	r3,8
  816400:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  816404:	e0bfff17 	ldw	r2,-4(fp)
  816408:	00c00074 	movhi	r3,1
  81640c:	10c01015 	stw	r3,64(r2)
  816410:	0000a406 	br	8166a4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  816414:	e0bfff17 	ldw	r2,-4(fp)
  816418:	10803017 	ldw	r2,192(r2)
  81641c:	10800418 	cmpnei	r2,r2,16
  816420:	10000a1e 	bne	r2,zero,81644c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  816424:	e0bfff17 	ldw	r2,-4(fp)
  816428:	00c000b4 	movhi	r3,2
  81642c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  816430:	e0bfff17 	ldw	r2,-4(fp)
  816434:	00c00104 	movi	r3,4
  816438:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  81643c:	e0bfff17 	ldw	r2,-4(fp)
  816440:	00e00014 	movui	r3,32768
  816444:	10c01015 	stw	r3,64(r2)
  816448:	00009606 	br	8166a4 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  81644c:	e0bfff17 	ldw	r2,-4(fp)
  816450:	10802e17 	ldw	r2,184(r2)
  816454:	1009883a 	mov	r4,r2
  816458:	0818be40 	call	818be4 <epcs_read_device_id>
  81645c:	1007883a 	mov	r3,r2
  816460:	e0bfff17 	ldw	r2,-4(fp)
  816464:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  816468:	e0bfff17 	ldw	r2,-4(fp)
  81646c:	10c03017 	ldw	r3,192(r2)
  816470:	00804034 	movhi	r2,256
  816474:	10bfffc4 	addi	r2,r2,-1
  816478:	1886703a 	and	r3,r3,r2
  81647c:	00800874 	movhi	r2,33
  816480:	10ae8544 	addi	r2,r2,-17899
  816484:	18800a1e 	bne	r3,r2,8164b0 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  816488:	e0bfff17 	ldw	r2,-4(fp)
  81648c:	00c00834 	movhi	r3,32
  816490:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  816494:	e0bfff17 	ldw	r2,-4(fp)
  816498:	00c00804 	movi	r3,32
  81649c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8164a0:	e0bfff17 	ldw	r2,-4(fp)
  8164a4:	00c00074 	movhi	r3,1
  8164a8:	10c01015 	stw	r3,64(r2)
  8164ac:	00007d06 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  8164b0:	e0bfff17 	ldw	r2,-4(fp)
  8164b4:	10c03017 	ldw	r3,192(r2)
  8164b8:	00804034 	movhi	r2,256
  8164bc:	10bfffc4 	addi	r2,r2,-1
  8164c0:	1886703a 	and	r3,r3,r2
  8164c4:	00800874 	movhi	r2,33
  8164c8:	10ae8584 	addi	r2,r2,-17898
  8164cc:	18800a1e 	bne	r3,r2,8164f8 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  8164d0:	e0bfff17 	ldw	r2,-4(fp)
  8164d4:	00c01034 	movhi	r3,64
  8164d8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  8164dc:	e0bfff17 	ldw	r2,-4(fp)
  8164e0:	00c01004 	movi	r3,64
  8164e4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8164e8:	e0bfff17 	ldw	r2,-4(fp)
  8164ec:	00c00074 	movhi	r3,1
  8164f0:	10c01015 	stw	r3,64(r2)
  8164f4:	00006b06 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  8164f8:	e0bfff17 	ldw	r2,-4(fp)
  8164fc:	10c03017 	ldw	r3,192(r2)
  816500:	00804034 	movhi	r2,256
  816504:	10bfffc4 	addi	r2,r2,-1
  816508:	1886703a 	and	r3,r3,r2
  81650c:	00800874 	movhi	r2,33
  816510:	10ae85c4 	addi	r2,r2,-17897
  816514:	18800a1e 	bne	r3,r2,816540 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  816518:	e0bfff17 	ldw	r2,-4(fp)
  81651c:	00c02034 	movhi	r3,128
  816520:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  816524:	e0bfff17 	ldw	r2,-4(fp)
  816528:	00c02004 	movi	r3,128
  81652c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816530:	e0bfff17 	ldw	r2,-4(fp)
  816534:	00c00074 	movhi	r3,1
  816538:	10c01015 	stw	r3,64(r2)
  81653c:	00005906 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  816540:	e0bfff17 	ldw	r2,-4(fp)
  816544:	10c03017 	ldw	r3,192(r2)
  816548:	00804034 	movhi	r2,256
  81654c:	10bfffc4 	addi	r2,r2,-1
  816550:	1886703a 	and	r3,r3,r2
  816554:	00800874 	movhi	r2,33
  816558:	10ae8604 	addi	r2,r2,-17896
  81655c:	18800a1e 	bne	r3,r2,816588 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  816560:	e0bfff17 	ldw	r2,-4(fp)
  816564:	00c04034 	movhi	r3,256
  816568:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  81656c:	e0bfff17 	ldw	r2,-4(fp)
  816570:	00c04004 	movi	r3,256
  816574:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816578:	e0bfff17 	ldw	r2,-4(fp)
  81657c:	00c00074 	movhi	r3,1
  816580:	10c01015 	stw	r3,64(r2)
  816584:	00004706 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  816588:	e0bfff17 	ldw	r2,-4(fp)
  81658c:	10803017 	ldw	r2,192(r2)
  816590:	10803fcc 	andi	r2,r2,255
  816594:	10800618 	cmpnei	r2,r2,24
  816598:	10000a1e 	bne	r2,zero,8165c4 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  81659c:	e0bfff17 	ldw	r2,-4(fp)
  8165a0:	00c04034 	movhi	r3,256
  8165a4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  8165a8:	e0bfff17 	ldw	r2,-4(fp)
  8165ac:	00c01004 	movi	r3,64
  8165b0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  8165b4:	e0bfff17 	ldw	r2,-4(fp)
  8165b8:	00c00134 	movhi	r3,4
  8165bc:	10c01015 	stw	r3,64(r2)
  8165c0:	00003806 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  8165c4:	e0bfff17 	ldw	r2,-4(fp)
  8165c8:	10803017 	ldw	r2,192(r2)
  8165cc:	10803fcc 	andi	r2,r2,255
  8165d0:	10800658 	cmpnei	r2,r2,25
  8165d4:	10000d1e 	bne	r2,zero,81660c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  8165d8:	e0bfff17 	ldw	r2,-4(fp)
  8165dc:	00c08034 	movhi	r3,512
  8165e0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  8165e4:	e0bfff17 	ldw	r2,-4(fp)
  8165e8:	00c08004 	movi	r3,512
  8165ec:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8165f0:	e0bfff17 	ldw	r2,-4(fp)
  8165f4:	00c00074 	movhi	r3,1
  8165f8:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  8165fc:	e0bfff17 	ldw	r2,-4(fp)
  816600:	00c00044 	movi	r3,1
  816604:	10c03215 	stw	r3,200(r2)
  816608:	00002606 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  81660c:	e0bfff17 	ldw	r2,-4(fp)
  816610:	10803017 	ldw	r2,192(r2)
  816614:	10803fcc 	andi	r2,r2,255
  816618:	10800818 	cmpnei	r2,r2,32
  81661c:	10000d1e 	bne	r2,zero,816654 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  816620:	e0bfff17 	ldw	r2,-4(fp)
  816624:	00c10034 	movhi	r3,1024
  816628:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  81662c:	e0bfff17 	ldw	r2,-4(fp)
  816630:	00c10004 	movi	r3,1024
  816634:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816638:	e0bfff17 	ldw	r2,-4(fp)
  81663c:	00c00074 	movhi	r3,1
  816640:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  816644:	e0bfff17 	ldw	r2,-4(fp)
  816648:	00c00044 	movi	r3,1
  81664c:	10c03215 	stw	r3,200(r2)
  816650:	00001406 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  816654:	e0bfff17 	ldw	r2,-4(fp)
  816658:	10803017 	ldw	r2,192(r2)
  81665c:	10803fcc 	andi	r2,r2,255
  816660:	10800858 	cmpnei	r2,r2,33
  816664:	10000d1e 	bne	r2,zero,81669c <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  816668:	e0bfff17 	ldw	r2,-4(fp)
  81666c:	00c20034 	movhi	r3,2048
  816670:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  816674:	e0bfff17 	ldw	r2,-4(fp)
  816678:	00c20004 	movi	r3,2048
  81667c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816680:	e0bfff17 	ldw	r2,-4(fp)
  816684:	00c00074 	movhi	r3,1
  816688:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  81668c:	e0bfff17 	ldw	r2,-4(fp)
  816690:	00c00044 	movi	r3,1
  816694:	10c03215 	stw	r3,200(r2)
  816698:	00000206 	br	8166a4 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  81669c:	00bffb44 	movi	r2,-19
  8166a0:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  8166a4:	e0bfff17 	ldw	r2,-4(fp)
  8166a8:	10800e17 	ldw	r2,56(r2)
  8166ac:	1007883a 	mov	r3,r2
  8166b0:	e0bfff17 	ldw	r2,-4(fp)
  8166b4:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  8166b8:	e0bfff17 	ldw	r2,-4(fp)
  8166bc:	00c00044 	movi	r3,1
  8166c0:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  8166c4:	e0bfff17 	ldw	r2,-4(fp)
  8166c8:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  8166cc:	e0bfff17 	ldw	r2,-4(fp)
  8166d0:	00c04004 	movi	r3,256
  8166d4:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  8166d8:	e0bffe17 	ldw	r2,-8(fp)
}
  8166dc:	e037883a 	mov	sp,fp
  8166e0:	dfc00117 	ldw	ra,4(sp)
  8166e4:	df000017 	ldw	fp,0(sp)
  8166e8:	dec00204 	addi	sp,sp,8
  8166ec:	f800283a 	ret

008166f0 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  8166f0:	deffee04 	addi	sp,sp,-72
  8166f4:	dfc01115 	stw	ra,68(sp)
  8166f8:	df001015 	stw	fp,64(sp)
  8166fc:	df001004 	addi	fp,sp,64
  816700:	e13ffc15 	stw	r4,-16(fp)
  816704:	e17ffd15 	stw	r5,-12(fp)
  816708:	e1bffe15 	stw	r6,-8(fp)
  81670c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  816710:	00800804 	movi	r2,32
  816714:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  816718:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  81671c:	00002706 	br	8167bc <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  816720:	e0fff117 	ldw	r3,-60(fp)
  816724:	e0bfff17 	ldw	r2,-4(fp)
  816728:	1880012e 	bgeu	r3,r2,816730 <alt_epcs_flash_memcmp+0x40>
  81672c:	1805883a 	mov	r2,r3
  816730:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  816734:	e0fffe17 	ldw	r3,-8(fp)
  816738:	e0bff017 	ldw	r2,-64(fp)
  81673c:	1885883a 	add	r2,r3,r2
  816740:	e0fff404 	addi	r3,fp,-48
  816744:	e1fff217 	ldw	r7,-56(fp)
  816748:	180d883a 	mov	r6,r3
  81674c:	100b883a 	mov	r5,r2
  816750:	e13ffc17 	ldw	r4,-16(fp)
  816754:	0816cd40 	call	816cd4 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  816758:	1000020e 	bge	r2,zero,816764 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  81675c:	00bfffc4 	movi	r2,-1
  816760:	00001906 	br	8167c8 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  816764:	e0bff017 	ldw	r2,-64(fp)
  816768:	e0fffd17 	ldw	r3,-12(fp)
  81676c:	1885883a 	add	r2,r3,r2
  816770:	e13ff217 	ldw	r4,-56(fp)
  816774:	e0fff404 	addi	r3,fp,-48
  816778:	200d883a 	mov	r6,r4
  81677c:	180b883a 	mov	r5,r3
  816780:	1009883a 	mov	r4,r2
  816784:	0819f180 	call	819f18 <memcmp>
  816788:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  81678c:	e0bff317 	ldw	r2,-52(fp)
  816790:	10000226 	beq	r2,zero,81679c <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  816794:	e0bff317 	ldw	r2,-52(fp)
  816798:	00000b06 	br	8167c8 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  81679c:	e0bff217 	ldw	r2,-56(fp)
  8167a0:	e0ffff17 	ldw	r3,-4(fp)
  8167a4:	1885c83a 	sub	r2,r3,r2
  8167a8:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  8167ac:	e0fff017 	ldw	r3,-64(fp)
  8167b0:	e0bff217 	ldw	r2,-56(fp)
  8167b4:	1885883a 	add	r2,r3,r2
  8167b8:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  8167bc:	e0bfff17 	ldw	r2,-4(fp)
  8167c0:	103fd71e 	bne	r2,zero,816720 <__alt_mem_epcs_flash_controller_0+0xff80d720>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  8167c4:	0005883a 	mov	r2,zero
}
  8167c8:	e037883a 	mov	sp,fp
  8167cc:	dfc00117 	ldw	ra,4(sp)
  8167d0:	df000017 	ldw	fp,0(sp)
  8167d4:	dec00204 	addi	sp,sp,8
  8167d8:	f800283a 	ret

008167dc <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  8167dc:	defff404 	addi	sp,sp,-48
  8167e0:	dfc00b15 	stw	ra,44(sp)
  8167e4:	df000a15 	stw	fp,40(sp)
  8167e8:	df000a04 	addi	fp,sp,40
  8167ec:	e13ffc15 	stw	r4,-16(fp)
  8167f0:	e17ffd15 	stw	r5,-12(fp)
  8167f4:	e1bffe15 	stw	r6,-8(fp)
  8167f8:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  8167fc:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  816800:	e03ff815 	stw	zero,-32(fp)
  816804:	00008306 	br	816a14 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  816808:	e0fffc17 	ldw	r3,-16(fp)
  81680c:	e0bff817 	ldw	r2,-32(fp)
  816810:	1004913a 	slli	r2,r2,4
  816814:	1885883a 	add	r2,r3,r2
  816818:	10800d04 	addi	r2,r2,52
  81681c:	10800017 	ldw	r2,0(r2)
  816820:	e0fffd17 	ldw	r3,-12(fp)
  816824:	18807816 	blt	r3,r2,816a08 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  816828:	e0fffc17 	ldw	r3,-16(fp)
  81682c:	e0bff817 	ldw	r2,-32(fp)
  816830:	1004913a 	slli	r2,r2,4
  816834:	1885883a 	add	r2,r3,r2
  816838:	10800d04 	addi	r2,r2,52
  81683c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  816840:	e13ffc17 	ldw	r4,-16(fp)
  816844:	e0bff817 	ldw	r2,-32(fp)
  816848:	1004913a 	slli	r2,r2,4
  81684c:	2085883a 	add	r2,r4,r2
  816850:	10800e04 	addi	r2,r2,56
  816854:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  816858:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  81685c:	e0fffd17 	ldw	r3,-12(fp)
  816860:	1880690e 	bge	r3,r2,816a08 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  816864:	e0fffc17 	ldw	r3,-16(fp)
  816868:	e0bff817 	ldw	r2,-32(fp)
  81686c:	1004913a 	slli	r2,r2,4
  816870:	1885883a 	add	r2,r3,r2
  816874:	10800d04 	addi	r2,r2,52
  816878:	10800017 	ldw	r2,0(r2)
  81687c:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  816880:	e03ff915 	stw	zero,-28(fp)
  816884:	00005806 	br	8169e8 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  816888:	e0fffd17 	ldw	r3,-12(fp)
  81688c:	e0bffa17 	ldw	r2,-24(fp)
  816890:	18804916 	blt	r3,r2,8169b8 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  816894:	e0fffc17 	ldw	r3,-16(fp)
  816898:	e0bff817 	ldw	r2,-32(fp)
  81689c:	10800104 	addi	r2,r2,4
  8168a0:	1004913a 	slli	r2,r2,4
  8168a4:	1885883a 	add	r2,r3,r2
  8168a8:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  8168ac:	e0bffa17 	ldw	r2,-24(fp)
  8168b0:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  8168b4:	e0fffd17 	ldw	r3,-12(fp)
  8168b8:	18803f0e 	bge	r3,r2,8169b8 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  8168bc:	e0fffc17 	ldw	r3,-16(fp)
  8168c0:	e0bff817 	ldw	r2,-32(fp)
  8168c4:	10800104 	addi	r2,r2,4
  8168c8:	1004913a 	slli	r2,r2,4
  8168cc:	1885883a 	add	r2,r3,r2
  8168d0:	10c00017 	ldw	r3,0(r2)
  8168d4:	e0bffa17 	ldw	r2,-24(fp)
  8168d8:	1887883a 	add	r3,r3,r2
  8168dc:	e0bffd17 	ldw	r2,-12(fp)
  8168e0:	1885c83a 	sub	r2,r3,r2
  8168e4:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  8168e8:	e0fffb17 	ldw	r3,-20(fp)
  8168ec:	e0bfff17 	ldw	r2,-4(fp)
  8168f0:	1880010e 	bge	r3,r2,8168f8 <alt_epcs_flash_write+0x11c>
  8168f4:	1805883a 	mov	r2,r3
  8168f8:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  8168fc:	e0bffb17 	ldw	r2,-20(fp)
  816900:	100f883a 	mov	r7,r2
  816904:	e1bffd17 	ldw	r6,-12(fp)
  816908:	e17ffe17 	ldw	r5,-8(fp)
  81690c:	e13ffc17 	ldw	r4,-16(fp)
  816910:	08166f00 	call	8166f0 <alt_epcs_flash_memcmp>
  816914:	10001226 	beq	r2,zero,816960 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  816918:	e0bffc17 	ldw	r2,-16(fp)
  81691c:	10800817 	ldw	r2,32(r2)
  816920:	e17ffa17 	ldw	r5,-24(fp)
  816924:	e13ffc17 	ldw	r4,-16(fp)
  816928:	103ee83a 	callr	r2
  81692c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  816930:	e0bff717 	ldw	r2,-36(fp)
  816934:	10000a1e 	bne	r2,zero,816960 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  816938:	e0bffc17 	ldw	r2,-16(fp)
  81693c:	10800917 	ldw	r2,36(r2)
  816940:	e0fffb17 	ldw	r3,-20(fp)
  816944:	d8c00015 	stw	r3,0(sp)
  816948:	e1fffe17 	ldw	r7,-8(fp)
  81694c:	e1bffd17 	ldw	r6,-12(fp)
  816950:	e17ffa17 	ldw	r5,-24(fp)
  816954:	e13ffc17 	ldw	r4,-16(fp)
  816958:	103ee83a 	callr	r2
  81695c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  816960:	e0ffff17 	ldw	r3,-4(fp)
  816964:	e0bffb17 	ldw	r2,-20(fp)
  816968:	18802e26 	beq	r3,r2,816a24 <alt_epcs_flash_write+0x248>
  81696c:	e0bff717 	ldw	r2,-36(fp)
  816970:	10002c1e 	bne	r2,zero,816a24 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  816974:	e0ffff17 	ldw	r3,-4(fp)
  816978:	e0bffb17 	ldw	r2,-20(fp)
  81697c:	1885c83a 	sub	r2,r3,r2
  816980:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  816984:	e0fffc17 	ldw	r3,-16(fp)
  816988:	e0bff817 	ldw	r2,-32(fp)
  81698c:	10800104 	addi	r2,r2,4
  816990:	1004913a 	slli	r2,r2,4
  816994:	1885883a 	add	r2,r3,r2
  816998:	10c00017 	ldw	r3,0(r2)
  81699c:	e0bffa17 	ldw	r2,-24(fp)
  8169a0:	1885883a 	add	r2,r3,r2
  8169a4:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  8169a8:	e0bffb17 	ldw	r2,-20(fp)
  8169ac:	e0fffe17 	ldw	r3,-8(fp)
  8169b0:	1885883a 	add	r2,r3,r2
  8169b4:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  8169b8:	e0fffc17 	ldw	r3,-16(fp)
  8169bc:	e0bff817 	ldw	r2,-32(fp)
  8169c0:	10800104 	addi	r2,r2,4
  8169c4:	1004913a 	slli	r2,r2,4
  8169c8:	1885883a 	add	r2,r3,r2
  8169cc:	10800017 	ldw	r2,0(r2)
  8169d0:	e0fffa17 	ldw	r3,-24(fp)
  8169d4:	1885883a 	add	r2,r3,r2
  8169d8:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  8169dc:	e0bff917 	ldw	r2,-28(fp)
  8169e0:	10800044 	addi	r2,r2,1
  8169e4:	e0bff915 	stw	r2,-28(fp)
  8169e8:	e0fffc17 	ldw	r3,-16(fp)
  8169ec:	e0bff817 	ldw	r2,-32(fp)
  8169f0:	1004913a 	slli	r2,r2,4
  8169f4:	1885883a 	add	r2,r3,r2
  8169f8:	10800f04 	addi	r2,r2,60
  8169fc:	10800017 	ldw	r2,0(r2)
  816a00:	e0fff917 	ldw	r3,-28(fp)
  816a04:	18bfa016 	blt	r3,r2,816888 <__alt_mem_epcs_flash_controller_0+0xff80d888>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  816a08:	e0bff817 	ldw	r2,-32(fp)
  816a0c:	10800044 	addi	r2,r2,1
  816a10:	e0bff815 	stw	r2,-32(fp)
  816a14:	e0bffc17 	ldw	r2,-16(fp)
  816a18:	10800c17 	ldw	r2,48(r2)
  816a1c:	e0fff817 	ldw	r3,-32(fp)
  816a20:	18bf7916 	blt	r3,r2,816808 <__alt_mem_epcs_flash_controller_0+0xff80d808>
      }
    }
  }

finished:
  return ret_code;
  816a24:	e0bff717 	ldw	r2,-36(fp)
}
  816a28:	e037883a 	mov	sp,fp
  816a2c:	dfc00117 	ldw	ra,4(sp)
  816a30:	df000017 	ldw	fp,0(sp)
  816a34:	dec00204 	addi	sp,sp,8
  816a38:	f800283a 	ret

00816a3c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  816a3c:	defffa04 	addi	sp,sp,-24
  816a40:	df000515 	stw	fp,20(sp)
  816a44:	df000504 	addi	fp,sp,20
  816a48:	e13ffd15 	stw	r4,-12(fp)
  816a4c:	e17ffe15 	stw	r5,-8(fp)
  816a50:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  816a54:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  816a58:	e0bffd17 	ldw	r2,-12(fp)
  816a5c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  816a60:	e0bffc17 	ldw	r2,-16(fp)
  816a64:	10c00c17 	ldw	r3,48(r2)
  816a68:	e0bfff17 	ldw	r2,-4(fp)
  816a6c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  816a70:	e0bffc17 	ldw	r2,-16(fp)
  816a74:	10800c17 	ldw	r2,48(r2)
  816a78:	1000031e 	bne	r2,zero,816a88 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  816a7c:	00bffec4 	movi	r2,-5
  816a80:	e0bffb15 	stw	r2,-20(fp)
  816a84:	00000b06 	br	816ab4 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  816a88:	e0bffc17 	ldw	r2,-16(fp)
  816a8c:	10800c17 	ldw	r2,48(r2)
  816a90:	10800250 	cmplti	r2,r2,9
  816a94:	1000031e 	bne	r2,zero,816aa4 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  816a98:	00bffd04 	movi	r2,-12
  816a9c:	e0bffb15 	stw	r2,-20(fp)
  816aa0:	00000406 	br	816ab4 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  816aa4:	e0bffc17 	ldw	r2,-16(fp)
  816aa8:	10c00d04 	addi	r3,r2,52
  816aac:	e0bffe17 	ldw	r2,-8(fp)
  816ab0:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  816ab4:	e0bffb17 	ldw	r2,-20(fp)
}
  816ab8:	e037883a 	mov	sp,fp
  816abc:	df000017 	ldw	fp,0(sp)
  816ac0:	dec00104 	addi	sp,sp,4
  816ac4:	f800283a 	ret

00816ac8 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  816ac8:	defff904 	addi	sp,sp,-28
  816acc:	df000615 	stw	fp,24(sp)
  816ad0:	df000604 	addi	fp,sp,24
  816ad4:	e13ffe15 	stw	r4,-8(fp)
  816ad8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  816adc:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  816ae0:	e0bffe17 	ldw	r2,-8(fp)
  816ae4:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  816ae8:	e0bffb17 	ldw	r2,-20(fp)
  816aec:	10800c17 	ldw	r2,48(r2)
  816af0:	10bfffc4 	addi	r2,r2,-1
  816af4:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  816af8:	e0fffb17 	ldw	r3,-20(fp)
  816afc:	e0bffc17 	ldw	r2,-16(fp)
  816b00:	1004913a 	slli	r2,r2,4
  816b04:	1885883a 	add	r2,r3,r2
  816b08:	10800d04 	addi	r2,r2,52
  816b0c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  816b10:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  816b14:	e13ffb17 	ldw	r4,-20(fp)
  816b18:	e0bffc17 	ldw	r2,-16(fp)
  816b1c:	1004913a 	slli	r2,r2,4
  816b20:	2085883a 	add	r2,r4,r2
  816b24:	10800e04 	addi	r2,r2,56
  816b28:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  816b2c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  816b30:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  816b34:	e0bfff17 	ldw	r2,-4(fp)
  816b38:	e0fffd17 	ldw	r3,-12(fp)
  816b3c:	1880022e 	bgeu	r3,r2,816b48 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  816b40:	00bffec4 	movi	r2,-5
  816b44:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  816b48:	e0bffa17 	ldw	r2,-24(fp)
}
  816b4c:	e037883a 	mov	sp,fp
  816b50:	df000017 	ldw	fp,0(sp)
  816b54:	dec00104 	addi	sp,sp,4
  816b58:	f800283a 	ret

00816b5c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  816b5c:	defffa04 	addi	sp,sp,-24
  816b60:	dfc00515 	stw	ra,20(sp)
  816b64:	df000415 	stw	fp,16(sp)
  816b68:	df000404 	addi	fp,sp,16
  816b6c:	e13ffe15 	stw	r4,-8(fp)
  816b70:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  816b74:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  816b78:	e0bffe17 	ldw	r2,-8(fp)
  816b7c:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  816b80:	e17fff17 	ldw	r5,-4(fp)
  816b84:	e13ffe17 	ldw	r4,-8(fp)
  816b88:	0816ac80 	call	816ac8 <alt_epcs_test_address>
  816b8c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  816b90:	e0bffc17 	ldw	r2,-16(fp)
  816b94:	10000916 	blt	r2,zero,816bbc <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  816b98:	e0bffd17 	ldw	r2,-12(fp)
  816b9c:	10c02e17 	ldw	r3,184(r2)
  816ba0:	e13fff17 	ldw	r4,-4(fp)
  816ba4:	e0bffd17 	ldw	r2,-12(fp)
  816ba8:	10803217 	ldw	r2,200(r2)
  816bac:	100d883a 	mov	r6,r2
  816bb0:	200b883a 	mov	r5,r4
  816bb4:	1809883a 	mov	r4,r3
  816bb8:	08187b00 	call	8187b0 <epcs_sector_erase>
  }
  return ret_code;
  816bbc:	e0bffc17 	ldw	r2,-16(fp)
}
  816bc0:	e037883a 	mov	sp,fp
  816bc4:	dfc00117 	ldw	ra,4(sp)
  816bc8:	df000017 	ldw	fp,0(sp)
  816bcc:	dec00204 	addi	sp,sp,8
  816bd0:	f800283a 	ret

00816bd4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  816bd4:	defff404 	addi	sp,sp,-48
  816bd8:	dfc00b15 	stw	ra,44(sp)
  816bdc:	df000a15 	stw	fp,40(sp)
  816be0:	df000a04 	addi	fp,sp,40
  816be4:	e13ffc15 	stw	r4,-16(fp)
  816be8:	e17ffd15 	stw	r5,-12(fp)
  816bec:	e1bffe15 	stw	r6,-8(fp)
  816bf0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  816bf4:	e0bffc17 	ldw	r2,-16(fp)
  816bf8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  816bfc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  816c00:	e17ffe17 	ldw	r5,-8(fp)
  816c04:	e13ffc17 	ldw	r4,-16(fp)
  816c08:	0816ac80 	call	816ac8 <alt_epcs_test_address>
  816c0c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  816c10:	e0bff917 	ldw	r2,-28(fp)
  816c14:	10002916 	blt	r2,zero,816cbc <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  816c18:	00002606 	br	816cb4 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  816c1c:	e0bff817 	ldw	r2,-32(fp)
  816c20:	10c03117 	ldw	r3,196(r2)
  816c24:	e0bffe17 	ldw	r2,-8(fp)
  816c28:	1887883a 	add	r3,r3,r2
  816c2c:	e0bff817 	ldw	r2,-32(fp)
  816c30:	10803117 	ldw	r2,196(r2)
  816c34:	0085c83a 	sub	r2,zero,r2
  816c38:	1884703a 	and	r2,r3,r2
  816c3c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  816c40:	e0fffa17 	ldw	r3,-24(fp)
  816c44:	e0bffe17 	ldw	r2,-8(fp)
  816c48:	1885c83a 	sub	r2,r3,r2
  816c4c:	e0c00217 	ldw	r3,8(fp)
  816c50:	1880010e 	bge	r3,r2,816c58 <alt_epcs_flash_write_block+0x84>
  816c54:	1805883a 	mov	r2,r3
  816c58:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  816c5c:	e0bff817 	ldw	r2,-32(fp)
  816c60:	11002e17 	ldw	r4,184(r2)
  816c64:	e0bff717 	ldw	r2,-36(fp)
  816c68:	e0ffff17 	ldw	r3,-4(fp)
  816c6c:	1887883a 	add	r3,r3,r2
  816c70:	e0bff817 	ldw	r2,-32(fp)
  816c74:	10803217 	ldw	r2,200(r2)
  816c78:	d8800015 	stw	r2,0(sp)
  816c7c:	e1fffb17 	ldw	r7,-20(fp)
  816c80:	180d883a 	mov	r6,r3
  816c84:	e17ffe17 	ldw	r5,-8(fp)
  816c88:	0818a600 	call	818a60 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  816c8c:	e0c00217 	ldw	r3,8(fp)
  816c90:	e0bffb17 	ldw	r2,-20(fp)
  816c94:	1885c83a 	sub	r2,r3,r2
  816c98:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  816c9c:	e0fff717 	ldw	r3,-36(fp)
  816ca0:	e0bffb17 	ldw	r2,-20(fp)
  816ca4:	1885883a 	add	r2,r3,r2
  816ca8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  816cac:	e0bffa17 	ldw	r2,-24(fp)
  816cb0:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  816cb4:	e0800217 	ldw	r2,8(fp)
  816cb8:	103fd81e 	bne	r2,zero,816c1c <__alt_mem_epcs_flash_controller_0+0xff80dc1c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  816cbc:	e0bff917 	ldw	r2,-28(fp)
}
  816cc0:	e037883a 	mov	sp,fp
  816cc4:	dfc00117 	ldw	ra,4(sp)
  816cc8:	df000017 	ldw	fp,0(sp)
  816ccc:	dec00204 	addi	sp,sp,8
  816cd0:	f800283a 	ret

00816cd4 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  816cd4:	defff704 	addi	sp,sp,-36
  816cd8:	dfc00815 	stw	ra,32(sp)
  816cdc:	df000715 	stw	fp,28(sp)
  816ce0:	df000704 	addi	fp,sp,28
  816ce4:	e13ffc15 	stw	r4,-16(fp)
  816ce8:	e17ffd15 	stw	r5,-12(fp)
  816cec:	e1bffe15 	stw	r6,-8(fp)
  816cf0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  816cf4:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  816cf8:	e0bffc17 	ldw	r2,-16(fp)
  816cfc:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  816d00:	e17ffd17 	ldw	r5,-12(fp)
  816d04:	e13ffc17 	ldw	r4,-16(fp)
  816d08:	0816ac80 	call	816ac8 <alt_epcs_test_address>
  816d0c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  816d10:	e0bffa17 	ldw	r2,-24(fp)
  816d14:	10000f16 	blt	r2,zero,816d54 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  816d18:	e0bffb17 	ldw	r2,-20(fp)
  816d1c:	10c02e17 	ldw	r3,184(r2)
  816d20:	e0bffb17 	ldw	r2,-20(fp)
  816d24:	10803217 	ldw	r2,200(r2)
  816d28:	d8800015 	stw	r2,0(sp)
  816d2c:	e1ffff17 	ldw	r7,-4(fp)
  816d30:	e1bffe17 	ldw	r6,-8(fp)
  816d34:	e17ffd17 	ldw	r5,-12(fp)
  816d38:	1809883a 	mov	r4,r3
  816d3c:	08188ac0 	call	8188ac <epcs_read_buffer>
  816d40:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  816d44:	e0fffa17 	ldw	r3,-24(fp)
  816d48:	e0bfff17 	ldw	r2,-4(fp)
  816d4c:	1880011e 	bne	r3,r2,816d54 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  816d50:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  816d54:	e0bffa17 	ldw	r2,-24(fp)
}
  816d58:	e037883a 	mov	sp,fp
  816d5c:	dfc00117 	ldw	ra,4(sp)
  816d60:	df000017 	ldw	fp,0(sp)
  816d64:	dec00204 	addi	sp,sp,8
  816d68:	f800283a 	ret

00816d6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  816d6c:	defffa04 	addi	sp,sp,-24
  816d70:	dfc00515 	stw	ra,20(sp)
  816d74:	df000415 	stw	fp,16(sp)
  816d78:	df000404 	addi	fp,sp,16
  816d7c:	e13ffd15 	stw	r4,-12(fp)
  816d80:	e17ffe15 	stw	r5,-8(fp)
  816d84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  816d88:	e0bffd17 	ldw	r2,-12(fp)
  816d8c:	10800017 	ldw	r2,0(r2)
  816d90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  816d94:	e0bffc17 	ldw	r2,-16(fp)
  816d98:	10c00a04 	addi	r3,r2,40
  816d9c:	e0bffd17 	ldw	r2,-12(fp)
  816da0:	10800217 	ldw	r2,8(r2)
  816da4:	100f883a 	mov	r7,r2
  816da8:	e1bfff17 	ldw	r6,-4(fp)
  816dac:	e17ffe17 	ldw	r5,-8(fp)
  816db0:	1809883a 	mov	r4,r3
  816db4:	08175180 	call	817518 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  816db8:	e037883a 	mov	sp,fp
  816dbc:	dfc00117 	ldw	ra,4(sp)
  816dc0:	df000017 	ldw	fp,0(sp)
  816dc4:	dec00204 	addi	sp,sp,8
  816dc8:	f800283a 	ret

00816dcc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  816dcc:	defffa04 	addi	sp,sp,-24
  816dd0:	dfc00515 	stw	ra,20(sp)
  816dd4:	df000415 	stw	fp,16(sp)
  816dd8:	df000404 	addi	fp,sp,16
  816ddc:	e13ffd15 	stw	r4,-12(fp)
  816de0:	e17ffe15 	stw	r5,-8(fp)
  816de4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  816de8:	e0bffd17 	ldw	r2,-12(fp)
  816dec:	10800017 	ldw	r2,0(r2)
  816df0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  816df4:	e0bffc17 	ldw	r2,-16(fp)
  816df8:	10c00a04 	addi	r3,r2,40
  816dfc:	e0bffd17 	ldw	r2,-12(fp)
  816e00:	10800217 	ldw	r2,8(r2)
  816e04:	100f883a 	mov	r7,r2
  816e08:	e1bfff17 	ldw	r6,-4(fp)
  816e0c:	e17ffe17 	ldw	r5,-8(fp)
  816e10:	1809883a 	mov	r4,r3
  816e14:	08177d40 	call	8177d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  816e18:	e037883a 	mov	sp,fp
  816e1c:	dfc00117 	ldw	ra,4(sp)
  816e20:	df000017 	ldw	fp,0(sp)
  816e24:	dec00204 	addi	sp,sp,8
  816e28:	f800283a 	ret

00816e2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  816e2c:	defffc04 	addi	sp,sp,-16
  816e30:	dfc00315 	stw	ra,12(sp)
  816e34:	df000215 	stw	fp,8(sp)
  816e38:	df000204 	addi	fp,sp,8
  816e3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  816e40:	e0bfff17 	ldw	r2,-4(fp)
  816e44:	10800017 	ldw	r2,0(r2)
  816e48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  816e4c:	e0bffe17 	ldw	r2,-8(fp)
  816e50:	10c00a04 	addi	r3,r2,40
  816e54:	e0bfff17 	ldw	r2,-4(fp)
  816e58:	10800217 	ldw	r2,8(r2)
  816e5c:	100b883a 	mov	r5,r2
  816e60:	1809883a 	mov	r4,r3
  816e64:	08173c00 	call	8173c0 <altera_avalon_jtag_uart_close>
}
  816e68:	e037883a 	mov	sp,fp
  816e6c:	dfc00117 	ldw	ra,4(sp)
  816e70:	df000017 	ldw	fp,0(sp)
  816e74:	dec00204 	addi	sp,sp,8
  816e78:	f800283a 	ret

00816e7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  816e7c:	defffa04 	addi	sp,sp,-24
  816e80:	dfc00515 	stw	ra,20(sp)
  816e84:	df000415 	stw	fp,16(sp)
  816e88:	df000404 	addi	fp,sp,16
  816e8c:	e13ffd15 	stw	r4,-12(fp)
  816e90:	e17ffe15 	stw	r5,-8(fp)
  816e94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  816e98:	e0bffd17 	ldw	r2,-12(fp)
  816e9c:	10800017 	ldw	r2,0(r2)
  816ea0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  816ea4:	e0bffc17 	ldw	r2,-16(fp)
  816ea8:	10800a04 	addi	r2,r2,40
  816eac:	e1bfff17 	ldw	r6,-4(fp)
  816eb0:	e17ffe17 	ldw	r5,-8(fp)
  816eb4:	1009883a 	mov	r4,r2
  816eb8:	08174280 	call	817428 <altera_avalon_jtag_uart_ioctl>
}
  816ebc:	e037883a 	mov	sp,fp
  816ec0:	dfc00117 	ldw	ra,4(sp)
  816ec4:	df000017 	ldw	fp,0(sp)
  816ec8:	dec00204 	addi	sp,sp,8
  816ecc:	f800283a 	ret

00816ed0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  816ed0:	defff104 	addi	sp,sp,-60
  816ed4:	dfc00e15 	stw	ra,56(sp)
  816ed8:	df000d15 	stw	fp,52(sp)
  816edc:	df000d04 	addi	fp,sp,52
  816ee0:	e13ff915 	stw	r4,-28(fp)
  816ee4:	e17ffa15 	stw	r5,-24(fp)
  816ee8:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  816eec:	e0bff917 	ldw	r2,-28(fp)
  816ef0:	10800c04 	addi	r2,r2,48
  816ef4:	e0bff415 	stw	r2,-48(fp)
  816ef8:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  816efc:	e0bff80b 	ldhu	r2,-32(fp)
  816f00:	e0fff884 	addi	r3,fp,-30
  816f04:	180b883a 	mov	r5,r3
  816f08:	1009883a 	mov	r4,r2
  816f0c:	0810e080 	call	810e08 <OSFlagCreate>
  816f10:	1007883a 	mov	r3,r2
  816f14:	e0bff417 	ldw	r2,-48(fp)
  816f18:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  816f1c:	e0bff917 	ldw	r2,-28(fp)
  816f20:	10800a04 	addi	r2,r2,40
  816f24:	e0bff515 	stw	r2,-44(fp)
  816f28:	00800044 	movi	r2,1
  816f2c:	e0bff78d 	sth	r2,-34(fp)
  816f30:	e0bff78b 	ldhu	r2,-34(fp)
  816f34:	1009883a 	mov	r4,r2
  816f38:	0813b280 	call	813b28 <OSSemCreate>
  816f3c:	1007883a 	mov	r3,r2
  816f40:	e0bff517 	ldw	r2,-44(fp)
  816f44:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  816f48:	e0bff917 	ldw	r2,-28(fp)
  816f4c:	10800b04 	addi	r2,r2,44
  816f50:	e0bff615 	stw	r2,-40(fp)
  816f54:	00800044 	movi	r2,1
  816f58:	e0bff70d 	sth	r2,-36(fp)
  816f5c:	e0bff70b 	ldhu	r2,-36(fp)
  816f60:	1009883a 	mov	r4,r2
  816f64:	0813b280 	call	813b28 <OSSemCreate>
  816f68:	1007883a 	mov	r3,r2
  816f6c:	e0bff617 	ldw	r2,-40(fp)
  816f70:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  816f74:	e0bff917 	ldw	r2,-28(fp)
  816f78:	00c00044 	movi	r3,1
  816f7c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  816f80:	e0bff917 	ldw	r2,-28(fp)
  816f84:	10800017 	ldw	r2,0(r2)
  816f88:	10800104 	addi	r2,r2,4
  816f8c:	1007883a 	mov	r3,r2
  816f90:	e0bff917 	ldw	r2,-28(fp)
  816f94:	10800817 	ldw	r2,32(r2)
  816f98:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  816f9c:	e0bffa17 	ldw	r2,-24(fp)
  816fa0:	e0fffb17 	ldw	r3,-20(fp)
  816fa4:	d8000015 	stw	zero,0(sp)
  816fa8:	e1fff917 	ldw	r7,-28(fp)
  816fac:	01802074 	movhi	r6,129
  816fb0:	319c0604 	addi	r6,r6,28696
  816fb4:	180b883a 	mov	r5,r3
  816fb8:	1009883a 	mov	r4,r2
  816fbc:	080dd400 	call	80dd40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  816fc0:	e0bff917 	ldw	r2,-28(fp)
  816fc4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  816fc8:	e0bff917 	ldw	r2,-28(fp)
  816fcc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  816fd0:	d0e07a17 	ldw	r3,-32280(gp)
  816fd4:	e1fff917 	ldw	r7,-28(fp)
  816fd8:	01802074 	movhi	r6,129
  816fdc:	319caf04 	addi	r6,r6,29372
  816fe0:	180b883a 	mov	r5,r3
  816fe4:	1009883a 	mov	r4,r2
  816fe8:	0818d1c0 	call	818d1c <alt_alarm_start>
  816fec:	1000040e 	bge	r2,zero,817000 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  816ff0:	e0fff917 	ldw	r3,-28(fp)
  816ff4:	00a00034 	movhi	r2,32768
  816ff8:	10bfffc4 	addi	r2,r2,-1
  816ffc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  817000:	0001883a 	nop
  817004:	e037883a 	mov	sp,fp
  817008:	dfc00117 	ldw	ra,4(sp)
  81700c:	df000017 	ldw	fp,0(sp)
  817010:	dec00204 	addi	sp,sp,8
  817014:	f800283a 	ret

00817018 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  817018:	defff204 	addi	sp,sp,-56
  81701c:	dfc00d15 	stw	ra,52(sp)
  817020:	df000c15 	stw	fp,48(sp)
  817024:	df000c04 	addi	fp,sp,48
  817028:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81702c:	e0bfff17 	ldw	r2,-4(fp)
  817030:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  817034:	e0bff617 	ldw	r2,-40(fp)
  817038:	10800017 	ldw	r2,0(r2)
  81703c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  817040:	e0bff717 	ldw	r2,-36(fp)
  817044:	10800104 	addi	r2,r2,4
  817048:	10800037 	ldwio	r2,0(r2)
  81704c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  817050:	e0bff817 	ldw	r2,-32(fp)
  817054:	1080c00c 	andi	r2,r2,768
  817058:	10009126 	beq	r2,zero,8172a0 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81705c:	e0bff817 	ldw	r2,-32(fp)
  817060:	1080400c 	andi	r2,r2,256
  817064:	10004726 	beq	r2,zero,817184 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  817068:	00800074 	movhi	r2,1
  81706c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817070:	e0bff617 	ldw	r2,-40(fp)
  817074:	10800d17 	ldw	r2,52(r2)
  817078:	10800044 	addi	r2,r2,1
  81707c:	1081ffcc 	andi	r2,r2,2047
  817080:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  817084:	e0bff617 	ldw	r2,-40(fp)
  817088:	10c00e17 	ldw	r3,56(r2)
  81708c:	e0bff917 	ldw	r2,-28(fp)
  817090:	18802726 	beq	r3,r2,817130 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  817094:	e0bff717 	ldw	r2,-36(fp)
  817098:	10800037 	ldwio	r2,0(r2)
  81709c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8170a0:	e0bff417 	ldw	r2,-48(fp)
  8170a4:	10a0000c 	andi	r2,r2,32768
  8170a8:	10002326 	beq	r2,zero,817138 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8170ac:	e0bff617 	ldw	r2,-40(fp)
  8170b0:	10800d17 	ldw	r2,52(r2)
  8170b4:	e0fff417 	ldw	r3,-48(fp)
  8170b8:	1809883a 	mov	r4,r3
  8170bc:	e0fff617 	ldw	r3,-40(fp)
  8170c0:	1885883a 	add	r2,r3,r2
  8170c4:	10801104 	addi	r2,r2,68
  8170c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8170cc:	e0bff617 	ldw	r2,-40(fp)
  8170d0:	10800d17 	ldw	r2,52(r2)
  8170d4:	10800044 	addi	r2,r2,1
  8170d8:	10c1ffcc 	andi	r3,r2,2047
  8170dc:	e0bff617 	ldw	r2,-40(fp)
  8170e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  8170e4:	e0bff617 	ldw	r2,-40(fp)
  8170e8:	10800c17 	ldw	r2,48(r2)
  8170ec:	e0bffb15 	stw	r2,-20(fp)
  8170f0:	00800044 	movi	r2,1
  8170f4:	e0bffc0d 	sth	r2,-16(fp)
  8170f8:	00800044 	movi	r2,1
  8170fc:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817100:	d0a06543 	ldbu	r2,-32363(gp)
  817104:	10803fcc 	andi	r2,r2,255
  817108:	103fd926 	beq	r2,zero,817070 <__alt_mem_epcs_flash_controller_0+0xff80e070>
  {
    OSFlagPost (group, flags, opt, &err);
  81710c:	e0bffc0b 	ldhu	r2,-16(fp)
  817110:	e0fffc83 	ldbu	r3,-14(fp)
  817114:	e13ffdc4 	addi	r4,fp,-9
  817118:	200f883a 	mov	r7,r4
  81711c:	180d883a 	mov	r6,r3
  817120:	100b883a 	mov	r5,r2
  817124:	e13ffb17 	ldw	r4,-20(fp)
  817128:	08119e40 	call	8119e4 <OSFlagPost>
      }
  81712c:	003fd006 	br	817070 <__alt_mem_epcs_flash_controller_0+0xff80e070>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  817130:	0001883a 	nop
  817134:	00000106 	br	81713c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  817138:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81713c:	e0bff417 	ldw	r2,-48(fp)
  817140:	10bfffec 	andhi	r2,r2,65535
  817144:	10000f26 	beq	r2,zero,817184 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  817148:	e0bff617 	ldw	r2,-40(fp)
  81714c:	10c00817 	ldw	r3,32(r2)
  817150:	00bfff84 	movi	r2,-2
  817154:	1886703a 	and	r3,r3,r2
  817158:	e0bff617 	ldw	r2,-40(fp)
  81715c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  817160:	e0bff717 	ldw	r2,-36(fp)
  817164:	10800104 	addi	r2,r2,4
  817168:	1007883a 	mov	r3,r2
  81716c:	e0bff617 	ldw	r2,-40(fp)
  817170:	10800817 	ldw	r2,32(r2)
  817174:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  817178:	e0bff717 	ldw	r2,-36(fp)
  81717c:	10800104 	addi	r2,r2,4
  817180:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  817184:	e0bff817 	ldw	r2,-32(fp)
  817188:	1080800c 	andi	r2,r2,512
  81718c:	103fac26 	beq	r2,zero,817040 <__alt_mem_epcs_flash_controller_0+0xff80e040>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  817190:	e0bff817 	ldw	r2,-32(fp)
  817194:	1004d43a 	srli	r2,r2,16
  817198:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81719c:	00002606 	br	817238 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8171a0:	e0bff717 	ldw	r2,-36(fp)
  8171a4:	e0fff617 	ldw	r3,-40(fp)
  8171a8:	18c01017 	ldw	r3,64(r3)
  8171ac:	e13ff617 	ldw	r4,-40(fp)
  8171b0:	20c7883a 	add	r3,r4,r3
  8171b4:	18c21104 	addi	r3,r3,2116
  8171b8:	18c00003 	ldbu	r3,0(r3)
  8171bc:	18c03fcc 	andi	r3,r3,255
  8171c0:	18c0201c 	xori	r3,r3,128
  8171c4:	18ffe004 	addi	r3,r3,-128
  8171c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8171cc:	e0bff617 	ldw	r2,-40(fp)
  8171d0:	10801017 	ldw	r2,64(r2)
  8171d4:	10800044 	addi	r2,r2,1
  8171d8:	10c1ffcc 	andi	r3,r2,2047
  8171dc:	e0bff617 	ldw	r2,-40(fp)
  8171e0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  8171e4:	e0bff617 	ldw	r2,-40(fp)
  8171e8:	10800c17 	ldw	r2,48(r2)
  8171ec:	e0bffa15 	stw	r2,-24(fp)
  8171f0:	00800084 	movi	r2,2
  8171f4:	e0bffd0d 	sth	r2,-12(fp)
  8171f8:	00800044 	movi	r2,1
  8171fc:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817200:	d0a06543 	ldbu	r2,-32363(gp)
  817204:	10803fcc 	andi	r2,r2,255
  817208:	10000826 	beq	r2,zero,81722c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  81720c:	e0bffd0b 	ldhu	r2,-12(fp)
  817210:	e0fffd83 	ldbu	r3,-10(fp)
  817214:	e13ffe04 	addi	r4,fp,-8
  817218:	200f883a 	mov	r7,r4
  81721c:	180d883a 	mov	r6,r3
  817220:	100b883a 	mov	r5,r2
  817224:	e13ffa17 	ldw	r4,-24(fp)
  817228:	08119e40 	call	8119e4 <OSFlagPost>

        space--;
  81722c:	e0bff517 	ldw	r2,-44(fp)
  817230:	10bfffc4 	addi	r2,r2,-1
  817234:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  817238:	e0bff517 	ldw	r2,-44(fp)
  81723c:	10000526 	beq	r2,zero,817254 <altera_avalon_jtag_uart_irq+0x23c>
  817240:	e0bff617 	ldw	r2,-40(fp)
  817244:	10c01017 	ldw	r3,64(r2)
  817248:	e0bff617 	ldw	r2,-40(fp)
  81724c:	10800f17 	ldw	r2,60(r2)
  817250:	18bfd31e 	bne	r3,r2,8171a0 <__alt_mem_epcs_flash_controller_0+0xff80e1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  817254:	e0bff517 	ldw	r2,-44(fp)
  817258:	103f7926 	beq	r2,zero,817040 <__alt_mem_epcs_flash_controller_0+0xff80e040>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81725c:	e0bff617 	ldw	r2,-40(fp)
  817260:	10c00817 	ldw	r3,32(r2)
  817264:	00bfff44 	movi	r2,-3
  817268:	1886703a 	and	r3,r3,r2
  81726c:	e0bff617 	ldw	r2,-40(fp)
  817270:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817274:	e0bff617 	ldw	r2,-40(fp)
  817278:	10800017 	ldw	r2,0(r2)
  81727c:	10800104 	addi	r2,r2,4
  817280:	1007883a 	mov	r3,r2
  817284:	e0bff617 	ldw	r2,-40(fp)
  817288:	10800817 	ldw	r2,32(r2)
  81728c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  817290:	e0bff717 	ldw	r2,-36(fp)
  817294:	10800104 	addi	r2,r2,4
  817298:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81729c:	003f6806 	br	817040 <__alt_mem_epcs_flash_controller_0+0xff80e040>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  8172a0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  8172a4:	0001883a 	nop
  8172a8:	e037883a 	mov	sp,fp
  8172ac:	dfc00117 	ldw	ra,4(sp)
  8172b0:	df000017 	ldw	fp,0(sp)
  8172b4:	dec00204 	addi	sp,sp,8
  8172b8:	f800283a 	ret

008172bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8172bc:	defff904 	addi	sp,sp,-28
  8172c0:	dfc00615 	stw	ra,24(sp)
  8172c4:	df000515 	stw	fp,20(sp)
  8172c8:	df000504 	addi	fp,sp,20
  8172cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8172d0:	e0bfff17 	ldw	r2,-4(fp)
  8172d4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8172d8:	e0bffb17 	ldw	r2,-20(fp)
  8172dc:	10800017 	ldw	r2,0(r2)
  8172e0:	10800104 	addi	r2,r2,4
  8172e4:	10800037 	ldwio	r2,0(r2)
  8172e8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8172ec:	e0bffc17 	ldw	r2,-16(fp)
  8172f0:	1081000c 	andi	r2,r2,1024
  8172f4:	10000b26 	beq	r2,zero,817324 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8172f8:	e0bffb17 	ldw	r2,-20(fp)
  8172fc:	10800017 	ldw	r2,0(r2)
  817300:	10800104 	addi	r2,r2,4
  817304:	1007883a 	mov	r3,r2
  817308:	e0bffb17 	ldw	r2,-20(fp)
  81730c:	10800817 	ldw	r2,32(r2)
  817310:	10810014 	ori	r2,r2,1024
  817314:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  817318:	e0bffb17 	ldw	r2,-20(fp)
  81731c:	10000915 	stw	zero,36(r2)
  817320:	00002106 	br	8173a8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  817324:	e0bffb17 	ldw	r2,-20(fp)
  817328:	10c00917 	ldw	r3,36(r2)
  81732c:	00a00034 	movhi	r2,32768
  817330:	10bfff04 	addi	r2,r2,-4
  817334:	10c01c36 	bltu	r2,r3,8173a8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  817338:	e0bffb17 	ldw	r2,-20(fp)
  81733c:	10800917 	ldw	r2,36(r2)
  817340:	10c00044 	addi	r3,r2,1
  817344:	e0bffb17 	ldw	r2,-20(fp)
  817348:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  81734c:	e0bffb17 	ldw	r2,-20(fp)
  817350:	10c00917 	ldw	r3,36(r2)
  817354:	e0bffb17 	ldw	r2,-20(fp)
  817358:	10800117 	ldw	r2,4(r2)
  81735c:	18801236 	bltu	r3,r2,8173a8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  817360:	e0bffb17 	ldw	r2,-20(fp)
  817364:	10800c17 	ldw	r2,48(r2)
  817368:	e0bffd15 	stw	r2,-12(fp)
  81736c:	00800104 	movi	r2,4
  817370:	e0bffe0d 	sth	r2,-8(fp)
  817374:	00800044 	movi	r2,1
  817378:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81737c:	d0a06543 	ldbu	r2,-32363(gp)
  817380:	10803fcc 	andi	r2,r2,255
  817384:	10000826 	beq	r2,zero,8173a8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  817388:	e0bffe0b 	ldhu	r2,-8(fp)
  81738c:	e0fffe83 	ldbu	r3,-6(fp)
  817390:	e13ffec4 	addi	r4,fp,-5
  817394:	200f883a 	mov	r7,r4
  817398:	180d883a 	mov	r6,r3
  81739c:	100b883a 	mov	r5,r2
  8173a0:	e13ffd17 	ldw	r4,-12(fp)
  8173a4:	08119e40 	call	8119e4 <OSFlagPost>
  8173a8:	d0a07a17 	ldw	r2,-32280(gp)
    }
  }

  return alt_ticks_per_second();
}
  8173ac:	e037883a 	mov	sp,fp
  8173b0:	dfc00117 	ldw	ra,4(sp)
  8173b4:	df000017 	ldw	fp,0(sp)
  8173b8:	dec00204 	addi	sp,sp,8
  8173bc:	f800283a 	ret

008173c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8173c0:	defffd04 	addi	sp,sp,-12
  8173c4:	df000215 	stw	fp,8(sp)
  8173c8:	df000204 	addi	fp,sp,8
  8173cc:	e13ffe15 	stw	r4,-8(fp)
  8173d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8173d4:	00000506 	br	8173ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8173d8:	e0bfff17 	ldw	r2,-4(fp)
  8173dc:	1090000c 	andi	r2,r2,16384
  8173e0:	10000226 	beq	r2,zero,8173ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8173e4:	00bffd44 	movi	r2,-11
  8173e8:	00000b06 	br	817418 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8173ec:	e0bffe17 	ldw	r2,-8(fp)
  8173f0:	10c01017 	ldw	r3,64(r2)
  8173f4:	e0bffe17 	ldw	r2,-8(fp)
  8173f8:	10800f17 	ldw	r2,60(r2)
  8173fc:	18800526 	beq	r3,r2,817414 <altera_avalon_jtag_uart_close+0x54>
  817400:	e0bffe17 	ldw	r2,-8(fp)
  817404:	10c00917 	ldw	r3,36(r2)
  817408:	e0bffe17 	ldw	r2,-8(fp)
  81740c:	10800117 	ldw	r2,4(r2)
  817410:	18bff136 	bltu	r3,r2,8173d8 <__alt_mem_epcs_flash_controller_0+0xff80e3d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  817414:	0005883a 	mov	r2,zero
}
  817418:	e037883a 	mov	sp,fp
  81741c:	df000017 	ldw	fp,0(sp)
  817420:	dec00104 	addi	sp,sp,4
  817424:	f800283a 	ret

00817428 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  817428:	defffa04 	addi	sp,sp,-24
  81742c:	df000515 	stw	fp,20(sp)
  817430:	df000504 	addi	fp,sp,20
  817434:	e13ffd15 	stw	r4,-12(fp)
  817438:	e17ffe15 	stw	r5,-8(fp)
  81743c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  817440:	00bff9c4 	movi	r2,-25
  817444:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  817448:	e0bffe17 	ldw	r2,-8(fp)
  81744c:	10da8060 	cmpeqi	r3,r2,27137
  817450:	1800031e 	bne	r3,zero,817460 <altera_avalon_jtag_uart_ioctl+0x38>
  817454:	109a80a0 	cmpeqi	r2,r2,27138
  817458:	1000181e 	bne	r2,zero,8174bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  81745c:	00002906 	br	817504 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  817460:	e0bffd17 	ldw	r2,-12(fp)
  817464:	10c00117 	ldw	r3,4(r2)
  817468:	00a00034 	movhi	r2,32768
  81746c:	10bfffc4 	addi	r2,r2,-1
  817470:	18802126 	beq	r3,r2,8174f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  817474:	e0bfff17 	ldw	r2,-4(fp)
  817478:	10800017 	ldw	r2,0(r2)
  81747c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  817480:	e0bffc17 	ldw	r2,-16(fp)
  817484:	10800090 	cmplti	r2,r2,2
  817488:	1000061e 	bne	r2,zero,8174a4 <altera_avalon_jtag_uart_ioctl+0x7c>
  81748c:	e0fffc17 	ldw	r3,-16(fp)
  817490:	00a00034 	movhi	r2,32768
  817494:	10bfffc4 	addi	r2,r2,-1
  817498:	18800226 	beq	r3,r2,8174a4 <altera_avalon_jtag_uart_ioctl+0x7c>
  81749c:	e0bffc17 	ldw	r2,-16(fp)
  8174a0:	00000206 	br	8174ac <altera_avalon_jtag_uart_ioctl+0x84>
  8174a4:	00a00034 	movhi	r2,32768
  8174a8:	10bfff84 	addi	r2,r2,-2
  8174ac:	e0fffd17 	ldw	r3,-12(fp)
  8174b0:	18800115 	stw	r2,4(r3)
      rc = 0;
  8174b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8174b8:	00000f06 	br	8174f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8174bc:	e0bffd17 	ldw	r2,-12(fp)
  8174c0:	10c00117 	ldw	r3,4(r2)
  8174c4:	00a00034 	movhi	r2,32768
  8174c8:	10bfffc4 	addi	r2,r2,-1
  8174cc:	18800c26 	beq	r3,r2,817500 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8174d0:	e0bffd17 	ldw	r2,-12(fp)
  8174d4:	10c00917 	ldw	r3,36(r2)
  8174d8:	e0bffd17 	ldw	r2,-12(fp)
  8174dc:	10800117 	ldw	r2,4(r2)
  8174e0:	1885803a 	cmpltu	r2,r3,r2
  8174e4:	10c03fcc 	andi	r3,r2,255
  8174e8:	e0bfff17 	ldw	r2,-4(fp)
  8174ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8174f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8174f4:	00000206 	br	817500 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8174f8:	0001883a 	nop
  8174fc:	00000106 	br	817504 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  817500:	0001883a 	nop

  default:
    break;
  }

  return rc;
  817504:	e0bffb17 	ldw	r2,-20(fp)
}
  817508:	e037883a 	mov	sp,fp
  81750c:	df000017 	ldw	fp,0(sp)
  817510:	dec00104 	addi	sp,sp,4
  817514:	f800283a 	ret

00817518 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  817518:	deffed04 	addi	sp,sp,-76
  81751c:	dfc01215 	stw	ra,72(sp)
  817520:	df001115 	stw	fp,68(sp)
  817524:	df001104 	addi	fp,sp,68
  817528:	e13ffc15 	stw	r4,-16(fp)
  81752c:	e17ffd15 	stw	r5,-12(fp)
  817530:	e1bffe15 	stw	r6,-8(fp)
  817534:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  817538:	e0bffd17 	ldw	r2,-12(fp)
  81753c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  817540:	e0bffc17 	ldw	r2,-16(fp)
  817544:	10800a17 	ldw	r2,40(r2)
  817548:	e0bff815 	stw	r2,-32(fp)
  81754c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  817550:	e0bff90b 	ldhu	r2,-28(fp)
  817554:	e0fffb04 	addi	r3,fp,-20
  817558:	180d883a 	mov	r6,r3
  81755c:	100b883a 	mov	r5,r2
  817560:	e13ff817 	ldw	r4,-32(fp)
  817564:	0813e400 	call	813e40 <OSSemPend>

  while (space > 0)
  817568:	00006106 	br	8176f0 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81756c:	e0bffc17 	ldw	r2,-16(fp)
  817570:	10800d17 	ldw	r2,52(r2)
  817574:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  817578:	e0bffc17 	ldw	r2,-16(fp)
  81757c:	10800e17 	ldw	r2,56(r2)
  817580:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  817584:	e0fff317 	ldw	r3,-52(fp)
  817588:	e0bff417 	ldw	r2,-48(fp)
  81758c:	18800536 	bltu	r3,r2,8175a4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  817590:	e0fff317 	ldw	r3,-52(fp)
  817594:	e0bff417 	ldw	r2,-48(fp)
  817598:	1885c83a 	sub	r2,r3,r2
  81759c:	e0bff115 	stw	r2,-60(fp)
  8175a0:	00000406 	br	8175b4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8175a4:	00c20004 	movi	r3,2048
  8175a8:	e0bff417 	ldw	r2,-48(fp)
  8175ac:	1885c83a 	sub	r2,r3,r2
  8175b0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  8175b4:	e0bff117 	ldw	r2,-60(fp)
  8175b8:	10001e26 	beq	r2,zero,817634 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  8175bc:	e0fffe17 	ldw	r3,-8(fp)
  8175c0:	e0bff117 	ldw	r2,-60(fp)
  8175c4:	1880022e 	bgeu	r3,r2,8175d0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  8175c8:	e0bffe17 	ldw	r2,-8(fp)
  8175cc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8175d0:	e0bffc17 	ldw	r2,-16(fp)
  8175d4:	10c01104 	addi	r3,r2,68
  8175d8:	e0bff417 	ldw	r2,-48(fp)
  8175dc:	1885883a 	add	r2,r3,r2
  8175e0:	e1bff117 	ldw	r6,-60(fp)
  8175e4:	100b883a 	mov	r5,r2
  8175e8:	e13ff017 	ldw	r4,-64(fp)
  8175ec:	08066580 	call	806658 <memcpy>
      ptr   += n;
  8175f0:	e0fff017 	ldw	r3,-64(fp)
  8175f4:	e0bff117 	ldw	r2,-60(fp)
  8175f8:	1885883a 	add	r2,r3,r2
  8175fc:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  817600:	e0fffe17 	ldw	r3,-8(fp)
  817604:	e0bff117 	ldw	r2,-60(fp)
  817608:	1885c83a 	sub	r2,r3,r2
  81760c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817610:	e0fff417 	ldw	r3,-48(fp)
  817614:	e0bff117 	ldw	r2,-60(fp)
  817618:	1885883a 	add	r2,r3,r2
  81761c:	10c1ffcc 	andi	r3,r2,2047
  817620:	e0bffc17 	ldw	r2,-16(fp)
  817624:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  817628:	e0bffe17 	ldw	r2,-8(fp)
  81762c:	00bfcf16 	blt	zero,r2,81756c <__alt_mem_epcs_flash_controller_0+0xff80e56c>
  817630:	00000106 	br	817638 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  817634:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  817638:	e0fff017 	ldw	r3,-64(fp)
  81763c:	e0bffd17 	ldw	r2,-12(fp)
  817640:	18802e1e 	bne	r3,r2,8176fc <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  817644:	e0bfff17 	ldw	r2,-4(fp)
  817648:	1090000c 	andi	r2,r2,16384
  81764c:	10002d1e 	bne	r2,zero,817704 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  817650:	d0a06543 	ldbu	r2,-32363(gp)
  817654:	10803fcc 	andi	r2,r2,255
  817658:	10800058 	cmpnei	r2,r2,1
  81765c:	1000161e 	bne	r2,zero,8176b8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  817660:	e0bffc17 	ldw	r2,-16(fp)
  817664:	10800c17 	ldw	r2,48(r2)
  817668:	e0bff215 	stw	r2,-56(fp)
  81766c:	00800144 	movi	r2,5
  817670:	e0bff98d 	sth	r2,-26(fp)
  817674:	00bfe0c4 	movi	r2,-125
  817678:	e0bffa05 	stb	r2,-24(fp)
  81767c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  817680:	d0a06543 	ldbu	r2,-32363(gp)
  817684:	10803fcc 	andi	r2,r2,255
  817688:	10001526 	beq	r2,zero,8176e0 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81768c:	e0fff98b 	ldhu	r3,-26(fp)
  817690:	e13ffa03 	ldbu	r4,-24(fp)
  817694:	e17ffa8b 	ldhu	r5,-22(fp)
  817698:	e0bffb44 	addi	r2,fp,-19
  81769c:	d8800015 	stw	r2,0(sp)
  8176a0:	280f883a 	mov	r7,r5
  8176a4:	200d883a 	mov	r6,r4
  8176a8:	180b883a 	mov	r5,r3
  8176ac:	e13ff217 	ldw	r4,-56(fp)
  8176b0:	08113cc0 	call	8113cc <OSFlagPend>
  8176b4:	00000a06 	br	8176e0 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8176b8:	0001883a 	nop
  8176bc:	e0bffc17 	ldw	r2,-16(fp)
  8176c0:	10c00d17 	ldw	r3,52(r2)
  8176c4:	e0bff317 	ldw	r2,-52(fp)
  8176c8:	1880051e 	bne	r3,r2,8176e0 <altera_avalon_jtag_uart_read+0x1c8>
  8176cc:	e0bffc17 	ldw	r2,-16(fp)
  8176d0:	10c00917 	ldw	r3,36(r2)
  8176d4:	e0bffc17 	ldw	r2,-16(fp)
  8176d8:	10800117 	ldw	r2,4(r2)
  8176dc:	18bff736 	bltu	r3,r2,8176bc <__alt_mem_epcs_flash_controller_0+0xff80e6bc>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8176e0:	e0bffc17 	ldw	r2,-16(fp)
  8176e4:	10c00d17 	ldw	r3,52(r2)
  8176e8:	e0bff317 	ldw	r2,-52(fp)
  8176ec:	18800726 	beq	r3,r2,81770c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8176f0:	e0bffe17 	ldw	r2,-8(fp)
  8176f4:	00bf9d16 	blt	zero,r2,81756c <__alt_mem_epcs_flash_controller_0+0xff80e56c>
  8176f8:	00000506 	br	817710 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8176fc:	0001883a 	nop
  817700:	00000306 	br	817710 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  817704:	0001883a 	nop
  817708:	00000106 	br	817710 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  81770c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  817710:	e0bffc17 	ldw	r2,-16(fp)
  817714:	10800a17 	ldw	r2,40(r2)
  817718:	1009883a 	mov	r4,r2
  81771c:	08141b80 	call	8141b8 <OSSemPost>

  if (ptr != buffer)
  817720:	e0fff017 	ldw	r3,-64(fp)
  817724:	e0bffd17 	ldw	r2,-12(fp)
  817728:	18801826 	beq	r3,r2,81778c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81772c:	0005303a 	rdctl	r2,status
  817730:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817734:	e0fff717 	ldw	r3,-36(fp)
  817738:	00bfff84 	movi	r2,-2
  81773c:	1884703a 	and	r2,r3,r2
  817740:	1001703a 	wrctl	status,r2
  
  return context;
  817744:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  817748:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81774c:	e0bffc17 	ldw	r2,-16(fp)
  817750:	10800817 	ldw	r2,32(r2)
  817754:	10c00054 	ori	r3,r2,1
  817758:	e0bffc17 	ldw	r2,-16(fp)
  81775c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817760:	e0bffc17 	ldw	r2,-16(fp)
  817764:	10800017 	ldw	r2,0(r2)
  817768:	10800104 	addi	r2,r2,4
  81776c:	1007883a 	mov	r3,r2
  817770:	e0bffc17 	ldw	r2,-16(fp)
  817774:	10800817 	ldw	r2,32(r2)
  817778:	18800035 	stwio	r2,0(r3)
  81777c:	e0bff617 	ldw	r2,-40(fp)
  817780:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817784:	e0bff517 	ldw	r2,-44(fp)
  817788:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81778c:	e0fff017 	ldw	r3,-64(fp)
  817790:	e0bffd17 	ldw	r2,-12(fp)
  817794:	18800426 	beq	r3,r2,8177a8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  817798:	e0fff017 	ldw	r3,-64(fp)
  81779c:	e0bffd17 	ldw	r2,-12(fp)
  8177a0:	1885c83a 	sub	r2,r3,r2
  8177a4:	00000606 	br	8177c0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8177a8:	e0bfff17 	ldw	r2,-4(fp)
  8177ac:	1090000c 	andi	r2,r2,16384
  8177b0:	10000226 	beq	r2,zero,8177bc <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  8177b4:	00bffd44 	movi	r2,-11
  8177b8:	00000106 	br	8177c0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  8177bc:	00bffec4 	movi	r2,-5
}
  8177c0:	e037883a 	mov	sp,fp
  8177c4:	dfc00117 	ldw	ra,4(sp)
  8177c8:	df000017 	ldw	fp,0(sp)
  8177cc:	dec00204 	addi	sp,sp,8
  8177d0:	f800283a 	ret

008177d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8177d4:	deffed04 	addi	sp,sp,-76
  8177d8:	dfc01215 	stw	ra,72(sp)
  8177dc:	df001115 	stw	fp,68(sp)
  8177e0:	df001104 	addi	fp,sp,68
  8177e4:	e13ffc15 	stw	r4,-16(fp)
  8177e8:	e17ffd15 	stw	r5,-12(fp)
  8177ec:	e1bffe15 	stw	r6,-8(fp)
  8177f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8177f4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8177f8:	e0bffd17 	ldw	r2,-12(fp)
  8177fc:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  817800:	e0bffc17 	ldw	r2,-16(fp)
  817804:	10800b17 	ldw	r2,44(r2)
  817808:	e0bff815 	stw	r2,-32(fp)
  81780c:	e03ff90d 	sth	zero,-28(fp)
  817810:	e0bff90b 	ldhu	r2,-28(fp)
  817814:	e0fffb44 	addi	r3,fp,-19
  817818:	180d883a 	mov	r6,r3
  81781c:	100b883a 	mov	r5,r2
  817820:	e13ff817 	ldw	r4,-32(fp)
  817824:	0813e400 	call	813e40 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817828:	00003706 	br	817908 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81782c:	e0bffc17 	ldw	r2,-16(fp)
  817830:	10800f17 	ldw	r2,60(r2)
  817834:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  817838:	e0bffc17 	ldw	r2,-16(fp)
  81783c:	10801017 	ldw	r2,64(r2)
  817840:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  817844:	e0fff417 	ldw	r3,-48(fp)
  817848:	e0bff017 	ldw	r2,-64(fp)
  81784c:	1880062e 	bgeu	r3,r2,817868 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  817850:	e0fff017 	ldw	r3,-64(fp)
  817854:	e0bff417 	ldw	r2,-48(fp)
  817858:	1885c83a 	sub	r2,r3,r2
  81785c:	10bfffc4 	addi	r2,r2,-1
  817860:	e0bff115 	stw	r2,-60(fp)
  817864:	00000b06 	br	817894 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  817868:	e0bff017 	ldw	r2,-64(fp)
  81786c:	10000526 	beq	r2,zero,817884 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  817870:	00c20004 	movi	r3,2048
  817874:	e0bff417 	ldw	r2,-48(fp)
  817878:	1885c83a 	sub	r2,r3,r2
  81787c:	e0bff115 	stw	r2,-60(fp)
  817880:	00000406 	br	817894 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  817884:	00c1ffc4 	movi	r3,2047
  817888:	e0bff417 	ldw	r2,-48(fp)
  81788c:	1885c83a 	sub	r2,r3,r2
  817890:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  817894:	e0bff117 	ldw	r2,-60(fp)
  817898:	10001e26 	beq	r2,zero,817914 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  81789c:	e0fffe17 	ldw	r3,-8(fp)
  8178a0:	e0bff117 	ldw	r2,-60(fp)
  8178a4:	1880022e 	bgeu	r3,r2,8178b0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  8178a8:	e0bffe17 	ldw	r2,-8(fp)
  8178ac:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8178b0:	e0bffc17 	ldw	r2,-16(fp)
  8178b4:	10c21104 	addi	r3,r2,2116
  8178b8:	e0bff417 	ldw	r2,-48(fp)
  8178bc:	1885883a 	add	r2,r3,r2
  8178c0:	e1bff117 	ldw	r6,-60(fp)
  8178c4:	e17ffd17 	ldw	r5,-12(fp)
  8178c8:	1009883a 	mov	r4,r2
  8178cc:	08066580 	call	806658 <memcpy>
      ptr   += n;
  8178d0:	e0fffd17 	ldw	r3,-12(fp)
  8178d4:	e0bff117 	ldw	r2,-60(fp)
  8178d8:	1885883a 	add	r2,r3,r2
  8178dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8178e0:	e0fffe17 	ldw	r3,-8(fp)
  8178e4:	e0bff117 	ldw	r2,-60(fp)
  8178e8:	1885c83a 	sub	r2,r3,r2
  8178ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8178f0:	e0fff417 	ldw	r3,-48(fp)
  8178f4:	e0bff117 	ldw	r2,-60(fp)
  8178f8:	1885883a 	add	r2,r3,r2
  8178fc:	10c1ffcc 	andi	r3,r2,2047
  817900:	e0bffc17 	ldw	r2,-16(fp)
  817904:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817908:	e0bffe17 	ldw	r2,-8(fp)
  81790c:	00bfc716 	blt	zero,r2,81782c <__alt_mem_epcs_flash_controller_0+0xff80e82c>
  817910:	00000106 	br	817918 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  817914:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817918:	0005303a 	rdctl	r2,status
  81791c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817920:	e0fff717 	ldw	r3,-36(fp)
  817924:	00bfff84 	movi	r2,-2
  817928:	1884703a 	and	r2,r3,r2
  81792c:	1001703a 	wrctl	status,r2
  
  return context;
  817930:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  817934:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  817938:	e0bffc17 	ldw	r2,-16(fp)
  81793c:	10800817 	ldw	r2,32(r2)
  817940:	10c00094 	ori	r3,r2,2
  817944:	e0bffc17 	ldw	r2,-16(fp)
  817948:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81794c:	e0bffc17 	ldw	r2,-16(fp)
  817950:	10800017 	ldw	r2,0(r2)
  817954:	10800104 	addi	r2,r2,4
  817958:	1007883a 	mov	r3,r2
  81795c:	e0bffc17 	ldw	r2,-16(fp)
  817960:	10800817 	ldw	r2,32(r2)
  817964:	18800035 	stwio	r2,0(r3)
  817968:	e0bff617 	ldw	r2,-40(fp)
  81796c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817970:	e0bff317 	ldw	r2,-52(fp)
  817974:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  817978:	e0bffe17 	ldw	r2,-8(fp)
  81797c:	00802a0e 	bge	zero,r2,817a28 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  817980:	e0bfff17 	ldw	r2,-4(fp)
  817984:	1090000c 	andi	r2,r2,16384
  817988:	10002a1e 	bne	r2,zero,817a34 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  81798c:	d0a06543 	ldbu	r2,-32363(gp)
  817990:	10803fcc 	andi	r2,r2,255
  817994:	10800058 	cmpnei	r2,r2,1
  817998:	1000161e 	bne	r2,zero,8179f4 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  81799c:	e0bffc17 	ldw	r2,-16(fp)
  8179a0:	10800c17 	ldw	r2,48(r2)
  8179a4:	e0bff515 	stw	r2,-44(fp)
  8179a8:	00800184 	movi	r2,6
  8179ac:	e0bff98d 	sth	r2,-26(fp)
  8179b0:	00bfe0c4 	movi	r2,-125
  8179b4:	e0bffa05 	stb	r2,-24(fp)
  8179b8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8179bc:	d0a06543 	ldbu	r2,-32363(gp)
  8179c0:	10803fcc 	andi	r2,r2,255
  8179c4:	10001526 	beq	r2,zero,817a1c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8179c8:	e0fff98b 	ldhu	r3,-26(fp)
  8179cc:	e13ffa03 	ldbu	r4,-24(fp)
  8179d0:	e17ffa8b 	ldhu	r5,-22(fp)
  8179d4:	e0bffb04 	addi	r2,fp,-20
  8179d8:	d8800015 	stw	r2,0(sp)
  8179dc:	280f883a 	mov	r7,r5
  8179e0:	200d883a 	mov	r6,r4
  8179e4:	180b883a 	mov	r5,r3
  8179e8:	e13ff517 	ldw	r4,-44(fp)
  8179ec:	08113cc0 	call	8113cc <OSFlagPend>
  8179f0:	00000a06 	br	817a1c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8179f4:	0001883a 	nop
  8179f8:	e0bffc17 	ldw	r2,-16(fp)
  8179fc:	10c01017 	ldw	r3,64(r2)
  817a00:	e0bff017 	ldw	r2,-64(fp)
  817a04:	1880051e 	bne	r3,r2,817a1c <altera_avalon_jtag_uart_write+0x248>
  817a08:	e0bffc17 	ldw	r2,-16(fp)
  817a0c:	10c00917 	ldw	r3,36(r2)
  817a10:	e0bffc17 	ldw	r2,-16(fp)
  817a14:	10800117 	ldw	r2,4(r2)
  817a18:	18bff736 	bltu	r3,r2,8179f8 <__alt_mem_epcs_flash_controller_0+0xff80e9f8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  817a1c:	e0bffc17 	ldw	r2,-16(fp)
  817a20:	10800917 	ldw	r2,36(r2)
  817a24:	1000051e 	bne	r2,zero,817a3c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  817a28:	e0bffe17 	ldw	r2,-8(fp)
  817a2c:	00bfb616 	blt	zero,r2,817908 <__alt_mem_epcs_flash_controller_0+0xff80e908>
  817a30:	00000306 	br	817a40 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  817a34:	0001883a 	nop
  817a38:	00000106 	br	817a40 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  817a3c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  817a40:	e0bffc17 	ldw	r2,-16(fp)
  817a44:	10800b17 	ldw	r2,44(r2)
  817a48:	1009883a 	mov	r4,r2
  817a4c:	08141b80 	call	8141b8 <OSSemPost>

  if (ptr != start)
  817a50:	e0fffd17 	ldw	r3,-12(fp)
  817a54:	e0bff217 	ldw	r2,-56(fp)
  817a58:	18800426 	beq	r3,r2,817a6c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  817a5c:	e0fffd17 	ldw	r3,-12(fp)
  817a60:	e0bff217 	ldw	r2,-56(fp)
  817a64:	1885c83a 	sub	r2,r3,r2
  817a68:	00000606 	br	817a84 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  817a6c:	e0bfff17 	ldw	r2,-4(fp)
  817a70:	1090000c 	andi	r2,r2,16384
  817a74:	10000226 	beq	r2,zero,817a80 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  817a78:	00bffd44 	movi	r2,-11
  817a7c:	00000106 	br	817a84 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  817a80:	00bffec4 	movi	r2,-5
}
  817a84:	e037883a 	mov	sp,fp
  817a88:	dfc00117 	ldw	ra,4(sp)
  817a8c:	df000017 	ldw	fp,0(sp)
  817a90:	dec00204 	addi	sp,sp,8
  817a94:	f800283a 	ret

00817a98 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  817a98:	defffa04 	addi	sp,sp,-24
  817a9c:	dfc00515 	stw	ra,20(sp)
  817aa0:	df000415 	stw	fp,16(sp)
  817aa4:	df000404 	addi	fp,sp,16
  817aa8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  817aac:	0007883a 	mov	r3,zero
  817ab0:	e0bfff17 	ldw	r2,-4(fp)
  817ab4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  817ab8:	e0bfff17 	ldw	r2,-4(fp)
  817abc:	10800104 	addi	r2,r2,4
  817ac0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817ac4:	0005303a 	rdctl	r2,status
  817ac8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817acc:	e0fffd17 	ldw	r3,-12(fp)
  817ad0:	00bfff84 	movi	r2,-2
  817ad4:	1884703a 	and	r2,r3,r2
  817ad8:	1001703a 	wrctl	status,r2
  
  return context;
  817adc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  817ae0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  817ae4:	08195c00 	call	8195c0 <alt_tick>
  817ae8:	e0bffc17 	ldw	r2,-16(fp)
  817aec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817af0:	e0bffe17 	ldw	r2,-8(fp)
  817af4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  817af8:	0001883a 	nop
  817afc:	e037883a 	mov	sp,fp
  817b00:	dfc00117 	ldw	ra,4(sp)
  817b04:	df000017 	ldw	fp,0(sp)
  817b08:	dec00204 	addi	sp,sp,8
  817b0c:	f800283a 	ret

00817b10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  817b10:	defff804 	addi	sp,sp,-32
  817b14:	dfc00715 	stw	ra,28(sp)
  817b18:	df000615 	stw	fp,24(sp)
  817b1c:	df000604 	addi	fp,sp,24
  817b20:	e13ffc15 	stw	r4,-16(fp)
  817b24:	e17ffd15 	stw	r5,-12(fp)
  817b28:	e1bffe15 	stw	r6,-8(fp)
  817b2c:	e1ffff15 	stw	r7,-4(fp)
  817b30:	e0bfff17 	ldw	r2,-4(fp)
  817b34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  817b38:	d0a07a17 	ldw	r2,-32280(gp)
  817b3c:	1000021e 	bne	r2,zero,817b48 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  817b40:	e0bffb17 	ldw	r2,-20(fp)
  817b44:	d0a07a15 	stw	r2,-32280(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  817b48:	e0bffc17 	ldw	r2,-16(fp)
  817b4c:	10800104 	addi	r2,r2,4
  817b50:	00c001c4 	movi	r3,7
  817b54:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  817b58:	d8000015 	stw	zero,0(sp)
  817b5c:	e1fffc17 	ldw	r7,-16(fp)
  817b60:	01802074 	movhi	r6,129
  817b64:	319ea604 	addi	r6,r6,31384
  817b68:	e17ffe17 	ldw	r5,-8(fp)
  817b6c:	e13ffd17 	ldw	r4,-12(fp)
  817b70:	080dd400 	call	80dd40 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  817b74:	0001883a 	nop
  817b78:	e037883a 	mov	sp,fp
  817b7c:	dfc00117 	ldw	ra,4(sp)
  817b80:	df000017 	ldw	fp,0(sp)
  817b84:	dec00204 	addi	sp,sp,8
  817b88:	f800283a 	ret

00817b8c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  817b8c:	defffa04 	addi	sp,sp,-24
  817b90:	dfc00515 	stw	ra,20(sp)
  817b94:	df000415 	stw	fp,16(sp)
  817b98:	df000404 	addi	fp,sp,16
  817b9c:	e13ffd15 	stw	r4,-12(fp)
  817ba0:	e17ffe15 	stw	r5,-8(fp)
  817ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  817ba8:	e0bffd17 	ldw	r2,-12(fp)
  817bac:	10800017 	ldw	r2,0(r2)
  817bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  817bb4:	e0bffc17 	ldw	r2,-16(fp)
  817bb8:	10c00a04 	addi	r3,r2,40
  817bbc:	e0bffd17 	ldw	r2,-12(fp)
  817bc0:	10800217 	ldw	r2,8(r2)
  817bc4:	100f883a 	mov	r7,r2
  817bc8:	e1bfff17 	ldw	r6,-4(fp)
  817bcc:	e17ffe17 	ldw	r5,-8(fp)
  817bd0:	1809883a 	mov	r4,r3
  817bd4:	08182040 	call	818204 <altera_avalon_uart_read>
      fd->fd_flags);
}
  817bd8:	e037883a 	mov	sp,fp
  817bdc:	dfc00117 	ldw	ra,4(sp)
  817be0:	df000017 	ldw	fp,0(sp)
  817be4:	dec00204 	addi	sp,sp,8
  817be8:	f800283a 	ret

00817bec <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  817bec:	defffa04 	addi	sp,sp,-24
  817bf0:	dfc00515 	stw	ra,20(sp)
  817bf4:	df000415 	stw	fp,16(sp)
  817bf8:	df000404 	addi	fp,sp,16
  817bfc:	e13ffd15 	stw	r4,-12(fp)
  817c00:	e17ffe15 	stw	r5,-8(fp)
  817c04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  817c08:	e0bffd17 	ldw	r2,-12(fp)
  817c0c:	10800017 	ldw	r2,0(r2)
  817c10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  817c14:	e0bffc17 	ldw	r2,-16(fp)
  817c18:	10c00a04 	addi	r3,r2,40
  817c1c:	e0bffd17 	ldw	r2,-12(fp)
  817c20:	10800217 	ldw	r2,8(r2)
  817c24:	100f883a 	mov	r7,r2
  817c28:	e1bfff17 	ldw	r6,-4(fp)
  817c2c:	e17ffe17 	ldw	r5,-8(fp)
  817c30:	1809883a 	mov	r4,r3
  817c34:	08184a80 	call	8184a8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  817c38:	e037883a 	mov	sp,fp
  817c3c:	dfc00117 	ldw	ra,4(sp)
  817c40:	df000017 	ldw	fp,0(sp)
  817c44:	dec00204 	addi	sp,sp,8
  817c48:	f800283a 	ret

00817c4c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  817c4c:	defffc04 	addi	sp,sp,-16
  817c50:	dfc00315 	stw	ra,12(sp)
  817c54:	df000215 	stw	fp,8(sp)
  817c58:	df000204 	addi	fp,sp,8
  817c5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  817c60:	e0bfff17 	ldw	r2,-4(fp)
  817c64:	10800017 	ldw	r2,0(r2)
  817c68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  817c6c:	e0bffe17 	ldw	r2,-8(fp)
  817c70:	10c00a04 	addi	r3,r2,40
  817c74:	e0bfff17 	ldw	r2,-4(fp)
  817c78:	10800217 	ldw	r2,8(r2)
  817c7c:	100b883a 	mov	r5,r2
  817c80:	1809883a 	mov	r4,r3
  817c84:	08181740 	call	818174 <altera_avalon_uart_close>
}
  817c88:	e037883a 	mov	sp,fp
  817c8c:	dfc00117 	ldw	ra,4(sp)
  817c90:	df000017 	ldw	fp,0(sp)
  817c94:	dec00204 	addi	sp,sp,8
  817c98:	f800283a 	ret

00817c9c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  817c9c:	defff304 	addi	sp,sp,-52
  817ca0:	dfc00c15 	stw	ra,48(sp)
  817ca4:	df000b15 	stw	fp,44(sp)
  817ca8:	df000b04 	addi	fp,sp,44
  817cac:	e13ffd15 	stw	r4,-12(fp)
  817cb0:	e17ffe15 	stw	r5,-8(fp)
  817cb4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  817cb8:	e0bffd17 	ldw	r2,-12(fp)
  817cbc:	10800017 	ldw	r2,0(r2)
  817cc0:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  817cc4:	e0bffd17 	ldw	r2,-12(fp)
  817cc8:	10800704 	addi	r2,r2,28
  817ccc:	e0bffa15 	stw	r2,-24(fp)
  817cd0:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  817cd4:	e0bffb0b 	ldhu	r2,-20(fp)
  817cd8:	e0fffc84 	addi	r3,fp,-14
  817cdc:	180b883a 	mov	r5,r3
  817ce0:	1009883a 	mov	r4,r2
  817ce4:	0810e080 	call	810e08 <OSFlagCreate>
  817ce8:	1007883a 	mov	r3,r2
  817cec:	e0bffa17 	ldw	r2,-24(fp)
  817cf0:	10c00015 	stw	r3,0(r2)
  return err;
  817cf4:	e0bffc83 	ldbu	r2,-14(fp)
  817cf8:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  817cfc:	1000241e 	bne	r2,zero,817d90 <altera_avalon_uart_init+0xf4>
  817d00:	e0bffd17 	ldw	r2,-12(fp)
  817d04:	10800804 	addi	r2,r2,32
  817d08:	e0bff715 	stw	r2,-36(fp)
  817d0c:	00800044 	movi	r2,1
  817d10:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  817d14:	e0bffb8b 	ldhu	r2,-18(fp)
  817d18:	1009883a 	mov	r4,r2
  817d1c:	0813b280 	call	813b28 <OSSemCreate>
  817d20:	1007883a 	mov	r3,r2
  817d24:	e0bff717 	ldw	r2,-36(fp)
  817d28:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  817d2c:	e0bff717 	ldw	r2,-36(fp)
  817d30:	10800017 	ldw	r2,0(r2)
  817d34:	10000226 	beq	r2,zero,817d40 <altera_avalon_uart_init+0xa4>
  817d38:	0005883a 	mov	r2,zero
  817d3c:	00000106 	br	817d44 <altera_avalon_uart_init+0xa8>
  817d40:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  817d44:	1000121e 	bne	r2,zero,817d90 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  817d48:	e0bffd17 	ldw	r2,-12(fp)
  817d4c:	10800904 	addi	r2,r2,36
  817d50:	e0bff815 	stw	r2,-32(fp)
  817d54:	00800044 	movi	r2,1
  817d58:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  817d5c:	e0bffc0b 	ldhu	r2,-16(fp)
  817d60:	1009883a 	mov	r4,r2
  817d64:	0813b280 	call	813b28 <OSSemCreate>
  817d68:	1007883a 	mov	r3,r2
  817d6c:	e0bff817 	ldw	r2,-32(fp)
  817d70:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  817d74:	e0bff817 	ldw	r2,-32(fp)
  817d78:	10800017 	ldw	r2,0(r2)
  817d7c:	10000226 	beq	r2,zero,817d88 <altera_avalon_uart_init+0xec>
  817d80:	0005883a 	mov	r2,zero
  817d84:	00000106 	br	817d8c <altera_avalon_uart_init+0xf0>
  817d88:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  817d8c:	10000226 	beq	r2,zero,817d98 <altera_avalon_uart_init+0xfc>
  817d90:	00800044 	movi	r2,1
  817d94:	00000106 	br	817d9c <altera_avalon_uart_init+0x100>
  817d98:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  817d9c:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  817da0:	e0bff917 	ldw	r2,-28(fp)
  817da4:	10000f1e 	bne	r2,zero,817de4 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  817da8:	e0bffd17 	ldw	r2,-12(fp)
  817dac:	00c32004 	movi	r3,3200
  817db0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  817db4:	e0bff617 	ldw	r2,-40(fp)
  817db8:	10800304 	addi	r2,r2,12
  817dbc:	e0fffd17 	ldw	r3,-12(fp)
  817dc0:	18c00117 	ldw	r3,4(r3)
  817dc4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  817dc8:	d8000015 	stw	zero,0(sp)
  817dcc:	e1fffd17 	ldw	r7,-12(fp)
  817dd0:	01802074 	movhi	r6,129
  817dd4:	319f7f04 	addi	r6,r6,32252
  817dd8:	e17fff17 	ldw	r5,-4(fp)
  817ddc:	e13ffe17 	ldw	r4,-8(fp)
  817de0:	080dd400 	call	80dd40 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  817de4:	0001883a 	nop
  817de8:	e037883a 	mov	sp,fp
  817dec:	dfc00117 	ldw	ra,4(sp)
  817df0:	df000017 	ldw	fp,0(sp)
  817df4:	dec00204 	addi	sp,sp,8
  817df8:	f800283a 	ret

00817dfc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  817dfc:	defffa04 	addi	sp,sp,-24
  817e00:	dfc00515 	stw	ra,20(sp)
  817e04:	df000415 	stw	fp,16(sp)
  817e08:	df000404 	addi	fp,sp,16
  817e0c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  817e10:	e0bfff17 	ldw	r2,-4(fp)
  817e14:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  817e18:	e0bffc17 	ldw	r2,-16(fp)
  817e1c:	10800017 	ldw	r2,0(r2)
  817e20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  817e24:	e0bffd17 	ldw	r2,-12(fp)
  817e28:	10800204 	addi	r2,r2,8
  817e2c:	10800037 	ldwio	r2,0(r2)
  817e30:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  817e34:	e0bffd17 	ldw	r2,-12(fp)
  817e38:	10800204 	addi	r2,r2,8
  817e3c:	0007883a 	mov	r3,zero
  817e40:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  817e44:	e0bffd17 	ldw	r2,-12(fp)
  817e48:	10800204 	addi	r2,r2,8
  817e4c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  817e50:	e0bffe17 	ldw	r2,-8(fp)
  817e54:	1080200c 	andi	r2,r2,128
  817e58:	10000326 	beq	r2,zero,817e68 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  817e5c:	e17ffe17 	ldw	r5,-8(fp)
  817e60:	e13ffc17 	ldw	r4,-16(fp)
  817e64:	0817e980 	call	817e98 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  817e68:	e0bffe17 	ldw	r2,-8(fp)
  817e6c:	1081100c 	andi	r2,r2,1088
  817e70:	10000326 	beq	r2,zero,817e80 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  817e74:	e17ffe17 	ldw	r5,-8(fp)
  817e78:	e13ffc17 	ldw	r4,-16(fp)
  817e7c:	0817fd00 	call	817fd0 <altera_avalon_uart_txirq>
  }
  

}
  817e80:	0001883a 	nop
  817e84:	e037883a 	mov	sp,fp
  817e88:	dfc00117 	ldw	ra,4(sp)
  817e8c:	df000017 	ldw	fp,0(sp)
  817e90:	dec00204 	addi	sp,sp,8
  817e94:	f800283a 	ret

00817e98 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  817e98:	defff904 	addi	sp,sp,-28
  817e9c:	dfc00615 	stw	ra,24(sp)
  817ea0:	df000515 	stw	fp,20(sp)
  817ea4:	df000504 	addi	fp,sp,20
  817ea8:	e13ffe15 	stw	r4,-8(fp)
  817eac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  817eb0:	e0bfff17 	ldw	r2,-4(fp)
  817eb4:	108000cc 	andi	r2,r2,3
  817eb8:	10003f1e 	bne	r2,zero,817fb8 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  817ebc:	e0bffe17 	ldw	r2,-8(fp)
  817ec0:	10c00317 	ldw	r3,12(r2)
  817ec4:	e0bffe17 	ldw	r2,-8(fp)
  817ec8:	10800217 	ldw	r2,8(r2)
  817ecc:	1880121e 	bne	r3,r2,817f18 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  817ed0:	e0bffe17 	ldw	r2,-8(fp)
  817ed4:	10800717 	ldw	r2,28(r2)
  817ed8:	e0bffc15 	stw	r2,-16(fp)
  817edc:	00800044 	movi	r2,1
  817ee0:	e0bffd0d 	sth	r2,-12(fp)
  817ee4:	00800044 	movi	r2,1
  817ee8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817eec:	d0a06543 	ldbu	r2,-32363(gp)
  817ef0:	10803fcc 	andi	r2,r2,255
  817ef4:	10000826 	beq	r2,zero,817f18 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  817ef8:	e0bffd0b 	ldhu	r2,-12(fp)
  817efc:	e0fffd83 	ldbu	r3,-10(fp)
  817f00:	e13ffdc4 	addi	r4,fp,-9
  817f04:	200f883a 	mov	r7,r4
  817f08:	180d883a 	mov	r6,r3
  817f0c:	100b883a 	mov	r5,r2
  817f10:	e13ffc17 	ldw	r4,-16(fp)
  817f14:	08119e40 	call	8119e4 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  817f18:	e0bffe17 	ldw	r2,-8(fp)
  817f1c:	10800317 	ldw	r2,12(r2)
  817f20:	10800044 	addi	r2,r2,1
  817f24:	10800fcc 	andi	r2,r2,63
  817f28:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  817f2c:	e0bffe17 	ldw	r2,-8(fp)
  817f30:	10800317 	ldw	r2,12(r2)
  817f34:	e0fffe17 	ldw	r3,-8(fp)
  817f38:	18c00017 	ldw	r3,0(r3)
  817f3c:	18c00037 	ldwio	r3,0(r3)
  817f40:	1809883a 	mov	r4,r3
  817f44:	e0fffe17 	ldw	r3,-8(fp)
  817f48:	1885883a 	add	r2,r3,r2
  817f4c:	10800a04 	addi	r2,r2,40
  817f50:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  817f54:	e0bffe17 	ldw	r2,-8(fp)
  817f58:	e0fffb17 	ldw	r3,-20(fp)
  817f5c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  817f60:	e0bffe17 	ldw	r2,-8(fp)
  817f64:	10800317 	ldw	r2,12(r2)
  817f68:	10800044 	addi	r2,r2,1
  817f6c:	10800fcc 	andi	r2,r2,63
  817f70:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  817f74:	e0bffe17 	ldw	r2,-8(fp)
  817f78:	10c00217 	ldw	r3,8(r2)
  817f7c:	e0bffb17 	ldw	r2,-20(fp)
  817f80:	18800e1e 	bne	r3,r2,817fbc <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  817f84:	e0bffe17 	ldw	r2,-8(fp)
  817f88:	10c00117 	ldw	r3,4(r2)
  817f8c:	00bfdfc4 	movi	r2,-129
  817f90:	1886703a 	and	r3,r3,r2
  817f94:	e0bffe17 	ldw	r2,-8(fp)
  817f98:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  817f9c:	e0bffe17 	ldw	r2,-8(fp)
  817fa0:	10800017 	ldw	r2,0(r2)
  817fa4:	10800304 	addi	r2,r2,12
  817fa8:	e0fffe17 	ldw	r3,-8(fp)
  817fac:	18c00117 	ldw	r3,4(r3)
  817fb0:	10c00035 	stwio	r3,0(r2)
  817fb4:	00000106 	br	817fbc <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  817fb8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  817fbc:	e037883a 	mov	sp,fp
  817fc0:	dfc00117 	ldw	ra,4(sp)
  817fc4:	df000017 	ldw	fp,0(sp)
  817fc8:	dec00204 	addi	sp,sp,8
  817fcc:	f800283a 	ret

00817fd0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  817fd0:	defffa04 	addi	sp,sp,-24
  817fd4:	dfc00515 	stw	ra,20(sp)
  817fd8:	df000415 	stw	fp,16(sp)
  817fdc:	df000404 	addi	fp,sp,16
  817fe0:	e13ffe15 	stw	r4,-8(fp)
  817fe4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  817fe8:	e0bffe17 	ldw	r2,-8(fp)
  817fec:	10c00417 	ldw	r3,16(r2)
  817ff0:	e0bffe17 	ldw	r2,-8(fp)
  817ff4:	10800517 	ldw	r2,20(r2)
  817ff8:	18804726 	beq	r3,r2,818118 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  817ffc:	e0bffe17 	ldw	r2,-8(fp)
  818000:	10800617 	ldw	r2,24(r2)
  818004:	1080008c 	andi	r2,r2,2
  818008:	10000326 	beq	r2,zero,818018 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81800c:	e0bfff17 	ldw	r2,-4(fp)
  818010:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  818014:	10003226 	beq	r2,zero,8180e0 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  818018:	e0bffe17 	ldw	r2,-8(fp)
  81801c:	10c00417 	ldw	r3,16(r2)
  818020:	e0bffe17 	ldw	r2,-8(fp)
  818024:	10800517 	ldw	r2,20(r2)
  818028:	10800044 	addi	r2,r2,1
  81802c:	10800fcc 	andi	r2,r2,63
  818030:	1880121e 	bne	r3,r2,81807c <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  818034:	e0bffe17 	ldw	r2,-8(fp)
  818038:	10800717 	ldw	r2,28(r2)
  81803c:	e0bffc15 	stw	r2,-16(fp)
  818040:	00800084 	movi	r2,2
  818044:	e0bffd0d 	sth	r2,-12(fp)
  818048:	00800044 	movi	r2,1
  81804c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  818050:	d0a06543 	ldbu	r2,-32363(gp)
  818054:	10803fcc 	andi	r2,r2,255
  818058:	10000826 	beq	r2,zero,81807c <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  81805c:	e0bffd0b 	ldhu	r2,-12(fp)
  818060:	e0fffd83 	ldbu	r3,-10(fp)
  818064:	e13ffdc4 	addi	r4,fp,-9
  818068:	200f883a 	mov	r7,r4
  81806c:	180d883a 	mov	r6,r3
  818070:	100b883a 	mov	r5,r2
  818074:	e13ffc17 	ldw	r4,-16(fp)
  818078:	08119e40 	call	8119e4 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  81807c:	e0bffe17 	ldw	r2,-8(fp)
  818080:	10800017 	ldw	r2,0(r2)
  818084:	10800104 	addi	r2,r2,4
  818088:	e0fffe17 	ldw	r3,-8(fp)
  81808c:	18c00417 	ldw	r3,16(r3)
  818090:	e13ffe17 	ldw	r4,-8(fp)
  818094:	20c7883a 	add	r3,r4,r3
  818098:	18c01a04 	addi	r3,r3,104
  81809c:	18c00003 	ldbu	r3,0(r3)
  8180a0:	18c03fcc 	andi	r3,r3,255
  8180a4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8180a8:	e0bffe17 	ldw	r2,-8(fp)
  8180ac:	10800417 	ldw	r2,16(r2)
  8180b0:	10800044 	addi	r2,r2,1
  8180b4:	e0fffe17 	ldw	r3,-8(fp)
  8180b8:	18800415 	stw	r2,16(r3)
  8180bc:	10c00fcc 	andi	r3,r2,63
  8180c0:	e0bffe17 	ldw	r2,-8(fp)
  8180c4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8180c8:	e0bffe17 	ldw	r2,-8(fp)
  8180cc:	10800117 	ldw	r2,4(r2)
  8180d0:	10c01014 	ori	r3,r2,64
  8180d4:	e0bffe17 	ldw	r2,-8(fp)
  8180d8:	10c00115 	stw	r3,4(r2)
  8180dc:	00000e06 	br	818118 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8180e0:	e0bffe17 	ldw	r2,-8(fp)
  8180e4:	10800017 	ldw	r2,0(r2)
  8180e8:	10800204 	addi	r2,r2,8
  8180ec:	10800037 	ldwio	r2,0(r2)
  8180f0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8180f4:	e0bfff17 	ldw	r2,-4(fp)
  8180f8:	1082000c 	andi	r2,r2,2048
  8180fc:	1000061e 	bne	r2,zero,818118 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  818100:	e0bffe17 	ldw	r2,-8(fp)
  818104:	10c00117 	ldw	r3,4(r2)
  818108:	00bfefc4 	movi	r2,-65
  81810c:	1886703a 	and	r3,r3,r2
  818110:	e0bffe17 	ldw	r2,-8(fp)
  818114:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  818118:	e0bffe17 	ldw	r2,-8(fp)
  81811c:	10c00417 	ldw	r3,16(r2)
  818120:	e0bffe17 	ldw	r2,-8(fp)
  818124:	10800517 	ldw	r2,20(r2)
  818128:	1880061e 	bne	r3,r2,818144 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81812c:	e0bffe17 	ldw	r2,-8(fp)
  818130:	10c00117 	ldw	r3,4(r2)
  818134:	00beefc4 	movi	r2,-1089
  818138:	1886703a 	and	r3,r3,r2
  81813c:	e0bffe17 	ldw	r2,-8(fp)
  818140:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  818144:	e0bffe17 	ldw	r2,-8(fp)
  818148:	10800017 	ldw	r2,0(r2)
  81814c:	10800304 	addi	r2,r2,12
  818150:	e0fffe17 	ldw	r3,-8(fp)
  818154:	18c00117 	ldw	r3,4(r3)
  818158:	10c00035 	stwio	r3,0(r2)
}
  81815c:	0001883a 	nop
  818160:	e037883a 	mov	sp,fp
  818164:	dfc00117 	ldw	ra,4(sp)
  818168:	df000017 	ldw	fp,0(sp)
  81816c:	dec00204 	addi	sp,sp,8
  818170:	f800283a 	ret

00818174 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  818174:	defffd04 	addi	sp,sp,-12
  818178:	df000215 	stw	fp,8(sp)
  81817c:	df000204 	addi	fp,sp,8
  818180:	e13ffe15 	stw	r4,-8(fp)
  818184:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  818188:	00000506 	br	8181a0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81818c:	e0bfff17 	ldw	r2,-4(fp)
  818190:	1090000c 	andi	r2,r2,16384
  818194:	10000226 	beq	r2,zero,8181a0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  818198:	00bffd44 	movi	r2,-11
  81819c:	00000606 	br	8181b8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8181a0:	e0bffe17 	ldw	r2,-8(fp)
  8181a4:	10c00417 	ldw	r3,16(r2)
  8181a8:	e0bffe17 	ldw	r2,-8(fp)
  8181ac:	10800517 	ldw	r2,20(r2)
  8181b0:	18bff61e 	bne	r3,r2,81818c <__alt_mem_epcs_flash_controller_0+0xff80f18c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8181b4:	0005883a 	mov	r2,zero
}
  8181b8:	e037883a 	mov	sp,fp
  8181bc:	df000017 	ldw	fp,0(sp)
  8181c0:	dec00104 	addi	sp,sp,4
  8181c4:	f800283a 	ret

008181c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8181c8:	defffe04 	addi	sp,sp,-8
  8181cc:	dfc00115 	stw	ra,4(sp)
  8181d0:	df000015 	stw	fp,0(sp)
  8181d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8181d8:	d0a02717 	ldw	r2,-32612(gp)
  8181dc:	10000326 	beq	r2,zero,8181ec <alt_get_errno+0x24>
  8181e0:	d0a02717 	ldw	r2,-32612(gp)
  8181e4:	103ee83a 	callr	r2
  8181e8:	00000106 	br	8181f0 <alt_get_errno+0x28>
  8181ec:	d0a05b04 	addi	r2,gp,-32404
}
  8181f0:	e037883a 	mov	sp,fp
  8181f4:	dfc00117 	ldw	ra,4(sp)
  8181f8:	df000017 	ldw	fp,0(sp)
  8181fc:	dec00204 	addi	sp,sp,8
  818200:	f800283a 	ret

00818204 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  818204:	deffec04 	addi	sp,sp,-80
  818208:	dfc01315 	stw	ra,76(sp)
  81820c:	df001215 	stw	fp,72(sp)
  818210:	df001204 	addi	fp,sp,72
  818214:	e13ffc15 	stw	r4,-16(fp)
  818218:	e17ffd15 	stw	r5,-12(fp)
  81821c:	e1bffe15 	stw	r6,-8(fp)
  818220:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  818224:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  818228:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  81822c:	e0bfff17 	ldw	r2,-4(fp)
  818230:	1090000c 	andi	r2,r2,16384
  818234:	1005003a 	cmpeq	r2,r2,zero
  818238:	10803fcc 	andi	r2,r2,255
  81823c:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  818240:	e0bffc17 	ldw	r2,-16(fp)
  818244:	10800817 	ldw	r2,32(r2)
  818248:	e0bff815 	stw	r2,-32(fp)
  81824c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  818250:	e0bff90b 	ldhu	r2,-28(fp)
  818254:	e0fffb44 	addi	r3,fp,-19
  818258:	180d883a 	mov	r6,r3
  81825c:	100b883a 	mov	r5,r2
  818260:	e13ff817 	ldw	r4,-32(fp)
  818264:	0813e400 	call	813e40 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  818268:	00001306 	br	8182b8 <altera_avalon_uart_read+0xb4>
    {
      count++;
  81826c:	e0bff017 	ldw	r2,-64(fp)
  818270:	10800044 	addi	r2,r2,1
  818274:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  818278:	e0bffd17 	ldw	r2,-12(fp)
  81827c:	10c00044 	addi	r3,r2,1
  818280:	e0fffd15 	stw	r3,-12(fp)
  818284:	e0fffc17 	ldw	r3,-16(fp)
  818288:	18c00217 	ldw	r3,8(r3)
  81828c:	e13ffc17 	ldw	r4,-16(fp)
  818290:	20c7883a 	add	r3,r4,r3
  818294:	18c00a04 	addi	r3,r3,40
  818298:	18c00003 	ldbu	r3,0(r3)
  81829c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8182a0:	e0bffc17 	ldw	r2,-16(fp)
  8182a4:	10800217 	ldw	r2,8(r2)
  8182a8:	10800044 	addi	r2,r2,1
  8182ac:	10c00fcc 	andi	r3,r2,63
  8182b0:	e0bffc17 	ldw	r2,-16(fp)
  8182b4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8182b8:	e0fff017 	ldw	r3,-64(fp)
  8182bc:	e0bffe17 	ldw	r2,-8(fp)
  8182c0:	1880050e 	bge	r3,r2,8182d8 <altera_avalon_uart_read+0xd4>
  8182c4:	e0bffc17 	ldw	r2,-16(fp)
  8182c8:	10c00217 	ldw	r3,8(r2)
  8182cc:	e0bffc17 	ldw	r2,-16(fp)
  8182d0:	10800317 	ldw	r2,12(r2)
  8182d4:	18bfe51e 	bne	r3,r2,81826c <__alt_mem_epcs_flash_controller_0+0xff80f26c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8182d8:	e0bff017 	ldw	r2,-64(fp)
  8182dc:	10003a1e 	bne	r2,zero,8183c8 <altera_avalon_uart_read+0x1c4>
  8182e0:	e0bffc17 	ldw	r2,-16(fp)
  8182e4:	10c00217 	ldw	r3,8(r2)
  8182e8:	e0bffc17 	ldw	r2,-16(fp)
  8182ec:	10800317 	ldw	r2,12(r2)
  8182f0:	1880351e 	bne	r3,r2,8183c8 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  8182f4:	e0bff117 	ldw	r2,-60(fp)
  8182f8:	1000071e 	bne	r2,zero,818318 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8182fc:	08181c80 	call	8181c8 <alt_get_errno>
  818300:	1007883a 	mov	r3,r2
  818304:	008002c4 	movi	r2,11
  818308:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  81830c:	00800044 	movi	r2,1
  818310:	e0bfef05 	stb	r2,-68(fp)
        break;
  818314:	00003006 	br	8183d8 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818318:	0005303a 	rdctl	r2,status
  81831c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818320:	e0fff517 	ldw	r3,-44(fp)
  818324:	00bfff84 	movi	r2,-2
  818328:	1884703a 	and	r2,r3,r2
  81832c:	1001703a 	wrctl	status,r2
  
  return context;
  818330:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  818334:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  818338:	e0bffc17 	ldw	r2,-16(fp)
  81833c:	10800117 	ldw	r2,4(r2)
  818340:	10c02014 	ori	r3,r2,128
  818344:	e0bffc17 	ldw	r2,-16(fp)
  818348:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81834c:	e0bffc17 	ldw	r2,-16(fp)
  818350:	10800017 	ldw	r2,0(r2)
  818354:	10800304 	addi	r2,r2,12
  818358:	e0fffc17 	ldw	r3,-16(fp)
  81835c:	18c00117 	ldw	r3,4(r3)
  818360:	10c00035 	stwio	r3,0(r2)
  818364:	e0bff417 	ldw	r2,-48(fp)
  818368:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81836c:	e0bff617 	ldw	r2,-40(fp)
  818370:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  818374:	e0bffc17 	ldw	r2,-16(fp)
  818378:	10800717 	ldw	r2,28(r2)
  81837c:	e0bff215 	stw	r2,-56(fp)
  818380:	00800044 	movi	r2,1
  818384:	e0bff98d 	sth	r2,-26(fp)
  818388:	00bfe0c4 	movi	r2,-125
  81838c:	e0bffa05 	stb	r2,-24(fp)
  818390:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  818394:	d0a06543 	ldbu	r2,-32363(gp)
  818398:	10803fcc 	andi	r2,r2,255
  81839c:	10000a26 	beq	r2,zero,8183c8 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8183a0:	e0fff98b 	ldhu	r3,-26(fp)
  8183a4:	e13ffa03 	ldbu	r4,-24(fp)
  8183a8:	e17ffa8b 	ldhu	r5,-22(fp)
  8183ac:	e0bffb04 	addi	r2,fp,-20
  8183b0:	d8800015 	stw	r2,0(sp)
  8183b4:	280f883a 	mov	r7,r5
  8183b8:	200d883a 	mov	r6,r4
  8183bc:	180b883a 	mov	r5,r3
  8183c0:	e13ff217 	ldw	r4,-56(fp)
  8183c4:	08113cc0 	call	8113cc <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8183c8:	e0bff017 	ldw	r2,-64(fp)
  8183cc:	1000021e 	bne	r2,zero,8183d8 <altera_avalon_uart_read+0x1d4>
  8183d0:	e0bffe17 	ldw	r2,-8(fp)
  8183d4:	103fb81e 	bne	r2,zero,8182b8 <__alt_mem_epcs_flash_controller_0+0xff80f2b8>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  8183d8:	e0bffc17 	ldw	r2,-16(fp)
  8183dc:	10800817 	ldw	r2,32(r2)
  8183e0:	1009883a 	mov	r4,r2
  8183e4:	08141b80 	call	8141b8 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8183e8:	0005303a 	rdctl	r2,status
  8183ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8183f0:	e0fff717 	ldw	r3,-36(fp)
  8183f4:	00bfff84 	movi	r2,-2
  8183f8:	1884703a 	and	r2,r3,r2
  8183fc:	1001703a 	wrctl	status,r2
  
  return context;
  818400:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  818404:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  818408:	e0bffc17 	ldw	r2,-16(fp)
  81840c:	10800117 	ldw	r2,4(r2)
  818410:	10c02014 	ori	r3,r2,128
  818414:	e0bffc17 	ldw	r2,-16(fp)
  818418:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81841c:	e0bffc17 	ldw	r2,-16(fp)
  818420:	10800017 	ldw	r2,0(r2)
  818424:	10800304 	addi	r2,r2,12
  818428:	e0fffc17 	ldw	r3,-16(fp)
  81842c:	18c00117 	ldw	r3,4(r3)
  818430:	10c00035 	stwio	r3,0(r2)
  818434:	e0bff417 	ldw	r2,-48(fp)
  818438:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81843c:	e0bff317 	ldw	r2,-52(fp)
  818440:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  818444:	e0bfef03 	ldbu	r2,-68(fp)
  818448:	10000226 	beq	r2,zero,818454 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  81844c:	00bffd44 	movi	r2,-11
  818450:	00000106 	br	818458 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  818454:	e0bff017 	ldw	r2,-64(fp)
  }
}
  818458:	e037883a 	mov	sp,fp
  81845c:	dfc00117 	ldw	ra,4(sp)
  818460:	df000017 	ldw	fp,0(sp)
  818464:	dec00204 	addi	sp,sp,8
  818468:	f800283a 	ret

0081846c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81846c:	defffe04 	addi	sp,sp,-8
  818470:	dfc00115 	stw	ra,4(sp)
  818474:	df000015 	stw	fp,0(sp)
  818478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81847c:	d0a02717 	ldw	r2,-32612(gp)
  818480:	10000326 	beq	r2,zero,818490 <alt_get_errno+0x24>
  818484:	d0a02717 	ldw	r2,-32612(gp)
  818488:	103ee83a 	callr	r2
  81848c:	00000106 	br	818494 <alt_get_errno+0x28>
  818490:	d0a05b04 	addi	r2,gp,-32404
}
  818494:	e037883a 	mov	sp,fp
  818498:	dfc00117 	ldw	ra,4(sp)
  81849c:	df000017 	ldw	fp,0(sp)
  8184a0:	dec00204 	addi	sp,sp,8
  8184a4:	f800283a 	ret

008184a8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8184a8:	deffec04 	addi	sp,sp,-80
  8184ac:	dfc01315 	stw	ra,76(sp)
  8184b0:	df001215 	stw	fp,72(sp)
  8184b4:	df001204 	addi	fp,sp,72
  8184b8:	e13ffc15 	stw	r4,-16(fp)
  8184bc:	e17ffd15 	stw	r5,-12(fp)
  8184c0:	e1bffe15 	stw	r6,-8(fp)
  8184c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8184c8:	e0bffe17 	ldw	r2,-8(fp)
  8184cc:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8184d0:	e0bfff17 	ldw	r2,-4(fp)
  8184d4:	1090000c 	andi	r2,r2,16384
  8184d8:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  8184dc:	e0bffc17 	ldw	r2,-16(fp)
  8184e0:	10800917 	ldw	r2,36(r2)
  8184e4:	e0bff815 	stw	r2,-32(fp)
  8184e8:	e03ff90d 	sth	zero,-28(fp)
  8184ec:	e0bff90b 	ldhu	r2,-28(fp)
  8184f0:	e0fffb44 	addi	r3,fp,-19
  8184f4:	180d883a 	mov	r6,r3
  8184f8:	100b883a 	mov	r5,r2
  8184fc:	e13ff817 	ldw	r4,-32(fp)
  818500:	0813e400 	call	813e40 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  818504:	00005106 	br	81864c <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  818508:	e0bffc17 	ldw	r2,-16(fp)
  81850c:	10800517 	ldw	r2,20(r2)
  818510:	10800044 	addi	r2,r2,1
  818514:	10800fcc 	andi	r2,r2,63
  818518:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  81851c:	e0bffc17 	ldw	r2,-16(fp)
  818520:	10c00417 	ldw	r3,16(r2)
  818524:	e0bff217 	ldw	r2,-56(fp)
  818528:	1880371e 	bne	r3,r2,818608 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  81852c:	e0bff017 	ldw	r2,-64(fp)
  818530:	10000526 	beq	r2,zero,818548 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  818534:	081846c0 	call	81846c <alt_get_errno>
  818538:	1007883a 	mov	r3,r2
  81853c:	008002c4 	movi	r2,11
  818540:	18800015 	stw	r2,0(r3)
        break;
  818544:	00004306 	br	818654 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818548:	0005303a 	rdctl	r2,status
  81854c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818550:	e0fff517 	ldw	r3,-44(fp)
  818554:	00bfff84 	movi	r2,-2
  818558:	1884703a 	and	r2,r3,r2
  81855c:	1001703a 	wrctl	status,r2
  
  return context;
  818560:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  818564:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  818568:	e0bffc17 	ldw	r2,-16(fp)
  81856c:	10800117 	ldw	r2,4(r2)
  818570:	10c11014 	ori	r3,r2,1088
  818574:	e0bffc17 	ldw	r2,-16(fp)
  818578:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81857c:	e0bffc17 	ldw	r2,-16(fp)
  818580:	10800017 	ldw	r2,0(r2)
  818584:	10800304 	addi	r2,r2,12
  818588:	e0fffc17 	ldw	r3,-16(fp)
  81858c:	18c00117 	ldw	r3,4(r3)
  818590:	10c00035 	stwio	r3,0(r2)
  818594:	e0bff417 	ldw	r2,-48(fp)
  818598:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81859c:	e0bff117 	ldw	r2,-60(fp)
  8185a0:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  8185a4:	e0bffc17 	ldw	r2,-16(fp)
  8185a8:	10800717 	ldw	r2,28(r2)
  8185ac:	e0bff315 	stw	r2,-52(fp)
  8185b0:	00800084 	movi	r2,2
  8185b4:	e0bff98d 	sth	r2,-26(fp)
  8185b8:	00bfe0c4 	movi	r2,-125
  8185bc:	e0bffa05 	stb	r2,-24(fp)
  8185c0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8185c4:	d0a06543 	ldbu	r2,-32363(gp)
  8185c8:	10803fcc 	andi	r2,r2,255
  8185cc:	10000a26 	beq	r2,zero,8185f8 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8185d0:	e0fff98b 	ldhu	r3,-26(fp)
  8185d4:	e13ffa03 	ldbu	r4,-24(fp)
  8185d8:	e17ffa8b 	ldhu	r5,-22(fp)
  8185dc:	e0bffb04 	addi	r2,fp,-20
  8185e0:	d8800015 	stw	r2,0(sp)
  8185e4:	280f883a 	mov	r7,r5
  8185e8:	200d883a 	mov	r6,r4
  8185ec:	180b883a 	mov	r5,r3
  8185f0:	e13ff317 	ldw	r4,-52(fp)
  8185f4:	08113cc0 	call	8113cc <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8185f8:	e0bffc17 	ldw	r2,-16(fp)
  8185fc:	10c00417 	ldw	r3,16(r2)
  818600:	e0bff217 	ldw	r2,-56(fp)
  818604:	18bfe726 	beq	r3,r2,8185a4 <__alt_mem_epcs_flash_controller_0+0xff80f5a4>
      }
    }

    count--;
  818608:	e0bfef17 	ldw	r2,-68(fp)
  81860c:	10bfffc4 	addi	r2,r2,-1
  818610:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  818614:	e0bffc17 	ldw	r2,-16(fp)
  818618:	10c00517 	ldw	r3,20(r2)
  81861c:	e0bffd17 	ldw	r2,-12(fp)
  818620:	11000044 	addi	r4,r2,1
  818624:	e13ffd15 	stw	r4,-12(fp)
  818628:	10800003 	ldbu	r2,0(r2)
  81862c:	1009883a 	mov	r4,r2
  818630:	e0bffc17 	ldw	r2,-16(fp)
  818634:	10c5883a 	add	r2,r2,r3
  818638:	10801a04 	addi	r2,r2,104
  81863c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  818640:	e0bffc17 	ldw	r2,-16(fp)
  818644:	e0fff217 	ldw	r3,-56(fp)
  818648:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81864c:	e0bfef17 	ldw	r2,-68(fp)
  818650:	103fad1e 	bne	r2,zero,818508 <__alt_mem_epcs_flash_controller_0+0xff80f508>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  818654:	e0bffc17 	ldw	r2,-16(fp)
  818658:	10800917 	ldw	r2,36(r2)
  81865c:	1009883a 	mov	r4,r2
  818660:	08141b80 	call	8141b8 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818664:	0005303a 	rdctl	r2,status
  818668:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81866c:	e0fff717 	ldw	r3,-36(fp)
  818670:	00bfff84 	movi	r2,-2
  818674:	1884703a 	and	r2,r3,r2
  818678:	1001703a 	wrctl	status,r2
  
  return context;
  81867c:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  818680:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  818684:	e0bffc17 	ldw	r2,-16(fp)
  818688:	10800117 	ldw	r2,4(r2)
  81868c:	10c11014 	ori	r3,r2,1088
  818690:	e0bffc17 	ldw	r2,-16(fp)
  818694:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  818698:	e0bffc17 	ldw	r2,-16(fp)
  81869c:	10800017 	ldw	r2,0(r2)
  8186a0:	10800304 	addi	r2,r2,12
  8186a4:	e0fffc17 	ldw	r3,-16(fp)
  8186a8:	18c00117 	ldw	r3,4(r3)
  8186ac:	10c00035 	stwio	r3,0(r2)
  8186b0:	e0bff417 	ldw	r2,-48(fp)
  8186b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8186b8:	e0bff617 	ldw	r2,-40(fp)
  8186bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8186c0:	e0fffe17 	ldw	r3,-8(fp)
  8186c4:	e0bfef17 	ldw	r2,-68(fp)
  8186c8:	1885c83a 	sub	r2,r3,r2
}
  8186cc:	e037883a 	mov	sp,fp
  8186d0:	dfc00117 	ldw	ra,4(sp)
  8186d4:	df000017 	ldw	fp,0(sp)
  8186d8:	dec00204 	addi	sp,sp,8
  8186dc:	f800283a 	ret

008186e0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  8186e0:	defff904 	addi	sp,sp,-28
  8186e4:	dfc00615 	stw	ra,24(sp)
  8186e8:	df000515 	stw	fp,20(sp)
  8186ec:	df000504 	addi	fp,sp,20
  8186f0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  8186f4:	00800144 	movi	r2,5
  8186f8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  8186fc:	d8000215 	stw	zero,8(sp)
  818700:	e0bffe44 	addi	r2,fp,-7
  818704:	d8800115 	stw	r2,4(sp)
  818708:	00800044 	movi	r2,1
  81870c:	d8800015 	stw	r2,0(sp)
  818710:	e1fffe04 	addi	r7,fp,-8
  818714:	01800044 	movi	r6,1
  818718:	000b883a 	mov	r5,zero
  81871c:	e13fff17 	ldw	r4,-4(fp)
  818720:	0819a440 	call	819a44 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  818724:	e0bffe43 	ldbu	r2,-7(fp)
}
  818728:	e037883a 	mov	sp,fp
  81872c:	dfc00117 	ldw	ra,4(sp)
  818730:	df000017 	ldw	fp,0(sp)
  818734:	dec00204 	addi	sp,sp,8
  818738:	f800283a 	ret

0081873c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  81873c:	defffd04 	addi	sp,sp,-12
  818740:	dfc00215 	stw	ra,8(sp)
  818744:	df000115 	stw	fp,4(sp)
  818748:	df000104 	addi	fp,sp,4
  81874c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  818750:	e13fff17 	ldw	r4,-4(fp)
  818754:	08186e00 	call	8186e0 <epcs_read_status_register>
  818758:	10803fcc 	andi	r2,r2,255
  81875c:	1080004c 	andi	r2,r2,1
}
  818760:	e037883a 	mov	sp,fp
  818764:	dfc00117 	ldw	ra,4(sp)
  818768:	df000017 	ldw	fp,0(sp)
  81876c:	dec00204 	addi	sp,sp,8
  818770:	f800283a 	ret

00818774 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  818774:	defffd04 	addi	sp,sp,-12
  818778:	dfc00215 	stw	ra,8(sp)
  81877c:	df000115 	stw	fp,4(sp)
  818780:	df000104 	addi	fp,sp,4
  818784:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  818788:	0001883a 	nop
  81878c:	e13fff17 	ldw	r4,-4(fp)
  818790:	081873c0 	call	81873c <epcs_test_wip>
  818794:	103ffd1e 	bne	r2,zero,81878c <__alt_mem_epcs_flash_controller_0+0xff80f78c>
  {
  }
}
  818798:	0001883a 	nop
  81879c:	e037883a 	mov	sp,fp
  8187a0:	dfc00117 	ldw	ra,4(sp)
  8187a4:	df000017 	ldw	fp,0(sp)
  8187a8:	dec00204 	addi	sp,sp,8
  8187ac:	f800283a 	ret

008187b0 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  8187b0:	defff604 	addi	sp,sp,-40
  8187b4:	dfc00915 	stw	ra,36(sp)
  8187b8:	df000815 	stw	fp,32(sp)
  8187bc:	df000804 	addi	fp,sp,32
  8187c0:	e13ffd15 	stw	r4,-12(fp)
  8187c4:	e17ffe15 	stw	r5,-8(fp)
  8187c8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  8187cc:	e0bfff17 	ldw	r2,-4(fp)
  8187d0:	10001226 	beq	r2,zero,81881c <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  8187d4:	00bff604 	movi	r2,-40
  8187d8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  8187dc:	e0bffe17 	ldw	r2,-8(fp)
  8187e0:	1004d63a 	srli	r2,r2,24
  8187e4:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  8187e8:	e0bffe17 	ldw	r2,-8(fp)
  8187ec:	1004d43a 	srli	r2,r2,16
  8187f0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  8187f4:	e0bffe17 	ldw	r2,-8(fp)
  8187f8:	1004d23a 	srli	r2,r2,8
  8187fc:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  818800:	e0bffe17 	ldw	r2,-8(fp)
  818804:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  818808:	00800144 	movi	r2,5
  81880c:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  818810:	e13ffd17 	ldw	r4,-12(fp)
  818814:	0818c640 	call	818c64 <epcs_enter_4_bytes_mode>
  818818:	00000c06 	br	81884c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  81881c:	00bff604 	movi	r2,-40
  818820:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  818824:	e0bffe17 	ldw	r2,-8(fp)
  818828:	1004d43a 	srli	r2,r2,16
  81882c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  818830:	e0bffe17 	ldw	r2,-8(fp)
  818834:	1004d23a 	srli	r2,r2,8
  818838:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  81883c:	e0bffe17 	ldw	r2,-8(fp)
  818840:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  818844:	00800104 	movi	r2,4
  818848:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  81884c:	e13ffd17 	ldw	r4,-12(fp)
  818850:	08189a00 	call	8189a0 <epcs_write_enable>

  alt_avalon_spi_command(
  818854:	e0bffb03 	ldbu	r2,-20(fp)
  818858:	e0fffb44 	addi	r3,fp,-19
  81885c:	d8000215 	stw	zero,8(sp)
  818860:	d8000115 	stw	zero,4(sp)
  818864:	d8000015 	stw	zero,0(sp)
  818868:	180f883a 	mov	r7,r3
  81886c:	100d883a 	mov	r6,r2
  818870:	000b883a 	mov	r5,zero
  818874:	e13ffd17 	ldw	r4,-12(fp)
  818878:	0819a440 	call	819a44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  81887c:	e13ffd17 	ldw	r4,-12(fp)
  818880:	08187740 	call	818774 <epcs_await_wip_released>

  if(four_bytes_mode)
  818884:	e0bfff17 	ldw	r2,-4(fp)
  818888:	10000226 	beq	r2,zero,818894 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  81888c:	e13ffd17 	ldw	r4,-12(fp)
  818890:	0818cc00 	call	818cc0 <epcs_exit_4_bytes_mode>
  }
}
  818894:	0001883a 	nop
  818898:	e037883a 	mov	sp,fp
  81889c:	dfc00117 	ldw	ra,4(sp)
  8188a0:	df000017 	ldw	fp,0(sp)
  8188a4:	dec00204 	addi	sp,sp,8
  8188a8:	f800283a 	ret

008188ac <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  8188ac:	defff404 	addi	sp,sp,-48
  8188b0:	dfc00b15 	stw	ra,44(sp)
  8188b4:	df000a15 	stw	fp,40(sp)
  8188b8:	df000a04 	addi	fp,sp,40
  8188bc:	e13ffc15 	stw	r4,-16(fp)
  8188c0:	e17ffd15 	stw	r5,-12(fp)
  8188c4:	e1bffe15 	stw	r6,-8(fp)
  8188c8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  8188cc:	008000c4 	movi	r2,3
  8188d0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  8188d4:	e0800217 	ldw	r2,8(fp)
  8188d8:	10001026 	beq	r2,zero,81891c <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  8188dc:	e0bffd17 	ldw	r2,-12(fp)
  8188e0:	1004d63a 	srli	r2,r2,24
  8188e4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  8188e8:	e0bffd17 	ldw	r2,-12(fp)
  8188ec:	1005d43a 	srai	r2,r2,16
  8188f0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  8188f4:	e0bffd17 	ldw	r2,-12(fp)
  8188f8:	1005d23a 	srai	r2,r2,8
  8188fc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  818900:	e0bffd17 	ldw	r2,-12(fp)
  818904:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  818908:	00800144 	movi	r2,5
  81890c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  818910:	e13ffc17 	ldw	r4,-16(fp)
  818914:	0818c640 	call	818c64 <epcs_enter_4_bytes_mode>
  818918:	00000a06 	br	818944 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  81891c:	e0bffd17 	ldw	r2,-12(fp)
  818920:	1005d43a 	srai	r2,r2,16
  818924:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  818928:	e0bffd17 	ldw	r2,-12(fp)
  81892c:	1005d23a 	srai	r2,r2,8
  818930:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  818934:	e0bffd17 	ldw	r2,-12(fp)
  818938:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  81893c:	00800104 	movi	r2,4
  818940:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  818944:	e13ffc17 	ldw	r4,-16(fp)
  818948:	08187740 	call	818774 <epcs_await_wip_released>

  alt_avalon_spi_command(
  81894c:	e0bfff17 	ldw	r2,-4(fp)
  818950:	e13ffa04 	addi	r4,fp,-24
  818954:	d8000215 	stw	zero,8(sp)
  818958:	e0fffe17 	ldw	r3,-8(fp)
  81895c:	d8c00115 	stw	r3,4(sp)
  818960:	d8800015 	stw	r2,0(sp)
  818964:	200f883a 	mov	r7,r4
  818968:	e1bff917 	ldw	r6,-28(fp)
  81896c:	000b883a 	mov	r5,zero
  818970:	e13ffc17 	ldw	r4,-16(fp)
  818974:	0819a440 	call	819a44 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  818978:	e0800217 	ldw	r2,8(fp)
  81897c:	10000226 	beq	r2,zero,818988 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  818980:	e13ffc17 	ldw	r4,-16(fp)
  818984:	0818cc00 	call	818cc0 <epcs_exit_4_bytes_mode>
  }

  return length;
  818988:	e0bfff17 	ldw	r2,-4(fp)
}
  81898c:	e037883a 	mov	sp,fp
  818990:	dfc00117 	ldw	ra,4(sp)
  818994:	df000017 	ldw	fp,0(sp)
  818998:	dec00204 	addi	sp,sp,8
  81899c:	f800283a 	ret

008189a0 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  8189a0:	defff904 	addi	sp,sp,-28
  8189a4:	dfc00615 	stw	ra,24(sp)
  8189a8:	df000515 	stw	fp,20(sp)
  8189ac:	df000504 	addi	fp,sp,20
  8189b0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  8189b4:	00800184 	movi	r2,6
  8189b8:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  8189bc:	d8000215 	stw	zero,8(sp)
  8189c0:	d8000115 	stw	zero,4(sp)
  8189c4:	d8000015 	stw	zero,0(sp)
  8189c8:	e1fffe04 	addi	r7,fp,-8
  8189cc:	01800044 	movi	r6,1
  8189d0:	000b883a 	mov	r5,zero
  8189d4:	e13fff17 	ldw	r4,-4(fp)
  8189d8:	0819a440 	call	819a44 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  8189dc:	0001883a 	nop
  8189e0:	e037883a 	mov	sp,fp
  8189e4:	dfc00117 	ldw	ra,4(sp)
  8189e8:	df000017 	ldw	fp,0(sp)
  8189ec:	dec00204 	addi	sp,sp,8
  8189f0:	f800283a 	ret

008189f4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  8189f4:	defff804 	addi	sp,sp,-32
  8189f8:	dfc00715 	stw	ra,28(sp)
  8189fc:	df000615 	stw	fp,24(sp)
  818a00:	df000604 	addi	fp,sp,24
  818a04:	e13ffe15 	stw	r4,-8(fp)
  818a08:	2805883a 	mov	r2,r5
  818a0c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  818a10:	00800044 	movi	r2,1
  818a14:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  818a18:	e0bfff03 	ldbu	r2,-4(fp)
  818a1c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  818a20:	d8000215 	stw	zero,8(sp)
  818a24:	d8000115 	stw	zero,4(sp)
  818a28:	d8000015 	stw	zero,0(sp)
  818a2c:	e1fffd04 	addi	r7,fp,-12
  818a30:	01800084 	movi	r6,2
  818a34:	000b883a 	mov	r5,zero
  818a38:	e13ffe17 	ldw	r4,-8(fp)
  818a3c:	0819a440 	call	819a44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  818a40:	e13ffe17 	ldw	r4,-8(fp)
  818a44:	08187740 	call	818774 <epcs_await_wip_released>
}
  818a48:	0001883a 	nop
  818a4c:	e037883a 	mov	sp,fp
  818a50:	dfc00117 	ldw	ra,4(sp)
  818a54:	df000017 	ldw	fp,0(sp)
  818a58:	dec00204 	addi	sp,sp,8
  818a5c:	f800283a 	ret

00818a60 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  818a60:	defff404 	addi	sp,sp,-48
  818a64:	dfc00b15 	stw	ra,44(sp)
  818a68:	df000a15 	stw	fp,40(sp)
  818a6c:	df000a04 	addi	fp,sp,40
  818a70:	e13ffc15 	stw	r4,-16(fp)
  818a74:	e17ffd15 	stw	r5,-12(fp)
  818a78:	e1bffe15 	stw	r6,-8(fp)
  818a7c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  818a80:	00800084 	movi	r2,2
  818a84:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  818a88:	e0800217 	ldw	r2,8(fp)
  818a8c:	10001026 	beq	r2,zero,818ad0 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  818a90:	e0bffd17 	ldw	r2,-12(fp)
  818a94:	1004d63a 	srli	r2,r2,24
  818a98:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  818a9c:	e0bffd17 	ldw	r2,-12(fp)
  818aa0:	1005d43a 	srai	r2,r2,16
  818aa4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  818aa8:	e0bffd17 	ldw	r2,-12(fp)
  818aac:	1005d23a 	srai	r2,r2,8
  818ab0:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  818ab4:	e0bffd17 	ldw	r2,-12(fp)
  818ab8:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  818abc:	00800144 	movi	r2,5
  818ac0:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  818ac4:	e13ffc17 	ldw	r4,-16(fp)
  818ac8:	0818c640 	call	818c64 <epcs_enter_4_bytes_mode>
  818acc:	00000a06 	br	818af8 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  818ad0:	e0bffd17 	ldw	r2,-12(fp)
  818ad4:	1005d43a 	srai	r2,r2,16
  818ad8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  818adc:	e0bffd17 	ldw	r2,-12(fp)
  818ae0:	1005d23a 	srai	r2,r2,8
  818ae4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  818ae8:	e0bffd17 	ldw	r2,-12(fp)
  818aec:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  818af0:	00800104 	movi	r2,4
  818af4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  818af8:	e13ffc17 	ldw	r4,-16(fp)
  818afc:	08189a00 	call	8189a0 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  818b00:	e0fffa04 	addi	r3,fp,-24
  818b04:	00800044 	movi	r2,1
  818b08:	d8800215 	stw	r2,8(sp)
  818b0c:	d8000115 	stw	zero,4(sp)
  818b10:	d8000015 	stw	zero,0(sp)
  818b14:	180f883a 	mov	r7,r3
  818b18:	e1bff917 	ldw	r6,-28(fp)
  818b1c:	000b883a 	mov	r5,zero
  818b20:	e13ffc17 	ldw	r4,-16(fp)
  818b24:	0819a440 	call	819a44 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  818b28:	e0bfff17 	ldw	r2,-4(fp)
  818b2c:	d8000215 	stw	zero,8(sp)
  818b30:	d8000115 	stw	zero,4(sp)
  818b34:	d8000015 	stw	zero,0(sp)
  818b38:	e1fffe17 	ldw	r7,-8(fp)
  818b3c:	100d883a 	mov	r6,r2
  818b40:	000b883a 	mov	r5,zero
  818b44:	e13ffc17 	ldw	r4,-16(fp)
  818b48:	0819a440 	call	819a44 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  818b4c:	e13ffc17 	ldw	r4,-16(fp)
  818b50:	08187740 	call	818774 <epcs_await_wip_released>

  if(four_bytes_mode)
  818b54:	e0800217 	ldw	r2,8(fp)
  818b58:	10000226 	beq	r2,zero,818b64 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  818b5c:	e13ffc17 	ldw	r4,-16(fp)
  818b60:	0818cc00 	call	818cc0 <epcs_exit_4_bytes_mode>
  }

  return length;
  818b64:	e0bfff17 	ldw	r2,-4(fp)
}
  818b68:	e037883a 	mov	sp,fp
  818b6c:	dfc00117 	ldw	ra,4(sp)
  818b70:	df000017 	ldw	fp,0(sp)
  818b74:	dec00204 	addi	sp,sp,8
  818b78:	f800283a 	ret

00818b7c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  818b7c:	defff804 	addi	sp,sp,-32
  818b80:	dfc00715 	stw	ra,28(sp)
  818b84:	df000615 	stw	fp,24(sp)
  818b88:	df000604 	addi	fp,sp,24
  818b8c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  818b90:	00bfeac4 	movi	r2,-85
  818b94:	e0bffd05 	stb	r2,-12(fp)
  818b98:	e03ffd45 	stb	zero,-11(fp)
  818b9c:	e03ffd85 	stb	zero,-10(fp)
  818ba0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  818ba4:	d8000215 	stw	zero,8(sp)
  818ba8:	e0bffe04 	addi	r2,fp,-8
  818bac:	d8800115 	stw	r2,4(sp)
  818bb0:	00800044 	movi	r2,1
  818bb4:	d8800015 	stw	r2,0(sp)
  818bb8:	e1fffd04 	addi	r7,fp,-12
  818bbc:	01800104 	movi	r6,4
  818bc0:	000b883a 	mov	r5,zero
  818bc4:	e13fff17 	ldw	r4,-4(fp)
  818bc8:	0819a440 	call	819a44 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  818bcc:	e0bffe03 	ldbu	r2,-8(fp)
}
  818bd0:	e037883a 	mov	sp,fp
  818bd4:	dfc00117 	ldw	ra,4(sp)
  818bd8:	df000017 	ldw	fp,0(sp)
  818bdc:	dec00204 	addi	sp,sp,8
  818be0:	f800283a 	ret

00818be4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  818be4:	defff904 	addi	sp,sp,-28
  818be8:	dfc00615 	stw	ra,24(sp)
  818bec:	df000515 	stw	fp,20(sp)
  818bf0:	df000504 	addi	fp,sp,20
  818bf4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  818bf8:	00bfe7c4 	movi	r2,-97
  818bfc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  818c00:	d8000215 	stw	zero,8(sp)
  818c04:	e0bffe44 	addi	r2,fp,-7
  818c08:	d8800115 	stw	r2,4(sp)
  818c0c:	008000c4 	movi	r2,3
  818c10:	d8800015 	stw	r2,0(sp)
  818c14:	e1fffe04 	addi	r7,fp,-8
  818c18:	01800044 	movi	r6,1
  818c1c:	000b883a 	mov	r5,zero
  818c20:	e13fff17 	ldw	r4,-4(fp)
  818c24:	0819a440 	call	819a44 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  818c28:	e0bffe43 	ldbu	r2,-7(fp)
  818c2c:	10803fcc 	andi	r2,r2,255
  818c30:	1006943a 	slli	r3,r2,16
  818c34:	e0bffe83 	ldbu	r2,-6(fp)
  818c38:	10803fcc 	andi	r2,r2,255
  818c3c:	1004923a 	slli	r2,r2,8
  818c40:	1886b03a 	or	r3,r3,r2
  818c44:	e0bffec3 	ldbu	r2,-5(fp)
  818c48:	10803fcc 	andi	r2,r2,255
  818c4c:	1884b03a 	or	r2,r3,r2
}
  818c50:	e037883a 	mov	sp,fp
  818c54:	dfc00117 	ldw	ra,4(sp)
  818c58:	df000017 	ldw	fp,0(sp)
  818c5c:	dec00204 	addi	sp,sp,8
  818c60:	f800283a 	ret

00818c64 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  818c64:	defff904 	addi	sp,sp,-28
  818c68:	dfc00615 	stw	ra,24(sp)
  818c6c:	df000515 	stw	fp,20(sp)
  818c70:	df000504 	addi	fp,sp,20
  818c74:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  818c78:	00bfedc4 	movi	r2,-73
  818c7c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  818c80:	e13fff17 	ldw	r4,-4(fp)
  818c84:	08189a00 	call	8189a0 <epcs_write_enable>

  alt_avalon_spi_command(
  818c88:	d8000215 	stw	zero,8(sp)
  818c8c:	d8000115 	stw	zero,4(sp)
  818c90:	d8000015 	stw	zero,0(sp)
  818c94:	e1fffe04 	addi	r7,fp,-8
  818c98:	01800044 	movi	r6,1
  818c9c:	000b883a 	mov	r5,zero
  818ca0:	e13fff17 	ldw	r4,-4(fp)
  818ca4:	0819a440 	call	819a44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  818ca8:	0001883a 	nop
}
  818cac:	e037883a 	mov	sp,fp
  818cb0:	dfc00117 	ldw	ra,4(sp)
  818cb4:	df000017 	ldw	fp,0(sp)
  818cb8:	dec00204 	addi	sp,sp,8
  818cbc:	f800283a 	ret

00818cc0 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  818cc0:	defff904 	addi	sp,sp,-28
  818cc4:	dfc00615 	stw	ra,24(sp)
  818cc8:	df000515 	stw	fp,20(sp)
  818ccc:	df000504 	addi	fp,sp,20
  818cd0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  818cd4:	00bffa44 	movi	r2,-23
  818cd8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  818cdc:	e13fff17 	ldw	r4,-4(fp)
  818ce0:	08189a00 	call	8189a0 <epcs_write_enable>

  alt_avalon_spi_command(
  818ce4:	d8000215 	stw	zero,8(sp)
  818ce8:	d8000115 	stw	zero,4(sp)
  818cec:	d8000015 	stw	zero,0(sp)
  818cf0:	e1fffe04 	addi	r7,fp,-8
  818cf4:	01800044 	movi	r6,1
  818cf8:	000b883a 	mov	r5,zero
  818cfc:	e13fff17 	ldw	r4,-4(fp)
  818d00:	0819a440 	call	819a44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  818d04:	0001883a 	nop
}
  818d08:	e037883a 	mov	sp,fp
  818d0c:	dfc00117 	ldw	ra,4(sp)
  818d10:	df000017 	ldw	fp,0(sp)
  818d14:	dec00204 	addi	sp,sp,8
  818d18:	f800283a 	ret

00818d1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  818d1c:	defff504 	addi	sp,sp,-44
  818d20:	df000a15 	stw	fp,40(sp)
  818d24:	df000a04 	addi	fp,sp,40
  818d28:	e13ffc15 	stw	r4,-16(fp)
  818d2c:	e17ffd15 	stw	r5,-12(fp)
  818d30:	e1bffe15 	stw	r6,-8(fp)
  818d34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  818d38:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  818d3c:	d0a07a17 	ldw	r2,-32280(gp)
  
  if (alt_ticks_per_second ())
  818d40:	10003c26 	beq	r2,zero,818e34 <alt_alarm_start+0x118>
  {
    if (alarm)
  818d44:	e0bffc17 	ldw	r2,-16(fp)
  818d48:	10003826 	beq	r2,zero,818e2c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  818d4c:	e0bffc17 	ldw	r2,-16(fp)
  818d50:	e0fffe17 	ldw	r3,-8(fp)
  818d54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  818d58:	e0bffc17 	ldw	r2,-16(fp)
  818d5c:	e0ffff17 	ldw	r3,-4(fp)
  818d60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818d64:	0005303a 	rdctl	r2,status
  818d68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818d6c:	e0fff917 	ldw	r3,-28(fp)
  818d70:	00bfff84 	movi	r2,-2
  818d74:	1884703a 	and	r2,r3,r2
  818d78:	1001703a 	wrctl	status,r2
  
  return context;
  818d7c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  818d80:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  818d84:	d0a07b17 	ldw	r2,-32276(gp)
      
      current_nticks = alt_nticks();
  818d88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  818d8c:	e0fffd17 	ldw	r3,-12(fp)
  818d90:	e0bff617 	ldw	r2,-40(fp)
  818d94:	1885883a 	add	r2,r3,r2
  818d98:	10c00044 	addi	r3,r2,1
  818d9c:	e0bffc17 	ldw	r2,-16(fp)
  818da0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  818da4:	e0bffc17 	ldw	r2,-16(fp)
  818da8:	10c00217 	ldw	r3,8(r2)
  818dac:	e0bff617 	ldw	r2,-40(fp)
  818db0:	1880042e 	bgeu	r3,r2,818dc4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  818db4:	e0bffc17 	ldw	r2,-16(fp)
  818db8:	00c00044 	movi	r3,1
  818dbc:	10c00405 	stb	r3,16(r2)
  818dc0:	00000206 	br	818dcc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  818dc4:	e0bffc17 	ldw	r2,-16(fp)
  818dc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  818dcc:	e0bffc17 	ldw	r2,-16(fp)
  818dd0:	d0e04b04 	addi	r3,gp,-32468
  818dd4:	e0fffa15 	stw	r3,-24(fp)
  818dd8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  818ddc:	e0bffb17 	ldw	r2,-20(fp)
  818de0:	e0fffa17 	ldw	r3,-24(fp)
  818de4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  818de8:	e0bffa17 	ldw	r2,-24(fp)
  818dec:	10c00017 	ldw	r3,0(r2)
  818df0:	e0bffb17 	ldw	r2,-20(fp)
  818df4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  818df8:	e0bffa17 	ldw	r2,-24(fp)
  818dfc:	10800017 	ldw	r2,0(r2)
  818e00:	e0fffb17 	ldw	r3,-20(fp)
  818e04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  818e08:	e0bffa17 	ldw	r2,-24(fp)
  818e0c:	e0fffb17 	ldw	r3,-20(fp)
  818e10:	10c00015 	stw	r3,0(r2)
  818e14:	e0bff817 	ldw	r2,-32(fp)
  818e18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818e1c:	e0bff717 	ldw	r2,-36(fp)
  818e20:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  818e24:	0005883a 	mov	r2,zero
  818e28:	00000306 	br	818e38 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  818e2c:	00bffa84 	movi	r2,-22
  818e30:	00000106 	br	818e38 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  818e34:	00bfde84 	movi	r2,-134
  }
}
  818e38:	e037883a 	mov	sp,fp
  818e3c:	df000017 	ldw	fp,0(sp)
  818e40:	dec00104 	addi	sp,sp,4
  818e44:	f800283a 	ret

00818e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818e48:	defffe04 	addi	sp,sp,-8
  818e4c:	dfc00115 	stw	ra,4(sp)
  818e50:	df000015 	stw	fp,0(sp)
  818e54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  818e58:	d0a02717 	ldw	r2,-32612(gp)
  818e5c:	10000326 	beq	r2,zero,818e6c <alt_get_errno+0x24>
  818e60:	d0a02717 	ldw	r2,-32612(gp)
  818e64:	103ee83a 	callr	r2
  818e68:	00000106 	br	818e70 <alt_get_errno+0x28>
  818e6c:	d0a05b04 	addi	r2,gp,-32404
}
  818e70:	e037883a 	mov	sp,fp
  818e74:	dfc00117 	ldw	ra,4(sp)
  818e78:	df000017 	ldw	fp,0(sp)
  818e7c:	dec00204 	addi	sp,sp,8
  818e80:	f800283a 	ret

00818e84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  818e84:	defffa04 	addi	sp,sp,-24
  818e88:	dfc00515 	stw	ra,20(sp)
  818e8c:	df000415 	stw	fp,16(sp)
  818e90:	df000404 	addi	fp,sp,16
  818e94:	e13ffe15 	stw	r4,-8(fp)
  818e98:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  818e9c:	e0bffe17 	ldw	r2,-8(fp)
  818ea0:	10000326 	beq	r2,zero,818eb0 <alt_dev_llist_insert+0x2c>
  818ea4:	e0bffe17 	ldw	r2,-8(fp)
  818ea8:	10800217 	ldw	r2,8(r2)
  818eac:	1000061e 	bne	r2,zero,818ec8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  818eb0:	0818e480 	call	818e48 <alt_get_errno>
  818eb4:	1007883a 	mov	r3,r2
  818eb8:	00800584 	movi	r2,22
  818ebc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  818ec0:	00bffa84 	movi	r2,-22
  818ec4:	00001306 	br	818f14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  818ec8:	e0bffe17 	ldw	r2,-8(fp)
  818ecc:	e0ffff17 	ldw	r3,-4(fp)
  818ed0:	e0fffc15 	stw	r3,-16(fp)
  818ed4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  818ed8:	e0bffd17 	ldw	r2,-12(fp)
  818edc:	e0fffc17 	ldw	r3,-16(fp)
  818ee0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  818ee4:	e0bffc17 	ldw	r2,-16(fp)
  818ee8:	10c00017 	ldw	r3,0(r2)
  818eec:	e0bffd17 	ldw	r2,-12(fp)
  818ef0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  818ef4:	e0bffc17 	ldw	r2,-16(fp)
  818ef8:	10800017 	ldw	r2,0(r2)
  818efc:	e0fffd17 	ldw	r3,-12(fp)
  818f00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  818f04:	e0bffc17 	ldw	r2,-16(fp)
  818f08:	e0fffd17 	ldw	r3,-12(fp)
  818f0c:	10c00015 	stw	r3,0(r2)

  return 0;  
  818f10:	0005883a 	mov	r2,zero
}
  818f14:	e037883a 	mov	sp,fp
  818f18:	dfc00117 	ldw	ra,4(sp)
  818f1c:	df000017 	ldw	fp,0(sp)
  818f20:	dec00204 	addi	sp,sp,8
  818f24:	f800283a 	ret

00818f28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  818f28:	defffd04 	addi	sp,sp,-12
  818f2c:	dfc00215 	stw	ra,8(sp)
  818f30:	df000115 	stw	fp,4(sp)
  818f34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818f38:	008020b4 	movhi	r2,130
  818f3c:	10a89704 	addi	r2,r2,-23972
  818f40:	e0bfff15 	stw	r2,-4(fp)
  818f44:	00000606 	br	818f60 <_do_ctors+0x38>
        (*ctor) (); 
  818f48:	e0bfff17 	ldw	r2,-4(fp)
  818f4c:	10800017 	ldw	r2,0(r2)
  818f50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818f54:	e0bfff17 	ldw	r2,-4(fp)
  818f58:	10bfff04 	addi	r2,r2,-4
  818f5c:	e0bfff15 	stw	r2,-4(fp)
  818f60:	e0ffff17 	ldw	r3,-4(fp)
  818f64:	008020b4 	movhi	r2,130
  818f68:	10a89804 	addi	r2,r2,-23968
  818f6c:	18bff62e 	bgeu	r3,r2,818f48 <__alt_mem_epcs_flash_controller_0+0xff80ff48>
        (*ctor) (); 
}
  818f70:	0001883a 	nop
  818f74:	e037883a 	mov	sp,fp
  818f78:	dfc00117 	ldw	ra,4(sp)
  818f7c:	df000017 	ldw	fp,0(sp)
  818f80:	dec00204 	addi	sp,sp,8
  818f84:	f800283a 	ret

00818f88 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  818f88:	defffd04 	addi	sp,sp,-12
  818f8c:	dfc00215 	stw	ra,8(sp)
  818f90:	df000115 	stw	fp,4(sp)
  818f94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818f98:	008020b4 	movhi	r2,130
  818f9c:	10a89704 	addi	r2,r2,-23972
  818fa0:	e0bfff15 	stw	r2,-4(fp)
  818fa4:	00000606 	br	818fc0 <_do_dtors+0x38>
        (*dtor) (); 
  818fa8:	e0bfff17 	ldw	r2,-4(fp)
  818fac:	10800017 	ldw	r2,0(r2)
  818fb0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818fb4:	e0bfff17 	ldw	r2,-4(fp)
  818fb8:	10bfff04 	addi	r2,r2,-4
  818fbc:	e0bfff15 	stw	r2,-4(fp)
  818fc0:	e0ffff17 	ldw	r3,-4(fp)
  818fc4:	008020b4 	movhi	r2,130
  818fc8:	10a89804 	addi	r2,r2,-23968
  818fcc:	18bff62e 	bgeu	r3,r2,818fa8 <__alt_mem_epcs_flash_controller_0+0xff80ffa8>
        (*dtor) (); 
}
  818fd0:	0001883a 	nop
  818fd4:	e037883a 	mov	sp,fp
  818fd8:	dfc00117 	ldw	ra,4(sp)
  818fdc:	df000017 	ldw	fp,0(sp)
  818fe0:	dec00204 	addi	sp,sp,8
  818fe4:	f800283a 	ret

00818fe8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  818fe8:	defffc04 	addi	sp,sp,-16
  818fec:	dfc00315 	stw	ra,12(sp)
  818ff0:	df000215 	stw	fp,8(sp)
  818ff4:	df000204 	addi	fp,sp,8
  818ff8:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  818ffc:	d1604904 	addi	r5,gp,-32476
  819000:	e13fff17 	ldw	r4,-4(fp)
  819004:	0819c400 	call	819c40 <alt_find_dev>
  819008:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  81900c:	e0bffe17 	ldw	r2,-8(fp)
  819010:	10000926 	beq	r2,zero,819038 <alt_flash_open_dev+0x50>
  819014:	e0bffe17 	ldw	r2,-8(fp)
  819018:	10800317 	ldw	r2,12(r2)
  81901c:	10000626 	beq	r2,zero,819038 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  819020:	e0bffe17 	ldw	r2,-8(fp)
  819024:	10800317 	ldw	r2,12(r2)
  819028:	e17fff17 	ldw	r5,-4(fp)
  81902c:	e13ffe17 	ldw	r4,-8(fp)
  819030:	103ee83a 	callr	r2
  819034:	00000106 	br	81903c <alt_flash_open_dev+0x54>
  }

  return dev;
  819038:	e0bffe17 	ldw	r2,-8(fp)
}
  81903c:	e037883a 	mov	sp,fp
  819040:	dfc00117 	ldw	ra,4(sp)
  819044:	df000017 	ldw	fp,0(sp)
  819048:	dec00204 	addi	sp,sp,8
  81904c:	f800283a 	ret

00819050 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  819050:	defffd04 	addi	sp,sp,-12
  819054:	dfc00215 	stw	ra,8(sp)
  819058:	df000115 	stw	fp,4(sp)
  81905c:	df000104 	addi	fp,sp,4
  819060:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  819064:	e0bfff17 	ldw	r2,-4(fp)
  819068:	10000826 	beq	r2,zero,81908c <alt_flash_close_dev+0x3c>
  81906c:	e0bfff17 	ldw	r2,-4(fp)
  819070:	10800417 	ldw	r2,16(r2)
  819074:	10000526 	beq	r2,zero,81908c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  819078:	e0bfff17 	ldw	r2,-4(fp)
  81907c:	10800417 	ldw	r2,16(r2)
  819080:	e13fff17 	ldw	r4,-4(fp)
  819084:	103ee83a 	callr	r2
  }
  return;
  819088:	0001883a 	nop
  81908c:	0001883a 	nop
}
  819090:	e037883a 	mov	sp,fp
  819094:	dfc00117 	ldw	ra,4(sp)
  819098:	df000017 	ldw	fp,0(sp)
  81909c:	dec00204 	addi	sp,sp,8
  8190a0:	f800283a 	ret

008190a4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8190a4:	defffe04 	addi	sp,sp,-8
  8190a8:	df000115 	stw	fp,4(sp)
  8190ac:	df000104 	addi	fp,sp,4
  8190b0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8190b4:	e0bfff17 	ldw	r2,-4(fp)
  8190b8:	10bffe84 	addi	r2,r2,-6
  8190bc:	10c00428 	cmpgeui	r3,r2,16
  8190c0:	18001a1e 	bne	r3,zero,81912c <alt_exception_cause_generated_bad_addr+0x88>
  8190c4:	100690ba 	slli	r3,r2,2
  8190c8:	008020b4 	movhi	r2,130
  8190cc:	10a43704 	addi	r2,r2,-28452
  8190d0:	1885883a 	add	r2,r3,r2
  8190d4:	10800017 	ldw	r2,0(r2)
  8190d8:	1000683a 	jmp	r2
  8190dc:	0081911c 	xori	r2,zero,1604
  8190e0:	0081911c 	xori	r2,zero,1604
  8190e4:	0081912c 	andhi	r2,zero,1604
  8190e8:	0081912c 	andhi	r2,zero,1604
  8190ec:	0081912c 	andhi	r2,zero,1604
  8190f0:	0081911c 	xori	r2,zero,1604
  8190f4:	00819124 	muli	r2,zero,1604
  8190f8:	0081912c 	andhi	r2,zero,1604
  8190fc:	0081911c 	xori	r2,zero,1604
  819100:	0081911c 	xori	r2,zero,1604
  819104:	0081912c 	andhi	r2,zero,1604
  819108:	0081911c 	xori	r2,zero,1604
  81910c:	00819124 	muli	r2,zero,1604
  819110:	0081912c 	andhi	r2,zero,1604
  819114:	0081912c 	andhi	r2,zero,1604
  819118:	0081911c 	xori	r2,zero,1604
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81911c:	00800044 	movi	r2,1
  819120:	00000306 	br	819130 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  819124:	0005883a 	mov	r2,zero
  819128:	00000106 	br	819130 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81912c:	0005883a 	mov	r2,zero
  }
}
  819130:	e037883a 	mov	sp,fp
  819134:	df000017 	ldw	fp,0(sp)
  819138:	dec00104 	addi	sp,sp,4
  81913c:	f800283a 	ret

00819140 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  819140:	defff804 	addi	sp,sp,-32
  819144:	dfc00715 	stw	ra,28(sp)
  819148:	df000615 	stw	fp,24(sp)
  81914c:	dc000515 	stw	r16,20(sp)
  819150:	df000604 	addi	fp,sp,24
  819154:	e13ffb15 	stw	r4,-20(fp)
  819158:	e17ffc15 	stw	r5,-16(fp)
  81915c:	e1bffd15 	stw	r6,-12(fp)
  819160:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  819164:	e1bffe17 	ldw	r6,-8(fp)
  819168:	e17ffd17 	ldw	r5,-12(fp)
  81916c:	e13ffc17 	ldw	r4,-16(fp)
  819170:	08193c80 	call	8193c8 <open>
  819174:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  819178:	e0bffa17 	ldw	r2,-24(fp)
  81917c:	10002216 	blt	r2,zero,819208 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  819180:	040020b4 	movhi	r16,130
  819184:	842ca204 	addi	r16,r16,-19832
  819188:	e0bffa17 	ldw	r2,-24(fp)
  81918c:	01400304 	movi	r5,12
  819190:	1009883a 	mov	r4,r2
  819194:	080b2400 	call	80b240 <__mulsi3>
  819198:	8085883a 	add	r2,r16,r2
  81919c:	10c00017 	ldw	r3,0(r2)
  8191a0:	e0bffb17 	ldw	r2,-20(fp)
  8191a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8191a8:	040020b4 	movhi	r16,130
  8191ac:	842ca204 	addi	r16,r16,-19832
  8191b0:	e0bffa17 	ldw	r2,-24(fp)
  8191b4:	01400304 	movi	r5,12
  8191b8:	1009883a 	mov	r4,r2
  8191bc:	080b2400 	call	80b240 <__mulsi3>
  8191c0:	8085883a 	add	r2,r16,r2
  8191c4:	10800104 	addi	r2,r2,4
  8191c8:	10c00017 	ldw	r3,0(r2)
  8191cc:	e0bffb17 	ldw	r2,-20(fp)
  8191d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8191d4:	040020b4 	movhi	r16,130
  8191d8:	842ca204 	addi	r16,r16,-19832
  8191dc:	e0bffa17 	ldw	r2,-24(fp)
  8191e0:	01400304 	movi	r5,12
  8191e4:	1009883a 	mov	r4,r2
  8191e8:	080b2400 	call	80b240 <__mulsi3>
  8191ec:	8085883a 	add	r2,r16,r2
  8191f0:	10800204 	addi	r2,r2,8
  8191f4:	10c00017 	ldw	r3,0(r2)
  8191f8:	e0bffb17 	ldw	r2,-20(fp)
  8191fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  819200:	e13ffa17 	ldw	r4,-24(fp)
  819204:	080e3dc0 	call	80e3dc <alt_release_fd>
  }
} 
  819208:	0001883a 	nop
  81920c:	e6ffff04 	addi	sp,fp,-4
  819210:	dfc00217 	ldw	ra,8(sp)
  819214:	df000117 	ldw	fp,4(sp)
  819218:	dc000017 	ldw	r16,0(sp)
  81921c:	dec00304 	addi	sp,sp,12
  819220:	f800283a 	ret

00819224 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  819224:	defffb04 	addi	sp,sp,-20
  819228:	dfc00415 	stw	ra,16(sp)
  81922c:	df000315 	stw	fp,12(sp)
  819230:	df000304 	addi	fp,sp,12
  819234:	e13ffd15 	stw	r4,-12(fp)
  819238:	e17ffe15 	stw	r5,-8(fp)
  81923c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  819240:	01c07fc4 	movi	r7,511
  819244:	01800044 	movi	r6,1
  819248:	e17ffd17 	ldw	r5,-12(fp)
  81924c:	010020b4 	movhi	r4,130
  819250:	212ca504 	addi	r4,r4,-19820
  819254:	08191400 	call	819140 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  819258:	01c07fc4 	movi	r7,511
  81925c:	000d883a 	mov	r6,zero
  819260:	e17ffe17 	ldw	r5,-8(fp)
  819264:	010020b4 	movhi	r4,130
  819268:	212ca204 	addi	r4,r4,-19832
  81926c:	08191400 	call	819140 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  819270:	01c07fc4 	movi	r7,511
  819274:	01800044 	movi	r6,1
  819278:	e17fff17 	ldw	r5,-4(fp)
  81927c:	010020b4 	movhi	r4,130
  819280:	212ca804 	addi	r4,r4,-19808
  819284:	08191400 	call	819140 <alt_open_fd>
}  
  819288:	0001883a 	nop
  81928c:	e037883a 	mov	sp,fp
  819290:	dfc00117 	ldw	ra,4(sp)
  819294:	df000017 	ldw	fp,0(sp)
  819298:	dec00204 	addi	sp,sp,8
  81929c:	f800283a 	ret

008192a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8192a0:	defffe04 	addi	sp,sp,-8
  8192a4:	dfc00115 	stw	ra,4(sp)
  8192a8:	df000015 	stw	fp,0(sp)
  8192ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8192b0:	d0a02717 	ldw	r2,-32612(gp)
  8192b4:	10000326 	beq	r2,zero,8192c4 <alt_get_errno+0x24>
  8192b8:	d0a02717 	ldw	r2,-32612(gp)
  8192bc:	103ee83a 	callr	r2
  8192c0:	00000106 	br	8192c8 <alt_get_errno+0x28>
  8192c4:	d0a05b04 	addi	r2,gp,-32404
}
  8192c8:	e037883a 	mov	sp,fp
  8192cc:	dfc00117 	ldw	ra,4(sp)
  8192d0:	df000017 	ldw	fp,0(sp)
  8192d4:	dec00204 	addi	sp,sp,8
  8192d8:	f800283a 	ret

008192dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8192dc:	defffb04 	addi	sp,sp,-20
  8192e0:	dfc00415 	stw	ra,16(sp)
  8192e4:	df000315 	stw	fp,12(sp)
  8192e8:	dc000215 	stw	r16,8(sp)
  8192ec:	df000304 	addi	fp,sp,12
  8192f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8192f4:	e0bffe17 	ldw	r2,-8(fp)
  8192f8:	10800217 	ldw	r2,8(r2)
  8192fc:	10d00034 	orhi	r3,r2,16384
  819300:	e0bffe17 	ldw	r2,-8(fp)
  819304:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  819308:	e03ffd15 	stw	zero,-12(fp)
  81930c:	00002306 	br	81939c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  819310:	040020b4 	movhi	r16,130
  819314:	842ca204 	addi	r16,r16,-19832
  819318:	e0bffd17 	ldw	r2,-12(fp)
  81931c:	01400304 	movi	r5,12
  819320:	1009883a 	mov	r4,r2
  819324:	080b2400 	call	80b240 <__mulsi3>
  819328:	8085883a 	add	r2,r16,r2
  81932c:	10c00017 	ldw	r3,0(r2)
  819330:	e0bffe17 	ldw	r2,-8(fp)
  819334:	10800017 	ldw	r2,0(r2)
  819338:	1880151e 	bne	r3,r2,819390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81933c:	040020b4 	movhi	r16,130
  819340:	842ca204 	addi	r16,r16,-19832
  819344:	e0bffd17 	ldw	r2,-12(fp)
  819348:	01400304 	movi	r5,12
  81934c:	1009883a 	mov	r4,r2
  819350:	080b2400 	call	80b240 <__mulsi3>
  819354:	8085883a 	add	r2,r16,r2
  819358:	10800204 	addi	r2,r2,8
  81935c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  819360:	10000b0e 	bge	r2,zero,819390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  819364:	01400304 	movi	r5,12
  819368:	e13ffd17 	ldw	r4,-12(fp)
  81936c:	080b2400 	call	80b240 <__mulsi3>
  819370:	1007883a 	mov	r3,r2
  819374:	008020b4 	movhi	r2,130
  819378:	10aca204 	addi	r2,r2,-19832
  81937c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  819380:	e0bffe17 	ldw	r2,-8(fp)
  819384:	18800226 	beq	r3,r2,819390 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  819388:	00bffcc4 	movi	r2,-13
  81938c:	00000806 	br	8193b0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  819390:	e0bffd17 	ldw	r2,-12(fp)
  819394:	10800044 	addi	r2,r2,1
  819398:	e0bffd15 	stw	r2,-12(fp)
  81939c:	d0a02617 	ldw	r2,-32616(gp)
  8193a0:	1007883a 	mov	r3,r2
  8193a4:	e0bffd17 	ldw	r2,-12(fp)
  8193a8:	18bfd92e 	bgeu	r3,r2,819310 <__alt_mem_epcs_flash_controller_0+0xff810310>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8193ac:	0005883a 	mov	r2,zero
}
  8193b0:	e6ffff04 	addi	sp,fp,-4
  8193b4:	dfc00217 	ldw	ra,8(sp)
  8193b8:	df000117 	ldw	fp,4(sp)
  8193bc:	dc000017 	ldw	r16,0(sp)
  8193c0:	dec00304 	addi	sp,sp,12
  8193c4:	f800283a 	ret

008193c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8193c8:	defff604 	addi	sp,sp,-40
  8193cc:	dfc00915 	stw	ra,36(sp)
  8193d0:	df000815 	stw	fp,32(sp)
  8193d4:	df000804 	addi	fp,sp,32
  8193d8:	e13ffd15 	stw	r4,-12(fp)
  8193dc:	e17ffe15 	stw	r5,-8(fp)
  8193e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8193e4:	00bfffc4 	movi	r2,-1
  8193e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8193ec:	00bffb44 	movi	r2,-19
  8193f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8193f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8193f8:	d1602404 	addi	r5,gp,-32624
  8193fc:	e13ffd17 	ldw	r4,-12(fp)
  819400:	0819c400 	call	819c40 <alt_find_dev>
  819404:	e0bff815 	stw	r2,-32(fp)
  819408:	e0bff817 	ldw	r2,-32(fp)
  81940c:	1000051e 	bne	r2,zero,819424 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  819410:	e13ffd17 	ldw	r4,-12(fp)
  819414:	0819cd00 	call	819cd0 <alt_find_file>
  819418:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  81941c:	00800044 	movi	r2,1
  819420:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  819424:	e0bff817 	ldw	r2,-32(fp)
  819428:	10002b26 	beq	r2,zero,8194d8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81942c:	e13ff817 	ldw	r4,-32(fp)
  819430:	0819dd80 	call	819dd8 <alt_get_fd>
  819434:	e0bff915 	stw	r2,-28(fp)
  819438:	e0bff917 	ldw	r2,-28(fp)
  81943c:	1000030e 	bge	r2,zero,81944c <open+0x84>
    {
      status = index;
  819440:	e0bff917 	ldw	r2,-28(fp)
  819444:	e0bffa15 	stw	r2,-24(fp)
  819448:	00002506 	br	8194e0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  81944c:	01400304 	movi	r5,12
  819450:	e13ff917 	ldw	r4,-28(fp)
  819454:	080b2400 	call	80b240 <__mulsi3>
  819458:	1007883a 	mov	r3,r2
  81945c:	008020b4 	movhi	r2,130
  819460:	10aca204 	addi	r2,r2,-19832
  819464:	1885883a 	add	r2,r3,r2
  819468:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81946c:	e0fffe17 	ldw	r3,-8(fp)
  819470:	00900034 	movhi	r2,16384
  819474:	10bfffc4 	addi	r2,r2,-1
  819478:	1886703a 	and	r3,r3,r2
  81947c:	e0bffc17 	ldw	r2,-16(fp)
  819480:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  819484:	e0bffb17 	ldw	r2,-20(fp)
  819488:	1000051e 	bne	r2,zero,8194a0 <open+0xd8>
  81948c:	e13ffc17 	ldw	r4,-16(fp)
  819490:	08192dc0 	call	8192dc <alt_file_locked>
  819494:	e0bffa15 	stw	r2,-24(fp)
  819498:	e0bffa17 	ldw	r2,-24(fp)
  81949c:	10001016 	blt	r2,zero,8194e0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8194a0:	e0bff817 	ldw	r2,-32(fp)
  8194a4:	10800317 	ldw	r2,12(r2)
  8194a8:	10000826 	beq	r2,zero,8194cc <open+0x104>
  8194ac:	e0bff817 	ldw	r2,-32(fp)
  8194b0:	10800317 	ldw	r2,12(r2)
  8194b4:	e1ffff17 	ldw	r7,-4(fp)
  8194b8:	e1bffe17 	ldw	r6,-8(fp)
  8194bc:	e17ffd17 	ldw	r5,-12(fp)
  8194c0:	e13ffc17 	ldw	r4,-16(fp)
  8194c4:	103ee83a 	callr	r2
  8194c8:	00000106 	br	8194d0 <open+0x108>
  8194cc:	0005883a 	mov	r2,zero
  8194d0:	e0bffa15 	stw	r2,-24(fp)
  8194d4:	00000206 	br	8194e0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8194d8:	00bffb44 	movi	r2,-19
  8194dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8194e0:	e0bffa17 	ldw	r2,-24(fp)
  8194e4:	1000090e 	bge	r2,zero,81950c <open+0x144>
  {
    alt_release_fd (index);  
  8194e8:	e13ff917 	ldw	r4,-28(fp)
  8194ec:	080e3dc0 	call	80e3dc <alt_release_fd>
    ALT_ERRNO = -status;
  8194f0:	08192a00 	call	8192a0 <alt_get_errno>
  8194f4:	1007883a 	mov	r3,r2
  8194f8:	e0bffa17 	ldw	r2,-24(fp)
  8194fc:	0085c83a 	sub	r2,zero,r2
  819500:	18800015 	stw	r2,0(r3)
    return -1;
  819504:	00bfffc4 	movi	r2,-1
  819508:	00000106 	br	819510 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  81950c:	e0bff917 	ldw	r2,-28(fp)
}
  819510:	e037883a 	mov	sp,fp
  819514:	dfc00117 	ldw	ra,4(sp)
  819518:	df000017 	ldw	fp,0(sp)
  81951c:	dec00204 	addi	sp,sp,8
  819520:	f800283a 	ret

00819524 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  819524:	defffa04 	addi	sp,sp,-24
  819528:	df000515 	stw	fp,20(sp)
  81952c:	df000504 	addi	fp,sp,20
  819530:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819534:	0005303a 	rdctl	r2,status
  819538:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81953c:	e0fffc17 	ldw	r3,-16(fp)
  819540:	00bfff84 	movi	r2,-2
  819544:	1884703a 	and	r2,r3,r2
  819548:	1001703a 	wrctl	status,r2
  
  return context;
  81954c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  819550:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  819554:	e0bfff17 	ldw	r2,-4(fp)
  819558:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81955c:	e0bffd17 	ldw	r2,-12(fp)
  819560:	10800017 	ldw	r2,0(r2)
  819564:	e0fffd17 	ldw	r3,-12(fp)
  819568:	18c00117 	ldw	r3,4(r3)
  81956c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  819570:	e0bffd17 	ldw	r2,-12(fp)
  819574:	10800117 	ldw	r2,4(r2)
  819578:	e0fffd17 	ldw	r3,-12(fp)
  81957c:	18c00017 	ldw	r3,0(r3)
  819580:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  819584:	e0bffd17 	ldw	r2,-12(fp)
  819588:	e0fffd17 	ldw	r3,-12(fp)
  81958c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  819590:	e0bffd17 	ldw	r2,-12(fp)
  819594:	e0fffd17 	ldw	r3,-12(fp)
  819598:	10c00015 	stw	r3,0(r2)
  81959c:	e0bffb17 	ldw	r2,-20(fp)
  8195a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8195a4:	e0bffe17 	ldw	r2,-8(fp)
  8195a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8195ac:	0001883a 	nop
  8195b0:	e037883a 	mov	sp,fp
  8195b4:	df000017 	ldw	fp,0(sp)
  8195b8:	dec00104 	addi	sp,sp,4
  8195bc:	f800283a 	ret

008195c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8195c0:	defffb04 	addi	sp,sp,-20
  8195c4:	dfc00415 	stw	ra,16(sp)
  8195c8:	df000315 	stw	fp,12(sp)
  8195cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8195d0:	d0a04b17 	ldw	r2,-32468(gp)
  8195d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8195d8:	d0a07b17 	ldw	r2,-32276(gp)
  8195dc:	10800044 	addi	r2,r2,1
  8195e0:	d0a07b15 	stw	r2,-32276(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8195e4:	00002e06 	br	8196a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8195e8:	e0bffd17 	ldw	r2,-12(fp)
  8195ec:	10800017 	ldw	r2,0(r2)
  8195f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8195f4:	e0bffd17 	ldw	r2,-12(fp)
  8195f8:	10800403 	ldbu	r2,16(r2)
  8195fc:	10803fcc 	andi	r2,r2,255
  819600:	10000426 	beq	r2,zero,819614 <alt_tick+0x54>
  819604:	d0a07b17 	ldw	r2,-32276(gp)
  819608:	1000021e 	bne	r2,zero,819614 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81960c:	e0bffd17 	ldw	r2,-12(fp)
  819610:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  819614:	e0bffd17 	ldw	r2,-12(fp)
  819618:	10800217 	ldw	r2,8(r2)
  81961c:	d0e07b17 	ldw	r3,-32276(gp)
  819620:	18801d36 	bltu	r3,r2,819698 <alt_tick+0xd8>
  819624:	e0bffd17 	ldw	r2,-12(fp)
  819628:	10800403 	ldbu	r2,16(r2)
  81962c:	10803fcc 	andi	r2,r2,255
  819630:	1000191e 	bne	r2,zero,819698 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  819634:	e0bffd17 	ldw	r2,-12(fp)
  819638:	10800317 	ldw	r2,12(r2)
  81963c:	e0fffd17 	ldw	r3,-12(fp)
  819640:	18c00517 	ldw	r3,20(r3)
  819644:	1809883a 	mov	r4,r3
  819648:	103ee83a 	callr	r2
  81964c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  819650:	e0bfff17 	ldw	r2,-4(fp)
  819654:	1000031e 	bne	r2,zero,819664 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  819658:	e13ffd17 	ldw	r4,-12(fp)
  81965c:	08195240 	call	819524 <alt_alarm_stop>
  819660:	00000d06 	br	819698 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  819664:	e0bffd17 	ldw	r2,-12(fp)
  819668:	10c00217 	ldw	r3,8(r2)
  81966c:	e0bfff17 	ldw	r2,-4(fp)
  819670:	1887883a 	add	r3,r3,r2
  819674:	e0bffd17 	ldw	r2,-12(fp)
  819678:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81967c:	e0bffd17 	ldw	r2,-12(fp)
  819680:	10c00217 	ldw	r3,8(r2)
  819684:	d0a07b17 	ldw	r2,-32276(gp)
  819688:	1880032e 	bgeu	r3,r2,819698 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81968c:	e0bffd17 	ldw	r2,-12(fp)
  819690:	00c00044 	movi	r3,1
  819694:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  819698:	e0bffe17 	ldw	r2,-8(fp)
  81969c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8196a0:	e0fffd17 	ldw	r3,-12(fp)
  8196a4:	d0a04b04 	addi	r2,gp,-32468
  8196a8:	18bfcf1e 	bne	r3,r2,8195e8 <__alt_mem_epcs_flash_controller_0+0xff8105e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8196ac:	080f5f00 	call	80f5f0 <OSTimeTick>
}
  8196b0:	0001883a 	nop
  8196b4:	e037883a 	mov	sp,fp
  8196b8:	dfc00117 	ldw	ra,4(sp)
  8196bc:	df000017 	ldw	fp,0(sp)
  8196c0:	dec00204 	addi	sp,sp,8
  8196c4:	f800283a 	ret

008196c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8196c8:	deffff04 	addi	sp,sp,-4
  8196cc:	df000015 	stw	fp,0(sp)
  8196d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8196d4:	000170fa 	wrctl	ienable,zero
}
  8196d8:	0001883a 	nop
  8196dc:	e037883a 	mov	sp,fp
  8196e0:	df000017 	ldw	fp,0(sp)
  8196e4:	dec00104 	addi	sp,sp,4
  8196e8:	f800283a 	ret

008196ec <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  8196ec:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  8196f0:	d0e01d17 	ldw	r3,-32652(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  8196f4:	d1207417 	ldw	r4,-32304(gp)

      stw ra,  0(sp)
  8196f8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  8196fc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  819700:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  819704:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  819708:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81970c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  819710:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  819714:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  819718:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81971c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  819720:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  819724:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  819728:	08199600 	call	819960 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81972c:	d1206f17 	ldw	r4,-32324(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  819730:	d1606707 	ldb	r5,-32356(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  819734:	d1207415 	stw	r4,-32304(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  819738:	d1606745 	stb	r5,-32355(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81973c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  819740:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  819744:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  819748:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81974c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  819750:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  819754:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  819758:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81975c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  819760:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  819764:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  819768:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81976c:	d0e01d15 	stw	r3,-32652(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  819770:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  819774:	f800283a 	ret

00819778 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  819778:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81977c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  819780:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  819784:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  819788:	08199600 	call	819960 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81978c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  819790:	d4a06545 	stb	r18,-32363(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  819794:	003fe506 	br	81972c <__alt_mem_epcs_flash_controller_0+0xff81072c>

00819798 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  819798:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81979c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8197a0:	10800054 	ori	r2,r2,1
      wrctl status, r2
  8197a4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  8197a8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  8197ac:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  8197b0:	dec00204 	addi	sp,sp,8

      callr r2
  8197b4:	103ee83a 	callr	r2

      nop
  8197b8:	0001883a 	nop

008197bc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  8197bc:	defff704 	addi	sp,sp,-36
  8197c0:	dfc00815 	stw	ra,32(sp)
  8197c4:	df000715 	stw	fp,28(sp)
  8197c8:	df000704 	addi	fp,sp,28
  8197cc:	e13ffc15 	stw	r4,-16(fp)
  8197d0:	e17ffd15 	stw	r5,-12(fp)
  8197d4:	e1bffe15 	stw	r6,-8(fp)
  8197d8:	3805883a 	mov	r2,r7
  8197dc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  8197e0:	e0fffe17 	ldw	r3,-8(fp)
  8197e4:	00bfff04 	movi	r2,-4
  8197e8:	1884703a 	and	r2,r3,r2
  8197ec:	10bef704 	addi	r2,r2,-1060
  8197f0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  8197f4:	01810904 	movi	r6,1060
  8197f8:	000b883a 	mov	r5,zero
  8197fc:	e13ff917 	ldw	r4,-28(fp)
  819800:	08068fc0 	call	8068fc <memset>
  819804:	e0bff917 	ldw	r2,-28(fp)
  819808:	10c0bb04 	addi	r3,r2,748
  81980c:	e0bff917 	ldw	r2,-28(fp)
  819810:	10c00115 	stw	r3,4(r2)
  819814:	e0bff917 	ldw	r2,-28(fp)
  819818:	10c0d504 	addi	r3,r2,852
  81981c:	e0bff917 	ldw	r2,-28(fp)
  819820:	10c00215 	stw	r3,8(r2)
  819824:	e0bff917 	ldw	r2,-28(fp)
  819828:	10c0ef04 	addi	r3,r2,956
  81982c:	e0bff917 	ldw	r2,-28(fp)
  819830:	10c00315 	stw	r3,12(r2)
  819834:	e0fff917 	ldw	r3,-28(fp)
  819838:	008020b4 	movhi	r2,130
  81983c:	10aa6e04 	addi	r2,r2,-22088
  819840:	18800d15 	stw	r2,52(r3)
  819844:	e0bff917 	ldw	r2,-28(fp)
  819848:	00c00044 	movi	r3,1
  81984c:	10c02915 	stw	r3,164(r2)
  819850:	10002a15 	stw	zero,168(r2)
  819854:	e0bff917 	ldw	r2,-28(fp)
  819858:	00ccc384 	movi	r3,13070
  81985c:	10c02b0d 	sth	r3,172(r2)
  819860:	e0bff917 	ldw	r2,-28(fp)
  819864:	00eaf344 	movi	r3,-21555
  819868:	10c02b8d 	sth	r3,174(r2)
  81986c:	e0bff917 	ldw	r2,-28(fp)
  819870:	00c48d04 	movi	r3,4660
  819874:	10c02c0d 	sth	r3,176(r2)
  819878:	e0bff917 	ldw	r2,-28(fp)
  81987c:	00f99b44 	movi	r3,-6547
  819880:	10c02c8d 	sth	r3,178(r2)
  819884:	e0bff917 	ldw	r2,-28(fp)
  819888:	00f7bb04 	movi	r3,-8468
  81988c:	10c02d0d 	sth	r3,180(r2)
  819890:	e0bff917 	ldw	r2,-28(fp)
  819894:	00c00144 	movi	r3,5
  819898:	10c02d8d 	sth	r3,182(r2)
  81989c:	e0bff917 	ldw	r2,-28(fp)
  8198a0:	00c002c4 	movi	r3,11
  8198a4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  8198a8:	e0bff917 	ldw	r2,-28(fp)
  8198ac:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  8198b0:	e0bffa17 	ldw	r2,-24(fp)
  8198b4:	10bff304 	addi	r2,r2,-52
  8198b8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  8198bc:	e0bffb17 	ldw	r2,-20(fp)
  8198c0:	10800c04 	addi	r2,r2,48
  8198c4:	e0fffc17 	ldw	r3,-16(fp)
  8198c8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  8198cc:	e0bffb17 	ldw	r2,-20(fp)
  8198d0:	10800b04 	addi	r2,r2,44
  8198d4:	e0fffd17 	ldw	r3,-12(fp)
  8198d8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  8198dc:	e0bffb17 	ldw	r2,-20(fp)
  8198e0:	10800a04 	addi	r2,r2,40
  8198e4:	e0fff917 	ldw	r3,-28(fp)
  8198e8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  8198ec:	008020b4 	movhi	r2,130
  8198f0:	10a5e604 	addi	r2,r2,-26728
  8198f4:	10c00104 	addi	r3,r2,4
  8198f8:	e0bffb17 	ldw	r2,-20(fp)
  8198fc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  819900:	e0bffb17 	ldw	r2,-20(fp)
}
  819904:	e037883a 	mov	sp,fp
  819908:	dfc00117 	ldw	ra,4(sp)
  81990c:	df000017 	ldw	fp,0(sp)
  819910:	dec00204 	addi	sp,sp,8
  819914:	f800283a 	ret

00819918 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  819918:	defffe04 	addi	sp,sp,-8
  81991c:	df000115 	stw	fp,4(sp)
  819920:	df000104 	addi	fp,sp,4
  819924:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  819928:	0001883a 	nop
  81992c:	e037883a 	mov	sp,fp
  819930:	df000017 	ldw	fp,0(sp)
  819934:	dec00104 	addi	sp,sp,4
  819938:	f800283a 	ret

0081993c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81993c:	defffe04 	addi	sp,sp,-8
  819940:	df000115 	stw	fp,4(sp)
  819944:	df000104 	addi	fp,sp,4
  819948:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81994c:	0001883a 	nop
  819950:	e037883a 	mov	sp,fp
  819954:	df000017 	ldw	fp,0(sp)
  819958:	dec00104 	addi	sp,sp,4
  81995c:	f800283a 	ret

00819960 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  819960:	deffff04 	addi	sp,sp,-4
  819964:	df000015 	stw	fp,0(sp)
  819968:	d839883a 	mov	fp,sp
}
  81996c:	0001883a 	nop
  819970:	e037883a 	mov	sp,fp
  819974:	df000017 	ldw	fp,0(sp)
  819978:	dec00104 	addi	sp,sp,4
  81997c:	f800283a 	ret

00819980 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  819980:	deffff04 	addi	sp,sp,-4
  819984:	df000015 	stw	fp,0(sp)
  819988:	d839883a 	mov	fp,sp
}
  81998c:	0001883a 	nop
  819990:	e037883a 	mov	sp,fp
  819994:	df000017 	ldw	fp,0(sp)
  819998:	dec00104 	addi	sp,sp,4
  81999c:	f800283a 	ret

008199a0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  8199a0:	deffff04 	addi	sp,sp,-4
  8199a4:	df000015 	stw	fp,0(sp)
  8199a8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  8199ac:	0001883a 	nop
  8199b0:	e037883a 	mov	sp,fp
  8199b4:	df000017 	ldw	fp,0(sp)
  8199b8:	dec00104 	addi	sp,sp,4
  8199bc:	f800283a 	ret

008199c0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  8199c0:	deffff04 	addi	sp,sp,-4
  8199c4:	df000015 	stw	fp,0(sp)
  8199c8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  8199cc:	0001883a 	nop
  8199d0:	e037883a 	mov	sp,fp
  8199d4:	df000017 	ldw	fp,0(sp)
  8199d8:	dec00104 	addi	sp,sp,4
  8199dc:	f800283a 	ret

008199e0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  8199e0:	deffff04 	addi	sp,sp,-4
  8199e4:	df000015 	stw	fp,0(sp)
  8199e8:	d839883a 	mov	fp,sp
}
  8199ec:	0001883a 	nop
  8199f0:	e037883a 	mov	sp,fp
  8199f4:	df000017 	ldw	fp,0(sp)
  8199f8:	dec00104 	addi	sp,sp,4
  8199fc:	f800283a 	ret

00819a00 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  819a00:	deffff04 	addi	sp,sp,-4
  819a04:	df000015 	stw	fp,0(sp)
  819a08:	d839883a 	mov	fp,sp
}
  819a0c:	0001883a 	nop
  819a10:	e037883a 	mov	sp,fp
  819a14:	df000017 	ldw	fp,0(sp)
  819a18:	dec00104 	addi	sp,sp,4
  819a1c:	f800283a 	ret

00819a20 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  819a20:	defffe04 	addi	sp,sp,-8
  819a24:	df000115 	stw	fp,4(sp)
  819a28:	df000104 	addi	fp,sp,4
  819a2c:	e13fff15 	stw	r4,-4(fp)
}
  819a30:	0001883a 	nop
  819a34:	e037883a 	mov	sp,fp
  819a38:	df000017 	ldw	fp,0(sp)
  819a3c:	dec00104 	addi	sp,sp,4
  819a40:	f800283a 	ret

00819a44 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  819a44:	defff404 	addi	sp,sp,-48
  819a48:	df000b15 	stw	fp,44(sp)
  819a4c:	df000b04 	addi	fp,sp,44
  819a50:	e13ffc15 	stw	r4,-16(fp)
  819a54:	e17ffd15 	stw	r5,-12(fp)
  819a58:	e1bffe15 	stw	r6,-8(fp)
  819a5c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  819a60:	e0ffff17 	ldw	r3,-4(fp)
  819a64:	e0bffe17 	ldw	r2,-8(fp)
  819a68:	1885883a 	add	r2,r3,r2
  819a6c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  819a70:	e0c00217 	ldw	r3,8(fp)
  819a74:	e0800117 	ldw	r2,4(fp)
  819a78:	1885883a 	add	r2,r3,r2
  819a7c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  819a80:	e0800117 	ldw	r2,4(fp)
  819a84:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  819a88:	e0bffe17 	ldw	r2,-8(fp)
  819a8c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  819a90:	00800044 	movi	r2,1
  819a94:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  819a98:	e0bffc17 	ldw	r2,-16(fp)
  819a9c:	10800504 	addi	r2,r2,20
  819aa0:	1009883a 	mov	r4,r2
  819aa4:	00c00044 	movi	r3,1
  819aa8:	e0bffd17 	ldw	r2,-12(fp)
  819aac:	1884983a 	sll	r2,r3,r2
  819ab0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  819ab4:	e0800317 	ldw	r2,12(fp)
  819ab8:	1080008c 	andi	r2,r2,2
  819abc:	1000051e 	bne	r2,zero,819ad4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  819ac0:	e0bffc17 	ldw	r2,-16(fp)
  819ac4:	10800304 	addi	r2,r2,12
  819ac8:	1007883a 	mov	r3,r2
  819acc:	00810004 	movi	r2,1024
  819ad0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  819ad4:	e0bffc17 	ldw	r2,-16(fp)
  819ad8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  819adc:	e0bffc17 	ldw	r2,-16(fp)
  819ae0:	10800204 	addi	r2,r2,8
  819ae4:	10800037 	ldwio	r2,0(r2)
  819ae8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  819aec:	e0bffa17 	ldw	r2,-24(fp)
  819af0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  819af4:	10000226 	beq	r2,zero,819b00 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  819af8:	e0bff717 	ldw	r2,-36(fp)
  819afc:	1000031e 	bne	r2,zero,819b0c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  819b00:	e0bffa17 	ldw	r2,-24(fp)
  819b04:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  819b08:	103ff426 	beq	r2,zero,819adc <__alt_mem_epcs_flash_controller_0+0xff810adc>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  819b0c:	e0bffa17 	ldw	r2,-24(fp)
  819b10:	1080100c 	andi	r2,r2,64
  819b14:	10001e26 	beq	r2,zero,819b90 <alt_avalon_spi_command+0x14c>
  819b18:	e0bff717 	ldw	r2,-36(fp)
  819b1c:	00801c0e 	bge	zero,r2,819b90 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  819b20:	e0bff717 	ldw	r2,-36(fp)
  819b24:	10bfffc4 	addi	r2,r2,-1
  819b28:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  819b2c:	e0ffff17 	ldw	r3,-4(fp)
  819b30:	e0bff817 	ldw	r2,-32(fp)
  819b34:	18800a2e 	bgeu	r3,r2,819b60 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  819b38:	e0bffc17 	ldw	r2,-16(fp)
  819b3c:	10800104 	addi	r2,r2,4
  819b40:	1009883a 	mov	r4,r2
  819b44:	e0bfff17 	ldw	r2,-4(fp)
  819b48:	10c00044 	addi	r3,r2,1
  819b4c:	e0ffff15 	stw	r3,-4(fp)
  819b50:	10800003 	ldbu	r2,0(r2)
  819b54:	10803fcc 	andi	r2,r2,255
  819b58:	20800035 	stwio	r2,0(r4)
  819b5c:	00000c06 	br	819b90 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  819b60:	e0bff517 	ldw	r2,-44(fp)
  819b64:	10000826 	beq	r2,zero,819b88 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  819b68:	e0bff517 	ldw	r2,-44(fp)
  819b6c:	10bfffc4 	addi	r2,r2,-1
  819b70:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  819b74:	e0bffc17 	ldw	r2,-16(fp)
  819b78:	10800104 	addi	r2,r2,4
  819b7c:	0007883a 	mov	r3,zero
  819b80:	10c00035 	stwio	r3,0(r2)
  819b84:	00000206 	br	819b90 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  819b88:	00bf0004 	movi	r2,-1024
  819b8c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  819b90:	e0bffa17 	ldw	r2,-24(fp)
  819b94:	1080200c 	andi	r2,r2,128
  819b98:	103fd026 	beq	r2,zero,819adc <__alt_mem_epcs_flash_controller_0+0xff810adc>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  819b9c:	e0bffc17 	ldw	r2,-16(fp)
  819ba0:	10800037 	ldwio	r2,0(r2)
  819ba4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  819ba8:	e0bff617 	ldw	r2,-40(fp)
  819bac:	10000426 	beq	r2,zero,819bc0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  819bb0:	e0bff617 	ldw	r2,-40(fp)
  819bb4:	10bfffc4 	addi	r2,r2,-1
  819bb8:	e0bff615 	stw	r2,-40(fp)
  819bbc:	00000506 	br	819bd4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  819bc0:	e0800217 	ldw	r2,8(fp)
  819bc4:	10c00044 	addi	r3,r2,1
  819bc8:	e0c00215 	stw	r3,8(fp)
  819bcc:	e0fffb17 	ldw	r3,-20(fp)
  819bd0:	10c00005 	stb	r3,0(r2)
      credits++;
  819bd4:	e0bff717 	ldw	r2,-36(fp)
  819bd8:	10800044 	addi	r2,r2,1
  819bdc:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  819be0:	e0bff617 	ldw	r2,-40(fp)
  819be4:	103fbd1e 	bne	r2,zero,819adc <__alt_mem_epcs_flash_controller_0+0xff810adc>
  819be8:	e0c00217 	ldw	r3,8(fp)
  819bec:	e0bff917 	ldw	r2,-28(fp)
  819bf0:	18bfba1e 	bne	r3,r2,819adc <__alt_mem_epcs_flash_controller_0+0xff810adc>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  819bf4:	e0bffc17 	ldw	r2,-16(fp)
  819bf8:	10800204 	addi	r2,r2,8
  819bfc:	10800037 	ldwio	r2,0(r2)
  819c00:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  819c04:	e0bffa17 	ldw	r2,-24(fp)
  819c08:	1080080c 	andi	r2,r2,32
  819c0c:	103ff926 	beq	r2,zero,819bf4 <__alt_mem_epcs_flash_controller_0+0xff810bf4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  819c10:	e0800317 	ldw	r2,12(fp)
  819c14:	1080004c 	andi	r2,r2,1
  819c18:	1000041e 	bne	r2,zero,819c2c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  819c1c:	e0bffc17 	ldw	r2,-16(fp)
  819c20:	10800304 	addi	r2,r2,12
  819c24:	0007883a 	mov	r3,zero
  819c28:	10c00035 	stwio	r3,0(r2)

  return read_length;
  819c2c:	e0800117 	ldw	r2,4(fp)
}
  819c30:	e037883a 	mov	sp,fp
  819c34:	df000017 	ldw	fp,0(sp)
  819c38:	dec00104 	addi	sp,sp,4
  819c3c:	f800283a 	ret

00819c40 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  819c40:	defffa04 	addi	sp,sp,-24
  819c44:	dfc00515 	stw	ra,20(sp)
  819c48:	df000415 	stw	fp,16(sp)
  819c4c:	df000404 	addi	fp,sp,16
  819c50:	e13ffe15 	stw	r4,-8(fp)
  819c54:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  819c58:	e0bfff17 	ldw	r2,-4(fp)
  819c5c:	10800017 	ldw	r2,0(r2)
  819c60:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  819c64:	e13ffe17 	ldw	r4,-8(fp)
  819c68:	0800ba40 	call	800ba4 <strlen>
  819c6c:	10800044 	addi	r2,r2,1
  819c70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  819c74:	00000d06 	br	819cac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  819c78:	e0bffc17 	ldw	r2,-16(fp)
  819c7c:	10800217 	ldw	r2,8(r2)
  819c80:	e0fffd17 	ldw	r3,-12(fp)
  819c84:	180d883a 	mov	r6,r3
  819c88:	e17ffe17 	ldw	r5,-8(fp)
  819c8c:	1009883a 	mov	r4,r2
  819c90:	0819f180 	call	819f18 <memcmp>
  819c94:	1000021e 	bne	r2,zero,819ca0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  819c98:	e0bffc17 	ldw	r2,-16(fp)
  819c9c:	00000706 	br	819cbc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  819ca0:	e0bffc17 	ldw	r2,-16(fp)
  819ca4:	10800017 	ldw	r2,0(r2)
  819ca8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  819cac:	e0fffc17 	ldw	r3,-16(fp)
  819cb0:	e0bfff17 	ldw	r2,-4(fp)
  819cb4:	18bff01e 	bne	r3,r2,819c78 <__alt_mem_epcs_flash_controller_0+0xff810c78>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  819cb8:	0005883a 	mov	r2,zero
}
  819cbc:	e037883a 	mov	sp,fp
  819cc0:	dfc00117 	ldw	ra,4(sp)
  819cc4:	df000017 	ldw	fp,0(sp)
  819cc8:	dec00204 	addi	sp,sp,8
  819ccc:	f800283a 	ret

00819cd0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  819cd0:	defffb04 	addi	sp,sp,-20
  819cd4:	dfc00415 	stw	ra,16(sp)
  819cd8:	df000315 	stw	fp,12(sp)
  819cdc:	df000304 	addi	fp,sp,12
  819ce0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  819ce4:	d0a02217 	ldw	r2,-32632(gp)
  819ce8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  819cec:	00003106 	br	819db4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  819cf0:	e0bffd17 	ldw	r2,-12(fp)
  819cf4:	10800217 	ldw	r2,8(r2)
  819cf8:	1009883a 	mov	r4,r2
  819cfc:	0800ba40 	call	800ba4 <strlen>
  819d00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  819d04:	e0bffd17 	ldw	r2,-12(fp)
  819d08:	10c00217 	ldw	r3,8(r2)
  819d0c:	e0bffe17 	ldw	r2,-8(fp)
  819d10:	10bfffc4 	addi	r2,r2,-1
  819d14:	1885883a 	add	r2,r3,r2
  819d18:	10800003 	ldbu	r2,0(r2)
  819d1c:	10803fcc 	andi	r2,r2,255
  819d20:	1080201c 	xori	r2,r2,128
  819d24:	10bfe004 	addi	r2,r2,-128
  819d28:	10800bd8 	cmpnei	r2,r2,47
  819d2c:	1000031e 	bne	r2,zero,819d3c <alt_find_file+0x6c>
    {
      len -= 1;
  819d30:	e0bffe17 	ldw	r2,-8(fp)
  819d34:	10bfffc4 	addi	r2,r2,-1
  819d38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  819d3c:	e0bffe17 	ldw	r2,-8(fp)
  819d40:	e0ffff17 	ldw	r3,-4(fp)
  819d44:	1885883a 	add	r2,r3,r2
  819d48:	10800003 	ldbu	r2,0(r2)
  819d4c:	10803fcc 	andi	r2,r2,255
  819d50:	1080201c 	xori	r2,r2,128
  819d54:	10bfe004 	addi	r2,r2,-128
  819d58:	10800be0 	cmpeqi	r2,r2,47
  819d5c:	1000081e 	bne	r2,zero,819d80 <alt_find_file+0xb0>
  819d60:	e0bffe17 	ldw	r2,-8(fp)
  819d64:	e0ffff17 	ldw	r3,-4(fp)
  819d68:	1885883a 	add	r2,r3,r2
  819d6c:	10800003 	ldbu	r2,0(r2)
  819d70:	10803fcc 	andi	r2,r2,255
  819d74:	1080201c 	xori	r2,r2,128
  819d78:	10bfe004 	addi	r2,r2,-128
  819d7c:	10000a1e 	bne	r2,zero,819da8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  819d80:	e0bffd17 	ldw	r2,-12(fp)
  819d84:	10800217 	ldw	r2,8(r2)
  819d88:	e0fffe17 	ldw	r3,-8(fp)
  819d8c:	180d883a 	mov	r6,r3
  819d90:	e17fff17 	ldw	r5,-4(fp)
  819d94:	1009883a 	mov	r4,r2
  819d98:	0819f180 	call	819f18 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  819d9c:	1000021e 	bne	r2,zero,819da8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  819da0:	e0bffd17 	ldw	r2,-12(fp)
  819da4:	00000706 	br	819dc4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  819da8:	e0bffd17 	ldw	r2,-12(fp)
  819dac:	10800017 	ldw	r2,0(r2)
  819db0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  819db4:	e0fffd17 	ldw	r3,-12(fp)
  819db8:	d0a02204 	addi	r2,gp,-32632
  819dbc:	18bfcc1e 	bne	r3,r2,819cf0 <__alt_mem_epcs_flash_controller_0+0xff810cf0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  819dc0:	0005883a 	mov	r2,zero
}
  819dc4:	e037883a 	mov	sp,fp
  819dc8:	dfc00117 	ldw	ra,4(sp)
  819dcc:	df000017 	ldw	fp,0(sp)
  819dd0:	dec00204 	addi	sp,sp,8
  819dd4:	f800283a 	ret

00819dd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  819dd8:	defff804 	addi	sp,sp,-32
  819ddc:	dfc00715 	stw	ra,28(sp)
  819de0:	df000615 	stw	fp,24(sp)
  819de4:	dc000515 	stw	r16,20(sp)
  819de8:	df000604 	addi	fp,sp,24
  819dec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  819df0:	00bffa04 	movi	r2,-24
  819df4:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  819df8:	d0a05c17 	ldw	r2,-32400(gp)
  819dfc:	e0bffc15 	stw	r2,-16(fp)
  819e00:	e03ffd0d 	sth	zero,-12(fp)
  819e04:	e0bffd0b 	ldhu	r2,-12(fp)
  819e08:	e0fffd84 	addi	r3,fp,-10
  819e0c:	180d883a 	mov	r6,r3
  819e10:	100b883a 	mov	r5,r2
  819e14:	e13ffc17 	ldw	r4,-16(fp)
  819e18:	0813e400 	call	813e40 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  819e1c:	e03ffa15 	stw	zero,-24(fp)
  819e20:	00001d06 	br	819e98 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  819e24:	040020b4 	movhi	r16,130
  819e28:	842ca204 	addi	r16,r16,-19832
  819e2c:	e0bffa17 	ldw	r2,-24(fp)
  819e30:	01400304 	movi	r5,12
  819e34:	1009883a 	mov	r4,r2
  819e38:	080b2400 	call	80b240 <__mulsi3>
  819e3c:	8085883a 	add	r2,r16,r2
  819e40:	10800017 	ldw	r2,0(r2)
  819e44:	1000111e 	bne	r2,zero,819e8c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  819e48:	040020b4 	movhi	r16,130
  819e4c:	842ca204 	addi	r16,r16,-19832
  819e50:	e0bffa17 	ldw	r2,-24(fp)
  819e54:	01400304 	movi	r5,12
  819e58:	1009883a 	mov	r4,r2
  819e5c:	080b2400 	call	80b240 <__mulsi3>
  819e60:	8085883a 	add	r2,r16,r2
  819e64:	e0fffe17 	ldw	r3,-8(fp)
  819e68:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  819e6c:	d0e02617 	ldw	r3,-32616(gp)
  819e70:	e0bffa17 	ldw	r2,-24(fp)
  819e74:	1880020e 	bge	r3,r2,819e80 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  819e78:	e0bffa17 	ldw	r2,-24(fp)
  819e7c:	d0a02615 	stw	r2,-32616(gp)
      }
      rc = i;
  819e80:	e0bffa17 	ldw	r2,-24(fp)
  819e84:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  819e88:	00000606 	br	819ea4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  819e8c:	e0bffa17 	ldw	r2,-24(fp)
  819e90:	10800044 	addi	r2,r2,1
  819e94:	e0bffa15 	stw	r2,-24(fp)
  819e98:	e0bffa17 	ldw	r2,-24(fp)
  819e9c:	10800810 	cmplti	r2,r2,32
  819ea0:	103fe01e 	bne	r2,zero,819e24 <__alt_mem_epcs_flash_controller_0+0xff810e24>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  819ea4:	d0a05c17 	ldw	r2,-32400(gp)
  819ea8:	1009883a 	mov	r4,r2
  819eac:	08141b80 	call	8141b8 <OSSemPost>

  return rc;
  819eb0:	e0bffb17 	ldw	r2,-20(fp)
}
  819eb4:	e6ffff04 	addi	sp,fp,-4
  819eb8:	dfc00217 	ldw	ra,8(sp)
  819ebc:	df000117 	ldw	fp,4(sp)
  819ec0:	dc000017 	ldw	r16,0(sp)
  819ec4:	dec00304 	addi	sp,sp,12
  819ec8:	f800283a 	ret

00819ecc <atexit>:
  819ecc:	200b883a 	mov	r5,r4
  819ed0:	000f883a 	mov	r7,zero
  819ed4:	000d883a 	mov	r6,zero
  819ed8:	0009883a 	mov	r4,zero
  819edc:	0819f941 	jmpi	819f94 <__register_exitproc>

00819ee0 <exit>:
  819ee0:	defffe04 	addi	sp,sp,-8
  819ee4:	000b883a 	mov	r5,zero
  819ee8:	dc000015 	stw	r16,0(sp)
  819eec:	dfc00115 	stw	ra,4(sp)
  819ef0:	2021883a 	mov	r16,r4
  819ef4:	081a0ac0 	call	81a0ac <__call_exitprocs>
  819ef8:	008020b4 	movhi	r2,130
  819efc:	10b1d404 	addi	r2,r2,-14512
  819f00:	11000017 	ldw	r4,0(r2)
  819f04:	20800f17 	ldw	r2,60(r4)
  819f08:	10000126 	beq	r2,zero,819f10 <exit+0x30>
  819f0c:	103ee83a 	callr	r2
  819f10:	8009883a 	mov	r4,r16
  819f14:	081a22c0 	call	81a22c <_exit>

00819f18 <memcmp>:
  819f18:	01c000c4 	movi	r7,3
  819f1c:	3980192e 	bgeu	r7,r6,819f84 <memcmp+0x6c>
  819f20:	2144b03a 	or	r2,r4,r5
  819f24:	11c4703a 	and	r2,r2,r7
  819f28:	10000f26 	beq	r2,zero,819f68 <memcmp+0x50>
  819f2c:	20800003 	ldbu	r2,0(r4)
  819f30:	28c00003 	ldbu	r3,0(r5)
  819f34:	10c0151e 	bne	r2,r3,819f8c <memcmp+0x74>
  819f38:	31bfff84 	addi	r6,r6,-2
  819f3c:	01ffffc4 	movi	r7,-1
  819f40:	00000406 	br	819f54 <memcmp+0x3c>
  819f44:	20800003 	ldbu	r2,0(r4)
  819f48:	28c00003 	ldbu	r3,0(r5)
  819f4c:	31bfffc4 	addi	r6,r6,-1
  819f50:	10c00e1e 	bne	r2,r3,819f8c <memcmp+0x74>
  819f54:	21000044 	addi	r4,r4,1
  819f58:	29400044 	addi	r5,r5,1
  819f5c:	31fff91e 	bne	r6,r7,819f44 <__alt_mem_epcs_flash_controller_0+0xff810f44>
  819f60:	0005883a 	mov	r2,zero
  819f64:	f800283a 	ret
  819f68:	20c00017 	ldw	r3,0(r4)
  819f6c:	28800017 	ldw	r2,0(r5)
  819f70:	18bfee1e 	bne	r3,r2,819f2c <__alt_mem_epcs_flash_controller_0+0xff810f2c>
  819f74:	31bfff04 	addi	r6,r6,-4
  819f78:	21000104 	addi	r4,r4,4
  819f7c:	29400104 	addi	r5,r5,4
  819f80:	39bff936 	bltu	r7,r6,819f68 <__alt_mem_epcs_flash_controller_0+0xff810f68>
  819f84:	303fe91e 	bne	r6,zero,819f2c <__alt_mem_epcs_flash_controller_0+0xff810f2c>
  819f88:	003ff506 	br	819f60 <__alt_mem_epcs_flash_controller_0+0xff810f60>
  819f8c:	10c5c83a 	sub	r2,r2,r3
  819f90:	f800283a 	ret

00819f94 <__register_exitproc>:
  819f94:	defffa04 	addi	sp,sp,-24
  819f98:	dc000315 	stw	r16,12(sp)
  819f9c:	040020b4 	movhi	r16,130
  819fa0:	8431d404 	addi	r16,r16,-14512
  819fa4:	80c00017 	ldw	r3,0(r16)
  819fa8:	dc400415 	stw	r17,16(sp)
  819fac:	dfc00515 	stw	ra,20(sp)
  819fb0:	18805217 	ldw	r2,328(r3)
  819fb4:	2023883a 	mov	r17,r4
  819fb8:	10003726 	beq	r2,zero,81a098 <__register_exitproc+0x104>
  819fbc:	10c00117 	ldw	r3,4(r2)
  819fc0:	010007c4 	movi	r4,31
  819fc4:	20c00e16 	blt	r4,r3,81a000 <__register_exitproc+0x6c>
  819fc8:	1a000044 	addi	r8,r3,1
  819fcc:	8800221e 	bne	r17,zero,81a058 <__register_exitproc+0xc4>
  819fd0:	18c00084 	addi	r3,r3,2
  819fd4:	18c7883a 	add	r3,r3,r3
  819fd8:	18c7883a 	add	r3,r3,r3
  819fdc:	12000115 	stw	r8,4(r2)
  819fe0:	10c7883a 	add	r3,r2,r3
  819fe4:	19400015 	stw	r5,0(r3)
  819fe8:	0005883a 	mov	r2,zero
  819fec:	dfc00517 	ldw	ra,20(sp)
  819ff0:	dc400417 	ldw	r17,16(sp)
  819ff4:	dc000317 	ldw	r16,12(sp)
  819ff8:	dec00604 	addi	sp,sp,24
  819ffc:	f800283a 	ret
  81a000:	00800034 	movhi	r2,0
  81a004:	10800004 	addi	r2,r2,0
  81a008:	10002626 	beq	r2,zero,81a0a4 <__register_exitproc+0x110>
  81a00c:	01006404 	movi	r4,400
  81a010:	d9400015 	stw	r5,0(sp)
  81a014:	d9800115 	stw	r6,4(sp)
  81a018:	d9c00215 	stw	r7,8(sp)
  81a01c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81a020:	d9400017 	ldw	r5,0(sp)
  81a024:	d9800117 	ldw	r6,4(sp)
  81a028:	d9c00217 	ldw	r7,8(sp)
  81a02c:	10001d26 	beq	r2,zero,81a0a4 <__register_exitproc+0x110>
  81a030:	81000017 	ldw	r4,0(r16)
  81a034:	10000115 	stw	zero,4(r2)
  81a038:	02000044 	movi	r8,1
  81a03c:	22405217 	ldw	r9,328(r4)
  81a040:	0007883a 	mov	r3,zero
  81a044:	12400015 	stw	r9,0(r2)
  81a048:	20805215 	stw	r2,328(r4)
  81a04c:	10006215 	stw	zero,392(r2)
  81a050:	10006315 	stw	zero,396(r2)
  81a054:	883fde26 	beq	r17,zero,819fd0 <__alt_mem_epcs_flash_controller_0+0xff810fd0>
  81a058:	18c9883a 	add	r4,r3,r3
  81a05c:	2109883a 	add	r4,r4,r4
  81a060:	1109883a 	add	r4,r2,r4
  81a064:	21802215 	stw	r6,136(r4)
  81a068:	01800044 	movi	r6,1
  81a06c:	12406217 	ldw	r9,392(r2)
  81a070:	30cc983a 	sll	r6,r6,r3
  81a074:	4992b03a 	or	r9,r9,r6
  81a078:	12406215 	stw	r9,392(r2)
  81a07c:	21c04215 	stw	r7,264(r4)
  81a080:	01000084 	movi	r4,2
  81a084:	893fd21e 	bne	r17,r4,819fd0 <__alt_mem_epcs_flash_controller_0+0xff810fd0>
  81a088:	11006317 	ldw	r4,396(r2)
  81a08c:	218cb03a 	or	r6,r4,r6
  81a090:	11806315 	stw	r6,396(r2)
  81a094:	003fce06 	br	819fd0 <__alt_mem_epcs_flash_controller_0+0xff810fd0>
  81a098:	18805304 	addi	r2,r3,332
  81a09c:	18805215 	stw	r2,328(r3)
  81a0a0:	003fc606 	br	819fbc <__alt_mem_epcs_flash_controller_0+0xff810fbc>
  81a0a4:	00bfffc4 	movi	r2,-1
  81a0a8:	003fd006 	br	819fec <__alt_mem_epcs_flash_controller_0+0xff810fec>

0081a0ac <__call_exitprocs>:
  81a0ac:	defff504 	addi	sp,sp,-44
  81a0b0:	df000915 	stw	fp,36(sp)
  81a0b4:	dd400615 	stw	r21,24(sp)
  81a0b8:	dc800315 	stw	r18,12(sp)
  81a0bc:	dfc00a15 	stw	ra,40(sp)
  81a0c0:	ddc00815 	stw	r23,32(sp)
  81a0c4:	dd800715 	stw	r22,28(sp)
  81a0c8:	dd000515 	stw	r20,20(sp)
  81a0cc:	dcc00415 	stw	r19,16(sp)
  81a0d0:	dc400215 	stw	r17,8(sp)
  81a0d4:	dc000115 	stw	r16,4(sp)
  81a0d8:	d9000015 	stw	r4,0(sp)
  81a0dc:	2839883a 	mov	fp,r5
  81a0e0:	04800044 	movi	r18,1
  81a0e4:	057fffc4 	movi	r21,-1
  81a0e8:	008020b4 	movhi	r2,130
  81a0ec:	10b1d404 	addi	r2,r2,-14512
  81a0f0:	12000017 	ldw	r8,0(r2)
  81a0f4:	45005217 	ldw	r20,328(r8)
  81a0f8:	44c05204 	addi	r19,r8,328
  81a0fc:	a0001c26 	beq	r20,zero,81a170 <__call_exitprocs+0xc4>
  81a100:	a0800117 	ldw	r2,4(r20)
  81a104:	15ffffc4 	addi	r23,r2,-1
  81a108:	b8000d16 	blt	r23,zero,81a140 <__call_exitprocs+0x94>
  81a10c:	14000044 	addi	r16,r2,1
  81a110:	8421883a 	add	r16,r16,r16
  81a114:	8421883a 	add	r16,r16,r16
  81a118:	84402004 	addi	r17,r16,128
  81a11c:	a463883a 	add	r17,r20,r17
  81a120:	a421883a 	add	r16,r20,r16
  81a124:	e0001e26 	beq	fp,zero,81a1a0 <__call_exitprocs+0xf4>
  81a128:	80804017 	ldw	r2,256(r16)
  81a12c:	e0801c26 	beq	fp,r2,81a1a0 <__call_exitprocs+0xf4>
  81a130:	bdffffc4 	addi	r23,r23,-1
  81a134:	843fff04 	addi	r16,r16,-4
  81a138:	8c7fff04 	addi	r17,r17,-4
  81a13c:	bd7ff91e 	bne	r23,r21,81a124 <__alt_mem_epcs_flash_controller_0+0xff811124>
  81a140:	00800034 	movhi	r2,0
  81a144:	10800004 	addi	r2,r2,0
  81a148:	10000926 	beq	r2,zero,81a170 <__call_exitprocs+0xc4>
  81a14c:	a0800117 	ldw	r2,4(r20)
  81a150:	1000301e 	bne	r2,zero,81a214 <__call_exitprocs+0x168>
  81a154:	a0800017 	ldw	r2,0(r20)
  81a158:	10003226 	beq	r2,zero,81a224 <__call_exitprocs+0x178>
  81a15c:	a009883a 	mov	r4,r20
  81a160:	98800015 	stw	r2,0(r19)
  81a164:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81a168:	9d000017 	ldw	r20,0(r19)
  81a16c:	a03fe41e 	bne	r20,zero,81a100 <__alt_mem_epcs_flash_controller_0+0xff811100>
  81a170:	dfc00a17 	ldw	ra,40(sp)
  81a174:	df000917 	ldw	fp,36(sp)
  81a178:	ddc00817 	ldw	r23,32(sp)
  81a17c:	dd800717 	ldw	r22,28(sp)
  81a180:	dd400617 	ldw	r21,24(sp)
  81a184:	dd000517 	ldw	r20,20(sp)
  81a188:	dcc00417 	ldw	r19,16(sp)
  81a18c:	dc800317 	ldw	r18,12(sp)
  81a190:	dc400217 	ldw	r17,8(sp)
  81a194:	dc000117 	ldw	r16,4(sp)
  81a198:	dec00b04 	addi	sp,sp,44
  81a19c:	f800283a 	ret
  81a1a0:	a0800117 	ldw	r2,4(r20)
  81a1a4:	80c00017 	ldw	r3,0(r16)
  81a1a8:	10bfffc4 	addi	r2,r2,-1
  81a1ac:	15c01426 	beq	r2,r23,81a200 <__call_exitprocs+0x154>
  81a1b0:	80000015 	stw	zero,0(r16)
  81a1b4:	183fde26 	beq	r3,zero,81a130 <__alt_mem_epcs_flash_controller_0+0xff811130>
  81a1b8:	95c8983a 	sll	r4,r18,r23
  81a1bc:	a0806217 	ldw	r2,392(r20)
  81a1c0:	a5800117 	ldw	r22,4(r20)
  81a1c4:	2084703a 	and	r2,r4,r2
  81a1c8:	10000b26 	beq	r2,zero,81a1f8 <__call_exitprocs+0x14c>
  81a1cc:	a0806317 	ldw	r2,396(r20)
  81a1d0:	2088703a 	and	r4,r4,r2
  81a1d4:	20000c1e 	bne	r4,zero,81a208 <__call_exitprocs+0x15c>
  81a1d8:	89400017 	ldw	r5,0(r17)
  81a1dc:	d9000017 	ldw	r4,0(sp)
  81a1e0:	183ee83a 	callr	r3
  81a1e4:	a0800117 	ldw	r2,4(r20)
  81a1e8:	15bfbf1e 	bne	r2,r22,81a0e8 <__alt_mem_epcs_flash_controller_0+0xff8110e8>
  81a1ec:	98800017 	ldw	r2,0(r19)
  81a1f0:	153fcf26 	beq	r2,r20,81a130 <__alt_mem_epcs_flash_controller_0+0xff811130>
  81a1f4:	003fbc06 	br	81a0e8 <__alt_mem_epcs_flash_controller_0+0xff8110e8>
  81a1f8:	183ee83a 	callr	r3
  81a1fc:	003ff906 	br	81a1e4 <__alt_mem_epcs_flash_controller_0+0xff8111e4>
  81a200:	a5c00115 	stw	r23,4(r20)
  81a204:	003feb06 	br	81a1b4 <__alt_mem_epcs_flash_controller_0+0xff8111b4>
  81a208:	89000017 	ldw	r4,0(r17)
  81a20c:	183ee83a 	callr	r3
  81a210:	003ff406 	br	81a1e4 <__alt_mem_epcs_flash_controller_0+0xff8111e4>
  81a214:	a0800017 	ldw	r2,0(r20)
  81a218:	a027883a 	mov	r19,r20
  81a21c:	1029883a 	mov	r20,r2
  81a220:	003fb606 	br	81a0fc <__alt_mem_epcs_flash_controller_0+0xff8110fc>
  81a224:	0005883a 	mov	r2,zero
  81a228:	003ffb06 	br	81a218 <__alt_mem_epcs_flash_controller_0+0xff811218>

0081a22c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81a22c:	defffd04 	addi	sp,sp,-12
  81a230:	df000215 	stw	fp,8(sp)
  81a234:	df000204 	addi	fp,sp,8
  81a238:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81a23c:	d0206545 	stb	zero,-32363(gp)
  81a240:	e0bfff17 	ldw	r2,-4(fp)
  81a244:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81a248:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81a24c:	10000226 	beq	r2,zero,81a258 <_exit+0x2c>
    ALT_SIM_FAIL();
  81a250:	002af070 	cmpltui	zero,zero,43969
  81a254:	00000106 	br	81a25c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81a258:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81a25c:	003fff06 	br	81a25c <__alt_mem_epcs_flash_controller_0+0xff81125c>
