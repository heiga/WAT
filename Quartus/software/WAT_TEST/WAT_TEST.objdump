
WAT_TEST.elf:     file format elf32-littlenios2
WAT_TEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0000e268 memsz 0x00017610 flags rwx
    LOAD off    0x00010020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00011000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  00011000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  00010020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c778  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000019c  0080c778  0080c778  0000d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001954  0080c914  0080c914  0000d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093a8  0080e268  0080e268  0000f268  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  00817610  00817610  00011000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  00011000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  00011000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000830  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001441f  00000000  00000000  00011858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000052e1  00000000  00000000  00025c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005fa2  00000000  00000000  0002af58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021c8  00000000  00000000  00030efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034c6  00000000  00000000  000330c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000e77  00000000  00000000  0003658a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00037404  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000001c8  00000000  00000000  00037418  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  0003b0ae  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003b0b4  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003b0c0  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003b0c1  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003b0c2  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003b0c6  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003b0ca  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0003b0ce  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  0003b0d9  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  0003b0e4  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  0003b0ef  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  0003b0fd  2**0
                  CONTENTS, READONLY
 31 .jdi          0000448f  00000000  00000000  0003b10b  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00096e7a  00000000  00000000  0003f59a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0080c778 l    d  .rodata	00000000 .rodata
0080c914 l    d  .rwdata	00000000 .rwdata
0080e268 l    d  .bss	00000000 .bss
00817610 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 wat_test.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0080e1b8 l     O .rwdata	00000004 lockid
0080e274 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0080e1bc l     O .rwdata	00000004 lockid
0080e27c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00801b18 l     F .text	00000048 OS_InitMisc
00801b60 l     F .text	0000006c OS_InitRdyList
00801ccc l     F .text	000000e4 OS_InitTCBList
00801a38 l     F .text	000000e0 OS_InitEventList
00801bcc l     F .text	00000080 OS_InitTaskIdle
00801c4c l     F .text	00000080 OS_InitTaskStat
00801f3c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00803c4c l     F .text	000000f4 OS_FlagTaskRdy
00803a0c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00807d24 l     F .text	00000034 alt_dev_reg
0080c914 l     O .rwdata	000000cc epcs_flash_controller_0
0080c9e0 l     O .rwdata	0000106c jtag_uart_0
0080da4c l     O .rwdata	000000d0 cam_uart
0080db1c l     O .rwdata	000000d0 wifi_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00807e40 l     F .text	00000034 alt_flash_device_register
00807ec8 l     F .text	000003f8 alt_epcs_flash_query
008082c0 l     F .text	000000ec alt_epcs_flash_memcmp
00808698 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00808be8 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00808e8c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00809668 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008099cc l     F .text	0000009c altera_avalon_uart_irq
00809a68 l     F .text	00000138 altera_avalon_uart_rxirq
00809ba0 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00809d98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080a03c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0080a30c l     F .text	00000038 epcs_test_wip
0080a344 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080aa18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ab2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080ab58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080b054 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080b1b4 l     F .text	0000003c alt_get_errno
0080b1f0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0080dd94 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080e2e4 g     O .bss	00000004 alt_instruction_exception_handler
0080e20a g     O .rwdata	00000002 OSTaskNameSize
0080860c g     F .text	0000008c alt_epcs_flash_get_info
00800160 g     F .text	000000bc alt_main
00817510 g     O .bss	00000100 alt_irq
0080446c g     F .text	000000d8 OS_MemInit
00807cc4 g     F .text	00000060 OSTimeSet
0080078c g     F .text	00000610 OSEventPendMulti
0080b8b0 g     F .text	00000024 OSTaskCreateHook
0080e1e2 g     O .rwdata	00000002 OSMboxEn
00800df4 g     F .text	0000004c OSIntEnter
0080e1f2 g     O .rwdata	00000002 OSQEn
00800460 g     F .text	000000cc __malloc_unlock
0080b918 g     F .text	00000020 OSTaskStatHook
0080e284 g     O .bss	00000001 OSLockNesting
0080e230 g     O .rwdata	00000002 OSDataSize
0080e285 g     O .bss	00000001 OSRunning
0080e2ec g     O .bss	00002000 motor_test_stk
0080b958 g     F .text	00000020 OSInitHookBegin
0080e228 g     O .rwdata	00000002 OSTmrSize
0080e288 g     O .bss	00000004 OSIdleCtr
0080b660 g     F .text	00000024 altera_nios2_gen2_irq_init
0080b730 g       .text	00000000 OSStartTsk
0080226c g     F .text	000002d4 OS_TCBInit
0080a380 g     F .text	000000fc epcs_sector_erase
01009000 g     F .entry	00000000 __reset
0080e22e g     O .rwdata	00000002 OSTmrWheelTblSize
0080e1ce g     O .rwdata	00000002 OSEventSize
0080e28c g     O .bss	00000001 OSPrioHighRdy
0080b8d4 g     F .text	00000024 OSTaskDelHook
0080e2e8 g     O .bss	00000004 errno
0080b710 g       .text	00000000 OSStartHighRdy
00806744 g     F .text	000001e4 OSTaskCreateExt
00803554 g     F .text	00000060 OSFlagPendGetFlagsRdy
0080e20e g     O .rwdata	00000002 OSTaskStatStkSize
008026d0 g     F .text	00000308 OSFlagAccept
00804ab0 g     F .text	000000b8 OSQFlush
00804544 g     F .text	00000140 OSQAccept
0080e26c g     O .bss	00000004 alt_argv
008161b8 g       *ABS*	00000000 _gp
00806598 g     F .text	000001ac OSTaskCreate
008060a8 g     F .text	000004f0 OSTaskChangePrio
0080e280 g     O .bss	00000004 alt_heapsem
00802540 g     F .text	00000190 OSDebugInit
00806928 g     F .text	00000344 OSTaskDel
0080dc14 g     O .rwdata	00000180 alt_fd_list
008142ec g     O .bss	00000370 OSFlagTbl
00801818 g     F .text	000000b8 OS_EventTaskRemove
0080a5c4 g     F .text	0000006c epcs_write_status_register
0080bbd8 g     F .text	00000090 alt_find_dev
0080bfc8 g     F .text	00000148 memcpy
0080e1f8 g     O .rwdata	00000002 OSRdyTblSize
0080b138 g     F .text	0000007c alt_io_redirect
0080c778 g       *ABS*	00000000 __DTOR_END__
0080be64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080052c g     F .text	00000120 OSEventNameGet
0080e1dc g     O .rwdata	00000002 OSFlagMax
008087a4 g     F .text	00000100 alt_epcs_flash_write_block
00800e40 g     F .text	000000f8 OSIntExit
0080e216 g     O .rwdata	00000002 OSTCBSize
0080e28d g     O .bss	00000001 OSPrioCur
008090e8 g     F .text	000002bc altera_avalon_jtag_uart_read
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c660 g     F .text	00000064 .hidden __udivsi3
0080e1fc g     O .rwdata	00000002 OSStkWidth
0080e1f0 g     O .rwdata	00000002 OSPtrSize
0080e1d0 g     O .rwdata	00000002 OSEventTblSize
0080b684 g       .text	00000000 OSCtxSw
0080e290 g     O .bss	00000004 OSTCBList
0080e2d4 g     O .bss	00000004 alt_fd_list_lock
0081465c g     O .bss	00000c30 OSMemTbl
0080e294 g     O .bss	00000001 OSTickStepState
0080e1f4 g     O .rwdata	00000002 OSQMax
0081528c g     O .bss	00000800 OSTaskStatStk
008040a8 g     F .text	000000f0 OSMemNameGet
0080e1d4 g     O .rwdata	00000002 OSFlagEn
0080e21a g     O .rwdata	00000002 OSTimeTickHookEn
00804f60 g     F .text	00000168 OSQPost
00803d40 g     F .text	000000a4 OS_FlagUnlink
0080e244 g     O .rwdata	00000004 alt_max_fd
00801e04 g     F .text	00000068 OS_MemCopy
00801e6c g     F .text	000000d0 OS_Sched
00803fb8 g     F .text	000000f0 OSMemGet
00806f54 g     F .text	000001b4 OSTaskNameSet
0080e298 g     O .bss	00000004 OSCtxSwCtr
0080b938 g     F .text	00000020 OSTimeTickHook
0080e1de g     O .rwdata	00000002 OSFlagNameSize
008018d0 g     F .text	00000100 OS_EventTaskRemoveMulti
008016c8 g     F .text	00000150 OS_EventTaskWaitMulti
0080872c g     F .text	00000078 alt_epcs_flash_erase_block
0080e1f6 g     O .rwdata	00000002 OSQSize
00805a10 g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0080e260 g     O .rwdata	00000004 _global_impure_ptr
0080a890 g     F .text	0000005c epcs_exit_4_bytes_mode
0080e1e0 g     O .rwdata	00000002 OSLowestPrio
00817610 g       *ABS*	00000000 __bss_end
0080af64 g     F .text	000000f0 alt_iic_isr_register
0080b9b8 g     F .text	00000024 OSTCBInitHook
0080e226 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0080b558 g     F .text	00000108 alt_tick
0080e1c8 g     O .rwdata	00000002 OSEventEn
0080e222 g     O .rwdata	00000002 OSTmrCfgNameSize
0080986c g     F .text	00000160 altera_avalon_uart_init
0080af18 g     F .text	0000004c alt_ic_irq_enabled
00803b6c g     F .text	000000e0 OS_FlagInit
0080b4bc g     F .text	0000009c alt_alarm_stop
0080e204 g     O .rwdata	00000002 OSTaskIdleStkSize
0080e2d8 g     O .bss	00000004 alt_irq_active
00805648 g     F .text	000000b0 OSSemAccept
008042ac g     F .text	000000d8 OSMemPut
00803de4 g     F .text	000001d4 OSMemCreate
0080e29c g     O .bss	00000004 OSIdleCtrMax
010040fc g     F .exceptions	000000d4 alt_irq_handler
0080dbec g     O .rwdata	00000028 alt_dev_null
0080e218 g     O .rwdata	00000002 OSTicksPerSec
0080b684 g       .text	00000000 OSIntCtxSw
0080e2a0 g     O .bss	00000004 OSTCBFreeList
00805c1c g     F .text	0000016c OSSemPendAbort
0080e23c g     O .rwdata	00000008 alt_dev_list
0080e21c g     O .rwdata	00000002 OSVersionNbr
00800038 g     F .text	00000014 motor_test
0080e1c4 g     O .rwdata	00000004 OSEndiannessTest
0080c6c4 g     F .text	00000058 .hidden __umodsi3
0080a74c g     F .text	00000068 epcs_read_electronic_signature
0080e1d6 g     O .rwdata	00000002 OSFlagGrpSize
00817610 g       *ABS*	00000000 end
0080a078 g     F .text	00000238 altera_avalon_uart_write
00808aa0 g     F .text	00000148 altera_avalon_jtag_uart_init
008020d4 g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0080c778 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008096e0 g     F .text	0000007c alt_avalon_timer_sc_init
008097bc g     F .text	00000060 altera_avalon_uart_write_fd
0080981c g     F .text	00000050 altera_avalon_uart_close_fd
008093a4 g     F .text	000002c4 altera_avalon_jtag_uart_write
00801db0 g     F .text	00000054 OS_MemClr
0080b754 g     F .text	0000015c OSTaskStkInit
00801420 g     F .text	00000198 OS_EventTaskRdy
0080c3e8 g     F .text	00000180 __call_exitprocs
0080e2a4 g     O .bss	00000001 OSCPUUsage
00800000 g     F .text	00000038 _start
0080e2dc g     O .bss	00000004 _alt_tick_rate
00804b68 g     F .text	0000028c OSQPend
0080004c g     F .text	00000014 camera_test
00807814 g     F .text	00000104 OSTimeDly
0080b9dc g     F .text	000001fc alt_avalon_spi_command
0080e2e0 g     O .bss	00000004 _alt_nticks
00807d90 g     F .text	000000b0 alt_sys_init
0080c2d0 g     F .text	00000118 __register_exitproc
0080e2a5 g     O .bss	00000001 OSTaskCtr
00807918 g     F .text	0000017c OSTimeDlyHMSM
00808f90 g     F .text	00000068 altera_avalon_jtag_uart_close
0080c71c g     F .text	00000028 .hidden __mulsi3
0080e1ca g     O .rwdata	00000002 OSEventMax
00805d88 g     F .text	00000110 OSSemPost
008102ec g     O .bss	00002000 wifi_test_stk
0080a2b0 g     F .text	0000005c epcs_read_status_register
00800fc4 g     F .text	000000dc OSSchedUnlock
0080893c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080bd70 g     F .text	000000f4 alt_get_fd
0080e2a8 g     O .bss	00000004 OSMemFreeList
00801110 g     F .text	000000b0 OSStatInit
00803948 g     F .text	000000c4 OSFlagQuery
0080e200 g     O .rwdata	00000002 OSTaskCreateExtEn
0080a7b4 g     F .text	00000080 epcs_read_device_id
0080bf4c g     F .text	0000007c memcmp
00801400 g     F .text	00000020 OS_Dummy
008089fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817610 g       *ABS*	00000000 __alt_stack_base
00808a4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00815a8c g     O .bss	000001e0 OSQTbl
0080e2ac g     O .bss	00000004 OSTCBHighRdy
0080e2b0 g     O .bss	00000004 OSQFreeList
0080bc68 g     F .text	00000108 alt_find_file
0080ab94 g     F .text	000000a4 alt_dev_llist_insert
00800340 g     F .text	00000120 __malloc_lock
0080064c g     F .text	00000140 OSEventNameSet
0080e2b4 g     O .bss	00000001 OSRdyGrp
0080e24c g     O .rwdata	00000008 alt_flash_dev_list
0080e268 g       *ABS*	00000000 __bss_start
0080c110 g     F .text	00000128 memset
00800074 g     F .text	000000ec main
0080e270 g     O .bss	00000004 alt_envp
0080899c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c78c g     O .rodata	00000100 OSUnMapTbl
0080e1fa g     O .rwdata	00000002 OSSemEn
008035b4 g     F .text	00000394 OSFlagPost
008015b8 g     F .text	00000110 OS_EventTaskWait
008021a0 g     F .text	000000cc OS_TaskStatStkChk
00806c6c g     F .text	00000150 OSTaskDelReq
0080e248 g     O .rwdata	00000004 alt_errno
008010a0 g     F .text	00000070 OSStart
008002e0 g     F .text	00000060 __env_unlock
00807108 g     F .text	000001d4 OSTaskResume
00804384 g     F .text	000000e8 OSMemQuery
0080e20c g     O .rwdata	00000002 OSTaskStatEn
0080e1e6 g     O .rwdata	00000002 OSMemMax
008050c8 g     F .text	00000170 OSQPostFront
0080c568 g     F .text	00000084 .hidden __divsi3
0080e2b5 g     O .bss	00000003 OSRdyTbl
0080e1c0 g     O .rwdata	00000002 OSDebugEn
0080c778 g       *ABS*	00000000 __CTOR_END__
0080e1d8 g     O .rwdata	00000002 OSFlagNodeSize
0080e220 g     O .rwdata	00000002 OSTmrCfgMax
008083ac g     F .text	00000260 alt_epcs_flash_write
00804684 g     F .text	000001ac OSQCreate
00806dbc g     F .text	00000198 OSTaskNameGet
00805238 g     F .text	0000020c OSQPostOpt
008011c0 g     F .text	00000220 OSTimeTick
0080e208 g     O .rwdata	00000002 OSTaskMax
0080c778 g       *ABS*	00000000 __DTOR_LIST__
008056f8 g     F .text	000000d8 OSSemCreate
0080e22c g     O .rwdata	00000002 OSTmrWheelSize
0080e202 g     O .rwdata	00000002 OSTaskDelEn
00805e98 g     F .text	00000110 OSSemQuery
00804830 g     F .text	00000280 OSQDel
00804df4 g     F .text	0000016c OSQPendAbort
00807d58 g     F .text	00000038 alt_irq_init
0080b438 g     F .text	00000084 alt_release_fd
0080bf00 g     F .text	00000014 atexit
00800f38 g     F .text	0000008c OSSchedLock
008029d8 g     F .text	00000108 OSFlagCreate
0080e264 g     O .rwdata	00000004 _impure_ptr
0080e268 g     O .bss	00000004 alt_argc
0080ac98 g     F .text	00000060 _do_dtors
0080e1d2 g     O .rwdata	00000002 OSEventMultiEn
00802ae0 g     F .text	00000248 OSFlagDel
0080e2b8 g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
00802f9c g     F .text	000005b8 OSFlagPend
0080e21e g     O .rwdata	00000002 OSTmrEn
008122ec g     O .bss	00002000 camera_test_stk
0080e234 g     O .rwdata	00000008 alt_fs_list
00801fb0 g     F .text	00000074 OS_StrCopy
0080e1e8 g     O .rwdata	00000002 OSMemNameSize
0080b978 g     F .text	00000020 OSInitHookEnd
0080e214 g     O .rwdata	00000002 OSTCBPrioTblMax
0080a47c g     F .text	000000f4 epcs_read_buffer
0080e210 g     O .rwdata	00000002 OSTaskStatStkChkEn
00807e74 g     F .text	00000054 alt_epcs_flash_init
0080adb4 g     F .text	00000050 alt_ic_isr_register
0080e1e4 g     O .rwdata	00000002 OSMemEn
0080e1ee g     O .rwdata	00000002 OSMutexEn
0080e268 g       *ABS*	00000000 _edata
0080975c g     F .text	00000060 altera_avalon_uart_read_fd
00817610 g       *ABS*	00000000 _end
0080acf8 g     F .text	00000068 alt_flash_open_dev
0080e2bc g     O .bss	00000001 OSIntNesting
00808ff8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00807a94 g     F .text	000001d4 OSTimeDlyResume
00802e50 g     F .text	0000014c OSFlagNameSet
008072dc g     F .text	000001c0 OSTaskStkChk
0080ae8c g     F .text	0000008c alt_ic_irq_disable
0080a834 g     F .text	0000005c epcs_enter_4_bytes_mode
0080e1ea g     O .rwdata	00000002 OSMemSize
0080e2c0 g     O .bss	00000004 OSTCBCur
0080bf14 g     F .text	00000038 exit
0080e1ec g     O .rwdata	00000002 OSMemTblSize
0080ad60 g     F .text	00000054 alt_flash_close_dev
0080c5ec g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00800d9c g     F .text	00000058 OSInit
00807680 g     F .text	00000124 OSTaskQuery
008055a0 g     F .text	000000a8 OS_QInit
00802024 g     F .text	00000054 OS_StrLen
00804198 g     F .text	00000114 OSMemNameSet
0080e206 g     O .rwdata	00000002 OSTaskProfileEn
0080e2c4 g     O .bss	00000004 OSTime
00809d44 g     F .text	00000054 altera_avalon_uart_close
00815c6c g     O .bss	00000800 OSTaskIdleStk
0080c744 g     F .text	00000034 _exit
0080a8ec g     F .text	0000012c alt_alarm_start
00802d28 g     F .text	00000128 OSFlagNameGet
00807c68 g     F .text	0000005c OSTimeGet
0080c238 g     F .text	00000098 strlen
0080a570 g     F .text	00000054 epcs_write_enable
0080b8f8 g     F .text	00000020 OSTaskSwHook
0080b2dc g     F .text	0000015c open
0081646c g     O .bss	00000b40 OSEventTbl
00816fac g     O .bss	00000510 OSTCBTbl
00805fa8 g     F .text	00000100 OSSemSet
0080e254 g     O .rwdata	00000004 alt_priority_mask
008057d0 g     F .text	00000240 OSSemDel
0080e2c8 g     O .bss	00000004 OSFlagFreeList
0080ae04 g     F .text	00000088 alt_ic_irq_enable
0080e1cc g     O .rwdata	00000002 OSEventNameSize
0080e2cc g     O .bss	00000001 OSStatRdy
00800060 g     F .text	00000014 wifi_test
008174bc g     O .bss	00000054 OSTCBPrioTbl
00809dd4 g     F .text	00000268 altera_avalon_uart_read
0080021c g     F .text	000000c4 __env_lock
0080e212 g     O .rwdata	00000002 OSTaskSwHookEn
008088a4 g     F .text	00000098 alt_epcs_flash_read
0080e258 g     O .rwdata	00000008 alt_alarm_list
0080e1da g     O .rwdata	00000002 OSFlagWidth
0080ac38 g     F .text	00000060 _do_ctors
0080aa54 g     F .text	000000d8 close
0080e278 g     O .bss	00000004 alt_envsem
0080e2d0 g     O .bss	00000004 OSIdleCtrRun
008013e0 g     F .text	00000020 OSVersion
0080e224 g     O .rwdata	00000002 OSTmrCfgWheelSize
008077a4 g     F .text	00000070 OS_TaskStkClr
0080e1fe g     O .rwdata	00000002 OSTaskCreateEn
008019d0 g     F .text	00000068 OS_EventWaitListInit
0080b998 g     F .text	00000020 OSTaskIdleHook
0080a630 g     F .text	0000011c epcs_write_buffer
0080749c g     F .text	000001e4 OSTaskSuspend
00802078 g     F .text	0000005c OS_TaskIdle
0080e22a g     O .rwdata	00000002 OSTmrTblSize
00805444 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	0800df40 	call	800df4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	00802074 	movhi	r2,129
 1004140:	109d4404 	addi	r2,r2,29968
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	00802074 	movhi	r2,129
 1004158:	109d4404 	addi	r2,r2,29968
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	0800e400 	call	800e40 <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a04b17 	ldw	r2,-32468(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a04b17 	ldw	r2,-32468(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80000c:	d6986e14 	ori	gp,gp,25016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800014:	10b89a14 	ori	r2,r2,57960

    movhi r3, %hi(__bss_end)
  800018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80001c:	18dd8414 	ori	r3,r3,30224

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	08001600 	call	800160 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <motor_test>:

/*
 * Drives FORWARD initially but when the INFRARED SENSOR
 * detects something and it will REVERSE the direction
 */
void motor_test(void* pdata){
  800038:	defffe04 	addi	sp,sp,-8
  80003c:	df000115 	stw	fp,4(sp)
  800040:	df000104 	addi	fp,sp,4
  800044:	e13fff15 	stw	r4,-4(fp)
	  while (1){
		  //do stuff
	  }
  800048:	003fff06 	br	800048 <__alt_mem_epcs_flash_controller_0+0xff7f7048>

0080004c <camera_test>:
 * camera will take a picture and output the average color
 * value to the terminal. Operator will switch the image and
 * press the button again. A different average color should
 * appear in the terminal
 */
void camera_test(void* pdata){
  80004c:	defffe04 	addi	sp,sp,-8
  800050:	df000115 	stw	fp,4(sp)
  800054:	df000104 	addi	fp,sp,4
  800058:	e13fff15 	stw	r4,-4(fp)
	  while (1){
		  //do stuff
	  }
  80005c:	003fff06 	br	80005c <__alt_mem_epcs_flash_controller_0+0xff7f705c>

00800060 <wifi_test>:
/*
 * Accept a command from the web interface and
 * active some audio-visual peripheral based on the
 * input from the web interface
 */
void wifi_test(void* pdata){
  800060:	defffe04 	addi	sp,sp,-8
  800064:	df000115 	stw	fp,4(sp)
  800068:	df000104 	addi	fp,sp,4
  80006c:	e13fff15 	stw	r4,-4(fp)
	  while (1){
		  //do stuff
	  }
  800070:	003fff06 	br	800070 <__alt_mem_epcs_flash_controller_0+0xff7f7070>

00800074 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
  800074:	defff904 	addi	sp,sp,-28
  800078:	dfc00615 	stw	ra,24(sp)
  80007c:	df000515 	stw	fp,20(sp)
  800080:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(motor_test,
  800084:	d8000415 	stw	zero,16(sp)
  800088:	d8000315 	stw	zero,12(sp)
  80008c:	00820004 	movi	r2,2048
  800090:	d8800215 	stw	r2,8(sp)
  800094:	00802074 	movhi	r2,129
  800098:	10b8bb04 	addi	r2,r2,-7444
  80009c:	d8800115 	stw	r2,4(sp)
  8000a0:	00800044 	movi	r2,1
  8000a4:	d8800015 	stw	r2,0(sp)
  8000a8:	01c00044 	movi	r7,1
  8000ac:	01802074 	movhi	r6,129
  8000b0:	3180ba04 	addi	r6,r6,744
  8000b4:	000b883a 	mov	r5,zero
  8000b8:	01002034 	movhi	r4,128
  8000bc:	21000e04 	addi	r4,r4,56
  8000c0:	08067440 	call	806744 <OSTaskCreateExt>
                  motor_test_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(camera_test,
  8000c4:	d8000415 	stw	zero,16(sp)
  8000c8:	d8000315 	stw	zero,12(sp)
  8000cc:	00820004 	movi	r2,2048
  8000d0:	d8800215 	stw	r2,8(sp)
  8000d4:	00802074 	movhi	r2,129
  8000d8:	1088bb04 	addi	r2,r2,8940
  8000dc:	d8800115 	stw	r2,4(sp)
  8000e0:	00800084 	movi	r2,2
  8000e4:	d8800015 	stw	r2,0(sp)
  8000e8:	01c00084 	movi	r7,2
  8000ec:	01802074 	movhi	r6,129
  8000f0:	3190ba04 	addi	r6,r6,17128
  8000f4:	000b883a 	mov	r5,zero
  8000f8:	01002034 	movhi	r4,128
  8000fc:	21001304 	addi	r4,r4,76
  800100:	08067440 	call	806744 <OSTaskCreateExt>
                  camera_test_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(wifi_test,
  800104:	d8000415 	stw	zero,16(sp)
  800108:	d8000315 	stw	zero,12(sp)
  80010c:	00820004 	movi	r2,2048
  800110:	d8800215 	stw	r2,8(sp)
  800114:	00802074 	movhi	r2,129
  800118:	1080bb04 	addi	r2,r2,748
  80011c:	d8800115 	stw	r2,4(sp)
  800120:	008000c4 	movi	r2,3
  800124:	d8800015 	stw	r2,0(sp)
  800128:	01c000c4 	movi	r7,3
  80012c:	01802074 	movhi	r6,129
  800130:	3188ba04 	addi	r6,r6,8936
  800134:	000b883a 	mov	r5,zero
  800138:	01002034 	movhi	r4,128
  80013c:	21001804 	addi	r4,r4,96
  800140:	08067440 	call	806744 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              

  OSStart();
  800144:	08010a00 	call	8010a0 <OSStart>
  return 0;
  800148:	0005883a 	mov	r2,zero
}
  80014c:	e037883a 	mov	sp,fp
  800150:	dfc00117 	ldw	ra,4(sp)
  800154:	df000017 	ldw	fp,0(sp)
  800158:	dec00204 	addi	sp,sp,8
  80015c:	f800283a 	ret

00800160 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800160:	defff904 	addi	sp,sp,-28
  800164:	dfc00615 	stw	ra,24(sp)
  800168:	df000515 	stw	fp,20(sp)
  80016c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800170:	0009883a 	mov	r4,zero
  800174:	0807d580 	call	807d58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800178:	0800d9c0 	call	800d9c <OSInit>
  80017c:	01000044 	movi	r4,1
  800180:	08056f80 	call	8056f8 <OSSemCreate>
  800184:	d0a03015 	stw	r2,-32576(gp)
  800188:	01000044 	movi	r4,1
  80018c:	08056f80 	call	8056f8 <OSSemCreate>
  800190:	d0a03215 	stw	r2,-32568(gp)
  800194:	d0a04704 	addi	r2,gp,-32484
  800198:	e0bffc15 	stw	r2,-16(fp)
  80019c:	00800044 	movi	r2,1
  8001a0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8001a4:	e0bffd0b 	ldhu	r2,-12(fp)
  8001a8:	1009883a 	mov	r4,r2
  8001ac:	08056f80 	call	8056f8 <OSSemCreate>
  8001b0:	1007883a 	mov	r3,r2
  8001b4:	e0bffc17 	ldw	r2,-16(fp)
  8001b8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8001bc:	0807d900 	call	807d90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8001c0:	01802074 	movhi	r6,129
  8001c4:	31b1de04 	addi	r6,r6,-14472
  8001c8:	01402074 	movhi	r5,129
  8001cc:	2971de04 	addi	r5,r5,-14472
  8001d0:	01002074 	movhi	r4,129
  8001d4:	2131de04 	addi	r4,r4,-14472
  8001d8:	080b1380 	call	80b138 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8001dc:	080ac380 	call	80ac38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8001e0:	01002074 	movhi	r4,129
  8001e4:	212b2604 	addi	r4,r4,-21352
  8001e8:	080bf000 	call	80bf00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8001ec:	d0a02c17 	ldw	r2,-32592(gp)
  8001f0:	d0e02d17 	ldw	r3,-32588(gp)
  8001f4:	d1202e17 	ldw	r4,-32584(gp)
  8001f8:	200d883a 	mov	r6,r4
  8001fc:	180b883a 	mov	r5,r3
  800200:	1009883a 	mov	r4,r2
  800204:	08000740 	call	800074 <main>
  800208:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  80020c:	01000044 	movi	r4,1
  800210:	080aa540 	call	80aa54 <close>
  exit (result);
  800214:	e13ffb17 	ldw	r4,-20(fp)
  800218:	080bf140 	call	80bf14 <exit>

0080021c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80021c:	deffdf04 	addi	sp,sp,-132
  800220:	dfc02015 	stw	ra,128(sp)
  800224:	df001f15 	stw	fp,124(sp)
  800228:	df001f04 	addi	fp,sp,124
  80022c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  800230:	e0bfe204 	addi	r2,fp,-120
  800234:	100b883a 	mov	r5,r2
  800238:	01003fc4 	movi	r4,255
  80023c:	08076800 	call	807680 <OSTaskQuery>
  800240:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  800244:	e0bffe83 	ldbu	r2,-6(fp)
  800248:	10803fcc 	andi	r2,r2,255
  80024c:	10001e1e 	bne	r2,zero,8002c8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  800250:	e0bfee83 	ldbu	r2,-70(fp)
  800254:	10803fcc 	andi	r2,r2,255
  800258:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80025c:	d0a03017 	ldw	r2,-32576(gp)
  800260:	e0fffd04 	addi	r3,fp,-12
  800264:	180b883a 	mov	r5,r3
  800268:	1009883a 	mov	r4,r2
  80026c:	0805e980 	call	805e98 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  800270:	e0bffe43 	ldbu	r2,-7(fp)
  800274:	10803fcc 	andi	r2,r2,255
  800278:	10000726 	beq	r2,zero,800298 <__env_lock+0x7c>
  80027c:	d0a00017 	ldw	r2,-32768(gp)
  800280:	e0ffe117 	ldw	r3,-124(fp)
  800284:	1880041e 	bne	r3,r2,800298 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  800288:	d0a02f17 	ldw	r2,-32580(gp)
  80028c:	10800044 	addi	r2,r2,1
  800290:	d0a02f15 	stw	r2,-32580(gp)
  800294:	00000a06 	br	8002c0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  800298:	d0a03017 	ldw	r2,-32576(gp)
  80029c:	e0fffe84 	addi	r3,fp,-6
  8002a0:	180d883a 	mov	r6,r3
  8002a4:	000b883a 	mov	r5,zero
  8002a8:	1009883a 	mov	r4,r2
  8002ac:	0805a100 	call	805a10 <OSSemPend>
    locks  = 1;
  8002b0:	00800044 	movi	r2,1
  8002b4:	d0a02f15 	stw	r2,-32580(gp)
    lockid = id;
  8002b8:	e0bfe117 	ldw	r2,-124(fp)
  8002bc:	d0a00015 	stw	r2,-32768(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  8002c0:	0001883a 	nop
  8002c4:	00000106 	br	8002cc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  8002c8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8002cc:	e037883a 	mov	sp,fp
  8002d0:	dfc00117 	ldw	ra,4(sp)
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00204 	addi	sp,sp,8
  8002dc:	f800283a 	ret

008002e0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  8002e0:	defffd04 	addi	sp,sp,-12
  8002e4:	dfc00215 	stw	ra,8(sp)
  8002e8:	df000115 	stw	fp,4(sp)
  8002ec:	df000104 	addi	fp,sp,4
  8002f0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8002f4:	d0a02f17 	ldw	r2,-32580(gp)
  8002f8:	10000b26 	beq	r2,zero,800328 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8002fc:	d0a02f17 	ldw	r2,-32580(gp)
  800300:	10bfffc4 	addi	r2,r2,-1
  800304:	d0a02f15 	stw	r2,-32580(gp)
  800308:	d0a02f17 	ldw	r2,-32580(gp)
  80030c:	1000071e 	bne	r2,zero,80032c <__env_unlock+0x4c>
  {
    lockid = -1;
  800310:	00bfffc4 	movi	r2,-1
  800314:	d0a00015 	stw	r2,-32768(gp)
    OSSemPost( alt_envsem );
  800318:	d0a03017 	ldw	r2,-32576(gp)
  80031c:	1009883a 	mov	r4,r2
  800320:	0805d880 	call	805d88 <OSSemPost>
  800324:	00000106 	br	80032c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  800328:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80032c:	e037883a 	mov	sp,fp
  800330:	dfc00117 	ldw	ra,4(sp)
  800334:	df000017 	ldw	fp,0(sp)
  800338:	dec00204 	addi	sp,sp,8
  80033c:	f800283a 	ret

00800340 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  800340:	deffdb04 	addi	sp,sp,-148
  800344:	dfc02415 	stw	ra,144(sp)
  800348:	df002315 	stw	fp,140(sp)
  80034c:	df002304 	addi	fp,sp,140
  800350:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800354:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  800358:	d0a03343 	ldbu	r2,-32563(gp)
  80035c:	10803fcc 	andi	r2,r2,255
  800360:	10800060 	cmpeqi	r2,r2,1
  800364:	10003626 	beq	r2,zero,800440 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  800368:	e0bfe204 	addi	r2,fp,-120
  80036c:	100b883a 	mov	r5,r2
  800370:	01003fc4 	movi	r4,255
  800374:	08076800 	call	807680 <OSTaskQuery>
  800378:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80037c:	e0bffe83 	ldbu	r2,-6(fp)
  800380:	10803fcc 	andi	r2,r2,255
  800384:	1000301e 	bne	r2,zero,800448 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  800388:	e0bfee83 	ldbu	r2,-70(fp)
  80038c:	10803fcc 	andi	r2,r2,255
  800390:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  800394:	d0a03217 	ldw	r2,-32568(gp)
  800398:	e0fffd04 	addi	r3,fp,-12
  80039c:	180b883a 	mov	r5,r3
  8003a0:	1009883a 	mov	r4,r2
  8003a4:	0805e980 	call	805e98 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8003a8:	0005303a 	rdctl	r2,status
  8003ac:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8003b0:	e0ffe117 	ldw	r3,-124(fp)
  8003b4:	00bfff84 	movi	r2,-2
  8003b8:	1884703a 	and	r2,r3,r2
  8003bc:	1001703a 	wrctl	status,r2
  
  return context;
  8003c0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  8003c4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  8003c8:	e0bffd0b 	ldhu	r2,-12(fp)
  8003cc:	10bfffcc 	andi	r2,r2,65535
  8003d0:	10000b1e 	bne	r2,zero,800400 <__malloc_lock+0xc0>
  8003d4:	d0a00117 	ldw	r2,-32764(gp)
  8003d8:	e0ffde17 	ldw	r3,-136(fp)
  8003dc:	1880081e 	bne	r3,r2,800400 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  8003e0:	d0a03117 	ldw	r2,-32572(gp)
  8003e4:	10800044 	addi	r2,r2,1
  8003e8:	d0a03115 	stw	r2,-32572(gp)
  8003ec:	e0bfdd17 	ldw	r2,-140(fp)
  8003f0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8003f4:	e0bfdf17 	ldw	r2,-132(fp)
  8003f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  8003fc:	00000e06 	br	800438 <__malloc_lock+0xf8>
  800400:	e0bfdd17 	ldw	r2,-140(fp)
  800404:	e0bfe015 	stw	r2,-128(fp)
  800408:	e0bfe017 	ldw	r2,-128(fp)
  80040c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  800410:	d0a03217 	ldw	r2,-32568(gp)
  800414:	e0fffe84 	addi	r3,fp,-6
  800418:	180d883a 	mov	r6,r3
  80041c:	000b883a 	mov	r5,zero
  800420:	1009883a 	mov	r4,r2
  800424:	0805a100 	call	805a10 <OSSemPend>
    locks  = 1;
  800428:	00800044 	movi	r2,1
  80042c:	d0a03115 	stw	r2,-32572(gp)
    lockid = id;
  800430:	e0bfde17 	ldw	r2,-136(fp)
  800434:	d0a00115 	stw	r2,-32764(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  800438:	0001883a 	nop
  80043c:	00000306 	br	80044c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  800440:	0001883a 	nop
  800444:	00000106 	br	80044c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  800448:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80044c:	e037883a 	mov	sp,fp
  800450:	dfc00117 	ldw	ra,4(sp)
  800454:	df000017 	ldw	fp,0(sp)
  800458:	dec00204 	addi	sp,sp,8
  80045c:	f800283a 	ret

00800460 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  800460:	defff804 	addi	sp,sp,-32
  800464:	dfc00715 	stw	ra,28(sp)
  800468:	df000615 	stw	fp,24(sp)
  80046c:	df000604 	addi	fp,sp,24
  800470:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800474:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  800478:	d0a03343 	ldbu	r2,-32563(gp)
  80047c:	10803fcc 	andi	r2,r2,255
  800480:	10800060 	cmpeqi	r2,r2,1
  800484:	10002326 	beq	r2,zero,800514 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800488:	0005303a 	rdctl	r2,status
  80048c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800490:	e0fffe17 	ldw	r3,-8(fp)
  800494:	00bfff84 	movi	r2,-2
  800498:	1884703a 	and	r2,r3,r2
  80049c:	1001703a 	wrctl	status,r2
  
  return context;
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  8004a4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  8004a8:	d0a03117 	ldw	r2,-32572(gp)
  8004ac:	1000051e 	bne	r2,zero,8004c4 <__malloc_unlock+0x64>
  8004b0:	e0bffa17 	ldw	r2,-24(fp)
  8004b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8004b8:	e0bffb17 	ldw	r2,-20(fp)
  8004bc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  8004c0:	00001506 	br	800518 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  8004c4:	d0a03117 	ldw	r2,-32572(gp)
  8004c8:	10bfffc4 	addi	r2,r2,-1
  8004cc:	d0a03115 	stw	r2,-32572(gp)
  8004d0:	d0a03117 	ldw	r2,-32572(gp)
  8004d4:	10000a1e 	bne	r2,zero,800500 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  8004d8:	00bfffc4 	movi	r2,-1
  8004dc:	d0a00115 	stw	r2,-32764(gp)
  8004e0:	e0bffa17 	ldw	r2,-24(fp)
  8004e4:	e0bffc15 	stw	r2,-16(fp)
  8004e8:	e0bffc17 	ldw	r2,-16(fp)
  8004ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  8004f0:	d0a03217 	ldw	r2,-32568(gp)
  8004f4:	1009883a 	mov	r4,r2
  8004f8:	0805d880 	call	805d88 <OSSemPost>
  8004fc:	00000606 	br	800518 <__malloc_unlock+0xb8>
  800500:	e0bffa17 	ldw	r2,-24(fp)
  800504:	e0bffd15 	stw	r2,-12(fp)
  800508:	e0bffd17 	ldw	r2,-12(fp)
  80050c:	1001703a 	wrctl	status,r2
  800510:	00000106 	br	800518 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  800514:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  800518:	e037883a 	mov	sp,fp
  80051c:	dfc00117 	ldw	ra,4(sp)
  800520:	df000017 	ldw	fp,0(sp)
  800524:	dec00204 	addi	sp,sp,8
  800528:	f800283a 	ret

0080052c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80052c:	defff704 	addi	sp,sp,-36
  800530:	dfc00815 	stw	ra,32(sp)
  800534:	df000715 	stw	fp,28(sp)
  800538:	df000704 	addi	fp,sp,28
  80053c:	e13ffd15 	stw	r4,-12(fp)
  800540:	e17ffe15 	stw	r5,-8(fp)
  800544:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800548:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80054c:	e0bfff17 	ldw	r2,-4(fp)
  800550:	1000021e 	bne	r2,zero,80055c <OSEventNameGet+0x30>
        return (0);
  800554:	0005883a 	mov	r2,zero
  800558:	00003706 	br	800638 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80055c:	e0bffd17 	ldw	r2,-12(fp)
  800560:	1000051e 	bne	r2,zero,800578 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  800564:	e0bfff17 	ldw	r2,-4(fp)
  800568:	00c00104 	movi	r3,4
  80056c:	10c00005 	stb	r3,0(r2)
        return (0);
  800570:	0005883a 	mov	r2,zero
  800574:	00003006 	br	800638 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  800578:	e0bffe17 	ldw	r2,-8(fp)
  80057c:	1000051e 	bne	r2,zero,800594 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  800580:	e0bfff17 	ldw	r2,-4(fp)
  800584:	00c00304 	movi	r3,12
  800588:	10c00005 	stb	r3,0(r2)
        return (0);
  80058c:	0005883a 	mov	r2,zero
  800590:	00002906 	br	800638 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  800594:	d0a04103 	ldbu	r2,-32508(gp)
  800598:	10803fcc 	andi	r2,r2,255
  80059c:	10000526 	beq	r2,zero,8005b4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  8005a0:	e0bfff17 	ldw	r2,-4(fp)
  8005a4:	00c00444 	movi	r3,17
  8005a8:	10c00005 	stb	r3,0(r2)
        return (0);
  8005ac:	0005883a 	mov	r2,zero
  8005b0:	00002106 	br	800638 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  8005b4:	e0bffd17 	ldw	r2,-12(fp)
  8005b8:	10800003 	ldbu	r2,0(r2)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	10bfffc4 	addi	r2,r2,-1
  8005c4:	10800128 	cmpgeui	r2,r2,4
  8005c8:	10000526 	beq	r2,zero,8005e0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8005cc:	e0bfff17 	ldw	r2,-4(fp)
  8005d0:	00c00044 	movi	r3,1
  8005d4:	10c00005 	stb	r3,0(r2)
             return (0);
  8005d8:	0005883a 	mov	r2,zero
  8005dc:	00001606 	br	800638 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  8005e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8005e4:	0005303a 	rdctl	r2,status
  8005e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8005ec:	e0fffb17 	ldw	r3,-20(fp)
  8005f0:	00bfff84 	movi	r2,-2
  8005f4:	1884703a 	and	r2,r3,r2
  8005f8:	1001703a 	wrctl	status,r2
  
  return context;
  8005fc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  800600:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  800604:	e0bffd17 	ldw	r2,-12(fp)
  800608:	10800384 	addi	r2,r2,14
  80060c:	100b883a 	mov	r5,r2
  800610:	e13ffe17 	ldw	r4,-8(fp)
  800614:	0801fb00 	call	801fb0 <OS_StrCopy>
  800618:	e0bffa05 	stb	r2,-24(fp)
  80061c:	e0bff917 	ldw	r2,-28(fp)
  800620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800624:	e0bffc17 	ldw	r2,-16(fp)
  800628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80062c:	e0bfff17 	ldw	r2,-4(fp)
  800630:	10000005 	stb	zero,0(r2)
    return (len);
  800634:	e0bffa03 	ldbu	r2,-24(fp)
}
  800638:	e037883a 	mov	sp,fp
  80063c:	dfc00117 	ldw	ra,4(sp)
  800640:	df000017 	ldw	fp,0(sp)
  800644:	dec00204 	addi	sp,sp,8
  800648:	f800283a 	ret

0080064c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80064c:	defff604 	addi	sp,sp,-40
  800650:	dfc00915 	stw	ra,36(sp)
  800654:	df000815 	stw	fp,32(sp)
  800658:	df000804 	addi	fp,sp,32
  80065c:	e13ffd15 	stw	r4,-12(fp)
  800660:	e17ffe15 	stw	r5,-8(fp)
  800664:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800668:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80066c:	e0bfff17 	ldw	r2,-4(fp)
  800670:	10004026 	beq	r2,zero,800774 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  800674:	e0bffd17 	ldw	r2,-12(fp)
  800678:	1000041e 	bne	r2,zero,80068c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80067c:	e0bfff17 	ldw	r2,-4(fp)
  800680:	00c00104 	movi	r3,4
  800684:	10c00005 	stb	r3,0(r2)
        return;
  800688:	00003b06 	br	800778 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80068c:	e0bffe17 	ldw	r2,-8(fp)
  800690:	1000041e 	bne	r2,zero,8006a4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  800694:	e0bfff17 	ldw	r2,-4(fp)
  800698:	00c00304 	movi	r3,12
  80069c:	10c00005 	stb	r3,0(r2)
        return;
  8006a0:	00003506 	br	800778 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8006a4:	d0a04103 	ldbu	r2,-32508(gp)
  8006a8:	10803fcc 	andi	r2,r2,255
  8006ac:	10000426 	beq	r2,zero,8006c0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8006b0:	e0bfff17 	ldw	r2,-4(fp)
  8006b4:	00c00484 	movi	r3,18
  8006b8:	10c00005 	stb	r3,0(r2)
        return;
  8006bc:	00002e06 	br	800778 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  8006c0:	e0bffd17 	ldw	r2,-12(fp)
  8006c4:	10800003 	ldbu	r2,0(r2)
  8006c8:	10803fcc 	andi	r2,r2,255
  8006cc:	10bfffc4 	addi	r2,r2,-1
  8006d0:	10800128 	cmpgeui	r2,r2,4
  8006d4:	10000426 	beq	r2,zero,8006e8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8006d8:	e0bfff17 	ldw	r2,-4(fp)
  8006dc:	00c00044 	movi	r3,1
  8006e0:	10c00005 	stb	r3,0(r2)
             return;
  8006e4:	00002406 	br	800778 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  8006e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8006ec:	0005303a 	rdctl	r2,status
  8006f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8006f4:	e0fffc17 	ldw	r3,-16(fp)
  8006f8:	00bfff84 	movi	r2,-2
  8006fc:	1884703a 	and	r2,r3,r2
  800700:	1001703a 	wrctl	status,r2
  
  return context;
  800704:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  800708:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80070c:	e13ffe17 	ldw	r4,-8(fp)
  800710:	08020240 	call	802024 <OS_StrLen>
  800714:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  800718:	e0bffa03 	ldbu	r2,-24(fp)
  80071c:	10800830 	cmpltui	r2,r2,32
  800720:	1000081e 	bne	r2,zero,800744 <OSEventNameSet+0xf8>
  800724:	e0bff817 	ldw	r2,-32(fp)
  800728:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80072c:	e0bff917 	ldw	r2,-28(fp)
  800730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  800734:	e0bfff17 	ldw	r2,-4(fp)
  800738:	00c002c4 	movi	r3,11
  80073c:	10c00005 	stb	r3,0(r2)
        return;
  800740:	00000d06 	br	800778 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  800744:	e0bffd17 	ldw	r2,-12(fp)
  800748:	10800384 	addi	r2,r2,14
  80074c:	e17ffe17 	ldw	r5,-8(fp)
  800750:	1009883a 	mov	r4,r2
  800754:	0801fb00 	call	801fb0 <OS_StrCopy>
  800758:	e0bff817 	ldw	r2,-32(fp)
  80075c:	e0bffb15 	stw	r2,-20(fp)
  800760:	e0bffb17 	ldw	r2,-20(fp)
  800764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  800768:	e0bfff17 	ldw	r2,-4(fp)
  80076c:	10000005 	stb	zero,0(r2)
  800770:	00000106 	br	800778 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  800774:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  800778:	e037883a 	mov	sp,fp
  80077c:	dfc00117 	ldw	ra,4(sp)
  800780:	df000017 	ldw	fp,0(sp)
  800784:	dec00204 	addi	sp,sp,8
  800788:	f800283a 	ret

0080078c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80078c:	deffed04 	addi	sp,sp,-76
  800790:	dfc01215 	stw	ra,72(sp)
  800794:	df001115 	stw	fp,68(sp)
  800798:	df001104 	addi	fp,sp,68
  80079c:	e13ffc15 	stw	r4,-16(fp)
  8007a0:	e17ffd15 	stw	r5,-12(fp)
  8007a4:	e1bffe15 	stw	r6,-8(fp)
  8007a8:	3805883a 	mov	r2,r7
  8007ac:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  8007b0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  8007b4:	e0800217 	ldw	r2,8(fp)
  8007b8:	1000021e 	bne	r2,zero,8007c4 <OSEventPendMulti+0x38>
        return (0);
  8007bc:	0005883a 	mov	r2,zero
  8007c0:	00017106 	br	800d88 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  8007c4:	e0bffc17 	ldw	r2,-16(fp)
  8007c8:	1000051e 	bne	r2,zero,8007e0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  8007cc:	e0800217 	ldw	r2,8(fp)
  8007d0:	00c00104 	movi	r3,4
  8007d4:	10c00005 	stb	r3,0(r2)
        return (0);
  8007d8:	0005883a 	mov	r2,zero
  8007dc:	00016a06 	br	800d88 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  8007e0:	e0bffd17 	ldw	r2,-12(fp)
  8007e4:	1000051e 	bne	r2,zero,8007fc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  8007e8:	e0800217 	ldw	r2,8(fp)
  8007ec:	00c00104 	movi	r3,4
  8007f0:	10c00005 	stb	r3,0(r2)
        return (0);
  8007f4:	0005883a 	mov	r2,zero
  8007f8:	00016306 	br	800d88 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  8007fc:	e0bffe17 	ldw	r2,-8(fp)
  800800:	1000051e 	bne	r2,zero,800818 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  800804:	e0800217 	ldw	r2,8(fp)
  800808:	00c00104 	movi	r3,4
  80080c:	10c00005 	stb	r3,0(r2)
        return (0);
  800810:	0005883a 	mov	r2,zero
  800814:	00015c06 	br	800d88 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  800818:	e0bffd17 	ldw	r2,-12(fp)
  80081c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  800820:	e0bffc17 	ldw	r2,-16(fp)
  800824:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  800828:	e0bfef17 	ldw	r2,-68(fp)
  80082c:	10800017 	ldw	r2,0(r2)
  800830:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  800834:	00001906 	br	80089c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  800838:	e0bff017 	ldw	r2,-64(fp)
  80083c:	10800003 	ldbu	r2,0(r2)
  800840:	10803fcc 	andi	r2,r2,255
  800844:	10c000a0 	cmpeqi	r3,r2,2
  800848:	1800091e 	bne	r3,zero,800870 <OSEventPendMulti+0xe4>
  80084c:	10c000e0 	cmpeqi	r3,r2,3
  800850:	1800091e 	bne	r3,zero,800878 <OSEventPendMulti+0xec>
  800854:	10800060 	cmpeqi	r2,r2,1
  800858:	1000091e 	bne	r2,zero,800880 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80085c:	e0800217 	ldw	r2,8(fp)
  800860:	00c00044 	movi	r3,1
  800864:	10c00005 	stb	r3,0(r2)
                 return (0);
  800868:	0005883a 	mov	r2,zero
  80086c:	00014606 	br	800d88 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  800870:	0001883a 	nop
  800874:	00000306 	br	800884 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  800878:	0001883a 	nop
  80087c:	00000106 	br	800884 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  800880:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  800884:	e0bfef17 	ldw	r2,-68(fp)
  800888:	10800104 	addi	r2,r2,4
  80088c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  800890:	e0bfef17 	ldw	r2,-68(fp)
  800894:	10800017 	ldw	r2,0(r2)
  800898:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80089c:	e0bff017 	ldw	r2,-64(fp)
  8008a0:	103fe51e 	bne	r2,zero,800838 <__alt_mem_epcs_flash_controller_0+0xff7f7838>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  8008a4:	d0a04103 	ldbu	r2,-32508(gp)
  8008a8:	10803fcc 	andi	r2,r2,255
  8008ac:	10000526 	beq	r2,zero,8008c4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  8008b0:	e0800217 	ldw	r2,8(fp)
  8008b4:	00c00084 	movi	r3,2
  8008b8:	10c00005 	stb	r3,0(r2)
        return (0);
  8008bc:	0005883a 	mov	r2,zero
  8008c0:	00013106 	br	800d88 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  8008c4:	d0a03303 	ldbu	r2,-32564(gp)
  8008c8:	10803fcc 	andi	r2,r2,255
  8008cc:	10000526 	beq	r2,zero,8008e4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  8008d0:	e0800217 	ldw	r2,8(fp)
  8008d4:	00c00344 	movi	r3,13
  8008d8:	10c00005 	stb	r3,0(r2)
        return (0);
  8008dc:	0005883a 	mov	r2,zero
  8008e0:	00012906 	br	800d88 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8008e4:	0005303a 	rdctl	r2,status
  8008e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8008ec:	e0fffb17 	ldw	r3,-20(fp)
  8008f0:	00bfff84 	movi	r2,-2
  8008f4:	1884703a 	and	r2,r3,r2
  8008f8:	1001703a 	wrctl	status,r2
  
  return context;
  8008fc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  800900:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  800904:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  800908:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80090c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  800910:	e0bffc17 	ldw	r2,-16(fp)
  800914:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  800918:	e0bfef17 	ldw	r2,-68(fp)
  80091c:	10800017 	ldw	r2,0(r2)
  800920:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  800924:	00008106 	br	800b2c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  800928:	e0bff017 	ldw	r2,-64(fp)
  80092c:	10800003 	ldbu	r2,0(r2)
  800930:	10803fcc 	andi	r2,r2,255
  800934:	10c000a0 	cmpeqi	r3,r2,2
  800938:	18003c1e 	bne	r3,zero,800a2c <OSEventPendMulti+0x2a0>
  80093c:	10c000e0 	cmpeqi	r3,r2,3
  800940:	1800031e 	bne	r3,zero,800950 <OSEventPendMulti+0x1c4>
  800944:	10800060 	cmpeqi	r2,r2,1
  800948:	10001e1e 	bne	r2,zero,8009c4 <OSEventPendMulti+0x238>
  80094c:	00006606 	br	800ae8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  800950:	e0bff017 	ldw	r2,-64(fp)
  800954:	1080020b 	ldhu	r2,8(r2)
  800958:	10bfffcc 	andi	r2,r2,65535
  80095c:	10001526 	beq	r2,zero,8009b4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  800960:	e0bff017 	ldw	r2,-64(fp)
  800964:	1080020b 	ldhu	r2,8(r2)
  800968:	10bfffc4 	addi	r2,r2,-1
  80096c:	1007883a 	mov	r3,r2
  800970:	e0bff017 	ldw	r2,-64(fp)
  800974:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  800978:	e0bffd17 	ldw	r2,-12(fp)
  80097c:	10c00104 	addi	r3,r2,4
  800980:	e0fffd15 	stw	r3,-12(fp)
  800984:	e0fff017 	ldw	r3,-64(fp)
  800988:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  80098c:	00800044 	movi	r2,1
  800990:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  800994:	e0bffe17 	ldw	r2,-8(fp)
  800998:	10c00104 	addi	r3,r2,4
  80099c:	e0fffe15 	stw	r3,-8(fp)
  8009a0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  8009a4:	e0bff18b 	ldhu	r2,-58(fp)
  8009a8:	10800044 	addi	r2,r2,1
  8009ac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  8009b0:	00005806 	br	800b14 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  8009b4:	e0bff203 	ldbu	r2,-56(fp)
  8009b8:	10800054 	ori	r2,r2,1
  8009bc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  8009c0:	00005406 	br	800b14 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  8009c4:	e0bff017 	ldw	r2,-64(fp)
  8009c8:	10800117 	ldw	r2,4(r2)
  8009cc:	10001326 	beq	r2,zero,800a1c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  8009d0:	e0bffe17 	ldw	r2,-8(fp)
  8009d4:	10c00104 	addi	r3,r2,4
  8009d8:	e0fffe15 	stw	r3,-8(fp)
  8009dc:	e0fff017 	ldw	r3,-64(fp)
  8009e0:	18c00117 	ldw	r3,4(r3)
  8009e4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  8009e8:	e0bff017 	ldw	r2,-64(fp)
  8009ec:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  8009f0:	e0bffd17 	ldw	r2,-12(fp)
  8009f4:	10c00104 	addi	r3,r2,4
  8009f8:	e0fffd15 	stw	r3,-12(fp)
  8009fc:	e0fff017 	ldw	r3,-64(fp)
  800a00:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  800a04:	00800044 	movi	r2,1
  800a08:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  800a0c:	e0bff18b 	ldhu	r2,-58(fp)
  800a10:	10800044 	addi	r2,r2,1
  800a14:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  800a18:	00003e06 	br	800b14 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  800a1c:	e0bff203 	ldbu	r2,-56(fp)
  800a20:	10800094 	ori	r2,r2,2
  800a24:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  800a28:	00003a06 	br	800b14 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  800a2c:	e0bff017 	ldw	r2,-64(fp)
  800a30:	10800117 	ldw	r2,4(r2)
  800a34:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  800a38:	e0bff517 	ldw	r2,-44(fp)
  800a3c:	1080058b 	ldhu	r2,22(r2)
  800a40:	10bfffcc 	andi	r2,r2,65535
  800a44:	10002426 	beq	r2,zero,800ad8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  800a48:	e0bffe17 	ldw	r2,-8(fp)
  800a4c:	10c00104 	addi	r3,r2,4
  800a50:	e0fffe15 	stw	r3,-8(fp)
  800a54:	e0fff517 	ldw	r3,-44(fp)
  800a58:	18c00417 	ldw	r3,16(r3)
  800a5c:	19400104 	addi	r5,r3,4
  800a60:	e13ff517 	ldw	r4,-44(fp)
  800a64:	21400415 	stw	r5,16(r4)
  800a68:	18c00017 	ldw	r3,0(r3)
  800a6c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  800a70:	e0bff517 	ldw	r2,-44(fp)
  800a74:	10c00417 	ldw	r3,16(r2)
  800a78:	e0bff517 	ldw	r2,-44(fp)
  800a7c:	10800217 	ldw	r2,8(r2)
  800a80:	1880041e 	bne	r3,r2,800a94 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  800a84:	e0bff517 	ldw	r2,-44(fp)
  800a88:	10c00117 	ldw	r3,4(r2)
  800a8c:	e0bff517 	ldw	r2,-44(fp)
  800a90:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  800a94:	e0bff517 	ldw	r2,-44(fp)
  800a98:	1080058b 	ldhu	r2,22(r2)
  800a9c:	10bfffc4 	addi	r2,r2,-1
  800aa0:	1007883a 	mov	r3,r2
  800aa4:	e0bff517 	ldw	r2,-44(fp)
  800aa8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  800aac:	e0bffd17 	ldw	r2,-12(fp)
  800ab0:	10c00104 	addi	r3,r2,4
  800ab4:	e0fffd15 	stw	r3,-12(fp)
  800ab8:	e0fff017 	ldw	r3,-64(fp)
  800abc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  800ac0:	00800044 	movi	r2,1
  800ac4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  800ac8:	e0bff18b 	ldhu	r2,-58(fp)
  800acc:	10800044 	addi	r2,r2,1
  800ad0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  800ad4:	00000f06 	br	800b14 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  800ad8:	e0bff203 	ldbu	r2,-56(fp)
  800adc:	10800114 	ori	r2,r2,4
  800ae0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  800ae4:	00000b06 	br	800b14 <OSEventPendMulti+0x388>
  800ae8:	e0bff317 	ldw	r2,-52(fp)
  800aec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800af0:	e0bff417 	ldw	r2,-48(fp)
  800af4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  800af8:	e0bffd17 	ldw	r2,-12(fp)
  800afc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  800b00:	e0800217 	ldw	r2,8(fp)
  800b04:	00c00044 	movi	r3,1
  800b08:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  800b0c:	e0bff18b 	ldhu	r2,-58(fp)
  800b10:	00009d06 	br	800d88 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  800b14:	e0bfef17 	ldw	r2,-68(fp)
  800b18:	10800104 	addi	r2,r2,4
  800b1c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  800b20:	e0bfef17 	ldw	r2,-68(fp)
  800b24:	10800017 	ldw	r2,0(r2)
  800b28:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  800b2c:	e0bff017 	ldw	r2,-64(fp)
  800b30:	103f7d1e 	bne	r2,zero,800928 <__alt_mem_epcs_flash_controller_0+0xff7f7928>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  800b34:	e0bff103 	ldbu	r2,-60(fp)
  800b38:	10800058 	cmpnei	r2,r2,1
  800b3c:	10000a1e 	bne	r2,zero,800b68 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  800b40:	e0bffd17 	ldw	r2,-12(fp)
  800b44:	10000015 	stw	zero,0(r2)
  800b48:	e0bff317 	ldw	r2,-52(fp)
  800b4c:	e0bff615 	stw	r2,-40(fp)
  800b50:	e0bff617 	ldw	r2,-40(fp)
  800b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  800b58:	e0800217 	ldw	r2,8(fp)
  800b5c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  800b60:	e0bff18b 	ldhu	r2,-58(fp)
  800b64:	00008806 	br	800d88 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  800b68:	d0a04217 	ldw	r2,-32504(gp)
  800b6c:	d0e04217 	ldw	r3,-32504(gp)
  800b70:	19000c03 	ldbu	r4,48(r3)
  800b74:	e0fff203 	ldbu	r3,-56(fp)
  800b78:	20c6b03a 	or	r3,r4,r3
  800b7c:	1809883a 	mov	r4,r3
  800b80:	00ffe004 	movi	r3,-128
  800b84:	20c6b03a 	or	r3,r4,r3
  800b88:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  800b8c:	d0a04217 	ldw	r2,-32504(gp)
  800b90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  800b94:	d0a04217 	ldw	r2,-32504(gp)
  800b98:	e0ffff0b 	ldhu	r3,-4(fp)
  800b9c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  800ba0:	e13ffc17 	ldw	r4,-16(fp)
  800ba4:	08016c80 	call	8016c8 <OS_EventTaskWaitMulti>
  800ba8:	e0bff317 	ldw	r2,-52(fp)
  800bac:	e0bff915 	stw	r2,-28(fp)
  800bb0:	e0bff917 	ldw	r2,-28(fp)
  800bb4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  800bb8:	0801e6c0 	call	801e6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800bbc:	0005303a 	rdctl	r2,status
  800bc0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800bc4:	e0fff717 	ldw	r3,-36(fp)
  800bc8:	00bfff84 	movi	r2,-2
  800bcc:	1884703a 	and	r2,r3,r2
  800bd0:	1001703a 	wrctl	status,r2
  
  return context;
  800bd4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  800bd8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  800bdc:	d0a04217 	ldw	r2,-32504(gp)
  800be0:	10800c43 	ldbu	r2,49(r2)
  800be4:	10803fcc 	andi	r2,r2,255
  800be8:	10000226 	beq	r2,zero,800bf4 <OSEventPendMulti+0x468>
  800bec:	108000a0 	cmpeqi	r2,r2,2
  800bf0:	10001826 	beq	r2,zero,800c54 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  800bf4:	d0a04217 	ldw	r2,-32504(gp)
  800bf8:	10800717 	ldw	r2,28(r2)
  800bfc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  800c00:	e0bff017 	ldw	r2,-64(fp)
  800c04:	10000b26 	beq	r2,zero,800c34 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  800c08:	e0bffd17 	ldw	r2,-12(fp)
  800c0c:	10c00104 	addi	r3,r2,4
  800c10:	e0fffd15 	stw	r3,-12(fp)
  800c14:	e0fff017 	ldw	r3,-64(fp)
  800c18:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  800c1c:	e0bffd17 	ldw	r2,-12(fp)
  800c20:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  800c24:	e0bff18b 	ldhu	r2,-58(fp)
  800c28:	10800044 	addi	r2,r2,1
  800c2c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  800c30:	00000d06 	br	800c68 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  800c34:	d0a04217 	ldw	r2,-32504(gp)
  800c38:	00c00044 	movi	r3,1
  800c3c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  800c40:	d0a04217 	ldw	r2,-32504(gp)
  800c44:	e17ffc17 	ldw	r5,-16(fp)
  800c48:	1009883a 	mov	r4,r2
  800c4c:	08018d00 	call	8018d0 <OS_EventTaskRemoveMulti>
             }
			 break;
  800c50:	00000506 	br	800c68 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  800c54:	d0a04217 	ldw	r2,-32504(gp)
  800c58:	e17ffc17 	ldw	r5,-16(fp)
  800c5c:	1009883a 	mov	r4,r2
  800c60:	08018d00 	call	8018d0 <OS_EventTaskRemoveMulti>
             break;
  800c64:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  800c68:	d0a04217 	ldw	r2,-32504(gp)
  800c6c:	10800c43 	ldbu	r2,49(r2)
  800c70:	10803fcc 	andi	r2,r2,255
  800c74:	10000326 	beq	r2,zero,800c84 <OSEventPendMulti+0x4f8>
  800c78:	108000a0 	cmpeqi	r2,r2,2
  800c7c:	1000231e 	bne	r2,zero,800d0c <OSEventPendMulti+0x580>
  800c80:	00002a06 	br	800d2c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  800c84:	e0bff017 	ldw	r2,-64(fp)
  800c88:	10800003 	ldbu	r2,0(r2)
  800c8c:	10803fcc 	andi	r2,r2,255
  800c90:	0080100e 	bge	zero,r2,800cd4 <OSEventPendMulti+0x548>
  800c94:	10c000d0 	cmplti	r3,r2,3
  800c98:	1800071e 	bne	r3,zero,800cb8 <OSEventPendMulti+0x52c>
  800c9c:	108000e0 	cmpeqi	r2,r2,3
  800ca0:	10000c26 	beq	r2,zero,800cd4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  800ca4:	e0bffe17 	ldw	r2,-8(fp)
  800ca8:	10c00104 	addi	r3,r2,4
  800cac:	e0fffe15 	stw	r3,-8(fp)
  800cb0:	10000015 	stw	zero,0(r2)
                      break;
  800cb4:	00001206 	br	800d00 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  800cb8:	e0bffe17 	ldw	r2,-8(fp)
  800cbc:	10c00104 	addi	r3,r2,4
  800cc0:	e0fffe15 	stw	r3,-8(fp)
  800cc4:	d0e04217 	ldw	r3,-32504(gp)
  800cc8:	18c00917 	ldw	r3,36(r3)
  800ccc:	10c00015 	stw	r3,0(r2)
                      break;
  800cd0:	00000b06 	br	800d00 <OSEventPendMulti+0x574>
  800cd4:	e0bff317 	ldw	r2,-52(fp)
  800cd8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800cdc:	e0bff817 	ldw	r2,-32(fp)
  800ce0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  800ce4:	e0bffd17 	ldw	r2,-12(fp)
  800ce8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  800cec:	e0800217 	ldw	r2,8(fp)
  800cf0:	00c00044 	movi	r3,1
  800cf4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  800cf8:	e0bff18b 	ldhu	r2,-58(fp)
  800cfc:	00002206 	br	800d88 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  800d00:	e0800217 	ldw	r2,8(fp)
  800d04:	10000005 	stb	zero,0(r2)
             break;
  800d08:	00001006 	br	800d4c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  800d0c:	e0bffe17 	ldw	r2,-8(fp)
  800d10:	10c00104 	addi	r3,r2,4
  800d14:	e0fffe15 	stw	r3,-8(fp)
  800d18:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  800d1c:	e0800217 	ldw	r2,8(fp)
  800d20:	00c00384 	movi	r3,14
  800d24:	10c00005 	stb	r3,0(r2)
             break;
  800d28:	00000806 	br	800d4c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  800d2c:	e0bffe17 	ldw	r2,-8(fp)
  800d30:	10c00104 	addi	r3,r2,4
  800d34:	e0fffe15 	stw	r3,-8(fp)
  800d38:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  800d3c:	e0800217 	ldw	r2,8(fp)
  800d40:	00c00284 	movi	r3,10
  800d44:	10c00005 	stb	r3,0(r2)
             break;
  800d48:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  800d4c:	d0a04217 	ldw	r2,-32504(gp)
  800d50:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  800d54:	d0a04217 	ldw	r2,-32504(gp)
  800d58:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  800d5c:	d0a04217 	ldw	r2,-32504(gp)
  800d60:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  800d64:	d0a04217 	ldw	r2,-32504(gp)
  800d68:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  800d6c:	d0a04217 	ldw	r2,-32504(gp)
  800d70:	10000915 	stw	zero,36(r2)
  800d74:	e0bff317 	ldw	r2,-52(fp)
  800d78:	e0bffa15 	stw	r2,-24(fp)
  800d7c:	e0bffa17 	ldw	r2,-24(fp)
  800d80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  800d84:	e0bff18b 	ldhu	r2,-58(fp)
}
  800d88:	e037883a 	mov	sp,fp
  800d8c:	dfc00117 	ldw	ra,4(sp)
  800d90:	df000017 	ldw	fp,0(sp)
  800d94:	dec00204 	addi	sp,sp,8
  800d98:	f800283a 	ret

00800d9c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  800d9c:	defffe04 	addi	sp,sp,-8
  800da0:	dfc00115 	stw	ra,4(sp)
  800da4:	df000015 	stw	fp,0(sp)
  800da8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  800dac:	080b9580 	call	80b958 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  800db0:	0801b180 	call	801b18 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  800db4:	0801b600 	call	801b60 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  800db8:	0801ccc0 	call	801ccc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  800dbc:	0801a380 	call	801a38 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  800dc0:	0803b6c0 	call	803b6c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  800dc4:	080446c0 	call	80446c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  800dc8:	08055a00 	call	8055a0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  800dcc:	0801bcc0 	call	801bcc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  800dd0:	0801c4c0 	call	801c4c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  800dd4:	080b9780 	call	80b978 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  800dd8:	08025400 	call	802540 <OSDebugInit>
#endif
}
  800ddc:	0001883a 	nop
  800de0:	e037883a 	mov	sp,fp
  800de4:	dfc00117 	ldw	ra,4(sp)
  800de8:	df000017 	ldw	fp,0(sp)
  800dec:	dec00204 	addi	sp,sp,8
  800df0:	f800283a 	ret

00800df4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  800df4:	deffff04 	addi	sp,sp,-4
  800df8:	df000015 	stw	fp,0(sp)
  800dfc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  800e00:	d0a03343 	ldbu	r2,-32563(gp)
  800e04:	10803fcc 	andi	r2,r2,255
  800e08:	10800058 	cmpnei	r2,r2,1
  800e0c:	1000071e 	bne	r2,zero,800e2c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  800e10:	d0a04103 	ldbu	r2,-32508(gp)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	10803fe0 	cmpeqi	r2,r2,255
  800e1c:	1000031e 	bne	r2,zero,800e2c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  800e20:	d0a04103 	ldbu	r2,-32508(gp)
  800e24:	10800044 	addi	r2,r2,1
  800e28:	d0a04105 	stb	r2,-32508(gp)
        }
    }
}
  800e2c:	0001883a 	nop
  800e30:	e037883a 	mov	sp,fp
  800e34:	df000017 	ldw	fp,0(sp)
  800e38:	dec00104 	addi	sp,sp,4
  800e3c:	f800283a 	ret

00800e40 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  800e40:	defffb04 	addi	sp,sp,-20
  800e44:	dfc00415 	stw	ra,16(sp)
  800e48:	df000315 	stw	fp,12(sp)
  800e4c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  800e50:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  800e54:	d0a03343 	ldbu	r2,-32563(gp)
  800e58:	10803fcc 	andi	r2,r2,255
  800e5c:	10800058 	cmpnei	r2,r2,1
  800e60:	10002f1e 	bne	r2,zero,800f20 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800e64:	0005303a 	rdctl	r2,status
  800e68:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800e6c:	e0ffff17 	ldw	r3,-4(fp)
  800e70:	00bfff84 	movi	r2,-2
  800e74:	1884703a 	and	r2,r3,r2
  800e78:	1001703a 	wrctl	status,r2
  
  return context;
  800e7c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  800e80:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  800e84:	d0a04103 	ldbu	r2,-32508(gp)
  800e88:	10803fcc 	andi	r2,r2,255
  800e8c:	10000326 	beq	r2,zero,800e9c <OSIntExit+0x5c>
            OSIntNesting--;
  800e90:	d0a04103 	ldbu	r2,-32508(gp)
  800e94:	10bfffc4 	addi	r2,r2,-1
  800e98:	d0a04105 	stb	r2,-32508(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  800e9c:	d0a04103 	ldbu	r2,-32508(gp)
  800ea0:	10803fcc 	andi	r2,r2,255
  800ea4:	10001a1e 	bne	r2,zero,800f10 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  800ea8:	d0a03303 	ldbu	r2,-32564(gp)
  800eac:	10803fcc 	andi	r2,r2,255
  800eb0:	1000171e 	bne	r2,zero,800f10 <OSIntExit+0xd0>
                OS_SchedNew();
  800eb4:	0801f3c0 	call	801f3c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  800eb8:	d0e03503 	ldbu	r3,-32556(gp)
  800ebc:	d0a03543 	ldbu	r2,-32555(gp)
  800ec0:	18c03fcc 	andi	r3,r3,255
  800ec4:	10803fcc 	andi	r2,r2,255
  800ec8:	18801126 	beq	r3,r2,800f10 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  800ecc:	d0a03503 	ldbu	r2,-32556(gp)
  800ed0:	10c03fcc 	andi	r3,r2,255
  800ed4:	00802074 	movhi	r2,129
  800ed8:	109d2f04 	addi	r2,r2,29884
  800edc:	18c7883a 	add	r3,r3,r3
  800ee0:	18c7883a 	add	r3,r3,r3
  800ee4:	10c5883a 	add	r2,r2,r3
  800ee8:	10800017 	ldw	r2,0(r2)
  800eec:	d0a03d15 	stw	r2,-32524(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  800ef0:	d0a03d17 	ldw	r2,-32524(gp)
  800ef4:	10c00e17 	ldw	r3,56(r2)
  800ef8:	18c00044 	addi	r3,r3,1
  800efc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  800f00:	d0a03817 	ldw	r2,-32544(gp)
  800f04:	10800044 	addi	r2,r2,1
  800f08:	d0a03815 	stw	r2,-32544(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  800f0c:	080b6840 	call	80b684 <OSCtxSw>
  800f10:	e0bffd17 	ldw	r2,-12(fp)
  800f14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f18:	e0bffe17 	ldw	r2,-8(fp)
  800f1c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  800f20:	0001883a 	nop
  800f24:	e037883a 	mov	sp,fp
  800f28:	dfc00117 	ldw	ra,4(sp)
  800f2c:	df000017 	ldw	fp,0(sp)
  800f30:	dec00204 	addi	sp,sp,8
  800f34:	f800283a 	ret

00800f38 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  800f38:	defffc04 	addi	sp,sp,-16
  800f3c:	df000315 	stw	fp,12(sp)
  800f40:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800f44:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  800f48:	d0a03343 	ldbu	r2,-32563(gp)
  800f4c:	10803fcc 	andi	r2,r2,255
  800f50:	10800058 	cmpnei	r2,r2,1
  800f54:	1000161e 	bne	r2,zero,800fb0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800f58:	0005303a 	rdctl	r2,status
  800f5c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800f60:	e0ffff17 	ldw	r3,-4(fp)
  800f64:	00bfff84 	movi	r2,-2
  800f68:	1884703a 	and	r2,r3,r2
  800f6c:	1001703a 	wrctl	status,r2
  
  return context;
  800f70:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  800f74:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  800f78:	d0a04103 	ldbu	r2,-32508(gp)
  800f7c:	10803fcc 	andi	r2,r2,255
  800f80:	1000071e 	bne	r2,zero,800fa0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  800f84:	d0a03303 	ldbu	r2,-32564(gp)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	10803fe0 	cmpeqi	r2,r2,255
  800f90:	1000031e 	bne	r2,zero,800fa0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  800f94:	d0a03303 	ldbu	r2,-32564(gp)
  800f98:	10800044 	addi	r2,r2,1
  800f9c:	d0a03305 	stb	r2,-32564(gp)
  800fa0:	e0bffd17 	ldw	r2,-12(fp)
  800fa4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800fa8:	e0bffe17 	ldw	r2,-8(fp)
  800fac:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  800fb0:	0001883a 	nop
  800fb4:	e037883a 	mov	sp,fp
  800fb8:	df000017 	ldw	fp,0(sp)
  800fbc:	dec00104 	addi	sp,sp,4
  800fc0:	f800283a 	ret

00800fc4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  800fc4:	defff804 	addi	sp,sp,-32
  800fc8:	dfc00715 	stw	ra,28(sp)
  800fcc:	df000615 	stw	fp,24(sp)
  800fd0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  800fd4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  800fd8:	d0a03343 	ldbu	r2,-32563(gp)
  800fdc:	10803fcc 	andi	r2,r2,255
  800fe0:	10800058 	cmpnei	r2,r2,1
  800fe4:	1000281e 	bne	r2,zero,801088 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800fe8:	0005303a 	rdctl	r2,status
  800fec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800ff0:	e0ffff17 	ldw	r3,-4(fp)
  800ff4:	00bfff84 	movi	r2,-2
  800ff8:	1884703a 	and	r2,r3,r2
  800ffc:	1001703a 	wrctl	status,r2
  
  return context;
  801000:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  801004:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  801008:	d0a03303 	ldbu	r2,-32564(gp)
  80100c:	10803fcc 	andi	r2,r2,255
  801010:	10001926 	beq	r2,zero,801078 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  801014:	d0a03303 	ldbu	r2,-32564(gp)
  801018:	10bfffc4 	addi	r2,r2,-1
  80101c:	d0a03305 	stb	r2,-32564(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  801020:	d0a03303 	ldbu	r2,-32564(gp)
  801024:	10803fcc 	andi	r2,r2,255
  801028:	10000e1e 	bne	r2,zero,801064 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80102c:	d0a04103 	ldbu	r2,-32508(gp)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1000061e 	bne	r2,zero,801050 <OSSchedUnlock+0x8c>
  801038:	e0bffa17 	ldw	r2,-24(fp)
  80103c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801040:	e0bffb17 	ldw	r2,-20(fp)
  801044:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  801048:	0801e6c0 	call	801e6c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80104c:	00000e06 	br	801088 <OSSchedUnlock+0xc4>
  801050:	e0bffa17 	ldw	r2,-24(fp)
  801054:	e0bffc15 	stw	r2,-16(fp)
  801058:	e0bffc17 	ldw	r2,-16(fp)
  80105c:	1001703a 	wrctl	status,r2
  801060:	00000906 	br	801088 <OSSchedUnlock+0xc4>
  801064:	e0bffa17 	ldw	r2,-24(fp)
  801068:	e0bffd15 	stw	r2,-12(fp)
  80106c:	e0bffd17 	ldw	r2,-12(fp)
  801070:	1001703a 	wrctl	status,r2
  801074:	00000406 	br	801088 <OSSchedUnlock+0xc4>
  801078:	e0bffa17 	ldw	r2,-24(fp)
  80107c:	e0bffe15 	stw	r2,-8(fp)
  801080:	e0bffe17 	ldw	r2,-8(fp)
  801084:	1001703a 	wrctl	status,r2
  801088:	0001883a 	nop
  80108c:	e037883a 	mov	sp,fp
  801090:	dfc00117 	ldw	ra,4(sp)
  801094:	df000017 	ldw	fp,0(sp)
  801098:	dec00204 	addi	sp,sp,8
  80109c:	f800283a 	ret

008010a0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  8010a0:	defffe04 	addi	sp,sp,-8
  8010a4:	dfc00115 	stw	ra,4(sp)
  8010a8:	df000015 	stw	fp,0(sp)
  8010ac:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  8010b0:	d0a03343 	ldbu	r2,-32563(gp)
  8010b4:	10803fcc 	andi	r2,r2,255
  8010b8:	10000f1e 	bne	r2,zero,8010f8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  8010bc:	0801f3c0 	call	801f3c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  8010c0:	d0a03503 	ldbu	r2,-32556(gp)
  8010c4:	d0a03545 	stb	r2,-32555(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  8010c8:	d0a03503 	ldbu	r2,-32556(gp)
  8010cc:	10c03fcc 	andi	r3,r2,255
  8010d0:	00802074 	movhi	r2,129
  8010d4:	109d2f04 	addi	r2,r2,29884
  8010d8:	18c7883a 	add	r3,r3,r3
  8010dc:	18c7883a 	add	r3,r3,r3
  8010e0:	10c5883a 	add	r2,r2,r3
  8010e4:	10800017 	ldw	r2,0(r2)
  8010e8:	d0a03d15 	stw	r2,-32524(gp)
        OSTCBCur      = OSTCBHighRdy;
  8010ec:	d0a03d17 	ldw	r2,-32524(gp)
  8010f0:	d0a04215 	stw	r2,-32504(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  8010f4:	080b7100 	call	80b710 <OSStartHighRdy>
    }
}
  8010f8:	0001883a 	nop
  8010fc:	e037883a 	mov	sp,fp
  801100:	dfc00117 	ldw	ra,4(sp)
  801104:	df000017 	ldw	fp,0(sp)
  801108:	dec00204 	addi	sp,sp,8
  80110c:	f800283a 	ret

00801110 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  801110:	defff904 	addi	sp,sp,-28
  801114:	dfc00615 	stw	ra,24(sp)
  801118:	df000515 	stw	fp,20(sp)
  80111c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  801120:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  801124:	01000084 	movi	r4,2
  801128:	08078140 	call	807814 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80112c:	0005303a 	rdctl	r2,status
  801130:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801134:	e0fffc17 	ldw	r3,-16(fp)
  801138:	00bfff84 	movi	r2,-2
  80113c:	1884703a 	and	r2,r3,r2
  801140:	1001703a 	wrctl	status,r2
  
  return context;
  801144:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  801148:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80114c:	d0203415 	stw	zero,-32560(gp)
  801150:	e0bffb17 	ldw	r2,-20(fp)
  801154:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801158:	e0bffd17 	ldw	r2,-12(fp)
  80115c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  801160:	01001904 	movi	r4,100
  801164:	08078140 	call	807814 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801168:	0005303a 	rdctl	r2,status
  80116c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801170:	e0fffe17 	ldw	r3,-8(fp)
  801174:	00bfff84 	movi	r2,-2
  801178:	1884703a 	and	r2,r3,r2
  80117c:	1001703a 	wrctl	status,r2
  
  return context;
  801180:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  801184:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  801188:	d0a03417 	ldw	r2,-32560(gp)
  80118c:	d0a03915 	stw	r2,-32540(gp)
    OSStatRdy    = OS_TRUE;
  801190:	00800044 	movi	r2,1
  801194:	d0a04505 	stb	r2,-32492(gp)
  801198:	e0bffb17 	ldw	r2,-20(fp)
  80119c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8011a0:	e0bfff17 	ldw	r2,-4(fp)
  8011a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8011a8:	0001883a 	nop
  8011ac:	e037883a 	mov	sp,fp
  8011b0:	dfc00117 	ldw	ra,4(sp)
  8011b4:	df000017 	ldw	fp,0(sp)
  8011b8:	dec00204 	addi	sp,sp,8
  8011bc:	f800283a 	ret

008011c0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  8011c0:	defff704 	addi	sp,sp,-36
  8011c4:	dfc00815 	stw	ra,32(sp)
  8011c8:	df000715 	stw	fp,28(sp)
  8011cc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8011d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  8011d4:	080b9380 	call	80b938 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8011d8:	0005303a 	rdctl	r2,status
  8011dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8011e0:	e0fffd17 	ldw	r3,-12(fp)
  8011e4:	00bfff84 	movi	r2,-2
  8011e8:	1884703a 	and	r2,r3,r2
  8011ec:	1001703a 	wrctl	status,r2
  
  return context;
  8011f0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  8011f4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  8011f8:	d0a04317 	ldw	r2,-32500(gp)
  8011fc:	10800044 	addi	r2,r2,1
  801200:	d0a04315 	stw	r2,-32500(gp)
  801204:	e0bffb17 	ldw	r2,-20(fp)
  801208:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80120c:	e0bfff17 	ldw	r2,-4(fp)
  801210:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  801214:	d0a03343 	ldbu	r2,-32563(gp)
  801218:	10803fcc 	andi	r2,r2,255
  80121c:	10800058 	cmpnei	r2,r2,1
  801220:	10006a1e 	bne	r2,zero,8013cc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  801224:	d0a03703 	ldbu	r2,-32548(gp)
  801228:	10803fcc 	andi	r2,r2,255
  80122c:	10c00060 	cmpeqi	r3,r2,1
  801230:	1800061e 	bne	r3,zero,80124c <OSTimeTick+0x8c>
  801234:	10c000a0 	cmpeqi	r3,r2,2
  801238:	1800061e 	bne	r3,zero,801254 <OSTimeTick+0x94>
  80123c:	10000a1e 	bne	r2,zero,801268 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  801240:	00800044 	movi	r2,1
  801244:	e0bffa05 	stb	r2,-24(fp)
                 break;
  801248:	00000b06 	br	801278 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80124c:	e03ffa05 	stb	zero,-24(fp)
                 break;
  801250:	00000906 	br	801278 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  801254:	00800044 	movi	r2,1
  801258:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80125c:	00800044 	movi	r2,1
  801260:	d0a03705 	stb	r2,-32548(gp)
                 break;
  801264:	00000406 	br	801278 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  801268:	00800044 	movi	r2,1
  80126c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  801270:	d0203705 	stb	zero,-32548(gp)
                 break;
  801274:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  801278:	e0bffa03 	ldbu	r2,-24(fp)
  80127c:	10005226 	beq	r2,zero,8013c8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  801280:	d0a03617 	ldw	r2,-32552(gp)
  801284:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  801288:	00004906 	br	8013b0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80128c:	0005303a 	rdctl	r2,status
  801290:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801294:	e0fffc17 	ldw	r3,-16(fp)
  801298:	00bfff84 	movi	r2,-2
  80129c:	1884703a 	and	r2,r3,r2
  8012a0:	1001703a 	wrctl	status,r2
  
  return context;
  8012a4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  8012a8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  8012ac:	e0bff917 	ldw	r2,-28(fp)
  8012b0:	10800b8b 	ldhu	r2,46(r2)
  8012b4:	10bfffcc 	andi	r2,r2,65535
  8012b8:	10003626 	beq	r2,zero,801394 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  8012bc:	e0bff917 	ldw	r2,-28(fp)
  8012c0:	10800b8b 	ldhu	r2,46(r2)
  8012c4:	10bfffc4 	addi	r2,r2,-1
  8012c8:	1007883a 	mov	r3,r2
  8012cc:	e0bff917 	ldw	r2,-28(fp)
  8012d0:	10c00b8d 	sth	r3,46(r2)
  8012d4:	e0bff917 	ldw	r2,-28(fp)
  8012d8:	10800b8b 	ldhu	r2,46(r2)
  8012dc:	10bfffcc 	andi	r2,r2,65535
  8012e0:	10002c1e 	bne	r2,zero,801394 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8012e4:	e0bff917 	ldw	r2,-28(fp)
  8012e8:	10800c03 	ldbu	r2,48(r2)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	10800dcc 	andi	r2,r2,55
  8012f4:	10000b26 	beq	r2,zero,801324 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8012f8:	e0bff917 	ldw	r2,-28(fp)
  8012fc:	10c00c03 	ldbu	r3,48(r2)
  801300:	00bff204 	movi	r2,-56
  801304:	1884703a 	and	r2,r3,r2
  801308:	1007883a 	mov	r3,r2
  80130c:	e0bff917 	ldw	r2,-28(fp)
  801310:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  801314:	e0bff917 	ldw	r2,-28(fp)
  801318:	00c00044 	movi	r3,1
  80131c:	10c00c45 	stb	r3,49(r2)
  801320:	00000206 	br	80132c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  801324:	e0bff917 	ldw	r2,-28(fp)
  801328:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80132c:	e0bff917 	ldw	r2,-28(fp)
  801330:	10800c03 	ldbu	r2,48(r2)
  801334:	10803fcc 	andi	r2,r2,255
  801338:	1080020c 	andi	r2,r2,8
  80133c:	1000151e 	bne	r2,zero,801394 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  801340:	e0bff917 	ldw	r2,-28(fp)
  801344:	10c00d83 	ldbu	r3,54(r2)
  801348:	d0a03f03 	ldbu	r2,-32516(gp)
  80134c:	1884b03a 	or	r2,r3,r2
  801350:	d0a03f05 	stb	r2,-32516(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  801354:	e0bff917 	ldw	r2,-28(fp)
  801358:	10800d03 	ldbu	r2,52(r2)
  80135c:	10c03fcc 	andi	r3,r2,255
  801360:	e0bff917 	ldw	r2,-28(fp)
  801364:	10800d03 	ldbu	r2,52(r2)
  801368:	11003fcc 	andi	r4,r2,255
  80136c:	d0a03f44 	addi	r2,gp,-32515
  801370:	2085883a 	add	r2,r4,r2
  801374:	11000003 	ldbu	r4,0(r2)
  801378:	e0bff917 	ldw	r2,-28(fp)
  80137c:	10800d43 	ldbu	r2,53(r2)
  801380:	2084b03a 	or	r2,r4,r2
  801384:	1009883a 	mov	r4,r2
  801388:	d0a03f44 	addi	r2,gp,-32515
  80138c:	1885883a 	add	r2,r3,r2
  801390:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  801394:	e0bff917 	ldw	r2,-28(fp)
  801398:	10800517 	ldw	r2,20(r2)
  80139c:	e0bff915 	stw	r2,-28(fp)
  8013a0:	e0bffb17 	ldw	r2,-20(fp)
  8013a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8013a8:	e0bffe17 	ldw	r2,-8(fp)
  8013ac:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  8013b0:	e0bff917 	ldw	r2,-28(fp)
  8013b4:	10800c83 	ldbu	r2,50(r2)
  8013b8:	10803fcc 	andi	r2,r2,255
  8013bc:	10800518 	cmpnei	r2,r2,20
  8013c0:	103fb21e 	bne	r2,zero,80128c <__alt_mem_epcs_flash_controller_0+0xff7f828c>
  8013c4:	00000106 	br	8013cc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  8013c8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  8013cc:	e037883a 	mov	sp,fp
  8013d0:	dfc00117 	ldw	ra,4(sp)
  8013d4:	df000017 	ldw	fp,0(sp)
  8013d8:	dec00204 	addi	sp,sp,8
  8013dc:	f800283a 	ret

008013e0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  8013e0:	deffff04 	addi	sp,sp,-4
  8013e4:	df000015 	stw	fp,0(sp)
  8013e8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  8013ec:	00804784 	movi	r2,286
}
  8013f0:	e037883a 	mov	sp,fp
  8013f4:	df000017 	ldw	fp,0(sp)
  8013f8:	dec00104 	addi	sp,sp,4
  8013fc:	f800283a 	ret

00801400 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  801400:	deffff04 	addi	sp,sp,-4
  801404:	df000015 	stw	fp,0(sp)
  801408:	d839883a 	mov	fp,sp
}
  80140c:	0001883a 	nop
  801410:	e037883a 	mov	sp,fp
  801414:	df000017 	ldw	fp,0(sp)
  801418:	dec00104 	addi	sp,sp,4
  80141c:	f800283a 	ret

00801420 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  801420:	defff804 	addi	sp,sp,-32
  801424:	dfc00715 	stw	ra,28(sp)
  801428:	df000615 	stw	fp,24(sp)
  80142c:	df000604 	addi	fp,sp,24
  801430:	e13ffc15 	stw	r4,-16(fp)
  801434:	e17ffd15 	stw	r5,-12(fp)
  801438:	3007883a 	mov	r3,r6
  80143c:	3805883a 	mov	r2,r7
  801440:	e0fffe05 	stb	r3,-8(fp)
  801444:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  801448:	e0bffc17 	ldw	r2,-16(fp)
  80144c:	10800283 	ldbu	r2,10(r2)
  801450:	10c03fcc 	andi	r3,r2,255
  801454:	00802074 	movhi	r2,129
  801458:	10b1e304 	addi	r2,r2,-14452
  80145c:	10c5883a 	add	r2,r2,r3
  801460:	10800003 	ldbu	r2,0(r2)
  801464:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  801468:	e0bffa03 	ldbu	r2,-24(fp)
  80146c:	e0fffc17 	ldw	r3,-16(fp)
  801470:	1885883a 	add	r2,r3,r2
  801474:	108002c4 	addi	r2,r2,11
  801478:	10800003 	ldbu	r2,0(r2)
  80147c:	10c03fcc 	andi	r3,r2,255
  801480:	00802074 	movhi	r2,129
  801484:	10b1e304 	addi	r2,r2,-14452
  801488:	10c5883a 	add	r2,r2,r3
  80148c:	10800003 	ldbu	r2,0(r2)
  801490:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  801494:	e0bffa03 	ldbu	r2,-24(fp)
  801498:	100490fa 	slli	r2,r2,3
  80149c:	1007883a 	mov	r3,r2
  8014a0:	e0bffa43 	ldbu	r2,-23(fp)
  8014a4:	1885883a 	add	r2,r3,r2
  8014a8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  8014ac:	e0fffa83 	ldbu	r3,-22(fp)
  8014b0:	00802074 	movhi	r2,129
  8014b4:	109d2f04 	addi	r2,r2,29884
  8014b8:	18c7883a 	add	r3,r3,r3
  8014bc:	18c7883a 	add	r3,r3,r3
  8014c0:	10c5883a 	add	r2,r2,r3
  8014c4:	10800017 	ldw	r2,0(r2)
  8014c8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  8014cc:	e0bffb17 	ldw	r2,-20(fp)
  8014d0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  8014d4:	e0bffb17 	ldw	r2,-20(fp)
  8014d8:	e0fffd17 	ldw	r3,-12(fp)
  8014dc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  8014e0:	e0bffb17 	ldw	r2,-20(fp)
  8014e4:	10800c03 	ldbu	r2,48(r2)
  8014e8:	1007883a 	mov	r3,r2
  8014ec:	e0bffe03 	ldbu	r2,-8(fp)
  8014f0:	0084303a 	nor	r2,zero,r2
  8014f4:	1884703a 	and	r2,r3,r2
  8014f8:	1007883a 	mov	r3,r2
  8014fc:	e0bffb17 	ldw	r2,-20(fp)
  801500:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  801504:	e0bffb17 	ldw	r2,-20(fp)
  801508:	e0ffff03 	ldbu	r3,-4(fp)
  80150c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  801510:	e0bffb17 	ldw	r2,-20(fp)
  801514:	10800c03 	ldbu	r2,48(r2)
  801518:	10803fcc 	andi	r2,r2,255
  80151c:	1080020c 	andi	r2,r2,8
  801520:	1000111e 	bne	r2,zero,801568 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  801524:	e0bffb17 	ldw	r2,-20(fp)
  801528:	10c00d83 	ldbu	r3,54(r2)
  80152c:	d0a03f03 	ldbu	r2,-32516(gp)
  801530:	1884b03a 	or	r2,r3,r2
  801534:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  801538:	e0fffa03 	ldbu	r3,-24(fp)
  80153c:	e13ffa03 	ldbu	r4,-24(fp)
  801540:	d0a03f44 	addi	r2,gp,-32515
  801544:	2085883a 	add	r2,r4,r2
  801548:	11000003 	ldbu	r4,0(r2)
  80154c:	e0bffb17 	ldw	r2,-20(fp)
  801550:	10800d43 	ldbu	r2,53(r2)
  801554:	2084b03a 	or	r2,r4,r2
  801558:	1009883a 	mov	r4,r2
  80155c:	d0a03f44 	addi	r2,gp,-32515
  801560:	1885883a 	add	r2,r3,r2
  801564:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  801568:	e17ffc17 	ldw	r5,-16(fp)
  80156c:	e13ffb17 	ldw	r4,-20(fp)
  801570:	08018180 	call	801818 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  801574:	e0bffb17 	ldw	r2,-20(fp)
  801578:	10800817 	ldw	r2,32(r2)
  80157c:	10000826 	beq	r2,zero,8015a0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  801580:	e0bffb17 	ldw	r2,-20(fp)
  801584:	10800817 	ldw	r2,32(r2)
  801588:	100b883a 	mov	r5,r2
  80158c:	e13ffb17 	ldw	r4,-20(fp)
  801590:	08018d00 	call	8018d0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  801594:	e0bffb17 	ldw	r2,-20(fp)
  801598:	e0fffc17 	ldw	r3,-16(fp)
  80159c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  8015a0:	e0bffa83 	ldbu	r2,-22(fp)
}
  8015a4:	e037883a 	mov	sp,fp
  8015a8:	dfc00117 	ldw	ra,4(sp)
  8015ac:	df000017 	ldw	fp,0(sp)
  8015b0:	dec00204 	addi	sp,sp,8
  8015b4:	f800283a 	ret

008015b8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  8015b8:	defffd04 	addi	sp,sp,-12
  8015bc:	df000215 	stw	fp,8(sp)
  8015c0:	df000204 	addi	fp,sp,8
  8015c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  8015c8:	d0a04217 	ldw	r2,-32504(gp)
  8015cc:	e0ffff17 	ldw	r3,-4(fp)
  8015d0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  8015d4:	d0a04217 	ldw	r2,-32504(gp)
  8015d8:	10800d03 	ldbu	r2,52(r2)
  8015dc:	10803fcc 	andi	r2,r2,255
  8015e0:	d0e04217 	ldw	r3,-32504(gp)
  8015e4:	18c00d03 	ldbu	r3,52(r3)
  8015e8:	18c03fcc 	andi	r3,r3,255
  8015ec:	e13fff17 	ldw	r4,-4(fp)
  8015f0:	20c7883a 	add	r3,r4,r3
  8015f4:	18c002c4 	addi	r3,r3,11
  8015f8:	19000003 	ldbu	r4,0(r3)
  8015fc:	d0e04217 	ldw	r3,-32504(gp)
  801600:	18c00d43 	ldbu	r3,53(r3)
  801604:	20c6b03a 	or	r3,r4,r3
  801608:	1809883a 	mov	r4,r3
  80160c:	e0ffff17 	ldw	r3,-4(fp)
  801610:	1885883a 	add	r2,r3,r2
  801614:	108002c4 	addi	r2,r2,11
  801618:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80161c:	e0bfff17 	ldw	r2,-4(fp)
  801620:	10c00283 	ldbu	r3,10(r2)
  801624:	d0a04217 	ldw	r2,-32504(gp)
  801628:	10800d83 	ldbu	r2,54(r2)
  80162c:	1884b03a 	or	r2,r3,r2
  801630:	1007883a 	mov	r3,r2
  801634:	e0bfff17 	ldw	r2,-4(fp)
  801638:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80163c:	d0a04217 	ldw	r2,-32504(gp)
  801640:	10800d03 	ldbu	r2,52(r2)
  801644:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  801648:	e0fffe03 	ldbu	r3,-8(fp)
  80164c:	e13ffe03 	ldbu	r4,-8(fp)
  801650:	d0a03f44 	addi	r2,gp,-32515
  801654:	2085883a 	add	r2,r4,r2
  801658:	10800003 	ldbu	r2,0(r2)
  80165c:	1009883a 	mov	r4,r2
  801660:	d0a04217 	ldw	r2,-32504(gp)
  801664:	10800d43 	ldbu	r2,53(r2)
  801668:	0084303a 	nor	r2,zero,r2
  80166c:	2084703a 	and	r2,r4,r2
  801670:	1009883a 	mov	r4,r2
  801674:	d0a03f44 	addi	r2,gp,-32515
  801678:	1885883a 	add	r2,r3,r2
  80167c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  801680:	e0fffe03 	ldbu	r3,-8(fp)
  801684:	d0a03f44 	addi	r2,gp,-32515
  801688:	1885883a 	add	r2,r3,r2
  80168c:	10800003 	ldbu	r2,0(r2)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	1000071e 	bne	r2,zero,8016b4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  801698:	d0a04217 	ldw	r2,-32504(gp)
  80169c:	10800d83 	ldbu	r2,54(r2)
  8016a0:	0084303a 	nor	r2,zero,r2
  8016a4:	1007883a 	mov	r3,r2
  8016a8:	d0a03f03 	ldbu	r2,-32516(gp)
  8016ac:	1884703a 	and	r2,r3,r2
  8016b0:	d0a03f05 	stb	r2,-32516(gp)
    }
}
  8016b4:	0001883a 	nop
  8016b8:	e037883a 	mov	sp,fp
  8016bc:	df000017 	ldw	fp,0(sp)
  8016c0:	dec00104 	addi	sp,sp,4
  8016c4:	f800283a 	ret

008016c8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  8016c8:	defffb04 	addi	sp,sp,-20
  8016cc:	df000415 	stw	fp,16(sp)
  8016d0:	df000404 	addi	fp,sp,16
  8016d4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  8016d8:	d0a04217 	ldw	r2,-32504(gp)
  8016dc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  8016e0:	d0a04217 	ldw	r2,-32504(gp)
  8016e4:	e0ffff17 	ldw	r3,-4(fp)
  8016e8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  8016ec:	e0bfff17 	ldw	r2,-4(fp)
  8016f0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	10800017 	ldw	r2,0(r2)
  8016fc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  801700:	00002006 	br	801784 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  801704:	d0a04217 	ldw	r2,-32504(gp)
  801708:	10800d03 	ldbu	r2,52(r2)
  80170c:	10803fcc 	andi	r2,r2,255
  801710:	d0e04217 	ldw	r3,-32504(gp)
  801714:	18c00d03 	ldbu	r3,52(r3)
  801718:	18c03fcc 	andi	r3,r3,255
  80171c:	e13ffd17 	ldw	r4,-12(fp)
  801720:	20c7883a 	add	r3,r4,r3
  801724:	18c002c4 	addi	r3,r3,11
  801728:	19000003 	ldbu	r4,0(r3)
  80172c:	d0e04217 	ldw	r3,-32504(gp)
  801730:	18c00d43 	ldbu	r3,53(r3)
  801734:	20c6b03a 	or	r3,r4,r3
  801738:	1809883a 	mov	r4,r3
  80173c:	e0fffd17 	ldw	r3,-12(fp)
  801740:	1885883a 	add	r2,r3,r2
  801744:	108002c4 	addi	r2,r2,11
  801748:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80174c:	e0bffd17 	ldw	r2,-12(fp)
  801750:	10c00283 	ldbu	r3,10(r2)
  801754:	d0a04217 	ldw	r2,-32504(gp)
  801758:	10800d83 	ldbu	r2,54(r2)
  80175c:	1884b03a 	or	r2,r3,r2
  801760:	1007883a 	mov	r3,r2
  801764:	e0bffd17 	ldw	r2,-12(fp)
  801768:	10c00285 	stb	r3,10(r2)
        pevents++;
  80176c:	e0bffc17 	ldw	r2,-16(fp)
  801770:	10800104 	addi	r2,r2,4
  801774:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  801778:	e0bffc17 	ldw	r2,-16(fp)
  80177c:	10800017 	ldw	r2,0(r2)
  801780:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  801784:	e0bffd17 	ldw	r2,-12(fp)
  801788:	103fde1e 	bne	r2,zero,801704 <__alt_mem_epcs_flash_controller_0+0xff7f8704>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80178c:	d0a04217 	ldw	r2,-32504(gp)
  801790:	10800d03 	ldbu	r2,52(r2)
  801794:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  801798:	e0fffe03 	ldbu	r3,-8(fp)
  80179c:	e13ffe03 	ldbu	r4,-8(fp)
  8017a0:	d0a03f44 	addi	r2,gp,-32515
  8017a4:	2085883a 	add	r2,r4,r2
  8017a8:	10800003 	ldbu	r2,0(r2)
  8017ac:	1009883a 	mov	r4,r2
  8017b0:	d0a04217 	ldw	r2,-32504(gp)
  8017b4:	10800d43 	ldbu	r2,53(r2)
  8017b8:	0084303a 	nor	r2,zero,r2
  8017bc:	2084703a 	and	r2,r4,r2
  8017c0:	1009883a 	mov	r4,r2
  8017c4:	d0a03f44 	addi	r2,gp,-32515
  8017c8:	1885883a 	add	r2,r3,r2
  8017cc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  8017d0:	e0fffe03 	ldbu	r3,-8(fp)
  8017d4:	d0a03f44 	addi	r2,gp,-32515
  8017d8:	1885883a 	add	r2,r3,r2
  8017dc:	10800003 	ldbu	r2,0(r2)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1000071e 	bne	r2,zero,801804 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  8017e8:	d0a04217 	ldw	r2,-32504(gp)
  8017ec:	10800d83 	ldbu	r2,54(r2)
  8017f0:	0084303a 	nor	r2,zero,r2
  8017f4:	1007883a 	mov	r3,r2
  8017f8:	d0a03f03 	ldbu	r2,-32516(gp)
  8017fc:	1884703a 	and	r2,r3,r2
  801800:	d0a03f05 	stb	r2,-32516(gp)
    }
}
  801804:	0001883a 	nop
  801808:	e037883a 	mov	sp,fp
  80180c:	df000017 	ldw	fp,0(sp)
  801810:	dec00104 	addi	sp,sp,4
  801814:	f800283a 	ret

00801818 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  801818:	defffc04 	addi	sp,sp,-16
  80181c:	df000315 	stw	fp,12(sp)
  801820:	df000304 	addi	fp,sp,12
  801824:	e13ffe15 	stw	r4,-8(fp)
  801828:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80182c:	e0bffe17 	ldw	r2,-8(fp)
  801830:	10800d03 	ldbu	r2,52(r2)
  801834:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  801838:	e0bffd03 	ldbu	r2,-12(fp)
  80183c:	e0fffd03 	ldbu	r3,-12(fp)
  801840:	e13fff17 	ldw	r4,-4(fp)
  801844:	20c7883a 	add	r3,r4,r3
  801848:	18c002c4 	addi	r3,r3,11
  80184c:	18c00003 	ldbu	r3,0(r3)
  801850:	1809883a 	mov	r4,r3
  801854:	e0fffe17 	ldw	r3,-8(fp)
  801858:	18c00d43 	ldbu	r3,53(r3)
  80185c:	00c6303a 	nor	r3,zero,r3
  801860:	20c6703a 	and	r3,r4,r3
  801864:	1809883a 	mov	r4,r3
  801868:	e0ffff17 	ldw	r3,-4(fp)
  80186c:	1885883a 	add	r2,r3,r2
  801870:	108002c4 	addi	r2,r2,11
  801874:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  801878:	e0bffd03 	ldbu	r2,-12(fp)
  80187c:	e0ffff17 	ldw	r3,-4(fp)
  801880:	1885883a 	add	r2,r3,r2
  801884:	108002c4 	addi	r2,r2,11
  801888:	10800003 	ldbu	r2,0(r2)
  80188c:	10803fcc 	andi	r2,r2,255
  801890:	10000a1e 	bne	r2,zero,8018bc <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  801894:	e0bfff17 	ldw	r2,-4(fp)
  801898:	10800283 	ldbu	r2,10(r2)
  80189c:	1007883a 	mov	r3,r2
  8018a0:	e0bffe17 	ldw	r2,-8(fp)
  8018a4:	10800d83 	ldbu	r2,54(r2)
  8018a8:	0084303a 	nor	r2,zero,r2
  8018ac:	1884703a 	and	r2,r3,r2
  8018b0:	1007883a 	mov	r3,r2
  8018b4:	e0bfff17 	ldw	r2,-4(fp)
  8018b8:	10c00285 	stb	r3,10(r2)
    }
}
  8018bc:	0001883a 	nop
  8018c0:	e037883a 	mov	sp,fp
  8018c4:	df000017 	ldw	fp,0(sp)
  8018c8:	dec00104 	addi	sp,sp,4
  8018cc:	f800283a 	ret

008018d0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  8018d0:	defffa04 	addi	sp,sp,-24
  8018d4:	df000515 	stw	fp,20(sp)
  8018d8:	df000504 	addi	fp,sp,20
  8018dc:	e13ffe15 	stw	r4,-8(fp)
  8018e0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  8018e4:	e0bffe17 	ldw	r2,-8(fp)
  8018e8:	10800d03 	ldbu	r2,52(r2)
  8018ec:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  8018f0:	e0bffe17 	ldw	r2,-8(fp)
  8018f4:	10800d83 	ldbu	r2,54(r2)
  8018f8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  8018fc:	e0bffe17 	ldw	r2,-8(fp)
  801900:	10800d43 	ldbu	r2,53(r2)
  801904:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  801908:	e0bfff17 	ldw	r2,-4(fp)
  80190c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  801910:	e0bffb17 	ldw	r2,-20(fp)
  801914:	10800017 	ldw	r2,0(r2)
  801918:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80191c:	00002506 	br	8019b4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  801920:	e0bffd03 	ldbu	r2,-12(fp)
  801924:	e0fffd03 	ldbu	r3,-12(fp)
  801928:	e13ffc17 	ldw	r4,-16(fp)
  80192c:	20c7883a 	add	r3,r4,r3
  801930:	18c002c4 	addi	r3,r3,11
  801934:	18c00003 	ldbu	r3,0(r3)
  801938:	1809883a 	mov	r4,r3
  80193c:	e0fffd83 	ldbu	r3,-10(fp)
  801940:	00c6303a 	nor	r3,zero,r3
  801944:	20c6703a 	and	r3,r4,r3
  801948:	1809883a 	mov	r4,r3
  80194c:	e0fffc17 	ldw	r3,-16(fp)
  801950:	1885883a 	add	r2,r3,r2
  801954:	108002c4 	addi	r2,r2,11
  801958:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80195c:	e0bffd03 	ldbu	r2,-12(fp)
  801960:	e0fffc17 	ldw	r3,-16(fp)
  801964:	1885883a 	add	r2,r3,r2
  801968:	108002c4 	addi	r2,r2,11
  80196c:	10800003 	ldbu	r2,0(r2)
  801970:	10803fcc 	andi	r2,r2,255
  801974:	1000091e 	bne	r2,zero,80199c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  801978:	e0bffc17 	ldw	r2,-16(fp)
  80197c:	10800283 	ldbu	r2,10(r2)
  801980:	1007883a 	mov	r3,r2
  801984:	e0bffd43 	ldbu	r2,-11(fp)
  801988:	0084303a 	nor	r2,zero,r2
  80198c:	1884703a 	and	r2,r3,r2
  801990:	1007883a 	mov	r3,r2
  801994:	e0bffc17 	ldw	r2,-16(fp)
  801998:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80199c:	e0bffb17 	ldw	r2,-20(fp)
  8019a0:	10800104 	addi	r2,r2,4
  8019a4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  8019a8:	e0bffb17 	ldw	r2,-20(fp)
  8019ac:	10800017 	ldw	r2,0(r2)
  8019b0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8019b4:	e0bffc17 	ldw	r2,-16(fp)
  8019b8:	103fd91e 	bne	r2,zero,801920 <__alt_mem_epcs_flash_controller_0+0xff7f8920>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  8019bc:	0001883a 	nop
  8019c0:	e037883a 	mov	sp,fp
  8019c4:	df000017 	ldw	fp,0(sp)
  8019c8:	dec00104 	addi	sp,sp,4
  8019cc:	f800283a 	ret

008019d0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  8019d0:	defffc04 	addi	sp,sp,-16
  8019d4:	df000315 	stw	fp,12(sp)
  8019d8:	df000304 	addi	fp,sp,12
  8019dc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  8019e0:	e0bfff17 	ldw	r2,-4(fp)
  8019e4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  8019e8:	e0bfff17 	ldw	r2,-4(fp)
  8019ec:	108002c4 	addi	r2,r2,11
  8019f0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8019f4:	e03ffe05 	stb	zero,-8(fp)
  8019f8:	00000706 	br	801a18 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  8019fc:	e0bffd17 	ldw	r2,-12(fp)
  801a00:	10c00044 	addi	r3,r2,1
  801a04:	e0fffd15 	stw	r3,-12(fp)
  801a08:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  801a0c:	e0bffe03 	ldbu	r2,-8(fp)
  801a10:	10800044 	addi	r2,r2,1
  801a14:	e0bffe05 	stb	r2,-8(fp)
  801a18:	e0bffe03 	ldbu	r2,-8(fp)
  801a1c:	108000f0 	cmpltui	r2,r2,3
  801a20:	103ff61e 	bne	r2,zero,8019fc <__alt_mem_epcs_flash_controller_0+0xff7f89fc>
        *ptbl++ = 0;
    }
}
  801a24:	0001883a 	nop
  801a28:	e037883a 	mov	sp,fp
  801a2c:	df000017 	ldw	fp,0(sp)
  801a30:	dec00104 	addi	sp,sp,4
  801a34:	f800283a 	ret

00801a38 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  801a38:	defffb04 	addi	sp,sp,-20
  801a3c:	dfc00415 	stw	ra,16(sp)
  801a40:	df000315 	stw	fp,12(sp)
  801a44:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  801a48:	0142d004 	movi	r5,2880
  801a4c:	01002074 	movhi	r4,129
  801a50:	21191b04 	addi	r4,r4,25708
  801a54:	0801db00 	call	801db0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  801a58:	00802074 	movhi	r2,129
  801a5c:	10991b04 	addi	r2,r2,25708
  801a60:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  801a64:	00802074 	movhi	r2,129
  801a68:	10992704 	addi	r2,r2,25756
  801a6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  801a70:	e03ffd0d 	sth	zero,-12(fp)
  801a74:	00001306 	br	801ac4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  801a78:	e0bffe17 	ldw	r2,-8(fp)
  801a7c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  801a80:	e0bffe17 	ldw	r2,-8(fp)
  801a84:	e0ffff17 	ldw	r3,-4(fp)
  801a88:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  801a8c:	e0bffe17 	ldw	r2,-8(fp)
  801a90:	00c00fc4 	movi	r3,63
  801a94:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  801a98:	e0bffe17 	ldw	r2,-8(fp)
  801a9c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  801aa0:	e0bffe17 	ldw	r2,-8(fp)
  801aa4:	10800c04 	addi	r2,r2,48
  801aa8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  801aac:	e0bfff17 	ldw	r2,-4(fp)
  801ab0:	10800c04 	addi	r2,r2,48
  801ab4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  801ab8:	e0bffd0b 	ldhu	r2,-12(fp)
  801abc:	10800044 	addi	r2,r2,1
  801ac0:	e0bffd0d 	sth	r2,-12(fp)
  801ac4:	e0bffd0b 	ldhu	r2,-12(fp)
  801ac8:	10800ef0 	cmpltui	r2,r2,59
  801acc:	103fea1e 	bne	r2,zero,801a78 <__alt_mem_epcs_flash_controller_0+0xff7f8a78>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  801ad0:	e0bffe17 	ldw	r2,-8(fp)
  801ad4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  801ad8:	e0bffe17 	ldw	r2,-8(fp)
  801adc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  801ae0:	e0bffe17 	ldw	r2,-8(fp)
  801ae4:	00c00fc4 	movi	r3,63
  801ae8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  801aec:	e0bffe17 	ldw	r2,-8(fp)
  801af0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  801af4:	00802074 	movhi	r2,129
  801af8:	10991b04 	addi	r2,r2,25708
  801afc:	d0a04015 	stw	r2,-32512(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  801b00:	0001883a 	nop
  801b04:	e037883a 	mov	sp,fp
  801b08:	dfc00117 	ldw	ra,4(sp)
  801b0c:	df000017 	ldw	fp,0(sp)
  801b10:	dec00204 	addi	sp,sp,8
  801b14:	f800283a 	ret

00801b18 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  801b18:	deffff04 	addi	sp,sp,-4
  801b1c:	df000015 	stw	fp,0(sp)
  801b20:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  801b24:	d0204315 	stw	zero,-32500(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  801b28:	d0204105 	stb	zero,-32508(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  801b2c:	d0203305 	stb	zero,-32564(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  801b30:	d0203b45 	stb	zero,-32531(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  801b34:	d0203345 	stb	zero,-32563(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  801b38:	d0203815 	stw	zero,-32544(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  801b3c:	d0203415 	stw	zero,-32560(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  801b40:	d0204615 	stw	zero,-32488(gp)
    OSIdleCtrMax  = 0L;
  801b44:	d0203915 	stw	zero,-32540(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  801b48:	d0204505 	stb	zero,-32492(gp)
#endif
}
  801b4c:	0001883a 	nop
  801b50:	e037883a 	mov	sp,fp
  801b54:	df000017 	ldw	fp,0(sp)
  801b58:	dec00104 	addi	sp,sp,4
  801b5c:	f800283a 	ret

00801b60 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  801b60:	defffd04 	addi	sp,sp,-12
  801b64:	df000215 	stw	fp,8(sp)
  801b68:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  801b6c:	d0203f05 	stb	zero,-32516(gp)
    prdytbl       = &OSRdyTbl[0];
  801b70:	d0a03f44 	addi	r2,gp,-32515
  801b74:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  801b78:	e03ffe05 	stb	zero,-8(fp)
  801b7c:	00000706 	br	801b9c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  801b80:	e0bfff17 	ldw	r2,-4(fp)
  801b84:	10c00044 	addi	r3,r2,1
  801b88:	e0ffff15 	stw	r3,-4(fp)
  801b8c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  801b90:	e0bffe03 	ldbu	r2,-8(fp)
  801b94:	10800044 	addi	r2,r2,1
  801b98:	e0bffe05 	stb	r2,-8(fp)
  801b9c:	e0bffe03 	ldbu	r2,-8(fp)
  801ba0:	108000f0 	cmpltui	r2,r2,3
  801ba4:	103ff61e 	bne	r2,zero,801b80 <__alt_mem_epcs_flash_controller_0+0xff7f8b80>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  801ba8:	d0203545 	stb	zero,-32555(gp)
    OSPrioHighRdy = 0;
  801bac:	d0203505 	stb	zero,-32556(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  801bb0:	d0203d15 	stw	zero,-32524(gp)
    OSTCBCur      = (OS_TCB *)0;
  801bb4:	d0204215 	stw	zero,-32504(gp)
}
  801bb8:	0001883a 	nop
  801bbc:	e037883a 	mov	sp,fp
  801bc0:	df000017 	ldw	fp,0(sp)
  801bc4:	dec00104 	addi	sp,sp,4
  801bc8:	f800283a 	ret

00801bcc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  801bcc:	defff804 	addi	sp,sp,-32
  801bd0:	dfc00715 	stw	ra,28(sp)
  801bd4:	df000615 	stw	fp,24(sp)
  801bd8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  801bdc:	008000c4 	movi	r2,3
  801be0:	d8800415 	stw	r2,16(sp)
  801be4:	d8000315 	stw	zero,12(sp)
  801be8:	00808004 	movi	r2,512
  801bec:	d8800215 	stw	r2,8(sp)
  801bf0:	00802074 	movhi	r2,129
  801bf4:	10971b04 	addi	r2,r2,23660
  801bf8:	d8800115 	stw	r2,4(sp)
  801bfc:	00bfffd4 	movui	r2,65535
  801c00:	d8800015 	stw	r2,0(sp)
  801c04:	01c00504 	movi	r7,20
  801c08:	01802074 	movhi	r6,129
  801c0c:	31991a04 	addi	r6,r6,25704
  801c10:	000b883a 	mov	r5,zero
  801c14:	01002034 	movhi	r4,128
  801c18:	21081e04 	addi	r4,r4,8312
  801c1c:	08067440 	call	806744 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  801c20:	e1bfff04 	addi	r6,fp,-4
  801c24:	01402074 	movhi	r5,129
  801c28:	29722304 	addi	r5,r5,-14196
  801c2c:	01000504 	movi	r4,20
  801c30:	0806f540 	call	806f54 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  801c34:	0001883a 	nop
  801c38:	e037883a 	mov	sp,fp
  801c3c:	dfc00117 	ldw	ra,4(sp)
  801c40:	df000017 	ldw	fp,0(sp)
  801c44:	dec00204 	addi	sp,sp,8
  801c48:	f800283a 	ret

00801c4c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  801c4c:	defff804 	addi	sp,sp,-32
  801c50:	dfc00715 	stw	ra,28(sp)
  801c54:	df000615 	stw	fp,24(sp)
  801c58:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  801c5c:	008000c4 	movi	r2,3
  801c60:	d8800415 	stw	r2,16(sp)
  801c64:	d8000315 	stw	zero,12(sp)
  801c68:	00808004 	movi	r2,512
  801c6c:	d8800215 	stw	r2,8(sp)
  801c70:	00802074 	movhi	r2,129
  801c74:	1094a304 	addi	r2,r2,21132
  801c78:	d8800115 	stw	r2,4(sp)
  801c7c:	00bfff94 	movui	r2,65534
  801c80:	d8800015 	stw	r2,0(sp)
  801c84:	01c004c4 	movi	r7,19
  801c88:	01802074 	movhi	r6,129
  801c8c:	3196a204 	addi	r6,r6,23176
  801c90:	000b883a 	mov	r5,zero
  801c94:	01002034 	movhi	r4,128
  801c98:	21083504 	addi	r4,r4,8404
  801c9c:	08067440 	call	806744 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  801ca0:	e1bfff04 	addi	r6,fp,-4
  801ca4:	01402074 	movhi	r5,129
  801ca8:	29722704 	addi	r5,r5,-14180
  801cac:	010004c4 	movi	r4,19
  801cb0:	0806f540 	call	806f54 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  801cb4:	0001883a 	nop
  801cb8:	e037883a 	mov	sp,fp
  801cbc:	dfc00117 	ldw	ra,4(sp)
  801cc0:	df000017 	ldw	fp,0(sp)
  801cc4:	dec00204 	addi	sp,sp,8
  801cc8:	f800283a 	ret

00801ccc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  801ccc:	defffb04 	addi	sp,sp,-20
  801cd0:	dfc00415 	stw	ra,16(sp)
  801cd4:	df000315 	stw	fp,12(sp)
  801cd8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  801cdc:	01414404 	movi	r5,1296
  801ce0:	01002074 	movhi	r4,129
  801ce4:	211beb04 	addi	r4,r4,28588
  801ce8:	0801db00 	call	801db0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  801cec:	01401504 	movi	r5,84
  801cf0:	01002074 	movhi	r4,129
  801cf4:	211d2f04 	addi	r4,r4,29884
  801cf8:	0801db00 	call	801db0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  801cfc:	00802074 	movhi	r2,129
  801d00:	109beb04 	addi	r2,r2,28588
  801d04:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  801d08:	00802074 	movhi	r2,129
  801d0c:	109c0604 	addi	r2,r2,28696
  801d10:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  801d14:	e03ffd05 	stb	zero,-12(fp)
  801d18:	00001106 	br	801d60 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  801d1c:	e0bffe17 	ldw	r2,-8(fp)
  801d20:	e0ffff17 	ldw	r3,-4(fp)
  801d24:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  801d28:	e0bffe17 	ldw	r2,-8(fp)
  801d2c:	00c00fc4 	movi	r3,63
  801d30:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  801d34:	e0bffe17 	ldw	r2,-8(fp)
  801d38:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  801d3c:	e0bffe17 	ldw	r2,-8(fp)
  801d40:	10801b04 	addi	r2,r2,108
  801d44:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  801d48:	e0bfff17 	ldw	r2,-4(fp)
  801d4c:	10801b04 	addi	r2,r2,108
  801d50:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  801d54:	e0bffd03 	ldbu	r2,-12(fp)
  801d58:	10800044 	addi	r2,r2,1
  801d5c:	e0bffd05 	stb	r2,-12(fp)
  801d60:	e0bffd03 	ldbu	r2,-12(fp)
  801d64:	108002f0 	cmpltui	r2,r2,11
  801d68:	103fec1e 	bne	r2,zero,801d1c <__alt_mem_epcs_flash_controller_0+0xff7f8d1c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  801d6c:	e0bffe17 	ldw	r2,-8(fp)
  801d70:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  801d74:	e0bffe17 	ldw	r2,-8(fp)
  801d78:	00c00fc4 	movi	r3,63
  801d7c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  801d80:	e0bffe17 	ldw	r2,-8(fp)
  801d84:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  801d88:	d0203615 	stw	zero,-32552(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  801d8c:	00802074 	movhi	r2,129
  801d90:	109beb04 	addi	r2,r2,28588
  801d94:	d0a03a15 	stw	r2,-32536(gp)
}
  801d98:	0001883a 	nop
  801d9c:	e037883a 	mov	sp,fp
  801da0:	dfc00117 	ldw	ra,4(sp)
  801da4:	df000017 	ldw	fp,0(sp)
  801da8:	dec00204 	addi	sp,sp,8
  801dac:	f800283a 	ret

00801db0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  801db0:	defffd04 	addi	sp,sp,-12
  801db4:	df000215 	stw	fp,8(sp)
  801db8:	df000204 	addi	fp,sp,8
  801dbc:	e13ffe15 	stw	r4,-8(fp)
  801dc0:	2805883a 	mov	r2,r5
  801dc4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  801dc8:	00000706 	br	801de8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  801dcc:	e0bffe17 	ldw	r2,-8(fp)
  801dd0:	10c00044 	addi	r3,r2,1
  801dd4:	e0fffe15 	stw	r3,-8(fp)
  801dd8:	10000005 	stb	zero,0(r2)
        size--;
  801ddc:	e0bfff0b 	ldhu	r2,-4(fp)
  801de0:	10bfffc4 	addi	r2,r2,-1
  801de4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  801de8:	e0bfff0b 	ldhu	r2,-4(fp)
  801dec:	103ff71e 	bne	r2,zero,801dcc <__alt_mem_epcs_flash_controller_0+0xff7f8dcc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  801df0:	0001883a 	nop
  801df4:	e037883a 	mov	sp,fp
  801df8:	df000017 	ldw	fp,0(sp)
  801dfc:	dec00104 	addi	sp,sp,4
  801e00:	f800283a 	ret

00801e04 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  801e04:	defffc04 	addi	sp,sp,-16
  801e08:	df000315 	stw	fp,12(sp)
  801e0c:	df000304 	addi	fp,sp,12
  801e10:	e13ffd15 	stw	r4,-12(fp)
  801e14:	e17ffe15 	stw	r5,-8(fp)
  801e18:	3005883a 	mov	r2,r6
  801e1c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  801e20:	00000b06 	br	801e50 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  801e24:	e0bffd17 	ldw	r2,-12(fp)
  801e28:	10c00044 	addi	r3,r2,1
  801e2c:	e0fffd15 	stw	r3,-12(fp)
  801e30:	e0fffe17 	ldw	r3,-8(fp)
  801e34:	19000044 	addi	r4,r3,1
  801e38:	e13ffe15 	stw	r4,-8(fp)
  801e3c:	18c00003 	ldbu	r3,0(r3)
  801e40:	10c00005 	stb	r3,0(r2)
        size--;
  801e44:	e0bfff0b 	ldhu	r2,-4(fp)
  801e48:	10bfffc4 	addi	r2,r2,-1
  801e4c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  801e50:	e0bfff0b 	ldhu	r2,-4(fp)
  801e54:	103ff31e 	bne	r2,zero,801e24 <__alt_mem_epcs_flash_controller_0+0xff7f8e24>
        *pdest++ = *psrc++;
        size--;
    }
}
  801e58:	0001883a 	nop
  801e5c:	e037883a 	mov	sp,fp
  801e60:	df000017 	ldw	fp,0(sp)
  801e64:	dec00104 	addi	sp,sp,4
  801e68:	f800283a 	ret

00801e6c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  801e6c:	defffb04 	addi	sp,sp,-20
  801e70:	dfc00415 	stw	ra,16(sp)
  801e74:	df000315 	stw	fp,12(sp)
  801e78:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  801e7c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801e80:	0005303a 	rdctl	r2,status
  801e84:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801e88:	e0ffff17 	ldw	r3,-4(fp)
  801e8c:	00bfff84 	movi	r2,-2
  801e90:	1884703a 	and	r2,r3,r2
  801e94:	1001703a 	wrctl	status,r2
  
  return context;
  801e98:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  801e9c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  801ea0:	d0a04103 	ldbu	r2,-32508(gp)
  801ea4:	10803fcc 	andi	r2,r2,255
  801ea8:	10001a1e 	bne	r2,zero,801f14 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  801eac:	d0a03303 	ldbu	r2,-32564(gp)
  801eb0:	10803fcc 	andi	r2,r2,255
  801eb4:	1000171e 	bne	r2,zero,801f14 <OS_Sched+0xa8>
            OS_SchedNew();
  801eb8:	0801f3c0 	call	801f3c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  801ebc:	d0e03503 	ldbu	r3,-32556(gp)
  801ec0:	d0a03543 	ldbu	r2,-32555(gp)
  801ec4:	18c03fcc 	andi	r3,r3,255
  801ec8:	10803fcc 	andi	r2,r2,255
  801ecc:	18801126 	beq	r3,r2,801f14 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  801ed0:	d0a03503 	ldbu	r2,-32556(gp)
  801ed4:	10c03fcc 	andi	r3,r2,255
  801ed8:	00802074 	movhi	r2,129
  801edc:	109d2f04 	addi	r2,r2,29884
  801ee0:	18c7883a 	add	r3,r3,r3
  801ee4:	18c7883a 	add	r3,r3,r3
  801ee8:	10c5883a 	add	r2,r2,r3
  801eec:	10800017 	ldw	r2,0(r2)
  801ef0:	d0a03d15 	stw	r2,-32524(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  801ef4:	d0a03d17 	ldw	r2,-32524(gp)
  801ef8:	10c00e17 	ldw	r3,56(r2)
  801efc:	18c00044 	addi	r3,r3,1
  801f00:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  801f04:	d0a03817 	ldw	r2,-32544(gp)
  801f08:	10800044 	addi	r2,r2,1
  801f0c:	d0a03815 	stw	r2,-32544(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  801f10:	080b6840 	call	80b684 <OSCtxSw>
  801f14:	e0bffd17 	ldw	r2,-12(fp)
  801f18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801f1c:	e0bffe17 	ldw	r2,-8(fp)
  801f20:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  801f24:	0001883a 	nop
  801f28:	e037883a 	mov	sp,fp
  801f2c:	dfc00117 	ldw	ra,4(sp)
  801f30:	df000017 	ldw	fp,0(sp)
  801f34:	dec00204 	addi	sp,sp,8
  801f38:	f800283a 	ret

00801f3c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  801f3c:	defffe04 	addi	sp,sp,-8
  801f40:	df000115 	stw	fp,4(sp)
  801f44:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  801f48:	d0a03f03 	ldbu	r2,-32516(gp)
  801f4c:	10c03fcc 	andi	r3,r2,255
  801f50:	00802074 	movhi	r2,129
  801f54:	10b1e304 	addi	r2,r2,-14452
  801f58:	10c5883a 	add	r2,r2,r3
  801f5c:	10800003 	ldbu	r2,0(r2)
  801f60:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  801f64:	e0bfff03 	ldbu	r2,-4(fp)
  801f68:	100490fa 	slli	r2,r2,3
  801f6c:	1009883a 	mov	r4,r2
  801f70:	e0ffff03 	ldbu	r3,-4(fp)
  801f74:	d0a03f44 	addi	r2,gp,-32515
  801f78:	1885883a 	add	r2,r3,r2
  801f7c:	10800003 	ldbu	r2,0(r2)
  801f80:	10c03fcc 	andi	r3,r2,255
  801f84:	00802074 	movhi	r2,129
  801f88:	10b1e304 	addi	r2,r2,-14452
  801f8c:	10c5883a 	add	r2,r2,r3
  801f90:	10800003 	ldbu	r2,0(r2)
  801f94:	2085883a 	add	r2,r4,r2
  801f98:	d0a03505 	stb	r2,-32556(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  801f9c:	0001883a 	nop
  801fa0:	e037883a 	mov	sp,fp
  801fa4:	df000017 	ldw	fp,0(sp)
  801fa8:	dec00104 	addi	sp,sp,4
  801fac:	f800283a 	ret

00801fb0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  801fb0:	defffc04 	addi	sp,sp,-16
  801fb4:	df000315 	stw	fp,12(sp)
  801fb8:	df000304 	addi	fp,sp,12
  801fbc:	e13ffe15 	stw	r4,-8(fp)
  801fc0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  801fc4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  801fc8:	00000b06 	br	801ff8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  801fcc:	e0bffe17 	ldw	r2,-8(fp)
  801fd0:	10c00044 	addi	r3,r2,1
  801fd4:	e0fffe15 	stw	r3,-8(fp)
  801fd8:	e0ffff17 	ldw	r3,-4(fp)
  801fdc:	19000044 	addi	r4,r3,1
  801fe0:	e13fff15 	stw	r4,-4(fp)
  801fe4:	18c00003 	ldbu	r3,0(r3)
  801fe8:	10c00005 	stb	r3,0(r2)
        len++;
  801fec:	e0bffd03 	ldbu	r2,-12(fp)
  801ff0:	10800044 	addi	r2,r2,1
  801ff4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  801ff8:	e0bfff17 	ldw	r2,-4(fp)
  801ffc:	10800003 	ldbu	r2,0(r2)
  802000:	10803fcc 	andi	r2,r2,255
  802004:	103ff11e 	bne	r2,zero,801fcc <__alt_mem_epcs_flash_controller_0+0xff7f8fcc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  802008:	e0bffe17 	ldw	r2,-8(fp)
  80200c:	10000005 	stb	zero,0(r2)
    return (len);
  802010:	e0bffd03 	ldbu	r2,-12(fp)
}
  802014:	e037883a 	mov	sp,fp
  802018:	df000017 	ldw	fp,0(sp)
  80201c:	dec00104 	addi	sp,sp,4
  802020:	f800283a 	ret

00802024 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  802024:	defffd04 	addi	sp,sp,-12
  802028:	df000215 	stw	fp,8(sp)
  80202c:	df000204 	addi	fp,sp,8
  802030:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  802034:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  802038:	00000606 	br	802054 <OS_StrLen+0x30>
        psrc++;
  80203c:	e0bfff17 	ldw	r2,-4(fp)
  802040:	10800044 	addi	r2,r2,1
  802044:	e0bfff15 	stw	r2,-4(fp)
        len++;
  802048:	e0bffe03 	ldbu	r2,-8(fp)
  80204c:	10800044 	addi	r2,r2,1
  802050:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  802054:	e0bfff17 	ldw	r2,-4(fp)
  802058:	10800003 	ldbu	r2,0(r2)
  80205c:	10803fcc 	andi	r2,r2,255
  802060:	103ff61e 	bne	r2,zero,80203c <__alt_mem_epcs_flash_controller_0+0xff7f903c>
        psrc++;
        len++;
    }
    return (len);
  802064:	e0bffe03 	ldbu	r2,-8(fp)
}
  802068:	e037883a 	mov	sp,fp
  80206c:	df000017 	ldw	fp,0(sp)
  802070:	dec00104 	addi	sp,sp,4
  802074:	f800283a 	ret

00802078 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  802078:	defffa04 	addi	sp,sp,-24
  80207c:	dfc00515 	stw	ra,20(sp)
  802080:	df000415 	stw	fp,16(sp)
  802084:	df000404 	addi	fp,sp,16
  802088:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80208c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802090:	0005303a 	rdctl	r2,status
  802094:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802098:	e0fffd17 	ldw	r3,-12(fp)
  80209c:	00bfff84 	movi	r2,-2
  8020a0:	1884703a 	and	r2,r3,r2
  8020a4:	1001703a 	wrctl	status,r2
  
  return context;
  8020a8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  8020ac:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  8020b0:	d0a03417 	ldw	r2,-32560(gp)
  8020b4:	10800044 	addi	r2,r2,1
  8020b8:	d0a03415 	stw	r2,-32560(gp)
  8020bc:	e0bffc17 	ldw	r2,-16(fp)
  8020c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8020c4:	e0bffe17 	ldw	r2,-8(fp)
  8020c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  8020cc:	080b9980 	call	80b998 <OSTaskIdleHook>
    }
  8020d0:	003fef06 	br	802090 <__alt_mem_epcs_flash_controller_0+0xff7f9090>

008020d4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  8020d4:	defffa04 	addi	sp,sp,-24
  8020d8:	dfc00515 	stw	ra,20(sp)
  8020dc:	df000415 	stw	fp,16(sp)
  8020e0:	df000404 	addi	fp,sp,16
  8020e4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8020e8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8020ec:	00000206 	br	8020f8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  8020f0:	01003204 	movi	r4,200
  8020f4:	08078140 	call	807814 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8020f8:	d0a04503 	ldbu	r2,-32492(gp)
  8020fc:	10803fcc 	andi	r2,r2,255
  802100:	103ffb26 	beq	r2,zero,8020f0 <__alt_mem_epcs_flash_controller_0+0xff7f90f0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  802104:	d0a03917 	ldw	r2,-32540(gp)
  802108:	01401904 	movi	r5,100
  80210c:	1009883a 	mov	r4,r2
  802110:	080c6600 	call	80c660 <__udivsi3>
  802114:	d0a03915 	stw	r2,-32540(gp)
    if (OSIdleCtrMax == 0L) {
  802118:	d0a03917 	ldw	r2,-32540(gp)
  80211c:	1000031e 	bne	r2,zero,80212c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  802120:	d0203b05 	stb	zero,-32532(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  802124:	01003fc4 	movi	r4,255
  802128:	080749c0 	call	80749c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80212c:	0005303a 	rdctl	r2,status
  802130:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802134:	e0fffd17 	ldw	r3,-12(fp)
  802138:	00bfff84 	movi	r2,-2
  80213c:	1884703a 	and	r2,r3,r2
  802140:	1001703a 	wrctl	status,r2
  
  return context;
  802144:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  802148:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80214c:	d0a03417 	ldw	r2,-32560(gp)
  802150:	d0a04615 	stw	r2,-32488(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  802154:	d0203415 	stw	zero,-32560(gp)
  802158:	e0bffc17 	ldw	r2,-16(fp)
  80215c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802160:	e0bffe17 	ldw	r2,-8(fp)
  802164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  802168:	d0a04617 	ldw	r2,-32488(gp)
  80216c:	d0e03917 	ldw	r3,-32540(gp)
  802170:	180b883a 	mov	r5,r3
  802174:	1009883a 	mov	r4,r2
  802178:	080c6600 	call	80c660 <__udivsi3>
  80217c:	1007883a 	mov	r3,r2
  802180:	00801904 	movi	r2,100
  802184:	10c5c83a 	sub	r2,r2,r3
  802188:	d0a03b05 	stb	r2,-32532(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80218c:	080b9180 	call	80b918 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  802190:	08021a00 	call	8021a0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  802194:	01001904 	movi	r4,100
  802198:	08078140 	call	807814 <OSTimeDly>
    }
  80219c:	003fe306 	br	80212c <__alt_mem_epcs_flash_controller_0+0xff7f912c>

008021a0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  8021a0:	defffa04 	addi	sp,sp,-24
  8021a4:	dfc00515 	stw	ra,20(sp)
  8021a8:	df000415 	stw	fp,16(sp)
  8021ac:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8021b0:	e03ffc05 	stb	zero,-16(fp)
  8021b4:	00002406 	br	802248 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  8021b8:	e0bffc03 	ldbu	r2,-16(fp)
  8021bc:	e0fffe04 	addi	r3,fp,-8
  8021c0:	180b883a 	mov	r5,r3
  8021c4:	1009883a 	mov	r4,r2
  8021c8:	08072dc0 	call	8072dc <OSTaskStkChk>
  8021cc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  8021d0:	e0bffc43 	ldbu	r2,-15(fp)
  8021d4:	1000191e 	bne	r2,zero,80223c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  8021d8:	e0fffc03 	ldbu	r3,-16(fp)
  8021dc:	00802074 	movhi	r2,129
  8021e0:	109d2f04 	addi	r2,r2,29884
  8021e4:	18c7883a 	add	r3,r3,r3
  8021e8:	18c7883a 	add	r3,r3,r3
  8021ec:	10c5883a 	add	r2,r2,r3
  8021f0:	10800017 	ldw	r2,0(r2)
  8021f4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  8021f8:	e0bffd17 	ldw	r2,-12(fp)
  8021fc:	10000f26 	beq	r2,zero,80223c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  802200:	e0bffd17 	ldw	r2,-12(fp)
  802204:	10800060 	cmpeqi	r2,r2,1
  802208:	10000c1e 	bne	r2,zero,80223c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80220c:	e0bffd17 	ldw	r2,-12(fp)
  802210:	10c00217 	ldw	r3,8(r2)
  802214:	e0bffd17 	ldw	r2,-12(fp)
  802218:	10800317 	ldw	r2,12(r2)
  80221c:	1085883a 	add	r2,r2,r2
  802220:	1085883a 	add	r2,r2,r2
  802224:	1887883a 	add	r3,r3,r2
  802228:	e0bffd17 	ldw	r2,-12(fp)
  80222c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  802230:	e0ffff17 	ldw	r3,-4(fp)
  802234:	e0bffd17 	ldw	r2,-12(fp)
  802238:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80223c:	e0bffc03 	ldbu	r2,-16(fp)
  802240:	10800044 	addi	r2,r2,1
  802244:	e0bffc05 	stb	r2,-16(fp)
  802248:	e0bffc03 	ldbu	r2,-16(fp)
  80224c:	10800570 	cmpltui	r2,r2,21
  802250:	103fd91e 	bne	r2,zero,8021b8 <__alt_mem_epcs_flash_controller_0+0xff7f91b8>
#endif
                }
            }
        }
    }
}
  802254:	0001883a 	nop
  802258:	e037883a 	mov	sp,fp
  80225c:	dfc00117 	ldw	ra,4(sp)
  802260:	df000017 	ldw	fp,0(sp)
  802264:	dec00204 	addi	sp,sp,8
  802268:	f800283a 	ret

0080226c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80226c:	defff204 	addi	sp,sp,-56
  802270:	dfc00d15 	stw	ra,52(sp)
  802274:	df000c15 	stw	fp,48(sp)
  802278:	df000c04 	addi	fp,sp,48
  80227c:	e17ffc15 	stw	r5,-16(fp)
  802280:	e1bffd15 	stw	r6,-12(fp)
  802284:	3807883a 	mov	r3,r7
  802288:	e0800417 	ldw	r2,16(fp)
  80228c:	e13ffb05 	stb	r4,-20(fp)
  802290:	e0fffe0d 	sth	r3,-8(fp)
  802294:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  802298:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80229c:	0005303a 	rdctl	r2,status
  8022a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8022a4:	e0fffa17 	ldw	r3,-24(fp)
  8022a8:	00bfff84 	movi	r2,-2
  8022ac:	1884703a 	and	r2,r3,r2
  8022b0:	1001703a 	wrctl	status,r2
  
  return context;
  8022b4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  8022b8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  8022bc:	d0a03a17 	ldw	r2,-32536(gp)
  8022c0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  8022c4:	e0bff617 	ldw	r2,-40(fp)
  8022c8:	10009326 	beq	r2,zero,802518 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  8022cc:	e0bff617 	ldw	r2,-40(fp)
  8022d0:	10800517 	ldw	r2,20(r2)
  8022d4:	d0a03a15 	stw	r2,-32536(gp)
  8022d8:	e0bff417 	ldw	r2,-48(fp)
  8022dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8022e0:	e0bff817 	ldw	r2,-32(fp)
  8022e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  8022e8:	e0bff617 	ldw	r2,-40(fp)
  8022ec:	e0fffc17 	ldw	r3,-16(fp)
  8022f0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  8022f4:	e0bff617 	ldw	r2,-40(fp)
  8022f8:	e0fffb03 	ldbu	r3,-20(fp)
  8022fc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  802300:	e0bff617 	ldw	r2,-40(fp)
  802304:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  802308:	e0bff617 	ldw	r2,-40(fp)
  80230c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  802310:	e0bff617 	ldw	r2,-40(fp)
  802314:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  802318:	e0bff617 	ldw	r2,-40(fp)
  80231c:	e0c00317 	ldw	r3,12(fp)
  802320:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  802324:	e0bff617 	ldw	r2,-40(fp)
  802328:	e0c00217 	ldw	r3,8(fp)
  80232c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  802330:	e0bff617 	ldw	r2,-40(fp)
  802334:	e0fffd17 	ldw	r3,-12(fp)
  802338:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80233c:	e0bff617 	ldw	r2,-40(fp)
  802340:	e0ffff0b 	ldhu	r3,-4(fp)
  802344:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  802348:	e0bff617 	ldw	r2,-40(fp)
  80234c:	e0fffe0b 	ldhu	r3,-8(fp)
  802350:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  802354:	e0bff617 	ldw	r2,-40(fp)
  802358:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80235c:	e0bffb03 	ldbu	r2,-20(fp)
  802360:	1004d0fa 	srli	r2,r2,3
  802364:	1007883a 	mov	r3,r2
  802368:	e0bff617 	ldw	r2,-40(fp)
  80236c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  802370:	e0bffb03 	ldbu	r2,-20(fp)
  802374:	108001cc 	andi	r2,r2,7
  802378:	1007883a 	mov	r3,r2
  80237c:	e0bff617 	ldw	r2,-40(fp)
  802380:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  802384:	e0bff617 	ldw	r2,-40(fp)
  802388:	10800d03 	ldbu	r2,52(r2)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	00c00044 	movi	r3,1
  802394:	1884983a 	sll	r2,r3,r2
  802398:	1007883a 	mov	r3,r2
  80239c:	e0bff617 	ldw	r2,-40(fp)
  8023a0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  8023a4:	e0bff617 	ldw	r2,-40(fp)
  8023a8:	10800cc3 	ldbu	r2,51(r2)
  8023ac:	10803fcc 	andi	r2,r2,255
  8023b0:	00c00044 	movi	r3,1
  8023b4:	1884983a 	sll	r2,r3,r2
  8023b8:	1007883a 	mov	r3,r2
  8023bc:	e0bff617 	ldw	r2,-40(fp)
  8023c0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  8023c4:	e0bff617 	ldw	r2,-40(fp)
  8023c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  8023cc:	e0bff617 	ldw	r2,-40(fp)
  8023d0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  8023d4:	e0bff617 	ldw	r2,-40(fp)
  8023d8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  8023dc:	e0bff617 	ldw	r2,-40(fp)
  8023e0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  8023e4:	e0bff617 	ldw	r2,-40(fp)
  8023e8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  8023ec:	e0bff617 	ldw	r2,-40(fp)
  8023f0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  8023f4:	e0bff617 	ldw	r2,-40(fp)
  8023f8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  8023fc:	e0bff617 	ldw	r2,-40(fp)
  802400:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  802404:	e0bff617 	ldw	r2,-40(fp)
  802408:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80240c:	e0bff617 	ldw	r2,-40(fp)
  802410:	00c00fc4 	movi	r3,63
  802414:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  802418:	e0bff617 	ldw	r2,-40(fp)
  80241c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  802420:	e13ff617 	ldw	r4,-40(fp)
  802424:	080b9b80 	call	80b9b8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  802428:	e13ff617 	ldw	r4,-40(fp)
  80242c:	080b8b00 	call	80b8b0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802430:	0005303a 	rdctl	r2,status
  802434:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802438:	e0fff517 	ldw	r3,-44(fp)
  80243c:	00bfff84 	movi	r2,-2
  802440:	1884703a 	and	r2,r3,r2
  802444:	1001703a 	wrctl	status,r2
  
  return context;
  802448:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80244c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  802450:	e0fffb03 	ldbu	r3,-20(fp)
  802454:	00802074 	movhi	r2,129
  802458:	109d2f04 	addi	r2,r2,29884
  80245c:	18c7883a 	add	r3,r3,r3
  802460:	18c7883a 	add	r3,r3,r3
  802464:	10c5883a 	add	r2,r2,r3
  802468:	e0fff617 	ldw	r3,-40(fp)
  80246c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  802470:	d0e03617 	ldw	r3,-32552(gp)
  802474:	e0bff617 	ldw	r2,-40(fp)
  802478:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80247c:	e0bff617 	ldw	r2,-40(fp)
  802480:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  802484:	d0a03617 	ldw	r2,-32552(gp)
  802488:	10000326 	beq	r2,zero,802498 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  80248c:	d0a03617 	ldw	r2,-32552(gp)
  802490:	e0fff617 	ldw	r3,-40(fp)
  802494:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  802498:	e0bff617 	ldw	r2,-40(fp)
  80249c:	d0a03615 	stw	r2,-32552(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  8024a0:	e0bff617 	ldw	r2,-40(fp)
  8024a4:	10c00d83 	ldbu	r3,54(r2)
  8024a8:	d0a03f03 	ldbu	r2,-32516(gp)
  8024ac:	1884b03a 	or	r2,r3,r2
  8024b0:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8024b4:	e0bff617 	ldw	r2,-40(fp)
  8024b8:	10800d03 	ldbu	r2,52(r2)
  8024bc:	10c03fcc 	andi	r3,r2,255
  8024c0:	e0bff617 	ldw	r2,-40(fp)
  8024c4:	10800d03 	ldbu	r2,52(r2)
  8024c8:	11003fcc 	andi	r4,r2,255
  8024cc:	d0a03f44 	addi	r2,gp,-32515
  8024d0:	2085883a 	add	r2,r4,r2
  8024d4:	11000003 	ldbu	r4,0(r2)
  8024d8:	e0bff617 	ldw	r2,-40(fp)
  8024dc:	10800d43 	ldbu	r2,53(r2)
  8024e0:	2084b03a 	or	r2,r4,r2
  8024e4:	1009883a 	mov	r4,r2
  8024e8:	d0a03f44 	addi	r2,gp,-32515
  8024ec:	1885883a 	add	r2,r3,r2
  8024f0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  8024f4:	d0a03b43 	ldbu	r2,-32531(gp)
  8024f8:	10800044 	addi	r2,r2,1
  8024fc:	d0a03b45 	stb	r2,-32531(gp)
  802500:	e0bff417 	ldw	r2,-48(fp)
  802504:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802508:	e0bff717 	ldw	r2,-36(fp)
  80250c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  802510:	0005883a 	mov	r2,zero
  802514:	00000506 	br	80252c <OS_TCBInit+0x2c0>
  802518:	e0bff417 	ldw	r2,-48(fp)
  80251c:	e0bff915 	stw	r2,-28(fp)
  802520:	e0bff917 	ldw	r2,-28(fp)
  802524:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  802528:	00801084 	movi	r2,66
}
  80252c:	e037883a 	mov	sp,fp
  802530:	dfc00117 	ldw	ra,4(sp)
  802534:	df000017 	ldw	fp,0(sp)
  802538:	dec00204 	addi	sp,sp,8
  80253c:	f800283a 	ret

00802540 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  802540:	defffe04 	addi	sp,sp,-8
  802544:	df000115 	stw	fp,4(sp)
  802548:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80254c:	d0a00204 	addi	r2,gp,-32760
  802550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  802554:	d0a00304 	addi	r2,gp,-32756
  802558:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80255c:	d0a00484 	addi	r2,gp,-32750
  802560:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  802564:	d0a00504 	addi	r2,gp,-32748
  802568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80256c:	d0a00404 	addi	r2,gp,-32752
  802570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  802574:	d0a00584 	addi	r2,gp,-32746
  802578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80257c:	d0a00604 	addi	r2,gp,-32744
  802580:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  802584:	d0a00684 	addi	r2,gp,-32742
  802588:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80258c:	d0a00704 	addi	r2,gp,-32740
  802590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  802594:	d0a00784 	addi	r2,gp,-32738
  802598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80259c:	d0a00804 	addi	r2,gp,-32736
  8025a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  8025a4:	d0a00884 	addi	r2,gp,-32734
  8025a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  8025ac:	d0a00904 	addi	r2,gp,-32732
  8025b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  8025b4:	d0a00984 	addi	r2,gp,-32730
  8025b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  8025bc:	d0a00a04 	addi	r2,gp,-32728
  8025c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  8025c4:	d0a00a84 	addi	r2,gp,-32726
  8025c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  8025cc:	d0a00b04 	addi	r2,gp,-32724
  8025d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  8025d4:	d0a00b84 	addi	r2,gp,-32722
  8025d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  8025dc:	d0a00c04 	addi	r2,gp,-32720
  8025e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  8025e4:	d0a00c84 	addi	r2,gp,-32718
  8025e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  8025ec:	d0a00d04 	addi	r2,gp,-32716
  8025f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  8025f4:	d0a00d84 	addi	r2,gp,-32714
  8025f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  8025fc:	d0a00e04 	addi	r2,gp,-32712
  802600:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  802604:	d0a00e84 	addi	r2,gp,-32710
  802608:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80260c:	d0a00f04 	addi	r2,gp,-32708
  802610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  802614:	d0a00f84 	addi	r2,gp,-32706
  802618:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80261c:	d0a01004 	addi	r2,gp,-32704
  802620:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  802624:	d0a01084 	addi	r2,gp,-32702
  802628:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80262c:	d0a01104 	addi	r2,gp,-32700
  802630:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  802634:	d0a01184 	addi	r2,gp,-32698
  802638:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80263c:	d0a01204 	addi	r2,gp,-32696
  802640:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  802644:	d0a01284 	addi	r2,gp,-32694
  802648:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80264c:	d0a01304 	addi	r2,gp,-32692
  802650:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  802654:	d0a01384 	addi	r2,gp,-32690
  802658:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80265c:	d0a01404 	addi	r2,gp,-32688
  802660:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  802664:	d0a01484 	addi	r2,gp,-32686
  802668:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80266c:	d0a01504 	addi	r2,gp,-32684
  802670:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  802674:	d0a01584 	addi	r2,gp,-32682
  802678:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80267c:	d0a01604 	addi	r2,gp,-32680
  802680:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  802684:	d0a01684 	addi	r2,gp,-32678
  802688:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80268c:	d0a01704 	addi	r2,gp,-32676
  802690:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  802694:	d0a01784 	addi	r2,gp,-32674
  802698:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80269c:	d0a01804 	addi	r2,gp,-32672
  8026a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  8026a4:	d0a01884 	addi	r2,gp,-32670
  8026a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  8026ac:	d0a01904 	addi	r2,gp,-32668
  8026b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  8026b4:	d0a01e04 	addi	r2,gp,-32648
  8026b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  8026bc:	0001883a 	nop
  8026c0:	e037883a 	mov	sp,fp
  8026c4:	df000017 	ldw	fp,0(sp)
  8026c8:	dec00104 	addi	sp,sp,4
  8026cc:	f800283a 	ret

008026d0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  8026d0:	defff204 	addi	sp,sp,-56
  8026d4:	df000d15 	stw	fp,52(sp)
  8026d8:	df000d04 	addi	fp,sp,52
  8026dc:	e13ffc15 	stw	r4,-16(fp)
  8026e0:	2807883a 	mov	r3,r5
  8026e4:	3005883a 	mov	r2,r6
  8026e8:	e1ffff15 	stw	r7,-4(fp)
  8026ec:	e0fffd0d 	sth	r3,-12(fp)
  8026f0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8026f4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8026f8:	e0bfff17 	ldw	r2,-4(fp)
  8026fc:	1000021e 	bne	r2,zero,802708 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  802700:	0005883a 	mov	r2,zero
  802704:	0000b006 	br	8029c8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802708:	e0bffc17 	ldw	r2,-16(fp)
  80270c:	1000051e 	bne	r2,zero,802724 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802710:	e0bfff17 	ldw	r2,-4(fp)
  802714:	00c01b84 	movi	r3,110
  802718:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  80271c:	0005883a 	mov	r2,zero
  802720:	0000a906 	br	8029c8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  802724:	e0bffc17 	ldw	r2,-16(fp)
  802728:	10800003 	ldbu	r2,0(r2)
  80272c:	10803fcc 	andi	r2,r2,255
  802730:	10800160 	cmpeqi	r2,r2,5
  802734:	1000051e 	bne	r2,zero,80274c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  802738:	e0bfff17 	ldw	r2,-4(fp)
  80273c:	00c00044 	movi	r3,1
  802740:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802744:	0005883a 	mov	r2,zero
  802748:	00009f06 	br	8029c8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80274c:	e0fffe03 	ldbu	r3,-8(fp)
  802750:	00bfe004 	movi	r2,-128
  802754:	1884703a 	and	r2,r3,r2
  802758:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80275c:	e0bff503 	ldbu	r2,-44(fp)
  802760:	10000626 	beq	r2,zero,80277c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  802764:	e0bffe03 	ldbu	r2,-8(fp)
  802768:	10801fcc 	andi	r2,r2,127
  80276c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  802770:	00800044 	movi	r2,1
  802774:	e0bff385 	stb	r2,-50(fp)
  802778:	00000106 	br	802780 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  80277c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  802780:	e0bfff17 	ldw	r2,-4(fp)
  802784:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802788:	0005303a 	rdctl	r2,status
  80278c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802790:	e0fffb17 	ldw	r3,-20(fp)
  802794:	00bfff84 	movi	r2,-2
  802798:	1884703a 	and	r2,r3,r2
  80279c:	1001703a 	wrctl	status,r2
  
  return context;
  8027a0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  8027a4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  8027a8:	e0bffe03 	ldbu	r2,-8(fp)
  8027ac:	10c00060 	cmpeqi	r3,r2,1
  8027b0:	18005f1e 	bne	r3,zero,802930 <OSFlagAccept+0x260>
  8027b4:	10c00088 	cmpgei	r3,r2,2
  8027b8:	1800021e 	bne	r3,zero,8027c4 <OSFlagAccept+0xf4>
  8027bc:	10003f26 	beq	r2,zero,8028bc <OSFlagAccept+0x1ec>
  8027c0:	00007706 	br	8029a0 <OSFlagAccept+0x2d0>
  8027c4:	10c000a0 	cmpeqi	r3,r2,2
  8027c8:	1800031e 	bne	r3,zero,8027d8 <OSFlagAccept+0x108>
  8027cc:	108000e0 	cmpeqi	r2,r2,3
  8027d0:	10001e1e 	bne	r2,zero,80284c <OSFlagAccept+0x17c>
  8027d4:	00007206 	br	8029a0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8027d8:	e0bffc17 	ldw	r2,-16(fp)
  8027dc:	10c0020b 	ldhu	r3,8(r2)
  8027e0:	e0bffd0b 	ldhu	r2,-12(fp)
  8027e4:	1884703a 	and	r2,r3,r2
  8027e8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8027ec:	e0fff30b 	ldhu	r3,-52(fp)
  8027f0:	e0bffd0b 	ldhu	r2,-12(fp)
  8027f4:	18800d1e 	bne	r3,r2,80282c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8027f8:	e0bff383 	ldbu	r2,-50(fp)
  8027fc:	10800058 	cmpnei	r2,r2,1
  802800:	10000d1e 	bne	r2,zero,802838 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  802804:	e0bffc17 	ldw	r2,-16(fp)
  802808:	1080020b 	ldhu	r2,8(r2)
  80280c:	1007883a 	mov	r3,r2
  802810:	e0bff30b 	ldhu	r2,-52(fp)
  802814:	0084303a 	nor	r2,zero,r2
  802818:	1884703a 	and	r2,r3,r2
  80281c:	1007883a 	mov	r3,r2
  802820:	e0bffc17 	ldw	r2,-16(fp)
  802824:	10c0020d 	sth	r3,8(r2)
  802828:	00000306 	br	802838 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80282c:	e0bfff17 	ldw	r2,-4(fp)
  802830:	00c01c04 	movi	r3,112
  802834:	10c00005 	stb	r3,0(r2)
  802838:	e0bff417 	ldw	r2,-48(fp)
  80283c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802840:	e0bff617 	ldw	r2,-40(fp)
  802844:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  802848:	00005e06 	br	8029c4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80284c:	e0bffc17 	ldw	r2,-16(fp)
  802850:	10c0020b 	ldhu	r3,8(r2)
  802854:	e0bffd0b 	ldhu	r2,-12(fp)
  802858:	1884703a 	and	r2,r3,r2
  80285c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  802860:	e0bff30b 	ldhu	r2,-52(fp)
  802864:	10000d26 	beq	r2,zero,80289c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802868:	e0bff383 	ldbu	r2,-50(fp)
  80286c:	10800058 	cmpnei	r2,r2,1
  802870:	10000d1e 	bne	r2,zero,8028a8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  802874:	e0bffc17 	ldw	r2,-16(fp)
  802878:	1080020b 	ldhu	r2,8(r2)
  80287c:	1007883a 	mov	r3,r2
  802880:	e0bff30b 	ldhu	r2,-52(fp)
  802884:	0084303a 	nor	r2,zero,r2
  802888:	1884703a 	and	r2,r3,r2
  80288c:	1007883a 	mov	r3,r2
  802890:	e0bffc17 	ldw	r2,-16(fp)
  802894:	10c0020d 	sth	r3,8(r2)
  802898:	00000306 	br	8028a8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80289c:	e0bfff17 	ldw	r2,-4(fp)
  8028a0:	00c01c04 	movi	r3,112
  8028a4:	10c00005 	stb	r3,0(r2)
  8028a8:	e0bff417 	ldw	r2,-48(fp)
  8028ac:	e0bff715 	stw	r2,-36(fp)
  8028b0:	e0bff717 	ldw	r2,-36(fp)
  8028b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8028b8:	00004206 	br	8029c4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	1080020b 	ldhu	r2,8(r2)
  8028c4:	0084303a 	nor	r2,zero,r2
  8028c8:	1007883a 	mov	r3,r2
  8028cc:	e0bffd0b 	ldhu	r2,-12(fp)
  8028d0:	1884703a 	and	r2,r3,r2
  8028d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8028d8:	e0fff30b 	ldhu	r3,-52(fp)
  8028dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8028e0:	18800b1e 	bne	r3,r2,802910 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8028e4:	e0bff383 	ldbu	r2,-50(fp)
  8028e8:	10800058 	cmpnei	r2,r2,1
  8028ec:	10000b1e 	bne	r2,zero,80291c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  8028f0:	e0bffc17 	ldw	r2,-16(fp)
  8028f4:	10c0020b 	ldhu	r3,8(r2)
  8028f8:	e0bff30b 	ldhu	r2,-52(fp)
  8028fc:	1884b03a 	or	r2,r3,r2
  802900:	1007883a 	mov	r3,r2
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10c0020d 	sth	r3,8(r2)
  80290c:	00000306 	br	80291c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802910:	e0bfff17 	ldw	r2,-4(fp)
  802914:	00c01c04 	movi	r3,112
  802918:	10c00005 	stb	r3,0(r2)
  80291c:	e0bff417 	ldw	r2,-48(fp)
  802920:	e0bff815 	stw	r2,-32(fp)
  802924:	e0bff817 	ldw	r2,-32(fp)
  802928:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80292c:	00002506 	br	8029c4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  802930:	e0bffc17 	ldw	r2,-16(fp)
  802934:	1080020b 	ldhu	r2,8(r2)
  802938:	0084303a 	nor	r2,zero,r2
  80293c:	1007883a 	mov	r3,r2
  802940:	e0bffd0b 	ldhu	r2,-12(fp)
  802944:	1884703a 	and	r2,r3,r2
  802948:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80294c:	e0bff30b 	ldhu	r2,-52(fp)
  802950:	10000b26 	beq	r2,zero,802980 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802954:	e0bff383 	ldbu	r2,-50(fp)
  802958:	10800058 	cmpnei	r2,r2,1
  80295c:	10000b1e 	bne	r2,zero,80298c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  802960:	e0bffc17 	ldw	r2,-16(fp)
  802964:	10c0020b 	ldhu	r3,8(r2)
  802968:	e0bff30b 	ldhu	r2,-52(fp)
  80296c:	1884b03a 	or	r2,r3,r2
  802970:	1007883a 	mov	r3,r2
  802974:	e0bffc17 	ldw	r2,-16(fp)
  802978:	10c0020d 	sth	r3,8(r2)
  80297c:	00000306 	br	80298c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802980:	e0bfff17 	ldw	r2,-4(fp)
  802984:	00c01c04 	movi	r3,112
  802988:	10c00005 	stb	r3,0(r2)
  80298c:	e0bff417 	ldw	r2,-48(fp)
  802990:	e0bff915 	stw	r2,-28(fp)
  802994:	e0bff917 	ldw	r2,-28(fp)
  802998:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80299c:	00000906 	br	8029c4 <OSFlagAccept+0x2f4>
  8029a0:	e0bff417 	ldw	r2,-48(fp)
  8029a4:	e0bffa15 	stw	r2,-24(fp)
  8029a8:	e0bffa17 	ldw	r2,-24(fp)
  8029ac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8029b0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  8029b4:	e0bfff17 	ldw	r2,-4(fp)
  8029b8:	00c01bc4 	movi	r3,111
  8029bc:	10c00005 	stb	r3,0(r2)
             break;
  8029c0:	0001883a 	nop
    }
    return (flags_rdy);
  8029c4:	e0bff30b 	ldhu	r2,-52(fp)
}
  8029c8:	e037883a 	mov	sp,fp
  8029cc:	df000017 	ldw	fp,0(sp)
  8029d0:	dec00104 	addi	sp,sp,4
  8029d4:	f800283a 	ret

008029d8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  8029d8:	defff804 	addi	sp,sp,-32
  8029dc:	df000715 	stw	fp,28(sp)
  8029e0:	df000704 	addi	fp,sp,28
  8029e4:	2005883a 	mov	r2,r4
  8029e8:	e17fff15 	stw	r5,-4(fp)
  8029ec:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  8029f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  8029f4:	e0bfff17 	ldw	r2,-4(fp)
  8029f8:	1000021e 	bne	r2,zero,802a04 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  8029fc:	0005883a 	mov	r2,zero
  802a00:	00003306 	br	802ad0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  802a04:	d0a04103 	ldbu	r2,-32508(gp)
  802a08:	10803fcc 	andi	r2,r2,255
  802a0c:	10000526 	beq	r2,zero,802a24 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  802a10:	e0bfff17 	ldw	r2,-4(fp)
  802a14:	00c00404 	movi	r3,16
  802a18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  802a1c:	0005883a 	mov	r2,zero
  802a20:	00002b06 	br	802ad0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802a24:	0005303a 	rdctl	r2,status
  802a28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802a2c:	e0fffd17 	ldw	r3,-12(fp)
  802a30:	00bfff84 	movi	r2,-2
  802a34:	1884703a 	and	r2,r3,r2
  802a38:	1001703a 	wrctl	status,r2
  
  return context;
  802a3c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  802a40:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  802a44:	d0a04417 	ldw	r2,-32496(gp)
  802a48:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  802a4c:	e0bffb17 	ldw	r2,-20(fp)
  802a50:	10001726 	beq	r2,zero,802ab0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  802a54:	d0a04417 	ldw	r2,-32496(gp)
  802a58:	10800117 	ldw	r2,4(r2)
  802a5c:	d0a04415 	stw	r2,-32496(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  802a60:	e0bffb17 	ldw	r2,-20(fp)
  802a64:	00c00144 	movi	r3,5
  802a68:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  802a6c:	e0bffb17 	ldw	r2,-20(fp)
  802a70:	e0fffe0b 	ldhu	r3,-8(fp)
  802a74:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  802a78:	e0bffb17 	ldw	r2,-20(fp)
  802a7c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  802a80:	e0bffb17 	ldw	r2,-20(fp)
  802a84:	00c00fc4 	movi	r3,63
  802a88:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  802a8c:	e0bffb17 	ldw	r2,-20(fp)
  802a90:	100002c5 	stb	zero,11(r2)
  802a94:	e0bff917 	ldw	r2,-28(fp)
  802a98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802a9c:	e0bffa17 	ldw	r2,-24(fp)
  802aa0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  802aa4:	e0bfff17 	ldw	r2,-4(fp)
  802aa8:	10000005 	stb	zero,0(r2)
  802aac:	00000706 	br	802acc <OSFlagCreate+0xf4>
  802ab0:	e0bff917 	ldw	r2,-28(fp)
  802ab4:	e0bffc15 	stw	r2,-16(fp)
  802ab8:	e0bffc17 	ldw	r2,-16(fp)
  802abc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  802ac0:	e0bfff17 	ldw	r2,-4(fp)
  802ac4:	00c01c84 	movi	r3,114
  802ac8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  802acc:	e0bffb17 	ldw	r2,-20(fp)
}
  802ad0:	e037883a 	mov	sp,fp
  802ad4:	df000017 	ldw	fp,0(sp)
  802ad8:	dec00104 	addi	sp,sp,4
  802adc:	f800283a 	ret

00802ae0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  802ae0:	defff204 	addi	sp,sp,-56
  802ae4:	dfc00d15 	stw	ra,52(sp)
  802ae8:	df000c15 	stw	fp,48(sp)
  802aec:	df000c04 	addi	fp,sp,48
  802af0:	e13ffd15 	stw	r4,-12(fp)
  802af4:	2805883a 	mov	r2,r5
  802af8:	e1bfff15 	stw	r6,-4(fp)
  802afc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  802b00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  802b04:	e0bfff17 	ldw	r2,-4(fp)
  802b08:	1000021e 	bne	r2,zero,802b14 <OSFlagDel+0x34>
        return (pgrp);
  802b0c:	e0bffd17 	ldw	r2,-12(fp)
  802b10:	00008006 	br	802d14 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802b14:	e0bffd17 	ldw	r2,-12(fp)
  802b18:	1000051e 	bne	r2,zero,802b30 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802b1c:	e0bfff17 	ldw	r2,-4(fp)
  802b20:	00c01b84 	movi	r3,110
  802b24:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  802b28:	e0bffd17 	ldw	r2,-12(fp)
  802b2c:	00007906 	br	802d14 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  802b30:	d0a04103 	ldbu	r2,-32508(gp)
  802b34:	10803fcc 	andi	r2,r2,255
  802b38:	10000526 	beq	r2,zero,802b50 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  802b3c:	e0bfff17 	ldw	r2,-4(fp)
  802b40:	00c003c4 	movi	r3,15
  802b44:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  802b48:	e0bffd17 	ldw	r2,-12(fp)
  802b4c:	00007106 	br	802d14 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  802b50:	e0bffd17 	ldw	r2,-12(fp)
  802b54:	10800003 	ldbu	r2,0(r2)
  802b58:	10803fcc 	andi	r2,r2,255
  802b5c:	10800160 	cmpeqi	r2,r2,5
  802b60:	1000051e 	bne	r2,zero,802b78 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  802b64:	e0bfff17 	ldw	r2,-4(fp)
  802b68:	00c00044 	movi	r3,1
  802b6c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  802b70:	e0bffd17 	ldw	r2,-12(fp)
  802b74:	00006706 	br	802d14 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802b78:	0005303a 	rdctl	r2,status
  802b7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802b80:	e0fffc17 	ldw	r3,-16(fp)
  802b84:	00bfff84 	movi	r2,-2
  802b88:	1884703a 	and	r2,r3,r2
  802b8c:	1001703a 	wrctl	status,r2
  
  return context;
  802b90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  802b94:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  802b98:	e0bffd17 	ldw	r2,-12(fp)
  802b9c:	10800117 	ldw	r2,4(r2)
  802ba0:	10000326 	beq	r2,zero,802bb0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  802ba4:	00800044 	movi	r2,1
  802ba8:	e0bff405 	stb	r2,-48(fp)
  802bac:	00000106 	br	802bb4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  802bb0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  802bb4:	e0bffe03 	ldbu	r2,-8(fp)
  802bb8:	10000326 	beq	r2,zero,802bc8 <OSFlagDel+0xe8>
  802bbc:	10800060 	cmpeqi	r2,r2,1
  802bc0:	1000231e 	bne	r2,zero,802c50 <OSFlagDel+0x170>
  802bc4:	00004806 	br	802ce8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  802bc8:	e0bff403 	ldbu	r2,-48(fp)
  802bcc:	1000161e 	bne	r2,zero,802c28 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  802bd0:	e0bffd17 	ldw	r2,-12(fp)
  802bd4:	00c00fc4 	movi	r3,63
  802bd8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  802bdc:	e0bffd17 	ldw	r2,-12(fp)
  802be0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  802be4:	e0bffd17 	ldw	r2,-12(fp)
  802be8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  802bec:	d0e04417 	ldw	r3,-32496(gp)
  802bf0:	e0bffd17 	ldw	r2,-12(fp)
  802bf4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  802bf8:	e0bffd17 	ldw	r2,-12(fp)
  802bfc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  802c00:	e0bffd17 	ldw	r2,-12(fp)
  802c04:	d0a04415 	stw	r2,-32496(gp)
  802c08:	e0bff717 	ldw	r2,-36(fp)
  802c0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802c10:	e0bff817 	ldw	r2,-32(fp)
  802c14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  802c18:	e0bfff17 	ldw	r2,-4(fp)
  802c1c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  802c20:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  802c24:	00003a06 	br	802d10 <OSFlagDel+0x230>
  802c28:	e0bff717 	ldw	r2,-36(fp)
  802c2c:	e0bff915 	stw	r2,-28(fp)
  802c30:	e0bff917 	ldw	r2,-28(fp)
  802c34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  802c38:	e0bfff17 	ldw	r2,-4(fp)
  802c3c:	00c01244 	movi	r3,73
  802c40:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  802c44:	e0bffd17 	ldw	r2,-12(fp)
  802c48:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  802c4c:	00003006 	br	802d10 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  802c50:	e0bffd17 	ldw	r2,-12(fp)
  802c54:	10800117 	ldw	r2,4(r2)
  802c58:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  802c5c:	00000606 	br	802c78 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  802c60:	000b883a 	mov	r5,zero
  802c64:	e13ff517 	ldw	r4,-44(fp)
  802c68:	0803c4c0 	call	803c4c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  802c6c:	e0bff517 	ldw	r2,-44(fp)
  802c70:	10800017 	ldw	r2,0(r2)
  802c74:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  802c78:	e0bff517 	ldw	r2,-44(fp)
  802c7c:	103ff81e 	bne	r2,zero,802c60 <__alt_mem_epcs_flash_controller_0+0xff7f9c60>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  802c80:	e0bffd17 	ldw	r2,-12(fp)
  802c84:	00c00fc4 	movi	r3,63
  802c88:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  802c8c:	e0bffd17 	ldw	r2,-12(fp)
  802c90:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  802c94:	e0bffd17 	ldw	r2,-12(fp)
  802c98:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  802c9c:	d0e04417 	ldw	r3,-32496(gp)
  802ca0:	e0bffd17 	ldw	r2,-12(fp)
  802ca4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  802ca8:	e0bffd17 	ldw	r2,-12(fp)
  802cac:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  802cb0:	e0bffd17 	ldw	r2,-12(fp)
  802cb4:	d0a04415 	stw	r2,-32496(gp)
  802cb8:	e0bff717 	ldw	r2,-36(fp)
  802cbc:	e0bffa15 	stw	r2,-24(fp)
  802cc0:	e0bffa17 	ldw	r2,-24(fp)
  802cc4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  802cc8:	e0bff403 	ldbu	r2,-48(fp)
  802ccc:	10800058 	cmpnei	r2,r2,1
  802cd0:	1000011e 	bne	r2,zero,802cd8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  802cd4:	0801e6c0 	call	801e6c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  802cd8:	e0bfff17 	ldw	r2,-4(fp)
  802cdc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  802ce0:	e03ff615 	stw	zero,-40(fp)
             break;
  802ce4:	00000a06 	br	802d10 <OSFlagDel+0x230>
  802ce8:	e0bff717 	ldw	r2,-36(fp)
  802cec:	e0bffb15 	stw	r2,-20(fp)
  802cf0:	e0bffb17 	ldw	r2,-20(fp)
  802cf4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  802cf8:	e0bfff17 	ldw	r2,-4(fp)
  802cfc:	00c001c4 	movi	r3,7
  802d00:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  802d04:	e0bffd17 	ldw	r2,-12(fp)
  802d08:	e0bff615 	stw	r2,-40(fp)
             break;
  802d0c:	0001883a 	nop
    }
    return (pgrp_return);
  802d10:	e0bff617 	ldw	r2,-40(fp)
}
  802d14:	e037883a 	mov	sp,fp
  802d18:	dfc00117 	ldw	ra,4(sp)
  802d1c:	df000017 	ldw	fp,0(sp)
  802d20:	dec00204 	addi	sp,sp,8
  802d24:	f800283a 	ret

00802d28 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  802d28:	defff604 	addi	sp,sp,-40
  802d2c:	dfc00915 	stw	ra,36(sp)
  802d30:	df000815 	stw	fp,32(sp)
  802d34:	df000804 	addi	fp,sp,32
  802d38:	e13ffd15 	stw	r4,-12(fp)
  802d3c:	e17ffe15 	stw	r5,-8(fp)
  802d40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  802d44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  802d48:	e0bfff17 	ldw	r2,-4(fp)
  802d4c:	1000021e 	bne	r2,zero,802d58 <OSFlagNameGet+0x30>
        return (0);
  802d50:	0005883a 	mov	r2,zero
  802d54:	00003906 	br	802e3c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  802d58:	e0bffd17 	ldw	r2,-12(fp)
  802d5c:	1000051e 	bne	r2,zero,802d74 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802d60:	e0bfff17 	ldw	r2,-4(fp)
  802d64:	00c01b84 	movi	r3,110
  802d68:	10c00005 	stb	r3,0(r2)
        return (0);
  802d6c:	0005883a 	mov	r2,zero
  802d70:	00003206 	br	802e3c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  802d74:	e0bffe17 	ldw	r2,-8(fp)
  802d78:	1000051e 	bne	r2,zero,802d90 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  802d7c:	e0bfff17 	ldw	r2,-4(fp)
  802d80:	00c00304 	movi	r3,12
  802d84:	10c00005 	stb	r3,0(r2)
        return (0);
  802d88:	0005883a 	mov	r2,zero
  802d8c:	00002b06 	br	802e3c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  802d90:	d0a04103 	ldbu	r2,-32508(gp)
  802d94:	10803fcc 	andi	r2,r2,255
  802d98:	10000526 	beq	r2,zero,802db0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  802d9c:	e0bfff17 	ldw	r2,-4(fp)
  802da0:	00c00444 	movi	r3,17
  802da4:	10c00005 	stb	r3,0(r2)
        return (0);
  802da8:	0005883a 	mov	r2,zero
  802dac:	00002306 	br	802e3c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802db0:	0005303a 	rdctl	r2,status
  802db4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802db8:	e0fffc17 	ldw	r3,-16(fp)
  802dbc:	00bfff84 	movi	r2,-2
  802dc0:	1884703a 	and	r2,r3,r2
  802dc4:	1001703a 	wrctl	status,r2
  
  return context;
  802dc8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  802dcc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  802dd0:	e0bffd17 	ldw	r2,-12(fp)
  802dd4:	10800003 	ldbu	r2,0(r2)
  802dd8:	10803fcc 	andi	r2,r2,255
  802ddc:	10800160 	cmpeqi	r2,r2,5
  802de0:	1000091e 	bne	r2,zero,802e08 <OSFlagNameGet+0xe0>
  802de4:	e0bff817 	ldw	r2,-32(fp)
  802de8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802dec:	e0bff917 	ldw	r2,-28(fp)
  802df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  802df4:	e0bfff17 	ldw	r2,-4(fp)
  802df8:	00c00044 	movi	r3,1
  802dfc:	10c00005 	stb	r3,0(r2)
        return (0);
  802e00:	0005883a 	mov	r2,zero
  802e04:	00000d06 	br	802e3c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  802e08:	e0bffd17 	ldw	r2,-12(fp)
  802e0c:	10800284 	addi	r2,r2,10
  802e10:	100b883a 	mov	r5,r2
  802e14:	e13ffe17 	ldw	r4,-8(fp)
  802e18:	0801fb00 	call	801fb0 <OS_StrCopy>
  802e1c:	e0bffb05 	stb	r2,-20(fp)
  802e20:	e0bff817 	ldw	r2,-32(fp)
  802e24:	e0bffa15 	stw	r2,-24(fp)
  802e28:	e0bffa17 	ldw	r2,-24(fp)
  802e2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  802e30:	e0bfff17 	ldw	r2,-4(fp)
  802e34:	10000005 	stb	zero,0(r2)
    return (len);
  802e38:	e0bffb03 	ldbu	r2,-20(fp)
}
  802e3c:	e037883a 	mov	sp,fp
  802e40:	dfc00117 	ldw	ra,4(sp)
  802e44:	df000017 	ldw	fp,0(sp)
  802e48:	dec00204 	addi	sp,sp,8
  802e4c:	f800283a 	ret

00802e50 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  802e50:	defff504 	addi	sp,sp,-44
  802e54:	dfc00a15 	stw	ra,40(sp)
  802e58:	df000915 	stw	fp,36(sp)
  802e5c:	df000904 	addi	fp,sp,36
  802e60:	e13ffd15 	stw	r4,-12(fp)
  802e64:	e17ffe15 	stw	r5,-8(fp)
  802e68:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  802e6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  802e70:	e0bfff17 	ldw	r2,-4(fp)
  802e74:	10004326 	beq	r2,zero,802f84 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  802e78:	e0bffd17 	ldw	r2,-12(fp)
  802e7c:	1000041e 	bne	r2,zero,802e90 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802e80:	e0bfff17 	ldw	r2,-4(fp)
  802e84:	00c01b84 	movi	r3,110
  802e88:	10c00005 	stb	r3,0(r2)
        return;
  802e8c:	00003e06 	br	802f88 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  802e90:	e0bffe17 	ldw	r2,-8(fp)
  802e94:	1000041e 	bne	r2,zero,802ea8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  802e98:	e0bfff17 	ldw	r2,-4(fp)
  802e9c:	00c00304 	movi	r3,12
  802ea0:	10c00005 	stb	r3,0(r2)
        return;
  802ea4:	00003806 	br	802f88 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  802ea8:	d0a04103 	ldbu	r2,-32508(gp)
  802eac:	10803fcc 	andi	r2,r2,255
  802eb0:	10000426 	beq	r2,zero,802ec4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  802eb4:	e0bfff17 	ldw	r2,-4(fp)
  802eb8:	00c00484 	movi	r3,18
  802ebc:	10c00005 	stb	r3,0(r2)
        return;
  802ec0:	00003106 	br	802f88 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802ec4:	0005303a 	rdctl	r2,status
  802ec8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802ecc:	e0fffc17 	ldw	r3,-16(fp)
  802ed0:	00bfff84 	movi	r2,-2
  802ed4:	1884703a 	and	r2,r3,r2
  802ed8:	1001703a 	wrctl	status,r2
  
  return context;
  802edc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  802ee0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  802ee4:	e0bffd17 	ldw	r2,-12(fp)
  802ee8:	10800003 	ldbu	r2,0(r2)
  802eec:	10803fcc 	andi	r2,r2,255
  802ef0:	10800160 	cmpeqi	r2,r2,5
  802ef4:	1000081e 	bne	r2,zero,802f18 <OSFlagNameSet+0xc8>
  802ef8:	e0bff717 	ldw	r2,-36(fp)
  802efc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f00:	e0bff817 	ldw	r2,-32(fp)
  802f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  802f08:	e0bfff17 	ldw	r2,-4(fp)
  802f0c:	00c00044 	movi	r3,1
  802f10:	10c00005 	stb	r3,0(r2)
        return;
  802f14:	00001c06 	br	802f88 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  802f18:	e13ffe17 	ldw	r4,-8(fp)
  802f1c:	08020240 	call	802024 <OS_StrLen>
  802f20:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  802f24:	e0bffa03 	ldbu	r2,-24(fp)
  802f28:	10800830 	cmpltui	r2,r2,32
  802f2c:	1000081e 	bne	r2,zero,802f50 <OSFlagNameSet+0x100>
  802f30:	e0bff717 	ldw	r2,-36(fp)
  802f34:	e0bff915 	stw	r2,-28(fp)
  802f38:	e0bff917 	ldw	r2,-28(fp)
  802f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  802f40:	e0bfff17 	ldw	r2,-4(fp)
  802f44:	00c01cc4 	movi	r3,115
  802f48:	10c00005 	stb	r3,0(r2)
        return;
  802f4c:	00000e06 	br	802f88 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  802f50:	e0bffd17 	ldw	r2,-12(fp)
  802f54:	10800284 	addi	r2,r2,10
  802f58:	e17ffe17 	ldw	r5,-8(fp)
  802f5c:	1009883a 	mov	r4,r2
  802f60:	0801fb00 	call	801fb0 <OS_StrCopy>
  802f64:	e0bff717 	ldw	r2,-36(fp)
  802f68:	e0bffb15 	stw	r2,-20(fp)
  802f6c:	e0bffb17 	ldw	r2,-20(fp)
  802f70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  802f74:	e0bfff17 	ldw	r2,-4(fp)
  802f78:	10000005 	stb	zero,0(r2)
    return;
  802f7c:	0001883a 	nop
  802f80:	00000106 	br	802f88 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  802f84:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  802f88:	e037883a 	mov	sp,fp
  802f8c:	dfc00117 	ldw	ra,4(sp)
  802f90:	df000017 	ldw	fp,0(sp)
  802f94:	dec00204 	addi	sp,sp,8
  802f98:	f800283a 	ret

00802f9c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  802f9c:	deffe104 	addi	sp,sp,-124
  802fa0:	dfc01e15 	stw	ra,120(sp)
  802fa4:	df001d15 	stw	fp,116(sp)
  802fa8:	df001d04 	addi	fp,sp,116
  802fac:	e13ffc15 	stw	r4,-16(fp)
  802fb0:	2809883a 	mov	r4,r5
  802fb4:	3007883a 	mov	r3,r6
  802fb8:	3805883a 	mov	r2,r7
  802fbc:	e13ffd0d 	sth	r4,-12(fp)
  802fc0:	e0fffe05 	stb	r3,-8(fp)
  802fc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  802fc8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  802fcc:	e0800217 	ldw	r2,8(fp)
  802fd0:	1000021e 	bne	r2,zero,802fdc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  802fd4:	0005883a 	mov	r2,zero
  802fd8:	00015906 	br	803540 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802fdc:	e0bffc17 	ldw	r2,-16(fp)
  802fe0:	1000051e 	bne	r2,zero,802ff8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802fe4:	e0800217 	ldw	r2,8(fp)
  802fe8:	00c01b84 	movi	r3,110
  802fec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802ff0:	0005883a 	mov	r2,zero
  802ff4:	00015206 	br	803540 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  802ff8:	d0a04103 	ldbu	r2,-32508(gp)
  802ffc:	10803fcc 	andi	r2,r2,255
  803000:	10000526 	beq	r2,zero,803018 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  803004:	e0800217 	ldw	r2,8(fp)
  803008:	00c00084 	movi	r3,2
  80300c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803010:	0005883a 	mov	r2,zero
  803014:	00014a06 	br	803540 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  803018:	d0a03303 	ldbu	r2,-32564(gp)
  80301c:	10803fcc 	andi	r2,r2,255
  803020:	10000526 	beq	r2,zero,803038 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  803024:	e0800217 	ldw	r2,8(fp)
  803028:	00c00344 	movi	r3,13
  80302c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803030:	0005883a 	mov	r2,zero
  803034:	00014206 	br	803540 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  803038:	e0bffc17 	ldw	r2,-16(fp)
  80303c:	10800003 	ldbu	r2,0(r2)
  803040:	10803fcc 	andi	r2,r2,255
  803044:	10800160 	cmpeqi	r2,r2,5
  803048:	1000051e 	bne	r2,zero,803060 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  80304c:	e0800217 	ldw	r2,8(fp)
  803050:	00c00044 	movi	r3,1
  803054:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803058:	0005883a 	mov	r2,zero
  80305c:	00013806 	br	803540 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  803060:	e0fffe03 	ldbu	r3,-8(fp)
  803064:	00bfe004 	movi	r2,-128
  803068:	1884703a 	and	r2,r3,r2
  80306c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  803070:	e0bfe603 	ldbu	r2,-104(fp)
  803074:	10000626 	beq	r2,zero,803090 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  803078:	e0bffe03 	ldbu	r2,-8(fp)
  80307c:	10801fcc 	andi	r2,r2,127
  803080:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  803084:	00800044 	movi	r2,1
  803088:	e0bfe405 	stb	r2,-112(fp)
  80308c:	00000106 	br	803094 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  803090:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803094:	0005303a 	rdctl	r2,status
  803098:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80309c:	e0fff617 	ldw	r3,-40(fp)
  8030a0:	00bfff84 	movi	r2,-2
  8030a4:	1884703a 	and	r2,r3,r2
  8030a8:	1001703a 	wrctl	status,r2
  
  return context;
  8030ac:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8030b0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  8030b4:	e0bffe03 	ldbu	r2,-8(fp)
  8030b8:	10c00060 	cmpeqi	r3,r2,1
  8030bc:	1800921e 	bne	r3,zero,803308 <OSFlagPend+0x36c>
  8030c0:	10c00088 	cmpgei	r3,r2,2
  8030c4:	1800021e 	bne	r3,zero,8030d0 <OSFlagPend+0x134>
  8030c8:	10006126 	beq	r2,zero,803250 <OSFlagPend+0x2b4>
  8030cc:	0000bb06 	br	8033bc <OSFlagPend+0x420>
  8030d0:	10c000a0 	cmpeqi	r3,r2,2
  8030d4:	1800031e 	bne	r3,zero,8030e4 <OSFlagPend+0x148>
  8030d8:	108000e0 	cmpeqi	r2,r2,3
  8030dc:	10002f1e 	bne	r2,zero,80319c <OSFlagPend+0x200>
  8030e0:	0000b606 	br	8033bc <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8030e4:	e0bffc17 	ldw	r2,-16(fp)
  8030e8:	10c0020b 	ldhu	r3,8(r2)
  8030ec:	e0bffd0b 	ldhu	r2,-12(fp)
  8030f0:	1884703a 	and	r2,r3,r2
  8030f4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8030f8:	e0ffe80b 	ldhu	r3,-96(fp)
  8030fc:	e0bffd0b 	ldhu	r2,-12(fp)
  803100:	1880171e 	bne	r3,r2,803160 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803104:	e0bfe403 	ldbu	r2,-112(fp)
  803108:	10800058 	cmpnei	r2,r2,1
  80310c:	1000091e 	bne	r2,zero,803134 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  803110:	e0bffc17 	ldw	r2,-16(fp)
  803114:	1080020b 	ldhu	r2,8(r2)
  803118:	1007883a 	mov	r3,r2
  80311c:	e0bfe80b 	ldhu	r2,-96(fp)
  803120:	0084303a 	nor	r2,zero,r2
  803124:	1884703a 	and	r2,r3,r2
  803128:	1007883a 	mov	r3,r2
  80312c:	e0bffc17 	ldw	r2,-16(fp)
  803130:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  803134:	d0a04217 	ldw	r2,-32504(gp)
  803138:	e0ffe80b 	ldhu	r3,-96(fp)
  80313c:	10c00b0d 	sth	r3,44(r2)
  803140:	e0bfe517 	ldw	r2,-108(fp)
  803144:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803148:	e0bfe717 	ldw	r2,-100(fp)
  80314c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803150:	e0800217 	ldw	r2,8(fp)
  803154:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  803158:	e0bfe80b 	ldhu	r2,-96(fp)
  80315c:	0000f806 	br	803540 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803160:	e13ffd0b 	ldhu	r4,-12(fp)
  803164:	e17ffe03 	ldbu	r5,-8(fp)
  803168:	e0bfff0b 	ldhu	r2,-4(fp)
  80316c:	e0fff704 	addi	r3,fp,-36
  803170:	d8800015 	stw	r2,0(sp)
  803174:	280f883a 	mov	r7,r5
  803178:	200d883a 	mov	r6,r4
  80317c:	180b883a 	mov	r5,r3
  803180:	e13ffc17 	ldw	r4,-16(fp)
  803184:	0803a0c0 	call	803a0c <OS_FlagBlock>
  803188:	e0bfe517 	ldw	r2,-108(fp)
  80318c:	e0bfe915 	stw	r2,-92(fp)
  803190:	e0bfe917 	ldw	r2,-92(fp)
  803194:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803198:	00009206 	br	8033e4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80319c:	e0bffc17 	ldw	r2,-16(fp)
  8031a0:	10c0020b 	ldhu	r3,8(r2)
  8031a4:	e0bffd0b 	ldhu	r2,-12(fp)
  8031a8:	1884703a 	and	r2,r3,r2
  8031ac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8031b0:	e0bfe80b 	ldhu	r2,-96(fp)
  8031b4:	10001726 	beq	r2,zero,803214 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8031b8:	e0bfe403 	ldbu	r2,-112(fp)
  8031bc:	10800058 	cmpnei	r2,r2,1
  8031c0:	1000091e 	bne	r2,zero,8031e8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	1080020b 	ldhu	r2,8(r2)
  8031cc:	1007883a 	mov	r3,r2
  8031d0:	e0bfe80b 	ldhu	r2,-96(fp)
  8031d4:	0084303a 	nor	r2,zero,r2
  8031d8:	1884703a 	and	r2,r3,r2
  8031dc:	1007883a 	mov	r3,r2
  8031e0:	e0bffc17 	ldw	r2,-16(fp)
  8031e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8031e8:	d0a04217 	ldw	r2,-32504(gp)
  8031ec:	e0ffe80b 	ldhu	r3,-96(fp)
  8031f0:	10c00b0d 	sth	r3,44(r2)
  8031f4:	e0bfe517 	ldw	r2,-108(fp)
  8031f8:	e0bfea15 	stw	r2,-88(fp)
  8031fc:	e0bfea17 	ldw	r2,-88(fp)
  803200:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803204:	e0800217 	ldw	r2,8(fp)
  803208:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80320c:	e0bfe80b 	ldhu	r2,-96(fp)
  803210:	0000cb06 	br	803540 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803214:	e13ffd0b 	ldhu	r4,-12(fp)
  803218:	e17ffe03 	ldbu	r5,-8(fp)
  80321c:	e0bfff0b 	ldhu	r2,-4(fp)
  803220:	e0fff704 	addi	r3,fp,-36
  803224:	d8800015 	stw	r2,0(sp)
  803228:	280f883a 	mov	r7,r5
  80322c:	200d883a 	mov	r6,r4
  803230:	180b883a 	mov	r5,r3
  803234:	e13ffc17 	ldw	r4,-16(fp)
  803238:	0803a0c0 	call	803a0c <OS_FlagBlock>
  80323c:	e0bfe517 	ldw	r2,-108(fp)
  803240:	e0bfeb15 	stw	r2,-84(fp)
  803244:	e0bfeb17 	ldw	r2,-84(fp)
  803248:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80324c:	00006506 	br	8033e4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  803250:	e0bffc17 	ldw	r2,-16(fp)
  803254:	1080020b 	ldhu	r2,8(r2)
  803258:	0084303a 	nor	r2,zero,r2
  80325c:	1007883a 	mov	r3,r2
  803260:	e0bffd0b 	ldhu	r2,-12(fp)
  803264:	1884703a 	and	r2,r3,r2
  803268:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80326c:	e0ffe80b 	ldhu	r3,-96(fp)
  803270:	e0bffd0b 	ldhu	r2,-12(fp)
  803274:	1880151e 	bne	r3,r2,8032cc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803278:	e0bfe403 	ldbu	r2,-112(fp)
  80327c:	10800058 	cmpnei	r2,r2,1
  803280:	1000071e 	bne	r2,zero,8032a0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  803284:	e0bffc17 	ldw	r2,-16(fp)
  803288:	10c0020b 	ldhu	r3,8(r2)
  80328c:	e0bfe80b 	ldhu	r2,-96(fp)
  803290:	1884b03a 	or	r2,r3,r2
  803294:	1007883a 	mov	r3,r2
  803298:	e0bffc17 	ldw	r2,-16(fp)
  80329c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8032a0:	d0a04217 	ldw	r2,-32504(gp)
  8032a4:	e0ffe80b 	ldhu	r3,-96(fp)
  8032a8:	10c00b0d 	sth	r3,44(r2)
  8032ac:	e0bfe517 	ldw	r2,-108(fp)
  8032b0:	e0bfec15 	stw	r2,-80(fp)
  8032b4:	e0bfec17 	ldw	r2,-80(fp)
  8032b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8032bc:	e0800217 	ldw	r2,8(fp)
  8032c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8032c4:	e0bfe80b 	ldhu	r2,-96(fp)
  8032c8:	00009d06 	br	803540 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8032cc:	e13ffd0b 	ldhu	r4,-12(fp)
  8032d0:	e17ffe03 	ldbu	r5,-8(fp)
  8032d4:	e0bfff0b 	ldhu	r2,-4(fp)
  8032d8:	e0fff704 	addi	r3,fp,-36
  8032dc:	d8800015 	stw	r2,0(sp)
  8032e0:	280f883a 	mov	r7,r5
  8032e4:	200d883a 	mov	r6,r4
  8032e8:	180b883a 	mov	r5,r3
  8032ec:	e13ffc17 	ldw	r4,-16(fp)
  8032f0:	0803a0c0 	call	803a0c <OS_FlagBlock>
  8032f4:	e0bfe517 	ldw	r2,-108(fp)
  8032f8:	e0bfed15 	stw	r2,-76(fp)
  8032fc:	e0bfed17 	ldw	r2,-76(fp)
  803300:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803304:	00003706 	br	8033e4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  803308:	e0bffc17 	ldw	r2,-16(fp)
  80330c:	1080020b 	ldhu	r2,8(r2)
  803310:	0084303a 	nor	r2,zero,r2
  803314:	1007883a 	mov	r3,r2
  803318:	e0bffd0b 	ldhu	r2,-12(fp)
  80331c:	1884703a 	and	r2,r3,r2
  803320:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  803324:	e0bfe80b 	ldhu	r2,-96(fp)
  803328:	10001526 	beq	r2,zero,803380 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80332c:	e0bfe403 	ldbu	r2,-112(fp)
  803330:	10800058 	cmpnei	r2,r2,1
  803334:	1000071e 	bne	r2,zero,803354 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  803338:	e0bffc17 	ldw	r2,-16(fp)
  80333c:	10c0020b 	ldhu	r3,8(r2)
  803340:	e0bfe80b 	ldhu	r2,-96(fp)
  803344:	1884b03a 	or	r2,r3,r2
  803348:	1007883a 	mov	r3,r2
  80334c:	e0bffc17 	ldw	r2,-16(fp)
  803350:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  803354:	d0a04217 	ldw	r2,-32504(gp)
  803358:	e0ffe80b 	ldhu	r3,-96(fp)
  80335c:	10c00b0d 	sth	r3,44(r2)
  803360:	e0bfe517 	ldw	r2,-108(fp)
  803364:	e0bfee15 	stw	r2,-72(fp)
  803368:	e0bfee17 	ldw	r2,-72(fp)
  80336c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803370:	e0800217 	ldw	r2,8(fp)
  803374:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  803378:	e0bfe80b 	ldhu	r2,-96(fp)
  80337c:	00007006 	br	803540 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803380:	e13ffd0b 	ldhu	r4,-12(fp)
  803384:	e17ffe03 	ldbu	r5,-8(fp)
  803388:	e0bfff0b 	ldhu	r2,-4(fp)
  80338c:	e0fff704 	addi	r3,fp,-36
  803390:	d8800015 	stw	r2,0(sp)
  803394:	280f883a 	mov	r7,r5
  803398:	200d883a 	mov	r6,r4
  80339c:	180b883a 	mov	r5,r3
  8033a0:	e13ffc17 	ldw	r4,-16(fp)
  8033a4:	0803a0c0 	call	803a0c <OS_FlagBlock>
  8033a8:	e0bfe517 	ldw	r2,-108(fp)
  8033ac:	e0bfef15 	stw	r2,-68(fp)
  8033b0:	e0bfef17 	ldw	r2,-68(fp)
  8033b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8033b8:	00000a06 	br	8033e4 <OSFlagPend+0x448>
  8033bc:	e0bfe517 	ldw	r2,-108(fp)
  8033c0:	e0bff015 	stw	r2,-64(fp)
  8033c4:	e0bff017 	ldw	r2,-64(fp)
  8033c8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8033cc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8033d0:	e0800217 	ldw	r2,8(fp)
  8033d4:	00c01bc4 	movi	r3,111
  8033d8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  8033dc:	e0bfe80b 	ldhu	r2,-96(fp)
  8033e0:	00005706 	br	803540 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8033e4:	0801e6c0 	call	801e6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8033e8:	0005303a 	rdctl	r2,status
  8033ec:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8033f0:	e0fff117 	ldw	r3,-60(fp)
  8033f4:	00bfff84 	movi	r2,-2
  8033f8:	1884703a 	and	r2,r3,r2
  8033fc:	1001703a 	wrctl	status,r2
  
  return context;
  803400:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  803404:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  803408:	d0a04217 	ldw	r2,-32504(gp)
  80340c:	10800c43 	ldbu	r2,49(r2)
  803410:	10803fcc 	andi	r2,r2,255
  803414:	10001c26 	beq	r2,zero,803488 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  803418:	d0a04217 	ldw	r2,-32504(gp)
  80341c:	10800c43 	ldbu	r2,49(r2)
  803420:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  803424:	d0a04217 	ldw	r2,-32504(gp)
  803428:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80342c:	e0bff704 	addi	r2,fp,-36
  803430:	1009883a 	mov	r4,r2
  803434:	0803d400 	call	803d40 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  803438:	d0a04217 	ldw	r2,-32504(gp)
  80343c:	10000c05 	stb	zero,48(r2)
  803440:	e0bfe517 	ldw	r2,-108(fp)
  803444:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803448:	e0bff217 	ldw	r2,-56(fp)
  80344c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  803450:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  803454:	e0bff303 	ldbu	r2,-52(fp)
  803458:	108000a0 	cmpeqi	r2,r2,2
  80345c:	10000426 	beq	r2,zero,803470 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  803460:	e0800217 	ldw	r2,8(fp)
  803464:	00c00384 	movi	r3,14
  803468:	10c00005 	stb	r3,0(r2)
                 break;
  80346c:	00000406 	br	803480 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  803470:	e0800217 	ldw	r2,8(fp)
  803474:	00c00284 	movi	r3,10
  803478:	10c00005 	stb	r3,0(r2)
                 break;
  80347c:	0001883a 	nop
        }
        return (flags_rdy);
  803480:	e0bfe80b 	ldhu	r2,-96(fp)
  803484:	00002e06 	br	803540 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  803488:	d0a04217 	ldw	r2,-32504(gp)
  80348c:	10800b0b 	ldhu	r2,44(r2)
  803490:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  803494:	e0bfe403 	ldbu	r2,-112(fp)
  803498:	10800058 	cmpnei	r2,r2,1
  80349c:	1000211e 	bne	r2,zero,803524 <OSFlagPend+0x588>
        switch (wait_type) {
  8034a0:	e0bffe03 	ldbu	r2,-8(fp)
  8034a4:	10001616 	blt	r2,zero,803500 <OSFlagPend+0x564>
  8034a8:	10c00090 	cmplti	r3,r2,2
  8034ac:	18000c1e 	bne	r3,zero,8034e0 <OSFlagPend+0x544>
  8034b0:	10800108 	cmpgei	r2,r2,4
  8034b4:	1000121e 	bne	r2,zero,803500 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8034b8:	e0bffc17 	ldw	r2,-16(fp)
  8034bc:	1080020b 	ldhu	r2,8(r2)
  8034c0:	1007883a 	mov	r3,r2
  8034c4:	e0bfe80b 	ldhu	r2,-96(fp)
  8034c8:	0084303a 	nor	r2,zero,r2
  8034cc:	1884703a 	and	r2,r3,r2
  8034d0:	1007883a 	mov	r3,r2
  8034d4:	e0bffc17 	ldw	r2,-16(fp)
  8034d8:	10c0020d 	sth	r3,8(r2)
                 break;
  8034dc:	00001106 	br	803524 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  8034e0:	e0bffc17 	ldw	r2,-16(fp)
  8034e4:	10c0020b 	ldhu	r3,8(r2)
  8034e8:	e0bfe80b 	ldhu	r2,-96(fp)
  8034ec:	1884b03a 	or	r2,r3,r2
  8034f0:	1007883a 	mov	r3,r2
  8034f4:	e0bffc17 	ldw	r2,-16(fp)
  8034f8:	10c0020d 	sth	r3,8(r2)
                 break;
  8034fc:	00000906 	br	803524 <OSFlagPend+0x588>
  803500:	e0bfe517 	ldw	r2,-108(fp)
  803504:	e0bff415 	stw	r2,-48(fp)
  803508:	e0bff417 	ldw	r2,-48(fp)
  80350c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  803510:	e0800217 	ldw	r2,8(fp)
  803514:	00c01bc4 	movi	r3,111
  803518:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  80351c:	0005883a 	mov	r2,zero
  803520:	00000706 	br	803540 <OSFlagPend+0x5a4>
  803524:	e0bfe517 	ldw	r2,-108(fp)
  803528:	e0bff515 	stw	r2,-44(fp)
  80352c:	e0bff517 	ldw	r2,-44(fp)
  803530:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  803534:	e0800217 	ldw	r2,8(fp)
  803538:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80353c:	e0bfe80b 	ldhu	r2,-96(fp)
}
  803540:	e037883a 	mov	sp,fp
  803544:	dfc00117 	ldw	ra,4(sp)
  803548:	df000017 	ldw	fp,0(sp)
  80354c:	dec00204 	addi	sp,sp,8
  803550:	f800283a 	ret

00803554 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  803554:	defffb04 	addi	sp,sp,-20
  803558:	df000415 	stw	fp,16(sp)
  80355c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  803560:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803564:	0005303a 	rdctl	r2,status
  803568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80356c:	e0fffe17 	ldw	r3,-8(fp)
  803570:	00bfff84 	movi	r2,-2
  803574:	1884703a 	and	r2,r3,r2
  803578:	1001703a 	wrctl	status,r2
  
  return context;
  80357c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  803580:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  803584:	d0a04217 	ldw	r2,-32504(gp)
  803588:	10800b0b 	ldhu	r2,44(r2)
  80358c:	e0bffd0d 	sth	r2,-12(fp)
  803590:	e0bffc17 	ldw	r2,-16(fp)
  803594:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803598:	e0bfff17 	ldw	r2,-4(fp)
  80359c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  8035a0:	e0bffd0b 	ldhu	r2,-12(fp)
}
  8035a4:	e037883a 	mov	sp,fp
  8035a8:	df000017 	ldw	fp,0(sp)
  8035ac:	dec00104 	addi	sp,sp,4
  8035b0:	f800283a 	ret

008035b4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  8035b4:	deffef04 	addi	sp,sp,-68
  8035b8:	dfc01015 	stw	ra,64(sp)
  8035bc:	df000f15 	stw	fp,60(sp)
  8035c0:	df000f04 	addi	fp,sp,60
  8035c4:	e13ffc15 	stw	r4,-16(fp)
  8035c8:	2807883a 	mov	r3,r5
  8035cc:	3005883a 	mov	r2,r6
  8035d0:	e1ffff15 	stw	r7,-4(fp)
  8035d4:	e0fffd0d 	sth	r3,-12(fp)
  8035d8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  8035dc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8035e0:	e0bfff17 	ldw	r2,-4(fp)
  8035e4:	1000021e 	bne	r2,zero,8035f0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  8035e8:	0005883a 	mov	r2,zero
  8035ec:	0000d106 	br	803934 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  8035f0:	e0bffc17 	ldw	r2,-16(fp)
  8035f4:	1000051e 	bne	r2,zero,80360c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8035f8:	e0bfff17 	ldw	r2,-4(fp)
  8035fc:	00c01b84 	movi	r3,110
  803600:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803604:	0005883a 	mov	r2,zero
  803608:	0000ca06 	br	803934 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80360c:	e0bffc17 	ldw	r2,-16(fp)
  803610:	10800003 	ldbu	r2,0(r2)
  803614:	10803fcc 	andi	r2,r2,255
  803618:	10800160 	cmpeqi	r2,r2,5
  80361c:	1000051e 	bne	r2,zero,803634 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  803620:	e0bfff17 	ldw	r2,-4(fp)
  803624:	00c00044 	movi	r3,1
  803628:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  80362c:	0005883a 	mov	r2,zero
  803630:	0000c006 	br	803934 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803634:	0005303a 	rdctl	r2,status
  803638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80363c:	e0fffb17 	ldw	r3,-20(fp)
  803640:	00bfff84 	movi	r2,-2
  803644:	1884703a 	and	r2,r3,r2
  803648:	1001703a 	wrctl	status,r2
  
  return context;
  80364c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  803650:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  803654:	e0bffe03 	ldbu	r2,-8(fp)
  803658:	10000326 	beq	r2,zero,803668 <OSFlagPost+0xb4>
  80365c:	10800060 	cmpeqi	r2,r2,1
  803660:	10000b1e 	bne	r2,zero,803690 <OSFlagPost+0xdc>
  803664:	00001206 	br	8036b0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	1080020b 	ldhu	r2,8(r2)
  803670:	1007883a 	mov	r3,r2
  803674:	e0bffd0b 	ldhu	r2,-12(fp)
  803678:	0084303a 	nor	r2,zero,r2
  80367c:	1884703a 	and	r2,r3,r2
  803680:	1007883a 	mov	r3,r2
  803684:	e0bffc17 	ldw	r2,-16(fp)
  803688:	10c0020d 	sth	r3,8(r2)
             break;
  80368c:	00001106 	br	8036d4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  803690:	e0bffc17 	ldw	r2,-16(fp)
  803694:	10c0020b 	ldhu	r3,8(r2)
  803698:	e0bffd0b 	ldhu	r2,-12(fp)
  80369c:	1884b03a 	or	r2,r3,r2
  8036a0:	1007883a 	mov	r3,r2
  8036a4:	e0bffc17 	ldw	r2,-16(fp)
  8036a8:	10c0020d 	sth	r3,8(r2)
             break;
  8036ac:	00000906 	br	8036d4 <OSFlagPost+0x120>
  8036b0:	e0bff317 	ldw	r2,-52(fp)
  8036b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8036b8:	e0bff417 	ldw	r2,-48(fp)
  8036bc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  8036c0:	e0bfff17 	ldw	r2,-4(fp)
  8036c4:	00c01c44 	movi	r3,113
  8036c8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  8036cc:	0005883a 	mov	r2,zero
  8036d0:	00009806 	br	803934 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  8036d4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8036d8:	e0bffc17 	ldw	r2,-16(fp)
  8036dc:	10800117 	ldw	r2,4(r2)
  8036e0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8036e4:	00007706 	br	8038c4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  8036e8:	e0bff117 	ldw	r2,-60(fp)
  8036ec:	10800483 	ldbu	r2,18(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	10c00060 	cmpeqi	r3,r2,1
  8036f8:	18004a1e 	bne	r3,zero,803824 <OSFlagPost+0x270>
  8036fc:	10c00088 	cmpgei	r3,r2,2
  803700:	1800021e 	bne	r3,zero,80370c <OSFlagPost+0x158>
  803704:	10002f26 	beq	r2,zero,8037c4 <OSFlagPost+0x210>
  803708:	00005b06 	br	803878 <OSFlagPost+0x2c4>
  80370c:	10c000a0 	cmpeqi	r3,r2,2
  803710:	1800031e 	bne	r3,zero,803720 <OSFlagPost+0x16c>
  803714:	108000e0 	cmpeqi	r2,r2,3
  803718:	1000171e 	bne	r2,zero,803778 <OSFlagPost+0x1c4>
  80371c:	00005606 	br	803878 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803720:	e0bffc17 	ldw	r2,-16(fp)
  803724:	10c0020b 	ldhu	r3,8(r2)
  803728:	e0bff117 	ldw	r2,-60(fp)
  80372c:	1080040b 	ldhu	r2,16(r2)
  803730:	1884703a 	and	r2,r3,r2
  803734:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  803738:	e0bff117 	ldw	r2,-60(fp)
  80373c:	1080040b 	ldhu	r2,16(r2)
  803740:	10ffffcc 	andi	r3,r2,65535
  803744:	e0bff60b 	ldhu	r2,-40(fp)
  803748:	1880541e 	bne	r3,r2,80389c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80374c:	e0bff60b 	ldhu	r2,-40(fp)
  803750:	100b883a 	mov	r5,r2
  803754:	e13ff117 	ldw	r4,-60(fp)
  803758:	0803c4c0 	call	803c4c <OS_FlagTaskRdy>
  80375c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  803760:	e0bff683 	ldbu	r2,-38(fp)
  803764:	10800058 	cmpnei	r2,r2,1
  803768:	10004c1e 	bne	r2,zero,80389c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80376c:	00800044 	movi	r2,1
  803770:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803774:	00004906 	br	80389c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803778:	e0bffc17 	ldw	r2,-16(fp)
  80377c:	10c0020b 	ldhu	r3,8(r2)
  803780:	e0bff117 	ldw	r2,-60(fp)
  803784:	1080040b 	ldhu	r2,16(r2)
  803788:	1884703a 	and	r2,r3,r2
  80378c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  803790:	e0bff60b 	ldhu	r2,-40(fp)
  803794:	10004326 	beq	r2,zero,8038a4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803798:	e0bff60b 	ldhu	r2,-40(fp)
  80379c:	100b883a 	mov	r5,r2
  8037a0:	e13ff117 	ldw	r4,-60(fp)
  8037a4:	0803c4c0 	call	803c4c <OS_FlagTaskRdy>
  8037a8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8037ac:	e0bff683 	ldbu	r2,-38(fp)
  8037b0:	10800058 	cmpnei	r2,r2,1
  8037b4:	10003b1e 	bne	r2,zero,8038a4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8037b8:	00800044 	movi	r2,1
  8037bc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8037c0:	00003806 	br	8038a4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	1080020b 	ldhu	r2,8(r2)
  8037cc:	0084303a 	nor	r2,zero,r2
  8037d0:	1007883a 	mov	r3,r2
  8037d4:	e0bff117 	ldw	r2,-60(fp)
  8037d8:	1080040b 	ldhu	r2,16(r2)
  8037dc:	1884703a 	and	r2,r3,r2
  8037e0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8037e4:	e0bff117 	ldw	r2,-60(fp)
  8037e8:	1080040b 	ldhu	r2,16(r2)
  8037ec:	10ffffcc 	andi	r3,r2,65535
  8037f0:	e0bff60b 	ldhu	r2,-40(fp)
  8037f4:	18802d1e 	bne	r3,r2,8038ac <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8037f8:	e0bff60b 	ldhu	r2,-40(fp)
  8037fc:	100b883a 	mov	r5,r2
  803800:	e13ff117 	ldw	r4,-60(fp)
  803804:	0803c4c0 	call	803c4c <OS_FlagTaskRdy>
  803808:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  80380c:	e0bff683 	ldbu	r2,-38(fp)
  803810:	10800058 	cmpnei	r2,r2,1
  803814:	1000251e 	bne	r2,zero,8038ac <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  803818:	00800044 	movi	r2,1
  80381c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803820:	00002206 	br	8038ac <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803824:	e0bffc17 	ldw	r2,-16(fp)
  803828:	1080020b 	ldhu	r2,8(r2)
  80382c:	0084303a 	nor	r2,zero,r2
  803830:	1007883a 	mov	r3,r2
  803834:	e0bff117 	ldw	r2,-60(fp)
  803838:	1080040b 	ldhu	r2,16(r2)
  80383c:	1884703a 	and	r2,r3,r2
  803840:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  803844:	e0bff60b 	ldhu	r2,-40(fp)
  803848:	10001a26 	beq	r2,zero,8038b4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80384c:	e0bff60b 	ldhu	r2,-40(fp)
  803850:	100b883a 	mov	r5,r2
  803854:	e13ff117 	ldw	r4,-60(fp)
  803858:	0803c4c0 	call	803c4c <OS_FlagTaskRdy>
  80385c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  803860:	e0bff683 	ldbu	r2,-38(fp)
  803864:	10800058 	cmpnei	r2,r2,1
  803868:	1000121e 	bne	r2,zero,8038b4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80386c:	00800044 	movi	r2,1
  803870:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803874:	00000f06 	br	8038b4 <OSFlagPost+0x300>
  803878:	e0bff317 	ldw	r2,-52(fp)
  80387c:	e0bff515 	stw	r2,-44(fp)
  803880:	e0bff517 	ldw	r2,-44(fp)
  803884:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  803888:	e0bfff17 	ldw	r2,-4(fp)
  80388c:	00c01bc4 	movi	r3,111
  803890:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  803894:	0005883a 	mov	r2,zero
  803898:	00002606 	br	803934 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  80389c:	0001883a 	nop
  8038a0:	00000506 	br	8038b8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  8038a4:	0001883a 	nop
  8038a8:	00000306 	br	8038b8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  8038ac:	0001883a 	nop
  8038b0:	00000106 	br	8038b8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  8038b4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  8038b8:	e0bff117 	ldw	r2,-60(fp)
  8038bc:	10800017 	ldw	r2,0(r2)
  8038c0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8038c4:	e0bff117 	ldw	r2,-60(fp)
  8038c8:	103f871e 	bne	r2,zero,8036e8 <__alt_mem_epcs_flash_controller_0+0xff7fa6e8>
  8038cc:	e0bff317 	ldw	r2,-52(fp)
  8038d0:	e0bff715 	stw	r2,-36(fp)
  8038d4:	e0bff717 	ldw	r2,-36(fp)
  8038d8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  8038dc:	e0bff203 	ldbu	r2,-56(fp)
  8038e0:	10800058 	cmpnei	r2,r2,1
  8038e4:	1000011e 	bne	r2,zero,8038ec <OSFlagPost+0x338>
        OS_Sched();
  8038e8:	0801e6c0 	call	801e6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8038ec:	0005303a 	rdctl	r2,status
  8038f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8038f4:	e0fffa17 	ldw	r3,-24(fp)
  8038f8:	00bfff84 	movi	r2,-2
  8038fc:	1884703a 	and	r2,r3,r2
  803900:	1001703a 	wrctl	status,r2
  
  return context;
  803904:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  803908:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  80390c:	e0bffc17 	ldw	r2,-16(fp)
  803910:	1080020b 	ldhu	r2,8(r2)
  803914:	e0bff90d 	sth	r2,-28(fp)
  803918:	e0bff317 	ldw	r2,-52(fp)
  80391c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803920:	e0bff817 	ldw	r2,-32(fp)
  803924:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  803928:	e0bfff17 	ldw	r2,-4(fp)
  80392c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  803930:	e0bff90b 	ldhu	r2,-28(fp)
}
  803934:	e037883a 	mov	sp,fp
  803938:	dfc00117 	ldw	ra,4(sp)
  80393c:	df000017 	ldw	fp,0(sp)
  803940:	dec00204 	addi	sp,sp,8
  803944:	f800283a 	ret

00803948 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  803948:	defff904 	addi	sp,sp,-28
  80394c:	df000615 	stw	fp,24(sp)
  803950:	df000604 	addi	fp,sp,24
  803954:	e13ffe15 	stw	r4,-8(fp)
  803958:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80395c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  803960:	e0bfff17 	ldw	r2,-4(fp)
  803964:	1000021e 	bne	r2,zero,803970 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  803968:	0005883a 	mov	r2,zero
  80396c:	00002306 	br	8039fc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  803970:	e0bffe17 	ldw	r2,-8(fp)
  803974:	1000051e 	bne	r2,zero,80398c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803978:	e0bfff17 	ldw	r2,-4(fp)
  80397c:	00c01b84 	movi	r3,110
  803980:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803984:	0005883a 	mov	r2,zero
  803988:	00001c06 	br	8039fc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80398c:	e0bffe17 	ldw	r2,-8(fp)
  803990:	10800003 	ldbu	r2,0(r2)
  803994:	10803fcc 	andi	r2,r2,255
  803998:	10800160 	cmpeqi	r2,r2,5
  80399c:	1000051e 	bne	r2,zero,8039b4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  8039a0:	e0bfff17 	ldw	r2,-4(fp)
  8039a4:	00c00044 	movi	r3,1
  8039a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8039ac:	0005883a 	mov	r2,zero
  8039b0:	00001206 	br	8039fc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8039b4:	0005303a 	rdctl	r2,status
  8039b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8039bc:	e0fffc17 	ldw	r3,-16(fp)
  8039c0:	00bfff84 	movi	r2,-2
  8039c4:	1884703a 	and	r2,r3,r2
  8039c8:	1001703a 	wrctl	status,r2
  
  return context;
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8039d0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  8039d4:	e0bffe17 	ldw	r2,-8(fp)
  8039d8:	1080020b 	ldhu	r2,8(r2)
  8039dc:	e0bffb0d 	sth	r2,-20(fp)
  8039e0:	e0bffa17 	ldw	r2,-24(fp)
  8039e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8039e8:	e0bffd17 	ldw	r2,-12(fp)
  8039ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8039f0:	e0bfff17 	ldw	r2,-4(fp)
  8039f4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  8039f8:	e0bffb0b 	ldhu	r2,-20(fp)
}
  8039fc:	e037883a 	mov	sp,fp
  803a00:	df000017 	ldw	fp,0(sp)
  803a04:	dec00104 	addi	sp,sp,4
  803a08:	f800283a 	ret

00803a0c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  803a0c:	defff804 	addi	sp,sp,-32
  803a10:	df000715 	stw	fp,28(sp)
  803a14:	df000704 	addi	fp,sp,28
  803a18:	e13ffb15 	stw	r4,-20(fp)
  803a1c:	e17ffc15 	stw	r5,-16(fp)
  803a20:	3009883a 	mov	r4,r6
  803a24:	3807883a 	mov	r3,r7
  803a28:	e0800117 	ldw	r2,4(fp)
  803a2c:	e13ffd0d 	sth	r4,-12(fp)
  803a30:	e0fffe05 	stb	r3,-8(fp)
  803a34:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  803a38:	d0a04217 	ldw	r2,-32504(gp)
  803a3c:	d0e04217 	ldw	r3,-32504(gp)
  803a40:	18c00c03 	ldbu	r3,48(r3)
  803a44:	18c00814 	ori	r3,r3,32
  803a48:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  803a4c:	d0a04217 	ldw	r2,-32504(gp)
  803a50:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  803a54:	d0a04217 	ldw	r2,-32504(gp)
  803a58:	e0ffff0b 	ldhu	r3,-4(fp)
  803a5c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  803a60:	d0a04217 	ldw	r2,-32504(gp)
  803a64:	e0fffc17 	ldw	r3,-16(fp)
  803a68:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  803a6c:	e0bffc17 	ldw	r2,-16(fp)
  803a70:	e0fffd0b 	ldhu	r3,-12(fp)
  803a74:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  803a78:	e0bffc17 	ldw	r2,-16(fp)
  803a7c:	e0fffe03 	ldbu	r3,-8(fp)
  803a80:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  803a84:	d0e04217 	ldw	r3,-32504(gp)
  803a88:	e0bffc17 	ldw	r2,-16(fp)
  803a8c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  803a90:	e0bffb17 	ldw	r2,-20(fp)
  803a94:	10c00117 	ldw	r3,4(r2)
  803a98:	e0bffc17 	ldw	r2,-16(fp)
  803a9c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  803aa0:	e0bffc17 	ldw	r2,-16(fp)
  803aa4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  803aa8:	e0bffc17 	ldw	r2,-16(fp)
  803aac:	e0fffb17 	ldw	r3,-20(fp)
  803ab0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  803ab4:	e0bffb17 	ldw	r2,-20(fp)
  803ab8:	10800117 	ldw	r2,4(r2)
  803abc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  803ac0:	e0bff917 	ldw	r2,-28(fp)
  803ac4:	10000326 	beq	r2,zero,803ad4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  803ac8:	e0bff917 	ldw	r2,-28(fp)
  803acc:	e0fffc17 	ldw	r3,-16(fp)
  803ad0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  803ad4:	e0bffb17 	ldw	r2,-20(fp)
  803ad8:	e0fffc17 	ldw	r3,-16(fp)
  803adc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  803ae0:	d0a04217 	ldw	r2,-32504(gp)
  803ae4:	10800d03 	ldbu	r2,52(r2)
  803ae8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  803aec:	e0fffa03 	ldbu	r3,-24(fp)
  803af0:	e13ffa03 	ldbu	r4,-24(fp)
  803af4:	d0a03f44 	addi	r2,gp,-32515
  803af8:	2085883a 	add	r2,r4,r2
  803afc:	10800003 	ldbu	r2,0(r2)
  803b00:	1009883a 	mov	r4,r2
  803b04:	d0a04217 	ldw	r2,-32504(gp)
  803b08:	10800d43 	ldbu	r2,53(r2)
  803b0c:	0084303a 	nor	r2,zero,r2
  803b10:	2084703a 	and	r2,r4,r2
  803b14:	1009883a 	mov	r4,r2
  803b18:	d0a03f44 	addi	r2,gp,-32515
  803b1c:	1885883a 	add	r2,r3,r2
  803b20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  803b24:	e0fffa03 	ldbu	r3,-24(fp)
  803b28:	d0a03f44 	addi	r2,gp,-32515
  803b2c:	1885883a 	add	r2,r3,r2
  803b30:	10800003 	ldbu	r2,0(r2)
  803b34:	10803fcc 	andi	r2,r2,255
  803b38:	1000071e 	bne	r2,zero,803b58 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  803b3c:	d0a04217 	ldw	r2,-32504(gp)
  803b40:	10800d83 	ldbu	r2,54(r2)
  803b44:	0084303a 	nor	r2,zero,r2
  803b48:	1007883a 	mov	r3,r2
  803b4c:	d0a03f03 	ldbu	r2,-32516(gp)
  803b50:	1884703a 	and	r2,r3,r2
  803b54:	d0a03f05 	stb	r2,-32516(gp)
    }
}
  803b58:	0001883a 	nop
  803b5c:	e037883a 	mov	sp,fp
  803b60:	df000017 	ldw	fp,0(sp)
  803b64:	dec00104 	addi	sp,sp,4
  803b68:	f800283a 	ret

00803b6c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  803b6c:	defffb04 	addi	sp,sp,-20
  803b70:	dfc00415 	stw	ra,16(sp)
  803b74:	df000315 	stw	fp,12(sp)
  803b78:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  803b7c:	0140dc04 	movi	r5,880
  803b80:	01002074 	movhi	r4,129
  803b84:	2110bb04 	addi	r4,r4,17132
  803b88:	0801db00 	call	801db0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  803b8c:	00802074 	movhi	r2,129
  803b90:	1090bb04 	addi	r2,r2,17132
  803b94:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  803b98:	00802074 	movhi	r2,129
  803b9c:	1090c604 	addi	r2,r2,17176
  803ba0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  803ba4:	e03ffd0d 	sth	zero,-12(fp)
  803ba8:	00001306 	br	803bf8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  803bac:	e0bffe17 	ldw	r2,-8(fp)
  803bb0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  803bb4:	e0bffe17 	ldw	r2,-8(fp)
  803bb8:	e0ffff17 	ldw	r3,-4(fp)
  803bbc:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  803bc0:	e0bffe17 	ldw	r2,-8(fp)
  803bc4:	00c00fc4 	movi	r3,63
  803bc8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  803bcc:	e0bffe17 	ldw	r2,-8(fp)
  803bd0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  803bd4:	e0bffe17 	ldw	r2,-8(fp)
  803bd8:	10800b04 	addi	r2,r2,44
  803bdc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  803be0:	e0bfff17 	ldw	r2,-4(fp)
  803be4:	10800b04 	addi	r2,r2,44
  803be8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  803bec:	e0bffd0b 	ldhu	r2,-12(fp)
  803bf0:	10800044 	addi	r2,r2,1
  803bf4:	e0bffd0d 	sth	r2,-12(fp)
  803bf8:	e0bffd0b 	ldhu	r2,-12(fp)
  803bfc:	108004f0 	cmpltui	r2,r2,19
  803c00:	103fea1e 	bne	r2,zero,803bac <__alt_mem_epcs_flash_controller_0+0xff7fabac>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  803c04:	e0bffe17 	ldw	r2,-8(fp)
  803c08:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  803c0c:	e0bffe17 	ldw	r2,-8(fp)
  803c10:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  803c14:	e0bffe17 	ldw	r2,-8(fp)
  803c18:	00c00fc4 	movi	r3,63
  803c1c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  803c20:	e0bffe17 	ldw	r2,-8(fp)
  803c24:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  803c28:	00802074 	movhi	r2,129
  803c2c:	1090bb04 	addi	r2,r2,17132
  803c30:	d0a04415 	stw	r2,-32496(gp)
#endif
}
  803c34:	0001883a 	nop
  803c38:	e037883a 	mov	sp,fp
  803c3c:	dfc00117 	ldw	ra,4(sp)
  803c40:	df000017 	ldw	fp,0(sp)
  803c44:	dec00204 	addi	sp,sp,8
  803c48:	f800283a 	ret

00803c4c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  803c4c:	defffa04 	addi	sp,sp,-24
  803c50:	dfc00515 	stw	ra,20(sp)
  803c54:	df000415 	stw	fp,16(sp)
  803c58:	df000404 	addi	fp,sp,16
  803c5c:	e13ffe15 	stw	r4,-8(fp)
  803c60:	2805883a 	mov	r2,r5
  803c64:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  803c68:	e0bffe17 	ldw	r2,-8(fp)
  803c6c:	10800217 	ldw	r2,8(r2)
  803c70:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  803c74:	e0bffd17 	ldw	r2,-12(fp)
  803c78:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  803c7c:	e0bffd17 	ldw	r2,-12(fp)
  803c80:	e0ffff0b 	ldhu	r3,-4(fp)
  803c84:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  803c88:	e0bffd17 	ldw	r2,-12(fp)
  803c8c:	10c00c03 	ldbu	r3,48(r2)
  803c90:	00bff7c4 	movi	r2,-33
  803c94:	1884703a 	and	r2,r3,r2
  803c98:	1007883a 	mov	r3,r2
  803c9c:	e0bffd17 	ldw	r2,-12(fp)
  803ca0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  803cac:	e0bffd17 	ldw	r2,-12(fp)
  803cb0:	10800c03 	ldbu	r2,48(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1000181e 	bne	r2,zero,803d1c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  803cbc:	e0bffd17 	ldw	r2,-12(fp)
  803cc0:	10c00d83 	ldbu	r3,54(r2)
  803cc4:	d0a03f03 	ldbu	r2,-32516(gp)
  803cc8:	1884b03a 	or	r2,r3,r2
  803ccc:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  803cd0:	e0bffd17 	ldw	r2,-12(fp)
  803cd4:	10800d03 	ldbu	r2,52(r2)
  803cd8:	10c03fcc 	andi	r3,r2,255
  803cdc:	e0bffd17 	ldw	r2,-12(fp)
  803ce0:	10800d03 	ldbu	r2,52(r2)
  803ce4:	11003fcc 	andi	r4,r2,255
  803ce8:	d0a03f44 	addi	r2,gp,-32515
  803cec:	2085883a 	add	r2,r4,r2
  803cf0:	11000003 	ldbu	r4,0(r2)
  803cf4:	e0bffd17 	ldw	r2,-12(fp)
  803cf8:	10800d43 	ldbu	r2,53(r2)
  803cfc:	2084b03a 	or	r2,r4,r2
  803d00:	1009883a 	mov	r4,r2
  803d04:	d0a03f44 	addi	r2,gp,-32515
  803d08:	1885883a 	add	r2,r3,r2
  803d0c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  803d10:	00800044 	movi	r2,1
  803d14:	e0bffc05 	stb	r2,-16(fp)
  803d18:	00000106 	br	803d20 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  803d1c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  803d20:	e13ffe17 	ldw	r4,-8(fp)
  803d24:	0803d400 	call	803d40 <OS_FlagUnlink>
    return (sched);
  803d28:	e0bffc03 	ldbu	r2,-16(fp)
}
  803d2c:	e037883a 	mov	sp,fp
  803d30:	dfc00117 	ldw	ra,4(sp)
  803d34:	df000017 	ldw	fp,0(sp)
  803d38:	dec00204 	addi	sp,sp,8
  803d3c:	f800283a 	ret

00803d40 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  803d40:	defffa04 	addi	sp,sp,-24
  803d44:	df000515 	stw	fp,20(sp)
  803d48:	df000504 	addi	fp,sp,20
  803d4c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  803d50:	e0bfff17 	ldw	r2,-4(fp)
  803d54:	10800117 	ldw	r2,4(r2)
  803d58:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  803d5c:	e0bfff17 	ldw	r2,-4(fp)
  803d60:	10800017 	ldw	r2,0(r2)
  803d64:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  803d68:	e0bffb17 	ldw	r2,-20(fp)
  803d6c:	10000b1e 	bne	r2,zero,803d9c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  803d70:	e0bfff17 	ldw	r2,-4(fp)
  803d74:	10800317 	ldw	r2,12(r2)
  803d78:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  803d7c:	e0bffd17 	ldw	r2,-12(fp)
  803d80:	e0fffc17 	ldw	r3,-16(fp)
  803d84:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  803d88:	e0bffc17 	ldw	r2,-16(fp)
  803d8c:	10000b26 	beq	r2,zero,803dbc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  803d90:	e0bffc17 	ldw	r2,-16(fp)
  803d94:	10000115 	stw	zero,4(r2)
  803d98:	00000806 	br	803dbc <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  803d9c:	e0bffb17 	ldw	r2,-20(fp)
  803da0:	e0fffc17 	ldw	r3,-16(fp)
  803da4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  803da8:	e0bffc17 	ldw	r2,-16(fp)
  803dac:	10000326 	beq	r2,zero,803dbc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  803db0:	e0bffc17 	ldw	r2,-16(fp)
  803db4:	e0fffb17 	ldw	r3,-20(fp)
  803db8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  803dbc:	e0bfff17 	ldw	r2,-4(fp)
  803dc0:	10800217 	ldw	r2,8(r2)
  803dc4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  803dc8:	e0bffe17 	ldw	r2,-8(fp)
  803dcc:	10000a15 	stw	zero,40(r2)
#endif
}
  803dd0:	0001883a 	nop
  803dd4:	e037883a 	mov	sp,fp
  803dd8:	df000017 	ldw	fp,0(sp)
  803ddc:	dec00104 	addi	sp,sp,4
  803de0:	f800283a 	ret

00803de4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  803de4:	defff404 	addi	sp,sp,-48
  803de8:	df000b15 	stw	fp,44(sp)
  803dec:	df000b04 	addi	fp,sp,44
  803df0:	e13ffc15 	stw	r4,-16(fp)
  803df4:	e17ffd15 	stw	r5,-12(fp)
  803df8:	e1bffe15 	stw	r6,-8(fp)
  803dfc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  803e00:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  803e04:	e0bfff17 	ldw	r2,-4(fp)
  803e08:	1000021e 	bne	r2,zero,803e14 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  803e0c:	0005883a 	mov	r2,zero
  803e10:	00006506 	br	803fa8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  803e14:	e0bffc17 	ldw	r2,-16(fp)
  803e18:	1000051e 	bne	r2,zero,803e30 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  803e1c:	e0bfff17 	ldw	r2,-4(fp)
  803e20:	00c01884 	movi	r3,98
  803e24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803e28:	0005883a 	mov	r2,zero
  803e2c:	00005e06 	br	803fa8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  803e30:	e0bffc17 	ldw	r2,-16(fp)
  803e34:	108000cc 	andi	r2,r2,3
  803e38:	10000526 	beq	r2,zero,803e50 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  803e3c:	e0bfff17 	ldw	r2,-4(fp)
  803e40:	00c01884 	movi	r3,98
  803e44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803e48:	0005883a 	mov	r2,zero
  803e4c:	00005606 	br	803fa8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  803e50:	e0bffd17 	ldw	r2,-12(fp)
  803e54:	108000a8 	cmpgeui	r2,r2,2
  803e58:	1000051e 	bne	r2,zero,803e70 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  803e5c:	e0bfff17 	ldw	r2,-4(fp)
  803e60:	00c016c4 	movi	r3,91
  803e64:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803e68:	0005883a 	mov	r2,zero
  803e6c:	00004e06 	br	803fa8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  803e70:	e0bffe17 	ldw	r2,-8(fp)
  803e74:	10800128 	cmpgeui	r2,r2,4
  803e78:	1000051e 	bne	r2,zero,803e90 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  803e7c:	e0bfff17 	ldw	r2,-4(fp)
  803e80:	00c01704 	movi	r3,92
  803e84:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803e88:	0005883a 	mov	r2,zero
  803e8c:	00004606 	br	803fa8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803e90:	0005303a 	rdctl	r2,status
  803e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803e98:	e0fffb17 	ldw	r3,-20(fp)
  803e9c:	00bfff84 	movi	r2,-2
  803ea0:	1884703a 	and	r2,r3,r2
  803ea4:	1001703a 	wrctl	status,r2
  
  return context;
  803ea8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  803eac:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  803eb0:	d0a03c17 	ldw	r2,-32528(gp)
  803eb4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  803eb8:	d0a03c17 	ldw	r2,-32528(gp)
  803ebc:	10000326 	beq	r2,zero,803ecc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  803ec0:	d0a03c17 	ldw	r2,-32528(gp)
  803ec4:	10800117 	ldw	r2,4(r2)
  803ec8:	d0a03c15 	stw	r2,-32528(gp)
  803ecc:	e0bff817 	ldw	r2,-32(fp)
  803ed0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803ed4:	e0bff917 	ldw	r2,-28(fp)
  803ed8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  803edc:	e0bffa17 	ldw	r2,-24(fp)
  803ee0:	1000051e 	bne	r2,zero,803ef8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  803ee4:	e0bfff17 	ldw	r2,-4(fp)
  803ee8:	00c01684 	movi	r3,90
  803eec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  803ef0:	0005883a 	mov	r2,zero
  803ef4:	00002c06 	br	803fa8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  803ef8:	e0bffc17 	ldw	r2,-16(fp)
  803efc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  803f00:	e0fffc17 	ldw	r3,-16(fp)
  803f04:	e0bffe17 	ldw	r2,-8(fp)
  803f08:	1885883a 	add	r2,r3,r2
  803f0c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  803f10:	e03ff715 	stw	zero,-36(fp)
  803f14:	00000c06 	br	803f48 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  803f18:	e0bff617 	ldw	r2,-40(fp)
  803f1c:	e0fff517 	ldw	r3,-44(fp)
  803f20:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  803f24:	e0bff517 	ldw	r2,-44(fp)
  803f28:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  803f2c:	e0fff517 	ldw	r3,-44(fp)
  803f30:	e0bffe17 	ldw	r2,-8(fp)
  803f34:	1885883a 	add	r2,r3,r2
  803f38:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  803f3c:	e0bff717 	ldw	r2,-36(fp)
  803f40:	10800044 	addi	r2,r2,1
  803f44:	e0bff715 	stw	r2,-36(fp)
  803f48:	e0bffd17 	ldw	r2,-12(fp)
  803f4c:	10bfffc4 	addi	r2,r2,-1
  803f50:	e0fff717 	ldw	r3,-36(fp)
  803f54:	18bff036 	bltu	r3,r2,803f18 <__alt_mem_epcs_flash_controller_0+0xff7faf18>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  803f58:	e0bff617 	ldw	r2,-40(fp)
  803f5c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  803f60:	e0bffa17 	ldw	r2,-24(fp)
  803f64:	e0fffc17 	ldw	r3,-16(fp)
  803f68:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  803f6c:	e0bffa17 	ldw	r2,-24(fp)
  803f70:	e0fffc17 	ldw	r3,-16(fp)
  803f74:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  803f78:	e0bffa17 	ldw	r2,-24(fp)
  803f7c:	e0fffd17 	ldw	r3,-12(fp)
  803f80:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  803f84:	e0bffa17 	ldw	r2,-24(fp)
  803f88:	e0fffd17 	ldw	r3,-12(fp)
  803f8c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  803f90:	e0bffa17 	ldw	r2,-24(fp)
  803f94:	e0fffe17 	ldw	r3,-8(fp)
  803f98:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  803f9c:	e0bfff17 	ldw	r2,-4(fp)
  803fa0:	10000005 	stb	zero,0(r2)
    return (pmem);
  803fa4:	e0bffa17 	ldw	r2,-24(fp)
}
  803fa8:	e037883a 	mov	sp,fp
  803fac:	df000017 	ldw	fp,0(sp)
  803fb0:	dec00104 	addi	sp,sp,4
  803fb4:	f800283a 	ret

00803fb8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  803fb8:	defff804 	addi	sp,sp,-32
  803fbc:	df000715 	stw	fp,28(sp)
  803fc0:	df000704 	addi	fp,sp,28
  803fc4:	e13ffe15 	stw	r4,-8(fp)
  803fc8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  803fcc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  803fd0:	e0bfff17 	ldw	r2,-4(fp)
  803fd4:	1000021e 	bne	r2,zero,803fe0 <OSMemGet+0x28>
        return ((void *)0);
  803fd8:	0005883a 	mov	r2,zero
  803fdc:	00002e06 	br	804098 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  803fe0:	e0bffe17 	ldw	r2,-8(fp)
  803fe4:	1000051e 	bne	r2,zero,803ffc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  803fe8:	e0bfff17 	ldw	r2,-4(fp)
  803fec:	00c01804 	movi	r3,96
  803ff0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  803ff4:	0005883a 	mov	r2,zero
  803ff8:	00002706 	br	804098 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803ffc:	0005303a 	rdctl	r2,status
  804000:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804004:	e0fffd17 	ldw	r3,-12(fp)
  804008:	00bfff84 	movi	r2,-2
  80400c:	1884703a 	and	r2,r3,r2
  804010:	1001703a 	wrctl	status,r2
  
  return context;
  804014:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804018:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80401c:	e0bffe17 	ldw	r2,-8(fp)
  804020:	10800417 	ldw	r2,16(r2)
  804024:	10001426 	beq	r2,zero,804078 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  804028:	e0bffe17 	ldw	r2,-8(fp)
  80402c:	10800117 	ldw	r2,4(r2)
  804030:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  804034:	e0bffb17 	ldw	r2,-20(fp)
  804038:	10c00017 	ldw	r3,0(r2)
  80403c:	e0bffe17 	ldw	r2,-8(fp)
  804040:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  804044:	e0bffe17 	ldw	r2,-8(fp)
  804048:	10800417 	ldw	r2,16(r2)
  80404c:	10ffffc4 	addi	r3,r2,-1
  804050:	e0bffe17 	ldw	r2,-8(fp)
  804054:	10c00415 	stw	r3,16(r2)
  804058:	e0bff917 	ldw	r2,-28(fp)
  80405c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804060:	e0bffa17 	ldw	r2,-24(fp)
  804064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  804068:	e0bfff17 	ldw	r2,-4(fp)
  80406c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  804070:	e0bffb17 	ldw	r2,-20(fp)
  804074:	00000806 	br	804098 <OSMemGet+0xe0>
  804078:	e0bff917 	ldw	r2,-28(fp)
  80407c:	e0bffc15 	stw	r2,-16(fp)
  804080:	e0bffc17 	ldw	r2,-16(fp)
  804084:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  804088:	e0bfff17 	ldw	r2,-4(fp)
  80408c:	00c01744 	movi	r3,93
  804090:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  804094:	0005883a 	mov	r2,zero
}
  804098:	e037883a 	mov	sp,fp
  80409c:	df000017 	ldw	fp,0(sp)
  8040a0:	dec00104 	addi	sp,sp,4
  8040a4:	f800283a 	ret

008040a8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8040a8:	defff704 	addi	sp,sp,-36
  8040ac:	dfc00815 	stw	ra,32(sp)
  8040b0:	df000715 	stw	fp,28(sp)
  8040b4:	df000704 	addi	fp,sp,28
  8040b8:	e13ffd15 	stw	r4,-12(fp)
  8040bc:	e17ffe15 	stw	r5,-8(fp)
  8040c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8040c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8040c8:	e0bfff17 	ldw	r2,-4(fp)
  8040cc:	1000021e 	bne	r2,zero,8040d8 <OSMemNameGet+0x30>
        return (0);
  8040d0:	0005883a 	mov	r2,zero
  8040d4:	00002b06 	br	804184 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8040d8:	e0bffd17 	ldw	r2,-12(fp)
  8040dc:	1000051e 	bne	r2,zero,8040f4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8040e0:	e0bfff17 	ldw	r2,-4(fp)
  8040e4:	00c01804 	movi	r3,96
  8040e8:	10c00005 	stb	r3,0(r2)
        return (0);
  8040ec:	0005883a 	mov	r2,zero
  8040f0:	00002406 	br	804184 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8040f4:	e0bffe17 	ldw	r2,-8(fp)
  8040f8:	1000051e 	bne	r2,zero,804110 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  8040fc:	e0bfff17 	ldw	r2,-4(fp)
  804100:	00c00304 	movi	r3,12
  804104:	10c00005 	stb	r3,0(r2)
        return (0);
  804108:	0005883a 	mov	r2,zero
  80410c:	00001d06 	br	804184 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  804110:	d0a04103 	ldbu	r2,-32508(gp)
  804114:	10803fcc 	andi	r2,r2,255
  804118:	10000526 	beq	r2,zero,804130 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  80411c:	e0bfff17 	ldw	r2,-4(fp)
  804120:	00c00444 	movi	r3,17
  804124:	10c00005 	stb	r3,0(r2)
        return (0);
  804128:	0005883a 	mov	r2,zero
  80412c:	00001506 	br	804184 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804130:	0005303a 	rdctl	r2,status
  804134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804138:	e0fffb17 	ldw	r3,-20(fp)
  80413c:	00bfff84 	movi	r2,-2
  804140:	1884703a 	and	r2,r3,r2
  804144:	1001703a 	wrctl	status,r2
  
  return context;
  804148:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80414c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  804150:	e0bffd17 	ldw	r2,-12(fp)
  804154:	10800504 	addi	r2,r2,20
  804158:	100b883a 	mov	r5,r2
  80415c:	e13ffe17 	ldw	r4,-8(fp)
  804160:	0801fb00 	call	801fb0 <OS_StrCopy>
  804164:	e0bffa05 	stb	r2,-24(fp)
  804168:	e0bff917 	ldw	r2,-28(fp)
  80416c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804170:	e0bffc17 	ldw	r2,-16(fp)
  804174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804178:	e0bfff17 	ldw	r2,-4(fp)
  80417c:	10000005 	stb	zero,0(r2)
    return (len);
  804180:	e0bffa03 	ldbu	r2,-24(fp)
}
  804184:	e037883a 	mov	sp,fp
  804188:	dfc00117 	ldw	ra,4(sp)
  80418c:	df000017 	ldw	fp,0(sp)
  804190:	dec00204 	addi	sp,sp,8
  804194:	f800283a 	ret

00804198 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  804198:	defff604 	addi	sp,sp,-40
  80419c:	dfc00915 	stw	ra,36(sp)
  8041a0:	df000815 	stw	fp,32(sp)
  8041a4:	df000804 	addi	fp,sp,32
  8041a8:	e13ffd15 	stw	r4,-12(fp)
  8041ac:	e17ffe15 	stw	r5,-8(fp)
  8041b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8041b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8041b8:	e0bfff17 	ldw	r2,-4(fp)
  8041bc:	10003526 	beq	r2,zero,804294 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8041c0:	e0bffd17 	ldw	r2,-12(fp)
  8041c4:	1000041e 	bne	r2,zero,8041d8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8041c8:	e0bfff17 	ldw	r2,-4(fp)
  8041cc:	00c01804 	movi	r3,96
  8041d0:	10c00005 	stb	r3,0(r2)
        return;
  8041d4:	00003006 	br	804298 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8041d8:	e0bffe17 	ldw	r2,-8(fp)
  8041dc:	1000041e 	bne	r2,zero,8041f0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  8041e0:	e0bfff17 	ldw	r2,-4(fp)
  8041e4:	00c00304 	movi	r3,12
  8041e8:	10c00005 	stb	r3,0(r2)
        return;
  8041ec:	00002a06 	br	804298 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8041f0:	d0a04103 	ldbu	r2,-32508(gp)
  8041f4:	10803fcc 	andi	r2,r2,255
  8041f8:	10000426 	beq	r2,zero,80420c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8041fc:	e0bfff17 	ldw	r2,-4(fp)
  804200:	00c00484 	movi	r3,18
  804204:	10c00005 	stb	r3,0(r2)
        return;
  804208:	00002306 	br	804298 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80420c:	0005303a 	rdctl	r2,status
  804210:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804214:	e0fffc17 	ldw	r3,-16(fp)
  804218:	00bfff84 	movi	r2,-2
  80421c:	1884703a 	and	r2,r3,r2
  804220:	1001703a 	wrctl	status,r2
  
  return context;
  804224:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804228:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80422c:	e13ffe17 	ldw	r4,-8(fp)
  804230:	08020240 	call	802024 <OS_StrLen>
  804234:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  804238:	e0bffa03 	ldbu	r2,-24(fp)
  80423c:	10800830 	cmpltui	r2,r2,32
  804240:	1000081e 	bne	r2,zero,804264 <OSMemNameSet+0xcc>
  804244:	e0bff817 	ldw	r2,-32(fp)
  804248:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80424c:	e0bff917 	ldw	r2,-28(fp)
  804250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  804254:	e0bfff17 	ldw	r2,-4(fp)
  804258:	00c018c4 	movi	r3,99
  80425c:	10c00005 	stb	r3,0(r2)
        return;
  804260:	00000d06 	br	804298 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  804264:	e0bffd17 	ldw	r2,-12(fp)
  804268:	10800504 	addi	r2,r2,20
  80426c:	e17ffe17 	ldw	r5,-8(fp)
  804270:	1009883a 	mov	r4,r2
  804274:	0801fb00 	call	801fb0 <OS_StrCopy>
  804278:	e0bff817 	ldw	r2,-32(fp)
  80427c:	e0bffb15 	stw	r2,-20(fp)
  804280:	e0bffb17 	ldw	r2,-20(fp)
  804284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804288:	e0bfff17 	ldw	r2,-4(fp)
  80428c:	10000005 	stb	zero,0(r2)
  804290:	00000106 	br	804298 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  804294:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  804298:	e037883a 	mov	sp,fp
  80429c:	dfc00117 	ldw	ra,4(sp)
  8042a0:	df000017 	ldw	fp,0(sp)
  8042a4:	dec00204 	addi	sp,sp,8
  8042a8:	f800283a 	ret

008042ac <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  8042ac:	defff904 	addi	sp,sp,-28
  8042b0:	df000615 	stw	fp,24(sp)
  8042b4:	df000604 	addi	fp,sp,24
  8042b8:	e13ffe15 	stw	r4,-8(fp)
  8042bc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8042c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8042c4:	e0bffe17 	ldw	r2,-8(fp)
  8042c8:	1000021e 	bne	r2,zero,8042d4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8042cc:	00801804 	movi	r2,96
  8042d0:	00002806 	br	804374 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  8042d4:	e0bfff17 	ldw	r2,-4(fp)
  8042d8:	1000021e 	bne	r2,zero,8042e4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  8042dc:	008017c4 	movi	r2,95
  8042e0:	00002406 	br	804374 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8042e4:	0005303a 	rdctl	r2,status
  8042e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8042ec:	e0fffd17 	ldw	r3,-12(fp)
  8042f0:	00bfff84 	movi	r2,-2
  8042f4:	1884703a 	and	r2,r3,r2
  8042f8:	1001703a 	wrctl	status,r2
  
  return context;
  8042fc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804300:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  804304:	e0bffe17 	ldw	r2,-8(fp)
  804308:	10c00417 	ldw	r3,16(r2)
  80430c:	e0bffe17 	ldw	r2,-8(fp)
  804310:	10800317 	ldw	r2,12(r2)
  804314:	18800636 	bltu	r3,r2,804330 <OSMemPut+0x84>
  804318:	e0bffa17 	ldw	r2,-24(fp)
  80431c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804320:	e0bffb17 	ldw	r2,-20(fp)
  804324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  804328:	00801784 	movi	r2,94
  80432c:	00001106 	br	804374 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  804330:	e0bffe17 	ldw	r2,-8(fp)
  804334:	10c00117 	ldw	r3,4(r2)
  804338:	e0bfff17 	ldw	r2,-4(fp)
  80433c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  804340:	e0bffe17 	ldw	r2,-8(fp)
  804344:	e0ffff17 	ldw	r3,-4(fp)
  804348:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80434c:	e0bffe17 	ldw	r2,-8(fp)
  804350:	10800417 	ldw	r2,16(r2)
  804354:	10c00044 	addi	r3,r2,1
  804358:	e0bffe17 	ldw	r2,-8(fp)
  80435c:	10c00415 	stw	r3,16(r2)
  804360:	e0bffa17 	ldw	r2,-24(fp)
  804364:	e0bffc15 	stw	r2,-16(fp)
  804368:	e0bffc17 	ldw	r2,-16(fp)
  80436c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  804370:	0005883a 	mov	r2,zero
}
  804374:	e037883a 	mov	sp,fp
  804378:	df000017 	ldw	fp,0(sp)
  80437c:	dec00104 	addi	sp,sp,4
  804380:	f800283a 	ret

00804384 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  804384:	defffa04 	addi	sp,sp,-24
  804388:	df000515 	stw	fp,20(sp)
  80438c:	df000504 	addi	fp,sp,20
  804390:	e13ffe15 	stw	r4,-8(fp)
  804394:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804398:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80439c:	e0bffe17 	ldw	r2,-8(fp)
  8043a0:	1000021e 	bne	r2,zero,8043ac <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8043a4:	00801804 	movi	r2,96
  8043a8:	00002c06 	br	80445c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  8043ac:	e0bfff17 	ldw	r2,-4(fp)
  8043b0:	1000021e 	bne	r2,zero,8043bc <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  8043b4:	00801844 	movi	r2,97
  8043b8:	00002806 	br	80445c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8043bc:	0005303a 	rdctl	r2,status
  8043c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8043c4:	e0fffc17 	ldw	r3,-16(fp)
  8043c8:	00bfff84 	movi	r2,-2
  8043cc:	1884703a 	and	r2,r3,r2
  8043d0:	1001703a 	wrctl	status,r2
  
  return context;
  8043d4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8043d8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  8043dc:	e0bffe17 	ldw	r2,-8(fp)
  8043e0:	10c00017 	ldw	r3,0(r2)
  8043e4:	e0bfff17 	ldw	r2,-4(fp)
  8043e8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  8043ec:	e0bffe17 	ldw	r2,-8(fp)
  8043f0:	10c00117 	ldw	r3,4(r2)
  8043f4:	e0bfff17 	ldw	r2,-4(fp)
  8043f8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  8043fc:	e0bffe17 	ldw	r2,-8(fp)
  804400:	10c00217 	ldw	r3,8(r2)
  804404:	e0bfff17 	ldw	r2,-4(fp)
  804408:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80440c:	e0bffe17 	ldw	r2,-8(fp)
  804410:	10c00317 	ldw	r3,12(r2)
  804414:	e0bfff17 	ldw	r2,-4(fp)
  804418:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80441c:	e0bffe17 	ldw	r2,-8(fp)
  804420:	10c00417 	ldw	r3,16(r2)
  804424:	e0bfff17 	ldw	r2,-4(fp)
  804428:	10c00415 	stw	r3,16(r2)
  80442c:	e0bffb17 	ldw	r2,-20(fp)
  804430:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804434:	e0bffd17 	ldw	r2,-12(fp)
  804438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80443c:	e0bfff17 	ldw	r2,-4(fp)
  804440:	10c00317 	ldw	r3,12(r2)
  804444:	e0bfff17 	ldw	r2,-4(fp)
  804448:	10800417 	ldw	r2,16(r2)
  80444c:	1887c83a 	sub	r3,r3,r2
  804450:	e0bfff17 	ldw	r2,-4(fp)
  804454:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  804458:	0005883a 	mov	r2,zero
}
  80445c:	e037883a 	mov	sp,fp
  804460:	df000017 	ldw	fp,0(sp)
  804464:	dec00104 	addi	sp,sp,4
  804468:	f800283a 	ret

0080446c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80446c:	defffc04 	addi	sp,sp,-16
  804470:	dfc00315 	stw	ra,12(sp)
  804474:	df000215 	stw	fp,8(sp)
  804478:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80447c:	01430c04 	movi	r5,3120
  804480:	01002074 	movhi	r4,129
  804484:	21119704 	addi	r4,r4,18012
  804488:	0801db00 	call	801db0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80448c:	00802074 	movhi	r2,129
  804490:	10919704 	addi	r2,r2,18012
  804494:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  804498:	e03fff0d 	sth	zero,-4(fp)
  80449c:	00001606 	br	8044f8 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  8044a0:	e0bfff0b 	ldhu	r2,-4(fp)
  8044a4:	10800044 	addi	r2,r2,1
  8044a8:	01400d04 	movi	r5,52
  8044ac:	1009883a 	mov	r4,r2
  8044b0:	080c71c0 	call	80c71c <__mulsi3>
  8044b4:	1007883a 	mov	r3,r2
  8044b8:	00802074 	movhi	r2,129
  8044bc:	10919704 	addi	r2,r2,18012
  8044c0:	1887883a 	add	r3,r3,r2
  8044c4:	e0bffe17 	ldw	r2,-8(fp)
  8044c8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  8044cc:	e0bffe17 	ldw	r2,-8(fp)
  8044d0:	00c00fc4 	movi	r3,63
  8044d4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  8044d8:	e0bffe17 	ldw	r2,-8(fp)
  8044dc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  8044e0:	e0bffe17 	ldw	r2,-8(fp)
  8044e4:	10800d04 	addi	r2,r2,52
  8044e8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  8044ec:	e0bfff0b 	ldhu	r2,-4(fp)
  8044f0:	10800044 	addi	r2,r2,1
  8044f4:	e0bfff0d 	sth	r2,-4(fp)
  8044f8:	e0bfff0b 	ldhu	r2,-4(fp)
  8044fc:	10800ef0 	cmpltui	r2,r2,59
  804500:	103fe71e 	bne	r2,zero,8044a0 <__alt_mem_epcs_flash_controller_0+0xff7fb4a0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  804504:	e0bffe17 	ldw	r2,-8(fp)
  804508:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80450c:	e0bffe17 	ldw	r2,-8(fp)
  804510:	00c00fc4 	movi	r3,63
  804514:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  804518:	e0bffe17 	ldw	r2,-8(fp)
  80451c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  804520:	00802074 	movhi	r2,129
  804524:	10919704 	addi	r2,r2,18012
  804528:	d0a03c15 	stw	r2,-32528(gp)
#endif
}
  80452c:	0001883a 	nop
  804530:	e037883a 	mov	sp,fp
  804534:	dfc00117 	ldw	ra,4(sp)
  804538:	df000017 	ldw	fp,0(sp)
  80453c:	dec00204 	addi	sp,sp,8
  804540:	f800283a 	ret

00804544 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  804544:	defff804 	addi	sp,sp,-32
  804548:	df000715 	stw	fp,28(sp)
  80454c:	df000704 	addi	fp,sp,28
  804550:	e13ffe15 	stw	r4,-8(fp)
  804554:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804558:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80455c:	e0bfff17 	ldw	r2,-4(fp)
  804560:	1000021e 	bne	r2,zero,80456c <OSQAccept+0x28>
        return ((void *)0);
  804564:	0005883a 	mov	r2,zero
  804568:	00004206 	br	804674 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80456c:	e0bffe17 	ldw	r2,-8(fp)
  804570:	1000051e 	bne	r2,zero,804588 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  804574:	e0bfff17 	ldw	r2,-4(fp)
  804578:	00c00104 	movi	r3,4
  80457c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804580:	0005883a 	mov	r2,zero
  804584:	00003b06 	br	804674 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  804588:	e0bffe17 	ldw	r2,-8(fp)
  80458c:	10800003 	ldbu	r2,0(r2)
  804590:	10803fcc 	andi	r2,r2,255
  804594:	108000a0 	cmpeqi	r2,r2,2
  804598:	1000051e 	bne	r2,zero,8045b0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  80459c:	e0bfff17 	ldw	r2,-4(fp)
  8045a0:	00c00044 	movi	r3,1
  8045a4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8045a8:	0005883a 	mov	r2,zero
  8045ac:	00003106 	br	804674 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8045b0:	0005303a 	rdctl	r2,status
  8045b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8045b8:	e0fffd17 	ldw	r3,-12(fp)
  8045bc:	00bfff84 	movi	r2,-2
  8045c0:	1884703a 	and	r2,r3,r2
  8045c4:	1001703a 	wrctl	status,r2
  
  return context;
  8045c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8045cc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8045d0:	e0bffe17 	ldw	r2,-8(fp)
  8045d4:	10800117 	ldw	r2,4(r2)
  8045d8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  8045dc:	e0bffc17 	ldw	r2,-16(fp)
  8045e0:	1080058b 	ldhu	r2,22(r2)
  8045e4:	10bfffcc 	andi	r2,r2,65535
  8045e8:	10001926 	beq	r2,zero,804650 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  8045ec:	e0bffc17 	ldw	r2,-16(fp)
  8045f0:	10800417 	ldw	r2,16(r2)
  8045f4:	11000104 	addi	r4,r2,4
  8045f8:	e0fffc17 	ldw	r3,-16(fp)
  8045fc:	19000415 	stw	r4,16(r3)
  804600:	10800017 	ldw	r2,0(r2)
  804604:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  804608:	e0bffc17 	ldw	r2,-16(fp)
  80460c:	1080058b 	ldhu	r2,22(r2)
  804610:	10bfffc4 	addi	r2,r2,-1
  804614:	1007883a 	mov	r3,r2
  804618:	e0bffc17 	ldw	r2,-16(fp)
  80461c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  804620:	e0bffc17 	ldw	r2,-16(fp)
  804624:	10c00417 	ldw	r3,16(r2)
  804628:	e0bffc17 	ldw	r2,-16(fp)
  80462c:	10800217 	ldw	r2,8(r2)
  804630:	1880041e 	bne	r3,r2,804644 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	10c00117 	ldw	r3,4(r2)
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  804644:	e0bfff17 	ldw	r2,-4(fp)
  804648:	10000005 	stb	zero,0(r2)
  80464c:	00000406 	br	804660 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  804650:	e0bfff17 	ldw	r2,-4(fp)
  804654:	00c007c4 	movi	r3,31
  804658:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80465c:	e03ff915 	stw	zero,-28(fp)
  804660:	e0bffa17 	ldw	r2,-24(fp)
  804664:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804668:	e0bffb17 	ldw	r2,-20(fp)
  80466c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  804670:	e0bff917 	ldw	r2,-28(fp)
}
  804674:	e037883a 	mov	sp,fp
  804678:	df000017 	ldw	fp,0(sp)
  80467c:	dec00104 	addi	sp,sp,4
  804680:	f800283a 	ret

00804684 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  804684:	defff404 	addi	sp,sp,-48
  804688:	dfc00b15 	stw	ra,44(sp)
  80468c:	df000a15 	stw	fp,40(sp)
  804690:	df000a04 	addi	fp,sp,40
  804694:	e13ffe15 	stw	r4,-8(fp)
  804698:	2805883a 	mov	r2,r5
  80469c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8046a0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  8046a4:	d0a04103 	ldbu	r2,-32508(gp)
  8046a8:	10803fcc 	andi	r2,r2,255
  8046ac:	10000226 	beq	r2,zero,8046b8 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  8046b0:	0005883a 	mov	r2,zero
  8046b4:	00005906 	br	80481c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8046b8:	0005303a 	rdctl	r2,status
  8046bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8046c0:	e0fffd17 	ldw	r3,-12(fp)
  8046c4:	00bfff84 	movi	r2,-2
  8046c8:	1884703a 	and	r2,r3,r2
  8046cc:	1001703a 	wrctl	status,r2
  
  return context;
  8046d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8046d4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  8046d8:	d0a04017 	ldw	r2,-32512(gp)
  8046dc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  8046e0:	d0a04017 	ldw	r2,-32512(gp)
  8046e4:	10000326 	beq	r2,zero,8046f4 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8046e8:	d0a04017 	ldw	r2,-32512(gp)
  8046ec:	10800117 	ldw	r2,4(r2)
  8046f0:	d0a04015 	stw	r2,-32512(gp)
  8046f4:	e0bff717 	ldw	r2,-36(fp)
  8046f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046fc:	e0bff817 	ldw	r2,-32(fp)
  804700:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  804704:	e0bff617 	ldw	r2,-40(fp)
  804708:	10004326 	beq	r2,zero,804818 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80470c:	0005303a 	rdctl	r2,status
  804710:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804714:	e0fff917 	ldw	r3,-28(fp)
  804718:	00bfff84 	movi	r2,-2
  80471c:	1884703a 	and	r2,r3,r2
  804720:	1001703a 	wrctl	status,r2
  
  return context;
  804724:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  804728:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80472c:	d0a03e17 	ldw	r2,-32520(gp)
  804730:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  804734:	e0bffb17 	ldw	r2,-20(fp)
  804738:	10002d26 	beq	r2,zero,8047f0 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80473c:	d0a03e17 	ldw	r2,-32520(gp)
  804740:	10800017 	ldw	r2,0(r2)
  804744:	d0a03e15 	stw	r2,-32520(gp)
  804748:	e0bff717 	ldw	r2,-36(fp)
  80474c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804750:	e0bffa17 	ldw	r2,-24(fp)
  804754:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  804758:	e0bffb17 	ldw	r2,-20(fp)
  80475c:	e0fffe17 	ldw	r3,-8(fp)
  804760:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  804764:	e0bfff0b 	ldhu	r2,-4(fp)
  804768:	1085883a 	add	r2,r2,r2
  80476c:	1085883a 	add	r2,r2,r2
  804770:	1007883a 	mov	r3,r2
  804774:	e0bffe17 	ldw	r2,-8(fp)
  804778:	10c7883a 	add	r3,r2,r3
  80477c:	e0bffb17 	ldw	r2,-20(fp)
  804780:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  804784:	e0bffb17 	ldw	r2,-20(fp)
  804788:	e0fffe17 	ldw	r3,-8(fp)
  80478c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  804790:	e0bffb17 	ldw	r2,-20(fp)
  804794:	e0fffe17 	ldw	r3,-8(fp)
  804798:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  80479c:	e0bffb17 	ldw	r2,-20(fp)
  8047a0:	e0ffff0b 	ldhu	r3,-4(fp)
  8047a4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  8047a8:	e0bffb17 	ldw	r2,-20(fp)
  8047ac:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  8047b0:	e0bff617 	ldw	r2,-40(fp)
  8047b4:	00c00084 	movi	r3,2
  8047b8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  8047bc:	e0bff617 	ldw	r2,-40(fp)
  8047c0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  8047c4:	e0bff617 	ldw	r2,-40(fp)
  8047c8:	e0fffb17 	ldw	r3,-20(fp)
  8047cc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  8047d0:	e0bff617 	ldw	r2,-40(fp)
  8047d4:	00c00fc4 	movi	r3,63
  8047d8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  8047dc:	e0bff617 	ldw	r2,-40(fp)
  8047e0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  8047e4:	e13ff617 	ldw	r4,-40(fp)
  8047e8:	08019d00 	call	8019d0 <OS_EventWaitListInit>
  8047ec:	00000a06 	br	804818 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  8047f0:	d0e04017 	ldw	r3,-32512(gp)
  8047f4:	e0bff617 	ldw	r2,-40(fp)
  8047f8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  8047fc:	e0bff617 	ldw	r2,-40(fp)
  804800:	d0a04015 	stw	r2,-32512(gp)
  804804:	e0bff717 	ldw	r2,-36(fp)
  804808:	e0bffc15 	stw	r2,-16(fp)
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  804814:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  804818:	e0bff617 	ldw	r2,-40(fp)
}
  80481c:	e037883a 	mov	sp,fp
  804820:	dfc00117 	ldw	ra,4(sp)
  804824:	df000017 	ldw	fp,0(sp)
  804828:	dec00204 	addi	sp,sp,8
  80482c:	f800283a 	ret

00804830 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  804830:	defff204 	addi	sp,sp,-56
  804834:	dfc00d15 	stw	ra,52(sp)
  804838:	df000c15 	stw	fp,48(sp)
  80483c:	df000c04 	addi	fp,sp,48
  804840:	e13ffd15 	stw	r4,-12(fp)
  804844:	2805883a 	mov	r2,r5
  804848:	e1bfff15 	stw	r6,-4(fp)
  80484c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804850:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  804854:	e0bfff17 	ldw	r2,-4(fp)
  804858:	1000021e 	bne	r2,zero,804864 <OSQDel+0x34>
        return (pevent);
  80485c:	e0bffd17 	ldw	r2,-12(fp)
  804860:	00008e06 	br	804a9c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  804864:	e0bffd17 	ldw	r2,-12(fp)
  804868:	1000051e 	bne	r2,zero,804880 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  80486c:	e0bfff17 	ldw	r2,-4(fp)
  804870:	00c00104 	movi	r3,4
  804874:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804878:	e0bffd17 	ldw	r2,-12(fp)
  80487c:	00008706 	br	804a9c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  804880:	e0bffd17 	ldw	r2,-12(fp)
  804884:	10800003 	ldbu	r2,0(r2)
  804888:	10803fcc 	andi	r2,r2,255
  80488c:	108000a0 	cmpeqi	r2,r2,2
  804890:	1000051e 	bne	r2,zero,8048a8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804894:	e0bfff17 	ldw	r2,-4(fp)
  804898:	00c00044 	movi	r3,1
  80489c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8048a0:	e0bffd17 	ldw	r2,-12(fp)
  8048a4:	00007d06 	br	804a9c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8048a8:	d0a04103 	ldbu	r2,-32508(gp)
  8048ac:	10803fcc 	andi	r2,r2,255
  8048b0:	10000526 	beq	r2,zero,8048c8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  8048b4:	e0bfff17 	ldw	r2,-4(fp)
  8048b8:	00c003c4 	movi	r3,15
  8048bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8048c0:	e0bffd17 	ldw	r2,-12(fp)
  8048c4:	00007506 	br	804a9c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8048c8:	0005303a 	rdctl	r2,status
  8048cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8048d0:	e0fffc17 	ldw	r3,-16(fp)
  8048d4:	00bfff84 	movi	r2,-2
  8048d8:	1884703a 	and	r2,r3,r2
  8048dc:	1001703a 	wrctl	status,r2
  
  return context;
  8048e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8048e4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  8048e8:	e0bffd17 	ldw	r2,-12(fp)
  8048ec:	10800283 	ldbu	r2,10(r2)
  8048f0:	10803fcc 	andi	r2,r2,255
  8048f4:	10000326 	beq	r2,zero,804904 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8048f8:	00800044 	movi	r2,1
  8048fc:	e0bff405 	stb	r2,-48(fp)
  804900:	00000106 	br	804908 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  804904:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  804908:	e0bffe03 	ldbu	r2,-8(fp)
  80490c:	10000326 	beq	r2,zero,80491c <OSQDel+0xec>
  804910:	10800060 	cmpeqi	r2,r2,1
  804914:	1000301e 	bne	r2,zero,8049d8 <OSQDel+0x1a8>
  804918:	00005506 	br	804a70 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80491c:	e0bff403 	ldbu	r2,-48(fp)
  804920:	10001e1e 	bne	r2,zero,80499c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  804924:	e0bffd17 	ldw	r2,-12(fp)
  804928:	00c00fc4 	movi	r3,63
  80492c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  804930:	e0bffd17 	ldw	r2,-12(fp)
  804934:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  804938:	e0bffd17 	ldw	r2,-12(fp)
  80493c:	10800117 	ldw	r2,4(r2)
  804940:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  804944:	d0e03e17 	ldw	r3,-32520(gp)
  804948:	e0bff817 	ldw	r2,-32(fp)
  80494c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  804950:	e0bff817 	ldw	r2,-32(fp)
  804954:	d0a03e15 	stw	r2,-32520(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  804958:	e0bffd17 	ldw	r2,-12(fp)
  80495c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  804960:	d0e04017 	ldw	r3,-32512(gp)
  804964:	e0bffd17 	ldw	r2,-12(fp)
  804968:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80496c:	e0bffd17 	ldw	r2,-12(fp)
  804970:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  804974:	e0bffd17 	ldw	r2,-12(fp)
  804978:	d0a04015 	stw	r2,-32512(gp)
  80497c:	e0bff617 	ldw	r2,-40(fp)
  804980:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804984:	e0bff717 	ldw	r2,-36(fp)
  804988:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80498c:	e0bfff17 	ldw	r2,-4(fp)
  804990:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  804994:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  804998:	00003f06 	br	804a98 <OSQDel+0x268>
  80499c:	e0bff617 	ldw	r2,-40(fp)
  8049a0:	e0bff915 	stw	r2,-28(fp)
  8049a4:	e0bff917 	ldw	r2,-28(fp)
  8049a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8049ac:	e0bfff17 	ldw	r2,-4(fp)
  8049b0:	00c01244 	movi	r3,73
  8049b4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  8049b8:	e0bffd17 	ldw	r2,-12(fp)
  8049bc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  8049c0:	00003506 	br	804a98 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  8049c4:	000f883a 	mov	r7,zero
  8049c8:	01800104 	movi	r6,4
  8049cc:	000b883a 	mov	r5,zero
  8049d0:	e13ffd17 	ldw	r4,-12(fp)
  8049d4:	08014200 	call	801420 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  8049d8:	e0bffd17 	ldw	r2,-12(fp)
  8049dc:	10800283 	ldbu	r2,10(r2)
  8049e0:	10803fcc 	andi	r2,r2,255
  8049e4:	103ff71e 	bne	r2,zero,8049c4 <__alt_mem_epcs_flash_controller_0+0xff7fb9c4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8049e8:	e0bffd17 	ldw	r2,-12(fp)
  8049ec:	00c00fc4 	movi	r3,63
  8049f0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  8049f4:	e0bffd17 	ldw	r2,-12(fp)
  8049f8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  8049fc:	e0bffd17 	ldw	r2,-12(fp)
  804a00:	10800117 	ldw	r2,4(r2)
  804a04:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  804a08:	d0e03e17 	ldw	r3,-32520(gp)
  804a0c:	e0bff817 	ldw	r2,-32(fp)
  804a10:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  804a14:	e0bff817 	ldw	r2,-32(fp)
  804a18:	d0a03e15 	stw	r2,-32520(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  804a1c:	e0bffd17 	ldw	r2,-12(fp)
  804a20:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  804a24:	d0e04017 	ldw	r3,-32512(gp)
  804a28:	e0bffd17 	ldw	r2,-12(fp)
  804a2c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  804a30:	e0bffd17 	ldw	r2,-12(fp)
  804a34:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  804a38:	e0bffd17 	ldw	r2,-12(fp)
  804a3c:	d0a04015 	stw	r2,-32512(gp)
  804a40:	e0bff617 	ldw	r2,-40(fp)
  804a44:	e0bffa15 	stw	r2,-24(fp)
  804a48:	e0bffa17 	ldw	r2,-24(fp)
  804a4c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  804a50:	e0bff403 	ldbu	r2,-48(fp)
  804a54:	10800058 	cmpnei	r2,r2,1
  804a58:	1000011e 	bne	r2,zero,804a60 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  804a5c:	0801e6c0 	call	801e6c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  804a60:	e0bfff17 	ldw	r2,-4(fp)
  804a64:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  804a68:	e03ff515 	stw	zero,-44(fp)
             break;
  804a6c:	00000a06 	br	804a98 <OSQDel+0x268>
  804a70:	e0bff617 	ldw	r2,-40(fp)
  804a74:	e0bffb15 	stw	r2,-20(fp)
  804a78:	e0bffb17 	ldw	r2,-20(fp)
  804a7c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  804a80:	e0bfff17 	ldw	r2,-4(fp)
  804a84:	00c001c4 	movi	r3,7
  804a88:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  804a8c:	e0bffd17 	ldw	r2,-12(fp)
  804a90:	e0bff515 	stw	r2,-44(fp)
             break;
  804a94:	0001883a 	nop
    }
    return (pevent_return);
  804a98:	e0bff517 	ldw	r2,-44(fp)
}
  804a9c:	e037883a 	mov	sp,fp
  804aa0:	dfc00117 	ldw	ra,4(sp)
  804aa4:	df000017 	ldw	fp,0(sp)
  804aa8:	dec00204 	addi	sp,sp,8
  804aac:	f800283a 	ret

00804ab0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  804ab0:	defffa04 	addi	sp,sp,-24
  804ab4:	df000515 	stw	fp,20(sp)
  804ab8:	df000504 	addi	fp,sp,20
  804abc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  804ac0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  804ac4:	e0bfff17 	ldw	r2,-4(fp)
  804ac8:	1000021e 	bne	r2,zero,804ad4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  804acc:	00800104 	movi	r2,4
  804ad0:	00002106 	br	804b58 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  804ad4:	e0bfff17 	ldw	r2,-4(fp)
  804ad8:	10800003 	ldbu	r2,0(r2)
  804adc:	10803fcc 	andi	r2,r2,255
  804ae0:	108000a0 	cmpeqi	r2,r2,2
  804ae4:	1000021e 	bne	r2,zero,804af0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  804ae8:	00800044 	movi	r2,1
  804aec:	00001a06 	br	804b58 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804af0:	0005303a 	rdctl	r2,status
  804af4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804af8:	e0fffd17 	ldw	r3,-12(fp)
  804afc:	00bfff84 	movi	r2,-2
  804b00:	1884703a 	and	r2,r3,r2
  804b04:	1001703a 	wrctl	status,r2
  
  return context;
  804b08:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804b0c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  804b10:	e0bfff17 	ldw	r2,-4(fp)
  804b14:	10800117 	ldw	r2,4(r2)
  804b18:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  804b1c:	e0bffc17 	ldw	r2,-16(fp)
  804b20:	10c00117 	ldw	r3,4(r2)
  804b24:	e0bffc17 	ldw	r2,-16(fp)
  804b28:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  804b2c:	e0bffc17 	ldw	r2,-16(fp)
  804b30:	10c00117 	ldw	r3,4(r2)
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  804b3c:	e0bffc17 	ldw	r2,-16(fp)
  804b40:	1000058d 	sth	zero,22(r2)
  804b44:	e0bffb17 	ldw	r2,-20(fp)
  804b48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b4c:	e0bffe17 	ldw	r2,-8(fp)
  804b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  804b54:	0005883a 	mov	r2,zero
}
  804b58:	e037883a 	mov	sp,fp
  804b5c:	df000017 	ldw	fp,0(sp)
  804b60:	dec00104 	addi	sp,sp,4
  804b64:	f800283a 	ret

00804b68 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  804b68:	defff304 	addi	sp,sp,-52
  804b6c:	dfc00c15 	stw	ra,48(sp)
  804b70:	df000b15 	stw	fp,44(sp)
  804b74:	df000b04 	addi	fp,sp,44
  804b78:	e13ffd15 	stw	r4,-12(fp)
  804b7c:	2805883a 	mov	r2,r5
  804b80:	e1bfff15 	stw	r6,-4(fp)
  804b84:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804b88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804b8c:	e0bfff17 	ldw	r2,-4(fp)
  804b90:	1000021e 	bne	r2,zero,804b9c <OSQPend+0x34>
        return ((void *)0);
  804b94:	0005883a 	mov	r2,zero
  804b98:	00009106 	br	804de0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  804b9c:	e0bffd17 	ldw	r2,-12(fp)
  804ba0:	1000051e 	bne	r2,zero,804bb8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  804ba4:	e0bfff17 	ldw	r2,-4(fp)
  804ba8:	00c00104 	movi	r3,4
  804bac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804bb0:	0005883a 	mov	r2,zero
  804bb4:	00008a06 	br	804de0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  804bb8:	e0bffd17 	ldw	r2,-12(fp)
  804bbc:	10800003 	ldbu	r2,0(r2)
  804bc0:	10803fcc 	andi	r2,r2,255
  804bc4:	108000a0 	cmpeqi	r2,r2,2
  804bc8:	1000051e 	bne	r2,zero,804be0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804bcc:	e0bfff17 	ldw	r2,-4(fp)
  804bd0:	00c00044 	movi	r3,1
  804bd4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804bd8:	0005883a 	mov	r2,zero
  804bdc:	00008006 	br	804de0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  804be0:	d0a04103 	ldbu	r2,-32508(gp)
  804be4:	10803fcc 	andi	r2,r2,255
  804be8:	10000526 	beq	r2,zero,804c00 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  804bec:	e0bfff17 	ldw	r2,-4(fp)
  804bf0:	00c00084 	movi	r3,2
  804bf4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804bf8:	0005883a 	mov	r2,zero
  804bfc:	00007806 	br	804de0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  804c00:	d0a03303 	ldbu	r2,-32564(gp)
  804c04:	10803fcc 	andi	r2,r2,255
  804c08:	10000526 	beq	r2,zero,804c20 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  804c0c:	e0bfff17 	ldw	r2,-4(fp)
  804c10:	00c00344 	movi	r3,13
  804c14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804c18:	0005883a 	mov	r2,zero
  804c1c:	00007006 	br	804de0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c20:	0005303a 	rdctl	r2,status
  804c24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c28:	e0fffc17 	ldw	r3,-16(fp)
  804c2c:	00bfff84 	movi	r2,-2
  804c30:	1884703a 	and	r2,r3,r2
  804c34:	1001703a 	wrctl	status,r2
  
  return context;
  804c38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804c3c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  804c40:	e0bffd17 	ldw	r2,-12(fp)
  804c44:	10800117 	ldw	r2,4(r2)
  804c48:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  804c4c:	e0bff817 	ldw	r2,-32(fp)
  804c50:	1080058b 	ldhu	r2,22(r2)
  804c54:	10bfffcc 	andi	r2,r2,65535
  804c58:	10001e26 	beq	r2,zero,804cd4 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  804c5c:	e0bff817 	ldw	r2,-32(fp)
  804c60:	10800417 	ldw	r2,16(r2)
  804c64:	11000104 	addi	r4,r2,4
  804c68:	e0fff817 	ldw	r3,-32(fp)
  804c6c:	19000415 	stw	r4,16(r3)
  804c70:	10800017 	ldw	r2,0(r2)
  804c74:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  804c78:	e0bff817 	ldw	r2,-32(fp)
  804c7c:	1080058b 	ldhu	r2,22(r2)
  804c80:	10bfffc4 	addi	r2,r2,-1
  804c84:	1007883a 	mov	r3,r2
  804c88:	e0bff817 	ldw	r2,-32(fp)
  804c8c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  804c90:	e0bff817 	ldw	r2,-32(fp)
  804c94:	10c00417 	ldw	r3,16(r2)
  804c98:	e0bff817 	ldw	r2,-32(fp)
  804c9c:	10800217 	ldw	r2,8(r2)
  804ca0:	1880041e 	bne	r3,r2,804cb4 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  804ca4:	e0bff817 	ldw	r2,-32(fp)
  804ca8:	10c00117 	ldw	r3,4(r2)
  804cac:	e0bff817 	ldw	r2,-32(fp)
  804cb0:	10c00415 	stw	r3,16(r2)
  804cb4:	e0bff617 	ldw	r2,-40(fp)
  804cb8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804cbc:	e0bff717 	ldw	r2,-36(fp)
  804cc0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  804cc4:	e0bfff17 	ldw	r2,-4(fp)
  804cc8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  804ccc:	e0bff517 	ldw	r2,-44(fp)
  804cd0:	00004306 	br	804de0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  804cd4:	d0a04217 	ldw	r2,-32504(gp)
  804cd8:	d0e04217 	ldw	r3,-32504(gp)
  804cdc:	18c00c03 	ldbu	r3,48(r3)
  804ce0:	18c00114 	ori	r3,r3,4
  804ce4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  804ce8:	d0a04217 	ldw	r2,-32504(gp)
  804cec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  804cf0:	d0a04217 	ldw	r2,-32504(gp)
  804cf4:	e0fffe0b 	ldhu	r3,-8(fp)
  804cf8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  804cfc:	e13ffd17 	ldw	r4,-12(fp)
  804d00:	08015b80 	call	8015b8 <OS_EventTaskWait>
  804d04:	e0bff617 	ldw	r2,-40(fp)
  804d08:	e0bffb15 	stw	r2,-20(fp)
  804d0c:	e0bffb17 	ldw	r2,-20(fp)
  804d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  804d14:	0801e6c0 	call	801e6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804d18:	0005303a 	rdctl	r2,status
  804d1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804d20:	e0fff917 	ldw	r3,-28(fp)
  804d24:	00bfff84 	movi	r2,-2
  804d28:	1884703a 	and	r2,r3,r2
  804d2c:	1001703a 	wrctl	status,r2
  
  return context;
  804d30:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  804d34:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  804d38:	d0a04217 	ldw	r2,-32504(gp)
  804d3c:	10800c43 	ldbu	r2,49(r2)
  804d40:	10803fcc 	andi	r2,r2,255
  804d44:	10000326 	beq	r2,zero,804d54 <OSQPend+0x1ec>
  804d48:	108000a0 	cmpeqi	r2,r2,2
  804d4c:	1000071e 	bne	r2,zero,804d6c <OSQPend+0x204>
  804d50:	00000b06 	br	804d80 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  804d54:	d0a04217 	ldw	r2,-32504(gp)
  804d58:	10800917 	ldw	r2,36(r2)
  804d5c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  804d60:	e0bfff17 	ldw	r2,-4(fp)
  804d64:	10000005 	stb	zero,0(r2)
             break;
  804d68:	00000e06 	br	804da4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  804d6c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  804d70:	e0bfff17 	ldw	r2,-4(fp)
  804d74:	00c00384 	movi	r3,14
  804d78:	10c00005 	stb	r3,0(r2)
             break;
  804d7c:	00000906 	br	804da4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  804d80:	d0a04217 	ldw	r2,-32504(gp)
  804d84:	e17ffd17 	ldw	r5,-12(fp)
  804d88:	1009883a 	mov	r4,r2
  804d8c:	08018180 	call	801818 <OS_EventTaskRemove>
             pmsg = (void *)0;
  804d90:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  804d94:	e0bfff17 	ldw	r2,-4(fp)
  804d98:	00c00284 	movi	r3,10
  804d9c:	10c00005 	stb	r3,0(r2)
             break;
  804da0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  804da4:	d0a04217 	ldw	r2,-32504(gp)
  804da8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  804dac:	d0a04217 	ldw	r2,-32504(gp)
  804db0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  804db4:	d0a04217 	ldw	r2,-32504(gp)
  804db8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  804dbc:	d0a04217 	ldw	r2,-32504(gp)
  804dc0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  804dc4:	d0a04217 	ldw	r2,-32504(gp)
  804dc8:	10000915 	stw	zero,36(r2)
  804dcc:	e0bff617 	ldw	r2,-40(fp)
  804dd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804dd4:	e0bffa17 	ldw	r2,-24(fp)
  804dd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  804ddc:	e0bff517 	ldw	r2,-44(fp)
}
  804de0:	e037883a 	mov	sp,fp
  804de4:	dfc00117 	ldw	ra,4(sp)
  804de8:	df000017 	ldw	fp,0(sp)
  804dec:	dec00204 	addi	sp,sp,8
  804df0:	f800283a 	ret

00804df4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  804df4:	defff604 	addi	sp,sp,-40
  804df8:	dfc00915 	stw	ra,36(sp)
  804dfc:	df000815 	stw	fp,32(sp)
  804e00:	df000804 	addi	fp,sp,32
  804e04:	e13ffd15 	stw	r4,-12(fp)
  804e08:	2805883a 	mov	r2,r5
  804e0c:	e1bfff15 	stw	r6,-4(fp)
  804e10:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804e14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  804e18:	e0bfff17 	ldw	r2,-4(fp)
  804e1c:	1000021e 	bne	r2,zero,804e28 <OSQPendAbort+0x34>
        return (0);
  804e20:	0005883a 	mov	r2,zero
  804e24:	00004906 	br	804f4c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  804e28:	e0bffd17 	ldw	r2,-12(fp)
  804e2c:	1000051e 	bne	r2,zero,804e44 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  804e30:	e0bfff17 	ldw	r2,-4(fp)
  804e34:	00c00104 	movi	r3,4
  804e38:	10c00005 	stb	r3,0(r2)
        return (0);
  804e3c:	0005883a 	mov	r2,zero
  804e40:	00004206 	br	804f4c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  804e44:	e0bffd17 	ldw	r2,-12(fp)
  804e48:	10800003 	ldbu	r2,0(r2)
  804e4c:	10803fcc 	andi	r2,r2,255
  804e50:	108000a0 	cmpeqi	r2,r2,2
  804e54:	1000051e 	bne	r2,zero,804e6c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804e58:	e0bfff17 	ldw	r2,-4(fp)
  804e5c:	00c00044 	movi	r3,1
  804e60:	10c00005 	stb	r3,0(r2)
        return (0);
  804e64:	0005883a 	mov	r2,zero
  804e68:	00003806 	br	804f4c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804e6c:	0005303a 	rdctl	r2,status
  804e70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804e74:	e0fffc17 	ldw	r3,-16(fp)
  804e78:	00bfff84 	movi	r2,-2
  804e7c:	1884703a 	and	r2,r3,r2
  804e80:	1001703a 	wrctl	status,r2
  
  return context;
  804e84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804e88:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  804e8c:	e0bffd17 	ldw	r2,-12(fp)
  804e90:	10800283 	ldbu	r2,10(r2)
  804e94:	10803fcc 	andi	r2,r2,255
  804e98:	10002526 	beq	r2,zero,804f30 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  804e9c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  804ea0:	e0bffe03 	ldbu	r2,-8(fp)
  804ea4:	10800060 	cmpeqi	r2,r2,1
  804ea8:	10000e26 	beq	r2,zero,804ee4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  804eac:	00000806 	br	804ed0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  804eb0:	01c00084 	movi	r7,2
  804eb4:	01800104 	movi	r6,4
  804eb8:	000b883a 	mov	r5,zero
  804ebc:	e13ffd17 	ldw	r4,-12(fp)
  804ec0:	08014200 	call	801420 <OS_EventTaskRdy>
                     nbr_tasks++;
  804ec4:	e0bff803 	ldbu	r2,-32(fp)
  804ec8:	10800044 	addi	r2,r2,1
  804ecc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  804ed0:	e0bffd17 	ldw	r2,-12(fp)
  804ed4:	10800283 	ldbu	r2,10(r2)
  804ed8:	10803fcc 	andi	r2,r2,255
  804edc:	103ff41e 	bne	r2,zero,804eb0 <__alt_mem_epcs_flash_controller_0+0xff7fbeb0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  804ee0:	00000906 	br	804f08 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  804ee4:	01c00084 	movi	r7,2
  804ee8:	01800104 	movi	r6,4
  804eec:	000b883a 	mov	r5,zero
  804ef0:	e13ffd17 	ldw	r4,-12(fp)
  804ef4:	08014200 	call	801420 <OS_EventTaskRdy>
                 nbr_tasks++;
  804ef8:	e0bff803 	ldbu	r2,-32(fp)
  804efc:	10800044 	addi	r2,r2,1
  804f00:	e0bff805 	stb	r2,-32(fp)
                 break;
  804f04:	0001883a 	nop
  804f08:	e0bff917 	ldw	r2,-28(fp)
  804f0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804f10:	e0bffa17 	ldw	r2,-24(fp)
  804f14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  804f18:	0801e6c0 	call	801e6c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  804f1c:	e0bfff17 	ldw	r2,-4(fp)
  804f20:	00c00384 	movi	r3,14
  804f24:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  804f28:	e0bff803 	ldbu	r2,-32(fp)
  804f2c:	00000706 	br	804f4c <OSQPendAbort+0x158>
  804f30:	e0bff917 	ldw	r2,-28(fp)
  804f34:	e0bffb15 	stw	r2,-20(fp)
  804f38:	e0bffb17 	ldw	r2,-20(fp)
  804f3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804f40:	e0bfff17 	ldw	r2,-4(fp)
  804f44:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  804f48:	0005883a 	mov	r2,zero
}
  804f4c:	e037883a 	mov	sp,fp
  804f50:	dfc00117 	ldw	ra,4(sp)
  804f54:	df000017 	ldw	fp,0(sp)
  804f58:	dec00204 	addi	sp,sp,8
  804f5c:	f800283a 	ret

00804f60 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  804f60:	defff604 	addi	sp,sp,-40
  804f64:	dfc00915 	stw	ra,36(sp)
  804f68:	df000815 	stw	fp,32(sp)
  804f6c:	df000804 	addi	fp,sp,32
  804f70:	e13ffe15 	stw	r4,-8(fp)
  804f74:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  804f78:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  804f7c:	e0bffe17 	ldw	r2,-8(fp)
  804f80:	1000021e 	bne	r2,zero,804f8c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  804f84:	00800104 	movi	r2,4
  804f88:	00004a06 	br	8050b4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  804f8c:	e0bffe17 	ldw	r2,-8(fp)
  804f90:	10800003 	ldbu	r2,0(r2)
  804f94:	10803fcc 	andi	r2,r2,255
  804f98:	108000a0 	cmpeqi	r2,r2,2
  804f9c:	1000021e 	bne	r2,zero,804fa8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  804fa0:	00800044 	movi	r2,1
  804fa4:	00004306 	br	8050b4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804fa8:	0005303a 	rdctl	r2,status
  804fac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804fb0:	e0fffd17 	ldw	r3,-12(fp)
  804fb4:	00bfff84 	movi	r2,-2
  804fb8:	1884703a 	and	r2,r3,r2
  804fbc:	1001703a 	wrctl	status,r2
  
  return context;
  804fc0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  804fc4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  804fc8:	e0bffe17 	ldw	r2,-8(fp)
  804fcc:	10800283 	ldbu	r2,10(r2)
  804fd0:	10803fcc 	andi	r2,r2,255
  804fd4:	10000c26 	beq	r2,zero,805008 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  804fd8:	000f883a 	mov	r7,zero
  804fdc:	01800104 	movi	r6,4
  804fe0:	e17fff17 	ldw	r5,-4(fp)
  804fe4:	e13ffe17 	ldw	r4,-8(fp)
  804fe8:	08014200 	call	801420 <OS_EventTaskRdy>
  804fec:	e0bff817 	ldw	r2,-32(fp)
  804ff0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ff4:	e0bff917 	ldw	r2,-28(fp)
  804ff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  804ffc:	0801e6c0 	call	801e6c <OS_Sched>
        return (OS_ERR_NONE);
  805000:	0005883a 	mov	r2,zero
  805004:	00002b06 	br	8050b4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  805008:	e0bffe17 	ldw	r2,-8(fp)
  80500c:	10800117 	ldw	r2,4(r2)
  805010:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  805014:	e0bffb17 	ldw	r2,-20(fp)
  805018:	10c0058b 	ldhu	r3,22(r2)
  80501c:	e0bffb17 	ldw	r2,-20(fp)
  805020:	1080050b 	ldhu	r2,20(r2)
  805024:	18ffffcc 	andi	r3,r3,65535
  805028:	10bfffcc 	andi	r2,r2,65535
  80502c:	18800636 	bltu	r3,r2,805048 <OSQPost+0xe8>
  805030:	e0bff817 	ldw	r2,-32(fp)
  805034:	e0bffa15 	stw	r2,-24(fp)
  805038:	e0bffa17 	ldw	r2,-24(fp)
  80503c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  805040:	00800784 	movi	r2,30
  805044:	00001b06 	br	8050b4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  805048:	e0bffb17 	ldw	r2,-20(fp)
  80504c:	10800317 	ldw	r2,12(r2)
  805050:	11000104 	addi	r4,r2,4
  805054:	e0fffb17 	ldw	r3,-20(fp)
  805058:	19000315 	stw	r4,12(r3)
  80505c:	e0ffff17 	ldw	r3,-4(fp)
  805060:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  805064:	e0bffb17 	ldw	r2,-20(fp)
  805068:	1080058b 	ldhu	r2,22(r2)
  80506c:	10800044 	addi	r2,r2,1
  805070:	1007883a 	mov	r3,r2
  805074:	e0bffb17 	ldw	r2,-20(fp)
  805078:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80507c:	e0bffb17 	ldw	r2,-20(fp)
  805080:	10c00317 	ldw	r3,12(r2)
  805084:	e0bffb17 	ldw	r2,-20(fp)
  805088:	10800217 	ldw	r2,8(r2)
  80508c:	1880041e 	bne	r3,r2,8050a0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  805090:	e0bffb17 	ldw	r2,-20(fp)
  805094:	10c00117 	ldw	r3,4(r2)
  805098:	e0bffb17 	ldw	r2,-20(fp)
  80509c:	10c00315 	stw	r3,12(r2)
  8050a0:	e0bff817 	ldw	r2,-32(fp)
  8050a4:	e0bffc15 	stw	r2,-16(fp)
  8050a8:	e0bffc17 	ldw	r2,-16(fp)
  8050ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8050b0:	0005883a 	mov	r2,zero
}
  8050b4:	e037883a 	mov	sp,fp
  8050b8:	dfc00117 	ldw	ra,4(sp)
  8050bc:	df000017 	ldw	fp,0(sp)
  8050c0:	dec00204 	addi	sp,sp,8
  8050c4:	f800283a 	ret

008050c8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8050c8:	defff604 	addi	sp,sp,-40
  8050cc:	dfc00915 	stw	ra,36(sp)
  8050d0:	df000815 	stw	fp,32(sp)
  8050d4:	df000804 	addi	fp,sp,32
  8050d8:	e13ffe15 	stw	r4,-8(fp)
  8050dc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8050e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8050e4:	e0bffe17 	ldw	r2,-8(fp)
  8050e8:	1000021e 	bne	r2,zero,8050f4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  8050ec:	00800104 	movi	r2,4
  8050f0:	00004c06 	br	805224 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8050f4:	e0bffe17 	ldw	r2,-8(fp)
  8050f8:	10800003 	ldbu	r2,0(r2)
  8050fc:	10803fcc 	andi	r2,r2,255
  805100:	108000a0 	cmpeqi	r2,r2,2
  805104:	1000021e 	bne	r2,zero,805110 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  805108:	00800044 	movi	r2,1
  80510c:	00004506 	br	805224 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805110:	0005303a 	rdctl	r2,status
  805114:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805118:	e0fffd17 	ldw	r3,-12(fp)
  80511c:	00bfff84 	movi	r2,-2
  805120:	1884703a 	and	r2,r3,r2
  805124:	1001703a 	wrctl	status,r2
  
  return context;
  805128:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  80512c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  805130:	e0bffe17 	ldw	r2,-8(fp)
  805134:	10800283 	ldbu	r2,10(r2)
  805138:	10803fcc 	andi	r2,r2,255
  80513c:	10000c26 	beq	r2,zero,805170 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  805140:	000f883a 	mov	r7,zero
  805144:	01800104 	movi	r6,4
  805148:	e17fff17 	ldw	r5,-4(fp)
  80514c:	e13ffe17 	ldw	r4,-8(fp)
  805150:	08014200 	call	801420 <OS_EventTaskRdy>
  805154:	e0bff817 	ldw	r2,-32(fp)
  805158:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80515c:	e0bff917 	ldw	r2,-28(fp)
  805160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  805164:	0801e6c0 	call	801e6c <OS_Sched>
        return (OS_ERR_NONE);
  805168:	0005883a 	mov	r2,zero
  80516c:	00002d06 	br	805224 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  805170:	e0bffe17 	ldw	r2,-8(fp)
  805174:	10800117 	ldw	r2,4(r2)
  805178:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80517c:	e0bffb17 	ldw	r2,-20(fp)
  805180:	10c0058b 	ldhu	r3,22(r2)
  805184:	e0bffb17 	ldw	r2,-20(fp)
  805188:	1080050b 	ldhu	r2,20(r2)
  80518c:	18ffffcc 	andi	r3,r3,65535
  805190:	10bfffcc 	andi	r2,r2,65535
  805194:	18800636 	bltu	r3,r2,8051b0 <OSQPostFront+0xe8>
  805198:	e0bff817 	ldw	r2,-32(fp)
  80519c:	e0bffa15 	stw	r2,-24(fp)
  8051a0:	e0bffa17 	ldw	r2,-24(fp)
  8051a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8051a8:	00800784 	movi	r2,30
  8051ac:	00001d06 	br	805224 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  8051b0:	e0bffb17 	ldw	r2,-20(fp)
  8051b4:	10c00417 	ldw	r3,16(r2)
  8051b8:	e0bffb17 	ldw	r2,-20(fp)
  8051bc:	10800117 	ldw	r2,4(r2)
  8051c0:	1880041e 	bne	r3,r2,8051d4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  8051c4:	e0bffb17 	ldw	r2,-20(fp)
  8051c8:	10c00217 	ldw	r3,8(r2)
  8051cc:	e0bffb17 	ldw	r2,-20(fp)
  8051d0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  8051d4:	e0bffb17 	ldw	r2,-20(fp)
  8051d8:	10800417 	ldw	r2,16(r2)
  8051dc:	10ffff04 	addi	r3,r2,-4
  8051e0:	e0bffb17 	ldw	r2,-20(fp)
  8051e4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  8051e8:	e0bffb17 	ldw	r2,-20(fp)
  8051ec:	10800417 	ldw	r2,16(r2)
  8051f0:	e0ffff17 	ldw	r3,-4(fp)
  8051f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8051f8:	e0bffb17 	ldw	r2,-20(fp)
  8051fc:	1080058b 	ldhu	r2,22(r2)
  805200:	10800044 	addi	r2,r2,1
  805204:	1007883a 	mov	r3,r2
  805208:	e0bffb17 	ldw	r2,-20(fp)
  80520c:	10c0058d 	sth	r3,22(r2)
  805210:	e0bff817 	ldw	r2,-32(fp)
  805214:	e0bffc15 	stw	r2,-16(fp)
  805218:	e0bffc17 	ldw	r2,-16(fp)
  80521c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805220:	0005883a 	mov	r2,zero
}
  805224:	e037883a 	mov	sp,fp
  805228:	dfc00117 	ldw	ra,4(sp)
  80522c:	df000017 	ldw	fp,0(sp)
  805230:	dec00204 	addi	sp,sp,8
  805234:	f800283a 	ret

00805238 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  805238:	defff504 	addi	sp,sp,-44
  80523c:	dfc00a15 	stw	ra,40(sp)
  805240:	df000915 	stw	fp,36(sp)
  805244:	df000904 	addi	fp,sp,36
  805248:	e13ffd15 	stw	r4,-12(fp)
  80524c:	e17ffe15 	stw	r5,-8(fp)
  805250:	3005883a 	mov	r2,r6
  805254:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805258:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80525c:	e0bffd17 	ldw	r2,-12(fp)
  805260:	1000021e 	bne	r2,zero,80526c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  805264:	00800104 	movi	r2,4
  805268:	00007106 	br	805430 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80526c:	e0bffd17 	ldw	r2,-12(fp)
  805270:	10800003 	ldbu	r2,0(r2)
  805274:	10803fcc 	andi	r2,r2,255
  805278:	108000a0 	cmpeqi	r2,r2,2
  80527c:	1000021e 	bne	r2,zero,805288 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  805280:	00800044 	movi	r2,1
  805284:	00006a06 	br	805430 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805288:	0005303a 	rdctl	r2,status
  80528c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805290:	e0fffc17 	ldw	r3,-16(fp)
  805294:	00bfff84 	movi	r2,-2
  805298:	1884703a 	and	r2,r3,r2
  80529c:	1001703a 	wrctl	status,r2
  
  return context;
  8052a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8052a4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  8052a8:	e0bffd17 	ldw	r2,-12(fp)
  8052ac:	10800283 	ldbu	r2,10(r2)
  8052b0:	10803fcc 	andi	r2,r2,255
  8052b4:	10001d26 	beq	r2,zero,80532c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  8052b8:	e0bfff03 	ldbu	r2,-4(fp)
  8052bc:	1080004c 	andi	r2,r2,1
  8052c0:	10000b26 	beq	r2,zero,8052f0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8052c4:	00000506 	br	8052dc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8052c8:	000f883a 	mov	r7,zero
  8052cc:	01800104 	movi	r6,4
  8052d0:	e17ffe17 	ldw	r5,-8(fp)
  8052d4:	e13ffd17 	ldw	r4,-12(fp)
  8052d8:	08014200 	call	801420 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8052dc:	e0bffd17 	ldw	r2,-12(fp)
  8052e0:	10800283 	ldbu	r2,10(r2)
  8052e4:	10803fcc 	andi	r2,r2,255
  8052e8:	103ff71e 	bne	r2,zero,8052c8 <__alt_mem_epcs_flash_controller_0+0xff7fc2c8>
  8052ec:	00000506 	br	805304 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8052f0:	000f883a 	mov	r7,zero
  8052f4:	01800104 	movi	r6,4
  8052f8:	e17ffe17 	ldw	r5,-8(fp)
  8052fc:	e13ffd17 	ldw	r4,-12(fp)
  805300:	08014200 	call	801420 <OS_EventTaskRdy>
  805304:	e0bff717 	ldw	r2,-36(fp)
  805308:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80530c:	e0bff817 	ldw	r2,-32(fp)
  805310:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  805314:	e0bfff03 	ldbu	r2,-4(fp)
  805318:	1080010c 	andi	r2,r2,4
  80531c:	1000011e 	bne	r2,zero,805324 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  805320:	0801e6c0 	call	801e6c <OS_Sched>
        }
        return (OS_ERR_NONE);
  805324:	0005883a 	mov	r2,zero
  805328:	00004106 	br	805430 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80532c:	e0bffd17 	ldw	r2,-12(fp)
  805330:	10800117 	ldw	r2,4(r2)
  805334:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  805338:	e0bffa17 	ldw	r2,-24(fp)
  80533c:	10c0058b 	ldhu	r3,22(r2)
  805340:	e0bffa17 	ldw	r2,-24(fp)
  805344:	1080050b 	ldhu	r2,20(r2)
  805348:	18ffffcc 	andi	r3,r3,65535
  80534c:	10bfffcc 	andi	r2,r2,65535
  805350:	18800636 	bltu	r3,r2,80536c <OSQPostOpt+0x134>
  805354:	e0bff717 	ldw	r2,-36(fp)
  805358:	e0bff915 	stw	r2,-28(fp)
  80535c:	e0bff917 	ldw	r2,-28(fp)
  805360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  805364:	00800784 	movi	r2,30
  805368:	00003106 	br	805430 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80536c:	e0bfff03 	ldbu	r2,-4(fp)
  805370:	1080008c 	andi	r2,r2,2
  805374:	10001326 	beq	r2,zero,8053c4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  805378:	e0bffa17 	ldw	r2,-24(fp)
  80537c:	10c00417 	ldw	r3,16(r2)
  805380:	e0bffa17 	ldw	r2,-24(fp)
  805384:	10800117 	ldw	r2,4(r2)
  805388:	1880041e 	bne	r3,r2,80539c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80538c:	e0bffa17 	ldw	r2,-24(fp)
  805390:	10c00217 	ldw	r3,8(r2)
  805394:	e0bffa17 	ldw	r2,-24(fp)
  805398:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80539c:	e0bffa17 	ldw	r2,-24(fp)
  8053a0:	10800417 	ldw	r2,16(r2)
  8053a4:	10ffff04 	addi	r3,r2,-4
  8053a8:	e0bffa17 	ldw	r2,-24(fp)
  8053ac:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  8053b0:	e0bffa17 	ldw	r2,-24(fp)
  8053b4:	10800417 	ldw	r2,16(r2)
  8053b8:	e0fffe17 	ldw	r3,-8(fp)
  8053bc:	10c00015 	stw	r3,0(r2)
  8053c0:	00001006 	br	805404 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  8053c4:	e0bffa17 	ldw	r2,-24(fp)
  8053c8:	10800317 	ldw	r2,12(r2)
  8053cc:	11000104 	addi	r4,r2,4
  8053d0:	e0fffa17 	ldw	r3,-24(fp)
  8053d4:	19000315 	stw	r4,12(r3)
  8053d8:	e0fffe17 	ldw	r3,-8(fp)
  8053dc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  8053e0:	e0bffa17 	ldw	r2,-24(fp)
  8053e4:	10c00317 	ldw	r3,12(r2)
  8053e8:	e0bffa17 	ldw	r2,-24(fp)
  8053ec:	10800217 	ldw	r2,8(r2)
  8053f0:	1880041e 	bne	r3,r2,805404 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  8053f4:	e0bffa17 	ldw	r2,-24(fp)
  8053f8:	10c00117 	ldw	r3,4(r2)
  8053fc:	e0bffa17 	ldw	r2,-24(fp)
  805400:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  805404:	e0bffa17 	ldw	r2,-24(fp)
  805408:	1080058b 	ldhu	r2,22(r2)
  80540c:	10800044 	addi	r2,r2,1
  805410:	1007883a 	mov	r3,r2
  805414:	e0bffa17 	ldw	r2,-24(fp)
  805418:	10c0058d 	sth	r3,22(r2)
  80541c:	e0bff717 	ldw	r2,-36(fp)
  805420:	e0bffb15 	stw	r2,-20(fp)
  805424:	e0bffb17 	ldw	r2,-20(fp)
  805428:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80542c:	0005883a 	mov	r2,zero
}
  805430:	e037883a 	mov	sp,fp
  805434:	dfc00117 	ldw	ra,4(sp)
  805438:	df000017 	ldw	fp,0(sp)
  80543c:	dec00204 	addi	sp,sp,8
  805440:	f800283a 	ret

00805444 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  805444:	defff604 	addi	sp,sp,-40
  805448:	df000915 	stw	fp,36(sp)
  80544c:	df000904 	addi	fp,sp,36
  805450:	e13ffe15 	stw	r4,-8(fp)
  805454:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  805458:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80545c:	e0bffe17 	ldw	r2,-8(fp)
  805460:	1000021e 	bne	r2,zero,80546c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  805464:	00800104 	movi	r2,4
  805468:	00004906 	br	805590 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  80546c:	e0bfff17 	ldw	r2,-4(fp)
  805470:	1000021e 	bne	r2,zero,80547c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  805474:	00800244 	movi	r2,9
  805478:	00004506 	br	805590 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80547c:	e0bffe17 	ldw	r2,-8(fp)
  805480:	10800003 	ldbu	r2,0(r2)
  805484:	10803fcc 	andi	r2,r2,255
  805488:	108000a0 	cmpeqi	r2,r2,2
  80548c:	1000021e 	bne	r2,zero,805498 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  805490:	00800044 	movi	r2,1
  805494:	00003e06 	br	805590 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805498:	0005303a 	rdctl	r2,status
  80549c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8054a0:	e0fffd17 	ldw	r3,-12(fp)
  8054a4:	00bfff84 	movi	r2,-2
  8054a8:	1884703a 	and	r2,r3,r2
  8054ac:	1001703a 	wrctl	status,r2
  
  return context;
  8054b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8054b4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  8054b8:	e0bffe17 	ldw	r2,-8(fp)
  8054bc:	10c00283 	ldbu	r3,10(r2)
  8054c0:	e0bfff17 	ldw	r2,-4(fp)
  8054c4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  8054c8:	e0bffe17 	ldw	r2,-8(fp)
  8054cc:	108002c4 	addi	r2,r2,11
  8054d0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  8054d4:	e0bfff17 	ldw	r2,-4(fp)
  8054d8:	10800204 	addi	r2,r2,8
  8054dc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8054e0:	e03ff705 	stb	zero,-36(fp)
  8054e4:	00000b06 	br	805514 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  8054e8:	e0bff917 	ldw	r2,-28(fp)
  8054ec:	10c00044 	addi	r3,r2,1
  8054f0:	e0fff915 	stw	r3,-28(fp)
  8054f4:	e0fff817 	ldw	r3,-32(fp)
  8054f8:	19000044 	addi	r4,r3,1
  8054fc:	e13ff815 	stw	r4,-32(fp)
  805500:	18c00003 	ldbu	r3,0(r3)
  805504:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805508:	e0bff703 	ldbu	r2,-36(fp)
  80550c:	10800044 	addi	r2,r2,1
  805510:	e0bff705 	stb	r2,-36(fp)
  805514:	e0bff703 	ldbu	r2,-36(fp)
  805518:	108000f0 	cmpltui	r2,r2,3
  80551c:	103ff21e 	bne	r2,zero,8054e8 <__alt_mem_epcs_flash_controller_0+0xff7fc4e8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  805520:	e0bffe17 	ldw	r2,-8(fp)
  805524:	10800117 	ldw	r2,4(r2)
  805528:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  80552c:	e0bffc17 	ldw	r2,-16(fp)
  805530:	1080058b 	ldhu	r2,22(r2)
  805534:	10bfffcc 	andi	r2,r2,65535
  805538:	10000626 	beq	r2,zero,805554 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  80553c:	e0bffc17 	ldw	r2,-16(fp)
  805540:	10800417 	ldw	r2,16(r2)
  805544:	10c00017 	ldw	r3,0(r2)
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	10c00015 	stw	r3,0(r2)
  805550:	00000206 	br	80555c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  805554:	e0bfff17 	ldw	r2,-4(fp)
  805558:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  80555c:	e0bffc17 	ldw	r2,-16(fp)
  805560:	10c0058b 	ldhu	r3,22(r2)
  805564:	e0bfff17 	ldw	r2,-4(fp)
  805568:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  80556c:	e0bffc17 	ldw	r2,-16(fp)
  805570:	10c0050b 	ldhu	r3,20(r2)
  805574:	e0bfff17 	ldw	r2,-4(fp)
  805578:	10c0018d 	sth	r3,6(r2)
  80557c:	e0bffa17 	ldw	r2,-24(fp)
  805580:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805584:	e0bffb17 	ldw	r2,-20(fp)
  805588:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80558c:	0005883a 	mov	r2,zero
}
  805590:	e037883a 	mov	sp,fp
  805594:	df000017 	ldw	fp,0(sp)
  805598:	dec00104 	addi	sp,sp,4
  80559c:	f800283a 	ret

008055a0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  8055a0:	defffb04 	addi	sp,sp,-20
  8055a4:	dfc00415 	stw	ra,16(sp)
  8055a8:	df000315 	stw	fp,12(sp)
  8055ac:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  8055b0:	01407804 	movi	r5,480
  8055b4:	01002074 	movhi	r4,129
  8055b8:	2116a304 	addi	r4,r4,23180
  8055bc:	0801db00 	call	801db0 <OS_MemClr>
    pq1 = &OSQTbl[0];
  8055c0:	00802074 	movhi	r2,129
  8055c4:	1096a304 	addi	r2,r2,23180
  8055c8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  8055cc:	00802074 	movhi	r2,129
  8055d0:	1096a904 	addi	r2,r2,23204
  8055d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8055d8:	e03ffd0d 	sth	zero,-12(fp)
  8055dc:	00000c06 	br	805610 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  8055e0:	e0bffe17 	ldw	r2,-8(fp)
  8055e4:	e0ffff17 	ldw	r3,-4(fp)
  8055e8:	10c00015 	stw	r3,0(r2)
        pq1++;
  8055ec:	e0bffe17 	ldw	r2,-8(fp)
  8055f0:	10800604 	addi	r2,r2,24
  8055f4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  8055f8:	e0bfff17 	ldw	r2,-4(fp)
  8055fc:	10800604 	addi	r2,r2,24
  805600:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  805604:	e0bffd0b 	ldhu	r2,-12(fp)
  805608:	10800044 	addi	r2,r2,1
  80560c:	e0bffd0d 	sth	r2,-12(fp)
  805610:	e0bffd0b 	ldhu	r2,-12(fp)
  805614:	108004f0 	cmpltui	r2,r2,19
  805618:	103ff11e 	bne	r2,zero,8055e0 <__alt_mem_epcs_flash_controller_0+0xff7fc5e0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  80561c:	e0bffe17 	ldw	r2,-8(fp)
  805620:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  805624:	00802074 	movhi	r2,129
  805628:	1096a304 	addi	r2,r2,23180
  80562c:	d0a03e15 	stw	r2,-32520(gp)
#endif
}
  805630:	0001883a 	nop
  805634:	e037883a 	mov	sp,fp
  805638:	dfc00117 	ldw	ra,4(sp)
  80563c:	df000017 	ldw	fp,0(sp)
  805640:	dec00204 	addi	sp,sp,8
  805644:	f800283a 	ret

00805648 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  805648:	defffa04 	addi	sp,sp,-24
  80564c:	df000515 	stw	fp,20(sp)
  805650:	df000504 	addi	fp,sp,20
  805654:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805658:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80565c:	e0bfff17 	ldw	r2,-4(fp)
  805660:	1000021e 	bne	r2,zero,80566c <OSSemAccept+0x24>
        return (0);
  805664:	0005883a 	mov	r2,zero
  805668:	00001f06 	br	8056e8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80566c:	e0bfff17 	ldw	r2,-4(fp)
  805670:	10800003 	ldbu	r2,0(r2)
  805674:	10803fcc 	andi	r2,r2,255
  805678:	108000e0 	cmpeqi	r2,r2,3
  80567c:	1000021e 	bne	r2,zero,805688 <OSSemAccept+0x40>
        return (0);
  805680:	0005883a 	mov	r2,zero
  805684:	00001806 	br	8056e8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805688:	0005303a 	rdctl	r2,status
  80568c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805690:	e0fffe17 	ldw	r3,-8(fp)
  805694:	00bfff84 	movi	r2,-2
  805698:	1884703a 	and	r2,r3,r2
  80569c:	1001703a 	wrctl	status,r2
  
  return context;
  8056a0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8056a4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  8056a8:	e0bfff17 	ldw	r2,-4(fp)
  8056ac:	1080020b 	ldhu	r2,8(r2)
  8056b0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  8056b4:	e0bffd0b 	ldhu	r2,-12(fp)
  8056b8:	10000626 	beq	r2,zero,8056d4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  8056bc:	e0bfff17 	ldw	r2,-4(fp)
  8056c0:	1080020b 	ldhu	r2,8(r2)
  8056c4:	10bfffc4 	addi	r2,r2,-1
  8056c8:	1007883a 	mov	r3,r2
  8056cc:	e0bfff17 	ldw	r2,-4(fp)
  8056d0:	10c0020d 	sth	r3,8(r2)
  8056d4:	e0bffb17 	ldw	r2,-20(fp)
  8056d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8056dc:	e0bffc17 	ldw	r2,-16(fp)
  8056e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  8056e4:	e0bffd0b 	ldhu	r2,-12(fp)
}
  8056e8:	e037883a 	mov	sp,fp
  8056ec:	df000017 	ldw	fp,0(sp)
  8056f0:	dec00104 	addi	sp,sp,4
  8056f4:	f800283a 	ret

008056f8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  8056f8:	defff904 	addi	sp,sp,-28
  8056fc:	dfc00615 	stw	ra,24(sp)
  805700:	df000515 	stw	fp,20(sp)
  805704:	df000504 	addi	fp,sp,20
  805708:	2005883a 	mov	r2,r4
  80570c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805710:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  805714:	d0a04103 	ldbu	r2,-32508(gp)
  805718:	10803fcc 	andi	r2,r2,255
  80571c:	10000226 	beq	r2,zero,805728 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  805720:	0005883a 	mov	r2,zero
  805724:	00002506 	br	8057bc <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805728:	0005303a 	rdctl	r2,status
  80572c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805730:	e0fffe17 	ldw	r3,-8(fp)
  805734:	00bfff84 	movi	r2,-2
  805738:	1884703a 	and	r2,r3,r2
  80573c:	1001703a 	wrctl	status,r2
  
  return context;
  805740:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  805744:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  805748:	d0a04017 	ldw	r2,-32512(gp)
  80574c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  805750:	d0a04017 	ldw	r2,-32512(gp)
  805754:	10000326 	beq	r2,zero,805764 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  805758:	d0a04017 	ldw	r2,-32512(gp)
  80575c:	10800117 	ldw	r2,4(r2)
  805760:	d0a04015 	stw	r2,-32512(gp)
  805764:	e0bffb17 	ldw	r2,-20(fp)
  805768:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80576c:	e0bffc17 	ldw	r2,-16(fp)
  805770:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  805774:	e0bffd17 	ldw	r2,-12(fp)
  805778:	10000f26 	beq	r2,zero,8057b8 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  80577c:	e0bffd17 	ldw	r2,-12(fp)
  805780:	00c000c4 	movi	r3,3
  805784:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  805788:	e0bffd17 	ldw	r2,-12(fp)
  80578c:	e0ffff0b 	ldhu	r3,-4(fp)
  805790:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  805794:	e0bffd17 	ldw	r2,-12(fp)
  805798:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  80579c:	e0bffd17 	ldw	r2,-12(fp)
  8057a0:	00c00fc4 	movi	r3,63
  8057a4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  8057a8:	e0bffd17 	ldw	r2,-12(fp)
  8057ac:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  8057b0:	e13ffd17 	ldw	r4,-12(fp)
  8057b4:	08019d00 	call	8019d0 <OS_EventWaitListInit>
    }
    return (pevent);
  8057b8:	e0bffd17 	ldw	r2,-12(fp)
}
  8057bc:	e037883a 	mov	sp,fp
  8057c0:	dfc00117 	ldw	ra,4(sp)
  8057c4:	df000017 	ldw	fp,0(sp)
  8057c8:	dec00204 	addi	sp,sp,8
  8057cc:	f800283a 	ret

008057d0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8057d0:	defff304 	addi	sp,sp,-52
  8057d4:	dfc00c15 	stw	ra,48(sp)
  8057d8:	df000b15 	stw	fp,44(sp)
  8057dc:	df000b04 	addi	fp,sp,44
  8057e0:	e13ffd15 	stw	r4,-12(fp)
  8057e4:	2805883a 	mov	r2,r5
  8057e8:	e1bfff15 	stw	r6,-4(fp)
  8057ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8057f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	1000021e 	bne	r2,zero,805804 <OSSemDel+0x34>
        return (pevent);
  8057fc:	e0bffd17 	ldw	r2,-12(fp)
  805800:	00007e06 	br	8059fc <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  805804:	e0bffd17 	ldw	r2,-12(fp)
  805808:	1000051e 	bne	r2,zero,805820 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  80580c:	e0bfff17 	ldw	r2,-4(fp)
  805810:	00c00104 	movi	r3,4
  805814:	10c00005 	stb	r3,0(r2)
        return (pevent);
  805818:	e0bffd17 	ldw	r2,-12(fp)
  80581c:	00007706 	br	8059fc <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  805820:	e0bffd17 	ldw	r2,-12(fp)
  805824:	10800003 	ldbu	r2,0(r2)
  805828:	10803fcc 	andi	r2,r2,255
  80582c:	108000e0 	cmpeqi	r2,r2,3
  805830:	1000051e 	bne	r2,zero,805848 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  805834:	e0bfff17 	ldw	r2,-4(fp)
  805838:	00c00044 	movi	r3,1
  80583c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  805840:	e0bffd17 	ldw	r2,-12(fp)
  805844:	00006d06 	br	8059fc <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  805848:	d0a04103 	ldbu	r2,-32508(gp)
  80584c:	10803fcc 	andi	r2,r2,255
  805850:	10000526 	beq	r2,zero,805868 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  805854:	e0bfff17 	ldw	r2,-4(fp)
  805858:	00c003c4 	movi	r3,15
  80585c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  805860:	e0bffd17 	ldw	r2,-12(fp)
  805864:	00006506 	br	8059fc <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805868:	0005303a 	rdctl	r2,status
  80586c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805870:	e0fffc17 	ldw	r3,-16(fp)
  805874:	00bfff84 	movi	r2,-2
  805878:	1884703a 	and	r2,r3,r2
  80587c:	1001703a 	wrctl	status,r2
  
  return context;
  805880:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805884:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  805888:	e0bffd17 	ldw	r2,-12(fp)
  80588c:	10800283 	ldbu	r2,10(r2)
  805890:	10803fcc 	andi	r2,r2,255
  805894:	10000326 	beq	r2,zero,8058a4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  805898:	00800044 	movi	r2,1
  80589c:	e0bff505 	stb	r2,-44(fp)
  8058a0:	00000106 	br	8058a8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8058a4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  8058a8:	e0bffe03 	ldbu	r2,-8(fp)
  8058ac:	10000326 	beq	r2,zero,8058bc <OSSemDel+0xec>
  8058b0:	10800060 	cmpeqi	r2,r2,1
  8058b4:	1000281e 	bne	r2,zero,805958 <OSSemDel+0x188>
  8058b8:	00004506 	br	8059d0 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8058bc:	e0bff503 	ldbu	r2,-44(fp)
  8058c0:	1000161e 	bne	r2,zero,80591c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8058c4:	e0bffd17 	ldw	r2,-12(fp)
  8058c8:	00c00fc4 	movi	r3,63
  8058cc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8058d0:	e0bffd17 	ldw	r2,-12(fp)
  8058d4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8058d8:	e0bffd17 	ldw	r2,-12(fp)
  8058dc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8058e0:	d0e04017 	ldw	r3,-32512(gp)
  8058e4:	e0bffd17 	ldw	r2,-12(fp)
  8058e8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8058ec:	e0bffd17 	ldw	r2,-12(fp)
  8058f0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  8058f4:	e0bffd17 	ldw	r2,-12(fp)
  8058f8:	d0a04015 	stw	r2,-32512(gp)
  8058fc:	e0bff717 	ldw	r2,-36(fp)
  805900:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805904:	e0bff817 	ldw	r2,-32(fp)
  805908:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80590c:	e0bfff17 	ldw	r2,-4(fp)
  805910:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  805914:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  805918:	00003706 	br	8059f8 <OSSemDel+0x228>
  80591c:	e0bff717 	ldw	r2,-36(fp)
  805920:	e0bff915 	stw	r2,-28(fp)
  805924:	e0bff917 	ldw	r2,-28(fp)
  805928:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80592c:	e0bfff17 	ldw	r2,-4(fp)
  805930:	00c01244 	movi	r3,73
  805934:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  805938:	e0bffd17 	ldw	r2,-12(fp)
  80593c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  805940:	00002d06 	br	8059f8 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  805944:	000f883a 	mov	r7,zero
  805948:	01800044 	movi	r6,1
  80594c:	000b883a 	mov	r5,zero
  805950:	e13ffd17 	ldw	r4,-12(fp)
  805954:	08014200 	call	801420 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  805958:	e0bffd17 	ldw	r2,-12(fp)
  80595c:	10800283 	ldbu	r2,10(r2)
  805960:	10803fcc 	andi	r2,r2,255
  805964:	103ff71e 	bne	r2,zero,805944 <__alt_mem_epcs_flash_controller_0+0xff7fc944>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  805968:	e0bffd17 	ldw	r2,-12(fp)
  80596c:	00c00fc4 	movi	r3,63
  805970:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  805974:	e0bffd17 	ldw	r2,-12(fp)
  805978:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80597c:	e0bffd17 	ldw	r2,-12(fp)
  805980:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  805984:	d0e04017 	ldw	r3,-32512(gp)
  805988:	e0bffd17 	ldw	r2,-12(fp)
  80598c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  805990:	e0bffd17 	ldw	r2,-12(fp)
  805994:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  805998:	e0bffd17 	ldw	r2,-12(fp)
  80599c:	d0a04015 	stw	r2,-32512(gp)
  8059a0:	e0bff717 	ldw	r2,-36(fp)
  8059a4:	e0bffa15 	stw	r2,-24(fp)
  8059a8:	e0bffa17 	ldw	r2,-24(fp)
  8059ac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8059b0:	e0bff503 	ldbu	r2,-44(fp)
  8059b4:	10800058 	cmpnei	r2,r2,1
  8059b8:	1000011e 	bne	r2,zero,8059c0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8059bc:	0801e6c0 	call	801e6c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8059c0:	e0bfff17 	ldw	r2,-4(fp)
  8059c4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  8059c8:	e03ff615 	stw	zero,-40(fp)
             break;
  8059cc:	00000a06 	br	8059f8 <OSSemDel+0x228>
  8059d0:	e0bff717 	ldw	r2,-36(fp)
  8059d4:	e0bffb15 	stw	r2,-20(fp)
  8059d8:	e0bffb17 	ldw	r2,-20(fp)
  8059dc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8059e0:	e0bfff17 	ldw	r2,-4(fp)
  8059e4:	00c001c4 	movi	r3,7
  8059e8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  8059ec:	e0bffd17 	ldw	r2,-12(fp)
  8059f0:	e0bff615 	stw	r2,-40(fp)
             break;
  8059f4:	0001883a 	nop
    }
    return (pevent_return);
  8059f8:	e0bff617 	ldw	r2,-40(fp)
}
  8059fc:	e037883a 	mov	sp,fp
  805a00:	dfc00117 	ldw	ra,4(sp)
  805a04:	df000017 	ldw	fp,0(sp)
  805a08:	dec00204 	addi	sp,sp,8
  805a0c:	f800283a 	ret

00805a10 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  805a10:	defff504 	addi	sp,sp,-44
  805a14:	dfc00a15 	stw	ra,40(sp)
  805a18:	df000915 	stw	fp,36(sp)
  805a1c:	df000904 	addi	fp,sp,36
  805a20:	e13ffd15 	stw	r4,-12(fp)
  805a24:	2805883a 	mov	r2,r5
  805a28:	e1bfff15 	stw	r6,-4(fp)
  805a2c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805a30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  805a34:	e0bfff17 	ldw	r2,-4(fp)
  805a38:	10007226 	beq	r2,zero,805c04 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805a3c:	e0bffd17 	ldw	r2,-12(fp)
  805a40:	1000041e 	bne	r2,zero,805a54 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  805a44:	e0bfff17 	ldw	r2,-4(fp)
  805a48:	00c00104 	movi	r3,4
  805a4c:	10c00005 	stb	r3,0(r2)
        return;
  805a50:	00006d06 	br	805c08 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805a54:	e0bffd17 	ldw	r2,-12(fp)
  805a58:	10800003 	ldbu	r2,0(r2)
  805a5c:	10803fcc 	andi	r2,r2,255
  805a60:	108000e0 	cmpeqi	r2,r2,3
  805a64:	1000041e 	bne	r2,zero,805a78 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  805a68:	e0bfff17 	ldw	r2,-4(fp)
  805a6c:	00c00044 	movi	r3,1
  805a70:	10c00005 	stb	r3,0(r2)
        return;
  805a74:	00006406 	br	805c08 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  805a78:	d0a04103 	ldbu	r2,-32508(gp)
  805a7c:	10803fcc 	andi	r2,r2,255
  805a80:	10000426 	beq	r2,zero,805a94 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  805a84:	e0bfff17 	ldw	r2,-4(fp)
  805a88:	00c00084 	movi	r3,2
  805a8c:	10c00005 	stb	r3,0(r2)
        return;
  805a90:	00005d06 	br	805c08 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  805a94:	d0a03303 	ldbu	r2,-32564(gp)
  805a98:	10803fcc 	andi	r2,r2,255
  805a9c:	10000426 	beq	r2,zero,805ab0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  805aa0:	e0bfff17 	ldw	r2,-4(fp)
  805aa4:	00c00344 	movi	r3,13
  805aa8:	10c00005 	stb	r3,0(r2)
        return;
  805aac:	00005606 	br	805c08 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ab0:	0005303a 	rdctl	r2,status
  805ab4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ab8:	e0fffc17 	ldw	r3,-16(fp)
  805abc:	00bfff84 	movi	r2,-2
  805ac0:	1884703a 	and	r2,r3,r2
  805ac4:	1001703a 	wrctl	status,r2
  
  return context;
  805ac8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805acc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  805ad0:	e0bffd17 	ldw	r2,-12(fp)
  805ad4:	1080020b 	ldhu	r2,8(r2)
  805ad8:	10bfffcc 	andi	r2,r2,65535
  805adc:	10000d26 	beq	r2,zero,805b14 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  805ae0:	e0bffd17 	ldw	r2,-12(fp)
  805ae4:	1080020b 	ldhu	r2,8(r2)
  805ae8:	10bfffc4 	addi	r2,r2,-1
  805aec:	1007883a 	mov	r3,r2
  805af0:	e0bffd17 	ldw	r2,-12(fp)
  805af4:	10c0020d 	sth	r3,8(r2)
  805af8:	e0bff717 	ldw	r2,-36(fp)
  805afc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805b00:	e0bff817 	ldw	r2,-32(fp)
  805b04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  805b08:	e0bfff17 	ldw	r2,-4(fp)
  805b0c:	10000005 	stb	zero,0(r2)
        return;
  805b10:	00003d06 	br	805c08 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  805b14:	d0a04217 	ldw	r2,-32504(gp)
  805b18:	d0e04217 	ldw	r3,-32504(gp)
  805b1c:	18c00c03 	ldbu	r3,48(r3)
  805b20:	18c00054 	ori	r3,r3,1
  805b24:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  805b28:	d0a04217 	ldw	r2,-32504(gp)
  805b2c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  805b30:	d0a04217 	ldw	r2,-32504(gp)
  805b34:	e0fffe0b 	ldhu	r3,-8(fp)
  805b38:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  805b3c:	e13ffd17 	ldw	r4,-12(fp)
  805b40:	08015b80 	call	8015b8 <OS_EventTaskWait>
  805b44:	e0bff717 	ldw	r2,-36(fp)
  805b48:	e0bffb15 	stw	r2,-20(fp)
  805b4c:	e0bffb17 	ldw	r2,-20(fp)
  805b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  805b54:	0801e6c0 	call	801e6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805b58:	0005303a 	rdctl	r2,status
  805b5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805b60:	e0fff917 	ldw	r3,-28(fp)
  805b64:	00bfff84 	movi	r2,-2
  805b68:	1884703a 	and	r2,r3,r2
  805b6c:	1001703a 	wrctl	status,r2
  
  return context;
  805b70:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  805b74:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  805b78:	d0a04217 	ldw	r2,-32504(gp)
  805b7c:	10800c43 	ldbu	r2,49(r2)
  805b80:	10803fcc 	andi	r2,r2,255
  805b84:	10000326 	beq	r2,zero,805b94 <OSSemPend+0x184>
  805b88:	108000a0 	cmpeqi	r2,r2,2
  805b8c:	1000041e 	bne	r2,zero,805ba0 <OSSemPend+0x190>
  805b90:	00000706 	br	805bb0 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  805b94:	e0bfff17 	ldw	r2,-4(fp)
  805b98:	10000005 	stb	zero,0(r2)
             break;
  805b9c:	00000c06 	br	805bd0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  805ba0:	e0bfff17 	ldw	r2,-4(fp)
  805ba4:	00c00384 	movi	r3,14
  805ba8:	10c00005 	stb	r3,0(r2)
             break;
  805bac:	00000806 	br	805bd0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  805bb0:	d0a04217 	ldw	r2,-32504(gp)
  805bb4:	e17ffd17 	ldw	r5,-12(fp)
  805bb8:	1009883a 	mov	r4,r2
  805bbc:	08018180 	call	801818 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  805bc0:	e0bfff17 	ldw	r2,-4(fp)
  805bc4:	00c00284 	movi	r3,10
  805bc8:	10c00005 	stb	r3,0(r2)
             break;
  805bcc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  805bd0:	d0a04217 	ldw	r2,-32504(gp)
  805bd4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  805bd8:	d0a04217 	ldw	r2,-32504(gp)
  805bdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  805be0:	d0a04217 	ldw	r2,-32504(gp)
  805be4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  805be8:	d0a04217 	ldw	r2,-32504(gp)
  805bec:	10000815 	stw	zero,32(r2)
  805bf0:	e0bff717 	ldw	r2,-36(fp)
  805bf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805bf8:	e0bffa17 	ldw	r2,-24(fp)
  805bfc:	1001703a 	wrctl	status,r2
  805c00:	00000106 	br	805c08 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  805c04:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  805c08:	e037883a 	mov	sp,fp
  805c0c:	dfc00117 	ldw	ra,4(sp)
  805c10:	df000017 	ldw	fp,0(sp)
  805c14:	dec00204 	addi	sp,sp,8
  805c18:	f800283a 	ret

00805c1c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805c1c:	defff604 	addi	sp,sp,-40
  805c20:	dfc00915 	stw	ra,36(sp)
  805c24:	df000815 	stw	fp,32(sp)
  805c28:	df000804 	addi	fp,sp,32
  805c2c:	e13ffd15 	stw	r4,-12(fp)
  805c30:	2805883a 	mov	r2,r5
  805c34:	e1bfff15 	stw	r6,-4(fp)
  805c38:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805c3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  805c40:	e0bfff17 	ldw	r2,-4(fp)
  805c44:	1000021e 	bne	r2,zero,805c50 <OSSemPendAbort+0x34>
        return (0);
  805c48:	0005883a 	mov	r2,zero
  805c4c:	00004906 	br	805d74 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805c50:	e0bffd17 	ldw	r2,-12(fp)
  805c54:	1000051e 	bne	r2,zero,805c6c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  805c58:	e0bfff17 	ldw	r2,-4(fp)
  805c5c:	00c00104 	movi	r3,4
  805c60:	10c00005 	stb	r3,0(r2)
        return (0);
  805c64:	0005883a 	mov	r2,zero
  805c68:	00004206 	br	805d74 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805c6c:	e0bffd17 	ldw	r2,-12(fp)
  805c70:	10800003 	ldbu	r2,0(r2)
  805c74:	10803fcc 	andi	r2,r2,255
  805c78:	108000e0 	cmpeqi	r2,r2,3
  805c7c:	1000051e 	bne	r2,zero,805c94 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  805c80:	e0bfff17 	ldw	r2,-4(fp)
  805c84:	00c00044 	movi	r3,1
  805c88:	10c00005 	stb	r3,0(r2)
        return (0);
  805c8c:	0005883a 	mov	r2,zero
  805c90:	00003806 	br	805d74 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805c94:	0005303a 	rdctl	r2,status
  805c98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c9c:	e0fffc17 	ldw	r3,-16(fp)
  805ca0:	00bfff84 	movi	r2,-2
  805ca4:	1884703a 	and	r2,r3,r2
  805ca8:	1001703a 	wrctl	status,r2
  
  return context;
  805cac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805cb0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  805cb4:	e0bffd17 	ldw	r2,-12(fp)
  805cb8:	10800283 	ldbu	r2,10(r2)
  805cbc:	10803fcc 	andi	r2,r2,255
  805cc0:	10002526 	beq	r2,zero,805d58 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  805cc4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  805cc8:	e0bffe03 	ldbu	r2,-8(fp)
  805ccc:	10800060 	cmpeqi	r2,r2,1
  805cd0:	10000e26 	beq	r2,zero,805d0c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  805cd4:	00000806 	br	805cf8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  805cd8:	01c00084 	movi	r7,2
  805cdc:	01800044 	movi	r6,1
  805ce0:	000b883a 	mov	r5,zero
  805ce4:	e13ffd17 	ldw	r4,-12(fp)
  805ce8:	08014200 	call	801420 <OS_EventTaskRdy>
                     nbr_tasks++;
  805cec:	e0bff803 	ldbu	r2,-32(fp)
  805cf0:	10800044 	addi	r2,r2,1
  805cf4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  805cf8:	e0bffd17 	ldw	r2,-12(fp)
  805cfc:	10800283 	ldbu	r2,10(r2)
  805d00:	10803fcc 	andi	r2,r2,255
  805d04:	103ff41e 	bne	r2,zero,805cd8 <__alt_mem_epcs_flash_controller_0+0xff7fccd8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  805d08:	00000906 	br	805d30 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  805d0c:	01c00084 	movi	r7,2
  805d10:	01800044 	movi	r6,1
  805d14:	000b883a 	mov	r5,zero
  805d18:	e13ffd17 	ldw	r4,-12(fp)
  805d1c:	08014200 	call	801420 <OS_EventTaskRdy>
                 nbr_tasks++;
  805d20:	e0bff803 	ldbu	r2,-32(fp)
  805d24:	10800044 	addi	r2,r2,1
  805d28:	e0bff805 	stb	r2,-32(fp)
                 break;
  805d2c:	0001883a 	nop
  805d30:	e0bff917 	ldw	r2,-28(fp)
  805d34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d38:	e0bffa17 	ldw	r2,-24(fp)
  805d3c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  805d40:	0801e6c0 	call	801e6c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  805d44:	e0bfff17 	ldw	r2,-4(fp)
  805d48:	00c00384 	movi	r3,14
  805d4c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  805d50:	e0bff803 	ldbu	r2,-32(fp)
  805d54:	00000706 	br	805d74 <OSSemPendAbort+0x158>
  805d58:	e0bff917 	ldw	r2,-28(fp)
  805d5c:	e0bffb15 	stw	r2,-20(fp)
  805d60:	e0bffb17 	ldw	r2,-20(fp)
  805d64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805d68:	e0bfff17 	ldw	r2,-4(fp)
  805d6c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  805d70:	0005883a 	mov	r2,zero
}
  805d74:	e037883a 	mov	sp,fp
  805d78:	dfc00117 	ldw	ra,4(sp)
  805d7c:	df000017 	ldw	fp,0(sp)
  805d80:	dec00204 	addi	sp,sp,8
  805d84:	f800283a 	ret

00805d88 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  805d88:	defff804 	addi	sp,sp,-32
  805d8c:	dfc00715 	stw	ra,28(sp)
  805d90:	df000615 	stw	fp,24(sp)
  805d94:	df000604 	addi	fp,sp,24
  805d98:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805d9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805da0:	e0bfff17 	ldw	r2,-4(fp)
  805da4:	1000021e 	bne	r2,zero,805db0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  805da8:	00800104 	movi	r2,4
  805dac:	00003506 	br	805e84 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805db0:	e0bfff17 	ldw	r2,-4(fp)
  805db4:	10800003 	ldbu	r2,0(r2)
  805db8:	10803fcc 	andi	r2,r2,255
  805dbc:	108000e0 	cmpeqi	r2,r2,3
  805dc0:	1000021e 	bne	r2,zero,805dcc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  805dc4:	00800044 	movi	r2,1
  805dc8:	00002e06 	br	805e84 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805dcc:	0005303a 	rdctl	r2,status
  805dd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805dd4:	e0fffe17 	ldw	r3,-8(fp)
  805dd8:	00bfff84 	movi	r2,-2
  805ddc:	1884703a 	and	r2,r3,r2
  805de0:	1001703a 	wrctl	status,r2
  
  return context;
  805de4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  805de8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  805dec:	e0bfff17 	ldw	r2,-4(fp)
  805df0:	10800283 	ldbu	r2,10(r2)
  805df4:	10803fcc 	andi	r2,r2,255
  805df8:	10000c26 	beq	r2,zero,805e2c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  805dfc:	000f883a 	mov	r7,zero
  805e00:	01800044 	movi	r6,1
  805e04:	000b883a 	mov	r5,zero
  805e08:	e13fff17 	ldw	r4,-4(fp)
  805e0c:	08014200 	call	801420 <OS_EventTaskRdy>
  805e10:	e0bffa17 	ldw	r2,-24(fp)
  805e14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e18:	e0bffb17 	ldw	r2,-20(fp)
  805e1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  805e20:	0801e6c0 	call	801e6c <OS_Sched>
        return (OS_ERR_NONE);
  805e24:	0005883a 	mov	r2,zero
  805e28:	00001606 	br	805e84 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  805e2c:	e0bfff17 	ldw	r2,-4(fp)
  805e30:	1080020b 	ldhu	r2,8(r2)
  805e34:	10ffffcc 	andi	r3,r2,65535
  805e38:	00bfffd4 	movui	r2,65535
  805e3c:	18800c26 	beq	r3,r2,805e70 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  805e40:	e0bfff17 	ldw	r2,-4(fp)
  805e44:	1080020b 	ldhu	r2,8(r2)
  805e48:	10800044 	addi	r2,r2,1
  805e4c:	1007883a 	mov	r3,r2
  805e50:	e0bfff17 	ldw	r2,-4(fp)
  805e54:	10c0020d 	sth	r3,8(r2)
  805e58:	e0bffa17 	ldw	r2,-24(fp)
  805e5c:	e0bffc15 	stw	r2,-16(fp)
  805e60:	e0bffc17 	ldw	r2,-16(fp)
  805e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  805e68:	0005883a 	mov	r2,zero
  805e6c:	00000506 	br	805e84 <OSSemPost+0xfc>
  805e70:	e0bffa17 	ldw	r2,-24(fp)
  805e74:	e0bffd15 	stw	r2,-12(fp)
  805e78:	e0bffd17 	ldw	r2,-12(fp)
  805e7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  805e80:	00800c84 	movi	r2,50
}
  805e84:	e037883a 	mov	sp,fp
  805e88:	dfc00117 	ldw	ra,4(sp)
  805e8c:	df000017 	ldw	fp,0(sp)
  805e90:	dec00204 	addi	sp,sp,8
  805e94:	f800283a 	ret

00805e98 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  805e98:	defff704 	addi	sp,sp,-36
  805e9c:	df000815 	stw	fp,32(sp)
  805ea0:	df000804 	addi	fp,sp,32
  805ea4:	e13ffe15 	stw	r4,-8(fp)
  805ea8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805eac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  805eb0:	e0bffe17 	ldw	r2,-8(fp)
  805eb4:	1000021e 	bne	r2,zero,805ec0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  805eb8:	00800104 	movi	r2,4
  805ebc:	00003606 	br	805f98 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  805ec0:	e0bfff17 	ldw	r2,-4(fp)
  805ec4:	1000021e 	bne	r2,zero,805ed0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  805ec8:	00800244 	movi	r2,9
  805ecc:	00003206 	br	805f98 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  805ed0:	e0bffe17 	ldw	r2,-8(fp)
  805ed4:	10800003 	ldbu	r2,0(r2)
  805ed8:	10803fcc 	andi	r2,r2,255
  805edc:	108000e0 	cmpeqi	r2,r2,3
  805ee0:	1000021e 	bne	r2,zero,805eec <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  805ee4:	00800044 	movi	r2,1
  805ee8:	00002b06 	br	805f98 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805eec:	0005303a 	rdctl	r2,status
  805ef0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ef4:	e0fffd17 	ldw	r3,-12(fp)
  805ef8:	00bfff84 	movi	r2,-2
  805efc:	1884703a 	and	r2,r3,r2
  805f00:	1001703a 	wrctl	status,r2
  
  return context;
  805f04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  805f08:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  805f0c:	e0bffe17 	ldw	r2,-8(fp)
  805f10:	10c00283 	ldbu	r3,10(r2)
  805f14:	e0bfff17 	ldw	r2,-4(fp)
  805f18:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  805f1c:	e0bffe17 	ldw	r2,-8(fp)
  805f20:	108002c4 	addi	r2,r2,11
  805f24:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  805f28:	e0bfff17 	ldw	r2,-4(fp)
  805f2c:	10800084 	addi	r2,r2,2
  805f30:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805f34:	e03ffa05 	stb	zero,-24(fp)
  805f38:	00000b06 	br	805f68 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  805f3c:	e0bff917 	ldw	r2,-28(fp)
  805f40:	10c00044 	addi	r3,r2,1
  805f44:	e0fff915 	stw	r3,-28(fp)
  805f48:	e0fff817 	ldw	r3,-32(fp)
  805f4c:	19000044 	addi	r4,r3,1
  805f50:	e13ff815 	stw	r4,-32(fp)
  805f54:	18c00003 	ldbu	r3,0(r3)
  805f58:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805f5c:	e0bffa03 	ldbu	r2,-24(fp)
  805f60:	10800044 	addi	r2,r2,1
  805f64:	e0bffa05 	stb	r2,-24(fp)
  805f68:	e0bffa03 	ldbu	r2,-24(fp)
  805f6c:	108000f0 	cmpltui	r2,r2,3
  805f70:	103ff21e 	bne	r2,zero,805f3c <__alt_mem_epcs_flash_controller_0+0xff7fcf3c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  805f74:	e0bffe17 	ldw	r2,-8(fp)
  805f78:	10c0020b 	ldhu	r3,8(r2)
  805f7c:	e0bfff17 	ldw	r2,-4(fp)
  805f80:	10c0000d 	sth	r3,0(r2)
  805f84:	e0bffb17 	ldw	r2,-20(fp)
  805f88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f8c:	e0bffc17 	ldw	r2,-16(fp)
  805f90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805f94:	0005883a 	mov	r2,zero
}
  805f98:	e037883a 	mov	sp,fp
  805f9c:	df000017 	ldw	fp,0(sp)
  805fa0:	dec00104 	addi	sp,sp,4
  805fa4:	f800283a 	ret

00805fa8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  805fa8:	defff904 	addi	sp,sp,-28
  805fac:	df000615 	stw	fp,24(sp)
  805fb0:	df000604 	addi	fp,sp,24
  805fb4:	e13ffd15 	stw	r4,-12(fp)
  805fb8:	2805883a 	mov	r2,r5
  805fbc:	e1bfff15 	stw	r6,-4(fp)
  805fc0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805fc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  805fc8:	e0bfff17 	ldw	r2,-4(fp)
  805fcc:	10003126 	beq	r2,zero,806094 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805fd0:	e0bffd17 	ldw	r2,-12(fp)
  805fd4:	1000041e 	bne	r2,zero,805fe8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  805fd8:	e0bfff17 	ldw	r2,-4(fp)
  805fdc:	00c00104 	movi	r3,4
  805fe0:	10c00005 	stb	r3,0(r2)
        return;
  805fe4:	00002c06 	br	806098 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805fe8:	e0bffd17 	ldw	r2,-12(fp)
  805fec:	10800003 	ldbu	r2,0(r2)
  805ff0:	10803fcc 	andi	r2,r2,255
  805ff4:	108000e0 	cmpeqi	r2,r2,3
  805ff8:	1000041e 	bne	r2,zero,80600c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  805ffc:	e0bfff17 	ldw	r2,-4(fp)
  806000:	00c00044 	movi	r3,1
  806004:	10c00005 	stb	r3,0(r2)
        return;
  806008:	00002306 	br	806098 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80600c:	0005303a 	rdctl	r2,status
  806010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806014:	e0fffc17 	ldw	r3,-16(fp)
  806018:	00bfff84 	movi	r2,-2
  80601c:	1884703a 	and	r2,r3,r2
  806020:	1001703a 	wrctl	status,r2
  
  return context;
  806024:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806028:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  80602c:	e0bfff17 	ldw	r2,-4(fp)
  806030:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  806034:	e0bffd17 	ldw	r2,-12(fp)
  806038:	1080020b 	ldhu	r2,8(r2)
  80603c:	10bfffcc 	andi	r2,r2,65535
  806040:	10000426 	beq	r2,zero,806054 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  806044:	e0bffd17 	ldw	r2,-12(fp)
  806048:	e0fffe0b 	ldhu	r3,-8(fp)
  80604c:	10c0020d 	sth	r3,8(r2)
  806050:	00000b06 	br	806080 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  806054:	e0bffd17 	ldw	r2,-12(fp)
  806058:	10800283 	ldbu	r2,10(r2)
  80605c:	10803fcc 	andi	r2,r2,255
  806060:	1000041e 	bne	r2,zero,806074 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  806064:	e0bffd17 	ldw	r2,-12(fp)
  806068:	e0fffe0b 	ldhu	r3,-8(fp)
  80606c:	10c0020d 	sth	r3,8(r2)
  806070:	00000306 	br	806080 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  806074:	e0bfff17 	ldw	r2,-4(fp)
  806078:	00c01244 	movi	r3,73
  80607c:	10c00005 	stb	r3,0(r2)
  806080:	e0bffa17 	ldw	r2,-24(fp)
  806084:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806088:	e0bffb17 	ldw	r2,-20(fp)
  80608c:	1001703a 	wrctl	status,r2
  806090:	00000106 	br	806098 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  806094:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  806098:	e037883a 	mov	sp,fp
  80609c:	df000017 	ldw	fp,0(sp)
  8060a0:	dec00104 	addi	sp,sp,4
  8060a4:	f800283a 	ret

008060a8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  8060a8:	defff104 	addi	sp,sp,-60
  8060ac:	dfc00e15 	stw	ra,56(sp)
  8060b0:	df000d15 	stw	fp,52(sp)
  8060b4:	df000d04 	addi	fp,sp,52
  8060b8:	2007883a 	mov	r3,r4
  8060bc:	2805883a 	mov	r2,r5
  8060c0:	e0fffe05 	stb	r3,-8(fp)
  8060c4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8060c8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8060cc:	e0bffe03 	ldbu	r2,-8(fp)
  8060d0:	10800530 	cmpltui	r2,r2,20
  8060d4:	1000051e 	bne	r2,zero,8060ec <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  8060d8:	e0bffe03 	ldbu	r2,-8(fp)
  8060dc:	10803fe0 	cmpeqi	r2,r2,255
  8060e0:	1000021e 	bne	r2,zero,8060ec <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  8060e4:	00800a84 	movi	r2,42
  8060e8:	00012606 	br	806584 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  8060ec:	e0bfff03 	ldbu	r2,-4(fp)
  8060f0:	10800530 	cmpltui	r2,r2,20
  8060f4:	1000021e 	bne	r2,zero,806100 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  8060f8:	00800a84 	movi	r2,42
  8060fc:	00012106 	br	806584 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806100:	0005303a 	rdctl	r2,status
  806104:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806108:	e0fffd17 	ldw	r3,-12(fp)
  80610c:	00bfff84 	movi	r2,-2
  806110:	1884703a 	and	r2,r3,r2
  806114:	1001703a 	wrctl	status,r2
  
  return context;
  806118:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80611c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  806120:	e0ffff03 	ldbu	r3,-4(fp)
  806124:	00802074 	movhi	r2,129
  806128:	109d2f04 	addi	r2,r2,29884
  80612c:	18c7883a 	add	r3,r3,r3
  806130:	18c7883a 	add	r3,r3,r3
  806134:	10c5883a 	add	r2,r2,r3
  806138:	10800017 	ldw	r2,0(r2)
  80613c:	10000626 	beq	r2,zero,806158 <OSTaskChangePrio+0xb0>
  806140:	e0bff517 	ldw	r2,-44(fp)
  806144:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806148:	e0bff617 	ldw	r2,-40(fp)
  80614c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  806150:	00800a04 	movi	r2,40
  806154:	00010b06 	br	806584 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  806158:	e0bffe03 	ldbu	r2,-8(fp)
  80615c:	10803fd8 	cmpnei	r2,r2,255
  806160:	1000031e 	bne	r2,zero,806170 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  806164:	d0a04217 	ldw	r2,-32504(gp)
  806168:	10800c83 	ldbu	r2,50(r2)
  80616c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  806170:	e0fffe03 	ldbu	r3,-8(fp)
  806174:	00802074 	movhi	r2,129
  806178:	109d2f04 	addi	r2,r2,29884
  80617c:	18c7883a 	add	r3,r3,r3
  806180:	18c7883a 	add	r3,r3,r3
  806184:	10c5883a 	add	r2,r2,r3
  806188:	10800017 	ldw	r2,0(r2)
  80618c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  806190:	e0bff817 	ldw	r2,-32(fp)
  806194:	1000061e 	bne	r2,zero,8061b0 <OSTaskChangePrio+0x108>
  806198:	e0bff517 	ldw	r2,-44(fp)
  80619c:	e0bff715 	stw	r2,-36(fp)
  8061a0:	e0bff717 	ldw	r2,-36(fp)
  8061a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8061a8:	00800a44 	movi	r2,41
  8061ac:	0000f506 	br	806584 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  8061b0:	e0bff817 	ldw	r2,-32(fp)
  8061b4:	10800058 	cmpnei	r2,r2,1
  8061b8:	1000061e 	bne	r2,zero,8061d4 <OSTaskChangePrio+0x12c>
  8061bc:	e0bff517 	ldw	r2,-44(fp)
  8061c0:	e0bff915 	stw	r2,-28(fp)
  8061c4:	e0bff917 	ldw	r2,-28(fp)
  8061c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8061cc:	008010c4 	movi	r2,67
  8061d0:	0000ec06 	br	806584 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  8061d4:	e0bfff03 	ldbu	r2,-4(fp)
  8061d8:	1004d0fa 	srli	r2,r2,3
  8061dc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  8061e0:	e0bfff03 	ldbu	r2,-4(fp)
  8061e4:	108001cc 	andi	r2,r2,7
  8061e8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  8061ec:	e0bffb03 	ldbu	r2,-20(fp)
  8061f0:	00c00044 	movi	r3,1
  8061f4:	1884983a 	sll	r2,r3,r2
  8061f8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  8061fc:	e0bffb43 	ldbu	r2,-19(fp)
  806200:	00c00044 	movi	r3,1
  806204:	1884983a 	sll	r2,r3,r2
  806208:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80620c:	e0fffe03 	ldbu	r3,-8(fp)
  806210:	00802074 	movhi	r2,129
  806214:	109d2f04 	addi	r2,r2,29884
  806218:	18c7883a 	add	r3,r3,r3
  80621c:	18c7883a 	add	r3,r3,r3
  806220:	10c5883a 	add	r2,r2,r3
  806224:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  806228:	e0ffff03 	ldbu	r3,-4(fp)
  80622c:	00802074 	movhi	r2,129
  806230:	109d2f04 	addi	r2,r2,29884
  806234:	18c7883a 	add	r3,r3,r3
  806238:	18c7883a 	add	r3,r3,r3
  80623c:	10c5883a 	add	r2,r2,r3
  806240:	e0fff817 	ldw	r3,-32(fp)
  806244:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  806248:	e0bff817 	ldw	r2,-32(fp)
  80624c:	10800d03 	ldbu	r2,52(r2)
  806250:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  806254:	e0bff817 	ldw	r2,-32(fp)
  806258:	10800d83 	ldbu	r2,54(r2)
  80625c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  806260:	e0bff817 	ldw	r2,-32(fp)
  806264:	10800d43 	ldbu	r2,53(r2)
  806268:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  80626c:	e0fffc03 	ldbu	r3,-16(fp)
  806270:	d0a03f44 	addi	r2,gp,-32515
  806274:	1885883a 	add	r2,r3,r2
  806278:	10c00003 	ldbu	r3,0(r2)
  80627c:	e0bffc83 	ldbu	r2,-14(fp)
  806280:	1884703a 	and	r2,r3,r2
  806284:	10803fcc 	andi	r2,r2,255
  806288:	10002826 	beq	r2,zero,80632c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  80628c:	e0fffc03 	ldbu	r3,-16(fp)
  806290:	e13ffc03 	ldbu	r4,-16(fp)
  806294:	d0a03f44 	addi	r2,gp,-32515
  806298:	2085883a 	add	r2,r4,r2
  80629c:	10800003 	ldbu	r2,0(r2)
  8062a0:	1009883a 	mov	r4,r2
  8062a4:	e0bffc83 	ldbu	r2,-14(fp)
  8062a8:	0084303a 	nor	r2,zero,r2
  8062ac:	2084703a 	and	r2,r4,r2
  8062b0:	1009883a 	mov	r4,r2
  8062b4:	d0a03f44 	addi	r2,gp,-32515
  8062b8:	1885883a 	add	r2,r3,r2
  8062bc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8062c0:	e0fffc03 	ldbu	r3,-16(fp)
  8062c4:	d0a03f44 	addi	r2,gp,-32515
  8062c8:	1885883a 	add	r2,r3,r2
  8062cc:	10800003 	ldbu	r2,0(r2)
  8062d0:	10803fcc 	andi	r2,r2,255
  8062d4:	1000061e 	bne	r2,zero,8062f0 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  8062d8:	e0bffc43 	ldbu	r2,-15(fp)
  8062dc:	0084303a 	nor	r2,zero,r2
  8062e0:	1007883a 	mov	r3,r2
  8062e4:	d0a03f03 	ldbu	r2,-32516(gp)
  8062e8:	1884703a 	and	r2,r3,r2
  8062ec:	d0a03f05 	stb	r2,-32516(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  8062f0:	d0e03f03 	ldbu	r3,-32516(gp)
  8062f4:	e0bffb83 	ldbu	r2,-18(fp)
  8062f8:	1884b03a 	or	r2,r3,r2
  8062fc:	d0a03f05 	stb	r2,-32516(gp)
         OSRdyTbl[y_new] |= bitx_new;
  806300:	e0fffb03 	ldbu	r3,-20(fp)
  806304:	e13ffb03 	ldbu	r4,-20(fp)
  806308:	d0a03f44 	addi	r2,gp,-32515
  80630c:	2085883a 	add	r2,r4,r2
  806310:	11000003 	ldbu	r4,0(r2)
  806314:	e0bffbc3 	ldbu	r2,-17(fp)
  806318:	2084b03a 	or	r2,r4,r2
  80631c:	1009883a 	mov	r4,r2
  806320:	d0a03f44 	addi	r2,gp,-32515
  806324:	1885883a 	add	r2,r3,r2
  806328:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80632c:	e0bff817 	ldw	r2,-32(fp)
  806330:	10800717 	ldw	r2,28(r2)
  806334:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  806338:	e0bff317 	ldw	r2,-52(fp)
  80633c:	10003326 	beq	r2,zero,80640c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  806340:	e0bffc03 	ldbu	r2,-16(fp)
  806344:	e0fffc03 	ldbu	r3,-16(fp)
  806348:	e13ff317 	ldw	r4,-52(fp)
  80634c:	20c7883a 	add	r3,r4,r3
  806350:	18c002c4 	addi	r3,r3,11
  806354:	18c00003 	ldbu	r3,0(r3)
  806358:	1809883a 	mov	r4,r3
  80635c:	e0fffc83 	ldbu	r3,-14(fp)
  806360:	00c6303a 	nor	r3,zero,r3
  806364:	20c6703a 	and	r3,r4,r3
  806368:	1809883a 	mov	r4,r3
  80636c:	e0fff317 	ldw	r3,-52(fp)
  806370:	1885883a 	add	r2,r3,r2
  806374:	108002c4 	addi	r2,r2,11
  806378:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80637c:	e0bffc03 	ldbu	r2,-16(fp)
  806380:	e0fff317 	ldw	r3,-52(fp)
  806384:	1885883a 	add	r2,r3,r2
  806388:	108002c4 	addi	r2,r2,11
  80638c:	10800003 	ldbu	r2,0(r2)
  806390:	10803fcc 	andi	r2,r2,255
  806394:	1000091e 	bne	r2,zero,8063bc <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  806398:	e0bff317 	ldw	r2,-52(fp)
  80639c:	10800283 	ldbu	r2,10(r2)
  8063a0:	1007883a 	mov	r3,r2
  8063a4:	e0bffc43 	ldbu	r2,-15(fp)
  8063a8:	0084303a 	nor	r2,zero,r2
  8063ac:	1884703a 	and	r2,r3,r2
  8063b0:	1007883a 	mov	r3,r2
  8063b4:	e0bff317 	ldw	r2,-52(fp)
  8063b8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  8063bc:	e0bff317 	ldw	r2,-52(fp)
  8063c0:	10c00283 	ldbu	r3,10(r2)
  8063c4:	e0bffb83 	ldbu	r2,-18(fp)
  8063c8:	1884b03a 	or	r2,r3,r2
  8063cc:	1007883a 	mov	r3,r2
  8063d0:	e0bff317 	ldw	r2,-52(fp)
  8063d4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  8063d8:	e0bffb03 	ldbu	r2,-20(fp)
  8063dc:	e0fffb03 	ldbu	r3,-20(fp)
  8063e0:	e13ff317 	ldw	r4,-52(fp)
  8063e4:	20c7883a 	add	r3,r4,r3
  8063e8:	18c002c4 	addi	r3,r3,11
  8063ec:	19000003 	ldbu	r4,0(r3)
  8063f0:	e0fffbc3 	ldbu	r3,-17(fp)
  8063f4:	20c6b03a 	or	r3,r4,r3
  8063f8:	1809883a 	mov	r4,r3
  8063fc:	e0fff317 	ldw	r3,-52(fp)
  806400:	1885883a 	add	r2,r3,r2
  806404:	108002c4 	addi	r2,r2,11
  806408:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80640c:	e0bff817 	ldw	r2,-32(fp)
  806410:	10800817 	ldw	r2,32(r2)
  806414:	10004226 	beq	r2,zero,806520 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  806418:	e0bff817 	ldw	r2,-32(fp)
  80641c:	10800817 	ldw	r2,32(r2)
  806420:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  806424:	e0bff417 	ldw	r2,-48(fp)
  806428:	10800017 	ldw	r2,0(r2)
  80642c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  806430:	00003906 	br	806518 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  806434:	e0bffc03 	ldbu	r2,-16(fp)
  806438:	e0fffc03 	ldbu	r3,-16(fp)
  80643c:	e13ff317 	ldw	r4,-52(fp)
  806440:	20c7883a 	add	r3,r4,r3
  806444:	18c002c4 	addi	r3,r3,11
  806448:	18c00003 	ldbu	r3,0(r3)
  80644c:	1809883a 	mov	r4,r3
  806450:	e0fffc83 	ldbu	r3,-14(fp)
  806454:	00c6303a 	nor	r3,zero,r3
  806458:	20c6703a 	and	r3,r4,r3
  80645c:	1809883a 	mov	r4,r3
  806460:	e0fff317 	ldw	r3,-52(fp)
  806464:	1885883a 	add	r2,r3,r2
  806468:	108002c4 	addi	r2,r2,11
  80646c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  806470:	e0bffc03 	ldbu	r2,-16(fp)
  806474:	e0fff317 	ldw	r3,-52(fp)
  806478:	1885883a 	add	r2,r3,r2
  80647c:	108002c4 	addi	r2,r2,11
  806480:	10800003 	ldbu	r2,0(r2)
  806484:	10803fcc 	andi	r2,r2,255
  806488:	1000091e 	bne	r2,zero,8064b0 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  80648c:	e0bff317 	ldw	r2,-52(fp)
  806490:	10800283 	ldbu	r2,10(r2)
  806494:	1007883a 	mov	r3,r2
  806498:	e0bffc43 	ldbu	r2,-15(fp)
  80649c:	0084303a 	nor	r2,zero,r2
  8064a0:	1884703a 	and	r2,r3,r2
  8064a4:	1007883a 	mov	r3,r2
  8064a8:	e0bff317 	ldw	r2,-52(fp)
  8064ac:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  8064b0:	e0bff317 	ldw	r2,-52(fp)
  8064b4:	10c00283 	ldbu	r3,10(r2)
  8064b8:	e0bffb83 	ldbu	r2,-18(fp)
  8064bc:	1884b03a 	or	r2,r3,r2
  8064c0:	1007883a 	mov	r3,r2
  8064c4:	e0bff317 	ldw	r2,-52(fp)
  8064c8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  8064cc:	e0bffb03 	ldbu	r2,-20(fp)
  8064d0:	e0fffb03 	ldbu	r3,-20(fp)
  8064d4:	e13ff317 	ldw	r4,-52(fp)
  8064d8:	20c7883a 	add	r3,r4,r3
  8064dc:	18c002c4 	addi	r3,r3,11
  8064e0:	19000003 	ldbu	r4,0(r3)
  8064e4:	e0fffbc3 	ldbu	r3,-17(fp)
  8064e8:	20c6b03a 	or	r3,r4,r3
  8064ec:	1809883a 	mov	r4,r3
  8064f0:	e0fff317 	ldw	r3,-52(fp)
  8064f4:	1885883a 	add	r2,r3,r2
  8064f8:	108002c4 	addi	r2,r2,11
  8064fc:	11000005 	stb	r4,0(r2)
            pevents++;
  806500:	e0bff417 	ldw	r2,-48(fp)
  806504:	10800104 	addi	r2,r2,4
  806508:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  80650c:	e0bff417 	ldw	r2,-48(fp)
  806510:	10800017 	ldw	r2,0(r2)
  806514:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  806518:	e0bff317 	ldw	r2,-52(fp)
  80651c:	103fc51e 	bne	r2,zero,806434 <__alt_mem_epcs_flash_controller_0+0xff7fd434>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  806520:	e0bff817 	ldw	r2,-32(fp)
  806524:	e0ffff03 	ldbu	r3,-4(fp)
  806528:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  80652c:	e0bff817 	ldw	r2,-32(fp)
  806530:	e0fffb03 	ldbu	r3,-20(fp)
  806534:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  806538:	e0bff817 	ldw	r2,-32(fp)
  80653c:	e0fffb43 	ldbu	r3,-19(fp)
  806540:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  806544:	e0bff817 	ldw	r2,-32(fp)
  806548:	e0fffb83 	ldbu	r3,-18(fp)
  80654c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  806550:	e0bff817 	ldw	r2,-32(fp)
  806554:	e0fffbc3 	ldbu	r3,-17(fp)
  806558:	10c00d45 	stb	r3,53(r2)
  80655c:	e0bff517 	ldw	r2,-44(fp)
  806560:	e0bffa15 	stw	r2,-24(fp)
  806564:	e0bffa17 	ldw	r2,-24(fp)
  806568:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80656c:	d0a03343 	ldbu	r2,-32563(gp)
  806570:	10803fcc 	andi	r2,r2,255
  806574:	10800058 	cmpnei	r2,r2,1
  806578:	1000011e 	bne	r2,zero,806580 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  80657c:	0801e6c0 	call	801e6c <OS_Sched>
    }
    return (OS_ERR_NONE);
  806580:	0005883a 	mov	r2,zero
}
  806584:	e037883a 	mov	sp,fp
  806588:	dfc00117 	ldw	ra,4(sp)
  80658c:	df000017 	ldw	fp,0(sp)
  806590:	dec00204 	addi	sp,sp,8
  806594:	f800283a 	ret

00806598 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  806598:	deffee04 	addi	sp,sp,-72
  80659c:	dfc01115 	stw	ra,68(sp)
  8065a0:	df001015 	stw	fp,64(sp)
  8065a4:	df001004 	addi	fp,sp,64
  8065a8:	e13ffc15 	stw	r4,-16(fp)
  8065ac:	e17ffd15 	stw	r5,-12(fp)
  8065b0:	e1bffe15 	stw	r6,-8(fp)
  8065b4:	3805883a 	mov	r2,r7
  8065b8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8065bc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8065c0:	e0bfff03 	ldbu	r2,-4(fp)
  8065c4:	10800570 	cmpltui	r2,r2,21
  8065c8:	1000021e 	bne	r2,zero,8065d4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  8065cc:	00800a84 	movi	r2,42
  8065d0:	00005706 	br	806730 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8065d4:	0005303a 	rdctl	r2,status
  8065d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8065dc:	e0fffb17 	ldw	r3,-20(fp)
  8065e0:	00bfff84 	movi	r2,-2
  8065e4:	1884703a 	and	r2,r3,r2
  8065e8:	1001703a 	wrctl	status,r2
  
  return context;
  8065ec:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8065f0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8065f4:	d0a04103 	ldbu	r2,-32508(gp)
  8065f8:	10803fcc 	andi	r2,r2,255
  8065fc:	10000626 	beq	r2,zero,806618 <OSTaskCreate+0x80>
  806600:	e0bff317 	ldw	r2,-52(fp)
  806604:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806608:	e0bff417 	ldw	r2,-48(fp)
  80660c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  806610:	00800f04 	movi	r2,60
  806614:	00004606 	br	806730 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  806618:	e0ffff03 	ldbu	r3,-4(fp)
  80661c:	00802074 	movhi	r2,129
  806620:	109d2f04 	addi	r2,r2,29884
  806624:	18c7883a 	add	r3,r3,r3
  806628:	18c7883a 	add	r3,r3,r3
  80662c:	10c5883a 	add	r2,r2,r3
  806630:	10800017 	ldw	r2,0(r2)
  806634:	1000391e 	bne	r2,zero,80671c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  806638:	e0ffff03 	ldbu	r3,-4(fp)
  80663c:	00802074 	movhi	r2,129
  806640:	109d2f04 	addi	r2,r2,29884
  806644:	18c7883a 	add	r3,r3,r3
  806648:	18c7883a 	add	r3,r3,r3
  80664c:	10c5883a 	add	r2,r2,r3
  806650:	00c00044 	movi	r3,1
  806654:	10c00015 	stw	r3,0(r2)
  806658:	e0bff317 	ldw	r2,-52(fp)
  80665c:	e0bff515 	stw	r2,-44(fp)
  806660:	e0bff517 	ldw	r2,-44(fp)
  806664:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  806668:	000f883a 	mov	r7,zero
  80666c:	e1bffe17 	ldw	r6,-8(fp)
  806670:	e17ffd17 	ldw	r5,-12(fp)
  806674:	e13ffc17 	ldw	r4,-16(fp)
  806678:	080b7540 	call	80b754 <OSTaskStkInit>
  80667c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  806680:	e0bfff03 	ldbu	r2,-4(fp)
  806684:	d8000215 	stw	zero,8(sp)
  806688:	d8000115 	stw	zero,4(sp)
  80668c:	d8000015 	stw	zero,0(sp)
  806690:	000f883a 	mov	r7,zero
  806694:	000d883a 	mov	r6,zero
  806698:	e17ff717 	ldw	r5,-36(fp)
  80669c:	1009883a 	mov	r4,r2
  8066a0:	080226c0 	call	80226c <OS_TCBInit>
  8066a4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  8066a8:	e0bff803 	ldbu	r2,-32(fp)
  8066ac:	1000061e 	bne	r2,zero,8066c8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  8066b0:	d0a03343 	ldbu	r2,-32563(gp)
  8066b4:	10803fcc 	andi	r2,r2,255
  8066b8:	10800058 	cmpnei	r2,r2,1
  8066bc:	1000151e 	bne	r2,zero,806714 <OSTaskCreate+0x17c>
                OS_Sched();
  8066c0:	0801e6c0 	call	801e6c <OS_Sched>
  8066c4:	00001306 	br	806714 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8066c8:	0005303a 	rdctl	r2,status
  8066cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8066d0:	e0fffa17 	ldw	r3,-24(fp)
  8066d4:	00bfff84 	movi	r2,-2
  8066d8:	1884703a 	and	r2,r3,r2
  8066dc:	1001703a 	wrctl	status,r2
  
  return context;
  8066e0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8066e4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  8066e8:	e0ffff03 	ldbu	r3,-4(fp)
  8066ec:	00802074 	movhi	r2,129
  8066f0:	109d2f04 	addi	r2,r2,29884
  8066f4:	18c7883a 	add	r3,r3,r3
  8066f8:	18c7883a 	add	r3,r3,r3
  8066fc:	10c5883a 	add	r2,r2,r3
  806700:	10000015 	stw	zero,0(r2)
  806704:	e0bff317 	ldw	r2,-52(fp)
  806708:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80670c:	e0bff617 	ldw	r2,-40(fp)
  806710:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  806714:	e0bff803 	ldbu	r2,-32(fp)
  806718:	00000506 	br	806730 <OSTaskCreate+0x198>
  80671c:	e0bff317 	ldw	r2,-52(fp)
  806720:	e0bff915 	stw	r2,-28(fp)
  806724:	e0bff917 	ldw	r2,-28(fp)
  806728:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80672c:	00800a04 	movi	r2,40
}
  806730:	e037883a 	mov	sp,fp
  806734:	dfc00117 	ldw	ra,4(sp)
  806738:	df000017 	ldw	fp,0(sp)
  80673c:	dec00204 	addi	sp,sp,8
  806740:	f800283a 	ret

00806744 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  806744:	deffec04 	addi	sp,sp,-80
  806748:	dfc01315 	stw	ra,76(sp)
  80674c:	df001215 	stw	fp,72(sp)
  806750:	df001204 	addi	fp,sp,72
  806754:	e13ffa15 	stw	r4,-24(fp)
  806758:	e17ffb15 	stw	r5,-20(fp)
  80675c:	e1bffc15 	stw	r6,-16(fp)
  806760:	3809883a 	mov	r4,r7
  806764:	e0c00217 	ldw	r3,8(fp)
  806768:	e0800617 	ldw	r2,24(fp)
  80676c:	e13ffd05 	stb	r4,-12(fp)
  806770:	e0fffe0d 	sth	r3,-8(fp)
  806774:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  806778:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80677c:	e0bffd03 	ldbu	r2,-12(fp)
  806780:	10800570 	cmpltui	r2,r2,21
  806784:	1000021e 	bne	r2,zero,806790 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  806788:	00800a84 	movi	r2,42
  80678c:	00006106 	br	806914 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806790:	0005303a 	rdctl	r2,status
  806794:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806798:	e0fff917 	ldw	r3,-28(fp)
  80679c:	00bfff84 	movi	r2,-2
  8067a0:	1884703a 	and	r2,r3,r2
  8067a4:	1001703a 	wrctl	status,r2
  
  return context;
  8067a8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8067ac:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8067b0:	d0a04103 	ldbu	r2,-32508(gp)
  8067b4:	10803fcc 	andi	r2,r2,255
  8067b8:	10000626 	beq	r2,zero,8067d4 <OSTaskCreateExt+0x90>
  8067bc:	e0bff117 	ldw	r2,-60(fp)
  8067c0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8067c4:	e0bff217 	ldw	r2,-56(fp)
  8067c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  8067cc:	00800f04 	movi	r2,60
  8067d0:	00005006 	br	806914 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8067d4:	e0fffd03 	ldbu	r3,-12(fp)
  8067d8:	00802074 	movhi	r2,129
  8067dc:	109d2f04 	addi	r2,r2,29884
  8067e0:	18c7883a 	add	r3,r3,r3
  8067e4:	18c7883a 	add	r3,r3,r3
  8067e8:	10c5883a 	add	r2,r2,r3
  8067ec:	10800017 	ldw	r2,0(r2)
  8067f0:	1000431e 	bne	r2,zero,806900 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8067f4:	e0fffd03 	ldbu	r3,-12(fp)
  8067f8:	00802074 	movhi	r2,129
  8067fc:	109d2f04 	addi	r2,r2,29884
  806800:	18c7883a 	add	r3,r3,r3
  806804:	18c7883a 	add	r3,r3,r3
  806808:	10c5883a 	add	r2,r2,r3
  80680c:	00c00044 	movi	r3,1
  806810:	10c00015 	stw	r3,0(r2)
  806814:	e0bff117 	ldw	r2,-60(fp)
  806818:	e0bff315 	stw	r2,-52(fp)
  80681c:	e0bff317 	ldw	r2,-52(fp)
  806820:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  806824:	e0bfff0b 	ldhu	r2,-4(fp)
  806828:	100d883a 	mov	r6,r2
  80682c:	e1400417 	ldw	r5,16(fp)
  806830:	e1000317 	ldw	r4,12(fp)
  806834:	08077a40 	call	8077a4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  806838:	e0bfff0b 	ldhu	r2,-4(fp)
  80683c:	100f883a 	mov	r7,r2
  806840:	e1bffc17 	ldw	r6,-16(fp)
  806844:	e17ffb17 	ldw	r5,-20(fp)
  806848:	e13ffa17 	ldw	r4,-24(fp)
  80684c:	080b7540 	call	80b754 <OSTaskStkInit>
  806850:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  806854:	e0fffd03 	ldbu	r3,-12(fp)
  806858:	e13ffe0b 	ldhu	r4,-8(fp)
  80685c:	e0bfff0b 	ldhu	r2,-4(fp)
  806860:	d8800215 	stw	r2,8(sp)
  806864:	e0800517 	ldw	r2,20(fp)
  806868:	d8800115 	stw	r2,4(sp)
  80686c:	e0800417 	ldw	r2,16(fp)
  806870:	d8800015 	stw	r2,0(sp)
  806874:	200f883a 	mov	r7,r4
  806878:	e1800317 	ldw	r6,12(fp)
  80687c:	e17ff517 	ldw	r5,-44(fp)
  806880:	1809883a 	mov	r4,r3
  806884:	080226c0 	call	80226c <OS_TCBInit>
  806888:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  80688c:	e0bff603 	ldbu	r2,-40(fp)
  806890:	1000061e 	bne	r2,zero,8068ac <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  806894:	d0a03343 	ldbu	r2,-32563(gp)
  806898:	10803fcc 	andi	r2,r2,255
  80689c:	10800058 	cmpnei	r2,r2,1
  8068a0:	1000151e 	bne	r2,zero,8068f8 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  8068a4:	0801e6c0 	call	801e6c <OS_Sched>
  8068a8:	00001306 	br	8068f8 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8068ac:	0005303a 	rdctl	r2,status
  8068b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8068b4:	e0fff817 	ldw	r3,-32(fp)
  8068b8:	00bfff84 	movi	r2,-2
  8068bc:	1884703a 	and	r2,r3,r2
  8068c0:	1001703a 	wrctl	status,r2
  
  return context;
  8068c4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8068c8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  8068cc:	e0fffd03 	ldbu	r3,-12(fp)
  8068d0:	00802074 	movhi	r2,129
  8068d4:	109d2f04 	addi	r2,r2,29884
  8068d8:	18c7883a 	add	r3,r3,r3
  8068dc:	18c7883a 	add	r3,r3,r3
  8068e0:	10c5883a 	add	r2,r2,r3
  8068e4:	10000015 	stw	zero,0(r2)
  8068e8:	e0bff117 	ldw	r2,-60(fp)
  8068ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8068f0:	e0bff417 	ldw	r2,-48(fp)
  8068f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8068f8:	e0bff603 	ldbu	r2,-40(fp)
  8068fc:	00000506 	br	806914 <OSTaskCreateExt+0x1d0>
  806900:	e0bff117 	ldw	r2,-60(fp)
  806904:	e0bff715 	stw	r2,-36(fp)
  806908:	e0bff717 	ldw	r2,-36(fp)
  80690c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  806910:	00800a04 	movi	r2,40
}
  806914:	e037883a 	mov	sp,fp
  806918:	dfc00117 	ldw	ra,4(sp)
  80691c:	df000017 	ldw	fp,0(sp)
  806920:	dec00204 	addi	sp,sp,8
  806924:	f800283a 	ret

00806928 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  806928:	defff404 	addi	sp,sp,-48
  80692c:	dfc00b15 	stw	ra,44(sp)
  806930:	df000a15 	stw	fp,40(sp)
  806934:	df000a04 	addi	fp,sp,40
  806938:	2005883a 	mov	r2,r4
  80693c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  806940:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  806944:	d0a04103 	ldbu	r2,-32508(gp)
  806948:	10803fcc 	andi	r2,r2,255
  80694c:	10000226 	beq	r2,zero,806958 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  806950:	00801004 	movi	r2,64
  806954:	0000c006 	br	806c58 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  806958:	e0bfff03 	ldbu	r2,-4(fp)
  80695c:	10800518 	cmpnei	r2,r2,20
  806960:	1000021e 	bne	r2,zero,80696c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  806964:	00800f84 	movi	r2,62
  806968:	0000bb06 	br	806c58 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80696c:	e0bfff03 	ldbu	r2,-4(fp)
  806970:	10800530 	cmpltui	r2,r2,20
  806974:	1000051e 	bne	r2,zero,80698c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  806978:	e0bfff03 	ldbu	r2,-4(fp)
  80697c:	10803fe0 	cmpeqi	r2,r2,255
  806980:	1000021e 	bne	r2,zero,80698c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  806984:	00800a84 	movi	r2,42
  806988:	0000b306 	br	806c58 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80698c:	0005303a 	rdctl	r2,status
  806990:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806994:	e0fffe17 	ldw	r3,-8(fp)
  806998:	00bfff84 	movi	r2,-2
  80699c:	1884703a 	and	r2,r3,r2
  8069a0:	1001703a 	wrctl	status,r2
  
  return context;
  8069a4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8069a8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  8069ac:	e0bfff03 	ldbu	r2,-4(fp)
  8069b0:	10803fd8 	cmpnei	r2,r2,255
  8069b4:	1000031e 	bne	r2,zero,8069c4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8069b8:	d0a04217 	ldw	r2,-32504(gp)
  8069bc:	10800c83 	ldbu	r2,50(r2)
  8069c0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8069c4:	e0ffff03 	ldbu	r3,-4(fp)
  8069c8:	00802074 	movhi	r2,129
  8069cc:	109d2f04 	addi	r2,r2,29884
  8069d0:	18c7883a 	add	r3,r3,r3
  8069d4:	18c7883a 	add	r3,r3,r3
  8069d8:	10c5883a 	add	r2,r2,r3
  8069dc:	10800017 	ldw	r2,0(r2)
  8069e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  8069e4:	e0bff817 	ldw	r2,-32(fp)
  8069e8:	1000061e 	bne	r2,zero,806a04 <OSTaskDel+0xdc>
  8069ec:	e0bff617 	ldw	r2,-40(fp)
  8069f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8069f4:	e0bff717 	ldw	r2,-36(fp)
  8069f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8069fc:	008010c4 	movi	r2,67
  806a00:	00009506 	br	806c58 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  806a04:	e0bff817 	ldw	r2,-32(fp)
  806a08:	10800058 	cmpnei	r2,r2,1
  806a0c:	1000061e 	bne	r2,zero,806a28 <OSTaskDel+0x100>
  806a10:	e0bff617 	ldw	r2,-40(fp)
  806a14:	e0bff915 	stw	r2,-28(fp)
  806a18:	e0bff917 	ldw	r2,-28(fp)
  806a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  806a20:	00800f44 	movi	r2,61
  806a24:	00008c06 	br	806c58 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  806a28:	e0bff817 	ldw	r2,-32(fp)
  806a2c:	10800d03 	ldbu	r2,52(r2)
  806a30:	10c03fcc 	andi	r3,r2,255
  806a34:	e0bff817 	ldw	r2,-32(fp)
  806a38:	10800d03 	ldbu	r2,52(r2)
  806a3c:	11003fcc 	andi	r4,r2,255
  806a40:	d0a03f44 	addi	r2,gp,-32515
  806a44:	2085883a 	add	r2,r4,r2
  806a48:	10800003 	ldbu	r2,0(r2)
  806a4c:	1009883a 	mov	r4,r2
  806a50:	e0bff817 	ldw	r2,-32(fp)
  806a54:	10800d43 	ldbu	r2,53(r2)
  806a58:	0084303a 	nor	r2,zero,r2
  806a5c:	2084703a 	and	r2,r4,r2
  806a60:	1009883a 	mov	r4,r2
  806a64:	d0a03f44 	addi	r2,gp,-32515
  806a68:	1885883a 	add	r2,r3,r2
  806a6c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  806a70:	e0bff817 	ldw	r2,-32(fp)
  806a74:	10800d03 	ldbu	r2,52(r2)
  806a78:	10c03fcc 	andi	r3,r2,255
  806a7c:	d0a03f44 	addi	r2,gp,-32515
  806a80:	1885883a 	add	r2,r3,r2
  806a84:	10800003 	ldbu	r2,0(r2)
  806a88:	10803fcc 	andi	r2,r2,255
  806a8c:	1000071e 	bne	r2,zero,806aac <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  806a90:	e0bff817 	ldw	r2,-32(fp)
  806a94:	10800d83 	ldbu	r2,54(r2)
  806a98:	0084303a 	nor	r2,zero,r2
  806a9c:	1007883a 	mov	r3,r2
  806aa0:	d0a03f03 	ldbu	r2,-32516(gp)
  806aa4:	1884703a 	and	r2,r3,r2
  806aa8:	d0a03f05 	stb	r2,-32516(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  806aac:	e0bff817 	ldw	r2,-32(fp)
  806ab0:	10800717 	ldw	r2,28(r2)
  806ab4:	10000526 	beq	r2,zero,806acc <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  806ab8:	e0bff817 	ldw	r2,-32(fp)
  806abc:	10800717 	ldw	r2,28(r2)
  806ac0:	100b883a 	mov	r5,r2
  806ac4:	e13ff817 	ldw	r4,-32(fp)
  806ac8:	08018180 	call	801818 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  806acc:	e0bff817 	ldw	r2,-32(fp)
  806ad0:	10800817 	ldw	r2,32(r2)
  806ad4:	10000526 	beq	r2,zero,806aec <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  806ad8:	e0bff817 	ldw	r2,-32(fp)
  806adc:	10800817 	ldw	r2,32(r2)
  806ae0:	100b883a 	mov	r5,r2
  806ae4:	e13ff817 	ldw	r4,-32(fp)
  806ae8:	08018d00 	call	8018d0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  806aec:	e0bff817 	ldw	r2,-32(fp)
  806af0:	10800a17 	ldw	r2,40(r2)
  806af4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  806af8:	e0bffb17 	ldw	r2,-20(fp)
  806afc:	10000226 	beq	r2,zero,806b08 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  806b00:	e13ffb17 	ldw	r4,-20(fp)
  806b04:	0803d400 	call	803d40 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  806b08:	e0bff817 	ldw	r2,-32(fp)
  806b0c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  806b10:	e0bff817 	ldw	r2,-32(fp)
  806b14:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  806b18:	e0bff817 	ldw	r2,-32(fp)
  806b1c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  806b20:	d0a03303 	ldbu	r2,-32564(gp)
  806b24:	10803fcc 	andi	r2,r2,255
  806b28:	10803fe0 	cmpeqi	r2,r2,255
  806b2c:	1000031e 	bne	r2,zero,806b3c <OSTaskDel+0x214>
        OSLockNesting++;
  806b30:	d0a03303 	ldbu	r2,-32564(gp)
  806b34:	10800044 	addi	r2,r2,1
  806b38:	d0a03305 	stb	r2,-32564(gp)
  806b3c:	e0bff617 	ldw	r2,-40(fp)
  806b40:	e0bffd15 	stw	r2,-12(fp)
  806b44:	e0bffd17 	ldw	r2,-12(fp)
  806b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  806b4c:	08014000 	call	801400 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806b50:	0005303a 	rdctl	r2,status
  806b54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806b58:	e0fffa17 	ldw	r3,-24(fp)
  806b5c:	00bfff84 	movi	r2,-2
  806b60:	1884703a 	and	r2,r3,r2
  806b64:	1001703a 	wrctl	status,r2
  
  return context;
  806b68:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  806b6c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  806b70:	d0a03303 	ldbu	r2,-32564(gp)
  806b74:	10803fcc 	andi	r2,r2,255
  806b78:	10000326 	beq	r2,zero,806b88 <OSTaskDel+0x260>
        OSLockNesting--;
  806b7c:	d0a03303 	ldbu	r2,-32564(gp)
  806b80:	10bfffc4 	addi	r2,r2,-1
  806b84:	d0a03305 	stb	r2,-32564(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  806b88:	e13ff817 	ldw	r4,-32(fp)
  806b8c:	080b8d40 	call	80b8d4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  806b90:	d0a03b43 	ldbu	r2,-32531(gp)
  806b94:	10bfffc4 	addi	r2,r2,-1
  806b98:	d0a03b45 	stb	r2,-32531(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  806b9c:	e0ffff03 	ldbu	r3,-4(fp)
  806ba0:	00802074 	movhi	r2,129
  806ba4:	109d2f04 	addi	r2,r2,29884
  806ba8:	18c7883a 	add	r3,r3,r3
  806bac:	18c7883a 	add	r3,r3,r3
  806bb0:	10c5883a 	add	r2,r2,r3
  806bb4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  806bb8:	e0bff817 	ldw	r2,-32(fp)
  806bbc:	10800617 	ldw	r2,24(r2)
  806bc0:	1000071e 	bne	r2,zero,806be0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  806bc4:	e0bff817 	ldw	r2,-32(fp)
  806bc8:	10800517 	ldw	r2,20(r2)
  806bcc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  806bd0:	e0bff817 	ldw	r2,-32(fp)
  806bd4:	10800517 	ldw	r2,20(r2)
  806bd8:	d0a03615 	stw	r2,-32552(gp)
  806bdc:	00000a06 	br	806c08 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  806be0:	e0bff817 	ldw	r2,-32(fp)
  806be4:	10800617 	ldw	r2,24(r2)
  806be8:	e0fff817 	ldw	r3,-32(fp)
  806bec:	18c00517 	ldw	r3,20(r3)
  806bf0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  806bf4:	e0bff817 	ldw	r2,-32(fp)
  806bf8:	10800517 	ldw	r2,20(r2)
  806bfc:	e0fff817 	ldw	r3,-32(fp)
  806c00:	18c00617 	ldw	r3,24(r3)
  806c04:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  806c08:	d0e03a17 	ldw	r3,-32536(gp)
  806c0c:	e0bff817 	ldw	r2,-32(fp)
  806c10:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  806c14:	e0bff817 	ldw	r2,-32(fp)
  806c18:	d0a03a15 	stw	r2,-32536(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  806c1c:	e0bff817 	ldw	r2,-32(fp)
  806c20:	00c00fc4 	movi	r3,63
  806c24:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  806c28:	e0bff817 	ldw	r2,-32(fp)
  806c2c:	10001345 	stb	zero,77(r2)
  806c30:	e0bff617 	ldw	r2,-40(fp)
  806c34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c38:	e0bffc17 	ldw	r2,-16(fp)
  806c3c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  806c40:	d0a03343 	ldbu	r2,-32563(gp)
  806c44:	10803fcc 	andi	r2,r2,255
  806c48:	10800058 	cmpnei	r2,r2,1
  806c4c:	1000011e 	bne	r2,zero,806c54 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  806c50:	0801e6c0 	call	801e6c <OS_Sched>
    }
    return (OS_ERR_NONE);
  806c54:	0005883a 	mov	r2,zero
}
  806c58:	e037883a 	mov	sp,fp
  806c5c:	dfc00117 	ldw	ra,4(sp)
  806c60:	df000017 	ldw	fp,0(sp)
  806c64:	dec00204 	addi	sp,sp,8
  806c68:	f800283a 	ret

00806c6c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  806c6c:	defff504 	addi	sp,sp,-44
  806c70:	df000a15 	stw	fp,40(sp)
  806c74:	df000a04 	addi	fp,sp,40
  806c78:	2005883a 	mov	r2,r4
  806c7c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806c80:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  806c84:	e0bfff03 	ldbu	r2,-4(fp)
  806c88:	10800518 	cmpnei	r2,r2,20
  806c8c:	1000021e 	bne	r2,zero,806c98 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  806c90:	00800f84 	movi	r2,62
  806c94:	00004506 	br	806dac <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  806c98:	e0bfff03 	ldbu	r2,-4(fp)
  806c9c:	10800530 	cmpltui	r2,r2,20
  806ca0:	1000051e 	bne	r2,zero,806cb8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  806ca4:	e0bfff03 	ldbu	r2,-4(fp)
  806ca8:	10803fe0 	cmpeqi	r2,r2,255
  806cac:	1000021e 	bne	r2,zero,806cb8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  806cb0:	00800a84 	movi	r2,42
  806cb4:	00003d06 	br	806dac <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  806cb8:	e0bfff03 	ldbu	r2,-4(fp)
  806cbc:	10803fd8 	cmpnei	r2,r2,255
  806cc0:	1000111e 	bne	r2,zero,806d08 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806cc4:	0005303a 	rdctl	r2,status
  806cc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ccc:	e0fff917 	ldw	r3,-28(fp)
  806cd0:	00bfff84 	movi	r2,-2
  806cd4:	1884703a 	and	r2,r3,r2
  806cd8:	1001703a 	wrctl	status,r2
  
  return context;
  806cdc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  806ce0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  806ce4:	d0a04217 	ldw	r2,-32504(gp)
  806ce8:	10800dc3 	ldbu	r2,55(r2)
  806cec:	e0bff805 	stb	r2,-32(fp)
  806cf0:	e0bff617 	ldw	r2,-40(fp)
  806cf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806cf8:	e0bffe17 	ldw	r2,-8(fp)
  806cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  806d00:	e0bff803 	ldbu	r2,-32(fp)
  806d04:	00002906 	br	806dac <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d08:	0005303a 	rdctl	r2,status
  806d0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806d10:	e0fff717 	ldw	r3,-36(fp)
  806d14:	00bfff84 	movi	r2,-2
  806d18:	1884703a 	and	r2,r3,r2
  806d1c:	1001703a 	wrctl	status,r2
  
  return context;
  806d20:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  806d24:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  806d28:	e0ffff03 	ldbu	r3,-4(fp)
  806d2c:	00802074 	movhi	r2,129
  806d30:	109d2f04 	addi	r2,r2,29884
  806d34:	18c7883a 	add	r3,r3,r3
  806d38:	18c7883a 	add	r3,r3,r3
  806d3c:	10c5883a 	add	r2,r2,r3
  806d40:	10800017 	ldw	r2,0(r2)
  806d44:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  806d48:	e0bffb17 	ldw	r2,-20(fp)
  806d4c:	1000061e 	bne	r2,zero,806d68 <OSTaskDelReq+0xfc>
  806d50:	e0bff617 	ldw	r2,-40(fp)
  806d54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806d58:	e0bffa17 	ldw	r2,-24(fp)
  806d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  806d60:	008010c4 	movi	r2,67
  806d64:	00001106 	br	806dac <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  806d68:	e0bffb17 	ldw	r2,-20(fp)
  806d6c:	10800058 	cmpnei	r2,r2,1
  806d70:	1000061e 	bne	r2,zero,806d8c <OSTaskDelReq+0x120>
  806d74:	e0bff617 	ldw	r2,-40(fp)
  806d78:	e0bffc15 	stw	r2,-16(fp)
  806d7c:	e0bffc17 	ldw	r2,-16(fp)
  806d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  806d84:	00800f44 	movi	r2,61
  806d88:	00000806 	br	806dac <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  806d8c:	e0bffb17 	ldw	r2,-20(fp)
  806d90:	00c00fc4 	movi	r3,63
  806d94:	10c00dc5 	stb	r3,55(r2)
  806d98:	e0bff617 	ldw	r2,-40(fp)
  806d9c:	e0bffd15 	stw	r2,-12(fp)
  806da0:	e0bffd17 	ldw	r2,-12(fp)
  806da4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  806da8:	0005883a 	mov	r2,zero
}
  806dac:	e037883a 	mov	sp,fp
  806db0:	df000017 	ldw	fp,0(sp)
  806db4:	dec00104 	addi	sp,sp,4
  806db8:	f800283a 	ret

00806dbc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806dbc:	defff404 	addi	sp,sp,-48
  806dc0:	dfc00b15 	stw	ra,44(sp)
  806dc4:	df000a15 	stw	fp,40(sp)
  806dc8:	df000a04 	addi	fp,sp,40
  806dcc:	2005883a 	mov	r2,r4
  806dd0:	e17ffe15 	stw	r5,-8(fp)
  806dd4:	e1bfff15 	stw	r6,-4(fp)
  806dd8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  806ddc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  806de0:	e0bfff17 	ldw	r2,-4(fp)
  806de4:	1000021e 	bne	r2,zero,806df0 <OSTaskNameGet+0x34>
        return (0);
  806de8:	0005883a 	mov	r2,zero
  806dec:	00005406 	br	806f40 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  806df0:	e0bffd03 	ldbu	r2,-12(fp)
  806df4:	10800570 	cmpltui	r2,r2,21
  806df8:	1000081e 	bne	r2,zero,806e1c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  806dfc:	e0bffd03 	ldbu	r2,-12(fp)
  806e00:	10803fe0 	cmpeqi	r2,r2,255
  806e04:	1000051e 	bne	r2,zero,806e1c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  806e08:	e0bfff17 	ldw	r2,-4(fp)
  806e0c:	00c00a84 	movi	r3,42
  806e10:	10c00005 	stb	r3,0(r2)
            return (0);
  806e14:	0005883a 	mov	r2,zero
  806e18:	00004906 	br	806f40 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  806e1c:	e0bffe17 	ldw	r2,-8(fp)
  806e20:	1000051e 	bne	r2,zero,806e38 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  806e24:	e0bfff17 	ldw	r2,-4(fp)
  806e28:	00c00304 	movi	r3,12
  806e2c:	10c00005 	stb	r3,0(r2)
        return (0);
  806e30:	0005883a 	mov	r2,zero
  806e34:	00004206 	br	806f40 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  806e38:	d0a04103 	ldbu	r2,-32508(gp)
  806e3c:	10803fcc 	andi	r2,r2,255
  806e40:	10000526 	beq	r2,zero,806e58 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  806e44:	e0bfff17 	ldw	r2,-4(fp)
  806e48:	00c00444 	movi	r3,17
  806e4c:	10c00005 	stb	r3,0(r2)
        return (0);
  806e50:	0005883a 	mov	r2,zero
  806e54:	00003a06 	br	806f40 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806e58:	0005303a 	rdctl	r2,status
  806e5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806e60:	e0fffc17 	ldw	r3,-16(fp)
  806e64:	00bfff84 	movi	r2,-2
  806e68:	1884703a 	and	r2,r3,r2
  806e6c:	1001703a 	wrctl	status,r2
  
  return context;
  806e70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806e74:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  806e78:	e0bffd03 	ldbu	r2,-12(fp)
  806e7c:	10803fd8 	cmpnei	r2,r2,255
  806e80:	1000031e 	bne	r2,zero,806e90 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  806e84:	d0a04217 	ldw	r2,-32504(gp)
  806e88:	10800c83 	ldbu	r2,50(r2)
  806e8c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  806e90:	e0fffd03 	ldbu	r3,-12(fp)
  806e94:	00802074 	movhi	r2,129
  806e98:	109d2f04 	addi	r2,r2,29884
  806e9c:	18c7883a 	add	r3,r3,r3
  806ea0:	18c7883a 	add	r3,r3,r3
  806ea4:	10c5883a 	add	r2,r2,r3
  806ea8:	10800017 	ldw	r2,0(r2)
  806eac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  806eb0:	e0bff817 	ldw	r2,-32(fp)
  806eb4:	1000091e 	bne	r2,zero,806edc <OSTaskNameGet+0x120>
  806eb8:	e0bff617 	ldw	r2,-40(fp)
  806ebc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ec0:	e0bff717 	ldw	r2,-36(fp)
  806ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  806ec8:	e0bfff17 	ldw	r2,-4(fp)
  806ecc:	00c010c4 	movi	r3,67
  806ed0:	10c00005 	stb	r3,0(r2)
        return (0);
  806ed4:	0005883a 	mov	r2,zero
  806ed8:	00001906 	br	806f40 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  806edc:	e0bff817 	ldw	r2,-32(fp)
  806ee0:	10800058 	cmpnei	r2,r2,1
  806ee4:	1000091e 	bne	r2,zero,806f0c <OSTaskNameGet+0x150>
  806ee8:	e0bff617 	ldw	r2,-40(fp)
  806eec:	e0bff915 	stw	r2,-28(fp)
  806ef0:	e0bff917 	ldw	r2,-28(fp)
  806ef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  806ef8:	e0bfff17 	ldw	r2,-4(fp)
  806efc:	00c010c4 	movi	r3,67
  806f00:	10c00005 	stb	r3,0(r2)
        return (0);
  806f04:	0005883a 	mov	r2,zero
  806f08:	00000d06 	br	806f40 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  806f0c:	e0bff817 	ldw	r2,-32(fp)
  806f10:	10801304 	addi	r2,r2,76
  806f14:	100b883a 	mov	r5,r2
  806f18:	e13ffe17 	ldw	r4,-8(fp)
  806f1c:	0801fb00 	call	801fb0 <OS_StrCopy>
  806f20:	e0bffb05 	stb	r2,-20(fp)
  806f24:	e0bff617 	ldw	r2,-40(fp)
  806f28:	e0bffa15 	stw	r2,-24(fp)
  806f2c:	e0bffa17 	ldw	r2,-24(fp)
  806f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806f34:	e0bfff17 	ldw	r2,-4(fp)
  806f38:	10000005 	stb	zero,0(r2)
    return (len);
  806f3c:	e0bffb03 	ldbu	r2,-20(fp)
}
  806f40:	e037883a 	mov	sp,fp
  806f44:	dfc00117 	ldw	ra,4(sp)
  806f48:	df000017 	ldw	fp,0(sp)
  806f4c:	dec00204 	addi	sp,sp,8
  806f50:	f800283a 	ret

00806f54 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806f54:	defff304 	addi	sp,sp,-52
  806f58:	dfc00c15 	stw	ra,48(sp)
  806f5c:	df000b15 	stw	fp,44(sp)
  806f60:	df000b04 	addi	fp,sp,44
  806f64:	2005883a 	mov	r2,r4
  806f68:	e17ffe15 	stw	r5,-8(fp)
  806f6c:	e1bfff15 	stw	r6,-4(fp)
  806f70:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  806f74:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  806f78:	e0bfff17 	ldw	r2,-4(fp)
  806f7c:	10005c26 	beq	r2,zero,8070f0 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  806f80:	e0bffd03 	ldbu	r2,-12(fp)
  806f84:	10800570 	cmpltui	r2,r2,21
  806f88:	1000071e 	bne	r2,zero,806fa8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  806f8c:	e0bffd03 	ldbu	r2,-12(fp)
  806f90:	10803fe0 	cmpeqi	r2,r2,255
  806f94:	1000041e 	bne	r2,zero,806fa8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  806f98:	e0bfff17 	ldw	r2,-4(fp)
  806f9c:	00c00a84 	movi	r3,42
  806fa0:	10c00005 	stb	r3,0(r2)
            return;
  806fa4:	00005306 	br	8070f4 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  806fa8:	e0bffe17 	ldw	r2,-8(fp)
  806fac:	1000041e 	bne	r2,zero,806fc0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  806fb0:	e0bfff17 	ldw	r2,-4(fp)
  806fb4:	00c00304 	movi	r3,12
  806fb8:	10c00005 	stb	r3,0(r2)
        return;
  806fbc:	00004d06 	br	8070f4 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  806fc0:	d0a04103 	ldbu	r2,-32508(gp)
  806fc4:	10803fcc 	andi	r2,r2,255
  806fc8:	10000426 	beq	r2,zero,806fdc <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  806fcc:	e0bfff17 	ldw	r2,-4(fp)
  806fd0:	00c00484 	movi	r3,18
  806fd4:	10c00005 	stb	r3,0(r2)
        return;
  806fd8:	00004606 	br	8070f4 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806fdc:	0005303a 	rdctl	r2,status
  806fe0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806fe4:	e0fffc17 	ldw	r3,-16(fp)
  806fe8:	00bfff84 	movi	r2,-2
  806fec:	1884703a 	and	r2,r3,r2
  806ff0:	1001703a 	wrctl	status,r2
  
  return context;
  806ff4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806ff8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  806ffc:	e0bffd03 	ldbu	r2,-12(fp)
  807000:	10803fd8 	cmpnei	r2,r2,255
  807004:	1000031e 	bne	r2,zero,807014 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  807008:	d0a04217 	ldw	r2,-32504(gp)
  80700c:	10800c83 	ldbu	r2,50(r2)
  807010:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807014:	e0fffd03 	ldbu	r3,-12(fp)
  807018:	00802074 	movhi	r2,129
  80701c:	109d2f04 	addi	r2,r2,29884
  807020:	18c7883a 	add	r3,r3,r3
  807024:	18c7883a 	add	r3,r3,r3
  807028:	10c5883a 	add	r2,r2,r3
  80702c:	10800017 	ldw	r2,0(r2)
  807030:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  807034:	e0bff717 	ldw	r2,-36(fp)
  807038:	1000081e 	bne	r2,zero,80705c <OSTaskNameSet+0x108>
  80703c:	e0bff517 	ldw	r2,-44(fp)
  807040:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807044:	e0bff617 	ldw	r2,-40(fp)
  807048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80704c:	e0bfff17 	ldw	r2,-4(fp)
  807050:	00c010c4 	movi	r3,67
  807054:	10c00005 	stb	r3,0(r2)
        return;
  807058:	00002606 	br	8070f4 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80705c:	e0bff717 	ldw	r2,-36(fp)
  807060:	10800058 	cmpnei	r2,r2,1
  807064:	1000081e 	bne	r2,zero,807088 <OSTaskNameSet+0x134>
  807068:	e0bff517 	ldw	r2,-44(fp)
  80706c:	e0bff815 	stw	r2,-32(fp)
  807070:	e0bff817 	ldw	r2,-32(fp)
  807074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  807078:	e0bfff17 	ldw	r2,-4(fp)
  80707c:	00c010c4 	movi	r3,67
  807080:	10c00005 	stb	r3,0(r2)
        return;
  807084:	00001b06 	br	8070f4 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  807088:	e13ffe17 	ldw	r4,-8(fp)
  80708c:	08020240 	call	802024 <OS_StrLen>
  807090:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  807094:	e0bffa03 	ldbu	r2,-24(fp)
  807098:	10800830 	cmpltui	r2,r2,32
  80709c:	1000081e 	bne	r2,zero,8070c0 <OSTaskNameSet+0x16c>
  8070a0:	e0bff517 	ldw	r2,-44(fp)
  8070a4:	e0bff915 	stw	r2,-28(fp)
  8070a8:	e0bff917 	ldw	r2,-28(fp)
  8070ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  8070b0:	e0bfff17 	ldw	r2,-4(fp)
  8070b4:	00c01044 	movi	r3,65
  8070b8:	10c00005 	stb	r3,0(r2)
        return;
  8070bc:	00000d06 	br	8070f4 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8070c0:	e0bff717 	ldw	r2,-36(fp)
  8070c4:	10801304 	addi	r2,r2,76
  8070c8:	e17ffe17 	ldw	r5,-8(fp)
  8070cc:	1009883a 	mov	r4,r2
  8070d0:	0801fb00 	call	801fb0 <OS_StrCopy>
  8070d4:	e0bff517 	ldw	r2,-44(fp)
  8070d8:	e0bffb15 	stw	r2,-20(fp)
  8070dc:	e0bffb17 	ldw	r2,-20(fp)
  8070e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8070e4:	e0bfff17 	ldw	r2,-4(fp)
  8070e8:	10000005 	stb	zero,0(r2)
  8070ec:	00000106 	br	8070f4 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  8070f0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  8070f4:	e037883a 	mov	sp,fp
  8070f8:	dfc00117 	ldw	ra,4(sp)
  8070fc:	df000017 	ldw	fp,0(sp)
  807100:	dec00204 	addi	sp,sp,8
  807104:	f800283a 	ret

00807108 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  807108:	defff404 	addi	sp,sp,-48
  80710c:	dfc00b15 	stw	ra,44(sp)
  807110:	df000a15 	stw	fp,40(sp)
  807114:	df000a04 	addi	fp,sp,40
  807118:	2005883a 	mov	r2,r4
  80711c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  807120:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  807124:	e0bfff03 	ldbu	r2,-4(fp)
  807128:	10800530 	cmpltui	r2,r2,20
  80712c:	1000021e 	bne	r2,zero,807138 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  807130:	00800a84 	movi	r2,42
  807134:	00006406 	br	8072c8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807138:	0005303a 	rdctl	r2,status
  80713c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807140:	e0fffe17 	ldw	r3,-8(fp)
  807144:	00bfff84 	movi	r2,-2
  807148:	1884703a 	and	r2,r3,r2
  80714c:	1001703a 	wrctl	status,r2
  
  return context;
  807150:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807154:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  807158:	e0ffff03 	ldbu	r3,-4(fp)
  80715c:	00802074 	movhi	r2,129
  807160:	109d2f04 	addi	r2,r2,29884
  807164:	18c7883a 	add	r3,r3,r3
  807168:	18c7883a 	add	r3,r3,r3
  80716c:	10c5883a 	add	r2,r2,r3
  807170:	10800017 	ldw	r2,0(r2)
  807174:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  807178:	e0bff817 	ldw	r2,-32(fp)
  80717c:	1000061e 	bne	r2,zero,807198 <OSTaskResume+0x90>
  807180:	e0bff617 	ldw	r2,-40(fp)
  807184:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807188:	e0bff717 	ldw	r2,-36(fp)
  80718c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  807190:	00801184 	movi	r2,70
  807194:	00004c06 	br	8072c8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  807198:	e0bff817 	ldw	r2,-32(fp)
  80719c:	10800058 	cmpnei	r2,r2,1
  8071a0:	1000061e 	bne	r2,zero,8071bc <OSTaskResume+0xb4>
  8071a4:	e0bff617 	ldw	r2,-40(fp)
  8071a8:	e0bff915 	stw	r2,-28(fp)
  8071ac:	e0bff917 	ldw	r2,-28(fp)
  8071b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8071b4:	008010c4 	movi	r2,67
  8071b8:	00004306 	br	8072c8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8071bc:	e0bff817 	ldw	r2,-32(fp)
  8071c0:	10800c03 	ldbu	r2,48(r2)
  8071c4:	10803fcc 	andi	r2,r2,255
  8071c8:	1080020c 	andi	r2,r2,8
  8071cc:	10003926 	beq	r2,zero,8072b4 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8071d0:	e0bff817 	ldw	r2,-32(fp)
  8071d4:	10c00c03 	ldbu	r3,48(r2)
  8071d8:	00bffdc4 	movi	r2,-9
  8071dc:	1884703a 	and	r2,r3,r2
  8071e0:	1007883a 	mov	r3,r2
  8071e4:	e0bff817 	ldw	r2,-32(fp)
  8071e8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8071ec:	e0bff817 	ldw	r2,-32(fp)
  8071f0:	10800c03 	ldbu	r2,48(r2)
  8071f4:	10803fcc 	andi	r2,r2,255
  8071f8:	1000281e 	bne	r2,zero,80729c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  8071fc:	e0bff817 	ldw	r2,-32(fp)
  807200:	10800b8b 	ldhu	r2,46(r2)
  807204:	10bfffcc 	andi	r2,r2,65535
  807208:	10001f1e 	bne	r2,zero,807288 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80720c:	e0bff817 	ldw	r2,-32(fp)
  807210:	10c00d83 	ldbu	r3,54(r2)
  807214:	d0a03f03 	ldbu	r2,-32516(gp)
  807218:	1884b03a 	or	r2,r3,r2
  80721c:	d0a03f05 	stb	r2,-32516(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  807220:	e0bff817 	ldw	r2,-32(fp)
  807224:	10800d03 	ldbu	r2,52(r2)
  807228:	10c03fcc 	andi	r3,r2,255
  80722c:	e0bff817 	ldw	r2,-32(fp)
  807230:	10800d03 	ldbu	r2,52(r2)
  807234:	11003fcc 	andi	r4,r2,255
  807238:	d0a03f44 	addi	r2,gp,-32515
  80723c:	2085883a 	add	r2,r4,r2
  807240:	11000003 	ldbu	r4,0(r2)
  807244:	e0bff817 	ldw	r2,-32(fp)
  807248:	10800d43 	ldbu	r2,53(r2)
  80724c:	2084b03a 	or	r2,r4,r2
  807250:	1009883a 	mov	r4,r2
  807254:	d0a03f44 	addi	r2,gp,-32515
  807258:	1885883a 	add	r2,r3,r2
  80725c:	11000005 	stb	r4,0(r2)
  807260:	e0bff617 	ldw	r2,-40(fp)
  807264:	e0bffa15 	stw	r2,-24(fp)
  807268:	e0bffa17 	ldw	r2,-24(fp)
  80726c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  807270:	d0a03343 	ldbu	r2,-32563(gp)
  807274:	10803fcc 	andi	r2,r2,255
  807278:	10800058 	cmpnei	r2,r2,1
  80727c:	10000b1e 	bne	r2,zero,8072ac <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  807280:	0801e6c0 	call	801e6c <OS_Sched>
  807284:	00000906 	br	8072ac <OSTaskResume+0x1a4>
  807288:	e0bff617 	ldw	r2,-40(fp)
  80728c:	e0bffb15 	stw	r2,-20(fp)
  807290:	e0bffb17 	ldw	r2,-20(fp)
  807294:	1001703a 	wrctl	status,r2
  807298:	00000406 	br	8072ac <OSTaskResume+0x1a4>
  80729c:	e0bff617 	ldw	r2,-40(fp)
  8072a0:	e0bffc15 	stw	r2,-16(fp)
  8072a4:	e0bffc17 	ldw	r2,-16(fp)
  8072a8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8072ac:	0005883a 	mov	r2,zero
  8072b0:	00000506 	br	8072c8 <OSTaskResume+0x1c0>
  8072b4:	e0bff617 	ldw	r2,-40(fp)
  8072b8:	e0bffd15 	stw	r2,-12(fp)
  8072bc:	e0bffd17 	ldw	r2,-12(fp)
  8072c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8072c4:	00801104 	movi	r2,68
}
  8072c8:	e037883a 	mov	sp,fp
  8072cc:	dfc00117 	ldw	ra,4(sp)
  8072d0:	df000017 	ldw	fp,0(sp)
  8072d4:	dec00204 	addi	sp,sp,8
  8072d8:	f800283a 	ret

008072dc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  8072dc:	defff304 	addi	sp,sp,-52
  8072e0:	df000c15 	stw	fp,48(sp)
  8072e4:	df000c04 	addi	fp,sp,48
  8072e8:	2005883a 	mov	r2,r4
  8072ec:	e17fff15 	stw	r5,-4(fp)
  8072f0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8072f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  8072f8:	e0bffe03 	ldbu	r2,-8(fp)
  8072fc:	10800570 	cmpltui	r2,r2,21
  807300:	1000051e 	bne	r2,zero,807318 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  807304:	e0bffe03 	ldbu	r2,-8(fp)
  807308:	10803fe0 	cmpeqi	r2,r2,255
  80730c:	1000021e 	bne	r2,zero,807318 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  807310:	00800a84 	movi	r2,42
  807314:	00005d06 	br	80748c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  807318:	e0bfff17 	ldw	r2,-4(fp)
  80731c:	1000021e 	bne	r2,zero,807328 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  807320:	00800244 	movi	r2,9
  807324:	00005906 	br	80748c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  807328:	e0bfff17 	ldw	r2,-4(fp)
  80732c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  807330:	e0bfff17 	ldw	r2,-4(fp)
  807334:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807338:	0005303a 	rdctl	r2,status
  80733c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807340:	e0fffd17 	ldw	r3,-12(fp)
  807344:	00bfff84 	movi	r2,-2
  807348:	1884703a 	and	r2,r3,r2
  80734c:	1001703a 	wrctl	status,r2
  
  return context;
  807350:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  807354:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  807358:	e0bffe03 	ldbu	r2,-8(fp)
  80735c:	10803fd8 	cmpnei	r2,r2,255
  807360:	1000031e 	bne	r2,zero,807370 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  807364:	d0a04217 	ldw	r2,-32504(gp)
  807368:	10800c83 	ldbu	r2,50(r2)
  80736c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807370:	e0fffe03 	ldbu	r3,-8(fp)
  807374:	00802074 	movhi	r2,129
  807378:	109d2f04 	addi	r2,r2,29884
  80737c:	18c7883a 	add	r3,r3,r3
  807380:	18c7883a 	add	r3,r3,r3
  807384:	10c5883a 	add	r2,r2,r3
  807388:	10800017 	ldw	r2,0(r2)
  80738c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  807390:	e0bff817 	ldw	r2,-32(fp)
  807394:	1000061e 	bne	r2,zero,8073b0 <OSTaskStkChk+0xd4>
  807398:	e0bff617 	ldw	r2,-40(fp)
  80739c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8073a0:	e0bff717 	ldw	r2,-36(fp)
  8073a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8073a8:	008010c4 	movi	r2,67
  8073ac:	00003706 	br	80748c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8073b0:	e0bff817 	ldw	r2,-32(fp)
  8073b4:	10800058 	cmpnei	r2,r2,1
  8073b8:	1000061e 	bne	r2,zero,8073d4 <OSTaskStkChk+0xf8>
  8073bc:	e0bff617 	ldw	r2,-40(fp)
  8073c0:	e0bff915 	stw	r2,-28(fp)
  8073c4:	e0bff917 	ldw	r2,-28(fp)
  8073c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8073cc:	008010c4 	movi	r2,67
  8073d0:	00002e06 	br	80748c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  8073d4:	e0bff817 	ldw	r2,-32(fp)
  8073d8:	1080040b 	ldhu	r2,16(r2)
  8073dc:	10bfffcc 	andi	r2,r2,65535
  8073e0:	1080004c 	andi	r2,r2,1
  8073e4:	1000061e 	bne	r2,zero,807400 <OSTaskStkChk+0x124>
  8073e8:	e0bff617 	ldw	r2,-40(fp)
  8073ec:	e0bffa15 	stw	r2,-24(fp)
  8073f0:	e0bffa17 	ldw	r2,-24(fp)
  8073f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  8073f8:	00801144 	movi	r2,69
  8073fc:	00002306 	br	80748c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  807400:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  807404:	e0bff817 	ldw	r2,-32(fp)
  807408:	10800317 	ldw	r2,12(r2)
  80740c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  807410:	e0bff817 	ldw	r2,-32(fp)
  807414:	10800217 	ldw	r2,8(r2)
  807418:	e0bff415 	stw	r2,-48(fp)
  80741c:	e0bff617 	ldw	r2,-40(fp)
  807420:	e0bffb15 	stw	r2,-20(fp)
  807424:	e0bffb17 	ldw	r2,-20(fp)
  807428:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80742c:	00000306 	br	80743c <OSTaskStkChk+0x160>
        nfree++;
  807430:	e0bff517 	ldw	r2,-44(fp)
  807434:	10800044 	addi	r2,r2,1
  807438:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80743c:	e0bff417 	ldw	r2,-48(fp)
  807440:	10c00104 	addi	r3,r2,4
  807444:	e0fff415 	stw	r3,-48(fp)
  807448:	10800017 	ldw	r2,0(r2)
  80744c:	103ff826 	beq	r2,zero,807430 <__alt_mem_epcs_flash_controller_0+0xff7fe430>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  807450:	e0bff517 	ldw	r2,-44(fp)
  807454:	1085883a 	add	r2,r2,r2
  807458:	1085883a 	add	r2,r2,r2
  80745c:	1007883a 	mov	r3,r2
  807460:	e0bfff17 	ldw	r2,-4(fp)
  807464:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  807468:	e0fffc17 	ldw	r3,-16(fp)
  80746c:	e0bff517 	ldw	r2,-44(fp)
  807470:	1885c83a 	sub	r2,r3,r2
  807474:	1085883a 	add	r2,r2,r2
  807478:	1085883a 	add	r2,r2,r2
  80747c:	1007883a 	mov	r3,r2
  807480:	e0bfff17 	ldw	r2,-4(fp)
  807484:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  807488:	0005883a 	mov	r2,zero
}
  80748c:	e037883a 	mov	sp,fp
  807490:	df000017 	ldw	fp,0(sp)
  807494:	dec00104 	addi	sp,sp,4
  807498:	f800283a 	ret

0080749c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80749c:	defff504 	addi	sp,sp,-44
  8074a0:	dfc00a15 	stw	ra,40(sp)
  8074a4:	df000915 	stw	fp,36(sp)
  8074a8:	df000904 	addi	fp,sp,36
  8074ac:	2005883a 	mov	r2,r4
  8074b0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8074b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  8074b8:	e0bfff03 	ldbu	r2,-4(fp)
  8074bc:	10800518 	cmpnei	r2,r2,20
  8074c0:	1000021e 	bne	r2,zero,8074cc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  8074c4:	008011c4 	movi	r2,71
  8074c8:	00006806 	br	80766c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  8074cc:	e0bfff03 	ldbu	r2,-4(fp)
  8074d0:	10800530 	cmpltui	r2,r2,20
  8074d4:	1000051e 	bne	r2,zero,8074ec <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  8074d8:	e0bfff03 	ldbu	r2,-4(fp)
  8074dc:	10803fe0 	cmpeqi	r2,r2,255
  8074e0:	1000021e 	bne	r2,zero,8074ec <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  8074e4:	00800a84 	movi	r2,42
  8074e8:	00006006 	br	80766c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8074ec:	0005303a 	rdctl	r2,status
  8074f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8074f4:	e0fffe17 	ldw	r3,-8(fp)
  8074f8:	00bfff84 	movi	r2,-2
  8074fc:	1884703a 	and	r2,r3,r2
  807500:	1001703a 	wrctl	status,r2
  
  return context;
  807504:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  807508:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80750c:	e0bfff03 	ldbu	r2,-4(fp)
  807510:	10803fd8 	cmpnei	r2,r2,255
  807514:	1000061e 	bne	r2,zero,807530 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  807518:	d0a04217 	ldw	r2,-32504(gp)
  80751c:	10800c83 	ldbu	r2,50(r2)
  807520:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  807524:	00800044 	movi	r2,1
  807528:	e0bff705 	stb	r2,-36(fp)
  80752c:	00000906 	br	807554 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  807530:	d0a04217 	ldw	r2,-32504(gp)
  807534:	10800c83 	ldbu	r2,50(r2)
  807538:	10c03fcc 	andi	r3,r2,255
  80753c:	e0bfff03 	ldbu	r2,-4(fp)
  807540:	1880031e 	bne	r3,r2,807550 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  807544:	00800044 	movi	r2,1
  807548:	e0bff705 	stb	r2,-36(fp)
  80754c:	00000106 	br	807554 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  807550:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807554:	e0ffff03 	ldbu	r3,-4(fp)
  807558:	00802074 	movhi	r2,129
  80755c:	109d2f04 	addi	r2,r2,29884
  807560:	18c7883a 	add	r3,r3,r3
  807564:	18c7883a 	add	r3,r3,r3
  807568:	10c5883a 	add	r2,r2,r3
  80756c:	10800017 	ldw	r2,0(r2)
  807570:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  807574:	e0bffa17 	ldw	r2,-24(fp)
  807578:	1000061e 	bne	r2,zero,807594 <OSTaskSuspend+0xf8>
  80757c:	e0bff817 	ldw	r2,-32(fp)
  807580:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807584:	e0bff917 	ldw	r2,-28(fp)
  807588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80758c:	00801204 	movi	r2,72
  807590:	00003606 	br	80766c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  807594:	e0bffa17 	ldw	r2,-24(fp)
  807598:	10800058 	cmpnei	r2,r2,1
  80759c:	1000061e 	bne	r2,zero,8075b8 <OSTaskSuspend+0x11c>
  8075a0:	e0bff817 	ldw	r2,-32(fp)
  8075a4:	e0bffb15 	stw	r2,-20(fp)
  8075a8:	e0bffb17 	ldw	r2,-20(fp)
  8075ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8075b0:	008010c4 	movi	r2,67
  8075b4:	00002d06 	br	80766c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  8075b8:	e0bffa17 	ldw	r2,-24(fp)
  8075bc:	10800d03 	ldbu	r2,52(r2)
  8075c0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  8075c4:	e0fffd03 	ldbu	r3,-12(fp)
  8075c8:	e13ffd03 	ldbu	r4,-12(fp)
  8075cc:	d0a03f44 	addi	r2,gp,-32515
  8075d0:	2085883a 	add	r2,r4,r2
  8075d4:	10800003 	ldbu	r2,0(r2)
  8075d8:	1009883a 	mov	r4,r2
  8075dc:	e0bffa17 	ldw	r2,-24(fp)
  8075e0:	10800d43 	ldbu	r2,53(r2)
  8075e4:	0084303a 	nor	r2,zero,r2
  8075e8:	2084703a 	and	r2,r4,r2
  8075ec:	1009883a 	mov	r4,r2
  8075f0:	d0a03f44 	addi	r2,gp,-32515
  8075f4:	1885883a 	add	r2,r3,r2
  8075f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  8075fc:	e0fffd03 	ldbu	r3,-12(fp)
  807600:	d0a03f44 	addi	r2,gp,-32515
  807604:	1885883a 	add	r2,r3,r2
  807608:	10800003 	ldbu	r2,0(r2)
  80760c:	10803fcc 	andi	r2,r2,255
  807610:	1000071e 	bne	r2,zero,807630 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  807614:	e0bffa17 	ldw	r2,-24(fp)
  807618:	10800d83 	ldbu	r2,54(r2)
  80761c:	0084303a 	nor	r2,zero,r2
  807620:	1007883a 	mov	r3,r2
  807624:	d0a03f03 	ldbu	r2,-32516(gp)
  807628:	1884703a 	and	r2,r3,r2
  80762c:	d0a03f05 	stb	r2,-32516(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  807630:	e0bffa17 	ldw	r2,-24(fp)
  807634:	10800c03 	ldbu	r2,48(r2)
  807638:	10800214 	ori	r2,r2,8
  80763c:	1007883a 	mov	r3,r2
  807640:	e0bffa17 	ldw	r2,-24(fp)
  807644:	10c00c05 	stb	r3,48(r2)
  807648:	e0bff817 	ldw	r2,-32(fp)
  80764c:	e0bffc15 	stw	r2,-16(fp)
  807650:	e0bffc17 	ldw	r2,-16(fp)
  807654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  807658:	e0bff703 	ldbu	r2,-36(fp)
  80765c:	10800058 	cmpnei	r2,r2,1
  807660:	1000011e 	bne	r2,zero,807668 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  807664:	0801e6c0 	call	801e6c <OS_Sched>
    }
    return (OS_ERR_NONE);
  807668:	0005883a 	mov	r2,zero
}
  80766c:	e037883a 	mov	sp,fp
  807670:	dfc00117 	ldw	ra,4(sp)
  807674:	df000017 	ldw	fp,0(sp)
  807678:	dec00204 	addi	sp,sp,8
  80767c:	f800283a 	ret

00807680 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  807680:	defff604 	addi	sp,sp,-40
  807684:	dfc00915 	stw	ra,36(sp)
  807688:	df000815 	stw	fp,32(sp)
  80768c:	df000804 	addi	fp,sp,32
  807690:	2005883a 	mov	r2,r4
  807694:	e17fff15 	stw	r5,-4(fp)
  807698:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80769c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  8076a0:	e0bffe03 	ldbu	r2,-8(fp)
  8076a4:	10800570 	cmpltui	r2,r2,21
  8076a8:	1000051e 	bne	r2,zero,8076c0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  8076ac:	e0bffe03 	ldbu	r2,-8(fp)
  8076b0:	10803fe0 	cmpeqi	r2,r2,255
  8076b4:	1000021e 	bne	r2,zero,8076c0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  8076b8:	00800a84 	movi	r2,42
  8076bc:	00003406 	br	807790 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  8076c0:	e0bfff17 	ldw	r2,-4(fp)
  8076c4:	1000021e 	bne	r2,zero,8076d0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  8076c8:	00800244 	movi	r2,9
  8076cc:	00003006 	br	807790 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8076d0:	0005303a 	rdctl	r2,status
  8076d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8076d8:	e0fffd17 	ldw	r3,-12(fp)
  8076dc:	00bfff84 	movi	r2,-2
  8076e0:	1884703a 	and	r2,r3,r2
  8076e4:	1001703a 	wrctl	status,r2
  
  return context;
  8076e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8076ec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  8076f0:	e0bffe03 	ldbu	r2,-8(fp)
  8076f4:	10803fd8 	cmpnei	r2,r2,255
  8076f8:	1000031e 	bne	r2,zero,807708 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  8076fc:	d0a04217 	ldw	r2,-32504(gp)
  807700:	10800c83 	ldbu	r2,50(r2)
  807704:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807708:	e0fffe03 	ldbu	r3,-8(fp)
  80770c:	00802074 	movhi	r2,129
  807710:	109d2f04 	addi	r2,r2,29884
  807714:	18c7883a 	add	r3,r3,r3
  807718:	18c7883a 	add	r3,r3,r3
  80771c:	10c5883a 	add	r2,r2,r3
  807720:	10800017 	ldw	r2,0(r2)
  807724:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  807728:	e0bffa17 	ldw	r2,-24(fp)
  80772c:	1000061e 	bne	r2,zero,807748 <OSTaskQuery+0xc8>
  807730:	e0bff817 	ldw	r2,-32(fp)
  807734:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807738:	e0bff917 	ldw	r2,-28(fp)
  80773c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  807740:	00800a44 	movi	r2,41
  807744:	00001206 	br	807790 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  807748:	e0bffa17 	ldw	r2,-24(fp)
  80774c:	10800058 	cmpnei	r2,r2,1
  807750:	1000061e 	bne	r2,zero,80776c <OSTaskQuery+0xec>
  807754:	e0bff817 	ldw	r2,-32(fp)
  807758:	e0bffb15 	stw	r2,-20(fp)
  80775c:	e0bffb17 	ldw	r2,-20(fp)
  807760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  807764:	008010c4 	movi	r2,67
  807768:	00000906 	br	807790 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80776c:	01801b04 	movi	r6,108
  807770:	e17ffa17 	ldw	r5,-24(fp)
  807774:	e13fff17 	ldw	r4,-4(fp)
  807778:	0801e040 	call	801e04 <OS_MemCopy>
  80777c:	e0bff817 	ldw	r2,-32(fp)
  807780:	e0bffc15 	stw	r2,-16(fp)
  807784:	e0bffc17 	ldw	r2,-16(fp)
  807788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80778c:	0005883a 	mov	r2,zero
}
  807790:	e037883a 	mov	sp,fp
  807794:	dfc00117 	ldw	ra,4(sp)
  807798:	df000017 	ldw	fp,0(sp)
  80779c:	dec00204 	addi	sp,sp,8
  8077a0:	f800283a 	ret

008077a4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  8077a4:	defffc04 	addi	sp,sp,-16
  8077a8:	df000315 	stw	fp,12(sp)
  8077ac:	df000304 	addi	fp,sp,12
  8077b0:	e13ffd15 	stw	r4,-12(fp)
  8077b4:	e17ffe15 	stw	r5,-8(fp)
  8077b8:	3005883a 	mov	r2,r6
  8077bc:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  8077c0:	e0bfff0b 	ldhu	r2,-4(fp)
  8077c4:	1080004c 	andi	r2,r2,1
  8077c8:	10000d26 	beq	r2,zero,807800 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  8077cc:	e0bfff0b 	ldhu	r2,-4(fp)
  8077d0:	1080008c 	andi	r2,r2,2
  8077d4:	10000a26 	beq	r2,zero,807800 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8077d8:	00000706 	br	8077f8 <OS_TaskStkClr+0x54>
                size--;
  8077dc:	e0bffe17 	ldw	r2,-8(fp)
  8077e0:	10bfffc4 	addi	r2,r2,-1
  8077e4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  8077e8:	e0bffd17 	ldw	r2,-12(fp)
  8077ec:	10c00104 	addi	r3,r2,4
  8077f0:	e0fffd15 	stw	r3,-12(fp)
  8077f4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8077f8:	e0bffe17 	ldw	r2,-8(fp)
  8077fc:	103ff71e 	bne	r2,zero,8077dc <__alt_mem_epcs_flash_controller_0+0xff7fe7dc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  807800:	0001883a 	nop
  807804:	e037883a 	mov	sp,fp
  807808:	df000017 	ldw	fp,0(sp)
  80780c:	dec00104 	addi	sp,sp,4
  807810:	f800283a 	ret

00807814 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  807814:	defff904 	addi	sp,sp,-28
  807818:	dfc00615 	stw	ra,24(sp)
  80781c:	df000515 	stw	fp,20(sp)
  807820:	df000504 	addi	fp,sp,20
  807824:	2005883a 	mov	r2,r4
  807828:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80782c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807830:	d0a04103 	ldbu	r2,-32508(gp)
  807834:	10803fcc 	andi	r2,r2,255
  807838:	1000311e 	bne	r2,zero,807900 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80783c:	e0bfff0b 	ldhu	r2,-4(fp)
  807840:	10003026 	beq	r2,zero,807904 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807844:	0005303a 	rdctl	r2,status
  807848:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80784c:	e0fffe17 	ldw	r3,-8(fp)
  807850:	00bfff84 	movi	r2,-2
  807854:	1884703a 	and	r2,r3,r2
  807858:	1001703a 	wrctl	status,r2
  
  return context;
  80785c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  807860:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  807864:	d0a04217 	ldw	r2,-32504(gp)
  807868:	10800d03 	ldbu	r2,52(r2)
  80786c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  807870:	e0fffd03 	ldbu	r3,-12(fp)
  807874:	e13ffd03 	ldbu	r4,-12(fp)
  807878:	d0a03f44 	addi	r2,gp,-32515
  80787c:	2085883a 	add	r2,r4,r2
  807880:	10800003 	ldbu	r2,0(r2)
  807884:	1009883a 	mov	r4,r2
  807888:	d0a04217 	ldw	r2,-32504(gp)
  80788c:	10800d43 	ldbu	r2,53(r2)
  807890:	0084303a 	nor	r2,zero,r2
  807894:	2084703a 	and	r2,r4,r2
  807898:	1009883a 	mov	r4,r2
  80789c:	d0a03f44 	addi	r2,gp,-32515
  8078a0:	1885883a 	add	r2,r3,r2
  8078a4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  8078a8:	e0fffd03 	ldbu	r3,-12(fp)
  8078ac:	d0a03f44 	addi	r2,gp,-32515
  8078b0:	1885883a 	add	r2,r3,r2
  8078b4:	10800003 	ldbu	r2,0(r2)
  8078b8:	10803fcc 	andi	r2,r2,255
  8078bc:	1000071e 	bne	r2,zero,8078dc <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8078c0:	d0a04217 	ldw	r2,-32504(gp)
  8078c4:	10800d83 	ldbu	r2,54(r2)
  8078c8:	0084303a 	nor	r2,zero,r2
  8078cc:	1007883a 	mov	r3,r2
  8078d0:	d0a03f03 	ldbu	r2,-32516(gp)
  8078d4:	1884703a 	and	r2,r3,r2
  8078d8:	d0a03f05 	stb	r2,-32516(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  8078dc:	d0a04217 	ldw	r2,-32504(gp)
  8078e0:	e0ffff0b 	ldhu	r3,-4(fp)
  8078e4:	10c00b8d 	sth	r3,46(r2)
  8078e8:	e0bffb17 	ldw	r2,-20(fp)
  8078ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8078f0:	e0bffc17 	ldw	r2,-16(fp)
  8078f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  8078f8:	0801e6c0 	call	801e6c <OS_Sched>
  8078fc:	00000106 	br	807904 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  807900:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  807904:	e037883a 	mov	sp,fp
  807908:	dfc00117 	ldw	ra,4(sp)
  80790c:	df000017 	ldw	fp,0(sp)
  807910:	dec00204 	addi	sp,sp,8
  807914:	f800283a 	ret

00807918 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  807918:	defff704 	addi	sp,sp,-36
  80791c:	dfc00815 	stw	ra,32(sp)
  807920:	df000715 	stw	fp,28(sp)
  807924:	dc000615 	stw	r16,24(sp)
  807928:	df000704 	addi	fp,sp,28
  80792c:	2011883a 	mov	r8,r4
  807930:	2809883a 	mov	r4,r5
  807934:	3007883a 	mov	r3,r6
  807938:	3805883a 	mov	r2,r7
  80793c:	e23ffb05 	stb	r8,-20(fp)
  807940:	e13ffc05 	stb	r4,-16(fp)
  807944:	e0fffd05 	stb	r3,-12(fp)
  807948:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80794c:	d0a04103 	ldbu	r2,-32508(gp)
  807950:	10803fcc 	andi	r2,r2,255
  807954:	10000226 	beq	r2,zero,807960 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  807958:	00801544 	movi	r2,85
  80795c:	00004706 	br	807a7c <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  807960:	e0bffb03 	ldbu	r2,-20(fp)
  807964:	1000081e 	bne	r2,zero,807988 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  807968:	e0bffc03 	ldbu	r2,-16(fp)
  80796c:	1000061e 	bne	r2,zero,807988 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  807970:	e0bffd03 	ldbu	r2,-12(fp)
  807974:	1000041e 	bne	r2,zero,807988 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  807978:	e0bffe0b 	ldhu	r2,-8(fp)
  80797c:	1000021e 	bne	r2,zero,807988 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  807980:	00801504 	movi	r2,84
  807984:	00003d06 	br	807a7c <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  807988:	e0bffc03 	ldbu	r2,-16(fp)
  80798c:	10800f30 	cmpltui	r2,r2,60
  807990:	1000021e 	bne	r2,zero,80799c <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  807994:	00801444 	movi	r2,81
  807998:	00003806 	br	807a7c <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  80799c:	e0bffd03 	ldbu	r2,-12(fp)
  8079a0:	10800f30 	cmpltui	r2,r2,60
  8079a4:	1000021e 	bne	r2,zero,8079b0 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  8079a8:	00801484 	movi	r2,82
  8079ac:	00003306 	br	807a7c <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  8079b0:	e0bffe0b 	ldhu	r2,-8(fp)
  8079b4:	1080fa30 	cmpltui	r2,r2,1000
  8079b8:	1000021e 	bne	r2,zero,8079c4 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  8079bc:	008014c4 	movi	r2,83
  8079c0:	00002e06 	br	807a7c <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  8079c4:	e0bffb03 	ldbu	r2,-20(fp)
  8079c8:	01438404 	movi	r5,3600
  8079cc:	1009883a 	mov	r4,r2
  8079d0:	080c71c0 	call	80c71c <__mulsi3>
  8079d4:	1021883a 	mov	r16,r2
  8079d8:	e0bffc03 	ldbu	r2,-16(fp)
  8079dc:	01400f04 	movi	r5,60
  8079e0:	1009883a 	mov	r4,r2
  8079e4:	080c71c0 	call	80c71c <__mulsi3>
  8079e8:	8087883a 	add	r3,r16,r2
  8079ec:	e0bffd03 	ldbu	r2,-12(fp)
  8079f0:	1885883a 	add	r2,r3,r2
  8079f4:	0140fa04 	movi	r5,1000
  8079f8:	1009883a 	mov	r4,r2
  8079fc:	080c71c0 	call	80c71c <__mulsi3>
  807a00:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  807a04:	e0bffe0b 	ldhu	r2,-8(fp)
  807a08:	0140fa04 	movi	r5,1000
  807a0c:	1009883a 	mov	r4,r2
  807a10:	080c71c0 	call	80c71c <__mulsi3>
  807a14:	0140fa04 	movi	r5,1000
  807a18:	1009883a 	mov	r4,r2
  807a1c:	080c6600 	call	80c660 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  807a20:	8085883a 	add	r2,r16,r2
  807a24:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  807a28:	e0bffa17 	ldw	r2,-24(fp)
  807a2c:	1004d43a 	srli	r2,r2,16
  807a30:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  807a34:	e0bffa17 	ldw	r2,-24(fp)
  807a38:	10bfffcc 	andi	r2,r2,65535
  807a3c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  807a40:	e0bffa17 	ldw	r2,-24(fp)
  807a44:	10bfffcc 	andi	r2,r2,65535
  807a48:	1009883a 	mov	r4,r2
  807a4c:	08078140 	call	807814 <OSTimeDly>
    while (loops > 0) {
  807a50:	00000706 	br	807a70 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  807a54:	01200014 	movui	r4,32768
  807a58:	08078140 	call	807814 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  807a5c:	01200014 	movui	r4,32768
  807a60:	08078140 	call	807814 <OSTimeDly>
        loops--;
  807a64:	e0bff90b 	ldhu	r2,-28(fp)
  807a68:	10bfffc4 	addi	r2,r2,-1
  807a6c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  807a70:	e0bff90b 	ldhu	r2,-28(fp)
  807a74:	103ff71e 	bne	r2,zero,807a54 <__alt_mem_epcs_flash_controller_0+0xff7fea54>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  807a78:	0005883a 	mov	r2,zero
}
  807a7c:	e6ffff04 	addi	sp,fp,-4
  807a80:	dfc00217 	ldw	ra,8(sp)
  807a84:	df000117 	ldw	fp,4(sp)
  807a88:	dc000017 	ldw	r16,0(sp)
  807a8c:	dec00304 	addi	sp,sp,12
  807a90:	f800283a 	ret

00807a94 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  807a94:	defff504 	addi	sp,sp,-44
  807a98:	dfc00a15 	stw	ra,40(sp)
  807a9c:	df000915 	stw	fp,36(sp)
  807aa0:	df000904 	addi	fp,sp,36
  807aa4:	2005883a 	mov	r2,r4
  807aa8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  807aac:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  807ab0:	e0bfff03 	ldbu	r2,-4(fp)
  807ab4:	10800530 	cmpltui	r2,r2,20
  807ab8:	1000021e 	bne	r2,zero,807ac4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  807abc:	00800a84 	movi	r2,42
  807ac0:	00006406 	br	807c54 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807ac4:	0005303a 	rdctl	r2,status
  807ac8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807acc:	e0fffe17 	ldw	r3,-8(fp)
  807ad0:	00bfff84 	movi	r2,-2
  807ad4:	1884703a 	and	r2,r3,r2
  807ad8:	1001703a 	wrctl	status,r2
  
  return context;
  807adc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  807ae0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  807ae4:	e0ffff03 	ldbu	r3,-4(fp)
  807ae8:	00802074 	movhi	r2,129
  807aec:	109d2f04 	addi	r2,r2,29884
  807af0:	18c7883a 	add	r3,r3,r3
  807af4:	18c7883a 	add	r3,r3,r3
  807af8:	10c5883a 	add	r2,r2,r3
  807afc:	10800017 	ldw	r2,0(r2)
  807b00:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  807b04:	e0bff917 	ldw	r2,-28(fp)
  807b08:	1000061e 	bne	r2,zero,807b24 <OSTimeDlyResume+0x90>
  807b0c:	e0bff717 	ldw	r2,-36(fp)
  807b10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807b14:	e0bff817 	ldw	r2,-32(fp)
  807b18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  807b1c:	008010c4 	movi	r2,67
  807b20:	00004c06 	br	807c54 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  807b24:	e0bff917 	ldw	r2,-28(fp)
  807b28:	10800058 	cmpnei	r2,r2,1
  807b2c:	1000061e 	bne	r2,zero,807b48 <OSTimeDlyResume+0xb4>
  807b30:	e0bff717 	ldw	r2,-36(fp)
  807b34:	e0bffa15 	stw	r2,-24(fp)
  807b38:	e0bffa17 	ldw	r2,-24(fp)
  807b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  807b40:	008010c4 	movi	r2,67
  807b44:	00004306 	br	807c54 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  807b48:	e0bff917 	ldw	r2,-28(fp)
  807b4c:	10800b8b 	ldhu	r2,46(r2)
  807b50:	10bfffcc 	andi	r2,r2,65535
  807b54:	1000061e 	bne	r2,zero,807b70 <OSTimeDlyResume+0xdc>
  807b58:	e0bff717 	ldw	r2,-36(fp)
  807b5c:	e0bffb15 	stw	r2,-20(fp)
  807b60:	e0bffb17 	ldw	r2,-20(fp)
  807b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  807b68:	00801404 	movi	r2,80
  807b6c:	00003906 	br	807c54 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  807b70:	e0bff917 	ldw	r2,-28(fp)
  807b74:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  807b78:	e0bff917 	ldw	r2,-28(fp)
  807b7c:	10800c03 	ldbu	r2,48(r2)
  807b80:	10803fcc 	andi	r2,r2,255
  807b84:	10800dcc 	andi	r2,r2,55
  807b88:	10000b26 	beq	r2,zero,807bb8 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  807b8c:	e0bff917 	ldw	r2,-28(fp)
  807b90:	10c00c03 	ldbu	r3,48(r2)
  807b94:	00bff204 	movi	r2,-56
  807b98:	1884703a 	and	r2,r3,r2
  807b9c:	1007883a 	mov	r3,r2
  807ba0:	e0bff917 	ldw	r2,-28(fp)
  807ba4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  807ba8:	e0bff917 	ldw	r2,-28(fp)
  807bac:	00c00044 	movi	r3,1
  807bb0:	10c00c45 	stb	r3,49(r2)
  807bb4:	00000206 	br	807bc0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  807bb8:	e0bff917 	ldw	r2,-28(fp)
  807bbc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  807bc0:	e0bff917 	ldw	r2,-28(fp)
  807bc4:	10800c03 	ldbu	r2,48(r2)
  807bc8:	10803fcc 	andi	r2,r2,255
  807bcc:	1080020c 	andi	r2,r2,8
  807bd0:	10001b1e 	bne	r2,zero,807c40 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  807bd4:	e0bff917 	ldw	r2,-28(fp)
  807bd8:	10c00d83 	ldbu	r3,54(r2)
  807bdc:	d0a03f03 	ldbu	r2,-32516(gp)
  807be0:	1884b03a 	or	r2,r3,r2
  807be4:	d0a03f05 	stb	r2,-32516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  807be8:	e0bff917 	ldw	r2,-28(fp)
  807bec:	10800d03 	ldbu	r2,52(r2)
  807bf0:	10c03fcc 	andi	r3,r2,255
  807bf4:	e0bff917 	ldw	r2,-28(fp)
  807bf8:	10800d03 	ldbu	r2,52(r2)
  807bfc:	11003fcc 	andi	r4,r2,255
  807c00:	d0a03f44 	addi	r2,gp,-32515
  807c04:	2085883a 	add	r2,r4,r2
  807c08:	11000003 	ldbu	r4,0(r2)
  807c0c:	e0bff917 	ldw	r2,-28(fp)
  807c10:	10800d43 	ldbu	r2,53(r2)
  807c14:	2084b03a 	or	r2,r4,r2
  807c18:	1009883a 	mov	r4,r2
  807c1c:	d0a03f44 	addi	r2,gp,-32515
  807c20:	1885883a 	add	r2,r3,r2
  807c24:	11000005 	stb	r4,0(r2)
  807c28:	e0bff717 	ldw	r2,-36(fp)
  807c2c:	e0bffc15 	stw	r2,-16(fp)
  807c30:	e0bffc17 	ldw	r2,-16(fp)
  807c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  807c38:	0801e6c0 	call	801e6c <OS_Sched>
  807c3c:	00000406 	br	807c50 <OSTimeDlyResume+0x1bc>
  807c40:	e0bff717 	ldw	r2,-36(fp)
  807c44:	e0bffd15 	stw	r2,-12(fp)
  807c48:	e0bffd17 	ldw	r2,-12(fp)
  807c4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  807c50:	0005883a 	mov	r2,zero
}
  807c54:	e037883a 	mov	sp,fp
  807c58:	dfc00117 	ldw	ra,4(sp)
  807c5c:	df000017 	ldw	fp,0(sp)
  807c60:	dec00204 	addi	sp,sp,8
  807c64:	f800283a 	ret

00807c68 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  807c68:	defffb04 	addi	sp,sp,-20
  807c6c:	df000415 	stw	fp,16(sp)
  807c70:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c74:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c78:	0005303a 	rdctl	r2,status
  807c7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c80:	e0fffe17 	ldw	r3,-8(fp)
  807c84:	00bfff84 	movi	r2,-2
  807c88:	1884703a 	and	r2,r3,r2
  807c8c:	1001703a 	wrctl	status,r2
  
  return context;
  807c90:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  807c94:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  807c98:	d0a04317 	ldw	r2,-32500(gp)
  807c9c:	e0bffd15 	stw	r2,-12(fp)
  807ca0:	e0bffc17 	ldw	r2,-16(fp)
  807ca4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ca8:	e0bfff17 	ldw	r2,-4(fp)
  807cac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  807cb0:	e0bffd17 	ldw	r2,-12(fp)
}
  807cb4:	e037883a 	mov	sp,fp
  807cb8:	df000017 	ldw	fp,0(sp)
  807cbc:	dec00104 	addi	sp,sp,4
  807cc0:	f800283a 	ret

00807cc4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  807cc4:	defffb04 	addi	sp,sp,-20
  807cc8:	df000415 	stw	fp,16(sp)
  807ccc:	df000404 	addi	fp,sp,16
  807cd0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807cd4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807cd8:	0005303a 	rdctl	r2,status
  807cdc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ce0:	e0fffd17 	ldw	r3,-12(fp)
  807ce4:	00bfff84 	movi	r2,-2
  807ce8:	1884703a 	and	r2,r3,r2
  807cec:	1001703a 	wrctl	status,r2
  
  return context;
  807cf0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  807cf4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  807cf8:	e0bfff17 	ldw	r2,-4(fp)
  807cfc:	d0a04315 	stw	r2,-32500(gp)
  807d00:	e0bffc17 	ldw	r2,-16(fp)
  807d04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807d08:	e0bffe17 	ldw	r2,-8(fp)
  807d0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  807d10:	0001883a 	nop
  807d14:	e037883a 	mov	sp,fp
  807d18:	df000017 	ldw	fp,0(sp)
  807d1c:	dec00104 	addi	sp,sp,4
  807d20:	f800283a 	ret

00807d24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  807d24:	defffd04 	addi	sp,sp,-12
  807d28:	dfc00215 	stw	ra,8(sp)
  807d2c:	df000115 	stw	fp,4(sp)
  807d30:	df000104 	addi	fp,sp,4
  807d34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807d38:	d1602104 	addi	r5,gp,-32636
  807d3c:	e13fff17 	ldw	r4,-4(fp)
  807d40:	080ab940 	call	80ab94 <alt_dev_llist_insert>
}
  807d44:	e037883a 	mov	sp,fp
  807d48:	dfc00117 	ldw	ra,4(sp)
  807d4c:	df000017 	ldw	fp,0(sp)
  807d50:	dec00204 	addi	sp,sp,8
  807d54:	f800283a 	ret

00807d58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  807d58:	defffd04 	addi	sp,sp,-12
  807d5c:	dfc00215 	stw	ra,8(sp)
  807d60:	df000115 	stw	fp,4(sp)
  807d64:	df000104 	addi	fp,sp,4
  807d68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  807d6c:	080b6600 	call	80b660 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807d70:	00800044 	movi	r2,1
  807d74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  807d78:	0001883a 	nop
  807d7c:	e037883a 	mov	sp,fp
  807d80:	dfc00117 	ldw	ra,4(sp)
  807d84:	df000017 	ldw	fp,0(sp)
  807d88:	dec00204 	addi	sp,sp,8
  807d8c:	f800283a 	ret

00807d90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807d90:	defffe04 	addi	sp,sp,-8
  807d94:	dfc00115 	stw	ra,4(sp)
  807d98:	df000015 	stw	fp,0(sp)
  807d9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  807da0:	01c0fa04 	movi	r7,1000
  807da4:	01800144 	movi	r6,5
  807da8:	000b883a 	mov	r5,zero
  807dac:	01004074 	movhi	r4,257
  807db0:	21280004 	addi	r4,r4,-24576
  807db4:	08096e00 	call	8096e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  807db8:	01002074 	movhi	r4,129
  807dbc:	21324504 	addi	r4,r4,-14060
  807dc0:	0807e740 	call	807e74 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  807dc4:	000d883a 	mov	r6,zero
  807dc8:	000b883a 	mov	r5,zero
  807dcc:	01002074 	movhi	r4,129
  807dd0:	21328204 	addi	r4,r4,-13816
  807dd4:	0808aa00 	call	808aa0 <altera_avalon_jtag_uart_init>
  807dd8:	01002074 	movhi	r4,129
  807ddc:	21327804 	addi	r4,r4,-13856
  807de0:	0807d240 	call	807d24 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  807de4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( CAM_UART, cam_uart);
  807de8:	01800044 	movi	r6,1
  807dec:	000b883a 	mov	r5,zero
  807df0:	01002074 	movhi	r4,129
  807df4:	21369d04 	addi	r4,r4,-9612
  807df8:	080986c0 	call	80986c <altera_avalon_uart_init>
  807dfc:	01002074 	movhi	r4,129
  807e00:	21369304 	addi	r4,r4,-9652
  807e04:	0807d240 	call	807d24 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  807e08:	01800084 	movi	r6,2
  807e0c:	000b883a 	mov	r5,zero
  807e10:	01002074 	movhi	r4,129
  807e14:	2136d104 	addi	r4,r4,-9404
  807e18:	080986c0 	call	80986c <altera_avalon_uart_init>
  807e1c:	01002074 	movhi	r4,129
  807e20:	2136c704 	addi	r4,r4,-9444
  807e24:	0807d240 	call	807d24 <alt_dev_reg>
}
  807e28:	0001883a 	nop
  807e2c:	e037883a 	mov	sp,fp
  807e30:	dfc00117 	ldw	ra,4(sp)
  807e34:	df000017 	ldw	fp,0(sp)
  807e38:	dec00204 	addi	sp,sp,8
  807e3c:	f800283a 	ret

00807e40 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  807e40:	defffd04 	addi	sp,sp,-12
  807e44:	dfc00215 	stw	ra,8(sp)
  807e48:	df000115 	stw	fp,4(sp)
  807e4c:	df000104 	addi	fp,sp,4
  807e50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  807e54:	d1602504 	addi	r5,gp,-32620
  807e58:	e13fff17 	ldw	r4,-4(fp)
  807e5c:	080ab940 	call	80ab94 <alt_dev_llist_insert>
}
  807e60:	e037883a 	mov	sp,fp
  807e64:	dfc00117 	ldw	ra,4(sp)
  807e68:	df000017 	ldw	fp,0(sp)
  807e6c:	dec00204 	addi	sp,sp,8
  807e70:	f800283a 	ret

00807e74 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  807e74:	defffc04 	addi	sp,sp,-16
  807e78:	dfc00315 	stw	ra,12(sp)
  807e7c:	df000215 	stw	fp,8(sp)
  807e80:	df000204 	addi	fp,sp,8
  807e84:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  807e88:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  807e8c:	e13fff17 	ldw	r4,-4(fp)
  807e90:	0807ec80 	call	807ec8 <alt_epcs_flash_query>
  807e94:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  807e98:	e0bffe17 	ldw	r2,-8(fp)
  807e9c:	1000041e 	bne	r2,zero,807eb0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  807ea0:	e0bfff17 	ldw	r2,-4(fp)
  807ea4:	1009883a 	mov	r4,r2
  807ea8:	0807e400 	call	807e40 <alt_flash_device_register>
  807eac:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  807eb0:	e0bffe17 	ldw	r2,-8(fp)
}
  807eb4:	e037883a 	mov	sp,fp
  807eb8:	dfc00117 	ldw	ra,4(sp)
  807ebc:	df000017 	ldw	fp,0(sp)
  807ec0:	dec00204 	addi	sp,sp,8
  807ec4:	f800283a 	ret

00807ec8 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  807ec8:	defffc04 	addi	sp,sp,-16
  807ecc:	dfc00315 	stw	ra,12(sp)
  807ed0:	df000215 	stw	fp,8(sp)
  807ed4:	df000204 	addi	fp,sp,8
  807ed8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  807edc:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  807ee0:	e0bfff17 	ldw	r2,-4(fp)
  807ee4:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  807ee8:	e0bfff17 	ldw	r2,-4(fp)
  807eec:	10802e17 	ldw	r2,184(r2)
  807ef0:	1009883a 	mov	r4,r2
  807ef4:	080a74c0 	call	80a74c <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  807ef8:	10c03fcc 	andi	r3,r2,255
  807efc:	e0bfff17 	ldw	r2,-4(fp)
  807f00:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  807f04:	e0bfff17 	ldw	r2,-4(fp)
  807f08:	10803017 	ldw	r2,192(r2)
  807f0c:	10800598 	cmpnei	r2,r2,22
  807f10:	10000a1e 	bne	r2,zero,807f3c <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  807f14:	e0bfff17 	ldw	r2,-4(fp)
  807f18:	00c02034 	movhi	r3,128
  807f1c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  807f20:	e0bfff17 	ldw	r2,-4(fp)
  807f24:	00c02004 	movi	r3,128
  807f28:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807f2c:	e0bfff17 	ldw	r2,-4(fp)
  807f30:	00c00074 	movhi	r3,1
  807f34:	10c01015 	stw	r3,64(r2)
  807f38:	0000ce06 	br	808274 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  807f3c:	e0bfff17 	ldw	r2,-4(fp)
  807f40:	10803017 	ldw	r2,192(r2)
  807f44:	10800518 	cmpnei	r2,r2,20
  807f48:	10000a1e 	bne	r2,zero,807f74 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  807f4c:	e0bfff17 	ldw	r2,-4(fp)
  807f50:	00c00834 	movhi	r3,32
  807f54:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  807f58:	e0bfff17 	ldw	r2,-4(fp)
  807f5c:	00c00804 	movi	r3,32
  807f60:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807f64:	e0bfff17 	ldw	r2,-4(fp)
  807f68:	00c00074 	movhi	r3,1
  807f6c:	10c01015 	stw	r3,64(r2)
  807f70:	0000c006 	br	808274 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  807f74:	e0bfff17 	ldw	r2,-4(fp)
  807f78:	10803017 	ldw	r2,192(r2)
  807f7c:	108004d8 	cmpnei	r2,r2,19
  807f80:	10000a1e 	bne	r2,zero,807fac <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  807f84:	e0bfff17 	ldw	r2,-4(fp)
  807f88:	00c00434 	movhi	r3,16
  807f8c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  807f90:	e0bfff17 	ldw	r2,-4(fp)
  807f94:	00c00404 	movi	r3,16
  807f98:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807f9c:	e0bfff17 	ldw	r2,-4(fp)
  807fa0:	00c00074 	movhi	r3,1
  807fa4:	10c01015 	stw	r3,64(r2)
  807fa8:	0000b206 	br	808274 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  807fac:	e0bfff17 	ldw	r2,-4(fp)
  807fb0:	10803017 	ldw	r2,192(r2)
  807fb4:	10800498 	cmpnei	r2,r2,18
  807fb8:	10000a1e 	bne	r2,zero,807fe4 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  807fbc:	e0bfff17 	ldw	r2,-4(fp)
  807fc0:	00c00234 	movhi	r3,8
  807fc4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  807fc8:	e0bfff17 	ldw	r2,-4(fp)
  807fcc:	00c00204 	movi	r3,8
  807fd0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  807fd4:	e0bfff17 	ldw	r2,-4(fp)
  807fd8:	00c00074 	movhi	r3,1
  807fdc:	10c01015 	stw	r3,64(r2)
  807fe0:	0000a406 	br	808274 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  807fe4:	e0bfff17 	ldw	r2,-4(fp)
  807fe8:	10803017 	ldw	r2,192(r2)
  807fec:	10800418 	cmpnei	r2,r2,16
  807ff0:	10000a1e 	bne	r2,zero,80801c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  807ff4:	e0bfff17 	ldw	r2,-4(fp)
  807ff8:	00c000b4 	movhi	r3,2
  807ffc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  808000:	e0bfff17 	ldw	r2,-4(fp)
  808004:	00c00104 	movi	r3,4
  808008:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  80800c:	e0bfff17 	ldw	r2,-4(fp)
  808010:	00e00014 	movui	r3,32768
  808014:	10c01015 	stw	r3,64(r2)
  808018:	00009606 	br	808274 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  80801c:	e0bfff17 	ldw	r2,-4(fp)
  808020:	10802e17 	ldw	r2,184(r2)
  808024:	1009883a 	mov	r4,r2
  808028:	080a7b40 	call	80a7b4 <epcs_read_device_id>
  80802c:	1007883a 	mov	r3,r2
  808030:	e0bfff17 	ldw	r2,-4(fp)
  808034:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  808038:	e0bfff17 	ldw	r2,-4(fp)
  80803c:	10c03017 	ldw	r3,192(r2)
  808040:	00804034 	movhi	r2,256
  808044:	10bfffc4 	addi	r2,r2,-1
  808048:	1886703a 	and	r3,r3,r2
  80804c:	00800874 	movhi	r2,33
  808050:	10ae8544 	addi	r2,r2,-17899
  808054:	18800a1e 	bne	r3,r2,808080 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  808058:	e0bfff17 	ldw	r2,-4(fp)
  80805c:	00c00834 	movhi	r3,32
  808060:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  808064:	e0bfff17 	ldw	r2,-4(fp)
  808068:	00c00804 	movi	r3,32
  80806c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808070:	e0bfff17 	ldw	r2,-4(fp)
  808074:	00c00074 	movhi	r3,1
  808078:	10c01015 	stw	r3,64(r2)
  80807c:	00007d06 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  808080:	e0bfff17 	ldw	r2,-4(fp)
  808084:	10c03017 	ldw	r3,192(r2)
  808088:	00804034 	movhi	r2,256
  80808c:	10bfffc4 	addi	r2,r2,-1
  808090:	1886703a 	and	r3,r3,r2
  808094:	00800874 	movhi	r2,33
  808098:	10ae8584 	addi	r2,r2,-17898
  80809c:	18800a1e 	bne	r3,r2,8080c8 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  8080a0:	e0bfff17 	ldw	r2,-4(fp)
  8080a4:	00c01034 	movhi	r3,64
  8080a8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  8080ac:	e0bfff17 	ldw	r2,-4(fp)
  8080b0:	00c01004 	movi	r3,64
  8080b4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8080b8:	e0bfff17 	ldw	r2,-4(fp)
  8080bc:	00c00074 	movhi	r3,1
  8080c0:	10c01015 	stw	r3,64(r2)
  8080c4:	00006b06 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  8080c8:	e0bfff17 	ldw	r2,-4(fp)
  8080cc:	10c03017 	ldw	r3,192(r2)
  8080d0:	00804034 	movhi	r2,256
  8080d4:	10bfffc4 	addi	r2,r2,-1
  8080d8:	1886703a 	and	r3,r3,r2
  8080dc:	00800874 	movhi	r2,33
  8080e0:	10ae85c4 	addi	r2,r2,-17897
  8080e4:	18800a1e 	bne	r3,r2,808110 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  8080e8:	e0bfff17 	ldw	r2,-4(fp)
  8080ec:	00c02034 	movhi	r3,128
  8080f0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  8080f4:	e0bfff17 	ldw	r2,-4(fp)
  8080f8:	00c02004 	movi	r3,128
  8080fc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808100:	e0bfff17 	ldw	r2,-4(fp)
  808104:	00c00074 	movhi	r3,1
  808108:	10c01015 	stw	r3,64(r2)
  80810c:	00005906 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  808110:	e0bfff17 	ldw	r2,-4(fp)
  808114:	10c03017 	ldw	r3,192(r2)
  808118:	00804034 	movhi	r2,256
  80811c:	10bfffc4 	addi	r2,r2,-1
  808120:	1886703a 	and	r3,r3,r2
  808124:	00800874 	movhi	r2,33
  808128:	10ae8604 	addi	r2,r2,-17896
  80812c:	18800a1e 	bne	r3,r2,808158 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  808130:	e0bfff17 	ldw	r2,-4(fp)
  808134:	00c04034 	movhi	r3,256
  808138:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  80813c:	e0bfff17 	ldw	r2,-4(fp)
  808140:	00c04004 	movi	r3,256
  808144:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808148:	e0bfff17 	ldw	r2,-4(fp)
  80814c:	00c00074 	movhi	r3,1
  808150:	10c01015 	stw	r3,64(r2)
  808154:	00004706 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  808158:	e0bfff17 	ldw	r2,-4(fp)
  80815c:	10803017 	ldw	r2,192(r2)
  808160:	10803fcc 	andi	r2,r2,255
  808164:	10800618 	cmpnei	r2,r2,24
  808168:	10000a1e 	bne	r2,zero,808194 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  80816c:	e0bfff17 	ldw	r2,-4(fp)
  808170:	00c04034 	movhi	r3,256
  808174:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  808178:	e0bfff17 	ldw	r2,-4(fp)
  80817c:	00c01004 	movi	r3,64
  808180:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  808184:	e0bfff17 	ldw	r2,-4(fp)
  808188:	00c00134 	movhi	r3,4
  80818c:	10c01015 	stw	r3,64(r2)
  808190:	00003806 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  808194:	e0bfff17 	ldw	r2,-4(fp)
  808198:	10803017 	ldw	r2,192(r2)
  80819c:	10803fcc 	andi	r2,r2,255
  8081a0:	10800658 	cmpnei	r2,r2,25
  8081a4:	10000d1e 	bne	r2,zero,8081dc <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  8081a8:	e0bfff17 	ldw	r2,-4(fp)
  8081ac:	00c08034 	movhi	r3,512
  8081b0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  8081b4:	e0bfff17 	ldw	r2,-4(fp)
  8081b8:	00c08004 	movi	r3,512
  8081bc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8081c0:	e0bfff17 	ldw	r2,-4(fp)
  8081c4:	00c00074 	movhi	r3,1
  8081c8:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  8081cc:	e0bfff17 	ldw	r2,-4(fp)
  8081d0:	00c00044 	movi	r3,1
  8081d4:	10c03215 	stw	r3,200(r2)
  8081d8:	00002606 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  8081dc:	e0bfff17 	ldw	r2,-4(fp)
  8081e0:	10803017 	ldw	r2,192(r2)
  8081e4:	10803fcc 	andi	r2,r2,255
  8081e8:	10800818 	cmpnei	r2,r2,32
  8081ec:	10000d1e 	bne	r2,zero,808224 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  8081f0:	e0bfff17 	ldw	r2,-4(fp)
  8081f4:	00c10034 	movhi	r3,1024
  8081f8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  8081fc:	e0bfff17 	ldw	r2,-4(fp)
  808200:	00c10004 	movi	r3,1024
  808204:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808208:	e0bfff17 	ldw	r2,-4(fp)
  80820c:	00c00074 	movhi	r3,1
  808210:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  808214:	e0bfff17 	ldw	r2,-4(fp)
  808218:	00c00044 	movi	r3,1
  80821c:	10c03215 	stw	r3,200(r2)
  808220:	00001406 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  808224:	e0bfff17 	ldw	r2,-4(fp)
  808228:	10803017 	ldw	r2,192(r2)
  80822c:	10803fcc 	andi	r2,r2,255
  808230:	10800858 	cmpnei	r2,r2,33
  808234:	10000d1e 	bne	r2,zero,80826c <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  808238:	e0bfff17 	ldw	r2,-4(fp)
  80823c:	00c20034 	movhi	r3,2048
  808240:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  808244:	e0bfff17 	ldw	r2,-4(fp)
  808248:	00c20004 	movi	r3,2048
  80824c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  808250:	e0bfff17 	ldw	r2,-4(fp)
  808254:	00c00074 	movhi	r3,1
  808258:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  80825c:	e0bfff17 	ldw	r2,-4(fp)
  808260:	00c00044 	movi	r3,1
  808264:	10c03215 	stw	r3,200(r2)
  808268:	00000206 	br	808274 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  80826c:	00bffb44 	movi	r2,-19
  808270:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  808274:	e0bfff17 	ldw	r2,-4(fp)
  808278:	10800e17 	ldw	r2,56(r2)
  80827c:	1007883a 	mov	r3,r2
  808280:	e0bfff17 	ldw	r2,-4(fp)
  808284:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  808288:	e0bfff17 	ldw	r2,-4(fp)
  80828c:	00c00044 	movi	r3,1
  808290:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  808294:	e0bfff17 	ldw	r2,-4(fp)
  808298:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  80829c:	e0bfff17 	ldw	r2,-4(fp)
  8082a0:	00c04004 	movi	r3,256
  8082a4:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  8082a8:	e0bffe17 	ldw	r2,-8(fp)
}
  8082ac:	e037883a 	mov	sp,fp
  8082b0:	dfc00117 	ldw	ra,4(sp)
  8082b4:	df000017 	ldw	fp,0(sp)
  8082b8:	dec00204 	addi	sp,sp,8
  8082bc:	f800283a 	ret

008082c0 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  8082c0:	deffee04 	addi	sp,sp,-72
  8082c4:	dfc01115 	stw	ra,68(sp)
  8082c8:	df001015 	stw	fp,64(sp)
  8082cc:	df001004 	addi	fp,sp,64
  8082d0:	e13ffc15 	stw	r4,-16(fp)
  8082d4:	e17ffd15 	stw	r5,-12(fp)
  8082d8:	e1bffe15 	stw	r6,-8(fp)
  8082dc:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  8082e0:	00800804 	movi	r2,32
  8082e4:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  8082e8:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  8082ec:	00002706 	br	80838c <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  8082f0:	e0fff117 	ldw	r3,-60(fp)
  8082f4:	e0bfff17 	ldw	r2,-4(fp)
  8082f8:	1880012e 	bgeu	r3,r2,808300 <alt_epcs_flash_memcmp+0x40>
  8082fc:	1805883a 	mov	r2,r3
  808300:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  808304:	e0fffe17 	ldw	r3,-8(fp)
  808308:	e0bff017 	ldw	r2,-64(fp)
  80830c:	1885883a 	add	r2,r3,r2
  808310:	e0fff404 	addi	r3,fp,-48
  808314:	e1fff217 	ldw	r7,-56(fp)
  808318:	180d883a 	mov	r6,r3
  80831c:	100b883a 	mov	r5,r2
  808320:	e13ffc17 	ldw	r4,-16(fp)
  808324:	08088a40 	call	8088a4 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  808328:	1000020e 	bge	r2,zero,808334 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  80832c:	00bfffc4 	movi	r2,-1
  808330:	00001906 	br	808398 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  808334:	e0bff017 	ldw	r2,-64(fp)
  808338:	e0fffd17 	ldw	r3,-12(fp)
  80833c:	1885883a 	add	r2,r3,r2
  808340:	e13ff217 	ldw	r4,-56(fp)
  808344:	e0fff404 	addi	r3,fp,-48
  808348:	200d883a 	mov	r6,r4
  80834c:	180b883a 	mov	r5,r3
  808350:	1009883a 	mov	r4,r2
  808354:	080bf4c0 	call	80bf4c <memcmp>
  808358:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  80835c:	e0bff317 	ldw	r2,-52(fp)
  808360:	10000226 	beq	r2,zero,80836c <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  808364:	e0bff317 	ldw	r2,-52(fp)
  808368:	00000b06 	br	808398 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  80836c:	e0bff217 	ldw	r2,-56(fp)
  808370:	e0ffff17 	ldw	r3,-4(fp)
  808374:	1885c83a 	sub	r2,r3,r2
  808378:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  80837c:	e0fff017 	ldw	r3,-64(fp)
  808380:	e0bff217 	ldw	r2,-56(fp)
  808384:	1885883a 	add	r2,r3,r2
  808388:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  80838c:	e0bfff17 	ldw	r2,-4(fp)
  808390:	103fd71e 	bne	r2,zero,8082f0 <__alt_mem_epcs_flash_controller_0+0xff7ff2f0>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  808394:	0005883a 	mov	r2,zero
}
  808398:	e037883a 	mov	sp,fp
  80839c:	dfc00117 	ldw	ra,4(sp)
  8083a0:	df000017 	ldw	fp,0(sp)
  8083a4:	dec00204 	addi	sp,sp,8
  8083a8:	f800283a 	ret

008083ac <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  8083ac:	defff404 	addi	sp,sp,-48
  8083b0:	dfc00b15 	stw	ra,44(sp)
  8083b4:	df000a15 	stw	fp,40(sp)
  8083b8:	df000a04 	addi	fp,sp,40
  8083bc:	e13ffc15 	stw	r4,-16(fp)
  8083c0:	e17ffd15 	stw	r5,-12(fp)
  8083c4:	e1bffe15 	stw	r6,-8(fp)
  8083c8:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  8083cc:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  8083d0:	e03ff815 	stw	zero,-32(fp)
  8083d4:	00008306 	br	8085e4 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  8083d8:	e0fffc17 	ldw	r3,-16(fp)
  8083dc:	e0bff817 	ldw	r2,-32(fp)
  8083e0:	1004913a 	slli	r2,r2,4
  8083e4:	1885883a 	add	r2,r3,r2
  8083e8:	10800d04 	addi	r2,r2,52
  8083ec:	10800017 	ldw	r2,0(r2)
  8083f0:	e0fffd17 	ldw	r3,-12(fp)
  8083f4:	18807816 	blt	r3,r2,8085d8 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  8083f8:	e0fffc17 	ldw	r3,-16(fp)
  8083fc:	e0bff817 	ldw	r2,-32(fp)
  808400:	1004913a 	slli	r2,r2,4
  808404:	1885883a 	add	r2,r3,r2
  808408:	10800d04 	addi	r2,r2,52
  80840c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  808410:	e13ffc17 	ldw	r4,-16(fp)
  808414:	e0bff817 	ldw	r2,-32(fp)
  808418:	1004913a 	slli	r2,r2,4
  80841c:	2085883a 	add	r2,r4,r2
  808420:	10800e04 	addi	r2,r2,56
  808424:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  808428:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  80842c:	e0fffd17 	ldw	r3,-12(fp)
  808430:	1880690e 	bge	r3,r2,8085d8 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  808434:	e0fffc17 	ldw	r3,-16(fp)
  808438:	e0bff817 	ldw	r2,-32(fp)
  80843c:	1004913a 	slli	r2,r2,4
  808440:	1885883a 	add	r2,r3,r2
  808444:	10800d04 	addi	r2,r2,52
  808448:	10800017 	ldw	r2,0(r2)
  80844c:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  808450:	e03ff915 	stw	zero,-28(fp)
  808454:	00005806 	br	8085b8 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  808458:	e0fffd17 	ldw	r3,-12(fp)
  80845c:	e0bffa17 	ldw	r2,-24(fp)
  808460:	18804916 	blt	r3,r2,808588 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  808464:	e0fffc17 	ldw	r3,-16(fp)
  808468:	e0bff817 	ldw	r2,-32(fp)
  80846c:	10800104 	addi	r2,r2,4
  808470:	1004913a 	slli	r2,r2,4
  808474:	1885883a 	add	r2,r3,r2
  808478:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  80847c:	e0bffa17 	ldw	r2,-24(fp)
  808480:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  808484:	e0fffd17 	ldw	r3,-12(fp)
  808488:	18803f0e 	bge	r3,r2,808588 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  80848c:	e0fffc17 	ldw	r3,-16(fp)
  808490:	e0bff817 	ldw	r2,-32(fp)
  808494:	10800104 	addi	r2,r2,4
  808498:	1004913a 	slli	r2,r2,4
  80849c:	1885883a 	add	r2,r3,r2
  8084a0:	10c00017 	ldw	r3,0(r2)
  8084a4:	e0bffa17 	ldw	r2,-24(fp)
  8084a8:	1887883a 	add	r3,r3,r2
  8084ac:	e0bffd17 	ldw	r2,-12(fp)
  8084b0:	1885c83a 	sub	r2,r3,r2
  8084b4:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  8084b8:	e0fffb17 	ldw	r3,-20(fp)
  8084bc:	e0bfff17 	ldw	r2,-4(fp)
  8084c0:	1880010e 	bge	r3,r2,8084c8 <alt_epcs_flash_write+0x11c>
  8084c4:	1805883a 	mov	r2,r3
  8084c8:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  8084cc:	e0bffb17 	ldw	r2,-20(fp)
  8084d0:	100f883a 	mov	r7,r2
  8084d4:	e1bffd17 	ldw	r6,-12(fp)
  8084d8:	e17ffe17 	ldw	r5,-8(fp)
  8084dc:	e13ffc17 	ldw	r4,-16(fp)
  8084e0:	08082c00 	call	8082c0 <alt_epcs_flash_memcmp>
  8084e4:	10001226 	beq	r2,zero,808530 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  8084e8:	e0bffc17 	ldw	r2,-16(fp)
  8084ec:	10800817 	ldw	r2,32(r2)
  8084f0:	e17ffa17 	ldw	r5,-24(fp)
  8084f4:	e13ffc17 	ldw	r4,-16(fp)
  8084f8:	103ee83a 	callr	r2
  8084fc:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  808500:	e0bff717 	ldw	r2,-36(fp)
  808504:	10000a1e 	bne	r2,zero,808530 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  808508:	e0bffc17 	ldw	r2,-16(fp)
  80850c:	10800917 	ldw	r2,36(r2)
  808510:	e0fffb17 	ldw	r3,-20(fp)
  808514:	d8c00015 	stw	r3,0(sp)
  808518:	e1fffe17 	ldw	r7,-8(fp)
  80851c:	e1bffd17 	ldw	r6,-12(fp)
  808520:	e17ffa17 	ldw	r5,-24(fp)
  808524:	e13ffc17 	ldw	r4,-16(fp)
  808528:	103ee83a 	callr	r2
  80852c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  808530:	e0ffff17 	ldw	r3,-4(fp)
  808534:	e0bffb17 	ldw	r2,-20(fp)
  808538:	18802e26 	beq	r3,r2,8085f4 <alt_epcs_flash_write+0x248>
  80853c:	e0bff717 	ldw	r2,-36(fp)
  808540:	10002c1e 	bne	r2,zero,8085f4 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  808544:	e0ffff17 	ldw	r3,-4(fp)
  808548:	e0bffb17 	ldw	r2,-20(fp)
  80854c:	1885c83a 	sub	r2,r3,r2
  808550:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  808554:	e0fffc17 	ldw	r3,-16(fp)
  808558:	e0bff817 	ldw	r2,-32(fp)
  80855c:	10800104 	addi	r2,r2,4
  808560:	1004913a 	slli	r2,r2,4
  808564:	1885883a 	add	r2,r3,r2
  808568:	10c00017 	ldw	r3,0(r2)
  80856c:	e0bffa17 	ldw	r2,-24(fp)
  808570:	1885883a 	add	r2,r3,r2
  808574:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  808578:	e0bffb17 	ldw	r2,-20(fp)
  80857c:	e0fffe17 	ldw	r3,-8(fp)
  808580:	1885883a 	add	r2,r3,r2
  808584:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  808588:	e0fffc17 	ldw	r3,-16(fp)
  80858c:	e0bff817 	ldw	r2,-32(fp)
  808590:	10800104 	addi	r2,r2,4
  808594:	1004913a 	slli	r2,r2,4
  808598:	1885883a 	add	r2,r3,r2
  80859c:	10800017 	ldw	r2,0(r2)
  8085a0:	e0fffa17 	ldw	r3,-24(fp)
  8085a4:	1885883a 	add	r2,r3,r2
  8085a8:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  8085ac:	e0bff917 	ldw	r2,-28(fp)
  8085b0:	10800044 	addi	r2,r2,1
  8085b4:	e0bff915 	stw	r2,-28(fp)
  8085b8:	e0fffc17 	ldw	r3,-16(fp)
  8085bc:	e0bff817 	ldw	r2,-32(fp)
  8085c0:	1004913a 	slli	r2,r2,4
  8085c4:	1885883a 	add	r2,r3,r2
  8085c8:	10800f04 	addi	r2,r2,60
  8085cc:	10800017 	ldw	r2,0(r2)
  8085d0:	e0fff917 	ldw	r3,-28(fp)
  8085d4:	18bfa016 	blt	r3,r2,808458 <__alt_mem_epcs_flash_controller_0+0xff7ff458>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  8085d8:	e0bff817 	ldw	r2,-32(fp)
  8085dc:	10800044 	addi	r2,r2,1
  8085e0:	e0bff815 	stw	r2,-32(fp)
  8085e4:	e0bffc17 	ldw	r2,-16(fp)
  8085e8:	10800c17 	ldw	r2,48(r2)
  8085ec:	e0fff817 	ldw	r3,-32(fp)
  8085f0:	18bf7916 	blt	r3,r2,8083d8 <__alt_mem_epcs_flash_controller_0+0xff7ff3d8>
      }
    }
  }

finished:
  return ret_code;
  8085f4:	e0bff717 	ldw	r2,-36(fp)
}
  8085f8:	e037883a 	mov	sp,fp
  8085fc:	dfc00117 	ldw	ra,4(sp)
  808600:	df000017 	ldw	fp,0(sp)
  808604:	dec00204 	addi	sp,sp,8
  808608:	f800283a 	ret

0080860c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  80860c:	defffa04 	addi	sp,sp,-24
  808610:	df000515 	stw	fp,20(sp)
  808614:	df000504 	addi	fp,sp,20
  808618:	e13ffd15 	stw	r4,-12(fp)
  80861c:	e17ffe15 	stw	r5,-8(fp)
  808620:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  808624:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  808628:	e0bffd17 	ldw	r2,-12(fp)
  80862c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  808630:	e0bffc17 	ldw	r2,-16(fp)
  808634:	10c00c17 	ldw	r3,48(r2)
  808638:	e0bfff17 	ldw	r2,-4(fp)
  80863c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  808640:	e0bffc17 	ldw	r2,-16(fp)
  808644:	10800c17 	ldw	r2,48(r2)
  808648:	1000031e 	bne	r2,zero,808658 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  80864c:	00bffec4 	movi	r2,-5
  808650:	e0bffb15 	stw	r2,-20(fp)
  808654:	00000b06 	br	808684 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  808658:	e0bffc17 	ldw	r2,-16(fp)
  80865c:	10800c17 	ldw	r2,48(r2)
  808660:	10800250 	cmplti	r2,r2,9
  808664:	1000031e 	bne	r2,zero,808674 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  808668:	00bffd04 	movi	r2,-12
  80866c:	e0bffb15 	stw	r2,-20(fp)
  808670:	00000406 	br	808684 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  808674:	e0bffc17 	ldw	r2,-16(fp)
  808678:	10c00d04 	addi	r3,r2,52
  80867c:	e0bffe17 	ldw	r2,-8(fp)
  808680:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  808684:	e0bffb17 	ldw	r2,-20(fp)
}
  808688:	e037883a 	mov	sp,fp
  80868c:	df000017 	ldw	fp,0(sp)
  808690:	dec00104 	addi	sp,sp,4
  808694:	f800283a 	ret

00808698 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  808698:	defff904 	addi	sp,sp,-28
  80869c:	df000615 	stw	fp,24(sp)
  8086a0:	df000604 	addi	fp,sp,24
  8086a4:	e13ffe15 	stw	r4,-8(fp)
  8086a8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  8086ac:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  8086b0:	e0bffe17 	ldw	r2,-8(fp)
  8086b4:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  8086b8:	e0bffb17 	ldw	r2,-20(fp)
  8086bc:	10800c17 	ldw	r2,48(r2)
  8086c0:	10bfffc4 	addi	r2,r2,-1
  8086c4:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  8086c8:	e0fffb17 	ldw	r3,-20(fp)
  8086cc:	e0bffc17 	ldw	r2,-16(fp)
  8086d0:	1004913a 	slli	r2,r2,4
  8086d4:	1885883a 	add	r2,r3,r2
  8086d8:	10800d04 	addi	r2,r2,52
  8086dc:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  8086e0:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  8086e4:	e13ffb17 	ldw	r4,-20(fp)
  8086e8:	e0bffc17 	ldw	r2,-16(fp)
  8086ec:	1004913a 	slli	r2,r2,4
  8086f0:	2085883a 	add	r2,r4,r2
  8086f4:	10800e04 	addi	r2,r2,56
  8086f8:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  8086fc:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  808700:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  808704:	e0bfff17 	ldw	r2,-4(fp)
  808708:	e0fffd17 	ldw	r3,-12(fp)
  80870c:	1880022e 	bgeu	r3,r2,808718 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  808710:	00bffec4 	movi	r2,-5
  808714:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  808718:	e0bffa17 	ldw	r2,-24(fp)
}
  80871c:	e037883a 	mov	sp,fp
  808720:	df000017 	ldw	fp,0(sp)
  808724:	dec00104 	addi	sp,sp,4
  808728:	f800283a 	ret

0080872c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  80872c:	defffa04 	addi	sp,sp,-24
  808730:	dfc00515 	stw	ra,20(sp)
  808734:	df000415 	stw	fp,16(sp)
  808738:	df000404 	addi	fp,sp,16
  80873c:	e13ffe15 	stw	r4,-8(fp)
  808740:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  808744:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  808748:	e0bffe17 	ldw	r2,-8(fp)
  80874c:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  808750:	e17fff17 	ldw	r5,-4(fp)
  808754:	e13ffe17 	ldw	r4,-8(fp)
  808758:	08086980 	call	808698 <alt_epcs_test_address>
  80875c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  808760:	e0bffc17 	ldw	r2,-16(fp)
  808764:	10000916 	blt	r2,zero,80878c <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  808768:	e0bffd17 	ldw	r2,-12(fp)
  80876c:	10c02e17 	ldw	r3,184(r2)
  808770:	e13fff17 	ldw	r4,-4(fp)
  808774:	e0bffd17 	ldw	r2,-12(fp)
  808778:	10803217 	ldw	r2,200(r2)
  80877c:	100d883a 	mov	r6,r2
  808780:	200b883a 	mov	r5,r4
  808784:	1809883a 	mov	r4,r3
  808788:	080a3800 	call	80a380 <epcs_sector_erase>
  }
  return ret_code;
  80878c:	e0bffc17 	ldw	r2,-16(fp)
}
  808790:	e037883a 	mov	sp,fp
  808794:	dfc00117 	ldw	ra,4(sp)
  808798:	df000017 	ldw	fp,0(sp)
  80879c:	dec00204 	addi	sp,sp,8
  8087a0:	f800283a 	ret

008087a4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  8087a4:	defff404 	addi	sp,sp,-48
  8087a8:	dfc00b15 	stw	ra,44(sp)
  8087ac:	df000a15 	stw	fp,40(sp)
  8087b0:	df000a04 	addi	fp,sp,40
  8087b4:	e13ffc15 	stw	r4,-16(fp)
  8087b8:	e17ffd15 	stw	r5,-12(fp)
  8087bc:	e1bffe15 	stw	r6,-8(fp)
  8087c0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  8087c4:	e0bffc17 	ldw	r2,-16(fp)
  8087c8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  8087cc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  8087d0:	e17ffe17 	ldw	r5,-8(fp)
  8087d4:	e13ffc17 	ldw	r4,-16(fp)
  8087d8:	08086980 	call	808698 <alt_epcs_test_address>
  8087dc:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  8087e0:	e0bff917 	ldw	r2,-28(fp)
  8087e4:	10002916 	blt	r2,zero,80888c <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  8087e8:	00002606 	br	808884 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  8087ec:	e0bff817 	ldw	r2,-32(fp)
  8087f0:	10c03117 	ldw	r3,196(r2)
  8087f4:	e0bffe17 	ldw	r2,-8(fp)
  8087f8:	1887883a 	add	r3,r3,r2
  8087fc:	e0bff817 	ldw	r2,-32(fp)
  808800:	10803117 	ldw	r2,196(r2)
  808804:	0085c83a 	sub	r2,zero,r2
  808808:	1884703a 	and	r2,r3,r2
  80880c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  808810:	e0fffa17 	ldw	r3,-24(fp)
  808814:	e0bffe17 	ldw	r2,-8(fp)
  808818:	1885c83a 	sub	r2,r3,r2
  80881c:	e0c00217 	ldw	r3,8(fp)
  808820:	1880010e 	bge	r3,r2,808828 <alt_epcs_flash_write_block+0x84>
  808824:	1805883a 	mov	r2,r3
  808828:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  80882c:	e0bff817 	ldw	r2,-32(fp)
  808830:	11002e17 	ldw	r4,184(r2)
  808834:	e0bff717 	ldw	r2,-36(fp)
  808838:	e0ffff17 	ldw	r3,-4(fp)
  80883c:	1887883a 	add	r3,r3,r2
  808840:	e0bff817 	ldw	r2,-32(fp)
  808844:	10803217 	ldw	r2,200(r2)
  808848:	d8800015 	stw	r2,0(sp)
  80884c:	e1fffb17 	ldw	r7,-20(fp)
  808850:	180d883a 	mov	r6,r3
  808854:	e17ffe17 	ldw	r5,-8(fp)
  808858:	080a6300 	call	80a630 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  80885c:	e0c00217 	ldw	r3,8(fp)
  808860:	e0bffb17 	ldw	r2,-20(fp)
  808864:	1885c83a 	sub	r2,r3,r2
  808868:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  80886c:	e0fff717 	ldw	r3,-36(fp)
  808870:	e0bffb17 	ldw	r2,-20(fp)
  808874:	1885883a 	add	r2,r3,r2
  808878:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  80887c:	e0bffa17 	ldw	r2,-24(fp)
  808880:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  808884:	e0800217 	ldw	r2,8(fp)
  808888:	103fd81e 	bne	r2,zero,8087ec <__alt_mem_epcs_flash_controller_0+0xff7ff7ec>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  80888c:	e0bff917 	ldw	r2,-28(fp)
}
  808890:	e037883a 	mov	sp,fp
  808894:	dfc00117 	ldw	ra,4(sp)
  808898:	df000017 	ldw	fp,0(sp)
  80889c:	dec00204 	addi	sp,sp,8
  8088a0:	f800283a 	ret

008088a4 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  8088a4:	defff704 	addi	sp,sp,-36
  8088a8:	dfc00815 	stw	ra,32(sp)
  8088ac:	df000715 	stw	fp,28(sp)
  8088b0:	df000704 	addi	fp,sp,28
  8088b4:	e13ffc15 	stw	r4,-16(fp)
  8088b8:	e17ffd15 	stw	r5,-12(fp)
  8088bc:	e1bffe15 	stw	r6,-8(fp)
  8088c0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  8088c4:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  8088c8:	e0bffc17 	ldw	r2,-16(fp)
  8088cc:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  8088d0:	e17ffd17 	ldw	r5,-12(fp)
  8088d4:	e13ffc17 	ldw	r4,-16(fp)
  8088d8:	08086980 	call	808698 <alt_epcs_test_address>
  8088dc:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  8088e0:	e0bffa17 	ldw	r2,-24(fp)
  8088e4:	10000f16 	blt	r2,zero,808924 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  8088e8:	e0bffb17 	ldw	r2,-20(fp)
  8088ec:	10c02e17 	ldw	r3,184(r2)
  8088f0:	e0bffb17 	ldw	r2,-20(fp)
  8088f4:	10803217 	ldw	r2,200(r2)
  8088f8:	d8800015 	stw	r2,0(sp)
  8088fc:	e1ffff17 	ldw	r7,-4(fp)
  808900:	e1bffe17 	ldw	r6,-8(fp)
  808904:	e17ffd17 	ldw	r5,-12(fp)
  808908:	1809883a 	mov	r4,r3
  80890c:	080a47c0 	call	80a47c <epcs_read_buffer>
  808910:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  808914:	e0fffa17 	ldw	r3,-24(fp)
  808918:	e0bfff17 	ldw	r2,-4(fp)
  80891c:	1880011e 	bne	r3,r2,808924 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  808920:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  808924:	e0bffa17 	ldw	r2,-24(fp)
}
  808928:	e037883a 	mov	sp,fp
  80892c:	dfc00117 	ldw	ra,4(sp)
  808930:	df000017 	ldw	fp,0(sp)
  808934:	dec00204 	addi	sp,sp,8
  808938:	f800283a 	ret

0080893c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80893c:	defffa04 	addi	sp,sp,-24
  808940:	dfc00515 	stw	ra,20(sp)
  808944:	df000415 	stw	fp,16(sp)
  808948:	df000404 	addi	fp,sp,16
  80894c:	e13ffd15 	stw	r4,-12(fp)
  808950:	e17ffe15 	stw	r5,-8(fp)
  808954:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  808958:	e0bffd17 	ldw	r2,-12(fp)
  80895c:	10800017 	ldw	r2,0(r2)
  808960:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  808964:	e0bffc17 	ldw	r2,-16(fp)
  808968:	10c00a04 	addi	r3,r2,40
  80896c:	e0bffd17 	ldw	r2,-12(fp)
  808970:	10800217 	ldw	r2,8(r2)
  808974:	100f883a 	mov	r7,r2
  808978:	e1bfff17 	ldw	r6,-4(fp)
  80897c:	e17ffe17 	ldw	r5,-8(fp)
  808980:	1809883a 	mov	r4,r3
  808984:	08090e80 	call	8090e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  808988:	e037883a 	mov	sp,fp
  80898c:	dfc00117 	ldw	ra,4(sp)
  808990:	df000017 	ldw	fp,0(sp)
  808994:	dec00204 	addi	sp,sp,8
  808998:	f800283a 	ret

0080899c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80899c:	defffa04 	addi	sp,sp,-24
  8089a0:	dfc00515 	stw	ra,20(sp)
  8089a4:	df000415 	stw	fp,16(sp)
  8089a8:	df000404 	addi	fp,sp,16
  8089ac:	e13ffd15 	stw	r4,-12(fp)
  8089b0:	e17ffe15 	stw	r5,-8(fp)
  8089b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8089b8:	e0bffd17 	ldw	r2,-12(fp)
  8089bc:	10800017 	ldw	r2,0(r2)
  8089c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8089c4:	e0bffc17 	ldw	r2,-16(fp)
  8089c8:	10c00a04 	addi	r3,r2,40
  8089cc:	e0bffd17 	ldw	r2,-12(fp)
  8089d0:	10800217 	ldw	r2,8(r2)
  8089d4:	100f883a 	mov	r7,r2
  8089d8:	e1bfff17 	ldw	r6,-4(fp)
  8089dc:	e17ffe17 	ldw	r5,-8(fp)
  8089e0:	1809883a 	mov	r4,r3
  8089e4:	08093a40 	call	8093a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8089e8:	e037883a 	mov	sp,fp
  8089ec:	dfc00117 	ldw	ra,4(sp)
  8089f0:	df000017 	ldw	fp,0(sp)
  8089f4:	dec00204 	addi	sp,sp,8
  8089f8:	f800283a 	ret

008089fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8089fc:	defffc04 	addi	sp,sp,-16
  808a00:	dfc00315 	stw	ra,12(sp)
  808a04:	df000215 	stw	fp,8(sp)
  808a08:	df000204 	addi	fp,sp,8
  808a0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  808a10:	e0bfff17 	ldw	r2,-4(fp)
  808a14:	10800017 	ldw	r2,0(r2)
  808a18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  808a1c:	e0bffe17 	ldw	r2,-8(fp)
  808a20:	10c00a04 	addi	r3,r2,40
  808a24:	e0bfff17 	ldw	r2,-4(fp)
  808a28:	10800217 	ldw	r2,8(r2)
  808a2c:	100b883a 	mov	r5,r2
  808a30:	1809883a 	mov	r4,r3
  808a34:	0808f900 	call	808f90 <altera_avalon_jtag_uart_close>
}
  808a38:	e037883a 	mov	sp,fp
  808a3c:	dfc00117 	ldw	ra,4(sp)
  808a40:	df000017 	ldw	fp,0(sp)
  808a44:	dec00204 	addi	sp,sp,8
  808a48:	f800283a 	ret

00808a4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  808a4c:	defffa04 	addi	sp,sp,-24
  808a50:	dfc00515 	stw	ra,20(sp)
  808a54:	df000415 	stw	fp,16(sp)
  808a58:	df000404 	addi	fp,sp,16
  808a5c:	e13ffd15 	stw	r4,-12(fp)
  808a60:	e17ffe15 	stw	r5,-8(fp)
  808a64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  808a68:	e0bffd17 	ldw	r2,-12(fp)
  808a6c:	10800017 	ldw	r2,0(r2)
  808a70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  808a74:	e0bffc17 	ldw	r2,-16(fp)
  808a78:	10800a04 	addi	r2,r2,40
  808a7c:	e1bfff17 	ldw	r6,-4(fp)
  808a80:	e17ffe17 	ldw	r5,-8(fp)
  808a84:	1009883a 	mov	r4,r2
  808a88:	0808ff80 	call	808ff8 <altera_avalon_jtag_uart_ioctl>
}
  808a8c:	e037883a 	mov	sp,fp
  808a90:	dfc00117 	ldw	ra,4(sp)
  808a94:	df000017 	ldw	fp,0(sp)
  808a98:	dec00204 	addi	sp,sp,8
  808a9c:	f800283a 	ret

00808aa0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  808aa0:	defff104 	addi	sp,sp,-60
  808aa4:	dfc00e15 	stw	ra,56(sp)
  808aa8:	df000d15 	stw	fp,52(sp)
  808aac:	df000d04 	addi	fp,sp,52
  808ab0:	e13ff915 	stw	r4,-28(fp)
  808ab4:	e17ffa15 	stw	r5,-24(fp)
  808ab8:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  808abc:	e0bff917 	ldw	r2,-28(fp)
  808ac0:	10800c04 	addi	r2,r2,48
  808ac4:	e0bff415 	stw	r2,-48(fp)
  808ac8:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  808acc:	e0bff80b 	ldhu	r2,-32(fp)
  808ad0:	e0fff884 	addi	r3,fp,-30
  808ad4:	180b883a 	mov	r5,r3
  808ad8:	1009883a 	mov	r4,r2
  808adc:	08029d80 	call	8029d8 <OSFlagCreate>
  808ae0:	1007883a 	mov	r3,r2
  808ae4:	e0bff417 	ldw	r2,-48(fp)
  808ae8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  808aec:	e0bff917 	ldw	r2,-28(fp)
  808af0:	10800a04 	addi	r2,r2,40
  808af4:	e0bff515 	stw	r2,-44(fp)
  808af8:	00800044 	movi	r2,1
  808afc:	e0bff78d 	sth	r2,-34(fp)
  808b00:	e0bff78b 	ldhu	r2,-34(fp)
  808b04:	1009883a 	mov	r4,r2
  808b08:	08056f80 	call	8056f8 <OSSemCreate>
  808b0c:	1007883a 	mov	r3,r2
  808b10:	e0bff517 	ldw	r2,-44(fp)
  808b14:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  808b18:	e0bff917 	ldw	r2,-28(fp)
  808b1c:	10800b04 	addi	r2,r2,44
  808b20:	e0bff615 	stw	r2,-40(fp)
  808b24:	00800044 	movi	r2,1
  808b28:	e0bff70d 	sth	r2,-36(fp)
  808b2c:	e0bff70b 	ldhu	r2,-36(fp)
  808b30:	1009883a 	mov	r4,r2
  808b34:	08056f80 	call	8056f8 <OSSemCreate>
  808b38:	1007883a 	mov	r3,r2
  808b3c:	e0bff617 	ldw	r2,-40(fp)
  808b40:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  808b44:	e0bff917 	ldw	r2,-28(fp)
  808b48:	00c00044 	movi	r3,1
  808b4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  808b50:	e0bff917 	ldw	r2,-28(fp)
  808b54:	10800017 	ldw	r2,0(r2)
  808b58:	10800104 	addi	r2,r2,4
  808b5c:	1007883a 	mov	r3,r2
  808b60:	e0bff917 	ldw	r2,-28(fp)
  808b64:	10800817 	ldw	r2,32(r2)
  808b68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  808b6c:	e0bffa17 	ldw	r2,-24(fp)
  808b70:	e0fffb17 	ldw	r3,-20(fp)
  808b74:	d8000015 	stw	zero,0(sp)
  808b78:	e1fff917 	ldw	r7,-28(fp)
  808b7c:	01802074 	movhi	r6,129
  808b80:	31a2fa04 	addi	r6,r6,-29720
  808b84:	180b883a 	mov	r5,r3
  808b88:	1009883a 	mov	r4,r2
  808b8c:	080adb40 	call	80adb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  808b90:	e0bff917 	ldw	r2,-28(fp)
  808b94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  808b98:	e0bff917 	ldw	r2,-28(fp)
  808b9c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  808ba0:	d0e04917 	ldw	r3,-32476(gp)
  808ba4:	e1fff917 	ldw	r7,-28(fp)
  808ba8:	01802074 	movhi	r6,129
  808bac:	31a3a304 	addi	r6,r6,-29044
  808bb0:	180b883a 	mov	r5,r3
  808bb4:	1009883a 	mov	r4,r2
  808bb8:	080a8ec0 	call	80a8ec <alt_alarm_start>
  808bbc:	1000040e 	bge	r2,zero,808bd0 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  808bc0:	e0fff917 	ldw	r3,-28(fp)
  808bc4:	00a00034 	movhi	r2,32768
  808bc8:	10bfffc4 	addi	r2,r2,-1
  808bcc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  808bd0:	0001883a 	nop
  808bd4:	e037883a 	mov	sp,fp
  808bd8:	dfc00117 	ldw	ra,4(sp)
  808bdc:	df000017 	ldw	fp,0(sp)
  808be0:	dec00204 	addi	sp,sp,8
  808be4:	f800283a 	ret

00808be8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  808be8:	defff204 	addi	sp,sp,-56
  808bec:	dfc00d15 	stw	ra,52(sp)
  808bf0:	df000c15 	stw	fp,48(sp)
  808bf4:	df000c04 	addi	fp,sp,48
  808bf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  808bfc:	e0bfff17 	ldw	r2,-4(fp)
  808c00:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  808c04:	e0bff617 	ldw	r2,-40(fp)
  808c08:	10800017 	ldw	r2,0(r2)
  808c0c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  808c10:	e0bff717 	ldw	r2,-36(fp)
  808c14:	10800104 	addi	r2,r2,4
  808c18:	10800037 	ldwio	r2,0(r2)
  808c1c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  808c20:	e0bff817 	ldw	r2,-32(fp)
  808c24:	1080c00c 	andi	r2,r2,768
  808c28:	10009126 	beq	r2,zero,808e70 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  808c2c:	e0bff817 	ldw	r2,-32(fp)
  808c30:	1080400c 	andi	r2,r2,256
  808c34:	10004726 	beq	r2,zero,808d54 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  808c38:	00800074 	movhi	r2,1
  808c3c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808c40:	e0bff617 	ldw	r2,-40(fp)
  808c44:	10800d17 	ldw	r2,52(r2)
  808c48:	10800044 	addi	r2,r2,1
  808c4c:	1081ffcc 	andi	r2,r2,2047
  808c50:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  808c54:	e0bff617 	ldw	r2,-40(fp)
  808c58:	10c00e17 	ldw	r3,56(r2)
  808c5c:	e0bff917 	ldw	r2,-28(fp)
  808c60:	18802726 	beq	r3,r2,808d00 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  808c64:	e0bff717 	ldw	r2,-36(fp)
  808c68:	10800037 	ldwio	r2,0(r2)
  808c6c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  808c70:	e0bff417 	ldw	r2,-48(fp)
  808c74:	10a0000c 	andi	r2,r2,32768
  808c78:	10002326 	beq	r2,zero,808d08 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  808c7c:	e0bff617 	ldw	r2,-40(fp)
  808c80:	10800d17 	ldw	r2,52(r2)
  808c84:	e0fff417 	ldw	r3,-48(fp)
  808c88:	1809883a 	mov	r4,r3
  808c8c:	e0fff617 	ldw	r3,-40(fp)
  808c90:	1885883a 	add	r2,r3,r2
  808c94:	10801104 	addi	r2,r2,68
  808c98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808c9c:	e0bff617 	ldw	r2,-40(fp)
  808ca0:	10800d17 	ldw	r2,52(r2)
  808ca4:	10800044 	addi	r2,r2,1
  808ca8:	10c1ffcc 	andi	r3,r2,2047
  808cac:	e0bff617 	ldw	r2,-40(fp)
  808cb0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  808cb4:	e0bff617 	ldw	r2,-40(fp)
  808cb8:	10800c17 	ldw	r2,48(r2)
  808cbc:	e0bffb15 	stw	r2,-20(fp)
  808cc0:	00800044 	movi	r2,1
  808cc4:	e0bffc0d 	sth	r2,-16(fp)
  808cc8:	00800044 	movi	r2,1
  808ccc:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  808cd0:	d0a03343 	ldbu	r2,-32563(gp)
  808cd4:	10803fcc 	andi	r2,r2,255
  808cd8:	103fd926 	beq	r2,zero,808c40 <__alt_mem_epcs_flash_controller_0+0xff7ffc40>
  {
    OSFlagPost (group, flags, opt, &err);
  808cdc:	e0bffc0b 	ldhu	r2,-16(fp)
  808ce0:	e0fffc83 	ldbu	r3,-14(fp)
  808ce4:	e13ffdc4 	addi	r4,fp,-9
  808ce8:	200f883a 	mov	r7,r4
  808cec:	180d883a 	mov	r6,r3
  808cf0:	100b883a 	mov	r5,r2
  808cf4:	e13ffb17 	ldw	r4,-20(fp)
  808cf8:	08035b40 	call	8035b4 <OSFlagPost>
      }
  808cfc:	003fd006 	br	808c40 <__alt_mem_epcs_flash_controller_0+0xff7ffc40>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  808d00:	0001883a 	nop
  808d04:	00000106 	br	808d0c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  808d08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  808d0c:	e0bff417 	ldw	r2,-48(fp)
  808d10:	10bfffec 	andhi	r2,r2,65535
  808d14:	10000f26 	beq	r2,zero,808d54 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  808d18:	e0bff617 	ldw	r2,-40(fp)
  808d1c:	10c00817 	ldw	r3,32(r2)
  808d20:	00bfff84 	movi	r2,-2
  808d24:	1886703a 	and	r3,r3,r2
  808d28:	e0bff617 	ldw	r2,-40(fp)
  808d2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  808d30:	e0bff717 	ldw	r2,-36(fp)
  808d34:	10800104 	addi	r2,r2,4
  808d38:	1007883a 	mov	r3,r2
  808d3c:	e0bff617 	ldw	r2,-40(fp)
  808d40:	10800817 	ldw	r2,32(r2)
  808d44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  808d48:	e0bff717 	ldw	r2,-36(fp)
  808d4c:	10800104 	addi	r2,r2,4
  808d50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  808d54:	e0bff817 	ldw	r2,-32(fp)
  808d58:	1080800c 	andi	r2,r2,512
  808d5c:	103fac26 	beq	r2,zero,808c10 <__alt_mem_epcs_flash_controller_0+0xff7ffc10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  808d60:	e0bff817 	ldw	r2,-32(fp)
  808d64:	1004d43a 	srli	r2,r2,16
  808d68:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  808d6c:	00002606 	br	808e08 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  808d70:	e0bff717 	ldw	r2,-36(fp)
  808d74:	e0fff617 	ldw	r3,-40(fp)
  808d78:	18c01017 	ldw	r3,64(r3)
  808d7c:	e13ff617 	ldw	r4,-40(fp)
  808d80:	20c7883a 	add	r3,r4,r3
  808d84:	18c21104 	addi	r3,r3,2116
  808d88:	18c00003 	ldbu	r3,0(r3)
  808d8c:	18c03fcc 	andi	r3,r3,255
  808d90:	18c0201c 	xori	r3,r3,128
  808d94:	18ffe004 	addi	r3,r3,-128
  808d98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  808d9c:	e0bff617 	ldw	r2,-40(fp)
  808da0:	10801017 	ldw	r2,64(r2)
  808da4:	10800044 	addi	r2,r2,1
  808da8:	10c1ffcc 	andi	r3,r2,2047
  808dac:	e0bff617 	ldw	r2,-40(fp)
  808db0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  808db4:	e0bff617 	ldw	r2,-40(fp)
  808db8:	10800c17 	ldw	r2,48(r2)
  808dbc:	e0bffa15 	stw	r2,-24(fp)
  808dc0:	00800084 	movi	r2,2
  808dc4:	e0bffd0d 	sth	r2,-12(fp)
  808dc8:	00800044 	movi	r2,1
  808dcc:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  808dd0:	d0a03343 	ldbu	r2,-32563(gp)
  808dd4:	10803fcc 	andi	r2,r2,255
  808dd8:	10000826 	beq	r2,zero,808dfc <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  808ddc:	e0bffd0b 	ldhu	r2,-12(fp)
  808de0:	e0fffd83 	ldbu	r3,-10(fp)
  808de4:	e13ffe04 	addi	r4,fp,-8
  808de8:	200f883a 	mov	r7,r4
  808dec:	180d883a 	mov	r6,r3
  808df0:	100b883a 	mov	r5,r2
  808df4:	e13ffa17 	ldw	r4,-24(fp)
  808df8:	08035b40 	call	8035b4 <OSFlagPost>

        space--;
  808dfc:	e0bff517 	ldw	r2,-44(fp)
  808e00:	10bfffc4 	addi	r2,r2,-1
  808e04:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  808e08:	e0bff517 	ldw	r2,-44(fp)
  808e0c:	10000526 	beq	r2,zero,808e24 <altera_avalon_jtag_uart_irq+0x23c>
  808e10:	e0bff617 	ldw	r2,-40(fp)
  808e14:	10c01017 	ldw	r3,64(r2)
  808e18:	e0bff617 	ldw	r2,-40(fp)
  808e1c:	10800f17 	ldw	r2,60(r2)
  808e20:	18bfd31e 	bne	r3,r2,808d70 <__alt_mem_epcs_flash_controller_0+0xff7ffd70>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  808e24:	e0bff517 	ldw	r2,-44(fp)
  808e28:	103f7926 	beq	r2,zero,808c10 <__alt_mem_epcs_flash_controller_0+0xff7ffc10>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  808e2c:	e0bff617 	ldw	r2,-40(fp)
  808e30:	10c00817 	ldw	r3,32(r2)
  808e34:	00bfff44 	movi	r2,-3
  808e38:	1886703a 	and	r3,r3,r2
  808e3c:	e0bff617 	ldw	r2,-40(fp)
  808e40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  808e44:	e0bff617 	ldw	r2,-40(fp)
  808e48:	10800017 	ldw	r2,0(r2)
  808e4c:	10800104 	addi	r2,r2,4
  808e50:	1007883a 	mov	r3,r2
  808e54:	e0bff617 	ldw	r2,-40(fp)
  808e58:	10800817 	ldw	r2,32(r2)
  808e5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  808e60:	e0bff717 	ldw	r2,-36(fp)
  808e64:	10800104 	addi	r2,r2,4
  808e68:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  808e6c:	003f6806 	br	808c10 <__alt_mem_epcs_flash_controller_0+0xff7ffc10>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  808e70:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  808e74:	0001883a 	nop
  808e78:	e037883a 	mov	sp,fp
  808e7c:	dfc00117 	ldw	ra,4(sp)
  808e80:	df000017 	ldw	fp,0(sp)
  808e84:	dec00204 	addi	sp,sp,8
  808e88:	f800283a 	ret

00808e8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  808e8c:	defff904 	addi	sp,sp,-28
  808e90:	dfc00615 	stw	ra,24(sp)
  808e94:	df000515 	stw	fp,20(sp)
  808e98:	df000504 	addi	fp,sp,20
  808e9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  808ea0:	e0bfff17 	ldw	r2,-4(fp)
  808ea4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  808ea8:	e0bffb17 	ldw	r2,-20(fp)
  808eac:	10800017 	ldw	r2,0(r2)
  808eb0:	10800104 	addi	r2,r2,4
  808eb4:	10800037 	ldwio	r2,0(r2)
  808eb8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  808ebc:	e0bffc17 	ldw	r2,-16(fp)
  808ec0:	1081000c 	andi	r2,r2,1024
  808ec4:	10000b26 	beq	r2,zero,808ef4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  808ec8:	e0bffb17 	ldw	r2,-20(fp)
  808ecc:	10800017 	ldw	r2,0(r2)
  808ed0:	10800104 	addi	r2,r2,4
  808ed4:	1007883a 	mov	r3,r2
  808ed8:	e0bffb17 	ldw	r2,-20(fp)
  808edc:	10800817 	ldw	r2,32(r2)
  808ee0:	10810014 	ori	r2,r2,1024
  808ee4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  808ee8:	e0bffb17 	ldw	r2,-20(fp)
  808eec:	10000915 	stw	zero,36(r2)
  808ef0:	00002106 	br	808f78 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  808ef4:	e0bffb17 	ldw	r2,-20(fp)
  808ef8:	10c00917 	ldw	r3,36(r2)
  808efc:	00a00034 	movhi	r2,32768
  808f00:	10bfff04 	addi	r2,r2,-4
  808f04:	10c01c36 	bltu	r2,r3,808f78 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  808f08:	e0bffb17 	ldw	r2,-20(fp)
  808f0c:	10800917 	ldw	r2,36(r2)
  808f10:	10c00044 	addi	r3,r2,1
  808f14:	e0bffb17 	ldw	r2,-20(fp)
  808f18:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  808f1c:	e0bffb17 	ldw	r2,-20(fp)
  808f20:	10c00917 	ldw	r3,36(r2)
  808f24:	e0bffb17 	ldw	r2,-20(fp)
  808f28:	10800117 	ldw	r2,4(r2)
  808f2c:	18801236 	bltu	r3,r2,808f78 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  808f30:	e0bffb17 	ldw	r2,-20(fp)
  808f34:	10800c17 	ldw	r2,48(r2)
  808f38:	e0bffd15 	stw	r2,-12(fp)
  808f3c:	00800104 	movi	r2,4
  808f40:	e0bffe0d 	sth	r2,-8(fp)
  808f44:	00800044 	movi	r2,1
  808f48:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  808f4c:	d0a03343 	ldbu	r2,-32563(gp)
  808f50:	10803fcc 	andi	r2,r2,255
  808f54:	10000826 	beq	r2,zero,808f78 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  808f58:	e0bffe0b 	ldhu	r2,-8(fp)
  808f5c:	e0fffe83 	ldbu	r3,-6(fp)
  808f60:	e13ffec4 	addi	r4,fp,-5
  808f64:	200f883a 	mov	r7,r4
  808f68:	180d883a 	mov	r6,r3
  808f6c:	100b883a 	mov	r5,r2
  808f70:	e13ffd17 	ldw	r4,-12(fp)
  808f74:	08035b40 	call	8035b4 <OSFlagPost>
  808f78:	d0a04917 	ldw	r2,-32476(gp)
    }
  }

  return alt_ticks_per_second();
}
  808f7c:	e037883a 	mov	sp,fp
  808f80:	dfc00117 	ldw	ra,4(sp)
  808f84:	df000017 	ldw	fp,0(sp)
  808f88:	dec00204 	addi	sp,sp,8
  808f8c:	f800283a 	ret

00808f90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  808f90:	defffd04 	addi	sp,sp,-12
  808f94:	df000215 	stw	fp,8(sp)
  808f98:	df000204 	addi	fp,sp,8
  808f9c:	e13ffe15 	stw	r4,-8(fp)
  808fa0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  808fa4:	00000506 	br	808fbc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  808fa8:	e0bfff17 	ldw	r2,-4(fp)
  808fac:	1090000c 	andi	r2,r2,16384
  808fb0:	10000226 	beq	r2,zero,808fbc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  808fb4:	00bffd44 	movi	r2,-11
  808fb8:	00000b06 	br	808fe8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  808fbc:	e0bffe17 	ldw	r2,-8(fp)
  808fc0:	10c01017 	ldw	r3,64(r2)
  808fc4:	e0bffe17 	ldw	r2,-8(fp)
  808fc8:	10800f17 	ldw	r2,60(r2)
  808fcc:	18800526 	beq	r3,r2,808fe4 <altera_avalon_jtag_uart_close+0x54>
  808fd0:	e0bffe17 	ldw	r2,-8(fp)
  808fd4:	10c00917 	ldw	r3,36(r2)
  808fd8:	e0bffe17 	ldw	r2,-8(fp)
  808fdc:	10800117 	ldw	r2,4(r2)
  808fe0:	18bff136 	bltu	r3,r2,808fa8 <__alt_mem_epcs_flash_controller_0+0xff7fffa8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  808fe4:	0005883a 	mov	r2,zero
}
  808fe8:	e037883a 	mov	sp,fp
  808fec:	df000017 	ldw	fp,0(sp)
  808ff0:	dec00104 	addi	sp,sp,4
  808ff4:	f800283a 	ret

00808ff8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  808ff8:	defffa04 	addi	sp,sp,-24
  808ffc:	df000515 	stw	fp,20(sp)
  809000:	df000504 	addi	fp,sp,20
  809004:	e13ffd15 	stw	r4,-12(fp)
  809008:	e17ffe15 	stw	r5,-8(fp)
  80900c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  809010:	00bff9c4 	movi	r2,-25
  809014:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  809018:	e0bffe17 	ldw	r2,-8(fp)
  80901c:	10da8060 	cmpeqi	r3,r2,27137
  809020:	1800031e 	bne	r3,zero,809030 <altera_avalon_jtag_uart_ioctl+0x38>
  809024:	109a80a0 	cmpeqi	r2,r2,27138
  809028:	1000181e 	bne	r2,zero,80908c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80902c:	00002906 	br	8090d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  809030:	e0bffd17 	ldw	r2,-12(fp)
  809034:	10c00117 	ldw	r3,4(r2)
  809038:	00a00034 	movhi	r2,32768
  80903c:	10bfffc4 	addi	r2,r2,-1
  809040:	18802126 	beq	r3,r2,8090c8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  809044:	e0bfff17 	ldw	r2,-4(fp)
  809048:	10800017 	ldw	r2,0(r2)
  80904c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  809050:	e0bffc17 	ldw	r2,-16(fp)
  809054:	10800090 	cmplti	r2,r2,2
  809058:	1000061e 	bne	r2,zero,809074 <altera_avalon_jtag_uart_ioctl+0x7c>
  80905c:	e0fffc17 	ldw	r3,-16(fp)
  809060:	00a00034 	movhi	r2,32768
  809064:	10bfffc4 	addi	r2,r2,-1
  809068:	18800226 	beq	r3,r2,809074 <altera_avalon_jtag_uart_ioctl+0x7c>
  80906c:	e0bffc17 	ldw	r2,-16(fp)
  809070:	00000206 	br	80907c <altera_avalon_jtag_uart_ioctl+0x84>
  809074:	00a00034 	movhi	r2,32768
  809078:	10bfff84 	addi	r2,r2,-2
  80907c:	e0fffd17 	ldw	r3,-12(fp)
  809080:	18800115 	stw	r2,4(r3)
      rc = 0;
  809084:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  809088:	00000f06 	br	8090c8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80908c:	e0bffd17 	ldw	r2,-12(fp)
  809090:	10c00117 	ldw	r3,4(r2)
  809094:	00a00034 	movhi	r2,32768
  809098:	10bfffc4 	addi	r2,r2,-1
  80909c:	18800c26 	beq	r3,r2,8090d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8090a0:	e0bffd17 	ldw	r2,-12(fp)
  8090a4:	10c00917 	ldw	r3,36(r2)
  8090a8:	e0bffd17 	ldw	r2,-12(fp)
  8090ac:	10800117 	ldw	r2,4(r2)
  8090b0:	1885803a 	cmpltu	r2,r3,r2
  8090b4:	10c03fcc 	andi	r3,r2,255
  8090b8:	e0bfff17 	ldw	r2,-4(fp)
  8090bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8090c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8090c4:	00000206 	br	8090d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8090c8:	0001883a 	nop
  8090cc:	00000106 	br	8090d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8090d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8090d4:	e0bffb17 	ldw	r2,-20(fp)
}
  8090d8:	e037883a 	mov	sp,fp
  8090dc:	df000017 	ldw	fp,0(sp)
  8090e0:	dec00104 	addi	sp,sp,4
  8090e4:	f800283a 	ret

008090e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8090e8:	deffed04 	addi	sp,sp,-76
  8090ec:	dfc01215 	stw	ra,72(sp)
  8090f0:	df001115 	stw	fp,68(sp)
  8090f4:	df001104 	addi	fp,sp,68
  8090f8:	e13ffc15 	stw	r4,-16(fp)
  8090fc:	e17ffd15 	stw	r5,-12(fp)
  809100:	e1bffe15 	stw	r6,-8(fp)
  809104:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  809108:	e0bffd17 	ldw	r2,-12(fp)
  80910c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  809110:	e0bffc17 	ldw	r2,-16(fp)
  809114:	10800a17 	ldw	r2,40(r2)
  809118:	e0bff815 	stw	r2,-32(fp)
  80911c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  809120:	e0bff90b 	ldhu	r2,-28(fp)
  809124:	e0fffb04 	addi	r3,fp,-20
  809128:	180d883a 	mov	r6,r3
  80912c:	100b883a 	mov	r5,r2
  809130:	e13ff817 	ldw	r4,-32(fp)
  809134:	0805a100 	call	805a10 <OSSemPend>

  while (space > 0)
  809138:	00006106 	br	8092c0 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80913c:	e0bffc17 	ldw	r2,-16(fp)
  809140:	10800d17 	ldw	r2,52(r2)
  809144:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  809148:	e0bffc17 	ldw	r2,-16(fp)
  80914c:	10800e17 	ldw	r2,56(r2)
  809150:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  809154:	e0fff317 	ldw	r3,-52(fp)
  809158:	e0bff417 	ldw	r2,-48(fp)
  80915c:	18800536 	bltu	r3,r2,809174 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  809160:	e0fff317 	ldw	r3,-52(fp)
  809164:	e0bff417 	ldw	r2,-48(fp)
  809168:	1885c83a 	sub	r2,r3,r2
  80916c:	e0bff115 	stw	r2,-60(fp)
  809170:	00000406 	br	809184 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  809174:	00c20004 	movi	r3,2048
  809178:	e0bff417 	ldw	r2,-48(fp)
  80917c:	1885c83a 	sub	r2,r3,r2
  809180:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  809184:	e0bff117 	ldw	r2,-60(fp)
  809188:	10001e26 	beq	r2,zero,809204 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  80918c:	e0fffe17 	ldw	r3,-8(fp)
  809190:	e0bff117 	ldw	r2,-60(fp)
  809194:	1880022e 	bgeu	r3,r2,8091a0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  809198:	e0bffe17 	ldw	r2,-8(fp)
  80919c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8091a0:	e0bffc17 	ldw	r2,-16(fp)
  8091a4:	10c01104 	addi	r3,r2,68
  8091a8:	e0bff417 	ldw	r2,-48(fp)
  8091ac:	1885883a 	add	r2,r3,r2
  8091b0:	e1bff117 	ldw	r6,-60(fp)
  8091b4:	100b883a 	mov	r5,r2
  8091b8:	e13ff017 	ldw	r4,-64(fp)
  8091bc:	080bfc80 	call	80bfc8 <memcpy>
      ptr   += n;
  8091c0:	e0fff017 	ldw	r3,-64(fp)
  8091c4:	e0bff117 	ldw	r2,-60(fp)
  8091c8:	1885883a 	add	r2,r3,r2
  8091cc:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  8091d0:	e0fffe17 	ldw	r3,-8(fp)
  8091d4:	e0bff117 	ldw	r2,-60(fp)
  8091d8:	1885c83a 	sub	r2,r3,r2
  8091dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8091e0:	e0fff417 	ldw	r3,-48(fp)
  8091e4:	e0bff117 	ldw	r2,-60(fp)
  8091e8:	1885883a 	add	r2,r3,r2
  8091ec:	10c1ffcc 	andi	r3,r2,2047
  8091f0:	e0bffc17 	ldw	r2,-16(fp)
  8091f4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  8091f8:	e0bffe17 	ldw	r2,-8(fp)
  8091fc:	00bfcf16 	blt	zero,r2,80913c <__alt_mem_epcs_flash_controller_0+0xff80013c>
  809200:	00000106 	br	809208 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  809204:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  809208:	e0fff017 	ldw	r3,-64(fp)
  80920c:	e0bffd17 	ldw	r2,-12(fp)
  809210:	18802e1e 	bne	r3,r2,8092cc <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  809214:	e0bfff17 	ldw	r2,-4(fp)
  809218:	1090000c 	andi	r2,r2,16384
  80921c:	10002d1e 	bne	r2,zero,8092d4 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  809220:	d0a03343 	ldbu	r2,-32563(gp)
  809224:	10803fcc 	andi	r2,r2,255
  809228:	10800058 	cmpnei	r2,r2,1
  80922c:	1000161e 	bne	r2,zero,809288 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  809230:	e0bffc17 	ldw	r2,-16(fp)
  809234:	10800c17 	ldw	r2,48(r2)
  809238:	e0bff215 	stw	r2,-56(fp)
  80923c:	00800144 	movi	r2,5
  809240:	e0bff98d 	sth	r2,-26(fp)
  809244:	00bfe0c4 	movi	r2,-125
  809248:	e0bffa05 	stb	r2,-24(fp)
  80924c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  809250:	d0a03343 	ldbu	r2,-32563(gp)
  809254:	10803fcc 	andi	r2,r2,255
  809258:	10001526 	beq	r2,zero,8092b0 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80925c:	e0fff98b 	ldhu	r3,-26(fp)
  809260:	e13ffa03 	ldbu	r4,-24(fp)
  809264:	e17ffa8b 	ldhu	r5,-22(fp)
  809268:	e0bffb44 	addi	r2,fp,-19
  80926c:	d8800015 	stw	r2,0(sp)
  809270:	280f883a 	mov	r7,r5
  809274:	200d883a 	mov	r6,r4
  809278:	180b883a 	mov	r5,r3
  80927c:	e13ff217 	ldw	r4,-56(fp)
  809280:	0802f9c0 	call	802f9c <OSFlagPend>
  809284:	00000a06 	br	8092b0 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  809288:	0001883a 	nop
  80928c:	e0bffc17 	ldw	r2,-16(fp)
  809290:	10c00d17 	ldw	r3,52(r2)
  809294:	e0bff317 	ldw	r2,-52(fp)
  809298:	1880051e 	bne	r3,r2,8092b0 <altera_avalon_jtag_uart_read+0x1c8>
  80929c:	e0bffc17 	ldw	r2,-16(fp)
  8092a0:	10c00917 	ldw	r3,36(r2)
  8092a4:	e0bffc17 	ldw	r2,-16(fp)
  8092a8:	10800117 	ldw	r2,4(r2)
  8092ac:	18bff736 	bltu	r3,r2,80928c <__alt_mem_epcs_flash_controller_0+0xff80028c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8092b0:	e0bffc17 	ldw	r2,-16(fp)
  8092b4:	10c00d17 	ldw	r3,52(r2)
  8092b8:	e0bff317 	ldw	r2,-52(fp)
  8092bc:	18800726 	beq	r3,r2,8092dc <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8092c0:	e0bffe17 	ldw	r2,-8(fp)
  8092c4:	00bf9d16 	blt	zero,r2,80913c <__alt_mem_epcs_flash_controller_0+0xff80013c>
  8092c8:	00000506 	br	8092e0 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8092cc:	0001883a 	nop
  8092d0:	00000306 	br	8092e0 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8092d4:	0001883a 	nop
  8092d8:	00000106 	br	8092e0 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8092dc:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  8092e0:	e0bffc17 	ldw	r2,-16(fp)
  8092e4:	10800a17 	ldw	r2,40(r2)
  8092e8:	1009883a 	mov	r4,r2
  8092ec:	0805d880 	call	805d88 <OSSemPost>

  if (ptr != buffer)
  8092f0:	e0fff017 	ldw	r3,-64(fp)
  8092f4:	e0bffd17 	ldw	r2,-12(fp)
  8092f8:	18801826 	beq	r3,r2,80935c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8092fc:	0005303a 	rdctl	r2,status
  809300:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809304:	e0fff717 	ldw	r3,-36(fp)
  809308:	00bfff84 	movi	r2,-2
  80930c:	1884703a 	and	r2,r3,r2
  809310:	1001703a 	wrctl	status,r2
  
  return context;
  809314:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  809318:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80931c:	e0bffc17 	ldw	r2,-16(fp)
  809320:	10800817 	ldw	r2,32(r2)
  809324:	10c00054 	ori	r3,r2,1
  809328:	e0bffc17 	ldw	r2,-16(fp)
  80932c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  809330:	e0bffc17 	ldw	r2,-16(fp)
  809334:	10800017 	ldw	r2,0(r2)
  809338:	10800104 	addi	r2,r2,4
  80933c:	1007883a 	mov	r3,r2
  809340:	e0bffc17 	ldw	r2,-16(fp)
  809344:	10800817 	ldw	r2,32(r2)
  809348:	18800035 	stwio	r2,0(r3)
  80934c:	e0bff617 	ldw	r2,-40(fp)
  809350:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809354:	e0bff517 	ldw	r2,-44(fp)
  809358:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80935c:	e0fff017 	ldw	r3,-64(fp)
  809360:	e0bffd17 	ldw	r2,-12(fp)
  809364:	18800426 	beq	r3,r2,809378 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  809368:	e0fff017 	ldw	r3,-64(fp)
  80936c:	e0bffd17 	ldw	r2,-12(fp)
  809370:	1885c83a 	sub	r2,r3,r2
  809374:	00000606 	br	809390 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  809378:	e0bfff17 	ldw	r2,-4(fp)
  80937c:	1090000c 	andi	r2,r2,16384
  809380:	10000226 	beq	r2,zero,80938c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  809384:	00bffd44 	movi	r2,-11
  809388:	00000106 	br	809390 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  80938c:	00bffec4 	movi	r2,-5
}
  809390:	e037883a 	mov	sp,fp
  809394:	dfc00117 	ldw	ra,4(sp)
  809398:	df000017 	ldw	fp,0(sp)
  80939c:	dec00204 	addi	sp,sp,8
  8093a0:	f800283a 	ret

008093a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8093a4:	deffed04 	addi	sp,sp,-76
  8093a8:	dfc01215 	stw	ra,72(sp)
  8093ac:	df001115 	stw	fp,68(sp)
  8093b0:	df001104 	addi	fp,sp,68
  8093b4:	e13ffc15 	stw	r4,-16(fp)
  8093b8:	e17ffd15 	stw	r5,-12(fp)
  8093bc:	e1bffe15 	stw	r6,-8(fp)
  8093c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8093c4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8093c8:	e0bffd17 	ldw	r2,-12(fp)
  8093cc:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  8093d0:	e0bffc17 	ldw	r2,-16(fp)
  8093d4:	10800b17 	ldw	r2,44(r2)
  8093d8:	e0bff815 	stw	r2,-32(fp)
  8093dc:	e03ff90d 	sth	zero,-28(fp)
  8093e0:	e0bff90b 	ldhu	r2,-28(fp)
  8093e4:	e0fffb44 	addi	r3,fp,-19
  8093e8:	180d883a 	mov	r6,r3
  8093ec:	100b883a 	mov	r5,r2
  8093f0:	e13ff817 	ldw	r4,-32(fp)
  8093f4:	0805a100 	call	805a10 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8093f8:	00003706 	br	8094d8 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8093fc:	e0bffc17 	ldw	r2,-16(fp)
  809400:	10800f17 	ldw	r2,60(r2)
  809404:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  809408:	e0bffc17 	ldw	r2,-16(fp)
  80940c:	10801017 	ldw	r2,64(r2)
  809410:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  809414:	e0fff417 	ldw	r3,-48(fp)
  809418:	e0bff017 	ldw	r2,-64(fp)
  80941c:	1880062e 	bgeu	r3,r2,809438 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  809420:	e0fff017 	ldw	r3,-64(fp)
  809424:	e0bff417 	ldw	r2,-48(fp)
  809428:	1885c83a 	sub	r2,r3,r2
  80942c:	10bfffc4 	addi	r2,r2,-1
  809430:	e0bff115 	stw	r2,-60(fp)
  809434:	00000b06 	br	809464 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  809438:	e0bff017 	ldw	r2,-64(fp)
  80943c:	10000526 	beq	r2,zero,809454 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  809440:	00c20004 	movi	r3,2048
  809444:	e0bff417 	ldw	r2,-48(fp)
  809448:	1885c83a 	sub	r2,r3,r2
  80944c:	e0bff115 	stw	r2,-60(fp)
  809450:	00000406 	br	809464 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  809454:	00c1ffc4 	movi	r3,2047
  809458:	e0bff417 	ldw	r2,-48(fp)
  80945c:	1885c83a 	sub	r2,r3,r2
  809460:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  809464:	e0bff117 	ldw	r2,-60(fp)
  809468:	10001e26 	beq	r2,zero,8094e4 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  80946c:	e0fffe17 	ldw	r3,-8(fp)
  809470:	e0bff117 	ldw	r2,-60(fp)
  809474:	1880022e 	bgeu	r3,r2,809480 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  809478:	e0bffe17 	ldw	r2,-8(fp)
  80947c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  809480:	e0bffc17 	ldw	r2,-16(fp)
  809484:	10c21104 	addi	r3,r2,2116
  809488:	e0bff417 	ldw	r2,-48(fp)
  80948c:	1885883a 	add	r2,r3,r2
  809490:	e1bff117 	ldw	r6,-60(fp)
  809494:	e17ffd17 	ldw	r5,-12(fp)
  809498:	1009883a 	mov	r4,r2
  80949c:	080bfc80 	call	80bfc8 <memcpy>
      ptr   += n;
  8094a0:	e0fffd17 	ldw	r3,-12(fp)
  8094a4:	e0bff117 	ldw	r2,-60(fp)
  8094a8:	1885883a 	add	r2,r3,r2
  8094ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8094b0:	e0fffe17 	ldw	r3,-8(fp)
  8094b4:	e0bff117 	ldw	r2,-60(fp)
  8094b8:	1885c83a 	sub	r2,r3,r2
  8094bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8094c0:	e0fff417 	ldw	r3,-48(fp)
  8094c4:	e0bff117 	ldw	r2,-60(fp)
  8094c8:	1885883a 	add	r2,r3,r2
  8094cc:	10c1ffcc 	andi	r3,r2,2047
  8094d0:	e0bffc17 	ldw	r2,-16(fp)
  8094d4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8094d8:	e0bffe17 	ldw	r2,-8(fp)
  8094dc:	00bfc716 	blt	zero,r2,8093fc <__alt_mem_epcs_flash_controller_0+0xff8003fc>
  8094e0:	00000106 	br	8094e8 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8094e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8094e8:	0005303a 	rdctl	r2,status
  8094ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8094f0:	e0fff717 	ldw	r3,-36(fp)
  8094f4:	00bfff84 	movi	r2,-2
  8094f8:	1884703a 	and	r2,r3,r2
  8094fc:	1001703a 	wrctl	status,r2
  
  return context;
  809500:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  809504:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  809508:	e0bffc17 	ldw	r2,-16(fp)
  80950c:	10800817 	ldw	r2,32(r2)
  809510:	10c00094 	ori	r3,r2,2
  809514:	e0bffc17 	ldw	r2,-16(fp)
  809518:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80951c:	e0bffc17 	ldw	r2,-16(fp)
  809520:	10800017 	ldw	r2,0(r2)
  809524:	10800104 	addi	r2,r2,4
  809528:	1007883a 	mov	r3,r2
  80952c:	e0bffc17 	ldw	r2,-16(fp)
  809530:	10800817 	ldw	r2,32(r2)
  809534:	18800035 	stwio	r2,0(r3)
  809538:	e0bff617 	ldw	r2,-40(fp)
  80953c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809540:	e0bff317 	ldw	r2,-52(fp)
  809544:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  809548:	e0bffe17 	ldw	r2,-8(fp)
  80954c:	00802a0e 	bge	zero,r2,8095f8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  809550:	e0bfff17 	ldw	r2,-4(fp)
  809554:	1090000c 	andi	r2,r2,16384
  809558:	10002a1e 	bne	r2,zero,809604 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  80955c:	d0a03343 	ldbu	r2,-32563(gp)
  809560:	10803fcc 	andi	r2,r2,255
  809564:	10800058 	cmpnei	r2,r2,1
  809568:	1000161e 	bne	r2,zero,8095c4 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  80956c:	e0bffc17 	ldw	r2,-16(fp)
  809570:	10800c17 	ldw	r2,48(r2)
  809574:	e0bff515 	stw	r2,-44(fp)
  809578:	00800184 	movi	r2,6
  80957c:	e0bff98d 	sth	r2,-26(fp)
  809580:	00bfe0c4 	movi	r2,-125
  809584:	e0bffa05 	stb	r2,-24(fp)
  809588:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80958c:	d0a03343 	ldbu	r2,-32563(gp)
  809590:	10803fcc 	andi	r2,r2,255
  809594:	10001526 	beq	r2,zero,8095ec <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  809598:	e0fff98b 	ldhu	r3,-26(fp)
  80959c:	e13ffa03 	ldbu	r4,-24(fp)
  8095a0:	e17ffa8b 	ldhu	r5,-22(fp)
  8095a4:	e0bffb04 	addi	r2,fp,-20
  8095a8:	d8800015 	stw	r2,0(sp)
  8095ac:	280f883a 	mov	r7,r5
  8095b0:	200d883a 	mov	r6,r4
  8095b4:	180b883a 	mov	r5,r3
  8095b8:	e13ff517 	ldw	r4,-44(fp)
  8095bc:	0802f9c0 	call	802f9c <OSFlagPend>
  8095c0:	00000a06 	br	8095ec <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8095c4:	0001883a 	nop
  8095c8:	e0bffc17 	ldw	r2,-16(fp)
  8095cc:	10c01017 	ldw	r3,64(r2)
  8095d0:	e0bff017 	ldw	r2,-64(fp)
  8095d4:	1880051e 	bne	r3,r2,8095ec <altera_avalon_jtag_uart_write+0x248>
  8095d8:	e0bffc17 	ldw	r2,-16(fp)
  8095dc:	10c00917 	ldw	r3,36(r2)
  8095e0:	e0bffc17 	ldw	r2,-16(fp)
  8095e4:	10800117 	ldw	r2,4(r2)
  8095e8:	18bff736 	bltu	r3,r2,8095c8 <__alt_mem_epcs_flash_controller_0+0xff8005c8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8095ec:	e0bffc17 	ldw	r2,-16(fp)
  8095f0:	10800917 	ldw	r2,36(r2)
  8095f4:	1000051e 	bne	r2,zero,80960c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  8095f8:	e0bffe17 	ldw	r2,-8(fp)
  8095fc:	00bfb616 	blt	zero,r2,8094d8 <__alt_mem_epcs_flash_controller_0+0xff8004d8>
  809600:	00000306 	br	809610 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  809604:	0001883a 	nop
  809608:	00000106 	br	809610 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80960c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  809610:	e0bffc17 	ldw	r2,-16(fp)
  809614:	10800b17 	ldw	r2,44(r2)
  809618:	1009883a 	mov	r4,r2
  80961c:	0805d880 	call	805d88 <OSSemPost>

  if (ptr != start)
  809620:	e0fffd17 	ldw	r3,-12(fp)
  809624:	e0bff217 	ldw	r2,-56(fp)
  809628:	18800426 	beq	r3,r2,80963c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  80962c:	e0fffd17 	ldw	r3,-12(fp)
  809630:	e0bff217 	ldw	r2,-56(fp)
  809634:	1885c83a 	sub	r2,r3,r2
  809638:	00000606 	br	809654 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  80963c:	e0bfff17 	ldw	r2,-4(fp)
  809640:	1090000c 	andi	r2,r2,16384
  809644:	10000226 	beq	r2,zero,809650 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  809648:	00bffd44 	movi	r2,-11
  80964c:	00000106 	br	809654 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  809650:	00bffec4 	movi	r2,-5
}
  809654:	e037883a 	mov	sp,fp
  809658:	dfc00117 	ldw	ra,4(sp)
  80965c:	df000017 	ldw	fp,0(sp)
  809660:	dec00204 	addi	sp,sp,8
  809664:	f800283a 	ret

00809668 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  809668:	defffa04 	addi	sp,sp,-24
  80966c:	dfc00515 	stw	ra,20(sp)
  809670:	df000415 	stw	fp,16(sp)
  809674:	df000404 	addi	fp,sp,16
  809678:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80967c:	0007883a 	mov	r3,zero
  809680:	e0bfff17 	ldw	r2,-4(fp)
  809684:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  809688:	e0bfff17 	ldw	r2,-4(fp)
  80968c:	10800104 	addi	r2,r2,4
  809690:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809694:	0005303a 	rdctl	r2,status
  809698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80969c:	e0fffd17 	ldw	r3,-12(fp)
  8096a0:	00bfff84 	movi	r2,-2
  8096a4:	1884703a 	and	r2,r3,r2
  8096a8:	1001703a 	wrctl	status,r2
  
  return context;
  8096ac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8096b0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8096b4:	080b5580 	call	80b558 <alt_tick>
  8096b8:	e0bffc17 	ldw	r2,-16(fp)
  8096bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8096c0:	e0bffe17 	ldw	r2,-8(fp)
  8096c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8096c8:	0001883a 	nop
  8096cc:	e037883a 	mov	sp,fp
  8096d0:	dfc00117 	ldw	ra,4(sp)
  8096d4:	df000017 	ldw	fp,0(sp)
  8096d8:	dec00204 	addi	sp,sp,8
  8096dc:	f800283a 	ret

008096e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8096e0:	defff804 	addi	sp,sp,-32
  8096e4:	dfc00715 	stw	ra,28(sp)
  8096e8:	df000615 	stw	fp,24(sp)
  8096ec:	df000604 	addi	fp,sp,24
  8096f0:	e13ffc15 	stw	r4,-16(fp)
  8096f4:	e17ffd15 	stw	r5,-12(fp)
  8096f8:	e1bffe15 	stw	r6,-8(fp)
  8096fc:	e1ffff15 	stw	r7,-4(fp)
  809700:	e0bfff17 	ldw	r2,-4(fp)
  809704:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  809708:	d0a04917 	ldw	r2,-32476(gp)
  80970c:	1000021e 	bne	r2,zero,809718 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  809710:	e0bffb17 	ldw	r2,-20(fp)
  809714:	d0a04915 	stw	r2,-32476(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  809718:	e0bffc17 	ldw	r2,-16(fp)
  80971c:	10800104 	addi	r2,r2,4
  809720:	00c001c4 	movi	r3,7
  809724:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  809728:	d8000015 	stw	zero,0(sp)
  80972c:	e1fffc17 	ldw	r7,-16(fp)
  809730:	01802074 	movhi	r6,129
  809734:	31a59a04 	addi	r6,r6,-27032
  809738:	e17ffe17 	ldw	r5,-8(fp)
  80973c:	e13ffd17 	ldw	r4,-12(fp)
  809740:	080adb40 	call	80adb4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  809744:	0001883a 	nop
  809748:	e037883a 	mov	sp,fp
  80974c:	dfc00117 	ldw	ra,4(sp)
  809750:	df000017 	ldw	fp,0(sp)
  809754:	dec00204 	addi	sp,sp,8
  809758:	f800283a 	ret

0080975c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80975c:	defffa04 	addi	sp,sp,-24
  809760:	dfc00515 	stw	ra,20(sp)
  809764:	df000415 	stw	fp,16(sp)
  809768:	df000404 	addi	fp,sp,16
  80976c:	e13ffd15 	stw	r4,-12(fp)
  809770:	e17ffe15 	stw	r5,-8(fp)
  809774:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809778:	e0bffd17 	ldw	r2,-12(fp)
  80977c:	10800017 	ldw	r2,0(r2)
  809780:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  809784:	e0bffc17 	ldw	r2,-16(fp)
  809788:	10c00a04 	addi	r3,r2,40
  80978c:	e0bffd17 	ldw	r2,-12(fp)
  809790:	10800217 	ldw	r2,8(r2)
  809794:	100f883a 	mov	r7,r2
  809798:	e1bfff17 	ldw	r6,-4(fp)
  80979c:	e17ffe17 	ldw	r5,-8(fp)
  8097a0:	1809883a 	mov	r4,r3
  8097a4:	0809dd40 	call	809dd4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8097a8:	e037883a 	mov	sp,fp
  8097ac:	dfc00117 	ldw	ra,4(sp)
  8097b0:	df000017 	ldw	fp,0(sp)
  8097b4:	dec00204 	addi	sp,sp,8
  8097b8:	f800283a 	ret

008097bc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8097bc:	defffa04 	addi	sp,sp,-24
  8097c0:	dfc00515 	stw	ra,20(sp)
  8097c4:	df000415 	stw	fp,16(sp)
  8097c8:	df000404 	addi	fp,sp,16
  8097cc:	e13ffd15 	stw	r4,-12(fp)
  8097d0:	e17ffe15 	stw	r5,-8(fp)
  8097d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8097d8:	e0bffd17 	ldw	r2,-12(fp)
  8097dc:	10800017 	ldw	r2,0(r2)
  8097e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8097e4:	e0bffc17 	ldw	r2,-16(fp)
  8097e8:	10c00a04 	addi	r3,r2,40
  8097ec:	e0bffd17 	ldw	r2,-12(fp)
  8097f0:	10800217 	ldw	r2,8(r2)
  8097f4:	100f883a 	mov	r7,r2
  8097f8:	e1bfff17 	ldw	r6,-4(fp)
  8097fc:	e17ffe17 	ldw	r5,-8(fp)
  809800:	1809883a 	mov	r4,r3
  809804:	080a0780 	call	80a078 <altera_avalon_uart_write>
      fd->fd_flags);
}
  809808:	e037883a 	mov	sp,fp
  80980c:	dfc00117 	ldw	ra,4(sp)
  809810:	df000017 	ldw	fp,0(sp)
  809814:	dec00204 	addi	sp,sp,8
  809818:	f800283a 	ret

0080981c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80981c:	defffc04 	addi	sp,sp,-16
  809820:	dfc00315 	stw	ra,12(sp)
  809824:	df000215 	stw	fp,8(sp)
  809828:	df000204 	addi	fp,sp,8
  80982c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809830:	e0bfff17 	ldw	r2,-4(fp)
  809834:	10800017 	ldw	r2,0(r2)
  809838:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80983c:	e0bffe17 	ldw	r2,-8(fp)
  809840:	10c00a04 	addi	r3,r2,40
  809844:	e0bfff17 	ldw	r2,-4(fp)
  809848:	10800217 	ldw	r2,8(r2)
  80984c:	100b883a 	mov	r5,r2
  809850:	1809883a 	mov	r4,r3
  809854:	0809d440 	call	809d44 <altera_avalon_uart_close>
}
  809858:	e037883a 	mov	sp,fp
  80985c:	dfc00117 	ldw	ra,4(sp)
  809860:	df000017 	ldw	fp,0(sp)
  809864:	dec00204 	addi	sp,sp,8
  809868:	f800283a 	ret

0080986c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80986c:	defff304 	addi	sp,sp,-52
  809870:	dfc00c15 	stw	ra,48(sp)
  809874:	df000b15 	stw	fp,44(sp)
  809878:	df000b04 	addi	fp,sp,44
  80987c:	e13ffd15 	stw	r4,-12(fp)
  809880:	e17ffe15 	stw	r5,-8(fp)
  809884:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  809888:	e0bffd17 	ldw	r2,-12(fp)
  80988c:	10800017 	ldw	r2,0(r2)
  809890:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  809894:	e0bffd17 	ldw	r2,-12(fp)
  809898:	10800704 	addi	r2,r2,28
  80989c:	e0bffa15 	stw	r2,-24(fp)
  8098a0:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  8098a4:	e0bffb0b 	ldhu	r2,-20(fp)
  8098a8:	e0fffc84 	addi	r3,fp,-14
  8098ac:	180b883a 	mov	r5,r3
  8098b0:	1009883a 	mov	r4,r2
  8098b4:	08029d80 	call	8029d8 <OSFlagCreate>
  8098b8:	1007883a 	mov	r3,r2
  8098bc:	e0bffa17 	ldw	r2,-24(fp)
  8098c0:	10c00015 	stw	r3,0(r2)
  return err;
  8098c4:	e0bffc83 	ldbu	r2,-14(fp)
  8098c8:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8098cc:	1000241e 	bne	r2,zero,809960 <altera_avalon_uart_init+0xf4>
  8098d0:	e0bffd17 	ldw	r2,-12(fp)
  8098d4:	10800804 	addi	r2,r2,32
  8098d8:	e0bff715 	stw	r2,-36(fp)
  8098dc:	00800044 	movi	r2,1
  8098e0:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8098e4:	e0bffb8b 	ldhu	r2,-18(fp)
  8098e8:	1009883a 	mov	r4,r2
  8098ec:	08056f80 	call	8056f8 <OSSemCreate>
  8098f0:	1007883a 	mov	r3,r2
  8098f4:	e0bff717 	ldw	r2,-36(fp)
  8098f8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  8098fc:	e0bff717 	ldw	r2,-36(fp)
  809900:	10800017 	ldw	r2,0(r2)
  809904:	10000226 	beq	r2,zero,809910 <altera_avalon_uart_init+0xa4>
  809908:	0005883a 	mov	r2,zero
  80990c:	00000106 	br	809914 <altera_avalon_uart_init+0xa8>
  809910:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  809914:	1000121e 	bne	r2,zero,809960 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  809918:	e0bffd17 	ldw	r2,-12(fp)
  80991c:	10800904 	addi	r2,r2,36
  809920:	e0bff815 	stw	r2,-32(fp)
  809924:	00800044 	movi	r2,1
  809928:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80992c:	e0bffc0b 	ldhu	r2,-16(fp)
  809930:	1009883a 	mov	r4,r2
  809934:	08056f80 	call	8056f8 <OSSemCreate>
  809938:	1007883a 	mov	r3,r2
  80993c:	e0bff817 	ldw	r2,-32(fp)
  809940:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  809944:	e0bff817 	ldw	r2,-32(fp)
  809948:	10800017 	ldw	r2,0(r2)
  80994c:	10000226 	beq	r2,zero,809958 <altera_avalon_uart_init+0xec>
  809950:	0005883a 	mov	r2,zero
  809954:	00000106 	br	80995c <altera_avalon_uart_init+0xf0>
  809958:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80995c:	10000226 	beq	r2,zero,809968 <altera_avalon_uart_init+0xfc>
  809960:	00800044 	movi	r2,1
  809964:	00000106 	br	80996c <altera_avalon_uart_init+0x100>
  809968:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80996c:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  809970:	e0bff917 	ldw	r2,-28(fp)
  809974:	10000f1e 	bne	r2,zero,8099b4 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  809978:	e0bffd17 	ldw	r2,-12(fp)
  80997c:	00c32004 	movi	r3,3200
  809980:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  809984:	e0bff617 	ldw	r2,-40(fp)
  809988:	10800304 	addi	r2,r2,12
  80998c:	e0fffd17 	ldw	r3,-12(fp)
  809990:	18c00117 	ldw	r3,4(r3)
  809994:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  809998:	d8000015 	stw	zero,0(sp)
  80999c:	e1fffd17 	ldw	r7,-12(fp)
  8099a0:	01802074 	movhi	r6,129
  8099a4:	31a67304 	addi	r6,r6,-26164
  8099a8:	e17fff17 	ldw	r5,-4(fp)
  8099ac:	e13ffe17 	ldw	r4,-8(fp)
  8099b0:	080adb40 	call	80adb4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8099b4:	0001883a 	nop
  8099b8:	e037883a 	mov	sp,fp
  8099bc:	dfc00117 	ldw	ra,4(sp)
  8099c0:	df000017 	ldw	fp,0(sp)
  8099c4:	dec00204 	addi	sp,sp,8
  8099c8:	f800283a 	ret

008099cc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8099cc:	defffa04 	addi	sp,sp,-24
  8099d0:	dfc00515 	stw	ra,20(sp)
  8099d4:	df000415 	stw	fp,16(sp)
  8099d8:	df000404 	addi	fp,sp,16
  8099dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8099e0:	e0bfff17 	ldw	r2,-4(fp)
  8099e4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8099e8:	e0bffc17 	ldw	r2,-16(fp)
  8099ec:	10800017 	ldw	r2,0(r2)
  8099f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8099f4:	e0bffd17 	ldw	r2,-12(fp)
  8099f8:	10800204 	addi	r2,r2,8
  8099fc:	10800037 	ldwio	r2,0(r2)
  809a00:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  809a04:	e0bffd17 	ldw	r2,-12(fp)
  809a08:	10800204 	addi	r2,r2,8
  809a0c:	0007883a 	mov	r3,zero
  809a10:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  809a14:	e0bffd17 	ldw	r2,-12(fp)
  809a18:	10800204 	addi	r2,r2,8
  809a1c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  809a20:	e0bffe17 	ldw	r2,-8(fp)
  809a24:	1080200c 	andi	r2,r2,128
  809a28:	10000326 	beq	r2,zero,809a38 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  809a2c:	e17ffe17 	ldw	r5,-8(fp)
  809a30:	e13ffc17 	ldw	r4,-16(fp)
  809a34:	0809a680 	call	809a68 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  809a38:	e0bffe17 	ldw	r2,-8(fp)
  809a3c:	1081100c 	andi	r2,r2,1088
  809a40:	10000326 	beq	r2,zero,809a50 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  809a44:	e17ffe17 	ldw	r5,-8(fp)
  809a48:	e13ffc17 	ldw	r4,-16(fp)
  809a4c:	0809ba00 	call	809ba0 <altera_avalon_uart_txirq>
  }
  

}
  809a50:	0001883a 	nop
  809a54:	e037883a 	mov	sp,fp
  809a58:	dfc00117 	ldw	ra,4(sp)
  809a5c:	df000017 	ldw	fp,0(sp)
  809a60:	dec00204 	addi	sp,sp,8
  809a64:	f800283a 	ret

00809a68 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  809a68:	defff904 	addi	sp,sp,-28
  809a6c:	dfc00615 	stw	ra,24(sp)
  809a70:	df000515 	stw	fp,20(sp)
  809a74:	df000504 	addi	fp,sp,20
  809a78:	e13ffe15 	stw	r4,-8(fp)
  809a7c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  809a80:	e0bfff17 	ldw	r2,-4(fp)
  809a84:	108000cc 	andi	r2,r2,3
  809a88:	10003f1e 	bne	r2,zero,809b88 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  809a8c:	e0bffe17 	ldw	r2,-8(fp)
  809a90:	10c00317 	ldw	r3,12(r2)
  809a94:	e0bffe17 	ldw	r2,-8(fp)
  809a98:	10800217 	ldw	r2,8(r2)
  809a9c:	1880121e 	bne	r3,r2,809ae8 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  809aa0:	e0bffe17 	ldw	r2,-8(fp)
  809aa4:	10800717 	ldw	r2,28(r2)
  809aa8:	e0bffc15 	stw	r2,-16(fp)
  809aac:	00800044 	movi	r2,1
  809ab0:	e0bffd0d 	sth	r2,-12(fp)
  809ab4:	00800044 	movi	r2,1
  809ab8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  809abc:	d0a03343 	ldbu	r2,-32563(gp)
  809ac0:	10803fcc 	andi	r2,r2,255
  809ac4:	10000826 	beq	r2,zero,809ae8 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  809ac8:	e0bffd0b 	ldhu	r2,-12(fp)
  809acc:	e0fffd83 	ldbu	r3,-10(fp)
  809ad0:	e13ffdc4 	addi	r4,fp,-9
  809ad4:	200f883a 	mov	r7,r4
  809ad8:	180d883a 	mov	r6,r3
  809adc:	100b883a 	mov	r5,r2
  809ae0:	e13ffc17 	ldw	r4,-16(fp)
  809ae4:	08035b40 	call	8035b4 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809ae8:	e0bffe17 	ldw	r2,-8(fp)
  809aec:	10800317 	ldw	r2,12(r2)
  809af0:	10800044 	addi	r2,r2,1
  809af4:	10800fcc 	andi	r2,r2,63
  809af8:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  809afc:	e0bffe17 	ldw	r2,-8(fp)
  809b00:	10800317 	ldw	r2,12(r2)
  809b04:	e0fffe17 	ldw	r3,-8(fp)
  809b08:	18c00017 	ldw	r3,0(r3)
  809b0c:	18c00037 	ldwio	r3,0(r3)
  809b10:	1809883a 	mov	r4,r3
  809b14:	e0fffe17 	ldw	r3,-8(fp)
  809b18:	1885883a 	add	r2,r3,r2
  809b1c:	10800a04 	addi	r2,r2,40
  809b20:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  809b24:	e0bffe17 	ldw	r2,-8(fp)
  809b28:	e0fffb17 	ldw	r3,-20(fp)
  809b2c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809b30:	e0bffe17 	ldw	r2,-8(fp)
  809b34:	10800317 	ldw	r2,12(r2)
  809b38:	10800044 	addi	r2,r2,1
  809b3c:	10800fcc 	andi	r2,r2,63
  809b40:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  809b44:	e0bffe17 	ldw	r2,-8(fp)
  809b48:	10c00217 	ldw	r3,8(r2)
  809b4c:	e0bffb17 	ldw	r2,-20(fp)
  809b50:	18800e1e 	bne	r3,r2,809b8c <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809b54:	e0bffe17 	ldw	r2,-8(fp)
  809b58:	10c00117 	ldw	r3,4(r2)
  809b5c:	00bfdfc4 	movi	r2,-129
  809b60:	1886703a 	and	r3,r3,r2
  809b64:	e0bffe17 	ldw	r2,-8(fp)
  809b68:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  809b6c:	e0bffe17 	ldw	r2,-8(fp)
  809b70:	10800017 	ldw	r2,0(r2)
  809b74:	10800304 	addi	r2,r2,12
  809b78:	e0fffe17 	ldw	r3,-8(fp)
  809b7c:	18c00117 	ldw	r3,4(r3)
  809b80:	10c00035 	stwio	r3,0(r2)
  809b84:	00000106 	br	809b8c <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  809b88:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  809b8c:	e037883a 	mov	sp,fp
  809b90:	dfc00117 	ldw	ra,4(sp)
  809b94:	df000017 	ldw	fp,0(sp)
  809b98:	dec00204 	addi	sp,sp,8
  809b9c:	f800283a 	ret

00809ba0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  809ba0:	defffa04 	addi	sp,sp,-24
  809ba4:	dfc00515 	stw	ra,20(sp)
  809ba8:	df000415 	stw	fp,16(sp)
  809bac:	df000404 	addi	fp,sp,16
  809bb0:	e13ffe15 	stw	r4,-8(fp)
  809bb4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  809bb8:	e0bffe17 	ldw	r2,-8(fp)
  809bbc:	10c00417 	ldw	r3,16(r2)
  809bc0:	e0bffe17 	ldw	r2,-8(fp)
  809bc4:	10800517 	ldw	r2,20(r2)
  809bc8:	18804726 	beq	r3,r2,809ce8 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  809bcc:	e0bffe17 	ldw	r2,-8(fp)
  809bd0:	10800617 	ldw	r2,24(r2)
  809bd4:	1080008c 	andi	r2,r2,2
  809bd8:	10000326 	beq	r2,zero,809be8 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  809bdc:	e0bfff17 	ldw	r2,-4(fp)
  809be0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  809be4:	10003226 	beq	r2,zero,809cb0 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  809be8:	e0bffe17 	ldw	r2,-8(fp)
  809bec:	10c00417 	ldw	r3,16(r2)
  809bf0:	e0bffe17 	ldw	r2,-8(fp)
  809bf4:	10800517 	ldw	r2,20(r2)
  809bf8:	10800044 	addi	r2,r2,1
  809bfc:	10800fcc 	andi	r2,r2,63
  809c00:	1880121e 	bne	r3,r2,809c4c <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  809c04:	e0bffe17 	ldw	r2,-8(fp)
  809c08:	10800717 	ldw	r2,28(r2)
  809c0c:	e0bffc15 	stw	r2,-16(fp)
  809c10:	00800084 	movi	r2,2
  809c14:	e0bffd0d 	sth	r2,-12(fp)
  809c18:	00800044 	movi	r2,1
  809c1c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  809c20:	d0a03343 	ldbu	r2,-32563(gp)
  809c24:	10803fcc 	andi	r2,r2,255
  809c28:	10000826 	beq	r2,zero,809c4c <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  809c2c:	e0bffd0b 	ldhu	r2,-12(fp)
  809c30:	e0fffd83 	ldbu	r3,-10(fp)
  809c34:	e13ffdc4 	addi	r4,fp,-9
  809c38:	200f883a 	mov	r7,r4
  809c3c:	180d883a 	mov	r6,r3
  809c40:	100b883a 	mov	r5,r2
  809c44:	e13ffc17 	ldw	r4,-16(fp)
  809c48:	08035b40 	call	8035b4 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  809c4c:	e0bffe17 	ldw	r2,-8(fp)
  809c50:	10800017 	ldw	r2,0(r2)
  809c54:	10800104 	addi	r2,r2,4
  809c58:	e0fffe17 	ldw	r3,-8(fp)
  809c5c:	18c00417 	ldw	r3,16(r3)
  809c60:	e13ffe17 	ldw	r4,-8(fp)
  809c64:	20c7883a 	add	r3,r4,r3
  809c68:	18c01a04 	addi	r3,r3,104
  809c6c:	18c00003 	ldbu	r3,0(r3)
  809c70:	18c03fcc 	andi	r3,r3,255
  809c74:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  809c78:	e0bffe17 	ldw	r2,-8(fp)
  809c7c:	10800417 	ldw	r2,16(r2)
  809c80:	10800044 	addi	r2,r2,1
  809c84:	e0fffe17 	ldw	r3,-8(fp)
  809c88:	18800415 	stw	r2,16(r3)
  809c8c:	10c00fcc 	andi	r3,r2,63
  809c90:	e0bffe17 	ldw	r2,-8(fp)
  809c94:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809c98:	e0bffe17 	ldw	r2,-8(fp)
  809c9c:	10800117 	ldw	r2,4(r2)
  809ca0:	10c01014 	ori	r3,r2,64
  809ca4:	e0bffe17 	ldw	r2,-8(fp)
  809ca8:	10c00115 	stw	r3,4(r2)
  809cac:	00000e06 	br	809ce8 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  809cb0:	e0bffe17 	ldw	r2,-8(fp)
  809cb4:	10800017 	ldw	r2,0(r2)
  809cb8:	10800204 	addi	r2,r2,8
  809cbc:	10800037 	ldwio	r2,0(r2)
  809cc0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  809cc4:	e0bfff17 	ldw	r2,-4(fp)
  809cc8:	1082000c 	andi	r2,r2,2048
  809ccc:	1000061e 	bne	r2,zero,809ce8 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809cd0:	e0bffe17 	ldw	r2,-8(fp)
  809cd4:	10c00117 	ldw	r3,4(r2)
  809cd8:	00bfefc4 	movi	r2,-65
  809cdc:	1886703a 	and	r3,r3,r2
  809ce0:	e0bffe17 	ldw	r2,-8(fp)
  809ce4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  809ce8:	e0bffe17 	ldw	r2,-8(fp)
  809cec:	10c00417 	ldw	r3,16(r2)
  809cf0:	e0bffe17 	ldw	r2,-8(fp)
  809cf4:	10800517 	ldw	r2,20(r2)
  809cf8:	1880061e 	bne	r3,r2,809d14 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  809cfc:	e0bffe17 	ldw	r2,-8(fp)
  809d00:	10c00117 	ldw	r3,4(r2)
  809d04:	00beefc4 	movi	r2,-1089
  809d08:	1886703a 	and	r3,r3,r2
  809d0c:	e0bffe17 	ldw	r2,-8(fp)
  809d10:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809d14:	e0bffe17 	ldw	r2,-8(fp)
  809d18:	10800017 	ldw	r2,0(r2)
  809d1c:	10800304 	addi	r2,r2,12
  809d20:	e0fffe17 	ldw	r3,-8(fp)
  809d24:	18c00117 	ldw	r3,4(r3)
  809d28:	10c00035 	stwio	r3,0(r2)
}
  809d2c:	0001883a 	nop
  809d30:	e037883a 	mov	sp,fp
  809d34:	dfc00117 	ldw	ra,4(sp)
  809d38:	df000017 	ldw	fp,0(sp)
  809d3c:	dec00204 	addi	sp,sp,8
  809d40:	f800283a 	ret

00809d44 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  809d44:	defffd04 	addi	sp,sp,-12
  809d48:	df000215 	stw	fp,8(sp)
  809d4c:	df000204 	addi	fp,sp,8
  809d50:	e13ffe15 	stw	r4,-8(fp)
  809d54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  809d58:	00000506 	br	809d70 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  809d5c:	e0bfff17 	ldw	r2,-4(fp)
  809d60:	1090000c 	andi	r2,r2,16384
  809d64:	10000226 	beq	r2,zero,809d70 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  809d68:	00bffd44 	movi	r2,-11
  809d6c:	00000606 	br	809d88 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  809d70:	e0bffe17 	ldw	r2,-8(fp)
  809d74:	10c00417 	ldw	r3,16(r2)
  809d78:	e0bffe17 	ldw	r2,-8(fp)
  809d7c:	10800517 	ldw	r2,20(r2)
  809d80:	18bff61e 	bne	r3,r2,809d5c <__alt_mem_epcs_flash_controller_0+0xff800d5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  809d84:	0005883a 	mov	r2,zero
}
  809d88:	e037883a 	mov	sp,fp
  809d8c:	df000017 	ldw	fp,0(sp)
  809d90:	dec00104 	addi	sp,sp,4
  809d94:	f800283a 	ret

00809d98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809d98:	defffe04 	addi	sp,sp,-8
  809d9c:	dfc00115 	stw	ra,4(sp)
  809da0:	df000015 	stw	fp,0(sp)
  809da4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809da8:	d0a02417 	ldw	r2,-32624(gp)
  809dac:	10000326 	beq	r2,zero,809dbc <alt_get_errno+0x24>
  809db0:	d0a02417 	ldw	r2,-32624(gp)
  809db4:	103ee83a 	callr	r2
  809db8:	00000106 	br	809dc0 <alt_get_errno+0x28>
  809dbc:	d0a04c04 	addi	r2,gp,-32464
}
  809dc0:	e037883a 	mov	sp,fp
  809dc4:	dfc00117 	ldw	ra,4(sp)
  809dc8:	df000017 	ldw	fp,0(sp)
  809dcc:	dec00204 	addi	sp,sp,8
  809dd0:	f800283a 	ret

00809dd4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  809dd4:	deffec04 	addi	sp,sp,-80
  809dd8:	dfc01315 	stw	ra,76(sp)
  809ddc:	df001215 	stw	fp,72(sp)
  809de0:	df001204 	addi	fp,sp,72
  809de4:	e13ffc15 	stw	r4,-16(fp)
  809de8:	e17ffd15 	stw	r5,-12(fp)
  809dec:	e1bffe15 	stw	r6,-8(fp)
  809df0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  809df4:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  809df8:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  809dfc:	e0bfff17 	ldw	r2,-4(fp)
  809e00:	1090000c 	andi	r2,r2,16384
  809e04:	1005003a 	cmpeq	r2,r2,zero
  809e08:	10803fcc 	andi	r2,r2,255
  809e0c:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  809e10:	e0bffc17 	ldw	r2,-16(fp)
  809e14:	10800817 	ldw	r2,32(r2)
  809e18:	e0bff815 	stw	r2,-32(fp)
  809e1c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  809e20:	e0bff90b 	ldhu	r2,-28(fp)
  809e24:	e0fffb44 	addi	r3,fp,-19
  809e28:	180d883a 	mov	r6,r3
  809e2c:	100b883a 	mov	r5,r2
  809e30:	e13ff817 	ldw	r4,-32(fp)
  809e34:	0805a100 	call	805a10 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  809e38:	00001306 	br	809e88 <altera_avalon_uart_read+0xb4>
    {
      count++;
  809e3c:	e0bff017 	ldw	r2,-64(fp)
  809e40:	10800044 	addi	r2,r2,1
  809e44:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  809e48:	e0bffd17 	ldw	r2,-12(fp)
  809e4c:	10c00044 	addi	r3,r2,1
  809e50:	e0fffd15 	stw	r3,-12(fp)
  809e54:	e0fffc17 	ldw	r3,-16(fp)
  809e58:	18c00217 	ldw	r3,8(r3)
  809e5c:	e13ffc17 	ldw	r4,-16(fp)
  809e60:	20c7883a 	add	r3,r4,r3
  809e64:	18c00a04 	addi	r3,r3,40
  809e68:	18c00003 	ldbu	r3,0(r3)
  809e6c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  809e70:	e0bffc17 	ldw	r2,-16(fp)
  809e74:	10800217 	ldw	r2,8(r2)
  809e78:	10800044 	addi	r2,r2,1
  809e7c:	10c00fcc 	andi	r3,r2,63
  809e80:	e0bffc17 	ldw	r2,-16(fp)
  809e84:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  809e88:	e0fff017 	ldw	r3,-64(fp)
  809e8c:	e0bffe17 	ldw	r2,-8(fp)
  809e90:	1880050e 	bge	r3,r2,809ea8 <altera_avalon_uart_read+0xd4>
  809e94:	e0bffc17 	ldw	r2,-16(fp)
  809e98:	10c00217 	ldw	r3,8(r2)
  809e9c:	e0bffc17 	ldw	r2,-16(fp)
  809ea0:	10800317 	ldw	r2,12(r2)
  809ea4:	18bfe51e 	bne	r3,r2,809e3c <__alt_mem_epcs_flash_controller_0+0xff800e3c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  809ea8:	e0bff017 	ldw	r2,-64(fp)
  809eac:	10003a1e 	bne	r2,zero,809f98 <altera_avalon_uart_read+0x1c4>
  809eb0:	e0bffc17 	ldw	r2,-16(fp)
  809eb4:	10c00217 	ldw	r3,8(r2)
  809eb8:	e0bffc17 	ldw	r2,-16(fp)
  809ebc:	10800317 	ldw	r2,12(r2)
  809ec0:	1880351e 	bne	r3,r2,809f98 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  809ec4:	e0bff117 	ldw	r2,-60(fp)
  809ec8:	1000071e 	bne	r2,zero,809ee8 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  809ecc:	0809d980 	call	809d98 <alt_get_errno>
  809ed0:	1007883a 	mov	r3,r2
  809ed4:	008002c4 	movi	r2,11
  809ed8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  809edc:	00800044 	movi	r2,1
  809ee0:	e0bfef05 	stb	r2,-68(fp)
        break;
  809ee4:	00003006 	br	809fa8 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809ee8:	0005303a 	rdctl	r2,status
  809eec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809ef0:	e0fff517 	ldw	r3,-44(fp)
  809ef4:	00bfff84 	movi	r2,-2
  809ef8:	1884703a 	and	r2,r3,r2
  809efc:	1001703a 	wrctl	status,r2
  
  return context;
  809f00:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  809f04:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809f08:	e0bffc17 	ldw	r2,-16(fp)
  809f0c:	10800117 	ldw	r2,4(r2)
  809f10:	10c02014 	ori	r3,r2,128
  809f14:	e0bffc17 	ldw	r2,-16(fp)
  809f18:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809f1c:	e0bffc17 	ldw	r2,-16(fp)
  809f20:	10800017 	ldw	r2,0(r2)
  809f24:	10800304 	addi	r2,r2,12
  809f28:	e0fffc17 	ldw	r3,-16(fp)
  809f2c:	18c00117 	ldw	r3,4(r3)
  809f30:	10c00035 	stwio	r3,0(r2)
  809f34:	e0bff417 	ldw	r2,-48(fp)
  809f38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809f3c:	e0bff617 	ldw	r2,-40(fp)
  809f40:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  809f44:	e0bffc17 	ldw	r2,-16(fp)
  809f48:	10800717 	ldw	r2,28(r2)
  809f4c:	e0bff215 	stw	r2,-56(fp)
  809f50:	00800044 	movi	r2,1
  809f54:	e0bff98d 	sth	r2,-26(fp)
  809f58:	00bfe0c4 	movi	r2,-125
  809f5c:	e0bffa05 	stb	r2,-24(fp)
  809f60:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  809f64:	d0a03343 	ldbu	r2,-32563(gp)
  809f68:	10803fcc 	andi	r2,r2,255
  809f6c:	10000a26 	beq	r2,zero,809f98 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  809f70:	e0fff98b 	ldhu	r3,-26(fp)
  809f74:	e13ffa03 	ldbu	r4,-24(fp)
  809f78:	e17ffa8b 	ldhu	r5,-22(fp)
  809f7c:	e0bffb04 	addi	r2,fp,-20
  809f80:	d8800015 	stw	r2,0(sp)
  809f84:	280f883a 	mov	r7,r5
  809f88:	200d883a 	mov	r6,r4
  809f8c:	180b883a 	mov	r5,r3
  809f90:	e13ff217 	ldw	r4,-56(fp)
  809f94:	0802f9c0 	call	802f9c <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  809f98:	e0bff017 	ldw	r2,-64(fp)
  809f9c:	1000021e 	bne	r2,zero,809fa8 <altera_avalon_uart_read+0x1d4>
  809fa0:	e0bffe17 	ldw	r2,-8(fp)
  809fa4:	103fb81e 	bne	r2,zero,809e88 <__alt_mem_epcs_flash_controller_0+0xff800e88>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  809fa8:	e0bffc17 	ldw	r2,-16(fp)
  809fac:	10800817 	ldw	r2,32(r2)
  809fb0:	1009883a 	mov	r4,r2
  809fb4:	0805d880 	call	805d88 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809fb8:	0005303a 	rdctl	r2,status
  809fbc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809fc0:	e0fff717 	ldw	r3,-36(fp)
  809fc4:	00bfff84 	movi	r2,-2
  809fc8:	1884703a 	and	r2,r3,r2
  809fcc:	1001703a 	wrctl	status,r2
  
  return context;
  809fd0:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  809fd4:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809fd8:	e0bffc17 	ldw	r2,-16(fp)
  809fdc:	10800117 	ldw	r2,4(r2)
  809fe0:	10c02014 	ori	r3,r2,128
  809fe4:	e0bffc17 	ldw	r2,-16(fp)
  809fe8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809fec:	e0bffc17 	ldw	r2,-16(fp)
  809ff0:	10800017 	ldw	r2,0(r2)
  809ff4:	10800304 	addi	r2,r2,12
  809ff8:	e0fffc17 	ldw	r3,-16(fp)
  809ffc:	18c00117 	ldw	r3,4(r3)
  80a000:	10c00035 	stwio	r3,0(r2)
  80a004:	e0bff417 	ldw	r2,-48(fp)
  80a008:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a00c:	e0bff317 	ldw	r2,-52(fp)
  80a010:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80a014:	e0bfef03 	ldbu	r2,-68(fp)
  80a018:	10000226 	beq	r2,zero,80a024 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  80a01c:	00bffd44 	movi	r2,-11
  80a020:	00000106 	br	80a028 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  80a024:	e0bff017 	ldw	r2,-64(fp)
  }
}
  80a028:	e037883a 	mov	sp,fp
  80a02c:	dfc00117 	ldw	ra,4(sp)
  80a030:	df000017 	ldw	fp,0(sp)
  80a034:	dec00204 	addi	sp,sp,8
  80a038:	f800283a 	ret

0080a03c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a03c:	defffe04 	addi	sp,sp,-8
  80a040:	dfc00115 	stw	ra,4(sp)
  80a044:	df000015 	stw	fp,0(sp)
  80a048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a04c:	d0a02417 	ldw	r2,-32624(gp)
  80a050:	10000326 	beq	r2,zero,80a060 <alt_get_errno+0x24>
  80a054:	d0a02417 	ldw	r2,-32624(gp)
  80a058:	103ee83a 	callr	r2
  80a05c:	00000106 	br	80a064 <alt_get_errno+0x28>
  80a060:	d0a04c04 	addi	r2,gp,-32464
}
  80a064:	e037883a 	mov	sp,fp
  80a068:	dfc00117 	ldw	ra,4(sp)
  80a06c:	df000017 	ldw	fp,0(sp)
  80a070:	dec00204 	addi	sp,sp,8
  80a074:	f800283a 	ret

0080a078 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80a078:	deffec04 	addi	sp,sp,-80
  80a07c:	dfc01315 	stw	ra,76(sp)
  80a080:	df001215 	stw	fp,72(sp)
  80a084:	df001204 	addi	fp,sp,72
  80a088:	e13ffc15 	stw	r4,-16(fp)
  80a08c:	e17ffd15 	stw	r5,-12(fp)
  80a090:	e1bffe15 	stw	r6,-8(fp)
  80a094:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80a098:	e0bffe17 	ldw	r2,-8(fp)
  80a09c:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80a0a0:	e0bfff17 	ldw	r2,-4(fp)
  80a0a4:	1090000c 	andi	r2,r2,16384
  80a0a8:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  80a0ac:	e0bffc17 	ldw	r2,-16(fp)
  80a0b0:	10800917 	ldw	r2,36(r2)
  80a0b4:	e0bff815 	stw	r2,-32(fp)
  80a0b8:	e03ff90d 	sth	zero,-28(fp)
  80a0bc:	e0bff90b 	ldhu	r2,-28(fp)
  80a0c0:	e0fffb44 	addi	r3,fp,-19
  80a0c4:	180d883a 	mov	r6,r3
  80a0c8:	100b883a 	mov	r5,r2
  80a0cc:	e13ff817 	ldw	r4,-32(fp)
  80a0d0:	0805a100 	call	805a10 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80a0d4:	00005106 	br	80a21c <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80a0d8:	e0bffc17 	ldw	r2,-16(fp)
  80a0dc:	10800517 	ldw	r2,20(r2)
  80a0e0:	10800044 	addi	r2,r2,1
  80a0e4:	10800fcc 	andi	r2,r2,63
  80a0e8:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80a0ec:	e0bffc17 	ldw	r2,-16(fp)
  80a0f0:	10c00417 	ldw	r3,16(r2)
  80a0f4:	e0bff217 	ldw	r2,-56(fp)
  80a0f8:	1880371e 	bne	r3,r2,80a1d8 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  80a0fc:	e0bff017 	ldw	r2,-64(fp)
  80a100:	10000526 	beq	r2,zero,80a118 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80a104:	080a03c0 	call	80a03c <alt_get_errno>
  80a108:	1007883a 	mov	r3,r2
  80a10c:	008002c4 	movi	r2,11
  80a110:	18800015 	stw	r2,0(r3)
        break;
  80a114:	00004306 	br	80a224 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a118:	0005303a 	rdctl	r2,status
  80a11c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a120:	e0fff517 	ldw	r3,-44(fp)
  80a124:	00bfff84 	movi	r2,-2
  80a128:	1884703a 	and	r2,r3,r2
  80a12c:	1001703a 	wrctl	status,r2
  
  return context;
  80a130:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80a134:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80a138:	e0bffc17 	ldw	r2,-16(fp)
  80a13c:	10800117 	ldw	r2,4(r2)
  80a140:	10c11014 	ori	r3,r2,1088
  80a144:	e0bffc17 	ldw	r2,-16(fp)
  80a148:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a14c:	e0bffc17 	ldw	r2,-16(fp)
  80a150:	10800017 	ldw	r2,0(r2)
  80a154:	10800304 	addi	r2,r2,12
  80a158:	e0fffc17 	ldw	r3,-16(fp)
  80a15c:	18c00117 	ldw	r3,4(r3)
  80a160:	10c00035 	stwio	r3,0(r2)
  80a164:	e0bff417 	ldw	r2,-48(fp)
  80a168:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a16c:	e0bff117 	ldw	r2,-60(fp)
  80a170:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  80a174:	e0bffc17 	ldw	r2,-16(fp)
  80a178:	10800717 	ldw	r2,28(r2)
  80a17c:	e0bff315 	stw	r2,-52(fp)
  80a180:	00800084 	movi	r2,2
  80a184:	e0bff98d 	sth	r2,-26(fp)
  80a188:	00bfe0c4 	movi	r2,-125
  80a18c:	e0bffa05 	stb	r2,-24(fp)
  80a190:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80a194:	d0a03343 	ldbu	r2,-32563(gp)
  80a198:	10803fcc 	andi	r2,r2,255
  80a19c:	10000a26 	beq	r2,zero,80a1c8 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80a1a0:	e0fff98b 	ldhu	r3,-26(fp)
  80a1a4:	e13ffa03 	ldbu	r4,-24(fp)
  80a1a8:	e17ffa8b 	ldhu	r5,-22(fp)
  80a1ac:	e0bffb04 	addi	r2,fp,-20
  80a1b0:	d8800015 	stw	r2,0(sp)
  80a1b4:	280f883a 	mov	r7,r5
  80a1b8:	200d883a 	mov	r6,r4
  80a1bc:	180b883a 	mov	r5,r3
  80a1c0:	e13ff317 	ldw	r4,-52(fp)
  80a1c4:	0802f9c0 	call	802f9c <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80a1c8:	e0bffc17 	ldw	r2,-16(fp)
  80a1cc:	10c00417 	ldw	r3,16(r2)
  80a1d0:	e0bff217 	ldw	r2,-56(fp)
  80a1d4:	18bfe726 	beq	r3,r2,80a174 <__alt_mem_epcs_flash_controller_0+0xff801174>
      }
    }

    count--;
  80a1d8:	e0bfef17 	ldw	r2,-68(fp)
  80a1dc:	10bfffc4 	addi	r2,r2,-1
  80a1e0:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80a1e4:	e0bffc17 	ldw	r2,-16(fp)
  80a1e8:	10c00517 	ldw	r3,20(r2)
  80a1ec:	e0bffd17 	ldw	r2,-12(fp)
  80a1f0:	11000044 	addi	r4,r2,1
  80a1f4:	e13ffd15 	stw	r4,-12(fp)
  80a1f8:	10800003 	ldbu	r2,0(r2)
  80a1fc:	1009883a 	mov	r4,r2
  80a200:	e0bffc17 	ldw	r2,-16(fp)
  80a204:	10c5883a 	add	r2,r2,r3
  80a208:	10801a04 	addi	r2,r2,104
  80a20c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80a210:	e0bffc17 	ldw	r2,-16(fp)
  80a214:	e0fff217 	ldw	r3,-56(fp)
  80a218:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80a21c:	e0bfef17 	ldw	r2,-68(fp)
  80a220:	103fad1e 	bne	r2,zero,80a0d8 <__alt_mem_epcs_flash_controller_0+0xff8010d8>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  80a224:	e0bffc17 	ldw	r2,-16(fp)
  80a228:	10800917 	ldw	r2,36(r2)
  80a22c:	1009883a 	mov	r4,r2
  80a230:	0805d880 	call	805d88 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a234:	0005303a 	rdctl	r2,status
  80a238:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a23c:	e0fff717 	ldw	r3,-36(fp)
  80a240:	00bfff84 	movi	r2,-2
  80a244:	1884703a 	and	r2,r3,r2
  80a248:	1001703a 	wrctl	status,r2
  
  return context;
  80a24c:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80a250:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80a254:	e0bffc17 	ldw	r2,-16(fp)
  80a258:	10800117 	ldw	r2,4(r2)
  80a25c:	10c11014 	ori	r3,r2,1088
  80a260:	e0bffc17 	ldw	r2,-16(fp)
  80a264:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80a268:	e0bffc17 	ldw	r2,-16(fp)
  80a26c:	10800017 	ldw	r2,0(r2)
  80a270:	10800304 	addi	r2,r2,12
  80a274:	e0fffc17 	ldw	r3,-16(fp)
  80a278:	18c00117 	ldw	r3,4(r3)
  80a27c:	10c00035 	stwio	r3,0(r2)
  80a280:	e0bff417 	ldw	r2,-48(fp)
  80a284:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a288:	e0bff617 	ldw	r2,-40(fp)
  80a28c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80a290:	e0fffe17 	ldw	r3,-8(fp)
  80a294:	e0bfef17 	ldw	r2,-68(fp)
  80a298:	1885c83a 	sub	r2,r3,r2
}
  80a29c:	e037883a 	mov	sp,fp
  80a2a0:	dfc00117 	ldw	ra,4(sp)
  80a2a4:	df000017 	ldw	fp,0(sp)
  80a2a8:	dec00204 	addi	sp,sp,8
  80a2ac:	f800283a 	ret

0080a2b0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  80a2b0:	defff904 	addi	sp,sp,-28
  80a2b4:	dfc00615 	stw	ra,24(sp)
  80a2b8:	df000515 	stw	fp,20(sp)
  80a2bc:	df000504 	addi	fp,sp,20
  80a2c0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  80a2c4:	00800144 	movi	r2,5
  80a2c8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  80a2cc:	d8000215 	stw	zero,8(sp)
  80a2d0:	e0bffe44 	addi	r2,fp,-7
  80a2d4:	d8800115 	stw	r2,4(sp)
  80a2d8:	00800044 	movi	r2,1
  80a2dc:	d8800015 	stw	r2,0(sp)
  80a2e0:	e1fffe04 	addi	r7,fp,-8
  80a2e4:	01800044 	movi	r6,1
  80a2e8:	000b883a 	mov	r5,zero
  80a2ec:	e13fff17 	ldw	r4,-4(fp)
  80a2f0:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  80a2f4:	e0bffe43 	ldbu	r2,-7(fp)
}
  80a2f8:	e037883a 	mov	sp,fp
  80a2fc:	dfc00117 	ldw	ra,4(sp)
  80a300:	df000017 	ldw	fp,0(sp)
  80a304:	dec00204 	addi	sp,sp,8
  80a308:	f800283a 	ret

0080a30c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  80a30c:	defffd04 	addi	sp,sp,-12
  80a310:	dfc00215 	stw	ra,8(sp)
  80a314:	df000115 	stw	fp,4(sp)
  80a318:	df000104 	addi	fp,sp,4
  80a31c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  80a320:	e13fff17 	ldw	r4,-4(fp)
  80a324:	080a2b00 	call	80a2b0 <epcs_read_status_register>
  80a328:	10803fcc 	andi	r2,r2,255
  80a32c:	1080004c 	andi	r2,r2,1
}
  80a330:	e037883a 	mov	sp,fp
  80a334:	dfc00117 	ldw	ra,4(sp)
  80a338:	df000017 	ldw	fp,0(sp)
  80a33c:	dec00204 	addi	sp,sp,8
  80a340:	f800283a 	ret

0080a344 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  80a344:	defffd04 	addi	sp,sp,-12
  80a348:	dfc00215 	stw	ra,8(sp)
  80a34c:	df000115 	stw	fp,4(sp)
  80a350:	df000104 	addi	fp,sp,4
  80a354:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  80a358:	0001883a 	nop
  80a35c:	e13fff17 	ldw	r4,-4(fp)
  80a360:	080a30c0 	call	80a30c <epcs_test_wip>
  80a364:	103ffd1e 	bne	r2,zero,80a35c <__alt_mem_epcs_flash_controller_0+0xff80135c>
  {
  }
}
  80a368:	0001883a 	nop
  80a36c:	e037883a 	mov	sp,fp
  80a370:	dfc00117 	ldw	ra,4(sp)
  80a374:	df000017 	ldw	fp,0(sp)
  80a378:	dec00204 	addi	sp,sp,8
  80a37c:	f800283a 	ret

0080a380 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  80a380:	defff604 	addi	sp,sp,-40
  80a384:	dfc00915 	stw	ra,36(sp)
  80a388:	df000815 	stw	fp,32(sp)
  80a38c:	df000804 	addi	fp,sp,32
  80a390:	e13ffd15 	stw	r4,-12(fp)
  80a394:	e17ffe15 	stw	r5,-8(fp)
  80a398:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  80a39c:	e0bfff17 	ldw	r2,-4(fp)
  80a3a0:	10001226 	beq	r2,zero,80a3ec <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  80a3a4:	00bff604 	movi	r2,-40
  80a3a8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  80a3ac:	e0bffe17 	ldw	r2,-8(fp)
  80a3b0:	1004d63a 	srli	r2,r2,24
  80a3b4:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  80a3b8:	e0bffe17 	ldw	r2,-8(fp)
  80a3bc:	1004d43a 	srli	r2,r2,16
  80a3c0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  80a3c4:	e0bffe17 	ldw	r2,-8(fp)
  80a3c8:	1004d23a 	srli	r2,r2,8
  80a3cc:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  80a3d0:	e0bffe17 	ldw	r2,-8(fp)
  80a3d4:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  80a3d8:	00800144 	movi	r2,5
  80a3dc:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  80a3e0:	e13ffd17 	ldw	r4,-12(fp)
  80a3e4:	080a8340 	call	80a834 <epcs_enter_4_bytes_mode>
  80a3e8:	00000c06 	br	80a41c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  80a3ec:	00bff604 	movi	r2,-40
  80a3f0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  80a3f4:	e0bffe17 	ldw	r2,-8(fp)
  80a3f8:	1004d43a 	srli	r2,r2,16
  80a3fc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  80a400:	e0bffe17 	ldw	r2,-8(fp)
  80a404:	1004d23a 	srli	r2,r2,8
  80a408:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  80a40c:	e0bffe17 	ldw	r2,-8(fp)
  80a410:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  80a414:	00800104 	movi	r2,4
  80a418:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  80a41c:	e13ffd17 	ldw	r4,-12(fp)
  80a420:	080a5700 	call	80a570 <epcs_write_enable>

  alt_avalon_spi_command(
  80a424:	e0bffb03 	ldbu	r2,-20(fp)
  80a428:	e0fffb44 	addi	r3,fp,-19
  80a42c:	d8000215 	stw	zero,8(sp)
  80a430:	d8000115 	stw	zero,4(sp)
  80a434:	d8000015 	stw	zero,0(sp)
  80a438:	180f883a 	mov	r7,r3
  80a43c:	100d883a 	mov	r6,r2
  80a440:	000b883a 	mov	r5,zero
  80a444:	e13ffd17 	ldw	r4,-12(fp)
  80a448:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80a44c:	e13ffd17 	ldw	r4,-12(fp)
  80a450:	080a3440 	call	80a344 <epcs_await_wip_released>

  if(four_bytes_mode)
  80a454:	e0bfff17 	ldw	r2,-4(fp)
  80a458:	10000226 	beq	r2,zero,80a464 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  80a45c:	e13ffd17 	ldw	r4,-12(fp)
  80a460:	080a8900 	call	80a890 <epcs_exit_4_bytes_mode>
  }
}
  80a464:	0001883a 	nop
  80a468:	e037883a 	mov	sp,fp
  80a46c:	dfc00117 	ldw	ra,4(sp)
  80a470:	df000017 	ldw	fp,0(sp)
  80a474:	dec00204 	addi	sp,sp,8
  80a478:	f800283a 	ret

0080a47c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  80a47c:	defff404 	addi	sp,sp,-48
  80a480:	dfc00b15 	stw	ra,44(sp)
  80a484:	df000a15 	stw	fp,40(sp)
  80a488:	df000a04 	addi	fp,sp,40
  80a48c:	e13ffc15 	stw	r4,-16(fp)
  80a490:	e17ffd15 	stw	r5,-12(fp)
  80a494:	e1bffe15 	stw	r6,-8(fp)
  80a498:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  80a49c:	008000c4 	movi	r2,3
  80a4a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80a4a4:	e0800217 	ldw	r2,8(fp)
  80a4a8:	10001026 	beq	r2,zero,80a4ec <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  80a4ac:	e0bffd17 	ldw	r2,-12(fp)
  80a4b0:	1004d63a 	srli	r2,r2,24
  80a4b4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  80a4b8:	e0bffd17 	ldw	r2,-12(fp)
  80a4bc:	1005d43a 	srai	r2,r2,16
  80a4c0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  80a4c4:	e0bffd17 	ldw	r2,-12(fp)
  80a4c8:	1005d23a 	srai	r2,r2,8
  80a4cc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  80a4d0:	e0bffd17 	ldw	r2,-12(fp)
  80a4d4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  80a4d8:	00800144 	movi	r2,5
  80a4dc:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  80a4e0:	e13ffc17 	ldw	r4,-16(fp)
  80a4e4:	080a8340 	call	80a834 <epcs_enter_4_bytes_mode>
  80a4e8:	00000a06 	br	80a514 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  80a4ec:	e0bffd17 	ldw	r2,-12(fp)
  80a4f0:	1005d43a 	srai	r2,r2,16
  80a4f4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  80a4f8:	e0bffd17 	ldw	r2,-12(fp)
  80a4fc:	1005d23a 	srai	r2,r2,8
  80a500:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  80a504:	e0bffd17 	ldw	r2,-12(fp)
  80a508:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  80a50c:	00800104 	movi	r2,4
  80a510:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  80a514:	e13ffc17 	ldw	r4,-16(fp)
  80a518:	080a3440 	call	80a344 <epcs_await_wip_released>

  alt_avalon_spi_command(
  80a51c:	e0bfff17 	ldw	r2,-4(fp)
  80a520:	e13ffa04 	addi	r4,fp,-24
  80a524:	d8000215 	stw	zero,8(sp)
  80a528:	e0fffe17 	ldw	r3,-8(fp)
  80a52c:	d8c00115 	stw	r3,4(sp)
  80a530:	d8800015 	stw	r2,0(sp)
  80a534:	200f883a 	mov	r7,r4
  80a538:	e1bff917 	ldw	r6,-28(fp)
  80a53c:	000b883a 	mov	r5,zero
  80a540:	e13ffc17 	ldw	r4,-16(fp)
  80a544:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  80a548:	e0800217 	ldw	r2,8(fp)
  80a54c:	10000226 	beq	r2,zero,80a558 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  80a550:	e13ffc17 	ldw	r4,-16(fp)
  80a554:	080a8900 	call	80a890 <epcs_exit_4_bytes_mode>
  }

  return length;
  80a558:	e0bfff17 	ldw	r2,-4(fp)
}
  80a55c:	e037883a 	mov	sp,fp
  80a560:	dfc00117 	ldw	ra,4(sp)
  80a564:	df000017 	ldw	fp,0(sp)
  80a568:	dec00204 	addi	sp,sp,8
  80a56c:	f800283a 	ret

0080a570 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  80a570:	defff904 	addi	sp,sp,-28
  80a574:	dfc00615 	stw	ra,24(sp)
  80a578:	df000515 	stw	fp,20(sp)
  80a57c:	df000504 	addi	fp,sp,20
  80a580:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  80a584:	00800184 	movi	r2,6
  80a588:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  80a58c:	d8000215 	stw	zero,8(sp)
  80a590:	d8000115 	stw	zero,4(sp)
  80a594:	d8000015 	stw	zero,0(sp)
  80a598:	e1fffe04 	addi	r7,fp,-8
  80a59c:	01800044 	movi	r6,1
  80a5a0:	000b883a 	mov	r5,zero
  80a5a4:	e13fff17 	ldw	r4,-4(fp)
  80a5a8:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  80a5ac:	0001883a 	nop
  80a5b0:	e037883a 	mov	sp,fp
  80a5b4:	dfc00117 	ldw	ra,4(sp)
  80a5b8:	df000017 	ldw	fp,0(sp)
  80a5bc:	dec00204 	addi	sp,sp,8
  80a5c0:	f800283a 	ret

0080a5c4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  80a5c4:	defff804 	addi	sp,sp,-32
  80a5c8:	dfc00715 	stw	ra,28(sp)
  80a5cc:	df000615 	stw	fp,24(sp)
  80a5d0:	df000604 	addi	fp,sp,24
  80a5d4:	e13ffe15 	stw	r4,-8(fp)
  80a5d8:	2805883a 	mov	r2,r5
  80a5dc:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  80a5e0:	00800044 	movi	r2,1
  80a5e4:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  80a5e8:	e0bfff03 	ldbu	r2,-4(fp)
  80a5ec:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  80a5f0:	d8000215 	stw	zero,8(sp)
  80a5f4:	d8000115 	stw	zero,4(sp)
  80a5f8:	d8000015 	stw	zero,0(sp)
  80a5fc:	e1fffd04 	addi	r7,fp,-12
  80a600:	01800084 	movi	r6,2
  80a604:	000b883a 	mov	r5,zero
  80a608:	e13ffe17 	ldw	r4,-8(fp)
  80a60c:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  80a610:	e13ffe17 	ldw	r4,-8(fp)
  80a614:	080a3440 	call	80a344 <epcs_await_wip_released>
}
  80a618:	0001883a 	nop
  80a61c:	e037883a 	mov	sp,fp
  80a620:	dfc00117 	ldw	ra,4(sp)
  80a624:	df000017 	ldw	fp,0(sp)
  80a628:	dec00204 	addi	sp,sp,8
  80a62c:	f800283a 	ret

0080a630 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  80a630:	defff404 	addi	sp,sp,-48
  80a634:	dfc00b15 	stw	ra,44(sp)
  80a638:	df000a15 	stw	fp,40(sp)
  80a63c:	df000a04 	addi	fp,sp,40
  80a640:	e13ffc15 	stw	r4,-16(fp)
  80a644:	e17ffd15 	stw	r5,-12(fp)
  80a648:	e1bffe15 	stw	r6,-8(fp)
  80a64c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  80a650:	00800084 	movi	r2,2
  80a654:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  80a658:	e0800217 	ldw	r2,8(fp)
  80a65c:	10001026 	beq	r2,zero,80a6a0 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  80a660:	e0bffd17 	ldw	r2,-12(fp)
  80a664:	1004d63a 	srli	r2,r2,24
  80a668:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  80a66c:	e0bffd17 	ldw	r2,-12(fp)
  80a670:	1005d43a 	srai	r2,r2,16
  80a674:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  80a678:	e0bffd17 	ldw	r2,-12(fp)
  80a67c:	1005d23a 	srai	r2,r2,8
  80a680:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  80a684:	e0bffd17 	ldw	r2,-12(fp)
  80a688:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  80a68c:	00800144 	movi	r2,5
  80a690:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  80a694:	e13ffc17 	ldw	r4,-16(fp)
  80a698:	080a8340 	call	80a834 <epcs_enter_4_bytes_mode>
  80a69c:	00000a06 	br	80a6c8 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  80a6a0:	e0bffd17 	ldw	r2,-12(fp)
  80a6a4:	1005d43a 	srai	r2,r2,16
  80a6a8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  80a6ac:	e0bffd17 	ldw	r2,-12(fp)
  80a6b0:	1005d23a 	srai	r2,r2,8
  80a6b4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  80a6b8:	e0bffd17 	ldw	r2,-12(fp)
  80a6bc:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  80a6c0:	00800104 	movi	r2,4
  80a6c4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  80a6c8:	e13ffc17 	ldw	r4,-16(fp)
  80a6cc:	080a5700 	call	80a570 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  80a6d0:	e0fffa04 	addi	r3,fp,-24
  80a6d4:	00800044 	movi	r2,1
  80a6d8:	d8800215 	stw	r2,8(sp)
  80a6dc:	d8000115 	stw	zero,4(sp)
  80a6e0:	d8000015 	stw	zero,0(sp)
  80a6e4:	180f883a 	mov	r7,r3
  80a6e8:	e1bff917 	ldw	r6,-28(fp)
  80a6ec:	000b883a 	mov	r5,zero
  80a6f0:	e13ffc17 	ldw	r4,-16(fp)
  80a6f4:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  80a6f8:	e0bfff17 	ldw	r2,-4(fp)
  80a6fc:	d8000215 	stw	zero,8(sp)
  80a700:	d8000115 	stw	zero,4(sp)
  80a704:	d8000015 	stw	zero,0(sp)
  80a708:	e1fffe17 	ldw	r7,-8(fp)
  80a70c:	100d883a 	mov	r6,r2
  80a710:	000b883a 	mov	r5,zero
  80a714:	e13ffc17 	ldw	r4,-16(fp)
  80a718:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  80a71c:	e13ffc17 	ldw	r4,-16(fp)
  80a720:	080a3440 	call	80a344 <epcs_await_wip_released>

  if(four_bytes_mode)
  80a724:	e0800217 	ldw	r2,8(fp)
  80a728:	10000226 	beq	r2,zero,80a734 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  80a72c:	e13ffc17 	ldw	r4,-16(fp)
  80a730:	080a8900 	call	80a890 <epcs_exit_4_bytes_mode>
  }

  return length;
  80a734:	e0bfff17 	ldw	r2,-4(fp)
}
  80a738:	e037883a 	mov	sp,fp
  80a73c:	dfc00117 	ldw	ra,4(sp)
  80a740:	df000017 	ldw	fp,0(sp)
  80a744:	dec00204 	addi	sp,sp,8
  80a748:	f800283a 	ret

0080a74c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  80a74c:	defff804 	addi	sp,sp,-32
  80a750:	dfc00715 	stw	ra,28(sp)
  80a754:	df000615 	stw	fp,24(sp)
  80a758:	df000604 	addi	fp,sp,24
  80a75c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  80a760:	00bfeac4 	movi	r2,-85
  80a764:	e0bffd05 	stb	r2,-12(fp)
  80a768:	e03ffd45 	stb	zero,-11(fp)
  80a76c:	e03ffd85 	stb	zero,-10(fp)
  80a770:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  80a774:	d8000215 	stw	zero,8(sp)
  80a778:	e0bffe04 	addi	r2,fp,-8
  80a77c:	d8800115 	stw	r2,4(sp)
  80a780:	00800044 	movi	r2,1
  80a784:	d8800015 	stw	r2,0(sp)
  80a788:	e1fffd04 	addi	r7,fp,-12
  80a78c:	01800104 	movi	r6,4
  80a790:	000b883a 	mov	r5,zero
  80a794:	e13fff17 	ldw	r4,-4(fp)
  80a798:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  80a79c:	e0bffe03 	ldbu	r2,-8(fp)
}
  80a7a0:	e037883a 	mov	sp,fp
  80a7a4:	dfc00117 	ldw	ra,4(sp)
  80a7a8:	df000017 	ldw	fp,0(sp)
  80a7ac:	dec00204 	addi	sp,sp,8
  80a7b0:	f800283a 	ret

0080a7b4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  80a7b4:	defff904 	addi	sp,sp,-28
  80a7b8:	dfc00615 	stw	ra,24(sp)
  80a7bc:	df000515 	stw	fp,20(sp)
  80a7c0:	df000504 	addi	fp,sp,20
  80a7c4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  80a7c8:	00bfe7c4 	movi	r2,-97
  80a7cc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  80a7d0:	d8000215 	stw	zero,8(sp)
  80a7d4:	e0bffe44 	addi	r2,fp,-7
  80a7d8:	d8800115 	stw	r2,4(sp)
  80a7dc:	008000c4 	movi	r2,3
  80a7e0:	d8800015 	stw	r2,0(sp)
  80a7e4:	e1fffe04 	addi	r7,fp,-8
  80a7e8:	01800044 	movi	r6,1
  80a7ec:	000b883a 	mov	r5,zero
  80a7f0:	e13fff17 	ldw	r4,-4(fp)
  80a7f4:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  80a7f8:	e0bffe43 	ldbu	r2,-7(fp)
  80a7fc:	10803fcc 	andi	r2,r2,255
  80a800:	1006943a 	slli	r3,r2,16
  80a804:	e0bffe83 	ldbu	r2,-6(fp)
  80a808:	10803fcc 	andi	r2,r2,255
  80a80c:	1004923a 	slli	r2,r2,8
  80a810:	1886b03a 	or	r3,r3,r2
  80a814:	e0bffec3 	ldbu	r2,-5(fp)
  80a818:	10803fcc 	andi	r2,r2,255
  80a81c:	1884b03a 	or	r2,r3,r2
}
  80a820:	e037883a 	mov	sp,fp
  80a824:	dfc00117 	ldw	ra,4(sp)
  80a828:	df000017 	ldw	fp,0(sp)
  80a82c:	dec00204 	addi	sp,sp,8
  80a830:	f800283a 	ret

0080a834 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  80a834:	defff904 	addi	sp,sp,-28
  80a838:	dfc00615 	stw	ra,24(sp)
  80a83c:	df000515 	stw	fp,20(sp)
  80a840:	df000504 	addi	fp,sp,20
  80a844:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  80a848:	00bfedc4 	movi	r2,-73
  80a84c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80a850:	e13fff17 	ldw	r4,-4(fp)
  80a854:	080a5700 	call	80a570 <epcs_write_enable>

  alt_avalon_spi_command(
  80a858:	d8000215 	stw	zero,8(sp)
  80a85c:	d8000115 	stw	zero,4(sp)
  80a860:	d8000015 	stw	zero,0(sp)
  80a864:	e1fffe04 	addi	r7,fp,-8
  80a868:	01800044 	movi	r6,1
  80a86c:	000b883a 	mov	r5,zero
  80a870:	e13fff17 	ldw	r4,-4(fp)
  80a874:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80a878:	0001883a 	nop
}
  80a87c:	e037883a 	mov	sp,fp
  80a880:	dfc00117 	ldw	ra,4(sp)
  80a884:	df000017 	ldw	fp,0(sp)
  80a888:	dec00204 	addi	sp,sp,8
  80a88c:	f800283a 	ret

0080a890 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  80a890:	defff904 	addi	sp,sp,-28
  80a894:	dfc00615 	stw	ra,24(sp)
  80a898:	df000515 	stw	fp,20(sp)
  80a89c:	df000504 	addi	fp,sp,20
  80a8a0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  80a8a4:	00bffa44 	movi	r2,-23
  80a8a8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80a8ac:	e13fff17 	ldw	r4,-4(fp)
  80a8b0:	080a5700 	call	80a570 <epcs_write_enable>

  alt_avalon_spi_command(
  80a8b4:	d8000215 	stw	zero,8(sp)
  80a8b8:	d8000115 	stw	zero,4(sp)
  80a8bc:	d8000015 	stw	zero,0(sp)
  80a8c0:	e1fffe04 	addi	r7,fp,-8
  80a8c4:	01800044 	movi	r6,1
  80a8c8:	000b883a 	mov	r5,zero
  80a8cc:	e13fff17 	ldw	r4,-4(fp)
  80a8d0:	080b9dc0 	call	80b9dc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  80a8d4:	0001883a 	nop
}
  80a8d8:	e037883a 	mov	sp,fp
  80a8dc:	dfc00117 	ldw	ra,4(sp)
  80a8e0:	df000017 	ldw	fp,0(sp)
  80a8e4:	dec00204 	addi	sp,sp,8
  80a8e8:	f800283a 	ret

0080a8ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80a8ec:	defff504 	addi	sp,sp,-44
  80a8f0:	df000a15 	stw	fp,40(sp)
  80a8f4:	df000a04 	addi	fp,sp,40
  80a8f8:	e13ffc15 	stw	r4,-16(fp)
  80a8fc:	e17ffd15 	stw	r5,-12(fp)
  80a900:	e1bffe15 	stw	r6,-8(fp)
  80a904:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80a908:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80a90c:	d0a04917 	ldw	r2,-32476(gp)
  
  if (alt_ticks_per_second ())
  80a910:	10003c26 	beq	r2,zero,80aa04 <alt_alarm_start+0x118>
  {
    if (alarm)
  80a914:	e0bffc17 	ldw	r2,-16(fp)
  80a918:	10003826 	beq	r2,zero,80a9fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80a91c:	e0bffc17 	ldw	r2,-16(fp)
  80a920:	e0fffe17 	ldw	r3,-8(fp)
  80a924:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80a928:	e0bffc17 	ldw	r2,-16(fp)
  80a92c:	e0ffff17 	ldw	r3,-4(fp)
  80a930:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a934:	0005303a 	rdctl	r2,status
  80a938:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a93c:	e0fff917 	ldw	r3,-28(fp)
  80a940:	00bfff84 	movi	r2,-2
  80a944:	1884703a 	and	r2,r3,r2
  80a948:	1001703a 	wrctl	status,r2
  
  return context;
  80a94c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80a950:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80a954:	d0a04a17 	ldw	r2,-32472(gp)
      
      current_nticks = alt_nticks();
  80a958:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80a95c:	e0fffd17 	ldw	r3,-12(fp)
  80a960:	e0bff617 	ldw	r2,-40(fp)
  80a964:	1885883a 	add	r2,r3,r2
  80a968:	10c00044 	addi	r3,r2,1
  80a96c:	e0bffc17 	ldw	r2,-16(fp)
  80a970:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80a974:	e0bffc17 	ldw	r2,-16(fp)
  80a978:	10c00217 	ldw	r3,8(r2)
  80a97c:	e0bff617 	ldw	r2,-40(fp)
  80a980:	1880042e 	bgeu	r3,r2,80a994 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80a984:	e0bffc17 	ldw	r2,-16(fp)
  80a988:	00c00044 	movi	r3,1
  80a98c:	10c00405 	stb	r3,16(r2)
  80a990:	00000206 	br	80a99c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80a994:	e0bffc17 	ldw	r2,-16(fp)
  80a998:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80a99c:	e0bffc17 	ldw	r2,-16(fp)
  80a9a0:	d0e02804 	addi	r3,gp,-32608
  80a9a4:	e0fffa15 	stw	r3,-24(fp)
  80a9a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80a9ac:	e0bffb17 	ldw	r2,-20(fp)
  80a9b0:	e0fffa17 	ldw	r3,-24(fp)
  80a9b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80a9b8:	e0bffa17 	ldw	r2,-24(fp)
  80a9bc:	10c00017 	ldw	r3,0(r2)
  80a9c0:	e0bffb17 	ldw	r2,-20(fp)
  80a9c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80a9c8:	e0bffa17 	ldw	r2,-24(fp)
  80a9cc:	10800017 	ldw	r2,0(r2)
  80a9d0:	e0fffb17 	ldw	r3,-20(fp)
  80a9d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80a9d8:	e0bffa17 	ldw	r2,-24(fp)
  80a9dc:	e0fffb17 	ldw	r3,-20(fp)
  80a9e0:	10c00015 	stw	r3,0(r2)
  80a9e4:	e0bff817 	ldw	r2,-32(fp)
  80a9e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a9ec:	e0bff717 	ldw	r2,-36(fp)
  80a9f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80a9f4:	0005883a 	mov	r2,zero
  80a9f8:	00000306 	br	80aa08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80a9fc:	00bffa84 	movi	r2,-22
  80aa00:	00000106 	br	80aa08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80aa04:	00bfde84 	movi	r2,-134
  }
}
  80aa08:	e037883a 	mov	sp,fp
  80aa0c:	df000017 	ldw	fp,0(sp)
  80aa10:	dec00104 	addi	sp,sp,4
  80aa14:	f800283a 	ret

0080aa18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aa18:	defffe04 	addi	sp,sp,-8
  80aa1c:	dfc00115 	stw	ra,4(sp)
  80aa20:	df000015 	stw	fp,0(sp)
  80aa24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80aa28:	d0a02417 	ldw	r2,-32624(gp)
  80aa2c:	10000326 	beq	r2,zero,80aa3c <alt_get_errno+0x24>
  80aa30:	d0a02417 	ldw	r2,-32624(gp)
  80aa34:	103ee83a 	callr	r2
  80aa38:	00000106 	br	80aa40 <alt_get_errno+0x28>
  80aa3c:	d0a04c04 	addi	r2,gp,-32464
}
  80aa40:	e037883a 	mov	sp,fp
  80aa44:	dfc00117 	ldw	ra,4(sp)
  80aa48:	df000017 	ldw	fp,0(sp)
  80aa4c:	dec00204 	addi	sp,sp,8
  80aa50:	f800283a 	ret

0080aa54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80aa54:	defffb04 	addi	sp,sp,-20
  80aa58:	dfc00415 	stw	ra,16(sp)
  80aa5c:	df000315 	stw	fp,12(sp)
  80aa60:	df000304 	addi	fp,sp,12
  80aa64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80aa68:	e0bfff17 	ldw	r2,-4(fp)
  80aa6c:	10000816 	blt	r2,zero,80aa90 <close+0x3c>
  80aa70:	01400304 	movi	r5,12
  80aa74:	e13fff17 	ldw	r4,-4(fp)
  80aa78:	080c71c0 	call	80c71c <__mulsi3>
  80aa7c:	1007883a 	mov	r3,r2
  80aa80:	00802074 	movhi	r2,129
  80aa84:	10b70504 	addi	r2,r2,-9196
  80aa88:	1885883a 	add	r2,r3,r2
  80aa8c:	00000106 	br	80aa94 <close+0x40>
  80aa90:	0005883a 	mov	r2,zero
  80aa94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80aa98:	e0bffd17 	ldw	r2,-12(fp)
  80aa9c:	10001926 	beq	r2,zero,80ab04 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80aaa0:	e0bffd17 	ldw	r2,-12(fp)
  80aaa4:	10800017 	ldw	r2,0(r2)
  80aaa8:	10800417 	ldw	r2,16(r2)
  80aaac:	10000626 	beq	r2,zero,80aac8 <close+0x74>
  80aab0:	e0bffd17 	ldw	r2,-12(fp)
  80aab4:	10800017 	ldw	r2,0(r2)
  80aab8:	10800417 	ldw	r2,16(r2)
  80aabc:	e13ffd17 	ldw	r4,-12(fp)
  80aac0:	103ee83a 	callr	r2
  80aac4:	00000106 	br	80aacc <close+0x78>
  80aac8:	0005883a 	mov	r2,zero
  80aacc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80aad0:	e13fff17 	ldw	r4,-4(fp)
  80aad4:	080b4380 	call	80b438 <alt_release_fd>
    if (rval < 0)
  80aad8:	e0bffe17 	ldw	r2,-8(fp)
  80aadc:	1000070e 	bge	r2,zero,80aafc <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80aae0:	080aa180 	call	80aa18 <alt_get_errno>
  80aae4:	1007883a 	mov	r3,r2
  80aae8:	e0bffe17 	ldw	r2,-8(fp)
  80aaec:	0085c83a 	sub	r2,zero,r2
  80aaf0:	18800015 	stw	r2,0(r3)
      return -1;
  80aaf4:	00bfffc4 	movi	r2,-1
  80aaf8:	00000706 	br	80ab18 <close+0xc4>
    }
    return 0;
  80aafc:	0005883a 	mov	r2,zero
  80ab00:	00000506 	br	80ab18 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ab04:	080aa180 	call	80aa18 <alt_get_errno>
  80ab08:	1007883a 	mov	r3,r2
  80ab0c:	00801444 	movi	r2,81
  80ab10:	18800015 	stw	r2,0(r3)
    return -1;
  80ab14:	00bfffc4 	movi	r2,-1
  }
}
  80ab18:	e037883a 	mov	sp,fp
  80ab1c:	dfc00117 	ldw	ra,4(sp)
  80ab20:	df000017 	ldw	fp,0(sp)
  80ab24:	dec00204 	addi	sp,sp,8
  80ab28:	f800283a 	ret

0080ab2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ab2c:	defffc04 	addi	sp,sp,-16
  80ab30:	df000315 	stw	fp,12(sp)
  80ab34:	df000304 	addi	fp,sp,12
  80ab38:	e13ffd15 	stw	r4,-12(fp)
  80ab3c:	e17ffe15 	stw	r5,-8(fp)
  80ab40:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ab44:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab48:	e037883a 	mov	sp,fp
  80ab4c:	df000017 	ldw	fp,0(sp)
  80ab50:	dec00104 	addi	sp,sp,4
  80ab54:	f800283a 	ret

0080ab58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab58:	defffe04 	addi	sp,sp,-8
  80ab5c:	dfc00115 	stw	ra,4(sp)
  80ab60:	df000015 	stw	fp,0(sp)
  80ab64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ab68:	d0a02417 	ldw	r2,-32624(gp)
  80ab6c:	10000326 	beq	r2,zero,80ab7c <alt_get_errno+0x24>
  80ab70:	d0a02417 	ldw	r2,-32624(gp)
  80ab74:	103ee83a 	callr	r2
  80ab78:	00000106 	br	80ab80 <alt_get_errno+0x28>
  80ab7c:	d0a04c04 	addi	r2,gp,-32464
}
  80ab80:	e037883a 	mov	sp,fp
  80ab84:	dfc00117 	ldw	ra,4(sp)
  80ab88:	df000017 	ldw	fp,0(sp)
  80ab8c:	dec00204 	addi	sp,sp,8
  80ab90:	f800283a 	ret

0080ab94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80ab94:	defffa04 	addi	sp,sp,-24
  80ab98:	dfc00515 	stw	ra,20(sp)
  80ab9c:	df000415 	stw	fp,16(sp)
  80aba0:	df000404 	addi	fp,sp,16
  80aba4:	e13ffe15 	stw	r4,-8(fp)
  80aba8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80abac:	e0bffe17 	ldw	r2,-8(fp)
  80abb0:	10000326 	beq	r2,zero,80abc0 <alt_dev_llist_insert+0x2c>
  80abb4:	e0bffe17 	ldw	r2,-8(fp)
  80abb8:	10800217 	ldw	r2,8(r2)
  80abbc:	1000061e 	bne	r2,zero,80abd8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80abc0:	080ab580 	call	80ab58 <alt_get_errno>
  80abc4:	1007883a 	mov	r3,r2
  80abc8:	00800584 	movi	r2,22
  80abcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80abd0:	00bffa84 	movi	r2,-22
  80abd4:	00001306 	br	80ac24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80abd8:	e0bffe17 	ldw	r2,-8(fp)
  80abdc:	e0ffff17 	ldw	r3,-4(fp)
  80abe0:	e0fffc15 	stw	r3,-16(fp)
  80abe4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80abe8:	e0bffd17 	ldw	r2,-12(fp)
  80abec:	e0fffc17 	ldw	r3,-16(fp)
  80abf0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80abf4:	e0bffc17 	ldw	r2,-16(fp)
  80abf8:	10c00017 	ldw	r3,0(r2)
  80abfc:	e0bffd17 	ldw	r2,-12(fp)
  80ac00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ac04:	e0bffc17 	ldw	r2,-16(fp)
  80ac08:	10800017 	ldw	r2,0(r2)
  80ac0c:	e0fffd17 	ldw	r3,-12(fp)
  80ac10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ac14:	e0bffc17 	ldw	r2,-16(fp)
  80ac18:	e0fffd17 	ldw	r3,-12(fp)
  80ac1c:	10c00015 	stw	r3,0(r2)

  return 0;  
  80ac20:	0005883a 	mov	r2,zero
}
  80ac24:	e037883a 	mov	sp,fp
  80ac28:	dfc00117 	ldw	ra,4(sp)
  80ac2c:	df000017 	ldw	fp,0(sp)
  80ac30:	dec00204 	addi	sp,sp,8
  80ac34:	f800283a 	ret

0080ac38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ac38:	defffd04 	addi	sp,sp,-12
  80ac3c:	dfc00215 	stw	ra,8(sp)
  80ac40:	df000115 	stw	fp,4(sp)
  80ac44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ac48:	00802074 	movhi	r2,129
  80ac4c:	10b1dd04 	addi	r2,r2,-14476
  80ac50:	e0bfff15 	stw	r2,-4(fp)
  80ac54:	00000606 	br	80ac70 <_do_ctors+0x38>
        (*ctor) (); 
  80ac58:	e0bfff17 	ldw	r2,-4(fp)
  80ac5c:	10800017 	ldw	r2,0(r2)
  80ac60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ac64:	e0bfff17 	ldw	r2,-4(fp)
  80ac68:	10bfff04 	addi	r2,r2,-4
  80ac6c:	e0bfff15 	stw	r2,-4(fp)
  80ac70:	e0ffff17 	ldw	r3,-4(fp)
  80ac74:	00802074 	movhi	r2,129
  80ac78:	10b1de04 	addi	r2,r2,-14472
  80ac7c:	18bff62e 	bgeu	r3,r2,80ac58 <__alt_mem_epcs_flash_controller_0+0xff801c58>
        (*ctor) (); 
}
  80ac80:	0001883a 	nop
  80ac84:	e037883a 	mov	sp,fp
  80ac88:	dfc00117 	ldw	ra,4(sp)
  80ac8c:	df000017 	ldw	fp,0(sp)
  80ac90:	dec00204 	addi	sp,sp,8
  80ac94:	f800283a 	ret

0080ac98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ac98:	defffd04 	addi	sp,sp,-12
  80ac9c:	dfc00215 	stw	ra,8(sp)
  80aca0:	df000115 	stw	fp,4(sp)
  80aca4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80aca8:	00802074 	movhi	r2,129
  80acac:	10b1dd04 	addi	r2,r2,-14476
  80acb0:	e0bfff15 	stw	r2,-4(fp)
  80acb4:	00000606 	br	80acd0 <_do_dtors+0x38>
        (*dtor) (); 
  80acb8:	e0bfff17 	ldw	r2,-4(fp)
  80acbc:	10800017 	ldw	r2,0(r2)
  80acc0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80acc4:	e0bfff17 	ldw	r2,-4(fp)
  80acc8:	10bfff04 	addi	r2,r2,-4
  80accc:	e0bfff15 	stw	r2,-4(fp)
  80acd0:	e0ffff17 	ldw	r3,-4(fp)
  80acd4:	00802074 	movhi	r2,129
  80acd8:	10b1de04 	addi	r2,r2,-14472
  80acdc:	18bff62e 	bgeu	r3,r2,80acb8 <__alt_mem_epcs_flash_controller_0+0xff801cb8>
        (*dtor) (); 
}
  80ace0:	0001883a 	nop
  80ace4:	e037883a 	mov	sp,fp
  80ace8:	dfc00117 	ldw	ra,4(sp)
  80acec:	df000017 	ldw	fp,0(sp)
  80acf0:	dec00204 	addi	sp,sp,8
  80acf4:	f800283a 	ret

0080acf8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  80acf8:	defffc04 	addi	sp,sp,-16
  80acfc:	dfc00315 	stw	ra,12(sp)
  80ad00:	df000215 	stw	fp,8(sp)
  80ad04:	df000204 	addi	fp,sp,8
  80ad08:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  80ad0c:	d1602504 	addi	r5,gp,-32620
  80ad10:	e13fff17 	ldw	r4,-4(fp)
  80ad14:	080bbd80 	call	80bbd8 <alt_find_dev>
  80ad18:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  80ad1c:	e0bffe17 	ldw	r2,-8(fp)
  80ad20:	10000926 	beq	r2,zero,80ad48 <alt_flash_open_dev+0x50>
  80ad24:	e0bffe17 	ldw	r2,-8(fp)
  80ad28:	10800317 	ldw	r2,12(r2)
  80ad2c:	10000626 	beq	r2,zero,80ad48 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  80ad30:	e0bffe17 	ldw	r2,-8(fp)
  80ad34:	10800317 	ldw	r2,12(r2)
  80ad38:	e17fff17 	ldw	r5,-4(fp)
  80ad3c:	e13ffe17 	ldw	r4,-8(fp)
  80ad40:	103ee83a 	callr	r2
  80ad44:	00000106 	br	80ad4c <alt_flash_open_dev+0x54>
  }

  return dev;
  80ad48:	e0bffe17 	ldw	r2,-8(fp)
}
  80ad4c:	e037883a 	mov	sp,fp
  80ad50:	dfc00117 	ldw	ra,4(sp)
  80ad54:	df000017 	ldw	fp,0(sp)
  80ad58:	dec00204 	addi	sp,sp,8
  80ad5c:	f800283a 	ret

0080ad60 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  80ad60:	defffd04 	addi	sp,sp,-12
  80ad64:	dfc00215 	stw	ra,8(sp)
  80ad68:	df000115 	stw	fp,4(sp)
  80ad6c:	df000104 	addi	fp,sp,4
  80ad70:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  80ad74:	e0bfff17 	ldw	r2,-4(fp)
  80ad78:	10000826 	beq	r2,zero,80ad9c <alt_flash_close_dev+0x3c>
  80ad7c:	e0bfff17 	ldw	r2,-4(fp)
  80ad80:	10800417 	ldw	r2,16(r2)
  80ad84:	10000526 	beq	r2,zero,80ad9c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  80ad88:	e0bfff17 	ldw	r2,-4(fp)
  80ad8c:	10800417 	ldw	r2,16(r2)
  80ad90:	e13fff17 	ldw	r4,-4(fp)
  80ad94:	103ee83a 	callr	r2
  }
  return;
  80ad98:	0001883a 	nop
  80ad9c:	0001883a 	nop
}
  80ada0:	e037883a 	mov	sp,fp
  80ada4:	dfc00117 	ldw	ra,4(sp)
  80ada8:	df000017 	ldw	fp,0(sp)
  80adac:	dec00204 	addi	sp,sp,8
  80adb0:	f800283a 	ret

0080adb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80adb4:	defff904 	addi	sp,sp,-28
  80adb8:	dfc00615 	stw	ra,24(sp)
  80adbc:	df000515 	stw	fp,20(sp)
  80adc0:	df000504 	addi	fp,sp,20
  80adc4:	e13ffc15 	stw	r4,-16(fp)
  80adc8:	e17ffd15 	stw	r5,-12(fp)
  80adcc:	e1bffe15 	stw	r6,-8(fp)
  80add0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80add4:	e0800217 	ldw	r2,8(fp)
  80add8:	d8800015 	stw	r2,0(sp)
  80addc:	e1ffff17 	ldw	r7,-4(fp)
  80ade0:	e1bffe17 	ldw	r6,-8(fp)
  80ade4:	e17ffd17 	ldw	r5,-12(fp)
  80ade8:	e13ffc17 	ldw	r4,-16(fp)
  80adec:	080af640 	call	80af64 <alt_iic_isr_register>
}  
  80adf0:	e037883a 	mov	sp,fp
  80adf4:	dfc00117 	ldw	ra,4(sp)
  80adf8:	df000017 	ldw	fp,0(sp)
  80adfc:	dec00204 	addi	sp,sp,8
  80ae00:	f800283a 	ret

0080ae04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80ae04:	defff904 	addi	sp,sp,-28
  80ae08:	df000615 	stw	fp,24(sp)
  80ae0c:	df000604 	addi	fp,sp,24
  80ae10:	e13ffe15 	stw	r4,-8(fp)
  80ae14:	e17fff15 	stw	r5,-4(fp)
  80ae18:	e0bfff17 	ldw	r2,-4(fp)
  80ae1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae20:	0005303a 	rdctl	r2,status
  80ae24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae28:	e0fffb17 	ldw	r3,-20(fp)
  80ae2c:	00bfff84 	movi	r2,-2
  80ae30:	1884703a 	and	r2,r3,r2
  80ae34:	1001703a 	wrctl	status,r2
  
  return context;
  80ae38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ae3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80ae40:	00c00044 	movi	r3,1
  80ae44:	e0bffa17 	ldw	r2,-24(fp)
  80ae48:	1884983a 	sll	r2,r3,r2
  80ae4c:	1007883a 	mov	r3,r2
  80ae50:	d0a04817 	ldw	r2,-32480(gp)
  80ae54:	1884b03a 	or	r2,r3,r2
  80ae58:	d0a04815 	stw	r2,-32480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ae5c:	d0a04817 	ldw	r2,-32480(gp)
  80ae60:	100170fa 	wrctl	ienable,r2
  80ae64:	e0bffc17 	ldw	r2,-16(fp)
  80ae68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ae6c:	e0bffd17 	ldw	r2,-12(fp)
  80ae70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ae74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80ae78:	0001883a 	nop
}
  80ae7c:	e037883a 	mov	sp,fp
  80ae80:	df000017 	ldw	fp,0(sp)
  80ae84:	dec00104 	addi	sp,sp,4
  80ae88:	f800283a 	ret

0080ae8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ae8c:	defff904 	addi	sp,sp,-28
  80ae90:	df000615 	stw	fp,24(sp)
  80ae94:	df000604 	addi	fp,sp,24
  80ae98:	e13ffe15 	stw	r4,-8(fp)
  80ae9c:	e17fff15 	stw	r5,-4(fp)
  80aea0:	e0bfff17 	ldw	r2,-4(fp)
  80aea4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aea8:	0005303a 	rdctl	r2,status
  80aeac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aeb0:	e0fffb17 	ldw	r3,-20(fp)
  80aeb4:	00bfff84 	movi	r2,-2
  80aeb8:	1884703a 	and	r2,r3,r2
  80aebc:	1001703a 	wrctl	status,r2
  
  return context;
  80aec0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80aec4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80aec8:	00c00044 	movi	r3,1
  80aecc:	e0bffa17 	ldw	r2,-24(fp)
  80aed0:	1884983a 	sll	r2,r3,r2
  80aed4:	0084303a 	nor	r2,zero,r2
  80aed8:	1007883a 	mov	r3,r2
  80aedc:	d0a04817 	ldw	r2,-32480(gp)
  80aee0:	1884703a 	and	r2,r3,r2
  80aee4:	d0a04815 	stw	r2,-32480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80aee8:	d0a04817 	ldw	r2,-32480(gp)
  80aeec:	100170fa 	wrctl	ienable,r2
  80aef0:	e0bffc17 	ldw	r2,-16(fp)
  80aef4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aef8:	e0bffd17 	ldw	r2,-12(fp)
  80aefc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80af00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80af04:	0001883a 	nop
}
  80af08:	e037883a 	mov	sp,fp
  80af0c:	df000017 	ldw	fp,0(sp)
  80af10:	dec00104 	addi	sp,sp,4
  80af14:	f800283a 	ret

0080af18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80af18:	defffc04 	addi	sp,sp,-16
  80af1c:	df000315 	stw	fp,12(sp)
  80af20:	df000304 	addi	fp,sp,12
  80af24:	e13ffe15 	stw	r4,-8(fp)
  80af28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80af2c:	000530fa 	rdctl	r2,ienable
  80af30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80af34:	00c00044 	movi	r3,1
  80af38:	e0bfff17 	ldw	r2,-4(fp)
  80af3c:	1884983a 	sll	r2,r3,r2
  80af40:	1007883a 	mov	r3,r2
  80af44:	e0bffd17 	ldw	r2,-12(fp)
  80af48:	1884703a 	and	r2,r3,r2
  80af4c:	1004c03a 	cmpne	r2,r2,zero
  80af50:	10803fcc 	andi	r2,r2,255
}
  80af54:	e037883a 	mov	sp,fp
  80af58:	df000017 	ldw	fp,0(sp)
  80af5c:	dec00104 	addi	sp,sp,4
  80af60:	f800283a 	ret

0080af64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80af64:	defff504 	addi	sp,sp,-44
  80af68:	dfc00a15 	stw	ra,40(sp)
  80af6c:	df000915 	stw	fp,36(sp)
  80af70:	df000904 	addi	fp,sp,36
  80af74:	e13ffc15 	stw	r4,-16(fp)
  80af78:	e17ffd15 	stw	r5,-12(fp)
  80af7c:	e1bffe15 	stw	r6,-8(fp)
  80af80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80af84:	00bffa84 	movi	r2,-22
  80af88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80af8c:	e0bffd17 	ldw	r2,-12(fp)
  80af90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80af94:	e0bff817 	ldw	r2,-32(fp)
  80af98:	10800808 	cmpgei	r2,r2,32
  80af9c:	1000271e 	bne	r2,zero,80b03c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80afa0:	0005303a 	rdctl	r2,status
  80afa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80afa8:	e0fffb17 	ldw	r3,-20(fp)
  80afac:	00bfff84 	movi	r2,-2
  80afb0:	1884703a 	and	r2,r3,r2
  80afb4:	1001703a 	wrctl	status,r2
  
  return context;
  80afb8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80afbc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80afc0:	00802074 	movhi	r2,129
  80afc4:	109d4404 	addi	r2,r2,29968
  80afc8:	e0fff817 	ldw	r3,-32(fp)
  80afcc:	180690fa 	slli	r3,r3,3
  80afd0:	10c5883a 	add	r2,r2,r3
  80afd4:	e0fffe17 	ldw	r3,-8(fp)
  80afd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80afdc:	00802074 	movhi	r2,129
  80afe0:	109d4404 	addi	r2,r2,29968
  80afe4:	e0fff817 	ldw	r3,-32(fp)
  80afe8:	180690fa 	slli	r3,r3,3
  80afec:	10c5883a 	add	r2,r2,r3
  80aff0:	10800104 	addi	r2,r2,4
  80aff4:	e0ffff17 	ldw	r3,-4(fp)
  80aff8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80affc:	e0bffe17 	ldw	r2,-8(fp)
  80b000:	10000526 	beq	r2,zero,80b018 <alt_iic_isr_register+0xb4>
  80b004:	e0bff817 	ldw	r2,-32(fp)
  80b008:	100b883a 	mov	r5,r2
  80b00c:	e13ffc17 	ldw	r4,-16(fp)
  80b010:	080ae040 	call	80ae04 <alt_ic_irq_enable>
  80b014:	00000406 	br	80b028 <alt_iic_isr_register+0xc4>
  80b018:	e0bff817 	ldw	r2,-32(fp)
  80b01c:	100b883a 	mov	r5,r2
  80b020:	e13ffc17 	ldw	r4,-16(fp)
  80b024:	080ae8c0 	call	80ae8c <alt_ic_irq_disable>
  80b028:	e0bff715 	stw	r2,-36(fp)
  80b02c:	e0bffa17 	ldw	r2,-24(fp)
  80b030:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b034:	e0bff917 	ldw	r2,-28(fp)
  80b038:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80b03c:	e0bff717 	ldw	r2,-36(fp)
}
  80b040:	e037883a 	mov	sp,fp
  80b044:	dfc00117 	ldw	ra,4(sp)
  80b048:	df000017 	ldw	fp,0(sp)
  80b04c:	dec00204 	addi	sp,sp,8
  80b050:	f800283a 	ret

0080b054 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80b054:	defff804 	addi	sp,sp,-32
  80b058:	dfc00715 	stw	ra,28(sp)
  80b05c:	df000615 	stw	fp,24(sp)
  80b060:	dc000515 	stw	r16,20(sp)
  80b064:	df000604 	addi	fp,sp,24
  80b068:	e13ffb15 	stw	r4,-20(fp)
  80b06c:	e17ffc15 	stw	r5,-16(fp)
  80b070:	e1bffd15 	stw	r6,-12(fp)
  80b074:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  80b078:	e1bffe17 	ldw	r6,-8(fp)
  80b07c:	e17ffd17 	ldw	r5,-12(fp)
  80b080:	e13ffc17 	ldw	r4,-16(fp)
  80b084:	080b2dc0 	call	80b2dc <open>
  80b088:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  80b08c:	e0bffa17 	ldw	r2,-24(fp)
  80b090:	10002216 	blt	r2,zero,80b11c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  80b094:	04002074 	movhi	r16,129
  80b098:	84370504 	addi	r16,r16,-9196
  80b09c:	e0bffa17 	ldw	r2,-24(fp)
  80b0a0:	01400304 	movi	r5,12
  80b0a4:	1009883a 	mov	r4,r2
  80b0a8:	080c71c0 	call	80c71c <__mulsi3>
  80b0ac:	8085883a 	add	r2,r16,r2
  80b0b0:	10c00017 	ldw	r3,0(r2)
  80b0b4:	e0bffb17 	ldw	r2,-20(fp)
  80b0b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80b0bc:	04002074 	movhi	r16,129
  80b0c0:	84370504 	addi	r16,r16,-9196
  80b0c4:	e0bffa17 	ldw	r2,-24(fp)
  80b0c8:	01400304 	movi	r5,12
  80b0cc:	1009883a 	mov	r4,r2
  80b0d0:	080c71c0 	call	80c71c <__mulsi3>
  80b0d4:	8085883a 	add	r2,r16,r2
  80b0d8:	10800104 	addi	r2,r2,4
  80b0dc:	10c00017 	ldw	r3,0(r2)
  80b0e0:	e0bffb17 	ldw	r2,-20(fp)
  80b0e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80b0e8:	04002074 	movhi	r16,129
  80b0ec:	84370504 	addi	r16,r16,-9196
  80b0f0:	e0bffa17 	ldw	r2,-24(fp)
  80b0f4:	01400304 	movi	r5,12
  80b0f8:	1009883a 	mov	r4,r2
  80b0fc:	080c71c0 	call	80c71c <__mulsi3>
  80b100:	8085883a 	add	r2,r16,r2
  80b104:	10800204 	addi	r2,r2,8
  80b108:	10c00017 	ldw	r3,0(r2)
  80b10c:	e0bffb17 	ldw	r2,-20(fp)
  80b110:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80b114:	e13ffa17 	ldw	r4,-24(fp)
  80b118:	080b4380 	call	80b438 <alt_release_fd>
  }
} 
  80b11c:	0001883a 	nop
  80b120:	e6ffff04 	addi	sp,fp,-4
  80b124:	dfc00217 	ldw	ra,8(sp)
  80b128:	df000117 	ldw	fp,4(sp)
  80b12c:	dc000017 	ldw	r16,0(sp)
  80b130:	dec00304 	addi	sp,sp,12
  80b134:	f800283a 	ret

0080b138 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80b138:	defffb04 	addi	sp,sp,-20
  80b13c:	dfc00415 	stw	ra,16(sp)
  80b140:	df000315 	stw	fp,12(sp)
  80b144:	df000304 	addi	fp,sp,12
  80b148:	e13ffd15 	stw	r4,-12(fp)
  80b14c:	e17ffe15 	stw	r5,-8(fp)
  80b150:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80b154:	01c07fc4 	movi	r7,511
  80b158:	01800044 	movi	r6,1
  80b15c:	e17ffd17 	ldw	r5,-12(fp)
  80b160:	01002074 	movhi	r4,129
  80b164:	21370804 	addi	r4,r4,-9184
  80b168:	080b0540 	call	80b054 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80b16c:	01c07fc4 	movi	r7,511
  80b170:	000d883a 	mov	r6,zero
  80b174:	e17ffe17 	ldw	r5,-8(fp)
  80b178:	01002074 	movhi	r4,129
  80b17c:	21370504 	addi	r4,r4,-9196
  80b180:	080b0540 	call	80b054 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80b184:	01c07fc4 	movi	r7,511
  80b188:	01800044 	movi	r6,1
  80b18c:	e17fff17 	ldw	r5,-4(fp)
  80b190:	01002074 	movhi	r4,129
  80b194:	21370b04 	addi	r4,r4,-9172
  80b198:	080b0540 	call	80b054 <alt_open_fd>
}  
  80b19c:	0001883a 	nop
  80b1a0:	e037883a 	mov	sp,fp
  80b1a4:	dfc00117 	ldw	ra,4(sp)
  80b1a8:	df000017 	ldw	fp,0(sp)
  80b1ac:	dec00204 	addi	sp,sp,8
  80b1b0:	f800283a 	ret

0080b1b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b1b4:	defffe04 	addi	sp,sp,-8
  80b1b8:	dfc00115 	stw	ra,4(sp)
  80b1bc:	df000015 	stw	fp,0(sp)
  80b1c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b1c4:	d0a02417 	ldw	r2,-32624(gp)
  80b1c8:	10000326 	beq	r2,zero,80b1d8 <alt_get_errno+0x24>
  80b1cc:	d0a02417 	ldw	r2,-32624(gp)
  80b1d0:	103ee83a 	callr	r2
  80b1d4:	00000106 	br	80b1dc <alt_get_errno+0x28>
  80b1d8:	d0a04c04 	addi	r2,gp,-32464
}
  80b1dc:	e037883a 	mov	sp,fp
  80b1e0:	dfc00117 	ldw	ra,4(sp)
  80b1e4:	df000017 	ldw	fp,0(sp)
  80b1e8:	dec00204 	addi	sp,sp,8
  80b1ec:	f800283a 	ret

0080b1f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80b1f0:	defffb04 	addi	sp,sp,-20
  80b1f4:	dfc00415 	stw	ra,16(sp)
  80b1f8:	df000315 	stw	fp,12(sp)
  80b1fc:	dc000215 	stw	r16,8(sp)
  80b200:	df000304 	addi	fp,sp,12
  80b204:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80b208:	e0bffe17 	ldw	r2,-8(fp)
  80b20c:	10800217 	ldw	r2,8(r2)
  80b210:	10d00034 	orhi	r3,r2,16384
  80b214:	e0bffe17 	ldw	r2,-8(fp)
  80b218:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b21c:	e03ffd15 	stw	zero,-12(fp)
  80b220:	00002306 	br	80b2b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b224:	04002074 	movhi	r16,129
  80b228:	84370504 	addi	r16,r16,-9196
  80b22c:	e0bffd17 	ldw	r2,-12(fp)
  80b230:	01400304 	movi	r5,12
  80b234:	1009883a 	mov	r4,r2
  80b238:	080c71c0 	call	80c71c <__mulsi3>
  80b23c:	8085883a 	add	r2,r16,r2
  80b240:	10c00017 	ldw	r3,0(r2)
  80b244:	e0bffe17 	ldw	r2,-8(fp)
  80b248:	10800017 	ldw	r2,0(r2)
  80b24c:	1880151e 	bne	r3,r2,80b2a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b250:	04002074 	movhi	r16,129
  80b254:	84370504 	addi	r16,r16,-9196
  80b258:	e0bffd17 	ldw	r2,-12(fp)
  80b25c:	01400304 	movi	r5,12
  80b260:	1009883a 	mov	r4,r2
  80b264:	080c71c0 	call	80c71c <__mulsi3>
  80b268:	8085883a 	add	r2,r16,r2
  80b26c:	10800204 	addi	r2,r2,8
  80b270:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b274:	10000b0e 	bge	r2,zero,80b2a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80b278:	01400304 	movi	r5,12
  80b27c:	e13ffd17 	ldw	r4,-12(fp)
  80b280:	080c71c0 	call	80c71c <__mulsi3>
  80b284:	1007883a 	mov	r3,r2
  80b288:	00802074 	movhi	r2,129
  80b28c:	10b70504 	addi	r2,r2,-9196
  80b290:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b294:	e0bffe17 	ldw	r2,-8(fp)
  80b298:	18800226 	beq	r3,r2,80b2a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80b29c:	00bffcc4 	movi	r2,-13
  80b2a0:	00000806 	br	80b2c4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b2a4:	e0bffd17 	ldw	r2,-12(fp)
  80b2a8:	10800044 	addi	r2,r2,1
  80b2ac:	e0bffd15 	stw	r2,-12(fp)
  80b2b0:	d0a02317 	ldw	r2,-32628(gp)
  80b2b4:	1007883a 	mov	r3,r2
  80b2b8:	e0bffd17 	ldw	r2,-12(fp)
  80b2bc:	18bfd92e 	bgeu	r3,r2,80b224 <__alt_mem_epcs_flash_controller_0+0xff802224>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80b2c0:	0005883a 	mov	r2,zero
}
  80b2c4:	e6ffff04 	addi	sp,fp,-4
  80b2c8:	dfc00217 	ldw	ra,8(sp)
  80b2cc:	df000117 	ldw	fp,4(sp)
  80b2d0:	dc000017 	ldw	r16,0(sp)
  80b2d4:	dec00304 	addi	sp,sp,12
  80b2d8:	f800283a 	ret

0080b2dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80b2dc:	defff604 	addi	sp,sp,-40
  80b2e0:	dfc00915 	stw	ra,36(sp)
  80b2e4:	df000815 	stw	fp,32(sp)
  80b2e8:	df000804 	addi	fp,sp,32
  80b2ec:	e13ffd15 	stw	r4,-12(fp)
  80b2f0:	e17ffe15 	stw	r5,-8(fp)
  80b2f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80b2f8:	00bfffc4 	movi	r2,-1
  80b2fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80b300:	00bffb44 	movi	r2,-19
  80b304:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80b308:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80b30c:	d1602104 	addi	r5,gp,-32636
  80b310:	e13ffd17 	ldw	r4,-12(fp)
  80b314:	080bbd80 	call	80bbd8 <alt_find_dev>
  80b318:	e0bff815 	stw	r2,-32(fp)
  80b31c:	e0bff817 	ldw	r2,-32(fp)
  80b320:	1000051e 	bne	r2,zero,80b338 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80b324:	e13ffd17 	ldw	r4,-12(fp)
  80b328:	080bc680 	call	80bc68 <alt_find_file>
  80b32c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80b330:	00800044 	movi	r2,1
  80b334:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80b338:	e0bff817 	ldw	r2,-32(fp)
  80b33c:	10002b26 	beq	r2,zero,80b3ec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80b340:	e13ff817 	ldw	r4,-32(fp)
  80b344:	080bd700 	call	80bd70 <alt_get_fd>
  80b348:	e0bff915 	stw	r2,-28(fp)
  80b34c:	e0bff917 	ldw	r2,-28(fp)
  80b350:	1000030e 	bge	r2,zero,80b360 <open+0x84>
    {
      status = index;
  80b354:	e0bff917 	ldw	r2,-28(fp)
  80b358:	e0bffa15 	stw	r2,-24(fp)
  80b35c:	00002506 	br	80b3f4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  80b360:	01400304 	movi	r5,12
  80b364:	e13ff917 	ldw	r4,-28(fp)
  80b368:	080c71c0 	call	80c71c <__mulsi3>
  80b36c:	1007883a 	mov	r3,r2
  80b370:	00802074 	movhi	r2,129
  80b374:	10b70504 	addi	r2,r2,-9196
  80b378:	1885883a 	add	r2,r3,r2
  80b37c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80b380:	e0fffe17 	ldw	r3,-8(fp)
  80b384:	00900034 	movhi	r2,16384
  80b388:	10bfffc4 	addi	r2,r2,-1
  80b38c:	1886703a 	and	r3,r3,r2
  80b390:	e0bffc17 	ldw	r2,-16(fp)
  80b394:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80b398:	e0bffb17 	ldw	r2,-20(fp)
  80b39c:	1000051e 	bne	r2,zero,80b3b4 <open+0xd8>
  80b3a0:	e13ffc17 	ldw	r4,-16(fp)
  80b3a4:	080b1f00 	call	80b1f0 <alt_file_locked>
  80b3a8:	e0bffa15 	stw	r2,-24(fp)
  80b3ac:	e0bffa17 	ldw	r2,-24(fp)
  80b3b0:	10001016 	blt	r2,zero,80b3f4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80b3b4:	e0bff817 	ldw	r2,-32(fp)
  80b3b8:	10800317 	ldw	r2,12(r2)
  80b3bc:	10000826 	beq	r2,zero,80b3e0 <open+0x104>
  80b3c0:	e0bff817 	ldw	r2,-32(fp)
  80b3c4:	10800317 	ldw	r2,12(r2)
  80b3c8:	e1ffff17 	ldw	r7,-4(fp)
  80b3cc:	e1bffe17 	ldw	r6,-8(fp)
  80b3d0:	e17ffd17 	ldw	r5,-12(fp)
  80b3d4:	e13ffc17 	ldw	r4,-16(fp)
  80b3d8:	103ee83a 	callr	r2
  80b3dc:	00000106 	br	80b3e4 <open+0x108>
  80b3e0:	0005883a 	mov	r2,zero
  80b3e4:	e0bffa15 	stw	r2,-24(fp)
  80b3e8:	00000206 	br	80b3f4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80b3ec:	00bffb44 	movi	r2,-19
  80b3f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80b3f4:	e0bffa17 	ldw	r2,-24(fp)
  80b3f8:	1000090e 	bge	r2,zero,80b420 <open+0x144>
  {
    alt_release_fd (index);  
  80b3fc:	e13ff917 	ldw	r4,-28(fp)
  80b400:	080b4380 	call	80b438 <alt_release_fd>
    ALT_ERRNO = -status;
  80b404:	080b1b40 	call	80b1b4 <alt_get_errno>
  80b408:	1007883a 	mov	r3,r2
  80b40c:	e0bffa17 	ldw	r2,-24(fp)
  80b410:	0085c83a 	sub	r2,zero,r2
  80b414:	18800015 	stw	r2,0(r3)
    return -1;
  80b418:	00bfffc4 	movi	r2,-1
  80b41c:	00000106 	br	80b424 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  80b420:	e0bff917 	ldw	r2,-28(fp)
}
  80b424:	e037883a 	mov	sp,fp
  80b428:	dfc00117 	ldw	ra,4(sp)
  80b42c:	df000017 	ldw	fp,0(sp)
  80b430:	dec00204 	addi	sp,sp,8
  80b434:	f800283a 	ret

0080b438 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b438:	defffc04 	addi	sp,sp,-16
  80b43c:	dfc00315 	stw	ra,12(sp)
  80b440:	df000215 	stw	fp,8(sp)
  80b444:	dc000115 	stw	r16,4(sp)
  80b448:	df000204 	addi	fp,sp,8
  80b44c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80b450:	e0bffe17 	ldw	r2,-8(fp)
  80b454:	108000d0 	cmplti	r2,r2,3
  80b458:	1000111e 	bne	r2,zero,80b4a0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b45c:	04002074 	movhi	r16,129
  80b460:	84370504 	addi	r16,r16,-9196
  80b464:	e0bffe17 	ldw	r2,-8(fp)
  80b468:	01400304 	movi	r5,12
  80b46c:	1009883a 	mov	r4,r2
  80b470:	080c71c0 	call	80c71c <__mulsi3>
  80b474:	8085883a 	add	r2,r16,r2
  80b478:	10800204 	addi	r2,r2,8
  80b47c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b480:	04002074 	movhi	r16,129
  80b484:	84370504 	addi	r16,r16,-9196
  80b488:	e0bffe17 	ldw	r2,-8(fp)
  80b48c:	01400304 	movi	r5,12
  80b490:	1009883a 	mov	r4,r2
  80b494:	080c71c0 	call	80c71c <__mulsi3>
  80b498:	8085883a 	add	r2,r16,r2
  80b49c:	10000015 	stw	zero,0(r2)
  }
}
  80b4a0:	0001883a 	nop
  80b4a4:	e6ffff04 	addi	sp,fp,-4
  80b4a8:	dfc00217 	ldw	ra,8(sp)
  80b4ac:	df000117 	ldw	fp,4(sp)
  80b4b0:	dc000017 	ldw	r16,0(sp)
  80b4b4:	dec00304 	addi	sp,sp,12
  80b4b8:	f800283a 	ret

0080b4bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80b4bc:	defffa04 	addi	sp,sp,-24
  80b4c0:	df000515 	stw	fp,20(sp)
  80b4c4:	df000504 	addi	fp,sp,20
  80b4c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b4cc:	0005303a 	rdctl	r2,status
  80b4d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b4d4:	e0fffc17 	ldw	r3,-16(fp)
  80b4d8:	00bfff84 	movi	r2,-2
  80b4dc:	1884703a 	and	r2,r3,r2
  80b4e0:	1001703a 	wrctl	status,r2
  
  return context;
  80b4e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80b4e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80b4ec:	e0bfff17 	ldw	r2,-4(fp)
  80b4f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80b4f4:	e0bffd17 	ldw	r2,-12(fp)
  80b4f8:	10800017 	ldw	r2,0(r2)
  80b4fc:	e0fffd17 	ldw	r3,-12(fp)
  80b500:	18c00117 	ldw	r3,4(r3)
  80b504:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80b508:	e0bffd17 	ldw	r2,-12(fp)
  80b50c:	10800117 	ldw	r2,4(r2)
  80b510:	e0fffd17 	ldw	r3,-12(fp)
  80b514:	18c00017 	ldw	r3,0(r3)
  80b518:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80b51c:	e0bffd17 	ldw	r2,-12(fp)
  80b520:	e0fffd17 	ldw	r3,-12(fp)
  80b524:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80b528:	e0bffd17 	ldw	r2,-12(fp)
  80b52c:	e0fffd17 	ldw	r3,-12(fp)
  80b530:	10c00015 	stw	r3,0(r2)
  80b534:	e0bffb17 	ldw	r2,-20(fp)
  80b538:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b53c:	e0bffe17 	ldw	r2,-8(fp)
  80b540:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80b544:	0001883a 	nop
  80b548:	e037883a 	mov	sp,fp
  80b54c:	df000017 	ldw	fp,0(sp)
  80b550:	dec00104 	addi	sp,sp,4
  80b554:	f800283a 	ret

0080b558 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80b558:	defffb04 	addi	sp,sp,-20
  80b55c:	dfc00415 	stw	ra,16(sp)
  80b560:	df000315 	stw	fp,12(sp)
  80b564:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80b568:	d0a02817 	ldw	r2,-32608(gp)
  80b56c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80b570:	d0a04a17 	ldw	r2,-32472(gp)
  80b574:	10800044 	addi	r2,r2,1
  80b578:	d0a04a15 	stw	r2,-32472(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b57c:	00002e06 	br	80b638 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80b580:	e0bffd17 	ldw	r2,-12(fp)
  80b584:	10800017 	ldw	r2,0(r2)
  80b588:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80b58c:	e0bffd17 	ldw	r2,-12(fp)
  80b590:	10800403 	ldbu	r2,16(r2)
  80b594:	10803fcc 	andi	r2,r2,255
  80b598:	10000426 	beq	r2,zero,80b5ac <alt_tick+0x54>
  80b59c:	d0a04a17 	ldw	r2,-32472(gp)
  80b5a0:	1000021e 	bne	r2,zero,80b5ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80b5a4:	e0bffd17 	ldw	r2,-12(fp)
  80b5a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80b5ac:	e0bffd17 	ldw	r2,-12(fp)
  80b5b0:	10800217 	ldw	r2,8(r2)
  80b5b4:	d0e04a17 	ldw	r3,-32472(gp)
  80b5b8:	18801d36 	bltu	r3,r2,80b630 <alt_tick+0xd8>
  80b5bc:	e0bffd17 	ldw	r2,-12(fp)
  80b5c0:	10800403 	ldbu	r2,16(r2)
  80b5c4:	10803fcc 	andi	r2,r2,255
  80b5c8:	1000191e 	bne	r2,zero,80b630 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80b5cc:	e0bffd17 	ldw	r2,-12(fp)
  80b5d0:	10800317 	ldw	r2,12(r2)
  80b5d4:	e0fffd17 	ldw	r3,-12(fp)
  80b5d8:	18c00517 	ldw	r3,20(r3)
  80b5dc:	1809883a 	mov	r4,r3
  80b5e0:	103ee83a 	callr	r2
  80b5e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80b5e8:	e0bfff17 	ldw	r2,-4(fp)
  80b5ec:	1000031e 	bne	r2,zero,80b5fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80b5f0:	e13ffd17 	ldw	r4,-12(fp)
  80b5f4:	080b4bc0 	call	80b4bc <alt_alarm_stop>
  80b5f8:	00000d06 	br	80b630 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80b5fc:	e0bffd17 	ldw	r2,-12(fp)
  80b600:	10c00217 	ldw	r3,8(r2)
  80b604:	e0bfff17 	ldw	r2,-4(fp)
  80b608:	1887883a 	add	r3,r3,r2
  80b60c:	e0bffd17 	ldw	r2,-12(fp)
  80b610:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80b614:	e0bffd17 	ldw	r2,-12(fp)
  80b618:	10c00217 	ldw	r3,8(r2)
  80b61c:	d0a04a17 	ldw	r2,-32472(gp)
  80b620:	1880032e 	bgeu	r3,r2,80b630 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80b624:	e0bffd17 	ldw	r2,-12(fp)
  80b628:	00c00044 	movi	r3,1
  80b62c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80b630:	e0bffe17 	ldw	r2,-8(fp)
  80b634:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b638:	e0fffd17 	ldw	r3,-12(fp)
  80b63c:	d0a02804 	addi	r2,gp,-32608
  80b640:	18bfcf1e 	bne	r3,r2,80b580 <__alt_mem_epcs_flash_controller_0+0xff802580>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80b644:	08011c00 	call	8011c0 <OSTimeTick>
}
  80b648:	0001883a 	nop
  80b64c:	e037883a 	mov	sp,fp
  80b650:	dfc00117 	ldw	ra,4(sp)
  80b654:	df000017 	ldw	fp,0(sp)
  80b658:	dec00204 	addi	sp,sp,8
  80b65c:	f800283a 	ret

0080b660 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80b660:	deffff04 	addi	sp,sp,-4
  80b664:	df000015 	stw	fp,0(sp)
  80b668:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80b66c:	000170fa 	wrctl	ienable,zero
}
  80b670:	0001883a 	nop
  80b674:	e037883a 	mov	sp,fp
  80b678:	df000017 	ldw	fp,0(sp)
  80b67c:	dec00104 	addi	sp,sp,4
  80b680:	f800283a 	ret

0080b684 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  80b684:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  80b688:	d0e02b17 	ldw	r3,-32596(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  80b68c:	d1204217 	ldw	r4,-32504(gp)

      stw ra,  0(sp)
  80b690:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  80b694:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  80b698:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  80b69c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  80b6a0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  80b6a4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  80b6a8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  80b6ac:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  80b6b0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  80b6b4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  80b6b8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  80b6bc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80b6c0:	080b8f80 	call	80b8f8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  80b6c4:	d1203d17 	ldw	r4,-32524(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  80b6c8:	d1603507 	ldb	r5,-32556(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  80b6cc:	d1204215 	stw	r4,-32504(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  80b6d0:	d1603545 	stb	r5,-32555(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  80b6d4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  80b6d8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  80b6dc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  80b6e0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  80b6e4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  80b6e8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  80b6ec:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  80b6f0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  80b6f4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  80b6f8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  80b6fc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  80b700:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  80b704:	d0e02b15 	stw	r3,-32596(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  80b708:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  80b70c:	f800283a 	ret

0080b710 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  80b710:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  80b714:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  80b718:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  80b71c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80b720:	080b8f80 	call	80b8f8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  80b724:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  80b728:	d4a03345 	stb	r18,-32563(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  80b72c:	003fe506 	br	80b6c4 <__alt_mem_epcs_flash_controller_0+0xff8026c4>

0080b730 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  80b730:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  80b734:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  80b738:	10800054 	ori	r2,r2,1
      wrctl status, r2
  80b73c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  80b740:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  80b744:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  80b748:	dec00204 	addi	sp,sp,8

      callr r2
  80b74c:	103ee83a 	callr	r2

      nop
  80b750:	0001883a 	nop

0080b754 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  80b754:	defff704 	addi	sp,sp,-36
  80b758:	dfc00815 	stw	ra,32(sp)
  80b75c:	df000715 	stw	fp,28(sp)
  80b760:	df000704 	addi	fp,sp,28
  80b764:	e13ffc15 	stw	r4,-16(fp)
  80b768:	e17ffd15 	stw	r5,-12(fp)
  80b76c:	e1bffe15 	stw	r6,-8(fp)
  80b770:	3805883a 	mov	r2,r7
  80b774:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  80b778:	e0fffe17 	ldw	r3,-8(fp)
  80b77c:	00bfff04 	movi	r2,-4
  80b780:	1884703a 	and	r2,r3,r2
  80b784:	10bef704 	addi	r2,r2,-1060
  80b788:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  80b78c:	01810904 	movi	r6,1060
  80b790:	000b883a 	mov	r5,zero
  80b794:	e13ff917 	ldw	r4,-28(fp)
  80b798:	080c1100 	call	80c110 <memset>
  80b79c:	e0bff917 	ldw	r2,-28(fp)
  80b7a0:	10c0bb04 	addi	r3,r2,748
  80b7a4:	e0bff917 	ldw	r2,-28(fp)
  80b7a8:	10c00115 	stw	r3,4(r2)
  80b7ac:	e0bff917 	ldw	r2,-28(fp)
  80b7b0:	10c0d504 	addi	r3,r2,852
  80b7b4:	e0bff917 	ldw	r2,-28(fp)
  80b7b8:	10c00215 	stw	r3,8(r2)
  80b7bc:	e0bff917 	ldw	r2,-28(fp)
  80b7c0:	10c0ef04 	addi	r3,r2,956
  80b7c4:	e0bff917 	ldw	r2,-28(fp)
  80b7c8:	10c00315 	stw	r3,12(r2)
  80b7cc:	e0fff917 	ldw	r3,-28(fp)
  80b7d0:	00802074 	movhi	r2,129
  80b7d4:	10b24304 	addi	r2,r2,-14068
  80b7d8:	18800d15 	stw	r2,52(r3)
  80b7dc:	e0bff917 	ldw	r2,-28(fp)
  80b7e0:	00c00044 	movi	r3,1
  80b7e4:	10c02915 	stw	r3,164(r2)
  80b7e8:	10002a15 	stw	zero,168(r2)
  80b7ec:	e0bff917 	ldw	r2,-28(fp)
  80b7f0:	00ccc384 	movi	r3,13070
  80b7f4:	10c02b0d 	sth	r3,172(r2)
  80b7f8:	e0bff917 	ldw	r2,-28(fp)
  80b7fc:	00eaf344 	movi	r3,-21555
  80b800:	10c02b8d 	sth	r3,174(r2)
  80b804:	e0bff917 	ldw	r2,-28(fp)
  80b808:	00c48d04 	movi	r3,4660
  80b80c:	10c02c0d 	sth	r3,176(r2)
  80b810:	e0bff917 	ldw	r2,-28(fp)
  80b814:	00f99b44 	movi	r3,-6547
  80b818:	10c02c8d 	sth	r3,178(r2)
  80b81c:	e0bff917 	ldw	r2,-28(fp)
  80b820:	00f7bb04 	movi	r3,-8468
  80b824:	10c02d0d 	sth	r3,180(r2)
  80b828:	e0bff917 	ldw	r2,-28(fp)
  80b82c:	00c00144 	movi	r3,5
  80b830:	10c02d8d 	sth	r3,182(r2)
  80b834:	e0bff917 	ldw	r2,-28(fp)
  80b838:	00c002c4 	movi	r3,11
  80b83c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  80b840:	e0bff917 	ldw	r2,-28(fp)
  80b844:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  80b848:	e0bffa17 	ldw	r2,-24(fp)
  80b84c:	10bff304 	addi	r2,r2,-52
  80b850:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  80b854:	e0bffb17 	ldw	r2,-20(fp)
  80b858:	10800c04 	addi	r2,r2,48
  80b85c:	e0fffc17 	ldw	r3,-16(fp)
  80b860:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  80b864:	e0bffb17 	ldw	r2,-20(fp)
  80b868:	10800b04 	addi	r2,r2,44
  80b86c:	e0fffd17 	ldw	r3,-12(fp)
  80b870:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  80b874:	e0bffb17 	ldw	r2,-20(fp)
  80b878:	10800a04 	addi	r2,r2,40
  80b87c:	e0fff917 	ldw	r3,-28(fp)
  80b880:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  80b884:	00802074 	movhi	r2,129
  80b888:	10adcc04 	addi	r2,r2,-18640
  80b88c:	10c00104 	addi	r3,r2,4
  80b890:	e0bffb17 	ldw	r2,-20(fp)
  80b894:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  80b898:	e0bffb17 	ldw	r2,-20(fp)
}
  80b89c:	e037883a 	mov	sp,fp
  80b8a0:	dfc00117 	ldw	ra,4(sp)
  80b8a4:	df000017 	ldw	fp,0(sp)
  80b8a8:	dec00204 	addi	sp,sp,8
  80b8ac:	f800283a 	ret

0080b8b0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  80b8b0:	defffe04 	addi	sp,sp,-8
  80b8b4:	df000115 	stw	fp,4(sp)
  80b8b8:	df000104 	addi	fp,sp,4
  80b8bc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  80b8c0:	0001883a 	nop
  80b8c4:	e037883a 	mov	sp,fp
  80b8c8:	df000017 	ldw	fp,0(sp)
  80b8cc:	dec00104 	addi	sp,sp,4
  80b8d0:	f800283a 	ret

0080b8d4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  80b8d4:	defffe04 	addi	sp,sp,-8
  80b8d8:	df000115 	stw	fp,4(sp)
  80b8dc:	df000104 	addi	fp,sp,4
  80b8e0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  80b8e4:	0001883a 	nop
  80b8e8:	e037883a 	mov	sp,fp
  80b8ec:	df000017 	ldw	fp,0(sp)
  80b8f0:	dec00104 	addi	sp,sp,4
  80b8f4:	f800283a 	ret

0080b8f8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  80b8f8:	deffff04 	addi	sp,sp,-4
  80b8fc:	df000015 	stw	fp,0(sp)
  80b900:	d839883a 	mov	fp,sp
}
  80b904:	0001883a 	nop
  80b908:	e037883a 	mov	sp,fp
  80b90c:	df000017 	ldw	fp,0(sp)
  80b910:	dec00104 	addi	sp,sp,4
  80b914:	f800283a 	ret

0080b918 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  80b918:	deffff04 	addi	sp,sp,-4
  80b91c:	df000015 	stw	fp,0(sp)
  80b920:	d839883a 	mov	fp,sp
}
  80b924:	0001883a 	nop
  80b928:	e037883a 	mov	sp,fp
  80b92c:	df000017 	ldw	fp,0(sp)
  80b930:	dec00104 	addi	sp,sp,4
  80b934:	f800283a 	ret

0080b938 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  80b938:	deffff04 	addi	sp,sp,-4
  80b93c:	df000015 	stw	fp,0(sp)
  80b940:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  80b944:	0001883a 	nop
  80b948:	e037883a 	mov	sp,fp
  80b94c:	df000017 	ldw	fp,0(sp)
  80b950:	dec00104 	addi	sp,sp,4
  80b954:	f800283a 	ret

0080b958 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  80b958:	deffff04 	addi	sp,sp,-4
  80b95c:	df000015 	stw	fp,0(sp)
  80b960:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  80b964:	0001883a 	nop
  80b968:	e037883a 	mov	sp,fp
  80b96c:	df000017 	ldw	fp,0(sp)
  80b970:	dec00104 	addi	sp,sp,4
  80b974:	f800283a 	ret

0080b978 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  80b978:	deffff04 	addi	sp,sp,-4
  80b97c:	df000015 	stw	fp,0(sp)
  80b980:	d839883a 	mov	fp,sp
}
  80b984:	0001883a 	nop
  80b988:	e037883a 	mov	sp,fp
  80b98c:	df000017 	ldw	fp,0(sp)
  80b990:	dec00104 	addi	sp,sp,4
  80b994:	f800283a 	ret

0080b998 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  80b998:	deffff04 	addi	sp,sp,-4
  80b99c:	df000015 	stw	fp,0(sp)
  80b9a0:	d839883a 	mov	fp,sp
}
  80b9a4:	0001883a 	nop
  80b9a8:	e037883a 	mov	sp,fp
  80b9ac:	df000017 	ldw	fp,0(sp)
  80b9b0:	dec00104 	addi	sp,sp,4
  80b9b4:	f800283a 	ret

0080b9b8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  80b9b8:	defffe04 	addi	sp,sp,-8
  80b9bc:	df000115 	stw	fp,4(sp)
  80b9c0:	df000104 	addi	fp,sp,4
  80b9c4:	e13fff15 	stw	r4,-4(fp)
}
  80b9c8:	0001883a 	nop
  80b9cc:	e037883a 	mov	sp,fp
  80b9d0:	df000017 	ldw	fp,0(sp)
  80b9d4:	dec00104 	addi	sp,sp,4
  80b9d8:	f800283a 	ret

0080b9dc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  80b9dc:	defff404 	addi	sp,sp,-48
  80b9e0:	df000b15 	stw	fp,44(sp)
  80b9e4:	df000b04 	addi	fp,sp,44
  80b9e8:	e13ffc15 	stw	r4,-16(fp)
  80b9ec:	e17ffd15 	stw	r5,-12(fp)
  80b9f0:	e1bffe15 	stw	r6,-8(fp)
  80b9f4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  80b9f8:	e0ffff17 	ldw	r3,-4(fp)
  80b9fc:	e0bffe17 	ldw	r2,-8(fp)
  80ba00:	1885883a 	add	r2,r3,r2
  80ba04:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  80ba08:	e0c00217 	ldw	r3,8(fp)
  80ba0c:	e0800117 	ldw	r2,4(fp)
  80ba10:	1885883a 	add	r2,r3,r2
  80ba14:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  80ba18:	e0800117 	ldw	r2,4(fp)
  80ba1c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  80ba20:	e0bffe17 	ldw	r2,-8(fp)
  80ba24:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  80ba28:	00800044 	movi	r2,1
  80ba2c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80ba30:	e0bffc17 	ldw	r2,-16(fp)
  80ba34:	10800504 	addi	r2,r2,20
  80ba38:	1009883a 	mov	r4,r2
  80ba3c:	00c00044 	movi	r3,1
  80ba40:	e0bffd17 	ldw	r2,-12(fp)
  80ba44:	1884983a 	sll	r2,r3,r2
  80ba48:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  80ba4c:	e0800317 	ldw	r2,12(fp)
  80ba50:	1080008c 	andi	r2,r2,2
  80ba54:	1000051e 	bne	r2,zero,80ba6c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80ba58:	e0bffc17 	ldw	r2,-16(fp)
  80ba5c:	10800304 	addi	r2,r2,12
  80ba60:	1007883a 	mov	r3,r2
  80ba64:	00810004 	movi	r2,1024
  80ba68:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80ba6c:	e0bffc17 	ldw	r2,-16(fp)
  80ba70:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80ba74:	e0bffc17 	ldw	r2,-16(fp)
  80ba78:	10800204 	addi	r2,r2,8
  80ba7c:	10800037 	ldwio	r2,0(r2)
  80ba80:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80ba84:	e0bffa17 	ldw	r2,-24(fp)
  80ba88:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80ba8c:	10000226 	beq	r2,zero,80ba98 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80ba90:	e0bff717 	ldw	r2,-36(fp)
  80ba94:	1000031e 	bne	r2,zero,80baa4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80ba98:	e0bffa17 	ldw	r2,-24(fp)
  80ba9c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80baa0:	103ff426 	beq	r2,zero,80ba74 <__alt_mem_epcs_flash_controller_0+0xff802a74>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  80baa4:	e0bffa17 	ldw	r2,-24(fp)
  80baa8:	1080100c 	andi	r2,r2,64
  80baac:	10001e26 	beq	r2,zero,80bb28 <alt_avalon_spi_command+0x14c>
  80bab0:	e0bff717 	ldw	r2,-36(fp)
  80bab4:	00801c0e 	bge	zero,r2,80bb28 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  80bab8:	e0bff717 	ldw	r2,-36(fp)
  80babc:	10bfffc4 	addi	r2,r2,-1
  80bac0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  80bac4:	e0ffff17 	ldw	r3,-4(fp)
  80bac8:	e0bff817 	ldw	r2,-32(fp)
  80bacc:	18800a2e 	bgeu	r3,r2,80baf8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  80bad0:	e0bffc17 	ldw	r2,-16(fp)
  80bad4:	10800104 	addi	r2,r2,4
  80bad8:	1009883a 	mov	r4,r2
  80badc:	e0bfff17 	ldw	r2,-4(fp)
  80bae0:	10c00044 	addi	r3,r2,1
  80bae4:	e0ffff15 	stw	r3,-4(fp)
  80bae8:	10800003 	ldbu	r2,0(r2)
  80baec:	10803fcc 	andi	r2,r2,255
  80baf0:	20800035 	stwio	r2,0(r4)
  80baf4:	00000c06 	br	80bb28 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  80baf8:	e0bff517 	ldw	r2,-44(fp)
  80bafc:	10000826 	beq	r2,zero,80bb20 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  80bb00:	e0bff517 	ldw	r2,-44(fp)
  80bb04:	10bfffc4 	addi	r2,r2,-1
  80bb08:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  80bb0c:	e0bffc17 	ldw	r2,-16(fp)
  80bb10:	10800104 	addi	r2,r2,4
  80bb14:	0007883a 	mov	r3,zero
  80bb18:	10c00035 	stwio	r3,0(r2)
  80bb1c:	00000206 	br	80bb28 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  80bb20:	00bf0004 	movi	r2,-1024
  80bb24:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  80bb28:	e0bffa17 	ldw	r2,-24(fp)
  80bb2c:	1080200c 	andi	r2,r2,128
  80bb30:	103fd026 	beq	r2,zero,80ba74 <__alt_mem_epcs_flash_controller_0+0xff802a74>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80bb34:	e0bffc17 	ldw	r2,-16(fp)
  80bb38:	10800037 	ldwio	r2,0(r2)
  80bb3c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  80bb40:	e0bff617 	ldw	r2,-40(fp)
  80bb44:	10000426 	beq	r2,zero,80bb58 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  80bb48:	e0bff617 	ldw	r2,-40(fp)
  80bb4c:	10bfffc4 	addi	r2,r2,-1
  80bb50:	e0bff615 	stw	r2,-40(fp)
  80bb54:	00000506 	br	80bb6c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  80bb58:	e0800217 	ldw	r2,8(fp)
  80bb5c:	10c00044 	addi	r3,r2,1
  80bb60:	e0c00215 	stw	r3,8(fp)
  80bb64:	e0fffb17 	ldw	r3,-20(fp)
  80bb68:	10c00005 	stb	r3,0(r2)
      credits++;
  80bb6c:	e0bff717 	ldw	r2,-36(fp)
  80bb70:	10800044 	addi	r2,r2,1
  80bb74:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  80bb78:	e0bff617 	ldw	r2,-40(fp)
  80bb7c:	103fbd1e 	bne	r2,zero,80ba74 <__alt_mem_epcs_flash_controller_0+0xff802a74>
  80bb80:	e0c00217 	ldw	r3,8(fp)
  80bb84:	e0bff917 	ldw	r2,-28(fp)
  80bb88:	18bfba1e 	bne	r3,r2,80ba74 <__alt_mem_epcs_flash_controller_0+0xff802a74>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80bb8c:	e0bffc17 	ldw	r2,-16(fp)
  80bb90:	10800204 	addi	r2,r2,8
  80bb94:	10800037 	ldwio	r2,0(r2)
  80bb98:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  80bb9c:	e0bffa17 	ldw	r2,-24(fp)
  80bba0:	1080080c 	andi	r2,r2,32
  80bba4:	103ff926 	beq	r2,zero,80bb8c <__alt_mem_epcs_flash_controller_0+0xff802b8c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  80bba8:	e0800317 	ldw	r2,12(fp)
  80bbac:	1080004c 	andi	r2,r2,1
  80bbb0:	1000041e 	bne	r2,zero,80bbc4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  80bbb4:	e0bffc17 	ldw	r2,-16(fp)
  80bbb8:	10800304 	addi	r2,r2,12
  80bbbc:	0007883a 	mov	r3,zero
  80bbc0:	10c00035 	stwio	r3,0(r2)

  return read_length;
  80bbc4:	e0800117 	ldw	r2,4(fp)
}
  80bbc8:	e037883a 	mov	sp,fp
  80bbcc:	df000017 	ldw	fp,0(sp)
  80bbd0:	dec00104 	addi	sp,sp,4
  80bbd4:	f800283a 	ret

0080bbd8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80bbd8:	defffa04 	addi	sp,sp,-24
  80bbdc:	dfc00515 	stw	ra,20(sp)
  80bbe0:	df000415 	stw	fp,16(sp)
  80bbe4:	df000404 	addi	fp,sp,16
  80bbe8:	e13ffe15 	stw	r4,-8(fp)
  80bbec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80bbf0:	e0bfff17 	ldw	r2,-4(fp)
  80bbf4:	10800017 	ldw	r2,0(r2)
  80bbf8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80bbfc:	e13ffe17 	ldw	r4,-8(fp)
  80bc00:	080c2380 	call	80c238 <strlen>
  80bc04:	10800044 	addi	r2,r2,1
  80bc08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80bc0c:	00000d06 	br	80bc44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80bc10:	e0bffc17 	ldw	r2,-16(fp)
  80bc14:	10800217 	ldw	r2,8(r2)
  80bc18:	e0fffd17 	ldw	r3,-12(fp)
  80bc1c:	180d883a 	mov	r6,r3
  80bc20:	e17ffe17 	ldw	r5,-8(fp)
  80bc24:	1009883a 	mov	r4,r2
  80bc28:	080bf4c0 	call	80bf4c <memcmp>
  80bc2c:	1000021e 	bne	r2,zero,80bc38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80bc30:	e0bffc17 	ldw	r2,-16(fp)
  80bc34:	00000706 	br	80bc54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80bc38:	e0bffc17 	ldw	r2,-16(fp)
  80bc3c:	10800017 	ldw	r2,0(r2)
  80bc40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80bc44:	e0fffc17 	ldw	r3,-16(fp)
  80bc48:	e0bfff17 	ldw	r2,-4(fp)
  80bc4c:	18bff01e 	bne	r3,r2,80bc10 <__alt_mem_epcs_flash_controller_0+0xff802c10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80bc50:	0005883a 	mov	r2,zero
}
  80bc54:	e037883a 	mov	sp,fp
  80bc58:	dfc00117 	ldw	ra,4(sp)
  80bc5c:	df000017 	ldw	fp,0(sp)
  80bc60:	dec00204 	addi	sp,sp,8
  80bc64:	f800283a 	ret

0080bc68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80bc68:	defffb04 	addi	sp,sp,-20
  80bc6c:	dfc00415 	stw	ra,16(sp)
  80bc70:	df000315 	stw	fp,12(sp)
  80bc74:	df000304 	addi	fp,sp,12
  80bc78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80bc7c:	d0a01f17 	ldw	r2,-32644(gp)
  80bc80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80bc84:	00003106 	br	80bd4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80bc88:	e0bffd17 	ldw	r2,-12(fp)
  80bc8c:	10800217 	ldw	r2,8(r2)
  80bc90:	1009883a 	mov	r4,r2
  80bc94:	080c2380 	call	80c238 <strlen>
  80bc98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80bc9c:	e0bffd17 	ldw	r2,-12(fp)
  80bca0:	10c00217 	ldw	r3,8(r2)
  80bca4:	e0bffe17 	ldw	r2,-8(fp)
  80bca8:	10bfffc4 	addi	r2,r2,-1
  80bcac:	1885883a 	add	r2,r3,r2
  80bcb0:	10800003 	ldbu	r2,0(r2)
  80bcb4:	10803fcc 	andi	r2,r2,255
  80bcb8:	1080201c 	xori	r2,r2,128
  80bcbc:	10bfe004 	addi	r2,r2,-128
  80bcc0:	10800bd8 	cmpnei	r2,r2,47
  80bcc4:	1000031e 	bne	r2,zero,80bcd4 <alt_find_file+0x6c>
    {
      len -= 1;
  80bcc8:	e0bffe17 	ldw	r2,-8(fp)
  80bccc:	10bfffc4 	addi	r2,r2,-1
  80bcd0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80bcd4:	e0bffe17 	ldw	r2,-8(fp)
  80bcd8:	e0ffff17 	ldw	r3,-4(fp)
  80bcdc:	1885883a 	add	r2,r3,r2
  80bce0:	10800003 	ldbu	r2,0(r2)
  80bce4:	10803fcc 	andi	r2,r2,255
  80bce8:	1080201c 	xori	r2,r2,128
  80bcec:	10bfe004 	addi	r2,r2,-128
  80bcf0:	10800be0 	cmpeqi	r2,r2,47
  80bcf4:	1000081e 	bne	r2,zero,80bd18 <alt_find_file+0xb0>
  80bcf8:	e0bffe17 	ldw	r2,-8(fp)
  80bcfc:	e0ffff17 	ldw	r3,-4(fp)
  80bd00:	1885883a 	add	r2,r3,r2
  80bd04:	10800003 	ldbu	r2,0(r2)
  80bd08:	10803fcc 	andi	r2,r2,255
  80bd0c:	1080201c 	xori	r2,r2,128
  80bd10:	10bfe004 	addi	r2,r2,-128
  80bd14:	10000a1e 	bne	r2,zero,80bd40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80bd18:	e0bffd17 	ldw	r2,-12(fp)
  80bd1c:	10800217 	ldw	r2,8(r2)
  80bd20:	e0fffe17 	ldw	r3,-8(fp)
  80bd24:	180d883a 	mov	r6,r3
  80bd28:	e17fff17 	ldw	r5,-4(fp)
  80bd2c:	1009883a 	mov	r4,r2
  80bd30:	080bf4c0 	call	80bf4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80bd34:	1000021e 	bne	r2,zero,80bd40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80bd38:	e0bffd17 	ldw	r2,-12(fp)
  80bd3c:	00000706 	br	80bd5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80bd40:	e0bffd17 	ldw	r2,-12(fp)
  80bd44:	10800017 	ldw	r2,0(r2)
  80bd48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80bd4c:	e0fffd17 	ldw	r3,-12(fp)
  80bd50:	d0a01f04 	addi	r2,gp,-32644
  80bd54:	18bfcc1e 	bne	r3,r2,80bc88 <__alt_mem_epcs_flash_controller_0+0xff802c88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80bd58:	0005883a 	mov	r2,zero
}
  80bd5c:	e037883a 	mov	sp,fp
  80bd60:	dfc00117 	ldw	ra,4(sp)
  80bd64:	df000017 	ldw	fp,0(sp)
  80bd68:	dec00204 	addi	sp,sp,8
  80bd6c:	f800283a 	ret

0080bd70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80bd70:	defff804 	addi	sp,sp,-32
  80bd74:	dfc00715 	stw	ra,28(sp)
  80bd78:	df000615 	stw	fp,24(sp)
  80bd7c:	dc000515 	stw	r16,20(sp)
  80bd80:	df000604 	addi	fp,sp,24
  80bd84:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80bd88:	00bffa04 	movi	r2,-24
  80bd8c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  80bd90:	d0a04717 	ldw	r2,-32484(gp)
  80bd94:	e0bffc15 	stw	r2,-16(fp)
  80bd98:	e03ffd0d 	sth	zero,-12(fp)
  80bd9c:	e0bffd0b 	ldhu	r2,-12(fp)
  80bda0:	e0fffd84 	addi	r3,fp,-10
  80bda4:	180d883a 	mov	r6,r3
  80bda8:	100b883a 	mov	r5,r2
  80bdac:	e13ffc17 	ldw	r4,-16(fp)
  80bdb0:	0805a100 	call	805a10 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80bdb4:	e03ffa15 	stw	zero,-24(fp)
  80bdb8:	00001d06 	br	80be30 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  80bdbc:	04002074 	movhi	r16,129
  80bdc0:	84370504 	addi	r16,r16,-9196
  80bdc4:	e0bffa17 	ldw	r2,-24(fp)
  80bdc8:	01400304 	movi	r5,12
  80bdcc:	1009883a 	mov	r4,r2
  80bdd0:	080c71c0 	call	80c71c <__mulsi3>
  80bdd4:	8085883a 	add	r2,r16,r2
  80bdd8:	10800017 	ldw	r2,0(r2)
  80bddc:	1000111e 	bne	r2,zero,80be24 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  80bde0:	04002074 	movhi	r16,129
  80bde4:	84370504 	addi	r16,r16,-9196
  80bde8:	e0bffa17 	ldw	r2,-24(fp)
  80bdec:	01400304 	movi	r5,12
  80bdf0:	1009883a 	mov	r4,r2
  80bdf4:	080c71c0 	call	80c71c <__mulsi3>
  80bdf8:	8085883a 	add	r2,r16,r2
  80bdfc:	e0fffe17 	ldw	r3,-8(fp)
  80be00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80be04:	d0e02317 	ldw	r3,-32628(gp)
  80be08:	e0bffa17 	ldw	r2,-24(fp)
  80be0c:	1880020e 	bge	r3,r2,80be18 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  80be10:	e0bffa17 	ldw	r2,-24(fp)
  80be14:	d0a02315 	stw	r2,-32628(gp)
      }
      rc = i;
  80be18:	e0bffa17 	ldw	r2,-24(fp)
  80be1c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  80be20:	00000606 	br	80be3c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80be24:	e0bffa17 	ldw	r2,-24(fp)
  80be28:	10800044 	addi	r2,r2,1
  80be2c:	e0bffa15 	stw	r2,-24(fp)
  80be30:	e0bffa17 	ldw	r2,-24(fp)
  80be34:	10800810 	cmplti	r2,r2,32
  80be38:	103fe01e 	bne	r2,zero,80bdbc <__alt_mem_epcs_flash_controller_0+0xff802dbc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  80be3c:	d0a04717 	ldw	r2,-32484(gp)
  80be40:	1009883a 	mov	r4,r2
  80be44:	0805d880 	call	805d88 <OSSemPost>

  return rc;
  80be48:	e0bffb17 	ldw	r2,-20(fp)
}
  80be4c:	e6ffff04 	addi	sp,fp,-4
  80be50:	dfc00217 	ldw	ra,8(sp)
  80be54:	df000117 	ldw	fp,4(sp)
  80be58:	dc000017 	ldw	r16,0(sp)
  80be5c:	dec00304 	addi	sp,sp,12
  80be60:	f800283a 	ret

0080be64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80be64:	defffe04 	addi	sp,sp,-8
  80be68:	df000115 	stw	fp,4(sp)
  80be6c:	df000104 	addi	fp,sp,4
  80be70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80be74:	e0bfff17 	ldw	r2,-4(fp)
  80be78:	10bffe84 	addi	r2,r2,-6
  80be7c:	10c00428 	cmpgeui	r3,r2,16
  80be80:	18001a1e 	bne	r3,zero,80beec <alt_exception_cause_generated_bad_addr+0x88>
  80be84:	100690ba 	slli	r3,r2,2
  80be88:	00802074 	movhi	r2,129
  80be8c:	10afa704 	addi	r2,r2,-16740
  80be90:	1885883a 	add	r2,r3,r2
  80be94:	10800017 	ldw	r2,0(r2)
  80be98:	1000683a 	jmp	r2
  80be9c:	0080bedc 	xori	r2,zero,763
  80bea0:	0080bedc 	xori	r2,zero,763
  80bea4:	0080beec 	andhi	r2,zero,763
  80bea8:	0080beec 	andhi	r2,zero,763
  80beac:	0080beec 	andhi	r2,zero,763
  80beb0:	0080bedc 	xori	r2,zero,763
  80beb4:	0080bee4 	muli	r2,zero,763
  80beb8:	0080beec 	andhi	r2,zero,763
  80bebc:	0080bedc 	xori	r2,zero,763
  80bec0:	0080bedc 	xori	r2,zero,763
  80bec4:	0080beec 	andhi	r2,zero,763
  80bec8:	0080bedc 	xori	r2,zero,763
  80becc:	0080bee4 	muli	r2,zero,763
  80bed0:	0080beec 	andhi	r2,zero,763
  80bed4:	0080beec 	andhi	r2,zero,763
  80bed8:	0080bedc 	xori	r2,zero,763
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80bedc:	00800044 	movi	r2,1
  80bee0:	00000306 	br	80bef0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80bee4:	0005883a 	mov	r2,zero
  80bee8:	00000106 	br	80bef0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80beec:	0005883a 	mov	r2,zero
  }
}
  80bef0:	e037883a 	mov	sp,fp
  80bef4:	df000017 	ldw	fp,0(sp)
  80bef8:	dec00104 	addi	sp,sp,4
  80befc:	f800283a 	ret

0080bf00 <atexit>:
  80bf00:	200b883a 	mov	r5,r4
  80bf04:	000f883a 	mov	r7,zero
  80bf08:	000d883a 	mov	r6,zero
  80bf0c:	0009883a 	mov	r4,zero
  80bf10:	080c2d01 	jmpi	80c2d0 <__register_exitproc>

0080bf14 <exit>:
  80bf14:	defffe04 	addi	sp,sp,-8
  80bf18:	000b883a 	mov	r5,zero
  80bf1c:	dc000015 	stw	r16,0(sp)
  80bf20:	dfc00115 	stw	ra,4(sp)
  80bf24:	2021883a 	mov	r16,r4
  80bf28:	080c3e80 	call	80c3e8 <__call_exitprocs>
  80bf2c:	00802074 	movhi	r2,129
  80bf30:	10b89804 	addi	r2,r2,-7584
  80bf34:	11000017 	ldw	r4,0(r2)
  80bf38:	20800f17 	ldw	r2,60(r4)
  80bf3c:	10000126 	beq	r2,zero,80bf44 <exit+0x30>
  80bf40:	103ee83a 	callr	r2
  80bf44:	8009883a 	mov	r4,r16
  80bf48:	080c7440 	call	80c744 <_exit>

0080bf4c <memcmp>:
  80bf4c:	01c000c4 	movi	r7,3
  80bf50:	3980192e 	bgeu	r7,r6,80bfb8 <memcmp+0x6c>
  80bf54:	2144b03a 	or	r2,r4,r5
  80bf58:	11c4703a 	and	r2,r2,r7
  80bf5c:	10000f26 	beq	r2,zero,80bf9c <memcmp+0x50>
  80bf60:	20800003 	ldbu	r2,0(r4)
  80bf64:	28c00003 	ldbu	r3,0(r5)
  80bf68:	10c0151e 	bne	r2,r3,80bfc0 <memcmp+0x74>
  80bf6c:	31bfff84 	addi	r6,r6,-2
  80bf70:	01ffffc4 	movi	r7,-1
  80bf74:	00000406 	br	80bf88 <memcmp+0x3c>
  80bf78:	20800003 	ldbu	r2,0(r4)
  80bf7c:	28c00003 	ldbu	r3,0(r5)
  80bf80:	31bfffc4 	addi	r6,r6,-1
  80bf84:	10c00e1e 	bne	r2,r3,80bfc0 <memcmp+0x74>
  80bf88:	21000044 	addi	r4,r4,1
  80bf8c:	29400044 	addi	r5,r5,1
  80bf90:	31fff91e 	bne	r6,r7,80bf78 <__alt_mem_epcs_flash_controller_0+0xff802f78>
  80bf94:	0005883a 	mov	r2,zero
  80bf98:	f800283a 	ret
  80bf9c:	20c00017 	ldw	r3,0(r4)
  80bfa0:	28800017 	ldw	r2,0(r5)
  80bfa4:	18bfee1e 	bne	r3,r2,80bf60 <__alt_mem_epcs_flash_controller_0+0xff802f60>
  80bfa8:	31bfff04 	addi	r6,r6,-4
  80bfac:	21000104 	addi	r4,r4,4
  80bfb0:	29400104 	addi	r5,r5,4
  80bfb4:	39bff936 	bltu	r7,r6,80bf9c <__alt_mem_epcs_flash_controller_0+0xff802f9c>
  80bfb8:	303fe91e 	bne	r6,zero,80bf60 <__alt_mem_epcs_flash_controller_0+0xff802f60>
  80bfbc:	003ff506 	br	80bf94 <__alt_mem_epcs_flash_controller_0+0xff802f94>
  80bfc0:	10c5c83a 	sub	r2,r2,r3
  80bfc4:	f800283a 	ret

0080bfc8 <memcpy>:
  80bfc8:	defffd04 	addi	sp,sp,-12
  80bfcc:	dfc00215 	stw	ra,8(sp)
  80bfd0:	dc400115 	stw	r17,4(sp)
  80bfd4:	dc000015 	stw	r16,0(sp)
  80bfd8:	00c003c4 	movi	r3,15
  80bfdc:	2005883a 	mov	r2,r4
  80bfe0:	1980452e 	bgeu	r3,r6,80c0f8 <memcpy+0x130>
  80bfe4:	2906b03a 	or	r3,r5,r4
  80bfe8:	18c000cc 	andi	r3,r3,3
  80bfec:	1800441e 	bne	r3,zero,80c100 <memcpy+0x138>
  80bff0:	347ffc04 	addi	r17,r6,-16
  80bff4:	8822d13a 	srli	r17,r17,4
  80bff8:	28c00104 	addi	r3,r5,4
  80bffc:	23400104 	addi	r13,r4,4
  80c000:	8820913a 	slli	r16,r17,4
  80c004:	2b000204 	addi	r12,r5,8
  80c008:	22c00204 	addi	r11,r4,8
  80c00c:	84000504 	addi	r16,r16,20
  80c010:	2a800304 	addi	r10,r5,12
  80c014:	22400304 	addi	r9,r4,12
  80c018:	2c21883a 	add	r16,r5,r16
  80c01c:	2811883a 	mov	r8,r5
  80c020:	200f883a 	mov	r7,r4
  80c024:	41000017 	ldw	r4,0(r8)
  80c028:	1fc00017 	ldw	ra,0(r3)
  80c02c:	63c00017 	ldw	r15,0(r12)
  80c030:	39000015 	stw	r4,0(r7)
  80c034:	53800017 	ldw	r14,0(r10)
  80c038:	6fc00015 	stw	ra,0(r13)
  80c03c:	5bc00015 	stw	r15,0(r11)
  80c040:	4b800015 	stw	r14,0(r9)
  80c044:	18c00404 	addi	r3,r3,16
  80c048:	39c00404 	addi	r7,r7,16
  80c04c:	42000404 	addi	r8,r8,16
  80c050:	6b400404 	addi	r13,r13,16
  80c054:	63000404 	addi	r12,r12,16
  80c058:	5ac00404 	addi	r11,r11,16
  80c05c:	52800404 	addi	r10,r10,16
  80c060:	4a400404 	addi	r9,r9,16
  80c064:	1c3fef1e 	bne	r3,r16,80c024 <__alt_mem_epcs_flash_controller_0+0xff803024>
  80c068:	89c00044 	addi	r7,r17,1
  80c06c:	380e913a 	slli	r7,r7,4
  80c070:	310003cc 	andi	r4,r6,15
  80c074:	02c000c4 	movi	r11,3
  80c078:	11c7883a 	add	r3,r2,r7
  80c07c:	29cb883a 	add	r5,r5,r7
  80c080:	5900212e 	bgeu	r11,r4,80c108 <memcpy+0x140>
  80c084:	1813883a 	mov	r9,r3
  80c088:	2811883a 	mov	r8,r5
  80c08c:	200f883a 	mov	r7,r4
  80c090:	42800017 	ldw	r10,0(r8)
  80c094:	4a400104 	addi	r9,r9,4
  80c098:	39ffff04 	addi	r7,r7,-4
  80c09c:	4abfff15 	stw	r10,-4(r9)
  80c0a0:	42000104 	addi	r8,r8,4
  80c0a4:	59fffa36 	bltu	r11,r7,80c090 <__alt_mem_epcs_flash_controller_0+0xff803090>
  80c0a8:	213fff04 	addi	r4,r4,-4
  80c0ac:	2008d0ba 	srli	r4,r4,2
  80c0b0:	318000cc 	andi	r6,r6,3
  80c0b4:	21000044 	addi	r4,r4,1
  80c0b8:	2109883a 	add	r4,r4,r4
  80c0bc:	2109883a 	add	r4,r4,r4
  80c0c0:	1907883a 	add	r3,r3,r4
  80c0c4:	290b883a 	add	r5,r5,r4
  80c0c8:	30000626 	beq	r6,zero,80c0e4 <memcpy+0x11c>
  80c0cc:	198d883a 	add	r6,r3,r6
  80c0d0:	29c00003 	ldbu	r7,0(r5)
  80c0d4:	18c00044 	addi	r3,r3,1
  80c0d8:	29400044 	addi	r5,r5,1
  80c0dc:	19ffffc5 	stb	r7,-1(r3)
  80c0e0:	19bffb1e 	bne	r3,r6,80c0d0 <__alt_mem_epcs_flash_controller_0+0xff8030d0>
  80c0e4:	dfc00217 	ldw	ra,8(sp)
  80c0e8:	dc400117 	ldw	r17,4(sp)
  80c0ec:	dc000017 	ldw	r16,0(sp)
  80c0f0:	dec00304 	addi	sp,sp,12
  80c0f4:	f800283a 	ret
  80c0f8:	2007883a 	mov	r3,r4
  80c0fc:	003ff206 	br	80c0c8 <__alt_mem_epcs_flash_controller_0+0xff8030c8>
  80c100:	2007883a 	mov	r3,r4
  80c104:	003ff106 	br	80c0cc <__alt_mem_epcs_flash_controller_0+0xff8030cc>
  80c108:	200d883a 	mov	r6,r4
  80c10c:	003fee06 	br	80c0c8 <__alt_mem_epcs_flash_controller_0+0xff8030c8>

0080c110 <memset>:
  80c110:	20c000cc 	andi	r3,r4,3
  80c114:	2005883a 	mov	r2,r4
  80c118:	18004426 	beq	r3,zero,80c22c <memset+0x11c>
  80c11c:	31ffffc4 	addi	r7,r6,-1
  80c120:	30004026 	beq	r6,zero,80c224 <memset+0x114>
  80c124:	2813883a 	mov	r9,r5
  80c128:	200d883a 	mov	r6,r4
  80c12c:	2007883a 	mov	r3,r4
  80c130:	00000406 	br	80c144 <memset+0x34>
  80c134:	3a3fffc4 	addi	r8,r7,-1
  80c138:	31800044 	addi	r6,r6,1
  80c13c:	38003926 	beq	r7,zero,80c224 <memset+0x114>
  80c140:	400f883a 	mov	r7,r8
  80c144:	18c00044 	addi	r3,r3,1
  80c148:	32400005 	stb	r9,0(r6)
  80c14c:	1a0000cc 	andi	r8,r3,3
  80c150:	403ff81e 	bne	r8,zero,80c134 <__alt_mem_epcs_flash_controller_0+0xff803134>
  80c154:	010000c4 	movi	r4,3
  80c158:	21c02d2e 	bgeu	r4,r7,80c210 <memset+0x100>
  80c15c:	29003fcc 	andi	r4,r5,255
  80c160:	200c923a 	slli	r6,r4,8
  80c164:	3108b03a 	or	r4,r6,r4
  80c168:	200c943a 	slli	r6,r4,16
  80c16c:	218cb03a 	or	r6,r4,r6
  80c170:	010003c4 	movi	r4,15
  80c174:	21c0182e 	bgeu	r4,r7,80c1d8 <memset+0xc8>
  80c178:	3b3ffc04 	addi	r12,r7,-16
  80c17c:	6018d13a 	srli	r12,r12,4
  80c180:	1a000104 	addi	r8,r3,4
  80c184:	1ac00204 	addi	r11,r3,8
  80c188:	6008913a 	slli	r4,r12,4
  80c18c:	1a800304 	addi	r10,r3,12
  80c190:	1813883a 	mov	r9,r3
  80c194:	21000504 	addi	r4,r4,20
  80c198:	1909883a 	add	r4,r3,r4
  80c19c:	49800015 	stw	r6,0(r9)
  80c1a0:	41800015 	stw	r6,0(r8)
  80c1a4:	59800015 	stw	r6,0(r11)
  80c1a8:	51800015 	stw	r6,0(r10)
  80c1ac:	42000404 	addi	r8,r8,16
  80c1b0:	4a400404 	addi	r9,r9,16
  80c1b4:	5ac00404 	addi	r11,r11,16
  80c1b8:	52800404 	addi	r10,r10,16
  80c1bc:	413ff71e 	bne	r8,r4,80c19c <__alt_mem_epcs_flash_controller_0+0xff80319c>
  80c1c0:	63000044 	addi	r12,r12,1
  80c1c4:	6018913a 	slli	r12,r12,4
  80c1c8:	39c003cc 	andi	r7,r7,15
  80c1cc:	010000c4 	movi	r4,3
  80c1d0:	1b07883a 	add	r3,r3,r12
  80c1d4:	21c00e2e 	bgeu	r4,r7,80c210 <memset+0x100>
  80c1d8:	1813883a 	mov	r9,r3
  80c1dc:	3811883a 	mov	r8,r7
  80c1e0:	010000c4 	movi	r4,3
  80c1e4:	49800015 	stw	r6,0(r9)
  80c1e8:	423fff04 	addi	r8,r8,-4
  80c1ec:	4a400104 	addi	r9,r9,4
  80c1f0:	223ffc36 	bltu	r4,r8,80c1e4 <__alt_mem_epcs_flash_controller_0+0xff8031e4>
  80c1f4:	393fff04 	addi	r4,r7,-4
  80c1f8:	2008d0ba 	srli	r4,r4,2
  80c1fc:	39c000cc 	andi	r7,r7,3
  80c200:	21000044 	addi	r4,r4,1
  80c204:	2109883a 	add	r4,r4,r4
  80c208:	2109883a 	add	r4,r4,r4
  80c20c:	1907883a 	add	r3,r3,r4
  80c210:	38000526 	beq	r7,zero,80c228 <memset+0x118>
  80c214:	19cf883a 	add	r7,r3,r7
  80c218:	19400005 	stb	r5,0(r3)
  80c21c:	18c00044 	addi	r3,r3,1
  80c220:	38fffd1e 	bne	r7,r3,80c218 <__alt_mem_epcs_flash_controller_0+0xff803218>
  80c224:	f800283a 	ret
  80c228:	f800283a 	ret
  80c22c:	2007883a 	mov	r3,r4
  80c230:	300f883a 	mov	r7,r6
  80c234:	003fc706 	br	80c154 <__alt_mem_epcs_flash_controller_0+0xff803154>

0080c238 <strlen>:
  80c238:	208000cc 	andi	r2,r4,3
  80c23c:	10002026 	beq	r2,zero,80c2c0 <strlen+0x88>
  80c240:	20800007 	ldb	r2,0(r4)
  80c244:	10002026 	beq	r2,zero,80c2c8 <strlen+0x90>
  80c248:	2005883a 	mov	r2,r4
  80c24c:	00000206 	br	80c258 <strlen+0x20>
  80c250:	10c00007 	ldb	r3,0(r2)
  80c254:	18001826 	beq	r3,zero,80c2b8 <strlen+0x80>
  80c258:	10800044 	addi	r2,r2,1
  80c25c:	10c000cc 	andi	r3,r2,3
  80c260:	183ffb1e 	bne	r3,zero,80c250 <__alt_mem_epcs_flash_controller_0+0xff803250>
  80c264:	10c00017 	ldw	r3,0(r2)
  80c268:	01ffbff4 	movhi	r7,65279
  80c26c:	39ffbfc4 	addi	r7,r7,-257
  80c270:	00ca303a 	nor	r5,zero,r3
  80c274:	01a02074 	movhi	r6,32897
  80c278:	19c7883a 	add	r3,r3,r7
  80c27c:	31a02004 	addi	r6,r6,-32640
  80c280:	1946703a 	and	r3,r3,r5
  80c284:	1986703a 	and	r3,r3,r6
  80c288:	1800091e 	bne	r3,zero,80c2b0 <strlen+0x78>
  80c28c:	10800104 	addi	r2,r2,4
  80c290:	10c00017 	ldw	r3,0(r2)
  80c294:	19cb883a 	add	r5,r3,r7
  80c298:	00c6303a 	nor	r3,zero,r3
  80c29c:	28c6703a 	and	r3,r5,r3
  80c2a0:	1986703a 	and	r3,r3,r6
  80c2a4:	183ff926 	beq	r3,zero,80c28c <__alt_mem_epcs_flash_controller_0+0xff80328c>
  80c2a8:	00000106 	br	80c2b0 <strlen+0x78>
  80c2ac:	10800044 	addi	r2,r2,1
  80c2b0:	10c00007 	ldb	r3,0(r2)
  80c2b4:	183ffd1e 	bne	r3,zero,80c2ac <__alt_mem_epcs_flash_controller_0+0xff8032ac>
  80c2b8:	1105c83a 	sub	r2,r2,r4
  80c2bc:	f800283a 	ret
  80c2c0:	2005883a 	mov	r2,r4
  80c2c4:	003fe706 	br	80c264 <__alt_mem_epcs_flash_controller_0+0xff803264>
  80c2c8:	0005883a 	mov	r2,zero
  80c2cc:	f800283a 	ret

0080c2d0 <__register_exitproc>:
  80c2d0:	defffa04 	addi	sp,sp,-24
  80c2d4:	dc000315 	stw	r16,12(sp)
  80c2d8:	04002074 	movhi	r16,129
  80c2dc:	84389804 	addi	r16,r16,-7584
  80c2e0:	80c00017 	ldw	r3,0(r16)
  80c2e4:	dc400415 	stw	r17,16(sp)
  80c2e8:	dfc00515 	stw	ra,20(sp)
  80c2ec:	18805217 	ldw	r2,328(r3)
  80c2f0:	2023883a 	mov	r17,r4
  80c2f4:	10003726 	beq	r2,zero,80c3d4 <__register_exitproc+0x104>
  80c2f8:	10c00117 	ldw	r3,4(r2)
  80c2fc:	010007c4 	movi	r4,31
  80c300:	20c00e16 	blt	r4,r3,80c33c <__register_exitproc+0x6c>
  80c304:	1a000044 	addi	r8,r3,1
  80c308:	8800221e 	bne	r17,zero,80c394 <__register_exitproc+0xc4>
  80c30c:	18c00084 	addi	r3,r3,2
  80c310:	18c7883a 	add	r3,r3,r3
  80c314:	18c7883a 	add	r3,r3,r3
  80c318:	12000115 	stw	r8,4(r2)
  80c31c:	10c7883a 	add	r3,r2,r3
  80c320:	19400015 	stw	r5,0(r3)
  80c324:	0005883a 	mov	r2,zero
  80c328:	dfc00517 	ldw	ra,20(sp)
  80c32c:	dc400417 	ldw	r17,16(sp)
  80c330:	dc000317 	ldw	r16,12(sp)
  80c334:	dec00604 	addi	sp,sp,24
  80c338:	f800283a 	ret
  80c33c:	00800034 	movhi	r2,0
  80c340:	10800004 	addi	r2,r2,0
  80c344:	10002626 	beq	r2,zero,80c3e0 <__register_exitproc+0x110>
  80c348:	01006404 	movi	r4,400
  80c34c:	d9400015 	stw	r5,0(sp)
  80c350:	d9800115 	stw	r6,4(sp)
  80c354:	d9c00215 	stw	r7,8(sp)
  80c358:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80c35c:	d9400017 	ldw	r5,0(sp)
  80c360:	d9800117 	ldw	r6,4(sp)
  80c364:	d9c00217 	ldw	r7,8(sp)
  80c368:	10001d26 	beq	r2,zero,80c3e0 <__register_exitproc+0x110>
  80c36c:	81000017 	ldw	r4,0(r16)
  80c370:	10000115 	stw	zero,4(r2)
  80c374:	02000044 	movi	r8,1
  80c378:	22405217 	ldw	r9,328(r4)
  80c37c:	0007883a 	mov	r3,zero
  80c380:	12400015 	stw	r9,0(r2)
  80c384:	20805215 	stw	r2,328(r4)
  80c388:	10006215 	stw	zero,392(r2)
  80c38c:	10006315 	stw	zero,396(r2)
  80c390:	883fde26 	beq	r17,zero,80c30c <__alt_mem_epcs_flash_controller_0+0xff80330c>
  80c394:	18c9883a 	add	r4,r3,r3
  80c398:	2109883a 	add	r4,r4,r4
  80c39c:	1109883a 	add	r4,r2,r4
  80c3a0:	21802215 	stw	r6,136(r4)
  80c3a4:	01800044 	movi	r6,1
  80c3a8:	12406217 	ldw	r9,392(r2)
  80c3ac:	30cc983a 	sll	r6,r6,r3
  80c3b0:	4992b03a 	or	r9,r9,r6
  80c3b4:	12406215 	stw	r9,392(r2)
  80c3b8:	21c04215 	stw	r7,264(r4)
  80c3bc:	01000084 	movi	r4,2
  80c3c0:	893fd21e 	bne	r17,r4,80c30c <__alt_mem_epcs_flash_controller_0+0xff80330c>
  80c3c4:	11006317 	ldw	r4,396(r2)
  80c3c8:	218cb03a 	or	r6,r4,r6
  80c3cc:	11806315 	stw	r6,396(r2)
  80c3d0:	003fce06 	br	80c30c <__alt_mem_epcs_flash_controller_0+0xff80330c>
  80c3d4:	18805304 	addi	r2,r3,332
  80c3d8:	18805215 	stw	r2,328(r3)
  80c3dc:	003fc606 	br	80c2f8 <__alt_mem_epcs_flash_controller_0+0xff8032f8>
  80c3e0:	00bfffc4 	movi	r2,-1
  80c3e4:	003fd006 	br	80c328 <__alt_mem_epcs_flash_controller_0+0xff803328>

0080c3e8 <__call_exitprocs>:
  80c3e8:	defff504 	addi	sp,sp,-44
  80c3ec:	df000915 	stw	fp,36(sp)
  80c3f0:	dd400615 	stw	r21,24(sp)
  80c3f4:	dc800315 	stw	r18,12(sp)
  80c3f8:	dfc00a15 	stw	ra,40(sp)
  80c3fc:	ddc00815 	stw	r23,32(sp)
  80c400:	dd800715 	stw	r22,28(sp)
  80c404:	dd000515 	stw	r20,20(sp)
  80c408:	dcc00415 	stw	r19,16(sp)
  80c40c:	dc400215 	stw	r17,8(sp)
  80c410:	dc000115 	stw	r16,4(sp)
  80c414:	d9000015 	stw	r4,0(sp)
  80c418:	2839883a 	mov	fp,r5
  80c41c:	04800044 	movi	r18,1
  80c420:	057fffc4 	movi	r21,-1
  80c424:	00802074 	movhi	r2,129
  80c428:	10b89804 	addi	r2,r2,-7584
  80c42c:	12000017 	ldw	r8,0(r2)
  80c430:	45005217 	ldw	r20,328(r8)
  80c434:	44c05204 	addi	r19,r8,328
  80c438:	a0001c26 	beq	r20,zero,80c4ac <__call_exitprocs+0xc4>
  80c43c:	a0800117 	ldw	r2,4(r20)
  80c440:	15ffffc4 	addi	r23,r2,-1
  80c444:	b8000d16 	blt	r23,zero,80c47c <__call_exitprocs+0x94>
  80c448:	14000044 	addi	r16,r2,1
  80c44c:	8421883a 	add	r16,r16,r16
  80c450:	8421883a 	add	r16,r16,r16
  80c454:	84402004 	addi	r17,r16,128
  80c458:	a463883a 	add	r17,r20,r17
  80c45c:	a421883a 	add	r16,r20,r16
  80c460:	e0001e26 	beq	fp,zero,80c4dc <__call_exitprocs+0xf4>
  80c464:	80804017 	ldw	r2,256(r16)
  80c468:	e0801c26 	beq	fp,r2,80c4dc <__call_exitprocs+0xf4>
  80c46c:	bdffffc4 	addi	r23,r23,-1
  80c470:	843fff04 	addi	r16,r16,-4
  80c474:	8c7fff04 	addi	r17,r17,-4
  80c478:	bd7ff91e 	bne	r23,r21,80c460 <__alt_mem_epcs_flash_controller_0+0xff803460>
  80c47c:	00800034 	movhi	r2,0
  80c480:	10800004 	addi	r2,r2,0
  80c484:	10000926 	beq	r2,zero,80c4ac <__call_exitprocs+0xc4>
  80c488:	a0800117 	ldw	r2,4(r20)
  80c48c:	1000301e 	bne	r2,zero,80c550 <__call_exitprocs+0x168>
  80c490:	a0800017 	ldw	r2,0(r20)
  80c494:	10003226 	beq	r2,zero,80c560 <__call_exitprocs+0x178>
  80c498:	a009883a 	mov	r4,r20
  80c49c:	98800015 	stw	r2,0(r19)
  80c4a0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80c4a4:	9d000017 	ldw	r20,0(r19)
  80c4a8:	a03fe41e 	bne	r20,zero,80c43c <__alt_mem_epcs_flash_controller_0+0xff80343c>
  80c4ac:	dfc00a17 	ldw	ra,40(sp)
  80c4b0:	df000917 	ldw	fp,36(sp)
  80c4b4:	ddc00817 	ldw	r23,32(sp)
  80c4b8:	dd800717 	ldw	r22,28(sp)
  80c4bc:	dd400617 	ldw	r21,24(sp)
  80c4c0:	dd000517 	ldw	r20,20(sp)
  80c4c4:	dcc00417 	ldw	r19,16(sp)
  80c4c8:	dc800317 	ldw	r18,12(sp)
  80c4cc:	dc400217 	ldw	r17,8(sp)
  80c4d0:	dc000117 	ldw	r16,4(sp)
  80c4d4:	dec00b04 	addi	sp,sp,44
  80c4d8:	f800283a 	ret
  80c4dc:	a0800117 	ldw	r2,4(r20)
  80c4e0:	80c00017 	ldw	r3,0(r16)
  80c4e4:	10bfffc4 	addi	r2,r2,-1
  80c4e8:	15c01426 	beq	r2,r23,80c53c <__call_exitprocs+0x154>
  80c4ec:	80000015 	stw	zero,0(r16)
  80c4f0:	183fde26 	beq	r3,zero,80c46c <__alt_mem_epcs_flash_controller_0+0xff80346c>
  80c4f4:	95c8983a 	sll	r4,r18,r23
  80c4f8:	a0806217 	ldw	r2,392(r20)
  80c4fc:	a5800117 	ldw	r22,4(r20)
  80c500:	2084703a 	and	r2,r4,r2
  80c504:	10000b26 	beq	r2,zero,80c534 <__call_exitprocs+0x14c>
  80c508:	a0806317 	ldw	r2,396(r20)
  80c50c:	2088703a 	and	r4,r4,r2
  80c510:	20000c1e 	bne	r4,zero,80c544 <__call_exitprocs+0x15c>
  80c514:	89400017 	ldw	r5,0(r17)
  80c518:	d9000017 	ldw	r4,0(sp)
  80c51c:	183ee83a 	callr	r3
  80c520:	a0800117 	ldw	r2,4(r20)
  80c524:	15bfbf1e 	bne	r2,r22,80c424 <__alt_mem_epcs_flash_controller_0+0xff803424>
  80c528:	98800017 	ldw	r2,0(r19)
  80c52c:	153fcf26 	beq	r2,r20,80c46c <__alt_mem_epcs_flash_controller_0+0xff80346c>
  80c530:	003fbc06 	br	80c424 <__alt_mem_epcs_flash_controller_0+0xff803424>
  80c534:	183ee83a 	callr	r3
  80c538:	003ff906 	br	80c520 <__alt_mem_epcs_flash_controller_0+0xff803520>
  80c53c:	a5c00115 	stw	r23,4(r20)
  80c540:	003feb06 	br	80c4f0 <__alt_mem_epcs_flash_controller_0+0xff8034f0>
  80c544:	89000017 	ldw	r4,0(r17)
  80c548:	183ee83a 	callr	r3
  80c54c:	003ff406 	br	80c520 <__alt_mem_epcs_flash_controller_0+0xff803520>
  80c550:	a0800017 	ldw	r2,0(r20)
  80c554:	a027883a 	mov	r19,r20
  80c558:	1029883a 	mov	r20,r2
  80c55c:	003fb606 	br	80c438 <__alt_mem_epcs_flash_controller_0+0xff803438>
  80c560:	0005883a 	mov	r2,zero
  80c564:	003ffb06 	br	80c554 <__alt_mem_epcs_flash_controller_0+0xff803554>

0080c568 <__divsi3>:
  80c568:	20001b16 	blt	r4,zero,80c5d8 <__divsi3+0x70>
  80c56c:	000f883a 	mov	r7,zero
  80c570:	28001616 	blt	r5,zero,80c5cc <__divsi3+0x64>
  80c574:	200d883a 	mov	r6,r4
  80c578:	29001a2e 	bgeu	r5,r4,80c5e4 <__divsi3+0x7c>
  80c57c:	00800804 	movi	r2,32
  80c580:	00c00044 	movi	r3,1
  80c584:	00000106 	br	80c58c <__divsi3+0x24>
  80c588:	10000d26 	beq	r2,zero,80c5c0 <__divsi3+0x58>
  80c58c:	294b883a 	add	r5,r5,r5
  80c590:	10bfffc4 	addi	r2,r2,-1
  80c594:	18c7883a 	add	r3,r3,r3
  80c598:	293ffb36 	bltu	r5,r4,80c588 <__alt_mem_epcs_flash_controller_0+0xff803588>
  80c59c:	0005883a 	mov	r2,zero
  80c5a0:	18000726 	beq	r3,zero,80c5c0 <__divsi3+0x58>
  80c5a4:	0005883a 	mov	r2,zero
  80c5a8:	31400236 	bltu	r6,r5,80c5b4 <__divsi3+0x4c>
  80c5ac:	314dc83a 	sub	r6,r6,r5
  80c5b0:	10c4b03a 	or	r2,r2,r3
  80c5b4:	1806d07a 	srli	r3,r3,1
  80c5b8:	280ad07a 	srli	r5,r5,1
  80c5bc:	183ffa1e 	bne	r3,zero,80c5a8 <__alt_mem_epcs_flash_controller_0+0xff8035a8>
  80c5c0:	38000126 	beq	r7,zero,80c5c8 <__divsi3+0x60>
  80c5c4:	0085c83a 	sub	r2,zero,r2
  80c5c8:	f800283a 	ret
  80c5cc:	014bc83a 	sub	r5,zero,r5
  80c5d0:	39c0005c 	xori	r7,r7,1
  80c5d4:	003fe706 	br	80c574 <__alt_mem_epcs_flash_controller_0+0xff803574>
  80c5d8:	0109c83a 	sub	r4,zero,r4
  80c5dc:	01c00044 	movi	r7,1
  80c5e0:	003fe306 	br	80c570 <__alt_mem_epcs_flash_controller_0+0xff803570>
  80c5e4:	00c00044 	movi	r3,1
  80c5e8:	003fee06 	br	80c5a4 <__alt_mem_epcs_flash_controller_0+0xff8035a4>

0080c5ec <__modsi3>:
  80c5ec:	20001716 	blt	r4,zero,80c64c <__modsi3+0x60>
  80c5f0:	000f883a 	mov	r7,zero
  80c5f4:	2005883a 	mov	r2,r4
  80c5f8:	28001216 	blt	r5,zero,80c644 <__modsi3+0x58>
  80c5fc:	2900162e 	bgeu	r5,r4,80c658 <__modsi3+0x6c>
  80c600:	01800804 	movi	r6,32
  80c604:	00c00044 	movi	r3,1
  80c608:	00000106 	br	80c610 <__modsi3+0x24>
  80c60c:	30000a26 	beq	r6,zero,80c638 <__modsi3+0x4c>
  80c610:	294b883a 	add	r5,r5,r5
  80c614:	31bfffc4 	addi	r6,r6,-1
  80c618:	18c7883a 	add	r3,r3,r3
  80c61c:	293ffb36 	bltu	r5,r4,80c60c <__alt_mem_epcs_flash_controller_0+0xff80360c>
  80c620:	18000526 	beq	r3,zero,80c638 <__modsi3+0x4c>
  80c624:	1806d07a 	srli	r3,r3,1
  80c628:	11400136 	bltu	r2,r5,80c630 <__modsi3+0x44>
  80c62c:	1145c83a 	sub	r2,r2,r5
  80c630:	280ad07a 	srli	r5,r5,1
  80c634:	183ffb1e 	bne	r3,zero,80c624 <__alt_mem_epcs_flash_controller_0+0xff803624>
  80c638:	38000126 	beq	r7,zero,80c640 <__modsi3+0x54>
  80c63c:	0085c83a 	sub	r2,zero,r2
  80c640:	f800283a 	ret
  80c644:	014bc83a 	sub	r5,zero,r5
  80c648:	003fec06 	br	80c5fc <__alt_mem_epcs_flash_controller_0+0xff8035fc>
  80c64c:	0109c83a 	sub	r4,zero,r4
  80c650:	01c00044 	movi	r7,1
  80c654:	003fe706 	br	80c5f4 <__alt_mem_epcs_flash_controller_0+0xff8035f4>
  80c658:	00c00044 	movi	r3,1
  80c65c:	003ff106 	br	80c624 <__alt_mem_epcs_flash_controller_0+0xff803624>

0080c660 <__udivsi3>:
  80c660:	200d883a 	mov	r6,r4
  80c664:	2900152e 	bgeu	r5,r4,80c6bc <__udivsi3+0x5c>
  80c668:	28001416 	blt	r5,zero,80c6bc <__udivsi3+0x5c>
  80c66c:	00800804 	movi	r2,32
  80c670:	00c00044 	movi	r3,1
  80c674:	00000206 	br	80c680 <__udivsi3+0x20>
  80c678:	10000e26 	beq	r2,zero,80c6b4 <__udivsi3+0x54>
  80c67c:	28000516 	blt	r5,zero,80c694 <__udivsi3+0x34>
  80c680:	294b883a 	add	r5,r5,r5
  80c684:	10bfffc4 	addi	r2,r2,-1
  80c688:	18c7883a 	add	r3,r3,r3
  80c68c:	293ffa36 	bltu	r5,r4,80c678 <__alt_mem_epcs_flash_controller_0+0xff803678>
  80c690:	18000826 	beq	r3,zero,80c6b4 <__udivsi3+0x54>
  80c694:	0005883a 	mov	r2,zero
  80c698:	31400236 	bltu	r6,r5,80c6a4 <__udivsi3+0x44>
  80c69c:	314dc83a 	sub	r6,r6,r5
  80c6a0:	10c4b03a 	or	r2,r2,r3
  80c6a4:	1806d07a 	srli	r3,r3,1
  80c6a8:	280ad07a 	srli	r5,r5,1
  80c6ac:	183ffa1e 	bne	r3,zero,80c698 <__alt_mem_epcs_flash_controller_0+0xff803698>
  80c6b0:	f800283a 	ret
  80c6b4:	0005883a 	mov	r2,zero
  80c6b8:	f800283a 	ret
  80c6bc:	00c00044 	movi	r3,1
  80c6c0:	003ff406 	br	80c694 <__alt_mem_epcs_flash_controller_0+0xff803694>

0080c6c4 <__umodsi3>:
  80c6c4:	2005883a 	mov	r2,r4
  80c6c8:	2900122e 	bgeu	r5,r4,80c714 <__umodsi3+0x50>
  80c6cc:	28001116 	blt	r5,zero,80c714 <__umodsi3+0x50>
  80c6d0:	01800804 	movi	r6,32
  80c6d4:	00c00044 	movi	r3,1
  80c6d8:	00000206 	br	80c6e4 <__umodsi3+0x20>
  80c6dc:	30000c26 	beq	r6,zero,80c710 <__umodsi3+0x4c>
  80c6e0:	28000516 	blt	r5,zero,80c6f8 <__umodsi3+0x34>
  80c6e4:	294b883a 	add	r5,r5,r5
  80c6e8:	31bfffc4 	addi	r6,r6,-1
  80c6ec:	18c7883a 	add	r3,r3,r3
  80c6f0:	293ffa36 	bltu	r5,r4,80c6dc <__alt_mem_epcs_flash_controller_0+0xff8036dc>
  80c6f4:	18000626 	beq	r3,zero,80c710 <__umodsi3+0x4c>
  80c6f8:	1806d07a 	srli	r3,r3,1
  80c6fc:	11400136 	bltu	r2,r5,80c704 <__umodsi3+0x40>
  80c700:	1145c83a 	sub	r2,r2,r5
  80c704:	280ad07a 	srli	r5,r5,1
  80c708:	183ffb1e 	bne	r3,zero,80c6f8 <__alt_mem_epcs_flash_controller_0+0xff8036f8>
  80c70c:	f800283a 	ret
  80c710:	f800283a 	ret
  80c714:	00c00044 	movi	r3,1
  80c718:	003ff706 	br	80c6f8 <__alt_mem_epcs_flash_controller_0+0xff8036f8>

0080c71c <__mulsi3>:
  80c71c:	0005883a 	mov	r2,zero
  80c720:	20000726 	beq	r4,zero,80c740 <__mulsi3+0x24>
  80c724:	20c0004c 	andi	r3,r4,1
  80c728:	2008d07a 	srli	r4,r4,1
  80c72c:	18000126 	beq	r3,zero,80c734 <__mulsi3+0x18>
  80c730:	1145883a 	add	r2,r2,r5
  80c734:	294b883a 	add	r5,r5,r5
  80c738:	203ffa1e 	bne	r4,zero,80c724 <__alt_mem_epcs_flash_controller_0+0xff803724>
  80c73c:	f800283a 	ret
  80c740:	f800283a 	ret

0080c744 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80c744:	defffd04 	addi	sp,sp,-12
  80c748:	df000215 	stw	fp,8(sp)
  80c74c:	df000204 	addi	fp,sp,8
  80c750:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80c754:	d0203345 	stb	zero,-32563(gp)
  80c758:	e0bfff17 	ldw	r2,-4(fp)
  80c75c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80c760:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c764:	10000226 	beq	r2,zero,80c770 <_exit+0x2c>
    ALT_SIM_FAIL();
  80c768:	002af070 	cmpltui	zero,zero,43969
  80c76c:	00000106 	br	80c774 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80c770:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80c774:	003fff06 	br	80c774 <__alt_mem_epcs_flash_controller_0+0xff803774>
