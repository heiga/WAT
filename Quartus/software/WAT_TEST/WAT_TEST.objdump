
WAT_TEST.elf:     file format elf32-littlenios2
WAT_TEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0001e1c0 memsz 0x000285f8 flags rwx
    LOAD off    0x00020020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00021000 vaddr 0x01009000 paddr 0x01009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01009000  01009000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01004020  01004020  00020020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bac4  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007e4  0081bac4  0081bac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f18  0081c2a8  0081c2a8  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000a438  0081e1c0  0081e1c0  0001f1c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  008285f8  008285f8  00021000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004230  01004230  00021000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  01009020  01009020  00021000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00021000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000011e0  00000000  00000000  00021028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00033bf7  00000000  00000000  00022208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000c413  00000000  00000000  00055dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fae9  00000000  00000000  00062212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003b90  00000000  00000000  00071cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000056c0  00000000  00000000  0007588c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00017b11  00000000  00000000  0007af4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00092a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001910  00000000  00000000  00092a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  00099cea  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00099cf0  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00099cfc  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00099cfd  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00099cfe  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00099d02  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00099d06  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  00099d0a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  00099d15  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  00099d20  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000e  00000000  00000000  00099d2b  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000000e  00000000  00000000  00099d39  2**0
                  CONTENTS, READONLY
 31 .jdi          0000448f  00000000  00000000  00099d47  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00098ce6  00000000  00000000  0009e1d6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01009000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0081bac4 l    d  .rodata	00000000 .rodata
0081c2a8 l    d  .rwdata	00000000 .rwdata
0081e1c0 l    d  .bss	00000000 .bss
008285f8 l    d  .sdram_controller_0	00000000 .sdram_controller_0
01004230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WAT_TEST_bsp//obj/HAL/src/crt0.o
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera_test.c
0081dff4 l     O .rwdata	00000006 CAM_SYNC
0081dffa l     O .rwdata	00000006 CAM_REST
0081e000 l     O .rwdata	00000006 CAM_INIT
0081e006 l     O .rwdata	00000006 CAM_SIZE
0081e00c l     O .rwdata	00000006 CAM_SNAP
0081e012 l     O .rwdata	00000006 CAM_GRAB
0081e018 l     O .rwdata	00000006 CAM_DATA
0081e01e l     O .rwdata	00000006 CAM_ACK_SYNC
0081e024 l     O .rwdata	00000006 CAM_ACK_INIT
0081e02a l     O .rwdata	00000006 CAM_ACK_SIZE
0081e030 l     O .rwdata	00000006 CAM_ACK_SNAP
0081e036 l     O .rwdata	00000006 CAM_ACK_GRAB
0081e03c l     O .rwdata	00000006 CAM_ACK_DATA
0081e042 l     O .rwdata	00000006 CAM_ACK_DEND
0081e048 l     O .rwdata	00000006 CAM_NAK_DATA
0081e050 l     O .rwdata	00000004 CAM_PICTURE_OUTPUT
00000000 l    df *ABS*	00000000 motor_test.c
00000000 l    df *ABS*	00000000 wat_main_test.c
0081e054 l     O .rwdata	00000006 CAM_SYNC
0081e05a l     O .rwdata	00000006 CAM_REST
0081e060 l     O .rwdata	00000006 CAM_INIT
0081e066 l     O .rwdata	00000006 CAM_SIZE
0081e06c l     O .rwdata	00000006 CAM_SNAP
0081e072 l     O .rwdata	00000006 CAM_GRAB
0081e078 l     O .rwdata	00000006 CAM_DATA
0081e07e l     O .rwdata	00000006 CAM_ACK_SYNC
0081e084 l     O .rwdata	00000006 CAM_ACK_INIT
0081e08a l     O .rwdata	00000006 CAM_ACK_SIZE
0081e090 l     O .rwdata	00000006 CAM_ACK_SNAP
0081e096 l     O .rwdata	00000006 CAM_ACK_GRAB
0081e09c l     O .rwdata	00000006 CAM_ACK_DATA
0081e0a2 l     O .rwdata	00000006 CAM_ACK_DEND
0081e0a8 l     O .rwdata	00000006 CAM_NAK_DATA
0081e0b0 l     O .rwdata	00000004 CAM_PICTURE_OUTPUT
00000000 l    df *ABS*	00000000 wifi_test.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801700 l     F .text	00000008 __fp_unlock
00801714 l     F .text	0000019c __sinit.part.1
008018b0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081c2a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081be82 l     O .rodata	00000010 zeroes.4404
00805020 l     F .text	000000bc __sbprintf
0081be92 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
008052e4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081caf4 l     O .rwdata	00000020 lc_ctype_charset
0081cad4 l     O .rwdata	00000020 lc_message_charset
0081cb14 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0081bec0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809010 l     F .text	000000fc __sprint_r.part.0
0081bfe4 l     O .rodata	00000010 zeroes.4349
0080a64c l     F .text	000000bc __sbprintf
0081bff4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080e268 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e37c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e3a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080e73c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e9f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081e0e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080ec6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081e0ec l     O .rwdata	00000004 lockid
0081e210 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081e0f0 l     O .rwdata	00000004 lockid
0081e218 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
008106a4 l     F .text	00000048 OS_InitMisc
008106ec l     F .text	0000006c OS_InitRdyList
00810858 l     F .text	000000e4 OS_InitTCBList
008105c4 l     F .text	000000e0 OS_InitEventList
00810758 l     F .text	00000080 OS_InitTaskIdle
008107d8 l     F .text	00000080 OS_InitTaskStat
00810ac8 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
008127d8 l     F .text	000000f4 OS_FlagTaskRdy
00812598 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008168b0 l     F .text	00000034 alt_dev_reg
0081ccf4 l     O .rwdata	000000cc epcs_flash_controller_0
0081cdc0 l     O .rwdata	0000106c jtag_uart_0
0081de2c l     O .rwdata	000000d0 wifi_uart
0081defc l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
008169d8 l     F .text	00000034 alt_flash_device_register
00816a60 l     F .text	000003f8 alt_epcs_flash_query
00816e58 l     F .text	000000ec alt_epcs_flash_memcmp
00817230 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00817780 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00817a24 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00818200 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00818564 l     F .text	0000009c altera_avalon_uart_irq
00818600 l     F .text	00000138 altera_avalon_uart_rxirq
00818738 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00818930 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00818bd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_hostfs.c
0081e168 l     O .rwdata	00000009 hcinfo.2538
0081e174 l     O .rwdata	0000000a hcinfo.2551
0081e180 l     O .rwdata	00000009 hcinfo.2560
0081e18c l     O .rwdata	0000000a hcinfo.2573
0081e198 l     O .rwdata	0000000a hcinfo.2586
0081e1a4 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 epcs_commands.c
00819328 l     F .text	00000038 epcs_test_wip
00819360 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 fifoed_avalon_uart.c
00819908 l     F .text	0000003c alt_get_errno
00819dd8 l     F .text	00000154 fifoed_avalon_uart_rxirq
00819f2c l     F .text	000001d4 fifoed_avalon_uart_txirq
0081a100 l     F .text	00000090 fifoed_avalon_uart_irq
00000000 l    df *ABS*	00000000 fifoed_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081a62c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081a9a4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081ab04 l     F .text	0000003c alt_get_errno
0081ab40 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081e270 g     O .bss	00000004 alt_instruction_exception_handler
00802a14 g     F .text	00000018 putchar
0080861c g     F .text	00000074 _mprec_log10
0081e13e g     O .rwdata	00000002 OSTaskNameSize
008171a4 g     F .text	0000008c alt_epcs_flash_get_info
00808708 g     F .text	0000008c __any_on
0080aba0 g     F .text	00000054 _isatty_r
0081becc g     O .rodata	00000028 __mprec_tinytens
0080e93c g     F .text	000000bc alt_main
00802a2c g     F .text	000000c0 _puts_r
008252d4 g     O .bss	00000100 alt_irq
00807138 g     F .text	00000060 _lseek_r
00812ff8 g     F .text	000000d8 OS_MemInit
00816850 g     F .text	00000060 OSTimeSet
0080cc40 g     F .text	00000088 .hidden __eqdf2
0080f318 g     F .text	00000610 OSEventPendMulti
008285f8 g       *ABS*	00000000 __alt_heap_start
0081b17c g     F .text	00000024 OSTaskCreateHook
008029d0 g     F .text	0000003c printf
0081e116 g     O .rwdata	00000002 OSMboxEn
0080f980 g     F .text	0000004c OSIntEnter
0080abf4 g     F .text	0000009c _wcrtomb_r
0081e1d8 g     O .bss	00000004 wifiPackageBuffer
00802c2c g     F .text	0000005c __sseek
00801a60 g     F .text	00000010 __sinit
0080a708 g     F .text	00000140 __swbuf_r
0081e126 g     O .rwdata	00000002 OSQEn
0080705c g     F .text	0000007c _setlocale_r
008018b8 g     F .text	00000078 __sfmoreglue
0080efec g     F .text	000000cc __malloc_unlock
0081b1e4 g     F .text	00000020 OSTaskStatHook
00818e48 g     F .text	0000011c alt_hostfs_open
0081e220 g     O .bss	00000001 OSLockNesting
0081e164 g     O .rwdata	00000002 OSDataSize
0081e221 g     O .bss	00000001 OSRunning
0081f2d4 g     O .bss	00002000 motor_test_stk
00807580 g     F .text	0000015c memmove
0081b224 g     F .text	00000020 OSInitHookBegin
0081e15c g     O .rwdata	00000002 OSTmrSize
00801a48 g     F .text	00000018 _cleanup
008076dc g     F .text	000000a8 _Balloc
0081df24 g     O .rwdata	000000d0 cam_uart
0081e224 g     O .bss	00000004 OSIdleCtr
0081e2a4 g     O .bss	00001000 camPackageBuffer
0080ccc8 g     F .text	000000dc .hidden __gtdf2
0081af2c g     F .text	00000024 altera_nios2_gen2_irq_init
0081affc g       .text	00000000 OSStartTsk
00810df8 g     F .text	000002d4 OS_TCBInit
0081939c g     F .text	000000fc epcs_sector_erase
0081a4a0 g     F .text	00000060 fifoed_avalon_uart_classic_write_fd
01009000 g     F .entry	00000000 __reset
0081e162 g     O .rwdata	00000002 OSTmrWheelTblSize
0081e102 g     O .rwdata	00000002 OSEventSize
0081e228 g     O .bss	00000001 OSPrioHighRdy
0080ab44 g     F .text	0000005c _fstat_r
0081f2a4 g     O .bss	00000030 camCommandBuffer
0081b1a0 g     F .text	00000024 OSTaskDelHook
0081e1ec g     O .bss	00000004 errno
00802ba8 g     F .text	00000008 __seofread
0081afdc g       .text	00000000 OSStartHighRdy
008152d0 g     F .text	000001e4 OSTaskCreateExt
008120e0 g     F .text	00000060 OSFlagPendGetFlagsRdy
0081e142 g     O .rwdata	00000002 OSTaskStatStkSize
0081125c g     F .text	00000308 OSFlagAccept
0081363c g     F .text	000000b8 OSQFlush
008130d0 g     F .text	00000140 OSQAccept
0081e208 g     O .bss	00000004 alt_argv
00825ff4 g       *ABS*	00000000 _gp
0081e1dc g     O .bss	00000004 wifiPackageQueue
00815124 g     F .text	000001ac OSTaskCreate
0081a380 g     F .text	00000060 fifoed_avalon_uart_read_fd
00814c34 g     F .text	000004f0 OSTaskChangePrio
0081e21c g     O .bss	00000004 alt_heapsem
008110cc g     F .text	00000190 OSDebugInit
008154b4 g     F .text	00000344 OSTaskDel
0081cb74 g     O .rwdata	00000180 alt_fd_list
008253d4 g     O .bss	00000370 OSFlagTbl
0080104c g     F .text	0000006c wifi_uart_interrupt
00819080 g     F .text	00000068 alt_hostfs_seek
00802a0c g     F .text	00000008 _putchar_r
008103a4 g     F .text	000000b8 OS_EventTaskRemove
008195e0 g     F .text	0000006c epcs_write_status_register
0081b4a4 g     F .text	00000090 alt_find_dev
00807438 g     F .text	00000148 memcpy
0081e12c g     O .rwdata	00000002 OSRdyTblSize
00801708 g     F .text	0000000c _cleanup_r
0080e080 g     F .text	000000dc .hidden __floatsidf
0081a888 g     F .text	00000080 alt_fs_reg
0081aa88 g     F .text	0000007c alt_io_redirect
0080cda4 g     F .text	000000f4 .hidden __ltdf2
0081a440 g     F .text	00000060 fifoed_avalon_uart_classic_read_fd
0081bac4 g       *ABS*	00000000 __DTOR_END__
00802aec g     F .text	00000014 puts
0081a908 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080f0b8 g     F .text	00000120 OSEventNameGet
0081e110 g     O .rwdata	00000002 OSFlagMax
0081733c g     F .text	00000100 alt_epcs_flash_write_block
00808ec0 g     F .text	00000074 __fpclassifyd
00808578 g     F .text	000000a4 __ratio
0080f9cc g     F .text	000000f8 OSIntExit
0080a630 g     F .text	0000001c __vfiprintf_internal
0081e14a g     O .rwdata	00000002 OSTCBSize
0081e229 g     O .bss	00000001 OSPrioCur
00817c80 g     F .text	000002bc altera_avalon_jtag_uart_read
008029a0 g     F .text	00000030 _printf_r
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00801298 g     F .text	00000064 .hidden __udivsi3
0080e778 g     F .text	000000ac isatty
0081e130 g     O .rwdata	00000002 OSStkWidth
0081bf1c g     O .rodata	000000c8 __mprec_tens
0081e124 g     O .rwdata	00000002 OSPtrSize
008070d8 g     F .text	0000000c __locale_charset
0081e104 g     O .rwdata	00000002 OSEventTblSize
0081af50 g       .text	00000000 OSCtxSw
0081e1e8 g     O .bss	00000004 __malloc_top_pad
0081e22c g     O .bss	00000004 OSTCBList
0081e1fc g     O .bss	00000004 alt_fd_list_lock
0081e0c4 g     O .rwdata	00000004 __mb_cur_max
00807108 g     F .text	0000000c _localeconv_r
00807b10 g     F .text	0000003c __i2b
00806b94 g     F .text	000004c8 __sfvwrite_r
00825744 g     O .bss	00000c30 OSMemTbl
0081e230 g     O .bss	00000001 OSTickStepState
00802b00 g     F .text	00000054 _sbrk_r
00818fa8 g     F .text	0000006c alt_hostfs_read
0081e128 g     O .rwdata	00000002 OSQMax
00826374 g     O .bss	00000800 OSTaskStatStk
00812c34 g     F .text	000000f0 OSMemNameGet
0081e108 g     O .rwdata	00000002 OSFlagEn
008088fc g     F .text	00000060 _read_r
0081e14e g     O .rwdata	00000002 OSTimeTickHookEn
008128cc g     F .text	000000a4 OS_FlagUnlink
00813aec g     F .text	00000168 OSQPost
0081e0dc g     O .rwdata	00000004 alt_max_fd
00810990 g     F .text	00000068 OS_MemCopy
008109f8 g     F .text	000000d0 OS_Sched
00801354 g     F .text	000000f0 _fclose_r
00812b44 g     F .text	000000f0 OSMemGet
00815ae0 g     F .text	000001b4 OSTaskNameSet
008016d0 g     F .text	00000030 fflush
0081e1e4 g     O .bss	00000004 __malloc_max_sbrked_mem
0081e234 g     O .bss	00000004 OSCtxSwCtr
0081b204 g     F .text	00000020 OSTimeTickHook
0081e112 g     O .rwdata	00000002 OSFlagNameSize
0081045c g     F .text	00000100 OS_EventTaskRemoveMulti
008010b8 g     F .text	000000e8 motorCommand
0080b9c4 g     F .text	000008ac .hidden __adddf3
00810254 g     F .text	00000150 OS_EventTaskWaitMulti
008172c4 g     F .text	00000078 alt_epcs_flash_erase_block
00808320 g     F .text	0000010c __b2d
0081e12a g     O .rwdata	00000002 OSQSize
0080b3d8 g     F .text	000005c4 .hidden __umoddi3
0080e860 g     F .text	000000dc lseek
0081459c g     F .text	0000020c OSSemPend
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0081e0b4 g     O .rwdata	00000004 _global_impure_ptr
008198ac g     F .text	0000005c epcs_exit_4_bytes_mode
0080895c g     F .text	00000564 _realloc_r
0081e114 g     O .rwdata	00000002 OSLowestPrio
008285f8 g       *ABS*	00000000 __bss_end
0080e64c g     F .text	000000f0 alt_iic_isr_register
0081b284 g     F .text	00000024 OSTCBInitHook
0081e15a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0081ae24 g     F .text	00000108 alt_tick
0080addc g     F .text	000005fc .hidden __udivdi3
0080aaa0 g     F .text	00000024 _fputwc_r
0081e0fc g     O .rwdata	00000002 OSEventEn
0081bef4 g     O .rodata	00000028 __mprec_bigtens
008078f4 g     F .text	00000104 __s2b
0081e156 g     O .rwdata	00000002 OSTmrCfgNameSize
0080e15c g     F .text	000000a8 .hidden __floatunsidf
0081a338 g     F .text	00000048 fifoed_avalon_uart_classic_write
00808060 g     F .text	00000060 __mcmp
00818404 g     F .text	00000160 altera_avalon_uart_init
00801a80 g     F .text	00000018 __fp_lock_all
0080e600 g     F .text	0000004c alt_ic_irq_enabled
0081e1c0 g     O .bss	00000001 useData
008126f8 g     F .text	000000e0 OS_FlagInit
0081ad88 g     F .text	0000009c alt_alarm_stop
0081e138 g     O .rwdata	00000002 OSTaskIdleStkSize
0081e200 g     O .bss	00000004 alt_irq_active
008141d4 g     F .text	000000b0 OSSemAccept
00812e38 g     F .text	000000d8 OSMemPut
00812970 g     F .text	000001d4 OSMemCreate
0081e238 g     O .bss	00000004 OSIdleCtrMax
00818f64 g     F .text	00000044 alt_hostfs_close
010040fc g     F .exceptions	000000d4 alt_irq_handler
0081cb4c g     O .rwdata	00000028 alt_dev_null
0081e14c g     O .rwdata	00000002 OSTicksPerSec
0081af50 g       .text	00000000 OSIntCtxSw
008079f8 g     F .text	00000068 __hi0bits
0080e000 g     F .text	00000080 .hidden __fixdfsi
0081e23c g     O .bss	00000004 OSTCBFreeList
008147a8 g     F .text	0000016c OSSemPendAbort
0081e0d4 g     O .rwdata	00000008 alt_dev_list
0080eca8 g     F .text	00000100 write
00808794 g     F .text	000000a0 _putc_r
0081e150 g     O .rwdata	00000002 OSVersionNbr
0080e3e4 g     F .text	000000b8 fstat
0080cda4 g     F .text	000000f4 .hidden __ledf2
00800db0 g     F .text	0000002c motor_test
0081e0f8 g     O .rwdata	00000004 OSEndiannessTest
00807dd8 g     F .text	00000140 __pow5mult
00809124 g     F .text	0000150c ___vfiprintf_internal_r
0081e1f8 g     O .bss	00000004 __nlocale_changed
008012fc g     F .text	00000058 .hidden __umodsi3
00819768 g     F .text	00000068 epcs_read_electronic_signature
0081e10a g     O .rwdata	00000002 OSFlagGrpSize
008285f8 g       *ABS*	00000000 end
0081e1c4 g     O .bss	00000004 camQueueStatus
00818c10 g     F .text	00000238 altera_avalon_uart_write
00817638 g     F .text	00000148 altera_avalon_jtag_uart_init
00810c60 g     F .text	000000cc OS_TaskStat
010041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0081e1d4 g     O .bss	00000004 SENSOR_SEM
0081bac4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00818278 g     F .text	0000007c alt_avalon_timer_sc_init
00818354 g     F .text	00000060 altera_avalon_uart_write_fd
0080e204 g     F .text	00000064 .hidden __clzsi2
008183b4 g     F .text	00000050 altera_avalon_uart_close_fd
00817f3c g     F .text	000002c4 altera_avalon_jtag_uart_write
00801a70 g     F .text	00000004 __sfp_lock_acquire
00807354 g     F .text	000000e4 memchr
0081093c g     F .text	00000054 OS_MemClr
00802d28 g     F .text	000022dc ___vfprintf_internal_r
0081b020 g     F .text	0000015c OSTaskStkInit
00801bd4 g     F .text	00000310 _free_r
008070e4 g     F .text	00000010 __locale_mb_cur_max
0080ffac g     F .text	00000198 OS_EventTaskRdy
0081b910 g     F .text	00000180 __call_exitprocs
0081e240 g     O .bss	00000001 OSCPUUsage
0081e1f4 g     O .bss	00000004 __mlocale_changed
0081e0bc g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
0081e274 g     O .bss	00000004 _alt_tick_rate
008136f4 g     F .text	0000028c OSQPend
00800038 g     F .text	00000ad0 camera_test
008163a0 g     F .text	00000104 OSTimeDly
00807f18 g     F .text	00000148 __lshift
0081b2a8 g     F .text	000001fc alt_avalon_spi_command
0081e278 g     O .bss	00000004 _alt_nticks
0080ea34 g     F .text	00000104 read
0081691c g     F .text	000000bc alt_sys_init
0081b7f8 g     F .text	00000118 __register_exitproc
0081e241 g     O .bss	00000001 OSTaskCtr
008164a4 g     F .text	0000017c OSTimeDlyHMSM
00807b4c g     F .text	0000028c __multiply
00817b28 g     F .text	00000068 altera_avalon_jtag_uart_close
0080b99c g     F .text	00000028 .hidden __mulsi3
0081e27c g     O .bss	00000028 __malloc_current_mallinfo
0081e0fe g     O .rwdata	00000002 OSEventMax
0080842c g     F .text	0000014c __d2b
00814914 g     F .text	00000110 OSSemPost
008212d4 g     O .bss	00002000 wifi_test_stk
008192cc g     F .text	0000005c epcs_read_status_register
0080fb50 g     F .text	000000dc OSSchedUnlock
0081e1c8 g     O .bss	00000004 camCommandQueue
0081a2f0 g     F .text	00000048 fifoed_avalon_uart_classic_read
008174d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081b63c g     F .text	000000f4 alt_get_fd
0081e244 g     O .bss	00000004 OSMemFreeList
0080fc9c g     F .text	000000b0 OSStatInit
008124d4 g     F .text	000000c4 OSFlagQuery
00819944 g     F .text	0000025c fifoed_avalon_uart_read
0081e134 g     O .rwdata	00000002 OSTaskCreateExtEn
00805290 g     F .text	00000054 _close_r
008197d0 g     F .text	00000080 epcs_read_device_id
0081b77c g     F .text	0000007c memcmp
0080ff8c g     F .text	00000020 OS_Dummy
00817594 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008285f8 g       *ABS*	00000000 __alt_stack_base
008175e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0080513c g     F .text	00000154 __swsetup_r
00826b74 g     O .bss	000001e0 OSQTbl
0080c270 g     F .text	000009d0 .hidden __divdf3
00801930 g     F .text	00000118 __sfp
00808690 g     F .text	00000078 __copybits
0081c6cc g     O .rwdata	00000408 __malloc_av_
00801a7c g     F .text	00000004 __sinit_lock_release
0081e248 g     O .bss	00000004 OSTCBHighRdy
0080ce98 g     F .text	0000086c .hidden __muldf3
00802b54 g     F .text	00000054 __sread
0081e24c g     O .bss	00000004 OSQFreeList
0081b534 g     F .text	00000108 alt_find_file
0081a668 g     F .text	000000a4 alt_dev_llist_insert
0080eecc g     F .text	00000120 __malloc_lock
0080ebbc g     F .text	000000b0 sbrk
0080f1d8 g     F .text	00000140 OSEventNameSet
00801674 g     F .text	0000005c _fflush_r
0080a860 g     F .text	000000dc _calloc_r
0081e250 g     O .bss	00000001 OSRdyGrp
0081e1b0 g     O .rwdata	00000008 alt_flash_dev_list
0081e1c0 g       *ABS*	00000000 __bss_start
00802878 g     F .text	00000128 memset
00800e30 g     F .text	000001a0 main
0081e20c g     O .bss	00000004 alt_envp
0081e1e0 g     O .bss	00000004 __malloc_max_total_mem
00817534 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080a848 g     F .text	00000018 __swbuf
0081c124 g     O .rodata	00000100 OSUnMapTbl
0081e12e g     O .rwdata	00000002 OSSemEn
00812140 g     F .text	00000394 OSFlagPost
00802c88 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00801444 g     F .text	00000014 fclose
00810144 g     F .text	00000110 OS_EventTaskWait
00819ba0 g     F .text	00000238 fifoed_avalon_uart_write
00810d2c g     F .text	000000cc OS_TaskStatStkChk
008157f8 g     F .text	00000150 OSTaskDelReq
0080550c g     F .text	00001688 _dtoa_r
0080206c g     F .text	0000080c _malloc_r
0080ad50 g     F .text	00000030 __ascii_wctomb
0081e0e0 g     O .rwdata	00000004 alt_errno
0080fc2c g     F .text	00000070 OSStart
0080ee6c g     F .text	00000060 __env_unlock
00801ee4 g     F .text	000000c4 _fwalk
00815c94 g     F .text	000001d4 OSTaskResume
00812f10 g     F .text	000000e8 OSMemQuery
0081e140 g     O .rwdata	00000002 OSTaskStatEn
0081e11a g     O .rwdata	00000002 OSMemMax
00813c54 g     F .text	00000170 OSQPostFront
00808834 g     F .text	000000c8 putc
008011a0 g     F .text	00000084 .hidden __divsi3
0081e251 g     O .bss	00000003 OSRdyTbl
0081e0f4 g     O .rwdata	00000002 OSDebugEn
00801ab0 g     F .text	00000124 _malloc_trim_r
0081bac4 g       *ABS*	00000000 __CTOR_END__
0081e10c g     O .rwdata	00000002 OSFlagNodeSize
0081e154 g     O .rwdata	00000002 OSTmrCfgMax
00816f44 g     F .text	00000260 alt_epcs_flash_write
00808f34 g     F .text	000000dc strcmp
00813210 g     F .text	000001ac OSQCreate
00815948 g     F .text	00000198 OSTaskNameGet
00813dc4 g     F .text	0000020c OSQPostOpt
0080fd4c g     F .text	00000220 OSTimeTick
0081e1cc g     O .bss	00000004 camPackageQueue
0081e13c g     O .rwdata	00000002 OSTaskMax
0081bac4 g       *ABS*	00000000 __DTOR_LIST__
00814284 g     F .text	000000d8 OSSemCreate
0081e160 g     O .rwdata	00000002 OSTmrWheelSize
0081a3e0 g     F .text	00000060 fifoed_avalon_uart_write_fd
0080cc40 g     F .text	00000088 .hidden __nedf2
0081e136 g     O .rwdata	00000002 OSTaskDelEn
00814a24 g     F .text	00000110 OSSemQuery
008133bc g     F .text	00000280 OSQDel
00813980 g     F .text	0000016c OSQPendAbort
008168e4 g     F .text	00000038 alt_irq_init
0080eb38 g     F .text	00000084 alt_release_fd
0081c004 g     O .rodata	00000100 .hidden __clz_tab
0081e1f0 g     O .bss	00000004 _PathLocale
0081b730 g     F .text	00000014 atexit
008050dc g     F .text	00000060 _write_r
0080fac4 g     F .text	0000008c OSSchedLock
00807114 g     F .text	00000018 setlocale
00800ddc g     F .text	00000054 sensor_interrupt
00811564 g     F .text	00000108 OSFlagCreate
0081e0b8 g     O .rwdata	00000004 _impure_ptr
0081e204 g     O .bss	00000004 alt_argc
00801458 g     F .text	0000021c __sflush_r
0081a76c g     F .text	00000060 _do_dtors
00807100 g     F .text	00000008 __locale_cjk_lang
0081e106 g     O .rwdata	00000002 OSEventMultiEn
0081166c g     F .text	00000248 OSFlagDel
0081e254 g     O .bss	00000004 OSEventFreeList
01004020 g       .exceptions	00000000 alt_irq_entry
008082bc g     F .text	00000064 __ulp
00811b28 g     F .text	000005b8 OSFlagPend
0081e152 g     O .rwdata	00000002 OSTmrEn
00801a98 g     F .text	00000018 __fp_unlock_all
008232d4 g     O .bss	00002000 camera_test_stk
0081e0cc g     O .rwdata	00000008 alt_fs_list
00810b3c g     F .text	00000074 OS_StrCopy
00819014 g     F .text	0000006c alt_hostfs_write
0081e11c g     O .rwdata	00000002 OSMemNameSize
0081b244 g     F .text	00000020 OSInitHookEnd
0081e148 g     O .rwdata	00000002 OSTCBPrioTblMax
0080712c g     F .text	0000000c localeconv
00819498 g     F .text	000000f4 epcs_read_buffer
0081e144 g     O .rwdata	00000002 OSTaskStatStkChkEn
00816a0c g     F .text	00000054 alt_epcs_flash_init
0080e49c g     F .text	00000050 alt_ic_isr_register
0081e118 g     O .rwdata	00000002 OSMemEn
0081e122 g     O .rwdata	00000002 OSMutexEn
0081e1c0 g       *ABS*	00000000 _edata
008182f4 g     F .text	00000060 altera_avalon_uart_read_fd
00800d5c g     F .text	00000054 button_interrupt
008285f8 g       *ABS*	00000000 _end
0081a7cc g     F .text	00000068 alt_flash_open_dev
0081e258 g     O .bss	00000001 OSIntNesting
0080a93c g     F .text	00000164 __fputwc
00817b90 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00816620 g     F .text	000001d4 OSTimeDlyResume
008119dc g     F .text	0000014c OSFlagNameSet
00815e68 g     F .text	000001c0 OSTaskStkChk
0080e574 g     F .text	0000008c alt_ic_irq_disable
00819850 g     F .text	0000005c epcs_enter_4_bytes_mode
0081e11e g     O .rwdata	00000002 OSMemSize
00802bb0 g     F .text	0000007c __swrite
0081e0c0 g     O .rwdata	00000004 __malloc_trim_threshold
008070f4 g     F .text	0000000c __locale_msgcharset
0081e25c g     O .bss	00000004 OSTCBCur
0081b744 g     F .text	00000038 exit
0081e120 g     O .rwdata	00000002 OSMemTblSize
00801fa8 g     F .text	000000c4 _fwalk_reent
008080c0 g     F .text	000001fc __mdiff
0081a834 g     F .text	00000054 alt_flash_close_dev
00801224 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00801a74 g     F .text	00000004 __sfp_lock_release
0081e1d0 g     O .bss	00000004 BUTTON_SEM
0080f928 g     F .text	00000058 OSInit
0081620c g     F .text	00000124 OSTaskQuery
0081412c g     F .text	000000a8 OS_QInit
00810bb0 g     F .text	00000054 OS_StrLen
00812d24 g     F .text	00000114 OSMemNameSet
0081e13a g     O .rwdata	00000002 OSTaskProfileEn
0081e260 g     O .bss	00000004 OSTime
008188dc g     F .text	00000054 altera_avalon_uart_close
00826d54 g     O .bss	00000800 OSTaskIdleStk
0081ba90 g     F .text	00000034 _exit
0081a500 g     F .text	0000012c alt_alarm_start
008118b4 g     F .text	00000128 OSFlagNameGet
008167f4 g     F .text	0000005c OSTimeGet
00807198 g     F .text	000001bc __smakebuf_r
00802c90 g     F .text	00000098 strlen
0081958c g     F .text	00000054 epcs_write_enable
0081b1c4 g     F .text	00000020 OSTaskSwHook
0081ac2c g     F .text	0000015c open
00800b08 g     F .text	000001c4 cam_send_command
00827554 g     O .bss	00000b40 OSEventTbl
0080ccc8 g     F .text	000000dc .hidden __gedf2
00828094 g     O .bss	00000510 OSTCBTbl
00814b34 g     F .text	00000100 OSSemSet
0081e0c8 g     O .rwdata	00000004 __wctomb
0080910c g     F .text	00000018 __sprint_r
0081e0e4 g     O .rwdata	00000004 alt_priority_mask
0081435c g     F .text	00000240 OSSemDel
0081e264 g     O .bss	00000004 OSFlagFreeList
0080e4ec g     F .text	00000088 alt_ic_irq_enable
0081e100 g     O .rwdata	00000002 OSEventNameSize
00805004 g     F .text	0000001c __vfprintf_internal
0081e268 g     O .bss	00000001 OSStatRdy
00800fd0 g     F .text	0000007c wifi_test
008285a4 g     O .bss	00000054 OSTCBPrioTbl
0081896c g     F .text	00000268 altera_avalon_uart_read
0080ad80 g     F .text	0000005c _wctomb_r
0080eda8 g     F .text	000000c4 __env_lock
0081e146 g     O .rwdata	00000002 OSTaskSwHookEn
0080d704 g     F .text	000008fc .hidden __subdf3
0081743c g     F .text	00000098 alt_epcs_flash_read
00807a60 g     F .text	000000b0 __lo0bits
0081e1b8 g     O .rwdata	00000008 alt_alarm_list
0081e10e g     O .rwdata	00000002 OSFlagWidth
0081a70c g     F .text	00000060 _do_ctors
0080ac90 g     F .text	000000c0 wcrtomb
0080e2a4 g     F .text	000000d8 close
00800ccc g     F .text	00000090 cam_uart_interrupt
0081e214 g     O .bss	00000004 alt_envsem
0081e26c g     O .bss	00000004 OSIdleCtrRun
0080ff6c g     F .text	00000020 OSVersion
0081e158 g     O .rwdata	00000002 OSTmrCfgWheelSize
00816330 g     F .text	00000070 OS_TaskStkClr
0081e132 g     O .rwdata	00000002 OSTaskCreateEn
0081a190 g     F .text	00000160 fifoed_avalon_uart_init
0081055c g     F .text	00000068 OS_EventWaitListInit
0080aac4 g     F .text	00000080 fputwc
0081b264 g     F .text	00000020 OSTaskIdleHook
00801a78 g     F .text	00000004 __sinit_lock_acquire
0081964c g     F .text	0000011c epcs_write_buffer
008077ac g     F .text	00000148 __multadd
00816028 g     F .text	000001e4 OSTaskSuspend
00807784 g     F .text	00000028 _Bfree
008190e8 g     F .text	000001e4 alt_hostfs_fstat
00810c04 g     F .text	0000005c OS_TaskIdle
0081e15e g     O .rwdata	00000002 OSTmrTblSize
00813fd0 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

01004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040fc0 	call	10040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000706 	br	10040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1004098:	10041d00 	call	10041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100409c:	1000021e 	bne	r2,zero,10040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040f8:	ef80083a 	eret

010040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040fc:	defff904 	addi	sp,sp,-28
 1004100:	dfc00615 	stw	ra,24(sp)
 1004104:	df000515 	stw	fp,20(sp)
 1004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100410c:	080f9800 	call	80f980 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004110:	0005313a 	rdctl	r2,ipending
 1004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004124:	00800044 	movi	r2,1
 1004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100412c:	e0fffb17 	ldw	r3,-20(fp)
 1004130:	e0bffc17 	ldw	r2,-16(fp)
 1004134:	1884703a 	and	r2,r3,r2
 1004138:	10001426 	beq	r2,zero,100418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100413c:	008020b4 	movhi	r2,130
 1004140:	1094b504 	addi	r2,r2,21204
 1004144:	e0fffd17 	ldw	r3,-12(fp)
 1004148:	180690fa 	slli	r3,r3,3
 100414c:	10c5883a 	add	r2,r2,r3
 1004150:	10c00017 	ldw	r3,0(r2)
 1004154:	008020b4 	movhi	r2,130
 1004158:	1094b504 	addi	r2,r2,21204
 100415c:	e13ffd17 	ldw	r4,-12(fp)
 1004160:	200890fa 	slli	r4,r4,3
 1004164:	1105883a 	add	r2,r2,r4
 1004168:	10800104 	addi	r2,r2,4
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	1009883a 	mov	r4,r2
 1004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100417c:	0005313a 	rdctl	r2,ipending
 1004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1004184:	e0bfff17 	ldw	r2,-4(fp)
 1004188:	00000706 	br	10041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100418c:	e0bffc17 	ldw	r2,-16(fp)
 1004190:	1085883a 	add	r2,r2,r2
 1004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1004198:	e0bffd17 	ldw	r2,-12(fp)
 100419c:	10800044 	addi	r2,r2,1
 10041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10041a4:	003fe106 	br	100412c <__alt_mem_epcs_flash_controller_0+0xffffb12c>

    active = alt_irq_pending ();
 10041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10041ac:	e0bffb17 	ldw	r2,-20(fp)
 10041b0:	103fdb1e 	bne	r2,zero,1004120 <__alt_mem_epcs_flash_controller_0+0xffffb120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10041b4:	080f9cc0 	call	80f9cc <OSIntExit>
}
 10041b8:	0001883a 	nop
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	dfc00117 	ldw	ra,4(sp)
 10041c4:	df000017 	ldw	fp,0(sp)
 10041c8:	dec00204 	addi	sp,sp,8
 10041cc:	f800283a 	ret

010041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10041d0:	defffb04 	addi	sp,sp,-20
 10041d4:	dfc00415 	stw	ra,16(sp)
 10041d8:	df000315 	stw	fp,12(sp)
 10041dc:	df000304 	addi	fp,sp,12
 10041e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10041e4:	00bfffc4 	movi	r2,-1
 10041e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10041ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10041f0:	d0a09f17 	ldw	r2,-32132(gp)
 10041f4:	10000726 	beq	r2,zero,1004214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10041f8:	d0a09f17 	ldw	r2,-32132(gp)
 10041fc:	e0fffd17 	ldw	r3,-12(fp)
 1004200:	e1bffe17 	ldw	r6,-8(fp)
 1004204:	e17fff17 	ldw	r5,-4(fp)
 1004208:	1809883a 	mov	r4,r3
 100420c:	103ee83a 	callr	r2
 1004210:	00000206 	br	100421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1004214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1004218:	0005883a 	mov	r2,zero
}
 100421c:	e037883a 	mov	sp,fp
 1004220:	dfc00117 	ldw	ra,4(sp)
 1004224:	df000017 	ldw	fp,0(sp)
 1004228:	dec00204 	addi	sp,sp,8
 100422c:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800008:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  80000c:	d697fd14 	ori	gp,gp,24564
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	10b87014 	ori	r2,r2,57792

    movhi r3, %hi(__bss_end)
  800018:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  80001c:	18e17e14 	ori	r3,r3,34296

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <__alt_mem_epcs_flash_controller_0+0xff7f7024>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	080e93c0 	call	80e93c <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <__alt_mem_epcs_flash_controller_0+0xff7f7034>

00800038 <camera_test>:
 * camera will take a picture and output the average color
 * value to the terminal. Operator will switch the image and
 * press the button again. A different average color should
 * appear in the terminal. Repeat as needed.
 */
void camera_test(void* pdata){
  800038:	defff204 	addi	sp,sp,-56
  80003c:	dfc00d15 	stw	ra,52(sp)
  800040:	df000c15 	stw	fp,48(sp)
  800044:	df000c04 	addi	fp,sp,48
  800048:	e13fff15 	stw	r4,-4(fp)

	uint32_t *leds = GREEN_LEDS_BASE;
  80004c:	00804074 	movhi	r2,257
  800050:	10a83004 	addi	r2,r2,-24384
  800054:	e0bffa15 	stw	r2,-24(fp)

	uint16_t q = 0;
  800058:	e03ff40d 	sth	zero,-48(fp)
	uint16_t z = 0;
  80005c:	e03ff48d 	sth	zero,-46(fp)
	uint8_t err;

	uint8_t cam_reply = 0;
  800060:	e03ffb05 	stb	zero,-20(fp)
	uint16_t bit_count = 0;
  800064:	e03ffb8d 	sth	zero,-18(fp)
	uint16_t packet_count = 0;
  800068:	e03ff50d 	sth	zero,-44(fp)
	uint16_t last_packet_byte_count = 0;
  80006c:	e03ff58d 	sth	zero,-42(fp)

	bool isGoodPacket = FALSE;
  800070:	e03ff605 	stb	zero,-40(fp)
	uint32_t checksum = 0;
  800074:	e03ff715 	stw	zero,-36(fp)
	uint32_t tempsum = 0;
  800078:	e03ff815 	stw	zero,-32(fp)
	uint16_t data_length = 0;
  80007c:	e03ff90d 	sth	zero,-28(fp)
	uint8_t cam_data_ack[CAM_COMMAND_LENGTH];
	FILE* picture;

	uint8_t sync_delay = CAM_INIT_SYNC_DELAY;
  800080:	00800144 	movi	r2,5
  800084:	e0bff985 	stb	r2,-26(fp)
	bool synced = FALSE;
  800088:	e03ff9c5 	stb	zero,-25(fp)

//	printf("Starting to open...");
//	picture = fopen(CAM_PICTURE_OUTPUT, "a");
//	printf(" and done\n");

	for(q = 0; q< CAM_COMMAND_LENGTH; q++){
  80008c:	e03ff40d 	sth	zero,-48(fp)
  800090:	00000b06 	br	8000c0 <camera_test+0x88>
		cam_data_ack[q] = CAM_ACK_DATA[q];
  800094:	e0bff40b 	ldhu	r2,-48(fp)
  800098:	e13ff40b 	ldhu	r4,-48(fp)
  80009c:	d0e01204 	addi	r3,gp,-32696
  8000a0:	20c7883a 	add	r3,r4,r3
  8000a4:	18c00003 	ldbu	r3,0(r3)
  8000a8:	e13ffd44 	addi	r4,fp,-11
  8000ac:	2085883a 	add	r2,r4,r2
  8000b0:	10c00005 	stb	r3,0(r2)

//	printf("Starting to open...");
//	picture = fopen(CAM_PICTURE_OUTPUT, "a");
//	printf(" and done\n");

	for(q = 0; q< CAM_COMMAND_LENGTH; q++){
  8000b4:	e0bff40b 	ldhu	r2,-48(fp)
  8000b8:	10800044 	addi	r2,r2,1
  8000bc:	e0bff40d 	sth	r2,-48(fp)
  8000c0:	e0bff40b 	ldhu	r2,-48(fp)
  8000c4:	108001b0 	cmpltui	r2,r2,6
  8000c8:	103ff21e 	bne	r2,zero,800094 <__alt_mem_epcs_flash_controller_0+0xff7f7094>
		cam_data_ack[q] = CAM_ACK_DATA[q];
	}

	//Reset to deal with any junk transmissions
	for (z = 0; z < CAM_COMMAND_LENGTH; z++){
  8000cc:	e03ff48d 	sth	zero,-46(fp)
  8000d0:	00001106 	br	800118 <camera_test+0xe0>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
  8000d4:	0001883a 	nop
  8000d8:	00804074 	movhi	r2,257
  8000dc:	10a80204 	addi	r2,r2,-24568
  8000e0:	10800037 	ldwio	r2,0(r2)
  8000e4:	1080100c 	andi	r2,r2,64
  8000e8:	103ffb26 	beq	r2,zero,8000d8 <__alt_mem_epcs_flash_controller_0+0xff7f70d8>
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_REST[z]);
  8000ec:	e0fff48b 	ldhu	r3,-46(fp)
  8000f0:	d0a00184 	addi	r2,gp,-32762
  8000f4:	1885883a 	add	r2,r3,r2
  8000f8:	10800003 	ldbu	r2,0(r2)
  8000fc:	10c03fcc 	andi	r3,r2,255
  800100:	00804074 	movhi	r2,257
  800104:	10a80104 	addi	r2,r2,-24572
  800108:	10c00035 	stwio	r3,0(r2)
	for(q = 0; q< CAM_COMMAND_LENGTH; q++){
		cam_data_ack[q] = CAM_ACK_DATA[q];
	}

	//Reset to deal with any junk transmissions
	for (z = 0; z < CAM_COMMAND_LENGTH; z++){
  80010c:	e0bff48b 	ldhu	r2,-46(fp)
  800110:	10800044 	addi	r2,r2,1
  800114:	e0bff48d 	sth	r2,-46(fp)
  800118:	e0bff48b 	ldhu	r2,-46(fp)
  80011c:	108001b0 	cmpltui	r2,r2,6
  800120:	103fec1e 	bne	r2,zero,8000d4 <__alt_mem_epcs_flash_controller_0+0xff7f70d4>
	* Documentation mentions this will take 25-60 attempts
	* Recommends an increasing delay between attempts
	* with an initial time of 5ms
	*/

	useData = FALSE;
  800124:	d0207305 	stb	zero,-32308(gp)
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  800128:	e03ff40d 	sth	zero,-48(fp)
  80012c:	00006406 	br	8002c0 <camera_test+0x288>
		//Assume false until proven otherwise
		synced = FALSE;
  800130:	e03ff9c5 	stb	zero,-25(fp)

		//Send the sync command
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800134:	e03ff48d 	sth	zero,-46(fp)
  800138:	00001106 	br	800180 <camera_test+0x148>
			while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
  80013c:	0001883a 	nop
  800140:	00804074 	movhi	r2,257
  800144:	10a80204 	addi	r2,r2,-24568
  800148:	10800037 	ldwio	r2,0(r2)
  80014c:	1080100c 	andi	r2,r2,64
  800150:	103ffb26 	beq	r2,zero,800140 <__alt_mem_epcs_flash_controller_0+0xff7f7140>
			IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
  800154:	e0fff48b 	ldhu	r3,-46(fp)
  800158:	d0a00004 	addi	r2,gp,-32768
  80015c:	1885883a 	add	r2,r3,r2
  800160:	10800003 	ldbu	r2,0(r2)
  800164:	10c03fcc 	andi	r3,r2,255
  800168:	00804074 	movhi	r2,257
  80016c:	10a80104 	addi	r2,r2,-24572
  800170:	10c00035 	stwio	r3,0(r2)
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
		//Assume false until proven otherwise
		synced = FALSE;

		//Send the sync command
		for (z=0; z < CAM_COMMAND_LENGTH; z++){
  800174:	e0bff48b 	ldhu	r2,-46(fp)
  800178:	10800044 	addi	r2,r2,1
  80017c:	e0bff48d 	sth	r2,-46(fp)
  800180:	e0bff48b 	ldhu	r2,-46(fp)
  800184:	108001b0 	cmpltui	r2,r2,6
  800188:	103fec1e 	bne	r2,zero,80013c <__alt_mem_epcs_flash_controller_0+0xff7f713c>
			while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
			IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_SYNC[z]);
		}

		//Wait the recommended sync time as per doc
		OSTimeDlyHMSM(0, 0, 0, sync_delay);
  80018c:	e0bff983 	ldbu	r2,-26(fp)
  800190:	100f883a 	mov	r7,r2
  800194:	000d883a 	mov	r6,zero
  800198:	000b883a 	mov	r5,zero
  80019c:	0009883a 	mov	r4,zero
  8001a0:	08164a40 	call	8164a4 <OSTimeDlyHMSM>

		cam_reply = (uint8_t)OSQAccept(camCommandQueue, &err);
  8001a4:	d0a07517 	ldw	r2,-32300(gp)
  8001a8:	e0fffd04 	addi	r3,fp,-12
  8001ac:	180b883a 	mov	r5,r3
  8001b0:	1009883a 	mov	r4,r2
  8001b4:	08130d00 	call	8130d0 <OSQAccept>
  8001b8:	e0bffb05 	stb	r2,-20(fp)
		if (cam_reply == CAM_ACK_SYNC[0]){
  8001bc:	00bfea84 	movi	r2,-86
  8001c0:	10c03fcc 	andi	r3,r2,255
  8001c4:	e0bffb03 	ldbu	r2,-20(fp)
  8001c8:	1880351e 	bne	r3,r2,8002a0 <camera_test+0x268>
			synced = TRUE;
  8001cc:	00800044 	movi	r2,1
  8001d0:	e0bff9c5 	stb	r2,-25(fp)
			printf("Receiving %x", cam_reply);
  8001d4:	e0bffb03 	ldbu	r2,-20(fp)
  8001d8:	100b883a 	mov	r5,r2
  8001dc:	010020b4 	movhi	r4,130
  8001e0:	212eb704 	addi	r4,r4,-17700
  8001e4:	08029d00 	call	8029d0 <printf>
			for (z=1; z < CAM_COMMAND_LENGTH; z++){
  8001e8:	00800044 	movi	r2,1
  8001ec:	e0bff48d 	sth	r2,-46(fp)
  8001f0:	00002606 	br	80028c <camera_test+0x254>
				cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  8001f4:	d0a07517 	ldw	r2,-32300(gp)
  8001f8:	e0fffd04 	addi	r3,fp,-12
  8001fc:	180d883a 	mov	r6,r3
  800200:	000b883a 	mov	r5,zero
  800204:	1009883a 	mov	r4,r2
  800208:	08136f40 	call	8136f4 <OSQPend>
  80020c:	e0bffb05 	stb	r2,-20(fp)
				if ((cam_reply != CAM_ACK_SYNC[z]) && (z != CAM_ACK_IGNORE)){
  800210:	e0fff48b 	ldhu	r3,-46(fp)
  800214:	d0a00a84 	addi	r2,gp,-32726
  800218:	1885883a 	add	r2,r3,r2
  80021c:	10800003 	ldbu	r2,0(r2)
  800220:	10c03fcc 	andi	r3,r2,255
  800224:	e0bffb03 	ldbu	r2,-20(fp)
  800228:	18801026 	beq	r3,r2,80026c <camera_test+0x234>
  80022c:	e0bff48b 	ldhu	r2,-46(fp)
  800230:	108000e0 	cmpeqi	r2,r2,3
  800234:	10000d1e 	bne	r2,zero,80026c <camera_test+0x234>
					printf("Got %x expected %x\n", cam_reply, CAM_ACK_SYNC[z]);
  800238:	e13ffb03 	ldbu	r4,-20(fp)
  80023c:	e0fff48b 	ldhu	r3,-46(fp)
  800240:	d0a00a84 	addi	r2,gp,-32726
  800244:	1885883a 	add	r2,r3,r2
  800248:	10800003 	ldbu	r2,0(r2)
  80024c:	10803fcc 	andi	r2,r2,255
  800250:	100d883a 	mov	r6,r2
  800254:	200b883a 	mov	r5,r4
  800258:	010020b4 	movhi	r4,130
  80025c:	212ebb04 	addi	r4,r4,-17684
  800260:	08029d00 	call	8029d0 <printf>
					synced = FALSE;
  800264:	e03ff9c5 	stb	zero,-25(fp)
					break;
  800268:	00000b06 	br	800298 <camera_test+0x260>
				}else{
					printf(" %x", cam_reply);
  80026c:	e0bffb03 	ldbu	r2,-20(fp)
  800270:	100b883a 	mov	r5,r2
  800274:	010020b4 	movhi	r4,130
  800278:	212ec004 	addi	r4,r4,-17664
  80027c:	08029d00 	call	8029d0 <printf>

		cam_reply = (uint8_t)OSQAccept(camCommandQueue, &err);
		if (cam_reply == CAM_ACK_SYNC[0]){
			synced = TRUE;
			printf("Receiving %x", cam_reply);
			for (z=1; z < CAM_COMMAND_LENGTH; z++){
  800280:	e0bff48b 	ldhu	r2,-46(fp)
  800284:	10800044 	addi	r2,r2,1
  800288:	e0bff48d 	sth	r2,-46(fp)
  80028c:	e0bff48b 	ldhu	r2,-46(fp)
  800290:	108001b0 	cmpltui	r2,r2,6
  800294:	103fd71e 	bne	r2,zero,8001f4 <__alt_mem_epcs_flash_controller_0+0xff7f71f4>
					break;
				}else{
					printf(" %x", cam_reply);
				}
			}
			printf("\n");
  800298:	01000284 	movi	r4,10
  80029c:	0802a140 	call	802a14 <putchar>
		}

		if (synced){
  8002a0:	e0bff9c3 	ldbu	r2,-25(fp)
  8002a4:	10000a1e 	bne	r2,zero,8002d0 <camera_test+0x298>
			break;
		}else{
			sync_delay++;
  8002a8:	e0bff983 	ldbu	r2,-26(fp)
  8002ac:	10800044 	addi	r2,r2,1
  8002b0:	e0bff985 	stb	r2,-26(fp)
	* Recommends an increasing delay between attempts
	* with an initial time of 5ms
	*/

	useData = FALSE;
	for (q=0; q < CAM_MAX_ATTEMPTS; q++){
  8002b4:	e0bff40b 	ldhu	r2,-48(fp)
  8002b8:	10800044 	addi	r2,r2,1
  8002bc:	e0bff40d 	sth	r2,-48(fp)
  8002c0:	e0bff40b 	ldhu	r2,-48(fp)
  8002c4:	10800f30 	cmpltui	r2,r2,60
  8002c8:	103f991e 	bne	r2,zero,800130 <__alt_mem_epcs_flash_controller_0+0xff7f7130>
  8002cc:	00000106 	br	8002d4 <camera_test+0x29c>
			}
			printf("\n");
		}

		if (synced){
			break;
  8002d0:	0001883a 	nop
		}else{
			sync_delay++;
		}
	}

	if (synced){
  8002d4:	e0bff9c3 	ldbu	r2,-25(fp)
  8002d8:	10000b26 	beq	r2,zero,800308 <camera_test+0x2d0>
		printf("Cam synced after %i attempts\n", sync_delay);
  8002dc:	e0bff983 	ldbu	r2,-26(fp)
  8002e0:	100b883a 	mov	r5,r2
  8002e4:	010020b4 	movhi	r4,130
  8002e8:	212ec104 	addi	r4,r4,-17660
  8002ec:	08029d00 	call	8029d0 <printf>
		*leds = *leds ^ 0xFF;
  8002f0:	e0bffa17 	ldw	r2,-24(fp)
  8002f4:	10800017 	ldw	r2,0(r2)
  8002f8:	10c03fdc 	xori	r3,r2,255
  8002fc:	e0bffa17 	ldw	r2,-24(fp)
  800300:	10c00015 	stw	r3,0(r2)
  800304:	00000506 	br	80031c <camera_test+0x2e4>
	}else{
		printf("Cam sync failure after %i attempts\n", sync_delay);
  800308:	e0bff983 	ldbu	r2,-26(fp)
  80030c:	100b883a 	mov	r5,r2
  800310:	010020b4 	movhi	r4,130
  800314:	212ec904 	addi	r4,r4,-17628
  800318:	08029d00 	call	8029d0 <printf>
		//return;
	}

	//Send ACK to camera to ACK its SYNC
	for (z=0; z < CAM_COMMAND_LENGTH; z++){
  80031c:	e03ff48d 	sth	zero,-46(fp)
  800320:	00001106 	br	800368 <camera_test+0x330>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
  800324:	0001883a 	nop
  800328:	00804074 	movhi	r2,257
  80032c:	10a80204 	addi	r2,r2,-24568
  800330:	10800037 	ldwio	r2,0(r2)
  800334:	1080100c 	andi	r2,r2,64
  800338:	103ffb26 	beq	r2,zero,800328 <__alt_mem_epcs_flash_controller_0+0xff7f7328>
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
  80033c:	e0fff48b 	ldhu	r3,-46(fp)
  800340:	d0a00a84 	addi	r2,gp,-32726
  800344:	1885883a 	add	r2,r3,r2
  800348:	10800003 	ldbu	r2,0(r2)
  80034c:	10c03fcc 	andi	r3,r2,255
  800350:	00804074 	movhi	r2,257
  800354:	10a80104 	addi	r2,r2,-24572
  800358:	10c00035 	stwio	r3,0(r2)
		printf("Cam sync failure after %i attempts\n", sync_delay);
		//return;
	}

	//Send ACK to camera to ACK its SYNC
	for (z=0; z < CAM_COMMAND_LENGTH; z++){
  80035c:	e0bff48b 	ldhu	r2,-46(fp)
  800360:	10800044 	addi	r2,r2,1
  800364:	e0bff48d 	sth	r2,-46(fp)
  800368:	e0bff48b 	ldhu	r2,-46(fp)
  80036c:	108001b0 	cmpltui	r2,r2,6
  800370:	103fec1e 	bne	r2,zero,800324 <__alt_mem_epcs_flash_controller_0+0xff7f7324>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_SYNC[z]);
	}

	//Recommended by doc
	OSTimeDlyHMSM(0, 0, 2, 0);
  800374:	000f883a 	mov	r7,zero
  800378:	01800084 	movi	r6,2
  80037c:	000b883a 	mov	r5,zero
  800380:	0009883a 	mov	r4,zero
  800384:	08164a40 	call	8164a4 <OSTimeDlyHMSM>

	//Turn on camera
	printf("INIT ");
  800388:	010020b4 	movhi	r4,130
  80038c:	212ed204 	addi	r4,r4,-17592
  800390:	08029d00 	call	8029d0 <printf>
	if(!cam_send_command(CAM_INIT, CAM_ACK_INIT, CAM_COMMAND_LENGTH, camCommandQueue)){
  800394:	d0a07517 	ldw	r2,-32300(gp)
  800398:	100f883a 	mov	r7,r2
  80039c:	01800184 	movi	r6,6
  8003a0:	d1600c04 	addi	r5,gp,-32720
  8003a4:	d1200304 	addi	r4,gp,-32756
  8003a8:	0800b080 	call	800b08 <cam_send_command>
  8003ac:	1080005c 	xori	r2,r2,1
  8003b0:	10803fcc 	andi	r2,r2,255
  8003b4:	10000326 	beq	r2,zero,8003c4 <camera_test+0x38c>
		printf("Error at init\n");
  8003b8:	010020b4 	movhi	r4,130
  8003bc:	212ed404 	addi	r4,r4,-17584
  8003c0:	0802aec0 	call	802aec <puts>
	}

	//Send package size into to camera
	printf("SIZE ");
  8003c4:	010020b4 	movhi	r4,130
  8003c8:	212ed804 	addi	r4,r4,-17568
  8003cc:	08029d00 	call	8029d0 <printf>
	if(!cam_send_command(CAM_SIZE, CAM_ACK_SIZE, CAM_COMMAND_LENGTH, camCommandQueue)){
  8003d0:	d0a07517 	ldw	r2,-32300(gp)
  8003d4:	100f883a 	mov	r7,r2
  8003d8:	01800184 	movi	r6,6
  8003dc:	d1600d84 	addi	r5,gp,-32714
  8003e0:	d1200484 	addi	r4,gp,-32750
  8003e4:	0800b080 	call	800b08 <cam_send_command>
  8003e8:	1080005c 	xori	r2,r2,1
  8003ec:	10803fcc 	andi	r2,r2,255
  8003f0:	10000326 	beq	r2,zero,800400 <camera_test+0x3c8>
		printf("Error at size\n");
  8003f4:	010020b4 	movhi	r4,130
  8003f8:	212eda04 	addi	r4,r4,-17560
  8003fc:	0802aec0 	call	802aec <puts>
	}

	//Tell camera to take picture
	printf("SNAP ");
  800400:	010020b4 	movhi	r4,130
  800404:	212ede04 	addi	r4,r4,-17544
  800408:	08029d00 	call	8029d0 <printf>
	if(!cam_send_command(CAM_SNAP, CAM_ACK_SNAP, CAM_COMMAND_LENGTH, camCommandQueue)){
  80040c:	d0a07517 	ldw	r2,-32300(gp)
  800410:	100f883a 	mov	r7,r2
  800414:	01800184 	movi	r6,6
  800418:	d1600f04 	addi	r5,gp,-32708
  80041c:	d1200604 	addi	r4,gp,-32744
  800420:	0800b080 	call	800b08 <cam_send_command>
  800424:	1080005c 	xori	r2,r2,1
  800428:	10803fcc 	andi	r2,r2,255
  80042c:	10000326 	beq	r2,zero,80043c <camera_test+0x404>
		printf("Error at snap\n");
  800430:	010020b4 	movhi	r4,130
  800434:	212ee004 	addi	r4,r4,-17536
  800438:	0802aec0 	call	802aec <puts>
	}

	//Tell camera to start sending the picture
	printf("GRAB ");
  80043c:	010020b4 	movhi	r4,130
  800440:	212ee404 	addi	r4,r4,-17520
  800444:	08029d00 	call	8029d0 <printf>
	if(!cam_send_command(CAM_GRAB, CAM_ACK_GRAB, CAM_COMMAND_LENGTH, camCommandQueue)){
  800448:	d0a07517 	ldw	r2,-32300(gp)
  80044c:	100f883a 	mov	r7,r2
  800450:	01800184 	movi	r6,6
  800454:	d1601084 	addi	r5,gp,-32702
  800458:	d1200784 	addi	r4,gp,-32738
  80045c:	0800b080 	call	800b08 <cam_send_command>
  800460:	1080005c 	xori	r2,r2,1
  800464:	10803fcc 	andi	r2,r2,255
  800468:	10000326 	beq	r2,zero,800478 <camera_test+0x440>
		printf("Error at grab\n");
  80046c:	010020b4 	movhi	r4,130
  800470:	212ee604 	addi	r4,r4,-17512
  800474:	0802aec0 	call	802aec <puts>
	}

	//Receive the package count, not an ACK and needs special parsing
	printf ("PARSE ");
  800478:	010020b4 	movhi	r4,130
  80047c:	212eea04 	addi	r4,r4,-17496
  800480:	08029d00 	call	8029d0 <printf>
	cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800484:	d0a07517 	ldw	r2,-32300(gp)
  800488:	e0fffd04 	addi	r3,fp,-12
  80048c:	180d883a 	mov	r6,r3
  800490:	000b883a 	mov	r5,zero
  800494:	1009883a 	mov	r4,r2
  800498:	08136f40 	call	8136f4 <OSQPend>
  80049c:	e0bffb05 	stb	r2,-20(fp)
	if (cam_reply == CAM_DATA[0]){
  8004a0:	00bfea84 	movi	r2,-86
  8004a4:	10c03fcc 	andi	r3,r2,255
  8004a8:	e0bffb03 	ldbu	r2,-20(fp)
  8004ac:	1880721e 	bne	r3,r2,800678 <camera_test+0x640>
		printf("receiving %x", cam_reply);
  8004b0:	e0bffb03 	ldbu	r2,-20(fp)
  8004b4:	100b883a 	mov	r5,r2
  8004b8:	010020b4 	movhi	r4,130
  8004bc:	212eec04 	addi	r4,r4,-17488
  8004c0:	08029d00 	call	8029d0 <printf>
		for (z = 1; z < CAM_DATA_START; z++){
  8004c4:	00800044 	movi	r2,1
  8004c8:	e0bff48d 	sth	r2,-46(fp)
  8004cc:	00002206 	br	800558 <camera_test+0x520>
			cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  8004d0:	d0a07517 	ldw	r2,-32300(gp)
  8004d4:	e0fffd04 	addi	r3,fp,-12
  8004d8:	180d883a 	mov	r6,r3
  8004dc:	000b883a 	mov	r5,zero
  8004e0:	1009883a 	mov	r4,r2
  8004e4:	08136f40 	call	8136f4 <OSQPend>
  8004e8:	e0bffb05 	stb	r2,-20(fp)
			if ((cam_reply != CAM_DATA[z])){
  8004ec:	e0fff48b 	ldhu	r3,-46(fp)
  8004f0:	d0a00904 	addi	r2,gp,-32732
  8004f4:	1885883a 	add	r2,r3,r2
  8004f8:	10800003 	ldbu	r2,0(r2)
  8004fc:	10c03fcc 	andi	r3,r2,255
  800500:	e0bffb03 	ldbu	r2,-20(fp)
  800504:	18800c26 	beq	r3,r2,800538 <camera_test+0x500>
				printf("got %x expected %x\n", cam_reply, CAM_DATA[z]);
  800508:	e13ffb03 	ldbu	r4,-20(fp)
  80050c:	e0fff48b 	ldhu	r3,-46(fp)
  800510:	d0a00904 	addi	r2,gp,-32732
  800514:	1885883a 	add	r2,r3,r2
  800518:	10800003 	ldbu	r2,0(r2)
  80051c:	10803fcc 	andi	r2,r2,255
  800520:	100d883a 	mov	r6,r2
  800524:	200b883a 	mov	r5,r4
  800528:	010020b4 	movhi	r4,130
  80052c:	212ef004 	addi	r4,r4,-17472
  800530:	08029d00 	call	8029d0 <printf>
  800534:	00000506 	br	80054c <camera_test+0x514>
			}else{
				printf(" %x", cam_reply);
  800538:	e0bffb03 	ldbu	r2,-20(fp)
  80053c:	100b883a 	mov	r5,r2
  800540:	010020b4 	movhi	r4,130
  800544:	212ec004 	addi	r4,r4,-17664
  800548:	08029d00 	call	8029d0 <printf>
	//Receive the package count, not an ACK and needs special parsing
	printf ("PARSE ");
	cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
	if (cam_reply == CAM_DATA[0]){
		printf("receiving %x", cam_reply);
		for (z = 1; z < CAM_DATA_START; z++){
  80054c:	e0bff48b 	ldhu	r2,-46(fp)
  800550:	10800044 	addi	r2,r2,1
  800554:	e0bff48d 	sth	r2,-46(fp)
  800558:	e0bff48b 	ldhu	r2,-46(fp)
  80055c:	108000f0 	cmpltui	r2,r2,3
  800560:	103fdb1e 	bne	r2,zero,8004d0 <__alt_mem_epcs_flash_controller_0+0xff7f74d0>
		//The last three packages will contain the packet count
		//Need to account for the byte offsets and get a single
		//integer value that contains the total number of bits
		//that will be sent by the camera

		bit_count = 0;
  800564:	e03ffb8d 	sth	zero,-18(fp)
		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  800568:	d0a07517 	ldw	r2,-32300(gp)
  80056c:	e0fffd04 	addi	r3,fp,-12
  800570:	180d883a 	mov	r6,r3
  800574:	000b883a 	mov	r5,zero
  800578:	1009883a 	mov	r4,r2
  80057c:	08136f40 	call	8136f4 <OSQPend>
  800580:	e0bffb05 	stb	r2,-20(fp)
		printf(" %x", cam_reply);
  800584:	e0bffb03 	ldbu	r2,-20(fp)
  800588:	100b883a 	mov	r5,r2
  80058c:	010020b4 	movhi	r4,130
  800590:	212ec004 	addi	r4,r4,-17664
  800594:	08029d00 	call	8029d0 <printf>
		bit_count = cam_reply;
  800598:	e0bffb03 	ldbu	r2,-20(fp)
  80059c:	e0bffb8d 	sth	r2,-18(fp)

		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  8005a0:	d0a07517 	ldw	r2,-32300(gp)
  8005a4:	e0fffd04 	addi	r3,fp,-12
  8005a8:	180d883a 	mov	r6,r3
  8005ac:	000b883a 	mov	r5,zero
  8005b0:	1009883a 	mov	r4,r2
  8005b4:	08136f40 	call	8136f4 <OSQPend>
  8005b8:	e0bffb05 	stb	r2,-20(fp)
		printf(" %lx", cam_reply);
  8005bc:	e0bffb03 	ldbu	r2,-20(fp)
  8005c0:	100b883a 	mov	r5,r2
  8005c4:	010020b4 	movhi	r4,130
  8005c8:	212ef504 	addi	r4,r4,-17452
  8005cc:	08029d00 	call	8029d0 <printf>
		bit_count = bit_count + (0x100 * cam_reply);
  8005d0:	e0bffb03 	ldbu	r2,-20(fp)
  8005d4:	1004923a 	slli	r2,r2,8
  8005d8:	1007883a 	mov	r3,r2
  8005dc:	e0bffb8b 	ldhu	r2,-18(fp)
  8005e0:	1885883a 	add	r2,r3,r2
  8005e4:	e0bffb8d 	sth	r2,-18(fp)

		cam_reply = (uint8_t)OSQPend(camCommandQueue, 0, &err);
  8005e8:	d0a07517 	ldw	r2,-32300(gp)
  8005ec:	e0fffd04 	addi	r3,fp,-12
  8005f0:	180d883a 	mov	r6,r3
  8005f4:	000b883a 	mov	r5,zero
  8005f8:	1009883a 	mov	r4,r2
  8005fc:	08136f40 	call	8136f4 <OSQPend>
  800600:	e0bffb05 	stb	r2,-20(fp)
		printf(" %x", cam_reply);
  800604:	e0bffb03 	ldbu	r2,-20(fp)
  800608:	100b883a 	mov	r5,r2
  80060c:	010020b4 	movhi	r4,130
  800610:	212ec004 	addi	r4,r4,-17664
  800614:	08029d00 	call	8029d0 <printf>
		bit_count = bit_count + (0x10000 * cam_reply);
		printf("\nByte count of %i\n", bit_count);
  800618:	e0bffb8b 	ldhu	r2,-18(fp)
  80061c:	100b883a 	mov	r5,r2
  800620:	010020b4 	movhi	r4,130
  800624:	212ef704 	addi	r4,r4,-17444
  800628:	08029d00 	call	8029d0 <printf>

		//Determine the number of packets based on the given bit values
		packet_count = (bit_count / (CAM_PACKAGE_LENGTH - 6)) + 1;
  80062c:	e0bffb8b 	ldhu	r2,-18(fp)
  800630:	01407e84 	movi	r5,506
  800634:	1009883a 	mov	r4,r2
  800638:	08012980 	call	801298 <__udivsi3>
  80063c:	10800044 	addi	r2,r2,1
  800640:	e0bff50d 	sth	r2,-44(fp)
		last_packet_byte_count = bit_count % (CAM_PACKAGE_LENGTH - 6);
  800644:	e0bffb8b 	ldhu	r2,-18(fp)
  800648:	01407e84 	movi	r5,506
  80064c:	1009883a 	mov	r4,r2
  800650:	08012fc0 	call	8012fc <__umodsi3>
  800654:	e0bff58d 	sth	r2,-42(fp)
		printf("Expecting %i total packets with final one being %i bits\n", packet_count, last_packet_byte_count);
  800658:	e0bff50b 	ldhu	r2,-44(fp)
  80065c:	e0fff58b 	ldhu	r3,-42(fp)
  800660:	180d883a 	mov	r6,r3
  800664:	100b883a 	mov	r5,r2
  800668:	010020b4 	movhi	r4,130
  80066c:	212efc04 	addi	r4,r4,-17424
  800670:	08029d00 	call	8029d0 <printf>
  800674:	00000806 	br	800698 <camera_test+0x660>
	}else{
		printf("got %x expected %x\n", cam_reply, CAM_DATA[0]);
  800678:	e0bffb03 	ldbu	r2,-20(fp)
  80067c:	00ffea84 	movi	r3,-86
  800680:	18c03fcc 	andi	r3,r3,255
  800684:	180d883a 	mov	r6,r3
  800688:	100b883a 	mov	r5,r2
  80068c:	010020b4 	movhi	r4,130
  800690:	212ef004 	addi	r4,r4,-17472
  800694:	08029d00 	call	8029d0 <printf>
	}

	//TODO clean up numbers here once operational
	//Receive data, start with normal packets
	useData = TRUE;
  800698:	00800044 	movi	r2,1
  80069c:	d0a07305 	stb	r2,-32308(gp)
	synced = TRUE;
  8006a0:	00800044 	movi	r2,1
  8006a4:	e0bff9c5 	stb	r2,-25(fp)
	q = 0;
  8006a8:	e03ff40d 	sth	zero,-48(fp)
	printf("DATA STARTING\n");
  8006ac:	010020b4 	movhi	r4,130
  8006b0:	212f0b04 	addi	r4,r4,-17364
  8006b4:	0802aec0 	call	802aec <puts>
	while(q < packet_count){
  8006b8:	0000e906 	br	800a60 <camera_test+0xa28>

		//Prepare for next iteration
		isGoodPacket = TRUE;
  8006bc:	00800044 	movi	r2,1
  8006c0:	e0bff605 	stb	r2,-40(fp)
		checksum = 0;
  8006c4:	e03ff715 	stw	zero,-36(fp)
		tempsum = 0;
  8006c8:	e03ff815 	stw	zero,-32(fp)
		//TODO fix this if the self recovery from NAK is built in
		if (q == (packet_count - 1)){
  8006cc:	e0fff40b 	ldhu	r3,-48(fp)
  8006d0:	e0bff50b 	ldhu	r2,-44(fp)
  8006d4:	10bfffc4 	addi	r2,r2,-1
  8006d8:	1880031e 	bne	r3,r2,8006e8 <camera_test+0x6b0>
			data_length = last_packet_byte_count;
  8006dc:	e0bff58b 	ldhu	r2,-42(fp)
  8006e0:	e0bff90d 	sth	r2,-28(fp)
  8006e4:	00000206 	br	8006f0 <camera_test+0x6b8>
		}else{
			data_length = CAM_PACKAGE_LENGTH - 2;
  8006e8:	00807f84 	movi	r2,510
  8006ec:	e0bff90d 	sth	r2,-28(fp)
		}

		OSQFlush(camPackageQueue);
  8006f0:	d0a07617 	ldw	r2,-32296(gp)
  8006f4:	1009883a 	mov	r4,r2
  8006f8:	081363c0 	call	81363c <OSQFlush>

		//Indicate which packet we intend to receive
		cam_data_ack[4] = q;
  8006fc:	e0bff40b 	ldhu	r2,-48(fp)
  800700:	e0bffe45 	stb	r2,-7(fp)
		for (z = 0; z < CAM_COMMAND_LENGTH; z++){
  800704:	e03ff48d 	sth	zero,-46(fp)
  800708:	00001106 	br	800750 <camera_test+0x718>
			while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
  80070c:	0001883a 	nop
  800710:	00804074 	movhi	r2,257
  800714:	10a80204 	addi	r2,r2,-24568
  800718:	10800037 	ldwio	r2,0(r2)
  80071c:	1080100c 	andi	r2,r2,64
  800720:	103ffb26 	beq	r2,zero,800710 <__alt_mem_epcs_flash_controller_0+0xff7f7710>
			IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, cam_data_ack[z]);
  800724:	e0bff48b 	ldhu	r2,-46(fp)
  800728:	e0fffd44 	addi	r3,fp,-11
  80072c:	1885883a 	add	r2,r3,r2
  800730:	10800003 	ldbu	r2,0(r2)
  800734:	10c03fcc 	andi	r3,r2,255
  800738:	00804074 	movhi	r2,257
  80073c:	10a80104 	addi	r2,r2,-24572
  800740:	10c00035 	stwio	r3,0(r2)

		OSQFlush(camPackageQueue);

		//Indicate which packet we intend to receive
		cam_data_ack[4] = q;
		for (z = 0; z < CAM_COMMAND_LENGTH; z++){
  800744:	e0bff48b 	ldhu	r2,-46(fp)
  800748:	10800044 	addi	r2,r2,1
  80074c:	e0bff48d 	sth	r2,-46(fp)
  800750:	e0bff48b 	ldhu	r2,-46(fp)
  800754:	108001b0 	cmpltui	r2,r2,6
  800758:	103fec1e 	bne	r2,zero,80070c <__alt_mem_epcs_flash_controller_0+0xff7f770c>
			while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
			IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, cam_data_ack[z]);
		}

		//First two bytes are ID, make sure they match the ID we want
		for(z = 0; z < 2; z++){
  80075c:	e03ff48d 	sth	zero,-46(fp)
  800760:	00002f06 	br	800820 <camera_test+0x7e8>
			if(isGoodPacket){
  800764:	e0bff603 	ldbu	r2,-40(fp)
  800768:	10002a26 	beq	r2,zero,800814 <camera_test+0x7dc>
				cam_reply = (uint8_t)OSQPend(camPackageQueue, MAX_TIME, &err);
  80076c:	d0a07617 	ldw	r2,-32296(gp)
  800770:	e0fffd04 	addi	r3,fp,-12
  800774:	180d883a 	mov	r6,r3
  800778:	0143e804 	movi	r5,4000
  80077c:	1009883a 	mov	r4,r2
  800780:	08136f40 	call	8136f4 <OSQPend>
  800784:	e0bffb05 	stb	r2,-20(fp)
				if(err == OS_TIMEOUT){
  800788:	e0bffd03 	ldbu	r2,-12(fp)
  80078c:	10803fcc 	andi	r2,r2,255
  800790:	10800298 	cmpnei	r2,r2,10
  800794:	1000051e 	bne	r2,zero,8007ac <camera_test+0x774>
					printf("TIMEOUT AT ID\n");
  800798:	010020b4 	movhi	r4,130
  80079c:	212f0f04 	addi	r4,r4,-17348
  8007a0:	0802aec0 	call	802aec <puts>
					isGoodPacket = FALSE;
  8007a4:	e03ff605 	stb	zero,-40(fp)
  8007a8:	00001a06 	br	800814 <camera_test+0x7dc>
				}else{
					if((cam_reply != (1 + cam_data_ack[z+4])) && (cam_reply != 0)){
  8007ac:	e0fffb03 	ldbu	r3,-20(fp)
  8007b0:	e0bff48b 	ldhu	r2,-46(fp)
  8007b4:	10800104 	addi	r2,r2,4
  8007b8:	e13ffd44 	addi	r4,fp,-11
  8007bc:	2085883a 	add	r2,r4,r2
  8007c0:	10800003 	ldbu	r2,0(r2)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	10800044 	addi	r2,r2,1
  8007cc:	18801126 	beq	r3,r2,800814 <camera_test+0x7dc>
  8007d0:	e0bffb03 	ldbu	r2,-20(fp)
  8007d4:	10000f26 	beq	r2,zero,800814 <camera_test+0x7dc>
						isGoodPacket = FALSE;
  8007d8:	e03ff605 	stb	zero,-40(fp)
						printf("Packet %i ID expected %x but got %x\n", q, cam_data_ack[z+4], cam_reply);
  8007dc:	e13ff40b 	ldhu	r4,-48(fp)
  8007e0:	e0bff48b 	ldhu	r2,-46(fp)
  8007e4:	10800104 	addi	r2,r2,4
  8007e8:	e0fffd44 	addi	r3,fp,-11
  8007ec:	1885883a 	add	r2,r3,r2
  8007f0:	10800003 	ldbu	r2,0(r2)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	e0fffb03 	ldbu	r3,-20(fp)
  8007fc:	180f883a 	mov	r7,r3
  800800:	100d883a 	mov	r6,r2
  800804:	200b883a 	mov	r5,r4
  800808:	010020b4 	movhi	r4,130
  80080c:	212f1304 	addi	r4,r4,-17332
  800810:	08029d00 	call	8029d0 <printf>
			while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
			IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, cam_data_ack[z]);
		}

		//First two bytes are ID, make sure they match the ID we want
		for(z = 0; z < 2; z++){
  800814:	e0bff48b 	ldhu	r2,-46(fp)
  800818:	10800044 	addi	r2,r2,1
  80081c:	e0bff48d 	sth	r2,-46(fp)
  800820:	e0bff48b 	ldhu	r2,-46(fp)
  800824:	108000b0 	cmpltui	r2,r2,2
  800828:	103fce1e 	bne	r2,zero,800764 <__alt_mem_epcs_flash_controller_0+0xff7f7764>
						printf("Packet %i ID expected %x but got %x\n", q, cam_data_ack[z+4], cam_reply);
					}
				}
			}
		}
		if (isGoodPacket){
  80082c:	e0bff603 	ldbu	r2,-40(fp)
  800830:	10000826 	beq	r2,zero,800854 <camera_test+0x81c>
			printf("ID checked\n");
  800834:	010020b4 	movhi	r4,130
  800838:	212f1d04 	addi	r4,r4,-17292
  80083c:	0802aec0 	call	802aec <puts>
			printf("Packet %i has size of ", q);
  800840:	e0bff40b 	ldhu	r2,-48(fp)
  800844:	100b883a 	mov	r5,r2
  800848:	010020b4 	movhi	r4,130
  80084c:	212f2004 	addi	r4,r4,-17280
  800850:	08029d00 	call	8029d0 <printf>

		//Next two bytes are data size, print it out until I decide what to do with it
		//Should be LOWER_BYTE UPPER_BYTE of data size and should equal PACKAGE_LENGTH - 6
		//until of course we hit the final packet so it might be a good dea to use this
		//as the loop counter for data parsing loop
		for(z = 0; z < 2; z++){
  800854:	e03ff48d 	sth	zero,-46(fp)
  800858:	00001a06 	br	8008c4 <camera_test+0x88c>
			if(isGoodPacket){
  80085c:	e0bff603 	ldbu	r2,-40(fp)
  800860:	10001526 	beq	r2,zero,8008b8 <camera_test+0x880>
				cam_reply = (uint8_t)OSQPend(camPackageQueue, MAX_TIME, &err);
  800864:	d0a07617 	ldw	r2,-32296(gp)
  800868:	e0fffd04 	addi	r3,fp,-12
  80086c:	180d883a 	mov	r6,r3
  800870:	0143e804 	movi	r5,4000
  800874:	1009883a 	mov	r4,r2
  800878:	08136f40 	call	8136f4 <OSQPend>
  80087c:	e0bffb05 	stb	r2,-20(fp)
				if(err == OS_TIMEOUT){
  800880:	e0bffd03 	ldbu	r2,-12(fp)
  800884:	10803fcc 	andi	r2,r2,255
  800888:	10800298 	cmpnei	r2,r2,10
  80088c:	1000051e 	bne	r2,zero,8008a4 <camera_test+0x86c>
					printf("TIMEOUT AT SIZE\n");
  800890:	010020b4 	movhi	r4,130
  800894:	212f2604 	addi	r4,r4,-17256
  800898:	0802aec0 	call	802aec <puts>
					isGoodPacket = FALSE;
  80089c:	e03ff605 	stb	zero,-40(fp)
  8008a0:	00000506 	br	8008b8 <camera_test+0x880>
				}else{
					//TODO add parsing of data size
					printf("%x ", cam_reply);
  8008a4:	e0bffb03 	ldbu	r2,-20(fp)
  8008a8:	100b883a 	mov	r5,r2
  8008ac:	010020b4 	movhi	r4,130
  8008b0:	212f2a04 	addi	r4,r4,-17240
  8008b4:	08029d00 	call	8029d0 <printf>

		//Next two bytes are data size, print it out until I decide what to do with it
		//Should be LOWER_BYTE UPPER_BYTE of data size and should equal PACKAGE_LENGTH - 6
		//until of course we hit the final packet so it might be a good dea to use this
		//as the loop counter for data parsing loop
		for(z = 0; z < 2; z++){
  8008b8:	e0bff48b 	ldhu	r2,-46(fp)
  8008bc:	10800044 	addi	r2,r2,1
  8008c0:	e0bff48d 	sth	r2,-46(fp)
  8008c4:	e0bff48b 	ldhu	r2,-46(fp)
  8008c8:	108000b0 	cmpltui	r2,r2,2
  8008cc:	103fe31e 	bne	r2,zero,80085c <__alt_mem_epcs_flash_controller_0+0xff7f785c>
					//TODO add parsing of data size
					printf("%x ", cam_reply);
				}
			}
		}
		printf("\n");
  8008d0:	01000284 	movi	r4,10
  8008d4:	0802a140 	call	802a14 <putchar>

		for(z = 4; z < data_length; z++){
  8008d8:	00800104 	movi	r2,4
  8008dc:	e0bff48d 	sth	r2,-46(fp)
  8008e0:	00001e06 	br	80095c <camera_test+0x924>
			if(isGoodPacket){
  8008e4:	e0bff603 	ldbu	r2,-40(fp)
  8008e8:	10001826 	beq	r2,zero,80094c <camera_test+0x914>
				cam_reply = (uint8_t)OSQPend(camPackageQueue, MAX_TIME, &err);
  8008ec:	d0a07617 	ldw	r2,-32296(gp)
  8008f0:	e0fffd04 	addi	r3,fp,-12
  8008f4:	180d883a 	mov	r6,r3
  8008f8:	0143e804 	movi	r5,4000
  8008fc:	1009883a 	mov	r4,r2
  800900:	08136f40 	call	8136f4 <OSQPend>
  800904:	e0bffb05 	stb	r2,-20(fp)
				if(err == OS_TIMEOUT){
  800908:	e0bffd03 	ldbu	r2,-12(fp)
  80090c:	10803fcc 	andi	r2,r2,255
  800910:	10800298 	cmpnei	r2,r2,10
  800914:	1000081e 	bne	r2,zero,800938 <camera_test+0x900>
					printf("TIMEOUT AT DATA on byte %i\n", z);
  800918:	e0bff48b 	ldhu	r2,-46(fp)
  80091c:	100b883a 	mov	r5,r2
  800920:	010020b4 	movhi	r4,130
  800924:	212f2b04 	addi	r4,r4,-17236
  800928:	08029d00 	call	8029d0 <printf>
					isGoodPacket = FALSE;
  80092c:	e03ff605 	stb	zero,-40(fp)
					cam_reply = 0x00;
  800930:	e03ffb05 	stb	zero,-20(fp)
  800934:	00000606 	br	800950 <camera_test+0x918>
				}else{
					checksum = checksum + cam_reply;
  800938:	e0bffb03 	ldbu	r2,-20(fp)
  80093c:	e0fff717 	ldw	r3,-36(fp)
  800940:	1885883a 	add	r2,r3,r2
  800944:	e0bff715 	stw	r2,-36(fp)
  800948:	00000106 	br	800950 <camera_test+0x918>
				}
			}else{
				cam_reply = 0x00;
  80094c:	e03ffb05 	stb	zero,-20(fp)
				}
			}
		}
		printf("\n");

		for(z = 4; z < data_length; z++){
  800950:	e0bff48b 	ldhu	r2,-46(fp)
  800954:	10800044 	addi	r2,r2,1
  800958:	e0bff48d 	sth	r2,-46(fp)
  80095c:	e0fff48b 	ldhu	r3,-46(fp)
  800960:	e0bff90b 	ldhu	r2,-28(fp)
  800964:	18bfdf36 	bltu	r3,r2,8008e4 <__alt_mem_epcs_flash_controller_0+0xff7f78e4>
			}
			//putc(cam_reply, picture);
		}

		//Next two bytes are checksum
		for (z = 0; z < 2; z++){
  800968:	e03ff48d 	sth	zero,-46(fp)
  80096c:	00001d06 	br	8009e4 <camera_test+0x9ac>
			if(isGoodPacket){
  800970:	e0bff603 	ldbu	r2,-40(fp)
  800974:	10001826 	beq	r2,zero,8009d8 <camera_test+0x9a0>
				cam_reply = (uint8_t)OSQPend(camPackageQueue, MAX_TIME, &err);
  800978:	d0a07617 	ldw	r2,-32296(gp)
  80097c:	e0fffd04 	addi	r3,fp,-12
  800980:	180d883a 	mov	r6,r3
  800984:	0143e804 	movi	r5,4000
  800988:	1009883a 	mov	r4,r2
  80098c:	08136f40 	call	8136f4 <OSQPend>
  800990:	e0bffb05 	stb	r2,-20(fp)
				if(err == OS_TIMEOUT){
  800994:	e0bffd03 	ldbu	r2,-12(fp)
  800998:	10803fcc 	andi	r2,r2,255
  80099c:	10800298 	cmpnei	r2,r2,10
  8009a0:	1000051e 	bne	r2,zero,8009b8 <camera_test+0x980>
					printf("TIMEOUT AT CHECKSUM");
  8009a4:	010020b4 	movhi	r4,130
  8009a8:	212f3204 	addi	r4,r4,-17208
  8009ac:	08029d00 	call	8029d0 <printf>
					isGoodPacket = FALSE;
  8009b0:	e03ff605 	stb	zero,-40(fp)
  8009b4:	00000806 	br	8009d8 <camera_test+0x9a0>
				}else{
					tempsum = tempsum + (cam_reply << (8*z));
  8009b8:	e0fffb03 	ldbu	r3,-20(fp)
  8009bc:	e0bff48b 	ldhu	r2,-46(fp)
  8009c0:	100490fa 	slli	r2,r2,3
  8009c4:	1884983a 	sll	r2,r3,r2
  8009c8:	1007883a 	mov	r3,r2
  8009cc:	e0bff817 	ldw	r2,-32(fp)
  8009d0:	10c5883a 	add	r2,r2,r3
  8009d4:	e0bff815 	stw	r2,-32(fp)
			}
			//putc(cam_reply, picture);
		}

		//Next two bytes are checksum
		for (z = 0; z < 2; z++){
  8009d8:	e0bff48b 	ldhu	r2,-46(fp)
  8009dc:	10800044 	addi	r2,r2,1
  8009e0:	e0bff48d 	sth	r2,-46(fp)
  8009e4:	e0bff48b 	ldhu	r2,-46(fp)
  8009e8:	108000b0 	cmpltui	r2,r2,2
  8009ec:	103fe01e 	bne	r2,zero,800970 <__alt_mem_epcs_flash_controller_0+0xff7f7970>
					tempsum = tempsum + (cam_reply << (8*z));
				}
			}
		}

		if (checksum != tempsum){
  8009f0:	e0fff717 	ldw	r3,-36(fp)
  8009f4:	e0bff817 	ldw	r2,-32(fp)
  8009f8:	18800526 	beq	r3,r2,800a10 <camera_test+0x9d8>
			printf("Invalid checksum, got %x expected %x\n", checksum, tempsum);
  8009fc:	e1bff817 	ldw	r6,-32(fp)
  800a00:	e17ff717 	ldw	r5,-36(fp)
  800a04:	010020b4 	movhi	r4,130
  800a08:	212f3704 	addi	r4,r4,-17188
  800a0c:	08029d00 	call	8029d0 <printf>
			//isGoodPacket = FALSE;
		}

		if(isGoodPacket){
  800a10:	e0bff603 	ldbu	r2,-40(fp)
  800a14:	10000926 	beq	r2,zero,800a3c <camera_test+0xa04>
			printf("Packet %i good\n", q);
  800a18:	e0bff40b 	ldhu	r2,-48(fp)
  800a1c:	100b883a 	mov	r5,r2
  800a20:	010020b4 	movhi	r4,130
  800a24:	212f4104 	addi	r4,r4,-17148
  800a28:	08029d00 	call	8029d0 <printf>
			q++;
  800a2c:	e0bff40b 	ldhu	r2,-48(fp)
  800a30:	10800044 	addi	r2,r2,1
  800a34:	e0bff40d 	sth	r2,-48(fp)
  800a38:	00000906 	br	800a60 <camera_test+0xa28>
		}else{
			printf("Packet %i bad, moving on\n", q);
  800a3c:	e0bff40b 	ldhu	r2,-48(fp)
  800a40:	100b883a 	mov	r5,r2
  800a44:	010020b4 	movhi	r4,130
  800a48:	212f4504 	addi	r4,r4,-17132
  800a4c:	08029d00 	call	8029d0 <printf>
			//OSTimeDlyHMSM(0, 0, 1, 0);
			q++;
  800a50:	e0bff40b 	ldhu	r2,-48(fp)
  800a54:	10800044 	addi	r2,r2,1
  800a58:	e0bff40d 	sth	r2,-48(fp)
			synced = FALSE;
  800a5c:	e03ff9c5 	stb	zero,-25(fp)
	//Receive data, start with normal packets
	useData = TRUE;
	synced = TRUE;
	q = 0;
	printf("DATA STARTING\n");
	while(q < packet_count){
  800a60:	e0fff40b 	ldhu	r3,-48(fp)
  800a64:	e0bff50b 	ldhu	r2,-44(fp)
  800a68:	18bf1436 	bltu	r3,r2,8006bc <__alt_mem_epcs_flash_controller_0+0xff7f76bc>
			q++;
			synced = FALSE;
		}
	}

	if (synced){
  800a6c:	e0bff9c3 	ldbu	r2,-25(fp)
  800a70:	10000426 	beq	r2,zero,800a84 <camera_test+0xa4c>
		printf("Camera done perfect\n");
  800a74:	010020b4 	movhi	r4,130
  800a78:	212f4c04 	addi	r4,r4,-17104
  800a7c:	0802aec0 	call	802aec <puts>
  800a80:	00000306 	br	800a90 <camera_test+0xa58>
	}else{
		printf("Camera done with err\n");
  800a84:	010020b4 	movhi	r4,130
  800a88:	212f5104 	addi	r4,r4,-17084
  800a8c:	0802aec0 	call	802aec <puts>
	}

	for (z = 0; z < CAM_COMMAND_LENGTH; z++){
  800a90:	e03ff48d 	sth	zero,-46(fp)
  800a94:	00001106 	br	800adc <camera_test+0xaa4>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
  800a98:	0001883a 	nop
  800a9c:	00804074 	movhi	r2,257
  800aa0:	10a80204 	addi	r2,r2,-24568
  800aa4:	10800037 	ldwio	r2,0(r2)
  800aa8:	1080100c 	andi	r2,r2,64
  800aac:	103ffb26 	beq	r2,zero,800a9c <__alt_mem_epcs_flash_controller_0+0xff7f7a9c>
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_DEND[z]);
  800ab0:	e0fff48b 	ldhu	r3,-46(fp)
  800ab4:	d0a01384 	addi	r2,gp,-32690
  800ab8:	1885883a 	add	r2,r3,r2
  800abc:	10800003 	ldbu	r2,0(r2)
  800ac0:	10c03fcc 	andi	r3,r2,255
  800ac4:	00804074 	movhi	r2,257
  800ac8:	10a80104 	addi	r2,r2,-24572
  800acc:	10c00035 	stwio	r3,0(r2)
		printf("Camera done perfect\n");
	}else{
		printf("Camera done with err\n");
	}

	for (z = 0; z < CAM_COMMAND_LENGTH; z++){
  800ad0:	e0bff48b 	ldhu	r2,-46(fp)
  800ad4:	10800044 	addi	r2,r2,1
  800ad8:	e0bff48d 	sth	r2,-46(fp)
  800adc:	e0bff48b 	ldhu	r2,-46(fp)
  800ae0:	108001b0 	cmpltui	r2,r2,6
  800ae4:	103fec1e 	bne	r2,zero,800a98 <__alt_mem_epcs_flash_controller_0+0xff7f7a98>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, CAM_ACK_DEND[z]);
	}

	fclose(picture);
  800ae8:	e13ffc17 	ldw	r4,-16(fp)
  800aec:	08014440 	call	801444 <fclose>

	while (1){
		//wait for button push
		//OSSemPend(FREQ_SEM, 0, &err);

		OSTimeDlyHMSM(0, 0, 1, 0);
  800af0:	000f883a 	mov	r7,zero
  800af4:	01800044 	movi	r6,1
  800af8:	000b883a 	mov	r5,zero
  800afc:	0009883a 	mov	r4,zero
  800b00:	08164a40 	call	8164a4 <OSTimeDlyHMSM>
	}
  800b04:	003ffa06 	br	800af0 <__alt_mem_epcs_flash_controller_0+0xff7f7af0>

00800b08 <cam_send_command>:
}

bool cam_send_command(uint8_t* to_send, uint8_t* to_recieve, uint16_t size, OS_EVENT* used_queue){
  800b08:	defff904 	addi	sp,sp,-28
  800b0c:	dfc00615 	stw	ra,24(sp)
  800b10:	df000515 	stw	fp,20(sp)
  800b14:	df000504 	addi	fp,sp,20
  800b18:	e13ffc15 	stw	r4,-16(fp)
  800b1c:	e17ffd15 	stw	r5,-12(fp)
  800b20:	3005883a 	mov	r2,r6
  800b24:	e1ffff15 	stw	r7,-4(fp)
  800b28:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t z;
	uint8_t err;
	uint8_t cam_reply;

	//Flush queue so we know we have an empty one
	OSQFlush(used_queue);
  800b2c:	e13fff17 	ldw	r4,-4(fp)
  800b30:	081363c0 	call	81363c <OSQFlush>
	for (z = 0; z < size; z++){
  800b34:	e03ffb05 	stb	zero,-20(fp)
  800b38:	00001106 	br	800b80 <cam_send_command+0x78>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
  800b3c:	0001883a 	nop
  800b40:	00804074 	movhi	r2,257
  800b44:	10a80204 	addi	r2,r2,-24568
  800b48:	10800037 	ldwio	r2,0(r2)
  800b4c:	1080100c 	andi	r2,r2,64
  800b50:	103ffb26 	beq	r2,zero,800b40 <__alt_mem_epcs_flash_controller_0+0xff7f7b40>
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, to_send[z]);
  800b54:	e0bffb03 	ldbu	r2,-20(fp)
  800b58:	e0fffc17 	ldw	r3,-16(fp)
  800b5c:	1885883a 	add	r2,r3,r2
  800b60:	10800003 	ldbu	r2,0(r2)
  800b64:	10c03fcc 	andi	r3,r2,255
  800b68:	00804074 	movhi	r2,257
  800b6c:	10a80104 	addi	r2,r2,-24572
  800b70:	10c00035 	stwio	r3,0(r2)
	uint8_t err;
	uint8_t cam_reply;

	//Flush queue so we know we have an empty one
	OSQFlush(used_queue);
	for (z = 0; z < size; z++){
  800b74:	e0bffb03 	ldbu	r2,-20(fp)
  800b78:	10800044 	addi	r2,r2,1
  800b7c:	e0bffb05 	stb	r2,-20(fp)
  800b80:	e0bffb03 	ldbu	r2,-20(fp)
  800b84:	10ffffcc 	andi	r3,r2,65535
  800b88:	e0bffe0b 	ldhu	r2,-8(fp)
  800b8c:	18bfeb36 	bltu	r3,r2,800b3c <__alt_mem_epcs_flash_controller_0+0xff7f7b3c>
		while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_TRDY_MSK));
		IOWR_FIFOED_AVALON_UART_TXDATA(CAM_UART_BASE, to_send[z]);
	}

	cam_reply = (uint8_t)OSQPend(used_queue, 0, &err);
  800b90:	e0bffb84 	addi	r2,fp,-18
  800b94:	100d883a 	mov	r6,r2
  800b98:	000b883a 	mov	r5,zero
  800b9c:	e13fff17 	ldw	r4,-4(fp)
  800ba0:	08136f40 	call	8136f4 <OSQPend>
  800ba4:	e0bffb45 	stb	r2,-19(fp)
	if (cam_reply == to_recieve[0]){
  800ba8:	e0bffd17 	ldw	r2,-12(fp)
  800bac:	10800003 	ldbu	r2,0(r2)
  800bb0:	10c03fcc 	andi	r3,r2,255
  800bb4:	e0bffb43 	ldbu	r2,-19(fp)
  800bb8:	1880351e 	bne	r3,r2,800c90 <cam_send_command+0x188>
		printf("receiving %x", cam_reply);
  800bbc:	e0bffb43 	ldbu	r2,-19(fp)
  800bc0:	100b883a 	mov	r5,r2
  800bc4:	010020b4 	movhi	r4,130
  800bc8:	212eec04 	addi	r4,r4,-17488
  800bcc:	08029d00 	call	8029d0 <printf>
		for (z = 1; z < size; z++){
  800bd0:	00800044 	movi	r2,1
  800bd4:	e0bffb05 	stb	r2,-20(fp)
  800bd8:	00002506 	br	800c70 <cam_send_command+0x168>
			cam_reply = (uint8_t)OSQPend(used_queue, 0, &err);
  800bdc:	e0bffb84 	addi	r2,fp,-18
  800be0:	100d883a 	mov	r6,r2
  800be4:	000b883a 	mov	r5,zero
  800be8:	e13fff17 	ldw	r4,-4(fp)
  800bec:	08136f40 	call	8136f4 <OSQPend>
  800bf0:	e0bffb45 	stb	r2,-19(fp)
			if ((cam_reply != to_recieve[z]) && (z != CAM_ACK_IGNORE)){
  800bf4:	e0bffb03 	ldbu	r2,-20(fp)
  800bf8:	e0fffd17 	ldw	r3,-12(fp)
  800bfc:	1885883a 	add	r2,r3,r2
  800c00:	10800003 	ldbu	r2,0(r2)
  800c04:	10c03fcc 	andi	r3,r2,255
  800c08:	e0bffb43 	ldbu	r2,-19(fp)
  800c0c:	18801026 	beq	r3,r2,800c50 <cam_send_command+0x148>
  800c10:	e0bffb03 	ldbu	r2,-20(fp)
  800c14:	108000e0 	cmpeqi	r2,r2,3
  800c18:	10000d1e 	bne	r2,zero,800c50 <cam_send_command+0x148>
				printf("got %x expected %x\n", cam_reply, to_recieve[z]);
  800c1c:	e13ffb43 	ldbu	r4,-19(fp)
  800c20:	e0bffb03 	ldbu	r2,-20(fp)
  800c24:	e0fffd17 	ldw	r3,-12(fp)
  800c28:	1885883a 	add	r2,r3,r2
  800c2c:	10800003 	ldbu	r2,0(r2)
  800c30:	10803fcc 	andi	r2,r2,255
  800c34:	100d883a 	mov	r6,r2
  800c38:	200b883a 	mov	r5,r4
  800c3c:	010020b4 	movhi	r4,130
  800c40:	212ef004 	addi	r4,r4,-17472
  800c44:	08029d00 	call	8029d0 <printf>
				return FALSE;
  800c48:	0005883a 	mov	r2,zero
  800c4c:	00001a06 	br	800cb8 <cam_send_command+0x1b0>
			}else{
				printf(" %x", cam_reply);
  800c50:	e0bffb43 	ldbu	r2,-19(fp)
  800c54:	100b883a 	mov	r5,r2
  800c58:	010020b4 	movhi	r4,130
  800c5c:	212ec004 	addi	r4,r4,-17664
  800c60:	08029d00 	call	8029d0 <printf>
	}

	cam_reply = (uint8_t)OSQPend(used_queue, 0, &err);
	if (cam_reply == to_recieve[0]){
		printf("receiving %x", cam_reply);
		for (z = 1; z < size; z++){
  800c64:	e0bffb03 	ldbu	r2,-20(fp)
  800c68:	10800044 	addi	r2,r2,1
  800c6c:	e0bffb05 	stb	r2,-20(fp)
  800c70:	e0bffb03 	ldbu	r2,-20(fp)
  800c74:	10ffffcc 	andi	r3,r2,65535
  800c78:	e0bffe0b 	ldhu	r2,-8(fp)
  800c7c:	18bfd736 	bltu	r3,r2,800bdc <__alt_mem_epcs_flash_controller_0+0xff7f7bdc>
				return FALSE;
			}else{
				printf(" %x", cam_reply);
			}
		}
		printf("\n");
  800c80:	01000284 	movi	r4,10
  800c84:	0802a140 	call	802a14 <putchar>
	}else{
		printf("got %x expected %x\n", cam_reply, to_recieve[0]);
		return FALSE;
	}

	return TRUE;
  800c88:	00800044 	movi	r2,1
  800c8c:	00000a06 	br	800cb8 <cam_send_command+0x1b0>
				printf(" %x", cam_reply);
			}
		}
		printf("\n");
	}else{
		printf("got %x expected %x\n", cam_reply, to_recieve[0]);
  800c90:	e0fffb43 	ldbu	r3,-19(fp)
  800c94:	e0bffd17 	ldw	r2,-12(fp)
  800c98:	10800003 	ldbu	r2,0(r2)
  800c9c:	10803fcc 	andi	r2,r2,255
  800ca0:	100d883a 	mov	r6,r2
  800ca4:	180b883a 	mov	r5,r3
  800ca8:	010020b4 	movhi	r4,130
  800cac:	212ef004 	addi	r4,r4,-17472
  800cb0:	08029d00 	call	8029d0 <printf>
		return FALSE;
  800cb4:	0005883a 	mov	r2,zero
	}

	return TRUE;
}
  800cb8:	e037883a 	mov	sp,fp
  800cbc:	dfc00117 	ldw	ra,4(sp)
  800cc0:	df000017 	ldw	fp,0(sp)
  800cc4:	dec00204 	addi	sp,sp,8
  800cc8:	f800283a 	ret

00800ccc <cam_uart_interrupt>:

void cam_uart_interrupt(void * context){
  800ccc:	defffc04 	addi	sp,sp,-16
  800cd0:	dfc00315 	stw	ra,12(sp)
  800cd4:	df000215 	stw	fp,8(sp)
  800cd8:	df000204 	addi	fp,sp,8
  800cdc:	e13fff15 	stw	r4,-4(fp)
	uint8_t read = 0;
  800ce0:	e03ffe05 	stb	zero,-8(fp)

	while(!(IORD_FIFOED_AVALON_UART_STATUS(CAM_UART_BASE) & FIFOED_AVALON_UART_STATUS_RRDY_MSK));
  800ce4:	0001883a 	nop
  800ce8:	00804074 	movhi	r2,257
  800cec:	10a80204 	addi	r2,r2,-24568
  800cf0:	10800037 	ldwio	r2,0(r2)
  800cf4:	1080200c 	andi	r2,r2,128
  800cf8:	103ffb26 	beq	r2,zero,800ce8 <__alt_mem_epcs_flash_controller_0+0xff7f7ce8>
	read = IORD_FIFOED_AVALON_UART_RXDATA(CAM_UART_BASE);
  800cfc:	00804074 	movhi	r2,257
  800d00:	10a80004 	addi	r2,r2,-24576
  800d04:	10800037 	ldwio	r2,0(r2)
  800d08:	e0bffe05 	stb	r2,-8(fp)

	if (useData){
  800d0c:	d0a07303 	ldbu	r2,-32308(gp)
  800d10:	10803fcc 	andi	r2,r2,255
  800d14:	10000626 	beq	r2,zero,800d30 <cam_uart_interrupt+0x64>
		OSQPost(camPackageQueue, (void*) read);
  800d18:	d0a07617 	ldw	r2,-32296(gp)
  800d1c:	e0fffe03 	ldbu	r3,-8(fp)
  800d20:	180b883a 	mov	r5,r3
  800d24:	1009883a 	mov	r4,r2
  800d28:	0813aec0 	call	813aec <OSQPost>
	}else{
		OSQPost(camCommandQueue, (void*) read);
	}
}
  800d2c:	00000506 	br	800d44 <cam_uart_interrupt+0x78>
	read = IORD_FIFOED_AVALON_UART_RXDATA(CAM_UART_BASE);

	if (useData){
		OSQPost(camPackageQueue, (void*) read);
	}else{
		OSQPost(camCommandQueue, (void*) read);
  800d30:	d0a07517 	ldw	r2,-32300(gp)
  800d34:	e0fffe03 	ldbu	r3,-8(fp)
  800d38:	180b883a 	mov	r5,r3
  800d3c:	1009883a 	mov	r4,r2
  800d40:	0813aec0 	call	813aec <OSQPost>
	}
}
  800d44:	0001883a 	nop
  800d48:	e037883a 	mov	sp,fp
  800d4c:	dfc00117 	ldw	ra,4(sp)
  800d50:	df000017 	ldw	fp,0(sp)
  800d54:	dec00204 	addi	sp,sp,8
  800d58:	f800283a 	ret

00800d5c <button_interrupt>:

void button_interrupt(void * context){
  800d5c:	defffd04 	addi	sp,sp,-12
  800d60:	dfc00215 	stw	ra,8(sp)
  800d64:	df000115 	stw	fp,4(sp)
  800d68:	df000104 	addi	fp,sp,4
  800d6c:	e13fff15 	stw	r4,-4(fp)
	printf("button\n");
  800d70:	010020b4 	movhi	r4,130
  800d74:	212f5704 	addi	r4,r4,-17060
  800d78:	0802aec0 	call	802aec <puts>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 0);
  800d7c:	0007883a 	mov	r3,zero
  800d80:	00804074 	movhi	r2,257
  800d84:	10a82f04 	addi	r2,r2,-24388
  800d88:	10c00035 	stwio	r3,0(r2)

	//post semaphore for camera
	OSSemPost(BUTTON_SEM);
  800d8c:	d0a07717 	ldw	r2,-32292(gp)
  800d90:	1009883a 	mov	r4,r2
  800d94:	08149140 	call	814914 <OSSemPost>
}
  800d98:	0001883a 	nop
  800d9c:	e037883a 	mov	sp,fp
  800da0:	dfc00117 	ldw	ra,4(sp)
  800da4:	df000017 	ldw	fp,0(sp)
  800da8:	dec00204 	addi	sp,sp,8
  800dac:	f800283a 	ret

00800db0 <motor_test>:

/*
 * Drives FORWARD initially but when the INFRARED SENSOR
 * detects something and it will REVERSE the direction
 */
void motor_test(void* pdata){
  800db0:	defffd04 	addi	sp,sp,-12
  800db4:	dfc00215 	stw	ra,8(sp)
  800db8:	df000115 	stw	fp,4(sp)
  800dbc:	df000104 	addi	fp,sp,4
  800dc0:	e13fff15 	stw	r4,-4(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);

        */
		OSTimeDlyHMSM(0, 0, 1, 0);
  800dc4:	000f883a 	mov	r7,zero
  800dc8:	01800044 	movi	r6,1
  800dcc:	000b883a 	mov	r5,zero
  800dd0:	0009883a 	mov	r4,zero
  800dd4:	08164a40 	call	8164a4 <OSTimeDlyHMSM>
	}
  800dd8:	003ffa06 	br	800dc4 <__alt_mem_epcs_flash_controller_0+0xff7f7dc4>

00800ddc <sensor_interrupt>:
}

void sensor_interrupt(void * context){
  800ddc:	defffd04 	addi	sp,sp,-12
  800de0:	dfc00215 	stw	ra,8(sp)
  800de4:	df000115 	stw	fp,4(sp)
  800de8:	df000104 	addi	fp,sp,4
  800dec:	e13fff15 	stw	r4,-4(fp)
	printf("sensor\n");
  800df0:	010020b4 	movhi	r4,130
  800df4:	212f5904 	addi	r4,r4,-17052
  800df8:	0802aec0 	call	802aec <puts>

	//clear interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 0);
  800dfc:	0007883a 	mov	r3,zero
  800e00:	00804074 	movhi	r2,257
  800e04:	10a83f04 	addi	r2,r2,-24324
  800e08:	10c00035 	stwio	r3,0(r2)

	//post semaphore for camera
	OSSemPost(SENSOR_SEM);
  800e0c:	d0a07817 	ldw	r2,-32288(gp)
  800e10:	1009883a 	mov	r4,r2
  800e14:	08149140 	call	814914 <OSSemPost>
}
  800e18:	0001883a 	nop
  800e1c:	e037883a 	mov	sp,fp
  800e20:	dfc00117 	ldw	ra,4(sp)
  800e24:	df000017 	ldw	fp,0(sp)
  800e28:	dec00204 	addi	sp,sp,8
  800e2c:	f800283a 	ret

00800e30 <main>:
 */



/* The main function creates two task and starts multi-tasking */
int main(void){
  800e30:	defff904 	addi	sp,sp,-28
  800e34:	dfc00615 	stw	ra,24(sp)
  800e38:	df000515 	stw	fp,20(sp)
  800e3c:	df000504 	addi	fp,sp,20
//		printf("Motor task creation failure\n");
//	}

	//printf("START OF MOTOR\n");

	if(OSTaskCreateExt(camera_test,
  800e40:	d8000415 	stw	zero,16(sp)
  800e44:	d8000315 	stw	zero,12(sp)
  800e48:	00820004 	movi	r2,2048
  800e4c:	d8800215 	stw	r2,8(sp)
  800e50:	008020b4 	movhi	r2,130
  800e54:	108cb504 	addi	r2,r2,13012
  800e58:	d8800115 	stw	r2,4(sp)
  800e5c:	00800044 	movi	r2,1
  800e60:	d8800015 	stw	r2,0(sp)
  800e64:	01c00044 	movi	r7,1
  800e68:	018020b4 	movhi	r6,130
  800e6c:	3194b404 	addi	r6,r6,21200
  800e70:	000b883a 	mov	r5,zero
  800e74:	01002034 	movhi	r4,128
  800e78:	21000e04 	addi	r4,r4,56
  800e7c:	08152d00 	call	8152d0 <OSTaskCreateExt>
  800e80:	10803fcc 	andi	r2,r2,255
  800e84:	10000326 	beq	r2,zero,800e94 <main+0x64>
                  		camera_test_stk,
                  		TASK_STACKSIZE,
                  		NULL,
                  		0))
	{
		printf("Camera task creation failure\n");
  800e88:	010020b4 	movhi	r4,130
  800e8c:	212f6104 	addi	r4,r4,-17020
  800e90:	0802aec0 	call	802aec <puts>
	}

	printf("START OF CAM\n");
  800e94:	010020b4 	movhi	r4,130
  800e98:	212f6904 	addi	r4,r4,-16988
  800e9c:	0802aec0 	call	802aec <puts>
//                    	0))
//	{
//		printf("Wifi task creation failure\n");
//	}

	printf("START OF WIFI\n");
  800ea0:	010020b4 	movhi	r4,130
  800ea4:	212f6d04 	addi	r4,r4,-16972
  800ea8:	0802aec0 	call	802aec <puts>

	//Semaphore
	BUTTON_SEM = OSSemCreate(SEM_INIT_VALUE);
  800eac:	0009883a 	mov	r4,zero
  800eb0:	08142840 	call	814284 <OSSemCreate>
  800eb4:	d0a07715 	stw	r2,-32292(gp)
	SENSOR_SEM = OSSemCreate(SEM_INIT_VALUE);
  800eb8:	0009883a 	mov	r4,zero
  800ebc:	08142840 	call	814284 <OSSemCreate>
  800ec0:	d0a07815 	stw	r2,-32288(gp)

	//Interrupt masks
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BUTTON_BASE, 0xF);
  800ec4:	00c003c4 	movi	r3,15
  800ec8:	00804074 	movhi	r2,257
  800ecc:	10a82e04 	addi	r2,r2,-24392
  800ed0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BUTTON_BASE, 0x0);
  800ed4:	0007883a 	mov	r3,zero
  800ed8:	00804074 	movhi	r2,257
  800edc:	10a82f04 	addi	r2,r2,-24388
  800ee0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PROX_SENSOR_BASE, 0xF);
  800ee4:	00c003c4 	movi	r3,15
  800ee8:	00804074 	movhi	r2,257
  800eec:	10a83e04 	addi	r2,r2,-24328
  800ef0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PROX_SENSOR_BASE, 0x0);
  800ef4:	0007883a 	mov	r3,zero
  800ef8:	00804074 	movhi	r2,257
  800efc:	10a83f04 	addi	r2,r2,-24324
  800f00:	10c00035 	stwio	r3,0(r2)

	//Interrupt controller
	OSTimeDlyHMSM(0, 0, 2, 0);
  800f04:	000f883a 	mov	r7,zero
  800f08:	01800084 	movi	r6,2
  800f0c:	000b883a 	mov	r5,zero
  800f10:	0009883a 	mov	r4,zero
  800f14:	08164a40 	call	8164a4 <OSTimeDlyHMSM>
//					    	NULL))
//	{
//	  printf("proximity sensor interrupt failed\n");
//	}

	if(alt_ic_isr_register(CAM_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  800f18:	d8000015 	stw	zero,0(sp)
  800f1c:	000f883a 	mov	r7,zero
  800f20:	01802034 	movhi	r6,128
  800f24:	31833304 	addi	r6,r6,3276
  800f28:	014001c4 	movi	r5,7
  800f2c:	0009883a 	mov	r4,zero
  800f30:	080e49c0 	call	80e49c <alt_ic_isr_register>
  800f34:	10000326 	beq	r2,zero,800f44 <main+0x114>
				  	  	   CAM_UART_IRQ,
				  	  	   &cam_uart_interrupt,
				  	  	   NULL,
				  	  	   NULL))
	{
	  printf("cam interrupt failed\n");
  800f38:	010020b4 	movhi	r4,130
  800f3c:	212f7104 	addi	r4,r4,-16956
  800f40:	0802aec0 	call	802aec <puts>
	}
    
    if(alt_ic_isr_register(WIFI_UART_IRQ_INTERRUPT_CONTROLLER_ID,
  800f44:	d8000015 	stw	zero,0(sp)
  800f48:	000f883a 	mov	r7,zero
  800f4c:	01802034 	movhi	r6,128
  800f50:	31841304 	addi	r6,r6,4172
  800f54:	01400044 	movi	r5,1
  800f58:	0009883a 	mov	r4,zero
  800f5c:	080e49c0 	call	80e49c <alt_ic_isr_register>
  800f60:	10000326 	beq	r2,zero,800f70 <main+0x140>
				  	  	   WIFI_UART_IRQ,
				  	  	   &wifi_uart_interrupt,
				  	  	   NULL,
				  	  	   NULL))
	{
	  printf("wifi interrupt failed\n");
  800f64:	010020b4 	movhi	r4,130
  800f68:	212f7704 	addi	r4,r4,-16932
  800f6c:	0802aec0 	call	802aec <puts>
	}

	camCommandQueue = OSQCreate(camCommandBuffer, CAM_COMMAND_LENGTH*2);
  800f70:	01400304 	movi	r5,12
  800f74:	010020b4 	movhi	r4,130
  800f78:	213ca904 	addi	r4,r4,-3420
  800f7c:	08132100 	call	813210 <OSQCreate>
  800f80:	d0a07515 	stw	r2,-32300(gp)
	camPackageQueue = OSQCreate(camPackageBuffer, CAM_PACKAGE_LENGTH*2);
  800f84:	01410004 	movi	r5,1024
  800f88:	010020b4 	movhi	r4,130
  800f8c:	2138a904 	addi	r4,r4,-7516
  800f90:	08132100 	call	813210 <OSQCreate>
  800f94:	d0a07615 	stw	r2,-32296(gp)
    wifiPackageQueue = OSQCreate(wifiPackageBuffer, WIFI_PACKAGE_BUFFER_LENGTH);
  800f98:	01400044 	movi	r5,1
  800f9c:	d1207904 	addi	r4,gp,-32284
  800fa0:	08132100 	call	813210 <OSQCreate>
  800fa4:	d0a07a15 	stw	r2,-32280(gp)

	printf("END OF MAIN\n");
  800fa8:	010020b4 	movhi	r4,130
  800fac:	212f7d04 	addi	r4,r4,-16908
  800fb0:	0802aec0 	call	802aec <puts>

	OSStart();
  800fb4:	080fc2c0 	call	80fc2c <OSStart>

	return 0;
  800fb8:	0005883a 	mov	r2,zero
}
  800fbc:	e037883a 	mov	sp,fp
  800fc0:	dfc00117 	ldw	ra,4(sp)
  800fc4:	df000017 	ldw	fp,0(sp)
  800fc8:	dec00204 	addi	sp,sp,8
  800fcc:	f800283a 	ret

00800fd0 <wifi_test>:
 */

#include "wifi_test.h"
#include "motor_test.h"

void wifi_test(void* pdata){
  800fd0:	defffc04 	addi	sp,sp,-16
  800fd4:	dfc00315 	stw	ra,12(sp)
  800fd8:	df000215 	stw	fp,8(sp)
  800fdc:	df000204 	addi	fp,sp,8
  800fe0:	e13fff15 	stw	r4,-4(fp)
    uint8_t wifiReceive;

	while (1){
		  //do stuff
		// OSSemPend(BUTTON_SEM, 0, &err);
		printf("Hello from wifi\n");
  800fe4:	010020b4 	movhi	r4,130
  800fe8:	212f8004 	addi	r4,r4,-16896
  800fec:	0802aec0 	call	802aec <puts>
	    IOWR_ALTERA_AVALON_PIO_DATA(SPEAKER_BASE, 0x1);
  800ff0:	00c00044 	movi	r3,1
  800ff4:	00804074 	movhi	r2,257
  800ff8:	10a82404 	addi	r2,r2,-24432
  800ffc:	10c00035 	stwio	r3,0(r2)
	    printf("buzz buzz\n");
  801000:	010020b4 	movhi	r4,130
  801004:	212f8404 	addi	r4,r4,-16880
  801008:	0802aec0 	call	802aec <puts>

        wifiReceive = (uint8_t) OSQPend(wifiPackageQueue, 0, &err);
  80100c:	d0a07a17 	ldw	r2,-32280(gp)
  801010:	e0fffe44 	addi	r3,fp,-7
  801014:	180d883a 	mov	r6,r3
  801018:	000b883a 	mov	r5,zero
  80101c:	1009883a 	mov	r4,r2
  801020:	08136f40 	call	8136f4 <OSQPend>
  801024:	e0bffe05 	stb	r2,-8(fp)
        printf("Received form Wifi: %d \n", wifiReceive);
  801028:	e0bffe03 	ldbu	r2,-8(fp)
  80102c:	100b883a 	mov	r5,r2
  801030:	010020b4 	movhi	r4,130
  801034:	212f8704 	addi	r4,r4,-16868
  801038:	08029d00 	call	8029d0 <printf>
        motorCommand(wifiReceive);
  80103c:	e0bffe03 	ldbu	r2,-8(fp)
  801040:	1009883a 	mov	r4,r2
  801044:	08010b80 	call	8010b8 <motorCommand>
	}
  801048:	003fe606 	br	800fe4 <__alt_mem_epcs_flash_controller_0+0xff7f7fe4>

0080104c <wifi_uart_interrupt>:
	//OSTimeDlyHMSM(0, 0, 0, CAM_WAIT_MS);
}

void wifi_uart_interrupt(void * context){
  80104c:	defffc04 	addi	sp,sp,-16
  801050:	dfc00315 	stw	ra,12(sp)
  801054:	df000215 	stw	fp,8(sp)
  801058:	df000204 	addi	fp,sp,8
  80105c:	e13fff15 	stw	r4,-4(fp)
    uint8_t read = 0;
  801060:	e03ffe05 	stb	zero,-8(fp)
    while(!(IORD_ALTERA_AVALON_UART_STATUS(WIFI_UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
  801064:	0001883a 	nop
  801068:	00804074 	movhi	r2,257
  80106c:	10a81a04 	addi	r2,r2,-24472
  801070:	10800037 	ldwio	r2,0(r2)
  801074:	1080200c 	andi	r2,r2,128
  801078:	103ffb26 	beq	r2,zero,801068 <__alt_mem_epcs_flash_controller_0+0xff7f8068>
    read = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_UART_BASE);
  80107c:	00804074 	movhi	r2,257
  801080:	10a81804 	addi	r2,r2,-24480
  801084:	10800037 	ldwio	r2,0(r2)
  801088:	e0bffe05 	stb	r2,-8(fp)
    
    OSQPost(wifiPackageQueue, (void*) read);
  80108c:	d0a07a17 	ldw	r2,-32280(gp)
  801090:	e0fffe03 	ldbu	r3,-8(fp)
  801094:	180b883a 	mov	r5,r3
  801098:	1009883a 	mov	r4,r2
  80109c:	0813aec0 	call	813aec <OSQPost>
}
  8010a0:	0001883a 	nop
  8010a4:	e037883a 	mov	sp,fp
  8010a8:	dfc00117 	ldw	ra,4(sp)
  8010ac:	df000017 	ldw	fp,0(sp)
  8010b0:	dec00204 	addi	sp,sp,8
  8010b4:	f800283a 	ret

008010b8 <motorCommand>:

void motorCommand(uint8_t input) {
  8010b8:	defffd04 	addi	sp,sp,-12
  8010bc:	dfc00215 	stw	ra,8(sp)
  8010c0:	df000115 	stw	fp,4(sp)
  8010c4:	df000104 	addi	fp,sp,4
  8010c8:	2005883a 	mov	r2,r4
  8010cc:	e0bfff05 	stb	r2,-4(fp)

    IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
  8010d0:	00c001c4 	movi	r3,7
  8010d4:	00804074 	movhi	r2,257
  8010d8:	10a83404 	addi	r2,r2,-24368
  8010dc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);
  8010e0:	00c001c4 	movi	r3,7
  8010e4:	00804074 	movhi	r2,257
  8010e8:	10a83804 	addi	r2,r2,-24352
  8010ec:	10c00035 	stwio	r3,0(r2)
	OSTimeDlyHMSM(0, 0, 0, 100);
  8010f0:	01c01904 	movi	r7,100
  8010f4:	000d883a 	mov	r6,zero
  8010f8:	000b883a 	mov	r5,zero
  8010fc:	0009883a 	mov	r4,zero
  801100:	08164a40 	call	8164a4 <OSTimeDlyHMSM>

    if (input == WIFI_MOTOR_CW) {
  801104:	e0bfff03 	ldbu	r2,-4(fp)
  801108:	10800c58 	cmpnei	r2,r2,49
  80110c:	1000081e 	bne	r2,zero,801130 <motorCommand+0x78>
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_FORWARD);
  801110:	00c000c4 	movi	r3,3
  801114:	00804074 	movhi	r2,257
  801118:	10a83404 	addi	r2,r2,-24368
  80111c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_FORWARD);
  801120:	00c000c4 	movi	r3,3
  801124:	00804074 	movhi	r2,257
  801128:	10a83804 	addi	r2,r2,-24352
  80112c:	10c00035 	stwio	r3,0(r2)
    }
    if (input == WIFI_MOTOR_CCW) {
  801130:	e0bfff03 	ldbu	r2,-4(fp)
  801134:	10800c98 	cmpnei	r2,r2,50
  801138:	1000081e 	bne	r2,zero,80115c <motorCommand+0xa4>
        IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_REVERSE);
  80113c:	00c00144 	movi	r3,5
  801140:	00804074 	movhi	r2,257
  801144:	10a83404 	addi	r2,r2,-24368
  801148:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_REVERSE);
  80114c:	00c00144 	movi	r3,5
  801150:	00804074 	movhi	r2,257
  801154:	10a83804 	addi	r2,r2,-24352
  801158:	10c00035 	stwio	r3,0(r2)
    }
    if (input == WIFI_MOTOR_STOP) {
  80115c:	e0bfff03 	ldbu	r2,-4(fp)
  801160:	10800cd8 	cmpnei	r2,r2,51
  801164:	1000081e 	bne	r2,zero,801188 <motorCommand+0xd0>
        IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_L_BASE, MOTOR_SHORTSTOP);
  801168:	00c001c4 	movi	r3,7
  80116c:	00804074 	movhi	r2,257
  801170:	10a83404 	addi	r2,r2,-24368
  801174:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_R_BASE, MOTOR_SHORTSTOP);
  801178:	00c001c4 	movi	r3,7
  80117c:	00804074 	movhi	r2,257
  801180:	10a83804 	addi	r2,r2,-24352
  801184:	10c00035 	stwio	r3,0(r2)
    }
}
  801188:	0001883a 	nop
  80118c:	e037883a 	mov	sp,fp
  801190:	dfc00117 	ldw	ra,4(sp)
  801194:	df000017 	ldw	fp,0(sp)
  801198:	dec00204 	addi	sp,sp,8
  80119c:	f800283a 	ret

008011a0 <__divsi3>:
  8011a0:	20001b16 	blt	r4,zero,801210 <__divsi3+0x70>
  8011a4:	000f883a 	mov	r7,zero
  8011a8:	28001616 	blt	r5,zero,801204 <__divsi3+0x64>
  8011ac:	200d883a 	mov	r6,r4
  8011b0:	29001a2e 	bgeu	r5,r4,80121c <__divsi3+0x7c>
  8011b4:	00800804 	movi	r2,32
  8011b8:	00c00044 	movi	r3,1
  8011bc:	00000106 	br	8011c4 <__divsi3+0x24>
  8011c0:	10000d26 	beq	r2,zero,8011f8 <__divsi3+0x58>
  8011c4:	294b883a 	add	r5,r5,r5
  8011c8:	10bfffc4 	addi	r2,r2,-1
  8011cc:	18c7883a 	add	r3,r3,r3
  8011d0:	293ffb36 	bltu	r5,r4,8011c0 <__alt_mem_epcs_flash_controller_0+0xff7f81c0>
  8011d4:	0005883a 	mov	r2,zero
  8011d8:	18000726 	beq	r3,zero,8011f8 <__divsi3+0x58>
  8011dc:	0005883a 	mov	r2,zero
  8011e0:	31400236 	bltu	r6,r5,8011ec <__divsi3+0x4c>
  8011e4:	314dc83a 	sub	r6,r6,r5
  8011e8:	10c4b03a 	or	r2,r2,r3
  8011ec:	1806d07a 	srli	r3,r3,1
  8011f0:	280ad07a 	srli	r5,r5,1
  8011f4:	183ffa1e 	bne	r3,zero,8011e0 <__alt_mem_epcs_flash_controller_0+0xff7f81e0>
  8011f8:	38000126 	beq	r7,zero,801200 <__divsi3+0x60>
  8011fc:	0085c83a 	sub	r2,zero,r2
  801200:	f800283a 	ret
  801204:	014bc83a 	sub	r5,zero,r5
  801208:	39c0005c 	xori	r7,r7,1
  80120c:	003fe706 	br	8011ac <__alt_mem_epcs_flash_controller_0+0xff7f81ac>
  801210:	0109c83a 	sub	r4,zero,r4
  801214:	01c00044 	movi	r7,1
  801218:	003fe306 	br	8011a8 <__alt_mem_epcs_flash_controller_0+0xff7f81a8>
  80121c:	00c00044 	movi	r3,1
  801220:	003fee06 	br	8011dc <__alt_mem_epcs_flash_controller_0+0xff7f81dc>

00801224 <__modsi3>:
  801224:	20001716 	blt	r4,zero,801284 <__modsi3+0x60>
  801228:	000f883a 	mov	r7,zero
  80122c:	2005883a 	mov	r2,r4
  801230:	28001216 	blt	r5,zero,80127c <__modsi3+0x58>
  801234:	2900162e 	bgeu	r5,r4,801290 <__modsi3+0x6c>
  801238:	01800804 	movi	r6,32
  80123c:	00c00044 	movi	r3,1
  801240:	00000106 	br	801248 <__modsi3+0x24>
  801244:	30000a26 	beq	r6,zero,801270 <__modsi3+0x4c>
  801248:	294b883a 	add	r5,r5,r5
  80124c:	31bfffc4 	addi	r6,r6,-1
  801250:	18c7883a 	add	r3,r3,r3
  801254:	293ffb36 	bltu	r5,r4,801244 <__alt_mem_epcs_flash_controller_0+0xff7f8244>
  801258:	18000526 	beq	r3,zero,801270 <__modsi3+0x4c>
  80125c:	1806d07a 	srli	r3,r3,1
  801260:	11400136 	bltu	r2,r5,801268 <__modsi3+0x44>
  801264:	1145c83a 	sub	r2,r2,r5
  801268:	280ad07a 	srli	r5,r5,1
  80126c:	183ffb1e 	bne	r3,zero,80125c <__alt_mem_epcs_flash_controller_0+0xff7f825c>
  801270:	38000126 	beq	r7,zero,801278 <__modsi3+0x54>
  801274:	0085c83a 	sub	r2,zero,r2
  801278:	f800283a 	ret
  80127c:	014bc83a 	sub	r5,zero,r5
  801280:	003fec06 	br	801234 <__alt_mem_epcs_flash_controller_0+0xff7f8234>
  801284:	0109c83a 	sub	r4,zero,r4
  801288:	01c00044 	movi	r7,1
  80128c:	003fe706 	br	80122c <__alt_mem_epcs_flash_controller_0+0xff7f822c>
  801290:	00c00044 	movi	r3,1
  801294:	003ff106 	br	80125c <__alt_mem_epcs_flash_controller_0+0xff7f825c>

00801298 <__udivsi3>:
  801298:	200d883a 	mov	r6,r4
  80129c:	2900152e 	bgeu	r5,r4,8012f4 <__udivsi3+0x5c>
  8012a0:	28001416 	blt	r5,zero,8012f4 <__udivsi3+0x5c>
  8012a4:	00800804 	movi	r2,32
  8012a8:	00c00044 	movi	r3,1
  8012ac:	00000206 	br	8012b8 <__udivsi3+0x20>
  8012b0:	10000e26 	beq	r2,zero,8012ec <__udivsi3+0x54>
  8012b4:	28000516 	blt	r5,zero,8012cc <__udivsi3+0x34>
  8012b8:	294b883a 	add	r5,r5,r5
  8012bc:	10bfffc4 	addi	r2,r2,-1
  8012c0:	18c7883a 	add	r3,r3,r3
  8012c4:	293ffa36 	bltu	r5,r4,8012b0 <__alt_mem_epcs_flash_controller_0+0xff7f82b0>
  8012c8:	18000826 	beq	r3,zero,8012ec <__udivsi3+0x54>
  8012cc:	0005883a 	mov	r2,zero
  8012d0:	31400236 	bltu	r6,r5,8012dc <__udivsi3+0x44>
  8012d4:	314dc83a 	sub	r6,r6,r5
  8012d8:	10c4b03a 	or	r2,r2,r3
  8012dc:	1806d07a 	srli	r3,r3,1
  8012e0:	280ad07a 	srli	r5,r5,1
  8012e4:	183ffa1e 	bne	r3,zero,8012d0 <__alt_mem_epcs_flash_controller_0+0xff7f82d0>
  8012e8:	f800283a 	ret
  8012ec:	0005883a 	mov	r2,zero
  8012f0:	f800283a 	ret
  8012f4:	00c00044 	movi	r3,1
  8012f8:	003ff406 	br	8012cc <__alt_mem_epcs_flash_controller_0+0xff7f82cc>

008012fc <__umodsi3>:
  8012fc:	2005883a 	mov	r2,r4
  801300:	2900122e 	bgeu	r5,r4,80134c <__umodsi3+0x50>
  801304:	28001116 	blt	r5,zero,80134c <__umodsi3+0x50>
  801308:	01800804 	movi	r6,32
  80130c:	00c00044 	movi	r3,1
  801310:	00000206 	br	80131c <__umodsi3+0x20>
  801314:	30000c26 	beq	r6,zero,801348 <__umodsi3+0x4c>
  801318:	28000516 	blt	r5,zero,801330 <__umodsi3+0x34>
  80131c:	294b883a 	add	r5,r5,r5
  801320:	31bfffc4 	addi	r6,r6,-1
  801324:	18c7883a 	add	r3,r3,r3
  801328:	293ffa36 	bltu	r5,r4,801314 <__alt_mem_epcs_flash_controller_0+0xff7f8314>
  80132c:	18000626 	beq	r3,zero,801348 <__umodsi3+0x4c>
  801330:	1806d07a 	srli	r3,r3,1
  801334:	11400136 	bltu	r2,r5,80133c <__umodsi3+0x40>
  801338:	1145c83a 	sub	r2,r2,r5
  80133c:	280ad07a 	srli	r5,r5,1
  801340:	183ffb1e 	bne	r3,zero,801330 <__alt_mem_epcs_flash_controller_0+0xff7f8330>
  801344:	f800283a 	ret
  801348:	f800283a 	ret
  80134c:	00c00044 	movi	r3,1
  801350:	003ff706 	br	801330 <__alt_mem_epcs_flash_controller_0+0xff7f8330>

00801354 <_fclose_r>:
  801354:	28003926 	beq	r5,zero,80143c <_fclose_r+0xe8>
  801358:	defffc04 	addi	sp,sp,-16
  80135c:	dc400115 	stw	r17,4(sp)
  801360:	dc000015 	stw	r16,0(sp)
  801364:	dfc00315 	stw	ra,12(sp)
  801368:	dc800215 	stw	r18,8(sp)
  80136c:	2023883a 	mov	r17,r4
  801370:	2821883a 	mov	r16,r5
  801374:	20000226 	beq	r4,zero,801380 <_fclose_r+0x2c>
  801378:	20800e17 	ldw	r2,56(r4)
  80137c:	10002726 	beq	r2,zero,80141c <_fclose_r+0xc8>
  801380:	8080030f 	ldh	r2,12(r16)
  801384:	1000071e 	bne	r2,zero,8013a4 <_fclose_r+0x50>
  801388:	0005883a 	mov	r2,zero
  80138c:	dfc00317 	ldw	ra,12(sp)
  801390:	dc800217 	ldw	r18,8(sp)
  801394:	dc400117 	ldw	r17,4(sp)
  801398:	dc000017 	ldw	r16,0(sp)
  80139c:	dec00404 	addi	sp,sp,16
  8013a0:	f800283a 	ret
  8013a4:	800b883a 	mov	r5,r16
  8013a8:	8809883a 	mov	r4,r17
  8013ac:	08014580 	call	801458 <__sflush_r>
  8013b0:	1025883a 	mov	r18,r2
  8013b4:	80800b17 	ldw	r2,44(r16)
  8013b8:	10000426 	beq	r2,zero,8013cc <_fclose_r+0x78>
  8013bc:	81400717 	ldw	r5,28(r16)
  8013c0:	8809883a 	mov	r4,r17
  8013c4:	103ee83a 	callr	r2
  8013c8:	10001616 	blt	r2,zero,801424 <_fclose_r+0xd0>
  8013cc:	8080030b 	ldhu	r2,12(r16)
  8013d0:	1080200c 	andi	r2,r2,128
  8013d4:	1000151e 	bne	r2,zero,80142c <_fclose_r+0xd8>
  8013d8:	81400c17 	ldw	r5,48(r16)
  8013dc:	28000526 	beq	r5,zero,8013f4 <_fclose_r+0xa0>
  8013e0:	80801004 	addi	r2,r16,64
  8013e4:	28800226 	beq	r5,r2,8013f0 <_fclose_r+0x9c>
  8013e8:	8809883a 	mov	r4,r17
  8013ec:	0801bd40 	call	801bd4 <_free_r>
  8013f0:	80000c15 	stw	zero,48(r16)
  8013f4:	81401117 	ldw	r5,68(r16)
  8013f8:	28000326 	beq	r5,zero,801408 <_fclose_r+0xb4>
  8013fc:	8809883a 	mov	r4,r17
  801400:	0801bd40 	call	801bd4 <_free_r>
  801404:	80001115 	stw	zero,68(r16)
  801408:	0801a700 	call	801a70 <__sfp_lock_acquire>
  80140c:	8000030d 	sth	zero,12(r16)
  801410:	0801a740 	call	801a74 <__sfp_lock_release>
  801414:	9005883a 	mov	r2,r18
  801418:	003fdc06 	br	80138c <__alt_mem_epcs_flash_controller_0+0xff7f838c>
  80141c:	0801a600 	call	801a60 <__sinit>
  801420:	003fd706 	br	801380 <__alt_mem_epcs_flash_controller_0+0xff7f8380>
  801424:	04bfffc4 	movi	r18,-1
  801428:	003fe806 	br	8013cc <__alt_mem_epcs_flash_controller_0+0xff7f83cc>
  80142c:	81400417 	ldw	r5,16(r16)
  801430:	8809883a 	mov	r4,r17
  801434:	0801bd40 	call	801bd4 <_free_r>
  801438:	003fe706 	br	8013d8 <__alt_mem_epcs_flash_controller_0+0xff7f83d8>
  80143c:	0005883a 	mov	r2,zero
  801440:	f800283a 	ret

00801444 <fclose>:
  801444:	008020b4 	movhi	r2,130
  801448:	10b82e04 	addi	r2,r2,-8008
  80144c:	200b883a 	mov	r5,r4
  801450:	11000017 	ldw	r4,0(r2)
  801454:	08013541 	jmpi	801354 <_fclose_r>

00801458 <__sflush_r>:
  801458:	2880030b 	ldhu	r2,12(r5)
  80145c:	defffb04 	addi	sp,sp,-20
  801460:	dcc00315 	stw	r19,12(sp)
  801464:	dc400115 	stw	r17,4(sp)
  801468:	dfc00415 	stw	ra,16(sp)
  80146c:	dc800215 	stw	r18,8(sp)
  801470:	dc000015 	stw	r16,0(sp)
  801474:	10c0020c 	andi	r3,r2,8
  801478:	2823883a 	mov	r17,r5
  80147c:	2027883a 	mov	r19,r4
  801480:	1800311e 	bne	r3,zero,801548 <__sflush_r+0xf0>
  801484:	28c00117 	ldw	r3,4(r5)
  801488:	10820014 	ori	r2,r2,2048
  80148c:	2880030d 	sth	r2,12(r5)
  801490:	00c04b0e 	bge	zero,r3,8015c0 <__sflush_r+0x168>
  801494:	8a000a17 	ldw	r8,40(r17)
  801498:	40002326 	beq	r8,zero,801528 <__sflush_r+0xd0>
  80149c:	9c000017 	ldw	r16,0(r19)
  8014a0:	10c4000c 	andi	r3,r2,4096
  8014a4:	98000015 	stw	zero,0(r19)
  8014a8:	18004826 	beq	r3,zero,8015cc <__sflush_r+0x174>
  8014ac:	89801417 	ldw	r6,80(r17)
  8014b0:	10c0010c 	andi	r3,r2,4
  8014b4:	18000626 	beq	r3,zero,8014d0 <__sflush_r+0x78>
  8014b8:	88c00117 	ldw	r3,4(r17)
  8014bc:	88800c17 	ldw	r2,48(r17)
  8014c0:	30cdc83a 	sub	r6,r6,r3
  8014c4:	10000226 	beq	r2,zero,8014d0 <__sflush_r+0x78>
  8014c8:	88800f17 	ldw	r2,60(r17)
  8014cc:	308dc83a 	sub	r6,r6,r2
  8014d0:	89400717 	ldw	r5,28(r17)
  8014d4:	000f883a 	mov	r7,zero
  8014d8:	9809883a 	mov	r4,r19
  8014dc:	403ee83a 	callr	r8
  8014e0:	00ffffc4 	movi	r3,-1
  8014e4:	10c04426 	beq	r2,r3,8015f8 <__sflush_r+0x1a0>
  8014e8:	88c0030b 	ldhu	r3,12(r17)
  8014ec:	89000417 	ldw	r4,16(r17)
  8014f0:	88000115 	stw	zero,4(r17)
  8014f4:	197dffcc 	andi	r5,r3,63487
  8014f8:	8940030d 	sth	r5,12(r17)
  8014fc:	89000015 	stw	r4,0(r17)
  801500:	18c4000c 	andi	r3,r3,4096
  801504:	18002c1e 	bne	r3,zero,8015b8 <__sflush_r+0x160>
  801508:	89400c17 	ldw	r5,48(r17)
  80150c:	9c000015 	stw	r16,0(r19)
  801510:	28000526 	beq	r5,zero,801528 <__sflush_r+0xd0>
  801514:	88801004 	addi	r2,r17,64
  801518:	28800226 	beq	r5,r2,801524 <__sflush_r+0xcc>
  80151c:	9809883a 	mov	r4,r19
  801520:	0801bd40 	call	801bd4 <_free_r>
  801524:	88000c15 	stw	zero,48(r17)
  801528:	0005883a 	mov	r2,zero
  80152c:	dfc00417 	ldw	ra,16(sp)
  801530:	dcc00317 	ldw	r19,12(sp)
  801534:	dc800217 	ldw	r18,8(sp)
  801538:	dc400117 	ldw	r17,4(sp)
  80153c:	dc000017 	ldw	r16,0(sp)
  801540:	dec00504 	addi	sp,sp,20
  801544:	f800283a 	ret
  801548:	2c800417 	ldw	r18,16(r5)
  80154c:	903ff626 	beq	r18,zero,801528 <__alt_mem_epcs_flash_controller_0+0xff7f8528>
  801550:	2c000017 	ldw	r16,0(r5)
  801554:	108000cc 	andi	r2,r2,3
  801558:	2c800015 	stw	r18,0(r5)
  80155c:	84a1c83a 	sub	r16,r16,r18
  801560:	1000131e 	bne	r2,zero,8015b0 <__sflush_r+0x158>
  801564:	28800517 	ldw	r2,20(r5)
  801568:	88800215 	stw	r2,8(r17)
  80156c:	04000316 	blt	zero,r16,80157c <__sflush_r+0x124>
  801570:	003fed06 	br	801528 <__alt_mem_epcs_flash_controller_0+0xff7f8528>
  801574:	90a5883a 	add	r18,r18,r2
  801578:	043feb0e 	bge	zero,r16,801528 <__alt_mem_epcs_flash_controller_0+0xff7f8528>
  80157c:	88800917 	ldw	r2,36(r17)
  801580:	89400717 	ldw	r5,28(r17)
  801584:	800f883a 	mov	r7,r16
  801588:	900d883a 	mov	r6,r18
  80158c:	9809883a 	mov	r4,r19
  801590:	103ee83a 	callr	r2
  801594:	80a1c83a 	sub	r16,r16,r2
  801598:	00bff616 	blt	zero,r2,801574 <__alt_mem_epcs_flash_controller_0+0xff7f8574>
  80159c:	88c0030b 	ldhu	r3,12(r17)
  8015a0:	00bfffc4 	movi	r2,-1
  8015a4:	18c01014 	ori	r3,r3,64
  8015a8:	88c0030d 	sth	r3,12(r17)
  8015ac:	003fdf06 	br	80152c <__alt_mem_epcs_flash_controller_0+0xff7f852c>
  8015b0:	0005883a 	mov	r2,zero
  8015b4:	003fec06 	br	801568 <__alt_mem_epcs_flash_controller_0+0xff7f8568>
  8015b8:	88801415 	stw	r2,80(r17)
  8015bc:	003fd206 	br	801508 <__alt_mem_epcs_flash_controller_0+0xff7f8508>
  8015c0:	28c00f17 	ldw	r3,60(r5)
  8015c4:	00ffb316 	blt	zero,r3,801494 <__alt_mem_epcs_flash_controller_0+0xff7f8494>
  8015c8:	003fd706 	br	801528 <__alt_mem_epcs_flash_controller_0+0xff7f8528>
  8015cc:	89400717 	ldw	r5,28(r17)
  8015d0:	000d883a 	mov	r6,zero
  8015d4:	01c00044 	movi	r7,1
  8015d8:	9809883a 	mov	r4,r19
  8015dc:	403ee83a 	callr	r8
  8015e0:	100d883a 	mov	r6,r2
  8015e4:	00bfffc4 	movi	r2,-1
  8015e8:	30801426 	beq	r6,r2,80163c <__sflush_r+0x1e4>
  8015ec:	8880030b 	ldhu	r2,12(r17)
  8015f0:	8a000a17 	ldw	r8,40(r17)
  8015f4:	003fae06 	br	8014b0 <__alt_mem_epcs_flash_controller_0+0xff7f84b0>
  8015f8:	98c00017 	ldw	r3,0(r19)
  8015fc:	183fba26 	beq	r3,zero,8014e8 <__alt_mem_epcs_flash_controller_0+0xff7f84e8>
  801600:	01000744 	movi	r4,29
  801604:	19000626 	beq	r3,r4,801620 <__sflush_r+0x1c8>
  801608:	01000584 	movi	r4,22
  80160c:	19000426 	beq	r3,r4,801620 <__sflush_r+0x1c8>
  801610:	88c0030b 	ldhu	r3,12(r17)
  801614:	18c01014 	ori	r3,r3,64
  801618:	88c0030d 	sth	r3,12(r17)
  80161c:	003fc306 	br	80152c <__alt_mem_epcs_flash_controller_0+0xff7f852c>
  801620:	8880030b 	ldhu	r2,12(r17)
  801624:	88c00417 	ldw	r3,16(r17)
  801628:	88000115 	stw	zero,4(r17)
  80162c:	10bdffcc 	andi	r2,r2,63487
  801630:	8880030d 	sth	r2,12(r17)
  801634:	88c00015 	stw	r3,0(r17)
  801638:	003fb306 	br	801508 <__alt_mem_epcs_flash_controller_0+0xff7f8508>
  80163c:	98800017 	ldw	r2,0(r19)
  801640:	103fea26 	beq	r2,zero,8015ec <__alt_mem_epcs_flash_controller_0+0xff7f85ec>
  801644:	00c00744 	movi	r3,29
  801648:	10c00226 	beq	r2,r3,801654 <__sflush_r+0x1fc>
  80164c:	00c00584 	movi	r3,22
  801650:	10c0031e 	bne	r2,r3,801660 <__sflush_r+0x208>
  801654:	9c000015 	stw	r16,0(r19)
  801658:	0005883a 	mov	r2,zero
  80165c:	003fb306 	br	80152c <__alt_mem_epcs_flash_controller_0+0xff7f852c>
  801660:	88c0030b 	ldhu	r3,12(r17)
  801664:	3005883a 	mov	r2,r6
  801668:	18c01014 	ori	r3,r3,64
  80166c:	88c0030d 	sth	r3,12(r17)
  801670:	003fae06 	br	80152c <__alt_mem_epcs_flash_controller_0+0xff7f852c>

00801674 <_fflush_r>:
  801674:	defffd04 	addi	sp,sp,-12
  801678:	dc000115 	stw	r16,4(sp)
  80167c:	dfc00215 	stw	ra,8(sp)
  801680:	2021883a 	mov	r16,r4
  801684:	20000226 	beq	r4,zero,801690 <_fflush_r+0x1c>
  801688:	20800e17 	ldw	r2,56(r4)
  80168c:	10000c26 	beq	r2,zero,8016c0 <_fflush_r+0x4c>
  801690:	2880030f 	ldh	r2,12(r5)
  801694:	1000051e 	bne	r2,zero,8016ac <_fflush_r+0x38>
  801698:	0005883a 	mov	r2,zero
  80169c:	dfc00217 	ldw	ra,8(sp)
  8016a0:	dc000117 	ldw	r16,4(sp)
  8016a4:	dec00304 	addi	sp,sp,12
  8016a8:	f800283a 	ret
  8016ac:	8009883a 	mov	r4,r16
  8016b0:	dfc00217 	ldw	ra,8(sp)
  8016b4:	dc000117 	ldw	r16,4(sp)
  8016b8:	dec00304 	addi	sp,sp,12
  8016bc:	08014581 	jmpi	801458 <__sflush_r>
  8016c0:	d9400015 	stw	r5,0(sp)
  8016c4:	0801a600 	call	801a60 <__sinit>
  8016c8:	d9400017 	ldw	r5,0(sp)
  8016cc:	003ff006 	br	801690 <__alt_mem_epcs_flash_controller_0+0xff7f8690>

008016d0 <fflush>:
  8016d0:	20000526 	beq	r4,zero,8016e8 <fflush+0x18>
  8016d4:	008020b4 	movhi	r2,130
  8016d8:	10b82e04 	addi	r2,r2,-8008
  8016dc:	200b883a 	mov	r5,r4
  8016e0:	11000017 	ldw	r4,0(r2)
  8016e4:	08016741 	jmpi	801674 <_fflush_r>
  8016e8:	008020b4 	movhi	r2,130
  8016ec:	10b82d04 	addi	r2,r2,-8012
  8016f0:	11000017 	ldw	r4,0(r2)
  8016f4:	01402034 	movhi	r5,128
  8016f8:	29459d04 	addi	r5,r5,5748
  8016fc:	0801fa81 	jmpi	801fa8 <_fwalk_reent>

00801700 <__fp_unlock>:
  801700:	0005883a 	mov	r2,zero
  801704:	f800283a 	ret

00801708 <_cleanup_r>:
  801708:	01402034 	movhi	r5,128
  80170c:	2944d504 	addi	r5,r5,4948
  801710:	0801fa81 	jmpi	801fa8 <_fwalk_reent>

00801714 <__sinit.part.1>:
  801714:	defff704 	addi	sp,sp,-36
  801718:	00c02034 	movhi	r3,128
  80171c:	dfc00815 	stw	ra,32(sp)
  801720:	ddc00715 	stw	r23,28(sp)
  801724:	dd800615 	stw	r22,24(sp)
  801728:	dd400515 	stw	r21,20(sp)
  80172c:	dd000415 	stw	r20,16(sp)
  801730:	dcc00315 	stw	r19,12(sp)
  801734:	dc800215 	stw	r18,8(sp)
  801738:	dc400115 	stw	r17,4(sp)
  80173c:	dc000015 	stw	r16,0(sp)
  801740:	18c5c204 	addi	r3,r3,5896
  801744:	24000117 	ldw	r16,4(r4)
  801748:	20c00f15 	stw	r3,60(r4)
  80174c:	2080bb04 	addi	r2,r4,748
  801750:	00c000c4 	movi	r3,3
  801754:	20c0b915 	stw	r3,740(r4)
  801758:	2080ba15 	stw	r2,744(r4)
  80175c:	2000b815 	stw	zero,736(r4)
  801760:	05c00204 	movi	r23,8
  801764:	00800104 	movi	r2,4
  801768:	2025883a 	mov	r18,r4
  80176c:	b80d883a 	mov	r6,r23
  801770:	81001704 	addi	r4,r16,92
  801774:	000b883a 	mov	r5,zero
  801778:	80000015 	stw	zero,0(r16)
  80177c:	80000115 	stw	zero,4(r16)
  801780:	80000215 	stw	zero,8(r16)
  801784:	8080030d 	sth	r2,12(r16)
  801788:	80001915 	stw	zero,100(r16)
  80178c:	8000038d 	sth	zero,14(r16)
  801790:	80000415 	stw	zero,16(r16)
  801794:	80000515 	stw	zero,20(r16)
  801798:	80000615 	stw	zero,24(r16)
  80179c:	08028780 	call	802878 <memset>
  8017a0:	05802034 	movhi	r22,128
  8017a4:	94400217 	ldw	r17,8(r18)
  8017a8:	05402034 	movhi	r21,128
  8017ac:	05002034 	movhi	r20,128
  8017b0:	04c02034 	movhi	r19,128
  8017b4:	b58ad504 	addi	r22,r22,11092
  8017b8:	ad4aec04 	addi	r21,r21,11184
  8017bc:	a50b0b04 	addi	r20,r20,11308
  8017c0:	9ccb2204 	addi	r19,r19,11400
  8017c4:	85800815 	stw	r22,32(r16)
  8017c8:	85400915 	stw	r21,36(r16)
  8017cc:	85000a15 	stw	r20,40(r16)
  8017d0:	84c00b15 	stw	r19,44(r16)
  8017d4:	84000715 	stw	r16,28(r16)
  8017d8:	00800284 	movi	r2,10
  8017dc:	8880030d 	sth	r2,12(r17)
  8017e0:	00800044 	movi	r2,1
  8017e4:	b80d883a 	mov	r6,r23
  8017e8:	89001704 	addi	r4,r17,92
  8017ec:	000b883a 	mov	r5,zero
  8017f0:	88000015 	stw	zero,0(r17)
  8017f4:	88000115 	stw	zero,4(r17)
  8017f8:	88000215 	stw	zero,8(r17)
  8017fc:	88001915 	stw	zero,100(r17)
  801800:	8880038d 	sth	r2,14(r17)
  801804:	88000415 	stw	zero,16(r17)
  801808:	88000515 	stw	zero,20(r17)
  80180c:	88000615 	stw	zero,24(r17)
  801810:	08028780 	call	802878 <memset>
  801814:	94000317 	ldw	r16,12(r18)
  801818:	00800484 	movi	r2,18
  80181c:	8c400715 	stw	r17,28(r17)
  801820:	8d800815 	stw	r22,32(r17)
  801824:	8d400915 	stw	r21,36(r17)
  801828:	8d000a15 	stw	r20,40(r17)
  80182c:	8cc00b15 	stw	r19,44(r17)
  801830:	8080030d 	sth	r2,12(r16)
  801834:	00800084 	movi	r2,2
  801838:	80000015 	stw	zero,0(r16)
  80183c:	80000115 	stw	zero,4(r16)
  801840:	80000215 	stw	zero,8(r16)
  801844:	80001915 	stw	zero,100(r16)
  801848:	8080038d 	sth	r2,14(r16)
  80184c:	80000415 	stw	zero,16(r16)
  801850:	80000515 	stw	zero,20(r16)
  801854:	80000615 	stw	zero,24(r16)
  801858:	b80d883a 	mov	r6,r23
  80185c:	000b883a 	mov	r5,zero
  801860:	81001704 	addi	r4,r16,92
  801864:	08028780 	call	802878 <memset>
  801868:	00800044 	movi	r2,1
  80186c:	84000715 	stw	r16,28(r16)
  801870:	85800815 	stw	r22,32(r16)
  801874:	85400915 	stw	r21,36(r16)
  801878:	85000a15 	stw	r20,40(r16)
  80187c:	84c00b15 	stw	r19,44(r16)
  801880:	90800e15 	stw	r2,56(r18)
  801884:	dfc00817 	ldw	ra,32(sp)
  801888:	ddc00717 	ldw	r23,28(sp)
  80188c:	dd800617 	ldw	r22,24(sp)
  801890:	dd400517 	ldw	r21,20(sp)
  801894:	dd000417 	ldw	r20,16(sp)
  801898:	dcc00317 	ldw	r19,12(sp)
  80189c:	dc800217 	ldw	r18,8(sp)
  8018a0:	dc400117 	ldw	r17,4(sp)
  8018a4:	dc000017 	ldw	r16,0(sp)
  8018a8:	dec00904 	addi	sp,sp,36
  8018ac:	f800283a 	ret

008018b0 <__fp_lock>:
  8018b0:	0005883a 	mov	r2,zero
  8018b4:	f800283a 	ret

008018b8 <__sfmoreglue>:
  8018b8:	defffc04 	addi	sp,sp,-16
  8018bc:	dc800215 	stw	r18,8(sp)
  8018c0:	2825883a 	mov	r18,r5
  8018c4:	dc000015 	stw	r16,0(sp)
  8018c8:	01401a04 	movi	r5,104
  8018cc:	2021883a 	mov	r16,r4
  8018d0:	913fffc4 	addi	r4,r18,-1
  8018d4:	dfc00315 	stw	ra,12(sp)
  8018d8:	dc400115 	stw	r17,4(sp)
  8018dc:	080b99c0 	call	80b99c <__mulsi3>
  8018e0:	8009883a 	mov	r4,r16
  8018e4:	11401d04 	addi	r5,r2,116
  8018e8:	1023883a 	mov	r17,r2
  8018ec:	080206c0 	call	80206c <_malloc_r>
  8018f0:	1021883a 	mov	r16,r2
  8018f4:	10000726 	beq	r2,zero,801914 <__sfmoreglue+0x5c>
  8018f8:	11000304 	addi	r4,r2,12
  8018fc:	10000015 	stw	zero,0(r2)
  801900:	14800115 	stw	r18,4(r2)
  801904:	11000215 	stw	r4,8(r2)
  801908:	89801a04 	addi	r6,r17,104
  80190c:	000b883a 	mov	r5,zero
  801910:	08028780 	call	802878 <memset>
  801914:	8005883a 	mov	r2,r16
  801918:	dfc00317 	ldw	ra,12(sp)
  80191c:	dc800217 	ldw	r18,8(sp)
  801920:	dc400117 	ldw	r17,4(sp)
  801924:	dc000017 	ldw	r16,0(sp)
  801928:	dec00404 	addi	sp,sp,16
  80192c:	f800283a 	ret

00801930 <__sfp>:
  801930:	defffb04 	addi	sp,sp,-20
  801934:	dc000015 	stw	r16,0(sp)
  801938:	040020b4 	movhi	r16,130
  80193c:	84382d04 	addi	r16,r16,-8012
  801940:	dcc00315 	stw	r19,12(sp)
  801944:	2027883a 	mov	r19,r4
  801948:	81000017 	ldw	r4,0(r16)
  80194c:	dfc00415 	stw	ra,16(sp)
  801950:	dc800215 	stw	r18,8(sp)
  801954:	20800e17 	ldw	r2,56(r4)
  801958:	dc400115 	stw	r17,4(sp)
  80195c:	1000021e 	bne	r2,zero,801968 <__sfp+0x38>
  801960:	08017140 	call	801714 <__sinit.part.1>
  801964:	81000017 	ldw	r4,0(r16)
  801968:	2480b804 	addi	r18,r4,736
  80196c:	047fffc4 	movi	r17,-1
  801970:	91000117 	ldw	r4,4(r18)
  801974:	94000217 	ldw	r16,8(r18)
  801978:	213fffc4 	addi	r4,r4,-1
  80197c:	20000a16 	blt	r4,zero,8019a8 <__sfp+0x78>
  801980:	8080030f 	ldh	r2,12(r16)
  801984:	10000c26 	beq	r2,zero,8019b8 <__sfp+0x88>
  801988:	80c01d04 	addi	r3,r16,116
  80198c:	00000206 	br	801998 <__sfp+0x68>
  801990:	18bfe60f 	ldh	r2,-104(r3)
  801994:	10000826 	beq	r2,zero,8019b8 <__sfp+0x88>
  801998:	213fffc4 	addi	r4,r4,-1
  80199c:	1c3ffd04 	addi	r16,r3,-12
  8019a0:	18c01a04 	addi	r3,r3,104
  8019a4:	247ffa1e 	bne	r4,r17,801990 <__alt_mem_epcs_flash_controller_0+0xff7f8990>
  8019a8:	90800017 	ldw	r2,0(r18)
  8019ac:	10001d26 	beq	r2,zero,801a24 <__sfp+0xf4>
  8019b0:	1025883a 	mov	r18,r2
  8019b4:	003fee06 	br	801970 <__alt_mem_epcs_flash_controller_0+0xff7f8970>
  8019b8:	00bfffc4 	movi	r2,-1
  8019bc:	8080038d 	sth	r2,14(r16)
  8019c0:	00800044 	movi	r2,1
  8019c4:	8080030d 	sth	r2,12(r16)
  8019c8:	80001915 	stw	zero,100(r16)
  8019cc:	80000015 	stw	zero,0(r16)
  8019d0:	80000215 	stw	zero,8(r16)
  8019d4:	80000115 	stw	zero,4(r16)
  8019d8:	80000415 	stw	zero,16(r16)
  8019dc:	80000515 	stw	zero,20(r16)
  8019e0:	80000615 	stw	zero,24(r16)
  8019e4:	01800204 	movi	r6,8
  8019e8:	000b883a 	mov	r5,zero
  8019ec:	81001704 	addi	r4,r16,92
  8019f0:	08028780 	call	802878 <memset>
  8019f4:	8005883a 	mov	r2,r16
  8019f8:	80000c15 	stw	zero,48(r16)
  8019fc:	80000d15 	stw	zero,52(r16)
  801a00:	80001115 	stw	zero,68(r16)
  801a04:	80001215 	stw	zero,72(r16)
  801a08:	dfc00417 	ldw	ra,16(sp)
  801a0c:	dcc00317 	ldw	r19,12(sp)
  801a10:	dc800217 	ldw	r18,8(sp)
  801a14:	dc400117 	ldw	r17,4(sp)
  801a18:	dc000017 	ldw	r16,0(sp)
  801a1c:	dec00504 	addi	sp,sp,20
  801a20:	f800283a 	ret
  801a24:	01400104 	movi	r5,4
  801a28:	9809883a 	mov	r4,r19
  801a2c:	08018b80 	call	8018b8 <__sfmoreglue>
  801a30:	90800015 	stw	r2,0(r18)
  801a34:	103fde1e 	bne	r2,zero,8019b0 <__alt_mem_epcs_flash_controller_0+0xff7f89b0>
  801a38:	00800304 	movi	r2,12
  801a3c:	98800015 	stw	r2,0(r19)
  801a40:	0005883a 	mov	r2,zero
  801a44:	003ff006 	br	801a08 <__alt_mem_epcs_flash_controller_0+0xff7f8a08>

00801a48 <_cleanup>:
  801a48:	008020b4 	movhi	r2,130
  801a4c:	10b82d04 	addi	r2,r2,-8012
  801a50:	11000017 	ldw	r4,0(r2)
  801a54:	01402034 	movhi	r5,128
  801a58:	2944d504 	addi	r5,r5,4948
  801a5c:	0801fa81 	jmpi	801fa8 <_fwalk_reent>

00801a60 <__sinit>:
  801a60:	20800e17 	ldw	r2,56(r4)
  801a64:	10000126 	beq	r2,zero,801a6c <__sinit+0xc>
  801a68:	f800283a 	ret
  801a6c:	08017141 	jmpi	801714 <__sinit.part.1>

00801a70 <__sfp_lock_acquire>:
  801a70:	f800283a 	ret

00801a74 <__sfp_lock_release>:
  801a74:	f800283a 	ret

00801a78 <__sinit_lock_acquire>:
  801a78:	f800283a 	ret

00801a7c <__sinit_lock_release>:
  801a7c:	f800283a 	ret

00801a80 <__fp_lock_all>:
  801a80:	008020b4 	movhi	r2,130
  801a84:	10b82e04 	addi	r2,r2,-8008
  801a88:	11000017 	ldw	r4,0(r2)
  801a8c:	01402034 	movhi	r5,128
  801a90:	29462c04 	addi	r5,r5,6320
  801a94:	0801ee41 	jmpi	801ee4 <_fwalk>

00801a98 <__fp_unlock_all>:
  801a98:	008020b4 	movhi	r2,130
  801a9c:	10b82e04 	addi	r2,r2,-8008
  801aa0:	11000017 	ldw	r4,0(r2)
  801aa4:	01402034 	movhi	r5,128
  801aa8:	2945c004 	addi	r5,r5,5888
  801aac:	0801ee41 	jmpi	801ee4 <_fwalk>

00801ab0 <_malloc_trim_r>:
  801ab0:	defffb04 	addi	sp,sp,-20
  801ab4:	dcc00315 	stw	r19,12(sp)
  801ab8:	04c020b4 	movhi	r19,130
  801abc:	dc800215 	stw	r18,8(sp)
  801ac0:	dc400115 	stw	r17,4(sp)
  801ac4:	dc000015 	stw	r16,0(sp)
  801ac8:	dfc00415 	stw	ra,16(sp)
  801acc:	2821883a 	mov	r16,r5
  801ad0:	9cf1b304 	addi	r19,r19,-14644
  801ad4:	2025883a 	mov	r18,r4
  801ad8:	080eecc0 	call	80eecc <__malloc_lock>
  801adc:	98800217 	ldw	r2,8(r19)
  801ae0:	14400117 	ldw	r17,4(r2)
  801ae4:	00bfff04 	movi	r2,-4
  801ae8:	88a2703a 	and	r17,r17,r2
  801aec:	8c21c83a 	sub	r16,r17,r16
  801af0:	8403fbc4 	addi	r16,r16,4079
  801af4:	8020d33a 	srli	r16,r16,12
  801af8:	0083ffc4 	movi	r2,4095
  801afc:	843fffc4 	addi	r16,r16,-1
  801b00:	8020933a 	slli	r16,r16,12
  801b04:	1400060e 	bge	r2,r16,801b20 <_malloc_trim_r+0x70>
  801b08:	000b883a 	mov	r5,zero
  801b0c:	9009883a 	mov	r4,r18
  801b10:	0802b000 	call	802b00 <_sbrk_r>
  801b14:	98c00217 	ldw	r3,8(r19)
  801b18:	1c47883a 	add	r3,r3,r17
  801b1c:	10c00a26 	beq	r2,r3,801b48 <_malloc_trim_r+0x98>
  801b20:	9009883a 	mov	r4,r18
  801b24:	080efec0 	call	80efec <__malloc_unlock>
  801b28:	0005883a 	mov	r2,zero
  801b2c:	dfc00417 	ldw	ra,16(sp)
  801b30:	dcc00317 	ldw	r19,12(sp)
  801b34:	dc800217 	ldw	r18,8(sp)
  801b38:	dc400117 	ldw	r17,4(sp)
  801b3c:	dc000017 	ldw	r16,0(sp)
  801b40:	dec00504 	addi	sp,sp,20
  801b44:	f800283a 	ret
  801b48:	040bc83a 	sub	r5,zero,r16
  801b4c:	9009883a 	mov	r4,r18
  801b50:	0802b000 	call	802b00 <_sbrk_r>
  801b54:	00ffffc4 	movi	r3,-1
  801b58:	10c00d26 	beq	r2,r3,801b90 <_malloc_trim_r+0xe0>
  801b5c:	00c020b4 	movhi	r3,130
  801b60:	18f89f04 	addi	r3,r3,-7556
  801b64:	18800017 	ldw	r2,0(r3)
  801b68:	99000217 	ldw	r4,8(r19)
  801b6c:	8c23c83a 	sub	r17,r17,r16
  801b70:	8c400054 	ori	r17,r17,1
  801b74:	1421c83a 	sub	r16,r2,r16
  801b78:	24400115 	stw	r17,4(r4)
  801b7c:	9009883a 	mov	r4,r18
  801b80:	1c000015 	stw	r16,0(r3)
  801b84:	080efec0 	call	80efec <__malloc_unlock>
  801b88:	00800044 	movi	r2,1
  801b8c:	003fe706 	br	801b2c <__alt_mem_epcs_flash_controller_0+0xff7f8b2c>
  801b90:	000b883a 	mov	r5,zero
  801b94:	9009883a 	mov	r4,r18
  801b98:	0802b000 	call	802b00 <_sbrk_r>
  801b9c:	99000217 	ldw	r4,8(r19)
  801ba0:	014003c4 	movi	r5,15
  801ba4:	1107c83a 	sub	r3,r2,r4
  801ba8:	28ffdd0e 	bge	r5,r3,801b20 <__alt_mem_epcs_flash_controller_0+0xff7f8b20>
  801bac:	014020b4 	movhi	r5,130
  801bb0:	29782f04 	addi	r5,r5,-8004
  801bb4:	29400017 	ldw	r5,0(r5)
  801bb8:	18c00054 	ori	r3,r3,1
  801bbc:	20c00115 	stw	r3,4(r4)
  801bc0:	00c020b4 	movhi	r3,130
  801bc4:	1145c83a 	sub	r2,r2,r5
  801bc8:	18f89f04 	addi	r3,r3,-7556
  801bcc:	18800015 	stw	r2,0(r3)
  801bd0:	003fd306 	br	801b20 <__alt_mem_epcs_flash_controller_0+0xff7f8b20>

00801bd4 <_free_r>:
  801bd4:	28004126 	beq	r5,zero,801cdc <_free_r+0x108>
  801bd8:	defffd04 	addi	sp,sp,-12
  801bdc:	dc400115 	stw	r17,4(sp)
  801be0:	dc000015 	stw	r16,0(sp)
  801be4:	2023883a 	mov	r17,r4
  801be8:	2821883a 	mov	r16,r5
  801bec:	dfc00215 	stw	ra,8(sp)
  801bf0:	080eecc0 	call	80eecc <__malloc_lock>
  801bf4:	81ffff17 	ldw	r7,-4(r16)
  801bf8:	00bfff84 	movi	r2,-2
  801bfc:	010020b4 	movhi	r4,130
  801c00:	81bffe04 	addi	r6,r16,-8
  801c04:	3884703a 	and	r2,r7,r2
  801c08:	2131b304 	addi	r4,r4,-14644
  801c0c:	308b883a 	add	r5,r6,r2
  801c10:	2a400117 	ldw	r9,4(r5)
  801c14:	22000217 	ldw	r8,8(r4)
  801c18:	00ffff04 	movi	r3,-4
  801c1c:	48c6703a 	and	r3,r9,r3
  801c20:	2a005726 	beq	r5,r8,801d80 <_free_r+0x1ac>
  801c24:	28c00115 	stw	r3,4(r5)
  801c28:	39c0004c 	andi	r7,r7,1
  801c2c:	3800091e 	bne	r7,zero,801c54 <_free_r+0x80>
  801c30:	823ffe17 	ldw	r8,-8(r16)
  801c34:	22400204 	addi	r9,r4,8
  801c38:	320dc83a 	sub	r6,r6,r8
  801c3c:	31c00217 	ldw	r7,8(r6)
  801c40:	1205883a 	add	r2,r2,r8
  801c44:	3a406526 	beq	r7,r9,801ddc <_free_r+0x208>
  801c48:	32000317 	ldw	r8,12(r6)
  801c4c:	3a000315 	stw	r8,12(r7)
  801c50:	41c00215 	stw	r7,8(r8)
  801c54:	28cf883a 	add	r7,r5,r3
  801c58:	39c00117 	ldw	r7,4(r7)
  801c5c:	39c0004c 	andi	r7,r7,1
  801c60:	38003a26 	beq	r7,zero,801d4c <_free_r+0x178>
  801c64:	10c00054 	ori	r3,r2,1
  801c68:	30c00115 	stw	r3,4(r6)
  801c6c:	3087883a 	add	r3,r6,r2
  801c70:	18800015 	stw	r2,0(r3)
  801c74:	00c07fc4 	movi	r3,511
  801c78:	18801936 	bltu	r3,r2,801ce0 <_free_r+0x10c>
  801c7c:	1004d0fa 	srli	r2,r2,3
  801c80:	01c00044 	movi	r7,1
  801c84:	21400117 	ldw	r5,4(r4)
  801c88:	10c00044 	addi	r3,r2,1
  801c8c:	18c7883a 	add	r3,r3,r3
  801c90:	1005d0ba 	srai	r2,r2,2
  801c94:	18c7883a 	add	r3,r3,r3
  801c98:	18c7883a 	add	r3,r3,r3
  801c9c:	1907883a 	add	r3,r3,r4
  801ca0:	3884983a 	sll	r2,r7,r2
  801ca4:	19c00017 	ldw	r7,0(r3)
  801ca8:	1a3ffe04 	addi	r8,r3,-8
  801cac:	1144b03a 	or	r2,r2,r5
  801cb0:	32000315 	stw	r8,12(r6)
  801cb4:	31c00215 	stw	r7,8(r6)
  801cb8:	20800115 	stw	r2,4(r4)
  801cbc:	19800015 	stw	r6,0(r3)
  801cc0:	39800315 	stw	r6,12(r7)
  801cc4:	8809883a 	mov	r4,r17
  801cc8:	dfc00217 	ldw	ra,8(sp)
  801ccc:	dc400117 	ldw	r17,4(sp)
  801cd0:	dc000017 	ldw	r16,0(sp)
  801cd4:	dec00304 	addi	sp,sp,12
  801cd8:	080efec1 	jmpi	80efec <__malloc_unlock>
  801cdc:	f800283a 	ret
  801ce0:	100ad27a 	srli	r5,r2,9
  801ce4:	00c00104 	movi	r3,4
  801ce8:	19404a36 	bltu	r3,r5,801e14 <_free_r+0x240>
  801cec:	100ad1ba 	srli	r5,r2,6
  801cf0:	28c00e44 	addi	r3,r5,57
  801cf4:	18c7883a 	add	r3,r3,r3
  801cf8:	29400e04 	addi	r5,r5,56
  801cfc:	18c7883a 	add	r3,r3,r3
  801d00:	18c7883a 	add	r3,r3,r3
  801d04:	1909883a 	add	r4,r3,r4
  801d08:	20c00017 	ldw	r3,0(r4)
  801d0c:	01c020b4 	movhi	r7,130
  801d10:	213ffe04 	addi	r4,r4,-8
  801d14:	39f1b304 	addi	r7,r7,-14644
  801d18:	20c04426 	beq	r4,r3,801e2c <_free_r+0x258>
  801d1c:	01ffff04 	movi	r7,-4
  801d20:	19400117 	ldw	r5,4(r3)
  801d24:	29ca703a 	and	r5,r5,r7
  801d28:	1140022e 	bgeu	r2,r5,801d34 <_free_r+0x160>
  801d2c:	18c00217 	ldw	r3,8(r3)
  801d30:	20fffb1e 	bne	r4,r3,801d20 <__alt_mem_epcs_flash_controller_0+0xff7f8d20>
  801d34:	19000317 	ldw	r4,12(r3)
  801d38:	31000315 	stw	r4,12(r6)
  801d3c:	30c00215 	stw	r3,8(r6)
  801d40:	21800215 	stw	r6,8(r4)
  801d44:	19800315 	stw	r6,12(r3)
  801d48:	003fde06 	br	801cc4 <__alt_mem_epcs_flash_controller_0+0xff7f8cc4>
  801d4c:	29c00217 	ldw	r7,8(r5)
  801d50:	10c5883a 	add	r2,r2,r3
  801d54:	00c020b4 	movhi	r3,130
  801d58:	18f1b504 	addi	r3,r3,-14636
  801d5c:	38c03b26 	beq	r7,r3,801e4c <_free_r+0x278>
  801d60:	2a000317 	ldw	r8,12(r5)
  801d64:	11400054 	ori	r5,r2,1
  801d68:	3087883a 	add	r3,r6,r2
  801d6c:	3a000315 	stw	r8,12(r7)
  801d70:	41c00215 	stw	r7,8(r8)
  801d74:	31400115 	stw	r5,4(r6)
  801d78:	18800015 	stw	r2,0(r3)
  801d7c:	003fbd06 	br	801c74 <__alt_mem_epcs_flash_controller_0+0xff7f8c74>
  801d80:	39c0004c 	andi	r7,r7,1
  801d84:	10c5883a 	add	r2,r2,r3
  801d88:	3800071e 	bne	r7,zero,801da8 <_free_r+0x1d4>
  801d8c:	81fffe17 	ldw	r7,-8(r16)
  801d90:	31cdc83a 	sub	r6,r6,r7
  801d94:	30c00317 	ldw	r3,12(r6)
  801d98:	31400217 	ldw	r5,8(r6)
  801d9c:	11c5883a 	add	r2,r2,r7
  801da0:	28c00315 	stw	r3,12(r5)
  801da4:	19400215 	stw	r5,8(r3)
  801da8:	10c00054 	ori	r3,r2,1
  801dac:	30c00115 	stw	r3,4(r6)
  801db0:	00c020b4 	movhi	r3,130
  801db4:	18f83004 	addi	r3,r3,-8000
  801db8:	18c00017 	ldw	r3,0(r3)
  801dbc:	21800215 	stw	r6,8(r4)
  801dc0:	10ffc036 	bltu	r2,r3,801cc4 <__alt_mem_epcs_flash_controller_0+0xff7f8cc4>
  801dc4:	008020b4 	movhi	r2,130
  801dc8:	10b87a04 	addi	r2,r2,-7704
  801dcc:	11400017 	ldw	r5,0(r2)
  801dd0:	8809883a 	mov	r4,r17
  801dd4:	0801ab00 	call	801ab0 <_malloc_trim_r>
  801dd8:	003fba06 	br	801cc4 <__alt_mem_epcs_flash_controller_0+0xff7f8cc4>
  801ddc:	28c9883a 	add	r4,r5,r3
  801de0:	21000117 	ldw	r4,4(r4)
  801de4:	2100004c 	andi	r4,r4,1
  801de8:	2000391e 	bne	r4,zero,801ed0 <_free_r+0x2fc>
  801dec:	29c00217 	ldw	r7,8(r5)
  801df0:	29000317 	ldw	r4,12(r5)
  801df4:	1885883a 	add	r2,r3,r2
  801df8:	10c00054 	ori	r3,r2,1
  801dfc:	39000315 	stw	r4,12(r7)
  801e00:	21c00215 	stw	r7,8(r4)
  801e04:	30c00115 	stw	r3,4(r6)
  801e08:	308d883a 	add	r6,r6,r2
  801e0c:	30800015 	stw	r2,0(r6)
  801e10:	003fac06 	br	801cc4 <__alt_mem_epcs_flash_controller_0+0xff7f8cc4>
  801e14:	00c00504 	movi	r3,20
  801e18:	19401536 	bltu	r3,r5,801e70 <_free_r+0x29c>
  801e1c:	28c01704 	addi	r3,r5,92
  801e20:	18c7883a 	add	r3,r3,r3
  801e24:	294016c4 	addi	r5,r5,91
  801e28:	003fb406 	br	801cfc <__alt_mem_epcs_flash_controller_0+0xff7f8cfc>
  801e2c:	280bd0ba 	srai	r5,r5,2
  801e30:	00c00044 	movi	r3,1
  801e34:	38800117 	ldw	r2,4(r7)
  801e38:	194a983a 	sll	r5,r3,r5
  801e3c:	2007883a 	mov	r3,r4
  801e40:	2884b03a 	or	r2,r5,r2
  801e44:	38800115 	stw	r2,4(r7)
  801e48:	003fbb06 	br	801d38 <__alt_mem_epcs_flash_controller_0+0xff7f8d38>
  801e4c:	21800515 	stw	r6,20(r4)
  801e50:	21800415 	stw	r6,16(r4)
  801e54:	10c00054 	ori	r3,r2,1
  801e58:	31c00315 	stw	r7,12(r6)
  801e5c:	31c00215 	stw	r7,8(r6)
  801e60:	30c00115 	stw	r3,4(r6)
  801e64:	308d883a 	add	r6,r6,r2
  801e68:	30800015 	stw	r2,0(r6)
  801e6c:	003f9506 	br	801cc4 <__alt_mem_epcs_flash_controller_0+0xff7f8cc4>
  801e70:	00c01504 	movi	r3,84
  801e74:	19400536 	bltu	r3,r5,801e8c <_free_r+0x2b8>
  801e78:	100ad33a 	srli	r5,r2,12
  801e7c:	28c01bc4 	addi	r3,r5,111
  801e80:	18c7883a 	add	r3,r3,r3
  801e84:	29401b84 	addi	r5,r5,110
  801e88:	003f9c06 	br	801cfc <__alt_mem_epcs_flash_controller_0+0xff7f8cfc>
  801e8c:	00c05504 	movi	r3,340
  801e90:	19400536 	bltu	r3,r5,801ea8 <_free_r+0x2d4>
  801e94:	100ad3fa 	srli	r5,r2,15
  801e98:	28c01e04 	addi	r3,r5,120
  801e9c:	18c7883a 	add	r3,r3,r3
  801ea0:	29401dc4 	addi	r5,r5,119
  801ea4:	003f9506 	br	801cfc <__alt_mem_epcs_flash_controller_0+0xff7f8cfc>
  801ea8:	00c15504 	movi	r3,1364
  801eac:	19400536 	bltu	r3,r5,801ec4 <_free_r+0x2f0>
  801eb0:	100ad4ba 	srli	r5,r2,18
  801eb4:	28c01f44 	addi	r3,r5,125
  801eb8:	18c7883a 	add	r3,r3,r3
  801ebc:	29401f04 	addi	r5,r5,124
  801ec0:	003f8e06 	br	801cfc <__alt_mem_epcs_flash_controller_0+0xff7f8cfc>
  801ec4:	00c03f84 	movi	r3,254
  801ec8:	01401f84 	movi	r5,126
  801ecc:	003f8b06 	br	801cfc <__alt_mem_epcs_flash_controller_0+0xff7f8cfc>
  801ed0:	10c00054 	ori	r3,r2,1
  801ed4:	30c00115 	stw	r3,4(r6)
  801ed8:	308d883a 	add	r6,r6,r2
  801edc:	30800015 	stw	r2,0(r6)
  801ee0:	003f7806 	br	801cc4 <__alt_mem_epcs_flash_controller_0+0xff7f8cc4>

00801ee4 <_fwalk>:
  801ee4:	defff704 	addi	sp,sp,-36
  801ee8:	dd000415 	stw	r20,16(sp)
  801eec:	dfc00815 	stw	ra,32(sp)
  801ef0:	ddc00715 	stw	r23,28(sp)
  801ef4:	dd800615 	stw	r22,24(sp)
  801ef8:	dd400515 	stw	r21,20(sp)
  801efc:	dcc00315 	stw	r19,12(sp)
  801f00:	dc800215 	stw	r18,8(sp)
  801f04:	dc400115 	stw	r17,4(sp)
  801f08:	dc000015 	stw	r16,0(sp)
  801f0c:	2500b804 	addi	r20,r4,736
  801f10:	a0002326 	beq	r20,zero,801fa0 <_fwalk+0xbc>
  801f14:	282b883a 	mov	r21,r5
  801f18:	002f883a 	mov	r23,zero
  801f1c:	05800044 	movi	r22,1
  801f20:	04ffffc4 	movi	r19,-1
  801f24:	a4400117 	ldw	r17,4(r20)
  801f28:	a4800217 	ldw	r18,8(r20)
  801f2c:	8c7fffc4 	addi	r17,r17,-1
  801f30:	88000d16 	blt	r17,zero,801f68 <_fwalk+0x84>
  801f34:	94000304 	addi	r16,r18,12
  801f38:	94800384 	addi	r18,r18,14
  801f3c:	8080000b 	ldhu	r2,0(r16)
  801f40:	8c7fffc4 	addi	r17,r17,-1
  801f44:	813ffd04 	addi	r4,r16,-12
  801f48:	b080042e 	bgeu	r22,r2,801f5c <_fwalk+0x78>
  801f4c:	9080000f 	ldh	r2,0(r18)
  801f50:	14c00226 	beq	r2,r19,801f5c <_fwalk+0x78>
  801f54:	a83ee83a 	callr	r21
  801f58:	b8aeb03a 	or	r23,r23,r2
  801f5c:	84001a04 	addi	r16,r16,104
  801f60:	94801a04 	addi	r18,r18,104
  801f64:	8cfff51e 	bne	r17,r19,801f3c <__alt_mem_epcs_flash_controller_0+0xff7f8f3c>
  801f68:	a5000017 	ldw	r20,0(r20)
  801f6c:	a03fed1e 	bne	r20,zero,801f24 <__alt_mem_epcs_flash_controller_0+0xff7f8f24>
  801f70:	b805883a 	mov	r2,r23
  801f74:	dfc00817 	ldw	ra,32(sp)
  801f78:	ddc00717 	ldw	r23,28(sp)
  801f7c:	dd800617 	ldw	r22,24(sp)
  801f80:	dd400517 	ldw	r21,20(sp)
  801f84:	dd000417 	ldw	r20,16(sp)
  801f88:	dcc00317 	ldw	r19,12(sp)
  801f8c:	dc800217 	ldw	r18,8(sp)
  801f90:	dc400117 	ldw	r17,4(sp)
  801f94:	dc000017 	ldw	r16,0(sp)
  801f98:	dec00904 	addi	sp,sp,36
  801f9c:	f800283a 	ret
  801fa0:	002f883a 	mov	r23,zero
  801fa4:	003ff206 	br	801f70 <__alt_mem_epcs_flash_controller_0+0xff7f8f70>

00801fa8 <_fwalk_reent>:
  801fa8:	defff704 	addi	sp,sp,-36
  801fac:	dd000415 	stw	r20,16(sp)
  801fb0:	dfc00815 	stw	ra,32(sp)
  801fb4:	ddc00715 	stw	r23,28(sp)
  801fb8:	dd800615 	stw	r22,24(sp)
  801fbc:	dd400515 	stw	r21,20(sp)
  801fc0:	dcc00315 	stw	r19,12(sp)
  801fc4:	dc800215 	stw	r18,8(sp)
  801fc8:	dc400115 	stw	r17,4(sp)
  801fcc:	dc000015 	stw	r16,0(sp)
  801fd0:	2500b804 	addi	r20,r4,736
  801fd4:	a0002326 	beq	r20,zero,802064 <_fwalk_reent+0xbc>
  801fd8:	282b883a 	mov	r21,r5
  801fdc:	2027883a 	mov	r19,r4
  801fe0:	002f883a 	mov	r23,zero
  801fe4:	05800044 	movi	r22,1
  801fe8:	04bfffc4 	movi	r18,-1
  801fec:	a4400117 	ldw	r17,4(r20)
  801ff0:	a4000217 	ldw	r16,8(r20)
  801ff4:	8c7fffc4 	addi	r17,r17,-1
  801ff8:	88000c16 	blt	r17,zero,80202c <_fwalk_reent+0x84>
  801ffc:	84000304 	addi	r16,r16,12
  802000:	8080000b 	ldhu	r2,0(r16)
  802004:	8c7fffc4 	addi	r17,r17,-1
  802008:	817ffd04 	addi	r5,r16,-12
  80200c:	b080052e 	bgeu	r22,r2,802024 <_fwalk_reent+0x7c>
  802010:	8080008f 	ldh	r2,2(r16)
  802014:	9809883a 	mov	r4,r19
  802018:	14800226 	beq	r2,r18,802024 <_fwalk_reent+0x7c>
  80201c:	a83ee83a 	callr	r21
  802020:	b8aeb03a 	or	r23,r23,r2
  802024:	84001a04 	addi	r16,r16,104
  802028:	8cbff51e 	bne	r17,r18,802000 <__alt_mem_epcs_flash_controller_0+0xff7f9000>
  80202c:	a5000017 	ldw	r20,0(r20)
  802030:	a03fee1e 	bne	r20,zero,801fec <__alt_mem_epcs_flash_controller_0+0xff7f8fec>
  802034:	b805883a 	mov	r2,r23
  802038:	dfc00817 	ldw	ra,32(sp)
  80203c:	ddc00717 	ldw	r23,28(sp)
  802040:	dd800617 	ldw	r22,24(sp)
  802044:	dd400517 	ldw	r21,20(sp)
  802048:	dd000417 	ldw	r20,16(sp)
  80204c:	dcc00317 	ldw	r19,12(sp)
  802050:	dc800217 	ldw	r18,8(sp)
  802054:	dc400117 	ldw	r17,4(sp)
  802058:	dc000017 	ldw	r16,0(sp)
  80205c:	dec00904 	addi	sp,sp,36
  802060:	f800283a 	ret
  802064:	002f883a 	mov	r23,zero
  802068:	003ff206 	br	802034 <__alt_mem_epcs_flash_controller_0+0xff7f9034>

0080206c <_malloc_r>:
  80206c:	defff504 	addi	sp,sp,-44
  802070:	dc800315 	stw	r18,12(sp)
  802074:	dfc00a15 	stw	ra,40(sp)
  802078:	df000915 	stw	fp,36(sp)
  80207c:	ddc00815 	stw	r23,32(sp)
  802080:	dd800715 	stw	r22,28(sp)
  802084:	dd400615 	stw	r21,24(sp)
  802088:	dd000515 	stw	r20,20(sp)
  80208c:	dcc00415 	stw	r19,16(sp)
  802090:	dc400215 	stw	r17,8(sp)
  802094:	dc000115 	stw	r16,4(sp)
  802098:	288002c4 	addi	r2,r5,11
  80209c:	00c00584 	movi	r3,22
  8020a0:	2025883a 	mov	r18,r4
  8020a4:	18807f2e 	bgeu	r3,r2,8022a4 <_malloc_r+0x238>
  8020a8:	047ffe04 	movi	r17,-8
  8020ac:	1462703a 	and	r17,r2,r17
  8020b0:	8800a316 	blt	r17,zero,802340 <_malloc_r+0x2d4>
  8020b4:	8940a236 	bltu	r17,r5,802340 <_malloc_r+0x2d4>
  8020b8:	080eecc0 	call	80eecc <__malloc_lock>
  8020bc:	00807dc4 	movi	r2,503
  8020c0:	1441e92e 	bgeu	r2,r17,802868 <_malloc_r+0x7fc>
  8020c4:	8804d27a 	srli	r2,r17,9
  8020c8:	1000a126 	beq	r2,zero,802350 <_malloc_r+0x2e4>
  8020cc:	00c00104 	movi	r3,4
  8020d0:	18811e36 	bltu	r3,r2,80254c <_malloc_r+0x4e0>
  8020d4:	8804d1ba 	srli	r2,r17,6
  8020d8:	12000e44 	addi	r8,r2,57
  8020dc:	11c00e04 	addi	r7,r2,56
  8020e0:	4209883a 	add	r4,r8,r8
  8020e4:	04c020b4 	movhi	r19,130
  8020e8:	2109883a 	add	r4,r4,r4
  8020ec:	9cf1b304 	addi	r19,r19,-14644
  8020f0:	2109883a 	add	r4,r4,r4
  8020f4:	9909883a 	add	r4,r19,r4
  8020f8:	24000117 	ldw	r16,4(r4)
  8020fc:	213ffe04 	addi	r4,r4,-8
  802100:	24009726 	beq	r4,r16,802360 <_malloc_r+0x2f4>
  802104:	80800117 	ldw	r2,4(r16)
  802108:	01bfff04 	movi	r6,-4
  80210c:	014003c4 	movi	r5,15
  802110:	1184703a 	and	r2,r2,r6
  802114:	1447c83a 	sub	r3,r2,r17
  802118:	28c00716 	blt	r5,r3,802138 <_malloc_r+0xcc>
  80211c:	1800920e 	bge	r3,zero,802368 <_malloc_r+0x2fc>
  802120:	84000317 	ldw	r16,12(r16)
  802124:	24008e26 	beq	r4,r16,802360 <_malloc_r+0x2f4>
  802128:	80800117 	ldw	r2,4(r16)
  80212c:	1184703a 	and	r2,r2,r6
  802130:	1447c83a 	sub	r3,r2,r17
  802134:	28fff90e 	bge	r5,r3,80211c <__alt_mem_epcs_flash_controller_0+0xff7f911c>
  802138:	3809883a 	mov	r4,r7
  80213c:	018020b4 	movhi	r6,130
  802140:	9c000417 	ldw	r16,16(r19)
  802144:	31b1b304 	addi	r6,r6,-14644
  802148:	32000204 	addi	r8,r6,8
  80214c:	82013426 	beq	r16,r8,802620 <_malloc_r+0x5b4>
  802150:	80c00117 	ldw	r3,4(r16)
  802154:	00bfff04 	movi	r2,-4
  802158:	188e703a 	and	r7,r3,r2
  80215c:	3c45c83a 	sub	r2,r7,r17
  802160:	00c003c4 	movi	r3,15
  802164:	18811f16 	blt	r3,r2,8025e4 <_malloc_r+0x578>
  802168:	32000515 	stw	r8,20(r6)
  80216c:	32000415 	stw	r8,16(r6)
  802170:	10007f0e 	bge	r2,zero,802370 <_malloc_r+0x304>
  802174:	00807fc4 	movi	r2,511
  802178:	11c0fd36 	bltu	r2,r7,802570 <_malloc_r+0x504>
  80217c:	3806d0fa 	srli	r3,r7,3
  802180:	01c00044 	movi	r7,1
  802184:	30800117 	ldw	r2,4(r6)
  802188:	19400044 	addi	r5,r3,1
  80218c:	294b883a 	add	r5,r5,r5
  802190:	1807d0ba 	srai	r3,r3,2
  802194:	294b883a 	add	r5,r5,r5
  802198:	294b883a 	add	r5,r5,r5
  80219c:	298b883a 	add	r5,r5,r6
  8021a0:	38c6983a 	sll	r3,r7,r3
  8021a4:	29c00017 	ldw	r7,0(r5)
  8021a8:	2a7ffe04 	addi	r9,r5,-8
  8021ac:	1886b03a 	or	r3,r3,r2
  8021b0:	82400315 	stw	r9,12(r16)
  8021b4:	81c00215 	stw	r7,8(r16)
  8021b8:	30c00115 	stw	r3,4(r6)
  8021bc:	2c000015 	stw	r16,0(r5)
  8021c0:	3c000315 	stw	r16,12(r7)
  8021c4:	2005d0ba 	srai	r2,r4,2
  8021c8:	01400044 	movi	r5,1
  8021cc:	288a983a 	sll	r5,r5,r2
  8021d0:	19406f36 	bltu	r3,r5,802390 <_malloc_r+0x324>
  8021d4:	28c4703a 	and	r2,r5,r3
  8021d8:	10000a1e 	bne	r2,zero,802204 <_malloc_r+0x198>
  8021dc:	00bfff04 	movi	r2,-4
  8021e0:	294b883a 	add	r5,r5,r5
  8021e4:	2088703a 	and	r4,r4,r2
  8021e8:	28c4703a 	and	r2,r5,r3
  8021ec:	21000104 	addi	r4,r4,4
  8021f0:	1000041e 	bne	r2,zero,802204 <_malloc_r+0x198>
  8021f4:	294b883a 	add	r5,r5,r5
  8021f8:	28c4703a 	and	r2,r5,r3
  8021fc:	21000104 	addi	r4,r4,4
  802200:	103ffc26 	beq	r2,zero,8021f4 <__alt_mem_epcs_flash_controller_0+0xff7f91f4>
  802204:	02bfff04 	movi	r10,-4
  802208:	024003c4 	movi	r9,15
  80220c:	21800044 	addi	r6,r4,1
  802210:	318d883a 	add	r6,r6,r6
  802214:	318d883a 	add	r6,r6,r6
  802218:	318d883a 	add	r6,r6,r6
  80221c:	998d883a 	add	r6,r19,r6
  802220:	333ffe04 	addi	r12,r6,-8
  802224:	2017883a 	mov	r11,r4
  802228:	31800104 	addi	r6,r6,4
  80222c:	34000017 	ldw	r16,0(r6)
  802230:	31fffd04 	addi	r7,r6,-12
  802234:	81c0041e 	bne	r16,r7,802248 <_malloc_r+0x1dc>
  802238:	0000fb06 	br	802628 <_malloc_r+0x5bc>
  80223c:	1801030e 	bge	r3,zero,80264c <_malloc_r+0x5e0>
  802240:	84000317 	ldw	r16,12(r16)
  802244:	81c0f826 	beq	r16,r7,802628 <_malloc_r+0x5bc>
  802248:	80800117 	ldw	r2,4(r16)
  80224c:	1284703a 	and	r2,r2,r10
  802250:	1447c83a 	sub	r3,r2,r17
  802254:	48fff90e 	bge	r9,r3,80223c <__alt_mem_epcs_flash_controller_0+0xff7f923c>
  802258:	80800317 	ldw	r2,12(r16)
  80225c:	81000217 	ldw	r4,8(r16)
  802260:	89400054 	ori	r5,r17,1
  802264:	81400115 	stw	r5,4(r16)
  802268:	20800315 	stw	r2,12(r4)
  80226c:	11000215 	stw	r4,8(r2)
  802270:	8463883a 	add	r17,r16,r17
  802274:	9c400515 	stw	r17,20(r19)
  802278:	9c400415 	stw	r17,16(r19)
  80227c:	18800054 	ori	r2,r3,1
  802280:	88800115 	stw	r2,4(r17)
  802284:	8a000315 	stw	r8,12(r17)
  802288:	8a000215 	stw	r8,8(r17)
  80228c:	88e3883a 	add	r17,r17,r3
  802290:	88c00015 	stw	r3,0(r17)
  802294:	9009883a 	mov	r4,r18
  802298:	080efec0 	call	80efec <__malloc_unlock>
  80229c:	80800204 	addi	r2,r16,8
  8022a0:	00001b06 	br	802310 <_malloc_r+0x2a4>
  8022a4:	04400404 	movi	r17,16
  8022a8:	89402536 	bltu	r17,r5,802340 <_malloc_r+0x2d4>
  8022ac:	080eecc0 	call	80eecc <__malloc_lock>
  8022b0:	00800184 	movi	r2,6
  8022b4:	01000084 	movi	r4,2
  8022b8:	04c020b4 	movhi	r19,130
  8022bc:	1085883a 	add	r2,r2,r2
  8022c0:	9cf1b304 	addi	r19,r19,-14644
  8022c4:	1085883a 	add	r2,r2,r2
  8022c8:	9885883a 	add	r2,r19,r2
  8022cc:	14000117 	ldw	r16,4(r2)
  8022d0:	10fffe04 	addi	r3,r2,-8
  8022d4:	80c0d926 	beq	r16,r3,80263c <_malloc_r+0x5d0>
  8022d8:	80c00117 	ldw	r3,4(r16)
  8022dc:	81000317 	ldw	r4,12(r16)
  8022e0:	00bfff04 	movi	r2,-4
  8022e4:	1884703a 	and	r2,r3,r2
  8022e8:	81400217 	ldw	r5,8(r16)
  8022ec:	8085883a 	add	r2,r16,r2
  8022f0:	10c00117 	ldw	r3,4(r2)
  8022f4:	29000315 	stw	r4,12(r5)
  8022f8:	21400215 	stw	r5,8(r4)
  8022fc:	18c00054 	ori	r3,r3,1
  802300:	10c00115 	stw	r3,4(r2)
  802304:	9009883a 	mov	r4,r18
  802308:	080efec0 	call	80efec <__malloc_unlock>
  80230c:	80800204 	addi	r2,r16,8
  802310:	dfc00a17 	ldw	ra,40(sp)
  802314:	df000917 	ldw	fp,36(sp)
  802318:	ddc00817 	ldw	r23,32(sp)
  80231c:	dd800717 	ldw	r22,28(sp)
  802320:	dd400617 	ldw	r21,24(sp)
  802324:	dd000517 	ldw	r20,20(sp)
  802328:	dcc00417 	ldw	r19,16(sp)
  80232c:	dc800317 	ldw	r18,12(sp)
  802330:	dc400217 	ldw	r17,8(sp)
  802334:	dc000117 	ldw	r16,4(sp)
  802338:	dec00b04 	addi	sp,sp,44
  80233c:	f800283a 	ret
  802340:	00800304 	movi	r2,12
  802344:	90800015 	stw	r2,0(r18)
  802348:	0005883a 	mov	r2,zero
  80234c:	003ff006 	br	802310 <__alt_mem_epcs_flash_controller_0+0xff7f9310>
  802350:	01002004 	movi	r4,128
  802354:	02001004 	movi	r8,64
  802358:	01c00fc4 	movi	r7,63
  80235c:	003f6106 	br	8020e4 <__alt_mem_epcs_flash_controller_0+0xff7f90e4>
  802360:	4009883a 	mov	r4,r8
  802364:	003f7506 	br	80213c <__alt_mem_epcs_flash_controller_0+0xff7f913c>
  802368:	81000317 	ldw	r4,12(r16)
  80236c:	003fde06 	br	8022e8 <__alt_mem_epcs_flash_controller_0+0xff7f92e8>
  802370:	81c5883a 	add	r2,r16,r7
  802374:	11400117 	ldw	r5,4(r2)
  802378:	9009883a 	mov	r4,r18
  80237c:	29400054 	ori	r5,r5,1
  802380:	11400115 	stw	r5,4(r2)
  802384:	080efec0 	call	80efec <__malloc_unlock>
  802388:	80800204 	addi	r2,r16,8
  80238c:	003fe006 	br	802310 <__alt_mem_epcs_flash_controller_0+0xff7f9310>
  802390:	9c000217 	ldw	r16,8(r19)
  802394:	00bfff04 	movi	r2,-4
  802398:	85800117 	ldw	r22,4(r16)
  80239c:	b0ac703a 	and	r22,r22,r2
  8023a0:	b4400336 	bltu	r22,r17,8023b0 <_malloc_r+0x344>
  8023a4:	b445c83a 	sub	r2,r22,r17
  8023a8:	00c003c4 	movi	r3,15
  8023ac:	18805d16 	blt	r3,r2,802524 <_malloc_r+0x4b8>
  8023b0:	05c020b4 	movhi	r23,130
  8023b4:	008020b4 	movhi	r2,130
  8023b8:	10b87a04 	addi	r2,r2,-7704
  8023bc:	bdf82f04 	addi	r23,r23,-8004
  8023c0:	15400017 	ldw	r21,0(r2)
  8023c4:	b8c00017 	ldw	r3,0(r23)
  8023c8:	00bfffc4 	movi	r2,-1
  8023cc:	858d883a 	add	r6,r16,r22
  8023d0:	8d6b883a 	add	r21,r17,r21
  8023d4:	1880ea26 	beq	r3,r2,802780 <_malloc_r+0x714>
  8023d8:	ad4403c4 	addi	r21,r21,4111
  8023dc:	00bc0004 	movi	r2,-4096
  8023e0:	a8aa703a 	and	r21,r21,r2
  8023e4:	a80b883a 	mov	r5,r21
  8023e8:	9009883a 	mov	r4,r18
  8023ec:	d9800015 	stw	r6,0(sp)
  8023f0:	0802b000 	call	802b00 <_sbrk_r>
  8023f4:	1029883a 	mov	r20,r2
  8023f8:	00bfffc4 	movi	r2,-1
  8023fc:	d9800017 	ldw	r6,0(sp)
  802400:	a080e826 	beq	r20,r2,8027a4 <_malloc_r+0x738>
  802404:	a180a636 	bltu	r20,r6,8026a0 <_malloc_r+0x634>
  802408:	070020b4 	movhi	fp,130
  80240c:	e7389f04 	addi	fp,fp,-7556
  802410:	e0800017 	ldw	r2,0(fp)
  802414:	a887883a 	add	r3,r21,r2
  802418:	e0c00015 	stw	r3,0(fp)
  80241c:	3500e626 	beq	r6,r20,8027b8 <_malloc_r+0x74c>
  802420:	b9000017 	ldw	r4,0(r23)
  802424:	00bfffc4 	movi	r2,-1
  802428:	2080ee26 	beq	r4,r2,8027e4 <_malloc_r+0x778>
  80242c:	a185c83a 	sub	r2,r20,r6
  802430:	10c5883a 	add	r2,r2,r3
  802434:	e0800015 	stw	r2,0(fp)
  802438:	a0c001cc 	andi	r3,r20,7
  80243c:	1800bc26 	beq	r3,zero,802730 <_malloc_r+0x6c4>
  802440:	a0e9c83a 	sub	r20,r20,r3
  802444:	00840204 	movi	r2,4104
  802448:	a5000204 	addi	r20,r20,8
  80244c:	10c7c83a 	sub	r3,r2,r3
  802450:	a545883a 	add	r2,r20,r21
  802454:	1083ffcc 	andi	r2,r2,4095
  802458:	18abc83a 	sub	r21,r3,r2
  80245c:	a80b883a 	mov	r5,r21
  802460:	9009883a 	mov	r4,r18
  802464:	0802b000 	call	802b00 <_sbrk_r>
  802468:	00ffffc4 	movi	r3,-1
  80246c:	10c0e126 	beq	r2,r3,8027f4 <_malloc_r+0x788>
  802470:	1505c83a 	sub	r2,r2,r20
  802474:	1545883a 	add	r2,r2,r21
  802478:	10800054 	ori	r2,r2,1
  80247c:	e0c00017 	ldw	r3,0(fp)
  802480:	9d000215 	stw	r20,8(r19)
  802484:	a0800115 	stw	r2,4(r20)
  802488:	a8c7883a 	add	r3,r21,r3
  80248c:	e0c00015 	stw	r3,0(fp)
  802490:	84c00e26 	beq	r16,r19,8024cc <_malloc_r+0x460>
  802494:	018003c4 	movi	r6,15
  802498:	3580a72e 	bgeu	r6,r22,802738 <_malloc_r+0x6cc>
  80249c:	81400117 	ldw	r5,4(r16)
  8024a0:	013ffe04 	movi	r4,-8
  8024a4:	b0bffd04 	addi	r2,r22,-12
  8024a8:	1104703a 	and	r2,r2,r4
  8024ac:	2900004c 	andi	r4,r5,1
  8024b0:	2088b03a 	or	r4,r4,r2
  8024b4:	81000115 	stw	r4,4(r16)
  8024b8:	01400144 	movi	r5,5
  8024bc:	8089883a 	add	r4,r16,r2
  8024c0:	21400115 	stw	r5,4(r4)
  8024c4:	21400215 	stw	r5,8(r4)
  8024c8:	3080cd36 	bltu	r6,r2,802800 <_malloc_r+0x794>
  8024cc:	008020b4 	movhi	r2,130
  8024d0:	10b87904 	addi	r2,r2,-7708
  8024d4:	11000017 	ldw	r4,0(r2)
  8024d8:	20c0012e 	bgeu	r4,r3,8024e0 <_malloc_r+0x474>
  8024dc:	10c00015 	stw	r3,0(r2)
  8024e0:	008020b4 	movhi	r2,130
  8024e4:	10b87804 	addi	r2,r2,-7712
  8024e8:	11000017 	ldw	r4,0(r2)
  8024ec:	9c000217 	ldw	r16,8(r19)
  8024f0:	20c0012e 	bgeu	r4,r3,8024f8 <_malloc_r+0x48c>
  8024f4:	10c00015 	stw	r3,0(r2)
  8024f8:	80c00117 	ldw	r3,4(r16)
  8024fc:	00bfff04 	movi	r2,-4
  802500:	1886703a 	and	r3,r3,r2
  802504:	1c45c83a 	sub	r2,r3,r17
  802508:	1c400236 	bltu	r3,r17,802514 <_malloc_r+0x4a8>
  80250c:	00c003c4 	movi	r3,15
  802510:	18800416 	blt	r3,r2,802524 <_malloc_r+0x4b8>
  802514:	9009883a 	mov	r4,r18
  802518:	080efec0 	call	80efec <__malloc_unlock>
  80251c:	0005883a 	mov	r2,zero
  802520:	003f7b06 	br	802310 <__alt_mem_epcs_flash_controller_0+0xff7f9310>
  802524:	88c00054 	ori	r3,r17,1
  802528:	80c00115 	stw	r3,4(r16)
  80252c:	8463883a 	add	r17,r16,r17
  802530:	10800054 	ori	r2,r2,1
  802534:	9c400215 	stw	r17,8(r19)
  802538:	88800115 	stw	r2,4(r17)
  80253c:	9009883a 	mov	r4,r18
  802540:	080efec0 	call	80efec <__malloc_unlock>
  802544:	80800204 	addi	r2,r16,8
  802548:	003f7106 	br	802310 <__alt_mem_epcs_flash_controller_0+0xff7f9310>
  80254c:	00c00504 	movi	r3,20
  802550:	18804a2e 	bgeu	r3,r2,80267c <_malloc_r+0x610>
  802554:	00c01504 	movi	r3,84
  802558:	18806e36 	bltu	r3,r2,802714 <_malloc_r+0x6a8>
  80255c:	8804d33a 	srli	r2,r17,12
  802560:	12001bc4 	addi	r8,r2,111
  802564:	11c01b84 	addi	r7,r2,110
  802568:	4209883a 	add	r4,r8,r8
  80256c:	003edd06 	br	8020e4 <__alt_mem_epcs_flash_controller_0+0xff7f90e4>
  802570:	3804d27a 	srli	r2,r7,9
  802574:	00c00104 	movi	r3,4
  802578:	1880442e 	bgeu	r3,r2,80268c <_malloc_r+0x620>
  80257c:	00c00504 	movi	r3,20
  802580:	18808136 	bltu	r3,r2,802788 <_malloc_r+0x71c>
  802584:	11401704 	addi	r5,r2,92
  802588:	10c016c4 	addi	r3,r2,91
  80258c:	294b883a 	add	r5,r5,r5
  802590:	294b883a 	add	r5,r5,r5
  802594:	294b883a 	add	r5,r5,r5
  802598:	994b883a 	add	r5,r19,r5
  80259c:	28800017 	ldw	r2,0(r5)
  8025a0:	018020b4 	movhi	r6,130
  8025a4:	297ffe04 	addi	r5,r5,-8
  8025a8:	31b1b304 	addi	r6,r6,-14644
  8025ac:	28806526 	beq	r5,r2,802744 <_malloc_r+0x6d8>
  8025b0:	01bfff04 	movi	r6,-4
  8025b4:	10c00117 	ldw	r3,4(r2)
  8025b8:	1986703a 	and	r3,r3,r6
  8025bc:	38c0022e 	bgeu	r7,r3,8025c8 <_malloc_r+0x55c>
  8025c0:	10800217 	ldw	r2,8(r2)
  8025c4:	28bffb1e 	bne	r5,r2,8025b4 <__alt_mem_epcs_flash_controller_0+0xff7f95b4>
  8025c8:	11400317 	ldw	r5,12(r2)
  8025cc:	98c00117 	ldw	r3,4(r19)
  8025d0:	81400315 	stw	r5,12(r16)
  8025d4:	80800215 	stw	r2,8(r16)
  8025d8:	2c000215 	stw	r16,8(r5)
  8025dc:	14000315 	stw	r16,12(r2)
  8025e0:	003ef806 	br	8021c4 <__alt_mem_epcs_flash_controller_0+0xff7f91c4>
  8025e4:	88c00054 	ori	r3,r17,1
  8025e8:	80c00115 	stw	r3,4(r16)
  8025ec:	8463883a 	add	r17,r16,r17
  8025f0:	34400515 	stw	r17,20(r6)
  8025f4:	34400415 	stw	r17,16(r6)
  8025f8:	10c00054 	ori	r3,r2,1
  8025fc:	8a000315 	stw	r8,12(r17)
  802600:	8a000215 	stw	r8,8(r17)
  802604:	88c00115 	stw	r3,4(r17)
  802608:	88a3883a 	add	r17,r17,r2
  80260c:	88800015 	stw	r2,0(r17)
  802610:	9009883a 	mov	r4,r18
  802614:	080efec0 	call	80efec <__malloc_unlock>
  802618:	80800204 	addi	r2,r16,8
  80261c:	003f3c06 	br	802310 <__alt_mem_epcs_flash_controller_0+0xff7f9310>
  802620:	30c00117 	ldw	r3,4(r6)
  802624:	003ee706 	br	8021c4 <__alt_mem_epcs_flash_controller_0+0xff7f91c4>
  802628:	5ac00044 	addi	r11,r11,1
  80262c:	588000cc 	andi	r2,r11,3
  802630:	31800204 	addi	r6,r6,8
  802634:	103efd1e 	bne	r2,zero,80222c <__alt_mem_epcs_flash_controller_0+0xff7f922c>
  802638:	00002406 	br	8026cc <_malloc_r+0x660>
  80263c:	14000317 	ldw	r16,12(r2)
  802640:	143f251e 	bne	r2,r16,8022d8 <__alt_mem_epcs_flash_controller_0+0xff7f92d8>
  802644:	21000084 	addi	r4,r4,2
  802648:	003ebc06 	br	80213c <__alt_mem_epcs_flash_controller_0+0xff7f913c>
  80264c:	8085883a 	add	r2,r16,r2
  802650:	10c00117 	ldw	r3,4(r2)
  802654:	81000317 	ldw	r4,12(r16)
  802658:	81400217 	ldw	r5,8(r16)
  80265c:	18c00054 	ori	r3,r3,1
  802660:	10c00115 	stw	r3,4(r2)
  802664:	29000315 	stw	r4,12(r5)
  802668:	21400215 	stw	r5,8(r4)
  80266c:	9009883a 	mov	r4,r18
  802670:	080efec0 	call	80efec <__malloc_unlock>
  802674:	80800204 	addi	r2,r16,8
  802678:	003f2506 	br	802310 <__alt_mem_epcs_flash_controller_0+0xff7f9310>
  80267c:	12001704 	addi	r8,r2,92
  802680:	11c016c4 	addi	r7,r2,91
  802684:	4209883a 	add	r4,r8,r8
  802688:	003e9606 	br	8020e4 <__alt_mem_epcs_flash_controller_0+0xff7f90e4>
  80268c:	3804d1ba 	srli	r2,r7,6
  802690:	11400e44 	addi	r5,r2,57
  802694:	10c00e04 	addi	r3,r2,56
  802698:	294b883a 	add	r5,r5,r5
  80269c:	003fbc06 	br	802590 <__alt_mem_epcs_flash_controller_0+0xff7f9590>
  8026a0:	84ff5926 	beq	r16,r19,802408 <__alt_mem_epcs_flash_controller_0+0xff7f9408>
  8026a4:	008020b4 	movhi	r2,130
  8026a8:	10b1b304 	addi	r2,r2,-14644
  8026ac:	14000217 	ldw	r16,8(r2)
  8026b0:	00bfff04 	movi	r2,-4
  8026b4:	80c00117 	ldw	r3,4(r16)
  8026b8:	1886703a 	and	r3,r3,r2
  8026bc:	003f9106 	br	802504 <__alt_mem_epcs_flash_controller_0+0xff7f9504>
  8026c0:	60800217 	ldw	r2,8(r12)
  8026c4:	213fffc4 	addi	r4,r4,-1
  8026c8:	1300651e 	bne	r2,r12,802860 <_malloc_r+0x7f4>
  8026cc:	208000cc 	andi	r2,r4,3
  8026d0:	633ffe04 	addi	r12,r12,-8
  8026d4:	103ffa1e 	bne	r2,zero,8026c0 <__alt_mem_epcs_flash_controller_0+0xff7f96c0>
  8026d8:	98800117 	ldw	r2,4(r19)
  8026dc:	0146303a 	nor	r3,zero,r5
  8026e0:	1884703a 	and	r2,r3,r2
  8026e4:	98800115 	stw	r2,4(r19)
  8026e8:	294b883a 	add	r5,r5,r5
  8026ec:	117f2836 	bltu	r2,r5,802390 <__alt_mem_epcs_flash_controller_0+0xff7f9390>
  8026f0:	283f2726 	beq	r5,zero,802390 <__alt_mem_epcs_flash_controller_0+0xff7f9390>
  8026f4:	2886703a 	and	r3,r5,r2
  8026f8:	5809883a 	mov	r4,r11
  8026fc:	183ec31e 	bne	r3,zero,80220c <__alt_mem_epcs_flash_controller_0+0xff7f920c>
  802700:	294b883a 	add	r5,r5,r5
  802704:	2886703a 	and	r3,r5,r2
  802708:	21000104 	addi	r4,r4,4
  80270c:	183ffc26 	beq	r3,zero,802700 <__alt_mem_epcs_flash_controller_0+0xff7f9700>
  802710:	003ebe06 	br	80220c <__alt_mem_epcs_flash_controller_0+0xff7f920c>
  802714:	00c05504 	movi	r3,340
  802718:	18801236 	bltu	r3,r2,802764 <_malloc_r+0x6f8>
  80271c:	8804d3fa 	srli	r2,r17,15
  802720:	12001e04 	addi	r8,r2,120
  802724:	11c01dc4 	addi	r7,r2,119
  802728:	4209883a 	add	r4,r8,r8
  80272c:	003e6d06 	br	8020e4 <__alt_mem_epcs_flash_controller_0+0xff7f90e4>
  802730:	00c40004 	movi	r3,4096
  802734:	003f4606 	br	802450 <__alt_mem_epcs_flash_controller_0+0xff7f9450>
  802738:	00800044 	movi	r2,1
  80273c:	a0800115 	stw	r2,4(r20)
  802740:	003f7406 	br	802514 <__alt_mem_epcs_flash_controller_0+0xff7f9514>
  802744:	1805d0ba 	srai	r2,r3,2
  802748:	01c00044 	movi	r7,1
  80274c:	30c00117 	ldw	r3,4(r6)
  802750:	388e983a 	sll	r7,r7,r2
  802754:	2805883a 	mov	r2,r5
  802758:	38c6b03a 	or	r3,r7,r3
  80275c:	30c00115 	stw	r3,4(r6)
  802760:	003f9b06 	br	8025d0 <__alt_mem_epcs_flash_controller_0+0xff7f95d0>
  802764:	00c15504 	movi	r3,1364
  802768:	18801a36 	bltu	r3,r2,8027d4 <_malloc_r+0x768>
  80276c:	8804d4ba 	srli	r2,r17,18
  802770:	12001f44 	addi	r8,r2,125
  802774:	11c01f04 	addi	r7,r2,124
  802778:	4209883a 	add	r4,r8,r8
  80277c:	003e5906 	br	8020e4 <__alt_mem_epcs_flash_controller_0+0xff7f90e4>
  802780:	ad400404 	addi	r21,r21,16
  802784:	003f1706 	br	8023e4 <__alt_mem_epcs_flash_controller_0+0xff7f93e4>
  802788:	00c01504 	movi	r3,84
  80278c:	18802336 	bltu	r3,r2,80281c <_malloc_r+0x7b0>
  802790:	3804d33a 	srli	r2,r7,12
  802794:	11401bc4 	addi	r5,r2,111
  802798:	10c01b84 	addi	r3,r2,110
  80279c:	294b883a 	add	r5,r5,r5
  8027a0:	003f7b06 	br	802590 <__alt_mem_epcs_flash_controller_0+0xff7f9590>
  8027a4:	9c000217 	ldw	r16,8(r19)
  8027a8:	00bfff04 	movi	r2,-4
  8027ac:	80c00117 	ldw	r3,4(r16)
  8027b0:	1886703a 	and	r3,r3,r2
  8027b4:	003f5306 	br	802504 <__alt_mem_epcs_flash_controller_0+0xff7f9504>
  8027b8:	3083ffcc 	andi	r2,r6,4095
  8027bc:	103f181e 	bne	r2,zero,802420 <__alt_mem_epcs_flash_controller_0+0xff7f9420>
  8027c0:	99000217 	ldw	r4,8(r19)
  8027c4:	b545883a 	add	r2,r22,r21
  8027c8:	10800054 	ori	r2,r2,1
  8027cc:	20800115 	stw	r2,4(r4)
  8027d0:	003f3e06 	br	8024cc <__alt_mem_epcs_flash_controller_0+0xff7f94cc>
  8027d4:	01003f84 	movi	r4,254
  8027d8:	02001fc4 	movi	r8,127
  8027dc:	01c01f84 	movi	r7,126
  8027e0:	003e4006 	br	8020e4 <__alt_mem_epcs_flash_controller_0+0xff7f90e4>
  8027e4:	008020b4 	movhi	r2,130
  8027e8:	10b82f04 	addi	r2,r2,-8004
  8027ec:	15000015 	stw	r20,0(r2)
  8027f0:	003f1106 	br	802438 <__alt_mem_epcs_flash_controller_0+0xff7f9438>
  8027f4:	00800044 	movi	r2,1
  8027f8:	002b883a 	mov	r21,zero
  8027fc:	003f1f06 	br	80247c <__alt_mem_epcs_flash_controller_0+0xff7f947c>
  802800:	81400204 	addi	r5,r16,8
  802804:	9009883a 	mov	r4,r18
  802808:	0801bd40 	call	801bd4 <_free_r>
  80280c:	008020b4 	movhi	r2,130
  802810:	10b89f04 	addi	r2,r2,-7556
  802814:	10c00017 	ldw	r3,0(r2)
  802818:	003f2c06 	br	8024cc <__alt_mem_epcs_flash_controller_0+0xff7f94cc>
  80281c:	00c05504 	movi	r3,340
  802820:	18800536 	bltu	r3,r2,802838 <_malloc_r+0x7cc>
  802824:	3804d3fa 	srli	r2,r7,15
  802828:	11401e04 	addi	r5,r2,120
  80282c:	10c01dc4 	addi	r3,r2,119
  802830:	294b883a 	add	r5,r5,r5
  802834:	003f5606 	br	802590 <__alt_mem_epcs_flash_controller_0+0xff7f9590>
  802838:	00c15504 	movi	r3,1364
  80283c:	18800536 	bltu	r3,r2,802854 <_malloc_r+0x7e8>
  802840:	3804d4ba 	srli	r2,r7,18
  802844:	11401f44 	addi	r5,r2,125
  802848:	10c01f04 	addi	r3,r2,124
  80284c:	294b883a 	add	r5,r5,r5
  802850:	003f4f06 	br	802590 <__alt_mem_epcs_flash_controller_0+0xff7f9590>
  802854:	01403f84 	movi	r5,254
  802858:	00c01f84 	movi	r3,126
  80285c:	003f4c06 	br	802590 <__alt_mem_epcs_flash_controller_0+0xff7f9590>
  802860:	98800117 	ldw	r2,4(r19)
  802864:	003fa006 	br	8026e8 <__alt_mem_epcs_flash_controller_0+0xff7f96e8>
  802868:	8808d0fa 	srli	r4,r17,3
  80286c:	20800044 	addi	r2,r4,1
  802870:	1085883a 	add	r2,r2,r2
  802874:	003e9006 	br	8022b8 <__alt_mem_epcs_flash_controller_0+0xff7f92b8>

00802878 <memset>:
  802878:	20c000cc 	andi	r3,r4,3
  80287c:	2005883a 	mov	r2,r4
  802880:	18004426 	beq	r3,zero,802994 <memset+0x11c>
  802884:	31ffffc4 	addi	r7,r6,-1
  802888:	30004026 	beq	r6,zero,80298c <memset+0x114>
  80288c:	2813883a 	mov	r9,r5
  802890:	200d883a 	mov	r6,r4
  802894:	2007883a 	mov	r3,r4
  802898:	00000406 	br	8028ac <memset+0x34>
  80289c:	3a3fffc4 	addi	r8,r7,-1
  8028a0:	31800044 	addi	r6,r6,1
  8028a4:	38003926 	beq	r7,zero,80298c <memset+0x114>
  8028a8:	400f883a 	mov	r7,r8
  8028ac:	18c00044 	addi	r3,r3,1
  8028b0:	32400005 	stb	r9,0(r6)
  8028b4:	1a0000cc 	andi	r8,r3,3
  8028b8:	403ff81e 	bne	r8,zero,80289c <__alt_mem_epcs_flash_controller_0+0xff7f989c>
  8028bc:	010000c4 	movi	r4,3
  8028c0:	21c02d2e 	bgeu	r4,r7,802978 <memset+0x100>
  8028c4:	29003fcc 	andi	r4,r5,255
  8028c8:	200c923a 	slli	r6,r4,8
  8028cc:	3108b03a 	or	r4,r6,r4
  8028d0:	200c943a 	slli	r6,r4,16
  8028d4:	218cb03a 	or	r6,r4,r6
  8028d8:	010003c4 	movi	r4,15
  8028dc:	21c0182e 	bgeu	r4,r7,802940 <memset+0xc8>
  8028e0:	3b3ffc04 	addi	r12,r7,-16
  8028e4:	6018d13a 	srli	r12,r12,4
  8028e8:	1a000104 	addi	r8,r3,4
  8028ec:	1ac00204 	addi	r11,r3,8
  8028f0:	6008913a 	slli	r4,r12,4
  8028f4:	1a800304 	addi	r10,r3,12
  8028f8:	1813883a 	mov	r9,r3
  8028fc:	21000504 	addi	r4,r4,20
  802900:	1909883a 	add	r4,r3,r4
  802904:	49800015 	stw	r6,0(r9)
  802908:	41800015 	stw	r6,0(r8)
  80290c:	59800015 	stw	r6,0(r11)
  802910:	51800015 	stw	r6,0(r10)
  802914:	42000404 	addi	r8,r8,16
  802918:	4a400404 	addi	r9,r9,16
  80291c:	5ac00404 	addi	r11,r11,16
  802920:	52800404 	addi	r10,r10,16
  802924:	413ff71e 	bne	r8,r4,802904 <__alt_mem_epcs_flash_controller_0+0xff7f9904>
  802928:	63000044 	addi	r12,r12,1
  80292c:	6018913a 	slli	r12,r12,4
  802930:	39c003cc 	andi	r7,r7,15
  802934:	010000c4 	movi	r4,3
  802938:	1b07883a 	add	r3,r3,r12
  80293c:	21c00e2e 	bgeu	r4,r7,802978 <memset+0x100>
  802940:	1813883a 	mov	r9,r3
  802944:	3811883a 	mov	r8,r7
  802948:	010000c4 	movi	r4,3
  80294c:	49800015 	stw	r6,0(r9)
  802950:	423fff04 	addi	r8,r8,-4
  802954:	4a400104 	addi	r9,r9,4
  802958:	223ffc36 	bltu	r4,r8,80294c <__alt_mem_epcs_flash_controller_0+0xff7f994c>
  80295c:	393fff04 	addi	r4,r7,-4
  802960:	2008d0ba 	srli	r4,r4,2
  802964:	39c000cc 	andi	r7,r7,3
  802968:	21000044 	addi	r4,r4,1
  80296c:	2109883a 	add	r4,r4,r4
  802970:	2109883a 	add	r4,r4,r4
  802974:	1907883a 	add	r3,r3,r4
  802978:	38000526 	beq	r7,zero,802990 <memset+0x118>
  80297c:	19cf883a 	add	r7,r3,r7
  802980:	19400005 	stb	r5,0(r3)
  802984:	18c00044 	addi	r3,r3,1
  802988:	38fffd1e 	bne	r7,r3,802980 <__alt_mem_epcs_flash_controller_0+0xff7f9980>
  80298c:	f800283a 	ret
  802990:	f800283a 	ret
  802994:	2007883a 	mov	r3,r4
  802998:	300f883a 	mov	r7,r6
  80299c:	003fc706 	br	8028bc <__alt_mem_epcs_flash_controller_0+0xff7f98bc>

008029a0 <_printf_r>:
  8029a0:	defffd04 	addi	sp,sp,-12
  8029a4:	2805883a 	mov	r2,r5
  8029a8:	dfc00015 	stw	ra,0(sp)
  8029ac:	d9800115 	stw	r6,4(sp)
  8029b0:	d9c00215 	stw	r7,8(sp)
  8029b4:	21400217 	ldw	r5,8(r4)
  8029b8:	d9c00104 	addi	r7,sp,4
  8029bc:	100d883a 	mov	r6,r2
  8029c0:	0802d280 	call	802d28 <___vfprintf_internal_r>
  8029c4:	dfc00017 	ldw	ra,0(sp)
  8029c8:	dec00304 	addi	sp,sp,12
  8029cc:	f800283a 	ret

008029d0 <printf>:
  8029d0:	defffc04 	addi	sp,sp,-16
  8029d4:	dfc00015 	stw	ra,0(sp)
  8029d8:	d9400115 	stw	r5,4(sp)
  8029dc:	d9800215 	stw	r6,8(sp)
  8029e0:	d9c00315 	stw	r7,12(sp)
  8029e4:	008020b4 	movhi	r2,130
  8029e8:	10b82e04 	addi	r2,r2,-8008
  8029ec:	10800017 	ldw	r2,0(r2)
  8029f0:	200b883a 	mov	r5,r4
  8029f4:	d9800104 	addi	r6,sp,4
  8029f8:	11000217 	ldw	r4,8(r2)
  8029fc:	08050040 	call	805004 <__vfprintf_internal>
  802a00:	dfc00017 	ldw	ra,0(sp)
  802a04:	dec00404 	addi	sp,sp,16
  802a08:	f800283a 	ret

00802a0c <_putchar_r>:
  802a0c:	21800217 	ldw	r6,8(r4)
  802a10:	08087941 	jmpi	808794 <_putc_r>

00802a14 <putchar>:
  802a14:	008020b4 	movhi	r2,130
  802a18:	10b82e04 	addi	r2,r2,-8008
  802a1c:	200b883a 	mov	r5,r4
  802a20:	11000017 	ldw	r4,0(r2)
  802a24:	21800217 	ldw	r6,8(r4)
  802a28:	08087941 	jmpi	808794 <_putc_r>

00802a2c <_puts_r>:
  802a2c:	defff604 	addi	sp,sp,-40
  802a30:	dc000715 	stw	r16,28(sp)
  802a34:	2021883a 	mov	r16,r4
  802a38:	2809883a 	mov	r4,r5
  802a3c:	dc400815 	stw	r17,32(sp)
  802a40:	dfc00915 	stw	ra,36(sp)
  802a44:	2823883a 	mov	r17,r5
  802a48:	0802c900 	call	802c90 <strlen>
  802a4c:	10c00044 	addi	r3,r2,1
  802a50:	d8800115 	stw	r2,4(sp)
  802a54:	008020b4 	movhi	r2,130
  802a58:	10af8f04 	addi	r2,r2,-16836
  802a5c:	d8800215 	stw	r2,8(sp)
  802a60:	00800044 	movi	r2,1
  802a64:	d8800315 	stw	r2,12(sp)
  802a68:	00800084 	movi	r2,2
  802a6c:	dc400015 	stw	r17,0(sp)
  802a70:	d8c00615 	stw	r3,24(sp)
  802a74:	dec00415 	stw	sp,16(sp)
  802a78:	d8800515 	stw	r2,20(sp)
  802a7c:	80000226 	beq	r16,zero,802a88 <_puts_r+0x5c>
  802a80:	80800e17 	ldw	r2,56(r16)
  802a84:	10001426 	beq	r2,zero,802ad8 <_puts_r+0xac>
  802a88:	81400217 	ldw	r5,8(r16)
  802a8c:	2880030b 	ldhu	r2,12(r5)
  802a90:	10c8000c 	andi	r3,r2,8192
  802a94:	1800061e 	bne	r3,zero,802ab0 <_puts_r+0x84>
  802a98:	29001917 	ldw	r4,100(r5)
  802a9c:	00f7ffc4 	movi	r3,-8193
  802aa0:	10880014 	ori	r2,r2,8192
  802aa4:	20c6703a 	and	r3,r4,r3
  802aa8:	2880030d 	sth	r2,12(r5)
  802aac:	28c01915 	stw	r3,100(r5)
  802ab0:	d9800404 	addi	r6,sp,16
  802ab4:	8009883a 	mov	r4,r16
  802ab8:	0806b940 	call	806b94 <__sfvwrite_r>
  802abc:	1000091e 	bne	r2,zero,802ae4 <_puts_r+0xb8>
  802ac0:	00800284 	movi	r2,10
  802ac4:	dfc00917 	ldw	ra,36(sp)
  802ac8:	dc400817 	ldw	r17,32(sp)
  802acc:	dc000717 	ldw	r16,28(sp)
  802ad0:	dec00a04 	addi	sp,sp,40
  802ad4:	f800283a 	ret
  802ad8:	8009883a 	mov	r4,r16
  802adc:	0801a600 	call	801a60 <__sinit>
  802ae0:	003fe906 	br	802a88 <__alt_mem_epcs_flash_controller_0+0xff7f9a88>
  802ae4:	00bfffc4 	movi	r2,-1
  802ae8:	003ff606 	br	802ac4 <__alt_mem_epcs_flash_controller_0+0xff7f9ac4>

00802aec <puts>:
  802aec:	008020b4 	movhi	r2,130
  802af0:	10b82e04 	addi	r2,r2,-8008
  802af4:	200b883a 	mov	r5,r4
  802af8:	11000017 	ldw	r4,0(r2)
  802afc:	0802a2c1 	jmpi	802a2c <_puts_r>

00802b00 <_sbrk_r>:
  802b00:	defffd04 	addi	sp,sp,-12
  802b04:	dc000015 	stw	r16,0(sp)
  802b08:	040020b4 	movhi	r16,130
  802b0c:	dc400115 	stw	r17,4(sp)
  802b10:	84387b04 	addi	r16,r16,-7700
  802b14:	2023883a 	mov	r17,r4
  802b18:	2809883a 	mov	r4,r5
  802b1c:	dfc00215 	stw	ra,8(sp)
  802b20:	80000015 	stw	zero,0(r16)
  802b24:	080ebbc0 	call	80ebbc <sbrk>
  802b28:	00ffffc4 	movi	r3,-1
  802b2c:	10c00526 	beq	r2,r3,802b44 <_sbrk_r+0x44>
  802b30:	dfc00217 	ldw	ra,8(sp)
  802b34:	dc400117 	ldw	r17,4(sp)
  802b38:	dc000017 	ldw	r16,0(sp)
  802b3c:	dec00304 	addi	sp,sp,12
  802b40:	f800283a 	ret
  802b44:	80c00017 	ldw	r3,0(r16)
  802b48:	183ff926 	beq	r3,zero,802b30 <__alt_mem_epcs_flash_controller_0+0xff7f9b30>
  802b4c:	88c00015 	stw	r3,0(r17)
  802b50:	003ff706 	br	802b30 <__alt_mem_epcs_flash_controller_0+0xff7f9b30>

00802b54 <__sread>:
  802b54:	defffe04 	addi	sp,sp,-8
  802b58:	dc000015 	stw	r16,0(sp)
  802b5c:	2821883a 	mov	r16,r5
  802b60:	2940038f 	ldh	r5,14(r5)
  802b64:	dfc00115 	stw	ra,4(sp)
  802b68:	08088fc0 	call	8088fc <_read_r>
  802b6c:	10000716 	blt	r2,zero,802b8c <__sread+0x38>
  802b70:	80c01417 	ldw	r3,80(r16)
  802b74:	1887883a 	add	r3,r3,r2
  802b78:	80c01415 	stw	r3,80(r16)
  802b7c:	dfc00117 	ldw	ra,4(sp)
  802b80:	dc000017 	ldw	r16,0(sp)
  802b84:	dec00204 	addi	sp,sp,8
  802b88:	f800283a 	ret
  802b8c:	80c0030b 	ldhu	r3,12(r16)
  802b90:	18fbffcc 	andi	r3,r3,61439
  802b94:	80c0030d 	sth	r3,12(r16)
  802b98:	dfc00117 	ldw	ra,4(sp)
  802b9c:	dc000017 	ldw	r16,0(sp)
  802ba0:	dec00204 	addi	sp,sp,8
  802ba4:	f800283a 	ret

00802ba8 <__seofread>:
  802ba8:	0005883a 	mov	r2,zero
  802bac:	f800283a 	ret

00802bb0 <__swrite>:
  802bb0:	2880030b 	ldhu	r2,12(r5)
  802bb4:	defffb04 	addi	sp,sp,-20
  802bb8:	dcc00315 	stw	r19,12(sp)
  802bbc:	dc800215 	stw	r18,8(sp)
  802bc0:	dc400115 	stw	r17,4(sp)
  802bc4:	dc000015 	stw	r16,0(sp)
  802bc8:	dfc00415 	stw	ra,16(sp)
  802bcc:	10c0400c 	andi	r3,r2,256
  802bd0:	2821883a 	mov	r16,r5
  802bd4:	2023883a 	mov	r17,r4
  802bd8:	3025883a 	mov	r18,r6
  802bdc:	3827883a 	mov	r19,r7
  802be0:	18000526 	beq	r3,zero,802bf8 <__swrite+0x48>
  802be4:	2940038f 	ldh	r5,14(r5)
  802be8:	01c00084 	movi	r7,2
  802bec:	000d883a 	mov	r6,zero
  802bf0:	08071380 	call	807138 <_lseek_r>
  802bf4:	8080030b 	ldhu	r2,12(r16)
  802bf8:	8140038f 	ldh	r5,14(r16)
  802bfc:	10bbffcc 	andi	r2,r2,61439
  802c00:	980f883a 	mov	r7,r19
  802c04:	900d883a 	mov	r6,r18
  802c08:	8809883a 	mov	r4,r17
  802c0c:	8080030d 	sth	r2,12(r16)
  802c10:	dfc00417 	ldw	ra,16(sp)
  802c14:	dcc00317 	ldw	r19,12(sp)
  802c18:	dc800217 	ldw	r18,8(sp)
  802c1c:	dc400117 	ldw	r17,4(sp)
  802c20:	dc000017 	ldw	r16,0(sp)
  802c24:	dec00504 	addi	sp,sp,20
  802c28:	08050dc1 	jmpi	8050dc <_write_r>

00802c2c <__sseek>:
  802c2c:	defffe04 	addi	sp,sp,-8
  802c30:	dc000015 	stw	r16,0(sp)
  802c34:	2821883a 	mov	r16,r5
  802c38:	2940038f 	ldh	r5,14(r5)
  802c3c:	dfc00115 	stw	ra,4(sp)
  802c40:	08071380 	call	807138 <_lseek_r>
  802c44:	00ffffc4 	movi	r3,-1
  802c48:	10c00826 	beq	r2,r3,802c6c <__sseek+0x40>
  802c4c:	80c0030b 	ldhu	r3,12(r16)
  802c50:	80801415 	stw	r2,80(r16)
  802c54:	18c40014 	ori	r3,r3,4096
  802c58:	80c0030d 	sth	r3,12(r16)
  802c5c:	dfc00117 	ldw	ra,4(sp)
  802c60:	dc000017 	ldw	r16,0(sp)
  802c64:	dec00204 	addi	sp,sp,8
  802c68:	f800283a 	ret
  802c6c:	80c0030b 	ldhu	r3,12(r16)
  802c70:	18fbffcc 	andi	r3,r3,61439
  802c74:	80c0030d 	sth	r3,12(r16)
  802c78:	dfc00117 	ldw	ra,4(sp)
  802c7c:	dc000017 	ldw	r16,0(sp)
  802c80:	dec00204 	addi	sp,sp,8
  802c84:	f800283a 	ret

00802c88 <__sclose>:
  802c88:	2940038f 	ldh	r5,14(r5)
  802c8c:	08052901 	jmpi	805290 <_close_r>

00802c90 <strlen>:
  802c90:	208000cc 	andi	r2,r4,3
  802c94:	10002026 	beq	r2,zero,802d18 <strlen+0x88>
  802c98:	20800007 	ldb	r2,0(r4)
  802c9c:	10002026 	beq	r2,zero,802d20 <strlen+0x90>
  802ca0:	2005883a 	mov	r2,r4
  802ca4:	00000206 	br	802cb0 <strlen+0x20>
  802ca8:	10c00007 	ldb	r3,0(r2)
  802cac:	18001826 	beq	r3,zero,802d10 <strlen+0x80>
  802cb0:	10800044 	addi	r2,r2,1
  802cb4:	10c000cc 	andi	r3,r2,3
  802cb8:	183ffb1e 	bne	r3,zero,802ca8 <__alt_mem_epcs_flash_controller_0+0xff7f9ca8>
  802cbc:	10c00017 	ldw	r3,0(r2)
  802cc0:	01ffbff4 	movhi	r7,65279
  802cc4:	39ffbfc4 	addi	r7,r7,-257
  802cc8:	00ca303a 	nor	r5,zero,r3
  802ccc:	01a02074 	movhi	r6,32897
  802cd0:	19c7883a 	add	r3,r3,r7
  802cd4:	31a02004 	addi	r6,r6,-32640
  802cd8:	1946703a 	and	r3,r3,r5
  802cdc:	1986703a 	and	r3,r3,r6
  802ce0:	1800091e 	bne	r3,zero,802d08 <strlen+0x78>
  802ce4:	10800104 	addi	r2,r2,4
  802ce8:	10c00017 	ldw	r3,0(r2)
  802cec:	19cb883a 	add	r5,r3,r7
  802cf0:	00c6303a 	nor	r3,zero,r3
  802cf4:	28c6703a 	and	r3,r5,r3
  802cf8:	1986703a 	and	r3,r3,r6
  802cfc:	183ff926 	beq	r3,zero,802ce4 <__alt_mem_epcs_flash_controller_0+0xff7f9ce4>
  802d00:	00000106 	br	802d08 <strlen+0x78>
  802d04:	10800044 	addi	r2,r2,1
  802d08:	10c00007 	ldb	r3,0(r2)
  802d0c:	183ffd1e 	bne	r3,zero,802d04 <__alt_mem_epcs_flash_controller_0+0xff7f9d04>
  802d10:	1105c83a 	sub	r2,r2,r4
  802d14:	f800283a 	ret
  802d18:	2005883a 	mov	r2,r4
  802d1c:	003fe706 	br	802cbc <__alt_mem_epcs_flash_controller_0+0xff7f9cbc>
  802d20:	0005883a 	mov	r2,zero
  802d24:	f800283a 	ret

00802d28 <___vfprintf_internal_r>:
  802d28:	deffb804 	addi	sp,sp,-288
  802d2c:	dfc04715 	stw	ra,284(sp)
  802d30:	ddc04515 	stw	r23,276(sp)
  802d34:	dd404315 	stw	r21,268(sp)
  802d38:	d9002d15 	stw	r4,180(sp)
  802d3c:	282f883a 	mov	r23,r5
  802d40:	302b883a 	mov	r21,r6
  802d44:	d9c02e15 	stw	r7,184(sp)
  802d48:	df004615 	stw	fp,280(sp)
  802d4c:	dd804415 	stw	r22,272(sp)
  802d50:	dd004215 	stw	r20,264(sp)
  802d54:	dcc04115 	stw	r19,260(sp)
  802d58:	dc804015 	stw	r18,256(sp)
  802d5c:	dc403f15 	stw	r17,252(sp)
  802d60:	dc003e15 	stw	r16,248(sp)
  802d64:	08071080 	call	807108 <_localeconv_r>
  802d68:	10800017 	ldw	r2,0(r2)
  802d6c:	1009883a 	mov	r4,r2
  802d70:	d8803415 	stw	r2,208(sp)
  802d74:	0802c900 	call	802c90 <strlen>
  802d78:	d8803715 	stw	r2,220(sp)
  802d7c:	d8802d17 	ldw	r2,180(sp)
  802d80:	10000226 	beq	r2,zero,802d8c <___vfprintf_internal_r+0x64>
  802d84:	10800e17 	ldw	r2,56(r2)
  802d88:	1000fb26 	beq	r2,zero,803178 <___vfprintf_internal_r+0x450>
  802d8c:	b880030b 	ldhu	r2,12(r23)
  802d90:	10c8000c 	andi	r3,r2,8192
  802d94:	1800061e 	bne	r3,zero,802db0 <___vfprintf_internal_r+0x88>
  802d98:	b9001917 	ldw	r4,100(r23)
  802d9c:	00f7ffc4 	movi	r3,-8193
  802da0:	10880014 	ori	r2,r2,8192
  802da4:	20c6703a 	and	r3,r4,r3
  802da8:	b880030d 	sth	r2,12(r23)
  802dac:	b8c01915 	stw	r3,100(r23)
  802db0:	10c0020c 	andi	r3,r2,8
  802db4:	1800c326 	beq	r3,zero,8030c4 <___vfprintf_internal_r+0x39c>
  802db8:	b8c00417 	ldw	r3,16(r23)
  802dbc:	1800c126 	beq	r3,zero,8030c4 <___vfprintf_internal_r+0x39c>
  802dc0:	1080068c 	andi	r2,r2,26
  802dc4:	00c00284 	movi	r3,10
  802dc8:	10c0c626 	beq	r2,r3,8030e4 <___vfprintf_internal_r+0x3bc>
  802dcc:	d8c00404 	addi	r3,sp,16
  802dd0:	050020b4 	movhi	r20,130
  802dd4:	d9001e04 	addi	r4,sp,120
  802dd8:	a52fa084 	addi	r20,r20,-16766
  802ddc:	d8c01e15 	stw	r3,120(sp)
  802de0:	d8002015 	stw	zero,128(sp)
  802de4:	d8001f15 	stw	zero,124(sp)
  802de8:	d8003315 	stw	zero,204(sp)
  802dec:	d8003615 	stw	zero,216(sp)
  802df0:	d8003815 	stw	zero,224(sp)
  802df4:	1811883a 	mov	r8,r3
  802df8:	d8003915 	stw	zero,228(sp)
  802dfc:	d8003a15 	stw	zero,232(sp)
  802e00:	d8002f15 	stw	zero,188(sp)
  802e04:	d9002815 	stw	r4,160(sp)
  802e08:	a8800007 	ldb	r2,0(r21)
  802e0c:	10028b26 	beq	r2,zero,80383c <___vfprintf_internal_r+0xb14>
  802e10:	00c00944 	movi	r3,37
  802e14:	a823883a 	mov	r17,r21
  802e18:	10c0021e 	bne	r2,r3,802e24 <___vfprintf_internal_r+0xfc>
  802e1c:	00001406 	br	802e70 <___vfprintf_internal_r+0x148>
  802e20:	10c00326 	beq	r2,r3,802e30 <___vfprintf_internal_r+0x108>
  802e24:	8c400044 	addi	r17,r17,1
  802e28:	88800007 	ldb	r2,0(r17)
  802e2c:	103ffc1e 	bne	r2,zero,802e20 <__alt_mem_epcs_flash_controller_0+0xff7f9e20>
  802e30:	8d61c83a 	sub	r16,r17,r21
  802e34:	80000e26 	beq	r16,zero,802e70 <___vfprintf_internal_r+0x148>
  802e38:	d8c02017 	ldw	r3,128(sp)
  802e3c:	d8801f17 	ldw	r2,124(sp)
  802e40:	45400015 	stw	r21,0(r8)
  802e44:	1c07883a 	add	r3,r3,r16
  802e48:	10800044 	addi	r2,r2,1
  802e4c:	d8c02015 	stw	r3,128(sp)
  802e50:	44000115 	stw	r16,4(r8)
  802e54:	d8801f15 	stw	r2,124(sp)
  802e58:	00c001c4 	movi	r3,7
  802e5c:	1880a916 	blt	r3,r2,803104 <___vfprintf_internal_r+0x3dc>
  802e60:	42000204 	addi	r8,r8,8
  802e64:	d9402f17 	ldw	r5,188(sp)
  802e68:	2c0b883a 	add	r5,r5,r16
  802e6c:	d9402f15 	stw	r5,188(sp)
  802e70:	88800007 	ldb	r2,0(r17)
  802e74:	1000aa26 	beq	r2,zero,803120 <___vfprintf_internal_r+0x3f8>
  802e78:	8d400044 	addi	r21,r17,1
  802e7c:	8c400047 	ldb	r17,1(r17)
  802e80:	0021883a 	mov	r16,zero
  802e84:	00bfffc4 	movi	r2,-1
  802e88:	0025883a 	mov	r18,zero
  802e8c:	dc002905 	stb	r16,164(sp)
  802e90:	d8002785 	stb	zero,158(sp)
  802e94:	d8002b05 	stb	zero,172(sp)
  802e98:	d8802a15 	stw	r2,168(sp)
  802e9c:	d8003115 	stw	zero,196(sp)
  802ea0:	04c01604 	movi	r19,88
  802ea4:	05800244 	movi	r22,9
  802ea8:	9021883a 	mov	r16,r18
  802eac:	4039883a 	mov	fp,r8
  802eb0:	ad400044 	addi	r21,r21,1
  802eb4:	88bff804 	addi	r2,r17,-32
  802eb8:	98833236 	bltu	r19,r2,803b84 <___vfprintf_internal_r+0xe5c>
  802ebc:	100490ba 	slli	r2,r2,2
  802ec0:	00c02034 	movhi	r3,128
  802ec4:	18cbb504 	addi	r3,r3,11988
  802ec8:	10c5883a 	add	r2,r2,r3
  802ecc:	10800017 	ldw	r2,0(r2)
  802ed0:	1000683a 	jmp	r2
  802ed4:	00803a7c 	xorhi	r2,zero,233
  802ed8:	00803b84 	movi	r2,238
  802edc:	00803b84 	movi	r2,238
  802ee0:	00803a9c 	xori	r2,zero,234
  802ee4:	00803b84 	movi	r2,238
  802ee8:	00803b84 	movi	r2,238
  802eec:	00803b84 	movi	r2,238
  802ef0:	00803b84 	movi	r2,238
  802ef4:	00803b84 	movi	r2,238
  802ef8:	00803b84 	movi	r2,238
  802efc:	00803184 	movi	r2,198
  802f00:	0080398c 	andi	r2,zero,230
  802f04:	00803b84 	movi	r2,238
  802f08:	00803048 	cmpgei	r2,zero,193
  802f0c:	008031a8 	cmpgeui	r2,zero,198
  802f10:	00803b84 	movi	r2,238
  802f14:	008031f8 	rdprs	r2,zero,199
  802f18:	00803204 	movi	r2,200
  802f1c:	00803204 	movi	r2,200
  802f20:	00803204 	movi	r2,200
  802f24:	00803204 	movi	r2,200
  802f28:	00803204 	movi	r2,200
  802f2c:	00803204 	movi	r2,200
  802f30:	00803204 	movi	r2,200
  802f34:	00803204 	movi	r2,200
  802f38:	00803204 	movi	r2,200
  802f3c:	00803b84 	movi	r2,238
  802f40:	00803b84 	movi	r2,238
  802f44:	00803b84 	movi	r2,238
  802f48:	00803b84 	movi	r2,238
  802f4c:	00803b84 	movi	r2,238
  802f50:	00803b84 	movi	r2,238
  802f54:	00803b84 	movi	r2,238
  802f58:	00803b84 	movi	r2,238
  802f5c:	00803b84 	movi	r2,238
  802f60:	00803b84 	movi	r2,238
  802f64:	00803240 	call	80324 <OSCtxSw_SWITCH_PC+0x802e4>
  802f68:	00803308 	cmpgei	r2,zero,204
  802f6c:	00803b84 	movi	r2,238
  802f70:	00803308 	cmpgei	r2,zero,204
  802f74:	00803b84 	movi	r2,238
  802f78:	00803b84 	movi	r2,238
  802f7c:	00803b84 	movi	r2,238
  802f80:	00803b84 	movi	r2,238
  802f84:	008033b4 	movhi	r2,206
  802f88:	00803b84 	movi	r2,238
  802f8c:	00803b84 	movi	r2,238
  802f90:	008033c0 	call	8033c <OSCtxSw_SWITCH_PC+0x802fc>
  802f94:	00803b84 	movi	r2,238
  802f98:	00803b84 	movi	r2,238
  802f9c:	00803b84 	movi	r2,238
  802fa0:	00803b84 	movi	r2,238
  802fa4:	00803b84 	movi	r2,238
  802fa8:	00803844 	movi	r2,225
  802fac:	00803b84 	movi	r2,238
  802fb0:	00803b84 	movi	r2,238
  802fb4:	008038b0 	cmpltui	r2,zero,226
  802fb8:	00803b84 	movi	r2,238
  802fbc:	00803b84 	movi	r2,238
  802fc0:	00803b84 	movi	r2,238
  802fc4:	00803b84 	movi	r2,238
  802fc8:	00803b84 	movi	r2,238
  802fcc:	00803b84 	movi	r2,238
  802fd0:	00803b84 	movi	r2,238
  802fd4:	00803b84 	movi	r2,238
  802fd8:	00803b84 	movi	r2,238
  802fdc:	00803b84 	movi	r2,238
  802fe0:	00803b28 	cmpgeui	r2,zero,236
  802fe4:	00803aa8 	cmpgeui	r2,zero,234
  802fe8:	00803308 	cmpgei	r2,zero,204
  802fec:	00803308 	cmpgei	r2,zero,204
  802ff0:	00803308 	cmpgei	r2,zero,204
  802ff4:	00803ac8 	cmpgei	r2,zero,235
  802ff8:	00803aa8 	cmpgeui	r2,zero,234
  802ffc:	00803b84 	movi	r2,238
  803000:	00803b84 	movi	r2,238
  803004:	00803ad4 	movui	r2,235
  803008:	00803b84 	movi	r2,238
  80300c:	00803ae8 	cmpgeui	r2,zero,235
  803010:	0080396c 	andhi	r2,zero,229
  803014:	00803054 	movui	r2,193
  803018:	008039a4 	muli	r2,zero,230
  80301c:	00803b84 	movi	r2,238
  803020:	008039b0 	cmpltui	r2,zero,230
  803024:	00803b84 	movi	r2,238
  803028:	00803a14 	movui	r2,232
  80302c:	00803b84 	movi	r2,238
  803030:	00803b84 	movi	r2,238
  803034:	00803a34 	movhi	r2,232
  803038:	d8c03117 	ldw	r3,196(sp)
  80303c:	d8802e15 	stw	r2,184(sp)
  803040:	00c7c83a 	sub	r3,zero,r3
  803044:	d8c03115 	stw	r3,196(sp)
  803048:	84000114 	ori	r16,r16,4
  80304c:	ac400007 	ldb	r17,0(r21)
  803050:	003f9706 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  803054:	00800c04 	movi	r2,48
  803058:	d8802705 	stb	r2,156(sp)
  80305c:	00801e04 	movi	r2,120
  803060:	d8802745 	stb	r2,157(sp)
  803064:	d9002a17 	ldw	r4,168(sp)
  803068:	d8802e17 	ldw	r2,184(sp)
  80306c:	d8002785 	stb	zero,158(sp)
  803070:	e011883a 	mov	r8,fp
  803074:	10c00104 	addi	r3,r2,4
  803078:	14c00017 	ldw	r19,0(r2)
  80307c:	002d883a 	mov	r22,zero
  803080:	80800094 	ori	r2,r16,2
  803084:	2002ca16 	blt	r4,zero,803bb0 <___vfprintf_internal_r+0xe88>
  803088:	00bfdfc4 	movi	r2,-129
  80308c:	80a4703a 	and	r18,r16,r2
  803090:	d8c02e15 	stw	r3,184(sp)
  803094:	94800094 	ori	r18,r18,2
  803098:	9802b41e 	bne	r19,zero,803b6c <___vfprintf_internal_r+0xe44>
  80309c:	014020b4 	movhi	r5,130
  8030a0:	296f9904 	addi	r5,r5,-16796
  8030a4:	d9403915 	stw	r5,228(sp)
  8030a8:	04401e04 	movi	r17,120
  8030ac:	d8802a17 	ldw	r2,168(sp)
  8030b0:	0039883a 	mov	fp,zero
  8030b4:	1001fa26 	beq	r2,zero,8038a0 <___vfprintf_internal_r+0xb78>
  8030b8:	0027883a 	mov	r19,zero
  8030bc:	002d883a 	mov	r22,zero
  8030c0:	00021906 	br	803928 <___vfprintf_internal_r+0xc00>
  8030c4:	d9002d17 	ldw	r4,180(sp)
  8030c8:	b80b883a 	mov	r5,r23
  8030cc:	080513c0 	call	80513c <__swsetup_r>
  8030d0:	1005dc1e 	bne	r2,zero,804844 <___vfprintf_internal_r+0x1b1c>
  8030d4:	b880030b 	ldhu	r2,12(r23)
  8030d8:	00c00284 	movi	r3,10
  8030dc:	1080068c 	andi	r2,r2,26
  8030e0:	10ff3a1e 	bne	r2,r3,802dcc <__alt_mem_epcs_flash_controller_0+0xff7f9dcc>
  8030e4:	b880038f 	ldh	r2,14(r23)
  8030e8:	103f3816 	blt	r2,zero,802dcc <__alt_mem_epcs_flash_controller_0+0xff7f9dcc>
  8030ec:	d9c02e17 	ldw	r7,184(sp)
  8030f0:	d9002d17 	ldw	r4,180(sp)
  8030f4:	a80d883a 	mov	r6,r21
  8030f8:	b80b883a 	mov	r5,r23
  8030fc:	08050200 	call	805020 <__sbprintf>
  803100:	00001106 	br	803148 <___vfprintf_internal_r+0x420>
  803104:	d9002d17 	ldw	r4,180(sp)
  803108:	d9801e04 	addi	r6,sp,120
  80310c:	b80b883a 	mov	r5,r23
  803110:	080910c0 	call	80910c <__sprint_r>
  803114:	1000081e 	bne	r2,zero,803138 <___vfprintf_internal_r+0x410>
  803118:	da000404 	addi	r8,sp,16
  80311c:	003f5106 	br	802e64 <__alt_mem_epcs_flash_controller_0+0xff7f9e64>
  803120:	d8802017 	ldw	r2,128(sp)
  803124:	10000426 	beq	r2,zero,803138 <___vfprintf_internal_r+0x410>
  803128:	d9002d17 	ldw	r4,180(sp)
  80312c:	d9801e04 	addi	r6,sp,120
  803130:	b80b883a 	mov	r5,r23
  803134:	080910c0 	call	80910c <__sprint_r>
  803138:	b880030b 	ldhu	r2,12(r23)
  80313c:	1080100c 	andi	r2,r2,64
  803140:	1005c01e 	bne	r2,zero,804844 <___vfprintf_internal_r+0x1b1c>
  803144:	d8802f17 	ldw	r2,188(sp)
  803148:	dfc04717 	ldw	ra,284(sp)
  80314c:	df004617 	ldw	fp,280(sp)
  803150:	ddc04517 	ldw	r23,276(sp)
  803154:	dd804417 	ldw	r22,272(sp)
  803158:	dd404317 	ldw	r21,268(sp)
  80315c:	dd004217 	ldw	r20,264(sp)
  803160:	dcc04117 	ldw	r19,260(sp)
  803164:	dc804017 	ldw	r18,256(sp)
  803168:	dc403f17 	ldw	r17,252(sp)
  80316c:	dc003e17 	ldw	r16,248(sp)
  803170:	dec04804 	addi	sp,sp,288
  803174:	f800283a 	ret
  803178:	d9002d17 	ldw	r4,180(sp)
  80317c:	0801a600 	call	801a60 <__sinit>
  803180:	003f0206 	br	802d8c <__alt_mem_epcs_flash_controller_0+0xff7f9d8c>
  803184:	d9002e17 	ldw	r4,184(sp)
  803188:	d9402e17 	ldw	r5,184(sp)
  80318c:	21000017 	ldw	r4,0(r4)
  803190:	28800104 	addi	r2,r5,4
  803194:	d9003115 	stw	r4,196(sp)
  803198:	203fa716 	blt	r4,zero,803038 <__alt_mem_epcs_flash_controller_0+0xff7fa038>
  80319c:	d8802e15 	stw	r2,184(sp)
  8031a0:	ac400007 	ldb	r17,0(r21)
  8031a4:	003f4206 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  8031a8:	ac400007 	ldb	r17,0(r21)
  8031ac:	01000a84 	movi	r4,42
  8031b0:	a8c00044 	addi	r3,r21,1
  8031b4:	89075826 	beq	r17,r4,804f18 <___vfprintf_internal_r+0x21f0>
  8031b8:	8cbff404 	addi	r18,r17,-48
  8031bc:	b486ae36 	bltu	r22,r18,804c78 <___vfprintf_internal_r+0x1f50>
  8031c0:	0009883a 	mov	r4,zero
  8031c4:	1823883a 	mov	r17,r3
  8031c8:	01400284 	movi	r5,10
  8031cc:	080b99c0 	call	80b99c <__mulsi3>
  8031d0:	88c00007 	ldb	r3,0(r17)
  8031d4:	1489883a 	add	r4,r2,r18
  8031d8:	8d400044 	addi	r21,r17,1
  8031dc:	1cbff404 	addi	r18,r3,-48
  8031e0:	a823883a 	mov	r17,r21
  8031e4:	b4bff82e 	bgeu	r22,r18,8031c8 <__alt_mem_epcs_flash_controller_0+0xff7fa1c8>
  8031e8:	1823883a 	mov	r17,r3
  8031ec:	2005f616 	blt	r4,zero,8049c8 <___vfprintf_internal_r+0x1ca0>
  8031f0:	d9002a15 	stw	r4,168(sp)
  8031f4:	003f2f06 	br	802eb4 <__alt_mem_epcs_flash_controller_0+0xff7f9eb4>
  8031f8:	84002014 	ori	r16,r16,128
  8031fc:	ac400007 	ldb	r17,0(r21)
  803200:	003f2b06 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  803204:	8cbff404 	addi	r18,r17,-48
  803208:	d8003115 	stw	zero,196(sp)
  80320c:	0009883a 	mov	r4,zero
  803210:	a823883a 	mov	r17,r21
  803214:	01400284 	movi	r5,10
  803218:	080b99c0 	call	80b99c <__mulsi3>
  80321c:	88c00007 	ldb	r3,0(r17)
  803220:	9089883a 	add	r4,r18,r2
  803224:	ad400044 	addi	r21,r21,1
  803228:	1cbff404 	addi	r18,r3,-48
  80322c:	a823883a 	mov	r17,r21
  803230:	b4bff82e 	bgeu	r22,r18,803214 <__alt_mem_epcs_flash_controller_0+0xff7fa214>
  803234:	1823883a 	mov	r17,r3
  803238:	d9003115 	stw	r4,196(sp)
  80323c:	003f1d06 	br	802eb4 <__alt_mem_epcs_flash_controller_0+0xff7f9eb4>
  803240:	8025883a 	mov	r18,r16
  803244:	dc002903 	ldbu	r16,164(sp)
  803248:	e011883a 	mov	r8,fp
  80324c:	84003fcc 	andi	r16,r16,255
  803250:	8007531e 	bne	r16,zero,804fa0 <___vfprintf_internal_r+0x2278>
  803254:	94800414 	ori	r18,r18,16
  803258:	9080080c 	andi	r2,r18,32
  80325c:	1003a326 	beq	r2,zero,8040ec <___vfprintf_internal_r+0x13c4>
  803260:	d9002e17 	ldw	r4,184(sp)
  803264:	20800117 	ldw	r2,4(r4)
  803268:	24c00017 	ldw	r19,0(r4)
  80326c:	21000204 	addi	r4,r4,8
  803270:	d9002e15 	stw	r4,184(sp)
  803274:	102d883a 	mov	r22,r2
  803278:	10047316 	blt	r2,zero,804448 <___vfprintf_internal_r+0x1720>
  80327c:	d9002a17 	ldw	r4,168(sp)
  803280:	df002783 	ldbu	fp,158(sp)
  803284:	2003e416 	blt	r4,zero,804218 <___vfprintf_internal_r+0x14f0>
  803288:	00ffdfc4 	movi	r3,-129
  80328c:	9d84b03a 	or	r2,r19,r22
  803290:	90e4703a 	and	r18,r18,r3
  803294:	10018026 	beq	r2,zero,803898 <___vfprintf_internal_r+0xb70>
  803298:	b003ab26 	beq	r22,zero,804148 <___vfprintf_internal_r+0x1420>
  80329c:	dc402915 	stw	r17,164(sp)
  8032a0:	dc001e04 	addi	r16,sp,120
  8032a4:	b023883a 	mov	r17,r22
  8032a8:	402d883a 	mov	r22,r8
  8032ac:	9809883a 	mov	r4,r19
  8032b0:	880b883a 	mov	r5,r17
  8032b4:	01800284 	movi	r6,10
  8032b8:	000f883a 	mov	r7,zero
  8032bc:	080b3d80 	call	80b3d8 <__umoddi3>
  8032c0:	10800c04 	addi	r2,r2,48
  8032c4:	843fffc4 	addi	r16,r16,-1
  8032c8:	9809883a 	mov	r4,r19
  8032cc:	880b883a 	mov	r5,r17
  8032d0:	80800005 	stb	r2,0(r16)
  8032d4:	01800284 	movi	r6,10
  8032d8:	000f883a 	mov	r7,zero
  8032dc:	080addc0 	call	80addc <__udivdi3>
  8032e0:	1027883a 	mov	r19,r2
  8032e4:	10c4b03a 	or	r2,r2,r3
  8032e8:	1823883a 	mov	r17,r3
  8032ec:	103fef1e 	bne	r2,zero,8032ac <__alt_mem_epcs_flash_controller_0+0xff7fa2ac>
  8032f0:	d8c02817 	ldw	r3,160(sp)
  8032f4:	dc402917 	ldw	r17,164(sp)
  8032f8:	b011883a 	mov	r8,r22
  8032fc:	1c07c83a 	sub	r3,r3,r16
  803300:	d8c02b15 	stw	r3,172(sp)
  803304:	00005f06 	br	803484 <___vfprintf_internal_r+0x75c>
  803308:	8025883a 	mov	r18,r16
  80330c:	dc002903 	ldbu	r16,164(sp)
  803310:	e011883a 	mov	r8,fp
  803314:	84003fcc 	andi	r16,r16,255
  803318:	80071e1e 	bne	r16,zero,804f94 <___vfprintf_internal_r+0x226c>
  80331c:	9080020c 	andi	r2,r18,8
  803320:	1004af26 	beq	r2,zero,8045e0 <___vfprintf_internal_r+0x18b8>
  803324:	d9002e17 	ldw	r4,184(sp)
  803328:	d9402e17 	ldw	r5,184(sp)
  80332c:	d8802e17 	ldw	r2,184(sp)
  803330:	21000017 	ldw	r4,0(r4)
  803334:	29400117 	ldw	r5,4(r5)
  803338:	10800204 	addi	r2,r2,8
  80333c:	d9003615 	stw	r4,216(sp)
  803340:	d9403815 	stw	r5,224(sp)
  803344:	d8802e15 	stw	r2,184(sp)
  803348:	d9003617 	ldw	r4,216(sp)
  80334c:	d9403817 	ldw	r5,224(sp)
  803350:	da003d15 	stw	r8,244(sp)
  803354:	04000044 	movi	r16,1
  803358:	0808ec00 	call	808ec0 <__fpclassifyd>
  80335c:	da003d17 	ldw	r8,244(sp)
  803360:	1404441e 	bne	r2,r16,804474 <___vfprintf_internal_r+0x174c>
  803364:	d9003617 	ldw	r4,216(sp)
  803368:	d9403817 	ldw	r5,224(sp)
  80336c:	000d883a 	mov	r6,zero
  803370:	000f883a 	mov	r7,zero
  803374:	080cda40 	call	80cda4 <__ledf2>
  803378:	da003d17 	ldw	r8,244(sp)
  80337c:	1005e316 	blt	r2,zero,804b0c <___vfprintf_internal_r+0x1de4>
  803380:	df002783 	ldbu	fp,158(sp)
  803384:	008011c4 	movi	r2,71
  803388:	1445580e 	bge	r2,r17,8048ec <___vfprintf_internal_r+0x1bc4>
  80338c:	040020b4 	movhi	r16,130
  803390:	842f9104 	addi	r16,r16,-16828
  803394:	00c000c4 	movi	r3,3
  803398:	00bfdfc4 	movi	r2,-129
  80339c:	d8c02915 	stw	r3,164(sp)
  8033a0:	90a4703a 	and	r18,r18,r2
  8033a4:	d8c02b15 	stw	r3,172(sp)
  8033a8:	d8002a15 	stw	zero,168(sp)
  8033ac:	d8003215 	stw	zero,200(sp)
  8033b0:	00003a06 	br	80349c <___vfprintf_internal_r+0x774>
  8033b4:	84000214 	ori	r16,r16,8
  8033b8:	ac400007 	ldb	r17,0(r21)
  8033bc:	003ebc06 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  8033c0:	8025883a 	mov	r18,r16
  8033c4:	dc002903 	ldbu	r16,164(sp)
  8033c8:	e011883a 	mov	r8,fp
  8033cc:	84003fcc 	andi	r16,r16,255
  8033d0:	8007001e 	bne	r16,zero,804fd4 <___vfprintf_internal_r+0x22ac>
  8033d4:	94800414 	ori	r18,r18,16
  8033d8:	9080080c 	andi	r2,r18,32
  8033dc:	1002fa26 	beq	r2,zero,803fc8 <___vfprintf_internal_r+0x12a0>
  8033e0:	d9002e17 	ldw	r4,184(sp)
  8033e4:	d9402a17 	ldw	r5,168(sp)
  8033e8:	d8002785 	stb	zero,158(sp)
  8033ec:	20800204 	addi	r2,r4,8
  8033f0:	24c00017 	ldw	r19,0(r4)
  8033f4:	25800117 	ldw	r22,4(r4)
  8033f8:	2804b116 	blt	r5,zero,8046c0 <___vfprintf_internal_r+0x1998>
  8033fc:	013fdfc4 	movi	r4,-129
  803400:	9d86b03a 	or	r3,r19,r22
  803404:	d8802e15 	stw	r2,184(sp)
  803408:	9124703a 	and	r18,r18,r4
  80340c:	1802fb1e 	bne	r3,zero,803ffc <___vfprintf_internal_r+0x12d4>
  803410:	d8c02a17 	ldw	r3,168(sp)
  803414:	0039883a 	mov	fp,zero
  803418:	1805e526 	beq	r3,zero,804bb0 <___vfprintf_internal_r+0x1e88>
  80341c:	0027883a 	mov	r19,zero
  803420:	002d883a 	mov	r22,zero
  803424:	dc001e04 	addi	r16,sp,120
  803428:	9806d0fa 	srli	r3,r19,3
  80342c:	b008977a 	slli	r4,r22,29
  803430:	b02cd0fa 	srli	r22,r22,3
  803434:	9cc001cc 	andi	r19,r19,7
  803438:	98800c04 	addi	r2,r19,48
  80343c:	843fffc4 	addi	r16,r16,-1
  803440:	20e6b03a 	or	r19,r4,r3
  803444:	80800005 	stb	r2,0(r16)
  803448:	9d86b03a 	or	r3,r19,r22
  80344c:	183ff61e 	bne	r3,zero,803428 <__alt_mem_epcs_flash_controller_0+0xff7fa428>
  803450:	90c0004c 	andi	r3,r18,1
  803454:	18014126 	beq	r3,zero,80395c <___vfprintf_internal_r+0xc34>
  803458:	10803fcc 	andi	r2,r2,255
  80345c:	1080201c 	xori	r2,r2,128
  803460:	10bfe004 	addi	r2,r2,-128
  803464:	00c00c04 	movi	r3,48
  803468:	10c13c26 	beq	r2,r3,80395c <___vfprintf_internal_r+0xc34>
  80346c:	80ffffc5 	stb	r3,-1(r16)
  803470:	d8c02817 	ldw	r3,160(sp)
  803474:	80bfffc4 	addi	r2,r16,-1
  803478:	1021883a 	mov	r16,r2
  80347c:	1887c83a 	sub	r3,r3,r2
  803480:	d8c02b15 	stw	r3,172(sp)
  803484:	d8802b17 	ldw	r2,172(sp)
  803488:	d9002a17 	ldw	r4,168(sp)
  80348c:	1100010e 	bge	r2,r4,803494 <___vfprintf_internal_r+0x76c>
  803490:	2005883a 	mov	r2,r4
  803494:	d8802915 	stw	r2,164(sp)
  803498:	d8003215 	stw	zero,200(sp)
  80349c:	e7003fcc 	andi	fp,fp,255
  8034a0:	e700201c 	xori	fp,fp,128
  8034a4:	e73fe004 	addi	fp,fp,-128
  8034a8:	e0000326 	beq	fp,zero,8034b8 <___vfprintf_internal_r+0x790>
  8034ac:	d8c02917 	ldw	r3,164(sp)
  8034b0:	18c00044 	addi	r3,r3,1
  8034b4:	d8c02915 	stw	r3,164(sp)
  8034b8:	90c0008c 	andi	r3,r18,2
  8034bc:	d8c02c15 	stw	r3,176(sp)
  8034c0:	18000326 	beq	r3,zero,8034d0 <___vfprintf_internal_r+0x7a8>
  8034c4:	d8c02917 	ldw	r3,164(sp)
  8034c8:	18c00084 	addi	r3,r3,2
  8034cc:	d8c02915 	stw	r3,164(sp)
  8034d0:	90c0210c 	andi	r3,r18,132
  8034d4:	d8c03015 	stw	r3,192(sp)
  8034d8:	1801c51e 	bne	r3,zero,803bf0 <___vfprintf_internal_r+0xec8>
  8034dc:	d9003117 	ldw	r4,196(sp)
  8034e0:	d8c02917 	ldw	r3,164(sp)
  8034e4:	20e7c83a 	sub	r19,r4,r3
  8034e8:	04c1c10e 	bge	zero,r19,803bf0 <___vfprintf_internal_r+0xec8>
  8034ec:	02400404 	movi	r9,16
  8034f0:	d8c02017 	ldw	r3,128(sp)
  8034f4:	d8801f17 	ldw	r2,124(sp)
  8034f8:	4cc52f0e 	bge	r9,r19,8049b8 <___vfprintf_internal_r+0x1c90>
  8034fc:	014020b4 	movhi	r5,130
  803500:	296fa484 	addi	r5,r5,-16750
  803504:	dc403b15 	stw	r17,236(sp)
  803508:	d9403515 	stw	r5,212(sp)
  80350c:	9823883a 	mov	r17,r19
  803510:	482d883a 	mov	r22,r9
  803514:	9027883a 	mov	r19,r18
  803518:	070001c4 	movi	fp,7
  80351c:	8025883a 	mov	r18,r16
  803520:	dc002d17 	ldw	r16,180(sp)
  803524:	00000306 	br	803534 <___vfprintf_internal_r+0x80c>
  803528:	8c7ffc04 	addi	r17,r17,-16
  80352c:	42000204 	addi	r8,r8,8
  803530:	b440130e 	bge	r22,r17,803580 <___vfprintf_internal_r+0x858>
  803534:	010020b4 	movhi	r4,130
  803538:	18c00404 	addi	r3,r3,16
  80353c:	10800044 	addi	r2,r2,1
  803540:	212fa484 	addi	r4,r4,-16750
  803544:	41000015 	stw	r4,0(r8)
  803548:	45800115 	stw	r22,4(r8)
  80354c:	d8c02015 	stw	r3,128(sp)
  803550:	d8801f15 	stw	r2,124(sp)
  803554:	e0bff40e 	bge	fp,r2,803528 <__alt_mem_epcs_flash_controller_0+0xff7fa528>
  803558:	d9801e04 	addi	r6,sp,120
  80355c:	b80b883a 	mov	r5,r23
  803560:	8009883a 	mov	r4,r16
  803564:	080910c0 	call	80910c <__sprint_r>
  803568:	103ef31e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  80356c:	8c7ffc04 	addi	r17,r17,-16
  803570:	d8c02017 	ldw	r3,128(sp)
  803574:	d8801f17 	ldw	r2,124(sp)
  803578:	da000404 	addi	r8,sp,16
  80357c:	b47fed16 	blt	r22,r17,803534 <__alt_mem_epcs_flash_controller_0+0xff7fa534>
  803580:	9021883a 	mov	r16,r18
  803584:	9825883a 	mov	r18,r19
  803588:	8827883a 	mov	r19,r17
  80358c:	dc403b17 	ldw	r17,236(sp)
  803590:	d9403517 	ldw	r5,212(sp)
  803594:	98c7883a 	add	r3,r19,r3
  803598:	10800044 	addi	r2,r2,1
  80359c:	41400015 	stw	r5,0(r8)
  8035a0:	44c00115 	stw	r19,4(r8)
  8035a4:	d8c02015 	stw	r3,128(sp)
  8035a8:	d8801f15 	stw	r2,124(sp)
  8035ac:	010001c4 	movi	r4,7
  8035b0:	2082c516 	blt	r4,r2,8040c8 <___vfprintf_internal_r+0x13a0>
  8035b4:	df002787 	ldb	fp,158(sp)
  8035b8:	42000204 	addi	r8,r8,8
  8035bc:	e0000c26 	beq	fp,zero,8035f0 <___vfprintf_internal_r+0x8c8>
  8035c0:	d8801f17 	ldw	r2,124(sp)
  8035c4:	d9002784 	addi	r4,sp,158
  8035c8:	18c00044 	addi	r3,r3,1
  8035cc:	10800044 	addi	r2,r2,1
  8035d0:	41000015 	stw	r4,0(r8)
  8035d4:	01000044 	movi	r4,1
  8035d8:	41000115 	stw	r4,4(r8)
  8035dc:	d8c02015 	stw	r3,128(sp)
  8035e0:	d8801f15 	stw	r2,124(sp)
  8035e4:	010001c4 	movi	r4,7
  8035e8:	20825e16 	blt	r4,r2,803f64 <___vfprintf_internal_r+0x123c>
  8035ec:	42000204 	addi	r8,r8,8
  8035f0:	d8802c17 	ldw	r2,176(sp)
  8035f4:	10000c26 	beq	r2,zero,803628 <___vfprintf_internal_r+0x900>
  8035f8:	d8801f17 	ldw	r2,124(sp)
  8035fc:	d9002704 	addi	r4,sp,156
  803600:	18c00084 	addi	r3,r3,2
  803604:	10800044 	addi	r2,r2,1
  803608:	41000015 	stw	r4,0(r8)
  80360c:	01000084 	movi	r4,2
  803610:	41000115 	stw	r4,4(r8)
  803614:	d8c02015 	stw	r3,128(sp)
  803618:	d8801f15 	stw	r2,124(sp)
  80361c:	010001c4 	movi	r4,7
  803620:	20825816 	blt	r4,r2,803f84 <___vfprintf_internal_r+0x125c>
  803624:	42000204 	addi	r8,r8,8
  803628:	d9003017 	ldw	r4,192(sp)
  80362c:	00802004 	movi	r2,128
  803630:	2081bb26 	beq	r4,r2,803d20 <___vfprintf_internal_r+0xff8>
  803634:	d9402a17 	ldw	r5,168(sp)
  803638:	d8802b17 	ldw	r2,172(sp)
  80363c:	28adc83a 	sub	r22,r5,r2
  803640:	0580310e 	bge	zero,r22,803708 <___vfprintf_internal_r+0x9e0>
  803644:	07000404 	movi	fp,16
  803648:	d8801f17 	ldw	r2,124(sp)
  80364c:	e584360e 	bge	fp,r22,804728 <___vfprintf_internal_r+0x1a00>
  803650:	014020b4 	movhi	r5,130
  803654:	296fa084 	addi	r5,r5,-16766
  803658:	dc402a15 	stw	r17,168(sp)
  80365c:	d9402c15 	stw	r5,176(sp)
  803660:	b023883a 	mov	r17,r22
  803664:	04c001c4 	movi	r19,7
  803668:	a82d883a 	mov	r22,r21
  80366c:	902b883a 	mov	r21,r18
  803670:	8025883a 	mov	r18,r16
  803674:	dc002d17 	ldw	r16,180(sp)
  803678:	00000306 	br	803688 <___vfprintf_internal_r+0x960>
  80367c:	8c7ffc04 	addi	r17,r17,-16
  803680:	42000204 	addi	r8,r8,8
  803684:	e440110e 	bge	fp,r17,8036cc <___vfprintf_internal_r+0x9a4>
  803688:	18c00404 	addi	r3,r3,16
  80368c:	10800044 	addi	r2,r2,1
  803690:	45000015 	stw	r20,0(r8)
  803694:	47000115 	stw	fp,4(r8)
  803698:	d8c02015 	stw	r3,128(sp)
  80369c:	d8801f15 	stw	r2,124(sp)
  8036a0:	98bff60e 	bge	r19,r2,80367c <__alt_mem_epcs_flash_controller_0+0xff7fa67c>
  8036a4:	d9801e04 	addi	r6,sp,120
  8036a8:	b80b883a 	mov	r5,r23
  8036ac:	8009883a 	mov	r4,r16
  8036b0:	080910c0 	call	80910c <__sprint_r>
  8036b4:	103ea01e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8036b8:	8c7ffc04 	addi	r17,r17,-16
  8036bc:	d8c02017 	ldw	r3,128(sp)
  8036c0:	d8801f17 	ldw	r2,124(sp)
  8036c4:	da000404 	addi	r8,sp,16
  8036c8:	e47fef16 	blt	fp,r17,803688 <__alt_mem_epcs_flash_controller_0+0xff7fa688>
  8036cc:	9021883a 	mov	r16,r18
  8036d0:	a825883a 	mov	r18,r21
  8036d4:	b02b883a 	mov	r21,r22
  8036d8:	882d883a 	mov	r22,r17
  8036dc:	dc402a17 	ldw	r17,168(sp)
  8036e0:	d9002c17 	ldw	r4,176(sp)
  8036e4:	1d87883a 	add	r3,r3,r22
  8036e8:	10800044 	addi	r2,r2,1
  8036ec:	41000015 	stw	r4,0(r8)
  8036f0:	45800115 	stw	r22,4(r8)
  8036f4:	d8c02015 	stw	r3,128(sp)
  8036f8:	d8801f15 	stw	r2,124(sp)
  8036fc:	010001c4 	movi	r4,7
  803700:	20821016 	blt	r4,r2,803f44 <___vfprintf_internal_r+0x121c>
  803704:	42000204 	addi	r8,r8,8
  803708:	9080400c 	andi	r2,r18,256
  80370c:	10013a1e 	bne	r2,zero,803bf8 <___vfprintf_internal_r+0xed0>
  803710:	d9402b17 	ldw	r5,172(sp)
  803714:	d8801f17 	ldw	r2,124(sp)
  803718:	44000015 	stw	r16,0(r8)
  80371c:	1947883a 	add	r3,r3,r5
  803720:	10800044 	addi	r2,r2,1
  803724:	41400115 	stw	r5,4(r8)
  803728:	d8c02015 	stw	r3,128(sp)
  80372c:	d8801f15 	stw	r2,124(sp)
  803730:	010001c4 	movi	r4,7
  803734:	2081f516 	blt	r4,r2,803f0c <___vfprintf_internal_r+0x11e4>
  803738:	42000204 	addi	r8,r8,8
  80373c:	9480010c 	andi	r18,r18,4
  803740:	90003226 	beq	r18,zero,80380c <___vfprintf_internal_r+0xae4>
  803744:	d9403117 	ldw	r5,196(sp)
  803748:	d8802917 	ldw	r2,164(sp)
  80374c:	28a1c83a 	sub	r16,r5,r2
  803750:	04002e0e 	bge	zero,r16,80380c <___vfprintf_internal_r+0xae4>
  803754:	04400404 	movi	r17,16
  803758:	d8801f17 	ldw	r2,124(sp)
  80375c:	8c04c40e 	bge	r17,r16,804a70 <___vfprintf_internal_r+0x1d48>
  803760:	014020b4 	movhi	r5,130
  803764:	296fa484 	addi	r5,r5,-16750
  803768:	d9403515 	stw	r5,212(sp)
  80376c:	048001c4 	movi	r18,7
  803770:	dcc02d17 	ldw	r19,180(sp)
  803774:	00000306 	br	803784 <___vfprintf_internal_r+0xa5c>
  803778:	843ffc04 	addi	r16,r16,-16
  80377c:	42000204 	addi	r8,r8,8
  803780:	8c00130e 	bge	r17,r16,8037d0 <___vfprintf_internal_r+0xaa8>
  803784:	010020b4 	movhi	r4,130
  803788:	18c00404 	addi	r3,r3,16
  80378c:	10800044 	addi	r2,r2,1
  803790:	212fa484 	addi	r4,r4,-16750
  803794:	41000015 	stw	r4,0(r8)
  803798:	44400115 	stw	r17,4(r8)
  80379c:	d8c02015 	stw	r3,128(sp)
  8037a0:	d8801f15 	stw	r2,124(sp)
  8037a4:	90bff40e 	bge	r18,r2,803778 <__alt_mem_epcs_flash_controller_0+0xff7fa778>
  8037a8:	d9801e04 	addi	r6,sp,120
  8037ac:	b80b883a 	mov	r5,r23
  8037b0:	9809883a 	mov	r4,r19
  8037b4:	080910c0 	call	80910c <__sprint_r>
  8037b8:	103e5f1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8037bc:	843ffc04 	addi	r16,r16,-16
  8037c0:	d8c02017 	ldw	r3,128(sp)
  8037c4:	d8801f17 	ldw	r2,124(sp)
  8037c8:	da000404 	addi	r8,sp,16
  8037cc:	8c3fed16 	blt	r17,r16,803784 <__alt_mem_epcs_flash_controller_0+0xff7fa784>
  8037d0:	d9403517 	ldw	r5,212(sp)
  8037d4:	1c07883a 	add	r3,r3,r16
  8037d8:	10800044 	addi	r2,r2,1
  8037dc:	41400015 	stw	r5,0(r8)
  8037e0:	44000115 	stw	r16,4(r8)
  8037e4:	d8c02015 	stw	r3,128(sp)
  8037e8:	d8801f15 	stw	r2,124(sp)
  8037ec:	010001c4 	movi	r4,7
  8037f0:	2080060e 	bge	r4,r2,80380c <___vfprintf_internal_r+0xae4>
  8037f4:	d9002d17 	ldw	r4,180(sp)
  8037f8:	d9801e04 	addi	r6,sp,120
  8037fc:	b80b883a 	mov	r5,r23
  803800:	080910c0 	call	80910c <__sprint_r>
  803804:	103e4c1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803808:	d8c02017 	ldw	r3,128(sp)
  80380c:	d8803117 	ldw	r2,196(sp)
  803810:	d9002917 	ldw	r4,164(sp)
  803814:	1100010e 	bge	r2,r4,80381c <___vfprintf_internal_r+0xaf4>
  803818:	2005883a 	mov	r2,r4
  80381c:	d9402f17 	ldw	r5,188(sp)
  803820:	288b883a 	add	r5,r5,r2
  803824:	d9402f15 	stw	r5,188(sp)
  803828:	1801c01e 	bne	r3,zero,803f2c <___vfprintf_internal_r+0x1204>
  80382c:	a8800007 	ldb	r2,0(r21)
  803830:	d8001f15 	stw	zero,124(sp)
  803834:	da000404 	addi	r8,sp,16
  803838:	103d751e 	bne	r2,zero,802e10 <__alt_mem_epcs_flash_controller_0+0xff7f9e10>
  80383c:	a823883a 	mov	r17,r21
  803840:	003d8b06 	br	802e70 <__alt_mem_epcs_flash_controller_0+0xff7f9e70>
  803844:	8025883a 	mov	r18,r16
  803848:	dc002903 	ldbu	r16,164(sp)
  80384c:	e011883a 	mov	r8,fp
  803850:	84003fcc 	andi	r16,r16,255
  803854:	8005e51e 	bne	r16,zero,804fec <___vfprintf_internal_r+0x22c4>
  803858:	94800414 	ori	r18,r18,16
  80385c:	9080080c 	andi	r2,r18,32
  803860:	10022b26 	beq	r2,zero,804110 <___vfprintf_internal_r+0x13e8>
  803864:	d9002e17 	ldw	r4,184(sp)
  803868:	d9402a17 	ldw	r5,168(sp)
  80386c:	d8002785 	stb	zero,158(sp)
  803870:	20c00204 	addi	r3,r4,8
  803874:	24c00017 	ldw	r19,0(r4)
  803878:	25800117 	ldw	r22,4(r4)
  80387c:	28042e16 	blt	r5,zero,804938 <___vfprintf_internal_r+0x1c10>
  803880:	013fdfc4 	movi	r4,-129
  803884:	9d84b03a 	or	r2,r19,r22
  803888:	d8c02e15 	stw	r3,184(sp)
  80388c:	9124703a 	and	r18,r18,r4
  803890:	0039883a 	mov	fp,zero
  803894:	103e801e 	bne	r2,zero,803298 <__alt_mem_epcs_flash_controller_0+0xff7fa298>
  803898:	d9002a17 	ldw	r4,168(sp)
  80389c:	2002e01e 	bne	r4,zero,804420 <___vfprintf_internal_r+0x16f8>
  8038a0:	d8002a15 	stw	zero,168(sp)
  8038a4:	d8002b15 	stw	zero,172(sp)
  8038a8:	dc001e04 	addi	r16,sp,120
  8038ac:	003ef506 	br	803484 <__alt_mem_epcs_flash_controller_0+0xff7fa484>
  8038b0:	8025883a 	mov	r18,r16
  8038b4:	dc002903 	ldbu	r16,164(sp)
  8038b8:	e011883a 	mov	r8,fp
  8038bc:	84003fcc 	andi	r16,r16,255
  8038c0:	8005ba1e 	bne	r16,zero,804fac <___vfprintf_internal_r+0x2284>
  8038c4:	010020b4 	movhi	r4,130
  8038c8:	212f9404 	addi	r4,r4,-16816
  8038cc:	d9003915 	stw	r4,228(sp)
  8038d0:	9080080c 	andi	r2,r18,32
  8038d4:	10006126 	beq	r2,zero,803a5c <___vfprintf_internal_r+0xd34>
  8038d8:	d9402e17 	ldw	r5,184(sp)
  8038dc:	2cc00017 	ldw	r19,0(r5)
  8038e0:	2d800117 	ldw	r22,4(r5)
  8038e4:	29400204 	addi	r5,r5,8
  8038e8:	d9402e15 	stw	r5,184(sp)
  8038ec:	9080004c 	andi	r2,r18,1
  8038f0:	1001ac26 	beq	r2,zero,803fa4 <___vfprintf_internal_r+0x127c>
  8038f4:	9d84b03a 	or	r2,r19,r22
  8038f8:	10038526 	beq	r2,zero,804710 <___vfprintf_internal_r+0x19e8>
  8038fc:	d8c02a17 	ldw	r3,168(sp)
  803900:	00800c04 	movi	r2,48
  803904:	d8802705 	stb	r2,156(sp)
  803908:	dc402745 	stb	r17,157(sp)
  80390c:	d8002785 	stb	zero,158(sp)
  803910:	90800094 	ori	r2,r18,2
  803914:	18047916 	blt	r3,zero,804afc <___vfprintf_internal_r+0x1dd4>
  803918:	00bfdfc4 	movi	r2,-129
  80391c:	90a4703a 	and	r18,r18,r2
  803920:	94800094 	ori	r18,r18,2
  803924:	0039883a 	mov	fp,zero
  803928:	d9003917 	ldw	r4,228(sp)
  80392c:	dc001e04 	addi	r16,sp,120
  803930:	988003cc 	andi	r2,r19,15
  803934:	b006973a 	slli	r3,r22,28
  803938:	2085883a 	add	r2,r4,r2
  80393c:	9826d13a 	srli	r19,r19,4
  803940:	10800003 	ldbu	r2,0(r2)
  803944:	b02cd13a 	srli	r22,r22,4
  803948:	843fffc4 	addi	r16,r16,-1
  80394c:	1ce6b03a 	or	r19,r3,r19
  803950:	80800005 	stb	r2,0(r16)
  803954:	9d84b03a 	or	r2,r19,r22
  803958:	103ff51e 	bne	r2,zero,803930 <__alt_mem_epcs_flash_controller_0+0xff7fa930>
  80395c:	d8c02817 	ldw	r3,160(sp)
  803960:	1c07c83a 	sub	r3,r3,r16
  803964:	d8c02b15 	stw	r3,172(sp)
  803968:	003ec606 	br	803484 <__alt_mem_epcs_flash_controller_0+0xff7fa484>
  80396c:	8025883a 	mov	r18,r16
  803970:	dc002903 	ldbu	r16,164(sp)
  803974:	e011883a 	mov	r8,fp
  803978:	84003fcc 	andi	r16,r16,255
  80397c:	803e9626 	beq	r16,zero,8033d8 <__alt_mem_epcs_flash_controller_0+0xff7fa3d8>
  803980:	d8c02b03 	ldbu	r3,172(sp)
  803984:	d8c02785 	stb	r3,158(sp)
  803988:	003e9306 	br	8033d8 <__alt_mem_epcs_flash_controller_0+0xff7fa3d8>
  80398c:	00c00044 	movi	r3,1
  803990:	d8c02905 	stb	r3,164(sp)
  803994:	00c00ac4 	movi	r3,43
  803998:	d8c02b05 	stb	r3,172(sp)
  80399c:	ac400007 	ldb	r17,0(r21)
  8039a0:	003d4306 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  8039a4:	84000814 	ori	r16,r16,32
  8039a8:	ac400007 	ldb	r17,0(r21)
  8039ac:	003d4006 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  8039b0:	d8802e17 	ldw	r2,184(sp)
  8039b4:	8025883a 	mov	r18,r16
  8039b8:	d8002785 	stb	zero,158(sp)
  8039bc:	14000017 	ldw	r16,0(r2)
  8039c0:	e011883a 	mov	r8,fp
  8039c4:	14c00104 	addi	r19,r2,4
  8039c8:	80042d26 	beq	r16,zero,804a80 <___vfprintf_internal_r+0x1d58>
  8039cc:	d8c02a17 	ldw	r3,168(sp)
  8039d0:	1803e416 	blt	r3,zero,804964 <___vfprintf_internal_r+0x1c3c>
  8039d4:	180d883a 	mov	r6,r3
  8039d8:	000b883a 	mov	r5,zero
  8039dc:	8009883a 	mov	r4,r16
  8039e0:	df003d15 	stw	fp,244(sp)
  8039e4:	08073540 	call	807354 <memchr>
  8039e8:	da003d17 	ldw	r8,244(sp)
  8039ec:	10046826 	beq	r2,zero,804b90 <___vfprintf_internal_r+0x1e68>
  8039f0:	1405c83a 	sub	r2,r2,r16
  8039f4:	d8802b15 	stw	r2,172(sp)
  8039f8:	1003e016 	blt	r2,zero,80497c <___vfprintf_internal_r+0x1c54>
  8039fc:	df002783 	ldbu	fp,158(sp)
  803a00:	d8802915 	stw	r2,164(sp)
  803a04:	dcc02e15 	stw	r19,184(sp)
  803a08:	d8002a15 	stw	zero,168(sp)
  803a0c:	d8003215 	stw	zero,200(sp)
  803a10:	003ea206 	br	80349c <__alt_mem_epcs_flash_controller_0+0xff7fa49c>
  803a14:	8025883a 	mov	r18,r16
  803a18:	dc002903 	ldbu	r16,164(sp)
  803a1c:	e011883a 	mov	r8,fp
  803a20:	84003fcc 	andi	r16,r16,255
  803a24:	803f8d26 	beq	r16,zero,80385c <__alt_mem_epcs_flash_controller_0+0xff7fa85c>
  803a28:	d8c02b03 	ldbu	r3,172(sp)
  803a2c:	d8c02785 	stb	r3,158(sp)
  803a30:	003f8a06 	br	80385c <__alt_mem_epcs_flash_controller_0+0xff7fa85c>
  803a34:	8025883a 	mov	r18,r16
  803a38:	dc002903 	ldbu	r16,164(sp)
  803a3c:	e011883a 	mov	r8,fp
  803a40:	84003fcc 	andi	r16,r16,255
  803a44:	8005661e 	bne	r16,zero,804fe0 <___vfprintf_internal_r+0x22b8>
  803a48:	010020b4 	movhi	r4,130
  803a4c:	212f9904 	addi	r4,r4,-16796
  803a50:	d9003915 	stw	r4,228(sp)
  803a54:	9080080c 	andi	r2,r18,32
  803a58:	103f9f1e 	bne	r2,zero,8038d8 <__alt_mem_epcs_flash_controller_0+0xff7fa8d8>
  803a5c:	9080040c 	andi	r2,r18,16
  803a60:	1002eb26 	beq	r2,zero,804610 <___vfprintf_internal_r+0x18e8>
  803a64:	d8802e17 	ldw	r2,184(sp)
  803a68:	002d883a 	mov	r22,zero
  803a6c:	14c00017 	ldw	r19,0(r2)
  803a70:	10800104 	addi	r2,r2,4
  803a74:	d8802e15 	stw	r2,184(sp)
  803a78:	003f9c06 	br	8038ec <__alt_mem_epcs_flash_controller_0+0xff7fa8ec>
  803a7c:	d8802b07 	ldb	r2,172(sp)
  803a80:	1002e11e 	bne	r2,zero,804608 <___vfprintf_internal_r+0x18e0>
  803a84:	00c00044 	movi	r3,1
  803a88:	d8c02905 	stb	r3,164(sp)
  803a8c:	00c00804 	movi	r3,32
  803a90:	d8c02b05 	stb	r3,172(sp)
  803a94:	ac400007 	ldb	r17,0(r21)
  803a98:	003d0506 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  803a9c:	84000054 	ori	r16,r16,1
  803aa0:	ac400007 	ldb	r17,0(r21)
  803aa4:	003d0206 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  803aa8:	8025883a 	mov	r18,r16
  803aac:	dc002903 	ldbu	r16,164(sp)
  803ab0:	e011883a 	mov	r8,fp
  803ab4:	84003fcc 	andi	r16,r16,255
  803ab8:	803de726 	beq	r16,zero,803258 <__alt_mem_epcs_flash_controller_0+0xff7fa258>
  803abc:	d8c02b03 	ldbu	r3,172(sp)
  803ac0:	d8c02785 	stb	r3,158(sp)
  803ac4:	003de406 	br	803258 <__alt_mem_epcs_flash_controller_0+0xff7fa258>
  803ac8:	84001014 	ori	r16,r16,64
  803acc:	ac400007 	ldb	r17,0(r21)
  803ad0:	003cf706 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  803ad4:	ac400007 	ldb	r17,0(r21)
  803ad8:	00801b04 	movi	r2,108
  803adc:	88838f26 	beq	r17,r2,80491c <___vfprintf_internal_r+0x1bf4>
  803ae0:	84000414 	ori	r16,r16,16
  803ae4:	003cf206 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  803ae8:	8025883a 	mov	r18,r16
  803aec:	dc002903 	ldbu	r16,164(sp)
  803af0:	e011883a 	mov	r8,fp
  803af4:	84003fcc 	andi	r16,r16,255
  803af8:	80053f1e 	bne	r16,zero,804ff8 <___vfprintf_internal_r+0x22d0>
  803afc:	9080080c 	andi	r2,r18,32
  803b00:	1002d226 	beq	r2,zero,80464c <___vfprintf_internal_r+0x1924>
  803b04:	d9002e17 	ldw	r4,184(sp)
  803b08:	d9402f17 	ldw	r5,188(sp)
  803b0c:	20800017 	ldw	r2,0(r4)
  803b10:	2807d7fa 	srai	r3,r5,31
  803b14:	21000104 	addi	r4,r4,4
  803b18:	d9002e15 	stw	r4,184(sp)
  803b1c:	11400015 	stw	r5,0(r2)
  803b20:	10c00115 	stw	r3,4(r2)
  803b24:	003cb806 	br	802e08 <__alt_mem_epcs_flash_controller_0+0xff7f9e08>
  803b28:	d8c02e17 	ldw	r3,184(sp)
  803b2c:	d9002e17 	ldw	r4,184(sp)
  803b30:	8025883a 	mov	r18,r16
  803b34:	18800017 	ldw	r2,0(r3)
  803b38:	21000104 	addi	r4,r4,4
  803b3c:	00c00044 	movi	r3,1
  803b40:	e011883a 	mov	r8,fp
  803b44:	d8c02915 	stw	r3,164(sp)
  803b48:	d8002785 	stb	zero,158(sp)
  803b4c:	d8801405 	stb	r2,80(sp)
  803b50:	d9002e15 	stw	r4,184(sp)
  803b54:	d8c02b15 	stw	r3,172(sp)
  803b58:	d8002a15 	stw	zero,168(sp)
  803b5c:	d8003215 	stw	zero,200(sp)
  803b60:	dc001404 	addi	r16,sp,80
  803b64:	0039883a 	mov	fp,zero
  803b68:	003e5306 	br	8034b8 <__alt_mem_epcs_flash_controller_0+0xff7fa4b8>
  803b6c:	010020b4 	movhi	r4,130
  803b70:	212f9904 	addi	r4,r4,-16796
  803b74:	0039883a 	mov	fp,zero
  803b78:	d9003915 	stw	r4,228(sp)
  803b7c:	04401e04 	movi	r17,120
  803b80:	003f6906 	br	803928 <__alt_mem_epcs_flash_controller_0+0xff7fa928>
  803b84:	8025883a 	mov	r18,r16
  803b88:	dc002903 	ldbu	r16,164(sp)
  803b8c:	e011883a 	mov	r8,fp
  803b90:	84003fcc 	andi	r16,r16,255
  803b94:	8005081e 	bne	r16,zero,804fb8 <___vfprintf_internal_r+0x2290>
  803b98:	883d6126 	beq	r17,zero,803120 <__alt_mem_epcs_flash_controller_0+0xff7fa120>
  803b9c:	00c00044 	movi	r3,1
  803ba0:	d8c02915 	stw	r3,164(sp)
  803ba4:	dc401405 	stb	r17,80(sp)
  803ba8:	d8002785 	stb	zero,158(sp)
  803bac:	003fe906 	br	803b54 <__alt_mem_epcs_flash_controller_0+0xff7fab54>
  803bb0:	014020b4 	movhi	r5,130
  803bb4:	296f9904 	addi	r5,r5,-16796
  803bb8:	d9403915 	stw	r5,228(sp)
  803bbc:	d8c02e15 	stw	r3,184(sp)
  803bc0:	1025883a 	mov	r18,r2
  803bc4:	04401e04 	movi	r17,120
  803bc8:	9d84b03a 	or	r2,r19,r22
  803bcc:	1000fc1e 	bne	r2,zero,803fc0 <___vfprintf_internal_r+0x1298>
  803bd0:	0039883a 	mov	fp,zero
  803bd4:	00800084 	movi	r2,2
  803bd8:	10803fcc 	andi	r2,r2,255
  803bdc:	00c00044 	movi	r3,1
  803be0:	10c20f26 	beq	r2,r3,804420 <___vfprintf_internal_r+0x16f8>
  803be4:	00c00084 	movi	r3,2
  803be8:	10fd3326 	beq	r2,r3,8030b8 <__alt_mem_epcs_flash_controller_0+0xff7fa0b8>
  803bec:	003e0b06 	br	80341c <__alt_mem_epcs_flash_controller_0+0xff7fa41c>
  803bf0:	d8c02017 	ldw	r3,128(sp)
  803bf4:	003e7106 	br	8035bc <__alt_mem_epcs_flash_controller_0+0xff7fa5bc>
  803bf8:	00801944 	movi	r2,101
  803bfc:	14407e0e 	bge	r2,r17,803df8 <___vfprintf_internal_r+0x10d0>
  803c00:	d9003617 	ldw	r4,216(sp)
  803c04:	d9403817 	ldw	r5,224(sp)
  803c08:	000d883a 	mov	r6,zero
  803c0c:	000f883a 	mov	r7,zero
  803c10:	d8c03c15 	stw	r3,240(sp)
  803c14:	da003d15 	stw	r8,244(sp)
  803c18:	080cc400 	call	80cc40 <__eqdf2>
  803c1c:	d8c03c17 	ldw	r3,240(sp)
  803c20:	da003d17 	ldw	r8,244(sp)
  803c24:	1000f71e 	bne	r2,zero,804004 <___vfprintf_internal_r+0x12dc>
  803c28:	d8801f17 	ldw	r2,124(sp)
  803c2c:	010020b4 	movhi	r4,130
  803c30:	212fa004 	addi	r4,r4,-16768
  803c34:	18c00044 	addi	r3,r3,1
  803c38:	10800044 	addi	r2,r2,1
  803c3c:	41000015 	stw	r4,0(r8)
  803c40:	01000044 	movi	r4,1
  803c44:	41000115 	stw	r4,4(r8)
  803c48:	d8c02015 	stw	r3,128(sp)
  803c4c:	d8801f15 	stw	r2,124(sp)
  803c50:	010001c4 	movi	r4,7
  803c54:	2082b816 	blt	r4,r2,804738 <___vfprintf_internal_r+0x1a10>
  803c58:	42000204 	addi	r8,r8,8
  803c5c:	d8802617 	ldw	r2,152(sp)
  803c60:	d9403317 	ldw	r5,204(sp)
  803c64:	11400216 	blt	r2,r5,803c70 <___vfprintf_internal_r+0xf48>
  803c68:	9080004c 	andi	r2,r18,1
  803c6c:	103eb326 	beq	r2,zero,80373c <__alt_mem_epcs_flash_controller_0+0xff7fa73c>
  803c70:	d8803717 	ldw	r2,220(sp)
  803c74:	d9003417 	ldw	r4,208(sp)
  803c78:	d9403717 	ldw	r5,220(sp)
  803c7c:	1887883a 	add	r3,r3,r2
  803c80:	d8801f17 	ldw	r2,124(sp)
  803c84:	41000015 	stw	r4,0(r8)
  803c88:	41400115 	stw	r5,4(r8)
  803c8c:	10800044 	addi	r2,r2,1
  803c90:	d8c02015 	stw	r3,128(sp)
  803c94:	d8801f15 	stw	r2,124(sp)
  803c98:	010001c4 	movi	r4,7
  803c9c:	20832916 	blt	r4,r2,804944 <___vfprintf_internal_r+0x1c1c>
  803ca0:	42000204 	addi	r8,r8,8
  803ca4:	d8803317 	ldw	r2,204(sp)
  803ca8:	143fffc4 	addi	r16,r2,-1
  803cac:	043ea30e 	bge	zero,r16,80373c <__alt_mem_epcs_flash_controller_0+0xff7fa73c>
  803cb0:	04400404 	movi	r17,16
  803cb4:	d8801f17 	ldw	r2,124(sp)
  803cb8:	8c00880e 	bge	r17,r16,803edc <___vfprintf_internal_r+0x11b4>
  803cbc:	014020b4 	movhi	r5,130
  803cc0:	296fa084 	addi	r5,r5,-16766
  803cc4:	d9402c15 	stw	r5,176(sp)
  803cc8:	058001c4 	movi	r22,7
  803ccc:	dcc02d17 	ldw	r19,180(sp)
  803cd0:	00000306 	br	803ce0 <___vfprintf_internal_r+0xfb8>
  803cd4:	42000204 	addi	r8,r8,8
  803cd8:	843ffc04 	addi	r16,r16,-16
  803cdc:	8c00820e 	bge	r17,r16,803ee8 <___vfprintf_internal_r+0x11c0>
  803ce0:	18c00404 	addi	r3,r3,16
  803ce4:	10800044 	addi	r2,r2,1
  803ce8:	45000015 	stw	r20,0(r8)
  803cec:	44400115 	stw	r17,4(r8)
  803cf0:	d8c02015 	stw	r3,128(sp)
  803cf4:	d8801f15 	stw	r2,124(sp)
  803cf8:	b0bff60e 	bge	r22,r2,803cd4 <__alt_mem_epcs_flash_controller_0+0xff7facd4>
  803cfc:	d9801e04 	addi	r6,sp,120
  803d00:	b80b883a 	mov	r5,r23
  803d04:	9809883a 	mov	r4,r19
  803d08:	080910c0 	call	80910c <__sprint_r>
  803d0c:	103d0a1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803d10:	d8c02017 	ldw	r3,128(sp)
  803d14:	d8801f17 	ldw	r2,124(sp)
  803d18:	da000404 	addi	r8,sp,16
  803d1c:	003fee06 	br	803cd8 <__alt_mem_epcs_flash_controller_0+0xff7facd8>
  803d20:	d9403117 	ldw	r5,196(sp)
  803d24:	d8802917 	ldw	r2,164(sp)
  803d28:	28adc83a 	sub	r22,r5,r2
  803d2c:	05be410e 	bge	zero,r22,803634 <__alt_mem_epcs_flash_controller_0+0xff7fa634>
  803d30:	07000404 	movi	fp,16
  803d34:	d8801f17 	ldw	r2,124(sp)
  803d38:	e5838f0e 	bge	fp,r22,804b78 <___vfprintf_internal_r+0x1e50>
  803d3c:	014020b4 	movhi	r5,130
  803d40:	296fa084 	addi	r5,r5,-16766
  803d44:	dc403015 	stw	r17,192(sp)
  803d48:	d9402c15 	stw	r5,176(sp)
  803d4c:	b023883a 	mov	r17,r22
  803d50:	04c001c4 	movi	r19,7
  803d54:	a82d883a 	mov	r22,r21
  803d58:	902b883a 	mov	r21,r18
  803d5c:	8025883a 	mov	r18,r16
  803d60:	dc002d17 	ldw	r16,180(sp)
  803d64:	00000306 	br	803d74 <___vfprintf_internal_r+0x104c>
  803d68:	8c7ffc04 	addi	r17,r17,-16
  803d6c:	42000204 	addi	r8,r8,8
  803d70:	e440110e 	bge	fp,r17,803db8 <___vfprintf_internal_r+0x1090>
  803d74:	18c00404 	addi	r3,r3,16
  803d78:	10800044 	addi	r2,r2,1
  803d7c:	45000015 	stw	r20,0(r8)
  803d80:	47000115 	stw	fp,4(r8)
  803d84:	d8c02015 	stw	r3,128(sp)
  803d88:	d8801f15 	stw	r2,124(sp)
  803d8c:	98bff60e 	bge	r19,r2,803d68 <__alt_mem_epcs_flash_controller_0+0xff7fad68>
  803d90:	d9801e04 	addi	r6,sp,120
  803d94:	b80b883a 	mov	r5,r23
  803d98:	8009883a 	mov	r4,r16
  803d9c:	080910c0 	call	80910c <__sprint_r>
  803da0:	103ce51e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803da4:	8c7ffc04 	addi	r17,r17,-16
  803da8:	d8c02017 	ldw	r3,128(sp)
  803dac:	d8801f17 	ldw	r2,124(sp)
  803db0:	da000404 	addi	r8,sp,16
  803db4:	e47fef16 	blt	fp,r17,803d74 <__alt_mem_epcs_flash_controller_0+0xff7fad74>
  803db8:	9021883a 	mov	r16,r18
  803dbc:	a825883a 	mov	r18,r21
  803dc0:	b02b883a 	mov	r21,r22
  803dc4:	882d883a 	mov	r22,r17
  803dc8:	dc403017 	ldw	r17,192(sp)
  803dcc:	d9002c17 	ldw	r4,176(sp)
  803dd0:	1d87883a 	add	r3,r3,r22
  803dd4:	10800044 	addi	r2,r2,1
  803dd8:	41000015 	stw	r4,0(r8)
  803ddc:	45800115 	stw	r22,4(r8)
  803de0:	d8c02015 	stw	r3,128(sp)
  803de4:	d8801f15 	stw	r2,124(sp)
  803de8:	010001c4 	movi	r4,7
  803dec:	20818e16 	blt	r4,r2,804428 <___vfprintf_internal_r+0x1700>
  803df0:	42000204 	addi	r8,r8,8
  803df4:	003e0f06 	br	803634 <__alt_mem_epcs_flash_controller_0+0xff7fa634>
  803df8:	d9403317 	ldw	r5,204(sp)
  803dfc:	00800044 	movi	r2,1
  803e00:	18c00044 	addi	r3,r3,1
  803e04:	1141530e 	bge	r2,r5,804354 <___vfprintf_internal_r+0x162c>
  803e08:	dc401f17 	ldw	r17,124(sp)
  803e0c:	00800044 	movi	r2,1
  803e10:	40800115 	stw	r2,4(r8)
  803e14:	8c400044 	addi	r17,r17,1
  803e18:	44000015 	stw	r16,0(r8)
  803e1c:	d8c02015 	stw	r3,128(sp)
  803e20:	dc401f15 	stw	r17,124(sp)
  803e24:	008001c4 	movi	r2,7
  803e28:	14416b16 	blt	r2,r17,8043d8 <___vfprintf_internal_r+0x16b0>
  803e2c:	42000204 	addi	r8,r8,8
  803e30:	d8803717 	ldw	r2,220(sp)
  803e34:	d9003417 	ldw	r4,208(sp)
  803e38:	8c400044 	addi	r17,r17,1
  803e3c:	10c7883a 	add	r3,r2,r3
  803e40:	40800115 	stw	r2,4(r8)
  803e44:	41000015 	stw	r4,0(r8)
  803e48:	d8c02015 	stw	r3,128(sp)
  803e4c:	dc401f15 	stw	r17,124(sp)
  803e50:	008001c4 	movi	r2,7
  803e54:	14416916 	blt	r2,r17,8043fc <___vfprintf_internal_r+0x16d4>
  803e58:	45800204 	addi	r22,r8,8
  803e5c:	d9003617 	ldw	r4,216(sp)
  803e60:	d9403817 	ldw	r5,224(sp)
  803e64:	000d883a 	mov	r6,zero
  803e68:	000f883a 	mov	r7,zero
  803e6c:	d8c03c15 	stw	r3,240(sp)
  803e70:	080cc400 	call	80cc40 <__eqdf2>
  803e74:	d8c03c17 	ldw	r3,240(sp)
  803e78:	1000bc26 	beq	r2,zero,80416c <___vfprintf_internal_r+0x1444>
  803e7c:	d9403317 	ldw	r5,204(sp)
  803e80:	84000044 	addi	r16,r16,1
  803e84:	8c400044 	addi	r17,r17,1
  803e88:	28bfffc4 	addi	r2,r5,-1
  803e8c:	1887883a 	add	r3,r3,r2
  803e90:	b0800115 	stw	r2,4(r22)
  803e94:	b4000015 	stw	r16,0(r22)
  803e98:	d8c02015 	stw	r3,128(sp)
  803e9c:	dc401f15 	stw	r17,124(sp)
  803ea0:	008001c4 	movi	r2,7
  803ea4:	14414316 	blt	r2,r17,8043b4 <___vfprintf_internal_r+0x168c>
  803ea8:	b5800204 	addi	r22,r22,8
  803eac:	d9003a17 	ldw	r4,232(sp)
  803eb0:	df0022c4 	addi	fp,sp,139
  803eb4:	8c400044 	addi	r17,r17,1
  803eb8:	20c7883a 	add	r3,r4,r3
  803ebc:	b7000015 	stw	fp,0(r22)
  803ec0:	b1000115 	stw	r4,4(r22)
  803ec4:	d8c02015 	stw	r3,128(sp)
  803ec8:	dc401f15 	stw	r17,124(sp)
  803ecc:	008001c4 	movi	r2,7
  803ed0:	14400e16 	blt	r2,r17,803f0c <___vfprintf_internal_r+0x11e4>
  803ed4:	b2000204 	addi	r8,r22,8
  803ed8:	003e1806 	br	80373c <__alt_mem_epcs_flash_controller_0+0xff7fa73c>
  803edc:	010020b4 	movhi	r4,130
  803ee0:	212fa084 	addi	r4,r4,-16766
  803ee4:	d9002c15 	stw	r4,176(sp)
  803ee8:	d9002c17 	ldw	r4,176(sp)
  803eec:	1c07883a 	add	r3,r3,r16
  803ef0:	44000115 	stw	r16,4(r8)
  803ef4:	41000015 	stw	r4,0(r8)
  803ef8:	10800044 	addi	r2,r2,1
  803efc:	d8c02015 	stw	r3,128(sp)
  803f00:	d8801f15 	stw	r2,124(sp)
  803f04:	010001c4 	movi	r4,7
  803f08:	20be0b0e 	bge	r4,r2,803738 <__alt_mem_epcs_flash_controller_0+0xff7fa738>
  803f0c:	d9002d17 	ldw	r4,180(sp)
  803f10:	d9801e04 	addi	r6,sp,120
  803f14:	b80b883a 	mov	r5,r23
  803f18:	080910c0 	call	80910c <__sprint_r>
  803f1c:	103c861e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803f20:	d8c02017 	ldw	r3,128(sp)
  803f24:	da000404 	addi	r8,sp,16
  803f28:	003e0406 	br	80373c <__alt_mem_epcs_flash_controller_0+0xff7fa73c>
  803f2c:	d9002d17 	ldw	r4,180(sp)
  803f30:	d9801e04 	addi	r6,sp,120
  803f34:	b80b883a 	mov	r5,r23
  803f38:	080910c0 	call	80910c <__sprint_r>
  803f3c:	103e3b26 	beq	r2,zero,80382c <__alt_mem_epcs_flash_controller_0+0xff7fa82c>
  803f40:	003c7d06 	br	803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803f44:	d9002d17 	ldw	r4,180(sp)
  803f48:	d9801e04 	addi	r6,sp,120
  803f4c:	b80b883a 	mov	r5,r23
  803f50:	080910c0 	call	80910c <__sprint_r>
  803f54:	103c781e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803f58:	d8c02017 	ldw	r3,128(sp)
  803f5c:	da000404 	addi	r8,sp,16
  803f60:	003de906 	br	803708 <__alt_mem_epcs_flash_controller_0+0xff7fa708>
  803f64:	d9002d17 	ldw	r4,180(sp)
  803f68:	d9801e04 	addi	r6,sp,120
  803f6c:	b80b883a 	mov	r5,r23
  803f70:	080910c0 	call	80910c <__sprint_r>
  803f74:	103c701e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803f78:	d8c02017 	ldw	r3,128(sp)
  803f7c:	da000404 	addi	r8,sp,16
  803f80:	003d9b06 	br	8035f0 <__alt_mem_epcs_flash_controller_0+0xff7fa5f0>
  803f84:	d9002d17 	ldw	r4,180(sp)
  803f88:	d9801e04 	addi	r6,sp,120
  803f8c:	b80b883a 	mov	r5,r23
  803f90:	080910c0 	call	80910c <__sprint_r>
  803f94:	103c681e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  803f98:	d8c02017 	ldw	r3,128(sp)
  803f9c:	da000404 	addi	r8,sp,16
  803fa0:	003da106 	br	803628 <__alt_mem_epcs_flash_controller_0+0xff7fa628>
  803fa4:	d9402a17 	ldw	r5,168(sp)
  803fa8:	d8002785 	stb	zero,158(sp)
  803fac:	283f0616 	blt	r5,zero,803bc8 <__alt_mem_epcs_flash_controller_0+0xff7fabc8>
  803fb0:	00ffdfc4 	movi	r3,-129
  803fb4:	9d84b03a 	or	r2,r19,r22
  803fb8:	90e4703a 	and	r18,r18,r3
  803fbc:	103c3b26 	beq	r2,zero,8030ac <__alt_mem_epcs_flash_controller_0+0xff7fa0ac>
  803fc0:	0039883a 	mov	fp,zero
  803fc4:	003e5806 	br	803928 <__alt_mem_epcs_flash_controller_0+0xff7fa928>
  803fc8:	9080040c 	andi	r2,r18,16
  803fcc:	1001b326 	beq	r2,zero,80469c <___vfprintf_internal_r+0x1974>
  803fd0:	d8c02e17 	ldw	r3,184(sp)
  803fd4:	d9002a17 	ldw	r4,168(sp)
  803fd8:	d8002785 	stb	zero,158(sp)
  803fdc:	18800104 	addi	r2,r3,4
  803fe0:	1cc00017 	ldw	r19,0(r3)
  803fe4:	002d883a 	mov	r22,zero
  803fe8:	2001b516 	blt	r4,zero,8046c0 <___vfprintf_internal_r+0x1998>
  803fec:	00ffdfc4 	movi	r3,-129
  803ff0:	d8802e15 	stw	r2,184(sp)
  803ff4:	90e4703a 	and	r18,r18,r3
  803ff8:	983d0526 	beq	r19,zero,803410 <__alt_mem_epcs_flash_controller_0+0xff7fa410>
  803ffc:	0039883a 	mov	fp,zero
  804000:	003d0806 	br	803424 <__alt_mem_epcs_flash_controller_0+0xff7fa424>
  804004:	dc402617 	ldw	r17,152(sp)
  804008:	0441d30e 	bge	zero,r17,804758 <___vfprintf_internal_r+0x1a30>
  80400c:	dc403217 	ldw	r17,200(sp)
  804010:	d8803317 	ldw	r2,204(sp)
  804014:	1440010e 	bge	r2,r17,80401c <___vfprintf_internal_r+0x12f4>
  804018:	1023883a 	mov	r17,r2
  80401c:	04400a0e 	bge	zero,r17,804048 <___vfprintf_internal_r+0x1320>
  804020:	d8801f17 	ldw	r2,124(sp)
  804024:	1c47883a 	add	r3,r3,r17
  804028:	44000015 	stw	r16,0(r8)
  80402c:	10800044 	addi	r2,r2,1
  804030:	44400115 	stw	r17,4(r8)
  804034:	d8c02015 	stw	r3,128(sp)
  804038:	d8801f15 	stw	r2,124(sp)
  80403c:	010001c4 	movi	r4,7
  804040:	20826516 	blt	r4,r2,8049d8 <___vfprintf_internal_r+0x1cb0>
  804044:	42000204 	addi	r8,r8,8
  804048:	88026116 	blt	r17,zero,8049d0 <___vfprintf_internal_r+0x1ca8>
  80404c:	d9003217 	ldw	r4,200(sp)
  804050:	2463c83a 	sub	r17,r4,r17
  804054:	04407b0e 	bge	zero,r17,804244 <___vfprintf_internal_r+0x151c>
  804058:	05800404 	movi	r22,16
  80405c:	d8801f17 	ldw	r2,124(sp)
  804060:	b4419d0e 	bge	r22,r17,8046d8 <___vfprintf_internal_r+0x19b0>
  804064:	010020b4 	movhi	r4,130
  804068:	212fa084 	addi	r4,r4,-16766
  80406c:	d9002c15 	stw	r4,176(sp)
  804070:	070001c4 	movi	fp,7
  804074:	dcc02d17 	ldw	r19,180(sp)
  804078:	00000306 	br	804088 <___vfprintf_internal_r+0x1360>
  80407c:	42000204 	addi	r8,r8,8
  804080:	8c7ffc04 	addi	r17,r17,-16
  804084:	b441970e 	bge	r22,r17,8046e4 <___vfprintf_internal_r+0x19bc>
  804088:	18c00404 	addi	r3,r3,16
  80408c:	10800044 	addi	r2,r2,1
  804090:	45000015 	stw	r20,0(r8)
  804094:	45800115 	stw	r22,4(r8)
  804098:	d8c02015 	stw	r3,128(sp)
  80409c:	d8801f15 	stw	r2,124(sp)
  8040a0:	e0bff60e 	bge	fp,r2,80407c <__alt_mem_epcs_flash_controller_0+0xff7fb07c>
  8040a4:	d9801e04 	addi	r6,sp,120
  8040a8:	b80b883a 	mov	r5,r23
  8040ac:	9809883a 	mov	r4,r19
  8040b0:	080910c0 	call	80910c <__sprint_r>
  8040b4:	103c201e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8040b8:	d8c02017 	ldw	r3,128(sp)
  8040bc:	d8801f17 	ldw	r2,124(sp)
  8040c0:	da000404 	addi	r8,sp,16
  8040c4:	003fee06 	br	804080 <__alt_mem_epcs_flash_controller_0+0xff7fb080>
  8040c8:	d9002d17 	ldw	r4,180(sp)
  8040cc:	d9801e04 	addi	r6,sp,120
  8040d0:	b80b883a 	mov	r5,r23
  8040d4:	080910c0 	call	80910c <__sprint_r>
  8040d8:	103c171e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8040dc:	d8c02017 	ldw	r3,128(sp)
  8040e0:	df002787 	ldb	fp,158(sp)
  8040e4:	da000404 	addi	r8,sp,16
  8040e8:	003d3406 	br	8035bc <__alt_mem_epcs_flash_controller_0+0xff7fa5bc>
  8040ec:	9080040c 	andi	r2,r18,16
  8040f0:	10016126 	beq	r2,zero,804678 <___vfprintf_internal_r+0x1950>
  8040f4:	d9402e17 	ldw	r5,184(sp)
  8040f8:	2cc00017 	ldw	r19,0(r5)
  8040fc:	29400104 	addi	r5,r5,4
  804100:	d9402e15 	stw	r5,184(sp)
  804104:	982dd7fa 	srai	r22,r19,31
  804108:	b005883a 	mov	r2,r22
  80410c:	003c5a06 	br	803278 <__alt_mem_epcs_flash_controller_0+0xff7fa278>
  804110:	9080040c 	andi	r2,r18,16
  804114:	10003526 	beq	r2,zero,8041ec <___vfprintf_internal_r+0x14c4>
  804118:	d8c02e17 	ldw	r3,184(sp)
  80411c:	d9002a17 	ldw	r4,168(sp)
  804120:	d8002785 	stb	zero,158(sp)
  804124:	18800104 	addi	r2,r3,4
  804128:	1cc00017 	ldw	r19,0(r3)
  80412c:	002d883a 	mov	r22,zero
  804130:	20003716 	blt	r4,zero,804210 <___vfprintf_internal_r+0x14e8>
  804134:	00ffdfc4 	movi	r3,-129
  804138:	d8802e15 	stw	r2,184(sp)
  80413c:	90e4703a 	and	r18,r18,r3
  804140:	0039883a 	mov	fp,zero
  804144:	983dd426 	beq	r19,zero,803898 <__alt_mem_epcs_flash_controller_0+0xff7fa898>
  804148:	00800244 	movi	r2,9
  80414c:	14fc5336 	bltu	r2,r19,80329c <__alt_mem_epcs_flash_controller_0+0xff7fa29c>
  804150:	d8c02817 	ldw	r3,160(sp)
  804154:	dc001dc4 	addi	r16,sp,119
  804158:	9cc00c04 	addi	r19,r19,48
  80415c:	1c07c83a 	sub	r3,r3,r16
  804160:	dcc01dc5 	stb	r19,119(sp)
  804164:	d8c02b15 	stw	r3,172(sp)
  804168:	003cc606 	br	803484 <__alt_mem_epcs_flash_controller_0+0xff7fa484>
  80416c:	d8803317 	ldw	r2,204(sp)
  804170:	143fffc4 	addi	r16,r2,-1
  804174:	043f4d0e 	bge	zero,r16,803eac <__alt_mem_epcs_flash_controller_0+0xff7faeac>
  804178:	07000404 	movi	fp,16
  80417c:	e400810e 	bge	fp,r16,804384 <___vfprintf_internal_r+0x165c>
  804180:	014020b4 	movhi	r5,130
  804184:	296fa084 	addi	r5,r5,-16766
  804188:	d9402c15 	stw	r5,176(sp)
  80418c:	01c001c4 	movi	r7,7
  804190:	dcc02d17 	ldw	r19,180(sp)
  804194:	00000306 	br	8041a4 <___vfprintf_internal_r+0x147c>
  804198:	b5800204 	addi	r22,r22,8
  80419c:	843ffc04 	addi	r16,r16,-16
  8041a0:	e4007b0e 	bge	fp,r16,804390 <___vfprintf_internal_r+0x1668>
  8041a4:	18c00404 	addi	r3,r3,16
  8041a8:	8c400044 	addi	r17,r17,1
  8041ac:	b5000015 	stw	r20,0(r22)
  8041b0:	b7000115 	stw	fp,4(r22)
  8041b4:	d8c02015 	stw	r3,128(sp)
  8041b8:	dc401f15 	stw	r17,124(sp)
  8041bc:	3c7ff60e 	bge	r7,r17,804198 <__alt_mem_epcs_flash_controller_0+0xff7fb198>
  8041c0:	d9801e04 	addi	r6,sp,120
  8041c4:	b80b883a 	mov	r5,r23
  8041c8:	9809883a 	mov	r4,r19
  8041cc:	d9c03c15 	stw	r7,240(sp)
  8041d0:	080910c0 	call	80910c <__sprint_r>
  8041d4:	d9c03c17 	ldw	r7,240(sp)
  8041d8:	103bd71e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8041dc:	d8c02017 	ldw	r3,128(sp)
  8041e0:	dc401f17 	ldw	r17,124(sp)
  8041e4:	dd800404 	addi	r22,sp,16
  8041e8:	003fec06 	br	80419c <__alt_mem_epcs_flash_controller_0+0xff7fb19c>
  8041ec:	9080100c 	andi	r2,r18,64
  8041f0:	d8002785 	stb	zero,158(sp)
  8041f4:	10010e26 	beq	r2,zero,804630 <___vfprintf_internal_r+0x1908>
  8041f8:	d9402e17 	ldw	r5,184(sp)
  8041fc:	d8c02a17 	ldw	r3,168(sp)
  804200:	002d883a 	mov	r22,zero
  804204:	28800104 	addi	r2,r5,4
  804208:	2cc0000b 	ldhu	r19,0(r5)
  80420c:	183fc90e 	bge	r3,zero,804134 <__alt_mem_epcs_flash_controller_0+0xff7fb134>
  804210:	d8802e15 	stw	r2,184(sp)
  804214:	0039883a 	mov	fp,zero
  804218:	9d84b03a 	or	r2,r19,r22
  80421c:	103c1e1e 	bne	r2,zero,803298 <__alt_mem_epcs_flash_controller_0+0xff7fa298>
  804220:	00800044 	movi	r2,1
  804224:	003e6c06 	br	803bd8 <__alt_mem_epcs_flash_controller_0+0xff7fabd8>
  804228:	d9002d17 	ldw	r4,180(sp)
  80422c:	d9801e04 	addi	r6,sp,120
  804230:	b80b883a 	mov	r5,r23
  804234:	080910c0 	call	80910c <__sprint_r>
  804238:	103bbf1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  80423c:	d8c02017 	ldw	r3,128(sp)
  804240:	da000404 	addi	r8,sp,16
  804244:	d9003217 	ldw	r4,200(sp)
  804248:	d8802617 	ldw	r2,152(sp)
  80424c:	d9403317 	ldw	r5,204(sp)
  804250:	8123883a 	add	r17,r16,r4
  804254:	11400216 	blt	r2,r5,804260 <___vfprintf_internal_r+0x1538>
  804258:	9100004c 	andi	r4,r18,1
  80425c:	20000d26 	beq	r4,zero,804294 <___vfprintf_internal_r+0x156c>
  804260:	d9003717 	ldw	r4,220(sp)
  804264:	d9403417 	ldw	r5,208(sp)
  804268:	1907883a 	add	r3,r3,r4
  80426c:	d9001f17 	ldw	r4,124(sp)
  804270:	41400015 	stw	r5,0(r8)
  804274:	d9403717 	ldw	r5,220(sp)
  804278:	21000044 	addi	r4,r4,1
  80427c:	d8c02015 	stw	r3,128(sp)
  804280:	41400115 	stw	r5,4(r8)
  804284:	d9001f15 	stw	r4,124(sp)
  804288:	014001c4 	movi	r5,7
  80428c:	2901e816 	blt	r5,r4,804a30 <___vfprintf_internal_r+0x1d08>
  804290:	42000204 	addi	r8,r8,8
  804294:	d9003317 	ldw	r4,204(sp)
  804298:	8121883a 	add	r16,r16,r4
  80429c:	2085c83a 	sub	r2,r4,r2
  8042a0:	8461c83a 	sub	r16,r16,r17
  8042a4:	1400010e 	bge	r2,r16,8042ac <___vfprintf_internal_r+0x1584>
  8042a8:	1021883a 	mov	r16,r2
  8042ac:	04000a0e 	bge	zero,r16,8042d8 <___vfprintf_internal_r+0x15b0>
  8042b0:	d9001f17 	ldw	r4,124(sp)
  8042b4:	1c07883a 	add	r3,r3,r16
  8042b8:	44400015 	stw	r17,0(r8)
  8042bc:	21000044 	addi	r4,r4,1
  8042c0:	44000115 	stw	r16,4(r8)
  8042c4:	d8c02015 	stw	r3,128(sp)
  8042c8:	d9001f15 	stw	r4,124(sp)
  8042cc:	014001c4 	movi	r5,7
  8042d0:	2901fb16 	blt	r5,r4,804ac0 <___vfprintf_internal_r+0x1d98>
  8042d4:	42000204 	addi	r8,r8,8
  8042d8:	8001f716 	blt	r16,zero,804ab8 <___vfprintf_internal_r+0x1d90>
  8042dc:	1421c83a 	sub	r16,r2,r16
  8042e0:	043d160e 	bge	zero,r16,80373c <__alt_mem_epcs_flash_controller_0+0xff7fa73c>
  8042e4:	04400404 	movi	r17,16
  8042e8:	d8801f17 	ldw	r2,124(sp)
  8042ec:	8c3efb0e 	bge	r17,r16,803edc <__alt_mem_epcs_flash_controller_0+0xff7faedc>
  8042f0:	014020b4 	movhi	r5,130
  8042f4:	296fa084 	addi	r5,r5,-16766
  8042f8:	d9402c15 	stw	r5,176(sp)
  8042fc:	058001c4 	movi	r22,7
  804300:	dcc02d17 	ldw	r19,180(sp)
  804304:	00000306 	br	804314 <___vfprintf_internal_r+0x15ec>
  804308:	42000204 	addi	r8,r8,8
  80430c:	843ffc04 	addi	r16,r16,-16
  804310:	8c3ef50e 	bge	r17,r16,803ee8 <__alt_mem_epcs_flash_controller_0+0xff7faee8>
  804314:	18c00404 	addi	r3,r3,16
  804318:	10800044 	addi	r2,r2,1
  80431c:	45000015 	stw	r20,0(r8)
  804320:	44400115 	stw	r17,4(r8)
  804324:	d8c02015 	stw	r3,128(sp)
  804328:	d8801f15 	stw	r2,124(sp)
  80432c:	b0bff60e 	bge	r22,r2,804308 <__alt_mem_epcs_flash_controller_0+0xff7fb308>
  804330:	d9801e04 	addi	r6,sp,120
  804334:	b80b883a 	mov	r5,r23
  804338:	9809883a 	mov	r4,r19
  80433c:	080910c0 	call	80910c <__sprint_r>
  804340:	103b7d1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804344:	d8c02017 	ldw	r3,128(sp)
  804348:	d8801f17 	ldw	r2,124(sp)
  80434c:	da000404 	addi	r8,sp,16
  804350:	003fee06 	br	80430c <__alt_mem_epcs_flash_controller_0+0xff7fb30c>
  804354:	9088703a 	and	r4,r18,r2
  804358:	203eab1e 	bne	r4,zero,803e08 <__alt_mem_epcs_flash_controller_0+0xff7fae08>
  80435c:	dc401f17 	ldw	r17,124(sp)
  804360:	40800115 	stw	r2,4(r8)
  804364:	44000015 	stw	r16,0(r8)
  804368:	8c400044 	addi	r17,r17,1
  80436c:	d8c02015 	stw	r3,128(sp)
  804370:	dc401f15 	stw	r17,124(sp)
  804374:	008001c4 	movi	r2,7
  804378:	14400e16 	blt	r2,r17,8043b4 <___vfprintf_internal_r+0x168c>
  80437c:	45800204 	addi	r22,r8,8
  804380:	003eca06 	br	803eac <__alt_mem_epcs_flash_controller_0+0xff7faeac>
  804384:	010020b4 	movhi	r4,130
  804388:	212fa084 	addi	r4,r4,-16766
  80438c:	d9002c15 	stw	r4,176(sp)
  804390:	d8802c17 	ldw	r2,176(sp)
  804394:	1c07883a 	add	r3,r3,r16
  804398:	8c400044 	addi	r17,r17,1
  80439c:	b0800015 	stw	r2,0(r22)
  8043a0:	b4000115 	stw	r16,4(r22)
  8043a4:	d8c02015 	stw	r3,128(sp)
  8043a8:	dc401f15 	stw	r17,124(sp)
  8043ac:	008001c4 	movi	r2,7
  8043b0:	147ebd0e 	bge	r2,r17,803ea8 <__alt_mem_epcs_flash_controller_0+0xff7faea8>
  8043b4:	d9002d17 	ldw	r4,180(sp)
  8043b8:	d9801e04 	addi	r6,sp,120
  8043bc:	b80b883a 	mov	r5,r23
  8043c0:	080910c0 	call	80910c <__sprint_r>
  8043c4:	103b5c1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8043c8:	d8c02017 	ldw	r3,128(sp)
  8043cc:	dc401f17 	ldw	r17,124(sp)
  8043d0:	dd800404 	addi	r22,sp,16
  8043d4:	003eb506 	br	803eac <__alt_mem_epcs_flash_controller_0+0xff7faeac>
  8043d8:	d9002d17 	ldw	r4,180(sp)
  8043dc:	d9801e04 	addi	r6,sp,120
  8043e0:	b80b883a 	mov	r5,r23
  8043e4:	080910c0 	call	80910c <__sprint_r>
  8043e8:	103b531e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8043ec:	d8c02017 	ldw	r3,128(sp)
  8043f0:	dc401f17 	ldw	r17,124(sp)
  8043f4:	da000404 	addi	r8,sp,16
  8043f8:	003e8d06 	br	803e30 <__alt_mem_epcs_flash_controller_0+0xff7fae30>
  8043fc:	d9002d17 	ldw	r4,180(sp)
  804400:	d9801e04 	addi	r6,sp,120
  804404:	b80b883a 	mov	r5,r23
  804408:	080910c0 	call	80910c <__sprint_r>
  80440c:	103b4a1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804410:	d8c02017 	ldw	r3,128(sp)
  804414:	dc401f17 	ldw	r17,124(sp)
  804418:	dd800404 	addi	r22,sp,16
  80441c:	003e8f06 	br	803e5c <__alt_mem_epcs_flash_controller_0+0xff7fae5c>
  804420:	0027883a 	mov	r19,zero
  804424:	003f4a06 	br	804150 <__alt_mem_epcs_flash_controller_0+0xff7fb150>
  804428:	d9002d17 	ldw	r4,180(sp)
  80442c:	d9801e04 	addi	r6,sp,120
  804430:	b80b883a 	mov	r5,r23
  804434:	080910c0 	call	80910c <__sprint_r>
  804438:	103b3f1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  80443c:	d8c02017 	ldw	r3,128(sp)
  804440:	da000404 	addi	r8,sp,16
  804444:	003c7b06 	br	803634 <__alt_mem_epcs_flash_controller_0+0xff7fa634>
  804448:	d9402a17 	ldw	r5,168(sp)
  80444c:	04e7c83a 	sub	r19,zero,r19
  804450:	07000b44 	movi	fp,45
  804454:	9804c03a 	cmpne	r2,r19,zero
  804458:	05adc83a 	sub	r22,zero,r22
  80445c:	df002785 	stb	fp,158(sp)
  804460:	b0adc83a 	sub	r22,r22,r2
  804464:	28017b16 	blt	r5,zero,804a54 <___vfprintf_internal_r+0x1d2c>
  804468:	00bfdfc4 	movi	r2,-129
  80446c:	90a4703a 	and	r18,r18,r2
  804470:	003b8906 	br	803298 <__alt_mem_epcs_flash_controller_0+0xff7fa298>
  804474:	d9003617 	ldw	r4,216(sp)
  804478:	d9403817 	ldw	r5,224(sp)
  80447c:	da003d15 	stw	r8,244(sp)
  804480:	0808ec00 	call	808ec0 <__fpclassifyd>
  804484:	da003d17 	ldw	r8,244(sp)
  804488:	1000f026 	beq	r2,zero,80484c <___vfprintf_internal_r+0x1b24>
  80448c:	d9002a17 	ldw	r4,168(sp)
  804490:	05bff7c4 	movi	r22,-33
  804494:	00bfffc4 	movi	r2,-1
  804498:	8dac703a 	and	r22,r17,r22
  80449c:	20820026 	beq	r4,r2,804ca0 <___vfprintf_internal_r+0x1f78>
  8044a0:	008011c4 	movi	r2,71
  8044a4:	b081f726 	beq	r22,r2,804c84 <___vfprintf_internal_r+0x1f5c>
  8044a8:	d9003817 	ldw	r4,224(sp)
  8044ac:	90c04014 	ori	r3,r18,256
  8044b0:	d8c02c15 	stw	r3,176(sp)
  8044b4:	20021516 	blt	r4,zero,804d0c <___vfprintf_internal_r+0x1fe4>
  8044b8:	dcc03817 	ldw	r19,224(sp)
  8044bc:	d8002905 	stb	zero,164(sp)
  8044c0:	00801984 	movi	r2,102
  8044c4:	8881f926 	beq	r17,r2,804cac <___vfprintf_internal_r+0x1f84>
  8044c8:	00801184 	movi	r2,70
  8044cc:	88821c26 	beq	r17,r2,804d40 <___vfprintf_internal_r+0x2018>
  8044d0:	00801144 	movi	r2,69
  8044d4:	b081ef26 	beq	r22,r2,804c94 <___vfprintf_internal_r+0x1f6c>
  8044d8:	d8c02a17 	ldw	r3,168(sp)
  8044dc:	d8802104 	addi	r2,sp,132
  8044e0:	d8800315 	stw	r2,12(sp)
  8044e4:	d9403617 	ldw	r5,216(sp)
  8044e8:	d8802504 	addi	r2,sp,148
  8044ec:	d9002d17 	ldw	r4,180(sp)
  8044f0:	d8800215 	stw	r2,8(sp)
  8044f4:	d8802604 	addi	r2,sp,152
  8044f8:	d8c00015 	stw	r3,0(sp)
  8044fc:	d8800115 	stw	r2,4(sp)
  804500:	01c00084 	movi	r7,2
  804504:	980d883a 	mov	r6,r19
  804508:	d8c03c15 	stw	r3,240(sp)
  80450c:	da003d15 	stw	r8,244(sp)
  804510:	080550c0 	call	80550c <_dtoa_r>
  804514:	1021883a 	mov	r16,r2
  804518:	008019c4 	movi	r2,103
  80451c:	d8c03c17 	ldw	r3,240(sp)
  804520:	da003d17 	ldw	r8,244(sp)
  804524:	88817126 	beq	r17,r2,804aec <___vfprintf_internal_r+0x1dc4>
  804528:	008011c4 	movi	r2,71
  80452c:	88829126 	beq	r17,r2,804f74 <___vfprintf_internal_r+0x224c>
  804530:	80f9883a 	add	fp,r16,r3
  804534:	d9003617 	ldw	r4,216(sp)
  804538:	000d883a 	mov	r6,zero
  80453c:	000f883a 	mov	r7,zero
  804540:	980b883a 	mov	r5,r19
  804544:	da003d15 	stw	r8,244(sp)
  804548:	080cc400 	call	80cc40 <__eqdf2>
  80454c:	da003d17 	ldw	r8,244(sp)
  804550:	10018d26 	beq	r2,zero,804b88 <___vfprintf_internal_r+0x1e60>
  804554:	d8802117 	ldw	r2,132(sp)
  804558:	1700062e 	bgeu	r2,fp,804574 <___vfprintf_internal_r+0x184c>
  80455c:	01000c04 	movi	r4,48
  804560:	10c00044 	addi	r3,r2,1
  804564:	d8c02115 	stw	r3,132(sp)
  804568:	11000005 	stb	r4,0(r2)
  80456c:	d8802117 	ldw	r2,132(sp)
  804570:	173ffb36 	bltu	r2,fp,804560 <__alt_mem_epcs_flash_controller_0+0xff7fb560>
  804574:	1405c83a 	sub	r2,r2,r16
  804578:	d8803315 	stw	r2,204(sp)
  80457c:	008011c4 	movi	r2,71
  804580:	b0817626 	beq	r22,r2,804b5c <___vfprintf_internal_r+0x1e34>
  804584:	00801944 	movi	r2,101
  804588:	1442800e 	bge	r2,r17,804f8c <___vfprintf_internal_r+0x2264>
  80458c:	d8c02617 	ldw	r3,152(sp)
  804590:	00801984 	movi	r2,102
  804594:	d8c03215 	stw	r3,200(sp)
  804598:	8881fe26 	beq	r17,r2,804d94 <___vfprintf_internal_r+0x206c>
  80459c:	d8c03217 	ldw	r3,200(sp)
  8045a0:	d9003317 	ldw	r4,204(sp)
  8045a4:	1901dd16 	blt	r3,r4,804d1c <___vfprintf_internal_r+0x1ff4>
  8045a8:	9480004c 	andi	r18,r18,1
  8045ac:	90022b1e 	bne	r18,zero,804e5c <___vfprintf_internal_r+0x2134>
  8045b0:	1805883a 	mov	r2,r3
  8045b4:	18028316 	blt	r3,zero,804fc4 <___vfprintf_internal_r+0x229c>
  8045b8:	d8c03217 	ldw	r3,200(sp)
  8045bc:	044019c4 	movi	r17,103
  8045c0:	d8c02b15 	stw	r3,172(sp)
  8045c4:	df002907 	ldb	fp,164(sp)
  8045c8:	e001531e 	bne	fp,zero,804b18 <___vfprintf_internal_r+0x1df0>
  8045cc:	df002783 	ldbu	fp,158(sp)
  8045d0:	d8802915 	stw	r2,164(sp)
  8045d4:	dc802c17 	ldw	r18,176(sp)
  8045d8:	d8002a15 	stw	zero,168(sp)
  8045dc:	003baf06 	br	80349c <__alt_mem_epcs_flash_controller_0+0xff7fa49c>
  8045e0:	d8c02e17 	ldw	r3,184(sp)
  8045e4:	d9002e17 	ldw	r4,184(sp)
  8045e8:	d9402e17 	ldw	r5,184(sp)
  8045ec:	18c00017 	ldw	r3,0(r3)
  8045f0:	21000117 	ldw	r4,4(r4)
  8045f4:	29400204 	addi	r5,r5,8
  8045f8:	d8c03615 	stw	r3,216(sp)
  8045fc:	d9003815 	stw	r4,224(sp)
  804600:	d9402e15 	stw	r5,184(sp)
  804604:	003b5006 	br	803348 <__alt_mem_epcs_flash_controller_0+0xff7fa348>
  804608:	ac400007 	ldb	r17,0(r21)
  80460c:	003a2806 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  804610:	9080100c 	andi	r2,r18,64
  804614:	1000a826 	beq	r2,zero,8048b8 <___vfprintf_internal_r+0x1b90>
  804618:	d8c02e17 	ldw	r3,184(sp)
  80461c:	002d883a 	mov	r22,zero
  804620:	1cc0000b 	ldhu	r19,0(r3)
  804624:	18c00104 	addi	r3,r3,4
  804628:	d8c02e15 	stw	r3,184(sp)
  80462c:	003caf06 	br	8038ec <__alt_mem_epcs_flash_controller_0+0xff7fa8ec>
  804630:	d9002e17 	ldw	r4,184(sp)
  804634:	d9402a17 	ldw	r5,168(sp)
  804638:	002d883a 	mov	r22,zero
  80463c:	20800104 	addi	r2,r4,4
  804640:	24c00017 	ldw	r19,0(r4)
  804644:	283ebb0e 	bge	r5,zero,804134 <__alt_mem_epcs_flash_controller_0+0xff7fb134>
  804648:	003ef106 	br	804210 <__alt_mem_epcs_flash_controller_0+0xff7fb210>
  80464c:	9080040c 	andi	r2,r18,16
  804650:	1000921e 	bne	r2,zero,80489c <___vfprintf_internal_r+0x1b74>
  804654:	9480100c 	andi	r18,r18,64
  804658:	90013926 	beq	r18,zero,804b40 <___vfprintf_internal_r+0x1e18>
  80465c:	d9402e17 	ldw	r5,184(sp)
  804660:	d8c02f17 	ldw	r3,188(sp)
  804664:	28800017 	ldw	r2,0(r5)
  804668:	29400104 	addi	r5,r5,4
  80466c:	d9402e15 	stw	r5,184(sp)
  804670:	10c0000d 	sth	r3,0(r2)
  804674:	0039e406 	br	802e08 <__alt_mem_epcs_flash_controller_0+0xff7f9e08>
  804678:	9080100c 	andi	r2,r18,64
  80467c:	10008026 	beq	r2,zero,804880 <___vfprintf_internal_r+0x1b58>
  804680:	d8802e17 	ldw	r2,184(sp)
  804684:	14c0000f 	ldh	r19,0(r2)
  804688:	10800104 	addi	r2,r2,4
  80468c:	d8802e15 	stw	r2,184(sp)
  804690:	982dd7fa 	srai	r22,r19,31
  804694:	b005883a 	mov	r2,r22
  804698:	003af706 	br	803278 <__alt_mem_epcs_flash_controller_0+0xff7fa278>
  80469c:	9080100c 	andi	r2,r18,64
  8046a0:	d8002785 	stb	zero,158(sp)
  8046a4:	10008a1e 	bne	r2,zero,8048d0 <___vfprintf_internal_r+0x1ba8>
  8046a8:	d9002e17 	ldw	r4,184(sp)
  8046ac:	d9402a17 	ldw	r5,168(sp)
  8046b0:	002d883a 	mov	r22,zero
  8046b4:	20800104 	addi	r2,r4,4
  8046b8:	24c00017 	ldw	r19,0(r4)
  8046bc:	283e4b0e 	bge	r5,zero,803fec <__alt_mem_epcs_flash_controller_0+0xff7fafec>
  8046c0:	9d86b03a 	or	r3,r19,r22
  8046c4:	d8802e15 	stw	r2,184(sp)
  8046c8:	183e4c1e 	bne	r3,zero,803ffc <__alt_mem_epcs_flash_controller_0+0xff7faffc>
  8046cc:	0039883a 	mov	fp,zero
  8046d0:	0005883a 	mov	r2,zero
  8046d4:	003d4006 	br	803bd8 <__alt_mem_epcs_flash_controller_0+0xff7fabd8>
  8046d8:	014020b4 	movhi	r5,130
  8046dc:	296fa084 	addi	r5,r5,-16766
  8046e0:	d9402c15 	stw	r5,176(sp)
  8046e4:	d9402c17 	ldw	r5,176(sp)
  8046e8:	1c47883a 	add	r3,r3,r17
  8046ec:	10800044 	addi	r2,r2,1
  8046f0:	41400015 	stw	r5,0(r8)
  8046f4:	44400115 	stw	r17,4(r8)
  8046f8:	d8c02015 	stw	r3,128(sp)
  8046fc:	d8801f15 	stw	r2,124(sp)
  804700:	010001c4 	movi	r4,7
  804704:	20bec816 	blt	r4,r2,804228 <__alt_mem_epcs_flash_controller_0+0xff7fb228>
  804708:	42000204 	addi	r8,r8,8
  80470c:	003ecd06 	br	804244 <__alt_mem_epcs_flash_controller_0+0xff7fb244>
  804710:	d9002a17 	ldw	r4,168(sp)
  804714:	d8002785 	stb	zero,158(sp)
  804718:	203d2d16 	blt	r4,zero,803bd0 <__alt_mem_epcs_flash_controller_0+0xff7fabd0>
  80471c:	00bfdfc4 	movi	r2,-129
  804720:	90a4703a 	and	r18,r18,r2
  804724:	003a6106 	br	8030ac <__alt_mem_epcs_flash_controller_0+0xff7fa0ac>
  804728:	010020b4 	movhi	r4,130
  80472c:	212fa084 	addi	r4,r4,-16766
  804730:	d9002c15 	stw	r4,176(sp)
  804734:	003bea06 	br	8036e0 <__alt_mem_epcs_flash_controller_0+0xff7fa6e0>
  804738:	d9002d17 	ldw	r4,180(sp)
  80473c:	d9801e04 	addi	r6,sp,120
  804740:	b80b883a 	mov	r5,r23
  804744:	080910c0 	call	80910c <__sprint_r>
  804748:	103a7b1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  80474c:	d8c02017 	ldw	r3,128(sp)
  804750:	da000404 	addi	r8,sp,16
  804754:	003d4106 	br	803c5c <__alt_mem_epcs_flash_controller_0+0xff7fac5c>
  804758:	d8801f17 	ldw	r2,124(sp)
  80475c:	014020b4 	movhi	r5,130
  804760:	01000044 	movi	r4,1
  804764:	18c00044 	addi	r3,r3,1
  804768:	10800044 	addi	r2,r2,1
  80476c:	296fa004 	addi	r5,r5,-16768
  804770:	41000115 	stw	r4,4(r8)
  804774:	41400015 	stw	r5,0(r8)
  804778:	d8c02015 	stw	r3,128(sp)
  80477c:	d8801f15 	stw	r2,124(sp)
  804780:	010001c4 	movi	r4,7
  804784:	20805c16 	blt	r4,r2,8048f8 <___vfprintf_internal_r+0x1bd0>
  804788:	42000204 	addi	r8,r8,8
  80478c:	8800041e 	bne	r17,zero,8047a0 <___vfprintf_internal_r+0x1a78>
  804790:	d8803317 	ldw	r2,204(sp)
  804794:	1000021e 	bne	r2,zero,8047a0 <___vfprintf_internal_r+0x1a78>
  804798:	9080004c 	andi	r2,r18,1
  80479c:	103be726 	beq	r2,zero,80373c <__alt_mem_epcs_flash_controller_0+0xff7fa73c>
  8047a0:	d9003717 	ldw	r4,220(sp)
  8047a4:	d8801f17 	ldw	r2,124(sp)
  8047a8:	d9403417 	ldw	r5,208(sp)
  8047ac:	20c7883a 	add	r3,r4,r3
  8047b0:	10800044 	addi	r2,r2,1
  8047b4:	41000115 	stw	r4,4(r8)
  8047b8:	41400015 	stw	r5,0(r8)
  8047bc:	d8c02015 	stw	r3,128(sp)
  8047c0:	d8801f15 	stw	r2,124(sp)
  8047c4:	010001c4 	movi	r4,7
  8047c8:	20812116 	blt	r4,r2,804c50 <___vfprintf_internal_r+0x1f28>
  8047cc:	42000204 	addi	r8,r8,8
  8047d0:	0463c83a 	sub	r17,zero,r17
  8047d4:	0440730e 	bge	zero,r17,8049a4 <___vfprintf_internal_r+0x1c7c>
  8047d8:	05800404 	movi	r22,16
  8047dc:	b440860e 	bge	r22,r17,8049f8 <___vfprintf_internal_r+0x1cd0>
  8047e0:	014020b4 	movhi	r5,130
  8047e4:	296fa084 	addi	r5,r5,-16766
  8047e8:	d9402c15 	stw	r5,176(sp)
  8047ec:	070001c4 	movi	fp,7
  8047f0:	dcc02d17 	ldw	r19,180(sp)
  8047f4:	00000306 	br	804804 <___vfprintf_internal_r+0x1adc>
  8047f8:	42000204 	addi	r8,r8,8
  8047fc:	8c7ffc04 	addi	r17,r17,-16
  804800:	b440800e 	bge	r22,r17,804a04 <___vfprintf_internal_r+0x1cdc>
  804804:	18c00404 	addi	r3,r3,16
  804808:	10800044 	addi	r2,r2,1
  80480c:	45000015 	stw	r20,0(r8)
  804810:	45800115 	stw	r22,4(r8)
  804814:	d8c02015 	stw	r3,128(sp)
  804818:	d8801f15 	stw	r2,124(sp)
  80481c:	e0bff60e 	bge	fp,r2,8047f8 <__alt_mem_epcs_flash_controller_0+0xff7fb7f8>
  804820:	d9801e04 	addi	r6,sp,120
  804824:	b80b883a 	mov	r5,r23
  804828:	9809883a 	mov	r4,r19
  80482c:	080910c0 	call	80910c <__sprint_r>
  804830:	103a411e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804834:	d8c02017 	ldw	r3,128(sp)
  804838:	d8801f17 	ldw	r2,124(sp)
  80483c:	da000404 	addi	r8,sp,16
  804840:	003fee06 	br	8047fc <__alt_mem_epcs_flash_controller_0+0xff7fb7fc>
  804844:	00bfffc4 	movi	r2,-1
  804848:	003a3f06 	br	803148 <__alt_mem_epcs_flash_controller_0+0xff7fa148>
  80484c:	008011c4 	movi	r2,71
  804850:	1440b816 	blt	r2,r17,804b34 <___vfprintf_internal_r+0x1e0c>
  804854:	040020b4 	movhi	r16,130
  804858:	842f9204 	addi	r16,r16,-16824
  80485c:	00c000c4 	movi	r3,3
  804860:	00bfdfc4 	movi	r2,-129
  804864:	d8c02915 	stw	r3,164(sp)
  804868:	90a4703a 	and	r18,r18,r2
  80486c:	df002783 	ldbu	fp,158(sp)
  804870:	d8c02b15 	stw	r3,172(sp)
  804874:	d8002a15 	stw	zero,168(sp)
  804878:	d8003215 	stw	zero,200(sp)
  80487c:	003b0706 	br	80349c <__alt_mem_epcs_flash_controller_0+0xff7fa49c>
  804880:	d8c02e17 	ldw	r3,184(sp)
  804884:	1cc00017 	ldw	r19,0(r3)
  804888:	18c00104 	addi	r3,r3,4
  80488c:	d8c02e15 	stw	r3,184(sp)
  804890:	982dd7fa 	srai	r22,r19,31
  804894:	b005883a 	mov	r2,r22
  804898:	003a7706 	br	803278 <__alt_mem_epcs_flash_controller_0+0xff7fa278>
  80489c:	d8c02e17 	ldw	r3,184(sp)
  8048a0:	d9002f17 	ldw	r4,188(sp)
  8048a4:	18800017 	ldw	r2,0(r3)
  8048a8:	18c00104 	addi	r3,r3,4
  8048ac:	d8c02e15 	stw	r3,184(sp)
  8048b0:	11000015 	stw	r4,0(r2)
  8048b4:	00395406 	br	802e08 <__alt_mem_epcs_flash_controller_0+0xff7f9e08>
  8048b8:	d9002e17 	ldw	r4,184(sp)
  8048bc:	002d883a 	mov	r22,zero
  8048c0:	24c00017 	ldw	r19,0(r4)
  8048c4:	21000104 	addi	r4,r4,4
  8048c8:	d9002e15 	stw	r4,184(sp)
  8048cc:	003c0706 	br	8038ec <__alt_mem_epcs_flash_controller_0+0xff7fa8ec>
  8048d0:	d9402e17 	ldw	r5,184(sp)
  8048d4:	d8c02a17 	ldw	r3,168(sp)
  8048d8:	002d883a 	mov	r22,zero
  8048dc:	28800104 	addi	r2,r5,4
  8048e0:	2cc0000b 	ldhu	r19,0(r5)
  8048e4:	183dc10e 	bge	r3,zero,803fec <__alt_mem_epcs_flash_controller_0+0xff7fafec>
  8048e8:	003f7506 	br	8046c0 <__alt_mem_epcs_flash_controller_0+0xff7fb6c0>
  8048ec:	040020b4 	movhi	r16,130
  8048f0:	842f9004 	addi	r16,r16,-16832
  8048f4:	003aa706 	br	803394 <__alt_mem_epcs_flash_controller_0+0xff7fa394>
  8048f8:	d9002d17 	ldw	r4,180(sp)
  8048fc:	d9801e04 	addi	r6,sp,120
  804900:	b80b883a 	mov	r5,r23
  804904:	080910c0 	call	80910c <__sprint_r>
  804908:	103a0b1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  80490c:	dc402617 	ldw	r17,152(sp)
  804910:	d8c02017 	ldw	r3,128(sp)
  804914:	da000404 	addi	r8,sp,16
  804918:	003f9c06 	br	80478c <__alt_mem_epcs_flash_controller_0+0xff7fb78c>
  80491c:	ac400043 	ldbu	r17,1(r21)
  804920:	84000814 	ori	r16,r16,32
  804924:	ad400044 	addi	r21,r21,1
  804928:	8c403fcc 	andi	r17,r17,255
  80492c:	8c40201c 	xori	r17,r17,128
  804930:	8c7fe004 	addi	r17,r17,-128
  804934:	00395e06 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  804938:	d8c02e15 	stw	r3,184(sp)
  80493c:	0039883a 	mov	fp,zero
  804940:	003e3506 	br	804218 <__alt_mem_epcs_flash_controller_0+0xff7fb218>
  804944:	d9002d17 	ldw	r4,180(sp)
  804948:	d9801e04 	addi	r6,sp,120
  80494c:	b80b883a 	mov	r5,r23
  804950:	080910c0 	call	80910c <__sprint_r>
  804954:	1039f81e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804958:	d8c02017 	ldw	r3,128(sp)
  80495c:	da000404 	addi	r8,sp,16
  804960:	003cd006 	br	803ca4 <__alt_mem_epcs_flash_controller_0+0xff7faca4>
  804964:	8009883a 	mov	r4,r16
  804968:	df003d15 	stw	fp,244(sp)
  80496c:	0802c900 	call	802c90 <strlen>
  804970:	d8802b15 	stw	r2,172(sp)
  804974:	da003d17 	ldw	r8,244(sp)
  804978:	103c200e 	bge	r2,zero,8039fc <__alt_mem_epcs_flash_controller_0+0xff7fa9fc>
  80497c:	0005883a 	mov	r2,zero
  804980:	003c1e06 	br	8039fc <__alt_mem_epcs_flash_controller_0+0xff7fa9fc>
  804984:	d9002d17 	ldw	r4,180(sp)
  804988:	d9801e04 	addi	r6,sp,120
  80498c:	b80b883a 	mov	r5,r23
  804990:	080910c0 	call	80910c <__sprint_r>
  804994:	1039e81e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804998:	d8c02017 	ldw	r3,128(sp)
  80499c:	d8801f17 	ldw	r2,124(sp)
  8049a0:	da000404 	addi	r8,sp,16
  8049a4:	d9403317 	ldw	r5,204(sp)
  8049a8:	10800044 	addi	r2,r2,1
  8049ac:	44000015 	stw	r16,0(r8)
  8049b0:	28c7883a 	add	r3,r5,r3
  8049b4:	003b5b06 	br	803724 <__alt_mem_epcs_flash_controller_0+0xff7fa724>
  8049b8:	010020b4 	movhi	r4,130
  8049bc:	212fa484 	addi	r4,r4,-16750
  8049c0:	d9003515 	stw	r4,212(sp)
  8049c4:	003af206 	br	803590 <__alt_mem_epcs_flash_controller_0+0xff7fa590>
  8049c8:	013fffc4 	movi	r4,-1
  8049cc:	003a0806 	br	8031f0 <__alt_mem_epcs_flash_controller_0+0xff7fa1f0>
  8049d0:	0023883a 	mov	r17,zero
  8049d4:	003d9d06 	br	80404c <__alt_mem_epcs_flash_controller_0+0xff7fb04c>
  8049d8:	d9002d17 	ldw	r4,180(sp)
  8049dc:	d9801e04 	addi	r6,sp,120
  8049e0:	b80b883a 	mov	r5,r23
  8049e4:	080910c0 	call	80910c <__sprint_r>
  8049e8:	1039d31e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  8049ec:	d8c02017 	ldw	r3,128(sp)
  8049f0:	da000404 	addi	r8,sp,16
  8049f4:	003d9406 	br	804048 <__alt_mem_epcs_flash_controller_0+0xff7fb048>
  8049f8:	010020b4 	movhi	r4,130
  8049fc:	212fa084 	addi	r4,r4,-16766
  804a00:	d9002c15 	stw	r4,176(sp)
  804a04:	d9002c17 	ldw	r4,176(sp)
  804a08:	1c47883a 	add	r3,r3,r17
  804a0c:	10800044 	addi	r2,r2,1
  804a10:	41000015 	stw	r4,0(r8)
  804a14:	44400115 	stw	r17,4(r8)
  804a18:	d8c02015 	stw	r3,128(sp)
  804a1c:	d8801f15 	stw	r2,124(sp)
  804a20:	010001c4 	movi	r4,7
  804a24:	20bfd716 	blt	r4,r2,804984 <__alt_mem_epcs_flash_controller_0+0xff7fb984>
  804a28:	42000204 	addi	r8,r8,8
  804a2c:	003fdd06 	br	8049a4 <__alt_mem_epcs_flash_controller_0+0xff7fb9a4>
  804a30:	d9002d17 	ldw	r4,180(sp)
  804a34:	d9801e04 	addi	r6,sp,120
  804a38:	b80b883a 	mov	r5,r23
  804a3c:	080910c0 	call	80910c <__sprint_r>
  804a40:	1039bd1e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804a44:	d8802617 	ldw	r2,152(sp)
  804a48:	d8c02017 	ldw	r3,128(sp)
  804a4c:	da000404 	addi	r8,sp,16
  804a50:	003e1006 	br	804294 <__alt_mem_epcs_flash_controller_0+0xff7fb294>
  804a54:	00800044 	movi	r2,1
  804a58:	10803fcc 	andi	r2,r2,255
  804a5c:	00c00044 	movi	r3,1
  804a60:	10fa0d26 	beq	r2,r3,803298 <__alt_mem_epcs_flash_controller_0+0xff7fa298>
  804a64:	00c00084 	movi	r3,2
  804a68:	10fbaf26 	beq	r2,r3,803928 <__alt_mem_epcs_flash_controller_0+0xff7fa928>
  804a6c:	003a6d06 	br	803424 <__alt_mem_epcs_flash_controller_0+0xff7fa424>
  804a70:	010020b4 	movhi	r4,130
  804a74:	212fa484 	addi	r4,r4,-16750
  804a78:	d9003515 	stw	r4,212(sp)
  804a7c:	003b5406 	br	8037d0 <__alt_mem_epcs_flash_controller_0+0xff7fa7d0>
  804a80:	d8802a17 	ldw	r2,168(sp)
  804a84:	00c00184 	movi	r3,6
  804a88:	1880012e 	bgeu	r3,r2,804a90 <___vfprintf_internal_r+0x1d68>
  804a8c:	1805883a 	mov	r2,r3
  804a90:	d8802b15 	stw	r2,172(sp)
  804a94:	1000ef16 	blt	r2,zero,804e54 <___vfprintf_internal_r+0x212c>
  804a98:	040020b4 	movhi	r16,130
  804a9c:	d8802915 	stw	r2,164(sp)
  804aa0:	dcc02e15 	stw	r19,184(sp)
  804aa4:	d8002a15 	stw	zero,168(sp)
  804aa8:	d8003215 	stw	zero,200(sp)
  804aac:	842f9e04 	addi	r16,r16,-16776
  804ab0:	0039883a 	mov	fp,zero
  804ab4:	003a8006 	br	8034b8 <__alt_mem_epcs_flash_controller_0+0xff7fa4b8>
  804ab8:	0021883a 	mov	r16,zero
  804abc:	003e0706 	br	8042dc <__alt_mem_epcs_flash_controller_0+0xff7fb2dc>
  804ac0:	d9002d17 	ldw	r4,180(sp)
  804ac4:	d9801e04 	addi	r6,sp,120
  804ac8:	b80b883a 	mov	r5,r23
  804acc:	080910c0 	call	80910c <__sprint_r>
  804ad0:	1039991e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804ad4:	d8802617 	ldw	r2,152(sp)
  804ad8:	d9403317 	ldw	r5,204(sp)
  804adc:	d8c02017 	ldw	r3,128(sp)
  804ae0:	da000404 	addi	r8,sp,16
  804ae4:	2885c83a 	sub	r2,r5,r2
  804ae8:	003dfb06 	br	8042d8 <__alt_mem_epcs_flash_controller_0+0xff7fb2d8>
  804aec:	9080004c 	andi	r2,r18,1
  804af0:	103e8f1e 	bne	r2,zero,804530 <__alt_mem_epcs_flash_controller_0+0xff7fb530>
  804af4:	d8802117 	ldw	r2,132(sp)
  804af8:	003e9e06 	br	804574 <__alt_mem_epcs_flash_controller_0+0xff7fb574>
  804afc:	1025883a 	mov	r18,r2
  804b00:	0039883a 	mov	fp,zero
  804b04:	00800084 	movi	r2,2
  804b08:	003fd306 	br	804a58 <__alt_mem_epcs_flash_controller_0+0xff7fba58>
  804b0c:	07000b44 	movi	fp,45
  804b10:	df002785 	stb	fp,158(sp)
  804b14:	003a1b06 	br	803384 <__alt_mem_epcs_flash_controller_0+0xff7fa384>
  804b18:	00c00b44 	movi	r3,45
  804b1c:	d8c02785 	stb	r3,158(sp)
  804b20:	d8802915 	stw	r2,164(sp)
  804b24:	dc802c17 	ldw	r18,176(sp)
  804b28:	d8002a15 	stw	zero,168(sp)
  804b2c:	07000b44 	movi	fp,45
  804b30:	003a5e06 	br	8034ac <__alt_mem_epcs_flash_controller_0+0xff7fa4ac>
  804b34:	040020b4 	movhi	r16,130
  804b38:	842f9304 	addi	r16,r16,-16820
  804b3c:	003f4706 	br	80485c <__alt_mem_epcs_flash_controller_0+0xff7fb85c>
  804b40:	d9002e17 	ldw	r4,184(sp)
  804b44:	d9402f17 	ldw	r5,188(sp)
  804b48:	20800017 	ldw	r2,0(r4)
  804b4c:	21000104 	addi	r4,r4,4
  804b50:	d9002e15 	stw	r4,184(sp)
  804b54:	11400015 	stw	r5,0(r2)
  804b58:	0038ab06 	br	802e08 <__alt_mem_epcs_flash_controller_0+0xff7f9e08>
  804b5c:	dd802617 	ldw	r22,152(sp)
  804b60:	00bfff44 	movi	r2,-3
  804b64:	b0801c16 	blt	r22,r2,804bd8 <___vfprintf_internal_r+0x1eb0>
  804b68:	d9402a17 	ldw	r5,168(sp)
  804b6c:	2d801a16 	blt	r5,r22,804bd8 <___vfprintf_internal_r+0x1eb0>
  804b70:	dd803215 	stw	r22,200(sp)
  804b74:	003e8906 	br	80459c <__alt_mem_epcs_flash_controller_0+0xff7fb59c>
  804b78:	010020b4 	movhi	r4,130
  804b7c:	212fa084 	addi	r4,r4,-16766
  804b80:	d9002c15 	stw	r4,176(sp)
  804b84:	003c9106 	br	803dcc <__alt_mem_epcs_flash_controller_0+0xff7fadcc>
  804b88:	e005883a 	mov	r2,fp
  804b8c:	003e7906 	br	804574 <__alt_mem_epcs_flash_controller_0+0xff7fb574>
  804b90:	d9002a17 	ldw	r4,168(sp)
  804b94:	df002783 	ldbu	fp,158(sp)
  804b98:	dcc02e15 	stw	r19,184(sp)
  804b9c:	d9002915 	stw	r4,164(sp)
  804ba0:	d9002b15 	stw	r4,172(sp)
  804ba4:	d8002a15 	stw	zero,168(sp)
  804ba8:	d8003215 	stw	zero,200(sp)
  804bac:	003a3b06 	br	80349c <__alt_mem_epcs_flash_controller_0+0xff7fa49c>
  804bb0:	9080004c 	andi	r2,r18,1
  804bb4:	0039883a 	mov	fp,zero
  804bb8:	10000426 	beq	r2,zero,804bcc <___vfprintf_internal_r+0x1ea4>
  804bbc:	00800c04 	movi	r2,48
  804bc0:	dc001dc4 	addi	r16,sp,119
  804bc4:	d8801dc5 	stb	r2,119(sp)
  804bc8:	003b6406 	br	80395c <__alt_mem_epcs_flash_controller_0+0xff7fa95c>
  804bcc:	d8002b15 	stw	zero,172(sp)
  804bd0:	dc001e04 	addi	r16,sp,120
  804bd4:	003a2b06 	br	803484 <__alt_mem_epcs_flash_controller_0+0xff7fa484>
  804bd8:	8c7fff84 	addi	r17,r17,-2
  804bdc:	b5bfffc4 	addi	r22,r22,-1
  804be0:	dd802615 	stw	r22,152(sp)
  804be4:	dc4022c5 	stb	r17,139(sp)
  804be8:	b000bf16 	blt	r22,zero,804ee8 <___vfprintf_internal_r+0x21c0>
  804bec:	00800ac4 	movi	r2,43
  804bf0:	d8802305 	stb	r2,140(sp)
  804bf4:	00800244 	movi	r2,9
  804bf8:	15807016 	blt	r2,r22,804dbc <___vfprintf_internal_r+0x2094>
  804bfc:	00800c04 	movi	r2,48
  804c00:	b5800c04 	addi	r22,r22,48
  804c04:	d8802345 	stb	r2,141(sp)
  804c08:	dd802385 	stb	r22,142(sp)
  804c0c:	d88023c4 	addi	r2,sp,143
  804c10:	df0022c4 	addi	fp,sp,139
  804c14:	d8c03317 	ldw	r3,204(sp)
  804c18:	1739c83a 	sub	fp,r2,fp
  804c1c:	d9003317 	ldw	r4,204(sp)
  804c20:	e0c7883a 	add	r3,fp,r3
  804c24:	df003a15 	stw	fp,232(sp)
  804c28:	d8c02b15 	stw	r3,172(sp)
  804c2c:	00800044 	movi	r2,1
  804c30:	1100b30e 	bge	r2,r4,804f00 <___vfprintf_internal_r+0x21d8>
  804c34:	d8c02b17 	ldw	r3,172(sp)
  804c38:	18c00044 	addi	r3,r3,1
  804c3c:	d8c02b15 	stw	r3,172(sp)
  804c40:	1805883a 	mov	r2,r3
  804c44:	1800ac16 	blt	r3,zero,804ef8 <___vfprintf_internal_r+0x21d0>
  804c48:	d8003215 	stw	zero,200(sp)
  804c4c:	003e5d06 	br	8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804c50:	d9002d17 	ldw	r4,180(sp)
  804c54:	d9801e04 	addi	r6,sp,120
  804c58:	b80b883a 	mov	r5,r23
  804c5c:	080910c0 	call	80910c <__sprint_r>
  804c60:	1039351e 	bne	r2,zero,803138 <__alt_mem_epcs_flash_controller_0+0xff7fa138>
  804c64:	dc402617 	ldw	r17,152(sp)
  804c68:	d8c02017 	ldw	r3,128(sp)
  804c6c:	d8801f17 	ldw	r2,124(sp)
  804c70:	da000404 	addi	r8,sp,16
  804c74:	003ed606 	br	8047d0 <__alt_mem_epcs_flash_controller_0+0xff7fb7d0>
  804c78:	182b883a 	mov	r21,r3
  804c7c:	d8002a15 	stw	zero,168(sp)
  804c80:	00388c06 	br	802eb4 <__alt_mem_epcs_flash_controller_0+0xff7f9eb4>
  804c84:	d8802a17 	ldw	r2,168(sp)
  804c88:	103e071e 	bne	r2,zero,8044a8 <__alt_mem_epcs_flash_controller_0+0xff7fb4a8>
  804c8c:	dc002a15 	stw	r16,168(sp)
  804c90:	003e0506 	br	8044a8 <__alt_mem_epcs_flash_controller_0+0xff7fb4a8>
  804c94:	d9002a17 	ldw	r4,168(sp)
  804c98:	20c00044 	addi	r3,r4,1
  804c9c:	003e0f06 	br	8044dc <__alt_mem_epcs_flash_controller_0+0xff7fb4dc>
  804ca0:	01400184 	movi	r5,6
  804ca4:	d9402a15 	stw	r5,168(sp)
  804ca8:	003dff06 	br	8044a8 <__alt_mem_epcs_flash_controller_0+0xff7fb4a8>
  804cac:	d8802104 	addi	r2,sp,132
  804cb0:	d8800315 	stw	r2,12(sp)
  804cb4:	d8802504 	addi	r2,sp,148
  804cb8:	d8800215 	stw	r2,8(sp)
  804cbc:	d8802604 	addi	r2,sp,152
  804cc0:	d8800115 	stw	r2,4(sp)
  804cc4:	d8802a17 	ldw	r2,168(sp)
  804cc8:	d9403617 	ldw	r5,216(sp)
  804ccc:	d9002d17 	ldw	r4,180(sp)
  804cd0:	d8800015 	stw	r2,0(sp)
  804cd4:	01c000c4 	movi	r7,3
  804cd8:	980d883a 	mov	r6,r19
  804cdc:	da003d15 	stw	r8,244(sp)
  804ce0:	080550c0 	call	80550c <_dtoa_r>
  804ce4:	d8c02a17 	ldw	r3,168(sp)
  804ce8:	da003d17 	ldw	r8,244(sp)
  804cec:	1021883a 	mov	r16,r2
  804cf0:	10f9883a 	add	fp,r2,r3
  804cf4:	81000007 	ldb	r4,0(r16)
  804cf8:	00800c04 	movi	r2,48
  804cfc:	20805e26 	beq	r4,r2,804e78 <___vfprintf_internal_r+0x2150>
  804d00:	d8c02617 	ldw	r3,152(sp)
  804d04:	e0f9883a 	add	fp,fp,r3
  804d08:	003e0a06 	br	804534 <__alt_mem_epcs_flash_controller_0+0xff7fb534>
  804d0c:	00c00b44 	movi	r3,45
  804d10:	24e0003c 	xorhi	r19,r4,32768
  804d14:	d8c02905 	stb	r3,164(sp)
  804d18:	003de906 	br	8044c0 <__alt_mem_epcs_flash_controller_0+0xff7fb4c0>
  804d1c:	d8c03217 	ldw	r3,200(sp)
  804d20:	00c07a0e 	bge	zero,r3,804f0c <___vfprintf_internal_r+0x21e4>
  804d24:	00800044 	movi	r2,1
  804d28:	d9003317 	ldw	r4,204(sp)
  804d2c:	1105883a 	add	r2,r2,r4
  804d30:	d8802b15 	stw	r2,172(sp)
  804d34:	10004e16 	blt	r2,zero,804e70 <___vfprintf_internal_r+0x2148>
  804d38:	044019c4 	movi	r17,103
  804d3c:	003e2106 	br	8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804d40:	d9002a17 	ldw	r4,168(sp)
  804d44:	d8802104 	addi	r2,sp,132
  804d48:	d8800315 	stw	r2,12(sp)
  804d4c:	d9000015 	stw	r4,0(sp)
  804d50:	d8802504 	addi	r2,sp,148
  804d54:	d9403617 	ldw	r5,216(sp)
  804d58:	d9002d17 	ldw	r4,180(sp)
  804d5c:	d8800215 	stw	r2,8(sp)
  804d60:	d8802604 	addi	r2,sp,152
  804d64:	d8800115 	stw	r2,4(sp)
  804d68:	01c000c4 	movi	r7,3
  804d6c:	980d883a 	mov	r6,r19
  804d70:	da003d15 	stw	r8,244(sp)
  804d74:	080550c0 	call	80550c <_dtoa_r>
  804d78:	d8c02a17 	ldw	r3,168(sp)
  804d7c:	da003d17 	ldw	r8,244(sp)
  804d80:	1021883a 	mov	r16,r2
  804d84:	00801184 	movi	r2,70
  804d88:	80f9883a 	add	fp,r16,r3
  804d8c:	88bfd926 	beq	r17,r2,804cf4 <__alt_mem_epcs_flash_controller_0+0xff7fbcf4>
  804d90:	003de806 	br	804534 <__alt_mem_epcs_flash_controller_0+0xff7fb534>
  804d94:	d9002a17 	ldw	r4,168(sp)
  804d98:	00c04d0e 	bge	zero,r3,804ed0 <___vfprintf_internal_r+0x21a8>
  804d9c:	2000441e 	bne	r4,zero,804eb0 <___vfprintf_internal_r+0x2188>
  804da0:	9480004c 	andi	r18,r18,1
  804da4:	9000421e 	bne	r18,zero,804eb0 <___vfprintf_internal_r+0x2188>
  804da8:	1805883a 	mov	r2,r3
  804dac:	18006f16 	blt	r3,zero,804f6c <___vfprintf_internal_r+0x2244>
  804db0:	d8c03217 	ldw	r3,200(sp)
  804db4:	d8c02b15 	stw	r3,172(sp)
  804db8:	003e0206 	br	8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804dbc:	df0022c4 	addi	fp,sp,139
  804dc0:	dc002a15 	stw	r16,168(sp)
  804dc4:	4027883a 	mov	r19,r8
  804dc8:	e021883a 	mov	r16,fp
  804dcc:	b009883a 	mov	r4,r22
  804dd0:	01400284 	movi	r5,10
  804dd4:	08012240 	call	801224 <__modsi3>
  804dd8:	10800c04 	addi	r2,r2,48
  804ddc:	843fffc4 	addi	r16,r16,-1
  804de0:	b009883a 	mov	r4,r22
  804de4:	01400284 	movi	r5,10
  804de8:	80800005 	stb	r2,0(r16)
  804dec:	08011a00 	call	8011a0 <__divsi3>
  804df0:	102d883a 	mov	r22,r2
  804df4:	00800244 	movi	r2,9
  804df8:	15bff416 	blt	r2,r22,804dcc <__alt_mem_epcs_flash_controller_0+0xff7fbdcc>
  804dfc:	9811883a 	mov	r8,r19
  804e00:	b0800c04 	addi	r2,r22,48
  804e04:	8027883a 	mov	r19,r16
  804e08:	997fffc4 	addi	r5,r19,-1
  804e0c:	98bfffc5 	stb	r2,-1(r19)
  804e10:	dc002a17 	ldw	r16,168(sp)
  804e14:	2f006d2e 	bgeu	r5,fp,804fcc <___vfprintf_internal_r+0x22a4>
  804e18:	d9c02384 	addi	r7,sp,142
  804e1c:	3ccfc83a 	sub	r7,r7,r19
  804e20:	d9002344 	addi	r4,sp,141
  804e24:	e1cf883a 	add	r7,fp,r7
  804e28:	00000106 	br	804e30 <___vfprintf_internal_r+0x2108>
  804e2c:	28800003 	ldbu	r2,0(r5)
  804e30:	20800005 	stb	r2,0(r4)
  804e34:	21000044 	addi	r4,r4,1
  804e38:	29400044 	addi	r5,r5,1
  804e3c:	393ffb1e 	bne	r7,r4,804e2c <__alt_mem_epcs_flash_controller_0+0xff7fbe2c>
  804e40:	d8802304 	addi	r2,sp,140
  804e44:	14c5c83a 	sub	r2,r2,r19
  804e48:	d8c02344 	addi	r3,sp,141
  804e4c:	1885883a 	add	r2,r3,r2
  804e50:	003f7006 	br	804c14 <__alt_mem_epcs_flash_controller_0+0xff7fbc14>
  804e54:	0005883a 	mov	r2,zero
  804e58:	003f0f06 	br	804a98 <__alt_mem_epcs_flash_controller_0+0xff7fba98>
  804e5c:	d8c03217 	ldw	r3,200(sp)
  804e60:	18c00044 	addi	r3,r3,1
  804e64:	d8c02b15 	stw	r3,172(sp)
  804e68:	1805883a 	mov	r2,r3
  804e6c:	183fb20e 	bge	r3,zero,804d38 <__alt_mem_epcs_flash_controller_0+0xff7fbd38>
  804e70:	0005883a 	mov	r2,zero
  804e74:	003fb006 	br	804d38 <__alt_mem_epcs_flash_controller_0+0xff7fbd38>
  804e78:	d9003617 	ldw	r4,216(sp)
  804e7c:	000d883a 	mov	r6,zero
  804e80:	000f883a 	mov	r7,zero
  804e84:	980b883a 	mov	r5,r19
  804e88:	d8c03c15 	stw	r3,240(sp)
  804e8c:	da003d15 	stw	r8,244(sp)
  804e90:	080cc400 	call	80cc40 <__eqdf2>
  804e94:	d8c03c17 	ldw	r3,240(sp)
  804e98:	da003d17 	ldw	r8,244(sp)
  804e9c:	103f9826 	beq	r2,zero,804d00 <__alt_mem_epcs_flash_controller_0+0xff7fbd00>
  804ea0:	00800044 	movi	r2,1
  804ea4:	10c7c83a 	sub	r3,r2,r3
  804ea8:	d8c02615 	stw	r3,152(sp)
  804eac:	003f9506 	br	804d04 <__alt_mem_epcs_flash_controller_0+0xff7fbd04>
  804eb0:	d9002a17 	ldw	r4,168(sp)
  804eb4:	d8c03217 	ldw	r3,200(sp)
  804eb8:	20800044 	addi	r2,r4,1
  804ebc:	1885883a 	add	r2,r3,r2
  804ec0:	d8802b15 	stw	r2,172(sp)
  804ec4:	103dbf0e 	bge	r2,zero,8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804ec8:	0005883a 	mov	r2,zero
  804ecc:	003dbd06 	br	8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804ed0:	2000201e 	bne	r4,zero,804f54 <___vfprintf_internal_r+0x222c>
  804ed4:	9480004c 	andi	r18,r18,1
  804ed8:	90001e1e 	bne	r18,zero,804f54 <___vfprintf_internal_r+0x222c>
  804edc:	00800044 	movi	r2,1
  804ee0:	d8802b15 	stw	r2,172(sp)
  804ee4:	003db706 	br	8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804ee8:	00800b44 	movi	r2,45
  804eec:	05adc83a 	sub	r22,zero,r22
  804ef0:	d8802305 	stb	r2,140(sp)
  804ef4:	003f3f06 	br	804bf4 <__alt_mem_epcs_flash_controller_0+0xff7fbbf4>
  804ef8:	0005883a 	mov	r2,zero
  804efc:	003f5206 	br	804c48 <__alt_mem_epcs_flash_controller_0+0xff7fbc48>
  804f00:	90a4703a 	and	r18,r18,r2
  804f04:	903f4e26 	beq	r18,zero,804c40 <__alt_mem_epcs_flash_controller_0+0xff7fbc40>
  804f08:	003f4a06 	br	804c34 <__alt_mem_epcs_flash_controller_0+0xff7fbc34>
  804f0c:	00800084 	movi	r2,2
  804f10:	10c5c83a 	sub	r2,r2,r3
  804f14:	003f8406 	br	804d28 <__alt_mem_epcs_flash_controller_0+0xff7fbd28>
  804f18:	d9402e17 	ldw	r5,184(sp)
  804f1c:	d9002e17 	ldw	r4,184(sp)
  804f20:	ac400043 	ldbu	r17,1(r21)
  804f24:	29400017 	ldw	r5,0(r5)
  804f28:	20800104 	addi	r2,r4,4
  804f2c:	d8802e15 	stw	r2,184(sp)
  804f30:	d9402a15 	stw	r5,168(sp)
  804f34:	182b883a 	mov	r21,r3
  804f38:	283e7b0e 	bge	r5,zero,804928 <__alt_mem_epcs_flash_controller_0+0xff7fb928>
  804f3c:	8c403fcc 	andi	r17,r17,255
  804f40:	017fffc4 	movi	r5,-1
  804f44:	8c40201c 	xori	r17,r17,128
  804f48:	d9402a15 	stw	r5,168(sp)
  804f4c:	8c7fe004 	addi	r17,r17,-128
  804f50:	0037d706 	br	802eb0 <__alt_mem_epcs_flash_controller_0+0xff7f9eb0>
  804f54:	d8c02a17 	ldw	r3,168(sp)
  804f58:	18c00084 	addi	r3,r3,2
  804f5c:	d8c02b15 	stw	r3,172(sp)
  804f60:	1805883a 	mov	r2,r3
  804f64:	183d970e 	bge	r3,zero,8045c4 <__alt_mem_epcs_flash_controller_0+0xff7fb5c4>
  804f68:	003fd706 	br	804ec8 <__alt_mem_epcs_flash_controller_0+0xff7fbec8>
  804f6c:	0005883a 	mov	r2,zero
  804f70:	003f8f06 	br	804db0 <__alt_mem_epcs_flash_controller_0+0xff7fbdb0>
  804f74:	9080004c 	andi	r2,r18,1
  804f78:	103f821e 	bne	r2,zero,804d84 <__alt_mem_epcs_flash_controller_0+0xff7fbd84>
  804f7c:	d8802117 	ldw	r2,132(sp)
  804f80:	1405c83a 	sub	r2,r2,r16
  804f84:	d8803315 	stw	r2,204(sp)
  804f88:	b47ef426 	beq	r22,r17,804b5c <__alt_mem_epcs_flash_controller_0+0xff7fbb5c>
  804f8c:	dd802617 	ldw	r22,152(sp)
  804f90:	003f1206 	br	804bdc <__alt_mem_epcs_flash_controller_0+0xff7fbbdc>
  804f94:	d8c02b03 	ldbu	r3,172(sp)
  804f98:	d8c02785 	stb	r3,158(sp)
  804f9c:	0038df06 	br	80331c <__alt_mem_epcs_flash_controller_0+0xff7fa31c>
  804fa0:	d8c02b03 	ldbu	r3,172(sp)
  804fa4:	d8c02785 	stb	r3,158(sp)
  804fa8:	0038aa06 	br	803254 <__alt_mem_epcs_flash_controller_0+0xff7fa254>
  804fac:	d8c02b03 	ldbu	r3,172(sp)
  804fb0:	d8c02785 	stb	r3,158(sp)
  804fb4:	003a4306 	br	8038c4 <__alt_mem_epcs_flash_controller_0+0xff7fa8c4>
  804fb8:	d8c02b03 	ldbu	r3,172(sp)
  804fbc:	d8c02785 	stb	r3,158(sp)
  804fc0:	003af506 	br	803b98 <__alt_mem_epcs_flash_controller_0+0xff7fab98>
  804fc4:	0005883a 	mov	r2,zero
  804fc8:	003d7b06 	br	8045b8 <__alt_mem_epcs_flash_controller_0+0xff7fb5b8>
  804fcc:	d8802344 	addi	r2,sp,141
  804fd0:	003f1006 	br	804c14 <__alt_mem_epcs_flash_controller_0+0xff7fbc14>
  804fd4:	d8c02b03 	ldbu	r3,172(sp)
  804fd8:	d8c02785 	stb	r3,158(sp)
  804fdc:	0038fd06 	br	8033d4 <__alt_mem_epcs_flash_controller_0+0xff7fa3d4>
  804fe0:	d8c02b03 	ldbu	r3,172(sp)
  804fe4:	d8c02785 	stb	r3,158(sp)
  804fe8:	003a9706 	br	803a48 <__alt_mem_epcs_flash_controller_0+0xff7faa48>
  804fec:	d8c02b03 	ldbu	r3,172(sp)
  804ff0:	d8c02785 	stb	r3,158(sp)
  804ff4:	003a1806 	br	803858 <__alt_mem_epcs_flash_controller_0+0xff7fa858>
  804ff8:	d8c02b03 	ldbu	r3,172(sp)
  804ffc:	d8c02785 	stb	r3,158(sp)
  805000:	003abe06 	br	803afc <__alt_mem_epcs_flash_controller_0+0xff7faafc>

00805004 <__vfprintf_internal>:
  805004:	008020b4 	movhi	r2,130
  805008:	10b82e04 	addi	r2,r2,-8008
  80500c:	300f883a 	mov	r7,r6
  805010:	280d883a 	mov	r6,r5
  805014:	200b883a 	mov	r5,r4
  805018:	11000017 	ldw	r4,0(r2)
  80501c:	0802d281 	jmpi	802d28 <___vfprintf_internal_r>

00805020 <__sbprintf>:
  805020:	2880030b 	ldhu	r2,12(r5)
  805024:	2ac01917 	ldw	r11,100(r5)
  805028:	2a80038b 	ldhu	r10,14(r5)
  80502c:	2a400717 	ldw	r9,28(r5)
  805030:	2a000917 	ldw	r8,36(r5)
  805034:	defee204 	addi	sp,sp,-1144
  805038:	00c10004 	movi	r3,1024
  80503c:	dc011a15 	stw	r16,1128(sp)
  805040:	10bfff4c 	andi	r2,r2,65533
  805044:	2821883a 	mov	r16,r5
  805048:	d8cb883a 	add	r5,sp,r3
  80504c:	dc811c15 	stw	r18,1136(sp)
  805050:	dc411b15 	stw	r17,1132(sp)
  805054:	dfc11d15 	stw	ra,1140(sp)
  805058:	2025883a 	mov	r18,r4
  80505c:	d881030d 	sth	r2,1036(sp)
  805060:	dac11915 	stw	r11,1124(sp)
  805064:	da81038d 	sth	r10,1038(sp)
  805068:	da410715 	stw	r9,1052(sp)
  80506c:	da010915 	stw	r8,1060(sp)
  805070:	dec10015 	stw	sp,1024(sp)
  805074:	dec10415 	stw	sp,1040(sp)
  805078:	d8c10215 	stw	r3,1032(sp)
  80507c:	d8c10515 	stw	r3,1044(sp)
  805080:	d8010615 	stw	zero,1048(sp)
  805084:	0802d280 	call	802d28 <___vfprintf_internal_r>
  805088:	1023883a 	mov	r17,r2
  80508c:	10000416 	blt	r2,zero,8050a0 <__sbprintf+0x80>
  805090:	d9410004 	addi	r5,sp,1024
  805094:	9009883a 	mov	r4,r18
  805098:	08016740 	call	801674 <_fflush_r>
  80509c:	10000d1e 	bne	r2,zero,8050d4 <__sbprintf+0xb4>
  8050a0:	d881030b 	ldhu	r2,1036(sp)
  8050a4:	1080100c 	andi	r2,r2,64
  8050a8:	10000326 	beq	r2,zero,8050b8 <__sbprintf+0x98>
  8050ac:	8080030b 	ldhu	r2,12(r16)
  8050b0:	10801014 	ori	r2,r2,64
  8050b4:	8080030d 	sth	r2,12(r16)
  8050b8:	8805883a 	mov	r2,r17
  8050bc:	dfc11d17 	ldw	ra,1140(sp)
  8050c0:	dc811c17 	ldw	r18,1136(sp)
  8050c4:	dc411b17 	ldw	r17,1132(sp)
  8050c8:	dc011a17 	ldw	r16,1128(sp)
  8050cc:	dec11e04 	addi	sp,sp,1144
  8050d0:	f800283a 	ret
  8050d4:	047fffc4 	movi	r17,-1
  8050d8:	003ff106 	br	8050a0 <__alt_mem_epcs_flash_controller_0+0xff7fc0a0>

008050dc <_write_r>:
  8050dc:	defffd04 	addi	sp,sp,-12
  8050e0:	2805883a 	mov	r2,r5
  8050e4:	dc000015 	stw	r16,0(sp)
  8050e8:	040020b4 	movhi	r16,130
  8050ec:	dc400115 	stw	r17,4(sp)
  8050f0:	300b883a 	mov	r5,r6
  8050f4:	84387b04 	addi	r16,r16,-7700
  8050f8:	2023883a 	mov	r17,r4
  8050fc:	380d883a 	mov	r6,r7
  805100:	1009883a 	mov	r4,r2
  805104:	dfc00215 	stw	ra,8(sp)
  805108:	80000015 	stw	zero,0(r16)
  80510c:	080eca80 	call	80eca8 <write>
  805110:	00ffffc4 	movi	r3,-1
  805114:	10c00526 	beq	r2,r3,80512c <_write_r+0x50>
  805118:	dfc00217 	ldw	ra,8(sp)
  80511c:	dc400117 	ldw	r17,4(sp)
  805120:	dc000017 	ldw	r16,0(sp)
  805124:	dec00304 	addi	sp,sp,12
  805128:	f800283a 	ret
  80512c:	80c00017 	ldw	r3,0(r16)
  805130:	183ff926 	beq	r3,zero,805118 <__alt_mem_epcs_flash_controller_0+0xff7fc118>
  805134:	88c00015 	stw	r3,0(r17)
  805138:	003ff706 	br	805118 <__alt_mem_epcs_flash_controller_0+0xff7fc118>

0080513c <__swsetup_r>:
  80513c:	008020b4 	movhi	r2,130
  805140:	defffd04 	addi	sp,sp,-12
  805144:	10b82e04 	addi	r2,r2,-8008
  805148:	dc400115 	stw	r17,4(sp)
  80514c:	2023883a 	mov	r17,r4
  805150:	11000017 	ldw	r4,0(r2)
  805154:	dc000015 	stw	r16,0(sp)
  805158:	dfc00215 	stw	ra,8(sp)
  80515c:	2821883a 	mov	r16,r5
  805160:	20000226 	beq	r4,zero,80516c <__swsetup_r+0x30>
  805164:	20800e17 	ldw	r2,56(r4)
  805168:	10003126 	beq	r2,zero,805230 <__swsetup_r+0xf4>
  80516c:	8080030b 	ldhu	r2,12(r16)
  805170:	10c0020c 	andi	r3,r2,8
  805174:	1009883a 	mov	r4,r2
  805178:	18000f26 	beq	r3,zero,8051b8 <__swsetup_r+0x7c>
  80517c:	80c00417 	ldw	r3,16(r16)
  805180:	18001526 	beq	r3,zero,8051d8 <__swsetup_r+0x9c>
  805184:	1100004c 	andi	r4,r2,1
  805188:	20001c1e 	bne	r4,zero,8051fc <__swsetup_r+0xc0>
  80518c:	1080008c 	andi	r2,r2,2
  805190:	1000291e 	bne	r2,zero,805238 <__swsetup_r+0xfc>
  805194:	80800517 	ldw	r2,20(r16)
  805198:	80800215 	stw	r2,8(r16)
  80519c:	18001c26 	beq	r3,zero,805210 <__swsetup_r+0xd4>
  8051a0:	0005883a 	mov	r2,zero
  8051a4:	dfc00217 	ldw	ra,8(sp)
  8051a8:	dc400117 	ldw	r17,4(sp)
  8051ac:	dc000017 	ldw	r16,0(sp)
  8051b0:	dec00304 	addi	sp,sp,12
  8051b4:	f800283a 	ret
  8051b8:	2080040c 	andi	r2,r4,16
  8051bc:	10002e26 	beq	r2,zero,805278 <__swsetup_r+0x13c>
  8051c0:	2080010c 	andi	r2,r4,4
  8051c4:	10001e1e 	bne	r2,zero,805240 <__swsetup_r+0x104>
  8051c8:	80c00417 	ldw	r3,16(r16)
  8051cc:	20800214 	ori	r2,r4,8
  8051d0:	8080030d 	sth	r2,12(r16)
  8051d4:	183feb1e 	bne	r3,zero,805184 <__alt_mem_epcs_flash_controller_0+0xff7fc184>
  8051d8:	1100a00c 	andi	r4,r2,640
  8051dc:	01408004 	movi	r5,512
  8051e0:	217fe826 	beq	r4,r5,805184 <__alt_mem_epcs_flash_controller_0+0xff7fc184>
  8051e4:	800b883a 	mov	r5,r16
  8051e8:	8809883a 	mov	r4,r17
  8051ec:	08071980 	call	807198 <__smakebuf_r>
  8051f0:	8080030b 	ldhu	r2,12(r16)
  8051f4:	80c00417 	ldw	r3,16(r16)
  8051f8:	003fe206 	br	805184 <__alt_mem_epcs_flash_controller_0+0xff7fc184>
  8051fc:	80800517 	ldw	r2,20(r16)
  805200:	80000215 	stw	zero,8(r16)
  805204:	0085c83a 	sub	r2,zero,r2
  805208:	80800615 	stw	r2,24(r16)
  80520c:	183fe41e 	bne	r3,zero,8051a0 <__alt_mem_epcs_flash_controller_0+0xff7fc1a0>
  805210:	80c0030b 	ldhu	r3,12(r16)
  805214:	0005883a 	mov	r2,zero
  805218:	1900200c 	andi	r4,r3,128
  80521c:	203fe126 	beq	r4,zero,8051a4 <__alt_mem_epcs_flash_controller_0+0xff7fc1a4>
  805220:	18c01014 	ori	r3,r3,64
  805224:	80c0030d 	sth	r3,12(r16)
  805228:	00bfffc4 	movi	r2,-1
  80522c:	003fdd06 	br	8051a4 <__alt_mem_epcs_flash_controller_0+0xff7fc1a4>
  805230:	0801a600 	call	801a60 <__sinit>
  805234:	003fcd06 	br	80516c <__alt_mem_epcs_flash_controller_0+0xff7fc16c>
  805238:	0005883a 	mov	r2,zero
  80523c:	003fd606 	br	805198 <__alt_mem_epcs_flash_controller_0+0xff7fc198>
  805240:	81400c17 	ldw	r5,48(r16)
  805244:	28000626 	beq	r5,zero,805260 <__swsetup_r+0x124>
  805248:	80801004 	addi	r2,r16,64
  80524c:	28800326 	beq	r5,r2,80525c <__swsetup_r+0x120>
  805250:	8809883a 	mov	r4,r17
  805254:	0801bd40 	call	801bd4 <_free_r>
  805258:	8100030b 	ldhu	r4,12(r16)
  80525c:	80000c15 	stw	zero,48(r16)
  805260:	80c00417 	ldw	r3,16(r16)
  805264:	00bff6c4 	movi	r2,-37
  805268:	1108703a 	and	r4,r2,r4
  80526c:	80000115 	stw	zero,4(r16)
  805270:	80c00015 	stw	r3,0(r16)
  805274:	003fd506 	br	8051cc <__alt_mem_epcs_flash_controller_0+0xff7fc1cc>
  805278:	00800244 	movi	r2,9
  80527c:	88800015 	stw	r2,0(r17)
  805280:	20801014 	ori	r2,r4,64
  805284:	8080030d 	sth	r2,12(r16)
  805288:	00bfffc4 	movi	r2,-1
  80528c:	003fc506 	br	8051a4 <__alt_mem_epcs_flash_controller_0+0xff7fc1a4>

00805290 <_close_r>:
  805290:	defffd04 	addi	sp,sp,-12
  805294:	dc000015 	stw	r16,0(sp)
  805298:	040020b4 	movhi	r16,130
  80529c:	dc400115 	stw	r17,4(sp)
  8052a0:	84387b04 	addi	r16,r16,-7700
  8052a4:	2023883a 	mov	r17,r4
  8052a8:	2809883a 	mov	r4,r5
  8052ac:	dfc00215 	stw	ra,8(sp)
  8052b0:	80000015 	stw	zero,0(r16)
  8052b4:	080e2a40 	call	80e2a4 <close>
  8052b8:	00ffffc4 	movi	r3,-1
  8052bc:	10c00526 	beq	r2,r3,8052d4 <_close_r+0x44>
  8052c0:	dfc00217 	ldw	ra,8(sp)
  8052c4:	dc400117 	ldw	r17,4(sp)
  8052c8:	dc000017 	ldw	r16,0(sp)
  8052cc:	dec00304 	addi	sp,sp,12
  8052d0:	f800283a 	ret
  8052d4:	80c00017 	ldw	r3,0(r16)
  8052d8:	183ff926 	beq	r3,zero,8052c0 <__alt_mem_epcs_flash_controller_0+0xff7fc2c0>
  8052dc:	88c00015 	stw	r3,0(r17)
  8052e0:	003ff706 	br	8052c0 <__alt_mem_epcs_flash_controller_0+0xff7fc2c0>

008052e4 <quorem>:
  8052e4:	defff204 	addi	sp,sp,-56
  8052e8:	ddc00b15 	stw	r23,44(sp)
  8052ec:	20800417 	ldw	r2,16(r4)
  8052f0:	2dc00417 	ldw	r23,16(r5)
  8052f4:	dfc00d15 	stw	ra,52(sp)
  8052f8:	df000c15 	stw	fp,48(sp)
  8052fc:	dd800a15 	stw	r22,40(sp)
  805300:	dd400915 	stw	r21,36(sp)
  805304:	dd000815 	stw	r20,32(sp)
  805308:	dcc00715 	stw	r19,28(sp)
  80530c:	dc800615 	stw	r18,24(sp)
  805310:	dc400515 	stw	r17,20(sp)
  805314:	dc000415 	stw	r16,16(sp)
  805318:	15c07a16 	blt	r2,r23,805504 <quorem+0x220>
  80531c:	bdffffc4 	addi	r23,r23,-1
  805320:	bde9883a 	add	r20,r23,r23
  805324:	28c00504 	addi	r3,r5,20
  805328:	a529883a 	add	r20,r20,r20
  80532c:	1d39883a 	add	fp,r3,r20
  805330:	24c00504 	addi	r19,r4,20
  805334:	d9400215 	stw	r5,8(sp)
  805338:	9d29883a 	add	r20,r19,r20
  80533c:	e1400017 	ldw	r5,0(fp)
  805340:	d9000015 	stw	r4,0(sp)
  805344:	a1000017 	ldw	r4,0(r20)
  805348:	29400044 	addi	r5,r5,1
  80534c:	d8c00115 	stw	r3,4(sp)
  805350:	dd000315 	stw	r20,12(sp)
  805354:	08012980 	call	801298 <__udivsi3>
  805358:	1025883a 	mov	r18,r2
  80535c:	10003026 	beq	r2,zero,805420 <quorem+0x13c>
  805360:	dc400117 	ldw	r17,4(sp)
  805364:	9829883a 	mov	r20,r19
  805368:	002d883a 	mov	r22,zero
  80536c:	0021883a 	mov	r16,zero
  805370:	8d400017 	ldw	r21,0(r17)
  805374:	900b883a 	mov	r5,r18
  805378:	8c400104 	addi	r17,r17,4
  80537c:	a93fffcc 	andi	r4,r21,65535
  805380:	080b99c0 	call	80b99c <__mulsi3>
  805384:	a808d43a 	srli	r4,r21,16
  805388:	900b883a 	mov	r5,r18
  80538c:	15ad883a 	add	r22,r2,r22
  805390:	080b99c0 	call	80b99c <__mulsi3>
  805394:	a1000017 	ldw	r4,0(r20)
  805398:	b00cd43a 	srli	r6,r22,16
  80539c:	b0ffffcc 	andi	r3,r22,65535
  8053a0:	217fffcc 	andi	r5,r4,65535
  8053a4:	2c21883a 	add	r16,r5,r16
  8053a8:	80c7c83a 	sub	r3,r16,r3
  8053ac:	2008d43a 	srli	r4,r4,16
  8053b0:	1185883a 	add	r2,r2,r6
  8053b4:	1821d43a 	srai	r16,r3,16
  8053b8:	117fffcc 	andi	r5,r2,65535
  8053bc:	2149c83a 	sub	r4,r4,r5
  8053c0:	2421883a 	add	r16,r4,r16
  8053c4:	8008943a 	slli	r4,r16,16
  8053c8:	18ffffcc 	andi	r3,r3,65535
  8053cc:	102cd43a 	srli	r22,r2,16
  8053d0:	20c8b03a 	or	r4,r4,r3
  8053d4:	a1000015 	stw	r4,0(r20)
  8053d8:	8021d43a 	srai	r16,r16,16
  8053dc:	a5000104 	addi	r20,r20,4
  8053e0:	e47fe32e 	bgeu	fp,r17,805370 <__alt_mem_epcs_flash_controller_0+0xff7fc370>
  8053e4:	d8c00317 	ldw	r3,12(sp)
  8053e8:	18800017 	ldw	r2,0(r3)
  8053ec:	10000c1e 	bne	r2,zero,805420 <quorem+0x13c>
  8053f0:	18bfff04 	addi	r2,r3,-4
  8053f4:	9880082e 	bgeu	r19,r2,805418 <quorem+0x134>
  8053f8:	18ffff17 	ldw	r3,-4(r3)
  8053fc:	18000326 	beq	r3,zero,80540c <quorem+0x128>
  805400:	00000506 	br	805418 <quorem+0x134>
  805404:	10c00017 	ldw	r3,0(r2)
  805408:	1800031e 	bne	r3,zero,805418 <quorem+0x134>
  80540c:	10bfff04 	addi	r2,r2,-4
  805410:	bdffffc4 	addi	r23,r23,-1
  805414:	98bffb36 	bltu	r19,r2,805404 <__alt_mem_epcs_flash_controller_0+0xff7fc404>
  805418:	d8c00017 	ldw	r3,0(sp)
  80541c:	1dc00415 	stw	r23,16(r3)
  805420:	d9400217 	ldw	r5,8(sp)
  805424:	d9000017 	ldw	r4,0(sp)
  805428:	08080600 	call	808060 <__mcmp>
  80542c:	10002816 	blt	r2,zero,8054d0 <quorem+0x1ec>
  805430:	dc400117 	ldw	r17,4(sp)
  805434:	94800044 	addi	r18,r18,1
  805438:	980d883a 	mov	r6,r19
  80543c:	0007883a 	mov	r3,zero
  805440:	31000017 	ldw	r4,0(r6)
  805444:	89400017 	ldw	r5,0(r17)
  805448:	31800104 	addi	r6,r6,4
  80544c:	20bfffcc 	andi	r2,r4,65535
  805450:	10c7883a 	add	r3,r2,r3
  805454:	28bfffcc 	andi	r2,r5,65535
  805458:	1885c83a 	sub	r2,r3,r2
  80545c:	280ad43a 	srli	r5,r5,16
  805460:	2008d43a 	srli	r4,r4,16
  805464:	1007d43a 	srai	r3,r2,16
  805468:	10bfffcc 	andi	r2,r2,65535
  80546c:	2149c83a 	sub	r4,r4,r5
  805470:	20c9883a 	add	r4,r4,r3
  805474:	200a943a 	slli	r5,r4,16
  805478:	8c400104 	addi	r17,r17,4
  80547c:	2007d43a 	srai	r3,r4,16
  805480:	2884b03a 	or	r2,r5,r2
  805484:	30bfff15 	stw	r2,-4(r6)
  805488:	e47fed2e 	bgeu	fp,r17,805440 <__alt_mem_epcs_flash_controller_0+0xff7fc440>
  80548c:	bdc5883a 	add	r2,r23,r23
  805490:	1085883a 	add	r2,r2,r2
  805494:	9887883a 	add	r3,r19,r2
  805498:	18800017 	ldw	r2,0(r3)
  80549c:	10000c1e 	bne	r2,zero,8054d0 <quorem+0x1ec>
  8054a0:	18bfff04 	addi	r2,r3,-4
  8054a4:	9880082e 	bgeu	r19,r2,8054c8 <quorem+0x1e4>
  8054a8:	18ffff17 	ldw	r3,-4(r3)
  8054ac:	18000326 	beq	r3,zero,8054bc <quorem+0x1d8>
  8054b0:	00000506 	br	8054c8 <quorem+0x1e4>
  8054b4:	10c00017 	ldw	r3,0(r2)
  8054b8:	1800031e 	bne	r3,zero,8054c8 <quorem+0x1e4>
  8054bc:	10bfff04 	addi	r2,r2,-4
  8054c0:	bdffffc4 	addi	r23,r23,-1
  8054c4:	98bffb36 	bltu	r19,r2,8054b4 <__alt_mem_epcs_flash_controller_0+0xff7fc4b4>
  8054c8:	d8c00017 	ldw	r3,0(sp)
  8054cc:	1dc00415 	stw	r23,16(r3)
  8054d0:	9005883a 	mov	r2,r18
  8054d4:	dfc00d17 	ldw	ra,52(sp)
  8054d8:	df000c17 	ldw	fp,48(sp)
  8054dc:	ddc00b17 	ldw	r23,44(sp)
  8054e0:	dd800a17 	ldw	r22,40(sp)
  8054e4:	dd400917 	ldw	r21,36(sp)
  8054e8:	dd000817 	ldw	r20,32(sp)
  8054ec:	dcc00717 	ldw	r19,28(sp)
  8054f0:	dc800617 	ldw	r18,24(sp)
  8054f4:	dc400517 	ldw	r17,20(sp)
  8054f8:	dc000417 	ldw	r16,16(sp)
  8054fc:	dec00e04 	addi	sp,sp,56
  805500:	f800283a 	ret
  805504:	0005883a 	mov	r2,zero
  805508:	003ff206 	br	8054d4 <__alt_mem_epcs_flash_controller_0+0xff7fc4d4>

0080550c <_dtoa_r>:
  80550c:	20801017 	ldw	r2,64(r4)
  805510:	deffde04 	addi	sp,sp,-136
  805514:	df002015 	stw	fp,128(sp)
  805518:	dcc01b15 	stw	r19,108(sp)
  80551c:	dc801a15 	stw	r18,104(sp)
  805520:	dc401915 	stw	r17,100(sp)
  805524:	dc001815 	stw	r16,96(sp)
  805528:	dfc02115 	stw	ra,132(sp)
  80552c:	ddc01f15 	stw	r23,124(sp)
  805530:	dd801e15 	stw	r22,120(sp)
  805534:	dd401d15 	stw	r21,116(sp)
  805538:	dd001c15 	stw	r20,112(sp)
  80553c:	d9c00315 	stw	r7,12(sp)
  805540:	2039883a 	mov	fp,r4
  805544:	3023883a 	mov	r17,r6
  805548:	2825883a 	mov	r18,r5
  80554c:	dc002417 	ldw	r16,144(sp)
  805550:	3027883a 	mov	r19,r6
  805554:	10000826 	beq	r2,zero,805578 <_dtoa_r+0x6c>
  805558:	21801117 	ldw	r6,68(r4)
  80555c:	00c00044 	movi	r3,1
  805560:	100b883a 	mov	r5,r2
  805564:	1986983a 	sll	r3,r3,r6
  805568:	11800115 	stw	r6,4(r2)
  80556c:	10c00215 	stw	r3,8(r2)
  805570:	08077840 	call	807784 <_Bfree>
  805574:	e0001015 	stw	zero,64(fp)
  805578:	88002e16 	blt	r17,zero,805634 <_dtoa_r+0x128>
  80557c:	80000015 	stw	zero,0(r16)
  805580:	889ffc2c 	andhi	r2,r17,32752
  805584:	00dffc34 	movhi	r3,32752
  805588:	10c01c26 	beq	r2,r3,8055fc <_dtoa_r+0xf0>
  80558c:	000d883a 	mov	r6,zero
  805590:	000f883a 	mov	r7,zero
  805594:	9009883a 	mov	r4,r18
  805598:	980b883a 	mov	r5,r19
  80559c:	080cc400 	call	80cc40 <__eqdf2>
  8055a0:	10002b1e 	bne	r2,zero,805650 <_dtoa_r+0x144>
  8055a4:	d9c02317 	ldw	r7,140(sp)
  8055a8:	00800044 	movi	r2,1
  8055ac:	38800015 	stw	r2,0(r7)
  8055b0:	d8802517 	ldw	r2,148(sp)
  8055b4:	10019e26 	beq	r2,zero,805c30 <_dtoa_r+0x724>
  8055b8:	d8c02517 	ldw	r3,148(sp)
  8055bc:	008020b4 	movhi	r2,130
  8055c0:	10afa044 	addi	r2,r2,-16767
  8055c4:	18800015 	stw	r2,0(r3)
  8055c8:	10bfffc4 	addi	r2,r2,-1
  8055cc:	dfc02117 	ldw	ra,132(sp)
  8055d0:	df002017 	ldw	fp,128(sp)
  8055d4:	ddc01f17 	ldw	r23,124(sp)
  8055d8:	dd801e17 	ldw	r22,120(sp)
  8055dc:	dd401d17 	ldw	r21,116(sp)
  8055e0:	dd001c17 	ldw	r20,112(sp)
  8055e4:	dcc01b17 	ldw	r19,108(sp)
  8055e8:	dc801a17 	ldw	r18,104(sp)
  8055ec:	dc401917 	ldw	r17,100(sp)
  8055f0:	dc001817 	ldw	r16,96(sp)
  8055f4:	dec02204 	addi	sp,sp,136
  8055f8:	f800283a 	ret
  8055fc:	d8c02317 	ldw	r3,140(sp)
  805600:	0089c3c4 	movi	r2,9999
  805604:	18800015 	stw	r2,0(r3)
  805608:	90017726 	beq	r18,zero,805be8 <_dtoa_r+0x6dc>
  80560c:	008020b4 	movhi	r2,130
  805610:	10afac04 	addi	r2,r2,-16720
  805614:	d9002517 	ldw	r4,148(sp)
  805618:	203fec26 	beq	r4,zero,8055cc <__alt_mem_epcs_flash_controller_0+0xff7fc5cc>
  80561c:	10c000c7 	ldb	r3,3(r2)
  805620:	1801781e 	bne	r3,zero,805c04 <_dtoa_r+0x6f8>
  805624:	10c000c4 	addi	r3,r2,3
  805628:	d9802517 	ldw	r6,148(sp)
  80562c:	30c00015 	stw	r3,0(r6)
  805630:	003fe606 	br	8055cc <__alt_mem_epcs_flash_controller_0+0xff7fc5cc>
  805634:	04e00034 	movhi	r19,32768
  805638:	9cffffc4 	addi	r19,r19,-1
  80563c:	00800044 	movi	r2,1
  805640:	8ce6703a 	and	r19,r17,r19
  805644:	80800015 	stw	r2,0(r16)
  805648:	9823883a 	mov	r17,r19
  80564c:	003fcc06 	br	805580 <__alt_mem_epcs_flash_controller_0+0xff7fc580>
  805650:	d8800204 	addi	r2,sp,8
  805654:	d8800015 	stw	r2,0(sp)
  805658:	d9c00104 	addi	r7,sp,4
  80565c:	900b883a 	mov	r5,r18
  805660:	980d883a 	mov	r6,r19
  805664:	e009883a 	mov	r4,fp
  805668:	8820d53a 	srli	r16,r17,20
  80566c:	080842c0 	call	80842c <__d2b>
  805670:	d8800915 	stw	r2,36(sp)
  805674:	8001651e 	bne	r16,zero,805c0c <_dtoa_r+0x700>
  805678:	dd800217 	ldw	r22,8(sp)
  80567c:	dc000117 	ldw	r16,4(sp)
  805680:	00800804 	movi	r2,32
  805684:	b421883a 	add	r16,r22,r16
  805688:	80c10c84 	addi	r3,r16,1074
  80568c:	10c2d10e 	bge	r2,r3,8061d4 <_dtoa_r+0xcc8>
  805690:	00801004 	movi	r2,64
  805694:	81010484 	addi	r4,r16,1042
  805698:	10c7c83a 	sub	r3,r2,r3
  80569c:	9108d83a 	srl	r4,r18,r4
  8056a0:	88e2983a 	sll	r17,r17,r3
  8056a4:	2448b03a 	or	r4,r4,r17
  8056a8:	080e15c0 	call	80e15c <__floatunsidf>
  8056ac:	017f8434 	movhi	r5,65040
  8056b0:	01800044 	movi	r6,1
  8056b4:	1009883a 	mov	r4,r2
  8056b8:	194b883a 	add	r5,r3,r5
  8056bc:	843fffc4 	addi	r16,r16,-1
  8056c0:	d9801115 	stw	r6,68(sp)
  8056c4:	000d883a 	mov	r6,zero
  8056c8:	01cffe34 	movhi	r7,16376
  8056cc:	080d7040 	call	80d704 <__subdf3>
  8056d0:	0198dbf4 	movhi	r6,25455
  8056d4:	01cff4f4 	movhi	r7,16339
  8056d8:	3190d844 	addi	r6,r6,17249
  8056dc:	39e1e9c4 	addi	r7,r7,-30809
  8056e0:	1009883a 	mov	r4,r2
  8056e4:	180b883a 	mov	r5,r3
  8056e8:	080ce980 	call	80ce98 <__muldf3>
  8056ec:	01a2d874 	movhi	r6,35681
  8056f0:	01cff1f4 	movhi	r7,16327
  8056f4:	31b22cc4 	addi	r6,r6,-14157
  8056f8:	39e28a04 	addi	r7,r7,-30168
  8056fc:	180b883a 	mov	r5,r3
  805700:	1009883a 	mov	r4,r2
  805704:	080b9c40 	call	80b9c4 <__adddf3>
  805708:	8009883a 	mov	r4,r16
  80570c:	1029883a 	mov	r20,r2
  805710:	1823883a 	mov	r17,r3
  805714:	080e0800 	call	80e080 <__floatsidf>
  805718:	019427f4 	movhi	r6,20639
  80571c:	01cff4f4 	movhi	r7,16339
  805720:	319e7ec4 	addi	r6,r6,31227
  805724:	39d104c4 	addi	r7,r7,17427
  805728:	1009883a 	mov	r4,r2
  80572c:	180b883a 	mov	r5,r3
  805730:	080ce980 	call	80ce98 <__muldf3>
  805734:	100d883a 	mov	r6,r2
  805738:	180f883a 	mov	r7,r3
  80573c:	a009883a 	mov	r4,r20
  805740:	880b883a 	mov	r5,r17
  805744:	080b9c40 	call	80b9c4 <__adddf3>
  805748:	1009883a 	mov	r4,r2
  80574c:	180b883a 	mov	r5,r3
  805750:	1029883a 	mov	r20,r2
  805754:	1823883a 	mov	r17,r3
  805758:	080e0000 	call	80e000 <__fixdfsi>
  80575c:	000d883a 	mov	r6,zero
  805760:	000f883a 	mov	r7,zero
  805764:	a009883a 	mov	r4,r20
  805768:	880b883a 	mov	r5,r17
  80576c:	d8800515 	stw	r2,20(sp)
  805770:	080cda40 	call	80cda4 <__ledf2>
  805774:	10028716 	blt	r2,zero,806194 <_dtoa_r+0xc88>
  805778:	d8c00517 	ldw	r3,20(sp)
  80577c:	00800584 	movi	r2,22
  805780:	10c27536 	bltu	r2,r3,806158 <_dtoa_r+0xc4c>
  805784:	180490fa 	slli	r2,r3,3
  805788:	00c020b4 	movhi	r3,130
  80578c:	18efc704 	addi	r3,r3,-16612
  805790:	1885883a 	add	r2,r3,r2
  805794:	11000017 	ldw	r4,0(r2)
  805798:	11400117 	ldw	r5,4(r2)
  80579c:	900d883a 	mov	r6,r18
  8057a0:	980f883a 	mov	r7,r19
  8057a4:	080ccc80 	call	80ccc8 <__gedf2>
  8057a8:	00828d0e 	bge	zero,r2,8061e0 <_dtoa_r+0xcd4>
  8057ac:	d9000517 	ldw	r4,20(sp)
  8057b0:	d8000e15 	stw	zero,56(sp)
  8057b4:	213fffc4 	addi	r4,r4,-1
  8057b8:	d9000515 	stw	r4,20(sp)
  8057bc:	b42dc83a 	sub	r22,r22,r16
  8057c0:	b5bfffc4 	addi	r22,r22,-1
  8057c4:	b0026f16 	blt	r22,zero,806184 <_dtoa_r+0xc78>
  8057c8:	d8000815 	stw	zero,32(sp)
  8057cc:	d9c00517 	ldw	r7,20(sp)
  8057d0:	38026416 	blt	r7,zero,806164 <_dtoa_r+0xc58>
  8057d4:	b1ed883a 	add	r22,r22,r7
  8057d8:	d9c00d15 	stw	r7,52(sp)
  8057dc:	d8000a15 	stw	zero,40(sp)
  8057e0:	d9800317 	ldw	r6,12(sp)
  8057e4:	00800244 	movi	r2,9
  8057e8:	11811436 	bltu	r2,r6,805c3c <_dtoa_r+0x730>
  8057ec:	00800144 	movi	r2,5
  8057f0:	1184e10e 	bge	r2,r6,806b78 <_dtoa_r+0x166c>
  8057f4:	31bfff04 	addi	r6,r6,-4
  8057f8:	d9800315 	stw	r6,12(sp)
  8057fc:	0023883a 	mov	r17,zero
  805800:	d9800317 	ldw	r6,12(sp)
  805804:	008000c4 	movi	r2,3
  805808:	30836726 	beq	r6,r2,8065a8 <_dtoa_r+0x109c>
  80580c:	1183410e 	bge	r2,r6,806514 <_dtoa_r+0x1008>
  805810:	d9c00317 	ldw	r7,12(sp)
  805814:	00800104 	movi	r2,4
  805818:	38827c26 	beq	r7,r2,80620c <_dtoa_r+0xd00>
  80581c:	00800144 	movi	r2,5
  805820:	3884c41e 	bne	r7,r2,806b34 <_dtoa_r+0x1628>
  805824:	00800044 	movi	r2,1
  805828:	d8800b15 	stw	r2,44(sp)
  80582c:	d8c00517 	ldw	r3,20(sp)
  805830:	d9002217 	ldw	r4,136(sp)
  805834:	1907883a 	add	r3,r3,r4
  805838:	19800044 	addi	r6,r3,1
  80583c:	d8c00c15 	stw	r3,48(sp)
  805840:	d9800615 	stw	r6,24(sp)
  805844:	0183a40e 	bge	zero,r6,8066d8 <_dtoa_r+0x11cc>
  805848:	d9800617 	ldw	r6,24(sp)
  80584c:	3021883a 	mov	r16,r6
  805850:	e0001115 	stw	zero,68(fp)
  805854:	008005c4 	movi	r2,23
  805858:	1184c92e 	bgeu	r2,r6,806b80 <_dtoa_r+0x1674>
  80585c:	00c00044 	movi	r3,1
  805860:	00800104 	movi	r2,4
  805864:	1085883a 	add	r2,r2,r2
  805868:	11000504 	addi	r4,r2,20
  80586c:	180b883a 	mov	r5,r3
  805870:	18c00044 	addi	r3,r3,1
  805874:	313ffb2e 	bgeu	r6,r4,805864 <__alt_mem_epcs_flash_controller_0+0xff7fc864>
  805878:	e1401115 	stw	r5,68(fp)
  80587c:	e009883a 	mov	r4,fp
  805880:	08076dc0 	call	8076dc <_Balloc>
  805884:	d8800715 	stw	r2,28(sp)
  805888:	e0801015 	stw	r2,64(fp)
  80588c:	00800384 	movi	r2,14
  805890:	1400f736 	bltu	r2,r16,805c70 <_dtoa_r+0x764>
  805894:	8800f626 	beq	r17,zero,805c70 <_dtoa_r+0x764>
  805898:	d9c00517 	ldw	r7,20(sp)
  80589c:	01c39a0e 	bge	zero,r7,806708 <_dtoa_r+0x11fc>
  8058a0:	388003cc 	andi	r2,r7,15
  8058a4:	100490fa 	slli	r2,r2,3
  8058a8:	382bd13a 	srai	r21,r7,4
  8058ac:	00c020b4 	movhi	r3,130
  8058b0:	18efc704 	addi	r3,r3,-16612
  8058b4:	1885883a 	add	r2,r3,r2
  8058b8:	a8c0040c 	andi	r3,r21,16
  8058bc:	12400017 	ldw	r9,0(r2)
  8058c0:	12000117 	ldw	r8,4(r2)
  8058c4:	18037926 	beq	r3,zero,8066ac <_dtoa_r+0x11a0>
  8058c8:	008020b4 	movhi	r2,130
  8058cc:	10afbd04 	addi	r2,r2,-16652
  8058d0:	11800817 	ldw	r6,32(r2)
  8058d4:	11c00917 	ldw	r7,36(r2)
  8058d8:	9009883a 	mov	r4,r18
  8058dc:	980b883a 	mov	r5,r19
  8058e0:	da001715 	stw	r8,92(sp)
  8058e4:	da401615 	stw	r9,88(sp)
  8058e8:	080c2700 	call	80c270 <__divdf3>
  8058ec:	da001717 	ldw	r8,92(sp)
  8058f0:	da401617 	ldw	r9,88(sp)
  8058f4:	ad4003cc 	andi	r21,r21,15
  8058f8:	040000c4 	movi	r16,3
  8058fc:	1023883a 	mov	r17,r2
  805900:	1829883a 	mov	r20,r3
  805904:	a8001126 	beq	r21,zero,80594c <_dtoa_r+0x440>
  805908:	05c020b4 	movhi	r23,130
  80590c:	bdefbd04 	addi	r23,r23,-16652
  805910:	4805883a 	mov	r2,r9
  805914:	4007883a 	mov	r3,r8
  805918:	a980004c 	andi	r6,r21,1
  80591c:	1009883a 	mov	r4,r2
  805920:	a82bd07a 	srai	r21,r21,1
  805924:	180b883a 	mov	r5,r3
  805928:	30000426 	beq	r6,zero,80593c <_dtoa_r+0x430>
  80592c:	b9800017 	ldw	r6,0(r23)
  805930:	b9c00117 	ldw	r7,4(r23)
  805934:	84000044 	addi	r16,r16,1
  805938:	080ce980 	call	80ce98 <__muldf3>
  80593c:	bdc00204 	addi	r23,r23,8
  805940:	a83ff51e 	bne	r21,zero,805918 <__alt_mem_epcs_flash_controller_0+0xff7fc918>
  805944:	1013883a 	mov	r9,r2
  805948:	1811883a 	mov	r8,r3
  80594c:	480d883a 	mov	r6,r9
  805950:	400f883a 	mov	r7,r8
  805954:	8809883a 	mov	r4,r17
  805958:	a00b883a 	mov	r5,r20
  80595c:	080c2700 	call	80c270 <__divdf3>
  805960:	d8800f15 	stw	r2,60(sp)
  805964:	d8c01015 	stw	r3,64(sp)
  805968:	d8c00e17 	ldw	r3,56(sp)
  80596c:	18000626 	beq	r3,zero,805988 <_dtoa_r+0x47c>
  805970:	d9000f17 	ldw	r4,60(sp)
  805974:	d9401017 	ldw	r5,64(sp)
  805978:	000d883a 	mov	r6,zero
  80597c:	01cffc34 	movhi	r7,16368
  805980:	080cda40 	call	80cda4 <__ledf2>
  805984:	10040b16 	blt	r2,zero,8069b4 <_dtoa_r+0x14a8>
  805988:	8009883a 	mov	r4,r16
  80598c:	080e0800 	call	80e080 <__floatsidf>
  805990:	d9800f17 	ldw	r6,60(sp)
  805994:	d9c01017 	ldw	r7,64(sp)
  805998:	1009883a 	mov	r4,r2
  80599c:	180b883a 	mov	r5,r3
  8059a0:	080ce980 	call	80ce98 <__muldf3>
  8059a4:	000d883a 	mov	r6,zero
  8059a8:	01d00734 	movhi	r7,16412
  8059ac:	1009883a 	mov	r4,r2
  8059b0:	180b883a 	mov	r5,r3
  8059b4:	080b9c40 	call	80b9c4 <__adddf3>
  8059b8:	1021883a 	mov	r16,r2
  8059bc:	d8800617 	ldw	r2,24(sp)
  8059c0:	047f3034 	movhi	r17,64704
  8059c4:	1c63883a 	add	r17,r3,r17
  8059c8:	10031826 	beq	r2,zero,80662c <_dtoa_r+0x1120>
  8059cc:	d8c00517 	ldw	r3,20(sp)
  8059d0:	db000617 	ldw	r12,24(sp)
  8059d4:	d8c01315 	stw	r3,76(sp)
  8059d8:	d9000b17 	ldw	r4,44(sp)
  8059dc:	20038f26 	beq	r4,zero,80681c <_dtoa_r+0x1310>
  8059e0:	60bfffc4 	addi	r2,r12,-1
  8059e4:	100490fa 	slli	r2,r2,3
  8059e8:	00c020b4 	movhi	r3,130
  8059ec:	18efc704 	addi	r3,r3,-16612
  8059f0:	1885883a 	add	r2,r3,r2
  8059f4:	11800017 	ldw	r6,0(r2)
  8059f8:	11c00117 	ldw	r7,4(r2)
  8059fc:	d8800717 	ldw	r2,28(sp)
  805a00:	0009883a 	mov	r4,zero
  805a04:	014ff834 	movhi	r5,16352
  805a08:	db001615 	stw	r12,88(sp)
  805a0c:	15c00044 	addi	r23,r2,1
  805a10:	080c2700 	call	80c270 <__divdf3>
  805a14:	800d883a 	mov	r6,r16
  805a18:	880f883a 	mov	r7,r17
  805a1c:	1009883a 	mov	r4,r2
  805a20:	180b883a 	mov	r5,r3
  805a24:	080d7040 	call	80d704 <__subdf3>
  805a28:	d9401017 	ldw	r5,64(sp)
  805a2c:	d9000f17 	ldw	r4,60(sp)
  805a30:	102b883a 	mov	r21,r2
  805a34:	d8c01215 	stw	r3,72(sp)
  805a38:	080e0000 	call	80e000 <__fixdfsi>
  805a3c:	1009883a 	mov	r4,r2
  805a40:	1029883a 	mov	r20,r2
  805a44:	080e0800 	call	80e080 <__floatsidf>
  805a48:	d9000f17 	ldw	r4,60(sp)
  805a4c:	d9401017 	ldw	r5,64(sp)
  805a50:	100d883a 	mov	r6,r2
  805a54:	180f883a 	mov	r7,r3
  805a58:	080d7040 	call	80d704 <__subdf3>
  805a5c:	1823883a 	mov	r17,r3
  805a60:	d8c00717 	ldw	r3,28(sp)
  805a64:	d9401217 	ldw	r5,72(sp)
  805a68:	a2000c04 	addi	r8,r20,48
  805a6c:	1021883a 	mov	r16,r2
  805a70:	1a000005 	stb	r8,0(r3)
  805a74:	800d883a 	mov	r6,r16
  805a78:	880f883a 	mov	r7,r17
  805a7c:	a809883a 	mov	r4,r21
  805a80:	4029883a 	mov	r20,r8
  805a84:	080ccc80 	call	80ccc8 <__gedf2>
  805a88:	00841d16 	blt	zero,r2,806b00 <_dtoa_r+0x15f4>
  805a8c:	800d883a 	mov	r6,r16
  805a90:	880f883a 	mov	r7,r17
  805a94:	0009883a 	mov	r4,zero
  805a98:	014ffc34 	movhi	r5,16368
  805a9c:	080d7040 	call	80d704 <__subdf3>
  805aa0:	d9401217 	ldw	r5,72(sp)
  805aa4:	100d883a 	mov	r6,r2
  805aa8:	180f883a 	mov	r7,r3
  805aac:	a809883a 	mov	r4,r21
  805ab0:	080ccc80 	call	80ccc8 <__gedf2>
  805ab4:	db001617 	ldw	r12,88(sp)
  805ab8:	00840e16 	blt	zero,r2,806af4 <_dtoa_r+0x15e8>
  805abc:	00800044 	movi	r2,1
  805ac0:	13006b0e 	bge	r2,r12,805c70 <_dtoa_r+0x764>
  805ac4:	d9000717 	ldw	r4,28(sp)
  805ac8:	dd800f15 	stw	r22,60(sp)
  805acc:	dcc01015 	stw	r19,64(sp)
  805ad0:	2319883a 	add	r12,r4,r12
  805ad4:	dcc01217 	ldw	r19,72(sp)
  805ad8:	602d883a 	mov	r22,r12
  805adc:	dc801215 	stw	r18,72(sp)
  805ae0:	b825883a 	mov	r18,r23
  805ae4:	00000906 	br	805b0c <_dtoa_r+0x600>
  805ae8:	080d7040 	call	80d704 <__subdf3>
  805aec:	a80d883a 	mov	r6,r21
  805af0:	980f883a 	mov	r7,r19
  805af4:	1009883a 	mov	r4,r2
  805af8:	180b883a 	mov	r5,r3
  805afc:	080cda40 	call	80cda4 <__ledf2>
  805b00:	1003e816 	blt	r2,zero,806aa4 <_dtoa_r+0x1598>
  805b04:	b825883a 	mov	r18,r23
  805b08:	bd83e926 	beq	r23,r22,806ab0 <_dtoa_r+0x15a4>
  805b0c:	a809883a 	mov	r4,r21
  805b10:	980b883a 	mov	r5,r19
  805b14:	000d883a 	mov	r6,zero
  805b18:	01d00934 	movhi	r7,16420
  805b1c:	080ce980 	call	80ce98 <__muldf3>
  805b20:	000d883a 	mov	r6,zero
  805b24:	01d00934 	movhi	r7,16420
  805b28:	8009883a 	mov	r4,r16
  805b2c:	880b883a 	mov	r5,r17
  805b30:	102b883a 	mov	r21,r2
  805b34:	1827883a 	mov	r19,r3
  805b38:	080ce980 	call	80ce98 <__muldf3>
  805b3c:	180b883a 	mov	r5,r3
  805b40:	1009883a 	mov	r4,r2
  805b44:	1821883a 	mov	r16,r3
  805b48:	1023883a 	mov	r17,r2
  805b4c:	080e0000 	call	80e000 <__fixdfsi>
  805b50:	1009883a 	mov	r4,r2
  805b54:	1029883a 	mov	r20,r2
  805b58:	080e0800 	call	80e080 <__floatsidf>
  805b5c:	8809883a 	mov	r4,r17
  805b60:	800b883a 	mov	r5,r16
  805b64:	100d883a 	mov	r6,r2
  805b68:	180f883a 	mov	r7,r3
  805b6c:	080d7040 	call	80d704 <__subdf3>
  805b70:	a5000c04 	addi	r20,r20,48
  805b74:	a80d883a 	mov	r6,r21
  805b78:	980f883a 	mov	r7,r19
  805b7c:	1009883a 	mov	r4,r2
  805b80:	180b883a 	mov	r5,r3
  805b84:	95000005 	stb	r20,0(r18)
  805b88:	1021883a 	mov	r16,r2
  805b8c:	1823883a 	mov	r17,r3
  805b90:	080cda40 	call	80cda4 <__ledf2>
  805b94:	bdc00044 	addi	r23,r23,1
  805b98:	800d883a 	mov	r6,r16
  805b9c:	880f883a 	mov	r7,r17
  805ba0:	0009883a 	mov	r4,zero
  805ba4:	014ffc34 	movhi	r5,16368
  805ba8:	103fcf0e 	bge	r2,zero,805ae8 <__alt_mem_epcs_flash_controller_0+0xff7fcae8>
  805bac:	d8c01317 	ldw	r3,76(sp)
  805bb0:	d8c00515 	stw	r3,20(sp)
  805bb4:	d9400917 	ldw	r5,36(sp)
  805bb8:	e009883a 	mov	r4,fp
  805bbc:	08077840 	call	807784 <_Bfree>
  805bc0:	d9000517 	ldw	r4,20(sp)
  805bc4:	d9802317 	ldw	r6,140(sp)
  805bc8:	d9c02517 	ldw	r7,148(sp)
  805bcc:	b8000005 	stb	zero,0(r23)
  805bd0:	20800044 	addi	r2,r4,1
  805bd4:	30800015 	stw	r2,0(r6)
  805bd8:	3802aa26 	beq	r7,zero,806684 <_dtoa_r+0x1178>
  805bdc:	3dc00015 	stw	r23,0(r7)
  805be0:	d8800717 	ldw	r2,28(sp)
  805be4:	003e7906 	br	8055cc <__alt_mem_epcs_flash_controller_0+0xff7fc5cc>
  805be8:	00800434 	movhi	r2,16
  805bec:	10bfffc4 	addi	r2,r2,-1
  805bf0:	88a2703a 	and	r17,r17,r2
  805bf4:	883e851e 	bne	r17,zero,80560c <__alt_mem_epcs_flash_controller_0+0xff7fc60c>
  805bf8:	008020b4 	movhi	r2,130
  805bfc:	10afa904 	addi	r2,r2,-16732
  805c00:	003e8406 	br	805614 <__alt_mem_epcs_flash_controller_0+0xff7fc614>
  805c04:	10c00204 	addi	r3,r2,8
  805c08:	003e8706 	br	805628 <__alt_mem_epcs_flash_controller_0+0xff7fc628>
  805c0c:	01400434 	movhi	r5,16
  805c10:	297fffc4 	addi	r5,r5,-1
  805c14:	994a703a 	and	r5,r19,r5
  805c18:	9009883a 	mov	r4,r18
  805c1c:	843f0044 	addi	r16,r16,-1023
  805c20:	294ffc34 	orhi	r5,r5,16368
  805c24:	dd800217 	ldw	r22,8(sp)
  805c28:	d8001115 	stw	zero,68(sp)
  805c2c:	003ea506 	br	8056c4 <__alt_mem_epcs_flash_controller_0+0xff7fc6c4>
  805c30:	008020b4 	movhi	r2,130
  805c34:	10afa004 	addi	r2,r2,-16768
  805c38:	003e6406 	br	8055cc <__alt_mem_epcs_flash_controller_0+0xff7fc5cc>
  805c3c:	e0001115 	stw	zero,68(fp)
  805c40:	000b883a 	mov	r5,zero
  805c44:	e009883a 	mov	r4,fp
  805c48:	08076dc0 	call	8076dc <_Balloc>
  805c4c:	01bfffc4 	movi	r6,-1
  805c50:	01c00044 	movi	r7,1
  805c54:	d8800715 	stw	r2,28(sp)
  805c58:	d9800c15 	stw	r6,48(sp)
  805c5c:	e0801015 	stw	r2,64(fp)
  805c60:	d8000315 	stw	zero,12(sp)
  805c64:	d9c00b15 	stw	r7,44(sp)
  805c68:	d9800615 	stw	r6,24(sp)
  805c6c:	d8002215 	stw	zero,136(sp)
  805c70:	d8800117 	ldw	r2,4(sp)
  805c74:	10008916 	blt	r2,zero,805e9c <_dtoa_r+0x990>
  805c78:	d9000517 	ldw	r4,20(sp)
  805c7c:	00c00384 	movi	r3,14
  805c80:	19008616 	blt	r3,r4,805e9c <_dtoa_r+0x990>
  805c84:	200490fa 	slli	r2,r4,3
  805c88:	00c020b4 	movhi	r3,130
  805c8c:	d9802217 	ldw	r6,136(sp)
  805c90:	18efc704 	addi	r3,r3,-16612
  805c94:	1885883a 	add	r2,r3,r2
  805c98:	14000017 	ldw	r16,0(r2)
  805c9c:	14400117 	ldw	r17,4(r2)
  805ca0:	30016316 	blt	r6,zero,806230 <_dtoa_r+0xd24>
  805ca4:	800d883a 	mov	r6,r16
  805ca8:	880f883a 	mov	r7,r17
  805cac:	9009883a 	mov	r4,r18
  805cb0:	980b883a 	mov	r5,r19
  805cb4:	080c2700 	call	80c270 <__divdf3>
  805cb8:	180b883a 	mov	r5,r3
  805cbc:	1009883a 	mov	r4,r2
  805cc0:	080e0000 	call	80e000 <__fixdfsi>
  805cc4:	1009883a 	mov	r4,r2
  805cc8:	102b883a 	mov	r21,r2
  805ccc:	080e0800 	call	80e080 <__floatsidf>
  805cd0:	800d883a 	mov	r6,r16
  805cd4:	880f883a 	mov	r7,r17
  805cd8:	1009883a 	mov	r4,r2
  805cdc:	180b883a 	mov	r5,r3
  805ce0:	080ce980 	call	80ce98 <__muldf3>
  805ce4:	100d883a 	mov	r6,r2
  805ce8:	180f883a 	mov	r7,r3
  805cec:	9009883a 	mov	r4,r18
  805cf0:	980b883a 	mov	r5,r19
  805cf4:	080d7040 	call	80d704 <__subdf3>
  805cf8:	d9c00717 	ldw	r7,28(sp)
  805cfc:	1009883a 	mov	r4,r2
  805d00:	a8800c04 	addi	r2,r21,48
  805d04:	38800005 	stb	r2,0(r7)
  805d08:	3dc00044 	addi	r23,r7,1
  805d0c:	d9c00617 	ldw	r7,24(sp)
  805d10:	01800044 	movi	r6,1
  805d14:	180b883a 	mov	r5,r3
  805d18:	2005883a 	mov	r2,r4
  805d1c:	39803826 	beq	r7,r6,805e00 <_dtoa_r+0x8f4>
  805d20:	000d883a 	mov	r6,zero
  805d24:	01d00934 	movhi	r7,16420
  805d28:	080ce980 	call	80ce98 <__muldf3>
  805d2c:	000d883a 	mov	r6,zero
  805d30:	000f883a 	mov	r7,zero
  805d34:	1009883a 	mov	r4,r2
  805d38:	180b883a 	mov	r5,r3
  805d3c:	1025883a 	mov	r18,r2
  805d40:	1827883a 	mov	r19,r3
  805d44:	080cc400 	call	80cc40 <__eqdf2>
  805d48:	103f9a26 	beq	r2,zero,805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  805d4c:	d9c00617 	ldw	r7,24(sp)
  805d50:	d8c00717 	ldw	r3,28(sp)
  805d54:	b829883a 	mov	r20,r23
  805d58:	38bfffc4 	addi	r2,r7,-1
  805d5c:	18ad883a 	add	r22,r3,r2
  805d60:	00000a06 	br	805d8c <_dtoa_r+0x880>
  805d64:	080ce980 	call	80ce98 <__muldf3>
  805d68:	000d883a 	mov	r6,zero
  805d6c:	000f883a 	mov	r7,zero
  805d70:	1009883a 	mov	r4,r2
  805d74:	180b883a 	mov	r5,r3
  805d78:	1025883a 	mov	r18,r2
  805d7c:	1827883a 	mov	r19,r3
  805d80:	b829883a 	mov	r20,r23
  805d84:	080cc400 	call	80cc40 <__eqdf2>
  805d88:	103f8a26 	beq	r2,zero,805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  805d8c:	800d883a 	mov	r6,r16
  805d90:	880f883a 	mov	r7,r17
  805d94:	9009883a 	mov	r4,r18
  805d98:	980b883a 	mov	r5,r19
  805d9c:	080c2700 	call	80c270 <__divdf3>
  805da0:	180b883a 	mov	r5,r3
  805da4:	1009883a 	mov	r4,r2
  805da8:	080e0000 	call	80e000 <__fixdfsi>
  805dac:	1009883a 	mov	r4,r2
  805db0:	102b883a 	mov	r21,r2
  805db4:	080e0800 	call	80e080 <__floatsidf>
  805db8:	800d883a 	mov	r6,r16
  805dbc:	880f883a 	mov	r7,r17
  805dc0:	1009883a 	mov	r4,r2
  805dc4:	180b883a 	mov	r5,r3
  805dc8:	080ce980 	call	80ce98 <__muldf3>
  805dcc:	100d883a 	mov	r6,r2
  805dd0:	180f883a 	mov	r7,r3
  805dd4:	9009883a 	mov	r4,r18
  805dd8:	980b883a 	mov	r5,r19
  805ddc:	080d7040 	call	80d704 <__subdf3>
  805de0:	aa000c04 	addi	r8,r21,48
  805de4:	a2000005 	stb	r8,0(r20)
  805de8:	000d883a 	mov	r6,zero
  805dec:	01d00934 	movhi	r7,16420
  805df0:	1009883a 	mov	r4,r2
  805df4:	180b883a 	mov	r5,r3
  805df8:	a5c00044 	addi	r23,r20,1
  805dfc:	b53fd91e 	bne	r22,r20,805d64 <__alt_mem_epcs_flash_controller_0+0xff7fcd64>
  805e00:	100d883a 	mov	r6,r2
  805e04:	180f883a 	mov	r7,r3
  805e08:	1009883a 	mov	r4,r2
  805e0c:	180b883a 	mov	r5,r3
  805e10:	080b9c40 	call	80b9c4 <__adddf3>
  805e14:	100d883a 	mov	r6,r2
  805e18:	180f883a 	mov	r7,r3
  805e1c:	8009883a 	mov	r4,r16
  805e20:	880b883a 	mov	r5,r17
  805e24:	1027883a 	mov	r19,r2
  805e28:	1825883a 	mov	r18,r3
  805e2c:	080cda40 	call	80cda4 <__ledf2>
  805e30:	10000816 	blt	r2,zero,805e54 <_dtoa_r+0x948>
  805e34:	980d883a 	mov	r6,r19
  805e38:	900f883a 	mov	r7,r18
  805e3c:	8009883a 	mov	r4,r16
  805e40:	880b883a 	mov	r5,r17
  805e44:	080cc400 	call	80cc40 <__eqdf2>
  805e48:	103f5a1e 	bne	r2,zero,805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  805e4c:	ad40004c 	andi	r21,r21,1
  805e50:	a83f5826 	beq	r21,zero,805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  805e54:	bd3fffc3 	ldbu	r20,-1(r23)
  805e58:	b8bfffc4 	addi	r2,r23,-1
  805e5c:	1007883a 	mov	r3,r2
  805e60:	01400e44 	movi	r5,57
  805e64:	d9800717 	ldw	r6,28(sp)
  805e68:	00000506 	br	805e80 <_dtoa_r+0x974>
  805e6c:	18ffffc4 	addi	r3,r3,-1
  805e70:	11824726 	beq	r2,r6,806790 <_dtoa_r+0x1284>
  805e74:	1d000003 	ldbu	r20,0(r3)
  805e78:	102f883a 	mov	r23,r2
  805e7c:	10bfffc4 	addi	r2,r2,-1
  805e80:	a1003fcc 	andi	r4,r20,255
  805e84:	2100201c 	xori	r4,r4,128
  805e88:	213fe004 	addi	r4,r4,-128
  805e8c:	217ff726 	beq	r4,r5,805e6c <__alt_mem_epcs_flash_controller_0+0xff7fce6c>
  805e90:	a2000044 	addi	r8,r20,1
  805e94:	12000005 	stb	r8,0(r2)
  805e98:	003f4606 	br	805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  805e9c:	d9000b17 	ldw	r4,44(sp)
  805ea0:	2000c826 	beq	r4,zero,8061c4 <_dtoa_r+0xcb8>
  805ea4:	d9800317 	ldw	r6,12(sp)
  805ea8:	00c00044 	movi	r3,1
  805eac:	1980f90e 	bge	r3,r6,806294 <_dtoa_r+0xd88>
  805eb0:	d8800617 	ldw	r2,24(sp)
  805eb4:	d8c00a17 	ldw	r3,40(sp)
  805eb8:	157fffc4 	addi	r21,r2,-1
  805ebc:	1d41f316 	blt	r3,r21,80668c <_dtoa_r+0x1180>
  805ec0:	1d6bc83a 	sub	r21,r3,r21
  805ec4:	d9c00617 	ldw	r7,24(sp)
  805ec8:	3802aa16 	blt	r7,zero,806974 <_dtoa_r+0x1468>
  805ecc:	dd000817 	ldw	r20,32(sp)
  805ed0:	d8800617 	ldw	r2,24(sp)
  805ed4:	d8c00817 	ldw	r3,32(sp)
  805ed8:	01400044 	movi	r5,1
  805edc:	e009883a 	mov	r4,fp
  805ee0:	1887883a 	add	r3,r3,r2
  805ee4:	d8c00815 	stw	r3,32(sp)
  805ee8:	b0ad883a 	add	r22,r22,r2
  805eec:	0807b100 	call	807b10 <__i2b>
  805ef0:	1023883a 	mov	r17,r2
  805ef4:	a0000826 	beq	r20,zero,805f18 <_dtoa_r+0xa0c>
  805ef8:	0580070e 	bge	zero,r22,805f18 <_dtoa_r+0xa0c>
  805efc:	a005883a 	mov	r2,r20
  805f00:	b500b916 	blt	r22,r20,8061e8 <_dtoa_r+0xcdc>
  805f04:	d9000817 	ldw	r4,32(sp)
  805f08:	a0a9c83a 	sub	r20,r20,r2
  805f0c:	b0adc83a 	sub	r22,r22,r2
  805f10:	2089c83a 	sub	r4,r4,r2
  805f14:	d9000815 	stw	r4,32(sp)
  805f18:	d9800a17 	ldw	r6,40(sp)
  805f1c:	0181810e 	bge	zero,r6,806524 <_dtoa_r+0x1018>
  805f20:	d9c00b17 	ldw	r7,44(sp)
  805f24:	3800b326 	beq	r7,zero,8061f4 <_dtoa_r+0xce8>
  805f28:	a800b226 	beq	r21,zero,8061f4 <_dtoa_r+0xce8>
  805f2c:	880b883a 	mov	r5,r17
  805f30:	a80d883a 	mov	r6,r21
  805f34:	e009883a 	mov	r4,fp
  805f38:	0807dd80 	call	807dd8 <__pow5mult>
  805f3c:	d9800917 	ldw	r6,36(sp)
  805f40:	100b883a 	mov	r5,r2
  805f44:	e009883a 	mov	r4,fp
  805f48:	1023883a 	mov	r17,r2
  805f4c:	0807b4c0 	call	807b4c <__multiply>
  805f50:	1021883a 	mov	r16,r2
  805f54:	d8800a17 	ldw	r2,40(sp)
  805f58:	d9400917 	ldw	r5,36(sp)
  805f5c:	e009883a 	mov	r4,fp
  805f60:	1545c83a 	sub	r2,r2,r21
  805f64:	d8800a15 	stw	r2,40(sp)
  805f68:	08077840 	call	807784 <_Bfree>
  805f6c:	d8c00a17 	ldw	r3,40(sp)
  805f70:	18009f1e 	bne	r3,zero,8061f0 <_dtoa_r+0xce4>
  805f74:	05c00044 	movi	r23,1
  805f78:	e009883a 	mov	r4,fp
  805f7c:	b80b883a 	mov	r5,r23
  805f80:	0807b100 	call	807b10 <__i2b>
  805f84:	d9000d17 	ldw	r4,52(sp)
  805f88:	102b883a 	mov	r21,r2
  805f8c:	2000ce26 	beq	r4,zero,8062c8 <_dtoa_r+0xdbc>
  805f90:	200d883a 	mov	r6,r4
  805f94:	100b883a 	mov	r5,r2
  805f98:	e009883a 	mov	r4,fp
  805f9c:	0807dd80 	call	807dd8 <__pow5mult>
  805fa0:	d9800317 	ldw	r6,12(sp)
  805fa4:	102b883a 	mov	r21,r2
  805fa8:	b981810e 	bge	r23,r6,8065b0 <_dtoa_r+0x10a4>
  805fac:	0027883a 	mov	r19,zero
  805fb0:	a8800417 	ldw	r2,16(r21)
  805fb4:	05c00804 	movi	r23,32
  805fb8:	10800104 	addi	r2,r2,4
  805fbc:	1085883a 	add	r2,r2,r2
  805fc0:	1085883a 	add	r2,r2,r2
  805fc4:	a885883a 	add	r2,r21,r2
  805fc8:	11000017 	ldw	r4,0(r2)
  805fcc:	08079f80 	call	8079f8 <__hi0bits>
  805fd0:	b885c83a 	sub	r2,r23,r2
  805fd4:	1585883a 	add	r2,r2,r22
  805fd8:	108007cc 	andi	r2,r2,31
  805fdc:	1000b326 	beq	r2,zero,8062ac <_dtoa_r+0xda0>
  805fe0:	00c00804 	movi	r3,32
  805fe4:	1887c83a 	sub	r3,r3,r2
  805fe8:	01000104 	movi	r4,4
  805fec:	20c2cd0e 	bge	r4,r3,806b24 <_dtoa_r+0x1618>
  805ff0:	00c00704 	movi	r3,28
  805ff4:	1885c83a 	sub	r2,r3,r2
  805ff8:	d8c00817 	ldw	r3,32(sp)
  805ffc:	a0a9883a 	add	r20,r20,r2
  806000:	b0ad883a 	add	r22,r22,r2
  806004:	1887883a 	add	r3,r3,r2
  806008:	d8c00815 	stw	r3,32(sp)
  80600c:	d9800817 	ldw	r6,32(sp)
  806010:	0180040e 	bge	zero,r6,806024 <_dtoa_r+0xb18>
  806014:	800b883a 	mov	r5,r16
  806018:	e009883a 	mov	r4,fp
  80601c:	0807f180 	call	807f18 <__lshift>
  806020:	1021883a 	mov	r16,r2
  806024:	0580050e 	bge	zero,r22,80603c <_dtoa_r+0xb30>
  806028:	a80b883a 	mov	r5,r21
  80602c:	b00d883a 	mov	r6,r22
  806030:	e009883a 	mov	r4,fp
  806034:	0807f180 	call	807f18 <__lshift>
  806038:	102b883a 	mov	r21,r2
  80603c:	d9c00e17 	ldw	r7,56(sp)
  806040:	3801211e 	bne	r7,zero,8064c8 <_dtoa_r+0xfbc>
  806044:	d9800617 	ldw	r6,24(sp)
  806048:	0181380e 	bge	zero,r6,80652c <_dtoa_r+0x1020>
  80604c:	d8c00b17 	ldw	r3,44(sp)
  806050:	1800ab1e 	bne	r3,zero,806300 <_dtoa_r+0xdf4>
  806054:	dc800717 	ldw	r18,28(sp)
  806058:	dcc00617 	ldw	r19,24(sp)
  80605c:	9029883a 	mov	r20,r18
  806060:	00000206 	br	80606c <_dtoa_r+0xb60>
  806064:	08077ac0 	call	8077ac <__multadd>
  806068:	1021883a 	mov	r16,r2
  80606c:	a80b883a 	mov	r5,r21
  806070:	8009883a 	mov	r4,r16
  806074:	08052e40 	call	8052e4 <quorem>
  806078:	10800c04 	addi	r2,r2,48
  80607c:	90800005 	stb	r2,0(r18)
  806080:	94800044 	addi	r18,r18,1
  806084:	9507c83a 	sub	r3,r18,r20
  806088:	000f883a 	mov	r7,zero
  80608c:	01800284 	movi	r6,10
  806090:	800b883a 	mov	r5,r16
  806094:	e009883a 	mov	r4,fp
  806098:	1cfff216 	blt	r3,r19,806064 <__alt_mem_epcs_flash_controller_0+0xff7fd064>
  80609c:	1011883a 	mov	r8,r2
  8060a0:	d8800617 	ldw	r2,24(sp)
  8060a4:	0082370e 	bge	zero,r2,806984 <_dtoa_r+0x1478>
  8060a8:	d9000717 	ldw	r4,28(sp)
  8060ac:	0025883a 	mov	r18,zero
  8060b0:	20af883a 	add	r23,r4,r2
  8060b4:	01800044 	movi	r6,1
  8060b8:	800b883a 	mov	r5,r16
  8060bc:	e009883a 	mov	r4,fp
  8060c0:	da001715 	stw	r8,92(sp)
  8060c4:	0807f180 	call	807f18 <__lshift>
  8060c8:	a80b883a 	mov	r5,r21
  8060cc:	1009883a 	mov	r4,r2
  8060d0:	d8800915 	stw	r2,36(sp)
  8060d4:	08080600 	call	808060 <__mcmp>
  8060d8:	da001717 	ldw	r8,92(sp)
  8060dc:	0081800e 	bge	zero,r2,8066e0 <_dtoa_r+0x11d4>
  8060e0:	b93fffc3 	ldbu	r4,-1(r23)
  8060e4:	b8bfffc4 	addi	r2,r23,-1
  8060e8:	1007883a 	mov	r3,r2
  8060ec:	01800e44 	movi	r6,57
  8060f0:	d9c00717 	ldw	r7,28(sp)
  8060f4:	00000506 	br	80610c <_dtoa_r+0xc00>
  8060f8:	18ffffc4 	addi	r3,r3,-1
  8060fc:	11c12326 	beq	r2,r7,80658c <_dtoa_r+0x1080>
  806100:	19000003 	ldbu	r4,0(r3)
  806104:	102f883a 	mov	r23,r2
  806108:	10bfffc4 	addi	r2,r2,-1
  80610c:	21403fcc 	andi	r5,r4,255
  806110:	2940201c 	xori	r5,r5,128
  806114:	297fe004 	addi	r5,r5,-128
  806118:	29bff726 	beq	r5,r6,8060f8 <__alt_mem_epcs_flash_controller_0+0xff7fd0f8>
  80611c:	21000044 	addi	r4,r4,1
  806120:	11000005 	stb	r4,0(r2)
  806124:	a80b883a 	mov	r5,r21
  806128:	e009883a 	mov	r4,fp
  80612c:	08077840 	call	807784 <_Bfree>
  806130:	883ea026 	beq	r17,zero,805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  806134:	90000426 	beq	r18,zero,806148 <_dtoa_r+0xc3c>
  806138:	94400326 	beq	r18,r17,806148 <_dtoa_r+0xc3c>
  80613c:	900b883a 	mov	r5,r18
  806140:	e009883a 	mov	r4,fp
  806144:	08077840 	call	807784 <_Bfree>
  806148:	880b883a 	mov	r5,r17
  80614c:	e009883a 	mov	r4,fp
  806150:	08077840 	call	807784 <_Bfree>
  806154:	003e9706 	br	805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  806158:	01800044 	movi	r6,1
  80615c:	d9800e15 	stw	r6,56(sp)
  806160:	003d9606 	br	8057bc <__alt_mem_epcs_flash_controller_0+0xff7fc7bc>
  806164:	d8800817 	ldw	r2,32(sp)
  806168:	d8c00517 	ldw	r3,20(sp)
  80616c:	d8000d15 	stw	zero,52(sp)
  806170:	10c5c83a 	sub	r2,r2,r3
  806174:	00c9c83a 	sub	r4,zero,r3
  806178:	d8800815 	stw	r2,32(sp)
  80617c:	d9000a15 	stw	r4,40(sp)
  806180:	003d9706 	br	8057e0 <__alt_mem_epcs_flash_controller_0+0xff7fc7e0>
  806184:	05adc83a 	sub	r22,zero,r22
  806188:	dd800815 	stw	r22,32(sp)
  80618c:	002d883a 	mov	r22,zero
  806190:	003d8e06 	br	8057cc <__alt_mem_epcs_flash_controller_0+0xff7fc7cc>
  806194:	d9000517 	ldw	r4,20(sp)
  806198:	080e0800 	call	80e080 <__floatsidf>
  80619c:	100d883a 	mov	r6,r2
  8061a0:	180f883a 	mov	r7,r3
  8061a4:	a009883a 	mov	r4,r20
  8061a8:	880b883a 	mov	r5,r17
  8061ac:	080cc400 	call	80cc40 <__eqdf2>
  8061b0:	103d7126 	beq	r2,zero,805778 <__alt_mem_epcs_flash_controller_0+0xff7fc778>
  8061b4:	d9c00517 	ldw	r7,20(sp)
  8061b8:	39ffffc4 	addi	r7,r7,-1
  8061bc:	d9c00515 	stw	r7,20(sp)
  8061c0:	003d6d06 	br	805778 <__alt_mem_epcs_flash_controller_0+0xff7fc778>
  8061c4:	dd400a17 	ldw	r21,40(sp)
  8061c8:	dd000817 	ldw	r20,32(sp)
  8061cc:	0023883a 	mov	r17,zero
  8061d0:	003f4806 	br	805ef4 <__alt_mem_epcs_flash_controller_0+0xff7fcef4>
  8061d4:	10e3c83a 	sub	r17,r2,r3
  8061d8:	9448983a 	sll	r4,r18,r17
  8061dc:	003d3206 	br	8056a8 <__alt_mem_epcs_flash_controller_0+0xff7fc6a8>
  8061e0:	d8000e15 	stw	zero,56(sp)
  8061e4:	003d7506 	br	8057bc <__alt_mem_epcs_flash_controller_0+0xff7fc7bc>
  8061e8:	b005883a 	mov	r2,r22
  8061ec:	003f4506 	br	805f04 <__alt_mem_epcs_flash_controller_0+0xff7fcf04>
  8061f0:	dc000915 	stw	r16,36(sp)
  8061f4:	d9800a17 	ldw	r6,40(sp)
  8061f8:	d9400917 	ldw	r5,36(sp)
  8061fc:	e009883a 	mov	r4,fp
  806200:	0807dd80 	call	807dd8 <__pow5mult>
  806204:	1021883a 	mov	r16,r2
  806208:	003f5a06 	br	805f74 <__alt_mem_epcs_flash_controller_0+0xff7fcf74>
  80620c:	01c00044 	movi	r7,1
  806210:	d9c00b15 	stw	r7,44(sp)
  806214:	d8802217 	ldw	r2,136(sp)
  806218:	0081280e 	bge	zero,r2,8066bc <_dtoa_r+0x11b0>
  80621c:	100d883a 	mov	r6,r2
  806220:	1021883a 	mov	r16,r2
  806224:	d8800c15 	stw	r2,48(sp)
  806228:	d8800615 	stw	r2,24(sp)
  80622c:	003d8806 	br	805850 <__alt_mem_epcs_flash_controller_0+0xff7fc850>
  806230:	d8800617 	ldw	r2,24(sp)
  806234:	00be9b16 	blt	zero,r2,805ca4 <__alt_mem_epcs_flash_controller_0+0xff7fcca4>
  806238:	10010f1e 	bne	r2,zero,806678 <_dtoa_r+0x116c>
  80623c:	880b883a 	mov	r5,r17
  806240:	000d883a 	mov	r6,zero
  806244:	01d00534 	movhi	r7,16404
  806248:	8009883a 	mov	r4,r16
  80624c:	080ce980 	call	80ce98 <__muldf3>
  806250:	900d883a 	mov	r6,r18
  806254:	980f883a 	mov	r7,r19
  806258:	1009883a 	mov	r4,r2
  80625c:	180b883a 	mov	r5,r3
  806260:	080ccc80 	call	80ccc8 <__gedf2>
  806264:	002b883a 	mov	r21,zero
  806268:	0023883a 	mov	r17,zero
  80626c:	1000bf16 	blt	r2,zero,80656c <_dtoa_r+0x1060>
  806270:	d9802217 	ldw	r6,136(sp)
  806274:	ddc00717 	ldw	r23,28(sp)
  806278:	018c303a 	nor	r6,zero,r6
  80627c:	d9800515 	stw	r6,20(sp)
  806280:	a80b883a 	mov	r5,r21
  806284:	e009883a 	mov	r4,fp
  806288:	08077840 	call	807784 <_Bfree>
  80628c:	883e4926 	beq	r17,zero,805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  806290:	003fad06 	br	806148 <__alt_mem_epcs_flash_controller_0+0xff7fd148>
  806294:	d9c01117 	ldw	r7,68(sp)
  806298:	3801bc26 	beq	r7,zero,80698c <_dtoa_r+0x1480>
  80629c:	10810cc4 	addi	r2,r2,1075
  8062a0:	dd400a17 	ldw	r21,40(sp)
  8062a4:	dd000817 	ldw	r20,32(sp)
  8062a8:	003f0a06 	br	805ed4 <__alt_mem_epcs_flash_controller_0+0xff7fced4>
  8062ac:	00800704 	movi	r2,28
  8062b0:	d9000817 	ldw	r4,32(sp)
  8062b4:	a0a9883a 	add	r20,r20,r2
  8062b8:	b0ad883a 	add	r22,r22,r2
  8062bc:	2089883a 	add	r4,r4,r2
  8062c0:	d9000815 	stw	r4,32(sp)
  8062c4:	003f5106 	br	80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  8062c8:	d8c00317 	ldw	r3,12(sp)
  8062cc:	b8c1fc0e 	bge	r23,r3,806ac0 <_dtoa_r+0x15b4>
  8062d0:	0027883a 	mov	r19,zero
  8062d4:	b805883a 	mov	r2,r23
  8062d8:	003f3e06 	br	805fd4 <__alt_mem_epcs_flash_controller_0+0xff7fcfd4>
  8062dc:	880b883a 	mov	r5,r17
  8062e0:	e009883a 	mov	r4,fp
  8062e4:	000f883a 	mov	r7,zero
  8062e8:	01800284 	movi	r6,10
  8062ec:	08077ac0 	call	8077ac <__multadd>
  8062f0:	d9000c17 	ldw	r4,48(sp)
  8062f4:	1023883a 	mov	r17,r2
  8062f8:	0102040e 	bge	zero,r4,806b0c <_dtoa_r+0x1600>
  8062fc:	d9000615 	stw	r4,24(sp)
  806300:	0500050e 	bge	zero,r20,806318 <_dtoa_r+0xe0c>
  806304:	880b883a 	mov	r5,r17
  806308:	a00d883a 	mov	r6,r20
  80630c:	e009883a 	mov	r4,fp
  806310:	0807f180 	call	807f18 <__lshift>
  806314:	1023883a 	mov	r17,r2
  806318:	9801241e 	bne	r19,zero,8067ac <_dtoa_r+0x12a0>
  80631c:	8829883a 	mov	r20,r17
  806320:	d9000617 	ldw	r4,24(sp)
  806324:	dcc00717 	ldw	r19,28(sp)
  806328:	9480004c 	andi	r18,r18,1
  80632c:	20bfffc4 	addi	r2,r4,-1
  806330:	9885883a 	add	r2,r19,r2
  806334:	d8800415 	stw	r2,16(sp)
  806338:	dc800615 	stw	r18,24(sp)
  80633c:	a80b883a 	mov	r5,r21
  806340:	8009883a 	mov	r4,r16
  806344:	08052e40 	call	8052e4 <quorem>
  806348:	880b883a 	mov	r5,r17
  80634c:	8009883a 	mov	r4,r16
  806350:	102f883a 	mov	r23,r2
  806354:	08080600 	call	808060 <__mcmp>
  806358:	a80b883a 	mov	r5,r21
  80635c:	a00d883a 	mov	r6,r20
  806360:	e009883a 	mov	r4,fp
  806364:	102d883a 	mov	r22,r2
  806368:	08080c00 	call	8080c0 <__mdiff>
  80636c:	1007883a 	mov	r3,r2
  806370:	10800317 	ldw	r2,12(r2)
  806374:	bc800c04 	addi	r18,r23,48
  806378:	180b883a 	mov	r5,r3
  80637c:	10004e1e 	bne	r2,zero,8064b8 <_dtoa_r+0xfac>
  806380:	8009883a 	mov	r4,r16
  806384:	d8c01615 	stw	r3,88(sp)
  806388:	08080600 	call	808060 <__mcmp>
  80638c:	d8c01617 	ldw	r3,88(sp)
  806390:	e009883a 	mov	r4,fp
  806394:	d8801615 	stw	r2,88(sp)
  806398:	180b883a 	mov	r5,r3
  80639c:	08077840 	call	807784 <_Bfree>
  8063a0:	d8801617 	ldw	r2,88(sp)
  8063a4:	1000041e 	bne	r2,zero,8063b8 <_dtoa_r+0xeac>
  8063a8:	d9800317 	ldw	r6,12(sp)
  8063ac:	3000021e 	bne	r6,zero,8063b8 <_dtoa_r+0xeac>
  8063b0:	d8c00617 	ldw	r3,24(sp)
  8063b4:	18003726 	beq	r3,zero,806494 <_dtoa_r+0xf88>
  8063b8:	b0002016 	blt	r22,zero,80643c <_dtoa_r+0xf30>
  8063bc:	b000041e 	bne	r22,zero,8063d0 <_dtoa_r+0xec4>
  8063c0:	d9000317 	ldw	r4,12(sp)
  8063c4:	2000021e 	bne	r4,zero,8063d0 <_dtoa_r+0xec4>
  8063c8:	d8c00617 	ldw	r3,24(sp)
  8063cc:	18001b26 	beq	r3,zero,80643c <_dtoa_r+0xf30>
  8063d0:	00810716 	blt	zero,r2,8067f0 <_dtoa_r+0x12e4>
  8063d4:	d8c00417 	ldw	r3,16(sp)
  8063d8:	9d800044 	addi	r22,r19,1
  8063dc:	9c800005 	stb	r18,0(r19)
  8063e0:	b02f883a 	mov	r23,r22
  8063e4:	98c10626 	beq	r19,r3,806800 <_dtoa_r+0x12f4>
  8063e8:	800b883a 	mov	r5,r16
  8063ec:	000f883a 	mov	r7,zero
  8063f0:	01800284 	movi	r6,10
  8063f4:	e009883a 	mov	r4,fp
  8063f8:	08077ac0 	call	8077ac <__multadd>
  8063fc:	1021883a 	mov	r16,r2
  806400:	000f883a 	mov	r7,zero
  806404:	01800284 	movi	r6,10
  806408:	880b883a 	mov	r5,r17
  80640c:	e009883a 	mov	r4,fp
  806410:	8d002526 	beq	r17,r20,8064a8 <_dtoa_r+0xf9c>
  806414:	08077ac0 	call	8077ac <__multadd>
  806418:	a00b883a 	mov	r5,r20
  80641c:	000f883a 	mov	r7,zero
  806420:	01800284 	movi	r6,10
  806424:	e009883a 	mov	r4,fp
  806428:	1023883a 	mov	r17,r2
  80642c:	08077ac0 	call	8077ac <__multadd>
  806430:	1029883a 	mov	r20,r2
  806434:	b027883a 	mov	r19,r22
  806438:	003fc006 	br	80633c <__alt_mem_epcs_flash_controller_0+0xff7fd33c>
  80643c:	9011883a 	mov	r8,r18
  806440:	00800e0e 	bge	zero,r2,80647c <_dtoa_r+0xf70>
  806444:	800b883a 	mov	r5,r16
  806448:	01800044 	movi	r6,1
  80644c:	e009883a 	mov	r4,fp
  806450:	da001715 	stw	r8,92(sp)
  806454:	0807f180 	call	807f18 <__lshift>
  806458:	a80b883a 	mov	r5,r21
  80645c:	1009883a 	mov	r4,r2
  806460:	1021883a 	mov	r16,r2
  806464:	08080600 	call	808060 <__mcmp>
  806468:	da001717 	ldw	r8,92(sp)
  80646c:	0081960e 	bge	zero,r2,806ac8 <_dtoa_r+0x15bc>
  806470:	00800e44 	movi	r2,57
  806474:	40817026 	beq	r8,r2,806a38 <_dtoa_r+0x152c>
  806478:	ba000c44 	addi	r8,r23,49
  80647c:	8825883a 	mov	r18,r17
  806480:	9dc00044 	addi	r23,r19,1
  806484:	9a000005 	stb	r8,0(r19)
  806488:	a023883a 	mov	r17,r20
  80648c:	dc000915 	stw	r16,36(sp)
  806490:	003f2406 	br	806124 <__alt_mem_epcs_flash_controller_0+0xff7fd124>
  806494:	00800e44 	movi	r2,57
  806498:	9011883a 	mov	r8,r18
  80649c:	90816626 	beq	r18,r2,806a38 <_dtoa_r+0x152c>
  8064a0:	05bff516 	blt	zero,r22,806478 <__alt_mem_epcs_flash_controller_0+0xff7fd478>
  8064a4:	003ff506 	br	80647c <__alt_mem_epcs_flash_controller_0+0xff7fd47c>
  8064a8:	08077ac0 	call	8077ac <__multadd>
  8064ac:	1023883a 	mov	r17,r2
  8064b0:	1029883a 	mov	r20,r2
  8064b4:	003fdf06 	br	806434 <__alt_mem_epcs_flash_controller_0+0xff7fd434>
  8064b8:	e009883a 	mov	r4,fp
  8064bc:	08077840 	call	807784 <_Bfree>
  8064c0:	00800044 	movi	r2,1
  8064c4:	003fbc06 	br	8063b8 <__alt_mem_epcs_flash_controller_0+0xff7fd3b8>
  8064c8:	a80b883a 	mov	r5,r21
  8064cc:	8009883a 	mov	r4,r16
  8064d0:	08080600 	call	808060 <__mcmp>
  8064d4:	103edb0e 	bge	r2,zero,806044 <__alt_mem_epcs_flash_controller_0+0xff7fd044>
  8064d8:	800b883a 	mov	r5,r16
  8064dc:	000f883a 	mov	r7,zero
  8064e0:	01800284 	movi	r6,10
  8064e4:	e009883a 	mov	r4,fp
  8064e8:	08077ac0 	call	8077ac <__multadd>
  8064ec:	1021883a 	mov	r16,r2
  8064f0:	d8800517 	ldw	r2,20(sp)
  8064f4:	d8c00b17 	ldw	r3,44(sp)
  8064f8:	10bfffc4 	addi	r2,r2,-1
  8064fc:	d8800515 	stw	r2,20(sp)
  806500:	183f761e 	bne	r3,zero,8062dc <__alt_mem_epcs_flash_controller_0+0xff7fd2dc>
  806504:	d9000c17 	ldw	r4,48(sp)
  806508:	0101730e 	bge	zero,r4,806ad8 <_dtoa_r+0x15cc>
  80650c:	d9000615 	stw	r4,24(sp)
  806510:	003ed006 	br	806054 <__alt_mem_epcs_flash_controller_0+0xff7fd054>
  806514:	00800084 	movi	r2,2
  806518:	3081861e 	bne	r6,r2,806b34 <_dtoa_r+0x1628>
  80651c:	d8000b15 	stw	zero,44(sp)
  806520:	003f3c06 	br	806214 <__alt_mem_epcs_flash_controller_0+0xff7fd214>
  806524:	dc000917 	ldw	r16,36(sp)
  806528:	003e9206 	br	805f74 <__alt_mem_epcs_flash_controller_0+0xff7fcf74>
  80652c:	d9c00317 	ldw	r7,12(sp)
  806530:	00800084 	movi	r2,2
  806534:	11fec50e 	bge	r2,r7,80604c <__alt_mem_epcs_flash_controller_0+0xff7fd04c>
  806538:	d9000617 	ldw	r4,24(sp)
  80653c:	20013c1e 	bne	r4,zero,806a30 <_dtoa_r+0x1524>
  806540:	a80b883a 	mov	r5,r21
  806544:	000f883a 	mov	r7,zero
  806548:	01800144 	movi	r6,5
  80654c:	e009883a 	mov	r4,fp
  806550:	08077ac0 	call	8077ac <__multadd>
  806554:	100b883a 	mov	r5,r2
  806558:	8009883a 	mov	r4,r16
  80655c:	102b883a 	mov	r21,r2
  806560:	08080600 	call	808060 <__mcmp>
  806564:	dc000915 	stw	r16,36(sp)
  806568:	00bf410e 	bge	zero,r2,806270 <__alt_mem_epcs_flash_controller_0+0xff7fd270>
  80656c:	d9c00717 	ldw	r7,28(sp)
  806570:	00800c44 	movi	r2,49
  806574:	38800005 	stb	r2,0(r7)
  806578:	d8800517 	ldw	r2,20(sp)
  80657c:	3dc00044 	addi	r23,r7,1
  806580:	10800044 	addi	r2,r2,1
  806584:	d8800515 	stw	r2,20(sp)
  806588:	003f3d06 	br	806280 <__alt_mem_epcs_flash_controller_0+0xff7fd280>
  80658c:	d9800517 	ldw	r6,20(sp)
  806590:	d9c00717 	ldw	r7,28(sp)
  806594:	00800c44 	movi	r2,49
  806598:	31800044 	addi	r6,r6,1
  80659c:	d9800515 	stw	r6,20(sp)
  8065a0:	38800005 	stb	r2,0(r7)
  8065a4:	003edf06 	br	806124 <__alt_mem_epcs_flash_controller_0+0xff7fd124>
  8065a8:	d8000b15 	stw	zero,44(sp)
  8065ac:	003c9f06 	br	80582c <__alt_mem_epcs_flash_controller_0+0xff7fc82c>
  8065b0:	903e7e1e 	bne	r18,zero,805fac <__alt_mem_epcs_flash_controller_0+0xff7fcfac>
  8065b4:	00800434 	movhi	r2,16
  8065b8:	10bfffc4 	addi	r2,r2,-1
  8065bc:	9884703a 	and	r2,r19,r2
  8065c0:	1000ea1e 	bne	r2,zero,80696c <_dtoa_r+0x1460>
  8065c4:	9cdffc2c 	andhi	r19,r19,32752
  8065c8:	9800e826 	beq	r19,zero,80696c <_dtoa_r+0x1460>
  8065cc:	d9c00817 	ldw	r7,32(sp)
  8065d0:	b5800044 	addi	r22,r22,1
  8065d4:	04c00044 	movi	r19,1
  8065d8:	39c00044 	addi	r7,r7,1
  8065dc:	d9c00815 	stw	r7,32(sp)
  8065e0:	d8800d17 	ldw	r2,52(sp)
  8065e4:	103e721e 	bne	r2,zero,805fb0 <__alt_mem_epcs_flash_controller_0+0xff7fcfb0>
  8065e8:	00800044 	movi	r2,1
  8065ec:	003e7906 	br	805fd4 <__alt_mem_epcs_flash_controller_0+0xff7fcfd4>
  8065f0:	8009883a 	mov	r4,r16
  8065f4:	080e0800 	call	80e080 <__floatsidf>
  8065f8:	d9800f17 	ldw	r6,60(sp)
  8065fc:	d9c01017 	ldw	r7,64(sp)
  806600:	1009883a 	mov	r4,r2
  806604:	180b883a 	mov	r5,r3
  806608:	080ce980 	call	80ce98 <__muldf3>
  80660c:	000d883a 	mov	r6,zero
  806610:	01d00734 	movhi	r7,16412
  806614:	1009883a 	mov	r4,r2
  806618:	180b883a 	mov	r5,r3
  80661c:	080b9c40 	call	80b9c4 <__adddf3>
  806620:	047f3034 	movhi	r17,64704
  806624:	1021883a 	mov	r16,r2
  806628:	1c63883a 	add	r17,r3,r17
  80662c:	d9000f17 	ldw	r4,60(sp)
  806630:	d9401017 	ldw	r5,64(sp)
  806634:	000d883a 	mov	r6,zero
  806638:	01d00534 	movhi	r7,16404
  80663c:	080d7040 	call	80d704 <__subdf3>
  806640:	800d883a 	mov	r6,r16
  806644:	880f883a 	mov	r7,r17
  806648:	1009883a 	mov	r4,r2
  80664c:	180b883a 	mov	r5,r3
  806650:	102b883a 	mov	r21,r2
  806654:	1829883a 	mov	r20,r3
  806658:	080ccc80 	call	80ccc8 <__gedf2>
  80665c:	00806c16 	blt	zero,r2,806810 <_dtoa_r+0x1304>
  806660:	89e0003c 	xorhi	r7,r17,32768
  806664:	800d883a 	mov	r6,r16
  806668:	a809883a 	mov	r4,r21
  80666c:	a00b883a 	mov	r5,r20
  806670:	080cda40 	call	80cda4 <__ledf2>
  806674:	103d7e0e 	bge	r2,zero,805c70 <__alt_mem_epcs_flash_controller_0+0xff7fcc70>
  806678:	002b883a 	mov	r21,zero
  80667c:	0023883a 	mov	r17,zero
  806680:	003efb06 	br	806270 <__alt_mem_epcs_flash_controller_0+0xff7fd270>
  806684:	d8800717 	ldw	r2,28(sp)
  806688:	003bd006 	br	8055cc <__alt_mem_epcs_flash_controller_0+0xff7fc5cc>
  80668c:	d9000a17 	ldw	r4,40(sp)
  806690:	d9800d17 	ldw	r6,52(sp)
  806694:	dd400a15 	stw	r21,40(sp)
  806698:	a905c83a 	sub	r2,r21,r4
  80669c:	308d883a 	add	r6,r6,r2
  8066a0:	d9800d15 	stw	r6,52(sp)
  8066a4:	002b883a 	mov	r21,zero
  8066a8:	003e0606 	br	805ec4 <__alt_mem_epcs_flash_controller_0+0xff7fcec4>
  8066ac:	9023883a 	mov	r17,r18
  8066b0:	9829883a 	mov	r20,r19
  8066b4:	04000084 	movi	r16,2
  8066b8:	003c9206 	br	805904 <__alt_mem_epcs_flash_controller_0+0xff7fc904>
  8066bc:	04000044 	movi	r16,1
  8066c0:	dc000c15 	stw	r16,48(sp)
  8066c4:	dc000615 	stw	r16,24(sp)
  8066c8:	dc002215 	stw	r16,136(sp)
  8066cc:	e0001115 	stw	zero,68(fp)
  8066d0:	000b883a 	mov	r5,zero
  8066d4:	003c6906 	br	80587c <__alt_mem_epcs_flash_controller_0+0xff7fc87c>
  8066d8:	3021883a 	mov	r16,r6
  8066dc:	003ffb06 	br	8066cc <__alt_mem_epcs_flash_controller_0+0xff7fd6cc>
  8066e0:	1000021e 	bne	r2,zero,8066ec <_dtoa_r+0x11e0>
  8066e4:	4200004c 	andi	r8,r8,1
  8066e8:	403e7d1e 	bne	r8,zero,8060e0 <__alt_mem_epcs_flash_controller_0+0xff7fd0e0>
  8066ec:	01000c04 	movi	r4,48
  8066f0:	00000106 	br	8066f8 <_dtoa_r+0x11ec>
  8066f4:	102f883a 	mov	r23,r2
  8066f8:	b8bfffc4 	addi	r2,r23,-1
  8066fc:	10c00007 	ldb	r3,0(r2)
  806700:	193ffc26 	beq	r3,r4,8066f4 <__alt_mem_epcs_flash_controller_0+0xff7fd6f4>
  806704:	003e8706 	br	806124 <__alt_mem_epcs_flash_controller_0+0xff7fd124>
  806708:	d8800517 	ldw	r2,20(sp)
  80670c:	00a3c83a 	sub	r17,zero,r2
  806710:	8800a426 	beq	r17,zero,8069a4 <_dtoa_r+0x1498>
  806714:	888003cc 	andi	r2,r17,15
  806718:	100490fa 	slli	r2,r2,3
  80671c:	00c020b4 	movhi	r3,130
  806720:	18efc704 	addi	r3,r3,-16612
  806724:	1885883a 	add	r2,r3,r2
  806728:	11800017 	ldw	r6,0(r2)
  80672c:	11c00117 	ldw	r7,4(r2)
  806730:	9009883a 	mov	r4,r18
  806734:	980b883a 	mov	r5,r19
  806738:	8823d13a 	srai	r17,r17,4
  80673c:	080ce980 	call	80ce98 <__muldf3>
  806740:	d8800f15 	stw	r2,60(sp)
  806744:	d8c01015 	stw	r3,64(sp)
  806748:	8800e826 	beq	r17,zero,806aec <_dtoa_r+0x15e0>
  80674c:	050020b4 	movhi	r20,130
  806750:	a52fbd04 	addi	r20,r20,-16652
  806754:	04000084 	movi	r16,2
  806758:	8980004c 	andi	r6,r17,1
  80675c:	1009883a 	mov	r4,r2
  806760:	8823d07a 	srai	r17,r17,1
  806764:	180b883a 	mov	r5,r3
  806768:	30000426 	beq	r6,zero,80677c <_dtoa_r+0x1270>
  80676c:	a1800017 	ldw	r6,0(r20)
  806770:	a1c00117 	ldw	r7,4(r20)
  806774:	84000044 	addi	r16,r16,1
  806778:	080ce980 	call	80ce98 <__muldf3>
  80677c:	a5000204 	addi	r20,r20,8
  806780:	883ff51e 	bne	r17,zero,806758 <__alt_mem_epcs_flash_controller_0+0xff7fd758>
  806784:	d8800f15 	stw	r2,60(sp)
  806788:	d8c01015 	stw	r3,64(sp)
  80678c:	003c7606 	br	805968 <__alt_mem_epcs_flash_controller_0+0xff7fc968>
  806790:	00c00c04 	movi	r3,48
  806794:	10c00005 	stb	r3,0(r2)
  806798:	d8c00517 	ldw	r3,20(sp)
  80679c:	bd3fffc3 	ldbu	r20,-1(r23)
  8067a0:	18c00044 	addi	r3,r3,1
  8067a4:	d8c00515 	stw	r3,20(sp)
  8067a8:	003db906 	br	805e90 <__alt_mem_epcs_flash_controller_0+0xff7fce90>
  8067ac:	89400117 	ldw	r5,4(r17)
  8067b0:	e009883a 	mov	r4,fp
  8067b4:	08076dc0 	call	8076dc <_Balloc>
  8067b8:	89800417 	ldw	r6,16(r17)
  8067bc:	89400304 	addi	r5,r17,12
  8067c0:	11000304 	addi	r4,r2,12
  8067c4:	31800084 	addi	r6,r6,2
  8067c8:	318d883a 	add	r6,r6,r6
  8067cc:	318d883a 	add	r6,r6,r6
  8067d0:	1027883a 	mov	r19,r2
  8067d4:	08074380 	call	807438 <memcpy>
  8067d8:	01800044 	movi	r6,1
  8067dc:	980b883a 	mov	r5,r19
  8067e0:	e009883a 	mov	r4,fp
  8067e4:	0807f180 	call	807f18 <__lshift>
  8067e8:	1029883a 	mov	r20,r2
  8067ec:	003ecc06 	br	806320 <__alt_mem_epcs_flash_controller_0+0xff7fd320>
  8067f0:	00800e44 	movi	r2,57
  8067f4:	90809026 	beq	r18,r2,806a38 <_dtoa_r+0x152c>
  8067f8:	92000044 	addi	r8,r18,1
  8067fc:	003f1f06 	br	80647c <__alt_mem_epcs_flash_controller_0+0xff7fd47c>
  806800:	9011883a 	mov	r8,r18
  806804:	8825883a 	mov	r18,r17
  806808:	a023883a 	mov	r17,r20
  80680c:	003e2906 	br	8060b4 <__alt_mem_epcs_flash_controller_0+0xff7fd0b4>
  806810:	002b883a 	mov	r21,zero
  806814:	0023883a 	mov	r17,zero
  806818:	003f5406 	br	80656c <__alt_mem_epcs_flash_controller_0+0xff7fd56c>
  80681c:	61bfffc4 	addi	r6,r12,-1
  806820:	300490fa 	slli	r2,r6,3
  806824:	00c020b4 	movhi	r3,130
  806828:	18efc704 	addi	r3,r3,-16612
  80682c:	1885883a 	add	r2,r3,r2
  806830:	11000017 	ldw	r4,0(r2)
  806834:	11400117 	ldw	r5,4(r2)
  806838:	d8800717 	ldw	r2,28(sp)
  80683c:	880f883a 	mov	r7,r17
  806840:	d9801215 	stw	r6,72(sp)
  806844:	800d883a 	mov	r6,r16
  806848:	db001615 	stw	r12,88(sp)
  80684c:	15c00044 	addi	r23,r2,1
  806850:	080ce980 	call	80ce98 <__muldf3>
  806854:	d9401017 	ldw	r5,64(sp)
  806858:	d9000f17 	ldw	r4,60(sp)
  80685c:	d8c01515 	stw	r3,84(sp)
  806860:	d8801415 	stw	r2,80(sp)
  806864:	080e0000 	call	80e000 <__fixdfsi>
  806868:	1009883a 	mov	r4,r2
  80686c:	1021883a 	mov	r16,r2
  806870:	080e0800 	call	80e080 <__floatsidf>
  806874:	d9000f17 	ldw	r4,60(sp)
  806878:	d9401017 	ldw	r5,64(sp)
  80687c:	100d883a 	mov	r6,r2
  806880:	180f883a 	mov	r7,r3
  806884:	080d7040 	call	80d704 <__subdf3>
  806888:	1829883a 	mov	r20,r3
  80688c:	d8c00717 	ldw	r3,28(sp)
  806890:	84000c04 	addi	r16,r16,48
  806894:	1023883a 	mov	r17,r2
  806898:	1c000005 	stb	r16,0(r3)
  80689c:	db001617 	ldw	r12,88(sp)
  8068a0:	00800044 	movi	r2,1
  8068a4:	60802226 	beq	r12,r2,806930 <_dtoa_r+0x1424>
  8068a8:	d9c00717 	ldw	r7,28(sp)
  8068ac:	8805883a 	mov	r2,r17
  8068b0:	b82b883a 	mov	r21,r23
  8068b4:	3b19883a 	add	r12,r7,r12
  8068b8:	6023883a 	mov	r17,r12
  8068bc:	a007883a 	mov	r3,r20
  8068c0:	dc800f15 	stw	r18,60(sp)
  8068c4:	000d883a 	mov	r6,zero
  8068c8:	01d00934 	movhi	r7,16420
  8068cc:	1009883a 	mov	r4,r2
  8068d0:	180b883a 	mov	r5,r3
  8068d4:	080ce980 	call	80ce98 <__muldf3>
  8068d8:	180b883a 	mov	r5,r3
  8068dc:	1009883a 	mov	r4,r2
  8068e0:	1829883a 	mov	r20,r3
  8068e4:	1025883a 	mov	r18,r2
  8068e8:	080e0000 	call	80e000 <__fixdfsi>
  8068ec:	1009883a 	mov	r4,r2
  8068f0:	1021883a 	mov	r16,r2
  8068f4:	080e0800 	call	80e080 <__floatsidf>
  8068f8:	100d883a 	mov	r6,r2
  8068fc:	180f883a 	mov	r7,r3
  806900:	9009883a 	mov	r4,r18
  806904:	a00b883a 	mov	r5,r20
  806908:	84000c04 	addi	r16,r16,48
  80690c:	080d7040 	call	80d704 <__subdf3>
  806910:	ad400044 	addi	r21,r21,1
  806914:	ac3fffc5 	stb	r16,-1(r21)
  806918:	ac7fea1e 	bne	r21,r17,8068c4 <__alt_mem_epcs_flash_controller_0+0xff7fd8c4>
  80691c:	1023883a 	mov	r17,r2
  806920:	d8801217 	ldw	r2,72(sp)
  806924:	dc800f17 	ldw	r18,60(sp)
  806928:	1829883a 	mov	r20,r3
  80692c:	b8af883a 	add	r23,r23,r2
  806930:	d9001417 	ldw	r4,80(sp)
  806934:	d9401517 	ldw	r5,84(sp)
  806938:	000d883a 	mov	r6,zero
  80693c:	01cff834 	movhi	r7,16352
  806940:	080b9c40 	call	80b9c4 <__adddf3>
  806944:	880d883a 	mov	r6,r17
  806948:	a00f883a 	mov	r7,r20
  80694c:	1009883a 	mov	r4,r2
  806950:	180b883a 	mov	r5,r3
  806954:	080cda40 	call	80cda4 <__ledf2>
  806958:	10003e0e 	bge	r2,zero,806a54 <_dtoa_r+0x1548>
  80695c:	d9001317 	ldw	r4,76(sp)
  806960:	bd3fffc3 	ldbu	r20,-1(r23)
  806964:	d9000515 	stw	r4,20(sp)
  806968:	003d3b06 	br	805e58 <__alt_mem_epcs_flash_controller_0+0xff7fce58>
  80696c:	0027883a 	mov	r19,zero
  806970:	003f1b06 	br	8065e0 <__alt_mem_epcs_flash_controller_0+0xff7fd5e0>
  806974:	d8800817 	ldw	r2,32(sp)
  806978:	11e9c83a 	sub	r20,r2,r7
  80697c:	0005883a 	mov	r2,zero
  806980:	003d5406 	br	805ed4 <__alt_mem_epcs_flash_controller_0+0xff7fced4>
  806984:	00800044 	movi	r2,1
  806988:	003dc706 	br	8060a8 <__alt_mem_epcs_flash_controller_0+0xff7fd0a8>
  80698c:	d8c00217 	ldw	r3,8(sp)
  806990:	00800d84 	movi	r2,54
  806994:	dd400a17 	ldw	r21,40(sp)
  806998:	10c5c83a 	sub	r2,r2,r3
  80699c:	dd000817 	ldw	r20,32(sp)
  8069a0:	003d4c06 	br	805ed4 <__alt_mem_epcs_flash_controller_0+0xff7fced4>
  8069a4:	dc800f15 	stw	r18,60(sp)
  8069a8:	dcc01015 	stw	r19,64(sp)
  8069ac:	04000084 	movi	r16,2
  8069b0:	003bed06 	br	805968 <__alt_mem_epcs_flash_controller_0+0xff7fc968>
  8069b4:	d9000617 	ldw	r4,24(sp)
  8069b8:	203f0d26 	beq	r4,zero,8065f0 <__alt_mem_epcs_flash_controller_0+0xff7fd5f0>
  8069bc:	d9800c17 	ldw	r6,48(sp)
  8069c0:	01bcab0e 	bge	zero,r6,805c70 <__alt_mem_epcs_flash_controller_0+0xff7fcc70>
  8069c4:	d9401017 	ldw	r5,64(sp)
  8069c8:	d9000f17 	ldw	r4,60(sp)
  8069cc:	000d883a 	mov	r6,zero
  8069d0:	01d00934 	movhi	r7,16420
  8069d4:	080ce980 	call	80ce98 <__muldf3>
  8069d8:	81000044 	addi	r4,r16,1
  8069dc:	d8800f15 	stw	r2,60(sp)
  8069e0:	d8c01015 	stw	r3,64(sp)
  8069e4:	080e0800 	call	80e080 <__floatsidf>
  8069e8:	d9800f17 	ldw	r6,60(sp)
  8069ec:	d9c01017 	ldw	r7,64(sp)
  8069f0:	1009883a 	mov	r4,r2
  8069f4:	180b883a 	mov	r5,r3
  8069f8:	080ce980 	call	80ce98 <__muldf3>
  8069fc:	01d00734 	movhi	r7,16412
  806a00:	000d883a 	mov	r6,zero
  806a04:	1009883a 	mov	r4,r2
  806a08:	180b883a 	mov	r5,r3
  806a0c:	080b9c40 	call	80b9c4 <__adddf3>
  806a10:	d9c00517 	ldw	r7,20(sp)
  806a14:	047f3034 	movhi	r17,64704
  806a18:	1021883a 	mov	r16,r2
  806a1c:	39ffffc4 	addi	r7,r7,-1
  806a20:	d9c01315 	stw	r7,76(sp)
  806a24:	1c63883a 	add	r17,r3,r17
  806a28:	db000c17 	ldw	r12,48(sp)
  806a2c:	003bea06 	br	8059d8 <__alt_mem_epcs_flash_controller_0+0xff7fc9d8>
  806a30:	dc000915 	stw	r16,36(sp)
  806a34:	003e0e06 	br	806270 <__alt_mem_epcs_flash_controller_0+0xff7fd270>
  806a38:	01000e44 	movi	r4,57
  806a3c:	8825883a 	mov	r18,r17
  806a40:	9dc00044 	addi	r23,r19,1
  806a44:	99000005 	stb	r4,0(r19)
  806a48:	a023883a 	mov	r17,r20
  806a4c:	dc000915 	stw	r16,36(sp)
  806a50:	003da406 	br	8060e4 <__alt_mem_epcs_flash_controller_0+0xff7fd0e4>
  806a54:	d9801417 	ldw	r6,80(sp)
  806a58:	d9c01517 	ldw	r7,84(sp)
  806a5c:	0009883a 	mov	r4,zero
  806a60:	014ff834 	movhi	r5,16352
  806a64:	080d7040 	call	80d704 <__subdf3>
  806a68:	880d883a 	mov	r6,r17
  806a6c:	a00f883a 	mov	r7,r20
  806a70:	1009883a 	mov	r4,r2
  806a74:	180b883a 	mov	r5,r3
  806a78:	080ccc80 	call	80ccc8 <__gedf2>
  806a7c:	00bc7c0e 	bge	zero,r2,805c70 <__alt_mem_epcs_flash_controller_0+0xff7fcc70>
  806a80:	01000c04 	movi	r4,48
  806a84:	00000106 	br	806a8c <_dtoa_r+0x1580>
  806a88:	102f883a 	mov	r23,r2
  806a8c:	b8bfffc4 	addi	r2,r23,-1
  806a90:	10c00007 	ldb	r3,0(r2)
  806a94:	193ffc26 	beq	r3,r4,806a88 <__alt_mem_epcs_flash_controller_0+0xff7fda88>
  806a98:	d9801317 	ldw	r6,76(sp)
  806a9c:	d9800515 	stw	r6,20(sp)
  806aa0:	003c4406 	br	805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  806aa4:	d9801317 	ldw	r6,76(sp)
  806aa8:	d9800515 	stw	r6,20(sp)
  806aac:	003cea06 	br	805e58 <__alt_mem_epcs_flash_controller_0+0xff7fce58>
  806ab0:	dd800f17 	ldw	r22,60(sp)
  806ab4:	dcc01017 	ldw	r19,64(sp)
  806ab8:	dc801217 	ldw	r18,72(sp)
  806abc:	003c6c06 	br	805c70 <__alt_mem_epcs_flash_controller_0+0xff7fcc70>
  806ac0:	903e031e 	bne	r18,zero,8062d0 <__alt_mem_epcs_flash_controller_0+0xff7fd2d0>
  806ac4:	003ebb06 	br	8065b4 <__alt_mem_epcs_flash_controller_0+0xff7fd5b4>
  806ac8:	103e6c1e 	bne	r2,zero,80647c <__alt_mem_epcs_flash_controller_0+0xff7fd47c>
  806acc:	4080004c 	andi	r2,r8,1
  806ad0:	103e6a26 	beq	r2,zero,80647c <__alt_mem_epcs_flash_controller_0+0xff7fd47c>
  806ad4:	003e6606 	br	806470 <__alt_mem_epcs_flash_controller_0+0xff7fd470>
  806ad8:	d8c00317 	ldw	r3,12(sp)
  806adc:	00800084 	movi	r2,2
  806ae0:	10c02916 	blt	r2,r3,806b88 <_dtoa_r+0x167c>
  806ae4:	d9000c17 	ldw	r4,48(sp)
  806ae8:	003e8806 	br	80650c <__alt_mem_epcs_flash_controller_0+0xff7fd50c>
  806aec:	04000084 	movi	r16,2
  806af0:	003b9d06 	br	805968 <__alt_mem_epcs_flash_controller_0+0xff7fc968>
  806af4:	d9001317 	ldw	r4,76(sp)
  806af8:	d9000515 	stw	r4,20(sp)
  806afc:	003cd606 	br	805e58 <__alt_mem_epcs_flash_controller_0+0xff7fce58>
  806b00:	d8801317 	ldw	r2,76(sp)
  806b04:	d8800515 	stw	r2,20(sp)
  806b08:	003c2a06 	br	805bb4 <__alt_mem_epcs_flash_controller_0+0xff7fcbb4>
  806b0c:	d9800317 	ldw	r6,12(sp)
  806b10:	00800084 	movi	r2,2
  806b14:	11801516 	blt	r2,r6,806b6c <_dtoa_r+0x1660>
  806b18:	d9c00c17 	ldw	r7,48(sp)
  806b1c:	d9c00615 	stw	r7,24(sp)
  806b20:	003df706 	br	806300 <__alt_mem_epcs_flash_controller_0+0xff7fd300>
  806b24:	193d3926 	beq	r3,r4,80600c <__alt_mem_epcs_flash_controller_0+0xff7fd00c>
  806b28:	00c00f04 	movi	r3,60
  806b2c:	1885c83a 	sub	r2,r3,r2
  806b30:	003ddf06 	br	8062b0 <__alt_mem_epcs_flash_controller_0+0xff7fd2b0>
  806b34:	e009883a 	mov	r4,fp
  806b38:	e0001115 	stw	zero,68(fp)
  806b3c:	000b883a 	mov	r5,zero
  806b40:	08076dc0 	call	8076dc <_Balloc>
  806b44:	d8800715 	stw	r2,28(sp)
  806b48:	d8c00717 	ldw	r3,28(sp)
  806b4c:	00bfffc4 	movi	r2,-1
  806b50:	01000044 	movi	r4,1
  806b54:	d8800c15 	stw	r2,48(sp)
  806b58:	e0c01015 	stw	r3,64(fp)
  806b5c:	d9000b15 	stw	r4,44(sp)
  806b60:	d8800615 	stw	r2,24(sp)
  806b64:	d8002215 	stw	zero,136(sp)
  806b68:	003c4106 	br	805c70 <__alt_mem_epcs_flash_controller_0+0xff7fcc70>
  806b6c:	d8c00c17 	ldw	r3,48(sp)
  806b70:	d8c00615 	stw	r3,24(sp)
  806b74:	003e7006 	br	806538 <__alt_mem_epcs_flash_controller_0+0xff7fd538>
  806b78:	04400044 	movi	r17,1
  806b7c:	003b2006 	br	805800 <__alt_mem_epcs_flash_controller_0+0xff7fc800>
  806b80:	000b883a 	mov	r5,zero
  806b84:	003b3d06 	br	80587c <__alt_mem_epcs_flash_controller_0+0xff7fc87c>
  806b88:	d8800c17 	ldw	r2,48(sp)
  806b8c:	d8800615 	stw	r2,24(sp)
  806b90:	003e6906 	br	806538 <__alt_mem_epcs_flash_controller_0+0xff7fd538>

00806b94 <__sfvwrite_r>:
  806b94:	30800217 	ldw	r2,8(r6)
  806b98:	10006726 	beq	r2,zero,806d38 <__sfvwrite_r+0x1a4>
  806b9c:	28c0030b 	ldhu	r3,12(r5)
  806ba0:	defff404 	addi	sp,sp,-48
  806ba4:	dd400715 	stw	r21,28(sp)
  806ba8:	dd000615 	stw	r20,24(sp)
  806bac:	dc000215 	stw	r16,8(sp)
  806bb0:	dfc00b15 	stw	ra,44(sp)
  806bb4:	df000a15 	stw	fp,40(sp)
  806bb8:	ddc00915 	stw	r23,36(sp)
  806bbc:	dd800815 	stw	r22,32(sp)
  806bc0:	dcc00515 	stw	r19,20(sp)
  806bc4:	dc800415 	stw	r18,16(sp)
  806bc8:	dc400315 	stw	r17,12(sp)
  806bcc:	1880020c 	andi	r2,r3,8
  806bd0:	2821883a 	mov	r16,r5
  806bd4:	202b883a 	mov	r21,r4
  806bd8:	3029883a 	mov	r20,r6
  806bdc:	10002726 	beq	r2,zero,806c7c <__sfvwrite_r+0xe8>
  806be0:	28800417 	ldw	r2,16(r5)
  806be4:	10002526 	beq	r2,zero,806c7c <__sfvwrite_r+0xe8>
  806be8:	1880008c 	andi	r2,r3,2
  806bec:	a4400017 	ldw	r17,0(r20)
  806bf0:	10002a26 	beq	r2,zero,806c9c <__sfvwrite_r+0x108>
  806bf4:	05a00034 	movhi	r22,32768
  806bf8:	0027883a 	mov	r19,zero
  806bfc:	0025883a 	mov	r18,zero
  806c00:	b5bf0004 	addi	r22,r22,-1024
  806c04:	980d883a 	mov	r6,r19
  806c08:	a809883a 	mov	r4,r21
  806c0c:	90004626 	beq	r18,zero,806d28 <__sfvwrite_r+0x194>
  806c10:	900f883a 	mov	r7,r18
  806c14:	b480022e 	bgeu	r22,r18,806c20 <__sfvwrite_r+0x8c>
  806c18:	01e00034 	movhi	r7,32768
  806c1c:	39ff0004 	addi	r7,r7,-1024
  806c20:	80800917 	ldw	r2,36(r16)
  806c24:	81400717 	ldw	r5,28(r16)
  806c28:	103ee83a 	callr	r2
  806c2c:	00805a0e 	bge	zero,r2,806d98 <__sfvwrite_r+0x204>
  806c30:	a0c00217 	ldw	r3,8(r20)
  806c34:	98a7883a 	add	r19,r19,r2
  806c38:	90a5c83a 	sub	r18,r18,r2
  806c3c:	1885c83a 	sub	r2,r3,r2
  806c40:	a0800215 	stw	r2,8(r20)
  806c44:	103fef1e 	bne	r2,zero,806c04 <__alt_mem_epcs_flash_controller_0+0xff7fdc04>
  806c48:	0005883a 	mov	r2,zero
  806c4c:	dfc00b17 	ldw	ra,44(sp)
  806c50:	df000a17 	ldw	fp,40(sp)
  806c54:	ddc00917 	ldw	r23,36(sp)
  806c58:	dd800817 	ldw	r22,32(sp)
  806c5c:	dd400717 	ldw	r21,28(sp)
  806c60:	dd000617 	ldw	r20,24(sp)
  806c64:	dcc00517 	ldw	r19,20(sp)
  806c68:	dc800417 	ldw	r18,16(sp)
  806c6c:	dc400317 	ldw	r17,12(sp)
  806c70:	dc000217 	ldw	r16,8(sp)
  806c74:	dec00c04 	addi	sp,sp,48
  806c78:	f800283a 	ret
  806c7c:	800b883a 	mov	r5,r16
  806c80:	a809883a 	mov	r4,r21
  806c84:	080513c0 	call	80513c <__swsetup_r>
  806c88:	1000ee1e 	bne	r2,zero,807044 <__sfvwrite_r+0x4b0>
  806c8c:	80c0030b 	ldhu	r3,12(r16)
  806c90:	a4400017 	ldw	r17,0(r20)
  806c94:	1880008c 	andi	r2,r3,2
  806c98:	103fd61e 	bne	r2,zero,806bf4 <__alt_mem_epcs_flash_controller_0+0xff7fdbf4>
  806c9c:	1880004c 	andi	r2,r3,1
  806ca0:	1000421e 	bne	r2,zero,806dac <__sfvwrite_r+0x218>
  806ca4:	0039883a 	mov	fp,zero
  806ca8:	0025883a 	mov	r18,zero
  806cac:	90001a26 	beq	r18,zero,806d18 <__sfvwrite_r+0x184>
  806cb0:	1880800c 	andi	r2,r3,512
  806cb4:	84c00217 	ldw	r19,8(r16)
  806cb8:	10002126 	beq	r2,zero,806d40 <__sfvwrite_r+0x1ac>
  806cbc:	982f883a 	mov	r23,r19
  806cc0:	94c09636 	bltu	r18,r19,806f1c <__sfvwrite_r+0x388>
  806cc4:	1881200c 	andi	r2,r3,1152
  806cc8:	1000a11e 	bne	r2,zero,806f50 <__sfvwrite_r+0x3bc>
  806ccc:	81000017 	ldw	r4,0(r16)
  806cd0:	b80d883a 	mov	r6,r23
  806cd4:	e00b883a 	mov	r5,fp
  806cd8:	08075800 	call	807580 <memmove>
  806cdc:	80c00217 	ldw	r3,8(r16)
  806ce0:	81000017 	ldw	r4,0(r16)
  806ce4:	9005883a 	mov	r2,r18
  806ce8:	1ce7c83a 	sub	r19,r3,r19
  806cec:	25cf883a 	add	r7,r4,r23
  806cf0:	84c00215 	stw	r19,8(r16)
  806cf4:	81c00015 	stw	r7,0(r16)
  806cf8:	a0c00217 	ldw	r3,8(r20)
  806cfc:	e0b9883a 	add	fp,fp,r2
  806d00:	90a5c83a 	sub	r18,r18,r2
  806d04:	18a7c83a 	sub	r19,r3,r2
  806d08:	a4c00215 	stw	r19,8(r20)
  806d0c:	983fce26 	beq	r19,zero,806c48 <__alt_mem_epcs_flash_controller_0+0xff7fdc48>
  806d10:	80c0030b 	ldhu	r3,12(r16)
  806d14:	903fe61e 	bne	r18,zero,806cb0 <__alt_mem_epcs_flash_controller_0+0xff7fdcb0>
  806d18:	8f000017 	ldw	fp,0(r17)
  806d1c:	8c800117 	ldw	r18,4(r17)
  806d20:	8c400204 	addi	r17,r17,8
  806d24:	003fe106 	br	806cac <__alt_mem_epcs_flash_controller_0+0xff7fdcac>
  806d28:	8cc00017 	ldw	r19,0(r17)
  806d2c:	8c800117 	ldw	r18,4(r17)
  806d30:	8c400204 	addi	r17,r17,8
  806d34:	003fb306 	br	806c04 <__alt_mem_epcs_flash_controller_0+0xff7fdc04>
  806d38:	0005883a 	mov	r2,zero
  806d3c:	f800283a 	ret
  806d40:	81000017 	ldw	r4,0(r16)
  806d44:	80800417 	ldw	r2,16(r16)
  806d48:	11005a36 	bltu	r2,r4,806eb4 <__sfvwrite_r+0x320>
  806d4c:	85c00517 	ldw	r23,20(r16)
  806d50:	95c05836 	bltu	r18,r23,806eb4 <__sfvwrite_r+0x320>
  806d54:	00a00034 	movhi	r2,32768
  806d58:	10bfffc4 	addi	r2,r2,-1
  806d5c:	9009883a 	mov	r4,r18
  806d60:	1480012e 	bgeu	r2,r18,806d68 <__sfvwrite_r+0x1d4>
  806d64:	1009883a 	mov	r4,r2
  806d68:	b80b883a 	mov	r5,r23
  806d6c:	08011a00 	call	8011a0 <__divsi3>
  806d70:	b80b883a 	mov	r5,r23
  806d74:	1009883a 	mov	r4,r2
  806d78:	080b99c0 	call	80b99c <__mulsi3>
  806d7c:	81400717 	ldw	r5,28(r16)
  806d80:	80c00917 	ldw	r3,36(r16)
  806d84:	100f883a 	mov	r7,r2
  806d88:	e00d883a 	mov	r6,fp
  806d8c:	a809883a 	mov	r4,r21
  806d90:	183ee83a 	callr	r3
  806d94:	00bfd816 	blt	zero,r2,806cf8 <__alt_mem_epcs_flash_controller_0+0xff7fdcf8>
  806d98:	8080030b 	ldhu	r2,12(r16)
  806d9c:	10801014 	ori	r2,r2,64
  806da0:	8080030d 	sth	r2,12(r16)
  806da4:	00bfffc4 	movi	r2,-1
  806da8:	003fa806 	br	806c4c <__alt_mem_epcs_flash_controller_0+0xff7fdc4c>
  806dac:	0027883a 	mov	r19,zero
  806db0:	0011883a 	mov	r8,zero
  806db4:	0039883a 	mov	fp,zero
  806db8:	0025883a 	mov	r18,zero
  806dbc:	90001f26 	beq	r18,zero,806e3c <__sfvwrite_r+0x2a8>
  806dc0:	40005a26 	beq	r8,zero,806f2c <__sfvwrite_r+0x398>
  806dc4:	982d883a 	mov	r22,r19
  806dc8:	94c0012e 	bgeu	r18,r19,806dd0 <__sfvwrite_r+0x23c>
  806dcc:	902d883a 	mov	r22,r18
  806dd0:	81000017 	ldw	r4,0(r16)
  806dd4:	80800417 	ldw	r2,16(r16)
  806dd8:	b02f883a 	mov	r23,r22
  806ddc:	81c00517 	ldw	r7,20(r16)
  806de0:	1100032e 	bgeu	r2,r4,806df0 <__sfvwrite_r+0x25c>
  806de4:	80c00217 	ldw	r3,8(r16)
  806de8:	38c7883a 	add	r3,r7,r3
  806dec:	1d801816 	blt	r3,r22,806e50 <__sfvwrite_r+0x2bc>
  806df0:	b1c03e16 	blt	r22,r7,806eec <__sfvwrite_r+0x358>
  806df4:	80800917 	ldw	r2,36(r16)
  806df8:	81400717 	ldw	r5,28(r16)
  806dfc:	e00d883a 	mov	r6,fp
  806e00:	da000115 	stw	r8,4(sp)
  806e04:	a809883a 	mov	r4,r21
  806e08:	103ee83a 	callr	r2
  806e0c:	102f883a 	mov	r23,r2
  806e10:	da000117 	ldw	r8,4(sp)
  806e14:	00bfe00e 	bge	zero,r2,806d98 <__alt_mem_epcs_flash_controller_0+0xff7fdd98>
  806e18:	9de7c83a 	sub	r19,r19,r23
  806e1c:	98001f26 	beq	r19,zero,806e9c <__sfvwrite_r+0x308>
  806e20:	a0800217 	ldw	r2,8(r20)
  806e24:	e5f9883a 	add	fp,fp,r23
  806e28:	95e5c83a 	sub	r18,r18,r23
  806e2c:	15efc83a 	sub	r23,r2,r23
  806e30:	a5c00215 	stw	r23,8(r20)
  806e34:	b83f8426 	beq	r23,zero,806c48 <__alt_mem_epcs_flash_controller_0+0xff7fdc48>
  806e38:	903fe11e 	bne	r18,zero,806dc0 <__alt_mem_epcs_flash_controller_0+0xff7fddc0>
  806e3c:	8f000017 	ldw	fp,0(r17)
  806e40:	8c800117 	ldw	r18,4(r17)
  806e44:	0011883a 	mov	r8,zero
  806e48:	8c400204 	addi	r17,r17,8
  806e4c:	003fdb06 	br	806dbc <__alt_mem_epcs_flash_controller_0+0xff7fddbc>
  806e50:	180d883a 	mov	r6,r3
  806e54:	e00b883a 	mov	r5,fp
  806e58:	da000115 	stw	r8,4(sp)
  806e5c:	d8c00015 	stw	r3,0(sp)
  806e60:	08075800 	call	807580 <memmove>
  806e64:	d8c00017 	ldw	r3,0(sp)
  806e68:	80800017 	ldw	r2,0(r16)
  806e6c:	800b883a 	mov	r5,r16
  806e70:	a809883a 	mov	r4,r21
  806e74:	10c5883a 	add	r2,r2,r3
  806e78:	80800015 	stw	r2,0(r16)
  806e7c:	d8c00015 	stw	r3,0(sp)
  806e80:	08016740 	call	801674 <_fflush_r>
  806e84:	d8c00017 	ldw	r3,0(sp)
  806e88:	da000117 	ldw	r8,4(sp)
  806e8c:	103fc21e 	bne	r2,zero,806d98 <__alt_mem_epcs_flash_controller_0+0xff7fdd98>
  806e90:	182f883a 	mov	r23,r3
  806e94:	9de7c83a 	sub	r19,r19,r23
  806e98:	983fe11e 	bne	r19,zero,806e20 <__alt_mem_epcs_flash_controller_0+0xff7fde20>
  806e9c:	800b883a 	mov	r5,r16
  806ea0:	a809883a 	mov	r4,r21
  806ea4:	08016740 	call	801674 <_fflush_r>
  806ea8:	103fbb1e 	bne	r2,zero,806d98 <__alt_mem_epcs_flash_controller_0+0xff7fdd98>
  806eac:	0011883a 	mov	r8,zero
  806eb0:	003fdb06 	br	806e20 <__alt_mem_epcs_flash_controller_0+0xff7fde20>
  806eb4:	94c0012e 	bgeu	r18,r19,806ebc <__sfvwrite_r+0x328>
  806eb8:	9027883a 	mov	r19,r18
  806ebc:	980d883a 	mov	r6,r19
  806ec0:	e00b883a 	mov	r5,fp
  806ec4:	08075800 	call	807580 <memmove>
  806ec8:	80800217 	ldw	r2,8(r16)
  806ecc:	80c00017 	ldw	r3,0(r16)
  806ed0:	14c5c83a 	sub	r2,r2,r19
  806ed4:	1cc7883a 	add	r3,r3,r19
  806ed8:	80800215 	stw	r2,8(r16)
  806edc:	80c00015 	stw	r3,0(r16)
  806ee0:	10004326 	beq	r2,zero,806ff0 <__sfvwrite_r+0x45c>
  806ee4:	9805883a 	mov	r2,r19
  806ee8:	003f8306 	br	806cf8 <__alt_mem_epcs_flash_controller_0+0xff7fdcf8>
  806eec:	b00d883a 	mov	r6,r22
  806ef0:	e00b883a 	mov	r5,fp
  806ef4:	da000115 	stw	r8,4(sp)
  806ef8:	08075800 	call	807580 <memmove>
  806efc:	80800217 	ldw	r2,8(r16)
  806f00:	80c00017 	ldw	r3,0(r16)
  806f04:	da000117 	ldw	r8,4(sp)
  806f08:	1585c83a 	sub	r2,r2,r22
  806f0c:	1dad883a 	add	r22,r3,r22
  806f10:	80800215 	stw	r2,8(r16)
  806f14:	85800015 	stw	r22,0(r16)
  806f18:	003fbf06 	br	806e18 <__alt_mem_epcs_flash_controller_0+0xff7fde18>
  806f1c:	81000017 	ldw	r4,0(r16)
  806f20:	9027883a 	mov	r19,r18
  806f24:	902f883a 	mov	r23,r18
  806f28:	003f6906 	br	806cd0 <__alt_mem_epcs_flash_controller_0+0xff7fdcd0>
  806f2c:	900d883a 	mov	r6,r18
  806f30:	01400284 	movi	r5,10
  806f34:	e009883a 	mov	r4,fp
  806f38:	08073540 	call	807354 <memchr>
  806f3c:	10003e26 	beq	r2,zero,807038 <__sfvwrite_r+0x4a4>
  806f40:	10800044 	addi	r2,r2,1
  806f44:	1727c83a 	sub	r19,r2,fp
  806f48:	02000044 	movi	r8,1
  806f4c:	003f9d06 	br	806dc4 <__alt_mem_epcs_flash_controller_0+0xff7fddc4>
  806f50:	80800517 	ldw	r2,20(r16)
  806f54:	81400417 	ldw	r5,16(r16)
  806f58:	81c00017 	ldw	r7,0(r16)
  806f5c:	10a7883a 	add	r19,r2,r2
  806f60:	9885883a 	add	r2,r19,r2
  806f64:	1026d7fa 	srli	r19,r2,31
  806f68:	396dc83a 	sub	r22,r7,r5
  806f6c:	b1000044 	addi	r4,r22,1
  806f70:	9885883a 	add	r2,r19,r2
  806f74:	1027d07a 	srai	r19,r2,1
  806f78:	2485883a 	add	r2,r4,r18
  806f7c:	980d883a 	mov	r6,r19
  806f80:	9880022e 	bgeu	r19,r2,806f8c <__sfvwrite_r+0x3f8>
  806f84:	1027883a 	mov	r19,r2
  806f88:	100d883a 	mov	r6,r2
  806f8c:	18c1000c 	andi	r3,r3,1024
  806f90:	18001c26 	beq	r3,zero,807004 <__sfvwrite_r+0x470>
  806f94:	300b883a 	mov	r5,r6
  806f98:	a809883a 	mov	r4,r21
  806f9c:	080206c0 	call	80206c <_malloc_r>
  806fa0:	102f883a 	mov	r23,r2
  806fa4:	10002926 	beq	r2,zero,80704c <__sfvwrite_r+0x4b8>
  806fa8:	81400417 	ldw	r5,16(r16)
  806fac:	b00d883a 	mov	r6,r22
  806fb0:	1009883a 	mov	r4,r2
  806fb4:	08074380 	call	807438 <memcpy>
  806fb8:	8080030b 	ldhu	r2,12(r16)
  806fbc:	00fedfc4 	movi	r3,-1153
  806fc0:	10c4703a 	and	r2,r2,r3
  806fc4:	10802014 	ori	r2,r2,128
  806fc8:	8080030d 	sth	r2,12(r16)
  806fcc:	bd89883a 	add	r4,r23,r22
  806fd0:	9d8fc83a 	sub	r7,r19,r22
  806fd4:	85c00415 	stw	r23,16(r16)
  806fd8:	84c00515 	stw	r19,20(r16)
  806fdc:	81000015 	stw	r4,0(r16)
  806fe0:	9027883a 	mov	r19,r18
  806fe4:	81c00215 	stw	r7,8(r16)
  806fe8:	902f883a 	mov	r23,r18
  806fec:	003f3806 	br	806cd0 <__alt_mem_epcs_flash_controller_0+0xff7fdcd0>
  806ff0:	800b883a 	mov	r5,r16
  806ff4:	a809883a 	mov	r4,r21
  806ff8:	08016740 	call	801674 <_fflush_r>
  806ffc:	103fb926 	beq	r2,zero,806ee4 <__alt_mem_epcs_flash_controller_0+0xff7fdee4>
  807000:	003f6506 	br	806d98 <__alt_mem_epcs_flash_controller_0+0xff7fdd98>
  807004:	a809883a 	mov	r4,r21
  807008:	080895c0 	call	80895c <_realloc_r>
  80700c:	102f883a 	mov	r23,r2
  807010:	103fee1e 	bne	r2,zero,806fcc <__alt_mem_epcs_flash_controller_0+0xff7fdfcc>
  807014:	81400417 	ldw	r5,16(r16)
  807018:	a809883a 	mov	r4,r21
  80701c:	0801bd40 	call	801bd4 <_free_r>
  807020:	8080030b 	ldhu	r2,12(r16)
  807024:	00ffdfc4 	movi	r3,-129
  807028:	1884703a 	and	r2,r3,r2
  80702c:	00c00304 	movi	r3,12
  807030:	a8c00015 	stw	r3,0(r21)
  807034:	003f5906 	br	806d9c <__alt_mem_epcs_flash_controller_0+0xff7fdd9c>
  807038:	94c00044 	addi	r19,r18,1
  80703c:	02000044 	movi	r8,1
  807040:	003f6006 	br	806dc4 <__alt_mem_epcs_flash_controller_0+0xff7fddc4>
  807044:	00bfffc4 	movi	r2,-1
  807048:	003f0006 	br	806c4c <__alt_mem_epcs_flash_controller_0+0xff7fdc4c>
  80704c:	00800304 	movi	r2,12
  807050:	a8800015 	stw	r2,0(r21)
  807054:	8080030b 	ldhu	r2,12(r16)
  807058:	003f5006 	br	806d9c <__alt_mem_epcs_flash_controller_0+0xff7fdd9c>

0080705c <_setlocale_r>:
  80705c:	30001b26 	beq	r6,zero,8070cc <_setlocale_r+0x70>
  807060:	014020b4 	movhi	r5,130
  807064:	defffe04 	addi	sp,sp,-8
  807068:	296fad04 	addi	r5,r5,-16716
  80706c:	3009883a 	mov	r4,r6
  807070:	dc000015 	stw	r16,0(sp)
  807074:	dfc00115 	stw	ra,4(sp)
  807078:	3021883a 	mov	r16,r6
  80707c:	0808f340 	call	808f34 <strcmp>
  807080:	1000061e 	bne	r2,zero,80709c <_setlocale_r+0x40>
  807084:	008020b4 	movhi	r2,130
  807088:	10af8e04 	addi	r2,r2,-16840
  80708c:	dfc00117 	ldw	ra,4(sp)
  807090:	dc000017 	ldw	r16,0(sp)
  807094:	dec00204 	addi	sp,sp,8
  807098:	f800283a 	ret
  80709c:	014020b4 	movhi	r5,130
  8070a0:	296f8e04 	addi	r5,r5,-16840
  8070a4:	8009883a 	mov	r4,r16
  8070a8:	0808f340 	call	808f34 <strcmp>
  8070ac:	103ff526 	beq	r2,zero,807084 <__alt_mem_epcs_flash_controller_0+0xff7fe084>
  8070b0:	014020b4 	movhi	r5,130
  8070b4:	296f9804 	addi	r5,r5,-16800
  8070b8:	8009883a 	mov	r4,r16
  8070bc:	0808f340 	call	808f34 <strcmp>
  8070c0:	103ff026 	beq	r2,zero,807084 <__alt_mem_epcs_flash_controller_0+0xff7fe084>
  8070c4:	0005883a 	mov	r2,zero
  8070c8:	003ff006 	br	80708c <__alt_mem_epcs_flash_controller_0+0xff7fe08c>
  8070cc:	008020b4 	movhi	r2,130
  8070d0:	10af8e04 	addi	r2,r2,-16840
  8070d4:	f800283a 	ret

008070d8 <__locale_charset>:
  8070d8:	008020b4 	movhi	r2,130
  8070dc:	10b2bd04 	addi	r2,r2,-13580
  8070e0:	f800283a 	ret

008070e4 <__locale_mb_cur_max>:
  8070e4:	008020b4 	movhi	r2,130
  8070e8:	10b83104 	addi	r2,r2,-7996
  8070ec:	10800017 	ldw	r2,0(r2)
  8070f0:	f800283a 	ret

008070f4 <__locale_msgcharset>:
  8070f4:	008020b4 	movhi	r2,130
  8070f8:	10b2b504 	addi	r2,r2,-13612
  8070fc:	f800283a 	ret

00807100 <__locale_cjk_lang>:
  807100:	0005883a 	mov	r2,zero
  807104:	f800283a 	ret

00807108 <_localeconv_r>:
  807108:	008020b4 	movhi	r2,130
  80710c:	10b2c504 	addi	r2,r2,-13548
  807110:	f800283a 	ret

00807114 <setlocale>:
  807114:	008020b4 	movhi	r2,130
  807118:	10b82e04 	addi	r2,r2,-8008
  80711c:	280d883a 	mov	r6,r5
  807120:	200b883a 	mov	r5,r4
  807124:	11000017 	ldw	r4,0(r2)
  807128:	080705c1 	jmpi	80705c <_setlocale_r>

0080712c <localeconv>:
  80712c:	008020b4 	movhi	r2,130
  807130:	10b2c504 	addi	r2,r2,-13548
  807134:	f800283a 	ret

00807138 <_lseek_r>:
  807138:	defffd04 	addi	sp,sp,-12
  80713c:	2805883a 	mov	r2,r5
  807140:	dc000015 	stw	r16,0(sp)
  807144:	040020b4 	movhi	r16,130
  807148:	dc400115 	stw	r17,4(sp)
  80714c:	300b883a 	mov	r5,r6
  807150:	84387b04 	addi	r16,r16,-7700
  807154:	2023883a 	mov	r17,r4
  807158:	380d883a 	mov	r6,r7
  80715c:	1009883a 	mov	r4,r2
  807160:	dfc00215 	stw	ra,8(sp)
  807164:	80000015 	stw	zero,0(r16)
  807168:	080e8600 	call	80e860 <lseek>
  80716c:	00ffffc4 	movi	r3,-1
  807170:	10c00526 	beq	r2,r3,807188 <_lseek_r+0x50>
  807174:	dfc00217 	ldw	ra,8(sp)
  807178:	dc400117 	ldw	r17,4(sp)
  80717c:	dc000017 	ldw	r16,0(sp)
  807180:	dec00304 	addi	sp,sp,12
  807184:	f800283a 	ret
  807188:	80c00017 	ldw	r3,0(r16)
  80718c:	183ff926 	beq	r3,zero,807174 <__alt_mem_epcs_flash_controller_0+0xff7fe174>
  807190:	88c00015 	stw	r3,0(r17)
  807194:	003ff706 	br	807174 <__alt_mem_epcs_flash_controller_0+0xff7fe174>

00807198 <__smakebuf_r>:
  807198:	2880030b 	ldhu	r2,12(r5)
  80719c:	10c0008c 	andi	r3,r2,2
  8071a0:	1800411e 	bne	r3,zero,8072a8 <__smakebuf_r+0x110>
  8071a4:	deffec04 	addi	sp,sp,-80
  8071a8:	dc000f15 	stw	r16,60(sp)
  8071ac:	2821883a 	mov	r16,r5
  8071b0:	2940038f 	ldh	r5,14(r5)
  8071b4:	dc401015 	stw	r17,64(sp)
  8071b8:	dfc01315 	stw	ra,76(sp)
  8071bc:	dcc01215 	stw	r19,72(sp)
  8071c0:	dc801115 	stw	r18,68(sp)
  8071c4:	2023883a 	mov	r17,r4
  8071c8:	28001c16 	blt	r5,zero,80723c <__smakebuf_r+0xa4>
  8071cc:	d80d883a 	mov	r6,sp
  8071d0:	080ab440 	call	80ab44 <_fstat_r>
  8071d4:	10001816 	blt	r2,zero,807238 <__smakebuf_r+0xa0>
  8071d8:	d8800117 	ldw	r2,4(sp)
  8071dc:	00e00014 	movui	r3,32768
  8071e0:	10bc000c 	andi	r2,r2,61440
  8071e4:	14c80020 	cmpeqi	r19,r2,8192
  8071e8:	10c03726 	beq	r2,r3,8072c8 <__smakebuf_r+0x130>
  8071ec:	80c0030b 	ldhu	r3,12(r16)
  8071f0:	18c20014 	ori	r3,r3,2048
  8071f4:	80c0030d 	sth	r3,12(r16)
  8071f8:	00c80004 	movi	r3,8192
  8071fc:	10c0521e 	bne	r2,r3,807348 <__smakebuf_r+0x1b0>
  807200:	8140038f 	ldh	r5,14(r16)
  807204:	8809883a 	mov	r4,r17
  807208:	080aba00 	call	80aba0 <_isatty_r>
  80720c:	10004c26 	beq	r2,zero,807340 <__smakebuf_r+0x1a8>
  807210:	8080030b 	ldhu	r2,12(r16)
  807214:	80c010c4 	addi	r3,r16,67
  807218:	80c00015 	stw	r3,0(r16)
  80721c:	10800054 	ori	r2,r2,1
  807220:	8080030d 	sth	r2,12(r16)
  807224:	00800044 	movi	r2,1
  807228:	80c00415 	stw	r3,16(r16)
  80722c:	80800515 	stw	r2,20(r16)
  807230:	04810004 	movi	r18,1024
  807234:	00000706 	br	807254 <__smakebuf_r+0xbc>
  807238:	8080030b 	ldhu	r2,12(r16)
  80723c:	10c0200c 	andi	r3,r2,128
  807240:	18001f1e 	bne	r3,zero,8072c0 <__smakebuf_r+0x128>
  807244:	04810004 	movi	r18,1024
  807248:	10820014 	ori	r2,r2,2048
  80724c:	8080030d 	sth	r2,12(r16)
  807250:	0027883a 	mov	r19,zero
  807254:	900b883a 	mov	r5,r18
  807258:	8809883a 	mov	r4,r17
  80725c:	080206c0 	call	80206c <_malloc_r>
  807260:	10002c26 	beq	r2,zero,807314 <__smakebuf_r+0x17c>
  807264:	80c0030b 	ldhu	r3,12(r16)
  807268:	01002034 	movhi	r4,128
  80726c:	2105c204 	addi	r4,r4,5896
  807270:	89000f15 	stw	r4,60(r17)
  807274:	18c02014 	ori	r3,r3,128
  807278:	80c0030d 	sth	r3,12(r16)
  80727c:	80800015 	stw	r2,0(r16)
  807280:	80800415 	stw	r2,16(r16)
  807284:	84800515 	stw	r18,20(r16)
  807288:	98001a1e 	bne	r19,zero,8072f4 <__smakebuf_r+0x15c>
  80728c:	dfc01317 	ldw	ra,76(sp)
  807290:	dcc01217 	ldw	r19,72(sp)
  807294:	dc801117 	ldw	r18,68(sp)
  807298:	dc401017 	ldw	r17,64(sp)
  80729c:	dc000f17 	ldw	r16,60(sp)
  8072a0:	dec01404 	addi	sp,sp,80
  8072a4:	f800283a 	ret
  8072a8:	288010c4 	addi	r2,r5,67
  8072ac:	28800015 	stw	r2,0(r5)
  8072b0:	28800415 	stw	r2,16(r5)
  8072b4:	00800044 	movi	r2,1
  8072b8:	28800515 	stw	r2,20(r5)
  8072bc:	f800283a 	ret
  8072c0:	04801004 	movi	r18,64
  8072c4:	003fe006 	br	807248 <__alt_mem_epcs_flash_controller_0+0xff7fe248>
  8072c8:	81000a17 	ldw	r4,40(r16)
  8072cc:	00c02034 	movhi	r3,128
  8072d0:	18cb0b04 	addi	r3,r3,11308
  8072d4:	20ffc51e 	bne	r4,r3,8071ec <__alt_mem_epcs_flash_controller_0+0xff7fe1ec>
  8072d8:	8080030b 	ldhu	r2,12(r16)
  8072dc:	04810004 	movi	r18,1024
  8072e0:	84801315 	stw	r18,76(r16)
  8072e4:	1484b03a 	or	r2,r2,r18
  8072e8:	8080030d 	sth	r2,12(r16)
  8072ec:	0027883a 	mov	r19,zero
  8072f0:	003fd806 	br	807254 <__alt_mem_epcs_flash_controller_0+0xff7fe254>
  8072f4:	8140038f 	ldh	r5,14(r16)
  8072f8:	8809883a 	mov	r4,r17
  8072fc:	080aba00 	call	80aba0 <_isatty_r>
  807300:	103fe226 	beq	r2,zero,80728c <__alt_mem_epcs_flash_controller_0+0xff7fe28c>
  807304:	8080030b 	ldhu	r2,12(r16)
  807308:	10800054 	ori	r2,r2,1
  80730c:	8080030d 	sth	r2,12(r16)
  807310:	003fde06 	br	80728c <__alt_mem_epcs_flash_controller_0+0xff7fe28c>
  807314:	8080030b 	ldhu	r2,12(r16)
  807318:	10c0800c 	andi	r3,r2,512
  80731c:	183fdb1e 	bne	r3,zero,80728c <__alt_mem_epcs_flash_controller_0+0xff7fe28c>
  807320:	10800094 	ori	r2,r2,2
  807324:	80c010c4 	addi	r3,r16,67
  807328:	8080030d 	sth	r2,12(r16)
  80732c:	00800044 	movi	r2,1
  807330:	80c00015 	stw	r3,0(r16)
  807334:	80c00415 	stw	r3,16(r16)
  807338:	80800515 	stw	r2,20(r16)
  80733c:	003fd306 	br	80728c <__alt_mem_epcs_flash_controller_0+0xff7fe28c>
  807340:	04810004 	movi	r18,1024
  807344:	003fc306 	br	807254 <__alt_mem_epcs_flash_controller_0+0xff7fe254>
  807348:	0027883a 	mov	r19,zero
  80734c:	04810004 	movi	r18,1024
  807350:	003fc006 	br	807254 <__alt_mem_epcs_flash_controller_0+0xff7fe254>

00807354 <memchr>:
  807354:	208000cc 	andi	r2,r4,3
  807358:	280f883a 	mov	r7,r5
  80735c:	10003426 	beq	r2,zero,807430 <memchr+0xdc>
  807360:	30bfffc4 	addi	r2,r6,-1
  807364:	30001a26 	beq	r6,zero,8073d0 <memchr+0x7c>
  807368:	20c00003 	ldbu	r3,0(r4)
  80736c:	29803fcc 	andi	r6,r5,255
  807370:	30c0051e 	bne	r6,r3,807388 <memchr+0x34>
  807374:	00001806 	br	8073d8 <memchr+0x84>
  807378:	10001526 	beq	r2,zero,8073d0 <memchr+0x7c>
  80737c:	20c00003 	ldbu	r3,0(r4)
  807380:	10bfffc4 	addi	r2,r2,-1
  807384:	30c01426 	beq	r6,r3,8073d8 <memchr+0x84>
  807388:	21000044 	addi	r4,r4,1
  80738c:	20c000cc 	andi	r3,r4,3
  807390:	183ff91e 	bne	r3,zero,807378 <__alt_mem_epcs_flash_controller_0+0xff7fe378>
  807394:	020000c4 	movi	r8,3
  807398:	40801136 	bltu	r8,r2,8073e0 <memchr+0x8c>
  80739c:	10000c26 	beq	r2,zero,8073d0 <memchr+0x7c>
  8073a0:	20c00003 	ldbu	r3,0(r4)
  8073a4:	29403fcc 	andi	r5,r5,255
  8073a8:	28c00b26 	beq	r5,r3,8073d8 <memchr+0x84>
  8073ac:	20c00044 	addi	r3,r4,1
  8073b0:	39803fcc 	andi	r6,r7,255
  8073b4:	2089883a 	add	r4,r4,r2
  8073b8:	00000306 	br	8073c8 <memchr+0x74>
  8073bc:	18c00044 	addi	r3,r3,1
  8073c0:	197fffc3 	ldbu	r5,-1(r3)
  8073c4:	31400526 	beq	r6,r5,8073dc <memchr+0x88>
  8073c8:	1805883a 	mov	r2,r3
  8073cc:	20fffb1e 	bne	r4,r3,8073bc <__alt_mem_epcs_flash_controller_0+0xff7fe3bc>
  8073d0:	0005883a 	mov	r2,zero
  8073d4:	f800283a 	ret
  8073d8:	2005883a 	mov	r2,r4
  8073dc:	f800283a 	ret
  8073e0:	28c03fcc 	andi	r3,r5,255
  8073e4:	1812923a 	slli	r9,r3,8
  8073e8:	02ffbff4 	movhi	r11,65279
  8073ec:	02a02074 	movhi	r10,32897
  8073f0:	48d2b03a 	or	r9,r9,r3
  8073f4:	4806943a 	slli	r3,r9,16
  8073f8:	5affbfc4 	addi	r11,r11,-257
  8073fc:	52a02004 	addi	r10,r10,-32640
  807400:	48d2b03a 	or	r9,r9,r3
  807404:	20c00017 	ldw	r3,0(r4)
  807408:	48c6f03a 	xor	r3,r9,r3
  80740c:	1acd883a 	add	r6,r3,r11
  807410:	00c6303a 	nor	r3,zero,r3
  807414:	30c6703a 	and	r3,r6,r3
  807418:	1a86703a 	and	r3,r3,r10
  80741c:	183fe01e 	bne	r3,zero,8073a0 <__alt_mem_epcs_flash_controller_0+0xff7fe3a0>
  807420:	10bfff04 	addi	r2,r2,-4
  807424:	21000104 	addi	r4,r4,4
  807428:	40bff636 	bltu	r8,r2,807404 <__alt_mem_epcs_flash_controller_0+0xff7fe404>
  80742c:	003fdb06 	br	80739c <__alt_mem_epcs_flash_controller_0+0xff7fe39c>
  807430:	3005883a 	mov	r2,r6
  807434:	003fd706 	br	807394 <__alt_mem_epcs_flash_controller_0+0xff7fe394>

00807438 <memcpy>:
  807438:	defffd04 	addi	sp,sp,-12
  80743c:	dfc00215 	stw	ra,8(sp)
  807440:	dc400115 	stw	r17,4(sp)
  807444:	dc000015 	stw	r16,0(sp)
  807448:	00c003c4 	movi	r3,15
  80744c:	2005883a 	mov	r2,r4
  807450:	1980452e 	bgeu	r3,r6,807568 <memcpy+0x130>
  807454:	2906b03a 	or	r3,r5,r4
  807458:	18c000cc 	andi	r3,r3,3
  80745c:	1800441e 	bne	r3,zero,807570 <memcpy+0x138>
  807460:	347ffc04 	addi	r17,r6,-16
  807464:	8822d13a 	srli	r17,r17,4
  807468:	28c00104 	addi	r3,r5,4
  80746c:	23400104 	addi	r13,r4,4
  807470:	8820913a 	slli	r16,r17,4
  807474:	2b000204 	addi	r12,r5,8
  807478:	22c00204 	addi	r11,r4,8
  80747c:	84000504 	addi	r16,r16,20
  807480:	2a800304 	addi	r10,r5,12
  807484:	22400304 	addi	r9,r4,12
  807488:	2c21883a 	add	r16,r5,r16
  80748c:	2811883a 	mov	r8,r5
  807490:	200f883a 	mov	r7,r4
  807494:	41000017 	ldw	r4,0(r8)
  807498:	1fc00017 	ldw	ra,0(r3)
  80749c:	63c00017 	ldw	r15,0(r12)
  8074a0:	39000015 	stw	r4,0(r7)
  8074a4:	53800017 	ldw	r14,0(r10)
  8074a8:	6fc00015 	stw	ra,0(r13)
  8074ac:	5bc00015 	stw	r15,0(r11)
  8074b0:	4b800015 	stw	r14,0(r9)
  8074b4:	18c00404 	addi	r3,r3,16
  8074b8:	39c00404 	addi	r7,r7,16
  8074bc:	42000404 	addi	r8,r8,16
  8074c0:	6b400404 	addi	r13,r13,16
  8074c4:	63000404 	addi	r12,r12,16
  8074c8:	5ac00404 	addi	r11,r11,16
  8074cc:	52800404 	addi	r10,r10,16
  8074d0:	4a400404 	addi	r9,r9,16
  8074d4:	1c3fef1e 	bne	r3,r16,807494 <__alt_mem_epcs_flash_controller_0+0xff7fe494>
  8074d8:	89c00044 	addi	r7,r17,1
  8074dc:	380e913a 	slli	r7,r7,4
  8074e0:	310003cc 	andi	r4,r6,15
  8074e4:	02c000c4 	movi	r11,3
  8074e8:	11c7883a 	add	r3,r2,r7
  8074ec:	29cb883a 	add	r5,r5,r7
  8074f0:	5900212e 	bgeu	r11,r4,807578 <memcpy+0x140>
  8074f4:	1813883a 	mov	r9,r3
  8074f8:	2811883a 	mov	r8,r5
  8074fc:	200f883a 	mov	r7,r4
  807500:	42800017 	ldw	r10,0(r8)
  807504:	4a400104 	addi	r9,r9,4
  807508:	39ffff04 	addi	r7,r7,-4
  80750c:	4abfff15 	stw	r10,-4(r9)
  807510:	42000104 	addi	r8,r8,4
  807514:	59fffa36 	bltu	r11,r7,807500 <__alt_mem_epcs_flash_controller_0+0xff7fe500>
  807518:	213fff04 	addi	r4,r4,-4
  80751c:	2008d0ba 	srli	r4,r4,2
  807520:	318000cc 	andi	r6,r6,3
  807524:	21000044 	addi	r4,r4,1
  807528:	2109883a 	add	r4,r4,r4
  80752c:	2109883a 	add	r4,r4,r4
  807530:	1907883a 	add	r3,r3,r4
  807534:	290b883a 	add	r5,r5,r4
  807538:	30000626 	beq	r6,zero,807554 <memcpy+0x11c>
  80753c:	198d883a 	add	r6,r3,r6
  807540:	29c00003 	ldbu	r7,0(r5)
  807544:	18c00044 	addi	r3,r3,1
  807548:	29400044 	addi	r5,r5,1
  80754c:	19ffffc5 	stb	r7,-1(r3)
  807550:	19bffb1e 	bne	r3,r6,807540 <__alt_mem_epcs_flash_controller_0+0xff7fe540>
  807554:	dfc00217 	ldw	ra,8(sp)
  807558:	dc400117 	ldw	r17,4(sp)
  80755c:	dc000017 	ldw	r16,0(sp)
  807560:	dec00304 	addi	sp,sp,12
  807564:	f800283a 	ret
  807568:	2007883a 	mov	r3,r4
  80756c:	003ff206 	br	807538 <__alt_mem_epcs_flash_controller_0+0xff7fe538>
  807570:	2007883a 	mov	r3,r4
  807574:	003ff106 	br	80753c <__alt_mem_epcs_flash_controller_0+0xff7fe53c>
  807578:	200d883a 	mov	r6,r4
  80757c:	003fee06 	br	807538 <__alt_mem_epcs_flash_controller_0+0xff7fe538>

00807580 <memmove>:
  807580:	2005883a 	mov	r2,r4
  807584:	29000b2e 	bgeu	r5,r4,8075b4 <memmove+0x34>
  807588:	298f883a 	add	r7,r5,r6
  80758c:	21c0092e 	bgeu	r4,r7,8075b4 <memmove+0x34>
  807590:	2187883a 	add	r3,r4,r6
  807594:	198bc83a 	sub	r5,r3,r6
  807598:	30004826 	beq	r6,zero,8076bc <memmove+0x13c>
  80759c:	39ffffc4 	addi	r7,r7,-1
  8075a0:	39000003 	ldbu	r4,0(r7)
  8075a4:	18ffffc4 	addi	r3,r3,-1
  8075a8:	19000005 	stb	r4,0(r3)
  8075ac:	28fffb1e 	bne	r5,r3,80759c <__alt_mem_epcs_flash_controller_0+0xff7fe59c>
  8075b0:	f800283a 	ret
  8075b4:	00c003c4 	movi	r3,15
  8075b8:	1980412e 	bgeu	r3,r6,8076c0 <memmove+0x140>
  8075bc:	2886b03a 	or	r3,r5,r2
  8075c0:	18c000cc 	andi	r3,r3,3
  8075c4:	1800401e 	bne	r3,zero,8076c8 <memmove+0x148>
  8075c8:	33fffc04 	addi	r15,r6,-16
  8075cc:	781ed13a 	srli	r15,r15,4
  8075d0:	28c00104 	addi	r3,r5,4
  8075d4:	13400104 	addi	r13,r2,4
  8075d8:	781c913a 	slli	r14,r15,4
  8075dc:	2b000204 	addi	r12,r5,8
  8075e0:	12c00204 	addi	r11,r2,8
  8075e4:	73800504 	addi	r14,r14,20
  8075e8:	2a800304 	addi	r10,r5,12
  8075ec:	12400304 	addi	r9,r2,12
  8075f0:	2b9d883a 	add	r14,r5,r14
  8075f4:	2811883a 	mov	r8,r5
  8075f8:	100f883a 	mov	r7,r2
  8075fc:	41000017 	ldw	r4,0(r8)
  807600:	39c00404 	addi	r7,r7,16
  807604:	18c00404 	addi	r3,r3,16
  807608:	393ffc15 	stw	r4,-16(r7)
  80760c:	193ffc17 	ldw	r4,-16(r3)
  807610:	6b400404 	addi	r13,r13,16
  807614:	5ac00404 	addi	r11,r11,16
  807618:	693ffc15 	stw	r4,-16(r13)
  80761c:	61000017 	ldw	r4,0(r12)
  807620:	4a400404 	addi	r9,r9,16
  807624:	42000404 	addi	r8,r8,16
  807628:	593ffc15 	stw	r4,-16(r11)
  80762c:	51000017 	ldw	r4,0(r10)
  807630:	63000404 	addi	r12,r12,16
  807634:	52800404 	addi	r10,r10,16
  807638:	493ffc15 	stw	r4,-16(r9)
  80763c:	1bbfef1e 	bne	r3,r14,8075fc <__alt_mem_epcs_flash_controller_0+0xff7fe5fc>
  807640:	79000044 	addi	r4,r15,1
  807644:	2008913a 	slli	r4,r4,4
  807648:	328003cc 	andi	r10,r6,15
  80764c:	02c000c4 	movi	r11,3
  807650:	1107883a 	add	r3,r2,r4
  807654:	290b883a 	add	r5,r5,r4
  807658:	5a801e2e 	bgeu	r11,r10,8076d4 <memmove+0x154>
  80765c:	1813883a 	mov	r9,r3
  807660:	2811883a 	mov	r8,r5
  807664:	500f883a 	mov	r7,r10
  807668:	41000017 	ldw	r4,0(r8)
  80766c:	4a400104 	addi	r9,r9,4
  807670:	39ffff04 	addi	r7,r7,-4
  807674:	493fff15 	stw	r4,-4(r9)
  807678:	42000104 	addi	r8,r8,4
  80767c:	59fffa36 	bltu	r11,r7,807668 <__alt_mem_epcs_flash_controller_0+0xff7fe668>
  807680:	513fff04 	addi	r4,r10,-4
  807684:	2008d0ba 	srli	r4,r4,2
  807688:	318000cc 	andi	r6,r6,3
  80768c:	21000044 	addi	r4,r4,1
  807690:	2109883a 	add	r4,r4,r4
  807694:	2109883a 	add	r4,r4,r4
  807698:	1907883a 	add	r3,r3,r4
  80769c:	290b883a 	add	r5,r5,r4
  8076a0:	30000b26 	beq	r6,zero,8076d0 <memmove+0x150>
  8076a4:	198d883a 	add	r6,r3,r6
  8076a8:	29c00003 	ldbu	r7,0(r5)
  8076ac:	18c00044 	addi	r3,r3,1
  8076b0:	29400044 	addi	r5,r5,1
  8076b4:	19ffffc5 	stb	r7,-1(r3)
  8076b8:	19bffb1e 	bne	r3,r6,8076a8 <__alt_mem_epcs_flash_controller_0+0xff7fe6a8>
  8076bc:	f800283a 	ret
  8076c0:	1007883a 	mov	r3,r2
  8076c4:	003ff606 	br	8076a0 <__alt_mem_epcs_flash_controller_0+0xff7fe6a0>
  8076c8:	1007883a 	mov	r3,r2
  8076cc:	003ff506 	br	8076a4 <__alt_mem_epcs_flash_controller_0+0xff7fe6a4>
  8076d0:	f800283a 	ret
  8076d4:	500d883a 	mov	r6,r10
  8076d8:	003ff106 	br	8076a0 <__alt_mem_epcs_flash_controller_0+0xff7fe6a0>

008076dc <_Balloc>:
  8076dc:	20801317 	ldw	r2,76(r4)
  8076e0:	defffc04 	addi	sp,sp,-16
  8076e4:	dc400115 	stw	r17,4(sp)
  8076e8:	dc000015 	stw	r16,0(sp)
  8076ec:	dfc00315 	stw	ra,12(sp)
  8076f0:	dc800215 	stw	r18,8(sp)
  8076f4:	2023883a 	mov	r17,r4
  8076f8:	2821883a 	mov	r16,r5
  8076fc:	10000f26 	beq	r2,zero,80773c <_Balloc+0x60>
  807700:	8407883a 	add	r3,r16,r16
  807704:	18c7883a 	add	r3,r3,r3
  807708:	10c7883a 	add	r3,r2,r3
  80770c:	18800017 	ldw	r2,0(r3)
  807710:	10001126 	beq	r2,zero,807758 <_Balloc+0x7c>
  807714:	11000017 	ldw	r4,0(r2)
  807718:	19000015 	stw	r4,0(r3)
  80771c:	10000415 	stw	zero,16(r2)
  807720:	10000315 	stw	zero,12(r2)
  807724:	dfc00317 	ldw	ra,12(sp)
  807728:	dc800217 	ldw	r18,8(sp)
  80772c:	dc400117 	ldw	r17,4(sp)
  807730:	dc000017 	ldw	r16,0(sp)
  807734:	dec00404 	addi	sp,sp,16
  807738:	f800283a 	ret
  80773c:	01800844 	movi	r6,33
  807740:	01400104 	movi	r5,4
  807744:	080a8600 	call	80a860 <_calloc_r>
  807748:	88801315 	stw	r2,76(r17)
  80774c:	103fec1e 	bne	r2,zero,807700 <__alt_mem_epcs_flash_controller_0+0xff7fe700>
  807750:	0005883a 	mov	r2,zero
  807754:	003ff306 	br	807724 <__alt_mem_epcs_flash_controller_0+0xff7fe724>
  807758:	01400044 	movi	r5,1
  80775c:	2c24983a 	sll	r18,r5,r16
  807760:	8809883a 	mov	r4,r17
  807764:	91800144 	addi	r6,r18,5
  807768:	318d883a 	add	r6,r6,r6
  80776c:	318d883a 	add	r6,r6,r6
  807770:	080a8600 	call	80a860 <_calloc_r>
  807774:	103ff626 	beq	r2,zero,807750 <__alt_mem_epcs_flash_controller_0+0xff7fe750>
  807778:	14000115 	stw	r16,4(r2)
  80777c:	14800215 	stw	r18,8(r2)
  807780:	003fe606 	br	80771c <__alt_mem_epcs_flash_controller_0+0xff7fe71c>

00807784 <_Bfree>:
  807784:	28000826 	beq	r5,zero,8077a8 <_Bfree+0x24>
  807788:	28c00117 	ldw	r3,4(r5)
  80778c:	20801317 	ldw	r2,76(r4)
  807790:	18c7883a 	add	r3,r3,r3
  807794:	18c7883a 	add	r3,r3,r3
  807798:	10c5883a 	add	r2,r2,r3
  80779c:	10c00017 	ldw	r3,0(r2)
  8077a0:	28c00015 	stw	r3,0(r5)
  8077a4:	11400015 	stw	r5,0(r2)
  8077a8:	f800283a 	ret

008077ac <__multadd>:
  8077ac:	defff704 	addi	sp,sp,-36
  8077b0:	dc800215 	stw	r18,8(sp)
  8077b4:	2c800417 	ldw	r18,16(r5)
  8077b8:	dd800615 	stw	r22,24(sp)
  8077bc:	dd400515 	stw	r21,20(sp)
  8077c0:	dd000415 	stw	r20,16(sp)
  8077c4:	dcc00315 	stw	r19,12(sp)
  8077c8:	dc400115 	stw	r17,4(sp)
  8077cc:	dc000015 	stw	r16,0(sp)
  8077d0:	dfc00815 	stw	ra,32(sp)
  8077d4:	ddc00715 	stw	r23,28(sp)
  8077d8:	2827883a 	mov	r19,r5
  8077dc:	2029883a 	mov	r20,r4
  8077e0:	3023883a 	mov	r17,r6
  8077e4:	3821883a 	mov	r16,r7
  8077e8:	2d400504 	addi	r21,r5,20
  8077ec:	002d883a 	mov	r22,zero
  8077f0:	adc00017 	ldw	r23,0(r21)
  8077f4:	880b883a 	mov	r5,r17
  8077f8:	ad400104 	addi	r21,r21,4
  8077fc:	b93fffcc 	andi	r4,r23,65535
  807800:	080b99c0 	call	80b99c <__mulsi3>
  807804:	b808d43a 	srli	r4,r23,16
  807808:	880b883a 	mov	r5,r17
  80780c:	1421883a 	add	r16,r2,r16
  807810:	080b99c0 	call	80b99c <__mulsi3>
  807814:	800ed43a 	srli	r7,r16,16
  807818:	80ffffcc 	andi	r3,r16,65535
  80781c:	b5800044 	addi	r22,r22,1
  807820:	11c5883a 	add	r2,r2,r7
  807824:	100e943a 	slli	r7,r2,16
  807828:	1020d43a 	srli	r16,r2,16
  80782c:	38c7883a 	add	r3,r7,r3
  807830:	a8ffff15 	stw	r3,-4(r21)
  807834:	b4bfee16 	blt	r22,r18,8077f0 <__alt_mem_epcs_flash_controller_0+0xff7fe7f0>
  807838:	80000926 	beq	r16,zero,807860 <__multadd+0xb4>
  80783c:	98800217 	ldw	r2,8(r19)
  807840:	9080130e 	bge	r18,r2,807890 <__multadd+0xe4>
  807844:	90800144 	addi	r2,r18,5
  807848:	1085883a 	add	r2,r2,r2
  80784c:	1085883a 	add	r2,r2,r2
  807850:	9885883a 	add	r2,r19,r2
  807854:	14000015 	stw	r16,0(r2)
  807858:	94800044 	addi	r18,r18,1
  80785c:	9c800415 	stw	r18,16(r19)
  807860:	9805883a 	mov	r2,r19
  807864:	dfc00817 	ldw	ra,32(sp)
  807868:	ddc00717 	ldw	r23,28(sp)
  80786c:	dd800617 	ldw	r22,24(sp)
  807870:	dd400517 	ldw	r21,20(sp)
  807874:	dd000417 	ldw	r20,16(sp)
  807878:	dcc00317 	ldw	r19,12(sp)
  80787c:	dc800217 	ldw	r18,8(sp)
  807880:	dc400117 	ldw	r17,4(sp)
  807884:	dc000017 	ldw	r16,0(sp)
  807888:	dec00904 	addi	sp,sp,36
  80788c:	f800283a 	ret
  807890:	99400117 	ldw	r5,4(r19)
  807894:	a009883a 	mov	r4,r20
  807898:	29400044 	addi	r5,r5,1
  80789c:	08076dc0 	call	8076dc <_Balloc>
  8078a0:	99800417 	ldw	r6,16(r19)
  8078a4:	99400304 	addi	r5,r19,12
  8078a8:	11000304 	addi	r4,r2,12
  8078ac:	31800084 	addi	r6,r6,2
  8078b0:	318d883a 	add	r6,r6,r6
  8078b4:	318d883a 	add	r6,r6,r6
  8078b8:	1023883a 	mov	r17,r2
  8078bc:	08074380 	call	807438 <memcpy>
  8078c0:	98000a26 	beq	r19,zero,8078ec <__multadd+0x140>
  8078c4:	98c00117 	ldw	r3,4(r19)
  8078c8:	a0801317 	ldw	r2,76(r20)
  8078cc:	18c7883a 	add	r3,r3,r3
  8078d0:	18c7883a 	add	r3,r3,r3
  8078d4:	10c5883a 	add	r2,r2,r3
  8078d8:	10c00017 	ldw	r3,0(r2)
  8078dc:	98c00015 	stw	r3,0(r19)
  8078e0:	14c00015 	stw	r19,0(r2)
  8078e4:	8827883a 	mov	r19,r17
  8078e8:	003fd606 	br	807844 <__alt_mem_epcs_flash_controller_0+0xff7fe844>
  8078ec:	8827883a 	mov	r19,r17
  8078f0:	003fd406 	br	807844 <__alt_mem_epcs_flash_controller_0+0xff7fe844>

008078f4 <__s2b>:
  8078f4:	defff904 	addi	sp,sp,-28
  8078f8:	dc400115 	stw	r17,4(sp)
  8078fc:	dc000015 	stw	r16,0(sp)
  807900:	2023883a 	mov	r17,r4
  807904:	2821883a 	mov	r16,r5
  807908:	39000204 	addi	r4,r7,8
  80790c:	01400244 	movi	r5,9
  807910:	dcc00315 	stw	r19,12(sp)
  807914:	dc800215 	stw	r18,8(sp)
  807918:	dfc00615 	stw	ra,24(sp)
  80791c:	dd400515 	stw	r21,20(sp)
  807920:	dd000415 	stw	r20,16(sp)
  807924:	3825883a 	mov	r18,r7
  807928:	3027883a 	mov	r19,r6
  80792c:	08011a00 	call	8011a0 <__divsi3>
  807930:	00c00044 	movi	r3,1
  807934:	000b883a 	mov	r5,zero
  807938:	1880030e 	bge	r3,r2,807948 <__s2b+0x54>
  80793c:	18c7883a 	add	r3,r3,r3
  807940:	29400044 	addi	r5,r5,1
  807944:	18bffd16 	blt	r3,r2,80793c <__alt_mem_epcs_flash_controller_0+0xff7fe93c>
  807948:	8809883a 	mov	r4,r17
  80794c:	08076dc0 	call	8076dc <_Balloc>
  807950:	d8c00717 	ldw	r3,28(sp)
  807954:	10c00515 	stw	r3,20(r2)
  807958:	00c00044 	movi	r3,1
  80795c:	10c00415 	stw	r3,16(r2)
  807960:	00c00244 	movi	r3,9
  807964:	1cc0210e 	bge	r3,r19,8079ec <__s2b+0xf8>
  807968:	80eb883a 	add	r21,r16,r3
  80796c:	a829883a 	mov	r20,r21
  807970:	84e1883a 	add	r16,r16,r19
  807974:	a1c00007 	ldb	r7,0(r20)
  807978:	01800284 	movi	r6,10
  80797c:	a5000044 	addi	r20,r20,1
  807980:	100b883a 	mov	r5,r2
  807984:	39fff404 	addi	r7,r7,-48
  807988:	8809883a 	mov	r4,r17
  80798c:	08077ac0 	call	8077ac <__multadd>
  807990:	a43ff81e 	bne	r20,r16,807974 <__alt_mem_epcs_flash_controller_0+0xff7fe974>
  807994:	ace1883a 	add	r16,r21,r19
  807998:	843ffe04 	addi	r16,r16,-8
  80799c:	9c800a0e 	bge	r19,r18,8079c8 <__s2b+0xd4>
  8079a0:	94e5c83a 	sub	r18,r18,r19
  8079a4:	84a5883a 	add	r18,r16,r18
  8079a8:	81c00007 	ldb	r7,0(r16)
  8079ac:	01800284 	movi	r6,10
  8079b0:	84000044 	addi	r16,r16,1
  8079b4:	100b883a 	mov	r5,r2
  8079b8:	39fff404 	addi	r7,r7,-48
  8079bc:	8809883a 	mov	r4,r17
  8079c0:	08077ac0 	call	8077ac <__multadd>
  8079c4:	84bff81e 	bne	r16,r18,8079a8 <__alt_mem_epcs_flash_controller_0+0xff7fe9a8>
  8079c8:	dfc00617 	ldw	ra,24(sp)
  8079cc:	dd400517 	ldw	r21,20(sp)
  8079d0:	dd000417 	ldw	r20,16(sp)
  8079d4:	dcc00317 	ldw	r19,12(sp)
  8079d8:	dc800217 	ldw	r18,8(sp)
  8079dc:	dc400117 	ldw	r17,4(sp)
  8079e0:	dc000017 	ldw	r16,0(sp)
  8079e4:	dec00704 	addi	sp,sp,28
  8079e8:	f800283a 	ret
  8079ec:	84000284 	addi	r16,r16,10
  8079f0:	1827883a 	mov	r19,r3
  8079f4:	003fe906 	br	80799c <__alt_mem_epcs_flash_controller_0+0xff7fe99c>

008079f8 <__hi0bits>:
  8079f8:	20bfffec 	andhi	r2,r4,65535
  8079fc:	1000141e 	bne	r2,zero,807a50 <__hi0bits+0x58>
  807a00:	2008943a 	slli	r4,r4,16
  807a04:	00800404 	movi	r2,16
  807a08:	20ffc02c 	andhi	r3,r4,65280
  807a0c:	1800021e 	bne	r3,zero,807a18 <__hi0bits+0x20>
  807a10:	2008923a 	slli	r4,r4,8
  807a14:	10800204 	addi	r2,r2,8
  807a18:	20fc002c 	andhi	r3,r4,61440
  807a1c:	1800021e 	bne	r3,zero,807a28 <__hi0bits+0x30>
  807a20:	2008913a 	slli	r4,r4,4
  807a24:	10800104 	addi	r2,r2,4
  807a28:	20f0002c 	andhi	r3,r4,49152
  807a2c:	1800031e 	bne	r3,zero,807a3c <__hi0bits+0x44>
  807a30:	2109883a 	add	r4,r4,r4
  807a34:	10800084 	addi	r2,r2,2
  807a38:	2109883a 	add	r4,r4,r4
  807a3c:	20000316 	blt	r4,zero,807a4c <__hi0bits+0x54>
  807a40:	2110002c 	andhi	r4,r4,16384
  807a44:	2000041e 	bne	r4,zero,807a58 <__hi0bits+0x60>
  807a48:	00800804 	movi	r2,32
  807a4c:	f800283a 	ret
  807a50:	0005883a 	mov	r2,zero
  807a54:	003fec06 	br	807a08 <__alt_mem_epcs_flash_controller_0+0xff7fea08>
  807a58:	10800044 	addi	r2,r2,1
  807a5c:	f800283a 	ret

00807a60 <__lo0bits>:
  807a60:	20c00017 	ldw	r3,0(r4)
  807a64:	188001cc 	andi	r2,r3,7
  807a68:	10000826 	beq	r2,zero,807a8c <__lo0bits+0x2c>
  807a6c:	1880004c 	andi	r2,r3,1
  807a70:	1000211e 	bne	r2,zero,807af8 <__lo0bits+0x98>
  807a74:	1880008c 	andi	r2,r3,2
  807a78:	1000211e 	bne	r2,zero,807b00 <__lo0bits+0xa0>
  807a7c:	1806d0ba 	srli	r3,r3,2
  807a80:	00800084 	movi	r2,2
  807a84:	20c00015 	stw	r3,0(r4)
  807a88:	f800283a 	ret
  807a8c:	18bfffcc 	andi	r2,r3,65535
  807a90:	10001326 	beq	r2,zero,807ae0 <__lo0bits+0x80>
  807a94:	0005883a 	mov	r2,zero
  807a98:	19403fcc 	andi	r5,r3,255
  807a9c:	2800021e 	bne	r5,zero,807aa8 <__lo0bits+0x48>
  807aa0:	1806d23a 	srli	r3,r3,8
  807aa4:	10800204 	addi	r2,r2,8
  807aa8:	194003cc 	andi	r5,r3,15
  807aac:	2800021e 	bne	r5,zero,807ab8 <__lo0bits+0x58>
  807ab0:	1806d13a 	srli	r3,r3,4
  807ab4:	10800104 	addi	r2,r2,4
  807ab8:	194000cc 	andi	r5,r3,3
  807abc:	2800021e 	bne	r5,zero,807ac8 <__lo0bits+0x68>
  807ac0:	1806d0ba 	srli	r3,r3,2
  807ac4:	10800084 	addi	r2,r2,2
  807ac8:	1940004c 	andi	r5,r3,1
  807acc:	2800081e 	bne	r5,zero,807af0 <__lo0bits+0x90>
  807ad0:	1806d07a 	srli	r3,r3,1
  807ad4:	1800051e 	bne	r3,zero,807aec <__lo0bits+0x8c>
  807ad8:	00800804 	movi	r2,32
  807adc:	f800283a 	ret
  807ae0:	1806d43a 	srli	r3,r3,16
  807ae4:	00800404 	movi	r2,16
  807ae8:	003feb06 	br	807a98 <__alt_mem_epcs_flash_controller_0+0xff7fea98>
  807aec:	10800044 	addi	r2,r2,1
  807af0:	20c00015 	stw	r3,0(r4)
  807af4:	f800283a 	ret
  807af8:	0005883a 	mov	r2,zero
  807afc:	f800283a 	ret
  807b00:	1806d07a 	srli	r3,r3,1
  807b04:	00800044 	movi	r2,1
  807b08:	20c00015 	stw	r3,0(r4)
  807b0c:	f800283a 	ret

00807b10 <__i2b>:
  807b10:	defffd04 	addi	sp,sp,-12
  807b14:	dc000015 	stw	r16,0(sp)
  807b18:	04000044 	movi	r16,1
  807b1c:	dc400115 	stw	r17,4(sp)
  807b20:	2823883a 	mov	r17,r5
  807b24:	800b883a 	mov	r5,r16
  807b28:	dfc00215 	stw	ra,8(sp)
  807b2c:	08076dc0 	call	8076dc <_Balloc>
  807b30:	14400515 	stw	r17,20(r2)
  807b34:	14000415 	stw	r16,16(r2)
  807b38:	dfc00217 	ldw	ra,8(sp)
  807b3c:	dc400117 	ldw	r17,4(sp)
  807b40:	dc000017 	ldw	r16,0(sp)
  807b44:	dec00304 	addi	sp,sp,12
  807b48:	f800283a 	ret

00807b4c <__multiply>:
  807b4c:	deffef04 	addi	sp,sp,-68
  807b50:	dc400815 	stw	r17,32(sp)
  807b54:	dc000715 	stw	r16,28(sp)
  807b58:	34400417 	ldw	r17,16(r6)
  807b5c:	2c000417 	ldw	r16,16(r5)
  807b60:	dd800d15 	stw	r22,52(sp)
  807b64:	dc800915 	stw	r18,36(sp)
  807b68:	dfc01015 	stw	ra,64(sp)
  807b6c:	df000f15 	stw	fp,60(sp)
  807b70:	ddc00e15 	stw	r23,56(sp)
  807b74:	dd400c15 	stw	r21,48(sp)
  807b78:	dd000b15 	stw	r20,44(sp)
  807b7c:	dcc00a15 	stw	r19,40(sp)
  807b80:	2825883a 	mov	r18,r5
  807b84:	302d883a 	mov	r22,r6
  807b88:	8440050e 	bge	r16,r17,807ba0 <__multiply+0x54>
  807b8c:	8007883a 	mov	r3,r16
  807b90:	3025883a 	mov	r18,r6
  807b94:	8821883a 	mov	r16,r17
  807b98:	282d883a 	mov	r22,r5
  807b9c:	1823883a 	mov	r17,r3
  807ba0:	90800217 	ldw	r2,8(r18)
  807ba4:	8447883a 	add	r3,r16,r17
  807ba8:	d8c00215 	stw	r3,8(sp)
  807bac:	91400117 	ldw	r5,4(r18)
  807bb0:	10c0010e 	bge	r2,r3,807bb8 <__multiply+0x6c>
  807bb4:	29400044 	addi	r5,r5,1
  807bb8:	08076dc0 	call	8076dc <_Balloc>
  807bbc:	d8c00217 	ldw	r3,8(sp)
  807bc0:	d8800615 	stw	r2,24(sp)
  807bc4:	18eb883a 	add	r21,r3,r3
  807bc8:	ad6b883a 	add	r21,r21,r21
  807bcc:	10c00504 	addi	r3,r2,20
  807bd0:	1d6b883a 	add	r21,r3,r21
  807bd4:	d8c00115 	stw	r3,4(sp)
  807bd8:	dd400315 	stw	r21,12(sp)
  807bdc:	1805883a 	mov	r2,r3
  807be0:	1d40042e 	bgeu	r3,r21,807bf4 <__multiply+0xa8>
  807be4:	d8c00317 	ldw	r3,12(sp)
  807be8:	10000015 	stw	zero,0(r2)
  807bec:	10800104 	addi	r2,r2,4
  807bf0:	10fffc36 	bltu	r2,r3,807be4 <__alt_mem_epcs_flash_controller_0+0xff7febe4>
  807bf4:	8c63883a 	add	r17,r17,r17
  807bf8:	b5800504 	addi	r22,r22,20
  807bfc:	8c63883a 	add	r17,r17,r17
  807c00:	94800504 	addi	r18,r18,20
  807c04:	8421883a 	add	r16,r16,r16
  807c08:	b463883a 	add	r17,r22,r17
  807c0c:	8421883a 	add	r16,r16,r16
  807c10:	dd800015 	stw	r22,0(sp)
  807c14:	dc800415 	stw	r18,16(sp)
  807c18:	dc400515 	stw	r17,20(sp)
  807c1c:	9429883a 	add	r20,r18,r16
  807c20:	b4404f2e 	bgeu	r22,r17,807d60 <__multiply+0x214>
  807c24:	d8c00017 	ldw	r3,0(sp)
  807c28:	1c800017 	ldw	r18,0(r3)
  807c2c:	947fffcc 	andi	r17,r18,65535
  807c30:	88001e26 	beq	r17,zero,807cac <__multiply+0x160>
  807c34:	dd800117 	ldw	r22,4(sp)
  807c38:	dd400417 	ldw	r21,16(sp)
  807c3c:	0027883a 	mov	r19,zero
  807c40:	ac800017 	ldw	r18,0(r21)
  807c44:	b4000017 	ldw	r16,0(r22)
  807c48:	880b883a 	mov	r5,r17
  807c4c:	913fffcc 	andi	r4,r18,65535
  807c50:	080b99c0 	call	80b99c <__mulsi3>
  807c54:	9008d43a 	srli	r4,r18,16
  807c58:	84bfffcc 	andi	r18,r16,65535
  807c5c:	1485883a 	add	r2,r2,r18
  807c60:	14e5883a 	add	r18,r2,r19
  807c64:	8020d43a 	srli	r16,r16,16
  807c68:	9026d43a 	srli	r19,r18,16
  807c6c:	880b883a 	mov	r5,r17
  807c70:	080b99c0 	call	80b99c <__mulsi3>
  807c74:	1405883a 	add	r2,r2,r16
  807c78:	14e1883a 	add	r16,r2,r19
  807c7c:	90ffffcc 	andi	r3,r18,65535
  807c80:	8024943a 	slli	r18,r16,16
  807c84:	ad400104 	addi	r21,r21,4
  807c88:	b005883a 	mov	r2,r22
  807c8c:	90c6b03a 	or	r3,r18,r3
  807c90:	b0c00015 	stw	r3,0(r22)
  807c94:	8026d43a 	srli	r19,r16,16
  807c98:	b5800104 	addi	r22,r22,4
  807c9c:	ad3fe836 	bltu	r21,r20,807c40 <__alt_mem_epcs_flash_controller_0+0xff7fec40>
  807ca0:	d8c00017 	ldw	r3,0(sp)
  807ca4:	14c00115 	stw	r19,4(r2)
  807ca8:	1c800017 	ldw	r18,0(r3)
  807cac:	9024d43a 	srli	r18,r18,16
  807cb0:	90002226 	beq	r18,zero,807d3c <__multiply+0x1f0>
  807cb4:	d8c00117 	ldw	r3,4(sp)
  807cb8:	dd800417 	ldw	r22,16(sp)
  807cbc:	002f883a 	mov	r23,zero
  807cc0:	1f000017 	ldw	fp,0(r3)
  807cc4:	1823883a 	mov	r17,r3
  807cc8:	182b883a 	mov	r21,r3
  807ccc:	e021883a 	mov	r16,fp
  807cd0:	00000106 	br	807cd8 <__multiply+0x18c>
  807cd4:	982b883a 	mov	r21,r19
  807cd8:	b100000b 	ldhu	r4,0(r22)
  807cdc:	8020d43a 	srli	r16,r16,16
  807ce0:	900b883a 	mov	r5,r18
  807ce4:	080b99c0 	call	80b99c <__mulsi3>
  807ce8:	1405883a 	add	r2,r2,r16
  807cec:	15ef883a 	add	r23,r2,r23
  807cf0:	b804943a 	slli	r2,r23,16
  807cf4:	e0ffffcc 	andi	r3,fp,65535
  807cf8:	8c400104 	addi	r17,r17,4
  807cfc:	10c6b03a 	or	r3,r2,r3
  807d00:	88ffff15 	stw	r3,-4(r17)
  807d04:	b5800104 	addi	r22,r22,4
  807d08:	b13fff17 	ldw	r4,-4(r22)
  807d0c:	acc00104 	addi	r19,r21,4
  807d10:	900b883a 	mov	r5,r18
  807d14:	2008d43a 	srli	r4,r4,16
  807d18:	9c000017 	ldw	r16,0(r19)
  807d1c:	080b99c0 	call	80b99c <__mulsi3>
  807d20:	b806d43a 	srli	r3,r23,16
  807d24:	813fffcc 	andi	r4,r16,65535
  807d28:	1105883a 	add	r2,r2,r4
  807d2c:	10f9883a 	add	fp,r2,r3
  807d30:	e02ed43a 	srli	r23,fp,16
  807d34:	b53fe736 	bltu	r22,r20,807cd4 <__alt_mem_epcs_flash_controller_0+0xff7fecd4>
  807d38:	af000115 	stw	fp,4(r21)
  807d3c:	d8c00017 	ldw	r3,0(sp)
  807d40:	d9000517 	ldw	r4,20(sp)
  807d44:	18c00104 	addi	r3,r3,4
  807d48:	d8c00015 	stw	r3,0(sp)
  807d4c:	d8c00117 	ldw	r3,4(sp)
  807d50:	18c00104 	addi	r3,r3,4
  807d54:	d8c00115 	stw	r3,4(sp)
  807d58:	d8c00017 	ldw	r3,0(sp)
  807d5c:	193fb136 	bltu	r3,r4,807c24 <__alt_mem_epcs_flash_controller_0+0xff7fec24>
  807d60:	d8c00217 	ldw	r3,8(sp)
  807d64:	00c00c0e 	bge	zero,r3,807d98 <__multiply+0x24c>
  807d68:	d8c00317 	ldw	r3,12(sp)
  807d6c:	18bfff17 	ldw	r2,-4(r3)
  807d70:	1d7fff04 	addi	r21,r3,-4
  807d74:	10000326 	beq	r2,zero,807d84 <__multiply+0x238>
  807d78:	00000706 	br	807d98 <__multiply+0x24c>
  807d7c:	a8800017 	ldw	r2,0(r21)
  807d80:	1000051e 	bne	r2,zero,807d98 <__multiply+0x24c>
  807d84:	d8c00217 	ldw	r3,8(sp)
  807d88:	ad7fff04 	addi	r21,r21,-4
  807d8c:	18ffffc4 	addi	r3,r3,-1
  807d90:	d8c00215 	stw	r3,8(sp)
  807d94:	183ff91e 	bne	r3,zero,807d7c <__alt_mem_epcs_flash_controller_0+0xff7fed7c>
  807d98:	d8c00617 	ldw	r3,24(sp)
  807d9c:	d9000217 	ldw	r4,8(sp)
  807da0:	1805883a 	mov	r2,r3
  807da4:	19000415 	stw	r4,16(r3)
  807da8:	dfc01017 	ldw	ra,64(sp)
  807dac:	df000f17 	ldw	fp,60(sp)
  807db0:	ddc00e17 	ldw	r23,56(sp)
  807db4:	dd800d17 	ldw	r22,52(sp)
  807db8:	dd400c17 	ldw	r21,48(sp)
  807dbc:	dd000b17 	ldw	r20,44(sp)
  807dc0:	dcc00a17 	ldw	r19,40(sp)
  807dc4:	dc800917 	ldw	r18,36(sp)
  807dc8:	dc400817 	ldw	r17,32(sp)
  807dcc:	dc000717 	ldw	r16,28(sp)
  807dd0:	dec01104 	addi	sp,sp,68
  807dd4:	f800283a 	ret

00807dd8 <__pow5mult>:
  807dd8:	defffa04 	addi	sp,sp,-24
  807ddc:	dcc00315 	stw	r19,12(sp)
  807de0:	dc000015 	stw	r16,0(sp)
  807de4:	dfc00515 	stw	ra,20(sp)
  807de8:	dd000415 	stw	r20,16(sp)
  807dec:	dc800215 	stw	r18,8(sp)
  807df0:	dc400115 	stw	r17,4(sp)
  807df4:	308000cc 	andi	r2,r6,3
  807df8:	3021883a 	mov	r16,r6
  807dfc:	2027883a 	mov	r19,r4
  807e00:	10002f1e 	bne	r2,zero,807ec0 <__pow5mult+0xe8>
  807e04:	2825883a 	mov	r18,r5
  807e08:	8021d0ba 	srai	r16,r16,2
  807e0c:	80001a26 	beq	r16,zero,807e78 <__pow5mult+0xa0>
  807e10:	9c401217 	ldw	r17,72(r19)
  807e14:	8800061e 	bne	r17,zero,807e30 <__pow5mult+0x58>
  807e18:	00003406 	br	807eec <__pow5mult+0x114>
  807e1c:	8021d07a 	srai	r16,r16,1
  807e20:	80001526 	beq	r16,zero,807e78 <__pow5mult+0xa0>
  807e24:	88800017 	ldw	r2,0(r17)
  807e28:	10001c26 	beq	r2,zero,807e9c <__pow5mult+0xc4>
  807e2c:	1023883a 	mov	r17,r2
  807e30:	8080004c 	andi	r2,r16,1
  807e34:	103ff926 	beq	r2,zero,807e1c <__alt_mem_epcs_flash_controller_0+0xff7fee1c>
  807e38:	880d883a 	mov	r6,r17
  807e3c:	900b883a 	mov	r5,r18
  807e40:	9809883a 	mov	r4,r19
  807e44:	0807b4c0 	call	807b4c <__multiply>
  807e48:	90001b26 	beq	r18,zero,807eb8 <__pow5mult+0xe0>
  807e4c:	91000117 	ldw	r4,4(r18)
  807e50:	98c01317 	ldw	r3,76(r19)
  807e54:	8021d07a 	srai	r16,r16,1
  807e58:	2109883a 	add	r4,r4,r4
  807e5c:	2109883a 	add	r4,r4,r4
  807e60:	1907883a 	add	r3,r3,r4
  807e64:	19000017 	ldw	r4,0(r3)
  807e68:	91000015 	stw	r4,0(r18)
  807e6c:	1c800015 	stw	r18,0(r3)
  807e70:	1025883a 	mov	r18,r2
  807e74:	803feb1e 	bne	r16,zero,807e24 <__alt_mem_epcs_flash_controller_0+0xff7fee24>
  807e78:	9005883a 	mov	r2,r18
  807e7c:	dfc00517 	ldw	ra,20(sp)
  807e80:	dd000417 	ldw	r20,16(sp)
  807e84:	dcc00317 	ldw	r19,12(sp)
  807e88:	dc800217 	ldw	r18,8(sp)
  807e8c:	dc400117 	ldw	r17,4(sp)
  807e90:	dc000017 	ldw	r16,0(sp)
  807e94:	dec00604 	addi	sp,sp,24
  807e98:	f800283a 	ret
  807e9c:	880d883a 	mov	r6,r17
  807ea0:	880b883a 	mov	r5,r17
  807ea4:	9809883a 	mov	r4,r19
  807ea8:	0807b4c0 	call	807b4c <__multiply>
  807eac:	88800015 	stw	r2,0(r17)
  807eb0:	10000015 	stw	zero,0(r2)
  807eb4:	003fdd06 	br	807e2c <__alt_mem_epcs_flash_controller_0+0xff7fee2c>
  807eb8:	1025883a 	mov	r18,r2
  807ebc:	003fd706 	br	807e1c <__alt_mem_epcs_flash_controller_0+0xff7fee1c>
  807ec0:	10bfffc4 	addi	r2,r2,-1
  807ec4:	1085883a 	add	r2,r2,r2
  807ec8:	00c020b4 	movhi	r3,130
  807ecc:	18efb004 	addi	r3,r3,-16704
  807ed0:	1085883a 	add	r2,r2,r2
  807ed4:	1885883a 	add	r2,r3,r2
  807ed8:	11800017 	ldw	r6,0(r2)
  807edc:	000f883a 	mov	r7,zero
  807ee0:	08077ac0 	call	8077ac <__multadd>
  807ee4:	1025883a 	mov	r18,r2
  807ee8:	003fc706 	br	807e08 <__alt_mem_epcs_flash_controller_0+0xff7fee08>
  807eec:	05000044 	movi	r20,1
  807ef0:	a00b883a 	mov	r5,r20
  807ef4:	9809883a 	mov	r4,r19
  807ef8:	08076dc0 	call	8076dc <_Balloc>
  807efc:	1023883a 	mov	r17,r2
  807f00:	00809c44 	movi	r2,625
  807f04:	88800515 	stw	r2,20(r17)
  807f08:	8d000415 	stw	r20,16(r17)
  807f0c:	9c401215 	stw	r17,72(r19)
  807f10:	88000015 	stw	zero,0(r17)
  807f14:	003fc606 	br	807e30 <__alt_mem_epcs_flash_controller_0+0xff7fee30>

00807f18 <__lshift>:
  807f18:	defff904 	addi	sp,sp,-28
  807f1c:	dd400515 	stw	r21,20(sp)
  807f20:	dcc00315 	stw	r19,12(sp)
  807f24:	302bd17a 	srai	r21,r6,5
  807f28:	2cc00417 	ldw	r19,16(r5)
  807f2c:	28800217 	ldw	r2,8(r5)
  807f30:	dd000415 	stw	r20,16(sp)
  807f34:	ace7883a 	add	r19,r21,r19
  807f38:	dc800215 	stw	r18,8(sp)
  807f3c:	dc400115 	stw	r17,4(sp)
  807f40:	dc000015 	stw	r16,0(sp)
  807f44:	dfc00615 	stw	ra,24(sp)
  807f48:	9c000044 	addi	r16,r19,1
  807f4c:	2823883a 	mov	r17,r5
  807f50:	3029883a 	mov	r20,r6
  807f54:	2025883a 	mov	r18,r4
  807f58:	29400117 	ldw	r5,4(r5)
  807f5c:	1400030e 	bge	r2,r16,807f6c <__lshift+0x54>
  807f60:	1085883a 	add	r2,r2,r2
  807f64:	29400044 	addi	r5,r5,1
  807f68:	143ffd16 	blt	r2,r16,807f60 <__alt_mem_epcs_flash_controller_0+0xff7fef60>
  807f6c:	9009883a 	mov	r4,r18
  807f70:	08076dc0 	call	8076dc <_Balloc>
  807f74:	10c00504 	addi	r3,r2,20
  807f78:	0540070e 	bge	zero,r21,807f98 <__lshift+0x80>
  807f7c:	ad6b883a 	add	r21,r21,r21
  807f80:	ad6b883a 	add	r21,r21,r21
  807f84:	1809883a 	mov	r4,r3
  807f88:	1d47883a 	add	r3,r3,r21
  807f8c:	20000015 	stw	zero,0(r4)
  807f90:	21000104 	addi	r4,r4,4
  807f94:	193ffd1e 	bne	r3,r4,807f8c <__alt_mem_epcs_flash_controller_0+0xff7fef8c>
  807f98:	8a000417 	ldw	r8,16(r17)
  807f9c:	89000504 	addi	r4,r17,20
  807fa0:	a18007cc 	andi	r6,r20,31
  807fa4:	4211883a 	add	r8,r8,r8
  807fa8:	4211883a 	add	r8,r8,r8
  807fac:	2211883a 	add	r8,r4,r8
  807fb0:	30002326 	beq	r6,zero,808040 <__lshift+0x128>
  807fb4:	02400804 	movi	r9,32
  807fb8:	4993c83a 	sub	r9,r9,r6
  807fbc:	000b883a 	mov	r5,zero
  807fc0:	21c00017 	ldw	r7,0(r4)
  807fc4:	1815883a 	mov	r10,r3
  807fc8:	18c00104 	addi	r3,r3,4
  807fcc:	398e983a 	sll	r7,r7,r6
  807fd0:	21000104 	addi	r4,r4,4
  807fd4:	394ab03a 	or	r5,r7,r5
  807fd8:	197fff15 	stw	r5,-4(r3)
  807fdc:	217fff17 	ldw	r5,-4(r4)
  807fe0:	2a4ad83a 	srl	r5,r5,r9
  807fe4:	223ff636 	bltu	r4,r8,807fc0 <__alt_mem_epcs_flash_controller_0+0xff7fefc0>
  807fe8:	51400115 	stw	r5,4(r10)
  807fec:	28001a1e 	bne	r5,zero,808058 <__lshift+0x140>
  807ff0:	843fffc4 	addi	r16,r16,-1
  807ff4:	14000415 	stw	r16,16(r2)
  807ff8:	88000826 	beq	r17,zero,80801c <__lshift+0x104>
  807ffc:	89000117 	ldw	r4,4(r17)
  808000:	90c01317 	ldw	r3,76(r18)
  808004:	2109883a 	add	r4,r4,r4
  808008:	2109883a 	add	r4,r4,r4
  80800c:	1907883a 	add	r3,r3,r4
  808010:	19000017 	ldw	r4,0(r3)
  808014:	89000015 	stw	r4,0(r17)
  808018:	1c400015 	stw	r17,0(r3)
  80801c:	dfc00617 	ldw	ra,24(sp)
  808020:	dd400517 	ldw	r21,20(sp)
  808024:	dd000417 	ldw	r20,16(sp)
  808028:	dcc00317 	ldw	r19,12(sp)
  80802c:	dc800217 	ldw	r18,8(sp)
  808030:	dc400117 	ldw	r17,4(sp)
  808034:	dc000017 	ldw	r16,0(sp)
  808038:	dec00704 	addi	sp,sp,28
  80803c:	f800283a 	ret
  808040:	21400017 	ldw	r5,0(r4)
  808044:	18c00104 	addi	r3,r3,4
  808048:	21000104 	addi	r4,r4,4
  80804c:	197fff15 	stw	r5,-4(r3)
  808050:	223ffb36 	bltu	r4,r8,808040 <__alt_mem_epcs_flash_controller_0+0xff7ff040>
  808054:	003fe606 	br	807ff0 <__alt_mem_epcs_flash_controller_0+0xff7feff0>
  808058:	9c000084 	addi	r16,r19,2
  80805c:	003fe406 	br	807ff0 <__alt_mem_epcs_flash_controller_0+0xff7feff0>

00808060 <__mcmp>:
  808060:	20800417 	ldw	r2,16(r4)
  808064:	28c00417 	ldw	r3,16(r5)
  808068:	10c5c83a 	sub	r2,r2,r3
  80806c:	1000111e 	bne	r2,zero,8080b4 <__mcmp+0x54>
  808070:	18c7883a 	add	r3,r3,r3
  808074:	18c7883a 	add	r3,r3,r3
  808078:	21000504 	addi	r4,r4,20
  80807c:	29400504 	addi	r5,r5,20
  808080:	20c5883a 	add	r2,r4,r3
  808084:	28cb883a 	add	r5,r5,r3
  808088:	00000106 	br	808090 <__mcmp+0x30>
  80808c:	20800a2e 	bgeu	r4,r2,8080b8 <__mcmp+0x58>
  808090:	10bfff04 	addi	r2,r2,-4
  808094:	297fff04 	addi	r5,r5,-4
  808098:	11800017 	ldw	r6,0(r2)
  80809c:	28c00017 	ldw	r3,0(r5)
  8080a0:	30fffa26 	beq	r6,r3,80808c <__alt_mem_epcs_flash_controller_0+0xff7ff08c>
  8080a4:	30c00236 	bltu	r6,r3,8080b0 <__mcmp+0x50>
  8080a8:	00800044 	movi	r2,1
  8080ac:	f800283a 	ret
  8080b0:	00bfffc4 	movi	r2,-1
  8080b4:	f800283a 	ret
  8080b8:	0005883a 	mov	r2,zero
  8080bc:	f800283a 	ret

008080c0 <__mdiff>:
  8080c0:	28c00417 	ldw	r3,16(r5)
  8080c4:	30800417 	ldw	r2,16(r6)
  8080c8:	defffa04 	addi	sp,sp,-24
  8080cc:	dcc00315 	stw	r19,12(sp)
  8080d0:	dc800215 	stw	r18,8(sp)
  8080d4:	dfc00515 	stw	ra,20(sp)
  8080d8:	dd000415 	stw	r20,16(sp)
  8080dc:	dc400115 	stw	r17,4(sp)
  8080e0:	dc000015 	stw	r16,0(sp)
  8080e4:	1887c83a 	sub	r3,r3,r2
  8080e8:	2825883a 	mov	r18,r5
  8080ec:	3027883a 	mov	r19,r6
  8080f0:	1800141e 	bne	r3,zero,808144 <__mdiff+0x84>
  8080f4:	1085883a 	add	r2,r2,r2
  8080f8:	1085883a 	add	r2,r2,r2
  8080fc:	2a000504 	addi	r8,r5,20
  808100:	34000504 	addi	r16,r6,20
  808104:	4087883a 	add	r3,r8,r2
  808108:	8085883a 	add	r2,r16,r2
  80810c:	00000106 	br	808114 <__mdiff+0x54>
  808110:	40c0592e 	bgeu	r8,r3,808278 <__mdiff+0x1b8>
  808114:	18ffff04 	addi	r3,r3,-4
  808118:	10bfff04 	addi	r2,r2,-4
  80811c:	19c00017 	ldw	r7,0(r3)
  808120:	11400017 	ldw	r5,0(r2)
  808124:	397ffa26 	beq	r7,r5,808110 <__alt_mem_epcs_flash_controller_0+0xff7ff110>
  808128:	3940592e 	bgeu	r7,r5,808290 <__mdiff+0x1d0>
  80812c:	9005883a 	mov	r2,r18
  808130:	4023883a 	mov	r17,r8
  808134:	9825883a 	mov	r18,r19
  808138:	05000044 	movi	r20,1
  80813c:	1027883a 	mov	r19,r2
  808140:	00000406 	br	808154 <__mdiff+0x94>
  808144:	18005616 	blt	r3,zero,8082a0 <__mdiff+0x1e0>
  808148:	34400504 	addi	r17,r6,20
  80814c:	2c000504 	addi	r16,r5,20
  808150:	0029883a 	mov	r20,zero
  808154:	91400117 	ldw	r5,4(r18)
  808158:	08076dc0 	call	8076dc <_Balloc>
  80815c:	92400417 	ldw	r9,16(r18)
  808160:	9b000417 	ldw	r12,16(r19)
  808164:	12c00504 	addi	r11,r2,20
  808168:	4a51883a 	add	r8,r9,r9
  80816c:	6319883a 	add	r12,r12,r12
  808170:	4211883a 	add	r8,r8,r8
  808174:	6319883a 	add	r12,r12,r12
  808178:	15000315 	stw	r20,12(r2)
  80817c:	8211883a 	add	r8,r16,r8
  808180:	8b19883a 	add	r12,r17,r12
  808184:	0007883a 	mov	r3,zero
  808188:	81400017 	ldw	r5,0(r16)
  80818c:	89c00017 	ldw	r7,0(r17)
  808190:	59800104 	addi	r6,r11,4
  808194:	293fffcc 	andi	r4,r5,65535
  808198:	20c7883a 	add	r3,r4,r3
  80819c:	393fffcc 	andi	r4,r7,65535
  8081a0:	1909c83a 	sub	r4,r3,r4
  8081a4:	280ad43a 	srli	r5,r5,16
  8081a8:	380ed43a 	srli	r7,r7,16
  8081ac:	2007d43a 	srai	r3,r4,16
  8081b0:	213fffcc 	andi	r4,r4,65535
  8081b4:	29cbc83a 	sub	r5,r5,r7
  8081b8:	28c7883a 	add	r3,r5,r3
  8081bc:	180a943a 	slli	r5,r3,16
  8081c0:	8c400104 	addi	r17,r17,4
  8081c4:	84000104 	addi	r16,r16,4
  8081c8:	2908b03a 	or	r4,r5,r4
  8081cc:	59000015 	stw	r4,0(r11)
  8081d0:	1807d43a 	srai	r3,r3,16
  8081d4:	3015883a 	mov	r10,r6
  8081d8:	3017883a 	mov	r11,r6
  8081dc:	8b3fea36 	bltu	r17,r12,808188 <__alt_mem_epcs_flash_controller_0+0xff7ff188>
  8081e0:	8200162e 	bgeu	r16,r8,80823c <__mdiff+0x17c>
  8081e4:	8017883a 	mov	r11,r16
  8081e8:	59400017 	ldw	r5,0(r11)
  8081ec:	31800104 	addi	r6,r6,4
  8081f0:	5ac00104 	addi	r11,r11,4
  8081f4:	293fffcc 	andi	r4,r5,65535
  8081f8:	20c7883a 	add	r3,r4,r3
  8081fc:	280ed43a 	srli	r7,r5,16
  808200:	180bd43a 	srai	r5,r3,16
  808204:	193fffcc 	andi	r4,r3,65535
  808208:	3947883a 	add	r3,r7,r5
  80820c:	180a943a 	slli	r5,r3,16
  808210:	1807d43a 	srai	r3,r3,16
  808214:	2908b03a 	or	r4,r5,r4
  808218:	313fff15 	stw	r4,-4(r6)
  80821c:	5a3ff236 	bltu	r11,r8,8081e8 <__alt_mem_epcs_flash_controller_0+0xff7ff1e8>
  808220:	0406303a 	nor	r3,zero,r16
  808224:	1a07883a 	add	r3,r3,r8
  808228:	1806d0ba 	srli	r3,r3,2
  80822c:	18c00044 	addi	r3,r3,1
  808230:	18c7883a 	add	r3,r3,r3
  808234:	18c7883a 	add	r3,r3,r3
  808238:	50d5883a 	add	r10,r10,r3
  80823c:	50ffff04 	addi	r3,r10,-4
  808240:	2000041e 	bne	r4,zero,808254 <__mdiff+0x194>
  808244:	18ffff04 	addi	r3,r3,-4
  808248:	19000017 	ldw	r4,0(r3)
  80824c:	4a7fffc4 	addi	r9,r9,-1
  808250:	203ffc26 	beq	r4,zero,808244 <__alt_mem_epcs_flash_controller_0+0xff7ff244>
  808254:	12400415 	stw	r9,16(r2)
  808258:	dfc00517 	ldw	ra,20(sp)
  80825c:	dd000417 	ldw	r20,16(sp)
  808260:	dcc00317 	ldw	r19,12(sp)
  808264:	dc800217 	ldw	r18,8(sp)
  808268:	dc400117 	ldw	r17,4(sp)
  80826c:	dc000017 	ldw	r16,0(sp)
  808270:	dec00604 	addi	sp,sp,24
  808274:	f800283a 	ret
  808278:	000b883a 	mov	r5,zero
  80827c:	08076dc0 	call	8076dc <_Balloc>
  808280:	00c00044 	movi	r3,1
  808284:	10c00415 	stw	r3,16(r2)
  808288:	10000515 	stw	zero,20(r2)
  80828c:	003ff206 	br	808258 <__alt_mem_epcs_flash_controller_0+0xff7ff258>
  808290:	8023883a 	mov	r17,r16
  808294:	0029883a 	mov	r20,zero
  808298:	4021883a 	mov	r16,r8
  80829c:	003fad06 	br	808154 <__alt_mem_epcs_flash_controller_0+0xff7ff154>
  8082a0:	9005883a 	mov	r2,r18
  8082a4:	94400504 	addi	r17,r18,20
  8082a8:	9c000504 	addi	r16,r19,20
  8082ac:	9825883a 	mov	r18,r19
  8082b0:	05000044 	movi	r20,1
  8082b4:	1027883a 	mov	r19,r2
  8082b8:	003fa606 	br	808154 <__alt_mem_epcs_flash_controller_0+0xff7ff154>

008082bc <__ulp>:
  8082bc:	295ffc2c 	andhi	r5,r5,32752
  8082c0:	00bf3034 	movhi	r2,64704
  8082c4:	2887883a 	add	r3,r5,r2
  8082c8:	00c0020e 	bge	zero,r3,8082d4 <__ulp+0x18>
  8082cc:	0005883a 	mov	r2,zero
  8082d0:	f800283a 	ret
  8082d4:	00c7c83a 	sub	r3,zero,r3
  8082d8:	1807d53a 	srai	r3,r3,20
  8082dc:	008004c4 	movi	r2,19
  8082e0:	10c00b0e 	bge	r2,r3,808310 <__ulp+0x54>
  8082e4:	18bffb04 	addi	r2,r3,-20
  8082e8:	01000784 	movi	r4,30
  8082ec:	0007883a 	mov	r3,zero
  8082f0:	20800516 	blt	r4,r2,808308 <__ulp+0x4c>
  8082f4:	010007c4 	movi	r4,31
  8082f8:	2089c83a 	sub	r4,r4,r2
  8082fc:	00800044 	movi	r2,1
  808300:	1104983a 	sll	r2,r2,r4
  808304:	f800283a 	ret
  808308:	00800044 	movi	r2,1
  80830c:	f800283a 	ret
  808310:	01400234 	movhi	r5,8
  808314:	28c7d83a 	sra	r3,r5,r3
  808318:	0005883a 	mov	r2,zero
  80831c:	f800283a 	ret

00808320 <__b2d>:
  808320:	defffa04 	addi	sp,sp,-24
  808324:	dc000015 	stw	r16,0(sp)
  808328:	24000417 	ldw	r16,16(r4)
  80832c:	dc400115 	stw	r17,4(sp)
  808330:	24400504 	addi	r17,r4,20
  808334:	8421883a 	add	r16,r16,r16
  808338:	8421883a 	add	r16,r16,r16
  80833c:	8c21883a 	add	r16,r17,r16
  808340:	dc800215 	stw	r18,8(sp)
  808344:	84bfff17 	ldw	r18,-4(r16)
  808348:	dd000415 	stw	r20,16(sp)
  80834c:	dcc00315 	stw	r19,12(sp)
  808350:	9009883a 	mov	r4,r18
  808354:	2829883a 	mov	r20,r5
  808358:	dfc00515 	stw	ra,20(sp)
  80835c:	08079f80 	call	8079f8 <__hi0bits>
  808360:	00c00804 	movi	r3,32
  808364:	1889c83a 	sub	r4,r3,r2
  808368:	a1000015 	stw	r4,0(r20)
  80836c:	01000284 	movi	r4,10
  808370:	84ffff04 	addi	r19,r16,-4
  808374:	20801216 	blt	r4,r2,8083c0 <__b2d+0xa0>
  808378:	018002c4 	movi	r6,11
  80837c:	308dc83a 	sub	r6,r6,r2
  808380:	9186d83a 	srl	r3,r18,r6
  808384:	18cffc34 	orhi	r3,r3,16368
  808388:	8cc0212e 	bgeu	r17,r19,808410 <__b2d+0xf0>
  80838c:	813ffe17 	ldw	r4,-8(r16)
  808390:	218cd83a 	srl	r6,r4,r6
  808394:	10800544 	addi	r2,r2,21
  808398:	9084983a 	sll	r2,r18,r2
  80839c:	1184b03a 	or	r2,r2,r6
  8083a0:	dfc00517 	ldw	ra,20(sp)
  8083a4:	dd000417 	ldw	r20,16(sp)
  8083a8:	dcc00317 	ldw	r19,12(sp)
  8083ac:	dc800217 	ldw	r18,8(sp)
  8083b0:	dc400117 	ldw	r17,4(sp)
  8083b4:	dc000017 	ldw	r16,0(sp)
  8083b8:	dec00604 	addi	sp,sp,24
  8083bc:	f800283a 	ret
  8083c0:	8cc00f2e 	bgeu	r17,r19,808400 <__b2d+0xe0>
  8083c4:	117ffd44 	addi	r5,r2,-11
  8083c8:	80bffe17 	ldw	r2,-8(r16)
  8083cc:	28000e26 	beq	r5,zero,808408 <__b2d+0xe8>
  8083d0:	1949c83a 	sub	r4,r3,r5
  8083d4:	9164983a 	sll	r18,r18,r5
  8083d8:	1106d83a 	srl	r3,r2,r4
  8083dc:	81bffe04 	addi	r6,r16,-8
  8083e0:	948ffc34 	orhi	r18,r18,16368
  8083e4:	90c6b03a 	or	r3,r18,r3
  8083e8:	89800e2e 	bgeu	r17,r6,808424 <__b2d+0x104>
  8083ec:	81bffd17 	ldw	r6,-12(r16)
  8083f0:	1144983a 	sll	r2,r2,r5
  8083f4:	310ad83a 	srl	r5,r6,r4
  8083f8:	2884b03a 	or	r2,r5,r2
  8083fc:	003fe806 	br	8083a0 <__alt_mem_epcs_flash_controller_0+0xff7ff3a0>
  808400:	10bffd44 	addi	r2,r2,-11
  808404:	1000041e 	bne	r2,zero,808418 <__b2d+0xf8>
  808408:	90cffc34 	orhi	r3,r18,16368
  80840c:	003fe406 	br	8083a0 <__alt_mem_epcs_flash_controller_0+0xff7ff3a0>
  808410:	000d883a 	mov	r6,zero
  808414:	003fdf06 	br	808394 <__alt_mem_epcs_flash_controller_0+0xff7ff394>
  808418:	90a4983a 	sll	r18,r18,r2
  80841c:	0005883a 	mov	r2,zero
  808420:	003ff906 	br	808408 <__alt_mem_epcs_flash_controller_0+0xff7ff408>
  808424:	1144983a 	sll	r2,r2,r5
  808428:	003fdd06 	br	8083a0 <__alt_mem_epcs_flash_controller_0+0xff7ff3a0>

0080842c <__d2b>:
  80842c:	defff804 	addi	sp,sp,-32
  808430:	dc000215 	stw	r16,8(sp)
  808434:	3021883a 	mov	r16,r6
  808438:	dc400315 	stw	r17,12(sp)
  80843c:	8022907a 	slli	r17,r16,1
  808440:	dd000615 	stw	r20,24(sp)
  808444:	2829883a 	mov	r20,r5
  808448:	01400044 	movi	r5,1
  80844c:	dcc00515 	stw	r19,20(sp)
  808450:	dc800415 	stw	r18,16(sp)
  808454:	dfc00715 	stw	ra,28(sp)
  808458:	3825883a 	mov	r18,r7
  80845c:	8822d57a 	srli	r17,r17,21
  808460:	08076dc0 	call	8076dc <_Balloc>
  808464:	1027883a 	mov	r19,r2
  808468:	00800434 	movhi	r2,16
  80846c:	10bfffc4 	addi	r2,r2,-1
  808470:	808c703a 	and	r6,r16,r2
  808474:	88000126 	beq	r17,zero,80847c <__d2b+0x50>
  808478:	31800434 	orhi	r6,r6,16
  80847c:	d9800015 	stw	r6,0(sp)
  808480:	a0002426 	beq	r20,zero,808514 <__d2b+0xe8>
  808484:	d9000104 	addi	r4,sp,4
  808488:	dd000115 	stw	r20,4(sp)
  80848c:	0807a600 	call	807a60 <__lo0bits>
  808490:	d8c00017 	ldw	r3,0(sp)
  808494:	10002f1e 	bne	r2,zero,808554 <__d2b+0x128>
  808498:	d9000117 	ldw	r4,4(sp)
  80849c:	99000515 	stw	r4,20(r19)
  8084a0:	1821003a 	cmpeq	r16,r3,zero
  8084a4:	01000084 	movi	r4,2
  8084a8:	2421c83a 	sub	r16,r4,r16
  8084ac:	98c00615 	stw	r3,24(r19)
  8084b0:	9c000415 	stw	r16,16(r19)
  8084b4:	88001f1e 	bne	r17,zero,808534 <__d2b+0x108>
  8084b8:	10bef384 	addi	r2,r2,-1074
  8084bc:	90800015 	stw	r2,0(r18)
  8084c0:	00900034 	movhi	r2,16384
  8084c4:	10bfffc4 	addi	r2,r2,-1
  8084c8:	8085883a 	add	r2,r16,r2
  8084cc:	1085883a 	add	r2,r2,r2
  8084d0:	1085883a 	add	r2,r2,r2
  8084d4:	9885883a 	add	r2,r19,r2
  8084d8:	11000517 	ldw	r4,20(r2)
  8084dc:	8020917a 	slli	r16,r16,5
  8084e0:	08079f80 	call	8079f8 <__hi0bits>
  8084e4:	d8c00817 	ldw	r3,32(sp)
  8084e8:	8085c83a 	sub	r2,r16,r2
  8084ec:	18800015 	stw	r2,0(r3)
  8084f0:	9805883a 	mov	r2,r19
  8084f4:	dfc00717 	ldw	ra,28(sp)
  8084f8:	dd000617 	ldw	r20,24(sp)
  8084fc:	dcc00517 	ldw	r19,20(sp)
  808500:	dc800417 	ldw	r18,16(sp)
  808504:	dc400317 	ldw	r17,12(sp)
  808508:	dc000217 	ldw	r16,8(sp)
  80850c:	dec00804 	addi	sp,sp,32
  808510:	f800283a 	ret
  808514:	d809883a 	mov	r4,sp
  808518:	0807a600 	call	807a60 <__lo0bits>
  80851c:	d8c00017 	ldw	r3,0(sp)
  808520:	04000044 	movi	r16,1
  808524:	9c000415 	stw	r16,16(r19)
  808528:	98c00515 	stw	r3,20(r19)
  80852c:	10800804 	addi	r2,r2,32
  808530:	883fe126 	beq	r17,zero,8084b8 <__alt_mem_epcs_flash_controller_0+0xff7ff4b8>
  808534:	00c00d44 	movi	r3,53
  808538:	8c7ef344 	addi	r17,r17,-1075
  80853c:	88a3883a 	add	r17,r17,r2
  808540:	1885c83a 	sub	r2,r3,r2
  808544:	d8c00817 	ldw	r3,32(sp)
  808548:	94400015 	stw	r17,0(r18)
  80854c:	18800015 	stw	r2,0(r3)
  808550:	003fe706 	br	8084f0 <__alt_mem_epcs_flash_controller_0+0xff7ff4f0>
  808554:	01000804 	movi	r4,32
  808558:	2089c83a 	sub	r4,r4,r2
  80855c:	1908983a 	sll	r4,r3,r4
  808560:	d9400117 	ldw	r5,4(sp)
  808564:	1886d83a 	srl	r3,r3,r2
  808568:	2148b03a 	or	r4,r4,r5
  80856c:	99000515 	stw	r4,20(r19)
  808570:	d8c00015 	stw	r3,0(sp)
  808574:	003fca06 	br	8084a0 <__alt_mem_epcs_flash_controller_0+0xff7ff4a0>

00808578 <__ratio>:
  808578:	defff904 	addi	sp,sp,-28
  80857c:	dc400315 	stw	r17,12(sp)
  808580:	2823883a 	mov	r17,r5
  808584:	d9400104 	addi	r5,sp,4
  808588:	dfc00615 	stw	ra,24(sp)
  80858c:	dcc00515 	stw	r19,20(sp)
  808590:	dc800415 	stw	r18,16(sp)
  808594:	2027883a 	mov	r19,r4
  808598:	dc000215 	stw	r16,8(sp)
  80859c:	08083200 	call	808320 <__b2d>
  8085a0:	d80b883a 	mov	r5,sp
  8085a4:	8809883a 	mov	r4,r17
  8085a8:	1025883a 	mov	r18,r2
  8085ac:	1821883a 	mov	r16,r3
  8085b0:	08083200 	call	808320 <__b2d>
  8085b4:	8a000417 	ldw	r8,16(r17)
  8085b8:	99000417 	ldw	r4,16(r19)
  8085bc:	d9400117 	ldw	r5,4(sp)
  8085c0:	2209c83a 	sub	r4,r4,r8
  8085c4:	2010917a 	slli	r8,r4,5
  8085c8:	d9000017 	ldw	r4,0(sp)
  8085cc:	2909c83a 	sub	r4,r5,r4
  8085d0:	4109883a 	add	r4,r8,r4
  8085d4:	01000e0e 	bge	zero,r4,808610 <__ratio+0x98>
  8085d8:	2008953a 	slli	r4,r4,20
  8085dc:	2421883a 	add	r16,r4,r16
  8085e0:	100d883a 	mov	r6,r2
  8085e4:	180f883a 	mov	r7,r3
  8085e8:	9009883a 	mov	r4,r18
  8085ec:	800b883a 	mov	r5,r16
  8085f0:	080c2700 	call	80c270 <__divdf3>
  8085f4:	dfc00617 	ldw	ra,24(sp)
  8085f8:	dcc00517 	ldw	r19,20(sp)
  8085fc:	dc800417 	ldw	r18,16(sp)
  808600:	dc400317 	ldw	r17,12(sp)
  808604:	dc000217 	ldw	r16,8(sp)
  808608:	dec00704 	addi	sp,sp,28
  80860c:	f800283a 	ret
  808610:	2008953a 	slli	r4,r4,20
  808614:	1907c83a 	sub	r3,r3,r4
  808618:	003ff106 	br	8085e0 <__alt_mem_epcs_flash_controller_0+0xff7ff5e0>

0080861c <_mprec_log10>:
  80861c:	defffe04 	addi	sp,sp,-8
  808620:	dc000015 	stw	r16,0(sp)
  808624:	dfc00115 	stw	ra,4(sp)
  808628:	008005c4 	movi	r2,23
  80862c:	2021883a 	mov	r16,r4
  808630:	11000d0e 	bge	r2,r4,808668 <_mprec_log10+0x4c>
  808634:	0005883a 	mov	r2,zero
  808638:	00cffc34 	movhi	r3,16368
  80863c:	843fffc4 	addi	r16,r16,-1
  808640:	000d883a 	mov	r6,zero
  808644:	01d00934 	movhi	r7,16420
  808648:	1009883a 	mov	r4,r2
  80864c:	180b883a 	mov	r5,r3
  808650:	080ce980 	call	80ce98 <__muldf3>
  808654:	803ff91e 	bne	r16,zero,80863c <__alt_mem_epcs_flash_controller_0+0xff7ff63c>
  808658:	dfc00117 	ldw	ra,4(sp)
  80865c:	dc000017 	ldw	r16,0(sp)
  808660:	dec00204 	addi	sp,sp,8
  808664:	f800283a 	ret
  808668:	202090fa 	slli	r16,r4,3
  80866c:	008020b4 	movhi	r2,130
  808670:	10afc704 	addi	r2,r2,-16612
  808674:	1421883a 	add	r16,r2,r16
  808678:	80800017 	ldw	r2,0(r16)
  80867c:	80c00117 	ldw	r3,4(r16)
  808680:	dfc00117 	ldw	ra,4(sp)
  808684:	dc000017 	ldw	r16,0(sp)
  808688:	dec00204 	addi	sp,sp,8
  80868c:	f800283a 	ret

00808690 <__copybits>:
  808690:	297fffc4 	addi	r5,r5,-1
  808694:	280fd17a 	srai	r7,r5,5
  808698:	30c00417 	ldw	r3,16(r6)
  80869c:	30800504 	addi	r2,r6,20
  8086a0:	39c00044 	addi	r7,r7,1
  8086a4:	18c7883a 	add	r3,r3,r3
  8086a8:	39cf883a 	add	r7,r7,r7
  8086ac:	18c7883a 	add	r3,r3,r3
  8086b0:	39cf883a 	add	r7,r7,r7
  8086b4:	10c7883a 	add	r3,r2,r3
  8086b8:	21cf883a 	add	r7,r4,r7
  8086bc:	10c00d2e 	bgeu	r2,r3,8086f4 <__copybits+0x64>
  8086c0:	200b883a 	mov	r5,r4
  8086c4:	12000017 	ldw	r8,0(r2)
  8086c8:	29400104 	addi	r5,r5,4
  8086cc:	10800104 	addi	r2,r2,4
  8086d0:	2a3fff15 	stw	r8,-4(r5)
  8086d4:	10fffb36 	bltu	r2,r3,8086c4 <__alt_mem_epcs_flash_controller_0+0xff7ff6c4>
  8086d8:	1985c83a 	sub	r2,r3,r6
  8086dc:	10bffac4 	addi	r2,r2,-21
  8086e0:	1004d0ba 	srli	r2,r2,2
  8086e4:	10800044 	addi	r2,r2,1
  8086e8:	1085883a 	add	r2,r2,r2
  8086ec:	1085883a 	add	r2,r2,r2
  8086f0:	2089883a 	add	r4,r4,r2
  8086f4:	21c0032e 	bgeu	r4,r7,808704 <__copybits+0x74>
  8086f8:	20000015 	stw	zero,0(r4)
  8086fc:	21000104 	addi	r4,r4,4
  808700:	21fffd36 	bltu	r4,r7,8086f8 <__alt_mem_epcs_flash_controller_0+0xff7ff6f8>
  808704:	f800283a 	ret

00808708 <__any_on>:
  808708:	20c00417 	ldw	r3,16(r4)
  80870c:	2805d17a 	srai	r2,r5,5
  808710:	21000504 	addi	r4,r4,20
  808714:	18800d0e 	bge	r3,r2,80874c <__any_on+0x44>
  808718:	18c7883a 	add	r3,r3,r3
  80871c:	18c7883a 	add	r3,r3,r3
  808720:	20c7883a 	add	r3,r4,r3
  808724:	20c0192e 	bgeu	r4,r3,80878c <__any_on+0x84>
  808728:	18bfff17 	ldw	r2,-4(r3)
  80872c:	18ffff04 	addi	r3,r3,-4
  808730:	1000041e 	bne	r2,zero,808744 <__any_on+0x3c>
  808734:	20c0142e 	bgeu	r4,r3,808788 <__any_on+0x80>
  808738:	18ffff04 	addi	r3,r3,-4
  80873c:	19400017 	ldw	r5,0(r3)
  808740:	283ffc26 	beq	r5,zero,808734 <__alt_mem_epcs_flash_controller_0+0xff7ff734>
  808744:	00800044 	movi	r2,1
  808748:	f800283a 	ret
  80874c:	10c00a0e 	bge	r2,r3,808778 <__any_on+0x70>
  808750:	1085883a 	add	r2,r2,r2
  808754:	1085883a 	add	r2,r2,r2
  808758:	294007cc 	andi	r5,r5,31
  80875c:	2087883a 	add	r3,r4,r2
  808760:	283ff026 	beq	r5,zero,808724 <__alt_mem_epcs_flash_controller_0+0xff7ff724>
  808764:	19800017 	ldw	r6,0(r3)
  808768:	3144d83a 	srl	r2,r6,r5
  80876c:	114a983a 	sll	r5,r2,r5
  808770:	317ff41e 	bne	r6,r5,808744 <__alt_mem_epcs_flash_controller_0+0xff7ff744>
  808774:	003feb06 	br	808724 <__alt_mem_epcs_flash_controller_0+0xff7ff724>
  808778:	1085883a 	add	r2,r2,r2
  80877c:	1085883a 	add	r2,r2,r2
  808780:	2087883a 	add	r3,r4,r2
  808784:	003fe706 	br	808724 <__alt_mem_epcs_flash_controller_0+0xff7ff724>
  808788:	f800283a 	ret
  80878c:	0005883a 	mov	r2,zero
  808790:	f800283a 	ret

00808794 <_putc_r>:
  808794:	defffc04 	addi	sp,sp,-16
  808798:	dc000215 	stw	r16,8(sp)
  80879c:	dfc00315 	stw	ra,12(sp)
  8087a0:	2021883a 	mov	r16,r4
  8087a4:	20000226 	beq	r4,zero,8087b0 <_putc_r+0x1c>
  8087a8:	20800e17 	ldw	r2,56(r4)
  8087ac:	10001b26 	beq	r2,zero,80881c <_putc_r+0x88>
  8087b0:	30800217 	ldw	r2,8(r6)
  8087b4:	10bfffc4 	addi	r2,r2,-1
  8087b8:	30800215 	stw	r2,8(r6)
  8087bc:	10000a16 	blt	r2,zero,8087e8 <_putc_r+0x54>
  8087c0:	30800017 	ldw	r2,0(r6)
  8087c4:	11400005 	stb	r5,0(r2)
  8087c8:	30800017 	ldw	r2,0(r6)
  8087cc:	10c00044 	addi	r3,r2,1
  8087d0:	30c00015 	stw	r3,0(r6)
  8087d4:	10800003 	ldbu	r2,0(r2)
  8087d8:	dfc00317 	ldw	ra,12(sp)
  8087dc:	dc000217 	ldw	r16,8(sp)
  8087e0:	dec00404 	addi	sp,sp,16
  8087e4:	f800283a 	ret
  8087e8:	30c00617 	ldw	r3,24(r6)
  8087ec:	10c00616 	blt	r2,r3,808808 <_putc_r+0x74>
  8087f0:	30800017 	ldw	r2,0(r6)
  8087f4:	00c00284 	movi	r3,10
  8087f8:	11400005 	stb	r5,0(r2)
  8087fc:	30800017 	ldw	r2,0(r6)
  808800:	11400003 	ldbu	r5,0(r2)
  808804:	28fff11e 	bne	r5,r3,8087cc <__alt_mem_epcs_flash_controller_0+0xff7ff7cc>
  808808:	8009883a 	mov	r4,r16
  80880c:	dfc00317 	ldw	ra,12(sp)
  808810:	dc000217 	ldw	r16,8(sp)
  808814:	dec00404 	addi	sp,sp,16
  808818:	080a7081 	jmpi	80a708 <__swbuf_r>
  80881c:	d9400015 	stw	r5,0(sp)
  808820:	d9800115 	stw	r6,4(sp)
  808824:	0801a600 	call	801a60 <__sinit>
  808828:	d9800117 	ldw	r6,4(sp)
  80882c:	d9400017 	ldw	r5,0(sp)
  808830:	003fdf06 	br	8087b0 <__alt_mem_epcs_flash_controller_0+0xff7ff7b0>

00808834 <putc>:
  808834:	008020b4 	movhi	r2,130
  808838:	defffc04 	addi	sp,sp,-16
  80883c:	10b82e04 	addi	r2,r2,-8008
  808840:	dc000115 	stw	r16,4(sp)
  808844:	14000017 	ldw	r16,0(r2)
  808848:	dc400215 	stw	r17,8(sp)
  80884c:	dfc00315 	stw	ra,12(sp)
  808850:	2023883a 	mov	r17,r4
  808854:	80000226 	beq	r16,zero,808860 <putc+0x2c>
  808858:	80800e17 	ldw	r2,56(r16)
  80885c:	10001a26 	beq	r2,zero,8088c8 <putc+0x94>
  808860:	28800217 	ldw	r2,8(r5)
  808864:	10bfffc4 	addi	r2,r2,-1
  808868:	28800215 	stw	r2,8(r5)
  80886c:	10000b16 	blt	r2,zero,80889c <putc+0x68>
  808870:	28800017 	ldw	r2,0(r5)
  808874:	14400005 	stb	r17,0(r2)
  808878:	28800017 	ldw	r2,0(r5)
  80887c:	10c00044 	addi	r3,r2,1
  808880:	28c00015 	stw	r3,0(r5)
  808884:	10800003 	ldbu	r2,0(r2)
  808888:	dfc00317 	ldw	ra,12(sp)
  80888c:	dc400217 	ldw	r17,8(sp)
  808890:	dc000117 	ldw	r16,4(sp)
  808894:	dec00404 	addi	sp,sp,16
  808898:	f800283a 	ret
  80889c:	28c00617 	ldw	r3,24(r5)
  8088a0:	10c00e16 	blt	r2,r3,8088dc <putc+0xa8>
  8088a4:	28800017 	ldw	r2,0(r5)
  8088a8:	01000284 	movi	r4,10
  8088ac:	14400005 	stb	r17,0(r2)
  8088b0:	28800017 	ldw	r2,0(r5)
  8088b4:	10c00003 	ldbu	r3,0(r2)
  8088b8:	193ff01e 	bne	r3,r4,80887c <__alt_mem_epcs_flash_controller_0+0xff7ff87c>
  8088bc:	280d883a 	mov	r6,r5
  8088c0:	180b883a 	mov	r5,r3
  8088c4:	00000706 	br	8088e4 <putc+0xb0>
  8088c8:	8009883a 	mov	r4,r16
  8088cc:	d9400015 	stw	r5,0(sp)
  8088d0:	0801a600 	call	801a60 <__sinit>
  8088d4:	d9400017 	ldw	r5,0(sp)
  8088d8:	003fe106 	br	808860 <__alt_mem_epcs_flash_controller_0+0xff7ff860>
  8088dc:	280d883a 	mov	r6,r5
  8088e0:	880b883a 	mov	r5,r17
  8088e4:	8009883a 	mov	r4,r16
  8088e8:	dfc00317 	ldw	ra,12(sp)
  8088ec:	dc400217 	ldw	r17,8(sp)
  8088f0:	dc000117 	ldw	r16,4(sp)
  8088f4:	dec00404 	addi	sp,sp,16
  8088f8:	080a7081 	jmpi	80a708 <__swbuf_r>

008088fc <_read_r>:
  8088fc:	defffd04 	addi	sp,sp,-12
  808900:	2805883a 	mov	r2,r5
  808904:	dc000015 	stw	r16,0(sp)
  808908:	040020b4 	movhi	r16,130
  80890c:	dc400115 	stw	r17,4(sp)
  808910:	300b883a 	mov	r5,r6
  808914:	84387b04 	addi	r16,r16,-7700
  808918:	2023883a 	mov	r17,r4
  80891c:	380d883a 	mov	r6,r7
  808920:	1009883a 	mov	r4,r2
  808924:	dfc00215 	stw	ra,8(sp)
  808928:	80000015 	stw	zero,0(r16)
  80892c:	080ea340 	call	80ea34 <read>
  808930:	00ffffc4 	movi	r3,-1
  808934:	10c00526 	beq	r2,r3,80894c <_read_r+0x50>
  808938:	dfc00217 	ldw	ra,8(sp)
  80893c:	dc400117 	ldw	r17,4(sp)
  808940:	dc000017 	ldw	r16,0(sp)
  808944:	dec00304 	addi	sp,sp,12
  808948:	f800283a 	ret
  80894c:	80c00017 	ldw	r3,0(r16)
  808950:	183ff926 	beq	r3,zero,808938 <__alt_mem_epcs_flash_controller_0+0xff7ff938>
  808954:	88c00015 	stw	r3,0(r17)
  808958:	003ff706 	br	808938 <__alt_mem_epcs_flash_controller_0+0xff7ff938>

0080895c <_realloc_r>:
  80895c:	defff604 	addi	sp,sp,-40
  808960:	dc800215 	stw	r18,8(sp)
  808964:	dfc00915 	stw	ra,36(sp)
  808968:	df000815 	stw	fp,32(sp)
  80896c:	ddc00715 	stw	r23,28(sp)
  808970:	dd800615 	stw	r22,24(sp)
  808974:	dd400515 	stw	r21,20(sp)
  808978:	dd000415 	stw	r20,16(sp)
  80897c:	dcc00315 	stw	r19,12(sp)
  808980:	dc400115 	stw	r17,4(sp)
  808984:	dc000015 	stw	r16,0(sp)
  808988:	3025883a 	mov	r18,r6
  80898c:	2800b726 	beq	r5,zero,808c6c <_realloc_r+0x310>
  808990:	282b883a 	mov	r21,r5
  808994:	2029883a 	mov	r20,r4
  808998:	080eecc0 	call	80eecc <__malloc_lock>
  80899c:	a8bfff17 	ldw	r2,-4(r21)
  8089a0:	043fff04 	movi	r16,-4
  8089a4:	90c002c4 	addi	r3,r18,11
  8089a8:	01000584 	movi	r4,22
  8089ac:	acfffe04 	addi	r19,r21,-8
  8089b0:	1420703a 	and	r16,r2,r16
  8089b4:	20c0332e 	bgeu	r4,r3,808a84 <_realloc_r+0x128>
  8089b8:	047ffe04 	movi	r17,-8
  8089bc:	1c62703a 	and	r17,r3,r17
  8089c0:	8807883a 	mov	r3,r17
  8089c4:	88005816 	blt	r17,zero,808b28 <_realloc_r+0x1cc>
  8089c8:	8c805736 	bltu	r17,r18,808b28 <_realloc_r+0x1cc>
  8089cc:	80c0300e 	bge	r16,r3,808a90 <_realloc_r+0x134>
  8089d0:	070020b4 	movhi	fp,130
  8089d4:	e731b304 	addi	fp,fp,-14644
  8089d8:	e1c00217 	ldw	r7,8(fp)
  8089dc:	9c09883a 	add	r4,r19,r16
  8089e0:	22000117 	ldw	r8,4(r4)
  8089e4:	21c06326 	beq	r4,r7,808b74 <_realloc_r+0x218>
  8089e8:	017fff84 	movi	r5,-2
  8089ec:	414a703a 	and	r5,r8,r5
  8089f0:	214b883a 	add	r5,r4,r5
  8089f4:	29800117 	ldw	r6,4(r5)
  8089f8:	3180004c 	andi	r6,r6,1
  8089fc:	30003f26 	beq	r6,zero,808afc <_realloc_r+0x1a0>
  808a00:	1080004c 	andi	r2,r2,1
  808a04:	10008326 	beq	r2,zero,808c14 <_realloc_r+0x2b8>
  808a08:	900b883a 	mov	r5,r18
  808a0c:	a009883a 	mov	r4,r20
  808a10:	080206c0 	call	80206c <_malloc_r>
  808a14:	1025883a 	mov	r18,r2
  808a18:	10011e26 	beq	r2,zero,808e94 <_realloc_r+0x538>
  808a1c:	a93fff17 	ldw	r4,-4(r21)
  808a20:	10fffe04 	addi	r3,r2,-8
  808a24:	00bfff84 	movi	r2,-2
  808a28:	2084703a 	and	r2,r4,r2
  808a2c:	9885883a 	add	r2,r19,r2
  808a30:	1880ee26 	beq	r3,r2,808dec <_realloc_r+0x490>
  808a34:	81bfff04 	addi	r6,r16,-4
  808a38:	00800904 	movi	r2,36
  808a3c:	1180b836 	bltu	r2,r6,808d20 <_realloc_r+0x3c4>
  808a40:	00c004c4 	movi	r3,19
  808a44:	19809636 	bltu	r3,r6,808ca0 <_realloc_r+0x344>
  808a48:	9005883a 	mov	r2,r18
  808a4c:	a807883a 	mov	r3,r21
  808a50:	19000017 	ldw	r4,0(r3)
  808a54:	11000015 	stw	r4,0(r2)
  808a58:	19000117 	ldw	r4,4(r3)
  808a5c:	11000115 	stw	r4,4(r2)
  808a60:	18c00217 	ldw	r3,8(r3)
  808a64:	10c00215 	stw	r3,8(r2)
  808a68:	a80b883a 	mov	r5,r21
  808a6c:	a009883a 	mov	r4,r20
  808a70:	0801bd40 	call	801bd4 <_free_r>
  808a74:	a009883a 	mov	r4,r20
  808a78:	080efec0 	call	80efec <__malloc_unlock>
  808a7c:	9005883a 	mov	r2,r18
  808a80:	00001206 	br	808acc <_realloc_r+0x170>
  808a84:	00c00404 	movi	r3,16
  808a88:	1823883a 	mov	r17,r3
  808a8c:	003fce06 	br	8089c8 <__alt_mem_epcs_flash_controller_0+0xff7ff9c8>
  808a90:	a825883a 	mov	r18,r21
  808a94:	8445c83a 	sub	r2,r16,r17
  808a98:	00c003c4 	movi	r3,15
  808a9c:	18802636 	bltu	r3,r2,808b38 <_realloc_r+0x1dc>
  808aa0:	99800117 	ldw	r6,4(r19)
  808aa4:	9c07883a 	add	r3,r19,r16
  808aa8:	3180004c 	andi	r6,r6,1
  808aac:	3420b03a 	or	r16,r6,r16
  808ab0:	9c000115 	stw	r16,4(r19)
  808ab4:	18800117 	ldw	r2,4(r3)
  808ab8:	10800054 	ori	r2,r2,1
  808abc:	18800115 	stw	r2,4(r3)
  808ac0:	a009883a 	mov	r4,r20
  808ac4:	080efec0 	call	80efec <__malloc_unlock>
  808ac8:	9005883a 	mov	r2,r18
  808acc:	dfc00917 	ldw	ra,36(sp)
  808ad0:	df000817 	ldw	fp,32(sp)
  808ad4:	ddc00717 	ldw	r23,28(sp)
  808ad8:	dd800617 	ldw	r22,24(sp)
  808adc:	dd400517 	ldw	r21,20(sp)
  808ae0:	dd000417 	ldw	r20,16(sp)
  808ae4:	dcc00317 	ldw	r19,12(sp)
  808ae8:	dc800217 	ldw	r18,8(sp)
  808aec:	dc400117 	ldw	r17,4(sp)
  808af0:	dc000017 	ldw	r16,0(sp)
  808af4:	dec00a04 	addi	sp,sp,40
  808af8:	f800283a 	ret
  808afc:	017fff04 	movi	r5,-4
  808b00:	414a703a 	and	r5,r8,r5
  808b04:	814d883a 	add	r6,r16,r5
  808b08:	30c01f16 	blt	r6,r3,808b88 <_realloc_r+0x22c>
  808b0c:	20800317 	ldw	r2,12(r4)
  808b10:	20c00217 	ldw	r3,8(r4)
  808b14:	a825883a 	mov	r18,r21
  808b18:	3021883a 	mov	r16,r6
  808b1c:	18800315 	stw	r2,12(r3)
  808b20:	10c00215 	stw	r3,8(r2)
  808b24:	003fdb06 	br	808a94 <__alt_mem_epcs_flash_controller_0+0xff7ffa94>
  808b28:	00800304 	movi	r2,12
  808b2c:	a0800015 	stw	r2,0(r20)
  808b30:	0005883a 	mov	r2,zero
  808b34:	003fe506 	br	808acc <__alt_mem_epcs_flash_controller_0+0xff7ffacc>
  808b38:	98c00117 	ldw	r3,4(r19)
  808b3c:	9c4b883a 	add	r5,r19,r17
  808b40:	11000054 	ori	r4,r2,1
  808b44:	18c0004c 	andi	r3,r3,1
  808b48:	1c62b03a 	or	r17,r3,r17
  808b4c:	9c400115 	stw	r17,4(r19)
  808b50:	29000115 	stw	r4,4(r5)
  808b54:	2885883a 	add	r2,r5,r2
  808b58:	10c00117 	ldw	r3,4(r2)
  808b5c:	29400204 	addi	r5,r5,8
  808b60:	a009883a 	mov	r4,r20
  808b64:	18c00054 	ori	r3,r3,1
  808b68:	10c00115 	stw	r3,4(r2)
  808b6c:	0801bd40 	call	801bd4 <_free_r>
  808b70:	003fd306 	br	808ac0 <__alt_mem_epcs_flash_controller_0+0xff7ffac0>
  808b74:	017fff04 	movi	r5,-4
  808b78:	414a703a 	and	r5,r8,r5
  808b7c:	89800404 	addi	r6,r17,16
  808b80:	8151883a 	add	r8,r16,r5
  808b84:	4180590e 	bge	r8,r6,808cec <_realloc_r+0x390>
  808b88:	1080004c 	andi	r2,r2,1
  808b8c:	103f9e1e 	bne	r2,zero,808a08 <__alt_mem_epcs_flash_controller_0+0xff7ffa08>
  808b90:	adbffe17 	ldw	r22,-8(r21)
  808b94:	00bfff04 	movi	r2,-4
  808b98:	9dadc83a 	sub	r22,r19,r22
  808b9c:	b1800117 	ldw	r6,4(r22)
  808ba0:	3084703a 	and	r2,r6,r2
  808ba4:	20002026 	beq	r4,zero,808c28 <_realloc_r+0x2cc>
  808ba8:	80af883a 	add	r23,r16,r2
  808bac:	b96f883a 	add	r23,r23,r5
  808bb0:	21c05f26 	beq	r4,r7,808d30 <_realloc_r+0x3d4>
  808bb4:	b8c01c16 	blt	r23,r3,808c28 <_realloc_r+0x2cc>
  808bb8:	20800317 	ldw	r2,12(r4)
  808bbc:	20c00217 	ldw	r3,8(r4)
  808bc0:	81bfff04 	addi	r6,r16,-4
  808bc4:	01000904 	movi	r4,36
  808bc8:	18800315 	stw	r2,12(r3)
  808bcc:	10c00215 	stw	r3,8(r2)
  808bd0:	b0c00217 	ldw	r3,8(r22)
  808bd4:	b0800317 	ldw	r2,12(r22)
  808bd8:	b4800204 	addi	r18,r22,8
  808bdc:	18800315 	stw	r2,12(r3)
  808be0:	10c00215 	stw	r3,8(r2)
  808be4:	21801b36 	bltu	r4,r6,808c54 <_realloc_r+0x2f8>
  808be8:	008004c4 	movi	r2,19
  808bec:	1180352e 	bgeu	r2,r6,808cc4 <_realloc_r+0x368>
  808bf0:	a8800017 	ldw	r2,0(r21)
  808bf4:	b0800215 	stw	r2,8(r22)
  808bf8:	a8800117 	ldw	r2,4(r21)
  808bfc:	b0800315 	stw	r2,12(r22)
  808c00:	008006c4 	movi	r2,27
  808c04:	11807f36 	bltu	r2,r6,808e04 <_realloc_r+0x4a8>
  808c08:	b0800404 	addi	r2,r22,16
  808c0c:	ad400204 	addi	r21,r21,8
  808c10:	00002d06 	br	808cc8 <_realloc_r+0x36c>
  808c14:	adbffe17 	ldw	r22,-8(r21)
  808c18:	00bfff04 	movi	r2,-4
  808c1c:	9dadc83a 	sub	r22,r19,r22
  808c20:	b1000117 	ldw	r4,4(r22)
  808c24:	2084703a 	and	r2,r4,r2
  808c28:	b03f7726 	beq	r22,zero,808a08 <__alt_mem_epcs_flash_controller_0+0xff7ffa08>
  808c2c:	80af883a 	add	r23,r16,r2
  808c30:	b8ff7516 	blt	r23,r3,808a08 <__alt_mem_epcs_flash_controller_0+0xff7ffa08>
  808c34:	b0800317 	ldw	r2,12(r22)
  808c38:	b0c00217 	ldw	r3,8(r22)
  808c3c:	81bfff04 	addi	r6,r16,-4
  808c40:	01000904 	movi	r4,36
  808c44:	18800315 	stw	r2,12(r3)
  808c48:	10c00215 	stw	r3,8(r2)
  808c4c:	b4800204 	addi	r18,r22,8
  808c50:	21bfe52e 	bgeu	r4,r6,808be8 <__alt_mem_epcs_flash_controller_0+0xff7ffbe8>
  808c54:	a80b883a 	mov	r5,r21
  808c58:	9009883a 	mov	r4,r18
  808c5c:	08075800 	call	807580 <memmove>
  808c60:	b821883a 	mov	r16,r23
  808c64:	b027883a 	mov	r19,r22
  808c68:	003f8a06 	br	808a94 <__alt_mem_epcs_flash_controller_0+0xff7ffa94>
  808c6c:	300b883a 	mov	r5,r6
  808c70:	dfc00917 	ldw	ra,36(sp)
  808c74:	df000817 	ldw	fp,32(sp)
  808c78:	ddc00717 	ldw	r23,28(sp)
  808c7c:	dd800617 	ldw	r22,24(sp)
  808c80:	dd400517 	ldw	r21,20(sp)
  808c84:	dd000417 	ldw	r20,16(sp)
  808c88:	dcc00317 	ldw	r19,12(sp)
  808c8c:	dc800217 	ldw	r18,8(sp)
  808c90:	dc400117 	ldw	r17,4(sp)
  808c94:	dc000017 	ldw	r16,0(sp)
  808c98:	dec00a04 	addi	sp,sp,40
  808c9c:	080206c1 	jmpi	80206c <_malloc_r>
  808ca0:	a8c00017 	ldw	r3,0(r21)
  808ca4:	90c00015 	stw	r3,0(r18)
  808ca8:	a8c00117 	ldw	r3,4(r21)
  808cac:	90c00115 	stw	r3,4(r18)
  808cb0:	00c006c4 	movi	r3,27
  808cb4:	19804536 	bltu	r3,r6,808dcc <_realloc_r+0x470>
  808cb8:	90800204 	addi	r2,r18,8
  808cbc:	a8c00204 	addi	r3,r21,8
  808cc0:	003f6306 	br	808a50 <__alt_mem_epcs_flash_controller_0+0xff7ffa50>
  808cc4:	9005883a 	mov	r2,r18
  808cc8:	a8c00017 	ldw	r3,0(r21)
  808ccc:	b821883a 	mov	r16,r23
  808cd0:	b027883a 	mov	r19,r22
  808cd4:	10c00015 	stw	r3,0(r2)
  808cd8:	a8c00117 	ldw	r3,4(r21)
  808cdc:	10c00115 	stw	r3,4(r2)
  808ce0:	a8c00217 	ldw	r3,8(r21)
  808ce4:	10c00215 	stw	r3,8(r2)
  808ce8:	003f6a06 	br	808a94 <__alt_mem_epcs_flash_controller_0+0xff7ffa94>
  808cec:	9c67883a 	add	r19,r19,r17
  808cf0:	4445c83a 	sub	r2,r8,r17
  808cf4:	e4c00215 	stw	r19,8(fp)
  808cf8:	10800054 	ori	r2,r2,1
  808cfc:	98800115 	stw	r2,4(r19)
  808d00:	a8bfff17 	ldw	r2,-4(r21)
  808d04:	a009883a 	mov	r4,r20
  808d08:	1080004c 	andi	r2,r2,1
  808d0c:	1462b03a 	or	r17,r2,r17
  808d10:	ac7fff15 	stw	r17,-4(r21)
  808d14:	080efec0 	call	80efec <__malloc_unlock>
  808d18:	a805883a 	mov	r2,r21
  808d1c:	003f6b06 	br	808acc <__alt_mem_epcs_flash_controller_0+0xff7ffacc>
  808d20:	a80b883a 	mov	r5,r21
  808d24:	9009883a 	mov	r4,r18
  808d28:	08075800 	call	807580 <memmove>
  808d2c:	003f4e06 	br	808a68 <__alt_mem_epcs_flash_controller_0+0xff7ffa68>
  808d30:	89000404 	addi	r4,r17,16
  808d34:	b93fbc16 	blt	r23,r4,808c28 <__alt_mem_epcs_flash_controller_0+0xff7ffc28>
  808d38:	b0800317 	ldw	r2,12(r22)
  808d3c:	b0c00217 	ldw	r3,8(r22)
  808d40:	81bfff04 	addi	r6,r16,-4
  808d44:	01000904 	movi	r4,36
  808d48:	18800315 	stw	r2,12(r3)
  808d4c:	10c00215 	stw	r3,8(r2)
  808d50:	b4800204 	addi	r18,r22,8
  808d54:	21804336 	bltu	r4,r6,808e64 <_realloc_r+0x508>
  808d58:	008004c4 	movi	r2,19
  808d5c:	11803f2e 	bgeu	r2,r6,808e5c <_realloc_r+0x500>
  808d60:	a8800017 	ldw	r2,0(r21)
  808d64:	b0800215 	stw	r2,8(r22)
  808d68:	a8800117 	ldw	r2,4(r21)
  808d6c:	b0800315 	stw	r2,12(r22)
  808d70:	008006c4 	movi	r2,27
  808d74:	11803f36 	bltu	r2,r6,808e74 <_realloc_r+0x518>
  808d78:	b0800404 	addi	r2,r22,16
  808d7c:	ad400204 	addi	r21,r21,8
  808d80:	a8c00017 	ldw	r3,0(r21)
  808d84:	10c00015 	stw	r3,0(r2)
  808d88:	a8c00117 	ldw	r3,4(r21)
  808d8c:	10c00115 	stw	r3,4(r2)
  808d90:	a8c00217 	ldw	r3,8(r21)
  808d94:	10c00215 	stw	r3,8(r2)
  808d98:	b447883a 	add	r3,r22,r17
  808d9c:	bc45c83a 	sub	r2,r23,r17
  808da0:	e0c00215 	stw	r3,8(fp)
  808da4:	10800054 	ori	r2,r2,1
  808da8:	18800115 	stw	r2,4(r3)
  808dac:	b0800117 	ldw	r2,4(r22)
  808db0:	a009883a 	mov	r4,r20
  808db4:	1080004c 	andi	r2,r2,1
  808db8:	1462b03a 	or	r17,r2,r17
  808dbc:	b4400115 	stw	r17,4(r22)
  808dc0:	080efec0 	call	80efec <__malloc_unlock>
  808dc4:	9005883a 	mov	r2,r18
  808dc8:	003f4006 	br	808acc <__alt_mem_epcs_flash_controller_0+0xff7ffacc>
  808dcc:	a8c00217 	ldw	r3,8(r21)
  808dd0:	90c00215 	stw	r3,8(r18)
  808dd4:	a8c00317 	ldw	r3,12(r21)
  808dd8:	90c00315 	stw	r3,12(r18)
  808ddc:	30801126 	beq	r6,r2,808e24 <_realloc_r+0x4c8>
  808de0:	90800404 	addi	r2,r18,16
  808de4:	a8c00404 	addi	r3,r21,16
  808de8:	003f1906 	br	808a50 <__alt_mem_epcs_flash_controller_0+0xff7ffa50>
  808dec:	90ffff17 	ldw	r3,-4(r18)
  808df0:	00bfff04 	movi	r2,-4
  808df4:	a825883a 	mov	r18,r21
  808df8:	1884703a 	and	r2,r3,r2
  808dfc:	80a1883a 	add	r16,r16,r2
  808e00:	003f2406 	br	808a94 <__alt_mem_epcs_flash_controller_0+0xff7ffa94>
  808e04:	a8800217 	ldw	r2,8(r21)
  808e08:	b0800415 	stw	r2,16(r22)
  808e0c:	a8800317 	ldw	r2,12(r21)
  808e10:	b0800515 	stw	r2,20(r22)
  808e14:	31000a26 	beq	r6,r4,808e40 <_realloc_r+0x4e4>
  808e18:	b0800604 	addi	r2,r22,24
  808e1c:	ad400404 	addi	r21,r21,16
  808e20:	003fa906 	br	808cc8 <__alt_mem_epcs_flash_controller_0+0xff7ffcc8>
  808e24:	a9000417 	ldw	r4,16(r21)
  808e28:	90800604 	addi	r2,r18,24
  808e2c:	a8c00604 	addi	r3,r21,24
  808e30:	91000415 	stw	r4,16(r18)
  808e34:	a9000517 	ldw	r4,20(r21)
  808e38:	91000515 	stw	r4,20(r18)
  808e3c:	003f0406 	br	808a50 <__alt_mem_epcs_flash_controller_0+0xff7ffa50>
  808e40:	a8c00417 	ldw	r3,16(r21)
  808e44:	ad400604 	addi	r21,r21,24
  808e48:	b0800804 	addi	r2,r22,32
  808e4c:	b0c00615 	stw	r3,24(r22)
  808e50:	a8ffff17 	ldw	r3,-4(r21)
  808e54:	b0c00715 	stw	r3,28(r22)
  808e58:	003f9b06 	br	808cc8 <__alt_mem_epcs_flash_controller_0+0xff7ffcc8>
  808e5c:	9005883a 	mov	r2,r18
  808e60:	003fc706 	br	808d80 <__alt_mem_epcs_flash_controller_0+0xff7ffd80>
  808e64:	a80b883a 	mov	r5,r21
  808e68:	9009883a 	mov	r4,r18
  808e6c:	08075800 	call	807580 <memmove>
  808e70:	003fc906 	br	808d98 <__alt_mem_epcs_flash_controller_0+0xff7ffd98>
  808e74:	a8800217 	ldw	r2,8(r21)
  808e78:	b0800415 	stw	r2,16(r22)
  808e7c:	a8800317 	ldw	r2,12(r21)
  808e80:	b0800515 	stw	r2,20(r22)
  808e84:	31000726 	beq	r6,r4,808ea4 <_realloc_r+0x548>
  808e88:	b0800604 	addi	r2,r22,24
  808e8c:	ad400404 	addi	r21,r21,16
  808e90:	003fbb06 	br	808d80 <__alt_mem_epcs_flash_controller_0+0xff7ffd80>
  808e94:	a009883a 	mov	r4,r20
  808e98:	080efec0 	call	80efec <__malloc_unlock>
  808e9c:	0005883a 	mov	r2,zero
  808ea0:	003f0a06 	br	808acc <__alt_mem_epcs_flash_controller_0+0xff7ffacc>
  808ea4:	a8c00417 	ldw	r3,16(r21)
  808ea8:	ad400604 	addi	r21,r21,24
  808eac:	b0800804 	addi	r2,r22,32
  808eb0:	b0c00615 	stw	r3,24(r22)
  808eb4:	a8ffff17 	ldw	r3,-4(r21)
  808eb8:	b0c00715 	stw	r3,28(r22)
  808ebc:	003fb006 	br	808d80 <__alt_mem_epcs_flash_controller_0+0xff7ffd80>

00808ec0 <__fpclassifyd>:
  808ec0:	00a00034 	movhi	r2,32768
  808ec4:	10bfffc4 	addi	r2,r2,-1
  808ec8:	2884703a 	and	r2,r5,r2
  808ecc:	10000726 	beq	r2,zero,808eec <__fpclassifyd+0x2c>
  808ed0:	00fffc34 	movhi	r3,65520
  808ed4:	019ff834 	movhi	r6,32736
  808ed8:	28c7883a 	add	r3,r5,r3
  808edc:	31bfffc4 	addi	r6,r6,-1
  808ee0:	30c00536 	bltu	r6,r3,808ef8 <__fpclassifyd+0x38>
  808ee4:	00800104 	movi	r2,4
  808ee8:	f800283a 	ret
  808eec:	2000021e 	bne	r4,zero,808ef8 <__fpclassifyd+0x38>
  808ef0:	00800084 	movi	r2,2
  808ef4:	f800283a 	ret
  808ef8:	00dffc34 	movhi	r3,32752
  808efc:	019ff834 	movhi	r6,32736
  808f00:	28cb883a 	add	r5,r5,r3
  808f04:	31bfffc4 	addi	r6,r6,-1
  808f08:	317ff62e 	bgeu	r6,r5,808ee4 <__alt_mem_epcs_flash_controller_0+0xff7ffee4>
  808f0c:	01400434 	movhi	r5,16
  808f10:	297fffc4 	addi	r5,r5,-1
  808f14:	28800236 	bltu	r5,r2,808f20 <__fpclassifyd+0x60>
  808f18:	008000c4 	movi	r2,3
  808f1c:	f800283a 	ret
  808f20:	10c00226 	beq	r2,r3,808f2c <__fpclassifyd+0x6c>
  808f24:	0005883a 	mov	r2,zero
  808f28:	f800283a 	ret
  808f2c:	2005003a 	cmpeq	r2,r4,zero
  808f30:	f800283a 	ret

00808f34 <strcmp>:
  808f34:	2144b03a 	or	r2,r4,r5
  808f38:	108000cc 	andi	r2,r2,3
  808f3c:	1000171e 	bne	r2,zero,808f9c <strcmp+0x68>
  808f40:	20800017 	ldw	r2,0(r4)
  808f44:	28c00017 	ldw	r3,0(r5)
  808f48:	10c0141e 	bne	r2,r3,808f9c <strcmp+0x68>
  808f4c:	027fbff4 	movhi	r9,65279
  808f50:	4a7fbfc4 	addi	r9,r9,-257
  808f54:	0086303a 	nor	r3,zero,r2
  808f58:	02202074 	movhi	r8,32897
  808f5c:	1245883a 	add	r2,r2,r9
  808f60:	42202004 	addi	r8,r8,-32640
  808f64:	10c4703a 	and	r2,r2,r3
  808f68:	1204703a 	and	r2,r2,r8
  808f6c:	10000226 	beq	r2,zero,808f78 <strcmp+0x44>
  808f70:	00002306 	br	809000 <strcmp+0xcc>
  808f74:	1000221e 	bne	r2,zero,809000 <strcmp+0xcc>
  808f78:	21000104 	addi	r4,r4,4
  808f7c:	20c00017 	ldw	r3,0(r4)
  808f80:	29400104 	addi	r5,r5,4
  808f84:	29800017 	ldw	r6,0(r5)
  808f88:	1a4f883a 	add	r7,r3,r9
  808f8c:	00c4303a 	nor	r2,zero,r3
  808f90:	3884703a 	and	r2,r7,r2
  808f94:	1204703a 	and	r2,r2,r8
  808f98:	19bff626 	beq	r3,r6,808f74 <__alt_mem_epcs_flash_controller_0+0xff7fff74>
  808f9c:	20800003 	ldbu	r2,0(r4)
  808fa0:	10c03fcc 	andi	r3,r2,255
  808fa4:	18c0201c 	xori	r3,r3,128
  808fa8:	18ffe004 	addi	r3,r3,-128
  808fac:	18000c26 	beq	r3,zero,808fe0 <strcmp+0xac>
  808fb0:	29800007 	ldb	r6,0(r5)
  808fb4:	19800326 	beq	r3,r6,808fc4 <strcmp+0x90>
  808fb8:	00001306 	br	809008 <strcmp+0xd4>
  808fbc:	29800007 	ldb	r6,0(r5)
  808fc0:	11800b1e 	bne	r2,r6,808ff0 <strcmp+0xbc>
  808fc4:	21000044 	addi	r4,r4,1
  808fc8:	20c00003 	ldbu	r3,0(r4)
  808fcc:	29400044 	addi	r5,r5,1
  808fd0:	18803fcc 	andi	r2,r3,255
  808fd4:	1080201c 	xori	r2,r2,128
  808fd8:	10bfe004 	addi	r2,r2,-128
  808fdc:	103ff71e 	bne	r2,zero,808fbc <__alt_mem_epcs_flash_controller_0+0xff7fffbc>
  808fe0:	0007883a 	mov	r3,zero
  808fe4:	28800003 	ldbu	r2,0(r5)
  808fe8:	1885c83a 	sub	r2,r3,r2
  808fec:	f800283a 	ret
  808ff0:	28800003 	ldbu	r2,0(r5)
  808ff4:	18c03fcc 	andi	r3,r3,255
  808ff8:	1885c83a 	sub	r2,r3,r2
  808ffc:	f800283a 	ret
  809000:	0005883a 	mov	r2,zero
  809004:	f800283a 	ret
  809008:	10c03fcc 	andi	r3,r2,255
  80900c:	003ff506 	br	808fe4 <__alt_mem_epcs_flash_controller_0+0xff7fffe4>

00809010 <__sprint_r.part.0>:
  809010:	28801917 	ldw	r2,100(r5)
  809014:	defff604 	addi	sp,sp,-40
  809018:	dd400515 	stw	r21,20(sp)
  80901c:	dfc00915 	stw	ra,36(sp)
  809020:	df000815 	stw	fp,32(sp)
  809024:	ddc00715 	stw	r23,28(sp)
  809028:	dd800615 	stw	r22,24(sp)
  80902c:	dd000415 	stw	r20,16(sp)
  809030:	dcc00315 	stw	r19,12(sp)
  809034:	dc800215 	stw	r18,8(sp)
  809038:	dc400115 	stw	r17,4(sp)
  80903c:	dc000015 	stw	r16,0(sp)
  809040:	1088000c 	andi	r2,r2,8192
  809044:	302b883a 	mov	r21,r6
  809048:	10002e26 	beq	r2,zero,809104 <__sprint_r.part.0+0xf4>
  80904c:	30800217 	ldw	r2,8(r6)
  809050:	35800017 	ldw	r22,0(r6)
  809054:	10002926 	beq	r2,zero,8090fc <__sprint_r.part.0+0xec>
  809058:	2827883a 	mov	r19,r5
  80905c:	2029883a 	mov	r20,r4
  809060:	b5c00104 	addi	r23,r22,4
  809064:	04bfffc4 	movi	r18,-1
  809068:	bc400017 	ldw	r17,0(r23)
  80906c:	b4000017 	ldw	r16,0(r22)
  809070:	0039883a 	mov	fp,zero
  809074:	8822d0ba 	srli	r17,r17,2
  809078:	8800031e 	bne	r17,zero,809088 <__sprint_r.part.0+0x78>
  80907c:	00001806 	br	8090e0 <__sprint_r.part.0+0xd0>
  809080:	84000104 	addi	r16,r16,4
  809084:	8f001526 	beq	r17,fp,8090dc <__sprint_r.part.0+0xcc>
  809088:	81400017 	ldw	r5,0(r16)
  80908c:	980d883a 	mov	r6,r19
  809090:	a009883a 	mov	r4,r20
  809094:	080aaa00 	call	80aaa0 <_fputwc_r>
  809098:	e7000044 	addi	fp,fp,1
  80909c:	14bff81e 	bne	r2,r18,809080 <__alt_mem_epcs_flash_controller_0+0xff800080>
  8090a0:	9005883a 	mov	r2,r18
  8090a4:	a8000215 	stw	zero,8(r21)
  8090a8:	a8000115 	stw	zero,4(r21)
  8090ac:	dfc00917 	ldw	ra,36(sp)
  8090b0:	df000817 	ldw	fp,32(sp)
  8090b4:	ddc00717 	ldw	r23,28(sp)
  8090b8:	dd800617 	ldw	r22,24(sp)
  8090bc:	dd400517 	ldw	r21,20(sp)
  8090c0:	dd000417 	ldw	r20,16(sp)
  8090c4:	dcc00317 	ldw	r19,12(sp)
  8090c8:	dc800217 	ldw	r18,8(sp)
  8090cc:	dc400117 	ldw	r17,4(sp)
  8090d0:	dc000017 	ldw	r16,0(sp)
  8090d4:	dec00a04 	addi	sp,sp,40
  8090d8:	f800283a 	ret
  8090dc:	a8800217 	ldw	r2,8(r21)
  8090e0:	8c63883a 	add	r17,r17,r17
  8090e4:	8c63883a 	add	r17,r17,r17
  8090e8:	1445c83a 	sub	r2,r2,r17
  8090ec:	a8800215 	stw	r2,8(r21)
  8090f0:	b5800204 	addi	r22,r22,8
  8090f4:	bdc00204 	addi	r23,r23,8
  8090f8:	103fdb1e 	bne	r2,zero,809068 <__alt_mem_epcs_flash_controller_0+0xff800068>
  8090fc:	0005883a 	mov	r2,zero
  809100:	003fe806 	br	8090a4 <__alt_mem_epcs_flash_controller_0+0xff8000a4>
  809104:	0806b940 	call	806b94 <__sfvwrite_r>
  809108:	003fe606 	br	8090a4 <__alt_mem_epcs_flash_controller_0+0xff8000a4>

0080910c <__sprint_r>:
  80910c:	30c00217 	ldw	r3,8(r6)
  809110:	18000126 	beq	r3,zero,809118 <__sprint_r+0xc>
  809114:	08090101 	jmpi	809010 <__sprint_r.part.0>
  809118:	30000115 	stw	zero,4(r6)
  80911c:	0005883a 	mov	r2,zero
  809120:	f800283a 	ret

00809124 <___vfiprintf_internal_r>:
  809124:	deffca04 	addi	sp,sp,-216
  809128:	dd403115 	stw	r21,196(sp)
  80912c:	dfc03515 	stw	ra,212(sp)
  809130:	df003415 	stw	fp,208(sp)
  809134:	ddc03315 	stw	r23,204(sp)
  809138:	dd803215 	stw	r22,200(sp)
  80913c:	dd003015 	stw	r20,192(sp)
  809140:	dcc02f15 	stw	r19,188(sp)
  809144:	dc802e15 	stw	r18,184(sp)
  809148:	dc402d15 	stw	r17,180(sp)
  80914c:	dc002c15 	stw	r16,176(sp)
  809150:	d9002115 	stw	r4,132(sp)
  809154:	d9402015 	stw	r5,128(sp)
  809158:	d9c02215 	stw	r7,136(sp)
  80915c:	302b883a 	mov	r21,r6
  809160:	20000226 	beq	r4,zero,80916c <___vfiprintf_internal_r+0x48>
  809164:	20800e17 	ldw	r2,56(r4)
  809168:	1000cf26 	beq	r2,zero,8094a8 <___vfiprintf_internal_r+0x384>
  80916c:	d8c02017 	ldw	r3,128(sp)
  809170:	1880030b 	ldhu	r2,12(r3)
  809174:	10c8000c 	andi	r3,r2,8192
  809178:	1800071e 	bne	r3,zero,809198 <___vfiprintf_internal_r+0x74>
  80917c:	d9402017 	ldw	r5,128(sp)
  809180:	00f7ffc4 	movi	r3,-8193
  809184:	10880014 	ori	r2,r2,8192
  809188:	29001917 	ldw	r4,100(r5)
  80918c:	2880030d 	sth	r2,12(r5)
  809190:	20c6703a 	and	r3,r4,r3
  809194:	28c01915 	stw	r3,100(r5)
  809198:	10c0020c 	andi	r3,r2,8
  80919c:	1800a526 	beq	r3,zero,809434 <___vfiprintf_internal_r+0x310>
  8091a0:	d9002017 	ldw	r4,128(sp)
  8091a4:	20c00417 	ldw	r3,16(r4)
  8091a8:	1800a226 	beq	r3,zero,809434 <___vfiprintf_internal_r+0x310>
  8091ac:	1080068c 	andi	r2,r2,26
  8091b0:	00c00284 	movi	r3,10
  8091b4:	10c0a826 	beq	r2,r3,809458 <___vfiprintf_internal_r+0x334>
  8091b8:	d9001a04 	addi	r4,sp,104
  8091bc:	d94019c4 	addi	r5,sp,103
  8091c0:	048020b4 	movhi	r18,130
  8091c4:	2145c83a 	sub	r2,r4,r5
  8091c8:	94aff904 	addi	r18,r18,-16412
  8091cc:	d9001e15 	stw	r4,120(sp)
  8091d0:	d9401f15 	stw	r5,124(sp)
  8091d4:	dec01a15 	stw	sp,104(sp)
  8091d8:	d8001c15 	stw	zero,112(sp)
  8091dc:	d8001b15 	stw	zero,108(sp)
  8091e0:	d811883a 	mov	r8,sp
  8091e4:	d8002615 	stw	zero,152(sp)
  8091e8:	d8002415 	stw	zero,144(sp)
  8091ec:	d8802815 	stw	r2,160(sp)
  8091f0:	a82d883a 	mov	r22,r21
  8091f4:	b0800007 	ldb	r2,0(r22)
  8091f8:	10040d26 	beq	r2,zero,80a230 <___vfiprintf_internal_r+0x110c>
  8091fc:	00c00944 	movi	r3,37
  809200:	b029883a 	mov	r20,r22
  809204:	10c0021e 	bne	r2,r3,809210 <___vfiprintf_internal_r+0xec>
  809208:	00001606 	br	809264 <___vfiprintf_internal_r+0x140>
  80920c:	10c00326 	beq	r2,r3,80921c <___vfiprintf_internal_r+0xf8>
  809210:	a5000044 	addi	r20,r20,1
  809214:	a0800007 	ldb	r2,0(r20)
  809218:	103ffc1e 	bne	r2,zero,80920c <__alt_mem_epcs_flash_controller_0+0xff80020c>
  80921c:	a5a1c83a 	sub	r16,r20,r22
  809220:	80001026 	beq	r16,zero,809264 <___vfiprintf_internal_r+0x140>
  809224:	d8c01c17 	ldw	r3,112(sp)
  809228:	d8801b17 	ldw	r2,108(sp)
  80922c:	45800015 	stw	r22,0(r8)
  809230:	80c7883a 	add	r3,r16,r3
  809234:	10800044 	addi	r2,r2,1
  809238:	44000115 	stw	r16,4(r8)
  80923c:	d8c01c15 	stw	r3,112(sp)
  809240:	d8801b15 	stw	r2,108(sp)
  809244:	010001c4 	movi	r4,7
  809248:	2080750e 	bge	r4,r2,809420 <___vfiprintf_internal_r+0x2fc>
  80924c:	1803951e 	bne	r3,zero,80a0a4 <___vfiprintf_internal_r+0xf80>
  809250:	d8c02417 	ldw	r3,144(sp)
  809254:	d8001b15 	stw	zero,108(sp)
  809258:	d811883a 	mov	r8,sp
  80925c:	1c07883a 	add	r3,r3,r16
  809260:	d8c02415 	stw	r3,144(sp)
  809264:	a0800007 	ldb	r2,0(r20)
  809268:	1002e026 	beq	r2,zero,809dec <___vfiprintf_internal_r+0xcc8>
  80926c:	a5800044 	addi	r22,r20,1
  809270:	a0c00047 	ldb	r3,1(r20)
  809274:	d8001d85 	stb	zero,118(sp)
  809278:	0027883a 	mov	r19,zero
  80927c:	d8002305 	stb	zero,140(sp)
  809280:	043fffc4 	movi	r16,-1
  809284:	d8002515 	stw	zero,148(sp)
  809288:	0023883a 	mov	r17,zero
  80928c:	05001604 	movi	r20,88
  809290:	05400244 	movi	r21,9
  809294:	402f883a 	mov	r23,r8
  809298:	b5800044 	addi	r22,r22,1
  80929c:	18bff804 	addi	r2,r3,-32
  8092a0:	a0827736 	bltu	r20,r2,809c80 <___vfiprintf_internal_r+0xb5c>
  8092a4:	100490ba 	slli	r2,r2,2
  8092a8:	01002074 	movhi	r4,129
  8092ac:	2124af04 	addi	r4,r4,-27972
  8092b0:	1105883a 	add	r2,r2,r4
  8092b4:	10800017 	ldw	r2,0(r2)
  8092b8:	1000683a 	jmp	r2
  8092bc:	00809980 	call	80998 <OSCtxSw_SWITCH_PC+0x80958>
  8092c0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092c4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092c8:	0080999c 	xori	r2,zero,614
  8092cc:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092d0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092d4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092d8:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092dc:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092e0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092e4:	00809ba4 	muli	r2,zero,622
  8092e8:	00809bc8 	cmpgei	r2,zero,623
  8092ec:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092f0:	008094c0 	call	8094c <OSCtxSw_SWITCH_PC+0x8090c>
  8092f4:	00809bdc 	xori	r2,zero,623
  8092f8:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8092fc:	008099a8 	cmpgeui	r2,zero,614
  809300:	008099b4 	movhi	r2,614
  809304:	008099b4 	movhi	r2,614
  809308:	008099b4 	movhi	r2,614
  80930c:	008099b4 	movhi	r2,614
  809310:	008099b4 	movhi	r2,614
  809314:	008099b4 	movhi	r2,614
  809318:	008099b4 	movhi	r2,614
  80931c:	008099b4 	movhi	r2,614
  809320:	008099b4 	movhi	r2,614
  809324:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809328:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80932c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809330:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809334:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809338:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80933c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809340:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809344:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809348:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80934c:	008099f4 	movhi	r2,615
  809350:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809354:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809358:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80935c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809360:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809364:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809368:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80936c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809370:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809374:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809378:	00809a30 	cmpltui	r2,zero,616
  80937c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809380:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809384:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809388:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80938c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809390:	00809a8c 	andi	r2,zero,618
  809394:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809398:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80939c:	00809b00 	call	809b0 <OSCtxSw_SWITCH_PC+0x80970>
  8093a0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093a4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093a8:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093ac:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093b0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093b4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093b8:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093bc:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093c0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093c4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093c8:	008098a8 	cmpgeui	r2,zero,610
  8093cc:	008098d8 	cmpnei	r2,zero,611
  8093d0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093d4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093d8:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093dc:	00809c28 	cmpgeui	r2,zero,624
  8093e0:	008098d8 	cmpnei	r2,zero,611
  8093e4:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093e8:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093ec:	00809780 	call	80978 <OSCtxSw_SWITCH_PC+0x80938>
  8093f0:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  8093f4:	00809794 	movui	r2,606
  8093f8:	008097cc 	andi	r2,zero,607
  8093fc:	008094cc 	andi	r2,zero,595
  809400:	00809774 	movhi	r2,605
  809404:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809408:	00809b40 	call	809b4 <OSCtxSw_SWITCH_PC+0x80974>
  80940c:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809410:	00809b8c 	andi	r2,zero,622
  809414:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  809418:	00809c80 	call	809c8 <OSCtxSw_SWITCH_PC+0x80988>
  80941c:	00809850 	cmplti	r2,zero,609
  809420:	42000204 	addi	r8,r8,8
  809424:	d8c02417 	ldw	r3,144(sp)
  809428:	1c07883a 	add	r3,r3,r16
  80942c:	d8c02415 	stw	r3,144(sp)
  809430:	003f8c06 	br	809264 <__alt_mem_epcs_flash_controller_0+0xff800264>
  809434:	d9402017 	ldw	r5,128(sp)
  809438:	d9002117 	ldw	r4,132(sp)
  80943c:	080513c0 	call	80513c <__swsetup_r>
  809440:	1003c11e 	bne	r2,zero,80a348 <___vfiprintf_internal_r+0x1224>
  809444:	d9402017 	ldw	r5,128(sp)
  809448:	00c00284 	movi	r3,10
  80944c:	2880030b 	ldhu	r2,12(r5)
  809450:	1080068c 	andi	r2,r2,26
  809454:	10ff581e 	bne	r2,r3,8091b8 <__alt_mem_epcs_flash_controller_0+0xff8001b8>
  809458:	d8c02017 	ldw	r3,128(sp)
  80945c:	1880038f 	ldh	r2,14(r3)
  809460:	103f5516 	blt	r2,zero,8091b8 <__alt_mem_epcs_flash_controller_0+0xff8001b8>
  809464:	d9c02217 	ldw	r7,136(sp)
  809468:	d9002117 	ldw	r4,132(sp)
  80946c:	a80d883a 	mov	r6,r21
  809470:	180b883a 	mov	r5,r3
  809474:	080a64c0 	call	80a64c <__sbprintf>
  809478:	dfc03517 	ldw	ra,212(sp)
  80947c:	df003417 	ldw	fp,208(sp)
  809480:	ddc03317 	ldw	r23,204(sp)
  809484:	dd803217 	ldw	r22,200(sp)
  809488:	dd403117 	ldw	r21,196(sp)
  80948c:	dd003017 	ldw	r20,192(sp)
  809490:	dcc02f17 	ldw	r19,188(sp)
  809494:	dc802e17 	ldw	r18,184(sp)
  809498:	dc402d17 	ldw	r17,180(sp)
  80949c:	dc002c17 	ldw	r16,176(sp)
  8094a0:	dec03604 	addi	sp,sp,216
  8094a4:	f800283a 	ret
  8094a8:	0801a600 	call	801a60 <__sinit>
  8094ac:	003f2f06 	br	80916c <__alt_mem_epcs_flash_controller_0+0xff80016c>
  8094b0:	d8c02517 	ldw	r3,148(sp)
  8094b4:	d8802215 	stw	r2,136(sp)
  8094b8:	00c7c83a 	sub	r3,zero,r3
  8094bc:	d8c02515 	stw	r3,148(sp)
  8094c0:	8c400114 	ori	r17,r17,4
  8094c4:	b0c00007 	ldb	r3,0(r22)
  8094c8:	003f7306 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  8094cc:	00800c04 	movi	r2,48
  8094d0:	d9402217 	ldw	r5,136(sp)
  8094d4:	d8801d05 	stb	r2,116(sp)
  8094d8:	00801e04 	movi	r2,120
  8094dc:	d8801d45 	stb	r2,117(sp)
  8094e0:	d8001d85 	stb	zero,118(sp)
  8094e4:	b811883a 	mov	r8,r23
  8094e8:	28c00104 	addi	r3,r5,4
  8094ec:	2cc00017 	ldw	r19,0(r5)
  8094f0:	0029883a 	mov	r20,zero
  8094f4:	88800094 	ori	r2,r17,2
  8094f8:	80032516 	blt	r16,zero,80a190 <___vfiprintf_internal_r+0x106c>
  8094fc:	00bfdfc4 	movi	r2,-129
  809500:	88a2703a 	and	r17,r17,r2
  809504:	d8c02215 	stw	r3,136(sp)
  809508:	8c400094 	ori	r17,r17,2
  80950c:	98032a1e 	bne	r19,zero,80a1b8 <___vfiprintf_internal_r+0x1094>
  809510:	008020b4 	movhi	r2,130
  809514:	10af9904 	addi	r2,r2,-16796
  809518:	d8802615 	stw	r2,152(sp)
  80951c:	002b883a 	mov	r21,zero
  809520:	8001741e 	bne	r16,zero,809af4 <___vfiprintf_internal_r+0x9d0>
  809524:	0021883a 	mov	r16,zero
  809528:	0029883a 	mov	r20,zero
  80952c:	ddc01a04 	addi	r23,sp,104
  809530:	8027883a 	mov	r19,r16
  809534:	8500010e 	bge	r16,r20,80953c <___vfiprintf_internal_r+0x418>
  809538:	a027883a 	mov	r19,r20
  80953c:	ad403fcc 	andi	r21,r21,255
  809540:	ad40201c 	xori	r21,r21,128
  809544:	ad7fe004 	addi	r21,r21,-128
  809548:	a8000126 	beq	r21,zero,809550 <___vfiprintf_internal_r+0x42c>
  80954c:	9cc00044 	addi	r19,r19,1
  809550:	89c0008c 	andi	r7,r17,2
  809554:	38000126 	beq	r7,zero,80955c <___vfiprintf_internal_r+0x438>
  809558:	9cc00084 	addi	r19,r19,2
  80955c:	88c0210c 	andi	r3,r17,132
  809560:	1801dd1e 	bne	r3,zero,809cd8 <___vfiprintf_internal_r+0xbb4>
  809564:	d9402517 	ldw	r5,148(sp)
  809568:	2cebc83a 	sub	r21,r5,r19
  80956c:	0541da0e 	bge	zero,r21,809cd8 <___vfiprintf_internal_r+0xbb4>
  809570:	07000404 	movi	fp,16
  809574:	d8801c17 	ldw	r2,112(sp)
  809578:	e543be0e 	bge	fp,r21,80a474 <___vfiprintf_internal_r+0x1350>
  80957c:	014020b4 	movhi	r5,130
  809580:	296ffd04 	addi	r5,r5,-16396
  809584:	dc002715 	stw	r16,156(sp)
  809588:	d9801b17 	ldw	r6,108(sp)
  80958c:	a821883a 	mov	r16,r21
  809590:	d9402315 	stw	r5,140(sp)
  809594:	028001c4 	movi	r10,7
  809598:	d9c02915 	stw	r7,164(sp)
  80959c:	182b883a 	mov	r21,r3
  8095a0:	00000506 	br	8095b8 <___vfiprintf_internal_r+0x494>
  8095a4:	31000084 	addi	r4,r6,2
  8095a8:	42000204 	addi	r8,r8,8
  8095ac:	180d883a 	mov	r6,r3
  8095b0:	843ffc04 	addi	r16,r16,-16
  8095b4:	e4000f0e 	bge	fp,r16,8095f4 <___vfiprintf_internal_r+0x4d0>
  8095b8:	010020b4 	movhi	r4,130
  8095bc:	10800404 	addi	r2,r2,16
  8095c0:	30c00044 	addi	r3,r6,1
  8095c4:	212ffd04 	addi	r4,r4,-16396
  8095c8:	41000015 	stw	r4,0(r8)
  8095cc:	47000115 	stw	fp,4(r8)
  8095d0:	d8801c15 	stw	r2,112(sp)
  8095d4:	d8c01b15 	stw	r3,108(sp)
  8095d8:	50fff20e 	bge	r10,r3,8095a4 <__alt_mem_epcs_flash_controller_0+0xff8005a4>
  8095dc:	1001b21e 	bne	r2,zero,809ca8 <___vfiprintf_internal_r+0xb84>
  8095e0:	843ffc04 	addi	r16,r16,-16
  8095e4:	000d883a 	mov	r6,zero
  8095e8:	01000044 	movi	r4,1
  8095ec:	d811883a 	mov	r8,sp
  8095f0:	e43ff116 	blt	fp,r16,8095b8 <__alt_mem_epcs_flash_controller_0+0xff8005b8>
  8095f4:	a807883a 	mov	r3,r21
  8095f8:	d9c02917 	ldw	r7,164(sp)
  8095fc:	802b883a 	mov	r21,r16
  809600:	dc002717 	ldw	r16,156(sp)
  809604:	d9402317 	ldw	r5,140(sp)
  809608:	a885883a 	add	r2,r21,r2
  80960c:	45400115 	stw	r21,4(r8)
  809610:	41400015 	stw	r5,0(r8)
  809614:	d8801c15 	stw	r2,112(sp)
  809618:	d9001b15 	stw	r4,108(sp)
  80961c:	014001c4 	movi	r5,7
  809620:	29026216 	blt	r5,r4,809fac <___vfiprintf_internal_r+0xe88>
  809624:	d9801d87 	ldb	r6,118(sp)
  809628:	42000204 	addi	r8,r8,8
  80962c:	21400044 	addi	r5,r4,1
  809630:	3001ae1e 	bne	r6,zero,809cec <___vfiprintf_internal_r+0xbc8>
  809634:	3801bb26 	beq	r7,zero,809d24 <___vfiprintf_internal_r+0xc00>
  809638:	d9001d04 	addi	r4,sp,116
  80963c:	10800084 	addi	r2,r2,2
  809640:	41000015 	stw	r4,0(r8)
  809644:	01000084 	movi	r4,2
  809648:	41000115 	stw	r4,4(r8)
  80964c:	d8801c15 	stw	r2,112(sp)
  809650:	d9401b15 	stw	r5,108(sp)
  809654:	010001c4 	movi	r4,7
  809658:	2142680e 	bge	r4,r5,809ffc <___vfiprintf_internal_r+0xed8>
  80965c:	1002b11e 	bne	r2,zero,80a124 <___vfiprintf_internal_r+0x1000>
  809660:	01802004 	movi	r6,128
  809664:	01400044 	movi	r5,1
  809668:	0009883a 	mov	r4,zero
  80966c:	d811883a 	mov	r8,sp
  809670:	1981ae1e 	bne	r3,r6,809d2c <___vfiprintf_internal_r+0xc08>
  809674:	d8c02517 	ldw	r3,148(sp)
  809678:	1cf9c83a 	sub	fp,r3,r19
  80967c:	0701ab0e 	bge	zero,fp,809d2c <___vfiprintf_internal_r+0xc08>
  809680:	05400404 	movi	r21,16
  809684:	af03a90e 	bge	r21,fp,80a52c <___vfiprintf_internal_r+0x1408>
  809688:	014020b4 	movhi	r5,130
  80968c:	296ff904 	addi	r5,r5,-16412
  809690:	d9402315 	stw	r5,140(sp)
  809694:	01c001c4 	movi	r7,7
  809698:	00000506 	br	8096b0 <___vfiprintf_internal_r+0x58c>
  80969c:	21800084 	addi	r6,r4,2
  8096a0:	42000204 	addi	r8,r8,8
  8096a4:	1809883a 	mov	r4,r3
  8096a8:	e73ffc04 	addi	fp,fp,-16
  8096ac:	af000d0e 	bge	r21,fp,8096e4 <___vfiprintf_internal_r+0x5c0>
  8096b0:	10800404 	addi	r2,r2,16
  8096b4:	20c00044 	addi	r3,r4,1
  8096b8:	44800015 	stw	r18,0(r8)
  8096bc:	45400115 	stw	r21,4(r8)
  8096c0:	d8801c15 	stw	r2,112(sp)
  8096c4:	d8c01b15 	stw	r3,108(sp)
  8096c8:	38fff40e 	bge	r7,r3,80969c <__alt_mem_epcs_flash_controller_0+0xff80069c>
  8096cc:	10022b1e 	bne	r2,zero,809f7c <___vfiprintf_internal_r+0xe58>
  8096d0:	e73ffc04 	addi	fp,fp,-16
  8096d4:	01800044 	movi	r6,1
  8096d8:	0009883a 	mov	r4,zero
  8096dc:	d811883a 	mov	r8,sp
  8096e0:	af3ff316 	blt	r21,fp,8096b0 <__alt_mem_epcs_flash_controller_0+0xff8006b0>
  8096e4:	d8c02317 	ldw	r3,140(sp)
  8096e8:	1705883a 	add	r2,r2,fp
  8096ec:	47000115 	stw	fp,4(r8)
  8096f0:	40c00015 	stw	r3,0(r8)
  8096f4:	d8801c15 	stw	r2,112(sp)
  8096f8:	d9801b15 	stw	r6,108(sp)
  8096fc:	00c001c4 	movi	r3,7
  809700:	19829416 	blt	r3,r6,80a154 <___vfiprintf_internal_r+0x1030>
  809704:	8521c83a 	sub	r16,r16,r20
  809708:	42000204 	addi	r8,r8,8
  80970c:	31400044 	addi	r5,r6,1
  809710:	3009883a 	mov	r4,r6
  809714:	04018716 	blt	zero,r16,809d34 <___vfiprintf_internal_r+0xc10>
  809718:	a085883a 	add	r2,r20,r2
  80971c:	45c00015 	stw	r23,0(r8)
  809720:	45000115 	stw	r20,4(r8)
  809724:	d8801c15 	stw	r2,112(sp)
  809728:	d9401b15 	stw	r5,108(sp)
  80972c:	00c001c4 	movi	r3,7
  809730:	1941c20e 	bge	r3,r5,809e3c <___vfiprintf_internal_r+0xd18>
  809734:	1002531e 	bne	r2,zero,80a084 <___vfiprintf_internal_r+0xf60>
  809738:	d8001b15 	stw	zero,108(sp)
  80973c:	8c40010c 	andi	r17,r17,4
  809740:	88023226 	beq	r17,zero,80a00c <___vfiprintf_internal_r+0xee8>
  809744:	d9002517 	ldw	r4,148(sp)
  809748:	24e3c83a 	sub	r17,r4,r19
  80974c:	04432916 	blt	zero,r17,80a3f4 <___vfiprintf_internal_r+0x12d0>
  809750:	d8802517 	ldw	r2,148(sp)
  809754:	14c0010e 	bge	r2,r19,80975c <___vfiprintf_internal_r+0x638>
  809758:	9805883a 	mov	r2,r19
  80975c:	d8c02417 	ldw	r3,144(sp)
  809760:	1887883a 	add	r3,r3,r2
  809764:	d8c02415 	stw	r3,144(sp)
  809768:	d8001b15 	stw	zero,108(sp)
  80976c:	d811883a 	mov	r8,sp
  809770:	003ea006 	br	8091f4 <__alt_mem_epcs_flash_controller_0+0xff8001f4>
  809774:	8c400814 	ori	r17,r17,32
  809778:	b0c00007 	ldb	r3,0(r22)
  80977c:	003ec606 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  809780:	b0c00007 	ldb	r3,0(r22)
  809784:	00801b04 	movi	r2,108
  809788:	18832026 	beq	r3,r2,80a40c <___vfiprintf_internal_r+0x12e8>
  80978c:	8c400414 	ori	r17,r17,16
  809790:	003ec106 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  809794:	9cc03fcc 	andi	r19,r19,255
  809798:	b811883a 	mov	r8,r23
  80979c:	9803981e 	bne	r19,zero,80a600 <___vfiprintf_internal_r+0x14dc>
  8097a0:	8880080c 	andi	r2,r17,32
  8097a4:	1002be26 	beq	r2,zero,80a2a0 <___vfiprintf_internal_r+0x117c>
  8097a8:	d9002217 	ldw	r4,136(sp)
  8097ac:	d9402417 	ldw	r5,144(sp)
  8097b0:	20800017 	ldw	r2,0(r4)
  8097b4:	2807d7fa 	srai	r3,r5,31
  8097b8:	21000104 	addi	r4,r4,4
  8097bc:	d9002215 	stw	r4,136(sp)
  8097c0:	11400015 	stw	r5,0(r2)
  8097c4:	10c00115 	stw	r3,4(r2)
  8097c8:	003e8a06 	br	8091f4 <__alt_mem_epcs_flash_controller_0+0xff8001f4>
  8097cc:	9cc03fcc 	andi	r19,r19,255
  8097d0:	b811883a 	mov	r8,r23
  8097d4:	9803871e 	bne	r19,zero,80a5f4 <___vfiprintf_internal_r+0x14d0>
  8097d8:	8880080c 	andi	r2,r17,32
  8097dc:	10009a26 	beq	r2,zero,809a48 <___vfiprintf_internal_r+0x924>
  8097e0:	d9002217 	ldw	r4,136(sp)
  8097e4:	d8001d85 	stb	zero,118(sp)
  8097e8:	20800204 	addi	r2,r4,8
  8097ec:	24c00017 	ldw	r19,0(r4)
  8097f0:	25000117 	ldw	r20,4(r4)
  8097f4:	8002a416 	blt	r16,zero,80a288 <___vfiprintf_internal_r+0x1164>
  8097f8:	013fdfc4 	movi	r4,-129
  8097fc:	9d06b03a 	or	r3,r19,r20
  809800:	d8802215 	stw	r2,136(sp)
  809804:	8922703a 	and	r17,r17,r4
  809808:	18009b26 	beq	r3,zero,809a78 <___vfiprintf_internal_r+0x954>
  80980c:	002b883a 	mov	r21,zero
  809810:	ddc01a04 	addi	r23,sp,104
  809814:	9806d0fa 	srli	r3,r19,3
  809818:	a008977a 	slli	r4,r20,29
  80981c:	a028d0fa 	srli	r20,r20,3
  809820:	9cc001cc 	andi	r19,r19,7
  809824:	98800c04 	addi	r2,r19,48
  809828:	bdffffc4 	addi	r23,r23,-1
  80982c:	20e6b03a 	or	r19,r4,r3
  809830:	b8800005 	stb	r2,0(r23)
  809834:	9d06b03a 	or	r3,r19,r20
  809838:	183ff61e 	bne	r3,zero,809814 <__alt_mem_epcs_flash_controller_0+0xff800814>
  80983c:	88c0004c 	andi	r3,r17,1
  809840:	18021f1e 	bne	r3,zero,80a0c0 <___vfiprintf_internal_r+0xf9c>
  809844:	d9401e17 	ldw	r5,120(sp)
  809848:	2de9c83a 	sub	r20,r5,r23
  80984c:	003f3806 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  809850:	9cc03fcc 	andi	r19,r19,255
  809854:	b811883a 	mov	r8,r23
  809858:	98034f1e 	bne	r19,zero,80a598 <___vfiprintf_internal_r+0x1474>
  80985c:	008020b4 	movhi	r2,130
  809860:	10af9904 	addi	r2,r2,-16796
  809864:	d8802615 	stw	r2,152(sp)
  809868:	8880080c 	andi	r2,r17,32
  80986c:	1000ac26 	beq	r2,zero,809b20 <___vfiprintf_internal_r+0x9fc>
  809870:	d9002217 	ldw	r4,136(sp)
  809874:	24c00017 	ldw	r19,0(r4)
  809878:	25000117 	ldw	r20,4(r4)
  80987c:	21000204 	addi	r4,r4,8
  809880:	d9002215 	stw	r4,136(sp)
  809884:	8880004c 	andi	r2,r17,1
  809888:	1001e726 	beq	r2,zero,80a028 <___vfiprintf_internal_r+0xf04>
  80988c:	9d04b03a 	or	r2,r19,r20
  809890:	10025c1e 	bne	r2,zero,80a204 <___vfiprintf_internal_r+0x10e0>
  809894:	d8001d85 	stb	zero,118(sp)
  809898:	80024416 	blt	r16,zero,80a1ac <___vfiprintf_internal_r+0x1088>
  80989c:	00bfdfc4 	movi	r2,-129
  8098a0:	88a2703a 	and	r17,r17,r2
  8098a4:	003f1d06 	br	80951c <__alt_mem_epcs_flash_controller_0+0xff80051c>
  8098a8:	d8c02217 	ldw	r3,136(sp)
  8098ac:	04c00044 	movi	r19,1
  8098b0:	b811883a 	mov	r8,r23
  8098b4:	18800017 	ldw	r2,0(r3)
  8098b8:	18c00104 	addi	r3,r3,4
  8098bc:	d8001d85 	stb	zero,118(sp)
  8098c0:	d8801005 	stb	r2,64(sp)
  8098c4:	d8c02215 	stw	r3,136(sp)
  8098c8:	9829883a 	mov	r20,r19
  8098cc:	ddc01004 	addi	r23,sp,64
  8098d0:	0021883a 	mov	r16,zero
  8098d4:	003f1e06 	br	809550 <__alt_mem_epcs_flash_controller_0+0xff800550>
  8098d8:	9cc03fcc 	andi	r19,r19,255
  8098dc:	b811883a 	mov	r8,r23
  8098e0:	9803331e 	bne	r19,zero,80a5b0 <___vfiprintf_internal_r+0x148c>
  8098e4:	8880080c 	andi	r2,r17,32
  8098e8:	10004826 	beq	r2,zero,809a0c <___vfiprintf_internal_r+0x8e8>
  8098ec:	d9002217 	ldw	r4,136(sp)
  8098f0:	20800117 	ldw	r2,4(r4)
  8098f4:	24c00017 	ldw	r19,0(r4)
  8098f8:	21000204 	addi	r4,r4,8
  8098fc:	d9002215 	stw	r4,136(sp)
  809900:	1029883a 	mov	r20,r2
  809904:	10024c16 	blt	r2,zero,80a238 <___vfiprintf_internal_r+0x1114>
  809908:	dd401d83 	ldbu	r21,118(sp)
  80990c:	80007116 	blt	r16,zero,809ad4 <___vfiprintf_internal_r+0x9b0>
  809910:	00ffdfc4 	movi	r3,-129
  809914:	9d04b03a 	or	r2,r19,r20
  809918:	88e2703a 	and	r17,r17,r3
  80991c:	1000d126 	beq	r2,zero,809c64 <___vfiprintf_internal_r+0xb40>
  809920:	a0023526 	beq	r20,zero,80a1f8 <___vfiprintf_internal_r+0x10d4>
  809924:	ddc01a04 	addi	r23,sp,104
  809928:	4039883a 	mov	fp,r8
  80992c:	9809883a 	mov	r4,r19
  809930:	a00b883a 	mov	r5,r20
  809934:	01800284 	movi	r6,10
  809938:	000f883a 	mov	r7,zero
  80993c:	080b3d80 	call	80b3d8 <__umoddi3>
  809940:	10800c04 	addi	r2,r2,48
  809944:	bdffffc4 	addi	r23,r23,-1
  809948:	9809883a 	mov	r4,r19
  80994c:	a00b883a 	mov	r5,r20
  809950:	b8800005 	stb	r2,0(r23)
  809954:	01800284 	movi	r6,10
  809958:	000f883a 	mov	r7,zero
  80995c:	080addc0 	call	80addc <__udivdi3>
  809960:	1027883a 	mov	r19,r2
  809964:	10c4b03a 	or	r2,r2,r3
  809968:	1829883a 	mov	r20,r3
  80996c:	103fef1e 	bne	r2,zero,80992c <__alt_mem_epcs_flash_controller_0+0xff80092c>
  809970:	d9001e17 	ldw	r4,120(sp)
  809974:	e011883a 	mov	r8,fp
  809978:	25e9c83a 	sub	r20,r4,r23
  80997c:	003eec06 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  809980:	d8802307 	ldb	r2,140(sp)
  809984:	1002361e 	bne	r2,zero,80a260 <___vfiprintf_internal_r+0x113c>
  809988:	00c00804 	movi	r3,32
  80998c:	d8c02305 	stb	r3,140(sp)
  809990:	04c00044 	movi	r19,1
  809994:	b0c00007 	ldb	r3,0(r22)
  809998:	003e3f06 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  80999c:	8c400054 	ori	r17,r17,1
  8099a0:	b0c00007 	ldb	r3,0(r22)
  8099a4:	003e3c06 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  8099a8:	8c402014 	ori	r17,r17,128
  8099ac:	b0c00007 	ldb	r3,0(r22)
  8099b0:	003e3906 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  8099b4:	dc002715 	stw	r16,156(sp)
  8099b8:	d8002515 	stw	zero,148(sp)
  8099bc:	1f3ff404 	addi	fp,r3,-48
  8099c0:	0009883a 	mov	r4,zero
  8099c4:	b021883a 	mov	r16,r22
  8099c8:	01400284 	movi	r5,10
  8099cc:	080b99c0 	call	80b99c <__mulsi3>
  8099d0:	80c00007 	ldb	r3,0(r16)
  8099d4:	e089883a 	add	r4,fp,r2
  8099d8:	b5800044 	addi	r22,r22,1
  8099dc:	1f3ff404 	addi	fp,r3,-48
  8099e0:	b021883a 	mov	r16,r22
  8099e4:	af3ff82e 	bgeu	r21,fp,8099c8 <__alt_mem_epcs_flash_controller_0+0xff8009c8>
  8099e8:	d9002515 	stw	r4,148(sp)
  8099ec:	dc002717 	ldw	r16,156(sp)
  8099f0:	003e2a06 	br	80929c <__alt_mem_epcs_flash_controller_0+0xff80029c>
  8099f4:	9cc03fcc 	andi	r19,r19,255
  8099f8:	b811883a 	mov	r8,r23
  8099fc:	9802e91e 	bne	r19,zero,80a5a4 <___vfiprintf_internal_r+0x1480>
  809a00:	8c400414 	ori	r17,r17,16
  809a04:	8880080c 	andi	r2,r17,32
  809a08:	103fb81e 	bne	r2,zero,8098ec <__alt_mem_epcs_flash_controller_0+0xff8008ec>
  809a0c:	8880040c 	andi	r2,r17,16
  809a10:	10022e26 	beq	r2,zero,80a2cc <___vfiprintf_internal_r+0x11a8>
  809a14:	d9402217 	ldw	r5,136(sp)
  809a18:	2cc00017 	ldw	r19,0(r5)
  809a1c:	29400104 	addi	r5,r5,4
  809a20:	d9402215 	stw	r5,136(sp)
  809a24:	9829d7fa 	srai	r20,r19,31
  809a28:	a005883a 	mov	r2,r20
  809a2c:	003fb506 	br	809904 <__alt_mem_epcs_flash_controller_0+0xff800904>
  809a30:	9cc03fcc 	andi	r19,r19,255
  809a34:	b811883a 	mov	r8,r23
  809a38:	9802fa1e 	bne	r19,zero,80a624 <___vfiprintf_internal_r+0x1500>
  809a3c:	8c400414 	ori	r17,r17,16
  809a40:	8880080c 	andi	r2,r17,32
  809a44:	103f661e 	bne	r2,zero,8097e0 <__alt_mem_epcs_flash_controller_0+0xff8007e0>
  809a48:	8880040c 	andi	r2,r17,16
  809a4c:	10020626 	beq	r2,zero,80a268 <___vfiprintf_internal_r+0x1144>
  809a50:	d9402217 	ldw	r5,136(sp)
  809a54:	d8001d85 	stb	zero,118(sp)
  809a58:	0029883a 	mov	r20,zero
  809a5c:	28800104 	addi	r2,r5,4
  809a60:	2cc00017 	ldw	r19,0(r5)
  809a64:	80020816 	blt	r16,zero,80a288 <___vfiprintf_internal_r+0x1164>
  809a68:	00ffdfc4 	movi	r3,-129
  809a6c:	d8802215 	stw	r2,136(sp)
  809a70:	88e2703a 	and	r17,r17,r3
  809a74:	983f651e 	bne	r19,zero,80980c <__alt_mem_epcs_flash_controller_0+0xff80080c>
  809a78:	002b883a 	mov	r21,zero
  809a7c:	8002cf26 	beq	r16,zero,80a5bc <___vfiprintf_internal_r+0x1498>
  809a80:	0027883a 	mov	r19,zero
  809a84:	0029883a 	mov	r20,zero
  809a88:	003f6106 	br	809810 <__alt_mem_epcs_flash_controller_0+0xff800810>
  809a8c:	9cc03fcc 	andi	r19,r19,255
  809a90:	b811883a 	mov	r8,r23
  809a94:	9802e01e 	bne	r19,zero,80a618 <___vfiprintf_internal_r+0x14f4>
  809a98:	8c400414 	ori	r17,r17,16
  809a9c:	8880080c 	andi	r2,r17,32
  809aa0:	1000641e 	bne	r2,zero,809c34 <___vfiprintf_internal_r+0xb10>
  809aa4:	8880040c 	andi	r2,r17,16
  809aa8:	1001c81e 	bne	r2,zero,80a1cc <___vfiprintf_internal_r+0x10a8>
  809aac:	8880100c 	andi	r2,r17,64
  809ab0:	d8001d85 	stb	zero,118(sp)
  809ab4:	1002281e 	bne	r2,zero,80a358 <___vfiprintf_internal_r+0x1234>
  809ab8:	d9002217 	ldw	r4,136(sp)
  809abc:	0029883a 	mov	r20,zero
  809ac0:	20800104 	addi	r2,r4,4
  809ac4:	24c00017 	ldw	r19,0(r4)
  809ac8:	8001c60e 	bge	r16,zero,80a1e4 <___vfiprintf_internal_r+0x10c0>
  809acc:	d8802215 	stw	r2,136(sp)
  809ad0:	002b883a 	mov	r21,zero
  809ad4:	9d04b03a 	or	r2,r19,r20
  809ad8:	103f911e 	bne	r2,zero,809920 <__alt_mem_epcs_flash_controller_0+0xff800920>
  809adc:	00800044 	movi	r2,1
  809ae0:	10803fcc 	andi	r2,r2,255
  809ae4:	00c00044 	movi	r3,1
  809ae8:	10c05f26 	beq	r2,r3,809c68 <___vfiprintf_internal_r+0xb44>
  809aec:	00c00084 	movi	r3,2
  809af0:	10ffe31e 	bne	r2,r3,809a80 <__alt_mem_epcs_flash_controller_0+0xff800a80>
  809af4:	0027883a 	mov	r19,zero
  809af8:	0029883a 	mov	r20,zero
  809afc:	00015106 	br	80a044 <___vfiprintf_internal_r+0xf20>
  809b00:	9cc03fcc 	andi	r19,r19,255
  809b04:	b811883a 	mov	r8,r23
  809b08:	9802c01e 	bne	r19,zero,80a60c <___vfiprintf_internal_r+0x14e8>
  809b0c:	014020b4 	movhi	r5,130
  809b10:	296f9404 	addi	r5,r5,-16816
  809b14:	d9402615 	stw	r5,152(sp)
  809b18:	8880080c 	andi	r2,r17,32
  809b1c:	103f541e 	bne	r2,zero,809870 <__alt_mem_epcs_flash_controller_0+0xff800870>
  809b20:	8880040c 	andi	r2,r17,16
  809b24:	1001f226 	beq	r2,zero,80a2f0 <___vfiprintf_internal_r+0x11cc>
  809b28:	d9402217 	ldw	r5,136(sp)
  809b2c:	0029883a 	mov	r20,zero
  809b30:	2cc00017 	ldw	r19,0(r5)
  809b34:	29400104 	addi	r5,r5,4
  809b38:	d9402215 	stw	r5,136(sp)
  809b3c:	003f5106 	br	809884 <__alt_mem_epcs_flash_controller_0+0xff800884>
  809b40:	d8c02217 	ldw	r3,136(sp)
  809b44:	b811883a 	mov	r8,r23
  809b48:	d8001d85 	stb	zero,118(sp)
  809b4c:	1dc00017 	ldw	r23,0(r3)
  809b50:	1f000104 	addi	fp,r3,4
  809b54:	b8025926 	beq	r23,zero,80a4bc <___vfiprintf_internal_r+0x1398>
  809b58:	80023316 	blt	r16,zero,80a428 <___vfiprintf_internal_r+0x1304>
  809b5c:	800d883a 	mov	r6,r16
  809b60:	000b883a 	mov	r5,zero
  809b64:	b809883a 	mov	r4,r23
  809b68:	da002a15 	stw	r8,168(sp)
  809b6c:	08073540 	call	807354 <memchr>
  809b70:	da002a17 	ldw	r8,168(sp)
  809b74:	10026826 	beq	r2,zero,80a518 <___vfiprintf_internal_r+0x13f4>
  809b78:	15e9c83a 	sub	r20,r2,r23
  809b7c:	dd401d83 	ldbu	r21,118(sp)
  809b80:	df002215 	stw	fp,136(sp)
  809b84:	0021883a 	mov	r16,zero
  809b88:	003e6906 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  809b8c:	9cc03fcc 	andi	r19,r19,255
  809b90:	b811883a 	mov	r8,r23
  809b94:	983fc126 	beq	r19,zero,809a9c <__alt_mem_epcs_flash_controller_0+0xff800a9c>
  809b98:	d8c02303 	ldbu	r3,140(sp)
  809b9c:	d8c01d85 	stb	r3,118(sp)
  809ba0:	003fbe06 	br	809a9c <__alt_mem_epcs_flash_controller_0+0xff800a9c>
  809ba4:	d9002217 	ldw	r4,136(sp)
  809ba8:	d9402217 	ldw	r5,136(sp)
  809bac:	21000017 	ldw	r4,0(r4)
  809bb0:	28800104 	addi	r2,r5,4
  809bb4:	d9002515 	stw	r4,148(sp)
  809bb8:	203e3d16 	blt	r4,zero,8094b0 <__alt_mem_epcs_flash_controller_0+0xff8004b0>
  809bbc:	d8802215 	stw	r2,136(sp)
  809bc0:	b0c00007 	ldb	r3,0(r22)
  809bc4:	003db406 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  809bc8:	00c00ac4 	movi	r3,43
  809bcc:	d8c02305 	stb	r3,140(sp)
  809bd0:	04c00044 	movi	r19,1
  809bd4:	b0c00007 	ldb	r3,0(r22)
  809bd8:	003daf06 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  809bdc:	b0c00007 	ldb	r3,0(r22)
  809be0:	01000a84 	movi	r4,42
  809be4:	b4000044 	addi	r16,r22,1
  809be8:	19025e26 	beq	r3,r4,80a564 <___vfiprintf_internal_r+0x1440>
  809bec:	1f3ff404 	addi	fp,r3,-48
  809bf0:	0009883a 	mov	r4,zero
  809bf4:	af025236 	bltu	r21,fp,80a540 <___vfiprintf_internal_r+0x141c>
  809bf8:	01400284 	movi	r5,10
  809bfc:	080b99c0 	call	80b99c <__mulsi3>
  809c00:	80c00007 	ldb	r3,0(r16)
  809c04:	1709883a 	add	r4,r2,fp
  809c08:	85800044 	addi	r22,r16,1
  809c0c:	1f3ff404 	addi	fp,r3,-48
  809c10:	b021883a 	mov	r16,r22
  809c14:	af3ff82e 	bgeu	r21,fp,809bf8 <__alt_mem_epcs_flash_controller_0+0xff800bf8>
  809c18:	2021883a 	mov	r16,r4
  809c1c:	203d9f0e 	bge	r4,zero,80929c <__alt_mem_epcs_flash_controller_0+0xff80029c>
  809c20:	043fffc4 	movi	r16,-1
  809c24:	003d9d06 	br	80929c <__alt_mem_epcs_flash_controller_0+0xff80029c>
  809c28:	8c401014 	ori	r17,r17,64
  809c2c:	b0c00007 	ldb	r3,0(r22)
  809c30:	003d9906 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  809c34:	d9002217 	ldw	r4,136(sp)
  809c38:	d8001d85 	stb	zero,118(sp)
  809c3c:	20c00204 	addi	r3,r4,8
  809c40:	24c00017 	ldw	r19,0(r4)
  809c44:	25000117 	ldw	r20,4(r4)
  809c48:	8001e716 	blt	r16,zero,80a3e8 <___vfiprintf_internal_r+0x12c4>
  809c4c:	013fdfc4 	movi	r4,-129
  809c50:	9d04b03a 	or	r2,r19,r20
  809c54:	d8c02215 	stw	r3,136(sp)
  809c58:	8922703a 	and	r17,r17,r4
  809c5c:	002b883a 	mov	r21,zero
  809c60:	103f2f1e 	bne	r2,zero,809920 <__alt_mem_epcs_flash_controller_0+0xff800920>
  809c64:	803e2f26 	beq	r16,zero,809524 <__alt_mem_epcs_flash_controller_0+0xff800524>
  809c68:	0027883a 	mov	r19,zero
  809c6c:	9cc00c04 	addi	r19,r19,48
  809c70:	dcc019c5 	stb	r19,103(sp)
  809c74:	dd002817 	ldw	r20,160(sp)
  809c78:	ddc019c4 	addi	r23,sp,103
  809c7c:	003e2c06 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  809c80:	9cc03fcc 	andi	r19,r19,255
  809c84:	b811883a 	mov	r8,r23
  809c88:	9802571e 	bne	r19,zero,80a5e8 <___vfiprintf_internal_r+0x14c4>
  809c8c:	18005726 	beq	r3,zero,809dec <___vfiprintf_internal_r+0xcc8>
  809c90:	04c00044 	movi	r19,1
  809c94:	d8c01005 	stb	r3,64(sp)
  809c98:	d8001d85 	stb	zero,118(sp)
  809c9c:	9829883a 	mov	r20,r19
  809ca0:	ddc01004 	addi	r23,sp,64
  809ca4:	003f0a06 	br	8098d0 <__alt_mem_epcs_flash_controller_0+0xff8008d0>
  809ca8:	d9402017 	ldw	r5,128(sp)
  809cac:	d9002117 	ldw	r4,132(sp)
  809cb0:	d9801a04 	addi	r6,sp,104
  809cb4:	da802a15 	stw	r10,168(sp)
  809cb8:	08090100 	call	809010 <__sprint_r.part.0>
  809cbc:	da802a17 	ldw	r10,168(sp)
  809cc0:	1000501e 	bne	r2,zero,809e04 <___vfiprintf_internal_r+0xce0>
  809cc4:	d9801b17 	ldw	r6,108(sp)
  809cc8:	d8801c17 	ldw	r2,112(sp)
  809ccc:	d811883a 	mov	r8,sp
  809cd0:	31000044 	addi	r4,r6,1
  809cd4:	003e3606 	br	8095b0 <__alt_mem_epcs_flash_controller_0+0xff8005b0>
  809cd8:	d9001b17 	ldw	r4,108(sp)
  809cdc:	d8801c17 	ldw	r2,112(sp)
  809ce0:	21400044 	addi	r5,r4,1
  809ce4:	d9801d87 	ldb	r6,118(sp)
  809ce8:	303e5226 	beq	r6,zero,809634 <__alt_mem_epcs_flash_controller_0+0xff800634>
  809cec:	01800044 	movi	r6,1
  809cf0:	d9001d84 	addi	r4,sp,118
  809cf4:	1185883a 	add	r2,r2,r6
  809cf8:	41000015 	stw	r4,0(r8)
  809cfc:	41800115 	stw	r6,4(r8)
  809d00:	d8801c15 	stw	r2,112(sp)
  809d04:	d9401b15 	stw	r5,108(sp)
  809d08:	010001c4 	movi	r4,7
  809d0c:	2140b00e 	bge	r4,r5,809fd0 <___vfiprintf_internal_r+0xeac>
  809d10:	1000f61e 	bne	r2,zero,80a0ec <___vfiprintf_internal_r+0xfc8>
  809d14:	3800b31e 	bne	r7,zero,809fe4 <___vfiprintf_internal_r+0xec0>
  809d18:	0009883a 	mov	r4,zero
  809d1c:	300b883a 	mov	r5,r6
  809d20:	d811883a 	mov	r8,sp
  809d24:	01802004 	movi	r6,128
  809d28:	19be5226 	beq	r3,r6,809674 <__alt_mem_epcs_flash_controller_0+0xff800674>
  809d2c:	8521c83a 	sub	r16,r16,r20
  809d30:	043e790e 	bge	zero,r16,809718 <__alt_mem_epcs_flash_controller_0+0xff800718>
  809d34:	05400404 	movi	r21,16
  809d38:	ac01b00e 	bge	r21,r16,80a3fc <___vfiprintf_internal_r+0x12d8>
  809d3c:	014020b4 	movhi	r5,130
  809d40:	296ff904 	addi	r5,r5,-16412
  809d44:	d9402315 	stw	r5,140(sp)
  809d48:	070001c4 	movi	fp,7
  809d4c:	00000506 	br	809d64 <___vfiprintf_internal_r+0xc40>
  809d50:	21400084 	addi	r5,r4,2
  809d54:	42000204 	addi	r8,r8,8
  809d58:	1809883a 	mov	r4,r3
  809d5c:	843ffc04 	addi	r16,r16,-16
  809d60:	ac000d0e 	bge	r21,r16,809d98 <___vfiprintf_internal_r+0xc74>
  809d64:	10800404 	addi	r2,r2,16
  809d68:	20c00044 	addi	r3,r4,1
  809d6c:	44800015 	stw	r18,0(r8)
  809d70:	45400115 	stw	r21,4(r8)
  809d74:	d8801c15 	stw	r2,112(sp)
  809d78:	d8c01b15 	stw	r3,108(sp)
  809d7c:	e0fff40e 	bge	fp,r3,809d50 <__alt_mem_epcs_flash_controller_0+0xff800d50>
  809d80:	1000101e 	bne	r2,zero,809dc4 <___vfiprintf_internal_r+0xca0>
  809d84:	843ffc04 	addi	r16,r16,-16
  809d88:	01400044 	movi	r5,1
  809d8c:	0009883a 	mov	r4,zero
  809d90:	d811883a 	mov	r8,sp
  809d94:	ac3ff316 	blt	r21,r16,809d64 <__alt_mem_epcs_flash_controller_0+0xff800d64>
  809d98:	d8c02317 	ldw	r3,140(sp)
  809d9c:	1405883a 	add	r2,r2,r16
  809da0:	44000115 	stw	r16,4(r8)
  809da4:	40c00015 	stw	r3,0(r8)
  809da8:	d8801c15 	stw	r2,112(sp)
  809dac:	d9401b15 	stw	r5,108(sp)
  809db0:	00c001c4 	movi	r3,7
  809db4:	19401916 	blt	r3,r5,809e1c <___vfiprintf_internal_r+0xcf8>
  809db8:	42000204 	addi	r8,r8,8
  809dbc:	29400044 	addi	r5,r5,1
  809dc0:	003e5506 	br	809718 <__alt_mem_epcs_flash_controller_0+0xff800718>
  809dc4:	d9402017 	ldw	r5,128(sp)
  809dc8:	d9002117 	ldw	r4,132(sp)
  809dcc:	d9801a04 	addi	r6,sp,104
  809dd0:	08090100 	call	809010 <__sprint_r.part.0>
  809dd4:	10000b1e 	bne	r2,zero,809e04 <___vfiprintf_internal_r+0xce0>
  809dd8:	d9001b17 	ldw	r4,108(sp)
  809ddc:	d8801c17 	ldw	r2,112(sp)
  809de0:	d811883a 	mov	r8,sp
  809de4:	21400044 	addi	r5,r4,1
  809de8:	003fdc06 	br	809d5c <__alt_mem_epcs_flash_controller_0+0xff800d5c>
  809dec:	d8801c17 	ldw	r2,112(sp)
  809df0:	10000426 	beq	r2,zero,809e04 <___vfiprintf_internal_r+0xce0>
  809df4:	d9402017 	ldw	r5,128(sp)
  809df8:	d9002117 	ldw	r4,132(sp)
  809dfc:	d9801a04 	addi	r6,sp,104
  809e00:	08090100 	call	809010 <__sprint_r.part.0>
  809e04:	d9402017 	ldw	r5,128(sp)
  809e08:	2880030b 	ldhu	r2,12(r5)
  809e0c:	1080100c 	andi	r2,r2,64
  809e10:	10014d1e 	bne	r2,zero,80a348 <___vfiprintf_internal_r+0x1224>
  809e14:	d8802417 	ldw	r2,144(sp)
  809e18:	003d9706 	br	809478 <__alt_mem_epcs_flash_controller_0+0xff800478>
  809e1c:	1000d21e 	bne	r2,zero,80a168 <___vfiprintf_internal_r+0x1044>
  809e20:	00c00044 	movi	r3,1
  809e24:	a005883a 	mov	r2,r20
  809e28:	ddc00015 	stw	r23,0(sp)
  809e2c:	dd000115 	stw	r20,4(sp)
  809e30:	dd001c15 	stw	r20,112(sp)
  809e34:	d8c01b15 	stw	r3,108(sp)
  809e38:	d811883a 	mov	r8,sp
  809e3c:	42000204 	addi	r8,r8,8
  809e40:	8c40010c 	andi	r17,r17,4
  809e44:	88004026 	beq	r17,zero,809f48 <___vfiprintf_internal_r+0xe24>
  809e48:	d9002517 	ldw	r4,148(sp)
  809e4c:	24e3c83a 	sub	r17,r4,r19
  809e50:	04403d0e 	bge	zero,r17,809f48 <___vfiprintf_internal_r+0xe24>
  809e54:	04000404 	movi	r16,16
  809e58:	8441a90e 	bge	r16,r17,80a500 <___vfiprintf_internal_r+0x13dc>
  809e5c:	00c020b4 	movhi	r3,130
  809e60:	18effd04 	addi	r3,r3,-16396
  809e64:	d9001b17 	ldw	r4,108(sp)
  809e68:	d8c02315 	stw	r3,140(sp)
  809e6c:	050001c4 	movi	r20,7
  809e70:	dd402117 	ldw	r21,132(sp)
  809e74:	ddc02017 	ldw	r23,128(sp)
  809e78:	00000506 	br	809e90 <___vfiprintf_internal_r+0xd6c>
  809e7c:	21400084 	addi	r5,r4,2
  809e80:	42000204 	addi	r8,r8,8
  809e84:	1809883a 	mov	r4,r3
  809e88:	8c7ffc04 	addi	r17,r17,-16
  809e8c:	84400f0e 	bge	r16,r17,809ecc <___vfiprintf_internal_r+0xda8>
  809e90:	014020b4 	movhi	r5,130
  809e94:	10800404 	addi	r2,r2,16
  809e98:	20c00044 	addi	r3,r4,1
  809e9c:	296ffd04 	addi	r5,r5,-16396
  809ea0:	41400015 	stw	r5,0(r8)
  809ea4:	44000115 	stw	r16,4(r8)
  809ea8:	d8801c15 	stw	r2,112(sp)
  809eac:	d8c01b15 	stw	r3,108(sp)
  809eb0:	a0fff20e 	bge	r20,r3,809e7c <__alt_mem_epcs_flash_controller_0+0xff800e7c>
  809eb4:	1000141e 	bne	r2,zero,809f08 <___vfiprintf_internal_r+0xde4>
  809eb8:	8c7ffc04 	addi	r17,r17,-16
  809ebc:	01400044 	movi	r5,1
  809ec0:	0009883a 	mov	r4,zero
  809ec4:	d811883a 	mov	r8,sp
  809ec8:	847ff116 	blt	r16,r17,809e90 <__alt_mem_epcs_flash_controller_0+0xff800e90>
  809ecc:	d8c02317 	ldw	r3,140(sp)
  809ed0:	1445883a 	add	r2,r2,r17
  809ed4:	44400115 	stw	r17,4(r8)
  809ed8:	40c00015 	stw	r3,0(r8)
  809edc:	d8801c15 	stw	r2,112(sp)
  809ee0:	d9401b15 	stw	r5,108(sp)
  809ee4:	00c001c4 	movi	r3,7
  809ee8:	1940170e 	bge	r3,r5,809f48 <___vfiprintf_internal_r+0xe24>
  809eec:	1000101e 	bne	r2,zero,809f30 <___vfiprintf_internal_r+0xe0c>
  809ef0:	d8802517 	ldw	r2,148(sp)
  809ef4:	14c11616 	blt	r2,r19,80a350 <___vfiprintf_internal_r+0x122c>
  809ef8:	d9002417 	ldw	r4,144(sp)
  809efc:	2089883a 	add	r4,r4,r2
  809f00:	d9002415 	stw	r4,144(sp)
  809f04:	003e1806 	br	809768 <__alt_mem_epcs_flash_controller_0+0xff800768>
  809f08:	d9801a04 	addi	r6,sp,104
  809f0c:	b80b883a 	mov	r5,r23
  809f10:	a809883a 	mov	r4,r21
  809f14:	08090100 	call	809010 <__sprint_r.part.0>
  809f18:	103fba1e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  809f1c:	d9001b17 	ldw	r4,108(sp)
  809f20:	d8801c17 	ldw	r2,112(sp)
  809f24:	d811883a 	mov	r8,sp
  809f28:	21400044 	addi	r5,r4,1
  809f2c:	003fd606 	br	809e88 <__alt_mem_epcs_flash_controller_0+0xff800e88>
  809f30:	d9402017 	ldw	r5,128(sp)
  809f34:	d9002117 	ldw	r4,132(sp)
  809f38:	d9801a04 	addi	r6,sp,104
  809f3c:	08090100 	call	809010 <__sprint_r.part.0>
  809f40:	103fb01e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  809f44:	d8801c17 	ldw	r2,112(sp)
  809f48:	d8c02517 	ldw	r3,148(sp)
  809f4c:	1cc0010e 	bge	r3,r19,809f54 <___vfiprintf_internal_r+0xe30>
  809f50:	9807883a 	mov	r3,r19
  809f54:	d9002417 	ldw	r4,144(sp)
  809f58:	20c9883a 	add	r4,r4,r3
  809f5c:	d9002415 	stw	r4,144(sp)
  809f60:	103e0126 	beq	r2,zero,809768 <__alt_mem_epcs_flash_controller_0+0xff800768>
  809f64:	d9402017 	ldw	r5,128(sp)
  809f68:	d9002117 	ldw	r4,132(sp)
  809f6c:	d9801a04 	addi	r6,sp,104
  809f70:	08090100 	call	809010 <__sprint_r.part.0>
  809f74:	103dfc26 	beq	r2,zero,809768 <__alt_mem_epcs_flash_controller_0+0xff800768>
  809f78:	003fa206 	br	809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  809f7c:	d9402017 	ldw	r5,128(sp)
  809f80:	d9002117 	ldw	r4,132(sp)
  809f84:	d9801a04 	addi	r6,sp,104
  809f88:	d9c02b15 	stw	r7,172(sp)
  809f8c:	08090100 	call	809010 <__sprint_r.part.0>
  809f90:	d9c02b17 	ldw	r7,172(sp)
  809f94:	103f9b1e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  809f98:	d9001b17 	ldw	r4,108(sp)
  809f9c:	d8801c17 	ldw	r2,112(sp)
  809fa0:	d811883a 	mov	r8,sp
  809fa4:	21800044 	addi	r6,r4,1
  809fa8:	003dbf06 	br	8096a8 <__alt_mem_epcs_flash_controller_0+0xff8006a8>
  809fac:	1000d81e 	bne	r2,zero,80a310 <___vfiprintf_internal_r+0x11ec>
  809fb0:	d9001d87 	ldb	r4,118(sp)
  809fb4:	20000a26 	beq	r4,zero,809fe0 <___vfiprintf_internal_r+0xebc>
  809fb8:	00800044 	movi	r2,1
  809fbc:	d9001d84 	addi	r4,sp,118
  809fc0:	100b883a 	mov	r5,r2
  809fc4:	d9000015 	stw	r4,0(sp)
  809fc8:	d8800115 	stw	r2,4(sp)
  809fcc:	d811883a 	mov	r8,sp
  809fd0:	2809883a 	mov	r4,r5
  809fd4:	42000204 	addi	r8,r8,8
  809fd8:	29400044 	addi	r5,r5,1
  809fdc:	003d9506 	br	809634 <__alt_mem_epcs_flash_controller_0+0xff800634>
  809fe0:	3800fd26 	beq	r7,zero,80a3d8 <___vfiprintf_internal_r+0x12b4>
  809fe4:	00800084 	movi	r2,2
  809fe8:	d9001d04 	addi	r4,sp,116
  809fec:	d9000015 	stw	r4,0(sp)
  809ff0:	d8800115 	stw	r2,4(sp)
  809ff4:	01400044 	movi	r5,1
  809ff8:	d811883a 	mov	r8,sp
  809ffc:	2809883a 	mov	r4,r5
  80a000:	42000204 	addi	r8,r8,8
  80a004:	29400044 	addi	r5,r5,1
  80a008:	003f4606 	br	809d24 <__alt_mem_epcs_flash_controller_0+0xff800d24>
  80a00c:	d8802517 	ldw	r2,148(sp)
  80a010:	14c0010e 	bge	r2,r19,80a018 <___vfiprintf_internal_r+0xef4>
  80a014:	9805883a 	mov	r2,r19
  80a018:	d9402417 	ldw	r5,144(sp)
  80a01c:	288b883a 	add	r5,r5,r2
  80a020:	d9402415 	stw	r5,144(sp)
  80a024:	003dd006 	br	809768 <__alt_mem_epcs_flash_controller_0+0xff800768>
  80a028:	d8001d85 	stb	zero,118(sp)
  80a02c:	80005d16 	blt	r16,zero,80a1a4 <___vfiprintf_internal_r+0x1080>
  80a030:	00ffdfc4 	movi	r3,-129
  80a034:	9d04b03a 	or	r2,r19,r20
  80a038:	88e2703a 	and	r17,r17,r3
  80a03c:	103d3726 	beq	r2,zero,80951c <__alt_mem_epcs_flash_controller_0+0xff80051c>
  80a040:	002b883a 	mov	r21,zero
  80a044:	d9002617 	ldw	r4,152(sp)
  80a048:	ddc01a04 	addi	r23,sp,104
  80a04c:	988003cc 	andi	r2,r19,15
  80a050:	a006973a 	slli	r3,r20,28
  80a054:	2085883a 	add	r2,r4,r2
  80a058:	9826d13a 	srli	r19,r19,4
  80a05c:	10800003 	ldbu	r2,0(r2)
  80a060:	a028d13a 	srli	r20,r20,4
  80a064:	bdffffc4 	addi	r23,r23,-1
  80a068:	1ce6b03a 	or	r19,r3,r19
  80a06c:	b8800005 	stb	r2,0(r23)
  80a070:	9d04b03a 	or	r2,r19,r20
  80a074:	103ff51e 	bne	r2,zero,80a04c <__alt_mem_epcs_flash_controller_0+0xff80104c>
  80a078:	d8801e17 	ldw	r2,120(sp)
  80a07c:	15e9c83a 	sub	r20,r2,r23
  80a080:	003d2b06 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  80a084:	d9402017 	ldw	r5,128(sp)
  80a088:	d9002117 	ldw	r4,132(sp)
  80a08c:	d9801a04 	addi	r6,sp,104
  80a090:	08090100 	call	809010 <__sprint_r.part.0>
  80a094:	103f5b1e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a098:	d8801c17 	ldw	r2,112(sp)
  80a09c:	d811883a 	mov	r8,sp
  80a0a0:	003f6706 	br	809e40 <__alt_mem_epcs_flash_controller_0+0xff800e40>
  80a0a4:	d9402017 	ldw	r5,128(sp)
  80a0a8:	d9002117 	ldw	r4,132(sp)
  80a0ac:	d9801a04 	addi	r6,sp,104
  80a0b0:	08090100 	call	809010 <__sprint_r.part.0>
  80a0b4:	103f531e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a0b8:	d811883a 	mov	r8,sp
  80a0bc:	003cd906 	br	809424 <__alt_mem_epcs_flash_controller_0+0xff800424>
  80a0c0:	10803fcc 	andi	r2,r2,255
  80a0c4:	1080201c 	xori	r2,r2,128
  80a0c8:	10bfe004 	addi	r2,r2,-128
  80a0cc:	00c00c04 	movi	r3,48
  80a0d0:	10ffe926 	beq	r2,r3,80a078 <__alt_mem_epcs_flash_controller_0+0xff801078>
  80a0d4:	b8ffffc5 	stb	r3,-1(r23)
  80a0d8:	d8c01e17 	ldw	r3,120(sp)
  80a0dc:	b8bfffc4 	addi	r2,r23,-1
  80a0e0:	102f883a 	mov	r23,r2
  80a0e4:	18a9c83a 	sub	r20,r3,r2
  80a0e8:	003d1106 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  80a0ec:	d9402017 	ldw	r5,128(sp)
  80a0f0:	d9002117 	ldw	r4,132(sp)
  80a0f4:	d9801a04 	addi	r6,sp,104
  80a0f8:	d8c02a15 	stw	r3,168(sp)
  80a0fc:	d9c02b15 	stw	r7,172(sp)
  80a100:	08090100 	call	809010 <__sprint_r.part.0>
  80a104:	d8c02a17 	ldw	r3,168(sp)
  80a108:	d9c02b17 	ldw	r7,172(sp)
  80a10c:	103f3d1e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a110:	d9001b17 	ldw	r4,108(sp)
  80a114:	d8801c17 	ldw	r2,112(sp)
  80a118:	d811883a 	mov	r8,sp
  80a11c:	21400044 	addi	r5,r4,1
  80a120:	003d4406 	br	809634 <__alt_mem_epcs_flash_controller_0+0xff800634>
  80a124:	d9402017 	ldw	r5,128(sp)
  80a128:	d9002117 	ldw	r4,132(sp)
  80a12c:	d9801a04 	addi	r6,sp,104
  80a130:	d8c02a15 	stw	r3,168(sp)
  80a134:	08090100 	call	809010 <__sprint_r.part.0>
  80a138:	d8c02a17 	ldw	r3,168(sp)
  80a13c:	103f311e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a140:	d9001b17 	ldw	r4,108(sp)
  80a144:	d8801c17 	ldw	r2,112(sp)
  80a148:	d811883a 	mov	r8,sp
  80a14c:	21400044 	addi	r5,r4,1
  80a150:	003ef406 	br	809d24 <__alt_mem_epcs_flash_controller_0+0xff800d24>
  80a154:	1000bd1e 	bne	r2,zero,80a44c <___vfiprintf_internal_r+0x1328>
  80a158:	01400044 	movi	r5,1
  80a15c:	0009883a 	mov	r4,zero
  80a160:	d811883a 	mov	r8,sp
  80a164:	003ef106 	br	809d2c <__alt_mem_epcs_flash_controller_0+0xff800d2c>
  80a168:	d9402017 	ldw	r5,128(sp)
  80a16c:	d9002117 	ldw	r4,132(sp)
  80a170:	d9801a04 	addi	r6,sp,104
  80a174:	08090100 	call	809010 <__sprint_r.part.0>
  80a178:	103f221e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a17c:	d9401b17 	ldw	r5,108(sp)
  80a180:	d8801c17 	ldw	r2,112(sp)
  80a184:	d811883a 	mov	r8,sp
  80a188:	29400044 	addi	r5,r5,1
  80a18c:	003d6206 	br	809718 <__alt_mem_epcs_flash_controller_0+0xff800718>
  80a190:	014020b4 	movhi	r5,130
  80a194:	296f9904 	addi	r5,r5,-16796
  80a198:	d9402615 	stw	r5,152(sp)
  80a19c:	d8c02215 	stw	r3,136(sp)
  80a1a0:	1023883a 	mov	r17,r2
  80a1a4:	9d04b03a 	or	r2,r19,r20
  80a1a8:	103fa51e 	bne	r2,zero,80a040 <__alt_mem_epcs_flash_controller_0+0xff801040>
  80a1ac:	002b883a 	mov	r21,zero
  80a1b0:	00800084 	movi	r2,2
  80a1b4:	003e4a06 	br	809ae0 <__alt_mem_epcs_flash_controller_0+0xff800ae0>
  80a1b8:	014020b4 	movhi	r5,130
  80a1bc:	296f9904 	addi	r5,r5,-16796
  80a1c0:	002b883a 	mov	r21,zero
  80a1c4:	d9402615 	stw	r5,152(sp)
  80a1c8:	003f9e06 	br	80a044 <__alt_mem_epcs_flash_controller_0+0xff801044>
  80a1cc:	d9402217 	ldw	r5,136(sp)
  80a1d0:	d8001d85 	stb	zero,118(sp)
  80a1d4:	0029883a 	mov	r20,zero
  80a1d8:	28800104 	addi	r2,r5,4
  80a1dc:	2cc00017 	ldw	r19,0(r5)
  80a1e0:	803e3a16 	blt	r16,zero,809acc <__alt_mem_epcs_flash_controller_0+0xff800acc>
  80a1e4:	00ffdfc4 	movi	r3,-129
  80a1e8:	d8802215 	stw	r2,136(sp)
  80a1ec:	88e2703a 	and	r17,r17,r3
  80a1f0:	002b883a 	mov	r21,zero
  80a1f4:	983e9b26 	beq	r19,zero,809c64 <__alt_mem_epcs_flash_controller_0+0xff800c64>
  80a1f8:	00800244 	movi	r2,9
  80a1fc:	14fdc936 	bltu	r2,r19,809924 <__alt_mem_epcs_flash_controller_0+0xff800924>
  80a200:	003e9a06 	br	809c6c <__alt_mem_epcs_flash_controller_0+0xff800c6c>
  80a204:	00800c04 	movi	r2,48
  80a208:	d8c01d45 	stb	r3,117(sp)
  80a20c:	d8801d05 	stb	r2,116(sp)
  80a210:	d8001d85 	stb	zero,118(sp)
  80a214:	88c00094 	ori	r3,r17,2
  80a218:	80009c16 	blt	r16,zero,80a48c <___vfiprintf_internal_r+0x1368>
  80a21c:	00bfdfc4 	movi	r2,-129
  80a220:	88a2703a 	and	r17,r17,r2
  80a224:	8c400094 	ori	r17,r17,2
  80a228:	002b883a 	mov	r21,zero
  80a22c:	003f8506 	br	80a044 <__alt_mem_epcs_flash_controller_0+0xff801044>
  80a230:	b029883a 	mov	r20,r22
  80a234:	003c0b06 	br	809264 <__alt_mem_epcs_flash_controller_0+0xff800264>
  80a238:	04e7c83a 	sub	r19,zero,r19
  80a23c:	05400b44 	movi	r21,45
  80a240:	9804c03a 	cmpne	r2,r19,zero
  80a244:	0529c83a 	sub	r20,zero,r20
  80a248:	dd401d85 	stb	r21,118(sp)
  80a24c:	a0a9c83a 	sub	r20,r20,r2
  80a250:	80009716 	blt	r16,zero,80a4b0 <___vfiprintf_internal_r+0x138c>
  80a254:	00bfdfc4 	movi	r2,-129
  80a258:	88a2703a 	and	r17,r17,r2
  80a25c:	003db006 	br	809920 <__alt_mem_epcs_flash_controller_0+0xff800920>
  80a260:	b0c00007 	ldb	r3,0(r22)
  80a264:	003c0c06 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  80a268:	8880100c 	andi	r2,r17,64
  80a26c:	d8001d85 	stb	zero,118(sp)
  80a270:	1000461e 	bne	r2,zero,80a38c <___vfiprintf_internal_r+0x1268>
  80a274:	d9002217 	ldw	r4,136(sp)
  80a278:	0029883a 	mov	r20,zero
  80a27c:	20800104 	addi	r2,r4,4
  80a280:	24c00017 	ldw	r19,0(r4)
  80a284:	803df80e 	bge	r16,zero,809a68 <__alt_mem_epcs_flash_controller_0+0xff800a68>
  80a288:	9d06b03a 	or	r3,r19,r20
  80a28c:	d8802215 	stw	r2,136(sp)
  80a290:	183d5e1e 	bne	r3,zero,80980c <__alt_mem_epcs_flash_controller_0+0xff80080c>
  80a294:	002b883a 	mov	r21,zero
  80a298:	0005883a 	mov	r2,zero
  80a29c:	003e1006 	br	809ae0 <__alt_mem_epcs_flash_controller_0+0xff800ae0>
  80a2a0:	8880040c 	andi	r2,r17,16
  80a2a4:	1000321e 	bne	r2,zero,80a370 <___vfiprintf_internal_r+0x124c>
  80a2a8:	8c40100c 	andi	r17,r17,64
  80a2ac:	88008d26 	beq	r17,zero,80a4e4 <___vfiprintf_internal_r+0x13c0>
  80a2b0:	d9402217 	ldw	r5,136(sp)
  80a2b4:	d8c02417 	ldw	r3,144(sp)
  80a2b8:	28800017 	ldw	r2,0(r5)
  80a2bc:	29400104 	addi	r5,r5,4
  80a2c0:	d9402215 	stw	r5,136(sp)
  80a2c4:	10c0000d 	sth	r3,0(r2)
  80a2c8:	003bca06 	br	8091f4 <__alt_mem_epcs_flash_controller_0+0xff8001f4>
  80a2cc:	8880100c 	andi	r2,r17,64
  80a2d0:	10003a26 	beq	r2,zero,80a3bc <___vfiprintf_internal_r+0x1298>
  80a2d4:	d8802217 	ldw	r2,136(sp)
  80a2d8:	14c0000f 	ldh	r19,0(r2)
  80a2dc:	10800104 	addi	r2,r2,4
  80a2e0:	d8802215 	stw	r2,136(sp)
  80a2e4:	9829d7fa 	srai	r20,r19,31
  80a2e8:	a005883a 	mov	r2,r20
  80a2ec:	003d8506 	br	809904 <__alt_mem_epcs_flash_controller_0+0xff800904>
  80a2f0:	8880100c 	andi	r2,r17,64
  80a2f4:	10002b26 	beq	r2,zero,80a3a4 <___vfiprintf_internal_r+0x1280>
  80a2f8:	d8802217 	ldw	r2,136(sp)
  80a2fc:	0029883a 	mov	r20,zero
  80a300:	14c0000b 	ldhu	r19,0(r2)
  80a304:	10800104 	addi	r2,r2,4
  80a308:	d8802215 	stw	r2,136(sp)
  80a30c:	003d5d06 	br	809884 <__alt_mem_epcs_flash_controller_0+0xff800884>
  80a310:	d9402017 	ldw	r5,128(sp)
  80a314:	d9002117 	ldw	r4,132(sp)
  80a318:	d9801a04 	addi	r6,sp,104
  80a31c:	d8c02a15 	stw	r3,168(sp)
  80a320:	d9c02b15 	stw	r7,172(sp)
  80a324:	08090100 	call	809010 <__sprint_r.part.0>
  80a328:	d8c02a17 	ldw	r3,168(sp)
  80a32c:	d9c02b17 	ldw	r7,172(sp)
  80a330:	103eb41e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a334:	d9001b17 	ldw	r4,108(sp)
  80a338:	d8801c17 	ldw	r2,112(sp)
  80a33c:	d811883a 	mov	r8,sp
  80a340:	21400044 	addi	r5,r4,1
  80a344:	003e6706 	br	809ce4 <__alt_mem_epcs_flash_controller_0+0xff800ce4>
  80a348:	00bfffc4 	movi	r2,-1
  80a34c:	003c4a06 	br	809478 <__alt_mem_epcs_flash_controller_0+0xff800478>
  80a350:	9805883a 	mov	r2,r19
  80a354:	003ee806 	br	809ef8 <__alt_mem_epcs_flash_controller_0+0xff800ef8>
  80a358:	d8c02217 	ldw	r3,136(sp)
  80a35c:	0029883a 	mov	r20,zero
  80a360:	18800104 	addi	r2,r3,4
  80a364:	1cc0000b 	ldhu	r19,0(r3)
  80a368:	803f9e0e 	bge	r16,zero,80a1e4 <__alt_mem_epcs_flash_controller_0+0xff8011e4>
  80a36c:	003dd706 	br	809acc <__alt_mem_epcs_flash_controller_0+0xff800acc>
  80a370:	d8c02217 	ldw	r3,136(sp)
  80a374:	d9002417 	ldw	r4,144(sp)
  80a378:	18800017 	ldw	r2,0(r3)
  80a37c:	18c00104 	addi	r3,r3,4
  80a380:	d8c02215 	stw	r3,136(sp)
  80a384:	11000015 	stw	r4,0(r2)
  80a388:	003b9a06 	br	8091f4 <__alt_mem_epcs_flash_controller_0+0xff8001f4>
  80a38c:	d8c02217 	ldw	r3,136(sp)
  80a390:	0029883a 	mov	r20,zero
  80a394:	18800104 	addi	r2,r3,4
  80a398:	1cc0000b 	ldhu	r19,0(r3)
  80a39c:	803db20e 	bge	r16,zero,809a68 <__alt_mem_epcs_flash_controller_0+0xff800a68>
  80a3a0:	003fb906 	br	80a288 <__alt_mem_epcs_flash_controller_0+0xff801288>
  80a3a4:	d9002217 	ldw	r4,136(sp)
  80a3a8:	0029883a 	mov	r20,zero
  80a3ac:	24c00017 	ldw	r19,0(r4)
  80a3b0:	21000104 	addi	r4,r4,4
  80a3b4:	d9002215 	stw	r4,136(sp)
  80a3b8:	003d3206 	br	809884 <__alt_mem_epcs_flash_controller_0+0xff800884>
  80a3bc:	d8c02217 	ldw	r3,136(sp)
  80a3c0:	1cc00017 	ldw	r19,0(r3)
  80a3c4:	18c00104 	addi	r3,r3,4
  80a3c8:	d8c02215 	stw	r3,136(sp)
  80a3cc:	9829d7fa 	srai	r20,r19,31
  80a3d0:	a005883a 	mov	r2,r20
  80a3d4:	003d4b06 	br	809904 <__alt_mem_epcs_flash_controller_0+0xff800904>
  80a3d8:	0009883a 	mov	r4,zero
  80a3dc:	01400044 	movi	r5,1
  80a3e0:	d811883a 	mov	r8,sp
  80a3e4:	003e4f06 	br	809d24 <__alt_mem_epcs_flash_controller_0+0xff800d24>
  80a3e8:	d8c02215 	stw	r3,136(sp)
  80a3ec:	002b883a 	mov	r21,zero
  80a3f0:	003db806 	br	809ad4 <__alt_mem_epcs_flash_controller_0+0xff800ad4>
  80a3f4:	d811883a 	mov	r8,sp
  80a3f8:	003e9606 	br	809e54 <__alt_mem_epcs_flash_controller_0+0xff800e54>
  80a3fc:	010020b4 	movhi	r4,130
  80a400:	212ff904 	addi	r4,r4,-16412
  80a404:	d9002315 	stw	r4,140(sp)
  80a408:	003e6306 	br	809d98 <__alt_mem_epcs_flash_controller_0+0xff800d98>
  80a40c:	b0c00043 	ldbu	r3,1(r22)
  80a410:	8c400814 	ori	r17,r17,32
  80a414:	b5800044 	addi	r22,r22,1
  80a418:	18c03fcc 	andi	r3,r3,255
  80a41c:	18c0201c 	xori	r3,r3,128
  80a420:	18ffe004 	addi	r3,r3,-128
  80a424:	003b9c06 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  80a428:	b809883a 	mov	r4,r23
  80a42c:	da002a15 	stw	r8,168(sp)
  80a430:	0802c900 	call	802c90 <strlen>
  80a434:	1029883a 	mov	r20,r2
  80a438:	dd401d83 	ldbu	r21,118(sp)
  80a43c:	df002215 	stw	fp,136(sp)
  80a440:	0021883a 	mov	r16,zero
  80a444:	da002a17 	ldw	r8,168(sp)
  80a448:	003c3906 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  80a44c:	d9402017 	ldw	r5,128(sp)
  80a450:	d9002117 	ldw	r4,132(sp)
  80a454:	d9801a04 	addi	r6,sp,104
  80a458:	08090100 	call	809010 <__sprint_r.part.0>
  80a45c:	103e691e 	bne	r2,zero,809e04 <__alt_mem_epcs_flash_controller_0+0xff800e04>
  80a460:	d9001b17 	ldw	r4,108(sp)
  80a464:	d8801c17 	ldw	r2,112(sp)
  80a468:	d811883a 	mov	r8,sp
  80a46c:	21400044 	addi	r5,r4,1
  80a470:	003e2e06 	br	809d2c <__alt_mem_epcs_flash_controller_0+0xff800d2c>
  80a474:	010020b4 	movhi	r4,130
  80a478:	212ffd04 	addi	r4,r4,-16396
  80a47c:	d9002315 	stw	r4,140(sp)
  80a480:	d9001b17 	ldw	r4,108(sp)
  80a484:	21000044 	addi	r4,r4,1
  80a488:	003c5e06 	br	809604 <__alt_mem_epcs_flash_controller_0+0xff800604>
  80a48c:	002b883a 	mov	r21,zero
  80a490:	00800084 	movi	r2,2
  80a494:	10803fcc 	andi	r2,r2,255
  80a498:	01000044 	movi	r4,1
  80a49c:	11002b26 	beq	r2,r4,80a54c <___vfiprintf_internal_r+0x1428>
  80a4a0:	01000084 	movi	r4,2
  80a4a4:	11002b1e 	bne	r2,r4,80a554 <___vfiprintf_internal_r+0x1430>
  80a4a8:	1823883a 	mov	r17,r3
  80a4ac:	003ee506 	br	80a044 <__alt_mem_epcs_flash_controller_0+0xff801044>
  80a4b0:	8807883a 	mov	r3,r17
  80a4b4:	00800044 	movi	r2,1
  80a4b8:	003ff606 	br	80a494 <__alt_mem_epcs_flash_controller_0+0xff801494>
  80a4bc:	00800184 	movi	r2,6
  80a4c0:	1400012e 	bgeu	r2,r16,80a4c8 <___vfiprintf_internal_r+0x13a4>
  80a4c4:	1021883a 	mov	r16,r2
  80a4c8:	8029883a 	mov	r20,r16
  80a4cc:	8027883a 	mov	r19,r16
  80a4d0:	80002216 	blt	r16,zero,80a55c <___vfiprintf_internal_r+0x1438>
  80a4d4:	05c020b4 	movhi	r23,130
  80a4d8:	df002215 	stw	fp,136(sp)
  80a4dc:	bdef9e04 	addi	r23,r23,-16776
  80a4e0:	003cfb06 	br	8098d0 <__alt_mem_epcs_flash_controller_0+0xff8008d0>
  80a4e4:	d9002217 	ldw	r4,136(sp)
  80a4e8:	d9402417 	ldw	r5,144(sp)
  80a4ec:	20800017 	ldw	r2,0(r4)
  80a4f0:	21000104 	addi	r4,r4,4
  80a4f4:	d9002215 	stw	r4,136(sp)
  80a4f8:	11400015 	stw	r5,0(r2)
  80a4fc:	003b3d06 	br	8091f4 <__alt_mem_epcs_flash_controller_0+0xff8001f4>
  80a500:	014020b4 	movhi	r5,130
  80a504:	296ffd04 	addi	r5,r5,-16396
  80a508:	d9402315 	stw	r5,140(sp)
  80a50c:	d9401b17 	ldw	r5,108(sp)
  80a510:	29400044 	addi	r5,r5,1
  80a514:	003e6d06 	br	809ecc <__alt_mem_epcs_flash_controller_0+0xff800ecc>
  80a518:	8029883a 	mov	r20,r16
  80a51c:	dd401d83 	ldbu	r21,118(sp)
  80a520:	df002215 	stw	fp,136(sp)
  80a524:	0021883a 	mov	r16,zero
  80a528:	003c0106 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  80a52c:	00c020b4 	movhi	r3,130
  80a530:	18eff904 	addi	r3,r3,-16412
  80a534:	d8c02315 	stw	r3,140(sp)
  80a538:	280d883a 	mov	r6,r5
  80a53c:	003c6906 	br	8096e4 <__alt_mem_epcs_flash_controller_0+0xff8006e4>
  80a540:	802d883a 	mov	r22,r16
  80a544:	0021883a 	mov	r16,zero
  80a548:	003b5406 	br	80929c <__alt_mem_epcs_flash_controller_0+0xff80029c>
  80a54c:	1823883a 	mov	r17,r3
  80a550:	003cf306 	br	809920 <__alt_mem_epcs_flash_controller_0+0xff800920>
  80a554:	1823883a 	mov	r17,r3
  80a558:	003cad06 	br	809810 <__alt_mem_epcs_flash_controller_0+0xff800810>
  80a55c:	0027883a 	mov	r19,zero
  80a560:	003fdc06 	br	80a4d4 <__alt_mem_epcs_flash_controller_0+0xff8014d4>
  80a564:	d9402217 	ldw	r5,136(sp)
  80a568:	8005883a 	mov	r2,r16
  80a56c:	b0c00043 	ldbu	r3,1(r22)
  80a570:	2c000017 	ldw	r16,0(r5)
  80a574:	29000104 	addi	r4,r5,4
  80a578:	d9002215 	stw	r4,136(sp)
  80a57c:	102d883a 	mov	r22,r2
  80a580:	803fa50e 	bge	r16,zero,80a418 <__alt_mem_epcs_flash_controller_0+0xff801418>
  80a584:	18c03fcc 	andi	r3,r3,255
  80a588:	18c0201c 	xori	r3,r3,128
  80a58c:	043fffc4 	movi	r16,-1
  80a590:	18ffe004 	addi	r3,r3,-128
  80a594:	003b4006 	br	809298 <__alt_mem_epcs_flash_controller_0+0xff800298>
  80a598:	d9402303 	ldbu	r5,140(sp)
  80a59c:	d9401d85 	stb	r5,118(sp)
  80a5a0:	003cae06 	br	80985c <__alt_mem_epcs_flash_controller_0+0xff80085c>
  80a5a4:	d8c02303 	ldbu	r3,140(sp)
  80a5a8:	d8c01d85 	stb	r3,118(sp)
  80a5ac:	003d1406 	br	809a00 <__alt_mem_epcs_flash_controller_0+0xff800a00>
  80a5b0:	d8c02303 	ldbu	r3,140(sp)
  80a5b4:	d8c01d85 	stb	r3,118(sp)
  80a5b8:	003cca06 	br	8098e4 <__alt_mem_epcs_flash_controller_0+0xff8008e4>
  80a5bc:	8880004c 	andi	r2,r17,1
  80a5c0:	002b883a 	mov	r21,zero
  80a5c4:	10000526 	beq	r2,zero,80a5dc <___vfiprintf_internal_r+0x14b8>
  80a5c8:	00800c04 	movi	r2,48
  80a5cc:	d88019c5 	stb	r2,103(sp)
  80a5d0:	dd002817 	ldw	r20,160(sp)
  80a5d4:	ddc019c4 	addi	r23,sp,103
  80a5d8:	003bd506 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  80a5dc:	0029883a 	mov	r20,zero
  80a5e0:	ddc01a04 	addi	r23,sp,104
  80a5e4:	003bd206 	br	809530 <__alt_mem_epcs_flash_controller_0+0xff800530>
  80a5e8:	d9002303 	ldbu	r4,140(sp)
  80a5ec:	d9001d85 	stb	r4,118(sp)
  80a5f0:	003da606 	br	809c8c <__alt_mem_epcs_flash_controller_0+0xff800c8c>
  80a5f4:	d8c02303 	ldbu	r3,140(sp)
  80a5f8:	d8c01d85 	stb	r3,118(sp)
  80a5fc:	003c7606 	br	8097d8 <__alt_mem_epcs_flash_controller_0+0xff8007d8>
  80a600:	d8c02303 	ldbu	r3,140(sp)
  80a604:	d8c01d85 	stb	r3,118(sp)
  80a608:	003c6506 	br	8097a0 <__alt_mem_epcs_flash_controller_0+0xff8007a0>
  80a60c:	d9002303 	ldbu	r4,140(sp)
  80a610:	d9001d85 	stb	r4,118(sp)
  80a614:	003d3d06 	br	809b0c <__alt_mem_epcs_flash_controller_0+0xff800b0c>
  80a618:	d8c02303 	ldbu	r3,140(sp)
  80a61c:	d8c01d85 	stb	r3,118(sp)
  80a620:	003d1d06 	br	809a98 <__alt_mem_epcs_flash_controller_0+0xff800a98>
  80a624:	d8c02303 	ldbu	r3,140(sp)
  80a628:	d8c01d85 	stb	r3,118(sp)
  80a62c:	003d0306 	br	809a3c <__alt_mem_epcs_flash_controller_0+0xff800a3c>

0080a630 <__vfiprintf_internal>:
  80a630:	008020b4 	movhi	r2,130
  80a634:	10b82e04 	addi	r2,r2,-8008
  80a638:	300f883a 	mov	r7,r6
  80a63c:	280d883a 	mov	r6,r5
  80a640:	200b883a 	mov	r5,r4
  80a644:	11000017 	ldw	r4,0(r2)
  80a648:	08091241 	jmpi	809124 <___vfiprintf_internal_r>

0080a64c <__sbprintf>:
  80a64c:	2880030b 	ldhu	r2,12(r5)
  80a650:	2ac01917 	ldw	r11,100(r5)
  80a654:	2a80038b 	ldhu	r10,14(r5)
  80a658:	2a400717 	ldw	r9,28(r5)
  80a65c:	2a000917 	ldw	r8,36(r5)
  80a660:	defee204 	addi	sp,sp,-1144
  80a664:	00c10004 	movi	r3,1024
  80a668:	dc011a15 	stw	r16,1128(sp)
  80a66c:	10bfff4c 	andi	r2,r2,65533
  80a670:	2821883a 	mov	r16,r5
  80a674:	d8cb883a 	add	r5,sp,r3
  80a678:	dc811c15 	stw	r18,1136(sp)
  80a67c:	dc411b15 	stw	r17,1132(sp)
  80a680:	dfc11d15 	stw	ra,1140(sp)
  80a684:	2025883a 	mov	r18,r4
  80a688:	d881030d 	sth	r2,1036(sp)
  80a68c:	dac11915 	stw	r11,1124(sp)
  80a690:	da81038d 	sth	r10,1038(sp)
  80a694:	da410715 	stw	r9,1052(sp)
  80a698:	da010915 	stw	r8,1060(sp)
  80a69c:	dec10015 	stw	sp,1024(sp)
  80a6a0:	dec10415 	stw	sp,1040(sp)
  80a6a4:	d8c10215 	stw	r3,1032(sp)
  80a6a8:	d8c10515 	stw	r3,1044(sp)
  80a6ac:	d8010615 	stw	zero,1048(sp)
  80a6b0:	08091240 	call	809124 <___vfiprintf_internal_r>
  80a6b4:	1023883a 	mov	r17,r2
  80a6b8:	10000416 	blt	r2,zero,80a6cc <__sbprintf+0x80>
  80a6bc:	d9410004 	addi	r5,sp,1024
  80a6c0:	9009883a 	mov	r4,r18
  80a6c4:	08016740 	call	801674 <_fflush_r>
  80a6c8:	10000d1e 	bne	r2,zero,80a700 <__sbprintf+0xb4>
  80a6cc:	d881030b 	ldhu	r2,1036(sp)
  80a6d0:	1080100c 	andi	r2,r2,64
  80a6d4:	10000326 	beq	r2,zero,80a6e4 <__sbprintf+0x98>
  80a6d8:	8080030b 	ldhu	r2,12(r16)
  80a6dc:	10801014 	ori	r2,r2,64
  80a6e0:	8080030d 	sth	r2,12(r16)
  80a6e4:	8805883a 	mov	r2,r17
  80a6e8:	dfc11d17 	ldw	ra,1140(sp)
  80a6ec:	dc811c17 	ldw	r18,1136(sp)
  80a6f0:	dc411b17 	ldw	r17,1132(sp)
  80a6f4:	dc011a17 	ldw	r16,1128(sp)
  80a6f8:	dec11e04 	addi	sp,sp,1144
  80a6fc:	f800283a 	ret
  80a700:	047fffc4 	movi	r17,-1
  80a704:	003ff106 	br	80a6cc <__alt_mem_epcs_flash_controller_0+0xff8016cc>

0080a708 <__swbuf_r>:
  80a708:	defffb04 	addi	sp,sp,-20
  80a70c:	dcc00315 	stw	r19,12(sp)
  80a710:	dc800215 	stw	r18,8(sp)
  80a714:	dc000015 	stw	r16,0(sp)
  80a718:	dfc00415 	stw	ra,16(sp)
  80a71c:	dc400115 	stw	r17,4(sp)
  80a720:	2025883a 	mov	r18,r4
  80a724:	2827883a 	mov	r19,r5
  80a728:	3021883a 	mov	r16,r6
  80a72c:	20000226 	beq	r4,zero,80a738 <__swbuf_r+0x30>
  80a730:	20800e17 	ldw	r2,56(r4)
  80a734:	10004226 	beq	r2,zero,80a840 <__swbuf_r+0x138>
  80a738:	80800617 	ldw	r2,24(r16)
  80a73c:	8100030b 	ldhu	r4,12(r16)
  80a740:	80800215 	stw	r2,8(r16)
  80a744:	2080020c 	andi	r2,r4,8
  80a748:	10003626 	beq	r2,zero,80a824 <__swbuf_r+0x11c>
  80a74c:	80c00417 	ldw	r3,16(r16)
  80a750:	18003426 	beq	r3,zero,80a824 <__swbuf_r+0x11c>
  80a754:	2088000c 	andi	r2,r4,8192
  80a758:	9c403fcc 	andi	r17,r19,255
  80a75c:	10001a26 	beq	r2,zero,80a7c8 <__swbuf_r+0xc0>
  80a760:	80800017 	ldw	r2,0(r16)
  80a764:	81000517 	ldw	r4,20(r16)
  80a768:	10c7c83a 	sub	r3,r2,r3
  80a76c:	1900200e 	bge	r3,r4,80a7f0 <__swbuf_r+0xe8>
  80a770:	18c00044 	addi	r3,r3,1
  80a774:	81000217 	ldw	r4,8(r16)
  80a778:	11400044 	addi	r5,r2,1
  80a77c:	81400015 	stw	r5,0(r16)
  80a780:	213fffc4 	addi	r4,r4,-1
  80a784:	81000215 	stw	r4,8(r16)
  80a788:	14c00005 	stb	r19,0(r2)
  80a78c:	80800517 	ldw	r2,20(r16)
  80a790:	10c01e26 	beq	r2,r3,80a80c <__swbuf_r+0x104>
  80a794:	8080030b 	ldhu	r2,12(r16)
  80a798:	1080004c 	andi	r2,r2,1
  80a79c:	10000226 	beq	r2,zero,80a7a8 <__swbuf_r+0xa0>
  80a7a0:	00800284 	movi	r2,10
  80a7a4:	88801926 	beq	r17,r2,80a80c <__swbuf_r+0x104>
  80a7a8:	8805883a 	mov	r2,r17
  80a7ac:	dfc00417 	ldw	ra,16(sp)
  80a7b0:	dcc00317 	ldw	r19,12(sp)
  80a7b4:	dc800217 	ldw	r18,8(sp)
  80a7b8:	dc400117 	ldw	r17,4(sp)
  80a7bc:	dc000017 	ldw	r16,0(sp)
  80a7c0:	dec00504 	addi	sp,sp,20
  80a7c4:	f800283a 	ret
  80a7c8:	81401917 	ldw	r5,100(r16)
  80a7cc:	00b7ffc4 	movi	r2,-8193
  80a7d0:	21080014 	ori	r4,r4,8192
  80a7d4:	2884703a 	and	r2,r5,r2
  80a7d8:	80801915 	stw	r2,100(r16)
  80a7dc:	80800017 	ldw	r2,0(r16)
  80a7e0:	8100030d 	sth	r4,12(r16)
  80a7e4:	81000517 	ldw	r4,20(r16)
  80a7e8:	10c7c83a 	sub	r3,r2,r3
  80a7ec:	193fe016 	blt	r3,r4,80a770 <__alt_mem_epcs_flash_controller_0+0xff801770>
  80a7f0:	800b883a 	mov	r5,r16
  80a7f4:	9009883a 	mov	r4,r18
  80a7f8:	08016740 	call	801674 <_fflush_r>
  80a7fc:	1000071e 	bne	r2,zero,80a81c <__swbuf_r+0x114>
  80a800:	80800017 	ldw	r2,0(r16)
  80a804:	00c00044 	movi	r3,1
  80a808:	003fda06 	br	80a774 <__alt_mem_epcs_flash_controller_0+0xff801774>
  80a80c:	800b883a 	mov	r5,r16
  80a810:	9009883a 	mov	r4,r18
  80a814:	08016740 	call	801674 <_fflush_r>
  80a818:	103fe326 	beq	r2,zero,80a7a8 <__alt_mem_epcs_flash_controller_0+0xff8017a8>
  80a81c:	00bfffc4 	movi	r2,-1
  80a820:	003fe206 	br	80a7ac <__alt_mem_epcs_flash_controller_0+0xff8017ac>
  80a824:	800b883a 	mov	r5,r16
  80a828:	9009883a 	mov	r4,r18
  80a82c:	080513c0 	call	80513c <__swsetup_r>
  80a830:	103ffa1e 	bne	r2,zero,80a81c <__alt_mem_epcs_flash_controller_0+0xff80181c>
  80a834:	8100030b 	ldhu	r4,12(r16)
  80a838:	80c00417 	ldw	r3,16(r16)
  80a83c:	003fc506 	br	80a754 <__alt_mem_epcs_flash_controller_0+0xff801754>
  80a840:	0801a600 	call	801a60 <__sinit>
  80a844:	003fbc06 	br	80a738 <__alt_mem_epcs_flash_controller_0+0xff801738>

0080a848 <__swbuf>:
  80a848:	008020b4 	movhi	r2,130
  80a84c:	10b82e04 	addi	r2,r2,-8008
  80a850:	280d883a 	mov	r6,r5
  80a854:	200b883a 	mov	r5,r4
  80a858:	11000017 	ldw	r4,0(r2)
  80a85c:	080a7081 	jmpi	80a708 <__swbuf_r>

0080a860 <_calloc_r>:
  80a860:	defffe04 	addi	sp,sp,-8
  80a864:	2805883a 	mov	r2,r5
  80a868:	dc000015 	stw	r16,0(sp)
  80a86c:	300b883a 	mov	r5,r6
  80a870:	2021883a 	mov	r16,r4
  80a874:	1009883a 	mov	r4,r2
  80a878:	dfc00115 	stw	ra,4(sp)
  80a87c:	080b99c0 	call	80b99c <__mulsi3>
  80a880:	100b883a 	mov	r5,r2
  80a884:	8009883a 	mov	r4,r16
  80a888:	080206c0 	call	80206c <_malloc_r>
  80a88c:	10002926 	beq	r2,zero,80a934 <_calloc_r+0xd4>
  80a890:	11bfff17 	ldw	r6,-4(r2)
  80a894:	1021883a 	mov	r16,r2
  80a898:	00bfff04 	movi	r2,-4
  80a89c:	308c703a 	and	r6,r6,r2
  80a8a0:	00c00904 	movi	r3,36
  80a8a4:	308d883a 	add	r6,r6,r2
  80a8a8:	19801636 	bltu	r3,r6,80a904 <_calloc_r+0xa4>
  80a8ac:	008004c4 	movi	r2,19
  80a8b0:	11800b2e 	bgeu	r2,r6,80a8e0 <_calloc_r+0x80>
  80a8b4:	80000015 	stw	zero,0(r16)
  80a8b8:	80000115 	stw	zero,4(r16)
  80a8bc:	008006c4 	movi	r2,27
  80a8c0:	11801a2e 	bgeu	r2,r6,80a92c <_calloc_r+0xcc>
  80a8c4:	80000215 	stw	zero,8(r16)
  80a8c8:	80000315 	stw	zero,12(r16)
  80a8cc:	30c0151e 	bne	r6,r3,80a924 <_calloc_r+0xc4>
  80a8d0:	80000415 	stw	zero,16(r16)
  80a8d4:	80800604 	addi	r2,r16,24
  80a8d8:	80000515 	stw	zero,20(r16)
  80a8dc:	00000106 	br	80a8e4 <_calloc_r+0x84>
  80a8e0:	8005883a 	mov	r2,r16
  80a8e4:	10000015 	stw	zero,0(r2)
  80a8e8:	10000115 	stw	zero,4(r2)
  80a8ec:	10000215 	stw	zero,8(r2)
  80a8f0:	8005883a 	mov	r2,r16
  80a8f4:	dfc00117 	ldw	ra,4(sp)
  80a8f8:	dc000017 	ldw	r16,0(sp)
  80a8fc:	dec00204 	addi	sp,sp,8
  80a900:	f800283a 	ret
  80a904:	000b883a 	mov	r5,zero
  80a908:	8009883a 	mov	r4,r16
  80a90c:	08028780 	call	802878 <memset>
  80a910:	8005883a 	mov	r2,r16
  80a914:	dfc00117 	ldw	ra,4(sp)
  80a918:	dc000017 	ldw	r16,0(sp)
  80a91c:	dec00204 	addi	sp,sp,8
  80a920:	f800283a 	ret
  80a924:	80800404 	addi	r2,r16,16
  80a928:	003fee06 	br	80a8e4 <__alt_mem_epcs_flash_controller_0+0xff8018e4>
  80a92c:	80800204 	addi	r2,r16,8
  80a930:	003fec06 	br	80a8e4 <__alt_mem_epcs_flash_controller_0+0xff8018e4>
  80a934:	0005883a 	mov	r2,zero
  80a938:	003fee06 	br	80a8f4 <__alt_mem_epcs_flash_controller_0+0xff8018f4>

0080a93c <__fputwc>:
  80a93c:	defff804 	addi	sp,sp,-32
  80a940:	dcc00415 	stw	r19,16(sp)
  80a944:	dc800315 	stw	r18,12(sp)
  80a948:	dc000115 	stw	r16,4(sp)
  80a94c:	dfc00715 	stw	ra,28(sp)
  80a950:	dd400615 	stw	r21,24(sp)
  80a954:	dd000515 	stw	r20,20(sp)
  80a958:	dc400215 	stw	r17,8(sp)
  80a95c:	2027883a 	mov	r19,r4
  80a960:	2825883a 	mov	r18,r5
  80a964:	3021883a 	mov	r16,r6
  80a968:	08070e40 	call	8070e4 <__locale_mb_cur_max>
  80a96c:	00c00044 	movi	r3,1
  80a970:	10c03e26 	beq	r2,r3,80aa6c <__fputwc+0x130>
  80a974:	81c01704 	addi	r7,r16,92
  80a978:	900d883a 	mov	r6,r18
  80a97c:	d80b883a 	mov	r5,sp
  80a980:	9809883a 	mov	r4,r19
  80a984:	080abf40 	call	80abf4 <_wcrtomb_r>
  80a988:	1029883a 	mov	r20,r2
  80a98c:	00bfffc4 	movi	r2,-1
  80a990:	a0802026 	beq	r20,r2,80aa14 <__fputwc+0xd8>
  80a994:	d9400003 	ldbu	r5,0(sp)
  80a998:	a0001c26 	beq	r20,zero,80aa0c <__fputwc+0xd0>
  80a99c:	0023883a 	mov	r17,zero
  80a9a0:	05400284 	movi	r21,10
  80a9a4:	00000906 	br	80a9cc <__fputwc+0x90>
  80a9a8:	80800017 	ldw	r2,0(r16)
  80a9ac:	11400005 	stb	r5,0(r2)
  80a9b0:	80c00017 	ldw	r3,0(r16)
  80a9b4:	18c00044 	addi	r3,r3,1
  80a9b8:	80c00015 	stw	r3,0(r16)
  80a9bc:	8c400044 	addi	r17,r17,1
  80a9c0:	dc45883a 	add	r2,sp,r17
  80a9c4:	8d00112e 	bgeu	r17,r20,80aa0c <__fputwc+0xd0>
  80a9c8:	11400003 	ldbu	r5,0(r2)
  80a9cc:	80c00217 	ldw	r3,8(r16)
  80a9d0:	18ffffc4 	addi	r3,r3,-1
  80a9d4:	80c00215 	stw	r3,8(r16)
  80a9d8:	183ff30e 	bge	r3,zero,80a9a8 <__alt_mem_epcs_flash_controller_0+0xff8019a8>
  80a9dc:	80800617 	ldw	r2,24(r16)
  80a9e0:	18801916 	blt	r3,r2,80aa48 <__fputwc+0x10c>
  80a9e4:	80800017 	ldw	r2,0(r16)
  80a9e8:	11400005 	stb	r5,0(r2)
  80a9ec:	80800017 	ldw	r2,0(r16)
  80a9f0:	10c00003 	ldbu	r3,0(r2)
  80a9f4:	10800044 	addi	r2,r2,1
  80a9f8:	1d402326 	beq	r3,r21,80aa88 <__fputwc+0x14c>
  80a9fc:	80800015 	stw	r2,0(r16)
  80aa00:	8c400044 	addi	r17,r17,1
  80aa04:	dc45883a 	add	r2,sp,r17
  80aa08:	8d3fef36 	bltu	r17,r20,80a9c8 <__alt_mem_epcs_flash_controller_0+0xff8019c8>
  80aa0c:	9005883a 	mov	r2,r18
  80aa10:	00000406 	br	80aa24 <__fputwc+0xe8>
  80aa14:	80c0030b 	ldhu	r3,12(r16)
  80aa18:	a005883a 	mov	r2,r20
  80aa1c:	18c01014 	ori	r3,r3,64
  80aa20:	80c0030d 	sth	r3,12(r16)
  80aa24:	dfc00717 	ldw	ra,28(sp)
  80aa28:	dd400617 	ldw	r21,24(sp)
  80aa2c:	dd000517 	ldw	r20,20(sp)
  80aa30:	dcc00417 	ldw	r19,16(sp)
  80aa34:	dc800317 	ldw	r18,12(sp)
  80aa38:	dc400217 	ldw	r17,8(sp)
  80aa3c:	dc000117 	ldw	r16,4(sp)
  80aa40:	dec00804 	addi	sp,sp,32
  80aa44:	f800283a 	ret
  80aa48:	800d883a 	mov	r6,r16
  80aa4c:	29403fcc 	andi	r5,r5,255
  80aa50:	9809883a 	mov	r4,r19
  80aa54:	080a7080 	call	80a708 <__swbuf_r>
  80aa58:	10bfffe0 	cmpeqi	r2,r2,-1
  80aa5c:	10803fcc 	andi	r2,r2,255
  80aa60:	103fd626 	beq	r2,zero,80a9bc <__alt_mem_epcs_flash_controller_0+0xff8019bc>
  80aa64:	00bfffc4 	movi	r2,-1
  80aa68:	003fee06 	br	80aa24 <__alt_mem_epcs_flash_controller_0+0xff801a24>
  80aa6c:	90ffffc4 	addi	r3,r18,-1
  80aa70:	01003f84 	movi	r4,254
  80aa74:	20ffbf36 	bltu	r4,r3,80a974 <__alt_mem_epcs_flash_controller_0+0xff801974>
  80aa78:	900b883a 	mov	r5,r18
  80aa7c:	dc800005 	stb	r18,0(sp)
  80aa80:	1029883a 	mov	r20,r2
  80aa84:	003fc506 	br	80a99c <__alt_mem_epcs_flash_controller_0+0xff80199c>
  80aa88:	800d883a 	mov	r6,r16
  80aa8c:	a80b883a 	mov	r5,r21
  80aa90:	9809883a 	mov	r4,r19
  80aa94:	080a7080 	call	80a708 <__swbuf_r>
  80aa98:	10bfffe0 	cmpeqi	r2,r2,-1
  80aa9c:	003fef06 	br	80aa5c <__alt_mem_epcs_flash_controller_0+0xff801a5c>

0080aaa0 <_fputwc_r>:
  80aaa0:	3080030b 	ldhu	r2,12(r6)
  80aaa4:	10c8000c 	andi	r3,r2,8192
  80aaa8:	1800051e 	bne	r3,zero,80aac0 <_fputwc_r+0x20>
  80aaac:	30c01917 	ldw	r3,100(r6)
  80aab0:	10880014 	ori	r2,r2,8192
  80aab4:	3080030d 	sth	r2,12(r6)
  80aab8:	18880014 	ori	r2,r3,8192
  80aabc:	30801915 	stw	r2,100(r6)
  80aac0:	080a93c1 	jmpi	80a93c <__fputwc>

0080aac4 <fputwc>:
  80aac4:	008020b4 	movhi	r2,130
  80aac8:	defffc04 	addi	sp,sp,-16
  80aacc:	10b82e04 	addi	r2,r2,-8008
  80aad0:	dc000115 	stw	r16,4(sp)
  80aad4:	14000017 	ldw	r16,0(r2)
  80aad8:	dc400215 	stw	r17,8(sp)
  80aadc:	dfc00315 	stw	ra,12(sp)
  80aae0:	2023883a 	mov	r17,r4
  80aae4:	80000226 	beq	r16,zero,80aaf0 <fputwc+0x2c>
  80aae8:	80800e17 	ldw	r2,56(r16)
  80aaec:	10001026 	beq	r2,zero,80ab30 <fputwc+0x6c>
  80aaf0:	2880030b 	ldhu	r2,12(r5)
  80aaf4:	10c8000c 	andi	r3,r2,8192
  80aaf8:	1800051e 	bne	r3,zero,80ab10 <fputwc+0x4c>
  80aafc:	28c01917 	ldw	r3,100(r5)
  80ab00:	10880014 	ori	r2,r2,8192
  80ab04:	2880030d 	sth	r2,12(r5)
  80ab08:	18880014 	ori	r2,r3,8192
  80ab0c:	28801915 	stw	r2,100(r5)
  80ab10:	280d883a 	mov	r6,r5
  80ab14:	8009883a 	mov	r4,r16
  80ab18:	880b883a 	mov	r5,r17
  80ab1c:	dfc00317 	ldw	ra,12(sp)
  80ab20:	dc400217 	ldw	r17,8(sp)
  80ab24:	dc000117 	ldw	r16,4(sp)
  80ab28:	dec00404 	addi	sp,sp,16
  80ab2c:	080a93c1 	jmpi	80a93c <__fputwc>
  80ab30:	8009883a 	mov	r4,r16
  80ab34:	d9400015 	stw	r5,0(sp)
  80ab38:	0801a600 	call	801a60 <__sinit>
  80ab3c:	d9400017 	ldw	r5,0(sp)
  80ab40:	003feb06 	br	80aaf0 <__alt_mem_epcs_flash_controller_0+0xff801af0>

0080ab44 <_fstat_r>:
  80ab44:	defffd04 	addi	sp,sp,-12
  80ab48:	2805883a 	mov	r2,r5
  80ab4c:	dc000015 	stw	r16,0(sp)
  80ab50:	040020b4 	movhi	r16,130
  80ab54:	dc400115 	stw	r17,4(sp)
  80ab58:	84387b04 	addi	r16,r16,-7700
  80ab5c:	2023883a 	mov	r17,r4
  80ab60:	300b883a 	mov	r5,r6
  80ab64:	1009883a 	mov	r4,r2
  80ab68:	dfc00215 	stw	ra,8(sp)
  80ab6c:	80000015 	stw	zero,0(r16)
  80ab70:	080e3e40 	call	80e3e4 <fstat>
  80ab74:	00ffffc4 	movi	r3,-1
  80ab78:	10c00526 	beq	r2,r3,80ab90 <_fstat_r+0x4c>
  80ab7c:	dfc00217 	ldw	ra,8(sp)
  80ab80:	dc400117 	ldw	r17,4(sp)
  80ab84:	dc000017 	ldw	r16,0(sp)
  80ab88:	dec00304 	addi	sp,sp,12
  80ab8c:	f800283a 	ret
  80ab90:	80c00017 	ldw	r3,0(r16)
  80ab94:	183ff926 	beq	r3,zero,80ab7c <__alt_mem_epcs_flash_controller_0+0xff801b7c>
  80ab98:	88c00015 	stw	r3,0(r17)
  80ab9c:	003ff706 	br	80ab7c <__alt_mem_epcs_flash_controller_0+0xff801b7c>

0080aba0 <_isatty_r>:
  80aba0:	defffd04 	addi	sp,sp,-12
  80aba4:	dc000015 	stw	r16,0(sp)
  80aba8:	040020b4 	movhi	r16,130
  80abac:	dc400115 	stw	r17,4(sp)
  80abb0:	84387b04 	addi	r16,r16,-7700
  80abb4:	2023883a 	mov	r17,r4
  80abb8:	2809883a 	mov	r4,r5
  80abbc:	dfc00215 	stw	ra,8(sp)
  80abc0:	80000015 	stw	zero,0(r16)
  80abc4:	080e7780 	call	80e778 <isatty>
  80abc8:	00ffffc4 	movi	r3,-1
  80abcc:	10c00526 	beq	r2,r3,80abe4 <_isatty_r+0x44>
  80abd0:	dfc00217 	ldw	ra,8(sp)
  80abd4:	dc400117 	ldw	r17,4(sp)
  80abd8:	dc000017 	ldw	r16,0(sp)
  80abdc:	dec00304 	addi	sp,sp,12
  80abe0:	f800283a 	ret
  80abe4:	80c00017 	ldw	r3,0(r16)
  80abe8:	183ff926 	beq	r3,zero,80abd0 <__alt_mem_epcs_flash_controller_0+0xff801bd0>
  80abec:	88c00015 	stw	r3,0(r17)
  80abf0:	003ff706 	br	80abd0 <__alt_mem_epcs_flash_controller_0+0xff801bd0>

0080abf4 <_wcrtomb_r>:
  80abf4:	defff604 	addi	sp,sp,-40
  80abf8:	008020b4 	movhi	r2,130
  80abfc:	dc800815 	stw	r18,32(sp)
  80ac00:	dc400715 	stw	r17,28(sp)
  80ac04:	dc000615 	stw	r16,24(sp)
  80ac08:	10b83204 	addi	r2,r2,-7992
  80ac0c:	dfc00915 	stw	ra,36(sp)
  80ac10:	2021883a 	mov	r16,r4
  80ac14:	3823883a 	mov	r17,r7
  80ac18:	14800017 	ldw	r18,0(r2)
  80ac1c:	28001426 	beq	r5,zero,80ac70 <_wcrtomb_r+0x7c>
  80ac20:	d9400415 	stw	r5,16(sp)
  80ac24:	d9800515 	stw	r6,20(sp)
  80ac28:	08070d80 	call	8070d8 <__locale_charset>
  80ac2c:	d9800517 	ldw	r6,20(sp)
  80ac30:	d9400417 	ldw	r5,16(sp)
  80ac34:	100f883a 	mov	r7,r2
  80ac38:	dc400015 	stw	r17,0(sp)
  80ac3c:	8009883a 	mov	r4,r16
  80ac40:	903ee83a 	callr	r18
  80ac44:	00ffffc4 	movi	r3,-1
  80ac48:	10c0031e 	bne	r2,r3,80ac58 <_wcrtomb_r+0x64>
  80ac4c:	88000015 	stw	zero,0(r17)
  80ac50:	00c02284 	movi	r3,138
  80ac54:	80c00015 	stw	r3,0(r16)
  80ac58:	dfc00917 	ldw	ra,36(sp)
  80ac5c:	dc800817 	ldw	r18,32(sp)
  80ac60:	dc400717 	ldw	r17,28(sp)
  80ac64:	dc000617 	ldw	r16,24(sp)
  80ac68:	dec00a04 	addi	sp,sp,40
  80ac6c:	f800283a 	ret
  80ac70:	08070d80 	call	8070d8 <__locale_charset>
  80ac74:	100f883a 	mov	r7,r2
  80ac78:	dc400015 	stw	r17,0(sp)
  80ac7c:	000d883a 	mov	r6,zero
  80ac80:	d9400104 	addi	r5,sp,4
  80ac84:	8009883a 	mov	r4,r16
  80ac88:	903ee83a 	callr	r18
  80ac8c:	003fed06 	br	80ac44 <__alt_mem_epcs_flash_controller_0+0xff801c44>

0080ac90 <wcrtomb>:
  80ac90:	defff604 	addi	sp,sp,-40
  80ac94:	008020b4 	movhi	r2,130
  80ac98:	dc800615 	stw	r18,24(sp)
  80ac9c:	dc400515 	stw	r17,20(sp)
  80aca0:	10b82e04 	addi	r2,r2,-8008
  80aca4:	dfc00915 	stw	ra,36(sp)
  80aca8:	dd000815 	stw	r20,32(sp)
  80acac:	dcc00715 	stw	r19,28(sp)
  80acb0:	dc000415 	stw	r16,16(sp)
  80acb4:	3025883a 	mov	r18,r6
  80acb8:	14400017 	ldw	r17,0(r2)
  80acbc:	20001926 	beq	r4,zero,80ad24 <wcrtomb+0x94>
  80acc0:	008020b4 	movhi	r2,130
  80acc4:	10b83204 	addi	r2,r2,-7992
  80acc8:	15000017 	ldw	r20,0(r2)
  80accc:	2021883a 	mov	r16,r4
  80acd0:	2827883a 	mov	r19,r5
  80acd4:	08070d80 	call	8070d8 <__locale_charset>
  80acd8:	100f883a 	mov	r7,r2
  80acdc:	dc800015 	stw	r18,0(sp)
  80ace0:	980d883a 	mov	r6,r19
  80ace4:	800b883a 	mov	r5,r16
  80ace8:	8809883a 	mov	r4,r17
  80acec:	a03ee83a 	callr	r20
  80acf0:	00ffffc4 	movi	r3,-1
  80acf4:	10c0031e 	bne	r2,r3,80ad04 <wcrtomb+0x74>
  80acf8:	90000015 	stw	zero,0(r18)
  80acfc:	00c02284 	movi	r3,138
  80ad00:	88c00015 	stw	r3,0(r17)
  80ad04:	dfc00917 	ldw	ra,36(sp)
  80ad08:	dd000817 	ldw	r20,32(sp)
  80ad0c:	dcc00717 	ldw	r19,28(sp)
  80ad10:	dc800617 	ldw	r18,24(sp)
  80ad14:	dc400517 	ldw	r17,20(sp)
  80ad18:	dc000417 	ldw	r16,16(sp)
  80ad1c:	dec00a04 	addi	sp,sp,40
  80ad20:	f800283a 	ret
  80ad24:	008020b4 	movhi	r2,130
  80ad28:	10b83204 	addi	r2,r2,-7992
  80ad2c:	14000017 	ldw	r16,0(r2)
  80ad30:	08070d80 	call	8070d8 <__locale_charset>
  80ad34:	100f883a 	mov	r7,r2
  80ad38:	dc800015 	stw	r18,0(sp)
  80ad3c:	000d883a 	mov	r6,zero
  80ad40:	d9400104 	addi	r5,sp,4
  80ad44:	8809883a 	mov	r4,r17
  80ad48:	803ee83a 	callr	r16
  80ad4c:	003fe806 	br	80acf0 <__alt_mem_epcs_flash_controller_0+0xff801cf0>

0080ad50 <__ascii_wctomb>:
  80ad50:	28000526 	beq	r5,zero,80ad68 <__ascii_wctomb+0x18>
  80ad54:	00803fc4 	movi	r2,255
  80ad58:	11800536 	bltu	r2,r6,80ad70 <__ascii_wctomb+0x20>
  80ad5c:	29800005 	stb	r6,0(r5)
  80ad60:	00800044 	movi	r2,1
  80ad64:	f800283a 	ret
  80ad68:	0005883a 	mov	r2,zero
  80ad6c:	f800283a 	ret
  80ad70:	00802284 	movi	r2,138
  80ad74:	20800015 	stw	r2,0(r4)
  80ad78:	00bfffc4 	movi	r2,-1
  80ad7c:	f800283a 	ret

0080ad80 <_wctomb_r>:
  80ad80:	008020b4 	movhi	r2,130
  80ad84:	defff904 	addi	sp,sp,-28
  80ad88:	10b83204 	addi	r2,r2,-7992
  80ad8c:	dfc00615 	stw	ra,24(sp)
  80ad90:	dc400515 	stw	r17,20(sp)
  80ad94:	dc000415 	stw	r16,16(sp)
  80ad98:	3823883a 	mov	r17,r7
  80ad9c:	14000017 	ldw	r16,0(r2)
  80ada0:	d9000115 	stw	r4,4(sp)
  80ada4:	d9400215 	stw	r5,8(sp)
  80ada8:	d9800315 	stw	r6,12(sp)
  80adac:	08070d80 	call	8070d8 <__locale_charset>
  80adb0:	d9800317 	ldw	r6,12(sp)
  80adb4:	d9400217 	ldw	r5,8(sp)
  80adb8:	d9000117 	ldw	r4,4(sp)
  80adbc:	100f883a 	mov	r7,r2
  80adc0:	dc400015 	stw	r17,0(sp)
  80adc4:	803ee83a 	callr	r16
  80adc8:	dfc00617 	ldw	ra,24(sp)
  80adcc:	dc400517 	ldw	r17,20(sp)
  80add0:	dc000417 	ldw	r16,16(sp)
  80add4:	dec00704 	addi	sp,sp,28
  80add8:	f800283a 	ret

0080addc <__udivdi3>:
  80addc:	defff404 	addi	sp,sp,-48
  80ade0:	dcc00515 	stw	r19,20(sp)
  80ade4:	dc000215 	stw	r16,8(sp)
  80ade8:	dfc00b15 	stw	ra,44(sp)
  80adec:	df000a15 	stw	fp,40(sp)
  80adf0:	ddc00915 	stw	r23,36(sp)
  80adf4:	dd800815 	stw	r22,32(sp)
  80adf8:	dd400715 	stw	r21,28(sp)
  80adfc:	dd000615 	stw	r20,24(sp)
  80ae00:	dc800415 	stw	r18,16(sp)
  80ae04:	dc400315 	stw	r17,12(sp)
  80ae08:	2027883a 	mov	r19,r4
  80ae0c:	2821883a 	mov	r16,r5
  80ae10:	3800461e 	bne	r7,zero,80af2c <__udivdi3+0x150>
  80ae14:	3023883a 	mov	r17,r6
  80ae18:	2025883a 	mov	r18,r4
  80ae1c:	2980572e 	bgeu	r5,r6,80af7c <__udivdi3+0x1a0>
  80ae20:	00bfffd4 	movui	r2,65535
  80ae24:	282d883a 	mov	r22,r5
  80ae28:	1180b236 	bltu	r2,r6,80b0f4 <__udivdi3+0x318>
  80ae2c:	00803fc4 	movi	r2,255
  80ae30:	1185803a 	cmpltu	r2,r2,r6
  80ae34:	100490fa 	slli	r2,r2,3
  80ae38:	3086d83a 	srl	r3,r6,r2
  80ae3c:	010020b4 	movhi	r4,130
  80ae40:	21300104 	addi	r4,r4,-16380
  80ae44:	20c7883a 	add	r3,r4,r3
  80ae48:	18c00003 	ldbu	r3,0(r3)
  80ae4c:	1885883a 	add	r2,r3,r2
  80ae50:	00c00804 	movi	r3,32
  80ae54:	1887c83a 	sub	r3,r3,r2
  80ae58:	18000526 	beq	r3,zero,80ae70 <__udivdi3+0x94>
  80ae5c:	80e0983a 	sll	r16,r16,r3
  80ae60:	9884d83a 	srl	r2,r19,r2
  80ae64:	30e2983a 	sll	r17,r6,r3
  80ae68:	98e4983a 	sll	r18,r19,r3
  80ae6c:	142cb03a 	or	r22,r2,r16
  80ae70:	882ad43a 	srli	r21,r17,16
  80ae74:	b009883a 	mov	r4,r22
  80ae78:	8d3fffcc 	andi	r20,r17,65535
  80ae7c:	a80b883a 	mov	r5,r21
  80ae80:	08012fc0 	call	8012fc <__umodsi3>
  80ae84:	b009883a 	mov	r4,r22
  80ae88:	a80b883a 	mov	r5,r21
  80ae8c:	1027883a 	mov	r19,r2
  80ae90:	08012980 	call	801298 <__udivsi3>
  80ae94:	100b883a 	mov	r5,r2
  80ae98:	a009883a 	mov	r4,r20
  80ae9c:	102d883a 	mov	r22,r2
  80aea0:	080b99c0 	call	80b99c <__mulsi3>
  80aea4:	9826943a 	slli	r19,r19,16
  80aea8:	9006d43a 	srli	r3,r18,16
  80aeac:	1cc6b03a 	or	r3,r3,r19
  80aeb0:	1880052e 	bgeu	r3,r2,80aec8 <__udivdi3+0xec>
  80aeb4:	1c47883a 	add	r3,r3,r17
  80aeb8:	b13fffc4 	addi	r4,r22,-1
  80aebc:	1c400136 	bltu	r3,r17,80aec4 <__udivdi3+0xe8>
  80aec0:	18814236 	bltu	r3,r2,80b3cc <__udivdi3+0x5f0>
  80aec4:	202d883a 	mov	r22,r4
  80aec8:	18a1c83a 	sub	r16,r3,r2
  80aecc:	8009883a 	mov	r4,r16
  80aed0:	a80b883a 	mov	r5,r21
  80aed4:	08012fc0 	call	8012fc <__umodsi3>
  80aed8:	1027883a 	mov	r19,r2
  80aedc:	8009883a 	mov	r4,r16
  80aee0:	a80b883a 	mov	r5,r21
  80aee4:	9826943a 	slli	r19,r19,16
  80aee8:	08012980 	call	801298 <__udivsi3>
  80aeec:	100b883a 	mov	r5,r2
  80aef0:	a009883a 	mov	r4,r20
  80aef4:	94bfffcc 	andi	r18,r18,65535
  80aef8:	1021883a 	mov	r16,r2
  80aefc:	94e4b03a 	or	r18,r18,r19
  80af00:	080b99c0 	call	80b99c <__mulsi3>
  80af04:	9080052e 	bgeu	r18,r2,80af1c <__udivdi3+0x140>
  80af08:	8ca5883a 	add	r18,r17,r18
  80af0c:	80ffffc4 	addi	r3,r16,-1
  80af10:	94410c36 	bltu	r18,r17,80b344 <__udivdi3+0x568>
  80af14:	90810b2e 	bgeu	r18,r2,80b344 <__udivdi3+0x568>
  80af18:	843fff84 	addi	r16,r16,-2
  80af1c:	b004943a 	slli	r2,r22,16
  80af20:	0007883a 	mov	r3,zero
  80af24:	1404b03a 	or	r2,r2,r16
  80af28:	00005e06 	br	80b0a4 <__udivdi3+0x2c8>
  80af2c:	29c05b36 	bltu	r5,r7,80b09c <__udivdi3+0x2c0>
  80af30:	00bfffd4 	movui	r2,65535
  80af34:	11c0672e 	bgeu	r2,r7,80b0d4 <__udivdi3+0x2f8>
  80af38:	00804034 	movhi	r2,256
  80af3c:	10bfffc4 	addi	r2,r2,-1
  80af40:	11c10a36 	bltu	r2,r7,80b36c <__udivdi3+0x590>
  80af44:	00800404 	movi	r2,16
  80af48:	3886d83a 	srl	r3,r7,r2
  80af4c:	010020b4 	movhi	r4,130
  80af50:	21300104 	addi	r4,r4,-16380
  80af54:	20c7883a 	add	r3,r4,r3
  80af58:	18c00003 	ldbu	r3,0(r3)
  80af5c:	05c00804 	movi	r23,32
  80af60:	1885883a 	add	r2,r3,r2
  80af64:	b8afc83a 	sub	r23,r23,r2
  80af68:	b800671e 	bne	r23,zero,80b108 <__udivdi3+0x32c>
  80af6c:	3c010536 	bltu	r7,r16,80b384 <__udivdi3+0x5a8>
  80af70:	9985403a 	cmpgeu	r2,r19,r6
  80af74:	0007883a 	mov	r3,zero
  80af78:	00004a06 	br	80b0a4 <__udivdi3+0x2c8>
  80af7c:	3000041e 	bne	r6,zero,80af90 <__udivdi3+0x1b4>
  80af80:	000b883a 	mov	r5,zero
  80af84:	01000044 	movi	r4,1
  80af88:	08012980 	call	801298 <__udivsi3>
  80af8c:	1023883a 	mov	r17,r2
  80af90:	00bfffd4 	movui	r2,65535
  80af94:	1440532e 	bgeu	r2,r17,80b0e4 <__udivdi3+0x308>
  80af98:	00804034 	movhi	r2,256
  80af9c:	10bfffc4 	addi	r2,r2,-1
  80afa0:	1440f436 	bltu	r2,r17,80b374 <__udivdi3+0x598>
  80afa4:	00800404 	movi	r2,16
  80afa8:	8886d83a 	srl	r3,r17,r2
  80afac:	010020b4 	movhi	r4,130
  80afb0:	21300104 	addi	r4,r4,-16380
  80afb4:	20c7883a 	add	r3,r4,r3
  80afb8:	18c00003 	ldbu	r3,0(r3)
  80afbc:	1885883a 	add	r2,r3,r2
  80afc0:	00c00804 	movi	r3,32
  80afc4:	1887c83a 	sub	r3,r3,r2
  80afc8:	1800a51e 	bne	r3,zero,80b260 <__udivdi3+0x484>
  80afcc:	882ad43a 	srli	r21,r17,16
  80afd0:	8461c83a 	sub	r16,r16,r17
  80afd4:	8d3fffcc 	andi	r20,r17,65535
  80afd8:	00c00044 	movi	r3,1
  80afdc:	a80b883a 	mov	r5,r21
  80afe0:	8009883a 	mov	r4,r16
  80afe4:	d8c00115 	stw	r3,4(sp)
  80afe8:	08012fc0 	call	8012fc <__umodsi3>
  80afec:	a80b883a 	mov	r5,r21
  80aff0:	8009883a 	mov	r4,r16
  80aff4:	1027883a 	mov	r19,r2
  80aff8:	08012980 	call	801298 <__udivsi3>
  80affc:	a00b883a 	mov	r5,r20
  80b000:	1009883a 	mov	r4,r2
  80b004:	102d883a 	mov	r22,r2
  80b008:	080b99c0 	call	80b99c <__mulsi3>
  80b00c:	9826943a 	slli	r19,r19,16
  80b010:	900ed43a 	srli	r7,r18,16
  80b014:	d8c00117 	ldw	r3,4(sp)
  80b018:	3cceb03a 	or	r7,r7,r19
  80b01c:	3880052e 	bgeu	r7,r2,80b034 <__udivdi3+0x258>
  80b020:	3c4f883a 	add	r7,r7,r17
  80b024:	b13fffc4 	addi	r4,r22,-1
  80b028:	3c400136 	bltu	r7,r17,80b030 <__udivdi3+0x254>
  80b02c:	3880e436 	bltu	r7,r2,80b3c0 <__udivdi3+0x5e4>
  80b030:	202d883a 	mov	r22,r4
  80b034:	38a1c83a 	sub	r16,r7,r2
  80b038:	8009883a 	mov	r4,r16
  80b03c:	a80b883a 	mov	r5,r21
  80b040:	d8c00115 	stw	r3,4(sp)
  80b044:	08012fc0 	call	8012fc <__umodsi3>
  80b048:	1027883a 	mov	r19,r2
  80b04c:	8009883a 	mov	r4,r16
  80b050:	a80b883a 	mov	r5,r21
  80b054:	9826943a 	slli	r19,r19,16
  80b058:	08012980 	call	801298 <__udivsi3>
  80b05c:	a00b883a 	mov	r5,r20
  80b060:	1009883a 	mov	r4,r2
  80b064:	94bfffcc 	andi	r18,r18,65535
  80b068:	1021883a 	mov	r16,r2
  80b06c:	94e4b03a 	or	r18,r18,r19
  80b070:	080b99c0 	call	80b99c <__mulsi3>
  80b074:	d8c00117 	ldw	r3,4(sp)
  80b078:	9080052e 	bgeu	r18,r2,80b090 <__udivdi3+0x2b4>
  80b07c:	8ca5883a 	add	r18,r17,r18
  80b080:	813fffc4 	addi	r4,r16,-1
  80b084:	9440ad36 	bltu	r18,r17,80b33c <__udivdi3+0x560>
  80b088:	9080ac2e 	bgeu	r18,r2,80b33c <__udivdi3+0x560>
  80b08c:	843fff84 	addi	r16,r16,-2
  80b090:	b004943a 	slli	r2,r22,16
  80b094:	1404b03a 	or	r2,r2,r16
  80b098:	00000206 	br	80b0a4 <__udivdi3+0x2c8>
  80b09c:	0007883a 	mov	r3,zero
  80b0a0:	0005883a 	mov	r2,zero
  80b0a4:	dfc00b17 	ldw	ra,44(sp)
  80b0a8:	df000a17 	ldw	fp,40(sp)
  80b0ac:	ddc00917 	ldw	r23,36(sp)
  80b0b0:	dd800817 	ldw	r22,32(sp)
  80b0b4:	dd400717 	ldw	r21,28(sp)
  80b0b8:	dd000617 	ldw	r20,24(sp)
  80b0bc:	dcc00517 	ldw	r19,20(sp)
  80b0c0:	dc800417 	ldw	r18,16(sp)
  80b0c4:	dc400317 	ldw	r17,12(sp)
  80b0c8:	dc000217 	ldw	r16,8(sp)
  80b0cc:	dec00c04 	addi	sp,sp,48
  80b0d0:	f800283a 	ret
  80b0d4:	00803fc4 	movi	r2,255
  80b0d8:	11c5803a 	cmpltu	r2,r2,r7
  80b0dc:	100490fa 	slli	r2,r2,3
  80b0e0:	003f9906 	br	80af48 <__alt_mem_epcs_flash_controller_0+0xff801f48>
  80b0e4:	00803fc4 	movi	r2,255
  80b0e8:	1445803a 	cmpltu	r2,r2,r17
  80b0ec:	100490fa 	slli	r2,r2,3
  80b0f0:	003fad06 	br	80afa8 <__alt_mem_epcs_flash_controller_0+0xff801fa8>
  80b0f4:	00804034 	movhi	r2,256
  80b0f8:	10bfffc4 	addi	r2,r2,-1
  80b0fc:	11809f36 	bltu	r2,r6,80b37c <__udivdi3+0x5a0>
  80b100:	00800404 	movi	r2,16
  80b104:	003f4c06 	br	80ae38 <__alt_mem_epcs_flash_controller_0+0xff801e38>
  80b108:	3dce983a 	sll	r7,r7,r23
  80b10c:	30b8d83a 	srl	fp,r6,r2
  80b110:	80a2d83a 	srl	r17,r16,r2
  80b114:	35cc983a 	sll	r6,r6,r23
  80b118:	3f38b03a 	or	fp,r7,fp
  80b11c:	e024d43a 	srli	r18,fp,16
  80b120:	9884d83a 	srl	r2,r19,r2
  80b124:	85e0983a 	sll	r16,r16,r23
  80b128:	8809883a 	mov	r4,r17
  80b12c:	900b883a 	mov	r5,r18
  80b130:	d9800015 	stw	r6,0(sp)
  80b134:	1420b03a 	or	r16,r2,r16
  80b138:	08012fc0 	call	8012fc <__umodsi3>
  80b13c:	900b883a 	mov	r5,r18
  80b140:	8809883a 	mov	r4,r17
  80b144:	1029883a 	mov	r20,r2
  80b148:	e5bfffcc 	andi	r22,fp,65535
  80b14c:	08012980 	call	801298 <__udivsi3>
  80b150:	100b883a 	mov	r5,r2
  80b154:	b009883a 	mov	r4,r22
  80b158:	102b883a 	mov	r21,r2
  80b15c:	080b99c0 	call	80b99c <__mulsi3>
  80b160:	a028943a 	slli	r20,r20,16
  80b164:	8006d43a 	srli	r3,r16,16
  80b168:	1d06b03a 	or	r3,r3,r20
  80b16c:	1880042e 	bgeu	r3,r2,80b180 <__udivdi3+0x3a4>
  80b170:	1f07883a 	add	r3,r3,fp
  80b174:	a93fffc4 	addi	r4,r21,-1
  80b178:	1f00892e 	bgeu	r3,fp,80b3a0 <__udivdi3+0x5c4>
  80b17c:	202b883a 	mov	r21,r4
  80b180:	18a3c83a 	sub	r17,r3,r2
  80b184:	8809883a 	mov	r4,r17
  80b188:	900b883a 	mov	r5,r18
  80b18c:	08012fc0 	call	8012fc <__umodsi3>
  80b190:	1029883a 	mov	r20,r2
  80b194:	8809883a 	mov	r4,r17
  80b198:	900b883a 	mov	r5,r18
  80b19c:	a028943a 	slli	r20,r20,16
  80b1a0:	08012980 	call	801298 <__udivsi3>
  80b1a4:	100b883a 	mov	r5,r2
  80b1a8:	b009883a 	mov	r4,r22
  80b1ac:	843fffcc 	andi	r16,r16,65535
  80b1b0:	1023883a 	mov	r17,r2
  80b1b4:	8520b03a 	or	r16,r16,r20
  80b1b8:	080b99c0 	call	80b99c <__mulsi3>
  80b1bc:	8080042e 	bgeu	r16,r2,80b1d0 <__udivdi3+0x3f4>
  80b1c0:	8721883a 	add	r16,r16,fp
  80b1c4:	88ffffc4 	addi	r3,r17,-1
  80b1c8:	8700712e 	bgeu	r16,fp,80b390 <__udivdi3+0x5b4>
  80b1cc:	1823883a 	mov	r17,r3
  80b1d0:	a80e943a 	slli	r7,r21,16
  80b1d4:	d8c00017 	ldw	r3,0(sp)
  80b1d8:	80a1c83a 	sub	r16,r16,r2
  80b1dc:	3c64b03a 	or	r18,r7,r17
  80b1e0:	1d3fffcc 	andi	r20,r3,65535
  80b1e4:	9022d43a 	srli	r17,r18,16
  80b1e8:	95bfffcc 	andi	r22,r18,65535
  80b1ec:	a00b883a 	mov	r5,r20
  80b1f0:	b009883a 	mov	r4,r22
  80b1f4:	182ad43a 	srli	r21,r3,16
  80b1f8:	080b99c0 	call	80b99c <__mulsi3>
  80b1fc:	a00b883a 	mov	r5,r20
  80b200:	8809883a 	mov	r4,r17
  80b204:	1039883a 	mov	fp,r2
  80b208:	080b99c0 	call	80b99c <__mulsi3>
  80b20c:	8809883a 	mov	r4,r17
  80b210:	a80b883a 	mov	r5,r21
  80b214:	1029883a 	mov	r20,r2
  80b218:	080b99c0 	call	80b99c <__mulsi3>
  80b21c:	a80b883a 	mov	r5,r21
  80b220:	b009883a 	mov	r4,r22
  80b224:	1023883a 	mov	r17,r2
  80b228:	080b99c0 	call	80b99c <__mulsi3>
  80b22c:	e006d43a 	srli	r3,fp,16
  80b230:	1505883a 	add	r2,r2,r20
  80b234:	1887883a 	add	r3,r3,r2
  80b238:	1d00022e 	bgeu	r3,r20,80b244 <__udivdi3+0x468>
  80b23c:	00800074 	movhi	r2,1
  80b240:	88a3883a 	add	r17,r17,r2
  80b244:	1804d43a 	srli	r2,r3,16
  80b248:	1463883a 	add	r17,r2,r17
  80b24c:	84404436 	bltu	r16,r17,80b360 <__udivdi3+0x584>
  80b250:	84403e26 	beq	r16,r17,80b34c <__udivdi3+0x570>
  80b254:	9005883a 	mov	r2,r18
  80b258:	0007883a 	mov	r3,zero
  80b25c:	003f9106 	br	80b0a4 <__alt_mem_epcs_flash_controller_0+0xff8020a4>
  80b260:	88e2983a 	sll	r17,r17,r3
  80b264:	80aed83a 	srl	r23,r16,r2
  80b268:	80e0983a 	sll	r16,r16,r3
  80b26c:	882ad43a 	srli	r21,r17,16
  80b270:	9884d83a 	srl	r2,r19,r2
  80b274:	b809883a 	mov	r4,r23
  80b278:	a80b883a 	mov	r5,r21
  80b27c:	98e4983a 	sll	r18,r19,r3
  80b280:	142cb03a 	or	r22,r2,r16
  80b284:	08012fc0 	call	8012fc <__umodsi3>
  80b288:	b809883a 	mov	r4,r23
  80b28c:	a80b883a 	mov	r5,r21
  80b290:	1027883a 	mov	r19,r2
  80b294:	8d3fffcc 	andi	r20,r17,65535
  80b298:	08012980 	call	801298 <__udivsi3>
  80b29c:	a009883a 	mov	r4,r20
  80b2a0:	100b883a 	mov	r5,r2
  80b2a4:	102f883a 	mov	r23,r2
  80b2a8:	080b99c0 	call	80b99c <__mulsi3>
  80b2ac:	9826943a 	slli	r19,r19,16
  80b2b0:	b008d43a 	srli	r4,r22,16
  80b2b4:	24c8b03a 	or	r4,r4,r19
  80b2b8:	2080062e 	bgeu	r4,r2,80b2d4 <__udivdi3+0x4f8>
  80b2bc:	2449883a 	add	r4,r4,r17
  80b2c0:	b8ffffc4 	addi	r3,r23,-1
  80b2c4:	24403c36 	bltu	r4,r17,80b3b8 <__udivdi3+0x5dc>
  80b2c8:	20803b2e 	bgeu	r4,r2,80b3b8 <__udivdi3+0x5dc>
  80b2cc:	bdffff84 	addi	r23,r23,-2
  80b2d0:	2449883a 	add	r4,r4,r17
  80b2d4:	20a1c83a 	sub	r16,r4,r2
  80b2d8:	a80b883a 	mov	r5,r21
  80b2dc:	8009883a 	mov	r4,r16
  80b2e0:	08012fc0 	call	8012fc <__umodsi3>
  80b2e4:	a80b883a 	mov	r5,r21
  80b2e8:	8009883a 	mov	r4,r16
  80b2ec:	1027883a 	mov	r19,r2
  80b2f0:	08012980 	call	801298 <__udivsi3>
  80b2f4:	a009883a 	mov	r4,r20
  80b2f8:	100b883a 	mov	r5,r2
  80b2fc:	9826943a 	slli	r19,r19,16
  80b300:	1039883a 	mov	fp,r2
  80b304:	080b99c0 	call	80b99c <__mulsi3>
  80b308:	b13fffcc 	andi	r4,r22,65535
  80b30c:	24c8b03a 	or	r4,r4,r19
  80b310:	2080062e 	bgeu	r4,r2,80b32c <__udivdi3+0x550>
  80b314:	2449883a 	add	r4,r4,r17
  80b318:	e0ffffc4 	addi	r3,fp,-1
  80b31c:	24402436 	bltu	r4,r17,80b3b0 <__udivdi3+0x5d4>
  80b320:	2080232e 	bgeu	r4,r2,80b3b0 <__udivdi3+0x5d4>
  80b324:	e73fff84 	addi	fp,fp,-2
  80b328:	2449883a 	add	r4,r4,r17
  80b32c:	b82e943a 	slli	r23,r23,16
  80b330:	20a1c83a 	sub	r16,r4,r2
  80b334:	bf06b03a 	or	r3,r23,fp
  80b338:	003f2806 	br	80afdc <__alt_mem_epcs_flash_controller_0+0xff801fdc>
  80b33c:	2021883a 	mov	r16,r4
  80b340:	003f5306 	br	80b090 <__alt_mem_epcs_flash_controller_0+0xff802090>
  80b344:	1821883a 	mov	r16,r3
  80b348:	003ef406 	br	80af1c <__alt_mem_epcs_flash_controller_0+0xff801f1c>
  80b34c:	1806943a 	slli	r3,r3,16
  80b350:	9de6983a 	sll	r19,r19,r23
  80b354:	e73fffcc 	andi	fp,fp,65535
  80b358:	1f07883a 	add	r3,r3,fp
  80b35c:	98ffbd2e 	bgeu	r19,r3,80b254 <__alt_mem_epcs_flash_controller_0+0xff802254>
  80b360:	90bfffc4 	addi	r2,r18,-1
  80b364:	0007883a 	mov	r3,zero
  80b368:	003f4e06 	br	80b0a4 <__alt_mem_epcs_flash_controller_0+0xff8020a4>
  80b36c:	00800604 	movi	r2,24
  80b370:	003ef506 	br	80af48 <__alt_mem_epcs_flash_controller_0+0xff801f48>
  80b374:	00800604 	movi	r2,24
  80b378:	003f0b06 	br	80afa8 <__alt_mem_epcs_flash_controller_0+0xff801fa8>
  80b37c:	00800604 	movi	r2,24
  80b380:	003ead06 	br	80ae38 <__alt_mem_epcs_flash_controller_0+0xff801e38>
  80b384:	0007883a 	mov	r3,zero
  80b388:	00800044 	movi	r2,1
  80b38c:	003f4506 	br	80b0a4 <__alt_mem_epcs_flash_controller_0+0xff8020a4>
  80b390:	80bf8e2e 	bgeu	r16,r2,80b1cc <__alt_mem_epcs_flash_controller_0+0xff8021cc>
  80b394:	8c7fff84 	addi	r17,r17,-2
  80b398:	8721883a 	add	r16,r16,fp
  80b39c:	003f8c06 	br	80b1d0 <__alt_mem_epcs_flash_controller_0+0xff8021d0>
  80b3a0:	18bf762e 	bgeu	r3,r2,80b17c <__alt_mem_epcs_flash_controller_0+0xff80217c>
  80b3a4:	ad7fff84 	addi	r21,r21,-2
  80b3a8:	1f07883a 	add	r3,r3,fp
  80b3ac:	003f7406 	br	80b180 <__alt_mem_epcs_flash_controller_0+0xff802180>
  80b3b0:	1839883a 	mov	fp,r3
  80b3b4:	003fdd06 	br	80b32c <__alt_mem_epcs_flash_controller_0+0xff80232c>
  80b3b8:	182f883a 	mov	r23,r3
  80b3bc:	003fc506 	br	80b2d4 <__alt_mem_epcs_flash_controller_0+0xff8022d4>
  80b3c0:	b5bfff84 	addi	r22,r22,-2
  80b3c4:	3c4f883a 	add	r7,r7,r17
  80b3c8:	003f1a06 	br	80b034 <__alt_mem_epcs_flash_controller_0+0xff802034>
  80b3cc:	b5bfff84 	addi	r22,r22,-2
  80b3d0:	1c47883a 	add	r3,r3,r17
  80b3d4:	003ebc06 	br	80aec8 <__alt_mem_epcs_flash_controller_0+0xff801ec8>

0080b3d8 <__umoddi3>:
  80b3d8:	defff304 	addi	sp,sp,-52
  80b3dc:	df000b15 	stw	fp,44(sp)
  80b3e0:	dc400415 	stw	r17,16(sp)
  80b3e4:	dc000315 	stw	r16,12(sp)
  80b3e8:	dfc00c15 	stw	ra,48(sp)
  80b3ec:	ddc00a15 	stw	r23,40(sp)
  80b3f0:	dd800915 	stw	r22,36(sp)
  80b3f4:	dd400815 	stw	r21,32(sp)
  80b3f8:	dd000715 	stw	r20,28(sp)
  80b3fc:	dcc00615 	stw	r19,24(sp)
  80b400:	dc800515 	stw	r18,20(sp)
  80b404:	2021883a 	mov	r16,r4
  80b408:	2823883a 	mov	r17,r5
  80b40c:	2839883a 	mov	fp,r5
  80b410:	3800401e 	bne	r7,zero,80b514 <__umoddi3+0x13c>
  80b414:	3027883a 	mov	r19,r6
  80b418:	2029883a 	mov	r20,r4
  80b41c:	2980552e 	bgeu	r5,r6,80b574 <__umoddi3+0x19c>
  80b420:	00bfffd4 	movui	r2,65535
  80b424:	1180a236 	bltu	r2,r6,80b6b0 <__umoddi3+0x2d8>
  80b428:	01003fc4 	movi	r4,255
  80b42c:	2189803a 	cmpltu	r4,r4,r6
  80b430:	200890fa 	slli	r4,r4,3
  80b434:	3104d83a 	srl	r2,r6,r4
  80b438:	00c020b4 	movhi	r3,130
  80b43c:	18f00104 	addi	r3,r3,-16380
  80b440:	1885883a 	add	r2,r3,r2
  80b444:	10c00003 	ldbu	r3,0(r2)
  80b448:	00800804 	movi	r2,32
  80b44c:	1909883a 	add	r4,r3,r4
  80b450:	1125c83a 	sub	r18,r2,r4
  80b454:	90000526 	beq	r18,zero,80b46c <__umoddi3+0x94>
  80b458:	8ca2983a 	sll	r17,r17,r18
  80b45c:	8108d83a 	srl	r4,r16,r4
  80b460:	34a6983a 	sll	r19,r6,r18
  80b464:	84a8983a 	sll	r20,r16,r18
  80b468:	2478b03a 	or	fp,r4,r17
  80b46c:	982cd43a 	srli	r22,r19,16
  80b470:	e009883a 	mov	r4,fp
  80b474:	9dffffcc 	andi	r23,r19,65535
  80b478:	b00b883a 	mov	r5,r22
  80b47c:	08012fc0 	call	8012fc <__umodsi3>
  80b480:	b00b883a 	mov	r5,r22
  80b484:	e009883a 	mov	r4,fp
  80b488:	102b883a 	mov	r21,r2
  80b48c:	08012980 	call	801298 <__udivsi3>
  80b490:	100b883a 	mov	r5,r2
  80b494:	b809883a 	mov	r4,r23
  80b498:	080b99c0 	call	80b99c <__mulsi3>
  80b49c:	a82a943a 	slli	r21,r21,16
  80b4a0:	a006d43a 	srli	r3,r20,16
  80b4a4:	1d46b03a 	or	r3,r3,r21
  80b4a8:	1880032e 	bgeu	r3,r2,80b4b8 <__umoddi3+0xe0>
  80b4ac:	1cc7883a 	add	r3,r3,r19
  80b4b0:	1cc00136 	bltu	r3,r19,80b4b8 <__umoddi3+0xe0>
  80b4b4:	18813136 	bltu	r3,r2,80b97c <__umoddi3+0x5a4>
  80b4b8:	18a1c83a 	sub	r16,r3,r2
  80b4bc:	b00b883a 	mov	r5,r22
  80b4c0:	8009883a 	mov	r4,r16
  80b4c4:	08012fc0 	call	8012fc <__umodsi3>
  80b4c8:	b00b883a 	mov	r5,r22
  80b4cc:	8009883a 	mov	r4,r16
  80b4d0:	1023883a 	mov	r17,r2
  80b4d4:	08012980 	call	801298 <__udivsi3>
  80b4d8:	100b883a 	mov	r5,r2
  80b4dc:	b809883a 	mov	r4,r23
  80b4e0:	8822943a 	slli	r17,r17,16
  80b4e4:	080b99c0 	call	80b99c <__mulsi3>
  80b4e8:	a0ffffcc 	andi	r3,r20,65535
  80b4ec:	1c46b03a 	or	r3,r3,r17
  80b4f0:	1880042e 	bgeu	r3,r2,80b504 <__umoddi3+0x12c>
  80b4f4:	1cc7883a 	add	r3,r3,r19
  80b4f8:	1cc00236 	bltu	r3,r19,80b504 <__umoddi3+0x12c>
  80b4fc:	1880012e 	bgeu	r3,r2,80b504 <__umoddi3+0x12c>
  80b500:	1cc7883a 	add	r3,r3,r19
  80b504:	1885c83a 	sub	r2,r3,r2
  80b508:	1484d83a 	srl	r2,r2,r18
  80b50c:	0007883a 	mov	r3,zero
  80b510:	00005306 	br	80b660 <__umoddi3+0x288>
  80b514:	29c05036 	bltu	r5,r7,80b658 <__umoddi3+0x280>
  80b518:	00bfffd4 	movui	r2,65535
  80b51c:	11c05c2e 	bgeu	r2,r7,80b690 <__umoddi3+0x2b8>
  80b520:	00804034 	movhi	r2,256
  80b524:	10bfffc4 	addi	r2,r2,-1
  80b528:	11c10636 	bltu	r2,r7,80b944 <__umoddi3+0x56c>
  80b52c:	01000404 	movi	r4,16
  80b530:	3904d83a 	srl	r2,r7,r4
  80b534:	00c020b4 	movhi	r3,130
  80b538:	18f00104 	addi	r3,r3,-16380
  80b53c:	1885883a 	add	r2,r3,r2
  80b540:	14c00003 	ldbu	r19,0(r2)
  80b544:	00c00804 	movi	r3,32
  80b548:	9927883a 	add	r19,r19,r4
  80b54c:	1ce9c83a 	sub	r20,r3,r19
  80b550:	a0005c1e 	bne	r20,zero,80b6c4 <__umoddi3+0x2ec>
  80b554:	3c400136 	bltu	r7,r17,80b55c <__umoddi3+0x184>
  80b558:	81810a36 	bltu	r16,r6,80b984 <__umoddi3+0x5ac>
  80b55c:	8185c83a 	sub	r2,r16,r6
  80b560:	89e3c83a 	sub	r17,r17,r7
  80b564:	8089803a 	cmpltu	r4,r16,r2
  80b568:	8939c83a 	sub	fp,r17,r4
  80b56c:	e007883a 	mov	r3,fp
  80b570:	00003b06 	br	80b660 <__umoddi3+0x288>
  80b574:	3000041e 	bne	r6,zero,80b588 <__umoddi3+0x1b0>
  80b578:	000b883a 	mov	r5,zero
  80b57c:	01000044 	movi	r4,1
  80b580:	08012980 	call	801298 <__udivsi3>
  80b584:	1027883a 	mov	r19,r2
  80b588:	00bfffd4 	movui	r2,65535
  80b58c:	14c0442e 	bgeu	r2,r19,80b6a0 <__umoddi3+0x2c8>
  80b590:	00804034 	movhi	r2,256
  80b594:	10bfffc4 	addi	r2,r2,-1
  80b598:	14c0ec36 	bltu	r2,r19,80b94c <__umoddi3+0x574>
  80b59c:	00800404 	movi	r2,16
  80b5a0:	9886d83a 	srl	r3,r19,r2
  80b5a4:	010020b4 	movhi	r4,130
  80b5a8:	21300104 	addi	r4,r4,-16380
  80b5ac:	20c7883a 	add	r3,r4,r3
  80b5b0:	18c00003 	ldbu	r3,0(r3)
  80b5b4:	1887883a 	add	r3,r3,r2
  80b5b8:	00800804 	movi	r2,32
  80b5bc:	10e5c83a 	sub	r18,r2,r3
  80b5c0:	9000ab1e 	bne	r18,zero,80b870 <__umoddi3+0x498>
  80b5c4:	982cd43a 	srli	r22,r19,16
  80b5c8:	8ce3c83a 	sub	r17,r17,r19
  80b5cc:	9dffffcc 	andi	r23,r19,65535
  80b5d0:	b00b883a 	mov	r5,r22
  80b5d4:	8809883a 	mov	r4,r17
  80b5d8:	08012fc0 	call	8012fc <__umodsi3>
  80b5dc:	b00b883a 	mov	r5,r22
  80b5e0:	8809883a 	mov	r4,r17
  80b5e4:	102b883a 	mov	r21,r2
  80b5e8:	08012980 	call	801298 <__udivsi3>
  80b5ec:	b80b883a 	mov	r5,r23
  80b5f0:	1009883a 	mov	r4,r2
  80b5f4:	080b99c0 	call	80b99c <__mulsi3>
  80b5f8:	a82a943a 	slli	r21,r21,16
  80b5fc:	a006d43a 	srli	r3,r20,16
  80b600:	1d46b03a 	or	r3,r3,r21
  80b604:	1880042e 	bgeu	r3,r2,80b618 <__umoddi3+0x240>
  80b608:	1cc7883a 	add	r3,r3,r19
  80b60c:	1cc00236 	bltu	r3,r19,80b618 <__umoddi3+0x240>
  80b610:	1880012e 	bgeu	r3,r2,80b618 <__umoddi3+0x240>
  80b614:	1cc7883a 	add	r3,r3,r19
  80b618:	18a1c83a 	sub	r16,r3,r2
  80b61c:	b00b883a 	mov	r5,r22
  80b620:	8009883a 	mov	r4,r16
  80b624:	08012fc0 	call	8012fc <__umodsi3>
  80b628:	1023883a 	mov	r17,r2
  80b62c:	b00b883a 	mov	r5,r22
  80b630:	8009883a 	mov	r4,r16
  80b634:	08012980 	call	801298 <__udivsi3>
  80b638:	8822943a 	slli	r17,r17,16
  80b63c:	b80b883a 	mov	r5,r23
  80b640:	1009883a 	mov	r4,r2
  80b644:	080b99c0 	call	80b99c <__mulsi3>
  80b648:	a53fffcc 	andi	r20,r20,65535
  80b64c:	a446b03a 	or	r3,r20,r17
  80b650:	18bfac2e 	bgeu	r3,r2,80b504 <__alt_mem_epcs_flash_controller_0+0xff802504>
  80b654:	003fa706 	br	80b4f4 <__alt_mem_epcs_flash_controller_0+0xff8024f4>
  80b658:	2005883a 	mov	r2,r4
  80b65c:	2807883a 	mov	r3,r5
  80b660:	dfc00c17 	ldw	ra,48(sp)
  80b664:	df000b17 	ldw	fp,44(sp)
  80b668:	ddc00a17 	ldw	r23,40(sp)
  80b66c:	dd800917 	ldw	r22,36(sp)
  80b670:	dd400817 	ldw	r21,32(sp)
  80b674:	dd000717 	ldw	r20,28(sp)
  80b678:	dcc00617 	ldw	r19,24(sp)
  80b67c:	dc800517 	ldw	r18,20(sp)
  80b680:	dc400417 	ldw	r17,16(sp)
  80b684:	dc000317 	ldw	r16,12(sp)
  80b688:	dec00d04 	addi	sp,sp,52
  80b68c:	f800283a 	ret
  80b690:	04c03fc4 	movi	r19,255
  80b694:	99c9803a 	cmpltu	r4,r19,r7
  80b698:	200890fa 	slli	r4,r4,3
  80b69c:	003fa406 	br	80b530 <__alt_mem_epcs_flash_controller_0+0xff802530>
  80b6a0:	00803fc4 	movi	r2,255
  80b6a4:	14c5803a 	cmpltu	r2,r2,r19
  80b6a8:	100490fa 	slli	r2,r2,3
  80b6ac:	003fbc06 	br	80b5a0 <__alt_mem_epcs_flash_controller_0+0xff8025a0>
  80b6b0:	00804034 	movhi	r2,256
  80b6b4:	10bfffc4 	addi	r2,r2,-1
  80b6b8:	1180a636 	bltu	r2,r6,80b954 <__umoddi3+0x57c>
  80b6bc:	01000404 	movi	r4,16
  80b6c0:	003f5c06 	br	80b434 <__alt_mem_epcs_flash_controller_0+0xff802434>
  80b6c4:	3d0e983a 	sll	r7,r7,r20
  80b6c8:	34ead83a 	srl	r21,r6,r19
  80b6cc:	8cc6d83a 	srl	r3,r17,r19
  80b6d0:	8d10983a 	sll	r8,r17,r20
  80b6d4:	3d6ab03a 	or	r21,r7,r21
  80b6d8:	a82cd43a 	srli	r22,r21,16
  80b6dc:	84e2d83a 	srl	r17,r16,r19
  80b6e0:	1809883a 	mov	r4,r3
  80b6e4:	b00b883a 	mov	r5,r22
  80b6e8:	8a22b03a 	or	r17,r17,r8
  80b6ec:	3524983a 	sll	r18,r6,r20
  80b6f0:	dc400015 	stw	r17,0(sp)
  80b6f4:	d8c00115 	stw	r3,4(sp)
  80b6f8:	08012fc0 	call	8012fc <__umodsi3>
  80b6fc:	d8c00117 	ldw	r3,4(sp)
  80b700:	b00b883a 	mov	r5,r22
  80b704:	1039883a 	mov	fp,r2
  80b708:	1809883a 	mov	r4,r3
  80b70c:	08012980 	call	801298 <__udivsi3>
  80b710:	adffffcc 	andi	r23,r21,65535
  80b714:	100b883a 	mov	r5,r2
  80b718:	b809883a 	mov	r4,r23
  80b71c:	1023883a 	mov	r17,r2
  80b720:	080b99c0 	call	80b99c <__mulsi3>
  80b724:	d9400017 	ldw	r5,0(sp)
  80b728:	e008943a 	slli	r4,fp,16
  80b72c:	8520983a 	sll	r16,r16,r20
  80b730:	2806d43a 	srli	r3,r5,16
  80b734:	1906b03a 	or	r3,r3,r4
  80b738:	1880042e 	bgeu	r3,r2,80b74c <__umoddi3+0x374>
  80b73c:	1d47883a 	add	r3,r3,r21
  80b740:	893fffc4 	addi	r4,r17,-1
  80b744:	1d40892e 	bgeu	r3,r21,80b96c <__umoddi3+0x594>
  80b748:	2023883a 	mov	r17,r4
  80b74c:	18b9c83a 	sub	fp,r3,r2
  80b750:	b00b883a 	mov	r5,r22
  80b754:	e009883a 	mov	r4,fp
  80b758:	08012fc0 	call	8012fc <__umodsi3>
  80b75c:	b00b883a 	mov	r5,r22
  80b760:	e009883a 	mov	r4,fp
  80b764:	d8800215 	stw	r2,8(sp)
  80b768:	08012980 	call	801298 <__udivsi3>
  80b76c:	100b883a 	mov	r5,r2
  80b770:	b809883a 	mov	r4,r23
  80b774:	102d883a 	mov	r22,r2
  80b778:	080b99c0 	call	80b99c <__mulsi3>
  80b77c:	d9800217 	ldw	r6,8(sp)
  80b780:	d8c00017 	ldw	r3,0(sp)
  80b784:	300c943a 	slli	r6,r6,16
  80b788:	1a3fffcc 	andi	r8,r3,65535
  80b78c:	4190b03a 	or	r8,r8,r6
  80b790:	4080042e 	bgeu	r8,r2,80b7a4 <__umoddi3+0x3cc>
  80b794:	4551883a 	add	r8,r8,r21
  80b798:	b0ffffc4 	addi	r3,r22,-1
  80b79c:	45406f2e 	bgeu	r8,r21,80b95c <__umoddi3+0x584>
  80b7a0:	182d883a 	mov	r22,r3
  80b7a4:	880e943a 	slli	r7,r17,16
  80b7a8:	9006d43a 	srli	r3,r18,16
  80b7ac:	91bfffcc 	andi	r6,r18,65535
  80b7b0:	3dacb03a 	or	r22,r7,r22
  80b7b4:	b02ed43a 	srli	r23,r22,16
  80b7b8:	b5bfffcc 	andi	r22,r22,65535
  80b7bc:	300b883a 	mov	r5,r6
  80b7c0:	b009883a 	mov	r4,r22
  80b7c4:	40a3c83a 	sub	r17,r8,r2
  80b7c8:	d8c00115 	stw	r3,4(sp)
  80b7cc:	d9800215 	stw	r6,8(sp)
  80b7d0:	080b99c0 	call	80b99c <__mulsi3>
  80b7d4:	d9800217 	ldw	r6,8(sp)
  80b7d8:	b809883a 	mov	r4,r23
  80b7dc:	1039883a 	mov	fp,r2
  80b7e0:	300b883a 	mov	r5,r6
  80b7e4:	080b99c0 	call	80b99c <__mulsi3>
  80b7e8:	d8c00117 	ldw	r3,4(sp)
  80b7ec:	b809883a 	mov	r4,r23
  80b7f0:	d8800215 	stw	r2,8(sp)
  80b7f4:	180b883a 	mov	r5,r3
  80b7f8:	080b99c0 	call	80b99c <__mulsi3>
  80b7fc:	d8c00117 	ldw	r3,4(sp)
  80b800:	b009883a 	mov	r4,r22
  80b804:	102f883a 	mov	r23,r2
  80b808:	180b883a 	mov	r5,r3
  80b80c:	080b99c0 	call	80b99c <__mulsi3>
  80b810:	d9800217 	ldw	r6,8(sp)
  80b814:	e006d43a 	srli	r3,fp,16
  80b818:	1185883a 	add	r2,r2,r6
  80b81c:	1885883a 	add	r2,r3,r2
  80b820:	1180022e 	bgeu	r2,r6,80b82c <__umoddi3+0x454>
  80b824:	00c00074 	movhi	r3,1
  80b828:	b8ef883a 	add	r23,r23,r3
  80b82c:	1006d43a 	srli	r3,r2,16
  80b830:	1004943a 	slli	r2,r2,16
  80b834:	e73fffcc 	andi	fp,fp,65535
  80b838:	1dc7883a 	add	r3,r3,r23
  80b83c:	1739883a 	add	fp,r2,fp
  80b840:	88c03a36 	bltu	r17,r3,80b92c <__umoddi3+0x554>
  80b844:	88c05126 	beq	r17,r3,80b98c <__umoddi3+0x5b4>
  80b848:	88c9c83a 	sub	r4,r17,r3
  80b84c:	e00f883a 	mov	r7,fp
  80b850:	81cfc83a 	sub	r7,r16,r7
  80b854:	81c7803a 	cmpltu	r3,r16,r7
  80b858:	20c7c83a 	sub	r3,r4,r3
  80b85c:	1cc4983a 	sll	r2,r3,r19
  80b860:	3d0ed83a 	srl	r7,r7,r20
  80b864:	1d06d83a 	srl	r3,r3,r20
  80b868:	11c4b03a 	or	r2,r2,r7
  80b86c:	003f7c06 	br	80b660 <__alt_mem_epcs_flash_controller_0+0xff802660>
  80b870:	9ca6983a 	sll	r19,r19,r18
  80b874:	88f8d83a 	srl	fp,r17,r3
  80b878:	80c4d83a 	srl	r2,r16,r3
  80b87c:	982cd43a 	srli	r22,r19,16
  80b880:	8ca2983a 	sll	r17,r17,r18
  80b884:	e009883a 	mov	r4,fp
  80b888:	b00b883a 	mov	r5,r22
  80b88c:	146ab03a 	or	r21,r2,r17
  80b890:	08012fc0 	call	8012fc <__umodsi3>
  80b894:	b00b883a 	mov	r5,r22
  80b898:	e009883a 	mov	r4,fp
  80b89c:	1029883a 	mov	r20,r2
  80b8a0:	9dffffcc 	andi	r23,r19,65535
  80b8a4:	08012980 	call	801298 <__udivsi3>
  80b8a8:	b809883a 	mov	r4,r23
  80b8ac:	100b883a 	mov	r5,r2
  80b8b0:	080b99c0 	call	80b99c <__mulsi3>
  80b8b4:	a008943a 	slli	r4,r20,16
  80b8b8:	a806d43a 	srli	r3,r21,16
  80b8bc:	84a8983a 	sll	r20,r16,r18
  80b8c0:	1906b03a 	or	r3,r3,r4
  80b8c4:	1880042e 	bgeu	r3,r2,80b8d8 <__umoddi3+0x500>
  80b8c8:	1cc7883a 	add	r3,r3,r19
  80b8cc:	1cc00236 	bltu	r3,r19,80b8d8 <__umoddi3+0x500>
  80b8d0:	1880012e 	bgeu	r3,r2,80b8d8 <__umoddi3+0x500>
  80b8d4:	1cc7883a 	add	r3,r3,r19
  80b8d8:	18a3c83a 	sub	r17,r3,r2
  80b8dc:	b00b883a 	mov	r5,r22
  80b8e0:	8809883a 	mov	r4,r17
  80b8e4:	08012fc0 	call	8012fc <__umodsi3>
  80b8e8:	b00b883a 	mov	r5,r22
  80b8ec:	8809883a 	mov	r4,r17
  80b8f0:	1021883a 	mov	r16,r2
  80b8f4:	08012980 	call	801298 <__udivsi3>
  80b8f8:	100b883a 	mov	r5,r2
  80b8fc:	b809883a 	mov	r4,r23
  80b900:	8020943a 	slli	r16,r16,16
  80b904:	080b99c0 	call	80b99c <__mulsi3>
  80b908:	a8ffffcc 	andi	r3,r21,65535
  80b90c:	1c06b03a 	or	r3,r3,r16
  80b910:	1880042e 	bgeu	r3,r2,80b924 <__umoddi3+0x54c>
  80b914:	1cc7883a 	add	r3,r3,r19
  80b918:	1cc00236 	bltu	r3,r19,80b924 <__umoddi3+0x54c>
  80b91c:	1880012e 	bgeu	r3,r2,80b924 <__umoddi3+0x54c>
  80b920:	1cc7883a 	add	r3,r3,r19
  80b924:	18a3c83a 	sub	r17,r3,r2
  80b928:	003f2906 	br	80b5d0 <__alt_mem_epcs_flash_controller_0+0xff8025d0>
  80b92c:	e48fc83a 	sub	r7,fp,r18
  80b930:	1d49c83a 	sub	r4,r3,r21
  80b934:	e1f9803a 	cmpltu	fp,fp,r7
  80b938:	2739c83a 	sub	fp,r4,fp
  80b93c:	8f09c83a 	sub	r4,r17,fp
  80b940:	003fc306 	br	80b850 <__alt_mem_epcs_flash_controller_0+0xff802850>
  80b944:	01000604 	movi	r4,24
  80b948:	003ef906 	br	80b530 <__alt_mem_epcs_flash_controller_0+0xff802530>
  80b94c:	00800604 	movi	r2,24
  80b950:	003f1306 	br	80b5a0 <__alt_mem_epcs_flash_controller_0+0xff8025a0>
  80b954:	01000604 	movi	r4,24
  80b958:	003eb606 	br	80b434 <__alt_mem_epcs_flash_controller_0+0xff802434>
  80b95c:	40bf902e 	bgeu	r8,r2,80b7a0 <__alt_mem_epcs_flash_controller_0+0xff8027a0>
  80b960:	b5bfff84 	addi	r22,r22,-2
  80b964:	4551883a 	add	r8,r8,r21
  80b968:	003f8e06 	br	80b7a4 <__alt_mem_epcs_flash_controller_0+0xff8027a4>
  80b96c:	18bf762e 	bgeu	r3,r2,80b748 <__alt_mem_epcs_flash_controller_0+0xff802748>
  80b970:	8c7fff84 	addi	r17,r17,-2
  80b974:	1d47883a 	add	r3,r3,r21
  80b978:	003f7406 	br	80b74c <__alt_mem_epcs_flash_controller_0+0xff80274c>
  80b97c:	1cc7883a 	add	r3,r3,r19
  80b980:	003ecd06 	br	80b4b8 <__alt_mem_epcs_flash_controller_0+0xff8024b8>
  80b984:	8005883a 	mov	r2,r16
  80b988:	003ef806 	br	80b56c <__alt_mem_epcs_flash_controller_0+0xff80256c>
  80b98c:	873fe736 	bltu	r16,fp,80b92c <__alt_mem_epcs_flash_controller_0+0xff80292c>
  80b990:	e00f883a 	mov	r7,fp
  80b994:	0009883a 	mov	r4,zero
  80b998:	003fad06 	br	80b850 <__alt_mem_epcs_flash_controller_0+0xff802850>

0080b99c <__mulsi3>:
  80b99c:	0005883a 	mov	r2,zero
  80b9a0:	20000726 	beq	r4,zero,80b9c0 <__mulsi3+0x24>
  80b9a4:	20c0004c 	andi	r3,r4,1
  80b9a8:	2008d07a 	srli	r4,r4,1
  80b9ac:	18000126 	beq	r3,zero,80b9b4 <__mulsi3+0x18>
  80b9b0:	1145883a 	add	r2,r2,r5
  80b9b4:	294b883a 	add	r5,r5,r5
  80b9b8:	203ffa1e 	bne	r4,zero,80b9a4 <__alt_mem_epcs_flash_controller_0+0xff8029a4>
  80b9bc:	f800283a 	ret
  80b9c0:	f800283a 	ret

0080b9c4 <__adddf3>:
  80b9c4:	02c00434 	movhi	r11,16
  80b9c8:	5affffc4 	addi	r11,r11,-1
  80b9cc:	2806d7fa 	srli	r3,r5,31
  80b9d0:	2ad4703a 	and	r10,r5,r11
  80b9d4:	3ad2703a 	and	r9,r7,r11
  80b9d8:	3804d53a 	srli	r2,r7,20
  80b9dc:	3018d77a 	srli	r12,r6,29
  80b9e0:	280ad53a 	srli	r5,r5,20
  80b9e4:	501490fa 	slli	r10,r10,3
  80b9e8:	2010d77a 	srli	r8,r4,29
  80b9ec:	481290fa 	slli	r9,r9,3
  80b9f0:	380ed7fa 	srli	r7,r7,31
  80b9f4:	defffb04 	addi	sp,sp,-20
  80b9f8:	dc800215 	stw	r18,8(sp)
  80b9fc:	dc400115 	stw	r17,4(sp)
  80ba00:	dc000015 	stw	r16,0(sp)
  80ba04:	dfc00415 	stw	ra,16(sp)
  80ba08:	dcc00315 	stw	r19,12(sp)
  80ba0c:	1c803fcc 	andi	r18,r3,255
  80ba10:	2c01ffcc 	andi	r16,r5,2047
  80ba14:	5210b03a 	or	r8,r10,r8
  80ba18:	202290fa 	slli	r17,r4,3
  80ba1c:	1081ffcc 	andi	r2,r2,2047
  80ba20:	4b12b03a 	or	r9,r9,r12
  80ba24:	300c90fa 	slli	r6,r6,3
  80ba28:	91c07526 	beq	r18,r7,80bc00 <__adddf3+0x23c>
  80ba2c:	8087c83a 	sub	r3,r16,r2
  80ba30:	00c0ab0e 	bge	zero,r3,80bce0 <__adddf3+0x31c>
  80ba34:	10002a1e 	bne	r2,zero,80bae0 <__adddf3+0x11c>
  80ba38:	4984b03a 	or	r2,r9,r6
  80ba3c:	1000961e 	bne	r2,zero,80bc98 <__adddf3+0x2d4>
  80ba40:	888001cc 	andi	r2,r17,7
  80ba44:	10000726 	beq	r2,zero,80ba64 <__adddf3+0xa0>
  80ba48:	888003cc 	andi	r2,r17,15
  80ba4c:	00c00104 	movi	r3,4
  80ba50:	10c00426 	beq	r2,r3,80ba64 <__adddf3+0xa0>
  80ba54:	88c7883a 	add	r3,r17,r3
  80ba58:	1c63803a 	cmpltu	r17,r3,r17
  80ba5c:	4451883a 	add	r8,r8,r17
  80ba60:	1823883a 	mov	r17,r3
  80ba64:	4080202c 	andhi	r2,r8,128
  80ba68:	10005926 	beq	r2,zero,80bbd0 <__adddf3+0x20c>
  80ba6c:	84000044 	addi	r16,r16,1
  80ba70:	0081ffc4 	movi	r2,2047
  80ba74:	8080ba26 	beq	r16,r2,80bd60 <__adddf3+0x39c>
  80ba78:	00bfe034 	movhi	r2,65408
  80ba7c:	10bfffc4 	addi	r2,r2,-1
  80ba80:	4090703a 	and	r8,r8,r2
  80ba84:	4004977a 	slli	r2,r8,29
  80ba88:	4010927a 	slli	r8,r8,9
  80ba8c:	8822d0fa 	srli	r17,r17,3
  80ba90:	8401ffcc 	andi	r16,r16,2047
  80ba94:	4010d33a 	srli	r8,r8,12
  80ba98:	9007883a 	mov	r3,r18
  80ba9c:	1444b03a 	or	r2,r2,r17
  80baa0:	8401ffcc 	andi	r16,r16,2047
  80baa4:	8020953a 	slli	r16,r16,20
  80baa8:	18c03fcc 	andi	r3,r3,255
  80baac:	01000434 	movhi	r4,16
  80bab0:	213fffc4 	addi	r4,r4,-1
  80bab4:	180697fa 	slli	r3,r3,31
  80bab8:	4110703a 	and	r8,r8,r4
  80babc:	4410b03a 	or	r8,r8,r16
  80bac0:	40c6b03a 	or	r3,r8,r3
  80bac4:	dfc00417 	ldw	ra,16(sp)
  80bac8:	dcc00317 	ldw	r19,12(sp)
  80bacc:	dc800217 	ldw	r18,8(sp)
  80bad0:	dc400117 	ldw	r17,4(sp)
  80bad4:	dc000017 	ldw	r16,0(sp)
  80bad8:	dec00504 	addi	sp,sp,20
  80badc:	f800283a 	ret
  80bae0:	0081ffc4 	movi	r2,2047
  80bae4:	80bfd626 	beq	r16,r2,80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bae8:	4a402034 	orhi	r9,r9,128
  80baec:	00800e04 	movi	r2,56
  80baf0:	10c09f16 	blt	r2,r3,80bd70 <__adddf3+0x3ac>
  80baf4:	008007c4 	movi	r2,31
  80baf8:	10c0c216 	blt	r2,r3,80be04 <__adddf3+0x440>
  80bafc:	00800804 	movi	r2,32
  80bb00:	10c5c83a 	sub	r2,r2,r3
  80bb04:	488a983a 	sll	r5,r9,r2
  80bb08:	30c8d83a 	srl	r4,r6,r3
  80bb0c:	3084983a 	sll	r2,r6,r2
  80bb10:	48c6d83a 	srl	r3,r9,r3
  80bb14:	290cb03a 	or	r6,r5,r4
  80bb18:	1004c03a 	cmpne	r2,r2,zero
  80bb1c:	308cb03a 	or	r6,r6,r2
  80bb20:	898dc83a 	sub	r6,r17,r6
  80bb24:	89a3803a 	cmpltu	r17,r17,r6
  80bb28:	40d1c83a 	sub	r8,r8,r3
  80bb2c:	4451c83a 	sub	r8,r8,r17
  80bb30:	3023883a 	mov	r17,r6
  80bb34:	4080202c 	andhi	r2,r8,128
  80bb38:	10002326 	beq	r2,zero,80bbc8 <__adddf3+0x204>
  80bb3c:	04c02034 	movhi	r19,128
  80bb40:	9cffffc4 	addi	r19,r19,-1
  80bb44:	44e6703a 	and	r19,r8,r19
  80bb48:	98007626 	beq	r19,zero,80bd24 <__adddf3+0x360>
  80bb4c:	9809883a 	mov	r4,r19
  80bb50:	080e2040 	call	80e204 <__clzsi2>
  80bb54:	10fffe04 	addi	r3,r2,-8
  80bb58:	010007c4 	movi	r4,31
  80bb5c:	20c07716 	blt	r4,r3,80bd3c <__adddf3+0x378>
  80bb60:	00800804 	movi	r2,32
  80bb64:	10c5c83a 	sub	r2,r2,r3
  80bb68:	8884d83a 	srl	r2,r17,r2
  80bb6c:	98d0983a 	sll	r8,r19,r3
  80bb70:	88e2983a 	sll	r17,r17,r3
  80bb74:	1204b03a 	or	r2,r2,r8
  80bb78:	1c007416 	blt	r3,r16,80bd4c <__adddf3+0x388>
  80bb7c:	1c21c83a 	sub	r16,r3,r16
  80bb80:	82000044 	addi	r8,r16,1
  80bb84:	00c007c4 	movi	r3,31
  80bb88:	1a009116 	blt	r3,r8,80bdd0 <__adddf3+0x40c>
  80bb8c:	00c00804 	movi	r3,32
  80bb90:	1a07c83a 	sub	r3,r3,r8
  80bb94:	8a08d83a 	srl	r4,r17,r8
  80bb98:	88e2983a 	sll	r17,r17,r3
  80bb9c:	10c6983a 	sll	r3,r2,r3
  80bba0:	1210d83a 	srl	r8,r2,r8
  80bba4:	8804c03a 	cmpne	r2,r17,zero
  80bba8:	1906b03a 	or	r3,r3,r4
  80bbac:	18a2b03a 	or	r17,r3,r2
  80bbb0:	0021883a 	mov	r16,zero
  80bbb4:	003fa206 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bbb8:	1890b03a 	or	r8,r3,r2
  80bbbc:	40017d26 	beq	r8,zero,80c1b4 <__adddf3+0x7f0>
  80bbc0:	1011883a 	mov	r8,r2
  80bbc4:	1823883a 	mov	r17,r3
  80bbc8:	888001cc 	andi	r2,r17,7
  80bbcc:	103f9e1e 	bne	r2,zero,80ba48 <__alt_mem_epcs_flash_controller_0+0xff802a48>
  80bbd0:	4004977a 	slli	r2,r8,29
  80bbd4:	8822d0fa 	srli	r17,r17,3
  80bbd8:	4010d0fa 	srli	r8,r8,3
  80bbdc:	9007883a 	mov	r3,r18
  80bbe0:	1444b03a 	or	r2,r2,r17
  80bbe4:	0101ffc4 	movi	r4,2047
  80bbe8:	81002426 	beq	r16,r4,80bc7c <__adddf3+0x2b8>
  80bbec:	8120703a 	and	r16,r16,r4
  80bbf0:	01000434 	movhi	r4,16
  80bbf4:	213fffc4 	addi	r4,r4,-1
  80bbf8:	4110703a 	and	r8,r8,r4
  80bbfc:	003fa806 	br	80baa0 <__alt_mem_epcs_flash_controller_0+0xff802aa0>
  80bc00:	8089c83a 	sub	r4,r16,r2
  80bc04:	01005e0e 	bge	zero,r4,80bd80 <__adddf3+0x3bc>
  80bc08:	10002b26 	beq	r2,zero,80bcb8 <__adddf3+0x2f4>
  80bc0c:	0081ffc4 	movi	r2,2047
  80bc10:	80bf8b26 	beq	r16,r2,80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bc14:	4a402034 	orhi	r9,r9,128
  80bc18:	00800e04 	movi	r2,56
  80bc1c:	1100a40e 	bge	r2,r4,80beb0 <__adddf3+0x4ec>
  80bc20:	498cb03a 	or	r6,r9,r6
  80bc24:	300ac03a 	cmpne	r5,r6,zero
  80bc28:	0013883a 	mov	r9,zero
  80bc2c:	2c4b883a 	add	r5,r5,r17
  80bc30:	2c63803a 	cmpltu	r17,r5,r17
  80bc34:	4a11883a 	add	r8,r9,r8
  80bc38:	8a11883a 	add	r8,r17,r8
  80bc3c:	2823883a 	mov	r17,r5
  80bc40:	4080202c 	andhi	r2,r8,128
  80bc44:	103fe026 	beq	r2,zero,80bbc8 <__alt_mem_epcs_flash_controller_0+0xff802bc8>
  80bc48:	84000044 	addi	r16,r16,1
  80bc4c:	0081ffc4 	movi	r2,2047
  80bc50:	8080d226 	beq	r16,r2,80bf9c <__adddf3+0x5d8>
  80bc54:	00bfe034 	movhi	r2,65408
  80bc58:	10bfffc4 	addi	r2,r2,-1
  80bc5c:	4090703a 	and	r8,r8,r2
  80bc60:	880ad07a 	srli	r5,r17,1
  80bc64:	400897fa 	slli	r4,r8,31
  80bc68:	88c0004c 	andi	r3,r17,1
  80bc6c:	28e2b03a 	or	r17,r5,r3
  80bc70:	4010d07a 	srli	r8,r8,1
  80bc74:	2462b03a 	or	r17,r4,r17
  80bc78:	003f7106 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bc7c:	4088b03a 	or	r4,r8,r2
  80bc80:	20014526 	beq	r4,zero,80c198 <__adddf3+0x7d4>
  80bc84:	01000434 	movhi	r4,16
  80bc88:	42000234 	orhi	r8,r8,8
  80bc8c:	213fffc4 	addi	r4,r4,-1
  80bc90:	4110703a 	and	r8,r8,r4
  80bc94:	003f8206 	br	80baa0 <__alt_mem_epcs_flash_controller_0+0xff802aa0>
  80bc98:	18ffffc4 	addi	r3,r3,-1
  80bc9c:	1800491e 	bne	r3,zero,80bdc4 <__adddf3+0x400>
  80bca0:	898bc83a 	sub	r5,r17,r6
  80bca4:	8963803a 	cmpltu	r17,r17,r5
  80bca8:	4251c83a 	sub	r8,r8,r9
  80bcac:	4451c83a 	sub	r8,r8,r17
  80bcb0:	2823883a 	mov	r17,r5
  80bcb4:	003f9f06 	br	80bb34 <__alt_mem_epcs_flash_controller_0+0xff802b34>
  80bcb8:	4984b03a 	or	r2,r9,r6
  80bcbc:	103f6026 	beq	r2,zero,80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bcc0:	213fffc4 	addi	r4,r4,-1
  80bcc4:	2000931e 	bne	r4,zero,80bf14 <__adddf3+0x550>
  80bcc8:	898d883a 	add	r6,r17,r6
  80bccc:	3463803a 	cmpltu	r17,r6,r17
  80bcd0:	4251883a 	add	r8,r8,r9
  80bcd4:	8a11883a 	add	r8,r17,r8
  80bcd8:	3023883a 	mov	r17,r6
  80bcdc:	003fd806 	br	80bc40 <__alt_mem_epcs_flash_controller_0+0xff802c40>
  80bce0:	1800541e 	bne	r3,zero,80be34 <__adddf3+0x470>
  80bce4:	80800044 	addi	r2,r16,1
  80bce8:	1081ffcc 	andi	r2,r2,2047
  80bcec:	00c00044 	movi	r3,1
  80bcf0:	1880a00e 	bge	r3,r2,80bf74 <__adddf3+0x5b0>
  80bcf4:	8989c83a 	sub	r4,r17,r6
  80bcf8:	8905803a 	cmpltu	r2,r17,r4
  80bcfc:	4267c83a 	sub	r19,r8,r9
  80bd00:	98a7c83a 	sub	r19,r19,r2
  80bd04:	9880202c 	andhi	r2,r19,128
  80bd08:	10006326 	beq	r2,zero,80be98 <__adddf3+0x4d4>
  80bd0c:	3463c83a 	sub	r17,r6,r17
  80bd10:	4a07c83a 	sub	r3,r9,r8
  80bd14:	344d803a 	cmpltu	r6,r6,r17
  80bd18:	19a7c83a 	sub	r19,r3,r6
  80bd1c:	3825883a 	mov	r18,r7
  80bd20:	983f8a1e 	bne	r19,zero,80bb4c <__alt_mem_epcs_flash_controller_0+0xff802b4c>
  80bd24:	8809883a 	mov	r4,r17
  80bd28:	080e2040 	call	80e204 <__clzsi2>
  80bd2c:	10800804 	addi	r2,r2,32
  80bd30:	10fffe04 	addi	r3,r2,-8
  80bd34:	010007c4 	movi	r4,31
  80bd38:	20ff890e 	bge	r4,r3,80bb60 <__alt_mem_epcs_flash_controller_0+0xff802b60>
  80bd3c:	10bff604 	addi	r2,r2,-40
  80bd40:	8884983a 	sll	r2,r17,r2
  80bd44:	0023883a 	mov	r17,zero
  80bd48:	1c3f8c0e 	bge	r3,r16,80bb7c <__alt_mem_epcs_flash_controller_0+0xff802b7c>
  80bd4c:	023fe034 	movhi	r8,65408
  80bd50:	423fffc4 	addi	r8,r8,-1
  80bd54:	80e1c83a 	sub	r16,r16,r3
  80bd58:	1210703a 	and	r8,r2,r8
  80bd5c:	003f3806 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bd60:	9007883a 	mov	r3,r18
  80bd64:	0011883a 	mov	r8,zero
  80bd68:	0005883a 	mov	r2,zero
  80bd6c:	003f4c06 	br	80baa0 <__alt_mem_epcs_flash_controller_0+0xff802aa0>
  80bd70:	498cb03a 	or	r6,r9,r6
  80bd74:	300cc03a 	cmpne	r6,r6,zero
  80bd78:	0007883a 	mov	r3,zero
  80bd7c:	003f6806 	br	80bb20 <__alt_mem_epcs_flash_controller_0+0xff802b20>
  80bd80:	20009c1e 	bne	r4,zero,80bff4 <__adddf3+0x630>
  80bd84:	80800044 	addi	r2,r16,1
  80bd88:	1141ffcc 	andi	r5,r2,2047
  80bd8c:	01000044 	movi	r4,1
  80bd90:	2140670e 	bge	r4,r5,80bf30 <__adddf3+0x56c>
  80bd94:	0101ffc4 	movi	r4,2047
  80bd98:	11007f26 	beq	r2,r4,80bf98 <__adddf3+0x5d4>
  80bd9c:	898d883a 	add	r6,r17,r6
  80bda0:	4247883a 	add	r3,r8,r9
  80bda4:	3451803a 	cmpltu	r8,r6,r17
  80bda8:	40d1883a 	add	r8,r8,r3
  80bdac:	402297fa 	slli	r17,r8,31
  80bdb0:	300cd07a 	srli	r6,r6,1
  80bdb4:	4010d07a 	srli	r8,r8,1
  80bdb8:	1021883a 	mov	r16,r2
  80bdbc:	89a2b03a 	or	r17,r17,r6
  80bdc0:	003f1f06 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bdc4:	0081ffc4 	movi	r2,2047
  80bdc8:	80bf481e 	bne	r16,r2,80baec <__alt_mem_epcs_flash_controller_0+0xff802aec>
  80bdcc:	003f1c06 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bdd0:	843ff844 	addi	r16,r16,-31
  80bdd4:	01000804 	movi	r4,32
  80bdd8:	1406d83a 	srl	r3,r2,r16
  80bddc:	41005026 	beq	r8,r4,80bf20 <__adddf3+0x55c>
  80bde0:	01001004 	movi	r4,64
  80bde4:	2211c83a 	sub	r8,r4,r8
  80bde8:	1204983a 	sll	r2,r2,r8
  80bdec:	88a2b03a 	or	r17,r17,r2
  80bdf0:	8822c03a 	cmpne	r17,r17,zero
  80bdf4:	1c62b03a 	or	r17,r3,r17
  80bdf8:	0011883a 	mov	r8,zero
  80bdfc:	0021883a 	mov	r16,zero
  80be00:	003f7106 	br	80bbc8 <__alt_mem_epcs_flash_controller_0+0xff802bc8>
  80be04:	193ff804 	addi	r4,r3,-32
  80be08:	00800804 	movi	r2,32
  80be0c:	4908d83a 	srl	r4,r9,r4
  80be10:	18804526 	beq	r3,r2,80bf28 <__adddf3+0x564>
  80be14:	00801004 	movi	r2,64
  80be18:	10c5c83a 	sub	r2,r2,r3
  80be1c:	4886983a 	sll	r3,r9,r2
  80be20:	198cb03a 	or	r6,r3,r6
  80be24:	300cc03a 	cmpne	r6,r6,zero
  80be28:	218cb03a 	or	r6,r4,r6
  80be2c:	0007883a 	mov	r3,zero
  80be30:	003f3b06 	br	80bb20 <__alt_mem_epcs_flash_controller_0+0xff802b20>
  80be34:	80002a26 	beq	r16,zero,80bee0 <__adddf3+0x51c>
  80be38:	0101ffc4 	movi	r4,2047
  80be3c:	11006826 	beq	r2,r4,80bfe0 <__adddf3+0x61c>
  80be40:	00c7c83a 	sub	r3,zero,r3
  80be44:	42002034 	orhi	r8,r8,128
  80be48:	01000e04 	movi	r4,56
  80be4c:	20c07c16 	blt	r4,r3,80c040 <__adddf3+0x67c>
  80be50:	010007c4 	movi	r4,31
  80be54:	20c0da16 	blt	r4,r3,80c1c0 <__adddf3+0x7fc>
  80be58:	01000804 	movi	r4,32
  80be5c:	20c9c83a 	sub	r4,r4,r3
  80be60:	4114983a 	sll	r10,r8,r4
  80be64:	88cad83a 	srl	r5,r17,r3
  80be68:	8908983a 	sll	r4,r17,r4
  80be6c:	40c6d83a 	srl	r3,r8,r3
  80be70:	5162b03a 	or	r17,r10,r5
  80be74:	2008c03a 	cmpne	r4,r4,zero
  80be78:	8922b03a 	or	r17,r17,r4
  80be7c:	3463c83a 	sub	r17,r6,r17
  80be80:	48c7c83a 	sub	r3,r9,r3
  80be84:	344d803a 	cmpltu	r6,r6,r17
  80be88:	1991c83a 	sub	r8,r3,r6
  80be8c:	1021883a 	mov	r16,r2
  80be90:	3825883a 	mov	r18,r7
  80be94:	003f2706 	br	80bb34 <__alt_mem_epcs_flash_controller_0+0xff802b34>
  80be98:	24d0b03a 	or	r8,r4,r19
  80be9c:	40001b1e 	bne	r8,zero,80bf0c <__adddf3+0x548>
  80bea0:	0005883a 	mov	r2,zero
  80bea4:	0007883a 	mov	r3,zero
  80bea8:	0021883a 	mov	r16,zero
  80beac:	003f4d06 	br	80bbe4 <__alt_mem_epcs_flash_controller_0+0xff802be4>
  80beb0:	008007c4 	movi	r2,31
  80beb4:	11003c16 	blt	r2,r4,80bfa8 <__adddf3+0x5e4>
  80beb8:	00800804 	movi	r2,32
  80bebc:	1105c83a 	sub	r2,r2,r4
  80bec0:	488e983a 	sll	r7,r9,r2
  80bec4:	310ad83a 	srl	r5,r6,r4
  80bec8:	3084983a 	sll	r2,r6,r2
  80becc:	4912d83a 	srl	r9,r9,r4
  80bed0:	394ab03a 	or	r5,r7,r5
  80bed4:	1004c03a 	cmpne	r2,r2,zero
  80bed8:	288ab03a 	or	r5,r5,r2
  80bedc:	003f5306 	br	80bc2c <__alt_mem_epcs_flash_controller_0+0xff802c2c>
  80bee0:	4448b03a 	or	r4,r8,r17
  80bee4:	20003e26 	beq	r4,zero,80bfe0 <__adddf3+0x61c>
  80bee8:	00c6303a 	nor	r3,zero,r3
  80beec:	18003a1e 	bne	r3,zero,80bfd8 <__adddf3+0x614>
  80bef0:	3463c83a 	sub	r17,r6,r17
  80bef4:	4a07c83a 	sub	r3,r9,r8
  80bef8:	344d803a 	cmpltu	r6,r6,r17
  80befc:	1991c83a 	sub	r8,r3,r6
  80bf00:	1021883a 	mov	r16,r2
  80bf04:	3825883a 	mov	r18,r7
  80bf08:	003f0a06 	br	80bb34 <__alt_mem_epcs_flash_controller_0+0xff802b34>
  80bf0c:	2023883a 	mov	r17,r4
  80bf10:	003f0d06 	br	80bb48 <__alt_mem_epcs_flash_controller_0+0xff802b48>
  80bf14:	0081ffc4 	movi	r2,2047
  80bf18:	80bf3f1e 	bne	r16,r2,80bc18 <__alt_mem_epcs_flash_controller_0+0xff802c18>
  80bf1c:	003ec806 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bf20:	0005883a 	mov	r2,zero
  80bf24:	003fb106 	br	80bdec <__alt_mem_epcs_flash_controller_0+0xff802dec>
  80bf28:	0007883a 	mov	r3,zero
  80bf2c:	003fbc06 	br	80be20 <__alt_mem_epcs_flash_controller_0+0xff802e20>
  80bf30:	4444b03a 	or	r2,r8,r17
  80bf34:	8000871e 	bne	r16,zero,80c154 <__adddf3+0x790>
  80bf38:	1000ba26 	beq	r2,zero,80c224 <__adddf3+0x860>
  80bf3c:	4984b03a 	or	r2,r9,r6
  80bf40:	103ebf26 	beq	r2,zero,80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bf44:	8985883a 	add	r2,r17,r6
  80bf48:	4247883a 	add	r3,r8,r9
  80bf4c:	1451803a 	cmpltu	r8,r2,r17
  80bf50:	40d1883a 	add	r8,r8,r3
  80bf54:	40c0202c 	andhi	r3,r8,128
  80bf58:	1023883a 	mov	r17,r2
  80bf5c:	183f1a26 	beq	r3,zero,80bbc8 <__alt_mem_epcs_flash_controller_0+0xff802bc8>
  80bf60:	00bfe034 	movhi	r2,65408
  80bf64:	10bfffc4 	addi	r2,r2,-1
  80bf68:	2021883a 	mov	r16,r4
  80bf6c:	4090703a 	and	r8,r8,r2
  80bf70:	003eb306 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bf74:	4444b03a 	or	r2,r8,r17
  80bf78:	8000291e 	bne	r16,zero,80c020 <__adddf3+0x65c>
  80bf7c:	10004b1e 	bne	r2,zero,80c0ac <__adddf3+0x6e8>
  80bf80:	4990b03a 	or	r8,r9,r6
  80bf84:	40008b26 	beq	r8,zero,80c1b4 <__adddf3+0x7f0>
  80bf88:	4811883a 	mov	r8,r9
  80bf8c:	3023883a 	mov	r17,r6
  80bf90:	3825883a 	mov	r18,r7
  80bf94:	003eaa06 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bf98:	1021883a 	mov	r16,r2
  80bf9c:	0011883a 	mov	r8,zero
  80bfa0:	0005883a 	mov	r2,zero
  80bfa4:	003f0f06 	br	80bbe4 <__alt_mem_epcs_flash_controller_0+0xff802be4>
  80bfa8:	217ff804 	addi	r5,r4,-32
  80bfac:	00800804 	movi	r2,32
  80bfb0:	494ad83a 	srl	r5,r9,r5
  80bfb4:	20807d26 	beq	r4,r2,80c1ac <__adddf3+0x7e8>
  80bfb8:	00801004 	movi	r2,64
  80bfbc:	1109c83a 	sub	r4,r2,r4
  80bfc0:	4912983a 	sll	r9,r9,r4
  80bfc4:	498cb03a 	or	r6,r9,r6
  80bfc8:	300cc03a 	cmpne	r6,r6,zero
  80bfcc:	298ab03a 	or	r5,r5,r6
  80bfd0:	0013883a 	mov	r9,zero
  80bfd4:	003f1506 	br	80bc2c <__alt_mem_epcs_flash_controller_0+0xff802c2c>
  80bfd8:	0101ffc4 	movi	r4,2047
  80bfdc:	113f9a1e 	bne	r2,r4,80be48 <__alt_mem_epcs_flash_controller_0+0xff802e48>
  80bfe0:	4811883a 	mov	r8,r9
  80bfe4:	3023883a 	mov	r17,r6
  80bfe8:	1021883a 	mov	r16,r2
  80bfec:	3825883a 	mov	r18,r7
  80bff0:	003e9306 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80bff4:	8000161e 	bne	r16,zero,80c050 <__adddf3+0x68c>
  80bff8:	444ab03a 	or	r5,r8,r17
  80bffc:	28005126 	beq	r5,zero,80c144 <__adddf3+0x780>
  80c000:	0108303a 	nor	r4,zero,r4
  80c004:	20004d1e 	bne	r4,zero,80c13c <__adddf3+0x778>
  80c008:	89a3883a 	add	r17,r17,r6
  80c00c:	4253883a 	add	r9,r8,r9
  80c010:	898d803a 	cmpltu	r6,r17,r6
  80c014:	3251883a 	add	r8,r6,r9
  80c018:	1021883a 	mov	r16,r2
  80c01c:	003f0806 	br	80bc40 <__alt_mem_epcs_flash_controller_0+0xff802c40>
  80c020:	1000301e 	bne	r2,zero,80c0e4 <__adddf3+0x720>
  80c024:	4984b03a 	or	r2,r9,r6
  80c028:	10007126 	beq	r2,zero,80c1f0 <__adddf3+0x82c>
  80c02c:	4811883a 	mov	r8,r9
  80c030:	3023883a 	mov	r17,r6
  80c034:	3825883a 	mov	r18,r7
  80c038:	0401ffc4 	movi	r16,2047
  80c03c:	003e8006 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c040:	4462b03a 	or	r17,r8,r17
  80c044:	8822c03a 	cmpne	r17,r17,zero
  80c048:	0007883a 	mov	r3,zero
  80c04c:	003f8b06 	br	80be7c <__alt_mem_epcs_flash_controller_0+0xff802e7c>
  80c050:	0141ffc4 	movi	r5,2047
  80c054:	11403b26 	beq	r2,r5,80c144 <__adddf3+0x780>
  80c058:	0109c83a 	sub	r4,zero,r4
  80c05c:	42002034 	orhi	r8,r8,128
  80c060:	01400e04 	movi	r5,56
  80c064:	29006716 	blt	r5,r4,80c204 <__adddf3+0x840>
  80c068:	014007c4 	movi	r5,31
  80c06c:	29007016 	blt	r5,r4,80c230 <__adddf3+0x86c>
  80c070:	01400804 	movi	r5,32
  80c074:	290bc83a 	sub	r5,r5,r4
  80c078:	4154983a 	sll	r10,r8,r5
  80c07c:	890ed83a 	srl	r7,r17,r4
  80c080:	894a983a 	sll	r5,r17,r5
  80c084:	4108d83a 	srl	r4,r8,r4
  80c088:	51e2b03a 	or	r17,r10,r7
  80c08c:	280ac03a 	cmpne	r5,r5,zero
  80c090:	8962b03a 	or	r17,r17,r5
  80c094:	89a3883a 	add	r17,r17,r6
  80c098:	2253883a 	add	r9,r4,r9
  80c09c:	898d803a 	cmpltu	r6,r17,r6
  80c0a0:	3251883a 	add	r8,r6,r9
  80c0a4:	1021883a 	mov	r16,r2
  80c0a8:	003ee506 	br	80bc40 <__alt_mem_epcs_flash_controller_0+0xff802c40>
  80c0ac:	4984b03a 	or	r2,r9,r6
  80c0b0:	103e6326 	beq	r2,zero,80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c0b4:	8987c83a 	sub	r3,r17,r6
  80c0b8:	88c9803a 	cmpltu	r4,r17,r3
  80c0bc:	4245c83a 	sub	r2,r8,r9
  80c0c0:	1105c83a 	sub	r2,r2,r4
  80c0c4:	1100202c 	andhi	r4,r2,128
  80c0c8:	203ebb26 	beq	r4,zero,80bbb8 <__alt_mem_epcs_flash_controller_0+0xff802bb8>
  80c0cc:	3463c83a 	sub	r17,r6,r17
  80c0d0:	4a07c83a 	sub	r3,r9,r8
  80c0d4:	344d803a 	cmpltu	r6,r6,r17
  80c0d8:	1991c83a 	sub	r8,r3,r6
  80c0dc:	3825883a 	mov	r18,r7
  80c0e0:	003e5706 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c0e4:	4984b03a 	or	r2,r9,r6
  80c0e8:	10002e26 	beq	r2,zero,80c1a4 <__adddf3+0x7e0>
  80c0ec:	4004d0fa 	srli	r2,r8,3
  80c0f0:	8822d0fa 	srli	r17,r17,3
  80c0f4:	4010977a 	slli	r8,r8,29
  80c0f8:	10c0022c 	andhi	r3,r2,8
  80c0fc:	4462b03a 	or	r17,r8,r17
  80c100:	18000826 	beq	r3,zero,80c124 <__adddf3+0x760>
  80c104:	4808d0fa 	srli	r4,r9,3
  80c108:	20c0022c 	andhi	r3,r4,8
  80c10c:	1800051e 	bne	r3,zero,80c124 <__adddf3+0x760>
  80c110:	300cd0fa 	srli	r6,r6,3
  80c114:	4806977a 	slli	r3,r9,29
  80c118:	2005883a 	mov	r2,r4
  80c11c:	3825883a 	mov	r18,r7
  80c120:	19a2b03a 	or	r17,r3,r6
  80c124:	8810d77a 	srli	r8,r17,29
  80c128:	100490fa 	slli	r2,r2,3
  80c12c:	882290fa 	slli	r17,r17,3
  80c130:	0401ffc4 	movi	r16,2047
  80c134:	4090b03a 	or	r8,r8,r2
  80c138:	003e4106 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c13c:	0141ffc4 	movi	r5,2047
  80c140:	117fc71e 	bne	r2,r5,80c060 <__alt_mem_epcs_flash_controller_0+0xff803060>
  80c144:	4811883a 	mov	r8,r9
  80c148:	3023883a 	mov	r17,r6
  80c14c:	1021883a 	mov	r16,r2
  80c150:	003e3b06 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c154:	10002f26 	beq	r2,zero,80c214 <__adddf3+0x850>
  80c158:	4984b03a 	or	r2,r9,r6
  80c15c:	10001126 	beq	r2,zero,80c1a4 <__adddf3+0x7e0>
  80c160:	4004d0fa 	srli	r2,r8,3
  80c164:	8822d0fa 	srli	r17,r17,3
  80c168:	4010977a 	slli	r8,r8,29
  80c16c:	10c0022c 	andhi	r3,r2,8
  80c170:	4462b03a 	or	r17,r8,r17
  80c174:	183feb26 	beq	r3,zero,80c124 <__alt_mem_epcs_flash_controller_0+0xff803124>
  80c178:	4808d0fa 	srli	r4,r9,3
  80c17c:	20c0022c 	andhi	r3,r4,8
  80c180:	183fe81e 	bne	r3,zero,80c124 <__alt_mem_epcs_flash_controller_0+0xff803124>
  80c184:	300cd0fa 	srli	r6,r6,3
  80c188:	4806977a 	slli	r3,r9,29
  80c18c:	2005883a 	mov	r2,r4
  80c190:	19a2b03a 	or	r17,r3,r6
  80c194:	003fe306 	br	80c124 <__alt_mem_epcs_flash_controller_0+0xff803124>
  80c198:	0011883a 	mov	r8,zero
  80c19c:	0005883a 	mov	r2,zero
  80c1a0:	003e3f06 	br	80baa0 <__alt_mem_epcs_flash_controller_0+0xff802aa0>
  80c1a4:	0401ffc4 	movi	r16,2047
  80c1a8:	003e2506 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c1ac:	0013883a 	mov	r9,zero
  80c1b0:	003f8406 	br	80bfc4 <__alt_mem_epcs_flash_controller_0+0xff802fc4>
  80c1b4:	0005883a 	mov	r2,zero
  80c1b8:	0007883a 	mov	r3,zero
  80c1bc:	003e8906 	br	80bbe4 <__alt_mem_epcs_flash_controller_0+0xff802be4>
  80c1c0:	197ff804 	addi	r5,r3,-32
  80c1c4:	01000804 	movi	r4,32
  80c1c8:	414ad83a 	srl	r5,r8,r5
  80c1cc:	19002426 	beq	r3,r4,80c260 <__adddf3+0x89c>
  80c1d0:	01001004 	movi	r4,64
  80c1d4:	20c7c83a 	sub	r3,r4,r3
  80c1d8:	40c6983a 	sll	r3,r8,r3
  80c1dc:	1c46b03a 	or	r3,r3,r17
  80c1e0:	1806c03a 	cmpne	r3,r3,zero
  80c1e4:	28e2b03a 	or	r17,r5,r3
  80c1e8:	0007883a 	mov	r3,zero
  80c1ec:	003f2306 	br	80be7c <__alt_mem_epcs_flash_controller_0+0xff802e7c>
  80c1f0:	0007883a 	mov	r3,zero
  80c1f4:	5811883a 	mov	r8,r11
  80c1f8:	00bfffc4 	movi	r2,-1
  80c1fc:	0401ffc4 	movi	r16,2047
  80c200:	003e7806 	br	80bbe4 <__alt_mem_epcs_flash_controller_0+0xff802be4>
  80c204:	4462b03a 	or	r17,r8,r17
  80c208:	8822c03a 	cmpne	r17,r17,zero
  80c20c:	0009883a 	mov	r4,zero
  80c210:	003fa006 	br	80c094 <__alt_mem_epcs_flash_controller_0+0xff803094>
  80c214:	4811883a 	mov	r8,r9
  80c218:	3023883a 	mov	r17,r6
  80c21c:	0401ffc4 	movi	r16,2047
  80c220:	003e0706 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c224:	4811883a 	mov	r8,r9
  80c228:	3023883a 	mov	r17,r6
  80c22c:	003e0406 	br	80ba40 <__alt_mem_epcs_flash_controller_0+0xff802a40>
  80c230:	21fff804 	addi	r7,r4,-32
  80c234:	01400804 	movi	r5,32
  80c238:	41ced83a 	srl	r7,r8,r7
  80c23c:	21400a26 	beq	r4,r5,80c268 <__adddf3+0x8a4>
  80c240:	01401004 	movi	r5,64
  80c244:	2909c83a 	sub	r4,r5,r4
  80c248:	4108983a 	sll	r4,r8,r4
  80c24c:	2448b03a 	or	r4,r4,r17
  80c250:	2008c03a 	cmpne	r4,r4,zero
  80c254:	3922b03a 	or	r17,r7,r4
  80c258:	0009883a 	mov	r4,zero
  80c25c:	003f8d06 	br	80c094 <__alt_mem_epcs_flash_controller_0+0xff803094>
  80c260:	0007883a 	mov	r3,zero
  80c264:	003fdd06 	br	80c1dc <__alt_mem_epcs_flash_controller_0+0xff8031dc>
  80c268:	0009883a 	mov	r4,zero
  80c26c:	003ff706 	br	80c24c <__alt_mem_epcs_flash_controller_0+0xff80324c>

0080c270 <__divdf3>:
  80c270:	defff004 	addi	sp,sp,-64
  80c274:	dc800815 	stw	r18,32(sp)
  80c278:	2824d53a 	srli	r18,r5,20
  80c27c:	dd800c15 	stw	r22,48(sp)
  80c280:	282cd7fa 	srli	r22,r5,31
  80c284:	dc000615 	stw	r16,24(sp)
  80c288:	04000434 	movhi	r16,16
  80c28c:	843fffc4 	addi	r16,r16,-1
  80c290:	dfc00f15 	stw	ra,60(sp)
  80c294:	df000e15 	stw	fp,56(sp)
  80c298:	ddc00d15 	stw	r23,52(sp)
  80c29c:	dd400b15 	stw	r21,44(sp)
  80c2a0:	dd000a15 	stw	r20,40(sp)
  80c2a4:	dcc00915 	stw	r19,36(sp)
  80c2a8:	dc400715 	stw	r17,28(sp)
  80c2ac:	9481ffcc 	andi	r18,r18,2047
  80c2b0:	2c20703a 	and	r16,r5,r16
  80c2b4:	b2003fcc 	andi	r8,r22,255
  80c2b8:	90006126 	beq	r18,zero,80c440 <__divdf3+0x1d0>
  80c2bc:	0081ffc4 	movi	r2,2047
  80c2c0:	202b883a 	mov	r21,r4
  80c2c4:	90803726 	beq	r18,r2,80c3a4 <__divdf3+0x134>
  80c2c8:	80800434 	orhi	r2,r16,16
  80c2cc:	100490fa 	slli	r2,r2,3
  80c2d0:	2020d77a 	srli	r16,r4,29
  80c2d4:	202a90fa 	slli	r21,r4,3
  80c2d8:	94bf0044 	addi	r18,r18,-1023
  80c2dc:	80a0b03a 	or	r16,r16,r2
  80c2e0:	0013883a 	mov	r9,zero
  80c2e4:	000b883a 	mov	r5,zero
  80c2e8:	3806d53a 	srli	r3,r7,20
  80c2ec:	382ed7fa 	srli	r23,r7,31
  80c2f0:	04400434 	movhi	r17,16
  80c2f4:	8c7fffc4 	addi	r17,r17,-1
  80c2f8:	18c1ffcc 	andi	r3,r3,2047
  80c2fc:	3029883a 	mov	r20,r6
  80c300:	3c62703a 	and	r17,r7,r17
  80c304:	bf003fcc 	andi	fp,r23,255
  80c308:	18006e26 	beq	r3,zero,80c4c4 <__divdf3+0x254>
  80c30c:	0081ffc4 	movi	r2,2047
  80c310:	18806626 	beq	r3,r2,80c4ac <__divdf3+0x23c>
  80c314:	88800434 	orhi	r2,r17,16
  80c318:	100490fa 	slli	r2,r2,3
  80c31c:	3022d77a 	srli	r17,r6,29
  80c320:	302890fa 	slli	r20,r6,3
  80c324:	18ff0044 	addi	r3,r3,-1023
  80c328:	88a2b03a 	or	r17,r17,r2
  80c32c:	000f883a 	mov	r7,zero
  80c330:	b5e6f03a 	xor	r19,r22,r23
  80c334:	3a4cb03a 	or	r6,r7,r9
  80c338:	008003c4 	movi	r2,15
  80c33c:	9809883a 	mov	r4,r19
  80c340:	90c7c83a 	sub	r3,r18,r3
  80c344:	9cc03fcc 	andi	r19,r19,255
  80c348:	11809636 	bltu	r2,r6,80c5a4 <__divdf3+0x334>
  80c34c:	300c90ba 	slli	r6,r6,2
  80c350:	00802074 	movhi	r2,129
  80c354:	10b0d904 	addi	r2,r2,-15516
  80c358:	308d883a 	add	r6,r6,r2
  80c35c:	30800017 	ldw	r2,0(r6)
  80c360:	1000683a 	jmp	r2
  80c364:	0080c5a4 	muli	r2,zero,790
  80c368:	0080c3dc 	xori	r2,zero,783
  80c36c:	0080c594 	movui	r2,790
  80c370:	0080c3d0 	cmplti	r2,zero,783
  80c374:	0080c594 	movui	r2,790
  80c378:	0080c568 	cmpgeui	r2,zero,789
  80c37c:	0080c594 	movui	r2,790
  80c380:	0080c3d0 	cmplti	r2,zero,783
  80c384:	0080c3dc 	xori	r2,zero,783
  80c388:	0080c3dc 	xori	r2,zero,783
  80c38c:	0080c568 	cmpgeui	r2,zero,789
  80c390:	0080c3d0 	cmplti	r2,zero,783
  80c394:	0080c3c0 	call	80c3c <OSCtxSw_SWITCH_PC+0x80bfc>
  80c398:	0080c3c0 	call	80c3c <OSCtxSw_SWITCH_PC+0x80bfc>
  80c39c:	0080c3c0 	call	80c3c <OSCtxSw_SWITCH_PC+0x80bfc>
  80c3a0:	0080c92c 	andhi	r2,zero,804
  80c3a4:	2404b03a 	or	r2,r4,r16
  80c3a8:	10006c1e 	bne	r2,zero,80c55c <__divdf3+0x2ec>
  80c3ac:	02400204 	movi	r9,8
  80c3b0:	0021883a 	mov	r16,zero
  80c3b4:	002b883a 	mov	r21,zero
  80c3b8:	01400084 	movi	r5,2
  80c3bc:	003fca06 	br	80c2e8 <__alt_mem_epcs_flash_controller_0+0xff8032e8>
  80c3c0:	8023883a 	mov	r17,r16
  80c3c4:	a829883a 	mov	r20,r21
  80c3c8:	4039883a 	mov	fp,r8
  80c3cc:	280f883a 	mov	r7,r5
  80c3d0:	00800084 	movi	r2,2
  80c3d4:	3881601e 	bne	r7,r2,80c958 <__divdf3+0x6e8>
  80c3d8:	e027883a 	mov	r19,fp
  80c3dc:	9900004c 	andi	r4,r19,1
  80c3e0:	0081ffc4 	movi	r2,2047
  80c3e4:	0021883a 	mov	r16,zero
  80c3e8:	002b883a 	mov	r21,zero
  80c3ec:	1004953a 	slli	r2,r2,20
  80c3f0:	20c03fcc 	andi	r3,r4,255
  80c3f4:	01400434 	movhi	r5,16
  80c3f8:	297fffc4 	addi	r5,r5,-1
  80c3fc:	180697fa 	slli	r3,r3,31
  80c400:	8160703a 	and	r16,r16,r5
  80c404:	80a0b03a 	or	r16,r16,r2
  80c408:	80c6b03a 	or	r3,r16,r3
  80c40c:	a805883a 	mov	r2,r21
  80c410:	dfc00f17 	ldw	ra,60(sp)
  80c414:	df000e17 	ldw	fp,56(sp)
  80c418:	ddc00d17 	ldw	r23,52(sp)
  80c41c:	dd800c17 	ldw	r22,48(sp)
  80c420:	dd400b17 	ldw	r21,44(sp)
  80c424:	dd000a17 	ldw	r20,40(sp)
  80c428:	dcc00917 	ldw	r19,36(sp)
  80c42c:	dc800817 	ldw	r18,32(sp)
  80c430:	dc400717 	ldw	r17,28(sp)
  80c434:	dc000617 	ldw	r16,24(sp)
  80c438:	dec01004 	addi	sp,sp,64
  80c43c:	f800283a 	ret
  80c440:	2404b03a 	or	r2,r4,r16
  80c444:	2023883a 	mov	r17,r4
  80c448:	10003f26 	beq	r2,zero,80c548 <__divdf3+0x2d8>
  80c44c:	80015e26 	beq	r16,zero,80c9c8 <__divdf3+0x758>
  80c450:	8009883a 	mov	r4,r16
  80c454:	d9800215 	stw	r6,8(sp)
  80c458:	d9c00515 	stw	r7,20(sp)
  80c45c:	da000415 	stw	r8,16(sp)
  80c460:	080e2040 	call	80e204 <__clzsi2>
  80c464:	d9800217 	ldw	r6,8(sp)
  80c468:	d9c00517 	ldw	r7,20(sp)
  80c46c:	da000417 	ldw	r8,16(sp)
  80c470:	113ffd44 	addi	r4,r2,-11
  80c474:	00c00704 	movi	r3,28
  80c478:	19014f16 	blt	r3,r4,80c9b8 <__divdf3+0x748>
  80c47c:	00c00744 	movi	r3,29
  80c480:	157ffe04 	addi	r21,r2,-8
  80c484:	1907c83a 	sub	r3,r3,r4
  80c488:	8560983a 	sll	r16,r16,r21
  80c48c:	88c6d83a 	srl	r3,r17,r3
  80c490:	8d6a983a 	sll	r21,r17,r21
  80c494:	1c20b03a 	or	r16,r3,r16
  80c498:	1080fcc4 	addi	r2,r2,1011
  80c49c:	00a5c83a 	sub	r18,zero,r2
  80c4a0:	0013883a 	mov	r9,zero
  80c4a4:	000b883a 	mov	r5,zero
  80c4a8:	003f8f06 	br	80c2e8 <__alt_mem_epcs_flash_controller_0+0xff8032e8>
  80c4ac:	3444b03a 	or	r2,r6,r17
  80c4b0:	1000231e 	bne	r2,zero,80c540 <__divdf3+0x2d0>
  80c4b4:	0023883a 	mov	r17,zero
  80c4b8:	0029883a 	mov	r20,zero
  80c4bc:	01c00084 	movi	r7,2
  80c4c0:	003f9b06 	br	80c330 <__alt_mem_epcs_flash_controller_0+0xff803330>
  80c4c4:	3444b03a 	or	r2,r6,r17
  80c4c8:	10001926 	beq	r2,zero,80c530 <__divdf3+0x2c0>
  80c4cc:	88014b26 	beq	r17,zero,80c9fc <__divdf3+0x78c>
  80c4d0:	8809883a 	mov	r4,r17
  80c4d4:	d9400115 	stw	r5,4(sp)
  80c4d8:	d9800215 	stw	r6,8(sp)
  80c4dc:	da000415 	stw	r8,16(sp)
  80c4e0:	da400315 	stw	r9,12(sp)
  80c4e4:	080e2040 	call	80e204 <__clzsi2>
  80c4e8:	d9400117 	ldw	r5,4(sp)
  80c4ec:	d9800217 	ldw	r6,8(sp)
  80c4f0:	da000417 	ldw	r8,16(sp)
  80c4f4:	da400317 	ldw	r9,12(sp)
  80c4f8:	113ffd44 	addi	r4,r2,-11
  80c4fc:	00c00704 	movi	r3,28
  80c500:	19013a16 	blt	r3,r4,80c9ec <__divdf3+0x77c>
  80c504:	00c00744 	movi	r3,29
  80c508:	153ffe04 	addi	r20,r2,-8
  80c50c:	1907c83a 	sub	r3,r3,r4
  80c510:	8d22983a 	sll	r17,r17,r20
  80c514:	30c6d83a 	srl	r3,r6,r3
  80c518:	3528983a 	sll	r20,r6,r20
  80c51c:	1c62b03a 	or	r17,r3,r17
  80c520:	1080fcc4 	addi	r2,r2,1011
  80c524:	0087c83a 	sub	r3,zero,r2
  80c528:	000f883a 	mov	r7,zero
  80c52c:	003f8006 	br	80c330 <__alt_mem_epcs_flash_controller_0+0xff803330>
  80c530:	0023883a 	mov	r17,zero
  80c534:	0029883a 	mov	r20,zero
  80c538:	01c00044 	movi	r7,1
  80c53c:	003f7c06 	br	80c330 <__alt_mem_epcs_flash_controller_0+0xff803330>
  80c540:	01c000c4 	movi	r7,3
  80c544:	003f7a06 	br	80c330 <__alt_mem_epcs_flash_controller_0+0xff803330>
  80c548:	02400104 	movi	r9,4
  80c54c:	0021883a 	mov	r16,zero
  80c550:	002b883a 	mov	r21,zero
  80c554:	01400044 	movi	r5,1
  80c558:	003f6306 	br	80c2e8 <__alt_mem_epcs_flash_controller_0+0xff8032e8>
  80c55c:	02400304 	movi	r9,12
  80c560:	014000c4 	movi	r5,3
  80c564:	003f6006 	br	80c2e8 <__alt_mem_epcs_flash_controller_0+0xff8032e8>
  80c568:	04000434 	movhi	r16,16
  80c56c:	0009883a 	mov	r4,zero
  80c570:	843fffc4 	addi	r16,r16,-1
  80c574:	057fffc4 	movi	r21,-1
  80c578:	0081ffc4 	movi	r2,2047
  80c57c:	003f9b06 	br	80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80c580:	00c00044 	movi	r3,1
  80c584:	1887c83a 	sub	r3,r3,r2
  80c588:	01000e04 	movi	r4,56
  80c58c:	20c1530e 	bge	r4,r3,80cadc <__divdf3+0x86c>
  80c590:	9900004c 	andi	r4,r19,1
  80c594:	0005883a 	mov	r2,zero
  80c598:	0021883a 	mov	r16,zero
  80c59c:	002b883a 	mov	r21,zero
  80c5a0:	003f9206 	br	80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80c5a4:	8c012e36 	bltu	r17,r16,80ca60 <__divdf3+0x7f0>
  80c5a8:	84412c26 	beq	r16,r17,80ca5c <__divdf3+0x7ec>
  80c5ac:	a82f883a 	mov	r23,r21
  80c5b0:	18ffffc4 	addi	r3,r3,-1
  80c5b4:	002b883a 	mov	r21,zero
  80c5b8:	a004d63a 	srli	r2,r20,24
  80c5bc:	8822923a 	slli	r17,r17,8
  80c5c0:	a028923a 	slli	r20,r20,8
  80c5c4:	8009883a 	mov	r4,r16
  80c5c8:	88acb03a 	or	r22,r17,r2
  80c5cc:	dd000015 	stw	r20,0(sp)
  80c5d0:	b028d43a 	srli	r20,r22,16
  80c5d4:	d8c00215 	stw	r3,8(sp)
  80c5d8:	b4bfffcc 	andi	r18,r22,65535
  80c5dc:	a00b883a 	mov	r5,r20
  80c5e0:	08012980 	call	801298 <__udivsi3>
  80c5e4:	100b883a 	mov	r5,r2
  80c5e8:	9009883a 	mov	r4,r18
  80c5ec:	1023883a 	mov	r17,r2
  80c5f0:	080b99c0 	call	80b99c <__mulsi3>
  80c5f4:	8009883a 	mov	r4,r16
  80c5f8:	a00b883a 	mov	r5,r20
  80c5fc:	1039883a 	mov	fp,r2
  80c600:	08012fc0 	call	8012fc <__umodsi3>
  80c604:	1004943a 	slli	r2,r2,16
  80c608:	b808d43a 	srli	r4,r23,16
  80c60c:	d8c00217 	ldw	r3,8(sp)
  80c610:	2084b03a 	or	r2,r4,r2
  80c614:	1700062e 	bgeu	r2,fp,80c630 <__divdf3+0x3c0>
  80c618:	1585883a 	add	r2,r2,r22
  80c61c:	893fffc4 	addi	r4,r17,-1
  80c620:	15811d36 	bltu	r2,r22,80ca98 <__divdf3+0x828>
  80c624:	17011c2e 	bgeu	r2,fp,80ca98 <__divdf3+0x828>
  80c628:	8c7fff84 	addi	r17,r17,-2
  80c62c:	1585883a 	add	r2,r2,r22
  80c630:	1739c83a 	sub	fp,r2,fp
  80c634:	a00b883a 	mov	r5,r20
  80c638:	e009883a 	mov	r4,fp
  80c63c:	d8c00215 	stw	r3,8(sp)
  80c640:	08012980 	call	801298 <__udivsi3>
  80c644:	100b883a 	mov	r5,r2
  80c648:	9009883a 	mov	r4,r18
  80c64c:	1021883a 	mov	r16,r2
  80c650:	080b99c0 	call	80b99c <__mulsi3>
  80c654:	a00b883a 	mov	r5,r20
  80c658:	e009883a 	mov	r4,fp
  80c65c:	d8800415 	stw	r2,16(sp)
  80c660:	08012fc0 	call	8012fc <__umodsi3>
  80c664:	1004943a 	slli	r2,r2,16
  80c668:	da000417 	ldw	r8,16(sp)
  80c66c:	bdffffcc 	andi	r23,r23,65535
  80c670:	b884b03a 	or	r2,r23,r2
  80c674:	d8c00217 	ldw	r3,8(sp)
  80c678:	1200062e 	bgeu	r2,r8,80c694 <__divdf3+0x424>
  80c67c:	1585883a 	add	r2,r2,r22
  80c680:	813fffc4 	addi	r4,r16,-1
  80c684:	15810236 	bltu	r2,r22,80ca90 <__divdf3+0x820>
  80c688:	1201012e 	bgeu	r2,r8,80ca90 <__divdf3+0x820>
  80c68c:	843fff84 	addi	r16,r16,-2
  80c690:	1585883a 	add	r2,r2,r22
  80c694:	8822943a 	slli	r17,r17,16
  80c698:	d9800017 	ldw	r6,0(sp)
  80c69c:	1211c83a 	sub	r8,r2,r8
  80c6a0:	8c22b03a 	or	r17,r17,r16
  80c6a4:	373fffcc 	andi	fp,r6,65535
  80c6a8:	8abfffcc 	andi	r10,r17,65535
  80c6ac:	8820d43a 	srli	r16,r17,16
  80c6b0:	5009883a 	mov	r4,r10
  80c6b4:	e00b883a 	mov	r5,fp
  80c6b8:	302ed43a 	srli	r23,r6,16
  80c6bc:	d8c00215 	stw	r3,8(sp)
  80c6c0:	da000415 	stw	r8,16(sp)
  80c6c4:	da800115 	stw	r10,4(sp)
  80c6c8:	080b99c0 	call	80b99c <__mulsi3>
  80c6cc:	800b883a 	mov	r5,r16
  80c6d0:	e009883a 	mov	r4,fp
  80c6d4:	d8800515 	stw	r2,20(sp)
  80c6d8:	080b99c0 	call	80b99c <__mulsi3>
  80c6dc:	8009883a 	mov	r4,r16
  80c6e0:	b80b883a 	mov	r5,r23
  80c6e4:	d8800315 	stw	r2,12(sp)
  80c6e8:	080b99c0 	call	80b99c <__mulsi3>
  80c6ec:	da800117 	ldw	r10,4(sp)
  80c6f0:	b80b883a 	mov	r5,r23
  80c6f4:	1021883a 	mov	r16,r2
  80c6f8:	5009883a 	mov	r4,r10
  80c6fc:	080b99c0 	call	80b99c <__mulsi3>
  80c700:	d9c00517 	ldw	r7,20(sp)
  80c704:	da400317 	ldw	r9,12(sp)
  80c708:	d8c00217 	ldw	r3,8(sp)
  80c70c:	3808d43a 	srli	r4,r7,16
  80c710:	1245883a 	add	r2,r2,r9
  80c714:	da000417 	ldw	r8,16(sp)
  80c718:	2085883a 	add	r2,r4,r2
  80c71c:	1240022e 	bgeu	r2,r9,80c728 <__divdf3+0x4b8>
  80c720:	01000074 	movhi	r4,1
  80c724:	8121883a 	add	r16,r16,r4
  80c728:	1008d43a 	srli	r4,r2,16
  80c72c:	1004943a 	slli	r2,r2,16
  80c730:	39ffffcc 	andi	r7,r7,65535
  80c734:	2409883a 	add	r4,r4,r16
  80c738:	11c5883a 	add	r2,r2,r7
  80c73c:	4100bb36 	bltu	r8,r4,80ca2c <__divdf3+0x7bc>
  80c740:	4100d726 	beq	r8,r4,80caa0 <__divdf3+0x830>
  80c744:	4109c83a 	sub	r4,r8,r4
  80c748:	a8a1c83a 	sub	r16,r21,r2
  80c74c:	ac2b803a 	cmpltu	r21,r21,r16
  80c750:	256bc83a 	sub	r21,r4,r21
  80c754:	b540d926 	beq	r22,r21,80cabc <__divdf3+0x84c>
  80c758:	a00b883a 	mov	r5,r20
  80c75c:	a809883a 	mov	r4,r21
  80c760:	d8c00215 	stw	r3,8(sp)
  80c764:	08012980 	call	801298 <__udivsi3>
  80c768:	100b883a 	mov	r5,r2
  80c76c:	9009883a 	mov	r4,r18
  80c770:	d8800515 	stw	r2,20(sp)
  80c774:	080b99c0 	call	80b99c <__mulsi3>
  80c778:	a809883a 	mov	r4,r21
  80c77c:	a00b883a 	mov	r5,r20
  80c780:	d8800415 	stw	r2,16(sp)
  80c784:	08012fc0 	call	8012fc <__umodsi3>
  80c788:	1004943a 	slli	r2,r2,16
  80c78c:	8008d43a 	srli	r4,r16,16
  80c790:	da000417 	ldw	r8,16(sp)
  80c794:	d8c00217 	ldw	r3,8(sp)
  80c798:	2084b03a 	or	r2,r4,r2
  80c79c:	d9c00517 	ldw	r7,20(sp)
  80c7a0:	1200062e 	bgeu	r2,r8,80c7bc <__divdf3+0x54c>
  80c7a4:	1585883a 	add	r2,r2,r22
  80c7a8:	393fffc4 	addi	r4,r7,-1
  80c7ac:	1580c536 	bltu	r2,r22,80cac4 <__divdf3+0x854>
  80c7b0:	1200c42e 	bgeu	r2,r8,80cac4 <__divdf3+0x854>
  80c7b4:	39ffff84 	addi	r7,r7,-2
  80c7b8:	1585883a 	add	r2,r2,r22
  80c7bc:	122bc83a 	sub	r21,r2,r8
  80c7c0:	a00b883a 	mov	r5,r20
  80c7c4:	a809883a 	mov	r4,r21
  80c7c8:	d8c00215 	stw	r3,8(sp)
  80c7cc:	d9c00515 	stw	r7,20(sp)
  80c7d0:	08012980 	call	801298 <__udivsi3>
  80c7d4:	9009883a 	mov	r4,r18
  80c7d8:	100b883a 	mov	r5,r2
  80c7dc:	d8800415 	stw	r2,16(sp)
  80c7e0:	080b99c0 	call	80b99c <__mulsi3>
  80c7e4:	a809883a 	mov	r4,r21
  80c7e8:	a00b883a 	mov	r5,r20
  80c7ec:	1025883a 	mov	r18,r2
  80c7f0:	08012fc0 	call	8012fc <__umodsi3>
  80c7f4:	1004943a 	slli	r2,r2,16
  80c7f8:	813fffcc 	andi	r4,r16,65535
  80c7fc:	d8c00217 	ldw	r3,8(sp)
  80c800:	20a0b03a 	or	r16,r4,r2
  80c804:	d9c00517 	ldw	r7,20(sp)
  80c808:	da000417 	ldw	r8,16(sp)
  80c80c:	8480062e 	bgeu	r16,r18,80c828 <__divdf3+0x5b8>
  80c810:	85a1883a 	add	r16,r16,r22
  80c814:	40bfffc4 	addi	r2,r8,-1
  80c818:	8580ac36 	bltu	r16,r22,80cacc <__divdf3+0x85c>
  80c81c:	8480ab2e 	bgeu	r16,r18,80cacc <__divdf3+0x85c>
  80c820:	423fff84 	addi	r8,r8,-2
  80c824:	85a1883a 	add	r16,r16,r22
  80c828:	3804943a 	slli	r2,r7,16
  80c82c:	84a1c83a 	sub	r16,r16,r18
  80c830:	e009883a 	mov	r4,fp
  80c834:	1228b03a 	or	r20,r2,r8
  80c838:	a1ffffcc 	andi	r7,r20,65535
  80c83c:	a024d43a 	srli	r18,r20,16
  80c840:	380b883a 	mov	r5,r7
  80c844:	d8c00215 	stw	r3,8(sp)
  80c848:	d9c00515 	stw	r7,20(sp)
  80c84c:	080b99c0 	call	80b99c <__mulsi3>
  80c850:	900b883a 	mov	r5,r18
  80c854:	e009883a 	mov	r4,fp
  80c858:	102b883a 	mov	r21,r2
  80c85c:	080b99c0 	call	80b99c <__mulsi3>
  80c860:	900b883a 	mov	r5,r18
  80c864:	b809883a 	mov	r4,r23
  80c868:	1039883a 	mov	fp,r2
  80c86c:	080b99c0 	call	80b99c <__mulsi3>
  80c870:	d9c00517 	ldw	r7,20(sp)
  80c874:	b80b883a 	mov	r5,r23
  80c878:	1025883a 	mov	r18,r2
  80c87c:	3809883a 	mov	r4,r7
  80c880:	080b99c0 	call	80b99c <__mulsi3>
  80c884:	a808d43a 	srli	r4,r21,16
  80c888:	1705883a 	add	r2,r2,fp
  80c88c:	d8c00217 	ldw	r3,8(sp)
  80c890:	2085883a 	add	r2,r4,r2
  80c894:	1700022e 	bgeu	r2,fp,80c8a0 <__divdf3+0x630>
  80c898:	01000074 	movhi	r4,1
  80c89c:	9125883a 	add	r18,r18,r4
  80c8a0:	1008d43a 	srli	r4,r2,16
  80c8a4:	1004943a 	slli	r2,r2,16
  80c8a8:	ad7fffcc 	andi	r21,r21,65535
  80c8ac:	2489883a 	add	r4,r4,r18
  80c8b0:	1545883a 	add	r2,r2,r21
  80c8b4:	81003836 	bltu	r16,r4,80c998 <__divdf3+0x728>
  80c8b8:	81003626 	beq	r16,r4,80c994 <__divdf3+0x724>
  80c8bc:	a5000054 	ori	r20,r20,1
  80c8c0:	1880ffc4 	addi	r2,r3,1023
  80c8c4:	00bf2e0e 	bge	zero,r2,80c580 <__alt_mem_epcs_flash_controller_0+0xff803580>
  80c8c8:	a10001cc 	andi	r4,r20,7
  80c8cc:	20000726 	beq	r4,zero,80c8ec <__divdf3+0x67c>
  80c8d0:	a10003cc 	andi	r4,r20,15
  80c8d4:	01400104 	movi	r5,4
  80c8d8:	21400426 	beq	r4,r5,80c8ec <__divdf3+0x67c>
  80c8dc:	a149883a 	add	r4,r20,r5
  80c8e0:	2529803a 	cmpltu	r20,r4,r20
  80c8e4:	8d23883a 	add	r17,r17,r20
  80c8e8:	2029883a 	mov	r20,r4
  80c8ec:	8900402c 	andhi	r4,r17,256
  80c8f0:	20000426 	beq	r4,zero,80c904 <__divdf3+0x694>
  80c8f4:	18810004 	addi	r2,r3,1024
  80c8f8:	00ffc034 	movhi	r3,65280
  80c8fc:	18ffffc4 	addi	r3,r3,-1
  80c900:	88e2703a 	and	r17,r17,r3
  80c904:	00c1ff84 	movi	r3,2046
  80c908:	18beb416 	blt	r3,r2,80c3dc <__alt_mem_epcs_flash_controller_0+0xff8033dc>
  80c90c:	a028d0fa 	srli	r20,r20,3
  80c910:	882a977a 	slli	r21,r17,29
  80c914:	8820927a 	slli	r16,r17,9
  80c918:	1081ffcc 	andi	r2,r2,2047
  80c91c:	ad2ab03a 	or	r21,r21,r20
  80c920:	8020d33a 	srli	r16,r16,12
  80c924:	9900004c 	andi	r4,r19,1
  80c928:	003eb006 	br	80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80c92c:	8080022c 	andhi	r2,r16,8
  80c930:	10001226 	beq	r2,zero,80c97c <__divdf3+0x70c>
  80c934:	8880022c 	andhi	r2,r17,8
  80c938:	1000101e 	bne	r2,zero,80c97c <__divdf3+0x70c>
  80c93c:	00800434 	movhi	r2,16
  80c940:	8c000234 	orhi	r16,r17,8
  80c944:	10bfffc4 	addi	r2,r2,-1
  80c948:	b809883a 	mov	r4,r23
  80c94c:	80a0703a 	and	r16,r16,r2
  80c950:	a02b883a 	mov	r21,r20
  80c954:	003f0806 	br	80c578 <__alt_mem_epcs_flash_controller_0+0xff803578>
  80c958:	008000c4 	movi	r2,3
  80c95c:	3880b126 	beq	r7,r2,80cc24 <__divdf3+0x9b4>
  80c960:	00800044 	movi	r2,1
  80c964:	38805b1e 	bne	r7,r2,80cad4 <__divdf3+0x864>
  80c968:	e009883a 	mov	r4,fp
  80c96c:	0005883a 	mov	r2,zero
  80c970:	0021883a 	mov	r16,zero
  80c974:	002b883a 	mov	r21,zero
  80c978:	003e9c06 	br	80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80c97c:	00800434 	movhi	r2,16
  80c980:	84000234 	orhi	r16,r16,8
  80c984:	10bfffc4 	addi	r2,r2,-1
  80c988:	b009883a 	mov	r4,r22
  80c98c:	80a0703a 	and	r16,r16,r2
  80c990:	003ef906 	br	80c578 <__alt_mem_epcs_flash_controller_0+0xff803578>
  80c994:	103fca26 	beq	r2,zero,80c8c0 <__alt_mem_epcs_flash_controller_0+0xff8038c0>
  80c998:	b421883a 	add	r16,r22,r16
  80c99c:	a17fffc4 	addi	r5,r20,-1
  80c9a0:	8580422e 	bgeu	r16,r22,80caac <__divdf3+0x83c>
  80c9a4:	2829883a 	mov	r20,r5
  80c9a8:	813fc41e 	bne	r16,r4,80c8bc <__alt_mem_epcs_flash_controller_0+0xff8038bc>
  80c9ac:	d9800017 	ldw	r6,0(sp)
  80c9b0:	30bfc21e 	bne	r6,r2,80c8bc <__alt_mem_epcs_flash_controller_0+0xff8038bc>
  80c9b4:	003fc206 	br	80c8c0 <__alt_mem_epcs_flash_controller_0+0xff8038c0>
  80c9b8:	143ff604 	addi	r16,r2,-40
  80c9bc:	8c20983a 	sll	r16,r17,r16
  80c9c0:	002b883a 	mov	r21,zero
  80c9c4:	003eb406 	br	80c498 <__alt_mem_epcs_flash_controller_0+0xff803498>
  80c9c8:	d9800215 	stw	r6,8(sp)
  80c9cc:	d9c00515 	stw	r7,20(sp)
  80c9d0:	da000415 	stw	r8,16(sp)
  80c9d4:	080e2040 	call	80e204 <__clzsi2>
  80c9d8:	10800804 	addi	r2,r2,32
  80c9dc:	da000417 	ldw	r8,16(sp)
  80c9e0:	d9c00517 	ldw	r7,20(sp)
  80c9e4:	d9800217 	ldw	r6,8(sp)
  80c9e8:	003ea106 	br	80c470 <__alt_mem_epcs_flash_controller_0+0xff803470>
  80c9ec:	147ff604 	addi	r17,r2,-40
  80c9f0:	3462983a 	sll	r17,r6,r17
  80c9f4:	0029883a 	mov	r20,zero
  80c9f8:	003ec906 	br	80c520 <__alt_mem_epcs_flash_controller_0+0xff803520>
  80c9fc:	3009883a 	mov	r4,r6
  80ca00:	d9400115 	stw	r5,4(sp)
  80ca04:	d9800215 	stw	r6,8(sp)
  80ca08:	da000415 	stw	r8,16(sp)
  80ca0c:	da400315 	stw	r9,12(sp)
  80ca10:	080e2040 	call	80e204 <__clzsi2>
  80ca14:	10800804 	addi	r2,r2,32
  80ca18:	da400317 	ldw	r9,12(sp)
  80ca1c:	da000417 	ldw	r8,16(sp)
  80ca20:	d9800217 	ldw	r6,8(sp)
  80ca24:	d9400117 	ldw	r5,4(sp)
  80ca28:	003eb306 	br	80c4f8 <__alt_mem_epcs_flash_controller_0+0xff8034f8>
  80ca2c:	d9800017 	ldw	r6,0(sp)
  80ca30:	a9ab883a 	add	r21,r21,r6
  80ca34:	a98b803a 	cmpltu	r5,r21,r6
  80ca38:	2d8b883a 	add	r5,r5,r22
  80ca3c:	2a11883a 	add	r8,r5,r8
  80ca40:	897fffc4 	addi	r5,r17,-1
  80ca44:	b2000c2e 	bgeu	r22,r8,80ca78 <__divdf3+0x808>
  80ca48:	41003f36 	bltu	r8,r4,80cb48 <__divdf3+0x8d8>
  80ca4c:	22006c26 	beq	r4,r8,80cc00 <__divdf3+0x990>
  80ca50:	4109c83a 	sub	r4,r8,r4
  80ca54:	2823883a 	mov	r17,r5
  80ca58:	003f3b06 	br	80c748 <__alt_mem_epcs_flash_controller_0+0xff803748>
  80ca5c:	ad3ed336 	bltu	r21,r20,80c5ac <__alt_mem_epcs_flash_controller_0+0xff8035ac>
  80ca60:	a804d07a 	srli	r2,r21,1
  80ca64:	802e97fa 	slli	r23,r16,31
  80ca68:	a82a97fa 	slli	r21,r21,31
  80ca6c:	8020d07a 	srli	r16,r16,1
  80ca70:	b8aeb03a 	or	r23,r23,r2
  80ca74:	003ed006 	br	80c5b8 <__alt_mem_epcs_flash_controller_0+0xff8035b8>
  80ca78:	b23ff51e 	bne	r22,r8,80ca50 <__alt_mem_epcs_flash_controller_0+0xff803a50>
  80ca7c:	d9800017 	ldw	r6,0(sp)
  80ca80:	a9bff12e 	bgeu	r21,r6,80ca48 <__alt_mem_epcs_flash_controller_0+0xff803a48>
  80ca84:	b109c83a 	sub	r4,r22,r4
  80ca88:	2823883a 	mov	r17,r5
  80ca8c:	003f2e06 	br	80c748 <__alt_mem_epcs_flash_controller_0+0xff803748>
  80ca90:	2021883a 	mov	r16,r4
  80ca94:	003eff06 	br	80c694 <__alt_mem_epcs_flash_controller_0+0xff803694>
  80ca98:	2023883a 	mov	r17,r4
  80ca9c:	003ee406 	br	80c630 <__alt_mem_epcs_flash_controller_0+0xff803630>
  80caa0:	a8bfe236 	bltu	r21,r2,80ca2c <__alt_mem_epcs_flash_controller_0+0xff803a2c>
  80caa4:	0009883a 	mov	r4,zero
  80caa8:	003f2706 	br	80c748 <__alt_mem_epcs_flash_controller_0+0xff803748>
  80caac:	81002d36 	bltu	r16,r4,80cb64 <__divdf3+0x8f4>
  80cab0:	24005626 	beq	r4,r16,80cc0c <__divdf3+0x99c>
  80cab4:	2829883a 	mov	r20,r5
  80cab8:	003f8006 	br	80c8bc <__alt_mem_epcs_flash_controller_0+0xff8038bc>
  80cabc:	053fffc4 	movi	r20,-1
  80cac0:	003f7f06 	br	80c8c0 <__alt_mem_epcs_flash_controller_0+0xff8038c0>
  80cac4:	200f883a 	mov	r7,r4
  80cac8:	003f3c06 	br	80c7bc <__alt_mem_epcs_flash_controller_0+0xff8037bc>
  80cacc:	1011883a 	mov	r8,r2
  80cad0:	003f5506 	br	80c828 <__alt_mem_epcs_flash_controller_0+0xff803828>
  80cad4:	e027883a 	mov	r19,fp
  80cad8:	003f7906 	br	80c8c0 <__alt_mem_epcs_flash_controller_0+0xff8038c0>
  80cadc:	010007c4 	movi	r4,31
  80cae0:	20c02816 	blt	r4,r3,80cb84 <__divdf3+0x914>
  80cae4:	00800804 	movi	r2,32
  80cae8:	10c5c83a 	sub	r2,r2,r3
  80caec:	888a983a 	sll	r5,r17,r2
  80caf0:	a0c8d83a 	srl	r4,r20,r3
  80caf4:	a084983a 	sll	r2,r20,r2
  80caf8:	88e2d83a 	srl	r17,r17,r3
  80cafc:	2906b03a 	or	r3,r5,r4
  80cb00:	1004c03a 	cmpne	r2,r2,zero
  80cb04:	1886b03a 	or	r3,r3,r2
  80cb08:	188001cc 	andi	r2,r3,7
  80cb0c:	10000726 	beq	r2,zero,80cb2c <__divdf3+0x8bc>
  80cb10:	188003cc 	andi	r2,r3,15
  80cb14:	01000104 	movi	r4,4
  80cb18:	11000426 	beq	r2,r4,80cb2c <__divdf3+0x8bc>
  80cb1c:	1805883a 	mov	r2,r3
  80cb20:	10c00104 	addi	r3,r2,4
  80cb24:	1885803a 	cmpltu	r2,r3,r2
  80cb28:	88a3883a 	add	r17,r17,r2
  80cb2c:	8880202c 	andhi	r2,r17,128
  80cb30:	10002926 	beq	r2,zero,80cbd8 <__divdf3+0x968>
  80cb34:	9900004c 	andi	r4,r19,1
  80cb38:	00800044 	movi	r2,1
  80cb3c:	0021883a 	mov	r16,zero
  80cb40:	002b883a 	mov	r21,zero
  80cb44:	003e2906 	br	80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80cb48:	d9800017 	ldw	r6,0(sp)
  80cb4c:	8c7fff84 	addi	r17,r17,-2
  80cb50:	a9ab883a 	add	r21,r21,r6
  80cb54:	a98b803a 	cmpltu	r5,r21,r6
  80cb58:	2d8b883a 	add	r5,r5,r22
  80cb5c:	2a11883a 	add	r8,r5,r8
  80cb60:	003ef806 	br	80c744 <__alt_mem_epcs_flash_controller_0+0xff803744>
  80cb64:	d9800017 	ldw	r6,0(sp)
  80cb68:	318f883a 	add	r7,r6,r6
  80cb6c:	398b803a 	cmpltu	r5,r7,r6
  80cb70:	2d8d883a 	add	r6,r5,r22
  80cb74:	81a1883a 	add	r16,r16,r6
  80cb78:	a17fff84 	addi	r5,r20,-2
  80cb7c:	d9c00015 	stw	r7,0(sp)
  80cb80:	003f8806 	br	80c9a4 <__alt_mem_epcs_flash_controller_0+0xff8039a4>
  80cb84:	013ff844 	movi	r4,-31
  80cb88:	2085c83a 	sub	r2,r4,r2
  80cb8c:	8888d83a 	srl	r4,r17,r2
  80cb90:	00800804 	movi	r2,32
  80cb94:	18802126 	beq	r3,r2,80cc1c <__divdf3+0x9ac>
  80cb98:	04001004 	movi	r16,64
  80cb9c:	80c7c83a 	sub	r3,r16,r3
  80cba0:	88e0983a 	sll	r16,r17,r3
  80cba4:	8504b03a 	or	r2,r16,r20
  80cba8:	1004c03a 	cmpne	r2,r2,zero
  80cbac:	2084b03a 	or	r2,r4,r2
  80cbb0:	144001cc 	andi	r17,r2,7
  80cbb4:	88000d1e 	bne	r17,zero,80cbec <__divdf3+0x97c>
  80cbb8:	0021883a 	mov	r16,zero
  80cbbc:	102ad0fa 	srli	r21,r2,3
  80cbc0:	9900004c 	andi	r4,r19,1
  80cbc4:	0005883a 	mov	r2,zero
  80cbc8:	ac6ab03a 	or	r21,r21,r17
  80cbcc:	003e0706 	br	80c3ec <__alt_mem_epcs_flash_controller_0+0xff8033ec>
  80cbd0:	1007883a 	mov	r3,r2
  80cbd4:	0023883a 	mov	r17,zero
  80cbd8:	8820927a 	slli	r16,r17,9
  80cbdc:	1805883a 	mov	r2,r3
  80cbe0:	8822977a 	slli	r17,r17,29
  80cbe4:	8020d33a 	srli	r16,r16,12
  80cbe8:	003ff406 	br	80cbbc <__alt_mem_epcs_flash_controller_0+0xff803bbc>
  80cbec:	10c003cc 	andi	r3,r2,15
  80cbf0:	01000104 	movi	r4,4
  80cbf4:	193ff626 	beq	r3,r4,80cbd0 <__alt_mem_epcs_flash_controller_0+0xff803bd0>
  80cbf8:	0023883a 	mov	r17,zero
  80cbfc:	003fc806 	br	80cb20 <__alt_mem_epcs_flash_controller_0+0xff803b20>
  80cc00:	a8bfd136 	bltu	r21,r2,80cb48 <__alt_mem_epcs_flash_controller_0+0xff803b48>
  80cc04:	2823883a 	mov	r17,r5
  80cc08:	003fa606 	br	80caa4 <__alt_mem_epcs_flash_controller_0+0xff803aa4>
  80cc0c:	d9800017 	ldw	r6,0(sp)
  80cc10:	30bfd436 	bltu	r6,r2,80cb64 <__alt_mem_epcs_flash_controller_0+0xff803b64>
  80cc14:	2829883a 	mov	r20,r5
  80cc18:	003f6406 	br	80c9ac <__alt_mem_epcs_flash_controller_0+0xff8039ac>
  80cc1c:	0021883a 	mov	r16,zero
  80cc20:	003fe006 	br	80cba4 <__alt_mem_epcs_flash_controller_0+0xff803ba4>
  80cc24:	00800434 	movhi	r2,16
  80cc28:	8c000234 	orhi	r16,r17,8
  80cc2c:	10bfffc4 	addi	r2,r2,-1
  80cc30:	e009883a 	mov	r4,fp
  80cc34:	80a0703a 	and	r16,r16,r2
  80cc38:	a02b883a 	mov	r21,r20
  80cc3c:	003e4e06 	br	80c578 <__alt_mem_epcs_flash_controller_0+0xff803578>

0080cc40 <__eqdf2>:
  80cc40:	2804d53a 	srli	r2,r5,20
  80cc44:	3806d53a 	srli	r3,r7,20
  80cc48:	02000434 	movhi	r8,16
  80cc4c:	423fffc4 	addi	r8,r8,-1
  80cc50:	1081ffcc 	andi	r2,r2,2047
  80cc54:	0281ffc4 	movi	r10,2047
  80cc58:	2a12703a 	and	r9,r5,r8
  80cc5c:	18c1ffcc 	andi	r3,r3,2047
  80cc60:	3a10703a 	and	r8,r7,r8
  80cc64:	280ad7fa 	srli	r5,r5,31
  80cc68:	380ed7fa 	srli	r7,r7,31
  80cc6c:	12801026 	beq	r2,r10,80ccb0 <__eqdf2+0x70>
  80cc70:	0281ffc4 	movi	r10,2047
  80cc74:	1a800a26 	beq	r3,r10,80cca0 <__eqdf2+0x60>
  80cc78:	10c00226 	beq	r2,r3,80cc84 <__eqdf2+0x44>
  80cc7c:	00800044 	movi	r2,1
  80cc80:	f800283a 	ret
  80cc84:	4a3ffd1e 	bne	r9,r8,80cc7c <__alt_mem_epcs_flash_controller_0+0xff803c7c>
  80cc88:	21bffc1e 	bne	r4,r6,80cc7c <__alt_mem_epcs_flash_controller_0+0xff803c7c>
  80cc8c:	29c00c26 	beq	r5,r7,80ccc0 <__eqdf2+0x80>
  80cc90:	103ffa1e 	bne	r2,zero,80cc7c <__alt_mem_epcs_flash_controller_0+0xff803c7c>
  80cc94:	2244b03a 	or	r2,r4,r9
  80cc98:	1004c03a 	cmpne	r2,r2,zero
  80cc9c:	f800283a 	ret
  80cca0:	3214b03a 	or	r10,r6,r8
  80cca4:	503ff426 	beq	r10,zero,80cc78 <__alt_mem_epcs_flash_controller_0+0xff803c78>
  80cca8:	00800044 	movi	r2,1
  80ccac:	f800283a 	ret
  80ccb0:	2254b03a 	or	r10,r4,r9
  80ccb4:	503fee26 	beq	r10,zero,80cc70 <__alt_mem_epcs_flash_controller_0+0xff803c70>
  80ccb8:	00800044 	movi	r2,1
  80ccbc:	f800283a 	ret
  80ccc0:	0005883a 	mov	r2,zero
  80ccc4:	f800283a 	ret

0080ccc8 <__gedf2>:
  80ccc8:	2804d53a 	srli	r2,r5,20
  80cccc:	3806d53a 	srli	r3,r7,20
  80ccd0:	02000434 	movhi	r8,16
  80ccd4:	423fffc4 	addi	r8,r8,-1
  80ccd8:	1081ffcc 	andi	r2,r2,2047
  80ccdc:	0241ffc4 	movi	r9,2047
  80cce0:	2a14703a 	and	r10,r5,r8
  80cce4:	18c1ffcc 	andi	r3,r3,2047
  80cce8:	3a10703a 	and	r8,r7,r8
  80ccec:	280ad7fa 	srli	r5,r5,31
  80ccf0:	380ed7fa 	srli	r7,r7,31
  80ccf4:	12401d26 	beq	r2,r9,80cd6c <__gedf2+0xa4>
  80ccf8:	0241ffc4 	movi	r9,2047
  80ccfc:	1a401226 	beq	r3,r9,80cd48 <__gedf2+0x80>
  80cd00:	1000081e 	bne	r2,zero,80cd24 <__gedf2+0x5c>
  80cd04:	2296b03a 	or	r11,r4,r10
  80cd08:	5813003a 	cmpeq	r9,r11,zero
  80cd0c:	1800091e 	bne	r3,zero,80cd34 <__gedf2+0x6c>
  80cd10:	3218b03a 	or	r12,r6,r8
  80cd14:	6000071e 	bne	r12,zero,80cd34 <__gedf2+0x6c>
  80cd18:	0005883a 	mov	r2,zero
  80cd1c:	5800101e 	bne	r11,zero,80cd60 <__gedf2+0x98>
  80cd20:	f800283a 	ret
  80cd24:	18000c1e 	bne	r3,zero,80cd58 <__gedf2+0x90>
  80cd28:	3212b03a 	or	r9,r6,r8
  80cd2c:	48000c26 	beq	r9,zero,80cd60 <__gedf2+0x98>
  80cd30:	0013883a 	mov	r9,zero
  80cd34:	39c03fcc 	andi	r7,r7,255
  80cd38:	48000826 	beq	r9,zero,80cd5c <__gedf2+0x94>
  80cd3c:	38000926 	beq	r7,zero,80cd64 <__gedf2+0x9c>
  80cd40:	00800044 	movi	r2,1
  80cd44:	f800283a 	ret
  80cd48:	3212b03a 	or	r9,r6,r8
  80cd4c:	483fec26 	beq	r9,zero,80cd00 <__alt_mem_epcs_flash_controller_0+0xff803d00>
  80cd50:	00bfff84 	movi	r2,-2
  80cd54:	f800283a 	ret
  80cd58:	39c03fcc 	andi	r7,r7,255
  80cd5c:	29c00626 	beq	r5,r7,80cd78 <__gedf2+0xb0>
  80cd60:	283ff726 	beq	r5,zero,80cd40 <__alt_mem_epcs_flash_controller_0+0xff803d40>
  80cd64:	00bfffc4 	movi	r2,-1
  80cd68:	f800283a 	ret
  80cd6c:	2292b03a 	or	r9,r4,r10
  80cd70:	483fe126 	beq	r9,zero,80ccf8 <__alt_mem_epcs_flash_controller_0+0xff803cf8>
  80cd74:	003ff606 	br	80cd50 <__alt_mem_epcs_flash_controller_0+0xff803d50>
  80cd78:	18bff916 	blt	r3,r2,80cd60 <__alt_mem_epcs_flash_controller_0+0xff803d60>
  80cd7c:	10c00316 	blt	r2,r3,80cd8c <__gedf2+0xc4>
  80cd80:	42bff736 	bltu	r8,r10,80cd60 <__alt_mem_epcs_flash_controller_0+0xff803d60>
  80cd84:	52000326 	beq	r10,r8,80cd94 <__gedf2+0xcc>
  80cd88:	5200042e 	bgeu	r10,r8,80cd9c <__gedf2+0xd4>
  80cd8c:	283fec1e 	bne	r5,zero,80cd40 <__alt_mem_epcs_flash_controller_0+0xff803d40>
  80cd90:	003ff406 	br	80cd64 <__alt_mem_epcs_flash_controller_0+0xff803d64>
  80cd94:	313ff236 	bltu	r6,r4,80cd60 <__alt_mem_epcs_flash_controller_0+0xff803d60>
  80cd98:	21bffc36 	bltu	r4,r6,80cd8c <__alt_mem_epcs_flash_controller_0+0xff803d8c>
  80cd9c:	0005883a 	mov	r2,zero
  80cda0:	f800283a 	ret

0080cda4 <__ledf2>:
  80cda4:	2804d53a 	srli	r2,r5,20
  80cda8:	3810d53a 	srli	r8,r7,20
  80cdac:	00c00434 	movhi	r3,16
  80cdb0:	18ffffc4 	addi	r3,r3,-1
  80cdb4:	1081ffcc 	andi	r2,r2,2047
  80cdb8:	0241ffc4 	movi	r9,2047
  80cdbc:	28d4703a 	and	r10,r5,r3
  80cdc0:	4201ffcc 	andi	r8,r8,2047
  80cdc4:	38c6703a 	and	r3,r7,r3
  80cdc8:	280ad7fa 	srli	r5,r5,31
  80cdcc:	380ed7fa 	srli	r7,r7,31
  80cdd0:	12401f26 	beq	r2,r9,80ce50 <__ledf2+0xac>
  80cdd4:	0241ffc4 	movi	r9,2047
  80cdd8:	42401426 	beq	r8,r9,80ce2c <__ledf2+0x88>
  80cddc:	1000091e 	bne	r2,zero,80ce04 <__ledf2+0x60>
  80cde0:	2296b03a 	or	r11,r4,r10
  80cde4:	5813003a 	cmpeq	r9,r11,zero
  80cde8:	29403fcc 	andi	r5,r5,255
  80cdec:	40000a1e 	bne	r8,zero,80ce18 <__ledf2+0x74>
  80cdf0:	30d8b03a 	or	r12,r6,r3
  80cdf4:	6000081e 	bne	r12,zero,80ce18 <__ledf2+0x74>
  80cdf8:	0005883a 	mov	r2,zero
  80cdfc:	5800111e 	bne	r11,zero,80ce44 <__ledf2+0xa0>
  80ce00:	f800283a 	ret
  80ce04:	29403fcc 	andi	r5,r5,255
  80ce08:	40000c1e 	bne	r8,zero,80ce3c <__ledf2+0x98>
  80ce0c:	30d2b03a 	or	r9,r6,r3
  80ce10:	48000c26 	beq	r9,zero,80ce44 <__ledf2+0xa0>
  80ce14:	0013883a 	mov	r9,zero
  80ce18:	39c03fcc 	andi	r7,r7,255
  80ce1c:	48000826 	beq	r9,zero,80ce40 <__ledf2+0x9c>
  80ce20:	38001126 	beq	r7,zero,80ce68 <__ledf2+0xc4>
  80ce24:	00800044 	movi	r2,1
  80ce28:	f800283a 	ret
  80ce2c:	30d2b03a 	or	r9,r6,r3
  80ce30:	483fea26 	beq	r9,zero,80cddc <__alt_mem_epcs_flash_controller_0+0xff803ddc>
  80ce34:	00800084 	movi	r2,2
  80ce38:	f800283a 	ret
  80ce3c:	39c03fcc 	andi	r7,r7,255
  80ce40:	39400726 	beq	r7,r5,80ce60 <__ledf2+0xbc>
  80ce44:	2800081e 	bne	r5,zero,80ce68 <__ledf2+0xc4>
  80ce48:	00800044 	movi	r2,1
  80ce4c:	f800283a 	ret
  80ce50:	2292b03a 	or	r9,r4,r10
  80ce54:	483fdf26 	beq	r9,zero,80cdd4 <__alt_mem_epcs_flash_controller_0+0xff803dd4>
  80ce58:	00800084 	movi	r2,2
  80ce5c:	f800283a 	ret
  80ce60:	4080030e 	bge	r8,r2,80ce70 <__ledf2+0xcc>
  80ce64:	383fef26 	beq	r7,zero,80ce24 <__alt_mem_epcs_flash_controller_0+0xff803e24>
  80ce68:	00bfffc4 	movi	r2,-1
  80ce6c:	f800283a 	ret
  80ce70:	123feb16 	blt	r2,r8,80ce20 <__alt_mem_epcs_flash_controller_0+0xff803e20>
  80ce74:	1abff336 	bltu	r3,r10,80ce44 <__alt_mem_epcs_flash_controller_0+0xff803e44>
  80ce78:	50c00326 	beq	r10,r3,80ce88 <__ledf2+0xe4>
  80ce7c:	50c0042e 	bgeu	r10,r3,80ce90 <__ledf2+0xec>
  80ce80:	283fe81e 	bne	r5,zero,80ce24 <__alt_mem_epcs_flash_controller_0+0xff803e24>
  80ce84:	003ff806 	br	80ce68 <__alt_mem_epcs_flash_controller_0+0xff803e68>
  80ce88:	313fee36 	bltu	r6,r4,80ce44 <__alt_mem_epcs_flash_controller_0+0xff803e44>
  80ce8c:	21bffc36 	bltu	r4,r6,80ce80 <__alt_mem_epcs_flash_controller_0+0xff803e80>
  80ce90:	0005883a 	mov	r2,zero
  80ce94:	f800283a 	ret

0080ce98 <__muldf3>:
  80ce98:	deffee04 	addi	sp,sp,-72
  80ce9c:	dd000c15 	stw	r20,48(sp)
  80cea0:	2828d53a 	srli	r20,r5,20
  80cea4:	ddc00f15 	stw	r23,60(sp)
  80cea8:	282ed7fa 	srli	r23,r5,31
  80ceac:	dc000815 	stw	r16,32(sp)
  80ceb0:	04000434 	movhi	r16,16
  80ceb4:	dcc00b15 	stw	r19,44(sp)
  80ceb8:	843fffc4 	addi	r16,r16,-1
  80cebc:	dfc01115 	stw	ra,68(sp)
  80cec0:	df001015 	stw	fp,64(sp)
  80cec4:	dd800e15 	stw	r22,56(sp)
  80cec8:	dd400d15 	stw	r21,52(sp)
  80cecc:	dc800a15 	stw	r18,40(sp)
  80ced0:	dc400915 	stw	r17,36(sp)
  80ced4:	a501ffcc 	andi	r20,r20,2047
  80ced8:	2c20703a 	and	r16,r5,r16
  80cedc:	b827883a 	mov	r19,r23
  80cee0:	ba403fcc 	andi	r9,r23,255
  80cee4:	a0006026 	beq	r20,zero,80d068 <__muldf3+0x1d0>
  80cee8:	0081ffc4 	movi	r2,2047
  80ceec:	202d883a 	mov	r22,r4
  80cef0:	a0803626 	beq	r20,r2,80cfcc <__muldf3+0x134>
  80cef4:	84000434 	orhi	r16,r16,16
  80cef8:	200ad77a 	srli	r5,r4,29
  80cefc:	800490fa 	slli	r2,r16,3
  80cf00:	202c90fa 	slli	r22,r4,3
  80cf04:	a53f0044 	addi	r20,r20,-1023
  80cf08:	28a0b03a 	or	r16,r5,r2
  80cf0c:	002b883a 	mov	r21,zero
  80cf10:	000b883a 	mov	r5,zero
  80cf14:	3804d53a 	srli	r2,r7,20
  80cf18:	3838d7fa 	srli	fp,r7,31
  80cf1c:	04400434 	movhi	r17,16
  80cf20:	8c7fffc4 	addi	r17,r17,-1
  80cf24:	1081ffcc 	andi	r2,r2,2047
  80cf28:	3025883a 	mov	r18,r6
  80cf2c:	3c62703a 	and	r17,r7,r17
  80cf30:	e2803fcc 	andi	r10,fp,255
  80cf34:	10006d26 	beq	r2,zero,80d0ec <__muldf3+0x254>
  80cf38:	00c1ffc4 	movi	r3,2047
  80cf3c:	10c06526 	beq	r2,r3,80d0d4 <__muldf3+0x23c>
  80cf40:	8c400434 	orhi	r17,r17,16
  80cf44:	300ed77a 	srli	r7,r6,29
  80cf48:	880690fa 	slli	r3,r17,3
  80cf4c:	302490fa 	slli	r18,r6,3
  80cf50:	10bf0044 	addi	r2,r2,-1023
  80cf54:	38e2b03a 	or	r17,r7,r3
  80cf58:	000f883a 	mov	r7,zero
  80cf5c:	a087883a 	add	r3,r20,r2
  80cf60:	010003c4 	movi	r4,15
  80cf64:	3d44b03a 	or	r2,r7,r21
  80cf68:	e5ccf03a 	xor	r6,fp,r23
  80cf6c:	1a000044 	addi	r8,r3,1
  80cf70:	20809b36 	bltu	r4,r2,80d1e0 <__muldf3+0x348>
  80cf74:	100490ba 	slli	r2,r2,2
  80cf78:	01002074 	movhi	r4,129
  80cf7c:	2133e304 	addi	r4,r4,-12404
  80cf80:	1105883a 	add	r2,r2,r4
  80cf84:	10800017 	ldw	r2,0(r2)
  80cf88:	1000683a 	jmp	r2
  80cf8c:	0080d1e0 	cmpeqi	r2,zero,839
  80cf90:	0080cfec 	andhi	r2,zero,831
  80cf94:	0080cfec 	andhi	r2,zero,831
  80cf98:	0080cfe8 	cmpgeui	r2,zero,831
  80cf9c:	0080d1bc 	xorhi	r2,zero,838
  80cfa0:	0080d1bc 	xorhi	r2,zero,838
  80cfa4:	0080d1a4 	muli	r2,zero,838
  80cfa8:	0080cfe8 	cmpgeui	r2,zero,831
  80cfac:	0080d1bc 	xorhi	r2,zero,838
  80cfb0:	0080d1a4 	muli	r2,zero,838
  80cfb4:	0080d1bc 	xorhi	r2,zero,838
  80cfb8:	0080cfe8 	cmpgeui	r2,zero,831
  80cfbc:	0080d1cc 	andi	r2,zero,839
  80cfc0:	0080d1cc 	andi	r2,zero,839
  80cfc4:	0080d1cc 	andi	r2,zero,839
  80cfc8:	0080d52c 	andhi	r2,zero,852
  80cfcc:	2404b03a 	or	r2,r4,r16
  80cfd0:	1000711e 	bne	r2,zero,80d198 <__muldf3+0x300>
  80cfd4:	05400204 	movi	r21,8
  80cfd8:	0021883a 	mov	r16,zero
  80cfdc:	002d883a 	mov	r22,zero
  80cfe0:	01400084 	movi	r5,2
  80cfe4:	003fcb06 	br	80cf14 <__alt_mem_epcs_flash_controller_0+0xff803f14>
  80cfe8:	500d883a 	mov	r6,r10
  80cfec:	00800084 	movi	r2,2
  80cff0:	38805926 	beq	r7,r2,80d158 <__muldf3+0x2c0>
  80cff4:	008000c4 	movi	r2,3
  80cff8:	3881bb26 	beq	r7,r2,80d6e8 <__muldf3+0x850>
  80cffc:	00800044 	movi	r2,1
  80d000:	3881961e 	bne	r7,r2,80d65c <__muldf3+0x7c4>
  80d004:	3027883a 	mov	r19,r6
  80d008:	0005883a 	mov	r2,zero
  80d00c:	0021883a 	mov	r16,zero
  80d010:	002d883a 	mov	r22,zero
  80d014:	1004953a 	slli	r2,r2,20
  80d018:	98c03fcc 	andi	r3,r19,255
  80d01c:	04400434 	movhi	r17,16
  80d020:	8c7fffc4 	addi	r17,r17,-1
  80d024:	180697fa 	slli	r3,r3,31
  80d028:	8460703a 	and	r16,r16,r17
  80d02c:	80a0b03a 	or	r16,r16,r2
  80d030:	80c6b03a 	or	r3,r16,r3
  80d034:	b005883a 	mov	r2,r22
  80d038:	dfc01117 	ldw	ra,68(sp)
  80d03c:	df001017 	ldw	fp,64(sp)
  80d040:	ddc00f17 	ldw	r23,60(sp)
  80d044:	dd800e17 	ldw	r22,56(sp)
  80d048:	dd400d17 	ldw	r21,52(sp)
  80d04c:	dd000c17 	ldw	r20,48(sp)
  80d050:	dcc00b17 	ldw	r19,44(sp)
  80d054:	dc800a17 	ldw	r18,40(sp)
  80d058:	dc400917 	ldw	r17,36(sp)
  80d05c:	dc000817 	ldw	r16,32(sp)
  80d060:	dec01204 	addi	sp,sp,72
  80d064:	f800283a 	ret
  80d068:	2404b03a 	or	r2,r4,r16
  80d06c:	202b883a 	mov	r21,r4
  80d070:	10004426 	beq	r2,zero,80d184 <__muldf3+0x2ec>
  80d074:	80015126 	beq	r16,zero,80d5bc <__muldf3+0x724>
  80d078:	8009883a 	mov	r4,r16
  80d07c:	d9800715 	stw	r6,28(sp)
  80d080:	d9c00215 	stw	r7,8(sp)
  80d084:	da400415 	stw	r9,16(sp)
  80d088:	080e2040 	call	80e204 <__clzsi2>
  80d08c:	d9800717 	ldw	r6,28(sp)
  80d090:	d9c00217 	ldw	r7,8(sp)
  80d094:	da400417 	ldw	r9,16(sp)
  80d098:	113ffd44 	addi	r4,r2,-11
  80d09c:	00c00704 	movi	r3,28
  80d0a0:	19014216 	blt	r3,r4,80d5ac <__muldf3+0x714>
  80d0a4:	00c00744 	movi	r3,29
  80d0a8:	15bffe04 	addi	r22,r2,-8
  80d0ac:	1907c83a 	sub	r3,r3,r4
  80d0b0:	85a0983a 	sll	r16,r16,r22
  80d0b4:	a8c6d83a 	srl	r3,r21,r3
  80d0b8:	adac983a 	sll	r22,r21,r22
  80d0bc:	1c20b03a 	or	r16,r3,r16
  80d0c0:	1080fcc4 	addi	r2,r2,1011
  80d0c4:	00a9c83a 	sub	r20,zero,r2
  80d0c8:	002b883a 	mov	r21,zero
  80d0cc:	000b883a 	mov	r5,zero
  80d0d0:	003f9006 	br	80cf14 <__alt_mem_epcs_flash_controller_0+0xff803f14>
  80d0d4:	3446b03a 	or	r3,r6,r17
  80d0d8:	1800281e 	bne	r3,zero,80d17c <__muldf3+0x2e4>
  80d0dc:	0023883a 	mov	r17,zero
  80d0e0:	0025883a 	mov	r18,zero
  80d0e4:	01c00084 	movi	r7,2
  80d0e8:	003f9c06 	br	80cf5c <__alt_mem_epcs_flash_controller_0+0xff803f5c>
  80d0ec:	3446b03a 	or	r3,r6,r17
  80d0f0:	18001e26 	beq	r3,zero,80d16c <__muldf3+0x2d4>
  80d0f4:	88012126 	beq	r17,zero,80d57c <__muldf3+0x6e4>
  80d0f8:	8809883a 	mov	r4,r17
  80d0fc:	d9400215 	stw	r5,8(sp)
  80d100:	d9800715 	stw	r6,28(sp)
  80d104:	da400415 	stw	r9,16(sp)
  80d108:	da800315 	stw	r10,12(sp)
  80d10c:	080e2040 	call	80e204 <__clzsi2>
  80d110:	d9400217 	ldw	r5,8(sp)
  80d114:	d9800717 	ldw	r6,28(sp)
  80d118:	da400417 	ldw	r9,16(sp)
  80d11c:	da800317 	ldw	r10,12(sp)
  80d120:	113ffd44 	addi	r4,r2,-11
  80d124:	00c00704 	movi	r3,28
  80d128:	19011016 	blt	r3,r4,80d56c <__muldf3+0x6d4>
  80d12c:	00c00744 	movi	r3,29
  80d130:	14bffe04 	addi	r18,r2,-8
  80d134:	1907c83a 	sub	r3,r3,r4
  80d138:	8ca2983a 	sll	r17,r17,r18
  80d13c:	30c6d83a 	srl	r3,r6,r3
  80d140:	34a4983a 	sll	r18,r6,r18
  80d144:	1c62b03a 	or	r17,r3,r17
  80d148:	1080fcc4 	addi	r2,r2,1011
  80d14c:	0085c83a 	sub	r2,zero,r2
  80d150:	000f883a 	mov	r7,zero
  80d154:	003f8106 	br	80cf5c <__alt_mem_epcs_flash_controller_0+0xff803f5c>
  80d158:	3027883a 	mov	r19,r6
  80d15c:	0081ffc4 	movi	r2,2047
  80d160:	0021883a 	mov	r16,zero
  80d164:	002d883a 	mov	r22,zero
  80d168:	003faa06 	br	80d014 <__alt_mem_epcs_flash_controller_0+0xff804014>
  80d16c:	0023883a 	mov	r17,zero
  80d170:	0025883a 	mov	r18,zero
  80d174:	01c00044 	movi	r7,1
  80d178:	003f7806 	br	80cf5c <__alt_mem_epcs_flash_controller_0+0xff803f5c>
  80d17c:	01c000c4 	movi	r7,3
  80d180:	003f7606 	br	80cf5c <__alt_mem_epcs_flash_controller_0+0xff803f5c>
  80d184:	05400104 	movi	r21,4
  80d188:	0021883a 	mov	r16,zero
  80d18c:	002d883a 	mov	r22,zero
  80d190:	01400044 	movi	r5,1
  80d194:	003f5f06 	br	80cf14 <__alt_mem_epcs_flash_controller_0+0xff803f14>
  80d198:	05400304 	movi	r21,12
  80d19c:	014000c4 	movi	r5,3
  80d1a0:	003f5c06 	br	80cf14 <__alt_mem_epcs_flash_controller_0+0xff803f14>
  80d1a4:	04000434 	movhi	r16,16
  80d1a8:	0027883a 	mov	r19,zero
  80d1ac:	843fffc4 	addi	r16,r16,-1
  80d1b0:	05bfffc4 	movi	r22,-1
  80d1b4:	0081ffc4 	movi	r2,2047
  80d1b8:	003f9606 	br	80d014 <__alt_mem_epcs_flash_controller_0+0xff804014>
  80d1bc:	8023883a 	mov	r17,r16
  80d1c0:	b025883a 	mov	r18,r22
  80d1c4:	280f883a 	mov	r7,r5
  80d1c8:	003f8806 	br	80cfec <__alt_mem_epcs_flash_controller_0+0xff803fec>
  80d1cc:	8023883a 	mov	r17,r16
  80d1d0:	b025883a 	mov	r18,r22
  80d1d4:	480d883a 	mov	r6,r9
  80d1d8:	280f883a 	mov	r7,r5
  80d1dc:	003f8306 	br	80cfec <__alt_mem_epcs_flash_controller_0+0xff803fec>
  80d1e0:	b026d43a 	srli	r19,r22,16
  80d1e4:	902ed43a 	srli	r23,r18,16
  80d1e8:	b5bfffcc 	andi	r22,r22,65535
  80d1ec:	94bfffcc 	andi	r18,r18,65535
  80d1f0:	b00b883a 	mov	r5,r22
  80d1f4:	9009883a 	mov	r4,r18
  80d1f8:	d8c00515 	stw	r3,20(sp)
  80d1fc:	d9800715 	stw	r6,28(sp)
  80d200:	da000615 	stw	r8,24(sp)
  80d204:	080b99c0 	call	80b99c <__mulsi3>
  80d208:	980b883a 	mov	r5,r19
  80d20c:	9009883a 	mov	r4,r18
  80d210:	1029883a 	mov	r20,r2
  80d214:	080b99c0 	call	80b99c <__mulsi3>
  80d218:	b80b883a 	mov	r5,r23
  80d21c:	9809883a 	mov	r4,r19
  80d220:	102b883a 	mov	r21,r2
  80d224:	080b99c0 	call	80b99c <__mulsi3>
  80d228:	b809883a 	mov	r4,r23
  80d22c:	b00b883a 	mov	r5,r22
  80d230:	1039883a 	mov	fp,r2
  80d234:	080b99c0 	call	80b99c <__mulsi3>
  80d238:	a008d43a 	srli	r4,r20,16
  80d23c:	1545883a 	add	r2,r2,r21
  80d240:	d8c00517 	ldw	r3,20(sp)
  80d244:	2085883a 	add	r2,r4,r2
  80d248:	d9800717 	ldw	r6,28(sp)
  80d24c:	da000617 	ldw	r8,24(sp)
  80d250:	1540022e 	bgeu	r2,r21,80d25c <__muldf3+0x3c4>
  80d254:	01000074 	movhi	r4,1
  80d258:	e139883a 	add	fp,fp,r4
  80d25c:	100e943a 	slli	r7,r2,16
  80d260:	1004d43a 	srli	r2,r2,16
  80d264:	882ad43a 	srli	r21,r17,16
  80d268:	a53fffcc 	andi	r20,r20,65535
  80d26c:	8c7fffcc 	andi	r17,r17,65535
  80d270:	3d29883a 	add	r20,r7,r20
  80d274:	b00b883a 	mov	r5,r22
  80d278:	8809883a 	mov	r4,r17
  80d27c:	d8c00515 	stw	r3,20(sp)
  80d280:	d9800715 	stw	r6,28(sp)
  80d284:	da000615 	stw	r8,24(sp)
  80d288:	dd000115 	stw	r20,4(sp)
  80d28c:	d8800015 	stw	r2,0(sp)
  80d290:	080b99c0 	call	80b99c <__mulsi3>
  80d294:	980b883a 	mov	r5,r19
  80d298:	8809883a 	mov	r4,r17
  80d29c:	d8800215 	stw	r2,8(sp)
  80d2a0:	080b99c0 	call	80b99c <__mulsi3>
  80d2a4:	9809883a 	mov	r4,r19
  80d2a8:	a80b883a 	mov	r5,r21
  80d2ac:	1029883a 	mov	r20,r2
  80d2b0:	080b99c0 	call	80b99c <__mulsi3>
  80d2b4:	b00b883a 	mov	r5,r22
  80d2b8:	a809883a 	mov	r4,r21
  80d2bc:	d8800415 	stw	r2,16(sp)
  80d2c0:	080b99c0 	call	80b99c <__mulsi3>
  80d2c4:	d9c00217 	ldw	r7,8(sp)
  80d2c8:	1505883a 	add	r2,r2,r20
  80d2cc:	d8c00517 	ldw	r3,20(sp)
  80d2d0:	3826d43a 	srli	r19,r7,16
  80d2d4:	d9800717 	ldw	r6,28(sp)
  80d2d8:	da000617 	ldw	r8,24(sp)
  80d2dc:	9885883a 	add	r2,r19,r2
  80d2e0:	da400417 	ldw	r9,16(sp)
  80d2e4:	1500022e 	bgeu	r2,r20,80d2f0 <__muldf3+0x458>
  80d2e8:	01000074 	movhi	r4,1
  80d2ec:	4913883a 	add	r9,r9,r4
  80d2f0:	1028d43a 	srli	r20,r2,16
  80d2f4:	1004943a 	slli	r2,r2,16
  80d2f8:	802cd43a 	srli	r22,r16,16
  80d2fc:	843fffcc 	andi	r16,r16,65535
  80d300:	3cffffcc 	andi	r19,r7,65535
  80d304:	9009883a 	mov	r4,r18
  80d308:	800b883a 	mov	r5,r16
  80d30c:	a269883a 	add	r20,r20,r9
  80d310:	d8c00515 	stw	r3,20(sp)
  80d314:	d9800715 	stw	r6,28(sp)
  80d318:	da000615 	stw	r8,24(sp)
  80d31c:	14e7883a 	add	r19,r2,r19
  80d320:	080b99c0 	call	80b99c <__mulsi3>
  80d324:	9009883a 	mov	r4,r18
  80d328:	b00b883a 	mov	r5,r22
  80d32c:	d8800315 	stw	r2,12(sp)
  80d330:	080b99c0 	call	80b99c <__mulsi3>
  80d334:	b809883a 	mov	r4,r23
  80d338:	b00b883a 	mov	r5,r22
  80d33c:	d8800215 	stw	r2,8(sp)
  80d340:	080b99c0 	call	80b99c <__mulsi3>
  80d344:	b80b883a 	mov	r5,r23
  80d348:	8009883a 	mov	r4,r16
  80d34c:	d8800415 	stw	r2,16(sp)
  80d350:	080b99c0 	call	80b99c <__mulsi3>
  80d354:	da800317 	ldw	r10,12(sp)
  80d358:	d9c00217 	ldw	r7,8(sp)
  80d35c:	d9000017 	ldw	r4,0(sp)
  80d360:	502ed43a 	srli	r23,r10,16
  80d364:	11c5883a 	add	r2,r2,r7
  80d368:	24e5883a 	add	r18,r4,r19
  80d36c:	b885883a 	add	r2,r23,r2
  80d370:	d8c00517 	ldw	r3,20(sp)
  80d374:	d9800717 	ldw	r6,28(sp)
  80d378:	da000617 	ldw	r8,24(sp)
  80d37c:	da400417 	ldw	r9,16(sp)
  80d380:	11c0022e 	bgeu	r2,r7,80d38c <__muldf3+0x4f4>
  80d384:	01000074 	movhi	r4,1
  80d388:	4913883a 	add	r9,r9,r4
  80d38c:	100ed43a 	srli	r7,r2,16
  80d390:	1004943a 	slli	r2,r2,16
  80d394:	55ffffcc 	andi	r23,r10,65535
  80d398:	3a53883a 	add	r9,r7,r9
  80d39c:	8809883a 	mov	r4,r17
  80d3a0:	800b883a 	mov	r5,r16
  80d3a4:	d8c00515 	stw	r3,20(sp)
  80d3a8:	d9800715 	stw	r6,28(sp)
  80d3ac:	da000615 	stw	r8,24(sp)
  80d3b0:	da400415 	stw	r9,16(sp)
  80d3b4:	15ef883a 	add	r23,r2,r23
  80d3b8:	080b99c0 	call	80b99c <__mulsi3>
  80d3bc:	8809883a 	mov	r4,r17
  80d3c0:	b00b883a 	mov	r5,r22
  80d3c4:	d8800215 	stw	r2,8(sp)
  80d3c8:	080b99c0 	call	80b99c <__mulsi3>
  80d3cc:	b00b883a 	mov	r5,r22
  80d3d0:	a809883a 	mov	r4,r21
  80d3d4:	d8800315 	stw	r2,12(sp)
  80d3d8:	080b99c0 	call	80b99c <__mulsi3>
  80d3dc:	8009883a 	mov	r4,r16
  80d3e0:	a80b883a 	mov	r5,r21
  80d3e4:	1023883a 	mov	r17,r2
  80d3e8:	080b99c0 	call	80b99c <__mulsi3>
  80d3ec:	d9c00217 	ldw	r7,8(sp)
  80d3f0:	da800317 	ldw	r10,12(sp)
  80d3f4:	d8c00517 	ldw	r3,20(sp)
  80d3f8:	3808d43a 	srli	r4,r7,16
  80d3fc:	1285883a 	add	r2,r2,r10
  80d400:	d9800717 	ldw	r6,28(sp)
  80d404:	2085883a 	add	r2,r4,r2
  80d408:	da000617 	ldw	r8,24(sp)
  80d40c:	da400417 	ldw	r9,16(sp)
  80d410:	1280022e 	bgeu	r2,r10,80d41c <__muldf3+0x584>
  80d414:	01000074 	movhi	r4,1
  80d418:	8923883a 	add	r17,r17,r4
  80d41c:	1008943a 	slli	r4,r2,16
  80d420:	39ffffcc 	andi	r7,r7,65535
  80d424:	e4b9883a 	add	fp,fp,r18
  80d428:	21cf883a 	add	r7,r4,r7
  80d42c:	e4e7803a 	cmpltu	r19,fp,r19
  80d430:	3d0f883a 	add	r7,r7,r20
  80d434:	bf39883a 	add	fp,r23,fp
  80d438:	99c9883a 	add	r4,r19,r7
  80d43c:	e5ef803a 	cmpltu	r23,fp,r23
  80d440:	490b883a 	add	r5,r9,r4
  80d444:	1004d43a 	srli	r2,r2,16
  80d448:	b965883a 	add	r18,r23,r5
  80d44c:	24c9803a 	cmpltu	r4,r4,r19
  80d450:	3d29803a 	cmpltu	r20,r7,r20
  80d454:	a128b03a 	or	r20,r20,r4
  80d458:	95ef803a 	cmpltu	r23,r18,r23
  80d45c:	2a53803a 	cmpltu	r9,r5,r9
  80d460:	a0a9883a 	add	r20,r20,r2
  80d464:	4deeb03a 	or	r23,r9,r23
  80d468:	a5ef883a 	add	r23,r20,r23
  80d46c:	bc63883a 	add	r17,r23,r17
  80d470:	e004927a 	slli	r2,fp,9
  80d474:	d9000117 	ldw	r4,4(sp)
  80d478:	882e927a 	slli	r23,r17,9
  80d47c:	9022d5fa 	srli	r17,r18,23
  80d480:	e038d5fa 	srli	fp,fp,23
  80d484:	1104b03a 	or	r2,r2,r4
  80d488:	9024927a 	slli	r18,r18,9
  80d48c:	1004c03a 	cmpne	r2,r2,zero
  80d490:	bc62b03a 	or	r17,r23,r17
  80d494:	1738b03a 	or	fp,r2,fp
  80d498:	8880402c 	andhi	r2,r17,256
  80d49c:	e4a4b03a 	or	r18,fp,r18
  80d4a0:	10000726 	beq	r2,zero,80d4c0 <__muldf3+0x628>
  80d4a4:	9006d07a 	srli	r3,r18,1
  80d4a8:	880497fa 	slli	r2,r17,31
  80d4ac:	9480004c 	andi	r18,r18,1
  80d4b0:	8822d07a 	srli	r17,r17,1
  80d4b4:	1ca4b03a 	or	r18,r3,r18
  80d4b8:	14a4b03a 	or	r18,r2,r18
  80d4bc:	4007883a 	mov	r3,r8
  80d4c0:	1880ffc4 	addi	r2,r3,1023
  80d4c4:	0080460e 	bge	zero,r2,80d5e0 <__muldf3+0x748>
  80d4c8:	910001cc 	andi	r4,r18,7
  80d4cc:	20000726 	beq	r4,zero,80d4ec <__muldf3+0x654>
  80d4d0:	910003cc 	andi	r4,r18,15
  80d4d4:	01400104 	movi	r5,4
  80d4d8:	21400426 	beq	r4,r5,80d4ec <__muldf3+0x654>
  80d4dc:	9149883a 	add	r4,r18,r5
  80d4e0:	24a5803a 	cmpltu	r18,r4,r18
  80d4e4:	8ca3883a 	add	r17,r17,r18
  80d4e8:	2025883a 	mov	r18,r4
  80d4ec:	8900402c 	andhi	r4,r17,256
  80d4f0:	20000426 	beq	r4,zero,80d504 <__muldf3+0x66c>
  80d4f4:	18810004 	addi	r2,r3,1024
  80d4f8:	00ffc034 	movhi	r3,65280
  80d4fc:	18ffffc4 	addi	r3,r3,-1
  80d500:	88e2703a 	and	r17,r17,r3
  80d504:	00c1ff84 	movi	r3,2046
  80d508:	18bf1316 	blt	r3,r2,80d158 <__alt_mem_epcs_flash_controller_0+0xff804158>
  80d50c:	882c977a 	slli	r22,r17,29
  80d510:	9024d0fa 	srli	r18,r18,3
  80d514:	8822927a 	slli	r17,r17,9
  80d518:	1081ffcc 	andi	r2,r2,2047
  80d51c:	b4acb03a 	or	r22,r22,r18
  80d520:	8820d33a 	srli	r16,r17,12
  80d524:	3027883a 	mov	r19,r6
  80d528:	003eba06 	br	80d014 <__alt_mem_epcs_flash_controller_0+0xff804014>
  80d52c:	8080022c 	andhi	r2,r16,8
  80d530:	10000926 	beq	r2,zero,80d558 <__muldf3+0x6c0>
  80d534:	8880022c 	andhi	r2,r17,8
  80d538:	1000071e 	bne	r2,zero,80d558 <__muldf3+0x6c0>
  80d53c:	00800434 	movhi	r2,16
  80d540:	8c000234 	orhi	r16,r17,8
  80d544:	10bfffc4 	addi	r2,r2,-1
  80d548:	e027883a 	mov	r19,fp
  80d54c:	80a0703a 	and	r16,r16,r2
  80d550:	902d883a 	mov	r22,r18
  80d554:	003f1706 	br	80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>
  80d558:	00800434 	movhi	r2,16
  80d55c:	84000234 	orhi	r16,r16,8
  80d560:	10bfffc4 	addi	r2,r2,-1
  80d564:	80a0703a 	and	r16,r16,r2
  80d568:	003f1206 	br	80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>
  80d56c:	147ff604 	addi	r17,r2,-40
  80d570:	3462983a 	sll	r17,r6,r17
  80d574:	0025883a 	mov	r18,zero
  80d578:	003ef306 	br	80d148 <__alt_mem_epcs_flash_controller_0+0xff804148>
  80d57c:	3009883a 	mov	r4,r6
  80d580:	d9400215 	stw	r5,8(sp)
  80d584:	d9800715 	stw	r6,28(sp)
  80d588:	da400415 	stw	r9,16(sp)
  80d58c:	da800315 	stw	r10,12(sp)
  80d590:	080e2040 	call	80e204 <__clzsi2>
  80d594:	10800804 	addi	r2,r2,32
  80d598:	da800317 	ldw	r10,12(sp)
  80d59c:	da400417 	ldw	r9,16(sp)
  80d5a0:	d9800717 	ldw	r6,28(sp)
  80d5a4:	d9400217 	ldw	r5,8(sp)
  80d5a8:	003edd06 	br	80d120 <__alt_mem_epcs_flash_controller_0+0xff804120>
  80d5ac:	143ff604 	addi	r16,r2,-40
  80d5b0:	ac20983a 	sll	r16,r21,r16
  80d5b4:	002d883a 	mov	r22,zero
  80d5b8:	003ec106 	br	80d0c0 <__alt_mem_epcs_flash_controller_0+0xff8040c0>
  80d5bc:	d9800715 	stw	r6,28(sp)
  80d5c0:	d9c00215 	stw	r7,8(sp)
  80d5c4:	da400415 	stw	r9,16(sp)
  80d5c8:	080e2040 	call	80e204 <__clzsi2>
  80d5cc:	10800804 	addi	r2,r2,32
  80d5d0:	da400417 	ldw	r9,16(sp)
  80d5d4:	d9c00217 	ldw	r7,8(sp)
  80d5d8:	d9800717 	ldw	r6,28(sp)
  80d5dc:	003eae06 	br	80d098 <__alt_mem_epcs_flash_controller_0+0xff804098>
  80d5e0:	00c00044 	movi	r3,1
  80d5e4:	1887c83a 	sub	r3,r3,r2
  80d5e8:	01000e04 	movi	r4,56
  80d5ec:	20fe8516 	blt	r4,r3,80d004 <__alt_mem_epcs_flash_controller_0+0xff804004>
  80d5f0:	010007c4 	movi	r4,31
  80d5f4:	20c01b16 	blt	r4,r3,80d664 <__muldf3+0x7cc>
  80d5f8:	00800804 	movi	r2,32
  80d5fc:	10c5c83a 	sub	r2,r2,r3
  80d600:	888a983a 	sll	r5,r17,r2
  80d604:	90c8d83a 	srl	r4,r18,r3
  80d608:	9084983a 	sll	r2,r18,r2
  80d60c:	88e2d83a 	srl	r17,r17,r3
  80d610:	2906b03a 	or	r3,r5,r4
  80d614:	1004c03a 	cmpne	r2,r2,zero
  80d618:	1886b03a 	or	r3,r3,r2
  80d61c:	188001cc 	andi	r2,r3,7
  80d620:	10000726 	beq	r2,zero,80d640 <__muldf3+0x7a8>
  80d624:	188003cc 	andi	r2,r3,15
  80d628:	01000104 	movi	r4,4
  80d62c:	11000426 	beq	r2,r4,80d640 <__muldf3+0x7a8>
  80d630:	1805883a 	mov	r2,r3
  80d634:	10c00104 	addi	r3,r2,4
  80d638:	1885803a 	cmpltu	r2,r3,r2
  80d63c:	88a3883a 	add	r17,r17,r2
  80d640:	8880202c 	andhi	r2,r17,128
  80d644:	10001c26 	beq	r2,zero,80d6b8 <__muldf3+0x820>
  80d648:	3027883a 	mov	r19,r6
  80d64c:	00800044 	movi	r2,1
  80d650:	0021883a 	mov	r16,zero
  80d654:	002d883a 	mov	r22,zero
  80d658:	003e6e06 	br	80d014 <__alt_mem_epcs_flash_controller_0+0xff804014>
  80d65c:	4007883a 	mov	r3,r8
  80d660:	003f9706 	br	80d4c0 <__alt_mem_epcs_flash_controller_0+0xff8044c0>
  80d664:	017ff844 	movi	r5,-31
  80d668:	2885c83a 	sub	r2,r5,r2
  80d66c:	888ad83a 	srl	r5,r17,r2
  80d670:	00800804 	movi	r2,32
  80d674:	18801a26 	beq	r3,r2,80d6e0 <__muldf3+0x848>
  80d678:	01001004 	movi	r4,64
  80d67c:	20c7c83a 	sub	r3,r4,r3
  80d680:	88e2983a 	sll	r17,r17,r3
  80d684:	8ca4b03a 	or	r18,r17,r18
  80d688:	9004c03a 	cmpne	r2,r18,zero
  80d68c:	2884b03a 	or	r2,r5,r2
  80d690:	144001cc 	andi	r17,r2,7
  80d694:	88000d1e 	bne	r17,zero,80d6cc <__muldf3+0x834>
  80d698:	0021883a 	mov	r16,zero
  80d69c:	102cd0fa 	srli	r22,r2,3
  80d6a0:	3027883a 	mov	r19,r6
  80d6a4:	0005883a 	mov	r2,zero
  80d6a8:	b46cb03a 	or	r22,r22,r17
  80d6ac:	003e5906 	br	80d014 <__alt_mem_epcs_flash_controller_0+0xff804014>
  80d6b0:	1007883a 	mov	r3,r2
  80d6b4:	0023883a 	mov	r17,zero
  80d6b8:	8820927a 	slli	r16,r17,9
  80d6bc:	1805883a 	mov	r2,r3
  80d6c0:	8822977a 	slli	r17,r17,29
  80d6c4:	8020d33a 	srli	r16,r16,12
  80d6c8:	003ff406 	br	80d69c <__alt_mem_epcs_flash_controller_0+0xff80469c>
  80d6cc:	10c003cc 	andi	r3,r2,15
  80d6d0:	01000104 	movi	r4,4
  80d6d4:	193ff626 	beq	r3,r4,80d6b0 <__alt_mem_epcs_flash_controller_0+0xff8046b0>
  80d6d8:	0023883a 	mov	r17,zero
  80d6dc:	003fd506 	br	80d634 <__alt_mem_epcs_flash_controller_0+0xff804634>
  80d6e0:	0023883a 	mov	r17,zero
  80d6e4:	003fe706 	br	80d684 <__alt_mem_epcs_flash_controller_0+0xff804684>
  80d6e8:	00800434 	movhi	r2,16
  80d6ec:	8c000234 	orhi	r16,r17,8
  80d6f0:	10bfffc4 	addi	r2,r2,-1
  80d6f4:	3027883a 	mov	r19,r6
  80d6f8:	80a0703a 	and	r16,r16,r2
  80d6fc:	902d883a 	mov	r22,r18
  80d700:	003eac06 	br	80d1b4 <__alt_mem_epcs_flash_controller_0+0xff8041b4>

0080d704 <__subdf3>:
  80d704:	02000434 	movhi	r8,16
  80d708:	423fffc4 	addi	r8,r8,-1
  80d70c:	defffb04 	addi	sp,sp,-20
  80d710:	2a14703a 	and	r10,r5,r8
  80d714:	3812d53a 	srli	r9,r7,20
  80d718:	3a10703a 	and	r8,r7,r8
  80d71c:	2006d77a 	srli	r3,r4,29
  80d720:	3004d77a 	srli	r2,r6,29
  80d724:	dc000015 	stw	r16,0(sp)
  80d728:	501490fa 	slli	r10,r10,3
  80d72c:	2820d53a 	srli	r16,r5,20
  80d730:	401090fa 	slli	r8,r8,3
  80d734:	dc800215 	stw	r18,8(sp)
  80d738:	dc400115 	stw	r17,4(sp)
  80d73c:	dfc00415 	stw	ra,16(sp)
  80d740:	202290fa 	slli	r17,r4,3
  80d744:	dcc00315 	stw	r19,12(sp)
  80d748:	4a41ffcc 	andi	r9,r9,2047
  80d74c:	0101ffc4 	movi	r4,2047
  80d750:	2824d7fa 	srli	r18,r5,31
  80d754:	8401ffcc 	andi	r16,r16,2047
  80d758:	50c6b03a 	or	r3,r10,r3
  80d75c:	380ed7fa 	srli	r7,r7,31
  80d760:	408ab03a 	or	r5,r8,r2
  80d764:	300c90fa 	slli	r6,r6,3
  80d768:	49009626 	beq	r9,r4,80d9c4 <__subdf3+0x2c0>
  80d76c:	39c0005c 	xori	r7,r7,1
  80d770:	8245c83a 	sub	r2,r16,r9
  80d774:	3c807426 	beq	r7,r18,80d948 <__subdf3+0x244>
  80d778:	0080af0e 	bge	zero,r2,80da38 <__subdf3+0x334>
  80d77c:	48002a1e 	bne	r9,zero,80d828 <__subdf3+0x124>
  80d780:	2988b03a 	or	r4,r5,r6
  80d784:	20009a1e 	bne	r4,zero,80d9f0 <__subdf3+0x2ec>
  80d788:	888001cc 	andi	r2,r17,7
  80d78c:	10000726 	beq	r2,zero,80d7ac <__subdf3+0xa8>
  80d790:	888003cc 	andi	r2,r17,15
  80d794:	01000104 	movi	r4,4
  80d798:	11000426 	beq	r2,r4,80d7ac <__subdf3+0xa8>
  80d79c:	890b883a 	add	r5,r17,r4
  80d7a0:	2c63803a 	cmpltu	r17,r5,r17
  80d7a4:	1c47883a 	add	r3,r3,r17
  80d7a8:	2823883a 	mov	r17,r5
  80d7ac:	1880202c 	andhi	r2,r3,128
  80d7b0:	10005926 	beq	r2,zero,80d918 <__subdf3+0x214>
  80d7b4:	84000044 	addi	r16,r16,1
  80d7b8:	0081ffc4 	movi	r2,2047
  80d7bc:	8080be26 	beq	r16,r2,80dab8 <__subdf3+0x3b4>
  80d7c0:	017fe034 	movhi	r5,65408
  80d7c4:	297fffc4 	addi	r5,r5,-1
  80d7c8:	1946703a 	and	r3,r3,r5
  80d7cc:	1804977a 	slli	r2,r3,29
  80d7d0:	1806927a 	slli	r3,r3,9
  80d7d4:	8822d0fa 	srli	r17,r17,3
  80d7d8:	8401ffcc 	andi	r16,r16,2047
  80d7dc:	180ad33a 	srli	r5,r3,12
  80d7e0:	9100004c 	andi	r4,r18,1
  80d7e4:	1444b03a 	or	r2,r2,r17
  80d7e8:	80c1ffcc 	andi	r3,r16,2047
  80d7ec:	1820953a 	slli	r16,r3,20
  80d7f0:	20c03fcc 	andi	r3,r4,255
  80d7f4:	180897fa 	slli	r4,r3,31
  80d7f8:	00c00434 	movhi	r3,16
  80d7fc:	18ffffc4 	addi	r3,r3,-1
  80d800:	28c6703a 	and	r3,r5,r3
  80d804:	1c06b03a 	or	r3,r3,r16
  80d808:	1906b03a 	or	r3,r3,r4
  80d80c:	dfc00417 	ldw	ra,16(sp)
  80d810:	dcc00317 	ldw	r19,12(sp)
  80d814:	dc800217 	ldw	r18,8(sp)
  80d818:	dc400117 	ldw	r17,4(sp)
  80d81c:	dc000017 	ldw	r16,0(sp)
  80d820:	dec00504 	addi	sp,sp,20
  80d824:	f800283a 	ret
  80d828:	0101ffc4 	movi	r4,2047
  80d82c:	813fd626 	beq	r16,r4,80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80d830:	29402034 	orhi	r5,r5,128
  80d834:	01000e04 	movi	r4,56
  80d838:	2080a316 	blt	r4,r2,80dac8 <__subdf3+0x3c4>
  80d83c:	010007c4 	movi	r4,31
  80d840:	2080c616 	blt	r4,r2,80db5c <__subdf3+0x458>
  80d844:	01000804 	movi	r4,32
  80d848:	2089c83a 	sub	r4,r4,r2
  80d84c:	2910983a 	sll	r8,r5,r4
  80d850:	308ed83a 	srl	r7,r6,r2
  80d854:	3108983a 	sll	r4,r6,r4
  80d858:	2884d83a 	srl	r2,r5,r2
  80d85c:	41ccb03a 	or	r6,r8,r7
  80d860:	2008c03a 	cmpne	r4,r4,zero
  80d864:	310cb03a 	or	r6,r6,r4
  80d868:	898dc83a 	sub	r6,r17,r6
  80d86c:	89a3803a 	cmpltu	r17,r17,r6
  80d870:	1887c83a 	sub	r3,r3,r2
  80d874:	1c47c83a 	sub	r3,r3,r17
  80d878:	3023883a 	mov	r17,r6
  80d87c:	1880202c 	andhi	r2,r3,128
  80d880:	10002326 	beq	r2,zero,80d910 <__subdf3+0x20c>
  80d884:	04c02034 	movhi	r19,128
  80d888:	9cffffc4 	addi	r19,r19,-1
  80d88c:	1ce6703a 	and	r19,r3,r19
  80d890:	98007a26 	beq	r19,zero,80da7c <__subdf3+0x378>
  80d894:	9809883a 	mov	r4,r19
  80d898:	080e2040 	call	80e204 <__clzsi2>
  80d89c:	113ffe04 	addi	r4,r2,-8
  80d8a0:	00c007c4 	movi	r3,31
  80d8a4:	19007b16 	blt	r3,r4,80da94 <__subdf3+0x390>
  80d8a8:	00800804 	movi	r2,32
  80d8ac:	1105c83a 	sub	r2,r2,r4
  80d8b0:	8884d83a 	srl	r2,r17,r2
  80d8b4:	9906983a 	sll	r3,r19,r4
  80d8b8:	8922983a 	sll	r17,r17,r4
  80d8bc:	10c4b03a 	or	r2,r2,r3
  80d8c0:	24007816 	blt	r4,r16,80daa4 <__subdf3+0x3a0>
  80d8c4:	2421c83a 	sub	r16,r4,r16
  80d8c8:	80c00044 	addi	r3,r16,1
  80d8cc:	010007c4 	movi	r4,31
  80d8d0:	20c09516 	blt	r4,r3,80db28 <__subdf3+0x424>
  80d8d4:	01400804 	movi	r5,32
  80d8d8:	28cbc83a 	sub	r5,r5,r3
  80d8dc:	88c8d83a 	srl	r4,r17,r3
  80d8e0:	8962983a 	sll	r17,r17,r5
  80d8e4:	114a983a 	sll	r5,r2,r5
  80d8e8:	10c6d83a 	srl	r3,r2,r3
  80d8ec:	8804c03a 	cmpne	r2,r17,zero
  80d8f0:	290ab03a 	or	r5,r5,r4
  80d8f4:	28a2b03a 	or	r17,r5,r2
  80d8f8:	0021883a 	mov	r16,zero
  80d8fc:	003fa206 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80d900:	2090b03a 	or	r8,r4,r2
  80d904:	40018e26 	beq	r8,zero,80df40 <__subdf3+0x83c>
  80d908:	1007883a 	mov	r3,r2
  80d90c:	2023883a 	mov	r17,r4
  80d910:	888001cc 	andi	r2,r17,7
  80d914:	103f9e1e 	bne	r2,zero,80d790 <__alt_mem_epcs_flash_controller_0+0xff804790>
  80d918:	1804977a 	slli	r2,r3,29
  80d91c:	8822d0fa 	srli	r17,r17,3
  80d920:	1810d0fa 	srli	r8,r3,3
  80d924:	9100004c 	andi	r4,r18,1
  80d928:	1444b03a 	or	r2,r2,r17
  80d92c:	00c1ffc4 	movi	r3,2047
  80d930:	80c02826 	beq	r16,r3,80d9d4 <__subdf3+0x2d0>
  80d934:	01400434 	movhi	r5,16
  80d938:	297fffc4 	addi	r5,r5,-1
  80d93c:	80e0703a 	and	r16,r16,r3
  80d940:	414a703a 	and	r5,r8,r5
  80d944:	003fa806 	br	80d7e8 <__alt_mem_epcs_flash_controller_0+0xff8047e8>
  80d948:	0080630e 	bge	zero,r2,80dad8 <__subdf3+0x3d4>
  80d94c:	48003026 	beq	r9,zero,80da10 <__subdf3+0x30c>
  80d950:	0101ffc4 	movi	r4,2047
  80d954:	813f8c26 	beq	r16,r4,80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80d958:	29402034 	orhi	r5,r5,128
  80d95c:	01000e04 	movi	r4,56
  80d960:	2080a90e 	bge	r4,r2,80dc08 <__subdf3+0x504>
  80d964:	298cb03a 	or	r6,r5,r6
  80d968:	3012c03a 	cmpne	r9,r6,zero
  80d96c:	0005883a 	mov	r2,zero
  80d970:	4c53883a 	add	r9,r9,r17
  80d974:	4c63803a 	cmpltu	r17,r9,r17
  80d978:	10c7883a 	add	r3,r2,r3
  80d97c:	88c7883a 	add	r3,r17,r3
  80d980:	4823883a 	mov	r17,r9
  80d984:	1880202c 	andhi	r2,r3,128
  80d988:	1000d026 	beq	r2,zero,80dccc <__subdf3+0x5c8>
  80d98c:	84000044 	addi	r16,r16,1
  80d990:	0081ffc4 	movi	r2,2047
  80d994:	8080fe26 	beq	r16,r2,80dd90 <__subdf3+0x68c>
  80d998:	00bfe034 	movhi	r2,65408
  80d99c:	10bfffc4 	addi	r2,r2,-1
  80d9a0:	1886703a 	and	r3,r3,r2
  80d9a4:	880ad07a 	srli	r5,r17,1
  80d9a8:	180497fa 	slli	r2,r3,31
  80d9ac:	8900004c 	andi	r4,r17,1
  80d9b0:	2922b03a 	or	r17,r5,r4
  80d9b4:	1806d07a 	srli	r3,r3,1
  80d9b8:	1462b03a 	or	r17,r2,r17
  80d9bc:	3825883a 	mov	r18,r7
  80d9c0:	003f7106 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80d9c4:	2984b03a 	or	r2,r5,r6
  80d9c8:	103f6826 	beq	r2,zero,80d76c <__alt_mem_epcs_flash_controller_0+0xff80476c>
  80d9cc:	39c03fcc 	andi	r7,r7,255
  80d9d0:	003f6706 	br	80d770 <__alt_mem_epcs_flash_controller_0+0xff804770>
  80d9d4:	4086b03a 	or	r3,r8,r2
  80d9d8:	18015226 	beq	r3,zero,80df24 <__subdf3+0x820>
  80d9dc:	00c00434 	movhi	r3,16
  80d9e0:	41400234 	orhi	r5,r8,8
  80d9e4:	18ffffc4 	addi	r3,r3,-1
  80d9e8:	28ca703a 	and	r5,r5,r3
  80d9ec:	003f7e06 	br	80d7e8 <__alt_mem_epcs_flash_controller_0+0xff8047e8>
  80d9f0:	10bfffc4 	addi	r2,r2,-1
  80d9f4:	1000491e 	bne	r2,zero,80db1c <__subdf3+0x418>
  80d9f8:	898fc83a 	sub	r7,r17,r6
  80d9fc:	89e3803a 	cmpltu	r17,r17,r7
  80da00:	1947c83a 	sub	r3,r3,r5
  80da04:	1c47c83a 	sub	r3,r3,r17
  80da08:	3823883a 	mov	r17,r7
  80da0c:	003f9b06 	br	80d87c <__alt_mem_epcs_flash_controller_0+0xff80487c>
  80da10:	2988b03a 	or	r4,r5,r6
  80da14:	203f5c26 	beq	r4,zero,80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80da18:	10bfffc4 	addi	r2,r2,-1
  80da1c:	1000931e 	bne	r2,zero,80dc6c <__subdf3+0x568>
  80da20:	898d883a 	add	r6,r17,r6
  80da24:	3463803a 	cmpltu	r17,r6,r17
  80da28:	1947883a 	add	r3,r3,r5
  80da2c:	88c7883a 	add	r3,r17,r3
  80da30:	3023883a 	mov	r17,r6
  80da34:	003fd306 	br	80d984 <__alt_mem_epcs_flash_controller_0+0xff804984>
  80da38:	1000541e 	bne	r2,zero,80db8c <__subdf3+0x488>
  80da3c:	80800044 	addi	r2,r16,1
  80da40:	1081ffcc 	andi	r2,r2,2047
  80da44:	01000044 	movi	r4,1
  80da48:	2080a20e 	bge	r4,r2,80dcd4 <__subdf3+0x5d0>
  80da4c:	8989c83a 	sub	r4,r17,r6
  80da50:	8905803a 	cmpltu	r2,r17,r4
  80da54:	1967c83a 	sub	r19,r3,r5
  80da58:	98a7c83a 	sub	r19,r19,r2
  80da5c:	9880202c 	andhi	r2,r19,128
  80da60:	10006326 	beq	r2,zero,80dbf0 <__subdf3+0x4ec>
  80da64:	3463c83a 	sub	r17,r6,r17
  80da68:	28c7c83a 	sub	r3,r5,r3
  80da6c:	344d803a 	cmpltu	r6,r6,r17
  80da70:	19a7c83a 	sub	r19,r3,r6
  80da74:	3825883a 	mov	r18,r7
  80da78:	983f861e 	bne	r19,zero,80d894 <__alt_mem_epcs_flash_controller_0+0xff804894>
  80da7c:	8809883a 	mov	r4,r17
  80da80:	080e2040 	call	80e204 <__clzsi2>
  80da84:	10800804 	addi	r2,r2,32
  80da88:	113ffe04 	addi	r4,r2,-8
  80da8c:	00c007c4 	movi	r3,31
  80da90:	193f850e 	bge	r3,r4,80d8a8 <__alt_mem_epcs_flash_controller_0+0xff8048a8>
  80da94:	10bff604 	addi	r2,r2,-40
  80da98:	8884983a 	sll	r2,r17,r2
  80da9c:	0023883a 	mov	r17,zero
  80daa0:	243f880e 	bge	r4,r16,80d8c4 <__alt_mem_epcs_flash_controller_0+0xff8048c4>
  80daa4:	00ffe034 	movhi	r3,65408
  80daa8:	18ffffc4 	addi	r3,r3,-1
  80daac:	8121c83a 	sub	r16,r16,r4
  80dab0:	10c6703a 	and	r3,r2,r3
  80dab4:	003f3406 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dab8:	9100004c 	andi	r4,r18,1
  80dabc:	000b883a 	mov	r5,zero
  80dac0:	0005883a 	mov	r2,zero
  80dac4:	003f4806 	br	80d7e8 <__alt_mem_epcs_flash_controller_0+0xff8047e8>
  80dac8:	298cb03a 	or	r6,r5,r6
  80dacc:	300cc03a 	cmpne	r6,r6,zero
  80dad0:	0005883a 	mov	r2,zero
  80dad4:	003f6406 	br	80d868 <__alt_mem_epcs_flash_controller_0+0xff804868>
  80dad8:	10009a1e 	bne	r2,zero,80dd44 <__subdf3+0x640>
  80dadc:	82400044 	addi	r9,r16,1
  80dae0:	4881ffcc 	andi	r2,r9,2047
  80dae4:	02800044 	movi	r10,1
  80dae8:	5080670e 	bge	r10,r2,80dc88 <__subdf3+0x584>
  80daec:	0081ffc4 	movi	r2,2047
  80daf0:	4880af26 	beq	r9,r2,80ddb0 <__subdf3+0x6ac>
  80daf4:	898d883a 	add	r6,r17,r6
  80daf8:	1945883a 	add	r2,r3,r5
  80dafc:	3447803a 	cmpltu	r3,r6,r17
  80db00:	1887883a 	add	r3,r3,r2
  80db04:	182297fa 	slli	r17,r3,31
  80db08:	300cd07a 	srli	r6,r6,1
  80db0c:	1806d07a 	srli	r3,r3,1
  80db10:	4821883a 	mov	r16,r9
  80db14:	89a2b03a 	or	r17,r17,r6
  80db18:	003f1b06 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80db1c:	0101ffc4 	movi	r4,2047
  80db20:	813f441e 	bne	r16,r4,80d834 <__alt_mem_epcs_flash_controller_0+0xff804834>
  80db24:	003f1806 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80db28:	843ff844 	addi	r16,r16,-31
  80db2c:	01400804 	movi	r5,32
  80db30:	1408d83a 	srl	r4,r2,r16
  80db34:	19405026 	beq	r3,r5,80dc78 <__subdf3+0x574>
  80db38:	01401004 	movi	r5,64
  80db3c:	28c7c83a 	sub	r3,r5,r3
  80db40:	10c4983a 	sll	r2,r2,r3
  80db44:	88a2b03a 	or	r17,r17,r2
  80db48:	8822c03a 	cmpne	r17,r17,zero
  80db4c:	2462b03a 	or	r17,r4,r17
  80db50:	0007883a 	mov	r3,zero
  80db54:	0021883a 	mov	r16,zero
  80db58:	003f6d06 	br	80d910 <__alt_mem_epcs_flash_controller_0+0xff804910>
  80db5c:	11fff804 	addi	r7,r2,-32
  80db60:	01000804 	movi	r4,32
  80db64:	29ced83a 	srl	r7,r5,r7
  80db68:	11004526 	beq	r2,r4,80dc80 <__subdf3+0x57c>
  80db6c:	01001004 	movi	r4,64
  80db70:	2089c83a 	sub	r4,r4,r2
  80db74:	2904983a 	sll	r2,r5,r4
  80db78:	118cb03a 	or	r6,r2,r6
  80db7c:	300cc03a 	cmpne	r6,r6,zero
  80db80:	398cb03a 	or	r6,r7,r6
  80db84:	0005883a 	mov	r2,zero
  80db88:	003f3706 	br	80d868 <__alt_mem_epcs_flash_controller_0+0xff804868>
  80db8c:	80002a26 	beq	r16,zero,80dc38 <__subdf3+0x534>
  80db90:	0101ffc4 	movi	r4,2047
  80db94:	49006626 	beq	r9,r4,80dd30 <__subdf3+0x62c>
  80db98:	0085c83a 	sub	r2,zero,r2
  80db9c:	18c02034 	orhi	r3,r3,128
  80dba0:	01000e04 	movi	r4,56
  80dba4:	20807e16 	blt	r4,r2,80dda0 <__subdf3+0x69c>
  80dba8:	010007c4 	movi	r4,31
  80dbac:	2080e716 	blt	r4,r2,80df4c <__subdf3+0x848>
  80dbb0:	01000804 	movi	r4,32
  80dbb4:	2089c83a 	sub	r4,r4,r2
  80dbb8:	1914983a 	sll	r10,r3,r4
  80dbbc:	8890d83a 	srl	r8,r17,r2
  80dbc0:	8908983a 	sll	r4,r17,r4
  80dbc4:	1884d83a 	srl	r2,r3,r2
  80dbc8:	5222b03a 	or	r17,r10,r8
  80dbcc:	2006c03a 	cmpne	r3,r4,zero
  80dbd0:	88e2b03a 	or	r17,r17,r3
  80dbd4:	3463c83a 	sub	r17,r6,r17
  80dbd8:	2885c83a 	sub	r2,r5,r2
  80dbdc:	344d803a 	cmpltu	r6,r6,r17
  80dbe0:	1187c83a 	sub	r3,r2,r6
  80dbe4:	4821883a 	mov	r16,r9
  80dbe8:	3825883a 	mov	r18,r7
  80dbec:	003f2306 	br	80d87c <__alt_mem_epcs_flash_controller_0+0xff80487c>
  80dbf0:	24d0b03a 	or	r8,r4,r19
  80dbf4:	40001b1e 	bne	r8,zero,80dc64 <__subdf3+0x560>
  80dbf8:	0005883a 	mov	r2,zero
  80dbfc:	0009883a 	mov	r4,zero
  80dc00:	0021883a 	mov	r16,zero
  80dc04:	003f4906 	br	80d92c <__alt_mem_epcs_flash_controller_0+0xff80492c>
  80dc08:	010007c4 	movi	r4,31
  80dc0c:	20803a16 	blt	r4,r2,80dcf8 <__subdf3+0x5f4>
  80dc10:	01000804 	movi	r4,32
  80dc14:	2089c83a 	sub	r4,r4,r2
  80dc18:	2912983a 	sll	r9,r5,r4
  80dc1c:	3090d83a 	srl	r8,r6,r2
  80dc20:	3108983a 	sll	r4,r6,r4
  80dc24:	2884d83a 	srl	r2,r5,r2
  80dc28:	4a12b03a 	or	r9,r9,r8
  80dc2c:	2008c03a 	cmpne	r4,r4,zero
  80dc30:	4912b03a 	or	r9,r9,r4
  80dc34:	003f4e06 	br	80d970 <__alt_mem_epcs_flash_controller_0+0xff804970>
  80dc38:	1c48b03a 	or	r4,r3,r17
  80dc3c:	20003c26 	beq	r4,zero,80dd30 <__subdf3+0x62c>
  80dc40:	0084303a 	nor	r2,zero,r2
  80dc44:	1000381e 	bne	r2,zero,80dd28 <__subdf3+0x624>
  80dc48:	3463c83a 	sub	r17,r6,r17
  80dc4c:	28c5c83a 	sub	r2,r5,r3
  80dc50:	344d803a 	cmpltu	r6,r6,r17
  80dc54:	1187c83a 	sub	r3,r2,r6
  80dc58:	4821883a 	mov	r16,r9
  80dc5c:	3825883a 	mov	r18,r7
  80dc60:	003f0606 	br	80d87c <__alt_mem_epcs_flash_controller_0+0xff80487c>
  80dc64:	2023883a 	mov	r17,r4
  80dc68:	003f0906 	br	80d890 <__alt_mem_epcs_flash_controller_0+0xff804890>
  80dc6c:	0101ffc4 	movi	r4,2047
  80dc70:	813f3a1e 	bne	r16,r4,80d95c <__alt_mem_epcs_flash_controller_0+0xff80495c>
  80dc74:	003ec406 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dc78:	0005883a 	mov	r2,zero
  80dc7c:	003fb106 	br	80db44 <__alt_mem_epcs_flash_controller_0+0xff804b44>
  80dc80:	0005883a 	mov	r2,zero
  80dc84:	003fbc06 	br	80db78 <__alt_mem_epcs_flash_controller_0+0xff804b78>
  80dc88:	1c44b03a 	or	r2,r3,r17
  80dc8c:	80008e1e 	bne	r16,zero,80dec8 <__subdf3+0x7c4>
  80dc90:	1000c826 	beq	r2,zero,80dfb4 <__subdf3+0x8b0>
  80dc94:	2984b03a 	or	r2,r5,r6
  80dc98:	103ebb26 	beq	r2,zero,80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dc9c:	8989883a 	add	r4,r17,r6
  80dca0:	1945883a 	add	r2,r3,r5
  80dca4:	2447803a 	cmpltu	r3,r4,r17
  80dca8:	1887883a 	add	r3,r3,r2
  80dcac:	1880202c 	andhi	r2,r3,128
  80dcb0:	2023883a 	mov	r17,r4
  80dcb4:	103f1626 	beq	r2,zero,80d910 <__alt_mem_epcs_flash_controller_0+0xff804910>
  80dcb8:	00bfe034 	movhi	r2,65408
  80dcbc:	10bfffc4 	addi	r2,r2,-1
  80dcc0:	5021883a 	mov	r16,r10
  80dcc4:	1886703a 	and	r3,r3,r2
  80dcc8:	003eaf06 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dccc:	3825883a 	mov	r18,r7
  80dcd0:	003f0f06 	br	80d910 <__alt_mem_epcs_flash_controller_0+0xff804910>
  80dcd4:	1c44b03a 	or	r2,r3,r17
  80dcd8:	8000251e 	bne	r16,zero,80dd70 <__subdf3+0x66c>
  80dcdc:	1000661e 	bne	r2,zero,80de78 <__subdf3+0x774>
  80dce0:	2990b03a 	or	r8,r5,r6
  80dce4:	40009626 	beq	r8,zero,80df40 <__subdf3+0x83c>
  80dce8:	2807883a 	mov	r3,r5
  80dcec:	3023883a 	mov	r17,r6
  80dcf0:	3825883a 	mov	r18,r7
  80dcf4:	003ea406 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dcf8:	127ff804 	addi	r9,r2,-32
  80dcfc:	01000804 	movi	r4,32
  80dd00:	2a52d83a 	srl	r9,r5,r9
  80dd04:	11008c26 	beq	r2,r4,80df38 <__subdf3+0x834>
  80dd08:	01001004 	movi	r4,64
  80dd0c:	2085c83a 	sub	r2,r4,r2
  80dd10:	2884983a 	sll	r2,r5,r2
  80dd14:	118cb03a 	or	r6,r2,r6
  80dd18:	300cc03a 	cmpne	r6,r6,zero
  80dd1c:	4992b03a 	or	r9,r9,r6
  80dd20:	0005883a 	mov	r2,zero
  80dd24:	003f1206 	br	80d970 <__alt_mem_epcs_flash_controller_0+0xff804970>
  80dd28:	0101ffc4 	movi	r4,2047
  80dd2c:	493f9c1e 	bne	r9,r4,80dba0 <__alt_mem_epcs_flash_controller_0+0xff804ba0>
  80dd30:	2807883a 	mov	r3,r5
  80dd34:	3023883a 	mov	r17,r6
  80dd38:	4821883a 	mov	r16,r9
  80dd3c:	3825883a 	mov	r18,r7
  80dd40:	003e9106 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dd44:	80001f1e 	bne	r16,zero,80ddc4 <__subdf3+0x6c0>
  80dd48:	1c48b03a 	or	r4,r3,r17
  80dd4c:	20005a26 	beq	r4,zero,80deb8 <__subdf3+0x7b4>
  80dd50:	0084303a 	nor	r2,zero,r2
  80dd54:	1000561e 	bne	r2,zero,80deb0 <__subdf3+0x7ac>
  80dd58:	89a3883a 	add	r17,r17,r6
  80dd5c:	1945883a 	add	r2,r3,r5
  80dd60:	898d803a 	cmpltu	r6,r17,r6
  80dd64:	3087883a 	add	r3,r6,r2
  80dd68:	4821883a 	mov	r16,r9
  80dd6c:	003f0506 	br	80d984 <__alt_mem_epcs_flash_controller_0+0xff804984>
  80dd70:	10002b1e 	bne	r2,zero,80de20 <__subdf3+0x71c>
  80dd74:	2984b03a 	or	r2,r5,r6
  80dd78:	10008026 	beq	r2,zero,80df7c <__subdf3+0x878>
  80dd7c:	2807883a 	mov	r3,r5
  80dd80:	3023883a 	mov	r17,r6
  80dd84:	3825883a 	mov	r18,r7
  80dd88:	0401ffc4 	movi	r16,2047
  80dd8c:	003e7e06 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dd90:	3809883a 	mov	r4,r7
  80dd94:	0011883a 	mov	r8,zero
  80dd98:	0005883a 	mov	r2,zero
  80dd9c:	003ee306 	br	80d92c <__alt_mem_epcs_flash_controller_0+0xff80492c>
  80dda0:	1c62b03a 	or	r17,r3,r17
  80dda4:	8822c03a 	cmpne	r17,r17,zero
  80dda8:	0005883a 	mov	r2,zero
  80ddac:	003f8906 	br	80dbd4 <__alt_mem_epcs_flash_controller_0+0xff804bd4>
  80ddb0:	3809883a 	mov	r4,r7
  80ddb4:	4821883a 	mov	r16,r9
  80ddb8:	0011883a 	mov	r8,zero
  80ddbc:	0005883a 	mov	r2,zero
  80ddc0:	003eda06 	br	80d92c <__alt_mem_epcs_flash_controller_0+0xff80492c>
  80ddc4:	0101ffc4 	movi	r4,2047
  80ddc8:	49003b26 	beq	r9,r4,80deb8 <__subdf3+0x7b4>
  80ddcc:	0085c83a 	sub	r2,zero,r2
  80ddd0:	18c02034 	orhi	r3,r3,128
  80ddd4:	01000e04 	movi	r4,56
  80ddd8:	20806e16 	blt	r4,r2,80df94 <__subdf3+0x890>
  80dddc:	010007c4 	movi	r4,31
  80dde0:	20807716 	blt	r4,r2,80dfc0 <__subdf3+0x8bc>
  80dde4:	01000804 	movi	r4,32
  80dde8:	2089c83a 	sub	r4,r4,r2
  80ddec:	1914983a 	sll	r10,r3,r4
  80ddf0:	8890d83a 	srl	r8,r17,r2
  80ddf4:	8908983a 	sll	r4,r17,r4
  80ddf8:	1884d83a 	srl	r2,r3,r2
  80ddfc:	5222b03a 	or	r17,r10,r8
  80de00:	2006c03a 	cmpne	r3,r4,zero
  80de04:	88e2b03a 	or	r17,r17,r3
  80de08:	89a3883a 	add	r17,r17,r6
  80de0c:	1145883a 	add	r2,r2,r5
  80de10:	898d803a 	cmpltu	r6,r17,r6
  80de14:	3087883a 	add	r3,r6,r2
  80de18:	4821883a 	mov	r16,r9
  80de1c:	003ed906 	br	80d984 <__alt_mem_epcs_flash_controller_0+0xff804984>
  80de20:	2984b03a 	or	r2,r5,r6
  80de24:	10004226 	beq	r2,zero,80df30 <__subdf3+0x82c>
  80de28:	1808d0fa 	srli	r4,r3,3
  80de2c:	8822d0fa 	srli	r17,r17,3
  80de30:	1806977a 	slli	r3,r3,29
  80de34:	2080022c 	andhi	r2,r4,8
  80de38:	1c62b03a 	or	r17,r3,r17
  80de3c:	10000826 	beq	r2,zero,80de60 <__subdf3+0x75c>
  80de40:	2812d0fa 	srli	r9,r5,3
  80de44:	4880022c 	andhi	r2,r9,8
  80de48:	1000051e 	bne	r2,zero,80de60 <__subdf3+0x75c>
  80de4c:	300cd0fa 	srli	r6,r6,3
  80de50:	2804977a 	slli	r2,r5,29
  80de54:	4809883a 	mov	r4,r9
  80de58:	3825883a 	mov	r18,r7
  80de5c:	11a2b03a 	or	r17,r2,r6
  80de60:	8806d77a 	srli	r3,r17,29
  80de64:	200890fa 	slli	r4,r4,3
  80de68:	882290fa 	slli	r17,r17,3
  80de6c:	0401ffc4 	movi	r16,2047
  80de70:	1906b03a 	or	r3,r3,r4
  80de74:	003e4406 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80de78:	2984b03a 	or	r2,r5,r6
  80de7c:	103e4226 	beq	r2,zero,80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80de80:	8989c83a 	sub	r4,r17,r6
  80de84:	8911803a 	cmpltu	r8,r17,r4
  80de88:	1945c83a 	sub	r2,r3,r5
  80de8c:	1205c83a 	sub	r2,r2,r8
  80de90:	1200202c 	andhi	r8,r2,128
  80de94:	403e9a26 	beq	r8,zero,80d900 <__alt_mem_epcs_flash_controller_0+0xff804900>
  80de98:	3463c83a 	sub	r17,r6,r17
  80de9c:	28c5c83a 	sub	r2,r5,r3
  80dea0:	344d803a 	cmpltu	r6,r6,r17
  80dea4:	1187c83a 	sub	r3,r2,r6
  80dea8:	3825883a 	mov	r18,r7
  80deac:	003e3606 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80deb0:	0101ffc4 	movi	r4,2047
  80deb4:	493fc71e 	bne	r9,r4,80ddd4 <__alt_mem_epcs_flash_controller_0+0xff804dd4>
  80deb8:	2807883a 	mov	r3,r5
  80debc:	3023883a 	mov	r17,r6
  80dec0:	4821883a 	mov	r16,r9
  80dec4:	003e3006 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dec8:	10003626 	beq	r2,zero,80dfa4 <__subdf3+0x8a0>
  80decc:	2984b03a 	or	r2,r5,r6
  80ded0:	10001726 	beq	r2,zero,80df30 <__subdf3+0x82c>
  80ded4:	1808d0fa 	srli	r4,r3,3
  80ded8:	8822d0fa 	srli	r17,r17,3
  80dedc:	1806977a 	slli	r3,r3,29
  80dee0:	2080022c 	andhi	r2,r4,8
  80dee4:	1c62b03a 	or	r17,r3,r17
  80dee8:	10000726 	beq	r2,zero,80df08 <__subdf3+0x804>
  80deec:	2812d0fa 	srli	r9,r5,3
  80def0:	4880022c 	andhi	r2,r9,8
  80def4:	1000041e 	bne	r2,zero,80df08 <__subdf3+0x804>
  80def8:	300cd0fa 	srli	r6,r6,3
  80defc:	2804977a 	slli	r2,r5,29
  80df00:	4809883a 	mov	r4,r9
  80df04:	11a2b03a 	or	r17,r2,r6
  80df08:	8806d77a 	srli	r3,r17,29
  80df0c:	200890fa 	slli	r4,r4,3
  80df10:	882290fa 	slli	r17,r17,3
  80df14:	3825883a 	mov	r18,r7
  80df18:	1906b03a 	or	r3,r3,r4
  80df1c:	0401ffc4 	movi	r16,2047
  80df20:	003e1906 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80df24:	000b883a 	mov	r5,zero
  80df28:	0005883a 	mov	r2,zero
  80df2c:	003e2e06 	br	80d7e8 <__alt_mem_epcs_flash_controller_0+0xff8047e8>
  80df30:	0401ffc4 	movi	r16,2047
  80df34:	003e1406 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80df38:	0005883a 	mov	r2,zero
  80df3c:	003f7506 	br	80dd14 <__alt_mem_epcs_flash_controller_0+0xff804d14>
  80df40:	0005883a 	mov	r2,zero
  80df44:	0009883a 	mov	r4,zero
  80df48:	003e7806 	br	80d92c <__alt_mem_epcs_flash_controller_0+0xff80492c>
  80df4c:	123ff804 	addi	r8,r2,-32
  80df50:	01000804 	movi	r4,32
  80df54:	1a10d83a 	srl	r8,r3,r8
  80df58:	11002526 	beq	r2,r4,80dff0 <__subdf3+0x8ec>
  80df5c:	01001004 	movi	r4,64
  80df60:	2085c83a 	sub	r2,r4,r2
  80df64:	1884983a 	sll	r2,r3,r2
  80df68:	1444b03a 	or	r2,r2,r17
  80df6c:	1004c03a 	cmpne	r2,r2,zero
  80df70:	40a2b03a 	or	r17,r8,r2
  80df74:	0005883a 	mov	r2,zero
  80df78:	003f1606 	br	80dbd4 <__alt_mem_epcs_flash_controller_0+0xff804bd4>
  80df7c:	02000434 	movhi	r8,16
  80df80:	0009883a 	mov	r4,zero
  80df84:	423fffc4 	addi	r8,r8,-1
  80df88:	00bfffc4 	movi	r2,-1
  80df8c:	0401ffc4 	movi	r16,2047
  80df90:	003e6606 	br	80d92c <__alt_mem_epcs_flash_controller_0+0xff80492c>
  80df94:	1c62b03a 	or	r17,r3,r17
  80df98:	8822c03a 	cmpne	r17,r17,zero
  80df9c:	0005883a 	mov	r2,zero
  80dfa0:	003f9906 	br	80de08 <__alt_mem_epcs_flash_controller_0+0xff804e08>
  80dfa4:	2807883a 	mov	r3,r5
  80dfa8:	3023883a 	mov	r17,r6
  80dfac:	0401ffc4 	movi	r16,2047
  80dfb0:	003df506 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dfb4:	2807883a 	mov	r3,r5
  80dfb8:	3023883a 	mov	r17,r6
  80dfbc:	003df206 	br	80d788 <__alt_mem_epcs_flash_controller_0+0xff804788>
  80dfc0:	123ff804 	addi	r8,r2,-32
  80dfc4:	01000804 	movi	r4,32
  80dfc8:	1a10d83a 	srl	r8,r3,r8
  80dfcc:	11000a26 	beq	r2,r4,80dff8 <__subdf3+0x8f4>
  80dfd0:	01001004 	movi	r4,64
  80dfd4:	2085c83a 	sub	r2,r4,r2
  80dfd8:	1884983a 	sll	r2,r3,r2
  80dfdc:	1444b03a 	or	r2,r2,r17
  80dfe0:	1004c03a 	cmpne	r2,r2,zero
  80dfe4:	40a2b03a 	or	r17,r8,r2
  80dfe8:	0005883a 	mov	r2,zero
  80dfec:	003f8606 	br	80de08 <__alt_mem_epcs_flash_controller_0+0xff804e08>
  80dff0:	0005883a 	mov	r2,zero
  80dff4:	003fdc06 	br	80df68 <__alt_mem_epcs_flash_controller_0+0xff804f68>
  80dff8:	0005883a 	mov	r2,zero
  80dffc:	003ff706 	br	80dfdc <__alt_mem_epcs_flash_controller_0+0xff804fdc>

0080e000 <__fixdfsi>:
  80e000:	280cd53a 	srli	r6,r5,20
  80e004:	00c00434 	movhi	r3,16
  80e008:	18ffffc4 	addi	r3,r3,-1
  80e00c:	3181ffcc 	andi	r6,r6,2047
  80e010:	01c0ff84 	movi	r7,1022
  80e014:	28c6703a 	and	r3,r5,r3
  80e018:	280ad7fa 	srli	r5,r5,31
  80e01c:	3980120e 	bge	r7,r6,80e068 <__fixdfsi+0x68>
  80e020:	00810744 	movi	r2,1053
  80e024:	11800c16 	blt	r2,r6,80e058 <__fixdfsi+0x58>
  80e028:	00810cc4 	movi	r2,1075
  80e02c:	1185c83a 	sub	r2,r2,r6
  80e030:	01c007c4 	movi	r7,31
  80e034:	18c00434 	orhi	r3,r3,16
  80e038:	38800d16 	blt	r7,r2,80e070 <__fixdfsi+0x70>
  80e03c:	31befb44 	addi	r6,r6,-1043
  80e040:	2084d83a 	srl	r2,r4,r2
  80e044:	1986983a 	sll	r3,r3,r6
  80e048:	1884b03a 	or	r2,r3,r2
  80e04c:	28000726 	beq	r5,zero,80e06c <__fixdfsi+0x6c>
  80e050:	0085c83a 	sub	r2,zero,r2
  80e054:	f800283a 	ret
  80e058:	00a00034 	movhi	r2,32768
  80e05c:	10bfffc4 	addi	r2,r2,-1
  80e060:	2885883a 	add	r2,r5,r2
  80e064:	f800283a 	ret
  80e068:	0005883a 	mov	r2,zero
  80e06c:	f800283a 	ret
  80e070:	008104c4 	movi	r2,1043
  80e074:	1185c83a 	sub	r2,r2,r6
  80e078:	1884d83a 	srl	r2,r3,r2
  80e07c:	003ff306 	br	80e04c <__alt_mem_epcs_flash_controller_0+0xff80504c>

0080e080 <__floatsidf>:
  80e080:	defffd04 	addi	sp,sp,-12
  80e084:	dfc00215 	stw	ra,8(sp)
  80e088:	dc400115 	stw	r17,4(sp)
  80e08c:	dc000015 	stw	r16,0(sp)
  80e090:	20002b26 	beq	r4,zero,80e140 <__floatsidf+0xc0>
  80e094:	2023883a 	mov	r17,r4
  80e098:	2020d7fa 	srli	r16,r4,31
  80e09c:	20002d16 	blt	r4,zero,80e154 <__floatsidf+0xd4>
  80e0a0:	8809883a 	mov	r4,r17
  80e0a4:	080e2040 	call	80e204 <__clzsi2>
  80e0a8:	01410784 	movi	r5,1054
  80e0ac:	288bc83a 	sub	r5,r5,r2
  80e0b0:	01010cc4 	movi	r4,1075
  80e0b4:	2149c83a 	sub	r4,r4,r5
  80e0b8:	00c007c4 	movi	r3,31
  80e0bc:	1900160e 	bge	r3,r4,80e118 <__floatsidf+0x98>
  80e0c0:	00c104c4 	movi	r3,1043
  80e0c4:	1947c83a 	sub	r3,r3,r5
  80e0c8:	88c6983a 	sll	r3,r17,r3
  80e0cc:	00800434 	movhi	r2,16
  80e0d0:	10bfffc4 	addi	r2,r2,-1
  80e0d4:	1886703a 	and	r3,r3,r2
  80e0d8:	2941ffcc 	andi	r5,r5,2047
  80e0dc:	800d883a 	mov	r6,r16
  80e0e0:	0005883a 	mov	r2,zero
  80e0e4:	280a953a 	slli	r5,r5,20
  80e0e8:	31803fcc 	andi	r6,r6,255
  80e0ec:	01000434 	movhi	r4,16
  80e0f0:	300c97fa 	slli	r6,r6,31
  80e0f4:	213fffc4 	addi	r4,r4,-1
  80e0f8:	1906703a 	and	r3,r3,r4
  80e0fc:	1946b03a 	or	r3,r3,r5
  80e100:	1986b03a 	or	r3,r3,r6
  80e104:	dfc00217 	ldw	ra,8(sp)
  80e108:	dc400117 	ldw	r17,4(sp)
  80e10c:	dc000017 	ldw	r16,0(sp)
  80e110:	dec00304 	addi	sp,sp,12
  80e114:	f800283a 	ret
  80e118:	00c002c4 	movi	r3,11
  80e11c:	1887c83a 	sub	r3,r3,r2
  80e120:	88c6d83a 	srl	r3,r17,r3
  80e124:	8904983a 	sll	r2,r17,r4
  80e128:	01000434 	movhi	r4,16
  80e12c:	213fffc4 	addi	r4,r4,-1
  80e130:	2941ffcc 	andi	r5,r5,2047
  80e134:	1906703a 	and	r3,r3,r4
  80e138:	800d883a 	mov	r6,r16
  80e13c:	003fe906 	br	80e0e4 <__alt_mem_epcs_flash_controller_0+0xff8050e4>
  80e140:	000d883a 	mov	r6,zero
  80e144:	000b883a 	mov	r5,zero
  80e148:	0007883a 	mov	r3,zero
  80e14c:	0005883a 	mov	r2,zero
  80e150:	003fe406 	br	80e0e4 <__alt_mem_epcs_flash_controller_0+0xff8050e4>
  80e154:	0123c83a 	sub	r17,zero,r4
  80e158:	003fd106 	br	80e0a0 <__alt_mem_epcs_flash_controller_0+0xff8050a0>

0080e15c <__floatunsidf>:
  80e15c:	defffe04 	addi	sp,sp,-8
  80e160:	dc000015 	stw	r16,0(sp)
  80e164:	dfc00115 	stw	ra,4(sp)
  80e168:	2021883a 	mov	r16,r4
  80e16c:	20002226 	beq	r4,zero,80e1f8 <__floatunsidf+0x9c>
  80e170:	080e2040 	call	80e204 <__clzsi2>
  80e174:	01010784 	movi	r4,1054
  80e178:	2089c83a 	sub	r4,r4,r2
  80e17c:	01810cc4 	movi	r6,1075
  80e180:	310dc83a 	sub	r6,r6,r4
  80e184:	00c007c4 	movi	r3,31
  80e188:	1980120e 	bge	r3,r6,80e1d4 <__floatunsidf+0x78>
  80e18c:	00c104c4 	movi	r3,1043
  80e190:	1907c83a 	sub	r3,r3,r4
  80e194:	80ca983a 	sll	r5,r16,r3
  80e198:	00800434 	movhi	r2,16
  80e19c:	10bfffc4 	addi	r2,r2,-1
  80e1a0:	2101ffcc 	andi	r4,r4,2047
  80e1a4:	0021883a 	mov	r16,zero
  80e1a8:	288a703a 	and	r5,r5,r2
  80e1ac:	2008953a 	slli	r4,r4,20
  80e1b0:	00c00434 	movhi	r3,16
  80e1b4:	18ffffc4 	addi	r3,r3,-1
  80e1b8:	28c6703a 	and	r3,r5,r3
  80e1bc:	8005883a 	mov	r2,r16
  80e1c0:	1906b03a 	or	r3,r3,r4
  80e1c4:	dfc00117 	ldw	ra,4(sp)
  80e1c8:	dc000017 	ldw	r16,0(sp)
  80e1cc:	dec00204 	addi	sp,sp,8
  80e1d0:	f800283a 	ret
  80e1d4:	00c002c4 	movi	r3,11
  80e1d8:	188bc83a 	sub	r5,r3,r2
  80e1dc:	814ad83a 	srl	r5,r16,r5
  80e1e0:	00c00434 	movhi	r3,16
  80e1e4:	18ffffc4 	addi	r3,r3,-1
  80e1e8:	81a0983a 	sll	r16,r16,r6
  80e1ec:	2101ffcc 	andi	r4,r4,2047
  80e1f0:	28ca703a 	and	r5,r5,r3
  80e1f4:	003fed06 	br	80e1ac <__alt_mem_epcs_flash_controller_0+0xff8051ac>
  80e1f8:	0009883a 	mov	r4,zero
  80e1fc:	000b883a 	mov	r5,zero
  80e200:	003fea06 	br	80e1ac <__alt_mem_epcs_flash_controller_0+0xff8051ac>

0080e204 <__clzsi2>:
  80e204:	00bfffd4 	movui	r2,65535
  80e208:	11000536 	bltu	r2,r4,80e220 <__clzsi2+0x1c>
  80e20c:	00803fc4 	movi	r2,255
  80e210:	11000f36 	bltu	r2,r4,80e250 <__clzsi2+0x4c>
  80e214:	00800804 	movi	r2,32
  80e218:	0007883a 	mov	r3,zero
  80e21c:	00000506 	br	80e234 <__clzsi2+0x30>
  80e220:	00804034 	movhi	r2,256
  80e224:	10bfffc4 	addi	r2,r2,-1
  80e228:	11000c2e 	bgeu	r2,r4,80e25c <__clzsi2+0x58>
  80e22c:	00800204 	movi	r2,8
  80e230:	00c00604 	movi	r3,24
  80e234:	20c8d83a 	srl	r4,r4,r3
  80e238:	00c020b4 	movhi	r3,130
  80e23c:	18f00104 	addi	r3,r3,-16380
  80e240:	1909883a 	add	r4,r3,r4
  80e244:	20c00003 	ldbu	r3,0(r4)
  80e248:	10c5c83a 	sub	r2,r2,r3
  80e24c:	f800283a 	ret
  80e250:	00800604 	movi	r2,24
  80e254:	00c00204 	movi	r3,8
  80e258:	003ff606 	br	80e234 <__alt_mem_epcs_flash_controller_0+0xff805234>
  80e25c:	00800404 	movi	r2,16
  80e260:	1007883a 	mov	r3,r2
  80e264:	003ff306 	br	80e234 <__alt_mem_epcs_flash_controller_0+0xff805234>

0080e268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e268:	defffe04 	addi	sp,sp,-8
  80e26c:	dfc00115 	stw	ra,4(sp)
  80e270:	df000015 	stw	fp,0(sp)
  80e274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e278:	d0a03b17 	ldw	r2,-32532(gp)
  80e27c:	10000326 	beq	r2,zero,80e28c <alt_get_errno+0x24>
  80e280:	d0a03b17 	ldw	r2,-32532(gp)
  80e284:	103ee83a 	callr	r2
  80e288:	00000106 	br	80e290 <alt_get_errno+0x28>
  80e28c:	d0a07e04 	addi	r2,gp,-32264
}
  80e290:	e037883a 	mov	sp,fp
  80e294:	dfc00117 	ldw	ra,4(sp)
  80e298:	df000017 	ldw	fp,0(sp)
  80e29c:	dec00204 	addi	sp,sp,8
  80e2a0:	f800283a 	ret

0080e2a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e2a4:	defffb04 	addi	sp,sp,-20
  80e2a8:	dfc00415 	stw	ra,16(sp)
  80e2ac:	df000315 	stw	fp,12(sp)
  80e2b0:	df000304 	addi	fp,sp,12
  80e2b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e2b8:	e0bfff17 	ldw	r2,-4(fp)
  80e2bc:	10000816 	blt	r2,zero,80e2e0 <close+0x3c>
  80e2c0:	01400304 	movi	r5,12
  80e2c4:	e13fff17 	ldw	r4,-4(fp)
  80e2c8:	080b99c0 	call	80b99c <__mulsi3>
  80e2cc:	1007883a 	mov	r3,r2
  80e2d0:	008020b4 	movhi	r2,130
  80e2d4:	10b2dd04 	addi	r2,r2,-13452
  80e2d8:	1885883a 	add	r2,r3,r2
  80e2dc:	00000106 	br	80e2e4 <close+0x40>
  80e2e0:	0005883a 	mov	r2,zero
  80e2e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80e2e8:	e0bffd17 	ldw	r2,-12(fp)
  80e2ec:	10001926 	beq	r2,zero,80e354 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e2f0:	e0bffd17 	ldw	r2,-12(fp)
  80e2f4:	10800017 	ldw	r2,0(r2)
  80e2f8:	10800417 	ldw	r2,16(r2)
  80e2fc:	10000626 	beq	r2,zero,80e318 <close+0x74>
  80e300:	e0bffd17 	ldw	r2,-12(fp)
  80e304:	10800017 	ldw	r2,0(r2)
  80e308:	10800417 	ldw	r2,16(r2)
  80e30c:	e13ffd17 	ldw	r4,-12(fp)
  80e310:	103ee83a 	callr	r2
  80e314:	00000106 	br	80e31c <close+0x78>
  80e318:	0005883a 	mov	r2,zero
  80e31c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e320:	e13fff17 	ldw	r4,-4(fp)
  80e324:	080eb380 	call	80eb38 <alt_release_fd>
    if (rval < 0)
  80e328:	e0bffe17 	ldw	r2,-8(fp)
  80e32c:	1000070e 	bge	r2,zero,80e34c <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80e330:	080e2680 	call	80e268 <alt_get_errno>
  80e334:	1007883a 	mov	r3,r2
  80e338:	e0bffe17 	ldw	r2,-8(fp)
  80e33c:	0085c83a 	sub	r2,zero,r2
  80e340:	18800015 	stw	r2,0(r3)
      return -1;
  80e344:	00bfffc4 	movi	r2,-1
  80e348:	00000706 	br	80e368 <close+0xc4>
    }
    return 0;
  80e34c:	0005883a 	mov	r2,zero
  80e350:	00000506 	br	80e368 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e354:	080e2680 	call	80e268 <alt_get_errno>
  80e358:	1007883a 	mov	r3,r2
  80e35c:	00801444 	movi	r2,81
  80e360:	18800015 	stw	r2,0(r3)
    return -1;
  80e364:	00bfffc4 	movi	r2,-1
  }
}
  80e368:	e037883a 	mov	sp,fp
  80e36c:	dfc00117 	ldw	ra,4(sp)
  80e370:	df000017 	ldw	fp,0(sp)
  80e374:	dec00204 	addi	sp,sp,8
  80e378:	f800283a 	ret

0080e37c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e37c:	defffc04 	addi	sp,sp,-16
  80e380:	df000315 	stw	fp,12(sp)
  80e384:	df000304 	addi	fp,sp,12
  80e388:	e13ffd15 	stw	r4,-12(fp)
  80e38c:	e17ffe15 	stw	r5,-8(fp)
  80e390:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80e394:	e0bfff17 	ldw	r2,-4(fp)
}
  80e398:	e037883a 	mov	sp,fp
  80e39c:	df000017 	ldw	fp,0(sp)
  80e3a0:	dec00104 	addi	sp,sp,4
  80e3a4:	f800283a 	ret

0080e3a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e3a8:	defffe04 	addi	sp,sp,-8
  80e3ac:	dfc00115 	stw	ra,4(sp)
  80e3b0:	df000015 	stw	fp,0(sp)
  80e3b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e3b8:	d0a03b17 	ldw	r2,-32532(gp)
  80e3bc:	10000326 	beq	r2,zero,80e3cc <alt_get_errno+0x24>
  80e3c0:	d0a03b17 	ldw	r2,-32532(gp)
  80e3c4:	103ee83a 	callr	r2
  80e3c8:	00000106 	br	80e3d0 <alt_get_errno+0x28>
  80e3cc:	d0a07e04 	addi	r2,gp,-32264
}
  80e3d0:	e037883a 	mov	sp,fp
  80e3d4:	dfc00117 	ldw	ra,4(sp)
  80e3d8:	df000017 	ldw	fp,0(sp)
  80e3dc:	dec00204 	addi	sp,sp,8
  80e3e0:	f800283a 	ret

0080e3e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e3e4:	defffb04 	addi	sp,sp,-20
  80e3e8:	dfc00415 	stw	ra,16(sp)
  80e3ec:	df000315 	stw	fp,12(sp)
  80e3f0:	df000304 	addi	fp,sp,12
  80e3f4:	e13ffe15 	stw	r4,-8(fp)
  80e3f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e3fc:	e0bffe17 	ldw	r2,-8(fp)
  80e400:	10000816 	blt	r2,zero,80e424 <fstat+0x40>
  80e404:	01400304 	movi	r5,12
  80e408:	e13ffe17 	ldw	r4,-8(fp)
  80e40c:	080b99c0 	call	80b99c <__mulsi3>
  80e410:	1007883a 	mov	r3,r2
  80e414:	008020b4 	movhi	r2,130
  80e418:	10b2dd04 	addi	r2,r2,-13452
  80e41c:	1885883a 	add	r2,r3,r2
  80e420:	00000106 	br	80e428 <fstat+0x44>
  80e424:	0005883a 	mov	r2,zero
  80e428:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80e42c:	e0bffd17 	ldw	r2,-12(fp)
  80e430:	10001026 	beq	r2,zero,80e474 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e434:	e0bffd17 	ldw	r2,-12(fp)
  80e438:	10800017 	ldw	r2,0(r2)
  80e43c:	10800817 	ldw	r2,32(r2)
  80e440:	10000726 	beq	r2,zero,80e460 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80e444:	e0bffd17 	ldw	r2,-12(fp)
  80e448:	10800017 	ldw	r2,0(r2)
  80e44c:	10800817 	ldw	r2,32(r2)
  80e450:	e17fff17 	ldw	r5,-4(fp)
  80e454:	e13ffd17 	ldw	r4,-12(fp)
  80e458:	103ee83a 	callr	r2
  80e45c:	00000a06 	br	80e488 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e460:	e0bfff17 	ldw	r2,-4(fp)
  80e464:	00c80004 	movi	r3,8192
  80e468:	10c00115 	stw	r3,4(r2)
      return 0;
  80e46c:	0005883a 	mov	r2,zero
  80e470:	00000506 	br	80e488 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e474:	080e3a80 	call	80e3a8 <alt_get_errno>
  80e478:	1007883a 	mov	r3,r2
  80e47c:	00801444 	movi	r2,81
  80e480:	18800015 	stw	r2,0(r3)
    return -1;
  80e484:	00bfffc4 	movi	r2,-1
  }
}
  80e488:	e037883a 	mov	sp,fp
  80e48c:	dfc00117 	ldw	ra,4(sp)
  80e490:	df000017 	ldw	fp,0(sp)
  80e494:	dec00204 	addi	sp,sp,8
  80e498:	f800283a 	ret

0080e49c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e49c:	defff904 	addi	sp,sp,-28
  80e4a0:	dfc00615 	stw	ra,24(sp)
  80e4a4:	df000515 	stw	fp,20(sp)
  80e4a8:	df000504 	addi	fp,sp,20
  80e4ac:	e13ffc15 	stw	r4,-16(fp)
  80e4b0:	e17ffd15 	stw	r5,-12(fp)
  80e4b4:	e1bffe15 	stw	r6,-8(fp)
  80e4b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e4bc:	e0800217 	ldw	r2,8(fp)
  80e4c0:	d8800015 	stw	r2,0(sp)
  80e4c4:	e1ffff17 	ldw	r7,-4(fp)
  80e4c8:	e1bffe17 	ldw	r6,-8(fp)
  80e4cc:	e17ffd17 	ldw	r5,-12(fp)
  80e4d0:	e13ffc17 	ldw	r4,-16(fp)
  80e4d4:	080e64c0 	call	80e64c <alt_iic_isr_register>
}  
  80e4d8:	e037883a 	mov	sp,fp
  80e4dc:	dfc00117 	ldw	ra,4(sp)
  80e4e0:	df000017 	ldw	fp,0(sp)
  80e4e4:	dec00204 	addi	sp,sp,8
  80e4e8:	f800283a 	ret

0080e4ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e4ec:	defff904 	addi	sp,sp,-28
  80e4f0:	df000615 	stw	fp,24(sp)
  80e4f4:	df000604 	addi	fp,sp,24
  80e4f8:	e13ffe15 	stw	r4,-8(fp)
  80e4fc:	e17fff15 	stw	r5,-4(fp)
  80e500:	e0bfff17 	ldw	r2,-4(fp)
  80e504:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e508:	0005303a 	rdctl	r2,status
  80e50c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e510:	e0fffb17 	ldw	r3,-20(fp)
  80e514:	00bfff84 	movi	r2,-2
  80e518:	1884703a 	and	r2,r3,r2
  80e51c:	1001703a 	wrctl	status,r2
  
  return context;
  80e520:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e524:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80e528:	00c00044 	movi	r3,1
  80e52c:	e0bffa17 	ldw	r2,-24(fp)
  80e530:	1884983a 	sll	r2,r3,r2
  80e534:	1007883a 	mov	r3,r2
  80e538:	d0a08317 	ldw	r2,-32244(gp)
  80e53c:	1884b03a 	or	r2,r3,r2
  80e540:	d0a08315 	stw	r2,-32244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e544:	d0a08317 	ldw	r2,-32244(gp)
  80e548:	100170fa 	wrctl	ienable,r2
  80e54c:	e0bffc17 	ldw	r2,-16(fp)
  80e550:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e554:	e0bffd17 	ldw	r2,-12(fp)
  80e558:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e55c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80e560:	0001883a 	nop
}
  80e564:	e037883a 	mov	sp,fp
  80e568:	df000017 	ldw	fp,0(sp)
  80e56c:	dec00104 	addi	sp,sp,4
  80e570:	f800283a 	ret

0080e574 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e574:	defff904 	addi	sp,sp,-28
  80e578:	df000615 	stw	fp,24(sp)
  80e57c:	df000604 	addi	fp,sp,24
  80e580:	e13ffe15 	stw	r4,-8(fp)
  80e584:	e17fff15 	stw	r5,-4(fp)
  80e588:	e0bfff17 	ldw	r2,-4(fp)
  80e58c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e590:	0005303a 	rdctl	r2,status
  80e594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e598:	e0fffb17 	ldw	r3,-20(fp)
  80e59c:	00bfff84 	movi	r2,-2
  80e5a0:	1884703a 	and	r2,r3,r2
  80e5a4:	1001703a 	wrctl	status,r2
  
  return context;
  80e5a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e5ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80e5b0:	00c00044 	movi	r3,1
  80e5b4:	e0bffa17 	ldw	r2,-24(fp)
  80e5b8:	1884983a 	sll	r2,r3,r2
  80e5bc:	0084303a 	nor	r2,zero,r2
  80e5c0:	1007883a 	mov	r3,r2
  80e5c4:	d0a08317 	ldw	r2,-32244(gp)
  80e5c8:	1884703a 	and	r2,r3,r2
  80e5cc:	d0a08315 	stw	r2,-32244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e5d0:	d0a08317 	ldw	r2,-32244(gp)
  80e5d4:	100170fa 	wrctl	ienable,r2
  80e5d8:	e0bffc17 	ldw	r2,-16(fp)
  80e5dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e5e0:	e0bffd17 	ldw	r2,-12(fp)
  80e5e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e5e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80e5ec:	0001883a 	nop
}
  80e5f0:	e037883a 	mov	sp,fp
  80e5f4:	df000017 	ldw	fp,0(sp)
  80e5f8:	dec00104 	addi	sp,sp,4
  80e5fc:	f800283a 	ret

0080e600 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e600:	defffc04 	addi	sp,sp,-16
  80e604:	df000315 	stw	fp,12(sp)
  80e608:	df000304 	addi	fp,sp,12
  80e60c:	e13ffe15 	stw	r4,-8(fp)
  80e610:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e614:	000530fa 	rdctl	r2,ienable
  80e618:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e61c:	00c00044 	movi	r3,1
  80e620:	e0bfff17 	ldw	r2,-4(fp)
  80e624:	1884983a 	sll	r2,r3,r2
  80e628:	1007883a 	mov	r3,r2
  80e62c:	e0bffd17 	ldw	r2,-12(fp)
  80e630:	1884703a 	and	r2,r3,r2
  80e634:	1004c03a 	cmpne	r2,r2,zero
  80e638:	10803fcc 	andi	r2,r2,255
}
  80e63c:	e037883a 	mov	sp,fp
  80e640:	df000017 	ldw	fp,0(sp)
  80e644:	dec00104 	addi	sp,sp,4
  80e648:	f800283a 	ret

0080e64c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e64c:	defff504 	addi	sp,sp,-44
  80e650:	dfc00a15 	stw	ra,40(sp)
  80e654:	df000915 	stw	fp,36(sp)
  80e658:	df000904 	addi	fp,sp,36
  80e65c:	e13ffc15 	stw	r4,-16(fp)
  80e660:	e17ffd15 	stw	r5,-12(fp)
  80e664:	e1bffe15 	stw	r6,-8(fp)
  80e668:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80e66c:	00bffa84 	movi	r2,-22
  80e670:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e674:	e0bffd17 	ldw	r2,-12(fp)
  80e678:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e67c:	e0bff817 	ldw	r2,-32(fp)
  80e680:	10800808 	cmpgei	r2,r2,32
  80e684:	1000271e 	bne	r2,zero,80e724 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e688:	0005303a 	rdctl	r2,status
  80e68c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e690:	e0fffb17 	ldw	r3,-20(fp)
  80e694:	00bfff84 	movi	r2,-2
  80e698:	1884703a 	and	r2,r3,r2
  80e69c:	1001703a 	wrctl	status,r2
  
  return context;
  80e6a0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e6a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80e6a8:	008020b4 	movhi	r2,130
  80e6ac:	1094b504 	addi	r2,r2,21204
  80e6b0:	e0fff817 	ldw	r3,-32(fp)
  80e6b4:	180690fa 	slli	r3,r3,3
  80e6b8:	10c5883a 	add	r2,r2,r3
  80e6bc:	e0fffe17 	ldw	r3,-8(fp)
  80e6c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80e6c4:	008020b4 	movhi	r2,130
  80e6c8:	1094b504 	addi	r2,r2,21204
  80e6cc:	e0fff817 	ldw	r3,-32(fp)
  80e6d0:	180690fa 	slli	r3,r3,3
  80e6d4:	10c5883a 	add	r2,r2,r3
  80e6d8:	10800104 	addi	r2,r2,4
  80e6dc:	e0ffff17 	ldw	r3,-4(fp)
  80e6e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e6e4:	e0bffe17 	ldw	r2,-8(fp)
  80e6e8:	10000526 	beq	r2,zero,80e700 <alt_iic_isr_register+0xb4>
  80e6ec:	e0bff817 	ldw	r2,-32(fp)
  80e6f0:	100b883a 	mov	r5,r2
  80e6f4:	e13ffc17 	ldw	r4,-16(fp)
  80e6f8:	080e4ec0 	call	80e4ec <alt_ic_irq_enable>
  80e6fc:	00000406 	br	80e710 <alt_iic_isr_register+0xc4>
  80e700:	e0bff817 	ldw	r2,-32(fp)
  80e704:	100b883a 	mov	r5,r2
  80e708:	e13ffc17 	ldw	r4,-16(fp)
  80e70c:	080e5740 	call	80e574 <alt_ic_irq_disable>
  80e710:	e0bff715 	stw	r2,-36(fp)
  80e714:	e0bffa17 	ldw	r2,-24(fp)
  80e718:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e71c:	e0bff917 	ldw	r2,-28(fp)
  80e720:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e724:	e0bff717 	ldw	r2,-36(fp)
}
  80e728:	e037883a 	mov	sp,fp
  80e72c:	dfc00117 	ldw	ra,4(sp)
  80e730:	df000017 	ldw	fp,0(sp)
  80e734:	dec00204 	addi	sp,sp,8
  80e738:	f800283a 	ret

0080e73c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e73c:	defffe04 	addi	sp,sp,-8
  80e740:	dfc00115 	stw	ra,4(sp)
  80e744:	df000015 	stw	fp,0(sp)
  80e748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e74c:	d0a03b17 	ldw	r2,-32532(gp)
  80e750:	10000326 	beq	r2,zero,80e760 <alt_get_errno+0x24>
  80e754:	d0a03b17 	ldw	r2,-32532(gp)
  80e758:	103ee83a 	callr	r2
  80e75c:	00000106 	br	80e764 <alt_get_errno+0x28>
  80e760:	d0a07e04 	addi	r2,gp,-32264
}
  80e764:	e037883a 	mov	sp,fp
  80e768:	dfc00117 	ldw	ra,4(sp)
  80e76c:	df000017 	ldw	fp,0(sp)
  80e770:	dec00204 	addi	sp,sp,8
  80e774:	f800283a 	ret

0080e778 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e778:	deffed04 	addi	sp,sp,-76
  80e77c:	dfc01215 	stw	ra,72(sp)
  80e780:	df001115 	stw	fp,68(sp)
  80e784:	df001104 	addi	fp,sp,68
  80e788:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e78c:	e0bfff17 	ldw	r2,-4(fp)
  80e790:	10000816 	blt	r2,zero,80e7b4 <isatty+0x3c>
  80e794:	01400304 	movi	r5,12
  80e798:	e13fff17 	ldw	r4,-4(fp)
  80e79c:	080b99c0 	call	80b99c <__mulsi3>
  80e7a0:	1007883a 	mov	r3,r2
  80e7a4:	008020b4 	movhi	r2,130
  80e7a8:	10b2dd04 	addi	r2,r2,-13452
  80e7ac:	1885883a 	add	r2,r3,r2
  80e7b0:	00000106 	br	80e7b8 <isatty+0x40>
  80e7b4:	0005883a 	mov	r2,zero
  80e7b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80e7bc:	e0bfef17 	ldw	r2,-68(fp)
  80e7c0:	10000e26 	beq	r2,zero,80e7fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e7c4:	e0bfef17 	ldw	r2,-68(fp)
  80e7c8:	10800017 	ldw	r2,0(r2)
  80e7cc:	10800817 	ldw	r2,32(r2)
  80e7d0:	1000021e 	bne	r2,zero,80e7dc <isatty+0x64>
    {
      return 1;
  80e7d4:	00800044 	movi	r2,1
  80e7d8:	00000d06 	br	80e810 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e7dc:	e0bff004 	addi	r2,fp,-64
  80e7e0:	100b883a 	mov	r5,r2
  80e7e4:	e13fff17 	ldw	r4,-4(fp)
  80e7e8:	080e3e40 	call	80e3e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e7ec:	e0bff117 	ldw	r2,-60(fp)
  80e7f0:	10880020 	cmpeqi	r2,r2,8192
  80e7f4:	10803fcc 	andi	r2,r2,255
  80e7f8:	00000506 	br	80e810 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e7fc:	080e73c0 	call	80e73c <alt_get_errno>
  80e800:	1007883a 	mov	r3,r2
  80e804:	00801444 	movi	r2,81
  80e808:	18800015 	stw	r2,0(r3)
    return 0;
  80e80c:	0005883a 	mov	r2,zero
  }
}
  80e810:	e037883a 	mov	sp,fp
  80e814:	dfc00117 	ldw	ra,4(sp)
  80e818:	df000017 	ldw	fp,0(sp)
  80e81c:	dec00204 	addi	sp,sp,8
  80e820:	f800283a 	ret

0080e824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e824:	defffe04 	addi	sp,sp,-8
  80e828:	dfc00115 	stw	ra,4(sp)
  80e82c:	df000015 	stw	fp,0(sp)
  80e830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e834:	d0a03b17 	ldw	r2,-32532(gp)
  80e838:	10000326 	beq	r2,zero,80e848 <alt_get_errno+0x24>
  80e83c:	d0a03b17 	ldw	r2,-32532(gp)
  80e840:	103ee83a 	callr	r2
  80e844:	00000106 	br	80e84c <alt_get_errno+0x28>
  80e848:	d0a07e04 	addi	r2,gp,-32264
}
  80e84c:	e037883a 	mov	sp,fp
  80e850:	dfc00117 	ldw	ra,4(sp)
  80e854:	df000017 	ldw	fp,0(sp)
  80e858:	dec00204 	addi	sp,sp,8
  80e85c:	f800283a 	ret

0080e860 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e860:	defff904 	addi	sp,sp,-28
  80e864:	dfc00615 	stw	ra,24(sp)
  80e868:	df000515 	stw	fp,20(sp)
  80e86c:	df000504 	addi	fp,sp,20
  80e870:	e13ffd15 	stw	r4,-12(fp)
  80e874:	e17ffe15 	stw	r5,-8(fp)
  80e878:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e87c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e880:	e0bffd17 	ldw	r2,-12(fp)
  80e884:	10000816 	blt	r2,zero,80e8a8 <lseek+0x48>
  80e888:	01400304 	movi	r5,12
  80e88c:	e13ffd17 	ldw	r4,-12(fp)
  80e890:	080b99c0 	call	80b99c <__mulsi3>
  80e894:	1007883a 	mov	r3,r2
  80e898:	008020b4 	movhi	r2,130
  80e89c:	10b2dd04 	addi	r2,r2,-13452
  80e8a0:	1885883a 	add	r2,r3,r2
  80e8a4:	00000106 	br	80e8ac <lseek+0x4c>
  80e8a8:	0005883a 	mov	r2,zero
  80e8ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80e8b0:	e0bffc17 	ldw	r2,-16(fp)
  80e8b4:	10001026 	beq	r2,zero,80e8f8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e8b8:	e0bffc17 	ldw	r2,-16(fp)
  80e8bc:	10800017 	ldw	r2,0(r2)
  80e8c0:	10800717 	ldw	r2,28(r2)
  80e8c4:	10000926 	beq	r2,zero,80e8ec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e8c8:	e0bffc17 	ldw	r2,-16(fp)
  80e8cc:	10800017 	ldw	r2,0(r2)
  80e8d0:	10800717 	ldw	r2,28(r2)
  80e8d4:	e1bfff17 	ldw	r6,-4(fp)
  80e8d8:	e17ffe17 	ldw	r5,-8(fp)
  80e8dc:	e13ffc17 	ldw	r4,-16(fp)
  80e8e0:	103ee83a 	callr	r2
  80e8e4:	e0bffb15 	stw	r2,-20(fp)
  80e8e8:	00000506 	br	80e900 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e8ec:	00bfde84 	movi	r2,-134
  80e8f0:	e0bffb15 	stw	r2,-20(fp)
  80e8f4:	00000206 	br	80e900 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e8f8:	00bfebc4 	movi	r2,-81
  80e8fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80e900:	e0bffb17 	ldw	r2,-20(fp)
  80e904:	1000070e 	bge	r2,zero,80e924 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  80e908:	080e8240 	call	80e824 <alt_get_errno>
  80e90c:	1007883a 	mov	r3,r2
  80e910:	e0bffb17 	ldw	r2,-20(fp)
  80e914:	0085c83a 	sub	r2,zero,r2
  80e918:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e91c:	00bfffc4 	movi	r2,-1
  80e920:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80e924:	e0bffb17 	ldw	r2,-20(fp)
}
  80e928:	e037883a 	mov	sp,fp
  80e92c:	dfc00117 	ldw	ra,4(sp)
  80e930:	df000017 	ldw	fp,0(sp)
  80e934:	dec00204 	addi	sp,sp,8
  80e938:	f800283a 	ret

0080e93c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e93c:	defff904 	addi	sp,sp,-28
  80e940:	dfc00615 	stw	ra,24(sp)
  80e944:	df000515 	stw	fp,20(sp)
  80e948:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e94c:	0009883a 	mov	r4,zero
  80e950:	08168e40 	call	8168e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80e954:	080f9280 	call	80f928 <OSInit>
  80e958:	01000044 	movi	r4,1
  80e95c:	08142840 	call	814284 <OSSemCreate>
  80e960:	d0a08815 	stw	r2,-32224(gp)
  80e964:	01000044 	movi	r4,1
  80e968:	08142840 	call	814284 <OSSemCreate>
  80e96c:	d0a08a15 	stw	r2,-32216(gp)
  80e970:	d0a08204 	addi	r2,gp,-32248
  80e974:	e0bffc15 	stw	r2,-16(fp)
  80e978:	00800044 	movi	r2,1
  80e97c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80e980:	e0bffd0b 	ldhu	r2,-12(fp)
  80e984:	1009883a 	mov	r4,r2
  80e988:	08142840 	call	814284 <OSSemCreate>
  80e98c:	1007883a 	mov	r3,r2
  80e990:	e0bffc17 	ldw	r2,-16(fp)
  80e994:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e998:	081691c0 	call	81691c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e99c:	018020b4 	movhi	r6,130
  80e9a0:	31b04404 	addi	r6,r6,-16112
  80e9a4:	014020b4 	movhi	r5,130
  80e9a8:	29704404 	addi	r5,r5,-16112
  80e9ac:	010020b4 	movhi	r4,130
  80e9b0:	21304404 	addi	r4,r4,-16112
  80e9b4:	081aa880 	call	81aa88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e9b8:	081a70c0 	call	81a70c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e9bc:	010020b4 	movhi	r4,130
  80e9c0:	2129db04 	addi	r4,r4,-22676
  80e9c4:	081b7300 	call	81b730 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e9c8:	d0a08417 	ldw	r2,-32240(gp)
  80e9cc:	d0e08517 	ldw	r3,-32236(gp)
  80e9d0:	d1208617 	ldw	r4,-32232(gp)
  80e9d4:	200d883a 	mov	r6,r4
  80e9d8:	180b883a 	mov	r5,r3
  80e9dc:	1009883a 	mov	r4,r2
  80e9e0:	0800e300 	call	800e30 <main>
  80e9e4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  80e9e8:	01000044 	movi	r4,1
  80e9ec:	080e2a40 	call	80e2a4 <close>
  exit (result);
  80e9f0:	e13ffb17 	ldw	r4,-20(fp)
  80e9f4:	081b7440 	call	81b744 <exit>

0080e9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e9f8:	defffe04 	addi	sp,sp,-8
  80e9fc:	dfc00115 	stw	ra,4(sp)
  80ea00:	df000015 	stw	fp,0(sp)
  80ea04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ea08:	d0a03b17 	ldw	r2,-32532(gp)
  80ea0c:	10000326 	beq	r2,zero,80ea1c <alt_get_errno+0x24>
  80ea10:	d0a03b17 	ldw	r2,-32532(gp)
  80ea14:	103ee83a 	callr	r2
  80ea18:	00000106 	br	80ea20 <alt_get_errno+0x28>
  80ea1c:	d0a07e04 	addi	r2,gp,-32264
}
  80ea20:	e037883a 	mov	sp,fp
  80ea24:	dfc00117 	ldw	ra,4(sp)
  80ea28:	df000017 	ldw	fp,0(sp)
  80ea2c:	dec00204 	addi	sp,sp,8
  80ea30:	f800283a 	ret

0080ea34 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ea34:	defff904 	addi	sp,sp,-28
  80ea38:	dfc00615 	stw	ra,24(sp)
  80ea3c:	df000515 	stw	fp,20(sp)
  80ea40:	df000504 	addi	fp,sp,20
  80ea44:	e13ffd15 	stw	r4,-12(fp)
  80ea48:	e17ffe15 	stw	r5,-8(fp)
  80ea4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ea50:	e0bffd17 	ldw	r2,-12(fp)
  80ea54:	10000816 	blt	r2,zero,80ea78 <read+0x44>
  80ea58:	01400304 	movi	r5,12
  80ea5c:	e13ffd17 	ldw	r4,-12(fp)
  80ea60:	080b99c0 	call	80b99c <__mulsi3>
  80ea64:	1007883a 	mov	r3,r2
  80ea68:	008020b4 	movhi	r2,130
  80ea6c:	10b2dd04 	addi	r2,r2,-13452
  80ea70:	1885883a 	add	r2,r3,r2
  80ea74:	00000106 	br	80ea7c <read+0x48>
  80ea78:	0005883a 	mov	r2,zero
  80ea7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ea80:	e0bffb17 	ldw	r2,-20(fp)
  80ea84:	10002226 	beq	r2,zero,80eb10 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80ea88:	e0bffb17 	ldw	r2,-20(fp)
  80ea8c:	10800217 	ldw	r2,8(r2)
  80ea90:	108000cc 	andi	r2,r2,3
  80ea94:	10800060 	cmpeqi	r2,r2,1
  80ea98:	1000181e 	bne	r2,zero,80eafc <read+0xc8>
        (fd->dev->read))
  80ea9c:	e0bffb17 	ldw	r2,-20(fp)
  80eaa0:	10800017 	ldw	r2,0(r2)
  80eaa4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80eaa8:	10001426 	beq	r2,zero,80eafc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80eaac:	e0bffb17 	ldw	r2,-20(fp)
  80eab0:	10800017 	ldw	r2,0(r2)
  80eab4:	10800517 	ldw	r2,20(r2)
  80eab8:	e0ffff17 	ldw	r3,-4(fp)
  80eabc:	180d883a 	mov	r6,r3
  80eac0:	e17ffe17 	ldw	r5,-8(fp)
  80eac4:	e13ffb17 	ldw	r4,-20(fp)
  80eac8:	103ee83a 	callr	r2
  80eacc:	e0bffc15 	stw	r2,-16(fp)
  80ead0:	e0bffc17 	ldw	r2,-16(fp)
  80ead4:	1000070e 	bge	r2,zero,80eaf4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  80ead8:	080e9f80 	call	80e9f8 <alt_get_errno>
  80eadc:	1007883a 	mov	r3,r2
  80eae0:	e0bffc17 	ldw	r2,-16(fp)
  80eae4:	0085c83a 	sub	r2,zero,r2
  80eae8:	18800015 	stw	r2,0(r3)
          return -1;
  80eaec:	00bfffc4 	movi	r2,-1
  80eaf0:	00000c06 	br	80eb24 <read+0xf0>
        }
        return rval;
  80eaf4:	e0bffc17 	ldw	r2,-16(fp)
  80eaf8:	00000a06 	br	80eb24 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80eafc:	080e9f80 	call	80e9f8 <alt_get_errno>
  80eb00:	1007883a 	mov	r3,r2
  80eb04:	00800344 	movi	r2,13
  80eb08:	18800015 	stw	r2,0(r3)
  80eb0c:	00000406 	br	80eb20 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80eb10:	080e9f80 	call	80e9f8 <alt_get_errno>
  80eb14:	1007883a 	mov	r3,r2
  80eb18:	00801444 	movi	r2,81
  80eb1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80eb20:	00bfffc4 	movi	r2,-1
}
  80eb24:	e037883a 	mov	sp,fp
  80eb28:	dfc00117 	ldw	ra,4(sp)
  80eb2c:	df000017 	ldw	fp,0(sp)
  80eb30:	dec00204 	addi	sp,sp,8
  80eb34:	f800283a 	ret

0080eb38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80eb38:	defffc04 	addi	sp,sp,-16
  80eb3c:	dfc00315 	stw	ra,12(sp)
  80eb40:	df000215 	stw	fp,8(sp)
  80eb44:	dc000115 	stw	r16,4(sp)
  80eb48:	df000204 	addi	fp,sp,8
  80eb4c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80eb50:	e0bffe17 	ldw	r2,-8(fp)
  80eb54:	108000d0 	cmplti	r2,r2,3
  80eb58:	1000111e 	bne	r2,zero,80eba0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80eb5c:	040020b4 	movhi	r16,130
  80eb60:	8432dd04 	addi	r16,r16,-13452
  80eb64:	e0bffe17 	ldw	r2,-8(fp)
  80eb68:	01400304 	movi	r5,12
  80eb6c:	1009883a 	mov	r4,r2
  80eb70:	080b99c0 	call	80b99c <__mulsi3>
  80eb74:	8085883a 	add	r2,r16,r2
  80eb78:	10800204 	addi	r2,r2,8
  80eb7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80eb80:	040020b4 	movhi	r16,130
  80eb84:	8432dd04 	addi	r16,r16,-13452
  80eb88:	e0bffe17 	ldw	r2,-8(fp)
  80eb8c:	01400304 	movi	r5,12
  80eb90:	1009883a 	mov	r4,r2
  80eb94:	080b99c0 	call	80b99c <__mulsi3>
  80eb98:	8085883a 	add	r2,r16,r2
  80eb9c:	10000015 	stw	zero,0(r2)
  }
}
  80eba0:	0001883a 	nop
  80eba4:	e6ffff04 	addi	sp,fp,-4
  80eba8:	dfc00217 	ldw	ra,8(sp)
  80ebac:	df000117 	ldw	fp,4(sp)
  80ebb0:	dc000017 	ldw	r16,0(sp)
  80ebb4:	dec00304 	addi	sp,sp,12
  80ebb8:	f800283a 	ret

0080ebbc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ebbc:	defff904 	addi	sp,sp,-28
  80ebc0:	df000615 	stw	fp,24(sp)
  80ebc4:	df000604 	addi	fp,sp,24
  80ebc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ebcc:	0005303a 	rdctl	r2,status
  80ebd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ebd4:	e0fffe17 	ldw	r3,-8(fp)
  80ebd8:	00bfff84 	movi	r2,-2
  80ebdc:	1884703a 	and	r2,r3,r2
  80ebe0:	1001703a 	wrctl	status,r2
  
  return context;
  80ebe4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80ebe8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80ebec:	d0a03d17 	ldw	r2,-32524(gp)
  80ebf0:	10c000c4 	addi	r3,r2,3
  80ebf4:	00bfff04 	movi	r2,-4
  80ebf8:	1884703a 	and	r2,r3,r2
  80ebfc:	d0a03d15 	stw	r2,-32524(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80ec00:	d0e03d17 	ldw	r3,-32524(gp)
  80ec04:	e0bfff17 	ldw	r2,-4(fp)
  80ec08:	1887883a 	add	r3,r3,r2
  80ec0c:	00804034 	movhi	r2,256
  80ec10:	10800004 	addi	r2,r2,0
  80ec14:	10c0062e 	bgeu	r2,r3,80ec30 <sbrk+0x74>
  80ec18:	e0bffb17 	ldw	r2,-20(fp)
  80ec1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec20:	e0bffa17 	ldw	r2,-24(fp)
  80ec24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ec28:	00bfffc4 	movi	r2,-1
  80ec2c:	00000b06 	br	80ec5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80ec30:	d0a03d17 	ldw	r2,-32524(gp)
  80ec34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80ec38:	d0e03d17 	ldw	r3,-32524(gp)
  80ec3c:	e0bfff17 	ldw	r2,-4(fp)
  80ec40:	1885883a 	add	r2,r3,r2
  80ec44:	d0a03d15 	stw	r2,-32524(gp)
  80ec48:	e0bffb17 	ldw	r2,-20(fp)
  80ec4c:	e0bffc15 	stw	r2,-16(fp)
  80ec50:	e0bffc17 	ldw	r2,-16(fp)
  80ec54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ec58:	e0bffd17 	ldw	r2,-12(fp)
} 
  80ec5c:	e037883a 	mov	sp,fp
  80ec60:	df000017 	ldw	fp,0(sp)
  80ec64:	dec00104 	addi	sp,sp,4
  80ec68:	f800283a 	ret

0080ec6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ec6c:	defffe04 	addi	sp,sp,-8
  80ec70:	dfc00115 	stw	ra,4(sp)
  80ec74:	df000015 	stw	fp,0(sp)
  80ec78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ec7c:	d0a03b17 	ldw	r2,-32532(gp)
  80ec80:	10000326 	beq	r2,zero,80ec90 <alt_get_errno+0x24>
  80ec84:	d0a03b17 	ldw	r2,-32532(gp)
  80ec88:	103ee83a 	callr	r2
  80ec8c:	00000106 	br	80ec94 <alt_get_errno+0x28>
  80ec90:	d0a07e04 	addi	r2,gp,-32264
}
  80ec94:	e037883a 	mov	sp,fp
  80ec98:	dfc00117 	ldw	ra,4(sp)
  80ec9c:	df000017 	ldw	fp,0(sp)
  80eca0:	dec00204 	addi	sp,sp,8
  80eca4:	f800283a 	ret

0080eca8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80eca8:	defff904 	addi	sp,sp,-28
  80ecac:	dfc00615 	stw	ra,24(sp)
  80ecb0:	df000515 	stw	fp,20(sp)
  80ecb4:	df000504 	addi	fp,sp,20
  80ecb8:	e13ffd15 	stw	r4,-12(fp)
  80ecbc:	e17ffe15 	stw	r5,-8(fp)
  80ecc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ecc4:	e0bffd17 	ldw	r2,-12(fp)
  80ecc8:	10000816 	blt	r2,zero,80ecec <write+0x44>
  80eccc:	01400304 	movi	r5,12
  80ecd0:	e13ffd17 	ldw	r4,-12(fp)
  80ecd4:	080b99c0 	call	80b99c <__mulsi3>
  80ecd8:	1007883a 	mov	r3,r2
  80ecdc:	008020b4 	movhi	r2,130
  80ece0:	10b2dd04 	addi	r2,r2,-13452
  80ece4:	1885883a 	add	r2,r3,r2
  80ece8:	00000106 	br	80ecf0 <write+0x48>
  80ecec:	0005883a 	mov	r2,zero
  80ecf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ecf4:	e0bffb17 	ldw	r2,-20(fp)
  80ecf8:	10002126 	beq	r2,zero,80ed80 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ecfc:	e0bffb17 	ldw	r2,-20(fp)
  80ed00:	10800217 	ldw	r2,8(r2)
  80ed04:	108000cc 	andi	r2,r2,3
  80ed08:	10001826 	beq	r2,zero,80ed6c <write+0xc4>
  80ed0c:	e0bffb17 	ldw	r2,-20(fp)
  80ed10:	10800017 	ldw	r2,0(r2)
  80ed14:	10800617 	ldw	r2,24(r2)
  80ed18:	10001426 	beq	r2,zero,80ed6c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ed1c:	e0bffb17 	ldw	r2,-20(fp)
  80ed20:	10800017 	ldw	r2,0(r2)
  80ed24:	10800617 	ldw	r2,24(r2)
  80ed28:	e0ffff17 	ldw	r3,-4(fp)
  80ed2c:	180d883a 	mov	r6,r3
  80ed30:	e17ffe17 	ldw	r5,-8(fp)
  80ed34:	e13ffb17 	ldw	r4,-20(fp)
  80ed38:	103ee83a 	callr	r2
  80ed3c:	e0bffc15 	stw	r2,-16(fp)
  80ed40:	e0bffc17 	ldw	r2,-16(fp)
  80ed44:	1000070e 	bge	r2,zero,80ed64 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  80ed48:	080ec6c0 	call	80ec6c <alt_get_errno>
  80ed4c:	1007883a 	mov	r3,r2
  80ed50:	e0bffc17 	ldw	r2,-16(fp)
  80ed54:	0085c83a 	sub	r2,zero,r2
  80ed58:	18800015 	stw	r2,0(r3)
        return -1;
  80ed5c:	00bfffc4 	movi	r2,-1
  80ed60:	00000c06 	br	80ed94 <write+0xec>
      }
      return rval;
  80ed64:	e0bffc17 	ldw	r2,-16(fp)
  80ed68:	00000a06 	br	80ed94 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ed6c:	080ec6c0 	call	80ec6c <alt_get_errno>
  80ed70:	1007883a 	mov	r3,r2
  80ed74:	00800344 	movi	r2,13
  80ed78:	18800015 	stw	r2,0(r3)
  80ed7c:	00000406 	br	80ed90 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ed80:	080ec6c0 	call	80ec6c <alt_get_errno>
  80ed84:	1007883a 	mov	r3,r2
  80ed88:	00801444 	movi	r2,81
  80ed8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ed90:	00bfffc4 	movi	r2,-1
}
  80ed94:	e037883a 	mov	sp,fp
  80ed98:	dfc00117 	ldw	ra,4(sp)
  80ed9c:	df000017 	ldw	fp,0(sp)
  80eda0:	dec00204 	addi	sp,sp,8
  80eda4:	f800283a 	ret

0080eda8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80eda8:	deffdf04 	addi	sp,sp,-132
  80edac:	dfc02015 	stw	ra,128(sp)
  80edb0:	df001f15 	stw	fp,124(sp)
  80edb4:	df001f04 	addi	fp,sp,124
  80edb8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80edbc:	e0bfe204 	addi	r2,fp,-120
  80edc0:	100b883a 	mov	r5,r2
  80edc4:	01003fc4 	movi	r4,255
  80edc8:	081620c0 	call	81620c <OSTaskQuery>
  80edcc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80edd0:	e0bffe83 	ldbu	r2,-6(fp)
  80edd4:	10803fcc 	andi	r2,r2,255
  80edd8:	10001e1e 	bne	r2,zero,80ee54 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  80eddc:	e0bfee83 	ldbu	r2,-70(fp)
  80ede0:	10803fcc 	andi	r2,r2,255
  80ede4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80ede8:	d0a08817 	ldw	r2,-32224(gp)
  80edec:	e0fffd04 	addi	r3,fp,-12
  80edf0:	180b883a 	mov	r5,r3
  80edf4:	1009883a 	mov	r4,r2
  80edf8:	0814a240 	call	814a24 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80edfc:	e0bffe43 	ldbu	r2,-7(fp)
  80ee00:	10803fcc 	andi	r2,r2,255
  80ee04:	10000726 	beq	r2,zero,80ee24 <__env_lock+0x7c>
  80ee08:	d0a03e17 	ldw	r2,-32520(gp)
  80ee0c:	e0ffe117 	ldw	r3,-124(fp)
  80ee10:	1880041e 	bne	r3,r2,80ee24 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  80ee14:	d0a08717 	ldw	r2,-32228(gp)
  80ee18:	10800044 	addi	r2,r2,1
  80ee1c:	d0a08715 	stw	r2,-32228(gp)
  80ee20:	00000a06 	br	80ee4c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80ee24:	d0a08817 	ldw	r2,-32224(gp)
  80ee28:	e0fffe84 	addi	r3,fp,-6
  80ee2c:	180d883a 	mov	r6,r3
  80ee30:	000b883a 	mov	r5,zero
  80ee34:	1009883a 	mov	r4,r2
  80ee38:	081459c0 	call	81459c <OSSemPend>
    locks  = 1;
  80ee3c:	00800044 	movi	r2,1
  80ee40:	d0a08715 	stw	r2,-32228(gp)
    lockid = id;
  80ee44:	e0bfe117 	ldw	r2,-124(fp)
  80ee48:	d0a03e15 	stw	r2,-32520(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  80ee4c:	0001883a 	nop
  80ee50:	00000106 	br	80ee58 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  80ee54:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80ee58:	e037883a 	mov	sp,fp
  80ee5c:	dfc00117 	ldw	ra,4(sp)
  80ee60:	df000017 	ldw	fp,0(sp)
  80ee64:	dec00204 	addi	sp,sp,8
  80ee68:	f800283a 	ret

0080ee6c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80ee6c:	defffd04 	addi	sp,sp,-12
  80ee70:	dfc00215 	stw	ra,8(sp)
  80ee74:	df000115 	stw	fp,4(sp)
  80ee78:	df000104 	addi	fp,sp,4
  80ee7c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80ee80:	d0a08717 	ldw	r2,-32228(gp)
  80ee84:	10000b26 	beq	r2,zero,80eeb4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80ee88:	d0a08717 	ldw	r2,-32228(gp)
  80ee8c:	10bfffc4 	addi	r2,r2,-1
  80ee90:	d0a08715 	stw	r2,-32228(gp)
  80ee94:	d0a08717 	ldw	r2,-32228(gp)
  80ee98:	1000071e 	bne	r2,zero,80eeb8 <__env_unlock+0x4c>
  {
    lockid = -1;
  80ee9c:	00bfffc4 	movi	r2,-1
  80eea0:	d0a03e15 	stw	r2,-32520(gp)
    OSSemPost( alt_envsem );
  80eea4:	d0a08817 	ldw	r2,-32224(gp)
  80eea8:	1009883a 	mov	r4,r2
  80eeac:	08149140 	call	814914 <OSSemPost>
  80eeb0:	00000106 	br	80eeb8 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  80eeb4:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80eeb8:	e037883a 	mov	sp,fp
  80eebc:	dfc00117 	ldw	ra,4(sp)
  80eec0:	df000017 	ldw	fp,0(sp)
  80eec4:	dec00204 	addi	sp,sp,8
  80eec8:	f800283a 	ret

0080eecc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80eecc:	deffdb04 	addi	sp,sp,-148
  80eed0:	dfc02415 	stw	ra,144(sp)
  80eed4:	df002315 	stw	fp,140(sp)
  80eed8:	df002304 	addi	fp,sp,140
  80eedc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eee0:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80eee4:	d0a08b43 	ldbu	r2,-32211(gp)
  80eee8:	10803fcc 	andi	r2,r2,255
  80eeec:	10800060 	cmpeqi	r2,r2,1
  80eef0:	10003626 	beq	r2,zero,80efcc <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80eef4:	e0bfe204 	addi	r2,fp,-120
  80eef8:	100b883a 	mov	r5,r2
  80eefc:	01003fc4 	movi	r4,255
  80ef00:	081620c0 	call	81620c <OSTaskQuery>
  80ef04:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80ef08:	e0bffe83 	ldbu	r2,-6(fp)
  80ef0c:	10803fcc 	andi	r2,r2,255
  80ef10:	1000301e 	bne	r2,zero,80efd4 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  80ef14:	e0bfee83 	ldbu	r2,-70(fp)
  80ef18:	10803fcc 	andi	r2,r2,255
  80ef1c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80ef20:	d0a08a17 	ldw	r2,-32216(gp)
  80ef24:	e0fffd04 	addi	r3,fp,-12
  80ef28:	180b883a 	mov	r5,r3
  80ef2c:	1009883a 	mov	r4,r2
  80ef30:	0814a240 	call	814a24 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef34:	0005303a 	rdctl	r2,status
  80ef38:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef3c:	e0ffe117 	ldw	r3,-124(fp)
  80ef40:	00bfff84 	movi	r2,-2
  80ef44:	1884703a 	and	r2,r3,r2
  80ef48:	1001703a 	wrctl	status,r2
  
  return context;
  80ef4c:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  80ef50:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80ef54:	e0bffd0b 	ldhu	r2,-12(fp)
  80ef58:	10bfffcc 	andi	r2,r2,65535
  80ef5c:	10000b1e 	bne	r2,zero,80ef8c <__malloc_lock+0xc0>
  80ef60:	d0a03f17 	ldw	r2,-32516(gp)
  80ef64:	e0ffde17 	ldw	r3,-136(fp)
  80ef68:	1880081e 	bne	r3,r2,80ef8c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  80ef6c:	d0a08917 	ldw	r2,-32220(gp)
  80ef70:	10800044 	addi	r2,r2,1
  80ef74:	d0a08915 	stw	r2,-32220(gp)
  80ef78:	e0bfdd17 	ldw	r2,-140(fp)
  80ef7c:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef80:	e0bfdf17 	ldw	r2,-132(fp)
  80ef84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  80ef88:	00000e06 	br	80efc4 <__malloc_lock+0xf8>
  80ef8c:	e0bfdd17 	ldw	r2,-140(fp)
  80ef90:	e0bfe015 	stw	r2,-128(fp)
  80ef94:	e0bfe017 	ldw	r2,-128(fp)
  80ef98:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80ef9c:	d0a08a17 	ldw	r2,-32216(gp)
  80efa0:	e0fffe84 	addi	r3,fp,-6
  80efa4:	180d883a 	mov	r6,r3
  80efa8:	000b883a 	mov	r5,zero
  80efac:	1009883a 	mov	r4,r2
  80efb0:	081459c0 	call	81459c <OSSemPend>
    locks  = 1;
  80efb4:	00800044 	movi	r2,1
  80efb8:	d0a08915 	stw	r2,-32220(gp)
    lockid = id;
  80efbc:	e0bfde17 	ldw	r2,-136(fp)
  80efc0:	d0a03f15 	stw	r2,-32516(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  80efc4:	0001883a 	nop
  80efc8:	00000306 	br	80efd8 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  80efcc:	0001883a 	nop
  80efd0:	00000106 	br	80efd8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  80efd4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80efd8:	e037883a 	mov	sp,fp
  80efdc:	dfc00117 	ldw	ra,4(sp)
  80efe0:	df000017 	ldw	fp,0(sp)
  80efe4:	dec00204 	addi	sp,sp,8
  80efe8:	f800283a 	ret

0080efec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80efec:	defff804 	addi	sp,sp,-32
  80eff0:	dfc00715 	stw	ra,28(sp)
  80eff4:	df000615 	stw	fp,24(sp)
  80eff8:	df000604 	addi	fp,sp,24
  80effc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f000:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80f004:	d0a08b43 	ldbu	r2,-32211(gp)
  80f008:	10803fcc 	andi	r2,r2,255
  80f00c:	10800060 	cmpeqi	r2,r2,1
  80f010:	10002326 	beq	r2,zero,80f0a0 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f014:	0005303a 	rdctl	r2,status
  80f018:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f01c:	e0fffe17 	ldw	r3,-8(fp)
  80f020:	00bfff84 	movi	r2,-2
  80f024:	1884703a 	and	r2,r3,r2
  80f028:	1001703a 	wrctl	status,r2
  
  return context;
  80f02c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  80f030:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  80f034:	d0a08917 	ldw	r2,-32220(gp)
  80f038:	1000051e 	bne	r2,zero,80f050 <__malloc_unlock+0x64>
  80f03c:	e0bffa17 	ldw	r2,-24(fp)
  80f040:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f044:	e0bffb17 	ldw	r2,-20(fp)
  80f048:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80f04c:	00001506 	br	80f0a4 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80f050:	d0a08917 	ldw	r2,-32220(gp)
  80f054:	10bfffc4 	addi	r2,r2,-1
  80f058:	d0a08915 	stw	r2,-32220(gp)
  80f05c:	d0a08917 	ldw	r2,-32220(gp)
  80f060:	10000a1e 	bne	r2,zero,80f08c <__malloc_unlock+0xa0>
  {
    lockid = -1;
  80f064:	00bfffc4 	movi	r2,-1
  80f068:	d0a03f15 	stw	r2,-32516(gp)
  80f06c:	e0bffa17 	ldw	r2,-24(fp)
  80f070:	e0bffc15 	stw	r2,-16(fp)
  80f074:	e0bffc17 	ldw	r2,-16(fp)
  80f078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80f07c:	d0a08a17 	ldw	r2,-32216(gp)
  80f080:	1009883a 	mov	r4,r2
  80f084:	08149140 	call	814914 <OSSemPost>
  80f088:	00000606 	br	80f0a4 <__malloc_unlock+0xb8>
  80f08c:	e0bffa17 	ldw	r2,-24(fp)
  80f090:	e0bffd15 	stw	r2,-12(fp)
  80f094:	e0bffd17 	ldw	r2,-12(fp)
  80f098:	1001703a 	wrctl	status,r2
  80f09c:	00000106 	br	80f0a4 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  80f0a0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80f0a4:	e037883a 	mov	sp,fp
  80f0a8:	dfc00117 	ldw	ra,4(sp)
  80f0ac:	df000017 	ldw	fp,0(sp)
  80f0b0:	dec00204 	addi	sp,sp,8
  80f0b4:	f800283a 	ret

0080f0b8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80f0b8:	defff704 	addi	sp,sp,-36
  80f0bc:	dfc00815 	stw	ra,32(sp)
  80f0c0:	df000715 	stw	fp,28(sp)
  80f0c4:	df000704 	addi	fp,sp,28
  80f0c8:	e13ffd15 	stw	r4,-12(fp)
  80f0cc:	e17ffe15 	stw	r5,-8(fp)
  80f0d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f0d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f0d8:	e0bfff17 	ldw	r2,-4(fp)
  80f0dc:	1000021e 	bne	r2,zero,80f0e8 <OSEventNameGet+0x30>
        return (0);
  80f0e0:	0005883a 	mov	r2,zero
  80f0e4:	00003706 	br	80f1c4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80f0e8:	e0bffd17 	ldw	r2,-12(fp)
  80f0ec:	1000051e 	bne	r2,zero,80f104 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80f0f0:	e0bfff17 	ldw	r2,-4(fp)
  80f0f4:	00c00104 	movi	r3,4
  80f0f8:	10c00005 	stb	r3,0(r2)
        return (0);
  80f0fc:	0005883a 	mov	r2,zero
  80f100:	00003006 	br	80f1c4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f104:	e0bffe17 	ldw	r2,-8(fp)
  80f108:	1000051e 	bne	r2,zero,80f120 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  80f10c:	e0bfff17 	ldw	r2,-4(fp)
  80f110:	00c00304 	movi	r3,12
  80f114:	10c00005 	stb	r3,0(r2)
        return (0);
  80f118:	0005883a 	mov	r2,zero
  80f11c:	00002906 	br	80f1c4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f120:	d0a09903 	ldbu	r2,-32156(gp)
  80f124:	10803fcc 	andi	r2,r2,255
  80f128:	10000526 	beq	r2,zero,80f140 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  80f12c:	e0bfff17 	ldw	r2,-4(fp)
  80f130:	00c00444 	movi	r3,17
  80f134:	10c00005 	stb	r3,0(r2)
        return (0);
  80f138:	0005883a 	mov	r2,zero
  80f13c:	00002106 	br	80f1c4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  80f140:	e0bffd17 	ldw	r2,-12(fp)
  80f144:	10800003 	ldbu	r2,0(r2)
  80f148:	10803fcc 	andi	r2,r2,255
  80f14c:	10bfffc4 	addi	r2,r2,-1
  80f150:	10800128 	cmpgeui	r2,r2,4
  80f154:	10000526 	beq	r2,zero,80f16c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80f158:	e0bfff17 	ldw	r2,-4(fp)
  80f15c:	00c00044 	movi	r3,1
  80f160:	10c00005 	stb	r3,0(r2)
             return (0);
  80f164:	0005883a 	mov	r2,zero
  80f168:	00001606 	br	80f1c4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80f16c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f170:	0005303a 	rdctl	r2,status
  80f174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f178:	e0fffb17 	ldw	r3,-20(fp)
  80f17c:	00bfff84 	movi	r2,-2
  80f180:	1884703a 	and	r2,r3,r2
  80f184:	1001703a 	wrctl	status,r2
  
  return context;
  80f188:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80f18c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80f190:	e0bffd17 	ldw	r2,-12(fp)
  80f194:	10800384 	addi	r2,r2,14
  80f198:	100b883a 	mov	r5,r2
  80f19c:	e13ffe17 	ldw	r4,-8(fp)
  80f1a0:	0810b3c0 	call	810b3c <OS_StrCopy>
  80f1a4:	e0bffa05 	stb	r2,-24(fp)
  80f1a8:	e0bff917 	ldw	r2,-28(fp)
  80f1ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1b0:	e0bffc17 	ldw	r2,-16(fp)
  80f1b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f1b8:	e0bfff17 	ldw	r2,-4(fp)
  80f1bc:	10000005 	stb	zero,0(r2)
    return (len);
  80f1c0:	e0bffa03 	ldbu	r2,-24(fp)
}
  80f1c4:	e037883a 	mov	sp,fp
  80f1c8:	dfc00117 	ldw	ra,4(sp)
  80f1cc:	df000017 	ldw	fp,0(sp)
  80f1d0:	dec00204 	addi	sp,sp,8
  80f1d4:	f800283a 	ret

0080f1d8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80f1d8:	defff604 	addi	sp,sp,-40
  80f1dc:	dfc00915 	stw	ra,36(sp)
  80f1e0:	df000815 	stw	fp,32(sp)
  80f1e4:	df000804 	addi	fp,sp,32
  80f1e8:	e13ffd15 	stw	r4,-12(fp)
  80f1ec:	e17ffe15 	stw	r5,-8(fp)
  80f1f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f1f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f1f8:	e0bfff17 	ldw	r2,-4(fp)
  80f1fc:	10004026 	beq	r2,zero,80f300 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80f200:	e0bffd17 	ldw	r2,-12(fp)
  80f204:	1000041e 	bne	r2,zero,80f218 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80f208:	e0bfff17 	ldw	r2,-4(fp)
  80f20c:	00c00104 	movi	r3,4
  80f210:	10c00005 	stb	r3,0(r2)
        return;
  80f214:	00003b06 	br	80f304 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f218:	e0bffe17 	ldw	r2,-8(fp)
  80f21c:	1000041e 	bne	r2,zero,80f230 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  80f220:	e0bfff17 	ldw	r2,-4(fp)
  80f224:	00c00304 	movi	r3,12
  80f228:	10c00005 	stb	r3,0(r2)
        return;
  80f22c:	00003506 	br	80f304 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f230:	d0a09903 	ldbu	r2,-32156(gp)
  80f234:	10803fcc 	andi	r2,r2,255
  80f238:	10000426 	beq	r2,zero,80f24c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  80f23c:	e0bfff17 	ldw	r2,-4(fp)
  80f240:	00c00484 	movi	r3,18
  80f244:	10c00005 	stb	r3,0(r2)
        return;
  80f248:	00002e06 	br	80f304 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  80f24c:	e0bffd17 	ldw	r2,-12(fp)
  80f250:	10800003 	ldbu	r2,0(r2)
  80f254:	10803fcc 	andi	r2,r2,255
  80f258:	10bfffc4 	addi	r2,r2,-1
  80f25c:	10800128 	cmpgeui	r2,r2,4
  80f260:	10000426 	beq	r2,zero,80f274 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80f264:	e0bfff17 	ldw	r2,-4(fp)
  80f268:	00c00044 	movi	r3,1
  80f26c:	10c00005 	stb	r3,0(r2)
             return;
  80f270:	00002406 	br	80f304 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80f274:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f278:	0005303a 	rdctl	r2,status
  80f27c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f280:	e0fffc17 	ldw	r3,-16(fp)
  80f284:	00bfff84 	movi	r2,-2
  80f288:	1884703a 	and	r2,r3,r2
  80f28c:	1001703a 	wrctl	status,r2
  
  return context;
  80f290:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80f294:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80f298:	e13ffe17 	ldw	r4,-8(fp)
  80f29c:	0810bb00 	call	810bb0 <OS_StrLen>
  80f2a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80f2a4:	e0bffa03 	ldbu	r2,-24(fp)
  80f2a8:	10800830 	cmpltui	r2,r2,32
  80f2ac:	1000081e 	bne	r2,zero,80f2d0 <OSEventNameSet+0xf8>
  80f2b0:	e0bff817 	ldw	r2,-32(fp)
  80f2b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2b8:	e0bff917 	ldw	r2,-28(fp)
  80f2bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80f2c0:	e0bfff17 	ldw	r2,-4(fp)
  80f2c4:	00c002c4 	movi	r3,11
  80f2c8:	10c00005 	stb	r3,0(r2)
        return;
  80f2cc:	00000d06 	br	80f304 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80f2d0:	e0bffd17 	ldw	r2,-12(fp)
  80f2d4:	10800384 	addi	r2,r2,14
  80f2d8:	e17ffe17 	ldw	r5,-8(fp)
  80f2dc:	1009883a 	mov	r4,r2
  80f2e0:	0810b3c0 	call	810b3c <OS_StrCopy>
  80f2e4:	e0bff817 	ldw	r2,-32(fp)
  80f2e8:	e0bffb15 	stw	r2,-20(fp)
  80f2ec:	e0bffb17 	ldw	r2,-20(fp)
  80f2f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f2f4:	e0bfff17 	ldw	r2,-4(fp)
  80f2f8:	10000005 	stb	zero,0(r2)
  80f2fc:	00000106 	br	80f304 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  80f300:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80f304:	e037883a 	mov	sp,fp
  80f308:	dfc00117 	ldw	ra,4(sp)
  80f30c:	df000017 	ldw	fp,0(sp)
  80f310:	dec00204 	addi	sp,sp,8
  80f314:	f800283a 	ret

0080f318 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80f318:	deffed04 	addi	sp,sp,-76
  80f31c:	dfc01215 	stw	ra,72(sp)
  80f320:	df001115 	stw	fp,68(sp)
  80f324:	df001104 	addi	fp,sp,68
  80f328:	e13ffc15 	stw	r4,-16(fp)
  80f32c:	e17ffd15 	stw	r5,-12(fp)
  80f330:	e1bffe15 	stw	r6,-8(fp)
  80f334:	3805883a 	mov	r2,r7
  80f338:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80f33c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80f340:	e0800217 	ldw	r2,8(fp)
  80f344:	1000021e 	bne	r2,zero,80f350 <OSEventPendMulti+0x38>
        return (0);
  80f348:	0005883a 	mov	r2,zero
  80f34c:	00017106 	br	80f914 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80f350:	e0bffc17 	ldw	r2,-16(fp)
  80f354:	1000051e 	bne	r2,zero,80f36c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  80f358:	e0800217 	ldw	r2,8(fp)
  80f35c:	00c00104 	movi	r3,4
  80f360:	10c00005 	stb	r3,0(r2)
        return (0);
  80f364:	0005883a 	mov	r2,zero
  80f368:	00016a06 	br	80f914 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80f36c:	e0bffd17 	ldw	r2,-12(fp)
  80f370:	1000051e 	bne	r2,zero,80f388 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  80f374:	e0800217 	ldw	r2,8(fp)
  80f378:	00c00104 	movi	r3,4
  80f37c:	10c00005 	stb	r3,0(r2)
        return (0);
  80f380:	0005883a 	mov	r2,zero
  80f384:	00016306 	br	80f914 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80f388:	e0bffe17 	ldw	r2,-8(fp)
  80f38c:	1000051e 	bne	r2,zero,80f3a4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  80f390:	e0800217 	ldw	r2,8(fp)
  80f394:	00c00104 	movi	r3,4
  80f398:	10c00005 	stb	r3,0(r2)
        return (0);
  80f39c:	0005883a 	mov	r2,zero
  80f3a0:	00015c06 	br	80f914 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80f3a4:	e0bffd17 	ldw	r2,-12(fp)
  80f3a8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80f3ac:	e0bffc17 	ldw	r2,-16(fp)
  80f3b0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  80f3b4:	e0bfef17 	ldw	r2,-68(fp)
  80f3b8:	10800017 	ldw	r2,0(r2)
  80f3bc:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  80f3c0:	00001906 	br	80f428 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80f3c4:	e0bff017 	ldw	r2,-64(fp)
  80f3c8:	10800003 	ldbu	r2,0(r2)
  80f3cc:	10803fcc 	andi	r2,r2,255
  80f3d0:	10c000a0 	cmpeqi	r3,r2,2
  80f3d4:	1800091e 	bne	r3,zero,80f3fc <OSEventPendMulti+0xe4>
  80f3d8:	10c000e0 	cmpeqi	r3,r2,3
  80f3dc:	1800091e 	bne	r3,zero,80f404 <OSEventPendMulti+0xec>
  80f3e0:	10800060 	cmpeqi	r2,r2,1
  80f3e4:	1000091e 	bne	r2,zero,80f40c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80f3e8:	e0800217 	ldw	r2,8(fp)
  80f3ec:	00c00044 	movi	r3,1
  80f3f0:	10c00005 	stb	r3,0(r2)
                 return (0);
  80f3f4:	0005883a 	mov	r2,zero
  80f3f8:	00014606 	br	80f914 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  80f3fc:	0001883a 	nop
  80f400:	00000306 	br	80f410 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  80f404:	0001883a 	nop
  80f408:	00000106 	br	80f410 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  80f40c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  80f410:	e0bfef17 	ldw	r2,-68(fp)
  80f414:	10800104 	addi	r2,r2,4
  80f418:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  80f41c:	e0bfef17 	ldw	r2,-68(fp)
  80f420:	10800017 	ldw	r2,0(r2)
  80f424:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80f428:	e0bff017 	ldw	r2,-64(fp)
  80f42c:	103fe51e 	bne	r2,zero,80f3c4 <__alt_mem_epcs_flash_controller_0+0xff8063c4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80f430:	d0a09903 	ldbu	r2,-32156(gp)
  80f434:	10803fcc 	andi	r2,r2,255
  80f438:	10000526 	beq	r2,zero,80f450 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80f43c:	e0800217 	ldw	r2,8(fp)
  80f440:	00c00084 	movi	r3,2
  80f444:	10c00005 	stb	r3,0(r2)
        return (0);
  80f448:	0005883a 	mov	r2,zero
  80f44c:	00013106 	br	80f914 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80f450:	d0a08b03 	ldbu	r2,-32212(gp)
  80f454:	10803fcc 	andi	r2,r2,255
  80f458:	10000526 	beq	r2,zero,80f470 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80f45c:	e0800217 	ldw	r2,8(fp)
  80f460:	00c00344 	movi	r3,13
  80f464:	10c00005 	stb	r3,0(r2)
        return (0);
  80f468:	0005883a 	mov	r2,zero
  80f46c:	00012906 	br	80f914 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f470:	0005303a 	rdctl	r2,status
  80f474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f478:	e0fffb17 	ldw	r3,-20(fp)
  80f47c:	00bfff84 	movi	r2,-2
  80f480:	1884703a 	and	r2,r3,r2
  80f484:	1001703a 	wrctl	status,r2
  
  return context;
  80f488:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80f48c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  80f490:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  80f494:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80f498:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  80f49c:	e0bffc17 	ldw	r2,-16(fp)
  80f4a0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  80f4a4:	e0bfef17 	ldw	r2,-68(fp)
  80f4a8:	10800017 	ldw	r2,0(r2)
  80f4ac:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80f4b0:	00008106 	br	80f6b8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  80f4b4:	e0bff017 	ldw	r2,-64(fp)
  80f4b8:	10800003 	ldbu	r2,0(r2)
  80f4bc:	10803fcc 	andi	r2,r2,255
  80f4c0:	10c000a0 	cmpeqi	r3,r2,2
  80f4c4:	18003c1e 	bne	r3,zero,80f5b8 <OSEventPendMulti+0x2a0>
  80f4c8:	10c000e0 	cmpeqi	r3,r2,3
  80f4cc:	1800031e 	bne	r3,zero,80f4dc <OSEventPendMulti+0x1c4>
  80f4d0:	10800060 	cmpeqi	r2,r2,1
  80f4d4:	10001e1e 	bne	r2,zero,80f550 <OSEventPendMulti+0x238>
  80f4d8:	00006606 	br	80f674 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80f4dc:	e0bff017 	ldw	r2,-64(fp)
  80f4e0:	1080020b 	ldhu	r2,8(r2)
  80f4e4:	10bfffcc 	andi	r2,r2,65535
  80f4e8:	10001526 	beq	r2,zero,80f540 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80f4ec:	e0bff017 	ldw	r2,-64(fp)
  80f4f0:	1080020b 	ldhu	r2,8(r2)
  80f4f4:	10bfffc4 	addi	r2,r2,-1
  80f4f8:	1007883a 	mov	r3,r2
  80f4fc:	e0bff017 	ldw	r2,-64(fp)
  80f500:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80f504:	e0bffd17 	ldw	r2,-12(fp)
  80f508:	10c00104 	addi	r3,r2,4
  80f50c:	e0fffd15 	stw	r3,-12(fp)
  80f510:	e0fff017 	ldw	r3,-64(fp)
  80f514:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  80f518:	00800044 	movi	r2,1
  80f51c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80f520:	e0bffe17 	ldw	r2,-8(fp)
  80f524:	10c00104 	addi	r3,r2,4
  80f528:	e0fffe15 	stw	r3,-8(fp)
  80f52c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  80f530:	e0bff18b 	ldhu	r2,-58(fp)
  80f534:	10800044 	addi	r2,r2,1
  80f538:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  80f53c:	00005806 	br	80f6a0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80f540:	e0bff203 	ldbu	r2,-56(fp)
  80f544:	10800054 	ori	r2,r2,1
  80f548:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80f54c:	00005406 	br	80f6a0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80f550:	e0bff017 	ldw	r2,-64(fp)
  80f554:	10800117 	ldw	r2,4(r2)
  80f558:	10001326 	beq	r2,zero,80f5a8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80f55c:	e0bffe17 	ldw	r2,-8(fp)
  80f560:	10c00104 	addi	r3,r2,4
  80f564:	e0fffe15 	stw	r3,-8(fp)
  80f568:	e0fff017 	ldw	r3,-64(fp)
  80f56c:	18c00117 	ldw	r3,4(r3)
  80f570:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  80f574:	e0bff017 	ldw	r2,-64(fp)
  80f578:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80f57c:	e0bffd17 	ldw	r2,-12(fp)
  80f580:	10c00104 	addi	r3,r2,4
  80f584:	e0fffd15 	stw	r3,-12(fp)
  80f588:	e0fff017 	ldw	r3,-64(fp)
  80f58c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  80f590:	00800044 	movi	r2,1
  80f594:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80f598:	e0bff18b 	ldhu	r2,-58(fp)
  80f59c:	10800044 	addi	r2,r2,1
  80f5a0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  80f5a4:	00003e06 	br	80f6a0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80f5a8:	e0bff203 	ldbu	r2,-56(fp)
  80f5ac:	10800094 	ori	r2,r2,2
  80f5b0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80f5b4:	00003a06 	br	80f6a0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80f5b8:	e0bff017 	ldw	r2,-64(fp)
  80f5bc:	10800117 	ldw	r2,4(r2)
  80f5c0:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80f5c4:	e0bff517 	ldw	r2,-44(fp)
  80f5c8:	1080058b 	ldhu	r2,22(r2)
  80f5cc:	10bfffcc 	andi	r2,r2,65535
  80f5d0:	10002426 	beq	r2,zero,80f664 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80f5d4:	e0bffe17 	ldw	r2,-8(fp)
  80f5d8:	10c00104 	addi	r3,r2,4
  80f5dc:	e0fffe15 	stw	r3,-8(fp)
  80f5e0:	e0fff517 	ldw	r3,-44(fp)
  80f5e4:	18c00417 	ldw	r3,16(r3)
  80f5e8:	19400104 	addi	r5,r3,4
  80f5ec:	e13ff517 	ldw	r4,-44(fp)
  80f5f0:	21400415 	stw	r5,16(r4)
  80f5f4:	18c00017 	ldw	r3,0(r3)
  80f5f8:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80f5fc:	e0bff517 	ldw	r2,-44(fp)
  80f600:	10c00417 	ldw	r3,16(r2)
  80f604:	e0bff517 	ldw	r2,-44(fp)
  80f608:	10800217 	ldw	r2,8(r2)
  80f60c:	1880041e 	bne	r3,r2,80f620 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80f610:	e0bff517 	ldw	r2,-44(fp)
  80f614:	10c00117 	ldw	r3,4(r2)
  80f618:	e0bff517 	ldw	r2,-44(fp)
  80f61c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80f620:	e0bff517 	ldw	r2,-44(fp)
  80f624:	1080058b 	ldhu	r2,22(r2)
  80f628:	10bfffc4 	addi	r2,r2,-1
  80f62c:	1007883a 	mov	r3,r2
  80f630:	e0bff517 	ldw	r2,-44(fp)
  80f634:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80f638:	e0bffd17 	ldw	r2,-12(fp)
  80f63c:	10c00104 	addi	r3,r2,4
  80f640:	e0fffd15 	stw	r3,-12(fp)
  80f644:	e0fff017 	ldw	r3,-64(fp)
  80f648:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  80f64c:	00800044 	movi	r2,1
  80f650:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80f654:	e0bff18b 	ldhu	r2,-58(fp)
  80f658:	10800044 	addi	r2,r2,1
  80f65c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  80f660:	00000f06 	br	80f6a0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80f664:	e0bff203 	ldbu	r2,-56(fp)
  80f668:	10800114 	ori	r2,r2,4
  80f66c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  80f670:	00000b06 	br	80f6a0 <OSEventPendMulti+0x388>
  80f674:	e0bff317 	ldw	r2,-52(fp)
  80f678:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f67c:	e0bff417 	ldw	r2,-48(fp)
  80f680:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80f684:	e0bffd17 	ldw	r2,-12(fp)
  80f688:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80f68c:	e0800217 	ldw	r2,8(fp)
  80f690:	00c00044 	movi	r3,1
  80f694:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  80f698:	e0bff18b 	ldhu	r2,-58(fp)
  80f69c:	00009d06 	br	80f914 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  80f6a0:	e0bfef17 	ldw	r2,-68(fp)
  80f6a4:	10800104 	addi	r2,r2,4
  80f6a8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  80f6ac:	e0bfef17 	ldw	r2,-68(fp)
  80f6b0:	10800017 	ldw	r2,0(r2)
  80f6b4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80f6b8:	e0bff017 	ldw	r2,-64(fp)
  80f6bc:	103f7d1e 	bne	r2,zero,80f4b4 <__alt_mem_epcs_flash_controller_0+0xff8064b4>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80f6c0:	e0bff103 	ldbu	r2,-60(fp)
  80f6c4:	10800058 	cmpnei	r2,r2,1
  80f6c8:	10000a1e 	bne	r2,zero,80f6f4 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80f6cc:	e0bffd17 	ldw	r2,-12(fp)
  80f6d0:	10000015 	stw	zero,0(r2)
  80f6d4:	e0bff317 	ldw	r2,-52(fp)
  80f6d8:	e0bff615 	stw	r2,-40(fp)
  80f6dc:	e0bff617 	ldw	r2,-40(fp)
  80f6e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80f6e4:	e0800217 	ldw	r2,8(fp)
  80f6e8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80f6ec:	e0bff18b 	ldhu	r2,-58(fp)
  80f6f0:	00008806 	br	80f914 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80f6f4:	d0a09a17 	ldw	r2,-32152(gp)
  80f6f8:	d0e09a17 	ldw	r3,-32152(gp)
  80f6fc:	19000c03 	ldbu	r4,48(r3)
  80f700:	e0fff203 	ldbu	r3,-56(fp)
  80f704:	20c6b03a 	or	r3,r4,r3
  80f708:	1809883a 	mov	r4,r3
  80f70c:	00ffe004 	movi	r3,-128
  80f710:	20c6b03a 	or	r3,r4,r3
  80f714:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80f718:	d0a09a17 	ldw	r2,-32152(gp)
  80f71c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80f720:	d0a09a17 	ldw	r2,-32152(gp)
  80f724:	e0ffff0b 	ldhu	r3,-4(fp)
  80f728:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80f72c:	e13ffc17 	ldw	r4,-16(fp)
  80f730:	08102540 	call	810254 <OS_EventTaskWaitMulti>
  80f734:	e0bff317 	ldw	r2,-52(fp)
  80f738:	e0bff915 	stw	r2,-28(fp)
  80f73c:	e0bff917 	ldw	r2,-28(fp)
  80f740:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80f744:	08109f80 	call	8109f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f748:	0005303a 	rdctl	r2,status
  80f74c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f750:	e0fff717 	ldw	r3,-36(fp)
  80f754:	00bfff84 	movi	r2,-2
  80f758:	1884703a 	and	r2,r3,r2
  80f75c:	1001703a 	wrctl	status,r2
  
  return context;
  80f760:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80f764:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80f768:	d0a09a17 	ldw	r2,-32152(gp)
  80f76c:	10800c43 	ldbu	r2,49(r2)
  80f770:	10803fcc 	andi	r2,r2,255
  80f774:	10000226 	beq	r2,zero,80f780 <OSEventPendMulti+0x468>
  80f778:	108000a0 	cmpeqi	r2,r2,2
  80f77c:	10001826 	beq	r2,zero,80f7e0 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80f780:	d0a09a17 	ldw	r2,-32152(gp)
  80f784:	10800717 	ldw	r2,28(r2)
  80f788:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80f78c:	e0bff017 	ldw	r2,-64(fp)
  80f790:	10000b26 	beq	r2,zero,80f7c0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80f794:	e0bffd17 	ldw	r2,-12(fp)
  80f798:	10c00104 	addi	r3,r2,4
  80f79c:	e0fffd15 	stw	r3,-12(fp)
  80f7a0:	e0fff017 	ldw	r3,-64(fp)
  80f7a4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80f7a8:	e0bffd17 	ldw	r2,-12(fp)
  80f7ac:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80f7b0:	e0bff18b 	ldhu	r2,-58(fp)
  80f7b4:	10800044 	addi	r2,r2,1
  80f7b8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  80f7bc:	00000d06 	br	80f7f4 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80f7c0:	d0a09a17 	ldw	r2,-32152(gp)
  80f7c4:	00c00044 	movi	r3,1
  80f7c8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80f7cc:	d0a09a17 	ldw	r2,-32152(gp)
  80f7d0:	e17ffc17 	ldw	r5,-16(fp)
  80f7d4:	1009883a 	mov	r4,r2
  80f7d8:	081045c0 	call	81045c <OS_EventTaskRemoveMulti>
             }
			 break;
  80f7dc:	00000506 	br	80f7f4 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80f7e0:	d0a09a17 	ldw	r2,-32152(gp)
  80f7e4:	e17ffc17 	ldw	r5,-16(fp)
  80f7e8:	1009883a 	mov	r4,r2
  80f7ec:	081045c0 	call	81045c <OS_EventTaskRemoveMulti>
             break;
  80f7f0:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80f7f4:	d0a09a17 	ldw	r2,-32152(gp)
  80f7f8:	10800c43 	ldbu	r2,49(r2)
  80f7fc:	10803fcc 	andi	r2,r2,255
  80f800:	10000326 	beq	r2,zero,80f810 <OSEventPendMulti+0x4f8>
  80f804:	108000a0 	cmpeqi	r2,r2,2
  80f808:	1000231e 	bne	r2,zero,80f898 <OSEventPendMulti+0x580>
  80f80c:	00002a06 	br	80f8b8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80f810:	e0bff017 	ldw	r2,-64(fp)
  80f814:	10800003 	ldbu	r2,0(r2)
  80f818:	10803fcc 	andi	r2,r2,255
  80f81c:	0080100e 	bge	zero,r2,80f860 <OSEventPendMulti+0x548>
  80f820:	10c000d0 	cmplti	r3,r2,3
  80f824:	1800071e 	bne	r3,zero,80f844 <OSEventPendMulti+0x52c>
  80f828:	108000e0 	cmpeqi	r2,r2,3
  80f82c:	10000c26 	beq	r2,zero,80f860 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80f830:	e0bffe17 	ldw	r2,-8(fp)
  80f834:	10c00104 	addi	r3,r2,4
  80f838:	e0fffe15 	stw	r3,-8(fp)
  80f83c:	10000015 	stw	zero,0(r2)
                      break;
  80f840:	00001206 	br	80f88c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80f844:	e0bffe17 	ldw	r2,-8(fp)
  80f848:	10c00104 	addi	r3,r2,4
  80f84c:	e0fffe15 	stw	r3,-8(fp)
  80f850:	d0e09a17 	ldw	r3,-32152(gp)
  80f854:	18c00917 	ldw	r3,36(r3)
  80f858:	10c00015 	stw	r3,0(r2)
                      break;
  80f85c:	00000b06 	br	80f88c <OSEventPendMulti+0x574>
  80f860:	e0bff317 	ldw	r2,-52(fp)
  80f864:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f868:	e0bff817 	ldw	r2,-32(fp)
  80f86c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80f870:	e0bffd17 	ldw	r2,-12(fp)
  80f874:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80f878:	e0800217 	ldw	r2,8(fp)
  80f87c:	00c00044 	movi	r3,1
  80f880:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  80f884:	e0bff18b 	ldhu	r2,-58(fp)
  80f888:	00002206 	br	80f914 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  80f88c:	e0800217 	ldw	r2,8(fp)
  80f890:	10000005 	stb	zero,0(r2)
             break;
  80f894:	00001006 	br	80f8d8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80f898:	e0bffe17 	ldw	r2,-8(fp)
  80f89c:	10c00104 	addi	r3,r2,4
  80f8a0:	e0fffe15 	stw	r3,-8(fp)
  80f8a4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80f8a8:	e0800217 	ldw	r2,8(fp)
  80f8ac:	00c00384 	movi	r3,14
  80f8b0:	10c00005 	stb	r3,0(r2)
             break;
  80f8b4:	00000806 	br	80f8d8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80f8b8:	e0bffe17 	ldw	r2,-8(fp)
  80f8bc:	10c00104 	addi	r3,r2,4
  80f8c0:	e0fffe15 	stw	r3,-8(fp)
  80f8c4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80f8c8:	e0800217 	ldw	r2,8(fp)
  80f8cc:	00c00284 	movi	r3,10
  80f8d0:	10c00005 	stb	r3,0(r2)
             break;
  80f8d4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80f8d8:	d0a09a17 	ldw	r2,-32152(gp)
  80f8dc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80f8e0:	d0a09a17 	ldw	r2,-32152(gp)
  80f8e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80f8e8:	d0a09a17 	ldw	r2,-32152(gp)
  80f8ec:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80f8f0:	d0a09a17 	ldw	r2,-32152(gp)
  80f8f4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80f8f8:	d0a09a17 	ldw	r2,-32152(gp)
  80f8fc:	10000915 	stw	zero,36(r2)
  80f900:	e0bff317 	ldw	r2,-52(fp)
  80f904:	e0bffa15 	stw	r2,-24(fp)
  80f908:	e0bffa17 	ldw	r2,-24(fp)
  80f90c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80f910:	e0bff18b 	ldhu	r2,-58(fp)
}
  80f914:	e037883a 	mov	sp,fp
  80f918:	dfc00117 	ldw	ra,4(sp)
  80f91c:	df000017 	ldw	fp,0(sp)
  80f920:	dec00204 	addi	sp,sp,8
  80f924:	f800283a 	ret

0080f928 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80f928:	defffe04 	addi	sp,sp,-8
  80f92c:	dfc00115 	stw	ra,4(sp)
  80f930:	df000015 	stw	fp,0(sp)
  80f934:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80f938:	081b2240 	call	81b224 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80f93c:	08106a40 	call	8106a4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80f940:	08106ec0 	call	8106ec <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80f944:	08108580 	call	810858 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80f948:	08105c40 	call	8105c4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80f94c:	08126f80 	call	8126f8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80f950:	0812ff80 	call	812ff8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80f954:	081412c0 	call	81412c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80f958:	08107580 	call	810758 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80f95c:	08107d80 	call	8107d8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80f960:	081b2440 	call	81b244 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80f964:	08110cc0 	call	8110cc <OSDebugInit>
#endif
}
  80f968:	0001883a 	nop
  80f96c:	e037883a 	mov	sp,fp
  80f970:	dfc00117 	ldw	ra,4(sp)
  80f974:	df000017 	ldw	fp,0(sp)
  80f978:	dec00204 	addi	sp,sp,8
  80f97c:	f800283a 	ret

0080f980 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80f980:	deffff04 	addi	sp,sp,-4
  80f984:	df000015 	stw	fp,0(sp)
  80f988:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  80f98c:	d0a08b43 	ldbu	r2,-32211(gp)
  80f990:	10803fcc 	andi	r2,r2,255
  80f994:	10800058 	cmpnei	r2,r2,1
  80f998:	1000071e 	bne	r2,zero,80f9b8 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  80f99c:	d0a09903 	ldbu	r2,-32156(gp)
  80f9a0:	10803fcc 	andi	r2,r2,255
  80f9a4:	10803fe0 	cmpeqi	r2,r2,255
  80f9a8:	1000031e 	bne	r2,zero,80f9b8 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80f9ac:	d0a09903 	ldbu	r2,-32156(gp)
  80f9b0:	10800044 	addi	r2,r2,1
  80f9b4:	d0a09905 	stb	r2,-32156(gp)
        }
    }
}
  80f9b8:	0001883a 	nop
  80f9bc:	e037883a 	mov	sp,fp
  80f9c0:	df000017 	ldw	fp,0(sp)
  80f9c4:	dec00104 	addi	sp,sp,4
  80f9c8:	f800283a 	ret

0080f9cc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80f9cc:	defffb04 	addi	sp,sp,-20
  80f9d0:	dfc00415 	stw	ra,16(sp)
  80f9d4:	df000315 	stw	fp,12(sp)
  80f9d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f9dc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80f9e0:	d0a08b43 	ldbu	r2,-32211(gp)
  80f9e4:	10803fcc 	andi	r2,r2,255
  80f9e8:	10800058 	cmpnei	r2,r2,1
  80f9ec:	10002f1e 	bne	r2,zero,80faac <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9f0:	0005303a 	rdctl	r2,status
  80f9f4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9f8:	e0ffff17 	ldw	r3,-4(fp)
  80f9fc:	00bfff84 	movi	r2,-2
  80fa00:	1884703a 	and	r2,r3,r2
  80fa04:	1001703a 	wrctl	status,r2
  
  return context;
  80fa08:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80fa0c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80fa10:	d0a09903 	ldbu	r2,-32156(gp)
  80fa14:	10803fcc 	andi	r2,r2,255
  80fa18:	10000326 	beq	r2,zero,80fa28 <OSIntExit+0x5c>
            OSIntNesting--;
  80fa1c:	d0a09903 	ldbu	r2,-32156(gp)
  80fa20:	10bfffc4 	addi	r2,r2,-1
  80fa24:	d0a09905 	stb	r2,-32156(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80fa28:	d0a09903 	ldbu	r2,-32156(gp)
  80fa2c:	10803fcc 	andi	r2,r2,255
  80fa30:	10001a1e 	bne	r2,zero,80fa9c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80fa34:	d0a08b03 	ldbu	r2,-32212(gp)
  80fa38:	10803fcc 	andi	r2,r2,255
  80fa3c:	1000171e 	bne	r2,zero,80fa9c <OSIntExit+0xd0>
                OS_SchedNew();
  80fa40:	0810ac80 	call	810ac8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80fa44:	d0e08d03 	ldbu	r3,-32204(gp)
  80fa48:	d0a08d43 	ldbu	r2,-32203(gp)
  80fa4c:	18c03fcc 	andi	r3,r3,255
  80fa50:	10803fcc 	andi	r2,r2,255
  80fa54:	18801126 	beq	r3,r2,80fa9c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80fa58:	d0a08d03 	ldbu	r2,-32204(gp)
  80fa5c:	10c03fcc 	andi	r3,r2,255
  80fa60:	008020f4 	movhi	r2,131
  80fa64:	10a16904 	addi	r2,r2,-31324
  80fa68:	18c7883a 	add	r3,r3,r3
  80fa6c:	18c7883a 	add	r3,r3,r3
  80fa70:	10c5883a 	add	r2,r2,r3
  80fa74:	10800017 	ldw	r2,0(r2)
  80fa78:	d0a09515 	stw	r2,-32172(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80fa7c:	d0a09517 	ldw	r2,-32172(gp)
  80fa80:	10c00e17 	ldw	r3,56(r2)
  80fa84:	18c00044 	addi	r3,r3,1
  80fa88:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80fa8c:	d0a09017 	ldw	r2,-32192(gp)
  80fa90:	10800044 	addi	r2,r2,1
  80fa94:	d0a09015 	stw	r2,-32192(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80fa98:	081af500 	call	81af50 <OSCtxSw>
  80fa9c:	e0bffd17 	ldw	r2,-12(fp)
  80faa0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80faa4:	e0bffe17 	ldw	r2,-8(fp)
  80faa8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80faac:	0001883a 	nop
  80fab0:	e037883a 	mov	sp,fp
  80fab4:	dfc00117 	ldw	ra,4(sp)
  80fab8:	df000017 	ldw	fp,0(sp)
  80fabc:	dec00204 	addi	sp,sp,8
  80fac0:	f800283a 	ret

0080fac4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80fac4:	defffc04 	addi	sp,sp,-16
  80fac8:	df000315 	stw	fp,12(sp)
  80facc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fad0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80fad4:	d0a08b43 	ldbu	r2,-32211(gp)
  80fad8:	10803fcc 	andi	r2,r2,255
  80fadc:	10800058 	cmpnei	r2,r2,1
  80fae0:	1000161e 	bne	r2,zero,80fb3c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fae4:	0005303a 	rdctl	r2,status
  80fae8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80faec:	e0ffff17 	ldw	r3,-4(fp)
  80faf0:	00bfff84 	movi	r2,-2
  80faf4:	1884703a 	and	r2,r3,r2
  80faf8:	1001703a 	wrctl	status,r2
  
  return context;
  80fafc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80fb00:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80fb04:	d0a09903 	ldbu	r2,-32156(gp)
  80fb08:	10803fcc 	andi	r2,r2,255
  80fb0c:	1000071e 	bne	r2,zero,80fb2c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80fb10:	d0a08b03 	ldbu	r2,-32212(gp)
  80fb14:	10803fcc 	andi	r2,r2,255
  80fb18:	10803fe0 	cmpeqi	r2,r2,255
  80fb1c:	1000031e 	bne	r2,zero,80fb2c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80fb20:	d0a08b03 	ldbu	r2,-32212(gp)
  80fb24:	10800044 	addi	r2,r2,1
  80fb28:	d0a08b05 	stb	r2,-32212(gp)
  80fb2c:	e0bffd17 	ldw	r2,-12(fp)
  80fb30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb34:	e0bffe17 	ldw	r2,-8(fp)
  80fb38:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80fb3c:	0001883a 	nop
  80fb40:	e037883a 	mov	sp,fp
  80fb44:	df000017 	ldw	fp,0(sp)
  80fb48:	dec00104 	addi	sp,sp,4
  80fb4c:	f800283a 	ret

0080fb50 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80fb50:	defff804 	addi	sp,sp,-32
  80fb54:	dfc00715 	stw	ra,28(sp)
  80fb58:	df000615 	stw	fp,24(sp)
  80fb5c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80fb60:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80fb64:	d0a08b43 	ldbu	r2,-32211(gp)
  80fb68:	10803fcc 	andi	r2,r2,255
  80fb6c:	10800058 	cmpnei	r2,r2,1
  80fb70:	1000281e 	bne	r2,zero,80fc14 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb74:	0005303a 	rdctl	r2,status
  80fb78:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb7c:	e0ffff17 	ldw	r3,-4(fp)
  80fb80:	00bfff84 	movi	r2,-2
  80fb84:	1884703a 	and	r2,r3,r2
  80fb88:	1001703a 	wrctl	status,r2
  
  return context;
  80fb8c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  80fb90:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80fb94:	d0a08b03 	ldbu	r2,-32212(gp)
  80fb98:	10803fcc 	andi	r2,r2,255
  80fb9c:	10001926 	beq	r2,zero,80fc04 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80fba0:	d0a08b03 	ldbu	r2,-32212(gp)
  80fba4:	10bfffc4 	addi	r2,r2,-1
  80fba8:	d0a08b05 	stb	r2,-32212(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80fbac:	d0a08b03 	ldbu	r2,-32212(gp)
  80fbb0:	10803fcc 	andi	r2,r2,255
  80fbb4:	10000e1e 	bne	r2,zero,80fbf0 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80fbb8:	d0a09903 	ldbu	r2,-32156(gp)
  80fbbc:	10803fcc 	andi	r2,r2,255
  80fbc0:	1000061e 	bne	r2,zero,80fbdc <OSSchedUnlock+0x8c>
  80fbc4:	e0bffa17 	ldw	r2,-24(fp)
  80fbc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbcc:	e0bffb17 	ldw	r2,-20(fp)
  80fbd0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80fbd4:	08109f80 	call	8109f8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80fbd8:	00000e06 	br	80fc14 <OSSchedUnlock+0xc4>
  80fbdc:	e0bffa17 	ldw	r2,-24(fp)
  80fbe0:	e0bffc15 	stw	r2,-16(fp)
  80fbe4:	e0bffc17 	ldw	r2,-16(fp)
  80fbe8:	1001703a 	wrctl	status,r2
  80fbec:	00000906 	br	80fc14 <OSSchedUnlock+0xc4>
  80fbf0:	e0bffa17 	ldw	r2,-24(fp)
  80fbf4:	e0bffd15 	stw	r2,-12(fp)
  80fbf8:	e0bffd17 	ldw	r2,-12(fp)
  80fbfc:	1001703a 	wrctl	status,r2
  80fc00:	00000406 	br	80fc14 <OSSchedUnlock+0xc4>
  80fc04:	e0bffa17 	ldw	r2,-24(fp)
  80fc08:	e0bffe15 	stw	r2,-8(fp)
  80fc0c:	e0bffe17 	ldw	r2,-8(fp)
  80fc10:	1001703a 	wrctl	status,r2
  80fc14:	0001883a 	nop
  80fc18:	e037883a 	mov	sp,fp
  80fc1c:	dfc00117 	ldw	ra,4(sp)
  80fc20:	df000017 	ldw	fp,0(sp)
  80fc24:	dec00204 	addi	sp,sp,8
  80fc28:	f800283a 	ret

0080fc2c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80fc2c:	defffe04 	addi	sp,sp,-8
  80fc30:	dfc00115 	stw	ra,4(sp)
  80fc34:	df000015 	stw	fp,0(sp)
  80fc38:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80fc3c:	d0a08b43 	ldbu	r2,-32211(gp)
  80fc40:	10803fcc 	andi	r2,r2,255
  80fc44:	10000f1e 	bne	r2,zero,80fc84 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80fc48:	0810ac80 	call	810ac8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80fc4c:	d0a08d03 	ldbu	r2,-32204(gp)
  80fc50:	d0a08d45 	stb	r2,-32203(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80fc54:	d0a08d03 	ldbu	r2,-32204(gp)
  80fc58:	10c03fcc 	andi	r3,r2,255
  80fc5c:	008020f4 	movhi	r2,131
  80fc60:	10a16904 	addi	r2,r2,-31324
  80fc64:	18c7883a 	add	r3,r3,r3
  80fc68:	18c7883a 	add	r3,r3,r3
  80fc6c:	10c5883a 	add	r2,r2,r3
  80fc70:	10800017 	ldw	r2,0(r2)
  80fc74:	d0a09515 	stw	r2,-32172(gp)
        OSTCBCur      = OSTCBHighRdy;
  80fc78:	d0a09517 	ldw	r2,-32172(gp)
  80fc7c:	d0a09a15 	stw	r2,-32152(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80fc80:	081afdc0 	call	81afdc <OSStartHighRdy>
    }
}
  80fc84:	0001883a 	nop
  80fc88:	e037883a 	mov	sp,fp
  80fc8c:	dfc00117 	ldw	ra,4(sp)
  80fc90:	df000017 	ldw	fp,0(sp)
  80fc94:	dec00204 	addi	sp,sp,8
  80fc98:	f800283a 	ret

0080fc9c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80fc9c:	defff904 	addi	sp,sp,-28
  80fca0:	dfc00615 	stw	ra,24(sp)
  80fca4:	df000515 	stw	fp,20(sp)
  80fca8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fcac:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80fcb0:	01000084 	movi	r4,2
  80fcb4:	08163a00 	call	8163a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcb8:	0005303a 	rdctl	r2,status
  80fcbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fcc0:	e0fffc17 	ldw	r3,-16(fp)
  80fcc4:	00bfff84 	movi	r2,-2
  80fcc8:	1884703a 	and	r2,r3,r2
  80fccc:	1001703a 	wrctl	status,r2
  
  return context;
  80fcd0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80fcd4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80fcd8:	d0208c15 	stw	zero,-32208(gp)
  80fcdc:	e0bffb17 	ldw	r2,-20(fp)
  80fce0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fce4:	e0bffd17 	ldw	r2,-12(fp)
  80fce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80fcec:	01001904 	movi	r4,100
  80fcf0:	08163a00 	call	8163a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcf4:	0005303a 	rdctl	r2,status
  80fcf8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fcfc:	e0fffe17 	ldw	r3,-8(fp)
  80fd00:	00bfff84 	movi	r2,-2
  80fd04:	1884703a 	and	r2,r3,r2
  80fd08:	1001703a 	wrctl	status,r2
  
  return context;
  80fd0c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80fd10:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80fd14:	d0a08c17 	ldw	r2,-32208(gp)
  80fd18:	d0a09115 	stw	r2,-32188(gp)
    OSStatRdy    = OS_TRUE;
  80fd1c:	00800044 	movi	r2,1
  80fd20:	d0a09d05 	stb	r2,-32140(gp)
  80fd24:	e0bffb17 	ldw	r2,-20(fp)
  80fd28:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd2c:	e0bfff17 	ldw	r2,-4(fp)
  80fd30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80fd34:	0001883a 	nop
  80fd38:	e037883a 	mov	sp,fp
  80fd3c:	dfc00117 	ldw	ra,4(sp)
  80fd40:	df000017 	ldw	fp,0(sp)
  80fd44:	dec00204 	addi	sp,sp,8
  80fd48:	f800283a 	ret

0080fd4c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80fd4c:	defff704 	addi	sp,sp,-36
  80fd50:	dfc00815 	stw	ra,32(sp)
  80fd54:	df000715 	stw	fp,28(sp)
  80fd58:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80fd5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80fd60:	081b2040 	call	81b204 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd64:	0005303a 	rdctl	r2,status
  80fd68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd6c:	e0fffd17 	ldw	r3,-12(fp)
  80fd70:	00bfff84 	movi	r2,-2
  80fd74:	1884703a 	and	r2,r3,r2
  80fd78:	1001703a 	wrctl	status,r2
  
  return context;
  80fd7c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80fd80:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  80fd84:	d0a09b17 	ldw	r2,-32148(gp)
  80fd88:	10800044 	addi	r2,r2,1
  80fd8c:	d0a09b15 	stw	r2,-32148(gp)
  80fd90:	e0bffb17 	ldw	r2,-20(fp)
  80fd94:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd98:	e0bfff17 	ldw	r2,-4(fp)
  80fd9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80fda0:	d0a08b43 	ldbu	r2,-32211(gp)
  80fda4:	10803fcc 	andi	r2,r2,255
  80fda8:	10800058 	cmpnei	r2,r2,1
  80fdac:	10006a1e 	bne	r2,zero,80ff58 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80fdb0:	d0a08f03 	ldbu	r2,-32196(gp)
  80fdb4:	10803fcc 	andi	r2,r2,255
  80fdb8:	10c00060 	cmpeqi	r3,r2,1
  80fdbc:	1800061e 	bne	r3,zero,80fdd8 <OSTimeTick+0x8c>
  80fdc0:	10c000a0 	cmpeqi	r3,r2,2
  80fdc4:	1800061e 	bne	r3,zero,80fde0 <OSTimeTick+0x94>
  80fdc8:	10000a1e 	bne	r2,zero,80fdf4 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80fdcc:	00800044 	movi	r2,1
  80fdd0:	e0bffa05 	stb	r2,-24(fp)
                 break;
  80fdd4:	00000b06 	br	80fe04 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80fdd8:	e03ffa05 	stb	zero,-24(fp)
                 break;
  80fddc:	00000906 	br	80fe04 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80fde0:	00800044 	movi	r2,1
  80fde4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80fde8:	00800044 	movi	r2,1
  80fdec:	d0a08f05 	stb	r2,-32196(gp)
                 break;
  80fdf0:	00000406 	br	80fe04 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80fdf4:	00800044 	movi	r2,1
  80fdf8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80fdfc:	d0208f05 	stb	zero,-32196(gp)
                 break;
  80fe00:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80fe04:	e0bffa03 	ldbu	r2,-24(fp)
  80fe08:	10005226 	beq	r2,zero,80ff54 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80fe0c:	d0a08e17 	ldw	r2,-32200(gp)
  80fe10:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80fe14:	00004906 	br	80ff3c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe18:	0005303a 	rdctl	r2,status
  80fe1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe20:	e0fffc17 	ldw	r3,-16(fp)
  80fe24:	00bfff84 	movi	r2,-2
  80fe28:	1884703a 	and	r2,r3,r2
  80fe2c:	1001703a 	wrctl	status,r2
  
  return context;
  80fe30:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  80fe34:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80fe38:	e0bff917 	ldw	r2,-28(fp)
  80fe3c:	10800b8b 	ldhu	r2,46(r2)
  80fe40:	10bfffcc 	andi	r2,r2,65535
  80fe44:	10003626 	beq	r2,zero,80ff20 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80fe48:	e0bff917 	ldw	r2,-28(fp)
  80fe4c:	10800b8b 	ldhu	r2,46(r2)
  80fe50:	10bfffc4 	addi	r2,r2,-1
  80fe54:	1007883a 	mov	r3,r2
  80fe58:	e0bff917 	ldw	r2,-28(fp)
  80fe5c:	10c00b8d 	sth	r3,46(r2)
  80fe60:	e0bff917 	ldw	r2,-28(fp)
  80fe64:	10800b8b 	ldhu	r2,46(r2)
  80fe68:	10bfffcc 	andi	r2,r2,65535
  80fe6c:	10002c1e 	bne	r2,zero,80ff20 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80fe70:	e0bff917 	ldw	r2,-28(fp)
  80fe74:	10800c03 	ldbu	r2,48(r2)
  80fe78:	10803fcc 	andi	r2,r2,255
  80fe7c:	10800dcc 	andi	r2,r2,55
  80fe80:	10000b26 	beq	r2,zero,80feb0 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80fe84:	e0bff917 	ldw	r2,-28(fp)
  80fe88:	10c00c03 	ldbu	r3,48(r2)
  80fe8c:	00bff204 	movi	r2,-56
  80fe90:	1884703a 	and	r2,r3,r2
  80fe94:	1007883a 	mov	r3,r2
  80fe98:	e0bff917 	ldw	r2,-28(fp)
  80fe9c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80fea0:	e0bff917 	ldw	r2,-28(fp)
  80fea4:	00c00044 	movi	r3,1
  80fea8:	10c00c45 	stb	r3,49(r2)
  80feac:	00000206 	br	80feb8 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80feb0:	e0bff917 	ldw	r2,-28(fp)
  80feb4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80feb8:	e0bff917 	ldw	r2,-28(fp)
  80febc:	10800c03 	ldbu	r2,48(r2)
  80fec0:	10803fcc 	andi	r2,r2,255
  80fec4:	1080020c 	andi	r2,r2,8
  80fec8:	1000151e 	bne	r2,zero,80ff20 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80fecc:	e0bff917 	ldw	r2,-28(fp)
  80fed0:	10c00d83 	ldbu	r3,54(r2)
  80fed4:	d0a09703 	ldbu	r2,-32164(gp)
  80fed8:	1884b03a 	or	r2,r3,r2
  80fedc:	d0a09705 	stb	r2,-32164(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80fee0:	e0bff917 	ldw	r2,-28(fp)
  80fee4:	10800d03 	ldbu	r2,52(r2)
  80fee8:	10c03fcc 	andi	r3,r2,255
  80feec:	e0bff917 	ldw	r2,-28(fp)
  80fef0:	10800d03 	ldbu	r2,52(r2)
  80fef4:	11003fcc 	andi	r4,r2,255
  80fef8:	d0a09744 	addi	r2,gp,-32163
  80fefc:	2085883a 	add	r2,r4,r2
  80ff00:	11000003 	ldbu	r4,0(r2)
  80ff04:	e0bff917 	ldw	r2,-28(fp)
  80ff08:	10800d43 	ldbu	r2,53(r2)
  80ff0c:	2084b03a 	or	r2,r4,r2
  80ff10:	1009883a 	mov	r4,r2
  80ff14:	d0a09744 	addi	r2,gp,-32163
  80ff18:	1885883a 	add	r2,r3,r2
  80ff1c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80ff20:	e0bff917 	ldw	r2,-28(fp)
  80ff24:	10800517 	ldw	r2,20(r2)
  80ff28:	e0bff915 	stw	r2,-28(fp)
  80ff2c:	e0bffb17 	ldw	r2,-20(fp)
  80ff30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff34:	e0bffe17 	ldw	r2,-8(fp)
  80ff38:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80ff3c:	e0bff917 	ldw	r2,-28(fp)
  80ff40:	10800c83 	ldbu	r2,50(r2)
  80ff44:	10803fcc 	andi	r2,r2,255
  80ff48:	10800518 	cmpnei	r2,r2,20
  80ff4c:	103fb21e 	bne	r2,zero,80fe18 <__alt_mem_epcs_flash_controller_0+0xff806e18>
  80ff50:	00000106 	br	80ff58 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  80ff54:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80ff58:	e037883a 	mov	sp,fp
  80ff5c:	dfc00117 	ldw	ra,4(sp)
  80ff60:	df000017 	ldw	fp,0(sp)
  80ff64:	dec00204 	addi	sp,sp,8
  80ff68:	f800283a 	ret

0080ff6c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80ff6c:	deffff04 	addi	sp,sp,-4
  80ff70:	df000015 	stw	fp,0(sp)
  80ff74:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80ff78:	00804784 	movi	r2,286
}
  80ff7c:	e037883a 	mov	sp,fp
  80ff80:	df000017 	ldw	fp,0(sp)
  80ff84:	dec00104 	addi	sp,sp,4
  80ff88:	f800283a 	ret

0080ff8c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80ff8c:	deffff04 	addi	sp,sp,-4
  80ff90:	df000015 	stw	fp,0(sp)
  80ff94:	d839883a 	mov	fp,sp
}
  80ff98:	0001883a 	nop
  80ff9c:	e037883a 	mov	sp,fp
  80ffa0:	df000017 	ldw	fp,0(sp)
  80ffa4:	dec00104 	addi	sp,sp,4
  80ffa8:	f800283a 	ret

0080ffac <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80ffac:	defff804 	addi	sp,sp,-32
  80ffb0:	dfc00715 	stw	ra,28(sp)
  80ffb4:	df000615 	stw	fp,24(sp)
  80ffb8:	df000604 	addi	fp,sp,24
  80ffbc:	e13ffc15 	stw	r4,-16(fp)
  80ffc0:	e17ffd15 	stw	r5,-12(fp)
  80ffc4:	3007883a 	mov	r3,r6
  80ffc8:	3805883a 	mov	r2,r7
  80ffcc:	e0fffe05 	stb	r3,-8(fp)
  80ffd0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80ffd4:	e0bffc17 	ldw	r2,-16(fp)
  80ffd8:	10800283 	ldbu	r2,10(r2)
  80ffdc:	10c03fcc 	andi	r3,r2,255
  80ffe0:	008020b4 	movhi	r2,130
  80ffe4:	10b04904 	addi	r2,r2,-16092
  80ffe8:	10c5883a 	add	r2,r2,r3
  80ffec:	10800003 	ldbu	r2,0(r2)
  80fff0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80fff4:	e0bffa03 	ldbu	r2,-24(fp)
  80fff8:	e0fffc17 	ldw	r3,-16(fp)
  80fffc:	1885883a 	add	r2,r3,r2
  810000:	108002c4 	addi	r2,r2,11
  810004:	10800003 	ldbu	r2,0(r2)
  810008:	10c03fcc 	andi	r3,r2,255
  81000c:	008020b4 	movhi	r2,130
  810010:	10b04904 	addi	r2,r2,-16092
  810014:	10c5883a 	add	r2,r2,r3
  810018:	10800003 	ldbu	r2,0(r2)
  81001c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  810020:	e0bffa03 	ldbu	r2,-24(fp)
  810024:	100490fa 	slli	r2,r2,3
  810028:	1007883a 	mov	r3,r2
  81002c:	e0bffa43 	ldbu	r2,-23(fp)
  810030:	1885883a 	add	r2,r3,r2
  810034:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  810038:	e0fffa83 	ldbu	r3,-22(fp)
  81003c:	008020f4 	movhi	r2,131
  810040:	10a16904 	addi	r2,r2,-31324
  810044:	18c7883a 	add	r3,r3,r3
  810048:	18c7883a 	add	r3,r3,r3
  81004c:	10c5883a 	add	r2,r2,r3
  810050:	10800017 	ldw	r2,0(r2)
  810054:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  810058:	e0bffb17 	ldw	r2,-20(fp)
  81005c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  810060:	e0bffb17 	ldw	r2,-20(fp)
  810064:	e0fffd17 	ldw	r3,-12(fp)
  810068:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  81006c:	e0bffb17 	ldw	r2,-20(fp)
  810070:	10800c03 	ldbu	r2,48(r2)
  810074:	1007883a 	mov	r3,r2
  810078:	e0bffe03 	ldbu	r2,-8(fp)
  81007c:	0084303a 	nor	r2,zero,r2
  810080:	1884703a 	and	r2,r3,r2
  810084:	1007883a 	mov	r3,r2
  810088:	e0bffb17 	ldw	r2,-20(fp)
  81008c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  810090:	e0bffb17 	ldw	r2,-20(fp)
  810094:	e0ffff03 	ldbu	r3,-4(fp)
  810098:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  81009c:	e0bffb17 	ldw	r2,-20(fp)
  8100a0:	10800c03 	ldbu	r2,48(r2)
  8100a4:	10803fcc 	andi	r2,r2,255
  8100a8:	1080020c 	andi	r2,r2,8
  8100ac:	1000111e 	bne	r2,zero,8100f4 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8100b0:	e0bffb17 	ldw	r2,-20(fp)
  8100b4:	10c00d83 	ldbu	r3,54(r2)
  8100b8:	d0a09703 	ldbu	r2,-32164(gp)
  8100bc:	1884b03a 	or	r2,r3,r2
  8100c0:	d0a09705 	stb	r2,-32164(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  8100c4:	e0fffa03 	ldbu	r3,-24(fp)
  8100c8:	e13ffa03 	ldbu	r4,-24(fp)
  8100cc:	d0a09744 	addi	r2,gp,-32163
  8100d0:	2085883a 	add	r2,r4,r2
  8100d4:	11000003 	ldbu	r4,0(r2)
  8100d8:	e0bffb17 	ldw	r2,-20(fp)
  8100dc:	10800d43 	ldbu	r2,53(r2)
  8100e0:	2084b03a 	or	r2,r4,r2
  8100e4:	1009883a 	mov	r4,r2
  8100e8:	d0a09744 	addi	r2,gp,-32163
  8100ec:	1885883a 	add	r2,r3,r2
  8100f0:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8100f4:	e17ffc17 	ldw	r5,-16(fp)
  8100f8:	e13ffb17 	ldw	r4,-20(fp)
  8100fc:	08103a40 	call	8103a4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  810100:	e0bffb17 	ldw	r2,-20(fp)
  810104:	10800817 	ldw	r2,32(r2)
  810108:	10000826 	beq	r2,zero,81012c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81010c:	e0bffb17 	ldw	r2,-20(fp)
  810110:	10800817 	ldw	r2,32(r2)
  810114:	100b883a 	mov	r5,r2
  810118:	e13ffb17 	ldw	r4,-20(fp)
  81011c:	081045c0 	call	81045c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  810120:	e0bffb17 	ldw	r2,-20(fp)
  810124:	e0fffc17 	ldw	r3,-16(fp)
  810128:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  81012c:	e0bffa83 	ldbu	r2,-22(fp)
}
  810130:	e037883a 	mov	sp,fp
  810134:	dfc00117 	ldw	ra,4(sp)
  810138:	df000017 	ldw	fp,0(sp)
  81013c:	dec00204 	addi	sp,sp,8
  810140:	f800283a 	ret

00810144 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  810144:	defffd04 	addi	sp,sp,-12
  810148:	df000215 	stw	fp,8(sp)
  81014c:	df000204 	addi	fp,sp,8
  810150:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  810154:	d0a09a17 	ldw	r2,-32152(gp)
  810158:	e0ffff17 	ldw	r3,-4(fp)
  81015c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  810160:	d0a09a17 	ldw	r2,-32152(gp)
  810164:	10800d03 	ldbu	r2,52(r2)
  810168:	10803fcc 	andi	r2,r2,255
  81016c:	d0e09a17 	ldw	r3,-32152(gp)
  810170:	18c00d03 	ldbu	r3,52(r3)
  810174:	18c03fcc 	andi	r3,r3,255
  810178:	e13fff17 	ldw	r4,-4(fp)
  81017c:	20c7883a 	add	r3,r4,r3
  810180:	18c002c4 	addi	r3,r3,11
  810184:	19000003 	ldbu	r4,0(r3)
  810188:	d0e09a17 	ldw	r3,-32152(gp)
  81018c:	18c00d43 	ldbu	r3,53(r3)
  810190:	20c6b03a 	or	r3,r4,r3
  810194:	1809883a 	mov	r4,r3
  810198:	e0ffff17 	ldw	r3,-4(fp)
  81019c:	1885883a 	add	r2,r3,r2
  8101a0:	108002c4 	addi	r2,r2,11
  8101a4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8101a8:	e0bfff17 	ldw	r2,-4(fp)
  8101ac:	10c00283 	ldbu	r3,10(r2)
  8101b0:	d0a09a17 	ldw	r2,-32152(gp)
  8101b4:	10800d83 	ldbu	r2,54(r2)
  8101b8:	1884b03a 	or	r2,r3,r2
  8101bc:	1007883a 	mov	r3,r2
  8101c0:	e0bfff17 	ldw	r2,-4(fp)
  8101c4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8101c8:	d0a09a17 	ldw	r2,-32152(gp)
  8101cc:	10800d03 	ldbu	r2,52(r2)
  8101d0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8101d4:	e0fffe03 	ldbu	r3,-8(fp)
  8101d8:	e13ffe03 	ldbu	r4,-8(fp)
  8101dc:	d0a09744 	addi	r2,gp,-32163
  8101e0:	2085883a 	add	r2,r4,r2
  8101e4:	10800003 	ldbu	r2,0(r2)
  8101e8:	1009883a 	mov	r4,r2
  8101ec:	d0a09a17 	ldw	r2,-32152(gp)
  8101f0:	10800d43 	ldbu	r2,53(r2)
  8101f4:	0084303a 	nor	r2,zero,r2
  8101f8:	2084703a 	and	r2,r4,r2
  8101fc:	1009883a 	mov	r4,r2
  810200:	d0a09744 	addi	r2,gp,-32163
  810204:	1885883a 	add	r2,r3,r2
  810208:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  81020c:	e0fffe03 	ldbu	r3,-8(fp)
  810210:	d0a09744 	addi	r2,gp,-32163
  810214:	1885883a 	add	r2,r3,r2
  810218:	10800003 	ldbu	r2,0(r2)
  81021c:	10803fcc 	andi	r2,r2,255
  810220:	1000071e 	bne	r2,zero,810240 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  810224:	d0a09a17 	ldw	r2,-32152(gp)
  810228:	10800d83 	ldbu	r2,54(r2)
  81022c:	0084303a 	nor	r2,zero,r2
  810230:	1007883a 	mov	r3,r2
  810234:	d0a09703 	ldbu	r2,-32164(gp)
  810238:	1884703a 	and	r2,r3,r2
  81023c:	d0a09705 	stb	r2,-32164(gp)
    }
}
  810240:	0001883a 	nop
  810244:	e037883a 	mov	sp,fp
  810248:	df000017 	ldw	fp,0(sp)
  81024c:	dec00104 	addi	sp,sp,4
  810250:	f800283a 	ret

00810254 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  810254:	defffb04 	addi	sp,sp,-20
  810258:	df000415 	stw	fp,16(sp)
  81025c:	df000404 	addi	fp,sp,16
  810260:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  810264:	d0a09a17 	ldw	r2,-32152(gp)
  810268:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  81026c:	d0a09a17 	ldw	r2,-32152(gp)
  810270:	e0ffff17 	ldw	r3,-4(fp)
  810274:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  810278:	e0bfff17 	ldw	r2,-4(fp)
  81027c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  810280:	e0bffc17 	ldw	r2,-16(fp)
  810284:	10800017 	ldw	r2,0(r2)
  810288:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  81028c:	00002006 	br	810310 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  810290:	d0a09a17 	ldw	r2,-32152(gp)
  810294:	10800d03 	ldbu	r2,52(r2)
  810298:	10803fcc 	andi	r2,r2,255
  81029c:	d0e09a17 	ldw	r3,-32152(gp)
  8102a0:	18c00d03 	ldbu	r3,52(r3)
  8102a4:	18c03fcc 	andi	r3,r3,255
  8102a8:	e13ffd17 	ldw	r4,-12(fp)
  8102ac:	20c7883a 	add	r3,r4,r3
  8102b0:	18c002c4 	addi	r3,r3,11
  8102b4:	19000003 	ldbu	r4,0(r3)
  8102b8:	d0e09a17 	ldw	r3,-32152(gp)
  8102bc:	18c00d43 	ldbu	r3,53(r3)
  8102c0:	20c6b03a 	or	r3,r4,r3
  8102c4:	1809883a 	mov	r4,r3
  8102c8:	e0fffd17 	ldw	r3,-12(fp)
  8102cc:	1885883a 	add	r2,r3,r2
  8102d0:	108002c4 	addi	r2,r2,11
  8102d4:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8102d8:	e0bffd17 	ldw	r2,-12(fp)
  8102dc:	10c00283 	ldbu	r3,10(r2)
  8102e0:	d0a09a17 	ldw	r2,-32152(gp)
  8102e4:	10800d83 	ldbu	r2,54(r2)
  8102e8:	1884b03a 	or	r2,r3,r2
  8102ec:	1007883a 	mov	r3,r2
  8102f0:	e0bffd17 	ldw	r2,-12(fp)
  8102f4:	10c00285 	stb	r3,10(r2)
        pevents++;
  8102f8:	e0bffc17 	ldw	r2,-16(fp)
  8102fc:	10800104 	addi	r2,r2,4
  810300:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  810304:	e0bffc17 	ldw	r2,-16(fp)
  810308:	10800017 	ldw	r2,0(r2)
  81030c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  810310:	e0bffd17 	ldw	r2,-12(fp)
  810314:	103fde1e 	bne	r2,zero,810290 <__alt_mem_epcs_flash_controller_0+0xff807290>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  810318:	d0a09a17 	ldw	r2,-32152(gp)
  81031c:	10800d03 	ldbu	r2,52(r2)
  810320:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  810324:	e0fffe03 	ldbu	r3,-8(fp)
  810328:	e13ffe03 	ldbu	r4,-8(fp)
  81032c:	d0a09744 	addi	r2,gp,-32163
  810330:	2085883a 	add	r2,r4,r2
  810334:	10800003 	ldbu	r2,0(r2)
  810338:	1009883a 	mov	r4,r2
  81033c:	d0a09a17 	ldw	r2,-32152(gp)
  810340:	10800d43 	ldbu	r2,53(r2)
  810344:	0084303a 	nor	r2,zero,r2
  810348:	2084703a 	and	r2,r4,r2
  81034c:	1009883a 	mov	r4,r2
  810350:	d0a09744 	addi	r2,gp,-32163
  810354:	1885883a 	add	r2,r3,r2
  810358:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  81035c:	e0fffe03 	ldbu	r3,-8(fp)
  810360:	d0a09744 	addi	r2,gp,-32163
  810364:	1885883a 	add	r2,r3,r2
  810368:	10800003 	ldbu	r2,0(r2)
  81036c:	10803fcc 	andi	r2,r2,255
  810370:	1000071e 	bne	r2,zero,810390 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  810374:	d0a09a17 	ldw	r2,-32152(gp)
  810378:	10800d83 	ldbu	r2,54(r2)
  81037c:	0084303a 	nor	r2,zero,r2
  810380:	1007883a 	mov	r3,r2
  810384:	d0a09703 	ldbu	r2,-32164(gp)
  810388:	1884703a 	and	r2,r3,r2
  81038c:	d0a09705 	stb	r2,-32164(gp)
    }
}
  810390:	0001883a 	nop
  810394:	e037883a 	mov	sp,fp
  810398:	df000017 	ldw	fp,0(sp)
  81039c:	dec00104 	addi	sp,sp,4
  8103a0:	f800283a 	ret

008103a4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  8103a4:	defffc04 	addi	sp,sp,-16
  8103a8:	df000315 	stw	fp,12(sp)
  8103ac:	df000304 	addi	fp,sp,12
  8103b0:	e13ffe15 	stw	r4,-8(fp)
  8103b4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  8103b8:	e0bffe17 	ldw	r2,-8(fp)
  8103bc:	10800d03 	ldbu	r2,52(r2)
  8103c0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8103c4:	e0bffd03 	ldbu	r2,-12(fp)
  8103c8:	e0fffd03 	ldbu	r3,-12(fp)
  8103cc:	e13fff17 	ldw	r4,-4(fp)
  8103d0:	20c7883a 	add	r3,r4,r3
  8103d4:	18c002c4 	addi	r3,r3,11
  8103d8:	18c00003 	ldbu	r3,0(r3)
  8103dc:	1809883a 	mov	r4,r3
  8103e0:	e0fffe17 	ldw	r3,-8(fp)
  8103e4:	18c00d43 	ldbu	r3,53(r3)
  8103e8:	00c6303a 	nor	r3,zero,r3
  8103ec:	20c6703a 	and	r3,r4,r3
  8103f0:	1809883a 	mov	r4,r3
  8103f4:	e0ffff17 	ldw	r3,-4(fp)
  8103f8:	1885883a 	add	r2,r3,r2
  8103fc:	108002c4 	addi	r2,r2,11
  810400:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  810404:	e0bffd03 	ldbu	r2,-12(fp)
  810408:	e0ffff17 	ldw	r3,-4(fp)
  81040c:	1885883a 	add	r2,r3,r2
  810410:	108002c4 	addi	r2,r2,11
  810414:	10800003 	ldbu	r2,0(r2)
  810418:	10803fcc 	andi	r2,r2,255
  81041c:	10000a1e 	bne	r2,zero,810448 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  810420:	e0bfff17 	ldw	r2,-4(fp)
  810424:	10800283 	ldbu	r2,10(r2)
  810428:	1007883a 	mov	r3,r2
  81042c:	e0bffe17 	ldw	r2,-8(fp)
  810430:	10800d83 	ldbu	r2,54(r2)
  810434:	0084303a 	nor	r2,zero,r2
  810438:	1884703a 	and	r2,r3,r2
  81043c:	1007883a 	mov	r3,r2
  810440:	e0bfff17 	ldw	r2,-4(fp)
  810444:	10c00285 	stb	r3,10(r2)
    }
}
  810448:	0001883a 	nop
  81044c:	e037883a 	mov	sp,fp
  810450:	df000017 	ldw	fp,0(sp)
  810454:	dec00104 	addi	sp,sp,4
  810458:	f800283a 	ret

0081045c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  81045c:	defffa04 	addi	sp,sp,-24
  810460:	df000515 	stw	fp,20(sp)
  810464:	df000504 	addi	fp,sp,20
  810468:	e13ffe15 	stw	r4,-8(fp)
  81046c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  810470:	e0bffe17 	ldw	r2,-8(fp)
  810474:	10800d03 	ldbu	r2,52(r2)
  810478:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  81047c:	e0bffe17 	ldw	r2,-8(fp)
  810480:	10800d83 	ldbu	r2,54(r2)
  810484:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  810488:	e0bffe17 	ldw	r2,-8(fp)
  81048c:	10800d43 	ldbu	r2,53(r2)
  810490:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  810494:	e0bfff17 	ldw	r2,-4(fp)
  810498:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  81049c:	e0bffb17 	ldw	r2,-20(fp)
  8104a0:	10800017 	ldw	r2,0(r2)
  8104a4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8104a8:	00002506 	br	810540 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  8104ac:	e0bffd03 	ldbu	r2,-12(fp)
  8104b0:	e0fffd03 	ldbu	r3,-12(fp)
  8104b4:	e13ffc17 	ldw	r4,-16(fp)
  8104b8:	20c7883a 	add	r3,r4,r3
  8104bc:	18c002c4 	addi	r3,r3,11
  8104c0:	18c00003 	ldbu	r3,0(r3)
  8104c4:	1809883a 	mov	r4,r3
  8104c8:	e0fffd83 	ldbu	r3,-10(fp)
  8104cc:	00c6303a 	nor	r3,zero,r3
  8104d0:	20c6703a 	and	r3,r4,r3
  8104d4:	1809883a 	mov	r4,r3
  8104d8:	e0fffc17 	ldw	r3,-16(fp)
  8104dc:	1885883a 	add	r2,r3,r2
  8104e0:	108002c4 	addi	r2,r2,11
  8104e4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  8104e8:	e0bffd03 	ldbu	r2,-12(fp)
  8104ec:	e0fffc17 	ldw	r3,-16(fp)
  8104f0:	1885883a 	add	r2,r3,r2
  8104f4:	108002c4 	addi	r2,r2,11
  8104f8:	10800003 	ldbu	r2,0(r2)
  8104fc:	10803fcc 	andi	r2,r2,255
  810500:	1000091e 	bne	r2,zero,810528 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  810504:	e0bffc17 	ldw	r2,-16(fp)
  810508:	10800283 	ldbu	r2,10(r2)
  81050c:	1007883a 	mov	r3,r2
  810510:	e0bffd43 	ldbu	r2,-11(fp)
  810514:	0084303a 	nor	r2,zero,r2
  810518:	1884703a 	and	r2,r3,r2
  81051c:	1007883a 	mov	r3,r2
  810520:	e0bffc17 	ldw	r2,-16(fp)
  810524:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  810528:	e0bffb17 	ldw	r2,-20(fp)
  81052c:	10800104 	addi	r2,r2,4
  810530:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  810534:	e0bffb17 	ldw	r2,-20(fp)
  810538:	10800017 	ldw	r2,0(r2)
  81053c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  810540:	e0bffc17 	ldw	r2,-16(fp)
  810544:	103fd91e 	bne	r2,zero,8104ac <__alt_mem_epcs_flash_controller_0+0xff8074ac>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  810548:	0001883a 	nop
  81054c:	e037883a 	mov	sp,fp
  810550:	df000017 	ldw	fp,0(sp)
  810554:	dec00104 	addi	sp,sp,4
  810558:	f800283a 	ret

0081055c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  81055c:	defffc04 	addi	sp,sp,-16
  810560:	df000315 	stw	fp,12(sp)
  810564:	df000304 	addi	fp,sp,12
  810568:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  81056c:	e0bfff17 	ldw	r2,-4(fp)
  810570:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  810574:	e0bfff17 	ldw	r2,-4(fp)
  810578:	108002c4 	addi	r2,r2,11
  81057c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810580:	e03ffe05 	stb	zero,-8(fp)
  810584:	00000706 	br	8105a4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  810588:	e0bffd17 	ldw	r2,-12(fp)
  81058c:	10c00044 	addi	r3,r2,1
  810590:	e0fffd15 	stw	r3,-12(fp)
  810594:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810598:	e0bffe03 	ldbu	r2,-8(fp)
  81059c:	10800044 	addi	r2,r2,1
  8105a0:	e0bffe05 	stb	r2,-8(fp)
  8105a4:	e0bffe03 	ldbu	r2,-8(fp)
  8105a8:	108000f0 	cmpltui	r2,r2,3
  8105ac:	103ff61e 	bne	r2,zero,810588 <__alt_mem_epcs_flash_controller_0+0xff807588>
        *ptbl++ = 0;
    }
}
  8105b0:	0001883a 	nop
  8105b4:	e037883a 	mov	sp,fp
  8105b8:	df000017 	ldw	fp,0(sp)
  8105bc:	dec00104 	addi	sp,sp,4
  8105c0:	f800283a 	ret

008105c4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8105c4:	defffb04 	addi	sp,sp,-20
  8105c8:	dfc00415 	stw	ra,16(sp)
  8105cc:	df000315 	stw	fp,12(sp)
  8105d0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8105d4:	0142d004 	movi	r5,2880
  8105d8:	010020b4 	movhi	r4,130
  8105dc:	211d5504 	addi	r4,r4,30036
  8105e0:	081093c0 	call	81093c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8105e4:	008020b4 	movhi	r2,130
  8105e8:	109d5504 	addi	r2,r2,30036
  8105ec:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  8105f0:	008020b4 	movhi	r2,130
  8105f4:	109d6104 	addi	r2,r2,30084
  8105f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8105fc:	e03ffd0d 	sth	zero,-12(fp)
  810600:	00001306 	br	810650 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810604:	e0bffe17 	ldw	r2,-8(fp)
  810608:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  81060c:	e0bffe17 	ldw	r2,-8(fp)
  810610:	e0ffff17 	ldw	r3,-4(fp)
  810614:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  810618:	e0bffe17 	ldw	r2,-8(fp)
  81061c:	00c00fc4 	movi	r3,63
  810620:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  810624:	e0bffe17 	ldw	r2,-8(fp)
  810628:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  81062c:	e0bffe17 	ldw	r2,-8(fp)
  810630:	10800c04 	addi	r2,r2,48
  810634:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  810638:	e0bfff17 	ldw	r2,-4(fp)
  81063c:	10800c04 	addi	r2,r2,48
  810640:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  810644:	e0bffd0b 	ldhu	r2,-12(fp)
  810648:	10800044 	addi	r2,r2,1
  81064c:	e0bffd0d 	sth	r2,-12(fp)
  810650:	e0bffd0b 	ldhu	r2,-12(fp)
  810654:	10800ef0 	cmpltui	r2,r2,59
  810658:	103fea1e 	bne	r2,zero,810604 <__alt_mem_epcs_flash_controller_0+0xff807604>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  81065c:	e0bffe17 	ldw	r2,-8(fp)
  810660:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  810664:	e0bffe17 	ldw	r2,-8(fp)
  810668:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  81066c:	e0bffe17 	ldw	r2,-8(fp)
  810670:	00c00fc4 	movi	r3,63
  810674:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  810678:	e0bffe17 	ldw	r2,-8(fp)
  81067c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  810680:	008020b4 	movhi	r2,130
  810684:	109d5504 	addi	r2,r2,30036
  810688:	d0a09815 	stw	r2,-32160(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  81068c:	0001883a 	nop
  810690:	e037883a 	mov	sp,fp
  810694:	dfc00117 	ldw	ra,4(sp)
  810698:	df000017 	ldw	fp,0(sp)
  81069c:	dec00204 	addi	sp,sp,8
  8106a0:	f800283a 	ret

008106a4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  8106a4:	deffff04 	addi	sp,sp,-4
  8106a8:	df000015 	stw	fp,0(sp)
  8106ac:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  8106b0:	d0209b15 	stw	zero,-32148(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  8106b4:	d0209905 	stb	zero,-32156(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  8106b8:	d0208b05 	stb	zero,-32212(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  8106bc:	d0209345 	stb	zero,-32179(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8106c0:	d0208b45 	stb	zero,-32211(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8106c4:	d0209015 	stw	zero,-32192(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8106c8:	d0208c15 	stw	zero,-32208(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8106cc:	d0209e15 	stw	zero,-32136(gp)
    OSIdleCtrMax  = 0L;
  8106d0:	d0209115 	stw	zero,-32188(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8106d4:	d0209d05 	stb	zero,-32140(gp)
#endif
}
  8106d8:	0001883a 	nop
  8106dc:	e037883a 	mov	sp,fp
  8106e0:	df000017 	ldw	fp,0(sp)
  8106e4:	dec00104 	addi	sp,sp,4
  8106e8:	f800283a 	ret

008106ec <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  8106ec:	defffd04 	addi	sp,sp,-12
  8106f0:	df000215 	stw	fp,8(sp)
  8106f4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  8106f8:	d0209705 	stb	zero,-32164(gp)
    prdytbl       = &OSRdyTbl[0];
  8106fc:	d0a09744 	addi	r2,gp,-32163
  810700:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  810704:	e03ffe05 	stb	zero,-8(fp)
  810708:	00000706 	br	810728 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  81070c:	e0bfff17 	ldw	r2,-4(fp)
  810710:	10c00044 	addi	r3,r2,1
  810714:	e0ffff15 	stw	r3,-4(fp)
  810718:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  81071c:	e0bffe03 	ldbu	r2,-8(fp)
  810720:	10800044 	addi	r2,r2,1
  810724:	e0bffe05 	stb	r2,-8(fp)
  810728:	e0bffe03 	ldbu	r2,-8(fp)
  81072c:	108000f0 	cmpltui	r2,r2,3
  810730:	103ff61e 	bne	r2,zero,81070c <__alt_mem_epcs_flash_controller_0+0xff80770c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  810734:	d0208d45 	stb	zero,-32203(gp)
    OSPrioHighRdy = 0;
  810738:	d0208d05 	stb	zero,-32204(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  81073c:	d0209515 	stw	zero,-32172(gp)
    OSTCBCur      = (OS_TCB *)0;
  810740:	d0209a15 	stw	zero,-32152(gp)
}
  810744:	0001883a 	nop
  810748:	e037883a 	mov	sp,fp
  81074c:	df000017 	ldw	fp,0(sp)
  810750:	dec00104 	addi	sp,sp,4
  810754:	f800283a 	ret

00810758 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  810758:	defff804 	addi	sp,sp,-32
  81075c:	dfc00715 	stw	ra,28(sp)
  810760:	df000615 	stw	fp,24(sp)
  810764:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  810768:	008000c4 	movi	r2,3
  81076c:	d8800415 	stw	r2,16(sp)
  810770:	d8000315 	stw	zero,12(sp)
  810774:	00808004 	movi	r2,512
  810778:	d8800215 	stw	r2,8(sp)
  81077c:	008020b4 	movhi	r2,130
  810780:	109b5504 	addi	r2,r2,27988
  810784:	d8800115 	stw	r2,4(sp)
  810788:	00bfffd4 	movui	r2,65535
  81078c:	d8800015 	stw	r2,0(sp)
  810790:	01c00504 	movi	r7,20
  810794:	018020b4 	movhi	r6,130
  810798:	319d5404 	addi	r6,r6,30032
  81079c:	000b883a 	mov	r5,zero
  8107a0:	01002074 	movhi	r4,129
  8107a4:	21030104 	addi	r4,r4,3076
  8107a8:	08152d00 	call	8152d0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  8107ac:	e1bfff04 	addi	r6,fp,-4
  8107b0:	014020b4 	movhi	r5,130
  8107b4:	29708904 	addi	r5,r5,-15836
  8107b8:	01000504 	movi	r4,20
  8107bc:	0815ae00 	call	815ae0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  8107c0:	0001883a 	nop
  8107c4:	e037883a 	mov	sp,fp
  8107c8:	dfc00117 	ldw	ra,4(sp)
  8107cc:	df000017 	ldw	fp,0(sp)
  8107d0:	dec00204 	addi	sp,sp,8
  8107d4:	f800283a 	ret

008107d8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8107d8:	defff804 	addi	sp,sp,-32
  8107dc:	dfc00715 	stw	ra,28(sp)
  8107e0:	df000615 	stw	fp,24(sp)
  8107e4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8107e8:	008000c4 	movi	r2,3
  8107ec:	d8800415 	stw	r2,16(sp)
  8107f0:	d8000315 	stw	zero,12(sp)
  8107f4:	00808004 	movi	r2,512
  8107f8:	d8800215 	stw	r2,8(sp)
  8107fc:	008020b4 	movhi	r2,130
  810800:	1098dd04 	addi	r2,r2,25460
  810804:	d8800115 	stw	r2,4(sp)
  810808:	00bfff94 	movui	r2,65534
  81080c:	d8800015 	stw	r2,0(sp)
  810810:	01c004c4 	movi	r7,19
  810814:	018020b4 	movhi	r6,130
  810818:	319adc04 	addi	r6,r6,27504
  81081c:	000b883a 	mov	r5,zero
  810820:	01002074 	movhi	r4,129
  810824:	21031804 	addi	r4,r4,3168
  810828:	08152d00 	call	8152d0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  81082c:	e1bfff04 	addi	r6,fp,-4
  810830:	014020b4 	movhi	r5,130
  810834:	29708d04 	addi	r5,r5,-15820
  810838:	010004c4 	movi	r4,19
  81083c:	0815ae00 	call	815ae0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  810840:	0001883a 	nop
  810844:	e037883a 	mov	sp,fp
  810848:	dfc00117 	ldw	ra,4(sp)
  81084c:	df000017 	ldw	fp,0(sp)
  810850:	dec00204 	addi	sp,sp,8
  810854:	f800283a 	ret

00810858 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  810858:	defffb04 	addi	sp,sp,-20
  81085c:	dfc00415 	stw	ra,16(sp)
  810860:	df000315 	stw	fp,12(sp)
  810864:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  810868:	01414404 	movi	r5,1296
  81086c:	010020f4 	movhi	r4,131
  810870:	21202504 	addi	r4,r4,-32620
  810874:	081093c0 	call	81093c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  810878:	01401504 	movi	r5,84
  81087c:	010020f4 	movhi	r4,131
  810880:	21216904 	addi	r4,r4,-31324
  810884:	081093c0 	call	81093c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  810888:	008020f4 	movhi	r2,131
  81088c:	10a02504 	addi	r2,r2,-32620
  810890:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  810894:	008020f4 	movhi	r2,131
  810898:	10a04004 	addi	r2,r2,-32512
  81089c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8108a0:	e03ffd05 	stb	zero,-12(fp)
  8108a4:	00001106 	br	8108ec <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  8108a8:	e0bffe17 	ldw	r2,-8(fp)
  8108ac:	e0ffff17 	ldw	r3,-4(fp)
  8108b0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  8108b4:	e0bffe17 	ldw	r2,-8(fp)
  8108b8:	00c00fc4 	movi	r3,63
  8108bc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8108c0:	e0bffe17 	ldw	r2,-8(fp)
  8108c4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  8108c8:	e0bffe17 	ldw	r2,-8(fp)
  8108cc:	10801b04 	addi	r2,r2,108
  8108d0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8108d4:	e0bfff17 	ldw	r2,-4(fp)
  8108d8:	10801b04 	addi	r2,r2,108
  8108dc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8108e0:	e0bffd03 	ldbu	r2,-12(fp)
  8108e4:	10800044 	addi	r2,r2,1
  8108e8:	e0bffd05 	stb	r2,-12(fp)
  8108ec:	e0bffd03 	ldbu	r2,-12(fp)
  8108f0:	108002f0 	cmpltui	r2,r2,11
  8108f4:	103fec1e 	bne	r2,zero,8108a8 <__alt_mem_epcs_flash_controller_0+0xff8078a8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  8108f8:	e0bffe17 	ldw	r2,-8(fp)
  8108fc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  810900:	e0bffe17 	ldw	r2,-8(fp)
  810904:	00c00fc4 	movi	r3,63
  810908:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  81090c:	e0bffe17 	ldw	r2,-8(fp)
  810910:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  810914:	d0208e15 	stw	zero,-32200(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  810918:	008020f4 	movhi	r2,131
  81091c:	10a02504 	addi	r2,r2,-32620
  810920:	d0a09215 	stw	r2,-32184(gp)
}
  810924:	0001883a 	nop
  810928:	e037883a 	mov	sp,fp
  81092c:	dfc00117 	ldw	ra,4(sp)
  810930:	df000017 	ldw	fp,0(sp)
  810934:	dec00204 	addi	sp,sp,8
  810938:	f800283a 	ret

0081093c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  81093c:	defffd04 	addi	sp,sp,-12
  810940:	df000215 	stw	fp,8(sp)
  810944:	df000204 	addi	fp,sp,8
  810948:	e13ffe15 	stw	r4,-8(fp)
  81094c:	2805883a 	mov	r2,r5
  810950:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  810954:	00000706 	br	810974 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  810958:	e0bffe17 	ldw	r2,-8(fp)
  81095c:	10c00044 	addi	r3,r2,1
  810960:	e0fffe15 	stw	r3,-8(fp)
  810964:	10000005 	stb	zero,0(r2)
        size--;
  810968:	e0bfff0b 	ldhu	r2,-4(fp)
  81096c:	10bfffc4 	addi	r2,r2,-1
  810970:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  810974:	e0bfff0b 	ldhu	r2,-4(fp)
  810978:	103ff71e 	bne	r2,zero,810958 <__alt_mem_epcs_flash_controller_0+0xff807958>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  81097c:	0001883a 	nop
  810980:	e037883a 	mov	sp,fp
  810984:	df000017 	ldw	fp,0(sp)
  810988:	dec00104 	addi	sp,sp,4
  81098c:	f800283a 	ret

00810990 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  810990:	defffc04 	addi	sp,sp,-16
  810994:	df000315 	stw	fp,12(sp)
  810998:	df000304 	addi	fp,sp,12
  81099c:	e13ffd15 	stw	r4,-12(fp)
  8109a0:	e17ffe15 	stw	r5,-8(fp)
  8109a4:	3005883a 	mov	r2,r6
  8109a8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  8109ac:	00000b06 	br	8109dc <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  8109b0:	e0bffd17 	ldw	r2,-12(fp)
  8109b4:	10c00044 	addi	r3,r2,1
  8109b8:	e0fffd15 	stw	r3,-12(fp)
  8109bc:	e0fffe17 	ldw	r3,-8(fp)
  8109c0:	19000044 	addi	r4,r3,1
  8109c4:	e13ffe15 	stw	r4,-8(fp)
  8109c8:	18c00003 	ldbu	r3,0(r3)
  8109cc:	10c00005 	stb	r3,0(r2)
        size--;
  8109d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8109d4:	10bfffc4 	addi	r2,r2,-1
  8109d8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8109dc:	e0bfff0b 	ldhu	r2,-4(fp)
  8109e0:	103ff31e 	bne	r2,zero,8109b0 <__alt_mem_epcs_flash_controller_0+0xff8079b0>
        *pdest++ = *psrc++;
        size--;
    }
}
  8109e4:	0001883a 	nop
  8109e8:	e037883a 	mov	sp,fp
  8109ec:	df000017 	ldw	fp,0(sp)
  8109f0:	dec00104 	addi	sp,sp,4
  8109f4:	f800283a 	ret

008109f8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  8109f8:	defffb04 	addi	sp,sp,-20
  8109fc:	dfc00415 	stw	ra,16(sp)
  810a00:	df000315 	stw	fp,12(sp)
  810a04:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  810a08:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a0c:	0005303a 	rdctl	r2,status
  810a10:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a14:	e0ffff17 	ldw	r3,-4(fp)
  810a18:	00bfff84 	movi	r2,-2
  810a1c:	1884703a 	and	r2,r3,r2
  810a20:	1001703a 	wrctl	status,r2
  
  return context;
  810a24:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  810a28:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  810a2c:	d0a09903 	ldbu	r2,-32156(gp)
  810a30:	10803fcc 	andi	r2,r2,255
  810a34:	10001a1e 	bne	r2,zero,810aa0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  810a38:	d0a08b03 	ldbu	r2,-32212(gp)
  810a3c:	10803fcc 	andi	r2,r2,255
  810a40:	1000171e 	bne	r2,zero,810aa0 <OS_Sched+0xa8>
            OS_SchedNew();
  810a44:	0810ac80 	call	810ac8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  810a48:	d0e08d03 	ldbu	r3,-32204(gp)
  810a4c:	d0a08d43 	ldbu	r2,-32203(gp)
  810a50:	18c03fcc 	andi	r3,r3,255
  810a54:	10803fcc 	andi	r2,r2,255
  810a58:	18801126 	beq	r3,r2,810aa0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  810a5c:	d0a08d03 	ldbu	r2,-32204(gp)
  810a60:	10c03fcc 	andi	r3,r2,255
  810a64:	008020f4 	movhi	r2,131
  810a68:	10a16904 	addi	r2,r2,-31324
  810a6c:	18c7883a 	add	r3,r3,r3
  810a70:	18c7883a 	add	r3,r3,r3
  810a74:	10c5883a 	add	r2,r2,r3
  810a78:	10800017 	ldw	r2,0(r2)
  810a7c:	d0a09515 	stw	r2,-32172(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  810a80:	d0a09517 	ldw	r2,-32172(gp)
  810a84:	10c00e17 	ldw	r3,56(r2)
  810a88:	18c00044 	addi	r3,r3,1
  810a8c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  810a90:	d0a09017 	ldw	r2,-32192(gp)
  810a94:	10800044 	addi	r2,r2,1
  810a98:	d0a09015 	stw	r2,-32192(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  810a9c:	081af500 	call	81af50 <OSCtxSw>
  810aa0:	e0bffd17 	ldw	r2,-12(fp)
  810aa4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810aa8:	e0bffe17 	ldw	r2,-8(fp)
  810aac:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  810ab0:	0001883a 	nop
  810ab4:	e037883a 	mov	sp,fp
  810ab8:	dfc00117 	ldw	ra,4(sp)
  810abc:	df000017 	ldw	fp,0(sp)
  810ac0:	dec00204 	addi	sp,sp,8
  810ac4:	f800283a 	ret

00810ac8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  810ac8:	defffe04 	addi	sp,sp,-8
  810acc:	df000115 	stw	fp,4(sp)
  810ad0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  810ad4:	d0a09703 	ldbu	r2,-32164(gp)
  810ad8:	10c03fcc 	andi	r3,r2,255
  810adc:	008020b4 	movhi	r2,130
  810ae0:	10b04904 	addi	r2,r2,-16092
  810ae4:	10c5883a 	add	r2,r2,r3
  810ae8:	10800003 	ldbu	r2,0(r2)
  810aec:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  810af0:	e0bfff03 	ldbu	r2,-4(fp)
  810af4:	100490fa 	slli	r2,r2,3
  810af8:	1009883a 	mov	r4,r2
  810afc:	e0ffff03 	ldbu	r3,-4(fp)
  810b00:	d0a09744 	addi	r2,gp,-32163
  810b04:	1885883a 	add	r2,r3,r2
  810b08:	10800003 	ldbu	r2,0(r2)
  810b0c:	10c03fcc 	andi	r3,r2,255
  810b10:	008020b4 	movhi	r2,130
  810b14:	10b04904 	addi	r2,r2,-16092
  810b18:	10c5883a 	add	r2,r2,r3
  810b1c:	10800003 	ldbu	r2,0(r2)
  810b20:	2085883a 	add	r2,r4,r2
  810b24:	d0a08d05 	stb	r2,-32204(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  810b28:	0001883a 	nop
  810b2c:	e037883a 	mov	sp,fp
  810b30:	df000017 	ldw	fp,0(sp)
  810b34:	dec00104 	addi	sp,sp,4
  810b38:	f800283a 	ret

00810b3c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  810b3c:	defffc04 	addi	sp,sp,-16
  810b40:	df000315 	stw	fp,12(sp)
  810b44:	df000304 	addi	fp,sp,12
  810b48:	e13ffe15 	stw	r4,-8(fp)
  810b4c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  810b50:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  810b54:	00000b06 	br	810b84 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  810b58:	e0bffe17 	ldw	r2,-8(fp)
  810b5c:	10c00044 	addi	r3,r2,1
  810b60:	e0fffe15 	stw	r3,-8(fp)
  810b64:	e0ffff17 	ldw	r3,-4(fp)
  810b68:	19000044 	addi	r4,r3,1
  810b6c:	e13fff15 	stw	r4,-4(fp)
  810b70:	18c00003 	ldbu	r3,0(r3)
  810b74:	10c00005 	stb	r3,0(r2)
        len++;
  810b78:	e0bffd03 	ldbu	r2,-12(fp)
  810b7c:	10800044 	addi	r2,r2,1
  810b80:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  810b84:	e0bfff17 	ldw	r2,-4(fp)
  810b88:	10800003 	ldbu	r2,0(r2)
  810b8c:	10803fcc 	andi	r2,r2,255
  810b90:	103ff11e 	bne	r2,zero,810b58 <__alt_mem_epcs_flash_controller_0+0xff807b58>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  810b94:	e0bffe17 	ldw	r2,-8(fp)
  810b98:	10000005 	stb	zero,0(r2)
    return (len);
  810b9c:	e0bffd03 	ldbu	r2,-12(fp)
}
  810ba0:	e037883a 	mov	sp,fp
  810ba4:	df000017 	ldw	fp,0(sp)
  810ba8:	dec00104 	addi	sp,sp,4
  810bac:	f800283a 	ret

00810bb0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  810bb0:	defffd04 	addi	sp,sp,-12
  810bb4:	df000215 	stw	fp,8(sp)
  810bb8:	df000204 	addi	fp,sp,8
  810bbc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  810bc0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  810bc4:	00000606 	br	810be0 <OS_StrLen+0x30>
        psrc++;
  810bc8:	e0bfff17 	ldw	r2,-4(fp)
  810bcc:	10800044 	addi	r2,r2,1
  810bd0:	e0bfff15 	stw	r2,-4(fp)
        len++;
  810bd4:	e0bffe03 	ldbu	r2,-8(fp)
  810bd8:	10800044 	addi	r2,r2,1
  810bdc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  810be0:	e0bfff17 	ldw	r2,-4(fp)
  810be4:	10800003 	ldbu	r2,0(r2)
  810be8:	10803fcc 	andi	r2,r2,255
  810bec:	103ff61e 	bne	r2,zero,810bc8 <__alt_mem_epcs_flash_controller_0+0xff807bc8>
        psrc++;
        len++;
    }
    return (len);
  810bf0:	e0bffe03 	ldbu	r2,-8(fp)
}
  810bf4:	e037883a 	mov	sp,fp
  810bf8:	df000017 	ldw	fp,0(sp)
  810bfc:	dec00104 	addi	sp,sp,4
  810c00:	f800283a 	ret

00810c04 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  810c04:	defffa04 	addi	sp,sp,-24
  810c08:	dfc00515 	stw	ra,20(sp)
  810c0c:	df000415 	stw	fp,16(sp)
  810c10:	df000404 	addi	fp,sp,16
  810c14:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810c18:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c1c:	0005303a 	rdctl	r2,status
  810c20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c24:	e0fffd17 	ldw	r3,-12(fp)
  810c28:	00bfff84 	movi	r2,-2
  810c2c:	1884703a 	and	r2,r3,r2
  810c30:	1001703a 	wrctl	status,r2
  
  return context;
  810c34:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  810c38:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  810c3c:	d0a08c17 	ldw	r2,-32208(gp)
  810c40:	10800044 	addi	r2,r2,1
  810c44:	d0a08c15 	stw	r2,-32208(gp)
  810c48:	e0bffc17 	ldw	r2,-16(fp)
  810c4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c50:	e0bffe17 	ldw	r2,-8(fp)
  810c54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  810c58:	081b2640 	call	81b264 <OSTaskIdleHook>
    }
  810c5c:	003fef06 	br	810c1c <__alt_mem_epcs_flash_controller_0+0xff807c1c>

00810c60 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  810c60:	defffa04 	addi	sp,sp,-24
  810c64:	dfc00515 	stw	ra,20(sp)
  810c68:	df000415 	stw	fp,16(sp)
  810c6c:	df000404 	addi	fp,sp,16
  810c70:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810c74:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810c78:	00000206 	br	810c84 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  810c7c:	01003204 	movi	r4,200
  810c80:	08163a00 	call	8163a0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810c84:	d0a09d03 	ldbu	r2,-32140(gp)
  810c88:	10803fcc 	andi	r2,r2,255
  810c8c:	103ffb26 	beq	r2,zero,810c7c <__alt_mem_epcs_flash_controller_0+0xff807c7c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  810c90:	d0a09117 	ldw	r2,-32188(gp)
  810c94:	01401904 	movi	r5,100
  810c98:	1009883a 	mov	r4,r2
  810c9c:	08012980 	call	801298 <__udivsi3>
  810ca0:	d0a09115 	stw	r2,-32188(gp)
    if (OSIdleCtrMax == 0L) {
  810ca4:	d0a09117 	ldw	r2,-32188(gp)
  810ca8:	1000031e 	bne	r2,zero,810cb8 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  810cac:	d0209305 	stb	zero,-32180(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  810cb0:	01003fc4 	movi	r4,255
  810cb4:	08160280 	call	816028 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810cb8:	0005303a 	rdctl	r2,status
  810cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810cc0:	e0fffd17 	ldw	r3,-12(fp)
  810cc4:	00bfff84 	movi	r2,-2
  810cc8:	1884703a 	and	r2,r3,r2
  810ccc:	1001703a 	wrctl	status,r2
  
  return context;
  810cd0:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  810cd4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  810cd8:	d0a08c17 	ldw	r2,-32208(gp)
  810cdc:	d0a09e15 	stw	r2,-32136(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  810ce0:	d0208c15 	stw	zero,-32208(gp)
  810ce4:	e0bffc17 	ldw	r2,-16(fp)
  810ce8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810cec:	e0bffe17 	ldw	r2,-8(fp)
  810cf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  810cf4:	d0a09e17 	ldw	r2,-32136(gp)
  810cf8:	d0e09117 	ldw	r3,-32188(gp)
  810cfc:	180b883a 	mov	r5,r3
  810d00:	1009883a 	mov	r4,r2
  810d04:	08012980 	call	801298 <__udivsi3>
  810d08:	1007883a 	mov	r3,r2
  810d0c:	00801904 	movi	r2,100
  810d10:	10c5c83a 	sub	r2,r2,r3
  810d14:	d0a09305 	stb	r2,-32180(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  810d18:	081b1e40 	call	81b1e4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  810d1c:	0810d2c0 	call	810d2c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  810d20:	01001904 	movi	r4,100
  810d24:	08163a00 	call	8163a0 <OSTimeDly>
    }
  810d28:	003fe306 	br	810cb8 <__alt_mem_epcs_flash_controller_0+0xff807cb8>

00810d2c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  810d2c:	defffa04 	addi	sp,sp,-24
  810d30:	dfc00515 	stw	ra,20(sp)
  810d34:	df000415 	stw	fp,16(sp)
  810d38:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  810d3c:	e03ffc05 	stb	zero,-16(fp)
  810d40:	00002406 	br	810dd4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  810d44:	e0bffc03 	ldbu	r2,-16(fp)
  810d48:	e0fffe04 	addi	r3,fp,-8
  810d4c:	180b883a 	mov	r5,r3
  810d50:	1009883a 	mov	r4,r2
  810d54:	0815e680 	call	815e68 <OSTaskStkChk>
  810d58:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  810d5c:	e0bffc43 	ldbu	r2,-15(fp)
  810d60:	1000191e 	bne	r2,zero,810dc8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  810d64:	e0fffc03 	ldbu	r3,-16(fp)
  810d68:	008020f4 	movhi	r2,131
  810d6c:	10a16904 	addi	r2,r2,-31324
  810d70:	18c7883a 	add	r3,r3,r3
  810d74:	18c7883a 	add	r3,r3,r3
  810d78:	10c5883a 	add	r2,r2,r3
  810d7c:	10800017 	ldw	r2,0(r2)
  810d80:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  810d84:	e0bffd17 	ldw	r2,-12(fp)
  810d88:	10000f26 	beq	r2,zero,810dc8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  810d8c:	e0bffd17 	ldw	r2,-12(fp)
  810d90:	10800060 	cmpeqi	r2,r2,1
  810d94:	10000c1e 	bne	r2,zero,810dc8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  810d98:	e0bffd17 	ldw	r2,-12(fp)
  810d9c:	10c00217 	ldw	r3,8(r2)
  810da0:	e0bffd17 	ldw	r2,-12(fp)
  810da4:	10800317 	ldw	r2,12(r2)
  810da8:	1085883a 	add	r2,r2,r2
  810dac:	1085883a 	add	r2,r2,r2
  810db0:	1887883a 	add	r3,r3,r2
  810db4:	e0bffd17 	ldw	r2,-12(fp)
  810db8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  810dbc:	e0ffff17 	ldw	r3,-4(fp)
  810dc0:	e0bffd17 	ldw	r2,-12(fp)
  810dc4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  810dc8:	e0bffc03 	ldbu	r2,-16(fp)
  810dcc:	10800044 	addi	r2,r2,1
  810dd0:	e0bffc05 	stb	r2,-16(fp)
  810dd4:	e0bffc03 	ldbu	r2,-16(fp)
  810dd8:	10800570 	cmpltui	r2,r2,21
  810ddc:	103fd91e 	bne	r2,zero,810d44 <__alt_mem_epcs_flash_controller_0+0xff807d44>
#endif
                }
            }
        }
    }
}
  810de0:	0001883a 	nop
  810de4:	e037883a 	mov	sp,fp
  810de8:	dfc00117 	ldw	ra,4(sp)
  810dec:	df000017 	ldw	fp,0(sp)
  810df0:	dec00204 	addi	sp,sp,8
  810df4:	f800283a 	ret

00810df8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  810df8:	defff204 	addi	sp,sp,-56
  810dfc:	dfc00d15 	stw	ra,52(sp)
  810e00:	df000c15 	stw	fp,48(sp)
  810e04:	df000c04 	addi	fp,sp,48
  810e08:	e17ffc15 	stw	r5,-16(fp)
  810e0c:	e1bffd15 	stw	r6,-12(fp)
  810e10:	3807883a 	mov	r3,r7
  810e14:	e0800417 	ldw	r2,16(fp)
  810e18:	e13ffb05 	stb	r4,-20(fp)
  810e1c:	e0fffe0d 	sth	r3,-8(fp)
  810e20:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810e24:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e28:	0005303a 	rdctl	r2,status
  810e2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e30:	e0fffa17 	ldw	r3,-24(fp)
  810e34:	00bfff84 	movi	r2,-2
  810e38:	1884703a 	and	r2,r3,r2
  810e3c:	1001703a 	wrctl	status,r2
  
  return context;
  810e40:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  810e44:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  810e48:	d0a09217 	ldw	r2,-32184(gp)
  810e4c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  810e50:	e0bff617 	ldw	r2,-40(fp)
  810e54:	10009326 	beq	r2,zero,8110a4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  810e58:	e0bff617 	ldw	r2,-40(fp)
  810e5c:	10800517 	ldw	r2,20(r2)
  810e60:	d0a09215 	stw	r2,-32184(gp)
  810e64:	e0bff417 	ldw	r2,-48(fp)
  810e68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e6c:	e0bff817 	ldw	r2,-32(fp)
  810e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  810e74:	e0bff617 	ldw	r2,-40(fp)
  810e78:	e0fffc17 	ldw	r3,-16(fp)
  810e7c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  810e80:	e0bff617 	ldw	r2,-40(fp)
  810e84:	e0fffb03 	ldbu	r3,-20(fp)
  810e88:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  810e8c:	e0bff617 	ldw	r2,-40(fp)
  810e90:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  810e94:	e0bff617 	ldw	r2,-40(fp)
  810e98:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  810e9c:	e0bff617 	ldw	r2,-40(fp)
  810ea0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  810ea4:	e0bff617 	ldw	r2,-40(fp)
  810ea8:	e0c00317 	ldw	r3,12(fp)
  810eac:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  810eb0:	e0bff617 	ldw	r2,-40(fp)
  810eb4:	e0c00217 	ldw	r3,8(fp)
  810eb8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  810ebc:	e0bff617 	ldw	r2,-40(fp)
  810ec0:	e0fffd17 	ldw	r3,-12(fp)
  810ec4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  810ec8:	e0bff617 	ldw	r2,-40(fp)
  810ecc:	e0ffff0b 	ldhu	r3,-4(fp)
  810ed0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  810ed4:	e0bff617 	ldw	r2,-40(fp)
  810ed8:	e0fffe0b 	ldhu	r3,-8(fp)
  810edc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  810ee0:	e0bff617 	ldw	r2,-40(fp)
  810ee4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  810ee8:	e0bffb03 	ldbu	r2,-20(fp)
  810eec:	1004d0fa 	srli	r2,r2,3
  810ef0:	1007883a 	mov	r3,r2
  810ef4:	e0bff617 	ldw	r2,-40(fp)
  810ef8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  810efc:	e0bffb03 	ldbu	r2,-20(fp)
  810f00:	108001cc 	andi	r2,r2,7
  810f04:	1007883a 	mov	r3,r2
  810f08:	e0bff617 	ldw	r2,-40(fp)
  810f0c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  810f10:	e0bff617 	ldw	r2,-40(fp)
  810f14:	10800d03 	ldbu	r2,52(r2)
  810f18:	10803fcc 	andi	r2,r2,255
  810f1c:	00c00044 	movi	r3,1
  810f20:	1884983a 	sll	r2,r3,r2
  810f24:	1007883a 	mov	r3,r2
  810f28:	e0bff617 	ldw	r2,-40(fp)
  810f2c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  810f30:	e0bff617 	ldw	r2,-40(fp)
  810f34:	10800cc3 	ldbu	r2,51(r2)
  810f38:	10803fcc 	andi	r2,r2,255
  810f3c:	00c00044 	movi	r3,1
  810f40:	1884983a 	sll	r2,r3,r2
  810f44:	1007883a 	mov	r3,r2
  810f48:	e0bff617 	ldw	r2,-40(fp)
  810f4c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  810f50:	e0bff617 	ldw	r2,-40(fp)
  810f54:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  810f58:	e0bff617 	ldw	r2,-40(fp)
  810f5c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  810f60:	e0bff617 	ldw	r2,-40(fp)
  810f64:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  810f68:	e0bff617 	ldw	r2,-40(fp)
  810f6c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  810f70:	e0bff617 	ldw	r2,-40(fp)
  810f74:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  810f78:	e0bff617 	ldw	r2,-40(fp)
  810f7c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  810f80:	e0bff617 	ldw	r2,-40(fp)
  810f84:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  810f88:	e0bff617 	ldw	r2,-40(fp)
  810f8c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  810f90:	e0bff617 	ldw	r2,-40(fp)
  810f94:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  810f98:	e0bff617 	ldw	r2,-40(fp)
  810f9c:	00c00fc4 	movi	r3,63
  810fa0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  810fa4:	e0bff617 	ldw	r2,-40(fp)
  810fa8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  810fac:	e13ff617 	ldw	r4,-40(fp)
  810fb0:	081b2840 	call	81b284 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  810fb4:	e13ff617 	ldw	r4,-40(fp)
  810fb8:	081b17c0 	call	81b17c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fbc:	0005303a 	rdctl	r2,status
  810fc0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810fc4:	e0fff517 	ldw	r3,-44(fp)
  810fc8:	00bfff84 	movi	r2,-2
  810fcc:	1884703a 	and	r2,r3,r2
  810fd0:	1001703a 	wrctl	status,r2
  
  return context;
  810fd4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  810fd8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  810fdc:	e0fffb03 	ldbu	r3,-20(fp)
  810fe0:	008020f4 	movhi	r2,131
  810fe4:	10a16904 	addi	r2,r2,-31324
  810fe8:	18c7883a 	add	r3,r3,r3
  810fec:	18c7883a 	add	r3,r3,r3
  810ff0:	10c5883a 	add	r2,r2,r3
  810ff4:	e0fff617 	ldw	r3,-40(fp)
  810ff8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  810ffc:	d0e08e17 	ldw	r3,-32200(gp)
  811000:	e0bff617 	ldw	r2,-40(fp)
  811004:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  811008:	e0bff617 	ldw	r2,-40(fp)
  81100c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  811010:	d0a08e17 	ldw	r2,-32200(gp)
  811014:	10000326 	beq	r2,zero,811024 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  811018:	d0a08e17 	ldw	r2,-32200(gp)
  81101c:	e0fff617 	ldw	r3,-40(fp)
  811020:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  811024:	e0bff617 	ldw	r2,-40(fp)
  811028:	d0a08e15 	stw	r2,-32200(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  81102c:	e0bff617 	ldw	r2,-40(fp)
  811030:	10c00d83 	ldbu	r3,54(r2)
  811034:	d0a09703 	ldbu	r2,-32164(gp)
  811038:	1884b03a 	or	r2,r3,r2
  81103c:	d0a09705 	stb	r2,-32164(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  811040:	e0bff617 	ldw	r2,-40(fp)
  811044:	10800d03 	ldbu	r2,52(r2)
  811048:	10c03fcc 	andi	r3,r2,255
  81104c:	e0bff617 	ldw	r2,-40(fp)
  811050:	10800d03 	ldbu	r2,52(r2)
  811054:	11003fcc 	andi	r4,r2,255
  811058:	d0a09744 	addi	r2,gp,-32163
  81105c:	2085883a 	add	r2,r4,r2
  811060:	11000003 	ldbu	r4,0(r2)
  811064:	e0bff617 	ldw	r2,-40(fp)
  811068:	10800d43 	ldbu	r2,53(r2)
  81106c:	2084b03a 	or	r2,r4,r2
  811070:	1009883a 	mov	r4,r2
  811074:	d0a09744 	addi	r2,gp,-32163
  811078:	1885883a 	add	r2,r3,r2
  81107c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  811080:	d0a09343 	ldbu	r2,-32179(gp)
  811084:	10800044 	addi	r2,r2,1
  811088:	d0a09345 	stb	r2,-32179(gp)
  81108c:	e0bff417 	ldw	r2,-48(fp)
  811090:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811094:	e0bff717 	ldw	r2,-36(fp)
  811098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81109c:	0005883a 	mov	r2,zero
  8110a0:	00000506 	br	8110b8 <OS_TCBInit+0x2c0>
  8110a4:	e0bff417 	ldw	r2,-48(fp)
  8110a8:	e0bff915 	stw	r2,-28(fp)
  8110ac:	e0bff917 	ldw	r2,-28(fp)
  8110b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  8110b4:	00801084 	movi	r2,66
}
  8110b8:	e037883a 	mov	sp,fp
  8110bc:	dfc00117 	ldw	ra,4(sp)
  8110c0:	df000017 	ldw	fp,0(sp)
  8110c4:	dec00204 	addi	sp,sp,8
  8110c8:	f800283a 	ret

008110cc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8110cc:	defffe04 	addi	sp,sp,-8
  8110d0:	df000115 	stw	fp,4(sp)
  8110d4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8110d8:	d0a04004 	addi	r2,gp,-32512
  8110dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8110e0:	d0a04104 	addi	r2,gp,-32508
  8110e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8110e8:	d0a04284 	addi	r2,gp,-32502
  8110ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  8110f0:	d0a04304 	addi	r2,gp,-32500
  8110f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  8110f8:	d0a04204 	addi	r2,gp,-32504
  8110fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  811100:	d0a04384 	addi	r2,gp,-32498
  811104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  811108:	d0a04404 	addi	r2,gp,-32496
  81110c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  811110:	d0a04484 	addi	r2,gp,-32494
  811114:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  811118:	d0a04504 	addi	r2,gp,-32492
  81111c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  811120:	d0a04584 	addi	r2,gp,-32490
  811124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  811128:	d0a04604 	addi	r2,gp,-32488
  81112c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  811130:	d0a04684 	addi	r2,gp,-32486
  811134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  811138:	d0a04704 	addi	r2,gp,-32484
  81113c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  811140:	d0a04784 	addi	r2,gp,-32482
  811144:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  811148:	d0a04804 	addi	r2,gp,-32480
  81114c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  811150:	d0a04884 	addi	r2,gp,-32478
  811154:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  811158:	d0a04904 	addi	r2,gp,-32476
  81115c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  811160:	d0a04984 	addi	r2,gp,-32474
  811164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  811168:	d0a04a04 	addi	r2,gp,-32472
  81116c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  811170:	d0a04a84 	addi	r2,gp,-32470
  811174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  811178:	d0a04b04 	addi	r2,gp,-32468
  81117c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  811180:	d0a04b84 	addi	r2,gp,-32466
  811184:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  811188:	d0a04c04 	addi	r2,gp,-32464
  81118c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  811190:	d0a04c84 	addi	r2,gp,-32462
  811194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  811198:	d0a04d04 	addi	r2,gp,-32460
  81119c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  8111a0:	d0a04d84 	addi	r2,gp,-32458
  8111a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  8111a8:	d0a04e04 	addi	r2,gp,-32456
  8111ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  8111b0:	d0a04e84 	addi	r2,gp,-32454
  8111b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  8111b8:	d0a04f04 	addi	r2,gp,-32452
  8111bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  8111c0:	d0a04f84 	addi	r2,gp,-32450
  8111c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  8111c8:	d0a05004 	addi	r2,gp,-32448
  8111cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  8111d0:	d0a05084 	addi	r2,gp,-32446
  8111d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  8111d8:	d0a05104 	addi	r2,gp,-32444
  8111dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  8111e0:	d0a05184 	addi	r2,gp,-32442
  8111e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  8111e8:	d0a05204 	addi	r2,gp,-32440
  8111ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  8111f0:	d0a05284 	addi	r2,gp,-32438
  8111f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  8111f8:	d0a05304 	addi	r2,gp,-32436
  8111fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  811200:	d0a05384 	addi	r2,gp,-32434
  811204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  811208:	d0a05404 	addi	r2,gp,-32432
  81120c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  811210:	d0a05484 	addi	r2,gp,-32430
  811214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  811218:	d0a05504 	addi	r2,gp,-32428
  81121c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  811220:	d0a05584 	addi	r2,gp,-32426
  811224:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  811228:	d0a05604 	addi	r2,gp,-32424
  81122c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  811230:	d0a05684 	addi	r2,gp,-32422
  811234:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  811238:	d0a05704 	addi	r2,gp,-32420
  81123c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  811240:	d0a05c04 	addi	r2,gp,-32400
  811244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  811248:	0001883a 	nop
  81124c:	e037883a 	mov	sp,fp
  811250:	df000017 	ldw	fp,0(sp)
  811254:	dec00104 	addi	sp,sp,4
  811258:	f800283a 	ret

0081125c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  81125c:	defff204 	addi	sp,sp,-56
  811260:	df000d15 	stw	fp,52(sp)
  811264:	df000d04 	addi	fp,sp,52
  811268:	e13ffc15 	stw	r4,-16(fp)
  81126c:	2807883a 	mov	r3,r5
  811270:	3005883a 	mov	r2,r6
  811274:	e1ffff15 	stw	r7,-4(fp)
  811278:	e0fffd0d 	sth	r3,-12(fp)
  81127c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  811280:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811284:	e0bfff17 	ldw	r2,-4(fp)
  811288:	1000021e 	bne	r2,zero,811294 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  81128c:	0005883a 	mov	r2,zero
  811290:	0000b006 	br	811554 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  811294:	e0bffc17 	ldw	r2,-16(fp)
  811298:	1000051e 	bne	r2,zero,8112b0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81129c:	e0bfff17 	ldw	r2,-4(fp)
  8112a0:	00c01b84 	movi	r3,110
  8112a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8112a8:	0005883a 	mov	r2,zero
  8112ac:	0000a906 	br	811554 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8112b0:	e0bffc17 	ldw	r2,-16(fp)
  8112b4:	10800003 	ldbu	r2,0(r2)
  8112b8:	10803fcc 	andi	r2,r2,255
  8112bc:	10800160 	cmpeqi	r2,r2,5
  8112c0:	1000051e 	bne	r2,zero,8112d8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8112c4:	e0bfff17 	ldw	r2,-4(fp)
  8112c8:	00c00044 	movi	r3,1
  8112cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8112d0:	0005883a 	mov	r2,zero
  8112d4:	00009f06 	br	811554 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8112d8:	e0fffe03 	ldbu	r3,-8(fp)
  8112dc:	00bfe004 	movi	r2,-128
  8112e0:	1884703a 	and	r2,r3,r2
  8112e4:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  8112e8:	e0bff503 	ldbu	r2,-44(fp)
  8112ec:	10000626 	beq	r2,zero,811308 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  8112f0:	e0bffe03 	ldbu	r2,-8(fp)
  8112f4:	10801fcc 	andi	r2,r2,127
  8112f8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  8112fc:	00800044 	movi	r2,1
  811300:	e0bff385 	stb	r2,-50(fp)
  811304:	00000106 	br	81130c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  811308:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  81130c:	e0bfff17 	ldw	r2,-4(fp)
  811310:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811314:	0005303a 	rdctl	r2,status
  811318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81131c:	e0fffb17 	ldw	r3,-20(fp)
  811320:	00bfff84 	movi	r2,-2
  811324:	1884703a 	and	r2,r3,r2
  811328:	1001703a 	wrctl	status,r2
  
  return context;
  81132c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  811330:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  811334:	e0bffe03 	ldbu	r2,-8(fp)
  811338:	10c00060 	cmpeqi	r3,r2,1
  81133c:	18005f1e 	bne	r3,zero,8114bc <OSFlagAccept+0x260>
  811340:	10c00088 	cmpgei	r3,r2,2
  811344:	1800021e 	bne	r3,zero,811350 <OSFlagAccept+0xf4>
  811348:	10003f26 	beq	r2,zero,811448 <OSFlagAccept+0x1ec>
  81134c:	00007706 	br	81152c <OSFlagAccept+0x2d0>
  811350:	10c000a0 	cmpeqi	r3,r2,2
  811354:	1800031e 	bne	r3,zero,811364 <OSFlagAccept+0x108>
  811358:	108000e0 	cmpeqi	r2,r2,3
  81135c:	10001e1e 	bne	r2,zero,8113d8 <OSFlagAccept+0x17c>
  811360:	00007206 	br	81152c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  811364:	e0bffc17 	ldw	r2,-16(fp)
  811368:	10c0020b 	ldhu	r3,8(r2)
  81136c:	e0bffd0b 	ldhu	r2,-12(fp)
  811370:	1884703a 	and	r2,r3,r2
  811374:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811378:	e0fff30b 	ldhu	r3,-52(fp)
  81137c:	e0bffd0b 	ldhu	r2,-12(fp)
  811380:	18800d1e 	bne	r3,r2,8113b8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811384:	e0bff383 	ldbu	r2,-50(fp)
  811388:	10800058 	cmpnei	r2,r2,1
  81138c:	10000d1e 	bne	r2,zero,8113c4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  811390:	e0bffc17 	ldw	r2,-16(fp)
  811394:	1080020b 	ldhu	r2,8(r2)
  811398:	1007883a 	mov	r3,r2
  81139c:	e0bff30b 	ldhu	r2,-52(fp)
  8113a0:	0084303a 	nor	r2,zero,r2
  8113a4:	1884703a 	and	r2,r3,r2
  8113a8:	1007883a 	mov	r3,r2
  8113ac:	e0bffc17 	ldw	r2,-16(fp)
  8113b0:	10c0020d 	sth	r3,8(r2)
  8113b4:	00000306 	br	8113c4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8113b8:	e0bfff17 	ldw	r2,-4(fp)
  8113bc:	00c01c04 	movi	r3,112
  8113c0:	10c00005 	stb	r3,0(r2)
  8113c4:	e0bff417 	ldw	r2,-48(fp)
  8113c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113cc:	e0bff617 	ldw	r2,-40(fp)
  8113d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8113d4:	00005e06 	br	811550 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8113d8:	e0bffc17 	ldw	r2,-16(fp)
  8113dc:	10c0020b 	ldhu	r3,8(r2)
  8113e0:	e0bffd0b 	ldhu	r2,-12(fp)
  8113e4:	1884703a 	and	r2,r3,r2
  8113e8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8113ec:	e0bff30b 	ldhu	r2,-52(fp)
  8113f0:	10000d26 	beq	r2,zero,811428 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8113f4:	e0bff383 	ldbu	r2,-50(fp)
  8113f8:	10800058 	cmpnei	r2,r2,1
  8113fc:	10000d1e 	bne	r2,zero,811434 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  811400:	e0bffc17 	ldw	r2,-16(fp)
  811404:	1080020b 	ldhu	r2,8(r2)
  811408:	1007883a 	mov	r3,r2
  81140c:	e0bff30b 	ldhu	r2,-52(fp)
  811410:	0084303a 	nor	r2,zero,r2
  811414:	1884703a 	and	r2,r3,r2
  811418:	1007883a 	mov	r3,r2
  81141c:	e0bffc17 	ldw	r2,-16(fp)
  811420:	10c0020d 	sth	r3,8(r2)
  811424:	00000306 	br	811434 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  811428:	e0bfff17 	ldw	r2,-4(fp)
  81142c:	00c01c04 	movi	r3,112
  811430:	10c00005 	stb	r3,0(r2)
  811434:	e0bff417 	ldw	r2,-48(fp)
  811438:	e0bff715 	stw	r2,-36(fp)
  81143c:	e0bff717 	ldw	r2,-36(fp)
  811440:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  811444:	00004206 	br	811550 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  811448:	e0bffc17 	ldw	r2,-16(fp)
  81144c:	1080020b 	ldhu	r2,8(r2)
  811450:	0084303a 	nor	r2,zero,r2
  811454:	1007883a 	mov	r3,r2
  811458:	e0bffd0b 	ldhu	r2,-12(fp)
  81145c:	1884703a 	and	r2,r3,r2
  811460:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811464:	e0fff30b 	ldhu	r3,-52(fp)
  811468:	e0bffd0b 	ldhu	r2,-12(fp)
  81146c:	18800b1e 	bne	r3,r2,81149c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811470:	e0bff383 	ldbu	r2,-50(fp)
  811474:	10800058 	cmpnei	r2,r2,1
  811478:	10000b1e 	bne	r2,zero,8114a8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81147c:	e0bffc17 	ldw	r2,-16(fp)
  811480:	10c0020b 	ldhu	r3,8(r2)
  811484:	e0bff30b 	ldhu	r2,-52(fp)
  811488:	1884b03a 	or	r2,r3,r2
  81148c:	1007883a 	mov	r3,r2
  811490:	e0bffc17 	ldw	r2,-16(fp)
  811494:	10c0020d 	sth	r3,8(r2)
  811498:	00000306 	br	8114a8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81149c:	e0bfff17 	ldw	r2,-4(fp)
  8114a0:	00c01c04 	movi	r3,112
  8114a4:	10c00005 	stb	r3,0(r2)
  8114a8:	e0bff417 	ldw	r2,-48(fp)
  8114ac:	e0bff815 	stw	r2,-32(fp)
  8114b0:	e0bff817 	ldw	r2,-32(fp)
  8114b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8114b8:	00002506 	br	811550 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8114bc:	e0bffc17 	ldw	r2,-16(fp)
  8114c0:	1080020b 	ldhu	r2,8(r2)
  8114c4:	0084303a 	nor	r2,zero,r2
  8114c8:	1007883a 	mov	r3,r2
  8114cc:	e0bffd0b 	ldhu	r2,-12(fp)
  8114d0:	1884703a 	and	r2,r3,r2
  8114d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8114d8:	e0bff30b 	ldhu	r2,-52(fp)
  8114dc:	10000b26 	beq	r2,zero,81150c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8114e0:	e0bff383 	ldbu	r2,-50(fp)
  8114e4:	10800058 	cmpnei	r2,r2,1
  8114e8:	10000b1e 	bne	r2,zero,811518 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8114ec:	e0bffc17 	ldw	r2,-16(fp)
  8114f0:	10c0020b 	ldhu	r3,8(r2)
  8114f4:	e0bff30b 	ldhu	r2,-52(fp)
  8114f8:	1884b03a 	or	r2,r3,r2
  8114fc:	1007883a 	mov	r3,r2
  811500:	e0bffc17 	ldw	r2,-16(fp)
  811504:	10c0020d 	sth	r3,8(r2)
  811508:	00000306 	br	811518 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81150c:	e0bfff17 	ldw	r2,-4(fp)
  811510:	00c01c04 	movi	r3,112
  811514:	10c00005 	stb	r3,0(r2)
  811518:	e0bff417 	ldw	r2,-48(fp)
  81151c:	e0bff915 	stw	r2,-28(fp)
  811520:	e0bff917 	ldw	r2,-28(fp)
  811524:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  811528:	00000906 	br	811550 <OSFlagAccept+0x2f4>
  81152c:	e0bff417 	ldw	r2,-48(fp)
  811530:	e0bffa15 	stw	r2,-24(fp)
  811534:	e0bffa17 	ldw	r2,-24(fp)
  811538:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81153c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  811540:	e0bfff17 	ldw	r2,-4(fp)
  811544:	00c01bc4 	movi	r3,111
  811548:	10c00005 	stb	r3,0(r2)
             break;
  81154c:	0001883a 	nop
    }
    return (flags_rdy);
  811550:	e0bff30b 	ldhu	r2,-52(fp)
}
  811554:	e037883a 	mov	sp,fp
  811558:	df000017 	ldw	fp,0(sp)
  81155c:	dec00104 	addi	sp,sp,4
  811560:	f800283a 	ret

00811564 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  811564:	defff804 	addi	sp,sp,-32
  811568:	df000715 	stw	fp,28(sp)
  81156c:	df000704 	addi	fp,sp,28
  811570:	2005883a 	mov	r2,r4
  811574:	e17fff15 	stw	r5,-4(fp)
  811578:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  81157c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  811580:	e0bfff17 	ldw	r2,-4(fp)
  811584:	1000021e 	bne	r2,zero,811590 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  811588:	0005883a 	mov	r2,zero
  81158c:	00003306 	br	81165c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  811590:	d0a09903 	ldbu	r2,-32156(gp)
  811594:	10803fcc 	andi	r2,r2,255
  811598:	10000526 	beq	r2,zero,8115b0 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  81159c:	e0bfff17 	ldw	r2,-4(fp)
  8115a0:	00c00404 	movi	r3,16
  8115a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  8115a8:	0005883a 	mov	r2,zero
  8115ac:	00002b06 	br	81165c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8115b0:	0005303a 	rdctl	r2,status
  8115b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115b8:	e0fffd17 	ldw	r3,-12(fp)
  8115bc:	00bfff84 	movi	r2,-2
  8115c0:	1884703a 	and	r2,r3,r2
  8115c4:	1001703a 	wrctl	status,r2
  
  return context;
  8115c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8115cc:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  8115d0:	d0a09c17 	ldw	r2,-32144(gp)
  8115d4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  8115d8:	e0bffb17 	ldw	r2,-20(fp)
  8115dc:	10001726 	beq	r2,zero,81163c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  8115e0:	d0a09c17 	ldw	r2,-32144(gp)
  8115e4:	10800117 	ldw	r2,4(r2)
  8115e8:	d0a09c15 	stw	r2,-32144(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  8115ec:	e0bffb17 	ldw	r2,-20(fp)
  8115f0:	00c00144 	movi	r3,5
  8115f4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  8115f8:	e0bffb17 	ldw	r2,-20(fp)
  8115fc:	e0fffe0b 	ldhu	r3,-8(fp)
  811600:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  811604:	e0bffb17 	ldw	r2,-20(fp)
  811608:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  81160c:	e0bffb17 	ldw	r2,-20(fp)
  811610:	00c00fc4 	movi	r3,63
  811614:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  811618:	e0bffb17 	ldw	r2,-20(fp)
  81161c:	100002c5 	stb	zero,11(r2)
  811620:	e0bff917 	ldw	r2,-28(fp)
  811624:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811628:	e0bffa17 	ldw	r2,-24(fp)
  81162c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  811630:	e0bfff17 	ldw	r2,-4(fp)
  811634:	10000005 	stb	zero,0(r2)
  811638:	00000706 	br	811658 <OSFlagCreate+0xf4>
  81163c:	e0bff917 	ldw	r2,-28(fp)
  811640:	e0bffc15 	stw	r2,-16(fp)
  811644:	e0bffc17 	ldw	r2,-16(fp)
  811648:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  81164c:	e0bfff17 	ldw	r2,-4(fp)
  811650:	00c01c84 	movi	r3,114
  811654:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  811658:	e0bffb17 	ldw	r2,-20(fp)
}
  81165c:	e037883a 	mov	sp,fp
  811660:	df000017 	ldw	fp,0(sp)
  811664:	dec00104 	addi	sp,sp,4
  811668:	f800283a 	ret

0081166c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  81166c:	defff204 	addi	sp,sp,-56
  811670:	dfc00d15 	stw	ra,52(sp)
  811674:	df000c15 	stw	fp,48(sp)
  811678:	df000c04 	addi	fp,sp,48
  81167c:	e13ffd15 	stw	r4,-12(fp)
  811680:	2805883a 	mov	r2,r5
  811684:	e1bfff15 	stw	r6,-4(fp)
  811688:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81168c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811690:	e0bfff17 	ldw	r2,-4(fp)
  811694:	1000021e 	bne	r2,zero,8116a0 <OSFlagDel+0x34>
        return (pgrp);
  811698:	e0bffd17 	ldw	r2,-12(fp)
  81169c:	00008006 	br	8118a0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8116a0:	e0bffd17 	ldw	r2,-12(fp)
  8116a4:	1000051e 	bne	r2,zero,8116bc <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8116a8:	e0bfff17 	ldw	r2,-4(fp)
  8116ac:	00c01b84 	movi	r3,110
  8116b0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  8116b4:	e0bffd17 	ldw	r2,-12(fp)
  8116b8:	00007906 	br	8118a0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8116bc:	d0a09903 	ldbu	r2,-32156(gp)
  8116c0:	10803fcc 	andi	r2,r2,255
  8116c4:	10000526 	beq	r2,zero,8116dc <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  8116c8:	e0bfff17 	ldw	r2,-4(fp)
  8116cc:	00c003c4 	movi	r3,15
  8116d0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  8116d4:	e0bffd17 	ldw	r2,-12(fp)
  8116d8:	00007106 	br	8118a0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  8116dc:	e0bffd17 	ldw	r2,-12(fp)
  8116e0:	10800003 	ldbu	r2,0(r2)
  8116e4:	10803fcc 	andi	r2,r2,255
  8116e8:	10800160 	cmpeqi	r2,r2,5
  8116ec:	1000051e 	bne	r2,zero,811704 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  8116f0:	e0bfff17 	ldw	r2,-4(fp)
  8116f4:	00c00044 	movi	r3,1
  8116f8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  8116fc:	e0bffd17 	ldw	r2,-12(fp)
  811700:	00006706 	br	8118a0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811704:	0005303a 	rdctl	r2,status
  811708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81170c:	e0fffc17 	ldw	r3,-16(fp)
  811710:	00bfff84 	movi	r2,-2
  811714:	1884703a 	and	r2,r3,r2
  811718:	1001703a 	wrctl	status,r2
  
  return context;
  81171c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  811720:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  811724:	e0bffd17 	ldw	r2,-12(fp)
  811728:	10800117 	ldw	r2,4(r2)
  81172c:	10000326 	beq	r2,zero,81173c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  811730:	00800044 	movi	r2,1
  811734:	e0bff405 	stb	r2,-48(fp)
  811738:	00000106 	br	811740 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81173c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  811740:	e0bffe03 	ldbu	r2,-8(fp)
  811744:	10000326 	beq	r2,zero,811754 <OSFlagDel+0xe8>
  811748:	10800060 	cmpeqi	r2,r2,1
  81174c:	1000231e 	bne	r2,zero,8117dc <OSFlagDel+0x170>
  811750:	00004806 	br	811874 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  811754:	e0bff403 	ldbu	r2,-48(fp)
  811758:	1000161e 	bne	r2,zero,8117b4 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  81175c:	e0bffd17 	ldw	r2,-12(fp)
  811760:	00c00fc4 	movi	r3,63
  811764:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  811768:	e0bffd17 	ldw	r2,-12(fp)
  81176c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811770:	e0bffd17 	ldw	r2,-12(fp)
  811774:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  811778:	d0e09c17 	ldw	r3,-32144(gp)
  81177c:	e0bffd17 	ldw	r2,-12(fp)
  811780:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  811784:	e0bffd17 	ldw	r2,-12(fp)
  811788:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  81178c:	e0bffd17 	ldw	r2,-12(fp)
  811790:	d0a09c15 	stw	r2,-32144(gp)
  811794:	e0bff717 	ldw	r2,-36(fp)
  811798:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81179c:	e0bff817 	ldw	r2,-32(fp)
  8117a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  8117a4:	e0bfff17 	ldw	r2,-4(fp)
  8117a8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  8117ac:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  8117b0:	00003a06 	br	81189c <OSFlagDel+0x230>
  8117b4:	e0bff717 	ldw	r2,-36(fp)
  8117b8:	e0bff915 	stw	r2,-28(fp)
  8117bc:	e0bff917 	ldw	r2,-28(fp)
  8117c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  8117c4:	e0bfff17 	ldw	r2,-4(fp)
  8117c8:	00c01244 	movi	r3,73
  8117cc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  8117d0:	e0bffd17 	ldw	r2,-12(fp)
  8117d4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  8117d8:	00003006 	br	81189c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8117dc:	e0bffd17 	ldw	r2,-12(fp)
  8117e0:	10800117 	ldw	r2,4(r2)
  8117e4:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8117e8:	00000606 	br	811804 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  8117ec:	000b883a 	mov	r5,zero
  8117f0:	e13ff517 	ldw	r4,-44(fp)
  8117f4:	08127d80 	call	8127d8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  8117f8:	e0bff517 	ldw	r2,-44(fp)
  8117fc:	10800017 	ldw	r2,0(r2)
  811800:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  811804:	e0bff517 	ldw	r2,-44(fp)
  811808:	103ff81e 	bne	r2,zero,8117ec <__alt_mem_epcs_flash_controller_0+0xff8087ec>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  81180c:	e0bffd17 	ldw	r2,-12(fp)
  811810:	00c00fc4 	movi	r3,63
  811814:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  811818:	e0bffd17 	ldw	r2,-12(fp)
  81181c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811820:	e0bffd17 	ldw	r2,-12(fp)
  811824:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  811828:	d0e09c17 	ldw	r3,-32144(gp)
  81182c:	e0bffd17 	ldw	r2,-12(fp)
  811830:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  811834:	e0bffd17 	ldw	r2,-12(fp)
  811838:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  81183c:	e0bffd17 	ldw	r2,-12(fp)
  811840:	d0a09c15 	stw	r2,-32144(gp)
  811844:	e0bff717 	ldw	r2,-36(fp)
  811848:	e0bffa15 	stw	r2,-24(fp)
  81184c:	e0bffa17 	ldw	r2,-24(fp)
  811850:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  811854:	e0bff403 	ldbu	r2,-48(fp)
  811858:	10800058 	cmpnei	r2,r2,1
  81185c:	1000011e 	bne	r2,zero,811864 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  811860:	08109f80 	call	8109f8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  811864:	e0bfff17 	ldw	r2,-4(fp)
  811868:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  81186c:	e03ff615 	stw	zero,-40(fp)
             break;
  811870:	00000a06 	br	81189c <OSFlagDel+0x230>
  811874:	e0bff717 	ldw	r2,-36(fp)
  811878:	e0bffb15 	stw	r2,-20(fp)
  81187c:	e0bffb17 	ldw	r2,-20(fp)
  811880:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  811884:	e0bfff17 	ldw	r2,-4(fp)
  811888:	00c001c4 	movi	r3,7
  81188c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  811890:	e0bffd17 	ldw	r2,-12(fp)
  811894:	e0bff615 	stw	r2,-40(fp)
             break;
  811898:	0001883a 	nop
    }
    return (pgrp_return);
  81189c:	e0bff617 	ldw	r2,-40(fp)
}
  8118a0:	e037883a 	mov	sp,fp
  8118a4:	dfc00117 	ldw	ra,4(sp)
  8118a8:	df000017 	ldw	fp,0(sp)
  8118ac:	dec00204 	addi	sp,sp,8
  8118b0:	f800283a 	ret

008118b4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8118b4:	defff604 	addi	sp,sp,-40
  8118b8:	dfc00915 	stw	ra,36(sp)
  8118bc:	df000815 	stw	fp,32(sp)
  8118c0:	df000804 	addi	fp,sp,32
  8118c4:	e13ffd15 	stw	r4,-12(fp)
  8118c8:	e17ffe15 	stw	r5,-8(fp)
  8118cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8118d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8118d4:	e0bfff17 	ldw	r2,-4(fp)
  8118d8:	1000021e 	bne	r2,zero,8118e4 <OSFlagNameGet+0x30>
        return (0);
  8118dc:	0005883a 	mov	r2,zero
  8118e0:	00003906 	br	8119c8 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8118e4:	e0bffd17 	ldw	r2,-12(fp)
  8118e8:	1000051e 	bne	r2,zero,811900 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8118ec:	e0bfff17 	ldw	r2,-4(fp)
  8118f0:	00c01b84 	movi	r3,110
  8118f4:	10c00005 	stb	r3,0(r2)
        return (0);
  8118f8:	0005883a 	mov	r2,zero
  8118fc:	00003206 	br	8119c8 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811900:	e0bffe17 	ldw	r2,-8(fp)
  811904:	1000051e 	bne	r2,zero,81191c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  811908:	e0bfff17 	ldw	r2,-4(fp)
  81190c:	00c00304 	movi	r3,12
  811910:	10c00005 	stb	r3,0(r2)
        return (0);
  811914:	0005883a 	mov	r2,zero
  811918:	00002b06 	br	8119c8 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81191c:	d0a09903 	ldbu	r2,-32156(gp)
  811920:	10803fcc 	andi	r2,r2,255
  811924:	10000526 	beq	r2,zero,81193c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  811928:	e0bfff17 	ldw	r2,-4(fp)
  81192c:	00c00444 	movi	r3,17
  811930:	10c00005 	stb	r3,0(r2)
        return (0);
  811934:	0005883a 	mov	r2,zero
  811938:	00002306 	br	8119c8 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81193c:	0005303a 	rdctl	r2,status
  811940:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811944:	e0fffc17 	ldw	r3,-16(fp)
  811948:	00bfff84 	movi	r2,-2
  81194c:	1884703a 	and	r2,r3,r2
  811950:	1001703a 	wrctl	status,r2
  
  return context;
  811954:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  811958:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  81195c:	e0bffd17 	ldw	r2,-12(fp)
  811960:	10800003 	ldbu	r2,0(r2)
  811964:	10803fcc 	andi	r2,r2,255
  811968:	10800160 	cmpeqi	r2,r2,5
  81196c:	1000091e 	bne	r2,zero,811994 <OSFlagNameGet+0xe0>
  811970:	e0bff817 	ldw	r2,-32(fp)
  811974:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811978:	e0bff917 	ldw	r2,-28(fp)
  81197c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  811980:	e0bfff17 	ldw	r2,-4(fp)
  811984:	00c00044 	movi	r3,1
  811988:	10c00005 	stb	r3,0(r2)
        return (0);
  81198c:	0005883a 	mov	r2,zero
  811990:	00000d06 	br	8119c8 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  811994:	e0bffd17 	ldw	r2,-12(fp)
  811998:	10800284 	addi	r2,r2,10
  81199c:	100b883a 	mov	r5,r2
  8119a0:	e13ffe17 	ldw	r4,-8(fp)
  8119a4:	0810b3c0 	call	810b3c <OS_StrCopy>
  8119a8:	e0bffb05 	stb	r2,-20(fp)
  8119ac:	e0bff817 	ldw	r2,-32(fp)
  8119b0:	e0bffa15 	stw	r2,-24(fp)
  8119b4:	e0bffa17 	ldw	r2,-24(fp)
  8119b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8119bc:	e0bfff17 	ldw	r2,-4(fp)
  8119c0:	10000005 	stb	zero,0(r2)
    return (len);
  8119c4:	e0bffb03 	ldbu	r2,-20(fp)
}
  8119c8:	e037883a 	mov	sp,fp
  8119cc:	dfc00117 	ldw	ra,4(sp)
  8119d0:	df000017 	ldw	fp,0(sp)
  8119d4:	dec00204 	addi	sp,sp,8
  8119d8:	f800283a 	ret

008119dc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8119dc:	defff504 	addi	sp,sp,-44
  8119e0:	dfc00a15 	stw	ra,40(sp)
  8119e4:	df000915 	stw	fp,36(sp)
  8119e8:	df000904 	addi	fp,sp,36
  8119ec:	e13ffd15 	stw	r4,-12(fp)
  8119f0:	e17ffe15 	stw	r5,-8(fp)
  8119f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8119f8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8119fc:	e0bfff17 	ldw	r2,-4(fp)
  811a00:	10004326 	beq	r2,zero,811b10 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  811a04:	e0bffd17 	ldw	r2,-12(fp)
  811a08:	1000041e 	bne	r2,zero,811a1c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811a0c:	e0bfff17 	ldw	r2,-4(fp)
  811a10:	00c01b84 	movi	r3,110
  811a14:	10c00005 	stb	r3,0(r2)
        return;
  811a18:	00003e06 	br	811b14 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811a1c:	e0bffe17 	ldw	r2,-8(fp)
  811a20:	1000041e 	bne	r2,zero,811a34 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  811a24:	e0bfff17 	ldw	r2,-4(fp)
  811a28:	00c00304 	movi	r3,12
  811a2c:	10c00005 	stb	r3,0(r2)
        return;
  811a30:	00003806 	br	811b14 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  811a34:	d0a09903 	ldbu	r2,-32156(gp)
  811a38:	10803fcc 	andi	r2,r2,255
  811a3c:	10000426 	beq	r2,zero,811a50 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  811a40:	e0bfff17 	ldw	r2,-4(fp)
  811a44:	00c00484 	movi	r3,18
  811a48:	10c00005 	stb	r3,0(r2)
        return;
  811a4c:	00003106 	br	811b14 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811a50:	0005303a 	rdctl	r2,status
  811a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a58:	e0fffc17 	ldw	r3,-16(fp)
  811a5c:	00bfff84 	movi	r2,-2
  811a60:	1884703a 	and	r2,r3,r2
  811a64:	1001703a 	wrctl	status,r2
  
  return context;
  811a68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  811a6c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  811a70:	e0bffd17 	ldw	r2,-12(fp)
  811a74:	10800003 	ldbu	r2,0(r2)
  811a78:	10803fcc 	andi	r2,r2,255
  811a7c:	10800160 	cmpeqi	r2,r2,5
  811a80:	1000081e 	bne	r2,zero,811aa4 <OSFlagNameSet+0xc8>
  811a84:	e0bff717 	ldw	r2,-36(fp)
  811a88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a8c:	e0bff817 	ldw	r2,-32(fp)
  811a90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  811a94:	e0bfff17 	ldw	r2,-4(fp)
  811a98:	00c00044 	movi	r3,1
  811a9c:	10c00005 	stb	r3,0(r2)
        return;
  811aa0:	00001c06 	br	811b14 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  811aa4:	e13ffe17 	ldw	r4,-8(fp)
  811aa8:	0810bb00 	call	810bb0 <OS_StrLen>
  811aac:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  811ab0:	e0bffa03 	ldbu	r2,-24(fp)
  811ab4:	10800830 	cmpltui	r2,r2,32
  811ab8:	1000081e 	bne	r2,zero,811adc <OSFlagNameSet+0x100>
  811abc:	e0bff717 	ldw	r2,-36(fp)
  811ac0:	e0bff915 	stw	r2,-28(fp)
  811ac4:	e0bff917 	ldw	r2,-28(fp)
  811ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  811acc:	e0bfff17 	ldw	r2,-4(fp)
  811ad0:	00c01cc4 	movi	r3,115
  811ad4:	10c00005 	stb	r3,0(r2)
        return;
  811ad8:	00000e06 	br	811b14 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  811adc:	e0bffd17 	ldw	r2,-12(fp)
  811ae0:	10800284 	addi	r2,r2,10
  811ae4:	e17ffe17 	ldw	r5,-8(fp)
  811ae8:	1009883a 	mov	r4,r2
  811aec:	0810b3c0 	call	810b3c <OS_StrCopy>
  811af0:	e0bff717 	ldw	r2,-36(fp)
  811af4:	e0bffb15 	stw	r2,-20(fp)
  811af8:	e0bffb17 	ldw	r2,-20(fp)
  811afc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811b00:	e0bfff17 	ldw	r2,-4(fp)
  811b04:	10000005 	stb	zero,0(r2)
    return;
  811b08:	0001883a 	nop
  811b0c:	00000106 	br	811b14 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  811b10:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  811b14:	e037883a 	mov	sp,fp
  811b18:	dfc00117 	ldw	ra,4(sp)
  811b1c:	df000017 	ldw	fp,0(sp)
  811b20:	dec00204 	addi	sp,sp,8
  811b24:	f800283a 	ret

00811b28 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  811b28:	deffe104 	addi	sp,sp,-124
  811b2c:	dfc01e15 	stw	ra,120(sp)
  811b30:	df001d15 	stw	fp,116(sp)
  811b34:	df001d04 	addi	fp,sp,116
  811b38:	e13ffc15 	stw	r4,-16(fp)
  811b3c:	2809883a 	mov	r4,r5
  811b40:	3007883a 	mov	r3,r6
  811b44:	3805883a 	mov	r2,r7
  811b48:	e13ffd0d 	sth	r4,-12(fp)
  811b4c:	e0fffe05 	stb	r3,-8(fp)
  811b50:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  811b54:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811b58:	e0800217 	ldw	r2,8(fp)
  811b5c:	1000021e 	bne	r2,zero,811b68 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  811b60:	0005883a 	mov	r2,zero
  811b64:	00015906 	br	8120cc <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  811b68:	e0bffc17 	ldw	r2,-16(fp)
  811b6c:	1000051e 	bne	r2,zero,811b84 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811b70:	e0800217 	ldw	r2,8(fp)
  811b74:	00c01b84 	movi	r3,110
  811b78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811b7c:	0005883a 	mov	r2,zero
  811b80:	00015206 	br	8120cc <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811b84:	d0a09903 	ldbu	r2,-32156(gp)
  811b88:	10803fcc 	andi	r2,r2,255
  811b8c:	10000526 	beq	r2,zero,811ba4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  811b90:	e0800217 	ldw	r2,8(fp)
  811b94:	00c00084 	movi	r3,2
  811b98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811b9c:	0005883a 	mov	r2,zero
  811ba0:	00014a06 	br	8120cc <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  811ba4:	d0a08b03 	ldbu	r2,-32212(gp)
  811ba8:	10803fcc 	andi	r2,r2,255
  811bac:	10000526 	beq	r2,zero,811bc4 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  811bb0:	e0800217 	ldw	r2,8(fp)
  811bb4:	00c00344 	movi	r3,13
  811bb8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811bbc:	0005883a 	mov	r2,zero
  811bc0:	00014206 	br	8120cc <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  811bc4:	e0bffc17 	ldw	r2,-16(fp)
  811bc8:	10800003 	ldbu	r2,0(r2)
  811bcc:	10803fcc 	andi	r2,r2,255
  811bd0:	10800160 	cmpeqi	r2,r2,5
  811bd4:	1000051e 	bne	r2,zero,811bec <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  811bd8:	e0800217 	ldw	r2,8(fp)
  811bdc:	00c00044 	movi	r3,1
  811be0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  811be4:	0005883a 	mov	r2,zero
  811be8:	00013806 	br	8120cc <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  811bec:	e0fffe03 	ldbu	r3,-8(fp)
  811bf0:	00bfe004 	movi	r2,-128
  811bf4:	1884703a 	and	r2,r3,r2
  811bf8:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  811bfc:	e0bfe603 	ldbu	r2,-104(fp)
  811c00:	10000626 	beq	r2,zero,811c1c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  811c04:	e0bffe03 	ldbu	r2,-8(fp)
  811c08:	10801fcc 	andi	r2,r2,127
  811c0c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  811c10:	00800044 	movi	r2,1
  811c14:	e0bfe405 	stb	r2,-112(fp)
  811c18:	00000106 	br	811c20 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  811c1c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811c20:	0005303a 	rdctl	r2,status
  811c24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c28:	e0fff617 	ldw	r3,-40(fp)
  811c2c:	00bfff84 	movi	r2,-2
  811c30:	1884703a 	and	r2,r3,r2
  811c34:	1001703a 	wrctl	status,r2
  
  return context;
  811c38:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  811c3c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  811c40:	e0bffe03 	ldbu	r2,-8(fp)
  811c44:	10c00060 	cmpeqi	r3,r2,1
  811c48:	1800921e 	bne	r3,zero,811e94 <OSFlagPend+0x36c>
  811c4c:	10c00088 	cmpgei	r3,r2,2
  811c50:	1800021e 	bne	r3,zero,811c5c <OSFlagPend+0x134>
  811c54:	10006126 	beq	r2,zero,811ddc <OSFlagPend+0x2b4>
  811c58:	0000bb06 	br	811f48 <OSFlagPend+0x420>
  811c5c:	10c000a0 	cmpeqi	r3,r2,2
  811c60:	1800031e 	bne	r3,zero,811c70 <OSFlagPend+0x148>
  811c64:	108000e0 	cmpeqi	r2,r2,3
  811c68:	10002f1e 	bne	r2,zero,811d28 <OSFlagPend+0x200>
  811c6c:	0000b606 	br	811f48 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  811c70:	e0bffc17 	ldw	r2,-16(fp)
  811c74:	10c0020b 	ldhu	r3,8(r2)
  811c78:	e0bffd0b 	ldhu	r2,-12(fp)
  811c7c:	1884703a 	and	r2,r3,r2
  811c80:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811c84:	e0ffe80b 	ldhu	r3,-96(fp)
  811c88:	e0bffd0b 	ldhu	r2,-12(fp)
  811c8c:	1880171e 	bne	r3,r2,811cec <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811c90:	e0bfe403 	ldbu	r2,-112(fp)
  811c94:	10800058 	cmpnei	r2,r2,1
  811c98:	1000091e 	bne	r2,zero,811cc0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  811c9c:	e0bffc17 	ldw	r2,-16(fp)
  811ca0:	1080020b 	ldhu	r2,8(r2)
  811ca4:	1007883a 	mov	r3,r2
  811ca8:	e0bfe80b 	ldhu	r2,-96(fp)
  811cac:	0084303a 	nor	r2,zero,r2
  811cb0:	1884703a 	and	r2,r3,r2
  811cb4:	1007883a 	mov	r3,r2
  811cb8:	e0bffc17 	ldw	r2,-16(fp)
  811cbc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811cc0:	d0a09a17 	ldw	r2,-32152(gp)
  811cc4:	e0ffe80b 	ldhu	r3,-96(fp)
  811cc8:	10c00b0d 	sth	r3,44(r2)
  811ccc:	e0bfe517 	ldw	r2,-108(fp)
  811cd0:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811cd4:	e0bfe717 	ldw	r2,-100(fp)
  811cd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811cdc:	e0800217 	ldw	r2,8(fp)
  811ce0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811ce4:	e0bfe80b 	ldhu	r2,-96(fp)
  811ce8:	0000f806 	br	8120cc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811cec:	e13ffd0b 	ldhu	r4,-12(fp)
  811cf0:	e17ffe03 	ldbu	r5,-8(fp)
  811cf4:	e0bfff0b 	ldhu	r2,-4(fp)
  811cf8:	e0fff704 	addi	r3,fp,-36
  811cfc:	d8800015 	stw	r2,0(sp)
  811d00:	280f883a 	mov	r7,r5
  811d04:	200d883a 	mov	r6,r4
  811d08:	180b883a 	mov	r5,r3
  811d0c:	e13ffc17 	ldw	r4,-16(fp)
  811d10:	08125980 	call	812598 <OS_FlagBlock>
  811d14:	e0bfe517 	ldw	r2,-108(fp)
  811d18:	e0bfe915 	stw	r2,-92(fp)
  811d1c:	e0bfe917 	ldw	r2,-92(fp)
  811d20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811d24:	00009206 	br	811f70 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  811d28:	e0bffc17 	ldw	r2,-16(fp)
  811d2c:	10c0020b 	ldhu	r3,8(r2)
  811d30:	e0bffd0b 	ldhu	r2,-12(fp)
  811d34:	1884703a 	and	r2,r3,r2
  811d38:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  811d3c:	e0bfe80b 	ldhu	r2,-96(fp)
  811d40:	10001726 	beq	r2,zero,811da0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811d44:	e0bfe403 	ldbu	r2,-112(fp)
  811d48:	10800058 	cmpnei	r2,r2,1
  811d4c:	1000091e 	bne	r2,zero,811d74 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  811d50:	e0bffc17 	ldw	r2,-16(fp)
  811d54:	1080020b 	ldhu	r2,8(r2)
  811d58:	1007883a 	mov	r3,r2
  811d5c:	e0bfe80b 	ldhu	r2,-96(fp)
  811d60:	0084303a 	nor	r2,zero,r2
  811d64:	1884703a 	and	r2,r3,r2
  811d68:	1007883a 	mov	r3,r2
  811d6c:	e0bffc17 	ldw	r2,-16(fp)
  811d70:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811d74:	d0a09a17 	ldw	r2,-32152(gp)
  811d78:	e0ffe80b 	ldhu	r3,-96(fp)
  811d7c:	10c00b0d 	sth	r3,44(r2)
  811d80:	e0bfe517 	ldw	r2,-108(fp)
  811d84:	e0bfea15 	stw	r2,-88(fp)
  811d88:	e0bfea17 	ldw	r2,-88(fp)
  811d8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811d90:	e0800217 	ldw	r2,8(fp)
  811d94:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811d98:	e0bfe80b 	ldhu	r2,-96(fp)
  811d9c:	0000cb06 	br	8120cc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811da0:	e13ffd0b 	ldhu	r4,-12(fp)
  811da4:	e17ffe03 	ldbu	r5,-8(fp)
  811da8:	e0bfff0b 	ldhu	r2,-4(fp)
  811dac:	e0fff704 	addi	r3,fp,-36
  811db0:	d8800015 	stw	r2,0(sp)
  811db4:	280f883a 	mov	r7,r5
  811db8:	200d883a 	mov	r6,r4
  811dbc:	180b883a 	mov	r5,r3
  811dc0:	e13ffc17 	ldw	r4,-16(fp)
  811dc4:	08125980 	call	812598 <OS_FlagBlock>
  811dc8:	e0bfe517 	ldw	r2,-108(fp)
  811dcc:	e0bfeb15 	stw	r2,-84(fp)
  811dd0:	e0bfeb17 	ldw	r2,-84(fp)
  811dd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811dd8:	00006506 	br	811f70 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  811ddc:	e0bffc17 	ldw	r2,-16(fp)
  811de0:	1080020b 	ldhu	r2,8(r2)
  811de4:	0084303a 	nor	r2,zero,r2
  811de8:	1007883a 	mov	r3,r2
  811dec:	e0bffd0b 	ldhu	r2,-12(fp)
  811df0:	1884703a 	and	r2,r3,r2
  811df4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811df8:	e0ffe80b 	ldhu	r3,-96(fp)
  811dfc:	e0bffd0b 	ldhu	r2,-12(fp)
  811e00:	1880151e 	bne	r3,r2,811e58 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811e04:	e0bfe403 	ldbu	r2,-112(fp)
  811e08:	10800058 	cmpnei	r2,r2,1
  811e0c:	1000071e 	bne	r2,zero,811e2c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  811e10:	e0bffc17 	ldw	r2,-16(fp)
  811e14:	10c0020b 	ldhu	r3,8(r2)
  811e18:	e0bfe80b 	ldhu	r2,-96(fp)
  811e1c:	1884b03a 	or	r2,r3,r2
  811e20:	1007883a 	mov	r3,r2
  811e24:	e0bffc17 	ldw	r2,-16(fp)
  811e28:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811e2c:	d0a09a17 	ldw	r2,-32152(gp)
  811e30:	e0ffe80b 	ldhu	r3,-96(fp)
  811e34:	10c00b0d 	sth	r3,44(r2)
  811e38:	e0bfe517 	ldw	r2,-108(fp)
  811e3c:	e0bfec15 	stw	r2,-80(fp)
  811e40:	e0bfec17 	ldw	r2,-80(fp)
  811e44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811e48:	e0800217 	ldw	r2,8(fp)
  811e4c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811e50:	e0bfe80b 	ldhu	r2,-96(fp)
  811e54:	00009d06 	br	8120cc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811e58:	e13ffd0b 	ldhu	r4,-12(fp)
  811e5c:	e17ffe03 	ldbu	r5,-8(fp)
  811e60:	e0bfff0b 	ldhu	r2,-4(fp)
  811e64:	e0fff704 	addi	r3,fp,-36
  811e68:	d8800015 	stw	r2,0(sp)
  811e6c:	280f883a 	mov	r7,r5
  811e70:	200d883a 	mov	r6,r4
  811e74:	180b883a 	mov	r5,r3
  811e78:	e13ffc17 	ldw	r4,-16(fp)
  811e7c:	08125980 	call	812598 <OS_FlagBlock>
  811e80:	e0bfe517 	ldw	r2,-108(fp)
  811e84:	e0bfed15 	stw	r2,-76(fp)
  811e88:	e0bfed17 	ldw	r2,-76(fp)
  811e8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811e90:	00003706 	br	811f70 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  811e94:	e0bffc17 	ldw	r2,-16(fp)
  811e98:	1080020b 	ldhu	r2,8(r2)
  811e9c:	0084303a 	nor	r2,zero,r2
  811ea0:	1007883a 	mov	r3,r2
  811ea4:	e0bffd0b 	ldhu	r2,-12(fp)
  811ea8:	1884703a 	and	r2,r3,r2
  811eac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  811eb0:	e0bfe80b 	ldhu	r2,-96(fp)
  811eb4:	10001526 	beq	r2,zero,811f0c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811eb8:	e0bfe403 	ldbu	r2,-112(fp)
  811ebc:	10800058 	cmpnei	r2,r2,1
  811ec0:	1000071e 	bne	r2,zero,811ee0 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  811ec4:	e0bffc17 	ldw	r2,-16(fp)
  811ec8:	10c0020b 	ldhu	r3,8(r2)
  811ecc:	e0bfe80b 	ldhu	r2,-96(fp)
  811ed0:	1884b03a 	or	r2,r3,r2
  811ed4:	1007883a 	mov	r3,r2
  811ed8:	e0bffc17 	ldw	r2,-16(fp)
  811edc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811ee0:	d0a09a17 	ldw	r2,-32152(gp)
  811ee4:	e0ffe80b 	ldhu	r3,-96(fp)
  811ee8:	10c00b0d 	sth	r3,44(r2)
  811eec:	e0bfe517 	ldw	r2,-108(fp)
  811ef0:	e0bfee15 	stw	r2,-72(fp)
  811ef4:	e0bfee17 	ldw	r2,-72(fp)
  811ef8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811efc:	e0800217 	ldw	r2,8(fp)
  811f00:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811f04:	e0bfe80b 	ldhu	r2,-96(fp)
  811f08:	00007006 	br	8120cc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811f0c:	e13ffd0b 	ldhu	r4,-12(fp)
  811f10:	e17ffe03 	ldbu	r5,-8(fp)
  811f14:	e0bfff0b 	ldhu	r2,-4(fp)
  811f18:	e0fff704 	addi	r3,fp,-36
  811f1c:	d8800015 	stw	r2,0(sp)
  811f20:	280f883a 	mov	r7,r5
  811f24:	200d883a 	mov	r6,r4
  811f28:	180b883a 	mov	r5,r3
  811f2c:	e13ffc17 	ldw	r4,-16(fp)
  811f30:	08125980 	call	812598 <OS_FlagBlock>
  811f34:	e0bfe517 	ldw	r2,-108(fp)
  811f38:	e0bfef15 	stw	r2,-68(fp)
  811f3c:	e0bfef17 	ldw	r2,-68(fp)
  811f40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811f44:	00000a06 	br	811f70 <OSFlagPend+0x448>
  811f48:	e0bfe517 	ldw	r2,-108(fp)
  811f4c:	e0bff015 	stw	r2,-64(fp)
  811f50:	e0bff017 	ldw	r2,-64(fp)
  811f54:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  811f58:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  811f5c:	e0800217 	ldw	r2,8(fp)
  811f60:	00c01bc4 	movi	r3,111
  811f64:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  811f68:	e0bfe80b 	ldhu	r2,-96(fp)
  811f6c:	00005706 	br	8120cc <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  811f70:	08109f80 	call	8109f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f74:	0005303a 	rdctl	r2,status
  811f78:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f7c:	e0fff117 	ldw	r3,-60(fp)
  811f80:	00bfff84 	movi	r2,-2
  811f84:	1884703a 	and	r2,r3,r2
  811f88:	1001703a 	wrctl	status,r2
  
  return context;
  811f8c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  811f90:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  811f94:	d0a09a17 	ldw	r2,-32152(gp)
  811f98:	10800c43 	ldbu	r2,49(r2)
  811f9c:	10803fcc 	andi	r2,r2,255
  811fa0:	10001c26 	beq	r2,zero,812014 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  811fa4:	d0a09a17 	ldw	r2,-32152(gp)
  811fa8:	10800c43 	ldbu	r2,49(r2)
  811fac:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  811fb0:	d0a09a17 	ldw	r2,-32152(gp)
  811fb4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  811fb8:	e0bff704 	addi	r2,fp,-36
  811fbc:	1009883a 	mov	r4,r2
  811fc0:	08128cc0 	call	8128cc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  811fc4:	d0a09a17 	ldw	r2,-32152(gp)
  811fc8:	10000c05 	stb	zero,48(r2)
  811fcc:	e0bfe517 	ldw	r2,-108(fp)
  811fd0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fd4:	e0bff217 	ldw	r2,-56(fp)
  811fd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  811fdc:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  811fe0:	e0bff303 	ldbu	r2,-52(fp)
  811fe4:	108000a0 	cmpeqi	r2,r2,2
  811fe8:	10000426 	beq	r2,zero,811ffc <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  811fec:	e0800217 	ldw	r2,8(fp)
  811ff0:	00c00384 	movi	r3,14
  811ff4:	10c00005 	stb	r3,0(r2)
                 break;
  811ff8:	00000406 	br	81200c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  811ffc:	e0800217 	ldw	r2,8(fp)
  812000:	00c00284 	movi	r3,10
  812004:	10c00005 	stb	r3,0(r2)
                 break;
  812008:	0001883a 	nop
        }
        return (flags_rdy);
  81200c:	e0bfe80b 	ldhu	r2,-96(fp)
  812010:	00002e06 	br	8120cc <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  812014:	d0a09a17 	ldw	r2,-32152(gp)
  812018:	10800b0b 	ldhu	r2,44(r2)
  81201c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  812020:	e0bfe403 	ldbu	r2,-112(fp)
  812024:	10800058 	cmpnei	r2,r2,1
  812028:	1000211e 	bne	r2,zero,8120b0 <OSFlagPend+0x588>
        switch (wait_type) {
  81202c:	e0bffe03 	ldbu	r2,-8(fp)
  812030:	10001616 	blt	r2,zero,81208c <OSFlagPend+0x564>
  812034:	10c00090 	cmplti	r3,r2,2
  812038:	18000c1e 	bne	r3,zero,81206c <OSFlagPend+0x544>
  81203c:	10800108 	cmpgei	r2,r2,4
  812040:	1000121e 	bne	r2,zero,81208c <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  812044:	e0bffc17 	ldw	r2,-16(fp)
  812048:	1080020b 	ldhu	r2,8(r2)
  81204c:	1007883a 	mov	r3,r2
  812050:	e0bfe80b 	ldhu	r2,-96(fp)
  812054:	0084303a 	nor	r2,zero,r2
  812058:	1884703a 	and	r2,r3,r2
  81205c:	1007883a 	mov	r3,r2
  812060:	e0bffc17 	ldw	r2,-16(fp)
  812064:	10c0020d 	sth	r3,8(r2)
                 break;
  812068:	00001106 	br	8120b0 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  81206c:	e0bffc17 	ldw	r2,-16(fp)
  812070:	10c0020b 	ldhu	r3,8(r2)
  812074:	e0bfe80b 	ldhu	r2,-96(fp)
  812078:	1884b03a 	or	r2,r3,r2
  81207c:	1007883a 	mov	r3,r2
  812080:	e0bffc17 	ldw	r2,-16(fp)
  812084:	10c0020d 	sth	r3,8(r2)
                 break;
  812088:	00000906 	br	8120b0 <OSFlagPend+0x588>
  81208c:	e0bfe517 	ldw	r2,-108(fp)
  812090:	e0bff415 	stw	r2,-48(fp)
  812094:	e0bff417 	ldw	r2,-48(fp)
  812098:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81209c:	e0800217 	ldw	r2,8(fp)
  8120a0:	00c01bc4 	movi	r3,111
  8120a4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  8120a8:	0005883a 	mov	r2,zero
  8120ac:	00000706 	br	8120cc <OSFlagPend+0x5a4>
  8120b0:	e0bfe517 	ldw	r2,-108(fp)
  8120b4:	e0bff515 	stw	r2,-44(fp)
  8120b8:	e0bff517 	ldw	r2,-44(fp)
  8120bc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  8120c0:	e0800217 	ldw	r2,8(fp)
  8120c4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  8120c8:	e0bfe80b 	ldhu	r2,-96(fp)
}
  8120cc:	e037883a 	mov	sp,fp
  8120d0:	dfc00117 	ldw	ra,4(sp)
  8120d4:	df000017 	ldw	fp,0(sp)
  8120d8:	dec00204 	addi	sp,sp,8
  8120dc:	f800283a 	ret

008120e0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  8120e0:	defffb04 	addi	sp,sp,-20
  8120e4:	df000415 	stw	fp,16(sp)
  8120e8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8120ec:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120f0:	0005303a 	rdctl	r2,status
  8120f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120f8:	e0fffe17 	ldw	r3,-8(fp)
  8120fc:	00bfff84 	movi	r2,-2
  812100:	1884703a 	and	r2,r3,r2
  812104:	1001703a 	wrctl	status,r2
  
  return context;
  812108:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  81210c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  812110:	d0a09a17 	ldw	r2,-32152(gp)
  812114:	10800b0b 	ldhu	r2,44(r2)
  812118:	e0bffd0d 	sth	r2,-12(fp)
  81211c:	e0bffc17 	ldw	r2,-16(fp)
  812120:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812124:	e0bfff17 	ldw	r2,-4(fp)
  812128:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  81212c:	e0bffd0b 	ldhu	r2,-12(fp)
}
  812130:	e037883a 	mov	sp,fp
  812134:	df000017 	ldw	fp,0(sp)
  812138:	dec00104 	addi	sp,sp,4
  81213c:	f800283a 	ret

00812140 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  812140:	deffef04 	addi	sp,sp,-68
  812144:	dfc01015 	stw	ra,64(sp)
  812148:	df000f15 	stw	fp,60(sp)
  81214c:	df000f04 	addi	fp,sp,60
  812150:	e13ffc15 	stw	r4,-16(fp)
  812154:	2807883a 	mov	r3,r5
  812158:	3005883a 	mov	r2,r6
  81215c:	e1ffff15 	stw	r7,-4(fp)
  812160:	e0fffd0d 	sth	r3,-12(fp)
  812164:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  812168:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81216c:	e0bfff17 	ldw	r2,-4(fp)
  812170:	1000021e 	bne	r2,zero,81217c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  812174:	0005883a 	mov	r2,zero
  812178:	0000d106 	br	8124c0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  81217c:	e0bffc17 	ldw	r2,-16(fp)
  812180:	1000051e 	bne	r2,zero,812198 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  812184:	e0bfff17 	ldw	r2,-4(fp)
  812188:	00c01b84 	movi	r3,110
  81218c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  812190:	0005883a 	mov	r2,zero
  812194:	0000ca06 	br	8124c0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  812198:	e0bffc17 	ldw	r2,-16(fp)
  81219c:	10800003 	ldbu	r2,0(r2)
  8121a0:	10803fcc 	andi	r2,r2,255
  8121a4:	10800160 	cmpeqi	r2,r2,5
  8121a8:	1000051e 	bne	r2,zero,8121c0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  8121ac:	e0bfff17 	ldw	r2,-4(fp)
  8121b0:	00c00044 	movi	r3,1
  8121b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8121b8:	0005883a 	mov	r2,zero
  8121bc:	0000c006 	br	8124c0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8121c0:	0005303a 	rdctl	r2,status
  8121c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8121c8:	e0fffb17 	ldw	r3,-20(fp)
  8121cc:	00bfff84 	movi	r2,-2
  8121d0:	1884703a 	and	r2,r3,r2
  8121d4:	1001703a 	wrctl	status,r2
  
  return context;
  8121d8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8121dc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  8121e0:	e0bffe03 	ldbu	r2,-8(fp)
  8121e4:	10000326 	beq	r2,zero,8121f4 <OSFlagPost+0xb4>
  8121e8:	10800060 	cmpeqi	r2,r2,1
  8121ec:	10000b1e 	bne	r2,zero,81221c <OSFlagPost+0xdc>
  8121f0:	00001206 	br	81223c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8121f4:	e0bffc17 	ldw	r2,-16(fp)
  8121f8:	1080020b 	ldhu	r2,8(r2)
  8121fc:	1007883a 	mov	r3,r2
  812200:	e0bffd0b 	ldhu	r2,-12(fp)
  812204:	0084303a 	nor	r2,zero,r2
  812208:	1884703a 	and	r2,r3,r2
  81220c:	1007883a 	mov	r3,r2
  812210:	e0bffc17 	ldw	r2,-16(fp)
  812214:	10c0020d 	sth	r3,8(r2)
             break;
  812218:	00001106 	br	812260 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  81221c:	e0bffc17 	ldw	r2,-16(fp)
  812220:	10c0020b 	ldhu	r3,8(r2)
  812224:	e0bffd0b 	ldhu	r2,-12(fp)
  812228:	1884b03a 	or	r2,r3,r2
  81222c:	1007883a 	mov	r3,r2
  812230:	e0bffc17 	ldw	r2,-16(fp)
  812234:	10c0020d 	sth	r3,8(r2)
             break;
  812238:	00000906 	br	812260 <OSFlagPost+0x120>
  81223c:	e0bff317 	ldw	r2,-52(fp)
  812240:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812244:	e0bff417 	ldw	r2,-48(fp)
  812248:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  81224c:	e0bfff17 	ldw	r2,-4(fp)
  812250:	00c01c44 	movi	r3,113
  812254:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  812258:	0005883a 	mov	r2,zero
  81225c:	00009806 	br	8124c0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  812260:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  812264:	e0bffc17 	ldw	r2,-16(fp)
  812268:	10800117 	ldw	r2,4(r2)
  81226c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  812270:	00007706 	br	812450 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  812274:	e0bff117 	ldw	r2,-60(fp)
  812278:	10800483 	ldbu	r2,18(r2)
  81227c:	10803fcc 	andi	r2,r2,255
  812280:	10c00060 	cmpeqi	r3,r2,1
  812284:	18004a1e 	bne	r3,zero,8123b0 <OSFlagPost+0x270>
  812288:	10c00088 	cmpgei	r3,r2,2
  81228c:	1800021e 	bne	r3,zero,812298 <OSFlagPost+0x158>
  812290:	10002f26 	beq	r2,zero,812350 <OSFlagPost+0x210>
  812294:	00005b06 	br	812404 <OSFlagPost+0x2c4>
  812298:	10c000a0 	cmpeqi	r3,r2,2
  81229c:	1800031e 	bne	r3,zero,8122ac <OSFlagPost+0x16c>
  8122a0:	108000e0 	cmpeqi	r2,r2,3
  8122a4:	1000171e 	bne	r2,zero,812304 <OSFlagPost+0x1c4>
  8122a8:	00005606 	br	812404 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8122ac:	e0bffc17 	ldw	r2,-16(fp)
  8122b0:	10c0020b 	ldhu	r3,8(r2)
  8122b4:	e0bff117 	ldw	r2,-60(fp)
  8122b8:	1080040b 	ldhu	r2,16(r2)
  8122bc:	1884703a 	and	r2,r3,r2
  8122c0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8122c4:	e0bff117 	ldw	r2,-60(fp)
  8122c8:	1080040b 	ldhu	r2,16(r2)
  8122cc:	10ffffcc 	andi	r3,r2,65535
  8122d0:	e0bff60b 	ldhu	r2,-40(fp)
  8122d4:	1880541e 	bne	r3,r2,812428 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8122d8:	e0bff60b 	ldhu	r2,-40(fp)
  8122dc:	100b883a 	mov	r5,r2
  8122e0:	e13ff117 	ldw	r4,-60(fp)
  8122e4:	08127d80 	call	8127d8 <OS_FlagTaskRdy>
  8122e8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8122ec:	e0bff683 	ldbu	r2,-38(fp)
  8122f0:	10800058 	cmpnei	r2,r2,1
  8122f4:	10004c1e 	bne	r2,zero,812428 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8122f8:	00800044 	movi	r2,1
  8122fc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  812300:	00004906 	br	812428 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  812304:	e0bffc17 	ldw	r2,-16(fp)
  812308:	10c0020b 	ldhu	r3,8(r2)
  81230c:	e0bff117 	ldw	r2,-60(fp)
  812310:	1080040b 	ldhu	r2,16(r2)
  812314:	1884703a 	and	r2,r3,r2
  812318:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81231c:	e0bff60b 	ldhu	r2,-40(fp)
  812320:	10004326 	beq	r2,zero,812430 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  812324:	e0bff60b 	ldhu	r2,-40(fp)
  812328:	100b883a 	mov	r5,r2
  81232c:	e13ff117 	ldw	r4,-60(fp)
  812330:	08127d80 	call	8127d8 <OS_FlagTaskRdy>
  812334:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  812338:	e0bff683 	ldbu	r2,-38(fp)
  81233c:	10800058 	cmpnei	r2,r2,1
  812340:	10003b1e 	bne	r2,zero,812430 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  812344:	00800044 	movi	r2,1
  812348:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  81234c:	00003806 	br	812430 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  812350:	e0bffc17 	ldw	r2,-16(fp)
  812354:	1080020b 	ldhu	r2,8(r2)
  812358:	0084303a 	nor	r2,zero,r2
  81235c:	1007883a 	mov	r3,r2
  812360:	e0bff117 	ldw	r2,-60(fp)
  812364:	1080040b 	ldhu	r2,16(r2)
  812368:	1884703a 	and	r2,r3,r2
  81236c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  812370:	e0bff117 	ldw	r2,-60(fp)
  812374:	1080040b 	ldhu	r2,16(r2)
  812378:	10ffffcc 	andi	r3,r2,65535
  81237c:	e0bff60b 	ldhu	r2,-40(fp)
  812380:	18802d1e 	bne	r3,r2,812438 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  812384:	e0bff60b 	ldhu	r2,-40(fp)
  812388:	100b883a 	mov	r5,r2
  81238c:	e13ff117 	ldw	r4,-60(fp)
  812390:	08127d80 	call	8127d8 <OS_FlagTaskRdy>
  812394:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  812398:	e0bff683 	ldbu	r2,-38(fp)
  81239c:	10800058 	cmpnei	r2,r2,1
  8123a0:	1000251e 	bne	r2,zero,812438 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8123a4:	00800044 	movi	r2,1
  8123a8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8123ac:	00002206 	br	812438 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8123b0:	e0bffc17 	ldw	r2,-16(fp)
  8123b4:	1080020b 	ldhu	r2,8(r2)
  8123b8:	0084303a 	nor	r2,zero,r2
  8123bc:	1007883a 	mov	r3,r2
  8123c0:	e0bff117 	ldw	r2,-60(fp)
  8123c4:	1080040b 	ldhu	r2,16(r2)
  8123c8:	1884703a 	and	r2,r3,r2
  8123cc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8123d0:	e0bff60b 	ldhu	r2,-40(fp)
  8123d4:	10001a26 	beq	r2,zero,812440 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8123d8:	e0bff60b 	ldhu	r2,-40(fp)
  8123dc:	100b883a 	mov	r5,r2
  8123e0:	e13ff117 	ldw	r4,-60(fp)
  8123e4:	08127d80 	call	8127d8 <OS_FlagTaskRdy>
  8123e8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8123ec:	e0bff683 	ldbu	r2,-38(fp)
  8123f0:	10800058 	cmpnei	r2,r2,1
  8123f4:	1000121e 	bne	r2,zero,812440 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8123f8:	00800044 	movi	r2,1
  8123fc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  812400:	00000f06 	br	812440 <OSFlagPost+0x300>
  812404:	e0bff317 	ldw	r2,-52(fp)
  812408:	e0bff515 	stw	r2,-44(fp)
  81240c:	e0bff517 	ldw	r2,-44(fp)
  812410:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  812414:	e0bfff17 	ldw	r2,-4(fp)
  812418:	00c01bc4 	movi	r3,111
  81241c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  812420:	0005883a 	mov	r2,zero
  812424:	00002606 	br	8124c0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  812428:	0001883a 	nop
  81242c:	00000506 	br	812444 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  812430:	0001883a 	nop
  812434:	00000306 	br	812444 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  812438:	0001883a 	nop
  81243c:	00000106 	br	812444 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  812440:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  812444:	e0bff117 	ldw	r2,-60(fp)
  812448:	10800017 	ldw	r2,0(r2)
  81244c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  812450:	e0bff117 	ldw	r2,-60(fp)
  812454:	103f871e 	bne	r2,zero,812274 <__alt_mem_epcs_flash_controller_0+0xff809274>
  812458:	e0bff317 	ldw	r2,-52(fp)
  81245c:	e0bff715 	stw	r2,-36(fp)
  812460:	e0bff717 	ldw	r2,-36(fp)
  812464:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  812468:	e0bff203 	ldbu	r2,-56(fp)
  81246c:	10800058 	cmpnei	r2,r2,1
  812470:	1000011e 	bne	r2,zero,812478 <OSFlagPost+0x338>
        OS_Sched();
  812474:	08109f80 	call	8109f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812478:	0005303a 	rdctl	r2,status
  81247c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812480:	e0fffa17 	ldw	r3,-24(fp)
  812484:	00bfff84 	movi	r2,-2
  812488:	1884703a 	and	r2,r3,r2
  81248c:	1001703a 	wrctl	status,r2
  
  return context;
  812490:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  812494:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  812498:	e0bffc17 	ldw	r2,-16(fp)
  81249c:	1080020b 	ldhu	r2,8(r2)
  8124a0:	e0bff90d 	sth	r2,-28(fp)
  8124a4:	e0bff317 	ldw	r2,-52(fp)
  8124a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124ac:	e0bff817 	ldw	r2,-32(fp)
  8124b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  8124b4:	e0bfff17 	ldw	r2,-4(fp)
  8124b8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  8124bc:	e0bff90b 	ldhu	r2,-28(fp)
}
  8124c0:	e037883a 	mov	sp,fp
  8124c4:	dfc00117 	ldw	ra,4(sp)
  8124c8:	df000017 	ldw	fp,0(sp)
  8124cc:	dec00204 	addi	sp,sp,8
  8124d0:	f800283a 	ret

008124d4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  8124d4:	defff904 	addi	sp,sp,-28
  8124d8:	df000615 	stw	fp,24(sp)
  8124dc:	df000604 	addi	fp,sp,24
  8124e0:	e13ffe15 	stw	r4,-8(fp)
  8124e4:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  8124e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  8124ec:	e0bfff17 	ldw	r2,-4(fp)
  8124f0:	1000021e 	bne	r2,zero,8124fc <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  8124f4:	0005883a 	mov	r2,zero
  8124f8:	00002306 	br	812588 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  8124fc:	e0bffe17 	ldw	r2,-8(fp)
  812500:	1000051e 	bne	r2,zero,812518 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  812504:	e0bfff17 	ldw	r2,-4(fp)
  812508:	00c01b84 	movi	r3,110
  81250c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  812510:	0005883a 	mov	r2,zero
  812514:	00001c06 	br	812588 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  812518:	e0bffe17 	ldw	r2,-8(fp)
  81251c:	10800003 	ldbu	r2,0(r2)
  812520:	10803fcc 	andi	r2,r2,255
  812524:	10800160 	cmpeqi	r2,r2,5
  812528:	1000051e 	bne	r2,zero,812540 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  81252c:	e0bfff17 	ldw	r2,-4(fp)
  812530:	00c00044 	movi	r3,1
  812534:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  812538:	0005883a 	mov	r2,zero
  81253c:	00001206 	br	812588 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812540:	0005303a 	rdctl	r2,status
  812544:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812548:	e0fffc17 	ldw	r3,-16(fp)
  81254c:	00bfff84 	movi	r2,-2
  812550:	1884703a 	and	r2,r3,r2
  812554:	1001703a 	wrctl	status,r2
  
  return context;
  812558:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81255c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  812560:	e0bffe17 	ldw	r2,-8(fp)
  812564:	1080020b 	ldhu	r2,8(r2)
  812568:	e0bffb0d 	sth	r2,-20(fp)
  81256c:	e0bffa17 	ldw	r2,-24(fp)
  812570:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812574:	e0bffd17 	ldw	r2,-12(fp)
  812578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81257c:	e0bfff17 	ldw	r2,-4(fp)
  812580:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  812584:	e0bffb0b 	ldhu	r2,-20(fp)
}
  812588:	e037883a 	mov	sp,fp
  81258c:	df000017 	ldw	fp,0(sp)
  812590:	dec00104 	addi	sp,sp,4
  812594:	f800283a 	ret

00812598 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  812598:	defff804 	addi	sp,sp,-32
  81259c:	df000715 	stw	fp,28(sp)
  8125a0:	df000704 	addi	fp,sp,28
  8125a4:	e13ffb15 	stw	r4,-20(fp)
  8125a8:	e17ffc15 	stw	r5,-16(fp)
  8125ac:	3009883a 	mov	r4,r6
  8125b0:	3807883a 	mov	r3,r7
  8125b4:	e0800117 	ldw	r2,4(fp)
  8125b8:	e13ffd0d 	sth	r4,-12(fp)
  8125bc:	e0fffe05 	stb	r3,-8(fp)
  8125c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  8125c4:	d0a09a17 	ldw	r2,-32152(gp)
  8125c8:	d0e09a17 	ldw	r3,-32152(gp)
  8125cc:	18c00c03 	ldbu	r3,48(r3)
  8125d0:	18c00814 	ori	r3,r3,32
  8125d4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  8125d8:	d0a09a17 	ldw	r2,-32152(gp)
  8125dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  8125e0:	d0a09a17 	ldw	r2,-32152(gp)
  8125e4:	e0ffff0b 	ldhu	r3,-4(fp)
  8125e8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  8125ec:	d0a09a17 	ldw	r2,-32152(gp)
  8125f0:	e0fffc17 	ldw	r3,-16(fp)
  8125f4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  8125f8:	e0bffc17 	ldw	r2,-16(fp)
  8125fc:	e0fffd0b 	ldhu	r3,-12(fp)
  812600:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  812604:	e0bffc17 	ldw	r2,-16(fp)
  812608:	e0fffe03 	ldbu	r3,-8(fp)
  81260c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  812610:	d0e09a17 	ldw	r3,-32152(gp)
  812614:	e0bffc17 	ldw	r2,-16(fp)
  812618:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  81261c:	e0bffb17 	ldw	r2,-20(fp)
  812620:	10c00117 	ldw	r3,4(r2)
  812624:	e0bffc17 	ldw	r2,-16(fp)
  812628:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  81262c:	e0bffc17 	ldw	r2,-16(fp)
  812630:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  812634:	e0bffc17 	ldw	r2,-16(fp)
  812638:	e0fffb17 	ldw	r3,-20(fp)
  81263c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  812640:	e0bffb17 	ldw	r2,-20(fp)
  812644:	10800117 	ldw	r2,4(r2)
  812648:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  81264c:	e0bff917 	ldw	r2,-28(fp)
  812650:	10000326 	beq	r2,zero,812660 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  812654:	e0bff917 	ldw	r2,-28(fp)
  812658:	e0fffc17 	ldw	r3,-16(fp)
  81265c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  812660:	e0bffb17 	ldw	r2,-20(fp)
  812664:	e0fffc17 	ldw	r3,-16(fp)
  812668:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  81266c:	d0a09a17 	ldw	r2,-32152(gp)
  812670:	10800d03 	ldbu	r2,52(r2)
  812674:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  812678:	e0fffa03 	ldbu	r3,-24(fp)
  81267c:	e13ffa03 	ldbu	r4,-24(fp)
  812680:	d0a09744 	addi	r2,gp,-32163
  812684:	2085883a 	add	r2,r4,r2
  812688:	10800003 	ldbu	r2,0(r2)
  81268c:	1009883a 	mov	r4,r2
  812690:	d0a09a17 	ldw	r2,-32152(gp)
  812694:	10800d43 	ldbu	r2,53(r2)
  812698:	0084303a 	nor	r2,zero,r2
  81269c:	2084703a 	and	r2,r4,r2
  8126a0:	1009883a 	mov	r4,r2
  8126a4:	d0a09744 	addi	r2,gp,-32163
  8126a8:	1885883a 	add	r2,r3,r2
  8126ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  8126b0:	e0fffa03 	ldbu	r3,-24(fp)
  8126b4:	d0a09744 	addi	r2,gp,-32163
  8126b8:	1885883a 	add	r2,r3,r2
  8126bc:	10800003 	ldbu	r2,0(r2)
  8126c0:	10803fcc 	andi	r2,r2,255
  8126c4:	1000071e 	bne	r2,zero,8126e4 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8126c8:	d0a09a17 	ldw	r2,-32152(gp)
  8126cc:	10800d83 	ldbu	r2,54(r2)
  8126d0:	0084303a 	nor	r2,zero,r2
  8126d4:	1007883a 	mov	r3,r2
  8126d8:	d0a09703 	ldbu	r2,-32164(gp)
  8126dc:	1884703a 	and	r2,r3,r2
  8126e0:	d0a09705 	stb	r2,-32164(gp)
    }
}
  8126e4:	0001883a 	nop
  8126e8:	e037883a 	mov	sp,fp
  8126ec:	df000017 	ldw	fp,0(sp)
  8126f0:	dec00104 	addi	sp,sp,4
  8126f4:	f800283a 	ret

008126f8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  8126f8:	defffb04 	addi	sp,sp,-20
  8126fc:	dfc00415 	stw	ra,16(sp)
  812700:	df000315 	stw	fp,12(sp)
  812704:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  812708:	0140dc04 	movi	r5,880
  81270c:	010020b4 	movhi	r4,130
  812710:	2114f504 	addi	r4,r4,21460
  812714:	081093c0 	call	81093c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  812718:	008020b4 	movhi	r2,130
  81271c:	1094f504 	addi	r2,r2,21460
  812720:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  812724:	008020b4 	movhi	r2,130
  812728:	10950004 	addi	r2,r2,21504
  81272c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  812730:	e03ffd0d 	sth	zero,-12(fp)
  812734:	00001306 	br	812784 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  812738:	e0bffe17 	ldw	r2,-8(fp)
  81273c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  812740:	e0bffe17 	ldw	r2,-8(fp)
  812744:	e0ffff17 	ldw	r3,-4(fp)
  812748:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  81274c:	e0bffe17 	ldw	r2,-8(fp)
  812750:	00c00fc4 	movi	r3,63
  812754:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  812758:	e0bffe17 	ldw	r2,-8(fp)
  81275c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  812760:	e0bffe17 	ldw	r2,-8(fp)
  812764:	10800b04 	addi	r2,r2,44
  812768:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  81276c:	e0bfff17 	ldw	r2,-4(fp)
  812770:	10800b04 	addi	r2,r2,44
  812774:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  812778:	e0bffd0b 	ldhu	r2,-12(fp)
  81277c:	10800044 	addi	r2,r2,1
  812780:	e0bffd0d 	sth	r2,-12(fp)
  812784:	e0bffd0b 	ldhu	r2,-12(fp)
  812788:	108004f0 	cmpltui	r2,r2,19
  81278c:	103fea1e 	bne	r2,zero,812738 <__alt_mem_epcs_flash_controller_0+0xff809738>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  812790:	e0bffe17 	ldw	r2,-8(fp)
  812794:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  812798:	e0bffe17 	ldw	r2,-8(fp)
  81279c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  8127a0:	e0bffe17 	ldw	r2,-8(fp)
  8127a4:	00c00fc4 	movi	r3,63
  8127a8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8127ac:	e0bffe17 	ldw	r2,-8(fp)
  8127b0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  8127b4:	008020b4 	movhi	r2,130
  8127b8:	1094f504 	addi	r2,r2,21460
  8127bc:	d0a09c15 	stw	r2,-32144(gp)
#endif
}
  8127c0:	0001883a 	nop
  8127c4:	e037883a 	mov	sp,fp
  8127c8:	dfc00117 	ldw	ra,4(sp)
  8127cc:	df000017 	ldw	fp,0(sp)
  8127d0:	dec00204 	addi	sp,sp,8
  8127d4:	f800283a 	ret

008127d8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  8127d8:	defffa04 	addi	sp,sp,-24
  8127dc:	dfc00515 	stw	ra,20(sp)
  8127e0:	df000415 	stw	fp,16(sp)
  8127e4:	df000404 	addi	fp,sp,16
  8127e8:	e13ffe15 	stw	r4,-8(fp)
  8127ec:	2805883a 	mov	r2,r5
  8127f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  8127f4:	e0bffe17 	ldw	r2,-8(fp)
  8127f8:	10800217 	ldw	r2,8(r2)
  8127fc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  812800:	e0bffd17 	ldw	r2,-12(fp)
  812804:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  812808:	e0bffd17 	ldw	r2,-12(fp)
  81280c:	e0ffff0b 	ldhu	r3,-4(fp)
  812810:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  812814:	e0bffd17 	ldw	r2,-12(fp)
  812818:	10c00c03 	ldbu	r3,48(r2)
  81281c:	00bff7c4 	movi	r2,-33
  812820:	1884703a 	and	r2,r3,r2
  812824:	1007883a 	mov	r3,r2
  812828:	e0bffd17 	ldw	r2,-12(fp)
  81282c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  812830:	e0bffd17 	ldw	r2,-12(fp)
  812834:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  812838:	e0bffd17 	ldw	r2,-12(fp)
  81283c:	10800c03 	ldbu	r2,48(r2)
  812840:	10803fcc 	andi	r2,r2,255
  812844:	1000181e 	bne	r2,zero,8128a8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  812848:	e0bffd17 	ldw	r2,-12(fp)
  81284c:	10c00d83 	ldbu	r3,54(r2)
  812850:	d0a09703 	ldbu	r2,-32164(gp)
  812854:	1884b03a 	or	r2,r3,r2
  812858:	d0a09705 	stb	r2,-32164(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81285c:	e0bffd17 	ldw	r2,-12(fp)
  812860:	10800d03 	ldbu	r2,52(r2)
  812864:	10c03fcc 	andi	r3,r2,255
  812868:	e0bffd17 	ldw	r2,-12(fp)
  81286c:	10800d03 	ldbu	r2,52(r2)
  812870:	11003fcc 	andi	r4,r2,255
  812874:	d0a09744 	addi	r2,gp,-32163
  812878:	2085883a 	add	r2,r4,r2
  81287c:	11000003 	ldbu	r4,0(r2)
  812880:	e0bffd17 	ldw	r2,-12(fp)
  812884:	10800d43 	ldbu	r2,53(r2)
  812888:	2084b03a 	or	r2,r4,r2
  81288c:	1009883a 	mov	r4,r2
  812890:	d0a09744 	addi	r2,gp,-32163
  812894:	1885883a 	add	r2,r3,r2
  812898:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  81289c:	00800044 	movi	r2,1
  8128a0:	e0bffc05 	stb	r2,-16(fp)
  8128a4:	00000106 	br	8128ac <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  8128a8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  8128ac:	e13ffe17 	ldw	r4,-8(fp)
  8128b0:	08128cc0 	call	8128cc <OS_FlagUnlink>
    return (sched);
  8128b4:	e0bffc03 	ldbu	r2,-16(fp)
}
  8128b8:	e037883a 	mov	sp,fp
  8128bc:	dfc00117 	ldw	ra,4(sp)
  8128c0:	df000017 	ldw	fp,0(sp)
  8128c4:	dec00204 	addi	sp,sp,8
  8128c8:	f800283a 	ret

008128cc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  8128cc:	defffa04 	addi	sp,sp,-24
  8128d0:	df000515 	stw	fp,20(sp)
  8128d4:	df000504 	addi	fp,sp,20
  8128d8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  8128dc:	e0bfff17 	ldw	r2,-4(fp)
  8128e0:	10800117 	ldw	r2,4(r2)
  8128e4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  8128e8:	e0bfff17 	ldw	r2,-4(fp)
  8128ec:	10800017 	ldw	r2,0(r2)
  8128f0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  8128f4:	e0bffb17 	ldw	r2,-20(fp)
  8128f8:	10000b1e 	bne	r2,zero,812928 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  8128fc:	e0bfff17 	ldw	r2,-4(fp)
  812900:	10800317 	ldw	r2,12(r2)
  812904:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  812908:	e0bffd17 	ldw	r2,-12(fp)
  81290c:	e0fffc17 	ldw	r3,-16(fp)
  812910:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  812914:	e0bffc17 	ldw	r2,-16(fp)
  812918:	10000b26 	beq	r2,zero,812948 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  81291c:	e0bffc17 	ldw	r2,-16(fp)
  812920:	10000115 	stw	zero,4(r2)
  812924:	00000806 	br	812948 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  812928:	e0bffb17 	ldw	r2,-20(fp)
  81292c:	e0fffc17 	ldw	r3,-16(fp)
  812930:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  812934:	e0bffc17 	ldw	r2,-16(fp)
  812938:	10000326 	beq	r2,zero,812948 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  81293c:	e0bffc17 	ldw	r2,-16(fp)
  812940:	e0fffb17 	ldw	r3,-20(fp)
  812944:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  812948:	e0bfff17 	ldw	r2,-4(fp)
  81294c:	10800217 	ldw	r2,8(r2)
  812950:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  812954:	e0bffe17 	ldw	r2,-8(fp)
  812958:	10000a15 	stw	zero,40(r2)
#endif
}
  81295c:	0001883a 	nop
  812960:	e037883a 	mov	sp,fp
  812964:	df000017 	ldw	fp,0(sp)
  812968:	dec00104 	addi	sp,sp,4
  81296c:	f800283a 	ret

00812970 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  812970:	defff404 	addi	sp,sp,-48
  812974:	df000b15 	stw	fp,44(sp)
  812978:	df000b04 	addi	fp,sp,44
  81297c:	e13ffc15 	stw	r4,-16(fp)
  812980:	e17ffd15 	stw	r5,-12(fp)
  812984:	e1bffe15 	stw	r6,-8(fp)
  812988:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81298c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812990:	e0bfff17 	ldw	r2,-4(fp)
  812994:	1000021e 	bne	r2,zero,8129a0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  812998:	0005883a 	mov	r2,zero
  81299c:	00006506 	br	812b34 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  8129a0:	e0bffc17 	ldw	r2,-16(fp)
  8129a4:	1000051e 	bne	r2,zero,8129bc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  8129a8:	e0bfff17 	ldw	r2,-4(fp)
  8129ac:	00c01884 	movi	r3,98
  8129b0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8129b4:	0005883a 	mov	r2,zero
  8129b8:	00005e06 	br	812b34 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  8129bc:	e0bffc17 	ldw	r2,-16(fp)
  8129c0:	108000cc 	andi	r2,r2,3
  8129c4:	10000526 	beq	r2,zero,8129dc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  8129c8:	e0bfff17 	ldw	r2,-4(fp)
  8129cc:	00c01884 	movi	r3,98
  8129d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8129d4:	0005883a 	mov	r2,zero
  8129d8:	00005606 	br	812b34 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  8129dc:	e0bffd17 	ldw	r2,-12(fp)
  8129e0:	108000a8 	cmpgeui	r2,r2,2
  8129e4:	1000051e 	bne	r2,zero,8129fc <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  8129e8:	e0bfff17 	ldw	r2,-4(fp)
  8129ec:	00c016c4 	movi	r3,91
  8129f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8129f4:	0005883a 	mov	r2,zero
  8129f8:	00004e06 	br	812b34 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  8129fc:	e0bffe17 	ldw	r2,-8(fp)
  812a00:	10800128 	cmpgeui	r2,r2,4
  812a04:	1000051e 	bne	r2,zero,812a1c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  812a08:	e0bfff17 	ldw	r2,-4(fp)
  812a0c:	00c01704 	movi	r3,92
  812a10:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  812a14:	0005883a 	mov	r2,zero
  812a18:	00004606 	br	812b34 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a1c:	0005303a 	rdctl	r2,status
  812a20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a24:	e0fffb17 	ldw	r3,-20(fp)
  812a28:	00bfff84 	movi	r2,-2
  812a2c:	1884703a 	and	r2,r3,r2
  812a30:	1001703a 	wrctl	status,r2
  
  return context;
  812a34:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812a38:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  812a3c:	d0a09417 	ldw	r2,-32176(gp)
  812a40:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  812a44:	d0a09417 	ldw	r2,-32176(gp)
  812a48:	10000326 	beq	r2,zero,812a58 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  812a4c:	d0a09417 	ldw	r2,-32176(gp)
  812a50:	10800117 	ldw	r2,4(r2)
  812a54:	d0a09415 	stw	r2,-32176(gp)
  812a58:	e0bff817 	ldw	r2,-32(fp)
  812a5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a60:	e0bff917 	ldw	r2,-28(fp)
  812a64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  812a68:	e0bffa17 	ldw	r2,-24(fp)
  812a6c:	1000051e 	bne	r2,zero,812a84 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  812a70:	e0bfff17 	ldw	r2,-4(fp)
  812a74:	00c01684 	movi	r3,90
  812a78:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  812a7c:	0005883a 	mov	r2,zero
  812a80:	00002c06 	br	812b34 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  812a84:	e0bffc17 	ldw	r2,-16(fp)
  812a88:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  812a8c:	e0fffc17 	ldw	r3,-16(fp)
  812a90:	e0bffe17 	ldw	r2,-8(fp)
  812a94:	1885883a 	add	r2,r3,r2
  812a98:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  812a9c:	e03ff715 	stw	zero,-36(fp)
  812aa0:	00000c06 	br	812ad4 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  812aa4:	e0bff617 	ldw	r2,-40(fp)
  812aa8:	e0fff517 	ldw	r3,-44(fp)
  812aac:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  812ab0:	e0bff517 	ldw	r2,-44(fp)
  812ab4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  812ab8:	e0fff517 	ldw	r3,-44(fp)
  812abc:	e0bffe17 	ldw	r2,-8(fp)
  812ac0:	1885883a 	add	r2,r3,r2
  812ac4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  812ac8:	e0bff717 	ldw	r2,-36(fp)
  812acc:	10800044 	addi	r2,r2,1
  812ad0:	e0bff715 	stw	r2,-36(fp)
  812ad4:	e0bffd17 	ldw	r2,-12(fp)
  812ad8:	10bfffc4 	addi	r2,r2,-1
  812adc:	e0fff717 	ldw	r3,-36(fp)
  812ae0:	18bff036 	bltu	r3,r2,812aa4 <__alt_mem_epcs_flash_controller_0+0xff809aa4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  812ae4:	e0bff617 	ldw	r2,-40(fp)
  812ae8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  812aec:	e0bffa17 	ldw	r2,-24(fp)
  812af0:	e0fffc17 	ldw	r3,-16(fp)
  812af4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  812af8:	e0bffa17 	ldw	r2,-24(fp)
  812afc:	e0fffc17 	ldw	r3,-16(fp)
  812b00:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  812b04:	e0bffa17 	ldw	r2,-24(fp)
  812b08:	e0fffd17 	ldw	r3,-12(fp)
  812b0c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  812b10:	e0bffa17 	ldw	r2,-24(fp)
  812b14:	e0fffd17 	ldw	r3,-12(fp)
  812b18:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  812b1c:	e0bffa17 	ldw	r2,-24(fp)
  812b20:	e0fffe17 	ldw	r3,-8(fp)
  812b24:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  812b28:	e0bfff17 	ldw	r2,-4(fp)
  812b2c:	10000005 	stb	zero,0(r2)
    return (pmem);
  812b30:	e0bffa17 	ldw	r2,-24(fp)
}
  812b34:	e037883a 	mov	sp,fp
  812b38:	df000017 	ldw	fp,0(sp)
  812b3c:	dec00104 	addi	sp,sp,4
  812b40:	f800283a 	ret

00812b44 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  812b44:	defff804 	addi	sp,sp,-32
  812b48:	df000715 	stw	fp,28(sp)
  812b4c:	df000704 	addi	fp,sp,28
  812b50:	e13ffe15 	stw	r4,-8(fp)
  812b54:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812b58:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812b5c:	e0bfff17 	ldw	r2,-4(fp)
  812b60:	1000021e 	bne	r2,zero,812b6c <OSMemGet+0x28>
        return ((void *)0);
  812b64:	0005883a 	mov	r2,zero
  812b68:	00002e06 	br	812c24 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  812b6c:	e0bffe17 	ldw	r2,-8(fp)
  812b70:	1000051e 	bne	r2,zero,812b88 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812b74:	e0bfff17 	ldw	r2,-4(fp)
  812b78:	00c01804 	movi	r3,96
  812b7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  812b80:	0005883a 	mov	r2,zero
  812b84:	00002706 	br	812c24 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b88:	0005303a 	rdctl	r2,status
  812b8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b90:	e0fffd17 	ldw	r3,-12(fp)
  812b94:	00bfff84 	movi	r2,-2
  812b98:	1884703a 	and	r2,r3,r2
  812b9c:	1001703a 	wrctl	status,r2
  
  return context;
  812ba0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812ba4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  812ba8:	e0bffe17 	ldw	r2,-8(fp)
  812bac:	10800417 	ldw	r2,16(r2)
  812bb0:	10001426 	beq	r2,zero,812c04 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  812bb4:	e0bffe17 	ldw	r2,-8(fp)
  812bb8:	10800117 	ldw	r2,4(r2)
  812bbc:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  812bc0:	e0bffb17 	ldw	r2,-20(fp)
  812bc4:	10c00017 	ldw	r3,0(r2)
  812bc8:	e0bffe17 	ldw	r2,-8(fp)
  812bcc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  812bd0:	e0bffe17 	ldw	r2,-8(fp)
  812bd4:	10800417 	ldw	r2,16(r2)
  812bd8:	10ffffc4 	addi	r3,r2,-1
  812bdc:	e0bffe17 	ldw	r2,-8(fp)
  812be0:	10c00415 	stw	r3,16(r2)
  812be4:	e0bff917 	ldw	r2,-28(fp)
  812be8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812bec:	e0bffa17 	ldw	r2,-24(fp)
  812bf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  812bf4:	e0bfff17 	ldw	r2,-4(fp)
  812bf8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  812bfc:	e0bffb17 	ldw	r2,-20(fp)
  812c00:	00000806 	br	812c24 <OSMemGet+0xe0>
  812c04:	e0bff917 	ldw	r2,-28(fp)
  812c08:	e0bffc15 	stw	r2,-16(fp)
  812c0c:	e0bffc17 	ldw	r2,-16(fp)
  812c10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  812c14:	e0bfff17 	ldw	r2,-4(fp)
  812c18:	00c01744 	movi	r3,93
  812c1c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  812c20:	0005883a 	mov	r2,zero
}
  812c24:	e037883a 	mov	sp,fp
  812c28:	df000017 	ldw	fp,0(sp)
  812c2c:	dec00104 	addi	sp,sp,4
  812c30:	f800283a 	ret

00812c34 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  812c34:	defff704 	addi	sp,sp,-36
  812c38:	dfc00815 	stw	ra,32(sp)
  812c3c:	df000715 	stw	fp,28(sp)
  812c40:	df000704 	addi	fp,sp,28
  812c44:	e13ffd15 	stw	r4,-12(fp)
  812c48:	e17ffe15 	stw	r5,-8(fp)
  812c4c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812c50:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812c54:	e0bfff17 	ldw	r2,-4(fp)
  812c58:	1000021e 	bne	r2,zero,812c64 <OSMemNameGet+0x30>
        return (0);
  812c5c:	0005883a 	mov	r2,zero
  812c60:	00002b06 	br	812d10 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  812c64:	e0bffd17 	ldw	r2,-12(fp)
  812c68:	1000051e 	bne	r2,zero,812c80 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812c6c:	e0bfff17 	ldw	r2,-4(fp)
  812c70:	00c01804 	movi	r3,96
  812c74:	10c00005 	stb	r3,0(r2)
        return (0);
  812c78:	0005883a 	mov	r2,zero
  812c7c:	00002406 	br	812d10 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812c80:	e0bffe17 	ldw	r2,-8(fp)
  812c84:	1000051e 	bne	r2,zero,812c9c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  812c88:	e0bfff17 	ldw	r2,-4(fp)
  812c8c:	00c00304 	movi	r3,12
  812c90:	10c00005 	stb	r3,0(r2)
        return (0);
  812c94:	0005883a 	mov	r2,zero
  812c98:	00001d06 	br	812d10 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812c9c:	d0a09903 	ldbu	r2,-32156(gp)
  812ca0:	10803fcc 	andi	r2,r2,255
  812ca4:	10000526 	beq	r2,zero,812cbc <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  812ca8:	e0bfff17 	ldw	r2,-4(fp)
  812cac:	00c00444 	movi	r3,17
  812cb0:	10c00005 	stb	r3,0(r2)
        return (0);
  812cb4:	0005883a 	mov	r2,zero
  812cb8:	00001506 	br	812d10 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812cbc:	0005303a 	rdctl	r2,status
  812cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812cc4:	e0fffb17 	ldw	r3,-20(fp)
  812cc8:	00bfff84 	movi	r2,-2
  812ccc:	1884703a 	and	r2,r3,r2
  812cd0:	1001703a 	wrctl	status,r2
  
  return context;
  812cd4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812cd8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  812cdc:	e0bffd17 	ldw	r2,-12(fp)
  812ce0:	10800504 	addi	r2,r2,20
  812ce4:	100b883a 	mov	r5,r2
  812ce8:	e13ffe17 	ldw	r4,-8(fp)
  812cec:	0810b3c0 	call	810b3c <OS_StrCopy>
  812cf0:	e0bffa05 	stb	r2,-24(fp)
  812cf4:	e0bff917 	ldw	r2,-28(fp)
  812cf8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cfc:	e0bffc17 	ldw	r2,-16(fp)
  812d00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812d04:	e0bfff17 	ldw	r2,-4(fp)
  812d08:	10000005 	stb	zero,0(r2)
    return (len);
  812d0c:	e0bffa03 	ldbu	r2,-24(fp)
}
  812d10:	e037883a 	mov	sp,fp
  812d14:	dfc00117 	ldw	ra,4(sp)
  812d18:	df000017 	ldw	fp,0(sp)
  812d1c:	dec00204 	addi	sp,sp,8
  812d20:	f800283a 	ret

00812d24 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  812d24:	defff604 	addi	sp,sp,-40
  812d28:	dfc00915 	stw	ra,36(sp)
  812d2c:	df000815 	stw	fp,32(sp)
  812d30:	df000804 	addi	fp,sp,32
  812d34:	e13ffd15 	stw	r4,-12(fp)
  812d38:	e17ffe15 	stw	r5,-8(fp)
  812d3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812d40:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812d44:	e0bfff17 	ldw	r2,-4(fp)
  812d48:	10003526 	beq	r2,zero,812e20 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  812d4c:	e0bffd17 	ldw	r2,-12(fp)
  812d50:	1000041e 	bne	r2,zero,812d64 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812d54:	e0bfff17 	ldw	r2,-4(fp)
  812d58:	00c01804 	movi	r3,96
  812d5c:	10c00005 	stb	r3,0(r2)
        return;
  812d60:	00003006 	br	812e24 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812d64:	e0bffe17 	ldw	r2,-8(fp)
  812d68:	1000041e 	bne	r2,zero,812d7c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  812d6c:	e0bfff17 	ldw	r2,-4(fp)
  812d70:	00c00304 	movi	r3,12
  812d74:	10c00005 	stb	r3,0(r2)
        return;
  812d78:	00002a06 	br	812e24 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812d7c:	d0a09903 	ldbu	r2,-32156(gp)
  812d80:	10803fcc 	andi	r2,r2,255
  812d84:	10000426 	beq	r2,zero,812d98 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  812d88:	e0bfff17 	ldw	r2,-4(fp)
  812d8c:	00c00484 	movi	r3,18
  812d90:	10c00005 	stb	r3,0(r2)
        return;
  812d94:	00002306 	br	812e24 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d98:	0005303a 	rdctl	r2,status
  812d9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812da0:	e0fffc17 	ldw	r3,-16(fp)
  812da4:	00bfff84 	movi	r2,-2
  812da8:	1884703a 	and	r2,r3,r2
  812dac:	1001703a 	wrctl	status,r2
  
  return context;
  812db0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  812db4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  812db8:	e13ffe17 	ldw	r4,-8(fp)
  812dbc:	0810bb00 	call	810bb0 <OS_StrLen>
  812dc0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  812dc4:	e0bffa03 	ldbu	r2,-24(fp)
  812dc8:	10800830 	cmpltui	r2,r2,32
  812dcc:	1000081e 	bne	r2,zero,812df0 <OSMemNameSet+0xcc>
  812dd0:	e0bff817 	ldw	r2,-32(fp)
  812dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812dd8:	e0bff917 	ldw	r2,-28(fp)
  812ddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  812de0:	e0bfff17 	ldw	r2,-4(fp)
  812de4:	00c018c4 	movi	r3,99
  812de8:	10c00005 	stb	r3,0(r2)
        return;
  812dec:	00000d06 	br	812e24 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  812df0:	e0bffd17 	ldw	r2,-12(fp)
  812df4:	10800504 	addi	r2,r2,20
  812df8:	e17ffe17 	ldw	r5,-8(fp)
  812dfc:	1009883a 	mov	r4,r2
  812e00:	0810b3c0 	call	810b3c <OS_StrCopy>
  812e04:	e0bff817 	ldw	r2,-32(fp)
  812e08:	e0bffb15 	stw	r2,-20(fp)
  812e0c:	e0bffb17 	ldw	r2,-20(fp)
  812e10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812e14:	e0bfff17 	ldw	r2,-4(fp)
  812e18:	10000005 	stb	zero,0(r2)
  812e1c:	00000106 	br	812e24 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  812e20:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  812e24:	e037883a 	mov	sp,fp
  812e28:	dfc00117 	ldw	ra,4(sp)
  812e2c:	df000017 	ldw	fp,0(sp)
  812e30:	dec00204 	addi	sp,sp,8
  812e34:	f800283a 	ret

00812e38 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  812e38:	defff904 	addi	sp,sp,-28
  812e3c:	df000615 	stw	fp,24(sp)
  812e40:	df000604 	addi	fp,sp,24
  812e44:	e13ffe15 	stw	r4,-8(fp)
  812e48:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812e4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  812e50:	e0bffe17 	ldw	r2,-8(fp)
  812e54:	1000021e 	bne	r2,zero,812e60 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  812e58:	00801804 	movi	r2,96
  812e5c:	00002806 	br	812f00 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  812e60:	e0bfff17 	ldw	r2,-4(fp)
  812e64:	1000021e 	bne	r2,zero,812e70 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  812e68:	008017c4 	movi	r2,95
  812e6c:	00002406 	br	812f00 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812e70:	0005303a 	rdctl	r2,status
  812e74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e78:	e0fffd17 	ldw	r3,-12(fp)
  812e7c:	00bfff84 	movi	r2,-2
  812e80:	1884703a 	and	r2,r3,r2
  812e84:	1001703a 	wrctl	status,r2
  
  return context;
  812e88:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812e8c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  812e90:	e0bffe17 	ldw	r2,-8(fp)
  812e94:	10c00417 	ldw	r3,16(r2)
  812e98:	e0bffe17 	ldw	r2,-8(fp)
  812e9c:	10800317 	ldw	r2,12(r2)
  812ea0:	18800636 	bltu	r3,r2,812ebc <OSMemPut+0x84>
  812ea4:	e0bffa17 	ldw	r2,-24(fp)
  812ea8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812eac:	e0bffb17 	ldw	r2,-20(fp)
  812eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  812eb4:	00801784 	movi	r2,94
  812eb8:	00001106 	br	812f00 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  812ebc:	e0bffe17 	ldw	r2,-8(fp)
  812ec0:	10c00117 	ldw	r3,4(r2)
  812ec4:	e0bfff17 	ldw	r2,-4(fp)
  812ec8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  812ecc:	e0bffe17 	ldw	r2,-8(fp)
  812ed0:	e0ffff17 	ldw	r3,-4(fp)
  812ed4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  812ed8:	e0bffe17 	ldw	r2,-8(fp)
  812edc:	10800417 	ldw	r2,16(r2)
  812ee0:	10c00044 	addi	r3,r2,1
  812ee4:	e0bffe17 	ldw	r2,-8(fp)
  812ee8:	10c00415 	stw	r3,16(r2)
  812eec:	e0bffa17 	ldw	r2,-24(fp)
  812ef0:	e0bffc15 	stw	r2,-16(fp)
  812ef4:	e0bffc17 	ldw	r2,-16(fp)
  812ef8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  812efc:	0005883a 	mov	r2,zero
}
  812f00:	e037883a 	mov	sp,fp
  812f04:	df000017 	ldw	fp,0(sp)
  812f08:	dec00104 	addi	sp,sp,4
  812f0c:	f800283a 	ret

00812f10 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  812f10:	defffa04 	addi	sp,sp,-24
  812f14:	df000515 	stw	fp,20(sp)
  812f18:	df000504 	addi	fp,sp,20
  812f1c:	e13ffe15 	stw	r4,-8(fp)
  812f20:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812f24:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  812f28:	e0bffe17 	ldw	r2,-8(fp)
  812f2c:	1000021e 	bne	r2,zero,812f38 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  812f30:	00801804 	movi	r2,96
  812f34:	00002c06 	br	812fe8 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  812f38:	e0bfff17 	ldw	r2,-4(fp)
  812f3c:	1000021e 	bne	r2,zero,812f48 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  812f40:	00801844 	movi	r2,97
  812f44:	00002806 	br	812fe8 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f48:	0005303a 	rdctl	r2,status
  812f4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f50:	e0fffc17 	ldw	r3,-16(fp)
  812f54:	00bfff84 	movi	r2,-2
  812f58:	1884703a 	and	r2,r3,r2
  812f5c:	1001703a 	wrctl	status,r2
  
  return context;
  812f60:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812f64:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  812f68:	e0bffe17 	ldw	r2,-8(fp)
  812f6c:	10c00017 	ldw	r3,0(r2)
  812f70:	e0bfff17 	ldw	r2,-4(fp)
  812f74:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  812f78:	e0bffe17 	ldw	r2,-8(fp)
  812f7c:	10c00117 	ldw	r3,4(r2)
  812f80:	e0bfff17 	ldw	r2,-4(fp)
  812f84:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  812f88:	e0bffe17 	ldw	r2,-8(fp)
  812f8c:	10c00217 	ldw	r3,8(r2)
  812f90:	e0bfff17 	ldw	r2,-4(fp)
  812f94:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  812f98:	e0bffe17 	ldw	r2,-8(fp)
  812f9c:	10c00317 	ldw	r3,12(r2)
  812fa0:	e0bfff17 	ldw	r2,-4(fp)
  812fa4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  812fa8:	e0bffe17 	ldw	r2,-8(fp)
  812fac:	10c00417 	ldw	r3,16(r2)
  812fb0:	e0bfff17 	ldw	r2,-4(fp)
  812fb4:	10c00415 	stw	r3,16(r2)
  812fb8:	e0bffb17 	ldw	r2,-20(fp)
  812fbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812fc0:	e0bffd17 	ldw	r2,-12(fp)
  812fc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  812fc8:	e0bfff17 	ldw	r2,-4(fp)
  812fcc:	10c00317 	ldw	r3,12(r2)
  812fd0:	e0bfff17 	ldw	r2,-4(fp)
  812fd4:	10800417 	ldw	r2,16(r2)
  812fd8:	1887c83a 	sub	r3,r3,r2
  812fdc:	e0bfff17 	ldw	r2,-4(fp)
  812fe0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  812fe4:	0005883a 	mov	r2,zero
}
  812fe8:	e037883a 	mov	sp,fp
  812fec:	df000017 	ldw	fp,0(sp)
  812ff0:	dec00104 	addi	sp,sp,4
  812ff4:	f800283a 	ret

00812ff8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  812ff8:	defffc04 	addi	sp,sp,-16
  812ffc:	dfc00315 	stw	ra,12(sp)
  813000:	df000215 	stw	fp,8(sp)
  813004:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  813008:	01430c04 	movi	r5,3120
  81300c:	010020b4 	movhi	r4,130
  813010:	2115d104 	addi	r4,r4,22340
  813014:	081093c0 	call	81093c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  813018:	008020b4 	movhi	r2,130
  81301c:	1095d104 	addi	r2,r2,22340
  813020:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  813024:	e03fff0d 	sth	zero,-4(fp)
  813028:	00001606 	br	813084 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81302c:	e0bfff0b 	ldhu	r2,-4(fp)
  813030:	10800044 	addi	r2,r2,1
  813034:	01400d04 	movi	r5,52
  813038:	1009883a 	mov	r4,r2
  81303c:	080b99c0 	call	80b99c <__mulsi3>
  813040:	1007883a 	mov	r3,r2
  813044:	008020b4 	movhi	r2,130
  813048:	1095d104 	addi	r2,r2,22340
  81304c:	1887883a 	add	r3,r3,r2
  813050:	e0bffe17 	ldw	r2,-8(fp)
  813054:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  813058:	e0bffe17 	ldw	r2,-8(fp)
  81305c:	00c00fc4 	movi	r3,63
  813060:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  813064:	e0bffe17 	ldw	r2,-8(fp)
  813068:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  81306c:	e0bffe17 	ldw	r2,-8(fp)
  813070:	10800d04 	addi	r2,r2,52
  813074:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  813078:	e0bfff0b 	ldhu	r2,-4(fp)
  81307c:	10800044 	addi	r2,r2,1
  813080:	e0bfff0d 	sth	r2,-4(fp)
  813084:	e0bfff0b 	ldhu	r2,-4(fp)
  813088:	10800ef0 	cmpltui	r2,r2,59
  81308c:	103fe71e 	bne	r2,zero,81302c <__alt_mem_epcs_flash_controller_0+0xff80a02c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  813090:	e0bffe17 	ldw	r2,-8(fp)
  813094:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  813098:	e0bffe17 	ldw	r2,-8(fp)
  81309c:	00c00fc4 	movi	r3,63
  8130a0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  8130a4:	e0bffe17 	ldw	r2,-8(fp)
  8130a8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  8130ac:	008020b4 	movhi	r2,130
  8130b0:	1095d104 	addi	r2,r2,22340
  8130b4:	d0a09415 	stw	r2,-32176(gp)
#endif
}
  8130b8:	0001883a 	nop
  8130bc:	e037883a 	mov	sp,fp
  8130c0:	dfc00117 	ldw	ra,4(sp)
  8130c4:	df000017 	ldw	fp,0(sp)
  8130c8:	dec00204 	addi	sp,sp,8
  8130cc:	f800283a 	ret

008130d0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  8130d0:	defff804 	addi	sp,sp,-32
  8130d4:	df000715 	stw	fp,28(sp)
  8130d8:	df000704 	addi	fp,sp,28
  8130dc:	e13ffe15 	stw	r4,-8(fp)
  8130e0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8130e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8130e8:	e0bfff17 	ldw	r2,-4(fp)
  8130ec:	1000021e 	bne	r2,zero,8130f8 <OSQAccept+0x28>
        return ((void *)0);
  8130f0:	0005883a 	mov	r2,zero
  8130f4:	00004206 	br	813200 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8130f8:	e0bffe17 	ldw	r2,-8(fp)
  8130fc:	1000051e 	bne	r2,zero,813114 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  813100:	e0bfff17 	ldw	r2,-4(fp)
  813104:	00c00104 	movi	r3,4
  813108:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  81310c:	0005883a 	mov	r2,zero
  813110:	00003b06 	br	813200 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  813114:	e0bffe17 	ldw	r2,-8(fp)
  813118:	10800003 	ldbu	r2,0(r2)
  81311c:	10803fcc 	andi	r2,r2,255
  813120:	108000a0 	cmpeqi	r2,r2,2
  813124:	1000051e 	bne	r2,zero,81313c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  813128:	e0bfff17 	ldw	r2,-4(fp)
  81312c:	00c00044 	movi	r3,1
  813130:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  813134:	0005883a 	mov	r2,zero
  813138:	00003106 	br	813200 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81313c:	0005303a 	rdctl	r2,status
  813140:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813144:	e0fffd17 	ldw	r3,-12(fp)
  813148:	00bfff84 	movi	r2,-2
  81314c:	1884703a 	and	r2,r3,r2
  813150:	1001703a 	wrctl	status,r2
  
  return context;
  813154:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813158:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81315c:	e0bffe17 	ldw	r2,-8(fp)
  813160:	10800117 	ldw	r2,4(r2)
  813164:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  813168:	e0bffc17 	ldw	r2,-16(fp)
  81316c:	1080058b 	ldhu	r2,22(r2)
  813170:	10bfffcc 	andi	r2,r2,65535
  813174:	10001926 	beq	r2,zero,8131dc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  813178:	e0bffc17 	ldw	r2,-16(fp)
  81317c:	10800417 	ldw	r2,16(r2)
  813180:	11000104 	addi	r4,r2,4
  813184:	e0fffc17 	ldw	r3,-16(fp)
  813188:	19000415 	stw	r4,16(r3)
  81318c:	10800017 	ldw	r2,0(r2)
  813190:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  813194:	e0bffc17 	ldw	r2,-16(fp)
  813198:	1080058b 	ldhu	r2,22(r2)
  81319c:	10bfffc4 	addi	r2,r2,-1
  8131a0:	1007883a 	mov	r3,r2
  8131a4:	e0bffc17 	ldw	r2,-16(fp)
  8131a8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8131ac:	e0bffc17 	ldw	r2,-16(fp)
  8131b0:	10c00417 	ldw	r3,16(r2)
  8131b4:	e0bffc17 	ldw	r2,-16(fp)
  8131b8:	10800217 	ldw	r2,8(r2)
  8131bc:	1880041e 	bne	r3,r2,8131d0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  8131c0:	e0bffc17 	ldw	r2,-16(fp)
  8131c4:	10c00117 	ldw	r3,4(r2)
  8131c8:	e0bffc17 	ldw	r2,-16(fp)
  8131cc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  8131d0:	e0bfff17 	ldw	r2,-4(fp)
  8131d4:	10000005 	stb	zero,0(r2)
  8131d8:	00000406 	br	8131ec <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  8131dc:	e0bfff17 	ldw	r2,-4(fp)
  8131e0:	00c007c4 	movi	r3,31
  8131e4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  8131e8:	e03ff915 	stw	zero,-28(fp)
  8131ec:	e0bffa17 	ldw	r2,-24(fp)
  8131f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8131f4:	e0bffb17 	ldw	r2,-20(fp)
  8131f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  8131fc:	e0bff917 	ldw	r2,-28(fp)
}
  813200:	e037883a 	mov	sp,fp
  813204:	df000017 	ldw	fp,0(sp)
  813208:	dec00104 	addi	sp,sp,4
  81320c:	f800283a 	ret

00813210 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  813210:	defff404 	addi	sp,sp,-48
  813214:	dfc00b15 	stw	ra,44(sp)
  813218:	df000a15 	stw	fp,40(sp)
  81321c:	df000a04 	addi	fp,sp,40
  813220:	e13ffe15 	stw	r4,-8(fp)
  813224:	2805883a 	mov	r2,r5
  813228:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81322c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  813230:	d0a09903 	ldbu	r2,-32156(gp)
  813234:	10803fcc 	andi	r2,r2,255
  813238:	10000226 	beq	r2,zero,813244 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81323c:	0005883a 	mov	r2,zero
  813240:	00005906 	br	8133a8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813244:	0005303a 	rdctl	r2,status
  813248:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81324c:	e0fffd17 	ldw	r3,-12(fp)
  813250:	00bfff84 	movi	r2,-2
  813254:	1884703a 	and	r2,r3,r2
  813258:	1001703a 	wrctl	status,r2
  
  return context;
  81325c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813260:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  813264:	d0a09817 	ldw	r2,-32160(gp)
  813268:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81326c:	d0a09817 	ldw	r2,-32160(gp)
  813270:	10000326 	beq	r2,zero,813280 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  813274:	d0a09817 	ldw	r2,-32160(gp)
  813278:	10800117 	ldw	r2,4(r2)
  81327c:	d0a09815 	stw	r2,-32160(gp)
  813280:	e0bff717 	ldw	r2,-36(fp)
  813284:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813288:	e0bff817 	ldw	r2,-32(fp)
  81328c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  813290:	e0bff617 	ldw	r2,-40(fp)
  813294:	10004326 	beq	r2,zero,8133a4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813298:	0005303a 	rdctl	r2,status
  81329c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132a0:	e0fff917 	ldw	r3,-28(fp)
  8132a4:	00bfff84 	movi	r2,-2
  8132a8:	1884703a 	and	r2,r3,r2
  8132ac:	1001703a 	wrctl	status,r2
  
  return context;
  8132b0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  8132b4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  8132b8:	d0a09617 	ldw	r2,-32168(gp)
  8132bc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  8132c0:	e0bffb17 	ldw	r2,-20(fp)
  8132c4:	10002d26 	beq	r2,zero,81337c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  8132c8:	d0a09617 	ldw	r2,-32168(gp)
  8132cc:	10800017 	ldw	r2,0(r2)
  8132d0:	d0a09615 	stw	r2,-32168(gp)
  8132d4:	e0bff717 	ldw	r2,-36(fp)
  8132d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8132dc:	e0bffa17 	ldw	r2,-24(fp)
  8132e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  8132e4:	e0bffb17 	ldw	r2,-20(fp)
  8132e8:	e0fffe17 	ldw	r3,-8(fp)
  8132ec:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  8132f0:	e0bfff0b 	ldhu	r2,-4(fp)
  8132f4:	1085883a 	add	r2,r2,r2
  8132f8:	1085883a 	add	r2,r2,r2
  8132fc:	1007883a 	mov	r3,r2
  813300:	e0bffe17 	ldw	r2,-8(fp)
  813304:	10c7883a 	add	r3,r2,r3
  813308:	e0bffb17 	ldw	r2,-20(fp)
  81330c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  813310:	e0bffb17 	ldw	r2,-20(fp)
  813314:	e0fffe17 	ldw	r3,-8(fp)
  813318:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  81331c:	e0bffb17 	ldw	r2,-20(fp)
  813320:	e0fffe17 	ldw	r3,-8(fp)
  813324:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  813328:	e0bffb17 	ldw	r2,-20(fp)
  81332c:	e0ffff0b 	ldhu	r3,-4(fp)
  813330:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  813334:	e0bffb17 	ldw	r2,-20(fp)
  813338:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  81333c:	e0bff617 	ldw	r2,-40(fp)
  813340:	00c00084 	movi	r3,2
  813344:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  813348:	e0bff617 	ldw	r2,-40(fp)
  81334c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  813350:	e0bff617 	ldw	r2,-40(fp)
  813354:	e0fffb17 	ldw	r3,-20(fp)
  813358:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  81335c:	e0bff617 	ldw	r2,-40(fp)
  813360:	00c00fc4 	movi	r3,63
  813364:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  813368:	e0bff617 	ldw	r2,-40(fp)
  81336c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  813370:	e13ff617 	ldw	r4,-40(fp)
  813374:	081055c0 	call	81055c <OS_EventWaitListInit>
  813378:	00000a06 	br	8133a4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  81337c:	d0e09817 	ldw	r3,-32160(gp)
  813380:	e0bff617 	ldw	r2,-40(fp)
  813384:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  813388:	e0bff617 	ldw	r2,-40(fp)
  81338c:	d0a09815 	stw	r2,-32160(gp)
  813390:	e0bff717 	ldw	r2,-36(fp)
  813394:	e0bffc15 	stw	r2,-16(fp)
  813398:	e0bffc17 	ldw	r2,-16(fp)
  81339c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  8133a0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  8133a4:	e0bff617 	ldw	r2,-40(fp)
}
  8133a8:	e037883a 	mov	sp,fp
  8133ac:	dfc00117 	ldw	ra,4(sp)
  8133b0:	df000017 	ldw	fp,0(sp)
  8133b4:	dec00204 	addi	sp,sp,8
  8133b8:	f800283a 	ret

008133bc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8133bc:	defff204 	addi	sp,sp,-56
  8133c0:	dfc00d15 	stw	ra,52(sp)
  8133c4:	df000c15 	stw	fp,48(sp)
  8133c8:	df000c04 	addi	fp,sp,48
  8133cc:	e13ffd15 	stw	r4,-12(fp)
  8133d0:	2805883a 	mov	r2,r5
  8133d4:	e1bfff15 	stw	r6,-4(fp)
  8133d8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8133dc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8133e0:	e0bfff17 	ldw	r2,-4(fp)
  8133e4:	1000021e 	bne	r2,zero,8133f0 <OSQDel+0x34>
        return (pevent);
  8133e8:	e0bffd17 	ldw	r2,-12(fp)
  8133ec:	00008e06 	br	813628 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8133f0:	e0bffd17 	ldw	r2,-12(fp)
  8133f4:	1000051e 	bne	r2,zero,81340c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8133f8:	e0bfff17 	ldw	r2,-4(fp)
  8133fc:	00c00104 	movi	r3,4
  813400:	10c00005 	stb	r3,0(r2)
        return (pevent);
  813404:	e0bffd17 	ldw	r2,-12(fp)
  813408:	00008706 	br	813628 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81340c:	e0bffd17 	ldw	r2,-12(fp)
  813410:	10800003 	ldbu	r2,0(r2)
  813414:	10803fcc 	andi	r2,r2,255
  813418:	108000a0 	cmpeqi	r2,r2,2
  81341c:	1000051e 	bne	r2,zero,813434 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  813420:	e0bfff17 	ldw	r2,-4(fp)
  813424:	00c00044 	movi	r3,1
  813428:	10c00005 	stb	r3,0(r2)
        return (pevent);
  81342c:	e0bffd17 	ldw	r2,-12(fp)
  813430:	00007d06 	br	813628 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813434:	d0a09903 	ldbu	r2,-32156(gp)
  813438:	10803fcc 	andi	r2,r2,255
  81343c:	10000526 	beq	r2,zero,813454 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  813440:	e0bfff17 	ldw	r2,-4(fp)
  813444:	00c003c4 	movi	r3,15
  813448:	10c00005 	stb	r3,0(r2)
        return (pevent);
  81344c:	e0bffd17 	ldw	r2,-12(fp)
  813450:	00007506 	br	813628 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813454:	0005303a 	rdctl	r2,status
  813458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81345c:	e0fffc17 	ldw	r3,-16(fp)
  813460:	00bfff84 	movi	r2,-2
  813464:	1884703a 	and	r2,r3,r2
  813468:	1001703a 	wrctl	status,r2
  
  return context;
  81346c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813470:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  813474:	e0bffd17 	ldw	r2,-12(fp)
  813478:	10800283 	ldbu	r2,10(r2)
  81347c:	10803fcc 	andi	r2,r2,255
  813480:	10000326 	beq	r2,zero,813490 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  813484:	00800044 	movi	r2,1
  813488:	e0bff405 	stb	r2,-48(fp)
  81348c:	00000106 	br	813494 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  813490:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  813494:	e0bffe03 	ldbu	r2,-8(fp)
  813498:	10000326 	beq	r2,zero,8134a8 <OSQDel+0xec>
  81349c:	10800060 	cmpeqi	r2,r2,1
  8134a0:	1000301e 	bne	r2,zero,813564 <OSQDel+0x1a8>
  8134a4:	00005506 	br	8135fc <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  8134a8:	e0bff403 	ldbu	r2,-48(fp)
  8134ac:	10001e1e 	bne	r2,zero,813528 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8134b0:	e0bffd17 	ldw	r2,-12(fp)
  8134b4:	00c00fc4 	movi	r3,63
  8134b8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8134bc:	e0bffd17 	ldw	r2,-12(fp)
  8134c0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8134c4:	e0bffd17 	ldw	r2,-12(fp)
  8134c8:	10800117 	ldw	r2,4(r2)
  8134cc:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8134d0:	d0e09617 	ldw	r3,-32168(gp)
  8134d4:	e0bff817 	ldw	r2,-32(fp)
  8134d8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  8134dc:	e0bff817 	ldw	r2,-32(fp)
  8134e0:	d0a09615 	stw	r2,-32168(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8134e4:	e0bffd17 	ldw	r2,-12(fp)
  8134e8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8134ec:	d0e09817 	ldw	r3,-32160(gp)
  8134f0:	e0bffd17 	ldw	r2,-12(fp)
  8134f4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8134f8:	e0bffd17 	ldw	r2,-12(fp)
  8134fc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  813500:	e0bffd17 	ldw	r2,-12(fp)
  813504:	d0a09815 	stw	r2,-32160(gp)
  813508:	e0bff617 	ldw	r2,-40(fp)
  81350c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813510:	e0bff717 	ldw	r2,-36(fp)
  813514:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  813518:	e0bfff17 	ldw	r2,-4(fp)
  81351c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  813520:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  813524:	00003f06 	br	813624 <OSQDel+0x268>
  813528:	e0bff617 	ldw	r2,-40(fp)
  81352c:	e0bff915 	stw	r2,-28(fp)
  813530:	e0bff917 	ldw	r2,-28(fp)
  813534:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  813538:	e0bfff17 	ldw	r2,-4(fp)
  81353c:	00c01244 	movi	r3,73
  813540:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  813544:	e0bffd17 	ldw	r2,-12(fp)
  813548:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  81354c:	00003506 	br	813624 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  813550:	000f883a 	mov	r7,zero
  813554:	01800104 	movi	r6,4
  813558:	000b883a 	mov	r5,zero
  81355c:	e13ffd17 	ldw	r4,-12(fp)
  813560:	080ffac0 	call	80ffac <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  813564:	e0bffd17 	ldw	r2,-12(fp)
  813568:	10800283 	ldbu	r2,10(r2)
  81356c:	10803fcc 	andi	r2,r2,255
  813570:	103ff71e 	bne	r2,zero,813550 <__alt_mem_epcs_flash_controller_0+0xff80a550>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  813574:	e0bffd17 	ldw	r2,-12(fp)
  813578:	00c00fc4 	movi	r3,63
  81357c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  813580:	e0bffd17 	ldw	r2,-12(fp)
  813584:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  813588:	e0bffd17 	ldw	r2,-12(fp)
  81358c:	10800117 	ldw	r2,4(r2)
  813590:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  813594:	d0e09617 	ldw	r3,-32168(gp)
  813598:	e0bff817 	ldw	r2,-32(fp)
  81359c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  8135a0:	e0bff817 	ldw	r2,-32(fp)
  8135a4:	d0a09615 	stw	r2,-32168(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8135a8:	e0bffd17 	ldw	r2,-12(fp)
  8135ac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8135b0:	d0e09817 	ldw	r3,-32160(gp)
  8135b4:	e0bffd17 	ldw	r2,-12(fp)
  8135b8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8135bc:	e0bffd17 	ldw	r2,-12(fp)
  8135c0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8135c4:	e0bffd17 	ldw	r2,-12(fp)
  8135c8:	d0a09815 	stw	r2,-32160(gp)
  8135cc:	e0bff617 	ldw	r2,-40(fp)
  8135d0:	e0bffa15 	stw	r2,-24(fp)
  8135d4:	e0bffa17 	ldw	r2,-24(fp)
  8135d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8135dc:	e0bff403 	ldbu	r2,-48(fp)
  8135e0:	10800058 	cmpnei	r2,r2,1
  8135e4:	1000011e 	bne	r2,zero,8135ec <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8135e8:	08109f80 	call	8109f8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8135ec:	e0bfff17 	ldw	r2,-4(fp)
  8135f0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  8135f4:	e03ff515 	stw	zero,-44(fp)
             break;
  8135f8:	00000a06 	br	813624 <OSQDel+0x268>
  8135fc:	e0bff617 	ldw	r2,-40(fp)
  813600:	e0bffb15 	stw	r2,-20(fp)
  813604:	e0bffb17 	ldw	r2,-20(fp)
  813608:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81360c:	e0bfff17 	ldw	r2,-4(fp)
  813610:	00c001c4 	movi	r3,7
  813614:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  813618:	e0bffd17 	ldw	r2,-12(fp)
  81361c:	e0bff515 	stw	r2,-44(fp)
             break;
  813620:	0001883a 	nop
    }
    return (pevent_return);
  813624:	e0bff517 	ldw	r2,-44(fp)
}
  813628:	e037883a 	mov	sp,fp
  81362c:	dfc00117 	ldw	ra,4(sp)
  813630:	df000017 	ldw	fp,0(sp)
  813634:	dec00204 	addi	sp,sp,8
  813638:	f800283a 	ret

0081363c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  81363c:	defffa04 	addi	sp,sp,-24
  813640:	df000515 	stw	fp,20(sp)
  813644:	df000504 	addi	fp,sp,20
  813648:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81364c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813650:	e0bfff17 	ldw	r2,-4(fp)
  813654:	1000021e 	bne	r2,zero,813660 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  813658:	00800104 	movi	r2,4
  81365c:	00002106 	br	8136e4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  813660:	e0bfff17 	ldw	r2,-4(fp)
  813664:	10800003 	ldbu	r2,0(r2)
  813668:	10803fcc 	andi	r2,r2,255
  81366c:	108000a0 	cmpeqi	r2,r2,2
  813670:	1000021e 	bne	r2,zero,81367c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  813674:	00800044 	movi	r2,1
  813678:	00001a06 	br	8136e4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81367c:	0005303a 	rdctl	r2,status
  813680:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813684:	e0fffd17 	ldw	r3,-12(fp)
  813688:	00bfff84 	movi	r2,-2
  81368c:	1884703a 	and	r2,r3,r2
  813690:	1001703a 	wrctl	status,r2
  
  return context;
  813694:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813698:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  81369c:	e0bfff17 	ldw	r2,-4(fp)
  8136a0:	10800117 	ldw	r2,4(r2)
  8136a4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  8136a8:	e0bffc17 	ldw	r2,-16(fp)
  8136ac:	10c00117 	ldw	r3,4(r2)
  8136b0:	e0bffc17 	ldw	r2,-16(fp)
  8136b4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  8136b8:	e0bffc17 	ldw	r2,-16(fp)
  8136bc:	10c00117 	ldw	r3,4(r2)
  8136c0:	e0bffc17 	ldw	r2,-16(fp)
  8136c4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  8136c8:	e0bffc17 	ldw	r2,-16(fp)
  8136cc:	1000058d 	sth	zero,22(r2)
  8136d0:	e0bffb17 	ldw	r2,-20(fp)
  8136d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136d8:	e0bffe17 	ldw	r2,-8(fp)
  8136dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8136e0:	0005883a 	mov	r2,zero
}
  8136e4:	e037883a 	mov	sp,fp
  8136e8:	df000017 	ldw	fp,0(sp)
  8136ec:	dec00104 	addi	sp,sp,4
  8136f0:	f800283a 	ret

008136f4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8136f4:	defff304 	addi	sp,sp,-52
  8136f8:	dfc00c15 	stw	ra,48(sp)
  8136fc:	df000b15 	stw	fp,44(sp)
  813700:	df000b04 	addi	fp,sp,44
  813704:	e13ffd15 	stw	r4,-12(fp)
  813708:	2805883a 	mov	r2,r5
  81370c:	e1bfff15 	stw	r6,-4(fp)
  813710:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813714:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813718:	e0bfff17 	ldw	r2,-4(fp)
  81371c:	1000021e 	bne	r2,zero,813728 <OSQPend+0x34>
        return ((void *)0);
  813720:	0005883a 	mov	r2,zero
  813724:	00009106 	br	81396c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  813728:	e0bffd17 	ldw	r2,-12(fp)
  81372c:	1000051e 	bne	r2,zero,813744 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  813730:	e0bfff17 	ldw	r2,-4(fp)
  813734:	00c00104 	movi	r3,4
  813738:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  81373c:	0005883a 	mov	r2,zero
  813740:	00008a06 	br	81396c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  813744:	e0bffd17 	ldw	r2,-12(fp)
  813748:	10800003 	ldbu	r2,0(r2)
  81374c:	10803fcc 	andi	r2,r2,255
  813750:	108000a0 	cmpeqi	r2,r2,2
  813754:	1000051e 	bne	r2,zero,81376c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  813758:	e0bfff17 	ldw	r2,-4(fp)
  81375c:	00c00044 	movi	r3,1
  813760:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  813764:	0005883a 	mov	r2,zero
  813768:	00008006 	br	81396c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81376c:	d0a09903 	ldbu	r2,-32156(gp)
  813770:	10803fcc 	andi	r2,r2,255
  813774:	10000526 	beq	r2,zero,81378c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  813778:	e0bfff17 	ldw	r2,-4(fp)
  81377c:	00c00084 	movi	r3,2
  813780:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  813784:	0005883a 	mov	r2,zero
  813788:	00007806 	br	81396c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  81378c:	d0a08b03 	ldbu	r2,-32212(gp)
  813790:	10803fcc 	andi	r2,r2,255
  813794:	10000526 	beq	r2,zero,8137ac <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  813798:	e0bfff17 	ldw	r2,-4(fp)
  81379c:	00c00344 	movi	r3,13
  8137a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8137a4:	0005883a 	mov	r2,zero
  8137a8:	00007006 	br	81396c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137ac:	0005303a 	rdctl	r2,status
  8137b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137b4:	e0fffc17 	ldw	r3,-16(fp)
  8137b8:	00bfff84 	movi	r2,-2
  8137bc:	1884703a 	and	r2,r3,r2
  8137c0:	1001703a 	wrctl	status,r2
  
  return context;
  8137c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8137c8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8137cc:	e0bffd17 	ldw	r2,-12(fp)
  8137d0:	10800117 	ldw	r2,4(r2)
  8137d4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  8137d8:	e0bff817 	ldw	r2,-32(fp)
  8137dc:	1080058b 	ldhu	r2,22(r2)
  8137e0:	10bfffcc 	andi	r2,r2,65535
  8137e4:	10001e26 	beq	r2,zero,813860 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  8137e8:	e0bff817 	ldw	r2,-32(fp)
  8137ec:	10800417 	ldw	r2,16(r2)
  8137f0:	11000104 	addi	r4,r2,4
  8137f4:	e0fff817 	ldw	r3,-32(fp)
  8137f8:	19000415 	stw	r4,16(r3)
  8137fc:	10800017 	ldw	r2,0(r2)
  813800:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  813804:	e0bff817 	ldw	r2,-32(fp)
  813808:	1080058b 	ldhu	r2,22(r2)
  81380c:	10bfffc4 	addi	r2,r2,-1
  813810:	1007883a 	mov	r3,r2
  813814:	e0bff817 	ldw	r2,-32(fp)
  813818:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81381c:	e0bff817 	ldw	r2,-32(fp)
  813820:	10c00417 	ldw	r3,16(r2)
  813824:	e0bff817 	ldw	r2,-32(fp)
  813828:	10800217 	ldw	r2,8(r2)
  81382c:	1880041e 	bne	r3,r2,813840 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  813830:	e0bff817 	ldw	r2,-32(fp)
  813834:	10c00117 	ldw	r3,4(r2)
  813838:	e0bff817 	ldw	r2,-32(fp)
  81383c:	10c00415 	stw	r3,16(r2)
  813840:	e0bff617 	ldw	r2,-40(fp)
  813844:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813848:	e0bff717 	ldw	r2,-36(fp)
  81384c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  813850:	e0bfff17 	ldw	r2,-4(fp)
  813854:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  813858:	e0bff517 	ldw	r2,-44(fp)
  81385c:	00004306 	br	81396c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  813860:	d0a09a17 	ldw	r2,-32152(gp)
  813864:	d0e09a17 	ldw	r3,-32152(gp)
  813868:	18c00c03 	ldbu	r3,48(r3)
  81386c:	18c00114 	ori	r3,r3,4
  813870:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  813874:	d0a09a17 	ldw	r2,-32152(gp)
  813878:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  81387c:	d0a09a17 	ldw	r2,-32152(gp)
  813880:	e0fffe0b 	ldhu	r3,-8(fp)
  813884:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  813888:	e13ffd17 	ldw	r4,-12(fp)
  81388c:	08101440 	call	810144 <OS_EventTaskWait>
  813890:	e0bff617 	ldw	r2,-40(fp)
  813894:	e0bffb15 	stw	r2,-20(fp)
  813898:	e0bffb17 	ldw	r2,-20(fp)
  81389c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  8138a0:	08109f80 	call	8109f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8138a4:	0005303a 	rdctl	r2,status
  8138a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8138ac:	e0fff917 	ldw	r3,-28(fp)
  8138b0:	00bfff84 	movi	r2,-2
  8138b4:	1884703a 	and	r2,r3,r2
  8138b8:	1001703a 	wrctl	status,r2
  
  return context;
  8138bc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  8138c0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  8138c4:	d0a09a17 	ldw	r2,-32152(gp)
  8138c8:	10800c43 	ldbu	r2,49(r2)
  8138cc:	10803fcc 	andi	r2,r2,255
  8138d0:	10000326 	beq	r2,zero,8138e0 <OSQPend+0x1ec>
  8138d4:	108000a0 	cmpeqi	r2,r2,2
  8138d8:	1000071e 	bne	r2,zero,8138f8 <OSQPend+0x204>
  8138dc:	00000b06 	br	81390c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  8138e0:	d0a09a17 	ldw	r2,-32152(gp)
  8138e4:	10800917 	ldw	r2,36(r2)
  8138e8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  8138ec:	e0bfff17 	ldw	r2,-4(fp)
  8138f0:	10000005 	stb	zero,0(r2)
             break;
  8138f4:	00000e06 	br	813930 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  8138f8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  8138fc:	e0bfff17 	ldw	r2,-4(fp)
  813900:	00c00384 	movi	r3,14
  813904:	10c00005 	stb	r3,0(r2)
             break;
  813908:	00000906 	br	813930 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81390c:	d0a09a17 	ldw	r2,-32152(gp)
  813910:	e17ffd17 	ldw	r5,-12(fp)
  813914:	1009883a 	mov	r4,r2
  813918:	08103a40 	call	8103a4 <OS_EventTaskRemove>
             pmsg = (void *)0;
  81391c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  813920:	e0bfff17 	ldw	r2,-4(fp)
  813924:	00c00284 	movi	r3,10
  813928:	10c00005 	stb	r3,0(r2)
             break;
  81392c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  813930:	d0a09a17 	ldw	r2,-32152(gp)
  813934:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  813938:	d0a09a17 	ldw	r2,-32152(gp)
  81393c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  813940:	d0a09a17 	ldw	r2,-32152(gp)
  813944:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  813948:	d0a09a17 	ldw	r2,-32152(gp)
  81394c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  813950:	d0a09a17 	ldw	r2,-32152(gp)
  813954:	10000915 	stw	zero,36(r2)
  813958:	e0bff617 	ldw	r2,-40(fp)
  81395c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813960:	e0bffa17 	ldw	r2,-24(fp)
  813964:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  813968:	e0bff517 	ldw	r2,-44(fp)
}
  81396c:	e037883a 	mov	sp,fp
  813970:	dfc00117 	ldw	ra,4(sp)
  813974:	df000017 	ldw	fp,0(sp)
  813978:	dec00204 	addi	sp,sp,8
  81397c:	f800283a 	ret

00813980 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  813980:	defff604 	addi	sp,sp,-40
  813984:	dfc00915 	stw	ra,36(sp)
  813988:	df000815 	stw	fp,32(sp)
  81398c:	df000804 	addi	fp,sp,32
  813990:	e13ffd15 	stw	r4,-12(fp)
  813994:	2805883a 	mov	r2,r5
  813998:	e1bfff15 	stw	r6,-4(fp)
  81399c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8139a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8139a4:	e0bfff17 	ldw	r2,-4(fp)
  8139a8:	1000021e 	bne	r2,zero,8139b4 <OSQPendAbort+0x34>
        return (0);
  8139ac:	0005883a 	mov	r2,zero
  8139b0:	00004906 	br	813ad8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8139b4:	e0bffd17 	ldw	r2,-12(fp)
  8139b8:	1000051e 	bne	r2,zero,8139d0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8139bc:	e0bfff17 	ldw	r2,-4(fp)
  8139c0:	00c00104 	movi	r3,4
  8139c4:	10c00005 	stb	r3,0(r2)
        return (0);
  8139c8:	0005883a 	mov	r2,zero
  8139cc:	00004206 	br	813ad8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  8139d0:	e0bffd17 	ldw	r2,-12(fp)
  8139d4:	10800003 	ldbu	r2,0(r2)
  8139d8:	10803fcc 	andi	r2,r2,255
  8139dc:	108000a0 	cmpeqi	r2,r2,2
  8139e0:	1000051e 	bne	r2,zero,8139f8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8139e4:	e0bfff17 	ldw	r2,-4(fp)
  8139e8:	00c00044 	movi	r3,1
  8139ec:	10c00005 	stb	r3,0(r2)
        return (0);
  8139f0:	0005883a 	mov	r2,zero
  8139f4:	00003806 	br	813ad8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8139f8:	0005303a 	rdctl	r2,status
  8139fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a00:	e0fffc17 	ldw	r3,-16(fp)
  813a04:	00bfff84 	movi	r2,-2
  813a08:	1884703a 	and	r2,r3,r2
  813a0c:	1001703a 	wrctl	status,r2
  
  return context;
  813a10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813a14:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  813a18:	e0bffd17 	ldw	r2,-12(fp)
  813a1c:	10800283 	ldbu	r2,10(r2)
  813a20:	10803fcc 	andi	r2,r2,255
  813a24:	10002526 	beq	r2,zero,813abc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  813a28:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  813a2c:	e0bffe03 	ldbu	r2,-8(fp)
  813a30:	10800060 	cmpeqi	r2,r2,1
  813a34:	10000e26 	beq	r2,zero,813a70 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  813a38:	00000806 	br	813a5c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  813a3c:	01c00084 	movi	r7,2
  813a40:	01800104 	movi	r6,4
  813a44:	000b883a 	mov	r5,zero
  813a48:	e13ffd17 	ldw	r4,-12(fp)
  813a4c:	080ffac0 	call	80ffac <OS_EventTaskRdy>
                     nbr_tasks++;
  813a50:	e0bff803 	ldbu	r2,-32(fp)
  813a54:	10800044 	addi	r2,r2,1
  813a58:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  813a5c:	e0bffd17 	ldw	r2,-12(fp)
  813a60:	10800283 	ldbu	r2,10(r2)
  813a64:	10803fcc 	andi	r2,r2,255
  813a68:	103ff41e 	bne	r2,zero,813a3c <__alt_mem_epcs_flash_controller_0+0xff80aa3c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  813a6c:	00000906 	br	813a94 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  813a70:	01c00084 	movi	r7,2
  813a74:	01800104 	movi	r6,4
  813a78:	000b883a 	mov	r5,zero
  813a7c:	e13ffd17 	ldw	r4,-12(fp)
  813a80:	080ffac0 	call	80ffac <OS_EventTaskRdy>
                 nbr_tasks++;
  813a84:	e0bff803 	ldbu	r2,-32(fp)
  813a88:	10800044 	addi	r2,r2,1
  813a8c:	e0bff805 	stb	r2,-32(fp)
                 break;
  813a90:	0001883a 	nop
  813a94:	e0bff917 	ldw	r2,-28(fp)
  813a98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a9c:	e0bffa17 	ldw	r2,-24(fp)
  813aa0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  813aa4:	08109f80 	call	8109f8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  813aa8:	e0bfff17 	ldw	r2,-4(fp)
  813aac:	00c00384 	movi	r3,14
  813ab0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  813ab4:	e0bff803 	ldbu	r2,-32(fp)
  813ab8:	00000706 	br	813ad8 <OSQPendAbort+0x158>
  813abc:	e0bff917 	ldw	r2,-28(fp)
  813ac0:	e0bffb15 	stw	r2,-20(fp)
  813ac4:	e0bffb17 	ldw	r2,-20(fp)
  813ac8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813acc:	e0bfff17 	ldw	r2,-4(fp)
  813ad0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  813ad4:	0005883a 	mov	r2,zero
}
  813ad8:	e037883a 	mov	sp,fp
  813adc:	dfc00117 	ldw	ra,4(sp)
  813ae0:	df000017 	ldw	fp,0(sp)
  813ae4:	dec00204 	addi	sp,sp,8
  813ae8:	f800283a 	ret

00813aec <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  813aec:	defff604 	addi	sp,sp,-40
  813af0:	dfc00915 	stw	ra,36(sp)
  813af4:	df000815 	stw	fp,32(sp)
  813af8:	df000804 	addi	fp,sp,32
  813afc:	e13ffe15 	stw	r4,-8(fp)
  813b00:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  813b04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  813b08:	e0bffe17 	ldw	r2,-8(fp)
  813b0c:	1000021e 	bne	r2,zero,813b18 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  813b10:	00800104 	movi	r2,4
  813b14:	00004a06 	br	813c40 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  813b18:	e0bffe17 	ldw	r2,-8(fp)
  813b1c:	10800003 	ldbu	r2,0(r2)
  813b20:	10803fcc 	andi	r2,r2,255
  813b24:	108000a0 	cmpeqi	r2,r2,2
  813b28:	1000021e 	bne	r2,zero,813b34 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  813b2c:	00800044 	movi	r2,1
  813b30:	00004306 	br	813c40 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b34:	0005303a 	rdctl	r2,status
  813b38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b3c:	e0fffd17 	ldw	r3,-12(fp)
  813b40:	00bfff84 	movi	r2,-2
  813b44:	1884703a 	and	r2,r3,r2
  813b48:	1001703a 	wrctl	status,r2
  
  return context;
  813b4c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813b50:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  813b54:	e0bffe17 	ldw	r2,-8(fp)
  813b58:	10800283 	ldbu	r2,10(r2)
  813b5c:	10803fcc 	andi	r2,r2,255
  813b60:	10000c26 	beq	r2,zero,813b94 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813b64:	000f883a 	mov	r7,zero
  813b68:	01800104 	movi	r6,4
  813b6c:	e17fff17 	ldw	r5,-4(fp)
  813b70:	e13ffe17 	ldw	r4,-8(fp)
  813b74:	080ffac0 	call	80ffac <OS_EventTaskRdy>
  813b78:	e0bff817 	ldw	r2,-32(fp)
  813b7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b80:	e0bff917 	ldw	r2,-28(fp)
  813b84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  813b88:	08109f80 	call	8109f8 <OS_Sched>
        return (OS_ERR_NONE);
  813b8c:	0005883a 	mov	r2,zero
  813b90:	00002b06 	br	813c40 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  813b94:	e0bffe17 	ldw	r2,-8(fp)
  813b98:	10800117 	ldw	r2,4(r2)
  813b9c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  813ba0:	e0bffb17 	ldw	r2,-20(fp)
  813ba4:	10c0058b 	ldhu	r3,22(r2)
  813ba8:	e0bffb17 	ldw	r2,-20(fp)
  813bac:	1080050b 	ldhu	r2,20(r2)
  813bb0:	18ffffcc 	andi	r3,r3,65535
  813bb4:	10bfffcc 	andi	r2,r2,65535
  813bb8:	18800636 	bltu	r3,r2,813bd4 <OSQPost+0xe8>
  813bbc:	e0bff817 	ldw	r2,-32(fp)
  813bc0:	e0bffa15 	stw	r2,-24(fp)
  813bc4:	e0bffa17 	ldw	r2,-24(fp)
  813bc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  813bcc:	00800784 	movi	r2,30
  813bd0:	00001b06 	br	813c40 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  813bd4:	e0bffb17 	ldw	r2,-20(fp)
  813bd8:	10800317 	ldw	r2,12(r2)
  813bdc:	11000104 	addi	r4,r2,4
  813be0:	e0fffb17 	ldw	r3,-20(fp)
  813be4:	19000315 	stw	r4,12(r3)
  813be8:	e0ffff17 	ldw	r3,-4(fp)
  813bec:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  813bf0:	e0bffb17 	ldw	r2,-20(fp)
  813bf4:	1080058b 	ldhu	r2,22(r2)
  813bf8:	10800044 	addi	r2,r2,1
  813bfc:	1007883a 	mov	r3,r2
  813c00:	e0bffb17 	ldw	r2,-20(fp)
  813c04:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  813c08:	e0bffb17 	ldw	r2,-20(fp)
  813c0c:	10c00317 	ldw	r3,12(r2)
  813c10:	e0bffb17 	ldw	r2,-20(fp)
  813c14:	10800217 	ldw	r2,8(r2)
  813c18:	1880041e 	bne	r3,r2,813c2c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  813c1c:	e0bffb17 	ldw	r2,-20(fp)
  813c20:	10c00117 	ldw	r3,4(r2)
  813c24:	e0bffb17 	ldw	r2,-20(fp)
  813c28:	10c00315 	stw	r3,12(r2)
  813c2c:	e0bff817 	ldw	r2,-32(fp)
  813c30:	e0bffc15 	stw	r2,-16(fp)
  813c34:	e0bffc17 	ldw	r2,-16(fp)
  813c38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813c3c:	0005883a 	mov	r2,zero
}
  813c40:	e037883a 	mov	sp,fp
  813c44:	dfc00117 	ldw	ra,4(sp)
  813c48:	df000017 	ldw	fp,0(sp)
  813c4c:	dec00204 	addi	sp,sp,8
  813c50:	f800283a 	ret

00813c54 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  813c54:	defff604 	addi	sp,sp,-40
  813c58:	dfc00915 	stw	ra,36(sp)
  813c5c:	df000815 	stw	fp,32(sp)
  813c60:	df000804 	addi	fp,sp,32
  813c64:	e13ffe15 	stw	r4,-8(fp)
  813c68:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813c6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813c70:	e0bffe17 	ldw	r2,-8(fp)
  813c74:	1000021e 	bne	r2,zero,813c80 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  813c78:	00800104 	movi	r2,4
  813c7c:	00004c06 	br	813db0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  813c80:	e0bffe17 	ldw	r2,-8(fp)
  813c84:	10800003 	ldbu	r2,0(r2)
  813c88:	10803fcc 	andi	r2,r2,255
  813c8c:	108000a0 	cmpeqi	r2,r2,2
  813c90:	1000021e 	bne	r2,zero,813c9c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  813c94:	00800044 	movi	r2,1
  813c98:	00004506 	br	813db0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c9c:	0005303a 	rdctl	r2,status
  813ca0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ca4:	e0fffd17 	ldw	r3,-12(fp)
  813ca8:	00bfff84 	movi	r2,-2
  813cac:	1884703a 	and	r2,r3,r2
  813cb0:	1001703a 	wrctl	status,r2
  
  return context;
  813cb4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  813cb8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  813cbc:	e0bffe17 	ldw	r2,-8(fp)
  813cc0:	10800283 	ldbu	r2,10(r2)
  813cc4:	10803fcc 	andi	r2,r2,255
  813cc8:	10000c26 	beq	r2,zero,813cfc <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813ccc:	000f883a 	mov	r7,zero
  813cd0:	01800104 	movi	r6,4
  813cd4:	e17fff17 	ldw	r5,-4(fp)
  813cd8:	e13ffe17 	ldw	r4,-8(fp)
  813cdc:	080ffac0 	call	80ffac <OS_EventTaskRdy>
  813ce0:	e0bff817 	ldw	r2,-32(fp)
  813ce4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ce8:	e0bff917 	ldw	r2,-28(fp)
  813cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  813cf0:	08109f80 	call	8109f8 <OS_Sched>
        return (OS_ERR_NONE);
  813cf4:	0005883a 	mov	r2,zero
  813cf8:	00002d06 	br	813db0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  813cfc:	e0bffe17 	ldw	r2,-8(fp)
  813d00:	10800117 	ldw	r2,4(r2)
  813d04:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  813d08:	e0bffb17 	ldw	r2,-20(fp)
  813d0c:	10c0058b 	ldhu	r3,22(r2)
  813d10:	e0bffb17 	ldw	r2,-20(fp)
  813d14:	1080050b 	ldhu	r2,20(r2)
  813d18:	18ffffcc 	andi	r3,r3,65535
  813d1c:	10bfffcc 	andi	r2,r2,65535
  813d20:	18800636 	bltu	r3,r2,813d3c <OSQPostFront+0xe8>
  813d24:	e0bff817 	ldw	r2,-32(fp)
  813d28:	e0bffa15 	stw	r2,-24(fp)
  813d2c:	e0bffa17 	ldw	r2,-24(fp)
  813d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  813d34:	00800784 	movi	r2,30
  813d38:	00001d06 	br	813db0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  813d3c:	e0bffb17 	ldw	r2,-20(fp)
  813d40:	10c00417 	ldw	r3,16(r2)
  813d44:	e0bffb17 	ldw	r2,-20(fp)
  813d48:	10800117 	ldw	r2,4(r2)
  813d4c:	1880041e 	bne	r3,r2,813d60 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  813d50:	e0bffb17 	ldw	r2,-20(fp)
  813d54:	10c00217 	ldw	r3,8(r2)
  813d58:	e0bffb17 	ldw	r2,-20(fp)
  813d5c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  813d60:	e0bffb17 	ldw	r2,-20(fp)
  813d64:	10800417 	ldw	r2,16(r2)
  813d68:	10ffff04 	addi	r3,r2,-4
  813d6c:	e0bffb17 	ldw	r2,-20(fp)
  813d70:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  813d74:	e0bffb17 	ldw	r2,-20(fp)
  813d78:	10800417 	ldw	r2,16(r2)
  813d7c:	e0ffff17 	ldw	r3,-4(fp)
  813d80:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  813d84:	e0bffb17 	ldw	r2,-20(fp)
  813d88:	1080058b 	ldhu	r2,22(r2)
  813d8c:	10800044 	addi	r2,r2,1
  813d90:	1007883a 	mov	r3,r2
  813d94:	e0bffb17 	ldw	r2,-20(fp)
  813d98:	10c0058d 	sth	r3,22(r2)
  813d9c:	e0bff817 	ldw	r2,-32(fp)
  813da0:	e0bffc15 	stw	r2,-16(fp)
  813da4:	e0bffc17 	ldw	r2,-16(fp)
  813da8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813dac:	0005883a 	mov	r2,zero
}
  813db0:	e037883a 	mov	sp,fp
  813db4:	dfc00117 	ldw	ra,4(sp)
  813db8:	df000017 	ldw	fp,0(sp)
  813dbc:	dec00204 	addi	sp,sp,8
  813dc0:	f800283a 	ret

00813dc4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  813dc4:	defff504 	addi	sp,sp,-44
  813dc8:	dfc00a15 	stw	ra,40(sp)
  813dcc:	df000915 	stw	fp,36(sp)
  813dd0:	df000904 	addi	fp,sp,36
  813dd4:	e13ffd15 	stw	r4,-12(fp)
  813dd8:	e17ffe15 	stw	r5,-8(fp)
  813ddc:	3005883a 	mov	r2,r6
  813de0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813de4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813de8:	e0bffd17 	ldw	r2,-12(fp)
  813dec:	1000021e 	bne	r2,zero,813df8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  813df0:	00800104 	movi	r2,4
  813df4:	00007106 	br	813fbc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  813df8:	e0bffd17 	ldw	r2,-12(fp)
  813dfc:	10800003 	ldbu	r2,0(r2)
  813e00:	10803fcc 	andi	r2,r2,255
  813e04:	108000a0 	cmpeqi	r2,r2,2
  813e08:	1000021e 	bne	r2,zero,813e14 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  813e0c:	00800044 	movi	r2,1
  813e10:	00006a06 	br	813fbc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813e14:	0005303a 	rdctl	r2,status
  813e18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813e1c:	e0fffc17 	ldw	r3,-16(fp)
  813e20:	00bfff84 	movi	r2,-2
  813e24:	1884703a 	and	r2,r3,r2
  813e28:	1001703a 	wrctl	status,r2
  
  return context;
  813e2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  813e30:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  813e34:	e0bffd17 	ldw	r2,-12(fp)
  813e38:	10800283 	ldbu	r2,10(r2)
  813e3c:	10803fcc 	andi	r2,r2,255
  813e40:	10001d26 	beq	r2,zero,813eb8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  813e44:	e0bfff03 	ldbu	r2,-4(fp)
  813e48:	1080004c 	andi	r2,r2,1
  813e4c:	10000b26 	beq	r2,zero,813e7c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  813e50:	00000506 	br	813e68 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813e54:	000f883a 	mov	r7,zero
  813e58:	01800104 	movi	r6,4
  813e5c:	e17ffe17 	ldw	r5,-8(fp)
  813e60:	e13ffd17 	ldw	r4,-12(fp)
  813e64:	080ffac0 	call	80ffac <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  813e68:	e0bffd17 	ldw	r2,-12(fp)
  813e6c:	10800283 	ldbu	r2,10(r2)
  813e70:	10803fcc 	andi	r2,r2,255
  813e74:	103ff71e 	bne	r2,zero,813e54 <__alt_mem_epcs_flash_controller_0+0xff80ae54>
  813e78:	00000506 	br	813e90 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813e7c:	000f883a 	mov	r7,zero
  813e80:	01800104 	movi	r6,4
  813e84:	e17ffe17 	ldw	r5,-8(fp)
  813e88:	e13ffd17 	ldw	r4,-12(fp)
  813e8c:	080ffac0 	call	80ffac <OS_EventTaskRdy>
  813e90:	e0bff717 	ldw	r2,-36(fp)
  813e94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813e98:	e0bff817 	ldw	r2,-32(fp)
  813e9c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  813ea0:	e0bfff03 	ldbu	r2,-4(fp)
  813ea4:	1080010c 	andi	r2,r2,4
  813ea8:	1000011e 	bne	r2,zero,813eb0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  813eac:	08109f80 	call	8109f8 <OS_Sched>
        }
        return (OS_ERR_NONE);
  813eb0:	0005883a 	mov	r2,zero
  813eb4:	00004106 	br	813fbc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  813eb8:	e0bffd17 	ldw	r2,-12(fp)
  813ebc:	10800117 	ldw	r2,4(r2)
  813ec0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  813ec4:	e0bffa17 	ldw	r2,-24(fp)
  813ec8:	10c0058b 	ldhu	r3,22(r2)
  813ecc:	e0bffa17 	ldw	r2,-24(fp)
  813ed0:	1080050b 	ldhu	r2,20(r2)
  813ed4:	18ffffcc 	andi	r3,r3,65535
  813ed8:	10bfffcc 	andi	r2,r2,65535
  813edc:	18800636 	bltu	r3,r2,813ef8 <OSQPostOpt+0x134>
  813ee0:	e0bff717 	ldw	r2,-36(fp)
  813ee4:	e0bff915 	stw	r2,-28(fp)
  813ee8:	e0bff917 	ldw	r2,-28(fp)
  813eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  813ef0:	00800784 	movi	r2,30
  813ef4:	00003106 	br	813fbc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  813ef8:	e0bfff03 	ldbu	r2,-4(fp)
  813efc:	1080008c 	andi	r2,r2,2
  813f00:	10001326 	beq	r2,zero,813f50 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  813f04:	e0bffa17 	ldw	r2,-24(fp)
  813f08:	10c00417 	ldw	r3,16(r2)
  813f0c:	e0bffa17 	ldw	r2,-24(fp)
  813f10:	10800117 	ldw	r2,4(r2)
  813f14:	1880041e 	bne	r3,r2,813f28 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  813f18:	e0bffa17 	ldw	r2,-24(fp)
  813f1c:	10c00217 	ldw	r3,8(r2)
  813f20:	e0bffa17 	ldw	r2,-24(fp)
  813f24:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  813f28:	e0bffa17 	ldw	r2,-24(fp)
  813f2c:	10800417 	ldw	r2,16(r2)
  813f30:	10ffff04 	addi	r3,r2,-4
  813f34:	e0bffa17 	ldw	r2,-24(fp)
  813f38:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  813f3c:	e0bffa17 	ldw	r2,-24(fp)
  813f40:	10800417 	ldw	r2,16(r2)
  813f44:	e0fffe17 	ldw	r3,-8(fp)
  813f48:	10c00015 	stw	r3,0(r2)
  813f4c:	00001006 	br	813f90 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  813f50:	e0bffa17 	ldw	r2,-24(fp)
  813f54:	10800317 	ldw	r2,12(r2)
  813f58:	11000104 	addi	r4,r2,4
  813f5c:	e0fffa17 	ldw	r3,-24(fp)
  813f60:	19000315 	stw	r4,12(r3)
  813f64:	e0fffe17 	ldw	r3,-8(fp)
  813f68:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  813f6c:	e0bffa17 	ldw	r2,-24(fp)
  813f70:	10c00317 	ldw	r3,12(r2)
  813f74:	e0bffa17 	ldw	r2,-24(fp)
  813f78:	10800217 	ldw	r2,8(r2)
  813f7c:	1880041e 	bne	r3,r2,813f90 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  813f80:	e0bffa17 	ldw	r2,-24(fp)
  813f84:	10c00117 	ldw	r3,4(r2)
  813f88:	e0bffa17 	ldw	r2,-24(fp)
  813f8c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  813f90:	e0bffa17 	ldw	r2,-24(fp)
  813f94:	1080058b 	ldhu	r2,22(r2)
  813f98:	10800044 	addi	r2,r2,1
  813f9c:	1007883a 	mov	r3,r2
  813fa0:	e0bffa17 	ldw	r2,-24(fp)
  813fa4:	10c0058d 	sth	r3,22(r2)
  813fa8:	e0bff717 	ldw	r2,-36(fp)
  813fac:	e0bffb15 	stw	r2,-20(fp)
  813fb0:	e0bffb17 	ldw	r2,-20(fp)
  813fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813fb8:	0005883a 	mov	r2,zero
}
  813fbc:	e037883a 	mov	sp,fp
  813fc0:	dfc00117 	ldw	ra,4(sp)
  813fc4:	df000017 	ldw	fp,0(sp)
  813fc8:	dec00204 	addi	sp,sp,8
  813fcc:	f800283a 	ret

00813fd0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  813fd0:	defff604 	addi	sp,sp,-40
  813fd4:	df000915 	stw	fp,36(sp)
  813fd8:	df000904 	addi	fp,sp,36
  813fdc:	e13ffe15 	stw	r4,-8(fp)
  813fe0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  813fe4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  813fe8:	e0bffe17 	ldw	r2,-8(fp)
  813fec:	1000021e 	bne	r2,zero,813ff8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  813ff0:	00800104 	movi	r2,4
  813ff4:	00004906 	br	81411c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  813ff8:	e0bfff17 	ldw	r2,-4(fp)
  813ffc:	1000021e 	bne	r2,zero,814008 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  814000:	00800244 	movi	r2,9
  814004:	00004506 	br	81411c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  814008:	e0bffe17 	ldw	r2,-8(fp)
  81400c:	10800003 	ldbu	r2,0(r2)
  814010:	10803fcc 	andi	r2,r2,255
  814014:	108000a0 	cmpeqi	r2,r2,2
  814018:	1000021e 	bne	r2,zero,814024 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  81401c:	00800044 	movi	r2,1
  814020:	00003e06 	br	81411c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814024:	0005303a 	rdctl	r2,status
  814028:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81402c:	e0fffd17 	ldw	r3,-12(fp)
  814030:	00bfff84 	movi	r2,-2
  814034:	1884703a 	and	r2,r3,r2
  814038:	1001703a 	wrctl	status,r2
  
  return context;
  81403c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  814040:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  814044:	e0bffe17 	ldw	r2,-8(fp)
  814048:	10c00283 	ldbu	r3,10(r2)
  81404c:	e0bfff17 	ldw	r2,-4(fp)
  814050:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  814054:	e0bffe17 	ldw	r2,-8(fp)
  814058:	108002c4 	addi	r2,r2,11
  81405c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  814060:	e0bfff17 	ldw	r2,-4(fp)
  814064:	10800204 	addi	r2,r2,8
  814068:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81406c:	e03ff705 	stb	zero,-36(fp)
  814070:	00000b06 	br	8140a0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  814074:	e0bff917 	ldw	r2,-28(fp)
  814078:	10c00044 	addi	r3,r2,1
  81407c:	e0fff915 	stw	r3,-28(fp)
  814080:	e0fff817 	ldw	r3,-32(fp)
  814084:	19000044 	addi	r4,r3,1
  814088:	e13ff815 	stw	r4,-32(fp)
  81408c:	18c00003 	ldbu	r3,0(r3)
  814090:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  814094:	e0bff703 	ldbu	r2,-36(fp)
  814098:	10800044 	addi	r2,r2,1
  81409c:	e0bff705 	stb	r2,-36(fp)
  8140a0:	e0bff703 	ldbu	r2,-36(fp)
  8140a4:	108000f0 	cmpltui	r2,r2,3
  8140a8:	103ff21e 	bne	r2,zero,814074 <__alt_mem_epcs_flash_controller_0+0xff80b074>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8140ac:	e0bffe17 	ldw	r2,-8(fp)
  8140b0:	10800117 	ldw	r2,4(r2)
  8140b4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8140b8:	e0bffc17 	ldw	r2,-16(fp)
  8140bc:	1080058b 	ldhu	r2,22(r2)
  8140c0:	10bfffcc 	andi	r2,r2,65535
  8140c4:	10000626 	beq	r2,zero,8140e0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8140c8:	e0bffc17 	ldw	r2,-16(fp)
  8140cc:	10800417 	ldw	r2,16(r2)
  8140d0:	10c00017 	ldw	r3,0(r2)
  8140d4:	e0bfff17 	ldw	r2,-4(fp)
  8140d8:	10c00015 	stw	r3,0(r2)
  8140dc:	00000206 	br	8140e8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  8140e0:	e0bfff17 	ldw	r2,-4(fp)
  8140e4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8140e8:	e0bffc17 	ldw	r2,-16(fp)
  8140ec:	10c0058b 	ldhu	r3,22(r2)
  8140f0:	e0bfff17 	ldw	r2,-4(fp)
  8140f4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  8140f8:	e0bffc17 	ldw	r2,-16(fp)
  8140fc:	10c0050b 	ldhu	r3,20(r2)
  814100:	e0bfff17 	ldw	r2,-4(fp)
  814104:	10c0018d 	sth	r3,6(r2)
  814108:	e0bffa17 	ldw	r2,-24(fp)
  81410c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814110:	e0bffb17 	ldw	r2,-20(fp)
  814114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814118:	0005883a 	mov	r2,zero
}
  81411c:	e037883a 	mov	sp,fp
  814120:	df000017 	ldw	fp,0(sp)
  814124:	dec00104 	addi	sp,sp,4
  814128:	f800283a 	ret

0081412c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81412c:	defffb04 	addi	sp,sp,-20
  814130:	dfc00415 	stw	ra,16(sp)
  814134:	df000315 	stw	fp,12(sp)
  814138:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  81413c:	01407804 	movi	r5,480
  814140:	010020b4 	movhi	r4,130
  814144:	211add04 	addi	r4,r4,27508
  814148:	081093c0 	call	81093c <OS_MemClr>
    pq1 = &OSQTbl[0];
  81414c:	008020b4 	movhi	r2,130
  814150:	109add04 	addi	r2,r2,27508
  814154:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  814158:	008020b4 	movhi	r2,130
  81415c:	109ae304 	addi	r2,r2,27532
  814160:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  814164:	e03ffd0d 	sth	zero,-12(fp)
  814168:	00000c06 	br	81419c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  81416c:	e0bffe17 	ldw	r2,-8(fp)
  814170:	e0ffff17 	ldw	r3,-4(fp)
  814174:	10c00015 	stw	r3,0(r2)
        pq1++;
  814178:	e0bffe17 	ldw	r2,-8(fp)
  81417c:	10800604 	addi	r2,r2,24
  814180:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  814184:	e0bfff17 	ldw	r2,-4(fp)
  814188:	10800604 	addi	r2,r2,24
  81418c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  814190:	e0bffd0b 	ldhu	r2,-12(fp)
  814194:	10800044 	addi	r2,r2,1
  814198:	e0bffd0d 	sth	r2,-12(fp)
  81419c:	e0bffd0b 	ldhu	r2,-12(fp)
  8141a0:	108004f0 	cmpltui	r2,r2,19
  8141a4:	103ff11e 	bne	r2,zero,81416c <__alt_mem_epcs_flash_controller_0+0xff80b16c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8141a8:	e0bffe17 	ldw	r2,-8(fp)
  8141ac:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8141b0:	008020b4 	movhi	r2,130
  8141b4:	109add04 	addi	r2,r2,27508
  8141b8:	d0a09615 	stw	r2,-32168(gp)
#endif
}
  8141bc:	0001883a 	nop
  8141c0:	e037883a 	mov	sp,fp
  8141c4:	dfc00117 	ldw	ra,4(sp)
  8141c8:	df000017 	ldw	fp,0(sp)
  8141cc:	dec00204 	addi	sp,sp,8
  8141d0:	f800283a 	ret

008141d4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8141d4:	defffa04 	addi	sp,sp,-24
  8141d8:	df000515 	stw	fp,20(sp)
  8141dc:	df000504 	addi	fp,sp,20
  8141e0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8141e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8141e8:	e0bfff17 	ldw	r2,-4(fp)
  8141ec:	1000021e 	bne	r2,zero,8141f8 <OSSemAccept+0x24>
        return (0);
  8141f0:	0005883a 	mov	r2,zero
  8141f4:	00001f06 	br	814274 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8141f8:	e0bfff17 	ldw	r2,-4(fp)
  8141fc:	10800003 	ldbu	r2,0(r2)
  814200:	10803fcc 	andi	r2,r2,255
  814204:	108000e0 	cmpeqi	r2,r2,3
  814208:	1000021e 	bne	r2,zero,814214 <OSSemAccept+0x40>
        return (0);
  81420c:	0005883a 	mov	r2,zero
  814210:	00001806 	br	814274 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814214:	0005303a 	rdctl	r2,status
  814218:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81421c:	e0fffe17 	ldw	r3,-8(fp)
  814220:	00bfff84 	movi	r2,-2
  814224:	1884703a 	and	r2,r3,r2
  814228:	1001703a 	wrctl	status,r2
  
  return context;
  81422c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  814230:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  814234:	e0bfff17 	ldw	r2,-4(fp)
  814238:	1080020b 	ldhu	r2,8(r2)
  81423c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  814240:	e0bffd0b 	ldhu	r2,-12(fp)
  814244:	10000626 	beq	r2,zero,814260 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  814248:	e0bfff17 	ldw	r2,-4(fp)
  81424c:	1080020b 	ldhu	r2,8(r2)
  814250:	10bfffc4 	addi	r2,r2,-1
  814254:	1007883a 	mov	r3,r2
  814258:	e0bfff17 	ldw	r2,-4(fp)
  81425c:	10c0020d 	sth	r3,8(r2)
  814260:	e0bffb17 	ldw	r2,-20(fp)
  814264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814268:	e0bffc17 	ldw	r2,-16(fp)
  81426c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  814270:	e0bffd0b 	ldhu	r2,-12(fp)
}
  814274:	e037883a 	mov	sp,fp
  814278:	df000017 	ldw	fp,0(sp)
  81427c:	dec00104 	addi	sp,sp,4
  814280:	f800283a 	ret

00814284 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  814284:	defff904 	addi	sp,sp,-28
  814288:	dfc00615 	stw	ra,24(sp)
  81428c:	df000515 	stw	fp,20(sp)
  814290:	df000504 	addi	fp,sp,20
  814294:	2005883a 	mov	r2,r4
  814298:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81429c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8142a0:	d0a09903 	ldbu	r2,-32156(gp)
  8142a4:	10803fcc 	andi	r2,r2,255
  8142a8:	10000226 	beq	r2,zero,8142b4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8142ac:	0005883a 	mov	r2,zero
  8142b0:	00002506 	br	814348 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142b4:	0005303a 	rdctl	r2,status
  8142b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142bc:	e0fffe17 	ldw	r3,-8(fp)
  8142c0:	00bfff84 	movi	r2,-2
  8142c4:	1884703a 	and	r2,r3,r2
  8142c8:	1001703a 	wrctl	status,r2
  
  return context;
  8142cc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8142d0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8142d4:	d0a09817 	ldw	r2,-32160(gp)
  8142d8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8142dc:	d0a09817 	ldw	r2,-32160(gp)
  8142e0:	10000326 	beq	r2,zero,8142f0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8142e4:	d0a09817 	ldw	r2,-32160(gp)
  8142e8:	10800117 	ldw	r2,4(r2)
  8142ec:	d0a09815 	stw	r2,-32160(gp)
  8142f0:	e0bffb17 	ldw	r2,-20(fp)
  8142f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8142f8:	e0bffc17 	ldw	r2,-16(fp)
  8142fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  814300:	e0bffd17 	ldw	r2,-12(fp)
  814304:	10000f26 	beq	r2,zero,814344 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  814308:	e0bffd17 	ldw	r2,-12(fp)
  81430c:	00c000c4 	movi	r3,3
  814310:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  814314:	e0bffd17 	ldw	r2,-12(fp)
  814318:	e0ffff0b 	ldhu	r3,-4(fp)
  81431c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  814320:	e0bffd17 	ldw	r2,-12(fp)
  814324:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  814328:	e0bffd17 	ldw	r2,-12(fp)
  81432c:	00c00fc4 	movi	r3,63
  814330:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  814334:	e0bffd17 	ldw	r2,-12(fp)
  814338:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  81433c:	e13ffd17 	ldw	r4,-12(fp)
  814340:	081055c0 	call	81055c <OS_EventWaitListInit>
    }
    return (pevent);
  814344:	e0bffd17 	ldw	r2,-12(fp)
}
  814348:	e037883a 	mov	sp,fp
  81434c:	dfc00117 	ldw	ra,4(sp)
  814350:	df000017 	ldw	fp,0(sp)
  814354:	dec00204 	addi	sp,sp,8
  814358:	f800283a 	ret

0081435c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81435c:	defff304 	addi	sp,sp,-52
  814360:	dfc00c15 	stw	ra,48(sp)
  814364:	df000b15 	stw	fp,44(sp)
  814368:	df000b04 	addi	fp,sp,44
  81436c:	e13ffd15 	stw	r4,-12(fp)
  814370:	2805883a 	mov	r2,r5
  814374:	e1bfff15 	stw	r6,-4(fp)
  814378:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81437c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  814380:	e0bfff17 	ldw	r2,-4(fp)
  814384:	1000021e 	bne	r2,zero,814390 <OSSemDel+0x34>
        return (pevent);
  814388:	e0bffd17 	ldw	r2,-12(fp)
  81438c:	00007e06 	br	814588 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  814390:	e0bffd17 	ldw	r2,-12(fp)
  814394:	1000051e 	bne	r2,zero,8143ac <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  814398:	e0bfff17 	ldw	r2,-4(fp)
  81439c:	00c00104 	movi	r3,4
  8143a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8143a4:	e0bffd17 	ldw	r2,-12(fp)
  8143a8:	00007706 	br	814588 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8143ac:	e0bffd17 	ldw	r2,-12(fp)
  8143b0:	10800003 	ldbu	r2,0(r2)
  8143b4:	10803fcc 	andi	r2,r2,255
  8143b8:	108000e0 	cmpeqi	r2,r2,3
  8143bc:	1000051e 	bne	r2,zero,8143d4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8143c0:	e0bfff17 	ldw	r2,-4(fp)
  8143c4:	00c00044 	movi	r3,1
  8143c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8143cc:	e0bffd17 	ldw	r2,-12(fp)
  8143d0:	00006d06 	br	814588 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8143d4:	d0a09903 	ldbu	r2,-32156(gp)
  8143d8:	10803fcc 	andi	r2,r2,255
  8143dc:	10000526 	beq	r2,zero,8143f4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8143e0:	e0bfff17 	ldw	r2,-4(fp)
  8143e4:	00c003c4 	movi	r3,15
  8143e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8143ec:	e0bffd17 	ldw	r2,-12(fp)
  8143f0:	00006506 	br	814588 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8143f4:	0005303a 	rdctl	r2,status
  8143f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8143fc:	e0fffc17 	ldw	r3,-16(fp)
  814400:	00bfff84 	movi	r2,-2
  814404:	1884703a 	and	r2,r3,r2
  814408:	1001703a 	wrctl	status,r2
  
  return context;
  81440c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814410:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  814414:	e0bffd17 	ldw	r2,-12(fp)
  814418:	10800283 	ldbu	r2,10(r2)
  81441c:	10803fcc 	andi	r2,r2,255
  814420:	10000326 	beq	r2,zero,814430 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  814424:	00800044 	movi	r2,1
  814428:	e0bff505 	stb	r2,-44(fp)
  81442c:	00000106 	br	814434 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  814430:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  814434:	e0bffe03 	ldbu	r2,-8(fp)
  814438:	10000326 	beq	r2,zero,814448 <OSSemDel+0xec>
  81443c:	10800060 	cmpeqi	r2,r2,1
  814440:	1000281e 	bne	r2,zero,8144e4 <OSSemDel+0x188>
  814444:	00004506 	br	81455c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  814448:	e0bff503 	ldbu	r2,-44(fp)
  81444c:	1000161e 	bne	r2,zero,8144a8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  814450:	e0bffd17 	ldw	r2,-12(fp)
  814454:	00c00fc4 	movi	r3,63
  814458:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81445c:	e0bffd17 	ldw	r2,-12(fp)
  814460:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  814464:	e0bffd17 	ldw	r2,-12(fp)
  814468:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81446c:	d0e09817 	ldw	r3,-32160(gp)
  814470:	e0bffd17 	ldw	r2,-12(fp)
  814474:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  814478:	e0bffd17 	ldw	r2,-12(fp)
  81447c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  814480:	e0bffd17 	ldw	r2,-12(fp)
  814484:	d0a09815 	stw	r2,-32160(gp)
  814488:	e0bff717 	ldw	r2,-36(fp)
  81448c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814490:	e0bff817 	ldw	r2,-32(fp)
  814494:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  814498:	e0bfff17 	ldw	r2,-4(fp)
  81449c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  8144a0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  8144a4:	00003706 	br	814584 <OSSemDel+0x228>
  8144a8:	e0bff717 	ldw	r2,-36(fp)
  8144ac:	e0bff915 	stw	r2,-28(fp)
  8144b0:	e0bff917 	ldw	r2,-28(fp)
  8144b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8144b8:	e0bfff17 	ldw	r2,-4(fp)
  8144bc:	00c01244 	movi	r3,73
  8144c0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  8144c4:	e0bffd17 	ldw	r2,-12(fp)
  8144c8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  8144cc:	00002d06 	br	814584 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8144d0:	000f883a 	mov	r7,zero
  8144d4:	01800044 	movi	r6,1
  8144d8:	000b883a 	mov	r5,zero
  8144dc:	e13ffd17 	ldw	r4,-12(fp)
  8144e0:	080ffac0 	call	80ffac <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8144e4:	e0bffd17 	ldw	r2,-12(fp)
  8144e8:	10800283 	ldbu	r2,10(r2)
  8144ec:	10803fcc 	andi	r2,r2,255
  8144f0:	103ff71e 	bne	r2,zero,8144d0 <__alt_mem_epcs_flash_controller_0+0xff80b4d0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8144f4:	e0bffd17 	ldw	r2,-12(fp)
  8144f8:	00c00fc4 	movi	r3,63
  8144fc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  814500:	e0bffd17 	ldw	r2,-12(fp)
  814504:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  814508:	e0bffd17 	ldw	r2,-12(fp)
  81450c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  814510:	d0e09817 	ldw	r3,-32160(gp)
  814514:	e0bffd17 	ldw	r2,-12(fp)
  814518:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81451c:	e0bffd17 	ldw	r2,-12(fp)
  814520:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  814524:	e0bffd17 	ldw	r2,-12(fp)
  814528:	d0a09815 	stw	r2,-32160(gp)
  81452c:	e0bff717 	ldw	r2,-36(fp)
  814530:	e0bffa15 	stw	r2,-24(fp)
  814534:	e0bffa17 	ldw	r2,-24(fp)
  814538:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81453c:	e0bff503 	ldbu	r2,-44(fp)
  814540:	10800058 	cmpnei	r2,r2,1
  814544:	1000011e 	bne	r2,zero,81454c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  814548:	08109f80 	call	8109f8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81454c:	e0bfff17 	ldw	r2,-4(fp)
  814550:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  814554:	e03ff615 	stw	zero,-40(fp)
             break;
  814558:	00000a06 	br	814584 <OSSemDel+0x228>
  81455c:	e0bff717 	ldw	r2,-36(fp)
  814560:	e0bffb15 	stw	r2,-20(fp)
  814564:	e0bffb17 	ldw	r2,-20(fp)
  814568:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81456c:	e0bfff17 	ldw	r2,-4(fp)
  814570:	00c001c4 	movi	r3,7
  814574:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  814578:	e0bffd17 	ldw	r2,-12(fp)
  81457c:	e0bff615 	stw	r2,-40(fp)
             break;
  814580:	0001883a 	nop
    }
    return (pevent_return);
  814584:	e0bff617 	ldw	r2,-40(fp)
}
  814588:	e037883a 	mov	sp,fp
  81458c:	dfc00117 	ldw	ra,4(sp)
  814590:	df000017 	ldw	fp,0(sp)
  814594:	dec00204 	addi	sp,sp,8
  814598:	f800283a 	ret

0081459c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81459c:	defff504 	addi	sp,sp,-44
  8145a0:	dfc00a15 	stw	ra,40(sp)
  8145a4:	df000915 	stw	fp,36(sp)
  8145a8:	df000904 	addi	fp,sp,36
  8145ac:	e13ffd15 	stw	r4,-12(fp)
  8145b0:	2805883a 	mov	r2,r5
  8145b4:	e1bfff15 	stw	r6,-4(fp)
  8145b8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8145bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8145c0:	e0bfff17 	ldw	r2,-4(fp)
  8145c4:	10007226 	beq	r2,zero,814790 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8145c8:	e0bffd17 	ldw	r2,-12(fp)
  8145cc:	1000041e 	bne	r2,zero,8145e0 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8145d0:	e0bfff17 	ldw	r2,-4(fp)
  8145d4:	00c00104 	movi	r3,4
  8145d8:	10c00005 	stb	r3,0(r2)
        return;
  8145dc:	00006d06 	br	814794 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8145e0:	e0bffd17 	ldw	r2,-12(fp)
  8145e4:	10800003 	ldbu	r2,0(r2)
  8145e8:	10803fcc 	andi	r2,r2,255
  8145ec:	108000e0 	cmpeqi	r2,r2,3
  8145f0:	1000041e 	bne	r2,zero,814604 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  8145f4:	e0bfff17 	ldw	r2,-4(fp)
  8145f8:	00c00044 	movi	r3,1
  8145fc:	10c00005 	stb	r3,0(r2)
        return;
  814600:	00006406 	br	814794 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  814604:	d0a09903 	ldbu	r2,-32156(gp)
  814608:	10803fcc 	andi	r2,r2,255
  81460c:	10000426 	beq	r2,zero,814620 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  814610:	e0bfff17 	ldw	r2,-4(fp)
  814614:	00c00084 	movi	r3,2
  814618:	10c00005 	stb	r3,0(r2)
        return;
  81461c:	00005d06 	br	814794 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  814620:	d0a08b03 	ldbu	r2,-32212(gp)
  814624:	10803fcc 	andi	r2,r2,255
  814628:	10000426 	beq	r2,zero,81463c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81462c:	e0bfff17 	ldw	r2,-4(fp)
  814630:	00c00344 	movi	r3,13
  814634:	10c00005 	stb	r3,0(r2)
        return;
  814638:	00005606 	br	814794 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81463c:	0005303a 	rdctl	r2,status
  814640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814644:	e0fffc17 	ldw	r3,-16(fp)
  814648:	00bfff84 	movi	r2,-2
  81464c:	1884703a 	and	r2,r3,r2
  814650:	1001703a 	wrctl	status,r2
  
  return context;
  814654:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814658:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  81465c:	e0bffd17 	ldw	r2,-12(fp)
  814660:	1080020b 	ldhu	r2,8(r2)
  814664:	10bfffcc 	andi	r2,r2,65535
  814668:	10000d26 	beq	r2,zero,8146a0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  81466c:	e0bffd17 	ldw	r2,-12(fp)
  814670:	1080020b 	ldhu	r2,8(r2)
  814674:	10bfffc4 	addi	r2,r2,-1
  814678:	1007883a 	mov	r3,r2
  81467c:	e0bffd17 	ldw	r2,-12(fp)
  814680:	10c0020d 	sth	r3,8(r2)
  814684:	e0bff717 	ldw	r2,-36(fp)
  814688:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81468c:	e0bff817 	ldw	r2,-32(fp)
  814690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  814694:	e0bfff17 	ldw	r2,-4(fp)
  814698:	10000005 	stb	zero,0(r2)
        return;
  81469c:	00003d06 	br	814794 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  8146a0:	d0a09a17 	ldw	r2,-32152(gp)
  8146a4:	d0e09a17 	ldw	r3,-32152(gp)
  8146a8:	18c00c03 	ldbu	r3,48(r3)
  8146ac:	18c00054 	ori	r3,r3,1
  8146b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8146b4:	d0a09a17 	ldw	r2,-32152(gp)
  8146b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8146bc:	d0a09a17 	ldw	r2,-32152(gp)
  8146c0:	e0fffe0b 	ldhu	r3,-8(fp)
  8146c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8146c8:	e13ffd17 	ldw	r4,-12(fp)
  8146cc:	08101440 	call	810144 <OS_EventTaskWait>
  8146d0:	e0bff717 	ldw	r2,-36(fp)
  8146d4:	e0bffb15 	stw	r2,-20(fp)
  8146d8:	e0bffb17 	ldw	r2,-20(fp)
  8146dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8146e0:	08109f80 	call	8109f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8146e4:	0005303a 	rdctl	r2,status
  8146e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8146ec:	e0fff917 	ldw	r3,-28(fp)
  8146f0:	00bfff84 	movi	r2,-2
  8146f4:	1884703a 	and	r2,r3,r2
  8146f8:	1001703a 	wrctl	status,r2
  
  return context;
  8146fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  814700:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  814704:	d0a09a17 	ldw	r2,-32152(gp)
  814708:	10800c43 	ldbu	r2,49(r2)
  81470c:	10803fcc 	andi	r2,r2,255
  814710:	10000326 	beq	r2,zero,814720 <OSSemPend+0x184>
  814714:	108000a0 	cmpeqi	r2,r2,2
  814718:	1000041e 	bne	r2,zero,81472c <OSSemPend+0x190>
  81471c:	00000706 	br	81473c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  814720:	e0bfff17 	ldw	r2,-4(fp)
  814724:	10000005 	stb	zero,0(r2)
             break;
  814728:	00000c06 	br	81475c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81472c:	e0bfff17 	ldw	r2,-4(fp)
  814730:	00c00384 	movi	r3,14
  814734:	10c00005 	stb	r3,0(r2)
             break;
  814738:	00000806 	br	81475c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  81473c:	d0a09a17 	ldw	r2,-32152(gp)
  814740:	e17ffd17 	ldw	r5,-12(fp)
  814744:	1009883a 	mov	r4,r2
  814748:	08103a40 	call	8103a4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81474c:	e0bfff17 	ldw	r2,-4(fp)
  814750:	00c00284 	movi	r3,10
  814754:	10c00005 	stb	r3,0(r2)
             break;
  814758:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81475c:	d0a09a17 	ldw	r2,-32152(gp)
  814760:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  814764:	d0a09a17 	ldw	r2,-32152(gp)
  814768:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81476c:	d0a09a17 	ldw	r2,-32152(gp)
  814770:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  814774:	d0a09a17 	ldw	r2,-32152(gp)
  814778:	10000815 	stw	zero,32(r2)
  81477c:	e0bff717 	ldw	r2,-36(fp)
  814780:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814784:	e0bffa17 	ldw	r2,-24(fp)
  814788:	1001703a 	wrctl	status,r2
  81478c:	00000106 	br	814794 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  814790:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  814794:	e037883a 	mov	sp,fp
  814798:	dfc00117 	ldw	ra,4(sp)
  81479c:	df000017 	ldw	fp,0(sp)
  8147a0:	dec00204 	addi	sp,sp,8
  8147a4:	f800283a 	ret

008147a8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8147a8:	defff604 	addi	sp,sp,-40
  8147ac:	dfc00915 	stw	ra,36(sp)
  8147b0:	df000815 	stw	fp,32(sp)
  8147b4:	df000804 	addi	fp,sp,32
  8147b8:	e13ffd15 	stw	r4,-12(fp)
  8147bc:	2805883a 	mov	r2,r5
  8147c0:	e1bfff15 	stw	r6,-4(fp)
  8147c4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8147c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8147cc:	e0bfff17 	ldw	r2,-4(fp)
  8147d0:	1000021e 	bne	r2,zero,8147dc <OSSemPendAbort+0x34>
        return (0);
  8147d4:	0005883a 	mov	r2,zero
  8147d8:	00004906 	br	814900 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8147dc:	e0bffd17 	ldw	r2,-12(fp)
  8147e0:	1000051e 	bne	r2,zero,8147f8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8147e4:	e0bfff17 	ldw	r2,-4(fp)
  8147e8:	00c00104 	movi	r3,4
  8147ec:	10c00005 	stb	r3,0(r2)
        return (0);
  8147f0:	0005883a 	mov	r2,zero
  8147f4:	00004206 	br	814900 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8147f8:	e0bffd17 	ldw	r2,-12(fp)
  8147fc:	10800003 	ldbu	r2,0(r2)
  814800:	10803fcc 	andi	r2,r2,255
  814804:	108000e0 	cmpeqi	r2,r2,3
  814808:	1000051e 	bne	r2,zero,814820 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  81480c:	e0bfff17 	ldw	r2,-4(fp)
  814810:	00c00044 	movi	r3,1
  814814:	10c00005 	stb	r3,0(r2)
        return (0);
  814818:	0005883a 	mov	r2,zero
  81481c:	00003806 	br	814900 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814820:	0005303a 	rdctl	r2,status
  814824:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814828:	e0fffc17 	ldw	r3,-16(fp)
  81482c:	00bfff84 	movi	r2,-2
  814830:	1884703a 	and	r2,r3,r2
  814834:	1001703a 	wrctl	status,r2
  
  return context;
  814838:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81483c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  814840:	e0bffd17 	ldw	r2,-12(fp)
  814844:	10800283 	ldbu	r2,10(r2)
  814848:	10803fcc 	andi	r2,r2,255
  81484c:	10002526 	beq	r2,zero,8148e4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  814850:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  814854:	e0bffe03 	ldbu	r2,-8(fp)
  814858:	10800060 	cmpeqi	r2,r2,1
  81485c:	10000e26 	beq	r2,zero,814898 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  814860:	00000806 	br	814884 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  814864:	01c00084 	movi	r7,2
  814868:	01800044 	movi	r6,1
  81486c:	000b883a 	mov	r5,zero
  814870:	e13ffd17 	ldw	r4,-12(fp)
  814874:	080ffac0 	call	80ffac <OS_EventTaskRdy>
                     nbr_tasks++;
  814878:	e0bff803 	ldbu	r2,-32(fp)
  81487c:	10800044 	addi	r2,r2,1
  814880:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  814884:	e0bffd17 	ldw	r2,-12(fp)
  814888:	10800283 	ldbu	r2,10(r2)
  81488c:	10803fcc 	andi	r2,r2,255
  814890:	103ff41e 	bne	r2,zero,814864 <__alt_mem_epcs_flash_controller_0+0xff80b864>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  814894:	00000906 	br	8148bc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  814898:	01c00084 	movi	r7,2
  81489c:	01800044 	movi	r6,1
  8148a0:	000b883a 	mov	r5,zero
  8148a4:	e13ffd17 	ldw	r4,-12(fp)
  8148a8:	080ffac0 	call	80ffac <OS_EventTaskRdy>
                 nbr_tasks++;
  8148ac:	e0bff803 	ldbu	r2,-32(fp)
  8148b0:	10800044 	addi	r2,r2,1
  8148b4:	e0bff805 	stb	r2,-32(fp)
                 break;
  8148b8:	0001883a 	nop
  8148bc:	e0bff917 	ldw	r2,-28(fp)
  8148c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8148c4:	e0bffa17 	ldw	r2,-24(fp)
  8148c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8148cc:	08109f80 	call	8109f8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  8148d0:	e0bfff17 	ldw	r2,-4(fp)
  8148d4:	00c00384 	movi	r3,14
  8148d8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  8148dc:	e0bff803 	ldbu	r2,-32(fp)
  8148e0:	00000706 	br	814900 <OSSemPendAbort+0x158>
  8148e4:	e0bff917 	ldw	r2,-28(fp)
  8148e8:	e0bffb15 	stw	r2,-20(fp)
  8148ec:	e0bffb17 	ldw	r2,-20(fp)
  8148f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8148f4:	e0bfff17 	ldw	r2,-4(fp)
  8148f8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  8148fc:	0005883a 	mov	r2,zero
}
  814900:	e037883a 	mov	sp,fp
  814904:	dfc00117 	ldw	ra,4(sp)
  814908:	df000017 	ldw	fp,0(sp)
  81490c:	dec00204 	addi	sp,sp,8
  814910:	f800283a 	ret

00814914 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  814914:	defff804 	addi	sp,sp,-32
  814918:	dfc00715 	stw	ra,28(sp)
  81491c:	df000615 	stw	fp,24(sp)
  814920:	df000604 	addi	fp,sp,24
  814924:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814928:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81492c:	e0bfff17 	ldw	r2,-4(fp)
  814930:	1000021e 	bne	r2,zero,81493c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  814934:	00800104 	movi	r2,4
  814938:	00003506 	br	814a10 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81493c:	e0bfff17 	ldw	r2,-4(fp)
  814940:	10800003 	ldbu	r2,0(r2)
  814944:	10803fcc 	andi	r2,r2,255
  814948:	108000e0 	cmpeqi	r2,r2,3
  81494c:	1000021e 	bne	r2,zero,814958 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  814950:	00800044 	movi	r2,1
  814954:	00002e06 	br	814a10 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814958:	0005303a 	rdctl	r2,status
  81495c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814960:	e0fffe17 	ldw	r3,-8(fp)
  814964:	00bfff84 	movi	r2,-2
  814968:	1884703a 	and	r2,r3,r2
  81496c:	1001703a 	wrctl	status,r2
  
  return context;
  814970:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  814974:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  814978:	e0bfff17 	ldw	r2,-4(fp)
  81497c:	10800283 	ldbu	r2,10(r2)
  814980:	10803fcc 	andi	r2,r2,255
  814984:	10000c26 	beq	r2,zero,8149b8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  814988:	000f883a 	mov	r7,zero
  81498c:	01800044 	movi	r6,1
  814990:	000b883a 	mov	r5,zero
  814994:	e13fff17 	ldw	r4,-4(fp)
  814998:	080ffac0 	call	80ffac <OS_EventTaskRdy>
  81499c:	e0bffa17 	ldw	r2,-24(fp)
  8149a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8149a4:	e0bffb17 	ldw	r2,-20(fp)
  8149a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8149ac:	08109f80 	call	8109f8 <OS_Sched>
        return (OS_ERR_NONE);
  8149b0:	0005883a 	mov	r2,zero
  8149b4:	00001606 	br	814a10 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  8149b8:	e0bfff17 	ldw	r2,-4(fp)
  8149bc:	1080020b 	ldhu	r2,8(r2)
  8149c0:	10ffffcc 	andi	r3,r2,65535
  8149c4:	00bfffd4 	movui	r2,65535
  8149c8:	18800c26 	beq	r3,r2,8149fc <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  8149cc:	e0bfff17 	ldw	r2,-4(fp)
  8149d0:	1080020b 	ldhu	r2,8(r2)
  8149d4:	10800044 	addi	r2,r2,1
  8149d8:	1007883a 	mov	r3,r2
  8149dc:	e0bfff17 	ldw	r2,-4(fp)
  8149e0:	10c0020d 	sth	r3,8(r2)
  8149e4:	e0bffa17 	ldw	r2,-24(fp)
  8149e8:	e0bffc15 	stw	r2,-16(fp)
  8149ec:	e0bffc17 	ldw	r2,-16(fp)
  8149f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8149f4:	0005883a 	mov	r2,zero
  8149f8:	00000506 	br	814a10 <OSSemPost+0xfc>
  8149fc:	e0bffa17 	ldw	r2,-24(fp)
  814a00:	e0bffd15 	stw	r2,-12(fp)
  814a04:	e0bffd17 	ldw	r2,-12(fp)
  814a08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  814a0c:	00800c84 	movi	r2,50
}
  814a10:	e037883a 	mov	sp,fp
  814a14:	dfc00117 	ldw	ra,4(sp)
  814a18:	df000017 	ldw	fp,0(sp)
  814a1c:	dec00204 	addi	sp,sp,8
  814a20:	f800283a 	ret

00814a24 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  814a24:	defff704 	addi	sp,sp,-36
  814a28:	df000815 	stw	fp,32(sp)
  814a2c:	df000804 	addi	fp,sp,32
  814a30:	e13ffe15 	stw	r4,-8(fp)
  814a34:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  814a38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  814a3c:	e0bffe17 	ldw	r2,-8(fp)
  814a40:	1000021e 	bne	r2,zero,814a4c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  814a44:	00800104 	movi	r2,4
  814a48:	00003606 	br	814b24 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  814a4c:	e0bfff17 	ldw	r2,-4(fp)
  814a50:	1000021e 	bne	r2,zero,814a5c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  814a54:	00800244 	movi	r2,9
  814a58:	00003206 	br	814b24 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  814a5c:	e0bffe17 	ldw	r2,-8(fp)
  814a60:	10800003 	ldbu	r2,0(r2)
  814a64:	10803fcc 	andi	r2,r2,255
  814a68:	108000e0 	cmpeqi	r2,r2,3
  814a6c:	1000021e 	bne	r2,zero,814a78 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  814a70:	00800044 	movi	r2,1
  814a74:	00002b06 	br	814b24 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814a78:	0005303a 	rdctl	r2,status
  814a7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814a80:	e0fffd17 	ldw	r3,-12(fp)
  814a84:	00bfff84 	movi	r2,-2
  814a88:	1884703a 	and	r2,r3,r2
  814a8c:	1001703a 	wrctl	status,r2
  
  return context;
  814a90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  814a94:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  814a98:	e0bffe17 	ldw	r2,-8(fp)
  814a9c:	10c00283 	ldbu	r3,10(r2)
  814aa0:	e0bfff17 	ldw	r2,-4(fp)
  814aa4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  814aa8:	e0bffe17 	ldw	r2,-8(fp)
  814aac:	108002c4 	addi	r2,r2,11
  814ab0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  814ab4:	e0bfff17 	ldw	r2,-4(fp)
  814ab8:	10800084 	addi	r2,r2,2
  814abc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  814ac0:	e03ffa05 	stb	zero,-24(fp)
  814ac4:	00000b06 	br	814af4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  814ac8:	e0bff917 	ldw	r2,-28(fp)
  814acc:	10c00044 	addi	r3,r2,1
  814ad0:	e0fff915 	stw	r3,-28(fp)
  814ad4:	e0fff817 	ldw	r3,-32(fp)
  814ad8:	19000044 	addi	r4,r3,1
  814adc:	e13ff815 	stw	r4,-32(fp)
  814ae0:	18c00003 	ldbu	r3,0(r3)
  814ae4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  814ae8:	e0bffa03 	ldbu	r2,-24(fp)
  814aec:	10800044 	addi	r2,r2,1
  814af0:	e0bffa05 	stb	r2,-24(fp)
  814af4:	e0bffa03 	ldbu	r2,-24(fp)
  814af8:	108000f0 	cmpltui	r2,r2,3
  814afc:	103ff21e 	bne	r2,zero,814ac8 <__alt_mem_epcs_flash_controller_0+0xff80bac8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  814b00:	e0bffe17 	ldw	r2,-8(fp)
  814b04:	10c0020b 	ldhu	r3,8(r2)
  814b08:	e0bfff17 	ldw	r2,-4(fp)
  814b0c:	10c0000d 	sth	r3,0(r2)
  814b10:	e0bffb17 	ldw	r2,-20(fp)
  814b14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814b18:	e0bffc17 	ldw	r2,-16(fp)
  814b1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814b20:	0005883a 	mov	r2,zero
}
  814b24:	e037883a 	mov	sp,fp
  814b28:	df000017 	ldw	fp,0(sp)
  814b2c:	dec00104 	addi	sp,sp,4
  814b30:	f800283a 	ret

00814b34 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  814b34:	defff904 	addi	sp,sp,-28
  814b38:	df000615 	stw	fp,24(sp)
  814b3c:	df000604 	addi	fp,sp,24
  814b40:	e13ffd15 	stw	r4,-12(fp)
  814b44:	2805883a 	mov	r2,r5
  814b48:	e1bfff15 	stw	r6,-4(fp)
  814b4c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814b50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814b54:	e0bfff17 	ldw	r2,-4(fp)
  814b58:	10003126 	beq	r2,zero,814c20 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814b5c:	e0bffd17 	ldw	r2,-12(fp)
  814b60:	1000041e 	bne	r2,zero,814b74 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  814b64:	e0bfff17 	ldw	r2,-4(fp)
  814b68:	00c00104 	movi	r3,4
  814b6c:	10c00005 	stb	r3,0(r2)
        return;
  814b70:	00002c06 	br	814c24 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  814b74:	e0bffd17 	ldw	r2,-12(fp)
  814b78:	10800003 	ldbu	r2,0(r2)
  814b7c:	10803fcc 	andi	r2,r2,255
  814b80:	108000e0 	cmpeqi	r2,r2,3
  814b84:	1000041e 	bne	r2,zero,814b98 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  814b88:	e0bfff17 	ldw	r2,-4(fp)
  814b8c:	00c00044 	movi	r3,1
  814b90:	10c00005 	stb	r3,0(r2)
        return;
  814b94:	00002306 	br	814c24 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814b98:	0005303a 	rdctl	r2,status
  814b9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814ba0:	e0fffc17 	ldw	r3,-16(fp)
  814ba4:	00bfff84 	movi	r2,-2
  814ba8:	1884703a 	and	r2,r3,r2
  814bac:	1001703a 	wrctl	status,r2
  
  return context;
  814bb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814bb4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  814bb8:	e0bfff17 	ldw	r2,-4(fp)
  814bbc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  814bc0:	e0bffd17 	ldw	r2,-12(fp)
  814bc4:	1080020b 	ldhu	r2,8(r2)
  814bc8:	10bfffcc 	andi	r2,r2,65535
  814bcc:	10000426 	beq	r2,zero,814be0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  814bd0:	e0bffd17 	ldw	r2,-12(fp)
  814bd4:	e0fffe0b 	ldhu	r3,-8(fp)
  814bd8:	10c0020d 	sth	r3,8(r2)
  814bdc:	00000b06 	br	814c0c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  814be0:	e0bffd17 	ldw	r2,-12(fp)
  814be4:	10800283 	ldbu	r2,10(r2)
  814be8:	10803fcc 	andi	r2,r2,255
  814bec:	1000041e 	bne	r2,zero,814c00 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  814bf0:	e0bffd17 	ldw	r2,-12(fp)
  814bf4:	e0fffe0b 	ldhu	r3,-8(fp)
  814bf8:	10c0020d 	sth	r3,8(r2)
  814bfc:	00000306 	br	814c0c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  814c00:	e0bfff17 	ldw	r2,-4(fp)
  814c04:	00c01244 	movi	r3,73
  814c08:	10c00005 	stb	r3,0(r2)
  814c0c:	e0bffa17 	ldw	r2,-24(fp)
  814c10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c14:	e0bffb17 	ldw	r2,-20(fp)
  814c18:	1001703a 	wrctl	status,r2
  814c1c:	00000106 	br	814c24 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  814c20:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  814c24:	e037883a 	mov	sp,fp
  814c28:	df000017 	ldw	fp,0(sp)
  814c2c:	dec00104 	addi	sp,sp,4
  814c30:	f800283a 	ret

00814c34 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  814c34:	defff104 	addi	sp,sp,-60
  814c38:	dfc00e15 	stw	ra,56(sp)
  814c3c:	df000d15 	stw	fp,52(sp)
  814c40:	df000d04 	addi	fp,sp,52
  814c44:	2007883a 	mov	r3,r4
  814c48:	2805883a 	mov	r2,r5
  814c4c:	e0fffe05 	stb	r3,-8(fp)
  814c50:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  814c54:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  814c58:	e0bffe03 	ldbu	r2,-8(fp)
  814c5c:	10800530 	cmpltui	r2,r2,20
  814c60:	1000051e 	bne	r2,zero,814c78 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  814c64:	e0bffe03 	ldbu	r2,-8(fp)
  814c68:	10803fe0 	cmpeqi	r2,r2,255
  814c6c:	1000021e 	bne	r2,zero,814c78 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  814c70:	00800a84 	movi	r2,42
  814c74:	00012606 	br	815110 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  814c78:	e0bfff03 	ldbu	r2,-4(fp)
  814c7c:	10800530 	cmpltui	r2,r2,20
  814c80:	1000021e 	bne	r2,zero,814c8c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  814c84:	00800a84 	movi	r2,42
  814c88:	00012106 	br	815110 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c8c:	0005303a 	rdctl	r2,status
  814c90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c94:	e0fffd17 	ldw	r3,-12(fp)
  814c98:	00bfff84 	movi	r2,-2
  814c9c:	1884703a 	and	r2,r3,r2
  814ca0:	1001703a 	wrctl	status,r2
  
  return context;
  814ca4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814ca8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  814cac:	e0ffff03 	ldbu	r3,-4(fp)
  814cb0:	008020f4 	movhi	r2,131
  814cb4:	10a16904 	addi	r2,r2,-31324
  814cb8:	18c7883a 	add	r3,r3,r3
  814cbc:	18c7883a 	add	r3,r3,r3
  814cc0:	10c5883a 	add	r2,r2,r3
  814cc4:	10800017 	ldw	r2,0(r2)
  814cc8:	10000626 	beq	r2,zero,814ce4 <OSTaskChangePrio+0xb0>
  814ccc:	e0bff517 	ldw	r2,-44(fp)
  814cd0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814cd4:	e0bff617 	ldw	r2,-40(fp)
  814cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  814cdc:	00800a04 	movi	r2,40
  814ce0:	00010b06 	br	815110 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  814ce4:	e0bffe03 	ldbu	r2,-8(fp)
  814ce8:	10803fd8 	cmpnei	r2,r2,255
  814cec:	1000031e 	bne	r2,zero,814cfc <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  814cf0:	d0a09a17 	ldw	r2,-32152(gp)
  814cf4:	10800c83 	ldbu	r2,50(r2)
  814cf8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  814cfc:	e0fffe03 	ldbu	r3,-8(fp)
  814d00:	008020f4 	movhi	r2,131
  814d04:	10a16904 	addi	r2,r2,-31324
  814d08:	18c7883a 	add	r3,r3,r3
  814d0c:	18c7883a 	add	r3,r3,r3
  814d10:	10c5883a 	add	r2,r2,r3
  814d14:	10800017 	ldw	r2,0(r2)
  814d18:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  814d1c:	e0bff817 	ldw	r2,-32(fp)
  814d20:	1000061e 	bne	r2,zero,814d3c <OSTaskChangePrio+0x108>
  814d24:	e0bff517 	ldw	r2,-44(fp)
  814d28:	e0bff715 	stw	r2,-36(fp)
  814d2c:	e0bff717 	ldw	r2,-36(fp)
  814d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  814d34:	00800a44 	movi	r2,41
  814d38:	0000f506 	br	815110 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  814d3c:	e0bff817 	ldw	r2,-32(fp)
  814d40:	10800058 	cmpnei	r2,r2,1
  814d44:	1000061e 	bne	r2,zero,814d60 <OSTaskChangePrio+0x12c>
  814d48:	e0bff517 	ldw	r2,-44(fp)
  814d4c:	e0bff915 	stw	r2,-28(fp)
  814d50:	e0bff917 	ldw	r2,-28(fp)
  814d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  814d58:	008010c4 	movi	r2,67
  814d5c:	0000ec06 	br	815110 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  814d60:	e0bfff03 	ldbu	r2,-4(fp)
  814d64:	1004d0fa 	srli	r2,r2,3
  814d68:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  814d6c:	e0bfff03 	ldbu	r2,-4(fp)
  814d70:	108001cc 	andi	r2,r2,7
  814d74:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  814d78:	e0bffb03 	ldbu	r2,-20(fp)
  814d7c:	00c00044 	movi	r3,1
  814d80:	1884983a 	sll	r2,r3,r2
  814d84:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  814d88:	e0bffb43 	ldbu	r2,-19(fp)
  814d8c:	00c00044 	movi	r3,1
  814d90:	1884983a 	sll	r2,r3,r2
  814d94:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  814d98:	e0fffe03 	ldbu	r3,-8(fp)
  814d9c:	008020f4 	movhi	r2,131
  814da0:	10a16904 	addi	r2,r2,-31324
  814da4:	18c7883a 	add	r3,r3,r3
  814da8:	18c7883a 	add	r3,r3,r3
  814dac:	10c5883a 	add	r2,r2,r3
  814db0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  814db4:	e0ffff03 	ldbu	r3,-4(fp)
  814db8:	008020f4 	movhi	r2,131
  814dbc:	10a16904 	addi	r2,r2,-31324
  814dc0:	18c7883a 	add	r3,r3,r3
  814dc4:	18c7883a 	add	r3,r3,r3
  814dc8:	10c5883a 	add	r2,r2,r3
  814dcc:	e0fff817 	ldw	r3,-32(fp)
  814dd0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  814dd4:	e0bff817 	ldw	r2,-32(fp)
  814dd8:	10800d03 	ldbu	r2,52(r2)
  814ddc:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  814de0:	e0bff817 	ldw	r2,-32(fp)
  814de4:	10800d83 	ldbu	r2,54(r2)
  814de8:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  814dec:	e0bff817 	ldw	r2,-32(fp)
  814df0:	10800d43 	ldbu	r2,53(r2)
  814df4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  814df8:	e0fffc03 	ldbu	r3,-16(fp)
  814dfc:	d0a09744 	addi	r2,gp,-32163
  814e00:	1885883a 	add	r2,r3,r2
  814e04:	10c00003 	ldbu	r3,0(r2)
  814e08:	e0bffc83 	ldbu	r2,-14(fp)
  814e0c:	1884703a 	and	r2,r3,r2
  814e10:	10803fcc 	andi	r2,r2,255
  814e14:	10002826 	beq	r2,zero,814eb8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  814e18:	e0fffc03 	ldbu	r3,-16(fp)
  814e1c:	e13ffc03 	ldbu	r4,-16(fp)
  814e20:	d0a09744 	addi	r2,gp,-32163
  814e24:	2085883a 	add	r2,r4,r2
  814e28:	10800003 	ldbu	r2,0(r2)
  814e2c:	1009883a 	mov	r4,r2
  814e30:	e0bffc83 	ldbu	r2,-14(fp)
  814e34:	0084303a 	nor	r2,zero,r2
  814e38:	2084703a 	and	r2,r4,r2
  814e3c:	1009883a 	mov	r4,r2
  814e40:	d0a09744 	addi	r2,gp,-32163
  814e44:	1885883a 	add	r2,r3,r2
  814e48:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  814e4c:	e0fffc03 	ldbu	r3,-16(fp)
  814e50:	d0a09744 	addi	r2,gp,-32163
  814e54:	1885883a 	add	r2,r3,r2
  814e58:	10800003 	ldbu	r2,0(r2)
  814e5c:	10803fcc 	andi	r2,r2,255
  814e60:	1000061e 	bne	r2,zero,814e7c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  814e64:	e0bffc43 	ldbu	r2,-15(fp)
  814e68:	0084303a 	nor	r2,zero,r2
  814e6c:	1007883a 	mov	r3,r2
  814e70:	d0a09703 	ldbu	r2,-32164(gp)
  814e74:	1884703a 	and	r2,r3,r2
  814e78:	d0a09705 	stb	r2,-32164(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  814e7c:	d0e09703 	ldbu	r3,-32164(gp)
  814e80:	e0bffb83 	ldbu	r2,-18(fp)
  814e84:	1884b03a 	or	r2,r3,r2
  814e88:	d0a09705 	stb	r2,-32164(gp)
         OSRdyTbl[y_new] |= bitx_new;
  814e8c:	e0fffb03 	ldbu	r3,-20(fp)
  814e90:	e13ffb03 	ldbu	r4,-20(fp)
  814e94:	d0a09744 	addi	r2,gp,-32163
  814e98:	2085883a 	add	r2,r4,r2
  814e9c:	11000003 	ldbu	r4,0(r2)
  814ea0:	e0bffbc3 	ldbu	r2,-17(fp)
  814ea4:	2084b03a 	or	r2,r4,r2
  814ea8:	1009883a 	mov	r4,r2
  814eac:	d0a09744 	addi	r2,gp,-32163
  814eb0:	1885883a 	add	r2,r3,r2
  814eb4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  814eb8:	e0bff817 	ldw	r2,-32(fp)
  814ebc:	10800717 	ldw	r2,28(r2)
  814ec0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  814ec4:	e0bff317 	ldw	r2,-52(fp)
  814ec8:	10003326 	beq	r2,zero,814f98 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  814ecc:	e0bffc03 	ldbu	r2,-16(fp)
  814ed0:	e0fffc03 	ldbu	r3,-16(fp)
  814ed4:	e13ff317 	ldw	r4,-52(fp)
  814ed8:	20c7883a 	add	r3,r4,r3
  814edc:	18c002c4 	addi	r3,r3,11
  814ee0:	18c00003 	ldbu	r3,0(r3)
  814ee4:	1809883a 	mov	r4,r3
  814ee8:	e0fffc83 	ldbu	r3,-14(fp)
  814eec:	00c6303a 	nor	r3,zero,r3
  814ef0:	20c6703a 	and	r3,r4,r3
  814ef4:	1809883a 	mov	r4,r3
  814ef8:	e0fff317 	ldw	r3,-52(fp)
  814efc:	1885883a 	add	r2,r3,r2
  814f00:	108002c4 	addi	r2,r2,11
  814f04:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  814f08:	e0bffc03 	ldbu	r2,-16(fp)
  814f0c:	e0fff317 	ldw	r3,-52(fp)
  814f10:	1885883a 	add	r2,r3,r2
  814f14:	108002c4 	addi	r2,r2,11
  814f18:	10800003 	ldbu	r2,0(r2)
  814f1c:	10803fcc 	andi	r2,r2,255
  814f20:	1000091e 	bne	r2,zero,814f48 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  814f24:	e0bff317 	ldw	r2,-52(fp)
  814f28:	10800283 	ldbu	r2,10(r2)
  814f2c:	1007883a 	mov	r3,r2
  814f30:	e0bffc43 	ldbu	r2,-15(fp)
  814f34:	0084303a 	nor	r2,zero,r2
  814f38:	1884703a 	and	r2,r3,r2
  814f3c:	1007883a 	mov	r3,r2
  814f40:	e0bff317 	ldw	r2,-52(fp)
  814f44:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  814f48:	e0bff317 	ldw	r2,-52(fp)
  814f4c:	10c00283 	ldbu	r3,10(r2)
  814f50:	e0bffb83 	ldbu	r2,-18(fp)
  814f54:	1884b03a 	or	r2,r3,r2
  814f58:	1007883a 	mov	r3,r2
  814f5c:	e0bff317 	ldw	r2,-52(fp)
  814f60:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  814f64:	e0bffb03 	ldbu	r2,-20(fp)
  814f68:	e0fffb03 	ldbu	r3,-20(fp)
  814f6c:	e13ff317 	ldw	r4,-52(fp)
  814f70:	20c7883a 	add	r3,r4,r3
  814f74:	18c002c4 	addi	r3,r3,11
  814f78:	19000003 	ldbu	r4,0(r3)
  814f7c:	e0fffbc3 	ldbu	r3,-17(fp)
  814f80:	20c6b03a 	or	r3,r4,r3
  814f84:	1809883a 	mov	r4,r3
  814f88:	e0fff317 	ldw	r3,-52(fp)
  814f8c:	1885883a 	add	r2,r3,r2
  814f90:	108002c4 	addi	r2,r2,11
  814f94:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  814f98:	e0bff817 	ldw	r2,-32(fp)
  814f9c:	10800817 	ldw	r2,32(r2)
  814fa0:	10004226 	beq	r2,zero,8150ac <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  814fa4:	e0bff817 	ldw	r2,-32(fp)
  814fa8:	10800817 	ldw	r2,32(r2)
  814fac:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  814fb0:	e0bff417 	ldw	r2,-48(fp)
  814fb4:	10800017 	ldw	r2,0(r2)
  814fb8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  814fbc:	00003906 	br	8150a4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  814fc0:	e0bffc03 	ldbu	r2,-16(fp)
  814fc4:	e0fffc03 	ldbu	r3,-16(fp)
  814fc8:	e13ff317 	ldw	r4,-52(fp)
  814fcc:	20c7883a 	add	r3,r4,r3
  814fd0:	18c002c4 	addi	r3,r3,11
  814fd4:	18c00003 	ldbu	r3,0(r3)
  814fd8:	1809883a 	mov	r4,r3
  814fdc:	e0fffc83 	ldbu	r3,-14(fp)
  814fe0:	00c6303a 	nor	r3,zero,r3
  814fe4:	20c6703a 	and	r3,r4,r3
  814fe8:	1809883a 	mov	r4,r3
  814fec:	e0fff317 	ldw	r3,-52(fp)
  814ff0:	1885883a 	add	r2,r3,r2
  814ff4:	108002c4 	addi	r2,r2,11
  814ff8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  814ffc:	e0bffc03 	ldbu	r2,-16(fp)
  815000:	e0fff317 	ldw	r3,-52(fp)
  815004:	1885883a 	add	r2,r3,r2
  815008:	108002c4 	addi	r2,r2,11
  81500c:	10800003 	ldbu	r2,0(r2)
  815010:	10803fcc 	andi	r2,r2,255
  815014:	1000091e 	bne	r2,zero,81503c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  815018:	e0bff317 	ldw	r2,-52(fp)
  81501c:	10800283 	ldbu	r2,10(r2)
  815020:	1007883a 	mov	r3,r2
  815024:	e0bffc43 	ldbu	r2,-15(fp)
  815028:	0084303a 	nor	r2,zero,r2
  81502c:	1884703a 	and	r2,r3,r2
  815030:	1007883a 	mov	r3,r2
  815034:	e0bff317 	ldw	r2,-52(fp)
  815038:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81503c:	e0bff317 	ldw	r2,-52(fp)
  815040:	10c00283 	ldbu	r3,10(r2)
  815044:	e0bffb83 	ldbu	r2,-18(fp)
  815048:	1884b03a 	or	r2,r3,r2
  81504c:	1007883a 	mov	r3,r2
  815050:	e0bff317 	ldw	r2,-52(fp)
  815054:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  815058:	e0bffb03 	ldbu	r2,-20(fp)
  81505c:	e0fffb03 	ldbu	r3,-20(fp)
  815060:	e13ff317 	ldw	r4,-52(fp)
  815064:	20c7883a 	add	r3,r4,r3
  815068:	18c002c4 	addi	r3,r3,11
  81506c:	19000003 	ldbu	r4,0(r3)
  815070:	e0fffbc3 	ldbu	r3,-17(fp)
  815074:	20c6b03a 	or	r3,r4,r3
  815078:	1809883a 	mov	r4,r3
  81507c:	e0fff317 	ldw	r3,-52(fp)
  815080:	1885883a 	add	r2,r3,r2
  815084:	108002c4 	addi	r2,r2,11
  815088:	11000005 	stb	r4,0(r2)
            pevents++;
  81508c:	e0bff417 	ldw	r2,-48(fp)
  815090:	10800104 	addi	r2,r2,4
  815094:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  815098:	e0bff417 	ldw	r2,-48(fp)
  81509c:	10800017 	ldw	r2,0(r2)
  8150a0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  8150a4:	e0bff317 	ldw	r2,-52(fp)
  8150a8:	103fc51e 	bne	r2,zero,814fc0 <__alt_mem_epcs_flash_controller_0+0xff80bfc0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  8150ac:	e0bff817 	ldw	r2,-32(fp)
  8150b0:	e0ffff03 	ldbu	r3,-4(fp)
  8150b4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  8150b8:	e0bff817 	ldw	r2,-32(fp)
  8150bc:	e0fffb03 	ldbu	r3,-20(fp)
  8150c0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  8150c4:	e0bff817 	ldw	r2,-32(fp)
  8150c8:	e0fffb43 	ldbu	r3,-19(fp)
  8150cc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  8150d0:	e0bff817 	ldw	r2,-32(fp)
  8150d4:	e0fffb83 	ldbu	r3,-18(fp)
  8150d8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  8150dc:	e0bff817 	ldw	r2,-32(fp)
  8150e0:	e0fffbc3 	ldbu	r3,-17(fp)
  8150e4:	10c00d45 	stb	r3,53(r2)
  8150e8:	e0bff517 	ldw	r2,-44(fp)
  8150ec:	e0bffa15 	stw	r2,-24(fp)
  8150f0:	e0bffa17 	ldw	r2,-24(fp)
  8150f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8150f8:	d0a08b43 	ldbu	r2,-32211(gp)
  8150fc:	10803fcc 	andi	r2,r2,255
  815100:	10800058 	cmpnei	r2,r2,1
  815104:	1000011e 	bne	r2,zero,81510c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  815108:	08109f80 	call	8109f8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81510c:	0005883a 	mov	r2,zero
}
  815110:	e037883a 	mov	sp,fp
  815114:	dfc00117 	ldw	ra,4(sp)
  815118:	df000017 	ldw	fp,0(sp)
  81511c:	dec00204 	addi	sp,sp,8
  815120:	f800283a 	ret

00815124 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  815124:	deffee04 	addi	sp,sp,-72
  815128:	dfc01115 	stw	ra,68(sp)
  81512c:	df001015 	stw	fp,64(sp)
  815130:	df001004 	addi	fp,sp,64
  815134:	e13ffc15 	stw	r4,-16(fp)
  815138:	e17ffd15 	stw	r5,-12(fp)
  81513c:	e1bffe15 	stw	r6,-8(fp)
  815140:	3805883a 	mov	r2,r7
  815144:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  815148:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81514c:	e0bfff03 	ldbu	r2,-4(fp)
  815150:	10800570 	cmpltui	r2,r2,21
  815154:	1000021e 	bne	r2,zero,815160 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  815158:	00800a84 	movi	r2,42
  81515c:	00005706 	br	8152bc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815160:	0005303a 	rdctl	r2,status
  815164:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815168:	e0fffb17 	ldw	r3,-20(fp)
  81516c:	00bfff84 	movi	r2,-2
  815170:	1884703a 	and	r2,r3,r2
  815174:	1001703a 	wrctl	status,r2
  
  return context;
  815178:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81517c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  815180:	d0a09903 	ldbu	r2,-32156(gp)
  815184:	10803fcc 	andi	r2,r2,255
  815188:	10000626 	beq	r2,zero,8151a4 <OSTaskCreate+0x80>
  81518c:	e0bff317 	ldw	r2,-52(fp)
  815190:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815194:	e0bff417 	ldw	r2,-48(fp)
  815198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81519c:	00800f04 	movi	r2,60
  8151a0:	00004606 	br	8152bc <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8151a4:	e0ffff03 	ldbu	r3,-4(fp)
  8151a8:	008020f4 	movhi	r2,131
  8151ac:	10a16904 	addi	r2,r2,-31324
  8151b0:	18c7883a 	add	r3,r3,r3
  8151b4:	18c7883a 	add	r3,r3,r3
  8151b8:	10c5883a 	add	r2,r2,r3
  8151bc:	10800017 	ldw	r2,0(r2)
  8151c0:	1000391e 	bne	r2,zero,8152a8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8151c4:	e0ffff03 	ldbu	r3,-4(fp)
  8151c8:	008020f4 	movhi	r2,131
  8151cc:	10a16904 	addi	r2,r2,-31324
  8151d0:	18c7883a 	add	r3,r3,r3
  8151d4:	18c7883a 	add	r3,r3,r3
  8151d8:	10c5883a 	add	r2,r2,r3
  8151dc:	00c00044 	movi	r3,1
  8151e0:	10c00015 	stw	r3,0(r2)
  8151e4:	e0bff317 	ldw	r2,-52(fp)
  8151e8:	e0bff515 	stw	r2,-44(fp)
  8151ec:	e0bff517 	ldw	r2,-44(fp)
  8151f0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  8151f4:	000f883a 	mov	r7,zero
  8151f8:	e1bffe17 	ldw	r6,-8(fp)
  8151fc:	e17ffd17 	ldw	r5,-12(fp)
  815200:	e13ffc17 	ldw	r4,-16(fp)
  815204:	081b0200 	call	81b020 <OSTaskStkInit>
  815208:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  81520c:	e0bfff03 	ldbu	r2,-4(fp)
  815210:	d8000215 	stw	zero,8(sp)
  815214:	d8000115 	stw	zero,4(sp)
  815218:	d8000015 	stw	zero,0(sp)
  81521c:	000f883a 	mov	r7,zero
  815220:	000d883a 	mov	r6,zero
  815224:	e17ff717 	ldw	r5,-36(fp)
  815228:	1009883a 	mov	r4,r2
  81522c:	0810df80 	call	810df8 <OS_TCBInit>
  815230:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  815234:	e0bff803 	ldbu	r2,-32(fp)
  815238:	1000061e 	bne	r2,zero,815254 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81523c:	d0a08b43 	ldbu	r2,-32211(gp)
  815240:	10803fcc 	andi	r2,r2,255
  815244:	10800058 	cmpnei	r2,r2,1
  815248:	1000151e 	bne	r2,zero,8152a0 <OSTaskCreate+0x17c>
                OS_Sched();
  81524c:	08109f80 	call	8109f8 <OS_Sched>
  815250:	00001306 	br	8152a0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815254:	0005303a 	rdctl	r2,status
  815258:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81525c:	e0fffa17 	ldw	r3,-24(fp)
  815260:	00bfff84 	movi	r2,-2
  815264:	1884703a 	and	r2,r3,r2
  815268:	1001703a 	wrctl	status,r2
  
  return context;
  81526c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  815270:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  815274:	e0ffff03 	ldbu	r3,-4(fp)
  815278:	008020f4 	movhi	r2,131
  81527c:	10a16904 	addi	r2,r2,-31324
  815280:	18c7883a 	add	r3,r3,r3
  815284:	18c7883a 	add	r3,r3,r3
  815288:	10c5883a 	add	r2,r2,r3
  81528c:	10000015 	stw	zero,0(r2)
  815290:	e0bff317 	ldw	r2,-52(fp)
  815294:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815298:	e0bff617 	ldw	r2,-40(fp)
  81529c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8152a0:	e0bff803 	ldbu	r2,-32(fp)
  8152a4:	00000506 	br	8152bc <OSTaskCreate+0x198>
  8152a8:	e0bff317 	ldw	r2,-52(fp)
  8152ac:	e0bff915 	stw	r2,-28(fp)
  8152b0:	e0bff917 	ldw	r2,-28(fp)
  8152b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8152b8:	00800a04 	movi	r2,40
}
  8152bc:	e037883a 	mov	sp,fp
  8152c0:	dfc00117 	ldw	ra,4(sp)
  8152c4:	df000017 	ldw	fp,0(sp)
  8152c8:	dec00204 	addi	sp,sp,8
  8152cc:	f800283a 	ret

008152d0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8152d0:	deffec04 	addi	sp,sp,-80
  8152d4:	dfc01315 	stw	ra,76(sp)
  8152d8:	df001215 	stw	fp,72(sp)
  8152dc:	df001204 	addi	fp,sp,72
  8152e0:	e13ffa15 	stw	r4,-24(fp)
  8152e4:	e17ffb15 	stw	r5,-20(fp)
  8152e8:	e1bffc15 	stw	r6,-16(fp)
  8152ec:	3809883a 	mov	r4,r7
  8152f0:	e0c00217 	ldw	r3,8(fp)
  8152f4:	e0800617 	ldw	r2,24(fp)
  8152f8:	e13ffd05 	stb	r4,-12(fp)
  8152fc:	e0fffe0d 	sth	r3,-8(fp)
  815300:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  815304:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  815308:	e0bffd03 	ldbu	r2,-12(fp)
  81530c:	10800570 	cmpltui	r2,r2,21
  815310:	1000021e 	bne	r2,zero,81531c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  815314:	00800a84 	movi	r2,42
  815318:	00006106 	br	8154a0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81531c:	0005303a 	rdctl	r2,status
  815320:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815324:	e0fff917 	ldw	r3,-28(fp)
  815328:	00bfff84 	movi	r2,-2
  81532c:	1884703a 	and	r2,r3,r2
  815330:	1001703a 	wrctl	status,r2
  
  return context;
  815334:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815338:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81533c:	d0a09903 	ldbu	r2,-32156(gp)
  815340:	10803fcc 	andi	r2,r2,255
  815344:	10000626 	beq	r2,zero,815360 <OSTaskCreateExt+0x90>
  815348:	e0bff117 	ldw	r2,-60(fp)
  81534c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815350:	e0bff217 	ldw	r2,-56(fp)
  815354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  815358:	00800f04 	movi	r2,60
  81535c:	00005006 	br	8154a0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  815360:	e0fffd03 	ldbu	r3,-12(fp)
  815364:	008020f4 	movhi	r2,131
  815368:	10a16904 	addi	r2,r2,-31324
  81536c:	18c7883a 	add	r3,r3,r3
  815370:	18c7883a 	add	r3,r3,r3
  815374:	10c5883a 	add	r2,r2,r3
  815378:	10800017 	ldw	r2,0(r2)
  81537c:	1000431e 	bne	r2,zero,81548c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  815380:	e0fffd03 	ldbu	r3,-12(fp)
  815384:	008020f4 	movhi	r2,131
  815388:	10a16904 	addi	r2,r2,-31324
  81538c:	18c7883a 	add	r3,r3,r3
  815390:	18c7883a 	add	r3,r3,r3
  815394:	10c5883a 	add	r2,r2,r3
  815398:	00c00044 	movi	r3,1
  81539c:	10c00015 	stw	r3,0(r2)
  8153a0:	e0bff117 	ldw	r2,-60(fp)
  8153a4:	e0bff315 	stw	r2,-52(fp)
  8153a8:	e0bff317 	ldw	r2,-52(fp)
  8153ac:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  8153b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8153b4:	100d883a 	mov	r6,r2
  8153b8:	e1400417 	ldw	r5,16(fp)
  8153bc:	e1000317 	ldw	r4,12(fp)
  8153c0:	08163300 	call	816330 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  8153c4:	e0bfff0b 	ldhu	r2,-4(fp)
  8153c8:	100f883a 	mov	r7,r2
  8153cc:	e1bffc17 	ldw	r6,-16(fp)
  8153d0:	e17ffb17 	ldw	r5,-20(fp)
  8153d4:	e13ffa17 	ldw	r4,-24(fp)
  8153d8:	081b0200 	call	81b020 <OSTaskStkInit>
  8153dc:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  8153e0:	e0fffd03 	ldbu	r3,-12(fp)
  8153e4:	e13ffe0b 	ldhu	r4,-8(fp)
  8153e8:	e0bfff0b 	ldhu	r2,-4(fp)
  8153ec:	d8800215 	stw	r2,8(sp)
  8153f0:	e0800517 	ldw	r2,20(fp)
  8153f4:	d8800115 	stw	r2,4(sp)
  8153f8:	e0800417 	ldw	r2,16(fp)
  8153fc:	d8800015 	stw	r2,0(sp)
  815400:	200f883a 	mov	r7,r4
  815404:	e1800317 	ldw	r6,12(fp)
  815408:	e17ff517 	ldw	r5,-44(fp)
  81540c:	1809883a 	mov	r4,r3
  815410:	0810df80 	call	810df8 <OS_TCBInit>
  815414:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  815418:	e0bff603 	ldbu	r2,-40(fp)
  81541c:	1000061e 	bne	r2,zero,815438 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  815420:	d0a08b43 	ldbu	r2,-32211(gp)
  815424:	10803fcc 	andi	r2,r2,255
  815428:	10800058 	cmpnei	r2,r2,1
  81542c:	1000151e 	bne	r2,zero,815484 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  815430:	08109f80 	call	8109f8 <OS_Sched>
  815434:	00001306 	br	815484 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815438:	0005303a 	rdctl	r2,status
  81543c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815440:	e0fff817 	ldw	r3,-32(fp)
  815444:	00bfff84 	movi	r2,-2
  815448:	1884703a 	and	r2,r3,r2
  81544c:	1001703a 	wrctl	status,r2
  
  return context;
  815450:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  815454:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  815458:	e0fffd03 	ldbu	r3,-12(fp)
  81545c:	008020f4 	movhi	r2,131
  815460:	10a16904 	addi	r2,r2,-31324
  815464:	18c7883a 	add	r3,r3,r3
  815468:	18c7883a 	add	r3,r3,r3
  81546c:	10c5883a 	add	r2,r2,r3
  815470:	10000015 	stw	zero,0(r2)
  815474:	e0bff117 	ldw	r2,-60(fp)
  815478:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81547c:	e0bff417 	ldw	r2,-48(fp)
  815480:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  815484:	e0bff603 	ldbu	r2,-40(fp)
  815488:	00000506 	br	8154a0 <OSTaskCreateExt+0x1d0>
  81548c:	e0bff117 	ldw	r2,-60(fp)
  815490:	e0bff715 	stw	r2,-36(fp)
  815494:	e0bff717 	ldw	r2,-36(fp)
  815498:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81549c:	00800a04 	movi	r2,40
}
  8154a0:	e037883a 	mov	sp,fp
  8154a4:	dfc00117 	ldw	ra,4(sp)
  8154a8:	df000017 	ldw	fp,0(sp)
  8154ac:	dec00204 	addi	sp,sp,8
  8154b0:	f800283a 	ret

008154b4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  8154b4:	defff404 	addi	sp,sp,-48
  8154b8:	dfc00b15 	stw	ra,44(sp)
  8154bc:	df000a15 	stw	fp,40(sp)
  8154c0:	df000a04 	addi	fp,sp,40
  8154c4:	2005883a 	mov	r2,r4
  8154c8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  8154cc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  8154d0:	d0a09903 	ldbu	r2,-32156(gp)
  8154d4:	10803fcc 	andi	r2,r2,255
  8154d8:	10000226 	beq	r2,zero,8154e4 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  8154dc:	00801004 	movi	r2,64
  8154e0:	0000c006 	br	8157e4 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  8154e4:	e0bfff03 	ldbu	r2,-4(fp)
  8154e8:	10800518 	cmpnei	r2,r2,20
  8154ec:	1000021e 	bne	r2,zero,8154f8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  8154f0:	00800f84 	movi	r2,62
  8154f4:	0000bb06 	br	8157e4 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  8154f8:	e0bfff03 	ldbu	r2,-4(fp)
  8154fc:	10800530 	cmpltui	r2,r2,20
  815500:	1000051e 	bne	r2,zero,815518 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  815504:	e0bfff03 	ldbu	r2,-4(fp)
  815508:	10803fe0 	cmpeqi	r2,r2,255
  81550c:	1000021e 	bne	r2,zero,815518 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  815510:	00800a84 	movi	r2,42
  815514:	0000b306 	br	8157e4 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815518:	0005303a 	rdctl	r2,status
  81551c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815520:	e0fffe17 	ldw	r3,-8(fp)
  815524:	00bfff84 	movi	r2,-2
  815528:	1884703a 	and	r2,r3,r2
  81552c:	1001703a 	wrctl	status,r2
  
  return context;
  815530:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  815534:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  815538:	e0bfff03 	ldbu	r2,-4(fp)
  81553c:	10803fd8 	cmpnei	r2,r2,255
  815540:	1000031e 	bne	r2,zero,815550 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  815544:	d0a09a17 	ldw	r2,-32152(gp)
  815548:	10800c83 	ldbu	r2,50(r2)
  81554c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815550:	e0ffff03 	ldbu	r3,-4(fp)
  815554:	008020f4 	movhi	r2,131
  815558:	10a16904 	addi	r2,r2,-31324
  81555c:	18c7883a 	add	r3,r3,r3
  815560:	18c7883a 	add	r3,r3,r3
  815564:	10c5883a 	add	r2,r2,r3
  815568:	10800017 	ldw	r2,0(r2)
  81556c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  815570:	e0bff817 	ldw	r2,-32(fp)
  815574:	1000061e 	bne	r2,zero,815590 <OSTaskDel+0xdc>
  815578:	e0bff617 	ldw	r2,-40(fp)
  81557c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815580:	e0bff717 	ldw	r2,-36(fp)
  815584:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815588:	008010c4 	movi	r2,67
  81558c:	00009506 	br	8157e4 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  815590:	e0bff817 	ldw	r2,-32(fp)
  815594:	10800058 	cmpnei	r2,r2,1
  815598:	1000061e 	bne	r2,zero,8155b4 <OSTaskDel+0x100>
  81559c:	e0bff617 	ldw	r2,-40(fp)
  8155a0:	e0bff915 	stw	r2,-28(fp)
  8155a4:	e0bff917 	ldw	r2,-28(fp)
  8155a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  8155ac:	00800f44 	movi	r2,61
  8155b0:	00008c06 	br	8157e4 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  8155b4:	e0bff817 	ldw	r2,-32(fp)
  8155b8:	10800d03 	ldbu	r2,52(r2)
  8155bc:	10c03fcc 	andi	r3,r2,255
  8155c0:	e0bff817 	ldw	r2,-32(fp)
  8155c4:	10800d03 	ldbu	r2,52(r2)
  8155c8:	11003fcc 	andi	r4,r2,255
  8155cc:	d0a09744 	addi	r2,gp,-32163
  8155d0:	2085883a 	add	r2,r4,r2
  8155d4:	10800003 	ldbu	r2,0(r2)
  8155d8:	1009883a 	mov	r4,r2
  8155dc:	e0bff817 	ldw	r2,-32(fp)
  8155e0:	10800d43 	ldbu	r2,53(r2)
  8155e4:	0084303a 	nor	r2,zero,r2
  8155e8:	2084703a 	and	r2,r4,r2
  8155ec:	1009883a 	mov	r4,r2
  8155f0:	d0a09744 	addi	r2,gp,-32163
  8155f4:	1885883a 	add	r2,r3,r2
  8155f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  8155fc:	e0bff817 	ldw	r2,-32(fp)
  815600:	10800d03 	ldbu	r2,52(r2)
  815604:	10c03fcc 	andi	r3,r2,255
  815608:	d0a09744 	addi	r2,gp,-32163
  81560c:	1885883a 	add	r2,r3,r2
  815610:	10800003 	ldbu	r2,0(r2)
  815614:	10803fcc 	andi	r2,r2,255
  815618:	1000071e 	bne	r2,zero,815638 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  81561c:	e0bff817 	ldw	r2,-32(fp)
  815620:	10800d83 	ldbu	r2,54(r2)
  815624:	0084303a 	nor	r2,zero,r2
  815628:	1007883a 	mov	r3,r2
  81562c:	d0a09703 	ldbu	r2,-32164(gp)
  815630:	1884703a 	and	r2,r3,r2
  815634:	d0a09705 	stb	r2,-32164(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  815638:	e0bff817 	ldw	r2,-32(fp)
  81563c:	10800717 	ldw	r2,28(r2)
  815640:	10000526 	beq	r2,zero,815658 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  815644:	e0bff817 	ldw	r2,-32(fp)
  815648:	10800717 	ldw	r2,28(r2)
  81564c:	100b883a 	mov	r5,r2
  815650:	e13ff817 	ldw	r4,-32(fp)
  815654:	08103a40 	call	8103a4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  815658:	e0bff817 	ldw	r2,-32(fp)
  81565c:	10800817 	ldw	r2,32(r2)
  815660:	10000526 	beq	r2,zero,815678 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  815664:	e0bff817 	ldw	r2,-32(fp)
  815668:	10800817 	ldw	r2,32(r2)
  81566c:	100b883a 	mov	r5,r2
  815670:	e13ff817 	ldw	r4,-32(fp)
  815674:	081045c0 	call	81045c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  815678:	e0bff817 	ldw	r2,-32(fp)
  81567c:	10800a17 	ldw	r2,40(r2)
  815680:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  815684:	e0bffb17 	ldw	r2,-20(fp)
  815688:	10000226 	beq	r2,zero,815694 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  81568c:	e13ffb17 	ldw	r4,-20(fp)
  815690:	08128cc0 	call	8128cc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  815694:	e0bff817 	ldw	r2,-32(fp)
  815698:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  81569c:	e0bff817 	ldw	r2,-32(fp)
  8156a0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8156a4:	e0bff817 	ldw	r2,-32(fp)
  8156a8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  8156ac:	d0a08b03 	ldbu	r2,-32212(gp)
  8156b0:	10803fcc 	andi	r2,r2,255
  8156b4:	10803fe0 	cmpeqi	r2,r2,255
  8156b8:	1000031e 	bne	r2,zero,8156c8 <OSTaskDel+0x214>
        OSLockNesting++;
  8156bc:	d0a08b03 	ldbu	r2,-32212(gp)
  8156c0:	10800044 	addi	r2,r2,1
  8156c4:	d0a08b05 	stb	r2,-32212(gp)
  8156c8:	e0bff617 	ldw	r2,-40(fp)
  8156cc:	e0bffd15 	stw	r2,-12(fp)
  8156d0:	e0bffd17 	ldw	r2,-12(fp)
  8156d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  8156d8:	080ff8c0 	call	80ff8c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8156dc:	0005303a 	rdctl	r2,status
  8156e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8156e4:	e0fffa17 	ldw	r3,-24(fp)
  8156e8:	00bfff84 	movi	r2,-2
  8156ec:	1884703a 	and	r2,r3,r2
  8156f0:	1001703a 	wrctl	status,r2
  
  return context;
  8156f4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  8156f8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8156fc:	d0a08b03 	ldbu	r2,-32212(gp)
  815700:	10803fcc 	andi	r2,r2,255
  815704:	10000326 	beq	r2,zero,815714 <OSTaskDel+0x260>
        OSLockNesting--;
  815708:	d0a08b03 	ldbu	r2,-32212(gp)
  81570c:	10bfffc4 	addi	r2,r2,-1
  815710:	d0a08b05 	stb	r2,-32212(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  815714:	e13ff817 	ldw	r4,-32(fp)
  815718:	081b1a00 	call	81b1a0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  81571c:	d0a09343 	ldbu	r2,-32179(gp)
  815720:	10bfffc4 	addi	r2,r2,-1
  815724:	d0a09345 	stb	r2,-32179(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  815728:	e0ffff03 	ldbu	r3,-4(fp)
  81572c:	008020f4 	movhi	r2,131
  815730:	10a16904 	addi	r2,r2,-31324
  815734:	18c7883a 	add	r3,r3,r3
  815738:	18c7883a 	add	r3,r3,r3
  81573c:	10c5883a 	add	r2,r2,r3
  815740:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  815744:	e0bff817 	ldw	r2,-32(fp)
  815748:	10800617 	ldw	r2,24(r2)
  81574c:	1000071e 	bne	r2,zero,81576c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  815750:	e0bff817 	ldw	r2,-32(fp)
  815754:	10800517 	ldw	r2,20(r2)
  815758:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  81575c:	e0bff817 	ldw	r2,-32(fp)
  815760:	10800517 	ldw	r2,20(r2)
  815764:	d0a08e15 	stw	r2,-32200(gp)
  815768:	00000a06 	br	815794 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  81576c:	e0bff817 	ldw	r2,-32(fp)
  815770:	10800617 	ldw	r2,24(r2)
  815774:	e0fff817 	ldw	r3,-32(fp)
  815778:	18c00517 	ldw	r3,20(r3)
  81577c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  815780:	e0bff817 	ldw	r2,-32(fp)
  815784:	10800517 	ldw	r2,20(r2)
  815788:	e0fff817 	ldw	r3,-32(fp)
  81578c:	18c00617 	ldw	r3,24(r3)
  815790:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  815794:	d0e09217 	ldw	r3,-32184(gp)
  815798:	e0bff817 	ldw	r2,-32(fp)
  81579c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  8157a0:	e0bff817 	ldw	r2,-32(fp)
  8157a4:	d0a09215 	stw	r2,-32184(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  8157a8:	e0bff817 	ldw	r2,-32(fp)
  8157ac:	00c00fc4 	movi	r3,63
  8157b0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8157b4:	e0bff817 	ldw	r2,-32(fp)
  8157b8:	10001345 	stb	zero,77(r2)
  8157bc:	e0bff617 	ldw	r2,-40(fp)
  8157c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8157c4:	e0bffc17 	ldw	r2,-16(fp)
  8157c8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8157cc:	d0a08b43 	ldbu	r2,-32211(gp)
  8157d0:	10803fcc 	andi	r2,r2,255
  8157d4:	10800058 	cmpnei	r2,r2,1
  8157d8:	1000011e 	bne	r2,zero,8157e0 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  8157dc:	08109f80 	call	8109f8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8157e0:	0005883a 	mov	r2,zero
}
  8157e4:	e037883a 	mov	sp,fp
  8157e8:	dfc00117 	ldw	ra,4(sp)
  8157ec:	df000017 	ldw	fp,0(sp)
  8157f0:	dec00204 	addi	sp,sp,8
  8157f4:	f800283a 	ret

008157f8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  8157f8:	defff504 	addi	sp,sp,-44
  8157fc:	df000a15 	stw	fp,40(sp)
  815800:	df000a04 	addi	fp,sp,40
  815804:	2005883a 	mov	r2,r4
  815808:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81580c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  815810:	e0bfff03 	ldbu	r2,-4(fp)
  815814:	10800518 	cmpnei	r2,r2,20
  815818:	1000021e 	bne	r2,zero,815824 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  81581c:	00800f84 	movi	r2,62
  815820:	00004506 	br	815938 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  815824:	e0bfff03 	ldbu	r2,-4(fp)
  815828:	10800530 	cmpltui	r2,r2,20
  81582c:	1000051e 	bne	r2,zero,815844 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  815830:	e0bfff03 	ldbu	r2,-4(fp)
  815834:	10803fe0 	cmpeqi	r2,r2,255
  815838:	1000021e 	bne	r2,zero,815844 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  81583c:	00800a84 	movi	r2,42
  815840:	00003d06 	br	815938 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  815844:	e0bfff03 	ldbu	r2,-4(fp)
  815848:	10803fd8 	cmpnei	r2,r2,255
  81584c:	1000111e 	bne	r2,zero,815894 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815850:	0005303a 	rdctl	r2,status
  815854:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815858:	e0fff917 	ldw	r3,-28(fp)
  81585c:	00bfff84 	movi	r2,-2
  815860:	1884703a 	and	r2,r3,r2
  815864:	1001703a 	wrctl	status,r2
  
  return context;
  815868:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  81586c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  815870:	d0a09a17 	ldw	r2,-32152(gp)
  815874:	10800dc3 	ldbu	r2,55(r2)
  815878:	e0bff805 	stb	r2,-32(fp)
  81587c:	e0bff617 	ldw	r2,-40(fp)
  815880:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815884:	e0bffe17 	ldw	r2,-8(fp)
  815888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  81588c:	e0bff803 	ldbu	r2,-32(fp)
  815890:	00002906 	br	815938 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815894:	0005303a 	rdctl	r2,status
  815898:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81589c:	e0fff717 	ldw	r3,-36(fp)
  8158a0:	00bfff84 	movi	r2,-2
  8158a4:	1884703a 	and	r2,r3,r2
  8158a8:	1001703a 	wrctl	status,r2
  
  return context;
  8158ac:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8158b0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  8158b4:	e0ffff03 	ldbu	r3,-4(fp)
  8158b8:	008020f4 	movhi	r2,131
  8158bc:	10a16904 	addi	r2,r2,-31324
  8158c0:	18c7883a 	add	r3,r3,r3
  8158c4:	18c7883a 	add	r3,r3,r3
  8158c8:	10c5883a 	add	r2,r2,r3
  8158cc:	10800017 	ldw	r2,0(r2)
  8158d0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  8158d4:	e0bffb17 	ldw	r2,-20(fp)
  8158d8:	1000061e 	bne	r2,zero,8158f4 <OSTaskDelReq+0xfc>
  8158dc:	e0bff617 	ldw	r2,-40(fp)
  8158e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8158e4:	e0bffa17 	ldw	r2,-24(fp)
  8158e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  8158ec:	008010c4 	movi	r2,67
  8158f0:	00001106 	br	815938 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  8158f4:	e0bffb17 	ldw	r2,-20(fp)
  8158f8:	10800058 	cmpnei	r2,r2,1
  8158fc:	1000061e 	bne	r2,zero,815918 <OSTaskDelReq+0x120>
  815900:	e0bff617 	ldw	r2,-40(fp)
  815904:	e0bffc15 	stw	r2,-16(fp)
  815908:	e0bffc17 	ldw	r2,-16(fp)
  81590c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  815910:	00800f44 	movi	r2,61
  815914:	00000806 	br	815938 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  815918:	e0bffb17 	ldw	r2,-20(fp)
  81591c:	00c00fc4 	movi	r3,63
  815920:	10c00dc5 	stb	r3,55(r2)
  815924:	e0bff617 	ldw	r2,-40(fp)
  815928:	e0bffd15 	stw	r2,-12(fp)
  81592c:	e0bffd17 	ldw	r2,-12(fp)
  815930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815934:	0005883a 	mov	r2,zero
}
  815938:	e037883a 	mov	sp,fp
  81593c:	df000017 	ldw	fp,0(sp)
  815940:	dec00104 	addi	sp,sp,4
  815944:	f800283a 	ret

00815948 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  815948:	defff404 	addi	sp,sp,-48
  81594c:	dfc00b15 	stw	ra,44(sp)
  815950:	df000a15 	stw	fp,40(sp)
  815954:	df000a04 	addi	fp,sp,40
  815958:	2005883a 	mov	r2,r4
  81595c:	e17ffe15 	stw	r5,-8(fp)
  815960:	e1bfff15 	stw	r6,-4(fp)
  815964:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  815968:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  81596c:	e0bfff17 	ldw	r2,-4(fp)
  815970:	1000021e 	bne	r2,zero,81597c <OSTaskNameGet+0x34>
        return (0);
  815974:	0005883a 	mov	r2,zero
  815978:	00005406 	br	815acc <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  81597c:	e0bffd03 	ldbu	r2,-12(fp)
  815980:	10800570 	cmpltui	r2,r2,21
  815984:	1000081e 	bne	r2,zero,8159a8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  815988:	e0bffd03 	ldbu	r2,-12(fp)
  81598c:	10803fe0 	cmpeqi	r2,r2,255
  815990:	1000051e 	bne	r2,zero,8159a8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  815994:	e0bfff17 	ldw	r2,-4(fp)
  815998:	00c00a84 	movi	r3,42
  81599c:	10c00005 	stb	r3,0(r2)
            return (0);
  8159a0:	0005883a 	mov	r2,zero
  8159a4:	00004906 	br	815acc <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  8159a8:	e0bffe17 	ldw	r2,-8(fp)
  8159ac:	1000051e 	bne	r2,zero,8159c4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  8159b0:	e0bfff17 	ldw	r2,-4(fp)
  8159b4:	00c00304 	movi	r3,12
  8159b8:	10c00005 	stb	r3,0(r2)
        return (0);
  8159bc:	0005883a 	mov	r2,zero
  8159c0:	00004206 	br	815acc <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  8159c4:	d0a09903 	ldbu	r2,-32156(gp)
  8159c8:	10803fcc 	andi	r2,r2,255
  8159cc:	10000526 	beq	r2,zero,8159e4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  8159d0:	e0bfff17 	ldw	r2,-4(fp)
  8159d4:	00c00444 	movi	r3,17
  8159d8:	10c00005 	stb	r3,0(r2)
        return (0);
  8159dc:	0005883a 	mov	r2,zero
  8159e0:	00003a06 	br	815acc <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8159e4:	0005303a 	rdctl	r2,status
  8159e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8159ec:	e0fffc17 	ldw	r3,-16(fp)
  8159f0:	00bfff84 	movi	r2,-2
  8159f4:	1884703a 	and	r2,r3,r2
  8159f8:	1001703a 	wrctl	status,r2
  
  return context;
  8159fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  815a00:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  815a04:	e0bffd03 	ldbu	r2,-12(fp)
  815a08:	10803fd8 	cmpnei	r2,r2,255
  815a0c:	1000031e 	bne	r2,zero,815a1c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  815a10:	d0a09a17 	ldw	r2,-32152(gp)
  815a14:	10800c83 	ldbu	r2,50(r2)
  815a18:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815a1c:	e0fffd03 	ldbu	r3,-12(fp)
  815a20:	008020f4 	movhi	r2,131
  815a24:	10a16904 	addi	r2,r2,-31324
  815a28:	18c7883a 	add	r3,r3,r3
  815a2c:	18c7883a 	add	r3,r3,r3
  815a30:	10c5883a 	add	r2,r2,r3
  815a34:	10800017 	ldw	r2,0(r2)
  815a38:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  815a3c:	e0bff817 	ldw	r2,-32(fp)
  815a40:	1000091e 	bne	r2,zero,815a68 <OSTaskNameGet+0x120>
  815a44:	e0bff617 	ldw	r2,-40(fp)
  815a48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a4c:	e0bff717 	ldw	r2,-36(fp)
  815a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  815a54:	e0bfff17 	ldw	r2,-4(fp)
  815a58:	00c010c4 	movi	r3,67
  815a5c:	10c00005 	stb	r3,0(r2)
        return (0);
  815a60:	0005883a 	mov	r2,zero
  815a64:	00001906 	br	815acc <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  815a68:	e0bff817 	ldw	r2,-32(fp)
  815a6c:	10800058 	cmpnei	r2,r2,1
  815a70:	1000091e 	bne	r2,zero,815a98 <OSTaskNameGet+0x150>
  815a74:	e0bff617 	ldw	r2,-40(fp)
  815a78:	e0bff915 	stw	r2,-28(fp)
  815a7c:	e0bff917 	ldw	r2,-28(fp)
  815a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  815a84:	e0bfff17 	ldw	r2,-4(fp)
  815a88:	00c010c4 	movi	r3,67
  815a8c:	10c00005 	stb	r3,0(r2)
        return (0);
  815a90:	0005883a 	mov	r2,zero
  815a94:	00000d06 	br	815acc <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  815a98:	e0bff817 	ldw	r2,-32(fp)
  815a9c:	10801304 	addi	r2,r2,76
  815aa0:	100b883a 	mov	r5,r2
  815aa4:	e13ffe17 	ldw	r4,-8(fp)
  815aa8:	0810b3c0 	call	810b3c <OS_StrCopy>
  815aac:	e0bffb05 	stb	r2,-20(fp)
  815ab0:	e0bff617 	ldw	r2,-40(fp)
  815ab4:	e0bffa15 	stw	r2,-24(fp)
  815ab8:	e0bffa17 	ldw	r2,-24(fp)
  815abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815ac0:	e0bfff17 	ldw	r2,-4(fp)
  815ac4:	10000005 	stb	zero,0(r2)
    return (len);
  815ac8:	e0bffb03 	ldbu	r2,-20(fp)
}
  815acc:	e037883a 	mov	sp,fp
  815ad0:	dfc00117 	ldw	ra,4(sp)
  815ad4:	df000017 	ldw	fp,0(sp)
  815ad8:	dec00204 	addi	sp,sp,8
  815adc:	f800283a 	ret

00815ae0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  815ae0:	defff304 	addi	sp,sp,-52
  815ae4:	dfc00c15 	stw	ra,48(sp)
  815ae8:	df000b15 	stw	fp,44(sp)
  815aec:	df000b04 	addi	fp,sp,44
  815af0:	2005883a 	mov	r2,r4
  815af4:	e17ffe15 	stw	r5,-8(fp)
  815af8:	e1bfff15 	stw	r6,-4(fp)
  815afc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  815b00:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  815b04:	e0bfff17 	ldw	r2,-4(fp)
  815b08:	10005c26 	beq	r2,zero,815c7c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  815b0c:	e0bffd03 	ldbu	r2,-12(fp)
  815b10:	10800570 	cmpltui	r2,r2,21
  815b14:	1000071e 	bne	r2,zero,815b34 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  815b18:	e0bffd03 	ldbu	r2,-12(fp)
  815b1c:	10803fe0 	cmpeqi	r2,r2,255
  815b20:	1000041e 	bne	r2,zero,815b34 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  815b24:	e0bfff17 	ldw	r2,-4(fp)
  815b28:	00c00a84 	movi	r3,42
  815b2c:	10c00005 	stb	r3,0(r2)
            return;
  815b30:	00005306 	br	815c80 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  815b34:	e0bffe17 	ldw	r2,-8(fp)
  815b38:	1000041e 	bne	r2,zero,815b4c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  815b3c:	e0bfff17 	ldw	r2,-4(fp)
  815b40:	00c00304 	movi	r3,12
  815b44:	10c00005 	stb	r3,0(r2)
        return;
  815b48:	00004d06 	br	815c80 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  815b4c:	d0a09903 	ldbu	r2,-32156(gp)
  815b50:	10803fcc 	andi	r2,r2,255
  815b54:	10000426 	beq	r2,zero,815b68 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  815b58:	e0bfff17 	ldw	r2,-4(fp)
  815b5c:	00c00484 	movi	r3,18
  815b60:	10c00005 	stb	r3,0(r2)
        return;
  815b64:	00004606 	br	815c80 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b68:	0005303a 	rdctl	r2,status
  815b6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b70:	e0fffc17 	ldw	r3,-16(fp)
  815b74:	00bfff84 	movi	r2,-2
  815b78:	1884703a 	and	r2,r3,r2
  815b7c:	1001703a 	wrctl	status,r2
  
  return context;
  815b80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  815b84:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  815b88:	e0bffd03 	ldbu	r2,-12(fp)
  815b8c:	10803fd8 	cmpnei	r2,r2,255
  815b90:	1000031e 	bne	r2,zero,815ba0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  815b94:	d0a09a17 	ldw	r2,-32152(gp)
  815b98:	10800c83 	ldbu	r2,50(r2)
  815b9c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815ba0:	e0fffd03 	ldbu	r3,-12(fp)
  815ba4:	008020f4 	movhi	r2,131
  815ba8:	10a16904 	addi	r2,r2,-31324
  815bac:	18c7883a 	add	r3,r3,r3
  815bb0:	18c7883a 	add	r3,r3,r3
  815bb4:	10c5883a 	add	r2,r2,r3
  815bb8:	10800017 	ldw	r2,0(r2)
  815bbc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  815bc0:	e0bff717 	ldw	r2,-36(fp)
  815bc4:	1000081e 	bne	r2,zero,815be8 <OSTaskNameSet+0x108>
  815bc8:	e0bff517 	ldw	r2,-44(fp)
  815bcc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815bd0:	e0bff617 	ldw	r2,-40(fp)
  815bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  815bd8:	e0bfff17 	ldw	r2,-4(fp)
  815bdc:	00c010c4 	movi	r3,67
  815be0:	10c00005 	stb	r3,0(r2)
        return;
  815be4:	00002606 	br	815c80 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  815be8:	e0bff717 	ldw	r2,-36(fp)
  815bec:	10800058 	cmpnei	r2,r2,1
  815bf0:	1000081e 	bne	r2,zero,815c14 <OSTaskNameSet+0x134>
  815bf4:	e0bff517 	ldw	r2,-44(fp)
  815bf8:	e0bff815 	stw	r2,-32(fp)
  815bfc:	e0bff817 	ldw	r2,-32(fp)
  815c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  815c04:	e0bfff17 	ldw	r2,-4(fp)
  815c08:	00c010c4 	movi	r3,67
  815c0c:	10c00005 	stb	r3,0(r2)
        return;
  815c10:	00001b06 	br	815c80 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  815c14:	e13ffe17 	ldw	r4,-8(fp)
  815c18:	0810bb00 	call	810bb0 <OS_StrLen>
  815c1c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  815c20:	e0bffa03 	ldbu	r2,-24(fp)
  815c24:	10800830 	cmpltui	r2,r2,32
  815c28:	1000081e 	bne	r2,zero,815c4c <OSTaskNameSet+0x16c>
  815c2c:	e0bff517 	ldw	r2,-44(fp)
  815c30:	e0bff915 	stw	r2,-28(fp)
  815c34:	e0bff917 	ldw	r2,-28(fp)
  815c38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  815c3c:	e0bfff17 	ldw	r2,-4(fp)
  815c40:	00c01044 	movi	r3,65
  815c44:	10c00005 	stb	r3,0(r2)
        return;
  815c48:	00000d06 	br	815c80 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  815c4c:	e0bff717 	ldw	r2,-36(fp)
  815c50:	10801304 	addi	r2,r2,76
  815c54:	e17ffe17 	ldw	r5,-8(fp)
  815c58:	1009883a 	mov	r4,r2
  815c5c:	0810b3c0 	call	810b3c <OS_StrCopy>
  815c60:	e0bff517 	ldw	r2,-44(fp)
  815c64:	e0bffb15 	stw	r2,-20(fp)
  815c68:	e0bffb17 	ldw	r2,-20(fp)
  815c6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815c70:	e0bfff17 	ldw	r2,-4(fp)
  815c74:	10000005 	stb	zero,0(r2)
  815c78:	00000106 	br	815c80 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  815c7c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  815c80:	e037883a 	mov	sp,fp
  815c84:	dfc00117 	ldw	ra,4(sp)
  815c88:	df000017 	ldw	fp,0(sp)
  815c8c:	dec00204 	addi	sp,sp,8
  815c90:	f800283a 	ret

00815c94 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  815c94:	defff404 	addi	sp,sp,-48
  815c98:	dfc00b15 	stw	ra,44(sp)
  815c9c:	df000a15 	stw	fp,40(sp)
  815ca0:	df000a04 	addi	fp,sp,40
  815ca4:	2005883a 	mov	r2,r4
  815ca8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  815cac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  815cb0:	e0bfff03 	ldbu	r2,-4(fp)
  815cb4:	10800530 	cmpltui	r2,r2,20
  815cb8:	1000021e 	bne	r2,zero,815cc4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  815cbc:	00800a84 	movi	r2,42
  815cc0:	00006406 	br	815e54 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815cc4:	0005303a 	rdctl	r2,status
  815cc8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815ccc:	e0fffe17 	ldw	r3,-8(fp)
  815cd0:	00bfff84 	movi	r2,-2
  815cd4:	1884703a 	and	r2,r3,r2
  815cd8:	1001703a 	wrctl	status,r2
  
  return context;
  815cdc:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815ce0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  815ce4:	e0ffff03 	ldbu	r3,-4(fp)
  815ce8:	008020f4 	movhi	r2,131
  815cec:	10a16904 	addi	r2,r2,-31324
  815cf0:	18c7883a 	add	r3,r3,r3
  815cf4:	18c7883a 	add	r3,r3,r3
  815cf8:	10c5883a 	add	r2,r2,r3
  815cfc:	10800017 	ldw	r2,0(r2)
  815d00:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  815d04:	e0bff817 	ldw	r2,-32(fp)
  815d08:	1000061e 	bne	r2,zero,815d24 <OSTaskResume+0x90>
  815d0c:	e0bff617 	ldw	r2,-40(fp)
  815d10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815d14:	e0bff717 	ldw	r2,-36(fp)
  815d18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  815d1c:	00801184 	movi	r2,70
  815d20:	00004c06 	br	815e54 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  815d24:	e0bff817 	ldw	r2,-32(fp)
  815d28:	10800058 	cmpnei	r2,r2,1
  815d2c:	1000061e 	bne	r2,zero,815d48 <OSTaskResume+0xb4>
  815d30:	e0bff617 	ldw	r2,-40(fp)
  815d34:	e0bff915 	stw	r2,-28(fp)
  815d38:	e0bff917 	ldw	r2,-28(fp)
  815d3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815d40:	008010c4 	movi	r2,67
  815d44:	00004306 	br	815e54 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  815d48:	e0bff817 	ldw	r2,-32(fp)
  815d4c:	10800c03 	ldbu	r2,48(r2)
  815d50:	10803fcc 	andi	r2,r2,255
  815d54:	1080020c 	andi	r2,r2,8
  815d58:	10003926 	beq	r2,zero,815e40 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  815d5c:	e0bff817 	ldw	r2,-32(fp)
  815d60:	10c00c03 	ldbu	r3,48(r2)
  815d64:	00bffdc4 	movi	r2,-9
  815d68:	1884703a 	and	r2,r3,r2
  815d6c:	1007883a 	mov	r3,r2
  815d70:	e0bff817 	ldw	r2,-32(fp)
  815d74:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  815d78:	e0bff817 	ldw	r2,-32(fp)
  815d7c:	10800c03 	ldbu	r2,48(r2)
  815d80:	10803fcc 	andi	r2,r2,255
  815d84:	1000281e 	bne	r2,zero,815e28 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  815d88:	e0bff817 	ldw	r2,-32(fp)
  815d8c:	10800b8b 	ldhu	r2,46(r2)
  815d90:	10bfffcc 	andi	r2,r2,65535
  815d94:	10001f1e 	bne	r2,zero,815e14 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  815d98:	e0bff817 	ldw	r2,-32(fp)
  815d9c:	10c00d83 	ldbu	r3,54(r2)
  815da0:	d0a09703 	ldbu	r2,-32164(gp)
  815da4:	1884b03a 	or	r2,r3,r2
  815da8:	d0a09705 	stb	r2,-32164(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  815dac:	e0bff817 	ldw	r2,-32(fp)
  815db0:	10800d03 	ldbu	r2,52(r2)
  815db4:	10c03fcc 	andi	r3,r2,255
  815db8:	e0bff817 	ldw	r2,-32(fp)
  815dbc:	10800d03 	ldbu	r2,52(r2)
  815dc0:	11003fcc 	andi	r4,r2,255
  815dc4:	d0a09744 	addi	r2,gp,-32163
  815dc8:	2085883a 	add	r2,r4,r2
  815dcc:	11000003 	ldbu	r4,0(r2)
  815dd0:	e0bff817 	ldw	r2,-32(fp)
  815dd4:	10800d43 	ldbu	r2,53(r2)
  815dd8:	2084b03a 	or	r2,r4,r2
  815ddc:	1009883a 	mov	r4,r2
  815de0:	d0a09744 	addi	r2,gp,-32163
  815de4:	1885883a 	add	r2,r3,r2
  815de8:	11000005 	stb	r4,0(r2)
  815dec:	e0bff617 	ldw	r2,-40(fp)
  815df0:	e0bffa15 	stw	r2,-24(fp)
  815df4:	e0bffa17 	ldw	r2,-24(fp)
  815df8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  815dfc:	d0a08b43 	ldbu	r2,-32211(gp)
  815e00:	10803fcc 	andi	r2,r2,255
  815e04:	10800058 	cmpnei	r2,r2,1
  815e08:	10000b1e 	bne	r2,zero,815e38 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  815e0c:	08109f80 	call	8109f8 <OS_Sched>
  815e10:	00000906 	br	815e38 <OSTaskResume+0x1a4>
  815e14:	e0bff617 	ldw	r2,-40(fp)
  815e18:	e0bffb15 	stw	r2,-20(fp)
  815e1c:	e0bffb17 	ldw	r2,-20(fp)
  815e20:	1001703a 	wrctl	status,r2
  815e24:	00000406 	br	815e38 <OSTaskResume+0x1a4>
  815e28:	e0bff617 	ldw	r2,-40(fp)
  815e2c:	e0bffc15 	stw	r2,-16(fp)
  815e30:	e0bffc17 	ldw	r2,-16(fp)
  815e34:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  815e38:	0005883a 	mov	r2,zero
  815e3c:	00000506 	br	815e54 <OSTaskResume+0x1c0>
  815e40:	e0bff617 	ldw	r2,-40(fp)
  815e44:	e0bffd15 	stw	r2,-12(fp)
  815e48:	e0bffd17 	ldw	r2,-12(fp)
  815e4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  815e50:	00801104 	movi	r2,68
}
  815e54:	e037883a 	mov	sp,fp
  815e58:	dfc00117 	ldw	ra,4(sp)
  815e5c:	df000017 	ldw	fp,0(sp)
  815e60:	dec00204 	addi	sp,sp,8
  815e64:	f800283a 	ret

00815e68 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  815e68:	defff304 	addi	sp,sp,-52
  815e6c:	df000c15 	stw	fp,48(sp)
  815e70:	df000c04 	addi	fp,sp,48
  815e74:	2005883a 	mov	r2,r4
  815e78:	e17fff15 	stw	r5,-4(fp)
  815e7c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815e80:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  815e84:	e0bffe03 	ldbu	r2,-8(fp)
  815e88:	10800570 	cmpltui	r2,r2,21
  815e8c:	1000051e 	bne	r2,zero,815ea4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  815e90:	e0bffe03 	ldbu	r2,-8(fp)
  815e94:	10803fe0 	cmpeqi	r2,r2,255
  815e98:	1000021e 	bne	r2,zero,815ea4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  815e9c:	00800a84 	movi	r2,42
  815ea0:	00005d06 	br	816018 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  815ea4:	e0bfff17 	ldw	r2,-4(fp)
  815ea8:	1000021e 	bne	r2,zero,815eb4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  815eac:	00800244 	movi	r2,9
  815eb0:	00005906 	br	816018 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  815eb4:	e0bfff17 	ldw	r2,-4(fp)
  815eb8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  815ebc:	e0bfff17 	ldw	r2,-4(fp)
  815ec0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815ec4:	0005303a 	rdctl	r2,status
  815ec8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815ecc:	e0fffd17 	ldw	r3,-12(fp)
  815ed0:	00bfff84 	movi	r2,-2
  815ed4:	1884703a 	and	r2,r3,r2
  815ed8:	1001703a 	wrctl	status,r2
  
  return context;
  815edc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  815ee0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  815ee4:	e0bffe03 	ldbu	r2,-8(fp)
  815ee8:	10803fd8 	cmpnei	r2,r2,255
  815eec:	1000031e 	bne	r2,zero,815efc <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  815ef0:	d0a09a17 	ldw	r2,-32152(gp)
  815ef4:	10800c83 	ldbu	r2,50(r2)
  815ef8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815efc:	e0fffe03 	ldbu	r3,-8(fp)
  815f00:	008020f4 	movhi	r2,131
  815f04:	10a16904 	addi	r2,r2,-31324
  815f08:	18c7883a 	add	r3,r3,r3
  815f0c:	18c7883a 	add	r3,r3,r3
  815f10:	10c5883a 	add	r2,r2,r3
  815f14:	10800017 	ldw	r2,0(r2)
  815f18:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  815f1c:	e0bff817 	ldw	r2,-32(fp)
  815f20:	1000061e 	bne	r2,zero,815f3c <OSTaskStkChk+0xd4>
  815f24:	e0bff617 	ldw	r2,-40(fp)
  815f28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815f2c:	e0bff717 	ldw	r2,-36(fp)
  815f30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815f34:	008010c4 	movi	r2,67
  815f38:	00003706 	br	816018 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  815f3c:	e0bff817 	ldw	r2,-32(fp)
  815f40:	10800058 	cmpnei	r2,r2,1
  815f44:	1000061e 	bne	r2,zero,815f60 <OSTaskStkChk+0xf8>
  815f48:	e0bff617 	ldw	r2,-40(fp)
  815f4c:	e0bff915 	stw	r2,-28(fp)
  815f50:	e0bff917 	ldw	r2,-28(fp)
  815f54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815f58:	008010c4 	movi	r2,67
  815f5c:	00002e06 	br	816018 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  815f60:	e0bff817 	ldw	r2,-32(fp)
  815f64:	1080040b 	ldhu	r2,16(r2)
  815f68:	10bfffcc 	andi	r2,r2,65535
  815f6c:	1080004c 	andi	r2,r2,1
  815f70:	1000061e 	bne	r2,zero,815f8c <OSTaskStkChk+0x124>
  815f74:	e0bff617 	ldw	r2,-40(fp)
  815f78:	e0bffa15 	stw	r2,-24(fp)
  815f7c:	e0bffa17 	ldw	r2,-24(fp)
  815f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  815f84:	00801144 	movi	r2,69
  815f88:	00002306 	br	816018 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  815f8c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  815f90:	e0bff817 	ldw	r2,-32(fp)
  815f94:	10800317 	ldw	r2,12(r2)
  815f98:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  815f9c:	e0bff817 	ldw	r2,-32(fp)
  815fa0:	10800217 	ldw	r2,8(r2)
  815fa4:	e0bff415 	stw	r2,-48(fp)
  815fa8:	e0bff617 	ldw	r2,-40(fp)
  815fac:	e0bffb15 	stw	r2,-20(fp)
  815fb0:	e0bffb17 	ldw	r2,-20(fp)
  815fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  815fb8:	00000306 	br	815fc8 <OSTaskStkChk+0x160>
        nfree++;
  815fbc:	e0bff517 	ldw	r2,-44(fp)
  815fc0:	10800044 	addi	r2,r2,1
  815fc4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  815fc8:	e0bff417 	ldw	r2,-48(fp)
  815fcc:	10c00104 	addi	r3,r2,4
  815fd0:	e0fff415 	stw	r3,-48(fp)
  815fd4:	10800017 	ldw	r2,0(r2)
  815fd8:	103ff826 	beq	r2,zero,815fbc <__alt_mem_epcs_flash_controller_0+0xff80cfbc>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  815fdc:	e0bff517 	ldw	r2,-44(fp)
  815fe0:	1085883a 	add	r2,r2,r2
  815fe4:	1085883a 	add	r2,r2,r2
  815fe8:	1007883a 	mov	r3,r2
  815fec:	e0bfff17 	ldw	r2,-4(fp)
  815ff0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  815ff4:	e0fffc17 	ldw	r3,-16(fp)
  815ff8:	e0bff517 	ldw	r2,-44(fp)
  815ffc:	1885c83a 	sub	r2,r3,r2
  816000:	1085883a 	add	r2,r2,r2
  816004:	1085883a 	add	r2,r2,r2
  816008:	1007883a 	mov	r3,r2
  81600c:	e0bfff17 	ldw	r2,-4(fp)
  816010:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  816014:	0005883a 	mov	r2,zero
}
  816018:	e037883a 	mov	sp,fp
  81601c:	df000017 	ldw	fp,0(sp)
  816020:	dec00104 	addi	sp,sp,4
  816024:	f800283a 	ret

00816028 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  816028:	defff504 	addi	sp,sp,-44
  81602c:	dfc00a15 	stw	ra,40(sp)
  816030:	df000915 	stw	fp,36(sp)
  816034:	df000904 	addi	fp,sp,36
  816038:	2005883a 	mov	r2,r4
  81603c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816040:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  816044:	e0bfff03 	ldbu	r2,-4(fp)
  816048:	10800518 	cmpnei	r2,r2,20
  81604c:	1000021e 	bne	r2,zero,816058 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  816050:	008011c4 	movi	r2,71
  816054:	00006806 	br	8161f8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  816058:	e0bfff03 	ldbu	r2,-4(fp)
  81605c:	10800530 	cmpltui	r2,r2,20
  816060:	1000051e 	bne	r2,zero,816078 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  816064:	e0bfff03 	ldbu	r2,-4(fp)
  816068:	10803fe0 	cmpeqi	r2,r2,255
  81606c:	1000021e 	bne	r2,zero,816078 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  816070:	00800a84 	movi	r2,42
  816074:	00006006 	br	8161f8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816078:	0005303a 	rdctl	r2,status
  81607c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816080:	e0fffe17 	ldw	r3,-8(fp)
  816084:	00bfff84 	movi	r2,-2
  816088:	1884703a 	and	r2,r3,r2
  81608c:	1001703a 	wrctl	status,r2
  
  return context;
  816090:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  816094:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  816098:	e0bfff03 	ldbu	r2,-4(fp)
  81609c:	10803fd8 	cmpnei	r2,r2,255
  8160a0:	1000061e 	bne	r2,zero,8160bc <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  8160a4:	d0a09a17 	ldw	r2,-32152(gp)
  8160a8:	10800c83 	ldbu	r2,50(r2)
  8160ac:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  8160b0:	00800044 	movi	r2,1
  8160b4:	e0bff705 	stb	r2,-36(fp)
  8160b8:	00000906 	br	8160e0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  8160bc:	d0a09a17 	ldw	r2,-32152(gp)
  8160c0:	10800c83 	ldbu	r2,50(r2)
  8160c4:	10c03fcc 	andi	r3,r2,255
  8160c8:	e0bfff03 	ldbu	r2,-4(fp)
  8160cc:	1880031e 	bne	r3,r2,8160dc <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  8160d0:	00800044 	movi	r2,1
  8160d4:	e0bff705 	stb	r2,-36(fp)
  8160d8:	00000106 	br	8160e0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8160dc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8160e0:	e0ffff03 	ldbu	r3,-4(fp)
  8160e4:	008020f4 	movhi	r2,131
  8160e8:	10a16904 	addi	r2,r2,-31324
  8160ec:	18c7883a 	add	r3,r3,r3
  8160f0:	18c7883a 	add	r3,r3,r3
  8160f4:	10c5883a 	add	r2,r2,r3
  8160f8:	10800017 	ldw	r2,0(r2)
  8160fc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  816100:	e0bffa17 	ldw	r2,-24(fp)
  816104:	1000061e 	bne	r2,zero,816120 <OSTaskSuspend+0xf8>
  816108:	e0bff817 	ldw	r2,-32(fp)
  81610c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816110:	e0bff917 	ldw	r2,-28(fp)
  816114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  816118:	00801204 	movi	r2,72
  81611c:	00003606 	br	8161f8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  816120:	e0bffa17 	ldw	r2,-24(fp)
  816124:	10800058 	cmpnei	r2,r2,1
  816128:	1000061e 	bne	r2,zero,816144 <OSTaskSuspend+0x11c>
  81612c:	e0bff817 	ldw	r2,-32(fp)
  816130:	e0bffb15 	stw	r2,-20(fp)
  816134:	e0bffb17 	ldw	r2,-20(fp)
  816138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81613c:	008010c4 	movi	r2,67
  816140:	00002d06 	br	8161f8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  816144:	e0bffa17 	ldw	r2,-24(fp)
  816148:	10800d03 	ldbu	r2,52(r2)
  81614c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  816150:	e0fffd03 	ldbu	r3,-12(fp)
  816154:	e13ffd03 	ldbu	r4,-12(fp)
  816158:	d0a09744 	addi	r2,gp,-32163
  81615c:	2085883a 	add	r2,r4,r2
  816160:	10800003 	ldbu	r2,0(r2)
  816164:	1009883a 	mov	r4,r2
  816168:	e0bffa17 	ldw	r2,-24(fp)
  81616c:	10800d43 	ldbu	r2,53(r2)
  816170:	0084303a 	nor	r2,zero,r2
  816174:	2084703a 	and	r2,r4,r2
  816178:	1009883a 	mov	r4,r2
  81617c:	d0a09744 	addi	r2,gp,-32163
  816180:	1885883a 	add	r2,r3,r2
  816184:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  816188:	e0fffd03 	ldbu	r3,-12(fp)
  81618c:	d0a09744 	addi	r2,gp,-32163
  816190:	1885883a 	add	r2,r3,r2
  816194:	10800003 	ldbu	r2,0(r2)
  816198:	10803fcc 	andi	r2,r2,255
  81619c:	1000071e 	bne	r2,zero,8161bc <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  8161a0:	e0bffa17 	ldw	r2,-24(fp)
  8161a4:	10800d83 	ldbu	r2,54(r2)
  8161a8:	0084303a 	nor	r2,zero,r2
  8161ac:	1007883a 	mov	r3,r2
  8161b0:	d0a09703 	ldbu	r2,-32164(gp)
  8161b4:	1884703a 	and	r2,r3,r2
  8161b8:	d0a09705 	stb	r2,-32164(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8161bc:	e0bffa17 	ldw	r2,-24(fp)
  8161c0:	10800c03 	ldbu	r2,48(r2)
  8161c4:	10800214 	ori	r2,r2,8
  8161c8:	1007883a 	mov	r3,r2
  8161cc:	e0bffa17 	ldw	r2,-24(fp)
  8161d0:	10c00c05 	stb	r3,48(r2)
  8161d4:	e0bff817 	ldw	r2,-32(fp)
  8161d8:	e0bffc15 	stw	r2,-16(fp)
  8161dc:	e0bffc17 	ldw	r2,-16(fp)
  8161e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  8161e4:	e0bff703 	ldbu	r2,-36(fp)
  8161e8:	10800058 	cmpnei	r2,r2,1
  8161ec:	1000011e 	bne	r2,zero,8161f4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  8161f0:	08109f80 	call	8109f8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8161f4:	0005883a 	mov	r2,zero
}
  8161f8:	e037883a 	mov	sp,fp
  8161fc:	dfc00117 	ldw	ra,4(sp)
  816200:	df000017 	ldw	fp,0(sp)
  816204:	dec00204 	addi	sp,sp,8
  816208:	f800283a 	ret

0081620c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  81620c:	defff604 	addi	sp,sp,-40
  816210:	dfc00915 	stw	ra,36(sp)
  816214:	df000815 	stw	fp,32(sp)
  816218:	df000804 	addi	fp,sp,32
  81621c:	2005883a 	mov	r2,r4
  816220:	e17fff15 	stw	r5,-4(fp)
  816224:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816228:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  81622c:	e0bffe03 	ldbu	r2,-8(fp)
  816230:	10800570 	cmpltui	r2,r2,21
  816234:	1000051e 	bne	r2,zero,81624c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  816238:	e0bffe03 	ldbu	r2,-8(fp)
  81623c:	10803fe0 	cmpeqi	r2,r2,255
  816240:	1000021e 	bne	r2,zero,81624c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  816244:	00800a84 	movi	r2,42
  816248:	00003406 	br	81631c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81624c:	e0bfff17 	ldw	r2,-4(fp)
  816250:	1000021e 	bne	r2,zero,81625c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  816254:	00800244 	movi	r2,9
  816258:	00003006 	br	81631c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81625c:	0005303a 	rdctl	r2,status
  816260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816264:	e0fffd17 	ldw	r3,-12(fp)
  816268:	00bfff84 	movi	r2,-2
  81626c:	1884703a 	and	r2,r3,r2
  816270:	1001703a 	wrctl	status,r2
  
  return context;
  816274:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  816278:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  81627c:	e0bffe03 	ldbu	r2,-8(fp)
  816280:	10803fd8 	cmpnei	r2,r2,255
  816284:	1000031e 	bne	r2,zero,816294 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  816288:	d0a09a17 	ldw	r2,-32152(gp)
  81628c:	10800c83 	ldbu	r2,50(r2)
  816290:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  816294:	e0fffe03 	ldbu	r3,-8(fp)
  816298:	008020f4 	movhi	r2,131
  81629c:	10a16904 	addi	r2,r2,-31324
  8162a0:	18c7883a 	add	r3,r3,r3
  8162a4:	18c7883a 	add	r3,r3,r3
  8162a8:	10c5883a 	add	r2,r2,r3
  8162ac:	10800017 	ldw	r2,0(r2)
  8162b0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  8162b4:	e0bffa17 	ldw	r2,-24(fp)
  8162b8:	1000061e 	bne	r2,zero,8162d4 <OSTaskQuery+0xc8>
  8162bc:	e0bff817 	ldw	r2,-32(fp)
  8162c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8162c4:	e0bff917 	ldw	r2,-28(fp)
  8162c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  8162cc:	00800a44 	movi	r2,41
  8162d0:	00001206 	br	81631c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  8162d4:	e0bffa17 	ldw	r2,-24(fp)
  8162d8:	10800058 	cmpnei	r2,r2,1
  8162dc:	1000061e 	bne	r2,zero,8162f8 <OSTaskQuery+0xec>
  8162e0:	e0bff817 	ldw	r2,-32(fp)
  8162e4:	e0bffb15 	stw	r2,-20(fp)
  8162e8:	e0bffb17 	ldw	r2,-20(fp)
  8162ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8162f0:	008010c4 	movi	r2,67
  8162f4:	00000906 	br	81631c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  8162f8:	01801b04 	movi	r6,108
  8162fc:	e17ffa17 	ldw	r5,-24(fp)
  816300:	e13fff17 	ldw	r4,-4(fp)
  816304:	08109900 	call	810990 <OS_MemCopy>
  816308:	e0bff817 	ldw	r2,-32(fp)
  81630c:	e0bffc15 	stw	r2,-16(fp)
  816310:	e0bffc17 	ldw	r2,-16(fp)
  816314:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816318:	0005883a 	mov	r2,zero
}
  81631c:	e037883a 	mov	sp,fp
  816320:	dfc00117 	ldw	ra,4(sp)
  816324:	df000017 	ldw	fp,0(sp)
  816328:	dec00204 	addi	sp,sp,8
  81632c:	f800283a 	ret

00816330 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  816330:	defffc04 	addi	sp,sp,-16
  816334:	df000315 	stw	fp,12(sp)
  816338:	df000304 	addi	fp,sp,12
  81633c:	e13ffd15 	stw	r4,-12(fp)
  816340:	e17ffe15 	stw	r5,-8(fp)
  816344:	3005883a 	mov	r2,r6
  816348:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  81634c:	e0bfff0b 	ldhu	r2,-4(fp)
  816350:	1080004c 	andi	r2,r2,1
  816354:	10000d26 	beq	r2,zero,81638c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  816358:	e0bfff0b 	ldhu	r2,-4(fp)
  81635c:	1080008c 	andi	r2,r2,2
  816360:	10000a26 	beq	r2,zero,81638c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  816364:	00000706 	br	816384 <OS_TaskStkClr+0x54>
                size--;
  816368:	e0bffe17 	ldw	r2,-8(fp)
  81636c:	10bfffc4 	addi	r2,r2,-1
  816370:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  816374:	e0bffd17 	ldw	r2,-12(fp)
  816378:	10c00104 	addi	r3,r2,4
  81637c:	e0fffd15 	stw	r3,-12(fp)
  816380:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  816384:	e0bffe17 	ldw	r2,-8(fp)
  816388:	103ff71e 	bne	r2,zero,816368 <__alt_mem_epcs_flash_controller_0+0xff80d368>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  81638c:	0001883a 	nop
  816390:	e037883a 	mov	sp,fp
  816394:	df000017 	ldw	fp,0(sp)
  816398:	dec00104 	addi	sp,sp,4
  81639c:	f800283a 	ret

008163a0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  8163a0:	defff904 	addi	sp,sp,-28
  8163a4:	dfc00615 	stw	ra,24(sp)
  8163a8:	df000515 	stw	fp,20(sp)
  8163ac:	df000504 	addi	fp,sp,20
  8163b0:	2005883a 	mov	r2,r4
  8163b4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8163b8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8163bc:	d0a09903 	ldbu	r2,-32156(gp)
  8163c0:	10803fcc 	andi	r2,r2,255
  8163c4:	1000311e 	bne	r2,zero,81648c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8163c8:	e0bfff0b 	ldhu	r2,-4(fp)
  8163cc:	10003026 	beq	r2,zero,816490 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8163d0:	0005303a 	rdctl	r2,status
  8163d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8163d8:	e0fffe17 	ldw	r3,-8(fp)
  8163dc:	00bfff84 	movi	r2,-2
  8163e0:	1884703a 	and	r2,r3,r2
  8163e4:	1001703a 	wrctl	status,r2
  
  return context;
  8163e8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8163ec:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  8163f0:	d0a09a17 	ldw	r2,-32152(gp)
  8163f4:	10800d03 	ldbu	r2,52(r2)
  8163f8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8163fc:	e0fffd03 	ldbu	r3,-12(fp)
  816400:	e13ffd03 	ldbu	r4,-12(fp)
  816404:	d0a09744 	addi	r2,gp,-32163
  816408:	2085883a 	add	r2,r4,r2
  81640c:	10800003 	ldbu	r2,0(r2)
  816410:	1009883a 	mov	r4,r2
  816414:	d0a09a17 	ldw	r2,-32152(gp)
  816418:	10800d43 	ldbu	r2,53(r2)
  81641c:	0084303a 	nor	r2,zero,r2
  816420:	2084703a 	and	r2,r4,r2
  816424:	1009883a 	mov	r4,r2
  816428:	d0a09744 	addi	r2,gp,-32163
  81642c:	1885883a 	add	r2,r3,r2
  816430:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  816434:	e0fffd03 	ldbu	r3,-12(fp)
  816438:	d0a09744 	addi	r2,gp,-32163
  81643c:	1885883a 	add	r2,r3,r2
  816440:	10800003 	ldbu	r2,0(r2)
  816444:	10803fcc 	andi	r2,r2,255
  816448:	1000071e 	bne	r2,zero,816468 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81644c:	d0a09a17 	ldw	r2,-32152(gp)
  816450:	10800d83 	ldbu	r2,54(r2)
  816454:	0084303a 	nor	r2,zero,r2
  816458:	1007883a 	mov	r3,r2
  81645c:	d0a09703 	ldbu	r2,-32164(gp)
  816460:	1884703a 	and	r2,r3,r2
  816464:	d0a09705 	stb	r2,-32164(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  816468:	d0a09a17 	ldw	r2,-32152(gp)
  81646c:	e0ffff0b 	ldhu	r3,-4(fp)
  816470:	10c00b8d 	sth	r3,46(r2)
  816474:	e0bffb17 	ldw	r2,-20(fp)
  816478:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81647c:	e0bffc17 	ldw	r2,-16(fp)
  816480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  816484:	08109f80 	call	8109f8 <OS_Sched>
  816488:	00000106 	br	816490 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  81648c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  816490:	e037883a 	mov	sp,fp
  816494:	dfc00117 	ldw	ra,4(sp)
  816498:	df000017 	ldw	fp,0(sp)
  81649c:	dec00204 	addi	sp,sp,8
  8164a0:	f800283a 	ret

008164a4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  8164a4:	defff704 	addi	sp,sp,-36
  8164a8:	dfc00815 	stw	ra,32(sp)
  8164ac:	df000715 	stw	fp,28(sp)
  8164b0:	dc000615 	stw	r16,24(sp)
  8164b4:	df000704 	addi	fp,sp,28
  8164b8:	2011883a 	mov	r8,r4
  8164bc:	2809883a 	mov	r4,r5
  8164c0:	3007883a 	mov	r3,r6
  8164c4:	3805883a 	mov	r2,r7
  8164c8:	e23ffb05 	stb	r8,-20(fp)
  8164cc:	e13ffc05 	stb	r4,-16(fp)
  8164d0:	e0fffd05 	stb	r3,-12(fp)
  8164d4:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8164d8:	d0a09903 	ldbu	r2,-32156(gp)
  8164dc:	10803fcc 	andi	r2,r2,255
  8164e0:	10000226 	beq	r2,zero,8164ec <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  8164e4:	00801544 	movi	r2,85
  8164e8:	00004706 	br	816608 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  8164ec:	e0bffb03 	ldbu	r2,-20(fp)
  8164f0:	1000081e 	bne	r2,zero,816514 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  8164f4:	e0bffc03 	ldbu	r2,-16(fp)
  8164f8:	1000061e 	bne	r2,zero,816514 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  8164fc:	e0bffd03 	ldbu	r2,-12(fp)
  816500:	1000041e 	bne	r2,zero,816514 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  816504:	e0bffe0b 	ldhu	r2,-8(fp)
  816508:	1000021e 	bne	r2,zero,816514 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  81650c:	00801504 	movi	r2,84
  816510:	00003d06 	br	816608 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  816514:	e0bffc03 	ldbu	r2,-16(fp)
  816518:	10800f30 	cmpltui	r2,r2,60
  81651c:	1000021e 	bne	r2,zero,816528 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  816520:	00801444 	movi	r2,81
  816524:	00003806 	br	816608 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  816528:	e0bffd03 	ldbu	r2,-12(fp)
  81652c:	10800f30 	cmpltui	r2,r2,60
  816530:	1000021e 	bne	r2,zero,81653c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  816534:	00801484 	movi	r2,82
  816538:	00003306 	br	816608 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  81653c:	e0bffe0b 	ldhu	r2,-8(fp)
  816540:	1080fa30 	cmpltui	r2,r2,1000
  816544:	1000021e 	bne	r2,zero,816550 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  816548:	008014c4 	movi	r2,83
  81654c:	00002e06 	br	816608 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  816550:	e0bffb03 	ldbu	r2,-20(fp)
  816554:	01438404 	movi	r5,3600
  816558:	1009883a 	mov	r4,r2
  81655c:	080b99c0 	call	80b99c <__mulsi3>
  816560:	1021883a 	mov	r16,r2
  816564:	e0bffc03 	ldbu	r2,-16(fp)
  816568:	01400f04 	movi	r5,60
  81656c:	1009883a 	mov	r4,r2
  816570:	080b99c0 	call	80b99c <__mulsi3>
  816574:	8087883a 	add	r3,r16,r2
  816578:	e0bffd03 	ldbu	r2,-12(fp)
  81657c:	1885883a 	add	r2,r3,r2
  816580:	0140fa04 	movi	r5,1000
  816584:	1009883a 	mov	r4,r2
  816588:	080b99c0 	call	80b99c <__mulsi3>
  81658c:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  816590:	e0bffe0b 	ldhu	r2,-8(fp)
  816594:	0140fa04 	movi	r5,1000
  816598:	1009883a 	mov	r4,r2
  81659c:	080b99c0 	call	80b99c <__mulsi3>
  8165a0:	0140fa04 	movi	r5,1000
  8165a4:	1009883a 	mov	r4,r2
  8165a8:	08012980 	call	801298 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  8165ac:	8085883a 	add	r2,r16,r2
  8165b0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  8165b4:	e0bffa17 	ldw	r2,-24(fp)
  8165b8:	1004d43a 	srli	r2,r2,16
  8165bc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  8165c0:	e0bffa17 	ldw	r2,-24(fp)
  8165c4:	10bfffcc 	andi	r2,r2,65535
  8165c8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  8165cc:	e0bffa17 	ldw	r2,-24(fp)
  8165d0:	10bfffcc 	andi	r2,r2,65535
  8165d4:	1009883a 	mov	r4,r2
  8165d8:	08163a00 	call	8163a0 <OSTimeDly>
    while (loops > 0) {
  8165dc:	00000706 	br	8165fc <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  8165e0:	01200014 	movui	r4,32768
  8165e4:	08163a00 	call	8163a0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8165e8:	01200014 	movui	r4,32768
  8165ec:	08163a00 	call	8163a0 <OSTimeDly>
        loops--;
  8165f0:	e0bff90b 	ldhu	r2,-28(fp)
  8165f4:	10bfffc4 	addi	r2,r2,-1
  8165f8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  8165fc:	e0bff90b 	ldhu	r2,-28(fp)
  816600:	103ff71e 	bne	r2,zero,8165e0 <__alt_mem_epcs_flash_controller_0+0xff80d5e0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  816604:	0005883a 	mov	r2,zero
}
  816608:	e6ffff04 	addi	sp,fp,-4
  81660c:	dfc00217 	ldw	ra,8(sp)
  816610:	df000117 	ldw	fp,4(sp)
  816614:	dc000017 	ldw	r16,0(sp)
  816618:	dec00304 	addi	sp,sp,12
  81661c:	f800283a 	ret

00816620 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  816620:	defff504 	addi	sp,sp,-44
  816624:	dfc00a15 	stw	ra,40(sp)
  816628:	df000915 	stw	fp,36(sp)
  81662c:	df000904 	addi	fp,sp,36
  816630:	2005883a 	mov	r2,r4
  816634:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816638:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  81663c:	e0bfff03 	ldbu	r2,-4(fp)
  816640:	10800530 	cmpltui	r2,r2,20
  816644:	1000021e 	bne	r2,zero,816650 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  816648:	00800a84 	movi	r2,42
  81664c:	00006406 	br	8167e0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816650:	0005303a 	rdctl	r2,status
  816654:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816658:	e0fffe17 	ldw	r3,-8(fp)
  81665c:	00bfff84 	movi	r2,-2
  816660:	1884703a 	and	r2,r3,r2
  816664:	1001703a 	wrctl	status,r2
  
  return context;
  816668:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  81666c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  816670:	e0ffff03 	ldbu	r3,-4(fp)
  816674:	008020f4 	movhi	r2,131
  816678:	10a16904 	addi	r2,r2,-31324
  81667c:	18c7883a 	add	r3,r3,r3
  816680:	18c7883a 	add	r3,r3,r3
  816684:	10c5883a 	add	r2,r2,r3
  816688:	10800017 	ldw	r2,0(r2)
  81668c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  816690:	e0bff917 	ldw	r2,-28(fp)
  816694:	1000061e 	bne	r2,zero,8166b0 <OSTimeDlyResume+0x90>
  816698:	e0bff717 	ldw	r2,-36(fp)
  81669c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8166a0:	e0bff817 	ldw	r2,-32(fp)
  8166a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8166a8:	008010c4 	movi	r2,67
  8166ac:	00004c06 	br	8167e0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8166b0:	e0bff917 	ldw	r2,-28(fp)
  8166b4:	10800058 	cmpnei	r2,r2,1
  8166b8:	1000061e 	bne	r2,zero,8166d4 <OSTimeDlyResume+0xb4>
  8166bc:	e0bff717 	ldw	r2,-36(fp)
  8166c0:	e0bffa15 	stw	r2,-24(fp)
  8166c4:	e0bffa17 	ldw	r2,-24(fp)
  8166c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8166cc:	008010c4 	movi	r2,67
  8166d0:	00004306 	br	8167e0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  8166d4:	e0bff917 	ldw	r2,-28(fp)
  8166d8:	10800b8b 	ldhu	r2,46(r2)
  8166dc:	10bfffcc 	andi	r2,r2,65535
  8166e0:	1000061e 	bne	r2,zero,8166fc <OSTimeDlyResume+0xdc>
  8166e4:	e0bff717 	ldw	r2,-36(fp)
  8166e8:	e0bffb15 	stw	r2,-20(fp)
  8166ec:	e0bffb17 	ldw	r2,-20(fp)
  8166f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  8166f4:	00801404 	movi	r2,80
  8166f8:	00003906 	br	8167e0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  8166fc:	e0bff917 	ldw	r2,-28(fp)
  816700:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  816704:	e0bff917 	ldw	r2,-28(fp)
  816708:	10800c03 	ldbu	r2,48(r2)
  81670c:	10803fcc 	andi	r2,r2,255
  816710:	10800dcc 	andi	r2,r2,55
  816714:	10000b26 	beq	r2,zero,816744 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  816718:	e0bff917 	ldw	r2,-28(fp)
  81671c:	10c00c03 	ldbu	r3,48(r2)
  816720:	00bff204 	movi	r2,-56
  816724:	1884703a 	and	r2,r3,r2
  816728:	1007883a 	mov	r3,r2
  81672c:	e0bff917 	ldw	r2,-28(fp)
  816730:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  816734:	e0bff917 	ldw	r2,-28(fp)
  816738:	00c00044 	movi	r3,1
  81673c:	10c00c45 	stb	r3,49(r2)
  816740:	00000206 	br	81674c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  816744:	e0bff917 	ldw	r2,-28(fp)
  816748:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  81674c:	e0bff917 	ldw	r2,-28(fp)
  816750:	10800c03 	ldbu	r2,48(r2)
  816754:	10803fcc 	andi	r2,r2,255
  816758:	1080020c 	andi	r2,r2,8
  81675c:	10001b1e 	bne	r2,zero,8167cc <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  816760:	e0bff917 	ldw	r2,-28(fp)
  816764:	10c00d83 	ldbu	r3,54(r2)
  816768:	d0a09703 	ldbu	r2,-32164(gp)
  81676c:	1884b03a 	or	r2,r3,r2
  816770:	d0a09705 	stb	r2,-32164(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  816774:	e0bff917 	ldw	r2,-28(fp)
  816778:	10800d03 	ldbu	r2,52(r2)
  81677c:	10c03fcc 	andi	r3,r2,255
  816780:	e0bff917 	ldw	r2,-28(fp)
  816784:	10800d03 	ldbu	r2,52(r2)
  816788:	11003fcc 	andi	r4,r2,255
  81678c:	d0a09744 	addi	r2,gp,-32163
  816790:	2085883a 	add	r2,r4,r2
  816794:	11000003 	ldbu	r4,0(r2)
  816798:	e0bff917 	ldw	r2,-28(fp)
  81679c:	10800d43 	ldbu	r2,53(r2)
  8167a0:	2084b03a 	or	r2,r4,r2
  8167a4:	1009883a 	mov	r4,r2
  8167a8:	d0a09744 	addi	r2,gp,-32163
  8167ac:	1885883a 	add	r2,r3,r2
  8167b0:	11000005 	stb	r4,0(r2)
  8167b4:	e0bff717 	ldw	r2,-36(fp)
  8167b8:	e0bffc15 	stw	r2,-16(fp)
  8167bc:	e0bffc17 	ldw	r2,-16(fp)
  8167c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  8167c4:	08109f80 	call	8109f8 <OS_Sched>
  8167c8:	00000406 	br	8167dc <OSTimeDlyResume+0x1bc>
  8167cc:	e0bff717 	ldw	r2,-36(fp)
  8167d0:	e0bffd15 	stw	r2,-12(fp)
  8167d4:	e0bffd17 	ldw	r2,-12(fp)
  8167d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  8167dc:	0005883a 	mov	r2,zero
}
  8167e0:	e037883a 	mov	sp,fp
  8167e4:	dfc00117 	ldw	ra,4(sp)
  8167e8:	df000017 	ldw	fp,0(sp)
  8167ec:	dec00204 	addi	sp,sp,8
  8167f0:	f800283a 	ret

008167f4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  8167f4:	defffb04 	addi	sp,sp,-20
  8167f8:	df000415 	stw	fp,16(sp)
  8167fc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816800:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816804:	0005303a 	rdctl	r2,status
  816808:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81680c:	e0fffe17 	ldw	r3,-8(fp)
  816810:	00bfff84 	movi	r2,-2
  816814:	1884703a 	and	r2,r3,r2
  816818:	1001703a 	wrctl	status,r2
  
  return context;
  81681c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  816820:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  816824:	d0a09b17 	ldw	r2,-32148(gp)
  816828:	e0bffd15 	stw	r2,-12(fp)
  81682c:	e0bffc17 	ldw	r2,-16(fp)
  816830:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816834:	e0bfff17 	ldw	r2,-4(fp)
  816838:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  81683c:	e0bffd17 	ldw	r2,-12(fp)
}
  816840:	e037883a 	mov	sp,fp
  816844:	df000017 	ldw	fp,0(sp)
  816848:	dec00104 	addi	sp,sp,4
  81684c:	f800283a 	ret

00816850 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  816850:	defffb04 	addi	sp,sp,-20
  816854:	df000415 	stw	fp,16(sp)
  816858:	df000404 	addi	fp,sp,16
  81685c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816860:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816864:	0005303a 	rdctl	r2,status
  816868:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81686c:	e0fffd17 	ldw	r3,-12(fp)
  816870:	00bfff84 	movi	r2,-2
  816874:	1884703a 	and	r2,r3,r2
  816878:	1001703a 	wrctl	status,r2
  
  return context;
  81687c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  816880:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  816884:	e0bfff17 	ldw	r2,-4(fp)
  816888:	d0a09b15 	stw	r2,-32148(gp)
  81688c:	e0bffc17 	ldw	r2,-16(fp)
  816890:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816894:	e0bffe17 	ldw	r2,-8(fp)
  816898:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  81689c:	0001883a 	nop
  8168a0:	e037883a 	mov	sp,fp
  8168a4:	df000017 	ldw	fp,0(sp)
  8168a8:	dec00104 	addi	sp,sp,4
  8168ac:	f800283a 	ret

008168b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8168b0:	defffd04 	addi	sp,sp,-12
  8168b4:	dfc00215 	stw	ra,8(sp)
  8168b8:	df000115 	stw	fp,4(sp)
  8168bc:	df000104 	addi	fp,sp,4
  8168c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8168c4:	d1603804 	addi	r5,gp,-32544
  8168c8:	e13fff17 	ldw	r4,-4(fp)
  8168cc:	081a6680 	call	81a668 <alt_dev_llist_insert>
}
  8168d0:	e037883a 	mov	sp,fp
  8168d4:	dfc00117 	ldw	ra,4(sp)
  8168d8:	df000017 	ldw	fp,0(sp)
  8168dc:	dec00204 	addi	sp,sp,8
  8168e0:	f800283a 	ret

008168e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8168e4:	defffd04 	addi	sp,sp,-12
  8168e8:	dfc00215 	stw	ra,8(sp)
  8168ec:	df000115 	stw	fp,4(sp)
  8168f0:	df000104 	addi	fp,sp,4
  8168f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  8168f8:	081af2c0 	call	81af2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8168fc:	00800044 	movi	r2,1
  816900:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  816904:	0001883a 	nop
  816908:	e037883a 	mov	sp,fp
  81690c:	dfc00117 	ldw	ra,4(sp)
  816910:	df000017 	ldw	fp,0(sp)
  816914:	dec00204 	addi	sp,sp,8
  816918:	f800283a 	ret

0081691c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81691c:	defffe04 	addi	sp,sp,-8
  816920:	dfc00115 	stw	ra,4(sp)
  816924:	df000015 	stw	fp,0(sp)
  816928:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81692c:	01c0fa04 	movi	r7,1000
  816930:	01800104 	movi	r6,4
  816934:	000b883a 	mov	r5,zero
  816938:	01004074 	movhi	r4,257
  81693c:	21281004 	addi	r4,r4,-24512
  816940:	08182780 	call	818278 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
  816944:	010020b4 	movhi	r4,130
  816948:	21333d04 	addi	r4,r4,-13068
  81694c:	0816a0c0 	call	816a0c <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  816950:	000d883a 	mov	r6,zero
  816954:	000b883a 	mov	r5,zero
  816958:	010020b4 	movhi	r4,130
  81695c:	21337a04 	addi	r4,r4,-12824
  816960:	08176380 	call	817638 <altera_avalon_jtag_uart_init>
  816964:	010020b4 	movhi	r4,130
  816968:	21337004 	addi	r4,r4,-12864
  81696c:	08168b00 	call	8168b0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  816970:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( WIFI_UART, wifi_uart);
  816974:	01800044 	movi	r6,1
  816978:	000b883a 	mov	r5,zero
  81697c:	010020b4 	movhi	r4,130
  816980:	21379504 	addi	r4,r4,-8620
  816984:	08184040 	call	818404 <altera_avalon_uart_init>
  816988:	010020b4 	movhi	r4,130
  81698c:	21378b04 	addi	r4,r4,-8660
  816990:	08168b00 	call	8168b0 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
  816994:	010020b4 	movhi	r4,130
  816998:	2137bf04 	addi	r4,r4,-8452
  81699c:	081a8880 	call	81a888 <alt_fs_reg>
    FIFOED_AVALON_UART_INIT ( CAM_UART, cam_uart);
  8169a0:	018001c4 	movi	r6,7
  8169a4:	000b883a 	mov	r5,zero
  8169a8:	010020b4 	movhi	r4,130
  8169ac:	2137d304 	addi	r4,r4,-8372
  8169b0:	081a1900 	call	81a190 <fifoed_avalon_uart_init>
  8169b4:	010020b4 	movhi	r4,130
  8169b8:	2137c904 	addi	r4,r4,-8412
  8169bc:	08168b00 	call	8168b0 <alt_dev_reg>
}
  8169c0:	0001883a 	nop
  8169c4:	e037883a 	mov	sp,fp
  8169c8:	dfc00117 	ldw	ra,4(sp)
  8169cc:	df000017 	ldw	fp,0(sp)
  8169d0:	dec00204 	addi	sp,sp,8
  8169d4:	f800283a 	ret

008169d8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  8169d8:	defffd04 	addi	sp,sp,-12
  8169dc:	dfc00215 	stw	ra,8(sp)
  8169e0:	df000115 	stw	fp,4(sp)
  8169e4:	df000104 	addi	fp,sp,4
  8169e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  8169ec:	d1606f04 	addi	r5,gp,-32324
  8169f0:	e13fff17 	ldw	r4,-4(fp)
  8169f4:	081a6680 	call	81a668 <alt_dev_llist_insert>
}
  8169f8:	e037883a 	mov	sp,fp
  8169fc:	dfc00117 	ldw	ra,4(sp)
  816a00:	df000017 	ldw	fp,0(sp)
  816a04:	dec00204 	addi	sp,sp,8
  816a08:	f800283a 	ret

00816a0c <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  816a0c:	defffc04 	addi	sp,sp,-16
  816a10:	dfc00315 	stw	ra,12(sp)
  816a14:	df000215 	stw	fp,8(sp)
  816a18:	df000204 	addi	fp,sp,8
  816a1c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  816a20:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  816a24:	e13fff17 	ldw	r4,-4(fp)
  816a28:	0816a600 	call	816a60 <alt_epcs_flash_query>
  816a2c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  816a30:	e0bffe17 	ldw	r2,-8(fp)
  816a34:	1000041e 	bne	r2,zero,816a48 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  816a38:	e0bfff17 	ldw	r2,-4(fp)
  816a3c:	1009883a 	mov	r4,r2
  816a40:	08169d80 	call	8169d8 <alt_flash_device_register>
  816a44:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  816a48:	e0bffe17 	ldw	r2,-8(fp)
}
  816a4c:	e037883a 	mov	sp,fp
  816a50:	dfc00117 	ldw	ra,4(sp)
  816a54:	df000017 	ldw	fp,0(sp)
  816a58:	dec00204 	addi	sp,sp,8
  816a5c:	f800283a 	ret

00816a60 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  816a60:	defffc04 	addi	sp,sp,-16
  816a64:	dfc00315 	stw	ra,12(sp)
  816a68:	df000215 	stw	fp,8(sp)
  816a6c:	df000204 	addi	fp,sp,8
  816a70:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  816a74:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  816a78:	e0bfff17 	ldw	r2,-4(fp)
  816a7c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  816a80:	e0bfff17 	ldw	r2,-4(fp)
  816a84:	10802e17 	ldw	r2,184(r2)
  816a88:	1009883a 	mov	r4,r2
  816a8c:	08197680 	call	819768 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  816a90:	10c03fcc 	andi	r3,r2,255
  816a94:	e0bfff17 	ldw	r2,-4(fp)
  816a98:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  816a9c:	e0bfff17 	ldw	r2,-4(fp)
  816aa0:	10803017 	ldw	r2,192(r2)
  816aa4:	10800598 	cmpnei	r2,r2,22
  816aa8:	10000a1e 	bne	r2,zero,816ad4 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  816aac:	e0bfff17 	ldw	r2,-4(fp)
  816ab0:	00c02034 	movhi	r3,128
  816ab4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  816ab8:	e0bfff17 	ldw	r2,-4(fp)
  816abc:	00c02004 	movi	r3,128
  816ac0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  816ac4:	e0bfff17 	ldw	r2,-4(fp)
  816ac8:	00c00074 	movhi	r3,1
  816acc:	10c01015 	stw	r3,64(r2)
  816ad0:	0000ce06 	br	816e0c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  816ad4:	e0bfff17 	ldw	r2,-4(fp)
  816ad8:	10803017 	ldw	r2,192(r2)
  816adc:	10800518 	cmpnei	r2,r2,20
  816ae0:	10000a1e 	bne	r2,zero,816b0c <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  816ae4:	e0bfff17 	ldw	r2,-4(fp)
  816ae8:	00c00834 	movhi	r3,32
  816aec:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  816af0:	e0bfff17 	ldw	r2,-4(fp)
  816af4:	00c00804 	movi	r3,32
  816af8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  816afc:	e0bfff17 	ldw	r2,-4(fp)
  816b00:	00c00074 	movhi	r3,1
  816b04:	10c01015 	stw	r3,64(r2)
  816b08:	0000c006 	br	816e0c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  816b0c:	e0bfff17 	ldw	r2,-4(fp)
  816b10:	10803017 	ldw	r2,192(r2)
  816b14:	108004d8 	cmpnei	r2,r2,19
  816b18:	10000a1e 	bne	r2,zero,816b44 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  816b1c:	e0bfff17 	ldw	r2,-4(fp)
  816b20:	00c00434 	movhi	r3,16
  816b24:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  816b28:	e0bfff17 	ldw	r2,-4(fp)
  816b2c:	00c00404 	movi	r3,16
  816b30:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  816b34:	e0bfff17 	ldw	r2,-4(fp)
  816b38:	00c00074 	movhi	r3,1
  816b3c:	10c01015 	stw	r3,64(r2)
  816b40:	0000b206 	br	816e0c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  816b44:	e0bfff17 	ldw	r2,-4(fp)
  816b48:	10803017 	ldw	r2,192(r2)
  816b4c:	10800498 	cmpnei	r2,r2,18
  816b50:	10000a1e 	bne	r2,zero,816b7c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  816b54:	e0bfff17 	ldw	r2,-4(fp)
  816b58:	00c00234 	movhi	r3,8
  816b5c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  816b60:	e0bfff17 	ldw	r2,-4(fp)
  816b64:	00c00204 	movi	r3,8
  816b68:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  816b6c:	e0bfff17 	ldw	r2,-4(fp)
  816b70:	00c00074 	movhi	r3,1
  816b74:	10c01015 	stw	r3,64(r2)
  816b78:	0000a406 	br	816e0c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  816b7c:	e0bfff17 	ldw	r2,-4(fp)
  816b80:	10803017 	ldw	r2,192(r2)
  816b84:	10800418 	cmpnei	r2,r2,16
  816b88:	10000a1e 	bne	r2,zero,816bb4 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  816b8c:	e0bfff17 	ldw	r2,-4(fp)
  816b90:	00c000b4 	movhi	r3,2
  816b94:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  816b98:	e0bfff17 	ldw	r2,-4(fp)
  816b9c:	00c00104 	movi	r3,4
  816ba0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  816ba4:	e0bfff17 	ldw	r2,-4(fp)
  816ba8:	00e00014 	movui	r3,32768
  816bac:	10c01015 	stw	r3,64(r2)
  816bb0:	00009606 	br	816e0c <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  816bb4:	e0bfff17 	ldw	r2,-4(fp)
  816bb8:	10802e17 	ldw	r2,184(r2)
  816bbc:	1009883a 	mov	r4,r2
  816bc0:	08197d00 	call	8197d0 <epcs_read_device_id>
  816bc4:	1007883a 	mov	r3,r2
  816bc8:	e0bfff17 	ldw	r2,-4(fp)
  816bcc:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
  816bd0:	e0bfff17 	ldw	r2,-4(fp)
  816bd4:	10c03017 	ldw	r3,192(r2)
  816bd8:	00804034 	movhi	r2,256
  816bdc:	10bfffc4 	addi	r2,r2,-1
  816be0:	1886703a 	and	r3,r3,r2
  816be4:	00800874 	movhi	r2,33
  816be8:	10ae8544 	addi	r2,r2,-17899
  816bec:	18800a1e 	bne	r3,r2,816c18 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  816bf0:	e0bfff17 	ldw	r2,-4(fp)
  816bf4:	00c00834 	movhi	r3,32
  816bf8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
  816bfc:	e0bfff17 	ldw	r2,-4(fp)
  816c00:	00c00804 	movi	r3,32
  816c04:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816c08:	e0bfff17 	ldw	r2,-4(fp)
  816c0c:	00c00074 	movhi	r3,1
  816c10:	10c01015 	stw	r3,64(r2)
  816c14:	00007d06 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
  816c18:	e0bfff17 	ldw	r2,-4(fp)
  816c1c:	10c03017 	ldw	r3,192(r2)
  816c20:	00804034 	movhi	r2,256
  816c24:	10bfffc4 	addi	r2,r2,-1
  816c28:	1886703a 	and	r3,r3,r2
  816c2c:	00800874 	movhi	r2,33
  816c30:	10ae8584 	addi	r2,r2,-17898
  816c34:	18800a1e 	bne	r3,r2,816c60 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
  816c38:	e0bfff17 	ldw	r2,-4(fp)
  816c3c:	00c01034 	movhi	r3,64
  816c40:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
  816c44:	e0bfff17 	ldw	r2,-4(fp)
  816c48:	00c01004 	movi	r3,64
  816c4c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816c50:	e0bfff17 	ldw	r2,-4(fp)
  816c54:	00c00074 	movhi	r3,1
  816c58:	10c01015 	stw	r3,64(r2)
  816c5c:	00006b06 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
  816c60:	e0bfff17 	ldw	r2,-4(fp)
  816c64:	10c03017 	ldw	r3,192(r2)
  816c68:	00804034 	movhi	r2,256
  816c6c:	10bfffc4 	addi	r2,r2,-1
  816c70:	1886703a 	and	r3,r3,r2
  816c74:	00800874 	movhi	r2,33
  816c78:	10ae85c4 	addi	r2,r2,-17897
  816c7c:	18800a1e 	bne	r3,r2,816ca8 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  816c80:	e0bfff17 	ldw	r2,-4(fp)
  816c84:	00c02034 	movhi	r3,128
  816c88:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
  816c8c:	e0bfff17 	ldw	r2,-4(fp)
  816c90:	00c02004 	movi	r3,128
  816c94:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816c98:	e0bfff17 	ldw	r2,-4(fp)
  816c9c:	00c00074 	movhi	r3,1
  816ca0:	10c01015 	stw	r3,64(r2)
  816ca4:	00005906 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  816ca8:	e0bfff17 	ldw	r2,-4(fp)
  816cac:	10c03017 	ldw	r3,192(r2)
  816cb0:	00804034 	movhi	r2,256
  816cb4:	10bfffc4 	addi	r2,r2,-1
  816cb8:	1886703a 	and	r3,r3,r2
  816cbc:	00800874 	movhi	r2,33
  816cc0:	10ae8604 	addi	r2,r2,-17896
  816cc4:	18800a1e 	bne	r3,r2,816cf0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  816cc8:	e0bfff17 	ldw	r2,-4(fp)
  816ccc:	00c04034 	movhi	r3,256
  816cd0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  816cd4:	e0bfff17 	ldw	r2,-4(fp)
  816cd8:	00c04004 	movi	r3,256
  816cdc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816ce0:	e0bfff17 	ldw	r2,-4(fp)
  816ce4:	00c00074 	movhi	r3,1
  816ce8:	10c01015 	stw	r3,64(r2)
  816cec:	00004706 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  816cf0:	e0bfff17 	ldw	r2,-4(fp)
  816cf4:	10803017 	ldw	r2,192(r2)
  816cf8:	10803fcc 	andi	r2,r2,255
  816cfc:	10800618 	cmpnei	r2,r2,24
  816d00:	10000a1e 	bne	r2,zero,816d2c <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  816d04:	e0bfff17 	ldw	r2,-4(fp)
  816d08:	00c04034 	movhi	r3,256
  816d0c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  816d10:	e0bfff17 	ldw	r2,-4(fp)
  816d14:	00c01004 	movi	r3,64
  816d18:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  816d1c:	e0bfff17 	ldw	r2,-4(fp)
  816d20:	00c00134 	movhi	r3,4
  816d24:	10c01015 	stw	r3,64(r2)
  816d28:	00003806 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  816d2c:	e0bfff17 	ldw	r2,-4(fp)
  816d30:	10803017 	ldw	r2,192(r2)
  816d34:	10803fcc 	andi	r2,r2,255
  816d38:	10800658 	cmpnei	r2,r2,25
  816d3c:	10000d1e 	bne	r2,zero,816d74 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  816d40:	e0bfff17 	ldw	r2,-4(fp)
  816d44:	00c08034 	movhi	r3,512
  816d48:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  816d4c:	e0bfff17 	ldw	r2,-4(fp)
  816d50:	00c08004 	movi	r3,512
  816d54:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816d58:	e0bfff17 	ldw	r2,-4(fp)
  816d5c:	00c00074 	movhi	r3,1
  816d60:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  816d64:	e0bfff17 	ldw	r2,-4(fp)
  816d68:	00c00044 	movi	r3,1
  816d6c:	10c03215 	stw	r3,200(r2)
  816d70:	00002606 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
  816d74:	e0bfff17 	ldw	r2,-4(fp)
  816d78:	10803017 	ldw	r2,192(r2)
  816d7c:	10803fcc 	andi	r2,r2,255
  816d80:	10800818 	cmpnei	r2,r2,32
  816d84:	10000d1e 	bne	r2,zero,816dbc <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
  816d88:	e0bfff17 	ldw	r2,-4(fp)
  816d8c:	00c10034 	movhi	r3,1024
  816d90:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
  816d94:	e0bfff17 	ldw	r2,-4(fp)
  816d98:	00c10004 	movi	r3,1024
  816d9c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816da0:	e0bfff17 	ldw	r2,-4(fp)
  816da4:	00c00074 	movhi	r3,1
  816da8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  816dac:	e0bfff17 	ldw	r2,-4(fp)
  816db0:	00c00044 	movi	r3,1
  816db4:	10c03215 	stw	r3,200(r2)
  816db8:	00001406 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
  816dbc:	e0bfff17 	ldw	r2,-4(fp)
  816dc0:	10803017 	ldw	r2,192(r2)
  816dc4:	10803fcc 	andi	r2,r2,255
  816dc8:	10800858 	cmpnei	r2,r2,33
  816dcc:	10000d1e 	bne	r2,zero,816e04 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
  816dd0:	e0bfff17 	ldw	r2,-4(fp)
  816dd4:	00c20034 	movhi	r3,2048
  816dd8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
  816ddc:	e0bfff17 	ldw	r2,-4(fp)
  816de0:	00c20004 	movi	r3,2048
  816de4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  816de8:	e0bfff17 	ldw	r2,-4(fp)
  816dec:	00c00074 	movhi	r3,1
  816df0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
  816df4:	e0bfff17 	ldw	r2,-4(fp)
  816df8:	00c00044 	movi	r3,1
  816dfc:	10c03215 	stw	r3,200(r2)
  816e00:	00000206 	br	816e0c <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  816e04:	00bffb44 	movi	r2,-19
  816e08:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  816e0c:	e0bfff17 	ldw	r2,-4(fp)
  816e10:	10800e17 	ldw	r2,56(r2)
  816e14:	1007883a 	mov	r3,r2
  816e18:	e0bfff17 	ldw	r2,-4(fp)
  816e1c:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  816e20:	e0bfff17 	ldw	r2,-4(fp)
  816e24:	00c00044 	movi	r3,1
  816e28:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  816e2c:	e0bfff17 	ldw	r2,-4(fp)
  816e30:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  816e34:	e0bfff17 	ldw	r2,-4(fp)
  816e38:	00c04004 	movi	r3,256
  816e3c:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  816e40:	e0bffe17 	ldw	r2,-8(fp)
}
  816e44:	e037883a 	mov	sp,fp
  816e48:	dfc00117 	ldw	ra,4(sp)
  816e4c:	df000017 	ldw	fp,0(sp)
  816e50:	dec00204 	addi	sp,sp,8
  816e54:	f800283a 	ret

00816e58 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  816e58:	deffee04 	addi	sp,sp,-72
  816e5c:	dfc01115 	stw	ra,68(sp)
  816e60:	df001015 	stw	fp,64(sp)
  816e64:	df001004 	addi	fp,sp,64
  816e68:	e13ffc15 	stw	r4,-16(fp)
  816e6c:	e17ffd15 	stw	r5,-12(fp)
  816e70:	e1bffe15 	stw	r6,-8(fp)
  816e74:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  816e78:	00800804 	movi	r2,32
  816e7c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  816e80:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  816e84:	00002706 	br	816f24 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  816e88:	e0fff117 	ldw	r3,-60(fp)
  816e8c:	e0bfff17 	ldw	r2,-4(fp)
  816e90:	1880012e 	bgeu	r3,r2,816e98 <alt_epcs_flash_memcmp+0x40>
  816e94:	1805883a 	mov	r2,r3
  816e98:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  816e9c:	e0fffe17 	ldw	r3,-8(fp)
  816ea0:	e0bff017 	ldw	r2,-64(fp)
  816ea4:	1885883a 	add	r2,r3,r2
  816ea8:	e0fff404 	addi	r3,fp,-48
  816eac:	e1fff217 	ldw	r7,-56(fp)
  816eb0:	180d883a 	mov	r6,r3
  816eb4:	100b883a 	mov	r5,r2
  816eb8:	e13ffc17 	ldw	r4,-16(fp)
  816ebc:	081743c0 	call	81743c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  816ec0:	1000020e 	bge	r2,zero,816ecc <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  816ec4:	00bfffc4 	movi	r2,-1
  816ec8:	00001906 	br	816f30 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  816ecc:	e0bff017 	ldw	r2,-64(fp)
  816ed0:	e0fffd17 	ldw	r3,-12(fp)
  816ed4:	1885883a 	add	r2,r3,r2
  816ed8:	e13ff217 	ldw	r4,-56(fp)
  816edc:	e0fff404 	addi	r3,fp,-48
  816ee0:	200d883a 	mov	r6,r4
  816ee4:	180b883a 	mov	r5,r3
  816ee8:	1009883a 	mov	r4,r2
  816eec:	081b77c0 	call	81b77c <memcmp>
  816ef0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  816ef4:	e0bff317 	ldw	r2,-52(fp)
  816ef8:	10000226 	beq	r2,zero,816f04 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
  816efc:	e0bff317 	ldw	r2,-52(fp)
  816f00:	00000b06 	br	816f30 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
  816f04:	e0bff217 	ldw	r2,-56(fp)
  816f08:	e0ffff17 	ldw	r3,-4(fp)
  816f0c:	1885c83a 	sub	r2,r3,r2
  816f10:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  816f14:	e0fff017 	ldw	r3,-64(fp)
  816f18:	e0bff217 	ldw	r2,-56(fp)
  816f1c:	1885883a 	add	r2,r3,r2
  816f20:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  816f24:	e0bfff17 	ldw	r2,-4(fp)
  816f28:	103fd71e 	bne	r2,zero,816e88 <__alt_mem_epcs_flash_controller_0+0xff80de88>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  816f2c:	0005883a 	mov	r2,zero
}
  816f30:	e037883a 	mov	sp,fp
  816f34:	dfc00117 	ldw	ra,4(sp)
  816f38:	df000017 	ldw	fp,0(sp)
  816f3c:	dec00204 	addi	sp,sp,8
  816f40:	f800283a 	ret

00816f44 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  816f44:	defff404 	addi	sp,sp,-48
  816f48:	dfc00b15 	stw	ra,44(sp)
  816f4c:	df000a15 	stw	fp,40(sp)
  816f50:	df000a04 	addi	fp,sp,40
  816f54:	e13ffc15 	stw	r4,-16(fp)
  816f58:	e17ffd15 	stw	r5,-12(fp)
  816f5c:	e1bffe15 	stw	r6,-8(fp)
  816f60:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  816f64:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  816f68:	e03ff815 	stw	zero,-32(fp)
  816f6c:	00008306 	br	81717c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  816f70:	e0fffc17 	ldw	r3,-16(fp)
  816f74:	e0bff817 	ldw	r2,-32(fp)
  816f78:	1004913a 	slli	r2,r2,4
  816f7c:	1885883a 	add	r2,r3,r2
  816f80:	10800d04 	addi	r2,r2,52
  816f84:	10800017 	ldw	r2,0(r2)
  816f88:	e0fffd17 	ldw	r3,-12(fp)
  816f8c:	18807816 	blt	r3,r2,817170 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  816f90:	e0fffc17 	ldw	r3,-16(fp)
  816f94:	e0bff817 	ldw	r2,-32(fp)
  816f98:	1004913a 	slli	r2,r2,4
  816f9c:	1885883a 	add	r2,r3,r2
  816fa0:	10800d04 	addi	r2,r2,52
  816fa4:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  816fa8:	e13ffc17 	ldw	r4,-16(fp)
  816fac:	e0bff817 	ldw	r2,-32(fp)
  816fb0:	1004913a 	slli	r2,r2,4
  816fb4:	2085883a 	add	r2,r4,r2
  816fb8:	10800e04 	addi	r2,r2,56
  816fbc:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  816fc0:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  816fc4:	e0fffd17 	ldw	r3,-12(fp)
  816fc8:	1880690e 	bge	r3,r2,817170 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  816fcc:	e0fffc17 	ldw	r3,-16(fp)
  816fd0:	e0bff817 	ldw	r2,-32(fp)
  816fd4:	1004913a 	slli	r2,r2,4
  816fd8:	1885883a 	add	r2,r3,r2
  816fdc:	10800d04 	addi	r2,r2,52
  816fe0:	10800017 	ldw	r2,0(r2)
  816fe4:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  816fe8:	e03ff915 	stw	zero,-28(fp)
  816fec:	00005806 	br	817150 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  816ff0:	e0fffd17 	ldw	r3,-12(fp)
  816ff4:	e0bffa17 	ldw	r2,-24(fp)
  816ff8:	18804916 	blt	r3,r2,817120 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  816ffc:	e0fffc17 	ldw	r3,-16(fp)
  817000:	e0bff817 	ldw	r2,-32(fp)
  817004:	10800104 	addi	r2,r2,4
  817008:	1004913a 	slli	r2,r2,4
  81700c:	1885883a 	add	r2,r3,r2
  817010:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  817014:	e0bffa17 	ldw	r2,-24(fp)
  817018:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  81701c:	e0fffd17 	ldw	r3,-12(fp)
  817020:	18803f0e 	bge	r3,r2,817120 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  817024:	e0fffc17 	ldw	r3,-16(fp)
  817028:	e0bff817 	ldw	r2,-32(fp)
  81702c:	10800104 	addi	r2,r2,4
  817030:	1004913a 	slli	r2,r2,4
  817034:	1885883a 	add	r2,r3,r2
  817038:	10c00017 	ldw	r3,0(r2)
  81703c:	e0bffa17 	ldw	r2,-24(fp)
  817040:	1887883a 	add	r3,r3,r2
  817044:	e0bffd17 	ldw	r2,-12(fp)
  817048:	1885c83a 	sub	r2,r3,r2
  81704c:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  817050:	e0fffb17 	ldw	r3,-20(fp)
  817054:	e0bfff17 	ldw	r2,-4(fp)
  817058:	1880010e 	bge	r3,r2,817060 <alt_epcs_flash_write+0x11c>
  81705c:	1805883a 	mov	r2,r3
  817060:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  817064:	e0bffb17 	ldw	r2,-20(fp)
  817068:	100f883a 	mov	r7,r2
  81706c:	e1bffd17 	ldw	r6,-12(fp)
  817070:	e17ffe17 	ldw	r5,-8(fp)
  817074:	e13ffc17 	ldw	r4,-16(fp)
  817078:	0816e580 	call	816e58 <alt_epcs_flash_memcmp>
  81707c:	10001226 	beq	r2,zero,8170c8 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  817080:	e0bffc17 	ldw	r2,-16(fp)
  817084:	10800817 	ldw	r2,32(r2)
  817088:	e17ffa17 	ldw	r5,-24(fp)
  81708c:	e13ffc17 	ldw	r4,-16(fp)
  817090:	103ee83a 	callr	r2
  817094:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  817098:	e0bff717 	ldw	r2,-36(fp)
  81709c:	10000a1e 	bne	r2,zero,8170c8 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  8170a0:	e0bffc17 	ldw	r2,-16(fp)
  8170a4:	10800917 	ldw	r2,36(r2)
  8170a8:	e0fffb17 	ldw	r3,-20(fp)
  8170ac:	d8c00015 	stw	r3,0(sp)
  8170b0:	e1fffe17 	ldw	r7,-8(fp)
  8170b4:	e1bffd17 	ldw	r6,-12(fp)
  8170b8:	e17ffa17 	ldw	r5,-24(fp)
  8170bc:	e13ffc17 	ldw	r4,-16(fp)
  8170c0:	103ee83a 	callr	r2
  8170c4:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  8170c8:	e0ffff17 	ldw	r3,-4(fp)
  8170cc:	e0bffb17 	ldw	r2,-20(fp)
  8170d0:	18802e26 	beq	r3,r2,81718c <alt_epcs_flash_write+0x248>
  8170d4:	e0bff717 	ldw	r2,-36(fp)
  8170d8:	10002c1e 	bne	r2,zero,81718c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  8170dc:	e0ffff17 	ldw	r3,-4(fp)
  8170e0:	e0bffb17 	ldw	r2,-20(fp)
  8170e4:	1885c83a 	sub	r2,r3,r2
  8170e8:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  8170ec:	e0fffc17 	ldw	r3,-16(fp)
  8170f0:	e0bff817 	ldw	r2,-32(fp)
  8170f4:	10800104 	addi	r2,r2,4
  8170f8:	1004913a 	slli	r2,r2,4
  8170fc:	1885883a 	add	r2,r3,r2
  817100:	10c00017 	ldw	r3,0(r2)
  817104:	e0bffa17 	ldw	r2,-24(fp)
  817108:	1885883a 	add	r2,r3,r2
  81710c:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  817110:	e0bffb17 	ldw	r2,-20(fp)
  817114:	e0fffe17 	ldw	r3,-8(fp)
  817118:	1885883a 	add	r2,r3,r2
  81711c:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  817120:	e0fffc17 	ldw	r3,-16(fp)
  817124:	e0bff817 	ldw	r2,-32(fp)
  817128:	10800104 	addi	r2,r2,4
  81712c:	1004913a 	slli	r2,r2,4
  817130:	1885883a 	add	r2,r3,r2
  817134:	10800017 	ldw	r2,0(r2)
  817138:	e0fffa17 	ldw	r3,-24(fp)
  81713c:	1885883a 	add	r2,r3,r2
  817140:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  817144:	e0bff917 	ldw	r2,-28(fp)
  817148:	10800044 	addi	r2,r2,1
  81714c:	e0bff915 	stw	r2,-28(fp)
  817150:	e0fffc17 	ldw	r3,-16(fp)
  817154:	e0bff817 	ldw	r2,-32(fp)
  817158:	1004913a 	slli	r2,r2,4
  81715c:	1885883a 	add	r2,r3,r2
  817160:	10800f04 	addi	r2,r2,60
  817164:	10800017 	ldw	r2,0(r2)
  817168:	e0fff917 	ldw	r3,-28(fp)
  81716c:	18bfa016 	blt	r3,r2,816ff0 <__alt_mem_epcs_flash_controller_0+0xff80dff0>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  817170:	e0bff817 	ldw	r2,-32(fp)
  817174:	10800044 	addi	r2,r2,1
  817178:	e0bff815 	stw	r2,-32(fp)
  81717c:	e0bffc17 	ldw	r2,-16(fp)
  817180:	10800c17 	ldw	r2,48(r2)
  817184:	e0fff817 	ldw	r3,-32(fp)
  817188:	18bf7916 	blt	r3,r2,816f70 <__alt_mem_epcs_flash_controller_0+0xff80df70>
      }
    }
  }

finished:
  return ret_code;
  81718c:	e0bff717 	ldw	r2,-36(fp)
}
  817190:	e037883a 	mov	sp,fp
  817194:	dfc00117 	ldw	ra,4(sp)
  817198:	df000017 	ldw	fp,0(sp)
  81719c:	dec00204 	addi	sp,sp,8
  8171a0:	f800283a 	ret

008171a4 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  8171a4:	defffa04 	addi	sp,sp,-24
  8171a8:	df000515 	stw	fp,20(sp)
  8171ac:	df000504 	addi	fp,sp,20
  8171b0:	e13ffd15 	stw	r4,-12(fp)
  8171b4:	e17ffe15 	stw	r5,-8(fp)
  8171b8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  8171bc:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  8171c0:	e0bffd17 	ldw	r2,-12(fp)
  8171c4:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  8171c8:	e0bffc17 	ldw	r2,-16(fp)
  8171cc:	10c00c17 	ldw	r3,48(r2)
  8171d0:	e0bfff17 	ldw	r2,-4(fp)
  8171d4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  8171d8:	e0bffc17 	ldw	r2,-16(fp)
  8171dc:	10800c17 	ldw	r2,48(r2)
  8171e0:	1000031e 	bne	r2,zero,8171f0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  8171e4:	00bffec4 	movi	r2,-5
  8171e8:	e0bffb15 	stw	r2,-20(fp)
  8171ec:	00000b06 	br	81721c <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  8171f0:	e0bffc17 	ldw	r2,-16(fp)
  8171f4:	10800c17 	ldw	r2,48(r2)
  8171f8:	10800250 	cmplti	r2,r2,9
  8171fc:	1000031e 	bne	r2,zero,81720c <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  817200:	00bffd04 	movi	r2,-12
  817204:	e0bffb15 	stw	r2,-20(fp)
  817208:	00000406 	br	81721c <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  81720c:	e0bffc17 	ldw	r2,-16(fp)
  817210:	10c00d04 	addi	r3,r2,52
  817214:	e0bffe17 	ldw	r2,-8(fp)
  817218:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  81721c:	e0bffb17 	ldw	r2,-20(fp)
}
  817220:	e037883a 	mov	sp,fp
  817224:	df000017 	ldw	fp,0(sp)
  817228:	dec00104 	addi	sp,sp,4
  81722c:	f800283a 	ret

00817230 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  817230:	defff904 	addi	sp,sp,-28
  817234:	df000615 	stw	fp,24(sp)
  817238:	df000604 	addi	fp,sp,24
  81723c:	e13ffe15 	stw	r4,-8(fp)
  817240:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  817244:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  817248:	e0bffe17 	ldw	r2,-8(fp)
  81724c:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  817250:	e0bffb17 	ldw	r2,-20(fp)
  817254:	10800c17 	ldw	r2,48(r2)
  817258:	10bfffc4 	addi	r2,r2,-1
  81725c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  817260:	e0fffb17 	ldw	r3,-20(fp)
  817264:	e0bffc17 	ldw	r2,-16(fp)
  817268:	1004913a 	slli	r2,r2,4
  81726c:	1885883a 	add	r2,r3,r2
  817270:	10800d04 	addi	r2,r2,52
  817274:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  817278:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  81727c:	e13ffb17 	ldw	r4,-20(fp)
  817280:	e0bffc17 	ldw	r2,-16(fp)
  817284:	1004913a 	slli	r2,r2,4
  817288:	2085883a 	add	r2,r4,r2
  81728c:	10800e04 	addi	r2,r2,56
  817290:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  817294:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  817298:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  81729c:	e0bfff17 	ldw	r2,-4(fp)
  8172a0:	e0fffd17 	ldw	r3,-12(fp)
  8172a4:	1880022e 	bgeu	r3,r2,8172b0 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  8172a8:	00bffec4 	movi	r2,-5
  8172ac:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  8172b0:	e0bffa17 	ldw	r2,-24(fp)
}
  8172b4:	e037883a 	mov	sp,fp
  8172b8:	df000017 	ldw	fp,0(sp)
  8172bc:	dec00104 	addi	sp,sp,4
  8172c0:	f800283a 	ret

008172c4 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  8172c4:	defffa04 	addi	sp,sp,-24
  8172c8:	dfc00515 	stw	ra,20(sp)
  8172cc:	df000415 	stw	fp,16(sp)
  8172d0:	df000404 	addi	fp,sp,16
  8172d4:	e13ffe15 	stw	r4,-8(fp)
  8172d8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  8172dc:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  8172e0:	e0bffe17 	ldw	r2,-8(fp)
  8172e4:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  8172e8:	e17fff17 	ldw	r5,-4(fp)
  8172ec:	e13ffe17 	ldw	r4,-8(fp)
  8172f0:	08172300 	call	817230 <alt_epcs_test_address>
  8172f4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  8172f8:	e0bffc17 	ldw	r2,-16(fp)
  8172fc:	10000916 	blt	r2,zero,817324 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  817300:	e0bffd17 	ldw	r2,-12(fp)
  817304:	10c02e17 	ldw	r3,184(r2)
  817308:	e13fff17 	ldw	r4,-4(fp)
  81730c:	e0bffd17 	ldw	r2,-12(fp)
  817310:	10803217 	ldw	r2,200(r2)
  817314:	100d883a 	mov	r6,r2
  817318:	200b883a 	mov	r5,r4
  81731c:	1809883a 	mov	r4,r3
  817320:	081939c0 	call	81939c <epcs_sector_erase>
  }
  return ret_code;
  817324:	e0bffc17 	ldw	r2,-16(fp)
}
  817328:	e037883a 	mov	sp,fp
  81732c:	dfc00117 	ldw	ra,4(sp)
  817330:	df000017 	ldw	fp,0(sp)
  817334:	dec00204 	addi	sp,sp,8
  817338:	f800283a 	ret

0081733c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  81733c:	defff404 	addi	sp,sp,-48
  817340:	dfc00b15 	stw	ra,44(sp)
  817344:	df000a15 	stw	fp,40(sp)
  817348:	df000a04 	addi	fp,sp,40
  81734c:	e13ffc15 	stw	r4,-16(fp)
  817350:	e17ffd15 	stw	r5,-12(fp)
  817354:	e1bffe15 	stw	r6,-8(fp)
  817358:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  81735c:	e0bffc17 	ldw	r2,-16(fp)
  817360:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  817364:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  817368:	e17ffe17 	ldw	r5,-8(fp)
  81736c:	e13ffc17 	ldw	r4,-16(fp)
  817370:	08172300 	call	817230 <alt_epcs_test_address>
  817374:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  817378:	e0bff917 	ldw	r2,-28(fp)
  81737c:	10002916 	blt	r2,zero,817424 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  817380:	00002606 	br	81741c <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  817384:	e0bff817 	ldw	r2,-32(fp)
  817388:	10c03117 	ldw	r3,196(r2)
  81738c:	e0bffe17 	ldw	r2,-8(fp)
  817390:	1887883a 	add	r3,r3,r2
  817394:	e0bff817 	ldw	r2,-32(fp)
  817398:	10803117 	ldw	r2,196(r2)
  81739c:	0085c83a 	sub	r2,zero,r2
  8173a0:	1884703a 	and	r2,r3,r2
  8173a4:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  8173a8:	e0fffa17 	ldw	r3,-24(fp)
  8173ac:	e0bffe17 	ldw	r2,-8(fp)
  8173b0:	1885c83a 	sub	r2,r3,r2
  8173b4:	e0c00217 	ldw	r3,8(fp)
  8173b8:	1880010e 	bge	r3,r2,8173c0 <alt_epcs_flash_write_block+0x84>
  8173bc:	1805883a 	mov	r2,r3
  8173c0:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  8173c4:	e0bff817 	ldw	r2,-32(fp)
  8173c8:	11002e17 	ldw	r4,184(r2)
  8173cc:	e0bff717 	ldw	r2,-36(fp)
  8173d0:	e0ffff17 	ldw	r3,-4(fp)
  8173d4:	1887883a 	add	r3,r3,r2
  8173d8:	e0bff817 	ldw	r2,-32(fp)
  8173dc:	10803217 	ldw	r2,200(r2)
  8173e0:	d8800015 	stw	r2,0(sp)
  8173e4:	e1fffb17 	ldw	r7,-20(fp)
  8173e8:	180d883a 	mov	r6,r3
  8173ec:	e17ffe17 	ldw	r5,-8(fp)
  8173f0:	081964c0 	call	81964c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  8173f4:	e0c00217 	ldw	r3,8(fp)
  8173f8:	e0bffb17 	ldw	r2,-20(fp)
  8173fc:	1885c83a 	sub	r2,r3,r2
  817400:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  817404:	e0fff717 	ldw	r3,-36(fp)
  817408:	e0bffb17 	ldw	r2,-20(fp)
  81740c:	1885883a 	add	r2,r3,r2
  817410:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  817414:	e0bffa17 	ldw	r2,-24(fp)
  817418:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  81741c:	e0800217 	ldw	r2,8(fp)
  817420:	103fd81e 	bne	r2,zero,817384 <__alt_mem_epcs_flash_controller_0+0xff80e384>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  817424:	e0bff917 	ldw	r2,-28(fp)
}
  817428:	e037883a 	mov	sp,fp
  81742c:	dfc00117 	ldw	ra,4(sp)
  817430:	df000017 	ldw	fp,0(sp)
  817434:	dec00204 	addi	sp,sp,8
  817438:	f800283a 	ret

0081743c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  81743c:	defff704 	addi	sp,sp,-36
  817440:	dfc00815 	stw	ra,32(sp)
  817444:	df000715 	stw	fp,28(sp)
  817448:	df000704 	addi	fp,sp,28
  81744c:	e13ffc15 	stw	r4,-16(fp)
  817450:	e17ffd15 	stw	r5,-12(fp)
  817454:	e1bffe15 	stw	r6,-8(fp)
  817458:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  81745c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  817460:	e0bffc17 	ldw	r2,-16(fp)
  817464:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  817468:	e17ffd17 	ldw	r5,-12(fp)
  81746c:	e13ffc17 	ldw	r4,-16(fp)
  817470:	08172300 	call	817230 <alt_epcs_test_address>
  817474:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  817478:	e0bffa17 	ldw	r2,-24(fp)
  81747c:	10000f16 	blt	r2,zero,8174bc <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  817480:	e0bffb17 	ldw	r2,-20(fp)
  817484:	10c02e17 	ldw	r3,184(r2)
  817488:	e0bffb17 	ldw	r2,-20(fp)
  81748c:	10803217 	ldw	r2,200(r2)
  817490:	d8800015 	stw	r2,0(sp)
  817494:	e1ffff17 	ldw	r7,-4(fp)
  817498:	e1bffe17 	ldw	r6,-8(fp)
  81749c:	e17ffd17 	ldw	r5,-12(fp)
  8174a0:	1809883a 	mov	r4,r3
  8174a4:	08194980 	call	819498 <epcs_read_buffer>
  8174a8:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  8174ac:	e0fffa17 	ldw	r3,-24(fp)
  8174b0:	e0bfff17 	ldw	r2,-4(fp)
  8174b4:	1880011e 	bne	r3,r2,8174bc <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  8174b8:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  8174bc:	e0bffa17 	ldw	r2,-24(fp)
}
  8174c0:	e037883a 	mov	sp,fp
  8174c4:	dfc00117 	ldw	ra,4(sp)
  8174c8:	df000017 	ldw	fp,0(sp)
  8174cc:	dec00204 	addi	sp,sp,8
  8174d0:	f800283a 	ret

008174d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8174d4:	defffa04 	addi	sp,sp,-24
  8174d8:	dfc00515 	stw	ra,20(sp)
  8174dc:	df000415 	stw	fp,16(sp)
  8174e0:	df000404 	addi	fp,sp,16
  8174e4:	e13ffd15 	stw	r4,-12(fp)
  8174e8:	e17ffe15 	stw	r5,-8(fp)
  8174ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8174f0:	e0bffd17 	ldw	r2,-12(fp)
  8174f4:	10800017 	ldw	r2,0(r2)
  8174f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8174fc:	e0bffc17 	ldw	r2,-16(fp)
  817500:	10c00a04 	addi	r3,r2,40
  817504:	e0bffd17 	ldw	r2,-12(fp)
  817508:	10800217 	ldw	r2,8(r2)
  81750c:	100f883a 	mov	r7,r2
  817510:	e1bfff17 	ldw	r6,-4(fp)
  817514:	e17ffe17 	ldw	r5,-8(fp)
  817518:	1809883a 	mov	r4,r3
  81751c:	0817c800 	call	817c80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  817520:	e037883a 	mov	sp,fp
  817524:	dfc00117 	ldw	ra,4(sp)
  817528:	df000017 	ldw	fp,0(sp)
  81752c:	dec00204 	addi	sp,sp,8
  817530:	f800283a 	ret

00817534 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  817534:	defffa04 	addi	sp,sp,-24
  817538:	dfc00515 	stw	ra,20(sp)
  81753c:	df000415 	stw	fp,16(sp)
  817540:	df000404 	addi	fp,sp,16
  817544:	e13ffd15 	stw	r4,-12(fp)
  817548:	e17ffe15 	stw	r5,-8(fp)
  81754c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  817550:	e0bffd17 	ldw	r2,-12(fp)
  817554:	10800017 	ldw	r2,0(r2)
  817558:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81755c:	e0bffc17 	ldw	r2,-16(fp)
  817560:	10c00a04 	addi	r3,r2,40
  817564:	e0bffd17 	ldw	r2,-12(fp)
  817568:	10800217 	ldw	r2,8(r2)
  81756c:	100f883a 	mov	r7,r2
  817570:	e1bfff17 	ldw	r6,-4(fp)
  817574:	e17ffe17 	ldw	r5,-8(fp)
  817578:	1809883a 	mov	r4,r3
  81757c:	0817f3c0 	call	817f3c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  817580:	e037883a 	mov	sp,fp
  817584:	dfc00117 	ldw	ra,4(sp)
  817588:	df000017 	ldw	fp,0(sp)
  81758c:	dec00204 	addi	sp,sp,8
  817590:	f800283a 	ret

00817594 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  817594:	defffc04 	addi	sp,sp,-16
  817598:	dfc00315 	stw	ra,12(sp)
  81759c:	df000215 	stw	fp,8(sp)
  8175a0:	df000204 	addi	fp,sp,8
  8175a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8175a8:	e0bfff17 	ldw	r2,-4(fp)
  8175ac:	10800017 	ldw	r2,0(r2)
  8175b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8175b4:	e0bffe17 	ldw	r2,-8(fp)
  8175b8:	10c00a04 	addi	r3,r2,40
  8175bc:	e0bfff17 	ldw	r2,-4(fp)
  8175c0:	10800217 	ldw	r2,8(r2)
  8175c4:	100b883a 	mov	r5,r2
  8175c8:	1809883a 	mov	r4,r3
  8175cc:	0817b280 	call	817b28 <altera_avalon_jtag_uart_close>
}
  8175d0:	e037883a 	mov	sp,fp
  8175d4:	dfc00117 	ldw	ra,4(sp)
  8175d8:	df000017 	ldw	fp,0(sp)
  8175dc:	dec00204 	addi	sp,sp,8
  8175e0:	f800283a 	ret

008175e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8175e4:	defffa04 	addi	sp,sp,-24
  8175e8:	dfc00515 	stw	ra,20(sp)
  8175ec:	df000415 	stw	fp,16(sp)
  8175f0:	df000404 	addi	fp,sp,16
  8175f4:	e13ffd15 	stw	r4,-12(fp)
  8175f8:	e17ffe15 	stw	r5,-8(fp)
  8175fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  817600:	e0bffd17 	ldw	r2,-12(fp)
  817604:	10800017 	ldw	r2,0(r2)
  817608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81760c:	e0bffc17 	ldw	r2,-16(fp)
  817610:	10800a04 	addi	r2,r2,40
  817614:	e1bfff17 	ldw	r6,-4(fp)
  817618:	e17ffe17 	ldw	r5,-8(fp)
  81761c:	1009883a 	mov	r4,r2
  817620:	0817b900 	call	817b90 <altera_avalon_jtag_uart_ioctl>
}
  817624:	e037883a 	mov	sp,fp
  817628:	dfc00117 	ldw	ra,4(sp)
  81762c:	df000017 	ldw	fp,0(sp)
  817630:	dec00204 	addi	sp,sp,8
  817634:	f800283a 	ret

00817638 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  817638:	defff104 	addi	sp,sp,-60
  81763c:	dfc00e15 	stw	ra,56(sp)
  817640:	df000d15 	stw	fp,52(sp)
  817644:	df000d04 	addi	fp,sp,52
  817648:	e13ff915 	stw	r4,-28(fp)
  81764c:	e17ffa15 	stw	r5,-24(fp)
  817650:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  817654:	e0bff917 	ldw	r2,-28(fp)
  817658:	10800c04 	addi	r2,r2,48
  81765c:	e0bff415 	stw	r2,-48(fp)
  817660:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  817664:	e0bff80b 	ldhu	r2,-32(fp)
  817668:	e0fff884 	addi	r3,fp,-30
  81766c:	180b883a 	mov	r5,r3
  817670:	1009883a 	mov	r4,r2
  817674:	08115640 	call	811564 <OSFlagCreate>
  817678:	1007883a 	mov	r3,r2
  81767c:	e0bff417 	ldw	r2,-48(fp)
  817680:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  817684:	e0bff917 	ldw	r2,-28(fp)
  817688:	10800a04 	addi	r2,r2,40
  81768c:	e0bff515 	stw	r2,-44(fp)
  817690:	00800044 	movi	r2,1
  817694:	e0bff78d 	sth	r2,-34(fp)
  817698:	e0bff78b 	ldhu	r2,-34(fp)
  81769c:	1009883a 	mov	r4,r2
  8176a0:	08142840 	call	814284 <OSSemCreate>
  8176a4:	1007883a 	mov	r3,r2
  8176a8:	e0bff517 	ldw	r2,-44(fp)
  8176ac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  8176b0:	e0bff917 	ldw	r2,-28(fp)
  8176b4:	10800b04 	addi	r2,r2,44
  8176b8:	e0bff615 	stw	r2,-40(fp)
  8176bc:	00800044 	movi	r2,1
  8176c0:	e0bff70d 	sth	r2,-36(fp)
  8176c4:	e0bff70b 	ldhu	r2,-36(fp)
  8176c8:	1009883a 	mov	r4,r2
  8176cc:	08142840 	call	814284 <OSSemCreate>
  8176d0:	1007883a 	mov	r3,r2
  8176d4:	e0bff617 	ldw	r2,-40(fp)
  8176d8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8176dc:	e0bff917 	ldw	r2,-28(fp)
  8176e0:	00c00044 	movi	r3,1
  8176e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8176e8:	e0bff917 	ldw	r2,-28(fp)
  8176ec:	10800017 	ldw	r2,0(r2)
  8176f0:	10800104 	addi	r2,r2,4
  8176f4:	1007883a 	mov	r3,r2
  8176f8:	e0bff917 	ldw	r2,-28(fp)
  8176fc:	10800817 	ldw	r2,32(r2)
  817700:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  817704:	e0bffa17 	ldw	r2,-24(fp)
  817708:	e0fffb17 	ldw	r3,-20(fp)
  81770c:	d8000015 	stw	zero,0(sp)
  817710:	e1fff917 	ldw	r7,-28(fp)
  817714:	01802074 	movhi	r6,129
  817718:	319de004 	addi	r6,r6,30592
  81771c:	180b883a 	mov	r5,r3
  817720:	1009883a 	mov	r4,r2
  817724:	080e49c0 	call	80e49c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  817728:	e0bff917 	ldw	r2,-28(fp)
  81772c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  817730:	e0bff917 	ldw	r2,-28(fp)
  817734:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  817738:	d0e0a017 	ldw	r3,-32128(gp)
  81773c:	e1fff917 	ldw	r7,-28(fp)
  817740:	01802074 	movhi	r6,129
  817744:	319e8904 	addi	r6,r6,31268
  817748:	180b883a 	mov	r5,r3
  81774c:	1009883a 	mov	r4,r2
  817750:	081a5000 	call	81a500 <alt_alarm_start>
  817754:	1000040e 	bge	r2,zero,817768 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  817758:	e0fff917 	ldw	r3,-28(fp)
  81775c:	00a00034 	movhi	r2,32768
  817760:	10bfffc4 	addi	r2,r2,-1
  817764:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  817768:	0001883a 	nop
  81776c:	e037883a 	mov	sp,fp
  817770:	dfc00117 	ldw	ra,4(sp)
  817774:	df000017 	ldw	fp,0(sp)
  817778:	dec00204 	addi	sp,sp,8
  81777c:	f800283a 	ret

00817780 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  817780:	defff204 	addi	sp,sp,-56
  817784:	dfc00d15 	stw	ra,52(sp)
  817788:	df000c15 	stw	fp,48(sp)
  81778c:	df000c04 	addi	fp,sp,48
  817790:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  817794:	e0bfff17 	ldw	r2,-4(fp)
  817798:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  81779c:	e0bff617 	ldw	r2,-40(fp)
  8177a0:	10800017 	ldw	r2,0(r2)
  8177a4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8177a8:	e0bff717 	ldw	r2,-36(fp)
  8177ac:	10800104 	addi	r2,r2,4
  8177b0:	10800037 	ldwio	r2,0(r2)
  8177b4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8177b8:	e0bff817 	ldw	r2,-32(fp)
  8177bc:	1080c00c 	andi	r2,r2,768
  8177c0:	10009126 	beq	r2,zero,817a08 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8177c4:	e0bff817 	ldw	r2,-32(fp)
  8177c8:	1080400c 	andi	r2,r2,256
  8177cc:	10004726 	beq	r2,zero,8178ec <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8177d0:	00800074 	movhi	r2,1
  8177d4:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8177d8:	e0bff617 	ldw	r2,-40(fp)
  8177dc:	10800d17 	ldw	r2,52(r2)
  8177e0:	10800044 	addi	r2,r2,1
  8177e4:	1081ffcc 	andi	r2,r2,2047
  8177e8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  8177ec:	e0bff617 	ldw	r2,-40(fp)
  8177f0:	10c00e17 	ldw	r3,56(r2)
  8177f4:	e0bff917 	ldw	r2,-28(fp)
  8177f8:	18802726 	beq	r3,r2,817898 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8177fc:	e0bff717 	ldw	r2,-36(fp)
  817800:	10800037 	ldwio	r2,0(r2)
  817804:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  817808:	e0bff417 	ldw	r2,-48(fp)
  81780c:	10a0000c 	andi	r2,r2,32768
  817810:	10002326 	beq	r2,zero,8178a0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  817814:	e0bff617 	ldw	r2,-40(fp)
  817818:	10800d17 	ldw	r2,52(r2)
  81781c:	e0fff417 	ldw	r3,-48(fp)
  817820:	1809883a 	mov	r4,r3
  817824:	e0fff617 	ldw	r3,-40(fp)
  817828:	1885883a 	add	r2,r3,r2
  81782c:	10801104 	addi	r2,r2,68
  817830:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817834:	e0bff617 	ldw	r2,-40(fp)
  817838:	10800d17 	ldw	r2,52(r2)
  81783c:	10800044 	addi	r2,r2,1
  817840:	10c1ffcc 	andi	r3,r2,2047
  817844:	e0bff617 	ldw	r2,-40(fp)
  817848:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  81784c:	e0bff617 	ldw	r2,-40(fp)
  817850:	10800c17 	ldw	r2,48(r2)
  817854:	e0bffb15 	stw	r2,-20(fp)
  817858:	00800044 	movi	r2,1
  81785c:	e0bffc0d 	sth	r2,-16(fp)
  817860:	00800044 	movi	r2,1
  817864:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817868:	d0a08b43 	ldbu	r2,-32211(gp)
  81786c:	10803fcc 	andi	r2,r2,255
  817870:	103fd926 	beq	r2,zero,8177d8 <__alt_mem_epcs_flash_controller_0+0xff80e7d8>
  {
    OSFlagPost (group, flags, opt, &err);
  817874:	e0bffc0b 	ldhu	r2,-16(fp)
  817878:	e0fffc83 	ldbu	r3,-14(fp)
  81787c:	e13ffdc4 	addi	r4,fp,-9
  817880:	200f883a 	mov	r7,r4
  817884:	180d883a 	mov	r6,r3
  817888:	100b883a 	mov	r5,r2
  81788c:	e13ffb17 	ldw	r4,-20(fp)
  817890:	08121400 	call	812140 <OSFlagPost>
      }
  817894:	003fd006 	br	8177d8 <__alt_mem_epcs_flash_controller_0+0xff80e7d8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  817898:	0001883a 	nop
  81789c:	00000106 	br	8178a4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  8178a0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8178a4:	e0bff417 	ldw	r2,-48(fp)
  8178a8:	10bfffec 	andhi	r2,r2,65535
  8178ac:	10000f26 	beq	r2,zero,8178ec <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8178b0:	e0bff617 	ldw	r2,-40(fp)
  8178b4:	10c00817 	ldw	r3,32(r2)
  8178b8:	00bfff84 	movi	r2,-2
  8178bc:	1886703a 	and	r3,r3,r2
  8178c0:	e0bff617 	ldw	r2,-40(fp)
  8178c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8178c8:	e0bff717 	ldw	r2,-36(fp)
  8178cc:	10800104 	addi	r2,r2,4
  8178d0:	1007883a 	mov	r3,r2
  8178d4:	e0bff617 	ldw	r2,-40(fp)
  8178d8:	10800817 	ldw	r2,32(r2)
  8178dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8178e0:	e0bff717 	ldw	r2,-36(fp)
  8178e4:	10800104 	addi	r2,r2,4
  8178e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8178ec:	e0bff817 	ldw	r2,-32(fp)
  8178f0:	1080800c 	andi	r2,r2,512
  8178f4:	103fac26 	beq	r2,zero,8177a8 <__alt_mem_epcs_flash_controller_0+0xff80e7a8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8178f8:	e0bff817 	ldw	r2,-32(fp)
  8178fc:	1004d43a 	srli	r2,r2,16
  817900:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  817904:	00002606 	br	8179a0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  817908:	e0bff717 	ldw	r2,-36(fp)
  81790c:	e0fff617 	ldw	r3,-40(fp)
  817910:	18c01017 	ldw	r3,64(r3)
  817914:	e13ff617 	ldw	r4,-40(fp)
  817918:	20c7883a 	add	r3,r4,r3
  81791c:	18c21104 	addi	r3,r3,2116
  817920:	18c00003 	ldbu	r3,0(r3)
  817924:	18c03fcc 	andi	r3,r3,255
  817928:	18c0201c 	xori	r3,r3,128
  81792c:	18ffe004 	addi	r3,r3,-128
  817930:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817934:	e0bff617 	ldw	r2,-40(fp)
  817938:	10801017 	ldw	r2,64(r2)
  81793c:	10800044 	addi	r2,r2,1
  817940:	10c1ffcc 	andi	r3,r2,2047
  817944:	e0bff617 	ldw	r2,-40(fp)
  817948:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  81794c:	e0bff617 	ldw	r2,-40(fp)
  817950:	10800c17 	ldw	r2,48(r2)
  817954:	e0bffa15 	stw	r2,-24(fp)
  817958:	00800084 	movi	r2,2
  81795c:	e0bffd0d 	sth	r2,-12(fp)
  817960:	00800044 	movi	r2,1
  817964:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817968:	d0a08b43 	ldbu	r2,-32211(gp)
  81796c:	10803fcc 	andi	r2,r2,255
  817970:	10000826 	beq	r2,zero,817994 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  817974:	e0bffd0b 	ldhu	r2,-12(fp)
  817978:	e0fffd83 	ldbu	r3,-10(fp)
  81797c:	e13ffe04 	addi	r4,fp,-8
  817980:	200f883a 	mov	r7,r4
  817984:	180d883a 	mov	r6,r3
  817988:	100b883a 	mov	r5,r2
  81798c:	e13ffa17 	ldw	r4,-24(fp)
  817990:	08121400 	call	812140 <OSFlagPost>

        space--;
  817994:	e0bff517 	ldw	r2,-44(fp)
  817998:	10bfffc4 	addi	r2,r2,-1
  81799c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8179a0:	e0bff517 	ldw	r2,-44(fp)
  8179a4:	10000526 	beq	r2,zero,8179bc <altera_avalon_jtag_uart_irq+0x23c>
  8179a8:	e0bff617 	ldw	r2,-40(fp)
  8179ac:	10c01017 	ldw	r3,64(r2)
  8179b0:	e0bff617 	ldw	r2,-40(fp)
  8179b4:	10800f17 	ldw	r2,60(r2)
  8179b8:	18bfd31e 	bne	r3,r2,817908 <__alt_mem_epcs_flash_controller_0+0xff80e908>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8179bc:	e0bff517 	ldw	r2,-44(fp)
  8179c0:	103f7926 	beq	r2,zero,8177a8 <__alt_mem_epcs_flash_controller_0+0xff80e7a8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8179c4:	e0bff617 	ldw	r2,-40(fp)
  8179c8:	10c00817 	ldw	r3,32(r2)
  8179cc:	00bfff44 	movi	r2,-3
  8179d0:	1886703a 	and	r3,r3,r2
  8179d4:	e0bff617 	ldw	r2,-40(fp)
  8179d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8179dc:	e0bff617 	ldw	r2,-40(fp)
  8179e0:	10800017 	ldw	r2,0(r2)
  8179e4:	10800104 	addi	r2,r2,4
  8179e8:	1007883a 	mov	r3,r2
  8179ec:	e0bff617 	ldw	r2,-40(fp)
  8179f0:	10800817 	ldw	r2,32(r2)
  8179f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8179f8:	e0bff717 	ldw	r2,-36(fp)
  8179fc:	10800104 	addi	r2,r2,4
  817a00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  817a04:	003f6806 	br	8177a8 <__alt_mem_epcs_flash_controller_0+0xff80e7a8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  817a08:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  817a0c:	0001883a 	nop
  817a10:	e037883a 	mov	sp,fp
  817a14:	dfc00117 	ldw	ra,4(sp)
  817a18:	df000017 	ldw	fp,0(sp)
  817a1c:	dec00204 	addi	sp,sp,8
  817a20:	f800283a 	ret

00817a24 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  817a24:	defff904 	addi	sp,sp,-28
  817a28:	dfc00615 	stw	ra,24(sp)
  817a2c:	df000515 	stw	fp,20(sp)
  817a30:	df000504 	addi	fp,sp,20
  817a34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  817a38:	e0bfff17 	ldw	r2,-4(fp)
  817a3c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  817a40:	e0bffb17 	ldw	r2,-20(fp)
  817a44:	10800017 	ldw	r2,0(r2)
  817a48:	10800104 	addi	r2,r2,4
  817a4c:	10800037 	ldwio	r2,0(r2)
  817a50:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  817a54:	e0bffc17 	ldw	r2,-16(fp)
  817a58:	1081000c 	andi	r2,r2,1024
  817a5c:	10000b26 	beq	r2,zero,817a8c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  817a60:	e0bffb17 	ldw	r2,-20(fp)
  817a64:	10800017 	ldw	r2,0(r2)
  817a68:	10800104 	addi	r2,r2,4
  817a6c:	1007883a 	mov	r3,r2
  817a70:	e0bffb17 	ldw	r2,-20(fp)
  817a74:	10800817 	ldw	r2,32(r2)
  817a78:	10810014 	ori	r2,r2,1024
  817a7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  817a80:	e0bffb17 	ldw	r2,-20(fp)
  817a84:	10000915 	stw	zero,36(r2)
  817a88:	00002106 	br	817b10 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  817a8c:	e0bffb17 	ldw	r2,-20(fp)
  817a90:	10c00917 	ldw	r3,36(r2)
  817a94:	00a00034 	movhi	r2,32768
  817a98:	10bfff04 	addi	r2,r2,-4
  817a9c:	10c01c36 	bltu	r2,r3,817b10 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  817aa0:	e0bffb17 	ldw	r2,-20(fp)
  817aa4:	10800917 	ldw	r2,36(r2)
  817aa8:	10c00044 	addi	r3,r2,1
  817aac:	e0bffb17 	ldw	r2,-20(fp)
  817ab0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  817ab4:	e0bffb17 	ldw	r2,-20(fp)
  817ab8:	10c00917 	ldw	r3,36(r2)
  817abc:	e0bffb17 	ldw	r2,-20(fp)
  817ac0:	10800117 	ldw	r2,4(r2)
  817ac4:	18801236 	bltu	r3,r2,817b10 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  817ac8:	e0bffb17 	ldw	r2,-20(fp)
  817acc:	10800c17 	ldw	r2,48(r2)
  817ad0:	e0bffd15 	stw	r2,-12(fp)
  817ad4:	00800104 	movi	r2,4
  817ad8:	e0bffe0d 	sth	r2,-8(fp)
  817adc:	00800044 	movi	r2,1
  817ae0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817ae4:	d0a08b43 	ldbu	r2,-32211(gp)
  817ae8:	10803fcc 	andi	r2,r2,255
  817aec:	10000826 	beq	r2,zero,817b10 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  817af0:	e0bffe0b 	ldhu	r2,-8(fp)
  817af4:	e0fffe83 	ldbu	r3,-6(fp)
  817af8:	e13ffec4 	addi	r4,fp,-5
  817afc:	200f883a 	mov	r7,r4
  817b00:	180d883a 	mov	r6,r3
  817b04:	100b883a 	mov	r5,r2
  817b08:	e13ffd17 	ldw	r4,-12(fp)
  817b0c:	08121400 	call	812140 <OSFlagPost>
  817b10:	d0a0a017 	ldw	r2,-32128(gp)
    }
  }

  return alt_ticks_per_second();
}
  817b14:	e037883a 	mov	sp,fp
  817b18:	dfc00117 	ldw	ra,4(sp)
  817b1c:	df000017 	ldw	fp,0(sp)
  817b20:	dec00204 	addi	sp,sp,8
  817b24:	f800283a 	ret

00817b28 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  817b28:	defffd04 	addi	sp,sp,-12
  817b2c:	df000215 	stw	fp,8(sp)
  817b30:	df000204 	addi	fp,sp,8
  817b34:	e13ffe15 	stw	r4,-8(fp)
  817b38:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  817b3c:	00000506 	br	817b54 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  817b40:	e0bfff17 	ldw	r2,-4(fp)
  817b44:	1090000c 	andi	r2,r2,16384
  817b48:	10000226 	beq	r2,zero,817b54 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  817b4c:	00bffd44 	movi	r2,-11
  817b50:	00000b06 	br	817b80 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  817b54:	e0bffe17 	ldw	r2,-8(fp)
  817b58:	10c01017 	ldw	r3,64(r2)
  817b5c:	e0bffe17 	ldw	r2,-8(fp)
  817b60:	10800f17 	ldw	r2,60(r2)
  817b64:	18800526 	beq	r3,r2,817b7c <altera_avalon_jtag_uart_close+0x54>
  817b68:	e0bffe17 	ldw	r2,-8(fp)
  817b6c:	10c00917 	ldw	r3,36(r2)
  817b70:	e0bffe17 	ldw	r2,-8(fp)
  817b74:	10800117 	ldw	r2,4(r2)
  817b78:	18bff136 	bltu	r3,r2,817b40 <__alt_mem_epcs_flash_controller_0+0xff80eb40>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  817b7c:	0005883a 	mov	r2,zero
}
  817b80:	e037883a 	mov	sp,fp
  817b84:	df000017 	ldw	fp,0(sp)
  817b88:	dec00104 	addi	sp,sp,4
  817b8c:	f800283a 	ret

00817b90 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  817b90:	defffa04 	addi	sp,sp,-24
  817b94:	df000515 	stw	fp,20(sp)
  817b98:	df000504 	addi	fp,sp,20
  817b9c:	e13ffd15 	stw	r4,-12(fp)
  817ba0:	e17ffe15 	stw	r5,-8(fp)
  817ba4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  817ba8:	00bff9c4 	movi	r2,-25
  817bac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  817bb0:	e0bffe17 	ldw	r2,-8(fp)
  817bb4:	10da8060 	cmpeqi	r3,r2,27137
  817bb8:	1800031e 	bne	r3,zero,817bc8 <altera_avalon_jtag_uart_ioctl+0x38>
  817bbc:	109a80a0 	cmpeqi	r2,r2,27138
  817bc0:	1000181e 	bne	r2,zero,817c24 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  817bc4:	00002906 	br	817c6c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  817bc8:	e0bffd17 	ldw	r2,-12(fp)
  817bcc:	10c00117 	ldw	r3,4(r2)
  817bd0:	00a00034 	movhi	r2,32768
  817bd4:	10bfffc4 	addi	r2,r2,-1
  817bd8:	18802126 	beq	r3,r2,817c60 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  817bdc:	e0bfff17 	ldw	r2,-4(fp)
  817be0:	10800017 	ldw	r2,0(r2)
  817be4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  817be8:	e0bffc17 	ldw	r2,-16(fp)
  817bec:	10800090 	cmplti	r2,r2,2
  817bf0:	1000061e 	bne	r2,zero,817c0c <altera_avalon_jtag_uart_ioctl+0x7c>
  817bf4:	e0fffc17 	ldw	r3,-16(fp)
  817bf8:	00a00034 	movhi	r2,32768
  817bfc:	10bfffc4 	addi	r2,r2,-1
  817c00:	18800226 	beq	r3,r2,817c0c <altera_avalon_jtag_uart_ioctl+0x7c>
  817c04:	e0bffc17 	ldw	r2,-16(fp)
  817c08:	00000206 	br	817c14 <altera_avalon_jtag_uart_ioctl+0x84>
  817c0c:	00a00034 	movhi	r2,32768
  817c10:	10bfff84 	addi	r2,r2,-2
  817c14:	e0fffd17 	ldw	r3,-12(fp)
  817c18:	18800115 	stw	r2,4(r3)
      rc = 0;
  817c1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  817c20:	00000f06 	br	817c60 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  817c24:	e0bffd17 	ldw	r2,-12(fp)
  817c28:	10c00117 	ldw	r3,4(r2)
  817c2c:	00a00034 	movhi	r2,32768
  817c30:	10bfffc4 	addi	r2,r2,-1
  817c34:	18800c26 	beq	r3,r2,817c68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  817c38:	e0bffd17 	ldw	r2,-12(fp)
  817c3c:	10c00917 	ldw	r3,36(r2)
  817c40:	e0bffd17 	ldw	r2,-12(fp)
  817c44:	10800117 	ldw	r2,4(r2)
  817c48:	1885803a 	cmpltu	r2,r3,r2
  817c4c:	10c03fcc 	andi	r3,r2,255
  817c50:	e0bfff17 	ldw	r2,-4(fp)
  817c54:	10c00015 	stw	r3,0(r2)
      rc = 0;
  817c58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  817c5c:	00000206 	br	817c68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  817c60:	0001883a 	nop
  817c64:	00000106 	br	817c6c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  817c68:	0001883a 	nop

  default:
    break;
  }

  return rc;
  817c6c:	e0bffb17 	ldw	r2,-20(fp)
}
  817c70:	e037883a 	mov	sp,fp
  817c74:	df000017 	ldw	fp,0(sp)
  817c78:	dec00104 	addi	sp,sp,4
  817c7c:	f800283a 	ret

00817c80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  817c80:	deffed04 	addi	sp,sp,-76
  817c84:	dfc01215 	stw	ra,72(sp)
  817c88:	df001115 	stw	fp,68(sp)
  817c8c:	df001104 	addi	fp,sp,68
  817c90:	e13ffc15 	stw	r4,-16(fp)
  817c94:	e17ffd15 	stw	r5,-12(fp)
  817c98:	e1bffe15 	stw	r6,-8(fp)
  817c9c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  817ca0:	e0bffd17 	ldw	r2,-12(fp)
  817ca4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  817ca8:	e0bffc17 	ldw	r2,-16(fp)
  817cac:	10800a17 	ldw	r2,40(r2)
  817cb0:	e0bff815 	stw	r2,-32(fp)
  817cb4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  817cb8:	e0bff90b 	ldhu	r2,-28(fp)
  817cbc:	e0fffb04 	addi	r3,fp,-20
  817cc0:	180d883a 	mov	r6,r3
  817cc4:	100b883a 	mov	r5,r2
  817cc8:	e13ff817 	ldw	r4,-32(fp)
  817ccc:	081459c0 	call	81459c <OSSemPend>

  while (space > 0)
  817cd0:	00006106 	br	817e58 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  817cd4:	e0bffc17 	ldw	r2,-16(fp)
  817cd8:	10800d17 	ldw	r2,52(r2)
  817cdc:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  817ce0:	e0bffc17 	ldw	r2,-16(fp)
  817ce4:	10800e17 	ldw	r2,56(r2)
  817ce8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  817cec:	e0fff317 	ldw	r3,-52(fp)
  817cf0:	e0bff417 	ldw	r2,-48(fp)
  817cf4:	18800536 	bltu	r3,r2,817d0c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  817cf8:	e0fff317 	ldw	r3,-52(fp)
  817cfc:	e0bff417 	ldw	r2,-48(fp)
  817d00:	1885c83a 	sub	r2,r3,r2
  817d04:	e0bff115 	stw	r2,-60(fp)
  817d08:	00000406 	br	817d1c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  817d0c:	00c20004 	movi	r3,2048
  817d10:	e0bff417 	ldw	r2,-48(fp)
  817d14:	1885c83a 	sub	r2,r3,r2
  817d18:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  817d1c:	e0bff117 	ldw	r2,-60(fp)
  817d20:	10001e26 	beq	r2,zero,817d9c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  817d24:	e0fffe17 	ldw	r3,-8(fp)
  817d28:	e0bff117 	ldw	r2,-60(fp)
  817d2c:	1880022e 	bgeu	r3,r2,817d38 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  817d30:	e0bffe17 	ldw	r2,-8(fp)
  817d34:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  817d38:	e0bffc17 	ldw	r2,-16(fp)
  817d3c:	10c01104 	addi	r3,r2,68
  817d40:	e0bff417 	ldw	r2,-48(fp)
  817d44:	1885883a 	add	r2,r3,r2
  817d48:	e1bff117 	ldw	r6,-60(fp)
  817d4c:	100b883a 	mov	r5,r2
  817d50:	e13ff017 	ldw	r4,-64(fp)
  817d54:	08074380 	call	807438 <memcpy>
      ptr   += n;
  817d58:	e0fff017 	ldw	r3,-64(fp)
  817d5c:	e0bff117 	ldw	r2,-60(fp)
  817d60:	1885883a 	add	r2,r3,r2
  817d64:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  817d68:	e0fffe17 	ldw	r3,-8(fp)
  817d6c:	e0bff117 	ldw	r2,-60(fp)
  817d70:	1885c83a 	sub	r2,r3,r2
  817d74:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817d78:	e0fff417 	ldw	r3,-48(fp)
  817d7c:	e0bff117 	ldw	r2,-60(fp)
  817d80:	1885883a 	add	r2,r3,r2
  817d84:	10c1ffcc 	andi	r3,r2,2047
  817d88:	e0bffc17 	ldw	r2,-16(fp)
  817d8c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  817d90:	e0bffe17 	ldw	r2,-8(fp)
  817d94:	00bfcf16 	blt	zero,r2,817cd4 <__alt_mem_epcs_flash_controller_0+0xff80ecd4>
  817d98:	00000106 	br	817da0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  817d9c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  817da0:	e0fff017 	ldw	r3,-64(fp)
  817da4:	e0bffd17 	ldw	r2,-12(fp)
  817da8:	18802e1e 	bne	r3,r2,817e64 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  817dac:	e0bfff17 	ldw	r2,-4(fp)
  817db0:	1090000c 	andi	r2,r2,16384
  817db4:	10002d1e 	bne	r2,zero,817e6c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  817db8:	d0a08b43 	ldbu	r2,-32211(gp)
  817dbc:	10803fcc 	andi	r2,r2,255
  817dc0:	10800058 	cmpnei	r2,r2,1
  817dc4:	1000161e 	bne	r2,zero,817e20 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  817dc8:	e0bffc17 	ldw	r2,-16(fp)
  817dcc:	10800c17 	ldw	r2,48(r2)
  817dd0:	e0bff215 	stw	r2,-56(fp)
  817dd4:	00800144 	movi	r2,5
  817dd8:	e0bff98d 	sth	r2,-26(fp)
  817ddc:	00bfe0c4 	movi	r2,-125
  817de0:	e0bffa05 	stb	r2,-24(fp)
  817de4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  817de8:	d0a08b43 	ldbu	r2,-32211(gp)
  817dec:	10803fcc 	andi	r2,r2,255
  817df0:	10001526 	beq	r2,zero,817e48 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  817df4:	e0fff98b 	ldhu	r3,-26(fp)
  817df8:	e13ffa03 	ldbu	r4,-24(fp)
  817dfc:	e17ffa8b 	ldhu	r5,-22(fp)
  817e00:	e0bffb44 	addi	r2,fp,-19
  817e04:	d8800015 	stw	r2,0(sp)
  817e08:	280f883a 	mov	r7,r5
  817e0c:	200d883a 	mov	r6,r4
  817e10:	180b883a 	mov	r5,r3
  817e14:	e13ff217 	ldw	r4,-56(fp)
  817e18:	0811b280 	call	811b28 <OSFlagPend>
  817e1c:	00000a06 	br	817e48 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  817e20:	0001883a 	nop
  817e24:	e0bffc17 	ldw	r2,-16(fp)
  817e28:	10c00d17 	ldw	r3,52(r2)
  817e2c:	e0bff317 	ldw	r2,-52(fp)
  817e30:	1880051e 	bne	r3,r2,817e48 <altera_avalon_jtag_uart_read+0x1c8>
  817e34:	e0bffc17 	ldw	r2,-16(fp)
  817e38:	10c00917 	ldw	r3,36(r2)
  817e3c:	e0bffc17 	ldw	r2,-16(fp)
  817e40:	10800117 	ldw	r2,4(r2)
  817e44:	18bff736 	bltu	r3,r2,817e24 <__alt_mem_epcs_flash_controller_0+0xff80ee24>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  817e48:	e0bffc17 	ldw	r2,-16(fp)
  817e4c:	10c00d17 	ldw	r3,52(r2)
  817e50:	e0bff317 	ldw	r2,-52(fp)
  817e54:	18800726 	beq	r3,r2,817e74 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  817e58:	e0bffe17 	ldw	r2,-8(fp)
  817e5c:	00bf9d16 	blt	zero,r2,817cd4 <__alt_mem_epcs_flash_controller_0+0xff80ecd4>
  817e60:	00000506 	br	817e78 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  817e64:	0001883a 	nop
  817e68:	00000306 	br	817e78 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  817e6c:	0001883a 	nop
  817e70:	00000106 	br	817e78 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  817e74:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  817e78:	e0bffc17 	ldw	r2,-16(fp)
  817e7c:	10800a17 	ldw	r2,40(r2)
  817e80:	1009883a 	mov	r4,r2
  817e84:	08149140 	call	814914 <OSSemPost>

  if (ptr != buffer)
  817e88:	e0fff017 	ldw	r3,-64(fp)
  817e8c:	e0bffd17 	ldw	r2,-12(fp)
  817e90:	18801826 	beq	r3,r2,817ef4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817e94:	0005303a 	rdctl	r2,status
  817e98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817e9c:	e0fff717 	ldw	r3,-36(fp)
  817ea0:	00bfff84 	movi	r2,-2
  817ea4:	1884703a 	and	r2,r3,r2
  817ea8:	1001703a 	wrctl	status,r2
  
  return context;
  817eac:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  817eb0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  817eb4:	e0bffc17 	ldw	r2,-16(fp)
  817eb8:	10800817 	ldw	r2,32(r2)
  817ebc:	10c00054 	ori	r3,r2,1
  817ec0:	e0bffc17 	ldw	r2,-16(fp)
  817ec4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817ec8:	e0bffc17 	ldw	r2,-16(fp)
  817ecc:	10800017 	ldw	r2,0(r2)
  817ed0:	10800104 	addi	r2,r2,4
  817ed4:	1007883a 	mov	r3,r2
  817ed8:	e0bffc17 	ldw	r2,-16(fp)
  817edc:	10800817 	ldw	r2,32(r2)
  817ee0:	18800035 	stwio	r2,0(r3)
  817ee4:	e0bff617 	ldw	r2,-40(fp)
  817ee8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817eec:	e0bff517 	ldw	r2,-44(fp)
  817ef0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  817ef4:	e0fff017 	ldw	r3,-64(fp)
  817ef8:	e0bffd17 	ldw	r2,-12(fp)
  817efc:	18800426 	beq	r3,r2,817f10 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  817f00:	e0fff017 	ldw	r3,-64(fp)
  817f04:	e0bffd17 	ldw	r2,-12(fp)
  817f08:	1885c83a 	sub	r2,r3,r2
  817f0c:	00000606 	br	817f28 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  817f10:	e0bfff17 	ldw	r2,-4(fp)
  817f14:	1090000c 	andi	r2,r2,16384
  817f18:	10000226 	beq	r2,zero,817f24 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  817f1c:	00bffd44 	movi	r2,-11
  817f20:	00000106 	br	817f28 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  817f24:	00bffec4 	movi	r2,-5
}
  817f28:	e037883a 	mov	sp,fp
  817f2c:	dfc00117 	ldw	ra,4(sp)
  817f30:	df000017 	ldw	fp,0(sp)
  817f34:	dec00204 	addi	sp,sp,8
  817f38:	f800283a 	ret

00817f3c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  817f3c:	deffed04 	addi	sp,sp,-76
  817f40:	dfc01215 	stw	ra,72(sp)
  817f44:	df001115 	stw	fp,68(sp)
  817f48:	df001104 	addi	fp,sp,68
  817f4c:	e13ffc15 	stw	r4,-16(fp)
  817f50:	e17ffd15 	stw	r5,-12(fp)
  817f54:	e1bffe15 	stw	r6,-8(fp)
  817f58:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  817f5c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  817f60:	e0bffd17 	ldw	r2,-12(fp)
  817f64:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  817f68:	e0bffc17 	ldw	r2,-16(fp)
  817f6c:	10800b17 	ldw	r2,44(r2)
  817f70:	e0bff815 	stw	r2,-32(fp)
  817f74:	e03ff90d 	sth	zero,-28(fp)
  817f78:	e0bff90b 	ldhu	r2,-28(fp)
  817f7c:	e0fffb44 	addi	r3,fp,-19
  817f80:	180d883a 	mov	r6,r3
  817f84:	100b883a 	mov	r5,r2
  817f88:	e13ff817 	ldw	r4,-32(fp)
  817f8c:	081459c0 	call	81459c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817f90:	00003706 	br	818070 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  817f94:	e0bffc17 	ldw	r2,-16(fp)
  817f98:	10800f17 	ldw	r2,60(r2)
  817f9c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  817fa0:	e0bffc17 	ldw	r2,-16(fp)
  817fa4:	10801017 	ldw	r2,64(r2)
  817fa8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  817fac:	e0fff417 	ldw	r3,-48(fp)
  817fb0:	e0bff017 	ldw	r2,-64(fp)
  817fb4:	1880062e 	bgeu	r3,r2,817fd0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  817fb8:	e0fff017 	ldw	r3,-64(fp)
  817fbc:	e0bff417 	ldw	r2,-48(fp)
  817fc0:	1885c83a 	sub	r2,r3,r2
  817fc4:	10bfffc4 	addi	r2,r2,-1
  817fc8:	e0bff115 	stw	r2,-60(fp)
  817fcc:	00000b06 	br	817ffc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  817fd0:	e0bff017 	ldw	r2,-64(fp)
  817fd4:	10000526 	beq	r2,zero,817fec <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  817fd8:	00c20004 	movi	r3,2048
  817fdc:	e0bff417 	ldw	r2,-48(fp)
  817fe0:	1885c83a 	sub	r2,r3,r2
  817fe4:	e0bff115 	stw	r2,-60(fp)
  817fe8:	00000406 	br	817ffc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  817fec:	00c1ffc4 	movi	r3,2047
  817ff0:	e0bff417 	ldw	r2,-48(fp)
  817ff4:	1885c83a 	sub	r2,r3,r2
  817ff8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  817ffc:	e0bff117 	ldw	r2,-60(fp)
  818000:	10001e26 	beq	r2,zero,81807c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  818004:	e0fffe17 	ldw	r3,-8(fp)
  818008:	e0bff117 	ldw	r2,-60(fp)
  81800c:	1880022e 	bgeu	r3,r2,818018 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  818010:	e0bffe17 	ldw	r2,-8(fp)
  818014:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  818018:	e0bffc17 	ldw	r2,-16(fp)
  81801c:	10c21104 	addi	r3,r2,2116
  818020:	e0bff417 	ldw	r2,-48(fp)
  818024:	1885883a 	add	r2,r3,r2
  818028:	e1bff117 	ldw	r6,-60(fp)
  81802c:	e17ffd17 	ldw	r5,-12(fp)
  818030:	1009883a 	mov	r4,r2
  818034:	08074380 	call	807438 <memcpy>
      ptr   += n;
  818038:	e0fffd17 	ldw	r3,-12(fp)
  81803c:	e0bff117 	ldw	r2,-60(fp)
  818040:	1885883a 	add	r2,r3,r2
  818044:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  818048:	e0fffe17 	ldw	r3,-8(fp)
  81804c:	e0bff117 	ldw	r2,-60(fp)
  818050:	1885c83a 	sub	r2,r3,r2
  818054:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  818058:	e0fff417 	ldw	r3,-48(fp)
  81805c:	e0bff117 	ldw	r2,-60(fp)
  818060:	1885883a 	add	r2,r3,r2
  818064:	10c1ffcc 	andi	r3,r2,2047
  818068:	e0bffc17 	ldw	r2,-16(fp)
  81806c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  818070:	e0bffe17 	ldw	r2,-8(fp)
  818074:	00bfc716 	blt	zero,r2,817f94 <__alt_mem_epcs_flash_controller_0+0xff80ef94>
  818078:	00000106 	br	818080 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  81807c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818080:	0005303a 	rdctl	r2,status
  818084:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818088:	e0fff717 	ldw	r3,-36(fp)
  81808c:	00bfff84 	movi	r2,-2
  818090:	1884703a 	and	r2,r3,r2
  818094:	1001703a 	wrctl	status,r2
  
  return context;
  818098:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81809c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8180a0:	e0bffc17 	ldw	r2,-16(fp)
  8180a4:	10800817 	ldw	r2,32(r2)
  8180a8:	10c00094 	ori	r3,r2,2
  8180ac:	e0bffc17 	ldw	r2,-16(fp)
  8180b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8180b4:	e0bffc17 	ldw	r2,-16(fp)
  8180b8:	10800017 	ldw	r2,0(r2)
  8180bc:	10800104 	addi	r2,r2,4
  8180c0:	1007883a 	mov	r3,r2
  8180c4:	e0bffc17 	ldw	r2,-16(fp)
  8180c8:	10800817 	ldw	r2,32(r2)
  8180cc:	18800035 	stwio	r2,0(r3)
  8180d0:	e0bff617 	ldw	r2,-40(fp)
  8180d4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8180d8:	e0bff317 	ldw	r2,-52(fp)
  8180dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8180e0:	e0bffe17 	ldw	r2,-8(fp)
  8180e4:	00802a0e 	bge	zero,r2,818190 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  8180e8:	e0bfff17 	ldw	r2,-4(fp)
  8180ec:	1090000c 	andi	r2,r2,16384
  8180f0:	10002a1e 	bne	r2,zero,81819c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8180f4:	d0a08b43 	ldbu	r2,-32211(gp)
  8180f8:	10803fcc 	andi	r2,r2,255
  8180fc:	10800058 	cmpnei	r2,r2,1
  818100:	1000161e 	bne	r2,zero,81815c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  818104:	e0bffc17 	ldw	r2,-16(fp)
  818108:	10800c17 	ldw	r2,48(r2)
  81810c:	e0bff515 	stw	r2,-44(fp)
  818110:	00800184 	movi	r2,6
  818114:	e0bff98d 	sth	r2,-26(fp)
  818118:	00bfe0c4 	movi	r2,-125
  81811c:	e0bffa05 	stb	r2,-24(fp)
  818120:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  818124:	d0a08b43 	ldbu	r2,-32211(gp)
  818128:	10803fcc 	andi	r2,r2,255
  81812c:	10001526 	beq	r2,zero,818184 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  818130:	e0fff98b 	ldhu	r3,-26(fp)
  818134:	e13ffa03 	ldbu	r4,-24(fp)
  818138:	e17ffa8b 	ldhu	r5,-22(fp)
  81813c:	e0bffb04 	addi	r2,fp,-20
  818140:	d8800015 	stw	r2,0(sp)
  818144:	280f883a 	mov	r7,r5
  818148:	200d883a 	mov	r6,r4
  81814c:	180b883a 	mov	r5,r3
  818150:	e13ff517 	ldw	r4,-44(fp)
  818154:	0811b280 	call	811b28 <OSFlagPend>
  818158:	00000a06 	br	818184 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81815c:	0001883a 	nop
  818160:	e0bffc17 	ldw	r2,-16(fp)
  818164:	10c01017 	ldw	r3,64(r2)
  818168:	e0bff017 	ldw	r2,-64(fp)
  81816c:	1880051e 	bne	r3,r2,818184 <altera_avalon_jtag_uart_write+0x248>
  818170:	e0bffc17 	ldw	r2,-16(fp)
  818174:	10c00917 	ldw	r3,36(r2)
  818178:	e0bffc17 	ldw	r2,-16(fp)
  81817c:	10800117 	ldw	r2,4(r2)
  818180:	18bff736 	bltu	r3,r2,818160 <__alt_mem_epcs_flash_controller_0+0xff80f160>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  818184:	e0bffc17 	ldw	r2,-16(fp)
  818188:	10800917 	ldw	r2,36(r2)
  81818c:	1000051e 	bne	r2,zero,8181a4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  818190:	e0bffe17 	ldw	r2,-8(fp)
  818194:	00bfb616 	blt	zero,r2,818070 <__alt_mem_epcs_flash_controller_0+0xff80f070>
  818198:	00000306 	br	8181a8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  81819c:	0001883a 	nop
  8181a0:	00000106 	br	8181a8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8181a4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8181a8:	e0bffc17 	ldw	r2,-16(fp)
  8181ac:	10800b17 	ldw	r2,44(r2)
  8181b0:	1009883a 	mov	r4,r2
  8181b4:	08149140 	call	814914 <OSSemPost>

  if (ptr != start)
  8181b8:	e0fffd17 	ldw	r3,-12(fp)
  8181bc:	e0bff217 	ldw	r2,-56(fp)
  8181c0:	18800426 	beq	r3,r2,8181d4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  8181c4:	e0fffd17 	ldw	r3,-12(fp)
  8181c8:	e0bff217 	ldw	r2,-56(fp)
  8181cc:	1885c83a 	sub	r2,r3,r2
  8181d0:	00000606 	br	8181ec <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  8181d4:	e0bfff17 	ldw	r2,-4(fp)
  8181d8:	1090000c 	andi	r2,r2,16384
  8181dc:	10000226 	beq	r2,zero,8181e8 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  8181e0:	00bffd44 	movi	r2,-11
  8181e4:	00000106 	br	8181ec <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8181e8:	00bffec4 	movi	r2,-5
}
  8181ec:	e037883a 	mov	sp,fp
  8181f0:	dfc00117 	ldw	ra,4(sp)
  8181f4:	df000017 	ldw	fp,0(sp)
  8181f8:	dec00204 	addi	sp,sp,8
  8181fc:	f800283a 	ret

00818200 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  818200:	defffa04 	addi	sp,sp,-24
  818204:	dfc00515 	stw	ra,20(sp)
  818208:	df000415 	stw	fp,16(sp)
  81820c:	df000404 	addi	fp,sp,16
  818210:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  818214:	0007883a 	mov	r3,zero
  818218:	e0bfff17 	ldw	r2,-4(fp)
  81821c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  818220:	e0bfff17 	ldw	r2,-4(fp)
  818224:	10800104 	addi	r2,r2,4
  818228:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81822c:	0005303a 	rdctl	r2,status
  818230:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818234:	e0fffd17 	ldw	r3,-12(fp)
  818238:	00bfff84 	movi	r2,-2
  81823c:	1884703a 	and	r2,r3,r2
  818240:	1001703a 	wrctl	status,r2
  
  return context;
  818244:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  818248:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  81824c:	081ae240 	call	81ae24 <alt_tick>
  818250:	e0bffc17 	ldw	r2,-16(fp)
  818254:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818258:	e0bffe17 	ldw	r2,-8(fp)
  81825c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  818260:	0001883a 	nop
  818264:	e037883a 	mov	sp,fp
  818268:	dfc00117 	ldw	ra,4(sp)
  81826c:	df000017 	ldw	fp,0(sp)
  818270:	dec00204 	addi	sp,sp,8
  818274:	f800283a 	ret

00818278 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  818278:	defff804 	addi	sp,sp,-32
  81827c:	dfc00715 	stw	ra,28(sp)
  818280:	df000615 	stw	fp,24(sp)
  818284:	df000604 	addi	fp,sp,24
  818288:	e13ffc15 	stw	r4,-16(fp)
  81828c:	e17ffd15 	stw	r5,-12(fp)
  818290:	e1bffe15 	stw	r6,-8(fp)
  818294:	e1ffff15 	stw	r7,-4(fp)
  818298:	e0bfff17 	ldw	r2,-4(fp)
  81829c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8182a0:	d0a0a017 	ldw	r2,-32128(gp)
  8182a4:	1000021e 	bne	r2,zero,8182b0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8182a8:	e0bffb17 	ldw	r2,-20(fp)
  8182ac:	d0a0a015 	stw	r2,-32128(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8182b0:	e0bffc17 	ldw	r2,-16(fp)
  8182b4:	10800104 	addi	r2,r2,4
  8182b8:	00c001c4 	movi	r3,7
  8182bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8182c0:	d8000015 	stw	zero,0(sp)
  8182c4:	e1fffc17 	ldw	r7,-16(fp)
  8182c8:	018020b4 	movhi	r6,130
  8182cc:	31a08004 	addi	r6,r6,-32256
  8182d0:	e17ffe17 	ldw	r5,-8(fp)
  8182d4:	e13ffd17 	ldw	r4,-12(fp)
  8182d8:	080e49c0 	call	80e49c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8182dc:	0001883a 	nop
  8182e0:	e037883a 	mov	sp,fp
  8182e4:	dfc00117 	ldw	ra,4(sp)
  8182e8:	df000017 	ldw	fp,0(sp)
  8182ec:	dec00204 	addi	sp,sp,8
  8182f0:	f800283a 	ret

008182f4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8182f4:	defffa04 	addi	sp,sp,-24
  8182f8:	dfc00515 	stw	ra,20(sp)
  8182fc:	df000415 	stw	fp,16(sp)
  818300:	df000404 	addi	fp,sp,16
  818304:	e13ffd15 	stw	r4,-12(fp)
  818308:	e17ffe15 	stw	r5,-8(fp)
  81830c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  818310:	e0bffd17 	ldw	r2,-12(fp)
  818314:	10800017 	ldw	r2,0(r2)
  818318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81831c:	e0bffc17 	ldw	r2,-16(fp)
  818320:	10c00a04 	addi	r3,r2,40
  818324:	e0bffd17 	ldw	r2,-12(fp)
  818328:	10800217 	ldw	r2,8(r2)
  81832c:	100f883a 	mov	r7,r2
  818330:	e1bfff17 	ldw	r6,-4(fp)
  818334:	e17ffe17 	ldw	r5,-8(fp)
  818338:	1809883a 	mov	r4,r3
  81833c:	081896c0 	call	81896c <altera_avalon_uart_read>
      fd->fd_flags);
}
  818340:	e037883a 	mov	sp,fp
  818344:	dfc00117 	ldw	ra,4(sp)
  818348:	df000017 	ldw	fp,0(sp)
  81834c:	dec00204 	addi	sp,sp,8
  818350:	f800283a 	ret

00818354 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  818354:	defffa04 	addi	sp,sp,-24
  818358:	dfc00515 	stw	ra,20(sp)
  81835c:	df000415 	stw	fp,16(sp)
  818360:	df000404 	addi	fp,sp,16
  818364:	e13ffd15 	stw	r4,-12(fp)
  818368:	e17ffe15 	stw	r5,-8(fp)
  81836c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  818370:	e0bffd17 	ldw	r2,-12(fp)
  818374:	10800017 	ldw	r2,0(r2)
  818378:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81837c:	e0bffc17 	ldw	r2,-16(fp)
  818380:	10c00a04 	addi	r3,r2,40
  818384:	e0bffd17 	ldw	r2,-12(fp)
  818388:	10800217 	ldw	r2,8(r2)
  81838c:	100f883a 	mov	r7,r2
  818390:	e1bfff17 	ldw	r6,-4(fp)
  818394:	e17ffe17 	ldw	r5,-8(fp)
  818398:	1809883a 	mov	r4,r3
  81839c:	0818c100 	call	818c10 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8183a0:	e037883a 	mov	sp,fp
  8183a4:	dfc00117 	ldw	ra,4(sp)
  8183a8:	df000017 	ldw	fp,0(sp)
  8183ac:	dec00204 	addi	sp,sp,8
  8183b0:	f800283a 	ret

008183b4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8183b4:	defffc04 	addi	sp,sp,-16
  8183b8:	dfc00315 	stw	ra,12(sp)
  8183bc:	df000215 	stw	fp,8(sp)
  8183c0:	df000204 	addi	fp,sp,8
  8183c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8183c8:	e0bfff17 	ldw	r2,-4(fp)
  8183cc:	10800017 	ldw	r2,0(r2)
  8183d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8183d4:	e0bffe17 	ldw	r2,-8(fp)
  8183d8:	10c00a04 	addi	r3,r2,40
  8183dc:	e0bfff17 	ldw	r2,-4(fp)
  8183e0:	10800217 	ldw	r2,8(r2)
  8183e4:	100b883a 	mov	r5,r2
  8183e8:	1809883a 	mov	r4,r3
  8183ec:	08188dc0 	call	8188dc <altera_avalon_uart_close>
}
  8183f0:	e037883a 	mov	sp,fp
  8183f4:	dfc00117 	ldw	ra,4(sp)
  8183f8:	df000017 	ldw	fp,0(sp)
  8183fc:	dec00204 	addi	sp,sp,8
  818400:	f800283a 	ret

00818404 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  818404:	defff304 	addi	sp,sp,-52
  818408:	dfc00c15 	stw	ra,48(sp)
  81840c:	df000b15 	stw	fp,44(sp)
  818410:	df000b04 	addi	fp,sp,44
  818414:	e13ffd15 	stw	r4,-12(fp)
  818418:	e17ffe15 	stw	r5,-8(fp)
  81841c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  818420:	e0bffd17 	ldw	r2,-12(fp)
  818424:	10800017 	ldw	r2,0(r2)
  818428:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81842c:	e0bffd17 	ldw	r2,-12(fp)
  818430:	10800704 	addi	r2,r2,28
  818434:	e0bffa15 	stw	r2,-24(fp)
  818438:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  81843c:	e0bffb0b 	ldhu	r2,-20(fp)
  818440:	e0fffc84 	addi	r3,fp,-14
  818444:	180b883a 	mov	r5,r3
  818448:	1009883a 	mov	r4,r2
  81844c:	08115640 	call	811564 <OSFlagCreate>
  818450:	1007883a 	mov	r3,r2
  818454:	e0bffa17 	ldw	r2,-24(fp)
  818458:	10c00015 	stw	r3,0(r2)
  return err;
  81845c:	e0bffc83 	ldbu	r2,-14(fp)
  818460:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  818464:	1000241e 	bne	r2,zero,8184f8 <altera_avalon_uart_init+0xf4>
  818468:	e0bffd17 	ldw	r2,-12(fp)
  81846c:	10800804 	addi	r2,r2,32
  818470:	e0bff715 	stw	r2,-36(fp)
  818474:	00800044 	movi	r2,1
  818478:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  81847c:	e0bffb8b 	ldhu	r2,-18(fp)
  818480:	1009883a 	mov	r4,r2
  818484:	08142840 	call	814284 <OSSemCreate>
  818488:	1007883a 	mov	r3,r2
  81848c:	e0bff717 	ldw	r2,-36(fp)
  818490:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  818494:	e0bff717 	ldw	r2,-36(fp)
  818498:	10800017 	ldw	r2,0(r2)
  81849c:	10000226 	beq	r2,zero,8184a8 <altera_avalon_uart_init+0xa4>
  8184a0:	0005883a 	mov	r2,zero
  8184a4:	00000106 	br	8184ac <altera_avalon_uart_init+0xa8>
  8184a8:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8184ac:	1000121e 	bne	r2,zero,8184f8 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  8184b0:	e0bffd17 	ldw	r2,-12(fp)
  8184b4:	10800904 	addi	r2,r2,36
  8184b8:	e0bff815 	stw	r2,-32(fp)
  8184bc:	00800044 	movi	r2,1
  8184c0:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8184c4:	e0bffc0b 	ldhu	r2,-16(fp)
  8184c8:	1009883a 	mov	r4,r2
  8184cc:	08142840 	call	814284 <OSSemCreate>
  8184d0:	1007883a 	mov	r3,r2
  8184d4:	e0bff817 	ldw	r2,-32(fp)
  8184d8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  8184dc:	e0bff817 	ldw	r2,-32(fp)
  8184e0:	10800017 	ldw	r2,0(r2)
  8184e4:	10000226 	beq	r2,zero,8184f0 <altera_avalon_uart_init+0xec>
  8184e8:	0005883a 	mov	r2,zero
  8184ec:	00000106 	br	8184f4 <altera_avalon_uart_init+0xf0>
  8184f0:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8184f4:	10000226 	beq	r2,zero,818500 <altera_avalon_uart_init+0xfc>
  8184f8:	00800044 	movi	r2,1
  8184fc:	00000106 	br	818504 <altera_avalon_uart_init+0x100>
  818500:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  818504:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  818508:	e0bff917 	ldw	r2,-28(fp)
  81850c:	10000f1e 	bne	r2,zero,81854c <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  818510:	e0bffd17 	ldw	r2,-12(fp)
  818514:	00c32004 	movi	r3,3200
  818518:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81851c:	e0bff617 	ldw	r2,-40(fp)
  818520:	10800304 	addi	r2,r2,12
  818524:	e0fffd17 	ldw	r3,-12(fp)
  818528:	18c00117 	ldw	r3,4(r3)
  81852c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  818530:	d8000015 	stw	zero,0(sp)
  818534:	e1fffd17 	ldw	r7,-12(fp)
  818538:	018020b4 	movhi	r6,130
  81853c:	31a15904 	addi	r6,r6,-31388
  818540:	e17fff17 	ldw	r5,-4(fp)
  818544:	e13ffe17 	ldw	r4,-8(fp)
  818548:	080e49c0 	call	80e49c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81854c:	0001883a 	nop
  818550:	e037883a 	mov	sp,fp
  818554:	dfc00117 	ldw	ra,4(sp)
  818558:	df000017 	ldw	fp,0(sp)
  81855c:	dec00204 	addi	sp,sp,8
  818560:	f800283a 	ret

00818564 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  818564:	defffa04 	addi	sp,sp,-24
  818568:	dfc00515 	stw	ra,20(sp)
  81856c:	df000415 	stw	fp,16(sp)
  818570:	df000404 	addi	fp,sp,16
  818574:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  818578:	e0bfff17 	ldw	r2,-4(fp)
  81857c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  818580:	e0bffc17 	ldw	r2,-16(fp)
  818584:	10800017 	ldw	r2,0(r2)
  818588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  81858c:	e0bffd17 	ldw	r2,-12(fp)
  818590:	10800204 	addi	r2,r2,8
  818594:	10800037 	ldwio	r2,0(r2)
  818598:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  81859c:	e0bffd17 	ldw	r2,-12(fp)
  8185a0:	10800204 	addi	r2,r2,8
  8185a4:	0007883a 	mov	r3,zero
  8185a8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8185ac:	e0bffd17 	ldw	r2,-12(fp)
  8185b0:	10800204 	addi	r2,r2,8
  8185b4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8185b8:	e0bffe17 	ldw	r2,-8(fp)
  8185bc:	1080200c 	andi	r2,r2,128
  8185c0:	10000326 	beq	r2,zero,8185d0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8185c4:	e17ffe17 	ldw	r5,-8(fp)
  8185c8:	e13ffc17 	ldw	r4,-16(fp)
  8185cc:	08186000 	call	818600 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8185d0:	e0bffe17 	ldw	r2,-8(fp)
  8185d4:	1081100c 	andi	r2,r2,1088
  8185d8:	10000326 	beq	r2,zero,8185e8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8185dc:	e17ffe17 	ldw	r5,-8(fp)
  8185e0:	e13ffc17 	ldw	r4,-16(fp)
  8185e4:	08187380 	call	818738 <altera_avalon_uart_txirq>
  }
  

}
  8185e8:	0001883a 	nop
  8185ec:	e037883a 	mov	sp,fp
  8185f0:	dfc00117 	ldw	ra,4(sp)
  8185f4:	df000017 	ldw	fp,0(sp)
  8185f8:	dec00204 	addi	sp,sp,8
  8185fc:	f800283a 	ret

00818600 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  818600:	defff904 	addi	sp,sp,-28
  818604:	dfc00615 	stw	ra,24(sp)
  818608:	df000515 	stw	fp,20(sp)
  81860c:	df000504 	addi	fp,sp,20
  818610:	e13ffe15 	stw	r4,-8(fp)
  818614:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  818618:	e0bfff17 	ldw	r2,-4(fp)
  81861c:	108000cc 	andi	r2,r2,3
  818620:	10003f1e 	bne	r2,zero,818720 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  818624:	e0bffe17 	ldw	r2,-8(fp)
  818628:	10c00317 	ldw	r3,12(r2)
  81862c:	e0bffe17 	ldw	r2,-8(fp)
  818630:	10800217 	ldw	r2,8(r2)
  818634:	1880121e 	bne	r3,r2,818680 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  818638:	e0bffe17 	ldw	r2,-8(fp)
  81863c:	10800717 	ldw	r2,28(r2)
  818640:	e0bffc15 	stw	r2,-16(fp)
  818644:	00800044 	movi	r2,1
  818648:	e0bffd0d 	sth	r2,-12(fp)
  81864c:	00800044 	movi	r2,1
  818650:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  818654:	d0a08b43 	ldbu	r2,-32211(gp)
  818658:	10803fcc 	andi	r2,r2,255
  81865c:	10000826 	beq	r2,zero,818680 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
  818660:	e0bffd0b 	ldhu	r2,-12(fp)
  818664:	e0fffd83 	ldbu	r3,-10(fp)
  818668:	e13ffdc4 	addi	r4,fp,-9
  81866c:	200f883a 	mov	r7,r4
  818670:	180d883a 	mov	r6,r3
  818674:	100b883a 	mov	r5,r2
  818678:	e13ffc17 	ldw	r4,-16(fp)
  81867c:	08121400 	call	812140 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  818680:	e0bffe17 	ldw	r2,-8(fp)
  818684:	10800317 	ldw	r2,12(r2)
  818688:	10800044 	addi	r2,r2,1
  81868c:	10800fcc 	andi	r2,r2,63
  818690:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  818694:	e0bffe17 	ldw	r2,-8(fp)
  818698:	10800317 	ldw	r2,12(r2)
  81869c:	e0fffe17 	ldw	r3,-8(fp)
  8186a0:	18c00017 	ldw	r3,0(r3)
  8186a4:	18c00037 	ldwio	r3,0(r3)
  8186a8:	1809883a 	mov	r4,r3
  8186ac:	e0fffe17 	ldw	r3,-8(fp)
  8186b0:	1885883a 	add	r2,r3,r2
  8186b4:	10800a04 	addi	r2,r2,40
  8186b8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8186bc:	e0bffe17 	ldw	r2,-8(fp)
  8186c0:	e0fffb17 	ldw	r3,-20(fp)
  8186c4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8186c8:	e0bffe17 	ldw	r2,-8(fp)
  8186cc:	10800317 	ldw	r2,12(r2)
  8186d0:	10800044 	addi	r2,r2,1
  8186d4:	10800fcc 	andi	r2,r2,63
  8186d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8186dc:	e0bffe17 	ldw	r2,-8(fp)
  8186e0:	10c00217 	ldw	r3,8(r2)
  8186e4:	e0bffb17 	ldw	r2,-20(fp)
  8186e8:	18800e1e 	bne	r3,r2,818724 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8186ec:	e0bffe17 	ldw	r2,-8(fp)
  8186f0:	10c00117 	ldw	r3,4(r2)
  8186f4:	00bfdfc4 	movi	r2,-129
  8186f8:	1886703a 	and	r3,r3,r2
  8186fc:	e0bffe17 	ldw	r2,-8(fp)
  818700:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  818704:	e0bffe17 	ldw	r2,-8(fp)
  818708:	10800017 	ldw	r2,0(r2)
  81870c:	10800304 	addi	r2,r2,12
  818710:	e0fffe17 	ldw	r3,-8(fp)
  818714:	18c00117 	ldw	r3,4(r3)
  818718:	10c00035 	stwio	r3,0(r2)
  81871c:	00000106 	br	818724 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  818720:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  818724:	e037883a 	mov	sp,fp
  818728:	dfc00117 	ldw	ra,4(sp)
  81872c:	df000017 	ldw	fp,0(sp)
  818730:	dec00204 	addi	sp,sp,8
  818734:	f800283a 	ret

00818738 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  818738:	defffa04 	addi	sp,sp,-24
  81873c:	dfc00515 	stw	ra,20(sp)
  818740:	df000415 	stw	fp,16(sp)
  818744:	df000404 	addi	fp,sp,16
  818748:	e13ffe15 	stw	r4,-8(fp)
  81874c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  818750:	e0bffe17 	ldw	r2,-8(fp)
  818754:	10c00417 	ldw	r3,16(r2)
  818758:	e0bffe17 	ldw	r2,-8(fp)
  81875c:	10800517 	ldw	r2,20(r2)
  818760:	18804726 	beq	r3,r2,818880 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  818764:	e0bffe17 	ldw	r2,-8(fp)
  818768:	10800617 	ldw	r2,24(r2)
  81876c:	1080008c 	andi	r2,r2,2
  818770:	10000326 	beq	r2,zero,818780 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  818774:	e0bfff17 	ldw	r2,-4(fp)
  818778:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81877c:	10003226 	beq	r2,zero,818848 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  818780:	e0bffe17 	ldw	r2,-8(fp)
  818784:	10c00417 	ldw	r3,16(r2)
  818788:	e0bffe17 	ldw	r2,-8(fp)
  81878c:	10800517 	ldw	r2,20(r2)
  818790:	10800044 	addi	r2,r2,1
  818794:	10800fcc 	andi	r2,r2,63
  818798:	1880121e 	bne	r3,r2,8187e4 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
  81879c:	e0bffe17 	ldw	r2,-8(fp)
  8187a0:	10800717 	ldw	r2,28(r2)
  8187a4:	e0bffc15 	stw	r2,-16(fp)
  8187a8:	00800084 	movi	r2,2
  8187ac:	e0bffd0d 	sth	r2,-12(fp)
  8187b0:	00800044 	movi	r2,1
  8187b4:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8187b8:	d0a08b43 	ldbu	r2,-32211(gp)
  8187bc:	10803fcc 	andi	r2,r2,255
  8187c0:	10000826 	beq	r2,zero,8187e4 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
  8187c4:	e0bffd0b 	ldhu	r2,-12(fp)
  8187c8:	e0fffd83 	ldbu	r3,-10(fp)
  8187cc:	e13ffdc4 	addi	r4,fp,-9
  8187d0:	200f883a 	mov	r7,r4
  8187d4:	180d883a 	mov	r6,r3
  8187d8:	100b883a 	mov	r5,r2
  8187dc:	e13ffc17 	ldw	r4,-16(fp)
  8187e0:	08121400 	call	812140 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8187e4:	e0bffe17 	ldw	r2,-8(fp)
  8187e8:	10800017 	ldw	r2,0(r2)
  8187ec:	10800104 	addi	r2,r2,4
  8187f0:	e0fffe17 	ldw	r3,-8(fp)
  8187f4:	18c00417 	ldw	r3,16(r3)
  8187f8:	e13ffe17 	ldw	r4,-8(fp)
  8187fc:	20c7883a 	add	r3,r4,r3
  818800:	18c01a04 	addi	r3,r3,104
  818804:	18c00003 	ldbu	r3,0(r3)
  818808:	18c03fcc 	andi	r3,r3,255
  81880c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  818810:	e0bffe17 	ldw	r2,-8(fp)
  818814:	10800417 	ldw	r2,16(r2)
  818818:	10800044 	addi	r2,r2,1
  81881c:	e0fffe17 	ldw	r3,-8(fp)
  818820:	18800415 	stw	r2,16(r3)
  818824:	10c00fcc 	andi	r3,r2,63
  818828:	e0bffe17 	ldw	r2,-8(fp)
  81882c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  818830:	e0bffe17 	ldw	r2,-8(fp)
  818834:	10800117 	ldw	r2,4(r2)
  818838:	10c01014 	ori	r3,r2,64
  81883c:	e0bffe17 	ldw	r2,-8(fp)
  818840:	10c00115 	stw	r3,4(r2)
  818844:	00000e06 	br	818880 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  818848:	e0bffe17 	ldw	r2,-8(fp)
  81884c:	10800017 	ldw	r2,0(r2)
  818850:	10800204 	addi	r2,r2,8
  818854:	10800037 	ldwio	r2,0(r2)
  818858:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81885c:	e0bfff17 	ldw	r2,-4(fp)
  818860:	1082000c 	andi	r2,r2,2048
  818864:	1000061e 	bne	r2,zero,818880 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  818868:	e0bffe17 	ldw	r2,-8(fp)
  81886c:	10c00117 	ldw	r3,4(r2)
  818870:	00bfefc4 	movi	r2,-65
  818874:	1886703a 	and	r3,r3,r2
  818878:	e0bffe17 	ldw	r2,-8(fp)
  81887c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  818880:	e0bffe17 	ldw	r2,-8(fp)
  818884:	10c00417 	ldw	r3,16(r2)
  818888:	e0bffe17 	ldw	r2,-8(fp)
  81888c:	10800517 	ldw	r2,20(r2)
  818890:	1880061e 	bne	r3,r2,8188ac <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  818894:	e0bffe17 	ldw	r2,-8(fp)
  818898:	10c00117 	ldw	r3,4(r2)
  81889c:	00beefc4 	movi	r2,-1089
  8188a0:	1886703a 	and	r3,r3,r2
  8188a4:	e0bffe17 	ldw	r2,-8(fp)
  8188a8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8188ac:	e0bffe17 	ldw	r2,-8(fp)
  8188b0:	10800017 	ldw	r2,0(r2)
  8188b4:	10800304 	addi	r2,r2,12
  8188b8:	e0fffe17 	ldw	r3,-8(fp)
  8188bc:	18c00117 	ldw	r3,4(r3)
  8188c0:	10c00035 	stwio	r3,0(r2)
}
  8188c4:	0001883a 	nop
  8188c8:	e037883a 	mov	sp,fp
  8188cc:	dfc00117 	ldw	ra,4(sp)
  8188d0:	df000017 	ldw	fp,0(sp)
  8188d4:	dec00204 	addi	sp,sp,8
  8188d8:	f800283a 	ret

008188dc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8188dc:	defffd04 	addi	sp,sp,-12
  8188e0:	df000215 	stw	fp,8(sp)
  8188e4:	df000204 	addi	fp,sp,8
  8188e8:	e13ffe15 	stw	r4,-8(fp)
  8188ec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8188f0:	00000506 	br	818908 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8188f4:	e0bfff17 	ldw	r2,-4(fp)
  8188f8:	1090000c 	andi	r2,r2,16384
  8188fc:	10000226 	beq	r2,zero,818908 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  818900:	00bffd44 	movi	r2,-11
  818904:	00000606 	br	818920 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  818908:	e0bffe17 	ldw	r2,-8(fp)
  81890c:	10c00417 	ldw	r3,16(r2)
  818910:	e0bffe17 	ldw	r2,-8(fp)
  818914:	10800517 	ldw	r2,20(r2)
  818918:	18bff61e 	bne	r3,r2,8188f4 <__alt_mem_epcs_flash_controller_0+0xff80f8f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81891c:	0005883a 	mov	r2,zero
}
  818920:	e037883a 	mov	sp,fp
  818924:	df000017 	ldw	fp,0(sp)
  818928:	dec00104 	addi	sp,sp,4
  81892c:	f800283a 	ret

00818930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818930:	defffe04 	addi	sp,sp,-8
  818934:	dfc00115 	stw	ra,4(sp)
  818938:	df000015 	stw	fp,0(sp)
  81893c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  818940:	d0a03b17 	ldw	r2,-32532(gp)
  818944:	10000326 	beq	r2,zero,818954 <alt_get_errno+0x24>
  818948:	d0a03b17 	ldw	r2,-32532(gp)
  81894c:	103ee83a 	callr	r2
  818950:	00000106 	br	818958 <alt_get_errno+0x28>
  818954:	d0a07e04 	addi	r2,gp,-32264
}
  818958:	e037883a 	mov	sp,fp
  81895c:	dfc00117 	ldw	ra,4(sp)
  818960:	df000017 	ldw	fp,0(sp)
  818964:	dec00204 	addi	sp,sp,8
  818968:	f800283a 	ret

0081896c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  81896c:	deffec04 	addi	sp,sp,-80
  818970:	dfc01315 	stw	ra,76(sp)
  818974:	df001215 	stw	fp,72(sp)
  818978:	df001204 	addi	fp,sp,72
  81897c:	e13ffc15 	stw	r4,-16(fp)
  818980:	e17ffd15 	stw	r5,-12(fp)
  818984:	e1bffe15 	stw	r6,-8(fp)
  818988:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  81898c:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
  818990:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  818994:	e0bfff17 	ldw	r2,-4(fp)
  818998:	1090000c 	andi	r2,r2,16384
  81899c:	1005003a 	cmpeq	r2,r2,zero
  8189a0:	10803fcc 	andi	r2,r2,255
  8189a4:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  8189a8:	e0bffc17 	ldw	r2,-16(fp)
  8189ac:	10800817 	ldw	r2,32(r2)
  8189b0:	e0bff815 	stw	r2,-32(fp)
  8189b4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  8189b8:	e0bff90b 	ldhu	r2,-28(fp)
  8189bc:	e0fffb44 	addi	r3,fp,-19
  8189c0:	180d883a 	mov	r6,r3
  8189c4:	100b883a 	mov	r5,r2
  8189c8:	e13ff817 	ldw	r4,-32(fp)
  8189cc:	081459c0 	call	81459c <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8189d0:	00001306 	br	818a20 <altera_avalon_uart_read+0xb4>
    {
      count++;
  8189d4:	e0bff017 	ldw	r2,-64(fp)
  8189d8:	10800044 	addi	r2,r2,1
  8189dc:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8189e0:	e0bffd17 	ldw	r2,-12(fp)
  8189e4:	10c00044 	addi	r3,r2,1
  8189e8:	e0fffd15 	stw	r3,-12(fp)
  8189ec:	e0fffc17 	ldw	r3,-16(fp)
  8189f0:	18c00217 	ldw	r3,8(r3)
  8189f4:	e13ffc17 	ldw	r4,-16(fp)
  8189f8:	20c7883a 	add	r3,r4,r3
  8189fc:	18c00a04 	addi	r3,r3,40
  818a00:	18c00003 	ldbu	r3,0(r3)
  818a04:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  818a08:	e0bffc17 	ldw	r2,-16(fp)
  818a0c:	10800217 	ldw	r2,8(r2)
  818a10:	10800044 	addi	r2,r2,1
  818a14:	10c00fcc 	andi	r3,r2,63
  818a18:	e0bffc17 	ldw	r2,-16(fp)
  818a1c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  818a20:	e0fff017 	ldw	r3,-64(fp)
  818a24:	e0bffe17 	ldw	r2,-8(fp)
  818a28:	1880050e 	bge	r3,r2,818a40 <altera_avalon_uart_read+0xd4>
  818a2c:	e0bffc17 	ldw	r2,-16(fp)
  818a30:	10c00217 	ldw	r3,8(r2)
  818a34:	e0bffc17 	ldw	r2,-16(fp)
  818a38:	10800317 	ldw	r2,12(r2)
  818a3c:	18bfe51e 	bne	r3,r2,8189d4 <__alt_mem_epcs_flash_controller_0+0xff80f9d4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  818a40:	e0bff017 	ldw	r2,-64(fp)
  818a44:	10003a1e 	bne	r2,zero,818b30 <altera_avalon_uart_read+0x1c4>
  818a48:	e0bffc17 	ldw	r2,-16(fp)
  818a4c:	10c00217 	ldw	r3,8(r2)
  818a50:	e0bffc17 	ldw	r2,-16(fp)
  818a54:	10800317 	ldw	r2,12(r2)
  818a58:	1880351e 	bne	r3,r2,818b30 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
  818a5c:	e0bff117 	ldw	r2,-60(fp)
  818a60:	1000071e 	bne	r2,zero,818a80 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  818a64:	08189300 	call	818930 <alt_get_errno>
  818a68:	1007883a 	mov	r3,r2
  818a6c:	008002c4 	movi	r2,11
  818a70:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  818a74:	00800044 	movi	r2,1
  818a78:	e0bfef05 	stb	r2,-68(fp)
        break;
  818a7c:	00003006 	br	818b40 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818a80:	0005303a 	rdctl	r2,status
  818a84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818a88:	e0fff517 	ldw	r3,-44(fp)
  818a8c:	00bfff84 	movi	r2,-2
  818a90:	1884703a 	and	r2,r3,r2
  818a94:	1001703a 	wrctl	status,r2
  
  return context;
  818a98:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  818a9c:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  818aa0:	e0bffc17 	ldw	r2,-16(fp)
  818aa4:	10800117 	ldw	r2,4(r2)
  818aa8:	10c02014 	ori	r3,r2,128
  818aac:	e0bffc17 	ldw	r2,-16(fp)
  818ab0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  818ab4:	e0bffc17 	ldw	r2,-16(fp)
  818ab8:	10800017 	ldw	r2,0(r2)
  818abc:	10800304 	addi	r2,r2,12
  818ac0:	e0fffc17 	ldw	r3,-16(fp)
  818ac4:	18c00117 	ldw	r3,4(r3)
  818ac8:	10c00035 	stwio	r3,0(r2)
  818acc:	e0bff417 	ldw	r2,-48(fp)
  818ad0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818ad4:	e0bff617 	ldw	r2,-40(fp)
  818ad8:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
  818adc:	e0bffc17 	ldw	r2,-16(fp)
  818ae0:	10800717 	ldw	r2,28(r2)
  818ae4:	e0bff215 	stw	r2,-56(fp)
  818ae8:	00800044 	movi	r2,1
  818aec:	e0bff98d 	sth	r2,-26(fp)
  818af0:	00bfe0c4 	movi	r2,-125
  818af4:	e0bffa05 	stb	r2,-24(fp)
  818af8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  818afc:	d0a08b43 	ldbu	r2,-32211(gp)
  818b00:	10803fcc 	andi	r2,r2,255
  818b04:	10000a26 	beq	r2,zero,818b30 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  818b08:	e0fff98b 	ldhu	r3,-26(fp)
  818b0c:	e13ffa03 	ldbu	r4,-24(fp)
  818b10:	e17ffa8b 	ldhu	r5,-22(fp)
  818b14:	e0bffb04 	addi	r2,fp,-20
  818b18:	d8800015 	stw	r2,0(sp)
  818b1c:	280f883a 	mov	r7,r5
  818b20:	200d883a 	mov	r6,r4
  818b24:	180b883a 	mov	r5,r3
  818b28:	e13ff217 	ldw	r4,-56(fp)
  818b2c:	0811b280 	call	811b28 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  818b30:	e0bff017 	ldw	r2,-64(fp)
  818b34:	1000021e 	bne	r2,zero,818b40 <altera_avalon_uart_read+0x1d4>
  818b38:	e0bffe17 	ldw	r2,-8(fp)
  818b3c:	103fb81e 	bne	r2,zero,818a20 <__alt_mem_epcs_flash_controller_0+0xff80fa20>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  818b40:	e0bffc17 	ldw	r2,-16(fp)
  818b44:	10800817 	ldw	r2,32(r2)
  818b48:	1009883a 	mov	r4,r2
  818b4c:	08149140 	call	814914 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818b50:	0005303a 	rdctl	r2,status
  818b54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818b58:	e0fff717 	ldw	r3,-36(fp)
  818b5c:	00bfff84 	movi	r2,-2
  818b60:	1884703a 	and	r2,r3,r2
  818b64:	1001703a 	wrctl	status,r2
  
  return context;
  818b68:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  818b6c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  818b70:	e0bffc17 	ldw	r2,-16(fp)
  818b74:	10800117 	ldw	r2,4(r2)
  818b78:	10c02014 	ori	r3,r2,128
  818b7c:	e0bffc17 	ldw	r2,-16(fp)
  818b80:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  818b84:	e0bffc17 	ldw	r2,-16(fp)
  818b88:	10800017 	ldw	r2,0(r2)
  818b8c:	10800304 	addi	r2,r2,12
  818b90:	e0fffc17 	ldw	r3,-16(fp)
  818b94:	18c00117 	ldw	r3,4(r3)
  818b98:	10c00035 	stwio	r3,0(r2)
  818b9c:	e0bff417 	ldw	r2,-48(fp)
  818ba0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818ba4:	e0bff317 	ldw	r2,-52(fp)
  818ba8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  818bac:	e0bfef03 	ldbu	r2,-68(fp)
  818bb0:	10000226 	beq	r2,zero,818bbc <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
  818bb4:	00bffd44 	movi	r2,-11
  818bb8:	00000106 	br	818bc0 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
  818bbc:	e0bff017 	ldw	r2,-64(fp)
  }
}
  818bc0:	e037883a 	mov	sp,fp
  818bc4:	dfc00117 	ldw	ra,4(sp)
  818bc8:	df000017 	ldw	fp,0(sp)
  818bcc:	dec00204 	addi	sp,sp,8
  818bd0:	f800283a 	ret

00818bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818bd4:	defffe04 	addi	sp,sp,-8
  818bd8:	dfc00115 	stw	ra,4(sp)
  818bdc:	df000015 	stw	fp,0(sp)
  818be0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  818be4:	d0a03b17 	ldw	r2,-32532(gp)
  818be8:	10000326 	beq	r2,zero,818bf8 <alt_get_errno+0x24>
  818bec:	d0a03b17 	ldw	r2,-32532(gp)
  818bf0:	103ee83a 	callr	r2
  818bf4:	00000106 	br	818bfc <alt_get_errno+0x28>
  818bf8:	d0a07e04 	addi	r2,gp,-32264
}
  818bfc:	e037883a 	mov	sp,fp
  818c00:	dfc00117 	ldw	ra,4(sp)
  818c04:	df000017 	ldw	fp,0(sp)
  818c08:	dec00204 	addi	sp,sp,8
  818c0c:	f800283a 	ret

00818c10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  818c10:	deffec04 	addi	sp,sp,-80
  818c14:	dfc01315 	stw	ra,76(sp)
  818c18:	df001215 	stw	fp,72(sp)
  818c1c:	df001204 	addi	fp,sp,72
  818c20:	e13ffc15 	stw	r4,-16(fp)
  818c24:	e17ffd15 	stw	r5,-12(fp)
  818c28:	e1bffe15 	stw	r6,-8(fp)
  818c2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  818c30:	e0bffe17 	ldw	r2,-8(fp)
  818c34:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  818c38:	e0bfff17 	ldw	r2,-4(fp)
  818c3c:	1090000c 	andi	r2,r2,16384
  818c40:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  818c44:	e0bffc17 	ldw	r2,-16(fp)
  818c48:	10800917 	ldw	r2,36(r2)
  818c4c:	e0bff815 	stw	r2,-32(fp)
  818c50:	e03ff90d 	sth	zero,-28(fp)
  818c54:	e0bff90b 	ldhu	r2,-28(fp)
  818c58:	e0fffb44 	addi	r3,fp,-19
  818c5c:	180d883a 	mov	r6,r3
  818c60:	100b883a 	mov	r5,r2
  818c64:	e13ff817 	ldw	r4,-32(fp)
  818c68:	081459c0 	call	81459c <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  818c6c:	00005106 	br	818db4 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  818c70:	e0bffc17 	ldw	r2,-16(fp)
  818c74:	10800517 	ldw	r2,20(r2)
  818c78:	10800044 	addi	r2,r2,1
  818c7c:	10800fcc 	andi	r2,r2,63
  818c80:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  818c84:	e0bffc17 	ldw	r2,-16(fp)
  818c88:	10c00417 	ldw	r3,16(r2)
  818c8c:	e0bff217 	ldw	r2,-56(fp)
  818c90:	1880371e 	bne	r3,r2,818d70 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
  818c94:	e0bff017 	ldw	r2,-64(fp)
  818c98:	10000526 	beq	r2,zero,818cb0 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  818c9c:	0818bd40 	call	818bd4 <alt_get_errno>
  818ca0:	1007883a 	mov	r3,r2
  818ca4:	008002c4 	movi	r2,11
  818ca8:	18800015 	stw	r2,0(r3)
        break;
  818cac:	00004306 	br	818dbc <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818cb0:	0005303a 	rdctl	r2,status
  818cb4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818cb8:	e0fff517 	ldw	r3,-44(fp)
  818cbc:	00bfff84 	movi	r2,-2
  818cc0:	1884703a 	and	r2,r3,r2
  818cc4:	1001703a 	wrctl	status,r2
  
  return context;
  818cc8:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  818ccc:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  818cd0:	e0bffc17 	ldw	r2,-16(fp)
  818cd4:	10800117 	ldw	r2,4(r2)
  818cd8:	10c11014 	ori	r3,r2,1088
  818cdc:	e0bffc17 	ldw	r2,-16(fp)
  818ce0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  818ce4:	e0bffc17 	ldw	r2,-16(fp)
  818ce8:	10800017 	ldw	r2,0(r2)
  818cec:	10800304 	addi	r2,r2,12
  818cf0:	e0fffc17 	ldw	r3,-16(fp)
  818cf4:	18c00117 	ldw	r3,4(r3)
  818cf8:	10c00035 	stwio	r3,0(r2)
  818cfc:	e0bff417 	ldw	r2,-48(fp)
  818d00:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818d04:	e0bff117 	ldw	r2,-60(fp)
  818d08:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
  818d0c:	e0bffc17 	ldw	r2,-16(fp)
  818d10:	10800717 	ldw	r2,28(r2)
  818d14:	e0bff315 	stw	r2,-52(fp)
  818d18:	00800084 	movi	r2,2
  818d1c:	e0bff98d 	sth	r2,-26(fp)
  818d20:	00bfe0c4 	movi	r2,-125
  818d24:	e0bffa05 	stb	r2,-24(fp)
  818d28:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  818d2c:	d0a08b43 	ldbu	r2,-32211(gp)
  818d30:	10803fcc 	andi	r2,r2,255
  818d34:	10000a26 	beq	r2,zero,818d60 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  818d38:	e0fff98b 	ldhu	r3,-26(fp)
  818d3c:	e13ffa03 	ldbu	r4,-24(fp)
  818d40:	e17ffa8b 	ldhu	r5,-22(fp)
  818d44:	e0bffb04 	addi	r2,fp,-20
  818d48:	d8800015 	stw	r2,0(sp)
  818d4c:	280f883a 	mov	r7,r5
  818d50:	200d883a 	mov	r6,r4
  818d54:	180b883a 	mov	r5,r3
  818d58:	e13ff317 	ldw	r4,-52(fp)
  818d5c:	0811b280 	call	811b28 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  818d60:	e0bffc17 	ldw	r2,-16(fp)
  818d64:	10c00417 	ldw	r3,16(r2)
  818d68:	e0bff217 	ldw	r2,-56(fp)
  818d6c:	18bfe726 	beq	r3,r2,818d0c <__alt_mem_epcs_flash_controller_0+0xff80fd0c>
      }
    }

    count--;
  818d70:	e0bfef17 	ldw	r2,-68(fp)
  818d74:	10bfffc4 	addi	r2,r2,-1
  818d78:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  818d7c:	e0bffc17 	ldw	r2,-16(fp)
  818d80:	10c00517 	ldw	r3,20(r2)
  818d84:	e0bffd17 	ldw	r2,-12(fp)
  818d88:	11000044 	addi	r4,r2,1
  818d8c:	e13ffd15 	stw	r4,-12(fp)
  818d90:	10800003 	ldbu	r2,0(r2)
  818d94:	1009883a 	mov	r4,r2
  818d98:	e0bffc17 	ldw	r2,-16(fp)
  818d9c:	10c5883a 	add	r2,r2,r3
  818da0:	10801a04 	addi	r2,r2,104
  818da4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  818da8:	e0bffc17 	ldw	r2,-16(fp)
  818dac:	e0fff217 	ldw	r3,-56(fp)
  818db0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  818db4:	e0bfef17 	ldw	r2,-68(fp)
  818db8:	103fad1e 	bne	r2,zero,818c70 <__alt_mem_epcs_flash_controller_0+0xff80fc70>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  818dbc:	e0bffc17 	ldw	r2,-16(fp)
  818dc0:	10800917 	ldw	r2,36(r2)
  818dc4:	1009883a 	mov	r4,r2
  818dc8:	08149140 	call	814914 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818dcc:	0005303a 	rdctl	r2,status
  818dd0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818dd4:	e0fff717 	ldw	r3,-36(fp)
  818dd8:	00bfff84 	movi	r2,-2
  818ddc:	1884703a 	and	r2,r3,r2
  818de0:	1001703a 	wrctl	status,r2
  
  return context;
  818de4:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  818de8:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  818dec:	e0bffc17 	ldw	r2,-16(fp)
  818df0:	10800117 	ldw	r2,4(r2)
  818df4:	10c11014 	ori	r3,r2,1088
  818df8:	e0bffc17 	ldw	r2,-16(fp)
  818dfc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  818e00:	e0bffc17 	ldw	r2,-16(fp)
  818e04:	10800017 	ldw	r2,0(r2)
  818e08:	10800304 	addi	r2,r2,12
  818e0c:	e0fffc17 	ldw	r3,-16(fp)
  818e10:	18c00117 	ldw	r3,4(r3)
  818e14:	10c00035 	stwio	r3,0(r2)
  818e18:	e0bff417 	ldw	r2,-48(fp)
  818e1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818e20:	e0bff617 	ldw	r2,-40(fp)
  818e24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  818e28:	e0fffe17 	ldw	r3,-8(fp)
  818e2c:	e0bfef17 	ldw	r2,-68(fp)
  818e30:	1885c83a 	sub	r2,r3,r2
}
  818e34:	e037883a 	mov	sp,fp
  818e38:	dfc00117 	ldw	ra,4(sp)
  818e3c:	df000017 	ldw	fp,0(sp)
  818e40:	dec00204 	addi	sp,sp,8
  818e44:	f800283a 	ret

00818e48 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
  818e48:	defff404 	addi	sp,sp,-48
  818e4c:	df000b15 	stw	fp,44(sp)
  818e50:	df000b04 	addi	fp,sp,44
  818e54:	e13ffc15 	stw	r4,-16(fp)
  818e58:	e17ffd15 	stw	r5,-12(fp)
  818e5c:	e1bffe15 	stw	r6,-8(fp)
  818e60:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
  818e64:	e0bffc17 	ldw	r2,-16(fp)
  818e68:	10800017 	ldw	r2,0(r2)
  818e6c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  818e70:	e0bff517 	ldw	r2,-44(fp)
  818e74:	10800217 	ldw	r2,8(r2)
  818e78:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  818e7c:	e0bff617 	ldw	r2,-40(fp)
  818e80:	10bfffc4 	addi	r2,r2,-1
  818e84:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
  818e88:	e0bffb17 	ldw	r2,-20(fp)
  818e8c:	10800044 	addi	r2,r2,1
  818e90:	e0bffb15 	stw	r2,-20(fp)
  818e94:	e0bffb17 	ldw	r2,-20(fp)
  818e98:	10800003 	ldbu	r2,0(r2)
  818e9c:	10803fcc 	andi	r2,r2,255
  818ea0:	1080201c 	xori	r2,r2,128
  818ea4:	10bfe004 	addi	r2,r2,-128
  818ea8:	103ff71e 	bne	r2,zero,818e88 <__alt_mem_epcs_flash_controller_0+0xff80fe88>
    ;

  return ptr - string;
  818eac:	e0fffb17 	ldw	r3,-20(fp)
  818eb0:	e0bff617 	ldw	r2,-40(fp)
  818eb4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  818eb8:	10800044 	addi	r2,r2,1
  818ebc:	1007883a 	mov	r3,r2
  818ec0:	e0bffd17 	ldw	r2,-12(fp)
  818ec4:	10c5883a 	add	r2,r2,r3
  818ec8:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
  818ecc:	d0a05d04 	addi	r2,gp,-32396
  818ed0:	1007883a 	mov	r3,r2
  r4 = (int)name;
  818ed4:	e0bffd17 	ldw	r2,-12(fp)
  818ed8:	1009883a 	mov	r4,r2
  r5 = flags;
  818edc:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
  818ee0:	e1bfff17 	ldw	r6,-4(fp)
  818ee4:	e0bffd17 	ldw	r2,-12(fp)
  818ee8:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  818eec:	e0bff917 	ldw	r2,-28(fp)
  818ef0:	10bfffc4 	addi	r2,r2,-1
  818ef4:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
  818ef8:	e0bffa17 	ldw	r2,-24(fp)
  818efc:	10800044 	addi	r2,r2,1
  818f00:	e0bffa15 	stw	r2,-24(fp)
  818f04:	e0bffa17 	ldw	r2,-24(fp)
  818f08:	10800003 	ldbu	r2,0(r2)
  818f0c:	10803fcc 	andi	r2,r2,255
  818f10:	1080201c 	xori	r2,r2,128
  818f14:	10bfe004 	addi	r2,r2,-128
  818f18:	103ff71e 	bne	r2,zero,818ef8 <__alt_mem_epcs_flash_controller_0+0xff80fef8>
    ;

  return ptr - string;
  818f1c:	e1fffa17 	ldw	r7,-24(fp)
  818f20:	e0bff917 	ldw	r2,-28(fp)
  818f24:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
  818f28:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
  818f2c:	003da07a 	break	1

  handle = (void *)r2;
  818f30:	e0bff715 	stw	r2,-36(fp)
  error = r3;
  818f34:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
  818f38:	e0bff817 	ldw	r2,-32(fp)
  818f3c:	1000031e 	bne	r2,zero,818f4c <alt_hostfs_open+0x104>
    fd->priv = handle;
  818f40:	e0bffc17 	ldw	r2,-16(fp)
  818f44:	e0fff717 	ldw	r3,-36(fp)
  818f48:	10c00115 	stw	r3,4(r2)

  return -error;
  818f4c:	e0bff817 	ldw	r2,-32(fp)
  818f50:	0085c83a 	sub	r2,zero,r2
}
  818f54:	e037883a 	mov	sp,fp
  818f58:	df000017 	ldw	fp,0(sp)
  818f5c:	dec00104 	addi	sp,sp,4
  818f60:	f800283a 	ret

00818f64 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
  818f64:	defffd04 	addi	sp,sp,-12
  818f68:	df000215 	stw	fp,8(sp)
  818f6c:	df000204 	addi	fp,sp,8
  818f70:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
  818f74:	d0a06004 	addi	r2,gp,-32384
  818f78:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  818f7c:	e0bfff17 	ldw	r2,-4(fp)
  818f80:	10800117 	ldw	r2,4(r2)
  818f84:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
  818f88:	003da07a 	break	1

  error = r3;
  818f8c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
  818f90:	e0bffe17 	ldw	r2,-8(fp)
  818f94:	0085c83a 	sub	r2,zero,r2
}
  818f98:	e037883a 	mov	sp,fp
  818f9c:	df000017 	ldw	fp,0(sp)
  818fa0:	dec00104 	addi	sp,sp,4
  818fa4:	f800283a 	ret

00818fa8 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
  818fa8:	defffa04 	addi	sp,sp,-24
  818fac:	df000515 	stw	fp,20(sp)
  818fb0:	df000504 	addi	fp,sp,20
  818fb4:	e13ffd15 	stw	r4,-12(fp)
  818fb8:	e17ffe15 	stw	r5,-8(fp)
  818fbc:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
  818fc0:	d0a06304 	addi	r2,gp,-32372
  818fc4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  818fc8:	e0bffd17 	ldw	r2,-12(fp)
  818fcc:	10800117 	ldw	r2,4(r2)
  818fd0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
  818fd4:	e0bffe17 	ldw	r2,-8(fp)
  818fd8:	100b883a 	mov	r5,r2
  r6 = len;
  818fdc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
  818fe0:	003da07a 	break	1

  rc = r2;
  818fe4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
  818fe8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
  818fec:	e0bffc17 	ldw	r2,-16(fp)
  818ff0:	10000326 	beq	r2,zero,819000 <alt_hostfs_read+0x58>
  818ff4:	e0bffc17 	ldw	r2,-16(fp)
  818ff8:	0085c83a 	sub	r2,zero,r2
  818ffc:	00000106 	br	819004 <alt_hostfs_read+0x5c>
  819000:	e0bffb17 	ldw	r2,-20(fp)
}
  819004:	e037883a 	mov	sp,fp
  819008:	df000017 	ldw	fp,0(sp)
  81900c:	dec00104 	addi	sp,sp,4
  819010:	f800283a 	ret

00819014 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
  819014:	defffa04 	addi	sp,sp,-24
  819018:	df000515 	stw	fp,20(sp)
  81901c:	df000504 	addi	fp,sp,20
  819020:	e13ffd15 	stw	r4,-12(fp)
  819024:	e17ffe15 	stw	r5,-8(fp)
  819028:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
  81902c:	d0a06604 	addi	r2,gp,-32360
  819030:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  819034:	e0bffd17 	ldw	r2,-12(fp)
  819038:	10800117 	ldw	r2,4(r2)
  81903c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
  819040:	e0bffe17 	ldw	r2,-8(fp)
  819044:	100b883a 	mov	r5,r2
  r6 = len;
  819048:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
  81904c:	003da07a 	break	1

  rc = r2;
  819050:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
  819054:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
  819058:	e0bffc17 	ldw	r2,-16(fp)
  81905c:	10000326 	beq	r2,zero,81906c <alt_hostfs_write+0x58>
  819060:	e0bffc17 	ldw	r2,-16(fp)
  819064:	0085c83a 	sub	r2,zero,r2
  819068:	00000106 	br	819070 <alt_hostfs_write+0x5c>
  81906c:	e0bffb17 	ldw	r2,-20(fp)
}
  819070:	e037883a 	mov	sp,fp
  819074:	df000017 	ldw	fp,0(sp)
  819078:	dec00104 	addi	sp,sp,4
  81907c:	f800283a 	ret

00819080 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
  819080:	defffa04 	addi	sp,sp,-24
  819084:	df000515 	stw	fp,20(sp)
  819088:	df000504 	addi	fp,sp,20
  81908c:	e13ffd15 	stw	r4,-12(fp)
  819090:	e17ffe15 	stw	r5,-8(fp)
  819094:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
  819098:	d0a06904 	addi	r2,gp,-32348
  81909c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  8190a0:	e0bffd17 	ldw	r2,-12(fp)
  8190a4:	10800117 	ldw	r2,4(r2)
  8190a8:	1009883a 	mov	r4,r2
  r5 = ptr;
  8190ac:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
  8190b0:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
  8190b4:	003da07a 	break	1

  rc = r2;
  8190b8:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
  8190bc:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
  8190c0:	e0bffc17 	ldw	r2,-16(fp)
  8190c4:	10000326 	beq	r2,zero,8190d4 <alt_hostfs_seek+0x54>
  8190c8:	e0bffc17 	ldw	r2,-16(fp)
  8190cc:	0085c83a 	sub	r2,zero,r2
  8190d0:	00000106 	br	8190d8 <alt_hostfs_seek+0x58>
  8190d4:	e0bffb17 	ldw	r2,-20(fp)
}
  8190d8:	e037883a 	mov	sp,fp
  8190dc:	df000017 	ldw	fp,0(sp)
  8190e0:	dec00104 	addi	sp,sp,4
  8190e4:	f800283a 	ret

008190e8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
  8190e8:	deffe904 	addi	sp,sp,-92
  8190ec:	df001615 	stw	fp,88(sp)
  8190f0:	df001604 	addi	fp,sp,88
  8190f4:	e13ffe15 	stw	r4,-8(fp)
  8190f8:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
  8190fc:	d0a06c04 	addi	r2,gp,-32336
  819100:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
  819104:	e0bffe17 	ldw	r2,-8(fp)
  819108:	10800117 	ldw	r2,4(r2)
  81910c:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
  819110:	e0bfee04 	addi	r2,fp,-72
  819114:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
  819118:	003da07a 	break	1

  rc = r2;
  81911c:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
  819120:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
  819124:	e0bfec17 	ldw	r2,-80(fp)
  819128:	1000621e 	bne	r2,zero,8192b4 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
  81912c:	e0bfee04 	addi	r2,fp,-72
  819130:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
  819134:	e0bfea17 	ldw	r2,-88(fp)
  819138:	10801004 	addi	r2,r2,64
  81913c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
  819140:	00001606 	br	81919c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  819144:	e0bfea17 	ldw	r2,-88(fp)
  819148:	10800017 	ldw	r2,0(r2)
  81914c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
  819150:	e0bfea17 	ldw	r2,-88(fp)
  819154:	10800017 	ldw	r2,0(r2)
  819158:	10803fec 	andhi	r2,r2,255
  81915c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  819160:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
  819164:	e0bfea17 	ldw	r2,-88(fp)
  819168:	10800017 	ldw	r2,0(r2)
  81916c:	10bfc00c 	andi	r2,r2,65280
  819170:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
  819174:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
  819178:	e0bfea17 	ldw	r2,-88(fp)
  81917c:	10800017 	ldw	r2,0(r2)
  819180:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
  819184:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  819188:	e0bfea17 	ldw	r2,-88(fp)
  81918c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
  819190:	e0bfea17 	ldw	r2,-88(fp)
  819194:	10800104 	addi	r2,r2,4
  819198:	e0bfea15 	stw	r2,-88(fp)
  81919c:	e0ffea17 	ldw	r3,-88(fp)
  8191a0:	e0bfed17 	ldw	r2,-76(fp)
  8191a4:	18bfe736 	bltu	r3,r2,819144 <__alt_mem_epcs_flash_controller_0+0xff810144>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
  8191a8:	e0bfff17 	ldw	r2,-4(fp)
  8191ac:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
  8191b0:	e0bfea17 	ldw	r2,-88(fp)
  8191b4:	10800f04 	addi	r2,r2,60
  8191b8:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
  8191bc:	00000506 	br	8191d4 <alt_hostfs_fstat+0xec>
      *ptr = 0;
  8191c0:	e0bfea17 	ldw	r2,-88(fp)
  8191c4:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
  8191c8:	e0bfea17 	ldw	r2,-88(fp)
  8191cc:	10800104 	addi	r2,r2,4
  8191d0:	e0bfea15 	stw	r2,-88(fp)
  8191d4:	e0ffea17 	ldw	r3,-88(fp)
  8191d8:	e0bfed17 	ldw	r2,-76(fp)
  8191dc:	18bff836 	bltu	r3,r2,8191c0 <__alt_mem_epcs_flash_controller_0+0xff8101c0>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
  8191e0:	e0bfee17 	ldw	r2,-72(fp)
  8191e4:	1007883a 	mov	r3,r2
  8191e8:	e0bfff17 	ldw	r2,-4(fp)
  8191ec:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
  8191f0:	e0bfef17 	ldw	r2,-68(fp)
  8191f4:	1007883a 	mov	r3,r2
  8191f8:	e0bfff17 	ldw	r2,-4(fp)
  8191fc:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
  819200:	e0fff017 	ldw	r3,-64(fp)
  819204:	e0bfff17 	ldw	r2,-4(fp)
  819208:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
  81920c:	e0bff117 	ldw	r2,-60(fp)
  819210:	1007883a 	mov	r3,r2
  819214:	e0bfff17 	ldw	r2,-4(fp)
  819218:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
  81921c:	e0bff217 	ldw	r2,-56(fp)
  819220:	1007883a 	mov	r3,r2
  819224:	e0bfff17 	ldw	r2,-4(fp)
  819228:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
  81922c:	e0bff317 	ldw	r2,-52(fp)
  819230:	1007883a 	mov	r3,r2
  819234:	e0bfff17 	ldw	r2,-4(fp)
  819238:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
  81923c:	e0bff417 	ldw	r2,-48(fp)
  819240:	1007883a 	mov	r3,r2
  819244:	e0bfff17 	ldw	r2,-4(fp)
  819248:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
  81924c:	e0bff617 	ldw	r2,-40(fp)
  819250:	1007883a 	mov	r3,r2
  819254:	e0bfff17 	ldw	r2,-4(fp)
  819258:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
  81925c:	e0bffb17 	ldw	r2,-20(fp)
  819260:	1007883a 	mov	r3,r2
  819264:	e0bfff17 	ldw	r2,-4(fp)
  819268:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
  81926c:	e0bffc17 	ldw	r2,-16(fp)
  819270:	1007883a 	mov	r3,r2
  819274:	e0bfff17 	ldw	r2,-4(fp)
  819278:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
  81927c:	e0bffd17 	ldw	r2,-12(fp)
  819280:	1007883a 	mov	r3,r2
  819284:	e0bfff17 	ldw	r2,-4(fp)
  819288:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
  81928c:	e0bff817 	ldw	r2,-32(fp)
  819290:	1007883a 	mov	r3,r2
  819294:	e0bfff17 	ldw	r2,-4(fp)
  819298:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
  81929c:	e0bffa17 	ldw	r2,-24(fp)
  8192a0:	1007883a 	mov	r3,r2
  8192a4:	e0bfff17 	ldw	r2,-4(fp)
  8192a8:	10c00c15 	stw	r3,48(r2)

    return rc;
  8192ac:	e0bfeb17 	ldw	r2,-84(fp)
  8192b0:	00000206 	br	8192bc <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
  8192b4:	e0bfec17 	ldw	r2,-80(fp)
  8192b8:	0085c83a 	sub	r2,zero,r2
}
  8192bc:	e037883a 	mov	sp,fp
  8192c0:	df000017 	ldw	fp,0(sp)
  8192c4:	dec00104 	addi	sp,sp,4
  8192c8:	f800283a 	ret

008192cc <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  8192cc:	defff904 	addi	sp,sp,-28
  8192d0:	dfc00615 	stw	ra,24(sp)
  8192d4:	df000515 	stw	fp,20(sp)
  8192d8:	df000504 	addi	fp,sp,20
  8192dc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  8192e0:	00800144 	movi	r2,5
  8192e4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  8192e8:	d8000215 	stw	zero,8(sp)
  8192ec:	e0bffe44 	addi	r2,fp,-7
  8192f0:	d8800115 	stw	r2,4(sp)
  8192f4:	00800044 	movi	r2,1
  8192f8:	d8800015 	stw	r2,0(sp)
  8192fc:	e1fffe04 	addi	r7,fp,-8
  819300:	01800044 	movi	r6,1
  819304:	000b883a 	mov	r5,zero
  819308:	e13fff17 	ldw	r4,-4(fp)
  81930c:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  819310:	e0bffe43 	ldbu	r2,-7(fp)
}
  819314:	e037883a 	mov	sp,fp
  819318:	dfc00117 	ldw	ra,4(sp)
  81931c:	df000017 	ldw	fp,0(sp)
  819320:	dec00204 	addi	sp,sp,8
  819324:	f800283a 	ret

00819328 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  819328:	defffd04 	addi	sp,sp,-12
  81932c:	dfc00215 	stw	ra,8(sp)
  819330:	df000115 	stw	fp,4(sp)
  819334:	df000104 	addi	fp,sp,4
  819338:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  81933c:	e13fff17 	ldw	r4,-4(fp)
  819340:	08192cc0 	call	8192cc <epcs_read_status_register>
  819344:	10803fcc 	andi	r2,r2,255
  819348:	1080004c 	andi	r2,r2,1
}
  81934c:	e037883a 	mov	sp,fp
  819350:	dfc00117 	ldw	ra,4(sp)
  819354:	df000017 	ldw	fp,0(sp)
  819358:	dec00204 	addi	sp,sp,8
  81935c:	f800283a 	ret

00819360 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  819360:	defffd04 	addi	sp,sp,-12
  819364:	dfc00215 	stw	ra,8(sp)
  819368:	df000115 	stw	fp,4(sp)
  81936c:	df000104 	addi	fp,sp,4
  819370:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  819374:	0001883a 	nop
  819378:	e13fff17 	ldw	r4,-4(fp)
  81937c:	08193280 	call	819328 <epcs_test_wip>
  819380:	103ffd1e 	bne	r2,zero,819378 <__alt_mem_epcs_flash_controller_0+0xff810378>
  {
  }
}
  819384:	0001883a 	nop
  819388:	e037883a 	mov	sp,fp
  81938c:	dfc00117 	ldw	ra,4(sp)
  819390:	df000017 	ldw	fp,0(sp)
  819394:	dec00204 	addi	sp,sp,8
  819398:	f800283a 	ret

0081939c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  81939c:	defff604 	addi	sp,sp,-40
  8193a0:	dfc00915 	stw	ra,36(sp)
  8193a4:	df000815 	stw	fp,32(sp)
  8193a8:	df000804 	addi	fp,sp,32
  8193ac:	e13ffd15 	stw	r4,-12(fp)
  8193b0:	e17ffe15 	stw	r5,-8(fp)
  8193b4:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  8193b8:	e0bfff17 	ldw	r2,-4(fp)
  8193bc:	10001226 	beq	r2,zero,819408 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  8193c0:	00bff604 	movi	r2,-40
  8193c4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  8193c8:	e0bffe17 	ldw	r2,-8(fp)
  8193cc:	1004d63a 	srli	r2,r2,24
  8193d0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  8193d4:	e0bffe17 	ldw	r2,-8(fp)
  8193d8:	1004d43a 	srli	r2,r2,16
  8193dc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  8193e0:	e0bffe17 	ldw	r2,-8(fp)
  8193e4:	1004d23a 	srli	r2,r2,8
  8193e8:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  8193ec:	e0bffe17 	ldw	r2,-8(fp)
  8193f0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  8193f4:	00800144 	movi	r2,5
  8193f8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  8193fc:	e13ffd17 	ldw	r4,-12(fp)
  819400:	08198500 	call	819850 <epcs_enter_4_bytes_mode>
  819404:	00000c06 	br	819438 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  819408:	00bff604 	movi	r2,-40
  81940c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  819410:	e0bffe17 	ldw	r2,-8(fp)
  819414:	1004d43a 	srli	r2,r2,16
  819418:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  81941c:	e0bffe17 	ldw	r2,-8(fp)
  819420:	1004d23a 	srli	r2,r2,8
  819424:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  819428:	e0bffe17 	ldw	r2,-8(fp)
  81942c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  819430:	00800104 	movi	r2,4
  819434:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  819438:	e13ffd17 	ldw	r4,-12(fp)
  81943c:	081958c0 	call	81958c <epcs_write_enable>

  alt_avalon_spi_command(
  819440:	e0bffb03 	ldbu	r2,-20(fp)
  819444:	e0fffb44 	addi	r3,fp,-19
  819448:	d8000215 	stw	zero,8(sp)
  81944c:	d8000115 	stw	zero,4(sp)
  819450:	d8000015 	stw	zero,0(sp)
  819454:	180f883a 	mov	r7,r3
  819458:	100d883a 	mov	r6,r2
  81945c:	000b883a 	mov	r5,zero
  819460:	e13ffd17 	ldw	r4,-12(fp)
  819464:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  819468:	e13ffd17 	ldw	r4,-12(fp)
  81946c:	08193600 	call	819360 <epcs_await_wip_released>

  if(four_bytes_mode)
  819470:	e0bfff17 	ldw	r2,-4(fp)
  819474:	10000226 	beq	r2,zero,819480 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  819478:	e13ffd17 	ldw	r4,-12(fp)
  81947c:	08198ac0 	call	8198ac <epcs_exit_4_bytes_mode>
  }
}
  819480:	0001883a 	nop
  819484:	e037883a 	mov	sp,fp
  819488:	dfc00117 	ldw	ra,4(sp)
  81948c:	df000017 	ldw	fp,0(sp)
  819490:	dec00204 	addi	sp,sp,8
  819494:	f800283a 	ret

00819498 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  819498:	defff404 	addi	sp,sp,-48
  81949c:	dfc00b15 	stw	ra,44(sp)
  8194a0:	df000a15 	stw	fp,40(sp)
  8194a4:	df000a04 	addi	fp,sp,40
  8194a8:	e13ffc15 	stw	r4,-16(fp)
  8194ac:	e17ffd15 	stw	r5,-12(fp)
  8194b0:	e1bffe15 	stw	r6,-8(fp)
  8194b4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  8194b8:	008000c4 	movi	r2,3
  8194bc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  8194c0:	e0800217 	ldw	r2,8(fp)
  8194c4:	10001026 	beq	r2,zero,819508 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  8194c8:	e0bffd17 	ldw	r2,-12(fp)
  8194cc:	1004d63a 	srli	r2,r2,24
  8194d0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  8194d4:	e0bffd17 	ldw	r2,-12(fp)
  8194d8:	1005d43a 	srai	r2,r2,16
  8194dc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  8194e0:	e0bffd17 	ldw	r2,-12(fp)
  8194e4:	1005d23a 	srai	r2,r2,8
  8194e8:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  8194ec:	e0bffd17 	ldw	r2,-12(fp)
  8194f0:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  8194f4:	00800144 	movi	r2,5
  8194f8:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  8194fc:	e13ffc17 	ldw	r4,-16(fp)
  819500:	08198500 	call	819850 <epcs_enter_4_bytes_mode>
  819504:	00000a06 	br	819530 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  819508:	e0bffd17 	ldw	r2,-12(fp)
  81950c:	1005d43a 	srai	r2,r2,16
  819510:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  819514:	e0bffd17 	ldw	r2,-12(fp)
  819518:	1005d23a 	srai	r2,r2,8
  81951c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  819520:	e0bffd17 	ldw	r2,-12(fp)
  819524:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  819528:	00800104 	movi	r2,4
  81952c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  819530:	e13ffc17 	ldw	r4,-16(fp)
  819534:	08193600 	call	819360 <epcs_await_wip_released>

  alt_avalon_spi_command(
  819538:	e0bfff17 	ldw	r2,-4(fp)
  81953c:	e13ffa04 	addi	r4,fp,-24
  819540:	d8000215 	stw	zero,8(sp)
  819544:	e0fffe17 	ldw	r3,-8(fp)
  819548:	d8c00115 	stw	r3,4(sp)
  81954c:	d8800015 	stw	r2,0(sp)
  819550:	200f883a 	mov	r7,r4
  819554:	e1bff917 	ldw	r6,-28(fp)
  819558:	000b883a 	mov	r5,zero
  81955c:	e13ffc17 	ldw	r4,-16(fp)
  819560:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  819564:	e0800217 	ldw	r2,8(fp)
  819568:	10000226 	beq	r2,zero,819574 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  81956c:	e13ffc17 	ldw	r4,-16(fp)
  819570:	08198ac0 	call	8198ac <epcs_exit_4_bytes_mode>
  }

  return length;
  819574:	e0bfff17 	ldw	r2,-4(fp)
}
  819578:	e037883a 	mov	sp,fp
  81957c:	dfc00117 	ldw	ra,4(sp)
  819580:	df000017 	ldw	fp,0(sp)
  819584:	dec00204 	addi	sp,sp,8
  819588:	f800283a 	ret

0081958c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  81958c:	defff904 	addi	sp,sp,-28
  819590:	dfc00615 	stw	ra,24(sp)
  819594:	df000515 	stw	fp,20(sp)
  819598:	df000504 	addi	fp,sp,20
  81959c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  8195a0:	00800184 	movi	r2,6
  8195a4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  8195a8:	d8000215 	stw	zero,8(sp)
  8195ac:	d8000115 	stw	zero,4(sp)
  8195b0:	d8000015 	stw	zero,0(sp)
  8195b4:	e1fffe04 	addi	r7,fp,-8
  8195b8:	01800044 	movi	r6,1
  8195bc:	000b883a 	mov	r5,zero
  8195c0:	e13fff17 	ldw	r4,-4(fp)
  8195c4:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  8195c8:	0001883a 	nop
  8195cc:	e037883a 	mov	sp,fp
  8195d0:	dfc00117 	ldw	ra,4(sp)
  8195d4:	df000017 	ldw	fp,0(sp)
  8195d8:	dec00204 	addi	sp,sp,8
  8195dc:	f800283a 	ret

008195e0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  8195e0:	defff804 	addi	sp,sp,-32
  8195e4:	dfc00715 	stw	ra,28(sp)
  8195e8:	df000615 	stw	fp,24(sp)
  8195ec:	df000604 	addi	fp,sp,24
  8195f0:	e13ffe15 	stw	r4,-8(fp)
  8195f4:	2805883a 	mov	r2,r5
  8195f8:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  8195fc:	00800044 	movi	r2,1
  819600:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  819604:	e0bfff03 	ldbu	r2,-4(fp)
  819608:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  81960c:	d8000215 	stw	zero,8(sp)
  819610:	d8000115 	stw	zero,4(sp)
  819614:	d8000015 	stw	zero,0(sp)
  819618:	e1fffd04 	addi	r7,fp,-12
  81961c:	01800084 	movi	r6,2
  819620:	000b883a 	mov	r5,zero
  819624:	e13ffe17 	ldw	r4,-8(fp)
  819628:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  81962c:	e13ffe17 	ldw	r4,-8(fp)
  819630:	08193600 	call	819360 <epcs_await_wip_released>
}
  819634:	0001883a 	nop
  819638:	e037883a 	mov	sp,fp
  81963c:	dfc00117 	ldw	ra,4(sp)
  819640:	df000017 	ldw	fp,0(sp)
  819644:	dec00204 	addi	sp,sp,8
  819648:	f800283a 	ret

0081964c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  81964c:	defff404 	addi	sp,sp,-48
  819650:	dfc00b15 	stw	ra,44(sp)
  819654:	df000a15 	stw	fp,40(sp)
  819658:	df000a04 	addi	fp,sp,40
  81965c:	e13ffc15 	stw	r4,-16(fp)
  819660:	e17ffd15 	stw	r5,-12(fp)
  819664:	e1bffe15 	stw	r6,-8(fp)
  819668:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  81966c:	00800084 	movi	r2,2
  819670:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  819674:	e0800217 	ldw	r2,8(fp)
  819678:	10001026 	beq	r2,zero,8196bc <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  81967c:	e0bffd17 	ldw	r2,-12(fp)
  819680:	1004d63a 	srli	r2,r2,24
  819684:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  819688:	e0bffd17 	ldw	r2,-12(fp)
  81968c:	1005d43a 	srai	r2,r2,16
  819690:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  819694:	e0bffd17 	ldw	r2,-12(fp)
  819698:	1005d23a 	srai	r2,r2,8
  81969c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  8196a0:	e0bffd17 	ldw	r2,-12(fp)
  8196a4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  8196a8:	00800144 	movi	r2,5
  8196ac:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  8196b0:	e13ffc17 	ldw	r4,-16(fp)
  8196b4:	08198500 	call	819850 <epcs_enter_4_bytes_mode>
  8196b8:	00000a06 	br	8196e4 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  8196bc:	e0bffd17 	ldw	r2,-12(fp)
  8196c0:	1005d43a 	srai	r2,r2,16
  8196c4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  8196c8:	e0bffd17 	ldw	r2,-12(fp)
  8196cc:	1005d23a 	srai	r2,r2,8
  8196d0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  8196d4:	e0bffd17 	ldw	r2,-12(fp)
  8196d8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  8196dc:	00800104 	movi	r2,4
  8196e0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  8196e4:	e13ffc17 	ldw	r4,-16(fp)
  8196e8:	081958c0 	call	81958c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  8196ec:	e0fffa04 	addi	r3,fp,-24
  8196f0:	00800044 	movi	r2,1
  8196f4:	d8800215 	stw	r2,8(sp)
  8196f8:	d8000115 	stw	zero,4(sp)
  8196fc:	d8000015 	stw	zero,0(sp)
  819700:	180f883a 	mov	r7,r3
  819704:	e1bff917 	ldw	r6,-28(fp)
  819708:	000b883a 	mov	r5,zero
  81970c:	e13ffc17 	ldw	r4,-16(fp)
  819710:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  819714:	e0bfff17 	ldw	r2,-4(fp)
  819718:	d8000215 	stw	zero,8(sp)
  81971c:	d8000115 	stw	zero,4(sp)
  819720:	d8000015 	stw	zero,0(sp)
  819724:	e1fffe17 	ldw	r7,-8(fp)
  819728:	100d883a 	mov	r6,r2
  81972c:	000b883a 	mov	r5,zero
  819730:	e13ffc17 	ldw	r4,-16(fp)
  819734:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  819738:	e13ffc17 	ldw	r4,-16(fp)
  81973c:	08193600 	call	819360 <epcs_await_wip_released>

  if(four_bytes_mode)
  819740:	e0800217 	ldw	r2,8(fp)
  819744:	10000226 	beq	r2,zero,819750 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  819748:	e13ffc17 	ldw	r4,-16(fp)
  81974c:	08198ac0 	call	8198ac <epcs_exit_4_bytes_mode>
  }

  return length;
  819750:	e0bfff17 	ldw	r2,-4(fp)
}
  819754:	e037883a 	mov	sp,fp
  819758:	dfc00117 	ldw	ra,4(sp)
  81975c:	df000017 	ldw	fp,0(sp)
  819760:	dec00204 	addi	sp,sp,8
  819764:	f800283a 	ret

00819768 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  819768:	defff804 	addi	sp,sp,-32
  81976c:	dfc00715 	stw	ra,28(sp)
  819770:	df000615 	stw	fp,24(sp)
  819774:	df000604 	addi	fp,sp,24
  819778:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  81977c:	00bfeac4 	movi	r2,-85
  819780:	e0bffd05 	stb	r2,-12(fp)
  819784:	e03ffd45 	stb	zero,-11(fp)
  819788:	e03ffd85 	stb	zero,-10(fp)
  81978c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  819790:	d8000215 	stw	zero,8(sp)
  819794:	e0bffe04 	addi	r2,fp,-8
  819798:	d8800115 	stw	r2,4(sp)
  81979c:	00800044 	movi	r2,1
  8197a0:	d8800015 	stw	r2,0(sp)
  8197a4:	e1fffd04 	addi	r7,fp,-12
  8197a8:	01800104 	movi	r6,4
  8197ac:	000b883a 	mov	r5,zero
  8197b0:	e13fff17 	ldw	r4,-4(fp)
  8197b4:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  8197b8:	e0bffe03 	ldbu	r2,-8(fp)
}
  8197bc:	e037883a 	mov	sp,fp
  8197c0:	dfc00117 	ldw	ra,4(sp)
  8197c4:	df000017 	ldw	fp,0(sp)
  8197c8:	dec00204 	addi	sp,sp,8
  8197cc:	f800283a 	ret

008197d0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  8197d0:	defff904 	addi	sp,sp,-28
  8197d4:	dfc00615 	stw	ra,24(sp)
  8197d8:	df000515 	stw	fp,20(sp)
  8197dc:	df000504 	addi	fp,sp,20
  8197e0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  8197e4:	00bfe7c4 	movi	r2,-97
  8197e8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  8197ec:	d8000215 	stw	zero,8(sp)
  8197f0:	e0bffe44 	addi	r2,fp,-7
  8197f4:	d8800115 	stw	r2,4(sp)
  8197f8:	008000c4 	movi	r2,3
  8197fc:	d8800015 	stw	r2,0(sp)
  819800:	e1fffe04 	addi	r7,fp,-8
  819804:	01800044 	movi	r6,1
  819808:	000b883a 	mov	r5,zero
  81980c:	e13fff17 	ldw	r4,-4(fp)
  819810:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  819814:	e0bffe43 	ldbu	r2,-7(fp)
  819818:	10803fcc 	andi	r2,r2,255
  81981c:	1006943a 	slli	r3,r2,16
  819820:	e0bffe83 	ldbu	r2,-6(fp)
  819824:	10803fcc 	andi	r2,r2,255
  819828:	1004923a 	slli	r2,r2,8
  81982c:	1886b03a 	or	r3,r3,r2
  819830:	e0bffec3 	ldbu	r2,-5(fp)
  819834:	10803fcc 	andi	r2,r2,255
  819838:	1884b03a 	or	r2,r3,r2
}
  81983c:	e037883a 	mov	sp,fp
  819840:	dfc00117 	ldw	ra,4(sp)
  819844:	df000017 	ldw	fp,0(sp)
  819848:	dec00204 	addi	sp,sp,8
  81984c:	f800283a 	ret

00819850 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  819850:	defff904 	addi	sp,sp,-28
  819854:	dfc00615 	stw	ra,24(sp)
  819858:	df000515 	stw	fp,20(sp)
  81985c:	df000504 	addi	fp,sp,20
  819860:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  819864:	00bfedc4 	movi	r2,-73
  819868:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  81986c:	e13fff17 	ldw	r4,-4(fp)
  819870:	081958c0 	call	81958c <epcs_write_enable>

  alt_avalon_spi_command(
  819874:	d8000215 	stw	zero,8(sp)
  819878:	d8000115 	stw	zero,4(sp)
  81987c:	d8000015 	stw	zero,0(sp)
  819880:	e1fffe04 	addi	r7,fp,-8
  819884:	01800044 	movi	r6,1
  819888:	000b883a 	mov	r5,zero
  81988c:	e13fff17 	ldw	r4,-4(fp)
  819890:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  819894:	0001883a 	nop
}
  819898:	e037883a 	mov	sp,fp
  81989c:	dfc00117 	ldw	ra,4(sp)
  8198a0:	df000017 	ldw	fp,0(sp)
  8198a4:	dec00204 	addi	sp,sp,8
  8198a8:	f800283a 	ret

008198ac <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  8198ac:	defff904 	addi	sp,sp,-28
  8198b0:	dfc00615 	stw	ra,24(sp)
  8198b4:	df000515 	stw	fp,20(sp)
  8198b8:	df000504 	addi	fp,sp,20
  8198bc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  8198c0:	00bffa44 	movi	r2,-23
  8198c4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  8198c8:	e13fff17 	ldw	r4,-4(fp)
  8198cc:	081958c0 	call	81958c <epcs_write_enable>

  alt_avalon_spi_command(
  8198d0:	d8000215 	stw	zero,8(sp)
  8198d4:	d8000115 	stw	zero,4(sp)
  8198d8:	d8000015 	stw	zero,0(sp)
  8198dc:	e1fffe04 	addi	r7,fp,-8
  8198e0:	01800044 	movi	r6,1
  8198e4:	000b883a 	mov	r5,zero
  8198e8:	e13fff17 	ldw	r4,-4(fp)
  8198ec:	081b2a80 	call	81b2a8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  8198f0:	0001883a 	nop
}
  8198f4:	e037883a 	mov	sp,fp
  8198f8:	dfc00117 	ldw	ra,4(sp)
  8198fc:	df000017 	ldw	fp,0(sp)
  819900:	dec00204 	addi	sp,sp,8
  819904:	f800283a 	ret

00819908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  819908:	defffe04 	addi	sp,sp,-8
  81990c:	dfc00115 	stw	ra,4(sp)
  819910:	df000015 	stw	fp,0(sp)
  819914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  819918:	d0a03b17 	ldw	r2,-32532(gp)
  81991c:	10000326 	beq	r2,zero,81992c <alt_get_errno+0x24>
  819920:	d0a03b17 	ldw	r2,-32532(gp)
  819924:	103ee83a 	callr	r2
  819928:	00000106 	br	819930 <alt_get_errno+0x28>
  81992c:	d0a07e04 	addi	r2,gp,-32264
}
  819930:	e037883a 	mov	sp,fp
  819934:	dfc00117 	ldw	ra,4(sp)
  819938:	df000017 	ldw	fp,0(sp)
  81993c:	dec00204 	addi	sp,sp,8
  819940:	f800283a 	ret

00819944 <fifoed_avalon_uart_read>:
 * transfered from a circular buffer. The interrupt handler is then responsible
 * for copying data from the device into this buffer.
 */

int fifoed_avalon_uart_read (fifoed_avalon_uart_state* sp, char* ptr, int len, int flags)
{
  819944:	deffed04 	addi	sp,sp,-76
  819948:	dfc01215 	stw	ra,72(sp)
  81994c:	df001115 	stw	fp,68(sp)
  819950:	df001104 	addi	fp,sp,68
  819954:	e13ffc15 	stw	r4,-16(fp)
  819958:	e17ffd15 	stw	r5,-12(fp)
  81995c:	e1bffe15 	stw	r6,-8(fp)
  819960:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
 // alt_u32         next; //9.3.1 patch

  int count                = 0;
  819964:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  819968:	e0bfff17 	ldw	r2,-4(fp)
  81996c:	1090000c 	andi	r2,r2,16384
  819970:	1005003a 	cmpeq	r2,r2,zero
  819974:	10803fcc 	andi	r2,r2,255
  819978:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
  81997c:	e0bffc17 	ldw	r2,-16(fp)
  819980:	10800817 	ldw	r2,32(r2)
  819984:	e0bff815 	stw	r2,-32(fp)
  819988:	e03ff90d 	sth	zero,-28(fp)
  81998c:	e0bff90b 	ldhu	r2,-28(fp)
  819990:	e0fffb44 	addi	r3,fp,-19
  819994:	180d883a 	mov	r6,r3
  819998:	100b883a 	mov	r5,r2
  81999c:	e13ff817 	ldw	r4,-32(fp)
  8199a0:	081459c0 	call	81459c <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8199a4:	00001706 	br	819a04 <fifoed_avalon_uart_read+0xc0>
    {
      count++;
  8199a8:	e0bff017 	ldw	r2,-64(fp)
  8199ac:	10800044 	addi	r2,r2,1
  8199b0:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8199b4:	e0bffd17 	ldw	r2,-12(fp)
  8199b8:	10c00044 	addi	r3,r2,1
  8199bc:	e0fffd15 	stw	r3,-12(fp)
  8199c0:	e0fffc17 	ldw	r3,-16(fp)
  8199c4:	18c00217 	ldw	r3,8(r3)
  8199c8:	e13ffc17 	ldw	r4,-16(fp)
  8199cc:	20c7883a 	add	r3,r4,r3
  8199d0:	18c00a04 	addi	r3,r3,40
  8199d4:	18c00003 	ldbu	r3,0(r3)
  8199d8:	10c00005 	stb	r3,0(r2)
      
  //  9.3.1 patch  sp->rx_start = (++sp->rx_start) & FIFOED_AVALON_UART_BUF_MSK;
      ++sp->rx_start;
  8199dc:	e0bffc17 	ldw	r2,-16(fp)
  8199e0:	10800217 	ldw	r2,8(r2)
  8199e4:	10c00044 	addi	r3,r2,1
  8199e8:	e0bffc17 	ldw	r2,-16(fp)
  8199ec:	10c00215 	stw	r3,8(r2)
      sp->rx_start = sp->rx_start & FIFOED_AVALON_UART_BUF_MSK; 
  8199f0:	e0bffc17 	ldw	r2,-16(fp)
  8199f4:	10800217 	ldw	r2,8(r2)
  8199f8:	10c00fcc 	andi	r3,r2,63
  8199fc:	e0bffc17 	ldw	r2,-16(fp)
  819a00:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  819a04:	e0fff017 	ldw	r3,-64(fp)
  819a08:	e0bffe17 	ldw	r2,-8(fp)
  819a0c:	1880050e 	bge	r3,r2,819a24 <fifoed_avalon_uart_read+0xe0>
  819a10:	e0bffc17 	ldw	r2,-16(fp)
  819a14:	10c00217 	ldw	r3,8(r2)
  819a18:	e0bffc17 	ldw	r2,-16(fp)
  819a1c:	10800317 	ldw	r2,12(r2)
  819a20:	18bfe11e 	bne	r3,r2,8199a8 <__alt_mem_epcs_flash_controller_0+0xff8109a8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  819a24:	e0bff017 	ldw	r2,-64(fp)
  819a28:	1000381e 	bne	r2,zero,819b0c <fifoed_avalon_uart_read+0x1c8>
  819a2c:	e0bffc17 	ldw	r2,-16(fp)
  819a30:	10c00217 	ldw	r3,8(r2)
  819a34:	e0bffc17 	ldw	r2,-16(fp)
  819a38:	10800317 	ldw	r2,12(r2)
  819a3c:	1880331e 	bne	r3,r2,819b0c <fifoed_avalon_uart_read+0x1c8>
    {
      if (!block)
  819a40:	e0bff117 	ldw	r2,-60(fp)
  819a44:	1000051e 	bne	r2,zero,819a5c <fifoed_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  819a48:	08199080 	call	819908 <alt_get_errno>
  819a4c:	1007883a 	mov	r3,r2
  819a50:	008002c4 	movi	r2,11
  819a54:	18800015 	stw	r2,0(r3)
        break;
  819a58:	00003006 	br	819b1c <fifoed_avalon_uart_read+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819a5c:	0005303a 	rdctl	r2,status
  819a60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819a64:	e0fff517 	ldw	r3,-44(fp)
  819a68:	00bfff84 	movi	r2,-2
  819a6c:	1884703a 	and	r2,r3,r2
  819a70:	1001703a 	wrctl	status,r2
  
  return context;
  819a74:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  819a78:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
  819a7c:	e0bffc17 	ldw	r2,-16(fp)
  819a80:	10800117 	ldw	r2,4(r2)
  819a84:	10c02014 	ori	r3,r2,128
  819a88:	e0bffc17 	ldw	r2,-16(fp)
  819a8c:	10c00115 	stw	r3,4(r2)
       IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819a90:	e0bffc17 	ldw	r2,-16(fp)
  819a94:	10800017 	ldw	r2,0(r2)
  819a98:	10800304 	addi	r2,r2,12
  819a9c:	e0fffc17 	ldw	r3,-16(fp)
  819aa0:	18c00117 	ldw	r3,4(r3)
  819aa4:	10c00035 	stwio	r3,0(r2)
  819aa8:	e0bff417 	ldw	r2,-48(fp)
  819aac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819ab0:	e0bff617 	ldw	r2,-40(fp)
  819ab4:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events,
  819ab8:	e0bffc17 	ldw	r2,-16(fp)
  819abc:	10800717 	ldw	r2,28(r2)
  819ac0:	e0bff215 	stw	r2,-56(fp)
  819ac4:	00800044 	movi	r2,1
  819ac8:	e0bff98d 	sth	r2,-26(fp)
  819acc:	00bfe0c4 	movi	r2,-125
  819ad0:	e0bffa05 	stb	r2,-24(fp)
  819ad4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  819ad8:	d0a08b43 	ldbu	r2,-32211(gp)
  819adc:	10803fcc 	andi	r2,r2,255
  819ae0:	10000a26 	beq	r2,zero,819b0c <fifoed_avalon_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  819ae4:	e0fff98b 	ldhu	r3,-26(fp)
  819ae8:	e13ffa03 	ldbu	r4,-24(fp)
  819aec:	e17ffa8b 	ldhu	r5,-22(fp)
  819af0:	e0bffb04 	addi	r2,fp,-20
  819af4:	d8800015 	stw	r2,0(sp)
  819af8:	280f883a 	mov	r7,r5
  819afc:	200d883a 	mov	r6,r4
  819b00:	180b883a 	mov	r5,r3
  819b04:	e13ff217 	ldw	r4,-56(fp)
  819b08:	0811b280 	call	811b28 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  819b0c:	e0bff017 	ldw	r2,-64(fp)
  819b10:	1000021e 	bne	r2,zero,819b1c <fifoed_avalon_uart_read+0x1d8>
  819b14:	e0bffe17 	ldw	r2,-8(fp)
  819b18:	103fba1e 	bne	r2,zero,819a04 <__alt_mem_epcs_flash_controller_0+0xff810a04>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  819b1c:	e0bffc17 	ldw	r2,-16(fp)
  819b20:	10800817 	ldw	r2,32(r2)
  819b24:	1009883a 	mov	r4,r2
  819b28:	08149140 	call	814914 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819b2c:	0005303a 	rdctl	r2,status
  819b30:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819b34:	e0fff717 	ldw	r3,-36(fp)
  819b38:	00bfff84 	movi	r2,-2
  819b3c:	1884703a 	and	r2,r3,r2
  819b40:	1001703a 	wrctl	status,r2
  
  return context;
  819b44:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  819b48:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
  819b4c:	e0bffc17 	ldw	r2,-16(fp)
  819b50:	10800117 	ldw	r2,4(r2)
  819b54:	10c02014 	ori	r3,r2,128
  819b58:	e0bffc17 	ldw	r2,-16(fp)
  819b5c:	10c00115 	stw	r3,4(r2)
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819b60:	e0bffc17 	ldw	r2,-16(fp)
  819b64:	10800017 	ldw	r2,0(r2)
  819b68:	10800304 	addi	r2,r2,12
  819b6c:	e0fffc17 	ldw	r3,-16(fp)
  819b70:	18c00117 	ldw	r3,4(r3)
  819b74:	10c00035 	stwio	r3,0(r2)
  819b78:	e0bff417 	ldw	r2,-48(fp)
  819b7c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819b80:	e0bff317 	ldw	r2,-52(fp)
  819b84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
  819b88:	e0bff017 	ldw	r2,-64(fp)
}
  819b8c:	e037883a 	mov	sp,fp
  819b90:	dfc00117 	ldw	ra,4(sp)
  819b94:	df000017 	ldw	fp,0(sp)
  819b98:	dec00204 	addi	sp,sp,8
  819b9c:	f800283a 	ret

00819ba0 <fifoed_avalon_uart_write>:
 * transfered to a circular buffer. The interrupt handler is then responsible
 * for copying data from this buffer into the device.
 */

int fifoed_avalon_uart_write (fifoed_avalon_uart_state* sp, const char* ptr, int len, int flags)
{
  819ba0:	deffec04 	addi	sp,sp,-80
  819ba4:	dfc01315 	stw	ra,76(sp)
  819ba8:	df001215 	stw	fp,72(sp)
  819bac:	df001204 	addi	fp,sp,72
  819bb0:	e13ffc15 	stw	r4,-16(fp)
  819bb4:	e17ffd15 	stw	r5,-12(fp)
  819bb8:	e1bffe15 	stw	r6,-8(fp)
  819bbc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int count                = len;
  819bc0:	e0bffe17 	ldw	r2,-8(fp)
  819bc4:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  819bc8:	e0bfff17 	ldw	r2,-4(fp)
  819bcc:	1090000c 	andi	r2,r2,16384
  819bd0:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
  819bd4:	e0bffc17 	ldw	r2,-16(fp)
  819bd8:	10800917 	ldw	r2,36(r2)
  819bdc:	e0bff815 	stw	r2,-32(fp)
  819be0:	e03ff90d 	sth	zero,-28(fp)
  819be4:	e0bff90b 	ldhu	r2,-28(fp)
  819be8:	e0fffb44 	addi	r3,fp,-19
  819bec:	180d883a 	mov	r6,r3
  819bf0:	100b883a 	mov	r5,r2
  819bf4:	e13ff817 	ldw	r4,-32(fp)
  819bf8:	081459c0 	call	81459c <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  819bfc:	00005106 	br	819d44 <fifoed_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
  819c00:	e0bffc17 	ldw	r2,-16(fp)
  819c04:	10800517 	ldw	r2,20(r2)
  819c08:	10800044 	addi	r2,r2,1
  819c0c:	10800fcc 	andi	r2,r2,63
  819c10:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  819c14:	e0bffc17 	ldw	r2,-16(fp)
  819c18:	10c00417 	ldw	r3,16(r2)
  819c1c:	e0bff217 	ldw	r2,-56(fp)
  819c20:	1880371e 	bne	r3,r2,819d00 <fifoed_avalon_uart_write+0x160>
    {
      if (no_block)
  819c24:	e0bff017 	ldw	r2,-64(fp)
  819c28:	10000526 	beq	r2,zero,819c40 <fifoed_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  819c2c:	08199080 	call	819908 <alt_get_errno>
  819c30:	1007883a 	mov	r3,r2
  819c34:	008002c4 	movi	r2,11
  819c38:	18800015 	stw	r2,0(r3)
        break;
  819c3c:	00004306 	br	819d4c <fifoed_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819c40:	0005303a 	rdctl	r2,status
  819c44:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819c48:	e0fff517 	ldw	r3,-44(fp)
  819c4c:	00bfff84 	movi	r2,-2
  819c50:	1884703a 	and	r2,r3,r2
  819c54:	1001703a 	wrctl	status,r2
  
  return context;
  819c58:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  819c5c:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
  819c60:	e0bffc17 	ldw	r2,-16(fp)
  819c64:	10800117 	ldw	r2,4(r2)
  819c68:	10c11014 	ori	r3,r2,1088
  819c6c:	e0bffc17 	ldw	r2,-16(fp)
  819c70:	10c00115 	stw	r3,4(r2)
                        FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819c74:	e0bffc17 	ldw	r2,-16(fp)
  819c78:	10800017 	ldw	r2,0(r2)
  819c7c:	10800304 	addi	r2,r2,12
  819c80:	e0fffc17 	ldw	r3,-16(fp)
  819c84:	18c00117 	ldw	r3,4(r3)
  819c88:	10c00035 	stwio	r3,0(r2)
  819c8c:	e0bff417 	ldw	r2,-48(fp)
  819c90:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819c94:	e0bff117 	ldw	r2,-60(fp)
  819c98:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events,
  819c9c:	e0bffc17 	ldw	r2,-16(fp)
  819ca0:	10800717 	ldw	r2,28(r2)
  819ca4:	e0bff315 	stw	r2,-52(fp)
  819ca8:	00800084 	movi	r2,2
  819cac:	e0bff98d 	sth	r2,-26(fp)
  819cb0:	00bfe0c4 	movi	r2,-125
  819cb4:	e0bffa05 	stb	r2,-24(fp)
  819cb8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  819cbc:	d0a08b43 	ldbu	r2,-32211(gp)
  819cc0:	10803fcc 	andi	r2,r2,255
  819cc4:	10000a26 	beq	r2,zero,819cf0 <fifoed_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  819cc8:	e0fff98b 	ldhu	r3,-26(fp)
  819ccc:	e13ffa03 	ldbu	r4,-24(fp)
  819cd0:	e17ffa8b 	ldhu	r5,-22(fp)
  819cd4:	e0bffb04 	addi	r2,fp,-20
  819cd8:	d8800015 	stw	r2,0(sp)
  819cdc:	280f883a 	mov	r7,r5
  819ce0:	200d883a 	mov	r6,r4
  819ce4:	180b883a 	mov	r5,r3
  819ce8:	e13ff317 	ldw	r4,-52(fp)
  819cec:	0811b280 	call	811b28 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  819cf0:	e0bffc17 	ldw	r2,-16(fp)
  819cf4:	10c00417 	ldw	r3,16(r2)
  819cf8:	e0bff217 	ldw	r2,-56(fp)
  819cfc:	18bfe726 	beq	r3,r2,819c9c <__alt_mem_epcs_flash_controller_0+0xff810c9c>
      }
    }

    count--;
  819d00:	e0bfef17 	ldw	r2,-68(fp)
  819d04:	10bfffc4 	addi	r2,r2,-1
  819d08:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  819d0c:	e0bffc17 	ldw	r2,-16(fp)
  819d10:	10c00517 	ldw	r3,20(r2)
  819d14:	e0bffd17 	ldw	r2,-12(fp)
  819d18:	11000044 	addi	r4,r2,1
  819d1c:	e13ffd15 	stw	r4,-12(fp)
  819d20:	10800003 	ldbu	r2,0(r2)
  819d24:	1009883a 	mov	r4,r2
  819d28:	e0bffc17 	ldw	r2,-16(fp)
  819d2c:	10c5883a 	add	r2,r2,r3
  819d30:	10801a04 	addi	r2,r2,104
  819d34:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  819d38:	e0bffc17 	ldw	r2,-16(fp)
  819d3c:	e0fff217 	ldw	r3,-56(fp)
  819d40:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  819d44:	e0bfef17 	ldw	r2,-68(fp)
  819d48:	103fad1e 	bne	r2,zero,819c00 <__alt_mem_epcs_flash_controller_0+0xff810c00>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
  819d4c:	e0bffc17 	ldw	r2,-16(fp)
  819d50:	10800917 	ldw	r2,36(r2)
  819d54:	1009883a 	mov	r4,r2
  819d58:	08149140 	call	814914 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819d5c:	0005303a 	rdctl	r2,status
  819d60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819d64:	e0fff717 	ldw	r3,-36(fp)
  819d68:	00bfff84 	movi	r2,-2
  819d6c:	1884703a 	and	r2,r3,r2
  819d70:	1001703a 	wrctl	status,r2
  
  return context;
  819d74:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  819d78:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
  819d7c:	e0bffc17 	ldw	r2,-16(fp)
  819d80:	10800117 	ldw	r2,4(r2)
  819d84:	10c11014 	ori	r3,r2,1088
  819d88:	e0bffc17 	ldw	r2,-16(fp)
  819d8c:	10c00115 	stw	r3,4(r2)
                 FIFOED_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819d90:	e0bffc17 	ldw	r2,-16(fp)
  819d94:	10800017 	ldw	r2,0(r2)
  819d98:	10800304 	addi	r2,r2,12
  819d9c:	e0fffc17 	ldw	r3,-16(fp)
  819da0:	18c00117 	ldw	r3,4(r3)
  819da4:	10c00035 	stwio	r3,0(r2)
  819da8:	e0bff417 	ldw	r2,-48(fp)
  819dac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819db0:	e0bff617 	ldw	r2,-40(fp)
  819db4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  819db8:	e0fffe17 	ldw	r3,-8(fp)
  819dbc:	e0bfef17 	ldw	r2,-68(fp)
  819dc0:	1885c83a 	sub	r2,r3,r2
}
  819dc4:	e037883a 	mov	sp,fp
  819dc8:	dfc00117 	ldw	ra,4(sp)
  819dcc:	df000017 	ldw	fp,0(sp)
  819dd0:	dec00204 	addi	sp,sp,8
  819dd4:	f800283a 	ret

00819dd8 <fifoed_avalon_uart_rxirq>:
 * dat ready to be processed.
 */

static void fifoed_avalon_uart_rxirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
  819dd8:	defff904 	addi	sp,sp,-28
  819ddc:	dfc00615 	stw	ra,24(sp)
  819de0:	df000515 	stw	fp,20(sp)
  819de4:	df000504 	addi	fp,sp,20
  819de8:	e13ffe15 	stw	r4,-8(fp)
  819dec:	e17fff15 	stw	r5,-4(fp)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
  819df0:	00004106 	br	819ef8 <fifoed_avalon_uart_rxirq+0x120>
  if (sp->rx_end == sp->rx_start)
  819df4:	e0bffe17 	ldw	r2,-8(fp)
  819df8:	10c00317 	ldw	r3,12(r2)
  819dfc:	e0bffe17 	ldw	r2,-8(fp)
  819e00:	10800217 	ldw	r2,8(r2)
  819e04:	1880121e 	bne	r3,r2,819e50 <fifoed_avalon_uart_rxirq+0x78>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  819e08:	e0bffe17 	ldw	r2,-8(fp)
  819e0c:	10800717 	ldw	r2,28(r2)
  819e10:	e0bffc15 	stw	r2,-16(fp)
  819e14:	00800044 	movi	r2,1
  819e18:	e0bffd0d 	sth	r2,-12(fp)
  819e1c:	00800044 	movi	r2,1
  819e20:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819e24:	d0a08b43 	ldbu	r2,-32211(gp)
  819e28:	10803fcc 	andi	r2,r2,255
  819e2c:	10000826 	beq	r2,zero,819e50 <fifoed_avalon_uart_rxirq+0x78>
  {
    OSFlagPost (group, flags, opt, &err);
  819e30:	e0bffd0b 	ldhu	r2,-12(fp)
  819e34:	e0fffd83 	ldbu	r3,-10(fp)
  819e38:	e13ffdc4 	addi	r4,fp,-9
  819e3c:	200f883a 	mov	r7,r4
  819e40:	180d883a 	mov	r6,r3
  819e44:	100b883a 	mov	r5,r2
  819e48:	e13ffc17 	ldw	r4,-16(fp)
  819e4c:	08121400 	call	812140 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
  819e50:	e0bffe17 	ldw	r2,-8(fp)
  819e54:	10800317 	ldw	r2,12(r2)
  819e58:	10800044 	addi	r2,r2,1
  819e5c:	10800fcc 	andi	r2,r2,63
  819e60:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_FIFOED_AVALON_UART_RXDATA(sp->base);
  819e64:	e0bffe17 	ldw	r2,-8(fp)
  819e68:	10800317 	ldw	r2,12(r2)
  819e6c:	e0fffe17 	ldw	r3,-8(fp)
  819e70:	18c00017 	ldw	r3,0(r3)
  819e74:	18c00037 	ldwio	r3,0(r3)
  819e78:	1809883a 	mov	r4,r3
  819e7c:	e0fffe17 	ldw	r3,-8(fp)
  819e80:	1885883a 	add	r2,r3,r2
  819e84:	10800a04 	addi	r2,r2,40
  819e88:	11000005 	stb	r4,0(r2)
  /* If there was an error, discard the data */

// i have left this in tack but it is not necissarily right.
// next version of the fifo will track the errors in the fifo. 

  if (status & (FIFOED_AVALON_UART_STATUS_PE_MSK | 
  819e8c:	e0bfff17 	ldw	r2,-4(fp)
  819e90:	108000cc 	andi	r2,r2,3
  819e94:	10001f1e 	bne	r2,zero,819f14 <fifoed_avalon_uart_rxirq+0x13c>
                  FIFOED_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  }

  sp->rx_end = next;
  819e98:	e0bffe17 	ldw	r2,-8(fp)
  819e9c:	e0fffb17 	ldw	r3,-20(fp)
  819ea0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
  819ea4:	e0bffe17 	ldw	r2,-8(fp)
  819ea8:	10800317 	ldw	r2,12(r2)
  819eac:	10800044 	addi	r2,r2,1
  819eb0:	10800fcc 	andi	r2,r2,63
  819eb4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  819eb8:	e0bffe17 	ldw	r2,-8(fp)
  819ebc:	10c00217 	ldw	r3,8(r2)
  819ec0:	e0bffb17 	ldw	r2,-20(fp)
  819ec4:	18800c1e 	bne	r3,r2,819ef8 <fifoed_avalon_uart_rxirq+0x120>
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
  819ec8:	e0bffe17 	ldw	r2,-8(fp)
  819ecc:	10c00117 	ldw	r3,4(r2)
  819ed0:	00bfdfc4 	movi	r2,-129
  819ed4:	1886703a 	and	r3,r3,r2
  819ed8:	e0bffe17 	ldw	r2,-8(fp)
  819edc:	10c00115 	stw	r3,4(r2)
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819ee0:	e0bffe17 	ldw	r2,-8(fp)
  819ee4:	10800017 	ldw	r2,0(r2)
  819ee8:	10800304 	addi	r2,r2,12
  819eec:	e0fffe17 	ldw	r3,-8(fp)
  819ef0:	18c00117 	ldw	r3,4(r3)
  819ef4:	10c00035 	stwio	r3,0(r2)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
  819ef8:	e0bffe17 	ldw	r2,-8(fp)
  819efc:	10800017 	ldw	r2,0(r2)
  819f00:	10800204 	addi	r2,r2,8
  819f04:	10800037 	ldwio	r2,0(r2)
  819f08:	1080200c 	andi	r2,r2,128
  819f0c:	103fb91e 	bne	r2,zero,819df4 <__alt_mem_epcs_flash_controller_0+0xff810df4>
  819f10:	00000106 	br	819f18 <fifoed_avalon_uart_rxirq+0x140>
// next version of the fifo will track the errors in the fifo. 

  if (status & (FIFOED_AVALON_UART_STATUS_PE_MSK | 
                  FIFOED_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  819f14:	0001883a 	nop
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  }   
}
}
  819f18:	e037883a 	mov	sp,fp
  819f1c:	dfc00117 	ldw	ra,4(sp)
  819f20:	df000017 	ldw	fp,0(sp)
  819f24:	dec00204 	addi	sp,sp,8
  819f28:	f800283a 	ret

00819f2c <fifoed_avalon_uart_txirq>:
 * data ready to be processed.
 */

static void fifoed_avalon_uart_txirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
  819f2c:	defffa04 	addi	sp,sp,-24
  819f30:	dfc00515 	stw	ra,20(sp)
  819f34:	df000415 	stw	fp,16(sp)
  819f38:	df000404 	addi	fp,sp,16
  819f3c:	e13ffe15 	stw	r4,-8(fp)
  819f40:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  819f44:	e0bffe17 	ldw	r2,-8(fp)
  819f48:	10c00417 	ldw	r3,16(r2)
  819f4c:	e0bffe17 	ldw	r2,-8(fp)
  819f50:	10800517 	ldw	r2,20(r2)
  819f54:	18805326 	beq	r3,r2,81a0a4 <fifoed_avalon_uart_txirq+0x178>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
  819f58:	e0bffe17 	ldw	r2,-8(fp)
  819f5c:	10800617 	ldw	r2,24(r2)
  819f60:	1080008c 	andi	r2,r2,2
  819f64:	10000326 	beq	r2,zero,819f74 <fifoed_avalon_uart_txirq+0x48>
      (status & FIFOED_AVALON_UART_STATUS_CTS_MSK))
  819f68:	e0bfff17 	ldw	r2,-4(fp)
  819f6c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
  819f70:	10003e26 	beq	r2,zero,81a06c <fifoed_avalon_uart_txirq+0x140>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK))
  819f74:	e0bffe17 	ldw	r2,-8(fp)
  819f78:	10c00417 	ldw	r3,16(r2)
  819f7c:	e0bffe17 	ldw	r2,-8(fp)
  819f80:	10800517 	ldw	r2,20(r2)
  819f84:	10800044 	addi	r2,r2,1
  819f88:	10800fcc 	andi	r2,r2,63
  819f8c:	1880261e 	bne	r3,r2,81a028 <fifoed_avalon_uart_txirq+0xfc>
      { 
        ALT_FLAG_POST (sp->events,
  819f90:	e0bffe17 	ldw	r2,-8(fp)
  819f94:	10800717 	ldw	r2,28(r2)
  819f98:	e0bffc15 	stw	r2,-16(fp)
  819f9c:	00800084 	movi	r2,2
  819fa0:	e0bffd0d 	sth	r2,-12(fp)
  819fa4:	00800044 	movi	r2,1
  819fa8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819fac:	d0a08b43 	ldbu	r2,-32211(gp)
  819fb0:	10803fcc 	andi	r2,r2,255
  819fb4:	10001c26 	beq	r2,zero,81a028 <fifoed_avalon_uart_txirq+0xfc>
  {
    OSFlagPost (group, flags, opt, &err);
  819fb8:	e0bffd0b 	ldhu	r2,-12(fp)
  819fbc:	e0fffd83 	ldbu	r3,-10(fp)
  819fc0:	e13ffdc4 	addi	r4,fp,-9
  819fc4:	200f883a 	mov	r7,r4
  819fc8:	180d883a 	mov	r6,r3
  819fcc:	100b883a 	mov	r5,r2
  819fd0:	e13ffc17 	ldw	r4,-16(fp)
  819fd4:	08121400 	call	812140 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
  819fd8:	00001306 	br	81a028 <fifoed_avalon_uart_txirq+0xfc>
          (IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_TRDY_MSK))
          {
              IOWR_FIFOED_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  819fdc:	e0bffe17 	ldw	r2,-8(fp)
  819fe0:	10800017 	ldw	r2,0(r2)
  819fe4:	10800104 	addi	r2,r2,4
  819fe8:	e0fffe17 	ldw	r3,-8(fp)
  819fec:	18c00417 	ldw	r3,16(r3)
  819ff0:	e13ffe17 	ldw	r4,-8(fp)
  819ff4:	20c7883a 	add	r3,r4,r3
  819ff8:	18c01a04 	addi	r3,r3,104
  819ffc:	18c00003 	ldbu	r3,0(r3)
  81a000:	18c03fcc 	andi	r3,r3,255
  81a004:	10c00035 	stwio	r3,0(r2)

              sp->tx_start = (++sp->tx_start) & FIFOED_AVALON_UART_BUF_MSK;
  81a008:	e0bffe17 	ldw	r2,-8(fp)
  81a00c:	10800417 	ldw	r2,16(r2)
  81a010:	10800044 	addi	r2,r2,1
  81a014:	e0fffe17 	ldw	r3,-8(fp)
  81a018:	18800415 	stw	r2,16(r3)
  81a01c:	10c00fcc 	andi	r3,r2,63
  81a020:	e0bffe17 	ldw	r2,-8(fp)
  81a024:	10c00415 	stw	r3,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
  81a028:	e0bffe17 	ldw	r2,-8(fp)
  81a02c:	10c00417 	ldw	r3,16(r2)
  81a030:	e0bffe17 	ldw	r2,-8(fp)
  81a034:	10800517 	ldw	r2,20(r2)
  81a038:	18800626 	beq	r3,r2,81a054 <fifoed_avalon_uart_txirq+0x128>
          (IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_TRDY_MSK))
  81a03c:	e0bffe17 	ldw	r2,-8(fp)
  81a040:	10800017 	ldw	r2,0(r2)
  81a044:	10800204 	addi	r2,r2,8
  81a048:	10800037 	ldwio	r2,0(r2)
  81a04c:	1080100c 	andi	r2,r2,64
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
  81a050:	103fe21e 	bne	r2,zero,819fdc <__alt_mem_epcs_flash_controller_0+0xff810fdc>
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
  81a054:	e0bffe17 	ldw	r2,-8(fp)
  81a058:	10800117 	ldw	r2,4(r2)
  81a05c:	10c01014 	ori	r3,r2,64
  81a060:	e0bffe17 	ldw	r2,-8(fp)
  81a064:	10c00115 	stw	r3,4(r2)
  81a068:	00000e06 	br	81a0a4 <fifoed_avalon_uart_txirq+0x178>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_FIFOED_AVALON_UART_STATUS(sp->base);
  81a06c:	e0bffe17 	ldw	r2,-8(fp)
  81a070:	10800017 	ldw	r2,0(r2)
  81a074:	10800204 	addi	r2,r2,8
  81a078:	10800037 	ldwio	r2,0(r2)
  81a07c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & FIFOED_AVALON_UART_STATUS_CTS_MSK))
  81a080:	e0bfff17 	ldw	r2,-4(fp)
  81a084:	1082000c 	andi	r2,r2,2048
  81a088:	1000061e 	bne	r2,zero,81a0a4 <fifoed_avalon_uart_txirq+0x178>
      {
        sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
  81a08c:	e0bffe17 	ldw	r2,-8(fp)
  81a090:	10c00117 	ldw	r3,4(r2)
  81a094:	00bfefc4 	movi	r2,-65
  81a098:	1886703a 	and	r3,r3,r2
  81a09c:	e0bffe17 	ldw	r2,-8(fp)
  81a0a0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  81a0a4:	e0bffe17 	ldw	r2,-8(fp)
  81a0a8:	10c00417 	ldw	r3,16(r2)
  81a0ac:	e0bffe17 	ldw	r2,-8(fp)
  81a0b0:	10800517 	ldw	r2,20(r2)
  81a0b4:	1880061e 	bne	r3,r2,81a0d0 <fifoed_avalon_uart_txirq+0x1a4>
  {
    sp->ctrl &= ~(FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
  81a0b8:	e0bffe17 	ldw	r2,-8(fp)
  81a0bc:	10c00117 	ldw	r3,4(r2)
  81a0c0:	00beefc4 	movi	r2,-1089
  81a0c4:	1886703a 	and	r3,r3,r2
  81a0c8:	e0bffe17 	ldw	r2,-8(fp)
  81a0cc:	10c00115 	stw	r3,4(r2)
                    FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81a0d0:	e0bffe17 	ldw	r2,-8(fp)
  81a0d4:	10800017 	ldw	r2,0(r2)
  81a0d8:	10800304 	addi	r2,r2,12
  81a0dc:	e0fffe17 	ldw	r3,-8(fp)
  81a0e0:	18c00117 	ldw	r3,4(r3)
  81a0e4:	10c00035 	stwio	r3,0(r2)
}
  81a0e8:	0001883a 	nop
  81a0ec:	e037883a 	mov	sp,fp
  81a0f0:	dfc00117 	ldw	ra,4(sp)
  81a0f4:	df000017 	ldw	fp,0(sp)
  81a0f8:	dec00204 	addi	sp,sp,8
  81a0fc:	f800283a 	ret

0081a100 <fifoed_avalon_uart_irq>:
 #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void fifoed_avalon_uart_irq(void* context)
#else
static void fifoed_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81a100:	defffa04 	addi	sp,sp,-24
  81a104:	dfc00515 	stw	ra,20(sp)
  81a108:	df000415 	stw	fp,16(sp)
  81a10c:	df000404 	addi	fp,sp,16
  81a110:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  fifoed_avalon_uart_state* sp = (fifoed_avalon_uart_state*) context;
  81a114:	e0bfff17 	ldw	r2,-4(fp)
  81a118:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  81a11c:	e0bffc17 	ldw	r2,-16(fp)
  81a120:	10800017 	ldw	r2,0(r2)
  81a124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_FIFOED_AVALON_UART_STATUS(base);
  81a128:	e0bffd17 	ldw	r2,-12(fp)
  81a12c:	10800204 	addi	r2,r2,8
  81a130:	10800037 	ldwio	r2,0(r2)
  81a134:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */

  IOWR_FIFOED_AVALON_UART_STATUS(base, 0);
  81a138:	e0bffd17 	ldw	r2,-12(fp)
  81a13c:	10800204 	addi	r2,r2,8
  81a140:	0007883a 	mov	r3,zero
  81a144:	10c00035 	stwio	r3,0(r2)

  /* process a read irq */
 
  if (status & FIFOED_AVALON_UART_STATUS_RRDY_MSK)
  81a148:	e0bffe17 	ldw	r2,-8(fp)
  81a14c:	1080200c 	andi	r2,r2,128
  81a150:	10000326 	beq	r2,zero,81a160 <fifoed_avalon_uart_irq+0x60>
  {
    fifoed_avalon_uart_rxirq (sp, status);
  81a154:	e17ffe17 	ldw	r5,-8(fp)
  81a158:	e13ffc17 	ldw	r4,-16(fp)
  81a15c:	0819dd80 	call	819dd8 <fifoed_avalon_uart_rxirq>
  }

  /* process a write irq */

  if (status & (FIFOED_AVALON_UART_STATUS_TRDY_MSK | 
  81a160:	e0bffe17 	ldw	r2,-8(fp)
  81a164:	1081100c 	andi	r2,r2,1088
  81a168:	10000326 	beq	r2,zero,81a178 <fifoed_avalon_uart_irq+0x78>
                  FIFOED_AVALON_UART_STATUS_DCTS_MSK))
  {
    fifoed_avalon_uart_txirq (sp, status);
  81a16c:	e17ffe17 	ldw	r5,-8(fp)
  81a170:	e13ffc17 	ldw	r4,-16(fp)
  81a174:	0819f2c0 	call	819f2c <fifoed_avalon_uart_txirq>
  }
}
  81a178:	0001883a 	nop
  81a17c:	e037883a 	mov	sp,fp
  81a180:	dfc00117 	ldw	ra,4(sp)
  81a184:	df000017 	ldw	fp,0(sp)
  81a188:	dec00204 	addi	sp,sp,8
  81a18c:	f800283a 	ret

0081a190 <fifoed_avalon_uart_init>:
 * through a call to alt_dev_reg().
 */

void fifoed_avalon_uart_init (fifoed_avalon_uart_state* sp,alt_u32 irq_controller_id,
      alt_u32 irq)
{
  81a190:	defff304 	addi	sp,sp,-52
  81a194:	dfc00c15 	stw	ra,48(sp)
  81a198:	df000b15 	stw	fp,44(sp)
  81a19c:	df000b04 	addi	fp,sp,44
  81a1a0:	e13ffd15 	stw	r4,-12(fp)
  81a1a4:	e17ffe15 	stw	r5,-8(fp)
  81a1a8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  81a1ac:	e0bffd17 	ldw	r2,-12(fp)
  81a1b0:	10800017 	ldw	r2,0(r2)
  81a1b4:	e0bff615 	stw	r2,-40(fp)
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
  81a1b8:	e0bffd17 	ldw	r2,-12(fp)
  81a1bc:	10800704 	addi	r2,r2,28
  81a1c0:	e0bffa15 	stw	r2,-24(fp)
  81a1c4:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  81a1c8:	e0bffb0b 	ldhu	r2,-20(fp)
  81a1cc:	e0fffc84 	addi	r3,fp,-14
  81a1d0:	180b883a 	mov	r5,r3
  81a1d4:	1009883a 	mov	r4,r2
  81a1d8:	08115640 	call	811564 <OSFlagCreate>
  81a1dc:	1007883a 	mov	r3,r2
  81a1e0:	e0bffa17 	ldw	r2,-24(fp)
  81a1e4:	10c00015 	stw	r3,0(r2)
  return err;
  81a1e8:	e0bffc83 	ldbu	r2,-14(fp)
  81a1ec:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
  81a1f0:	1000241e 	bne	r2,zero,81a284 <fifoed_avalon_uart_init+0xf4>
  81a1f4:	e0bffd17 	ldw	r2,-12(fp)
  81a1f8:	10800804 	addi	r2,r2,32
  81a1fc:	e0bff715 	stw	r2,-36(fp)
  81a200:	00800044 	movi	r2,1
  81a204:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  81a208:	e0bffb8b 	ldhu	r2,-18(fp)
  81a20c:	1009883a 	mov	r4,r2
  81a210:	08142840 	call	814284 <OSSemCreate>
  81a214:	1007883a 	mov	r3,r2
  81a218:	e0bff717 	ldw	r2,-36(fp)
  81a21c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  81a220:	e0bff717 	ldw	r2,-36(fp)
  81a224:	10800017 	ldw	r2,0(r2)
  81a228:	10000226 	beq	r2,zero,81a234 <fifoed_avalon_uart_init+0xa4>
  81a22c:	0005883a 	mov	r2,zero
  81a230:	00000106 	br	81a238 <fifoed_avalon_uart_init+0xa8>
  81a234:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
  81a238:	1000121e 	bne	r2,zero,81a284 <fifoed_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
  81a23c:	e0bffd17 	ldw	r2,-12(fp)
  81a240:	10800904 	addi	r2,r2,36
  81a244:	e0bff815 	stw	r2,-32(fp)
  81a248:	00800044 	movi	r2,1
  81a24c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  81a250:	e0bffc0b 	ldhu	r2,-16(fp)
  81a254:	1009883a 	mov	r4,r2
  81a258:	08142840 	call	814284 <OSSemCreate>
  81a25c:	1007883a 	mov	r3,r2
  81a260:	e0bff817 	ldw	r2,-32(fp)
  81a264:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
  81a268:	e0bff817 	ldw	r2,-32(fp)
  81a26c:	10800017 	ldw	r2,0(r2)
  81a270:	10000226 	beq	r2,zero,81a27c <fifoed_avalon_uart_init+0xec>
  81a274:	0005883a 	mov	r2,zero
  81a278:	00000106 	br	81a280 <fifoed_avalon_uart_init+0xf0>
  81a27c:	00bfffc4 	movi	r2,-1
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
  81a280:	10000226 	beq	r2,zero,81a28c <fifoed_avalon_uart_init+0xfc>
  81a284:	00800044 	movi	r2,1
  81a288:	00000106 	br	81a290 <fifoed_avalon_uart_init+0x100>
  81a28c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
  81a290:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  81a294:	e0bff917 	ldw	r2,-28(fp)
  81a298:	10000f1e 	bne	r2,zero,81a2d8 <fifoed_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */

    sp->ctrl = FIFOED_AVALON_UART_CONTROL_RTS_MSK  |
  81a29c:	e0bffd17 	ldw	r2,-12(fp)
  81a2a0:	00c32004 	movi	r3,3200
  81a2a4:	10c00115 	stw	r3,4(r2)
                FIFOED_AVALON_UART_CONTROL_RRDY_MSK |
                FIFOED_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_FIFOED_AVALON_UART_CONTROL(base, sp->ctrl);
  81a2a8:	e0bff617 	ldw	r2,-40(fp)
  81a2ac:	10800304 	addi	r2,r2,12
  81a2b0:	e0fffd17 	ldw	r3,-12(fp)
  81a2b4:	18c00117 	ldw	r3,4(r3)
  81a2b8:	10c00035 	stwio	r3,0(r2)

    /* register the interrupt handler */

//    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, fifoed_avalon_uart_irq, sp,
  81a2bc:	d8000015 	stw	zero,0(sp)
  81a2c0:	e1fffd17 	ldw	r7,-12(fp)
  81a2c4:	018020b4 	movhi	r6,130
  81a2c8:	31a84004 	addi	r6,r6,-24320
  81a2cc:	e17fff17 	ldw	r5,-4(fp)
  81a2d0:	e13ffe17 	ldw	r4,-8(fp)
  81a2d4:	080e49c0 	call	80e49c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#endif
  }
}
  81a2d8:	0001883a 	nop
  81a2dc:	e037883a 	mov	sp,fp
  81a2e0:	dfc00117 	ldw	ra,4(sp)
  81a2e4:	df000017 	ldw	fp,0(sp)
  81a2e8:	dec00204 	addi	sp,sp,8
  81a2ec:	f800283a 	ret

0081a2f0 <fifoed_avalon_uart_classic_read>:
extern int fifoed_avalon_uart_ioctl(fifoed_avalon_uart_state* sp,
  int req, void* arg);

int fifoed_avalon_uart_classic_read(fifoed_avalon_uart_state* sp,
  char* buffer, int space, int flags)
  {
  81a2f0:	defffa04 	addi	sp,sp,-24
  81a2f4:	dfc00515 	stw	ra,20(sp)
  81a2f8:	df000415 	stw	fp,16(sp)
  81a2fc:	df000404 	addi	fp,sp,16
  81a300:	e13ffc15 	stw	r4,-16(fp)
  81a304:	e17ffd15 	stw	r5,-12(fp)
  81a308:	e1bffe15 	stw	r6,-8(fp)
  81a30c:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_read( sp,
  81a310:	e1ffff17 	ldw	r7,-4(fp)
  81a314:	e1bffe17 	ldw	r6,-8(fp)
  81a318:	e17ffd17 	ldw	r5,-12(fp)
  81a31c:	e13ffc17 	ldw	r4,-16(fp)
  81a320:	08199440 	call	819944 <fifoed_avalon_uart_read>
  buffer, space,  flags);
  }
  81a324:	e037883a 	mov	sp,fp
  81a328:	dfc00117 	ldw	ra,4(sp)
  81a32c:	df000017 	ldw	fp,0(sp)
  81a330:	dec00204 	addi	sp,sp,8
  81a334:	f800283a 	ret

0081a338 <fifoed_avalon_uart_classic_write>:

  int fifoed_avalon_uart_classic_write(fifoed_avalon_uart_state* sp,
  const char* ptr, int count, int flags)
  {
  81a338:	defffa04 	addi	sp,sp,-24
  81a33c:	dfc00515 	stw	ra,20(sp)
  81a340:	df000415 	stw	fp,16(sp)
  81a344:	df000404 	addi	fp,sp,16
  81a348:	e13ffc15 	stw	r4,-16(fp)
  81a34c:	e17ffd15 	stw	r5,-12(fp)
  81a350:	e1bffe15 	stw	r6,-8(fp)
  81a354:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_write( sp,
  81a358:	e1ffff17 	ldw	r7,-4(fp)
  81a35c:	e1bffe17 	ldw	r6,-8(fp)
  81a360:	e17ffd17 	ldw	r5,-12(fp)
  81a364:	e13ffc17 	ldw	r4,-16(fp)
  81a368:	0819ba00 	call	819ba0 <fifoed_avalon_uart_write>
  ptr, count,  flags);
  }
  81a36c:	e037883a 	mov	sp,fp
  81a370:	dfc00117 	ldw	ra,4(sp)
  81a374:	df000017 	ldw	fp,0(sp)
  81a378:	dec00204 	addi	sp,sp,8
  81a37c:	f800283a 	ret

0081a380 <fifoed_avalon_uart_read_fd>:
 *
 */

int
fifoed_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81a380:	defffa04 	addi	sp,sp,-24
  81a384:	dfc00515 	stw	ra,20(sp)
  81a388:	df000415 	stw	fp,16(sp)
  81a38c:	df000404 	addi	fp,sp,16
  81a390:	e13ffd15 	stw	r4,-12(fp)
  81a394:	e17ffe15 	stw	r5,-8(fp)
  81a398:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  81a39c:	e0bffd17 	ldw	r2,-12(fp)
  81a3a0:	10800017 	ldw	r2,0(r2)
  81a3a4:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
  81a3a8:	e0bffc17 	ldw	r2,-16(fp)
  81a3ac:	10c00a04 	addi	r3,r2,40
  81a3b0:	e0bffd17 	ldw	r2,-12(fp)
  81a3b4:	10800217 	ldw	r2,8(r2)
  81a3b8:	100f883a 	mov	r7,r2
  81a3bc:	e1bfff17 	ldw	r6,-4(fp)
  81a3c0:	e17ffe17 	ldw	r5,-8(fp)
  81a3c4:	1809883a 	mov	r4,r3
  81a3c8:	08199440 	call	819944 <fifoed_avalon_uart_read>
      fd->fd_flags);
}
  81a3cc:	e037883a 	mov	sp,fp
  81a3d0:	dfc00117 	ldw	ra,4(sp)
  81a3d4:	df000017 	ldw	fp,0(sp)
  81a3d8:	dec00204 	addi	sp,sp,8
  81a3dc:	f800283a 	ret

0081a3e0 <fifoed_avalon_uart_write_fd>:

int
fifoed_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81a3e0:	defffa04 	addi	sp,sp,-24
  81a3e4:	dfc00515 	stw	ra,20(sp)
  81a3e8:	df000415 	stw	fp,16(sp)
  81a3ec:	df000404 	addi	fp,sp,16
  81a3f0:	e13ffd15 	stw	r4,-12(fp)
  81a3f4:	e17ffe15 	stw	r5,-8(fp)
  81a3f8:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  81a3fc:	e0bffd17 	ldw	r2,-12(fp)
  81a400:	10800017 	ldw	r2,0(r2)
  81a404:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
  81a408:	e0bffc17 	ldw	r2,-16(fp)
  81a40c:	10c00a04 	addi	r3,r2,40
  81a410:	e0bffd17 	ldw	r2,-12(fp)
  81a414:	10800217 	ldw	r2,8(r2)
  81a418:	100f883a 	mov	r7,r2
  81a41c:	e1bfff17 	ldw	r6,-4(fp)
  81a420:	e17ffe17 	ldw	r5,-8(fp)
  81a424:	1809883a 	mov	r4,r3
  81a428:	0819ba00 	call	819ba0 <fifoed_avalon_uart_write>
      fd->fd_flags);
}
  81a42c:	e037883a 	mov	sp,fp
  81a430:	dfc00117 	ldw	ra,4(sp)
  81a434:	df000017 	ldw	fp,0(sp)
  81a438:	dec00204 	addi	sp,sp,8
  81a43c:	f800283a 	ret

0081a440 <fifoed_avalon_uart_classic_read_fd>:
int
 fifoed_avalon_uart_classic_read_fd(alt_fd* fd, char* buffer, int space)
{
  81a440:	defffa04 	addi	sp,sp,-24
  81a444:	dfc00515 	stw	ra,20(sp)
  81a448:	df000415 	stw	fp,16(sp)
  81a44c:	df000404 	addi	fp,sp,16
  81a450:	e13ffd15 	stw	r4,-12(fp)
  81a454:	e17ffe15 	stw	r5,-8(fp)
  81a458:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  81a45c:	e0bffd17 	ldw	r2,-12(fp)
  81a460:	10800017 	ldw	r2,0(r2)
  81a464:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
  81a468:	e0bffc17 	ldw	r2,-16(fp)
  81a46c:	10c00a04 	addi	r3,r2,40
  81a470:	e0bffd17 	ldw	r2,-12(fp)
  81a474:	10800217 	ldw	r2,8(r2)
  81a478:	100f883a 	mov	r7,r2
  81a47c:	e1bfff17 	ldw	r6,-4(fp)
  81a480:	e17ffe17 	ldw	r5,-8(fp)
  81a484:	1809883a 	mov	r4,r3
  81a488:	08199440 	call	819944 <fifoed_avalon_uart_read>
      fd->fd_flags);
}
  81a48c:	e037883a 	mov	sp,fp
  81a490:	dfc00117 	ldw	ra,4(sp)
  81a494:	df000017 	ldw	fp,0(sp)
  81a498:	dec00204 	addi	sp,sp,8
  81a49c:	f800283a 	ret

0081a4a0 <fifoed_avalon_uart_classic_write_fd>:

int
fifoed_avalon_uart_classic_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81a4a0:	defffa04 	addi	sp,sp,-24
  81a4a4:	dfc00515 	stw	ra,20(sp)
  81a4a8:	df000415 	stw	fp,16(sp)
  81a4ac:	df000404 	addi	fp,sp,16
  81a4b0:	e13ffd15 	stw	r4,-12(fp)
  81a4b4:	e17ffe15 	stw	r5,-8(fp)
  81a4b8:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
  81a4bc:	e0bffd17 	ldw	r2,-12(fp)
  81a4c0:	10800017 	ldw	r2,0(r2)
  81a4c4:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
  81a4c8:	e0bffc17 	ldw	r2,-16(fp)
  81a4cc:	10c00a04 	addi	r3,r2,40
  81a4d0:	e0bffd17 	ldw	r2,-12(fp)
  81a4d4:	10800217 	ldw	r2,8(r2)
  81a4d8:	100f883a 	mov	r7,r2
  81a4dc:	e1bfff17 	ldw	r6,-4(fp)
  81a4e0:	e17ffe17 	ldw	r5,-8(fp)
  81a4e4:	1809883a 	mov	r4,r3
  81a4e8:	0819ba00 	call	819ba0 <fifoed_avalon_uart_write>
      fd->fd_flags);
}
  81a4ec:	e037883a 	mov	sp,fp
  81a4f0:	dfc00117 	ldw	ra,4(sp)
  81a4f4:	df000017 	ldw	fp,0(sp)
  81a4f8:	dec00204 	addi	sp,sp,8
  81a4fc:	f800283a 	ret

0081a500 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81a500:	defff504 	addi	sp,sp,-44
  81a504:	df000a15 	stw	fp,40(sp)
  81a508:	df000a04 	addi	fp,sp,40
  81a50c:	e13ffc15 	stw	r4,-16(fp)
  81a510:	e17ffd15 	stw	r5,-12(fp)
  81a514:	e1bffe15 	stw	r6,-8(fp)
  81a518:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81a51c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81a520:	d0a0a017 	ldw	r2,-32128(gp)
  
  if (alt_ticks_per_second ())
  81a524:	10003c26 	beq	r2,zero,81a618 <alt_alarm_start+0x118>
  {
    if (alarm)
  81a528:	e0bffc17 	ldw	r2,-16(fp)
  81a52c:	10003826 	beq	r2,zero,81a610 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  81a530:	e0bffc17 	ldw	r2,-16(fp)
  81a534:	e0fffe17 	ldw	r3,-8(fp)
  81a538:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  81a53c:	e0bffc17 	ldw	r2,-16(fp)
  81a540:	e0ffff17 	ldw	r3,-4(fp)
  81a544:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a548:	0005303a 	rdctl	r2,status
  81a54c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a550:	e0fff917 	ldw	r3,-28(fp)
  81a554:	00bfff84 	movi	r2,-2
  81a558:	1884703a 	and	r2,r3,r2
  81a55c:	1001703a 	wrctl	status,r2
  
  return context;
  81a560:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  81a564:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81a568:	d0a0a117 	ldw	r2,-32124(gp)
      
      current_nticks = alt_nticks();
  81a56c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81a570:	e0fffd17 	ldw	r3,-12(fp)
  81a574:	e0bff617 	ldw	r2,-40(fp)
  81a578:	1885883a 	add	r2,r3,r2
  81a57c:	10c00044 	addi	r3,r2,1
  81a580:	e0bffc17 	ldw	r2,-16(fp)
  81a584:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81a588:	e0bffc17 	ldw	r2,-16(fp)
  81a58c:	10c00217 	ldw	r3,8(r2)
  81a590:	e0bff617 	ldw	r2,-40(fp)
  81a594:	1880042e 	bgeu	r3,r2,81a5a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  81a598:	e0bffc17 	ldw	r2,-16(fp)
  81a59c:	00c00044 	movi	r3,1
  81a5a0:	10c00405 	stb	r3,16(r2)
  81a5a4:	00000206 	br	81a5b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  81a5a8:	e0bffc17 	ldw	r2,-16(fp)
  81a5ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81a5b0:	e0bffc17 	ldw	r2,-16(fp)
  81a5b4:	d0e07104 	addi	r3,gp,-32316
  81a5b8:	e0fffa15 	stw	r3,-24(fp)
  81a5bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a5c0:	e0bffb17 	ldw	r2,-20(fp)
  81a5c4:	e0fffa17 	ldw	r3,-24(fp)
  81a5c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81a5cc:	e0bffa17 	ldw	r2,-24(fp)
  81a5d0:	10c00017 	ldw	r3,0(r2)
  81a5d4:	e0bffb17 	ldw	r2,-20(fp)
  81a5d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a5dc:	e0bffa17 	ldw	r2,-24(fp)
  81a5e0:	10800017 	ldw	r2,0(r2)
  81a5e4:	e0fffb17 	ldw	r3,-20(fp)
  81a5e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81a5ec:	e0bffa17 	ldw	r2,-24(fp)
  81a5f0:	e0fffb17 	ldw	r3,-20(fp)
  81a5f4:	10c00015 	stw	r3,0(r2)
  81a5f8:	e0bff817 	ldw	r2,-32(fp)
  81a5fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a600:	e0bff717 	ldw	r2,-36(fp)
  81a604:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81a608:	0005883a 	mov	r2,zero
  81a60c:	00000306 	br	81a61c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  81a610:	00bffa84 	movi	r2,-22
  81a614:	00000106 	br	81a61c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  81a618:	00bfde84 	movi	r2,-134
  }
}
  81a61c:	e037883a 	mov	sp,fp
  81a620:	df000017 	ldw	fp,0(sp)
  81a624:	dec00104 	addi	sp,sp,4
  81a628:	f800283a 	ret

0081a62c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a62c:	defffe04 	addi	sp,sp,-8
  81a630:	dfc00115 	stw	ra,4(sp)
  81a634:	df000015 	stw	fp,0(sp)
  81a638:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a63c:	d0a03b17 	ldw	r2,-32532(gp)
  81a640:	10000326 	beq	r2,zero,81a650 <alt_get_errno+0x24>
  81a644:	d0a03b17 	ldw	r2,-32532(gp)
  81a648:	103ee83a 	callr	r2
  81a64c:	00000106 	br	81a654 <alt_get_errno+0x28>
  81a650:	d0a07e04 	addi	r2,gp,-32264
}
  81a654:	e037883a 	mov	sp,fp
  81a658:	dfc00117 	ldw	ra,4(sp)
  81a65c:	df000017 	ldw	fp,0(sp)
  81a660:	dec00204 	addi	sp,sp,8
  81a664:	f800283a 	ret

0081a668 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81a668:	defffa04 	addi	sp,sp,-24
  81a66c:	dfc00515 	stw	ra,20(sp)
  81a670:	df000415 	stw	fp,16(sp)
  81a674:	df000404 	addi	fp,sp,16
  81a678:	e13ffe15 	stw	r4,-8(fp)
  81a67c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81a680:	e0bffe17 	ldw	r2,-8(fp)
  81a684:	10000326 	beq	r2,zero,81a694 <alt_dev_llist_insert+0x2c>
  81a688:	e0bffe17 	ldw	r2,-8(fp)
  81a68c:	10800217 	ldw	r2,8(r2)
  81a690:	1000061e 	bne	r2,zero,81a6ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  81a694:	081a62c0 	call	81a62c <alt_get_errno>
  81a698:	1007883a 	mov	r3,r2
  81a69c:	00800584 	movi	r2,22
  81a6a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81a6a4:	00bffa84 	movi	r2,-22
  81a6a8:	00001306 	br	81a6f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81a6ac:	e0bffe17 	ldw	r2,-8(fp)
  81a6b0:	e0ffff17 	ldw	r3,-4(fp)
  81a6b4:	e0fffc15 	stw	r3,-16(fp)
  81a6b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a6bc:	e0bffd17 	ldw	r2,-12(fp)
  81a6c0:	e0fffc17 	ldw	r3,-16(fp)
  81a6c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81a6c8:	e0bffc17 	ldw	r2,-16(fp)
  81a6cc:	10c00017 	ldw	r3,0(r2)
  81a6d0:	e0bffd17 	ldw	r2,-12(fp)
  81a6d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a6d8:	e0bffc17 	ldw	r2,-16(fp)
  81a6dc:	10800017 	ldw	r2,0(r2)
  81a6e0:	e0fffd17 	ldw	r3,-12(fp)
  81a6e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81a6e8:	e0bffc17 	ldw	r2,-16(fp)
  81a6ec:	e0fffd17 	ldw	r3,-12(fp)
  81a6f0:	10c00015 	stw	r3,0(r2)

  return 0;  
  81a6f4:	0005883a 	mov	r2,zero
}
  81a6f8:	e037883a 	mov	sp,fp
  81a6fc:	dfc00117 	ldw	ra,4(sp)
  81a700:	df000017 	ldw	fp,0(sp)
  81a704:	dec00204 	addi	sp,sp,8
  81a708:	f800283a 	ret

0081a70c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81a70c:	defffd04 	addi	sp,sp,-12
  81a710:	dfc00215 	stw	ra,8(sp)
  81a714:	df000115 	stw	fp,4(sp)
  81a718:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a71c:	008020b4 	movhi	r2,130
  81a720:	10aeb004 	addi	r2,r2,-17728
  81a724:	e0bfff15 	stw	r2,-4(fp)
  81a728:	00000606 	br	81a744 <_do_ctors+0x38>
        (*ctor) (); 
  81a72c:	e0bfff17 	ldw	r2,-4(fp)
  81a730:	10800017 	ldw	r2,0(r2)
  81a734:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a738:	e0bfff17 	ldw	r2,-4(fp)
  81a73c:	10bfff04 	addi	r2,r2,-4
  81a740:	e0bfff15 	stw	r2,-4(fp)
  81a744:	e0ffff17 	ldw	r3,-4(fp)
  81a748:	008020b4 	movhi	r2,130
  81a74c:	10aeb104 	addi	r2,r2,-17724
  81a750:	18bff62e 	bgeu	r3,r2,81a72c <__alt_mem_epcs_flash_controller_0+0xff81172c>
        (*ctor) (); 
}
  81a754:	0001883a 	nop
  81a758:	e037883a 	mov	sp,fp
  81a75c:	dfc00117 	ldw	ra,4(sp)
  81a760:	df000017 	ldw	fp,0(sp)
  81a764:	dec00204 	addi	sp,sp,8
  81a768:	f800283a 	ret

0081a76c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81a76c:	defffd04 	addi	sp,sp,-12
  81a770:	dfc00215 	stw	ra,8(sp)
  81a774:	df000115 	stw	fp,4(sp)
  81a778:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a77c:	008020b4 	movhi	r2,130
  81a780:	10aeb004 	addi	r2,r2,-17728
  81a784:	e0bfff15 	stw	r2,-4(fp)
  81a788:	00000606 	br	81a7a4 <_do_dtors+0x38>
        (*dtor) (); 
  81a78c:	e0bfff17 	ldw	r2,-4(fp)
  81a790:	10800017 	ldw	r2,0(r2)
  81a794:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a798:	e0bfff17 	ldw	r2,-4(fp)
  81a79c:	10bfff04 	addi	r2,r2,-4
  81a7a0:	e0bfff15 	stw	r2,-4(fp)
  81a7a4:	e0ffff17 	ldw	r3,-4(fp)
  81a7a8:	008020b4 	movhi	r2,130
  81a7ac:	10aeb104 	addi	r2,r2,-17724
  81a7b0:	18bff62e 	bgeu	r3,r2,81a78c <__alt_mem_epcs_flash_controller_0+0xff81178c>
        (*dtor) (); 
}
  81a7b4:	0001883a 	nop
  81a7b8:	e037883a 	mov	sp,fp
  81a7bc:	dfc00117 	ldw	ra,4(sp)
  81a7c0:	df000017 	ldw	fp,0(sp)
  81a7c4:	dec00204 	addi	sp,sp,8
  81a7c8:	f800283a 	ret

0081a7cc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  81a7cc:	defffc04 	addi	sp,sp,-16
  81a7d0:	dfc00315 	stw	ra,12(sp)
  81a7d4:	df000215 	stw	fp,8(sp)
  81a7d8:	df000204 	addi	fp,sp,8
  81a7dc:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  81a7e0:	d1606f04 	addi	r5,gp,-32324
  81a7e4:	e13fff17 	ldw	r4,-4(fp)
  81a7e8:	081b4a40 	call	81b4a4 <alt_find_dev>
  81a7ec:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  81a7f0:	e0bffe17 	ldw	r2,-8(fp)
  81a7f4:	10000926 	beq	r2,zero,81a81c <alt_flash_open_dev+0x50>
  81a7f8:	e0bffe17 	ldw	r2,-8(fp)
  81a7fc:	10800317 	ldw	r2,12(r2)
  81a800:	10000626 	beq	r2,zero,81a81c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  81a804:	e0bffe17 	ldw	r2,-8(fp)
  81a808:	10800317 	ldw	r2,12(r2)
  81a80c:	e17fff17 	ldw	r5,-4(fp)
  81a810:	e13ffe17 	ldw	r4,-8(fp)
  81a814:	103ee83a 	callr	r2
  81a818:	00000106 	br	81a820 <alt_flash_open_dev+0x54>
  }

  return dev;
  81a81c:	e0bffe17 	ldw	r2,-8(fp)
}
  81a820:	e037883a 	mov	sp,fp
  81a824:	dfc00117 	ldw	ra,4(sp)
  81a828:	df000017 	ldw	fp,0(sp)
  81a82c:	dec00204 	addi	sp,sp,8
  81a830:	f800283a 	ret

0081a834 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  81a834:	defffd04 	addi	sp,sp,-12
  81a838:	dfc00215 	stw	ra,8(sp)
  81a83c:	df000115 	stw	fp,4(sp)
  81a840:	df000104 	addi	fp,sp,4
  81a844:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  81a848:	e0bfff17 	ldw	r2,-4(fp)
  81a84c:	10000826 	beq	r2,zero,81a870 <alt_flash_close_dev+0x3c>
  81a850:	e0bfff17 	ldw	r2,-4(fp)
  81a854:	10800417 	ldw	r2,16(r2)
  81a858:	10000526 	beq	r2,zero,81a870 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  81a85c:	e0bfff17 	ldw	r2,-4(fp)
  81a860:	10800417 	ldw	r2,16(r2)
  81a864:	e13fff17 	ldw	r4,-4(fp)
  81a868:	103ee83a 	callr	r2
  }
  return;
  81a86c:	0001883a 	nop
  81a870:	0001883a 	nop
}
  81a874:	e037883a 	mov	sp,fp
  81a878:	dfc00117 	ldw	ra,4(sp)
  81a87c:	df000017 	ldw	fp,0(sp)
  81a880:	dec00204 	addi	sp,sp,8
  81a884:	f800283a 	ret

0081a888 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  81a888:	defffc04 	addi	sp,sp,-16
  81a88c:	df000315 	stw	fp,12(sp)
  81a890:	df000304 	addi	fp,sp,12
  81a894:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  81a898:	e0bfff17 	ldw	r2,-4(fp)
  81a89c:	10800217 	ldw	r2,8(r2)
  81a8a0:	1000021e 	bne	r2,zero,81a8ac <alt_fs_reg+0x24>
  {
    return -ENODEV;
  81a8a4:	00bffb44 	movi	r2,-19
  81a8a8:	00001306 	br	81a8f8 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  81a8ac:	e0bfff17 	ldw	r2,-4(fp)
  81a8b0:	d0e03604 	addi	r3,gp,-32552
  81a8b4:	e0fffd15 	stw	r3,-12(fp)
  81a8b8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a8bc:	e0bffe17 	ldw	r2,-8(fp)
  81a8c0:	e0fffd17 	ldw	r3,-12(fp)
  81a8c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81a8c8:	e0bffd17 	ldw	r2,-12(fp)
  81a8cc:	10c00017 	ldw	r3,0(r2)
  81a8d0:	e0bffe17 	ldw	r2,-8(fp)
  81a8d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a8d8:	e0bffd17 	ldw	r2,-12(fp)
  81a8dc:	10800017 	ldw	r2,0(r2)
  81a8e0:	e0fffe17 	ldw	r3,-8(fp)
  81a8e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81a8e8:	e0bffd17 	ldw	r2,-12(fp)
  81a8ec:	e0fffe17 	ldw	r3,-8(fp)
  81a8f0:	10c00015 	stw	r3,0(r2)

  return 0;
  81a8f4:	0005883a 	mov	r2,zero
} 
  81a8f8:	e037883a 	mov	sp,fp
  81a8fc:	df000017 	ldw	fp,0(sp)
  81a900:	dec00104 	addi	sp,sp,4
  81a904:	f800283a 	ret

0081a908 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81a908:	defffe04 	addi	sp,sp,-8
  81a90c:	df000115 	stw	fp,4(sp)
  81a910:	df000104 	addi	fp,sp,4
  81a914:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81a918:	e0bfff17 	ldw	r2,-4(fp)
  81a91c:	10bffe84 	addi	r2,r2,-6
  81a920:	10c00428 	cmpgeui	r3,r2,16
  81a924:	18001a1e 	bne	r3,zero,81a990 <alt_exception_cause_generated_bad_addr+0x88>
  81a928:	100690ba 	slli	r3,r2,2
  81a92c:	008020b4 	movhi	r2,130
  81a930:	10aa5004 	addi	r2,r2,-22208
  81a934:	1885883a 	add	r2,r3,r2
  81a938:	10800017 	ldw	r2,0(r2)
  81a93c:	1000683a 	jmp	r2
  81a940:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  81a944:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  81a948:	0081a990 	cmplti	r2,zero,1702
  81a94c:	0081a990 	cmplti	r2,zero,1702
  81a950:	0081a990 	cmplti	r2,zero,1702
  81a954:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  81a958:	0081a988 	cmpgei	r2,zero,1702
  81a95c:	0081a990 	cmplti	r2,zero,1702
  81a960:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  81a964:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  81a968:	0081a990 	cmplti	r2,zero,1702
  81a96c:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  81a970:	0081a988 	cmpgei	r2,zero,1702
  81a974:	0081a990 	cmplti	r2,zero,1702
  81a978:	0081a990 	cmplti	r2,zero,1702
  81a97c:	0081a980 	call	81a98 <OSCtxSw_SWITCH_PC+0x81a58>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81a980:	00800044 	movi	r2,1
  81a984:	00000306 	br	81a994 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81a988:	0005883a 	mov	r2,zero
  81a98c:	00000106 	br	81a994 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81a990:	0005883a 	mov	r2,zero
  }
}
  81a994:	e037883a 	mov	sp,fp
  81a998:	df000017 	ldw	fp,0(sp)
  81a99c:	dec00104 	addi	sp,sp,4
  81a9a0:	f800283a 	ret

0081a9a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81a9a4:	defff804 	addi	sp,sp,-32
  81a9a8:	dfc00715 	stw	ra,28(sp)
  81a9ac:	df000615 	stw	fp,24(sp)
  81a9b0:	dc000515 	stw	r16,20(sp)
  81a9b4:	df000604 	addi	fp,sp,24
  81a9b8:	e13ffb15 	stw	r4,-20(fp)
  81a9bc:	e17ffc15 	stw	r5,-16(fp)
  81a9c0:	e1bffd15 	stw	r6,-12(fp)
  81a9c4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  81a9c8:	e1bffe17 	ldw	r6,-8(fp)
  81a9cc:	e17ffd17 	ldw	r5,-12(fp)
  81a9d0:	e13ffc17 	ldw	r4,-16(fp)
  81a9d4:	081ac2c0 	call	81ac2c <open>
  81a9d8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  81a9dc:	e0bffa17 	ldw	r2,-24(fp)
  81a9e0:	10002216 	blt	r2,zero,81aa6c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  81a9e4:	040020b4 	movhi	r16,130
  81a9e8:	8432dd04 	addi	r16,r16,-13452
  81a9ec:	e0bffa17 	ldw	r2,-24(fp)
  81a9f0:	01400304 	movi	r5,12
  81a9f4:	1009883a 	mov	r4,r2
  81a9f8:	080b99c0 	call	80b99c <__mulsi3>
  81a9fc:	8085883a 	add	r2,r16,r2
  81aa00:	10c00017 	ldw	r3,0(r2)
  81aa04:	e0bffb17 	ldw	r2,-20(fp)
  81aa08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81aa0c:	040020b4 	movhi	r16,130
  81aa10:	8432dd04 	addi	r16,r16,-13452
  81aa14:	e0bffa17 	ldw	r2,-24(fp)
  81aa18:	01400304 	movi	r5,12
  81aa1c:	1009883a 	mov	r4,r2
  81aa20:	080b99c0 	call	80b99c <__mulsi3>
  81aa24:	8085883a 	add	r2,r16,r2
  81aa28:	10800104 	addi	r2,r2,4
  81aa2c:	10c00017 	ldw	r3,0(r2)
  81aa30:	e0bffb17 	ldw	r2,-20(fp)
  81aa34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81aa38:	040020b4 	movhi	r16,130
  81aa3c:	8432dd04 	addi	r16,r16,-13452
  81aa40:	e0bffa17 	ldw	r2,-24(fp)
  81aa44:	01400304 	movi	r5,12
  81aa48:	1009883a 	mov	r4,r2
  81aa4c:	080b99c0 	call	80b99c <__mulsi3>
  81aa50:	8085883a 	add	r2,r16,r2
  81aa54:	10800204 	addi	r2,r2,8
  81aa58:	10c00017 	ldw	r3,0(r2)
  81aa5c:	e0bffb17 	ldw	r2,-20(fp)
  81aa60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81aa64:	e13ffa17 	ldw	r4,-24(fp)
  81aa68:	080eb380 	call	80eb38 <alt_release_fd>
  }
} 
  81aa6c:	0001883a 	nop
  81aa70:	e6ffff04 	addi	sp,fp,-4
  81aa74:	dfc00217 	ldw	ra,8(sp)
  81aa78:	df000117 	ldw	fp,4(sp)
  81aa7c:	dc000017 	ldw	r16,0(sp)
  81aa80:	dec00304 	addi	sp,sp,12
  81aa84:	f800283a 	ret

0081aa88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81aa88:	defffb04 	addi	sp,sp,-20
  81aa8c:	dfc00415 	stw	ra,16(sp)
  81aa90:	df000315 	stw	fp,12(sp)
  81aa94:	df000304 	addi	fp,sp,12
  81aa98:	e13ffd15 	stw	r4,-12(fp)
  81aa9c:	e17ffe15 	stw	r5,-8(fp)
  81aaa0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81aaa4:	01c07fc4 	movi	r7,511
  81aaa8:	01800044 	movi	r6,1
  81aaac:	e17ffd17 	ldw	r5,-12(fp)
  81aab0:	010020b4 	movhi	r4,130
  81aab4:	2132e004 	addi	r4,r4,-13440
  81aab8:	081a9a40 	call	81a9a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81aabc:	01c07fc4 	movi	r7,511
  81aac0:	000d883a 	mov	r6,zero
  81aac4:	e17ffe17 	ldw	r5,-8(fp)
  81aac8:	010020b4 	movhi	r4,130
  81aacc:	2132dd04 	addi	r4,r4,-13452
  81aad0:	081a9a40 	call	81a9a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81aad4:	01c07fc4 	movi	r7,511
  81aad8:	01800044 	movi	r6,1
  81aadc:	e17fff17 	ldw	r5,-4(fp)
  81aae0:	010020b4 	movhi	r4,130
  81aae4:	2132e304 	addi	r4,r4,-13428
  81aae8:	081a9a40 	call	81a9a4 <alt_open_fd>
}  
  81aaec:	0001883a 	nop
  81aaf0:	e037883a 	mov	sp,fp
  81aaf4:	dfc00117 	ldw	ra,4(sp)
  81aaf8:	df000017 	ldw	fp,0(sp)
  81aafc:	dec00204 	addi	sp,sp,8
  81ab00:	f800283a 	ret

0081ab04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ab04:	defffe04 	addi	sp,sp,-8
  81ab08:	dfc00115 	stw	ra,4(sp)
  81ab0c:	df000015 	stw	fp,0(sp)
  81ab10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81ab14:	d0a03b17 	ldw	r2,-32532(gp)
  81ab18:	10000326 	beq	r2,zero,81ab28 <alt_get_errno+0x24>
  81ab1c:	d0a03b17 	ldw	r2,-32532(gp)
  81ab20:	103ee83a 	callr	r2
  81ab24:	00000106 	br	81ab2c <alt_get_errno+0x28>
  81ab28:	d0a07e04 	addi	r2,gp,-32264
}
  81ab2c:	e037883a 	mov	sp,fp
  81ab30:	dfc00117 	ldw	ra,4(sp)
  81ab34:	df000017 	ldw	fp,0(sp)
  81ab38:	dec00204 	addi	sp,sp,8
  81ab3c:	f800283a 	ret

0081ab40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81ab40:	defffb04 	addi	sp,sp,-20
  81ab44:	dfc00415 	stw	ra,16(sp)
  81ab48:	df000315 	stw	fp,12(sp)
  81ab4c:	dc000215 	stw	r16,8(sp)
  81ab50:	df000304 	addi	fp,sp,12
  81ab54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81ab58:	e0bffe17 	ldw	r2,-8(fp)
  81ab5c:	10800217 	ldw	r2,8(r2)
  81ab60:	10d00034 	orhi	r3,r2,16384
  81ab64:	e0bffe17 	ldw	r2,-8(fp)
  81ab68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81ab6c:	e03ffd15 	stw	zero,-12(fp)
  81ab70:	00002306 	br	81ac00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81ab74:	040020b4 	movhi	r16,130
  81ab78:	8432dd04 	addi	r16,r16,-13452
  81ab7c:	e0bffd17 	ldw	r2,-12(fp)
  81ab80:	01400304 	movi	r5,12
  81ab84:	1009883a 	mov	r4,r2
  81ab88:	080b99c0 	call	80b99c <__mulsi3>
  81ab8c:	8085883a 	add	r2,r16,r2
  81ab90:	10c00017 	ldw	r3,0(r2)
  81ab94:	e0bffe17 	ldw	r2,-8(fp)
  81ab98:	10800017 	ldw	r2,0(r2)
  81ab9c:	1880151e 	bne	r3,r2,81abf4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81aba0:	040020b4 	movhi	r16,130
  81aba4:	8432dd04 	addi	r16,r16,-13452
  81aba8:	e0bffd17 	ldw	r2,-12(fp)
  81abac:	01400304 	movi	r5,12
  81abb0:	1009883a 	mov	r4,r2
  81abb4:	080b99c0 	call	80b99c <__mulsi3>
  81abb8:	8085883a 	add	r2,r16,r2
  81abbc:	10800204 	addi	r2,r2,8
  81abc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81abc4:	10000b0e 	bge	r2,zero,81abf4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81abc8:	01400304 	movi	r5,12
  81abcc:	e13ffd17 	ldw	r4,-12(fp)
  81abd0:	080b99c0 	call	80b99c <__mulsi3>
  81abd4:	1007883a 	mov	r3,r2
  81abd8:	008020b4 	movhi	r2,130
  81abdc:	10b2dd04 	addi	r2,r2,-13452
  81abe0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81abe4:	e0bffe17 	ldw	r2,-8(fp)
  81abe8:	18800226 	beq	r3,r2,81abf4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81abec:	00bffcc4 	movi	r2,-13
  81abf0:	00000806 	br	81ac14 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81abf4:	e0bffd17 	ldw	r2,-12(fp)
  81abf8:	10800044 	addi	r2,r2,1
  81abfc:	e0bffd15 	stw	r2,-12(fp)
  81ac00:	d0a03a17 	ldw	r2,-32536(gp)
  81ac04:	1007883a 	mov	r3,r2
  81ac08:	e0bffd17 	ldw	r2,-12(fp)
  81ac0c:	18bfd92e 	bgeu	r3,r2,81ab74 <__alt_mem_epcs_flash_controller_0+0xff811b74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81ac10:	0005883a 	mov	r2,zero
}
  81ac14:	e6ffff04 	addi	sp,fp,-4
  81ac18:	dfc00217 	ldw	ra,8(sp)
  81ac1c:	df000117 	ldw	fp,4(sp)
  81ac20:	dc000017 	ldw	r16,0(sp)
  81ac24:	dec00304 	addi	sp,sp,12
  81ac28:	f800283a 	ret

0081ac2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81ac2c:	defff604 	addi	sp,sp,-40
  81ac30:	dfc00915 	stw	ra,36(sp)
  81ac34:	df000815 	stw	fp,32(sp)
  81ac38:	df000804 	addi	fp,sp,32
  81ac3c:	e13ffd15 	stw	r4,-12(fp)
  81ac40:	e17ffe15 	stw	r5,-8(fp)
  81ac44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81ac48:	00bfffc4 	movi	r2,-1
  81ac4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  81ac50:	00bffb44 	movi	r2,-19
  81ac54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81ac58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81ac5c:	d1603804 	addi	r5,gp,-32544
  81ac60:	e13ffd17 	ldw	r4,-12(fp)
  81ac64:	081b4a40 	call	81b4a4 <alt_find_dev>
  81ac68:	e0bff815 	stw	r2,-32(fp)
  81ac6c:	e0bff817 	ldw	r2,-32(fp)
  81ac70:	1000051e 	bne	r2,zero,81ac88 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81ac74:	e13ffd17 	ldw	r4,-12(fp)
  81ac78:	081b5340 	call	81b534 <alt_find_file>
  81ac7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  81ac80:	00800044 	movi	r2,1
  81ac84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81ac88:	e0bff817 	ldw	r2,-32(fp)
  81ac8c:	10002b26 	beq	r2,zero,81ad3c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81ac90:	e13ff817 	ldw	r4,-32(fp)
  81ac94:	081b63c0 	call	81b63c <alt_get_fd>
  81ac98:	e0bff915 	stw	r2,-28(fp)
  81ac9c:	e0bff917 	ldw	r2,-28(fp)
  81aca0:	1000030e 	bge	r2,zero,81acb0 <open+0x84>
    {
      status = index;
  81aca4:	e0bff917 	ldw	r2,-28(fp)
  81aca8:	e0bffa15 	stw	r2,-24(fp)
  81acac:	00002506 	br	81ad44 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  81acb0:	01400304 	movi	r5,12
  81acb4:	e13ff917 	ldw	r4,-28(fp)
  81acb8:	080b99c0 	call	80b99c <__mulsi3>
  81acbc:	1007883a 	mov	r3,r2
  81acc0:	008020b4 	movhi	r2,130
  81acc4:	10b2dd04 	addi	r2,r2,-13452
  81acc8:	1885883a 	add	r2,r3,r2
  81accc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81acd0:	e0fffe17 	ldw	r3,-8(fp)
  81acd4:	00900034 	movhi	r2,16384
  81acd8:	10bfffc4 	addi	r2,r2,-1
  81acdc:	1886703a 	and	r3,r3,r2
  81ace0:	e0bffc17 	ldw	r2,-16(fp)
  81ace4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81ace8:	e0bffb17 	ldw	r2,-20(fp)
  81acec:	1000051e 	bne	r2,zero,81ad04 <open+0xd8>
  81acf0:	e13ffc17 	ldw	r4,-16(fp)
  81acf4:	081ab400 	call	81ab40 <alt_file_locked>
  81acf8:	e0bffa15 	stw	r2,-24(fp)
  81acfc:	e0bffa17 	ldw	r2,-24(fp)
  81ad00:	10001016 	blt	r2,zero,81ad44 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81ad04:	e0bff817 	ldw	r2,-32(fp)
  81ad08:	10800317 	ldw	r2,12(r2)
  81ad0c:	10000826 	beq	r2,zero,81ad30 <open+0x104>
  81ad10:	e0bff817 	ldw	r2,-32(fp)
  81ad14:	10800317 	ldw	r2,12(r2)
  81ad18:	e1ffff17 	ldw	r7,-4(fp)
  81ad1c:	e1bffe17 	ldw	r6,-8(fp)
  81ad20:	e17ffd17 	ldw	r5,-12(fp)
  81ad24:	e13ffc17 	ldw	r4,-16(fp)
  81ad28:	103ee83a 	callr	r2
  81ad2c:	00000106 	br	81ad34 <open+0x108>
  81ad30:	0005883a 	mov	r2,zero
  81ad34:	e0bffa15 	stw	r2,-24(fp)
  81ad38:	00000206 	br	81ad44 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81ad3c:	00bffb44 	movi	r2,-19
  81ad40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81ad44:	e0bffa17 	ldw	r2,-24(fp)
  81ad48:	1000090e 	bge	r2,zero,81ad70 <open+0x144>
  {
    alt_release_fd (index);  
  81ad4c:	e13ff917 	ldw	r4,-28(fp)
  81ad50:	080eb380 	call	80eb38 <alt_release_fd>
    ALT_ERRNO = -status;
  81ad54:	081ab040 	call	81ab04 <alt_get_errno>
  81ad58:	1007883a 	mov	r3,r2
  81ad5c:	e0bffa17 	ldw	r2,-24(fp)
  81ad60:	0085c83a 	sub	r2,zero,r2
  81ad64:	18800015 	stw	r2,0(r3)
    return -1;
  81ad68:	00bfffc4 	movi	r2,-1
  81ad6c:	00000106 	br	81ad74 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  81ad70:	e0bff917 	ldw	r2,-28(fp)
}
  81ad74:	e037883a 	mov	sp,fp
  81ad78:	dfc00117 	ldw	ra,4(sp)
  81ad7c:	df000017 	ldw	fp,0(sp)
  81ad80:	dec00204 	addi	sp,sp,8
  81ad84:	f800283a 	ret

0081ad88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81ad88:	defffa04 	addi	sp,sp,-24
  81ad8c:	df000515 	stw	fp,20(sp)
  81ad90:	df000504 	addi	fp,sp,20
  81ad94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ad98:	0005303a 	rdctl	r2,status
  81ad9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ada0:	e0fffc17 	ldw	r3,-16(fp)
  81ada4:	00bfff84 	movi	r2,-2
  81ada8:	1884703a 	and	r2,r3,r2
  81adac:	1001703a 	wrctl	status,r2
  
  return context;
  81adb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81adb4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  81adb8:	e0bfff17 	ldw	r2,-4(fp)
  81adbc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81adc0:	e0bffd17 	ldw	r2,-12(fp)
  81adc4:	10800017 	ldw	r2,0(r2)
  81adc8:	e0fffd17 	ldw	r3,-12(fp)
  81adcc:	18c00117 	ldw	r3,4(r3)
  81add0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  81add4:	e0bffd17 	ldw	r2,-12(fp)
  81add8:	10800117 	ldw	r2,4(r2)
  81addc:	e0fffd17 	ldw	r3,-12(fp)
  81ade0:	18c00017 	ldw	r3,0(r3)
  81ade4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81ade8:	e0bffd17 	ldw	r2,-12(fp)
  81adec:	e0fffd17 	ldw	r3,-12(fp)
  81adf0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  81adf4:	e0bffd17 	ldw	r2,-12(fp)
  81adf8:	e0fffd17 	ldw	r3,-12(fp)
  81adfc:	10c00015 	stw	r3,0(r2)
  81ae00:	e0bffb17 	ldw	r2,-20(fp)
  81ae04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ae08:	e0bffe17 	ldw	r2,-8(fp)
  81ae0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81ae10:	0001883a 	nop
  81ae14:	e037883a 	mov	sp,fp
  81ae18:	df000017 	ldw	fp,0(sp)
  81ae1c:	dec00104 	addi	sp,sp,4
  81ae20:	f800283a 	ret

0081ae24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81ae24:	defffb04 	addi	sp,sp,-20
  81ae28:	dfc00415 	stw	ra,16(sp)
  81ae2c:	df000315 	stw	fp,12(sp)
  81ae30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81ae34:	d0a07117 	ldw	r2,-32316(gp)
  81ae38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81ae3c:	d0a0a117 	ldw	r2,-32124(gp)
  81ae40:	10800044 	addi	r2,r2,1
  81ae44:	d0a0a115 	stw	r2,-32124(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81ae48:	00002e06 	br	81af04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  81ae4c:	e0bffd17 	ldw	r2,-12(fp)
  81ae50:	10800017 	ldw	r2,0(r2)
  81ae54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81ae58:	e0bffd17 	ldw	r2,-12(fp)
  81ae5c:	10800403 	ldbu	r2,16(r2)
  81ae60:	10803fcc 	andi	r2,r2,255
  81ae64:	10000426 	beq	r2,zero,81ae78 <alt_tick+0x54>
  81ae68:	d0a0a117 	ldw	r2,-32124(gp)
  81ae6c:	1000021e 	bne	r2,zero,81ae78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81ae70:	e0bffd17 	ldw	r2,-12(fp)
  81ae74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81ae78:	e0bffd17 	ldw	r2,-12(fp)
  81ae7c:	10800217 	ldw	r2,8(r2)
  81ae80:	d0e0a117 	ldw	r3,-32124(gp)
  81ae84:	18801d36 	bltu	r3,r2,81aefc <alt_tick+0xd8>
  81ae88:	e0bffd17 	ldw	r2,-12(fp)
  81ae8c:	10800403 	ldbu	r2,16(r2)
  81ae90:	10803fcc 	andi	r2,r2,255
  81ae94:	1000191e 	bne	r2,zero,81aefc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  81ae98:	e0bffd17 	ldw	r2,-12(fp)
  81ae9c:	10800317 	ldw	r2,12(r2)
  81aea0:	e0fffd17 	ldw	r3,-12(fp)
  81aea4:	18c00517 	ldw	r3,20(r3)
  81aea8:	1809883a 	mov	r4,r3
  81aeac:	103ee83a 	callr	r2
  81aeb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81aeb4:	e0bfff17 	ldw	r2,-4(fp)
  81aeb8:	1000031e 	bne	r2,zero,81aec8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  81aebc:	e13ffd17 	ldw	r4,-12(fp)
  81aec0:	081ad880 	call	81ad88 <alt_alarm_stop>
  81aec4:	00000d06 	br	81aefc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  81aec8:	e0bffd17 	ldw	r2,-12(fp)
  81aecc:	10c00217 	ldw	r3,8(r2)
  81aed0:	e0bfff17 	ldw	r2,-4(fp)
  81aed4:	1887883a 	add	r3,r3,r2
  81aed8:	e0bffd17 	ldw	r2,-12(fp)
  81aedc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81aee0:	e0bffd17 	ldw	r2,-12(fp)
  81aee4:	10c00217 	ldw	r3,8(r2)
  81aee8:	d0a0a117 	ldw	r2,-32124(gp)
  81aeec:	1880032e 	bgeu	r3,r2,81aefc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81aef0:	e0bffd17 	ldw	r2,-12(fp)
  81aef4:	00c00044 	movi	r3,1
  81aef8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  81aefc:	e0bffe17 	ldw	r2,-8(fp)
  81af00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81af04:	e0fffd17 	ldw	r3,-12(fp)
  81af08:	d0a07104 	addi	r2,gp,-32316
  81af0c:	18bfcf1e 	bne	r3,r2,81ae4c <__alt_mem_epcs_flash_controller_0+0xff811e4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81af10:	080fd4c0 	call	80fd4c <OSTimeTick>
}
  81af14:	0001883a 	nop
  81af18:	e037883a 	mov	sp,fp
  81af1c:	dfc00117 	ldw	ra,4(sp)
  81af20:	df000017 	ldw	fp,0(sp)
  81af24:	dec00204 	addi	sp,sp,8
  81af28:	f800283a 	ret

0081af2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  81af2c:	deffff04 	addi	sp,sp,-4
  81af30:	df000015 	stw	fp,0(sp)
  81af34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81af38:	000170fa 	wrctl	ienable,zero
}
  81af3c:	0001883a 	nop
  81af40:	e037883a 	mov	sp,fp
  81af44:	df000017 	ldw	fp,0(sp)
  81af48:	dec00104 	addi	sp,sp,4
  81af4c:	f800283a 	ret

0081af50 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81af50:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81af54:	d0e03117 	ldw	r3,-32572(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81af58:	d1209a17 	ldw	r4,-32152(gp)

      stw ra,  0(sp)
  81af5c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  81af60:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81af64:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81af68:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  81af6c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81af70:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81af74:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81af78:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  81af7c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81af80:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81af84:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81af88:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81af8c:	081b1c40 	call	81b1c4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81af90:	d1209517 	ldw	r4,-32172(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81af94:	d1608d07 	ldb	r5,-32204(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81af98:	d1209a15 	stw	r4,-32152(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81af9c:	d1608d45 	stb	r5,-32203(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81afa0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81afa4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81afa8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81afac:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81afb0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81afb4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81afb8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81afbc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81afc0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81afc4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81afc8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81afcc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81afd0:	d0e03115 	stw	r3,-32572(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  81afd4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  81afd8:	f800283a 	ret

0081afdc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81afdc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81afe0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  81afe4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  81afe8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81afec:	081b1c40 	call	81b1c4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81aff0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81aff4:	d4a08b45 	stb	r18,-32211(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  81aff8:	003fe506 	br	81af90 <__alt_mem_epcs_flash_controller_0+0xff811f90>

0081affc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81affc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81b000:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81b004:	10800054 	ori	r2,r2,1
      wrctl status, r2
  81b008:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81b00c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81b010:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81b014:	dec00204 	addi	sp,sp,8

      callr r2
  81b018:	103ee83a 	callr	r2

      nop
  81b01c:	0001883a 	nop

0081b020 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81b020:	defff704 	addi	sp,sp,-36
  81b024:	dfc00815 	stw	ra,32(sp)
  81b028:	df000715 	stw	fp,28(sp)
  81b02c:	df000704 	addi	fp,sp,28
  81b030:	e13ffc15 	stw	r4,-16(fp)
  81b034:	e17ffd15 	stw	r5,-12(fp)
  81b038:	e1bffe15 	stw	r6,-8(fp)
  81b03c:	3805883a 	mov	r2,r7
  81b040:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81b044:	e0fffe17 	ldw	r3,-8(fp)
  81b048:	00bfff04 	movi	r2,-4
  81b04c:	1884703a 	and	r2,r3,r2
  81b050:	10bef704 	addi	r2,r2,-1060
  81b054:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81b058:	01810904 	movi	r6,1060
  81b05c:	000b883a 	mov	r5,zero
  81b060:	e13ff917 	ldw	r4,-28(fp)
  81b064:	08028780 	call	802878 <memset>
  81b068:	e0bff917 	ldw	r2,-28(fp)
  81b06c:	10c0bb04 	addi	r3,r2,748
  81b070:	e0bff917 	ldw	r2,-28(fp)
  81b074:	10c00115 	stw	r3,4(r2)
  81b078:	e0bff917 	ldw	r2,-28(fp)
  81b07c:	10c0d504 	addi	r3,r2,852
  81b080:	e0bff917 	ldw	r2,-28(fp)
  81b084:	10c00215 	stw	r3,8(r2)
  81b088:	e0bff917 	ldw	r2,-28(fp)
  81b08c:	10c0ef04 	addi	r3,r2,956
  81b090:	e0bff917 	ldw	r2,-28(fp)
  81b094:	10c00315 	stw	r3,12(r2)
  81b098:	e0fff917 	ldw	r3,-28(fp)
  81b09c:	008020b4 	movhi	r2,130
  81b0a0:	10b0a904 	addi	r2,r2,-15708
  81b0a4:	18800d15 	stw	r2,52(r3)
  81b0a8:	e0bff917 	ldw	r2,-28(fp)
  81b0ac:	00c00044 	movi	r3,1
  81b0b0:	10c02915 	stw	r3,164(r2)
  81b0b4:	10002a15 	stw	zero,168(r2)
  81b0b8:	e0bff917 	ldw	r2,-28(fp)
  81b0bc:	00ccc384 	movi	r3,13070
  81b0c0:	10c02b0d 	sth	r3,172(r2)
  81b0c4:	e0bff917 	ldw	r2,-28(fp)
  81b0c8:	00eaf344 	movi	r3,-21555
  81b0cc:	10c02b8d 	sth	r3,174(r2)
  81b0d0:	e0bff917 	ldw	r2,-28(fp)
  81b0d4:	00c48d04 	movi	r3,4660
  81b0d8:	10c02c0d 	sth	r3,176(r2)
  81b0dc:	e0bff917 	ldw	r2,-28(fp)
  81b0e0:	00f99b44 	movi	r3,-6547
  81b0e4:	10c02c8d 	sth	r3,178(r2)
  81b0e8:	e0bff917 	ldw	r2,-28(fp)
  81b0ec:	00f7bb04 	movi	r3,-8468
  81b0f0:	10c02d0d 	sth	r3,180(r2)
  81b0f4:	e0bff917 	ldw	r2,-28(fp)
  81b0f8:	00c00144 	movi	r3,5
  81b0fc:	10c02d8d 	sth	r3,182(r2)
  81b100:	e0bff917 	ldw	r2,-28(fp)
  81b104:	00c002c4 	movi	r3,11
  81b108:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81b10c:	e0bff917 	ldw	r2,-28(fp)
  81b110:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81b114:	e0bffa17 	ldw	r2,-24(fp)
  81b118:	10bff304 	addi	r2,r2,-52
  81b11c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81b120:	e0bffb17 	ldw	r2,-20(fp)
  81b124:	10800c04 	addi	r2,r2,48
  81b128:	e0fffc17 	ldw	r3,-16(fp)
  81b12c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81b130:	e0bffb17 	ldw	r2,-20(fp)
  81b134:	10800b04 	addi	r2,r2,44
  81b138:	e0fffd17 	ldw	r3,-12(fp)
  81b13c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81b140:	e0bffb17 	ldw	r2,-20(fp)
  81b144:	10800a04 	addi	r2,r2,40
  81b148:	e0fff917 	ldw	r3,-28(fp)
  81b14c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81b150:	008020b4 	movhi	r2,130
  81b154:	10abff04 	addi	r2,r2,-20484
  81b158:	10c00104 	addi	r3,r2,4
  81b15c:	e0bffb17 	ldw	r2,-20(fp)
  81b160:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81b164:	e0bffb17 	ldw	r2,-20(fp)
}
  81b168:	e037883a 	mov	sp,fp
  81b16c:	dfc00117 	ldw	ra,4(sp)
  81b170:	df000017 	ldw	fp,0(sp)
  81b174:	dec00204 	addi	sp,sp,8
  81b178:	f800283a 	ret

0081b17c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81b17c:	defffe04 	addi	sp,sp,-8
  81b180:	df000115 	stw	fp,4(sp)
  81b184:	df000104 	addi	fp,sp,4
  81b188:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81b18c:	0001883a 	nop
  81b190:	e037883a 	mov	sp,fp
  81b194:	df000017 	ldw	fp,0(sp)
  81b198:	dec00104 	addi	sp,sp,4
  81b19c:	f800283a 	ret

0081b1a0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81b1a0:	defffe04 	addi	sp,sp,-8
  81b1a4:	df000115 	stw	fp,4(sp)
  81b1a8:	df000104 	addi	fp,sp,4
  81b1ac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81b1b0:	0001883a 	nop
  81b1b4:	e037883a 	mov	sp,fp
  81b1b8:	df000017 	ldw	fp,0(sp)
  81b1bc:	dec00104 	addi	sp,sp,4
  81b1c0:	f800283a 	ret

0081b1c4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81b1c4:	deffff04 	addi	sp,sp,-4
  81b1c8:	df000015 	stw	fp,0(sp)
  81b1cc:	d839883a 	mov	fp,sp
}
  81b1d0:	0001883a 	nop
  81b1d4:	e037883a 	mov	sp,fp
  81b1d8:	df000017 	ldw	fp,0(sp)
  81b1dc:	dec00104 	addi	sp,sp,4
  81b1e0:	f800283a 	ret

0081b1e4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81b1e4:	deffff04 	addi	sp,sp,-4
  81b1e8:	df000015 	stw	fp,0(sp)
  81b1ec:	d839883a 	mov	fp,sp
}
  81b1f0:	0001883a 	nop
  81b1f4:	e037883a 	mov	sp,fp
  81b1f8:	df000017 	ldw	fp,0(sp)
  81b1fc:	dec00104 	addi	sp,sp,4
  81b200:	f800283a 	ret

0081b204 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81b204:	deffff04 	addi	sp,sp,-4
  81b208:	df000015 	stw	fp,0(sp)
  81b20c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81b210:	0001883a 	nop
  81b214:	e037883a 	mov	sp,fp
  81b218:	df000017 	ldw	fp,0(sp)
  81b21c:	dec00104 	addi	sp,sp,4
  81b220:	f800283a 	ret

0081b224 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81b224:	deffff04 	addi	sp,sp,-4
  81b228:	df000015 	stw	fp,0(sp)
  81b22c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81b230:	0001883a 	nop
  81b234:	e037883a 	mov	sp,fp
  81b238:	df000017 	ldw	fp,0(sp)
  81b23c:	dec00104 	addi	sp,sp,4
  81b240:	f800283a 	ret

0081b244 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81b244:	deffff04 	addi	sp,sp,-4
  81b248:	df000015 	stw	fp,0(sp)
  81b24c:	d839883a 	mov	fp,sp
}
  81b250:	0001883a 	nop
  81b254:	e037883a 	mov	sp,fp
  81b258:	df000017 	ldw	fp,0(sp)
  81b25c:	dec00104 	addi	sp,sp,4
  81b260:	f800283a 	ret

0081b264 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81b264:	deffff04 	addi	sp,sp,-4
  81b268:	df000015 	stw	fp,0(sp)
  81b26c:	d839883a 	mov	fp,sp
}
  81b270:	0001883a 	nop
  81b274:	e037883a 	mov	sp,fp
  81b278:	df000017 	ldw	fp,0(sp)
  81b27c:	dec00104 	addi	sp,sp,4
  81b280:	f800283a 	ret

0081b284 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81b284:	defffe04 	addi	sp,sp,-8
  81b288:	df000115 	stw	fp,4(sp)
  81b28c:	df000104 	addi	fp,sp,4
  81b290:	e13fff15 	stw	r4,-4(fp)
}
  81b294:	0001883a 	nop
  81b298:	e037883a 	mov	sp,fp
  81b29c:	df000017 	ldw	fp,0(sp)
  81b2a0:	dec00104 	addi	sp,sp,4
  81b2a4:	f800283a 	ret

0081b2a8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  81b2a8:	defff404 	addi	sp,sp,-48
  81b2ac:	df000b15 	stw	fp,44(sp)
  81b2b0:	df000b04 	addi	fp,sp,44
  81b2b4:	e13ffc15 	stw	r4,-16(fp)
  81b2b8:	e17ffd15 	stw	r5,-12(fp)
  81b2bc:	e1bffe15 	stw	r6,-8(fp)
  81b2c0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  81b2c4:	e0ffff17 	ldw	r3,-4(fp)
  81b2c8:	e0bffe17 	ldw	r2,-8(fp)
  81b2cc:	1885883a 	add	r2,r3,r2
  81b2d0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  81b2d4:	e0c00217 	ldw	r3,8(fp)
  81b2d8:	e0800117 	ldw	r2,4(fp)
  81b2dc:	1885883a 	add	r2,r3,r2
  81b2e0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  81b2e4:	e0800117 	ldw	r2,4(fp)
  81b2e8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  81b2ec:	e0bffe17 	ldw	r2,-8(fp)
  81b2f0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  81b2f4:	00800044 	movi	r2,1
  81b2f8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  81b2fc:	e0bffc17 	ldw	r2,-16(fp)
  81b300:	10800504 	addi	r2,r2,20
  81b304:	1009883a 	mov	r4,r2
  81b308:	00c00044 	movi	r3,1
  81b30c:	e0bffd17 	ldw	r2,-12(fp)
  81b310:	1884983a 	sll	r2,r3,r2
  81b314:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  81b318:	e0800317 	ldw	r2,12(fp)
  81b31c:	1080008c 	andi	r2,r2,2
  81b320:	1000051e 	bne	r2,zero,81b338 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  81b324:	e0bffc17 	ldw	r2,-16(fp)
  81b328:	10800304 	addi	r2,r2,12
  81b32c:	1007883a 	mov	r3,r2
  81b330:	00810004 	movi	r2,1024
  81b334:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  81b338:	e0bffc17 	ldw	r2,-16(fp)
  81b33c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  81b340:	e0bffc17 	ldw	r2,-16(fp)
  81b344:	10800204 	addi	r2,r2,8
  81b348:	10800037 	ldwio	r2,0(r2)
  81b34c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  81b350:	e0bffa17 	ldw	r2,-24(fp)
  81b354:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  81b358:	10000226 	beq	r2,zero,81b364 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  81b35c:	e0bff717 	ldw	r2,-36(fp)
  81b360:	1000031e 	bne	r2,zero,81b370 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  81b364:	e0bffa17 	ldw	r2,-24(fp)
  81b368:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  81b36c:	103ff426 	beq	r2,zero,81b340 <__alt_mem_epcs_flash_controller_0+0xff812340>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  81b370:	e0bffa17 	ldw	r2,-24(fp)
  81b374:	1080100c 	andi	r2,r2,64
  81b378:	10001e26 	beq	r2,zero,81b3f4 <alt_avalon_spi_command+0x14c>
  81b37c:	e0bff717 	ldw	r2,-36(fp)
  81b380:	00801c0e 	bge	zero,r2,81b3f4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  81b384:	e0bff717 	ldw	r2,-36(fp)
  81b388:	10bfffc4 	addi	r2,r2,-1
  81b38c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  81b390:	e0ffff17 	ldw	r3,-4(fp)
  81b394:	e0bff817 	ldw	r2,-32(fp)
  81b398:	18800a2e 	bgeu	r3,r2,81b3c4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  81b39c:	e0bffc17 	ldw	r2,-16(fp)
  81b3a0:	10800104 	addi	r2,r2,4
  81b3a4:	1009883a 	mov	r4,r2
  81b3a8:	e0bfff17 	ldw	r2,-4(fp)
  81b3ac:	10c00044 	addi	r3,r2,1
  81b3b0:	e0ffff15 	stw	r3,-4(fp)
  81b3b4:	10800003 	ldbu	r2,0(r2)
  81b3b8:	10803fcc 	andi	r2,r2,255
  81b3bc:	20800035 	stwio	r2,0(r4)
  81b3c0:	00000c06 	br	81b3f4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  81b3c4:	e0bff517 	ldw	r2,-44(fp)
  81b3c8:	10000826 	beq	r2,zero,81b3ec <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  81b3cc:	e0bff517 	ldw	r2,-44(fp)
  81b3d0:	10bfffc4 	addi	r2,r2,-1
  81b3d4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  81b3d8:	e0bffc17 	ldw	r2,-16(fp)
  81b3dc:	10800104 	addi	r2,r2,4
  81b3e0:	0007883a 	mov	r3,zero
  81b3e4:	10c00035 	stwio	r3,0(r2)
  81b3e8:	00000206 	br	81b3f4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  81b3ec:	00bf0004 	movi	r2,-1024
  81b3f0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  81b3f4:	e0bffa17 	ldw	r2,-24(fp)
  81b3f8:	1080200c 	andi	r2,r2,128
  81b3fc:	103fd026 	beq	r2,zero,81b340 <__alt_mem_epcs_flash_controller_0+0xff812340>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  81b400:	e0bffc17 	ldw	r2,-16(fp)
  81b404:	10800037 	ldwio	r2,0(r2)
  81b408:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  81b40c:	e0bff617 	ldw	r2,-40(fp)
  81b410:	10000426 	beq	r2,zero,81b424 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  81b414:	e0bff617 	ldw	r2,-40(fp)
  81b418:	10bfffc4 	addi	r2,r2,-1
  81b41c:	e0bff615 	stw	r2,-40(fp)
  81b420:	00000506 	br	81b438 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  81b424:	e0800217 	ldw	r2,8(fp)
  81b428:	10c00044 	addi	r3,r2,1
  81b42c:	e0c00215 	stw	r3,8(fp)
  81b430:	e0fffb17 	ldw	r3,-20(fp)
  81b434:	10c00005 	stb	r3,0(r2)
      credits++;
  81b438:	e0bff717 	ldw	r2,-36(fp)
  81b43c:	10800044 	addi	r2,r2,1
  81b440:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  81b444:	e0bff617 	ldw	r2,-40(fp)
  81b448:	103fbd1e 	bne	r2,zero,81b340 <__alt_mem_epcs_flash_controller_0+0xff812340>
  81b44c:	e0c00217 	ldw	r3,8(fp)
  81b450:	e0bff917 	ldw	r2,-28(fp)
  81b454:	18bfba1e 	bne	r3,r2,81b340 <__alt_mem_epcs_flash_controller_0+0xff812340>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  81b458:	e0bffc17 	ldw	r2,-16(fp)
  81b45c:	10800204 	addi	r2,r2,8
  81b460:	10800037 	ldwio	r2,0(r2)
  81b464:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  81b468:	e0bffa17 	ldw	r2,-24(fp)
  81b46c:	1080080c 	andi	r2,r2,32
  81b470:	103ff926 	beq	r2,zero,81b458 <__alt_mem_epcs_flash_controller_0+0xff812458>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  81b474:	e0800317 	ldw	r2,12(fp)
  81b478:	1080004c 	andi	r2,r2,1
  81b47c:	1000041e 	bne	r2,zero,81b490 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  81b480:	e0bffc17 	ldw	r2,-16(fp)
  81b484:	10800304 	addi	r2,r2,12
  81b488:	0007883a 	mov	r3,zero
  81b48c:	10c00035 	stwio	r3,0(r2)

  return read_length;
  81b490:	e0800117 	ldw	r2,4(fp)
}
  81b494:	e037883a 	mov	sp,fp
  81b498:	df000017 	ldw	fp,0(sp)
  81b49c:	dec00104 	addi	sp,sp,4
  81b4a0:	f800283a 	ret

0081b4a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81b4a4:	defffa04 	addi	sp,sp,-24
  81b4a8:	dfc00515 	stw	ra,20(sp)
  81b4ac:	df000415 	stw	fp,16(sp)
  81b4b0:	df000404 	addi	fp,sp,16
  81b4b4:	e13ffe15 	stw	r4,-8(fp)
  81b4b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81b4bc:	e0bfff17 	ldw	r2,-4(fp)
  81b4c0:	10800017 	ldw	r2,0(r2)
  81b4c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81b4c8:	e13ffe17 	ldw	r4,-8(fp)
  81b4cc:	0802c900 	call	802c90 <strlen>
  81b4d0:	10800044 	addi	r2,r2,1
  81b4d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81b4d8:	00000d06 	br	81b510 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81b4dc:	e0bffc17 	ldw	r2,-16(fp)
  81b4e0:	10800217 	ldw	r2,8(r2)
  81b4e4:	e0fffd17 	ldw	r3,-12(fp)
  81b4e8:	180d883a 	mov	r6,r3
  81b4ec:	e17ffe17 	ldw	r5,-8(fp)
  81b4f0:	1009883a 	mov	r4,r2
  81b4f4:	081b77c0 	call	81b77c <memcmp>
  81b4f8:	1000021e 	bne	r2,zero,81b504 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81b4fc:	e0bffc17 	ldw	r2,-16(fp)
  81b500:	00000706 	br	81b520 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81b504:	e0bffc17 	ldw	r2,-16(fp)
  81b508:	10800017 	ldw	r2,0(r2)
  81b50c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81b510:	e0fffc17 	ldw	r3,-16(fp)
  81b514:	e0bfff17 	ldw	r2,-4(fp)
  81b518:	18bff01e 	bne	r3,r2,81b4dc <__alt_mem_epcs_flash_controller_0+0xff8124dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81b51c:	0005883a 	mov	r2,zero
}
  81b520:	e037883a 	mov	sp,fp
  81b524:	dfc00117 	ldw	ra,4(sp)
  81b528:	df000017 	ldw	fp,0(sp)
  81b52c:	dec00204 	addi	sp,sp,8
  81b530:	f800283a 	ret

0081b534 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81b534:	defffb04 	addi	sp,sp,-20
  81b538:	dfc00415 	stw	ra,16(sp)
  81b53c:	df000315 	stw	fp,12(sp)
  81b540:	df000304 	addi	fp,sp,12
  81b544:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81b548:	d0a03617 	ldw	r2,-32552(gp)
  81b54c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b550:	00003106 	br	81b618 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  81b554:	e0bffd17 	ldw	r2,-12(fp)
  81b558:	10800217 	ldw	r2,8(r2)
  81b55c:	1009883a 	mov	r4,r2
  81b560:	0802c900 	call	802c90 <strlen>
  81b564:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81b568:	e0bffd17 	ldw	r2,-12(fp)
  81b56c:	10c00217 	ldw	r3,8(r2)
  81b570:	e0bffe17 	ldw	r2,-8(fp)
  81b574:	10bfffc4 	addi	r2,r2,-1
  81b578:	1885883a 	add	r2,r3,r2
  81b57c:	10800003 	ldbu	r2,0(r2)
  81b580:	10803fcc 	andi	r2,r2,255
  81b584:	1080201c 	xori	r2,r2,128
  81b588:	10bfe004 	addi	r2,r2,-128
  81b58c:	10800bd8 	cmpnei	r2,r2,47
  81b590:	1000031e 	bne	r2,zero,81b5a0 <alt_find_file+0x6c>
    {
      len -= 1;
  81b594:	e0bffe17 	ldw	r2,-8(fp)
  81b598:	10bfffc4 	addi	r2,r2,-1
  81b59c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b5a0:	e0bffe17 	ldw	r2,-8(fp)
  81b5a4:	e0ffff17 	ldw	r3,-4(fp)
  81b5a8:	1885883a 	add	r2,r3,r2
  81b5ac:	10800003 	ldbu	r2,0(r2)
  81b5b0:	10803fcc 	andi	r2,r2,255
  81b5b4:	1080201c 	xori	r2,r2,128
  81b5b8:	10bfe004 	addi	r2,r2,-128
  81b5bc:	10800be0 	cmpeqi	r2,r2,47
  81b5c0:	1000081e 	bne	r2,zero,81b5e4 <alt_find_file+0xb0>
  81b5c4:	e0bffe17 	ldw	r2,-8(fp)
  81b5c8:	e0ffff17 	ldw	r3,-4(fp)
  81b5cc:	1885883a 	add	r2,r3,r2
  81b5d0:	10800003 	ldbu	r2,0(r2)
  81b5d4:	10803fcc 	andi	r2,r2,255
  81b5d8:	1080201c 	xori	r2,r2,128
  81b5dc:	10bfe004 	addi	r2,r2,-128
  81b5e0:	10000a1e 	bne	r2,zero,81b60c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  81b5e4:	e0bffd17 	ldw	r2,-12(fp)
  81b5e8:	10800217 	ldw	r2,8(r2)
  81b5ec:	e0fffe17 	ldw	r3,-8(fp)
  81b5f0:	180d883a 	mov	r6,r3
  81b5f4:	e17fff17 	ldw	r5,-4(fp)
  81b5f8:	1009883a 	mov	r4,r2
  81b5fc:	081b77c0 	call	81b77c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b600:	1000021e 	bne	r2,zero,81b60c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81b604:	e0bffd17 	ldw	r2,-12(fp)
  81b608:	00000706 	br	81b628 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81b60c:	e0bffd17 	ldw	r2,-12(fp)
  81b610:	10800017 	ldw	r2,0(r2)
  81b614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b618:	e0fffd17 	ldw	r3,-12(fp)
  81b61c:	d0a03604 	addi	r2,gp,-32552
  81b620:	18bfcc1e 	bne	r3,r2,81b554 <__alt_mem_epcs_flash_controller_0+0xff812554>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81b624:	0005883a 	mov	r2,zero
}
  81b628:	e037883a 	mov	sp,fp
  81b62c:	dfc00117 	ldw	ra,4(sp)
  81b630:	df000017 	ldw	fp,0(sp)
  81b634:	dec00204 	addi	sp,sp,8
  81b638:	f800283a 	ret

0081b63c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b63c:	defff804 	addi	sp,sp,-32
  81b640:	dfc00715 	stw	ra,28(sp)
  81b644:	df000615 	stw	fp,24(sp)
  81b648:	dc000515 	stw	r16,20(sp)
  81b64c:	df000604 	addi	fp,sp,24
  81b650:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  81b654:	00bffa04 	movi	r2,-24
  81b658:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81b65c:	d0a08217 	ldw	r2,-32248(gp)
  81b660:	e0bffc15 	stw	r2,-16(fp)
  81b664:	e03ffd0d 	sth	zero,-12(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  81b668:	e0bffd0b 	ldhu	r2,-12(fp)
  81b66c:	e0fffd84 	addi	r3,fp,-10
  81b670:	180d883a 	mov	r6,r3
  81b674:	100b883a 	mov	r5,r2
  81b678:	e13ffc17 	ldw	r4,-16(fp)
  81b67c:	081459c0 	call	81459c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b680:	e03ffa15 	stw	zero,-24(fp)
  81b684:	00001d06 	br	81b6fc <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  81b688:	040020b4 	movhi	r16,130
  81b68c:	8432dd04 	addi	r16,r16,-13452
  81b690:	e0bffa17 	ldw	r2,-24(fp)
  81b694:	01400304 	movi	r5,12
  81b698:	1009883a 	mov	r4,r2
  81b69c:	080b99c0 	call	80b99c <__mulsi3>
  81b6a0:	8085883a 	add	r2,r16,r2
  81b6a4:	10800017 	ldw	r2,0(r2)
  81b6a8:	1000111e 	bne	r2,zero,81b6f0 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  81b6ac:	040020b4 	movhi	r16,130
  81b6b0:	8432dd04 	addi	r16,r16,-13452
  81b6b4:	e0bffa17 	ldw	r2,-24(fp)
  81b6b8:	01400304 	movi	r5,12
  81b6bc:	1009883a 	mov	r4,r2
  81b6c0:	080b99c0 	call	80b99c <__mulsi3>
  81b6c4:	8085883a 	add	r2,r16,r2
  81b6c8:	e0fffe17 	ldw	r3,-8(fp)
  81b6cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  81b6d0:	d0e03a17 	ldw	r3,-32536(gp)
  81b6d4:	e0bffa17 	ldw	r2,-24(fp)
  81b6d8:	1880020e 	bge	r3,r2,81b6e4 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  81b6dc:	e0bffa17 	ldw	r2,-24(fp)
  81b6e0:	d0a03a15 	stw	r2,-32536(gp)
      }
      rc = i;
  81b6e4:	e0bffa17 	ldw	r2,-24(fp)
  81b6e8:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  81b6ec:	00000606 	br	81b708 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b6f0:	e0bffa17 	ldw	r2,-24(fp)
  81b6f4:	10800044 	addi	r2,r2,1
  81b6f8:	e0bffa15 	stw	r2,-24(fp)
  81b6fc:	e0bffa17 	ldw	r2,-24(fp)
  81b700:	10800810 	cmplti	r2,r2,32
  81b704:	103fe01e 	bne	r2,zero,81b688 <__alt_mem_epcs_flash_controller_0+0xff812688>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81b708:	d0a08217 	ldw	r2,-32248(gp)
  81b70c:	1009883a 	mov	r4,r2
  81b710:	08149140 	call	814914 <OSSemPost>

  return rc;
  81b714:	e0bffb17 	ldw	r2,-20(fp)
}
  81b718:	e6ffff04 	addi	sp,fp,-4
  81b71c:	dfc00217 	ldw	ra,8(sp)
  81b720:	df000117 	ldw	fp,4(sp)
  81b724:	dc000017 	ldw	r16,0(sp)
  81b728:	dec00304 	addi	sp,sp,12
  81b72c:	f800283a 	ret

0081b730 <atexit>:
  81b730:	200b883a 	mov	r5,r4
  81b734:	000f883a 	mov	r7,zero
  81b738:	000d883a 	mov	r6,zero
  81b73c:	0009883a 	mov	r4,zero
  81b740:	081b7f81 	jmpi	81b7f8 <__register_exitproc>

0081b744 <exit>:
  81b744:	defffe04 	addi	sp,sp,-8
  81b748:	000b883a 	mov	r5,zero
  81b74c:	dc000015 	stw	r16,0(sp)
  81b750:	dfc00115 	stw	ra,4(sp)
  81b754:	2021883a 	mov	r16,r4
  81b758:	081b9100 	call	81b910 <__call_exitprocs>
  81b75c:	008020b4 	movhi	r2,130
  81b760:	10b82d04 	addi	r2,r2,-8012
  81b764:	11000017 	ldw	r4,0(r2)
  81b768:	20800f17 	ldw	r2,60(r4)
  81b76c:	10000126 	beq	r2,zero,81b774 <exit+0x30>
  81b770:	103ee83a 	callr	r2
  81b774:	8009883a 	mov	r4,r16
  81b778:	081ba900 	call	81ba90 <_exit>

0081b77c <memcmp>:
  81b77c:	01c000c4 	movi	r7,3
  81b780:	3980192e 	bgeu	r7,r6,81b7e8 <memcmp+0x6c>
  81b784:	2144b03a 	or	r2,r4,r5
  81b788:	11c4703a 	and	r2,r2,r7
  81b78c:	10000f26 	beq	r2,zero,81b7cc <memcmp+0x50>
  81b790:	20800003 	ldbu	r2,0(r4)
  81b794:	28c00003 	ldbu	r3,0(r5)
  81b798:	10c0151e 	bne	r2,r3,81b7f0 <memcmp+0x74>
  81b79c:	31bfff84 	addi	r6,r6,-2
  81b7a0:	01ffffc4 	movi	r7,-1
  81b7a4:	00000406 	br	81b7b8 <memcmp+0x3c>
  81b7a8:	20800003 	ldbu	r2,0(r4)
  81b7ac:	28c00003 	ldbu	r3,0(r5)
  81b7b0:	31bfffc4 	addi	r6,r6,-1
  81b7b4:	10c00e1e 	bne	r2,r3,81b7f0 <memcmp+0x74>
  81b7b8:	21000044 	addi	r4,r4,1
  81b7bc:	29400044 	addi	r5,r5,1
  81b7c0:	31fff91e 	bne	r6,r7,81b7a8 <__alt_mem_epcs_flash_controller_0+0xff8127a8>
  81b7c4:	0005883a 	mov	r2,zero
  81b7c8:	f800283a 	ret
  81b7cc:	20c00017 	ldw	r3,0(r4)
  81b7d0:	28800017 	ldw	r2,0(r5)
  81b7d4:	18bfee1e 	bne	r3,r2,81b790 <__alt_mem_epcs_flash_controller_0+0xff812790>
  81b7d8:	31bfff04 	addi	r6,r6,-4
  81b7dc:	21000104 	addi	r4,r4,4
  81b7e0:	29400104 	addi	r5,r5,4
  81b7e4:	39bff936 	bltu	r7,r6,81b7cc <__alt_mem_epcs_flash_controller_0+0xff8127cc>
  81b7e8:	303fe91e 	bne	r6,zero,81b790 <__alt_mem_epcs_flash_controller_0+0xff812790>
  81b7ec:	003ff506 	br	81b7c4 <__alt_mem_epcs_flash_controller_0+0xff8127c4>
  81b7f0:	10c5c83a 	sub	r2,r2,r3
  81b7f4:	f800283a 	ret

0081b7f8 <__register_exitproc>:
  81b7f8:	defffa04 	addi	sp,sp,-24
  81b7fc:	dc000315 	stw	r16,12(sp)
  81b800:	040020b4 	movhi	r16,130
  81b804:	84382d04 	addi	r16,r16,-8012
  81b808:	80c00017 	ldw	r3,0(r16)
  81b80c:	dc400415 	stw	r17,16(sp)
  81b810:	dfc00515 	stw	ra,20(sp)
  81b814:	18805217 	ldw	r2,328(r3)
  81b818:	2023883a 	mov	r17,r4
  81b81c:	10003726 	beq	r2,zero,81b8fc <__register_exitproc+0x104>
  81b820:	10c00117 	ldw	r3,4(r2)
  81b824:	010007c4 	movi	r4,31
  81b828:	20c00e16 	blt	r4,r3,81b864 <__register_exitproc+0x6c>
  81b82c:	1a000044 	addi	r8,r3,1
  81b830:	8800221e 	bne	r17,zero,81b8bc <__register_exitproc+0xc4>
  81b834:	18c00084 	addi	r3,r3,2
  81b838:	18c7883a 	add	r3,r3,r3
  81b83c:	18c7883a 	add	r3,r3,r3
  81b840:	12000115 	stw	r8,4(r2)
  81b844:	10c7883a 	add	r3,r2,r3
  81b848:	19400015 	stw	r5,0(r3)
  81b84c:	0005883a 	mov	r2,zero
  81b850:	dfc00517 	ldw	ra,20(sp)
  81b854:	dc400417 	ldw	r17,16(sp)
  81b858:	dc000317 	ldw	r16,12(sp)
  81b85c:	dec00604 	addi	sp,sp,24
  81b860:	f800283a 	ret
  81b864:	00800034 	movhi	r2,0
  81b868:	10800004 	addi	r2,r2,0
  81b86c:	10002626 	beq	r2,zero,81b908 <__register_exitproc+0x110>
  81b870:	01006404 	movi	r4,400
  81b874:	d9400015 	stw	r5,0(sp)
  81b878:	d9800115 	stw	r6,4(sp)
  81b87c:	d9c00215 	stw	r7,8(sp)
  81b880:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81b884:	d9400017 	ldw	r5,0(sp)
  81b888:	d9800117 	ldw	r6,4(sp)
  81b88c:	d9c00217 	ldw	r7,8(sp)
  81b890:	10001d26 	beq	r2,zero,81b908 <__register_exitproc+0x110>
  81b894:	81000017 	ldw	r4,0(r16)
  81b898:	10000115 	stw	zero,4(r2)
  81b89c:	02000044 	movi	r8,1
  81b8a0:	22405217 	ldw	r9,328(r4)
  81b8a4:	0007883a 	mov	r3,zero
  81b8a8:	12400015 	stw	r9,0(r2)
  81b8ac:	20805215 	stw	r2,328(r4)
  81b8b0:	10006215 	stw	zero,392(r2)
  81b8b4:	10006315 	stw	zero,396(r2)
  81b8b8:	883fde26 	beq	r17,zero,81b834 <__alt_mem_epcs_flash_controller_0+0xff812834>
  81b8bc:	18c9883a 	add	r4,r3,r3
  81b8c0:	2109883a 	add	r4,r4,r4
  81b8c4:	1109883a 	add	r4,r2,r4
  81b8c8:	21802215 	stw	r6,136(r4)
  81b8cc:	01800044 	movi	r6,1
  81b8d0:	12406217 	ldw	r9,392(r2)
  81b8d4:	30cc983a 	sll	r6,r6,r3
  81b8d8:	4992b03a 	or	r9,r9,r6
  81b8dc:	12406215 	stw	r9,392(r2)
  81b8e0:	21c04215 	stw	r7,264(r4)
  81b8e4:	01000084 	movi	r4,2
  81b8e8:	893fd21e 	bne	r17,r4,81b834 <__alt_mem_epcs_flash_controller_0+0xff812834>
  81b8ec:	11006317 	ldw	r4,396(r2)
  81b8f0:	218cb03a 	or	r6,r4,r6
  81b8f4:	11806315 	stw	r6,396(r2)
  81b8f8:	003fce06 	br	81b834 <__alt_mem_epcs_flash_controller_0+0xff812834>
  81b8fc:	18805304 	addi	r2,r3,332
  81b900:	18805215 	stw	r2,328(r3)
  81b904:	003fc606 	br	81b820 <__alt_mem_epcs_flash_controller_0+0xff812820>
  81b908:	00bfffc4 	movi	r2,-1
  81b90c:	003fd006 	br	81b850 <__alt_mem_epcs_flash_controller_0+0xff812850>

0081b910 <__call_exitprocs>:
  81b910:	defff504 	addi	sp,sp,-44
  81b914:	df000915 	stw	fp,36(sp)
  81b918:	dd400615 	stw	r21,24(sp)
  81b91c:	dc800315 	stw	r18,12(sp)
  81b920:	dfc00a15 	stw	ra,40(sp)
  81b924:	ddc00815 	stw	r23,32(sp)
  81b928:	dd800715 	stw	r22,28(sp)
  81b92c:	dd000515 	stw	r20,20(sp)
  81b930:	dcc00415 	stw	r19,16(sp)
  81b934:	dc400215 	stw	r17,8(sp)
  81b938:	dc000115 	stw	r16,4(sp)
  81b93c:	d9000015 	stw	r4,0(sp)
  81b940:	2839883a 	mov	fp,r5
  81b944:	04800044 	movi	r18,1
  81b948:	057fffc4 	movi	r21,-1
  81b94c:	008020b4 	movhi	r2,130
  81b950:	10b82d04 	addi	r2,r2,-8012
  81b954:	12000017 	ldw	r8,0(r2)
  81b958:	45005217 	ldw	r20,328(r8)
  81b95c:	44c05204 	addi	r19,r8,328
  81b960:	a0001c26 	beq	r20,zero,81b9d4 <__call_exitprocs+0xc4>
  81b964:	a0800117 	ldw	r2,4(r20)
  81b968:	15ffffc4 	addi	r23,r2,-1
  81b96c:	b8000d16 	blt	r23,zero,81b9a4 <__call_exitprocs+0x94>
  81b970:	14000044 	addi	r16,r2,1
  81b974:	8421883a 	add	r16,r16,r16
  81b978:	8421883a 	add	r16,r16,r16
  81b97c:	84402004 	addi	r17,r16,128
  81b980:	a463883a 	add	r17,r20,r17
  81b984:	a421883a 	add	r16,r20,r16
  81b988:	e0001e26 	beq	fp,zero,81ba04 <__call_exitprocs+0xf4>
  81b98c:	80804017 	ldw	r2,256(r16)
  81b990:	e0801c26 	beq	fp,r2,81ba04 <__call_exitprocs+0xf4>
  81b994:	bdffffc4 	addi	r23,r23,-1
  81b998:	843fff04 	addi	r16,r16,-4
  81b99c:	8c7fff04 	addi	r17,r17,-4
  81b9a0:	bd7ff91e 	bne	r23,r21,81b988 <__alt_mem_epcs_flash_controller_0+0xff812988>
  81b9a4:	00800034 	movhi	r2,0
  81b9a8:	10800004 	addi	r2,r2,0
  81b9ac:	10000926 	beq	r2,zero,81b9d4 <__call_exitprocs+0xc4>
  81b9b0:	a0800117 	ldw	r2,4(r20)
  81b9b4:	1000301e 	bne	r2,zero,81ba78 <__call_exitprocs+0x168>
  81b9b8:	a0800017 	ldw	r2,0(r20)
  81b9bc:	10003226 	beq	r2,zero,81ba88 <__call_exitprocs+0x178>
  81b9c0:	a009883a 	mov	r4,r20
  81b9c4:	98800015 	stw	r2,0(r19)
  81b9c8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81b9cc:	9d000017 	ldw	r20,0(r19)
  81b9d0:	a03fe41e 	bne	r20,zero,81b964 <__alt_mem_epcs_flash_controller_0+0xff812964>
  81b9d4:	dfc00a17 	ldw	ra,40(sp)
  81b9d8:	df000917 	ldw	fp,36(sp)
  81b9dc:	ddc00817 	ldw	r23,32(sp)
  81b9e0:	dd800717 	ldw	r22,28(sp)
  81b9e4:	dd400617 	ldw	r21,24(sp)
  81b9e8:	dd000517 	ldw	r20,20(sp)
  81b9ec:	dcc00417 	ldw	r19,16(sp)
  81b9f0:	dc800317 	ldw	r18,12(sp)
  81b9f4:	dc400217 	ldw	r17,8(sp)
  81b9f8:	dc000117 	ldw	r16,4(sp)
  81b9fc:	dec00b04 	addi	sp,sp,44
  81ba00:	f800283a 	ret
  81ba04:	a0800117 	ldw	r2,4(r20)
  81ba08:	80c00017 	ldw	r3,0(r16)
  81ba0c:	10bfffc4 	addi	r2,r2,-1
  81ba10:	15c01426 	beq	r2,r23,81ba64 <__call_exitprocs+0x154>
  81ba14:	80000015 	stw	zero,0(r16)
  81ba18:	183fde26 	beq	r3,zero,81b994 <__alt_mem_epcs_flash_controller_0+0xff812994>
  81ba1c:	95c8983a 	sll	r4,r18,r23
  81ba20:	a0806217 	ldw	r2,392(r20)
  81ba24:	a5800117 	ldw	r22,4(r20)
  81ba28:	2084703a 	and	r2,r4,r2
  81ba2c:	10000b26 	beq	r2,zero,81ba5c <__call_exitprocs+0x14c>
  81ba30:	a0806317 	ldw	r2,396(r20)
  81ba34:	2088703a 	and	r4,r4,r2
  81ba38:	20000c1e 	bne	r4,zero,81ba6c <__call_exitprocs+0x15c>
  81ba3c:	89400017 	ldw	r5,0(r17)
  81ba40:	d9000017 	ldw	r4,0(sp)
  81ba44:	183ee83a 	callr	r3
  81ba48:	a0800117 	ldw	r2,4(r20)
  81ba4c:	15bfbf1e 	bne	r2,r22,81b94c <__alt_mem_epcs_flash_controller_0+0xff81294c>
  81ba50:	98800017 	ldw	r2,0(r19)
  81ba54:	153fcf26 	beq	r2,r20,81b994 <__alt_mem_epcs_flash_controller_0+0xff812994>
  81ba58:	003fbc06 	br	81b94c <__alt_mem_epcs_flash_controller_0+0xff81294c>
  81ba5c:	183ee83a 	callr	r3
  81ba60:	003ff906 	br	81ba48 <__alt_mem_epcs_flash_controller_0+0xff812a48>
  81ba64:	a5c00115 	stw	r23,4(r20)
  81ba68:	003feb06 	br	81ba18 <__alt_mem_epcs_flash_controller_0+0xff812a18>
  81ba6c:	89000017 	ldw	r4,0(r17)
  81ba70:	183ee83a 	callr	r3
  81ba74:	003ff406 	br	81ba48 <__alt_mem_epcs_flash_controller_0+0xff812a48>
  81ba78:	a0800017 	ldw	r2,0(r20)
  81ba7c:	a027883a 	mov	r19,r20
  81ba80:	1029883a 	mov	r20,r2
  81ba84:	003fb606 	br	81b960 <__alt_mem_epcs_flash_controller_0+0xff812960>
  81ba88:	0005883a 	mov	r2,zero
  81ba8c:	003ffb06 	br	81ba7c <__alt_mem_epcs_flash_controller_0+0xff812a7c>

0081ba90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81ba90:	defffd04 	addi	sp,sp,-12
  81ba94:	df000215 	stw	fp,8(sp)
  81ba98:	df000204 	addi	fp,sp,8
  81ba9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81baa0:	d0208b45 	stb	zero,-32211(gp)
  81baa4:	e0bfff17 	ldw	r2,-4(fp)
  81baa8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81baac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81bab0:	10000226 	beq	r2,zero,81babc <_exit+0x2c>
    ALT_SIM_FAIL();
  81bab4:	002af070 	cmpltui	zero,zero,43969
  81bab8:	00000106 	br	81bac0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81babc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81bac0:	003fff06 	br	81bac0 <__alt_mem_epcs_flash_controller_0+0xff812ac0>
